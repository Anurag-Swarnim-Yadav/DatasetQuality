,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
1,<S2SV_ModStart> ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ; if (,0
2,<S2SV_ModStart> ) ) { GF_TrackWriter_ <S2SV_ModEnd> * writer = <S2SV_ModStart> writer = ( GF_TrackWriter_ <S2SV_ModEnd> * ) gf_list_get,0
3,<S2SV_ModStart> while ( c ) { if ( <S2SV_ModEnd> item > 0 <S2SV_ModStart> 0 ) { <S2SV_ModEnd> c = c <S2SV_ModStart> -> next ; },0
4,"<S2SV_ModStart>, u64 nr <S2SV_ModEnd>, struct pt_regs <S2SV_ModStart> perf_sample_data data ; <S2SV_ModEnd> preempt_disable_notrace ( ) <S2SV_ModStart> ( ) ; do_perf_sw_event ( PERF_TYPE_SOFTWARE, event_id, nr, nmi, & data, regs ) ;",0
5,"<S2SV_ModStart> EXT4_EXTENTS_FLAG ) { <S2SV_ModEnd> struct grub_ext4_extent_header * <S2SV_ModStart> leaf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } leaf = grub_ext4_find_leaf ( data, buf, ( struct grub_ext4_extent_header * ) inode -> blocks. dir_blocks, fileblock ) ; if (! leaf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) ( leaf + 1 ) ; <S2SV_ModStart> ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
6,"<S2SV_ModStart> ] ) { uint16_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> ] ; { uint16_t <S2SV_ModEnd> s0, s1 <S2SV_ModStart> ] ; } uint16_t <S2SV_ModEnd> step2 [ 8 <S2SV_ModStart> ] ; } uint16_t <S2SV_ModEnd> step3 [ 8 <S2SV_ModStart> ] ; } uint16_t <S2SV_ModEnd> step4 [ 8 <S2SV_ModStart> ] ; } uint16_t <S2SV_ModEnd> step5 [ 8 <S2SV_ModStart> ] ; } uint16_t <S2SV_ModEnd> step6 [ 8 <S2SV_ModStart> ] ; } uint16_t <S2SV_ModEnd> step7 [ 0 <S2SV_ModStart> ] ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
7,"<S2SV_ModStart>. makernotes. <S2SV_ModEnd> LensMount = LIBRAW_MOUNT_FixedLens <S2SV_ModStart>. LensMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; # endif # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; # endif parse_ciff ( save + hlen, len - hlen, 0 ) ; } if ( parse_tiff ( save + 6 ) ) apply_tiff ( ) ; fseek ( ifp, save + len, SEEK_SET ) ; } return 1 <S2SV_ModEnd> ; } <S2SV_null>",0
8,<S2SV_ModStart> ; int best_err <S2SV_ModEnd> ; int filt_mid <S2SV_ModStart> / 4 ; <S2SV_ModEnd> best_err = try_filter_frame <S2SV_ModStart> { if ( best_err <S2SV_ModEnd> < 0 ) <S2SV_ModStart> 0 ) { best_err <S2SV_ModEnd> = try_filter_frame ( <S2SV_ModStart> ; if ( best_err <S2SV_ModEnd> < 0 ) <S2SV_ModStart> 0 ) { best_err <S2SV_ModEnd> = try_filter_frame ( <S2SV_ModStart> ; if ( best_err <S2SV_ModEnd> < 0 ) <S2SV_ModStart> 0 ) { best_err <S2SV_ModEnd> = try_filter_frame ( <S2SV_ModStart> ; if ( best_err <S2SV_ModEnd> < 0 ) <S2SV_ModStart> 0 ) { best_err <S2SV_ModEnd> = try_filter_frame ( <S2SV_ModStart> ; if ( best_err <S2SV_ModEnd> < 0 ) <S2SV_ModStart> 0 ) { best_err <S2SV_ModEnd> = try_filter_frame ( <S2SV_ModStart> ; if ( best_err <S2SV_ModEnd> < 0 ) <S2SV_ModStart> 0 ) { best_err <S2SV_ModEnd> = try_filter_frame ( <S2SV_ModStart> ; if ( best_err <S2SV_ModEnd> < 0 ) <S2SV_ModStart> 0 ) { best_err <S2SV_ModEnd> = try_filter_frame ( <S2SV_ModStart> ; if ( best_err <S2SV_ModEnd> < 0 ) <S2SV_ModStart> 0 ) { best_err <S2SV_ModEnd> = try_filter_frame (,0
9,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
10,"<S2SV_ModStart> ( w, ( d >> i ) & 1, mvcomp -> bits [ i ] ) ; vp9_write_token ( w, vp9_mv_class_tree, mvcomp -> classes, & mv_class_encodings [ mv_class ] ) ; if ( mv_class == MV_CLASS_0 ) { vp9_write_token ( w, vp9_mv_class0_tree, mvcomp -> class0, & mv_class0_encodings [ d ] ) ; } else { vp9_write_token ( w, vp9_mv_fp_tree, mv_class == MV_CLASS_0? mvcomp -> class0_fp [ d ] : mvcomp -> fp, & mv_fp_encodings [ fr ] ) ; } <S2SV_ModEnd> vp9_write ( w",0
11,<S2SV_ModStart> rxBlockSzx = COAP_BLOCK_SIZE_32 ; else if ( blockSize == 24 ) request -> rxBlockSzx = COAP_BLOCK_SIZE_24 ; else if ( blockSize == 16 ) request -> rxBlockSzx = COAP_BLOCK_SIZE_16 ; else if ( blockSize == 32 ) request -> rxBlockSzx = COAP_BLOCK_SIZE_32 ; else if ( blockSize == 64 ) request -> rxBlockSzx = COAP_BLOCK_SIZE_64 ; else if ( blockSize == 128 ) request -> rxBlockSzx = COAP_BLOCK_SIZE_128,0
12,"<S2SV_ModStart> ( ndo, ""%04x, <S2SV_blank> "", EXTRACT_16BITS ( ptr ) ) ) ; ptr ++ ; ND_PRINT ( ( ndo, ""%04x <S2SV_blank> "", EXTRACT_16BITS ( ptr ) ) ) ; ptr ++ ; ND_PRINT ( ( ndo, ""%s"", tok2str ( l2tp_cc_direction2str, ""Direction-#%u"", * ( ( const u_char * ) ptr ++ ) ) ) ) ; ptr ++ ; ND_PRINT ( ( ndo,",0
13,<S2SV_ModStart> * authkey ; if ( dest_keyring ) { key_put ( dest_keyring ) ; * _dest_keyring = NULL ; return ; } <S2SV_ModEnd> switch ( cred <S2SV_ModStart> ( dest_keyring ) { key_put ( dest_keyring ) ; * _dest_keyring = NULL ; return ; } <S2SV_ModEnd> case KEY_REQKEY_DEFL_THREAD_KEYRING : <S2SV_ModStart> ( dest_keyring ) { key_put ( dest_keyring ) ; * _dest_keyring = NULL ; return ; } <S2SV_ModEnd> case KEY_REQKEY_DEFL_PROCESS_KEYRING : <S2SV_ModStart> ( dest_keyring ) { key_put ( dest_keyring ) ; * _dest_keyring = NULL ; return ; } <S2SV_ModEnd> case KEY_REQKEY_DEFL_SESSION_KEYRING : <S2SV_ModStart> ( dest_keyring ) { key_put ( dest_keyring ) ; return ; } <S2SV_ModEnd> case KEY_REQKEY_DEFL_USER_SESSION_KEYRING : <S2SV_ModStart> ( dest_keyring ) { key_put ( dest_keyring ) ; return ; } <S2SV_ModEnd> case KEY_REQKEY_DEFL_GROUP_KEYRING,0
14,"<S2SV_ModStart> = NULL ; ret = get_negotiable_mechs ( minor_status, spcred, GSS_C_INITIATE, & sc -> mech_set ) ; if ( ret!= GSS_S_COMPLETE ) goto cleanup ; sc -> internal_mech = & sc -> mech_set -> elements [ 0 ] ; if ( put_mech_set ( sc -> mech_set, & sc -> DER_mechTypes ) < 0 ) { ret = GSS_S_FAILURE ; goto cleanup ; } sc -> ctx_handle = GSS_C_NO_CONTEXT ; * ctx = ( gss_ctx_id_t ) sc ; sc = NULL ; * tokflag = INIT_TOKEN_SEND ; ret = GSS_S_CONTINUE_NEEDED ; goto cleanup ; } <S2SV_ModStart> == NULL ) { ret = GSS_S_FAILURE ; <S2SV_ModStart> return GSS_S_FAILURE ; }",0
15,<S2SV_ModStart> ; tm = localtime_r <S2SV_ModEnd> ( & t,0
16,"<S2SV_ModStart> password ) ) ; if ( type == PW_OLD_PASSWORD ) { attr = find_attribute ( request, PW_OLD_PASSWORD ) ; } if (! attr ) { add_attribute ( request, type, hashed, length ) ; } else { memcpy ( attr -> data, hashed, length ) ; } } MD5Init ( & md5_secret ) ; MD5Update ( & md5_secret, ( unsigned char * ) secret, strlen ( secret ) ) ; my_md5 = md5_secret ; MD5Update ( & my_md5, vector, AUTH_VECTOR_LEN ) ; MD5Final ( misc, & my_md5 ) ; xor ( hashed, misc, AUTH_PASS_LEN ) ; for ( i = 1 ; i < ( length >> 4 ) ; i ++ ) { my_md5 = md5_secret ; MD5Update ( & my_md5, & hashed [ ( i - 1 ) * AUTH_PASS_LEN ], AUTH_PASS_LEN ) ; MD5Final ( misc, & my_md5 )",0
17,<S2SV_ModStart> == p ) { * errnop = ERANGE ; <S2SV_ModStart> goto not_found ; } <S2SV_ModStart> machine ) ) { * errnop = ERANGE ; <S2SV_ModStart> goto not_found ; } <S2SV_ModStart> BUS_ERROR_NO_SUCH_USER_MAPPING ) ) { * errnop = ERANGE ; <S2SV_ModStart> goto not_found ; },0
18,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",1
19,"<S2SV_ModStart> ; select ( FD_ISSET ( <S2SV_ModStart> reader -> bytes_available_fd, & read_fds ), NULL, NULL, & timeout ) ; FD_CLR ( reader -> bytes_available_fd, & read_fds ) ; FD_CLR ( reader -> bytes_available_fd, & read_fds ) ; FD_CLR ( reader -> bytes_available_fd, & read_fds ) ; FD_CLR ( reader -> bytes_available_fd, & read_fds ) ; FD_CLR ( reader -> bytes_available_fd, & read_fds ) ; FD_CLR ( reader -> bytes_available_fd, & read_fds ) ; FD_CLR ( reader -> bytes_available_fd, & read_fds ) ; FD_CLR ( reader -> bytes_available_fd, & read_fds ) ; FD_CLR ( reader -> bytes_available_fd, & read_fds ) ; FD_CLR ( reader -> bytes_available_fd, & read_fds ) ; return true <S2SV_ModEnd> ; } <S2SV_",0
20,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int detect_transition_to_still (,0
21,"<S2SV_ModStart> return ret ; <S2SV_ModEnd> ret = ext4_convert_unwritten_extents <S2SV_ModStart> printk ( KERN_EMERG ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> unwritten <S2SV_blank> extents, <S2SV_blank> error <S2SV_blank> is <S2SV_blank> %d"" <S2SV_ModEnd> "" <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__ <S2SV_ModStart> ret ; } if ( offset + size <= i_size_read ( inode ) ) ret = ext4_convert_unwritten_extents ( inode, offset, size ) ; if ( ret < 0 ) { printk ( KERN_EMERG ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> unwritten"" ""extents <S2SV_blank> to <S2SV_blank> written <S2SV_blank> extents, <S2SV_blank> error <S2SV_blank> is <S2SV_blank> %d"" "" <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, ret, inode -> i_ino ) ; return ret ; }",0
22,<S2SV_ModStart> alg ) { <S2SV_ModEnd> alg = crypto_alg_lookup,0
23,"<S2SV_ModStart> += 3 ; <S2SV_ModEnd> ptr = strchr <S2SV_ModStart>,'<S2SV_blank>') ; if (! ptr <S2SV_ModEnd> ) goto out_err <S2SV_ModStart> goto out_err ; <S2SV_ModEnd> ptr = strchr <S2SV_ModStart>, '\\n' ) ; if (! ptr <S2SV_ModEnd> ) goto out_err",0
24,<S2SV_ModStart> BYTE flags ; UINT32 <S2SV_ModEnd> length ; Stream_Read_UINT32,0
25,"<S2SV_ModStart> ret ) { av_log ( s, AV_LOG_ERROR, ""track_header <S2SV_blank> failed <S2SV_blank> with <S2SV_blank> error <S2SV_blank> %d\\n"", ret ) ; <S2SV_ModStart> ret ) { av_log ( s, AV_LOG_ERROR, ""track_header <S2SV_blank> failed <S2SV_blank> with <S2SV_blank> error <S2SV_blank> %d\\n"", ret ) ; <S2SV_ModStart> ret ) { av_log ( s, AV_LOG_ERROR, ""track_header <S2SV_blank> failed <S2SV_blank> with <S2SV_blank> error <S2SV_blank> %d\\n"", ret ) ; <S2SV_ModStart> ret ) { av_log ( s, AV_LOG_ERROR, ""track_header <S2SV_blank> failed <S2SV_blank> with <S2SV_blank> error <S2SV_blank> %d\\n"", ret ) ; <S2SV_ModStart> ret ) { av_log ( s, AV_LOG_ERROR, ""track_header <S2SV_blank> failed <S2SV_blank> with <S2SV_blank> error <S2SV_blank> %d\\n"", ret ) ; <S2SV_ModStart> ret ) { av_log ( s, AV_LOG_ERROR, ""track_header <S2SV_blank> failed <S2SV_blank> with <S2SV_blank> error <S2SV_blank> %d\\n"", ret ) ; <S2SV_ModStart> ret ) { av_log ( s, AV_LOG_ERROR, ""track_header <S2SV_blank> failed <S2SV_blank> with <S2SV_blank> error <S2SV_blank> %d\\n"", ret ) ;",0
26,"<S2SV_ModStart> 1 ; } ret = <S2SV_ModEnd> mount_entry_on_generic ( mntent <S2SV_ModStart> path ) ; if ( ret < 0 ) { ERROR ( ""mount_entry_on_generic <S2SV_blank> failed"" ) ; return - 1 ; } return ret ;",0
27,"<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> -> dev, ""Invalid <S2SV_blank> register <S2SV_blank> size: <S2SV_blank> %d\\n"" <S2SV_ModEnd>, io -> <S2SV_ModStart> io -> regsize ) ; return - EINVAL ; } io -> io_cleanup = mem_cleanup ; switch ( io -> regsize ) { case 1 : io -> inputb = intf_mem_inb ; io -> outputb = intf_mem_outb ; break ; case 2 : io -> inputb = intf_mem_inw ; io -> outputb = intf_mem_outw ; break ; case 4 : io -> inputb = intf_mem_inl ; io -> outputb = intf_mem_outl ; break ; # ifdef readq case 8 : io -> inputb = mem_inq ; io -> outputb = mem_outq ; break ; # endif default : dev_warn ( io -> dev, ""Invalid <S2SV_blank> register <S2SV_blank> size: <S2SV_blank> %d\\n""",0
28,"<S2SV_ModStart> MagickRealType ) ( pixel & ( size_t ) ( value + 0.5 ) ) ; break ; } case CosineEvaluateOperator : { result = ( MagickRealType ) ( QuantumRange * ( 0.5 * cos ( ( double ) ( 2.0 * MagickPI * QuantumScale * pixel * value ) ) + 0.5 ) ) ; break ; } case DivideEvaluateOperator : { result = pixel / ( value == 0.0? 1.0 : value ) ; break ; } case GaussianNoiseEvaluateOperator : { result = ( MagickRealType ) GenerateDifferentialNoise ( random_info, pixel, GaussianNoise, value ) ; break ; } case LaplacianNoiseEvaluateOperator : { result = ( MagickRealType ) GenerateDifferentialNoise ( random_info, pixel, LaplacianNoise, value <S2SV_ModEnd> ) ; break",0
29,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return ret?,0
30,<S2SV_ModStart> ; vpx_codec_enc_cfg_map_t * enc_cfg_map <S2SV_ModEnd> ; if ( <S2SV_ModStart> = VPX_CODEC_INVALID_PARAM ; enc_cfg_map <S2SV_ModEnd> = iface -> <S2SV_ModStart> enc. cfg_maps ; while ( enc_cfg_map <S2SV_ModEnd> -> usage >= <S2SV_ModStart> { if ( enc_cfg_map <S2SV_ModEnd> -> usage == <S2SV_ModStart> * cfg = enc_cfg_map <S2SV_ModEnd> -> cfg ;,0
31,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
32,"<S2SV_ModStart> void show_progress ( long <S2SV_ModEnd> frame_in, int <S2SV_ModStart> ( stderr, ""%ld <S2SV_blank> decoded <S2SV_blank> frames/%ld <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" <S2SV_ModEnd> PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", <S2SV_ModStart> PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", ( long ) frame_in, ( long ) <S2SV_ModEnd> frame_out, dx_time",0
33,<S2SV_ModStart> { PerlIO_printf ( DBIc_LOGPIO <S2SV_ModEnd> ( imp_xxh ) <S2SV_ModStart> ) PerlIO_printf ( DBIc_LOGPIO <S2SV_ModEnd> ( imp_xxh ) <S2SV_ModStart> ) PerlIO_printf ( DBIc_LOGPIO <S2SV_ModEnd> ( imp_xxh ) <S2SV_ModStart> ) PerlIO_printf ( DBIc_LOGPIO <S2SV_ModEnd> ( imp_xxh ) <S2SV_ModStart> ) PerlIO_printf ( DBIc_LOGPIO <S2SV_ModEnd> ( imp_xxh ) <S2SV_ModStart> ) PerlIO_printf ( DBIc_LOGPIO <S2SV_ModEnd> ( imp_xxh ) <S2SV_ModStart> ) PerlIO_printf ( DBIc_LOGPIO <S2SV_ModEnd> ( imp_xxh ) <S2SV_ModStart> ) PerlIO_printf ( DBIc_LOGPIO <S2SV_ModEnd> ( imp_xxh ) <S2SV_ModStart> ) PerlIO_printf ( DBIc_LOGPIO <S2SV_ModEnd> ( imp_xxh ) <S2SV_ModStart> ) PerlIO_printf ( DBIc_LOGPIO <S2SV_ModEnd> ( imp_xxh ) <S2SV_ModStart> ) PerlIO_printf ( DBIc_LOGPIO <S2SV_ModEnd> ( imp_xxh ) <S2SV_ModStart> ) PerlIO_printf ( DBIc_LOGPIO <S2SV_ModEnd> ( imp_xxh ),0
34,"<S2SV_ModStart>, ENC28J60_REG_EWRPTL, MSB ( ENC28J60_RX_BUFFER_START <S2SV_ModEnd> ) ) ; <S2SV_ModStart>, ENC28J60_REG_EWRPTH, LSB ( ENC28J60_RX_BUFFER_START <S2SV_ModEnd> ) ) ; <S2SV_ModStart>, ENC28J60_REG_ETXNDL, MSB ( ENC28J60_RX_BUFFER_START <S2SV_ModEnd> + length ) <S2SV_ModStart>, ENC28J60_REG_EWRPTL, LSB ( ENC28J60_RX_BUFFER_START <S2SV_ModEnd> ) ) ; <S2SV_ModStart>, ENC28J60_REG_EWRPTH, MSB ( ENC28J60_RX_BUFFER_START <S2SV_ModEnd> + length ) <S2SV_ModStart>, ENC28J60_REG_ETXNDH, MSB ( ENC28J60_RX_BUFFER_START <S2SV_ModEnd> + length )",0
35,"<S2SV_ModStart> value ) ; # if PY_MAJOR_VERSION >= 3 value = ast2obj_int ( o -> lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; # else <S2SV_ModStart> value ) ; # endif <S2SV_ModStart> value ) ; # if PY_MAJOR_VERSION >= 3 value = ast2obj_int ( o -> end_lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; # else <S2SV_ModStart> value ) ; # endif",0
36,"<S2SV_ModStart> && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } } else if (! strcmp ( func, ""page/delete"" ) ) { char * page = http_request_param_get ( req, ""page"" ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } } else if (! strcmp ( func, ""page/exists"" ) ) { char * page = http_request_param_get ( req, ""page"" ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page",0
37,"<S2SV_ModStart> int mb_rows = ( <S2SV_ModStart> y_width >> 4 ) + 1 <S2SV_ModStart> ; mbr < ( int ) <S2SV_ModStart> -> uv_stride, ( int ) <S2SV_ModStart> -> uv_stride, ( int ) <S2SV_ModStart> -> uv_stride, ( int ) <S2SV_ModStart> -> uv_width, ( int ) <S2SV_ModStart> limits, 8 ) ; vp8_post_proc_down_and_across_mb_row ( source -> u_buffer + 8 * mbr * source -> uv_stride, source -> u_buffer + 8 * mbr * source -> uv_stride, source -> v_buffer + 8 * mbr * source -> uv_stride, source -> uv_width, limits, 8 ) ; vp8_post_proc_down_and_across_mb_row ( source -> v_buffer + 8 * mbr * source -> uv_stride, source -> v_buffer + 8 * mbr * source -> uv_stride, source -> uv_stride, source -> v_width, limits, 8",0
38,"<S2SV_ModStart> = mb_cache_entry_alloc ( ext4_xattr_cache <S2SV_ModEnd>, GFP_NOFS ) <S2SV_ModStart> = mb_cache_entry_insert ( ext4_xattr_cache <S2SV_ModEnd>, bh -> <S2SV_ModStart> ; mb_cache_entry_release ( ext4_xattr_cache <S2SV_ModEnd> ) ; }",0
39,<S2SV_ModStart> ) ) ; char * res = <S2SV_ModEnd> r_socket_http_answer ( s <S2SV_ModStart> rlen ) ; free ( uri ) ; return res ;,0
40,"<S2SV_ModStart> ip_options * opt <S2SV_ModEnd> ; if ( <S2SV_ModStart> EFAULT ; } opt = ip_options_get_alloc ( optlen ) ; if (! opt ) return - ENOMEM ; if ( copy_from_user ( opt, data, optlen ) ) { kfree ( opt ) ; return - EFAULT ; } opt = ip_options_get_finish ( net, optp, opt, optlen ) ; return 0 <S2SV_ModEnd> ; } <S2SV_null>",0
41,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|truncated]"" <S2SV_ModEnd> ) ) ;",0
42,"<S2SV_ModStart> ) N_ ( "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode, & new_mode, & acl ) ; if ( ret ) goto out <S2SV_ModEnd> ; } break",1
44,"<S2SV_ModStart> ( cmpt = jas_malloc ( sizeof ( jas_image_cmpt_t ) ) ) ) { goto error ; } if (! jas_safe_intfast32_add ( tlx, width, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ) { goto error ; } if (! ( cmpt = jas_malloc ( sizeof ( jas_image_cmpt_t ) ) ) ) { goto error ; } cmpt -> type_ = JAS_IMAGE_CT_UNKNOWN ; cmpt -> tlx_ = tlx ; cmpt -> tly_ = tly ; cmpt -> hstep_ = hstep ; cmpt -> vstep_ = vstep ; cmpt -> prec_ = depth ; cmpt -> sgnd_ = sgnd ; cmpt -> stream_ =",0
45,<S2SV_ModStart> dp == datalen ) { flags &= ~ FLAG_LAST_MATCHED ; pc += asn1_op_lengths [ op ] ; goto next_op ; } flags = 0 ; hdr = 2 ; if ( unlikely ( dp >= datalen - 1 ) <S2SV_ModStart> - 1 ) <S2SV_ModEnd> ) goto machine_overrun_error <S2SV_ModStart> - 1 ) <S2SV_ModEnd> goto machine_overrun_error ; <S2SV_ModStart> - 1 ) <S2SV_ModEnd> goto machine_overrun_error ; <S2SV_ModStart> - 1 ) <S2SV_ModEnd> goto machine_overrun_error ; <S2SV_ModStart> - 1 ) <S2SV_ModEnd> goto machine_overrun_error ; <S2SV_ModStart> - 1 ) <S2SV_ModEnd> goto machine_overrun_error ; <S2SV_ModStart> - 1 ) <S2SV_ModEnd> goto machine_overrun_error ; <S2SV_ModStart> - 1 ) <S2SV_ModEnd> goto machine_overrun_error ; <S2SV_ModStart> - 1 ) <S2SV_ModEnd> goto machine_overrun_error ; <S2SV_ModStart> - 1 ) <S2SV_ModEnd> goto machine_overrun_error ; <S2SV_ModStart> - 1 ) <S2SV_ModEnd> goto machine_overrun_error ; <S2SV_ModStart> - 1 ) <S2SV_ModEnd> goto machine_overrun_error ; <S2SV_ModStart> - 1 ) <S2SV_ModEnd> goto machine_overrun_error ;,0
46,"<S2SV_ModStart> acl_len ) { <S2SV_ModEnd> uint32_t attrlen, <S2SV_ModStart> attrlen, & req -> rq_rcv_buf <S2SV_ModEnd> ) )!= <S2SV_ModStart> recvd ) { dprintk_ratelimited <S2SV_ModEnd> ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"" <S2SV_ModStart> ; } else { dprintk_ratelimited <S2SV_ModEnd> ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"" <S2SV_ModStart> - EOPNOTSUPP ; }",0
47,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> ( nsec, NSEC_PER_USEC <S2SV_ModEnd>, & rem <S2SV_ModStart> = rem / NSEC_PER_SEC <S2SV_ModEnd> ; } <S2SV_null>",0
48,"<S2SV_ModStart> tok ) ; if ( owner && * owner ) { if ( snumber ( owner ) ) { uid = ( int ) stoi ( owner ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { uid = HTTP -> uid ; } else { uid = userToID ( owner ) ; } } group = stok ( tok, "":"", & perms ) ; if ( group && * group ) { if ( snumber ( group ) ) { gid = ( int ) stoi ( group ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { gid = HTTP -> gid ; } else { gid = groupToID ( group ) ; } }",0
49,"<S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; <S2SV_ModEnd> if ( addr <S2SV_ModStart> addr ; } # if CONFIG_MEM_MANAGER if ( vpx_mm_create_heap_memory ( ) < 0 ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> create <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ; ) } number_aau = ( ( size + align - 1 + ADDRESS_STORAGE_SIZE ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) + 1 ; addr = hmm_alloc ( & hmm_d, number_aau ) ; # endif",0
50,"<S2SV_ModStart> ; long long * export_index_table = malloc ( sizeof ( long long ) * indexes ) ; if ( export_index_table == NULL ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } <S2SV_ModEnd> res = read_fs_bytes <S2SV_ModStart> } SQUASHFS_INSWAP_LOOKUP_BLOCKS ( export_index_table, indexes ) ; free ( export_index_table ) ; export_index_table = malloc ( sizeof ( long long ) * indexes ) ; if ( export_index_table == NULL ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } memcpy ( export_index_table, export_index_table, indexes * sizeof ( long long ) ) <S2SV_ModEnd> ; * table_start <S2SV_ModStart> 0 ] ; free ( export_index_table ) ;",0
51,<S2SV_ModStart> ; } else { <S2SV_ModStart> p1 ) ; },0
52,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> # if CONFIG_VP8_ENCODER <S2SV_ModStart> endif # if CONFIG_VP9_ENCODER } else if ( strcmp ( global -> codec -> name, ""vp9"" ) == 0 ) { ctrl_args = vp9_args ; ctrl_args_map = vp9_arg_ctrl_map ; # endif } for ( argi = argj = argv ; ( * argj = * argi ) ; argi += arg. argv_step ) { arg. argv_step = 1 ; if ( eos_mark_found ) { argj ++ ; continue ; } else if (! strcmp ( * argj, ""--"" ) ) { eos_mark_found = 1 ; continue ; } } <S2SV_ModEnd> if ( arg_match",0
53,"<S2SV_ModStart> -> protocol ) { SSL_SESSION * sess = SSL_get1_session ( c -> ssl ) ; if ( sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } } <S2SV_ModStart> return 0 ; } <S2SV_ModStart>. names ) { SSL_SESSION * sess = SSL_get1_session ( c -> ssl ) ; if ( sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } } }",0
54,"<S2SV_ModStart> ; if ( crypto_memneq <S2SV_ModEnd> ( cmac, <S2SV_ModStart> computed_cmac, AT91_AES_BLOCK_SIZE_BYTE, crypto_memneq ( cmac, AT91_AES_BLOCK_SIZE_BYTE, crypto_memneq ( computed_cmac, AT91_AES_BLOCK_SIZE_BYTE, crypto_memneq ( cmac, AT91_AES_BLOCK_SIZE_BYTE, crypto_memneq ( cmac, AT91_AES_BLOCK_SIZE_BYTE, crypto_memneq ( cmac, computed_cmac, AT91_AES_BLOCK_SIZE_BYTE, crypto_memneq ( cmac, AT91_AES_BLOCK_SIZE_BYTE, crypto_memneq ( computed_cmac, AT91_AES_BLOCK_SIZE_BYTE, crypto_memneq ( cmac, AT91_AES_BLOCK_SIZE_BYTE, crypto_memneq ( cmac, AT91_AES_BLOCK_SIZE_BYTE, crypto_memneq ( cmac, computed_cmac, AT91_AES_BLOCK_SIZE_BYTE, crypto_memneq ( cmac,",0
55,<S2SV_ModStart> -= bits_used ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
56,"<S2SV_ModStart> 0x07 char magick [ 12 ] ; Image * image ; int opcode, operand, status ; MagickStatusType flags ; MagickSizeType number_pixels ; MemoryInfo * pixel_info ; Quantum index ; unsigned char * p ; size_t bits_per_pixel, number_colormaps, number_planes_filled, one, pixel_info_length ; ssize_t count, offset, y ; unsigned char background_color [ 256 ], * colormap, plane, * pixels ; count = ReadBlob ( image, 2, ( unsigned char * ) magick ) ; if ( ( count!= 2 ) || ( memcmp ( magick, ""\\122\\314"", 2 )!= 0 ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; do { <S2SV_ModEnd> image -> page <S2SV_ModStart> image ) ; <S2SV_ModEnd> flags = (",0
57,"<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> altsetting [ 0 ]. desc. bNumEndpoints < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; error = - EINVAL ; goto err_free_urb ; }",1
58,"<S2SV_ModStart> stateid, int flags <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, flags <S2SV_ModEnd> ) ; write_sequnlock",0
59,"<S2SV_ModStart> dir = ""/etc"" ; fprintf ( stderr, ""%s:%d\\n"", __func__, __LINE__ ) ; fprintf ( stderr, ""%s:%d\\n"", __func__, __LINE__ ) ; fprintf ( stderr, ""%s:%d\\n"", __func__, __LINE__ ) ; fprintf ( stderr, ""%s:%d\\n"", __func__, __LINE__ ) ; fprintf ( stderr, ""%s:%d\\n"", __func__, __LINE__ ) ; fprintf ( stderr, ""%s:%d\\n"", __func__, __LINE__ ) ; fprintf ( stderr, ""%s:%d\\n"", __func__, __LINE__ ) ; fprintf ( stderr, ""%s:%d\\n"", __func__, __LINE__ ) ; fprintf ( stderr, ""%s:%d\\n"", __func__, __LINE__ )",0
60,"<S2SV_ModStart> ps_bitstrm ) ; ps_pps -> i1_pic_id = CLIP3 ( ps_pps -> i1_pic_id, 0, MAX_PPS_CNT - 1 ) ; <S2SV_ModStart> ps_bitstrm ) ; ps_pps -> i1_seq_id = CLIP3 ( ps_pps -> i1_seq_id, 0, MAX_SPS_CNT - 2 ) ; <S2SV_ModStart> ps_bitstrm ) ; ps_pps -> i1_pic_id = CLIP3 ( ps_pps -> i1_pic_id, 0, MAX_PPS_CNT - 1 ) ; <S2SV_ModStart> ps_bitstrm ) ; ps_pps -> i1_seq_id = CLIP3 ( ps_pps -> i1_seq_id, 0, MAX_SPS_CNT - 1 ) ; <S2SV_ModStart> ps_bitstrm ) ; ps_pps -> i1_pic_id = CLIP3 ( ps_pps -> i1_pic_id, 0, MAX_PPS_CNT - 1 ) ;",0
61,<S2SV_ModStart> arg ) ; # ifdef WITH_RFC2640 <S2SV_ModStart> arg ) ; # endif <S2SV_ModStart> arg ) ; # ifdef WITH_RFC2640 <S2SV_ModStart> arg ) ; # endif <S2SV_ModStart> arg ) ; # ifdef WITH_RFC2640 <S2SV_ModStart> arg ) ; # endif <S2SV_ModStart> arg ) ; # ifdef WITH_RFC2640 <S2SV_ModStart> arg ) ; # endif <S2SV_ModStart> arg ) ; # ifdef WITH_RFC2640 <S2SV_ModStart> arg ) ; # endif <S2SV_ModStart> arg ) ; # ifdef WITH_RFC2640 <S2SV_ModStart> arg ) ; # endif <S2SV_ModStart> arg ) ; # ifdef WITH_RFC2640 <S2SV_ModStart> arg ) ; # endif,0
62,"<S2SV_ModStart> const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride, src -> x_stride, src -> y_stride, src -> uv_stride, src -> alpha_stride } ; int i ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y ) ; } <S2SV_ModEnd> for ( i",0
63,<S2SV_ModStart> args ) { vpx_codec_err_t ret = VPX_CODEC_OK ; <S2SV_ModStart> int ) ; ret = <S2SV_ModEnd> VPX_CODEC_OK ; } <S2SV_ModStart> VPX_CODEC_OK ; } return ret ; },0
64,"<S2SV_ModStart> == READ ) return __blockdev_direct_IO ( iocb, inode, inode -> i_sb -> s_bdev, iter, ocfs2_get_block, ocfs2_dio_end_io, NULL, 0 ) <S2SV_ModEnd> ; else get_block <S2SV_ModStart> == READ ) return __blockdev_direct_IO ( iocb, inode, inode -> i_sb -> s_bdev, iter, ocfs2_get_block, ocfs2_dio_end_io, NULL, 0 ) <S2SV_ModEnd> ; else get_block <S2SV_ModStart> == READ ) return __blockdev_direct_IO ( iocb, inode, inode -> i_sb -> s_bdev, iter, ocfs2_get_block, ocfs2_dio_end_io, NULL, 0 ) <S2SV_ModEnd> ; else get_block <S2SV_ModStart> == READ ) return __blockdev_direct_IO ( iocb, inode, inode -> i_sb -> s_bdev, iter, ocfs2_get_block, ocfs2_dio_end_io, NULL, 0 ) <S2SV_ModEnd> ; } <S2SV_null>",0
65,"<S2SV_ModStart>, ""%79s <S2SV_blank> %[^\\n]\\n"", def, strparm ) == 2 ) { if ( strparm [ 0 ] == \'""\' ) { isstring = true ; len = strlen ( strparm ) ; newstring = ( char * ) malloc ( len ) ; strparm [ len - 1 ] = 0 ; strcpy ( newstring, strparm + 1 ) ; } else if ( strparm [ 0 ] == '0' && strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else sscanf ( strparm, ""%i"", & parm ) ; for ( i = 0 ; i < numdefaults ; i ++ ) if (! strcmp ( def, defaults [ i ]. name ) ) { if (! isstring ) * defaults [ i ]. location = parm ; else * defaults [ i ]. location = ( int ) newstring ; break ; } } } <S2SV_ModEnd> for ( i",0
66,<S2SV_ModStart> PyCompilerFlags cf ; expr_ty <S2SV_ModEnd> mod ; char <S2SV_ModStart> Py_ssize_t len ; int <S2SV_ModEnd> i ; assert <S2SV_ModStart> == NULL ) { PyMem_RawFree ( str ) ; <S2SV_ModStart> return NULL ; } <S2SV_ModStart> == NULL ) { PyMem_RawFree ( str ) ; <S2SV_ModStart> return NULL ; } <S2SV_ModStart>! mod ) { PyMem_RawFree ( str ) ; <S2SV_ModStart> return NULL ; },0
67,"<S2SV_ModStart> { cJSON * child <S2SV_ModEnd> = object -> <S2SV_ModStart> ; while ( child <S2SV_ModEnd> && cJSON_strcasecmp ( <S2SV_ModStart> && cJSON_strcasecmp ( child <S2SV_ModEnd> -> string, <S2SV_ModStart> string ) ) child = child <S2SV_ModEnd> -> next ; <S2SV_ModStart> next ; return child <S2SV_ModEnd> ; } <S2SV_null>",0
68,<S2SV_ModStart> size ) ; if ( px -> ft == NULL ) { return FALSE ; },0
69,"<S2SV_ModStart>, val_l ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ;",0
70,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
71,"<S2SV_ModStart> alpha_buffer } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ], src -> y_stride, src -> uv_stride, src -> v_stride, src -> alpha_stride, mi_row, mi_col, sf, src -> subsampling_x, pd -> subsampling_y ) ; } } for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { <S2SV_ModStart> alpha_stride } ; <S2SV_ModEnd> struct macroblockd_plane *",0
72,"<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ; for ( iov = msg -> msg_iov, iovlen = msg -> msg_iovlen ; iovlen > 0 ; iovlen --, iov ++ ) { unsigned long seglen = iov -> iov_len ; char __user * from = iov -> iov_base ; struct skcipher_sg_list * tsgl = list_first_entry ( & ctx -> tsgl, struct skcipher_sg_list, list ) ; sg = sgl -> sg ; while (! sg -> length ) sg ++ ; } <S2SV_ModEnd> for ( iov",0
73,"<S2SV_ModStart> ) ) ; CHECK_MEM_ERROR ( cpi -> mb_activity_map, vpx_calloc ( sizeof ( unsigned int ), cpi -> common. MBs ) ) ;",0
74,<S2SV_ModStart> user ) { cleanup_srcu_struct ( & user -> release_barrier ) ; <S2SV_ModStart> _ipmi_destroy_user ( user <S2SV_ModEnd> ) ; kref_put,0
75,"<S2SV_ModStart> ; int sl ; int limit = 0 ; mongo_message * mm ; if ( cursor -> limit > 0 ) limit = cursor -> limit - cursor -> seen ; mm = mongo_message_create ( 16 + 4 + sl + 4 + 8, 0, 0, MONGO_OP_GET_MORE ) ; data = & mm -> data ; sl <S2SV_ModStart> + 1 ; <S2SV_ModEnd> mm = mongo_message_create",0
76,"<S2SV_ModStart> is_async = 0 ; if ( c -> c_feature_version < 6 ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } if ( c -> c_feature_version < 7 ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.7 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } for_ch = CHILD ( n, 1 + is_async ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL",0
77,"<S2SV_ModStart> NULL ; } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) return - ENOMEM ; dst_state -> frame [ i ] = dst ; } err = copy_func_state ( dst, src -> frame [ i ] ) ; if ( err ) return err ; }",0
78,"<S2SV_ModStart> * mi_8x8, <S2SV_ModEnd> const MB_MODE_INFO * <S2SV_ModStart>, get_y_mode_probs ( <S2SV_ModEnd> above_mi, left_mi <S2SV_ModStart>, get_y_mode_probs ( <S2SV_ModEnd> above_mi, left_mi <S2SV_ModStart>, get_y_mode_probs ( <S2SV_ModEnd> left_mi, block <S2SV_ModStart> } } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
79,"<S2SV_ModStart> ""Action <S2SV_blank> overflow!!"" ) ; # ifdef DEBUG fprintf ( stderr, ""%d:\\tACTION[%3.3d]: <S2SV_blank> %s\\n"", actions [ n ]. SWF_ACTIONRECORD. Offset, n, actionName ( actions [ n ]. SWF_ACTIONRECORD. ActionCode ) ) ; # endif <S2SV_ModStart> ] ) ; # ifdef DEBUG fprintf ( stderr, ""%d:\\tACTION[%3.3d]: <S2SV_blank> %s\\n"", actions [ n ]. SWF_ACTIONRECORD. Offset, n, actionName ( actions [ n ]. SWF_ACTIONRECORD. ActionCode ) ) ; # endif <S2SV_ModStart> ] ) ; # ifdef DEBUG fprintf ( stderr, ""%d:\\tACTION[%3.3d]: <S2SV_blank> %s\\n"", actions [ n ]. SWF_ACTIONRECORD. Offset, n, actionName ( actions [ n ]. SWF_ACTIONRECORD. ActionCode ) ) ; # endif <S2SV_ModStart> ] ) ; # ifdef DEBUG fprintf ( stderr, ""%d:\\tACTION[%3.3d]: <S2SV_blank> %s\\n"", actions [ n ]. SWF_ACTIONRECORD. Offset, n, actionName ( actions [ n",0
80,"<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> n = EXTRACT_32BITS <S2SV_ModStart> io ; } n = EXTRACT_32BITS ( & prep -> pp_n ) ; ps = ( const struct pgstate * ) ( prep + 1 ) ; while ( -- n >= 0 && ND_TTEST ( * ps ) ) { const struct id_off * io, * ie ; char c = '<' ; ND_PRINT ( ( ndo, "" <S2SV_blank> %u/%s:%u"", EXTRACT_32BITS ( & ps -> slot ), ipaddr_string ( ndo, & ps -> page. p_sid ), EXTRACT_32BITS ( & ps -> page. p_uid ) ) ) ; io = ( const struct id_off * ) ( ps + 1 ) ; }",0
81,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
82,"<S2SV_ModStart> + pTable -> szModuleArg <S2SV_ModEnd> ) ; char <S2SV_ModStart>, pTable -> szModuleArg <S2SV_ModEnd>, nBytes ) <S2SV_ModStart> = pTable -> szModuleArg <S2SV_ModEnd> ++ ; azModuleArg <S2SV_ModStart> ; pTable -> szModuleArg <S2SV_ModEnd> = azModuleArg ;",0
83,<S2SV_ModStart> -> qmf_out_buf [ j <S2SV_ModEnd> + HBE_OPER_WIN_LEN - <S2SV_ModStart> -> qmf_out_buf [ j <S2SV_ModEnd> + HBE_OPER_WIN_LEN - <S2SV_ModStart> -> qmf_out_buf [ j <S2SV_ModEnd> + HBE_OPER_WIN_LEN - <S2SV_ModStart> -> qmf_out_buf [ j <S2SV_ModEnd> + HBE_OPER_WIN_LEN - <S2SV_ModStart> -> qmf_out_buf [ j <S2SV_ModEnd> + HBE_OPER_WIN_LEN - <S2SV_ModStart> -> qmf_out_buf [ j <S2SV_ModEnd> + HBE_OPER_WIN_LEN - <S2SV_ModStart> -> qmf_out_buf [ j <S2SV_ModEnd> + HBE_OPER_WIN_LEN - <S2SV_ModStart> -> qmf_out_buf [ j <S2SV_ModEnd> + HBE_OPER_WIN_LEN - <S2SV_ModStart> -> qmf_out_buf [ j <S2SV_ModEnd> + HBE_OPER_WIN_LEN - <S2SV_ModStart> -> qmf_out_buf [ j <S2SV_ModEnd> + HBE_OPER_WIN_LEN -,0
84,<S2SV_ModStart> -> dmin ; if ( ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { <S2SV_ModStart> p ) ; } <S2SV_ModStart> -> dmin ; if ( ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { <S2SV_ModStart> p ) ; } <S2SV_ModStart> -> dmin ; if ( ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { <S2SV_ModStart> p ) ; } <S2SV_ModStart> -> dmin ; if ( ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { <S2SV_ModStart> p ) ; } <S2SV_ModStart> -> dmin ; if ( ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { <S2SV_ModStart> p ) ; } <S2SV_ModStart> -> dmin ; if ( ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { <S2SV_ModStart> p ) ; },0
85,<S2SV_ModStart> bfqq -> bfqd <S2SV_ModEnd> ; if ( <S2SV_ModStart> return ; } bfq_clear_bfqq_wait_request ( bfqq ) ; <S2SV_ModStart> flags ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
86,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
87,"<S2SV_ModStart> regs ) ; perf_sw_event_err <S2SV_ModEnd> ( PERF_COUNT_SW_ALIGNMENT_FAULTS, <S2SV_ModStart> regs ) ; perf_sw_event_err <S2SV_ModEnd> ( PERF_COUNT_SW_ALIGNMENT_FAULTS, <S2SV_ModStart> regs ) ; perf_sw_event_err <S2SV_ModEnd> ( PERF_COUNT_SW_ALIGNMENT_FAULTS, <S2SV_ModStart> regs ) ; perf_sw_event_err <S2SV_ModEnd> ( PERF_COUNT_SW_ALIGNMENT_FAULTS, <S2SV_ModStart> regs ) ; perf_sw_event_err <S2SV_ModEnd> ( PERF_COUNT_SW_ALIGNMENT_FAULTS, <S2SV_ModStart> regs ) ; perf_sw_event_err <S2SV_ModEnd> ( PERF_COUNT_SW_ALIGNMENT_FAULTS, <S2SV_ModStart> regs ) ; perf_sw_event_err <S2SV_ModEnd> ( PERF_COUNT_SW_ALIGNMENT_FAULTS, <S2SV_ModStart> regs ) ; perf_sw_event_err <S2SV_ModEnd> ( PERF_COUNT_SW_ALIGNMENT_FAULTS, <S2SV_ModStart> regs ) ; perf_sw_event_err <S2SV_ModEnd> ( PERF_COUNT_SW_ALIGNMENT_FAULTS,",0
88,"<S2SV_ModStart> x > diffBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } memcpy ( newData + newpos, diffPtr, x ) ; diffPtr += <S2SV_ModEnd> x ; diffPtr <S2SV_ModStart> y > diffBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } extraPtr += <S2SV_ModEnd> y > extraBlock <S2SV_ModStart> y > extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } memcpy ( newData + newpos, extraPtr, y ) ; extraPtr += <S2SV_ModEnd> z ; }",0
89,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> tclass ) ; rcu_read_unlock ( ) ;,0
90,"<S2SV_ModStart> ViffInfo, VFF_CM_genericRGB, VFF_DEP_DECORDER, VFF_DEP_NSORDER <S2SV_ModStart> ViffInfo, VFF_CM_ntscRGB, VFF_DEP_DECORDER, VFF_DEP_NSORDER <S2SV_ModStart> ViffInfo, VFF_CM_ntscRGB, VFF_DEP_DECORDER, VFF_DEP_NSORDER <S2SV_ModStart> ViffInfo, VFF_CM_ntscRGB, VFF_DEP_DECORDER, VFF_DEP_NSORDER <S2SV_ModStart> ViffInfo, VFF_CM_ntscRGB, VFF_DEP_NSORDER, VFF_DEP_DECORDER, VFF_DES_RAW <S2SV_ModStart> ViffInfo, VFF_CM_ntscRGB, VFF_DEP_DECORDER, VFF_DEP_NSORDER, VFF_DEP_NSORDER <S2SV_ModStart> ViffInfo, VFF_CM_ntscRGB, VFF_DEP_NSORDER, VFF_DEP_NSORDER",0
91,"<S2SV_ModStart> encoder_common_init ( ctx, data",0
92,"<S2SV_ModStart> new_size ) { <S2SV_ModEnd> assert ( new_size <S2SV_ModStart> 1 ; } # if PY_MAJOR_VERSION >= 3 <S2SV_ModStart> = memo_new ; # else assert ( new_size > self -> memo_size ) ; PyObject * * memo_new = self -> memo ; PyMem_RESIZE ( memo_new, PyObject *, new_size ) ; if ( memo_new == NULL ) { PyErr_NoMemory ( ) ; return - 1 ; } # endif",0
93,"<S2SV_ModStart> ( wb, abs ( delta_q ), 8 ) ; vp9_wb_write_bit ( wb, delta_q < 0 ) ; } else { vp9_wb_write_literal ( wb, <S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
94,"<S2SV_ModStart> ] = near_mvs [ 0 ] ; mv_bias ( ref_frame_sign_bias [ xd -> mbmi. ref_frame ], xd -> mbmi. ref_frame, & near_mvs [ 1 ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ xd -> mbmi. ref_frame ], xd -> mbmi. ref_frame, & near_mvs [ 2 ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ xd -> mbmi. ref_frame ], xd -> mbmi. ref_frame, & near_mvs [ 3 ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ xd -> mbmi. ref_frame ], xd -> mbmi. ref_frame, & near_mvs [ 4 ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ xd -> mbmi. ref_frame ], xd -> mbmi. ref_frame",0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
97,"<S2SV_ModStart> msicap msicap ; int ret ; <S2SV_ModStart> msgnum, 0, & ret <S2SV_ModStart> ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>",0
98,"<S2SV_ModStart> } if ( <S2SV_ModEnd> cmd -> proc <S2SV_ModStart> cmd -> proc == infoCommand ) { addReplyError ( c, shared. ok ) ; return REDIS_OK ; } if ( cmd -> proc == unsubscribeCommand ) { addReplyError ( c, shared. ok ) ; return REDIS_OK ; } if ( cmd -> proc == psubscribeCommand ) { addReplyError ( c, shared. ok ) ; return REDIS_OK ; } if ( cmd -> proc == punsubscribeCommand ) { addReplyError ( c, shared. ok ) ; return REDIS_OK ; } if ( server. masterhost && server. replstate!= REDIS_REPL_CONNECTED && server. repl_serve_stale_data == 0 ) { addReplyError ( c, shared. ok ) ; return REDIS_OK ; } return <S2SV_ModEnd> REDIS_OK ; } <S2SV_ModStart> REDIS_OK ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
99,"<S2SV_ModStart> VPX_RC_ONE_PASS ) ) VPX_ERROR <S2SV_ModEnd> ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) <S2SV_ModStart> g_lag_in_frames ) ) VPX_ERROR <S2SV_ModEnd> ( ""Cannot <S2SV_blank> increase <S2SV_blank> lag_in_frames"" )",0
100,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
101,<S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> info -> si_signo,0
102,"<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; if ( ptr -> movie_identifier ) { <S2SV_ModStart> ) ; } } else { tmp_strsize = ( u32 ) ptr -> size - 8 ; tmp_str = gf_malloc ( sizeof ( char ) * tmp_strsize ) ; if (! tmp_str ) return GF_OUT_OF_MEM ; memset ( tmp_str, 0, sizeof ( char ) * tmp_strsize ) ; }",0
103,<S2SV_ModStart> VPX_CODEC_INCAPABLE ; else if (! ( ctx -> iface -> caps & VPX_CODEC_CAP_ENCODER ) ) ctx -> err = VPX_CODEC_INCAPABLE ; else,0
104,<S2SV_ModStart> mode ) { struct nfs4_state_owner * owner = state -> owner ; <S2SV_ModStart> if ( ( owner -> state_mode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> )!= ( owner -> state_mode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> ) ; } owner -> state_mode <S2SV_ModEnd> = mode ;,0
105,"<S2SV_ModStart> ) ) ; ( void ) SetImageInfoProgressMonitor ( read_info, ( MagickProgressMonitor ) NULL, ( void * ) NULL ) ; <S2SV_ModStart> ) ) ; ( void ) SetImageInfoBlob ( read_info, ( MagickProgressMonitor ) NULL, ( void * ) NULL ) ; <S2SV_ModStart> ) ) ; ( void ) SetImageInfoProgressMonitor ( read_info, ( MagickProgressMonitor ) NULL, ( void * ) NULL ) ; <S2SV_ModStart> ) ) ; ( void ) SetImageInfoBlob ( read_info, ( MagickProgressMonitor ) NULL, ( void * ) NULL ) ; <S2SV_ModStart> ) ) ; ( void ) SetImageInfoBlob ( read_info, ( MagickProgressMonitor ) NULL, ( void * ) NULL ) ;",0
106,"<S2SV_ModStart> 0 ; } if ( elem. in_sg [ 0 ]. iov_len!= len ) { <S2SV_ModStart> len ; } memcpy ( elem. in_sg [ 0 ]. iov_base, buf, len ) ; virtqueue_push ( vq, & elem, len ) ; virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; }",0
107,"<S2SV_ModStart>, ""expn[%d] <S2SV_blank> = <S2SV_blank> 0x%04x; <S2SV_blank> mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", ( int <S2SV_ModEnd> ) JPC_QCX_GETEXPN ( <S2SV_ModStart>, ""expn[%d] <S2SV_blank> = <S2SV_blank> 0x%04x; <S2SV_blank> mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", ( int <S2SV_ModEnd> ) JPC_QCX_GETEXPN ( <S2SV_ModStart>, ""expn[%d] <S2SV_blank> = <S2SV_blank> 0x%04x; <S2SV_blank> mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", ( int <S2SV_ModEnd> ) JPC_QCX_GETEXPN ( <S2SV_ModStart>, ""mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", ( int <S2SV_ModEnd> ) JPC_QCX_GETMANT ( <S2SV_ModStart>, ""mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", ( int ) <S2SV_ModStart>, ""mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", ( int )",0
108,"<S2SV_ModStart> = AV_PIX_FMT_PAL8 ; return cdxl_set_format ( c, AV_PIX_FMT_PAL8 ) ; <S2SV_ModStart> = AV_PIX_FMT_PAL8 ; return cdxl_set_format ( c, AV_PIX_FMT_PAL8 ) ; <S2SV_ModStart> = AV_PIX_FMT_PAL8 ; return cdxl_set_format ( c, AV_PIX_FMT_PAL8 ) ; <S2SV_ModStart> = AV_PIX_FMT_PAL8 ; return cdxl_set_format ( c, AV_PIX_FMT_PAL8 ) ; <S2SV_ModStart> = AV_PIX_FMT_PAL8 ; return cdxl_set_format ( c, AV_PIX_FMT_PAL8 ) ; <S2SV_ModStart> = AV_PIX_FMT_PAL8 ; return cdxl_set_format ( c, AV_PIX_FMT_PAL8 ) ; <S2SV_ModStart> = AV_PIX_FMT_PAL8 ; return cdxl_set_format ( c, AV_PIX_FMT_PAL8 ) ; <S2SV_ModStart> = AV_PIX_FMT_PAL8 ; return cdxl_set_format ( c, AV",0
109,"<S2SV_ModStart> length - 1 ) ; return ( 1 ) ; case ETHERTYPE_ISOC : isoclns_print ( ndo, p + 1, length - 1, caplen - 1 ) ; return ( 1 ) ; case ETHERTYPE_ISOC2 : isoclns_print ( ndo, p + 1, length - 1, caplen - 1 ) ; return ( 1 ) ; case ETHERTYPE_ISOC3 : isoclns_print ( ndo, p + 1, length - 1, caplen - 1 ) ; return ( 1 ) ; case ETHERTYPE_ISOC4 : isoclns_print ( ndo, p + 1, length - 1, caplen - 1 ) ; return ( 1 ) ; case ETHERTYPE_ISOC5 : isoclns_print ( ndo, p + 1, length - 1, caplen - 1 <S2SV_ModEnd> ) ; return",0
110,"<S2SV_ModStart> image_noffset ) { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; if ( ret ) { puts ( ""- <S2SV_blank> "" ) ; } else { puts ( ""+ <S2SV_blank> "" ) ; verified = 1 ; break ; } } } if ( noffset == - FDT_ERR_TRUNCATED || noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; } return verified? 0 : - EPERM ; error : printf ( "" <S2SV_blank> error!\\n%s <S2SV_blank> for <S2SV_blank> \'%s\' <S2SV_blank> hash <S2SV_blank> node <S2SV_blank> in <S2SV_blank> \'%s\' <S2SV_blank> image <S2SV_blank> node\\n"", err_msg, fit_get_name ( fit, noffset, NULL ), fit_get_name ( fit, image_noffset, NULL ) ) ; return - 1 <S2SV_ModEnd> ; } <S2SV_null>",0
111,"<S2SV_ModStart> ; state -> rx_kfifo_base = kzalloc ( CX23888_IR_RX_KFIFO_SIZE, GFP_KERNEL ) ; if (! state -> rx_kfifo_base ) { kfree ( state ) ; return - ENOMEM ; } <S2SV_ModEnd> sd = & <S2SV_ModStart> sd, & cx23888_ir_ops ) ; v4l2_set_subdevdata ( sd, state ) ; snprintf ( sd -> name, sizeof ( sd -> name ), ""%s/888-ir"", dev -> name ) ; sd -> grp_id = CX23885_HW_888_IR ; ret = v4l2_device_register_subdev ( & dev -> v4l2_dev, sd ) ; if ( ret == 0 ) { cx23888_ir_write4 ( dev, CX23888_IR_IRQEN_REG, 0 ) ; mutex_init ( & state -> rx_params_lock ) ; default_params = default_rx_params ; v4l2_subdev_call ( sd, ir, rx_s_",0
112,<S2SV_ModStart> res = VPX_CODEC_ABI_MISMATCH ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_POSTPROC ) &&! ( iface -> caps & VPX_CODEC_CAP_POSTPROC ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_ERROR_CONCEALMENT ) &&! ( iface -> caps & VPX_CODEC_CAP_ERROR_CONCEALMENT ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE,0
113,<S2SV_ModStart> TJA1100_CONFIG1_MII_MODE ; value &= ~ <S2SV_ModEnd> TJA1100_CONFIG1_MII_MODE_RMII_25MHZ ; tja1100WritePhyReg,0
114,<S2SV_ModStart> ( unlikely ( IPCB ( skb_in ) -> flags & IPSKB_DOREDIRECT <S2SV_ModEnd> ) ) { <S2SV_ModStart> ; if ( IPCB ( skb_in ) -> flags & IPSKB_DOREDIRECT <S2SV_ModEnd> ) { ipcm_init <S2SV_ModStart> ; if ( IPCB ( skb_in ) -> flags & IPSKB_DOREDIRECT <S2SV_ModEnd> ) { if <S2SV_ModStart> ; if ( IPCB ( skb_in ) -> flags & IPSKB_DOREDIRECT <S2SV_ModEnd> ) { if <S2SV_ModStart> } if ( IPCB ( skb_in ) -> flags & IPSKB_DOREDIRECT <S2SV_ModEnd> ) { if <S2SV_ModStart> ; if ( IPCB ( skb_in ) -> flags & IPSKB_DOREDIRECT <S2SV_ModEnd> ) { if <S2SV_ModStart> } if ( IPCB ( skb_in ) -> flags & IPSKB_DOREDIRECT <S2SV_ModEnd> ) { if <S2SV_ModStart> ; if ( IPCB ( skb_in ) -> flags & IPSKB_DOREDIRECT <S2SV_ModEnd> ) { if,0
115,<S2SV_ModStart> else if ( <S2SV_ModEnd> flags & VPX_CODEC_USE_XMA <S2SV_ModStart> flags & VPX_CODEC_USE_XMA <S2SV_ModEnd> ) res = <S2SV_ModStart> else if ( <S2SV_ModEnd> flags & VPX_CODEC_USE_PSNR <S2SV_ModStart> flags & VPX_CODEC_USE_PSNR <S2SV_ModEnd> ) res = <S2SV_ModStart> else if ( <S2SV_ModEnd> flags & VPX_CODEC_USE_OUTPUT_PARTITION <S2SV_ModStart> flags & VPX_CODEC_USE_OUTPUT_PARTITION <S2SV_ModEnd> ) res =,0
116,"<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0 <S2SV_ModStart> ; if ( msg -> msg_name ) { struct sockaddr_vm * vm_addr ; vm_addr = ( struct sockaddr_vm * ) msg -> msg_name ; vsock_addr_init ( vm_addr, dg -> src. context, dg -> src. resource ) ; msg -> msg_namelen = sizeof ( * vm_addr ) ; } err = payload_len ; out : skb_free_datagram ( & vsk -> sk, skb ) ; return err <S2SV_ModEnd> ; } <S2SV_null>",0
117,"<S2SV_ModStart> counter ) ; encode_open_flags <S2SV_ModEnd> ( xdr,",0
118,"<S2SV_ModStart> ""modify_bar_registration: <S2SV_blank> bypass <S2SV_blank> for <S2SV_blank> pci-gvt\\n"" ) ; goto out <S2SV_ModEnd> ; } switch <S2SV_ModStart> 0 ) ; out : return error ;",0
119,<S2SV_ModStart> esil ) ; r_strbuf_addstr <S2SV_ModEnd> ( & op <S2SV_ModStart> esil ) ; r_strbuf_addstr <S2SV_ModEnd> ( & op <S2SV_ModStart> esil ) ; r_strbuf_addstr <S2SV_ModEnd> ( & op <S2SV_ModStart> esil ) ; r_strbuf_addstr <S2SV_ModEnd> ( & op <S2SV_ModStart> esil ) ; r_strbuf_addstr <S2SV_ModEnd> ( & op <S2SV_ModStart> esil ) ; r_strbuf_addstr <S2SV_ModEnd> ( & op <S2SV_ModStart> esil ) ; r_strbuf_addstr <S2SV_ModEnd> ( & op <S2SV_ModStart> esil ) ; r_strbuf_addstr <S2SV_ModEnd> ( & op <S2SV_ModStart> esil ) ; r_strbuf_addstr <S2SV_ModEnd> ( & op <S2SV_ModStart> esil ) ; r_strbuf_addstr <S2SV_ModEnd> ( & op <S2SV_ModStart> esil ) ; r_strbuf_addstr <S2SV_ModEnd> ( & op <S2SV_ModStart> esil ) ; r_strbuf_addstr <S2SV_ModEnd> ( & op <S2SV_ModStart> esil ) ; r_strbuf_addstr <S2SV_ModEnd> ( & op <S2SV_ModStart> esil ) ; r_strbuf_addstr <S2SV_ModEnd> ( & op <S2SV_ModStart> esil ) ; r_strbuf_addstr <S2SV_ModEnd> ( & op,0
120,"<S2SV_ModStart> return ERROR_INVALID_REQUEST ; if (! osStrcasecmp ( token, ""HTTP/1.1"" ) ) { connection -> request. version = HTTP_VERSION_1_1 ; connection -> request. keepAlive = TRUE ; } else if (! osStrcasecmp ( token, ""HTTP/1.0"" ) ) { connection -> request. version = HTTP_VERSION_1_0 ; connection -> request. keepAlive = FALSE ; } else if (! osStrcasecmp ( token, ""HTTP/1.1"" ) ) { connection -> request. version = HTTP_VERSION_1_1 ; connection -> request. keepAlive = TRUE ; } else { return ERROR_INVALID_REQUEST ; }",0
121,"<S2SV_ModStart> goto trunc ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %us, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_router ), EXTRACT_32BITS ( & lshp -> ls_seq ), EXTRACT_16BITS ( & lshp -> ls_age ), EXTRACT_16BITS ( & lshp -> ls_length ) - ( u_int ) sizeof ( struct lsa6_hdr ) ) ) ; <S2SV_ModStart> ls_seq ) ; <S2SV_ModEnd> ospf6_print_ls_type ( ndo",0
122,<S2SV_ModStart> } else { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; pipe_buf_mark_unmergeable ( obuf ) ; obuf -> len = len ; opipe -> nrbufs ++ ; ibuf -> offset += obuf -> len ; ibuf -> len -= obuf -> len ; } ret += obuf -> len ; len -= obuf -> len ; } while ( len ) ; pipe_unlock ( ipipe ) ; pipe_unlock ( opipe ) ; <S2SV_ModStart> ibuf ) ; <S2SV_ModEnd> return ret ;,0
123,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> unsigned int <S2SV_ModEnd> vp9_tree_probs_from_distribution ( vp9_tree <S2SV_ModStart> ] ) { return,0
124,<S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ) <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ),1
125,<S2SV_ModStart> b ) ; <S2SV_ModEnd> vp9_tree_index ii = <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
126,<S2SV_ModStart> <S2SV_null> <S2SV_null> static __inline <S2SV_ModEnd> void write_buffer_16x16 (,0
127,"<S2SV_ModStart> & 0xffff ; if (! synth_devs [ dev ] -> load_patch ) return - ENXIO ; <S2SV_ModStart> c, 0 ) ; if ( err < 0 ) return err ; return err ; } if ( ev_code >= 128 ) { if ( seq_mode == SEQ_2 && ev_code == SEQ_EXTENDED ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> Invalid <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> event <S2SV_blank> %x\\n"", ev_code ) ; return - EINVAL ; } ev_size = 8 ; if ( c < ev_size ) { if (! seq_playing ) seq_startplay ( ) ; return count - c ; } if ( copy_from_user ( ( char * ) & event_rec [ 4 ], & ( buf ) [ p + 4 ], 4",0
128,<S2SV_ModStart> int x1 = ( int ) <S2SV_ModStart> int x2 = ( int ) <S2SV_ModStart> int x3 = ( int ) <S2SV_ModStart> int x4 = ( int ) <S2SV_ModStart> int x5 = ( int ) <S2SV_ModStart> int x6 = ( int ) <S2SV_ModStart> int x7 = ( int ) <S2SV_ModStart> int x10 = ( int ) <S2SV_ModStart> * cospi_21_64 + ( int ) <S2SV_ModStart> * cospi_15_64 - ( int ) <S2SV_ModStart> * cospi_21_64 - ( int ),0
129,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> flags |= HAS_EDSP <S2SV_ModStart> |= HAS_EDSP ; <S2SV_ModEnd> flags |= HAS_MEDIA <S2SV_ModStart> |= HAS_MEDIA ; <S2SV_ModEnd> flags |= HAS_NEON <S2SV_ModStart> |= HAS_NEON ; <S2SV_ModEnd> return flags &,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
131,<S2SV_ModStart> ] ; bw += <S2SV_ModEnd> num_8x8_blocks_wide_lookup [ mi_8x8 <S2SV_ModStart> ] ; bh += <S2SV_ModEnd> num_8x8_blocks_high_lookup [ mi_8x8 <S2SV_ModStart> ] ; bw += <S2SV_ModEnd> num_8x8_blocks_wide_lookup [ mi_8x8 <S2SV_ModStart> ] ; bh += <S2SV_ModEnd> num_8x8_blocks_high_lookup [ mi_8x8 <S2SV_ModStart> ] ; bw += <S2SV_ModEnd> num_8x8_blocks_wide_lookup [ mi_8x8 <S2SV_ModStart> ] ; bh += <S2SV_ModEnd> num_8x8_blocks_wide_lookup [ mi_8x8 <S2SV_ModStart> ] ; bw += <S2SV_ModEnd> num_8x8_blocks_wide_lookup [ mi_8x8 <S2SV_ModStart> ] ; bh += <S2SV_ModEnd> num_8x8_blocks_high_lookup [ mi_8x8 <S2SV_ModStart> ] ; bw += <S2SV_ModEnd> num_8x8_blocks_wide_lookup [ mi_8x8 <S2SV_ModStart> ] ; bh += <S2SV_ModEnd> num_8x8_blocks_wide_lookup [ mi_8x8,0
132,"<S2SV_ModStart> flags & CLIENT_CLOSE_AFTER_REPLY ) break ; if ( c -> flags & CLIENT_CLOSE_BEFORE_REPLY ) break ; if ( c -> flags & CLIENT_CLOSE_AFTER_REPLY ) break ; if ( c -> flags & CLIENT_CLOSE_AFTER_REPLY ) break ; if (! c -> reqtype ) { if ( c -> querybuf [ 0 ] == '*' ) { c -> reqtype = PROTO_REQ_MULTIBULK ; } else { c -> reqtype = PROTO_REQ_INLINE ; } } if ( c -> reqtype == PROTO_REQ_INLINE ) { if ( processInlineBuffer ( c )!= C_OK ) break ; } else if ( c -> reqtype == PROTO_REQ_MULTIBULK ) { if ( processMultibulkBuffer ( c )!= C_OK ) break ; } else { serverPanic ( ""Unknown <S2SV_blank> request <S2SV_blank> type"" ) ; } if ( c -> argc == 0",0
133,"<S2SV_ModStart> get_blocks_flags = EXT4_GET_BLOCKS_CREATE | EXT4_GET_BLOCKS_RESERVE <S2SV_ModStart> get_blocks_flags |= EXT4_GET_BLOCKS_DELALLOC_RESERVE ; err = ext4_journal_get_blocks ( handle, mpd -> inode, next, max_blocks, & new, get_blocks_flags ) ; if ( err ) return blks ; if ( err == - ENOSPC && ext4_count_free_blocks ( mpd -> inode -> i_sb ) ) { mpd -> retval = err ; return 0 ; } ext4_msg ( mpd -> inode -> i_sb, KERN_CRIT, ""delayed <S2SV_blank> block <S2SV_blank> allocation <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> at <S2SV_blank> "" ""logical <S2SV_blank> offset <S2SV_blank> %llu <S2SV_blank> with <S2SV_blank> max <S2SV_blank> blocks <S2SV_blank> %zd <S2SV_blank> with <S2SV_blank> error <S2SV_blank> %d\\n"", mpd -> inode -> i_ino, ( unsigned long long ) next, mpd -> b_size >> mpd -> inode -> i_blkbits, err ) ; printk ( KERN_CRIT ""This <S2SV_blank> should",0
134,"<S2SV_ModStart> & p -> ai_family, & p -> ai_protocol, & p -> ai_addrlen, NULL, & p -> ai_addrlen, NULL )!= OE_OK ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval == 1 ) break ; if ( retval!= - 1 || oe_errno!= OE_ENAMETOOLONG ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( oe_errno ) ; } if ( p -> ai_family!= AF_INET ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( oe_errno ) ; } if ( p -> ai_socktype!= SOCK_DGRAM ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( oe_errno ) ; } <S2SV_ModEnd> if ( p",0
135,"<S2SV_ModStart> ( token, ':' ) ; if ( separator!= NULL ) { * separator = '\\0' ; strSafeCopy ( connection -> request. auth. user, token, HTTP_SERVER_USERNAME_MAX_LEN ) ; token = separator + 1 ; connection -> request. auth. password = token ; } } } TRACE_DEBUG ( ""Authorization <S2SV_blank> header:\\r\\n"" ) ; TRACE_DEBUG ( "" <S2SV_blank> <S2SV_blank> username: <S2SV_blank> %s\\r\\n"", connection -> request. auth. user ) ; TRACE_DEBUG ( "" <S2SV_blank> <S2SV_blank> password: <S2SV_blank> %s\\r\\n"", connection -> request. auth. password ) ; } # endif <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
136,"<S2SV_ModStart> pc ) { <S2SV_ModEnd> pc -> fc <S2SV_ModStart> fc. coef_probs = vpx_memcpy ( pc -> fc. coef_probs, default_coef_probs, sizeof ( default_coef_probs ) ) ; vpx_memcpy ( pc -> fc. coef_probs2, default_coef_probs2, sizeof ( default_coef_probs2 ) ) ; vpx_memcpy ( pc -> fc. coef_probs3, default_coef_probs3, sizeof ( default_coef_probs3 ) ) ; vpx_memcpy ( pc -> fc. coef_probs4, default_coef_probs4, sizeof ( default_coef_probs4 ) ) ; vpx_memcpy ( pc -> fc. coef_probs2, default_coef_probs2, sizeof ( default_coef_probs2 ) ) ; vpx_memcpy ( pc -> fc. coef_probs3, default_coef_probs3, sizeof ( default_coef_probs3 <S2SV_ModEnd> ) ) ;",0
137,"<S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
138,"<S2SV_ModStart> asdl_seq * body, PyTuple * args <S2SV_ModStart> = body ; p -> v. Module. args = args ;",0
139,"<S2SV_ModStart> write_idx ) ; <S2SV_ModEnd> buf -> ts_start <S2SV_ModStart> = flags ; # if USE_PARTIAL_COPY if ( ctx -> max_sz == 1 && active_map &&! flags ) { for ( row = 0 ; row < mb_rows ; ++ row ) { col = 0 ; while ( 1 ) { for ( ; col < mb_cols ; ++ col ) { if ( active_map [ col ] ) break ; } if ( col == mb_cols ) break ; } vp9_copy_and_extend_frame_with_rect ( src, & buf -> img, row << 4, col << 4, 16, ( active_end - col ) << 4 ) ; col = active_end ; } } # endif",0
140,"<S2SV_ModStart> 0 ) ; if ( cm -> frame_type == KEY_FRAME ) { <S2SV_ModStart> 18 ) ; <S2SV_ModEnd> filt_guess -= 4 <S2SV_ModStart> -> filter_level = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; } else { const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; if ( cm -> frame_type == KEY_FRAME ) filt_guess -= 4 ; lf -> filter_level = clamp ( filt_guess, min_filter_level, max_filter_level ) ; } } else { search_filter_level ( sd, cpi, method == LPF_PICK_FROM_SUBIMAGE ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
141,"<S2SV_ModStart> ; BTIF_TRACE_EVENT ( ""btif_dm_upstreams_cback <S2SV_blank> <S2SV_blank> ev: <S2SV_blank> %s"" <S2SV_ModEnd>, dump_dm_event ( <S2SV_ModStart> ; BTIF_TRACE_EVENT ( ""btif_dm_upstreams_cback <S2SV_blank> <S2SV_blank> ev: <S2SV_blank> %s"" <S2SV_ModEnd>, dump_dm_event ( <S2SV_ModStart> ; BTIF_TRACE_EVENT ( ""btif_dm_upstreams_cback <S2SV_blank> <S2SV_blank> ev: <S2SV_blank> %s"" <S2SV_ModEnd>, dump_dm_event ( <S2SV_ModStart> ; BTIF_TRACE_EVENT ( ""btif_dm_upstreams_cback <S2SV_blank> <S2SV_blank> ev: <S2SV_blank> %s"" <S2SV_ModEnd>, dump_dm_event ( <S2SV_ModStart> ; BTIF_TRACE_EVENT ( ""btif_dm_upstreams_cback <S2SV_blank> <S2SV_blank> ev: <S2SV_blank> %s"" <S2SV_ModEnd>, dump_dm_event ( <S2SV_ModStart> ; BTIF_TRACE_EVENT ( ""btif_dm_upstreams_cback <S2SV_blank> <S2SV_blank> ev: <S2SV_blank> %s"" <S2SV_ModEnd>, dump_dm_event ( <S2SV_ModStart> ; BTIF_TRACE_EVENT ( ""btif_dm_upstreams_cback <S2SV_blank> <S2SV_blank> ev: <S2SV_blank> %s"" <S2SV_ModEnd>, dump",0
142,"<S2SV_ModStart> : { int align <S2SV_ModEnd> = getnum ( <S2SV_ModStart>! isp2 ( align <S2SV_ModEnd> ) ) luaL_error <S2SV_ModStart>, ""alignment <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> power <S2SV_blank> of <S2SV_blank> 2"", align <S2SV_ModEnd> ) ; h <S2SV_ModStart> -> align = align <S2SV_ModEnd> ; return ;",0
143,"<S2SV_ModStart> ; if ( image_info -> interlace!= PartitionInterlace ) { status = OpenBlob ( image_info, image, ReadBinaryBlobMode, exception ) ; if ( status == MagickFalse ) { image = DestroyImageList ( image ) ; return ( ( Image * ) NULL ) ; } if ( status == MagickFalse ) ThrowFileException ( exception, CorruptImageError, ""UnexpectedEndOfFile"", image -> filename ) ; } if ( <S2SV_ModStart> ) ; } if ( image_info -> interlace!= PartitionInterlace ) { status = OpenBlob ( image_info, canvas_image, ReadBinaryBlobMode, exception ) ; if ( status == MagickFalse ) { image = DestroyImageList ( image ) ; return ( ( Image * ) NULL ) ; } }",0
144,"<S2SV_ModStart> data_sz ) ) { <S2SV_ModStart> = VPX_CODEC_INVALID_PARAM ; return SAVE_STATUS ( ctx, res ) ; } <S2SV_ModStart> deadline ) ; <S2SV_ModEnd> return SAVE_STATUS (",0
145,"<S2SV_ModStart> inode * inode, struct buffer_head * bh ) { struct isofs_sb_info * sbi = ISOFS_SB ( inode -> i_sb ) ; struct iso_directory_record * de ; struct iso_inode_info * ei = ISOFS_I ( inode ) ; int ret = - EIO ; block = ei -> i_iget5_block ; bh = sb_bread ( inode -> i_sb, block ) ; if (! bh ) goto out_badread ; offset = ei -> i_iget5_offset ; de_len = * ( unsigned char * ) de ; if ( offset + de_len > bufsize ) { int frag1 = bufsize - offset ; tmpde = kmalloc ( de_len, GFP_KERNEL ) ; if ( tmpde == NULL ) { printk ( KERN_INFO ""%s: <S2SV_blank> out <S2SV_blank> of <S2SV_blank> memory\\n"", __func__ ) ; ret = - ENOMEM ; goto fail ; } <S2SV_ModEnd> memcpy ( tmpde",0
146,"<S2SV_ModStart> ( outpos, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> "" <S2SV_ModEnd>, c, <S2SV_ModStart> ( outpos, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> "" <S2SV_ModEnd>, c,",0
147,<S2SV_ModStart> self ) { PyObject_GC_UnTrack ( self ) ;,1
148,<S2SV_ModStart>! i ) { <S2SV_ModStart> = n ; } else { <S2SV_ModEnd> suffix_object ( p <S2SV_ModStart> n ; } },0
149,"<S2SV_ModStart> ++ ) { if (! PyList_Check ( tmp ) ) { PyErr_Format ( PyExc_TypeError, ""Module <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> must <S2SV_blank> be <S2SV_blank> a <S2SV_blank> list, <S2SV_blank> not <S2SV_blank> a <S2SV_blank> %.200s"", tmp -> ob_type -> tp_name ) ; goto failed ; } <S2SV_ModStart> Py_ssize_t len ; if (! PyList_Check ( tmp ) ) { PyErr_Format ( PyExc_TypeError, ""Module <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> must <S2SV_blank> be <S2SV_blank> a <S2SV_blank> list, <S2SV_blank> not <S2SV_blank> a <S2SV_blank> %.200s"", tmp -> ob_type -> tp_name ) ; goto failed ; } <S2SV_ModStart> Py_ssize_t i ; if (! PyList_Check ( tmp ) ) { PyErr_Format ( PyExc_TypeError, ""Module <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> must <S2SV_blank> be <S2SV_blank> a <S2SV_blank> list, <S2SV_blank> not <S2SV_blank> a <S2SV_blank> %.200s"", tmp -> ob_type -> tp_name ) ; goto failed ; }",0
150,<S2SV_ModStart> in ) { uint8_t <S2SV_ModEnd> buf [ RAS_MAGICLEN,0
151,"<S2SV_ModStart> -> msg_control ; <S2SV_ModEnd> if ( sock <S2SV_ModStart> |= MSG_DONTWAIT ; msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; if ( msg_sys -> msg_flags & MSG_OOB ) { err = - EOPNOTSUPP ; goto out_freeiov ; } err = verify_iovec ( msg_sys, iov, & addr, VERIFY_WRITE ) ; if ( err < 0 ) goto out_freeiov ; total_len = err ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; if ( MSG_CMSG_COMPAT & flags ) { err = verify_compat_iovec ( msg_sys, iov, & addr, VERIFY_WRITE ) ; if ( err < 0 ) goto out_freeiov ; }",0
152,"<S2SV_ModStart> unsigned ptrs_per_blk ; <S2SV_ModEnd> unsigned end_of_metadata = <S2SV_ModStart> height - 1 <S2SV_ModEnd> ; enum alloc_state <S2SV_ModStart> * ptr ; <S2SV_ModEnd> BUG_ON ( sheight <S2SV_ModStart> ( height == ip -> i_height ) { struct buffer_head * bh ; ptr = metapointer ( end_of_metadata, mp ) ; bh = mp -> mp_bh [ end_of_metadata ] ; dblks = gfs2_extent_length ( bh -> b_data, bh -> b_size, ptr, maxlen, & eob ) ; BUG_ON ( dblks < 1 ) ; state = ALLOC_DATA ; } else { ptrs_per_blk = height > 1? sdp -> sd_inptrs : sdp -> sd_diptrs ; dblks = min ( maxlen, ptrs_per_blk - mp -> mp_list [ end_of_metadata ] ) ; } <S2SV_ModEnd> if ( height",0
153,"<S2SV_ModStart> -> use_i420? ""I420"" : ""YV12"" ) ; } if ( stream -> next || stream -> index ) { fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> index ) ; fprintf ( stderr, ""Destination <S2SV_blank> file: <S2SV_blank> %s\\n"", stream -> config. out_fn ) ; fprintf ( stderr, ""Encoder <S2SV_blank> parameters:\\n"" ) ; SHOW ( g_usage ) ; SHOW ( g_threads ) ; SHOW ( g_timebase. num ) ; SHOW ( g_timebase. den ) ; SHOW ( rc_resize_allowed ) ; SHOW ( rc_resize_up_thresh ) ; SHOW ( rc_resize_down_thresh ) ; SHOW ( rc_end_usage ) ; SHOW ( rc_target_bitrate ) ; SHOW ( rc_min_quantizer ) ; SHOW ( rc_max_quantizer ) ; SHOW ( rc_dropframe_thresh ) ; SHOW ( rc_buf_sz ) ; SHOW ( rc_buf_initial_sz ) ; SHOW ( rc_buf_optimal_sz ) ; SHOW ( rc_2pass_vbr_bias_",0
154,<S2SV_ModStart> -> psvi!= XSLT_RESERVED_NAMESPACES <S2SV_ModEnd> ) ) { <S2SV_ModStart> -> psvi!= XSLT_RESERVED_NAMESPACES <S2SV_ModEnd> ) ) { <S2SV_ModStart> -> psvi!= XSLT_RESERVED_NAMESPACES <S2SV_ModEnd> ) ) { <S2SV_ModStart> -> psvi!= XSLT_RESERVED_NAMESPACES <S2SV_ModEnd> ) ) { <S2SV_ModStart> -> psvi!= XSLT_RESERVED_NAMESPACES <S2SV_ModEnd> ) ) { <S2SV_ModStart> -> psvi!= XSLT_RESERVED_NAMESPACES <S2SV_ModEnd> ) ) { <S2SV_ModStart> -> psvi!= XSLT_RESERVED_NAMESPACES <S2SV_ModEnd> ) ) { <S2SV_ModStart> -> psvi!= XSLT_RESERVED_NAMESPACES <S2SV_ModEnd> ) ) { <S2SV_ModStart> -> psvi!= XSLT_RESERVED_NAMESPACES <S2SV_ModEnd> ) ) { <S2SV_ModStart> -> psvi!= XSLT_RESERVED_NAMESPACES <S2SV_ModEnd> ) ) { <S2SV_ModStart> -> psvi!= XSLT_RESERVED_NAMESPACES <S2SV_ModEnd> ) ) { <S2SV_ModStart> -> psvi!= XSLT_RESERVED_NAMESPACES <S2SV_ModEnd> ) ) { <S2SV_ModStart> -> psvi!= XSLT_RESERVED_NAMESPACES <S2SV_ModEnd> ) ) { <S2SV_ModStart> -> psvi!= XSLT_RESERVED_NAMESPACES <S2SV_ModEnd> ) ) { <S2SV_ModStart> -> psvi!= XSLT_RESERVED_NAMESPACES <S2SV_ModEnd> ) ) {,0
155,"<S2SV_ModStart> 0 ) { FILE * fp = fopen ( ""/etc/skel/.zshrc"", ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } <S2SV_ModStart> 0 ) { FILE * fp = fopen ( ""/etc/skel/.cshrc"", ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; }",0
156,<S2SV_ModStart> msix_tab_size ) { <S2SV_ModEnd> bzero ( msixcap,1
157,<S2SV_ModStart> 0 ) ) { <S2SV_ModStart> ) ) ; } else { <S2SV_ModEnd> js_pushnumber ( J <S2SV_ModStart> ) ; } },0
158,"<S2SV_ModStart> case OFreshOID : <S2SV_ModEnd> sp -- ; <S2SV_ModStart> ; if ( Int_val ( Field ( ( value ) dest, 1 ) ) >= 0 ) caml_set_oo_id ( ( value ) dest ) ; sp -- ; break ; case OShift : * dest += sp -> arg ; sp -- ; break ; case OReadItems : sp -> dest ++ ; if ( -- ( sp -> arg ) == 0 ) sp -- ; if ( <S2SV_ModStart> 2 ) ; if ( Int_val ( Field ( ( value ) dest, 1 ) ) >= 0 ) caml_set_oo_id ( ( value ) dest ) ;",0
159,"<S2SV_ModStart> 0 ) { <S2SV_ModEnd> interface -> nicEvent <S2SV_ModStart> ) ; } isr = ksz8851ReadReg ( interface, KSZ8851_REG_ISR ) ; if ( ( isr & ISR_LCIS )!= 0 ) { ier = ksz8851ReadReg ( interface, KSZ8851_REG_IER ) ; } if ( ( isr & ISR_TXIS )!= 0 ) { ier = ksz8851ReadReg ( interface, KSZ8851_REG_IER ) ; } if ( ( isr & ISR_RXIS )!= 0 ) { ier = ksz8851ReadReg ( interface, KSZ8851_REG_IER ) ; }",0
160,"<S2SV_ModStart> wb ) { write_delta_q ( wb, cm -> x_dc_delta_q ) ; write_delta_q ( wb, cm -> y_dc_delta_q ) ; write_delta_q ( wb, cm -> uv_dc_delta_q ) ; write_delta_q ( wb, cm -> uv_ac_delta_q ) ; <S2SV_ModStart> QINDEX_BITS ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
161,"<S2SV_ModStart> ; if ( lseek ( uipc_main. ch [ ch_id ]. fd, 0, SEEK_SET ) < 0 ) { BTIF_TRACE_ERROR ( ""failed <S2SV_blank> to <S2SV_blank> seek <S2SV_blank> (%s)"", strerror ( errno ) ) ; UIPC_UNLOCK ( ) ; return FALSE ; } if ( <S2SV_ModStart> ) ; } if ( lseek ( uipc_main. ch [ ch_id ]. fd, 0, SEEK_SET ) < 0 ) { BTIF_TRACE_ERROR ( ""failed <S2SV_blank> to <S2SV_blank> seek <S2SV_blank> (%s)"", strerror ( errno ) ) ; UIPC_UNLOCK ( ) ; return FALSE ; } if ( lseek ( uipc_main. ch [ ch_id ]. fd, 0, SEEK_SET ) < 0 ) { BTIF_TRACE_ERROR ( ""failed <S2SV_blank> to <S2SV_blank> seek <S2SV_blank> (%s)"", strerror ( errno ) ) ; UIPC_UNLOCK ( ) ; return FALSE ; }",0
162,<S2SV_ModStart> rawcert ) ; BIO_free ( rawcert ) ; <S2SV_ModStart> rawcert ) ; BIO_free ( rawcert ) ; <S2SV_ModStart> rawcert ) ; BIO_free ( rawcert ) ; <S2SV_ModStart> rawcert ) ; BIO_free ( rawcert ) ; <S2SV_ModStart> rawcert ) ; BIO_free ( rawcert ) ; <S2SV_ModStart> rawcert ) ; BIO_free ( rawcert ) ; <S2SV_ModStart> rawcert ) ; BIO_free ( rawcert ) ; <S2SV_ModStart> rawcert ) ; BIO_free ( rawcert ) ; <S2SV_ModStart> rawcert ) ; BIO_free ( rawcert ) ; <S2SV_ModStart> rawcert ) ; BIO_free ( rawcert ) ; <S2SV_ModStart> rawcert ) ; BIO_free ( rawcert ) ; <S2SV_ModStart> rawcert ) ; BIO_free ( rawcert ) ;,0
163,"<S2SV_ModStart> ( ) ; strncat <S2SV_ModEnd> ( t1_buf_array, <S2SV_ModStart> t1_buf_array, t1_line_array, strlen ( t1_line_array ) - 1",0
164,"<S2SV_ModStart> ( x, 0 <S2SV_ModEnd> ) = get_block_context <S2SV_ModStart> ( x, 0 <S2SV_ModEnd> ) = get_block_context <S2SV_ModStart> ( x, 0 <S2SV_ModEnd> ) = get_block_context <S2SV_ModStart> ( x, 0 <S2SV_ModEnd> ) = get_block_context <S2SV_ModStart> ( x, 0 <S2SV_ModEnd> ) = get_block_context <S2SV_ModStart> ( x, 0 <S2SV_ModEnd> ) = get_block_context <S2SV_ModStart> ( x, 0 <S2SV_ModEnd> ) = get_block_context <S2SV_ModStart> ( x, 0 <S2SV_ModEnd> ) = get_block_context <S2SV_ModStart> ( x, 0 <S2SV_ModEnd> ) = get_block_context <S2SV_ModStart> ( x, 0 <S2SV_ModEnd> ) = get_block_context <S2SV_ModStart> ( x, 0 <S2SV_ModEnd> ) = get_block_context <S2SV_ModStart> ( x, 0 <S2SV_ModEnd> ) = get_block_context <S2SV_ModStart> ( x, 0 <S2SV_ModEnd> ) = get_block_context <S2SV_ModStart> ( x, 0 <S2SV_ModEnd> ) = get_block_context",0
165,"<S2SV_ModStart> key_ref ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) { ret = - ENOKEY ; goto error2 ; }",1
166,<S2SV_ModStart> -> u4_error_code |= ( WORD32 ) <S2SV_ModStart> -> u4_error_code |= ( WORD32 ) <S2SV_ModStart> -> u4_error_code |= ( WORD32 ) <S2SV_ModStart> -> u4_error_code |= ( WORD32 ) <S2SV_ModStart> -> u4_error_code |= ( WORD32 ) <S2SV_ModStart> -> u4_error_code |= ( WORD32 ) <S2SV_ModStart> -> u4_error_code |= ( WORD32 ) <S2SV_ModStart> -> u4_error_code |= ( WORD32 ) <S2SV_ModStart> -> u4_error_code |= ( WORD32 ) <S2SV_ModStart> -> u4_error_code |= ( WORD32 ) <S2SV_ModStart> -> u4_error_code |= ( WORD32 ) <S2SV_ModStart> -> u4_error_code |= ( WORD32 ) <S2SV_ModStart> -> u4_error_code |= ( WORD32 ) <S2SV_ModStart> -> u4_error_code |= ( WORD32 ) <S2SV_ModStart> -> u4_error_code |= ( WORD32 ) <S2SV_ModStart> -> u4_error_code |= ( WORD32 ) <S2SV_ModStart> -> u4_error_code |= ( WORD32 ) <S2SV_ModStart> -> u4_error_code |= ( WORD32 ),0
167,"<S2SV_ModStart> var_off ) ; switch ( opcode ) { case BPF_ADD : if ( signed_add_overflows ( dst_reg -> smin_value, smin_val ) || signed_add_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else { dst_reg -> smin_value += smin_val ; dst_reg -> smax_value += smax_val ; } if ( dst_reg -> umin_value + umin_val < umin_val || dst_reg -> umax_value + umax_val < umax_val ) { dst_reg -> umin_value = 0 ; dst_reg -> umax_value = U64_MAX ; } else { dst_reg -> umin_value += umin_val ; dst_reg -> umax_value += umax_val ; } dst_reg -> var_off = tnum_add ( dst_reg -> var_off, src_reg. var_off ) ; } <S2SV_ModStart>",0
168,<S2SV_ModStart> ; if ( IS_ERR ( cfile ) ) { rc = PTR_ERR ( cfile ) ; cfile = NULL ; goto lookup_out ; } if ( <S2SV_ModStart> full_path ) ; if ( IS_ERR ( cfile ) ) { rc = PTR_ERR ( cfile ) ; cfile = NULL ; goto lookup_out ; } <S2SV_ModStart> full_path ) ; if ( IS_ERR ( cfile ) ) { rc = PTR_ERR ( cfile ) ; cfile = NULL ; goto lookup_out ; } <S2SV_ModStart> full_path ) ; if ( IS_ERR ( cfile ) ) { rc = PTR_ERR ( cfile ) ; cfile = NULL ; goto lookup_out ; },0
169,"<S2SV_ModStart> -> sk_bound_dev_if ; RCU_INIT_POINTER ( ireq -> ireq_opt, <S2SV_ModEnd> tcp_v4_save_options ( skb <S2SV_ModStart> tcp_v4_save_options ( skb )",0
170,"<S2SV_ModStart> int number_of_frames, <S2SV_ModEnd> encode_frame_count ; int <S2SV_ModStart> = encode_frame_count ; <S2SV_ModEnd> number_of_frames -= number_of_keyframes <S2SV_ModStart> -= number_of_keyframes ; <S2SV_ModEnd> svc_log ( svc_ctx <S2SV_ModStart> ( svc_ctx, SVC_LOG_DEBUG <S2SV_ModEnd>, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f], <S2SV_blank> Bytes=[%u]\\n"", <S2SV_ModStart> ( svc_ctx, SVC_LOG_DEBUG <S2SV_ModEnd>, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f], <S2SV_blank> Bytes=[%u]\\n"", <S2SV_ModStart> ( svc_ctx, SVC_LOG_DEBUG <S2SV_ModEnd>, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f], <S2SV_blank> Bytes=[%u]\\n"", <S2SV_ModStart> ( svc_ctx, SVC_LOG_DEBUG <S2SV_ModEnd>, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f",0
171,"<S2SV_ModStart> ( screen -> buffers [ 0 ] ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 0 ] ) ; if ( screen -> buffers [ 1 ] ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 1 ] ) ; screen -> buffers [ 1 ] = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; if ( new_cols > old_cols ) { VTermRect rect ; rect. start_row = 0 ; rect. end_row = old_rows ; rect. start_col = old_cols ; rect. end_col = new_cols ; scrollrect ( rect, first_blank_row - new_rows, 0, user ) ; vterm_screen_flush_damage ( screen ) ; } if ( screen ->",0
172,"<S2SV_ModStart> ; } } if ( * str == '\\0' ) { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; return - 1 ; } <S2SV_ModStart> ; done : if ( * str == '\\0' ) { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; return - 1 ; } <S2SV_ModStart> * literal ) { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; return - 1 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
173,"<S2SV_ModStart> dump_dir * dd ; char * problem_id = NULL ; if ( pd ) { dd <S2SV_ModStart> g_settings_dump_location ) ; <S2SV_ModEnd> problem_id = xstrdup <S2SV_ModStart> dd ) ; <S2SV_ModEnd> log_info ( ""problem <S2SV_blank> id: <S2SV_blank> \'%s\'"" <S2SV_ModStart> problem_id ) ; } else { dd = create_dump_dir_from_problem_data ( pd, g_settings_dump_location ) ; if ( dd ) { problem_id = xstrdup ( dd -> dd_dirname ) ; dd_close ( dd ) ; } log_info ( ""problem <S2SV_blank> id: <S2SV_blank> \'%s\'"", problem_id ) ; }",0
174,<S2SV_ModStart> -> serverFormat. redMax <S2SV_ModEnd> ) { srcptr2 <S2SV_ModStart> -> serverFormat. greenMax <S2SV_ModEnd> ) { srcptr2 <S2SV_ModStart> -> serverFormat. blueMax <S2SV_ModEnd> ) { srcptr2 <S2SV_ModStart> -> serverFormat. redMax <S2SV_ModEnd> ) { srcptr2 <S2SV_ModStart> -> serverFormat. greenMax <S2SV_ModEnd> ) { srcptr2 <S2SV_ModStart> -> serverFormat. blueMax <S2SV_ModEnd> ) { srcptr2 <S2SV_ModStart> -> serverFormat. redMax <S2SV_ModEnd> ) { srcptr2 <S2SV_ModStart> -> serverFormat. greenMax <S2SV_ModEnd> ) { srcptr2 <S2SV_ModStart> -> serverFormat. blueMax <S2SV_ModEnd> ) { srcptr2 <S2SV_ModStart> -> serverFormat. blueMax <S2SV_ModEnd> ) { srcptr2 <S2SV_ModStart> -> serverFormat. redMax <S2SV_ModEnd> ) { srcptr2 <S2SV_ModStart> -> serverFormat. greenMax <S2SV_ModEnd> ) { srcptr2 <S2SV_ModStart> -> serverFormat. blueMax <S2SV_ModEnd> ) { srcptr2,0
175,"<S2SV_ModStart> * ndo, <S2SV_ModEnd> uint16_t * ptr <S2SV_ModStart> ptr = ( <S2SV_ModEnd> uint16_t * )",0
176,"<S2SV_ModStart>, in_what_stride, INT_MAX <S2SV_ModEnd> ) + mv_stride",0
177,"<S2SV_ModStart> + idx_str ; <S2SV_ModEnd> cpi -> mb <S2SV_ModStart>, mi_col, <S2SV_ModEnd> & dummy_rate, <S2SV_ModStart>, mi_col, <S2SV_ModEnd> & dummy_rate, <S2SV_ModStart>, mi_col, <S2SV_ModEnd> & dummy_rate, <S2SV_ModStart>, mi_col, <S2SV_ModEnd> & dummy_dist ) <S2SV_ModStart>, mi_col, <S2SV_ModEnd> & dummy_rate, <S2SV_ModStart>, mi_col, <S2SV_ModEnd> & dummy_dist ) <S2SV_ModStart>, mi_col, <S2SV_ModEnd> & dummy_rate, <S2SV_ModStart>, mi_col, <S2SV_ModEnd> & dummy_dist ) <S2SV_ModStart>, mi_col, <S2SV_ModEnd> & dummy_dist )",0
178,"<S2SV_ModStart> u_int8_t state ; mutex_lock ( & ct -> lock ) ; <S2SV_ModStart> msg = ""nf_ct_dccp: <S2SV_blank> not <S2SV_blank> picking <S2SV_blank> up <S2SV_blank> existing <S2SV_blank> connection <S2SV_blank> "" ; goto out_invalid ; } case CT_DCCP_REQUEST : break ; case CT_DCCP_INVALID : msg = ""nf_ct_dccp: <S2SV_blank> invalid <S2SV_blank> state <S2SV_blank> transition <S2SV_blank> "" ; goto out_invalid ; } dn = dccp_pernet ( net ) ; if ( dn -> dccp_loose == 0 ) { msg = ""nf_ct_dccp: <S2SV_blank> not <S2SV_blank> picking <S2SV_blank> up <S2SV_blank> existing <S2SV_blank> connection <S2SV_blank> "" ; goto out_invalid ; } case CT_DCCP_REQUEST : break ; case CT_DCCP_INVALID : msg = ""nf_ct_dccp: <S2SV_blank> invalid <S2SV_blank> state <S2SV_blank> transition <S2SV_blank> "" ; goto out_invalid ; } ct -> proto. dccp. role [ IP_CT_DIR_ORIGINAL ] = CT_DCCP_ROLE_CLIENT ; ct -> proto. dccp. role [ IP_CT_DIR_REPLY ] = CT_DCCP_",0
179,<S2SV_ModStart> <S2SV_null> <S2SV_null> static void <S2SV_ModEnd> ip_options_get_finish ( struct <S2SV_ModStart> = optlen ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
180,"<S2SV_ModStart> ""Connection"" ) ; const char * ws_version = http_request_get_header ( info -> request, ""Sec-WebSocket-Version"" ) ; if ( ws_version == NULL || strcmp ( ws_version, ""13"" )!= 0 ) goto error ; <S2SV_ModStart> goto error ; <S2SV_ModEnd> const char *",0
181,"<S2SV_ModStart> -> name ) { <S2SV_ModStart> rpcap_findalldevs_if ) ; } <S2SV_ModStart> } } } if ( pcap_findalldevs ( & alldevs, errmsgbuf ) == - 1 ) { rpcap_senderror ( pars -> sockctrl, ver, PCAP_ERR_NOREMOTEIF, ""No <S2SV_blank> interfaces <S2SV_blank> found! <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> libpcap/WinPcap <S2SV_blank> is <S2SV_blank> properly <S2SV_blank> installed"" "" <S2SV_blank> and <S2SV_blank> you <S2SV_blank> have <S2SV_blank> the <S2SV_blank> right <S2SV_blank> to <S2SV_blank> access <S2SV_blank> to <S2SV_blank> the <S2SV_blank> remote <S2SV_blank> device."", errbuf ) ; return - 1 ; } <S2SV_ModStart> } } } if ( pcap_findalldevs ( & alldevs, errmsgbuf ) == - 1 ) { if ( rpcap_senderror ( pars -> sockctrl, ver, PCAP_ERR_NOREMOTEIF, ""No <S2SV_blank> interfaces <S2SV_blank> found! <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> libpcap/WinPcap <S2SV_blank> is <S2SV_blank> properly <S2SV_blank> installed"" "" <S2SV_blank> and <S2SV_blank> you <S2SV_blank> have <S2SV_blank> the <S2SV_blank> right <S2SV_blank> to <S2SV_blank> access <S2SV_blank> to <S2SV_blank> the <S2SV_blank> remote <S2SV_blank> device."", errbuf ) == - 1 ) { rpcapd_log ( LOGPRIO_ERROR, ""Send <S2SV_blank> to <S2SV_blank>",0
182,"<S2SV_ModStart> ; struct dump_dir dd = dd_create ( path, client_uid, DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; } dd_create_basic_files ( dd, client_uid, NULL ) ; dd_save_text ( dd, FILENAME_ABRT_VERSION, VERSION ) ; gpointer gpkey = g_hash_table_lookup ( problem_info, FILENAME_CMDLINE ) ; if (! gpkey ) { char * cmdline = get_cmdline ( pid ) ; if ( cmdline ) { dd_save_text ( dd, FILENAME_CMDLINE, cmdline ) ; free ( cmdline ) ; } } char uid_str [ sizeof ( long ) * 3 + 2 ] ; sprintf ( uid_str, ""%lu"", ( long ) client_uid ) ; dd_save_text ( dd, FILENAME_UID, uid_str ) ; GHashTableIter iter ; gpointer gpvalue ; g_hash_table_iter_init ( & iter, problem_info ) ; while ( g_",0
183,"<S2SV_ModStart> ; x += 8 ) { for ( bit = 0 ; bit < 8 ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x + bit, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } p ++ ; } if ( ( image -> columns % 8 )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 8 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x + bit, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } p ++ ; } <S2SV_ModEnd> } break ;",0
184,<S2SV_ModStart> a ) { const BN_ULONG * t1 = ( const BN_ULONG * ) r ; const BN_ULONG * t2 = ( const BN_ULONG * ) a <S2SV_ModEnd> ; BN_ULONG c1,0
185,<S2SV_ModStart> ) ; } if ( dds_info. pixelformat. flags & DDPF_LUMINANCE ) { compression = NoCompression ; if ( dds_info. pixelformat. flags & DDPF_ALPHAPIXELS ) { compression = NoCompression ; if ( dds_info. pixelformat. flags & DDPF_ALPHAPIXELS ) { decoder = ReadUncompressedRGBA ; } else { decoder = ReadUncompressedLUMINANCE ; } } } else if ( dds_info. pixelformat. flags & DDPF_LUMINANCE ) { compression = NoCompression ; if ( dds_info. pixelformat. flags & DDPF_ALPHAPIXELS ) { compression = NoCompression ; if ( dds_info. pixelformat. flags & DDPF_ALPHAPIXELS ) { decoder = ReadUncompressedLUMINANCE ; } else { decoder = ReadUncompressedLUMINANCE ; } } } },0
186,"<S2SV_ModStart> ; if ( vrrp_in_cksum <S2SV_ModEnd> ( ndo, <S2SV_ModStart> ( ndo, vrrp_in_cksum <S2SV_ModEnd> ( ndo, <S2SV_ModStart> ( ndo, vrrp_in_cksum <S2SV_ModEnd> ( ndo, <S2SV_ModStart> ( ndo, vrrp_in_cksum <S2SV_ModEnd> ( ndo, <S2SV_ModStart> ( ndo, vrrp_in_cksum <S2SV_ModEnd> ( ndo, <S2SV_ModStart> ( ndo, vrrp_in_cksum <S2SV_ModEnd> ( ndo, <S2SV_ModStart> ( ndo, vrrp_in_cksum <S2SV_ModEnd> ( ndo, <S2SV_ModStart> ( ndo, vrrp_in_cksum <S2SV_ModEnd> ( ndo, <S2SV_ModStart> ( ndo, vrrp_in_cksum <S2SV_ModEnd> ( ndo, <S2SV_ModStart> ( ndo, vrrp_in_cksum <S2SV_ModEnd> ( ndo, <S2SV_ModStart> ( ndo, vrrp_in_cksum <S2SV_ModEnd> ( ndo, <S2SV_ModStart> ( ndo, vrrp_in_cksum <S2SV_ModEnd> ( ndo, <S2SV_ModStart> ( ndo, vrrp_in_cksum <S2SV_ModEnd> ( ndo, <S2SV_ModStart> ( ndo, vrrp_in_cksum <S2SV_ModEnd> ( ndo,",0
187,"<S2SV_ModStart>! ptrace_has_cap ( task_cred ( task ) <S2SV_ModEnd> -> user_ns,",0
188,<S2SV_ModStart> maxval ) { size_t i ; size_t <S2SV_ModEnd> j ; jas_seqent_t,0
189,<S2SV_ModStart> -> i1_sei_parameters_present_flag = 0 <S2SV_ModEnd> ; ihevcd_parse_pic_timing_sei ( <S2SV_ModStart> -> i1_sei_parameters_present_flag = 0 <S2SV_ModEnd> ; ihevcd_parse_pic_timing_sei ( <S2SV_ModStart> -> i1_sei_parameters_present_flag = 0 <S2SV_ModEnd> ; ihevcd_parse_time_code_sei ( <S2SV_ModStart> -> i1_sei_parameters_present_flag = 0 <S2SV_ModEnd> ; ihevcd_parse_pic_timing_sei ( <S2SV_ModStart> -> i1_sei_parameters_present_flag = 0 <S2SV_ModEnd> ; ihevcd_parse_pic_timing_sei ( <S2SV_ModStart> -> i1_sei_parameters_present_flag = 0 <S2SV_ModEnd> ; ihevcd_parse_pic_timing_params_sei ( <S2SV_ModStart> -> i1_sei_parameters_present_flag = 0 <S2SV_ModEnd> ; ihevcd_parse_pic_timing_params_sei ( <S2SV_ModStart> -> i1_sei_parameters_present_flag = 0 <S2SV_ModEnd> ; ihevcd_parse_pic_tim,0
190,"<S2SV_ModStart> ; sde = hfi1_sdma_get_engine <S2SV_ModEnd> ( ppd, <S2SV_ModStart> ; sde = hfi1_sdma_get_engine <S2SV_ModEnd> ( ppd, <S2SV_ModStart> ; sde = hfi1_sdma_get_engine <S2SV_ModEnd> ( ppd, <S2SV_ModStart> ; sde = hfi1_sdma_get_engine <S2SV_ModEnd> ( ppd, <S2SV_ModStart> ; sde = hfi1_sdma_get_engine <S2SV_ModEnd> ( ppd, <S2SV_ModStart> ; sde = hfi1_sdma_get_engine <S2SV_ModEnd> ( ppd, <S2SV_ModStart> ; sde = hfi1_sdma_get_engine <S2SV_ModEnd> ( ppd, <S2SV_ModStart> ; sde = hfi1_sdma_get_engine <S2SV_ModEnd> ( ppd, <S2SV_ModStart> ; sde = hfi1_sdma_get_engine <S2SV_ModEnd> ( ppd, <S2SV_ModStart> ; sde = hfi1_sdma_get_engine <S2SV_ModEnd> ( ppd, <S2SV_ModStart> ; sde = hfi1_sdma_get_engine <S2SV_ModEnd> ( ppd, <S2SV_ModStart> ; sde = hfi1_sdma_get_engine <S2SV_ModEnd> ( ppd,",0
191,"<S2SV_ModStart> char * name <S2SV_ModEnd> ) { int <S2SV_ModStart> T_SILENT ) ) <S2SV_ModEnd> printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"" <S2SV_ModStart> name ) ; <S2SV_ModEnd> param -> testflag <S2SV_ModStart> |= T_CALC_CHECKSUM ; <S2SV_ModEnd> bzero ( ( <S2SV_ModStart> ) ) ; <S2SV_ModEnd> mysql_mutex_init ( mi_key_mutex_MI_SORT_INFO_mutex <S2SV_ModStart> MY_MUTEX_INIT_FAST ) ; mysql_cond_init ( mi_key_cond_MI_SORT_INFO_cond, & sort_info. cond, MY_MUTEX_INIT_FAST ) ; mysql_cond_init ( mi_key_cond_MI_SORT_INFO_cond, & sort_info. cond, MY_MUTEX_INIT_FAST ) ; mysql_mutex_init ( mi_key_mutex_MI_SORT_INFO_mutex, & sort_info. mutex, MY_MUTEX_INIT_FAST ) ; mysql_cond_init ( mi_key_cond_MI_SORT_INFO_cond, & sort_info. cond, MY_",0
192,"<S2SV_ModStart> ) ; } buflen = pq_getmsgint ( buf, 4 ) ; if ( buflen < 0 ) ereport ( ERROR, ( errcode ( ERRCODE_NULL_VALUE_NOT_ALLOWED ), errmsg ( ""null <S2SV_blank> value <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> for <S2SV_blank> hstore <S2SV_blank> key"" ) ) ) ; <S2SV_ModStart> ) ) ; if ( pairs [ i ]. key == NULL ) ereport ( ERROR, ( errcode ( ERRCODE_NULL_VALUE_NOT_ALLOWED ), errmsg ( ""null <S2SV_blank> value <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> for <S2SV_blank> hstore <S2SV_blank> key"" ) ) ) ; <S2SV_ModStart> = true ; if ( pairs [ i ]. val == NULL ) ereport ( ERROR, ( errcode ( ERRCODE_NULL_VALUE_NOT_ALLOWED ), errmsg ( ""null <S2SV_blank> value <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> for <S2SV_blank> hstore <S2SV_blank> val"" ) ) ) ;",0
193,"<S2SV_ModStart> val ) ; if ( strcmp ( var, ""command"" ) == 0 ) <S2SV_ModStart> var, val ) ; else if ( strcmp ( var, ""rspfile"" ) == 0 ) hasrspfile = true ; else if ( strcmp ( var, ""rspfile_content"" ) == 0 ) hasrspcontent = true ; } if (! hascommand ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> command"", r -> name ) ; if ( hasrspfile!= hasrspcontent ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name",0
194,"<S2SV_ModStart> & err, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"" <S2SV_ModEnd>, agoo_con_kind_str ( <S2SV_ModStart> & err, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"" <S2SV_ModEnd>, agoo_con_kind_str ( <S2SV_ModStart> & err, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"" <S2SV_ModEnd>, agoo_con_kind_str ( <S2SV_ModStart> & err, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"" <S2SV_ModEnd>, agoo_con_kind_str ( <S2SV_ModStart> & err, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"" <S2SV_ModEnd>, agoo_con_kind_str ( <S2SV_ModStart> & err, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"" <S2SV_ModEnd>, agoo_con_kind_str ( <S2SV_ModStart> & err, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"" <S2SV_ModEnd>, agoo_con_kind_str ( <S2SV_ModStart> & err, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"" <S2SV_ModEnd>, agoo_con_kind_str ( <S2SV_ModStart> & err, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"" <S2SV_ModEnd>, agoo_con_kind_str ( <S2SV_ModStart> & err, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"" <S2SV_ModEnd>, agoo_",0
195,"<S2SV_ModStart> int16_t out [ 16 ], temp_out [ 16 ] ; const transform_2d ht = FHT_16 [ tx_type ] ; for ( i = 0 ; i < 16 ; ++ i ) { for ( j = 0 ; j < 16 ; ++ j ) outptr [ j * 16 + i ] = input [ j * stride + i ] * 4 ; ht. cols ( temp_in, temp_out ) ; for ( j = 0 ; j < 16 ; ++ j ) outptr [ j * 16 + i ] = ( temp_out [ j ] + 1 + ( temp_out [ j ] < 0 ) ) >> 2 ; } <S2SV_ModEnd> int i,",0
196,"<S2SV_ModStart> ( stderr, ""Can\'t <S2SV_blank> export <S2SV_blank> desktop <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s\\n"" <S2SV_ModEnd>, escaped_app, <S2SV_ModStart> ( stderr, ""Can\'t <S2SV_blank> export <S2SV_blank> desktop <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s\\n"" <S2SV_ModEnd>, escaped_app, <S2SV_ModStart> ( stderr, ""Can\'t <S2SV_blank> export <S2SV_blank> desktop <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s\\n"" <S2SV_ModEnd>, escaped_app, <S2SV_ModStart> ( stderr, ""Can\'t <S2SV_blank> export <S2SV_blank> desktop <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s\\n"" <S2SV_ModEnd>, escaped_app, <S2SV_ModStart> ( stderr, ""Can\'t <S2SV_blank> export <S2SV_blank> desktop <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s\\n"" <S2SV_ModEnd>, escaped_app, <S2SV_ModStart> ( stderr, ""Can\'t <S2SV_blank> export <S2SV_blank> desktop <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s\\n"" <S2SV_ModEnd>, escaped_app, <S2SV_ModStart> ( stderr, ""Can\'t <S2SV_blank> export <S2SV_blank> desktop <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s\\n"" <S2SV_ModEnd>, escaped_app, <S2SV_ModStart> ( stderr, ""Can\'t <S2SV_blank> export <S2SV_blank> desktop <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s\\n"" <S2SV_ModEnd>, escaped_",0
197,"<S2SV_ModStart> '\\0' ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> false ; } char * temp_filename = osi_calloc ( strlen ( filename ) + 5 ) ; if (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; }",0
198,"<S2SV_ModStart> ( ndo, ""VTPv%u, <S2SV_blank> Message <S2SV_blank> %s <S2SV_blank> (0x%02x), <S2SV_blank> length <S2SV_blank> %u"" <S2SV_ModEnd>, type, <S2SV_ModStart> ( ndo, ""VTPv%u, <S2SV_blank> Message <S2SV_blank> %s <S2SV_blank> (0x%02x), <S2SV_blank> length <S2SV_blank> %u"" <S2SV_ModEnd>, type, <S2SV_ModStart> ( ndo, ""VTPv%u, <S2SV_blank> Message <S2SV_blank> %s <S2SV_blank> (0x%02x), <S2SV_blank> length <S2SV_blank> %u"" <S2SV_ModEnd>, type, <S2SV_ModStart> ( ndo, ""VTPv%u, <S2SV_blank> Message <S2SV_blank> %s <S2SV_blank> (0x%02x), <S2SV_blank> length <S2SV_blank> %u"" <S2SV_ModEnd>, type, <S2SV_ModStart> ( ndo, ""VTPv%u, <S2SV_blank> Message <S2SV_blank> %s <S2SV_blank> (0x%02x), <S2SV_blank> length <S2SV_blank> %u"" <S2SV_ModEnd>, type, <S2SV_ModStart> ( ndo, ""VTPv%u, <S2SV_blank> Message <S2SV_blank> %s <S2SV_blank> (0x%02x), <S2SV_blank> length <S2SV_blank> %u"" <S2SV_ModEnd>, type, <S2SV_ModStart> ( ndo, ""VTPv%u, <S2SV_blank> Message <S2SV_blank> %s <S2SV_blank> (0x%02x), <S2SV_blank> length <S2SV_blank> %u"" <S2SV_ModEnd>, type,",0
199,"<S2SV_ModStart> userData, target <S2SV_ModEnd> ) ; ctxt",0
200,"<S2SV_ModStart> ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.1\\r\\n"" ""Content-Type: <S2SV_blank> application/json\\r\\n"" ""Content-Length: <S2SV_blank> %ld\\r\\n"" <S2SV_ModEnd> ""%s"" ""\\r\\n"" ""%s""",0
201,"<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> fprintf ( stderr <S2SV_ModStart> ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.asoundrc <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; <S2SV_ModEnd> _exit ( 0 <S2SV_ModStart> ) ; } pid_t child = fork ( ) ; if ( child < 0 ) errExit ( ""fork"" ) ; if ( child == 0 ) { drop_privs ( 0 ) ; int rv = copy_file ( src, dest ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.asoundrc <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } _exit ( 0 ) ; }",0
202,<S2SV_ModStart>!= BFA_STATUS_OK ) { kfree ( fcstats ) ; <S2SV_ModStart> return NULL ; },1
203,<S2SV_ModStart> -> x = <S2SV_ModEnd> value -> x <S2SV_ModStart> value -> x < 0.0f? - 1.0f : 1.0f <S2SV_ModEnd> ; value -> <S2SV_ModStart> -> y = <S2SV_ModEnd> value -> y <S2SV_ModStart> value -> y < 0.0f? - 1.0f : 1.0f <S2SV_ModEnd> ; value -> <S2SV_ModStart> -> z = <S2SV_ModEnd> value -> z <S2SV_ModStart> value -> z < 0.0f? - 1.0f : 1.0f <S2SV_ModEnd> ; } <S2SV_null>,0
204,<S2SV_ModStart> -> sasl_username = g_strdup ( <S2SV_ModStart> src -> sasl_username ) <S2SV_ModStart> -> sasl_password = g_strdup ( <S2SV_ModStart> src -> sasl_password ),1
205,"<S2SV_ModStart>, 1, <S2SV_ModEnd> cm -> mb_rows <S2SV_ModStart> cm -> mb_rows * <S2SV_ModEnd> cm -> mb_cols <S2SV_ModStart> cm -> mb_cols <S2SV_ModEnd> ; cpi ->",0
206,"<S2SV_ModStart> i, tcount <S2SV_ModEnd>, datao ; <S2SV_ModStart> return ; } tcount = 0 ; for ( i = c, o = datao ; i ; -- i, o += 12 ) { size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteCanonEntry ) ) ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } n -> entries [ tcount ]. tag = exif_get_short ( buf + o, n -> order ) ; n -> entries [ tcount ]. format = exif_get_short ( buf + o + 2, n -> order ) ; n -> entries [ tcount ]. components = exif_get_long ( buf + o + 4, n -> order ) ; tcount ++ ; } } <S2SV_ModEnd> if (!",0
207,"<S2SV_ModStart>, llbuff, sizeof <S2SV_ModEnd> ( llbuff ) <S2SV_ModStart>, llbuff2, sizeof <S2SV_ModEnd> ( llbuff2 ) <S2SV_ModStart>, llbuff, sizeof <S2SV_ModEnd> ( llbuff ) <S2SV_ModStart>, llbuff, sizeof <S2SV_ModEnd> ( llbuff ) <S2SV_ModStart>, llbuff2, sizeof <S2SV_ModEnd> ( llbuff ) <S2SV_ModStart>, llbuff, sizeof <S2SV_ModEnd> ( llbuff ) <S2SV_ModStart>, llbuff, sizeof <S2SV_ModEnd> ( llbuff ) <S2SV_ModStart>, llbuff2, sizeof <S2SV_ModEnd> ( llbuff ) <S2SV_ModStart>, llbuff, sizeof <S2SV_ModEnd> ( llbuff2 ) <S2SV_ModStart>, llbuff2, sizeof <S2SV_ModEnd> ( llbuff ) <S2SV_ModStart>, llbuff, sizeof <S2SV_ModEnd> ( llbuff ) <S2SV_ModStart>, llbuff, sizeof <S2SV_ModEnd> ( llbuff ) <S2SV_ModStart>, llbuff2, sizeof <S2SV_ModEnd> ( llbuff ) <S2SV_ModStart>, llbuff, sizeof <S2SV_ModEnd> ( llbuff ) <S2SV_ModStart>, llbuff, sizeof <S2SV_ModEnd> ( llbuff )",0
208,"<S2SV_ModStart> long hex ; <S2SV_ModEnd> if (! <S2SV_ModStart> ; while ( <S2SV_ModEnd> alloc > 0 <S2SV_ModStart> 2 ; } if ( ( '%' == in ) && ISXDIGIT ( string [ 1 ] ) && ISXDIGIT ( string [ 2 ] ) ) { char hexstr [ 3 ] ; char * ptr ; hexstr [ 0 ] = string [ 1 ] ; hexstr [ 1 ] = string [ 2 ] ; hexstr [ 2 ] = 0 ; in = curlx_ultouc ( hex ) ; res = Curl_convert_from_network ( handle, & in, 1 ) ; if ( res ) { free ( ns ) ; return NULL ; } string += 2 ; alloc -= 2 ; }",0
209,"<S2SV_ModStart> ) ; RAnalOp op <S2SV_ModEnd> ; avr_op_analyze ( <S2SV_ModStart> cpu ) ; avr_op_analyze ( op, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; r_strbuf_fini ( & op. esil ) ; op -> jump = op -> addr + next_op. size + 2 ; op -> cycles = 1 ; ESIL_A ( ""r%d,r%d,^,!,"", r, d ) ; ESIL_A ( ""?{,%"" PFMT64d "",pc,=,},"" <S2SV_ModEnd>, op -> <S2SV_ModStart> jump ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
210,"<S2SV_ModStart> ; def -> session_setup = usm_session_init ; def -> handle_report = usm_handle_report ; def -> probe_engineid = usm_discover_engineid ; def -> post_probe_engineid = usm_create_user_from_session_hook ; if ( register_sec_mod ( USM_SEC_MODEL_NUMBER, ""usm"", def )!= SNMPERR_SUCCESS ) { SNMP_FREE ( def ) ; snmp_log ( LOG_ERR, ""could <S2SV_blank> not <S2SV_blank> register <S2SV_blank> usm <S2SV_blank> sec <S2SV_blank> mod\\n"" ) ; return ; } snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_POST_PREMIB_READ_CONFIG, init_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; def -> pdu_free_state_ref = usm_free_usmStateReference <S2SV_ModEnd> ; snmp_register_callback (",0
211,<S2SV_ModStart> NULL ; return <S2SV_ModEnd> match ( prog <S2SV_ModStart> sub ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
212,"<S2SV_ModStart> idx ] ; switch ( action ) { case MODE_SET_RESERVE1 : if ( var_val_type!= ASN_INTEGER ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> type <S2SV_blank>!= <S2SV_blank> int\\n"" ) ; return SNMP_ERR_WRONGTYPE ; } idx = * ( ( long * ) var_val ) ; if ( idx!= 1 ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; } if (! exten ||! exten -> efix_entry ) { snmp_log ( LOG_ERR, ""No <S2SV_blank> command <S2SV_blank> to <S2SV_blank> run\\n"" ) ; return SNMP_ERR_GENERR ; } return SNMP_ERR_NOERROR ; case MODE_SET_COMMIT : netsnmp_cache_check_and_reload ( exten -> efix_entry -> cache ) ; } <S2SV_ModStart> # ifndef NETSNMP_NO_WRITE_SUPPORT <S2SV_ModEnd> return SNMP_ERR_NOERROR ;",0
213,<S2SV_ModStart> ; } case 3 : { CheckNumberPixels ( 4 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 6 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 4 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 2 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; break ; } case,0
214,<S2SV_ModStart> open_list ) { <S2SV_ModEnd> list_move_tail ( & <S2SV_ModStart> = NULL ; list_del_init ( & slave -> ack_list ) ;,0
215,<S2SV_ModStart> ) ps_dec -> ps_bitstrm <S2SV_ModEnd> -> u4_bitoffset = <S2SV_ModStart> else ps_dec -> ps_bitstrm <S2SV_ModEnd> -> u4_ofst += <S2SV_ModStart> += ps_dec -> ps_bitstrm <S2SV_ModEnd> -> u4_bitoffset ;,0
216,<S2SV_ModStart> originalWidth ; int_fast32_t topOverflow = gifFilePtr -> Image. Top + gifFilePtr -> Image. Height - info -> originalTop ; int_fast32_t leftOverflow = gifFilePtr -> Image. Left + gifFilePtr -> Image. Width - info -> originalLeft ; if ( leftOverflow > 0 ) { sp -> ImageDesc. Left -= leftOverflow ; } int_fast32_t topOverflow = gifFilePtr -> Image. Top + info -> Image. Height - info -> originalTop ; if ( topOverflow > 0 ) { sp -> ImageDesc. Top -= topOverflow ; } int_fast32_t,0
217,"<S2SV_ModStart> -> validator -> passwd ) ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> passwd, 0, ""*()"" ) ; if ( size!= conn -> validator -> passwd. len ) return ret_error ; ret = init_filter ( ldap, props, conn ) ; if ( ret!= ret_ok ) return ret ; re = ldap_search_s ( ldap -> conn, props -> basedn. buf, LDAP_SCOPE_SUBTREE, props -> passwd. buf, attrs, 0, & message ) ; if ( re!= LDAP_SUCCESS ) { LOG_ERROR ( CHEROKEE_ERROR_VALIDATOR_LDAP_SEARCH, props -> passwd. buf? props -> passwd. buf : """" ) ; return ret_error ; } TRACE ( ENTRIES, ""subtree <S2SV_blank> search <S2SV_blank> (%s): <S2SV_blank> done\\n"", props -> passwd. buf <S2SV_ModEnd> ) ; re",0
218,<S2SV_ModStart> bus ] ; if ( bi == NULL ) return <S2SV_ModEnd> ; si =,0
219,"<S2SV_ModStart> ; rdsdebug ( ""size <S2SV_blank> %zu <S2SV_blank> flags <S2SV_blank> 0x%lx <S2SV_blank> timeo <S2SV_blank> %ld\\n"" <S2SV_ModEnd>, size, <S2SV_ModStart> ; rdsdebug ( ""recvmsg <S2SV_blank> woke <S2SV_blank> inc <S2SV_blank> %p <S2SV_blank> timeo <S2SV_blank> %ld\\n"", inc, timeo ) ; if ( timeo > 0 || timeo == MAX_SCHEDULE_TIMEOUT ) continue ; ret = timeo ; if ( ret == 0 ) ret = - ETIMEDOUT ; break ; } rdsdebug ( ""copying <S2SV_blank> inc <S2SV_blank> %p <S2SV_blank> from <S2SV_blank> %pI4:%u <S2SV_blank> to <S2SV_blank> user\\n"", inc, & inc -> i_conn -> c_faddr, ntohs ( inc -> i_hdr. h_sport ) ) ; ret = inc -> i_conn -> c_trans -> inc_copy_to_user ( inc, msg -> msg_iov, size <S2SV_ModEnd> ) ; if",0
220,<S2SV_ModStart> += 9 ; ( <S2SV_ModStart> isspace ( * ( ++ t ) <S2SV_ModEnd> ) &&! <S2SV_ModStart> isspace ( * ( ++ t ) <S2SV_ModEnd> ) ) t,0
221,"<S2SV_ModStart>. active_set ; <S2SV_ModEnd> uipc_main. read_set <S2SV_ModStart> uipc_main. read_set = select ( uipc_main. max_fd + 1, & uipc_main. read_set, NULL, NULL, NULL ) ; if ( result == 0 ) { BTIF_TRACE_EVENT ( ""select <S2SV_blank> timeout"" ) ; continue ; } else if ( result < 0 ) { BTIF_TRACE_EVENT ( ""select <S2SV_blank> failed <S2SV_blank> %s"", strerror ( errno ) ) ; continue ; } UIPC_LOCK ( ) ; uipc_check_interrupt_locked ( ) ; uipc_check_task_flags_locked ( ) ; uipc_check_fd_locked ( UIPC_CH_ID_AV_AUDIO ) ; for ( ch_id = 0 ; ch_id < UIPC_CH_NUM ; ch_id ++ ) { if ( ch_id!= UIPC_CH_ID_AV_AUDIO ) uipc_check_fd_locked ( ch_id ) ; } UIPC_UNLOCK ( ) ; result = select ( u",0
222,"<S2SV_ModStart> msixcap msixcap ; if <S2SV_ModEnd> ( msgnum >= <S2SV_ModStart> <= MAX_MSIX_TABLE_ENTRIES ) return ( - EINVAL ) ; if <S2SV_ModEnd> ( barnum >= <S2SV_ModStart> <= PCIR_MAX_BAR_0 ) return ( - EINVAL ) ; tab_size = msgnum * MSIX_TABLE_ENTRY_SIZE ; tab_size = roundup2 ( tab_size, 4096 ) ; tab_size = roundup2 ( tab_size, 4096 ) ; dev -> msix. table_bar = barnum ; dev -> msix. pba_bar = barnum ; dev -> msix. table_offset = 0 ; dev -> msix. table_count = msgnum ; dev -> msix. pba_offset = tab_size ; dev -> msix. pba_size = PBA_SIZE ( msgnum ) ; <S2SV_ModEnd> pci_populate_msixcap ( &",0
223,<S2SV_ModStart> max ) { return <S2SV_ModEnd> vp9_rb_read_literal ( rb <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
224,<S2SV_ModStart> == NULL ) return KRB5KDC_ERR_PREAUTH_FAILED <S2SV_ModEnd> ; status =,0
225,<S2SV_ModStart> cpi ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; <S2SV_ModStart> else if ( <S2SV_ModEnd> tx_size_search_method == USE_FULL_RD <S2SV_ModStart> tx_size_search_method == USE_FULL_RD || <S2SV_ModEnd> tx_size_search_method == USE_LARGESTALL <S2SV_ModStart> tx_size_search_method == USE_LARGESTALL && <S2SV_ModEnd> tx_size_search_method == USE_FULL_RD <S2SV_ModStart> tx_size_search_method == USE_FULL_RD && <S2SV_ModEnd> tx_size_search_method == USE_LARGESTALL <S2SV_ModStart> tx_size_search_method == USE_LARGESTALL && <S2SV_ModEnd> tx_size_search_method == USE_LARGESTALL <S2SV_ModStart> tx_size_search_method == USE_LARGESTALL && <S2SV_ModEnd> tx_size_search_method == USE_LARGESTALL <S2SV_ModStart> tx_size_search_method == USE_LARGESTALL && <S2SV_ModEnd> tx_size_search_method == USE_FULL_RD <S2SV_ModStart> tx_size_search_method == USE_FULL_RD && <S2SV_ModEnd> tx_size_search_method == USE_LARGEST,0
226,<S2SV_ModStart> ; si_symb = strdup ( <S2SV_ModStart> ]. si_symb ) <S2SV_ModStart> ; si_symb = strdup ( <S2SV_ModStart> ]. si_symb ) <S2SV_ModStart> ; si_symb = strdup ( <S2SV_ModStart> ]. si_symb ) <S2SV_ModStart> ; si_symb = strdup ( <S2SV_ModStart> ]. si_symb ) <S2SV_ModStart> ; si_symb = strdup ( <S2SV_ModStart> ]. si_symb ) <S2SV_ModStart> ; si_symb = strdup ( <S2SV_ModStart> ]. si_symb ) <S2SV_ModStart> ; si_symb = strdup ( <S2SV_ModStart> ]. si_symb ) <S2SV_ModStart> ; si_symb = strdup ( <S2SV_ModStart> ]. si_symb ) <S2SV_ModStart> ; si_symb = strdup ( <S2SV_ModStart> ]. si_symb ) <S2SV_ModStart> ; si_symb = strdup ( <S2SV_ModStart> ]. si_symb ),0
227,<S2SV_ModStart> ( buf1 -> tile_size <S2SV_ModEnd> < buf2 -> <S2SV_ModStart> < buf2 -> tile_size <S2SV_ModEnd> ) { return <S2SV_ModStart> ( buf1 -> tile_size <S2SV_ModEnd> == buf2 -> <S2SV_ModStart> == buf2 -> tile_size <S2SV_ModEnd> ) { return,0
228,<S2SV_ModStart> ) + size ; mutex_lock ( & xt_init_mutex ) <S2SV_ModStart>! info ) { mutex_unlock ( & xt_init_mutex ) ; <S2SV_ModStart> return NULL ; } <S2SV_ModStart> = size ; mutex_unlock ( & xt_init_mutex ) ;,0
229,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,1
230,"<S2SV_ModStart> ( ) ; if ( in_atomic ( ) ||! mm ) goto no_context ; down_read ( & mm -> mmap_sem ) ; vma = find_vma ( mm, address ) ; if (! vma ) { # ifdef DEBUG_FAULT print_task ( tsk ) ; printk ( ""%s:%d <S2SV_blank> fault, <S2SV_blank> address <S2SV_blank> is <S2SV_blank> 0x%08x <S2SV_blank> PC <S2SV_blank> %016Lx <S2SV_blank> textaccess <S2SV_blank> %d <S2SV_blank> writeaccess <S2SV_blank> %d\\n"", __func__, __LINE__, address, regs -> pc, textaccess, writeaccess ) ; show_regs ( regs ) ; # endif goto bad_area ; } <S2SV_ModStart> regs, address <S2SV_ModEnd> ) ; if",0
231,"<S2SV_ModStart> ; r = sd_event_add ( b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r < 0 ) { log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } r = sd_event_add_io ( b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r < 0 ) { log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } log_info ( ""Watching <S2SV_blank> system <S2SV_blank> buttons <S2SV_blank> on <S2SV_blank> /dev/input/%s <S2SV_blank> (%s)"", b -> name, name ) ; return 0 ; fail : b -> fd = safe_close ( b -> fd ) ; return r <S2SV_ModEnd> ; } <S2SV_null>",0
232,<S2SV_ModStart> ( ) ; errors += test_string_formatting_2 ( ) ; errors += test_string_formatting_3 ( ) ; errors += test_string_formatting_4 ( ) ; errors += test_string_formatting_5 ( ) ; errors += test_string_formatting_6 ( ) ; errors += test_string_formatting_7 ( ) ; errors += test_string_formatting_8 ( ) ; errors += test_string_formatting_9 ( ) ;,0
233,<S2SV_ModStart> -> lun ) sas_eh_finish_cmd <S2SV_ModEnd> ( cmd ),1
234,"<S2SV_ModStart> end_col_offset ) ; <S2SV_ModEnd> name = NEW_IDENTIFIER <S2SV_ModStart> c_arena ) ; if ( is_async ) return AsyncFunctionDef ( name, args, body, decorator_seq, returns, LINENO ( n0 ), n0 -> n_col_offset, end_lineno, end_col_offset, c -> c_arena ) ; return FunctionDef ( name, args, body, decorator_seq, returns, LINENO ( n ), n -> n_col_offset, end_lineno, end_col_offset, c -> c_arena ) ;",0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,<S2SV_ModStart> break ; case MagickTrue <S2SV_ModEnd> : status = <S2SV_ModStart> break ; case MagickTrue <S2SV_ModEnd> : status = <S2SV_ModStart> break ; case MagickTrue <S2SV_ModEnd> : status = <S2SV_ModStart> break ; case MagickTrue <S2SV_ModEnd> : status = <S2SV_ModStart> break ; case MagickTrue <S2SV_ModEnd> : status = <S2SV_ModStart> break ; case MagickTrue <S2SV_ModEnd> : status = <S2SV_ModStart> break ; case MagickTrue <S2SV_ModEnd> : status = <S2SV_ModStart> break ; case MagickTrue <S2SV_ModEnd> : status = <S2SV_ModStart> break ; case MagickTrue <S2SV_ModEnd> : status = <S2SV_ModStart> break ; case MagickTrue <S2SV_ModEnd> : status = <S2SV_ModStart> break ; case MagickTrue <S2SV_ModEnd> : status = <S2SV_ModStart> break ; case MagickTrue <S2SV_ModEnd> : status = <S2SV_ModStart> break ; case MagickTrue <S2SV_ModEnd> : status =,0
237,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
238,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
239,"<S2SV_ModStart> -> headend ) { <S2SV_ModStart> psf ) ; if ( psf -> headindex >= SIGNED_SIZEOF ( psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } } <S2SV_ModStart> -> headend ; if ( psf -> headindex >= SIGNED_SIZEOF ( psf -> header ) ) { <S2SV_ModStart> psf -> headend ; if ( psf -> headindex >= SIGNED_SIZEOF ( psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } }",0
240,"<S2SV_ModStart> u4_ofst ) ; DEBUG_OFST ( ""ps_cabac->au1_ctxt_models"", ps_cabac -> au1_ctxt_models, sizeof ( ps_cabac -> au1_ctxt_models ) ) ; DEBUG_OFST ( ""ps_bitstrm->u4_bit_ofst"", ps_bitstrm -> u4_bit_ofst, sizeof ( ps_bitstrm -> u4_bit_ofst ) ) ; DEBUG_OFST ( ""ps_bitstrm->u4_cur_word"", ps_bitstrm -> u4_cur_word, sizeof ( ps_bitstrm -> u4_nxt_word ) ) ; DEBUG_OFST ( ""ps_bitstrm->u4_bit_ofst"", ps_bitstrm -> u4_ofst, sizeof ( ps_bitstrm -> u4_bit_ofst ) ) ;",0
241,<S2SV_ModStart> } if ( ( <S2SV_ModStart> type == MD_LINE_FENCEDCODE || pivot_line -> type == MD_LINE_FENCEDCODE ) <S2SV_ModStart> } if ( ( <S2SV_ModStart> type == MD_LINE_FENCEDCODE || pivot_line -> type == MD_LINE_FENCEDCODE ) <S2SV_ModStart> } if ( ( <S2SV_ModStart> type == MD_LINE_FENCEDCODE || pivot_line -> type == MD_LINE_FENCEDCODE ) <S2SV_ModStart> } if ( ( <S2SV_ModStart> type == MD_LINE_FENCEDCODE || pivot_line -> type == MD_LINE_FENCEDCODE ) <S2SV_ModStart> } if ( ( <S2SV_ModStart> type == MD_LINE_FENCEDCODE || pivot_line -> type == MD_LINE_FENCEDCODE ) <S2SV_ModStart> } if ( ( <S2SV_ModStart> type == MD_LINE_FENCEDCODE || pivot_line -> type == MD_LINE_FENCEDCODE ),0
242,"<S2SV_ModStart> event ) { <S2SV_ModEnd> if (! <S2SV_ModStart> if (! event -> ctx <S2SV_ModEnd> ) { cpu_function_call <S2SV_ModStart>! task_function_call ( event -> ctx <S2SV_ModEnd>, __perf_event_disable, <S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
243,<S2SV_ModStart> noise_level ; # ifdef <S2SV_ModEnd> CONFIG_POSTPROC_VISUALIZER flags ->,0
244,"<S2SV_ModStart> = 0 ; if ( is_ipv6 ) { msgptr. v6 = ( const struct olsr_msg6 * ) tptr ; msg_type = msgptr. v6 -> msg_type ; msg_len = EXTRACT_16BITS ( msgptr. v6 -> msg_len ) ; ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> msg_type <S2SV_blank> 0x%04x, <S2SV_blank> msg_len <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6, EXTRACT_16BITS ( msgptr. v6 -> msg_type ), msg_len ) ) ; ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> msg_type <S2SV_blank> 0x%04x, <S2SV_blank> msg_len <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6, EXTRACT_16BITS ( msgptr. v6 -> msg_type ), msg_len ) ) ; ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> msg_type <S2SV_blank> 0x%04x, <S2SV_blank> msg_len <S2SV_blank> %u"", ( is_ipv6 == 0",0
245,"<S2SV_ModStart> end_time ) { <S2SV_ModEnd> int64_t store_reg [ <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vpx_usec_timer_start ( & <S2SV_ModStart> - 1 ; # if HAVE_NEON # if CONFIG_RUNTIME_CPU_DETECT if ( cm -> cpu_caps & HAS_NEON ) # endif { vp8_push_neon ( store_reg ) ; } # endif vpx_usec_timer_start ( & timer ) ; if ( sd -> y_width!= cpi -> oxcf. Width || sd -> y_height!= cpi -> oxcf. Height ) { assert ( cpi -> oxcf. lag_in_frames < 2 ) ; dealloc_raw_frame_buffers ( cpi ) ; alloc_raw_frame_buffers ( cpi ) ; } if ( vp8_lookahead_push ( cpi -> lookahead, sd, time_stamp, end_time, frame_flags, cpi -> active_map_enabled? cpi -> active_map : NULL ) ) res = - 1 ;",0
246,"<S2SV_ModStart> 0 ) ; if ( copy_file ( src, dest ) == - 1 ) { fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; } else { fs_logger2 ( ""clone"", dest ) ; } _exit ( 0 ) ; } pid_t child = fork ( ) ; if ( child < 0 ) errExit ( ""fork"" ) ; if ( child == 0 ) { drop_privs ( 0 ) ; int rv = copy_file ( src, dest ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } _exit ( 0 ) ; } waitpid ( child, NULL, 0 ) ; if ( chown ( dest, getuid ( ), getgid ( ) ) == - 1 ) errExit ( <S2SV_ModEnd> ""fchown"" ) ; <S2SV_ModStart> ""fchmod"" ) ; <S2SV_ModEnd> return 1 ;",0
247,<S2SV_ModStart> -> core_frame_length == 768 ) { if ( ptr_hbe_txposer -> k_start + ptr_hbe_txposer -> synth_size > 16 ) ptr_hbe_txposer -> k_start = 16 - ptr_hbe_txposer -> synth_size ; } else if ( ptr_hbe_txposer -> core_frame_length == 768 ) { if ( ptr_hbe_txposer -> k_start + ptr_hbe_txposer -> synth_size > 24 ) ptr_hbe_txposer -> k_start = 24 - ptr_hbe_txposer -> synth_size ; } else { if ( ptr_hbe_txposer -> k_start + ptr_hbe_txposer -> synth_size > 24 ) ptr_hbe_txposer -> k_start = 24 - ptr_hbe_txposer -> synth_size ; } <S2SV_ModEnd> } sfb =,0
248,"<S2SV_ModStart> prov_spec = parsed_require_line <S2SV_ModEnd> ; spec = <S2SV_ModStart> ) ""Unable <S2SV_blank> to <S2SV_blank> compile <S2SV_blank> VM <S2SV_blank> for <S2SV_blank> authz <S2SV_blank> provider <S2SV_blank> %s"", prov_spec -> name <S2SV_ModEnd> ) ; ap_lua_release_state <S2SV_ModStart> ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> \'%s\' <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> function)"", prov_spec -> name, prov_spec -> file_name <S2SV_ModEnd> ) ; ap_lua_release_state <S2SV_ModStart> ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> \'%s\' <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> function)"", prov_spec -> name <S2SV_ModEnd>, prov_spec -> <S2SV_ModStart> ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> \'%s\' <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> function)"", prov_spec -> function_name, prov_spec -> file_name <S2SV_ModEnd> ) ; ap_lua_release_state <S2SV_ModStart> ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> \'%s\' <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> function)"", prov_spec -> function_name, prov",0
249,"<S2SV_ModStart> row ) ; ( void ) FormatImageProperty ( image, ""dpx:file.samples_per_pixel"", ""%.8s"", quantum_info -> samples_per_pixel ) ; <S2SV_ModStart> row ) ; ( void ) FormatImageProperty ( image, ""dpx:file.samples_per_pixel"", ""%.8s"", quantum_info -> samples_per_pixel ) ; <S2SV_ModStart> row ) ; ( void ) FormatImageProperty ( image, ""dpx:file.samples_per_pixel"", ""%.8s"", quantum_info -> samples_per_pixel ) ; <S2SV_ModStart> row ) ; ( void ) FormatImageProperty ( image, ""dpx:file.samples_per_pixel"", ""%.8s"", quantum_info -> samples_per_pixel ) ; <S2SV_ModStart> row ) ; ( void ) FormatImageProperty ( image, ""dpx:file.samples_per_pixel"", ""%.8s"", quantum_info -> samples_per_pixel ) ;",0
250,"<S2SV_ModStart>! proto_end ) { c -> username = NULL ; c -> password = NULL ; <S2SV_ModStart> return 0 ; } <S2SV_ModStart> '/' ) ; <S2SV_ModEnd> if ( proto_end <S2SV_ModStart> '\\0' ; } cp = proto_end + 3 ; at = strchr ( cp, '@' ) ; colon = strchr ( cp, ':' ) ; slash = strchrnul ( cp, '/' ) ; if (! at || slash <= at ) { host = cp ; } else if (! colon || at <= colon ) { c -> username = url_decode_mem ( cp, at - cp ) ; c -> password = url_decode_mem ( colon + 1, at - ( colon + 1 ) ) ; host = at + 1 ; }",0
251,"<S2SV_ModStart> tag ) { case FDT_DATA : include = want >= 2 ; stop_at = offset ; prop = fdt_get_property_by_offset ( fdt, offset, NULL ) ; str = fdt_string ( fdt, fdt32_to_cpu ( prop -> nameoff ) ) ; if (! str ) return - FDT_ERR_BADSTRUCTURE ; if ( str_in_list ( str, exc_prop, exc_prop_count ) ) include = 0 ; break ;",0
252,"<S2SV_ModStart> ( server. bgsavechildpid == - 1 && server. bgrewritechildpid == - 1 ) { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ), zmalloc_used_memory ( ) ) ; } else if ( server. bgsavechildpid == - 1 && server. bgrewritechildpid == - 1 ) { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ), zmalloc_used_memory ( ) ) ; } else { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ), zmalloc_used_memory ( ) ) ; } if ( server.",0
253,"<S2SV_ModStart> channel ) ; set_description ( client ) ; g_debug ( ""GsmXSMPClient: <S2SV_blank> New <S2SV_blank> client <S2SV_blank> \'%s\'"", client -> priv -> description ) ; <S2SV_ModStart> client ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
254,<S2SV_ModStart> j ++ ) { <S2SV_ModStart> ; } } },0
255,"<S2SV_ModStart> action ) { double x = r * BzK ; double y = r * BzK ; <S2SV_ModStart>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> %12.3f <S2SV_blank> c\\n"", x <S2SV_ModEnd>, - r <S2SV_ModStart>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", x <S2SV_ModEnd>, r, <S2SV_ModStart>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c <S2SV_blank> %s\\n"", x <S2SV_ModEnd>, - r <S2SV_ModStart> * BzK, x <S2SV_ModEnd>, - r <S2SV_ModStart> * BzK, x <S2SV_ModEnd>, - r <S2SV_ModStart>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c <S2SV_blank> %s\\",0
256,"<S2SV_ModStart> { sf -> x_scale_fp = get_fixed_point_scale_factor ( other_w, this_w ) ; sf -> y_scale_fp = get_fixed_point_scale_factor ( other_h, this_h ) ; sf -> x_step_q4 = scaled_x ( 16, sf ) ; sf -> y_step_q4 = scaled_y ( 16, sf ) ; if ( vp9_is_scaled ( sf ) ) { sf -> scale_value_x = unscaled_value ; sf -> scale_value_y = unscaled_value ; } else { sf -> scale_value_x = unscaled_value ; sf -> scale_value_y = unscaled_value ; } } if ( sf ->",0
257,"<S2SV_ModStart> (! sock ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( buf ) { if ( oe_memset_s ( buf, count, 0, count )!= OE_OK ) OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( oe_syscall_recv_ocall ( & ret, sock -> host_fd, buf, count, flags )!= OE_OK ) OE_RAISE_ERRNO ( OE_EINVAL ) ; done : if ( buf ) { if ( oe_memset_s ( buf, count, 0, count )!= OE_OK ) OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( oe_syscall_recv_ocall ( & ret, sock -> host_fd, buf, count, flags )!= OE_OK ) OE_RAISE_ERRNO ( OE_EINVAL ) ; <S2SV_ModEnd> return ret ;",0
258,"<S2SV_ModStart> skb ) { ip6_datagram_recv_ctl ( sk, & msg, <S2SV_ModEnd> skb ) ; <S2SV_ModStart> skb ) { ip6_datagram_recv_ctl ( sk, & msg, <S2SV_ModEnd> skb ) ; <S2SV_ModStart> skb ) { ip6_datagram_recv_ctl ( sk, & msg, <S2SV_ModEnd> skb ) ; <S2SV_ModStart> skb ) { ip6_datagram_recv_ctl ( sk, & msg, <S2SV_ModEnd> skb ) ; <S2SV_ModStart> skb ) { ip6_datagram_recv_ctl ( sk, & msg, <S2SV_ModEnd> skb ) ; <S2SV_ModStart> skb ) { ip6_datagram_recv_ctl ( sk, & msg, <S2SV_ModEnd> skb ) ; <S2SV_ModStart> skb ) { ip6_datagram_recv_ctl ( sk, & msg, <S2SV_ModEnd> skb ) ; <S2SV_ModStart> skb ) { ip6_datagram_recv_ctl ( sk, & msg, <S2SV_ModEnd> skb ) ;",0
259,"<S2SV_ModStart> ( ) ; <S2SV_ModEnd> sctp_v6_pf_exit ( ) <S2SV_ModStart> sctp_v4_pf_exit ( ) ; unregister_pernet_subsys ( & sctp_net_ops ) ; sctp_v6_protosw_exit ( ) ; sctp_v4_protosw_exit ( ) ; sctp_sysctl_unregister ( ) ; unregister_pernet_subsys ( & sctp_net_ops ) ; sctp_v6_pf_exit ( ) ; sctp_v4_pf_exit ( ) ; sctp_sysctl_unregister ( ) ; free_pages ( ( unsigned long ) sctp_assoc_hashtable, get_order ( sctp_assoc_hashsize * sizeof ( struct sctp_hashbucket ) ) ) ; kfree ( sctp_ep_hashtable ) ; free_pages ( ( unsigned long ) sctp_port_hashtable, get_order ( sctp_port_hashsize * sizeof ( struct sctp_bind_hashbucket ) )",0
260,"<S2SV_ModStart> index ) ; if ( stream -> psnr_sse_total ) { <S2SV_ModStart> ) stream -> psnr_sse_samples_total <S2SV_ModEnd>, 255.0, <S2SV_ModStart>, 255.0, <S2SV_ModEnd> stream -> psnr_sse_total <S2SV_ModStart> ) ; } } else { ovpsnr = sse_to_psnr ( ( double ) stream -> psnr_samples_total, 255.0, stream -> psnr_sse_total ) ; fprintf ( stderr, "" <S2SV_blank> %.3f"", ovpsnr ) ; for ( i = 0 ; i < 4 ; i ++ ) { fprintf ( stderr, "" <S2SV_blank> %.3f"", stream -> psnr_totals [ i ] / stream -> psnr_count ) ; } } fprintf ( stderr, ""\\n"" ) ; }",0
261,"<S2SV_ModStart> name ) { size_t len = <S2SV_ModEnd> strlen ( name <S2SV_ModStart> ( name ) ; dst_name = malloc ( len <S2SV_ModStart> 16 ) ; if ( dst_name == NULL ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> memory\\n"" ) ; return ; } <S2SV_ModStart> name ) ; if ( dst_name == NULL ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> memory\\n"" ) ; return ; } <S2SV_ModStart> = '\\0' ; if ( dst_name == NULL ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> memory\\n"" ) ; return ; }",0
262,"<S2SV_ModStart> ; TRACE_DEBUG ( ""CIDER=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_REG_CIDER ) ) ; TRACE_DEBUG ( ""PHY1ILR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_REG_PHY1ILR ) ) ; TRACE_DEBUG ( ""PHY1IHR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_REG_PHY1IHR ) ) ; if ( ksz8851ReadReg ( interface, KSZ8851_REG_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID",0
263,"<S2SV_ModStart> skip } ; vp9_foreach_transformed_block <S2SV_ModEnd> ( xd, <S2SV_ModStart> plane, encode_block_intra, & arg ) ; vp9_foreach_transformed_block ( xd, bsize, plane, encode_block_intra, & arg ) ; vp9_foreach_transformed_block ( xd, bsize, plane, encode_block_intra, & arg ) ; vp9_foreach_transformed_block ( xd, bsize, plane, encode_block_intra, & arg ) ; vp9_foreach_transformed_block ( xd, bsize, plane, encode_block_intra, & arg ) ; vp9_foreach_transformed_block ( xd, bsize, plane, encode_block_intra, & arg ) ; vp9_foreach_transformed_block ( xd, bsize, plane, encode_block_intra",0
264,"<S2SV_ModStart> ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", fit_get_image_type_property ( image_type ) <S2SV_ModEnd> ) ; bootstage_error <S2SV_ModStart> + BOOTSTAGE_SUB_FORMAT_OK ) ; if ( fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", fit_get_image_type_property ( image_type ) ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; } if ( fit_uname ) { bootstage_mark ( bootstage_id + BOOTSTAGE_SUB_UNIT_NAME ) ; noffset = fit_image_get_node ( fit, fit_uname ) ; } else { bootstage_mark ( bootstage_id + BOOTSTAGE_SUB_NO_NODE ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_NO_NODE ) ; return - ENOEXEC ; } } else { bootstage_error ( bootstage_id + BOOTSTAGE_",0
265,"<S2SV_ModStart> 0 ) { if ( <S2SV_ModStart>, UI_DEV_DESTROY ) < 0 ) BTIF_TRACE_ERROR ( ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> destroy <S2SV_blank> device"", __func__ ) ; if ( <S2SV_ModEnd> close ( uinput_fd <S2SV_ModStart> ( uinput_fd ) < 0 ) BTIF_TRACE_ERROR ( ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> close <S2SV_blank> device"", __func__ ) ; if ( ioctl ( uinput_fd, UI_DEV_DESTROY ) < 0 ) BTIF_TRACE_ERROR ( ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> destroy <S2SV_blank> device"", __func__ ) ; if ( close ( uinput_fd ) < 0 ) BTIF_TRACE_ERROR ( ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> close <S2SV_blank> device"", __func__ ) ; if ( ioctl ( uinput_fd, UI_DEV_DESTROY ) < 0 ) BTIF_TRACE_ERROR ( ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> destroy <S2SV_blank> device"", __func__ )",0
266,<S2SV_ModStart> rc -> av_per_frame_bandwidth * rc -> baseline_gf_interval * af_ratio ) / ( rc -> baseline_gf_interval + af_ratio - 1 ) : ( rc -> av_per_frame_bandwidth * rc -> baseline_gf_interval,0
267,"<S2SV_ModStart> i ], ""--"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--"" ) ; if ( strcmp ( argv [ i ], ""--allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; argv [ 0 ] = path ; setuid ( 0 ) ; setgid ( 0 ) ; execv ( path, ( char * const * ) argv ) ; perror ( path ) ; return 1 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
268,"<S2SV_ModStart> o ) { return Py_None ; } switch ( o -> kind ) { case Module_kind : result = PyType_GenericNew ( Module_type, NULL, NULL ) ; if (! result ) goto failed ; value = ast2obj_list ( o -> v. Module. body, ast2obj_stmt ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_body, value ) == - 1 ) goto failed ; Py_DECREF ( value ) ; break ; case Interactive_kind : result = PyType_GenericNew ( Interactive_type, NULL, NULL ) ; if (! result ) goto failed ; value = ast2obj_expr ( o -> v. Interactive. body ) ; if (! value ) goto failed ; Py_DECREF ( value ) ; break ; default :",0
269,<S2SV_ModStart> ib ] ; <S2SV_ModEnd> dequant_ptr = d,1
270,"<S2SV_ModStart> FN_REFLEN ] ; my_strncpy <S2SV_ModEnd> ( buff, <S2SV_ModStart> # ifdef __WIN__ my_strncat <S2SV_ModEnd> ( buff, <S2SV_ModStart> ; # else my_strncat <S2SV_ModEnd> ( buff, <S2SV_ModStart> buff ) - strlen ( buff ) - 1 ) ; # endif buff [ sizeof ( buff ) - 1 ] = 0 ; my_free ( opt_basedir ) ; opt_basedir = my_strdup ( buff, MYF ( MY_FAE ) ) ; } } if (! opt_no_defaults && ( ( error = get_default_values ( ) ) ) ) { error = - 1 ; goto exit ; } strcpy ( operation, """" ) ; if ( ( error = check_options ( argc, argv, operation ) ) ) { goto exit ; } if ( opt_verbose ) { printf ( ""# <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> basedir <S2SV_blank> = <S2SV_blank> %s\\n"", opt_basedir ) ; printf ( ""# <S2SV_blank> plugin_dir <S2SV_blank> = <S2SV_blank> %s\\n"", opt_plugin_dir ) ; printf ( ""# <S2SV_blank> plugin_ini <S2SV_blank> = <S2SV_blank> %s\\n"" <S2SV_ModEnd>, opt_plugin_ini )",0
271,"<S2SV_ModStart> decrypt_cb ) { ptrdiff_t <S2SV_ModEnd> n = ( <S2SV_ModStart> = ( int ) ( data_end - data ) ; if ( n > 10 ) n = 10 ; pbi -> decrypt_cb ( pbi -> decrypt_state, data, clear_buffer, n ) ; clear = clear_buffer ; } pc -> frame_type = ( FRAME_TYPE ) ( clear [ 0 ] & 1 ) ; pc -> version = ( clear [ 0 ] >> 1 ) & 7 ; pc -> show_frame = ( clear [ 0 ] >> 4 ) & 1 ; first_partition_length_in_bytes = ( clear [ 0 ] | ( clear [ 1 ] << 8 ) | ( clear [ 2 ] << 16 ) ) >> 5 <S2SV_ModEnd> ; if (",0
272,"<S2SV_ModStart> errmsg ) ; if ( ( ret. code = new_server_handle ( ( void * ) handle ) ) ) goto exit_func ; if ( ( ret. api_version = handle -> api_version ; if ( setup_gss_names ( rqstp, & client_name, & service_name ) < 0 ) { ret. code = KADM5_FAILURE ; goto exit_func ; } ret. code = kadm5_get_privs ( ( void * ) handle, & ret. privs ) ; if ( ret. code!= 0 ) krb5_free_error_message ( handle -> context, ret. code ) ; <S2SV_ModStart> ; exit_func : <S2SV_ModEnd> return & ret",0
273,"<S2SV_ModStart> int zero_mv_sse = - 1 <S2SV_ModEnd>, best_sse = <S2SV_ModStart>, best_sse = - 1 <S2SV_ModEnd>, best_rd_sse = <S2SV_ModStart>, best_rd_sse = - 1 <S2SV_ModEnd> ; # endif",0
274,"<S2SV_ModStart> goto error ; if (! h -> writable ) { h -> addr = mmap ( NULL, h -> size, PROT_READ, MAP_SHARED, h -> fd, 0 ) ; if ( h -> addr == MAP_FAILED ) goto error ; DEBUG ( 2, ""mapped <S2SV_blank> file <S2SV_blank> at <S2SV_blank> %p"", h -> addr ) ; } else { h -> addr = malloc ( h -> size ) ; if ( h -> addr == NULL ) goto error ; if ( full_read ( h -> fd, h -> addr, h -> size ) < h -> size ) goto error ; if ( close ( h -> fd ) == - 1 ) goto error ; h -> fd = - 1 ; } <S2SV_ModStart>. st_size ; <S2SV_ModEnd> if ( h",0
275,"<S2SV_ModStart> u1_profile_idc, u1_level_idc <S2SV_ModEnd> ; UWORD16 i2_max_frm_num <S2SV_ModStart> U1_frm, uc_constraint_set0_flag <S2SV_ModEnd> ; WORD32 i4_cropped_ht <S2SV_ModStart>, i4_cropped_wd ; <S2SV_ModEnd> WORD32 pic_height_in_map_units_minus1 = <S2SV_ModStart> U2_frm_wd_y = 0 <S2SV_ModEnd> ; UWORD32 u2_frm_ht_y <S2SV_ModStart> U2_frm_ht_y = 0 <S2SV_ModEnd> ; UWORD32 u2_crop_offset_y <S2SV_ModStart> U2_frm_ht_uv = 0 <S2SV_ModEnd> ; WORD32 u4_num_reorder_frames <S2SV_ModStart>, i4_i ; <S2SV_ModEnd> u1_frame_cropping_flag, u1_frame_cropping_rect_left_ofst <S2SV_ModStart>, u1_frame_cropping_rect_right_ofst, u1_frame_cropping_rect_top_ofst, u1_frame_cropping_rect_bottom_ofst <S2SV_ModEnd> ; SWITCHONTRACE ;",0
276,"<S2SV_ModStart> -> temporal_layer ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; <S2SV_ModStart> -> alt_fb_idx ; <S2SV_ModEnd> set_encoder_config ( &",0
277,"<S2SV_ModStart> bitspersample, samplesperpixel <S2SV_ModEnd> ; uint32 width <S2SV_ModStart> compression ) ; TIFFGetFieldDefaulted ( in, TIFFTAG_COMPRESSION, & input_compression ) ; TIFFGetFieldDefaulted ( in, TIFFTAG_PHOTOMETRIC, & input_photometric ) ; if ( input_compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_JPEGCOLORMODE, JPEGCOLORMODE_RGB ) ; } else if ( input_photometric == PHOTOMETRIC_YCBCR ) { uint16 subsamplinghor, subsamplingver ; TIFFGetFieldDefaulted ( in, TIFFTAG_YCBCRSUBSAMPLING, & subsamplinghor, & subsamplingver ) ; if ( subsamplinghor!= 1 || subsamplingver!= 1 ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Can\'t <S2SV_blank> copy/convert <S2SV_blank> subsampled <S2SV_blank> image.\\n"", TIFFFileName ( in ) ) ; return FALSE ; } } if ( <S2SV_ModEnd> input_photometric == PHOTOMETRIC_RGB",0
278,<S2SV_ModStart> { archive_set_error ( <S2SV_ModEnd> a -> archive <S2SV_ModStart> { archive_set_error ( <S2SV_ModEnd> a -> archive <S2SV_ModStart> { archive_set_error ( <S2SV_ModEnd> a -> archive <S2SV_ModStart> { archive_set_error ( <S2SV_ModEnd> a -> archive <S2SV_ModStart> { archive_set_error ( <S2SV_ModEnd> a -> archive <S2SV_ModStart> { archive_set_error ( <S2SV_ModEnd> a -> archive <S2SV_ModStart> { archive_set_error ( <S2SV_ModEnd> a -> archive <S2SV_ModStart> { archive_set_error ( <S2SV_ModEnd> a -> archive <S2SV_ModStart> { archive_set_error ( <S2SV_ModEnd> a -> archive <S2SV_ModStart> { archive_set_error ( <S2SV_ModEnd> a -> archive <S2SV_ModStart> { archive_set_error ( <S2SV_ModEnd> a -> archive <S2SV_ModStart> { archive_set_error ( <S2SV_ModEnd> a -> archive <S2SV_ModStart> { archive_set_error ( <S2SV_ModEnd> a -> archive <S2SV_ModStart> { archive_set_error ( <S2SV_ModEnd> a -> archive <S2SV_ModStart> { archive_set_error ( <S2SV_ModEnd> a -> archive,0
279,"<S2SV_ModStart> ibh ) { <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> & ident ) ; <S2SV_ModEnd> if ( ident <S2SV_ModStart> TAG_IDENT_EFE ) { nbh = udf_read_ptagged ( inode -> i_sb, & loc, 0, & ident ) ; if (! nbh ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> nbh=%p\\n"", inode -> i_ino, nbh ) ; brelse ( nbh ) ; make_bad_inode ( inode ) ; return ; } <S2SV_ModStart> TAG_IDENT_EFE ) { nbh = udf_read_ptagged ( inode -> i_sb, & iinfo -> i_location, 0, & ident ) ; if (! nbh ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> nbh=%p\\n"", inode -> i_ino, nbh ) ; brelse ( nbh ) ; make_bad_inode ( inode ) ; return ; }",0
280,"<S2SV_ModStart> tx_size_uv = get_uv_tx_size ( mbmi ) ; const int filter_level = get_filter_level ( lfi_n, mbmi ) ; uint64_t * const left_y = & lfm -> left_y [ tx_size_y ] ; uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const left_uv = & lfm -> left_uv [ tx_size_uv ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv",0
281,<S2SV_ModStart> mq_ops ) { spin_lock_irqsave_nested <S2SV_ModEnd> ( & fq <S2SV_ModStart> mq_ops ) ; spin_unlock_irqrestore_nested <S2SV_ModEnd> ( & fq,0
282,<S2SV_ModStart> uint8_t val ; if ( addr > ( vdev -> config_len - sizeof ( val ) ) ) return ( uint32_t ) - 1 ; <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,0
283,"<S2SV_ModStart> ) ) { if (! <S2SV_ModEnd> stok ( option <S2SV_ModStart> & ovalue ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; } <S2SV_ModEnd> ovalue = strim <S2SV_ModStart> ; if ( <S2SV_ModEnd> * ovalue == <S2SV_ModStart> == '\\0' ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; } option = stok ( option, "" <S2SV_blank> =\\t,"", & ovalue ) ; ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if (! ovalue ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; } <S2SV_ModEnd> if ( smatch",0
284,"<S2SV_ModStart> ( int ) sizeof ( effect_param_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } effect_param_t * p = ( effect_param_t * ) pCmdData ; if ( * ( int * ) pReplyData!= 0 ) break ; if ( effect -> state!= EFFECT_STATE_ACTIVE ) * ( int * ) pReplyData = effect_set_state ( effect, EFFECT_STATE_CONFIG ) ; } break ; case EFFECT_CMD_SET_STATE : { if ( pCmdData == NULL || cmdSize < ( int ) sizeof ( effect_state_t ) || pReplyData == NULL || * replySize < ( int ) sizeof ( effect_state_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_SET_STATE <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } * ( int * ) pReplyData = effect_set_state ( effect, EFFECT_STATE_CONFIG ) <S2SV_ModEnd> ; } break",0
285,<S2SV_ModStart> == NULL ) { k5free ( key_data ) ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { k5free ( key_data ) ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { k5free ( key_data ) ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { k5free ( key_data ) ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { k5free ( key_data ) ; <S2SV_ModStart> goto cleanup ; },0
286,"<S2SV_ModStart> 0x02 ) ; sc_log ( ctx, ""TCOS3:%d <S2SV_blank> PKCS1:%d\\n"", tcos3,!! ( data -> pad_flags & SC_ALGORITHM_RSA_PAD_PKCS1 ) ) ; <S2SV_ModStart> 0x02 ) ; sc_log ( ctx, ""TCOS3:%d <S2SV_blank> PKCS1:%d\\n"", tcos3,!! ( data -> pad_flags & SC_ALGORITHM_RSA_PAD_PKCS1 ) ) ; <S2SV_ModStart> 0x02 ) ; sc_log ( ctx, ""TCOS3:%d <S2SV_blank> PKCS1:%d\\n"", tcos3,!! ( data -> pad_flags & SC_ALGORITHM_RSA_PAD_PKCS1 ) ) ; <S2SV_ModStart> 0x02 ) ; sc_log ( ctx, ""TCOS3:%d <S2SV_blank> PKCS1:%d\\n"", tcos3,!! ( data -> pad_flags & SC_ALGORITHM_RSA_PAD_PKCS1 ) ) ; <S2SV_ModStart> 0x02 ) ; sc_log ( ctx, ""TCOS3:%d <S2SV_blank> PKCS1:%d\\n"", tcos3,!! ( data -> pad",0
287,<S2SV_ModStart> { dev_info ( <S2SV_ModEnd> vsi -> pdev <S2SV_ModStart> { dev_info ( <S2SV_ModEnd> vsi -> pdev <S2SV_ModStart> { dev_info ( <S2SV_ModEnd> vsi -> pdev <S2SV_ModStart> { dev_info ( <S2SV_ModEnd> vsi -> pdev <S2SV_ModStart> { dev_info ( <S2SV_ModEnd> vsi -> pdev <S2SV_ModStart> { dev_info ( <S2SV_ModEnd> vsi -> pdev <S2SV_ModStart> { dev_info ( <S2SV_ModEnd> vsi -> pdev <S2SV_ModStart> { dev_info ( <S2SV_ModEnd> vsi -> pdev <S2SV_ModStart> { dev_info ( <S2SV_ModEnd> vsi -> pdev <S2SV_ModStart> { dev_info ( <S2SV_ModEnd> vsi -> pdev <S2SV_ModStart> { dev_info ( <S2SV_ModEnd> vsi -> pdev <S2SV_ModStart> { dev_info ( <S2SV_ModEnd> vsi -> pdev <S2SV_ModStart> { dev_info ( <S2SV_ModEnd> vsi -> pdev <S2SV_ModStart> { dev_info ( <S2SV_ModEnd> vsi -> pdev <S2SV_ModStart> { dev_info ( <S2SV_ModEnd> vsi -> pdev <S2SV_ModStart> { dev_info ( <S2SV_ModEnd> vsi -> pdev,0
288,<S2SV_ModStart> ; } } return - 1 ;,1
289,<S2SV_ModStart> uchar * dataptr <S2SV_ModEnd> ; jpc_ppxstabent_t * <S2SV_ModStart> entno ] ; <S2SV_ModEnd> datacnt = ent <S2SV_ModStart> tpcnt = ( uint32_t ) ( ( uint32_t ) <S2SV_ModStart> << 24 ) | ( uint32_t ) <S2SV_ModEnd> ( dataptr [ <S2SV_ModStart> << 16 ) | ( uint32_t ) <S2SV_ModEnd> ( dataptr [ <S2SV_ModStart> << 8 ) | ( uint32_t ) <S2SV_ModEnd> ( dataptr [ <S2SV_ModStart> tpcnt -= n ; dataptr += n ; datacnt -= n ; } jas_stream_rewind ( stream ) ; if (! datacnt ) { if ( ++ entno >= tab -> numents ) { break ; } ent = tab -> ents [ entno ] ; dataptr = ent -> data ; datacnt = ent -> len,0
290,<S2SV_ModStart> -> mb_row_stride ; xd -> mb_row_stride = <S2SV_ModStart> -> mb_row_stride ; xd -> mb_row_stride = <S2SV_ModStart> -> mb_row_stride ; xd -> mb_row_stride = <S2SV_ModStart> -> mb_row_stride ; xd -> mb_col_stride = <S2SV_ModStart> -> mb_row_stride ; xd -> mb_row_stride = <S2SV_ModStart> -> mb_row_stride ; xd -> mb_col_stride = <S2SV_ModStart> -> mb_row_stride ; xd -> mb_row_stride = <S2SV_ModStart> -> mb_row_stride ; xd -> mb_col_stride = <S2SV_ModStart> -> mb_row_stride ; xd -> mb_col_stride = <S2SV_ModStart> -> mb_row_stride ; xd -> mb_col_stride = <S2SV_ModStart> -> mb_row_stride ; xd -> mb_col_stride = <S2SV_ModStart> -> mb_col_stride ; xd -> mb_row_stride = <S2SV_ModStart> -> mb_row_stride ; xd -> mb_col_stride =,0
291,"<S2SV_ModStart> ) ; } clone_info = CloneImageInfo ( image_info ) ; if ( ReadBlob ( image, 124, ( unsigned char * ) & MATLAB_HDR. identific )!= 124 ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( strncmp ( MATLAB_HDR. identific, ""MATLAB"", 6 )!= 0 ) { image2 = ReadMATImageV4 ( image_info, image, exception ) ; if ( image2 == NULL ) goto MATLAB_KO ; image = image2 ; goto END_OF_READING ; }",0
292,"<S2SV_ModStart> char * end ; int kind ; void * data ; Py_ssize_t len, i <S2SV_ModStart> == NULL ) <S2SV_ModEnd> return NULL ; <S2SV_ModStart> return NULL ; <S2SV_ModEnd> w = decode_utf8 <S2SV_ModStart> == NULL ) <S2SV_ModEnd> return NULL ; <S2SV_ModStart> return NULL ; <S2SV_ModEnd> kind = PyUnicode_KIND <S2SV_ModStart> = buf ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
293,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> int setimes, <S2SV_ModStart> ""Unexpected <S2SV_blank> off_t/time_t <S2SV_blank> size"" ) ; <S2SV_ModEnd> mask = umask <S2SV_ModStart> ""ambiguous <S2SV_blank> target"" ) ; exit ( 1 ) ; } targ = * argv ; if ( targetshouldbedirectory ) verifydir ( targ ) ; ( void ) atomicio ( vwrite, remout, """", 1 ) ; if ( stat ( targ, & stb ) == 0 && S_ISDIR ( stb. st_mode ) ) targisdir = 1 ; if ( src!= NULL &&! iamrecursive &&! Tflag ) { if ( brace_expand ( src, & patterns, & npatterns )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> expand <S2SV_blank> pattern"", __func__ ) ; } <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> for ( first",0
294,<S2SV_ModStart> test ) { return <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
295,<S2SV_ModStart> ( VP8_COMMON * <S2SV_ModEnd> ) vpx_calloc ( <S2SV_ModStart> ( VP8_COMMON * <S2SV_ModEnd> ) vpx_calloc ( <S2SV_ModStart> ( VP8_COMMON * <S2SV_ModEnd> ) vpx_calloc ( <S2SV_ModStart> ( VP8_COMMON * <S2SV_ModEnd> ) vpx_calloc ( <S2SV_ModStart> ( VP8_COMMON * <S2SV_ModEnd> ) vpx_calloc ( <S2SV_ModStart> ( VP8_COMMON * <S2SV_ModEnd> ) vpx_calloc ( <S2SV_ModStart> ( VP8_COMMON * <S2SV_ModEnd> ) vpx_calloc ( <S2SV_ModStart> ( VP8_COMMON * <S2SV_ModEnd> ) vpx_calloc ( <S2SV_ModStart> ( VP8_COMMON * <S2SV_ModEnd> ) vpx_calloc ( <S2SV_ModStart> ( VP8_COMMON * <S2SV_ModEnd> ) vpx_calloc ( <S2SV_ModStart> ( VP8_COMMON * <S2SV_ModEnd> ) vpx_calloc ( <S2SV_ModStart> ( VP8_COMMON * <S2SV_ModEnd> ) vpx_calloc ( <S2SV_ModStart> ( VP8_COMMON * <S2SV_ModEnd> ) vpx_calloc ( <S2SV_ModStart> ( VP8_COMMON * <S2SV_ModEnd> ) vpx_calloc (,0
296,"<S2SV_ModStart> ) return ; ta = ( ENTROPY_CONTEXT * ) & t_above ; tl = ( ENTROPY_CONTEXT * ) & t_left ; has_2nd_order = ( x -> e_mbd. mode_info_context -> mbmi. mode!= B_PRED && x -> e_mbd. mode_info_context -> mbmi. mode!= SPLITMV ) ; type = has_2nd_order? PLANE_TYPE_Y_NO_DC : PLANE_TYPE_Y_WITH_DC ; for ( b = 0 ; b < 16 ; b ++ ) { optimize_b ( x, b, PLANE_TYPE_Y2, ta + vp8_block2above [ b ], tl + vp8_block2left [ b ] ) ; } if ( has_2nd_order ) { b = 24 ; optimize_b ( x, b, PLANE_TYPE_Y2, ta + vp8_block2above [ b ], tl + vp8_block2left [ b ] ) ; check_reset_2nd_coeffs ( & x -> e_mbd, PLAN",0
297,<S2SV_ModStart> { ih264d_err_pic_dispbuf_mgr ( <S2SV_ModEnd> ps_dec -> ps_dec_err_status <S2SV_ModStart> { ih264d_err_pic_dispbuf_mgr ( <S2SV_ModEnd> ps_dec -> ps_dec_err_status <S2SV_ModStart> { ih264d_err_pic_dispbuf_mgr ( <S2SV_ModEnd> ps_dec -> ps_dec_err_status <S2SV_ModStart> { ih264d_err_pic_dispbuf_mgr ( <S2SV_ModEnd> ps_dec -> ps_dec_err_status <S2SV_ModStart> { ih264d_err_pic_dispbuf_mgr ( <S2SV_ModEnd> ps_dec -> ps_dec_err_status <S2SV_ModStart> { ih264d_err_pic_dispbuf_mgr ( <S2SV_ModEnd> ps_dec -> ps_dec_err_status <S2SV_ModStart> { ih264d_err_pic_dispbuf_mgr ( <S2SV_ModEnd> ps_dec -> ps_dec_err_status <S2SV_ModStart> { ih264d_err_pic_dispbuf_mgr ( <S2SV_ModEnd> ps_dec -> ps_dec_err_status <S2SV_ModStart> { ih264d_err_pic_dispbuf_mgr ( <S2SV_ModEnd> ps_dec -> ps_dec_err_status,0
298,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> vterm_allocator_free ( screen,1
299,"<S2SV_ModStart> { err = clock_gettime ( CLOCK_MONOTONIC, & delay ) ; if ( err == - 1 ) err = <S2SV_ModStart> EINTR ) ; if ( err == - 1 ) err = clock_gettime ( CLOCK_MONOTONIC, & delay ) ; if ( err == - 1 ) err = clock_gettime ( CLOCK_MONOTONIC, & delay ) ; if ( err == - 1 ) err = clock_gettime ( CLOCK_MONOTONIC, & delay ) ; if ( err == - 1 ) err = clock_gettime ( CLOCK_MONOTONIC, & delay ) ; if ( err == - 1 ) err = clock_gettime ( CLOCK_MONOTONIC, & delay ) ; if ( err == - 1 ) err = clock_gettime ( CLOCK_MONOTONIC, & delay ) ;",0
300,"<S2SV_ModStart> one, offset ; ssize_t <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart> * colormap, * plane, * pixels ; if ( image_info -> debug!= MagickFalse ) ( void ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image_info -> filename ) ; assert ( exception!= ( ExceptionInfo * ) NULL ) ; assert ( exception -> signature == MagickCoreSignature ) ; assert ( image_info -> signature == MagickCoreSignature ) ; if ( image_info -> debug!= MagickFalse ) ( void ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image_info -> filename ) ; assert ( exception -> signature == MagickCoreSignature ) ; assert ( image_info -> signature == MagickCoreSignature ) ; assert ( exception -> signature == MagickCoreSignature ) <S2SV_ModEnd> ; assert (",0
301,"<S2SV_ModStart> -> host, <S2SV_ModEnd> sclone ( value <S2SV_ModStart> ( value ) ; state -> endpoints = stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ; httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } } maPopState ( state ) ; <S2SV_ModEnd> return 0 ; <S2SV_ModStart> 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
302,"<S2SV_ModStart> ),. search_data. cmp = type -> match,. search_data. raw_data = description,. search_data. lookup_type = KEYRING_SEARCH_LOOKUP_DIRECT, } ; struct key * key ; key_ref_t key_ref ; int ret ; kenter ( ""%s,%s,%p,%zu,%p,%p,%lx"", ctx. index_key. type -> name, ctx. index_key. description, callout_info, callout_len, aux, dest_keyring, flags ) ; if ( type -> match_preparse ) { ret = type -> match_preparse ( & ctx. search_data ) ; if ( ret < 0 ) { key = ERR_PTR ( ret ) ; goto error ; } } }",0
303,"<S2SV_ModStart> ntime ) { goto out ; } cg_wlock ( & pool -> data_lock ) ; free ( pool -> swork. job_id ) ; pool -> swork. job_id = job_id ; snprintf ( pool -> prev_hash, 65, ""%s"", prev_hash ) ; cb1_len = strlen ( prev_hash ) / 2 ; cb2_len = strlen ( coinbase1 ) / 2 ; snprintf ( pool -> bbversion, 9, ""%s"", bbversion ) ; snprintf ( pool -> nbit, 9, ""%s"", nbit ) ; snprintf ( pool -> ntime, 9, ""%s"", ntime ) ; pool -> swork. clean = clean ; alloc_len = pool -> coinbase_len <S2SV_ModEnd> ; pool ->",0
304,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, length ) ) <S2SV_ModStart> transmitted_length ; case TEMP_FAILURE_RETRY : LOG_ERROR ( ""In <S2SV_blank> %s, <S2SV_blank> error <S2SV_blank> writing <S2SV_blank> to <S2SV_blank> the <S2SV_blank> serial <S2SV_blank> port <S2SV_blank> with <S2SV_blank> fd <S2SV_blank> %d: <S2SV_blank> %s"", __func__, fd, strerror ( errno ) ) ; return transmitted_length ; case TEMP_FAILURE_RETRY : LOG_ERROR ( ""In <S2SV_blank> %s, <S2SV_blank> error <S2SV_blank> writing <S2SV_blank> to <S2SV_blank> the <S2SV_blank> serial <S2SV_blank> port <S2SV_blank> with <S2SV_blank> fd <S2SV_blank> %d: <S2SV_blank> %s"", __func__, fd, strerror ( errno ) ) ; return transmitted_length ; case TEMP_FAILURE_RETRY : LOG_ERROR ( ""In <S2SV_blank> %s, <S2SV_blank> error <S2SV_blank> writing <S2SV_blank> to <S2SV_blank> the <S2SV_blank> serial <S2SV_blank> port <S2SV_blank> with <S2SV_blank> fd <S2SV_blank> %d: <S2SV_blank> %s"", __func__, fd, strerror ( errno ) ) ; return transmitted_length ; case TEMP_FAILURE_RETRY : LOG_ERROR ( ""In <S2SV_blank> %s, <S2SV_blank> error <S2SV_blank> writing <S2SV_blank> to <S2SV_blank> the <S2SV_blank> serial <S2SV_blank> port <S2SV_blank> with <S2SV_blank> fd <S2SV_blank> %d: <S2SV_blank> %s"", __func__, fd",0
305,"<S2SV_ModStart> unused ) { return ast_type_reduce_impl <S2SV_ModEnd> ( self, <S2SV_ModStart> ( self, unused <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
306,"<S2SV_ModStart> ) & desc, sizeof ( * desc )",1
307,"<S2SV_ModStart> ) ; case PERF_EVENT_IOC_ID : { u64 id = primary_event_id ( event ) ; if ( copy_to_user ( ( void __user * ) arg, & id, sizeof ( id ) ) ) return - EFAULT ; return 0 ; } case PERF_EVENT_IOC_SET_OUTPUT : { int ret ; if ( arg!= - 1 ) { struct perf_event * output_event ; struct fd output ; ret = perf_fget_light ( arg, & output ) ; if ( ret ) return ret ; output_event = output. file -> private_data ; ret = perf_event_set_output ( event, output_event ) ; fdput ( output ) ; } return ret ; } case <S2SV_ModStart> arg ) ; <S2SV_ModEnd> default : return",0
308,<S2SV_ModStart> MB_PREDICTION_MODE y_mode ) { if ( cm -> fc. uv_mode_prob [ y_mode ] < 0 ) return MB_PREDICTION_MODE_ERROR ; if ( cm -> fc. uv_mode_prob [ y_mode ] > 0 && cm -> fc. uv_mode_prob [ y_mode ] < 0 ) return MB_PREDICTION_MODE_ERROR ; if ( cm -> fc. uv_mode_prob [ y_mode ] > 0 ) return MB_PREDICTION_MODE_ERROR ; if ( cm -> fc. uv_mode_prob [ y_mode ] < 0 ) return MB_PREDICTION_MODE_ERROR ; if ( cm -> fc. uv_mode_prob [ y_mode ] > 0 && cm -> fc. uv_mode_prob [ y_mode ] < 0 ) return MB_PREDICTION_MODE_ERROR ; return MB_PREDICTION_MODE_ERROR <S2SV_ModEnd> ; } <S2SV_null>,0
309,<S2SV_ModStart> sha -> type == CCP_SHA_TYPE_1 || cmd -> u. sha. type == CCP_SHA_TYPE_224 || cmd -> u. sha. type == CCP_SHA_TYPE_256 || cmd -> u. sha. type == CCP_SHA_TYPE_384 || cmd -> u. sha. type == CCP_SHA_TYPE_512 || cmd -> u. sha. type == CCP_SHA_TYPE_512 <S2SV_ModStart> sha -> type == CCP_SHA_TYPE_1 || cmd -> u. sha. type == CCP_SHA_TYPE_224 || cmd -> u. sha. type == CCP_SHA_TYPE_256 || cmd -> u. sha. type == CCP_SHA_TYPE_384 || cmd -> u. sha. type == CCP_SHA_TYPE_512,0
310,"<S2SV_ModStart> iv ) ; if ( EVP_get_error ( EVP_CIPHER_CTX_cipher ( ctx ) )!= 0 ) ossl_raise ( eCipherError, EVP_get_error_string ( EVP_CIPHER_CTX_cipher ( ctx ) ) ) ; if ( EVP_get_error ( EVP_CIPHER_CTX_cipher ( ctx ) )!= 0 ) ossl_raise ( eCipherError, EVP_get_error_string ( EVP_CIPHER_CTX_cipher ( ctx ) ) ) ; if ( EVP_get_error ( EVP_CIPHER_CTX_cipher ( ctx ) )!= 0 ) ossl_raise ( eCipherError, EVP_get_error_string ( EVP_CIPHER_CTX_cipher ( ctx ) ) ) ; if ( EVP_get_error ( EVP_CIPHER_CTX_cipher ( ctx ) )!= 0 ) ossl_raise ( eCipherError, EVP_get_error_string ( EVP_CIPHER_CTX_cipher ( ctx ) ) ) ;",0
311,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
312,"<S2SV_ModStart> ; break ; case NGHTTP2_IB_READ_DATA : DEBUGF ( ""recv: <S2SV_blank> [IB_READ_DATA]\\n"" ) ; readlen = inbound_frame_buf_read ( iframe, in, last ) ; in += readlen ; if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) ) { return in - first ; } DEBUGF ( ""recv: <S2SV_blank> [IB_READ_DATA]\\n"" ) ; readlen = inbound_frame_buf_read ( iframe, in, last ) ; in += readlen ; DEBUGF ( ""recv: <S2SV_blank> [IB_READ_DATA]\\n"" ) ; readlen = inbound_frame_buf_read ( iframe, in, last ) ; in += readlen ; DEBUGF ( ""recv: <S2SV_blank> [IB_READ_DATA]\\n"" ) ; case NGHTTP2_IB_READ_DATA : DEBUGF ( ""recv: <S2SV_blank> [IB_READ_DATA]\\n"" ) ; readlen = inbound_frame_buf_read ( iframe, in, last ) ; in += readlen ;",0
313,<S2SV_ModStart> ( boot_cpu_data. x86_vendor <S2SV_ModEnd> == X86_VENDOR_INTEL ) <S2SV_ModStart> ( boot_cpu_data. x86_vendor <S2SV_ModEnd> == X86_VENDOR_INTEL ) <S2SV_ModStart> ( boot_cpu_data. x86_vendor <S2SV_ModEnd> == X86_VENDOR_INTEL ) <S2SV_ModStart> ( boot_cpu_data. x86_vendor <S2SV_ModEnd> == X86_VENDOR_INTEL ) <S2SV_ModStart> ( boot_cpu_data. x86_vendor <S2SV_ModEnd> == X86_VENDOR_INTEL ) <S2SV_ModStart> ( boot_cpu_data. x86_vendor <S2SV_ModEnd> == X86_VENDOR_INTEL ) <S2SV_ModStart> ( boot_cpu_data. x86_vendor <S2SV_ModEnd> == X86_VENDOR_INTEL ) <S2SV_ModStart> ( boot_cpu_data. x86_vendor <S2SV_ModEnd> == X86_VENDOR_INTEL ) <S2SV_ModStart> ( boot_cpu_data. x86_vendor <S2SV_ModEnd> == X86_VENDOR_INTEL ) <S2SV_ModStart> ( boot_cpu_data. x86_vendor <S2SV_ModEnd> == X86_VENDOR_INTEL ),0
314,"<S2SV_ModStart> vp9_extra_bits [ t ] ; const int i = 0 ; int v = a -> value ; int n = a -> len ; if ( p -> skip_eob_node ) { n -= p -> skip_eob_node ; i = 2 * p -> skip_eob_node ; } if ( t >= TWO_TOKEN && t < EOB_TOKEN ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; int bits = v >> ( n - len ) ; vp9_write_tree ( w, vp9_coef_tree, p -> context_tree, bits, len, i ) ; vp9_write_tree ( w, vp9_coef_con_tree, vp9_pareto8_full [ p -> context_tree [ PIVOT_NODE ] - 1 ], v, n - len, 0 ) ; } else { vp9_write_tree ( w, vp9_coef_tree, p -> context_tree, v, n, i ) ; } <S2SV_ModEnd> } if (",0
315,"<S2SV_ModStart>, 0 } <S2SV_ModEnd> ; write_uncompressed_header ( <S2SV_ModStart> += uncompressed_hdr_size ; <S2SV_ModEnd> first_part_size = write_compressed_header <S2SV_ModStart> += first_part_size ; <S2SV_ModEnd> * size =",0
316,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
317,"<S2SV_ModStart> * typedata ; UNALIGNED_MEMCPY ( & id, ext, sizeof ( id ) ) ; ikev2_pay_print ( ndo, NPSTR ( tpay ), id. h. critical ) ; id_len = ntohs ( id. h. len ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> len=%d"", id_len - 4 ) ) ; if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) goto trunc ; } <S2SV_ModStart> * ext ) <S2SV_ModEnd> ; ND_PRINT (",0
318,"<S2SV_ModStart> error ; } jas_taginfo_nonull ( jas_taginfos_lookup ( mif_tags, jas_tvparser_gettag ( tvp ) ) ) -> id = MIF_TLX ; jas_taginfo_nonull ( jas_taginfos_lookup ( mif_tags, jas_tvparser_gettag ( tvp ) ) ) -> id = MIF_TLY ; jas_taginfo_nonull ( jas_taginfos_lookup ( mif_tags, jas_tvparser_gettag ( tvp ) ) ) -> id = MIF_TLX ; jas_taginfo_nonull ( jas_taginfos_lookup ( mif_tags, jas_tvparser_gettag ( tvp ) ) ) -> id = MIF_TLX ; jas_taginfo_nonull ( jas_taginfos_lookup ( mif_tags, jas_tvparser_gettag ( tvp ) ) ) -> id = MIF_TLX ; jas_taginfo_nonull ( jas_taginfos_lookup ( mif_tags, jas_",0
319,<S2SV_ModStart> urb ) ; <S2SV_ModEnd> goto err_free_urb_to_pipe ;,0
320,"<S2SV_ModStart> xt0_0, yt0_0 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD64 mul_1, mul_2, mul_3, mul_4, mul_5, mul_6 ; WORD64 mul_8, mul_9, mul_10, mul_11, mul_12 ; WORD32 * x_l1 ; WORD32 * x_l2 ; WORD32 * x_h2 ; const WORD32 * w_ptr = w ; WORD32 i1 ; h2 = index << 1 ; l1 = index << 2 ; l2 = ( index << 2 ) + ( index << 1 ) ; x_l1 = & ( x [ l1 ] ) ; x_l2 = & ( x [ l2 ] ) ; x_h2 = & ( x [ h2 ] ) ; fft_jmp = 6 * ( index <S2SV_ModEnd> ) ; for",0
321,"<S2SV_ModStart> mntent ) { int ret ; ret = <S2SV_ModEnd> mount_entry_on_generic ( mntent <S2SV_ModStart> mnt_dir ) ; if ( ret ) return ret ; if ( IS_ERR_OR_NULL ( mntent -> mnt_root. dentry ) ) { ret = mount_entry_on_generic ( mntent, mntent -> mnt_root. dentry ) ; if ( IS_ERR_OR_NULL ( mntent -> mnt_root. dentry ) ) ret = mount_entry_on_generic ( mntent, mntent -> mnt_root. dentry ) ; if ( ret ) return ret ; } if ( IS_ERR_OR_NULL ( mntent -> mnt_root. dentry ) ) { ret = mount_entry_on_generic ( mntent, mntent -> mnt_root. dentry ) ; if ( IS_ERR_OR_NULL ( mntent -> mnt_root. dentry ) ) ret = mount_entry_on_generic ( mntent, mntent -> mnt_root. dentry ) ; } return ret ;",0
322,"<S2SV_ModStart> -> display_height ; const int scaling_width = <S2SV_ModEnd> cm -> display_width <S2SV_ModStart> cm -> display_width ; const int scaling_height = <S2SV_ModEnd> cm -> display_height <S2SV_ModStart> cm -> display_height ; vp9_wb_write_literal ( wb, scaling_width - 1, 16 ) ; vp9_wb_write_literal ( wb, scaling_height - 1, 16 ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
323,"<S2SV_ModStart> ( env, server_ip_val, req_server_ip ( req ) ) ; rb_hash_aset ( env, server_port_val, req_server_port ( req ) ) ; fill_headers ( req, env ) ; rb_hash_aset ( env, rack_version_val, rack_version_val_val ) ; rb_hash_aset ( env, rack_url_scheme_val, req_rack_url_scheme ( req ) ) ; rb_hash_aset ( env, rack_input_val, req_rack_input ( req ) ) ; rb_hash_aset ( env, rack_errors_val, Qfalse ) ; rb_hash_aset ( env, rack_multithread_val, Qfalse ) ; rb_hash_aset ( env, rack_run_once_val, Qfalse ) ; rb_hash_aset ( env, <S2SV_ModStart> req_server_name ( req <S2SV_ModEnd> ) ) ;",0
324,"<S2SV_ModStart> endif int col_type <S2SV_ModEnd> ; MYSQL_BIND * <S2SV_ModStart> endif # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION int prepare_retval ; imp_sth_phb_t * fbind ; # endif D_imp_xxh ( sth ) ; D_imp_dbh_from_sth ; if ( DBIc_TRACE_LEVEL ( imp_xxh ) >= 2 ) PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t-> <S2SV_blank> dbd_st_prepare <S2SV_blank> MYSQL_VERSION_ID <S2SV_blank> %d, <S2SV_blank> SQL <S2SV_blank> statement: <S2SV_blank> %s\\n"", MYSQL_VERSION_ID, statement ) ; # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION imp_sth -> use_server_side_prepare = imp_dbh -> use_server_side_prepare ; svp = DBD_ATTRIB_GET_SVP ( attribs, ""mysql_server_side_prepare"", 20 ) ; imp_sth -> use_server_side_prepare = ( svp )? SvTRUE ( * svp ) : imp_dbh -> use_server_side_prepare",0
325,"<S2SV_ModStart> screen, { <S2SV_ModEnd> } ) ; <S2SV_ModStart> char * ) PyMem_Malloc <S2SV_ModEnd> ( ( size_t <S2SV_ModStart> char * ) PyMem_Malloc <S2SV_ModEnd> ( ( size_t <S2SV_ModStart> char * ) PyMem_Malloc <S2SV_ModEnd> ( ( size_t <S2SV_ModStart> char * ) PyMem_Malloc <S2SV_ModEnd> ( ( size_t <S2SV_ModStart> char * ) PyMem_Malloc <S2SV_ModEnd> ( ( size_t <S2SV_ModStart> char * ) PyMem_Malloc <S2SV_ModEnd> ( ( size_t <S2SV_ModStart> char * ) PyMem_Malloc <S2SV_ModEnd> ( ( size_t <S2SV_ModStart> char * ) PyMem_Malloc <S2SV_ModEnd> ( ( size_t <S2SV_ModStart> char * ) PyMem_Malloc <S2SV_ModEnd> ( ( size_t <S2SV_ModStart> char * ) PyMem_Malloc <S2SV_ModEnd> ( ( size_t <S2SV_ModStart> char * ) PyMem_Malloc <S2SV_ModEnd> ( ( size_t <S2SV_ModStart> char * ) PyMem_Malloc <S2SV_ModEnd> ( ( size_t",0
326,<S2SV_ModStart> ( val ) ) { if ( len <= 0 ) { * str = 0 ; return ; } <S2SV_ModEnd> strncpy ( str <S2SV_ModStart> len ) ; } <S2SV_ModStart> ( val < 0.0 ) { if ( -- len <= 0 ) { * str = 0 ; return ; } * ( str ++ ) = '-' ; val = - val ; } if ( ( ( JsVarInt ) ( val + stopAtError ) ) == ( 1 + ( JsVarInt ) val ) ) val = ( JsVarFloat ) ( 1 + ( JsVarInt ) val ) ; JsVarFloat d = 1 ; while ( d * <S2SV_ModEnd> radix <= val,0
327,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> crng_init == 0 <S2SV_ModStart> crng_init == 0 <S2SV_ModEnd> && crng_fast_load ( <S2SV_ModStart> && crng_fast_load ( fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ) { fast_pool -> count = 0 ; fast_pool -> last = now ; } return ; } if ( ( fast_pool -> count < 64 ) &&! time_after ( now, fast_pool -> last + HZ ) ) return ; r = & input_pool ; if (! spin_trylock ( & r -> lock ) ) return ; fast_pool -> last = now ; __mix_pool_bytes ( r, & fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ; if ( arch_get_random_seed_long ( & seed ) ) { __mix_pool_bytes ( r, & seed, sizeof ( seed ) ) ; credit = 1 ; } spin_unlock ( & r -> lock <S2SV_ModEnd> ) ; fast_pool",0
328,"<S2SV_ModStart> LEX_ID ) { snprintf ( str, len <S2SV_ModEnd>, ""ID:"", <S2SV_ModStart>, ""ID:"", jslGetTokenValueAsString ( ) <S2SV_ModEnd> ) ; } <S2SV_ModStart> LEX_STR ) { snprintf ( str, len <S2SV_ModEnd>, ""String:\'"", <S2SV_ModStart>, ""String:\'"", jslGetTokenValueAsString ( ) <S2SV_ModEnd> ) ; }",0
329,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
330,<S2SV_ModStart> options ) { <S2SV_ModEnd> if ( svc_ctx <S2SV_ModStart> VPX_CODEC_INVALID_PARAM ; } SvcInternal * const si = get_svc_internal ( svc_ctx ) ;,0
331,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vp9_tree convert_distribution ( vp9_tree tree, unsigned int branch_ct [ ] [ 2 ], const unsigned int num_events [ ] ) { unsigned int left, right ; if ( tree [ i ] <= 0 ) left = num_events [ - tree [ i ] ] ; else left = convert_distribution ( tree [ i ], tree, branch_ct, num_events ) ; if ( tree [ i + 1 ] <= 0 ) right = num_events [ - tree [ i + 1 ] ] ; else right = convert_distribution ( tree [ i + 1 ], tree, branch_ct, num_events ) <S2SV_ModEnd> ; if (",0
332,<S2SV_ModStart> ( s1 ) <S2SV_ModEnd> ) ; },0
333,"<S2SV_ModStart> ( CMD_PRINT_HELP, """", NULL ) ; parse_service_option ( CMD_PRINT_HELP, """", NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-version"" ) ) { parse_global_option ( CMD_PRINT_DEFAULTS, """", NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, """", NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-sockets"" ) ) { socket_options_print ( ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-options"" ) ) { print_ssl_options ( ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else # ifndef USE_WIN32 if (! strcasecmp ( arg1, ""-fd"" ) ) { if (! arg2 ) { s_log ( LOG_ERR, ""No <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> specified"" ) ; print_syntax ( ) ; return 1 ; } name = arg2 ; type =",0
334,"<S2SV_ModStart> o ) { return Py_None ; } switch ( o -> kind ) { case ExceptHandler_kind : result = PyType_GenericNew ( ExceptHandler_type, NULL, NULL ) ; if (! result ) goto failed ; value = ast2obj_expr ( o -> v. ExceptHandler. type ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_type, value ) == - 1 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_list ( o -> v. ExceptHandler. body, ast2obj_stmt ) ; if (! value ) goto failed ; Py_DECREF ( value ) ; break ; } value = ast2obj_int ( o -> lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; <S2SV_ModEnd> value = ast2obj_int",0
335,"<S2SV_ModStart> RC_LOG_SERIOUS, ""malformed <S2SV_blank> message: <S2SV_blank> not <S2SV_blank> a <S2SV_blank> multiple <S2SV_blank> of <S2SV_blank> encryption <S2SV_blank> blocksize"", RC_LOG_SERIOUS <S2SV_ModStart> RC_LOG_SERIOUS, ""malformed <S2SV_blank> message: <S2SV_blank> not <S2SV_blank> a <S2SV_blank> multiple <S2SV_blank> of <S2SV_blank> encryption <S2SV_blank> blocksize"", RC_LOG_SERIOUS <S2SV_ModStart> RC_LOG_SERIOUS, ""malformed <S2SV_blank> message: <S2SV_blank> not <S2SV_blank> a <S2SV_blank> multiple <S2SV_blank> of <S2SV_blank> encryption <S2SV_blank> blocksize"", RC_LOG_SERIOUS <S2SV_ModStart> RC_LOG_SERIOUS, ""malformed <S2SV_blank> message: <S2SV_blank> not <S2SV_blank> a <S2SV_blank> multiple <S2SV_blank> of <S2SV_blank> encryption <S2SV_blank> blocksize"", RC_LOG_SERIOUS <S2SV_ModStart> RC_LOG_SERIOUS, ""malformed <S2SV_blank> message: <S2SV_blank> not <S2SV_blank> a <S2SV_blank> multiple <S2SV_blank> of <S2SV_blank> encryption <S2SV_blank> blocksize"", RC_LOG_SERIOUS <S2SV_ModStart> RC_LOG_SERIOUS, ""malformed <S2SV_blank> message: <S2SV_blank> not <S2SV_blank> a <S2SV_blank> multiple <S2SV_blank> of <S2SV_blank> encryption <S2SV_blank> blocksize"", RC_LOG_SERIOUS, ""malformed <S2SV_blank> message: <S2SV_blank> not <S2SV_blank> a <S2SV_blank> multiple <S2SV_blank> of <S2SV_blank> encryption <S2SV_blank> blocksize"", RC_LOG_SERIOUS <S2SV_ModStart> RC_",0
336,<S2SV_ModStart> -> s_ivd_video_decode_op_t. u4_num_bytes_produced <S2SV_ModEnd> > MAX_BITSTREAM_BUFFER_SIZE ) <S2SV_ModStart> -> s_ivd_video_decode_op_t. u4_num_bytes_produced <S2SV_ModEnd> = MAX_BITSTREAM_BUFFER_SIZE - <S2SV_ModStart> -> s_ivd_video_decode_op_t. u4_num_bytes_produced <S2SV_ModEnd> > MAX_BITSTREAM_BUFFER_SIZE ) <S2SV_ModStart> -> s_ivd_video_decode_op_t. u4_num_bytes_produced <S2SV_ModEnd> > MAX_BITSTREAM_BUFFER_SIZE ) <S2SV_ModStart> -> s_ivd_video_decode_op_t. u4_num_bytes_produced <S2SV_ModEnd> = MAX_BITSTREAM_BUFFER_SIZE - <S2SV_ModStart> -> s_ivd_video_decode_op_t. u4_num_bytes_produced <S2SV_ModEnd> > MAX_BITSTREAM_BUFFER_SIZE ) <S2SV_ModStart> -> s_ivd_video_decode_op_t. u4_num_bytes_produced <S2SV_ModEnd> > MAX_BITSTREAM_BUFFER_SIZE ) <S2SV_ModStart> -> s_ivd_video_,0
337,<S2SV_ModStart> item ) { if ( item == NULL ) return NULL ;,0
338,"<S2SV_ModStart>, img, pts, duration, flags, deadline ) ; else if ( ( res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ) ) break ; ctx -- ; if ( img ) img -- ; } ctx ++ ; } FLOATING_POINT_RESTORE ( ) ; } return SAVE_STATUS ( ctx, res ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
339,<S2SV_ModStart> ) ; } else if ( arg1 == 1 ) { win_maximise ( 1 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; },0
340,<S2SV_ModStart> < cols + 8 ; i ++ ) s [ i ] = s [ cols - 1 ] ; for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; d [ i + 8 ] = 0 ; } for ( c = 0 ; c < cols + 8 ; c ++ ) { int x = s [ c + 7 ] - s [ c - 8 ] ; int y = s [ c + 7 ] + s [ c - 8 ] ; sum += x ; sumsq += x * y ; d [ c & 15 ] = s [ c ] ; if ( sumsq * 15 - sum * sum < flimit ) { d [ c & 15 ] = ( 8 + sum + s [ c ] ) >> 4 ; } s [ c - 8 ] = d [ ( c - 8 ) & 15 ] ; } <S2SV_ModEnd> s += pitch,0
341,"<S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; if ( i -> parent -> log ) <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; if ( i -> parent -> log ) <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; if ( i -> parent -> log ) <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; if ( i -> parent -> log ) <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; if ( i -> parent -> log ) <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; if ( i -> parent -> log )",0
342,"<S2SV_ModStart> w, word - 16, 4 ) ; } else if (! write_bit_gte ( w, word, 64 ) ) { vp9_write_literal ( w, word - 32, 5 ) ; } else { encode_uniform ( w, word - 64 ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
343,"<S2SV_ModStart> ps_bitstrm ) ; ps_pps -> i1_pic_id = CLIP3 ( ps_pps -> i1_pic_id, 0, MAX_PPS_CNT - 1 ) ; <S2SV_ModStart> ps_bitstrm ) ; ps_pps -> i1_seq_id = CLIP3 ( ps_pps -> i1_seq_id, 0, MAX_SPS_CNT - 2 ) ; <S2SV_ModStart> ps_bitstrm ) ; ps_pps -> i1_pic_id = CLIP3 ( ps_pps -> i1_pic_id, 0, MAX_PPS_CNT - 1 ) ; <S2SV_ModStart> ps_bitstrm ) ; ps_pps -> i1_seq_id = CLIP3 ( ps_pps -> i1_seq_id, 0, MAX_SPS_CNT - 2 ) ; <S2SV_ModStart> ps_bitstrm ) ; ps_pps -> i1_pic_id = CLIP3 ( ps_pps -> i1_pic_id, 0, MAX_PPS_CNT - 1 ) ;",0
344,"<S2SV_ModStart> ) ) { switch ( c ) { case'<S2SV_blank>': psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'e' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case 'E' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 't' : trunc_8to4 = SF_TRUE ; break ; case 'T' : trunc_8to4 = SF_FALSE ; break ; case'm' : data = va_arg ( argptr, unsigned int ) ; header_put_marker ( psf, data ) ; count += 4 ; break ; case '1' : data = va_arg ( argptr, unsigned int ) ; header_put_byte ( psf, data ) ; count += 1 ; break ; case '2' : data = va_arg ( argptr, unsigned int ) ; header_put_byte ( psf, data ) ; count += 2 ; break ; case '3' : data = va_arg ( argptr, unsigned int ) ;",0
345,<S2SV_ModStart> ; sun_data = AllocateSUNData <S2SV_ModEnd> ( sun_info. <S2SV_ModStart> ; sun_pixels = AllocateSUNData <S2SV_ModEnd> ( sun_info. <S2SV_ModStart> ; sun_pixels = AllocateSUNData <S2SV_ModEnd> ( sun_info. <S2SV_ModStart> ; sun_data = AllocateSUNData <S2SV_ModEnd> ( sun_info. <S2SV_ModStart> ; sun_pixels = AllocateSUNData <S2SV_ModEnd> ( sun_info. <S2SV_ModStart> ; sun_pixels = AllocateSUNData <S2SV_ModEnd> ( sun_info. <S2SV_ModStart> ; sun_pixels = AllocateSUNData <S2SV_ModEnd> ( sun_info. <S2SV_ModStart> ; sun_data = AllocateSUNData <S2SV_ModEnd> ( sun_info. <S2SV_ModStart> ; sun_pixels = AllocateSUNData <S2SV_ModEnd> ( sun_info. <S2SV_ModStart> ; sun_pixels = AllocateSUNData <S2SV_ModEnd> ( sun_info. <S2SV_ModStart> ; sun_data = AllocateSUNData <S2SV_ModEnd> ( sun_info. <S2SV_ModStart> ; sun_pixels = AllocateSUNData <S2SV_ModEnd> ( sun_info.,0
346,"<S2SV_ModStart> ; else { if ( asprintf ( & dest, ""%s/.Xauthority"", cfg. homedir ) == - 1 ) { fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; } else if ( asprintf ( & dest, ""%s/.Xauthority2"", cfg. homedir ) == - 1 ) { fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; } else if ( asprintf ( & dest, ""%s/.Xauthority3"", cfg. homedir ) == - 1 ) { fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; } else { fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; } }",0
347,<S2SV_ModStart> BLOCK_8X8 : return ( vp9_variance_fn_t ) <S2SV_ModStart> BLOCK_16X8 : return ( vp9_variance_fn_t ) <S2SV_ModStart> default : return ( vp9_variance_fn_t ),0
348,"<S2SV_ModStart> ; } else if ( padata -> pa_type == KRB5_PADATA_PKINIT_KX ) { pkinit_kdc_context plgctx ; pkinit_kdc_req_context reqctx ; memset ( & plgctx, 0, sizeof ( pkinit_kdc_context ) ) ; memset ( & reqctx, 0, sizeof ( pkinit_kdc_req_context ) ) ; memset ( & reqctx, 0, sizeof ( krb5_data ) ) ; } else if ( padata -> pa_type == KRB5_PADATA_PKINIT_KX ) { pkinit_kdc_context plgctx ; memset ( & plgctx, 0, sizeof ( pkinit_kdc_context ) ) ; memset ( & reqctx, 0, sizeof ( pkinit_kdc_req_context ) ) ; memset ( & reqctx, 0, sizeof ( krb5_data ) ) ; } else",0
349,"<S2SV_ModStart> flags ) ; <S2SV_ModEnd> if ( input <S2SV_ModStart> return ; } v4l2_buf = to_vb2_v4l2_buffer ( & vb -> vb. vb2_buf ) ; if (! vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", input -> buf_cur_space_left, frame_len ) ; return ; }",0
350,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> size_t <S2SV_ModEnd> zcalloc ( size_t <S2SV_ModStart> size ) { size_t new_size ; new_size <S2SV_ModEnd> = calloc ( <S2SV_ModStart> if (! new_size <S2SV_ModEnd> ) zmalloc_oom_handler ( <S2SV_ModStart> HAVE_MALLOC_SIZE update_zmalloc_stat_alloc ( new_size <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; # else new_size <S2SV_ModEnd> = size ; <S2SV_ModStart> ; update_zmalloc_stat_alloc ( new_size <S2SV_ModEnd> ) ; return <S2SV_ModStart> ) ptr + new_size <S2SV_ModEnd> ; # endif,0
351,<S2SV_ModStart> -> serviceId == EXTRACT_16BITS <S2SV_ModEnd> ( & rxh,1
352,"<S2SV_ModStart>, 0, sizeof ( adhoc_start -> ssid ) ) ; memcpy ( adhoc_start -> ssid, req_ssid -> ssid, req_ssid -> ssid_len ) ; mwifiex_dbg ( adapter, INFO, ""info: <S2SV_blank> ADHOC_S_CMD: <S2SV_blank> SSID <S2SV_blank> = <S2SV_blank> %s\\n"", <S2SV_ModEnd> adhoc_start -> ssid <S2SV_ModStart> -> ssid ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memcpy ( bss_desc -> ssid. ssid, req_ssid -> ssid, req_ssid -> ssid_len ) ; bss_desc -> ssid. ssid_len = req_ssid -> ssid_len",0
353,"<S2SV_ModStart> { error = context -> put_listent ( context, sfe -> flags, sfe -> nameval, ( int ) sfe -> namelen, ( int ) sfe -> valuelen, & sfe -> nameval [ sfe -> namelen ] ) ; if ( context -> seen_enough ) break ; sfe = XFS_ATTR_SF_NEXTENTRY ( sfe ) ; } trace_xfs_attr_list_sf_all ( context ) ; return error <S2SV_ModEnd> ; } <S2SV_null>",0
354,<S2SV_ModStart> = L2CAP_MODE_ERTM ; req -> <S2SV_ModEnd> txwin_size = L2CAP_DEFAULT_RX_WINDOW <S2SV_ModStart> L2CAP_DEFAULT_RX_WINDOW ; rfc -> <S2SV_ModEnd> max_transmit = L2CAP_DEFAULT_MAX_RECEIVE <S2SV_ModStart> L2CAP_DEFAULT_MAX_RECEIVE ; rfc -> <S2SV_ModEnd> retrans_timeout = cpu_to_le16 <S2SV_ModStart> L2CAP_DEFAULT_RETRANS_TO ) ; req -> <S2SV_ModStart> L2CAP_DEFAULT_MONITOR_TO ) ; req -> <S2SV_ModEnd> max_pdu_size = cpu_to_le16 <S2SV_ModStart> L2CAP_DEFAULT_MAX_RX_APDU ) ; <S2SV_ModEnd> break ; },0
355,"<S2SV_ModStart> r ) { <S2SV_ModEnd> ret = recv <S2SV_ModStart> MSG_WAITALL ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; }",0
356,"<S2SV_ModStart> ) ) { H264_DEC_DEBUG_PRINT ( ""\\nInvalid <S2SV_blank> Nal <S2SV_blank> Unit, <S2SV_blank> let\'s <S2SV_blank> try\\n"" ) ; <S2SV_ModStart> ) ) { H264_DEC_DEBUG_PRINT ( ""\\nInvalid <S2SV_blank> Nal <S2SV_blank> Unit, <S2SV_blank> let\'s <S2SV_blank> try\\n"" ) ; <S2SV_ModStart> ) ) { H264_DEC_DEBUG_PRINT ( ""\\nInvalid <S2SV_blank> Nal <S2SV_blank> Unit, <S2SV_blank> let\'s <S2SV_blank> try\\n"" ) ; <S2SV_ModStart> ) ) { H264_DEC_DEBUG_PRINT ( ""\\nInvalid <S2SV_blank> Nal <S2SV_blank> Unit, <S2SV_blank> let\'s <S2SV_blank> try\\n"" ) ; <S2SV_ModStart> ) ) { H264_DEC_DEBUG_PRINT ( ""\\nInvalid <S2SV_blank> Nal <S2SV_blank> Unit, <S2SV_blank> let\'s <S2SV_blank> try\\n"" ) ; <S2SV_ModStart> ) ) { H264_DEC_DEBUG_PRINT ( ""\\nInvalid <S2SV_blank> Nal <S2SV_blank> Unit, <S2SV_blank> let\'s <S2SV_blank> try\\n"" ) ; <S2SV_ModStart> ) ) { H264_DEC_DEBUG_PRINT ( ""\\nInvalid <S2SV_blank> Nal <S2SV_blank> Unit, <S2SV_blank> let\'s <S2SV_blank> try\\n"" ) ; <S2SV_ModStart> ) ) { H264_DEC_DEBUG_PRINT ( ""\\n",0
357,<S2SV_ModStart> while ( pair <S2SV_ModEnd> ) { mprAddItem,1
358,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> rcu_read_lock ( ) <S2SV_ModStart> delegation == NULL || <S2SV_ModEnd> memcmp ( deleg_cur <S2SV_ModStart>, NFS4_STATEID_SIZE ) == 0 ) goto no_delegation_unlock ; if ( open_flags & FMODE_WRITE ) goto no_delegation_unlock ; ret = 1 ; no_delegation_unlock : spin_unlock ( & deleg_cur -> lock ) ; no_delegation : rcu_read_unlock ( ) ; if (! ret && open_stateid!= NULL ) __update_open_stateid ( state, open_stateid, NULL, open_flags ) ; ret = 1 ; } return <S2SV_ModEnd> ret ; } <S2SV_ModStart> ret ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,"<S2SV_ModStart> sse ) ; <S2SV_ModEnd> if ( cpi <S2SV_ModStart> ; } } if ( cpi -> speed > 4 ) { int64_t rate ; int64_t dist ; vp9_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ ref ], pd -> dequant [ 1 ] >> 3, & rate, & dist ) ; rate_sum += rate ; dist_sum += dist ; } else { int rate ; int64_t dist ; vp9_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ ref ], pd -> dequant [ 1 ] >> 3, & rate, & dist ) ; rate_sum += rate ; dist_sum += dist ; } }",0
361,"<S2SV_ModStart> pmd ) ) { if ( pmd_trans_huge ( * pmd ) ) mincore_huge_pmd ( vma, pmd, addr, next, vec ) ; else <S2SV_ModStart> vec ) ; } else { <S2SV_ModEnd> mincore_pte_range ( vma <S2SV_ModStart> vec ) ; if ( pmd_none_or_clear_bad ( pmd ) ) mincore_unmapped_range ( vma, addr, next, vec ) ; else mincore_pte_range ( vma, pmd, addr, next, vec ) ; }",0
362,<S2SV_ModStart> == NULL ) { free ( username ) ; <S2SV_ModStart> PAM_BUF_ERR ) ; },0
363,<S2SV_ModStart> seg ) { pthread_mutex_lock ( & r -> tree_lock ) ; <S2SV_ModStart> tree_probs ) ; pthread_mutex_unlock ( & r -> tree_lock ) ;,0
364,"<S2SV_ModStart>, src_ptr1 [ width - 1 <S2SV_ModEnd> ], extend_left <S2SV_ModStart>, src_ptr2 [ width - 1 <S2SV_ModEnd> ], extend_right",0
365,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> kgdb_hw_overflow_handler ( struct <S2SV_ModStart> regs ) { <S2SV_ModEnd> int i ; <S2SV_ModStart> i ) ; return 0 ;,0
366,"<S2SV_ModStart> buf2 = smb_fdata ( ndo, buf, fmt, maxbuf, unicodestr ) ; depth -- ; if ( buf2 == NULL ) return ( NULL ) ; if ( buf2 == buf ) return ( buf ) ; buf = buf2 ; } return ( buf ) ; case '|' : fmt ++ ; if ( buf >= maxbuf ) return ( buf ) ; break ; case '%' : fmt ++ ; buf = maxbuf ; break ; case '#' : fmt ++ ; buf = maxbuf ; break ; case '[' : fmt ++ ; if ( buf >= maxbuf ) return ( buf ) ; memset ( s, 0, sizeof ( s ) ) ; p = strchr ( fmt, ']' ) ; if ( ( size_t ) ( p - fmt + 1 ) > sizeof ( s ) ) { return ( buf ) ; } strncpy ( s, fmt, p - <S2SV_ModEnd> fmt ) ;",0
367,"<S2SV_ModStart> length ) ; <S2SV_ModEnd> if ( n <S2SV_ModStart> ) ) { ksz8851ClearBit ( interface, KSZ8851_REG_RXQCR, RXQCR_SDA ) ; ksz8851SetBit ( interface, KSZ8851_REG_TXQCR, TXQCR_METFE ) ; <S2SV_ModStart> nicTxEvent ) ; n = ksz8851ReadReg ( interface, KSZ8851_REG_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { ksz8851ClearBit ( interface, KSZ8851_REG_RXQCR, RXQCR_SDA ) ; ksz8851ClearBit ( interface, KSZ8851_REG_TXQCR, TXQCR_METFE ) ; }",0
368,"<S2SV_ModStart> ( ) ; <S2SV_ModEnd> if ( domains_to_finalize <S2SV_ModStart> ) ; } # endif # ifndef DISABLE_ATTACH mono_attach_maybe_start ( ) ; # endif if ( domains_to_finalize ) { mono_finalizer_lock ( ) ; if ( domains_to_finalize ) { DomainFinalizationReq * req = domains_to_finalize -> data ; domains_to_finalize = g_slist_remove ( domains_to_finalize, req ) ; mono_finalizer_unlock ( ) ; finalize_domain_objects ( req ) ; } else { mono_finalizer_unlock ( ) ; } } # endif <S2SV_ModEnd> mono_gc_invoke_finalizers ( )",0
369,<S2SV_ModStart> ; WORD32 x_8 = 0 ; WORD32 x_9 = 0 ; WORD32 x_a = 0 ; WORD32 x_b = 0 ; WORD32 x_c = 0 ; WORD32 x_d = 0 ; WORD32 x_e = 0 ; WORD32 x_f = 0 <S2SV_ModEnd> ; WORD32 n00,0
370,<S2SV_ModStart> ; if ( <S2SV_ModEnd> pmd_none_or_clear_bad ( pmd,0
371,"<S2SV_ModStart> ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( argv [ 2 ], & width ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } if (! parse_dim ( argv [ 3 ], & target_width, & target_height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpin = fopen ( fin, ""rb"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> fout ) ; <S2SV_ModEnd> return 0 ;",0
372,"<S2SV_ModStart> { int i <S2SV_ModEnd> ; _Py_IDENTIFIER ( <S2SV_ModStart> ) ; } return <S2SV_ModEnd> _PyObject_SetAttrId ( ( <S2SV_ModStart>, l ) <S2SV_ModEnd> ; } <S2SV_null>",0
373,<S2SV_ModStart> vpx_codec_alg_priv * priv = & priv -> base ; ctx -> priv -> sz = sizeof ( * ctx -> priv ) ; ctx -> priv -> iface = ctx -> iface ; ctx -> priv -> alg_priv = priv ; ctx -> priv -> init_flags = ctx -> init_flags ; cfg = & ctx -> priv -> alg_priv -> cfg ; for ( i = 0 ; extracfg_map [ i ]. usage && extracfg_map [ i ]. usage!= cfg -> g_usage ; i ++ ) <S2SV_ModEnd> priv -> vp8_cfg <S2SV_ModStart> ]. cfg <S2SV_ModEnd> ; priv ->,0
374,<S2SV_ModStart> ++ ; } pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; totfr += step ; if ( totfr > BOT ) { totfr = 0 ; for ( i = 0 ; i < 256 ; i ++ ) { unsigned nc = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] = nc ; totfr += nc ; } for ( i = 0 ; i < 16 ; i ++ ) { unsigned sum = 0 ; unsigned i16_17 = i << 4 ; for ( j = 0 ; j < 16 ; j ++ ) sum += pixel -> freq [ i16_17 + j ] ; pixel -> lookup [ i ] = sum ; } } pixel -> total_freq = totfr ; <S2SV_ModStart> return ret ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
375,"<S2SV_ModStart> fragments. ptrs ) ) ; vpx_memset ( ( void * ) ctx -> fragments. sizes, 0, sizeof ( ctx -> fragments. sizes ) ) ; } if ( ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count ++ ; if ( ctx -> fragments. count > ( 1 << EIGHT_PARTITION ) + 1 ) { ctx -> fragments. count = 0 ; * res = VPX_CODEC_INVALID_PARAM ; return - 1 ; } return 0 <S2SV_ModEnd> ; } if",0
376,<S2SV_ModStart> efe ) ; efe -> icbTag. strategyType = cpu_to_le16 ( 4096 ) ; <S2SV_ModStart> efe ) ; efe -> icbTag. strategyType = cpu_to_le16 ( 4096 ) ; <S2SV_ModStart> efe ) ; efe -> icbTag. strategyType = cpu_to_le16 ( 4096 ) ; <S2SV_ModStart> efe ) ; efe -> icbTag. strategyType = cpu_to_le16 ( 4096 ) ; <S2SV_ModStart> efe ) ; efe -> icbTag. strategyType = cpu_to_le16 ( 4096 ) ; <S2SV_ModStart> efe ) ; efe -> icbTag. strategyType = cpu_to_le16 ( 4096 ) ; <S2SV_ModStart> efe ) ; efe -> icbTag. strategyType = cpu_to_le16 ( 4096 ) ; <S2SV_ModStart> efe ) ; efe -> icbTag. strategyType = cpu_to_le16 ( 4096 ) ;,0
377,<S2SV_ModStart> REG_ADDR_MASK ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
378,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int bad_format_imginfo (,0
379,"<S2SV_ModStart> DefragIPv6NoData ) ; # else DefragRegisterTest ( ""DefragInOrderSimpleTest"", DefragInOrderSimpleTest ) ; DefragRegisterTest ( ""DefragReverseSimpleTest"", DefragReverseSimpleTest ) ; DefragRegisterTest ( ""DefragSturgesNovakLinuxTest"", DefragSturgesNovakLinuxTest ) ; DefragRegisterTest ( ""DefragSturgesNovakWindowsTest"", DefragSturgesNovakWindowsTest ) ; DefragRegisterTest ( ""DefragSturgesNovakFirstTest"", DefragSturgesNovakFirstTest ) ; DefragRegisterTest ( ""DefragSturgesNovakLastTest"", DefragSturgesNovakLastTest ) ; DefragRegisterTest ( ""DefragIPv4NoDataTest"", DefragIPv4NoDataTest ) ; DefragRegisterTest ( ""DefragIPv4TooLargeTest"", DefragIPv4TooLargeTest ) ;",0
380,"<S2SV_ModStart> ; if ( add_v1_record ) { new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { return SC_ERROR_OUT_OF_MEMORY ; } if ( object_data [ 0 ] == COOLKEY_V1_OBJECT ) { new_object. data [ 0 ] = COOLKEY_V1_OBJECT ; new_object. length ++ ; } memcpy ( & new_object. data [ add_v1_record ], object_data, object_length ) ; } if ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> r = coolkey_add_object_to_list",0
381,"<S2SV_ModStart> { separator = NULL ; name = strTrimWhitespace ( token ) ; value = strTrimWhitespace ( separator + 1 ) ; n = osStrlen ( value ) ; if ( n > 0 && value [ n - 1 ] == \'\\""\' ) value [ n - 1 ] = '\\0' ; if ( value [ 0 ] == \'\\""\' ) value ++ ; if (! osStrcasecmp ( name, ""realm"" ) ) { strSafeCopy ( authContext -> realm, value, WEB_SOCKET_REALM_MAX_LEN ) ; } else if (! osStrcasecmp ( name, ""nonce"" ) ) { strSafeCopy ( authContext -> nonce, value, WEB_SOCKET_NONCE_MAX_LEN + 1 ) ; } else if (! osStrcasecmp ( name, ""opaque"" ) ) { strSafeCopy ( authContext -> opaque, value, WEB_SOCKET_OPAQUE_MAX_LEN + 1 ) ; } <S2SV_ModEnd> } # endif",0
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,"<S2SV_ModStart> ( p_sys -> b_auto_field_coding ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""auto_field_coding"",! <S2SV_ModEnd> p_pic -> b_progressive <S2SV_ModStart> p_pic -> b_progressive ) ; if ( p_sys -> b_auto_field_coding ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""auto_field_coding"",! p_pic -> b_progressive ) ; if ( p_sys -> b_auto_field_coding ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""auto_field_coding"",! p_pic -> b_progressive ) ; if ( p_sys -> b_auto_field_coding ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""auto_field_coding"", p_pic -> b_auto_field_coding",0
384,"<S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, bfname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, bfname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, bfname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, bfname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, bfname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, bfname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, bfname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, bfname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\",0
385,"<S2SV_ModStart> 4 ) ; size_t <S2SV_ModEnd> num_properties = GETINT32 <S2SV_ModStart> ; j < <S2SV_ModEnd> a -> names <S2SV_ModStart> ]. len ; j ++ ) a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ; } } else { CHECKINT32 ( idx, len ) ; a -> name = GETINT32 ( buf + idx ) ; idx += 4 ; for ( i = 0 ; i < a -> num_names ; i ++ ) { size_t j ; CHECKINT32 ( idx, len ) ; a -> name. len = GETINT32 ( buf + idx ) ; idx += 4 <S2SV_ModEnd> ; } }",0
386,"<S2SV_ModStart> -> src. x_buffer, x -> src. x_stride, VP8_VAR_OFFS, 0, & sse ) ; act = vp8_variance16x16 ( x -> dst. y_buffer, x -> dst. y_stride, VP8_VAR_OFFS, 0, & sse ) ; act = act << 4 ; if ( act < 8 << 12 ) act = act < 5 << 12? act : 5 << 12 ; act = vp8_variance16x16 ( x -> dst. x_buffer, x -> dst. x_stride, VP8_VAR_OFFS, 0, & sse ) <S2SV_ModEnd> ; return act",0
387,<S2SV_ModStart> args ) { vpx_codec_err_t ret = VPX_CODEC_OK ; <S2SV_ModStart> fb ) ; ret = <S2SV_ModStart> NULL ) ; if ( ret!= VPX_CODEC_OK ) { return ret ; } <S2SV_ModStart> } else { ret = <S2SV_ModEnd> VPX_CODEC_INVALID_PARAM ; } <S2SV_ModStart> VPX_CODEC_INVALID_PARAM ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
388,"<S2SV_ModStart>, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> second <S2SV_blank> "" <S2SV_ModEnd> ""marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> SOS.\\n"", next_marker <S2SV_ModStart>, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> second <S2SV_blank> "" <S2SV_ModEnd> ""marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> EOI.\\n"", next_marker <S2SV_ModStart>, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> second <S2SV_blank> "" <S2SV_ModEnd> ""marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> EOI.\\n"", next_marker <S2SV_ModStart>, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> second <S2SV_blank> "" <S2SV_ModEnd> ""marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> SOS.\\n"", next_marker <S2SV_ModStart>, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> second <S2SV_blank> "" <S2SV_ModEnd> ""marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> EOI.\\n"", next_marker <S2SV_ModStart>, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> second <S2SV_blank> "" <S2SV_ModEnd> ""marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should",0
389,"<S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 1 ) ) == augassign ) { expr_ty expr1, expr2 ; operator_ty newoperator ; node * ch = CHILD ( n, 0 ) ; expr1 = ast_for_testlist ( c, ch ) ; if (! expr1 ) return NULL ; if (! set_context ( c, expr1, Store, ch ) ) return NULL ; ch = CHILD ( n, 2 ) ; if ( TYPE ( ch ) == testlist ) expr2 = ast_for_testlist ( c, ch ) ; else expr2 = ast_for_expr ( c, ch ) ; if (! expr2 ) return NULL ; return AugAssign ( expr1, newoperator, expr2, LINENO ( n ), n -> n_col_offset, n -> n_end_lineno, n -> n_end_col_offset, c -> c_arena ) ; } else if (",0
390,<S2SV_ModStart> * mc_running_avg_y = ( unsigned char * ) ( <S2SV_ModStart> mc_running_avg -> y_buffer ) <S2SV_ModStart> * running_avg_y = ( unsigned char * ) ( <S2SV_ModStart> running_avg -> y_buffer ) <S2SV_ModStart> * mc_avg_y = ( unsigned char * ) ( <S2SV_ModStart> running_avg -> y_buffer ) <S2SV_ModStart> * mc_avg_y = ( unsigned char * ) ( <S2SV_ModStart> running_avg -> y_buffer ) <S2SV_ModStart> * mc_avg_y = ( unsigned char * ) ( <S2SV_ModStart> running_avg -> y_buffer ) <S2SV_ModStart> * mc_avg_y = ( unsigned char * ) ( <S2SV_ModStart> running_avg -> y_buffer ) <S2SV_ModStart> * mc_avg_y = ( unsigned char * ) ( <S2SV_ModStart> running_avg -> y_buffer ),0
391,<S2SV_ModStart> } if ( ( sockPtr -> flags & ( NS_CONN_REQUESTURITOOLONG | NS_CONN_LINETOOLONG ) ) == 0u ) { sockPtr -> flags |= NS_CONN_REQUESTURITOOLONG ; } else if ( ( sockPtr -> flags & ( NS_CONN_REQUESTURITOOLONG | NS_CONN_LINETOOLONG ) ) == 0u ) { sockPtr -> flags |= NS_CONN_REQUESTURITOOLONG ; } else if ( ( sockPtr -> flags & ( NS_CONN_REQUESTURITOOLONG | NS_CONN_LINETOOLONG ) ) == 0u ) { sockPtr -> flags |= NS_CONN_REQUESTURITOOLONG ; } else if ( ( sockPtr -> flags & ( NS_CONN_REQUESTURITOOLONG | NS_CONN_LINETOOLONG ) ) == 0u ) { sockPtr -> flags |= NS_CONN_LINETOOLONG ; } } if (,0
392,"<S2SV_ModStart> = uregs ; xtregs_coprocessor_t cp ; <S2SV_ModStart> ti ) ; cp = <S2SV_ModEnd> ti -> xtregs_cp <S2SV_ModStart> ti -> xtregs_cp <S2SV_ModEnd> ; ret |= <S2SV_ModStart> ; # endif cp = <S2SV_ModEnd> ti -> xtregs_opt <S2SV_ModStart> xtregs -> opt ; ret |= __copy_from_user ( & cp, & xtregs -> cp, sizeof ( xtregs -> cp ) ) ; ret |= __copy_from_user ( & ti -> xtregs_user, & xtregs -> user, sizeof ( xtregs -> user ) ) ; return <S2SV_ModEnd> ret? - <S2SV_ModStart> ret? - EFAULT : 0 ; # if XTENSA_HAVE_COPROCESSORS coprocessor_flush_all ( ti ) ; coprocessor_release_all ( ti ) ; ret |= __copy_from_user ( & xtregs -> cp, & xtregs -> cp0, sizeof ( xtregs_coprocessor_t ) ) ; # endif return <S2SV_ModEnd> 0 ; }",0
393,<S2SV_ModStart> size ) ; if ( message -> length == 0 ) { message -> srcIpAddr = queueItem -> srcIpAddr ; message -> srcPort = queueItem -> srcPort ; message -> destIpAddr = queueItem -> destIpAddr ; message -> ttl = queueItem -> ancillary. ttl ; # if ( ETH_SUPPORT == ENABLED ) message -> srcMacAddr = queueItem -> ancillary. srcMacAddr ; message -> destMacAddr = queueItem -> ancillary. destMacAddr ; # endif # if ( ETH_PORT_TAGGING_SUPPORT == ENABLED ) message -> switchPort = queueItem -> ancillary. port ; # endif # if ( ETH_TIMESTAMP_SUPPORT == ENABLED ) message -> timestamp = queueItem -> ancillary. timestamp ; # endif },0
394,"<S2SV_ModStart> se_device * remote_dev ; unsigned long flags <S2SV_ModStart> cg_item ) ; spin_lock_irqsave ( & remote_dev -> dev_group. cg_lock, flags ) ; <S2SV_ModStart> cg_item ) ; spin_unlock_irqrestore ( & remote_dev -> dev_group. cg_lock, flags ) ;",0
395,<S2SV_ModStart> new_bh ) ; error = <S2SV_ModStart> ( new_bh ) ; if ( error ) goto cleanup,0
396,<S2SV_ModStart> args ) { int ret ; <S2SV_ModStart> cols ) ) ret = <S2SV_ModEnd> VPX_CODEC_OK ; else <S2SV_ModStart> VPX_CODEC_OK ; else ret = <S2SV_ModEnd> VPX_CODEC_INVALID_PARAM ; } <S2SV_ModStart> } else { ret = <S2SV_ModEnd> VPX_CODEC_INVALID_PARAM ; } <S2SV_ModStart> VPX_CODEC_INVALID_PARAM ; } return ret ;,0
397,<S2SV_ModStart> break ; case MagickTrue : case MagickFalse : case MagickFalse : case MagickTrue : case MagickFalse : case MagickTrue : case MagickFalse : case MagickFalse : case MagickFalse : case MagickFalse : case MagickTrue : case MagickFalse : case MagickFalse : case MagickFalse : case MagickTrue : case MagickFalse : case MagickFalse : case MagickTrue : case MagickFalse : case MagickTrue : case MagickFalse : case MagickTrue : case MagickFalse : case MagickTrue : case MagickFalse : case MagickTrue : case MagickFalse : case MagickTrue : case MagickFalse : case MagickTrue : case MagickFalse : case MagickTrue : case MagickFalse : case MagickTrue : case MagickFalse : case MagickTrue : case MagickFalse : case MagickFalse : break ; } <S2SV_ModEnd> break ; default,0
398,"<S2SV_ModStart>, event, READ_ONCE ( <S2SV_ModStart> header. size ) <S2SV_ModStart>, current ) ; task_event -> event_id. pid = perf_event_pid ( event, task ) ; task_event -> event_id. ppid = perf_event_pid ( event, current ) ; task_event -> event_id. tid = perf_event_tid ( event, task ) ; task_event -> event_id. ptid = perf_event_tid ( event, current ) ; perf_output_put ( & handle, task_event -> event_id ) ; perf_event__output_id_sample ( event, & handle, & sample ) ; perf_output_end ( & handle ) ; out : task_event -> event_id. header. size = size",0
399,"<S2SV_ModStart> ) AcquireQuantumMemory ( ( size_t ) imsx * ( size_t ) imsy, 1 ) ; if ( imbuf == NULL ) { return ( MagickFalse ) ; } for ( n = 0 ; n < 16 ; n ++ ) { sixel_palet [ n ] = sixel_default_color_table [ n ] ; } for ( r = 0 ; r < 6 ; r ++ ) { for ( g = 0 ; g < 6 ; g ++ ) { for ( b = 0 ; b < 6 ; b ++ ) { sixel_palet [ n ++ ] = SIXEL_RGB ( r * 51, g * 51, b * 51 ) ; } } } <S2SV_ModEnd> } for (",0
400,<S2SV_ModStart> args ) { vpx_codec_err_t ret ; <S2SV_ModStart> sd ) ; ret = <S2SV_ModEnd> vp9_copy_reference_dec ( ctx <S2SV_ModStart> sd ) ; if ( ret!= VPX_CODEC_OK ) { return ret ; },0
401,<S2SV_ModStart> { ih264d_err_pic_dispbuf_mgr ( <S2SV_ModEnd> ps_dec -> ps_dec_err_status <S2SV_ModStart> { ih264d_err_pic_dispbuf_mgr ( <S2SV_ModEnd> ps_dec -> ps_dec_err_status <S2SV_ModStart> { ih264d_err_pic_dispbuf_mgr ( <S2SV_ModEnd> ps_dec -> ps_dec_err_status <S2SV_ModStart> { ih264d_err_pic_dispbuf_mgr ( <S2SV_ModEnd> ps_dec -> ps_dec_err_status <S2SV_ModStart> { ih264d_err_pic_dispbuf_mgr ( <S2SV_ModEnd> ps_dec -> ps_dec_err_status <S2SV_ModStart> { ih264d_err_pic_dispbuf_mgr ( <S2SV_ModEnd> ps_dec -> ps_dec_err_status <S2SV_ModStart> { ih264d_err_pic_dispbuf_mgr ( <S2SV_ModEnd> ps_dec -> ps_dec_err_status <S2SV_ModStart> { ih264d_err_pic_dispbuf_mgr ( <S2SV_ModEnd> ps_dec -> ps_dec_err_status <S2SV_ModStart> { ih264d_err_pic_dispbuf_mgr ( <S2SV_ModEnd> ps_dec -> ps_dec_err_status,0
402,<S2SV_ModStart> == B_PIC ) ps_dec_dec_pnb_mb_params <S2SV_ModEnd> ( ps_dec ) <S2SV_ModStart> == B_PIC ) ps_dec_dec_p_mb_params <S2SV_ModEnd> ( ps_dec ) <S2SV_ModStart> == B_PIC ) ps_dec_dec_pnb_mb_params <S2SV_ModEnd> ( ps_dec ) <S2SV_ModStart> == B_PIC ) ps_dec_dec_p_mb_params <S2SV_ModEnd> ( ps_dec ) <S2SV_ModStart> == B_PIC ) ps_dec_p_mb_params <S2SV_ModEnd> ( ps_dec ) <S2SV_ModStart> == B_PIC ) ps_dec_pnb_mb_params <S2SV_ModEnd> ( ps_dec ) <S2SV_ModStart> == B_PIC ) ps_dec_p_mb_params <S2SV_ModEnd> ( ps_dec ) <S2SV_ModStart> == B_PIC ) ps_dec_p_mb_params <S2SV_ModEnd> ( ps_dec ) <S2SV_ModStart> == B_PIC ) ps_dec_p_mb_params <S2SV_ModEnd> ( ps_dec ) <S2SV_ModStart> == B_PIC ) ps_dec_p_mb_params <S2SV_ModEnd> ( ps_dec ) <S2SV_ModStart> == B_PIC ) ps_dec_p_mb_params <S2SV_ModEnd> ( ps_dec ) <S2SV_ModStart> == B_PIC ) ps_dec_p_,0
403,"<S2SV_ModStart> VP9_LAST_FLAG ) { if ( <S2SV_ModEnd> cm -> ref_frame_map <S2SV_ModStart> [ 0 ] >= cm -> num_frames ) { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Invalid <S2SV_blank> reference <S2SV_blank> frame"" ) ; return VPX_CODEC_ERROR ; } YV12_BUFFER_CONFIG * const cfg = & cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ]. buf ; if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; } else { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Invalid <S2SV_blank> reference <S2SV_blank> frame"" ) ; return VPX_CODEC_ERROR ; } <S2SV_ModEnd> } else {",0
404,"<S2SV_ModStart> n ) { jas_uint_t i ; jas_uint_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> jas_seqent_t * data ; jas_uint_t numrows ; jas_uint_t numcols <S2SV_ModStart> rows_ ) ; numrows = jas_matrix_numrows ( matrix ) ; numcols = jas_matrix_numcols ( matrix ) ; <S2SV_ModStart> ( i = <S2SV_ModEnd> numrows, rowstart <S2SV_ModStart> ( j = <S2SV_ModEnd> numcols, data",0
405,<S2SV_ModStart> ) ; int max_blocks_wide = num_4x4_w ; int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> ( 5 + pd -> subsampling_y ) ) ; if ( xd -> mb_to_left_edge < 0 ) max_blocks_wide += ( xd -> mb_to_left_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_right_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> ( 5 + pd -> subsampling_y ) ) ;,0
406,<S2SV_ModStart> ++ ) { <S2SV_ModEnd> ( ( uint32_t <S2SV_ModStart> 1 ] ; <S2SV_ModEnd> src += src_stride,0
407,<S2SV_ModStart> -> row_offset ; <S2SV_ModEnd> if ( _TIFFReadEncodedStripAndAllocBuffer <S2SV_ModStart> NULL ) { rowstoread = rowsperstrip - ( row + img -> row_offset ) % rowsperstrip ; nrow = ( row + rowstoread > h? h - row : rowstoread ) ;,0
408,<S2SV_ModStart> ; } } <S2SV_ModEnd> return 0 ;,0
409,<S2SV_ModStart> 8 ) ; <S2SV_ModEnd> } ; },0
410,<S2SV_ModStart> num & ( 1U <S2SV_ModEnd> << ( number <S2SV_ModStart> num - ( 1U <S2SV_ModEnd> << number ),0
411,"<S2SV_ModStart>, 1, stride <S2SV_ModEnd>, file ) <S2SV_ModStart> file )!= stride <S2SV_ModEnd> ) return 0",0
412,"<S2SV_ModStart> ; uint16_t attr_len = 0 <S2SV_ModStart> ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", <S2SV_ModEnd> avp -> type <S2SV_ModStart> ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", <S2SV_ModEnd> avp -> type <S2SV_ModStart> ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", <S2SV_ModEnd> avp -> type <S2SV_ModStart> ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", <S2SV_ModEnd> avp -> type <S2SV_ModStart> ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", <S2SV_ModEnd> avp",0
413,"<S2SV_ModStart> ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_UNKNOWN_CIPHER_TYPE <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_UNKNOWN_CIPHER_TYPE <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_UNKNOWN_CIPHER_TYPE <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_UNKNOWN_CIPHER_TYPE <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_UNKNOWN_CIPHER_TYPE <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_UNKNOWN_CIPHER_TYPE <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_UNKNOWN_CIPHER_TYPE <S2SV_ModEnd> ) ; return",0
414,"<S2SV_ModStart>, 0, comm_event -> comm_size <S2SV_ModEnd> ) ; if",0
415,"<S2SV_ModStart> ; BT_DBG ( ""sock <S2SV_blank> %p, <S2SV_blank> peer <S2SV_blank> %d, <S2SV_blank> sk <S2SV_blank> %p"", sock, peer <S2SV_ModEnd>, sk )",0
416,"<S2SV_ModStart> MT_CPTYPE_PASSSALT ) { send_auth ( username, password ) ; <S2SV_ModStart> length ) ; } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 1 ; if ( is_a_tty ) { raw_term ( ) ; setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch ) ; } } success = parse_control_packet ( NULL, 0, & cpkt ) ; } else if ( pkthdr. ptype == MT_PTYPE_ACK ) { } else if ( pkthdr. ptype == MT_PTYPE_END ) { struct mt_packet odata ; init_packet ( & odata, MT_PTYPE_END, srcmac, dstmac, sessionkey, pkthdr. counter + ( data_len - MT_HEADER_LEN ) <S2SV_ModEnd> ) ; }",0
417,"<S2SV_ModStart> MUTT_ABORT ) { return - 1 ; } if ( ans == MUTT_YES ) { enum ImapExecResult rc = imap_exec ( adata, ""STARTTLS"", IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc!= IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could <S2SV_blank> not <S2SV_blank> negotiate <S2SV_blank> TLS <S2SV_blank> connection"" ) ) ; goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted <S2SV_blank> connection <S2SV_blank> unavailable"" ) ) ; return - 1 <S2SV_ModEnd> ; } #",0
418,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
419,"<S2SV_ModStart> ( line, ""?WATCH={\\""json\\"":false};\\n"" ) ; if ( send ( gpsd_sock, line, 22, 0 )!= 22 ) return ; memset ( line, 0, sizeof ( line ) ) ; strcpy ( line, ""?WATCH={\\""json\\"":true};\\n"" ) ; if ( send ( gpsd_sock, line, 22, 0 )!= 22 ) return ; memset ( line, 0, sizeof ( line ) ) ; strcpy ( line, ""?WATCH={\\""json\\"":true};\\n"" ) ; if ( send ( gpsd_sock, line, 22, 0 )!= 22 ) return ; memset ( line, 0, sizeof ( line ) ) ; if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } else { pos = strlen ( line ) ; } <S2SV_ModEnd> } } }",0
420,"<S2SV_ModStart>, & rlen ) ; if ( ret ) return ret ; if (! check_atype_tag ( a, & t ) ) return ASN1_BAD_ID ; ret = decode_atype_to_ptr ( & t, contents, clen, a, retrep <S2SV_ModStart> return ASN1_BAD_ID ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
421,"<S2SV_ModStart> * slavename ; user = find_user ( curconn -> username ) ; if ( user == NULL ) { syslog ( LOG_NOTICE, _ ( ""(%d) <S2SV_blank> Invalid <S2SV_blank> login <S2SV_blank> by <S2SV_blank> %s."" ), curconn -> seskey, curconn -> username ) ; abort_connection ( curconn, pkthdr, _ ( ""Login <S2SV_blank> failed, <S2SV_blank> incorrect <S2SV_blank> username <S2SV_blank> or <S2SV_blank> password\\r\\n"" ) ) ; return ; } <S2SV_ModStart>, _ ( ""Login <S2SV_blank> failed, <S2SV_blank> incorrect <S2SV_blank> username <S2SV_blank> or <S2SV_blank> password\\r\\n"" <S2SV_ModEnd> ) ) ;",0
422,"<S2SV_ModStart> ( name, ""__debug__"" ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } if ( PyUnicode_CompareWithASCIIString ( name, ""__debug__"" ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } if ( PyUnicode_CompareWithASCIIString ( name, ""__debug__"" ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } if ( PyUnicode_CompareWithASCIIString ( name, ""__debug__"" ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } if ( PyUnicode_CompareWithASCIIString ( name,",0
423,<S2SV_ModStart> ; i < 128 <S2SV_ModEnd> && str [,0
424,"<S2SV_ModStart> uchar buf [ 3 <S2SV_ModEnd> ] ; int <S2SV_ModStart> ( JAS_STREAM_MAXPUTBACK >= 3 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, buf, 3 <S2SV_ModEnd> ) ) < <S2SV_ModStart> ( n < 3 ) { return - 1 ; } if ( buf [ 0 ] == 'P' && isdigit ( buf [ 1 ] ) ) { return 0 ; } return - 1 ; } if ( buf [ 0 ] == 'P' && isdigit ( buf [ 1 ] ) ) { return 0 ; } return - 1 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
425,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
426,"<S2SV_ModStart>, buf_size, 2 <S2SV_ModEnd> ) ) { <S2SV_ModStart>, ""ExifMnoteDataFuji"", ""Long <S2SV_blank> MakerNote"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart>, ""ExifMnoteDataFuji"", ""Long <S2SV_blank> MakerNote"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart>, ""ExifMnoteDataFuji"", ""Long <S2SV_blank> MakerNote"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart>, ""ExifMnoteDataFuji"", ""Long <S2SV_blank> MakerNote"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart>, ""ExifMnoteDataFuji"", ""Long <S2SV_blank> MakerNote"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart>, ""ExifMnoteDataFuji"", ""Long <S2SV_blank> MakerNote"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart>, ""ExifMnoteDataFuji"", ""Long <S2SV_blank> MakerNote"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart>, ""ExifMnoteDataFuji"", ""Long <S2SV_blank> MakerNote"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart>, ""ExifMnoteDataFuji"", ""Long <S2SV_blank> MakerNote"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart>, ""ExifMnoteDataFuji"", ""Long <S2SV_blank> MakerNote"" <S2SV_ModEnd> ) ; goto",0
427,<S2SV_ModStart> bd_addr ) { int ret ; <S2SV_ModStart> return BT_STATUS_NOT_READY ; ret = <S2SV_ModEnd> btif_dm_remove_bond ( bd_addr <S2SV_ModStart> bd_addr ) ; return ret ;,0
428,<S2SV_ModStart> ; avail = ( int ) ( <S2SV_ModStart> buf -> cursor ),0
429,<S2SV_ModStart> -> header [ SIGNED_SIZEOF ( <S2SV_ModStart> psf -> headindex ) <S2SV_ModEnd> ++ ] = <S2SV_ModStart> -> header [ SIGNED_SIZEOF ( <S2SV_ModStart> psf -> headindex ) <S2SV_ModEnd> ++ ] = <S2SV_ModStart> -> header [ SIGNED_SIZEOF ( <S2SV_ModStart> psf -> headindex ) <S2SV_ModEnd> ++ ] = <S2SV_ModStart> -> header [ SIGNED_SIZEOF ( <S2SV_ModStart> psf -> headindex ) <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
430,"<S2SV_ModStart> - 1 ; # ifdef HAVE_OE_SYSCALL <S2SV_ModStart> OE_EINVAL ) ; # else if ( oe_syscall_write ( & ret, epoll -> host_fd, buf, count )!= OE_OK ) OE_RAISE_ERRNO ( OE_EINVAL ) ; # endif done : # ifdef HAVE_OE_SYSCALL if ( oe_syscall_write ( & ret, epoll -> host_fd, buf, count )!= OE_OK ) OE_RAISE_ERRNO ( OE_EINVAL ) ; # else if ( oe_syscall_write_ocall ( & ret, epoll -> host_fd, buf, count )!= OE_OK ) OE_RAISE_ERRNO ( OE_EINVAL ) ; # endif <S2SV_ModEnd> return ret ;",0
431,"<S2SV_ModStart> new_service_options ) { <S2SV_ModEnd> s_log ( LOG_INFO <S2SV_ModStart> servname ) ; if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_ERR, ""Inetd <S2SV_blank> mode: <S2SV_blank> %s"", errstr ) ; else s_log ( LOG_ERR, ""Service <S2SV_blank> [%s]: <S2SV_blank> %s"", ( * section_ptr ) -> servname, errstr ) ; return 1 ; }",0
432,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_PTR_MAX : * ( size_t * ) val = ms -> ptr_max ; return 0 ; case MAGIC_PARAM_PTR_MIN : * ( size_t * ) val = ms -> ptr_min ; return 0 ; case MAGIC_PARAM_PTR_MAX : * ( size_t * ) val = ms -> ptr_max ; return 0 ; case MAGIC_PARAM_PTR_MIN : * ( size_t * ) val = ms -> ptr_min ; return 0 ; case MAGIC_PARAM_PTR_MAX : * ( size_t * ) val = ms -> ptr_max ; return 0 ;,0
433,<S2SV_ModStart> offset ) { <S2SV_ModEnd> if ( offset <S2SV_ModStart> page ) ; <S2SV_ModEnd> jbd2_journal_invalidatepage ( journal <S2SV_ModStart> offset ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
434,<S2SV_ModStart> 1 ) ; if (! trak ) { writer = ( TrackWriter * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STSC ) ; if (! writer ) return GF_OUT_OF_MEM ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STSC ) ; if (! writer -> stsc ) return GF_OUT_OF_MEM ; writer -> sampleNumber = 1 ; writer -> mdia = trak -> Media ; writer -> stbl = trak -> Media -> information -> sampleTable ; writer -> timeScale = trak -> Media -> mediaHeader -> timeScale ; writer -> all_dref_mode = Media_SelfContainedType ( writer -> mdia ) ; if ( trak -> sample_encryption ) writer -> prevent_dispatch = GF_TRUE ; writer -> isDone = 0 ; writer -> chunkDur = 0 ; writer -> chunkDur = 0 ; writer -> constant_size = writer -> constant_dur = 0 ; },0
435,"<S2SV_ModStart>, password, 80 <S2SV_ModEnd> ) ; md5data <S2SV_ModStart> ( password ) <S2SV_ModEnd> ) ; md5_finish <S2SV_ModStart>, MT_CPTYPE_PASSWORD, ( const md5_byte_t * ) <S2SV_ModStart>, MT_CPTYPE_USERNAME, ( const char * ) <S2SV_ModStart>, MT_CPTYPE_TERM_TYPE, ( const char * ) <S2SV_ModStart>, & height )!= - 1 ) { width = htole16 ( width ) ; height = htole16 ( height ) ; plen += add_control_packet ( & data, MT_CPTYPE_TERM_WIDTH, & width, 2 ) ; plen += add_control_packet ( & data, MT_CPTYPE_TERM_HEIGHT, & height, 2 ) ; } outcounter += <S2SV_ModEnd> plen ; send_udp",0
436,<S2SV_ModStart> ; if ( <S2SV_ModEnd> Prefix!= NULL <S2SV_ModStart> NULL ; } if ( _mibindexes ) { int i ; for ( i = 0 ; i < _mibindex ; ++ i ) SNMP_FREE ( _mibindexes [ i ] ) ; free ( _mibindexes ) ; _mibindex = 0 ; _mibindex_max = 0 ; _mibindexes = NULL ; } if ( _mibindexes ) { int i ; for ( i = 0 ; i < _mibindex ; ++ i ) SNMP_FREE ( _mibindexes [ i ] ) ; free ( _mibindexes ) ; _mibindex = 0 ; _mibindex_max = 0 ; _mibindexes = NULL ; },0
437,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
438,<S2SV_ModStart> ( ) ; g_hash_table_remove_all ( headers ) ;,0
439,"<S2SV_ModStart>, src_ybc -> y_stride <S2SV_ModEnd> ) ; src <S2SV_ModStart> += src_ybc -> y_width <S2SV_ModEnd> ; dst += <S2SV_ModStart> += dst_ybc -> y_width <S2SV_ModEnd> ; } }",0
440,"<S2SV_ModStart> int mi_col ; <S2SV_ModEnd> MACROBLOCK * x <S2SV_ModStart> -> mb ; <S2SV_ModEnd> vp9_zero ( cpi <S2SV_ModStart> pred_mv ) ; <S2SV_ModEnd> for ( mi_col <S2SV_ModStart> ( mi_col = tile -> mi_row_start ; mi_col < tile -> mi_row_end ; ++ mi_col ) { vpx_memset ( xd -> left_context, 0, sizeof ( xd -> left_context ) ) ; vpx_memset ( xd -> left_seg_context, 0, sizeof ( xd -> left_seg_context ) ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
441,"<S2SV_ModStart>, obj_tlen ; u_int offset ; u_int link_type ; union { float f ; uint32_t i ; } bw ; tptr = pptr ; lmp_com_header = ( const struct lmp_common_header * ) pptr ; ND_TCHECK ( * lmp_com_header ) ; if ( LMP_EXTRACT_VERSION ( lmp_com_header -> version_res [ 0 ] )!= LMP_VERSION ) { ND_PRINT ( ( ndo, ""LMP <S2SV_blank> version <S2SV_blank> %u <S2SV_blank> packet <S2SV_blank> not <S2SV_blank> supported"", LMP_EXTRACT_VERSION ( lmp_com_header -> version_res [ 0 ] ) ) ) ; return ; } if ( ndo -> ndo_vflag < 1 ) { ND_PRINT ( ( ndo, ""LMPv%u <S2SV_blank> %s <S2SV_blank> Message, <S2SV_blank> length: <S2SV_blank> %u"", LMP_EXTRACT_VERSION ( lmp_com_header -> version_res [ 0 ] ), tok2str ( lmp_msg_type_values, ""unknown <S2SV_blank> (%u)"", lmp_com_header -> msg_type",0
442,<S2SV_ModStart> i ) { <S2SV_ModEnd> MV * ref <S2SV_ModStart> [ i ] -> <S2SV_ModEnd> as_mv ; const <S2SV_ModStart> [ i ] -> <S2SV_ModEnd> as_mv. row <S2SV_ModStart> [ i ] -> <S2SV_ModEnd> as_mv. col <S2SV_ModStart> [ i ] -> <S2SV_ModEnd> as_mv. col <S2SV_ModStart> [ i ] -> <S2SV_ModEnd> as_mv. row <S2SV_ModStart> [ i ] -> <S2SV_ModEnd> as_mv. col <S2SV_ModStart> [ i ] -> <S2SV_ModEnd> as_mv. col,0
443,"<S2SV_ModStart> ) ; } res = vpx_codec_enc_config_default ( encoder -> interface ( ), & cfg, 0 ) ; if ( res ) die_codec ( & codec, & cfg ) ; <S2SV_ModStart> ( ""Using <S2SV_blank> %s\\n"", vpx_codec_iface_name ( encoder -> interface ( ) ) ) ; res = vpx_codec_enc_config_default ( encoder -> interface ( ), & cfg, 0 ) ; if ( res ) die_codec ( & codec, & cfg ) ; res = vpx_codec_enc_config_default ( encoder -> interface ( ), & cfg, 0 ) ; if ( res ) die_codec ( & codec, & cfg <S2SV_ModEnd> ) ; if",0
444,"<S2SV_ModStart>, GFP_ATOMIC ) ) goto free ; skb_pull_rcsum ( skb_out, hdr_size ) ; memmove ( skb_out -> data - ETH_HLEN, skb_mac_header ( skb_out ), ETH_HLEN ) ; skb_set_mac_header ( skb_out, - ETH_HLEN ) ; skb_reset_transport_header ( skb_out ) ; hlist_for_each_entry ( entry, chain, list ) { size = entry -> skb -> len - hdr_size ; memcpy ( skb_put ( skb_out, size ), entry -> skb -> data + hdr_size, size ) ; } <S2SV_ModEnd> free : batadv_frag_clear_chain",0
445,"<S2SV_ModStart> ) return ; DEBUGMSGTL ( ( ""init_mib"", ""Seen <S2SV_blank> MIBDIRS: <S2SV_blank> Looking <S2SV_blank> in <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> mib <S2SV_blank> dirs <S2SV_blank>...\\n"", env_var ) ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibdir ( entry ) ; entry = strtok_r ( NULL, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; } } netsnmp_init_mib_internals ( ) ; env_var = netsnmp_getenv ( ""MIBS"" ) ; if ( env_var == NULL ) { if ( confmibs!= NULL ) env_var = strdup ( confmibs ) ; else env_var = strdup ( NETSNMP_DEFAULT_MIBS ) ; } else { <S2SV_ModStart> NULL ) ; <S2SV_ModEnd> } if (",0
446,"<S2SV_ModStart> 1 ; } if ( <S2SV_ModStart>, EV_KEY ) < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> set <S2SV_blank> key <S2SV_blank> event"", __FUNCTION__ ) ; close ( fd ) ; return - 1 ; } if ( <S2SV_ModEnd> ioctl ( fd <S2SV_ModStart>, EV_SYN ) < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> set <S2SV_blank> SYN <S2SV_blank> event"", __FUNCTION__ ) ; close ( fd ) ; return - 1 ; } <S2SV_ModEnd> for ( x",0
447,<S2SV_ModStart> i ++ ) vp9_free_frame <S2SV_ModEnd> ( & ctx <S2SV_ModStart> ]. img ) ; vp9_free_frame_buffer ( & ctx -> buf [ 0 ]. img ) ; vp9_free_frame_buffer ( & ctx -> buf [ 1 ]. img ) ; vp9_free_frame_buffer ( & ctx -> buf [ 2 ]. img ) ; vp9_free_frame_buffer ( & ctx -> buf [ 3 ]. img ) ; vp9_free_frame_buffer ( & ctx -> buf [ 4 ]. img ) ; vp9_free_frame_buffer ( & ctx -> buf [ 5 ]. img ) ; vp9_free_frame_buffer ( & ctx -> buf [ 6 ]. img ) ; vp9_free_frame_buffer ( & ctx -> buf [ 7 ]. img,0
448,"<S2SV_ModStart> 1 ) { vp9_lpf_vertical_8 ( s, pitch, lfi -> mblim, lfi -> lim, lfi -> hev_thr, 1 ) ; } else if ( mask_4x4 & 1 ) { vp9_lpf_vertical_4 ( s, pitch, lfi -> mblim, lfi -> lim, lfi -> hev_thr, 1 ) ; } } if ( mask_4x4_int & 1 ) vp9_lpf_vertical_4 ( s + 4, pitch, lfi -> mblim, lfi -> lim, lfi -> hev_thr, 1 ) ; s += 8 ; lfl += 1 ; mask_16x16 >>= 1 ; mask_8x8 >>= 1 ; mask_4x4 >>= 1 ; mask_4x4_int <S2SV_ModEnd> >>= 1 ;",0
449,<S2SV_ModStart> krb5_error_code iakerb_alloc_context ( krb5_gss_ctx_t <S2SV_ModEnd> * pctx ) <S2SV_ModStart> pctx ) { krb5_gss_ctx_t <S2SV_ModEnd> ctx ; krb5_error_code,0
450,"<S2SV_ModStart> ( screen, ( size_t ) GetDeviceCaps ( hDC, HORZRES ), ( size_t ) GetDeviceCaps ( hDC, VERTRES ) ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; bitmapDC = CreateCompatibleDC ( hDC ) ; if ( bitmapDC == ( HDC ) NULL ) { DeleteDC ( hDC ) ; ThrowReaderException ( CoderError, ""UnableToCreateDC"" ) ; } ( void ) SetImageExtent ( screen, <S2SV_ModStart> ) ; } <S2SV_ModEnd> } # endif",0
451,"<S2SV_ModStart> START_CODE_LEN ) ; u4_start_code = <S2SV_ModEnd> impeg2d_bit_stream_nxt ( ps_stream <S2SV_ModStart>, START_CODE_PREFIX_LEN ) ; if ( u4_start_code <S2SV_ModStart>!= START_CODE_PREFIX ) <S2SV_ModEnd> impeg2d_bit_stream_flush ( ps_stream <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> u4_start_code = impeg2d_bit_stream_nxt",0
452,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { ret = <S2SV_ModEnd> - EINVAL ; <S2SV_ModStart> - EINVAL ; goto out ; }",1
453,<S2SV_ModStart> = mono_class_from_mono_type ( mono_generic_inst_get_type <S2SV_ModEnd> ( ginst ) <S2SV_ModStart> = mono_class_from_mono_type ( mono_generic_inst_get_type <S2SV_ModEnd> ( ginst ) <S2SV_ModStart> = mono_class_from_mono_type ( mono_generic_inst_get_type <S2SV_ModEnd> ( ginst ) <S2SV_ModStart> = mono_class_from_mono_type ( mono_generic_inst_get_type <S2SV_ModEnd> ( ginst ) <S2SV_ModStart> = mono_class_from_mono_type ( mono_generic_inst_get_type <S2SV_ModEnd> ( ginst ) <S2SV_ModStart> = mono_class_from_mono_type ( mono_generic_inst_get_type <S2SV_ModEnd> ( ginst ) <S2SV_ModStart> = mono_class_from_mono_type ( mono_generic_inst_get_type <S2SV_ModEnd> ( ginst ) <S2SV_ModStart> = mono_class_from_mono_type ( mono_generic_inst_get_type <S2SV_ModEnd> ( ginst ) <S2SV_ModStart> = mono_class_from_mono_type ( mono_generic_inst_get,0
454,<S2SV_ModStart> int tmp ; mutex_lock ( & exitcode_mutex ) ; <S2SV_ModStart> count ) ) { mutex_unlock ( & exitcode_mutex ) ; <S2SV_ModStart> - EFAULT ; } <S2SV_ModStart> end ) ) { mutex_unlock ( & exitcode_mutex ) ; <S2SV_ModStart> - EINVAL ; } <S2SV_ModStart> = tmp ; mutex_unlock ( & exitcode_mutex ) ;,0
455,"<S2SV_ModStart> & name [ 2 <S2SV_ModEnd> ], ""PLATFORM"" <S2SV_ModStart> & name [ 3 <S2SV_ModEnd> ], ""ORIGIN"" <S2SV_ModStart> & name [ 3 <S2SV_ModEnd> ], ""PLATFORM"" <S2SV_ModStart> & name [ 3 <S2SV_ModEnd> ], ""PLATFORM}"" <S2SV_ModStart> & name [ 3 <S2SV_ModEnd> ], ""PLATFORM}"" <S2SV_ModStart> & name [ 3 <S2SV_ModEnd> ], ""PLATFORM}"" <S2SV_ModStart> & name [ 3 <S2SV_ModEnd> ]!= ':'",0
456,"<S2SV_ModStart> ) H264SwDecMalloc ( sizeof ( decContainer_t ) ) ; if ( pDecCont == NULL ) { DEC_API_TRC ( ""H264SwDecInit# <S2SV_blank> ERROR: <S2SV_blank> Memory <S2SV_blank> allocation <S2SV_blank> failed"" ) ; return ( H264SWDEC_MEMFAIL ) ; } # ifdef H264DEC_TRACE sprintf ( pDecCont -> str, ""H264SwDecInit# <S2SV_blank> decInst <S2SV_blank> %p <S2SV_blank> noOutputReordering <S2SV_blank> %d"", ( void * ) decInst, noOutputReordering ) ; DEC_API_TRC ( pDecCont -> str ) ; # endif rv = h264bsdInit ( & pDecCont -> storage, noOutputReordering ) ; if ( rv!= HANTRO_OK ) { H264SwDecRelease ( pDecCont ) ; return ( H264SWDEC_MEMFAIL ) ; } pDecCont -> decStat = INITIALIZED ; pDecCont -> picNumber = 0 ; # ifdef H264DEC_TRACE sprintf ( pDecCont -> str, ""H264SwDecInit# <S2SV_blank> OK: <S2SV_blank> return <S2SV_blank> %p"", ( void * ) pDecCont )",0
457,"<S2SV_ModStart> 5 ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_NOSPACE ) ; goto inhdr_error ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> srr ) ) { struct in_device * in_dev = __in_dev_get_rcu ( dev ) ; if ( in_dev &&! IN_DEV_SOURCE_ROUTE ( in_dev ) ) goto drop ; if ( ip_options_rcv_srr ( skb ) ) goto drop ; } return 0 ; inhdr_error : IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INHDRERRORS ) ; <S2SV_ModStart> 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
458,"<S2SV_ModStart> ) break ; length = ( size_t ) 4 * image -> columns ; for ( y = 0 ; y < ( ssize_t ) image -> rows ; y ++ ) { count = ReadBlob ( image, length, pixels ) ; if ( count!= length ) ThrowReaderException ( CorruptImageError, ""UnableToReadImageData"" ) ; } for ( y = 0 ; y < ( ssize_t ) image -> columns ; y ++ ) { count = ReadBlob ( image, length, pixels ) ; if ( count!= length ) ThrowReaderException ( CorruptImageError, ""UnableToReadImageData"" ) ; } <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; <S2SV_ModEnd> } while (",0
459,<S2SV_ModStart> goto errout ; _ogg_free ( info -> stagebooks ) ; _ogg_free ( info -> partitions ) ; _ogg_free ( info -> stagemasks ) ; _ogg_free ( info -> stagebooks ) ;,0
460,<S2SV_ModStart> krb5_key_data * key_data = NULL <S2SV_ModStart> == NULL ) { k5free ( key_data ) ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { k5free ( key_data ) ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { k5free ( key_data ) ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { k5free ( key_data ) ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { k5free ( key_data ) ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { k5free ( key_data ) ; <S2SV_ModStart> goto cleanup ; },0
461,"<S2SV_ModStart> * self, int <S2SV_ModEnd> idx, PyObject",0
462,"<S2SV_ModStart> ; pCsr -> szInput <S2SV_ModEnd> = sqlite3_malloc ( <S2SV_ModStart> ( pCsr -> szInput <S2SV_ModEnd> == 0 ) <S2SV_ModStart> { memcpy ( pCsr -> szInput, zByte, nByte ) ; pCsr -> szInput [ nByte ] = 0 ; rc = pTab -> pMod -> xOpen ( pTab -> pTok, pCsr -> szInput, nByte, & pCsr -> pCsr ) ; if ( rc == SQLITE_OK ) { pCsr -> pCsr -> pTokenizer = pTab -> pTok ; } } } } if ( rc!= SQLITE_OK ) return rc ; return <S2SV_ModEnd> fts3tokNextMethod ( pCursor <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
463,<S2SV_ModStart> filp ) { return <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
464,"<S2SV_ModStart> stmt_ty AsyncFor ( stmt_ty target, stmt_ty iter, asdl_seq * body, asdl_seq * orelse, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena * arena ) { stmt_ty p ; if (! target ) { PyErr_SetString ( PyExc_ValueError, ""field <S2SV_blank> target <S2SV_blank> is <S2SV_blank> required <S2SV_blank> for <S2SV_blank> AsyncFor"" ) ; return NULL ; } if (! iter ) { PyErr_SetString ( PyExc_ValueError, ""field <S2SV_blank> iter <S2SV_blank> is <S2SV_blank> required <S2SV_blank> for <S2SV_blank> AsyncFor"" ) ; return NULL ; } p = ( stmt_ty ) PyArena_Malloc ( arena, sizeof ( * p ) ) ; if (! p ) return NULL ; <S2SV_ModEnd> p -> v",0
465,"<S2SV_ModStart> * param, <S2SV_ModEnd> MI_INFO * info <S2SV_ModStart> name ) { reg2 key ; reg1 MI_KEYDEF * keyinfo ; File new_file ; my_off_t index_pos [ HA_MAX_POSSIBLE_KEY ] ; uint r_locks, w_locks ; MYISAM_SHARE * share = info -> s ; MI_STATE_INFO old_state ; DBUG_ENTER ( ""mi_sort_index"" ) ; if (! ( param -> testflag & T_SILENT ) ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; fn_format ( param -> temp_filename, name, """", MI_NAME_IEXT, 2 + 4 + 32 ) ; if ( ( new_file = mysql_file_create ( mi_key_file_datatmp, fn_format ( param -> temp_filename, param -> temp_filename, """", INDEX_TMP_EXT, 2 + 4 ), 0, param -> tmpfile_createflag, MYF ( 0 ) ) ) <= 0 ) { mi_check_print_error ( param, """,0
466,"<S2SV_ModStart> case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : <S2SV_ModEnd> return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; <S2SV_ModStart> case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : <S2SV_ModEnd> return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; <S2SV_ModStart> case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : <S2SV_ModEnd> return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; <S2SV_ModStart> case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : <S2SV_ModEnd> return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; <S2SV_ModStart> case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : <S2SV_ModEnd> return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; <S2SV_ModStart> case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : <S2SV_ModEnd> return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; <S2SV_ModStart> case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : <S2SV_ModEnd> return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; <S2SV_ModStart> case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : <S2SV_ModEnd> return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; <S2SV_ModStart> case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : <S2SV_ModEnd> return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; <S2SV_ModStart> case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : <S2SV_ModEnd> return ""Internal <S2SV_blank> server <S2SV_blank> error"" ;",0
467,"<S2SV_ModStart> ( s, & <S2SV_ModStart> ( s, & <S2SV_ModStart> ( TAG, ""rdpei_recv_pdu: <S2SV_blank> eventId: <S2SV_blank> %"" <S2SV_ModEnd> PRIu16 "" <S2SV_blank> (%s) <S2SV_blank> length: <S2SV_blank> %"" PRIu32 <S2SV_ModStart> ( TAG, ""rdpei_recv_pdu: <S2SV_blank> eventId: <S2SV_blank> %"" <S2SV_ModEnd> PRIu16 "" <S2SV_blank> (%s) <S2SV_blank> length: <S2SV_blank> %"" PRIu32 <S2SV_ModStart> ( TAG, ""rdpei_recv_pdu: <S2SV_blank> eventId: <S2SV_blank> %"" <S2SV_ModEnd> PRIu16 "" <S2SV_blank> (%s) <S2SV_blank> length: <S2SV_blank> %"" PRIu32 <S2SV_ModStart> ( TAG, ""rdpei_recv_pdu: <S2SV_blank> eventId: <S2SV_blank> %"" <S2SV_ModEnd> PRIu16 "" <S2SV_blank> (%s) <S2SV_blank> length: <S2SV_blank> %"" PRIu32 <S2SV_ModStart> ( TAG, ""rdpei_recv_pdu: <S2SV_blank> eventId: <S2SV_blank> %"" <S2SV_ModEnd> PRIu16 "" <S2SV_blank> (%s) <S2SV_blank> length: <S2SV_blank> %"" PRIu32 <S2SV_ModStart> ( TAG, ""rdpei_recv_pdu: <S2SV_blank> eventId: <S2SV_blank> %"" <S2SV_ModEnd> PRIu16 "" <S2SV_blank> (%s) <S2SV_blank> length: <S2SV_blank> %"" PRIu32",0
468,"<S2SV_ModStart>, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_setsockopt(SO_REUSEADDR) <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"" <S2SV_ModEnd>, pData -> <S2SV_ModStart>, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_setsockopt(SO_REUSEADDR) <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"" <S2SV_ModEnd>, pData -> <S2SV_ModStart>, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_setsockopt(SO_REUSEADDR) <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"" <S2SV_ModEnd>, pData -> <S2SV_ModStart>, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_setsockopt(SO_REUSEADDR) <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"" <S2SV_ModEnd>, pData -> <S2SV_ModStart>, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_setsockopt(SO_REUSEADDR) <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"" <S2SV_ModEnd>, pData -> <S2SV_ModStart>, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> z",0
469,"<S2SV_ModStart> struct flowi6 fl6 ; int err <S2SV_ModStart> = 1 ; err = <S2SV_ModEnd> ip6_xmit ( sk <S2SV_ModStart> tclass ) ; if ( err ) SCTP_INC_STATS ( sock_net ( sk ), SCTP_MIB_OUTSCTPPACKS ) ; return err ;",0
470,"<S2SV_ModStart> ( ), ""MATLAB <S2SV_blank> reading <S2SV_blank> failed"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( ), ""MATLAB <S2SV_blank> reading <S2SV_blank> failed"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( ), ""MATLAB <S2SV_blank> reading <S2SV_blank> failed"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( ), ""MATLAB <S2SV_blank> reading <S2SV_blank> failed"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( ), ""MATLAB <S2SV_blank> reading <S2SV_blank> failed"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( ), ""MATLAB <S2SV_blank> reading <S2SV_blank> failed"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( ), ""MATLAB <S2SV_blank> reading <S2SV_blank> failed"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( ), ""MATLAB <S2SV_blank> reading <S2SV_blank> failed"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( ), ""MATLAB <S2SV_blank> reading <S2SV_blank> failed"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( ), ""MATLAB <S2SV_blank> reading <S2SV_blank> failed"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( ), ""MATLAB <S2SV_blank> reading <S2SV_blank> failed"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( ), ""MATLAB <S2SV_blank> reading <S2SV_blank> failed"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( ), ""MATLAB <S2SV_blank> reading <S2SV_blank> failed"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( ), ""MATLAB <S2SV_blank> reading <S2SV_blank> failed"" <S2SV_ModEnd> ) ; goto",0
471,"<S2SV_ModStart> ( TAG, ""RDP_NEG_FAILURE\\r\\n"" <S2SV_ModEnd> ) ; Stream_Read_UINT8 <S2SV_ModStart> ( TAG, ""Error: <S2SV_blank> SSL_REQUIRED_BY_SERVER\\r\\n"" <S2SV_ModEnd> ) ; Stream_Read_UINT16 <S2SV_ModStart> ( TAG, ""Error: <S2SV_blank> SSL_NOT_ALLOWED_BY_SERVER\\r\\n"" <S2SV_ModEnd> ) ; nego <S2SV_ModStart> ( TAG, ""Error: <S2SV_blank> SSL_CERT_NOT_ON_SERVER\\r\\n"" <S2SV_ModEnd> ) ; nego <S2SV_ModStart> ( TAG, ""Error: <S2SV_blank> INCONSISTENT_FLAGS\\r\\n"" <S2SV_ModEnd> ) ; break <S2SV_ModStart> ( TAG, ""Error: <S2SV_blank> HYBRID_REQUIRED_BY_SERVER\\r\\n"" <S2SV_ModEnd> ) ; break <S2SV_ModStart> ( TAG, ""Error: <S2SV_blank> Unknown <S2SV_blank> protocol <S2SV_blank> security <S2SV_blank> error\\r\\n"" <S2SV_ModEnd>, failureCode )",0
472,<S2SV_ModStart> ) ) { return <S2SV_ModEnd> RLC_ERR ; } <S2SV_ModStart> ) ) { return <S2SV_ModEnd> RLC_ERR ; } <S2SV_ModStart> ) ) { return <S2SV_ModEnd> RLC_ERR ; } <S2SV_ModStart> ) ) { return <S2SV_ModEnd> RLC_ERR ; } <S2SV_ModStart> ) ) { return <S2SV_ModEnd> RLC_ERR ; } <S2SV_ModStart> ) ) { return <S2SV_ModEnd> RLC_ERR ; } <S2SV_ModStart> ) ) { return <S2SV_ModEnd> RLC_ERR ; } <S2SV_ModStart> ) ) { return <S2SV_ModEnd> RLC_ERR ; } <S2SV_ModStart> ) ) { return <S2SV_ModEnd> RLC_ERR ; },0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,<S2SV_ModStart> 8 ) ; <S2SV_ModEnd> psf = calloc <S2SV_ModStart> SF_PRIVATE ) ) ; if (! psf <S2SV_ModEnd> ) { sf_errno,0
475,"<S2SV_ModStart> vp9_COMMON * cm, int <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
476,"<S2SV_ModStart> subsampling_y ) ; vpx_memset ( xd -> above_context [ 0 ], 0, sizeof ( * xd -> above_context [ 0 ] ) * 2 * aligned_mi_cols * MAX_MB_PLANE ) ; vpx_memset ( xd -> above_seg_context, 0, sizeof ( * xd -> above_seg_context ) * aligned_mi_cols ) ; <S2SV_ModStart> MAX_MB_PLANE ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
477,"<S2SV_ModStart> ) ; retval += <S2SV_ModEnd> htc_request_check_host_hdr ( hp <S2SV_ModStart> ( hp ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } retval = htc_request_check_port_hdr ( hp ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_Error, ""Duplicated <S2SV_blank> Port <S2SV_blank> header"" ) ; return ( retval ) ; } retval = htc_request_check_port_hdr ( hp ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_Error, ""Duplicated <S2SV_blank> Port <S2SV_blank> header"" ) ; return ( retval ) ; } retval = htc_request_check_port_hdr ( hp ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_Error, ""Duplicated <S2SV_blank> Port <S2SV_blank> header"" ) ; return ( retval ) ; } return ( retval",0
478,"<S2SV_ModStart> 0x07 char magick [ 12 ] ; Image * image ; IndexPacket index ; int opcode, operand, status ; MagickStatusType flags ; MagickSizeType number_pixels ; MemoryInfo * pixel_info ; register IndexPacket * indexes ; register ssize_t x ; size_t bits_per_pixel, number_colormaps, number_planes_filled, one, pixel_info_length ; unsigned char background_color [ 256 ], * colormap, plane, * pixels ; count = ReadBlob ( image, 2, ( unsigned char * ) magick ) ; if ( ( count!= 2 ) || ( memcmp ( magick, ""\\122\\314"", 2 )!= 0 ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; do { <S2SV_ModEnd> image -> page <S2SV_ModStart> image ) ; <S2SV_ModEnd> flags = (",0
479,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> sizeof ( tETH_HDR ),1
480,<S2SV_ModStart> ps_prev_poc -> i4_pic_order_cnt_msb |= <S2SV_ModEnd> ps_cur_poc -> i4_pic_order_cnt_msb <S2SV_ModStart> ps_prev_poc -> i4_pic_order_cnt_lsb |= <S2SV_ModEnd> ps_cur_poc -> i4_pic_order_cnt_msb <S2SV_ModStart> ps_prev_poc -> i4_pic_order_cnt_msb |= <S2SV_ModEnd> ps_cur_poc -> i4_pic_order_cnt_lsb <S2SV_ModStart> ps_prev_poc -> i4_pic_order_cnt_msb |= <S2SV_ModEnd> ps_cur_poc -> i4_pic_order_cnt_msb <S2SV_ModStart> ps_prev_poc -> i4_pic_order_cnt_msb |= <S2SV_ModEnd> ps_cur_poc -> i4_pic_order_cnt_msb <S2SV_ModStart> ps_prev_poc -> i4_pic_order_cnt_lsb |= <S2SV_ModEnd> ps_cur_poc -> i4_pic_order_cnt_msb <S2SV_ModStart> ps_prev_poc -> i4_pic_order_cnt_msb |=,0
481,"<S2SV_ModStart> MPT_ADAPTER * ioc <S2SV_ModEnd> ; int iocnum <S2SV_ModStart> ENODEV ; } ioc = mpt_lookup_adapter ( iocnum ) ; if (! ioc ) { printk ( KERN_ERR MYNAM ""%s::mptctl_getiocinfo() <S2SV_blank> - <S2SV_blank> ioc%d <S2SV_blank> not <S2SV_blank> found!\\n"", __FILE__, __LINE__, iocnum ) ; kfree ( karg ) ; return - ENODEV ; }",0
482,"<S2SV_ModStart> image -> columns * image -> rows <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; for ( y = 0 ; y < ( ssize_t ) image -> rows ; y ++ ) { count = ReadBlob ( image, length, pixels ) ; if ( ( size_t ) count!= length ) ThrowReaderException ( CorruptImageError, ""UnableToReadImageData"" ) ; p = pixels ; q = QueueAuthenticPixels ( image, 0, y, image -> columns, 1, exception ) ; if ( q == ( PixelPacket * ) NULL ) break ; for ( x = 0 ; x < ( ssize_t ) image -> columns ; x ++ ) { SetPixelRed ( q, ScaleCharToQuantum ( 4 * * p ++ ) ) ; SetPixelGreen ( q, ScaleCharToQuantum ( 4 * * p ++ ) ) ; SetPixelBlue ( q, ScaleCharToQuantum ( 4 * * p ++ ) ) ; SetPixelOpacity ( q, OpaqueOpacity ) ; q ++ ; } } <S2SV_ModEnd> DestroyImageList ( image",0
483,"<S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv",0
484,"<S2SV_ModStart> ; if ( datao >= buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( <S2SV_ModStart> ; if ( o >= buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( <S2SV_ModStart> ; if ( o >= buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if (",0
485,"<S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> directory <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> directory <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> directory <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> directory <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> directory <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> directory <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> directory <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, procName,",0
486,<S2SV_ModStart> ( stunnel_locks [ SESSION_LOCK_SECTIONS <S2SV_ModEnd> ] ) ; <S2SV_ModStart> ( stunnel_locks [ SESSION_LOCK_SECTIONS <S2SV_ModEnd> ] ) ;,0
487,<S2SV_ModStart> void ) { next_character ( ) ; <S2SV_ModStart> '\\0' ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
488,"<S2SV_ModStart> ( "" <S2SV_blank> <S2SV_blank> EHT1 <S2SV_blank> = <S2SV_blank> %04"" PRIX16 "" <S2SV_blank> (0x%04X)\\r\\n"" <S2SV_ModEnd>, enc624j600ReadReg ( <S2SV_ModStart> ( "" <S2SV_blank> <S2SV_blank> EHT2 <S2SV_blank> = <S2SV_blank> %04"" PRIX16 "" <S2SV_blank> (0x%04X)\\r\\n"" <S2SV_ModEnd>, enc624j600ReadReg ( <S2SV_ModStart> ( "" <S2SV_blank> <S2SV_blank> EHT3 <S2SV_blank> = <S2SV_blank> %04"" PRIX16 "" <S2SV_blank> (0x%04X)\\r\\n"" <S2SV_ModEnd>, enc624j600ReadReg ( <S2SV_ModStart> ( "" <S2SV_blank> <S2SV_blank> EHT4 <S2SV_blank> = <S2SV_blank> %04"" PRIX16 "" <S2SV_blank> (0x%04X)\\r\\n"" <S2SV_ModEnd>, enc624j600ReadReg ( <S2SV_ModStart> ( "" <S2SV_blank> <S2SV_blank> EHT3 <S2SV_blank> = <S2SV_blank> %04"" PRIX16 "" <S2SV_blank> (0x%04X)\\r\\n"" <S2SV_ModEnd>, enc624j600ReadReg ( <S2SV_ModStart> ( "" <S2SV_blank> <S2SV_blank> EHT4 <S2SV_blank> = <S2SV_blank> %04"" PRIX16 "" <S2SV_blank> (0x%04X)\\r\\n"" <S2SV_ModEnd>, enc624j600ReadReg (",0
489,"<S2SV_ModStart> image ) ; if ( image_info -> debug!= MagickFalse ) ( void ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s: <S2SV_blank> ReadPDBImage <S2SV_blank> with <S2SV_blank> debug <S2SV_blank> flag <S2SV_blank> set"", image_info -> filename ) ; if ( image_info -> debug!= MagickFalse ) ( void ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s: <S2SV_blank> ReadPDBImage <S2SV_blank> with <S2SV_blank> debug <S2SV_blank> flag <S2SV_blank> set"", image_info -> filename ) ; if ( image_info -> debug!= MagickFalse ) ( void ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s: <S2SV_blank> ReadPDBImage <S2SV_blank> with <S2SV_blank> debug <S2SV_blank> flag <S2SV_blank> set"", image_info -> filename ) ; if ( image_info -> debug!= MagickFalse ) ( void ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s: <S2SV_blank> ReadPDBImage <S2SV_blank> with <S2SV_blank> debug <S2SV_blank> flag <S2SV_blank> set"", image_info -> filename ) ;",0
490,<S2SV_ModStart> { WORD32 i ; dpb_mgr_t * ps_dpb_mgr = ( dpb_mgr_t * ) ps_codec -> pv_dpb_mgr ; buf_mgr_t * ps_mv_buf_mgr = ( buf_mgr_t * ) ps_codec -> pv_mv_buf_mgr <S2SV_ModStart> u4_max_poc_lsb ; pic_buf_t * ps_pic_buf ; mv_buf_t * ps_mv_buf ; UWORD32 r_idx ; dpb_mgr_t * ps_dpb_mgr = ( dpb_mgr_t * ) ps_codec -> pv_dpb_mgr ; buf_mgr_t * ps_mv_buf_mgr = ( buf_mgr_t * ) ps_codec -> pv_mv_buf_mgr ; dpb_mgr_t * ps_dpb_mgr = ( dpb_mgr_t * ) ps_codec -> pv_dpb_mgr ; dpb_mgr_t * ps_dpb_mgr = ( dpb_mgr_t * ) ps_codec -> pv_dpb_mgr ; buf_,0
491,"<S2SV_ModStart> = 0 ; while ( child ) { ++ numentries ; child = child -> next ; } if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( names = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) { cJSON_free ( entries ) ; return 0 ; } memset ( names, 0, sizeof ( char * ) * numentries ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
492,<S2SV_ModStart> other ) ) { unix_state_lock ( sk ) ; <S2SV_ModStart> = 0 ; unix_state_unlock ( sk ) ; },0
493,"<S2SV_ModStart>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", ( int ) x, ( int ) y, ( int ) w, ( int ) <S2SV_ModEnd> h ) ;",0
494,<S2SV_ModStart> { * minor_status |= <S2SV_ModEnd> ( OM_uint32 ) <S2SV_ModStart> { * minor_status |= <S2SV_ModEnd> ( OM_uint32 ) <S2SV_ModStart> { * minor_status |= <S2SV_ModEnd> ( OM_uint32 ) <S2SV_ModStart> { * minor_status |= <S2SV_ModEnd> ( OM_uint32 ) <S2SV_ModStart> { * minor_status |= <S2SV_ModEnd> ( OM_uint32 ) <S2SV_ModStart> { * minor_status |= <S2SV_ModEnd> ( OM_uint32 ) <S2SV_ModStart> { * minor_status |= <S2SV_ModEnd> ( OM_uint32 ) <S2SV_ModStart> { * minor_status |= <S2SV_ModEnd> ( OM_uint32 ) <S2SV_ModStart> { * minor_status |= <S2SV_ModEnd> ( OM_uint32 ) <S2SV_ModStart> { * minor_status |= <S2SV_ModEnd> ( OM_uint32 ) <S2SV_ModStart> { * minor_status |= <S2SV_ModEnd> ( OM_uint32 ) <S2SV_ModStart> { * minor_status |= <S2SV_ModEnd> ( OM_uint32 ) <S2SV_ModStart> { * minor_status |= <S2SV_ModEnd> ( OM_uint32 ) <S2SV_ModStart> { * minor_status |= <S2SV_ModEnd> ( OM_uint32 ),0
495,<S2SV_ModStart> VPX_CODEC_INVALID_PARAM ; } <S2SV_ModEnd> return VPX_CODEC_OK ; <S2SV_ModStart> VPX_CODEC_OK ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
496,<S2SV_ModStart> plug ) ; <S2SV_ModEnd> put_ioctx ( ctx,0
497,"<S2SV_ModStart> char * name <S2SV_ModEnd> ) { int <S2SV_ModStart> T_SILENT ) ) <S2SV_ModEnd> printf ( ""- <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"" <S2SV_ModStart> name ) ; <S2SV_ModEnd> param -> testflag <S2SV_ModStart> |= T_CALC_CHECKSUM ; <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) || init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> read_buffer_length, READ_CACHE, share -> pack. header_length, 1, MYF ( MY_WME ) ) || (! rep_quick && init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, READ_CACHE, share -> pack. header_length, 1, MYF ( MY_WME ) ) ||",0
498,<S2SV_ModStart> s } ; <S2SV_ModEnd> uECC_word_t p [ <S2SV_ModStart> uECC_word_t * p ; wordcount_t num_words = curve -> num_words ; wordcount_t num_n_words = BITS_TO_WORDS ( curve -> num_n_bits ) ; bitcount_t num_n_bits = curve -> num_n_bits ; # if uECC_VLI_NATIVE_LITTLE_ENDIAN uECC_word_t p [ uECC_MAX_WORDS * 2 ] ; # endif uECC_word_t carry ; wordcount_t num_words = curve -> num_words ; wordcount_t num_n_words = BITS_TO_WORDS ( curve -> num_n_bits ) ; bitcount_t num_n_bits = curve -> num_n_bits ; # if uECC_VLI_NATIVE_LITTLE_ENDIAN <S2SV_ModEnd> p = (,0
499,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|dao-truncated]\\n"" <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( ndo, "" <S2SV_blank> [|dao-length <S2SV_blank> too <S2SV_blank> short]\\n"" <S2SV_ModEnd> ) ) ;",0
500,<S2SV_ModStart> ; } else if ( buf -> magic == NW_BUF_MAGIC ) { buf -> magic = NW_BUF_MAGIC ; } else <S2SV_ModStart> ) ; } if ( buf -> magic == NW_BUF_MAGIC ) { buf -> magic = NW_BUF_MAGIC ; } else if ( buf -> magic == NW_BUF_MAGIC ) { buf -> magic = NW_BUF_MAGIC ; } else if ( buf -> magic == NW_BUF_MAGIC ) { buf -> magic = NW_BUF_MAGIC ; } else if ( buf -> magic == NW_BUF_MAGIC ) { buf -> magic = NW_BUF_MAGIC ; } else if ( buf -> magic == NW_BUF_MAGIC ) { buf -> magic = NW_BUF_MAGIC ; } else if ( buf -> magic == NW_BUF_MAGIC ) { buf -> magic = NW_BUF_MAGIC ; } },0
501,"<S2SV_ModStart> = 0 ; for ( ; * cp && ( dp = index ( hex, * cp ) ) && ( dcount ++ < 2 ) ; cp ++ ) cval = ( cval * 16 ) + ( ( int ) ( dp - hex ) / 2 ) ; for ( ; * cp && ( index ( ""01234567"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 8 ) + ( * cp - '0' ) ; if ( * cp == '\\\\' && cp [ 1 ] ) { switch ( * ++ cp ) { case '\\\\' : cval = '\\\\' ; break ; case 'n' : cval = '\\n' ; break ; case 't' : cval = '\\t' ; break ; case 'b' : cval = '\\b' ; break ; default : cval = * cp ; } }",0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
503,"<S2SV_ModStart> pixm, * pixd ; PIXCMAP * cmap, * cmapd ; PROCNAME ( ""pixFewColorsOctcubeQuantMixed"" ) ; if (! pixs ) return ( PIX * ) ERROR_PTR ( ""pixs <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 32 <S2SV_blank> bpp"", procName, NULL ) ; if ( level <= 0 ) level = 3 ; if ( level > 6 ) return ( PIX * ) ERROR_PTR ( ""invalid <S2SV_blank> level"", procName, NULL ) ; if ( darkthresh <= 0 ) darkthresh = 20 ; if ( lightthresh <= 0 ) lightthresh = 244 ; if ( diffthresh <= 0 ) diffthresh = 0.05 ; if ( maxspan <= 2 ) maxspan = 15 <S2SV_ModEnd> ; cmap =",0
504,<S2SV_ModStart> vf = vp8_mse16x16 ; v_fn_ptr. vf_0 = vp8_mse16x16 ; v_fn_ptr. vf_1 = vp8_mse16x16 ; v_fn_ptr. vf_2 = vp8_mse16x16 ; v_fn_ptr. vf_3 = vp8_mse16x16 ; v_fn_ptr. vf_4 = vp8_mse16x16 ; v_fn_ptr. vf_5 = vp8_mse16x16 ; v_fn_ptr. vf_6 = vp8_mse16x16 ; v_fn_ptr. vf_7 = vp8_mse16x16 ; v_fn_ptr. vf_8 = vp8_mse16x16 ; v_fn_ptr. vf_9 = vp8_mse16x16 ; v_fn_ptr. vf_10 = vp8_mse16x16 ; v_fn_ptr. vf_11 = vp8_mse16x16 ; v_fn_ptr. vf_12 = vp8_,0
505,"<S2SV_ModStart> int overhead = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ++ ) { overhead += <S2SV_ModEnd> bson_size ( bsons <S2SV_ModStart> } if ( overhead > ( <S2SV_ModEnd> conn -> max_bson_size <S2SV_ModStart> -> max_bson_size ) ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } mm = mongo_message_create ( overhead, 0, 0, MONGO_OP_INSERT ) ; data = & mm -> data ; if ( flags & MONGO_CONTINUE_ON_ERROR ) data = mongo_data_append32 ( data, & ONE ) ; else data = mongo_data_append32 ( data, & ZERO ) ; data = mongo_data_append ( data, ns, strlen ( ns ) + 1 ) ; for ( i = 0 ; i < count ; i ++ ) { data = bsons [ i ] -> data, bson_size ( bsons [ i ] ) ; } <S2SV_ModEnd> return MONGO_ERROR ; <S2SV_ModStart> MONGO_ERROR ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
506,"<S2SV_ModStart> = NEGO_STATE_FAIL ; if ( Stream_GetRemainingLength ( s ) < 7 ) { WLog_ERR ( TAG, ""Invalid <S2SV_blank> RDP_NEG_RSP"" ) ; nego -> state = NEGO_STATE_FINAL ; } <S2SV_ModStart> = NEGO_STATE_FINAL ; if ( Stream_GetRemainingLength ( s ) < 7 ) { WLog_ERR ( TAG, ""Invalid <S2SV_blank> RDP_NEG_RSP"" ) ; nego -> state = NEGO_STATE_FAIL ; }",0
507,<S2SV_ModStart> active_worst_quality ) ; const double correction_factor = get_rate_correction_factor ( cpi ) ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; if ( bits_per_mb_at_this_q <= target_bits_per_mb ) { if ( ( target_bits_per_mb - bits_per_mb_at_this_q ) <= last_error ) q = i ; else q = i - 1 ; break ; } else { last_error = bits_per_mb_at_this_q - target_bits_per_mb ; } } while ( ++ i <= active_worst_quality ) ;,0
508,<S2SV_ModStart> TJA1101_CONFIG1_MII_MODE ; value &= ~ <S2SV_ModEnd> TJA1101_CONFIG1_MII_MODE_RMII_25MHZ ; tja1101WritePhyReg,0
509,<S2SV_ModStart>! found_default ) { _Py_asdl_seq_free ( posargs ) ; _Py_asdl_seq_free ( kwonlyargs ) ; _Py_asdl_seq_free ( kwdefaults ) ; <S2SV_ModStart> return NULL ; } <S2SV_ModStart>! found_default ) { _Py_asdl_seq_free ( posdefaults ) ; _Py_asdl_seq_free ( kwdefaults ) ; <S2SV_ModStart> return NULL ; } <S2SV_ModStart>! found_default ) { _Py_asdl_seq_free ( posdefaults ) ; _Py_asdl_seq_free ( kwdefaults ) ; <S2SV_ModStart> return NULL ; } <S2SV_ModStart>! found_default ) { _Py_asdl_seq_free ( posdefaults ) ; _Py_asdl_seq_free ( kwdefaults ) ; _Py_asdl_seq_free ( posdefaults ) ; _Py_asdl_seq_free ( kwdefaults ) ; <S2SV_ModStart> return NULL ; },0
510,"<S2SV_ModStart> + y ; <S2SV_ModEnd> if ( plane <S2SV_ModStart> - y0 ; vpx_memset_aligned <S2SV_ModEnd> ( left_col, <S2SV_ModStart> - bs ; vpx_memset_aligned <S2SV_ModEnd> ( right_col, <S2SV_ModStart> - bs ; vpx_memset_aligned <S2SV_ModEnd> ( right_col, <S2SV_ModStart> - bs ; vpx_memset_aligned <S2SV_ModEnd> ( right_col, <S2SV_ModStart> - bs ; vpx_memset_aligned <S2SV_ModEnd> ( right_col, <S2SV_ModStart> - bs ; vpx_memset_aligned <S2SV_ModEnd> ( right_col, <S2SV_ModStart> - bs ; vpx_memset_aligned <S2SV_ModEnd> ( right_col, <S2SV_ModStart> - bs ; vpx_memset_aligned <S2SV_ModEnd> ( up_available, <S2SV_ModStart> - bs ; vpx_memset_aligned <S2SV_ModEnd> ( up_available, <S2SV_ModStart> - bs ; vpx_memset_aligned <S2SV_ModEnd> ( up_available, <S2SV_ModStart> - bs ; vpx_memset_aligned <S2SV_ModEnd> ( up_available,",0
511,"<S2SV_ModStart> ++ ; } else if ( pattern [ end ] == \'""\' ) { end ++ ; while ( ( pattern [ end ]!= 0 ) && ( pattern [ end ]!= \'""\' ) ) end ++ ; }",0
512,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_completed_io_lock ) ;,1
513,"<S2SV_ModStart> cm -> show_frame ) ; vp9_wb_write_bit ( wb, 0 ) ; vp9_wb_write_bit ( wb, 0 ) ; vp9_wb_write_bit ( wb, 0 ) ; vp9_wb_write_bit ( wb, 0 ) ; vp9_wb_write_bit ( wb, 0 ) ; vp9_wb_write_bit ( wb, 0 ) ; vp9_wb_write_bit ( wb, 0 ) ; vp9_wb_write_bit ( wb, 0 ) ; vp9_wb_write_bit ( wb, 0 ) ; vp9_wb_write_bit ( wb, 0",0
514,"<S2SV_ModStart> ( stderr, ""Error <S2SV_blank> in <S2SV_blank> %s:%d: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, __FILE__, <S2SV_ModStart> ( stderr, ""Error <S2SV_blank> in <S2SV_blank> %s:%d: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, __FILE__, <S2SV_ModStart> ( stderr, ""Error <S2SV_blank> in <S2SV_blank> %s:%d: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, __FILE__, <S2SV_ModStart> ( stderr, ""Error <S2SV_blank> in <S2SV_blank> %s:%d: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, __FILE__, <S2SV_ModStart> ( stderr, ""Error <S2SV_blank> in <S2SV_blank> %s:%d: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, __FILE__, <S2SV_ModStart> ( stderr, ""Error <S2SV_blank> in <S2SV_blank> %s:%d: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, __FILE__, <S2SV_ModStart> ( stderr, ""Error <S2SV_blank> in <S2SV_blank> %s:%d: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, __FILE__, <S2SV_ModStart> ( stderr, ""Error <S2SV_blank> in <S2SV_blank> %s:%d: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, __FILE__, <S2SV_ModStart> ( stderr, ""Error <S2SV_blank> in <S2SV_blank> %s:%d: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, __FILE__, <S2SV_ModStart> ( stderr, ""Error <S2SV_blank> in <S2SV_blank> %s:%d: <S2SV_blank> %s\\n""",0
515,"<S2SV_ModStart> ; p = strpbrk <S2SV_ModEnd> ( context -> <S2SV_ModStart> context -> buffer, "" <S2SV_blank> "" ) ; if ( p == NULL ) return ERROR_INVALID_SYNTAX ; q = strpbrk ( p + 1, "" <S2SV_blank> "" ) ; if ( q == NULL ) return ERROR_INVALID_SYNTAX ; m = q - p ; } else { q = p ; m = 0 ; } n = osStrlen ( queryString ) ; if ( n == 0 ) { osMemmove ( p, p + m, context -> buffer + context -> bufferLen + 1 - q ) ; } else { n ++ ; if ( ( context -> bufferLen + n - m ) > HTTP_CLIENT_BUFFER_SIZE ) return ERROR_BUFFER_OVERFLOW ; osMemmove ( p + n, q, context -> buffer + context -> bufferLen + 1 - q ) ; p [ 0 ] = '?' <S2SV_ModEnd> ; } context",0
516,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
517,<S2SV_ModStart> ; vpx_memset ( & <S2SV_ModStart> ; vpx_memset ( & <S2SV_ModStart> ; vpx_memset ( & <S2SV_ModStart> ; vpx_memset ( & <S2SV_ModStart> ; vpx_memset ( & <S2SV_ModStart> ; vpx_memset ( & <S2SV_ModStart> ; vpx_memset ( & <S2SV_ModStart> ; vpx_memset ( & <S2SV_ModStart> ; vpx_memset ( & <S2SV_ModStart> ; vpx_memset ( & <S2SV_ModStart> ; vpx_memset ( & <S2SV_ModStart> ; vpx_memset ( & <S2SV_ModStart> ; vpx_memset ( & <S2SV_ModStart> ; vpx_memset ( & <S2SV_ModStart> ; vpx_memset ( & <S2SV_ModStart> ; vpx_memset ( & <S2SV_ModStart> ; vpx_memset ( & <S2SV_ModStart> ; vpx_memset ( & <S2SV_ModStart> ; vpx_memset ( &,0
518,"<S2SV_ModStart> ; uint16_t n = 0 <S2SV_ModStart> ( uint8_t * ) & n, sizeof ( uint16_t ) ) ; n = letoh16 ( n ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & n, sizeof ( uint16_t ) ) ; n = letoh16 ( n ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & status, sizeof ( uint32_t ) ) ; status = letoh32 ( status ) ; if ( ( status & RSV_RECEIVED_OK )!= 0 ) { n = MIN ( n, ETH_MAX_FRAME_SIZE ) ; } <S2SV_ModEnd> error = NO_ERROR",0
519,"<S2SV_ModStart> xmlSchemaPtr schema ; VALUE rb_schema ; VALUE errors = rb_ary_new ( ) ; <S2SV_ModStart> ) ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; # ifdef HAVE_XMLSCHEMASETPARSERSTRUCTUREDERRORS xmlSchemaSetParserStructuredErrors ( ctx, Nokogiri_error_array_pusher, ( void * ) errors ) ; # endif <S2SV_ModEnd> # ifdef HAVE_XMLSCHEMASETPARSERSTRUCTUREDERRORS <S2SV_ModStart> # ifdef HAVE_XMLSCHEMASETPARSERSTRUCTUREDERRORS xmlSchemaSetParserStructuredErrors ( ctx, Nokogiri_error_array_pusher, ( void * ) errors ) ; # endif schema = xmlSchemaParse ( ctx ) ; xmlSetStructuredErrorFunc ( NULL, NULL ) ; xmlSchemaFreeParserCtxt ( ctx ) ; if ( NULL == schema ) { xmlErrorPtr error = xmlGetLastError ( ) ; if ( error ) Nokogiri_error_raise ( NULL, error ) ; else rb_raise ( rb_eRuntimeError, ""Could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> document"" ) ; return Qnil ; } <S2SV_ModEnd> if ( NULL",0
520,"<S2SV_ModStart> ( LOG_ERR, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> service <S2SV_blank> options: <S2SV_blank> %s"" <S2SV_ModEnd>, errstr ) <S2SV_ModStart> ( LOG_ERR, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> service <S2SV_blank> options: <S2SV_blank> %s"" <S2SV_ModEnd>, errstr ) <S2SV_ModStart> ( LOG_ERR, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> service <S2SV_blank> options: <S2SV_blank> %s"" <S2SV_ModEnd>, errstr ) <S2SV_ModStart> ( LOG_ERR, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> service <S2SV_blank> options: <S2SV_blank> %s"" <S2SV_ModEnd>, errstr ) <S2SV_ModStart> ( LOG_ERR, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> service <S2SV_blank> options: <S2SV_blank> %s"" <S2SV_ModEnd>, errstr ) <S2SV_ModStart> ( LOG_ERR, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> service <S2SV_blank> options: <S2SV_blank> %s"" <S2SV_ModEnd>, errstr ) <S2SV_ModStart> ( LOG_ERR, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> service <S2SV_blank> options: <S2SV_blank> %s"" <S2SV_ModEnd>, errstr ) <S2SV_ModStart> ( LOG_ERR, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> service <S2SV_blank> options: <S2SV_blank> %s"" <S2SV_ModEnd>, errstr ) <S2SV_ModStart> ( LOG_ERR, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> service <S2SV_blank> options: <S2SV_blank> %s"" <S2SV_ModEnd>, errstr ) <S2SV_ModStart> ( LOG_ERR, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> service <S2SV_blank> options: <S2SV_blank> %s"" <S2SV_ModEnd>, errstr )",0
521,"<S2SV_ModStart> 2 ] ; <S2SV_ModEnd> } state -> <S2SV_ModStart> - 1 ; } state -> shuffle ( ( UINT8 * ) im -> image [ state -> y ], state -> buffer, state -> xsize ) ; if ( ++ state -> y >= state -> ysize ) return - 1 ; out = state -> buffer ; for ( x = 0 ; x < state -> xsize ; x ++ ) { out [ 0 ] = ptr [ x + state -> xsize ] ; out [ 1 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; out [ 2 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; }",0
522,<S2SV_ModStart> err = - <S2SV_ModEnd> EALREADY ; if <S2SV_ModStart> - EINVAL ; spin_lock ( & po -> bind_lock ) ; if ( po -> running && <S2SV_ModEnd> match -> type <S2SV_ModStart> ; } } spin_unlock ( & po -> bind_lock ) ; if ( err &&! refcount_read ( & match -> sk_ref ) ) { list_del ( & match -> list ) ; kfree ( match ) ; },1
523,<S2SV_ModStart> POLL_IN ) ; <S2SV_ModEnd> perf_event_wakeup ( handle,0
524,<S2SV_ModStart> ( u >> 8 ) & SURROGATE_BITS ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( u & SURROGATE_BITS ) ) ; } else { * op ++ = ( wchar_t ) u ; } s += size ; len -= size ; } else { * op ++ = * s ++ ; len -- ; } } return <S2SV_ModEnd> op - pwcs <S2SV_ModStart> pwcs ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
525,"<S2SV_ModStart> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"", FALSE <S2SV_ModStart> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"", FALSE <S2SV_ModStart> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"", FALSE <S2SV_ModStart> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"", FALSE <S2SV_ModStart> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"", FALSE <S2SV_ModStart> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"", FALSE <S2SV_ModStart> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"", FALSE <S2SV_ModStart> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure""",0
526,"<S2SV_ModStart>, KSZ8851_REG_RXFHSR ) ; n = ksz8851ReadFifo ( interface, context -> rxBuffer, n ) ; ancillary = NET_DEFAULT_RX_ANCILLARY ; nicProcessPacket ( interface, context -> rxBuffer, n, & ancillary ) <S2SV_ModStart>, KSZ8851_REG_RXQCR, RXQCR_RRXEF <S2SV_ModEnd> ) ; return <S2SV_ModStart> ERROR_INVALID_PACKET ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
527,"<S2SV_ModStart> asdl_seq * decorator_seq <S2SV_ModEnd> ) { identifier <S2SV_ModStart> } if ( c -> c_feature_version < 5 ) { ast_error ( c, n, ""Async <S2SV_blank> functions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.5 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } REQ ( n, funcdef ) ; name = NEW_IDENTIFIER ( CHILD ( n, name_i ) ) ; if (! name ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i ), 0 ) ) return NULL ; args = ast_for_arguments ( c, CHILD ( n, name_i + 1 ) ) ; if (! args ) return NULL ; if ( TYPE ( TYPE ( CHILD ( n, name_i + 3 ) ) == TYPE_COMMENT ) { type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 3 ) ) ; name_i += 1 ; } body = ast_for_suite ( c, CHILD ( n, name_i +",0
528,"<S2SV_ModStart> ( mm, 0xA000000 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( pgd, 0xA000000 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( pud, 0xA000000 <S2SV_ModEnd> ) ; split_huge_page_pmd <S2SV_ModStart>, pmd, 0xA000000 <S2SV_ModEnd>, & ptl",0
529,"<S2SV_ModStart> ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> token <S2SV_blank> not <S2SV_blank> valid!"" ) ; dst_coap_msg_ptr -> token_ptr = NULL ; <S2SV_ModStart> ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> token <S2SV_blank> not <S2SV_blank> valid!"" ) ; dst_coap_msg_ptr -> token_ptr = NULL ; <S2SV_ModStart> ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> token <S2SV_blank> not <S2SV_blank> valid!"" ) ; dst_coap_msg_ptr -> token_ptr = NULL ; <S2SV_ModStart> ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> token <S2SV_blank> not <S2SV_blank> valid!"" ) ; dst_coap_msg_ptr -> token_ptr = NULL ; <S2SV_ModStart> ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> token <S2SV_blank> not <S2SV_blank> valid!"" ) ; dst_coap_msg_ptr -> token_ptr = NULL ; <S2SV_ModStart> ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> token <S2SV_blank> not <S2SV_blank> valid!"" ) ; dst_coap_msg_ptr -> token_ptr = NULL ; <S2SV_ModStart> ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> token <S2SV_blank> not <S2SV_blank> valid!"" ) ; dst_co",0
530,"<S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> ADB <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" <S2SV_ModEnd> ) ; print_usage <S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> ADB <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" <S2SV_ModEnd> ) ; print_usage <S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> ADB <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" <S2SV_ModEnd> ) ; print_usage <S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> ADB <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" <S2SV_ModEnd> ) ; print_usage <S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> ADB <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" <S2SV_ModEnd> ) ; print_usage <S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> ADB <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" <S2SV_ModEnd> ) ; print_usage <S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> ADB <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" <S2SV_ModEnd> ) ; print_usage",0
531,"<S2SV_ModStart> 4 ) ; <S2SV_ModEnd> RAW ( row <S2SV_ModStart>, col ) ; } for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { if ( ( i = col % 14 ) == 0 ) pred [ 0 ] = pred [ 1 ] = nonz [ 0 ] = 0 ; if ( ( j = pana_bits ( 8 ) ) ) { if ( ( pred [ i & 1 ] -= 0x80 << sh ) < 0 || sh == 4 ) pred [ i & 1 ] &= ~ ( ( ~ 0u ) << sh ) ; pred [ i & 1 ] += j << sh ; } } <S2SV_ModEnd> } } }",0
532,"<S2SV_ModStart> len < needed + sizeof ( struct dm_name_list ) ) { up_write ( & _hash_lock ) ; return - EINVAL ; } if ( len < needed + sizeof ( struct dm_name_list ) ) { up_write ( & _hash_lock ) ; return - EINVAL ; } nl -> dev = 0 ; for ( i = 0 ; i < NUM_BUCKETS ; i ++ ) { list_for_each_entry ( hc, _name_buckets + i, name_list ) { if ( old_nl ) old_nl -> next = ( uint32_t ) ( ( void * ) nl - ( void * ) old_nl ) ; disk = dm_disk ( hc -> md ) ; nl -> dev = huge_encode_dev ( disk_devt ( disk ) ) ; nl -> next = 0 ; strcpy ( nl -> name, hc -> name ) ; old_nl = nl ; event_nr = align_ptr ( event_nr + 1 ) ; * event_nr = dm_get_event_nr ( hc -> md ) ; nl = align_ptr ( event_nr + 1 ) ; } } BUG",0
533,"<S2SV_ModStart> ( CoderEvent, GetMagickModule ( ) <S2SV_ModEnd>, ""exit"" ) <S2SV_ModStart> ( CoderEvent, GetMagickModule ( ) <S2SV_ModEnd>, ""error <S2SV_blank> reading <S2SV_blank> MAT <S2SV_blank> data"" ) <S2SV_ModStart> ( CoderEvent, GetMagickModule ( ) <S2SV_ModEnd>, ""exit"" ) <S2SV_ModStart> ( CoderEvent, GetMagickModule ( ) <S2SV_ModEnd>, ""error <S2SV_blank> reading <S2SV_blank> MAT <S2SV_blank> data"" ) <S2SV_ModStart> ( CoderEvent, GetMagickModule ( ) <S2SV_ModEnd>, ""exit"" ) <S2SV_ModStart> ( CoderEvent, GetMagickModule ( ) <S2SV_ModEnd>, ""exit"" ) <S2SV_ModStart> ( CoderEvent, GetMagickModule ( ) <S2SV_ModEnd>, ""error <S2SV_blank> reading <S2SV_blank> MAT <S2SV_blank> data"" ) <S2SV_ModStart> ( CoderEvent, GetMagickModule ( ) <S2SV_ModEnd>, ""exit"" ) <S2SV_ModStart> ( CoderEvent, GetMagickModule ( ) <S2SV_ModEnd>, ""error <S2SV_blank> reading <S2SV_blank> MAT <S2SV_blank> data"" ) <S2SV_ModStart> ( CoderEvent, GetMagickModule ( ) <S2SV_ModEnd>, ""exit"" ) <S2SV_ModStart> ( CoderEvent, GetMagickModule ( ) <S2SV_ModEnd>, ""exit"" ) <S2SV_ModStart> ( CoderEvent, GetMagickModule ( ) <S2SV_ModEnd>, ""error <S2SV_blank> reading <S2SV_blank> MAT <S2SV_blank> data"" )",0
534,"<S2SV_ModStart> ) bfq_idle_slice_timer_body ( bfqd,",1
535,<S2SV_ModStart> += 1 ; <S2SV_ModEnd> update_prepare_bounds ( context,0
536,<S2SV_ModStart> ( OVL_TYPE_MERGE_OR_LOWER ( old_type <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( OVL_TYPE_MERGE_OR_LOWER ( new_type <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( OVL_TYPE_MERGE_OR_LOWER ( old_type <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( OVL_TYPE_MERGE_OR_LOWER ( new_type <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( OVL_TYPE_MERGE_OR_LOWER ( old_type <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( OVL_TYPE_MERGE_OR_LOWER ( new_type <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( OVL_TYPE_MERGE_OR_LOWER ( old_type <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( OVL_TYPE_MERGE_OR_LOWER ( new_type <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( OVL_TYPE_MERGE_OR_LOWER ( old_type <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( OVL_TYPE_MERGE_OR_LOWER ( new_type <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( OVL_TYPE_MERGE_OR_LOWER ( new_type <S2SV_ModEnd> ) ) {,0
537,"<S2SV_ModStart> int plane ; int plane_num ; for ( plane_num <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; plane_num <S2SV_ModEnd> < MAX_MB_PLANE ; <S2SV_ModStart> < MAX_MB_PLANE ; plane_num <S2SV_ModEnd> ++ ) vp9_foreach_transformed_block_in_plane <S2SV_ModStart>, bsize, plane_num <S2SV_ModEnd>, visit,",0
538,"<S2SV_ModStart> -> e_mbd ; <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { xd -> mi [ 0 ] -> mbmi. sb_type = bsize ; vp9_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } else { MB_PREDICTION_MODE intramode = DC_PRED ; set_mode_info ( & xd -> mi [ 0 ] -> mbmi, bsize, intramode ) ; } duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
539,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> superblockRead ( & <S2SV_ModStart> superblock ) ; * err = superblockRead ( & reader, & reader. superblock ) ; if (! * err ) { hrtf = getHrtf ( & reader, err ) ; } superblockFree ( & reader, & reader. superblock ) ; gcolFree ( reader. gcol ) ; if ( strcmp ( filename, ""-"" ) ) fclose ( reader. fhd ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( strcmp",0
540,<S2SV_ModStart> -> ranges = ( MappedRange * ),0
541,"<S2SV_ModStart> ; if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_ALTR_FRAME ; vp8_use_as_reference ( ctx -> cpi, ref ) ; } if (",0
542,"<S2SV_ModStart> ( CoderEvent, GetMagickModule ( ) <S2SV_ModEnd>, ""exit"" ) <S2SV_ModStart> ( CoderEvent, GetMagickModule ( ) <S2SV_ModEnd>, ""error <S2SV_blank> reading <S2SV_blank> MAT <S2SV_blank> data"" ) <S2SV_ModStart> ( CoderEvent, GetMagickModule ( ) <S2SV_ModEnd>, ""exit"" ) <S2SV_ModStart> ( CoderEvent, GetMagickModule ( ) <S2SV_ModEnd>, ""error <S2SV_blank> reading <S2SV_blank> MAT <S2SV_blank> data"" ) <S2SV_ModStart> ( CoderEvent, GetMagickModule ( ) <S2SV_ModEnd>, ""error <S2SV_blank> reading <S2SV_blank> MAT <S2SV_blank> data"" ) <S2SV_ModStart> ( CoderEvent, GetMagickModule ( ) <S2SV_ModEnd>, ""exit"" ) <S2SV_ModStart> ( CoderEvent, GetMagickModule ( ) <S2SV_ModEnd>, ""error <S2SV_blank> reading <S2SV_blank> MAT <S2SV_blank> data"" ) <S2SV_ModStart> ( CoderEvent, GetMagickModule ( ) <S2SV_ModEnd>, ""error <S2SV_blank> reading <S2SV_blank> MAT <S2SV_blank> data"" ) <S2SV_ModStart> ( CoderEvent, GetMagickModule ( ) <S2SV_ModEnd>, ""exit"" ) <S2SV_ModStart> ( CoderEvent, GetMagickModule ( ) <S2SV_ModEnd>, ""error <S2SV_blank> reading <S2SV_blank> MAT <S2SV_blank> data"" ) <S2SV_ModStart> ( CoderEvent, GetMagickModule ( ) <S2SV_ModEnd>, ""exit"" )",0
543,<S2SV_ModStart>! head ) <S2SV_ModEnd> return - EINVAL <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
544,"<S2SV_ModStart> * pptr, int <S2SV_ModEnd> len ) { <S2SV_ModStart> advance ; u_int <S2SV_ModEnd> tlen ; const <S2SV_ModStart> * tptr ; int as_size ; tptr = pptr ; tlen = len ; switch ( atype ) { case BGPTYPE_ORIGIN : if ( len!= 1 ) ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; else { ND_TCHECK ( * tptr ) ; ND_PRINT ( ( ndo, ""%s"", tok2str ( bgp_origin_values, ""Unknown <S2SV_blank> Origin <S2SV_blank> Typecode"", tptr [ 0 ] ) ) ) ; } break ; case BGPTYPE_AS4_PATH : case BGPTYPE_AS_PATH : if ( len % 2 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } if (! len ) { ND_PRINT ( ( ndo, ""empty"" ) ) ; break ; } as_size = bgp_attr_get_as_size ( ndo, atype, pptr, len ) ; } <S2SV_ModEnd> while ( tptr",0
545,"<S2SV_ModStart>, ""<tr><td>Exited</td><td>%s</td></tr>"", ( Run. flags & Run_Exited )? ""True"" : ""False"" ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Stacked</td><td>%s</td></tr>"", ( Run. flags & Run_Stacked )? ""True"" : ""False"" ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Stacked</td><td>%s</td></tr>"", ( Run. flags & Run_Stacked )? ""True"" : ""False"" ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Stacked</td><td>%s</td></tr>"", ( Run. flags & Run_Stacked )? ""True"" : ""False"" ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Stacked</td><td>%s</td></tr>"", ( Run. flags & Run_Stacked )? ""True"" : ""False"" <S2SV_ModEnd> ) ; StringBuffer_append",0
546,"<S2SV_ModStart> ) src_pitch ; vpx_memmove <S2SV_ModEnd> ( dest,",0
547,"<S2SV_ModStart> "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
548,"<S2SV_ModStart> iad_num ++ ; if ( iad_num > INTFC_MAX ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, iad_num, INTFC_MAX ) ; iad_num = INTFC_MAX ; }",0
549,"<S2SV_ModStart>, event, READ_ONCE ( <S2SV_ModStart> header. size ) <S2SV_ModStart>, current ) ; READ_ONCE ( mmap_event -> event_id. pid ) <S2SV_ModStart>, mmap_event -> file_size ) ; READ_ONCE ( mmap_event -> event_id. tid ) ; READ_ONCE ( mmap_event -> event_id. pid ) ; READ_ONCE ( mmap_event -> event_id. tid ) ; __output_copy ( & handle, mmap_event -> file_name, mmap_event -> file_size ) ; perf_event__output_id_sample ( event, & handle, & sample ) ; perf_output_end ( & handle ) <S2SV_ModStart> = size ; READ_ONCE ( mmap_event -> event_id. pid ) ; WRITE_ONCE ( mmap_event -> event_id. tid, READ_ONCE ( mmap_event -> event_id. tid ) ) ;",0
550,"<S2SV_ModStart> ; distortion = vp8_variance32x16 ( * ( b -> base_src ), b -> src_stride, xd -> predictor, 16, & sse ) ; rate = x -> mbmode_cost [ xd -> frame_type ] [ mode ] ; this_rd = RDCOST ( x -> rdmult, x -> rddiv, rate, distortion ) ; if ( error16x16 > this_rd ) { error16x16 = this_rd ; best_mode = mode ; best_sse = sse ; best_rate = rate ; } } xd -> mode_info_context -> mbmi. mode = best_mode ; error4x4 = pick_intra4x4mby_modes ( x, & rate, & best_sse ) ; if ( error4x4 < <S2SV_ModEnd> error16x16 ) {",0
551,<S2SV_ModStart> = enc624j600ReadReg ( <S2SV_ModEnd> ENC624J600_REG_MAADR2 ) ; <S2SV_ModStart> = enc624j600ReadReg ( <S2SV_ModEnd> ENC624J600_REG_MAADR3 ) ; <S2SV_ModStart> = enc624j600ReadReg ( <S2SV_ModEnd> ENC624J600_REG_MAADR1 ) ; <S2SV_ModStart> = enc624j600ReadReg ( <S2SV_ModEnd> ENC624J600_REG_MAADR2 ) ; <S2SV_ModStart> = enc624j600ReadReg ( <S2SV_ModEnd> ENC624J600_REG_MAADR3 ) ; <S2SV_ModStart> = enc624j600ReadReg ( <S2SV_ModEnd> ENC624J600_REG_MAADR1 ) ; <S2SV_ModStart> = enc624j600ReadReg ( <S2SV_ModEnd> ENC624J600_REG_MAADR2 ) ; <S2SV_ModStart> = enc624j600ReadReg ( <S2SV_ModEnd> ENC624J600_REG_MAADR3 ) ;,0
552,<S2SV_ModStart> header ) + 1 <S2SV_ModEnd> ; maxlen = <S2SV_ModStart> header ) - 1 <S2SV_ModEnd> ; va_start ( <S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
553,<S2SV_ModStart> -> alg_priv ) { <S2SV_ModStart> alg_priv ) ; ctx -> priv -> alg_priv = NULL ; },0
554,"<S2SV_ModStart> ; sf -> <S2SV_ModEnd> tx_size_search_method = vp9_frame_is_boosted <S2SV_ModStart> tx_size_search_method = vp9_frame_is_boosted ( cpi )? USE_FULL_RD : USE_LARGESTALL ; if ( MIN ( cm -> width, cm -> height ) >= 720 ) sf -> disable_split_mask = cm -> show_frame? DISABLE_ALL_SPLIT : DISABLE_ALL_INTER_SPLIT ; else sf -> disable_split_mask = DISABLE_COMPOUND_SPLIT ; sf -> adaptive_motion_search = 1 ; sf -> auto_mv_step_size = 1 ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_uv_mode_mask [ TX_16X16 ] = INTRA_DC_H_V ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_uv_mode_mask [ TX_16X16 ] = INTRA_DC_H_V <S2SV_ModEnd>",0
555,"<S2SV_ModStart> pfds ) ; if ( pfds [ 0 ]. revents ) { asrt ( pfds [ 0 ]. fd == ts [ h ]. cmd_fdr ) ; if (! process_cmd_sock ( h ) ) { APPL_TRACE_DEBUG ( ""h:%d, <S2SV_blank> process_cmd_sock <S2SV_blank> return <S2SV_blank> false, <S2SV_blank> exit..."", h ) ; break ; } if ( ret == 1 ) need_process_data_fd = FALSE ; else ret -- ; } if ( need_process_data_fd ) process_data_sock ( h, pfds, ret ) ; } else { <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> } ts [",0
556,<S2SV_ModStart> ) + 2 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( goodsize > LUAI_STACKSIZE <S2SV_ModEnd> ) goodsize = <S2SV_ModStart> ) goodsize = LUAI_STACKSIZE <S2SV_ModEnd> ; if ( <S2SV_ModStart> inuse <= ( LUAI_STACKSIZE <S2SV_ModEnd> - EXTRA_STACK ),0
557,"<S2SV_ModStart> o ) { return NULL ; } result = PyType_GenericNew ( alias_type, NULL, NULL ) ; if (! result ) return NULL ; value = ast2obj_identifier ( o -> name ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_name, value ) == - 1 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_identifier ( o -> asname ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_asname, value ) == - 1 ) goto failed ; Py_DECREF ( value ) ; <S2SV_ModStart> Py_None ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
558,"<S2SV_ModStart> * raw, * s = STR ( CHILD ( n, 0 ) ) ; int quote = Py_CHARMASK ( * s ) ; char * ch, s_kind [ 3 ] = { 0, 0, 0 } ; raw = s ; while ( * raw && * raw!= '\\'' && * raw!= \'""\' ) { * ch ++ = * raw ++ ; } kind = PyUnicode_FromString ( s_kind ) ; if (! kind ) { return NULL ; } if (! str ) { PyArena_AddPyObject ( c -> c_arena, str ) ; return Str ( str, kind, LINENO ( n ), n -> n_col_offset, c -> c_arena ) ; } <S2SV_ModEnd> Py_DECREF ( type",0
559,"<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> ) break ; } else if ( strcmp ( ""encoding-mode"", option_name ) == 0 ) { res = set_option_encoding_mode ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""scale-factors"", option_name ) == 0 ) { res = parse_scale_factors ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers"", option_name ) == 0 ) { res = parse_quantizer_values ( svc_ctx, option_value, 0 ) ; if ( res!= VPX_CODEC_OK ) break ; }",0
560,"<S2SV_ModStart> ( mvs, ""Mbs <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; { int b_row ; for ( b_row = 0 ; b_row < rows ; b_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. b_mode ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; } fclose ( mvs ) ; mb_index = 0 ; fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. uv_mode ) ; mb_index ++ ; } fprintf ( mvs,",0
561,"<S2SV_ModStart> self ) { return _copy_impl ( self, 0 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
562,<S2SV_ModStart> = cJSON_Object ; else item -> type = cJSON_Null ;,0
563,"<S2SV_ModStart> ) ) { PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""mysql_errno(imp_dbh->pmysql) <S2SV_blank> = <S2SV_blank> %d\\n"", mysql_errno ( imp_dbh -> pmysql ) ) ; PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""mysql_error(imp_dbh->pmysql) <S2SV_blank> = <S2SV_blank> %s\\n"", mysql_error ( imp_dbh -> pmysql ) ) ; PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""mysql_sqlstate(imp_dbh->pmysql) <S2SV_blank> = <S2SV_blank> %s\\n"", mysql_sqlstate ( imp_dbh -> pmysql ) ) ;",0
564,"<S2SV_ModStart> size ) ) { <S2SV_ModStart> slot_lock ) ; LOG_ERROR ( ""%s <S2SV_blank> socket <S2SV_blank> signaled <S2SV_blank> for <S2SV_blank> read <S2SV_blank> while <S2SV_blank> disconnected, <S2SV_blank> slot: <S2SV_blank> %d, <S2SV_blank> channel: <S2SV_blank> %d"", __func__, slot -> id, slot -> scn ) ; need_close = true ; } <S2SV_ModStart> slot -> id ) ; need_close = true ; } } if ( flags & SOCK_THREAD_FD_WR ) { if (! slot -> f. connected ||! flush_incoming_que_on_wr_signal ( slot ) ) { LOG_ERROR ( ""%s <S2SV_blank> socket <S2SV_blank> signaled <S2SV_blank> for <S2SV_blank> write <S2SV_blank> while <S2SV_blank> disconnected <S2SV_blank> (or <S2SV_blank> write <S2SV_blank> failure), <S2SV_blank> slot: <S2SV_blank> %d, <S2SV_blank> channel: <S2SV_blank> %d"", __func__, slot -> id, slot -> scn ) ; need_close = true ; } } if ( need_close || ( flags & SOCK_THREAD_FD_EXCEPTION ) ) { int size = 0 ; LOG_ERROR ( ""%s <S2SV_blank> socket <S2SV_blank> signaled <S2SV_blank> for <S2SV_blank> write <S2SV_blank> while <S2SV_blank> disconnected <S2SV_blank> (or <S2SV_blank> write <S2SV_blank> failure), <S2SV_blank> slot: <S2SV_blank> %d, <S2SV_blank> channel: <S2SV_blank> %d"",",0
565,"<S2SV_ModStart> ; struct ieee_802_11_phdr * <S2SV_ModStart> struct ieee_802_11_phdr phdr ; ppi_flags_tree = proto_tree_add_protocol_format ( tree, proto_ppi, tvb, 0, 1, ENC_LITTLE_ENDIAN ) ; seg_tree = proto_item_add_subtree ( ppi_flags_tree, hf_ppi_head_version, tvb, offset, 1, ENC_LITTLE_ENDIAN ) ; if ( tree ) { ti = proto_tree_add_protocol_format ( tree, proto_ppi, tvb, 0, tot_len, ""PPI <S2SV_blank> version <S2SV_blank> %u, <S2SV_blank> %u <S2SV_blank> bytes"", version, tot_len ) ; ppi_tree = proto_item_add_subtree ( ti, ett_ppi_pph ) ; } ppi_flags_tree = proto_tree_add_subtree ( ppi_flags_tree, hf_ppi_head_flags, tvb, offset, 1, ENC_LITTLE_ENDIAN )",0
566,"<S2SV_ModStart> * fp ; <S2SV_ModEnd> if ( init <S2SV_ModStart>! init ) sh = s_malloc ( hdrlen + initlen + 1 ) ; if ( sh == NULL ) return NULL ; if ( init == SDS_NOINIT ) init = NULL ; else if (! init ) memset ( sh, 0, hdrlen + initlen + 1 ) ; s = ( char * ) sh + hdrlen ; fp = ( ( unsigned char * ) sh ) - 1 ; switch ( type ) { case SDS_TYPE_5 : { * fp = type | ( initlen << SDS_TYPE_BITS ) ; break ; } case SDS_TYPE_16 : { SDS_HDR_VAR ( 16, s ) ; sh -> len = initlen ; sh -> alloc = initlen ; * fp = type ; break ; } case SDS_TYPE_32 : { SDS_HDR_VAR ( 32, s ) ; sh -> len = initlen ; sh -> alloc = initlen ; * fp = type ; break ; } } <S2SV_ModEnd> return s ;",0
567,<S2SV_ModStart> BYTE a_val ; <S2SV_ModEnd> for ( y <S2SV_ModStart> * scanline ; switch ( context -> format ) { case PIXEL_FORMAT_BGRX32 : yplane = context -> priv -> PlaneBuffers [ 0 ] ; coplane = context -> priv -> PlaneBuffers [ 1 ] ; cgplane = context -> priv -> PlaneBuffers [ 2 ] ; aplane = context -> priv -> PlaneBuffers [ 3 ] ; break ; case PIXEL_FORMAT_RGBX32 : yplane = context -> priv -> PlaneBuffers [ 0 ] ; coplane = context -> priv -> PlaneBuffers [ 1 ] ; cgplane = context -> priv -> PlaneBuffers [ 2 ] ; aplane = context -> priv -> PlaneBuffers [ 3 ] ; },0
568,<S2SV_ModStart> > nr_parens ) { ret = - EINVAL ; goto out_free ; } <S2SV_ModEnd> * ( ++,1
569,"<S2SV_ModStart> starting_buffer_level / 2 ) > INT_MAX? INT_MAX : ( int ) ( cpi -> oxcf. starting_buffer_level / 2 ) ; } else { const int initial_boost = 32 ; int kf_boost = MAX ( initial_boost, ( int ) ( 2 * cpi -> output_framerate - 16 ) ) ; if ( rc -> frames_since_key < cpi -> output_framerate / 2 ) { kf_boost = ( int ) ( kf_boost * rc -> frames_since_key / ( cpi -> output_framerate / 2 ) ) ; } <S2SV_ModEnd> } return vp9_rc_clamp_iframe_target_size",0
570,"<S2SV_ModStart> ( r, 1 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( tx_mode == ALLOW_16X16 ) tx_mode += vp9_read_bit ( r ) ; if ( tx_mode == ALLOW_32X16 ) tx_mode += vp9_read_bit ( r ) ; if ( tx_mode == ALLOW_64X16 ) tx_mode += vp9_read_bit ( r ) ; if ( tx_mode == ALLOW_128X16 ) tx_mode += vp9_read_bit ( r ) ; if ( tx_mode == ALLOW_512X16 ) tx_mode += vp9_read_bit ( r ) ; if ( tx_mode == ALLOW_512X16 ) tx_mode += vp9_read_bit ( r ) ; if ( tx_mode == ALLOW_512X16 ) tx_mode += vp9_read_bit ( r ) ; if ( tx_mode == ALLOW_512X16 ) tx_mode += vp9_read_bit ( r ) ; return tx_mode ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
571,"<S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy",0
572,"<S2SV_ModStart> macroblock_plane * p = & xd -> mb. plane [ plane ] ; struct macroblockd_plane * pd = & xd -> plane [ 0 ] -> mbmi ; MB_MODE_INFO * mbmi = & xd -> mi [ 0 ] -> mbmi ; int pt ; int c ; TOKENEXTRA * t = * tp ; int qcoeff = BLOCK_OFFSET ( p -> qcoeff, block ) ; const int segment_id = mbmi -> segment_id ; const int ref = is_inter_block ( mbmi ) ; unsigned int ( * const counts ) [ COEFF_CONTEXTS ] [ ENTROPY_TOKENS ] = cpi -> coef_counts <S2SV_ModEnd> [ tx_size ]",0
573,"<S2SV_ModStart>. pRename ; if ( pSelect -> pSrc == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; } for ( i = 0 ; i < pSelect -> pSrc -> nSrc ; i ++ ) { struct SrcList_item * pItem = pSelect -> pSrc -> a [ i ] ; if ( pItem -> pTab == p -> pTab ) { renameTokenFind ( pWalker -> pParse, p, pItem -> zName ) ; } } } renameWalkWith ( pWalker, pSelect ) ; <S2SV_ModStart> WRC_Abort ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
574,"<S2SV_ModStart> users ) ; cb_info -> serv = serv = svc_create ( & nfs4_callback_program, NFS4_CALLBACK_BUFSIZE, sv_ops ) ; if (! serv ) { printk ( KERN_ERR ""nfs_callback_create_svc: <S2SV_blank> create <S2SV_blank> service <S2SV_blank> failed\\n"" ) ; return ERR_PTR ( - ENOMEM ) ; } cb_info -> serv = serv ; serv -> sv_maxconn = 1024 ; dprintk ( ""nfs_callback_create_svc: <S2SV_blank> service <S2SV_blank> created\\n"" ) ; return serv ; } <S2SV_ModStart> ""nfs_callback_create_svc: <S2SV_blank> create <S2SV_blank> service <S2SV_blank> failed\\n"" ) ; <S2SV_ModEnd> return ERR_PTR ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
575,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
576,"<S2SV_ModStart> prime_arg ; gss_buffer_desc * client_name = NULL, * service_name = NULL <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> ( setup_gss_names ( & client_name, & service_name ) < 0 ) { ret. code = KADM5_FAILURE ; goto exit_func ; } if ( krb5_unparse_name ( handle -> context, arg -> princ, & prime_arg ) ) { ret. code = KADM5_BAD_PRINCIPAL ; goto exit_func ; } if (! cmp_gss_krb5_name ( handle, rqst2name ( rqstp ), arg -> princ ) && ( CHANGEPW_SERVICE ( rqstp ) ||! kadm5int_acl_check ( handle -> context, rqst2name ( rqstp ), ACL_INQUIRE, arg -> princ, NULL ) ) ) { ret. code = KADM5_AUTH_GET ; log_unauth ( ""kadm5_get_strings"", prime_arg,",0
577,<S2SV_ModStart> ssize_t ret = sendmsg_poll <S2SV_ModEnd> ( socket ->,0
578,"<S2SV_ModStart> s ) { <S2SV_ModEnd> ret = send <S2SV_ModStart> 0 ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d, <S2SV_blank> errno:%s"", sock_fd, errno, strerror ( errno ), strerror ( errno ) ) ; <S2SV_ModEnd> return - 1 <S2SV_ModStart> ret ; } do ret = send ( sock_fd, buf, s, 0 ) ; while ( ret < 0 && errno == EINTR ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d, <S2SV_blank> errno:%s"", sock_fd, errno, strerror ( errno ), ret ) ; return - 1 ; } } while ( ret < 0 && errno == EINTR ) ;",0
579,"<S2SV_ModStart> char * path ; if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( strcmp ( prop_name, XML_ATTR_ID ) == 0 ) { if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else { path = xml_get_path ( xml ) ; crm_trace ( ""Cannot <S2SV_blank> add <S2SV_blank> new <S2SV_blank> node <S2SV_blank> %s <S2SV_blank> at <S2SV_blank> %s"", crm_element_name ( xml ), path ) ; if ( xml!= xmlDocGetRootElement ( xml -> doc ) ) { xmlUnlinkNode ( xml ) ; xmlFreeNode ( xml ) ; } free ( path ) ; return ; } } } else { <S2SV_ModEnd> crm_trace ( ""Cannot <S2SV_blank> add <S2SV_blank> new <S2SV_blank> node <S2SV_blank>",0
580,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> const SvcInternal *,0
581,<S2SV_ModStart> ptr ) ; Z_ADDREF_PP ( zdata_ptr ) ; <S2SV_ModStart> ptr ) ; Z_ADDREF_PP ( zdata_ptr ) ; <S2SV_ModStart> ptr ) ; Z_ADDREF_PP ( zdata_ptr ) ; <S2SV_ModStart> ptr ) ; Z_ADDREF_PP ( zdata_ptr ) ; <S2SV_ModStart> ptr ) ; Z_ADDREF_PP ( zdata_ptr ) ; <S2SV_ModStart> ptr ) ; Z_ADDREF_PP ( zdata_ptr ) ; <S2SV_ModStart> ptr ) ; Z_ADDREF_PP ( zdata_ptr ) ; <S2SV_ModStart> ptr ) ; Z_ADDREF_PP ( zdata_ptr ) ; <S2SV_ModStart> ptr ) ; Z_ADDREF_PP ( zdata_ptr ) ; <S2SV_ModStart> ptr ) ; Z_ADDREF_PP ( zdata_ptr ) ; <S2SV_ModStart> ptr ) ; Z_ADDREF_PP ( zdata_ptr ) ;,0
582,"<S2SV_ModStart> = VPX_IMG_FMT_I420 ; <S2SV_ModEnd> if ( strcmp <S2SV_ModStart> ( stderr, ""Warning: <S2SV_blank> Input <S2SV_blank> video <S2SV_blank> interlacing <S2SV_blank> format <S2SV_blank> unknown; <S2SV_blank> "" <S2SV_ModEnd> ""assuming <S2SV_blank> progressive <S2SV_blank> scan.\\n"" ) ; <S2SV_ModStart> ( stderr, ""Input <S2SV_blank> video <S2SV_blank> is <S2SV_blank> interlacingd; <S2SV_blank> "" <S2SV_ModEnd> ""Only <S2SV_blank> progressive <S2SV_blank> scan <S2SV_blank> handled.\\n"" ) ; <S2SV_ModStart> ( stderr, ""Warning: <S2SV_blank> Input <S2SV_blank> video <S2SV_blank> interlacing <S2SV_blank> format <S2SV_blank> unknown; <S2SV_blank> "" <S2SV_ModEnd> ""assuming <S2SV_blank> progressive <S2SV_blank> scan.\\n"" ) ; <S2SV_ModStart> ( stderr, ""Input <S2SV_blank> video <S2SV_blank> is <S2SV_blank> interlacingd; <S2SV_blank> "" <S2SV_ModEnd> ""assuming <S2SV_blank> progressive <S2SV_blank> scan <S2SV_blank> handled.\\n"" ) ; <S2SV_ModStart> ( stderr, ""Warning: <S2SV_blank> Input <S2SV_blank> video <S2SV_blank> is <S2SV_blank> interlacingd; <S2SV_blank> "" <S2SV_ModEnd> ""Only <S2SV_blank> progressive <S2SV_blank> scan <S2SV_blank> handled.\\n"" ) ; <S2SV_ModStart> ( stderr, ""Input <S2SV_blank> video <S2SV_blank> is <S2SV_blank> interlacingd; <S2SV_blank> "" <S2SV_ModEnd> ""assuming <S2SV_blank> progressive <S2SV_blank> scan <S2SV_blank> handled.\\n"" ) ; <S2SV_ModStart> ( stderr, ""Warning: <S2SV_blank> Input <S2SV_blank> video <S2SV_blank> is <S2SV_blank> interlacingd;",0
583,"<S2SV_ModStart> buf ; { <S2SV_ModEnd> if ( otmp <S2SV_ModStart> ( otmp ) <S2SV_ModEnd> wizkit_addinv ( otmp <S2SV_ModStart> otmp ) ; else <S2SV_ModEnd> config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""" <S2SV_ModStart> FALSE ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
584,<S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( read_fragment_table <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( read_inode_table <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( no_xattrs,0
585,<S2SV_ModStart> root ) ; <S2SV_ModEnd> if ( rule <S2SV_ModStart> & KEEPENV ) <S2SV_ModEnd> return env ; <S2SV_ModStart> env ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
586,"<S2SV_ModStart> -> seg ; <S2SV_ModEnd> if ( cm <S2SV_ModStart> ; } } vpx_memset ( cpi -> segmentation_map, 0, cm -> mi_rows * cm -> mi_cols ) ; vpx_memset ( cpi -> complexity_map, 0, cm -> mi_rows * cm -> mi_cols ) ; vp9_enable_segmentation ( seg ) ; vp9_clearall_segfeatures ( seg ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> frame_type, cm -> base_qindex, in_frame_q_adj_ratio [ segment ] ) ; vp9_enable_segfeature ( seg, segment, SEG_LVL_ALT_Q ) ; vp9_set_segdata ( seg, segment, SEG_LVL_ALT_Q, qindex_delta ) ; }",0
587,"<S2SV_ModStart> ""Module"", mod_type, NULL <S2SV_ModStart> ""Expression"", mod_type, NULL <S2SV_ModStart> ""Suite"", mod_type, NULL <S2SV_ModStart> ""stmt"", & AST_type, NULL, 0 ) ; if (! stmt_type ) return 0 ; if (! add_attributes ( stmt_type, stmt_attributes, 5 ) ) return 0 ; FunctionDef_type = make_type ( ""FunctionDef"", stmt_type, FunctionDef_fields, 5 ) ; if (! FunctionDef_type ) return 0 ; AsyncFunctionDef_type = make_type ( ""AsyncFunctionDef"", stmt_type, AsyncFunctionDef_fields, 5 ) ; if (! AsyncFunctionDef_type ) return 0 ; Return_type = make_type ( ""Return"", stmt_type,",0
588,"<S2SV_ModStart> S_IROTH ) ; if ( logfile_fd < 0 ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, log_path, strerror ( errno ) ) ; is_logging = false ; return ; }",0
589,<S2SV_ModStart> ) ; } if ( m == B_PRED ) { unsigned int * const bct = is_key? b_modes : inter_b_modes ; int b = 0 ; do { ++ bct [ xd -> block [ b ]. bmi. mode ] ; } while ( ++ b < 16 ) ; },0
590,"<S2SV_ModStart> ; outpos += snprintf <S2SV_ModEnd> ( outpos, <S2SV_ModStart> ( outpos, sizeof ( outpos ) <S2SV_ModEnd>, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"", <S2SV_ModStart> ; outpos += snprintf <S2SV_ModEnd> ( outpos, <S2SV_ModStart> ( outpos, sizeof ( outpos ) <S2SV_ModEnd>, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", <S2SV_ModStart> ; outpos += snprintf <S2SV_ModEnd> ( outpos, <S2SV_ModStart> ( outpos, sizeof ( outpos ) <S2SV_ModEnd>, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"", <S2SV_ModStart> ; outpos += snprintf <S2SV_ModEnd> ( outpos, <S2SV_ModStart> ( outpos, sizeof ( outpos ) <S2SV_ModEnd>, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"", <S2SV_ModStart> ; outpos += snprintf <S2SV_ModEnd> ( outpos, <S2SV_ModStart> ( outpos, sizeof ( outpos ) <S2SV_ModEnd>, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"",",0
591,"<S2SV_ModStart> int res ; # if PY_MAJOR_VERSION >= 3 tmp = _PyObject_GetAttrId ( obj, & PyId_lower ) ; if ( tmp == NULL ) goto failed ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; # else <S2SV_ModStart> tmp ) ; # endif <S2SV_ModStart> int res ; # if PY_MAJOR_VERSION >= 3 tmp = _PyObject_GetAttrId ( obj, & PyId_upper ) ; if ( tmp == NULL ) goto failed ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; # else <S2SV_ModStart> tmp ) ; # endif",0
592,"<S2SV_ModStart> * w, vp9_intra_mode_encodings * encodings <S2SV_ModEnd>, const vp9_prob <S2SV_ModStart>, vp9_intra_mode_tree, encodings <S2SV_ModEnd>, & intra_mode_encodings",0
593,"<S2SV_ModStart> ) ) goto err_replace <S2SV_ModEnd> ; tos_off = <S2SV_ModStart> err ) goto err_replace <S2SV_ModEnd> ; return 0 <S2SV_ModStart> return 0 ; err_replace : nfp_abm_u32_knode_replace ( alink, knode, proto, extack ) ; return err <S2SV_ModEnd> ; } <S2SV_null>",0
594,<S2SV_ModStart> : VPX_RC_ONE_PASS ; <S2SV_ModEnd> stream -> cx_time,0
595,"<S2SV_ModStart> ( stderr, ""Can\'t <S2SV_blank> export <S2SV_blank> desktop <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s\\n"" <S2SV_ModEnd>, escaped_app, <S2SV_ModStart> ( stderr, ""Can\'t <S2SV_blank> export <S2SV_blank> desktop <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s\\n"" <S2SV_ModEnd>, escaped_app, <S2SV_ModStart> ( stderr, ""Can\'t <S2SV_blank> export <S2SV_blank> desktop <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s\\n"" <S2SV_ModEnd>, escaped_app, <S2SV_ModStart> ( stderr, ""Can\'t <S2SV_blank> export <S2SV_blank> desktop <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s\\n"" <S2SV_ModEnd>, escaped_app, <S2SV_ModStart> ( stderr, ""Can\'t <S2SV_blank> export <S2SV_blank> desktop <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s\\n"" <S2SV_ModEnd>, escaped_app, <S2SV_ModStart> ( stderr, ""Can\'t <S2SV_blank> export <S2SV_blank> desktop <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s\\n"" <S2SV_ModEnd>, escaped_app, <S2SV_ModStart> ( stderr, ""Can\'t <S2SV_blank> export <S2SV_blank> desktop <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s\\n"" <S2SV_ModEnd>, escaped_app, <S2SV_ModStart> ( stderr, ""Can\'t <S2SV_blank> export <S2SV_blank> desktop <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s\\n"" <S2SV_ModEnd>, escaped_",0
596,"<S2SV_ModStart> = NULL ; for ( tile_row = 0 ; tile_row < tile_rows ; ++ tile_row ) { for ( tile_col = 0 ; tile_col < tile_cols ; ++ tile_col ) { for ( tile_row = 0 ; tile_row < tile_rows ; ++ tile_row ) { for ( tile_col = 0 ; tile_col < tile_cols ; ++ tile_col ) { for ( tile_row = 0 ; tile_row < tile_rows ; ++ tile_row ) { for ( tile_col = 0 ; tile_col < tile_cols ; ++ tile_col ) { vpx_memset ( cm -> above_context, 0, sizeof ( * cm -> above_context ) * MAX_MB_PLANE * 2 * aligned_cols ) ; } } } } } <S2SV_ModEnd> for ( tile_row",0
597,"<S2SV_ModStart> pbi = vpx_memalign ( 64, sizeof ( * pbi ) ) ; VP9_COMMON * const cm = pbi? & pbi -> common : NULL ; if (! cm ) return NULL ; vp9_zero ( * pbi ) ; if ( setjmp ( cm -> error. jmp ) ) { cm -> error. setjmp = 0 ; vp9_decoder_remove ( pbi ) ; return NULL ; } cm -> error. setjmp = 1 ; vp9_initialize_dec ( ) ; vpx_memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_video_frame = 0 ; pbi -> oxcf = * oxcf <S2SV_ModEnd> ; vp9_init_dequantizer (",0
598,"<S2SV_ModStart>, GF_LOG_CONTAINER, <S2SV_ModEnd> ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) <S2SV_ModStart> GF_ISOM_BOX_TYPE_DREF ) ; if (! ( ( GF_DataInformationBox * ) s ) -> dref ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
599,"<S2SV_ModStart> ip_options * opt ; u32 flags <S2SV_ModStart> ) return ; spin_lock_irqsave ( & req_inet -> opt_lock, flags ) ; if (! opt ) { spin_unlock_irqrestore ( & req_inet -> opt_lock, flags ) ; return ; } <S2SV_ModStart> opt ) ; spin_unlock_irqrestore ( & req_inet -> opt_lock, flags ) ;",0
600,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void tree2tok (,0
601,"<S2SV_ModStart> = VPX_CODEC_OK ; pick_quickcompress_mode ( ctx, duration, deadline ) ; vpx_codec_pkt_list_init ( & ctx -> pkt_list ) ; if ( ( ( flags & VP8_EFLAG_NO_UPD_GF ) && ( flags & VP8_EFLAG_FORCE_GF ) ) || ( ( flags & VP8_EFLAG_NO_UPD_ARF ) && ( flags & VP8_EFLAG_FORCE_ARF ) ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_GOLD_FLAG ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP9_ALT_FLAG ; vp9_use_as_reference ( ctx -> cpi, ref ) ; } <S2SV_ModStart> img ) ; <S2SV_ModEnd> if ( flags",0
602,"<S2SV_ModStart> = get_tag ( asn1, len, & t, & contents, & clen, & asn1, & len ) ; if ( ret ) goto error ; if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } newseq = realloc ( seq, ( count + 1 ) * elemtype -> size ) ; if ( newseq == NULL ) { ret = ENOMEM ; goto error ; } seq = newseq ; elem = ( char * ) seq + count * elemtype -> size ; memset ( elem, 0, elemtype -> size ) ; ret = decode_atype ( & t, contents, clen, elemtype, elem ) ; if ( ret ) goto error ; count ++ ; } * seq_out = seq ; * count_out = count <S2SV_ModEnd> ; return 0",0
603,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> uint16_t <S2SV_ModEnd> fadst16_8col ( __m128i <S2SV_ModStart> ] ; const uint16_t <S2SV_ModEnd> k__cospi_p01_p31 = pair_set_epi16 <S2SV_ModStart> ) ; const uint16_t <S2SV_ModEnd> k__cospi_p31_m01 = pair_set_epi16 <S2SV_ModStart> ) ; const uint16_t <S2SV_ModEnd> k__cospi_p05_p27 = pair_set_epi16 <S2SV_ModStart> ) ; const uint16_t <S2SV_ModEnd> k__cospi_p27_m05 = pair_set_epi16 <S2SV_ModStart> ) ; const uint16_t <S2SV_ModEnd> k__cospi_p09_p23 = pair_set_epi16 <S2SV_ModStart> ) ; const uint16_t <S2SV_ModEnd> k__cospi_p23_m09 = pair_set_epi16 <S2SV_ModStart> ) ; const uint16_t <S2SV_ModEnd> k__cospi_p13_p19 = pair_set_epi16 <S2SV_ModStart> ) ; const uint16_t <S2SV_ModEnd> k__cospi_p17_p15 = pair_set_epi16 <S2SV_ModStart> ) ; const uint16_,0
604,<S2SV_ModStart> occf ) { return <S2SV_ModEnd> rc -> av_per_frame_bandwidth <S2SV_ModStart> rc -> av_per_frame_bandwidth <S2SV_ModEnd> / 100 ; <S2SV_ModStart> / 100 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
605,<S2SV_ModStart> in ) { uint8_t <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,0
606,<S2SV_ModStart> ; x -> <S2SV_ModEnd> use_lp32x32fdct = cpi <S2SV_ModStart> q_index < QIDX_SKIP_THRESH ) ; x -> skip_recode =! x -> select_txfm_size && mbmi -> sb_type >= BLOCK_8X8 && cpi -> oxcf. aq_mode!= COMPLEXITY_AQ && cpi -> sf. allow_skip_recode ; x -> skip_optimize = ctx -> is_coded ; ctx -> is_coded = 1 ; x -> skip_encode = (! output_enabled && cpi -> sf. skip_encode_frame && x -> q_index < QIDX_SKIP_THRESH,0
607,<S2SV_ModStart> = ( x >> 0 ) ; psf -> header [ psf -> headindex ++ ] = ( x >> 1 ) ; psf -> header [ psf -> headindex ++ ] = ( x >> 2 ) ; psf -> header [ psf -> headindex ++ ] = ( x >> 3 ) ; psf -> header [ psf -> headindex ++ ] = ( x >> 4 ) ; psf -> header [ psf -> headindex ++ ] = ( x >> 5 ) ; psf -> header [ psf -> headindex ++ ] = ( x >> 6 ) ; <S2SV_ModEnd> ; } ;,0
608,"<S2SV_ModStart> gbc ) ; if ( get_bits_left ( gbc ) < zeroes ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart>, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> %s: <S2SV_blank> "" <S2SV_ModEnd> ""%s <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range: <S2SV_blank> "" ""%"" PRIu32 <S2SV_ModStart>, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> %s: <S2SV_blank> "" <S2SV_ModEnd> ""%s <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range: <S2SV_blank> "" ""%"" PRIu32 <S2SV_ModStart>, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> %s: <S2SV_blank> "" <S2SV_ModEnd> ""%s <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range: <S2SV_blank> "" ""%"" <S2SV_ModStart>, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> %s: <S2SV_blank> "" <S2SV_ModEnd> ""%s <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range: <S2SV_blank> "" ""%"" <S2SV_ModStart>, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> %s: <S2SV_blank> "" <S2SV_ModEnd> ""%s <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range",0
609,"<S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~""",0
610,"<S2SV_ModStart>, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_origin. ptr = NULL, packet -> http_origin. len = 0, packet -> http_x_session_type. ptr = NULL, packet -> http_x_session_type. len = 0, packet -> server_line. ptr = NULL, packet -> server_line. len = 0, packet -> http_num_headers = 0, packet -> <S2SV_ModStart> = 0, <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
611,"<S2SV_ModStart>, y, <S2SV_ModEnd> dds_info -> height <S2SV_ModStart> dds_info -> height, exception ) ; if ( q == ( PixelPacket * ) NULL ) return MagickFalse ; c0 = ReadBlobLSBShort ( image ) ; c1 = ReadBlobLSBShort ( image ) ; bits = ReadBlobLSBLong ( image ) ; CalculateColors ( c0, c1, & colors, MagickFalse ) ; for ( j = 0 ; j < 4 ; j ++ ) { if ( ( x + i ) < ( ssize_t ) dds_info -> width && ( y + j ) < ( ssize_t ) dds_info -> height ) { code = ( unsigned char ) ( ( bits >> ( ( j * 4 + i ) * 2 ) ) & 0x3 ) ; SetPixelRed ( q, ScaleCharToQuantum ( colors. r [ code ] ) ) ; SetPixelGreen ( q, ScaleCharToQuantum ( colors. g [ code ] ) ) ; SetPixelBlue ( q, ScaleCharToQuantum ( colors. b <S2SV_ModEnd> [ code ]",0
612,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL ) <S2SV_ModStart> = AUDIO_SKT_DISCONNECTED ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL ) <S2SV_ModStart> = AUDIO_SKT_DISCONNECTED ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL ) <S2SV_ModStart> = AUDIO_SKT_DISCONNECTED ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL ) <S2SV_ModStart> = AUDIO_SKT_DISCONNECTED ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL ) <S2SV_ModStart> = AUDIO_SKT_DISCONNECTED ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL ) <S2SV_ModStart> = AUDIO_SKT_DISCONNECTED ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL ) <S2SV_ModStart> = AUDIO_SKT_DISCONNECTED ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL )",0
613,"<S2SV_ModStart> action ) { double x = w * BzK ; double y = h * BzK ; <S2SV_ModStart>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> %12.3f <S2SV_blank> c\\n"", x <S2SV_ModEnd>, w, <S2SV_ModStart>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", x <S2SV_ModEnd>, w, <S2SV_ModStart>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c <S2SV_blank> %s\\n"", x <S2SV_ModEnd>, - w <S2SV_ModStart> * BzK, y <S2SV_ModEnd>, w, <S2SV_ModStart> * BzK, y <S2SV_ModEnd>, - h <S2SV_ModStart>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c <S2SV_blank> %s\\",0
614,"<S2SV_ModStart> { outpos += snprintf <S2SV_ModEnd> ( outpos, <S2SV_ModStart> ( outpos, sizeof ( outpos ), ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"" <S2SV_ModEnd>, x11, <S2SV_ModStart> y ) ; outpos += snprintf ( outpos, sizeof ( outpos ), ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", x11, x12, x21, x22, x, y ) ; outpos += snprintf ( outpos, sizeof ( outpos ), ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", x11, x12, x21, x22, x, y ) ; outpos += snprintf ( outpos, sizeof ( outpos ), ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.",0
615,"<S2SV_ModStart> return FALSE ; Stream_Read_UINT32 ( s, rdp -> autodetect -> bandwidthMeasureTimeDelta ) ; Stream_Read_UINT32 ( s, rdp -> autodetect -> bandwidthMeasureByteCount ) ; if ( rdp -> autodetect -> bandwidthMeasureTimeDelta > 0 ) rdp -> autodetect -> netCharBandwidth = rdp -> autodetect -> bandwidthMeasureByteCount * 8 / rdp -> autodetect -> bandwidthMeasureTimeDelta ; else rdp -> autodetect -> netCharBandwidth = 0 ; IFCALLRET ( rdp -> autodetect -> BandwidthMeasureResults, success, rdp -> context, autodetectRspPdu -> sequenceNumber ) ; <S2SV_ModStart> ( AUTODETECT_TAG, <S2SV_ModEnd> ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" ) ;",0
616,"<S2SV_ModStart> recon_uv_stride, recon_y_stride, cm -> yv12_fb [ recon_fb_idx ]. y_stride <S2SV_ModStart> recon_y_stride, recon_uv_stride, cm -> yv12_fb [ recon_fb_idx ]. uv_stride <S2SV_ModStart> recon_uv_stride, recon_y_stride, cm -> yv12_fb [ recon_fb_idx ]. y_stride <S2SV_ModStart> recon_uv_stride, recon_uv_stride, cm -> yv12_fb [ recon_fb_idx ]. uv_stride <S2SV_ModStart> recon_y_stride, recon_y_stride, cm -> yv12_fb [ recon_fb_idx ]. y_stride <S2SV_ModStart> recon_uv_stride, recon_uv_stride, cm -> yv12_fb [ recon_fb_idx ]. uv_stride <S2SV_ModStart> recon_y_stride, recon_uv_stride, cm -> yv12_fb [ recon_fb_idx ]. uv_stride",0
617,<S2SV_ModStart> # if CONFIG_MULTITHREAD <S2SV_ModEnd> vp8_decoder_remove_threads ( pbi,1
618,<S2SV_ModStart> 0 ) { pxPreviousBlock = & xStart ; pxBlock = xStart. pxNextFreeBlock ; while ( ( pxBlock -> xBlockSize < xWantedSize ) && ( pxBlock -> pxNextFreeBlock!= NULL ) ) { pxPreviousBlock = pxBlock ; pxBlock = pxBlock -> pxNextFreeBlock ; } if ( pxBlock!= pxEnd ) { pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock -> pxNextFreeBlock ) + xHeapStructSize ) ; pxPreviousBlock -> pxNextFreeBlock = pxBlock -> pxNextFreeBlock ; if ( ( pxBlock -> xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE ) { pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize ) ; pxNewBlockLink -> xBlockSize = pxBlock -> xBlockSize - xWantedSize ; pxBlock -> xBlockSize = xWantedSize ; prvInsertBlockIntoFreeList ( ( pxNewBlockLink ) ) ; } },0
619,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> vp9_iht8x8_add ( TX_TYPE <S2SV_ModStart> DCT_DCT ) { return <S2SV_ModStart> } else { return,0
620,"<S2SV_ModStart> ( Protocol, Error <S2SV_ModEnd>, ""%s()"", <S2SV_ModStart> ( Graphics, Error <S2SV_ModEnd>, ""process_bitmap_updates(), <S2SV_blank> [%d,%d,%d,%d], <S2SV_blank> [%d,%d], <S2SV_blank> bpp=%d, <S2SV_blank> compression=%d"",",0
621,"<S2SV_ModStart> } else { if ( smatch ( option, ""size"" ) ) { size = ( ssize ) getnum ( ovalue ) ; } else if ( smatch ( option, ""level"" ) ) { level = atoi ( ovalue ) ; } else if ( smatch ( option, ""backup"" ) ) { backup = atoi ( ovalue ) ; } else if ( smatch ( option, ""anew"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""stamp"" ) ) { stamp = httpGetTicks ( ovalue ) ; } else { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> ErrorLog <S2SV_blank> option <S2SV_blank> %s"", option ) ; } } } if ( size < ( 10 * 1000 ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Size <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small. <S2SV_blank> Must <S2SV_blank> be <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> 10K"" <S2SV_ModEnd> ) ; return",0
622,"<S2SV_ModStart> coef_branch_ct ) { unsigned int ( * eob_branch_ct ) [ REF_TYPES ] [ COEF_BANDS ] [ COEFF_CONTEXTS ] = cpi -> common. counts. eob_branch [ tx_size ] ; <S2SV_ModStart> tx_size ] ; <S2SV_ModEnd> int i,",0
623,"<S2SV_ModStart> name ) ; if ( utf8 ) { r = loop_write ( fd, ""\\033%G"" : ""\\033%@"", 3, false ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> UTF-8 <S2SV_blank> term <S2SV_blank> processing <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; r = ioctl ( fd, KDSKBMODE, K_UNICODE ) ; if ( r < 0 ) return log_warning_errno ( errno, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> UTF-8 <S2SV_blank> kbdmode <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; r = loop_write ( fd, utf8? ""\\033%G"" : ""\\033%@"", 3, false ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> UTF-8 <S2SV_blank> term <S2SV_blank> processing <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; }",0
624,"<S2SV_ModStart> ; if ( dvb_usb_generic_rw ( d -> dev, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( dvb_usb_generic_rw ( d -> dev, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( dvb_usb_generic_rw ( d -> dev, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( dvb_usb_generic_rw ( d -> dev, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x51 <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if (",0
625,<S2SV_ModStart> ( ( flags & VPX_CODEC_ENCODE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_ENCODE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_ENCODE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags,0
626,"<S2SV_ModStart> MV_PRECISION_Q3 ; } vp9_build_inter_predictor_c <S2SV_ModEnd> ( y_mb_ptr, <S2SV_ModStart> y ) ; vp9_build_inter_predictor_c <S2SV_ModEnd> ( u_mb_ptr, <S2SV_ModStart> y ) ; vp9_build_inter_predictor_c <S2SV_ModEnd> ( v_mb_ptr, <S2SV_ModStart> y ) ; vp9_build_inter_predictor_c <S2SV_ModEnd> ( y_mb_ptr, <S2SV_ModStart> y ) ; vp9_build_inter_predictor_c <S2SV_ModEnd> ( v_mb_ptr, <S2SV_ModStart> y ) ; vp9_build_inter_predictor_c <S2SV_ModEnd> ( y_mb_ptr, <S2SV_ModStart> y ) ; vp9_build_inter_predictor_c <S2SV_ModEnd> ( y_mb_ptr, <S2SV_ModStart> y ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
627,"<S2SV_ModStart> = TRUE ; bufp = find_optparam ( buf ) ; if (! bufp ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') ++ bufp ; if ( match_varname ( buf, ""OPTIONS"", 4 ) ) { bufp = find_optparam ( origbuf ) ; ++ bufp ; if (! parseoptions ( bufp, TRUE, TRUE ) ) retval = FALSE ; } else if ( match_varname ( buf, ""AUTOPICKUP_EXCEPTION"", 5 ) ) { add_autopickup_exception ( bufp ) ; } else if ( match_varname ( buf, ""AUTOCOMPLETE"", 5 ) ) { parseautocomplete ( bufp, TRUE ) ; } else",0
628,"<S2SV_ModStart> ( ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> if (! numbers [ i ] <S2SV_ModEnd> ) a -> <S2SV_ModStart> -> child = cJSON_CreateFloat ( numbers [ i ] ) <S2SV_ModEnd> ; else suffix_object <S2SV_ModStart> ( p, cJSON_CreateFloat ( numbers [ i ] ) <S2SV_ModEnd> ) ; p <S2SV_ModStart> ; p = cJSON_CreateFloat ( numbers [ i ] ) <S2SV_ModEnd> ; } return",0
629,"<S2SV_ModStart> tile_cols ) ; <S2SV_ModEnd> int n ; <S2SV_ModStart> { VP9Worker * worker = & pbi -> tile_workers [ i ] ; TileBuffer tile_buffers [ 1 << 6 ] ; int final_worker = - 1 ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data2, vpx_malloc ( sizeof ( TileInfo ) ) ) ; if ( i < num_threads - 1 &&! vp9_worker_reset ( worker ) ) { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Tile <S2SV_blank> decoder <S2SV_blank> thread <S2SV_blank> creation <S2SV_blank> failed"" ) ; } } } for ( n = 0 ; n < num_workers ; ++ n ) {",0
630,"<S2SV_ModStart> = base + ( int ) <S2SV_ModStart> case 0x505244 : if (! strncasecmp ( model, ""DSLR-A100"", 9 ) ) { fseek ( ifp, 8, SEEK_CUR ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 0 ] = get2 ( ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 2 ] = get2 ( ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 3 ] = get2 ( ) ; } <S2SV_ModStart> case 0x524946 : if (! strncasecmp ( model, ""DSLR-A100"", 9 ) ) { fseek ( ifp, 8, SEEK_CUR ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 0 ] = get2 ( ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 3 ] = get2 ( ) ; }",0
631,"<S2SV_ModStart> ++ ) { const double base_q = vp9_convert_qindex_to_q ( cm -> base_qindex ) ; const int base_rdmult = vp9_compute_rd_mult ( cpi, cm -> base_qindex + cm -> y_dc_delta_q ) ; int i ; if ( cpi -> frame_type == KEY_FRAME || cpi -> refresh_alt_ref_frame || ( cpi -> refresh_golden_frame &&! cpi -> rc. is_src_frame_alt_ref ) ) { <S2SV_ModStart> SEG_LVL_ALT_Q ) ; <S2SV_ModEnd> RDMULT_RATIO ( i <S2SV_ModStart> ; } } }",0
632,"<S2SV_ModStart> -> error_code ) memcpy ( & <S2SV_ModStart> ctx -> base, & <S2SV_ModEnd> error -> detail <S2SV_ModStart> error -> detail, sizeof ( ctx -> base. err_detail ) ) <S2SV_ModEnd> ; return error",0
633,"<S2SV_ModStart>, * ps_cur_poc ; ps_dec -> s_cab_dec_env. pv_codec_handle = ps_dec ; ps_dec -> u4_num_fld_in_frm = 0 ; ps_dec -> ps_dpb_mgr -> pv_codec_handle = ps_dec ; ps_dec -> ps_sei -> u1_is_valid = 0 ; ps_dec -> u4_pic_ht = 0 ; ps_dec -> u2_pic_wd = 0 ; ps_dec -> u4_app_disable_deblk_frm = 0 ; ps_dec -> i4_degrade_type = IVD_SKIP_NONE ; ps_dec -> i4_dec_skip_mode = IVD_SKIP_NONE ; memset ( ps_dec -> ps_pps, 0, ( ( sizeof ( dec_pic_params_t ) ) * MAX_NUM_PIC_PARAMS ) ) ; memset ( ps_dec -> ps_sps, 0, ( ( sizeof ( dec_seq_params_t ) ) * MAX_NUM_SEQ_PARAMS ) )",0
634,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet ),0
635,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int getnum (,0
636,"<S2SV_ModStart> GCSpropagate ) ; <S2SV_ModEnd> atomic ( L <S2SV_ModStart> NULL ) ; markold ( g, g -> survival, g -> reallyold ) ; markold ( g, g -> finobj, g -> finobjrold ) ;",0
637,<S2SV_ModStart> 0 ; else { ret = <S2SV_ModEnd> - EIO ; <S2SV_ModStart> - EIO ; goto err ; },0
638,"<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart> ) ; } if (! safe_memcmp ( buffer, ssl_request, sizeof ssl_request ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; }",0
639,"<S2SV_ModStart> struct sockaddr_in addr <S2SV_ModEnd> ; struct addrinfo <S2SV_ModStart> = NULL ; <S2SV_ModEnd> bzero ( & <S2SV_ModStart> 1 ; } sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock < 0 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; }",0
640,"<S2SV_ModStart> ; cpi -> <S2SV_ModEnd> frames_till_gf_update_due = 0 <S2SV_ModStart> 0 ; } vpx_memset ( cpi, 0, sizeof ( VP8_COMP ) ) ; if ( setjmp ( cm -> error. jmp ) ) { cpi -> common. error. setjmp = 0 ; vp8_remove_compressor ( & cpi ) ; return 0 ; } cpi -> common. error. setjmp = 1 ; CHECK_MEM_ERROR ( cpi -> mb. ss, vpx_calloc ( sizeof ( search_site ), ( MAX_MVSEARCH_STEPS * 8 ) + 1 ) ) ; vp8_create_common ( & cpi -> common ) ; init_config ( cpi, oxcf ) ; memcpy ( cpi -> base_skip_false_prob, vp8cx_base_skip_false_prob, sizeof ( vp8cx_base_skip_false_prob ) ) ;",0
641,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [nsrcs=%d]"", nsrcs ) ) ; } ND_TCHECK2 ( bp [ 24 ], sizeof ( struct in6_addr ) ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> gaddr <S2SV_blank> %s"", ip6addr_string ( ndo, & bp [ 24 ] ) ) ) ; if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag=%d"", ndo -> ndo_vflag ) ) ; } if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag=%d"", ndo -> ndo_vflag ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", ndo -> ndo_vflag ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo,",0
642,"<S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> ENODEV ; } if ( copy_to_user ( uarg, & karg. hdr, sizeof ( karg. hdr ) ) ) { printk ( KERN_ERR MYNAM ""%s@%d::mptctl_mpt_command <S2SV_blank> - <S2SV_blank> "" ""Unable <S2SV_blank> to <S2SV_blank> copy <S2SV_blank> in <S2SV_blank> mpt_ioctl_command <S2SV_blank> struct <S2SV_blank> @ <S2SV_blank> %p\\n"", __FILE__, __LINE__, uarg ) ; return - EFAULT ; }",0
643,"<S2SV_ModStart>, length, <S2SV_ModEnd> value, version <S2SV_ModStart> ( buffer, ""#define <S2SV_blank> %32s <S2SV_blank> %u"" <S2SV_ModEnd>, name, <S2SV_ModStart> ( buffer, ""#define <S2SV_blank> %32s <S2SV_blank> %u"" <S2SV_ModEnd>, name, <S2SV_ModStart> ( buffer, ""#define <S2SV_blank> %32s <S2SV_blank> %u"" <S2SV_ModEnd>, name, <S2SV_ModStart> ( buffer, ""#define <S2SV_blank> %32s <S2SV_blank> %u"" <S2SV_ModEnd>, name, <S2SV_ModStart> ( buffer, ""#define <S2SV_blank> %32s <S2SV_blank> %u"" <S2SV_ModEnd>, name, <S2SV_ModStart> ( buffer, ""#define <S2SV_blank> %32s <S2SV_blank> %u"" <S2SV_ModEnd>, name, <S2SV_ModStart> ( buffer, ""#define <S2SV_blank> %32s <S2SV_blank> %u"" <S2SV_ModEnd>, name, <S2SV_ModStart> ( buffer, ""#define <S2SV_blank> %32s <S2SV_blank> %u"" <S2SV_ModEnd>, name, <S2SV_ModStart> ( buffer, ""#define <S2SV_blank> %32s <S2SV_blank> %u"" <S2SV_ModEnd>, name, <S2SV_ModStart> ( buffer, ""#define <S2SV_blank> %32s <S2SV_blank> %u"" <S2SV_ModEnd>, name,",0
644,"<S2SV_ModStart> jpc_tsfb_getbandinfo ( tsfb, bandno <S2SV_ModStart> jpc_tsfb_getbandinfo ( tsfb, bandno <S2SV_ModStart> jpc_tsfb_getbandinfo ( tsfb, bandno <S2SV_ModStart> jpc_tsfb_getbandinfo ( tsfb, bandno <S2SV_ModStart> jpc_tsfb_getbandinfo ( tsfb, bandno <S2SV_ModStart> jpc_tsfb_getbandinfo ( tsfb, bandno <S2SV_ModStart> jpc_tsfb_getbandinfo ( tsfb, bandno <S2SV_ModStart> jpc_tsfb_getbandinfo ( tsfb, bandno <S2SV_ModStart> jpc_tsfb_getbandinfo ( tsfb, bandno <S2SV_ModStart> jpc_tsfb_getbandinfo ( tsfb, bandno <S2SV_ModStart> jpc_tsfb_getbandinfo ( tsfb, bandno <S2SV_ModStart> jpc_tsfb_getbandinfo ( tsfb, bandno <S2SV_ModStart> jpc_tsfb_getbandinfo ( tsfb, bandno <S2SV_ModStart> jpc_tsfb_getbandinfo ( tsfb, bandno <S2SV_ModStart> jpc_tsfb_getbandinfo ( tsfb, bandno <S2SV_ModStart> jpc_tsfb_getbandinfo ( tsfb,",0
645,<S2SV_ModStart> = '\\0' ; if (! argc ) { free ( new_modes ) ; free ( new_args ) ; return ; } <S2SV_ModStart> = '\\0' ; if (! argc ) { free ( new_modes ) ; free ( new_args ) ; return ; } <S2SV_ModStart> = '\\0' ; if (! argc ) { free ( new_modes ) ; free ( new_args ) ; free ( str_temp ) ; return ; } <S2SV_ModStart> = '\\0' ; if (! argc ) { free ( new_modes ) ; free ( new_args ) ; free ( str_temp ) ; return ; },0
646,"<S2SV_ModStart> int v = vp9_read_uint <S2SV_ModEnd> ( r, <S2SV_ModStart> - m + vp9_read_uint <S2SV_ModEnd> ( r )",0
647,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> vp9_cost_tokens_skip ( int <S2SV_ModStart> 0 ) ; return,0
648,"<S2SV_ModStart> r ) { assert ( cm -> fc. comp_inter_prob [ ctx ] > 0 ) ; assert ( cm -> fc. comp_inter_prob [ ctx ] > 0 ) ; <S2SV_ModStart> REFERENCE_MODE ) vp9_read ( r, cm -> fc. comp_inter_prob [ ctx ] ) ; assert ( cm -> fc. comp_inter_prob [ ctx ] > 0 ) ; assert ( cm -> fc. comp_inter_prob [ ctx ] > 0 ) ; assert ( cm -> fc. comp_inter_prob [ ctx ] > 0 ) ; assert ( cm -> fc. comp_inter_prob [ ctx ] > 0 ) ; if (! cm -> frame_parallel_decoding_mode ) ++ cm -> counts. comp_inter [ ctx ] [ mode ] ; else ++ cm -> counts. comp_inter [ ctx ] [ mode ] ; return mode ; } else { assert ( <S2SV_ModEnd> cm -> reference_mode <S2SV_ModStart> reference_mode ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
649,"<S2SV_ModStart> ; if ( prev ) { memcpy ( stream, prev, sizeof ( * stream ) ) ; stream -> index ++ ; prev -> next = stream ; } else { vpx_codec_err_t res ; res = vpx_codec_enc_config_default ( global -> codec -> interface ( ), & stream -> config. cfg, global -> usage ) ; if ( res ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> config: <S2SV_blank> %s\\n"", vpx_codec_err_to_string ( res ) ) ; stream -> config. cfg. g_timebase. den = 1000 ; stream -> config. cfg. g_w = 0 ; stream -> config. cfg. g_h = 0 ; stream -> config. stereo_fmt = STEREO_FORMAT_MONO ; } <S2SV_ModEnd> stream -> config",0
650,"<S2SV_ModStart> ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u), <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""unknown"", op -> nd_opt_type ), op -> nd_opt_type, op -> nd_opt_len << 3, op -> nd_opt_len ) ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u), <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""unknown"", op -> nd_opt_type ), op -> nd_opt_type, op -> nd_opt_len << 3, op -> nd_opt_len ) ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u), <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""unknown"", op -> nd_opt_type ), op -> nd_opt_len << 3, op -> nd_opt_",0
651,<S2SV_ModStart> -> root_node = yr_malloc ( sizeof ( RE_AST ) ) ; if ( ( * re_ast ) -> root_node == NULL ) { yr_free ( * re_ast ) ; return ERROR_INSUFFICIENT_MEMORY ; } ( * re_ast ) -> root_node -> next = yr_malloc ( sizeof ( RE_AST ) ) ; if ( ( * re_ast ) -> root_node == NULL ) { yr_free ( * re_ast ) ; return ERROR_INSUFFICIENT_MEMORY ; } ( * re_ast ) -> root_node -> next = yr_malloc ( sizeof ( RE_AST ) ) ; if ( ( * re_ast ) -> root_node -> next == NULL ) { yr_free ( * re_ast ) ; return ERROR_INSUFFICIENT_MEMORY ; } <S2SV_ModEnd> return ERROR_SUCCESS ;,0
652,"<S2SV_ModStart>, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> \'%s\': <S2SV_blank> %s"" <S2SV_ModEnd>, key -> <S2SV_ModStart>, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> lookup <S2SV_blank> key <S2SV_blank> \'%s\': <S2SV_blank> %s"" <S2SV_ModEnd>, str_c (",0
653,<S2SV_ModStart> -> level = 1 <S2SV_ModEnd> ; tok -> <S2SV_ModStart> -> decoding_buffer = PyMem_MALLOC ( tok -> decoding_buffer_size ) ; if ( tok -> decoding_buffer == NULL ) { PyMem_Free ( tok ) ; return NULL ; } tok -> decoding_buffer = PyMem_MALLOC ( tok -> decoding_buffer_size ) ; if ( tok -> decoding_buffer == NULL ) { PyMem_Free ( tok ) ; return NULL ; } <S2SV_ModEnd> # ifndef PGEN <S2SV_ModStart> -> decoding_buffer = PyMem_MALLOC ( tok -> decoding_buffer_size ) ; if ( tok -> decoding_buffer == NULL ) { PyMem_Free ( tok -> decoding_buffer ) ; return NULL ; } tok -> decoding_buffer = PyMem_MALLOC ( tok -> decoding_buffer_size ) ; if ( tok -> decoding_buffer == NULL ) { PyMem_Free ( tok -> decoding_buffer ) ; return NULL ; } } <S2SV_ModEnd> return tok ;,0
654,<S2SV_ModStart> av1 -> av1_config && av1 -> av1_config -> config,1
655,"<S2SV_ModStart> ASSERT ( dpbSize <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; dpb -> maxLongTermFrameIdx = NO_LONG_TERM_FRAME_INDICES ; dpb -> maxRefFrames = MAX ( maxRefFrames, 1 ) ; dpb -> dpbSize = dpbSize ; dpb -> maxFrameNum = maxFrameNum ; dpb -> noReordering = noReordering ; dpb -> fullness = 0 ; dpb -> numRefFrames = 0 ; dpb -> prevRefFrameNum = 0 ; ALLOCATE ( dpb -> buffer, MAX_NUM_REF_IDX_L0_ACTIVE + 1, dpbPicture_t ) ; if ( dpb -> buffer == NULL ) return ( MEMORY_ALLOCATION_ERROR ) ; H264SwDecMemset ( dpb -> buffer, 0, ( MAX_NUM_REF_IDX_L0_ACTIVE + 1 ) * sizeof ( dpbPicture_t ) ) ; for ( i = 0 ; i < dpb -> dpbSize + 1 ; i ++ ) { ALLOCATE ( dpb ->",0
656,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( oe_syscall_getpeername_ocall <S2SV_ModStart> ) ; } <S2SV_ModEnd> return ret ;,0
657,"<S2SV_ModStart> ) cJSON_malloc ( sizeof ( cJSON ) ) ; if ( node ) memset ( node, 0, sizeof ( cJSON ) ) ; node = ( cJSON * ) cJSON_malloc ( <S2SV_ModStart> ) ) ; if ( node ) memset ( node, 0, sizeof ( cJSON ) ) ; node = ( cJSON * ) cJSON_malloc ( sizeof ( cJSON ) ) ; if ( node ) memset ( node, 0, sizeof ( cJSON ) ) ;",0
658,"<S2SV_ModStart> FALSE ; } if (! <S2SV_ModStart>, s ) ) return FALSE",1
659,<S2SV_ModStart> ipv6_pinfo * np <S2SV_ModEnd> ; struct ipv6_txoptions <S2SV_ModStart> -> l2tp_addr ; np = inet6_sk ( sk ) ;,0
660,"<S2SV_ModStart> fsize ; uint32_t <S2SV_ModEnd> hdr_size, j <S2SV_ModStart> j ; struct pe_image_data_dir * dirs ; struct cli_bc_ctx * bc_ctx ; fmap_t * map ; struct cli_pe_hook_data pedata ; # ifdef HAVE__INTERNAL__SHA_COLLECT int sha_collect = ctx -> sha_collect ; # endif const char * archtype = NULL, * subsystem = NULL ; uint32_t viruses_found = 0 ; # if HAVE_JSON int toval = 0 ; struct json_object * pe_json = NULL ; char jsonbuf [ 128 ] ; # endif if (! ctx ) { cli_errmsg ( ""cli_scanpe: <S2SV_blank> ctx <S2SV_blank> == <S2SV_blank> NULL\\n"" ) ; return CL_ENULLARG ; } # if HAVE_JSON if ( cli_json_timeout_cycle_check ( ctx, & toval )!= 0 ) { cli_errmsg ( ""cli_scanpe: <S2SV_blank> json <S2SV_blank> timeout <S2SV_blank> check\\n"" ) ; return CL_ENULLARG ; } # endif <S2SV_ModEnd> if (!",0
661,"<S2SV_ModStart> address ) { <S2SV_ModEnd> usleep ( 5 <S2SV_ModStart> DM9000_REG_EPDRL ) ; dm9000WriteReg ( DM9000_REG_EPAR, 0x40 | address ) ; return dm9000ReadReg ( DM9000_REG_EPDRH ) << 8 | dm9000ReadReg ( DM9000_REG_EPDRL ) ;",0
662,"<S2SV_ModStart> ( private -> callback ) ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> callback. token, CRM_OP_REGISTER, NULL, NULL, NULL, 0, NULL ) ; crm_xml_add ( hello, F_CIB_CLIENTNAME, name ) ; crm_send_remote_msg ( private -> command. session, hello, private -> command. encrypted ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { fprintf ( stderr, ""%s: <S2SV_blank> Opened <S2SV_blank> connection <S2SV_blank> to <S2SV_blank> %s:%d\\n"", name, private -> server, private -> port ) ; cib -> state = cib_connected_command ; cib -> type = cib_command ; } else { fprintf ( stderr, ""%s: <S2SV_blank> Connection <S2SV_blank> to <S2SV_blank> %s:%d <S2SV_blank> failed: <S2SV_blank> %s\\n"", name, private -> server, private -> port, pcmk_ok <S2SV_ModEnd> ) ; }",0
663,"<S2SV_ModStart> & address ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; err = sock_recvmsg ( sock, & msg, size, flags ) ; if ( err >= 0 && addr!= NULL ) { err2 = move_addr_to_user ( & address, msg. msg_namelen, addr, addr_len ) ; if ( err2 < 0 ) err = err2 ; } <S2SV_ModStart> ( address ) <S2SV_ModEnd> ; err =",0
664,"<S2SV_ModStart> int new_mv_mode_penalty = 64 <S2SV_ModEnd> ; const int <S2SV_ModStart> < INT_MAX - new_mv_mode_penalty ) tmp_err += new_mv_mode_penalty ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX - new_mv_mode_penalty ) tmp_err += new_mv_mode_penalty ; if ( tmp_err < INT_MAX - new_mv_mode_penalty ) tmp_err += new_mv_mode_penalty ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX - new_mv_mode_penalty ) tmp_err += new_mv_mode_penalty ; if ( tmp_err < * best_motion_err ) { * best_motion_err = tmp",0
665,"<S2SV_ModStart>, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", h -> filename <S2SV_ModEnd> ) ; goto <S2SV_ModStart>, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", h -> filename <S2SV_ModEnd> ) ; goto <S2SV_ModStart>, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", h -> filename <S2SV_ModEnd> ) ; goto <S2SV_ModStart>, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", h -> filename <S2SV_ModEnd> ) ; goto <S2SV_ModStart>, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", h -> filename <S2SV_ModEnd> ) ; goto <S2SV_ModStart>, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", h -> filename <S2SV_ModEnd> ) ; goto <S2SV_ModStart>, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank>",0
666,"<S2SV_ModStart> ; # endif # ifdef DEBUG_CONF ap_log_perror ( APLOG_MARK, APLOG_STARTUP | APLOG_NOERRNO, 0, mp, ""Merge <S2SV_blank> parent <S2SV_blank> %pp <S2SV_blank> child <S2SV_blank> %pp <S2SV_blank> result <S2SV_blank> %pp"", _parent, _child, merged ) ; # endif # ifdef DEBUG_CONF ap_log_perror ( APLOG_MARK, APLOG_STARTUP | APLOG_NOERRNO, 0, mp, ""Merge <S2SV_blank> parent <S2SV_blank> %pp <S2SV_blank> child <S2SV_blank> %pp <S2SV_blank> result <S2SV_blank> %pp"", _parent, _child, merged ) ; # endif",0
667,"<S2SV_ModStart> one, offset ; ssize_t <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart> * colormap, * plane, * pixels ; if ( image_info -> debug!= MagickFalse ) ( void ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image_info -> filename ) ; assert ( exception!= ( ExceptionInfo * ) NULL ) ; assert ( exception -> signature == MagickSignature ) ; if ( image_info -> signature!= MagickSignature ) ( void ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image_info -> filename ) ; assert ( exception -> signature == MagickSignature ) ; if ( image_info -> debug!= MagickFalse ) ( void ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image_info -> filename ) <S2SV_ModEnd> ; assert (",0
668,"<S2SV_ModStart>, comp -> block_size ) )!= 0 || ( r = sshbuf_put_string ( b, comp -> key, comp -> key_len ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp ->",0
669,"<S2SV_ModStart> ) ) { ovalue = strim ( <S2SV_ModEnd> stok ( option <S2SV_ModStart> & ovalue ) <S2SV_ModEnd>, ""\\""\'"", <S2SV_ModStart> MPR_TRIM_BOTH ) ; option = stok ( option, "" <S2SV_blank> =\\t,"", & ovalue ) ; ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ;",0
670,"<S2SV_ModStart> user ) ; <S2SV_ModEnd> crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client"" <S2SV_ModStart> ) ; } cib_client_t * client = user_data ; if ( client == NULL ) { return ; } crm_trace ( ""Cleaning <S2SV_blank> up <S2SV_blank> after <S2SV_blank> client <S2SV_blank> disconnect: <S2SV_blank> %s/%s"", crm_str ( client -> name ), client -> id ) ; if ( client -> id!= NULL ) { if (! g_hash_table_remove ( client_list, client -> id ) ) { crm_err ( ""Client <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> the <S2SV_blank> hashtable"", client -> name ) ; } } free ( client ) ;",0
671,"<S2SV_ModStart> next ) { if ( iswhite ( uv ) ) markvalue ( g, uv -> v ) ; <S2SV_ModStart> work ++ ; <S2SV_ModEnd> } } return",0
