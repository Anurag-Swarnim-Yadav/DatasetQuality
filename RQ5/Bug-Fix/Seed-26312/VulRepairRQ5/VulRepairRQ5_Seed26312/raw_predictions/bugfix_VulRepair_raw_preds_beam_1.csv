,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
1,<S2SV_ModStart> ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ; if (,0
2,<S2SV_ModStart> 0 ) ; if ( writer -> stco ) { <S2SV_ModStart> stsc ) ; },0
3,<S2SV_ModStart> -> child ; if ( item < 0 ) { return NULL ; },0
4,"<S2SV_ModStart> addr ) ; if (! <S2SV_ModStart>, regs ) ) return",0
5,<S2SV_ModStart> { # ifndef GRUB_EXTENTS_MALLOC <S2SV_ModEnd> char buf [,0
6,<S2SV_ModStart> ] ) { uint16_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> ] ; int input [ 16 <S2SV_ModEnd> ] ; input <S2SV_ModStart> ] ; int step2 [ 16 ] ; int step3 [ 16 ] ; int input [ 16 <S2SV_ModEnd> ] ; input <S2SV_ModStart> ] ; int step4 [ 16 ] ; int <S2SV_ModStart> ] ; int step5 [ 16 ] ; int <S2SV_ModStart> ] ; int step6 [ 16 ] ; int <S2SV_ModStart> ] ; int step7 [ 16 ] ; int <S2SV_ModStart> ] ; int step4 [ 16 ] ; int <S2SV_ModStart> ] ; int step5 [ 16 ] ; int <S2SV_ModStart> ] ; int step6 [ 16 ] ; int <S2SV_ModStart> ] ; int step4 [ 16 ] ; int,0
7,<S2SV_ModStart> ( ) == 0x484541510 <S2SV_ModEnd> ) { #,0
8,<S2SV_ModStart> ) ; int <S2SV_ModEnd> filt_mid = clamp <S2SV_ModStart> ) ; int filt_err <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ) { <S2SV_ModEnd> } else { <S2SV_ModStart> } else { <S2SV_ModEnd> } } <S2SV_null>,0
9,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 2, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",0
10,"<S2SV_ModStart> ( w, mvcomp -> sign, mvcomp -> classes <S2SV_ModEnd> ) ; vp9_write_token",0
11,<S2SV_ModStart> ( blockSize == 64 ) request -> rxBlockSzx = COAP_BLOCK_SIZE_64 ; else if ( blockSize == <S2SV_ModStart> rxBlockSzx = COAP_BLOCK_SIZE_512 ; else if ( blockSize == 4096 ) request -> rxBlockSzx = COAP_BLOCK_SIZE_4096,0
12,"<S2SV_ModStart> ( ndo, ""%04x, <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS (",0
13,<S2SV_ModStart> * authkey ; bool found ; <S2SV_ModStart> } else { found = false ; <S2SV_ModStart> ( dest_keyring ) { found = true ; break ; } <S2SV_ModEnd> } case KEY_REQKEY_DEFL_THREAD_KEYRING <S2SV_ModStart> ( dest_keyring ) { found = true ; break ; } <S2SV_ModEnd> case KEY_REQKEY_DEFL_PROCESS_KEYRING : <S2SV_ModStart> ( dest_keyring ) { found = true ; break ; } <S2SV_ModEnd> case KEY_REQKEY_DEFL_SESSION_KEYRING : <S2SV_ModStart> ( dest_keyring ) { found = true ; break ; } <S2SV_ModEnd> case KEY_REQKEY_DEFL_USER_SESSION_KEYRING : <S2SV_ModStart> ( dest_keyring ) { found = true ; break ; } <S2SV_ModEnd> case KEY_REQKEY_DEFL_GROUP_KEYRING : <S2SV_ModStart> ) ; } * _dest_keyring = found ;,0
14,<S2SV_ModStart> = NULL ; if ( ( <S2SV_ModStart> create_spnego_ctx ( ) ) <S2SV_ModEnd> == NULL ),0
15,<S2SV_ModStart> int len ; char * c ; <S2SV_ModStart> t ) ; c = asctime ( tm ) ; <S2SV_ModStart> = g_strdup ( c <S2SV_ModEnd> ) ; len,0
16,<S2SV_ModStart> length ) ; if ( strlen ( password ) > 0 ) { <S2SV_ModStart> ) ) ; },0
17,<S2SV_ModStart> e == p || e - p > USHRT_MAX,0
18,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",0
19,<S2SV_ModStart> = 0 ; int ret = <S2SV_ModStart> timeout ) ; if ( ret < 0 ) { return false ; },0
20,<S2SV_ModStart> = 0 ; if ( still_interval > 0 ) { <S2SV_ModStart> 1 ; } },0
21,"<S2SV_ModStart> inode ) ) { <S2SV_ModStart> size ) ; if ( offset + size > i_size_read ( inode ) ) { printk ( KERN_EMERG ""%s: <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, ret, inode -> i_ino ) ; return ret ; } }",0
22,<S2SV_ModStart> alg ) { <S2SV_ModEnd> alg = crypto_alg_lookup,0
23,"<S2SV_ModStart> = '\\0' ; <S2SV_ModEnd> ptr = strchr <S2SV_ModStart>,'<S2SV_blank>') ; if (! ptr <S2SV_ModEnd> ) goto out_err <S2SV_ModStart> goto out_err ; <S2SV_ModEnd> ptr = strchr <S2SV_ModStart>, '\\n' ) ; if (! ptr <S2SV_ModEnd> ) goto out_err",0
24,<S2SV_ModStart> BYTE flags ; UINT32 <S2SV_ModEnd> length ; Stream_Read_UINT32,0
25,<S2SV_ModStart> num ) ; <S2SV_ModEnd> avformat_set_stream_id ( s,0
26,"<S2SV_ModStart> mntent, path, 0",0
27,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io,0
28,<S2SV_ModStart> MagickRealType ) ( pixel & ( size_t ) <S2SV_ModEnd> value + 0.5 <S2SV_ModStart> MagickRealType ) ( pixel << ( size_t ) <S2SV_ModEnd> value + 0.5,0
29,"<S2SV_ModStart> ) ) ; ret &= btif_config_set_int ( bdstr, ""BIFDeviceType"", BTIF_DEVICE_TYPE_BT ) ;",0
30,<S2SV_ModStart> = VPX_CODEC_INVALID_PARAM ; if ( iface -> enc. cfg_maps ) { <S2SV_ModStart> } } } },0
31,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
32,"<S2SV_ModStart> void show_progress ( uint64_t frame_in, uint64_t <S2SV_ModEnd> frame_out, uint64_t",0
33,<S2SV_ModStart> -> pmysql -> malloc_error <S2SV_ModEnd> ) ; PerlIO_printf,0
34,"<S2SV_ModStart>, ENC28J60_REG_EWRPTL, MSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60ClearBit ( interface, ENC28J60_REG_EWRPTH, <S2SV_ModStart>, ENC28J60_REG_ETXNDL, <S2SV_ModEnd> MSB ( ENC28J60_TX_BUFFER_START <S2SV_ModStart>, ENC28J60_REG_ETXNDH, LSB ( ENC28J60_TX_BUFFER_START + length ) ) ; enc28j60WriteBuffer ( interface, buffer, offset <S2SV_ModEnd> ) ; return",0
35,<S2SV_ModStart> ; value = ast2obj_py_id <S2SV_ModEnd> ( o -> <S2SV_ModStart> ; value = ast2obj_py_id <S2SV_ModEnd> ( o -> <S2SV_ModStart> ; value = ast2obj_py_id <S2SV_ModEnd> ( o -> <S2SV_ModStart> ; value = ast2obj_py_id <S2SV_ModEnd> ( o ->,0
36,"<S2SV_ModStart> ( page, ""%s"",",0
37,"<S2SV_ModStart> int mb_rows = ( <S2SV_ModStart> y_width >> 4 ) + 1 <S2SV_ModStart> int mbr, mb_cols <S2SV_ModEnd> ; ( void",0
38,<S2SV_ModStart> error ) { <S2SV_ModEnd> } else {,0
39,<S2SV_ModStart> ) ) ; * code = 200 ; * rlen = 0 ;,0
40,"<S2SV_ModStart> ip_options * opt ; int ret ; opt <S2SV_ModStart> - ENOMEM ; ret = <S2SV_ModEnd> copy_from_user ( opt <S2SV_ModStart>, optlen ) ; if ( ret ) return ret ; <S2SV_ModEnd> return ip_options_get_finish (",0
41,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|truncated]"" <S2SV_ModEnd> ) ) ;",0
42,"<S2SV_ModStart> ) N_ ( ""E536: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'keybinding\' <S2SV_blank> to <S2SV_blank> a <S2SV_blank> key <S2SV_blank> that <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" <S2SV_ModEnd> ) ; else",0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode, & new_mode, & acl ) ; if ( ret <S2SV_ModEnd> ) goto out <S2SV_ModStart> ) goto out <S2SV_ModEnd> ; } break",0
44,<S2SV_ModStart> ; cmpt = NULL <S2SV_ModEnd> ; if (,0
45,<S2SV_ModStart> dp == datalen || ( op & ASN1_OP__MATCH__COND && flags & FLAG_MATCHED ) <S2SV_ModStart> ; if ( <S2SV_ModEnd> ( op & <S2SV_ModStart> & FLAG_MATCHED ) && ( op & ASN1_OP__MATCH__COND ) <S2SV_ModStart> ; if ( <S2SV_ModEnd> ( op & <S2SV_ModStart> & FLAG_MATCHED ) && ( op & ASN1_OP__MATCH__COND ) <S2SV_ModStart> ; if ( <S2SV_ModEnd> ( op & <S2SV_ModStart> & FLAG_MATCHED ) && ( op & ASN1_OP__MATCH__COND ) <S2SV_ModStart> ; if ( <S2SV_ModEnd> ( op & <S2SV_ModStart> & FLAG_MATCHED ) && ( op & ASN1_OP__MATCH__COND ) <S2SV_ModStart> ; if ( <S2SV_ModEnd> ( op & <S2SV_ModStart> & FLAG_MATCHED ) && ( op & ASN1_OP__MATCH__COND ) <S2SV_ModStart> ; if ( <S2SV_ModEnd> ( op & <S2SV_ModStart> & FLAG_MATCHED ) && ( op & ASN1_OP__MATCH__COND ) <S2SV_ModStart> ; if ( <S2SV_ModEnd> ( op & <S2SV_ModStart> & FLAG_MATCHED ) && ( op & ASN1_OP__MATCH__COND ),0
46,"<S2SV_ModStart> acl_len ) { <S2SV_ModEnd> uint32_t attrlen, <S2SV_ModStart> attrlen, & req -> rq_rcv_buf. head <S2SV_ModEnd> ) )!= <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> * acl_len = <S2SV_ModStart> acl_len = attrlen ; return 0",0
47,<S2SV_ModStart> ; long rem ; if ( nsec < 0 ) return,0
48,<S2SV_ModStart> ; } } if (! auth ) { return MPR_ERR_BAD_SYNTAX ; } <S2SV_ModStart> ; } } if (! auth ) { return MPR_ERR_BAD_SYNTAX ; },0
49,"<S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; if ( addr ) { x = align_addr ( ( unsigned char * ) addr + ADDRESS_STORAGE_SIZE, ( int ) align ) ; ( ( size_t * ) x ) [ - 1 ] = ( size_t ) addr ; } <S2SV_ModStart> # endif # ifdef <S2SV_ModEnd> CONFIG_MEM_MANAGER if (",0
50,"<S2SV_ModStart> indexes ] ; if ( indexes > MAX_EXPORT_INDEX_BYTES ) { ERROR ( ""parse_exports_table: <S2SV_blank> exceeds <S2SV_blank> maximum <S2SV_blank> number <S2SV_blank> of <S2SV_blank> export <S2SV_blank> index <S2SV_blank> bytes <S2SV_blank> (%d)\\n"", MAX_EXPORT_INDEX_BYTES ) ; return FALSE ; }",0
51,<S2SV_ModStart> ; } else { <S2SV_ModStart> p1 ) ; },0
52,<S2SV_ModStart> ; # endif <S2SV_ModEnd> } for ( <S2SV_ModStart> ; } } <S2SV_ModEnd> return 0 ;,0
53,<S2SV_ModStart> 1 ; } <S2SV_ModEnd> return 0 ;,0
54,"<S2SV_ModStart> ; if ( crypto_memneq <S2SV_ModEnd> ( cmac,",0
55,<S2SV_ModStart> -= bits_used ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
56,<S2SV_ModStart> ; do { if ( count!= 2 ) { <S2SV_ModStart> image ) ; } else { image -> page. x = 0 ; } <S2SV_ModStart> image ) ; if ( count!= 2 ) { <S2SV_ModStart> image ) ; } else { image -> page. y = 0 ; } <S2SV_ModStart> ( image ) ; if ( count!= 2 ) { image -> page. x = 0 ; image -> page. y = 0,0
57,"<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> altsetting [ 0 ]. desc. bNumEndpoints < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; error = - EINVAL ; goto err_free_urb ; }",1
58,"<S2SV_ModStart> stateid, int flags <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart> state, stateid, flags",0
59,"<S2SV_ModStart> dir = ""/etc"" ; int fd_errno = errno <S2SV_ModStart> ) ) ; if ( fd == - 1 ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } fd_errno = errno ;",0
60,"<S2SV_ModStart> = value ; BITS_PARSE ( ""output_flag_present_flag_with_output_flag"", value, ps_bitstrm, 1 ) ; ps_pps -> i1_output_flag_present = value ;",0
61,<S2SV_ModStart> ) ; } if ( narg!= NULL ) { <S2SV_ModStart> arg ) ; },0
62,<S2SV_ModStart> mi_col ) { <S2SV_ModEnd> int i ; <S2SV_ModStart> i ) { <S2SV_ModEnd> setup_pred_plane ( &,0
63,<S2SV_ModStart> args ) { if ( ctr_id!= VPX_CODEC_CTX_ID_CTR_B ) { return VPX_CODEC_ERR_INVALID_ARGS ; },0
64,<S2SV_ModStart> ) get_block = ocfs2_read_block <S2SV_ModEnd> ; else get_block,0
65,"<S2SV_ModStart> ( f, ""%79s <S2SV_blank> %[^\\n]\\n\\n"" <S2SV_ModEnd>, def,",0
66,"<S2SV_ModStart> PyCompilerFlags cf ; expr_ty <S2SV_ModEnd> mod ; char <S2SV_ModStart> ; mod = string_object_to_c_ast_str <S2SV_ModEnd> ( str, <S2SV_ModStart> ( str, Py_eval_input_str <S2SV_ModEnd>, & cf <S2SV_ModStart> ; Py_DECREF ( Py_ASCII_TO_ASCII ( ""<fstring>"" ) <S2SV_ModEnd> ) ; PyMem_RawFree",0
67,<S2SV_ModStart> * c = cJSON_FirstChild ( object ) <S2SV_ModEnd> ; while (,0
68,<S2SV_ModStart> size ) ; if ( px -> ft == NULL ) { return FALSE ; },0
69,"<S2SV_ModStart>, val_l ; <S2SV_ModEnd> val_h = EXTRACT_16BITS <S2SV_ModStart> ptr ) ; <S2SV_ModEnd> val_l = EXTRACT_16BITS <S2SV_ModStart> ptr ) ; <S2SV_ModEnd> val_h = EXTRACT_16BITS <S2SV_ModStart> ptr ) ; <S2SV_ModEnd> val_l = EXTRACT_16BITS <S2SV_ModStart> ptr ) ; <S2SV_ModEnd> val_h = EXTRACT_16BITS",0
70,<S2SV_ModStart> void ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
71,"<S2SV_ModStart> alpha_buffer } ; <S2SV_ModEnd> for ( i <S2SV_ModStart> i ] ; int stride = src -> y_stride * src -> uv_stride * src -> alpha_stride ; <S2SV_ModStart> subsampling_y ) ; if ( stride < 0 ) { printf ( ""stride <S2SV_blank> error\\n"" ) ; }",0
72,"<S2SV_ModStart> = 0 ; bool enc_req = false ; <S2SV_ModStart> -> req, & <S2SV_ModStart> -> req ), & <S2SV_ModEnd> ctx -> completion <S2SV_ModStart> -> completion ) ; enc_req = true <S2SV_ModStart> ; if ( <S2SV_ModEnd> enc_req ) { <S2SV_ModStart> sk ) ; }",0
73,"<S2SV_ModStart> ) ) ; CHECK_MEM_ERROR ( cpi -> mb_activity_map, vpx_calloc ( sizeof ( unsigned int ), cpi -> common. MBs ) ) ;",0
74,<S2SV_ModStart> user ) { <S2SV_ModEnd> cleanup_srcu_struct ( &,0
75,<S2SV_ModStart> int sl = cursor -> reply -> fields. num <S2SV_ModEnd> + 1 ;,0
76,"<S2SV_ModStart> ( n, 0 <S2SV_ModEnd> ) ) == <S2SV_ModStart> ( n, 1 <S2SV_ModEnd> + is_async ) <S2SV_ModStart> ( n, 2 <S2SV_ModEnd> + is_async ) <S2SV_ModStart> ( n, 3 <S2SV_ModEnd> + is_async ) <S2SV_ModStart> ( n, 4 <S2SV_ModEnd> + is_async )",0
77,<S2SV_ModStart> NULL ; } dst_state -> curframe_end = src -> curframe ;,0
78,"<S2SV_ModStart> * mi_8x8, int bsize, <S2SV_ModStart> -> left_available? ( <S2SV_ModStart> - 1 ] ) : 0",0
79,"<S2SV_ModStart> > maxn ) { <S2SV_ModStart> ""Action <S2SV_blank> overflow!!"" ) ; return - 1 ; }",0
80,"<S2SV_ModStart> ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> wb-prep: <S2SV_blank> too <S2SV_blank> short"" ) ) ;",0
81,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
82,<S2SV_ModStart> zArg ) { <S2SV_ModEnd> char * * <S2SV_ModStart> * * azModuleArg ; int i <S2SV_ModStart> } else { <S2SV_ModEnd> azModuleArg [ i <S2SV_ModStart> = 0 ; <S2SV_ModEnd> } } <S2SV_null>,0
83,<S2SV_ModStart> ( j = 0 <S2SV_ModEnd> ; j < <S2SV_ModStart> j < N ; j ++ ) { u_out [ j ] = u [ j ] * u_in [ j ] * u_out [ j ] ; } <S2SV_ModEnd> for ( k,0
84,<S2SV_ModStart> -> dmin ; if ( ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { <S2SV_ModStart> p ) ; },0
85,<S2SV_ModStart> bfqq -> bfqd <S2SV_ModEnd> ; if ( <S2SV_ModStart> flags ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
86,<S2SV_ModStart> ) ) ; cJSON_Delete ( item ) ;,0
87,"<S2SV_ModStart> regs ) ; perf_sw_event_one <S2SV_ModEnd> ( PERF_COUNT_SW_ALIGNMENT_FAULTS, <S2SV_ModStart>, 1, & regs -> regs [ index ] <S2SV_ModEnd>, address )",0
88,<S2SV_ModStart> diffPtr + x + 1 <S2SV_ModStart> extraPtr + y + 1,0
89,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> tclass ) ; rcu_read_unlock ( ) ;,0
90,<S2SV_ModStart> ViffInfo ) ; if ( image -> format == VFF_CM_ntscRGB ) { ViffInfo. color_space_model = VFF_TYP_DOUBLE ; ViffInfo. map_columns = VFF_COLUMNS ; ViffInfo. map_subrows = VFF_SUBROWS ; ViffInfo. map_enable = VFF_MAP_ENABLE ; },0
91,<S2SV_ModStart> data ) { encoder_common_t * common = ( encoder_common_t * ) ctx -> data ; common -> mr_cfg = data ; common -> mr_cfg -> num_enc_mr = data -> num_enc_mr ; common -> mr_cfg -> enc_mr_type = encoder_mr_type_from_cfg ( & common -> enc_mr_cfg ) ;,0
92,<S2SV_ModStart> new_size ) { <S2SV_ModEnd> assert ( new_size <S2SV_ModStart> -> memo_size ) ; Py_ssize_t i,0
93,"<S2SV_ModStart> ( wb, ( uint32_t ) <S2SV_ModStart> ( wb, ( uint32_t )",0
94,<S2SV_ModStart> ; } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
95,<S2SV_ModStart> length ) { if ( length == 0 ) { return 0 ; },0
96,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo <S2SV_ModStart> ; restart : m -> msg_namelen = 0 ;,0
97,"<S2SV_ModStart> msicap msicap ; int rc ; <S2SV_ModStart> msicap, msgnum <S2SV_ModEnd> ) ; return <S2SV_ModStart> ) ) ; rc = <S2SV_ModEnd> pci_emul_add_capability ( dev <S2SV_ModStart> msicap ) ) ; if ( rc ) return rc ; return 0",0
98,"<S2SV_ModStart> ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> no <S2SV_blank> subscribers <S2SV_blank> are <S2SV_blank> allowed"" <S2SV_ModEnd> ) ; return",0
99,"<S2SV_ModStart> VPX_RC_ONE_PASS ) ) VPX_ERROR <S2SV_ModEnd> ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) <S2SV_ModStart> g_lag_in_frames ) ) VPX_ERROR <S2SV_ModEnd> ( ""Cannot <S2SV_blank> increase <S2SV_blank> lag_in_frames"" )",0
100,<S2SV_ModStart> zbin_mode_boost = 0 ; cpi -> mb. zbin_mode_boost = 0 ; cpi -> mb. zbin_mode_boost_shift = 0 ; cpi -> mb. zbin_mode_boost_shift = 1,0
101,"<S2SV_ModStart> >= 0 ) { if ( info -> si_signo == SIGSEGV ) return do_send_sighelp ( tgid, pid, sig, info ) ; <S2SV_ModStart> - EPERM ; }",0
102,<S2SV_ModStart> ; tmp_strsize = <S2SV_ModEnd> ptr -> size <S2SV_ModStart> ; tmp_strsize = <S2SV_ModEnd> ptr -> size,0
103,<S2SV_ModStart> -> priv -> vpx_enc_priv <S2SV_ModEnd> ) ; },0
104,<S2SV_ModStart> mode ) { struct nfs4_state * state_owner = state -> owner ; <S2SV_ModStart> ) return ; if ( state_owner -> state == mode ) { <S2SV_ModStart> ) ; } },0
105,"<S2SV_ModStart> ) ; } if (! p ) { ( void ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s: <S2SV_blank> Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s"", __FILE__, read_info -> filename ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; }",0
106,<S2SV_ModStart> 0 ; } if ( len > 0 ) { <S2SV_ModStart> len ) ; },0
107,"<S2SV_ModStart>, i, <S2SV_ModEnd> JPC_QCX_GETEXPN ( qcd <S2SV_ModStart> i ] ) <S2SV_ModEnd> ; } return",0
108,<S2SV_ModStart> = AV_PIX_FMT_PAL8 ; c -> pix_width = c -> avctx -> width ; c -> pix_height = c -> avctx -> height ;,0
109,"<S2SV_ModStart> ) ; } isoclns_print_iso <S2SV_ModEnd> ( ndo,",0
110,"<S2SV_ModStart> image_noffset ) { <S2SV_ModEnd> char * name <S2SV_ModStart>, err_msg, fdt_get_name <S2SV_ModEnd> ( fit, <S2SV_ModStart>, noffset, FDT_NAME_DEFAULT <S2SV_ModEnd> ), fit_get_name <S2SV_ModStart>, err_msg, fdt_get_name <S2SV_ModEnd> ( fit, <S2SV_ModStart>, noffset, FDT_NAME_DEFAULT <S2SV_ModEnd> ), fit_get_name <S2SV_ModStart>, image_noffset, FDT_NAME_DEFAULT <S2SV_ModEnd> ) ) ;",0
111,"<S2SV_ModStart> rx_kfifo, CX23888_IR_RX_KFIFO_SIZE * 2",0
112,<S2SV_ModStart> ( ( flags & VPX_CODEC_DEC_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_DECODER ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags,0
113,<S2SV_ModStart> ; value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1100WritePhyReg (,0
114,<S2SV_ModStart> = tos ; ipcm_init ( & ipc ) ;,0
115,<S2SV_ModStart> ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags &,0
116,"<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0 <S2SV_ModStart> ; out : if ( msg -> msg_name ) { struct sockaddr_vm * vm_addr ; vm_addr = ( struct sockaddr_vm * ) msg -> msg_name ; vsock_addr_init ( vm_addr, dg -> src. context, dg -> src. resource ) ; msg -> msg_namelen = sizeof ( * vm_addr ) ; }",0
117,"<S2SV_ModStart> counter ) ; encode_open_flags <S2SV_ModEnd> ( xdr,",0
118,"<S2SV_ModStart> ) ; return ; } if (! dev -> bar ) { printf ( ""modify_bar_registration: <S2SV_blank> no <S2SV_blank> BAR <S2SV_blank> to <S2SV_blank> register\\n"" ) ; return",0
119,<S2SV_ModStart> : case 0x90 : case 0x91,0
120,"<S2SV_ModStart> return ERROR_INVALID_REQUEST ; if (! osStrcasecmp ( token, ""HTTP/1.1"" ) ) { connection -> request. version = HTTP_VERSION_1_1 ; connection -> request. keepAlive = TRUE ; } else { <S2SV_ModStart> uri ) ; }",0
121,<S2SV_ModStart> goto trunc ; ND_TCHECK_16 <S2SV_ModEnd> ( lshp -> <S2SV_ModStart> ls_type ) ; ND_TCHECK_16 <S2SV_ModEnd> ( lshp ->,0
122,<S2SV_ModStart> } else { if (! ipipe -> readers ) { <S2SV_ModStart> ibuf ) ; },0
123,"<S2SV_ModStart> vp9_tree tree, const unsigned int num_branches [ ] [ 2 ], <S2SV_ModStart> 2 ], <S2SV_ModEnd> unsigned int num_events <S2SV_ModStart> num_events [ ], const unsigned int num_branches [ ] [ 2 ] <S2SV_ModStart> { convert_distribution ( num_branches <S2SV_ModEnd>, tree,",0
124,<S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ) <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ),1
125,<S2SV_ModStart> probs [ i <S2SV_ModEnd> ] ; int,0
126,"<S2SV_ModStart> * output, __m128i16 <S2SV_ModEnd> * in0, <S2SV_ModStart> * in0, __m128i16 <S2SV_ModEnd> * in1,",0
127,<S2SV_ModStart> & 0xffff ; if ( synth_devs [ dev ] -> load_patch ),0
128,<S2SV_ModStart> = input [ 1 <S2SV_ModEnd> ] ; int <S2SV_ModStart> = input [ 2 <S2SV_ModEnd> ] ; int <S2SV_ModStart> = input [ 3 <S2SV_ModEnd> ] ; int <S2SV_ModStart> = input [ 4 <S2SV_ModEnd> ] ; s0 <S2SV_ModStart> = x0 * cospi_21_64 <S2SV_ModEnd> ; s1 = <S2SV_ModStart> = x1 * cospi_22_64 <S2SV_ModEnd> ; s2 = <S2SV_ModStart> = x2 * cospi_23_64 <S2SV_ModEnd> ; s3 = <S2SV_ModStart> = x4 * cospi_19_64 <S2SV_ModEnd> ; s7 = <S2SV_ModStart> = x5 * cospi_13_64 <S2SV_ModEnd> ; s6 = <S2SV_ModStart> = x6 * cospi_19_64 <S2SV_ModEnd> ; s8 = <S2SV_ModStart> = x8 * cospi_17_64 <S2SV_ModEnd> ; s9 = <S2SV_ModStart> = x8 * cospi_22_64 <S2SV_ModEnd> - x9 * <S2SV_ModStart> - x9 * cospi_21_64 <S2SV_ModEnd> ; s10 = <S2SV_ModStart> = x10 * cospi_22_64 <S2SV_ModEnd> + x11 *,0
129,<S2SV_ModStart> ; # if HAVE_PPC flags |= HAS_PPC ; # endif # if,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
131,"<S2SV_ModStart> * const tile, MODE_INFO * const mode <S2SV_ModStart>, tile, mode, <S2SV_ModStart>, tile, mode,",0
132,<S2SV_ModStart> flags & CLIENT_CLOSE_AFTER_REPLY ) break ; if ( c -> flags & CLIENT_CLOSE_AFTER_REPLY_WITH_CLIENT,0
133,<S2SV_ModStart> get_blocks_flags = EXT4_GET_BLOCKS_CREATE | EXT4_GET_BLOCKS_RESERVE | EXT4_GET_BLOCKS_RESERVE <S2SV_ModEnd> ; blks =,0
134,"<S2SV_ModStart> & p -> ai_protocol <S2SV_ModEnd>, & p <S2SV_ModStart> & p -> ai_family <S2SV_ModEnd>, p -> <S2SV_ModStart> & p -> ai_addrlen <S2SV_ModEnd>, NULL,",0
135,"<S2SV_ModStart> NULL ) { error = strchr ( token, '=' ) ; if ( error!= NULL ) { * separator = '\\0' ; strSafeCopy ( connection -> request. auth. user, token, HTTP_SERVER_USERNAME_MAX_LEN ) ; token = separator + 1 ; connection -> request. auth. password = token ; } else { <S2SV_ModStart> = '\\0' ; }",0
136,"<S2SV_ModStart> pc ) { <S2SV_ModEnd> pc -> fc <S2SV_ModStart> -> fc. default_coef_probs = vpx_memcpy ( & <S2SV_ModEnd> pc -> fc <S2SV_ModStart> -> fc. default_coef_probs <S2SV_ModEnd>, default_coef_probs,",0
137,"<S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
138,"<S2SV_ModStart> asdl_seq * body, PyObject * obj <S2SV_ModStart> = body ; p -> v. Module. obj = obj ;",0
139,<S2SV_ModStart> write_idx ) ; <S2SV_ModEnd> if ( ctx <S2SV_ModStart> -> max_sz == 0 <S2SV_ModEnd> && active_map && <S2SV_ModStart> ; } } <S2SV_ModEnd> buf -> ts_start,0
140,<S2SV_ModStart> 0 ) ; if ( q < 0 ) { lf -> filter_level = 0 ; return ; },0
141,<S2SV_ModStart> BTA_DmSetUpstream ( bd_addr <S2SV_ModEnd> ) ; },0
142,<S2SV_ModStart> '!' : { long <S2SV_ModEnd> a = getnum,0
143,"<S2SV_ModStart> ; if ( ( <S2SV_ModStart> scene == CMYKScene ) || ( LocaleCompare ( image_info -> magick, ""C-MYK"" ) == 0 )",0
144,"<S2SV_ModStart> ; else { vpx_codec_alg_private_t * priv = ctx -> priv -> alg_priv ; <S2SV_ModStart>. decode ( <S2SV_ModEnd> priv, data",0
145,"<S2SV_ModStart> inode * inode, int * error <S2SV_ModStart> ; if ( error ) { * error = - EIO ; goto out_badread ; } if (",0
146,"<S2SV_ModStart> ( outpos, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K <S2SV_blank> "" <S2SV_ModEnd>, c, <S2SV_ModStart> ( outpos, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k <S2SV_blank> "" <S2SV_ModEnd>, c,",0
147,<S2SV_ModStart> self ) { PyObject_GC_UnTrack ( self ) ;,1
148,<S2SV_ModStart> (! i && a,0
149,<S2SV_ModStart> ++ ) { asdl_stmt_ty <S2SV_ModEnd> value ; res <S2SV_ModStart> Py_ssize_t len ; asdl_stmt_ty <S2SV_ModEnd> i ; tmp,0
150,<S2SV_ModStart> in ) { uint8_t <S2SV_ModEnd> buf [ RAS_MAGICLEN,0
151,<S2SV_ModStart> ; } else { <S2SV_ModStart> VERIFY_WRITE ) ; if ( err == - EFAULT ) err = - EFAULT ; },0
152,"<S2SV_ModStart> unsigned ptrs_per_blk ; <S2SV_ModEnd> u64 bn, <S2SV_ModStart> * ptr ; <S2SV_ModEnd> BUG_ON ( sheight <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> if ( height <S2SV_ModStart> * bh ; <S2SV_ModEnd> dblks = gfs2_extent_length <S2SV_ModStart>, maxlen, NULL <S2SV_ModEnd> ) ; BUG_ON <S2SV_ModStart> = min ( dblks, ( unsigned int ) ( <S2SV_ModEnd> ptrs_per_blk - mp <S2SV_ModStart> [ end_of_metadata ] ) <S2SV_ModStart> ; iblks = ( unsigned int ) ( <S2SV_ModStart> [ end_of_metadata ] ) <S2SV_ModStart> mp ) ; <S2SV_ModEnd> } blks =",0
153,"<S2SV_ModStart>, ""Codec: <S2SV_blank> %s\\n"", global -> codec? <S2SV_ModStart> vpx_codec_iface_name ( global <S2SV_ModEnd> -> codec -> <S2SV_ModStart> interface ( ) ) : vpx_codec_iface_name ( global -> codec",0
154,<S2SV_ModStart> -> psvi == XSLT_NS_DEFAULT <S2SV_ModEnd> ) { copyNs,0
155,"<S2SV_ModStart> ) ; } else { fprintf ( stderr, ""Error: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> touch <S2SV_blank> /etc/skel/.zshrc\\n"" ) ; } <S2SV_ModStart> ) ; } else { fprintf ( stderr, ""Error: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> touch <S2SV_blank> /etc/skel/.cshrc\\n"" ) ; }",0
156,<S2SV_ModStart> msix_tab_size ) { <S2SV_ModEnd> bzero ( msixcap,1
157,<S2SV_ModStart> ; if ( re &&,0
158,<S2SV_ModStart> case OFreshOID : <S2SV_ModEnd> sp -- ;,0
159,<S2SV_ModStart> 0 ) { if ( interface -> nicEvent ) { <S2SV_ModStart> ) ; } } <S2SV_ModStart> ) ; } if ( interface -> nicEvent ) { <S2SV_ModStart> ier ) ; },0
160,"<S2SV_ModStart> wb ) { if ( cm -> base_qindex == 0 ) { vp9_wb_write_literal ( wb, 0, QINDEX_BITS ) ; return ; }",0
161,"<S2SV_ModStart> ( ) ; UINT16 written = <S2SV_ModEnd> write ( uipc_main <S2SV_ModStart>, msglen ) ; if ( written <S2SV_ModStart> ) ; } if ( written == msglen ) { BTIF_TRACE_DEBUG ( ""UIPC_Send <S2SV_blank> : <S2SV_blank> ch_id:%d <S2SV_blank> sent <S2SV_blank> %d <S2SV_blank> bytes"", ch_id, written ) ; }",0
162,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> PEERKEY_free ( localrsa ),0
163,<S2SV_ModStart> ( ) ; t1_getline ( ) ;,0
164,<S2SV_ModStart> / 4 ; if ( bsize == 0 ) { return ; },0
165,"<S2SV_ModStart> key_ref ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) { ret = - ENOKEY ; goto error2 ; }",1
166,<S2SV_ModStart> -> u4_error_code |= ( <S2SV_ModStart> 1 << IVD_FRAME_DATA_ERROR ),0
167,"<S2SV_ModStart> var_off ) ; if (! src_known && opcode!= BPF_ADD ) { src_reg. var_off = tnum_add ( src_reg. var_off, src_reg. var_off ) ; src_reg. smin_value = S64_MIN ; src_reg. smax_value = S64_MAX ; dst_reg -> var_off = tnum_add ( dst_reg -> var_off, src_reg. var_off ) ; } <S2SV_ModStart> var_off ) ; if ( src_known && dst_known ) { <S2SV_ModStart> var_off ) ; }",0
168,<S2SV_ModStart> = posix_open ; if (! file_is_dir ( newInode ) ) { cifs_put_inode ( newInode ) ; goto lookup_out ; },0
169,"<S2SV_ModStart> th -> dest, sk -> sk_uid",0
170,<S2SV_ModStart> double y_scale ; SvcInternal * const si = get_svc_internal ( svc_ctx ) ; <S2SV_ModStart> = encode_frame_count / ( double ),0
171,<S2SV_ModStart> = new_cols ; screen -> state -> pos = * delta ;,0
172,"<S2SV_ModStart> ; } } if ( * str == end ) { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; return - 1 ; }",0
173,"<S2SV_ModStart> ( pd, g_settings_dump_location_default <S2SV_ModEnd> ) ; char",0
174,<S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ),0
175,"<S2SV_ModStart> dat ) { <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart>, ""%u"", dat [ 0 ] <S2SV_ModEnd> & L2TP_PROXY_AUTH_ID_MASK )",0
176,"<S2SV_ModStart>, in_what_stride, INT_MAX <S2SV_ModEnd> ) + mv_stride",0
177,"<S2SV_ModStart> mode_info * * const <S2SV_ModStart>, tile, <S2SV_ModEnd> tp, mi_row <S2SV_ModStart>, tile, <S2SV_ModEnd> tp, mi_row",0
178,"<S2SV_ModStart> u_int8_t state ; bool found ; <S2SV_ModStart> NULL ) ; found = false ; <S2SV_ModStart> ; if (! found <S2SV_ModEnd> ) { msg <S2SV_ModStart> = ""nf_ct_dccp: <S2SV_blank> not <S2SV_blank> picking <S2SV_blank> up <S2SV_blank> existing <S2SV_blank> connection <S2SV_blank> "" ; found = true ; <S2SV_ModStart> = ""nf_ct_dccp: <S2SV_blank> invalid <S2SV_blank> state <S2SV_blank> transition <S2SV_blank> "" ; found = true ; <S2SV_ModStart> = 0 ; found = true ; <S2SV_ModStart> return true ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
179,"<S2SV_ModStart> ip_options * opt <S2SV_ModEnd> ) { while <S2SV_ModStart>, opt, IPPROTO_RAW <S2SV_ModEnd> ) ) {",0
180,"<S2SV_ModStart> ""Connection"" ) ; const char * ws_version = http_request_get_header ( info -> request, ""Sec-WebSocket-Version"" ) ; if ( ws_version == NULL || strcmp ( ws_version, ""13"" )!= 0 ) goto error ; <S2SV_ModStart> goto error ; <S2SV_ModEnd> const char * <S2SV_ModStart> goto error ; <S2SV_ModEnd> const char * <S2SV_ModStart> goto error ; <S2SV_ModEnd> const char *",0
181,"<S2SV_ModStart> -> name ) { <S2SV_ModStart> name ) ; if ( plen > RPCAP_NETBUF_SIZE ) { return - 1 ; } } <S2SV_ModStart> } } } } <S2SV_ModStart>, PCAP_ERR_NOREMOTEIF, ""No <S2SV_blank> interfaces <S2SV_blank> found! <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> libpcap/WinPcap <S2SV_blank> is <S2SV_blank> properly <S2SV_blank> installed"" "" <S2SV_blank> and <S2SV_blank> you <S2SV_blank> have <S2SV_blank> the <S2SV_blank> right <S2SV_blank> to <S2SV_blank> access <S2SV_blank> to <S2SV_blank> the <S2SV_blank> remote <S2SV_blank> device."" <S2SV_ModEnd>, errbuf ) <S2SV_ModStart>, PCAP_ERR_NOREMOTEIF, ""No <S2SV_blank> remote <S2SV_blank> interfaces <S2SV_blank> found! <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> libpcap/WinPcap <S2SV_blank> is <S2SV_blank> properly <S2SV_blank> installed"" "" <S2SV_blank> and <S2SV_blank> you <S2SV_blank> have <S2SV_blank> the <S2SV_blank> right <S2SV_blank> to <S2SV_blank> access <S2SV_blank> to <S2SV_blank> the <S2SV_blank> remote <S2SV_blank> device."" <S2SV_ModEnd>, errbuf ) <S2SV_ModStart>, PCAP_ERR_NOREMOTEIF, ""Send <S2SV_blank> to <S2SV_blank> client <S2SV_blank> failed: <S2SV_blank> %s"" <S2SV_ModEnd>, errbuf )",0
182,"<S2SV_ModStart>, client_uid, DUMP_DIR_MODE_DEFAULT <S2SV_ModEnd> ) ; if",0
183,<S2SV_ModStart> ; x += 1 <S2SV_ModEnd> ) { index,0
184,<S2SV_ModStart> a ) { const BN_ULONG * t1 = ( const BN_ULONG * ) r ; const BN_ULONG * <S2SV_ModEnd> t2 = (,0
185,<S2SV_ModStart> ) ; } if ( dds_info. pixelformat. flags & DDPF_LUMINANCE ) { compression = NoCompression ; } else { compression = NoCompression ; },0
186,<S2SV_ModStart> ; if ( ndo -> ndo_vflag &&,0
187,"<S2SV_ModStart>! ptrace_has_cap ( task_cred ( task ) -> user_ns, mode ) &&! ptrace_has_cap (",0
188,<S2SV_ModStart> maxval ) { size_t i ; size_t <S2SV_ModEnd> j ; jas_seqent_t,0
189,<S2SV_ModStart> SEI_USER_DATA_REGISTERED_ITU_T_T36 : case SEI_USER_DATA_REGISTERED_ITU_T_T36_1 <S2SV_ModEnd> : case SEI_USER_DATA_REGISTERED_ITU_T_T36_2,0
190,"<S2SV_ModStart> ; sde = hfi1_sdma_alloc_sdma_engine ( dd, <S2SV_ModEnd> this_idx ) ; <S2SV_ModStart> ; sde = hfi1_sdma_alloc_sdma_engine ( dd, <S2SV_ModEnd> this_idx ) ; <S2SV_ModStart> ; sde = hfi1_sdma_alloc_sdma_engine ( dd, <S2SV_ModEnd> this_idx ) ; <S2SV_ModStart> ; sde = hfi1_sdma_alloc_sdma_engine ( dd, <S2SV_ModEnd> this_idx ) ; <S2SV_ModStart> ; sde = hfi1_sdma_alloc_sdma_engine ( dd, <S2SV_ModEnd> this_idx ) ; <S2SV_ModStart> ; sde = hfi1_sdma_alloc_sdma_engine ( dd, <S2SV_ModEnd> this_idx ) ; <S2SV_ModStart> ; sde = hfi1_sdma_alloc_sdma_engine ( dd, <S2SV_ModEnd> this_idx ) ;",0
191,"<S2SV_ModStart>, int rep_quick, ulong * pack_reclength <S2SV_ModStart> ; ulong max_pack_reclength <S2SV_ModEnd> ; int error <S2SV_ModStart> T_SILENT ) ) <S2SV_ModEnd> printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"" <S2SV_ModStart> name ) ; <S2SV_ModEnd> param -> testflag <S2SV_ModStart> |= T_CALC_CHECKSUM ; <S2SV_ModEnd> bzero ( ( <S2SV_ModStart>, ( ""is <S2SV_blank> quick <S2SV_blank> repair: <S2SV_blank> %d\\n"" <S2SV_ModEnd>, rep_quick ) <S2SV_ModStart> ) ) ; <S2SV_ModEnd> sort_info. mutex <S2SV_ModStart> sort_info. mutex <S2SV_ModEnd> ) ; bzero <S2SV_ModStart>, ( ""is <S2SV_blank> quick <S2SV_blank> repair: <S2SV_blank> %d\\n"" <S2SV_ModEnd>, rep_quick ) <S2SV_ModStart> ) ) ; <S2SV_ModEnd> sort_info. cond <S2SV_ModStart>, ( ""is <S2SV_blank> quick <S2SV_blank> repair: <S2SV_blank> %d\\n"" <S2SV_ModEnd>, rep_quick ) <S2SV_ModStart>, ( ""is <S2SV_blank> repair: <S2SV_blank> %d\\n"" <S2SV_ModEnd>, rep_quick )",0
192,<S2SV_ModStart> } pairs = ( Pairs * ),0
193,"<S2SV_ModStart> val ) ; if (! <S2SV_ModStart>, val ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> invalid <S2SV_blank> variable"", r -> name )",0
194,"<S2SV_ModStart> ) ) { if ( 0 == strncmp ( v, ""Connection"", 7 ) ) { <S2SV_ModStart> = AGOO_ERR_OK ; } else { err. code = AGOO_ERR_NOT_FOUND ; }",0
195,<S2SV_ModStart> } else { # ifdef __FreeBSD__ int16_t out [ 256 ] ; # else <S2SV_ModStart> 0 ] ; # endif,0
196,"<S2SV_ModStart>, escaped_arch, NULL,",0
197,"<S2SV_ModStart> '\\0' ) ; const list_node_t * section_end = list_end ( config -> sections ) ; <S2SV_ModStart> ( fp, ""[%s] <S2SV_blank> = <S2SV_blank> %s"" <S2SV_ModEnd>, section -> <S2SV_ModStart> section -> name, section -> value <S2SV_ModStart> ( fp, ""%s <S2SV_blank> = <S2SV_blank> %s"" <S2SV_ModEnd>, entry -> <S2SV_ModStart> ( fp, ""%s\\n"" <S2SV_ModEnd>, filename )",0
198,"<S2SV_ModStart> ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> VLAN <S2SV_blank> %s"" <S2SV_ModEnd>, vtp_vlan ->",0
199,"<S2SV_ModStart> userData, target <S2SV_ModEnd> ) ; ctxt",0
200,"<S2SV_ModStart> ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.1\\r\\n"" ""Content-Type: <S2SV_blank> application/json\\r\\n"" ""Content-Length: <S2SV_blank> %ld\\r\\n"" <S2SV_ModEnd> ""%s"" ""\\r\\n"" ""%s""",0
201,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
202,<S2SV_ModStart> return NULL ; if (! <S2SV_ModStart>. comp ) ) { kfree ( fcstats ) ; return NULL ; } <S2SV_ModEnd> hstats -> seconds_since_last_reset,0
203,"<S2SV_ModStart> -> x = clamp ( <S2SV_ModStart> value -> x, 0.0f <S2SV_ModStart> -> y = clamp ( <S2SV_ModStart> value -> y, 0.0f <S2SV_ModStart> -> z = clamp ( <S2SV_ModStart> value -> z, 0.0f",0
204,<S2SV_ModStart> ; rec -> sasl_username_len = strlen ( src -> sasl_username ) ; rec -> sasl_password_len = strlen ( src -> sasl_password ) ; rec -> sasl_password <S2SV_ModEnd> = src ->,0
205,"<S2SV_ModStart>, 1, <S2SV_ModEnd> cm -> mb_rows <S2SV_ModStart> cm -> mb_rows * <S2SV_ModEnd> cm -> mb_cols <S2SV_ModStart> cm -> mb_cols <S2SV_ModEnd> ; cpi ->",0
206,"<S2SV_ModStart> o, datao ; ExifShort d <S2SV_ModStart> return ; } d = exif_get_short ( buf + datao, n -> order ) ; datao += 2 ; <S2SV_ModStart> ( CHECKOVERFLOW ( d <S2SV_ModEnd>, buf_size, <S2SV_ModStart> ( buf + d <S2SV_ModEnd>, n -> <S2SV_ModStart> ( buf + d <S2SV_ModEnd> + 2, <S2SV_ModStart> ( buf + d <S2SV_ModEnd> + 4, <S2SV_ModStart> ( buf + d <S2SV_ModEnd> + 4, <S2SV_ModStart> ( buf + d <S2SV_ModEnd> + 8,",0
207,<S2SV_ModStart> ; if ( <S2SV_ModEnd>! ( share <S2SV_ModStart> ) ) { <S2SV_ModEnd> DBUG_RETURN ( 0,0
208,"<S2SV_ModStart> hex ) ; if (! <S2SV_ModEnd> Curl_convert_from_network ( handle <S2SV_ModStart>, 1 ) <S2SV_ModEnd> ) { free",0
209,<S2SV_ModStart> 4 ) ; int s = ( ( buf [ 0 ] >> 4 ) & 0x1 ) << 4 ; <S2SV_ModStart> op -> size + s <S2SV_ModStart> op -> size + s,0
210,"<S2SV_ModStart> ; def -> encode_forward_forward = usm_secmod_process_in_msg ; def -> <S2SV_ModStart> = usm_create_user_from_session_hook ; def -> post_probe_engineid = usm_create_user_from_session_hook ; <S2SV_ModStart>, ""defAuthType"", snmpv3_authtype_conf <S2SV_ModEnd>, NULL, <S2SV_ModStart>, NULL, ""MD5|SHA|SHA-512|SHA-384|SHA-256|SHA-224"" <S2SV_ModEnd> ) ; register_config_handler <S2SV_ModStart>, ""defPrivType"", snmpv3_authtype_conf <S2SV_ModEnd>, NULL, <S2SV_ModStart>, NULL, ""SHA-256|SHA-224"" <S2SV_ModEnd> ) ; snmp_register_callback <S2SV_ModStart>, ""defAuthType"", snmpv3_authtype_conf <S2SV_ModEnd>, NULL, <S2SV_ModStart>, NULL, ""MD5|SHA|SHA-512|SHA-384|SHA-256|SHA-224"" <S2SV_ModEnd> ) ; register_config_handler <S2SV_ModStart>, ""defPrivType"", snmpv3_authtype_conf <S2SV_ModEnd>, NULL, <S2SV_ModStart>, NULL, ""MD5|SHA-512|SHA-384|SHA-256|",0
211,<S2SV_ModStart> NULL ; return <S2SV_ModEnd> match ( prog,0
212,<S2SV_ModStart> idx ] ; <S2SV_ModEnd> switch ( action <S2SV_ModStart> cache ) ; <S2SV_ModEnd> return SNMP_ERR_NOERROR ;,0
213,<S2SV_ModStart> ; } } <S2SV_ModEnd> return ( i,0
214,<S2SV_ModStart> open_list ) { <S2SV_ModEnd> list_move_tail ( & <S2SV_ModStart> = NULL ; list_del_init ( & slave -> ack_list ) ;,0
215,<S2SV_ModStart> -> u4_bitoffset = ih264d_read_mmco_commands_first_mb <S2SV_ModEnd> ( ps_dec ),0
216,<S2SV_ModStart> -> originalHeight ; if ( widthOverflow > 0 || heightOverflow > 0 ) { <S2SV_ModStart>. Height ; <S2SV_ModEnd> void * tmpRasterBits <S2SV_ModStart> ) ; } },0
217,<S2SV_ModStart> NULL ) || ( conn -> validator -> passwd. len == 0 ) ||,0
218,<S2SV_ModStart> bus ] ; if ( bi == NULL ) return <S2SV_ModEnd> ; si =,0
219,<S2SV_ModStart> nonblock ) ; if ( timeo < 0 ) { ret = - EINVAL ; goto out ; },0
220,<S2SV_ModStart> += 9 ; ( <S2SV_ModStart> isspace ( * ( ++ t ) <S2SV_ModEnd> ) ; s <S2SV_ModStart> ) ; t ++ <S2SV_ModEnd> ; free (,0
221,"<S2SV_ModStart>. active_set ; if ( uipc_main. read_set == - 1 ) { BTIF_TRACE_EVENT ( ""read <S2SV_blank> set <S2SV_blank> is <S2SV_blank> empty"" ) ; continue ; }",0
222,<S2SV_ModStart> msixcap msixcap ; int rc ; <S2SV_ModStart> msix_size ) ; rc = <S2SV_ModEnd> pci_emul_add_capability ( dev <S2SV_ModStart> msixcap ) ) ; if ( rc ) return rc ; return 0,0
223,"<S2SV_ModStart> max ) { int bits = get_unsigned_bits ( max ) ; <S2SV_ModStart> ( rb, bits <S2SV_ModEnd> ) ; return",0
224,<S2SV_ModStart> == NULL ) { PK5_FREE_CERTIFICATE_AND_ISSUER_AND_SERIAL ( is ) ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> serial ) ; PK5_FREE_CERTIFICATE_AND_ISSUER_AND_SERIAL <S2SV_ModEnd> ( is ),0
225,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> if ( cpi <S2SV_ModStart> TX_MODE_SELECT ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
226,<S2SV_ModStart> ( im -> gdes [ i ]. cf == CF_HWPREDICT ) magfact = mag_calc ( im -> gdes [ i ]. data [ ii ] ) ; else magfact = mag_calc ( im -> gdes [ i ]. data [ ii ] ) ; prline_cnt ++ ; if ( magfact < 0 ) magfact = 0 ; if ( magfact > 0 ) prline_cnt ++ ; if ( magfact > 0 ) prline_cnt ++ ; <S2SV_ModEnd> break ; case,0
227,<S2SV_ModStart> buf1 -> size > <S2SV_ModEnd> buf2 -> size <S2SV_ModStart> buf1 -> size < <S2SV_ModEnd> buf2 -> size,0
228,<S2SV_ModStart> ) + size ; if ( unlikely (! sz ) ) return NULL,0
229,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,1
230,"<S2SV_ModStart> ( ) ; if ( in_atomic ( ) ||! mm ) goto no_context ; down_read ( & mm -> mmap_sem ) ; <S2SV_ModStart> regs, address <S2SV_ModEnd> ) ; vma",0
231,"<S2SV_ModStart> fd, EPOLLIN | EPOLLET",0
232,<S2SV_ModStart> ( ) ; errors += test_curl_off_t_formatting ( ) ;,0
233,<S2SV_ModStart> -> lun ) sas_eh_finish_cmd <S2SV_ModEnd> ( cmd ),1
234,"<S2SV_ModStart> ( is_async ) { if ( TYPE ( CHILD ( n, name_i + 2 ) ) == RARROW ) { returns = ast_for_expr ( c, CHILD ( n, name_i + 2 ) ) ; if (! returns ) return NULL ; name_i += 2 ; } <S2SV_ModStart> ) ; } }",0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,<S2SV_ModStart> = 0 ; image -> bitmap_used = 0 ;,0
237,"<S2SV_ModStart> ) ) ; cJSON_AddItemToArray ( array, item ) ;",0
238,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
239,<S2SV_ModStart> -> headend ) { <S2SV_ModStart> psf ) ; } <S2SV_ModStart> -> headindex = ( int ) <S2SV_ModStart> psf -> headend ; if ( position > psf -> headend ) { psf -> headend = ( int ) position ; } <S2SV_ModEnd> break ; case,0
240,<S2SV_ModStart> u4_ofst ) ; ps_cabac -> au1_ctxt_models [ 0 ] = ps_cabac -> u4_ofst ;,0
241,<S2SV_ModStart> ; } } if (! ret ),0
242,<S2SV_ModStart> event ) { <S2SV_ModEnd> if (! <S2SV_ModStart> if (! event -> ctx <S2SV_ModEnd> ) { cpu_function_call <S2SV_ModStart> lock ) ; <S2SV_ModEnd> goto retry ;,0
243,<S2SV_ModStart> noise_level ; # ifdef <S2SV_ModEnd> CONFIG_POSTPROC_VISUALIZER flags ->,0
244,<S2SV_ModStart> = 0 ; if ( is_ipv6 ) { msgptr. v6 = ( const struct olsr_msg6 * ) tptr ; msg_type = msgptr. v6 -> msg_type ; msg_len = EXTRACT_16BITS ( msgptr. v6 -> msg_len ) ; msg_len_valid = 1 ; } else { <S2SV_ModStart> ) ) ; <S2SV_ModEnd> msgptr. v6 <S2SV_ModStart> ) ; } <S2SV_ModEnd> msg_type = msgptr <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( msg_len_valid,0
245,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> int64_t store_reg [ <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vpx_usec_timer_start ( & <S2SV_ModStart> - 1 ; <S2SV_ModEnd> return res ;,0
246,"<S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file <S2SV_blank> %s\\n"", src <S2SV_ModEnd> ) ; exit",0
247,<S2SV_ModStart> = stop_patch ; if ( stop_patch > 0 ) { <S2SV_ModStart> = 0 ; },0
248,"<S2SV_ModStart> prov_spec = parsed_require_line <S2SV_ModEnd> ; spec = <S2SV_ModStart>, APLOG_ERR, 0 <S2SV_ModEnd>, r, <S2SV_ModStart>, APLOG_ERR, 0 <S2SV_ModEnd>, r, <S2SV_ModStart>, APLOG_ERR, 0 <S2SV_ModEnd>, r, <S2SV_ModStart>, APLOG_ERR, 0 <S2SV_ModEnd>, r, <S2SV_ModStart>, APLOG_ERR, 0 <S2SV_ModEnd>, r, <S2SV_ModStart>, APLOG_ERR, 0 <S2SV_ModEnd>, r, <S2SV_ModStart>, APLOG_ERR, 0 <S2SV_ModEnd>, r, <S2SV_ModStart>, APLOG_ERR, 0 <S2SV_ModEnd>, r, <S2SV_ModStart>, APLOG_ERR, 0 <S2SV_ModEnd>, r,",0
249,"<S2SV_ModStart> row ) ; if ( row > image_info -> num_samples ) ThrowReaderException ( CorruptImageError, ""Invalid <S2SV_blank> image <S2SV_blank> row <S2SV_blank> %zu <S2SV_blank> for <S2SV_blank> DPX <S2SV_blank> file"", row ) ;",0
250,<S2SV_ModStart> (! proto_end ||! * proto_end,0
251,<S2SV_ModStart> tag ) { case FDT_END : return 0 ;,0
252,<S2SV_ModStart> ( server. bgsavechildpid!= - 1 && server. bgrewritechildpid!= - 1 ) { if ( server. maxidletime &&! ( loops % 100 ) ) closeTimedoutClients ( ) ; } if ( server.,0
253,"<S2SV_ModStart> = g_timeout_add_seconds ( 10 <S2SV_ModEnd>, ( GSourceFunc",0
254,<S2SV_ModStart> j ++ ) { <S2SV_ModStart> ; } } },0
255,"<S2SV_ModStart> action ) { double x = r * BzK ; double y = r * BzK ; <S2SV_ModStart>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> %12.3f <S2SV_blank> c\\n"", x, y, y <S2SV_ModEnd>, r * <S2SV_ModStart>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", x, y <S2SV_ModEnd>, r * <S2SV_ModStart>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c <S2SV_blank> %s\\n"", x, y, y <S2SV_ModEnd>, - r",0
256,<S2SV_ModStart> 0 ] = vp9_convolve_copy_horiz <S2SV_ModEnd> ; sf -> <S2SV_ModStart> 1 ] = vp9_convolve_copy_vert <S2SV_ModEnd> ; sf -> <S2SV_ModStart> 0 ] = vp9_convolve_copy_vert <S2SV_ModEnd> ; sf -> <S2SV_ModStart> 1 ] = vp9_convolve_copy_vert <S2SV_ModEnd> ; sf -> <S2SV_ModStart> 0 ] = vp9_convolve_copy_vert <S2SV_ModEnd> ; sf -> <S2SV_ModStart> 1 ] = vp9_convolve_copy_vert <S2SV_ModEnd> ; sf -> <S2SV_ModStart> 1 ] = vp9_convolve_copy_vert <S2SV_ModEnd> ; sf -> <S2SV_ModStart> 0 ] = vp9_convolve_copy_vert <S2SV_ModEnd> ; sf -> <S2SV_ModStart> 1 ] = vp9_convolve_copy_vert <S2SV_ModEnd> ; sf ->,0
257,<S2SV_ModStart>! sock || count == 0 ||,0
258,<S2SV_ModStart> skb ) ; msg. msg_flags |= MSG_DONTWAIT ;,0
259,<S2SV_ModStart> ( ) ; unregister_netdevice_subsys ( & sctp_net_ops ) ;,0
260,"<S2SV_ModStart> -> psnr_samples_total, 255.0f <S2SV_ModEnd>, ( double",0
261,"<S2SV_ModStart> name ) { size_t len = strlen ( name ) ; <S2SV_ModStart> = malloc ( len <S2SV_ModEnd> + 16 ) <S2SV_ModStart> 16 ) ; dst_name = malloc ( len + 1 ) ; <S2SV_ModStart>, ""%s/%s"", name, name ) ; dst_name [ len ] = 0 <S2SV_ModEnd> ; if (",0
262,"<S2SV_ModStart> ; TRACE_DEBUG ( ""CIDER=0x%04"" <S2SV_ModEnd> PRIX16 ""\\r\\n"", <S2SV_ModStart> ; TRACE_DEBUG ( ""PHY1ILR=0x%04"" <S2SV_ModEnd> PRIX16 ""\\r\\n"", <S2SV_ModStart> ; TRACE_DEBUG ( ""PHY1IHR=0x%04"" <S2SV_ModEnd> PRIX16 ""\\r\\n"", <S2SV_ModStart> ERROR_OUT_OF_MEMORY ; } memset ( context -> txBuffer, 0, ETH_MAX_FRAME_SIZE ) ; memset ( context -> rxBuffer, 0, ETH_MAX_FRAME_SIZE ) ;",0
263,"<S2SV_ModStart> skip } ; int plane_idx = plane ; for ( int i = 0 ; i < xd -> mi [ 0 ] -> mbmi. num_planes ; i ++ ) { if ( xd -> mi [ i ] -> mbmi. num_planes == plane_idx ) { encode_block_intra ( xd, xd -> mi [ 0 ] -> mbmi. num_planes, & arg ) ; break ; } }",0
264,"<S2SV_ModStart> ) ) { bootm_error ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"" <S2SV_ModEnd>, prop_name )",0
265,"<S2SV_ModStart> 0 ) { if ( <S2SV_ModStart>, UI_DEV_DESTROY ) < 0 ) BTIF_TRACE_ERROR ( ""%s"", ""ioctl <S2SV_blank> failed"" )",0
266,<S2SV_ModStart> ( rc -> bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> bandwidth <S2SV_ModEnd> * rc ->,0
267,"<S2SV_ModStart> i ], ""--allow-trusted-mode"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-trusted-mode"" ) ; if ( strcmp ( argv [ i ],",0
268,<S2SV_ModStart> o ) { return NULL <S2SV_ModEnd> ; } switch,0
269,<S2SV_ModStart> ib ] ; <S2SV_ModEnd> dequant_ptr = d,1
270,"<S2SV_ModStart> FN_REFLEN ] ; my_strlcpy <S2SV_ModEnd> ( buff,",0
271,"<S2SV_ModStart> decrypt_cb ) { ptrdiff_t <S2SV_ModEnd> n = ( <S2SV_ModStart> n = ( ptrdiff_t <S2SV_ModEnd> ) ( data_end <S2SV_ModStart> ) n = ( int ) ( data_end - data ) <S2SV_ModEnd> ; pbi -> <S2SV_ModStart> clear_buffer, n ) ; xd -> corrupted = 0 ; xd -> corrupted_length = 0 ; xd -> corrupted_count = 0 ; xd -> corrupted_count = 0 ; xd -> corrupted_count = 0 ; xd -> corrupted_count = 0 ; xd -> corrupted_count = 0 ; xd -> corrupted_count = 0 ; xd -> corrupted_count = 0 ; xd -> corrupted_count = 0 ; xd -> corrupted_count = 0",0
272,<S2SV_ModStart> errmsg ) ; <S2SV_ModEnd> free_server_handle ( handle,0
273,<S2SV_ModStart> CONFIG_TEMPORAL_DENOISING unsigned int <S2SV_ModEnd> best_sse = INT_MAX <S2SV_ModStart> = INT_MAX ; <S2SV_ModEnd> # endif mode_mv <S2SV_ModStart>. intra_rd = 0 <S2SV_ModEnd> ; for ( <S2SV_ModStart>. intra_sse = 0 <S2SV_ModEnd> ; for ( <S2SV_ModStart>. intra_sse = 0 <S2SV_ModEnd> ; for ( <S2SV_ModStart>. intra_sse = 0 <S2SV_ModEnd> ; for ( <S2SV_ModStart>. intra_sse = 0 <S2SV_ModEnd> ; for ( <S2SV_ModStart>. intra_sse = 0 <S2SV_ModEnd> ; for ( <S2SV_ModStart>. intra_sse = 0 <S2SV_ModEnd> ; for ( <S2SV_ModStart>. intra_sse = 0 <S2SV_ModEnd> ; for ( <S2SV_ModStart>. intra_sse = 0 <S2SV_ModEnd> ; for ( <S2SV_ModStart>. intra_sse = 0 <S2SV_ModEnd> ; for (,0
274,<S2SV_ModStart> goto error ; if ( statbuf. st_size == 0 ) goto error ;,0
275,"<S2SV_ModStart> u1_level_idc, u1_seq_parameter_set_id, u1_frame_cropping_flag <S2SV_ModStart>, u1_frame_cropping_rect_bottom_ofst ; <S2SV_ModEnd> u1_profile_idc = ih264d_get_bits_h264 <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> uc_constraint_set0_flag = ih264d_get_bit_h264 <S2SV_ModStart> ( ""SPS: <S2SV_blank> profile_idc"", u1_profile_idc <S2SV_ModEnd> ) ; uc_constraint_set1_flag <S2SV_ModStart> ( ""SPS: <S2SV_blank> pic_height_in_map_units_minus1"", u2_pic_wd <S2SV_ModEnd> ) ; u2_frm_wd_y <S2SV_ModStart> ( ""SPS: <S2SV_blank> pic_ht"", u2_pic_ht <S2SV_ModEnd> ) ; u2_frm_wd_uv <S2SV_ModStart> ( ""SPS: <S2SV_blank> pic_wd"", u2_pic_wd <S2SV_ModEnd> ) ; u2_frm_ht_y <S2SV_ModStart> ( ""SPS: <S2SV_blank> pic_ht"", u2_pic_ht <S2SV_ModEnd> ) ; u2_frm_wd_uv <S2SV_ModStart> ( ""SPS",0
276,<S2SV_ModStart> -> temporal_layer ; if ( params -> width == 0 || params -> height == 0 ) { return VPX_CODEC_INVALID_PARAM ; },0
277,"<S2SV_ModStart> bitspersample, samplesperpixel <S2SV_ModEnd> ; uint32 width <S2SV_ModStart> compression ) ; <S2SV_ModEnd> if ( compression <S2SV_ModStart> COMPRESSION_JPEG ) { <S2SV_ModEnd> TIFFSetField ( out <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( compression",0
278,<S2SV_ModStart> ) ) { archive_set_errno <S2SV_ModEnd> ( & a <S2SV_ModStart> ) ) { archive_set_errno <S2SV_ModEnd> ( & a <S2SV_ModStart> 0 ) { archive_set_errno <S2SV_ModEnd> ( & a <S2SV_ModStart> ) ) { archive_set_errno <S2SV_ModEnd> ( & a <S2SV_ModStart> 0 ) { archive_set_errno <S2SV_ModEnd> ( & a <S2SV_ModStart> } else { archive_set_errno <S2SV_ModEnd> ( & a <S2SV_ModStart> ARCHIVE_FAILED ) { archive_set_errno <S2SV_ModEnd> ( & a <S2SV_ModStart> ) ) { archive_set_errno <S2SV_ModEnd> ( & a <S2SV_ModStart> ) ) { archive_set_errno <S2SV_ModEnd> ( & a <S2SV_ModStart> ARCHIVE_FAILED ) { archive_set_errno <S2SV_ModEnd> ( & a <S2SV_ModStart> 0 ) { archive_set_errno <S2SV_ModEnd> ( & a <S2SV_ModStart> } else { archive_set_errno <S2SV_ModEnd> ( & a,0
279,"<S2SV_ModStart> unsigned int link_count ; __le16 icb_tag <S2SV_ModStart> ibh ) { icb_tag = fe -> icbTag. strategyType ; <S2SV_ModStart> -> i_location, icb_tag <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> -> i_location, icb_tag <S2SV_ModEnd>, sizeof (",0
280,<S2SV_ModStart> TX_SIZE tx_size_uv = get_tx_size <S2SV_ModEnd> ( mbmi ),0
281,<S2SV_ModStart> mq_ops ) { spin_lock_irqsave_nested <S2SV_ModEnd> ( & fq <S2SV_ModStart> mq_ops ) ; spin_unlock_irqrestore_nested <S2SV_ModEnd> ( & fq,0
282,<S2SV_ModStart> uint8_t val ; if ( addr > vdev -> config_len ) { <S2SV_ModStart> config ) ; <S2SV_ModEnd> return ( uint32_t <S2SV_ModStart> - 1 ; },0
283,"<S2SV_ModStart> ) ) { ovalue = NULL ; <S2SV_ModStart> ) continue ; if (! ovalue ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; }",0
284,<S2SV_ModStart> ) sizeof ( effect_param_t_t <S2SV_ModEnd> ) ) {,0
285,<S2SV_ModStart> ; } } k5free ( key_data ) ;,0
286,<S2SV_ModStart> 0x02 ) ; sc_memcpy <S2SV_ModEnd> ( sbuf +,0
287,<S2SV_ModStart> macvlan_cnt ) ; i40e_update_macvlans ( vsi ) ;,0
288,"<S2SV_ModStart> ; } } return send_msg ( g, ""E01"" ) ;",0
289,"<S2SV_ModStart> uchar * dataptr, * tmp <S2SV_ModStart> entno ] ; tmp = ent -> data ; <S2SV_ModStart> ; dataptr = tmp <S2SV_ModEnd> ; datacnt = <S2SV_ModStart> = ( dataptr + <S2SV_ModEnd> 4 ) { <S2SV_ModStart> = ( dataptr + <S2SV_ModEnd> 4 ) << <S2SV_ModStart> = ( dataptr + <S2SV_ModEnd> 4 ) << <S2SV_ModStart> = ( dataptr + <S2SV_ModEnd> 4 ) << <S2SV_ModStart> = ( dataptr + <S2SV_ModEnd> 4 ) << <S2SV_ModStart> = ( dataptr + <S2SV_ModEnd> 4 ) << <S2SV_ModStart> = ( dataptr + <S2SV_ModEnd> 4 ) << <S2SV_ModStart> = ( dataptr + <S2SV_ModEnd> 4 ) ; <S2SV_ModStart> = ( dataptr + <S2SV_ModEnd> 4 ) << <S2SV_ModStart> = ( dataptr + <S2SV_ModEnd> 4 ) <<",0
290,<S2SV_ModStart> -> mb_stride ; xd -> mb_stride = recon_y_stride ;,0
291,<S2SV_ModStart> ) ; } if ( image -> format == ImageFormatMPEG4 || image -> format == ImageFormatMPEG4_V4 ) { image = DestroyImageList ( image ) ; return ( ( Image * ) NULL ) ; },0
292,"<S2SV_ModStart> char * end ; int kind ; void * data ; Py_ssize_t len, i <S2SV_ModStart> 0x80 ) { <S2SV_ModEnd> w = decode_utf8",0
293,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> enum { YES <S2SV_ModStart> ""Unexpected <S2SV_blank> off_t/time_t <S2SV_blank> size"" ) ; <S2SV_ModEnd> mask = umask <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> if ( src <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( atomicio <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( atomicio <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( atomicio <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( atomicio <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( atomicio <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( atomicio <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
294,<S2SV_ModStart> test ) { return,0
295,<S2SV_ModStart> ; oci -> <S2SV_ModEnd> fb_idx_ref_cnt [ 0,0
296,"<S2SV_ModStart> ) return ; <S2SV_ModEnd> ta = ( <S2SV_ModStart> ++ ) { vpx_memcpy ( & t_above, x -> e_mbd. above_context, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; vpx_memcpy ( & t_left, x -> e_mbd. left_context, sizeof ( ENTROPY_CONTEXT_PLANES ) ) ;",0
297,<S2SV_ModStart> -> u1_err_flag & REJECT_CUR_PIC_SLICE <S2SV_ModEnd> ) { ih264d_err_pic_dispbuf_mgr,0
298,<S2SV_ModStart> 1 ] ) { <S2SV_ModStart> ] ) ; },0
299,<S2SV_ModStart> { err = nanosleep_timeout <S2SV_ModEnd> ( & delay,0
300,"<S2SV_ModStart> one, offset <S2SV_ModEnd> ; ssize_t count <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> } if (",0
301,"<S2SV_ModStart> value ) { cchar * name = sclone ( value ) ; <S2SV_ModStart>, stok ( name <S2SV_ModEnd>, "" <S2SV_blank> \\t,"", <S2SV_ModStart> -> endpoints = name <S2SV_ModEnd> ; } }",0
302,"<S2SV_ModStart> ),. search_data. search = type -> search,.",0
303,<S2SV_ModStart> ntime ) { <S2SV_ModEnd> free ( job_id,0
304,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, length ) )",0
305,"<S2SV_ModStart> unused ) { return ast_type_reduce_impl <S2SV_ModEnd> ( self, <S2SV_ModStart> ( self, unused, NULL <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
306,"<S2SV_ModStart> ) & desc, sizeof ( * desc )",1
307,<S2SV_ModStart> perf_event * ) ; struct perf_event * output_event <S2SV_ModStart> ret ; } <S2SV_ModEnd> default : return,0
308,<S2SV_ModStart> MB_PREDICTION_MODE y_mode ) { if ( cm -> fc. uv_mode_prob [ y_mode ] == 0 ) return MB_PREDICTION_MODE_NONE ; <S2SV_ModEnd> MB_PREDICTION_MODE uv_mode =,0
309,<S2SV_ModStart> sha -> type == CCP_SHA_TYPE_1? CCP_SHA1_1_OP : CCP_SHA1_1_OP_SHA2 <S2SV_ModEnd> ) ; },0
310,"<S2SV_ModStart> iv ) ; if (! NIL_P ( viter ) ) { VALUE vpass = RSTRING_PTR ( viter ) ; VALUE vsalt = RSTRING_PTR ( vsalt ) ; int iter = NUM2INT ( viter ) ; EVP_KeyInit ( EVP_CIPHER_CTX_cipher ( ctx ), digest, salt, key, iv, iter ) ; if (! NIL_P ( vpass ) ) { VALUE vpass = Qnil ; EVP_KeyInit ( EVP_CIPHER_CTX_cipher ( ctx ), digest, key, iv, iter ) ; ossl_raise ( eCipherError, NULL ) ; } }",0
311,"<S2SV_ModStart> s ) ; register_netdev_vm <S2SV_ModEnd> ( dev, <S2SV_ModStart>, ""stellaris_enet"", <S2SV_ModEnd> 1, 1",0
312,<S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_session_is_fatal ( rv <S2SV_ModStart> ( rv ) ) { return rv ; } <S2SV_ModEnd> if ( session,0
313,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> return 0 ;,0
314,"<S2SV_ModStart> vp9_extra_bits [ t ] ; const int e = p -> extra ; int v = e & 1 <S2SV_ModEnd> ; int n <S2SV_ModStart> ; int n <S2SV_ModEnd> = b -> <S2SV_ModStart> ( w, v <S2SV_ModEnd>, e &",0
315,<S2SV_ModStart> struct vp9_write_bit_buffer saved_wb ; if ( cpi -> state == VP9_COMPENSATED ) return,0
316,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> dev_get_valid_name ( struct <S2SV_ModStart> ) ) return false <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) return false <S2SV_ModEnd> ; else if <S2SV_ModStart> ) ) return false <S2SV_ModEnd> ; else if <S2SV_ModStart> IFNAMSIZ ) ; else return true <S2SV_ModEnd> ; } <S2SV_null>,0
317,"<S2SV_ModStart> * typedata ; const unsigned char * dext ; <S2SV_ModStart> ext ) ; dext = ext + sizeof ( struct ikev2_id ) ; <S2SV_ModStart> & id, dext <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> ( tpay ), dext <S2SV_ModStart> - sizeof ( dext <S2SV_ModEnd> ) ; dumpascii <S2SV_ModStart> ) ) ; if ( dext ) <S2SV_ModStart> ( ndo, dext <S2SV_ModEnd> + sizeof ( <S2SV_ModStart> ( ndo, dext <S2SV_ModEnd> + sizeof ( <S2SV_ModStart> ( ndo, dext <S2SV_ModEnd> + sizeof ( <S2SV_ModStart> ( ndo, dext <S2SV_ModEnd> + sizeof (",0
318,<S2SV_ModStart> ; } } jas_tvparser_destroy ( tvp ) ;,0
319,<S2SV_ModStart> urb ) ; <S2SV_ModEnd> goto err_free_urb_to_pipe ;,0
320,"<S2SV_ModStart>, yt2_0 ; WORD64 mul_1, mul_2, mul_3, mul_4, mul_5, mul_6, mul_10, mul_11, mul_12 ; <S2SV_ModStart> WORD64 mul_7, mul_10, mul_11, mul_12 <S2SV_ModEnd> ; WORD64 mul_9 <S2SV_ModStart> ; fft_jmp = 6 * ( index1 <S2SV_ModEnd> ) ; for <S2SV_ModStart> ++ ) { <S2SV_ModEnd> x_0 = x <S2SV_ModStart> ++ ) ; <S2SV_ModEnd> mul_1 = ( <S2SV_ModStart> ++ ) ; <S2SV_ModEnd> mul_2 = ( <S2SV_ModStart> ++ ) ; <S2SV_ModEnd> mul_3 = ( <S2SV_ModStart> ++ ) ; <S2SV_ModEnd> mul_4 = ( <S2SV_ModStart> ++ ) ; <S2SV_ModEnd> mul_5 = ( <S2SV_ModStart> ++ ) ; <S2SV_ModEnd> mul_6 = ( <S2SV_ModStart> ++ ) ; <S2SV_ModEnd> mul_7 = (",0
321,<S2SV_ModStart> mntent ) { int ret ; ret = <S2SV_ModEnd> mount_entry_on_generic ( mntent <S2SV_ModStart> mnt_dir ) ; if ( ret ) return ret ; return 0 ;,0
322,"<S2SV_ModStart> -> display_height ; int width = cm -> display_width ; int height = cm -> display_height ; <S2SV_ModStart> ( wb, width <S2SV_ModEnd>, 16 ) <S2SV_ModStart> ( wb, height <S2SV_ModEnd>, 16 )",0
323,"<S2SV_ModStart> ( env, <S2SV_ModEnd> server_port_val, req_server_port",0
324,<S2SV_ModStart> endif int col_type <S2SV_ModEnd> ; MYSQL_BIND * <S2SV_ModStart> endif # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID,0
325,"<S2SV_ModStart> screen, { int chars_per_line = ( need * 4 ) / 2 <S2SV_ModEnd> ; } ) <S2SV_ModStart> -> data_limit <= chars_per_line <S2SV_ModEnd> ) { if <S2SV_ModStart> -> data_limit = chars_per_line <S2SV_ModEnd> ; } else <S2SV_ModStart> -> data_limit = chars_per_line <S2SV_ModEnd> ; } if",0
326,<S2SV_ModStart> ( val ) || val == 0.0 <S2SV_ModStart> ( val < 0.0 <S2SV_ModEnd> ) { if,0
327,<S2SV_ModStart> ; if ( crng_ready <S2SV_ModEnd> ) { if,0
328,"<S2SV_ModStart> ( str, ""ID:"" <S2SV_ModEnd>, len ) <S2SV_ModStart> ( str, ""\'"" <S2SV_ModEnd>, len )",0
329,"<S2SV_ModStart> ) ) ; if ( which == 0 ) { cJSON_Delete ( cJSON_DetachItem ( array, 0 ) ) ; }",0
330,<S2SV_ModStart> options ) { <S2SV_ModEnd> if ( svc_ctx <S2SV_ModStart> VPX_CODEC_INVALID_PARAM ; } SvcInternal * const si = get_svc_internal ( svc_ctx ) ;,0
331,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vp9_tree convert_distribution ( vp9_tree tree, unsigned int branch_ct [ ] [ 2 ], const unsigned int num_events [ ] ) { vp9_tree result = vp9_tree_to_tree ( tree, branch_ct, num_events ) ; return result <S2SV_ModEnd> ; } <S2SV_null>",0
332,"<S2SV_ModStart>, s2, ( size_t )",0
333,<S2SV_ModStart> ) ) { # ifndef USE_WIN32 <S2SV_ModStart> 2 ; } # endif,0
334,<S2SV_ModStart> o ) { return NULL <S2SV_ModEnd> ; } switch,0
335,"<S2SV_ModStart> ( RC_LOG_SERIOUS, ""malformed <S2SV_blank> message: <S2SV_blank> not <S2SV_blank> a <S2SV_blank> multiple <S2SV_blank> of <S2SV_blank> encryption <S2SV_blank> blocksize"" <S2SV_ModEnd> ) ; return",0
336,<S2SV_ModStart> ; } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
337,<S2SV_ModStart> item ) { if ( item == NULL ) { return NULL ; },0
338,"<S2SV_ModStart> -> alg_priv, ctx, <S2SV_ModStart> -> alg_priv, ctx,",0
339,<S2SV_ModStart> ) ; } else if ( arg1 == 1 ) { win_maximise ( 1 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; },0
340,<S2SV_ModStart> < cols + 8 <S2SV_ModEnd> ; i ++,0
341,"<S2SV_ModStart> -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" <S2SV_ModEnd> ) ; #",0
342,"<S2SV_ModStart>, word, 1 <S2SV_ModEnd> ) ; } <S2SV_ModStart>, word - 16, 1 <S2SV_ModEnd> ) ; } <S2SV_ModStart>, word - 32, 1 <S2SV_ModEnd> ) ; }",0
343,"<S2SV_ModStart> = value ; BITS_PARSE ( ""output_flag_present_flag_with_output_flag"", value, ps_bitstrm, 1 ) ; ps_pps -> i1_output_flag_present = value ;",0
344,<S2SV_ModStart> ) ) { if ( c =='<S2SV_blank>') { count ++ ; continue ; },0
345,"<S2SV_ModStart> ( RMT_NONE, ""SUN <S2SV_blank> SUN <S2SV_blank> format <S2SV_blank> not <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> reader"" <S2SV_ModEnd> ) ; sun_pixels",0
346,"<S2SV_ModStart> ; else { fs_logger <S2SV_ModEnd> ( ""clone"",",0
347,<S2SV_ModStart> case BLOCK_8X8 : case BLOCK_16X8 : <S2SV_ModStart> case BLOCK_8X16 : case BLOCK_16X16 :,0
348,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> == 0 ) && ( padata -> pa_type == KRB5_PADATA_PKINIT_KX ) ),0
349,"<S2SV_ModStart> ; if ( vb ) <S2SV_ModEnd> dev_dbg ( & <S2SV_ModStart> ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; <S2SV_ModEnd> if ( input <S2SV_ModStart> 4 ) { <S2SV_ModEnd> dev_err_once ( & <S2SV_ModStart> frame_len ) ; <S2SV_ModEnd> for ( i <S2SV_ModStart> ; } } <S2SV_ModEnd> dst = v4l2_buf <S2SV_ModStart> ; if ( vb ) <S2SV_ModEnd> vb2_buf -> field_count <S2SV_ModStart> -> field_count ++ <S2SV_ModEnd> ; } else <S2SV_ModStart> ; if ( vb ) <S2SV_ModEnd> vb2_buf -> field_count <S2SV_ModStart> -> field_count -- <S2SV_ModEnd> ; } else",0
350,"<S2SV_ModStart> size ) { size_t size_alloc = PREFIX_SIZE + size ; <S2SV_ModStart> ( 1, size_alloc <S2SV_ModEnd> ) ; if <S2SV_ModStart> HAVE_MALLOC_SIZE update_zmalloc_stat_alloc ( size_alloc <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; update_zmalloc_stat_alloc ( size_alloc <S2SV_ModEnd> ) ; return",0
351,<S2SV_ModStart> & rxh -> serviceID <S2SV_ModEnd> ) && rxent,0
352,<S2SV_ModStart> = bss_desc ; <S2SV_ModEnd> mwifiex_dbg ( adapter,0
353,"<S2SV_ModStart> -> valuelen, sbuf + nsbuf <S2SV_ModEnd> ) ; if",0
354,<S2SV_ModStart> = L2CAP_MODE_ERTM ; <S2SV_ModEnd> if ( pi <S2SV_ModStart> pi -> imtu == L2CAP_MTU_BASIC ) { req -> flags = cpu_to_le16 ( 0 ) ; return 0 ; } <S2SV_ModEnd> l2cap_add_conf_opt ( & <S2SV_ModStart> rfc ) ; <S2SV_ModEnd> req -> dcid,0
355,<S2SV_ModStart> r ) { <S2SV_ModEnd> ret = recv,0
356,<S2SV_ModStart> -> u4_nal_ref_idc_found ) { <S2SV_ModStart> = 0 ; },0
357,<S2SV_ModStart> while ( pair <S2SV_ModEnd> ) { mprAddItem,1
358,<S2SV_ModStart> = 0 ; if (! ( open_flags & FMODE_WRITE ) ) goto no_delegation <S2SV_ModEnd> ; rcu_read_lock (,0
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,<S2SV_ModStart> sse ) ; <S2SV_ModEnd> if ( cpi <S2SV_ModStart> ; } } if ( cpi -> speed > 4 ) { <S2SV_ModStart> 4 ; } },0
361,<S2SV_ModStart> ; } } else,0
362,<S2SV_ModStart> == NULL ) { free ( username ) ; <S2SV_ModStart> PAM_BUF_ERR ) ; },0
363,<S2SV_ModStart> seg ) { int ret ; ret = <S2SV_ModEnd> vp9_read_tree ( r <S2SV_ModStart> tree_probs ) ; if ( ret < 0 ) { return - 1 ; } return ret ;,0
364,"<S2SV_ModStart> i ) { vpx_memset_explicit <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; vpx_memset_explicit <S2SV_ModEnd> ( dst_ptr2,",0
365,"<S2SV_ModStart> * event, u32 * data, u32 * nr_regs <S2SV_ModEnd>, struct perf_sample_data <S2SV_ModStart> regs ) { <S2SV_ModEnd> int i ; <S2SV_ModStart> i ++ ) { <S2SV_ModStart> i ) ; if ( nmi == 0 ) * nr_regs = KGDB_REG_NMI_U ; }",0
366,"<S2SV_ModStart> depth ++ ; if ( depth == 0 ) { buf2 = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; } else { <S2SV_ModStart> buf2 ; } }",0
367,"<S2SV_ModStart> length ) ; <S2SV_ModEnd> if ( n <S2SV_ModStart> ) ; } n = ksz8851ReadReg ( interface, KSZ8851_REG_TXQCR ) ;",0
368,<S2SV_ModStart> ; # endif mono_gc_invoke_finalizers ( ) ; <S2SV_ModStart> ; } } <S2SV_ModEnd> SetEvent ( pending_done_event,0
369,"<S2SV_ModStart> x_e, x_f, x_9, x_a, x_c, x_d, x_e, x_f_0 <S2SV_ModStart> x_e, x_f, x_f_1 <S2SV_ModStart> x_e, x_f_2, x_f_3 <S2SV_ModStart> x_e, x_f_3, x_f_1 <S2SV_ModStart> x_e, x_f_2, x_f_3 <S2SV_ModStart> x_e, x_f_3, x_f_0 <S2SV_ModStart> x_e, x_f_1, x_f_2 <S2SV_ModStart> x_e, x_f_3, x_f_1 <S2SV_ModStart> x_e, x_f_2 <S2SV_ModStart> x_e, x_f_3, x_f_2 <S2SV_ModStart> x_e, x_f_1 <S2SV_ModStart> x_e, x_f_2, x_f_3",0
370,<S2SV_ModStart> ; if ( <S2SV_ModEnd> pmd_none_or_clear_bad ( pmd,0
371,"<S2SV_ModStart> ] ) ; fprintf ( stderr, ""usage: <S2SV_blank> %s <S2SV_blank> [2] <S2SV_blank> [3]\\n"", argv [ 0 ] ) ; <S2SV_ModStart> fout ) ; fprintf ( stderr, ""usage: <S2SV_blank> %s <S2SV_blank> [2] <S2SV_blank> [3]\\n"", argv [ 0 ] ) ;",0
372,"<S2SV_ModStart> i, result, rc <S2SV_ModStart> s ) { rc = 0 ; goto done <S2SV_ModEnd> ; } PyTuple_SET_ITEM <S2SV_ModStart> l ) ; rc = 0 ; goto done <S2SV_ModEnd> ; } result <S2SV_ModStart> l ) ; done : Py_DECREF ( l ) ; return rc <S2SV_ModEnd> ; } <S2SV_null>",0
373,<S2SV_ModStart> -> priv = <S2SV_ModEnd> priv -> base <S2SV_ModStart> ]. cfg <S2SV_ModEnd> ; priv ->,0
374,<S2SV_ModStart> ++ ; } pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; totfr += step ; <S2SV_ModStart> return ret ; <S2SV_ModEnd> if ( totfr,0
375,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> } if (,0
376,<S2SV_ModStart> ; } } <S2SV_ModEnd> ret = udf_read_link,0
377,<S2SV_ModStart> REG_ADDR_MASK ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
378,<S2SV_ModStart> fmt ) { <S2SV_ModEnd> int n = <S2SV_ModStart> = 0 ; char *,0
379,<S2SV_ModStart> DefragIPv6NoData ) ; # endif,0
380,<S2SV_ModStart> if ( object_data && object_length,0
381,"<S2SV_ModStart> NULL ) { if (! osStrcasecmp ( token, ""Digest"" ) ) { strSafeCopy ( authContext -> digest, token, WEB_SOCKET_DIGEST_MAX_LEN ) ; } else { <S2SV_ModStart> value ++ ; }",0
382,"<S2SV_ModStart> description ) ; <S2SV_ModEnd> seq_printf ( m <S2SV_ModStart> datalen ) ; if ( key_is_instantiated ( key ) ) seq_printf ( m, "": <S2SV_blank> %s"", key_type_string ( key ) ) ;",0
383,<S2SV_ModStart> p_sys -> b_auto_field_coding && p_pic -> b_progressive,0
384,<S2SV_ModStart> ; } } <S2SV_ModEnd> count ++ ;,0
385,"<S2SV_ModStart> 4 ) ; CHECKINT32 ( idx, len ) ;",0
386,<S2SV_ModStart> ; act = vp8_variance32x32 <S2SV_ModEnd> ( x ->,0
387,"<S2SV_ModStart> * fb ; int idx = data -> idx ; <S2SV_ModStart> -> pbi, <S2SV_ModEnd> idx, &",0
388,<S2SV_ModStart> JPEG_MARKER_EOI ) { if ( unit == 0 ) { <S2SV_ModStart> += length ; },0
389,"<S2SV_ModStart> expr_stmt ) ; REQ ( n, testlist_stmt ) ;",0
390,<S2SV_ModStart> c ] ; <S2SV_ModEnd> } else { <S2SV_ModStart> + adjustment ; <S2SV_ModEnd> } else { <S2SV_ModStart> + adjustment ; <S2SV_ModEnd> } } },0
391,<S2SV_ModStart> ) ; } if ( sockPtr -> keep ) { sockPtr -> keep = NS_TRUE ; },0
392,<S2SV_ModStart> ret = 0 ; xtregs -> cp0 &= ~ XTENSA_CP_MASK,0
393,<S2SV_ModStart> size ) ; if ( message -> length == 0 ) { error = NO_ERROR ; goto done ; } <S2SV_ModStart> buffer ) ; queueItem -> buffer = NULL ; queueItem -> offset = 0 ; <S2SV_ModStart> = NO_ERROR ; done :,0
394,<S2SV_ModStart> xop -> dst_dev ; if (! remote_dev ) return,0
395,<S2SV_ModStart> new_bh ) ; error = <S2SV_ModStart> ( new_bh ) ; if ( error ) goto cleanup,0
396,"<S2SV_ModStart> args ) { if (! vp9_get_active_map ( ctx -> cpi, map -> active_map ) ) return VPX_CODEC_INVALID_PARAM ;",0
397,<S2SV_ModStart> ; if ( ( <S2SV_ModStart>!= 0 ) && ( foundPropEnd!= 0 ) ),0
398,"<S2SV_ModStart>, event, 0 <S2SV_ModEnd>, 0,",0
399,"<S2SV_ModStart> * imsy, 0 <S2SV_ModEnd> ) ; if",0
400,<S2SV_ModStart> args ) { vpx_codec_err_t ret ; <S2SV_ModStart> sd ) ; ret = <S2SV_ModEnd> vp9_copy_reference_dec ( ctx <S2SV_ModStart> sd ) ; if ( ret!= VPX_CODEC_OK ) { return ret ; },0
401,<S2SV_ModStart> -> u1_err_flag & REJECT_CUR_PIC_SLICE <S2SV_ModEnd> ) { ih264d_err_pic_dispbuf_mgr,0
402,<S2SV_ModStart> ) ; else { <S2SV_ModStart> ps_dec ) ; },0
403,"<S2SV_ModStart> VP9_LAST_FLAG ) { vpx_codec_err_t ret ; <S2SV_ModStart>. buf ; ret = <S2SV_ModEnd> equal_dimensions ( cfg <S2SV_ModStart> sd ) ) { <S2SV_ModStart> ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; } else { <S2SV_ModEnd> vp8_yv12_copy_frame ( cfg <S2SV_ModStart> sd ) ; } <S2SV_ModStart> } else { ret = <S2SV_ModStart>. error_code ; if ( ret!= VPX_CODEC_OK ) { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Invalid <S2SV_blank> reference <S2SV_blank> frame"" ) ; } return ret ;",0
404,"<S2SV_ModStart> n ) { jas_uint_t i ; jas_uint_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> rows_ ) ; <S2SV_ModEnd> for ( i <S2SV_ModStart> ( i = 0 <S2SV_ModEnd>, rowstart = <S2SV_ModStart>, rowstart = ( jas_uint_t * ) <S2SV_ModStart> ( j = 0 <S2SV_ModEnd>, data =",0
405,<S2SV_ModStart> ; int i ; if ( xd -> mb_to_right_edge < 0 && xd -> mb_to_bottom_edge < 0 ) return,0
406,<S2SV_ModStart> ++ ) { <S2SV_ModEnd> ( ( uint32_t <S2SV_ModStart> 1 ] ; <S2SV_ModEnd> src += src_stride,0
407,<S2SV_ModStart> -> row_offset ; <S2SV_ModEnd> if ( _TIFFReadEncodedStripAndAllocBuffer <S2SV_ModStart> ) ; } <S2SV_ModEnd> } } },0
408,<S2SV_ModStart> ; } } <S2SV_ModEnd> return 0 ;,0
409,<S2SV_ModStart> 8 ) ; <S2SV_ModEnd> } ; },0
410,<S2SV_ModStart> num & ( 1U <S2SV_ModEnd> << ( number,0
411,"<S2SV_ModStart> y ) { int bytes_read = <S2SV_ModEnd> fread ( buf <S2SV_ModStart>, file ) ; if ( bytes_read",0
412,<S2SV_ModStart> ; uint16_t attr_len <S2SV_ModEnd> ; MD5_Init ( <S2SV_ModStart> md5_ctx ) ; attr_len = avp -> length - sizeof ( struct l2tp_avp_t ) ;,0
413,<S2SV_ModStart> ; default : return 0 ;,0
414,"<S2SV_ModStart>, event, 0 <S2SV_ModEnd>, 0,",0
415,"<S2SV_ModStart> ; BT_DBG ( ""sock <S2SV_blank> %p, <S2SV_blank> peer <S2SV_blank> %d, <S2SV_blank> sk <S2SV_blank> %p"" <S2SV_ModEnd>, sock, <S2SV_ModStart>, sock, peer <S2SV_ModEnd> ) ; sa",0
416,"<S2SV_ModStart> MT_CPTYPE_PASSSALT ) { if ( cpkt. length > PASS_SALT_SIZE ) { fprintf ( stderr, ""passsalt <S2SV_blank> too <S2SV_blank> long\\n"" ) ; return - 1 ; }",0
417,<S2SV_ModStart> ) ) ; return - 1 <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ) ; return - 1 <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ) ; return - 1 <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ) ; return - 1 <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ) ; return - 1 <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ) ; return - 1 <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ) ; return - 1 <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ) ; return - 1 <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ) ; return - 1 <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ) ; return - 1 <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ) ; return - 1 <S2SV_ModEnd> ; } #,0
418,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
419,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } } },0
420,"<S2SV_ModStart>, & rlen, NULL",0
421,"<S2SV_ModStart> = 0 ; strlcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> -> password, ( char * ) <S2SV_ModStart> -> pass_salt, ( int )",0
422,"<S2SV_ModStart> ; if ( PyUnicode_CompareWithASCIIString_c ( name, ""__debug__"" ) == 0 || PyUnicode_CompareWithASCIIString_c ( name, ""__debug__"", ""__debug__"" ) == 0 || PyUnicode_CompareWithASCIIString_c ( name, ""__debug__"", ""__debug__"" ) == 0 || PyUnicode_CompareWithASCIIString_c ( name, ""__debug__"", ""__debug__"" ) == 0 || PyUnicode_CompareWithASCIIString_c ( name, ""__debug__"", ""__debug__"", ""__debug__"" ) == 0 || PyUnicode_CompareWithASCIIString_c ( name, ""__debug__"", ""__debug__"", ""__debug__"" ) == 0 || PyUnicode_CompareWithASCIIString_c ( name, ""__debug__"", ""__debug__"" ) == 0 || PyUnicode_CompareWithASCIIString_c ( name, ""__debug__"", ""__debug__"" ) == 0 ||",0
423,<S2SV_ModStart> ; i < 128 <S2SV_ModEnd> && str [,0
424,<S2SV_ModStart> in ) { int <S2SV_ModEnd> buf [ 2,0
425,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
426,<S2SV_ModStart> size_t s ; s = 0 ;,0
427,<S2SV_ModStart> bd_addr ) { if ( bd_addr -> bd_addr_type == BT_BDADDR_TYPE_BT ) { return btif_dm_remove_bond ( bd_addr ) ; },0
428,<S2SV_ModStart> ; avail = ( int ) ( <S2SV_ModStart> buf -> cursor ),0
429,<S2SV_ModStart> = x ; <S2SV_ModEnd> } ; },0
430,"<S2SV_ModStart> - 1 ; oe_status_t status ; <S2SV_ModStart> ; done : status = oe_syscall_read ( epoll -> host_fd, buf, count ) ; if ( status!= OE_OK ) OE_RAISE_ERRNO ( status ) ;",0
431,"<S2SV_ModStart> ( CMD_INITIALIZE, section_ptr <S2SV_ModEnd>, NULL )",0
432,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_MAX_PADDR : * ( size_t * ) val = ms -> elf_max_paddr ; return 0 ;,0
433,"<S2SV_ModStart> offset ) { struct address_space * mapping = page -> mapping ; <S2SV_ModStart> = EXT4_JOURNAL ( <S2SV_ModEnd> mapping -> host <S2SV_ModStart> ; if ( IS_ENABLED ( CONFIG_JBD2_REC_PAGES ) && mapping -> i_mapping == inode_to_dev ( mapping ) ) { struct jbd2_buffer * buffer = jbd2_journal_get_buffer ( journal ) ; if ( buffer ) jbd2_buffer_unmap ( buffer, PAGE_SIZE ) ; } if (",0
434,<S2SV_ModStart> 1 ) ; if (! trak ) continue ;,0
435,"<S2SV_ModStart> ; # endif strlcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart>, password, sizeof ( md5data ) <S2SV_ModEnd> ) ; md5_init <S2SV_ModStart> state ) ; memcpy <S2SV_ModEnd> ( md5sum + <S2SV_ModStart> ( password ) <S2SV_ModEnd> ) ; md5sum",0
436,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( Prefix,0
437,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
438,<S2SV_ModStart> ( ) ; g_hash_table_remove_all ( headers ) ;,0
439,"<S2SV_ModStart> row ) { vpx_memmove <S2SV_ModEnd> ( dst,",0
440,<S2SV_ModStart> int mi_col ; <S2SV_ModEnd> MACROBLOCK * x <S2SV_ModStart> -> mb ; <S2SV_ModEnd> for ( i <S2SV_ModStart> -> sb_index ) { <S2SV_ModStart> -> mb_index ) { <S2SV_ModStart> SWITCHABLE ; } } } <S2SV_ModStart> pred_mv ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
441,"<S2SV_ModStart>, obj_tlen ; <S2SV_ModEnd> u_int offset ; <S2SV_ModStart> ; } bw = 0 <S2SV_ModStart> ) ) ; if ( lmp_obj_len > len ) { ND_PRINT ( ( ndo, ""LMP <S2SV_blank> object <S2SV_blank> too <S2SV_blank> long"" ) ) ; } <S2SV_ModStart> ( ndo, ""LMP <S2SV_blank> object <S2SV_blank> too <S2SV_blank> long"" ) ) ; if ( lmp_obj_len > len ) { ND_PRINT ( ( ndo, ""LMP <S2SV_blank> object <S2SV_blank> too <S2SV_blank> long"" ) ) ; } <S2SV_ModEnd> obj_tptr = tptr <S2SV_ModStart> ; } } <S2SV_ModEnd> obj_tptr = tptr <S2SV_ModStart> ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
442,<S2SV_ModStart> i ) { <S2SV_ModEnd> MV * ref <S2SV_ModStart> * ref = <S2SV_ModEnd> mbmi -> ref_mvs <S2SV_ModStart> [ i ] <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> 0 ]. <S2SV_ModEnd> as_mv ; const,0
443,"<S2SV_ModStart> ) ) ; if (! vpx_image_set_format ( & raw, VPX_IMG_FMT_I420, info. frame_width, info. frame_height ) ) die ( ""Failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> image <S2SV_blank> format."" ) ;",0
444,"<S2SV_ModStart>, GFP_ATOMIC ) <S2SV_ModEnd> ) { kfree_skb",0
445,<S2SV_ModStart> ) return ; if (! <S2SV_ModStart> netsnmp_mibindex_load ( ) ) { return ; } <S2SV_ModEnd> DEBUGMSGTL ( (,0
446,"<S2SV_ModStart>, EV_KEY ) ; if ( <S2SV_ModEnd> key_map [ x <S2SV_ModStart> ]. mapped_id!= - 1 ) ioctl ( fd, UI_SET_KEYBIT, key_map [ x ]. mapped_id",0
447,<S2SV_ModStart> i ++ ) vp9_free_frame_buffer_from_file <S2SV_ModEnd> ( & ctx,0
448,"<S2SV_ModStart> 1 ) { vp9_lpf_vertical_8_unsafe <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vp9_lpf_vertical_8_unsafe <S2SV_ModEnd> ( s,",0
449,<S2SV_ModStart> ; code = krb5_gss_init_context_with_flags <S2SV_ModEnd> ( & ctx,0
450,<S2SV_ModStart> ) ; } <S2SV_ModEnd> appendImageToList ( &,0
451,"<S2SV_ModStart> ( ps_stream, START_CODE_PREFIX_LEN_IND <S2SV_ModEnd> )!= START_CODE_PREFIX",0
452,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { kfree ( string ) ; <S2SV_ModStart> - EINVAL ; }",0
453,"<S2SV_ModStart> -> type ; mono_class_inflate_generic_method ( imethod, & tmp_context ) ;",0
454,<S2SV_ModStart> ; int tmp ; if ( count >= sizeof ( buf ) ) return - EINVAL,0
455,<S2SV_ModStart> char * last_elem = NULL <S2SV_ModStart> l -> l_origin ) : ( __libc_enable_secure? NULL : l -> l_protocol,0
456,"<S2SV_ModStart> ) H264SwDecMalloc ( NULL,",0
457,"<S2SV_ModStart> 5 ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_NOPREDISCARDS ) ;",0
458,"<S2SV_ModStart> ) break ; if ( image -> columns > MAX_COLUMNS ) { ThrowReaderException ( CorruptImageError, ""Too <S2SV_blank> many <S2SV_blank> columns"" ) ; }",0
459,<S2SV_ModStart> goto errout ; info -> stages = 0 ;,0
460,<S2SV_ModStart> ; if (! key_data <S2SV_ModEnd> ) goto cleanup,0
461,"<S2SV_ModStart> * self, int <S2SV_ModEnd> idx, PyObject",0
462,<S2SV_ModStart> ] ) ; if ( nByte > 0 ) { <S2SV_ModStart> } } } },0
463,<S2SV_ModStart> filp ) { struct sock * sk = <S2SV_ModEnd> SOCKET_I ( inode <S2SV_ModStart> ( inode ) ; struct sockaddr_storage * s = ( struct sockaddr_storage * ) sk -> sk_socket_data ; sock_release ( sk,0
464,"<S2SV_ModStart> asdl_seq * orelse, async_ty async_target <S2SV_ModStart> = orelse ; if ( async_target ) { p -> v. AsyncFor. async_target = async_target ; }",0
465,"<S2SV_ModStart> char * name, my_bool * is_shared <S2SV_ModStart> ; if ( is_shared && <S2SV_ModStart> ; if (! is_shared &&",0
466,"<S2SV_ModStart> return ""No <S2SV_blank> connection <S2SV_blank> to <S2SV_blank> host"" ; case NGHTTP2_ERR_INVALID_CONNECTION_ID : return ""Invalid <S2SV_blank> connection <S2SV_blank> ID"" ;",0
467,"<S2SV_ModStart> UINT error ; Stream_Read_UINT32 <S2SV_ModEnd> ( s, <S2SV_ModStart> eventId ) ; Stream_Read_UINT32 <S2SV_ModEnd> ( s,",0
468,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( pData,0
469,"<S2SV_ModStart> struct flowi6 fl6 ; int err <S2SV_ModStart> = 1 ; err = <S2SV_ModEnd> ip6_xmit ( sk <S2SV_ModStart> tclass ) ; if ( err ) SCTP_INC_STATS ( sock_net ( sk ), SCTP_MIB_OUTSCTPPACKS ) ; return err ;",0
470,"<S2SV_ModStart> ( ), ""MATLAB <S2SV_blank> read <S2SV_blank> failed"" <S2SV_ModEnd> ) ; goto",0
471,<S2SV_ModStart> UINT32 failureCode ; if (! nego ) { return ; },0
472,<S2SV_ModStart> ; if ( <S2SV_ModEnd> bn_is_zero ( t <S2SV_ModStart> ( t ) == 0 <S2SV_ModStart> ; if ( <S2SV_ModEnd> bn_is_zero ( t <S2SV_ModStart> ( t ) == 0 <S2SV_ModStart> ; if ( <S2SV_ModEnd> bn_is_zero ( t <S2SV_ModStart> ( t ) == 0 <S2SV_ModStart> ; if ( <S2SV_ModEnd> bn_is_zero ( t <S2SV_ModStart> ( t ) == 0 <S2SV_ModStart> ; if ( <S2SV_ModEnd> bn_is_zero ( t <S2SV_ModStart> ( t ) == 0 <S2SV_ModStart> ; if ( <S2SV_ModEnd> bn_is_zero ( t <S2SV_ModStart> ( t ) == 0 <S2SV_ModStart> ; if ( <S2SV_ModEnd> bn_is_zero ( t <S2SV_ModStart> ( t ) == 0,0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args <S2SV_ModStart> sd ) ; if ( ctx -> yv12_frame_buffers. use_frame_threads ) { <S2SV_ModStart> sd ) ; }",0
474,<S2SV_ModStart> 8 ) ; psf = ( SF_PRIVATE * ) malloc ( <S2SV_ModEnd> sizeof ( SF_PRIVATE <S2SV_ModStart> NULL ; } <S2SV_ModEnd> psf_init_files ( psf,0
475,"<S2SV_ModStart> vp9_COMMON * cm, int <S2SV_StartBug> <S2SV_StartBug> <S2SV_ModStart> i ] += <S2SV_StartBug> <S2SV_StartBug> <S2SV_ModEnd> ; c +=",0
476,<S2SV_ModStart> subsampling_y ) ; <S2SV_ModEnd> vp9_setup_pre_planes ( xd,0
477,<S2SV_ModStart> 0 ) { if ( htc -> rxbuf [ 0 ] == '\\0' ) { <S2SV_ModStart> ) ; } },0
478,<S2SV_ModStart> ; do { if ( count!= 2 ) { <S2SV_ModStart> image ) ; } else { image -> page. x = 0 ; } <S2SV_ModStart> image ) ; if ( count!= 2 ) { <S2SV_ModStart> image ) ; } else { image -> page. y = 0 ; } <S2SV_ModStart> ( image ) ; if ( count!= 2 ) { image -> page. x = 0 ; image -> page. y = 0,0
479,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> sizeof ( tETH_HDR ),1
480,<S2SV_ModStart> -> i4_pic_order_cnt_msb ; <S2SV_ModEnd> ret = ih264d_start_of_pic_with_frame_num,0
481,"<S2SV_ModStart> MPT_ADAPTER * ioc <S2SV_ModEnd> ; int iocnum <S2SV_ModStart> ENODEV ; } <S2SV_ModEnd> karg -> hdr <S2SV_ModStart>. maxDataSize!= ioc -> max_data_size <S2SV_ModEnd> ) { printk <S2SV_ModStart> ( MYIOC_s_ERR_FMT ""%s@%d::mptctl_getiocinfo <S2SV_blank> - <S2SV_blank> "" ""Structure <S2SV_blank> size <S2SV_blank> mismatch <S2SV_blank> [%ld]\\n"" <S2SV_ModEnd>, __FILE__, <S2SV_ModStart>, __LINE__, ioc -> max_data_size <S2SV_ModEnd> ) ; return <S2SV_ModStart> ENODEV ; } <S2SV_ModEnd> sdev = mptctl_find_device <S2SV_ModStart>, port, ioc -> max_data_size <S2SV_ModEnd> ) ; if <S2SV_ModStart>, __LINE__, ioc -> max_data_size <S2SV_ModEnd> ) ; return",0
482,"<S2SV_ModStart> -> columns, image -> rows *",0
483,"<S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv",0
484,<S2SV_ModStart> ( datao + 8 <S2SV_ModEnd> < datao ) <S2SV_ModStart> ( datao + 8 <S2SV_ModEnd> < 2 ) <S2SV_ModStart> ( datao + 8 <S2SV_ModEnd> > buf_size ) <S2SV_ModStart> ; datao += 8 <S2SV_ModEnd> ; exif_mnote_data_fuji_clear (,0
485,"<S2SV_ModStart> ; } } if ( <S2SV_ModStart>, rootname ) ) { L_ERROR ( ""failed <S2SV_blank> to <S2SV_blank> create <S2SV_blank> %s\\n"", procName ) ; return 1 ; } <S2SV_ModEnd> if (!",0
486,<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> opt = service_options <S2SV_ModStart> servname ) ; <S2SV_ModEnd> } CRYPTO_THREAD_unlock (,0
487,<S2SV_ModStart> void ) { if (! mnemonic ) { return ; },0
488,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> return SUCCESS ;,0
489,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> & 0x01 ) ) <S2SV_ModStart> ; if ( ( <S2SV_ModStart> & 0x02 ) ) <S2SV_ModStart> ; if ( ( <S2SV_ModStart> & 0x04 ) ) <S2SV_ModStart> ; if ( ( <S2SV_ModStart> & 0x04 ) ) <S2SV_ModStart> ; if ( ( <S2SV_ModStart> & 0x04 ) ) <S2SV_ModStart> ; if ( ( <S2SV_ModStart> & 0x04 ) ) <S2SV_ModStart> ; if ( ( <S2SV_ModStart> & 0x04 ) ) <S2SV_ModStart> ; if ( ( <S2SV_ModStart> & 0x04 ) ),0
490,"<S2SV_ModStart> { WORD32 i <S2SV_ModEnd> ; WORD32 num_neg_pics <S2SV_ModStart> ; UWORD32 u4_num_total_curr <S2SV_ModEnd> ; WORD8 ai1_curr_delta_poc_msb_present_flag <S2SV_ModStart> u4_num_lt_curr, u4_num_lt_foll <S2SV_ModEnd> ; pic_buf_t * <S2SV_ModStart> u4_num_lt_curr, u4_num_lt_curr <S2SV_ModEnd> ; u4_num_st_curr_after [ <S2SV_ModStart> u4_num_st_curr_after, u4_num_lt_curr <S2SV_ModEnd> ; u4_num_total_curr = <S2SV_ModStart> u4_num_lt_curr, u4_num_lt_curr <S2SV_ModEnd> ; ai1_curr_delta_poc_msb_present_flag [ <S2SV_ModStart> u4_num_lt_curr, u4_num_lt_foll <S2SV_ModEnd> ; u4_num_total_curr = <S2SV_ModStart> u4_num_total_curr ) ; <S2SV_ModEnd> } } }",0
491,"<S2SV_ModStart> = print_string_ptr ( item,",0
492,<S2SV_ModStart> other ) ) { unix_state_lock ( sk ) ; <S2SV_ModStart> = 0 ; unix_state_unlock ( sk ) ; },0
493,"<S2SV_ModStart> ( outpos, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank>",0
494,<S2SV_ModStart> ( OM_uint32 ) KRB5_GSS_MALFORMED_MSIZE <S2SV_ModEnd> ; return GSS_S_DEFECTIVE_TOKEN,0
495,<S2SV_ModStart> * fb ; if ( frame -> idx >= VP9_REF_FRAME_NUM ) { return VPX_CODEC_INVALID_PARAM ; },0
496,<S2SV_ModStart> plug ) ; <S2SV_ModEnd> put_ioctx ( ctx,0
497,"<S2SV_ModStart> name, int rec_quick <S2SV_ModEnd> ) { int <S2SV_ModStart> ) ) || <S2SV_ModEnd> init_io_cache ( & <S2SV_ModStart> MY_WME ) ) <S2SV_ModEnd> || init_io_cache ( <S2SV_ModStart> ) ) ; <S2SV_ModEnd> DBUG_RETURN ( got_error",0
498,<S2SV_ModStart> ; # if defined ( uECC_VLI_NATIVE_LITTLE_ENDIAN ) || defined ( __clang__ ) <S2SV_ModEnd> uECC_word_t * p,0
499,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|dao-truncated]"" <S2SV_ModEnd> ) ) ;",0
500,<S2SV_ModStart> ; } else if ( buf -> data. size > 0 ) { buf -> data. size = 0 ; } else,0
501,<S2SV_ModStart> = 0 ; if ( * cp == '\\0' ) { cval = '\\0' ; meta = 1 ; cp += 2 ; },0
502,"<S2SV_ModStart> char detect [ 5 <S2SV_ModEnd> ] ) { <S2SV_ModStart>, ""YUV4"", 5 <S2SV_ModEnd> ) == 0",0
503,"<S2SV_ModStart> pixm, * pixd, * pixdark <S2SV_ModEnd> ; PIXCMAP * <S2SV_ModStart> pixc ) ; pixdark = pixGetDarkness ( pixc ) ; pixlight = pixGetLightness ( pixc ) ; pixdiff = pixGetDifficulty ( pixc ) ; <S2SV_ModStart> ; i < ncolors <S2SV_ModEnd> ; i ++ <S2SV_ModStart> ++ ) { pixdark = pixFewColorsOctcubeQuant1 ( pixs, level ) ; <S2SV_ModStart>, linem, pixdark <S2SV_ModEnd>, minval, <S2SV_ModStart>, minval, pixdark <S2SV_ModEnd>, maxspan, <S2SV_ModStart>, maxspan, pixlight <S2SV_ModEnd>, minval,",0
504,<S2SV_ModStart>. vf = vp8_mse16x16_lowpass <S2SV_ModEnd> ; xd ->,0
505,<S2SV_ModStart> int overhead = 32 <S2SV_ModEnd> + 4 + <S2SV_ModStart> int size = 32 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( size - 32 <S2SV_ModEnd> ) > conn,0
506,"<S2SV_ModStart> = NEGO_STATE_FAIL ; Stream_Seek ( s, 7 ) ;",0
507,"<S2SV_ModStart> i, target_bits_per_mb ; int i_rc_bits_per_mb <S2SV_ModStart> correction_factor ) ; i_rc_bits_per_mb = bits_per_mb_at_this_q ; <S2SV_ModStart> if ( bits_per_mb_at_this_q < i_rc_bits_per_mb <S2SV_ModEnd> ) { if <S2SV_ModStart> { if ( bits_per_mb_at_this_q > target_bits_per_mb ) { last_error = bits_per_mb_at_this_q - target_bits_per_mb ; break ; } else { last_error = bits_per_mb_at_this_q - target_bits_per_mb ; } } while ( ++ i <= active_worst_quality ) ; return i_rc_bits_per_mb <S2SV_ModEnd> ; } <S2SV_null>",0
508,<S2SV_ModStart> ; value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1101WritePhyReg (,0
509,<S2SV_ModStart> ) ) { if ( kwdefaults [ k ] -> d_type == VARARG_TYPE_DEFAULT ) { <S2SV_ModStart> return NULL ; },0
510,"<S2SV_ModStart> + y ; <S2SV_ModEnd> if ( plane <S2SV_ModStart> frame_height ; } vpx_memset ( left_col, 128, 64 ) ; <S2SV_ModStart> } else { <S2SV_ModEnd> for ( i <S2SV_ModStart> } } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
511,"<S2SV_ModStart> ++ ; } else if ( pattern [ end ] == \'""\' ) { end ++ ; while ( ( pattern [ end ]!= 0 ) && ( pattern [ end ]!= \'""\' ) ) end ++ ; }",0
512,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_completed_io_lock ) ;,1
513,<S2SV_ModStart> cm -> show_frame <S2SV_ModEnd> ) ; if <S2SV_ModStart> } else { <S2SV_ModEnd> vp9_wb_write_bit ( wb,0
514,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> == 'c' ) || ( color == 255 ) ) <S2SV_ModStart> ; if ( ( <S2SV_ModStart> == 'd' ) || ( color == 255 ) ) <S2SV_ModStart> ; if ( ( <S2SV_ModStart> == 'e' ) || ( color == 255 ) ) <S2SV_ModStart> ; if ( ( <S2SV_ModStart> == 'f' ) || ( color == 255 ) ) <S2SV_ModStart> ; if ( ( <S2SV_ModStart> == 'G' ) || ( color == 255 ) ),0
515,"<S2SV_ModStart> ; p = strpbrk <S2SV_ModEnd> ( context -> <S2SV_ModStart> -> buffer, "" <S2SV_blank>?"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; q = strpbrk <S2SV_ModEnd> ( p + <S2SV_ModStart> -> bufferLen + n <S2SV_ModEnd>,'<S2SV_blank>') <S2SV_ModStart> -> bufferLen + n <S2SV_ModEnd> - q ) <S2SV_ModStart> -> bufferLen + n <S2SV_ModEnd> - m ;",0
516,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
517,"<S2SV_ModStart> ( xd -> mb_segement_abs_delta <S2SV_ModEnd>, 0, <S2SV_ModStart> ( xd -> mb_segement_abs_delta <S2SV_ModEnd> ) ) ;",0
518,"<S2SV_ModStart> ; uint16_t n = 0 <S2SV_ModStart>, ENC624J600_REG_ERXRDPT, ( uint16_t ) <S2SV_ModStart>, ENC624J600_REG_ERXTAIL, ( uint16_t )",0
519,<S2SV_ModStart> xmlSchemaPtr schema ; VALUE rb_schema ; VALUE errors ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> errors = rb_ary_new <S2SV_ModStart> ( ) ; <S2SV_ModEnd> schema = xmlSchemaParse <S2SV_ModStart> ( ctx ) <S2SV_ModEnd> ; if (,0
520,"<S2SV_ModStart> ( LOG_ERR, ""Cannot <S2SV_blank> parse <S2SV_blank> service <S2SV_blank> options <S2SV_blank> section"" <S2SV_ModEnd> ) ; print_syntax",0
521,<S2SV_ModStart> 2 ] ; ptr += 4 ; <S2SV_ModStart> 2 ] ; ptr += 4 ;,0
522,<S2SV_ModStart> err = - <S2SV_ModEnd> EALREADY ; if <S2SV_ModStart> - EINVAL ; spin_lock ( & po -> bind_lock ) ; if ( po -> running && <S2SV_ModEnd> match -> type <S2SV_ModStart> ; } } spin_unlock ( & po -> bind_lock ) ; if ( err &&! refcount_read ( & match -> sk_ref ) ) { list_del ( & match -> list ) ; kfree ( match ) ; },1
523,<S2SV_ModStart> POLL_IN ) ; <S2SV_ModEnd> perf_event_wakeup ( handle,0
524,<S2SV_ModStart> ( wchar_t ) ( u >> 10 & SURROGATE_BITS ) <S2SV_ModEnd> ; * op <S2SV_ModStart> ( wchar_t ) ( u & SURROGATE_BITS ) <S2SV_ModEnd> ; } s,0
525,"<S2SV_ModStart> EPROTONOSUPPORT ) { if ( as_console ) { sleep ( 2 ) ; } <S2SV_ModStart> ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" ) ; <S2SV_ModEnd> rc = pcmk_ok",0
526,"<S2SV_ModStart> ( status & RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart>, KSZ8851_REG_RXQCR, RXQCR_SDA_MASK <S2SV_ModEnd> ) ; ancillary <S2SV_ModStart>, KSZ8851_REG_RXQCR, RXQCR_SDA_MASK <S2SV_ModEnd> ) ; return",0
527,"<S2SV_ModStart> asdl_seq * decorator_seq, int is_async_func <S2SV_ModStart>, type_comment, is_async_func,",0
528,"<S2SV_ModStart> ( mm, 0xA1C0000 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( pgd, 0xA1C0000 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( pud, 0xA1C0000 <S2SV_ModEnd> ) ; split_huge_page_pmd <S2SV_ModStart>, pmd, 0xA1C0000 <S2SV_ModEnd>, & ptl",0
529,"<S2SV_ModStart> packet_data_start_ptr ) ; if ( 0!= message_left ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> message_left <S2SV_blank> overflow!"" ) ; return - 1 ; }",0
530,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if (!,0
531,"<S2SV_ModStart> 4 ) ; <S2SV_ModEnd> RAW ( row <S2SV_ModStart>, col ) ; <S2SV_ModEnd> } } <S2SV_null>",0
532,<S2SV_ModStart> len < needed + sizeof ( * nl ),0
533,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> &&! rotated_image ),0
534,<S2SV_ModStart> ( bfqq ) __bfq_idle_slice_timer <S2SV_ModEnd> ( bfqq ),0
535,<S2SV_ModStart> += 1 ; if ( orderType == RDP_ORDER_TYPE_DRAWING ) { length += 1 ; },0
536,<S2SV_ModStart> ; if ( <S2SV_ModEnd>! overwrite && <S2SV_ModStart>! overwrite && <S2SV_ModEnd>! new_create ),0
537,"<S2SV_ModStart> int plane ; int plane_index ; <S2SV_ModStart> plane ++ ) { plane_index = vp9_get_plane_index ( xd, plane ) ; <S2SV_ModStart> arg ) ; vp9_foreach_transformed_block_in_plane ( xd, bsize, plane_index, visit, arg ) ; }",0
538,<S2SV_ModStart> -> e_mbd ; <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { xd -> mi [ 0 ] -> mbmi. sb_type = bsize ;,0
539,<S2SV_ModStart> = NULL ; reader. superblock = NULL ;,0
540,<S2SV_ModStart> -> ranges = ( MappedRange * ),0
541,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> flags & VP8_EFLAG_NO_UPD_GF <S2SV_ModStart> flags & VP8_EFLAG_NO_UPD_GF <S2SV_ModEnd> ) { ctx <S2SV_ModStart> } if ( ( flags & VP8_EFLAG_NO_REF_LAST ) && ( flags & VP8_EFLAG_NO_REF_GF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_ALTR_FRAME ; vp8_use_as_reference ( ctx -> cpi, ref ) ; } if ( flags & ( VP8_EFLAG_NO_UPD_LAST | VP8_EFLAG_NO_UPD_ARF | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF <S2SV_ModEnd> )",0
542,"<S2SV_ModStart> ; if ( ( <S2SV_ModStart>, & max_val )",0
543,<S2SV_ModStart> head ) { WARN_ON_ONCE ( swhash -> online ) ;,0
544,"<S2SV_ModStart> * pptr, uint32_t <S2SV_ModEnd> len ) { <S2SV_ModStart> advance ; u_int <S2SV_ModEnd> tlen ; const <S2SV_ModStart> ; int as_size ; int as_len <S2SV_ModStart> break ; } as_len <S2SV_ModEnd> = bgp_attr_get_as_size ( <S2SV_ModStart> atype, pptr, len ) ; if ( as_len < 0 ) ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; else if ( as_len > len ) ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; else if ( as_len > <S2SV_ModEnd> len ) { <S2SV_ModStart>, tok2str ( bgp_as_path_segment_close_values <S2SV_ModEnd>, ""?"", <S2SV_ModStart>, tok2str ( bgp_as_path_segment_close_values <S2SV_ModEnd>, ""?"",",0
545,"<S2SV_ModStart>, ""<tr><td>Running <S2SV_blank> state</td><td>%s</td></tr>"", ( Run. flags & Run_Running )? ""True"" : ""False"" <S2SV_ModEnd> ) ; StringBuffer_append",0
546,"<S2SV_ModStart> ) src_pitch ; vpx_memmove <S2SV_ModEnd> ( dest,",0
547,"<S2SV_ModStart>, tokenAmount, tokenMinAmount,",0
548,<S2SV_ModStart> j ++ ) { <S2SV_ModStart> j ] ; if ( intfc -> desc. bNumEndpoints < j ) continue ; },0
549,"<S2SV_ModStart>, event, 0 <S2SV_ModEnd>, 0,",0
550,<S2SV_ModStart> ; distortion = vp8_variance_16x16 <S2SV_ModEnd> ( * (,0
551,<S2SV_ModStart> temp ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> interface -> macAddr. w [ 0 ] = 0 ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr,0
552,<S2SV_ModStart> header ) ; if ( maxlen > 0 ) { <S2SV_ModStart> = 0 ; },0
553,<S2SV_ModStart> -> alg_priv ) { <S2SV_ModStart> alg_priv ) ; ctx -> priv -> alg_priv = NULL ; },0
554,<S2SV_ModStart> ; sf -> adaptive_motion_search_threshold = 1 ; sf -> <S2SV_ModStart> ; sf -> adaptive_motion_search_threshold = 1 ; sf ->,0
555,<S2SV_ModStart> pfds ) ; if ( ts [ h ]. thread_id == - 1 ) { continue ; },0
556,<S2SV_ModStart> inuse + ( ( <S2SV_ModStart> 2 * EXTRA_STACK ) * sizeof ( int ),0
557,<S2SV_ModStart> o ) { <S2SV_ModEnd> return Py_None ;,0
558,<S2SV_ModStart> * s = _PyUnicode_AsString ( errstr ) <S2SV_ModEnd> ; char buf,0
559,<S2SV_ModStart> ) break ; svc_ctx -> spatial_layers = 0 ;,0
560,<S2SV_ModStart> ) ; } <S2SV_ModEnd> mb_index = 0,0
561,"<S2SV_ModStart> self ) { return _PyDict_Copy ( self -> memo, <S2SV_ModEnd> self -> unpickler <S2SV_ModStart> -> unpickler -> memo_size, & PyDict_Type <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
562,<S2SV_ModStart> ( item ) { <S2SV_ModStart> = cJSON_Object ; item -> data = NULL ; },0
563,"<S2SV_ModStart> ) ) { # ifdef sv_mysql_error_handling mysql_error_handling ( imp_dbh -> pmysql, MYSQL_ERROR_INSUFFICIENT_BUFFER ) ; # endif",0
564,<S2SV_ModStart> size ) ) { <S2SV_ModStart> slot_lock ) ; return ; },0
565,"<S2SV_ModStart> struct ieee_802_11_phdr phdr ; gboolean mpdu_len_remain = 0 <S2SV_ModStart>, mpdu_len, & mpdu_len_remain <S2SV_ModEnd> ) ; if <S2SV_ModStart>, mpdu_len, & mpdu_len_remain <S2SV_ModEnd> ) ; if <S2SV_ModStart>, mpdu_len, & mpdu_len_remain <S2SV_ModEnd> ) ; if <S2SV_ModStart>, mpdu_len, & mpdu_len_remain <S2SV_ModEnd> ) ; if <S2SV_ModStart>, mpdu_len, & mpdu_len_remain <S2SV_ModEnd> ) ; if <S2SV_ModStart>, mpdu_len, & mpdu_len_remain <S2SV_ModEnd> ) ; if <S2SV_ModStart>, mpdu_len, & mpdu_len_remain <S2SV_ModEnd> ) ; if <S2SV_ModStart>, mpdu_len, & mpdu_len_remain <S2SV_ModEnd> ) ; if <S2SV_ModStart>, mpdu_len, & mpdu_len_remain <S2SV_ModEnd> ) ; if",0
566,<S2SV_ModStart> ; sh = ( sds ),0
567,<S2SV_ModStart> BYTE a_val ; <S2SV_ModEnd> for ( y <S2SV_ModStart> ; y < ( <S2SV_ModStart> context -> height ) <S2SV_ModStart> ; x < ( <S2SV_ModStart> context -> width ),0
568,"<S2SV_ModStart> > nr_parens ) { parse_error ( pe, - EINVAL, 0 ) ; goto out_free ; } <S2SV_ModEnd> * ( ++",0
569,"<S2SV_ModStart> rc -> frames_since_key > <S2SV_ModEnd> cpi -> output_framerate <S2SV_ModStart> rc -> frames_since_key / 2 ) { kf_boost = MAX ( kf_boost, <S2SV_ModEnd> rc -> frames_since_key <S2SV_ModStart> rc -> frames_since_key / 2 <S2SV_ModEnd> ) ; }",0
570,"<S2SV_ModStart> TX_MODE tx_mode = vp9_read_uint <S2SV_ModEnd> ( r,",0
571,"<S2SV_ModStart> : # line 98 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 99 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 100 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 98 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 99 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 100 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 99 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 100 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 100 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 100 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 100 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 100 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy",0
572,"<S2SV_ModStart> -> cpi ; <S2SV_ModEnd> MACROBLOCKD * xd <S2SV_ModStart> [ plane ] <S2SV_ModEnd> ; MB_MODE_INFO * <S2SV_ModStart> -> segment_id ; <S2SV_ModEnd> const int ref <S2SV_ModStart>, tx_size, <S2SV_ModEnd> pd -> above_context <S2SV_ModStart> -> above_context, <S2SV_ModEnd> pd -> above_context",0
573,<S2SV_ModStart>. pRename ; if ( pSelect -> pTab == p -> pTab ) { <S2SV_ModStart> WRC_Abort ; } },0
574,<S2SV_ModStart> users ) ; if ( sv_ops -> version == 0 ) { cb_info -> serv = NULL ; return ERR_PTR ( - EOPNOTSUPP ) ; },0
575,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
576,"<S2SV_ModStart> * prime_arg ; <S2SV_ModEnd> OM_uint32 minor_stat ; <S2SV_ModStart> -> api_version ; <S2SV_ModEnd> if (! <S2SV_ModStart>, prime_arg, <S2SV_ModEnd> & client_name, <S2SV_ModStart>, prime_arg, <S2SV_ModEnd> & client_name, <S2SV_ModStart>, prime_arg, <S2SV_ModEnd> & client_name, <S2SV_ModStart>, prime_arg, <S2SV_ModEnd> & client_name, <S2SV_ModStart>, prime_arg, <S2SV_ModEnd> & client_name, <S2SV_ModStart>, prime_arg, <S2SV_ModEnd> & client_name, <S2SV_ModStart>, prime_arg, <S2SV_ModEnd> & client_name, <S2SV_ModStart>, prime_arg, <S2SV_ModEnd> & client_name, <S2SV_ModStart>, prime_arg, <S2SV_ModEnd> & client_name, <S2SV_ModStart>, prime_arg, <S2SV_ModEnd> & client_name, <S2SV_ModStart>, prime_arg, <S2SV_ModEnd> & client_name, <S2SV_ModStart>, prime_arg, <S2SV_ModEnd> & client_name,",0
577,"<S2SV_ModStart> ssize_t ret = sendmsg_poll <S2SV_ModEnd> ( socket -> <S2SV_ModStart> & msg, 0,",0
578,<S2SV_ModStart> s ) { <S2SV_ModEnd> ret = send,0
579,"<S2SV_ModStart> -> name ; if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { <S2SV_ModStart> 0 ) { <S2SV_ModEnd> crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"" <S2SV_ModStart> ) ) ; } else { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; }",0
580,<S2SV_ModStart> return NULL ; if ( svc_ctx -> internal == NULL ) { return NULL ; },0
581,<S2SV_ModStart> ptr ) ; array_init ( arg ) ;,0
582,<S2SV_ModStart> vpx_bps = 12 ; _y4m -> vpx_bps = _y4m -> vpx_bps / 2,0
583,"<S2SV_ModStart> buf ; { wizkit_addinv ( <S2SV_ModEnd> readobjnam ( buf <S2SV_ModStart> ( buf, & zeroobj ) <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> return TRUE ;",0
584,<S2SV_ModStart> == FALSE ) { <S2SV_ModStart> return FALSE ; } <S2SV_ModStart> == FALSE ) { <S2SV_ModStart> return FALSE ; } <S2SV_ModStart> == FALSE ) { <S2SV_ModStart> return FALSE ; },0
585,<S2SV_ModStart> root ) ; <S2SV_ModEnd> if ( rule <S2SV_ModStart> & KEEPENV ) <S2SV_ModEnd> env -> count <S2SV_ModStart> count ++ ; <S2SV_ModEnd> return env ;,0
586,"<S2SV_ModStart> -> seg ; <S2SV_ModEnd> if ( cm <S2SV_ModStart> -> base_qindex, cpi -> in_frame_q_adj_ratio <S2SV_ModEnd> [ segment ]",0
587,"<S2SV_ModStart>, stmt_type, FunctionDef_attributes, 5 ) ; if (! FunctionDef_type ) return 0 ; AsyncFunctionDef_type = make_type ( ""AsyncFunctionDef"", stmt_type, <S2SV_ModStart>, stmt_type, FunctionDef_attributes, 5 ) ; if (! AsyncFunctionDef_type ) return 0 ; Return_type = make_type ( ""Return"", stmt_type, <S2SV_ModStart>, Assign_fields, 3 <S2SV_ModEnd> ) ; if",0
588,"<S2SV_ModStart> return ; } if ( <S2SV_ModStart>, 16 )!= 16 ) LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> to <S2SV_blank> log <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, log_path, strerror ( errno ) )",0
589,<S2SV_ModStart> ) ; } if ( m == B_PRED ) { unsigned int * const bct = is_key? b_modes : inter_b_modes ; int b = 0 ; do { ++ bct [ xd -> block [ b ]. bmi. mode ] ; } while ( ++ b < 16 ) ; },0
590,"<S2SV_ModStart>, * StartClean <S2SV_ModEnd> ; SetDefaults ( <S2SV_ModStart> ; } } <S2SV_ModEnd> nameobject = t <S2SV_ModStart> ) ) { <S2SV_ModEnd> ReadArray ( t <S2SV_ModStart> & num2 ) ; <S2SV_ModEnd> fprintf ( stderr <S2SV_ModStart> ( stderr, ""%s: <S2SV_blank> Command <S2SV_blank> %s <S2SV_blank> should <S2SV_blank> have <S2SV_blank> no <S2SV_blank> arguments\\n"" <S2SV_ModEnd>, axohelp, <S2SV_ModStart> axohelp, nameobject <S2SV_ModEnd> ) ; return",0
591,"<S2SV_ModStart> ; tmp = _PyEval_GetAttrId <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = _PyEval_GetAttrId <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = _PyEval_GetAttrId <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = _PyEval_GetAttrId <S2SV_ModEnd> ( obj,",0
592,"<S2SV_ModStart> * w, enum",0
593,<S2SV_ModStart> extack ) ) return - EOPNOTSUPP <S2SV_ModEnd> ; tos_off =,0
594,<S2SV_ModStart> : VPX_RC_ONE_PASS ; <S2SV_ModEnd> stream -> cx_time,0
595,"<S2SV_ModStart>, escaped_arch, NULL,",0
596,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> assert ( tile_rows <S2SV_ModStart> ( data_end, 0 <S2SV_ModEnd>, & cm <S2SV_ModStart> ( data_end, 0 <S2SV_ModEnd>, & cm",0
597,<S2SV_ModStart> = 0 ; if ( oxcf ) { <S2SV_ModStart> = 0 ; },0
598,"<S2SV_ModStart> ( GF_LOG_ERROR, GF_LOG_WARNING <S2SV_ModEnd>, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n""",0
599,"<S2SV_ModStart> ip_options * opt ; u32 flags <S2SV_ModStart> ) return ; spin_lock_irqsave ( & req_inet -> opt_lock, flags ) ; if ( opt -> cipso ) { <S2SV_ModStart> opt ) ; spin_unlock_irqrestore ( & req_inet -> opt_lock, flags ) ; }",0
600,"<S2SV_ModStart> * tokens, <S2SV_ModEnd> vp9_tree_index * tree <S2SV_ModStart> tree [ i <S2SV_ModEnd> ] ; if <S2SV_ModStart> { tokens [ <S2SV_ModEnd> j ]. <S2SV_ModStart> ; tokens [ <S2SV_ModEnd> j ].",0
601,<S2SV_ModStart> ( img ) { <S2SV_ModStart> img ) ; if ( res!= VPX_CODEC_OK ) return res ; },0
602,"<S2SV_ModStart> { ret = get_tag_from_asn1 <S2SV_ModEnd> ( asn1,",0
603,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static inline,0
604,<S2SV_ModStart> occf ) { int64_t max_bits ; if ( rc -> av_per_frame_bandwidth == 0 ) return 0 ;,0
605,<S2SV_ModStart> in ) { uint8_t <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,0
606,<S2SV_ModStart> -> mbmi ; <S2SV_ModEnd> int segment_id = <S2SV_ModStart> -> segment_id ; <S2SV_ModEnd> int mi_width = <S2SV_ModStart> int mi_width = num_8x8_blocks_wide_lookup [ bsize ] ; <S2SV_ModEnd> int mi_height = <S2SV_ModStart> int mi_height = num_8x8_blocks_high_lookup [ bsize ] ; x -> skip_recode =! x -> select_txfm_size && mbmi -> sb_type >= BLOCK_8X8 <S2SV_ModEnd> ; x ->,0
607,<S2SV_ModStart> x >> 8 ) ; psf -> header [ psf -> headindex ++ ] = ( x >> 0,0
608,"<S2SV_ModStart> uint32_t value ; unsigned <S2SV_ModStart>, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> %s: <S2SV_blank> bitstream <S2SV_blank> ended. <S2SV_blank> (bits=%u, <S2SV_blank> left=%u, <S2SV_blank> bits=%u)\\n"" <S2SV_ModEnd>, name, <S2SV_ModStart>, name, bits, zeroes, get_bits_left ( gbc ) <S2SV_ModEnd> ) ; }",0
609,"<S2SV_ModStart> || strchr ( ""!#$%&\'*+-.^_`|^"" <S2SV_ModEnd>, c ) <S2SV_ModStart> || strchr ( ""!#$%&\'*+-.^_`|^"" <S2SV_ModEnd>, c )",0
610,"<S2SV_ModStart>, packet -> <S2SV_ModEnd> http_origin. len",0
611,"<S2SV_ModStart>, y, <S2SV_ModEnd> dds_info -> height <S2SV_ModStart> dds_info -> height, <S2SV_ModEnd> exception ) ;",0
612,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL ) <S2SV_ModStart> } else { TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL )",0
613,"<S2SV_ModStart> action ) { double x = w * BzK ; double y = h * BzK ; <S2SV_ModStart>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> %12.3f <S2SV_blank> c\\n"", x, y, x <S2SV_ModEnd>, w * <S2SV_ModStart>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", x, y <S2SV_ModEnd>, w, <S2SV_ModStart>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c <S2SV_blank> %s\\n"", x, y <S2SV_ModEnd> * BzK, <S2SV_ModStart> * BzK, x <S2SV_ModEnd>, - h <S2SV_ModStart> * BzK, y <S2SV_ModEnd>, - w",0
614,<S2SV_ModStart> ) ) { <S2SV_ModEnd> sprintf ( outpos <S2SV_ModStart> y ) ; outpos += strlen ( outpos ) ;,0
615,"<S2SV_ModStart> ( AUTODETECT_TAG, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU <S2SV_blank> with <S2SV_blank> time <S2SV_blank> delta <S2SV_blank> %d"", rdp -> autodetect -> bandwidthMeasureTimeDelta <S2SV_ModEnd> ) ; Stream_Read_UINT32",0
616,"<S2SV_ModStart> -> tok ; if ( cm -> lst_fb_idx == 0 ) { * tp = vp8_alloc_tok_token ( cpi -> tok, VP8_ENC_ST_FRAME ) ; }",0
617,<S2SV_ModStart> # if CONFIG_MULTITHREAD <S2SV_ModEnd> vp8_decoder_remove_threads ( pbi,1
618,<S2SV_ModStart> 0x00 ) { if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 ) { xWantedSize = xHeapStructSize ; } else { <S2SV_ModStart> ) ) ; },0
619,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> vp9_iht8x8_add ( TX_TYPE <S2SV_ModStart> DCT_DCT ) { return <S2SV_ModStart> } else { return,0
620,"<S2SV_ModStart> { uint16 num_updates = 0 <S2SV_ModStart>, Debug, ""%s() <S2SV_blank> num_updates=%d"", __func__, num_updates <S2SV_ModEnd> ) ; in_uint16_le",0
621,"<S2SV_ModStart> } else { ovalue = NULL ; <S2SV_ModStart> MPR_TRIM_BOTH ) ; if (! ovalue ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""ErrorLog <S2SV_blank> directive <S2SV_blank> requires <S2SV_blank> a <S2SV_blank> filename"" ) ; return MPR_ERR_BAD_SYNTAX ; }",0
622,"<S2SV_ModStart> coef_branch_ct ) { int i, j, k, l, m ; <S2SV_ModStart> tx_size ] ; <S2SV_ModEnd> unsigned int ( <S2SV_ModStart> tx_size ] ; <S2SV_ModEnd> for ( i <S2SV_ModStart> l ) { <S2SV_ModEnd> coef_branch_ct [ i <S2SV_ModStart> [ l ] <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> [ 0 ] <S2SV_ModEnd> ; for (",0
623,"<S2SV_ModStart> { } ; char * old_name = name ; <S2SV_ModStart> ( name ) ; if ( utf8 ) old_name = enable_disable ( utf8 ) <S2SV_ModStart> ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> UTF-8 <S2SV_blank> kbdmode <S2SV_blank> %sd <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", old_name <S2SV_ModEnd>, enable_disable ( <S2SV_ModStart> ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> UTF-8 <S2SV_blank> term <S2SV_blank> processing <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", old_name <S2SV_ModEnd>, enable_disable ( <S2SV_ModStart> ( errno, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", old_name <S2SV_ModEnd>, name ) <S2SV_ModStart> ( ""UTF-8 <S2SV_blank> kbdmode <S2SV_blank> %sd <S2SV_blank> on <S2SV_blank> %s"", old_name <S2SV_ModEnd>, name )",0
624,<S2SV_ModStart> 0 ] = 0x82 <S2SV_ModEnd> ; obuf [ <S2SV_ModStart> 1 ] = 0x82 <S2SV_ModEnd> ; obuf [ <S2SV_ModStart> 1 ] = 0x82 <S2SV_ModEnd> ; obuf [ <S2SV_ModStart> 1 ] = 0x82 <S2SV_ModEnd> ; obuf [ <S2SV_ModStart> 1 ] = 0x82 <S2SV_ModEnd> ; obuf [ <S2SV_ModStart> 1 ] = 0x82 <S2SV_ModEnd> ; obuf [ <S2SV_ModStart> 1 ] = 0x82 <S2SV_ModEnd> ; if ( <S2SV_ModStart> 1 ] = 0x82 <S2SV_ModEnd> ; obuf [ <S2SV_ModStart> 1 ] = 0x82 <S2SV_ModEnd> ; return 0,0
625,<S2SV_ModStart> ( ( flags & VPX_CODEC_ENCODE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_ENCODE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_ENCODE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags,0
626,"<S2SV_ModStart> int stride, enum MV_BLOCK_SIZE <S2SV_ModEnd> mv_row, int <S2SV_ModStart> mv_precision_uv ; int uv_stride_2 ; int uv_stride_3 ; int <S2SV_ModStart> mv_precision_uv = MV_PRECISION_Q3 ; } uv_stride_2 = ( stride + 1 ) >> 1 ; if ( uv_block_size_2 == 8 ) { uv_stride_2 = ( stride + 1 ) >> 1 ; mv_precision_uv = MV_PRECISION_Q4 ; } else { uv_stride_2 = ( stride + 1 ) >> 1 <S2SV_ModStart>, uv_stride, uv_stride_2 <S2SV_ModEnd>, & mv <S2SV_ModStart>, uv_block_size, uv_stride_2 <S2SV_ModEnd>, which_mv, <S2SV_ModStart>, uv_stride, uv_stride_2 <S2SV_ModEnd>, & mv",0
627,"<S2SV_ModStart> = TRUE ; if (! strncmp ( origbuf, ""DEFAULT"", 3 ) ) { config_error_add ( ""Default <S2SV_blank> config <S2SV_blank> parameter <S2SV_blank> not <S2SV_blank> found"" ) ; return FALSE ; }",0
628,<S2SV_ModStart> ( ) ; if (! a ) { return 0 ; },0
629,<S2SV_ModStart> tile_cols ) ; <S2SV_ModEnd> int n ; <S2SV_ModStart> ; } } <S2SV_ModEnd> for ( n <S2SV_ModStart> n ) { <S2SV_ModEnd> tile_buffers [ n <S2SV_ModStart> tile_buffers [ n - pbi -> num_tile_workers <S2SV_ModStart> ; } } <S2SV_ModEnd> return tile_buffers ;,0
630,<S2SV_ModStart> ( ) ; if ( tag == 0x505244 ) { offset = base + get4 ( ) + 8 ; } else { <S2SV_ModStart> + 8 ; },0
631,"<S2SV_ModStart> ++ ) { const double qdelta = vp9_compute_qdelta ( & cpi -> rc, base_q, base_q * Q_RATIO ( i ) ) ; <S2SV_ModStart> ( i ) <= qdelta <S2SV_ModEnd> ) { RDMULT_RATIO",0
632,<S2SV_ModStart> -> error_code ) { <S2SV_ModStart> : NULL ; ctx -> base. err_status = error -> error_status ; },0
633,"<S2SV_ModStart>, * ps_cur_poc ; ps_dec -> u4_pic_ht = 0 ; ps_dec -> u2_pic_wd = 0 ; ps_dec -> u1_separate_parse = DEFAULT_SEPARATE_PARSE <S2SV_ModStart> ps_cur_poc ) ; <S2SV_ModEnd> ps_dec -> init_done",0
634,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet ),0
635,<S2SV_ModStart> <S2SV_null> <S2SV_null> static unsigned <S2SV_ModStart> ; else { unsigned,0
636,<S2SV_ModStart> GCSpropagate ) ; <S2SV_ModEnd> atomic ( L,0
637,<S2SV_ModStart> 0 ; else ret = <S2SV_ModEnd> - EIO ;,0
638,"<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart> ) ; } if (! <S2SV_ModStart>, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } s_log ( LOG_INFO, ""PostgreSQL <S2SV_blank> client <S2SV_blank> sent <S2SV_blank> %d <S2SV_blank> bytes <S2SV_blank> to <S2SV_blank> %s"", buffer [ 0 ], buffer [ 1 ]",0
639,<S2SV_ModStart> -> variant_opaque ; <S2SV_ModEnd> int ret_ga ; <S2SV_ModStart> = NULL ; <S2SV_ModEnd> bzero ( & <S2SV_ModStart> = getaddrinfo ( private -> <S2SV_ModStart> ai_canonname ) { private -> <S2SV_ModStart> ) ; } <S2SV_ModEnd> memcpy ( & <S2SV_ModStart> ) ; } <S2SV_ModEnd> connection -> socket <S2SV_ModStart> = sock ; <S2SV_ModEnd> return 0 ;,0
640,<S2SV_ModStart> ; cpi -> <S2SV_ModEnd> frames_till_gf_update_due = 0 <S2SV_ModStart> ; cpi -> <S2SV_ModEnd> non_gf_bitrate_adjustment = 0,0
641,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [nsrcs=%d]"" <S2SV_ModEnd>, nsrcs )",0
642,<S2SV_ModStart> struct mpt_ioctl_command karg = { 0 },0
643,"<S2SV_ModStart>, length, <S2SV_ModEnd> value, version <S2SV_ModStart> version, width, padding",0
644,<S2SV_ModStart> = 0 ; qcc -> qccp. tsfb. bandinfo [ bandno ]. rlvlno = rlvlno ;,0
645,"<S2SV_ModStart> ; if (! <S2SV_ModStart>, new_args ) ) { free ( new_modes ) ; free ( new_args ) ; return ; } <S2SV_ModEnd> if (!",0
646,"<S2SV_ModStart> int v = vp9_read_uint <S2SV_ModEnd> ( r, <S2SV_ModStart> 1 ) ; const int n = <S2SV_ModEnd> v < m <S2SV_ModStart> v < m? n : n - m ; return n <S2SV_ModEnd> ; } <S2SV_null>",0
647,"<S2SV_ModStart> vp9_tree tree ) { if ( tree [ 0 ] == 0 ) { costs [ 0 ] = vp9_cost_bit ( probs [ 0 ], 0 ) ; } else <S2SV_ModStart> ) ; } }",0
648,"<S2SV_ModStart> REFERENCE_MODE mode = vp9_read_mode <S2SV_ModEnd> ( r,",0
649,<S2SV_ModStart> stereo_fmt = STEREO_FORMAT_MONO <S2SV_ModEnd> ; # if,0
650,<S2SV_ModStart> ; if ( opp -> nd_opt_flags & ND_OPT_DNSSL_HOST ) { if ( <S2SV_ModStart> goto trunc ; },0
651,<S2SV_ModStart> re_ast ) -> root_node_size = 0 ; ( * re_ast ) ->,0
652,<S2SV_ModStart> 0 ) { auth_request_log_debug <S2SV_ModEnd> ( iter -> <S2SV_ModStart> 0 ) { auth_request_log_debug <S2SV_ModEnd> ( iter -> <S2SV_ModStart> 0 ) { auth_request_log_debug <S2SV_ModEnd> ( iter ->,0
653,<S2SV_ModStart> level = 0 ; tok -> line_number = 0,0
654,<S2SV_ModStart> maxBitrate ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
655,"<S2SV_ModStart> ASSERT ( dpbSize ) ; memset ( dpb, 0, dpbSize",0
656,"<S2SV_ModStart> = 0 ; oe_bool_t addrlen_ok = FALSE ; <S2SV_ModStart> ; if ( addrlen ) { addrlen_ok = ( * addrlen ) > 0? 1 : 0 ; if ( addrlen_ok ) { <S2SV_ModEnd> ret = sock <S2SV_ModStart> -> host_fd, addrlen, addrlen_ok ) ; } } if ( addrlen ) { <S2SV_ModEnd> ret = sock <S2SV_ModStart> -> host_fd, addrlen, addrlen_ok ) ; } <S2SV_ModEnd> return ret ;",0
657,<S2SV_ModStart> ) ) ; else { cJSON_Delete ( node ) ; },0
658,"<S2SV_ModStart> FALSE ; } if (! <S2SV_ModStart>, s ) ) { WLog_ERR ( TAG, ""Failed <S2SV_blank> to <S2SV_blank> process <S2SV_blank> negotiation <S2SV_blank> request."" ) ; return FALSE ; } <S2SV_ModEnd> } return tpkt_ensure_stream_consumed",0
659,<S2SV_ModStart> ipv6_pinfo * np <S2SV_ModEnd> ; struct ipv6_txoptions <S2SV_ModStart> -> l2tp_addr ; np = inet6_sk ( sk ) ;,0
660,"<S2SV_ModStart>, err, <S2SV_ModEnd> j ; struct <S2SV_ModStart> j ; struct cli_exe_section_hdr <S2SV_ModEnd> * exe_sections ; <S2SV_ModStart> ; # endif <S2SV_ModEnd> if (! <S2SV_ModStart> } # endif <S2SV_ModEnd> if ( cli_json_timeout_cycle_check <S2SV_ModStart> )!= 0 <S2SV_ModEnd> ) { cli_errmsg <S2SV_ModStart> } # endif <S2SV_ModEnd> if ( cli_pe_parse_file_hdr",0
661,"<S2SV_ModStart> address ) { uint16_t result = 0 ; <S2SV_ModStart> DM9000_REG_EPCR, EPCR_EPOS | EPCR_ERRE ) ; result = dm9000ReadReg ( DM9000_REG_EPAR ) ; if ( result == 0x40 ) { dm9000WriteReg ( DM9000_REG_EPAR, 0x40 ) ; } else { dm9000WriteReg ( DM9000_REG_EPCR, EPCR_EPOS ) ; } return result <S2SV_ModEnd> ; } <S2SV_null>",0
662,"<S2SV_ModStart> pcmk_ok ) { cib_tls_signon ( cib, & ( private -> command ) ) ; } if ( rc == pcmk_ok ) { <S2SV_ModStart> ) ) ; } if ( rc == pcmk_ok ) { <S2SV_ModStart> ) ; } <S2SV_ModEnd> fprintf ( stderr",0
663,<S2SV_ModStart> & address ; if ( addr == NULL ) { err = - EINVAL ; goto out ; },0
664,"<S2SV_ModStart> int new_mv_mode_penalty = 0 <S2SV_ModEnd> ; const int <S2SV_ModStart>, & num00, & tmp_mv",0
665,<S2SV_ModStart> ; h -> <S2SV_ModEnd> csum = (,0
666,<S2SV_ModStart> ; merged -> is_read_only = ( child -> is_read_only == NOT_SET? parent -> is_read_only : child -> is_read_only ) ; merged ->,0
667,"<S2SV_ModStart> one, offset <S2SV_ModEnd> ; ssize_t count <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> } if (",0
668,"<S2SV_ModStart> ( b, ( ( comp -> enabled & SSH_COMP_ENABLED_KEY_REQUIRED )? 1 : 0 ) <S2SV_ModEnd> ) )!=",0
669,"<S2SV_ModStart> ) ) { ovalue = strim ( <S2SV_ModEnd> stok ( option <S2SV_ModStart> & ovalue ) <S2SV_ModEnd>, ""\\""\'"",",0
670,"<S2SV_ModStart> user ) ; if ( client -> client_id!= NULL ) { g_hash_table_remove ( client_list, client -> client_id ) ; }",0
671,<S2SV_ModStart> next ) { <S2SV_ModEnd> if (! <S2SV_ModStart> ; } } * p = thread -> twups ; thread -> twups = thread ;,0
