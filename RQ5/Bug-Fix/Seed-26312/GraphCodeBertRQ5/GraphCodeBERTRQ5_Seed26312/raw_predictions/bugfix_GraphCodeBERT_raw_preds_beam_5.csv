,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; ret = - ETIMEDOUT ; goto out <S2SV_ModEnd> ; } mutex_unlock,0
1,<S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;,0
2,<S2SV_ModStart> 0 ) ; if ( writer -> stco!= NULL ),0
3,<S2SV_ModStart> while ( c <S2SV_ModEnd> > 0 ),0
4,"<S2SV_ModStart>, u64 nr <S2SV_ModEnd>, struct pt_regs <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",0
5,<S2SV_ModStart> { # ifndef _MSC_VER <S2SV_ModEnd> char buf [,0
6,"<S2SV_ModStart> ] ; int <S2SV_ModEnd> temp1, temp2",0
7,<S2SV_ModStart>. CameraMount = LIBRAW_MOUNT_FixedLens <S2SV_ModEnd> ; imgdata.,0
8,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void search_filter_level (,0
9,"<S2SV_ModStart>. left ; lua_pushinteger <S2SV_ModEnd> ( L,",0
10,"<S2SV_ModStart> ( w, uint32_t <S2SV_ModEnd> comp, mvcomp",0
11,<S2SV_ModStart> request -> rxBlockSzx <S2SV_ModEnd> ; else if <S2SV_ModStart> request -> rxBlockSzx <S2SV_ModEnd> ; if (,0
12,"<S2SV_ModStart> ( l2tp_cc_direction2str, ""Direction-#%u"" <S2SV_ModEnd>, * (",0
13,"<S2SV_ModStart> ( dest_keyring ) { if (! test_bit ( KEY_FLAG_REVOKED, & authkey -> flags ) ) return ; key_get ( dest_keyring ) ; } else",0
14,<S2SV_ModStart> create_spnego_ctx ( ) ; if ( sc == NULL ) return GSS_S_FAILURE,0
15,<S2SV_ModStart> int len ; if (! tm ) return NULL ;,0
16,<S2SV_ModStart> ( password ) + 1,0
17,<S2SV_ModStart> (! e <S2SV_ModEnd> ) goto not_found,0
18,<S2SV_ModStart> ) &&! capable ( CAP_FSETID ) &&! capable ( CAP_FSETID ) ) return - EPERM ; if (!,0
19,<S2SV_ModStart> = 0 ; select_select <S2SV_ModEnd> ( reader ->,0
20,<S2SV_ModStart> ( struct twopass_rc const,0
21,<S2SV_ModStart> + size <= ext4_i_size_read <S2SV_ModEnd> ( inode ),0
22,<S2SV_ModStart> alg ) { <S2SV_ModEnd> if (!,0
23,<S2SV_ModStart> ; line += 2 <S2SV_ModEnd> ; if (,0
24,<S2SV_ModStart> BYTE flags ; UINT16 <S2SV_ModEnd> length ; Stream_Read_UINT8,0
25,"<S2SV_ModStart> ; av_log ( s,",0
26,<S2SV_ModStart> 1 ; } ret = <S2SV_ModEnd> mount_entry_on_generic ( mntent <S2SV_ModStart> ) ; } return ret ;,0
27,<S2SV_ModStart> io -> io_cleanup = mem_cleanup <S2SV_ModEnd> ; switch (,0
28,<S2SV_ModStart> ( value + 0.5 <S2SV_ModEnd> ) ) ;,0
29,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return ret?,0
30,<S2SV_ModStart> vpx_codec_err_t res ; vpx_codec_enc_cfg_map_t <S2SV_ModEnd> * map ;,0
31,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
32,"<S2SV_ModStart> int frame_out, uint64_t <S2SV_ModEnd> dx_time ) {",0
33,<S2SV_ModStart> = NULL ; imp_length = 0 ;,0
34,"<S2SV_ModStart> NC28J60_REG_ECON1, ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60WriteBuffer",0
35,<S2SV_ModStart> ; value = ast2obj_int64 <S2SV_ModEnd> ( o -> <S2SV_ModStart> ; value = ast2obj_int64 <S2SV_ModEnd> ( o -> <S2SV_ModStart> ; value = ast2obj_int64 <S2SV_ModEnd> ( o ->,0
36,<S2SV_ModStart> page && ( ( <S2SV_ModStart> ) > 0 ),0
37,<S2SV_ModStart> pp_limits_buffer ; ; <S2SV_ModEnd> unsigned char *,0
38,<S2SV_ModStart> mb_cache_entry * ce = NULL,0
39,<S2SV_ModStart> ) ) ; free ( uri ) ;,0
40,<S2SV_ModStart> int ip_options_get_from_user ( const,0
41,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|truncated]"" <S2SV_ModEnd> ) ) ;",0
42,,0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode <S2SV_ModStart>, & new_mode, & acl ) ; if ( ret <S2SV_ModEnd> ) goto out",0
44,<S2SV_ModStart> ; cmpt = jas_malloc ( sizeof ( jas_image_cmpt_t ) ) <S2SV_ModEnd> ; if (,0
45,<S2SV_ModStart> flags & FLAG_MATCHED <S2SV_ModEnd> ) { flags,0
46,<S2SV_ModStart> acl_len ) { struct kvec * iov = req -> rq_rcv_buf. head ; <S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
47,<S2SV_ModStart> * TICK_NSEC ; u64 <S2SV_ModEnd> rem ; value,0
48,"<S2SV_ModStart> ( auth, "":"" <S2SV_ModEnd>, & tok",0
49,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> addr = VPX_MALLOC_L <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; <S2SV_ModEnd> if ( addr,0
50,<S2SV_ModStart> int indexes = SQUASHFS_LOOKUP_BLOCKS <S2SV_ModEnd> ( sBlk.,0
51,"<S2SV_ModStart> -> pool, ""ModSecurity: <S2SV_blank> Invalid <S2SV_blank> value <S2SV_blank> for <S2SV_blank> SecRuleEngine: <S2SV_blank> %s"" <S2SV_ModEnd>, p1 )",0
52,<S2SV_ModStart> ; # endif <S2SV_ModEnd> for ( argi,0
53,<S2SV_ModStart> 1 ; } <S2SV_ModEnd> return 0 ;,0
54,"<S2SV_ModStart> ; if ( at91_memcmp <S2SV_ModEnd> ( cmac,",0
55,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
56,<S2SV_ModStart> define EOFOp 0x07 <S2SV_ModEnd> char magick [,0
57,"<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> altsetting [ 0 ]. desc. bNumEndpoints < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; error = - EINVAL ; goto err_free_urb ; }",1
58,"<S2SV_ModStart> nfs4_stateid * stateid <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart> state, stateid <S2SV_ModEnd> ) ; write_sequnlock",0
59,"<S2SV_ModStart> = ""/etc"" ; <S2SV_ModEnd> fd = xfmkstemp <S2SV_ModStart>, dir ) ; if ( fd <S2SV_ModEnd> == NULL ) <S2SV_ModStart> NULL ) { <S2SV_ModEnd> err ( EXIT_FAILURE",0
60,<S2SV_ModStart> ; ps_pps -> i4_sps_valid = value ; ps_pps ->,0
61,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
62,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,<S2SV_ModStart> ) get_block = ocfs2_dio_get_block <S2SV_ModEnd> ; else get_block,0
65,"<S2SV_ModStart> ( f, ""%79s <S2SV_blank> %[^\\n]\\n"" <S2SV_ModEnd>, def,",0
66,<S2SV_ModStart> PyCompilerFlags cf ; <S2SV_ModEnd> char * str,0
67,<S2SV_ModStart> object -> child ; if (! object ) return NULL,0
68,<S2SV_ModStart> size ) ; if (! px -> ft ) return FALSE ;,0
69,"<S2SV_ModStart> u_char * dat, uint16_t len <S2SV_ModStart> ) ) ; <S2SV_ModEnd> val_l = EXTRACT_16BITS <S2SV_ModStart> ) ) ; <S2SV_ModEnd> val_l = EXTRACT_16BITS <S2SV_ModStart> ) ) ; <S2SV_ModEnd> val_l = EXTRACT_16BITS",0
70,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
71,<S2SV_ModStart> int i ; <S2SV_ModEnd> for ( i,0
72,,0
73,"<S2SV_ModStart> ) ) ; vpx_memmove <S2SV_ModEnd> ( sortlist,",0
74,"<S2SV_ModStart> _ipmi_destroy_user ( user, NULL",0
75,<S2SV_ModStart> int sl = ( int ),0
76,"<S2SV_ModStart> ( n, 0 <S2SV_ModEnd> ) == ASYNC <S2SV_ModStart> ( n, 0 <S2SV_ModEnd> + is_async )",0
77,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> dst_state -> curframe,0
78,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void write_mb_modes_kf (,0
79,<S2SV_ModStart> maxn ) { <S2SV_ModEnd> # ifdef DEBUG,0
80,"<S2SV_ModStart> ) ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> wb-prep:"" ) ) ;",0
81,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
82,"<S2SV_ModStart> * pTable, const",0
83,,0
84,<S2SV_ModStart> ) p += ( UChar * ),0
85,"<S2SV_ModStart> bfq_data * bfqq, enum bfq_expiration reason <S2SV_ModStart> flags ) ; <S2SV_ModEnd> if ( bfq_bfqq_budget_timeout",0
86,,1
87,"<S2SV_ModStart> regs ) ; perf_sw_event <S2SV_ModEnd> ( PERF_COUNT_SW_ALIGNMENT_FAULTS,",0
88,<S2SV_ModStart> diffPtr + x >= <S2SV_ModEnd> diffBlock + diffBlockLength <S2SV_ModStart> diffPtr + y >= <S2SV_ModEnd> extraBlock + extraBlockLength,0
89,<S2SV_ModStart> np -> opt <S2SV_ModEnd> ) ; err,0
90,"<S2SV_ModStart>, exception, exception,",0
91,"<S2SV_ModStart> encoder_common_init ( ctx, data",0
92,<S2SV_ModStart> new_size ) { Py_ssize_t <S2SV_ModEnd> i ; assert,0
93,"<S2SV_ModStart> ( wb, delta_q <S2SV_ModEnd> ) ; vp9_wb_write_literal",0
94,,0
95,"<S2SV_ModStart> * string, size_t <S2SV_ModEnd> length ) {",0
96,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
97,"<S2SV_ModStart> msicap, msgnum <S2SV_ModEnd> ) ; return",0
98,<S2SV_ModStart> } if ( server. masterhost &&,0
99,<S2SV_ModStart> ; if ( <S2SV_ModEnd> cfg -> g_lag_in_frames <S2SV_ModStart> g_pass!= VPX_RC_ONE_PASS <S2SV_ModEnd> ) ERROR (,0
100,<S2SV_ModStart> -> zbin_mode_boost = 1 <S2SV_ModEnd> ; vp9_init_plane_quantizers (,0
101,<S2SV_ModStart> ) return - EPERM <S2SV_ModEnd> ; info ->,0
102,<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; if ( ptr -> size < 8 ) return GF_ISOM_INVALID_FILE ;,0
103,<S2SV_ModStart>. get_glob_hdrs ( ctx <S2SV_ModEnd> ) ; },0
104,<S2SV_ModStart> mode ) { state -> state = mode ;,0
105,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( (,0
106,<S2SV_ModStart> memcpy ( elem. <S2SV_ModEnd> in_sg [ 0,0
107,"<S2SV_ModStart>, i, <S2SV_ModEnd> JPC_QCX_GETEXPN ( qcd <S2SV_ModStart>, i, <S2SV_ModEnd> JPC_QCX_GETMANT ( qcd",0
108,<S2SV_ModStart> avctx ) ; <S2SV_ModEnd> avpriv_request_sample ( avctx,0
109,<S2SV_ModStart> ) ; } if ( length > 0 ),0
110,"<S2SV_ModStart> image_noffset ) { <S2SV_ModEnd> char * name <S2SV_ModStart> if (! fit_image_check_sig <S2SV_ModEnd> ( fit, <S2SV_ModStart>, err_msg, fit_image_check_sig <S2SV_ModEnd> ( fit,",0
111,"<S2SV_ModStart> rx_kfifo, CX23888_IR_RX_KFIFO_SIZE - 1",0
112,<S2SV_ModStart> vpx_codec_dec_cfg_t * cfg __attribute__ ( ( unused ) ),0
113,<S2SV_ModStart> ; value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1100WritePhyReg (,0
114,<S2SV_ModStart> ; if ( sk &&,0
115,<S2SV_ModStart> else if ( <S2SV_ModEnd> flags & VPX_CODEC_USE_PSNR <S2SV_ModStart> flags & VPX_CODEC_USE_PSNR <S2SV_ModEnd> ) res =,0
116,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
117,<S2SV_ModStart> counter ) ; <S2SV_ModEnd> RESERVE_SPACE ( 28,0
118,<S2SV_ModStart> ) ; return 0,0
119,<S2SV_ModStart> ; } else if ( data [ 0 ] == '0' ),0
120,"<S2SV_ModStart> ; s = osStrtok_r ( NULL, "" <S2SV_blank> \\r\\n"", & p ) ; if ( error ) return error ; s =",0
121,<S2SV_ModStart> ( lshp -> ls_seq ) ; ND_TCHECK ( lshp ->,0
122,<S2SV_ModStart> } else { <S2SV_ModEnd> * obuf =,0
123,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
124,<S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ) <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ),1
125,<S2SV_ModStart> vp9_tree_index ii = ( vp9_tree_index ),0
126,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void write_buffer_16x16 (,0
127,"<S2SV_ModStart> 4, c <S2SV_ModEnd> ) ; if",0
128,<S2SV_ModStart> int x0 = ( int16_t ) <S2SV_ModStart> int x6 = ( int16_t ),0
129,<S2SV_ModStart> ; # endif <S2SV_ModEnd> return flags &,0
130,<S2SV_ModStart> MB_PREDICTION_MODE vp9_left_block_mode ( <S2SV_ModEnd> MODE_INFO * cur_mi,0
131,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void count_segs_sb (,0
132,<S2SV_ModStart> ; if ( <S2SV_ModEnd>! c ->,0
133,<S2SV_ModStart> get_blocks_flags = EXT4_GET_BLOCKS_CREATE | EXT4_GET_BLOCKS_DELALLOC_RESERVE,0
134,"<S2SV_ModStart> & p -> ai_family <S2SV_ModEnd>, & p",0
135,"<S2SV_ModStart> ( token, '=' <S2SV_ModEnd> ) ; if",0
136,<S2SV_ModStart> pc ) { vpx_memmove <S2SV_ModEnd> ( pc ->,0
137,<S2SV_ModStart> int ret ; if (! pegasus ) return - ENODEV ;,0
138,<S2SV_ModStart> mod_ty Module ( const,0
139,<S2SV_ModStart> write_idx ) ; <S2SV_ModEnd> if ( ctx <S2SV_ModStart> ) ; } <S2SV_ModEnd> buf -> ts_start,0
140,<S2SV_ModStart> 0 ) ; if ( cm -> frame_type == KEY_FRAME ) { <S2SV_ModStart> ; } } },0
141,<S2SV_ModStart> ( ) ; # if 0 <S2SV_ModStart> ( ) ; # endif,0
142,<S2SV_ModStart> '!' : { unsigned,0
143,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( status,0
144,<S2SV_ModStart> data_sz ) ) { <S2SV_ModStart> deadline ) ; },0
145,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int isofs_read_inode (,0
146,"<S2SV_ModStart> ( outpos, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"" <S2SV_ModEnd>, c,",0
147,<S2SV_ModStart> self ) { if ( self -> dict ),0
148,<S2SV_ModStart> 0 ; a <S2SV_ModEnd> < count ;,0
149,"<S2SV_ModStart> Py_ssize_t len ; if (! PyList_Check ( obj ) ) { PyErr_SetString ( PyExc_RuntimeError, ""Module <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> must <S2SV_blank> be <S2SV_blank> a <S2SV_blank> list, <S2SV_blank> not <S2SV_blank> a <S2SV_blank> %.200s"", tmp -> ob_type -> tp_name ) ; goto failed ; }",0
150,<S2SV_ModStart> [ RAS_MAGICLEN ] = { 0 },0
151,<S2SV_ModStart> ; } else { <S2SV_ModStart> VERIFY_WRITE ) ; },0
152,<S2SV_ModStart> ; const unsigned int,0
153,<S2SV_ModStart> ; SHOW ( g_h <S2SV_ModEnd> ) ; },0
154,"<S2SV_ModStart> { xsltTransformError ( ctxt,",0
155,"<S2SV_ModStart>, g, 0700 <S2SV_ModEnd> ) == 0 <S2SV_ModStart>, g, 0700 <S2SV_ModEnd> ) == 0",0
156,<S2SV_ModStart> msix_tab_size ) { <S2SV_ModEnd> bzero ( msixcap,1
157,"<S2SV_ModStart> & m, 1 <S2SV_ModEnd> ) ) js_pushnumber",0
158,<S2SV_ModStart> case OFreshOID : <S2SV_ModEnd> caml_set_oo_id ( (,0
159,"<S2SV_ModStart>, KSZ8851_REG_IER ) ; ier &= ~ IER_LCIE",0
160,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void encode_quantization (,0
161,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> ]. fd ),0
162,"<S2SV_ModStart> ( fp, localkey <S2SV_ModEnd> ) == -",0
163,<S2SV_ModStart> ( ) ; t1_buf_array [ t1_line_array ] = '\\0' ;,0
164,"<S2SV_ModStart> subsize ) ; if (! get_sb_index ( x, subsize ) ) return ;",0
165,"<S2SV_ModStart> key_ref ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) { ret = - ENOKEY ; goto error2 ; }",1
166,<S2SV_ModStart> 1 << ( ( DWORD32 ),0
167,<S2SV_ModStart> var_off ) ; if ( src_known ) { <S2SV_ModStart> var_off ) ; },0
168,<S2SV_ModStart> ; rc = -,0
169,<S2SV_ModStart> th -> dest <S2SV_ModEnd> ) ; if,0
170,"<S2SV_ModStart> { int number_of_keyframes = 0, encode_frame_count = 0 <S2SV_ModEnd> ; int i",0
171,<S2SV_ModStart> = new_cols ; <S2SV_ModEnd> vterm_allocator_free ( screen,1
172,"<S2SV_ModStart> ; } } if ( recurse_lvl == 0 ) { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; return - 1 ; }",0
173,"<S2SV_ModStart> ( pd, g_settings_dump_location <S2SV_ModEnd> ) ; char",0
174,<S2SV_ModStart> trueColour ) { <S2SV_ModEnd> if ( ptr <S2SV_ModStart> } else { <S2SV_ModEnd> if ( ptr,0
175,,0
176,"<S2SV_ModStart>, 0, 0 <S2SV_ModEnd>, 0,",0
177,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMP <S2SV_ModStart> case SOURCE_VAR_BASED_PARTITION : return 0 ;,0
178,"<S2SV_ModStart> ; dh = skb_header_pointer <S2SV_ModEnd> ( skb,",0
179,"<S2SV_ModStart>, struct ip_options const",0
180,<S2SV_ModStart> == NULL ) { <S2SV_ModStart> goto error ; },0
181,<S2SV_ModStart> ; uint16 nif = 0 ; uint16 nif,0
182,"<S2SV_ModStart>, client_uid, DEFAULT_DUMP_DIR_MODE <S2SV_ModEnd> ) ; if",0
183,<S2SV_ModStart> image -> columns <S2SV_ModEnd> ) ; x,0
184,<S2SV_ModStart> a ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
185,<S2SV_ModStart>. ddscaps2 & DDSCAPS2_CUBEMAP <S2SV_ModEnd> ) { ThrowReaderException,0
186,<S2SV_ModStart> ) ) ; if ( ndo -> ndo_vflag ),0
187,<S2SV_ModStart>! dumpable && <S2SV_ModEnd> ptrace_has_cap ( __task_cred,0
188,<S2SV_ModStart> * data ; <S2SV_ModEnd> if ( jas_matrix_numrows,0
189,<S2SV_ModStart> ps_codec ) ; break ;,0
190,<S2SV_ModStart> per_sdma ) ; dd -> per_sdma = NULL ;,0
191,"<S2SV_ModStart>, int rep_quick, int repair <S2SV_ModStart> |= T_CALC_CHECKSUM ; <S2SV_ModEnd> bzero ( (",0
192,<S2SV_ModStart> } pairs = palloc64 <S2SV_ModEnd> ( pcount *,0
193,"<S2SV_ModStart> val ) ; ruleadd <S2SV_ModEnd> ( r,",0
194,"<S2SV_ModStart> -> bind -> kind <S2SV_ModEnd> ), (",0
195,"<S2SV_ModStart> DCT_DCT ) { int16_t temp_in [ 16 ], temp_out [ 16 ] ; <S2SV_ModStart> 0 ] ; <S2SV_ModEnd> const transform_2d ht",0
196,"<S2SV_ModStart> ; if ( flatpak_openat_noatime <S2SV_ModEnd> ( parent_fd,",0
197,<S2SV_ModStart> ) + 5 + 1,0
198,"<S2SV_ModStart> ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Config <S2SV_blank> Rev <S2SV_blank> %s"" <S2SV_ModEnd>, EXTRACT_32BITS (",0
199,"<S2SV_ModStart> userData, target <S2SV_ModEnd> ) ; ctxt",0
200,"<S2SV_ModStart> S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" <S2SV_ModEnd> ""%s"" ""\\r\\n"" ""%s"",",0
201,"<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> rv = copy_file <S2SV_ModStart> src, dest <S2SV_ModEnd> ) ; if",0
202,<S2SV_ModStart>!= BFA_STATUS_OK ) { kfree ( fcstats ) ; <S2SV_ModStart> return NULL ; },1
203,"<S2SV_ModStart> = MinF ( 0.0f <S2SV_ModEnd>, MaxF ( <S2SV_ModStart> = MinF ( 0.0f <S2SV_ModEnd>, MaxF (",0
204,<S2SV_ModStart> ; rec -> sasl_username <S2SV_ModEnd> = src ->,0
205,<S2SV_ModStart> frames_till_gf_update_due ; } <S2SV_ModEnd> cpi -> frames_since_golden,0
206,"<S2SV_ModStart> c ; size_t <S2SV_ModEnd> o, datao",0
207,<S2SV_ModStart> ) ; } else { param -> error_printed = 1 ; },0
208,,0
209,<S2SV_ModStart> ; RAnalOp next_op = NULL,0
210,<S2SV_ModStart> ; def -> <S2SV_ModEnd> session_setup = usm_session_init,0
211,"<S2SV_ModStart> prog -> flags <S2SV_ModEnd>, sub )",0
212,<S2SV_ModStart> ] ; # ifndef NETSNMP_NO_WRITE_SUPPORT <S2SV_ModEnd> switch ( action,0
213,<S2SV_ModStart> ++ = ( unsigned,0
214,<S2SV_ModStart> open_list ) { spin_lock_irq ( & slave_active_lock ) ;,0
215,<S2SV_ModStart> -> u4_bitoffset = ih264d_read_mmco_commands <S2SV_ModEnd> ( ps_dec ),0
216,<S2SV_ModStart> - info -> rasterSize <S2SV_ModEnd> ; const uint_fast32_t,0
217,<S2SV_ModStart> || cherokee_buffer_is_empty ( <S2SV_ModEnd> conn -> validator <S2SV_ModStart> = cherokee_buffer_cnt_cspn ( <S2SV_ModEnd> conn -> validator,0
218,<S2SV_ModStart>!= NULL ) ; if ( bi == NULL ) return,0
219,"<S2SV_ModStart> ; rdsdebug ( ""size <S2SV_blank> %zu <S2SV_blank> flags <S2SV_blank> 0x%x <S2SV_blank> timeo <S2SV_blank> %ld\\n"" <S2SV_ModEnd>, size,",0
220,<S2SV_ModStart> += 9 ; <S2SV_ModEnd> s ++ ),0
221,<S2SV_ModStart>. active_set ; <S2SV_ModEnd> UIPC_LOCK ( ),0
222,<S2SV_ModStart> msgnum ) ; if (! msgnum ) return 0 ;,0
223,"<S2SV_ModStart> ( rb, unsigned",0
224,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> X509_NAME_free ( is <S2SV_ModStart> issuer ) ; <S2SV_ModEnd> free ( is,0
225,<S2SV_ModStart> cvp ) { <S2SV_ModEnd> } } <S2SV_null>,0
226,<S2SV_ModStart> break ; } if ( im -> gdes [ i ]. end > 0 ),0
227,<S2SV_ModStart> buf1 -> size <= <S2SV_ModEnd> buf2 -> size,0
228,<S2SV_ModStart> ) + size <S2SV_ModEnd> ; if (,0
229,<S2SV_ModStart> ; if ( protocol == 0 ) return - EAFNOSUPPORT ; if (,0
230,"<S2SV_ModStart> regs, address ) ; down_read ( & mm -> mmap_sem",0
231,"<S2SV_ModStart> bd_event_add_io ( b <S2SV_ModEnd>, & b",0
232,<S2SV_ModStart> ( ) ; errors += test_string_formatting ( ) ;,0
233,<S2SV_ModStart> -> lun ) sas_eh_finish_cmd <S2SV_ModEnd> ( cmd ),1
234,"<S2SV_ModStart>, end_col_offset ) ; if (! body ) return NULL",0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,"<S2SV_ModStart>, Bitmap2Header1, Bitmap2Header1 <S2SV_ModEnd>, BitmapHeader2,",0
237,"<S2SV_ModStart> ) ; } cJSON_AddItemReferenceToArray ( array, item ) ;",0
238,<S2SV_ModStart> 0 ) ; if (! res ) return - ENOMEM ;,0
239,<S2SV_ModStart> psf -> headindex - <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> headend - <S2SV_ModEnd> psf -> headend,0
240,<S2SV_ModStart> u4_ofst ) ; ps_cabac -> u4_ofst = ps_cabac -> u4_nxt_word ;,0
241,<S2SV_ModStart> ; if ( n_children <S2SV_ModEnd> < ctx ->,0
242,<S2SV_ModStart> event ) { <S2SV_ModEnd> raw_spin_lock_irq ( &,0
243,<S2SV_ModStart> -> post_proc_flag = <S2SV_ModEnd> CONFIG_POSTPROC_VISUALIZER ( ctx <S2SV_ModStart> ; # if <S2SV_ModEnd> CONFIG_POSTPROC_VISUALIZER flags ->,0
244,"<S2SV_ModStart> ; ND_TCHECK2 ( <S2SV_ModEnd> tptr, sizeof",0
245,<S2SV_ModStart> { # if <S2SV_ModEnd> CONFIG_RUNTIME_CPU_DETECT if ( <S2SV_ModStart> ; # if <S2SV_ModEnd> CONFIG_RUNTIME_CPU_DETECT if (,0
246,<S2SV_ModStart> 0 ) ; _exit ( 0 ) ;,0
247,<S2SV_ModStart> ; if ( ptr_hbe_txposer -> core_frame_length == 1024 ) ptr_hbe_txposer -> core_frame_length = 1024 ; if (,0
248,<S2SV_ModStart> prov_spec = parsed_require_line <S2SV_ModEnd> ; spec =,0
249,<S2SV_ModStart> ; } } <S2SV_ModEnd> return ( (,0
250,<S2SV_ModStart>! proto_end ) { free ( c ) ; <S2SV_ModStart> return 0 ; },0
251,<S2SV_ModStart> fdt ) ; <S2SV_ModEnd> * end =,0
252,<S2SV_ModStart> ; if ( server. bgrewritechildpid &&,0
253,<S2SV_ModStart> channel ) ; <S2SV_ModEnd> set_description ( client,1
254,<S2SV_ModStart> j ++ ) { <S2SV_ModStart> ; } } },0
255,"<S2SV_ModStart> action ) ; outpos += sprintf ( outpos, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> %12.3f <S2SV_blank> c\\n"", r * BzK, r * BzK, r * BzK, r * BzK, r * BzK, r ) ;",0
256,<S2SV_ModStart> 16 ) { <S2SV_ModEnd> sf -> x_scale_fp,0
257,<S2SV_ModStart> oe_EINVAL ) ; <S2SV_ModEnd> return ret ;,0
258,<S2SV_ModStart> sk ) ; <S2SV_ModEnd> break ; },0
259,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> sctp_v6_protosw_exit ( ),0
260,<S2SV_ModStart> stream_state * stream ) { if ( stream -> psnr_count <S2SV_ModStart> ) ; } },0
261,<S2SV_ModStart> { dst_name = ( char * ),0
262,"<S2SV_ModStart>, KSZ8851_REG_CIDER ) == <S2SV_ModEnd> KSZ8851_REV_A3_ID ) {",0
263,"<S2SV_ModStart> skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
264,<S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ;,0
265,"<S2SV_ModStart> 0 ) { BTIF_TRACE_DEBUG ( ""%s"", __FUNCTION__ ) ;",0
266,<S2SV_ModStart> rc -> av_per_frame_bandwidth * <S2SV_ModEnd> rc -> baseline_gf_interval <S2SV_ModStart> rc -> av_per_frame_bandwidth * <S2SV_ModEnd> rc -> baseline_gf_interval,0
267,"<S2SV_ModStart> i ], ""--allow-trusted"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart>, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-trusted"" <S2SV_ModEnd> ) ; argv",0
268,<S2SV_ModStart> o ) { return NULL <S2SV_ModEnd> ; } switch,0
269,<S2SV_ModStart> ib ] ; <S2SV_ModEnd> dequant_ptr = d,1
270,<S2SV_ModStart> ( buff ) <S2SV_ModEnd> ) ; # <S2SV_ModStart> ( buff ) <S2SV_ModEnd> ) ; # <S2SV_ModStart> ( buff ) <S2SV_ModEnd> ) ; #,0
271,<S2SV_ModStart> decrypt_cb ) { unsigned,0
272,"<S2SV_ModStart> client_name, service_name = NULL",0
273,"<S2SV_ModStart> best_sse = INT_MAX <S2SV_ModEnd>, best_rd_sse =",0
274,<S2SV_ModStart> goto error ; if ( statbuf. st_size == 0 ) goto error ;,0
275,"<S2SV_ModStart> u1_level_idc, u1_seq_parameter_set_id = 0",0
276,<S2SV_ModStart> ; vpx_svc_parameters_t * const,0
277,"<S2SV_ModStart> out ) { int <S2SV_ModEnd> input_compression, input_photometric",0
278,<S2SV_ModStart> ) { # if defined ( HAVE_LSTAT ) &&! defined ( HAVE_LSTAT ) <S2SV_ModEnd> ( void ),0
279,<S2SV_ModStart> ihh ) { <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> & ident ) <S2SV_ModEnd> ) { if,0
280,"<S2SV_ModStart> tx_size_uv = get_uv_tx_size ( lfi_n, tx_size_uv <S2SV_ModEnd> ) ; const",0
281,<S2SV_ModStart> mq_ops ) { if ( q -> mq_ops ),0
282,<S2SV_ModStart> uint8_t val ; if (! vdev -> config ) return ( uint32_t ) - 1 ;,0
283,"<S2SV_ModStart> ( option, "" <S2SV_blank> =\\t,"" <S2SV_ModEnd>, & ovalue",0
284,<S2SV_ModStart> || * replySize > <S2SV_ModEnd> sizeof ( int,0
285,<S2SV_ModStart> ; } } <S2SV_ModEnd> return ret ;,0
286,<S2SV_ModStart> 0x02 ) ; <S2SV_ModEnd> r = sc_transmit_apdu,0
287,<S2SV_ModStart> = cpu_to_le16 ( i <S2SV_ModEnd> ) ; if,0
288,<S2SV_ModStart> ; } } return - 1 ;,1
289,<S2SV_ModStart> * streams ; const,0
290,<S2SV_ModStart> ; mb_row ++ ; mb_row ++,0
291,<S2SV_ModStart> ) ; } if ( status == MagickFalse ) { image = image2 ; goto END_OF_READING ; },0
292,"<S2SV_ModStart> len ) { Py_ssize_t len, i ; <S2SV_ModStart> ; } } <S2SV_ModEnd> len = p",0
293,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> enum { YES <S2SV_ModStart> ""Unexpected <S2SV_blank> off_t/time_t <S2SV_blank> size"" ) ; <S2SV_ModEnd> if ( src",0
294,<S2SV_ModStart> test ) { if ( word >= test ) return 0 ;,0
295,<S2SV_ModStart> ; oci -> <S2SV_ModEnd> mode_info_stride = 0,0
296,"<S2SV_ModStart>, sizeof ( ENTROPY_CONTEXT_PLANES <S2SV_ModEnd> ) ) ; <S2SV_ModStart>, sizeof ( ENTROPY_CONTEXT_PLANES <S2SV_ModEnd> ) ) ;",0
297,,0
298,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> vterm_allocator_free ( screen,1
299,"<S2SV_ModStart> = nanosleep ( <S2SV_ModEnd> delay, &",0
300,"<S2SV_ModStart> one, offset = 0",0
301,<S2SV_ModStart> value ) { <S2SV_ModEnd> httpSetRouteName ( state,0
302,"<S2SV_ModStart> type -> match <S2SV_ModEnd>,. match_data",0
303,<S2SV_ModStart> ntime ) { <S2SV_ModEnd> goto out ;,0
304,<S2SV_ModStart> 0 ) { ssize_t <S2SV_ModEnd> ret = write,0
305,"<S2SV_ModStart> __dict__ ) ; if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) { return NULL ; } <S2SV_ModStart> = Py_BuildValue ( ""O()"" <S2SV_ModEnd>, Py_TYPE (",0
306,"<S2SV_ModStart> ) & desc, sizeof ( * desc )",1
307,<S2SV_ModStart> perf_event * ) <S2SV_ModEnd> ; switch (,0
308,<S2SV_ModStart> <S2SV_null> <S2SV_null> static MB_PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( r,0
309,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ioffset < 0,0
310,<S2SV_ModStart> ) ; return VALUE <S2SV_ModEnd> ; } <S2SV_null>,0
311,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
312,<S2SV_ModStart> ) ; } if (! stream ) { continue ; },0
313,<S2SV_ModStart> ( ) ; if ( version > 1 ),0
314,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void pack_mb_tokens (,0
315,<S2SV_ModStart> } ; struct vp9_compute_update_table <S2SV_ModEnd> ( ) ; <S2SV_ModStart> += first_part_size ; vp9_compute_update_table <S2SV_ModEnd> ( ) ;,0
316,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
317,<S2SV_ModStart> _U_ ) { <S2SV_ModEnd> unsigned int dumpascii <S2SV_ModStart> ) ) ; ND_TCHECK ( * ext ) ;,0
318,<S2SV_ModStart> cmpt -> data + cmpt -> height,0
319,<S2SV_ModStart> urb ) ; <S2SV_ModEnd> goto err_free_urb_to_pipe ;,0
320,"<S2SV_ModStart>, xh20_0, xh20_0, xl20_0, xl20_0, xl20_0, xl20_0, xl20_0 <S2SV_ModEnd> ; WORD32 x_0",0
321,"<S2SV_ModStart> ) { return mount_entry_on_sysfs <S2SV_ModEnd> ( mntent,",0
322,<S2SV_ModStart> -> display_height ; if ( scaling_active ) { <S2SV_ModStart> ) ; } },0
323,"<S2SV_ModStart> ( env, <S2SV_ModEnd> server_port_val, req_server_port",0
324,<S2SV_ModStart> endif int col_type = 0,0
325,<S2SV_ModStart> need = 0 <S2SV_ModEnd> ; if (,0
326,<S2SV_ModStart> val ) ) { <S2SV_ModStart> len ) ; } else { <S2SV_ModEnd> strncpy ( str <S2SV_ModStart> len ) ; },0
327,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( fast_pool ->,0
328,"<S2SV_ModStart> ( str, ""ID:"" <S2SV_ModEnd>, len )",0
329,,1
330,<S2SV_ModStart> options ) { <S2SV_ModEnd> if ( svc_ctx <S2SV_ModStart> VPX_CODEC_INVALID_PARAM ; } SvcInternal * const si = get_svc_internal ( svc_ctx ) ;,0
331,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> unsigned int convert_distribution,0
332,<S2SV_ModStart> ( s1 ) <S2SV_ModEnd> ) ; },0
333,"<S2SV_ModStart> { parse_global_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL, <S2SV_ModStart> ; parse_service_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL,",0
334,<S2SV_ModStart> o ) { return NULL <S2SV_ModEnd> ; } switch,0
335,<S2SV_ModStart> ; } } <S2SV_ModEnd> if ( md,0
336,<S2SV_ModStart> ps_dec -> pu1_input_buffer + u4_size,0
337,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char * print_string,0
338,<S2SV_ModStart> == 1 ) { <S2SV_ModStart>  deadline ) ; ctx -- ; } <S2SV_ModEnd> ctx -- ;,0
339,<S2SV_ModStart> ; term. csi_argc = term. csi_argc ; term.,0
340,<S2SV_ModStart> < cols + 16 <S2SV_ModEnd> ; i ++,0
341,<S2SV_ModStart> = 0 ; i -> posY = 0 ;,0
342,"<S2SV_ModStart> ) ) { vp9_write_term <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vp9_write_term <S2SV_ModEnd> ( w,",0
343,<S2SV_ModStart> ps_codec ) ; if ( ps_codec -> i4_pps_valid ) { ret = IHEVCD_INVALID_HEADER ; },0
344,<S2SV_ModStart> ) ) { va_end ( argptr ) ;,0
345,<S2SV_ModStart> ) ; return ( Image * ),0
346,<S2SV_ModStart> ( rv ) { <S2SV_ModStart> dest ) ; },0
347,<S2SV_ModStart> BLOCK_8X8 : return vp9_mse8x8 <S2SV_ModEnd> ; case BLOCK_8X8 <S2SV_ModStart> BLOCK_8X16 : return vp9_mse16x16 <S2SV_ModEnd> ; default : <S2SV_ModStart> default : return vp9_mse16x16 <S2SV_ModEnd> ; } },0
348,,0
349,<S2SV_ModStart> ; if (! v4l2_buf ) return ; if (,0
350,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
351,<S2SV_ModStart> && rxent -> <S2SV_ModEnd> dport == sport,0
352,<S2SV_ModStart> = bss_desc ; if (! req_ssid -> ssid_len ) return - EINVAL ;,0
353,<S2SV_ModStart> ( error ) { kmem_free ( sbuf ) ; <S2SV_ModStart> return error ; },1
354,<S2SV_ModStart> = L2CAP_MODE_BASIC } ; void * ptr = req -> data <S2SV_ModStart> = L2CAP_DEFAULT_RETRANS_TO ) <S2SV_ModEnd> ; rfc.,0
355,"<S2SV_ModStart>, r, MSG_WAITALL <S2SV_ModEnd> ) ; while",0
356,<S2SV_ModStart> -> u1_pic_decode_done!= 1 <S2SV_ModEnd> ) && (,0
357,<S2SV_ModStart> while ( pair <S2SV_ModEnd> ) { mprAddItem,1
358,<S2SV_ModStart> deleg_cur ) ; if (! open_flags ) goto no_delegation_unlock ; <S2SV_ModStart> open_flags ) ; if (! ret ) goto no_delegation_unlock ;,0
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,,0
361,<S2SV_ModStart> ; } } <S2SV_ModEnd> mincore_pte_range ( vma,0
362,<S2SV_ModStart> == NULL ) { <S2SV_ModStart> ) ; } },0
363,<S2SV_ModStart> seg ) { if ( seg -> tree_probs == NULL ) return 0 ;,0
364,"<S2SV_ModStart> i ) { vpx_memmove <S2SV_ModEnd> ( dst_ptr1,",0
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,<S2SV_ModStart> depth ++ ; if ( buf2 == NULL ) return ( NULL ) ;,0
367,"<S2SV_ModStart> length ) ; Ksz8851ClearBit <S2SV_ModEnd> ( interface, <S2SV_ModStart>, KSZ8851_REG_RXQCR, TXQCR_SDA <S2SV_ModEnd> ) ; ksz8851WriteFifo <S2SV_ModStart>, KSZ8851_REG_TXQCR, TXQCR_METFE <S2SV_ModEnd> ) ; n",0
368,<S2SV_ModStart> ( ) ; mono_gc_invoke_finalizers ( ) ;,0
369,"<S2SV_ModStart> x0 ++ ; WORD32 <S2SV_ModEnd> x_8, x_9",0
370,<S2SV_ModStart> ( unlikely ( pmd_trans_huge <S2SV_ModEnd> ( * pmd,0
371,<S2SV_ModStart> ; usage ( <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; usage ( <S2SV_ModEnd> ) ; return,0
372,"<S2SV_ModStart> i, result <S2SV_ModEnd> ; PyObject *",1
373,<S2SV_ModStart> VPX_CODEC_MEM_ERROR ; } if ( ctx -> config. enc ) { <S2SV_ModStart> VPX_CODEC_MEM_ERROR ; } },0
374,<S2SV_ModStart> ++ ; } <S2SV_ModEnd> pixel -> freq,0
375,<S2SV_ModStart>. ptrs ) <S2SV_ModEnd> ) ; },0
376,<S2SV_ModStart>. strategyType == cpu_to_le16 ( 4096 ) <S2SV_ModEnd> ) { udf_debug,0
377,"<S2SV_ModStart>, ENC28J60_REG_MIWRL, MSB <S2SV_ModEnd> ( data )",0
378,<S2SV_ModStart> fmt ) { const,0
379,"<S2SV_ModStart> ; UtRegisterTest ( ""DefragReverseTest"", DefragReverseTest ) ; UtRegisterTest (",0
380,<S2SV_ModStart> = object_length ; new_object. data = NULL ;,0
381,<S2SV_ModStart> { separator = ( char_t ),0
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,<S2SV_ModStart> p_frame ) ; p_frame = NULL ;,0
384,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( error_count,0
385,<S2SV_ModStart> ; j < <S2SV_ModEnd> a -> names,0
386,<S2SV_ModStart> ; act = vp8_variance16x16 <S2SV_ModEnd> ( x ->,0
387,"<S2SV_ModStart> * ) ; yuvconfig2image ( & data -> img, NULL ) ; <S2SV_ModStart> VPX_CODEC_OK ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
388,,0
389,<S2SV_ModStart> expr_stmt ) ; <S2SV_ModEnd> else if (,0
390,,0
391,<S2SV_ModStart> ) ; } <S2SV_ModEnd> result = NS_FALSE,0
392,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; # if,0
393,<S2SV_ModStart> ; message -> length = 0 ; message ->,0
394,<S2SV_ModStart> xop -> dst_dev <S2SV_ModEnd> ; pr_debug (,0
395,<S2SV_ModStart> ; if (! old_bh <S2SV_ModEnd> ) { new_bh,0
396,"<S2SV_ModStart>, int ctr_id __attribute__ ( ( unused ) )",0
397,<S2SV_ModStart> image ) ; <S2SV_ModEnd> if ( status,0
398,"<S2SV_ModStart> 0, 0 <S2SV_ModEnd> ) ; if",0
399,<S2SV_ModStart> ) AcquireQuantumMemory ( ( unsigned char * ),0
400,,0
401,,0
402,<S2SV_ModStart> == B_PIC ) { <S2SV_ModStart> ps_dec ) ; ps_dec -> s_cur_frame_width = ps_dec -> s_cur_frame_width ; ps_dec -> s_cur_frame_width = ps_dec -> s_cur_frame_width ; ps_dec -> s_cur_frame_width = ps_dec -> s_cur_frame_width ; },0
403,<S2SV_ModStart> VP9_LAST_FLAG ) { <S2SV_ModEnd> if (!,0
404,,0
405,<S2SV_ModStart> tx_size = plane? get_uv_tx_size ( mbmi ) : <S2SV_ModEnd> mbmi -> tx_size,0
406,<S2SV_ModStart> ++ ) { <S2SV_ModEnd> dst [ 0 <S2SV_ModStart> 7 ] ; <S2SV_ModEnd> src += src_stride,0
407,<S2SV_ModStart> { rowstoread = ( int ) ( <S2SV_ModStart> img -> row_offset ),0
408,<S2SV_ModStart> ; } } <S2SV_ModEnd> return 0 ;,0
409,<S2SV_ModStart> - 2 ) <S2SV_ModEnd> psf -> header <S2SV_ModStart> = x ; <S2SV_ModEnd> ; } <S2SV_null>,0
410,<S2SV_ModStart> num & ( 1U <S2SV_ModEnd> << ( number,0
411,<S2SV_ModStart> ] ; const unsigned,0
412,<S2SV_ModStart> = NULL ; size_t <S2SV_ModEnd> attr_len ; uint16_t,0
413,<S2SV_ModStart> ; default : <S2SV_ModEnd> return 1 ;,0
414,"<S2SV_ModStart> 0, 0, NULL",0
415,"<S2SV_ModStart> ; BT_DBG ( ""sock <S2SV_blank> %p, <S2SV_blank> sk <S2SV_blank> %p"" <S2SV_ModEnd>, sock,",0
416,<S2SV_ModStart> MT_CPTYPE_PASSSALT ) { <S2SV_ModEnd> send_auth ( username,0
417,<S2SV_ModStart> ) ) ; imap_close_connection ( adata ) ; <S2SV_ModStart> ) ) ; imap_close_connection ( adata ) ;,0
418,<S2SV_ModStart> crypto_report_kpp rkpp ; strlcpy <S2SV_ModEnd> ( rkpp.,0
419,<S2SV_ModStart> ; } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
420,"<S2SV_ModStart>, & rlen, 0",1
421,<S2SV_ModStart> ; read_userfile ( curconn,0
422,"<S2SV_ModStart> ( name, ""__debug__"" <S2SV_ModEnd> ) == 0",0
423,<S2SV_ModStart> ( buf ) <S2SV_ModEnd> && str [,0
424,<S2SV_ModStart> in ) { int <S2SV_ModEnd> buf [ 2,0
425,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
426,"<S2SV_ModStart>, buf_size, 12 <S2SV_ModEnd> ) ) {",0
427,<S2SV_ModStart> bd_addr ) { if (! bd_addr ) return BT_STATUS_NOT_READY ;,0
428,<S2SV_ModStart> ; int avail = 0,0
429,<S2SV_ModStart> - 3 ) <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> headindex ++ ] = x ; <S2SV_ModEnd> ; } ;,0
430,<S2SV_ModStart> epoll_ ) ; if ( epoll ),0
431,"<S2SV_ModStart> = parse_global_option ( CMD_INITIALIZE <S2SV_ModEnd>, NULL, <S2SV_ModStart> = parse_service_option ( CMD_INITIALIZE <S2SV_ModEnd>, section_ptr,",0
432,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_EXTERNAL_MAX : * ( size_t * ) val = ms -> external_max ; return 0 ;,0
433,<S2SV_ModStart> mapping -> host <S2SV_ModEnd> ) ; if,0
434,<S2SV_ModStart> 1 ) ; if (! trak ) goto exit ;,0
435,<S2SV_ModStart> ; int plen = 0,0
436,<S2SV_ModStart> ; if ( <S2SV_ModEnd> Prefix!= NULL,1
437,<S2SV_ModStart> ; if ( i + 1 < NCH ( n ) &&,0
438,<S2SV_ModStart> ( ) ; g_hash_table_remove_all ( headers ) ;,0
439,"<S2SV_ModStart> row ) { vpx_memmove <S2SV_ModEnd> ( dst,",0
440,<S2SV_ModStart> MI_BLOCK_SIZE ) { <S2SV_ModEnd> BLOCK_SIZE i ;,0
441,"<S2SV_ModStart>, obj_tlen ; u_int <S2SV_ModEnd> hexdump ; u_int",0
442,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void inc_mvs (,0
443,<S2SV_ModStart> ) ; } <S2SV_ModEnd> res = vpx_codec_enc_config,0
444,<S2SV_ModStart> skb -> len <S2SV_ModEnd> ) < 0,0
445,<S2SV_ModStart> ) return ; <S2SV_ModEnd> DEBUGMSGTL ( (,0
446,"<S2SV_ModStart>, UI_SET_EVBIT, EV_KEY <S2SV_ModEnd> ) ; ioctl",0
447,<S2SV_ModStart> vp9_free_frame_buffer ( & ( <S2SV_ModStart> ]. img ),0
448,"<S2SV_ModStart> 1 ) { vp9_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vp9_lpf_vertical_4 <S2SV_ModEnd> ( s,",0
449,<S2SV_ModStart> krb5_error_code iakerb_alloc_context ( const,0
450,<S2SV_ModStart> ) ; } <S2SV_ModEnd> bitmapDC = CreateCompatibleDC,0
451,<S2SV_ModStart> START_CODE_PREFIX_LEN )!= USER_DATA_PREFIX <S2SV_ModEnd> ) { impeg2d_bit_stream_flush,0
452,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { ret = <S2SV_ModEnd> - EINVAL ; <S2SV_ModStart> - EINVAL ; goto out ; }",1
453,<S2SV_ModStart> ; imethod = ( MonoMethodInflated * ),0
454,<S2SV_ModStart> ; int tmp ; if (! buffer ) return - EINVAL,0
455,<S2SV_ModStart> )? ( l -> l_origin <S2SV_ModEnd>? NULL :,0
456,<S2SV_ModStart> decContainer_t * ) H264SwDecCalloc <S2SV_ModEnd> ( sizeof (,0
457,<S2SV_ModStart> 5 ) { opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ;,0
458,"<S2SV_ModStart> ) break ; if ( image -> scene >= image_info -> number_scenes ) { <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; }",0
459,<S2SV_ModStart> goto errout ; info -> stage = 0 ;,0
460,<S2SV_ModStart> krb5_key_data * key_data = NULL,0
461,"<S2SV_ModStart> * self, Py_ssize_t <S2SV_ModEnd> idx, PyObject",0
462,<S2SV_ModStart> ] ) ; if ( pCsr -> zInput == 0 ) { rc = SQLITE_NOMEM ; } else { <S2SV_ModStart> 1 ) ; },0
463,<S2SV_ModStart> filp ) { <S2SV_ModEnd> return 0 ;,0
464,"<S2SV_ModStart> expr_ty iter, const",0
465,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
466,"<S2SV_ModStart> error_code ) ; default : return ""Unknown <S2SV_blank> error <S2SV_blank> code"" ;",0
467,"<S2SV_ModStart> UINT error ; Stream_Read_UINT16 <S2SV_ModEnd> ( s, <S2SV_ModStart> eventId ) ; Stream_Read_UINT32 <S2SV_ModEnd> ( s,",0
468,<S2SV_ModStart> pData -> socket <S2SV_ModEnd> ) ; if,0
469,"<S2SV_ModStart> struct flowi6 fl6 ; IP6_ECN_flow_xmit ( sk, & fl6, np -> opt, np -> tclass )",0
470,<S2SV_ModStart> = clone_info ; image = clone_info ;,0
471,"<S2SV_ModStart> ( TAG, ""RDP_NEG_FAILURE"" <S2SV_ModEnd> ) ; Stream_Read_UINT8",0
472,<S2SV_ModStart> ; int len = 0,0
473,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> vpx_codec_err_t vp8_get_reference (,0
474,"<S2SV_ModStart> = calloc ( 1 <S2SV_ModEnd>, sizeof (",0
475,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void fix_interp_filter (,0
476,,0
477,"<S2SV_ModStart>, SLT_Error, ""Duplicated <S2SV_blank> Host <S2SV_blank> header"" <S2SV_ModEnd> ) ; return",0
478,<S2SV_ModStart> define EOFOp 0x07 <S2SV_ModEnd> char magick [,0
479,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> sizeof ( tETH_HDR ),1
480,<S2SV_ModStart> = ps_cur_poc ; ps_seq -> i4_delta_pic_order_cnt = 0 ;,0
481,<S2SV_ModStart> MPT_ADAPTER * ioc <S2SV_ModEnd> ; int iocnum,0
482,"<S2SV_ModStart> -> columns, 3 <S2SV_ModEnd> * sizeof (",0
483,"<S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv",0
484,<S2SV_ModStart> ; if ( <S2SV_ModEnd> datao + 12 <S2SV_ModStart> < datao ) <S2SV_ModEnd> { exif_log (,0
485,<S2SV_ModStart> ) ; } pixthumb [ index ] = '\\0' ;,0
486,"<S2SV_ModStart> void ) { s_poll_init ( fds, 1 ) ;",0
487,<S2SV_ModStart> void ) { if ( mnemonic == NULL ) return ;,0
488,"<S2SV_ModStart> ; } } <S2SV_ModEnd> TRACE_DEBUG ( "" <S2SV_blank> <S2SV_blank> EHT1 <S2SV_blank> = <S2SV_blank> %04""",0
489,<S2SV_ModStart> ++ ) { unsigned char <S2SV_ModEnd> * p =,0
490,<S2SV_ModStart> ps_slice_hdr ) { UWORD32 <S2SV_ModEnd> i ; WORD32,0
491,<S2SV_ModStart> = 0 ; char * out = NULL ; <S2SV_ModStart> = 1 ; <S2SV_ModEnd> out = (,0
492,<S2SV_ModStart> sk ) ; other = unix_peer ( sk ) ;,0
493,"<S2SV_ModStart> ( outpos, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"" <S2SV_ModEnd>, x,",0
494,<S2SV_ModStart> ( OM_uint32 ) KRB5_BAD_MSIZE <S2SV_ModEnd> ; return GSS_S_DEFECTIVE_TOKEN,0
495,<S2SV_ModStart> NULL ) { if ( ctx == NULL ) return VPX_CODEC_INVALID_PARAM ;,0
496,<S2SV_ModStart> plug ) ; <S2SV_ModEnd> put_ioctx ( ctx,0
497,"<S2SV_ModStart> char * name <S2SV_ModEnd> ) { int <S2SV_ModStart> { printf ( ""- <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, name )",0
498,<S2SV_ModStart> s } ; <S2SV_ModEnd> uECC_word_t * p <S2SV_ModStart> ) signature ; <S2SV_ModEnd> uECC_word_t carry ;,0
499,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|dao-truncated]"" <S2SV_ModEnd> ) ) ;",0
500,<S2SV_ModStart> ) ; } free ( buf ) ;,0
501,<S2SV_ModStart> cp == 'X' || * cp == 'X',0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
503,"<S2SV_ModStart> == NULL ) { pixc = pixFewColorsOctcubeQuant1 ( pixs, level ) ; <S2SV_ModStart> NULL ) ; }",0
504,<S2SV_ModStart>. vf = vp8_mse16x16 <S2SV_ModEnd> ; xd ->,0
505,<S2SV_ModStart> + 1 ; size_t <S2SV_ModEnd> size = overhead,0
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
507,<S2SV_ModStart> ; int i <S2SV_ModEnd> ; const double,0
508,<S2SV_ModStart> ; value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1101WritePhyReg (,0
509,<S2SV_ModStart> ; if ( <S2SV_ModEnd>! kwarg ),0
510,"<S2SV_ModStart> int dst_stride, int <S2SV_ModEnd> left_col, 64",0
511,<S2SV_ModStart> ++ ; } <S2SV_ModEnd> } if (,0
512,<S2SV_ModStart> ; ei -> <S2SV_ModEnd> i_sync_tid = 0,0
513,"<S2SV_ModStart> vp9_write_bit_buffer * wb, int force_resilient <S2SV_ModStart> profile == PROFILE_1 && force_resilient",0
514,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
515,<S2SV_ModStart> = '\\0' ; if ( context -> buffer == NULL ) return ERROR_INVALID_SYNTAX ;,0
516,<S2SV_ModStart> ; if ( i + 1 < NCH ( n ) &&,0
517,<S2SV_ModStart> = SEGMENT_DELTADATA ; <S2SV_ModEnd> pc -> refresh_golden_frame,0
518,<S2SV_ModStart> ; uint16_t n <S2SV_ModEnd> ; enc624j600ReadBuffer ( <S2SV_ModStart> ESV_RECEIVED_OK )!= ENC624J600_OK <S2SV_ModEnd> ) { enc624j600ReadBuffer,0
519,<S2SV_ModStart> xmlSchemaPtr schema ; VALUE rb_schema ; <S2SV_ModStart> value rb_schema ; <S2SV_ModEnd> errors = rb_ary_new,0
520,"<S2SV_ModStart> ( LOG_ERR, ""Could <S2SV_blank> not <S2SV_blank> read <S2SV_blank> configuration <S2SV_blank> file"" <S2SV_ModEnd> ) ; return",0
521,<S2SV_ModStart> ; out += 3 <S2SV_ModEnd> ; } state,0
522,<S2SV_ModStart> err = - <S2SV_ModEnd> EALREADY ; if,0
523,<S2SV_ModStart> POLL_IN ) ; <S2SV_ModEnd> perf_event_wakeup ( handle <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
524,<S2SV_ModStart> PLANE_SIZE ) { if ( len > PLANE_SIZE ) return - EINVAL ;,0
525,"<S2SV_ModStart> { print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" <S2SV_ModEnd> ) ; if",0
526,<S2SV_ModStart> ETH_MAX_FRAME_SIZE ) { if ( ( status & RXFHSR_RXFV )!= 0 ) { <S2SV_ModStart> RXFDPR_RXFPAI ) ; },0
527,"<S2SV_ModStart> * n, const",0
528,<S2SV_ModStart> ; out : flush_tlb <S2SV_ModEnd> ( ) ;,0
529,<S2SV_ModStart> ; } } <S2SV_ModEnd> sn_coap_protocol_free ( handle,0
530,"<S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" <S2SV_ModEnd> ) ; print_usage",0
531,<S2SV_ModStart> ; row < raw_width <S2SV_ModEnd> ; row ++,0
532,<S2SV_ModStart> if ( len <= <S2SV_ModEnd> needed ) {,0
533,"<S2SV_ModStart> ( clone_info, clone_info,",0
534,<S2SV_ModStart> ( bfqq ) bfq_idle_slice_timer <S2SV_ModEnd> ( bfqq ),0
535,<S2SV_ModStart> ; length += <S2SV_ModEnd> update_prepare_bounds ( context,0
536,,0
537,<S2SV_ModStart> ; plane < MAX_MB_PLANE <S2SV_ModEnd> ; plane ++,0
538,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void nonrd_pick_sb_modes (,0
539,<S2SV_ModStart> = NULL ; reader. superblock = NULL ;,0
540,"<S2SV_ModStart> -> ranges = calloc ( 1, <S2SV_ModEnd> sizeof ( MappedRange",0
541,<S2SV_ModStart> pkt_list ) ; <S2SV_ModEnd> if ( flags,0
542,"<S2SV_ModStart> ( clone_info, clone_info,",0
543,<S2SV_ModStart>! head ) <S2SV_ModEnd> return - EINVAL <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
544,<S2SV_ModStart> u_char * pptr <S2SV_ModEnd> ) { int <S2SV_ModStart> u_char * tptr <S2SV_ModEnd> ; int as_size,0
545,<S2SV_ModStart> outputbuffer ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
546,"<S2SV_ModStart> ) src_pitch ; vpx_memmove <S2SV_ModEnd> ( dest,",0
547,<S2SV_ModStart> ) ; return true <S2SV_ModEnd> ; } <S2SV_null>,0
548,<S2SV_ModStart> ++ ) { if ( nalts [ iad_num ] == 0 ) break ;,0
549,"<S2SV_ModStart> 0, 0, NULL",0
550,<S2SV_ModStart> ; distortion = vp8_variance16x16 <S2SV_ModEnd> ( * (,0
551,"<S2SV_ModStart>, ENC624J600_REG_MAADR1 ) <S2SV_ModEnd> ; interface ->",0
552,<S2SV_ModStart> ) + maxlen + 1,0
553,<S2SV_ModStart> ; else { <S2SV_ModEnd> ctx -> iface,0
554,<S2SV_ModStart> -> use_square_partition_only =! frame_is_intra_only ( cm ) <S2SV_ModEnd> ; sf ->,0
555,"<S2SV_ModStart>. poll_count, 0 <S2SV_ModEnd> ) ; if",0
556,<S2SV_ModStart> + 2 * L -> stacksize <S2SV_ModEnd> ; if (,0
557,<S2SV_ModStart> o ) { return NULL <S2SV_ModEnd> ; } result,0
558,<S2SV_ModStart> * s = ( char * ),0
559,<S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( strcmp,0
560,<S2SV_ModStart> ) ; } fclose ( mvs ) ;,0
561,<S2SV_ModStart> self ) { Py_ssize_t <S2SV_ModEnd> i ; PyObject,0
562,,1
563,,0
564,"<S2SV_ModStart> ( & slot_lock ) ; BTA_JvRfcommWrite ( slot -> rfc_handle, slot -> id",0
565,<S2SV_ModStart> ; struct ieee_802_11_phdr *,0
566,<S2SV_ModStart> ; sh = sds_malloc <S2SV_ModEnd> ( hdrlen +,0
567,<S2SV_ModStart> BYTE a_val ; UINT16 <S2SV_ModEnd> tempWidth ; tempWidth,0
568,<S2SV_ModStart> > nr_parens ) goto out_free <S2SV_ModEnd> ; * (,0
569,<S2SV_ModStart> rc -> frames_since_key <= <S2SV_ModEnd> ctx -> output_framerate,0
570,"<S2SV_ModStart> TX_MODE tx_mode = vp9_read_literal_int <S2SV_ModEnd> ( r,",0
571,"<S2SV_ModStart> : # line 97 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 97 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 97 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 97 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 97 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 97 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 97 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 97 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy",0
572,<S2SV_ModStart> -> mb. coef_probs <S2SV_ModEnd> [ type ],0
573,<S2SV_ModStart> pSelect -> pSrc ; assert ( pWalker -> pParse -> db -> mallocFailed ),0
574,"<S2SV_ModStart>, NFS4_CALLBACK_BUFSIZE, &",0
575,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
576,<S2SV_ModStart> ; gss_buffer_desc client_name = NULL,0
577,<S2SV_ModStart> = fd ; int <S2SV_ModEnd> ret = sendmsg,0
578,"<S2SV_ModStart> do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
579,"<S2SV_ModStart> ; if ( is_set ( p -> flags, xpf_acl_write ) &&",0
580,<S2SV_ModStart> return NULL ; if ( svc_ctx == NULL ) return NULL ;,0
581,<S2SV_ModStart> arg ) ; <S2SV_ModEnd> } zend_hash_update (,0
582,<S2SV_ModStart> char buffer [ 80 <S2SV_ModEnd> ] ; int,0
583,<S2SV_ModStart> buf ; { <S2SV_ModEnd> return TRUE ;,0
584,<S2SV_ModStart> == 0 ) { <S2SV_ModStart> return FALSE ; },0
585,"<S2SV_ModStart> rule * rule, u_int flags <S2SV_ModStart> ; } } env -> flags |= flags ;",0
586,"<S2SV_ModStart> -> seg ; int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> frame_type, cm -> base_qindex, cm -> mi_cols ) ; <S2SV_ModStart> -> base_qindex, qindex_delta <S2SV_ModEnd> ) ; vpx_enable_segmentation",0
587,"<S2SV_ModStart>, FunctionDef_fields, 6 <S2SV_ModEnd> ) ; if",0
588,"<S2SV_ModStart> | O_TRUNC, S_IRUSR | S_IWUSR <S2SV_ModEnd> ) ; if",0
589,<S2SV_ModStart> ) ; } if ( m == B_PRED ) { ++ x -> ymode_count [ m ] ; ++ x -> uv_mode_count [ uvm ] ; },0
590,"<S2SV_ModStart>, * StartClean <S2SV_ModEnd> ; SetDefaults ( <S2SV_ModStart> nameobject ) ; <S2SV_ModEnd> return ( 0 <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> } StartClean =",0
591,"<S2SV_ModStart> ; tmp = PyObject_GetAttrId <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = PyObject_GetAttrId <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = PyObject_GetAttrId <S2SV_ModEnd> ( obj,",0
592,"<S2SV_ModStart> MB_PREDICTION_MODE mode, const",0
593,"<S2SV_ModStart>! match ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; <S2SV_ModStart> goto err_delete ; }",0
594,<S2SV_ModStart>. g_pass = VPX_RC_FIRST_PASS <S2SV_ModEnd> ; if (,0
595,"<S2SV_ModStart> ; if ( flatpak_openat_noatime <S2SV_ModEnd> ( parent_fd,",0
596,"<S2SV_ModStart>, tile_col ; <S2SV_ModEnd> assert ( tile_rows <S2SV_ModStart> ) ) ; <S2SV_ModEnd> for ( tile_row",0
597,<S2SV_ModStart> ) ) ; if (! oxcf ) return NULL ;,0
598,<S2SV_ModStart> dref ) { <S2SV_ModEnd> ( ( GF_DataInformationBox,0
599,<S2SV_ModStart> req ) { <S2SV_ModEnd> cipso_v4_delopt ( &,0
600,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void tree2tok (,0
601,"<S2SV_ModStart> ctx, img <S2SV_ModEnd> ) ; vpx_codec_pkt_list_init",0
602,"<S2SV_ModStart>, & len, NULL",0
603,<S2SV_ModStart> void fadst16_8col ( __m128i <S2SV_ModEnd> * in ),0
604,<S2SV_ModStart> int frame_max_bits ( <S2SV_ModEnd> ) { int64_t,0
605,<S2SV_ModStart> [ MIF_MAGICLEN ] = { 0 },0
606,,0
607,<S2SV_ModStart> ] = ( ( unsigned char ),0
608,<S2SV_ModStart> { uint32_t value = 0,0
609,<S2SV_ModStart> || c >= 128 <S2SV_ModEnd> ) { param,0
610,"<S2SV_ModStart>, packet -> http_content_len <S2SV_ModEnd>. ptr =",0
611,"<S2SV_ModStart> dds_info -> height <S2SV_ModEnd> ), exception",0
612,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL ) <S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL )",1
613,"<S2SV_ModStart> action ) ; outpos += sprintf ( outpos, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", w * BzK, w * BzK, w * BzK, w ) ;",0
614,<S2SV_ModStart> ) ) { <S2SV_ModEnd> sprintf ( outpos,0
615,"<S2SV_ModStart> ( AUTODETECT_TAG, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" <S2SV_ModEnd> ) ; Stream_Read_UINT32",0
616,<S2SV_ModStart> = recon_yoffset ; recon_yoffset = recon_yoffset ;,0
617,<S2SV_ModStart> # if CONFIG_MULTITHREAD <S2SV_ModEnd> vp8_decoder_remove_threads ( pbi,1
618,<S2SV_ModStart> { if ( ( xWantedSize & xBlockAllocatedBit )!= 0x00 <S2SV_ModEnd> ) { xWantedSize,0
619,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
620,"<S2SV_ModStart> ( Protocol, Debug <S2SV_ModEnd>, ""%s()"", <S2SV_ModStart> ( Protocol, Debug <S2SV_ModEnd>, ""%s()"",",0
621,"<S2SV_ModStart> ( option, "" <S2SV_blank> =\\t,"" <S2SV_ModEnd>, & ovalue",0
622,"<S2SV_ModStart> coef_branch_ct ) { int i, k, l, m ; <S2SV_ModStart> tx_size ] ; <S2SV_ModEnd> for ( i",0
623,<S2SV_ModStart> name ) ; if ( utf8 ),0
624,<S2SV_ModStart> 1 ] = 0x02 <S2SV_ModEnd> ; obuf [ <S2SV_ModStart> 1 ] = 0x83 <S2SV_ModEnd> ; obuf [,0
625,"<S2SV_ModStart> vpx_codec_enc_cfg_t * cfg, vpx_codec_ctx_t * ctx <S2SV_ModStart> = VPX_CODEC_INCAPABLE ; ctx -> config. enc = ctx -> config. enc ;",0
626,<S2SV_ModStart> const kernel = vp9_get_interp_kernel ( xd <S2SV_ModEnd> ) ; enum,0
627,<S2SV_ModStart> = TRUE ; <S2SV_ModEnd> bufp = find_optparam,0
628,<S2SV_ModStart> 0 ; a <S2SV_ModEnd> < count ;,0
629,<S2SV_ModStart> & ~ 1 <S2SV_ModEnd> ; int i <S2SV_ModStart> ( i < num_threads <S2SV_ModEnd> - 1 &&,0
630,<S2SV_ModStart> = base + get4 <S2SV_ModEnd> ( ) +,0
631,<S2SV_ModStart> ) { int <S2SV_ModEnd> seg = &,0
632,<S2SV_ModStart> -> error_code ) { <S2SV_ModStart> : NULL ; },0
633,<S2SV_ModStart> pocstruct_t * ps_prev_poc = NULL,0
634,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet ),0
635,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int getnum (,0
636,<S2SV_ModStart> GCSpropagate ) ; <S2SV_ModEnd> psurvival = sweepgen,0
637,<S2SV_ModStart> 0 ; else { ret = <S2SV_ModEnd> - EIO ; <S2SV_ModStart> - EIO ; goto err ; },0
638,<S2SV_ModStart>!= PROTOCOL_EARLY ) { return NULL ; } <S2SV_ModEnd> memset ( buffer,0
639,"<S2SV_ModStart> remote_connection_s * connection, int remote <S2SV_ModStart> = cib_remote_dispatch, <S2SV_ModEnd> } ; connection",0
640,"<S2SV_ModStart> sizeof ( VP8_COMP ) ) ; cpi -> common. error. setjmp = 1 ; CHECK_MEM_ERROR ( cpi -> mb. ss, vpx_calloc ( sizeof ( search_site ), ( MAX_MVSEARCH_STEPS * 8 ) + 1",0
641,,0
642,<S2SV_ModStart> int mptctl_mpt_command ( const,0
643,"<S2SV_ModStart>, length, <S2SV_ModEnd> version, width",0
644,"<S2SV_ModStart>, siz -> tileyoff <S2SV_ModEnd>, siz ->",0
645,<S2SV_ModStart> ) ; } free ( new_modes ) ;,0
646,<S2SV_ModStart> int decode_uniform ( const,0
647,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
648,<S2SV_ModStart> r ) { cm -> counts. comp_inter [ ctx ] [ mode ] = 0 ;,0
649,"<S2SV_ModStart> ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" <S2SV_ModEnd> ) ; if",0
650,"<S2SV_ModStart> ( ndo, op,",0
651,<S2SV_ModStart> re_ast ) -> next_node <S2SV_ModEnd> = NULL ;,0
652,<S2SV_ModStart> 0 ) { auth_request_log_error <S2SV_ModEnd> ( iter -> <S2SV_ModStart> 0 ) { auth_request_log_error <S2SV_ModEnd> ( iter -> <S2SV_ModStart> 0 ) { auth_request_log_error <S2SV_ModEnd> ( iter -> <S2SV_ModStart> 0 ) { auth_request_log_error <S2SV_ModEnd> ( iter -> <S2SV_ModStart> NULL ) { auth_request_log_error <S2SV_ModEnd> ( iter ->,0
653,<S2SV_ModStart> ; tok -> <S2SV_ModEnd> altwarning = 1,0
654,<S2SV_ModStart> maxBitrate ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
655,<S2SV_ModStart> ; ASSERT ( picSizeInMbs <S2SV_ModEnd> ) ; dpb,0
656,<S2SV_ModStart> oe_errno = 0 <S2SV_ModEnd> ; if (,0
657,,1
658,"<S2SV_ModStart> FALSE ; } if (! <S2SV_ModStart>, s ) ) return FALSE",1
659,<S2SV_ModStart> ipv6_pinfo * np <S2SV_ModEnd> ; struct ipv6_txoptions <S2SV_ModStart> ; } } np = inet6_sk ( sk ) ;,0
660,"<S2SV_ModStart> size_t fsize ; uint32_t <S2SV_ModEnd> valign, falign",0
661,"<S2SV_ModStart> DM9000_REG_EPAR, EPCR_EPOS <S2SV_ModEnd> ) ; while",0
662,<S2SV_ModStart> pccmk_ok ) { <S2SV_ModEnd> cib_tls_signon ( cib,0
663,<S2SV_ModStart>. msg_name = iov. iov_base <S2SV_ModEnd> ; msg.,0
664,<S2SV_ModStart> bsize ] ; MV <S2SV_ModEnd> int quart_frm =,0
665,<S2SV_ModStart> ) ) ; if ( h -> addr == NULL ) goto error ;,0
666,<S2SV_ModStart> ) ; } <S2SV_ModEnd> return NULL ;,0
667,"<S2SV_ModStart> one, offset = 0",0
668,"<S2SV_ModStart>, comp -> type <S2SV_ModEnd> ) )!=",0
669,"<S2SV_ModStart> ( option, "" <S2SV_blank> =\\t,"" <S2SV_ModEnd>, & ovalue",0
670,<S2SV_ModStart> client = user_data <S2SV_ModEnd> ; num_clients --,0
671,<S2SV_ModStart> * uv ; <S2SV_ModEnd> for ( uv,0
