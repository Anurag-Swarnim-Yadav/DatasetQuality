,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
1,<S2SV_ModStart> ; if ( skb_headroom ( skb ) < tnl_hlen <S2SV_ModEnd> ) { if,0
2,<S2SV_ModStart> * writer = <S2SV_ModEnd> gf_list_get ( writers,0
3,<S2SV_ModStart> c && item >= <S2SV_ModEnd> 0 ) {,0
4,"<S2SV_ModStart>, u64 nr <S2SV_ModEnd>, struct pt_regs <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",0
5,"<S2SV_ModStart> EXT4_EXTENTS_FLAG ) { struct grub_ext4_extent_header * leaf ; struct grub_ext4_extent_header * leaf ; struct grub_ext4_extent * ext ; int i ; leaf = grub_ext4_find_leaf ( data, buf, ( struct grub_ext4_extent_header * ) inode -> blocks. dir_blocks, fileblock ) ; if (! leaf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent_header * ) inode -> blocks. dir_blocks, fileblock ) ; if (! leaf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent_header * ) inode -> blocks. dir_blocks, fileblock ) ; if (! leaf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent_header",0
6,,0
7,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> parse_ciff ( save,0
8,,0
9,"<S2SV_ModStart>. left ; lua_pushnumber <S2SV_ModEnd> ( L,",0
10,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ++ i ) vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( usehp ) vpx_write <S2SV_ModEnd> ( w,",1
11,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; },0
12,"<S2SV_ModStart>, ""%04x, <S2SV_blank> "", EXTRACT_16BITS <S2SV_ModEnd> ( ptr ) <S2SV_ModStart>, ""%04x <S2SV_blank> "", EXTRACT_16BITS <S2SV_ModEnd> ( ptr )",0
13,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> construct_get_dest_keyring ( struct <S2SV_ModStart> * authkey ; if ( dest_keyring ) { key_get ( dest_keyring ) ; return - 1 ; } <S2SV_ModStart> dest_keyring ) ; return 0 <S2SV_ModEnd> ; } <S2SV_null>,0
14,<S2SV_ModStart> = create_spnego_ctx ( 0,0
15,<S2SV_ModStart> ; tm = localtime_safe <S2SV_ModEnd> ( & t,0
16,"<S2SV_ModStart> length ) ; memcpy <S2SV_ModEnd> ( hashed,",0
17,<S2SV_ModStart> e == p ||! e,0
18,"<S2SV_ModStart> ) &&! inode_capable <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! inode_capable <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! inode_capable <S2SV_ModEnd> ( inode,",0
19,<S2SV_ModStart> = 0 ; if (! <S2SV_ModStart> & timeout ) ) return false,0
20,,0
21,<S2SV_ModStart> offset + size < <S2SV_ModEnd> i_size_read ( inode,0
22,"<S2SV_ModStart> alg ) { <S2SV_ModEnd> if (! <S2SV_ModStart> CRYPTO_ALG_NEED_FALLBACK ) ) request_module <S2SV_ModEnd> ( ""%s-all"",",0
23,<S2SV_ModStart> = GIT_PKT_NG ; len = strlen ( line ) ; <S2SV_ModStart> += 3 ; len = strlen ( line ) ; <S2SV_ModStart> = '\\0' ; len = strlen ( line ) ; <S2SV_ModStart> = '\\0' ; len = strlen ( line ) ; <S2SV_ModStart> = '\\0' ; len = strlen ( line ) ;,0
24,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
25,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) return AVERROR_EOF ; if (,0
26,"<S2SV_ModStart> mntent, path, 0",0
27,<S2SV_ModStart> io_cleanup = mem_cleanup ; io -> io_size = 0,0
28,<S2SV_ModStart> MagickRealType ) ( <S2SV_ModEnd> pixel & ( <S2SV_ModStart> pixel << ( <S2SV_ModEnd> value + 0.5,0
29,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return ret?,0
30,"<S2SV_ModStart> vpx_codec_enc_cfg_map_t * map ; memset ( & map, 0, sizeof ( map ) )",0
31,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
32,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
33,<S2SV_ModStart> ; if (! imp_dbh -> pmysql ||,0
34,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_EWRPTL, ENC28J60_EWRPTH <S2SV_ModEnd> ) ; enc28j60WriteBuffer <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRTS <S2SV_ModEnd> ) ; return",0
35,<S2SV_ModStart> ; value = ast2obj_int <S2SV_ModEnd> ( o -> <S2SV_ModStart> ; value = ast2obj_int <S2SV_ModEnd> ( o ->,0
36,"<S2SV_ModStart> page && ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> page, R_OK ) <S2SV_ModStart> ) ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> page, wikitext ) <S2SV_ModStart> page && ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> page, R_OK )",0
37,,0
38,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache * ext4_mb_cache <S2SV_ModEnd>, struct buffer_head <S2SV_ModStart> ) ; struct mb2_cache * ext4_mb_cache = ext4_mb_cache <S2SV_ModEnd> ; int error <S2SV_ModStart> int error ; error = mb2_cache_entry_insert <S2SV_ModEnd> ( ce, <S2SV_ModStart> error ) { mb2_cache_entry_free ( ext4_mb_cache <S2SV_ModEnd> ) ; if <S2SV_ModStart> hash ) ; mb2_cache_entry_release ( ext4_mb_cache <S2SV_ModEnd> ) ; }",0
39,<S2SV_ModStart> ) ) ; free ( uri ) ;,0
40,"<S2SV_ModStart> net, struct ip_options <S2SV_ModEnd> * * optp <S2SV_ModStart> ) { struct ip_options <S2SV_ModEnd> * opt =",0
41,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
42,,0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode",0
44,,0
45,<S2SV_ModStart> || dp == ( unsigned char ),0
46,"<S2SV_ModStart> * req, u32 <S2SV_ModEnd> * acl_len ) <S2SV_ModStart> acl_len ) { <S2SV_ModEnd> uint32_t attrlen, <S2SV_ModStart> int status ; <S2SV_ModEnd> if ( ( <S2SV_ModStart>!= 0 ) return - EINVAL <S2SV_ModEnd> ; if ( <S2SV_ModStart>!= 0 ) return - EINVAL <S2SV_ModEnd> ; if ( <S2SV_ModStart>!= 0 ) return - EINVAL <S2SV_ModEnd> ; if ( <S2SV_ModStart> u32 recvd ; <S2SV_ModEnd> recvd = req <S2SV_ModStart> attrlen ) ; <S2SV_ModEnd> } else status",0
47,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
48,"<S2SV_ModStart> { owner = safe_stok <S2SV_ModEnd> ( auth, <S2SV_ModStart> } group = safe_stok <S2SV_ModEnd> ( tok,",0
49,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( addr <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; <S2SV_ModEnd> if ( addr,0
50,<S2SV_ModStart> int res ; size_t <S2SV_ModEnd> indexes = SQUASHFS_LOOKUP_BLOCKS <S2SV_ModStart> = SQUASHFS_LOOKUP_BLOCKS ( ( size_t ) <S2SV_ModStart> = read_fs_bytes ( ( size_t ),0
51,"<S2SV_ModStart> ; } else { const char * p = apr_psprintf ( cmd -> pool, ""ModSecurity: <S2SV_blank> Invalid <S2SV_blank> value <S2SV_blank> for <S2SV_blank> SecRuleEngine: <S2SV_blank> %s"", p1 ) ; <S2SV_ModStart>, ""ModSecurity: <S2SV_blank> Invalid <S2SV_blank> value <S2SV_blank> for <S2SV_blank> SecRuleEngine: <S2SV_blank> %s"", p ) ; } <S2SV_ModEnd> return NULL ;",0
52,<S2SV_ModStart> ; if ( 1 <S2SV_ModEnd> ) { # <S2SV_ModStart> } if ( 1 <S2SV_ModEnd> ) { },0
53,<S2SV_ModStart> } if ( c -> opt -> option. client || c -> opt -> redirect_addr. names ) return 1 ; if (,0
54,"<S2SV_ModStart> ; if ( memcmp <S2SV_ModEnd> ( cmac,",0
55,"<S2SV_ModStart> cpi ) { <S2SV_ModEnd> const uint64_t bits_used <S2SV_ModStart> 0 ) ; cpi -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> -= bits_used ; cpi -> twopass. gf_group_bits <S2SV_ModEnd> = MAX ( <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> cpi -> twopass",0
56,,0
57,<S2SV_ModStart> err_free_buf ; } <S2SV_ModEnd> dev_dbg ( &,0
58,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
59,"<S2SV_ModStart> * dir = ""/etc"" <S2SV_ModEnd> ; if (",0
60,<S2SV_ModStart> = value ; ps_pps -> i1_dependent_slice_enabled_flag = value ;,0
61,,0
62,,0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,<S2SV_ModStart> ) get_block = ocfs2_get_block <S2SV_ModEnd> ; else get_block <S2SV_ModStart> else get_block = ocfs2_dio_get_block <S2SV_ModEnd> ; return __blockdev_direct_IO,0
65,"<S2SV_ModStart> ( f, ""%79s <S2SV_blank> %[^\\n]\\n"" <S2SV_ModEnd>, def,",0
66,"<S2SV_ModStart> n ) { return fstring_compile_expr <S2SV_ModEnd> ( expr_start, <S2SV_ModStart> expr_start, expr_end, c, n <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
67,<S2SV_ModStart> string ) { return c <S2SV_ModEnd> -> child ;,0
68,<S2SV_ModStart> size ) ; if ( px -> ft ),0
69,"<S2SV_ModStart> u_char * dat, u_int len <S2SV_ModStart>, val_l ; val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; ND_PRINT ( ( ndo, ""CRCErr=%u <S2SV_blank> "", ( val_h << 16 ) + val_l ) ) ; ND_PRINT ( ( ndo, ""CRCErr=%u <S2SV_blank> "", ( val_h << 16 ) + val_l ) ) ; val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; ND_PRINT ( ( ndo, ""HardOver=%u <S2SV_blank> "", ( val_h << 16 ) + val_l ) ) ; val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; ND_PRINT ( ( ndo, ""BufOver=%u <S2SV_blank> "", ( val_h << 16 ) + val_l ) ) ; val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ;",0
70,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
71,<S2SV_ModStart> const buffers [ 4 <S2SV_ModEnd> ] = { <S2SV_ModStart> int strides [ 4 <S2SV_ModEnd> ] = {,0
72,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; for (,1
73,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
74,"<S2SV_ModStart> _ipmi_destroy_user ( user, NULL",0
75,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> sl = strlen,1
76,,0
77,<S2SV_ModStart> = NULL ; dst_state -> frame [ i ] = NULL ;,0
78,,0
79,"<S2SV_ModStart> if ( n >= <S2SV_ModEnd> maxn ) SWF_error <S2SV_ModStart> SWF_error ( ""Action <S2SV_blank> overflow!!"" ) ; if ( n >= maxn ) SWF_error ( ""Action <S2SV_blank> overflow!!",0
80,<S2SV_ModStart> prep ) ) return ( - 1 ) ; <S2SV_ModEnd> n = EXTRACT_32BITS,0
81,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
82,"<S2SV_ModStart> * pTable, const <S2SV_ModStart> = sizeof ( const",0
83,<S2SV_ModStart> i ] = ( WORD32 ),0
84,<S2SV_ModStart> ) p += enclen <S2SV_ModEnd> ( reg ->,0
85,,0
86,,1
87,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
88,<S2SV_ModStart> newDataLength || diffPtr + x > <S2SV_ModEnd> diffBlock + diffBlockLength,0
89,"<S2SV_ModStart>, np -> fl6_opt <S2SV_ModEnd>, np ->",0
90,<S2SV_ModStart> image ) ; status = MagickFalse ;,0
91,<S2SV_ModStart> data ) { ( void ) data ;,0
92,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
93,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
94,<S2SV_ModStart> mv. as_int <S2SV_ModEnd> ; if (,0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
97,"<S2SV_ModStart> msicap msicap ; memset ( & msicap, 0, sizeof ( msicap ) ) ;",0
98,,0
99,<S2SV_ModStart> ; if ( <S2SV_ModEnd> cfg -> g_lag_in_frames <S2SV_ModStart> g_lag_in_frames > 1 || <S2SV_ModEnd> cfg -> g_pass <S2SV_ModStart> -> g_pass!= VPX_RC_ONE_PASS <S2SV_ModEnd> ) ERROR (,0
100,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> vp9_init_plane_quantizers ( cpi,0
101,<S2SV_ModStart> si_code >= 0 && sig >= 0,0
102,<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; if ( ptr -> size < 8 ) return GF_ISOM_INVALID_FILE ;,0
103,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
104,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> -> state == fmode <S2SV_ModEnd> ) return ; <S2SV_ModStart> ; if ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> -> state = fmode <S2SV_ModEnd> ; } <S2SV_null>",0
105,"<S2SV_ModStart>!= 0 ) { <S2SV_ModStart> ""ImproperImageHeader"" ) ; }",0
106,<S2SV_ModStart> 0 ; } memcpy <S2SV_ModEnd> ( elem.,0
107,"<S2SV_ModStart>, i, <S2SV_ModEnd> JPC_QCX_GETEXPN ( qcd <S2SV_ModStart> [ i ] <S2SV_ModEnd> ) ; }",0
108,<S2SV_ModStart> == 8 ) && c -> format!= CHUNKY,1
109,"<S2SV_ModStart> 1, caplen <S2SV_ModEnd> ) ; return",0
110,"<S2SV_ModStart>, NULL ) ; if (! name ) return - EINVAL",0
111,<S2SV_ModStart> ; if (! state ) return - ENOMEM ; if (,0
112,"<S2SV_ModStart> px_codec_dec_cfg_t * cfg, vpx_codec_cap_type_t type_caps <S2SV_ModStart> = cfg ; ctx -> type_caps = type_caps ;",0
113,<S2SV_ModStart> ; value |= TJA1100_CONFIG1_MII_MODE_RMII_25 <S2SV_ModEnd> ; tja1100WritePhyReg (,0
114,<S2SV_ModStart> IP_OFFSET ) ; icmp_param. ip_summed = CHECKSUM_NONE ;,0
115,<S2SV_ModStart> & VPX_CODEC_CAP_XMA ) || <S2SV_ModEnd> ( iface -> <S2SV_ModStart> & VPX_CODEC_CAP_XMA ) || <S2SV_ModEnd> ( iface -> <S2SV_ModStart> & VPX_CODEC_CAP_PSNR ) || <S2SV_ModEnd> ( iface ->,0
116,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
117,"<S2SV_ModStart> arg -> open_flags, 0",0
118,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ) ; return 0 <S2SV_ModStart> break ; } return error <S2SV_ModEnd> ; } <S2SV_null>,1
119,"<S2SV_ModStart> addr, addrbuf, len",0
120,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
121,<S2SV_ModStart> goto trunc ; ND_TCHECK <S2SV_ModEnd> ( lshp -> <S2SV_ModStart> ls_type ) ; ND_TCHECK <S2SV_ModEnd> ( lshp ->,0
122,<S2SV_ModStart> } else { if ( ibuf -> ops ),0
123,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
124,<S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ) <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ),1
125,"<S2SV_ModStart> * costs, vpx_tree <S2SV_ModEnd> tree, const <S2SV_ModStart> tree, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> ) { const vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> ) ; const vpx_tree_index <S2SV_ModEnd> ii = tree",1
126,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
127,"<S2SV_ModStart> c, 0, true",0
128,,0
129,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> return flags &,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
131,,0
132,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> & CLIENT_CLOSE_AFTER_REPLY ) && ( c -> querybuf [ 0 ] == '*' ) ),0
133,<S2SV_ModStart> get_blocks_flags = EXT4_GET_BLOCKS_CREATE <S2SV_ModEnd> ; blks =,0
134,"<S2SV_ModStart> = 0 ; int ai_addrlen = 0 ; int ai_addrlen = 0 ; <S2SV_ModStart>, handle, & ai_addrlen, & ai_addrlen, & ai_addrlen, NULL, & <S2SV_ModEnd> canonnamelen, NULL <S2SV_ModStart> } if ( ai_addrlen <S2SV_ModEnd> &&! ( <S2SV_ModStart> } if ( ai_addrlen <S2SV_ModEnd> &&! ( <S2SV_ModStart> } if ( ai_addrlen <S2SV_ModEnd> &&! ( <S2SV_ModStart> } if ( ai_addrlen <S2SV_ModEnd> &&! ( <S2SV_ModStart> } if ( ai_addrlen <S2SV_ModEnd> &&! ( <S2SV_ModStart> } if ( ai_addrlen <S2SV_ModEnd> &&! (",0
135,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
136,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
137,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static void <S2SV_ModEnd> set_registers ( pegasus_t <S2SV_ModStart> data ) { void * buf ; int ret ; buf = kmalloc ( size, GFP_KERNEL ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
138,"<S2SV_ModStart> * body, const",0
139,"<S2SV_ModStart>, int64_t ts_end <S2SV_ModEnd> ) { struct <S2SV_ModStart> >> 4 ; <S2SV_ModEnd> if ( ctx <S2SV_ModStart> } else { vp9_copy_and_extend_frame <S2SV_ModEnd> ( src, <S2SV_ModStart> img ) ; <S2SV_ModEnd> buf -> ts_start",0
140,,0
141,,0
142,<S2SV_ModStart> = getnum ( <S2SV_ModEnd> MAXALIGN ) ;,0
143,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageExtent ( image ) ) ; }",0
144,"<S2SV_ModStart>! data && data_sz <S2SV_ModEnd> ) ) res <S2SV_ModStart>. decode ( <S2SV_ModEnd> data, data_sz",0
145,,0
146,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> ) ; } send ( outputbuffer ) ;",0
147,<S2SV_ModStart> self ) { if ( self ),0
148,<S2SV_ModStart> && i < ( int ),0
149,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body, & tmp ) < 0 ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_type_ignores, & tmp ) < 0 ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_type_ignores, & tmp ) < 0 ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_type_ignores, & tmp ) < 0 ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id ( obj, & PyId_type_ignores,",0
150,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
151,<S2SV_ModStart> msg ) ; <S2SV_ModEnd> err = verify_compat_iovec <S2SV_ModStart> VERIFY_WRITE ) ; <S2SV_ModEnd> err = verify_iovec <S2SV_ModStart> MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT <S2SV_ModEnd> ) ; if,0
152,<S2SV_ModStart> ) ; struct buffer_head * bh ; struct <S2SV_ModStart> end_of_metadata = height <S2SV_ModEnd> ; int eob,0
153,"<S2SV_ModStart> -> codec -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> -> use_i420? ""I420"" : ""YV12"" <S2SV_ModEnd> ) ; }",0
154,<S2SV_ModStart> ) ) ; if ( ctxt -> insert ) ctxt -> insert = NULL ;,0
155,"<S2SV_ModStart> 0 ) { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } else { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } } else { FILE * fp = fopen ( fname, ""w"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } else { FILE * fp = fopen ( fname, ""w"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"",",0
156,<S2SV_ModStart> msix_tab_size ) { <S2SV_ModEnd> bzero ( msixcap,1
157,<S2SV_ModStart> ; if ( <S2SV_ModEnd> js_regexec ( re,0
158,<S2SV_ModStart> case OFreshOID : <S2SV_ModEnd> sp -- ;,0
159,"<S2SV_ModStart> ( interface, KSZ8851_IER ) ; ksz8851WriteReg ( interface, KSZ8851_IER, 0 ) ; isr = ksz8851ReadReg ( interface, KSZ8851_ISR ) ; if ( ( isr & ISR_LCIS )!= 0 ) { ier &= ~ IER_LCIE ; interface -> nicEvent = TRUE ; flag |= osSetEventFromIsr ( & netEvent ) ; } if ( ( isr & ISR_TXIS )!= 0 ) { ksz8851WriteReg ( interface, KSZ8851_ISR, ISR_TXIS ) ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } } if ( ( isr & ISR_RXIS )!= 0 ) { ier &= ~ IER_RXIE ; interface -> nicEvent = TRUE ; flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } if ( ( isr & ISR_RXIS )",0
160,"<S2SV_ModStart> * cm, vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
161,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, msglen ) )",0
162,<S2SV_ModStart> ) ) { if (! ret ) goto sslerr ;,0
163,"<S2SV_ModStart> ( ) ; strncpy <S2SV_ModEnd> ( t1_buf_array,",0
164,,0
165,<S2SV_ModStart> ; ret = -,0
166,<S2SV_ModStart> ; ps_dec -> u4_first_slice_is_nonref = 0 ; ps_dec ->,0
167,<S2SV_ModStart> var_off ) ; if (! src_known ) return - EINVAL ; <S2SV_ModStart> var_off ) ; if (! dst_known ) return - EINVAL ;,0
168,<S2SV_ModStart> ; if ( <S2SV_ModEnd>! fileHandle ),0
169,<S2SV_ModStart> th -> dest <S2SV_ModEnd> ) ; if,0
170,,0
171,<S2SV_ModStart> = new_cols ; <S2SV_ModEnd> vterm_allocator_free ( screen,1
172,,0
173,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> dump_dir * dd,0
174,,0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
176,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if",1
177,,0
178,"<S2SV_ModStart> u_int8_t state ; memset ( & _dh, 0, sizeof ( _dh ) ) ;",0
179,<S2SV_ModStart> ip_options * opt <S2SV_ModEnd> ) { while <S2SV_ModStart> & 3 ) { <S2SV_ModStart> = IPOPT_END ; },0
180,<S2SV_ModStart> connection == NULL || connection == NULL,0
181,,0
182,"<S2SV_ModStart>, client_uid, DEFAULT_DUMP_DIR_MODE <S2SV_ModEnd> ) ; if",0
183,<S2SV_ModStart> -> columns - 3 <S2SV_ModEnd> ) ; x,0
184,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
185,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
186,"<S2SV_ModStart> ( vec, 0 <S2SV_ModEnd> ) ) ND_PRINT",0
187,"<S2SV_ModStart>! ptrace_has_cap ( task <S2SV_ModEnd> -> user_ns,",0
188,<S2SV_ModStart>  maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t,0
189,"<S2SV_ModStart> = 1 ; ihevcd_parse_user_data_registered_itu_t_t <S2SV_ModEnd> ( ps_codec,",0
190,,0
191,,0
192,"<S2SV_ModStart> Pairs = palloc ( pcount, <S2SV_ModEnd> sizeof ( Pairs",0
193,"<S2SV_ModStart> val ) ; if (! <S2SV_ModStart>, val ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> command"", r -> name )",0
194,,0
195,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { vpx_fdct16x16_t out [ 256 ] ; vpx_fdct16x16_t <S2SV_ModEnd> * outptr = <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16 <S2SV_ModStart> ++ j ) out <S2SV_ModEnd> [ j *",0
196,"<S2SV_ModStart> if (! g_str_has_suffix <S2SV_ModEnd> ( tmpfile_name,",0
197,"<S2SV_ModStart> '\\0' ) ; if (! filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } <S2SV_ModStart> node ) ; if (! filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } <S2SV_ModStart> enode ) ; if (! entry -> key ) { <S2SV_ModStart> value ) ; } <S2SV_ModStart> sections ) ) { <S2SV_ModStart> fp ) ; }",0
198,"<S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ;",0
199,"<S2SV_ModStart>, target, NULL,",0
200,"<S2SV_ModStart> ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModEnd> ""%s"" ""\\r\\n"" ""%s"",",0
201,"<S2SV_ModStart> ) ; } <S2SV_ModEnd> copy_file ( src <S2SV_ModStart> src, dest <S2SV_ModEnd> ) ; if <S2SV_ModStart> ""chown"" ) ; <S2SV_ModEnd> unlink ( src",0
202,<S2SV_ModStart>!= BFA_STATUS_OK ) { kfree ( fcstats ) ; <S2SV_ModStart> return NULL ; },1
203,<S2SV_ModStart> -> x = <S2SV_ModEnd> MaxF ( 0.0f <S2SV_ModStart> -> y = <S2SV_ModEnd> MaxF ( 0.0f <S2SV_ModStart> -> z = <S2SV_ModEnd> MaxF ( 0.0f,0
204,<S2SV_ModStart> ; rec -> sasl_username <S2SV_ModEnd> = src -> <S2SV_ModStart> ; rec -> sasl_password <S2SV_ModEnd> = src ->,0
205,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
206,"<S2SV_ModStart> o, datao ; memset ( & n -> entries, 0, sizeof ( MnoteCanonEntry ) )",0
207,<S2SV_ModStart> 0 ) { my_errno = errno ;,0
208,,0
209,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
210,<S2SV_ModStart> ; def -> <S2SV_ModEnd> session_setup = usm_session_init,0
211,"<S2SV_ModStart> NULL ; return <S2SV_ModEnd> match ( prog <S2SV_ModStart> eflags, sub, 0",1
212,<S2SV_ModStart> idx ] ; <S2SV_ModEnd> switch ( action <S2SV_ModStart> ) ; } <S2SV_ModEnd> return SNMP_ERR_NOERROR ;,0
213,<S2SV_ModStart> ( size_t ) number_pixels <S2SV_ModEnd> ; * pixels,0
214,"<S2SV_ModStart> timer ) ; list_for_each_entry_safe ( slave, tmp, & timeri -> slave_list_head, open_list ) { spin_lock_irq ( & slave_active_lock ) ; list_move_tail ( & slave -> open_list, & snd_timer_slave_list ) ; slave -> master = NULL ; spin_unlock_irq ( & slave_active_lock ) ; } <S2SV_ModStart> = NULL ; <S2SV_ModEnd> } mutex_unlock (",0
215,<S2SV_ModStart> -> u1_dpb_commands_read ) { <S2SV_ModStart> ps_dec ) ; },0
216,<S2SV_ModStart> = gifFilePtr -> ImageCount <S2SV_ModEnd> ; int_fast32_t heightOverflow <S2SV_ModStart> = gifFilePtr -> ImageCount <S2SV_ModEnd> * gifFilePtr ->,0
217,<S2SV_ModStart> NULL ) ||! conn -> validator -> passwd. buf ||,0
218,<S2SV_ModStart> bus ] ; if ( bi == NULL ) return <S2SV_ModEnd> ; si =,0
219,"<S2SV_ModStart>, timeo ) <S2SV_ModEnd> ; if (",1
220,<S2SV_ModStart> ; isspace ( ( unsigned char ) <S2SV_ModStart>! isspace ( ( unsigned char ),1
221,"<S2SV_ModStart> ; result = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL, NULL,",0
222,"<S2SV_ModStart> msixcap msixcap ; if <S2SV_ModEnd> ( msgnum >= <S2SV_ModStart> MAX_MSIX_TABLE_ENTRIES ) ; if <S2SV_ModEnd> ( barnum >= <S2SV_ModStart> dev, msgnum <S2SV_ModEnd> ) ; pci_populate_msixcap",0
223,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",1
224,<S2SV_ModStart> == NULL ) { ASN1_INTEGER_free ( is -> serial ) ; <S2SV_ModStart> goto cleanup ; },0
225,<S2SV_ModStart> cpi ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; <S2SV_ModStart> else if ( <S2SV_ModEnd> tx_size_search_method == USE_LARGESTALL <S2SV_ModStart> else if ( <S2SV_ModEnd> tx_size_search_method == USE_FULL_RD <S2SV_ModStart> tx_mode ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
226,<S2SV_ModStart> ; if ( <S2SV_ModEnd> im -> gdes_c,0
227,<S2SV_ModStart> ; if ( buf2 == NULL ||,0
228,<S2SV_ModStart> ) + size ; if ( size < 0 ) return NULL,0
229,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,1
230,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs,",0
231,<S2SV_ModStart> ; r = sd_event_add_io_event <S2SV_ModEnd> ( b ->,0
232,<S2SV_ModStart> ( ) ; errors += test_double_formatting ( ) ;,0
233,<S2SV_ModStart> -> lun ) sas_eh_defer_cmd <S2SV_ModEnd> ( cmd ),0
234,"<S2SV_ModStart>, end_col_offset ; int result ; <S2SV_ModStart> end_col_offset ) ; result = <S2SV_ModEnd> AsyncFunctionDef ( name <S2SV_ModStart> ) ; else result = <S2SV_ModEnd> FunctionDef ( name <S2SV_ModStart> c_arena ) ; return result ;",0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,,0
237,,1
238,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
239,<S2SV_ModStart> : if ( ( size_t ) <S2SV_ModStart> : if ( ( size_t ) <S2SV_ModStart> : if ( ( size_t ) <S2SV_ModStart> ; if ( ( size_t ) <S2SV_ModStart> ; if ( ( size_t ) <S2SV_ModStart> ; if ( ( size_t ),0
240,<S2SV_ModStart> ; return ( NULL <S2SV_ModEnd> ) ; },0
241,<S2SV_ModStart> prev_line_has_list_loosening_effect ) { if ( prev_line_has_list_loosening_effect ) { <S2SV_ModStart> prev_line_has_list_loosening_effect ; } },0
242,<S2SV_ModStart> perf_event_context * ctx <S2SV_ModEnd> ; struct task_struct <S2SV_ModStart> event ) ; ctx = event -> ctx ; ctx = event -> ctx ;,0
243,<S2SV_ModStart> -> post_proc_flag = <S2SV_ModEnd> ctx -> postproc_cfg <S2SV_ModStart>. noise_level ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
244,<S2SV_ModStart> lsr_msg4 ) ) ; if ( msg_len < sizeof ( struct olsr_msg4 ) ) goto trunc,0
245,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> int64_t store_reg [ <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vpx_usec_timer_start ( & <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,0
246,"<S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" <S2SV_ModEnd> ) ; exit",0
247,<S2SV_ModStart> ) / 8 <S2SV_ModEnd> ) ; ptr_hbe_txposer,0
248,,0
249,"<S2SV_ModStart> 0 ) { status = SetImageExtent ( image, image -> columns, image -> columns ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
250,<S2SV_ModStart> (! proto_end ||! url,0
251,"<S2SV_ModStart> ; end = fdt_next_tag ( fdt, offset, & len ) <S2SV_ModEnd> ; * end <S2SV_ModStart> ; name = fdt_get_name ( fdt, offset, & len ) ; if ( end - path + 2 + len >= path_len <S2SV_ModEnd> ) return -",0
252,,0
253,<S2SV_ModStart> channel ) ; <S2SV_ModEnd> set_description ( client,1
254,<S2SV_ModStart> book -> dim && i < n,1
255,<S2SV_ModStart> action ) { ( void ) action ;,0
256,<S2SV_ModStart> this_h ) ) return ; <S2SV_ModEnd> sf -> x_scale_fp,0
257,<S2SV_ModStart> (! sock <S2SV_ModEnd> ) OE_RAISE_ERRNO ( <S2SV_ModStart> OE_EINVAL ) ; if (! ret ) OE_RAISE_ERRNO ( OE_EINVAL ) ;,0
258,"<S2SV_ModStart> ( sk, ""%s"", <S2SV_ModStart> ( sk, ""%s"",",0
259,<S2SV_ModStart> unregister_pernet_subsys ( & sctp_net_ops <S2SV_ModEnd> ) ; sctp_v6_protosw_exit <S2SV_ModStart> ( ) ; sctp_v4_protosw_exit <S2SV_ModEnd> ( ) ;,0
260,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct,0
261,<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen (,1
262,"<S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_PHY1ILR <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A",0
263,"<S2SV_ModStart> skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
264,"<S2SV_ModStart>, IMAGE_SIZE_INVAL ) || fit_check_size ( fit, IMAGE_SIZE_INVAL, image_type )",0
265,"<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> uinput_fd, UI_DEV_DESTROY )",1
266,<S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> = rc -> avg_frame_bandwidth <S2SV_ModEnd> ; # endif,1
267,<S2SV_ModStart> ) if ( strcmp <S2SV_ModEnd> ( argv [,0
268,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
269,<S2SV_ModStart> ib ] ; <S2SV_ModEnd> dequant_ptr = d,1
270,"<S2SV_ModStart> FN_REFLEN ] ; strncpy <S2SV_ModEnd> ( buff,",0
271,<S2SV_ModStart> int n = <S2SV_ModEnd> ( data_end -,0
272,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
273,,0
274,"<S2SV_ModStart> goto error ; if ( fstat ( h -> fd, & statbuf ) == - 1 ) goto error ;",0
275,<S2SV_ModStart> ; UWORD8 u1_profile_idc = 0 ; UWORD8 u1_level_idc = 0 ; UWORD16 <S2SV_ModEnd> u1_seq_parameter_set_id ; UWORD16,0
276,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vp_svc_parameters_t * ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> return VPX_CODEC_INVALID_PARAM ; <S2SV_ModEnd> if ( vp9_set_size_literal",0
277,"<S2SV_ModStart> { uint16 bitspersample = 0, samplesperpixel = 0 <S2SV_ModEnd> ; uint16 input_compression",0
278,"<S2SV_ModStart> a ) { char * pn ; char c ; int r ; struct stat st ; pn = a -> name ; while ( c == '\\0' ) { if ( unlink ( a -> name ) ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } a -> pst = NULL ; } else if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } a -> pst = NULL ; } else if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name",0
279,,0
280,<S2SV_ModStart> tx_size_uv = get_uv_tx_size <S2SV_ModEnd> ( mbmi ) <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm,0
281,<S2SV_ModStart> mq_ops ) { <S2SV_ModEnd> flush_rq -> tag,0
282,<S2SV_ModStart> uint8_t val ; if ( addr >= vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,0
283,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
284,<S2SV_ModStart> NULL || * replySize > <S2SV_ModEnd> ( int ),0
285,,0
286,<S2SV_ModStart> 0x02 ) ; memcpy <S2SV_ModEnd> ( sbuf +,0
287,,0
288,<S2SV_ModStart> ; } } return - 1 ;,1
289,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
290,"<S2SV_ModStart>, recon_y_stride, <S2SV_ModEnd> recon_uvoffset, recon_uvoffset",0
291,<S2SV_ModStart> NULL ) ; goto END_OF_READING ;,0
292,,0
293,<S2SV_ModStart> struct stat stb = { 0 },0
294,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
295,<S2SV_ModStart> ; if (! oci -> above_context ) goto allocation_fail ; if (,0
296,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
297,<S2SV_ModStart> 0 ; } if ( u1_is_idr_slice && u1_is_idr_slice ) { ih264d_err_pic_dispbuf_mgr ( ps_dec ) ; return 0 ; },0
298,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> vterm_allocator_free ( screen,1
299,"<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & delay )",1
300,"<S2SV_ModStart> one, offset = 0",0
301,<S2SV_ModStart> { httpSetHostName ( <S2SV_ModEnd> stok ( sclone,0
302,"<S2SV_ModStart>. cmp = key_cmp ( type ) <S2SV_ModEnd>,. match_data",0
303,,0
304,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
305,"<S2SV_ModStart> PyObject * res <S2SV_ModEnd> ; PyObject * <S2SV_ModStart> = Py_BuildValue ( ""O()O"" <S2SV_ModEnd>, Py_TYPE ( <S2SV_ModStart> return Py_BuildValue ( ""O()"" <S2SV_ModEnd>, Py_TYPE (",0
306,"<S2SV_ModStart> ) & desc, sizeof ( * desc )",1
307,"<S2SV_ModStart> -> private_data ; u32 <S2SV_ModEnd> ( * func <S2SV_ModStart> case PERF_EVENT_IOC_PERIOD : perf_event_period ( event, ( u64 __user * ) arg ) ; <S2SV_ModStart> ret ; } <S2SV_ModEnd> default : return",0
308,"<S2SV_ModStart> * cm, PREDICTION_MODE <S2SV_ModEnd> y_mode ) { <S2SV_ModStart> ) { const PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode",0
309,<S2SV_ModStart> block_size ) ; if ( block_size < 1 ) return - EINVAL ;,0
310,"<S2SV_ModStart> iv ) ; if ( NIL_P ( vpass )!= EVP_MAX_IV_LENGTH ) ossl_raise ( essl_cipher_pkcs5_keyivgen ( self, ctx ) ) ;",0
311,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
312,<S2SV_ModStart> ; if ( nghttp2_is_fatal ( rv ) <S2SV_ModEnd> ) { rv,0
313,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> if (!,0
314,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ] ; const vpx_extra_bit <S2SV_ModEnd> * const b <S2SV_ModStart> ] ; const vpx_extra_bit <S2SV_ModEnd> * const b <S2SV_ModStart> & 1 ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ; } vpx_write <S2SV_ModEnd> ( w,",0
315,"<S2SV_ModStart>, uncompressed_hdr_size ; <S2SV_ModEnd> write_uncompressed_header ( cpi <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> += uncompressed_hdr_size ; vpx_compute_update_table <S2SV_ModEnd> ( ) ; <S2SV_ModStart> += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb",0
316,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
317,<S2SV_ModStart> struct ikev2_id id = { 0 },0
318,<S2SV_ModStart> if (! jas_taginfo_nonull <S2SV_ModEnd> ( jas_taginfos_lookup (,0
319,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
320,,0
321,"<S2SV_ModStart> mntent -> mnt_dir, NULL",1
322,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
323,<S2SV_ModStart> ( env ) <S2SV_ModEnd> ) ; fill_headers,0
324,<S2SV_ModStart> endif int col_type ; int <S2SV_ModEnd> prepare_retval ; MYSQL_BIND,0
325,"<S2SV_ModStart> int eol ; size_t <S2SV_ModEnd> need = 0 <S2SV_ModStart> screen, { ( size_t ) <S2SV_ModStart> *= 4 ; ( size_t ) need ;",0
326,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> ftoa_bounded_extra ( JsVarFloat <S2SV_ModStart> val ) ) return ( <S2SV_ModStart> ""NaN"", len ) <S2SV_ModStart> < 0 ) return ( <S2SV_ModStart> ""Infinity"", len )",0
327,<S2SV_ModStart> cycles ) ; <S2SV_ModEnd> if ( (,0
328,"<S2SV_ModStart> LEX_ID ) { strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> len ) ; strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> LEX_STR ) { strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> len ) ; strncpy <S2SV_ModEnd> ( str,",0
329,,1
330,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
331,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
332,"<S2SV_ModStart>, s2, ( int )",0
333,"<S2SV_ModStart> { parse_global_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL, <S2SV_ModStart> { parse_global_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL, <S2SV_ModStart> { parse_global_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL, <S2SV_ModStart> ; parse_service_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL,",0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,<S2SV_ModStart> md ) ; <S2SV_ModEnd> if (!,0
336,<S2SV_ModStart> u4_num_bytes_consumed ) ; ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = 0 ;,0
337,<S2SV_ModStart> <S2SV_null> <S2SV_null> static const,0
338,"<S2SV_ModStart>. encode ( NULL <S2SV_ModEnd>, img, <S2SV_ModStart>. encode ( NULL <S2SV_ModEnd>, img,",0
339,<S2SV_ModStart> ) ; } <S2SV_ModEnd> when 10 : <S2SV_ModStart> ) ; } <S2SV_ModEnd> when 10 :,0
340,<S2SV_ModStart> ( i = - 8 ; i < 8 ; i ++ ) s [ i ] = s [ i ] <S2SV_ModEnd> ; for (,0
341,,0
342,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
343,<S2SV_ModStart> = value ; ps_pps -> i1_dependent_slice_enabled_flag = value ;,0
344,<S2SV_ModStart> ) ) { if ( psf -> rwf_endian == SF_ENDIAN_LITTLE ) { psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; },0
345,,0
346,"<S2SV_ModStart> 0 ; } memset ( dest, 0, sizeof ( dest ) ) ;",0
347,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> BLOCK_8X8 : return vpx_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> BLOCK_16X8 : return vpx_mse16x8 <S2SV_ModEnd> ; case BLOCK_8X16 <S2SV_ModStart> BLOCK_8X16 : return vpx_mse8x16 <S2SV_ModEnd> ; default : <S2SV_ModStart> default : return vpx_mse16x16 <S2SV_ModEnd> ; } },1
348,,0
349,<S2SV_ModStart> ; if ( <S2SV_ModEnd> input -> buf_cur_space_left,0
350,<S2SV_ModStart> size ) { assert ( size <= PREFIX_SIZE ) ;,0
351,<S2SV_ModStart> && rxent -> <S2SV_ModEnd> dport == sport,0
352,<S2SV_ModStart> = bss_desc ; <S2SV_ModEnd> mwifiex_dbg ( adapter,0
353,<S2SV_ModStart> ( error ) { kmem_free ( sbuf ) ; <S2SV_ModStart> return error ; },1
354,<S2SV_ModStart> struct l2cap_conf_rfc rfc <S2SV_ModEnd> ; void * <S2SV_ModStart> sk ) ; rfc. mode = L2CAP_MODE_BASIC ; rfc. txwin_size = L2CAP_DEFAULT_RX_WINDOW ; rfc. max_transmit = L2CAP_DEFAULT_MAX_RECEIVE ; rfc. retrans_timeout = L2CAP_DEFAULT_RETRANS_TO ; rfc. monitor_timeout = L2CAP_DEFAULT_MONITOR_TO ; rfc. monitor_timeout = L2CAP_DEFAULT_MONITOR_TO ; <S2SV_ModStart> = L2CAP_MODE_ERTM ; <S2SV_ModEnd> l2cap_add_conf_opt ( &,0
355,"<S2SV_ModStart> do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> r, MSG_WAITALL )",1
356,<S2SV_ModStart> u1_nal_unit_type ; } ps_dec -> u1_pic_decode_done = 1 ;,0
357,<S2SV_ModStart> while ( pair <S2SV_ModEnd> ) { mprAddItem,1
358,"<S2SV_ModStart> delegation, int fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> -> type & fmode <S2SV_ModEnd> )!= open_flags <S2SV_ModStart> -> stateid, fmode <S2SV_ModEnd> ) ; ret <S2SV_ModStart>, NULL, fmode <S2SV_ModEnd> ) ; ret",0
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,,0
361,<S2SV_ModStart> ; } } <S2SV_ModEnd> mincore_unmapped_range ( vma,0
362,"<S2SV_ModStart> == '\\t' ) || ( * ptr == '\\0' ) <S2SV_ModStart> == '\\t' ) || ( * ptr == '\\0' ) <S2SV_ModStart> PAM_BUF_ERR ) ; ( void ) strcpy ( * ret_username, username ) ;",0
363,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> ) { return vpx_read_tree <S2SV_ModEnd> ( r,",1
364,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1,",0
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,,0
367,"<S2SV_ModStart> KSZ8851_TXMIR ) & TXMIR_TXMA_MASK <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( interface, KSZ8851_TXIC <S2SV_ModEnd>, RXQCR_SDA ) <S2SV_ModStart> ( interface, KSZ8851_RXQCR, RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_RXQCR, RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_TXQCR, TXQCR_METFE <S2SV_ModEnd> ) ; n",0
368,<S2SV_ModStart> ; # endif mono_console_handle_async_ops ( ) ;,0
369,,0
370,<S2SV_ModStart> ( unlikely ( pmd_trans_unstable ( <S2SV_ModEnd> pmd ) ),0
371,"<S2SV_ModStart>, target_width, * <S2SV_ModStart> ] ) ; * <S2SV_ModStart> ] ) ; * <S2SV_ModStart> ] ) ; * <S2SV_ModStart> fin ) ; * <S2SV_ModStart> fout ) ; *",0
372,"<S2SV_ModStart> i, result <S2SV_ModEnd> ; PyObject *",1
373,"<S2SV_ModStart> vpx_codec_alg_priv * priv <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> VPX_CODEC_MEM_ERROR ; } priv = calloc ( 1, sizeof ( struct vpx_codec_alg_priv ) ) ; if (! priv ) { return VPX_CODEC_MEM_ERROR ; } <S2SV_ModStart> enc ) { priv <S2SV_ModEnd> -> cfg = <S2SV_ModStart> enc = & priv <S2SV_ModEnd> -> cfg ;",0
374,<S2SV_ModStart> ++ ; } <S2SV_ModEnd> ret = s,0
375,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx ->,0
376,<S2SV_ModStart> ) ) { brelse ( iinfo -> i_sb ) ;,0
377,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0",1
378,<S2SV_ModStart> int bad_format_imginfo ( const,0
379,"<S2SV_ModStart> ; UtRegisterTest ( ""IPV6DefragReverseSimpleTest"", IPV6DefragReverseSimpleTest ) ; UtRegisterTest (",0
380,<S2SV_ModStart> = object_length ; new_object. data = NULL ;,0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,<S2SV_ModStart> p_frame ) ; p_frame = p_frame ;,0
384,"<S2SV_ModStart> mf, mf, mf",0
385,<S2SV_ModStart> 4 ) ; size_t <S2SV_ModEnd> num_properties = GETINT32,0
386,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
387,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
388,<S2SV_ModStart> i + j + 1,0
389,,0
390,,0
391,,0
392,"<S2SV_ModStart> ret = 0 ; memset ( xtregs, 0, sizeof ( xtregs ) )",0
393,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
394,<S2SV_ModStart> se_device * remote_dev <S2SV_ModEnd> = xop -> <S2SV_ModStart> = xop -> src_dev <S2SV_ModEnd> ; pr_debug (,0
395,"<S2SV_ModStart> if ( header && header == HDR ( new_bh ) <S2SV_ModStart> ext2_xattr_cache_insert ( new_bh, header",0
396,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
397,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
398,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
399,"<S2SV_ModStart>, 1 ) ; if ( imbuf == NULL ) return ( MagickFalse )",0
400,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
401,,0
402,<S2SV_ModStart> ; UWORD32 u4_x_dst_offset <S2SV_ModEnd> ; UWORD8 * <S2SV_ModStart> == B_PIC ) { <S2SV_ModStart> ps_dec ) ; },0
403,<S2SV_ModStart> VP9_LAST_FLAG ) { <S2SV_ModEnd> YV12_BUFFER_CONFIG * const,0
404,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t,0
405,,0
406,<S2SV_ModStart> ++ ) { <S2SV_ModEnd> dst [ 0 <S2SV_ModStart> 7 ] ; <S2SV_ModEnd> src += src_stride,0
407,,0
408,<S2SV_ModStart> ; } } <S2SV_ModEnd> return 0 ;,0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. index ++ <S2SV_ModEnd> ; psf -> <S2SV_ModStart> psf -> header. index ++ <S2SV_ModEnd> ; } <S2SV_null>,0
410,<S2SV_ModStart> num & ( 1U <S2SV_ModEnd> << ( number <S2SV_ModStart> num - ( 1U <S2SV_ModEnd> << number ),0
411,"<S2SV_ModStart> int w = vpx_img_plane_width <S2SV_ModEnd> ( img, <S2SV_ModStart> img, plane, 3 <S2SV_ModStart> { if ( vpx_img_plane_height <S2SV_ModEnd> ( img, <S2SV_ModStart>, file ) < 0 <S2SV_ModEnd> ) return 0",0
412,,0
413,,0
414,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",0
415,"<S2SV_ModStart> sock, sk ) ; memset ( sa, 0, sizeof ( * sa )",1
416,"<S2SV_ModStart> MT_CPTYPE_PASSSALT ) { memcpy <S2SV_ModEnd> ( pass_salt,",0
417,,0
418,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
419,<S2SV_ModStart> return ; } temp = temp ;,0
420,"<S2SV_ModStart>, & rlen, 0",1
421,<S2SV_ModStart> * slavename ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> } # endif read_userfile ( ) ;,0
422,"<S2SV_ModStart> ; if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart> { if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name,",0
423,<S2SV_ModStart> ( buf ) <S2SV_ModEnd> && str [,0
424,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
425,<S2SV_ModStart> credssp ) ; free ( instance ) ;,0
426,"<S2SV_ModStart> size_t s ; memset ( & s, 0, sizeof ( s ) ) ;",0
427,<S2SV_ModStart> bd_addr ) { ( void ) bd_addr ;,0
428,<S2SV_ModStart> ; int avail <S2SV_ModEnd> ; txid xmin <S2SV_ModStart> 4 ) ; avail = buf -> len - <S2SV_ModEnd> buf -> cursor <S2SV_ModStart> buf -> cursor <S2SV_ModEnd> ; expect =,0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. index ++ <S2SV_ModEnd> ; psf -> <S2SV_ModStart> psf -> header. index ++ <S2SV_ModEnd> ; } <S2SV_null>,0
430,<S2SV_ModStart> epoll_t * epoll <S2SV_ModEnd> ; oe_errno = <S2SV_ModStart> OE_EINVAL ) ; epoll = _epoll ( epoll_ ) ;,0
431,"<S2SV_ModStart> = parse_global_option ( CMD_INITIALIZE <S2SV_ModEnd>, NULL, <S2SV_ModStart> = parse_service_option ( CMD_INITIALIZE <S2SV_ModEnd>, section_ptr,",0
432,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_SHNUM_MAX : * ( size_t * ) val = ms -> elf_shnum_max ; return 0 ;,0
433,<S2SV_ModStart> offset ) { <S2SV_ModEnd> if ( offset,0
434,<S2SV_ModStart> 1 ) ; if (! trak ) goto exit ;,0
435,<S2SV_ModStart> 17 ] ; size_t <S2SV_ModEnd> plen ; md5_state_t <S2SV_ModStart> = 0 ; strncpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> = '\\0' ; strncpy <S2SV_ModEnd> ( md5data +,0
436,<S2SV_ModStart> ; if ( <S2SV_ModEnd> Prefix!= NULL,1
437,<S2SV_ModStart> += 1 ; <S2SV_ModEnd> break ; case,0
438,"<S2SV_ModStart> ( ) ; g_hash_table_remove_all ( headers ) ; g_hash_table_insert ( headers, g_strdup ( ""Cookie"" ), g_strdup ( ""CockpitAuth=v=2;k=blah"" ) ) ; if ( cockpit_auth_check_cookie ( test -> auth, ""/cockpit"", headers ) ) g_assert_not_reached ( ) ;",0
439,"<S2SV_ModStart> -> y_buffer ; memcpy <S2SV_ModEnd> ( dst, <S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst,",0
440,<S2SV_ModStart> void encode_rd_sb_row ( <S2SV_ModEnd> const TileInfo * <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> MI_BLOCK_SIZE ) { <S2SV_ModEnd> BLOCK_SIZE i ; <S2SV_ModStart> pred_mv ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
441,"<S2SV_ModStart>, obj_tlen ; u_int <S2SV_ModEnd> hexdump ; u_int",0
442,"<S2SV_ModStart> mbmi, const MV <S2SV_ModEnd>  mvs [ 2 <S2SV_ModStart> ) { const MV <S2SV_ModEnd> diff = {",0
443,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ),",0
444,"<S2SV_ModStart> ; if ( skb_expand_head <S2SV_ModEnd> ( skb_out,",0
445,<S2SV_ModStart> ; netsnmp_mibindex_load ( ) ; SNMP_FREE ( env_var,0
446,"<S2SV_ModStart> { fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ], O_RDWR ) <S2SV_ModStart> 1 ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_KEY ) ) <S2SV_ModStart> EV_REL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_REL ) ) <S2SV_ModStart> x ++ ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> ]. mapped_id )",0
447,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
448,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s,",0
449,"<S2SV_ModStart> iakerb_ctx_id_t * pctx, iakerb_ctx_id_t state <S2SV_ModStart> ctx -> k5c, state",0
450,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> bitmapDC = CreateCompatibleDC",1
451,<S2SV_ModStart> START_CODE_LEN ) ; ps_stream -> u4_start_code = u4_start_code ;,0
452,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { ret = <S2SV_ModEnd> - EINVAL ; <S2SV_ModStart> - EINVAL ; goto out ; }",1
453,,0
454,<S2SV_ModStart> ) ] ; size_t <S2SV_ModEnd> tmp ; if,0
455,"<S2SV_ModStart>, * wp ; if ( name [ 1 ] == '$' ) return _dl_platform <S2SV_ModStart> 'O' )? _dl_platform : _dl_platform <S2SV_ModEnd> ) ; if",0
456,<S2SV_ModStart> decContainer_t * ) H264SwDecAlloc <S2SV_ModEnd> ( sizeof (,0
457,<S2SV_ModStart> drop ; } <S2SV_ModEnd> opt -> optlen,0
458,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
459,<S2SV_ModStart> goto errout ; if ( info -> groupbook >= ci -> books ) goto errout ;,0
460,"<S2SV_ModStart> krb5_key_data * key_data ; memset ( key_data, 0, sizeof ( * key_data ) )",0
461,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
462,<S2SV_ModStart> -> zInput = sqlite3_calloc <S2SV_ModEnd> ( nByte +,0
463,<S2SV_ModStart> filp ) { struct sock * sock = <S2SV_ModEnd> SOCKET_I ( inode <S2SV_ModStart> ( inode ) ; struct sock * sock = SOCKET_I ( inode ) ; struct sock * sock = SOCKET_I ( inode ) ; sock_release ( sock ) ; sock_release ( sock,0
464,"<S2SV_ModStart> * orelse, string type_comment, <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. type_comment = type_comment",0
465,"<S2SV_ModStart> * info, my_off_t <S2SV_ModEnd> * name )",0
466,,0
467,"<S2SV_ModStart> UINT error ; if ( Stream_Read_UINT16 <S2SV_ModEnd> ( s, <S2SV_ModStart>, eventId )!= Stream_Read_UINT32 <S2SV_ModEnd> ( s,",0
468,"<S2SV_ModStart> -> socket, ""%s"", <S2SV_ModStart> -> socket, ""%s"",",1
469,"<S2SV_ModStart> struct flowi6 fl6 ; IP6_ECN_flow_xmit ( sk, fl6. flowlabel ) <S2SV_ModStart> daddr ) ; IP6_ECN_flow_xmit ( sk, fl6. flowlabel ) ; <S2SV_ModStart> = 1 ; <S2SV_ModEnd> return ip6_xmit (",0
470,<S2SV_ModStart> } END_OF_READING : if ( clone_info!= ( DestroyImageInfo * ) NULL ),0
471,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
472,,0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,"<S2SV_ModStart> ( psf = psf_calloc ( <S2SV_ModEnd>, sizeof (",0
475,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void fix_interp_filter (,0
476,"<S2SV_ModStart> cpi -> mb <S2SV_ModEnd> ; MACROBLOCKD * <S2SV_ModStart> mi_cols ) ; vpx_setup_src_planes <S2SV_ModEnd> ( x, <S2SV_ModStart> subsampling_y ) ; vpx_setup_block_planes <S2SV_ModEnd> ( xd -> <S2SV_ModStart> MAX_MB_PLANE ) ; vpx_memset <S2SV_ModEnd> ( xd ->",0
477,<S2SV_ModStart> hp ) ; if ( retval!= 0 ) { <S2SV_ModStart> ) ; } },0
478,,0
479,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> sizeof ( tETH_HDR ),1
480,<S2SV_ModStart> ; ps_dec -> u2_pic_order_cnt = 0 ; ps_dec ->,0
481,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> * karg ; <S2SV_ModEnd> int iocnum ; <S2SV_ModStart> ) ) ; kfree ( karg ) ; <S2SV_ModStart> PTR_ERR ( karg ) ; kfree ( karg",0
482,"<S2SV_ModStart> = 8 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
483,"<S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv",0
484,"<S2SV_ModStart> ; if ( datao >= buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( <S2SV_ModStart> ; if ( datao >= buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if (",0
485,"<S2SV_ModStart> charbuf ), ""%s"",",0
486,,0
487,<S2SV_ModStart> void ) { if (! mnemonic ) return ;,0
488,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ;",0
489,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
490,,0
491,,0
492,<S2SV_ModStart> sk ) ; if ( writable ) { <S2SV_ModStart> = 0 ; },0
493,<S2SV_ModStart> h ) { <S2SV_ModEnd> sprintf ( outpos,0
494,<S2SV_ModStart> minor_status = ( size_t <S2SV_ModEnd> ) KRB5_BAD_MSIZE ;,0
495,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { vpx_ref_frame_t <S2SV_ModEnd> * frame = <S2SV_ModStart> NULL ) { vpx_get_reference_enc <S2SV_ModEnd> ( ctx ->",0
496,<S2SV_ModStart> plug ) ; <S2SV_ModEnd> put_ioctx ( ctx,0
497,,0
498,,0
499,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|dao-truncated]"" <S2SV_ModEnd> ) ) ;",0
500,<S2SV_ModStart> ; } else if ( pool -> free_total < pool -> free_total ) <S2SV_ModStart> ) ; } else { free ( buf ) ; },0
501,,0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
503,"<S2SV_ModStart>, * pixg <S2SV_ModEnd> ; PIXCMAP * <S2SV_ModStart> = 15 ; pixc = pixFewColorsOctcubeQuant1 ( pixs, level ) ; if ( pixc <S2SV_ModEnd> == NULL )",0
504,<S2SV_ModStart>. vf = vpx_mse16x16 <S2SV_ModEnd> ; xd ->,1
505,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> overhead = 16 <S2SV_ModStart> + 1 ; size_t <S2SV_ModEnd> size = overhead,1
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> nego_process_negotiation_response ( rdpNego <S2SV_ModStart> NEGO_STATE_FAIL ; return 0 <S2SV_ModStart> = NEGO_STATE_FINAL ; return 0 ;,0
507,"<S2SV_ModStart> i, target_bits_per_mb <S2SV_ModEnd> ; target_bits_per_mb = <S2SV_ModStart> i, correction_factor <S2SV_ModEnd> ) ; if",0
508,<S2SV_ModStart> ; value |= TJA1101_CONFIG1_MII_MODE_RMII_25 <S2SV_ModEnd> ; tja1101WritePhyReg (,0
509,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
510,"<S2SV_ModStart> int dst_stride, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart> plane ] ; memset <S2SV_ModEnd> ( left_col, <S2SV_ModStart> + y ; memset <S2SV_ModEnd> ( left_col,",0
511,<S2SV_ModStart> ++ ; } else if ( pattern [ end ]!= 0 ) { end ++ ; },0
512,<S2SV_ModStart> ; ei -> <S2SV_ModEnd> i_sync_tid = 0,0
513,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
514,,0
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { q = osStrchr <S2SV_ModEnd> ( p +,1
516,<S2SV_ModStart> += 1 ; <S2SV_ModEnd> break ; case,0
517,<S2SV_ModStart> KEY_FRAME ) { memset <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd ->,0
518,"<S2SV_ModStart> error_t error ; <S2SV_ModEnd> uint32_t status ; <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModEnd> ) { enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModEnd> ) { enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL, ENC624J600_ERXTAIL_BUFFER_STOP <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL, ENC624J600_ERXTAIL_BUFFER_STOP <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL, ENC624J600_ERXTAIL_BUFFER_STOP <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_ER",0
519,,0
520,,0
521,<S2SV_ModStart> ; out += 3 <S2SV_ModEnd> ; } state <S2SV_ModStart> ; out += 3 <S2SV_ModEnd> ; } state,1
522,<S2SV_ModStart> err = - <S2SV_ModEnd> EALREADY ; if,0
523,<S2SV_ModStart> POLL_IN ) ; <S2SV_ModEnd> perf_event_wakeup ( handle <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
524,,0
525,"<S2SV_ModStart> { print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" <S2SV_ModEnd> ) ; if",0
526,"<S2SV_ModStart> ( interface, KSZ8851_RXFHSR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> status & ( RXFHSR_RXMR | RXFHSR_RXFTL | RXFHSR_RXRF | RXFHSR_RXCE <S2SV_ModEnd> ) ) == <S2SV_ModStart> ( interface, KSZ8851_RXFHBCR, RXFHBCR_RXBC_MASK <S2SV_ModEnd> ) ; ksz8851ReadFifo <S2SV_ModStart> ( interface, KSZ8851_RXQCR, RXQCR_SDA <S2SV_ModEnd> ) ; ancillary <S2SV_ModStart> ( interface, KSZ8851_RXQCR, RXQCR_SDA <S2SV_ModEnd> ) ; return",0
527,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ast_for_funcdef_impl ( struct,0
528,"<S2SV_ModStart> ( mm, 0xA0000 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; out : <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
529,,0
530,"<S2SV_ModStart> ""Unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> Bluetooth <S2SV_blank> HAL.\\n"" ) ; <S2SV_ModEnd> return - 1",0
531,<S2SV_ModStart> 0 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif <S2SV_ModStart> 1 ] ) >= <S2SV_ModEnd> 4098 && col,0
532,<S2SV_ModStart> len < needed || len < param -> data_start,0
533,,0
534,<S2SV_ModStart> ( bfqq ) bfq_idle_slice_timer_body <S2SV_ModEnd> ( bfqq ),0
535,<S2SV_ModStart> ; length += PRIMARY_DRAWING_ORDER_FIELD_BYTES <S2SV_ModEnd> [ orderInfo ->,0
536,,0
537,<S2SV_ModStart> plane < MAX_MB_PLANE - 1,0
538,"<S2SV_ModStart> * cpi, MACROBLOCK * x, <S2SV_ModStart> -> e_mbd ; <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { vpx_pick_inter_mode <S2SV_ModEnd> ( cpi, <S2SV_ModStart>, x, x <S2SV_ModEnd>, mi_row,",0
539,<S2SV_ModStart> * err = safeRead <S2SV_ModEnd> ( & reader,0
540,"<S2SV_ModStart> -> ranges = calloc ( 1, <S2SV_ModEnd> sizeof ( MappedRange",0
541,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flags & VP8_EFLAG_NO_UPD_GF <S2SV_ModStart> flags & VP8_EFLAG_FORCE_GF <S2SV_ModEnd> ) { ctx,0
542,,0
543,<S2SV_ModStart>! head ) <S2SV_ModEnd> return - EINVAL <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
544,"<S2SV_ModStart> * pptr, u_int <S2SV_ModEnd> len ) {",0
545,"<S2SV_ModStart> -> outputbuffer, ""<tr><td>Debug</td><td>%td>%s</td></tr>"" <S2SV_ModEnd>, ( Run",0
546,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
547,<S2SV_ModStart> ) ; } free ( constr ) ;,0
548,<S2SV_ModStart> ; iad_num ++ ; if ( iad_num < 0 ) break,0
549,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",0
550,<S2SV_ModStart> ; distortion = vpx_variance16x16 <S2SV_ModEnd> ( * (,1
551,"<S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd>, ECON2_ETHEN | <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_ERXST <S2SV_ModEnd>, ENC624J600_ERXST ) <S2SV_ModStart> ( interface, ENC624J600_ERXST <S2SV_ModEnd>, ENC624J600_ERXST )",0
552,<S2SV_ModStart> * start ; if (! psf -> header ) return ; <S2SV_ModStart> ) + maxlen ; if (! psf -> header ) return <S2SV_ModStart> = 0 ; if (! psf -> header ) return ;,0
553,<S2SV_ModStart> -> alg_priv ) { <S2SV_ModStart> alg_priv ) ; },0
554,,0
555,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
556,<S2SV_ModStart> ( inuse / LUAI_MAXSTACK <S2SV_ModEnd> ) + 2,0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,<S2SV_ModStart> n ) ; char buf [ 128 ] ; <S2SV_ModStart> errstr ) { <S2SV_ModEnd> buf [ 128,0
559,<S2SV_ModStart> input_ptr ; int is_keyframe_qaunt_set <S2SV_ModEnd> = 0 ; <S2SV_ModStart> } if ( is_keyframe_qaunt_set <S2SV_ModEnd> ) { SvcInternal <S2SV_ModStart> ; if ( is_keyframe_qaunt_set <S2SV_ModEnd> ) { SvcInternal,0
560,<S2SV_ModStart> ) ; } <S2SV_ModEnd> mb_index = 0,0
561,<S2SV_ModStart> self ) { size_t <S2SV_ModEnd> i ; PyObject,1
562,,1
563,"<S2SV_ModStart> ( dbh, mysql_error ( imp_dbh -> pmysql ),",0
564,<S2SV_ModStart> ) || ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) == 0 ) <S2SV_ModStart> slot_lock ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> slot -> id ),0
565,<S2SV_ModStart> struct ieee_802_11_phdr phdr = { 0 },0
566,<S2SV_ModStart> ; sh = s_calloc <S2SV_ModEnd> ( hdrlen +,0
567,,0
568,<S2SV_ModStart> > nr_parens ) { ret = - EINVAL ; goto out_free ; } <S2SV_ModEnd> * ( ++,1
569,,0
570,"<S2SV_ModStart> TX_MODE read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r )",1
571,"<S2SV_ModStart> : # line 100 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 100 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 100 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 100 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 100 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 100 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 100 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 100 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy",0
572,,0
573,<S2SV_ModStart> -> pSrc ; if ( pSrc == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; },0
574,<S2SV_ModStart> users ) ; cb_info -> serv = NULL ;,0
575,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
576,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat,0
577,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
578,"<S2SV_ModStart> do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> s, 0 )",1
579,<S2SV_ModStart> -> name ; if ( xml!= xmlDocGetRootElement ( xml -> doc ) ) { xmlUnlinkNode ( xml ) ; xmlFreeNode ( xml ) ; xmlFreeNode ( xml ) ; xmlFreeNode ( xml ) ; return ; } <S2SV_ModStart> } else { <S2SV_ModEnd> if ( xml,0
580,<S2SV_ModStart> <S2SV_null> static const SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> return ( const SvcInternal_t <S2SV_ModEnd> * ) svc_ctx,1
581,,0
582,<S2SV_ModStart> char buffer [ 80 <S2SV_ModEnd> ] ; int <S2SV_ModStart> = 12 ; _y4m -> vpx_fmt = VPX_IMG_FMT_I420 ; _y4m -> vpx_bps = 12 ;,0
583,"<S2SV_ModStart> * otmp = readobj <S2SV_ModEnd> ( buf,",0
584,"<S2SV_ModStart> directory_table_end, table_start ; int i <S2SV_ModStart> == 0 ) { i = 0 ; <S2SV_ModStart> return FALSE ; } <S2SV_ModStart> == FALSE ) { i = 0 ; <S2SV_ModStart> return FALSE ; } <S2SV_ModStart> == FALSE ) { i = 0 ; <S2SV_ModStart> return FALSE ; }",0
585,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> count = 0 ; env -> count ++ <S2SV_ModStart> ; } } <S2SV_ModEnd> return env ;,0
586,<S2SV_ModStart> -> seg ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
587,,0
588,"<S2SV_ModStart> S_IRUSR | S_IWUSR <S2SV_ModEnd>, S_IRUSR | <S2SV_ModStart> return ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 16 ) )",0
589,<S2SV_ModStart> ) ; } <S2SV_ModEnd> ++ x ->,0
590,,0
591,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lower, & tmp ) < 0 ) { return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_upper, & tmp ) < 0 ) { return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_step, & tmp ) < 0 ) { return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_dims, & tmp ) < 0 ) { return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_dims, & tmp ) < 0 ) { return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_dims, & tmp ) < 0 ) { return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_dims, & tmp ) < 0 ) { return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_dims, & tmp ) < 0 ) { return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>",0
592,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",0
593,<S2SV_ModStart> int err ; u32 cmask ; <S2SV_ModStart> goto err_delete ; cmask = be32_to_cpu ( knode -> sel -> classid ) ; <S2SV_ModStart>! match ) { err = - ENOMEM ; goto err_delete ; } <S2SV_ModEnd> list_add ( &,0
594,<S2SV_ModStart> ) ; } <S2SV_ModEnd> stream -> config <S2SV_ModStart> stats ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
595,"<S2SV_ModStart> if (! g_str_has_suffix <S2SV_ModEnd> ( tmpfile_name,",0
596,<S2SV_ModStart> data_end ) { vpx_reader <S2SV_ModEnd> r ; assert <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> aligned_cols ) ; memset <S2SV_ModEnd> ( cm ->,0
597,"<S2SV_ModStart> vp9_decoder_create ( const VP9EncoderConfig <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> const pbi = vpx_memalign <S2SV_ModEnd> ( 32, <S2SV_ModStart> ) ) ; vpx_init_dec <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ) ) ; vpx_init_dequantizer <S2SV_ModEnd> ( cm )",0
598,<S2SV_ModStart> ) ) ; if (! ( ( GF_DataInformationBox * ) s ) -> dref ) { <S2SV_ModStart> ) ; } },0
599,<S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> || opt -> opt.,1
600,"<S2SV_ModStart> void tree2tok ( vpx_token <S2SV_ModEnd> * tokens, <S2SV_ModStart> tokens, const vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> do { const vpx_tree_index <S2SV_ModEnd> j = tree",0
601,"<S2SV_ModStart> = VPX_CODEC_OK ; <S2SV_ModEnd> res = validate_img <S2SV_ModStart> ctx, img <S2SV_ModEnd> ) ; vpx_codec_pkt_list_init",0
602,"<S2SV_ModStart> { ret = safe_get_tag <S2SV_ModEnd> ( asn1,",0
603,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
604,"<S2SV_ModStart> rc, const VP9EncoderConfig <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> ) rc -> avg_frame_bandwidth <S2SV_ModEnd> * ( int64_t",1
605,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
606,,0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. index ++ <S2SV_ModEnd> ; psf -> <S2SV_ModStart> psf -> header. index ++ <S2SV_ModEnd> ; psf -> <S2SV_ModStart> psf -> header. index ++ <S2SV_ModEnd> ; } <S2SV_null>,0
608,,0
609,"<S2SV_ModStart> || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c )",0
610,"<S2SV_ModStart>, packet -> http_transfer_encoding. ptr = NULL, packet ->",0
611,"<S2SV_ModStart>, y, Min <S2SV_ModEnd> ( 4, <S2SV_ModStart> - y ) <S2SV_ModEnd>, exception )",0
612,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL ) <S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL )",1
613,<S2SV_ModStart> action ) { ( void ) w ; ( void ) h ;,0
614,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; send ( outputbuffer ) ;",0
615,"<S2SV_ModStart> ( AUTODETECT_TAG, ""received <S2SV_blank> bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" <S2SV_ModEnd> ) ; Stream_Read_UINT32",0
616,,0
617,<S2SV_ModStart> # if CONFIG_MULTITHREAD <S2SV_ModEnd> vp8_decoder_remove_threads ( pbi,1
618,,0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,"<S2SV_ModStart> s ) { int <S2SV_ModEnd> num_updates ; uint16 <S2SV_ModStart> int i ; memset ( data, 0, sizeof ( data ) ) ;",0
621,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
622,"<S2SV_ModStart> TX_SIZE tx_size, vpx_coeff_probs_model <S2SV_ModEnd> * coef_probs = <S2SV_ModStart> tx_size ] ; vpx_coeff_counts_model <S2SV_ModEnd> * coef_counts =",0
623,,0
624,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int su3000_frontend_attach ( <S2SV_ModStart> d ) { <S2SV_ModEnd> if ( dvb_usb_generic_rw <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( dvb_usb_generic_rw ( d -> dev, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( dvb_usb_generic_rw ( d -> dev, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( dvb_usb_generic_rw ( d -> dev, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( dvb_usb_generic_rw ( d -> dev, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( dvb_usb_generic_rw ( d -> dev, obuf, 3",0
625,"<S2SV_ModStart> * iface, vpx_codec_enc_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> ( flags & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & <S2SV_ModStart> ) ; } <S2SV_ModEnd> } return SAVE_STATUS",0
626,,0
627,"<S2SV_ModStart> = TRUE ; memset ( buf, 0, sizeof ( buf ) ) ;",0
628,"<S2SV_ModStart> * numbers, size_t <S2SV_ModEnd> count ) { <S2SV_ModStart> && i < ( size_t )",0
629,,0
630,,0
631,,0
632,<S2SV_ModStart>. err_detail = ( int ),0
633,<S2SV_ModStart> pocstruct_t * ps_cur_slice <S2SV_ModEnd> ; ih264d_free_dynamic_bufs (,0
634,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet ),0
635,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int getnum (,0
636,"<S2SV_ModStart>, g -> old <S2SV_ModEnd> ) ; markold <S2SV_ModStart>, g -> old <S2SV_ModEnd> ) ; g",0
637,<S2SV_ModStart> 0 ; else { kfree ( buf ) ; <S2SV_ModStart> - EIO ; },0
638,<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart> return NULL ; ( void ) opt ;,0
639,,0
640,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi,",0
641,<S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( & icp -> icmp6_data16 [ i ] ) ;,0
642,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command",0
643,"<S2SV_ModStart> MaxTextExtent ] ; <S2SV_ModEnd> MagickBooleanType status ; <S2SV_ModStart>, length, <S2SV_ModEnd> value, version",0
644,"<S2SV_ModStart> ; jas_eprintf ( ""%s"",",0
645,,0
646,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> - m + vpx_read_bit <S2SV_ModEnd> ( r )",1
647,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
648,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> ( REFERENCE_MODE ) vpx_read <S2SV_ModEnd> ( r,",0
649,"<S2SV_ModStart>! stream ) { <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; return NULL ; }",0
650,<S2SV_ModStart> nd_opt_len ) ; ND_TCHECK ( op -> nd_opt_len ) ;,0
651,<S2SV_ModStart> -> root_node = yr_free ( ( * re_ast ) -> root_node ) <S2SV_ModEnd> ; return ERROR_SUCCESS,0
652,"<S2SV_ModStart> ; ret = db_var_expand <S2SV_ModEnd> ( path, <S2SV_ModStart> if ( ret < <S2SV_ModEnd> 0 ) {",0
653,<S2SV_ModStart> -> level = 1 <S2SV_ModEnd> ; tok ->,0
654,<S2SV_ModStart> } if ( ( <S2SV_ModStart> av1 -> av1_config ) && ( av1 -> av1_config -> config!= GF_AV1_CONFIG ),0
655,<S2SV_ModStart> ( dpbSize ) <S2SV_ModEnd> ; dpb ->,0
656,"<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_in = 0 ; <S2SV_ModStart> ( addrlen ) { <S2SV_ModStart> * addrlen ; addrlen_in = * addrlen ; } <S2SV_ModStart>, addrlen_in, & addrlen_in <S2SV_ModEnd> )!= OE_OK <S2SV_ModStart> ) ; } <S2SV_ModEnd> return ret ;",0
657,,1
658,"<S2SV_ModStart> FALSE ; } if (! <S2SV_ModStart>, s ) ) return FALSE",1
659,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; struct ip6_flowlabel,0
660,"<S2SV_ModStart> falign, hdr_size = 0",0
661,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; usleep <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPDRH <S2SV_ModEnd> ) << 8 <S2SV_ModStart> | dm9000ReadReg ( DM9000_EPDRL <S2SV_ModEnd> ) ; }",1
662,"<S2SV_ModStart> -> command ), false <S2SV_ModStart> -> callback ), false",0
663,<S2SV_ModStart> = ubuf ; iov. iov_len = size ;,0
664,,0
665,<S2SV_ModStart> ; if ( h -> fd < 0 ||,0
666,,0
667,"<S2SV_ModStart> one, offset = 0",0
668,"<S2SV_ModStart>, comp -> type <S2SV_ModEnd> ) )!=",0
669,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
670,"<S2SV_ModStart> client = user_data <S2SV_ModEnd> ; if ( <S2SV_ModStart> num_clients ) ; <S2SV_ModEnd> crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client""",0
671,<S2SV_ModStart> * uv ; thread -> twups = thread ; <S2SV_ModStart> next ) { <S2SV_ModEnd> if (!,0
