,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
1,<S2SV_ModStart> ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ; if (,0
2,"<S2SV_ModStart>, 0 ) ; if ( writer -> stco ) gf_isom_box_del ( ( GF_Box * ) writer -> stco ) ; if ( writer -> stsc ) gf_isom_box_del ( ( GF_Box * ) writer -> stsc )",0
3,<S2SV_ModStart> c = array? array -> child : NULL <S2SV_ModEnd> ; while ( <S2SV_ModStart> while ( c ) { if ( <S2SV_ModEnd> item > 0 <S2SV_ModStart> > 0 ) return c ; <S2SV_ModEnd> c = c <S2SV_ModStart> -> next ; <S2SV_ModEnd> return c ;,0
4,"<S2SV_ModStart> u64 nr, <S2SV_ModEnd> struct pt_regs * <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",1
5,"<S2SV_ModStart> EXT4_EXTENTS_FLAG ) { struct grub_ext4_extent_header leaf ; int i ; leaf = grub_ext4_find_leaf ( data, ( struct grub_ext4_extent_header * ) inode -> blocks. dir_blocks, fileblock ) ; if (! leaf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) ( leaf + 1 ) ; for ( i = 0 ; i < grub_le_to_cpu16 ( leaf -> entries ) ; i ++ ) { if ( fileblock < grub_le_to_cpu32 ( ext [ i ]. block ) ) break ; } if ( fileblock >= grub_le_to_cpu32 ( ext [ i ]. len ) ) return 0 ; else { grub_disk_addr_t start ; start = grub_le_to_cpu16 ( ext [ i ]. start_hi ) ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext [ i ]. start )",0
6,"<S2SV_ModStart> fdct16 ( const tran_low_t <S2SV_ModEnd> * in [ <S2SV_ModStart> 16 ], tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> ] ) { tran_high_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step2 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step3 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t input [ 8 ] ; tran_high_t <S2SV_ModEnd> temp1, temp2 <S2SV_ModStart> ] ; { tran_low_t <S2SV_ModEnd> s0, s1 <S2SV_ModStart>, s7 ; tran_high_t <S2SV_ModEnd> t0, t1 <S2SV_ModStart>, t3 ; tran_high_t <S2SV_ModEnd> x0, x1",0
7,"<S2SV_ModStart> ( ) ; # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; # endif parse_ciff ( save + hlen, len - hlen, 0 ) ; } if ( parse_tiff ( save + 6 ) ) apply_tiff ( ) ; fseek ( ifp, save + len, SEEK_SET ) ; } return 1 <S2SV_ModEnd> ; } <S2SV_null>",0
8,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int search_filter_level ( VP9_COMMON * const cm, struct loopfilter * lf, int min_filter_level, int max_filter_level, int filt_direction ) { YV12_BUFFER_CONFIG * sd = & cpi -> sd ; <S2SV_ModEnd> VP9_COMMON * const <S2SV_ModStart> partial_frame ) { <S2SV_ModEnd> const int min_filter_level <S2SV_ModStart> ) ; int best_err ; int filt_best ; int filt_err <S2SV_ModEnd> ; int filt_mid <S2SV_ModStart> / 4 ; <S2SV_ModEnd> while ( filter_step <S2SV_ModStart> min_filter_level ) ; best_err = try_filter_frame ( sd, cpi, filt_mid, partial_frame ) ; filt_best = filt_mid ; ss_err [ filt_mid ] = best_err ; while ( filter_step > 0 ) { const int filt_high = MIN ( filt_mid + filter_step, max_filter_level ) ; const int filt_low = MAX ( filt_mid - filter_step, min_filter_level ) ; best_err = try_filter_frame ( sd, cpi, filt",0
9,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
10,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ++ i ) vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( usehp ) vpx_write <S2SV_ModEnd> ( w,",1
11,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } else { <S2SV_ModEnd> request -> rxBlockSzx <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; },0
12,"<S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ) ) ; <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> ( length > 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; print_string ( ndo, ( const u_char * ) ptr, length - 6 <S2SV_ModEnd> ) ; }",0
13,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> construct_get_dest_keyring ( struct <S2SV_ModStart>, dest_keyring ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & authkey -> flags ) ) return - ENOKEY <S2SV_ModStart> ( dest_keyring ) return 0 ; <S2SV_ModEnd> case KEY_REQKEY_DEFL_THREAD_KEYRING : <S2SV_ModStart> ) ; } return 0 ;",0
14,"<S2SV_ModStart> = create_spnego_ctx ( ) ; if ( sc == NULL ) return GSS_S_FAILURE ; ret = get_negotiable_mechs ( minor_status, spcred, GSS_C_INITIATE, & sc -> mech_set ) ; if ( ret!= GSS_S_COMPLETE ) goto cleanup ; sc -> internal_mech = & sc -> mech_set -> elements [ 0 ] ; if ( put_mech_set ( sc -> mech_set, & sc -> DER_mechTypes ) < 0 ) { ret = GSS_S_FAILURE ; goto cleanup ; } sc -> ctx_handle = GSS_C_NO_CONTEXT ; * ctx = ( gss_ctx_id_t ) sc ; sc = NULL ; * tokflag = INIT_TOKEN_SEND ; ret = GSS_S_CONTINUE_NEEDED ; cleanup : release_spnego_ctx ( & sc ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>",0
15,<S2SV_ModStart> ; tm = localtime_r <S2SV_ModEnd> ( & t,0
16,<S2SV_ModStart> length ) ; if ( strlen ( password )!= 0 ) { <S2SV_ModStart> ) ) ; },0
17,"<S2SV_ModStart> == p ) { * errnop = ERANGE ; return NSS_STATUS_TRYAGAIN ; } r = parse_uid ( e + 1, & uid ) ; if ( r < 0 ) <S2SV_ModStart> goto not_found ; machine = strndupa ( p, e - p ) ; if (! machine_name_is_valid ( machine ) ) goto not_found ; r = sd_bus_call_method ( bus, ""org.freedesktop.machine1"", ""/org/freedesktop/machine1"", ""org.freedesktop.machine1.Manager"", ""MapFromMachineUser"", & error, & reply, ""su"", machine, ( uint32_t ) uid ) ; if ( r < 0 ) { if ( sd_bus_error_has_name ( & error, BUS_ERROR_NO_SUCH_USER_MAPPING ) ) goto not_found ; goto fail ; } r = sd_bus_message_read ( reply, ""u"", & mapped ) ; if ( r < 0 ) { if ( sd_bus_error_has_name ( & error, BUS_ERROR_",0
18,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",1
19,<S2SV_ModStart> = 0 ; if (! <S2SV_ModStart> & timeout ) ) return false,0
20,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> detect_transition_to_still ( struct <S2SV_ModStart> last_decay_rate ) { bool trans_to_still = false <S2SV_ModEnd> ; if ( <S2SV_ModStart> j ; const TWO_PASS <S2SV_ModEnd> * position = <S2SV_ModStart> * position = TWO_PASS <S2SV_ModEnd> -> stats_in ; <S2SV_ModStart> == input_stats ( TWO_PASS <S2SV_ModEnd>, & tmp_next_frame <S2SV_ModStart> } reset_fpf_position ( TWO_PASS <S2SV_ModEnd>, position ) <S2SV_ModStart> j == still_interval &&! trans_to_still ) { trans_to_still = true <S2SV_ModEnd> ; } return <S2SV_ModStart> ; } return true <S2SV_ModEnd> ; } <S2SV_null>",0
21,<S2SV_ModStart> inode ) ) { spin_lock ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModStart> size ) ; spin_unlock ( & EXT4_I ( inode ) -> i_mmap_sem ) ; },0
22,"<S2SV_ModStart> alg ) { <S2SV_ModEnd> if (! <S2SV_ModStart> CRYPTO_ALG_NEED_FALLBACK ) ) { request_module ( ""%s"", name ) ; <S2SV_ModStart> name ) ; }",0
23,"<S2SV_ModStart> = GIT_PKT_NG ; if ( len < 3 ) goto out_err ; <S2SV_ModStart> += 3 ; <S2SV_ModEnd> ptr = strchr <S2SV_ModStart>,'<S2SV_blank>') ; if (! ptr ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> ref = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> ref ) ; memcpy ( pkt -> ref, line, len ) ; pkt -> ref [ len ] = '\\0' ; line = ptr + 3 <S2SV_ModEnd> ; ptr = <S2SV_ModStart> + 1 ; <S2SV_ModEnd> ptr = strchr <S2SV_ModStart>, '\\n' ) ; if (! ptr ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> msg = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> msg ) ; memcpy ( pkt -> msg, line, len ) ; pkt -> msg [ len ] = '\\0' <S2SV_ModEnd> ; * out",0
24,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> BYTE flags ; UINT32 <S2SV_ModEnd> length ; Stream_Read_UINT32,0
25,<S2SV_ModStart> ; if ( avio_feof ( pb ) <S2SV_ModEnd> ) return AVERROR_PATCHWELCOME <S2SV_ModStart> ; if ( avio_feof ( pb ) <S2SV_ModEnd> ) return AVERROR_PATCHWELCOME <S2SV_ModStart> ; if ( avio_feof <S2SV_ModEnd> ( pb ) <S2SV_ModStart> ; if ( avio_feof <S2SV_ModEnd> ( pb ) <S2SV_ModStart> ; if ( avio_feof <S2SV_ModEnd> ( pb ) <S2SV_ModStart> ; if ( avio_feof <S2SV_ModEnd> ( pb ) <S2SV_ModStart> ; if ( avio_feof <S2SV_ModEnd> ( pb ) <S2SV_ModStart> ; if ( avio_feof <S2SV_ModEnd> ( pb ) <S2SV_ModStart> ; if ( avio_feof <S2SV_ModEnd> ( pb ) <S2SV_ModStart> ; if ( avio_feof <S2SV_ModEnd> ( pb ) <S2SV_ModStart> ; if ( avio_feof <S2SV_ModEnd> ( pb ) <S2SV_ModStart> ; if ( avio_feof <S2SV_ModEnd> ( pb ) <S2SV_ModStart> ; if ( avio_feof <S2SV_ModEnd> ( pb ) <S2SV_ModStart> ; if ( avio_feof <S2SV_ModEnd> ( pb ) <S2SV_ModStart> ; if ( avio_feof <S2SV_ModEnd> ( pb ) <S2SV_ModStart> ; if ( avio_feof <S2SV_ModEnd> ( pb ) <S2SV_ModStart> ; if ( avio_,0
26,"<S2SV_ModStart> 1 ; } ret = <S2SV_ModEnd> mount_entry_on_generic ( mntent <S2SV_ModStart> path ) ; if ( ret < 0 ) { ERROR ( ""mount_entry_on_relative_rootfs <S2SV_blank> failed"" ) ; return - 1 ; } return ret ;",0
27,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } io -> io_cleanup = mem_cleanup ;,1
28,<S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> (,0
29,"<S2SV_ModStart> ) ) ; ret &= btif_config_set_bdaddr ( bdstr, ""RemoteBdAddr"", remote_bd_addr, sizeof ( bdstr ) ) ;",0
30,<S2SV_ModStart> vpx_codec_enc_cfg_map_t * map ; if ( ( iface -> caps & VPX_CODEC_CAP_ENCODER ) == 0 ) return VPX_CODEC_INCAPABLE <S2SV_ModStart> = VPX_CODEC_INVALID_PARAM ; if ( <S2SV_ModEnd> iface -> enc <S2SV_ModStart> enc. cfg_maps ) { for ( map = iface -> enc. cfg_maps ; map -> usage >= 0 ; map ++ ) { if ( map -> usage == ( int ) usage ) { * cfg = map -> cfg ; cfg -> g_usage = usage ; res = VPX_CODEC_OK ; break ; } } } else { for ( map = iface -> enc. cfg_maps ; map -> usage >= 0 ; map ++ ) { if ( map -> usage == ( int ) usage ) { * cfg = map -> cfg ; cfg -> g_usage = usage ; res = VPX_CODEC_OK ; break ; } } } } return <S2SV_ModEnd> VPX_CODEC_OK ; } <S2SV_ModStart> VPX_CODEC_OK ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
31,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
32,"<S2SV_ModStart> void show_progress ( <S2SV_ModEnd> uint64_t dx_time ) <S2SV_ModStart> dx_time ) { printf ( <S2SV_ModEnd> ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"" <S2SV_ModStart> dx_time ) ; if ( dx_time > 0 ) { fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out, dx_time, ( double ) frame_out * 1000000.0 / ( double ) dx_time ) ; } else { fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out, dx_time, ( double ) frame_out * 1000000.0 / ( double ) dx_time ) ; }",0
33,"<S2SV_ModStart> ) ) { PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> %s\\n"", fields [ i ]. name ) ; <S2SV_ModStart> ) ) { PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> %s\\n"", fields [ i ]. name ) ; <S2SV_ModStart> ) ) { PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> %s\\n"", fields [ i ]. name ) ; <S2SV_ModStart> ) ) { PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> %s\\n"", fields [ i ]. name ) ; <S2SV_ModStart> ) ) { PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> %s\\n"", fields [ i ]. name ) ;",0
34,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_ETXSTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRTS <S2SV_ModEnd> ) ; return",0
35,"<S2SV_ModStart> value ) ; if ( o -> type_comment ) { value = ast2obj_string ( o -> type_comment ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_type_comment, value ) == - 1 ) goto failed ; Py_DECREF ( value ) ; }",0
36,"<S2SV_ModStart> ; if ( access ( page, R_OK ) == 0 ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } } else if (! strcmp ( func, ""page/set"" ) ) { char * wikitext = NULL, * page = NULL ; if ( ( ( wikitext = http_request_param_get ( req, ""text"" ) )!= NULL ) && ( ( page = http_request_param_get ( req, ""page"" ) )!= NULL ) ) { char * page = http_request_param_get ( req, ""page"" ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( access ( page, R_OK ) == 0 ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } } else { file_write ( page, wikitext ) ; http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ;",0
37,"<S2SV_ModStart> low_var_thresh, int mb_rows, int mb_cols, <S2SV_ModEnd> double level = <S2SV_ModStart>.5 ) ; unsigned char * limits = cm -> pp_limits_buffer ; ; int mbr, mbc ; ( void ) post ; ( void ) low_var_thresh ; ( void ) flag ; vpx_memset ( limits, ( unsigned char ) ppl, 16 * mb_rows ) ; for ( mbr = 0 ; mbr < mb_rows ; mbr ++ ) { vp8_post_proc_down_and_across_mb_row ( source -> y_buffer + 16 * mbr * source -> y_stride, source -> y_buffer + 16 * mbr * source -> y_stride, source -> y_stride, source -> y_width, limits, 16 ) ; vp8_post_proc_down_and_across_mb_row ( source -> u_buffer + 8 * mbr * source -> uv_stride, source -> u_buffer + 8 * mbr * source -> uv_stride, source -> uv_stride, source -> uv_width, limits, 8 ) ; vp8_post_proc_down_",0
38,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> ) ; struct mb2_cache_entry <S2SV_ModEnd> * ce ; <S2SV_ModStart> int error ; error = mb2_cache_entry_alloc ( ext4_mb_cache, GFP_NOFS, & ce ) ; if ( error ) return ; <S2SV_ModEnd> error = mb_cache_entry_insert <S2SV_ModStart> error ) { mb2_cache_entry_free ( ext4_mb_cache, <S2SV_ModEnd> ce ) ; <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> } } else <S2SV_ModStart> hash ) ; mb2_cache_entry_release <S2SV_ModEnd> ( ce )",0
39,"<S2SV_ModStart> ) ) ; if (! <S2SV_ModEnd> r_socket_http_answer ( s <S2SV_ModStart>, rlen ) ) { free ( uri ) ; return NULL ; } return NULL",0
40,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct ip_options_rcu <S2SV_ModEnd> * ip_options_get_from_user ( <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> return ip_options_get_finish (,0
41,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|truncated]"" <S2SV_ModEnd> ) ) ;",0
42,<S2SV_ModStart> else if ( ( options [ opt_idx ]. flags & P_TOUCH ) && <S2SV_ModStart> else if ( ( options [ opt_idx ]. flags & P_TOUCH ) && <S2SV_ModStart> else if ( ( options [ opt_idx ]. flags & P_TOUCH ) && <S2SV_ModStart> else if ( ( options [ opt_idx ]. flags & P_TOUCH ) && <S2SV_ModStart> else if ( ( options [ opt_idx ]. flags & P_TOUCH ) && <S2SV_ModStart> else if ( ( options [ opt_idx ]. flags & P_TOUCH ) && <S2SV_ModStart> else if ( ( options [ opt_idx ]. flags & P_TOUCH ) && <S2SV_ModStart> else if ( ( options [ opt_idx ]. flags & P_TOUCH ) && <S2SV_ModStart> else if ( ( options [ opt_idx ]. flags & P_TOUCH ) && <S2SV_ModStart> else if ( ( options [ opt_idx ]. flags & P_TOUCH ) && <S2SV_ModStart> else if ( ( options [ opt_idx ]. flags & P_TOUCH ) && <S2SV_ModStart> else if ( ( options [ opt_idx ]. flags & P_TOUCH ) && <S2SV_ModStart> else,0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode, & new_mode, & acl ) ; if ( ret ) goto out <S2SV_ModEnd> ; } break",1
44,"<S2SV_ModStart> size_t size ; if ( width < 0 || height < 0 || hstep <= 0 || vstep <= 0 ) { goto error ; } if (! ( cmpt = jas_malloc ( sizeof ( jas_image_cmpt_t ) ) ) ) { goto error ; } cmpt -> type_ = JAS_IMAGE_CT_UNKNOWN ; cmpt -> tlx_ = tlx ; cmpt -> tly_ = tly ; cmpt -> hstep_ = hstep ; cmpt -> vstep_ = vstep ; cmpt -> prec_ = depth ; cmpt -> sgnd_ = sgnd ; cmpt -> stream_ = 0 ; cmpt -> cps_ = ( depth + 7 ) / 8 ; if (! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ) { goto error ; } cmpt -> stream_ = ( inmem )? jas_stream_memopen2 ( 0, size ) : jas_stream_tmpfile ( ) <S2SV_ModEnd> ;",0
45,<S2SV_ModStart> ) || dp >= <S2SV_ModEnd> datalen ) { <S2SV_ModStart> ) || tdp >= <S2SV_ModEnd> datalen ) { <S2SV_ModStart> ) || tdp >= <S2SV_ModEnd> datalen ) { <S2SV_ModStart> ) || tdp >= <S2SV_ModEnd> datalen ) { <S2SV_ModStart> ) || tdp >= <S2SV_ModEnd> datalen ) { <S2SV_ModStart> ) || tdp >= <S2SV_ModEnd> datalen ) { <S2SV_ModStart> ) || tdp >= <S2SV_ModEnd> datalen ) { <S2SV_ModStart> ) || tdp >= <S2SV_ModEnd> datalen ) { <S2SV_ModStart> ) || tdp >= <S2SV_ModEnd> datalen ) { <S2SV_ModStart> ) || tdp >= <S2SV_ModEnd> datalen ) { <S2SV_ModStart> ) || tdp >= <S2SV_ModEnd> datalen ) { <S2SV_ModStart> ) || tdp >= <S2SV_ModEnd> datalen ) { <S2SV_ModStart> ) || tdp >= <S2SV_ModEnd> datalen ) { <S2SV_ModStart> ) || tdp >= <S2SV_ModEnd> datalen ) { <S2SV_ModStart> ) || tdp >= <S2SV_ModEnd> datalen ) { <S2SV_ModStart> ) || tdp >= <S2SV_ModEnd> datalen ) { <S2SV_ModStart> ) || tdp >= <S2SV_ModEnd> datalen ) { <S2SV_ModStart> ) || tdp >= <S2SV_ModEnd> datalen ) { <S2SV_ModStart> ) || tdp >= <S2SV_ModEnd> datalen ) { <S2SV_ModStart> ) || tdp >= <S2SV_ModEnd> datalen ) { <S2SV_ModStart> ) || tdp >= <S2SV_ModEnd> datalen ) {,0
46,"<S2SV_ModStart> * req, u32 <S2SV_ModEnd> acl_len ) { <S2SV_ModStart> acl_len ) { <S2SV_ModEnd> uint32_t attrlen, <S2SV_ModStart> int status ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> xdr, OP_GETATTR <S2SV_ModEnd> ) )!= <S2SV_ModStart>, & attrlen <S2SV_ModEnd> ) )!= <S2SV_ModStart> { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"" <S2SV_ModEnd>, attrlen, <S2SV_ModStart> attrlen ) ; <S2SV_ModEnd> } else status",0
47,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
48,"<S2SV_ModStart> ) ) { if ( snumber ( auth ) ) { <S2SV_ModStart> ; } } } if ( snumber ( tok ) ) { group = stok ( tok, "":"", & perms ) ; if ( group && * group ) { if ( snumber ( group ) ) { gid = ( int ) stoi ( group ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { gid = HTTP -> gid ; } else { gid = groupToID ( group ) ; } } } else { mode = 0 ; } } else { dirs = auth ; auth = 0 ; } tok = dirs ; for ( tok = sclone ( dirs ) ; ( dir = stok ( tok, "","", & tok ) )!= 0 ; ) { path = httpMakePath ( state -> route, state -> configDir, dir ) ; if ( mprGetPathInfo ( path, & info ) == 0 && info. isDir ) { continue ; } if ( mprMakeDir ( path, mode, uid, gid, 1 ) < 0 ) { return MPR_ERR_BAD_SYNTAX ; } }",0
49,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> addr = VPX_MALLOC_L <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; <S2SV_ModEnd> if ( addr,0
50,"<S2SV_ModStart> int res ; <S2SV_ModEnd> long long export_index_table <S2SV_ModStart> long export_index_table [ SQUASHFS_LOOKUP_BLOCKS ( sBlk. s. inodes ) <S2SV_ModEnd> ] ; res <S2SV_ModStart> read_fs_bytes ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } SQUASHFS_INSWAP_LOOKUP_BLOCKS ( export_index_table, indexes ) ; * table_start = export_index_table [ 0 ] ; res = read_fs_bytes ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return",0
51,<S2SV_ModStart> ; } else { <S2SV_ModStart> p1 ) ; },0
52,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> # if CONFIG_VP8_ENCODER <S2SV_ModStart> # endif } for ( argi = argj = argv ; ( * argj = * argi ) ; argi += arg. argv_step ) { arg. argv_step = 1 ; if ( eos_mark_found ) { argj ++ ; continue ; } else if (! strcmp ( * argj, ""--"" ) ) { eos_mark_found = 1 ; continue ; } else if (! strcmp ( * argj, ""--"" ) ) { eos_mark_found = 1 ; continue ; } else if ( 0 ) { } else if ( arg_match ( & arg, & outputfile, argi ) ) { config -> out_fn = arg. val ; } else if ( arg_match ( & arg, fpf_name, argi ) ) { config -> stats_fn = arg. val ; } else if ( arg_match ( & arg, & use_ivf, argi ) ) { config -> write_webm = 0 ; } else if ( arg_match ( & arg, & threads, argi ) ) { config -> cfg. g_threads = arg_parse",0
53,"<S2SV_ModStart> 1 ; } SSL_SESSION * sess = SSL_get1_session ( c -> ssl ) ; if ( sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } } return 1 ; } if ( c -> opt -> option. client || c -> opt -> protocol ) { SSL_SESSION * sess = SSL_get1_session ( c -> ssl ) ; if ( sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } } return 1 ; } if ( c -> opt -> option. client || c -> opt -> protocol ) { SSL_SESSION * sess = SSL_get1_session ( c -> ssl ) ; if ( sess ) { int ok = SSL_",0
54,"<S2SV_ModStart> ; if ( crypto_memneq <S2SV_ModEnd> ( cmac,",0
55,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> const uint64_t bits_used <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> -= bits_used ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
56,"<S2SV_ModStart> EOFOp 0x07 char * magick_buffer <S2SV_ModEnd> ; Image * <S2SV_ModStart> char * ) magick_buffer <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart>. x = ReadBlobSIZ ( image ) ; image -> page. y = ReadBlobSIZ ( image ) ; image -> columns = ReadBlobSIZ ( image ) ; image -> rows = ReadBlobSIZ ( image ) ; flags = ( MagickStatusType ) ReadBlobByte ( image ) ; image -> alpha_trait = flags & 0x01 <S2SV_ModEnd> ; image -> <S2SV_ModStart>. x = ReadBlobSIZ <S2SV_ModEnd> ( image ) <S2SV_ModStart>. y = ReadBlobSIZ <S2SV_ModEnd> ( image ) <S2SV_ModStart>. columns = ReadBlobSIZ <S2SV_ModEnd> ( image ) <S2SV_ModStart>. rows = ReadBlobSIZ <S2SV_ModEnd> ( image ) <S2SV_ModStart>. pixels = ReadBlobSIZ <S2SV_ModEnd> ( image ) <S2SV_ModStart>. pixels = ReadBlobSIZ <S2SV_ModEnd> ( image ) <S2SV_ModStart>. pixels = ReadBlobSIZ <S2SV_ModEnd> ( image ) <S2SV_ModStart>. pixels = ReadBlobSIZ <S2SV_ModEnd> ( image ) <S2SV_ModStart>. pixels = ReadBlobSIZ <S2SV_ModEnd> ( image ) <S2SV_ModStart>. pixels = ReadBlobSIZ <S2SV_ModEnd> ( image ) <S2SV_ModStart>. pixels = ReadBlob",0
57,"<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> altsetting [ 0 ]. desc. bNumEndpoints < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; error = - EINVAL ; goto err_free_urb ; }",1
58,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
59,"<S2SV_ModStart> dir = ""/etc"" ; if ( access ( dir, F_OK ) == - 1 ) { ulckpwdf ( ) ; err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> create <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( access ( dir, F_OK ) == - 1 ) { ulckpwdf ( ) ; err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> create <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( access ( dir, F_OK ) == - 1 ) { ulckpwdf ( ) ; err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> create <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( access ( dir, F_OK ) == - 1 ) { ulckpwdf ( ) ; err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> create <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( ( fd = xfmkstemp ( & tmpname, dir ) ) == - 1 ) { ulckpwdf ( ) ; err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( access ( dir, F_OK ) == - 1 ) {",0
60,<S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_pps_done ) { ps_codec -> i4_pps_done = 1 ; return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_pps_done ) { ps_codec -> i4_pps_done = 1 ; return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_pps_done ) { ps_codec -> i4_pps_done = 1 ; return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_pps_done ) { ps_codec -> i4_pps_done = 1 ; return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_pps_done ) { ps_codec -> i4_pps_done = 1 ; return IHEVCD_INVALID_HEADER ; },0
61,"<S2SV_ModStart> n ] ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> n ] ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> n ] ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> n ] ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> n ] ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> n ] ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> n ] ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO",0
62,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> vp9_setup_dst_planes ( MACROBLOCKD <S2SV_ModStart> mi_col ) { int i ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y ) ; } for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y ) ; } for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { <S2SV_ModStart> i ) { <S2SV_ModEnd> setup_pred_plane ( &",0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,<S2SV_ModStart> ) get_block = ocfs2_do_get_block <S2SV_ModEnd> ; else get_block <S2SV_ModStart> else get_block = ocfs2_do_dio_get_block <S2SV_ModEnd> ; return __blockdev_direct_IO,0
65,"<S2SV_ModStart>, ""%79s <S2SV_blank> %[^\\n]\\n"", def, strparm ) == 2 ) { if ( strparm [ 0 ] == \'""\' ) { isstring = true ; len = strlen ( strparm ) ; newstring = ( char * ) malloc ( len ) ; strparm [ len - 1 ] = 0 ; strcpy ( newstring, strparm + 1 ) ; } else if ( strparm [ 0 ] == '0' && strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else sscanf ( strparm, ""%i"", & parm ) ; for ( i = 0 ; i < numdefaults ; i ++ ) if (! strcmp ( def, defaults [ i ]. name ) ) { if (! isstring ) * defaults [ i ]. location = parm ; else * defaults [ i ]. location = ( int ) newstring ; break ; } } } fclose ( f ) ; } for ( i = 0 ; i < numdefaults ; i ++ ) if (! strcmp ( def, defaults [ i ]. name ) ) {",0
66,"<S2SV_ModStart> n ) { <S2SV_ModEnd> char * str <S2SV_ModStart> * str ; <S2SV_ModEnd> Py_ssize_t len ; <S2SV_ModStart> Py_ssize_t i ; int all_whitespace = 1 ; int kind ; void * data ; PyCompilerFlags cf ; mod_ty mod ; <S2SV_ModStart> expr_start, NULL ) ; if ( o == NULL ) return NULL ; len = expr_end - expr_start ; str = PyMem_RawMalloc ( len + 3 <S2SV_ModStart> == NULL ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ; } <S2SV_ModEnd> str [ 0 <S2SV_ModStart> = PyCF_ONLY_AST ; mod = string_object_to_c_ast ( str, PyUnicode_FromString ( ""<fstring>"" ), Py_eval_input, & cf, c -> c_feature_version, c -> c_arena ) ; Py_DECREF ( fstring_name ) ; PyMem_RawFree ( str ) ; if (! mod ) return NULL ; return mod -> v. Expression. body <S2SV_ModEnd> ; } <S2SV_null>",0
67,"<S2SV_ModStart> { cJSON * child <S2SV_ModEnd> = object -> <S2SV_ModStart> ; while ( child <S2SV_ModEnd> && cJSON_strcasecmp ( <S2SV_ModStart> && cJSON_strcasecmp ( child <S2SV_ModEnd> -> string, <S2SV_ModStart> ) c = child <S2SV_ModEnd> -> next ;",0
68,<S2SV_ModStart> size ) ; if ( px -> ft == NULL ) return FALSE ;,0
69,"<S2SV_ModStart> u_char * dat, u_int len <S2SV_ModStart>, val_l ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_",0
70,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
71,"<S2SV_ModStart> int i ; const <S2SV_ModStart> alpha_buffer } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ], buffers [ i ], strides [ i ], mi_row, mi_col, sf, pd -> subsampling_x, pd -> subsampling_y ) ; } for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ], buffers [ i ], strides [ i ], mi_row, mi_col, sf, pd -> subsampling_x, pd -> subsampling_y ) ; } } for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ], buffers [ i ], strides [ i ], mi_row, mi_col",0
72,"<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ; for ( iov = msg -> msg_iov, iovlen = msg -> msg_iovlen ; iovlen > 0 ; iov ++ ) { unsigned long seglen = iov -> iov_len ; char __user * from = iov -> iov_base ; struct skcipher_sg_list * tsgl = list_first_entry ( & ctx -> tsgl, struct skcipher_sg_list, list ) ; sg = sgl -> sg ; while (! sg -> length ) sg ++ ; used = min_t ( unsigned long, used, seglen ) ; if (! ctx -> more || used < ctx -> used ) used -= used % bs ; err = - EINVAL ; if (! ctx -> enc ) goto free ; ablkcipher_request_set_crypt ( & ctx -> req, sg, ctx -> rsgl. sg, used, ctx -> iv ) ; err = af_alg_wait_for_completion ( ctx -> enc? crypto_ablkcipher_encrypt ( & ctx -> req ) : crypto_ablkcipher_decrypt ( & ctx ->",0
73,"<S2SV_ModStart> ) ) ; CHECK_MEM_ERROR ( cpi -> mb_activity_map, vpx_calloc ( <S2SV_ModEnd> cpi -> common <S2SV_ModStart> cpi -> common. MBs, sizeof ( unsigned int ) ) ) ; vpx_memcpy ( sortlist, cpi -> mb_activity_map, sizeof ( unsigned int ) * cpi -> common. MBs ) ; for ( i = 1 ; i < cpi -> common. MBs ; i ++ ) { for ( j = i ; j > 0 ; j -- ) { if ( sortlist [ j ] < sortlist [ j - 1 ] ) { tmp = sortlist [ j ] ; sortlist [ j - 1 ] = sortlist [ j ] ; sortlist [ j ] = tmp ; } else break ; } } median = ( 1 + sortlist [ cpi -> common. MBs >> 1 ] + sortlist [ ( cpi -> common. MBs >> 1 ) + 1 ] ) >> 1 ; cpi -> activity_avg = median ; vpx_free ( sortlist ) ; } # else cpi -> activity_avg = ( unsigned int ) ( activity_sum / cpi -> common. MBs ) ;",0
74,<S2SV_ModStart> user ) { cleanup_srcu_struct ( & user -> release_barrier ) ; <S2SV_ModStart> _ipmi_destroy_user ( user <S2SV_ModEnd> ) ; kref_put,0
75,"<S2SV_ModStart> ; int sl ; int limit = 0 ; mongo_message * mm ; if ( cursor -> limit > 0 ) limit = cursor -> limit - cursor -> seen ; mm = mongo_message_create ( 16 + 4 + sl + 4 + 8, 0, 0, MONGO_OP_GET_MORE ) ; data = & mm -> data ; data = mongo_data_append32 ( data, & ZERO ) ; data = mongo_data_append ( data, cursor -> ns, sl ) ; data = mongo_data_append32 ( data, & limit ) ; mongo_data_append64 ( data, & cursor -> reply -> fields. cursorID ) ; bson_free ( cursor -> reply ) ; res = mongo_message_send ( cursor -> conn, mm ) ; if ( res!= MONGO_OK ) { mongo_cursor_destroy ( cursor ) ; return MONGO_ERROR ; } res = mongo_read_response ( cursor -> conn, & ( cursor -> reply ) ) ; if ( res!= MONGO_OK ) { mongo_cursor_destroy ( cursor ) ; return MONGO_ERROR ; } cursor -> current. data = NULL ; cursor -> seen += cursor",0
76,"<S2SV_ModStart> * for_ch ; if ( c -> c_feature_version < 6 ) { ast_error ( c, n, ""Async <S2SV_blank> comprehension <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } for_ch = CHILD ( n, 1 + is_async ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; expression = ast_for_expr ( c, CHILD ( n, 3 + is_async ) ) ; if (! expression ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if ( NCH ( for_ch ) == 1 ) comp = comprehension ( Tuple ( t, Store, first -> lineno, first -> col_offset, c -> c_arena ), expression, NULL, is_async, c -> c_arena ) ; else comp = comprehension ( Tuple ( t, Store, first -> lineno, first -> col_offset, c -> c_arena ), expression, NULL, is_async, c -> c",0
77,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> dst_state -> curframe <S2SV_ModStart> src -> curframe ++ ; } for ( i = 0 ; i <= src -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) return - ENOMEM ; dst_state -> frame [ i ] = dst ; } err = copy_func_state ( dst, src -> frame [ i ] ) ; if ( err ) return err ; } dst_state -> curframe = src -> curframe",0
78,"<S2SV_ModStart> * cpi, <S2SV_ModEnd> vp9_writer * w <S2SV_ModStart> w ) { const VP9_COMMON * const cm = & cpi -> common ; const MACROBLOCKD * const xd = & cpi -> mb. e_mbd ; const struct segmentation * const seg = & cm -> seg ; const MODE_INFO * const mi = mi_8x8 [ 0 ] ; const MODE_INFO * const above_mi = mi_8x8 [ - xd -> mi_stride ] ; const MODE_INFO * const left_mi = xd -> left_available? mi_8x8 [ - 1 ] : NULL ; const MB_MODE_INFO * const mbmi = & mi -> mbmi ; const BLOCK_SIZE bsize = mbmi -> sb_type ; if ( seg -> update_map ) write_segment_id ( w, seg, mbmi -> segment_id ) ; write_skip ( cpi, mbmi -> segment_id, mi, w ) ; if ( bsize >= BLOCK_8X8 && cm -> tx_mode == TX_MODE_SELECT ) write_selected_tx_size ( cpi, mbmi -> tx_size, bsize,",0
79,"<S2SV_ModStart> maxn ) { <S2SV_ModEnd> # ifdef DEBUG <S2SV_ModStart> ; # endif if ( n > maxn ) SWF_error ( ""Action <S2SV_blank> overflow!!"" ) ;",0
80,"<S2SV_ModStart> ) ) ; n = EXTRACT_32BITS ( & prep -> pp_n ) ; ps = ( const struct pgstate * ) ( prep + 1 ) ; while ( -- n >= 0 && ND_TTEST ( * ps ) ) { const struct id_off * io, * ie ; char c = '<' ; ND_PRINT ( ( ndo, "" <S2SV_blank> %u/%s:%u"", EXTRACT_32BITS ( & ps -> slot ), ipaddr_string ( ndo, & ps -> page. p_sid ), EXTRACT_32BITS ( & ps -> page. p_uid ) ) ) ; io = ( const struct id_off * ) ( ps + 1 ) ; for ( ie = io + ps -> nid ; io < ie && ND_TTEST ( * io ) ; ++ io ) { ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_string ( ndo, & io -> id ), EXTRACT_32BITS ( & io -> off ) ) ) ; c = ',' ; } ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( const struct pgstate * )",0
81,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
82,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> addModuleArgument ( sqlite3 <S2SV_ModStart> zArg ) { sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof <S2SV_ModStart> = sizeof ( sqlite3_int64 <S2SV_ModEnd> ) * ( <S2SV_ModStart> nModuleArg ) ; sqlite3_int64 <S2SV_ModEnd> * * azModuleArg <S2SV_ModStart> } else { sqlite3_int64 <S2SV_ModEnd> i = pTable,0
83,<S2SV_ModStart> j ] ; for ( i = anal_size - 1 ; i >= 0 ; i -- ) { u_in [ i ] = u [ i - anal_size ] ; } for ( i = anal_size - 1 ; i >= 0 ; i -- ) { u_out [ i ] = u [ i - anal_size ] ; } for ( i = anal_size - 1 ; i >= 0 ; i -- ) { u_in [ i ] = u [ i - anal_size ] ; } for ( i = anal_size - 1 ; i >= 0 ; i -- ) { u_in [ i ] = u [ i - anal_size ] ; } for ( i = anal_size - 1 ; i >= 0 ; i -- ) { u_in [ i ] = u [ i - anal_size ] ; } for ( i = anal_size - 1 ; i >= 0 ; i -- ) { u_in [ i ] = u [ i - anal_size ] ; } for ( i = anal_size - 1 ; i >= 0 ; i -- ) { u_out [ i ] = u_,0
84,<S2SV_ModStart> < q ) { <S2SV_ModStart> p ) ; if ( ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS,0
85,"<S2SV_ModStart> bfq_idle_slice_timer_body ( struct bfq_sched_data * sched_data <S2SV_ModEnd> ) { struct <S2SV_ModStart> bfq_data * bfqd <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> long flags ; unsigned long flags ; spin_lock_irqsave ( & sched_data -> lock, flags ) ; bfq_clear_bfqq_wait_request ( bfqq ) ; spin_unlock_irqrestore ( & sched_data -> lock <S2SV_ModEnd>, flags ) <S2SV_ModStart> flags ) ; <S2SV_ModEnd> if ( bfq_bfqq_budget_timeout <S2SV_ModStart> return ; } if (! bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfqq -> queued [ 0 ] == 0 && bfqq -> queued [ 1 ] == 0 ) reason = BFQQE_TOO_IDLE ; else goto schedule_dispatch ; bfq_bfqq_expire ( bfqd, bfqq, true, reason ) ; spin_unlock_irqrestore ( & sched_data -> lock <S2SV_ModEnd>, flags )",0
86,,1
87,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
88,"<S2SV_ModStart> diffBlock + diffBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } memcpy ( newData + newpos, diffPtr, x ) ; diffPtr += x ; if ( diffPtr <S2SV_ModEnd> > diffBlock + <S2SV_ModStart> diffBlock + diffBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } if ( extraPtr + y <S2SV_ModEnd> > extraBlock + <S2SV_ModStart> extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } memcpy ( newData + newpos, extraPtr, y ) ; extraPtr += y ; if ( extraPtr + z <S2SV_ModEnd> > extraBlock + <S2SV_ModStart> extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } memcpy ( newData + newpos, extraPtr",0
89,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> np -> tclass ) ; rcu_read_unlock (,0
90,"<S2SV_ModStart>, bytes_per_pixel ) ; if ( bytes_per_pixel > MagickSizeMax ( number_pixels, bytes_per_pixel ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageData"" )",0
91,<S2SV_ModStart> data ) { ( void ) data ;,0
92,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
93,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
94,<S2SV_ModStart> ] = near_mvs [ 0 ] ; mv. as_int = near_mvs [ 1 ] ; mv. as_int = near_mvs [ 2 ] ; mv. as_int = near_mvs [ 3 ] ; mv. as_int = near_mvs [ 4 ] ; mv. as_int = near_mvs [ 5 ] ; mv. as_int = near_mvs [ 6 ] ; mv. as_int = near_mvs [ 7 ] ; mv. as_int = near_mvs [ 0 ] ; mv. as_int = near_mvs [ 1 ] ; mv. as_int = near_mvs [ 2 ] ; mv. as_int = near_mvs [ 3 ] ; mv. as_int = near_mvs [ 4 ] ; mv. as_int = near_mvs [ 5 ] ; mv. as_int = near_mvs [ 6 ] ; mv. as_int = near_mvs [ 7 ] ; mv. as_int = near_m,0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
97,"<S2SV_ModStart> msicap msicap ; if (! <S2SV_ModStart> msicap, msgnum ) ) return - EINVAL <S2SV_ModEnd> ; return pci_emul_add_capability",0
98,"<S2SV_ModStart> ) ) { if ( c -> flags & REDIS_CLOSE_AFTER_REPLY ) { addReplyError ( c, shared. error ) ; c -> flags |= REDIS_CLOSE_AFTER_REPLY ; return REDIS_ERR ; } <S2SV_ModStart> ) ) { if ( c -> flags & REDIS_CLOSE_AFTER_REPLY ) { addReplyError ( c, shared. error ) ; c -> flags |= REDIS_CLOSE_AFTER_REPLY ; return REDIS_ERR ; } <S2SV_ModStart> ) ) { if ( c -> flags & REDIS_CLOSE_AFTER_REPLY ) { addReplyError ( c, shared. error ) ; c -> flags |= REDIS_CLOSE_AFTER_REPLY ; return REDIS_ERR ; } <S2SV_ModStart> ) ) { if ( c -> flags & REDIS_CLOSE_AFTER_REPLY ) { addReplyError ( c, shared. error ) ; c -> flags |= REDIS_CLOSE_AFTER_REPLY ; return REDIS_ERR ; } <S2SV_ModStart> ) ) { if ( c -> flags & REDIS_CLOSE_AFTER_REPLY ) { addReplyError ( c, shared. error ) ; c -> flags |= REDIS_CLOSE_AFTER",0
99,"<S2SV_ModStart> vpx_codec_err_t res ; res = validate_config ( ctx, cfg, & ctx -> vp8_cfg, 0 ) ; if (! res ) { ctx -> cfg = * cfg ; set_vp8e_config ( & ctx -> oxcf, ctx -> cfg, ctx -> vp8_cfg, NULL ) ; vp8_change_config ( ctx -> cpi, & ctx -> oxcf ) ; } res = validate_config ( ctx, cfg, & ctx -> vp8_cfg, 0 ) ; if (! res ) { ctx -> cfg = * cfg ; set_vp8e_config ( & ctx -> oxcf, ctx -> cfg, ctx -> vp8_cfg, NULL ) ; vp8_change_config ( ctx -> cpi, & ctx -> oxcf ) ; } <S2SV_ModStart> VPX_RC_ONE_PASS ) ) { <S2SV_ModStart> ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; } <S2SV_ModEnd> res = validate_config",0
100,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> vp9_init_plane_quantizers ( cpi,0
101,<S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> info -> si_signo,0
102,"<S2SV_ModStart> ptr -> size ; ISOM_DECREASE_SIZE ( ptr, 1 ) tmp_strsize -= <S2SV_ModEnd> 8 ; tmp_str <S2SV_ModStart> ptr -> size ; ISOM_DECREASE_SIZE ( ptr, 1 ) tmp_strsize -= ( u32 ) ptr -> size <S2SV_ModStart> ptr -> size ; ISOM_DECREASE_SIZE ( ptr, 1 ) tmp_strsize -= ( u32 ) ptr -> size <S2SV_ModStart> ptr -> size ; ISOM_DECREASE_SIZE ( ptr, 1 ) tmp_strsize -= ( u32 ) ptr -> size <S2SV_ModStart> ptr -> size ; ISOM_DECREASE_SIZE ( ptr, 1 ) tmp_strsize -= ( u32 ) ptr -> size <S2SV_ModStart> ptr -> size ; ISOM_DECREASE_SIZE ( ptr, 1 ) tmp_strsize -= ( u32 ) ptr -> size <S2SV_ModStart> ptr -> size ; ISOM_DECREASE_SIZE ( ptr, 1 ) tmp_strsize -= ( u32 ) ptr -> size <S2SV_ModStart> ptr -> size ; ISOM_DECREASE_SIZE ( ptr, 1 ) tmp_strsize -= ( u32 ) ptr -> size <S2SV_ModStart> ptr -> size ; ISOM_DECREASE_SIZE ( ptr",0
103,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
104,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> -> state == fmode <S2SV_ModEnd> ) return ; <S2SV_ModStart> if ( ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> )!= ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> { if ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> -> state = fmode <S2SV_ModEnd> ; } <S2SV_null>",0
105,"<S2SV_ModStart> read_info ) ; status = SetImageExtent ( image, image -> rows, image -> cols ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
106,<S2SV_ModStart> 0 ; } if ( len > SIZE_MAX - elem. in_sg [ 0 ]. iov_len ) { return 0 ; },0
107,"<S2SV_ModStart>, i, <S2SV_ModEnd> JPC_QCX_GETEXPN ( qcd <S2SV_ModStart> ] ), <S2SV_ModEnd> JPC_QCX_GETMANT ( qcd",0
108,"<S2SV_ModStart> = AV_PIX_FMT_PAL8 ; avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", AV_PIX_FMT_PAL8 ) ; <S2SV_ModStart> = AV_PIX_FMT_PAL8 ; avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", AV_PIX_FMT_PAL8 ) ; <S2SV_ModStart> = AV_PIX_FMT_PAL8 ; avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", AV_PIX_FMT_PAL8 ) ; <S2SV_ModStart> = AV_PIX_FMT_PAL8 ; avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", AV_PIX_FMT_PAL8 ) ; <S2SV_ModStart> = AV_PIX_FMT_PAL8 ; avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", AV_PIX_FMT_PAL8 ) ; <S2SV_ModStart> = AV_PIX_FMT_PAL8 ; avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x",0
109,"<S2SV_ModStart> ) ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } <S2SV_ModStart> - 1 ) ; if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } if ( caplen > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } if ( caplen > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } } if ( caplen > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } if ( caplen > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } if ( caplen > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } if ( caplen > 1 ) { N",0
110,"<S2SV_ModStart> image_noffset ) { if ( noffset == - FDT_ERR_TRUNCATED || noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; } <S2SV_ModStart>, NULL ) ; if ( noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; } ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; if ( ret ) { puts ( ""- <S2SV_blank> "" ) ; } else { puts ( ""+ <S2SV_blank> "" ) ; verified = 1 ; break ; } } } if ( noffset == - FDT_ERR_TRUNCATED || noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; } return verified? 0 : - EPERM ; error : printf ( "" <S2SV_blank> error!\\n%s <S2SV_blank> for <S2SV_blank> \'%s\' <S2SV_blank> hash <S2SV_blank> node <S2SV_blank> in <S2SV_blank> \'%s\' <S2SV_blank> image <S2SV_blank> node\\n"", err",0
111,"<S2SV_ModStart> rx_kfifo_lock ) ; state -> dev = dev ; sd = & state -> sd ; v4l2_subdev_init ( & state -> sd, & cx23888_ir_controller_ops ) ; v4l2_set_subdevdata ( sd, state ) ; snprintf ( sd -> name, sizeof ( sd -> name ), ""%s/888-ir"", dev -> name ) ; sd -> grp_id = CX23885_HW_888_IR ; ret = v4l2_device_register_subdev ( & dev -> v4l2_dev, sd ) ; if ( ret == 0 ) { cx23888_ir_write4 ( dev, CX23888_IR_IRQEN_REG, 0 ) ; mutex_init ( & state -> rx_params_lock ) ; default_params = default_rx_params ; v4l2_subdev_call ( sd, ir, rx_s_parameters, & default_params ) ; mutex_init ( & state -> tx_params_lock ) ; default_params = default_tx_params ; v4",0
112,"<S2SV_ModStart>, vpx_codec_dec_cfg_t * dec_cfg, vpx_codec_flags_t flags, int ver ) { vpx_codec_err_t res ; if (! ctx ||! iface ) res = VPX_CODEC_INVALID_PARAM ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_POSTPROC ) &&! ( iface -> caps & VPX_CODEC_CAP_POSTPROC ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_ERROR_CONCEALMENT ) &&! ( iface -> caps & VPX_CODEC_CAP_ERROR_CONCEALMENT ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & V",0
113,<S2SV_ModStart> ; value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1100WritePhyReg (,0
114,<S2SV_ModStart> ( unlikely ( IPCB ( skb_in ) -> opt. optlen <S2SV_ModEnd> >= IP_PMTUDISC_PROBE_THRESH ) <S2SV_ModStart> ; if ( IPCB ( skb_in ) -> optlen <S2SV_ModEnd> >= IP_PMTUDISC_PROBE_THRESH ) <S2SV_ModStart> ; if ( IPCB ( skb_in ) -> optlen <S2SV_ModEnd> >= IP_PMTUDISC_PROBE_THRESH ) <S2SV_ModStart> ; if ( IPCB ( skb_in ) -> optlen <S2SV_ModEnd> >= IP_PMTUDISC_PROBE_THRESH ) <S2SV_ModStart> ; if ( IPCB ( skb_in ) -> optlen <S2SV_ModEnd> >= IP_PMTUDISC_PROBE_THRESH ) <S2SV_ModStart> ; if ( IPCB ( skb_in ) -> optlen <S2SV_ModEnd> >= IP_PMTUDISC_PROBE_THRESH ) <S2SV_ModStart> ; if ( IPCB ( skb_in ) -> optlen <S2SV_ModEnd> >= IP_PMTUDISC_PROBE_THRESH ) <S2SV_ModStart> ; if ( IPCB ( skb_in ) -> optlen <S2SV_ModEnd> >= IP_PMTUDISC_PROBE,0
115,<S2SV_ModStart> else if ( <S2SV_ModEnd> flags & VPX_CODEC_USE_XMA <S2SV_ModStart> & VPX_CODEC_USE_XMA ) <S2SV_ModEnd> res = VPX_CODEC_INCAPABLE <S2SV_ModStart> else if ( <S2SV_ModEnd> flags & VPX_CODEC_USE_PSNR <S2SV_ModStart> & VPX_CODEC_USE_PSNR ) <S2SV_ModEnd> res = VPX_CODEC_INCAPABLE <S2SV_ModStart> & VPX_CODEC_USE_OUTPUT_PARTITION ) <S2SV_ModEnd> res = VPX_CODEC_INCAPABLE <S2SV_ModStart> else if ( <S2SV_ModEnd> flags & VPX_CODEC_USE_XMA <S2SV_ModStart> & VPX_CODEC_USE_XMA ) <S2SV_ModEnd> res = VPX_CODEC_INCAPABLE <S2SV_ModStart> & VPX_CODEC_USE_XMA ) <S2SV_ModEnd> res = VPX_CODEC_INCAPABLE <S2SV_ModStart> & VPX_CODEC_USE_PSNR ) <S2SV_ModEnd> res = VPX_CODEC_INCAPABLE <S2SV_ModStart> else if ( <S2SV_ModEnd> flags & VPX_CODEC_USE_OUTPUT_PARTITION <S2SV_ModStart> & VPX_CODEC_USE_OUTPUT_,0
116,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
117,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; RESERVE_SPACE",1
118,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ) ; return 0 <S2SV_ModStart> break ; } return error <S2SV_ModEnd> ; } <S2SV_null>,1
119,<S2SV_ModStart> esil ) ; r_strbuf_setlen <S2SV_ModEnd> ( & op <S2SV_ModStart> esil ) ; r_strbuf_setlen <S2SV_ModEnd> ( & anal <S2SV_ModStart> esil ) ; r_strbuf_setlen <S2SV_ModEnd> ( & anal <S2SV_ModStart> esil ) ; r_strbuf_setlen <S2SV_ModEnd> ( & anal <S2SV_ModStart> esil ) ; r_strbuf_setlen <S2SV_ModEnd> ( & anal <S2SV_ModStart> esil ) ; r_strbuf_setlen <S2SV_ModEnd> ( & anal <S2SV_ModStart> esil ) ; r_strbuf_setlen <S2SV_ModEnd> ( & anal <S2SV_ModStart> esil ) ; r_strbuf_setlen <S2SV_ModEnd> ( & anal <S2SV_ModStart> esil ) ; r_strbuf_setlen <S2SV_ModEnd> ( & anal <S2SV_ModStart> esil ) ; r_strbuf_setlen <S2SV_ModEnd> ( & anal <S2SV_ModStart> esil ) ; r_strbuf_setlen <S2SV_ModEnd> ( & anal <S2SV_ModStart> esil ) ; r_strbuf_setlen <S2SV_ModEnd> ( & anal <S2SV_ModStart> esil ) ; r_strbuf_setlen <S2SV_ModEnd> ( & anal <S2SV_ModStart> esil ) ; r_strbuf_setlen <S2SV_ModEnd> ( & anal <S2SV_ModStart> esil ) ; r_strbuf_setlen <S2SV_ModEnd> ( & anal,0
120,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
121,<S2SV_ModStart> goto trunc ; if ( lshp -> ls_length < sizeof ( struct lsa6_hdr ) ) goto trunc ;,0
122,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { ret = - EFAULT ; break ; } <S2SV_ModEnd> * obuf =",0
123,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
124,<S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ),0
125,"<S2SV_ModStart> costs, vp9_tree * <S2SV_ModStart> ) { const vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> ) ; const vpx_tree_index <S2SV_ModEnd> ii = tree",0
126,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
127,"<S2SV_ModStart> & 0xffff ; if (! synth_devs [ dev ] -> load_patch ) return - ENXIO ; <S2SV_ModStart> c, 0 ) ; if ( err < 0 ) return err ; return err ; } if ( ev_code >= 128 ) { if ( seq_mode == SEQ_2 && ev_code == SEQ_EXTENDED ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> Invalid <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> event <S2SV_blank> %x\\n"", ev_code ) ; return - EINVAL ; } ev_size = 8 ; if ( c < ev_size ) { if (! seq_playing ) seq_startplay ( ) ; return count - c ; } if ( copy_from_user ( ( char * ) & event_rec [ 4 ], & ( buf ) [ p + 4 ], 4 ) ) return - EINVAL ; return count - c ; } if ( c < ev_size ) { if (! seq_playing ) seq_startplay ( ) ; return count - c ; } if ( c < ev_size ) { if (! seq_playing ) seq_startplay ( ) ; return count",0
128,"<S2SV_ModStart> fadst16 ( const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t <S2SV_ModEnd> x0, s1 <S2SV_ModStart> 15 ] ; tran_high_t x2 = input [ 0 ] ; tran_high_t <S2SV_ModEnd> x3 = input <S2SV_ModStart> 2 ] ; tran_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 11 ] ; tran_high_t <S2SV_ModEnd> x5 = input <S2SV_ModStart> 4 ] ; tran_high_t <S2SV_ModEnd> x6 = input <S2SV_ModStart> 9 ] ; tran_high_t <S2SV_ModEnd> x7 = input <S2SV_ModStart> 7 ] ; tran_high_t <S2SV_ModEnd> x8 = input <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> x9 = input <S2SV_ModStart> 9 ] ; tran_high_t <S2SV_ModEnd> x10 = input <S2SV_ModStart> 5 ] ; tran_high_t <S2SV_ModEnd> x11 = input <S2SV_ModStart> 10 ] ; tran_high_t <S2SV_ModEnd> x12 = input <S2SV_ModStart> 12 ] ;",0
129,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> flags |= HAS_EDSP <S2SV_ModStart> |= HAS_EDSP ; <S2SV_ModEnd> flags |= HAS_MEDIA <S2SV_ModStart> |= HAS_MEDIA ; <S2SV_ModEnd> flags |= HAS_NEON <S2SV_ModStart> flags |= HAS_NEON ; <S2SV_ModEnd> return flags &,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
131,"<S2SV_ModStart> * cpi, <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd>, int * <S2SV_ModStart> bsize ) { <S2SV_ModEnd> int bw, <S2SV_ModStart> = num_8x8_blocks_wide_lookup [ mi <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = num_8x8_blocks_high_lookup [ mi <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> ( cpi, mi <S2SV_ModEnd>, no_pred_segcounts, <S2SV_ModStart> ( cpi, mi <S2SV_ModEnd>, no_pred_segcounts, <S2SV_ModStart> ( cpi, mi <S2SV_ModEnd>, no_pred_segcounts, <S2SV_ModStart> ( cpi, mi <S2SV_ModEnd>, no_pred_segcounts,",0
132,<S2SV_ModStart> & CLIENT_CLOSE_AFTER_REPLY ) { resetClient ( c ) ; break ; } <S2SV_ModEnd> if (!,0
133,<S2SV_ModStart> get_blocks_flags = EXT4_GET_BLOCKS_CREATE | EXT4_GET_BLOCKS_RESERVE <S2SV_ModStart> get_blocks_flags |= EXT4_GET_BLOCKS_DELALLOC_RESERVE <S2SV_ModEnd> ; blks =,0
134,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart>, handle, ( struct oe_addrinfo * * ) <S2SV_ModStart> & retval, ( struct oe_addrinfo * * ) <S2SV_ModStart> -> ai_flags, ( struct oe_addrinfo * * ) <S2SV_ModStart> -> ai_family, ( struct oe_addrinfo * * ) <S2SV_ModStart> -> ai_socktype, ( struct oe_addrinfo * * ) <S2SV_ModStart> -> ai_protocol, ( struct oe_addrinfo * * ) <S2SV_ModStart> & p -> ai_addrlen, ( struct oe_addrinfo * * ) <S2SV_ModEnd> & p -> <S2SV_ModStart> & p -> ai_addrlen, ( struct oe_addrinfo * * ) <S2SV_ModEnd> NULL, canonnamelen <S2SV_ModStart> & p -> ai_family, ( struct oe_addrinfo * * ) <S2SV_ModEnd> & p -> <S2SV_ModStart> & p -> ai_socktype, ( struct oe_addrinfo * * ) <S2SV_ModEnd> & p -> <S2SV_ModStart> & p -> ai_protocol, ( struct oe_addrinfo * * ) <S2SV_ModEnd> & p -> <S2SV_ModStart> & p -> ai_addrlen, ( struct oe_addrinfo * * ) <S2SV_ModEnd> & p -> <S2SV_ModStart> & p -> ai_addrlen, (",0
135,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
136,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
137,"<S2SV_ModStart> __u16 size, const <S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmemdup ( data, size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; kfree ( buf ) ;",1
138,"<S2SV_ModStart> asdl_seq * body, const char * name <S2SV_ModStart> = body ; p -> v. Module. name = name ;",0
139,"<S2SV_ModStart>, int64_t ts_end <S2SV_ModEnd> ) { struct <S2SV_ModStart> >> 4 ; <S2SV_ModEnd> if ( ctx <S2SV_ModStart> write_idx ) ; vp9_copy_and_extend_frame ( src, & buf -> img ) ; <S2SV_ModStart> } else { # if USE_PARTIAL_COPY if ( ctx -> max_sz == 1 && active_map &&! flags ) { for ( row = 0 ; row < mb_rows ; ++ row ) { col = 0 ; while ( 1 ) { for ( ; col < mb_cols ; ++ col ) { if ( active_map [ col ] ) break ; } vp9_copy_and_extend_frame_with_rect ( src, & buf -> img, row << 4, col << 4, 16, ( active_end - col ) << 4 ) ; col = active_end ; } active_map += mb_cols ; } else { vp9_copy_and_extend_frame ( src, & buf -> img, row << 4, col << 4, 16, ( active_end - col ) << 4 ) ; col = active_end ; } } else { vp9_copy_and_extend_frame ( src, & buf -> img )",0
140,"<S2SV_ModStart>. sharpness ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; <S2SV_ModStart> LPF_PICK_FROM_Q ) { <S2SV_ModEnd> lf -> filter_level <S2SV_ModStart> } else { const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; if ( cm -> frame_type == KEY_FRAME ) filt_guess -= 4 ; lf -> filter_level = clamp ( filt_guess, min_filter_level, max_filter_level ) ; } else { search_filter_level ( sd, cpi, method == LPF_PICK_FROM_SUBIMAGE ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
141,<S2SV_ModStart> } break ; case BTA_DM_DISABLE_EVT : { BD_ADDR bdaddr ; bt_status_t status ; prop. type = BT_PROPERTY_BDADDR ; prop. len = BD_ADDR_LEN ; prop. val = ( void * ) & bdaddr ; status = btif_storage_get_adapter_property ( & prop ) ; if ( status == BT_STATUS_SUCCESS ) { BTA_DmSetDeviceName ( ( char * ) prop. val ) ; } else { BTA_DmSetDeviceName ( ( char * ) bdaddr ) ; } # if ( defined ( BLE_INCLUDED ) && ( BLE_INCLUDED == TRUE ) ) BTA_DmBleConfigLocalPrivacy ( BLE_LOCAL_PRIVACY_DISABLED ) ; status = btif_storage_get_adapter_property ( & prop ) ; if ( status == BT_STATUS_SUCCESS ) { BTA_DmBleConfigLocalPrivacy ( BLE_LOCAL_PRIVACY_DISABLED ) ; status = btif_storage_get_adapter_property ( & prop ) ;,0
142,"<S2SV_ModStart> { int a ; if (! isp2 ( getnum ( fmt, MAXALIGN ) ) ) luaL_error ( L, ""alignment <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> power <S2SV_blank> of <S2SV_blank> 2"", getnum ( fmt, MAXALIGN ) ) ; a",0
143,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
144,"<S2SV_ModStart> vpx_codec_err_t res ; vpx_alg_priv_t * priv ; <S2SV_ModStart> ; else { priv = ctx -> priv -> alg_priv ; <S2SV_ModStart>. decode ( <S2SV_ModEnd> priv, data",0
145,"<S2SV_ModStart> inode * inode, struct buffer_head * bh ) { struct isofs_sb_info * sbi = ISOFS_SB ( sb ) ; unsigned long bufsize = ISOFS_BUFFER_SIZE ( inode ) ; unsigned long block ; int high_sierra = sbi -> s_high_sierra ; struct iso_inode_info * ei = ISOFS_I ( inode ) ; int ret = - EIO ; block = ei -> i_iget5_block ; offset = ei -> i_iget5_offset ; de = ( struct iso_directory_record * ) ( bh -> b_data + offset ) ; de_len = * ( unsigned char * ) de ; if ( offset + de_len > bufsize ) { int frag1 = bufsize - offset ; tmpde = kmalloc ( de_len, GFP_KERNEL ) ; if ( tmpde == NULL ) { printk ( KERN_INFO ""%s: <S2SV_blank> out <S2SV_blank> of <S2SV_blank> memory\\n"", __func__ ) ; ret = - ENOMEM ; goto fail ; } memcpy ( tmpde, bh -> b_data + offset, frag1 )",0
146,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> ) ; } outpos += strlen ( outputbuffer ) ;",0
147,<S2SV_ModStart> self ) { PyObject_GC_UnTrack ( self ) ;,1
148,<S2SV_ModStart> ( ) ; if (! a ) return 0 ; <S2SV_ModStart> ] ) ; <S2SV_ModEnd> suffix_object ( p,0
149,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> len ; Py_ssize_t <S2SV_ModEnd> i ; tmp <S2SV_ModStart> ++ ) { asdl_stmt_ty <S2SV_ModEnd> value ; res <S2SV_ModStart> ; res = obj2ast_stmt_ty <S2SV_ModEnd> ( PyList_GET_ITEM ( <S2SV_ModStart> ; res = obj2ast_stmt_ty <S2SV_ModEnd> ( PyList_GET_ITEM ( <S2SV_ModStart> len ; Py_ssize_t <S2SV_ModEnd> i ; tmp <S2SV_ModStart> } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> len ; Py_ssize_t <S2SV_ModEnd> i ; tmp <S2SV_ModStart> ++ ) { asdl_stmt_ty <S2SV_ModEnd> value ; res <S2SV_ModStart> ; res = obj2ast_stmt_ty <S2SV_ModEnd> ( PyList_GET_ITEM ( <S2SV_ModStart> ; res = obj2ast_stmt_ty <S2SV_ModEnd> ( PyList_GET_ITEM ( <S2SV_ModStart> ; res = obj2ast_stmt_ty <S2SV_ModEnd> ( PyList_GET_ITEM ( <S2SV_ModStart> ; res = obj2ast_stmt_ty <S2SV_ModEnd> ( PyList_GET_ITEM ( <S2SV_ModStart> ; res = obj2ast_stmt_ty <S2SV_ModEnd> ( PyList_GET_ITEM <S2SV_ModStart> ; res = obj2ast_stmt",0
150,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
151,"<S2SV_ModStart> & flags ) <S2SV_ModEnd> err = verify_compat_iovec <S2SV_ModStart> VERIFY_WRITE ) ; else err = verify_iovec ( msg_sys, iov, & addr, VERIFY_READ ) ; if ( err < 0 ) goto out_freeiov ; total_len = err ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; err = ( nosec? sock_recvmsg_nosec : sock_recvmsg ) ( sock, msg_sys, cmsg_ptr, uaddr, uaddr_len ) ; if ( err < 0 ) goto out_freeiov ; err = ( nosec? sock_recvmsg_nosec : sock_recvmsg ) ( sock, msg_sys, cmsg_ptr, uaddr, uaddr_len ) ; if ( err < 0 ) goto out_freeiov ; err = ( nosec? sock_recvmsg_nosec : sock_recv",0
152,"<S2SV_ModStart> buffer_head * dibh <S2SV_ModEnd> ; u64 bn <S2SV_ModStart> unsigned ptrs_per_blk ; int eob = 0 ; enum alloc_state state ; __be64 * ptr ; __be64 zero_bn = 0 ; BUG_ON ( sheight < 1 ) ; BUG_ON ( dibh == NULL ) ; gfs2_trans_add_bh ( ip -> i_gl, dibh, 1 ) ; if ( height == sheight ) { struct buffer_head * bh ; ptr = metapointer ( height, mp ) ; bh = mp -> mp_bh [ height ] ; dblks = gfs2_extent_length ( bh -> b_data, bh -> b_size, ptr, maxlen, & eob ) ; BUG_ON ( dblks < 1 ) ; state = ALLOC_DATA ; } else { ptrs_per_blk = height > 1? sdp -> sd_inptrs : sdp -> sd_diptrs ; dblks = min ( maxlen, ptrs_per_blk - mp -> mp_list [ height ] ) ; if ( height == ip -> i_height ) {",0
153,"<S2SV_ModStart>, vpx_codec_iface_name ( stream <S2SV_ModEnd> -> codec -> <S2SV_ModStart> -> use_i420? ""I420"" : ""YV12"" ) ; } if ( stream -> next || stream -> index ) { fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> index ) ; fprintf ( stderr, ""Destination <S2SV_blank> file: <S2SV_blank> %s\\n"", stream -> config. out_fn ) ; fprintf ( stderr, ""Encoder <S2SV_blank> parameters:\\n"" ) ; SHOW ( g_usage ) ; SHOW ( g_threads ) ; SHOW ( g_profile ) ; SHOW ( g_w ) ; SHOW ( g_h ) ; SHOW ( g_timebase. num ) ; SHOW ( g_timebase. den ) ; SHOW ( g_error_resilient ) ; SHOW ( g_pass ) ; SHOW ( g_lag_in_frames ) ; SHOW ( g_dropframe_thresh ) ; SHOW ( rc_resize_allowed ) ; SHOW ( rc_resize_down_thresh ) ; SHOW ( rc_end_usage ) ; SHOW ( rc_min_quantizer ) ; SHOW ( rc_max_quantizer )",0
154,<S2SV_ModStart> ( copyNs ) { <S2SV_ModStart> copyNs ) ; copyNs = NULL ; } <S2SV_ModStart> ( copyNs ) { <S2SV_ModStart> copyNs ) ; copyNs = NULL ; } <S2SV_ModStart> ( copyNs ) { <S2SV_ModStart> copyNs ) ; copyNs = NULL ; } <S2SV_ModStart> ( copyNs ) { <S2SV_ModStart> copyNs ) ; copyNs = NULL ; } <S2SV_ModStart> ( copyNs ) { <S2SV_ModStart> copyNs ) ; copyNs = NULL ; } <S2SV_ModStart> ( copyNs ) { <S2SV_ModStart> copyNs ) ; copyNs = NULL ; } <S2SV_ModStart> ( copyNs ) { <S2SV_ModStart> copyNs ) ; copyNs = NULL ; } <S2SV_ModStart> ( copyNs ) { <S2SV_ModStart> copyNs ) ; copyNs = NULL ; } <S2SV_ModStart> ( copyNs ) { <S2SV_ModStart> copyNs ) ; copyNs = NULL ; } <S2SV_ModStart> ( copyNs ) { <S2SV_ModStart> copyNs ) ; copyNs = NULL ; } <S2SV_ModStart> ( copyNs ) { <S2SV_ModStart> copyNs ) ; copyNs = NULL ; } <S2SV_ModStart> ( copyNs ) { <S2SV_ModStart> copyNs ) ; copyNs = NULL ; } <S2SV_ModStart> ( copyNs ) { <S2SV_ModStart> copyNs ) ; copyNs = NULL ; },0
155,"<S2SV_ModStart> 0 ) { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } } else { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } } free ( fname ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> } else if <S2SV_ModStart> 0 ) { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } } else { FILE * fp = fopen ( fname, ""w"" ) ;",0
156,<S2SV_ModStart> msix_tab_size ) { <S2SV_ModEnd> bzero ( msixcap,1
157,"<S2SV_ModStart> ; if ( js_isundefined ( J, m. sub [ 0 ]. sp ) ) js_pushnumber ( J, js_utfptrtoidx ( text, m. sub [ 0 ]. sp ) ) ; else if ( js_regexec ( re -> prog, text, & m, 0 ) ) js_pushnumber ( J, js_utfptrtoidx ( text, m. sub [ 0 ]. sp ) ) ; else js_pushnumber ( J, js_utfptrtoidx ( text, m. sub [ 0 ]. sp ) ) ; if (",0
158,"<S2SV_ModStart> case OFreshOID : caml_set_oo_id ( ( value ) dest ) ; sp -- ; break ; case OShift : * dest += sp -> arg ; sp -- ; break ; case OReadItems : sp -> dest ++ ; if ( -- ( sp -> arg ) == 0 ) sp -- ; code = read8u ( ) ; if ( code >= PREFIX_SMALL_INT ) { tag = code & 0xF ; size = ( code >> 4 ) & 0x7 ; read_block : if ( size >= 2 ) { ReadItems ( & Field ( v, 2 ), size - 2 ) ; PushItem ( ) ; sp -> op = OFreshOID ; sp -> dest = ( value * ) v ; sp -> arg = 1 ; ReadItems ( & Field ( v, 0 ), size - 2 ) ; } else { v = Val_int ( code & 0x3F ) ; } } else { v = Val_hp ( intern_dest ) ; if ( intern_obj_table!= NULL ) intern_obj_table [ obj_counter ++ ] = v ; * intern_dest = Make_header ( size, tag, intern_color ) ; * intern_dest",0
159,"<S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; ksz8851WriteReg <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( interface, KSZ8851_ISR ) ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } if ( ( isr & ISR_TXIS )!= 0 ) { ksz8851WriteReg ( interface, KSZ8851_ISR, ISR_TXIS ) ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } } if ( ( isr & ISR_RXIS )!= 0 ) { ksz8851WriteReg ( interface, <S2SV_ModStart> ( interface, KSZ88",0
160,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_quantization ( VP9_COMMON <S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
161,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> p_buf, msglen )",1
162,<S2SV_ModStart> ; sslerr : if ( fp ) fclose ( fp ) ; if ( rawcert ) BIO_free ( rawcert ) ; if ( peerec ) RSA_free ( peerec ) ; if ( localrsa ) RSA_free ( localrsa ) ; if ( localkey ) EC_free ( localkey ) ; if ( rawcert ) BIO_free ( rawcert ) ; if ( fp ) <S2SV_ModStart> fp ) ; if ( peerec ) EC_free ( peerec ) ; if ( rawcert ) BIO_free ( rawcert ) ; if ( fp ) <S2SV_ModStart> fp ) ; if ( rawcert ) BIO_free ( rawcert ) ; if ( fp ) <S2SV_ModStart> fp ) ; if ( peerec ) EC_free ( peerec ) ; if ( fp ) <S2SV_ModStart> fp ) ; if ( rawcert ) BIO_free ( rawcert ) ; if ( fp ) <S2SV_ModStart> fp ) ; if ( fp ) <S2SV_ModStart> fp ) ; if ( rawcert ) BIO_free ( rawcert ) ; if ( fp ) <S2SV_ModStart> fp ) ; if ( fp ) <S2SV_ModStart> fp ) ; if ( fp ) <S2SV_ModStart> fp ) ; if ( rawcert ) BIO_free ( rawcert ) ;,0
163,"<S2SV_ModStart> ( ) ; strncat <S2SV_ModEnd> ( t1_buf_array, <S2SV_ModStart> t1_buf_array, t1_line_array, strlen ( t1_line_array ) - 1",0
164,"<S2SV_ModStart> int mi_col, MACROBLOCKD * xd, <S2SV_ModStart> int bsl = b_width_log2_subsize <S2SV_ModEnd> ( bsize ) <S2SV_ModStart> / 4 ; <S2SV_ModEnd> assert ( bsize <S2SV_ModStart> case PARTITION_NONE : set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; break ; case PARTITION_VERT : set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; if ( mi_col + hbs < cm -> mi_cols ) { set_modeinfo_offsets ( cm, xd, mi_row, mi_col + hbs ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x",0
165,"<S2SV_ModStart> key_ref ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) { ret = - ENOKEY ; goto error2 ; }",1
166,<S2SV_ModStart> u4_first_slice_is_aud ) { <S2SV_ModEnd> ps_dec -> u1_first_slice_is_aud <S2SV_ModStart> ps_dec -> u1_first_slice_is_aud = 1 ; } else { <S2SV_ModEnd> ps_dec -> u1_first_slice_is_aud <S2SV_ModStart> ps_dec -> u1_first_slice_is_aud = 0 ; } if ( 0 == ps_dec -> u1_first_slice_is_aud ) { <S2SV_ModEnd> ps_dec -> u1_first_slice_is_aud <S2SV_ModStart> ps_dec -> u1_first_slice_is_aud = 0 ; } else { <S2SV_ModEnd> ps_dec -> u1_first_slice_is_aud <S2SV_ModStart> ps_dec -> u1_first_slice_is_aud = 0 ; } } else { <S2SV_ModEnd> ps_dec -> u1_first_slice_is_aud <S2SV_ModStart> ps_dec -> u1_first_slice_is_aud = 0 ; } if ( 0 == ps_dec -> u1_first_slice_is_aud ) { <S2SV_ModEnd> ps_dec -> u1_first_slice_is_aud <S2SV_ModStart> ps_dec -> u1_first,0
167,"<S2SV_ModStart> var_off ) ; switch ( opcode ) { case BPF_ADD : if ( signed_add_overflows ( dst_reg -> smin_value, smin_val ) || signed_add_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else { dst_reg -> smin_value += smin_val ; dst_reg -> smax_value += smax_val ; } if ( dst_reg -> umin_value + umin_val < umin_val || dst_reg -> umax_value + umax_val < umax_val ) { dst_reg -> umin_value = 0 ; dst_reg -> umax_value = U64_MAX ; } else { dst_reg -> umin_value += umin_val ; dst_reg -> umax_value += umax_val ; } src_reg -> var_off = tnum_add ( src_reg -> var_off, src_reg. var_off ) ;",0
168,"<S2SV_ModStart> goto lookup_out ; if ( direntry -> d_name. len > PATH_MAX ) { cifs_dbg ( FYI, ""direntry <S2SV_blank> name <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long"" ) ; rc = - ENAMETOOLONG ; goto lookup_out ; }",0
169,"<S2SV_ModStart> -> sk_bound_dev_if ; RCU_INIT_POINTER ( ireq -> ireq_opt, <S2SV_ModEnd> tcp_v4_save_options ( skb <S2SV_ModStart> tcp_v4_save_options ( skb )",0
170,"<S2SV_ModStart> { int number_of_frames = 0, number_of_keyframes = 0, encode_frame_count = 0 <S2SV_ModEnd> ; SvcInternal * <S2SV_ModStart> svc_ctx ) ; if ( <S2SV_ModEnd> si -> encode_frame_count <S2SV_ModStart> si -> encode_frame_count <= 0 ) return vpx_svc_get_message ( svc_ctx ) ; svc_log ( svc_ctx, SVC_LOG_INFO, ""\\n"" ) ; number_of_keyframes = encode_frame_count / si -> kf_dist + 1 ; for ( i = 0 ; i < si -> layers ; ++ i ) { number_of_frames = encode_frame_count ; if ( svc_ctx -> encoding_mode == ALT_INTER_LAYER_PREDICTION_IP && ( i == 1 || i == 3 ) ) { number_of_frames -= number_of_keyframes ; } svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f], <S2SV_blank> Bytes=[%u]\\n"", i, ( double ) si",0
171,"<S2SV_ModStart> -> sb_buffer ) { VTermScreenCell * old_sb_buffer = screen -> sb_buffer ; <S2SV_ModStart> screen -> sb_buffer ) ; vterm_allocator_free ( screen -> vt, screen -> old_sb_buffer ) ; screen -> old_sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; } if ( new_cols > old_cols ) { VTermRect rect ; rect. start_row = 0 ; rect. end_row = old_rows ; rect. start_col = old_cols ; rect. end_col = new_cols ; scrollrect ( rect, new_rows - old_rows, 0, user ) ; vterm_screen_flush_damage ( screen ) ; scrollrect ( rect, new_rows - old_rows, 0, user ) ; vterm_screen_flush_damage ( screen ) ; } else { VTermRect rect ; rect. start_row = 0 ; rect. end_row = 0 ; rect. start_col = old_cols ; rect. start_col = new_cols ; scrollrect ( rect",0
172,"<S2SV_ModStart> n ) { <S2SV_ModEnd> if ( recurse_lvl <S2SV_ModStart> 0 ) { const char * literal_start = * str ; const char * literal_end ; int in_named_escape = 0 ; int result = 0 ; for ( ; * str < end ; ( * str ) ++ ) { char ch = * * str ; if (! in_named_escape && ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 1 ; } else if ( in_named_escape && ch == '{' || ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } if ( ch == '{' ) { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; return - 1 ; } } if ( ch == '}' ) { ast_error ( c, n, ""f-string: <S2SV_blank> single",0
173,"<S2SV_ModStart>, g_settings_dump_location ) ; if ( dd ) { dd_close ( dd ) ; dd = NULL ; } log_info ( ""problem <S2SV_blank> id: <S2SV_blank> \'%s\'"", dd -> dd_dirname ) ; if ( dd ) { problem_id = xstrdup ( dd -> dd_dirname ) ; dd_close ( dd ) ; dd = create_dump_dir_from_problem_data ( pd, g_settings_dump_location ) ; dd = create_dump_dir_from_problem_data ( pd, g_settings_dump_location ) ; dd_close ( dd ) ; } log_info ( ""problem <S2SV_blank> id: <S2SV_blank> \'%s\'"", problem_id ) ; if ( dd ) { problem_id = xstrdup ( dd -> dd_dirname ) ; dd_close ( dd ) ; } log_info ( ""problem <S2SV_blank> id: <S2SV_blank> \'%s\'"", problem_id ) ; dd = create_dump_dir_from_problem_data ( pd, g_settings_dump_location ) ; dd = create_dump_dir_from_problem_data ( pd, g_settings_dump_location",0
174,<S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ),0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
176,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mv_stride <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart>",0
177,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; <S2SV_ModEnd> for ( mi_col <S2SV_ModStart> + mi_col ; MODE_INFO_8x8 <S2SV_ModEnd> * * mi_8x8 <S2SV_ModStart> * * mi_8x8 <S2SV_ModEnd> ; MODE_INFO * <S2SV_ModStart> MODE_INFO * * prev_mi_8x8 <S2SV_ModEnd> ; BLOCK_SIZE bsize <S2SV_ModStart> + idx_str ; MODE_INFO_8x8 <S2SV_ModEnd> * prev_mi_8x8 = <S2SV_ModStart> cm -> prev_mi_grid_visible <S2SV_ModEnd> ; cpi -> <S2SV_ModStart> = UINT_MAX ; <S2SV_ModEnd> switch ( cpi <S2SV_ModStart> ( cpi, cm, <S2SV_ModStart> ( cpi, cm, <S2SV_ModStart> ( cpi, cm, <S2SV_ModStart> ( cpi, cm, <S2SV_ModStart> ( cpi, cm, <S2SV_ModStart> ( cpi, cm, <S2SV_ModStart> ( cpi, cm, <S2SV_ModStart> ( cpi, cm, <S2SV_ModStart> ( cpi, cm, <S2SV_ModStart> ( cpi, cm, <S2SV_ModStart> ( cpi, cm, <S2SV_ModStart> ( cpi, cm, <S2SV_ModStart> ( cpi, cm, <S2SV_ModStart> ( cpi, cm, <S2SV_ModStart> ( cpi, cm, <S2SV_ModStart>",0
178,"<S2SV_ModStart> u_int8_t state ; memset ( & _dh, 0, sizeof ( _dh ) ) ;",0
179,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static void <S2SV_ModEnd> ip_options_get_finish ( struct <S2SV_ModStart> ip_options_get_finish ( struct ip_options_rcu <S2SV_ModEnd> * net, <S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * opt, <S2SV_ModStart> & 3 ) rcu_assign_pointer ( <S2SV_ModStart> __data [ optlen <S2SV_ModEnd> ] = IPOPT_END <S2SV_ModStart> = IPOPT_END ; rcu_assign_pointer ( <S2SV_ModStart> = optlen ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
180,"<S2SV_ModStart> ; if ( strcmp ( connection, ""Upgrade"" ) == 0 ) { const char * ws_version = http_request_get_header ( info -> request, ""Sec-WebSocket-Version"" ) ; if ( ws_version == NULL || strcmp ( ws_version, ""13"" )!= 0 ) goto error ; const char * ws_upgrade = http_request_get_header ( info -> request, ""Sec-WebSocket-Upgrade"" ) ; if ( ws_upgrade == NULL || strcasecmp ( ws_upgrade, ""Upgrade"" ) == 0 ) { const char * ws_version = http_request_get_header ( info -> request, ""Sec-WebSocket-Version"" ) ; if ( ws_version == NULL || strcmp ( ws_version, ""13"" )!= 0 ) goto error ; const char * ws_upgrade = http_request_get_header ( info -> request, ""Sec-WebSocket-Upgrade"" ) ; if ( ws_upgrade == NULL || strcasecmp ( ws_upgrade, ""Upgrade"" ) == 0 ) { const char * ws_upgrade = http_request_get_header ( info -> request, ""Sec-WebSocket-Upgrade"" ) ; if ( ws_upgrade ==",0
181,"<S2SV_ModStart> nif = 0 ; if ( pcap_findalldevs ( & alldevs, errmsgbuf ) == - 1 ) { return - 1 ; } if ( alldevs == NULL ) { if ( rpcap_senderror ( pars -> sockctrl, ver, PCAP_ERR_NOREMOTEIF, ""No <S2SV_blank> interfaces <S2SV_blank> found! <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> libpcap/WinPcap <S2SV_blank> is <S2SV_blank> properly <S2SV_blank> installed"" "" <S2SV_blank> and <S2SV_blank> you <S2SV_blank> have <S2SV_blank> the <S2SV_blank> right <S2SV_blank> to <S2SV_blank> access <S2SV_blank> to <S2SV_blank> the <S2SV_blank> remote <S2SV_blank> device."", errbuf ) == - 1 ) { rpcapd_log ( LOGPRIO_ERROR, ""Send <S2SV_blank> to <S2SV_blank> client <S2SV_blank> failed: <S2SV_blank> %s"", errbuf ) ; return - 1 ; } return 0 ; } for ( d = alldevs ; d!= NULL ; d = d -> next ) { nif ++ <S2SV_ModStart> d -> description <S2SV_ModEnd> ) ; if <S2SV_ModStart> d -> name <S2SV_ModEnd> ) ; plen <S2SV_ModStart> struct rpcap_findalldevs_if ) ; if ( sock_bufferize ( NULL, sizeof ( struct rpcap_header ), NULL, & sendbufidx, RPCAP_NETBUF_SIZE, SOCK_STREAM",0
182,"<S2SV_ModStart> ""basename"" ) ; g_hash_table_remove ( problem_info, FILENAME_ABRT_VERSION ) ; gpointer gpkey = g_hash_table_lookup ( problem_info, FILENAME_CMDLINE ) ; if (! gpkey ) { char * cmdline = get_cmdline ( pid ) ; if ( cmdline ) { dd_save_text ( dd, FILENAME_CMDLINE, cmdline ) ; free ( cmdline ) ; } } char uid_str [ sizeof ( long ) * 3 + 2 ] ; sprintf ( uid_str, ""%lu"", ( long ) client_uid ) ; dd_save_text ( dd, FILENAME_UID, uid_str ) ; GHashTableIter iter ; gpointer gpvalue ; g_hash_table_iter_init ( & iter, problem_info ) ; while ( g_hash_table_iter_next ( & iter, & gpkey, & gpvalue ) ) { g_hash_table_iter_init ( & iter, & gpkey, & gpvalue ) ; g_hash_table_iter_init ( & iter, & gpkey, & gpvalue ) ; while ( g_hash_",0
183,"<S2SV_ModStart> -> columns - 2 <S2SV_ModEnd> ) ; x <S2SV_ModStart> x += 2 ) { for ( bit = 0 ; bit < 8 ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x + bit, index ) ; q ++ ; } p ++ ; } if ( ( image -> columns % 8 )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 8 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x + bit, index ) ; q ++ ; } p ++ ; } if ( ( image -> columns % 8 )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 8 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x + bit, index ) ; q ++ ; } p ++ ; } if ( ( image -> columns % 8 )",0
184,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
185,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, dds_info. pixelformat. rows, dds_info. pixelformat. cols ) ; if ( status == MagickFalse ) { ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; }",0
186,"<S2SV_ModStart> if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> if ( in_cksum ( bp, len <S2SV_ModEnd> ) )",0
187,"<S2SV_ModStart>! ptrace_has_cap ( task_cred ( task ) <S2SV_ModEnd> -> user_ns,",0
188,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
189,<S2SV_ModStart> ; } } if ( 0 == payload_bits_remaining ) { ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 0 ; ps_parse -> s_sei_params. i2_sei_parameters_present_flags = 0 ; ps_parse -> s_sei_params. i3_sei_parameters_present_flag = 0 ; ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 0 ; ps_parse -> s_sei_params. i2_sei_parameters_present_flags = 0 ; ps_parse -> s_sei_params. i2_sei_parameters_present_flags = 0 ; ps_parse -> s_sei_params. i3_sei_parameters_present_flag = 0 ; ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 0 ; ps_parse -> s_sei_params. i2_sei_parameters_present_flags = 0 ; ps_parse -> s_sei_params. i2_,0
190,<S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( *,0
191,"<S2SV_ModStart> * name, my_bool <S2SV_ModEnd> rep_quick ) { <S2SV_ModStart> ) ; } if (! ( param -> testflag & T_SILENT ) ) { DBUG_PRINT ( ""info"", ( ""repairing <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ) ; mysql_mutex_destroy ( mi_key_mutex_MI_SORT_INFO_mutex, & sort_info. mutex, MY_MUTEX_INIT_FAST ) ; mysql_cond_destroy ( mi_key_cond_MI_SORT_INFO_cond, & sort_info. cond, MY_MUTEX_INIT_FAST ) ; } <S2SV_ModStart> ; if (! ( param -> testflag & T_SILENT ) ) { DBUG_PRINT ( ""info"", ( ""repairing <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ) ; mysql_mutex_destroy ( mi_key_mutex_MI_SORT_INFO_mutex, & sort_info. mutex, MY_MUTEX_INIT_FAST ) ; mysql_cond",0
192,"<S2SV_ModStart> ) ; } if ( pcount > INT32_MAX / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", pcount, INT32_MAX / sizeof ( Pairs ) ) ) ) ;",0
193,"<S2SV_ModStart> val ) ; if (! <S2SV_ModStart>, val ) ) continue",0
194,"<S2SV_ModStart> ) ) { if ( clen < sizeof ( path. url ) ) { return bad_request ( c, 400, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( clen < sizeof ( path. url ) ) { return bad_request ( c, 400, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( clen < sizeof ( path. url ) ) { return bad_request ( c, 400, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( clen < sizeof ( path. url ) ) { return bad_request ( c, 400, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( clen < sizeof ( path. url ) ) { return bad_request ( c, 400, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( clen < sizeof ( path. url ) ) { return bad_request ( c, 400, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( clen < sizeof ( path. url ) ) { return bad_request ( c, 400, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( clen < sizeof ( path. url ) ) { return bad_request ( c, 400, __LINE__ ) ; }",0
195,"<S2SV_ModStart> vp9_fht16x16_c ( const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> 256 ] ; tran_low_t <S2SV_ModEnd> * outptr = <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16",0
196,"<S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( data, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( data, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( data, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( data, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( data, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( data, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( data, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( data, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( data, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( data, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( data, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( data, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( data, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( data, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( data, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( data, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( data",0
197,"<S2SV_ModStart> char * temp_filename <S2SV_ModEnd> ; if ( <S2SV_ModStart> node ) ; temp_filename = osi_calloc ( strlen ( filename ) + 5, sizeof ( char ) ) ; if (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } for ( const list_node_t * node = list_begin ( config -> sections ) ; node!= list_end ( config -> sections ) ; node = list_next ( node ) ) { const section_t * section = ( const section_t * ) list_node ( node ) ; fprintf ( fp, ""[%s]\\n"", section -> name ) ; for ( const entry_t * entry = ( const entry_",0
198,<S2SV_ModStart> ; ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_32BITS ( tptr <S2SV_ModEnd>,0
199,"<S2SV_ModStart> userData, target <S2SV_ModEnd> ) ; ctxt",0
200,"<S2SV_ModStart> ( ) ; size_t <S2SV_ModEnd> rv = Socket_print <S2SV_ModStart> ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %lu\\r\\n"" <S2SV_ModEnd> ""%s"" ""\\r\\n"" ""%s""",0
201,"<S2SV_ModStart> ) ; } if ( safe_chown ( dest, getuid ( ), getgid ( ) ) < 0 ) errExit ( ""safe_chown"" ) ; if ( safe_chmod ( dest, S_IRUSR | S_IWUSR ) < 0 ) errExit ( ""safe_chmod"" ) ; unlink ( src ) ; <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
202,<S2SV_ModStart>!= BFA_STATUS_OK ) { kfree ( fcstats ) ; <S2SV_ModStart> return NULL ; },1
203,"<S2SV_ModStart> -> x = F_MIN ( <S2SV_ModEnd> value -> x <S2SV_ModStart> -> x, 1.0f <S2SV_ModEnd> ) ; value <S2SV_ModStart> -> y = F_MIN ( <S2SV_ModEnd> value -> y <S2SV_ModStart> -> y, 1.0f <S2SV_ModEnd> ) ; value <S2SV_ModStart> -> z = F_MIN ( <S2SV_ModEnd> value -> z <S2SV_ModStart> -> z = 1.0f <S2SV_ModEnd> ; } <S2SV_null>",0
204,<S2SV_ModStart> -> sasl_mechanism ; if ( rec -> sasl_mechanism!= IRC_SASL_MECHANISM ) { g_free ( rec -> sasl_mechanism ) ; rec -> sasl_mechanism = NULL ; } <S2SV_ModStart> -> sasl_username ; if ( rec -> sasl_username!= NULL ) { g_free ( rec -> sasl_username ) ; rec -> sasl_username = NULL ; } <S2SV_ModStart> -> sasl_password ; if ( rec -> sasl_password!= NULL ) { g_free ( rec -> sasl_password ) ; rec -> sasl_password = NULL ; },0
205,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
206,"<S2SV_ModStart> i, tcount <S2SV_ModEnd> ; if ( <S2SV_ModStart> return ; } tcount = 0 ; for ( i = c, o = datao ; i ; -- i, o += 12 ) { size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteCanonEntry ) ) ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } n -> entries [ tcount ]. tag = exif_get_short ( buf + o, n -> order ) ; n -> entries [ tcount ]. format = exif_get_short ( buf + o + 4, n -> order ) ; n -> entries [ tcount ]. components = exif_get_long ( buf + o + 8, n -> order ) ; n -> entries [ tcount ]. components = exif_get_long ( buf + o + 8, n -> order ) ; } tcount ++ ; }",0
207,"<S2SV_ModStart> ""myisamchk"" ) ; if (! ( info = mi_open ( filename, ( param -> testflag & ( T_DESCRIPT | T_READONLY ) )? O_RDONLY : O_RDWR, HA_OPEN_FOR_REPAIR | HA_OPEN_IGNORE_IF_LOCKED ) ) ) { mi_check_print_error ( param, ""\'%s\' <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> a <S2SV_blank> correct <S2SV_blank> index <S2SV_blank> definition. <S2SV_blank> You <S2SV_blank> need <S2SV_blank> to <S2SV_blank> recreate <S2SV_blank> it <S2SV_blank> before <S2SV_blank> you <S2SV_blank> can <S2SV_blank> do <S2SV_blank> a <S2SV_blank> repair"", filename ) ; } <S2SV_ModStart> ; if (! ( info = mi_open ( filename, ( param -> testflag & ( T_DESCRIPT | T_READONLY ) ) ) ) ) { mi_check_print_error ( param, ""\'%s\' <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> a <S2SV_blank> correct <S2SV_blank> index <S2SV_blank> definition. <S2SV_blank> You <S2SV_blank> need <S2SV_blank> to <S2SV_blank> recreate <S2SV_blank> it <S2SV_blank> before <S2SV_blank> you <S2SV_blank> can <S2SV_blank> do <S2SV_blank> a <S2SV_blank> repair"", filename ) ; } if (",0
208,"<S2SV_ModStart> olen ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> long hex ; <S2SV_ModEnd> if (! <S2SV_ModStart> hex ) ; if (! <S2SV_ModEnd> Curl_convert_from_network ( handle <S2SV_ModStart>, 1 ) ) { free ( ns ) ; return NULL ; } string += 2 ; alloc -= 2 ; } ns [ strindex ++ ] = in ; string ++ ; } ns [ strindex ] = 0 ; if ( olen ) * olen = strindex ; if ( ns ) return ns <S2SV_ModEnd> ; return NULL <S2SV_ModStart> NULL ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
209,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
210,"<S2SV_ModStart> ; def -> session_setup = usm_session_init ; def -> handle_report = usm_handle_report ; def -> probe_engineid = usm_discover_engineid ; def -> post_probe_engineid = usm_create_user_from_session_hook ; if ( register_sec_mod ( USM_SEC_MODEL_NUMBER, ""usm"", def )!= SNMPERR_SUCCESS ) { SNMP_FREE ( def ) ; snmp_log ( LOG_ERR, ""could <S2SV_blank> not <S2SV_blank> register <S2SV_blank> usm <S2SV_blank> sec <S2SV_blank> mod\\n"" ) ; return ; } snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_POST_PREMIB_READ_CONFIG, init_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; def -> pdu_free_state_ref = usm_free_usmStateReference ; def -> pdu_free_state_ref = usm_free_usmStateReference <S2SV_ModEnd> ;",0
211,<S2SV_ModStart> NULL ; return <S2SV_ModEnd> match ( prog,0
212,<S2SV_ModStart> idx ] ; <S2SV_ModEnd> switch ( action <S2SV_ModStart> ) ; } <S2SV_ModEnd> return SNMP_ERR_NOERROR ;,0
213,<S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned,0
214,<S2SV_ModStart> timer ) ; spin_lock_irq ( & slave_active_lock ) ; <S2SV_ModStart> open_list ) { <S2SV_ModEnd> _snd_timer_stop ( slave <S2SV_ModStart> = NULL ; list_del_init ( & slave -> ack_list ) ;,0
215,<S2SV_ModStart> -> u1_dpb_commands_read ) { u4_temp <S2SV_ModEnd> = ih264d_read_mmco_commands ( <S2SV_ModStart> ps_dec ) ; if ( u4_temp < 0 ) { return ERROR_INV_SLICE_HDR_T ; } } else { u4_temp = ih264d_read_mmco_commands ( ps_dec ) ; if ( u4_temp < 0 ) { return ERROR_INV_SLICE_HDR_T ; } } else { u4_temp = ih264d_read_mmco_commands ( ps_dec ) ; if ( u4_temp < 0 ) { return ERROR_INV_SLICE_HDR_T ; } } else { u4_temp = ih264d_read_mmco_commands ( ps_dec ) ; if ( u4_temp < 0 ) { return ERROR_INV_SLICE_HDR_T ; } } else { u4_temp = ih264d_read_mmco_commands ( ps_dec ) ; if ( u4_temp < 0 ) { return ERROR_INV_SLI,0
216,"<S2SV_ModStart> decode ) { uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > info -> rasterSize || widthOverflow > 0 || heightOverflow > 0 ) { void * tmpRasterBits = reallocarray ( info -> rasterBits, newRasterSize ) ; <S2SV_ModStart> -> originalHeight ; <S2SV_ModEnd> if ( newRasterSize",0
217,"<S2SV_ModStart> -> validator -> passwd ) ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> passwd, 0, ""*()"" ) ; if ( size!= conn -> validator -> passwd. len ) return ret_error ; ret = init_filter ( ldap, props, conn ) ; if ( ret!= ret_ok ) return ret ; re = ldap_search_s ( ldap -> conn, props -> basedn. buf, LDAP_SCOPE_SUBTREE, props -> passwd. buf, attrs, 0, & message ) ; if ( re!= LDAP_SUCCESS ) { LOG_ERROR ( CHEROKEE_ERROR_VALIDATOR_LDAP_SEARCH, props -> passwd. buf ) ; return ret_error ; } TRACE ( ENTRIES, ""subtree <S2SV_blank> search <S2SV_blank> (%s): <S2SV_blank> done\\n"", props -> passwd. buf ) ; re = ldap_count_entries ( ldap -> conn, message ) ; if ( re!= 1 ) { ldap_msgfree ( message ) ; return ret_not_found ; } first = ldap_first_entry ( ldap -> conn, message ) ; if ( first == NULL ) { ldap_msgfree ( message )",0
218,<S2SV_ModStart> bus ] ; if ( bi == NULL ) return <S2SV_ModEnd> ; si =,0
219,"<S2SV_ModStart>, timeo ) <S2SV_ModEnd> ; if (",1
220,<S2SV_ModStart> += 9 ; ( <S2SV_ModStart> isspace ( * ( s + 9 ) <S2SV_ModEnd> ) ; s <S2SV_ModStart> &&! isspace ( * ( s + t ) <S2SV_ModEnd> ) ) t,0
221,"<S2SV_ModStart> = select ( 1, & uipc_main. read_set, NULL, NULL, NULL ) ; if ( result == 0 ) { BTIF_TRACE_EVENT ( ""select <S2SV_blank> timeout"" ) ; continue ; } else if ( result < 0 ) { BTIF_TRACE_EVENT ( ""select <S2SV_blank> failed <S2SV_blank> %s"", strerror ( errno ) ) ; continue ; } UIPC_LOCK ( ) ; uipc_check_interrupt_locked ( ) ; uipc_check_task_flags_locked ( ) ; uipc_check_fd_locked ( UIPC_CH_ID_AV_AUDIO ) ; for ( ch_id = 0 ; ch_id < UIPC_CH_NUM ; ch_id ++ ) { if ( ch_id!= UIPC_CH_ID_AV_AUDIO ) uipc_check_fd_locked ( ch_id ) ; } UIPC_UNLOCK ( ) ; } uipc_check_task_flags_locked ( ) ; uipc_check_fd_locked ( UIPC_CH_ID_AV_AUDIO ) ;",0
222,<S2SV_ModStart> msixcap msixcap ; if <S2SV_ModEnd> ( msgnum >= <S2SV_ModStart> msix_table_init ( dev <S2SV_ModEnd> ) ; pci_populate_msixcap,0
223,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",1
224,<S2SV_ModStart> == NULL ) return KRB5KDC_ERR_PREAUTH_FAILED <S2SV_ModEnd> ; status = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> X509_NAME_free ( is,0
225,<S2SV_ModStart> <S2SV_null> <S2SV_null> static MV_REFERENCE_FRAME <S2SV_ModEnd> select_tx_mode ( const <S2SV_ModStart> cpi ) { if ( cpi -> common. current_video_frame == 0 ) { return TX_MODE_SELECT ; } else { if ( cpi -> sf. tx_size_search_method == USE_LARGESTALL ) { return ALLOW_32X32 ; } else if ( cpi -> sf. tx_size_search_method == USE_FULL_RD ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ TX_MODE_SELECT ]? ALLOW_32X32 : TX_MODE_SELECT ; } else { unsigned int total = 0 ; int i ; for ( i = 0 ; i < TX_SIZES ; ++ i ) total += cpi -> tx_stepdown_count [ i ] ; if ( total ) { const double fraction = ( double ) cpi -> tx,0
226,<S2SV_ModStart> ; si_symb = strdup ( <S2SV_ModStart> ]. si_symb ) <S2SV_ModStart> ; si_symb = strdup ( <S2SV_ModStart> ]. si_symb ) <S2SV_ModStart> ; si_symb = strdup ( <S2SV_ModStart> ]. si_symb ) <S2SV_ModStart> ; si_symb = strdup ( <S2SV_ModStart> ]. si_symb ) <S2SV_ModStart> ; si_symb = strdup ( <S2SV_ModStart> ]. si_symb ) <S2SV_ModStart> ; si_symb = strdup ( <S2SV_ModStart> ]. si_symb ) <S2SV_ModStart> ; si_symb = strdup ( <S2SV_ModStart> ]. si_symb ) <S2SV_ModStart> ; si_symb = strdup ( <S2SV_ModStart> ]. si_symb ) <S2SV_ModStart> ; si_symb = strdup ( <S2SV_ModStart> ]. si_symb ) <S2SV_ModStart> ; si_symb = strdup ( <S2SV_ModStart> ]. si_symb ) <S2SV_ModStart> ; si_symb = strdup ( <S2SV_ModStart> ]. si_symb ) <S2SV_ModStart> ; si_symb = strdup ( <S2SV_ModStart> ]. si_symb ) <S2SV_ModStart> ; si_symb = strdup ( <S2SV_ModStart> ]. si_symb ) <S2SV_ModStart> ; si_symb = strdup ( <S2SV_ModStart> ]. si_symb ),0
227,<S2SV_ModStart> ( buf1 -> tile_size <S2SV_ModEnd> < buf2 -> <S2SV_ModStart> < buf2 -> tile_size <S2SV_ModEnd> ) { return <S2SV_ModStart> ( buf1 -> tile_size <S2SV_ModEnd> == buf2 -> <S2SV_ModStart> == buf2 -> tile_size <S2SV_ModEnd> ) { return,0
228,"<S2SV_ModStart> ; size_t sz <S2SV_ModEnd> ; if ( <S2SV_ModStart> + size ; sz = min_t ( size_t, <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ) + size, PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) <S2SV_ModStart> ; if (! info ) { info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) { info = vmalloc ( sz ) ; if (! info ) return NULL ; } memset ( info, 0, sizeof ( * info ) ) ; info -> size = size ; } else { info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; } if (! info ) { info = vmalloc ( sz ) ; if (! info ) return NULL ; } memset ( info, 0, sizeof ( * info ) ) ; info -> size = size ; return info ; }",0
229,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,1
230,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs,",0
231,"<S2SV_ModStart> ; r = sd_event_add ( b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r < 0 ) { log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } r = sd_event_add_io ( b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r < 0 ) { log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } log_info ( ""Watching <S2SV_blank> system <S2SV_blank> buttons <S2SV_blank> on <S2SV_blank> /dev/input/%s <S2SV_blank> (%s)"", b -> name, name ) ; return 0 ; fail : b -> fd = safe_close ( b -> fd ) ; return r <S2SV_ModEnd> ; } <S2SV_null>",0
232,<S2SV_ModStart> ; if (! errors ) { errors = 0 ; } <S2SV_ModEnd> return TEST_ERR_MAJOR_BAD ; <S2SV_ModStart> return TEST_ERR_MAJOR_BAD ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
233,<S2SV_ModStart> -> lun ) sas_eh_finish_cmd <S2SV_ModEnd> ( cmd ),1
234,"<S2SV_ModStart>, end_col_offset ; bool is_function ; <S2SV_ModStart> 2 ; } is_function = TYPE ( CHILD ( n, name_i + 3 ) ) == FUNCTION && TYPE ( CHILD ( n, name_i + 4 ) ) == FUNCTION && TYPE ( CHILD ( n, name_i + 5 ) ) == FUNCTION && TYPE ( CHILD ( n, name_i + 6 ) ) == FUNCTION && TYPE ( CHILD ( n, name_i + 7 ) ) == FUNCTION && TYPE ( CHILD ( n, name_i + 8 ) ) == FUNCTION && TYPE ( CHILD ( n, name_i + 9 ) ) == FUNCTION && TYPE ( CHILD ( n, name_i + 10 ) ) == FUNCTION && TYPE ( CHILD ( n, name_i + 11 ) ) == FUNCTION && TYPE ( CHILD ( n, name_i + 12 ) ) == FUNCTION && TYPE ( CHILD ( n, name_i + 13 ) ) == FUNCTION && TYPE ( CHILD ( n, name_i + 14 ) ) == FUNCTION && TYPE ( CHILD ( n, name_i + 15 ) ) == FUNCTION && TYPE ( CHILD ( n, name_i + 14",0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return NULL ; }",0
237,,1
238,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
239,"<S2SV_ModStart> if ( position >= <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> headend, 1, position - psf -> headend, psf ) ; psf -> headindex = position ; break ; case SEEK_CUR : if ( psf -> headindex + position < 0 ) break ; if ( psf -> headindex >= SIGNED_SIZEOF ( psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; if ( psf -> headindex + position <= psf -> headend ) { psf -> headindex += position ; break ; } ; if ( psf -> headindex + position > <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> headend, 1, position - ( psf -> headend - psf -> headindex ), psf ) ; psf -> headindex = <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> headend <S2SV_ModEnd> ; break ;",0
240,<S2SV_ModStart> u4_ofst ) ; if ( ( ps_cabac -> au1_ctxt_models == NULL ) || ( ps_cabac -> au1_ctxt_models [ 0 ] == 0 ) || ( ps_cabac -> au1_ctxt_models [ 1 ] == 0 ) || ( ps_cabac -> au1_ctxt_models [ 2 ] == 0 ) || ( ps_cabac -> au1_ctxt_models [ 3 ] == 0 ) || ( ps_cabac -> au1_ctxt_models [ 2 ] == 0 ) || ( ps_cabac -> au1_ctxt_models [ 3 ] == 0 ) || ( ps_cabac -> au1_ctxt_models [ 2 ] == 0 ) || ( ps_cabac -> au1_ctxt_models [ 2 ] == 0 ) || ( ps_cabac -> au1_ctxt_models [ 3 ] == 0 ) || ( ps_cabac -> au1_ctxt_models [ 2 ] == 0 ) || ( ps_cabac -> au1_ctxt_models [ 3 ] == 0 ) || ( ps_cabac ->,0
241,<S2SV_ModStart> ; } } if ( n_brothers + n_children > 0 ) { MD_CONTAINER * c = & ctx -> containers [ n_brothers ] ; while ( c -> ch!= _T ( '\\0' ) && c -> ch!= _T ( '\\0' ) && c -> ch!= _T ( '\\0' ) && c -> ch!= _T ( '\\0' ) && c -> ch!= _T ( '\\0' ) && c -> ch!= _T ( '\\0' ) && c -> ch!= _T ( '\\0' ) && c -> ch!= _T ( '\\0' ) && c -> ch!= _T ( '\\0' ) && c -> ch!= _T ( '\\0' ) && c -> ch!= _T ( '\\0' ) && c -> ch!= _T ( '\\0' ) && c -> ch!= _T ( '\\0' ) && c -> ch!= _T ( '\\0' ) && c -> ch!= _T ( '\\0' ) && c -> ch!= _T ( '\\0' ) && c -> ch!= _T ( '\\0' ) && c -> ch!= _T ( '\\0' ) ) {,0
242,"<S2SV_ModStart> perf_event_context * ctx <S2SV_ModEnd> ; struct task_struct <S2SV_ModStart> -> ctx ; raw_spin_lock_irq ( & ctx -> lock ) ; ctx = perf_event_ctx_lock ( event ) ; if (! ctx ) { raw_spin_unlock_irq ( & ctx -> lock ) ; return ; } task = ctx -> task ; if (! task ) { cpu_function_call ( event -> cpu, __perf_event_disable, event ) ; return ; } retry : if (! task_function_call ( task, __perf_event_disable, event ) ) return ; raw_spin_lock_irq ( & ctx -> lock ) ; if ( event -> state == PERF_EVENT_STATE_ACTIVE ) { raw_spin_unlock_irq ( & ctx -> lock ) ; task = ctx -> task ; goto retry ; } if ( event -> state == PERF_EVENT_STATE_INACTIVE ) { update_group_times ( event ) ; <S2SV_ModStart> = PERF_EVENT_STATE_OFF ; perf_event_ctx_unlock ( event ) ;",0
243,<S2SV_ModStart> -> post_proc_flag = <S2SV_ModEnd> ctx -> postproc_cfg <S2SV_ModStart>. noise_level ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
244,"<S2SV_ModStart> ; ND_TCHECK2 ( tptr <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> ; ND_TCHECK2 ( tptr <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> ; ND_TCHECK2 ( tptr <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> ; ND_TCHECK2 ( tptr <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> ; ND_TCHECK2 ( tptr <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> ; ND_TCHECK2 ( tptr <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> ; ND_TCHECK2 ( tptr <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> ; ND_TCHECK2 ( tptr <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> ; ND_TCHECK2 ( tptr <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> ; ND_TCHECK2 ( tptr <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> ; ND_TCHECK2 ( tptr <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> ; ND_TCHECK2 ( tptr <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> ; ND_TCHECK2 ( tptr <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> ; ND_TCHECK2 ( tptr <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> ; ND_TCHECK2 ( tptr <S2SV_ModEnd>, sizeof (",0
245,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> int64_t store_reg [ <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vpx_usec_timer_start ( & <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,0
246,"<S2SV_ModStart> stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; fs_logger2 ( ""clone"", dest <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> 0 ) ; } pid_t child = fork ( ) ; if ( child < 0 ) errExit ( ""fork"" ) ; if ( child == 0 ) { drop_privs ( 0 ) ; int rv = copy_file ( src, dest ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } _exit ( 0 ) ; } waitpid ( child, NULL, 0 ) ; pid_t child = fork ( ) ; if ( child == 0 ) { drop_privs ( 0 ) ; int rv = copy_file ( src, dest ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } _exit ( 0 ) ; } wait",0
247,<S2SV_ModStart> ; sfb = 0 <S2SV_ModEnd> ; sfb = <S2SV_ModStart> ; sfb = 0 <S2SV_ModEnd> ; sfb = <S2SV_ModStart> ; sfb = 0 <S2SV_ModEnd> ; sfb = <S2SV_ModStart> ; sfb = 0 <S2SV_ModEnd> ; sfb = <S2SV_ModStart> ; sfb = 0 <S2SV_ModEnd> ; sfb = <S2SV_ModStart> ; sfb = 0 <S2SV_ModEnd> ; sfb = <S2SV_ModStart> ; sfb = 0 <S2SV_ModEnd> ; sfb = <S2SV_ModStart> ; sfb = 0 <S2SV_ModEnd> ; sfb = <S2SV_ModStart> ; sfb = 0 <S2SV_ModEnd> ; sfb = <S2SV_ModStart> ; sfb = 0 <S2SV_ModEnd> ; sfb = <S2SV_ModStart> ; sfb = 0 <S2SV_ModEnd> ; sfb = <S2SV_ModStart> ; sfb = 0 <S2SV_ModEnd> ; sfb = <S2SV_ModStart> ; sfb = 0 <S2SV_ModEnd> ; sfb = <S2SV_ModStart> ; sfb = 0 <S2SV_ModEnd> ; sfb = <S2SV_ModStart> ; sfb = 0 <S2SV_ModEnd> ; sfb = <S2SV_ModStart> ; sfb = 0 <S2SV_ModEnd> ; sfb = <S2SV_ModStart> ; sfb = 0 <S2SV_ModEnd> ; sfb = <S2SV_ModStart> ; sfb = 0 <S2SV_ModEnd> ; sfb = <S2SV_ModStart> ; sfb = 0 <S2SV_ModEnd> ; sfb = <S2SV_ModStart> ; sfb = 0 <S2SV_ModEnd> ; sfb = <S2SV_ModStart> ; sfb = 0 <S2SV_ModEnd> ; sfb = <S2SV_ModStart> ; sfb = 0 <S2SV_ModEnd> ; sfb = <S2SV_ModStart> ; sfb = 0 <S2SV_ModEnd> ; sfb = <S2SV_ModStart>,0
248,"<S2SV_ModStart> lua_module ) ; <S2SV_ModEnd> lua_authz_provider_spec * prov_spec <S2SV_ModStart> prov_spec -> args && prov_spec -> args -> nelts ) { int i ; if (! lua_checkstack ( L, prov_spec -> args -> nelts ) ) { ap_log_rerror ( APLOG_MARK, APLOG_ERR, 0, r, APLOGNO ( 02318 ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> \'%s\' <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> function)"", prov_spec -> function_name, prov_spec -> file_name ) ; ap_lua_release_state ( L, spec, r ) ; return AUTHZ_GENERAL_ERROR ; } } else { int result ; int nargs = 0 ; spec = create_vm_spec ( & pool, r, cfg, server_cfg, prov_spec -> file_name, NULL, 0, prov_spec -> function_name, ""authz <S2SV_blank> provider"" ) ; L = ap_lua_get_lua_state ( pool, spec, r ) ; if ( L == NULL ) { ap",0
249,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> rows, image -> cols ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
250,<S2SV_ModStart> (! proto_end || proto_end + 3 > url,0
251,"<S2SV_ModStart> end = path ; if ( end >= path_len ) return - FDT_ERR_NOSPACE <S2SV_ModStart> - FDT_ERR_BADSTRUCTURE ; if ( end >= path + path_len ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart>, & len ) ; if (! name ) return - FDT_ERR_BADSTRUCTURE ; if ( end >= path + path_len ) return - FDT_ERR_NOSPACE ; strcpy ( end, name ) ; end += len ; stack [ depth ] = want ; if ( want == 1 ) stop_at = offset ; if ( str_in_list ( path, inc, inc_count ) ) want = 2 ; else if ( end!= path + 1 ) * end ++ = '/' ; strcpy ( end, name ) ; end += len ; stack [ depth ] = want ; if ( want == 1 ) stop_at = offset ; if ( str_in_list ( path, inc, inc_count ) ) want = 2 ; else if ( str_in_list ( path, inc, inc_count ) ) want = 2 ; else if ( str_in_list ( path, inc, inc_count",0
252,"<S2SV_ModStart> ) ; } if ( server. bgsavechildpid == - 1 && server. bgrewritechildpid == - 1 ) { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ), zmalloc_used_memory ( ) ) ; }",0
253,<S2SV_ModStart> channel ) ; <S2SV_ModEnd> set_description ( client,1
254,"<S2SV_ModStart> ( j = <S2SV_ModEnd> book -> dim <S2SV_ModStart> book -> dim - 1 ; j >= 0 ; j -- ) a [ i ++ ] += v [ j ] ; } } for ( i = 0 ; i < n ; ) { if ( decode_map ( book, b, v, point ) ) return - 1 ; for ( j = 0 ; j < book -> dim ; j ++ ) a [ i ++ ] += v [ j ] ; } for ( i = 0 ; i < n ; i ++ ) { if ( decode_map ( book, b, v, point ) ) return - 1 ; for ( j = 0 ; j < book -> dim - 1 ; j ++ ) a [ i ++ ] += v [ j ] ; } for ( i = 0 ; i < n ; i ++ ) { if ( decode_map ( book, b, v, point ) ) return - 1 ; for ( j = 0 ; j < book -> dim - 1 ; j ++ ) a [ i ++ ] += v [ j ] ; } } return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
255,<S2SV_ModStart> action ) { if ( r < 0.0 ) r = 0.0 ; if ( r > 1.0 ) r = 1.0 ; if ( r > 1.0 ) r = 1.0 ; if ( r > 1.0 ) r = 1.0 ; if ( r > 1.0 ) r = 1.0 ; if ( r > 1.0 ) r = 1.0 ; if ( r > 1.0 ) r = 1.0 ; if ( r > 1.0 ) r = 1.0 ; if ( r > 1.0 ) r = 1.0 ; if ( r > 1.0 ) r = 1.0 ; if ( r > 1.0 ) r = 1.0 ; if ( r > 1.0 ) r = 1.0 ; if ( r > 1.0 ) r = 1.0 ; if ( r > 1.0 ) r = 1.0 ; if ( r > 1.0 ) r = 1.0 ; if ( r > 1.0 ) r = 1.0 ; if ( r > 1.0 ) r = 1.0 ; if ( r > 1.0 ) r = 1.,0
256,<S2SV_ModStart> this_h ) { int i ; <S2SV_ModStart> 16 ) { for ( i = 0 ; i < 2 ; i ++ ) { sf -> predict [ i ] [ i ] [ 0 ] = vp9_convolve8_copy ; sf -> predict [ i ] [ i ] [ 1 ] = vp9_convolve8_avg ; sf -> predict [ i ] [ 0 ] [ 1 ] = vp9_convolve8_avg_vert ; sf -> predict [ i ] [ 1 ] [ 0 ] = vp9_convolve8_horiz ; sf -> predict [ i ] [ 1 ] [ 1 ] = vp9_convolve8_avg_horiz ; } <S2SV_ModStart> } else { for ( i = 0 ; i < 2 ; i ++ ) { sf -> predict [ i ] [ i ] [ 0 ] = vp9_convolve8_copy ; sf -> predict [ i ] [ 0 ] [ 1 ] = vp9_convolve8_avg ; sf -> predict [ i ] [ 1 ] [ 0 ] = vp9_convolve8_horiz ; sf -> predict [ i ] [ 1 ] [ 0 ] = vp9_convolve8_avg_horiz ;,0
257,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
258,<S2SV_ModStart> ; if ( msg. msg_iov. iov_base <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; if ( msg. msg_iov. iov_len <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; if ( msg. msg_iov. iov_base <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; if ( msg. msg_iov. iov_len <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; if ( msg. msg_iov. iov_base <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; if ( msg. msg_iov. iov_len <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; if ( msg. msg_iov. iov_len <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; if ( msg. msg_iov. iov_len <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; if ( msg. msg_iov. iov_len <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; if ( msg. msg_iov. iov_len <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; if ( msg. msg_iov. iov_len <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; if ( msg. msg_iov. iov_len <S2SV_ModEnd> ) { struct <S2SV_ModStart> ; if ( msg. msg_iov. iov_len <S2SV_ModEnd> ) { struct,0
259,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> sctp_v6_protosw_exit ( ) <S2SV_ModStart> ( ) ; unregister_pernet_subsys ( & sctp_net_ops ) ;,0
260,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void show_psnr (,0
261,"<S2SV_ModStart> name ) { if ( ( c = strrchr ( name, '.' ) ) && ( strncmp ( c, "".pdf"", 4 ) == 0 ) ) * c = '\\0' ; strcat ( name, "".summary"" ) ; if (! ( dst = fopen ( name, ""w"" ) ) ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", name ) ; return ; } } dst_name = malloc ( strlen ( name ) * 2 + 16 ) ; sprintf ( dst_name, ""%s/%s"", name, name ) ; if ( ( c = strrchr ( dst_name, '.' ) ) && ( strncmp ( c, "".pdf"", 4 ) == 0 ) ) * c = '\\0' ; strcat ( dst_name, "".summary"" ) ; if (! ( dst = fopen ( dst_name, ""w"" ) ) ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", dst_name ) ; return ; } } if (! ( dst = fopen ( dst_name, ""w"" ) ) )",0
262,"<S2SV_ModStart> ; TRACE_DEBUG ( ""CIDER=0x%04x"" <S2SV_ModEnd> PRIX16 ""\\r\\n"", <S2SV_ModStart> ; TRACE_DEBUG ( ""PHY1ILR=0x%04x"" <S2SV_ModEnd> PRIX16 ""\\r\\n"", <S2SV_ModStart> ; TRACE_DEBUG ( ""PHY1IHR=0x%04x"" <S2SV_ModEnd> PRIX16 ""\\r\\n"", <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ERROR_OUT_OF_MEMORY ; } memset ( context -> txBuffer, 0, ETH_MAX_FRAME_SIZE ) ; memset ( context -> rxBuffer, 0, ETH_MAX_FRAME_SIZE ) ; <S2SV_ModStart> ( interface, KSZ8851_MARH <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface -> <S2SV_ModEnd> macAddr. w <S2SV_ModStart> ( interface -> <S2SV_ModEnd> macAddr. w <S2SV_ModStart> ( interface -> <S2SV_ModEnd> macAddr. w <S2SV_ModStart> ( interface -> <S2SV_ModEnd> macAddr. w <S2SV_ModStart> ( interface -> <S2SV_ModEnd> macAddr. w <S2SV_ModStart> ( interface -> <S2SV_ModEnd> macAddr. w <S2SV_ModStart> ( interface -> <S2SV_ModEnd> macAddr. w <S2SV_ModStart> ( interface -> <S2SV_ModEnd> macAddr. w <S2SV_ModStart> ( interface -> <S2SV_ModEnd>",0
263,"<S2SV_ModStart> skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
264,"<S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; <S2SV_ModEnd> fit_check_format ( fit <S2SV_ModStart>, IMAGE_SIZE_INVAL ) ; <S2SV_ModEnd> bootstage_mark ( bootstage_id <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; if ( fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; } if ( fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; } if ( fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ;",0
265,"<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> uinput_fd, UI_DEV_DESTROY )",1
266,<S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> = rc -> avg_frame_bandwidth <S2SV_ModEnd> ; # endif,1
267,"<S2SV_ModStart> i ], ""-h"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""-h"" ) ; argv [ 0 ] = path ; setuid ( 0 ) ; setgid ( 0 ) ; execv ( path, ( char * const * ) argv ) ; perror ( path ) ; return 1 ; } for ( i = 1 ; i < argc ; i ++ ) if ( strcmp ( argv [ i ], ""-h"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""-h"" ) ; argv [ i ] = path ; setuid ( 0 ) ; setgid ( 0 ) ; execv ( path, ( char * const * ) argv ) ; perror ( path ) ; return 1 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
268,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
269,<S2SV_ModStart> ib ] ; dequant_ptr = d -> dequant ; coeff_ptr = b -> coeff ; qcoeff_ptr = b -> qcoeff ; dqcoeff_ptr = d -> dqcoeff ; i0 =! type ; eob = * d -> eob ; rdmult = mb -> rdmult * err_mult ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ; rddiv = mb -> rddiv ; best_mask [ 0 ] = best_mask [ 1 ] = 0 ; tokens [ eob ] [ 0 ]. token = DCT_EOB_TOKEN ; tokens [ eob ] [ 0 ]. error = 0 ; tokens [ eob ] [ 0 ]. qc = 0 ; tokens [ eob ] [ 0 ]. next = 16 ; tokens [ eob ] [ 0 ]. error = 0 ; tokens [ eob ] [ 0 ]. next = 16 ; tokens [ eob ] [ 0 ]. token = DCT_EOB_TOKEN ; tokens [ eob ] [ 1 ]. token = DCT_EOB_TOKEN ;,0
270,"<S2SV_ModStart> FN_REFLEN ] ; # ifdef __WIN__ strncat ( buff, ""/"", sizeof ( buff ) - 1 ) ; # else strncat ( buff, FN_DIRSEP, sizeof ( buff ) - 1 ) ; # endif buff [ sizeof ( buff ) - 1 ] = 0 ; my_free ( opt_basedir ) ; opt_basedir = my_strdup ( buff, MYF ( MY_FAE ) ) ; } } if (! opt_no_defaults && ( error = get_default_values ( ) ) ) ) { error = - 1 ; goto exit ; } strcpy ( operation, """" ) ; if ( ( error = check_options ( argc, argv, operation ) ) ) { goto exit ; } if ( opt_verbose ) { printf ( ""# <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> basedir <S2SV_blank> = <S2SV_blank> %s\\n"", opt_basedir ) ; printf ( ""# <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> datadir <S2SV_blank> = <S2SV_blank> %s\\n"", opt_datadir ) ; printf ( ""# <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> datadir <S2SV_blank> = <S2SV_blank> %s\\n"", opt_datadir ) ; printf ( ""# <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> plugin_ini <S2SV_blank> = <S2SV_blank>",0
271,<S2SV_ModStart> decrypt_cb ) { ptrdiff_t <S2SV_ModEnd> n = ( <S2SV_ModStart> n = ( ptrdiff_t <S2SV_ModEnd> ) ( data_end,0
272,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
273,"<S2SV_ModStart> * returnrate, RATE_DISTORTION * returndistortion, RATE_DISTORTION <S2SV_ModEnd> * returnintra ) <S2SV_ModStart> # if CONFIG_TEMPORAL_DENOISING <S2SV_ModEnd> int zero_mv_sse = <S2SV_ModStart> int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # else unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # endif # endif mode_mv = mode_mv_sb [ sign_bias ] ; best_ref_mv. as_int = 0 ; best_mode. rd = INT_MAX ; best_mode. yrd = INT_MAX ; best_mode. intra_rd = INT_MAX ; # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # else unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX ;",0
274,<S2SV_ModStart> goto error ; if ( <S2SV_ModEnd> statbuf. st_size <S2SV_ModStart> statbuf. st_size < 0 ) goto error ; h -> hdr -> magic [ 0 ] = '\\0' ; h -> hdr -> magic [ 1 ] = '\\0' ; h -> hdr -> csum [ 0 ] = '\\0' ; h -> hdr -> csum [ 1 ] = '\\0' ; h -> hdr -> csum [ 2 ] = '\\0' ; h -> hdr -> csum [ 3 ] = '\\0' ; h -> hdr -> csum [ 4 ] = '\\0' ; h -> hdr -> csum [ 5 ] = '\\0' ; h -> hdr -> csum [ 6 ] = '\\0' ; h -> hdr -> csum [ 7 ] = '\\0' ; h -> hdr -> csum [ 8 ] = '\\0' ; h -> hdr -> csum [ 9 ] = '\\0' ; h -> hdr -> csum [ 10 ] = '\\0' ; h -> hdr -> csum [ 11 ] = '\\0' ; h -> hdr -> csum [ 12 ] = '\\0' ; h -> hdr -> csum [ 13 ] = '\\0' ; h -> hdr -> c,0
275,"<S2SV_ModStart> ; UWORD8 u1_profile_idc = 0, u1_level_idc = 0, u1_seq_parameter_set_id = 0 <S2SV_ModEnd> ; UWORD16 i2_max_frm_num <S2SV_ModStart> UWORD32 u4_num_reorder_frames ; u1_level_idc = ih264d_get_bits_h264 ( ps_bitstrm, 8 ) ; COPYTHECONTEXT ( ""SPS: <S2SV_blank> level_idc"", u1_level_idc ) ; uc_constraint_set0_flag = ih264d_get_bit_h264 ( ps_bitstrm, 0 ) ; COPYTHECONTEXT ( ""SPS: <S2SV_blank> constraint_set1_flag"", uc_constraint_set1_flag ) ; u1_frm = ih264d_get_bits_h264 ( ps_bitstrm, 1 ) ; COPYTHECONTEXT ( ""SPS: <S2SV_blank> frm"", u1_frm ) ; u1_frm = ih264d_get_bit_h264 ( ps_bitstrm, 2 ) ; COPYTHECONTEXT ( ""SPS: <S2SV_blank>",0
276,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * params = ( vpx_svc_parameters_t * ) <S2SV_ModStart> cpi -> svc -> <S2SV_ModEnd> spatial_layer_id = params <S2SV_ModStart> ; cpi -> svc -> <S2SV_ModEnd> temporal_layer_id = params <S2SV_ModStart> temporal_layer ; cpi -> svc -> <S2SV_ModEnd> lst_fb_idx = params <S2SV_ModStart> lst_fb_idx = params -> lst_fb_idx ; cpi -> svc -> <S2SV_ModEnd> gld_fb_idx = params <S2SV_ModStart> gld_fb_idx = params -> gld_fb_idx ; cpi -> svc -> alt_fb_idx = params -> alt_fb_idx ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = params -> min_quantizer ; set_encoder_config ( & ctx -> oxcf, & ctx -> cfg, & ctx -> extra_cfg ) ; vp9_change_config ( ctx -> cpi, &",0
277,"<S2SV_ModStart> out ) { uint32 <S2SV_ModEnd> bitspersample, samplesperpixel <S2SV_ModStart>, samplesperpixel ; uint32 <S2SV_ModEnd> input_compression, input_photometric <S2SV_ModStart> ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Can\'t <S2SV_blank> copy/convert <S2SV_blank> subsampled <S2SV_blank> image.\\n"" <S2SV_ModEnd>, TIFFFileName ( <S2SV_ModStart> ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Can\'t <S2SV_blank> copy/convert <S2SV_blank> subsampled <S2SV_blank> image.\\n"" <S2SV_ModEnd>, TIFFFileName ( <S2SV_ModStart> ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Can\'t <S2SV_blank> copy/convert <S2SV_blank> subsampled <S2SV_blank> image.\\n"" <S2SV_ModEnd>, TIFFFileName ( <S2SV_ModStart> ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Can\'t <S2SV_blank> copy/convert <S2SV_blank> subsampled <S2SV_blank> image.\\n"" <S2SV_ModEnd>, TIFFFileName ( <S2SV_ModStart> ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Can\'t <S2SV_blank> copy/convert <S2SV_blank> subsampled <S2SV_blank> image.\\n"" <S2SV_ModEnd>, TIFFFileName ( <S2SV_ModStart> ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Can\'t <S2SV_blank> copy/convert <S2SV_blank> subsampled <S2SV_blank> image.\\n"" <S2SV_ModEnd>, TIFFFileName ( <S2SV_ModStart> ( stderr, ""tiffcp: <S2SV_blank> %s",0
278,"<S2SV_ModStart> a ) { char * pn ; char c ; int r ; struct stat st ; pn = a -> name ; if ( archive_strlen ( & ( a -> path_safe ) ) > 0 ) { char * p = a -> path_safe. s ; while ( * pn!= '\\0' && ( * p == * pn ) ) ++ p, ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '\\0' && ( * pn!= '/' ) ) ) ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '/' ) ) ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '/' ) ) ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '/' ) ) ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '/' ) ) ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '\\0' && (",0
279,"<S2SV_ModStart> unsigned int link_count = 0 <S2SV_ModStart> ibh ) { bh = udf_read_ptagged ( inode -> i_sb, & iinfo -> i_location, 0, & ident ) ; if (! bh ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!bh\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if ( fe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { struct buffer_head * ibh ; ibh = udf_read_ptagged ( inode -> i_sb, & iinfo -> i_location, 1, & ident ) ; if ( ibh ) { struct buffer_head * nbh = ibh -> b_data ; loc = lelb_to_cpu ( ie -> indirectICB. extLocation ) ; if ( ie -> indirectICB. extLength && ( nbh = udf_read_ptagged ( inode -> i_sb, & loc, 0, & ident ) ) ) { if ( ident == TAG_IDENT_FE || ident == TAG_IDENT_E",0
280,"<S2SV_ModStart> tx_size_uv = get_uv_tx_size ( mbmi ) ; const int filter_level = get_filter_level ( lfi_n, mbmi ) ; uint64_t * const left_y = & lfm -> left_y [ tx_size_y ] ; uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const left_uv = & lfm -> left_uv [ tx_size_uv ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_y = & lfm -> int_4x4_y ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv ; int i ; if (! filter_level ) { return ; } else { const int w = num_8x8_blocks_wide_lookup [ block_size ] ; const int h = num_8x8_blocks_high_lookup [ block_size ] ; int index = shift",0
281,"<S2SV_ModStart> mq_ops ) { spin_lock_irqsave_nested <S2SV_ModEnd> ( & fq <S2SV_ModStart> mq_flush_lock, flags, SINGLE_DEPTH_NESTING",0
282,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
283,"<S2SV_ModStart> ) ) { if (! <S2SV_ModEnd> stok ( option <S2SV_ModStart> & ovalue ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; } <S2SV_ModEnd> ovalue = strim",0
284,"<S2SV_ModStart> sizeof ( effect_param_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } effect_param_t * p = ( effect_param_t * ) pCmdData ; if ( * ( int * ) pReplyData!= 0 ) break ; if ( effect -> state!= EFFECT_STATE_ACTIVE ) * ( int * ) pReplyData = effect_set_state ( effect, EFFECT_STATE_CONFIG ) ; } break ; case EFFECT_CMD_SET_STATE : { if ( pCmdData == NULL || cmdSize < ( int ) sizeof ( effect_state_t ) || pReplyData == NULL || * replySize < sizeof ( effect_state_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_SET_STATE <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } * ( int * ) pReplyData = effect_set_state ( effect, EFFECT_STATE_CONFIG",0
285,"<S2SV_ModStart> ; if ( k5_memcmp <S2SV_ModEnd> ( code, <S2SV_ModStart> ; if ( k5_memcmp <S2SV_ModEnd> ( code, <S2SV_ModStart> ; if ( k5_memcmp <S2SV_ModEnd> ( code, <S2SV_ModStart> ; if ( k5_memcmp <S2SV_ModEnd> ( code, <S2SV_ModStart> ; if ( k5_memcmp <S2SV_ModEnd> ( code, <S2SV_ModStart> ; if ( k5_memcmp <S2SV_ModEnd> ( code, <S2SV_ModStart> ; if ( k5_memcmp <S2SV_ModEnd> ( code, <S2SV_ModStart> ; if ( k5_memcmp <S2SV_ModEnd> ( code, <S2SV_ModStart> ; if ( k5_memcmp <S2SV_ModEnd> ( code, <S2SV_ModStart> ; if ( k5_memcmp <S2SV_ModEnd> ( code, <S2SV_ModStart> ; if ( k5_memcmp <S2SV_ModEnd> ( code, <S2SV_ModStart> ; if ( k5_memcmp <S2SV_ModEnd> ( code, <S2SV_ModStart> ; if ( k5_memcmp <S2SV_ModEnd> ( code, <S2SV_ModStart> ; if ( k5_memcmp <S2SV_ModEnd> ( code, <S2SV_ModStart> ; if ( k5_memcmp <S2SV_ModEnd> ( code, <S2SV_ModStart> ; if ( k5_memcmp <S2SV_ModEnd> ( code, <S2SV_ModStart> ; if ( k5_memcmp <S2SV_ModEnd> ( code, <S2SV_ModStart> ; if ( k5_memcmp <S2SV_ModEnd> ( code, <S2SV_ModStart> ; if ( k5_memcmp <S2SV_ModEnd> ( code,",0
286,"<S2SV_ModStart> 0x02 ) ; if ( crgram_len > SC_MAX_APDU_BUFFER_SIZE - 1 ) { r = sc_transmit_apdu ( card, & apdu ) ; LOG_TEST_RET ( card -> ctx, r, ""APDU <S2SV_blank> transmit <S2SV_blank> failed"" ) ; return r ; } <S2SV_ModStart> 0x02 ) ; if ( crgram_len > SC_MAX_APDU_BUFFER_SIZE - 1 ) { r = sc_transmit_apdu ( card, & apdu ) ; LOG_TEST_RET ( card -> ctx, r, ""APDU <S2SV_blank> transmit <S2SV_blank> failed"" ) ; return r ; }",0
287,<S2SV_ModStart> ; if ( ctxt. info. tc_mapping [ I40E_AQ_VSI_TC_QUE_OFFSET ] & ( I40E_AQ_VSI_TC_QUE_OFFSET_MASK << I40E_AQ_VSI_TC_QUE_OFFSET_SHIFT ) ) return - EINVAL ; if (,0
288,<S2SV_ModStart> ; } } return - 1 ;,1
289,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
290,"<S2SV_ModStart>, recon_y_stride, recon_uv_stride <S2SV_ModEnd>, mb_row, <S2SV_ModStart>, recon_y_stride, recon_uv_stride <S2SV_ModEnd>, mb_row, <S2SV_ModStart>, recon_uv_stride, recon_y_stride <S2SV_ModEnd>, mb_row, <S2SV_ModStart>, recon_uv_stride, recon_y_stride <S2SV_ModEnd>, mb_row, <S2SV_ModStart>, recon_uv_stride, recon_uv_stride <S2SV_ModEnd>, mb_row, <S2SV_ModStart>, recon_y_stride, recon_uv_stride <S2SV_ModEnd>, mb_row, <S2SV_ModStart>, recon_y_stride, recon_uv_stride <S2SV_ModEnd>, mb_row, <S2SV_ModStart>, recon_uv_stride, recon_y_stride <S2SV_ModEnd>, mb_row, <S2SV_ModStart>, recon_y_stride, recon_uv_stride <S2SV_ModEnd>, mb_row, <S2SV_ModStart>, recon_uv_stride, recon_y_stride <S2SV_ModEnd>, mb_row, <S2SV_ModStart>, recon_uv_stride, recon_uv_stride <S2SV_ModEnd>, mb_row, <S2SV_ModStart>, recon_y_stride, recon_uv_stride <S2SV_ModEnd>, mb_row, <S2SV_ModStart>, recon_uv_stride, recon_y_stride, recon_uv_stride <S2SV_ModEnd>, mb_row,",0
291,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
292,"<S2SV_ModStart> len ) { <S2SV_ModEnd> char * buf <S2SV_ModStart> char * p <S2SV_ModEnd> ; if ( <S2SV_ModStart> s ++ ; <S2SV_ModEnd> } if ( <S2SV_ModStart> 10 ; } if ( p - buf > Py_SIZE ( u ) ) { Py_DECREF ( w ) ; return NULL ; } assert ( p - buf <= Py_SIZE ( u ) ) ; Py_DECREF ( w ) ; } else { * p ++ = * s ++ ; } } len = p - buf ; s = buf ; return PyUnicode_DecodeUnicodeEscape ( s, len, NULL ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
293,"<S2SV_ModStart> BUF buffer ; int setimes, targisdir, wrerrno = 0 ; char ch, * cp, * np, * targ, * why, * vect [ 2048 ], visbuf [ 2048 ] ; char * * patterns = NULL ; size_t n, npatterns = 0 ; struct timeval tv [ 2 ] ; # define atime tv [ 0 ] # define mtime tv [ 1 ] # define SCREWUP ( str ) { str = str ; goto screwup ; } if ( TYPE_OVERFLOW ( time_t, 0 ) || TYPE_OVERFLOW ( off_t, 0 ) ) SCREWUP ( ""Unexpected <S2SV_blank> off_t/time_t <S2SV_blank> size"" ) ; setimes = targisdir = 0 ; mask = umask ( 0 ) ; if (! pflag ) umask ( mask ) ; if (! pflag ) ( void ) umask ( mask ) ; if ( targetshouldbedirectory ) verifydir ( targ ) ; ( void ) atomicio ( vwrite, remout, """", 1 ) ; if ( stat ( targ, & stb ) == 0 && S_ISDIR ( stb. st_mode ) ) targisdir = 1",0
294,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
295,<S2SV_ModStart> 0 ) { vpx_free ( oci -> mip ) ; vpx_free ( oci -> above_context ) ; vp8_de_alloc_frame_buffers ( oci ) ; <S2SV_ModStart> 0 ) { vpx_free ( oci -> mip ) ; vpx_free ( oci ) ; vp8_de_alloc_frame_buffers ( oci ) ; vp8_de_alloc_frame_buffers ( oci ) ; vp8_de_alloc_frame_buffers ( oci ) ; <S2SV_ModStart> 0 ) { vpx_free ( oci -> mip ) ; vpx_free ( oci -> above_context ) ; vp8_de_alloc_frame_buffers ( oci ) ; vp8_de_alloc_frame_buffers ( oci ) ; vp8_de_alloc_frame_buffers ( oci ) ; vp8_de_alloc_frame_buffers ( oci ) ; vp8_de_alloc_frame_buffers ( oci ) ; vp8_de_alloc_frame_buffers ( oci ) ; <S2SV_ModStart> 0 ) { vpx_free ( oci -> mip ) ; vpx_free ( oci -> above_context ) ; vp8_de_alloc_frame_buffers,0
296,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
297,"<S2SV_ModStart> i2_cur_mb_addr, u1_num_mbs, u1_num_mbsNby2 <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbsNby2, u1_num_mbsNby2 <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbsNby2, u1_num_mbsNby2 <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbsNby2, u1_num_mbsNby2 <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbsNby2, u1_num_mbsNby2 <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbsNby2, u1_num_mbsNby2 <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbsNby2, u1_num_mbsNby2 <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbsNby2, u1_num_mbsNby2 <S2SV_ModStart> i2_cur_mb_addr",0
298,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> vterm_allocator_free ( screen,1
299,"<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & delay )",1
300,"<S2SV_ModStart>, one, <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
301,"<S2SV_ModStart> -> host, <S2SV_ModEnd> sclone ( value <S2SV_ModStart> ( value ) <S2SV_ModEnd> ) ; httpSetRouteName",0
302,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
303,"<S2SV_ModStart> ntime ) { goto out ; } cg_wlock ( & pool -> data_lock ) ; free ( pool -> swork. job_id ) ; pool -> swork. job_id = job_id ; snprintf ( pool -> prev_hash, 65, ""%s"", prev_hash ) ; cb1_len = strlen ( prev_hash ) / 2 ; cb2_len = strlen ( coinbase1 ) / 2 ; snprintf ( pool -> bbversion, 9, ""%s"", bbversion ) ; snprintf ( pool -> nbit, 9, ""%s"", nbit ) ; snprintf ( pool -> ntime, 9, ""%s"", ntime ) ; pool -> swork. clean = clean ; cb1_len = strlen ( coinbase1 ) / 2 ; cb2_len = strlen ( coinbase2 ) / 2 ; snprintf ( pool -> bbversion, 9, ""%s"", bbversion ) ; snprintf ( pool -> nbit, 9, ""%s"", nbit ) ; snprintf ( pool -> ntime, 9, ""%s"", ntime ) ; pool -> swork. clean = clean ; pool -> swork. clean = clean",0
304,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
305,"<S2SV_ModStart> unused ) { _Py_IDENTIFIER ( __dict__ ) ; PyObject * dict = _PyObject_GetAttrId ( self, & PyId___dict__ ) ; if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( _PyObject_GetAttrId ( self, & PyId___list__ ) == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( _PyObject_GetAttrId ( self, & PyId___list__ ) == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( _PyObject_GetAttrId ( self, & PyId___list__ ) == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( _PyObject_GetAttrId ( self, & PyId___list__ ) == NULL ) { if ( PyErr_ExceptionMatches ( PyExc",0
306,"<S2SV_ModStart> ) & desc, sizeof ( * desc )",1
307,"<S2SV_ModStart> perf_event * ) <S2SV_ModEnd> ; switch ( <S2SV_ModStart> case PERF_EVENT_IOC_PERIOD : return perf_event_period ( event, ( u64 __user * ) arg ) ; case PERF_EVENT_IOC_ID : { u64 id = primary_event_id ( event ) ; if ( copy_to_user ( ( void __user * ) arg, & id, sizeof ( id ) ) ) return - EFAULT ; return 0 ; } case PERF_EVENT_IOC_SET_OUTPUT : { int ret ; if ( arg!= - 1 ) { struct perf_event * output_event ; struct fd output ; ret = perf_fget_light ( arg, & output ) ; if ( ret ) return ret ; ret = perf_event_set_output ( event, output_event ) ; fdput ( output ) ; } return ret ; } case PERF_EVENT_IOC_SET_FILTER : return perf_event_set_filter ( event, ( void __user * ) arg ) ; default : return - ENOTTY ; } if ( flags & PERF_IOC_FLAG_GROUP ) perf_event_for_each ( event, func",0
308,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> * r, PREDICTION_MODE <S2SV_ModEnd> y_mode ) { <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode",0
309,"<S2SV_ModStart> - EINVAL ; if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version > CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version > CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) { return - EINVAL ; }",0
310,"<S2SV_ModStart> iv ) ; if (! NIL_P ( key ) ) rb_raise ( eCipherError, ""key <S2SV_blank> must <S2SV_blank> be <S2SV_blank> an <S2SV_blank> unsigned <S2SV_blank> char"" ) ; if (! NIL_P ( iv ) ) rb_raise ( eCipherError, ""iv <S2SV_blank> must <S2SV_blank> be <S2SV_blank> an <S2SV_blank> unsigned <S2SV_blank> char"" ) ; if (! NIL_P ( iv ) ) rb_raise ( eCipherError, ""iv <S2SV_blank> must <S2SV_blank> be <S2SV_blank> an <S2SV_blank> unsigned <S2SV_blank> char"" ) ; if (! NIL_P ( iv ) ) rb_raise ( eCipherError, ""iv <S2SV_blank> must <S2SV_blank> be <S2SV_blank> an <S2SV_blank> unsigned <S2SV_blank> char"" ) ; if (! NIL_P ( iv ) ) rb_raise ( eCipherError, ""iv <S2SV_blank> must <S2SV_blank> be <S2SV_blank> an <S2SV_blank> unsigned <S2SV_blank> char"" ) ; if (! NIL_P ( iv ) ) rb_raise ( eCipherError, ""iv <S2SV_blank> must <S2SV_blank> be <S2SV_blank> an <S2SV_blank> unsigned <S2SV_blank> char"" ) ; if (! NIL_P ( iv ) ) rb_raise ( eCipherError, ""iv <S2SV_blank> must <S2SV_blank> be <S2SV_blank> an <S2SV_blank> unsigned <S2SV_blank> char"" ) ;",0
311,"<S2SV_ModStart> s ) ; if ( qemu_register_savevm ( dev, ""stellaris_enet"", <S2SV_ModEnd> - 1, <S2SV_ModStart>, 1, <S2SV_ModEnd> stellaris_enet_save, stellaris_enet_load",0
312,"<S2SV_ModStart> { DEBUGF ( ""recv: <S2SV_blank> [IB_READ_SETTINGS]\\n"" <S2SV_ModEnd> ) ; readlen <S2SV_ModStart> { DEBUGF ( ""recv: <S2SV_blank> [IB_READ_SETTINGS]\\n"" <S2SV_ModEnd> ) ; readlen <S2SV_ModStart> { DEBUGF ( ""recv: <S2SV_blank> [IB_READ_SETTINGS]\\n"" <S2SV_ModEnd> ) ; readlen <S2SV_ModStart> { DEBUGF ( ""recv: <S2SV_blank> [IB_READ_SETTINGS]\\n"" <S2SV_ModEnd> ) ; readlen <S2SV_ModStart> { DEBUGF ( ""recv: <S2SV_blank> [IB_READ_SETTINGS]\\n"" <S2SV_ModEnd> ) ; readlen <S2SV_ModStart> { DEBUGF ( ""recv: <S2SV_blank> [IB_READ_SETTINGS]\\n"" <S2SV_ModEnd> ) ; readlen <S2SV_ModStart> { DEBUGF ( ""recv: <S2SV_blank> [IB_READ_SETTINGS]\\n"" <S2SV_ModEnd> ) ; readlen <S2SV_ModStart> { DEBUGF ( ""recv: <S2SV_blank> [IB_READ_SETTINGS]\\n"" <S2SV_ModEnd> ) ; readlen <S2SV_ModStart> { DEBUGF ( ""recv: <S2SV_blank> [IB_READ_SETTINGS]\\n"" <S2SV_ModEnd> ) ; readlen <S2SV_ModStart> { DEBUGF ( ""recv: <S2SV_blank> [IB_READ_SETTINGS]\\n"" <S2SV_ModEnd> ) ; readlen <S2SV_ModStart> { DEBUGF ( ""recv: <S2SV_blank> [IB_READ_",0
313,"<S2SV_ModStart> ( ) ; if ( x86_pmu. max_pebs_events > X86_PMU_MAX_PEBS ) { pr_err ( ""%s: <S2SV_blank> maximum <S2SV_blank> number <S2SV_blank> of <S2SV_blank> PEBS <S2SV_blank> supported <S2SV_blank> is <S2SV_blank> %d\\n"", __func__, x86_pmu. max_pebs_events ) ; x86_pmu. max_pebs_events = X86_PMU_MAX_PEBS ; return - ENODEV ; }",0
314,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ] ; const vpx_extra_bit <S2SV_ModEnd> * const b <S2SV_ModStart> = & vp9_extra_bits [ t ] ; int i = 0 ; int v = a -> value ; int n = a -> len ; if ( p -> skip_eob_node ) { n -= p -> skip_eob_node ; i = 2 * p -> skip_eob_node ; } if ( t >= TWO_TOKEN && t < EOB_TOKEN ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; int bits = v >> ( n - len ) ; vp9_write_tree ( w, vp9_coef_tree, p -> context_tree, bits, len, i ) ; vp9_write_tree ( w, vp9_coef_con_tree, vp9_pareto8_full [ p -> context_tree [ PIVOT_NODE ] - 1 ], v, n - len, 0 ) ; } else { vp9_write_tree ( w, vp9_coef_tree, p -> context_tree,",0
315,"<S2SV_ModStart>, uncompressed_hdr_size ; vpx_write_bit_buffer <S2SV_ModEnd> wb = { <S2SV_ModStart> 0 } ; vpx_write_bit_buffer <S2SV_ModEnd> saved_wb ; write_uncompressed_header <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> += uncompressed_hdr_size ; vpx_compute_update_table <S2SV_ModEnd> ( ) ; <S2SV_ModStart> += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb",0
316,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
317,"<S2SV_ModStart> _U_ ) { ND_TCHECK ( * ep ) ; ND_TCHECK ( * ep ) ; ND_TCHECK ( * ep ) ; ND_TCHECK ( * ep ) ; ND_TCHECK ( * ep ) ; ND_TCHECK ( * ep ) ; ND_TCHECK ( * ep ) ; ND_TCHECK ( * ep ) ; ND_TCHECK ( * ep ) ; ND_TCHECK ( * ep ) ; ND_TCHECK ( * ep ) ; ND_ALIGNED_MEMCPY ( & id, ep, sizeof ( id ) ) ; ikev2_pay_print ( ndo, NPSTR ( tpay ), id. h. critical ) ; id_len = ntohs ( id. h. len ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> len=%d"", id_len ) ; if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext",0
318,"<S2SV_ModStart> ) ) { jas_log ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( ) ) ) ) ), ""mif_process_cmpt"" ), hdr, buf, jas_taginfo_nonull ( jas_taginfos_lookup ( mif_tags, jas_taginfo_gettag ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( ) ) ) ) ) ) -> id, jas_taginfo_nonull ( jas_logger ( jas_logger ( jas_logger ( jas_logger (",0
319,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
320,"<S2SV_ModStart> ; WORD32 xt0_0 = 0, yt0 = 0, yt1 = 0, yt2 = 0 <S2SV_ModEnd> ; WORD32 xh0_0 <S2SV_ModStart> ; WORD32 xh0_0 = 0, xh1_0 = 0, xh20_0 = 0, xh21_0 = 0, xl0 = 0, xl1_0 = 0, xl20_0 = 0, xl21_0 = 0 ; WORD32 x_0 = 0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_h2_0 = 0, x_h2_1 ; WORD32 si10, si20, si30, co10, co20, co30 ; WORD64 mul_1, mul_2, mul_4, mul_5, mul_6 ; WORD64 mul_7, mul_8, mul_9, mul_10, mul_11, mul_12 ; WORD32 * x_l1 ; WORD32 * x_l2 ; WORD32 * x_h2 ; const WORD32 * w",0
321,"<S2SV_ModStart> mntent -> mnt_dir, mntent -> mnt_root -> mnt_sb -> s_root -> mnt_sb -> s_root -> mnt_sb -> s_root -> mnt_sb -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root ->",0
322,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
323,"<S2SV_ModStart>, req_server_name ( req ) ) ; rb_hash_aset ( env, server_port_val, req_server_port ( req ) ) ; rb_hash_add ( env, ""HTTP_USER_AGENT"", rb_const_get ( req, ""HTTP_USER_AGENT"", """" ) ) ; rb_hash_add ( env, ""HTTP_USER_AGENT"", rb_const_get ( req, ""HTTP_USER_AGENT"", """" ) ) ; rb_hash_add ( env, ""HTTP_USER_AGENT"", rb_const_get ( req, ""HTTP_USER_AGENT"", """" ) ) ; rb_hash_add ( env, ""HTTP_USER_AGENT"", rb_const_get ( req, ""HTTP_USER_AGENT"", """" ) ) ; rb_hash_add ( env, ""HTTP_USER_AGENT"", rb_const_get ( req, ""HTTP_USER_AGENT"", """" ) ) ; rb_hash_add ( env, ""HTTP_USER_AGENT"", rb_const_get ( req, ""HTTP_USER_AGENT"", """" ) ) ; rb_",0
324,"<S2SV_ModStart> endif int col_type <S2SV_ModEnd> ; MYSQL_BIND * <S2SV_ModStart> ; # endif # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION int prepare_retval ; MYSQL_BIND * bind, * bind_end ; imp_sth_phb_t * fbind ; # endif D_imp_sthh ( sth ) ; D_imp_dbh_from_sth ; if ( DBIc_TRACE_LEVEL ( imp_xxh ) >= 2 ) PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t-> <S2SV_blank> dbd_st_prepare <S2SV_blank> MYSQL_VERSION_ID <S2SV_blank> %d, <S2SV_blank> SQL <S2SV_blank> statement: <S2SV_blank> %s\\n"", MYSQL_VERSION_ID, statement ) ; # endif # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION if ( DBIc_TRACE_LEVEL ( imp_xxh ) >= 2 ) PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t-> <S2SV_blank> dbd_st_prepare <S2SV_blank> MYSQL_VERSION_ID <S2SV_blank> %d, <S2SV_blank> SQL <S2SV_blank> statement: <S2SV_blank> %s\\n"", MYSQL_VERSION_ID, statement",0
325,"<S2SV_ModStart> need = 0 <S2SV_ModEnd> ; CELL first <S2SV_ModStart> screen, { if ( need > screen -> max_width / 4 ) { SysError ( ERROR_BMALLOC2 ) ; return ; } <S2SV_ModStart> screen, { if ( need > screen -> max_width / 4 ) { SysError ( ERROR_BMALLOC2 ) ; return ; } <S2SV_ModStart> screen, { if ( need > screen -> max_width / 4 ) { SysError ( ERROR_BMALLOC2 ) ; return ; } <S2SV_ModStart> need *= 4 ; } } ) ; if ( need < 0 ) return ; if ( scp -> data_limit <= ( unsigned ) need ) { if ( ( line = ( Char * ) malloc ( ( size_t ) need + 1 ) ) == 0 ) SysError ( ERROR_BMALLOC2 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = line ; scp -> data_limit = ( size_t ) ( need + 1 ) ; } else { if ( line == 0 ) SysError ( ERROR_BMALLOC2 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = line ; scp -> data_limit = ( size_",0
326,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> ftoa_bounded_extra ( JsVarFloat <S2SV_ModStart> val ) ) strncpy_s ( str, len, ""NaN"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> < 0 ) strncpy_s ( str, len, ""-Infinity"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) ; else strncpy_s ( str, len, ""Infinity"" <S2SV_ModEnd> ) ; } <S2SV_ModStart> 0 ; } return len ;",0
327,"<S2SV_ModStart> ( unlikely ( crng_ready == 0 ) ) { if ( ( fast_pool -> count >= 64 ) && crng_fast_load ( ( char * ) fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ) { fast_pool -> count = 0 ; fast_pool -> last = now ; } return ; } if ( ( fast_pool -> count < 64 ) &&! time_after ( now, fast_pool -> last + HZ ) ) return ; r = & input_pool ; if (! spin_trylock ( & r -> lock ) ) return ; fast_pool -> last = now ; __mix_pool_bytes ( r, & fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ; if ( arch_get_random_seed_long ( & seed ) ) { __mix_pool_bytes ( r, & seed, sizeof ( seed ) ) ; credit = 1 ; } spin_unlock ( & r -> lock ) ; fast_pool -> count = 0 ; credit_entropy ( r, credit ) ; crng_init = 1 <S2SV_ModEnd> ; } <S2SV_null>",0
328,"<S2SV_ModStart> LEX_ID ) { snprintf ( str, len <S2SV_ModEnd>, ""ID:"", <S2SV_ModStart> ""ID:"", len <S2SV_ModEnd>, jslGetTokenValueAsString ( <S2SV_ModStart> LEX_STR ) { snprintf ( str, len <S2SV_ModEnd>, ""String:\'"", <S2SV_ModStart> ""String:\'"", len <S2SV_ModEnd>, jslGetTokenValueAsString ( <S2SV_ModStart> jslGetTokenValueAsString ( ) <S2SV_ModEnd> ) ; }",0
329,,1
330,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
331,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
332,"<S2SV_ModStart> ) { return memcmp <S2SV_ModEnd> ( s1,",0
333,"<S2SV_ModStart> ( CMD_PRINT_HELP, NULL, NULL ) ; parse_service_option ( CMD_PRINT_HELP, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-version"" ) ) { parse_global_option ( CMD_PRINT_DEFAULTS, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-sockets"" ) ) { socket_options_print ( ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-options"" ) ) { print_ssl_options ( ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else # ifndef USE_WIN32 if (! strcasecmp ( arg1, ""-fd"" ) ) { if (! arg2 ) { s_log ( LOG_ERR, ""No <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> specified"" ) ; print_syntax ( ) ; return 1 ; } name = arg2 ; type =",0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,"<S2SV_ModStart> -> st_skeyid_e_nss ; if ( st -> st_oakley. ta_encrypt == NULL ) { libreswan_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; return ; } <S2SV_ModStart>. ta_encrypt ; if ( st -> st_oakley. ta_decrypt == NULL ) { libreswan_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; return ; } <S2SV_ModStart>. ta_decrypt ; if ( st -> st_oakley. ta_decrypt == NULL ) { libreswan_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; return ; } <S2SV_ModStart>. ta_decrypt ; if ( st -> st_oakley. ta_decrypt == NULL ) { libreswan_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material""",0
336,"<S2SV_ModStart> ; } } { IMPEG2D_ERROR_CODES_T e_error ; e_error = impeg2d_process_video_header ( & ( ps_dec -> s_bit_stream ), ps_dec -> pu1_input_buffer, u4_size ) ; if ( ( IMPEG2D_ERROR_CODES_T ) IVD_ERROR_NONE!= e_error ) { ps_op -> s_ivd_video_decode_op_t. u4_error_code = e_error ; ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = 0 ; ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = 0 ; ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = 0 ; ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = 0 ; ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_",0
337,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char * print_string,0
338,"<S2SV_ModStart> == 1 ) { <S2SV_ModStart> deadline ) ; } else { int i ; ctx += num_enc - 1 ; if ( img ) img += num_enc - 1 ; for ( i = num_enc - 1 ; i >= 0 ; i -- ) { if ( ( res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ) ) break ; ctx -- ; if ( img ) img -- ; } ctx ++ ; } for ( i = num_enc - 1 ; i >= 0 ; i -- ) { if ( ( res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ) ) break ; ctx -- ; if ( img ) img -- ; } ctx ++ ; }",0
339,<S2SV_ModStart> ) ; } else if ( arg1 == 1 ) { win_maximise ( 1 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 2 ) { win_maximise ( - 1 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 3 ) { win_maximise ( - 1 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 0 ) { win_maximise ( - 1 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 1 ) { win_maximise ( - 1 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 3 ) { win_maximise ( - 1 ) ; term. rows0 = rows0 ; term. rows0 = rows0 ; term. cols0 = cols0 ; },0
340,<S2SV_ModStart> < cols + 8 ; i ++ ) s [ i ] = s [ cols - 1 ] ; for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; d [ i + 8 ] = 0 ; } for ( c = 0 ; c < cols + 8 ; c ++ ) { int x = s [ c + 7 ] - s [ c - 8 ] ; int y = s [ c + 7 ] + s [ c - 8 ] ; sum += x ; sumsq += x * y ; d [ c & 15 ] = s [ c ] ; if ( sumsq * 15 - sum * sum < flimit ) { d [ c & 15 ] = ( 8 + sum + s [ c ] ) >> 4 ; } s [ c - 8 ] = d [ ( c - 8 ) & 15 ] ; } s += pitch ; } for ( <S2SV_ModEnd> ; s <,0
341,"<S2SV_ModStart> -> log ) { <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> -> log ) { <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> -> log ) { <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> -> log ) { <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> -> log ) { <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> -> log ) { <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> -> log ) { <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> -> log ) { <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> b",0
342,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
343,<S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_pps_done ) { ps_codec -> i4_pps_done = 1 ; return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_pps_done ) { ps_codec -> i4_pps_done = 1 ; return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_pps_done ) { ps_codec -> i4_pps_done = 1 ; return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_pps_done ) { ps_codec -> i4_pps_done = 1 ; return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_pps_done ) { ps_codec -> i4_pps_done = 1 ; return IHEVCD_INVALID_HEADER ; },0
344,"<S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_start ( argptr, c ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ;",0
345,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
346,"<S2SV_ModStart> 0 ; } fs_logger2 ( ""clone"", dest ) ; int rv = copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { <S2SV_ModStart> ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; rv = copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; rv = copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; rv = copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank>",0
347,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> BLOCK_8X8 : return vpx_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> BLOCK_16X8 : return vpx_mse16x8 <S2SV_ModEnd> ; case BLOCK_8X16 <S2SV_ModStart> BLOCK_8X16 : return vpx_mse8x16 <S2SV_ModEnd> ; default : <S2SV_ModStart> default : return vpx_mse16x16 <S2SV_ModEnd> ; } },1
348,"<S2SV_ModStart> ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_KX ) { retval = return_pkinit_kx ( context, request, reply, encrypting_key, send_pa ) ; } else if ( padata -> pa_type == KRB5_PADATA_PKINIT_KE ) { retval = return_pkinit_ke ( context, request, reply, encrypting_key, send_pa ) ; } else if ( padata -> pa_type == KRB5_PADATA_PKINIT_KE ) { retval = return_pkinit_ke ( context, request, reply, encrypting_key, send_pa ) ; } else if ( padata -> pa_type == KRB5_PADATA_PKINIT_KE ) { retval = return_pkinit_ke ( context, request, reply, encrypting_key, send_pa ) ; } else if ( padata -> pa_type == KRB5_PADATA_PKINIT_KE ) { retval = return_pkinit_ke ( context, request, reply, encrypting_key, send_pa ) ; }",0
349,"<S2SV_ModStart> flags ) ; if (! vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", input -> buf_cur_space_left, frame_len ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n",0
350,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> size_t <S2SV_ModEnd> zcalloc ( size_t <S2SV_ModStart> size ) { size_t new_size = size + PREFIX_SIZE ; <S2SV_ModStart> ( 1, new_size <S2SV_ModEnd> ) ; if <S2SV_ModStart> HAVE_MALLOC_SIZE update_zmalloc_stat_alloc ( new_size <S2SV_ModEnd> ) ; return",0
351,<S2SV_ModStart> -> serviceId == EXTRACT_16BITS <S2SV_ModEnd> ( & rxh,1
352,"<S2SV_ModStart>, 0, sizeof ( adhoc_start -> ssid ) ) ; memcpy ( adhoc_start -> ssid, req_ssid -> ssid, req_ssid -> ssid_len ) ; mwifiex_dbg ( adapter, INFO, ""info: <S2SV_blank> ADHOC_S_CMD: <S2SV_blank> SSID <S2SV_blank> = <S2SV_blank> %s\\n"", adhoc_start -> ssid ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memcpy ( bss_desc -> ssid. ssid, req_ssid -> ssid, req_ssid -> ssid_len ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memcpy ( bss_desc -> ssid. ssid, req_ssid -> ssid, req_ssid -> ssid_len ) ; memcpy ( bss_desc -> ssid. ssid, req_ssid -> ssid, req_ssid -> ssid_len",0
353,"<S2SV_ModStart> ; if (! sfe -> valuelen ) { error = context -> put_listent ( context, 0, 0, 0, 0 ) ; if ( context -> seen_error ) return error ; sfe = XFS_ATTR_SF_NEXTENTRY ( sfe ) ; } if ( <S2SV_ModStart> ; if (! sfe -> valuelen ) { error = context -> put_listent ( context, 0, 0, 0, 0 ) ; if ( context -> seen_error ) return error ; sfe = XFS_ATTR_SF_NEXTENTRY ( sfe ) ; } if ( <S2SV_ModStart> ) ; } if (! sfe -> valuelen ) { error = context -> put_listent ( context, 0, 0, 0, 0, 0 ) ; if ( context -> seen_error ) return error ; sfe = XFS_ATTR_SF_NEXTENTRY ( sfe ) ; } if (! sfe -> valuelen ) { error = context -> put_listent ( context, 0, 0, 0, 0, 0 ) ; if ( context -> seen_error ) return error ; sfe = XFS_ATTR_SF_NEXTENTRY ( sfe )",0
354,"<S2SV_ModStart> struct l2cap_conf_rfc rfc ; void * ptr = req -> data ; BT_DBG ( ""sk <S2SV_blank> %p"", sk ) ; switch ( pi -> mode ) { case L2CAP_MODE_BASIC : if ( pi -> imtu!= L2CAP_DEFAULT_MTU ) l2cap_add_conf_opt ( & ptr, L2CAP_CONF_MTU, 2, pi -> imtu ) ; break ; case L2CAP_MODE_ERTM : rfc. mode = L2CAP_MODE_NONE ; rfc. txwin_size = L2CAP_DEFAULT_RX_WINDOW ; rfc. max_transmit = L2CAP_DEFAULT_MAX_RECEIVE ; rfc. retrans_timeout = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO ) ; rfc. monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; l2cap_add_conf_opt ( & ptr, L2",0
355,"<S2SV_ModStart> { do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> r, MSG_WAITALL )",0
356,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ps_dec -> u1_nal_ref_idc <S2SV_ModStart> ps_dec -> u1_nal_ref_idc > IDR_SLICE_NAL ) { return ERROR_INCOMPLETE_FRAME ; } if ( <S2SV_ModEnd> ps_dec -> u1_nal_ref_idc <S2SV_ModStart> ps_dec -> u1_nal_ref_idc > IDR_SLICE_NAL ) { return ERROR_INCOMPLETE_FRAME ; } if ( <S2SV_ModEnd> ps_dec -> u1_nal_ref_idc <S2SV_ModStart> ps_dec -> u1_nal_ref_idc > IDR_SLICE_NAL ) { return ERROR_INCOMPLETE_FRAME ; } if ( <S2SV_ModEnd> ps_dec -> u1_nal_ref_idc <S2SV_ModStart> ps_dec -> u1_nal_ref_idc > IDR_SLICE_NAL ) { return ERROR_INCOMPLETE_FRAME ; } if ( <S2SV_ModEnd> ps_dec -> u1_nal_ref_idc <S2SV_ModStart> ps_dec -> u1_nal_ref_idc > IDR_SLICE_,0
357,<S2SV_ModStart> while ( pair <S2SV_ModEnd> ) { mprAddItem,1
358,"<S2SV_ModStart> * delegation, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> = 0 ; fmode <S2SV_ModEnd> &= ( FMODE_READ <S2SV_ModStart> -> type & fmode )!= fmode <S2SV_ModEnd> ) goto no_delegation_unlock <S2SV_ModStart> -> stateid, fmode <S2SV_ModEnd> ) ; ret <S2SV_ModStart>, NULL, fmode <S2SV_ModEnd> ) ; ret",1
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,"<S2SV_ModStart> int * out_rate_sum ) { int i ; int64_t rate_sum = 0 ; int64_t dist_sum = 0 ; const int ref = xd -> mi [ 0 ] -> mbmi. ref_frame [ 0 ] ; unsigned int sse ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblock_plane * const p = & xd -> plane [ i ] ; struct macroblockd_plane * const pd = & xd -> plane [ i ] ; const BLOCK_SIZE bs = get_plane_block_size ( bsize, pd ) ; ( void ) cpi -> fn_ptr [ bs ]. vf ( p -> src. buf, p -> src. stride, pd -> dst. buf, pd -> dst. stride, & sse ) ; if ( i == 0 ) x -> pred_sse [ ref ] = sse ; if ( cpi -> speed > 4 ) { int64_t rate ; int64_t dist ; int64_t square_error = sse ; int quantizer = ( pd -> dequant [ 1 ] >> 3 ) ; if ( quantizer < 120 ) rate = ( square_",0
361,<S2SV_ModStart> } if ( pmd_trans_unstable <S2SV_ModEnd> ( pmd ),0
362,<S2SV_ModStart> { if ( index >= PAM_MAX_RESP_SIZE ) { return ( PAM_BUF_ERR ) ; } if ( <S2SV_ModStart> == NULL ) { free ( * ret_username ) ; <S2SV_ModStart> PAM_BUF_ERR ) ; },0
363,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> ) { return vpx_read_tree <S2SV_ModEnd> ( r,",1
364,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",1
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,<S2SV_ModStart> depth ++ ; ND_TCHECK ( fmt [ 0 ] ) ; ND_TCHECK ( fmt [ 1 ] ) ;,0
367,"<S2SV_ModStart> ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n < ( length + 8 ) ) { return ERROR_FAILURE ; } netBufferRead ( context -> txBuffer, buffer, offset, length ) ; header. controlWord = htole16 ( TX_CTRL_TXIC | ( context -> frameId ++ & TX_CTRL_TXFID ) ) ; header. byteCount = htole16 ( length ) ; ksz8851SetBit ( interface, KSZ8851_RXQCR, RXQCR_SDA ) ; ksz8851WriteFifo ( interface, ( uint8_t * ) & header, sizeof ( Ksz8851TxHeader ) ) ; ksz8851WriteFifo ( interface, context -> txBuffer, length ) ; ksz8851ClearBit ( interface, KSZ8851_TXQCR, TXQCR_METFE ) ; n = ksz8851ReadReg ( interface, <S2SV_ModStart>, KSZ8851_REG_TXMIR ) <S2SV_ModEnd> & TXMIR_TXMA_MASK ;",0
368,<S2SV_ModStart> ( ) ; mono_attach_maybe_stop ( ) ;,0
369,"<S2SV_ModStart> ; WORD32 x_8 <S2SV_ModEnd>, x_a, <S2SV_ModStart> ; WORD32 n00, n10, n20, n30, n01, n11, n21, n31 ; WORD32 n02, n12, n22, n32, n03, n13, n23, n33 ; WORD32 n0, j0 ; WORD32 * x2, * x0 ; WORD32 * y0, * y1, * y2, * y3 ; x0 = ptr_x ; y1 = ptr_y + ( WORD32 ) npoints ; x2 = ptr_x + ( WORD32 ) npoints ; x2 = ptr_x + ( WORD32 ) npoints ; x3 = ptr_x + ( WORD32 ) npoints ; x4 = ptr_x + ( WORD32 ) npoints ; x5 = ptr_x + ( WORD32 ) npoints ; x6 = ptr_x + ( WORD32 ) npoints ; x_7 = ptr_x + ( WORD32 ) npoints ; x_8 = * x0 ++ ; x_9 = * x0 ++ ; x_a = *",0
370,<S2SV_ModStart> ; if ( <S2SV_ModEnd> pmd_none_or_clear_bad ( pmd,0
371,"<S2SV_ModStart>, frames ; if ( argc < 4 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( argv [ 2 ], & width, & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } if (! parse_dim ( argv [ 3 ], & target_width, & target_height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpin = fopen ( fin, ""rb"" ) ; if ( fpin == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> read\\n"", fin ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpout = fopen ( fout, ""wb"" ) ; if ( fpout == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> write\\n"",",0
372,"<S2SV_ModStart> num_fields ) { _Py_IDENTIFIER ( _attributes ) ; PyObject * s, * l = PyTuple_New ( num_fields ) ; if (! l ) return 0 ; for ( int i = 0 ; i < num_fields ; i ++ ) { s = PyUnicode_FromString ( attrs [ i ] ) ; if (! s ) { Py_DECREF ( l ) ; return 0 ; } PyTuple_SET_ITEM ( l, i, s ) ; } result = _PyObject_SetAttrId ( ( PyObject * ) type, & PyId__attributes, l ) >= 0 ; Py_DECREF ( l ) ; return result <S2SV_ModEnd> ; } <S2SV_null>",0
373,<S2SV_ModStart> ; struct vpx_codec_alg_priv <S2SV_ModEnd> priv ; vpx_codec_enc_cfg_t <S2SV_ModStart> priv = & priv -> base ; ctx -> priv -> sz = sizeof ( * ctx -> priv ) ; ctx -> priv -> iface = ctx -> iface ; ctx -> priv -> alg_priv = priv ; ctx -> priv -> init_flags = ctx -> init_flags ; if ( ctx -> config. enc ) { ctx -> priv -> alg_priv -> cfg = * ctx -> config. enc ; ctx -> config. enc = & ctx -> priv -> alg_priv -> cfg ; } cfg = & ctx -> priv -> alg_priv -> cfg ; for ( i = 0 ; extracfg_map [ i ]. usage && extracfg_map [ i ]. usage!= cfg -> g_usage ; i ++ ) { priv -> vp8_cfg = extracfg_map [ i ]. cfg ; priv -> vp8_cfg. pkt_list = & priv -> pkt_list. head ; priv -> cx_data_sz = priv -> cfg. g_w * priv -> cfg. g_h * 3 / 2 * 2 ; if ( priv -> cx_data_sz < 3276,0
374,<S2SV_ModStart> ++ ; } pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; totfr += step ; if ( totfr > BOT ) { totfr = 0 ; for ( i = 0 ; i < 256 ; i ++ ) { unsigned nc = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] = nc ; } for ( i = 0 ; i < 256 ; i ++ ) { unsigned sum = 0 ; unsigned i16_17 = i << 4 ; for ( j = 0 ; j < 16 ; j ++ ) sum += pixel -> freq [ i16_17 + j ] ; pixel -> lookup [ i ] = sum ; } } pixel -> total_freq = totfr ;,0
375,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx ->,0
376,"<S2SV_ModStart> bh ) ; if ( ret < 0 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> inode\\n"", inode -> i_ino ) ; goto out ; } <S2SV_ModStart> bh ) ; if ( ret < 0 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> inode\\n"", inode -> i_ino ) ; goto out ; } <S2SV_ModStart> bh ) ; if ( ret < 0 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> inode\\n"", inode -> i_ino ) ; goto out ; } <S2SV_ModStart> bh ) ; if ( ret < 0 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> inode\\n"", inode -> i_ino ) ; goto out ; } <S2SV_ModStart> bh ) ; if ( ret < 0 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> inode\\n"", inode -> i_ino",0
377,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0",1
378,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int bad_format_imginfo (,0
379,<S2SV_ModStart> ) ; # else ( void ) DefragInOrderSimpleTest ; ( void ) DefragReverseSimpleTest ; ( void ) DefragInOrderSimpleTest ; ( void ) DefragInOrderSimpleTest ; ( void ) DefragReverseSimpleTest ; ( void ) DefragInOrderSimpleTest ; ( void ) DefragInOrderSimpleTest ; ( void ) DefragReverseSimpleTest ; ( void ) DefragInOrderSimpleTest ; ( void ) DefragReverseSimpleTest ; ( void ) DefragInOrderSimpleTest ; ( void ) DefragInOrderSimpleTest ; ( void ) DefragReverseSimpleTest ; ( void ) DefragInOrderSimpleTest ; ( void ) DefragInOrderSimpleTest ; ( void ) DefragReverseSimpleTest ; ( void ) DefragInOrderSimpleTest ; ( void ) DefragInOrderSimpleTest ; ( void ) DefragInOrderSimpleTest ; ( void ) DefragInOrderSimpleTest ; ( void ) DefragInOrderSimpleTest ; ( void ) DefragInOrderSimpleTest ; ( void ) DefragInOrderSimpleTest ; ( void ) DefragInOrderSimpleTest ; ( void ),0
380,"<S2SV_ModStart> = object_length ; new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { return SC_ERROR_OUT_OF_MEMORY ; } if ( add_v1_record ) { new_object. data [ 0 ] = COOLKEY_V1_OBJECT ; new_object. length ++ ; } memcpy ( & new_object. data [ add_v1_record ], object_data, object_length ) ; } r = coolkey_add_object_to_list ( & priv -> objects_list, & new_object ) ; if ( r!= SC_SUCCESS ) { free ( new_object. data ) ; new_object. data = NULL ; } return r ;",0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,"<S2SV_ModStart> p_sys -> b_auto_field_coding && p_sys -> p_format -> interlaced ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""interlaced_coding"", p_sys -> p_format -> interlaced ) ; if ( p_sys -> b_auto_field_coding ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""auto_field_coding"", p_sys -> p_format -> interlaced ) ; if ( p_sys -> b_auto_field_coding ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""auto_field_coding"", p_sys -> p_format -> interlaced ) ; if ( p_sys -> b_auto_field_coding ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""auto_field_coding"", p_sys -> p_format -> interlaced ) ; if ( p_sys -> b_auto_field_coding ) schro_",0
384,"<S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> regular <S2SV_blank> file\\n"" <S2SV_ModEnd>, fname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> regular <S2SV_blank> file\\n"" <S2SV_ModEnd>, fname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> regular <S2SV_blank> file\\n"" <S2SV_ModEnd>, fname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> regular <S2SV_blank> file\\n"" <S2SV_ModEnd>, fname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> regular <S2SV_blank> file\\n"" <S2SV_ModEnd>, fname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> regular <S2SV_blank> file\\n"" <S2SV_ModEnd>, fname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> regular <S2SV_blank> file\\n"" <S2SV_ModEnd>, fname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> regular <S2SV_blank> file\\n"" <S2SV_ModEnd>, fname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> regular <S2SV_blank> file\\n"" <S2SV_ModEnd>, fname. <S2SV_ModStart> (",0
385,"<S2SV_ModStart> 4 ) ; size_t <S2SV_ModEnd> num_properties = GETINT32 <S2SV_ModStart> ; j < <S2SV_ModEnd> a -> names <S2SV_ModStart> ]. len ; j ++ ) a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ; } } else { size_t i ; a -> names = CHECKED_XCALLOC ( VarLenData, a -> num_names ) ; for ( i = 0 ; i < a -> num_names ; i ++ ) { size_t j ; CHECKINT32 ( idx, len ) ; a -> names [ i ]. len = GETINT32 ( buf + idx ) ; idx += 4 ; a -> names [ i ]. data = CHECKED_XMALLOC ( unsigned char, a -> names [ i ]. len ) ; for ( j = 0 ; j < ( a -> names [ i ]. len >> 1 ) ; j ++ ) a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ;",0
386,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
387,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * fb ; vpx_get_reference_dec <S2SV_ModEnd> ( ctx ->",0
388,"<S2SV_ModStart> { av_log ( ctx -> log_ctx <S2SV_ModEnd>, AV_LOG_ERROR, <S2SV_ModStart> ; av_log ( ctx -> log_ctx <S2SV_ModEnd>, AV_LOG_ERROR, <S2SV_ModStart> ; av_log ( ctx -> log_ctx <S2SV_ModEnd>, AV_LOG_ERROR, <S2SV_ModStart> ; av_log ( ctx -> log_ctx <S2SV_ModEnd>, AV_LOG_ERROR, <S2SV_ModStart> ; av_log ( ctx -> log_ctx <S2SV_ModEnd>, AV_LOG_ERROR, <S2SV_ModStart> ; av_log ( ctx -> log_ctx <S2SV_ModEnd>, AV_LOG_ERROR, <S2SV_ModStart> ; av_log ( ctx -> log_ctx <S2SV_ModEnd>, AV_LOG_ERROR, <S2SV_ModStart> ; av_log ( ctx -> log_ctx <S2SV_ModEnd>, AV_LOG_ERROR, <S2SV_ModStart> ; av_log ( ctx -> log_ctx <S2SV_ModEnd>, AV_LOG_ERROR, <S2SV_ModStart> ; av_log ( ctx -> log_ctx <S2SV_ModEnd>, AV_LOG_ERROR, <S2SV_ModStart> ; av_log ( ctx -> log_ctx <S2SV_ModEnd>, AV_LOG_ERROR, <S2SV_ModStart> ; av_log ( ctx -> log_ctx <S2SV_ModEnd>, AV_LOG_ERROR, <S2SV_ModStart> ; av_log ( ctx -> log_ctx <S2SV_ModEnd>, AV_LOG_ERROR,",0
389,"<S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == testlist ) { node * ch = CHILD ( n, 0 ) ; expr_ty e = ast_for_testlist ( c, CHILD ( n, 0 ) ) ; if (! e ) return NULL ; return Expr ( e, LINENO ( n ), n -> n_col_offset, n -> n_end_lineno, n -> n_end_col_offset, c -> c_arena ) ; } else if (",0
390,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> vp8_denoiser_filter_c ( YV12_BUFFER_CONFIG <S2SV_ModStart> = 16 ; <S2SV_ModEnd> int r, <S2SV_ModStart> c, i ; unsigned char * mc_running_avg_y = mc_running_avg -> y_buffer + y_offset ; int mc_avg_y_stride = mc_running_avg -> y_stride ; unsigned char * running_avg_y = running_avg -> y_buffer + y_offset ; int avg_y_stride = running_avg -> y_stride ; int r, c ; int sum_diff = 0 ; int adj_val [ 3 ] = { 3, 4, 6 } ; if ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) { for ( i = 0 ; i < 3 ; i ++ ) adj_val [ i ] += 1 ; } for ( r = 0 ; r < 16 ; ++ r ) { for ( c = 0 ; c < 16 ; ++ c ) { int diff = 0 ; int adjustment = 0 ; int absdiff = 0 ; diff = mc_running_",0
391,<S2SV_ModStart> ; } } if ( ( sockPtr -> flags & ( NS_CONN_ESTABLISHED | NS_CONN_SHUTDOWN ) )!= 0u ) { sockPtr -> flags &= ~ ( NS_CONN_ESTABLISHED | NS_CONN_SHUTDOWN ) ; if ( ( sockPtr -> flags & ( NS_CONN_SHUTDOWN | NS_CONN_SHUTDOWN ) )!= 0u ) { sockPtr -> flags |= ( NS_CONN_SHUTDOWN | NS_CONN_SHUTDOWN ) ; if ( ( sockPtr -> flags & ( NS_CONN_SHUTDOWN | NS_CONN_SHUTDOWN ) )!= 0u ) { sockPtr -> flags &= ~ ( NS_CONN_SHUTDOWN | NS_CONN_SHUTDOWN ) ; if ( ( sockPtr -> flags & ( NS_CONN_SHUTDOWN | NS_CONN_SHUTDOWN ) )!= 0u ) { sockPtr -> flags |= ( NS_CONN_SHUTDOWN | NS_CONN_SHUTDOWN ) ; if ( ( sockPtr -> flags & ( NS_CONN_SHUTDOWN | NS_CONN_SHUTDOWN ) )!= 0u ),0
392,"<S2SV_ModStart> = uregs ; xtregs_coprocessor_t cp ; <S2SV_ModStart> ret = 0 ; memset ( xtregs, 0, sizeof ( xtregs ) ) <S2SV_ModStart> ti ) ; cp = <S2SV_ModEnd> ti -> xtregs_cp <S2SV_ModStart> ti -> xtregs_cp ; ret |= __copy_from_user ( & cp, & xtregs -> cp, sizeof ( xtregs -> cp ) ) ; ret |= __copy_from_user ( & ti -> xtregs_opt, & xtregs -> opt, sizeof ( xtregs -> opt ) ) ; ret |= __copy_from_user ( & ti -> xtregs_user, & xtregs -> user, sizeof ( xtregs -> user ) ) ;",0
393,"<S2SV_ModStart> size ) ; if ( message -> length == 0 ) { osFree ( queueItem -> buffer ) ; queueItem -> buffer = NULL ; socket -> eventMask = SOCKET_EVENT_RX_ERROR ; osResetEvent ( & socket -> event ) ; osReleaseMutex ( & socket -> event ) ; osWaitForEvent ( & socket -> event, socket -> timeout ) ; osAcquireMutex ( & socket -> event ) ; socket -> eventMask = SOCKET_EVENT_RX_READY ; osResetEvent ( & socket -> event ) ; osReleaseMutex ( & socket -> event ) ; osWaitForEvent ( & socket -> event, socket -> timeout ) ; osAcquireMutex ( & socket -> event ) ; message -> srcIpAddr = queueItem -> srcIpAddr ; message -> srcPort = queueItem -> srcPort ; message -> destIpAddr = queueItem -> destIpAddr ; message -> ttl = queueItem -> ancillary. ttl ; # if ( ETH_SUPPORT == ENABLED ) message -> srcMacAddr = queueItem -> ancillary. srcMacAddr ; message -> destMacAddr = queueItem -> ancillary. destMacAddr ; # endif # if ( ETH_PORT",0
394,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" <S2SV_ModStart> cg_item ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
395,"<S2SV_ModStart> int error ; new_bh = ext2_xattr_cache_find ( inode, header ) ; if ( new_bh ) { if ( new_bh == old_bh ) { if ( new_bh == old_bh ) { ea_bdebug ( new_bh, ""keeping <S2SV_blank> this <S2SV_blank> block"" ) ; } else { ea_bdebug ( new_bh, ""reusing <S2SV_blank> block"" ) ; error = dquot_alloc_block ( inode, 1 ) ; if ( error ) { unlock_buffer ( new_bh ) ; goto cleanup ; } le32_add_cpu ( & HDR ( new_bh ) -> h_refcount, 1 ) ; ea_bdebug ( new_bh, ""refcount <S2SV_blank> now=%d"", le32_to_cpu ( HDR ( new_bh ) -> h_refcount ) ) ; } unlock_buffer ( new_bh ) ; } } else if ( old_bh && header == HDR ( old_bh ) ) { new_bh = old_bh ; get_bh ( new_bh ) ; <S2SV_ModStart>",0
396,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
397,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
398,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
399,"<S2SV_ModStart>, 1 ) ; if ( imbuf == NULL ) { return ( MagickFalse ) ; } for ( n = 0 ; n < 16 ; n ++ ) { sixel_palet [ n ] = sixel_default_color_table [ n ] ; } for ( r = 0 ; r < 6 ; r ++ ) { for ( g = 0 ; g < 6 ; g ++ ) { for ( b = 0 ; b < 6 ; b ++ ) { sixel_palet [ n ++ ] = SIXEL_RGB ( r * 51, g * 51, b * 51 ) ; } } } for ( i = 0 ; i < SIXEL_PALETTE_MAX ; i ++ ) { sixel_palet [ n ++ ] = SIXEL_RGB ( 255, 255, 255 ) ; } } for ( ; n < SIXEL_PALETTE_MAX ; n ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 255, 255, 255 ) ; } for ( ; n < SIXEL_PALETTE_MAX ; n ++ ) { sixel_palet [ n ] = SIXEL_RGB (",0
400,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * data = * ( ( vpx_ref_frame_t * * ) <S2SV_ModStart> vpx_ref_frame_t * ) ) <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; vpx_image2yuvconfig <S2SV_ModEnd> ( & frame <S2SV_ModStart> sd ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( ctx -> pbi -> flags & VP9_FLAG_HIGHBITDEPTH ) { vp9_copy_reference_dec ( ctx -> pbi, ( VP9_REFFRAME ) frame -> frame_type, & sd ) ; } else { vp9_copy_reference_dec ( ctx -> pbi, ( VP9_REFFRAME ) frame -> frame_type, & sd ) ; } # else return vp9_copy_reference_dec ( ctx -> pbi, ( VP9_REFFRAME ) frame -> frame_type, & sd ) ; # endif <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
401,"<S2SV_ModStart> i2_cur_mb_addr, u1_num_mbs, u1_num_mbsNby2 <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbsNby2, u1_num_mbsNby2 <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbsNby2, u1_num_mbsNby2 <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbsNby2, u1_num_mbsNby2 <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbsNby2, u1_num_mbsNby2 <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbsNby2, u1_num_mbsNby2 <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbsNby2, u1_num_mbsNby2 <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbsNby2, u1_num_mbsNby2 <S2SV_ModStart> i2_cur_mb_addr",0
402,"<S2SV_ModStart> ; UWORD32 u4_x_dst_offset <S2SV_ModEnd> = 0 ; <S2SV_ModStart> ) ; else { IMPEG2D_TRACE_MB_START ( ps_dec -> u2_mb_x, ps_dec -> u2_mb_y ) ; <S2SV_ModStart> ps_dec ) ; } <S2SV_ModStart> == B_PIC ) { IMPEG2D_TRACE_MB_START ( ps_dec -> u2_mb_x, ps_dec -> u2_mb_y ) ; <S2SV_ModStart> ps_dec ) ; } <S2SV_ModStart> == B_PIC ) { IMPEG2D_TRACE_MB_START ( ps_dec -> u2_mb_x, ps_dec -> u2_mb_y ) ; <S2SV_ModStart> ps_dec ) ; } <S2SV_ModStart> == B_PIC ) { IMPEG2D_TRACE_MB_START ( ps_dec -> u2_mb_x, ps_dec -> u2_mb_y ) ; <S2SV_ModStart> ps_dec ) ; } <S2SV_ModStart> == B_PIC ) { IMPEG2D_TRACE_MB_START ( ps_dec -> u2_mb_x, ps_dec -> u2_mb_y ) ; <S2SV_ModStart> ps_dec ) ;",0
403,<S2SV_ModStart> VP9_LAST_FLAG ) { int index = <S2SV_ModEnd> cm -> ref_frame_map <S2SV_ModStart> [ 0 ] ; YV12_BUFFER_CONFIG * const cfg = <S2SV_ModEnd> cm -> frame_bufs <S2SV_ModStart> -> frame_bufs [ index <S2SV_ModEnd> ]. buf,0
404,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
405,"<S2SV_ModStart> ; const TX_SIZE plane_bsize = get_plane_block_size ( bsize, pd ) ; const int num_4x4_w = num_4x4_blocks_wide_lookup [ plane_bsize ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ plane_bsize ] ; const int step = 1 << ( tx_size << 1 ) ; int i ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) { int r, c ; int max_blocks_wide = num_4x4_w ; int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> ( 5 + pd -> subsampling_y ) ) ; i = 0 ; for ( r =",0
406,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 4 ) ; <S2SV_ModEnd> src += src_stride",0
407,<S2SV_ModStart> { rowstoread = ( row + img -> row_offset ) <S2SV_ModEnd> % rowsperstrip ; <S2SV_ModStart> { rowstoread = ( row + img -> row_offset ) <S2SV_ModEnd> % rowsperstrip ; <S2SV_ModStart> { rowstoread = ( row + img -> row_offset ) <S2SV_ModEnd> % rowsperstrip ; <S2SV_ModStart> { rowstoread = ( row + img -> row_offset ) <S2SV_ModEnd> % rowsperstrip ; <S2SV_ModStart> { rowstoread = ( row + img -> row_offset ) <S2SV_ModEnd> % rowsperstrip ; <S2SV_ModStart> { rowstoread = ( row + img -> row_offset ) <S2SV_ModEnd> % rowsperstrip ; <S2SV_ModStart> { rowstoread = ( row + img -> row_offset ) <S2SV_ModEnd> % rowsperstrip ; <S2SV_ModStart> { rowstoread = ( row + img -> row_offset ) <S2SV_ModEnd> % rowsperstrip ; <S2SV_ModStart> { rowstoread = ( row + img -> row_offset ) <S2SV_ModEnd> % rowsperstrip ; <S2SV_ModStart> { rowstoread = ( row + img -> row_offset ) <S2SV_ModEnd> % rowsperstrip ; <S2SV_ModStart> { rowstoread = ( row + img -> row_offset ) <S2SV_ModEnd> % rowsperstrip ; <S2SV_ModStart> { rowstoread = ( row + img -> row,0
408,<S2SV_ModStart> ; } } <S2SV_ModEnd> return 0 ;,0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. be <S2SV_ModEnd> [ psf -> <S2SV_ModStart> [ psf -> header. be <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ; psf -> header. be <S2SV_ModEnd> [ psf -> <S2SV_ModStart> [ psf -> header. be <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
410,<S2SV_ModStart> num & ( 1U <S2SV_ModEnd> << ( number,0
411,"<S2SV_ModStart> ] ; const size_t <S2SV_ModEnd> w = vpx_img_plane_width <S2SV_ModStart>, 1, stride <S2SV_ModEnd>, file ) <S2SV_ModStart>!= w ) { fclose ( file ) ; <S2SV_ModStart> return 0 ; }",0
412,"<S2SV_ModStart> ; uint16_t attr_len <S2SV_ModEnd> ; uint16_t bytes_left <S2SV_ModStart> 1 ; } if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } attr_len = avp -> length - sizeof ( struct l2tp_avp_t ) ; MD5_Init ( & md5_ctx ) ; MD5_Update ( & md5_ctx, & avp -> type, sizeof ( avp -> type ) ) ; MD5_Update ( & md5_ctx, secret, secret_len ) ; MD5_Update ( & md5_ctx, RV -> val. octets, RV -> length ) ; MD5_Final ( p1, & md5_ctx ) ; if ( attr_len <= MD5_DIGEST_LENGTH ) { memxor ( avp -> val, p1, attr",0
413,<S2SV_ModStart> 1 ; case EVP_CTRL_AEAD_SET_IV : if ( arg <= 0 || arg > CHACHA_CTR_SIZE ) return 0 ; actx -> nonce [ 0 ] = actx -> key. counter [ 1 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr ) ; actx -> nonce [ 1 ] = actx -> key. counter [ 2 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 4 ) ; return 1 ; case EVP_CTRL_AEAD_SET_IV : if ( arg <= 0 || arg > CHACHA_CTR_SIZE ) return 0 ; actx -> nonce [ 0 ] = actx -> key. counter [ 1 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr ) ; actx -> nonce [ 1 ] = actx -> key. counter [ 2 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 4 ) ; return 1 ; case,0
414,"<S2SV_ModStart>, 0, comm_event -> comm_size <S2SV_ModEnd> ) ; if",0
415,"<S2SV_ModStart>, sk ) ; if (! sk ) return - EINVAL",0
416,"<S2SV_ModStart> MT_CPTYPE_PASSSALT ) { send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PLAINDATA ) { fwrite ( ( const void * ) cpkt. data, 1, cpkt. length, stdout ) ; } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 1 ; if ( is_a_tty ) { raw_term ( ) ; setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch ) ; } } success = parse_control_packet ( NULL, 0, & cpkt ) ; } else { success = parse_packet ( NULL, 0, & cpkt ) ; } } else if ( pkthdr. ptype == MT_PTYPE_ACK ) { struct mt_packet odata ; init_packet ( & odata, MT_PTYPE_END, srcmac, dstmac, sessionkey, pkthdr. counter + ( data_len - MT_HEADER_LEN ) ) ; send_udp ( & odata, 0 ) ;",0
417,<S2SV_ModStart> MUTT_ABORT ) { mutt_socket_close ( adata -> conn ) ; imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; mutt_socket_close ( adata -> conn ) ; imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ) ; mutt_socket_close ( adata -> conn ) ; imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } # <S2SV_ModStart> MUTT_ABORT ) { mutt_socket_close ( adata -> conn ) ; imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; mutt_socket_close ( adata -> conn ) ; imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; mutt_socket_close ( adata -> conn ) ; imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } # <S2SV_ModStart> MUTT_ABORT ) { mutt_socket_close ( adata -> conn ) ; imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; mutt_socket_close ( adata -> conn ),0
418,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
419,"<S2SV_ModStart> ) ) ; if ( <S2SV_ModStart>, 0 ) < 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModEnd> strcpy ( line <S2SV_ModStart> ) ) ; if ( <S2SV_ModStart>, 0 ) < 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModEnd> strcpy ( line <S2SV_ModStart> ) ) ; if ( <S2SV_ModStart>, 0 ) < 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModEnd> strcpy ( line <S2SV_ModStart> ) ) ; if ( <S2SV_ModStart>, 0 ) < 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModEnd> strcpy ( line <S2SV_ModStart> ) ) ; if ( <S2SV_ModStart>, 0 ) < 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModEnd> strcpy ( line <S2SV_ModStart> ) ) ; if ( <S2SV_ModStart>, 0 ) < 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModEnd> strcpy ( line <S2SV_ModStart> ) ) ; if ( <S2SV_ModStart>, 0 ) < 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModEnd> strcpy ( line <S2SV_ModStart> ) ) ; if ( <S2SV_ModStart>, 0 ) < 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModEnd> strcpy ( line <S2SV_ModStart> ) ) ; if (",0
420,"<S2SV_ModStart> remainder, & rlen ) ; if ( ret ) return ret ; if (! check_atype_tag ( a, & t ) ) return ASN1_BAD_ID ; if (! decode_atype_to_ptr ( & t, contents, clen, a, retrep ) ) return ASN1_BAD_ID <S2SV_ModEnd> ; if (",0
421,"<S2SV_ModStart> * slavename ; user = find_user ( curconn -> username ) ; if ( ( user = find_user ( curconn -> username ) )!= NULL ) { md5_state_t state ; # if defined ( __linux__ ) && defined ( _POSIX_MEMLOCK_RANGE ) mlock ( md5data, sizeof ( md5data ) ) ; mlock ( md5sum, sizeof ( md5sum ) ) ; if ( user -> password!= NULL ) { strncpy ( md5data, user -> password, 82 ) ; memcpy ( md5data + 1 + strlen ( user -> password ), curconn -> pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( user -> password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; md5sum [ 0 ] = 0 ; init_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr, pkthdr ->",0
422,"<S2SV_ModStart> ; if ( _PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart> { if ( _PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name,",0
423,<S2SV_ModStart> off } ; if (! str ) { return - 1 ; },0
424,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
425,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
426,"<S2SV_ModStart> size_t s ; s = exif_get_long ( o, EXIF_BYTE_ORDER_INTEL ) ; if ( s > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } <S2SV_ModStart> ; if ( s > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } if ( <S2SV_ModStart> ; if ( s > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } if ( <S2SV_ModStart> ; if ( s > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } if (",0
427,<S2SV_ModStart> bd_addr ) { int ret ; <S2SV_ModStart> return BT_STATUS_NOT_READY ; ret = <S2SV_ModEnd> btif_dm_remove_bond ( bd_addr <S2SV_ModStart> bd_addr ) ; return ret ;,0
428,"<S2SV_ModStart> int i ; size_t avail ; size_t <S2SV_ModEnd> expect ; txid <S2SV_ModStart> 4 ) ; expect = 8 + 8 + nxip * 8 ; if ( nxip < 0 || nxip > avail || expect > avail ) goto bad_format ; xmin = pq_getmsgint64 ( buf ) ; xmax = pq_getmsgint64 ( buf ) ; if ( xmin == 0 || xmin > xmax || xmax > MAX_TXID ) goto bad_format ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; snap -> nxip = nxip ; SET_VARSIZE ( snap, TXID_SNAPSHOT_SIZE ( nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last || cur < xmin || cur >= xmax ) goto bad_format ; snap -> xip [ i ] = cur ; last = cur ; } PG_RETURN_POINTER ( snap ) ; bad_format : elog ( ERROR, ""invalid <S2SV_blank> snapshot <S2SV_blank> data"" ) ; return ( Datum ) NULL <S2SV_ModEnd> ; } <S2SV_null>",0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
430,<S2SV_ModStart> ( epoll_ ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
431,"<S2SV_ModStart> new_service_options ) { s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; <S2SV_ModStart> ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Inetd <S2SV_blank> mode: <S2SV_blank> %s"", errstr ) ; else s_log ( LOG_ERR, ""Service <S2SV_blank> [%s]: <S2SV_blank> %s"", ( * section_ptr ) -> servname, errstr ) ; return 1 ; } } if ( eof ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_ERR, ""Inetd <S2SV_blank>",0
432,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_VERSION_MAX : * ( size_t * ) val = ms -> elf_version_max ; return 0 ;,0
433,<S2SV_ModStart> offset ) { struct address_space * mapping = page -> mapping ; journal_t * <S2SV_ModEnd> journal = EXT4_JOURNAL <S2SV_ModStart> = EXT4_JOURNAL ( <S2SV_ModEnd> mapping -> host,0
434,"<S2SV_ModStart> i + 1 ) ; if (! trak ) continue ; GF_SAFEALLOC ( writer, TrackWriter ) ; if (! writer ) goto exit ; writer -> sampleNumber = 1 ; writer -> mdia = trak -> Media ; writer -> stbl = trak -> Media -> information -> sampleTable ; writer -> timeScale = trak -> Media -> mediaHeader -> timeScale ; writer -> all_dref_mode = Media_SelfContainedType ( writer -> mdia ) ; if ( trak -> sample_encryption ) writer -> prevent_dispatch = GF_TRUE ; writer -> isDone = 0 ; writer -> chunkDur = 0 ; writer -> chunkDur = 0 ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STSC ) ; if (! writer -> stsc ) return GF_OUT_OF_MEM ; if ( writer -> stsc -> SampleSize -> sampleSize ) writer -> constant_size = writer -> stbl -> SampleSize -> sampleSize ; if ( writer -> stsc -> ChunkOffset -> type == GF_ISOM_BOX_TYPE",0
435,<S2SV_ModStart> 17 ] ; size_t <S2SV_ModEnd> plen ; md5_state_t <S2SV_ModStart> = 0 ; strlcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> = '\\0' ; strlcpy <S2SV_ModEnd> ( md5data +,0
436,<S2SV_ModStart> ; if ( _mibindex_max ) { int i ; for ( i = 0 ; i < _mibindex_max ; ++ i ) SNMP_FREE ( _mibindexes [ i ] ) ; _mibindex_max = 0 ; _mibindexes = NULL ; } if ( Prefix!= NULL && Prefix!= & Standard_Prefix [ 0 ] ) SNMP_FREE ( Prefix ) ; if ( Prefix ) Prefix = NULL ; if ( confmibs ) ; SNMP_FREE ( confmibdir ) ; if ( _mibindexes ) { int i ; for ( i = 0 ; i < _mibindex ; ++ i ) SNMP_FREE ( _mibindexes [ i ] ) ; _mibindex = 0 ; _mibindex_max = 0 ; _mibindexes = NULL ; } if ( <S2SV_ModStart> = NULL ; <S2SV_ModEnd> SNMP_FREE ( confmibs,0
437,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
438,<S2SV_ModStart> ( ) ; g_hash_table_remove_all ( headers ) ;,0
439,"<S2SV_ModStart> -> y_buffer ; # if CONFIG_VP9_HIGHBITDEPTH if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { for ( row = 0 ; row < src_ybc -> y_height ; ++ row ) { vpx_memcpy ( dst, src, src_ybc -> y_width ) ; src += src_ybc -> y_stride ; dst += dst_ybc -> y_stride ; } # else for ( row = 0 ; row < src_ybc -> y_height ; ++ row ) { vpx_memcpy ( dst, src, src_ybc -> y_width ) ; dst += src_ybc -> y_stride ; } # endif } # if CONFIG_VP9_HIGHBITDEPTH if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { for ( row = 0 ; row < src_ybc -> y_height ; ++ row ) { vpx_memcpy ( dst, src, src_ybc -> y_width ) ; src += src_ybc -> y_stride ; dst += dst_ybc -> y_stride ;",0
440,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_rd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart>,0
441,"<S2SV_ModStart>, obj_tlen ; u_int offset ; u_int link_type ; union { float f ; uint32_t i ; } bw ; tptr = pptr ; lmp_com_header = ( const struct lmp_common_header * ) pptr ; ND_TCHECK ( * lmp_com_header ) ; if ( LMP_EXTRACT_VERSION ( lmp_com_header -> version_res [ 0 ] )!= LMP_VERSION ) { ND_PRINT ( ( ndo, ""LMP <S2SV_blank> version <S2SV_blank> %u <S2SV_blank> packet <S2SV_blank> not <S2SV_blank> supported"", LMP_EXTRACT_VERSION ( lmp_com_header -> version_res [ 0 ] ) ) ) ; return ; } tlen = EXTRACT_16BITS ( lmp_com_header -> length ) ; ND_PRINT ( ( ndo, ""\\n\\tLMPv%u, <S2SV_blank> msg-type: <S2SV_blank> %s, <S2SV_blank> Flags: <S2SV_blank> [%s], <S2SV_blank> length: <S2SV_blank> %u"", LMP_EXTRACT_VERSION ( lmp_com_header -> version_res [ 0 ] ), tok2str ( lmp_msg_type_",0
442,"<S2SV_ModStart> * mbmi, nmv_context_counts * counts, <S2SV_ModStart> [ 2 ] <S2SV_ModEnd> ) { int <S2SV_ModStart> i ) { nmv_inc_mv ( counts, <S2SV_ModEnd> & mbmi -> <S2SV_ModStart> ]. as_mv <S2SV_ModEnd> ) ; }",0
443,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ),",0
444,"<S2SV_ModStart> ; if ( skb_out -> len + hdr_size > skb -> len ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; } skb_pull_rcsum ( skb_out, hdr_size ) ; memmove ( skb_out -> data - ETH_HLEN, skb_mac_header ( skb_out ), ETH_HLEN ) ; skb_set_mac_header ( skb_out, - ETH_HLEN ) ; skb_reset_network_header ( skb_out ) ; skb_reset_transport_header ( skb_out ) ; hlist_for_each_entry ( entry, chain, list ) { size = entry -> skb -> len - hdr_size ; memcpy ( skb_put ( skb_out, size ), entry -> skb -> data + hdr_size, size ) ; } free : batadv_frag_clear_chain ( chain ) ; return skb_out <S2SV_ModEnd> ; } <S2SV_null>",0
445,"<S2SV_ModStart> ) return ; DEBUGMSGTL ( ( ""init_mib"", ""Seen <S2SV_blank> MIBDIRS: <S2SV_blank> Looking <S2SV_blank> in <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> mib <S2SV_blank> dirs <S2SV_blank>...\\n"", env_var ) ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibdir ( entry ) ; entry = strtok_r ( NULL, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = netsnmp_getenv ( ""MIBFILES"" ) ; if ( env_var == NULL ) { if ( confmibs!= NULL ) env_var = strdup ( confmibs ) ; else env_var = strdup ( NETSNMP_DEFAULT_MIBS ) ; } else { <S2SV_ModStart> NULL ) ; }",0
446,"<S2SV_ModStart> { fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, O_RDWR ) ) <S2SV_ModStart> 1 ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_KEY ) ) <S2SV_ModStart> EV_REL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_SYN ) ) <S2SV_ModStart> x ++ ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> ]. mapped_id )",0
447,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
448,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s, <S2SV_ModStart> & 1 ) vpx_lpf_vertical_4 <S2SV_ModEnd> ( s +",0
449,"<S2SV_ModStart> krb5_alloc_context ( iakerb_ctx_id_t * <S2SV_ModStart> pctx ) { * pctx = NULL ; ctx = k5alloc ( sizeof ( * ctx ), & code ) ; if ( ctx == NULL ) goto cleanup ; ctx -> defcred = GSS_C_NO_CREDENTIAL ; ctx -> magic = KG_IAKERB_CONTEXT ; ctx -> state = IAKERB_AS_REQ ; ctx -> count = 0 ; code = krb5_gss_init_context ( & ctx -> k5c ) ; if ( code!= 0 ) goto cleanup ; * pctx = ctx ; ctx = k5alloc ( sizeof ( * ctx ), & code ) ; if ( ctx == NULL ) goto cleanup ; ctx -> defcred = KG_IAKERB_CONTEXT ; ctx -> magic = KG_IAKERB_CONTEXT ; ctx -> magic = KG_IAKERB_CONTEXT ; ctx -> state = IAKERB_AS_REQ ; ctx -> count = 0 ; code = krb5_gss_init_context ( & ctx -> k5c ) ; if ( code!= 0 ) goto cleanup",0
450,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> bitmapDC = CreateCompatibleDC",1
451,<S2SV_ModStart> ; while ( ( <S2SV_ModStart> )!= START_CODE_PREFIX ) && ( ps_stream -> u4_offset < ps_stream -> u4_max_offset ),1
452,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { ret = <S2SV_ModEnd> - EINVAL ; <S2SV_ModStart> - EINVAL ; goto out ; }",1
453,"<S2SV_ModStart> type_argv ) ; mono_class_inflate_generic_method <S2SV_ModEnd> ( method, <S2SV_ModStart> imethod ) ; mono_class_inflate_generic_method <S2SV_ModEnd> ( method, <S2SV_ModStart> imethod ) ; mono_class_inflate_generic_method <S2SV_ModEnd> ( method, <S2SV_ModStart> imethod ) ; mono_class_inflate_generic_method <S2SV_ModEnd> ( method, <S2SV_ModStart> imethod ) ; mono_class_inflate_generic_method <S2SV_ModEnd> ( method, <S2SV_ModStart> imethod ) ; mono_class_inflate_generic_method <S2SV_ModEnd> ( method, <S2SV_ModStart> imethod ) ; mono_class_inflate_generic_method <S2SV_ModEnd> ( method, <S2SV_ModStart> imethod ) ; mono_class_inflate_generic_method <S2SV_ModEnd> ( method, <S2SV_ModStart> imethod ) ; mono_class_inflate_generic_method <S2SV_ModEnd> ( method, <S2SV_ModStart> imethod ) ; mono_class_inflate_generic_method <S2SV_ModEnd> ( method, <S2SV_ModStart> imethod ) ; mono_class_inflate_generic_method <S2SV_ModEnd> ( method, <S2SV_ModStart> imethod ) ; mono_class_inflate_generic_method <S2SV_ModEnd> ( method,",0
454,<S2SV_ModStart> ; int tmp ; mutex_lock ( & exitcode_mutex ) <S2SV_ModStart> count ) ) { uml_exitcode = - EFAULT ; goto out ; } <S2SV_ModEnd> tmp = simple_strtol <S2SV_ModStart> end ) ) { uml_exitcode = - EINVAL ; goto out ; } <S2SV_ModEnd> uml_exitcode = tmp <S2SV_ModStart> = tmp ; out : mutex_unlock ( & exitcode_mutex ) ; return count <S2SV_ModEnd> ; } <S2SV_null>,0
455,"<S2SV_ModStart> is_path ) { <S2SV_ModEnd> do { if <S2SV_ModStart> size_t len ; char * last_elem, * wp ; last_elem = wp = result ; <S2SV_ModStart> ( ( ( name [ 1 ] == '{' && ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 9 )!= 0 ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( len = 11 )!= 0 ) ) ) ) { repl = ( ( len == 7 || name [ 2 ] == 'O' )? ( __libc_enable_secure? NULL : l -> l_origin ) : _dl_platform ) ; if ( repl!= NULL && repl!= ( const char * ) - 1 ) { wp = __stpcpy ( wp, repl ) ; name += len ; } else { wp = last_elem ; name += len ; while ( * name!= '\\0' && (! is_path || * name!= ':' ) ) ++ name ; } } else { wp = last_elem ; name += len ; while ( * name!= '\\0' && (! is_path || * name!= ':' )",0
456,"<S2SV_ModStart> ) H264SwDecMalloc ( sizeof ( decContainer_t ) ) ; if ( pDecCont == NULL ) { DEC_API_TRC ( ""H264SwDecInit# <S2SV_blank> ERROR: <S2SV_blank> Memory <S2SV_blank> allocation <S2SV_blank> failed"" ) ; return ( H264SWDEC_MEMFAIL ) ; } # ifdef H264DEC_TRACE sprintf ( pDecCont -> str, ""H264SwDecInit# <S2SV_blank> decInst <S2SV_blank> %p <S2SV_blank> noOutputReordering <S2SV_blank> %d"", ( void * ) decInst, noOutputReordering ) ; DEC_API_TRC ( pDecCont -> str ) ; # endif rv = h264bsdInit ( & pDecCont -> storage, noOutputReordering ) ; if ( rv!= HANTRO_OK ) { H264SwDecRelease ( pDecCont ) ; return ( H264SWDEC_MEMFAIL ) ; } pDecCont -> decStat = INITIALIZED ; pDecCont -> picNumber = 0 ; # ifdef H264DEC_TRACE sprintf ( pDecCont -> str, ""H264SwDecInit# <S2SV_blank> OK: <S2SV_blank> return <S2SV_blank> %p"", ( void * ) pDecCont )",0
457,"<S2SV_ModStart> drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> srr ) ) { struct in_device * in_dev = __in_dev_get_rcu ( dev ) ; if ( in_dev &&! IN_DEV_SOURCE_ROUTE ( in_dev ) ) goto drop ; if ( ip_options_rcv_srr ( skb ) ) goto drop ; } return 0 ; inhdr_error : IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INHDRERRORS ) ; <S2SV_ModEnd> return 0 ; <S2SV_ModStart> 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
458,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
459,<S2SV_ModStart> goto errout ; _ogg_free ( info -> stagemasks ) ; _ogg_free ( info -> stagebooks ) ;,0
460,<S2SV_ModStart> krb5_key_data * key_data = NULL <S2SV_ModStart> == NULL ) { err = ENOMEM ; <S2SV_ModStart> goto cleanup ; },0
461,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
462,<S2SV_ModStart> -> zInput = sqlite3_calloc <S2SV_ModEnd> ( nByte +,0
463,<S2SV_ModStart> filp ) { struct socket_info * si = <S2SV_ModEnd> SOCKET_I ( inode <S2SV_ModStart> ( inode ) ; mutex_lock ( & si -> i_mmap_mutex ) ; list_del_init ( & si -> i_mmap_entry ) ; mutex_unlock ( & si -> i_mmap_mutex,0
464,"<S2SV_ModStart>, expr_ty iter, asdl_seq * orelse, int lineno, int col_offset, int end_lineno, int end_col_offset, PyArena * arena ) { stmt_ty p ; if (! target ) { PyErr_SetString ( PyExc_ValueError, ""field <S2SV_blank> target <S2SV_blank> is <S2SV_blank> required <S2SV_blank> for <S2SV_blank> AsyncFor"" ) ; return NULL ; } if (! iter ) { PyErr_SetString ( PyExc_ValueError, ""field <S2SV_blank> iter <S2SV_blank> is <S2SV_blank> required <S2SV_blank> for <S2SV_blank> AsyncFor"" ) ; return NULL ; } if (! body ) { PyErr_SetString ( PyExc_ValueError, ""field <S2SV_blank> body <S2SV_blank> is <S2SV_blank> required <S2SV_blank> for <S2SV_blank> AsyncFor"" ) ; return NULL ; } p = ( stmt_ty ) PyArena_Malloc ( arena, sizeof ( * p ) ) ; if (! p ) return NULL ; p -> v. AsyncFor. orelse = orelse ; p -> v. AsyncFor. lineno = lineno ; p -> col_offset = col_offset ; p -> end_lineno = end_lineno ; p -> end_col_offset = end_col_offset ;",0
465,"<S2SV_ModStart> char * name, my_off_t * index_pos ) { reg2 uint key ; reg1 MI_KEYDEF * keyinfo ; File new_file ; my_off_t r_locks, w_locks ; MYISAM_SHARE * share = info -> s ; MI_STATE_INFO old_state ; DBUG_ENTER ( ""mi_sort_index"" ) ; for ( key = 0, keyinfo = & share -> keyinfo [ 0 ] ; key < share -> base. keys ; key ++, keyinfo ++ ) if ( keyinfo -> key_alg == HA_KEY_ALG_RTREE ) { DBUG_RETURN ( 0 ) ; } fn_format ( param -> temp_filename, name, """", MI_NAME_IEXT, 2 + 4 + 32 ) ; fn_format ( param -> temp_filename, param -> temp_filename, """", INDEX_TMP_EXT, 2 + 4 ) ; if ( ( new_file = mysql_file_create ( mi_key_file_datatmp, fn_format ( param -> temp_filename, param -> temp_filename, """", INDEX_TMP_EXT, 2",0
466,"<S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NG",0
467,"<S2SV_ModStart> UINT error ; if (! <S2SV_ModStart>, eventId ) ||! <S2SV_ModEnd> Stream_Read_UINT32 ( s <S2SV_ModStart>, pduLength ) ) { return CHANNEL_RC_INVALID_DATA ; } <S2SV_ModEnd> # ifdef WITH_DEBUG_RDPEI",0
468,"<S2SV_ModStart>, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_create <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"" <S2SV_ModEnd>, pData -> <S2SV_ModStart>, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_create <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"" <S2SV_ModEnd>, pData -> <S2SV_ModStart>, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_create <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"" <S2SV_ModEnd>, pData -> <S2SV_ModStart>, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_create <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"" <S2SV_ModEnd>, pData -> <S2SV_ModStart>, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_create <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"" <S2SV_ModEnd>, pData -> <S2SV_ModStart>, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_create <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"" <S2SV_ModEnd>, pData -> <S2SV_ModStart>, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket",0
469,"<S2SV_ModStart> struct flowi6 fl6 ; struct ip6_options_rcu * opt <S2SV_ModStart> daddr ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if (! opt ) { pr_debug ( ""%s: <S2SV_blank> skb:%p, <S2SV_blank> len:%d, <S2SV_blank> src:%pI6 <S2SV_blank> dst:%pI6\\n"", __func__, skb, skb -> len, & fl6, & fl6. saddr, & fl6. daddr ) ; SCTP_INC_STATS ( sock_net ( sk ), SCTP_MIB_OUTSCTPPACKS ) ; if (! ( transport -> param_flags & SPP_PMTUD_ENABLE ) ) skb -> local_df = 1 ; return ip6_xmit ( sk, skb, & fl6, opt, np -> tclass ) ; } <S2SV_ModStart>, skb, <S2SV_ModEnd> fl6, np",0
470,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
471,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
472,"<S2SV_ModStart> = 0 ; bn_t t ; bn_null ( t ) ; RLC_TRY { bn_new ( t ) ; switch ( operation ) { case RSA_ENC : bn_zero ( m ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, RSA_PUB ) ; * p_len = k_len - 3 - m_len ; for ( int i = 0 ; i < * p_len ; i ++ ) { bn_lsh ( m, m, 8 ) ; do { rand_bytes ( & pad, 1 ) ; } while ( pad == 0 ) ; bn_add_dig ( m, m, pad ) ; } bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, 0 ) ; bn_lsh ( m, m, m_len * 8 ) ; bn_lsh ( m, m, m_len * 8 ) ; break ; case RSA_DEC : m_len = k_len - 1 ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [",0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,<S2SV_ModStart> 8 ) ; <S2SV_ModEnd> psf = calloc <S2SV_ModStart> SF_PRIVATE ) ) ; if ( psf <S2SV_ModEnd> == NULL ),0
475,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fix_interp_filter ( VP9_COMMON <S2SV_ModStart> cm ) { int count [ SWITCHABLE_FILTERS ] ; int i, j, c = 0 ; for ( i = 0 ; i < SWITCHABLE_FILTERS ; ++ i ) { count [ i ] = 0 ; for ( j = 0 ; j < SWITCHABLE_FILTER_CONTEXTS ; ++ j ) count [ i ] += cm -> counts. switchable_interp [ j ] [ i ] ; c += ( count [ i ] > 0 ) ; } if ( c == 1 ) { for ( i = 0 ; i < SWITCHABLE_FILTERS ; ++ i ) { if ( count [ i ] ) { cm -> interp_filter = i ; break ; } } } } if ( c == 1 ) { for ( i = 0 ; i < SWITCHABLE_FILTERS ; ++ i ) { if ( count [ i ] ) { cm -> interp_filter = i ; break ; } } } } if ( c == 1 ) { for ( i = 0 ; i < SWITCHABLE_FILTERS ; ++ i ) {",0
476,"<S2SV_ModStart> & cpi -> encode_frame <S2SV_ModEnd> ; VP9_COMMON * <S2SV_ModStart> mi_cols ) ; <S2SV_ModEnd> vp9_setup_src_planes ( x <S2SV_ModStart> subsampling_y ) ; vpx_memset ( xd -> above_context [ 0 ], 0, sizeof ( * xd -> above_context [ 0 ] ) * 2 * aligned_mi_cols * MAX_MB_PLANE ) ; vpx_memset ( xd -> above_seg_context, 0, sizeof ( * xd -> above_seg_context ) * aligned_mi_cols ) ; x -> act_zbin_adj = 0 ; vpx_setup_src_planes ( x, cpi -> Source, 0, 0 ) ; vp9_setup_pre_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vpx_setup_dst_planes ( xd, get_frame_new_buffer ( cm ), 0, 0 ) ; vpx_setup_block_planes ( & x -> e_mbd, cm -> subsampling_x, cm -> subsampling_y )",0
477,"<S2SV_ModStart> hp ) ; if ( <S2SV_ModEnd> htc_request_check_host_hdr ( hp <S2SV_ModStart> ( hp ) <S2SV_ModEnd>!= 0 ) <S2SV_ModStart>, SLT_Error, ""Duplicated <S2SV_blank> HTTP <S2SV_blank> host <S2SV_blank> header"" <S2SV_ModEnd> ) ; return",0
478,"<S2SV_ModStart> EOFOp 0x07 char * magick_buffer <S2SV_ModEnd> ; Image * <S2SV_ModStart> char * ) magick_buffer <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> = ReadBlobLSBShort ( magick_buffer <S2SV_ModEnd> ) ; image <S2SV_ModStart> = ReadBlobLSBShort ( magick_buffer <S2SV_ModEnd> ) ; image <S2SV_ModStart> = ReadBlobLSBShort ( magick_buffer <S2SV_ModEnd> ) ; image <S2SV_ModStart> = ReadBlobByte ( magick_buffer <S2SV_ModEnd> ) ; if <S2SV_ModStart> = ReadBlobByte ( magick_buffer <S2SV_ModEnd> ) ; if <S2SV_ModStart> = ReadBlobByte ( magick_buffer <S2SV_ModEnd> ) ; if <S2SV_ModStart> = ReadBlobByte ( magick_buffer <S2SV_ModEnd> ) ; if <S2SV_ModStart> = ReadBlobByte ( magick_buffer <S2SV_ModEnd> ) ; if <S2SV_ModStart> = ReadBlobByte ( magick_buffer <S2SV_ModEnd> ) ; if <S2SV_ModStart> = ReadBlobByte ( magick_buffer <S2SV_ModEnd> ) ; if <S2SV_ModStart> = ReadBlobByte ( magick_buffer <S2SV_ModEnd> ) ; if <S2SV_ModStart> = ReadBlobByte ( magick_buffer <S2SV_ModEnd> ) ; if <S2SV_ModStart> = ReadBlobByte ( magick_buffer <S2SV_ModEnd> ) ; if <S2SV_ModStart> = ReadBlobByte ( magick_buffer <S2SV_ModEnd> ) ; if <S2SV_ModStart> = ReadBlob",0
479,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> sizeof ( tETH_HDR ),1
480,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ps_dec -> s_cur_slice <S2SV_ModStart> ps_dec -> s_cur_slice!= NULL && ps_dec -> s_cur_slice <S2SV_ModStart> ps_dec -> s_cur_slice!= NULL && ps_dec -> s_cur_slice <S2SV_ModStart> ; if ( <S2SV_ModEnd> ps_dec -> s_cur_slice <S2SV_ModStart> ps_dec -> s_cur_slice!= NULL && ps_dec -> s_cur_slice <S2SV_ModStart> ps_dec -> s_cur_slice!= NULL && ps_dec -> s_cur_slice <S2SV_ModStart> ; if ( <S2SV_ModEnd> ps_dec -> s_cur_slice <S2SV_ModStart> ps_dec -> s_cur_slice!= NULL && ps_dec -> s_cur_slice <S2SV_ModStart> ; if ( <S2SV_ModEnd> ps_dec -> s_cur_slice <S2SV_ModStart> ps_dec -> s_cur_slice!= NULL && ps_dec -> s_cur_slice <S2SV_ModStart> ; if ( <S2SV_ModEnd> ps_dec -> s_cur_slice <S2SV_ModStart> ps_dec -> s_cur_slice!= NULL && ps_dec -> s_cur_slice <S2SV_ModStart> ; if ( <S2SV_ModEnd> ps_dec -> s_cur_slice <S2SV_ModStart> ps_dec -> s_cur_slice!= NULL && ps_dec,0
481,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> * karg ; <S2SV_ModEnd> struct pci_dev * <S2SV_ModStart> pci_dev * pdev <S2SV_ModEnd> ; int iocnum <S2SV_ModStart> ( ( ( <S2SV_ModEnd> iocnum = mpt_verify_adapter",0
482,"<S2SV_ModStart> ; pixels = GetQuantumMemory ( image -> columns, 3 * sizeof ( * pixels ) ) ; if ( pixels == ( unsigned char * ) NULL ) ThrowReaderException ( ResourceLimitError, ""MemoryAllocationFailed"" ) ; length = ( size_t ) ( 3 * image -> columns ) ; for ( y = 0 ; y < ( ssize_t ) image -> rows ; y ++ ) { count = ReadBlob ( image, length, pixels ) ; if ( ( size_t ) count!= length ) ThrowReaderException ( CorruptImageError, ""UnableToReadImageData"" ) ; p = pixels ; q = QueueAuthenticPixels ( image, 0, y, image -> columns, 1, exception ) ; if ( q == ( PixelPacket * ) NULL ) break ; SetPixelRed ( q, ScaleCharToQuantum ( 4 * * p ++ ) ) ; SetPixelGreen ( q, ScaleCharToQuantum ( 4 * * p ++ ) ) ; SetPixelBlue ( q, ScaleCharToQuantum ( 4 * * p ++ ) ) ; q ++ ; } if ( SyncAuthenticPixels ( image, 0, y, image -> columns, 1, exception ) == MagickFalse )",0
483,"<S2SV_ModStart> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", <S2SV_ModEnd> argv ) ; <S2SV_ModStart> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", <S2SV_ModEnd> argv ) ; <S2SV_ModStart> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", <S2SV_ModEnd> argv ) ; <S2SV_ModStart> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", <S2SV_ModEnd> argv ) ; <S2SV_ModStart> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", <S2SV_ModEnd> argv ) ; <S2SV_ModStart> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", <S2SV_ModEnd> argv ) ; <S2SV_ModStart> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", <S2SV_ModEnd> argv ) ; <S2SV_ModStart> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", <S2SV_ModEnd> argv ) ; <S2SV_ModStart> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", <S2SV_ModEnd> argv ) ; <S2SV_ModStart> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", <S2SV_ModEnd> argv ) ; <S2SV_ModStart> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", <S2SV_ModEnd> argv ) ; <S2SV_ModStart> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", <S2SV_ModEnd> argv ) ; <S2SV_ModStart> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", <S2SV_ModEnd> argv ) ; <S2SV_ModStart> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", <S2SV_ModEnd> argv ) ; <S2SV_ModStart> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", <S2SV_ModEnd> argv ) ; <S2SV_ModStart> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", <S2SV_ModEnd> argv",0
484,"<S2SV_ModStart> ; if ( datao >= buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> order = EXIF_BYTE_ORDER_INTEL ; datao += exif_get_long ( buf + datao + 8, EXIF_BYTE_ORDER_INTEL ) ; if ( <S2SV_ModStart> ; if ( datao >= buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } c = exif_get_short ( buf + datao, EXIF_BYTE_ORDER_INTEL ) ; datao += 2 ; exif_mnote_data_fuji_clear ( n ) ; n -> entries = exif_mem_alloc ( en -> mem, sizeof ( MnoteFujiEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( en -> log, ""ExifMnote",0
485,"<S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large\\n"" <S2SV_ModEnd>, procName,",0
486,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> opt = service_options <S2SV_ModStart> service_options. next <S2SV_ModEnd> ; while ( <S2SV_ModStart> 0 ; } <S2SV_ModEnd> s_log ( LOG_DEBUG <S2SV_ModStart> servname ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
487,<S2SV_ModStart> void ) { if (! recovery_started ) return ;,0
488,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ;",0
489,"<S2SV_ModStart> image ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
490,"<S2SV_ModStart> ps_slice_hdr ) { dpb_mgr_t * ps_dpb_mgr = ( dpb_mgr_t * ) ps_codec -> pv_dpb_mgr ; buf_mgr_t * ps_mv_buf_mgr = ( buf_mgr_t * ) ps_codec -> pv_mv_buf_mgr ; <S2SV_ModStart>, st_rps_idx, u4_num_st_curr_before, u4_num_st_curr_after, u4_num_lt_curr, u4_num_lt_curr, u4_num_total_curr, ai1_curr_delta_poc_msb_present_flag [ MAX_DPB_SIZE ], ai1_foll_delta_poc_msb_present_flag [ MAX_DPB_SIZE ], u4_num_st_curr_before, u4_num_st_curr_after, u4_num_lt_curr, u4_num_lt_curr, u4_num_lt_curr, u4_num_total_curr, ai1_curr_delta_poc_ms",0
491,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> print_object ( cJSON <S2SV_ModStart> = 0 ; if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( names = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( names = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) { cJSON_free ( entries ) ; return 0 ; } memset ( names, 0, sizeof ( char * ) * numentries ) ; child = item -> child ; ++ depth ; if ( fmt ) len += depth ; while ( child ) { <S2SV_ModStart> child ) { <S2SV_ModEnd> str = print_string_ptr <S2SV_ModStart> string ) ; entries [ i ++ ] = ret = print_value ( child, depth, fmt ) ; if ( str && ret ) len += strlen ( ret ) + 2 + ( fmt? 2 + depth : 0 ) ; else fail = 1 ; child = child -> next ; } if (! fail ) { out = ( char * )",0
492,<S2SV_ModStart> sk ) ; if ( writable ) { unix_state_lock ( sk ) ; other = unix_peer ( sk ) ; if ( other && unix_peer ( <S2SV_ModEnd> other )!= <S2SV_ModStart> = 0 ; unix_state_unlock ( sk ) ; } <S2SV_ModEnd> } if (,0
493,"<S2SV_ModStart> h ) { fprintf ( stderr <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; fflush ( stderr ) ;",0
494,<S2SV_ModStart> ( OM_uint32 ) GSS_S_DEFECTIVE_TOKEN <S2SV_ModEnd> ; return GSS_S_DEFECTIVE_TOKEN <S2SV_ModStart> } if ( trailer -> buffer. length < token_wrapper_len ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } ptr = ( unsigned char * ) header -> buffer. value + token_wrapper_len ; signalg = ptr [ 0 ] ; signalg |= ptr [ 1 ] << 8 ; sealalg = ptr [ 2 ] ; sealalg |= ptr [ 3 ] << 8 ; if ( ptr [ 4 ]!= 0xFF || ptr [ 5 ]!= 0xFF ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } if (,0
495,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vp9_ref_frame_t * ) ; YV12_BUFFER_CONFIG * fb <S2SV_ModStart> NULL ) { <S2SV_ModEnd> vp9_get_reference_enc ( ctx",0
496,<S2SV_ModStart> plug ) ; <S2SV_ModEnd> put_ioctx ( ctx,0
497,"<S2SV_ModStart> * name, my_bool <S2SV_ModEnd> rep_quick ) { <S2SV_ModStart> ) ) || init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> read_buffer_length, WRITE_CACHE, share -> pack. header_length, 1, MYF ( MY_WME ) ) || <S2SV_ModStart> ) ) || init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, WRITE_CACHE, share -> pack. header_length, 1, MYF ( MY_WME ) ) ||",0
498,"<S2SV_ModStart> s } ; uECC_word_t p [ uECC_MAX_WORDS * 2 ] ; wordcount_t num_words = curve -> num_words ; wordcount_t num_n_words = BITS_TO_WORDS ( curve -> num_n_bits ) ; bitcount_t num_n_bits = curve -> num_n_bits ; if ( uECC_vli_isZero ( k, num_words ) || uECC_vli_cmp ( k, tmp, num_words )!= 1 ) { return 0 ; } carry = regularize_k ( k, tmp, s, curve ) ; EccPoint_mult ( p, curve -> G, k2 [! carry ], 0, num_n_bits + 1, curve ) ; if ( uECC_vli_isZero ( p, num_words ) ) { return 0 ; } if (! g_rng_function ) { uECC_vli_clear ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! uECC_generate_random_int ( tmp, curve -> n",0
499,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|dao-truncated]"" <S2SV_ModEnd> ) ) ;",0
500,<S2SV_ModStart> buf ; } <S2SV_ModEnd> uint32_t new_free_total = <S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
501,"<S2SV_ModStart> tp ; { if ( * cp == '\\\\' && cp [ 1 ] && index ( ""mM"", cp [ 1 ] ) && cp [ 2 ] ) { meta = 1 ; cp += 2 ; } if ( * cp == '\\\\' && cp [ 1 ] && index ( ""0123456789xXoO"", cp [ 1 ] ) && cp [ 2 ] ) { NEARDATA const char hex [ ] = ""00112233445566778899aAbBcCdDeEfF"" ; const char * dp ; int dcount = 0 ; cp ++ ; if ( * cp == 'x' || * cp == 'X' ) for ( ++ cp ; * cp && ( dp = index ( hex, * cp ) ) && ( dcount ++ < 2 ) ; cp ++ ) cval = ( cval * 16 ) + ( ( int ) ( dp - hex ) / 2 ) ; else if ( * cp == 'o' || * cp == 'O' ) for ( ++ cp ; * cp && ( index ( ""01234567"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 8 ) + ( * cp",0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
503,"<S2SV_ModStart> * lined ; PIXCMAP * cmap, * cmapd ; PROCNAME ( ""pixFewColorsOctcubeQuantMixed"" ) ; if (! pixs || pixGetDepth ( pixs )!= 32 ) return ( PIX * ) ERROR_PTR ( ""pixs <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 32 <S2SV_blank> bpp"", procName, NULL ) ; if ( darkthresh <= 0 ) darkthresh = 20 ; if ( lightthresh <= 0 ) lightthresh = 244 ; if ( diffthresh <= 0 ) diffthresh = 244 ; if ( minfract <= 0.0 ) minfract = 0.05 ; if ( maxspan <= 2 ) maxspan = 15 ; if ( ( pixc = pixFewColorsOctcubeQuant2 ( pixs, level ) ) == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; cmap = pixGetColormap ( pixc ) ; ncolors = pixcmapGetCount ( cmap ) ; cmapd = pixcmapCreate ( 8 ) ; lut = ( l_int32 * ) LEPT_CALLOC ( 256, sizeof ( l_int32 )",0
504,<S2SV_ModStart>. vf = vpx_mse16x16 <S2SV_ModEnd> ; xd ->,1
505,"<S2SV_ModStart> data ; int size = overhead ; if ( mongo_validate_ns ( conn, ns )!= MONGO_OK ) return MONGO_ERROR ; for ( i = 0 ; i < count ; i ++ ) { size += bson_size ( bsons [ i ] ) ; if ( mongo_bson_valid ( conn, bsons [ i ], 1 )!= MONGO_OK ) return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } mm = mongo_message_create ( size, 0, 0, MONGO_OP_INSERT ) ; data = & mm -> data ; if ( flags & MONGO_CONTINUE_ON_ERROR ) data = mongo_data_append32 ( data, & ONE ) ; else data = mongo_data_append32 ( data, & ZERO ) ; for ( i = 0 ; i < count ; i ++ ) { data = mongo_data_append ( data, bsons [ i ] -> data, bson_size ( bsons [ i",0
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NEGO_STATE_FAIL ; goto error <S2SV_ModEnd> ; } Stream_Read_UINT8 <S2SV_ModStart> = NEGO_STATE_FINAL ; return ; error : return ;,0
507,"<S2SV_ModStart> ; int i ; const double correction_factor = get_rate_correction_factor ( cpi ) ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; i = active_best_quality ; do { const int bits_per_mb_at_this_q = ( int ) vp9_rc_bits_per_mb ( cm -> frame_type, i, correction_factor ) ; if ( bits_per_mb_at_this_q <= target_bits_per_mb ) { if ( ( target_bits_per_mb - bits_per_mb_at_this_q ) <= last_error ) q = i ; else q = i - 1 ; break ; } else { last_error = bits_per_mb_at_this_q - target_bits_per_mb ; } } while ( ++ i <= active_worst_quality ) ; return q ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
508,<S2SV_ModStart> ; value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1101WritePhyReg (,0
509,<S2SV_ModStart>! arg ) { asdl_seq_free ( posargs ) ; return NULL ; } <S2SV_ModEnd> if (! <S2SV_ModStart>! arg ) { asdl_seq_free ( posdefaults ) ; return NULL ; } <S2SV_ModEnd> if (! <S2SV_ModStart>! arg ) { asdl_seq_free ( kwonlyargs ) ; return NULL ; } <S2SV_ModEnd> if (! <S2SV_ModStart>! arg ) { asdl_seq_free ( posdefaults ) ; return NULL ; } <S2SV_ModEnd> if (! <S2SV_ModStart>! arg ) { asdl_seq_free ( posdefaults ) ; return NULL ; } <S2SV_ModEnd> if (! <S2SV_ModStart>! arg ) { asdl_seq_free ( kwdefaults ) ; return NULL ; } <S2SV_ModEnd> if (! <S2SV_ModStart>! arg ) { asdl_seq_free ( vararg ) ; return NULL ; } <S2SV_ModEnd> if (! <S2SV_ModStart>! arg ) { asdl_seq_free ( posdefaults ) ; return NULL ; } <S2SV_ModEnd> if (! <S2SV_ModStart>! arg ) { asdl_seq_free ( kwdefaults ) ; return NULL ; } <S2SV_ModEnd> if (! <S2SV_ModStart>! arg ) { asdl_seq_free ( vararg ) ; return NULL ; } <S2SV_ModEnd> if (! <S2SV_ModStart>! arg ) { asdl_seq_free ( pos,0
510,"<S2SV_ModStart> int dst_stride, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart> int i ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> uint8_t, left_col <S2SV_ModEnd> ) ; DECLARE_ALIGNED <S2SV_ModStart> plane ] ; <S2SV_ModEnd> if ( plane <S2SV_ModStart> + y ; memset <S2SV_ModEnd> ( left_col, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( right_col, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; mem",0
511,"<S2SV_ModStart> ++ ; } else if ( pattern [ end ] == \'""\' ) { end ++ ; while ( ( pattern [ end ]!= 0 ) && ( pattern [ end ]!= \'""\' ) ) end ++ ; }",0
512,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_completed_io_lock ) ;,1
513,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> show_frame ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> KEY_FRAME ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; } vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
514,"<S2SV_ModStart> ; error : if ( parsetime_error!= NULL ) { fprintf ( stderr, ""Error <S2SV_blank> in <S2SV_blank> %s:%d: <S2SV_blank> %s\\n"", __FILE__, __LINE__, parsetime_error ) ; exit ( EXIT_FAILURE ) ; } <S2SV_ModStart> ; error : if ( parsetime_error!= NULL ) { fprintf ( stderr, ""Error <S2SV_blank> in <S2SV_blank> %s:%d: <S2SV_blank> %s\\n"", __FILE__, __LINE__, parsetime_error ) ; exit ( EXIT_FAILURE ) ; } <S2SV_ModStart> ; error : if ( parsetime_error!= NULL ) { fprintf ( stderr, ""Error <S2SV_blank> in <S2SV_blank> %s:%d: <S2SV_blank> %s\\n"", __FILE__, __LINE__, parsetime_error ) ; exit ( EXIT_FAILURE ) ; } <S2SV_ModStart> ; error : if ( parsetime_error!= NULL ) { fprintf ( stderr, ""Error <S2SV_blank> in <S2SV_blank> %s:%d: <S2SV_blank> %s\\n"", __FILE__, __LINE__, parsetime_error ) ; exit ( EXIT_FAILURE ) ; }",0
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { q = osStrchr <S2SV_ModEnd> ( p +,1
516,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
517,<S2SV_ModStart> KEY_FRAME ) { memcpy <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd ->,1
518,"<S2SV_ModStart> error_t error ; int16_t <S2SV_ModEnd> n ; uint32_t <S2SV_ModStart> ( interface, ENC624J600_ESTAT <S2SV_ModEnd> ) & ESTAT_PKTCNT <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL <S2SV_ModEnd>, ENC624J600_RX_BUFFER_STOP ) <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_ECON1 <S2SV_ModEnd>, ENC624J600_ECON1_STOP ) <S2SV_ModStart> ( interface, ENC624J600_ECON1 <S2SV_ModEnd>, ENC624J600_ECON1_",0
519,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv <S2SV_ModEnd> ) { xmlSchemaPtr <S2SV_ModStart> xmlSchemaPtr schema ; VALUE rb_schema ; VALUE errors = rb_ary_new ( ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; # ifdef HAVE_XMLSCHEMASETPARSERSTRUCTUREDERRORS xmlSchemaSetParserStructuredErrors ( ctx, Nokogiri_error_array_pusher, ( void * ) errors ) ; # endif schema = xmlSchemaParse ( ctx ) ; xmlSetStructuredErrorFunc ( NULL, NULL ) ; xmlSchemaFreeParserCtxt ( ctx ) ; if ( NULL == schema ) { xmlErrorPtr error = xmlGetLastError ( ) ; if ( error ) Nokogiri_error_raise ( NULL, error ) ; else rb_raise ( rb_eRuntimeError, ""Could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> document"" ) ; return Qnil ; } rb_schema = Data_Wrap_Struct ( klass, 0, dealloc, schema ) ; rb_iv_set ( rb_schema, ""@errors"", errors ) ; <S2SV_ModStart> content ) ) <S2SV_ModEnd> ; return rb_schema",0
520,"<S2SV_ModStart> ; } } if ( strlen ( line_text ) > CONFLINELEN ) { s_log ( LOG_ERR, ""Configuration <S2SV_blank> line <S2SV_blank> too <S2SV_blank> long: <S2SV_blank> %s"", line_text ) ; print_syntax ( ) ; return 1 ; } <S2SV_ModStart> 0 ) { if ( strlen ( line_text ) > CONFLINELEN ) { s_log ( LOG_ERR, ""Configuration <S2SV_blank> line <S2SV_blank> too <S2SV_blank> long: <S2SV_blank> %s"", line_text ) ; print_syntax ( ) ; return 1 ; } <S2SV_ModStart> 0 ) { if ( strlen ( line_text ) > CONFLINELEN ) { s_log ( LOG_ERR, ""Configuration <S2SV_blank> line <S2SV_blank> too <S2SV_blank> long: <S2SV_blank> %s"", line_text ) ; print_syntax ( ) ; return 1 ; } <S2SV_ModStart> 0 ) { if ( strlen ( line_text ) > CONFLINELEN ) { s_log ( LOG_ERR, ""Configuration <S2SV_blank> line <S2SV_blank> too <S2SV_blank> long: <S2SV_blank> %s"", line_text ) ; print_syntax ( ) ; return 1 ; } <S2SV_ModStart> 0 ) { if ( strlen ( line_text ) > CONFLINELEN ) { s_log ( LOG_ERR, ""Configuration <S2SV_blank> line <S2SV_blank> too <S2SV_blank> long",0
521,"<S2SV_ModStart> 2 ] ; } if ( state -> y >= state -> ysize ) return - 1 ; out = state -> buffer ; for ( x = 0 ; x < state -> xsize ; x ++ ) { out [ 0 ] = ptr [ x + state -> xsize ] ; out [ 1 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; out [ 2 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; } state -> shuffle ( ( UINT8 * ) im -> image [ state -> y ], state -> buffer, state -> xsize ) ; if ( ++ state -> y >= state -> ysize ) return - 1 ; out = state -> buffer ; for ( x = 0 ; x < state -> xsize ; x ++ ) { out [ 0 ] = ptr [ x + state -> xsize ] ; out [ 1 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; out [ 2 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; }",0
522,<S2SV_ModStart> err = - <S2SV_ModEnd> EALREADY ; if <S2SV_ModStart> - EINVAL ; spin_lock ( & po -> bind_lock ) ; if ( po -> running && <S2SV_ModEnd> match -> type <S2SV_ModStart> ; } } spin_unlock ( & po -> bind_lock ) ; if ( err &&! refcount_read ( & match -> sk_ref ) ) { list_del ( & match -> list ) ; kfree ( match ) ; },1
523,<S2SV_ModStart> POLL_IN ) ; <S2SV_ModEnd> perf_event_wakeup ( handle,0
524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> u16 * <S2SV_ModEnd> utf8s_to_utf16s ( const <S2SV_ModStart> len, wchar_t * <S2SV_ModStart> = pwcs ; if ( len < 0 ) return NULL ; <S2SV_ModStart> if ( u > <S2SV_ModEnd> PLANE_SIZE ) { <S2SV_ModStart> PLANE_SIZE ) { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( u & SURROGATE_BITS ) ) ; } else { * op ++ = ( wchar_t ) u ; } s += size ; len -= size ; } else { * op ++ = * s ++ ; len -- ; } } return <S2SV_ModEnd> op - pwcs <S2SV_ModStart> pwcs ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
525,"<S2SV_ModStart> EPROTONOSUPPORT ) { crm_warning <S2SV_ModEnd> ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" ) <S2SV_ModStart> EPROTONOSUPPORT ) { crm_warning <S2SV_ModEnd> ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" ) <S2SV_ModStart> EPROTONOSUPPORT ) { crm_warning <S2SV_ModEnd> ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" ) <S2SV_ModStart> EPROTONOSUPPORT ) { crm_warning <S2SV_ModEnd> ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" ) <S2SV_ModStart> EPROTONOSUPPORT ) { crm_warning <S2SV_ModEnd> ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" ) <S2SV_ModStart> EPROTONOSUPPORT ) { crm_warning <S2SV_ModEnd> ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" ) <S2SV_ModStart> E",0
526,"<S2SV_ModStart> ( interface, KSZ8851_RXFHSR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXMR | KSZ8851_RXFHSR_RXFTL | KSZ8851_RXFHSR_RXRF | KSZ8851_RXFHSR_RXCE <S2SV_ModEnd> ) ) == <S2SV_ModStart> ( interface, KSZ8851_RXFDPR, KSZ8851_RXFDPR_RXFPAI <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851ReadFifo <S2SV_ModStart> ( interface, KSZ8851_RXFDPR, KSZ8851_RXFDPR_RXFPAI <S2SV_ModEnd> ) ; ancillary <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_RRXEF <S2SV_ModEnd> ) ; return",0
527,"<S2SV_ModStart> ast_for_funcdef_impl ( struct compiler * compiler, const node * n, asdl_seq * decorator_seq, int is_async ) { identifier name ; arguments_ty args ; asdl_seq * body ; expr_ty returns = NULL ; int name_i = 1 ; node * tc ; string type_comment = NULL ; if ( c -> c_feature_version < 5 ) { ast_error ( c, n, ""Async <S2SV_blank> functions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.5 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } REQ ( n, funcdef ) ; name = NEW_IDENTIFIER ( CHILD ( n, name_i ) ) ; if (! name ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i ), 0 ) ) return NULL ; args = ast_for_arguments ( c, CHILD ( n, name_i + 1 ) ) ; if (! args ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 2 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name",0
528,"<S2SV_ModStart> ( mm, 0xA00000 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( pgd, 0xA00000 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( pud, 0xA00000 <S2SV_ModEnd> ) ; split_huge_page_pmd <S2SV_ModStart>, pmd, 0xA00000 <S2SV_ModEnd>, & ptl <S2SV_ModStart> : flush_tlb ( ) ; mm_dec_nr_pmds ( mm",0
529,"<S2SV_ModStart> ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; sn_coap_protocol_free ( handle, dst_coap_msg_ptr -> token_ptr ) ; <S2SV_ModStart> ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; sn_coap_protocol_free ( handle, dst_coap_msg_ptr -> token_ptr ) ; <S2SV_ModStart> ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; sn_coap_protocol_free ( handle, dst_coap_msg_ptr -> token_ptr ) ; <S2SV_ModStart> ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; sn_coap_protocol_free ( handle, dst_coap_msg_ptr -> token_ptr ) ; <S2SV_ModStart> ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; sn_coap_protocol_free ( handle, dst_co",0
530,"<S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> ADB <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" <S2SV_ModEnd> ) ; print_usage <S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> ADB <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" <S2SV_ModEnd> ) ; print_usage <S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> ADB <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" <S2SV_ModEnd> ) ; print_usage <S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> ADB <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" <S2SV_ModEnd> ) ; print_usage <S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> ADB <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" <S2SV_ModEnd> ) ; print_usage <S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> ADB <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" <S2SV_ModEnd> ) ; print_usage <S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> ADB <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" <S2SV_ModEnd> ) ; print_usage <S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> ADB",0
531,"<S2SV_ModStart> 0 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif <S2SV_ModStart> row ++ ) <S2SV_ModEnd> for ( col <S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD <S2SV_ModStart> ; } } # else for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { if ( ( RAW ( row, col ) = pred [ col & 1 ] ) > 4098 && col < width ) derror ( ) ; } } # endif",0
532,"<S2SV_ModStart> ; if (! nl ) { param -> flags |= DM_BUFFER_FULL_FLAG ; goto out ; } param -> data_size = param -> data_start + needed ; nl -> dev = 0 ; for ( i = 0 ; i < NUM_BUCKETS ; i ++ ) { list_for_each_entry ( hc, _name_buckets + i, name_list ) { if ( old_nl ) old_nl -> next = ( uint32_t ) ( ( void * ) nl - ( void * ) orig_nl ) ; disk = dm_disk ( hc -> md ) ; nl -> dev = huge_encode_dev ( disk_devt ( disk ) ) ; strcpy ( nl -> name, hc -> name ) ; old_nl = nl ; event_nr = align_ptr ( hc -> name + strlen ( hc -> name ) + 1 ) ; * event_nr = dm_get_event_nr ( hc -> md ) ; nl = align_ptr ( event_nr + 1 ) ; } } BUG_ON ( ( char * ) nl - ( char * ) orig_nl!= needed ) ; out : up_write ( & _hash_",0
533,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
534,<S2SV_ModStart> ( bfqq ) __bfq_idle_slice_timer_body <S2SV_ModEnd> ( bfqq ),0
535,<S2SV_ModStart> ; length += sizeof ( PRIMARY_DRAWING_ORDER_FIELD ) <S2SV_ModEnd> ; length +=,0
536,<S2SV_ModStart> d_inode ) ; dput ( old ) ; <S2SV_ModStart> d_inode ) ; dput ( new ) ; <S2SV_ModStart> d_inode ) ; dput ( old ) ; <S2SV_ModStart> d_inode ) ; dput ( new ) ; <S2SV_ModStart> d_inode ) ; dput ( old ) ; <S2SV_ModStart> d_inode ) ; dput ( new ) ; <S2SV_ModStart> d_inode ) ; dput ( old ) ; <S2SV_ModStart> d_inode ) ; dput ( new ) ; <S2SV_ModStart> d_inode ) ; dput ( new ) ; <S2SV_ModStart> d_inode ) ; dput ( old ) ; <S2SV_ModStart> d_inode ) ; dput ( new ) ; <S2SV_ModStart> d_inode ) ; dput ( new ) ; <S2SV_ModStart> d_inode ) ; dput ( old ) ; <S2SV_ModStart> d_inode ) ; dput ( new ) ; <S2SV_ModStart> d_inode ) ; dput ( new ) ; <S2SV_ModStart> d_inode ) ; dput ( new ) ; <S2SV_ModStart> d_inode ) ; dput ( new ) ; <S2SV_ModStart> d_inode ) ; dput ( new ) ; <S2SV_ModStart> d_inode ) ; dput ( new ) ; <S2SV_ModStart> d_inode ) ;,0
537,<S2SV_ModStart> < MAX_MB_PLANE ; ++ plane <S2SV_ModEnd> ) vp9_foreach_transformed_block_in_plane (,1
538,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> nonrd_pick_sb_modes ( VP9_COMP <S2SV_ModStart> -> e_mbd ; if (! frame_is_intra_only ( cm ) ) { vp9_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } else { MB_PREDICTION_MODE intramode = DC_PRED ; set_mode_info ( & xd -> mi [ 0 ] -> mbmi, bsize, intramode ) ; } <S2SV_ModStart> bsize ) ; <S2SV_ModEnd> duplicate_mode_info_in_sb ( cm",0
539,"<S2SV_ModStart> = NULL ; if ( strcmp ( filename, ""-"" ) ) fclose ( reader. fhd ) ; <S2SV_ModStart> superblock ) ; <S2SV_ModEnd> hrtf = getHrtf",0
540,"<S2SV_ModStart> -> ranges = calloc ( 1, <S2SV_ModEnd> sizeof ( MappedRange",0
541,"<S2SV_ModStart> ; if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF | VP8_EFLAG_FORCE_GF | VP8_EFLAG_FORCE_ARF ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_ALTR_FRAME ; vp8_use_as_reference ( ctx -> cpi,",0
542,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
543,<S2SV_ModStart> ; if ( WARN_ON_ONCE ( <S2SV_ModStart>! head ) ) <S2SV_ModEnd> return - EINVAL <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,1
544,"<S2SV_ModStart> * pptr, u_int64 <S2SV_ModEnd> len ) { <S2SV_ModStart> len ) { u_int64 <S2SV_ModEnd> i ; uint16_t <S2SV_ModStart> advance ; u_int64 <S2SV_ModEnd> tlen ; const <S2SV_ModStart> len ) ; if ( tlen < 2 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> len ) ; if ( tlen < 2 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> len ) ; if ( tlen < 2 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> len ) ; if ( tlen < 2 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> len ) ; if ( tlen < 2 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> len ) ; if ( tlen < 2 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> len ) ; if ( tlen < 2 ) { ND_PRINT ( ( ndo, """,0
545,"<S2SV_ModStart> -> outputbuffer, ""<tr><td>Stackfile</td><td>%s</td></tr>"" <S2SV_ModEnd>, Run. <S2SV_ModStart> -> outputbuffer, ""<tr><td>Stackfile</td><td>%s</td></tr>"" <S2SV_ModEnd>, Run. <S2SV_ModStart> -> outputbuffer, ""<tr><td>Stackfile</td><td>%s</td></tr>"" <S2SV_ModEnd>, Run. <S2SV_ModStart> -> outputbuffer, ""<tr><td>Stackfile</td><td>%s</td></tr>"" <S2SV_ModEnd>, Run. <S2SV_ModStart> -> outputbuffer, ""<tr><td>Stackfile</td><td>%s</td></tr>"" <S2SV_ModEnd>, Run. <S2SV_ModStart> -> outputbuffer, ""<tr><td>Stackfile</td><td>%s</td></tr>"" <S2SV_ModEnd>, Run. <S2SV_ModStart> -> outputbuffer, ""<tr><td>Stackfile</td><td>%s</td></tr>"" <S2SV_ModEnd>, Run. <S2SV_ModStart> -> outputbuffer, ""<tr><td>Stackfile</td><td>%s</td></tr>"" <S2SV_ModEnd>, Run. <S2SV_ModStart> -> outputbuffer, ""<tr><td>Stackfile</td><td>%s</td></tr>"" <S2SV_ModEnd>, Run.",0
546,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
547,"<S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr1, <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2, <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr1 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr1 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr1 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr1 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr1 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart>",0
548,"<S2SV_ModStart> iad_num ++ ; if ( iad_num >= USB_MAXINTERFACES ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, nintf_orig, USB_MAXINTERFACES ) ; nintf = USB_MAXINTERFACES ; }",0
549,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
550,<S2SV_ModStart> ; distortion = vpx_variance16x16 <S2SV_ModEnd> ( * (,1
551,"<S2SV_ModStart> interface ) ; <S2SV_ModEnd> if ( macCompAddr <S2SV_ModStart> ) ) { enc624j600WriteReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> temp ) ; enc624j600WriteReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> temp ) ; enc624j600WriteReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> ] ) ; enc624j600WriteReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> ] ) ; enc624j600WriteReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> ] ) ; enc624j600WriteReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> ] ) ; enc624j600WriteReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> ] ) ; enc624j600WriteReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> ] ) ; enc624j600WriteReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> ] ) ; enc624j600WriteReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> ] ) ; enc624j600WriteReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> ] ) ; enc624j600WriteReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> ] ) ; enc624j600WriteReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> ] ) ; enc624j600WriteReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> ] ) ; enc624j600WriteReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> ] ) ; enc624j600WriteReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> ] ) ;",0
552,"<S2SV_ModStart> * start ; va_start ( argptr, format ) ; vsnprintf ( psf -> header, sizeof ( psf -> header ), format, argptr ) ; va_end ( argptr ) ; <S2SV_ModStart> header ) ; <S2SV_ModEnd> va_start ( argptr <S2SV_ModStart> = 0 ; <S2SV_ModEnd> return ; }",0
553,<S2SV_ModStart> -> alg_priv ) { # if CONFIG_VP9_HIGHBITDEPTH if ( ctx -> iface -> destroy ) <S2SV_ModStart> alg_priv ) ; # endif ctx -> iface = NULL ; ctx -> name = NULL ; ctx -> priv = NULL ; res = VPX_CODEC_OK ; } else { # if CONFIG_VP9_HIGHBITDEPTH if ( ctx -> iface -> destroy ) ctx -> iface -> destroy ( ctx -> priv -> alg_priv ) ; # endif ctx -> priv = NULL ; res = VPX_CODEC_OK ; } # if CONFIG_VP9_HIGHBITDEPTH if ( ctx -> iface -> destroy ) ctx -> iface -> destroy ( ctx -> iface ) ; # endif ctx -> name = NULL ; ctx -> name = NULL ; ctx -> priv = NULL ; res = VPX_CODEC_OK ; } # if CONFIG_VP9_HIGHBITDEPTH if ( ctx -> iface -> destroy ) ctx -> iface -> destroy ( ctx -> iface ) ; # endif,0
554,"<S2SV_ModStart> { sf -> recode_loop = ( speed < 1 )? ALLOW_RECODE : ALLOW_RECODE_KFMAXBW ; sf -> allow_skip_recode = 1 ; if ( speed >= 1 ) { sf -> use_square_partition_only =! frame_is_intra_only ( cm ) ; sf -> less_rectangular_check = 1 ; sf -> tx_size_search_method = vp9_frame_is_boosted ( cpi )? USE_FULL_RD : USE_LARGESTALL ; if ( MIN ( cm -> width, cm -> height ) >= 720 ) sf -> disable_split_mask = cm -> show_frame? DISABLE_ALL_SPLIT : DISABLE_ALL_INTER_SPLIT ; else sf -> disable_split_mask = DISABLE_COMPOUND_SPLIT ; sf -> use_rd_breakout = 1 ; sf -> adaptive_motion_search = 1 ; sf -> auto_mv_step_size = 1 ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_y_mode",0
555,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ]. poll_count ),0
556,"<S2SV_ModStart> ) + 2 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else condmovestack ( L, { }, { } ) ; luaE_shrinkCI ( L ) ; inuse = stackinuse ( L ) ; goodsize = inuse + ( inuse / 8 ) + 2 * EXTRA_STACK ; if ( goodsize > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else condmovestack ( L, { }, { } ) ; luaD_shrinkCI ( L ) ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else condmovestack ( L, { }, { } ) ; luaE_shrinkCI (",0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,"<S2SV_ModStart>, * s ; char * ch, s_kind [ 3 ] = { 0, 0, 0 } ; ch = s_kind ; raw = s ; while ( * raw && * raw!= '\\'' && * raw!= \'""\' ) { * ch ++ = * raw ++ ; } kind = PyUnicode_FromString ( s_kind ) ; if (! str ) { # ifdef Py_USING_UNICODE if ( PyErr_ExceptionMatches ( PyExc_UnicodeError ) ) { PyObject * type, * value, * tback, * errstr ; PyErr_Fetch ( & type, & value, & tback ) ; errstr = PyObject_Str ( value ) ; if ( errstr ) { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } Py_DECREF ( type ) ; Py_DECREF ( value ) ; Py_XDECREF ( tback ) ; } # endif return NULL ; } PyArena_AddPyObject ( c -> c_arena, str ) ; return Str ( str, kind, LINENO ( n ), n -> n_col_offset, c -> c_arena",0
559,"<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> break ; } input_string = strdup ( options ) ; option_name = strtok_r ( option_name, ""="", & input_ptr ) ; while ( option_name!= NULL ) { option_value = strtok_r ( NULL, "" <S2SV_blank> "", & input_ptr ) ; if ( option_value == NULL ) { svc_log ( svc_ctx, SVC_LOG_ERROR, ""option <S2SV_blank> missing <S2SV_blank> value: <S2SV_blank> %s\\n"", option_name ) ; res = VPX_CODEC_INVALID_PARAM ; break ; } if ( strcmp ( ""encoding-mode"", option_name ) == 0 ) { res = set_option_encoding_mode ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""layers"", option_name ) == 0 ) { svc_ctx -> spatial_layers = atoi ( option_value ) ; } else if ( strcmp ( ""scale-factors"", option_name ) == 0 ) { res = parse_scale_factors",0
560,<S2SV_ModStart> ) ; } <S2SV_ModEnd> mb_index = 0 <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; },0
561,<S2SV_ModStart> self ) { size_t <S2SV_ModEnd> i ; PyObject,1
562,,1
563,"<S2SV_ModStart> ) ) { if ( mysql_errno ( imp_dbh -> pmysql )!= 0 ) { PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""mysql_errno(%d) <S2SV_blank> = <S2SV_blank> %s <S2SV_blank> (%s)\\n"", mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ) ) ; } else { PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""mysql_errno(%d) <S2SV_blank> = <S2SV_blank> %s <S2SV_blank> (%s)\\n"", mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ) ) ; } <S2SV_ModEnd> return FALSE ;",0
564,<S2SV_ModStart> ) || ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> & size ) ) ) { <S2SV_ModEnd> BTA_JvRfcommWrite ( slot <S2SV_ModStart> id ) ; pthread_mutex_lock ( & slot_lock ) ; } <S2SV_ModStart> = 0 ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> & size ) ) { <S2SV_ModEnd> cleanup_rfc_slot ( slot <S2SV_ModStart> slot ) ; pthread_mutex_unlock ( & slot_lock ) ; },0
565,<S2SV_ModStart> ; struct ieee_802_11_phdr * phdr = NULL <S2SV_ModEnd> ; col_set_str ( <S2SV_ModStart> struct ieee_802_11_phdr * phdr = NULL <S2SV_ModEnd> ; phdr = <S2SV_ModStart> struct ieee_802_11_phdr * phdr = NULL <S2SV_ModEnd> ; phdr = <S2SV_ModStart> struct ieee_802_11_phdr * phdr = NULL <S2SV_ModEnd> ; phdr = <S2SV_ModStart> struct ieee_802_11_phdr * phdr = NULL <S2SV_ModEnd> ; phdr = <S2SV_ModStart> struct ieee_802_11_phdr * phdr = NULL <S2SV_ModEnd> ; phdr = <S2SV_ModStart> struct ieee_802_11_phdr * phdr = NULL <S2SV_ModEnd> ; phdr = <S2SV_ModStart> struct ieee_802_11_phdr * phdr = NULL <S2SV_ModEnd> ; phdr = <S2SV_ModStart> struct ieee_802_11_phdr * phdr = NULL <S2SV_ModEnd> ; phdr = <S2SV_ModStart> struct ieee_802_11_phdr * phdr = NULL <S2SV_ModEnd> ; phdr = <S2SV_ModStart> struct ieee_802_11_phdr * phdr = NULL <S2SV_ModEnd> ; phdr = <S2SV_ModStart> struct ieee_802_,0
566,"<S2SV_ModStart> * fp ; size_t alloclen = hdrlen + initlen + 1 ; <S2SV_ModStart> = s_malloc ( alloclen ) ; if ( sh == NULL ) return NULL ; if ( init == SDS_NOINIT ) init = NULL ; else if (! init ) memset ( sh, 0, alloclen ) ; s = ( char * ) sh + hdrlen ; fp = ( ( unsigned char * ) s ) - 1 ; switch ( type ) { case SDS_TYPE_5 : { * fp = type | ( initlen << SDS_TYPE_BITS ) ; sh -> len = initlen ; sh -> alloc = initlen ; * fp = type ; break ; } case SDS_TYPE_8 : { SDS_HDR_VAR ( 8, s ) ; sh -> len = initlen ; sh -> alloc = initlen ; * fp = type ; break ; } case SDS_TYPE_16 : { SDS_HDR_VAR ( 16, s ) ; sh -> len = initlen ; sh -> alloc = initlen ; * fp = type ; break ; } case SDS_TYPE_32 : { SDS_HDR_VAR ( 32",0
567,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> BYTE a_val ; if (! context ) return FALSE ; <S2SV_ModStart> -> ColorLossLevel ; if (! context -> priv -> PlaneBuffers ) return FALSE ; <S2SV_ModStart> ; } } return TRUE ;,0
568,<S2SV_ModStart> > nr_parens ) { ret = <S2SV_ModEnd> - EINVAL ; <S2SV_ModStart> - EINVAL ; goto out_free ; },0
569,"<S2SV_ModStart> cpi ) { int target ; if ( cpi -> common. current_video_frame == 0 ) { const int initial_boost = 32 ; int kf_boost = MAX ( initial_boost, ( int ) ( 2 * cpi -> output_framerate - 16 ) ) ; if ( rc -> frames_since_key < cpi -> output_framerate / 2 ) { kf_boost = ( int ) ( kf_boost * rc -> frames_since_key / ( cpi -> output_framerate / 2 ) ) ; } target = ( ( cpi -> oxcf. starting_buffer_level / 2 ) > INT_MAX )? INT_MAX : ( int ) ( cpi -> oxcf. starting_buffer_level / 2 ) ; } else if ( rc -> frames_since_key < cpi -> output_framerate / 2 ) { kf_boost = ( int ) ( kf_boost * rc -> frames_since_key / ( cpi -> output_framerate / 2 ) ) ; } target = ( ( cpi -> oxcf. starting_buffer_level / 2 ) * rc -> av_per_frame",0
570,"<S2SV_ModStart> TX_MODE read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r )",1
571,"<S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd>",0
572,"<S2SV_ModStart> -> cpi ; MACROBLOCK_INFO * const p = & cpi -> mb. plane [ plane ] ; struct macroblockd_plane * pd = & xd -> plane [ plane ] ; MB_MODE_INFO * mbmi = & xd -> mi [ 0 ] -> mbmi ; int pt ; int c ; TOKENEXTRA * t = * tp ; int eob = p -> eobs [ block ] ; const PLANE_TYPE type = pd -> plane_type ; const int16_t * qcoeff = BLOCK_OFFSET ( p -> qcoeff, block ) ; const int segment_id = mbmi -> segment_id ; const int16_t * scan, * nb ; const scan_order * so ; const int ref = is_inter_block ( mbmi ) ; unsigned int ( * const counts ) [ COEFF_CONTEXTS ] [ ENTROPY_TOKENS ] = cpi -> coef_counts [ tx_size ] [ type ] [ ref ] ; vp9_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi <S2SV_ModEnd> -> common. <S2SV_ModStart>. fc. <S2SV_ModEnd> coef_probs [ tx",0
573,"<S2SV_ModStart>. pRename ; if ( pSelect == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; } if ( pSelect -> pSrc == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; } for ( i = 0 ; i < pSelect -> pSrc -> nSrc ; i ++ ) { struct SrcList_item * pItem = pSelect -> pSrc -> a [ i ] ; if ( pItem -> pTab == p -> pTab ) { renameTokenFind ( pWalker -> pParse, p, pItem -> zName ) ; } } renameWalkWith ( pWalker, pSelect ) ; <S2SV_ModStart> -> pSrc ; <S2SV_ModEnd> for ( i",0
574,"<S2SV_ModStart> users ) ; cb_info -> serv = serv = svc_create ( & nfs4_callback_program, NFS4_CALLBACK_BUFSIZE, sv_ops ) ; if (! serv ) { printk ( KERN_ERR ""nfs_callback_create_svc: <S2SV_blank> create <S2SV_blank> service <S2SV_blank> failed\\n"" ) ; return ERR_PTR ( - ENOMEM ) ; } cb_info -> serv = serv ; serv -> sv_maxconn = 1024 ; dprintk ( ""nfs_callback_create_svc: <S2SV_blank> service <S2SV_blank> created\\n"" ) ; <S2SV_ModStart> sv_ops ) ; <S2SV_ModEnd> return serv ;",0
575,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
576,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
577,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
578,"<S2SV_ModStart> s ) { if (! TEMP_FAILURE_RETRY ( <S2SV_ModStart> s, 0 ) ) ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d"", sock_fd, errno ) ; return - 1 ; } ret = TEMP_FAILURE_RETRY ( <S2SV_ModEnd> send ( sock_fd <S2SV_ModStart>, 0 ) <S2SV_ModEnd> ) ; if",0
579,"<S2SV_ModStart> = NULL ; if ( __xml_acl_check ( xml, NULL, xpf_acl_read ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else { char * path = xml_get_path ( xml ) ; crm_trace ( ""Cannot <S2SV_blank> add <S2SV_blank> new <S2SV_blank> node <S2SV_blank> %s <S2SV_blank> at <S2SV_blank> %s"", crm_element_name ( xml ), path ) ; if ( xml!= xmlDocGetRootElement ( xml -> doc ) ) { xmlUnlinkNode ( xml ) ; xmlFreeNode ( xml ) ; } free ( path ) ; return ; } } else { char * path = xml_get_path ( xml ) ; crm_trace ( ""Cannot <S2SV_blank> add <S2SV_blank> new <S2SV_blank> node <S2SV_blank> %s <S2SV_blank> at <S2SV_blank> %",0
580,<S2SV_ModStart> <S2SV_null> static const SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> return ( const SvcInternal_t <S2SV_ModEnd> * ) svc_ctx,1
581,"<S2SV_ModStart> ) ; } if ( hkey. type == HASH_KEY_IS_LONG ) { zend_hash_update ( params, hkey. str, hkey. len, ( void * ) & tmp, sizeof ( zval * ), ( void * ) & args, sizeof ( zval * ), ( void * ) & args ) ; * current_param = args ; }",0
582,"<S2SV_ModStart> only_420 ) { <S2SV_ModEnd> int ret ; <S2SV_ModStart> = VPX_IMG_FMT_I420 ; <S2SV_ModEnd> if ( strcmp <S2SV_ModStart> ( stderr, ""Input <S2SV_blank> video <S2SV_blank> is <S2SV_blank> interlacing <S2SV_blank> format <S2SV_blank> unknown; <S2SV_blank> "" <S2SV_ModEnd> ""assuming <S2SV_blank> progressive <S2SV_blank> scan <S2SV_blank> handled.\\n"" ) ; <S2SV_ModStart> ( stderr, ""Input <S2SV_blank> video <S2SV_blank> is <S2SV_blank> interlacingd; <S2SV_blank> "" <S2SV_ModEnd> ""Only <S2SV_blank> progressive <S2SV_blank> scan <S2SV_blank> handled.\\n"" ) ; <S2SV_ModStart> ( stderr, ""Input <S2SV_blank> video <S2SV_blank> is <S2SV_blank> interlacingd; <S2SV_blank> "" <S2SV_ModEnd> ""assuming <S2SV_blank> progressive <S2SV_blank> scan <S2SV_blank> handled.\\n"" ) ; <S2SV_ModStart> ( stderr, ""Input <S2SV_blank> video <S2SV_blank> is <S2SV_blank> interlacing <S2SV_blank> format <S2SV_blank> unknown; <S2SV_blank> "" <S2SV_ModEnd> ""assuming <S2SV_blank> progressive <S2SV_blank> scan <S2SV_blank> handled.\\n"" ) ; <S2SV_ModStart> ( stderr, ""Input <S2SV_blank> video <S2SV_blank> is <S2SV_blank> interlacingd; <S2SV_blank> "" <S2SV_ModEnd> ""Only <S2SV_blank> progressive <S2SV_blank> scan <S2SV_blank> handled.\\n"" ) ; <S2SV_ModStart> ( stderr, ""Input <S2SV_blank> video <S2SV_blank> is <S2SV_blank> interlacingd; <S2SV_blank> "" <S2SV_ModEnd> ""assuming <S2SV_blank> progressive <S2SV_blank> scan <S2SV_blank> handled.\\n"" ) ; <S2SV_ModStart> ( stderr, ""Input <S2SV_blank> video <S2SV_blank>",0
583,"<S2SV_ModStart> buf ; { if ( strlen ( buf ) >= 60 ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; }",0
584,<S2SV_ModStart> ( ) { <S2SV_ModEnd> if ( read_xattrs_from_disk <S2SV_ModStart> == 0 ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( read_uids_guids <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( parse_exports_table <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( read_fragment_table <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( read_inode_table <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( read_directory_table <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_,0
585,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModStart> root ) ; <S2SV_ModEnd> if ( rule <S2SV_ModStart> ; } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
586,"<S2SV_ModStart> -> seg ; vpx_memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> cm -> mi_cols <S2SV_ModEnd> ) ; vp9_enable_segmentation <S2SV_ModStart> ; } } vpx_memset ( cpi -> segmentation_map, 0, cm -> mi_rows * cm -> mi_cols ) ; vpx_memset ( cpi -> complexity_map, 0, cm -> mi_rows * cm -> mi_cols ) ; vp9_clearall_segfeatures ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vp9_disable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> frame_type, cm -> base_qindex, in_frame_q_adj_ratio [ segment ] ) ; vp9_enable_segfeature ( seg, segment, SEG_LVL_ALT_Q ) ; vp9_set_segdata ( seg, segment, SEG_LV",0
587,"<S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, stmt_type",0
588,"<S2SV_ModStart> ) ; } int fd = open ( log_path, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH ) ; if ( fd < 0 ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, log_path, strerror ( errno ) ) ; is_logging = false ; return ; } fd = open ( log_path, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH ) ; if ( fd < 0 ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, log_path, strerror ( errno ) ) ; is_logging = false ; return ; } fd = open ( log_path, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR",0
589,<S2SV_ModStart> ) ; } if ( m == B_PRED ) { unsigned int * const bct = is_key? b_modes : inter_b_modes ; int b = 0 ; do { ++ bct [ xd -> block [ b ]. bmi. mode ] ; } while ( ++ b < 16 ) ; } if ( m == B_PRED ) { unsigned int * const bct = is_key? b_modes : inter_b_modes ; int b = 0 ; do { ++ bct [ xd -> block [ b ]. bmi. mode ] ; } while ( ++ b < 16 ) ; } if ( m == B_PRED ) { unsigned int * const bct = is_key? b_modes : inter_b_modes ; int b = 0 ; do { ++ bct [ xd -> block [ b ]. bmi. mode ] ; } while ( ++ b < 16 ) ; } if ( m == B_PRED ) { unsigned int * const bct = is_key? b_modes : inter_b_modes ; int b = 0 ; do { ++ bct [ b ] ; } while ( ++ b < 16 ) ; },0
590,"<S2SV_ModStart> cinput ) { char * s, * t, * StartClean ; double * argbuf = 0 ; SetDefaults ( ) ; s = cinput ; while ( * s!= '[' ) s ++ ; t ++ ; * t ++ = 0 ; while ( * t =='<S2SV_blank>'|| * t == '\\t' || * t == '\\n' ) t ++ ; outpos = outputbuffer ; outpos += sprintf ( outpos, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"", s, t, TERMCHAR ) ; if ( * s == '0' && s [ 1 ] == ']' ) { if ( strcmp ( nameobject, ""AxodrawWantsPDF"" ) == 0 ) { identification = 1 ; outpos += sprintf ( outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", VERSION, SUBVERSION ) ; fprintf ( outfile, ""%s"", outputbuffer ) ; return ( 0 ) ; } else { fprintf ( stderr, ""%s: <S2SV_blank> Illegal <S2SV_blank> request <S2SV_blank> in <S2SV_blank> identification <S2SV_blank> string <S2SV_blank> [0]: <S2SV_blank> %s\\n"", axohelp",0
591,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = lookup_attr",0
592,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
593,"<S2SV_ModStart> int err ; tos_off = proto == htons ( ETH_P_IP )? 16 : 20 ; val = be32_to_cpu ( knode -> sel -> keys [ 0 ]. val ) >> tos_off & 0xff ; mask = be32_to_cpu ( knode -> sel -> keys [ 0 ]. mask ) >> tos_off & 0xff ; list_for_each_entry ( iter, & alink -> dscp_map, list ) { u32 cmask ; if ( iter -> handle == knode -> handle ) { match = iter ; continue ; } cmask = iter -> mask & mask ; if ( ( iter -> val & cmask ) == ( val & cmask ) && iter -> band!= knode -> res -> classid ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; } } cmask = iter -> mask & mask ; if ( ( iter -> val & cmask ) == ( val & cmask ) && iter -> band!= knode -> res -> classid ) { NL_SET_ERR_MSG",0
594,<S2SV_ModStart> ) ; } if ( stream -> config. cfg. g_pass == VPX_RC_ONE_PASS ) stream -> config. cfg. g_pass = VPX_RC_LAST_PASS ; else if ( stream -> config. cfg. g_pass == VPX_RC_FIRST_PASS ) stream -> config. cfg. g_pass = VPX_RC_FIRST_PASS ; else if ( stream -> config. cfg. g_pass == VPX_RC_LAST_PASS ) stream -> config. cfg. g_pass = VPX_RC_LAST_PASS ; else if ( stream -> config. cfg. g_pass == VPX_RC_FIRST_PASS ) stream -> config. cfg. g_pass = VPX_RC_FIRST_PASS ; else if ( stream -> config. cfg. g_pass == VPX_RC_ONE_PASS ) stream -> config. cfg. g_pass = VPX_RC_ONE_PASS ; <S2SV_ModStart> stats ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
595,"<S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( data, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( data, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( data, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( data, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( data, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( data, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( data, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( data, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( data, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( data, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( data, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( data, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( data, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( data, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( data, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( data, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( data",0
596,"<S2SV_ModStart> data_end ) { vpx_reader r ; assert ( tile_rows <= 4 ) ; assert ( tile_cols <= ( 1 << 6 ) ) ; vpx_memset ( cm -> above_context, 0, sizeof ( * cm -> above_context ) * MAX_MB_PLANE * 2 * aligned_cols ) ; vpx_memset ( cm -> above_seg_context, 0, sizeof ( * cm -> above_seg_context ) * aligned_cols ) ; for ( tile_row = 0 ; tile_row < tile_rows ; ++ tile_row ) { for ( tile_col = 0 ; tile_col < tile_cols ; ++ tile_col ) { int last_tile = tile_row == tile_rows - 1 && tile_col == tile_cols - 1 ; const int last_tile = tile_row == tile_rows - 1 && tile_col == tile_cols - 1 ; const size_t size = get_tile ( data_end, last_tile, & cm -> error, & data ) ; TileBuffer * const buf = & tile_buffers [ tile_row ] [ tile_col ] ; buf -> data = data",0
597,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> * vp9_decoder_create ( <S2SV_ModEnd> VP9D_CONFIG * oxcf <S2SV_ModStart> pbi ) ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> = 1 ; vpx_init_dec <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ) ) ; vpx_memset ( & pbi -> ref_frame_map, - 1, sizeof ( pbi -> ref_frame_map ) ) ; pbi -> oxcf = * oxcf ; pbi -> ready_for_new_data = 1 ; pbi -> decoded_key_frame = 0 ; vp9_init_dequantizer ( cm ) ; vp9_loop_filter_init ( cm ) ; cm -> error. setjmp = 0 ; vp9_worker_init ( & pbi -> lf_worker ) ; return pbi <S2SV_ModEnd> ; } <S2SV_null>",0
598,"<S2SV_ModStart>, GF_LOG_CONTAINER, <S2SV_ModEnd> ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) <S2SV_ModStart> GF_ISOM_BOX_TYPE_DREF ) ; if (! ( ( GF_DataInformationBox * ) s ) -> dref ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
599,<S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> -> opt ; <S2SV_ModEnd> cipso_v4_delopt ( &,0
600,"<S2SV_ModStart> tokens, const vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> do { const vpx_tree_index <S2SV_ModEnd> j = tree",1
601,"<S2SV_ModStart> = VPX_CODEC_OK ; pick_quickcompress_mode ( ctx, duration, deadline ) ; vpx_codec_pkt_list_init ( & ctx -> pkt_list ) ; if ( ( ( flags & VP8_EFLAG_NO_REF_LAST ) && ( flags & VP8_EFLAG_NO_REF_GF ) && ( flags & VP8_EFLAG_FORCE_GF ) ) || ( ( flags & VP8_EFLAG_NO_UPD_LAST ) && ( flags & VP8_EFLAG_NO_UPD_ARF ) && ( flags & VP8_EFLAG_FORCE_ARF ) ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_UPD_ARF | VP8_EFLAG_FORCE_GF | VP8_EFLAG_FORCE_ARF",0
602,"<S2SV_ModStart> 0 ) { if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } newseq = realloc ( seq, ( count + 1 ) * elemtype -> size ) ; if ( newseq == NULL ) { ret = ENOMEM ; goto error ; } seq = newseq ; elem = ( char * ) seq + count * elemtype -> size ; memset ( elem, 0, elemtype -> size ) ; ret = decode_atype ( & t, contents, clen, elemtype, elem ) ; if ( ret ) goto error ; count ++ ; } <S2SV_ModStart>, & len <S2SV_ModEnd> ) ; if",0
603,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> in ) { memset ( s, 0, 16 ) ; memset ( x, 0, 16 ) ; memset ( u, 0, 32 ) ; memset ( v, 0, 32 ) ; memset ( s, 0, 16 ) ; memset ( s + 1, 0, 16 ) ; memset ( s + 2, 0, 16 ) ; memset ( s + 3, 0, 16 ) ; memset ( s + 4, 0, 16 ) ; memset ( s + 5, 0, 16 ) ; memset ( s + 6, 0, 16 ) ; memset ( s + 7, 0, 16 ) ; memset ( s + 8, 0, 16 ) ; memset ( s + 9, 0, 16 ) ; memset ( s + 10, 0, 16 ) ; memset ( s + 11, 0, 16 ) ; memset ( s + 12, 0, 16 ) ; memset ( s + 13, 0, 16 ) ; memset ( s + 14, 0, 16 ) ; memset ( s + 15, 0,",0
604,"<S2SV_ModStart> rc, const VP9EncoderConfig <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> ) rc -> avg_frame_bandwidth <S2SV_ModEnd> * ( int64_t",1
605,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
606,"<S2SV_ModStart> * cpi, <S2SV_ModEnd> int mi_row, <S2SV_ModStart> BLOCK_SIZE bsize ) { VP9_COMMON * const cm = & cpi -> common ; MACROBLOCK * const x = & cpi -> mb ; MACROBLOCKD * const xd = & x -> e_mbd ; MODE_INFO * * mi_8x8 = xd -> mi ; MB_MODE_INFO * mi = mi_8x8 [ 0 ] ; MODE_CONTEXT * ctx = get_block_context ( x, bsize ) ; unsigned int segment_id = mbmi -> segment_id ; const int mis = cm -> mi_stride ; const int mi_width = num_8x8_blocks_wide_lookup [ bsize ] ; const int mi_height = num_8x8_blocks_high_lookup [ bsize ] ; x -> skip_recode =! x -> select_txfm_size && mbmi -> sb_type >= BLOCK_8X8 && cpi -> oxcf. aq_mode!= COMPLEXITY_AQ && cpi -> sf. allow_skip_recode ; x -> skip_optimize = ctx -> is_coded ;",0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
608,"<S2SV_ModStart> range_max ) { size_t <S2SV_ModEnd> value ; int <S2SV_ModStart> position, zeroes <S2SV_ModEnd> ; char bits <S2SV_ModStart> gbc ) ; if ( get_bits_left ( gbc ) < zeroes ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits1 ( gbc ) ) { bits [ i ++ ] = '1' ; break ; } else { bits [ i ++ ] = '0' ; ++ zeroes ; } } if ( zeroes >= 32 ) { value = MAX_UINT_BITS ( 32 ) ; } else { value = get_bits_long ( gbc, zeroes ) ; for ( j = 0 ; j < zeroes ; j ++ ) bits [ i ++ ] = ( value >> ( zeroes - j - 1 ) & 1 )? '1' : '0' ; value += ( 1 << zeroes ) - 1 ; } if ( ctx -> trace_enable ) { bits [ i ] = 0 ; ff_cbs_trace_syntax_element",0
609,"<S2SV_ModStart> c ) || _strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> c ) || _strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> c ) || _strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> c ) || _strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> c ) || _strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> c ) || _strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> c ) || _strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> c ) || _strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> c ) || _strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> c ) || _strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> c ) || _strchr <S2SV_ModEnd> ( ""!#$%&\'",0
610,"<S2SV_ModStart>, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_origin. ptr = NULL, packet -> http_origin. len = 0, packet -> http_x_session_type. ptr = NULL, packet -> http_x_session_type. len = 0, packet -> server_line. ptr = NULL, packet -> server_line. len = 0, packet -> http_num_headers = 0, packet -> <S2SV_ModStart> = 0, <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
611,"<S2SV_ModStart> 4 ) { if ( x + 4 > dds_info -> width || y + 4 > dds_info -> height ) return MagickFalse ; <S2SV_ModStart>, y, <S2SV_ModEnd> dds_info -> height <S2SV_ModStart> dds_info -> height, exception ) ; if ( q == ( PixelPacket * ) NULL ) return MagickFalse ; c0 = ReadBlobLSBShort ( image ) ; c1 = ReadBlobLSBShort ( image ) ; bits = ReadBlobLSBLong ( image ) ; CalculateColors ( c0, c1, & colors, MagickFalse ) ; for ( j = 0 ; j < 4 ; j ++ ) { for ( i = 0 ; i < 4 ; i ++ ) { if ( ( x + i ) < ( ssize_t ) dds_info -> width && ( y + j ) < ( ssize_t ) dds_info -> height ) { code = ( unsigned char ) ( ( bits >> ( ( j * 4 + i ) * 2 ) ) & 0x3 ) ; SetPixelRed ( q, ScaleCharToQuantum ( colors. r [ code ] ) ) ; SetPixelGreen ( q, ScaleCharToQuantum ( colors",0
612,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL ) <S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL )",1
613,<S2SV_ModStart> action ) { if ( w < 0 ) w = 0 ; if ( h < 0 ) h = 0 ; if ( w > INT_MAX / w ) w = INT_MAX / w ; if ( h > INT_MAX / h ) h = INT_MAX / h ; if ( w > INT_MAX / w ) w = INT_MAX / w ; if ( h > INT_MAX / h ) h = INT_MAX / h ; if ( w > INT_MAX / w ) w = INT_MAX / w ; if ( h > INT_MAX / h ) h = INT_MAX / h ; if ( w > INT_MAX / w ) w = INT_MAX / w ; if ( h > INT_MAX / h ) h = INT_MAX / h ; if ( w > INT_MAX / w ) w = INT_MAX / w ; if ( h > INT_MAX / h ) h = INT_MAX / h ; if ( w > INT_MAX / w ) w = INT_MAX / w ; if ( h > INT_MAX / h ) h = INT_MAX / h ; if ( w > INT_MAX / w ) w = INT_,0
614,"<S2SV_ModStart> ) ) { printf ( <S2SV_ModEnd> ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", x11 <S2SV_ModStart> y ) ; printf ( "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
615,"<S2SV_ModStart> ( AUTODETECT_TAG, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU\\n"" <S2SV_ModEnd> ) ; Stream_Read_UINT32",0
616,"<S2SV_ModStart> recon_y_stride, recon_uv_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> recon_y_stride, recon_uv_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> recon_uv_stride, recon_y_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> recon_uv_stride, recon_uv_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> recon_y_stride, recon_uv_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> recon_y_stride, recon_uv_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> recon_uv_stride, recon_uv_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> recon_y_stride, recon_uv_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> recon_uv_stride, recon_y_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> recon_uv_stride, recon_uv_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> recon_y_stride, recon_uv_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> recon_y_stride, recon_uv_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> recon_uv_stride, recon_uv_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> recon_y_stride, recon_uv_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> recon_uv_stride, recon_uv_stride <S2SV_ModEnd> ) ;",0
617,<S2SV_ModStart> # if CONFIG_MULTITHREAD <S2SV_ModEnd> vp8_decoder_remove_threads ( pbi,1
618,<S2SV_ModStart> { if ( ( <S2SV_ModStart> xWantedSize > 0 ) && ( xWantedSize < xFreeBytesRemaining ) <S2SV_ModStart> portBYTE_ALIGNMENT_MASK ) ) ; } else { mtCOVERAGE_TEST_MARKER ( ) ; } } else { mtCOVERAGE_TEST_MARKER ( ) ; } if ( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) ) { pxPreviousBlock = & xStart ; pxBlock = xStart. pxNextFreeBlock ; while ( ( pxBlock -> xBlockSize < xWantedSize ) && ( pxBlock -> pxNextFreeBlock!= NULL ) ) { pxPreviousBlock = pxBlock ; pxBlock = pxBlock -> pxNextFreeBlock ; } if ( ( pxBlock -> xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE ) { pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize ) ; pxNewBlockLink -> xBlockSize = pxBlock -> xBlockSize - xWantedSize ; pxNewBlockLink -> xBlockSize = xWantedSize ; prvInsertBlockInto,0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,"<S2SV_ModStart> s ) { uint32 <S2SV_ModEnd> num_updates ; uint16 <S2SV_ModStart>, Debug, ""%s()\\n"" <S2SV_ModEnd>, __func__ ) <S2SV_ModStart> ++ ) { in_uint32_le ( s, left ) ; in_uint32_le ( s, top ) ; in_uint32_le ( s, right ) ; in_uint32_le ( s, bottom ) ; in_uint32_le ( s, width ) ; in_uint32_le ( s, bpp ) ; Bpp = ( bpp + 7 ) / 8 ; in_uint32_le ( s, compress ) ; in_uint32_le ( s, bufsize ) ; cx = right - left + 1 ; cy = bottom - left + 1 ; logger ( Graphics, Debug, ""process_bitmap_updates(), <S2SV_blank> [%d,%d,%d], <S2SV_blank> [%d,%d], <S2SV_blank> bpp=%d, <S2SV_blank> compression=%d"", left, top, right, bottom, width, height, Bpp, compress ) ; if (! compress ) { int y ; bmpdata = ( uint8 * ) xmalloc ( width * height * Bpp ) ; for ( y = 0 ; y <",0
621,"<S2SV_ModStart> } else { ovalue = strim ( option, ""\\""\'"", MPR_TRIM_BOTH ) ; if ( smatch ( option, ""size"" ) ) { size = ( ssize ) getnum ( ovalue ) ; } else if ( smatch ( option, ""level"" ) ) { level = atoi ( ovalue ) ; } else if ( smatch ( option, ""backup"" ) ) { backup = atoi ( ovalue ) ; } else { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> ErrorLog <S2SV_blank> option <S2SV_blank> %s"", option ) ; } } else if ( smatch ( option, ""anew"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""stamp"" ) ) { stamp = httpGetTicks ( ovalue ) ; } } if ( size < ( 10 * 1000 ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Size <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small. <S2SV_blank> Must <S2SV_blank> be <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> 10K"" ) ; return MPR_ERR_BAD_SYNTAX ; } if ( path == 0",0
622,"<S2SV_ModStart> tx_size, vp9_coeff_stats coef_stats <S2SV_ModEnd> ) { vp9_coeff_probs_model <S2SV_ModStart> tx_size ] ; vpx_coeff_counts <S2SV_ModEnd> * coef_counts = <S2SV_ModStart> l ) { vpx_tree_probs_from_distribution <S2SV_ModEnd> ( vp9_coef_tree, <S2SV_ModStart> m ) coef_probs [ i ] [ j ] [ k ] [ l ] [ m ] = get_binary_prob ( coef_branch_ct [ i ] [ j ] [ k ] [ l ] [ 0 ], coef_branch_ct [ i ] [ j ] [ k ] [ l ] [ 1 ] ) ; } } } } for ( i = 0 ; i < PLANE_TYPES ; ++ i ) { for ( j = 0 ; j < REF_TYPES ; ++ j ) { for ( k = 0 ; k < COEF_BANDS ; ++ k ) { for ( l = 0 ; l < BAND_COEFF_CONTEXTS ( k ) ; ++ l ) { vp9_tree_probs_from_distribution ( vp9_coef_tree, coef_counts [ i ] [ j ] [ k ] [ l ], coef_",0
623,"<S2SV_ModStart> { } ; if (! access_ok ( VERIFY_READ, fd, F_OK ) ) return - EBADF <S2SV_ModEnd> ; r =",0
624,"<S2SV_ModStart> struct dvb_usb_adapter * adap <S2SV_ModEnd> ) { u8 <S2SV_ModStart> ( dvb_usb_generic_rw ( adap <S2SV_ModEnd> -> dev, <S2SV_ModStart> ( dvb_usb_generic_rw ( adap <S2SV_ModEnd> -> dev, <S2SV_ModStart> ( dvb_usb_generic_rw ( adap <S2SV_ModEnd> -> dev, <S2SV_ModStart> ( dvb_usb_generic_rw ( adap <S2SV_ModEnd> -> dev, <S2SV_ModStart> ( dvb_usb_generic_rw ( adap <S2SV_ModEnd> -> dev, <S2SV_ModStart> ( dvb_usb_generic_rw ( adap <S2SV_ModEnd> -> dev, <S2SV_ModStart> ( dvb_usb_generic_rw ( adap <S2SV_ModEnd> -> dev, <S2SV_ModStart> ( dvb_usb_generic_rw ( adap <S2SV_ModEnd> -> dev, <S2SV_ModStart> ( dvb_usb_generic_rw ( adap <S2SV_ModEnd> -> dev, <S2SV_ModStart> ( dvb_usb_generic_rw ( adap <S2SV_ModEnd> -> dev, <S2SV_ModStart> ( dvb_usb_generic_rw ( adap <S2SV_ModEnd> -> dev, <S2SV_ModStart> ( dvb_usb_generic_rw ( adap <S2SV_ModEnd> -> dev, <S2SV_ModStart> ( dvb_usb_generic_rw ( adap <S2SV_ModEnd> -> dev, <S2SV_ModStart> ( dvb_attach ( ts2020_attach, adap <S2SV_ModEnd> ->",0
625,"<S2SV_ModStart>, vpx_codec_enc_cfg_t * enc_cfg <S2SV_ModEnd>, vpx_codec_flags_t flags <S2SV_ModStart> ( ( flags & ( VPX_CODEC_USE_XMA | VPX_CODEC_USE_PSNR | VPX_CODEC_USE_OUTPUT_PARTITION ) <S2SV_ModEnd> ) &&! <S2SV_ModStart> VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_",0
626,"<S2SV_ModStart> stride, int mv_row, int mv_col, uint8_t * pred, struct scale_factors * scale, int x, int y ) { const int which_mv = 0 ; const MV mv = { mv_row, mv_col } ; const InterpKernel * const kernel = <S2SV_ModEnd> xd -> mi <S2SV_ModStart>. interp_filter ) <S2SV_ModEnd> ; int uv_stride <S2SV_ModStart> MV_PRECISION_Q3 ; } vp9_build_inter_predictor_c <S2SV_ModEnd> ( y_mb_ptr, <S2SV_ModStart> y ) ; vp9_build_inter_predictor_c <S2SV_ModEnd> ( u_mb_ptr, <S2SV_ModStart> y ) ; vp9_build_inter_predictor_c <S2SV_ModEnd> ( v_mb_ptr, <S2SV_ModStart> y ) ; vp9_build_inter_predictor_c <S2SV_ModEnd> ( y_mb_ptr, <S2SV_ModStart> y ) ; vp9_build_inter_predictor_c <S2SV_ModEnd> ( v_mb_ptr, <S2SV_ModStart> y ) ; vp9_build_inter_predictor_c <S2SV_ModEnd> ( y_mb_ptr, <S2SV_ModStart> y ) ; vp9_build_inter_predictor_c <S2SV_ModEnd> ( v_mb_ptr, <S2SV_ModStart> y ) ; vp9",0
627,"<S2SV_ModStart> = TRUE ; if ( strchr ( origbuf,'<S2SV_blank>') ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; }",0
628,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> cJSON_CreateFloatArray ( double <S2SV_ModStart> ( ) ; if (! a ) return 0 ; <S2SV_ModStart> i ) { if (! ( <S2SV_ModStart> i ] ) ) ) return 0 <S2SV_ModStart> ; if ( <S2SV_ModEnd> i ) a,0
629,"<S2SV_ModStart> data_end ) { const int tile_cols = 1 << cm -> log2_tile_cols ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int num_workers = MIN ( pbi -> oxcf. max_threads, tile_cols ) ; TileBuffer tile_buffers [ 1 << 6 ] ; int n ; int final_worker = - 1 ; assert ( tile_cols <= ( 1 << 6 ) ) ; assert ( tile_rows == 1 ) ; ( void ) tile_rows ; if ( pbi -> num_tile_workers == 0 ) { const int num_threads = pbi -> oxcf. max_threads & ~ 1 ; int i ; CHECK_MEM_ERROR ( cm, pbi -> tile_workers, vpx_malloc ( num_threads * sizeof ( * pbi -> tile_workers ) ) ) ; for ( i = 0 ; i < num_threads ; ++ i ) { VP9Worker * const worker = & pbi -> tile_workers [ i ] ; ++ pbi -> num_tile_workers ; vp9_worker_init ( worker ) ; CHECK_MEM_ERROR ( cm, worker",0
630,<S2SV_ModStart> = base + get3 <S2SV_ModEnd> ( ) + <S2SV_ModStart> ; len = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c =,0
631,"<S2SV_ModStart> cm -> seg ; vpx_clear_system_state ( ) <S2SV_ModStart> ++ ) { vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, 0 ) ; vpx_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q ) ; <S2SV_ModStart> continue ; } vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, qindex_delta ) ; vpx_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q ) ; <S2SV_ModStart> ) ) ; vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, qindex_delta ) ; vpx_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q ) ; <S2SV_ModStart> ) ) ; vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, qindex_delta ) ; vpx_",0
632,"<S2SV_ModStart> -> error_code ) memcpy ( & <S2SV_ModStart> base. err_detail, <S2SV_ModEnd> error -> has_detail <S2SV_ModStart> error -> detail, sizeof ( ctx -> base. err_detail ) ) <S2SV_ModEnd> ; return error",0
633,"<S2SV_ModStart>, * ps_cur_poc ; memset ( & ps_dec -> s_cab_dec_env, 0, sizeof ( dec_cab_env_t ) ) ; memset ( & ps_dec -> s_cab_dec_env, 0, sizeof ( dec_cab_env_t ) ) ; memset ( & ps_dec -> s_cab_dec_env, 0, sizeof ( dec_cab_env_t ) ) ; memset ( & ps_dec -> s_cab_dec_env, 0, sizeof ( dec_cab_env_t ) ) ; memset ( & ps_dec -> s_cab_dec_env, 0, sizeof ( dec_cab_env_t ) ) ; memset ( & ps_dec -> s_cab_dec_env, 0, sizeof ( dec_cab_env_t ) ) ; memset ( & ps_dec -> s_cab_dec_env, 0, sizeof ( dec_cab_env_t ) ) ; memset ( & ps_dec -> s_cab_dec_env, 0, sizeof",0
634,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet ),0
635,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int getnum (,0
636,"<S2SV_ModStart> GCSpropagate ) ; atomic ( L ) ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> allgc ) ; g -> allgc = * psurvival ; g -> survival = g -> allgc ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> survival = g -> allgc ; psurvival = sweepgen ( L, g, & g -> finobj, g -> finobjsur ) ; sweepgen ( L, g, psurvival, g -> finobjrold ) ; g -> finobjrold = g -> finobj ; g -> tobefnz = g -> tobefnz ; <S2SV_ModStart> g ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
637,<S2SV_ModStart> 0 ; else { ret = <S2SV_ModEnd> - EIO ; <S2SV_ModStart> - EIO ; goto err ; },0
638,"<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } <S2SV_ModEnd> memset ( buffer <S2SV_ModStart> buffer ) ; <S2SV_ModEnd> s_write ( c",0
639,"<S2SV_ModStart> * cib, remote_connection_dispatch_t dispatch, remote_connection_destroy_t destroy <S2SV_ModEnd> ) { int <S2SV_ModStart> -> variant_opaque ; <S2SV_ModEnd> int rc = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> struct addrinfo * <S2SV_ModStart> struct mainloop_fd_callbacks cib_fd_callbacks ; connection -> socket = 0 ; connection -> session = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } bzero ( & hints, sizeof ( struct addrinfo ) ) ; hints. ai_flags = AI_CANONNAME ; hints. ai_family = AF_INET ; hints. ai_socktype = SOCK_RAW ; if ( hints. ai_family == AF_INET6 ) { hints. ai_protocol = IPPROTO_ICMPV6 ; } else { hints. ai_protocol = IPPROTO_ICMP ; } crm_debug ( ""Looking <S2SV_blank> up <S2SV_blank> %s"", server ) ; ret_ga = getaddrinfo ( server, NULL, & hints, & res ) ;",0
640,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; memset ( & cpi -> common, 0, sizeof ( VP8_COMMON ) ) ; if ( setjmp ( cm -> error. jmp ) ) { cpi -> common. error. setjmp = 0 ; vp8_remove_compressor ( & cpi ) ; return 0 ; } cpi -> mb. ss = vpx_calloc ( sizeof ( search_site ), ( MAX_MVSEARCH_STEPS * 8 ) + 1 ) ; vp8_create_common ( & cpi -> common ) ; init_config ( cpi, oxcf ) ; memcpy ( cpi -> base_skip_false_prob, vp8cx_base_skip_false_prob, sizeof ( vp8cx_base_skip_false_prob ) ) ; cpi -> common. current_video_frame = 0 ; cpi -> temporal_pattern_counter = 0 ; memcpy ( cpi -> base_skip_false_prob, vp8cx_base_skip_false_prob, sizeof ( vp8cx_base_skip_false_prob",0
641,"<S2SV_ModStart> ) ) ; if ( len < 26 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> len <S2SV_blank> %d]"", len ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( len < 26 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> len <S2SV_blank> %d]"", len ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( len < 26 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> len <S2SV_blank> %d]"", len ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( len < 26 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> len <S2SV_blank> %d]"", len ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( len < 26 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> len <S2SV_blank> %d]"", len ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( len < 26 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> len <S2SV_blank> %d]"", len ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( len < 26 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> len",0
642,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command",0
643,"<S2SV_ModStart> Image * image <S2SV_ModEnd> ; register IndexPacket <S2SV_ModStart> length, padding <S2SV_ModEnd>, version, <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
644,"<S2SV_ModStart> ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC <S2SV_blank> marker\\n"" ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC <S2SV_blank> marker\\n"" ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC <S2SV_blank> marker\\n"" ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC <S2SV_blank> marker\\n"" ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC <S2SV_blank> marker\\n"" ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC <S2SV_blank> marker\\n"" ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC <S2SV_blank> marker\\n"" ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC <S2SV_blank> marker\\n"" ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { jas",0
645,<S2SV_ModStart> ) ; } if (! new_modes ) { free ( new_args ) ; free ( str_modes ) ; return ; } if (! new_args ) { free ( new_modes ) ; free ( new_args ) ; return ; },0
646,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> - m + vpx_read_bit <S2SV_ModEnd> ( r )",1
647,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
648,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> REFERENCE_MODE mode = vpx_read <S2SV_ModEnd> ( r,",0
649,"<S2SV_ModStart>! stream ) { error_report ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; } <S2SV_ModStart> ( res ) { error_report ( ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> config: <S2SV_blank> %s"" <S2SV_ModEnd>, vpx_codec_err_to_string ( <S2SV_ModStart> res ) ) ; } stream -> config. cfg. g_timebase. den = 1000 ; stream -> config. cfg. g_w = 0 ; stream -> config. cfg. g_h = 0 ; stream -> config. cfg. stereo_fmt = STEREO_FORMAT_MONO ; stream -> config. write_webm = 1 ; stream -> ebml. last_pts_ms = - 1 ; stream -> ebml. debug = global -> debug ; if ( global -> deadline == VPX_DL_REALTIME ) stream -> config. cfg. g_lag_in_frames = 0 ; } stream -> config. out_fn = NULL ; stream -> next = NULL ; return stream ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
650,"<S2SV_ModStart> ; ND_PRINT ( <S2SV_ModEnd> ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u), <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> (%u): <S2SV_blank> "", tok2str <S2SV_ModStart> ; ND_PRINT ( <S2SV_ModEnd> ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u), <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> (%u): <S2SV_blank> "", tok2str <S2SV_ModStart> ; ND_PRINT ( <S2SV_ModEnd> ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "", tok2str <S2SV_ModStart> ; ND_PRINT ( <S2SV_ModEnd> ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u), <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> (%u): <S2SV_blank> "", tok2str <S2SV_ModStart> ; ND_PRINT ( <S2SV_ModEnd> ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u), <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> (%u): <S2SV_blank> "", tok2str <S2SV_ModStart> ; ND_PRINT ( <S2SV_ModEnd> ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "", tok2str <S2SV_ModStart> ; ND_PRINT ( <S2SV_ModEnd> ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u), <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> (%u): <S2SV_blank> "", tok2str <S2SV_ModStart> ; ND_PRINT",0
651,<S2SV_ModStart> -> root_node = yr_malloc ( 1 ) ; if ( ( * re_ast ) -> root_node == NULL ) return ERROR_INSUFFICIENT_MEMORY ; ( * re_ast ) -> root_node -> next = yr_malloc ( 1 ) ; if ( ( * re_ast ) -> root_node == NULL ) return ERROR_INSUFFICIENT_MEMORY ; ( * re_ast ) -> root_node -> next -> prev = yr_malloc ( 1 ) ; if ( ( * re_ast ) -> root_node == NULL ) return ERROR_INSUFFICIENT_MEMORY ; ( * re_ast ) -> root_node -> next -> prev = yr_malloc ( 1 ) ; if ( ( * re_ast ) -> root_node == NULL ) return ERROR_INSUFFICIENT_MEMORY ; ( * re_ast ) -> root_node -> next -> prev = yr_malloc ( 1 ) ; if ( ( * re_ast ) -> root_node == NULL ) return ERROR_INSUFFICIENT_MEMORY ; ( * re_ast ) -> root_node -> next -> prev =,0
652,"<S2SV_ModStart> ; ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> = <S2SV_blank> %s"", str_c ( path ), key -> value ) ; } else if ( key -> key -> default_value!= NULL ) { auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found, <S2SV_blank> using <S2SV_blank> default <S2SV_blank> value <S2SV_blank> %s"", str_c ( path ), key -> key -> default_value ) ; key -> value = key -> key -> default_value ; } else if ( key -> key -> default_value!= NULL ) { auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found, <S2SV_blank> using <S2SV_blank> default <S2SV_blank> value <S2SV_blank> %s"", str_c ( path ), key -> key -> default_value ) ; key -> value = key -> key",0
653,<S2SV_ModStart> -> level = 1 <S2SV_ModEnd> ; tok ->,0
654,<S2SV_ModStart> av1 -> av1_config && av1 -> av1_config -> config,1
655,"<S2SV_ModStart> ASSERT ( dpbSize ) ; memset ( dpb, 0, sizeof ( dpbStorage_t )",0
656,"<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> (! sock ||! addr ||! addrlen ) { <S2SV_ModEnd> OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> OE_EINVAL ) ; } <S2SV_ModStart> ( addrlen ) { <S2SV_ModStart> * addrlen ; addrlen_out = * addrlen ; } <S2SV_ModStart>, addrlen_in, & addrlen_out <S2SV_ModEnd> )!= OE_OK <S2SV_ModStart> ) ; } * addrlen = addrlen_out ;",0
657,,1
658,"<S2SV_ModStart> FALSE ; } if (! <S2SV_ModStart>, s ) ) return FALSE",1
659,<S2SV_ModStart> ipv6_pinfo * np ; struct ipv6_txoptions * opt = NULL ; struct ip6_flowlabel * flowlabel = NULL ; struct dst_entry * dst = NULL ; struct flowi6 fl6 ; int addr_len = msg -> msg_namelen ; int hlimit = - 1 ; int tclass = - 1 ; int dontfrag = - 1 ; int transhdrlen = 4 ; int ulen = len + transhdrlen ; err = - EMSGSIZE ; if ( addr_len < SIN6_LEN_RFC2133 ) return - EINVAL ; np <S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; flowlabel =,0
660,"<S2SV_ModStart> ; unsigned int <S2SV_ModEnd> found, upx_success <S2SV_ModStart> ; uint32_t valign <S2SV_ModEnd>, hdr_size, <S2SV_ModStart> j ; struct cli_exe_section_data exe_sections_data ; struct cli_exe_section * exe_sections_data ; char timestr [ 32 ] ; struct pe_image_data_dir * dirs ; struct cli_bc_ctx * bc_ctx ; fmap_t * map ; struct cli_pe_hook_data pedata ; # ifdef HAVE__INTERNAL__SHA_COLLECT int sha_collect = ctx -> sha_collect ; # endif const char * archtype = NULL, * subsystem = NULL ; uint32_t viruses_found = 0 ; # if HAVE_JSON int toval = 0 ; struct json_object * pe_json = NULL ; char jsonbuf [ 128 ] ; # endif if (! ctx ) { cli_errmsg ( ""cli_scanpe: <S2SV_blank> ctx <S2SV_blank> == <S2SV_blank> NULL\\n"" ) ; return CL_ENULLARG ; } # if HAVE_JSON if ( cli_json_timeout_cycle_check ( ctx, & toval )!= 0 ) { cli_errmsg ( ""cli_scan",0
661,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; usleep <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPDRH <S2SV_ModEnd> ) << 8 <S2SV_ModStart> | dm9000ReadReg ( DM9000_EPDRL <S2SV_ModEnd> ) ; }",1
662,"<S2SV_ModStart> ( private -> callback ) ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> callback. token, CRM_OP_REGISTER, NULL, NULL, NULL, 0, NULL ) ; crm_xml_add ( hello, F_CIB_CLIENTNAME, name ) ; crm_send_remote_msg ( private -> command. session, hello, private -> command. encrypted ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { rc = cib_tls_signon ( cib, & ( private -> command ) ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> command. token, CRM_OP_REGISTER, NULL, NULL, NULL, NULL, 0, NULL ) ; crm_send_remote_msg ( private -> command. session, hello, private -> command. encrypted ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { fprintf ( stderr, ""%s: <S2SV_blank> Opened <S2SV_blank> connection <S2SV_blank> to <S2SV_blank> %s:%d\\n",0
663,"<S2SV_ModStart> = ubuf ; memset ( & address, 0, sizeof ( address ) ) ;",0
664,"<S2SV_ModStart> ; int num00 = 0, tmp_err = 0, n, sr = 0 ; int step_param = 3 ; int further_steps = ( MAX_MVSEARCH_STEPS - 1 ) - step_param ; const BLOCK_SIZE bsize = xd -> mi [ 0 ] -> mbmi. sb_type ; vp9_variance_fn_ptr_t v_fn_ptr = cpi -> fn_ptr [ bsize ] ; int new_mv_mode_penalty = 256 ; const int quart_frm = MIN ( cpi -> common. width, cpi -> common. height ) ; while ( sr < MAX_FULL_PEL_VAL ) ++ sr ; step_param += sr ; further_steps -= sr ; v_fn_ptr. vf = get_block_variance_fn ( bsize ) ; num00 = cpi -> diamond_search_sad ( x, & ref_mv_full, & tmp_mv, step_param, x -> sadperbit16, & num00, & v_fn_ptr, x -> nmvjointcost, x -> mvcost, ref_mv ) ; if",0
665,"<S2SV_ModStart> ( EFAULT, ""%s: <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename, strerror ( errno ) <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( EFAULT, ""%s: <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename, strerror ( errno ) <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( EFAULT, ""%s: <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename, strerror ( errno ) <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( EFAULT, ""%s: <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename, strerror ( errno ) <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( EFAULT, ""%s: <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename, strerror ( errno ) <S2SV_ModEnd> ) ; goto",0
666,"<S2SV_ModStart> ; # endif # ifdef DEBUG_CONF ap_log_perror ( APLOG_MARK, APLOG_STARTUP | APLOG_NOERRNO, 0, mp, ""Merged <S2SV_blank> parent <S2SV_blank> %pp <S2SV_blank> child <S2SV_blank> %pp"", _parent, _child ) ; # endif",0
667,"<S2SV_ModStart>, one, <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
668,"<S2SV_ModStart> ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = <S2SV_ModStart> out ; } if ( ( r = sshbuf_put ( b, & newkey -> cipher, sizeof ( newkey -> cipher ) ) )!= 0 || ( r = sshbuf_put ( b, & newkey -> cipher, sizeof ( newkey -> cipher ) ) )!= 0 || ( r = sshbuf_put ( b, & newkey -> cipher, sizeof ( newkey -> cipher ) ) )!= 0 || ( r = sshbuf_put ( b, & newkey -> cipher, sizeof ( newkey -> cipher ) ) )!= 0 || ( r = sshbuf_put ( b, & newkey -> cipher, sizeof ( newkey -> cipher ) ) )!= 0 || ( r = sshbuf_put ( b, & newkey -> cipher, sizeof ( newkey -> cipher ) ) )!= 0 || ( r = sshbuf_put ( b, & newkey -> cipher, sizeof ( newkey -> cipher ) ) )!= 0 ) goto out ;",0
669,"<S2SV_ModStart> ) ) { ovalue = strim ( <S2SV_ModEnd> stok ( option <S2SV_ModStart> & ovalue ), ""\\""\'"", MPR_TRIM_BOTH ) ; option = stok ( option, "" <S2SV_blank> =\\t,"", & ovalue )",0
670,"<S2SV_ModStart> cib_client_t * client ; client = g_hash_table_lookup ( client_list, user_data ) ; if ( client == NULL ) { return ; } crm_trace ( ""Cleaning <S2SV_blank> up <S2SV_blank> after <S2SV_blank> client <S2SV_blank> disconnect: <S2SV_blank> %s/%s"", crm_str ( client -> name ), client -> id ) ; if ( client -> id!= NULL ) { if (! g_hash_table_remove ( client_list, client -> id ) ) { crm_err ( ""Client <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> the <S2SV_blank> hashtable"", client -> name ) ; } } crm_trace ( ""Destroying <S2SV_blank> %s <S2SV_blank> (%p)"", client -> name, user_data ) ; num_clients -- ; crm_trace ( ""Num <S2SV_blank> unfree\'d <S2SV_blank> clients: <S2SV_blank> %d"", num_clients ) ; free ( client -> name ) ; free ( client -> callback_id ) ; free ( client -> id ) ; free ( client -> user ) ; free ( client ) ; crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client"" ) ; if ( cib_shutdown_flag",0
671,"<S2SV_ModStart> * uv ; if ( iswhite ( thread ) ) markvalue ( g, thread -> v ) ; <S2SV_ModStart> next ) { <S2SV_ModEnd> if (!",0
