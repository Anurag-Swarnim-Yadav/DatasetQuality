,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
1,<S2SV_ModStart> ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ; if (,0
2,<S2SV_ModStart> writer = ( TrackWriter <S2SV_ModEnd> * ) gf_list_get,0
3,<S2SV_ModStart> c = array? array -> child : NULL <S2SV_ModEnd> ; while ( <S2SV_ModStart> while ( c ) { if ( <S2SV_ModEnd> item > 0 <S2SV_ModStart> > 0 ) <S2SV_ModEnd> c = c <S2SV_ModStart> -> next ; <S2SV_ModEnd> return c ;,0
4,"<S2SV_ModStart> u64 nr, <S2SV_ModEnd> struct pt_regs * <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",1
5,"<S2SV_ModStart> EXT4_EXTENTS_FLAG ) { <S2SV_ModEnd> struct grub_ext4_extent_header * <S2SV_ModStart> leaf ) { <S2SV_ModEnd> return - 1 <S2SV_ModStart> ( fileblock >= EXT2_BLOCK_SIZE ( data ) ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } <S2SV_ModEnd> return 0 ; <S2SV_ModStart> return 0 ; <S2SV_ModEnd> } else { <S2SV_ModStart> { grub_disk_addr_t start ; start = grub_le_to_cpu16 ( ext [ i ]. start_hi ) ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext [ i ]. start ) ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext [ i ]. start ) ; return fileblock + start ; } } else { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 <S2SV_ModEnd> ; } }",0
6,"<S2SV_ModStart> fdct16 ( const tran_low_t <S2SV_ModEnd> * in [ <S2SV_ModStart> 16 ], tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> ] ) { tran_high_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step2 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step3 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t input [ 8 ] ; tran_high_t <S2SV_ModEnd> temp1, temp2 <S2SV_ModStart> ] ; { tran_low_t <S2SV_ModEnd> s0, s1 <S2SV_ModStart>, s7 ; tran_high_t <S2SV_ModEnd> t0, t1 <S2SV_ModStart>, t3 ; tran_high_t <S2SV_ModEnd> x0, x1",0
7,"<S2SV_ModStart> ( ) ; # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; # endif parse_ciff ( save + hlen, len - hlen, 0 ) ; } if ( parse_tiff ( save + 6 ) ) apply_tiff ( ) ; fseek ( ifp, save + len, SEEK_SET ) ; } return 1 <S2SV_ModEnd> ; } <S2SV_null>",0
8,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> search_filter_level ( const <S2SV_ModStart> partial_frame ) { YV12_COMMON <S2SV_ModEnd> * const cm <S2SV_ModStart> ) ; int best_err ; int filt_best ; int filt_direction = 0 ; int filt_mid = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; int filter_step = filt_mid < 16? 4 : filt_mid / 4 ; int ss_err [ MAX_LOOP_FILTER + 1 ] ; vpx_yv12_copy_y ( cm -> frame_to_show, & cpi -> last_frame_uf ) ; best_err = try_filter_frame ( sd, cpi, filt_mid, partial_frame ) ; filt_best = filt_mid ; ss_err [ filt_mid ] = best_err ; while ( filter_step > 0 ) { const int filt_high = MIN ( filt_mid + filter_step, max_filter_level ) ; const int filt_low = MAX ( filt_mid - filter_step, min_filter_level ) ; int filt_err",0
9,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
10,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ++ i ) vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( usehp ) vpx_write <S2SV_ModEnd> ( w,",1
11,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } else { <S2SV_ModEnd> request -> rxBlockSzx <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; },0
12,"<S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; }",0
13,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> construct_get_dest_keyring ( struct <S2SV_ModStart> * authkey ; int ret ; <S2SV_ModStart> dest_keyring ) ; ret = 0 ; goto out ; } else <S2SV_ModEnd> switch ( cred <S2SV_ModStart> ) ; } out : return ret ;,0
14,<S2SV_ModStart> = create_spnego_ctx ( 0,0
15,<S2SV_ModStart> ; tm = localtime_r <S2SV_ModEnd> ( & t,0
16,<S2SV_ModStart> length ) ; if ( strlen ( password )!= 0 ) { <S2SV_ModStart> ) ) ; },0
17,<S2SV_ModStart> == p ) { * errnop = ERANGE ; return NSS_STATUS_TRYAGAIN ; } <S2SV_ModEnd> r = parse_uid,0
18,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",1
19,<S2SV_ModStart> = 0 ; if (! <S2SV_ModStart> & timeout ) ) return false,0
20,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> detect_transition_to_still ( struct <S2SV_ModStart> last_decay_rate ) { bool trans_to_still = false <S2SV_ModEnd> ; if ( <S2SV_ModStart> int j ; <S2SV_ModEnd> FIRSTPASS_STATS tmp_next_frame ; <S2SV_ModStart> { if ( <S2SV_ModEnd> tmp_next_frame. pcnt_inter <S2SV_ModStart> tmp_next_frame. pcnt_motion <= <S2SV_ModEnd> 0.999 ) break <S2SV_ModStart> break ; } if ( <S2SV_ModStart> twopass, position ) ) trans_to_still = true <S2SV_ModEnd> ; } return <S2SV_ModStart> ; } return true <S2SV_ModEnd> ; } <S2SV_null>",0
21,"<S2SV_ModStart> inode ) ) { if ( offset + size > i_size_read ( inode ) ) { printk ( KERN_EMERG ""%s: <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, inode -> i_ino ) ; return ret ; } <S2SV_ModStart> size ) ; }",0
22,"<S2SV_ModStart> alg ) { <S2SV_ModEnd> if (! <S2SV_ModStart> CRYPTO_ALG_NEED_FALLBACK ) ) { request_module ( ""%s"", name ) ; <S2SV_ModStart> name ) ; }",0
23,"<S2SV_ModStart> = GIT_PKT_NG ; if ( len < 3 ) goto out_err ; <S2SV_ModStart> += 3 ; <S2SV_ModEnd> ptr = strchr <S2SV_ModStart>,'<S2SV_blank>') ; if (! ptr ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> ref = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> ref ) ; memcpy ( pkt -> ref, line, len ) ; pkt -> ref [ len ] = '\\0' ; line = ptr + 3 <S2SV_ModEnd> ; ptr = <S2SV_ModStart> + 1 ; <S2SV_ModEnd> ptr = strchr <S2SV_ModStart>, '\\n' ) ; if (! ptr ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> msg = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> msg ) ; memcpy ( pkt -> msg, line, len ) ; pkt -> msg [ len ] = '\\0' <S2SV_ModEnd> ; * out",0
24,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> BYTE flags ; UINT32 <S2SV_ModEnd> length ; Stream_Read_UINT32,0
25,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; if (,0
26,"<S2SV_ModStart> mntent, path, false",0
27,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } io -> io_cleanup = mem_cleanup ;,1
28,<S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ) pixel & <S2SV_ModEnd> value + 0.5 <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ) pixel << <S2SV_ModEnd> value + 0.5,0
29,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return ret?,0
30,<S2SV_ModStart> vpx_codec_enc_cfg_map_t * map ; if ( iface -> enc. cfg_maps == NULL ) return VPX_CODEC_INVALID_PARAM,0
31,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
32,"<S2SV_ModStart> void show_progress ( <S2SV_ModEnd> uint64_t dx_time ) <S2SV_ModStart> dx_time ) { if ( dx_time > 100 ) { fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out, dx_time, ( double ) frame_out * 1000000.0 / ( double ) dx_time ) ; return ; }",0
33,"<S2SV_ModStart> ; if (! imp_sth -> result ) { PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> empty <S2SV_blank> statement\\n"" ) ; return Nullav ; } if ( <S2SV_ModStart> ; if (! imp_sth -> result ) { PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> empty <S2SV_blank> statement\\n"" ) ; return Nullav ; } if (",0
34,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_ETXSTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRTS <S2SV_ModEnd> ) ; return",0
35,"<S2SV_ModStart> ; value = _PyObject_SetAttrId ( result, & PyId_description, value ) ; if (! value ) goto failed ; Py_DECREF ( value ) ; value =",0
36,"<S2SV_ModStart> if ( page ) { if ( <S2SV_ModEnd> ( access ( <S2SV_ModStart> == 0 ) && ( unlink ( page ) > 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } } else if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } } else if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } } else if (! strcmp ( func, ""page/delete"" ) ) { char * page = http_request_param_get ( req, ""page"" ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page && ( unlink ( page ) > 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } } else if ( page && ( access (",0
37,"<S2SV_ModStart> low_var_thresh, int mbr, int mbc <S2SV_ModEnd> ) { double <S2SV_ModStart>.5 ) ; <S2SV_ModEnd> unsigned char * <S2SV_ModStart> pp_limits_buffer ; ; <S2SV_ModEnd> ( void ) <S2SV_ModStart> ) flag ; memset <S2SV_ModEnd> ( limits, <S2SV_ModStart> 16 ) ; vpx_post_proc_down_and_across_mb_row <S2SV_ModEnd> ( source -> <S2SV_ModStart> 8 ) ; vpx_post_proc_down_and_across_mb_row <S2SV_ModEnd> ( source -> <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
38,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> ) ; struct mb2_cache_entry <S2SV_ModEnd> * ce ; <S2SV_ModStart> int error ; error = mb2_cache_entry_alloc ( ext4_mb_cache, GFP_NOFS, & ce ) ; if ( error ) return ; <S2SV_ModEnd> error = mb_cache_entry_insert <S2SV_ModStart> error ) { mb2_cache_entry_free ( ext4_mb_cache, <S2SV_ModEnd> ce ) ; <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> } } else <S2SV_ModStart> hash ) ; mb2_cache_entry_release <S2SV_ModEnd> ( ce )",0
39,<S2SV_ModStart> ) ) ; * code = 200 ; * rlen = 0 ;,0
40,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct ip_options_rcu <S2SV_ModEnd> * ip_options_get_from_user ( <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> return ip_options_get_finish (,0
41,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|truncated]"" <S2SV_ModEnd> ) ) ;",0
42,"<S2SV_ModStart> ) N_ ( ""E530: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'escape\' <S2SV_blank> in <S2SV_blank> string <S2SV_blank> option"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) N_ ( ""E531: <S2SV_blank> Use <S2SV_blank> \\""escape\\"" <S2SV_blank> in <S2SV_blank> string <S2SV_blank> option"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) N_ ( ""E532: <S2SV_blank> Not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> string <S2SV_blank> option"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) N_ ( ""E534: <S2SV_blank> Not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> string <S2SV_blank> option"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) N_ ( ""E535: <S2SV_blank> Not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> string <S2SV_blank> option"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) N_ ( ""E536: <S2SV_blank> Not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> string <S2SV_blank> option"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) N_ ( ""E536: <S2SV_blank> Not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> string <S2SV_blank> option"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) N_ ( ""E535: <S2SV_blank> Not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> string <S2SV_blank> option"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) N_ ( ""E536: <S2SV_blank> Not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> string <S2SV_blank> option"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) N_ ( ""E536: <S2SV_blank> Not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> string <S2SV_blank> option"" <S2SV_ModEnd> )",0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode <S2SV_ModStart>, & new_mode, & acl ) ; if ( ret <S2SV_ModEnd> ) goto out",0
44,"<S2SV_ModStart> size_t size ; size_t cps ; <S2SV_ModStart> / 8 ; cps = cmpt -> cps_ ; <S2SV_ModStart> ( cmpt -> cps_, cps <S2SV_ModEnd>, & size",0
45,<S2SV_ModStart> dp == datalen || tdp > datalen,0
46,"<S2SV_ModStart> size_t * acl_len, struct xdr_buf * buf ) { <S2SV_ModEnd> uint32_t attrlen, <S2SV_ModStart> int status ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> xdr, OP_GETATTR ) )!= 0 ) return - EIO ; if ( ( status = decode_op_hdr ( xdr, OP_GETACL <S2SV_ModStart>, & attrlen <S2SV_ModEnd> ) )!= <S2SV_ModStart> recvd ) { <S2SV_ModEnd> return - EINVAL <S2SV_ModStart> attrlen ) ; <S2SV_ModEnd> } else status",0
47,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
48,"<S2SV_ModStart> ) ) { if ( smatch ( auth, ""APPWEB"" ) ) { return MPR_ERR_BAD_SYNTAX ; } <S2SV_ModStart> ; } } if ( smatch ( tok, ""APPWEB"" ) ) { if ( snumber ( owner ) ) { uid = ( int ) stoi ( owner ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { uid = HTTP -> uid ; } else { uid = userToID ( owner ) ; } } if ( perms && snumber ( perms ) ) { mode = ( int ) stoiradix ( perms, - 1, NULL ) ; } else { mode = 0 ; } } else { dirs = auth ; auth = 0 ; } tok = dirs ; for ( tok = sclone ( dirs ) ; ( dir = stok ( tok, "","", & tok ) )!= 0 ; ) { path = httpMakePath ( state -> route, state -> configDir, dir ) ; if ( mprGetPathInfo ( path, & info ) == 0 && info. isDir ) { continue ; } if ( mprMakeDir ( path, mode, uid, gid, 1 ) < 0 ) { return MPR_ERR_",0
49,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> addr = VPX_MALLOC_L <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; <S2SV_ModEnd> if ( addr,0
50,"<S2SV_ModStart> int res ; <S2SV_ModEnd> long long export_index_table <S2SV_ModStart> long export_index_table [ SQUASHFS_LOOKUP_BLOCKS ( sBlk. s. inodes ) <S2SV_ModEnd> ] ; res <S2SV_ModStart>. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ) * sizeof ( long long ) <S2SV_ModEnd>, export_index_table )",0
51,<S2SV_ModStart> ; } else { <S2SV_ModStart> p1 ) ; },0
52,<S2SV_ModStart> ; if ( global -> codec == NULL ) { return - 1 ; } if ( <S2SV_ModStart> } if ( global -> codec == NULL ) { return - 1 ; } if (,0
53,"<S2SV_ModStart> preverify_ok, callback_ctx, c -> ssl <S2SV_ModStart> 1 ; } return 0 <S2SV_ModEnd> ; } <S2SV_null>",0
54,"<S2SV_ModStart> ; if ( crypto_memneq <S2SV_ModEnd> ( cmac,",0
55,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> const uint64_t bits_used <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> -= bits_used ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
56,"<S2SV_ModStart> EOFOp 0x07 char * magick_buffer <S2SV_ModEnd> ; Image * <S2SV_ModStart> char * ) magick_buffer <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart>. x = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. y = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. columns = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. rows = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart>. x = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. y = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. columns = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ( memcmp ( magick",0
57,"<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> altsetting [ 0 ]. desc. bNumEndpoints < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; error = - EINVAL ; goto err_free_urb ; }",1
58,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
59,"<S2SV_ModStart> * dir = ""/tmp"" <S2SV_ModEnd> ; if (",0
60,<S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; },0
61,"<S2SV_ModStart> ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; }",0
62,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> vp9_setup_dst_planes ( MACROBLOCKD <S2SV_ModStart> mi_col ) { int i ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y ) ; } for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y ) ; } for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { <S2SV_ModStart> i ) { <S2SV_ModEnd> setup_pred_plane ( &",0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,<S2SV_ModStart> get_block = ocfs2_get_block <S2SV_ModEnd> ; return __blockdev_direct_IO,0
65,"<S2SV_ModStart> ( f, ""%79s <S2SV_blank> %100s\\n"" <S2SV_ModEnd>, def,",0
66,"<S2SV_ModStart> n ) { <S2SV_ModEnd> char * str <S2SV_ModStart> * str ; <S2SV_ModEnd> assert ( expr_end <S2SV_ModStart> expr_end == ':' <S2SV_ModEnd> ) ; str <S2SV_ModStart> = PyCF_ONLY_AST ; mod = string_object_to_c_ast ( str, PyUnicode_FromString ( ""<fstring>"" ), Py_eval_input, & cf, c -> c_feature_version, c -> c_arena ) ; PyMem_RawFree ( str ) ; if (! mod ) return NULL ; return mod -> v. Expression. body <S2SV_ModEnd> ; } <S2SV_null>",0
67,<S2SV_ModStart> c = object? object -> child : NULL <S2SV_ModEnd> ; while (,0
68,<S2SV_ModStart> size ) ; if ( px -> ft == NULL ) return FALSE ;,0
69,"<S2SV_ModStart> u_char * dat, u_int len <S2SV_ModStart>, val_l ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_",0
70,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
71,"<S2SV_ModStart> int i ; const <S2SV_ModStart> alpha_buffer } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ], src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer, mi_row, mi_col, sf, pd -> subsampling_x, pd -> subsampling_y ) ; }",0
72,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; for (,1
73,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
74,<S2SV_ModStart> user ) { cleanup_srcu_struct ( & user -> release_barrier ) ; <S2SV_ModStart> _ipmi_destroy_user ( user <S2SV_ModEnd> ) ; kref_put,0
75,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> sl = strlen,1
76,"<S2SV_ModStart> * for_ch ; <S2SV_ModEnd> REQ ( n <S2SV_ModStart> comp_for ) ; for ( ; ; ) { <S2SV_ModEnd> if ( TYPE <S2SV_ModStart> == ASYNC ) <S2SV_ModEnd> is_async = 1 <S2SV_ModStart> = 1 ; <S2SV_ModEnd> for_ch = CHILD <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) ; <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) ) <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) ) <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) ) <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) ) <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) ) <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) ) <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) ) <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) ) <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) ) <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) ) <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) ) <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) ) <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) ) <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) ) <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) ) <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) ) <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) ) <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) ) <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) ) <S2SV_ModStart> ( n, <S2SV_ModEnd> is",0
77,<S2SV_ModStart> = NULL ; dst_state -> frames [ i ] = NULL ; <S2SV_ModStart> = dst ; dst_state -> frames [ i ] = NULL ;,0
78,"<S2SV_ModStart> write_mb_modes_kf ( const VP9_COMMON * cm, const MACROBLOCKD * xd, const MODE_INFO * mi <S2SV_ModEnd>, vpx_writer * <S2SV_ModStart> w ) { <S2SV_ModEnd> const struct segmentation <S2SV_ModStart> * const mi <S2SV_ModEnd> = mi_8x8 [ <S2SV_ModStart> 0 ] ; <S2SV_ModEnd> const MODE_INFO * <S2SV_ModStart> MODE_INFO * const above_mi <S2SV_ModEnd> = mi_8x8 [ <S2SV_ModStart> -> left_available? mi <S2SV_ModEnd> [ - 1 <S2SV_ModStart> segment_id ) ; <S2SV_ModEnd> if ( bsize <S2SV_ModStart> == TX_MODE_SELECT ) { write_selected_tx_size ( cpi, mi -> bmi [ 0 ]. as_mode, get_y_mode_probs ( mi, above_mi, left_mi, 0 ) ) ; } else { write_skip ( cpi, mbmi -> segment_id, mi, w ) ; } if ( bsize >= BLOCK_8X8 && cm -> tx_mode == TX_MODE_SELECT ) write_selected_tx_size ( cpi, mbmi -> tx_size, bsize, w ) ; } else { const int num_4x4_w = num_4x4_blocks",0
79,"<S2SV_ModStart> maxn ) { <S2SV_ModEnd> # ifdef DEBUG <S2SV_ModStart> ; # endif if ( n > maxn ) SWF_error ( ""Action <S2SV_blank> overflow!!"" ) ;",0
80,<S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( & prep -> pp_n ) ; <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> n = EXTRACT_32BITS,0
81,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
82,<S2SV_ModStart> zArg ) { assert ( pTable -> nModuleArg >= 0 ) ; <S2SV_ModStart> * ) * <S2SV_ModEnd> 2 + pTable <S2SV_ModStart> pTable -> nModuleArg <S2SV_ModEnd> ; char *,0
83,<S2SV_ModStart> j ] ; if ( j < 0 ) { j = 0 ; } <S2SV_ModStart> j ] ; if ( j < 0 ) { j = 0 ; } <S2SV_ModStart> j ] ; if ( j < 0 ) { j = 0 ; } <S2SV_ModStart> j ] ; if ( j < 0 ) { j = 0 ; } <S2SV_ModStart> j ] ; if ( j < 0 ) { j = 0 ; } <S2SV_ModStart> j ] ; if ( j < 0 ) { j = 0 ; } <S2SV_ModStart> j ] ; if ( j < 0 ) { j = 0 ; } <S2SV_ModStart> j ] ; if ( j < 0 ) { j = 0 ; } <S2SV_ModStart> j ] ; if ( j < 0 ) { j = 0 ; } <S2SV_ModStart> j ] ; if ( j < 0 ) { j = 0 ; } <S2SV_ModStart> j ] ; if ( j < 0 ) { j = 0 ; } <S2SV_ModStart> j ] ; if ( j < 0 ) { j = 0 ; } <S2SV_ModStart> j ] ; if ( j < 0 ) { j = 0 ; } <S2SV_ModStart> j ] ; if ( j < 0 ) { j = 0 ; } <S2SV_ModStart> j ] ; if ( j < 0 ) { j = 0 ; } <S2SV_ModStart> j ] ; if ( j < 0 ) { j = 0,0
84,<S2SV_ModStart> -> dmin ; if ( ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE (,0
85,"<S2SV_ModStart> bfq_idle_slice_timer_body ( struct bfq_sched_data * sched_data <S2SV_ModEnd> ) { struct <S2SV_ModStart> bfq_data * bfqd <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> long flags ; struct bfq_queue * bfqq = sched_data -> bfqq ; <S2SV_ModStart> flags ) ; if (! bfq_bfqq_in_service_queue ( bfqq ) ) { spin_unlock_irqrestore ( & bfqd -> lock, flags ) ; return ; } <S2SV_ModStart> in_service_queue ) { bfq_bfqq_expire ( bfqd, bfqq, true, reason ) ; spin_unlock_irqrestore ( & bfqd -> lock <S2SV_ModEnd>, flags ) <S2SV_ModStart> return ; } bfq_clear_bfqq_wait_request ( bfqq ) ;",0
86,,1
87,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
88,"<S2SV_ModStart> diffBlock + diffBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } memcpy ( newData + newpos, diffPtr, x ) ; diffPtr += x ; if ( diffPtr <S2SV_ModEnd> > diffBlock + <S2SV_ModStart> diffBlock + diffBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } memcpy ( newData + newpos, extraPtr, y ) ; extraPtr += y ; if ( extraPtr <S2SV_ModEnd> > extraBlock + <S2SV_ModStart> extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } memcpy ( newData + newpos, extraPtr, z ) ; extraPtr += z <S2SV_ModEnd> ; } }",0
89,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> np -> tclass ) ; rcu_read_unlock (,0
90,"<S2SV_ModStart> ) ) { if ( MagickMax ( number_pixels, bytes_per_pixel ) < 0 ) { return NULL ; } <S2SV_ModStart> ) ) { if ( MagickMax ( number_pixels, bytes_per_pixel ) < 0 ) { return NULL ; } <S2SV_ModStart> ) ) { if ( MagickMax ( number_pixels, bytes_per_pixel ) < 0 ) { return NULL ; } <S2SV_ModStart> ) ) { if ( MagickMax ( number_pixels, bytes_per_pixel ) < 0 ) { return NULL ; } <S2SV_ModStart> ) ) { if ( MagickMax ( number_pixels, bytes_per_pixel ) < 0 ) { return NULL ; } <S2SV_ModStart> ) ) { if ( MagickMax ( number_pixels, bytes_per_pixel ) < 0 ) { return NULL ; } <S2SV_ModStart> ) ) { if ( MagickMax ( number_pixels, bytes_per_pixel ) < 0 ) { return NULL ; } <S2SV_ModStart> ) ) { if ( MagickMax ( number_pixels, bytes_per_pixel ) < 0 ) { return NULL ; } <S2SV_ModStart> ) ) { if ( MagickMax ( number_pixels, bytes_per_pixel ) < 0 ) { return NULL ; }",0
91,<S2SV_ModStart> data ) { ( void ) data ;,0
92,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
93,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
94,"<S2SV_ModStart> mb_offset ) ; memcpy <S2SV_ModEnd> ( mvx, <S2SV_ModStart> mb_offset ) ; memcpy <S2SV_ModEnd> ( mvy, <S2SV_ModStart> mb_offset ) ; memcpy <S2SV_ModEnd> ( mvx, <S2SV_ModStart> mb_offset ) ; memcpy <S2SV_ModEnd> ( mvy, <S2SV_ModStart> mb_offset ) ; memcpy <S2SV_ModEnd> ( mvx, <S2SV_ModStart> mvx ) ; memcpy <S2SV_ModEnd> ( mvy, <S2SV_ModStart> mvy ) ; memcpy <S2SV_ModEnd> ( mvx, <S2SV_ModStart> mvx ) ; memcpy <S2SV_ModEnd> ( mvy, <S2SV_ModStart> mvy ) ; memcpy <S2SV_ModEnd> ( mvx, <S2SV_ModStart> mvx ) ; memcpy <S2SV_ModEnd> ( mvy, <S2SV_ModStart> mvy ) ; memcpy <S2SV_ModEnd> ( mvx, <S2SV_ModStart> mvx ) ; memcpy <S2SV_ModEnd> ( mvy, <S2SV_ModStart> mvy ) ; memcpy <S2SV_ModEnd> ( mvy, <S2SV_ModStart> mvy ) ; memcpy <S2SV_ModEnd> ( mvx, <S2SV_ModStart> mvx ) ; memcpy <S2SV_ModEnd> ( mvy, <S2SV_ModStart> mvy ) ; memcpy <S2SV_ModEnd> ( mvy, <S2SV_ModStart> mvy ) ; memcpy <S2SV_ModEnd> ( mvy, <S2SV_ModStart> mvy ) ; memcpy <S2SV_ModEnd> ( mvx, <S2SV_ModStart> mvx ) ; memcpy <S2SV_ModEnd> ( mvy",0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
97,"<S2SV_ModStart> msicap msicap ; if ( <S2SV_ModStart> msicap, msgnum ) ) return - EINVAL <S2SV_ModEnd> ; return pci_emul_add_capability",0
98,"<S2SV_ModStart> ( c, ""command <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> this <S2SV_blank> context"" <S2SV_ModEnd>, ( char <S2SV_ModStart> ( c, ""command <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> this <S2SV_blank> context"" <S2SV_ModEnd>, ( char <S2SV_ModStart> ( c, ""command <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> this <S2SV_blank> context"" <S2SV_ModEnd>, ( char <S2SV_ModStart> ( c, ""command <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> this <S2SV_blank> context"" <S2SV_ModEnd>, ( char <S2SV_ModStart> ( c, ""command <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> this <S2SV_blank> context"" <S2SV_ModEnd>, ( char <S2SV_ModStart> ( c, ""command <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> this <S2SV_blank> context"" <S2SV_ModEnd>, ( char <S2SV_ModStart> ( c, ""command <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> this <S2SV_blank> context"" <S2SV_ModEnd>, ( char <S2SV_ModStart> ( c, ""command <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> this <S2SV_blank> context"" <S2SV_ModEnd>, ( char <S2SV_ModStart> ( c, ""command <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> this <S2SV_blank> context"" <S2SV_ModEnd>, ( char <S2SV_ModStart> (",0
99,"<S2SV_ModStart> ; if ( cfg -> g_w == 0 || cfg -> g_h == 0 ) { return VPX_CODEC_ERR_INVALID_ARGS ; } if ( <S2SV_ModStart> VPX_RC_ONE_PASS ) ) { <S2SV_ModStart> ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; return VPX_CODEC_ERR_INVALID_ARGS ; } <S2SV_ModStart> ""Cannot <S2SV_blank> increase <S2SV_blank> lag_in_frames"" ) ; if ( ( cfg -> g_w > ctx -> cfg. g_w ) && ( cfg -> g_h > ctx -> cfg. g_h ) ) { return VPX_CODEC_ERR_INVALID_ARGS ; }",0
100,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> vp9_init_plane_quantizers ( cpi,0
101,<S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> info -> si_signo,0
102,<S2SV_ModStart> ptr -> size <S2SV_ModEnd> ; tmp_str =,1
103,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
104,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> -> state == fmode <S2SV_ModEnd> ) return ; <S2SV_ModStart> if ( ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> )!= ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> { if ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> -> state = fmode <S2SV_ModEnd> ; } <S2SV_null>",0
105,"<S2SV_ModStart> read_info ) ; status = SetImageExtent ( image, image -> rows, image -> cols ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
106,<S2SV_ModStart> 0 ; } if ( len > SIZE_MAX - elem. in_sg [ 0 ]. iov_len ) { return 0 ; },0
107,"<S2SV_ModStart>, i, <S2SV_ModEnd> JPC_QCX_GETEXPN ( qcd <S2SV_ModStart> ] ), <S2SV_ModEnd> JPC_QCX_GETMANT ( qcd",0
108,"<S2SV_ModStart> = AV_PIX_FMT_PAL8 ; av_log ( avctx, AV_LOG_ERROR, ""CDXL <S2SV_blank> uses <S2SV_blank> PAL8 <S2SV_blank> bitdepth <S2SV_blank> for <S2SV_blank> this <S2SV_blank> codec"" ) ; <S2SV_ModStart> = AV_PIX_FMT_PAL8 ; av_log ( avctx, AV_LOG_ERROR, ""CDXL <S2SV_blank> uses <S2SV_blank> PAL8 <S2SV_blank> bitdepth <S2SV_blank> for <S2SV_blank> this <S2SV_blank> codec"" ) ; <S2SV_ModStart> = AV_PIX_FMT_PAL8 ; av_log ( avctx, AV_LOG_ERROR, ""CDXL <S2SV_blank> uses <S2SV_blank> PAL8 <S2SV_blank> bitdepth <S2SV_blank> for <S2SV_blank> this <S2SV_blank> codec"" ) ; <S2SV_ModStart> = AV_PIX_FMT_PAL8 ; av_log ( avctx, AV_LOG_ERROR, ""CDXL <S2SV_blank> uses <S2SV_blank> PAL8 <S2SV_blank> bitdepth <S2SV_blank> for <S2SV_blank> this <S2SV_blank> codec"" ) ; <S2SV_ModStart> = AV_PIX_FMT_PAL8 ; av_log ( avctx, AV_LOG_ERROR, ""CDXL <S2SV_blank> uses <S2SV_blank> PAL8 <S2SV_blank> bitdepth <S2SV_blank> for <S2SV_blank> this <S2SV_blank> codec"" ) ; <S2SV_ModStart> = AV_PIX_FMT_PAL8 ; av_log ( avctx, AV_LOG_ERROR, ""CDXL <S2SV_blank>",0
109,<S2SV_ModStart> length - 1 <S2SV_ModEnd> ) ; return,1
110,"<S2SV_ModStart> image_noffset ) { if ( noffset == - FDT_ERR_TRUNCATED || noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; }",0
111,"<S2SV_ModStart> rx_kfifo_lock ) ; mutex_init ( & state -> tx_kfifo_lock ) ; <S2SV_ModStart> - ENOMEM ; mutex_init ( & state -> rx_params_lock ) ; default_params = default_rx_params ; v4l2_subdev_call ( sd, ir, rx_s_parameters, & default_params ) ; mutex_init ( & state -> tx_params_lock ) ; default_params = default_tx_params ; v4l2_subdev_call ( sd, ir, tx_s_parameters, & default_params ) ;",0
112,"<S2SV_ModStart>, vpx_codec_dec_cfg_t * dec_cfg <S2SV_ModEnd>, vpx_codec_flags_t flags <S2SV_ModStart> ( ( flags & VPX_CODEC_USE_XMA ) &&! ( dec_cfg -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_POSTPROC ) &&! ( dec_cfg -> caps & VPX_CODEC_CAP_POSTPROC ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_ERROR_CONCEALMENT ) &&! ( iface -> caps & VPX_CODEC_CAP_ERROR_CONCEALMENT ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( (",0
113,<S2SV_ModStart> ; value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1100WritePhyReg (,0
114,<S2SV_ModStart> = tos ; ipc. tos = tos ;,0
115,<S2SV_ModStart> else if ( <S2SV_ModEnd> flags & VPX_CODEC_USE_XMA <S2SV_ModStart> flags & VPX_CODEC_USE_XMA <S2SV_ModEnd> ) res = <S2SV_ModStart> else if ( <S2SV_ModEnd> flags & VPX_CODEC_USE_PSNR <S2SV_ModStart> flags & VPX_CODEC_USE_PSNR <S2SV_ModEnd> ) res =,0
116,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
117,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; RESERVE_SPACE",1
118,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ) ; return 0 <S2SV_ModStart> break ; } return error <S2SV_ModEnd> ; } <S2SV_null>,1
119,"<S2SV_ModStart> ; if ( len < 1 ) { r_strbuf_append_c ( & op -> esil, '\\0' ) ; return 0 ; } if (",0
120,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
121,<S2SV_ModStart> goto trunc ; if ( lshp -> ls_length < sizeof ( struct lsa6_hdr ) ) goto trunc ;,0
122,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { ret = - EFAULT ; break ; } <S2SV_ModEnd> * obuf =",0
123,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
124,<S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ) <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ),1
125,"<S2SV_ModStart> costs, vp9_tree * <S2SV_ModStart> ) { const vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> ) ; const vpx_tree_index <S2SV_ModEnd> ii = tree",0
126,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
127,<S2SV_ModStart> & 0xffff ; if (! synth_devs [ dev ] -> load_patch ) return - ENXIO ;,0
128,"<S2SV_ModStart> fadst16 ( const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t <S2SV_ModEnd> x0, s1 <S2SV_ModStart> 15 ] ; tran_high_t x2 = input [ 0 ] ; tran_high_t <S2SV_ModEnd> x3 = input <S2SV_ModStart> 2 ] ; tran_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 11 ] ; tran_high_t <S2SV_ModEnd> x5 = input <S2SV_ModStart> 4 ] ; tran_high_t <S2SV_ModEnd> x6 = input <S2SV_ModStart> 9 ] ; tran_high_t <S2SV_ModEnd> x7 = input <S2SV_ModStart> 7 ] ; tran_high_t <S2SV_ModEnd> x8 = input <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> x9 = input <S2SV_ModStart> 9 ] ; tran_high_t <S2SV_ModEnd> x10 = input <S2SV_ModStart> 5 ] ; tran_high_t <S2SV_ModEnd> x11 = input <S2SV_ModStart> 10 ] ; tran_high_t <S2SV_ModEnd> x12 = input <S2SV_ModStart> 12 ] ;",0
129,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> flags |= HAS_EDSP <S2SV_ModStart> |= HAS_EDSP ; <S2SV_ModEnd> flags |= HAS_MEDIA <S2SV_ModStart> |= HAS_MEDIA ; <S2SV_ModEnd> flags |= HAS_NEON <S2SV_ModStart> flags |= HAS_NEON ; <S2SV_ModEnd> return flags &,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
131,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> count_segs_sb ( VP9_COMP <S2SV_ModStart> * cpi, <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd>, int * <S2SV_ModStart> bsize ) { <S2SV_ModEnd> const int mis <S2SV_ModStart> ) return ; int bw, bh ; const int bs = num_8x8_blocks_wide_lookup [ bsize ], hbs = bs / 2 ; if ( mi_row >= cm -> mi_rows || mi_col >= cm -> mi_cols ) return ; bw = num_8x8_blocks_wide_lookup [ mi <S2SV_ModEnd> [ 0 ] <S2SV_ModStart>. sb_type ] ; bh = num_8x8_blocks_high_lookup [ mi <S2SV_ModEnd> [ 0 ] <S2SV_ModStart>. sb_type ] <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( cpi, mi <S2SV_ModEnd>, mi_8x8, <S2SV_ModStart> ( cpi, mi <S2SV_ModEnd>, mi_8x8 + <S2SV_ModStart> ( cpi, mi <S2SV_ModEnd>, mi_8x8, <S2SV_ModStart> ( cpi, mi <S2SV_ModEnd>, mi_8x8 + <S2SV_ModStart> ( cpi, mi <S2SV_ModEnd>, mi_8x8 + <S2SV_ModStart> ( cpi, mi <S2SV_ModEnd>,",0
132,<S2SV_ModStart> flags & CLIENT_CLOSE_AFTER_REPLY ) break ; if ( c -> flags & CLIENT_SHUTDOWN,0
133,<S2SV_ModStart> get_blocks_flags = EXT4_GET_BLOCKS_CREATE | EXT4_GET_BLOCKS_DELALLOC_RESERVE <S2SV_ModStart> get_blocks_flags |= EXT4_GET_BLOCKS_DELALLOC_RESERVE <S2SV_ModEnd> ; blks =,0
134,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart>, handle, <S2SV_ModEnd> p -> ai_flags <S2SV_ModStart> p -> ai_flags, <S2SV_ModEnd> p -> ai_family <S2SV_ModStart> p -> ai_family, <S2SV_ModEnd> p -> ai_socktype <S2SV_ModStart> p -> ai_socktype <S2SV_ModEnd>, p -> <S2SV_ModStart>, NULL, <S2SV_ModEnd> p -> ai_addrlen <S2SV_ModStart>, NULL, <S2SV_ModEnd> p -> ai_addrlen <S2SV_ModStart> p -> ai_addrlen <S2SV_ModEnd>, NULL )",0
135,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
136,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
137,"<S2SV_ModStart> __u16 size, const <S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmemdup ( data, size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; kfree ( buf ) ;",1
138,"<S2SV_ModStart> asdl_seq * body, const char * name <S2SV_ModStart> = body ; p -> v. Module. name = name ;",0
139,"<S2SV_ModStart>, int64_t ts_end <S2SV_ModEnd> ) { struct <S2SV_ModStart> >> 4 ; <S2SV_ModEnd> if ( ctx <S2SV_ModStart> write_idx ) ; vp9_copy_and_extend_frame ( src, & buf -> img ) ; <S2SV_ModEnd> buf -> ts_start",0
140,<S2SV_ModStart> method == LPF_PICK_FROM_Q || method == LPF_PICK_FROM_SUBIMAGE,0
141,"<S2SV_ModStart> case BTA_DM_DISABLE_EVT : if ( p_data -> enable. status == BT_STATUS_SUCCESS ) { BTIF_TRACE_EVENT ( ""btif_dm_upstreams_cback <S2SV_blank> <S2SV_blank> disabling <S2SV_blank> event"" ) ; btif_dm_disable_evt ( ) ; } <S2SV_ModStart> case BTA_DM_DISABLE_EVT : if ( p_data -> enable. status == BT_STATUS_SUCCESS ) { BTIF_TRACE_EVENT ( ""btif_dm_upstreams_cback <S2SV_blank> <S2SV_blank> disabling <S2SV_blank> event"" ) ; btif_dm_disable_evt ( ) ; }",0
142,"<S2SV_ModStart> '!' : { luaL_checkstack ( L, 1, ""invalid <S2SV_blank> format <S2SV_blank> option <S2SV_blank> \'%c\'"", opt ) ;",0
143,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
144,"<S2SV_ModStart> vpx_codec_err_t res ; vpx_alg_priv_t * priv ; <S2SV_ModStart> ; else { priv = ctx -> priv -> alg_priv ; <S2SV_ModStart>. decode ( <S2SV_ModEnd> priv, data",0
145,"<S2SV_ModStart> inode * inode, struct buffer_head * * directory_bh ) { struct buffer_head * bh = NULL ; struct iso_directory_record * de ; struct iso_inode_info * ei = ISOFS_I ( inode ) ; int ret = - EIO ; block = ei -> i_iget5_block ; offset = ei -> i_iget5_offset ; de = ( struct iso_directory_record * ) ( bh -> b_data + offset ) ; de_len = * ( unsigned char * ) de ; if ( offset + de_len > bufsize ) { int frag1 = bufsize - offset ; tmpde = kmalloc ( de_len, GFP_KERNEL ) ; if ( tmpde == NULL ) { printk ( KERN_INFO ""%s: <S2SV_blank> out <S2SV_blank> of <S2SV_blank> memory\\n"", __func__ ) ; ret = - ENOMEM ; goto fail ; } memcpy ( tmpde, bh -> b_data + offset, frag1 ) ; brelse ( bh ) ; bh = inode -> i_sb ; inode -> i_ino = isofs_get_ino ( ei -> i_ig",0
146,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> ) ; } outpos += strlen ( outputbuffer ) ;",0
147,<S2SV_ModStart> self ) { PyObject_GC_UnTrack ( self ) ;,1
148,<S2SV_ModStart> ( ) ; if (! a ) return 0 ; <S2SV_ModStart> ] ) ; <S2SV_ModEnd> suffix_object ( p,0
149,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> len ; Py_ssize_t <S2SV_ModEnd> i ; tmp <S2SV_ModStart> ++ ) { asdl_stmt_ty <S2SV_ModEnd> value ; res <S2SV_ModStart> ; res = obj2ast_stmt_ty <S2SV_ModEnd> ( PyList_GET_ITEM ( <S2SV_ModStart> len ; Py_ssize_t <S2SV_ModEnd> i ; tmp <S2SV_ModStart> } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> len ; Py_ssize_t <S2SV_ModEnd> i ; tmp <S2SV_ModStart> } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> len ; Py_ssize_t <S2SV_ModEnd> i ; tmp <S2SV_ModStart> ++ ) { asdl_stmt_ty <S2SV_ModEnd> value ; res <S2SV_ModStart> ; res = obj2ast_stmt_ty <S2SV_ModEnd> ( PyList_GET_ITEM ( <S2SV_ModStart> len ; Py_ssize_t <S2SV_ModEnd> i ; tmp <S2SV_ModStart> ; res = obj2ast_stmt_ty <S2SV_ModEnd> ( PyList_GET_ITEM <S2SV_ModStart> } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> len ; Py_ssize_t <S2SV_ModEnd> i ; tmp",0
150,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
151,<S2SV_ModStart> ; if ( msg_sys -> msg_name == NULL ) { err = - EFAULT ; goto out_freeiov ; } if (,0
152,<S2SV_ModStart> buffer_head * dibh <S2SV_ModEnd> ; u64 bn <S2SV_ModStart> unsigned ptrs_per_blk ; <S2SV_ModEnd> unsigned end_of_metadata = <S2SV_ModStart> height - 1 <S2SV_ModEnd> ; enum alloc_state <S2SV_ModStart> ; if (! dibh ) return - EIO ; if (,0
153,"<S2SV_ModStart>, ""Codec: <S2SV_blank> %s\\n"", global -> codec? <S2SV_ModStart> interface ( ) ) : vpx_codec_iface_name ( global -> codec? global -> codec -> interface ( ) : NULL",0
154,<S2SV_ModStart> -> psvi ; if ( copyNs!= NULL ) { <S2SV_ModStart> copyNs ) ; },0
155,"<S2SV_ModStart> { if ( safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> { if ( safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> { if ( safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.zshrc"",",0
156,<S2SV_ModStart> msix_tab_size ) { <S2SV_ModEnd> bzero ( msixcap,1
157,<S2SV_ModStart> ; if ( <S2SV_ModEnd> js_regexec ( re,0
158,<S2SV_ModStart> case OFreshOID : sp -- ; <S2SV_ModStart> >= 0 ) { <S2SV_ModStart> dest ) ; },0
159,"<S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; ksz8851WriteReg <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( interface, KSZ8851_ISR ) ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } if ( ( isr & ISR_TXIS )!= 0 ) { ksz8851WriteReg ( interface, KSZ8851_ISR, ISR_TXIS ) ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } } if ( ( isr & ISR_RXIS )!= 0 ) { ksz8851WriteReg ( interface, <S2SV_ModStart> ( interface, KSZ88",0
160,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_quantization ( VP9_COMMON <S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
161,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> p_buf, msglen )",1
162,"<S2SV_ModStart> fp ) ; if ( fp == NULL ) { log_error ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s"", __func__, file ) ; goto sslerr ; }",0
163,"<S2SV_ModStart> ( ) ; strncat <S2SV_ModEnd> ( t1_buf_array, <S2SV_ModStart> t1_buf_array, t1_line_array, strlen ( t1_line_array ) - 1",0
164,"<S2SV_ModStart> int mi_col, MACROBLOCKD * xd, <S2SV_ModStart> int bsl = b_width_log2_subsize <S2SV_ModEnd> ( bsize ) <S2SV_ModStart> / 4 ; <S2SV_ModEnd> assert ( bsize <S2SV_ModStart> case PARTITION_NONE : <S2SV_ModEnd> if ( mi_row <S2SV_ModStart> case PARTITION_VERT : set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; break ; case PARTITION_HORZ : set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col + hbs, bsize ) ; break ; case PARTITION_HORX : set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ]",0
165,"<S2SV_ModStart> key_ref ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) { ret = - ENOKEY ; goto error2 ; }",1
166,<S2SV_ModStart> -> u4_max_ofst ; if ( 0 == ps_dec -> u1_first_slice_found ) { ret = ih264d_decode_first_slice ( ps_dec ) ; if ( ret!= 0 ) { return ret ; } },0
167,<S2SV_ModStart> dst_reg -> var_off ) ; if (! src_known ||! dst_known ) return - EINVAL,0
168,"<S2SV_ModStart> = posix_open ; if (! ( pTcon -> options & SMB_NO_OPEN_FILES ) ) { cifs_dbg ( FYI, ""posix_open <S2SV_blank> is <S2SV_blank> not <S2SV_blank> enabled <S2SV_blank> on <S2SV_blank> this <S2SV_blank> filesystem"" ) ; goto lookup_out ; }",0
169,"<S2SV_ModStart> -> sk_bound_dev_if ; RCU_INIT_POINTER ( ireq -> ireq_opt, <S2SV_ModEnd> tcp_v4_save_options ( skb <S2SV_ModStart> tcp_v4_save_options ( skb )",0
170,"<S2SV_ModStart> svc_ctx ) { uint32_t <S2SV_ModEnd> number_of_frames, number_of_keyframes <S2SV_ModStart> double y_scale ; SvcInternal_t <S2SV_ModEnd> * const si <S2SV_ModStart> svc_ctx ) ; svc_log ( svc_ctx, SVC_LOG_INFO, ""\\n"" ) ; number_of_frames <S2SV_ModEnd> = si -> <S2SV_ModStart> = si -> number_of_frames <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( number_of_frames <S2SV_ModEnd> <= 0 ) <S2SV_ModStart> ""\\n"" ) ; number_of_keyframes = number_of_frames <S2SV_ModEnd> / si -> <S2SV_ModStart> + 1 ; <S2SV_ModEnd> for ( i <S2SV_ModStart> i ) { <S2SV_ModEnd> if ( svc_ctx <S2SV_ModStart> ""\\n"" ) ; <S2SV_ModEnd> svc_log ( svc_ctx",0
171,<S2SV_ModStart> -> sb_buffer ) { <S2SV_ModStart> sb_buffer ) ; screen -> sb_buffer = NULL ; },0
172,"<S2SV_ModStart> n ) { <S2SV_ModEnd> char * literal_start <S2SV_ModStart> NULL ) ; literal_start = * str ; literal_end = * str ; for ( <S2SV_ModEnd> ; * str <S2SV_ModStart> ; if ( <S2SV_ModEnd> ch == '{' <S2SV_ModStart> '}' ) { <S2SV_ModEnd> result = 1 <S2SV_ModStart> ; } } <S2SV_ModEnd> break ; } <S2SV_ModStart> ; } } <S2SV_ModEnd> assert ( * <S2SV_ModStart> ; } } <S2SV_ModEnd> if ( literal_start <S2SV_ModStart> : if ( * str < end ) { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; return - 1 ; } if ( literal_start!= literal_end ) { if ( raw ) * literal = decode_unicode_with_escapes ( c, n, literal_start, literal_end - literal_start ) ; if (! * literal ) return - 1 ; } return <S2SV_ModEnd> literal_start - literal_start <S2SV_ModStart> literal_start - literal_start <S2SV_ModEnd> ; } <S2SV_null>",0
173,"<S2SV_ModStart> pd, g_settings_dump_location, pd -> dd_dirname",0
174,<S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ),0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
176,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mv_stride",0
177,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> + mi_col ; const <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> cm -> mi_grid_visible <S2SV_ModEnd> ; MODE_INFO * <S2SV_ModStart> MODE_INFO * * prev <S2SV_ModEnd> = cm -> <S2SV_ModStart> cm -> prev_mi_grid_visible <S2SV_ModEnd> ; BLOCK_SIZE bsize <S2SV_ModStart> ; BLOCK_SIZE bsize <S2SV_ModEnd> ; cpi -> <S2SV_ModStart> = UINT_MAX ; <S2SV_ModEnd> switch ( cpi <S2SV_ModStart>, tile, mi <S2SV_ModEnd>, mi_row, <S2SV_ModStart>, tile, mi <S2SV_ModEnd>, BLOCK_64X64, <S2SV_ModStart>, tile, mi <S2SV_ModEnd>, BLOCK_64X64, <S2SV_ModStart>, tile, mi <S2SV_ModEnd>, BLOCK_64X64 ) <S2SV_ModStart>, tile, mi <S2SV_ModEnd>, BLOCK_64X64 ) <S2SV_ModStart>, tile, mi <S2SV_ModEnd>, BLOCK_64X64 ) <S2SV_ModStart>, tile, mi <S2SV_ModEnd>, BLOCK_64X64 ) <S2SV_ModStart>, tile, mi <S2SV_ModEnd>, BLOCK_64X64 ) <S2SV_ModStart>, tile, mi <S2SV_ModEnd>, BLOCK_64X64 ) <S2SV_ModStart>, tile, mi <S2SV_ModEnd>, BLOCK_64X64",0
178,<S2SV_ModStart> u_int8_t state ; if ( nf_ct_is_ping ( ct ) ) return false ;,0
179,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static void <S2SV_ModEnd> ip_options_get_finish ( struct <S2SV_ModStart> ip_options_get_finish ( struct ip_options_rcu <S2SV_ModEnd> * net, <S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * opt, <S2SV_ModStart> & 3 ) rcu_assign_pointer ( <S2SV_ModStart> __data [ optlen <S2SV_ModEnd> ] = IPOPT_END <S2SV_ModStart> = IPOPT_END ; rcu_assign_pointer ( <S2SV_ModStart> = optlen ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
180,"<S2SV_ModStart> ; if ( strcmp ( connection, ""Upgrade"" ) == 0 ) { const char * ws_version = http_request_get_header ( info -> request, ""Sec-WebSocket-Version"" ) ; if ( ws_version == NULL || strcmp ( ws_version, ""13"" )!= 0 ) goto error ; const char * ws_upgrade = http_request_get_header ( info -> request, ""Sec-WebSocket-Upgrade"" ) ; if ( ws_upgrade == NULL || strcasecmp ( ws_upgrade, ""Upgrade"" ) == 0 ) { const char * ws_version = http_request_get_header ( info -> request, ""Sec-WebSocket-Version"" ) ; if ( ws_version == NULL || strcmp ( ws_version, ""13"" )!= 0 ) goto error ; const char * ws_upgrade = http_request_get_header ( info -> request, ""Sec-WebSocket-Upgrade"" ) ; if ( ws_upgrade == NULL || strcasecmp ( ws_upgrade, ""Upgrade"" ) == 0 ) { const char * ws_upgrade = http_request_get_header ( info -> request, ""Sec-WebSocket-Upgrade"" ) ; if ( ws_upgrade ==",0
181,"<S2SV_ModStart> * findalldevs_if ; uint32 nif = 0 ; if ( pcap_findalldevs ( & alldevs, errmsgbuf ) == - 1 ) { return - 1 ; } if ( alldevs == NULL ) { if ( rpcap_senderror ( pars -> sockctrl, ver, PCAP_ERR_NOREMOTEIF, ""No <S2SV_blank> interfaces <S2SV_blank> found! <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> libpcap/WinPcap <S2SV_blank> is <S2SV_blank> properly <S2SV_blank> installed"" "" <S2SV_blank> and <S2SV_blank> you <S2SV_blank> have <S2SV_blank> the <S2SV_blank> right <S2SV_blank> to <S2SV_blank> access <S2SV_blank> to <S2SV_blank> the <S2SV_blank> remote <S2SV_blank> device."", errbuf ) == - 1 ) { rpcapd_log ( LOGPRIO_ERROR, ""Send <S2SV_blank> to <S2SV_blank> client <S2SV_blank> failed: <S2SV_blank> %s"", errbuf ) ; return - 1 ; } return 0 ; } for ( d = alldevs ; d!= NULL ; d = d -> next ) { nif ++ ; if ( d -> description ) <S2SV_ModStart> d -> description <S2SV_ModEnd> ) ; if <S2SV_ModStart> d -> name <S2SV_ModEnd> ) ; plen <S2SV_ModStart> struct rpcap_findalldevs_if ) ; if ( sock_bufferize ( NULL, sizeof ( struct rpcap_header ), NULL, &",0
182,"<S2SV_ModStart> path, client_uid <S2SV_ModEnd> ) ; if",0
183,<S2SV_ModStart> -> columns - 2 <S2SV_ModEnd> ) ; x,0
184,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
185,"<S2SV_ModStart> image ) ; if ( image == DestroyImageList ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
186,<S2SV_ModStart> = len ; ND_TCHECK ( bp [ 0 ] ) ;,0
187,"<S2SV_ModStart>! ptrace_has_cap ( task_cred ( task ) <S2SV_ModEnd> -> user_ns,",0
188,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
189,<S2SV_ModStart> -> s_sei_params. i1_sei_parameters_present_flag = 1 ; ps_parse -> s_sei_params.,0
190,<S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( *,0
191,"<S2SV_ModStart>, int rep_quick, myisam_data_t * myisam_data <S2SV_ModStart> ) ) ; myisam_data = ( myisam_data_t * ) malloc ( sizeof ( myisam_data_t ) ) ; if (! myisam_data ) { DBUG_PRINT ( ""error"", ( ""mi_repair_parallel: <S2SV_blank> malloc <S2SV_blank> failed"" ) ) ; return - 1 ; } <S2SV_ModStart> ) ) ; myisam_data = ( myisam_data_t * ) malloc ( sizeof ( myisam_data_t ) ) ; if (! myisam_data ) { DBUG_PRINT ( ""error"", ( ""mi_repair_parallel: <S2SV_blank> malloc <S2SV_blank> failed"" ) ) ; return - 1 ; } <S2SV_ModStart> ) ) ; myisam_data = ( myisam_data_t * ) malloc ( sizeof ( myisam_data_t ) ) ; if (! myisam_data ) { DBUG_PRINT ( ""error"", ( ""mi_repair_parallel: <S2SV_blank> malloc <S2SV_blank> failed"" ) ) ; return - 1 ; }",0
192,"<S2SV_ModStart> ) ; } buflen = pq_getmsglen ( buf, pcount * sizeof ( Pairs ) ) ; if ( buflen < buflen ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""hstore_recv"" ) ) ) ;",0
193,"<S2SV_ModStart> val ) ; if (! <S2SV_ModStart>, val ) ) continue",0
194,"<S2SV_ModStart> ) ) { if ( clen > sizeof ( c -> buf ) - 1 ) { return bad_request ( c, 400, __LINE__ ) ; }",0
195,"<S2SV_ModStart> vp9_fht16x16_c ( const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> 256 ] ; tran_low_t <S2SV_ModEnd> * outptr = <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16",0
196,"<S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( data, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( new_data, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( new_data,",0
197,"<S2SV_ModStart> '\\0' ) ; size_t len = <S2SV_ModEnd> strlen ( filename <S2SV_ModStart> ) + 5 ; char * temp_filename = osi_calloc ( len <S2SV_ModStart> ; if ( temp_filename == NULL <S2SV_ModEnd> ) { LOG_ERROR <S2SV_ModStart> false ; } memset ( temp_filename, 0, len ) ; strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } for ( const list_node_t * node = list_begin ( config -> sections ) ; node!= list_end ( config -> sections ) ; node = list_next ( node ) ) { const section_t * section = ( const section_t * ) list_node ( node ) ; fprintf ( fp, ""[%s]\\n"", section -> name ) ; for ( const entry_t * entry = ( const entry_t * ) list_node ( enode",0
198,<S2SV_ModStart> tptr ) ; ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> tptr ) ; ND_TCHECK_32BITS ( tptr ) ;,0
199,"<S2SV_ModStart> userData, target <S2SV_ModEnd> ) ; ctxt",0
200,"<S2SV_ModStart> ( ) ; size_t <S2SV_ModEnd> rv = Socket_print <S2SV_ModStart> ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %lu\\r\\n"" <S2SV_ModEnd> ""%s"" ""\\r\\n"" ""%s""",0
201,"<S2SV_ModStart> ) ; } if ( copy_file ( src, dest ) < 0 ) { fs_logger2 ( ""clone"", dest ) ; } _exit ( 0 ) ; <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
202,<S2SV_ModStart>!= BFA_STATUS_OK ) { kfree ( fcstats ) ; <S2SV_ModStart> return NULL ; },1
203,"<S2SV_ModStart> -> x = F_MIN ( <S2SV_ModEnd> value -> x <S2SV_ModStart> -> x, 1.0f <S2SV_ModEnd> ) ; value <S2SV_ModStart> -> y = F_MIN ( <S2SV_ModEnd> value -> y <S2SV_ModStart> -> y, 1.0f <S2SV_ModEnd> ) ; value <S2SV_ModStart> -> z = F_MIN ( <S2SV_ModEnd> value -> z <S2SV_ModStart> -> z = 1.0f <S2SV_ModEnd> ; } <S2SV_null>",0
204,<S2SV_ModStart> ; rec -> <S2SV_ModEnd> sasl_password = src,0
205,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
206,"<S2SV_ModStart> i, tcount <S2SV_ModEnd> ; if ( <S2SV_ModStart> return ; } tcount = 0 ; for ( i = c, o = datao ; i ; -- i, o += 12 ) { size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteCanonEntry ) ) ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } n -> entries [ tcount ]. tag = exif_get_short ( buf + o, n -> order ) ; n -> entries [ tcount ]. format = exif_get_short ( buf + o + 4, n -> order ) ; n -> entries [ tcount ]. components = exif_get_long ( buf + o + 8, n -> order ) ; n -> entries [ tcount ]. components = exif_get_long ( buf + o + 8, n -> order ) ; } tcount ++ ; }",0
207,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> testflag & T_DESCRIPT ) &&! ( param -> testflag & ( T_DESCRIPT | T_READONLY ) ),0
208,"<S2SV_ModStart> olen ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> long hex ; <S2SV_ModEnd> if (! <S2SV_ModStart> hex ) ; if (! <S2SV_ModEnd> Curl_convert_from_network ( handle <S2SV_ModStart>, 1 ) ) { free ( ns ) ; return NULL ; } string += 2 ; alloc -= 2 ; } ns [ strindex ++ ] = in ; string ++ ; } ns [ strindex ] = 0 ; if ( olen ) * olen = strindex ; return ns <S2SV_ModEnd> ; } <S2SV_null>",0
209,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
210,<S2SV_ModStart> ; def -> <S2SV_ModEnd> session_setup = usm_session_init,0
211,<S2SV_ModStart> NULL ; return <S2SV_ModEnd> match ( prog,0
212,<S2SV_ModStart> idx ] ; <S2SV_ModEnd> switch ( action <S2SV_ModStart> ) ; } <S2SV_ModEnd> return SNMP_ERR_NOERROR ;,0
213,<S2SV_ModStart> 255U ; } if ( pixels > ( ( ssize_t ) number_pixels - 1 ) / sizeof ( unsigned char ) ) return ( - 1 ) ;,0
214,<S2SV_ModStart> timer ) ; spin_lock_irq ( & slave_active_lock ) ; <S2SV_ModStart> open_list ) { <S2SV_ModEnd> _snd_timer_stop ( slave <S2SV_ModStart> = NULL ; list_del_init ( & slave -> ack_list ) ;,0
215,<S2SV_ModStart> -> u1_dpb_commands_read ) { <S2SV_ModStart> ps_dec ) ; } else { ps_dec -> u4_bitoffset = 0 ; },0
216,"<S2SV_ModStart> decode ) { uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > info -> rasterSize || widthOverflow > 0 || heightOverflow > 0 ) { void * tmpRasterBits = reallocarray ( info -> rasterBits, <S2SV_ModEnd> info -> rasterSize <S2SV_ModStart> info -> rasterSize, sizeof ( uint_fast32_t ) ) ; memset ( tmpRasterBits, 0, sizeof ( uint_fast32_t ) ) ; } <S2SV_ModEnd> if ( newRasterSize",0
217,<S2SV_ModStart> validator -> user ) || cherokee_buffer_is_empty ( & conn -> validator -> passwd,0
218,<S2SV_ModStart> bus ] ; if ( bi == NULL ) return <S2SV_ModEnd> ; si =,0
219,"<S2SV_ModStart>, timeo ) <S2SV_ModEnd> ; if (",1
220,<S2SV_ModStart> += 9 ; ( <S2SV_ModStart> isspace ( * ( s + 9 ) <S2SV_ModEnd> ) ; s <S2SV_ModStart> t &&! ( <S2SV_ModStart> isspace ( * ( s + 1 ) ) && ( t < s + len ) <S2SV_ModEnd> ) ) t,0
221,"<S2SV_ModStart>. active_set ; if ( uipc_main. read_set == UINT_MAX ) { BTIF_TRACE_EVENT ( ""UIPC <S2SV_blank> READ <S2SV_blank> THREAD <S2SV_blank> EXITING"" ) ; uipc_main_cleanup ( ) ; uipc_main. tid = 0 ; BTIF_TRACE_EVENT ( ""UIPC <S2SV_blank> READ <S2SV_blank> THREAD <S2SV_blank> DONE"" ) ; break ; }",0
222,<S2SV_ModStart> msixcap msixcap ; if <S2SV_ModEnd> ( msgnum >= <S2SV_ModStart> msix_table_init ( dev <S2SV_ModEnd> ) ; pci_populate_msixcap,0
223,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_int64_t <S2SV_ModEnd> decode_unsigned_max ( struct <S2SV_ModStart> max ) { vpx_int64_t <S2SV_ModEnd> data = vp9_rb_read_literal,0
224,<S2SV_ModStart> == NULL ) return KRB5KDC_ERR_PREAUTH_FAILED <S2SV_ModEnd> ; status = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> X509_NAME_free ( is,0
225,<S2SV_ModStart> <S2SV_null> <S2SV_null> static MV_REFERENCE_FRAME <S2SV_ModEnd> select_tx_mode ( const <S2SV_ModStart> cpi ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; <S2SV_ModStart> else if ( frame_type <S2SV_ModEnd> == 0 ) <S2SV_ModStart> else if ( frame_type <S2SV_ModEnd> == USE_FULL_RD ) <S2SV_ModStart> tx_mode ; } <S2SV_ModEnd> } } <S2SV_null>,0
226,<S2SV_ModStart> ) ; } if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT,0
227,<S2SV_ModStart> ( buf1 -> tile_size <S2SV_ModEnd> < buf2 -> <S2SV_ModStart> < buf2 -> tile_size <S2SV_ModEnd> ) { return <S2SV_ModStart> ( buf1 -> tile_size <S2SV_ModEnd> == buf2 -> <S2SV_ModStart> == buf2 -> tile_size <S2SV_ModEnd> ) { return,0
228,<S2SV_ModStart> ) + size ; if ( unlikely ( sz > ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) ) return NULL,0
229,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,1
230,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs,",0
231,"<S2SV_ModStart> fd, EPOLLIN | EPOLLRDHUP",0
232,<S2SV_ModStart> ( ) ; errors += test_string_encoding ( ) ;,0
233,<S2SV_ModStart> -> lun ) sas_eh_finish_cmd <S2SV_ModEnd> ( cmd ),1
234,"<S2SV_ModStart>, end_col_offset ; if ( TYPE ( CHILD ( n, name_i ) ) == FUNCTION ) { return NULL ; } <S2SV_ModStart> 2 ; } if ( TYPE ( CHILD ( n, name_i + 4 ) ) == FUNCTION ) { body = ast_for_funcdef_body ( c, CHILD ( n, name_i + 4 ) ) ; if (! body ) return NULL ; name_i += 4 ; } <S2SV_ModStart> ( is_async ) { <S2SV_ModStart> returns, LINENO ( n0 ), n0 <S2SV_ModEnd> -> n_col_offset, <S2SV_ModStart> c_arena ) ; } else { return NULL ; }",0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,"<S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > Rec2. RecordLength ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
237,,1
238,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
239,"<S2SV_ModStart> if ( position >= <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> headend, 1, position - psf -> headend, psf ) ; psf -> headindex = position ; break ; case SEEK_CUR : if ( psf -> headindex + position < 0 ) break ; if ( psf -> headindex >= SIGNED_SIZEOF ( psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; if ( psf -> headindex + position <= psf -> headend ) { psf -> headindex += position ; break ; } ; if ( psf -> headindex + position > <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> headend, 1, position - ( psf -> headend - psf -> headindex ), psf ) ; psf -> headindex = <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> headend <S2SV_ModEnd> ; break ;",0
240,<S2SV_ModStart> u4_ofst ) ; ps_cabac -> au1_ctxt_models [ IHEVC_CAB_CTXT_END - 1 ] = 0 ;,0
241,"<S2SV_ModStart> ; } } if ( off < ctx -> size && CH ( off )!= _T ( '\\0' ) ) { ret = md_analyze_fence ( ctx, CH ( off ), p_end, line, & off ) ; if ( ret ) return ret ; }",0
242,"<S2SV_ModStart> perf_event_context * ctx <S2SV_ModEnd> ; struct task_struct <S2SV_ModStart> -> ctx ; raw_spin_lock_irq ( & ctx -> lock ) ; ctx = perf_event_ctx_lock ( event ) ; if (! ctx ) { raw_spin_unlock_irq ( & ctx -> lock ) ; return ; } task = ctx -> task ; if (! task ) { cpu_function_call ( event -> cpu, __perf_event_disable, event ) ; return ; } retry : if (! task_function_call ( task, __perf_event_disable, event ) ) return ; ctx = event -> ctx <S2SV_ModEnd> ; if ( <S2SV_ModStart> PERF_EVENT_STATE_ACTIVE ) { <S2SV_ModEnd> task = ctx <S2SV_ModStart> event ) ; perf_event_ctx_unlock ( event ) <S2SV_ModEnd> ; } raw_spin_unlock_irq",0
243,<S2SV_ModStart> -> post_proc_flag = <S2SV_ModEnd> ctx -> postproc_cfg <S2SV_ModStart>. noise_level ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
244,<S2SV_ModStart> ( struct olsr_msg4 ) ) ; ND_TCHECK2 ( tptr + sizeof ( struct olsr_msg4,0
245,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vpx_usec_timer_start ( & <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,1
246,"<S2SV_ModStart> ) ) { fs_logger2 ( ""copy"", dest ) ; <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> copy_file ( src <S2SV_ModStart> dest ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return 1 ;",0
247,<S2SV_ModStart> ) ) ; if ( sfb < 0 ) sfb = 0 ; <S2SV_ModStart> ) ) ; if ( sfb < 0 ) sfb = 0 ; <S2SV_ModStart> ) ) ; if ( sfb < 0 ) sfb = 0 ; <S2SV_ModStart> ) ) ; if ( sfb < 0 ) sfb = 0 ; <S2SV_ModStart> ) ) ; if ( sfb < 0 ) sfb = 0 ; <S2SV_ModStart> ) ) ; if ( sfb < 0 ) sfb = 0 ; <S2SV_ModStart> ) ) ; if ( sfb < 0 ) sfb = 0 ; <S2SV_ModStart> ) ) ; if ( sfb < 0 ) sfb = 0 ; <S2SV_ModStart> ) ) ; if ( sfb < 0 ) sfb = 0 ; <S2SV_ModStart> ) ) ; if ( sfb < 0 ) sfb = 0 ; <S2SV_ModStart> ) ) ; if ( sfb < 0 ) sfb = 0 ; <S2SV_ModStart> ) ) ; if ( sfb < 0 ) sfb = 0 ; <S2SV_ModStart> ) ) ; if ( sfb < 0 ) sfb = 0 ; <S2SV_ModStart> ) ) ; if ( sfb < 0 ) sfb = 0 ; <S2SV_ModStart> ) ) ; if ( sfb < 0 ) sfb = 0 ;,0
248,<S2SV_ModStart> lua_module ) ; <S2SV_ModEnd> lua_authz_provider_spec * prov_spec <S2SV_ModStart> prov_spec -> args && prov_spec -> args -> nelts,0
249,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> rows, image -> cols ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
250,<S2SV_ModStart> (! proto_end || proto_end + 3 > url,0
251,<S2SV_ModStart> end = path ; if ( end >= path_len ) return - FDT_ERR_NOSPACE,0
252,"<S2SV_ModStart> ) ; } if ( server. bgsavechildpid == - 1 && server. bgrewritechildpid == - 1 ) { redisLog ( REDIS_WARNING, ""Unable <S2SV_blank> to <S2SV_blank> save <S2SV_blank> a <S2SV_blank> client <S2SV_blank> to <S2SV_blank> a <S2SV_blank> new <S2SV_blank> master, <S2SV_blank> check <S2SV_blank> the <S2SV_blank> logs <S2SV_blank> for <S2SV_blank> more <S2SV_blank> information"" ) ; exit ( 0 ) ; }",0
253,<S2SV_ModStart> channel ) ; <S2SV_ModEnd> set_description ( client,1
254,<S2SV_ModStart> book -> dim && i < n,1
255,<S2SV_ModStart> action ) { if ( r < 0.0 ) return ;,0
256,<S2SV_ModStart> this_h ) { int i ; <S2SV_ModStart> 16 ) { for ( i = 0 ; i < 2 ; i ++ ) { sf -> predict [ i ] [ i ] [ 0 ] = vp9_convolve8_copy ; sf -> predict [ i ] [ i ] [ 1 ] = vp9_convolve8_avg_vert ; sf -> predict [ i ] [ i ] [ 1 ] = vp9_convolve8_avg_horiz ; } } else { for ( i = 0 ; i < 2 ; i ++ ) { sf -> predict [ i ] [ i ] [ 0 ] = vp9_convolve8_vert ; sf -> predict [ i ] [ i ] [ 1 ] = vp9_convolve8_avg_vert ; sf -> predict [ i ] [ 0 ] [ 1 ] = vp9_convolve8_horiz ; sf -> predict [ i ] [ 0 ] [ 1 ] = vp9_convolve8_avg_horiz ; } } <S2SV_ModStart> } else { for ( i = 0 ; i < 2 ; i ++ ) { sf -> predict [ i ] [ i ] [ 0 ] = vp9_convolve8_copy ; sf ->,0
257,<S2SV_ModStart> (! sock ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( <S2SV_ModEnd> ( count && <S2SV_ModStart> buf ) ) { ret = - 1 ; goto done ; } <S2SV_ModEnd> if ( buf <S2SV_ModStart> OE_EINVAL ) ; <S2SV_ModEnd> return ret ;,0
258,<S2SV_ModStart> ; if ( msg. msg_namelen > sizeof ( src_info ) ) return - EINVAL ; if (,0
259,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> sctp_v6_protosw_exit ( ) <S2SV_ModStart> ( ) ; unregister_pernet_subsys ( & sctp_net_ops ) ;,0
260,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void show_psnr (,0
261,<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen (,1
262,"<S2SV_ModStart> ; TRACE_DEBUG ( ""CIDER=0x%04x"" <S2SV_ModEnd> PRIX16 ""\\r\\n"", <S2SV_ModStart> ; TRACE_DEBUG ( ""PHY1ILR=0x%04x"" <S2SV_ModEnd> PRIX16 ""\\r\\n"", <S2SV_ModStart> ; TRACE_DEBUG ( ""PHY1IHR=0x%04x"" <S2SV_ModEnd> PRIX16 ""\\r\\n"", <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ERROR_OUT_OF_MEMORY ; } memset ( context -> txBuffer, 0, ETH_MAX_FRAME_SIZE ) ; memset ( context -> rxBuffer, 0, ETH_MAX_FRAME_SIZE ) ; <S2SV_ModStart> ( interface, KSZ8851_MARH <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface -> <S2SV_ModEnd> macAddr. w <S2SV_ModStart> ( interface -> <S2SV_ModEnd> macAddr. w <S2SV_ModStart> ( interface -> <S2SV_ModEnd> macAddr. w <S2SV_ModStart> ( interface -> <S2SV_ModEnd> macAddr. w <S2SV_ModStart> ( interface -> <S2SV_ModEnd> macAddr. w <S2SV_ModStart> ( interface -> <S2SV_ModEnd> macAddr. w <S2SV_ModStart> ( interface -> <S2SV_ModEnd> macAddr. w <S2SV_ModStart> ( interface -> <S2SV_ModEnd> macAddr. w <S2SV_ModStart> ( interface -> <S2SV_ModEnd>",0
263,"<S2SV_ModStart> skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
264,"<S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; ret = <S2SV_ModEnd> fit_check_format ( fit <S2SV_ModStart>, IMAGE_SIZE_INVAL ) ; if ( ret <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; ret = <S2SV_ModEnd> - ENOEXEC ; <S2SV_ModStart> - ENOEXEC ; goto error ; <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; ret = <S2SV_ModEnd> - ENOEXEC ; <S2SV_ModStart> - ENOEXEC ; goto error ; <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; ret = <S2SV_ModEnd> - ENOEXEC ; <S2SV_ModStart> - ENOEXEC ; goto error ; <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; ret = <S2SV_ModEnd> - ENOEXEC ; <S2SV_ModStart> - ENOEXEC ; goto error ; <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; ret = <S2SV_ModEnd> - ENOEXEC ; <S2SV_ModStart> - ENOEXEC ; goto error ; <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; ret = <S2SV_ModEnd> - ENOEXEC ; <S2SV_ModStart> - ENOEXEC ; goto error ; <S2SV_ModStart> - ENOEXEC ; goto error ; <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; ret = <S2SV_ModEnd> - ENOEXEC ; <S2SV_ModStart> - ENOEXEC ; goto error ; <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; ret = <S2SV_ModEnd> - ENOEXEC ; <S2SV_ModStart> - ENOEXEC ; goto error ; <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; ret = <S2SV_ModEnd>",0
265,"<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> uinput_fd, UI_DEV_DESTROY )",1
266,<S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> = rc -> avg_frame_bandwidth <S2SV_ModEnd> ; # endif,1
267,"<S2SV_ModStart> i ], ""-u"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart>, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""-u"" <S2SV_ModEnd> ) ; argv",0
268,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
269,<S2SV_ModStart> ib ] ; dequant_ptr = d -> dequant ; coeff_ptr = b -> coeff ; qcoeff_ptr = b -> qcoeff ; dqcoeff_ptr = d -> dqcoeff ; i0 =! type ; eob = * d -> eob ; rdmult = mb -> rdmult * err_mult ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ; rddiv = mb -> rddiv ; best_mask [ 0 ] = best_mask [ 1 ] = 0 ; tokens [ eob ] [ 0 ]. token = DCT_EOB_TOKEN ; tokens [ eob ] [ 0 ]. error = 0 ; tokens [ eob ] [ 0 ]. qc = 0 ; tokens [ eob ] [ 0 ]. next = 16 ; tokens [ eob ] [ 0 ]. error = 0 ; tokens [ eob ] [ 0 ]. next = 16 ; tokens [ eob ] [ 0 ]. token = DCT_EOB_TOKEN ; tokens [ eob ] [ 1 ]. token = DCT_EOB_TOKEN ;,0
270,"<S2SV_ModStart> FN_REFLEN ] ; my_snprintf ( buff, sizeof ( buff ), ""%s"", opt_basedir <S2SV_ModEnd> ) ; #",0
271,<S2SV_ModStart> decrypt_cb ) { ptrdiff_t <S2SV_ModEnd> n = ( <S2SV_ModStart> n = ( ptrdiff_t <S2SV_ModEnd> ) ( data_end,0
272,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
273,"<S2SV_ModStart>, int * returnuv <S2SV_ModEnd> ) { BLOCK <S2SV_ModStart> int zero_mv_sse = - 1 <S2SV_ModEnd>, best_sse = <S2SV_ModStart>, best_sse = - 1 <S2SV_ModEnd>, best_rd_sse = <S2SV_ModStart>, best_rd_sse = - 1 <S2SV_ModEnd> ; # endif <S2SV_ModStart>. yrd = - 1 <S2SV_ModEnd> ; best_mode. <S2SV_ModStart>. intra_rd = - 1 <S2SV_ModEnd> ; this_mode. <S2SV_ModStart>. yrd = - 1 <S2SV_ModEnd> ; this_mode. <S2SV_ModStart>. intra_rd = - 1 <S2SV_ModEnd> ; this_mode. <S2SV_ModStart>. intra_rd = - 1 <S2SV_ModEnd> ; this_mode. <S2SV_ModStart>. yrd = - 1 <S2SV_ModEnd> ; this_mode. <S2SV_ModStart>. intra_rd = - 1 <S2SV_ModEnd> ; this_mode. <S2SV_ModStart>. intra_rd = - 1 <S2SV_ModEnd> ; this_mode. <S2SV_ModStart>. yrd = - 1 <S2SV_ModEnd> ; this_mode. <S2SV_ModStart>. intra_rd = - 1 <S2SV_ModEnd> ; this_mode. <S2SV_ModStart>. intra_rd = - 1 <S2SV_ModEnd> ; this_mode. <S2SV_ModStart>. yrd = - 1 <S2SV_ModEnd> ; this_mode. <S2SV_ModStart>. intra_rd = - 1 <S2SV_ModEnd> ; this_mode. <S2SV_ModStart>. intra_rd = -",0
274,"<S2SV_ModStart> goto error ; if ( stat ( h -> filename, & statbuf ) == - 1 ) goto error ;",0
275,"<S2SV_ModStart> u1_level_idc, u1_seq_parameter_set_id <S2SV_ModEnd> ; UWORD32 * <S2SV_ModStart> u4_num_reorder_frames ) ; <S2SV_ModEnd> if ( u4_num_reorder_frames <S2SV_ModStart> u4_num_reorder_frames ) ; <S2SV_ModEnd> if ( u4_num_reorder_frames <S2SV_ModStart> u4_num_reorder_frames ) ; <S2SV_ModEnd> if ( u4_num_reorder_frames <S2SV_ModStart> u4_num_reorder_frames ) ; <S2SV_ModEnd> if ( u4_num_reorder_frames <S2SV_ModStart> u4_num_reorder_frames ) ; <S2SV_ModEnd> if ( u4_num_reorder_frames <S2SV_ModStart> u4_num_reorder_frames ) ; <S2SV_ModEnd> if ( u4_pic_wd <S2SV_ModStart> u4_pic_wd ) ; <S2SV_ModEnd> if ( u4_pic_ht <S2SV_ModStart> u4_pic_ht ) ; <S2SV_ModEnd> if ( u4_pic_wd <S2SV_ModStart> u4_pic_wd ) ; <S2SV_ModEnd> if ( u4_pic_ht <S2SV_ModStart> u4_pic_ht ) ; <S2SV_ModEnd> if ( u4_pic_wd <S2SV_ModStart> u4_pic_wd ) ; <S2SV_ModEnd> if ( u4_pic",0
276,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vpx_svc_parameters_t * ) <S2SV_ModEnd> ; cpi -> <S2SV_ModStart> return VPX_CODEC_INVALID_PARAM ; <S2SV_ModEnd> if ( vp9_set_size_literal <S2SV_ModStart> ; cpi -> svc. spatial_layer_id = params -> spatial_layer ; cpi -> svc. temporal_layer_id = params -> temporal_layer ; cpi -> lst_fb_idx = params -> lst_fb_idx ; cpi -> gld_fb_idx = params -> gld_fb_idx ; cpi -> alt_fb_idx = params -> alt_fb_idx ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = params -> min_quantizer ; set_encoder_config ( & ctx -> oxcf, & ctx -> cfg, & ctx -> extra_cfg ) ; vp9_change_config ( ctx -> cpi, & ctx",0
277,"<S2SV_ModStart> out ) { uint32 <S2SV_ModEnd> bitspersample, samplesperpixel <S2SV_ModStart>, samplesperpixel ; uint32 <S2SV_ModEnd> input_compression, input_photometric <S2SV_ModStart> input_compression, input_photometric <S2SV_ModEnd> ; uint32 width",0
278,"<S2SV_ModStart> a ) { char * pn ; char c ; int r ; struct stat st ; pn = a -> name ; if ( archive_strlen ( & ( a -> path_safe ) ) > 0 ) { char * p = a -> path_safe. s ; while ( * pn!= '\\0' && ( * p == * pn ) ) ++ p, ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '\\0' && ( * pn!= '/' ) ) ) ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '/' ) ) ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '/' ) ) ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '/' ) ) ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '/' ) ) ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '\\0' && (",0
279,"<S2SV_ModStart> unsigned int link_count ; struct kernel_lb_addr loc ; struct indirectEntry * ie ; ie = ( struct indirectEntry * ) ibh -> b_data ; loc = lelb_to_cpu ( ie -> indirectICB. extLocation ) <S2SV_ModStart> ibh ) { <S2SV_ModEnd> if ( ie <S2SV_ModStart>. extLength && <S2SV_ModEnd> udf_read_ptagged ( inode <S2SV_ModStart> -> i_sb, <S2SV_ModEnd> loc, 0 <S2SV_ModStart> ident ) ) <S2SV_ModEnd> { if ( <S2SV_ModStart> ibh ) { <S2SV_ModEnd> udf_read_ptagged ( inode <S2SV_ModStart> ibh ) { <S2SV_ModEnd> udf_read_ptagged ( inode <S2SV_ModStart> ibh ) { <S2SV_ModEnd> udf_read_ptagged ( inode <S2SV_ModStart> ibh ) { <S2SV_ModEnd> udf_read_ptagged ( inode <S2SV_ModStart> ibh ) { <S2SV_ModEnd> udf_read_ptagged ( inode <S2SV_ModStart> ibh ) { <S2SV_ModEnd> udf_read_ptagged ( inode <S2SV_ModStart> ibh ) { <S2SV_ModEnd> udf_read_ptagged ( inode <S2SV_ModStart> ibh ) { <S2SV_ModEnd> udf_read_ptagged ( inode <S2SV_ModStart> ibh ) { <S2SV_ModEnd> udf_read_ptagged ( inode <S2SV_ModStart> ibh ) { <S2SV_ModEnd> udf_read_pt",0
280,"<S2SV_ModStart> tx_size_uv = get_uv_tx_size ( mbmi ) ; const int filter_level = get_filter_level ( lfi_n, mbmi ) ; uint64_t * const left_y = & lfm -> left_y [ tx_size_y ] ; uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const left_uv = & lfm -> left_uv [ tx_size_uv ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_y = & lfm -> int_4x4_y ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv ; int i ; if (! filter_level ) { return ; } else { const int w = num_8x8_blocks_wide_lookup [ block_size ] ; const int h = num_8x8_blocks_high_lookup [ block_size ] ; int index = shift",0
281,"<S2SV_ModStart> mq_ops ) { spin_lock_irqsave_nested <S2SV_ModEnd> ( & fq <S2SV_ModStart> mq_flush_lock, flags, SINGLE_DEPTH_NESTING",0
282,<S2SV_ModStart> uint8_t val ; if ( addr > ( vdev -> config_len - sizeof ( val ) ) ) return ( uint32_t ) - 1 ; <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,0
283,<S2SV_ModStart> ) ) { ovalue <S2SV_ModEnd> = stok (,0
284,<S2SV_ModStart> ) sizeof ( effect_param_t_t <S2SV_ModEnd> ) ) {,0
285,<S2SV_ModStart> ; cleanup : if ( key_data!= NULL ) k5free ( key_data ) ;,0
286,"<S2SV_ModStart> 0x02 ) ; if ( crgram_len > SC_MAX_APDU_BUFFER_SIZE - 1 ) { r = sc_transmit_apdu ( card, & apdu ) ; LOG_TEST_RET ( card -> ctx, r, ""APDU <S2SV_blank> transmit <S2SV_blank> failed"" ) ; return r ; } <S2SV_ModStart> 0x02 ) ; if ( crgram_len > SC_MAX_APDU_BUFFER_SIZE - 1 ) { r = sc_transmit_apdu ( card, & apdu ) ; LOG_TEST_RET ( card -> ctx, r, ""APDU <S2SV_blank> transmit <S2SV_blank> failed"" ) ; return r ; }",0
287,"<S2SV_ModStart> ; if ( ctxt. info. tc_mapping [ I40E_AQ_VSI_TC_QUE_OFFSET_SHIFT ] & I40E_AQ_VSI_TC_QUE_MAP_CONTIG ) { dev_info ( & pf -> pdev -> dev, ""macvlan <S2SV_blank> map <S2SV_blank> is <S2SV_blank> not <S2SV_blank> valid\\n"" ) ; return - EINVAL ; } if (",0
288,<S2SV_ModStart> ; } } return - 1 ;,1
289,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
290,<S2SV_ModStart> ; if ( <S2SV_ModEnd> lf_mic -> mb_mode <S2SV_ModStart> -> mb_mode == VP8D_MODE_LINEAR <S2SV_ModEnd> ) { if <S2SV_ModStart> -> mb_mode == VP8D_MODE_LINEAR <S2SV_ModEnd> ) { if <S2SV_ModStart> -> mb_mode == VP8D_MODE_LINEAR <S2SV_ModEnd> ) { if <S2SV_ModStart> -> mb_mode == VP8D_MODE_LINEAR <S2SV_ModEnd> ) { if <S2SV_ModStart> -> mb_mode == VP8D_MODE_LINEAR <S2SV_ModEnd> ) { if <S2SV_ModStart> -> mb_mode == VP8D_MODE_LINEAR <S2SV_ModEnd> ) { if <S2SV_ModStart> -> mb_mode == VP8D_MODE_LINEAR <S2SV_ModEnd> ) { if <S2SV_ModStart> -> mb_mode == VP8D_MODE_LINEAR <S2SV_ModEnd> ) { if <S2SV_ModStart> -> mb_mode == VP8D_MODE_LINEAR <S2SV_ModEnd> ) { if <S2SV_ModStart> -> mb_mode == VP8D_MODE_LINEAR <S2SV_ModEnd> ) { if <S2SV_ModStart> -> mb_mode == VP8_MODE_LINEAR <S2SV_ModEnd> ) { if <S2SV_ModStart> -> mb_mode == VP8D_MODE_LINEAR <S2SV_ModEnd> ) { if <S2SV_ModStart> -> mb_mode == VP8D_MODE_LINEAR,0
291,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
292,"<S2SV_ModStart> len ) { <S2SV_ModEnd> char * buf <S2SV_ModStart> char * p <S2SV_ModEnd> ; if ( <S2SV_ModStart> s ++ ; <S2SV_ModEnd> } if ( <S2SV_ModStart> 10 ; } if ( p - buf > Py_SIZE ( u ) ) { Py_DECREF ( w ) ; return NULL ; } assert ( p - buf <= Py_SIZE ( u ) ) ; Py_DECREF ( w ) ; } else { * p ++ = * s ++ ; } } len = p - buf ; s = buf ; return PyUnicode_DecodeUnicodeEscape ( s, len, NULL ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
293,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> enum { YES <S2SV_ModStart> wrerrno = 0 ; int setimes, targisdir <S2SV_ModStart> ""Unexpected <S2SV_blank> off_t/time_t <S2SV_blank> size"" ) ; <S2SV_ModEnd> mask = umask <S2SV_ModStart> ; if ( lstat <S2SV_ModEnd> ( targ, <S2SV_ModStart> ; if ( lstat <S2SV_ModEnd> ( cp, <S2SV_ModStart> ; if ( lstat <S2SV_ModEnd> ( cp,",0
294,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
295,"<S2SV_ModStart> ; if ( vpx_alloc_frame_buffer ( & oci -> vpx_temp_scale_frame, width, height, VP8BORDERINPIXELS ) < 0 ) goto allocation_fail ; if ( vp8_yv12_alloc_frame_buffer ( & oci -> vpx_temp_scale_frame, width, height, VP8BORDERINPIXELS ) < 0 ) goto allocation_fail ; if ( vp8_yv12_alloc_frame_buffer ( & oci -> vpx_temp_scale_frame, width, height, VP8BORDERINPIXELS ) < 0 ) goto allocation_fail ; if ( vp8_yv12_alloc_frame_buffer ( & oci -> vpx_temp_scale_frame, width, height, VP8BORDERINPIXELS ) < 0 ) goto allocation_fail ; if ( vp8_yv12_alloc_frame_buffer ( & oci -> vpx_temp_scale_frame, width, height, VP8BORDERINPIXELS ) < 0 ) goto allocation_fail ; if (",0
296,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
297,<S2SV_ModStart> u1_num_mbs_next ) { if ( u1_num_mbsNby2 == 0 ) { ps_dec -> u2_cur_slice_idx = 0 ; ps_dec -> u1_slice_idx = 0 ; ps_dec -> u1_slice_idx = 0 ; ps_dec -> u2_cur_slice_idx = 0 ; ps_dec -> u1_slice_idx = 0 ; ps_dec -> u2_cur_slice_idx = 0 ; ps_dec -> u2_cur_slice_idx = 0 ; ps_dec -> u1_slice_idx = 0 ; ps_dec -> u2_cur_slice_idx = 0 ; ps_dec -> u2_cur_slice_idx = 0 ; ps_dec -> u2_cur_slice_idx = 0 ; ps_dec -> u1_slice_idx = 0 ; ps_dec -> u2_cur_slice_idx = 0 ; ps_dec -> u2_cur_slice_idx = 0 ; ps_dec -> u1_slice_idx = 0 ; ps_dec -> u2_cur_slice_idx =,0
298,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> vterm_allocator_free ( screen,1
299,"<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & delay )",1
300,"<S2SV_ModStart>, one, <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart> ) break ; if ( number_planes_filled > MagickMax ( number_colormaps, number_planes_filled ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > MagickMax ( number_colormaps, number_planes_filled ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
301,"<S2SV_ModStart> -> host, <S2SV_ModEnd> sclone ( value <S2SV_ModStart> ( value ) <S2SV_ModEnd> ) ; httpSetRouteName",0
302,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
303,"<S2SV_ModStart> ) ) ; cg_wlock ( & pool -> data_lock ) ; <S2SV_ModStart> ntime ) { free ( pool -> swork. job_id ) ; pool -> swork. job_id = NULL ; free ( prev_hash ) ; pool -> swork. prev_hash = NULL ; pool -> swork. coinbase1 = NULL ; pool -> swork. coinbase2 = NULL ; pool -> swork. bbversion = NULL ; pool -> swork. nbit = NULL ; pool -> swork. ntime = NULL ; pool -> swork. clean = clean ; pool -> swork. alloc_len = 0 ; pool -> swork. alloc_len = 0 ; pool -> swork. job_id = job_id ; snprintf ( pool -> prev_hash, 65, ""%s"", prev_hash ) ; cb1_len = strlen ( prev_hash ) / 2 ; cb1_len = strlen ( coinbase1 ) / 2 ; cb2_len = strlen ( coinbase2 ) / 2 ; snprintf ( pool -> bbversion, 9, ""%s"", bbversion ) ; snprintf ( pool -> nbit, 9, ""%s"", nbit ) ; sn",0
304,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
305,"<S2SV_ModStart> unused ) { <S2SV_ModEnd> _Py_IDENTIFIER ( __dict__ <S2SV_ModStart> * dict = _PyObject_GetAttrId2 <S2SV_ModEnd> ( self, <S2SV_ModStart> { res = _Py_BuildValue <S2SV_ModEnd> ( ""O()O"", <S2SV_ModStart> ), dict, NULL",0
306,"<S2SV_ModStart> ) & desc, sizeof ( * desc )",1
307,"<S2SV_ModStart> perf_event * ) <S2SV_ModEnd> ; switch ( <S2SV_ModStart> case PERF_EVENT_IOC_PERIOD : return perf_event_period_locked <S2SV_ModEnd> ( event, <S2SV_ModStart> ret ; } <S2SV_ModEnd> default : return",0
308,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> * r, PREDICTION_MODE <S2SV_ModEnd> y_mode ) { <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode",0
309,"<S2SV_ModStart> sha_zero ) ; if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) { ccp_dm_workarea_destroy ( & ctx ) ; return - EINVAL ; } ccp_dm_workarea_destroy ( & op ) ; }",0
310,"<S2SV_ModStart> iv ) ; # if OPENSSL_VERSION_NUMBER >= 0x10100000L if (! NIL_P ( self ) ) rb_raise ( eTypeError, ""pkcs5_keyivgen"" ) ; # endif",0
311,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
312,<S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail ( & <S2SV_ModStart> sbuf ) ) { return NGHTTP2_ERR_BUSY ; } <S2SV_ModEnd> if ( session,0
313,<S2SV_ModStart> ( ) ; if (! x86_pmu. max_pebs_events ) { x86_pmu. max_pebs_events = 4 ; x86_pmu. max_counters_fixed = 4 ; x86_pmu. max_counters_fixed = 4 ; },0
314,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ] ; const vpx_extra_bit <S2SV_ModEnd> * const b <S2SV_ModStart> b = & vpx_extra_bits <S2SV_ModEnd> [ t ] <S2SV_ModStart> & 1 ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ; } vpx_write_bit <S2SV_ModEnd> ( w,",0
315,"<S2SV_ModStart>, uncompressed_hdr_size ; vpx_write_bit_buffer <S2SV_ModEnd> wb = { <S2SV_ModStart> 0 } ; vpx_write_bit_buffer <S2SV_ModEnd> saved_wb ; write_uncompressed_header <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> += uncompressed_hdr_size ; vpx_compute_update_table <S2SV_ModEnd> ( ) ; <S2SV_ModStart> += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb",0
316,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> dev_get_valid_name ( struct <S2SV_ModStart> ) ) return false <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) return true <S2SV_ModEnd> ; else if <S2SV_ModStart> IFNAMSIZ ) ; else return false ;,0
317,<S2SV_ModStart> { struct ikev2_id * idp <S2SV_ModEnd> ; int id_len <S2SV_ModStart> * typedata ; ND_TCHECK ( * ext ) ; idp = ( struct ikev2_id * ) ext ; ND_TCHECK ( idp -> type <S2SV_ModEnd> ) ; UNALIGNED_MEMCPY <S2SV_ModStart> trunc ; } ND_TCHECK ( idp -> type ) ;,0
318,"<S2SV_ModStart> ) ) { jas_log ( NULL, JAS_LOG_ERROR, ""mif_process_cmpt: <S2SV_blank> invalid <S2SV_blank> cmpt <S2SV_blank> value <S2SV_blank> %d"", id ) ;",0
319,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
320,"<S2SV_ModStart> ; WORD32 xt0_0 = 0, yt0 = 0, yt1 = 0, yt2 = 0 <S2SV_ModEnd> ; WORD32 xh0_0 <S2SV_ModStart> ; WORD32 xh0_0 = 0, xh1 = 0, xh20_0 = 0, xh21_0 = 0, xl0 = 0, xl1 = 0, xl20_0 = 0, xl21_0 = 0 <S2SV_ModEnd> ; WORD32 x_0",0
321,"<S2SV_ModStart> mntent -> mnt_dir, false",0
322,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
323,"<S2SV_ModStart> ( req ) ) ; rb_hash_aset ( env, server_port_val, req_server_port ( req )",0
324,<S2SV_ModStart> endif int col_type <S2SV_ModEnd> ; MYSQL_BIND * <S2SV_ModStart> ; # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID <S2SV_ModStart> endif # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID <S2SV_ModStart> endif # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION imp_sth -> col_type = imp_dbh -> col_type ; # else imp_sth -> col_type = imp_dbh -> col_type ; # endif,0
325,"<S2SV_ModStart> need = 0 <S2SV_ModEnd> ; CELL first <S2SV_ModStart> screen, { if ( need > MAX_WIDE_CHARS * 4 ) { SysError ( ERROR_BMALLOC2 ) ; return ; }",0
326,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> ftoa_bounded_extra ( JsVarFloat <S2SV_ModStart> val ) ) strlcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> ) ) { strlcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> ) ; else strlcpy <S2SV_ModEnd> ( str,",0
327,<S2SV_ModStart> ( unlikely ( crng_ready ( ) <S2SV_ModEnd> == 0 ),0
328,"<S2SV_ModStart> LEX_ID ) { snprintf ( str, len <S2SV_ModEnd>, ""ID:"", <S2SV_ModStart> ""ID:"", len <S2SV_ModEnd>, jslGetTokenValueAsString ( <S2SV_ModStart> LEX_STR ) { snprintf ( str, len <S2SV_ModEnd>, ""String:\'"", <S2SV_ModStart> ""String:\'"", len <S2SV_ModEnd>, jslGetTokenValueAsString ( <S2SV_ModStart> jslGetTokenValueAsString ( ) <S2SV_ModEnd> ) ; }",0
329,,1
330,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
331,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
332,"<S2SV_ModStart> ) { return memcmp <S2SV_ModEnd> ( s1,",0
333,"<S2SV_ModStart> ( CMD_PRINT_HELP, ""stunnel.conf"", <S2SV_ModStart> ( CMD_PRINT_HELP, ""stunnel.conf"", <S2SV_ModStart> ( CMD_PRINT_DEFAULTS, ""stunnel.conf"",",0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,"<S2SV_ModStart> -> st_skeyid_e_nss ; if ( st -> st_skeyid_e_nss -> len!= e -> enc_blocksize ) { libreswan_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; return ; }",0
336,<S2SV_ModStart> } } } if ( 0!= ps_dec -> u4_num_bytes_consumed ) { <S2SV_ModStart> ) ; } },0
337,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char * print_string,0
338,"<S2SV_ModStart> == 1 ) { if ( ( <S2SV_ModStart>, deadline ) )!= VPX_CODEC_OK ) res = VPX_CODEC_ERROR ; } <S2SV_ModEnd> else { int <S2SV_ModStart> -- ) { res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ; if ( res!= VPX_CODEC_OK ) res = VPX_CODEC_ERROR <S2SV_ModEnd> ; ctx --",0
339,"<S2SV_ModStart> ) ; } else if ( arg1 == 3 ) { win_maximise ( - 1 ) ; win_set_chars ( term. rows, term. cols ) ; } else if ( arg1 == 4 ) { win_maximise ( - 1 ) ; win_set_chars ( term. rows, term. cols ) ; } else if ( arg1 == 5 ) { win_maximise ( - 1 ) ; win_set_chars ( term. rows, term. cols ) ; } else if ( arg1 == 6 ) { win_maximise ( - 1 ) ; win_set_chars ( term. rows, term. cols ) ; } else if ( arg1 == 7 ) { win_maximise ( - 1 ) ; win_set_chars ( term. rows, term. cols ) ; }",0
340,<S2SV_ModStart> < cols + 8 <S2SV_ModEnd> ; i ++,0
341,"<S2SV_ModStart> ; # endif if ( ( i -> width + i -> height ) > i -> parent -> width || ( i -> height + i -> width ) > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; } if ( ( i -> width + i -> width ) > i -> parent -> width || ( i -> height + i -> height ) > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; } if ( ( i -> width + i -> width ) > i -> parent -> width || ( i -> height + i -> height ) > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if",0
342,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
343,<S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; },0
344,"<S2SV_ModStart> ) ) { if ( psf -> psf_debug ) { fprintf ( psf -> stderr, ""format: <S2SV_blank> %c\\n"", c ) ; } <S2SV_ModStart> ) ) { if ( psf -> psf_debug ) { fprintf ( psf -> stderr, ""format: <S2SV_blank> %c\\n"", c ) ; } <S2SV_ModStart> ) ) { if ( psf -> psf_debug ) { fprintf ( psf -> stderr, ""format: <S2SV_blank> %c\\n"", c ) ; } <S2SV_ModStart> ) ) { if ( psf -> psf_debug ) { fprintf ( psf -> stderr, ""format: <S2SV_blank> %c\\n"", c ) ; } <S2SV_ModStart> ) ) { if ( psf -> psf_debug ) { fprintf ( psf -> stderr, ""format: <S2SV_blank> %c\\n"", c ) ; } <S2SV_ModStart> ) ) { if ( psf -> psf_debug ) { fprintf ( psf -> stderr, ""format: <S2SV_blank> %c\\n"", c ) ; } <S2SV_ModStart> ) ) { if ( psf -> psf_debug ) { fprintf ( psf -> stderr, ""format: <S2SV_blank> %c\\n"", c ) ; } <S2SV_ModStart> ) ) { if ( psf -> psf_debug ) { fprintf (",0
345,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
346,"<S2SV_ModStart> 0 ; } if ( copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; return 0 ; } <S2SV_ModStart> ; else { <S2SV_ModEnd> } _exit (",0
347,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> BLOCK_8X8 : return vpx_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> BLOCK_16X8 : return vpx_mse16x8 <S2SV_ModEnd> ; case BLOCK_8X16 <S2SV_ModStart> BLOCK_8X16 : return vpx_mse8x16 <S2SV_ModEnd> ; default : <S2SV_ModStart> default : return vpx_mse16x16 <S2SV_ModEnd> ; } },1
348,"<S2SV_ModStart> ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_KX ) { return return_pkinit_kx ( context, request, reply, encrypting_key, send_pa ) ; }",0
349,"<S2SV_ModStart> flags ) ; if (! vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } <S2SV_ModStart> vb2_buf ) ; <S2SV_ModEnd> if ( input",1
350,<S2SV_ModStart> size ) { if ( size > SIZE_MAX - PREFIX_SIZE ) { zmalloc_oom_handler ( size ) ; return NULL ; },0
351,<S2SV_ModStart> -> serviceId == EXTRACT_16BITS <S2SV_ModEnd> ( & rxh,1
352,"<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len > MWIFIEX_MAX_SSID_LEN ) { mwifiex_dbg ( adapter, ERROR, ""Invalid <S2SV_blank> SSID <S2SV_blank> length\\n"" ) ; return - EINVAL ; }",0
353,"<S2SV_ModStart> ; if (! sfe -> valuelen ) { error = context -> put_listent ( context, 0, 0, 0, 0 ) ; if ( context -> seen_error ) return error ; sfe = XFS_ATTR_SF_NEXTENTRY ( sfe ) ; } if ( <S2SV_ModStart> ; if (! sfe -> valuelen ) { error = context -> put_listent ( context, 0, 0, 0, 0 ) ; if ( context -> seen_error ) return error ; sfe = XFS_ATTR_SF_NEXTENTRY ( sfe ) ; } if ( <S2SV_ModStart> ; if (! sfe -> valuelen ) { error = context -> put_listent ( context, 0, 0, 0, 0 ) ; if ( context -> seen_error ) return error ; sfe = XFS_ATTR_SF_NEXTENTRY ( sfe ) ; } if (",0
354,"<S2SV_ModStart> struct l2cap_conf_rfc rfc <S2SV_ModEnd> ; void * <S2SV_ModStart> sk ) ; memset ( & rfc, 0, sizeof ( rfc ) ) ; <S2SV_ModStart> = L2CAP_MODE_ERTM ; memset ( & rfc, 0, sizeof ( rfc ) ) ; <S2SV_ModStart> = L2CAP_DEFAULT_MAX_RECEIVE ; memset ( & rfc, 0, sizeof ( rfc ) ) ; <S2SV_ModStart> = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO <S2SV_ModEnd> ) ; rfc <S2SV_ModStart> = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO <S2SV_ModEnd> ) ; rfc",0
355,"<S2SV_ModStart> { do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> r, MSG_WAITALL )",0
356,<S2SV_ModStart> ) ) { if ( ( ps_dec -> u4_nal_ref_idc == IDR_SLICE_NAL ) && ( ps_dec -> u1_pic_decode_done == 1 ) ) { return ERROR_INCOMPLETE_FRAME ; },0
357,<S2SV_ModStart> while ( pair <S2SV_ModEnd> ) { mprAddItem,1
358,"<S2SV_ModStart> * delegation, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> = 0 ; fmode <S2SV_ModEnd> &= ( FMODE_READ <S2SV_ModStart> -> type & fmode <S2SV_ModEnd> )!= open_flags <S2SV_ModStart> -> stateid, fmode <S2SV_ModEnd> ) ; ret <S2SV_ModStart>, NULL, fmode <S2SV_ModEnd> ) ; ret",0
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,"<S2SV_ModStart> * xd, int64_t <S2SV_ModEnd> * out_rate_sum, <S2SV_ModStart> * out_dist_sum ) { int i ; int64_t rate_sum = 0 ; int64_t dist_sum = 0 ; const int ref = xd -> mi [ 0 ] -> mbmi. ref_frame [ 0 ] ; unsigned int sse ; const BLOCK_SIZE bs = get_plane_block_size ( bsize, pd ) ; if ( cpi -> speed > 4 ) { int64_t rate ; int64_t dist ; int64_t square_error = sse ; int quantizer = ( pd -> dequant [ 1 ] >> 3 ) ; if ( quantizer < 120 ) rate = ( sse * ( 280 - quantizer ) ) >> 8 ; else rate = 0 ; dist = ( sse * ( 280 - quantizer ) ) >> 8 ; rate_sum += rate ; dist_sum += dist ; } else { int rate ; int64_t dist ; vp9_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ bs ], pd -> dequant [ 1 ] >> 3, & rate,",0
361,<S2SV_ModStart> } if ( pmd_trans_unstable <S2SV_ModEnd> ( pmd ),0
362,<S2SV_ModStart> { if ( index >= PAM_MAX_RESP_SIZE ) { return ( PAM_BUF_ERR ) ; } if ( <S2SV_ModStart> == NULL ) { free ( * ret_username ) ; <S2SV_ModStart> PAM_BUF_ERR ) ; },0
363,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> seg ) { vpx_read_tree <S2SV_ModEnd> ( r, <S2SV_ModStart> ( r, vpx_segment_tree <S2SV_ModEnd>, seg ->",0
364,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",1
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,"<S2SV_ModStart> depth ++ ; if ( depth == 0 ) { ND_PRINT ( ( ndo, ""Depth <S2SV_blank> reached\\n"" ) ) ; return ( buf ) ; }",0
367,"<S2SV_ModStart> ERROR_INVALID_LENGTH ; } if (! ( context -> frameId & TX_CTRL_TXFID ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_FAILURE ; } <S2SV_ModStart> length ) ; if (! ( context -> frameId & TX_CTRL_TXFID ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_FAILURE ; } <S2SV_ModStart> length ) ; if (! ( context -> frameId & TX_CTRL_TXFID ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_FAILURE ; } <S2SV_ModStart> RXQCR_SDA ) ; if (! ( context -> frameId & TX_CTRL_TXFID ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_FAILURE ; } <S2SV_ModStart> KSZ8851_REG_TXQCR, TXQCR_METFE ) ; if (! ( context -> frameId & TX_CTRL_TXFID ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_FAILURE ; }",0
368,<S2SV_ModStart> ( ) ; mono_attach_maybe_stop ( ) ;,0
369,"<S2SV_ModStart>, x_e, x_f ; WORD32 n10, n20, n30, n01, n11, n21, n31 ; WORD32 n02, n12, n22, n32, n03, n13, n23, n33 ; WORD32 n0, j0 ; WORD32 * x2, * x0 ; WORD32 * y0, * y1, * y2, * y3 ; WORD32 * x0 ; WORD32 x_8, x_9, x_a, x_b, x_c, x_d, x_e, x_f, n10, n11, n21, n31 ; WORD32 n10, n30, n01, n12, n22, n32, n02, n12, n22, n03, n13, n23, n33 ; WORD32 * y0, * y1, * y2, * y3 ; x0 = ptr_x ; x1 = ptr_y ; x2 = ptr_x + ( WORD32 ) npoints ; x2 = ptr_x + ( WORD32 ) npoints ; x3 = ptr",0
370,<S2SV_ModStart> ; if ( <S2SV_ModEnd> pmd_none_or_clear_bad ( pmd,0
371,"<S2SV_ModStart> height, target_width = 0, target_height = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( <S2SV_ModEnd> ) ; return <S2SV_ModStart> ] ) ; usage ( <S2SV_ModEnd> ) ; return <S2SV_ModStart> fin ) ; usage ( <S2SV_ModEnd> ) ; return <S2SV_ModStart> fout ) ; usage ( <S2SV_ModEnd> ) ; return",0
372,"<S2SV_ModStart> num_fields ) { <S2SV_ModEnd> _Py_IDENTIFIER ( _attributes <S2SV_ModStart> i, result <S2SV_ModEnd> ; PyObject * <S2SV_ModStart> ) ; } return <S2SV_ModEnd> _PyObject_SetAttrId ( (",0
373,<S2SV_ModStart> = VPX_CODEC_OK ; vpx_codec_alg_priv_t <S2SV_ModEnd> * priv ; <S2SV_ModStart> -> priv = <S2SV_ModEnd> priv -> base <S2SV_ModStart> enc ) { priv <S2SV_ModEnd> -> cfg = <S2SV_ModStart> enc = & priv <S2SV_ModEnd> -> cfg ; <S2SV_ModStart> ++ ) ; priv <S2SV_ModEnd> = extracfg_map [ <S2SV_ModStart> i ]. priv <S2SV_ModEnd> ; priv ->,0
374,<S2SV_ModStart> ++ ; } pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; totfr += step ; if ( totfr > BOT ) { totfr = 0 ; for ( i = 0 ; i < 256 ; i ++ ) { unsigned nc = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] = nc ; } for ( i = 0 ; i < 256 ; i ++ ) { unsigned sum = 0 ; unsigned i16_17 = i << 4 ; for ( j = 0 ; j < 16 ; j ++ ) sum += pixel -> freq [ i16_17 + j ] ; pixel -> lookup [ i ] = sum ; } } pixel -> total_freq = totfr ;,0
375,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx ->,0
376,"<S2SV_ModStart> ) ) { if ( iinfo -> i_location. length > sbi -> s_partmaps [ iloc -> partitionReferenceNum ]. s_partition_len ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> inconsistent <S2SV_blank> file <S2SV_blank> entry <S2SV_blank> length\\n"", inode -> i_ino ) ; ret = - EIO ; goto out ; } <S2SV_ModStart> ) ) { if ( iinfo -> i_location. length > sbi -> s_partmaps [ iloc -> partitionReferenceNum ]. s_partition_len ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> inconsistent <S2SV_blank> file <S2SV_blank> entry <S2SV_blank> length\\n"", inode -> i_ino ) ; ret = - EIO ; goto out ; }",0
377,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0",1
378,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int bad_format_imginfo (,0
379,"<S2SV_ModStart> IPV6DefragSturgesNovakLastTest ) ; UtRegisterTest ( ""DefragIPv6NoDataTest"", DefragIPv6NoDataTest ) ;",0
380,<S2SV_ModStart> if ( object_data && object_length,0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,<S2SV_ModStart> p_sys -> b_auto_field_coding && p_sys -> p_schro -> b_auto_field_coding_set <S2SV_ModStart> p_sys -> b_auto_field_coding && p_sys -> p_schro -> b_auto_field_coding_set <S2SV_ModStart> p_sys -> b_auto_field_coding && p_sys -> p_schro -> b_auto_field_coding_set <S2SV_ModStart> p_sys -> b_auto_field_coding && p_sys -> p_schro -> b_auto_field_coding_set <S2SV_ModStart> p_sys -> b_auto_field_coding && p_sys -> p_schro -> b_auto_field_coding_set <S2SV_ModStart> p_sys -> b_auto_field_coding && p_sys -> p_schro -> b_auto_field_coding_set <S2SV_ModStart> p_sys -> b_auto_field_coding_set <S2SV_ModStart> p_sys -> b_auto_field_coding && p_sys -> p_schro -> b_auto_field_coding_set <S2SV_ModStart> p_sys -> b_auto_field_coding && p_sys -> p_schro -> b,0
384,"<S2SV_ModStart> bfname ) ; if ( bfname. len == 0 ) { mp_err ( log, ""invalid <S2SV_blank> filename\\n"" ) ; goto exit_mf ; }",0
385,<S2SV_ModStart> 4 ) ; size_t <S2SV_ModEnd> num_properties = GETINT32 <S2SV_ModStart> len ) ; if (! a -> names [ i ]. data ) return NULL ;,0
386,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
387,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * fb ; vpx_get_reference_dec <S2SV_ModEnd> ( ctx ->",0
388,"<S2SV_ModStart> + 1 ; if ( start + length > frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> "" ""too <S2SV_blank> many <S2SV_blank> bytes <S2SV_blank> at <S2SV_blank> beginning <S2SV_blank> of <S2SV_blank> image.\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
389,"<S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == testlist ) { node * ch = CHILD ( n, 0 ) ; expr_ty e = ast_for_testlist ( c, CHILD ( n, 0 ) ) ; if (! e ) return NULL ; return Expr ( e, LINENO ( n ), n -> n_col_offset, n -> n_end_lineno, n -> n_end_col_offset, c -> c_arena ) ; } else if (",0
390,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> vp8_denoiser_filter_c ( YV12_BUFFER_CONFIG <S2SV_ModStart> = 16 ; <S2SV_ModEnd> int r, <S2SV_ModStart> c, i <S2SV_ModEnd> ; if ( <S2SV_ModStart> MOTION_MAGNITUDE_THRESHOLD ) { <S2SV_ModEnd> } for ( <S2SV_ModStart> c ] ; <S2SV_ModEnd> } else { <S2SV_ModStart> += adjustment ; <S2SV_ModEnd> } } <S2SV_null>",0
391,<S2SV_ModStart> ; } } if ( ( sockPtr -> flags & ( NS_CONN_ESTABLISHED | NS_CONN_SHUTDOWN ) )!= 0u ) { sockPtr -> flags &= ~ ( NS_CONN_ESTABLISHED | NS_CONN_SHUTDOWN ) ; if ( ( sockPtr -> flags & ( NS_CONN_SHUTDOWN | NS_CONN_SHUTDOWN ) )!= 0u ) { sockPtr -> flags &= ~ ( NS_CONN_SHUTDOWN | NS_CONN_SHUTDOWN ) ; } },0
392,"<S2SV_ModStart> = uregs ; xtregs_coprocessor_t cp0 ; <S2SV_ModStart> ret = 0 ; memset ( & cp0, 0, sizeof ( cp0 ) ) <S2SV_ModStart> ti ) ; <S2SV_ModEnd> ret |= __copy_from_user <S2SV_ModStart> ) ) ; <S2SV_ModEnd> ret |= __copy_from_user",0
393,<S2SV_ModStart> size ) ; if ( message -> length > 0 ) { <S2SV_ModStart> buffer ) ; queueItem -> next = NULL ; },0
394,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" <S2SV_ModStart> cg_item ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
395,<S2SV_ModStart> ; if (! header ) return 0 ; <S2SV_ModEnd> new_bh = ext2_xattr_cache_find <S2SV_ModStart> new_bh ) ; error = <S2SV_ModStart> ( new_bh ) ; if ( error ) goto cleanup,0
396,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
397,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
398,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
399,<S2SV_ModStart> = 2048 ; if ( pwidth == NULL || pheight == NULL ) { return ( MagickFalse ) ; } <S2SV_ModStart> ) ; } if ( pwidth == NULL || pheight == NULL ) { return ( MagickFalse ) ; },0
400,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * data = ( vpx_ref_frame_t * ) <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; # if CONFIG_VP9_HIGHBITDEPTH if ( ctx -> pbi -> flags & VP9_FLAG_HIGHBITDEPTH ) { return VPX_CODEC_INVALID_PARAM ; } # endif <S2SV_ModStart> sd ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( ctx -> pbi -> flags & VP9_FLAG_HIGHBITDEPTH ) { return VPX_CODEC_INVALID_PARAM ; } # endif <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
401,<S2SV_ModStart> u1_num_mbs_next ) { if ( u1_num_mbsNby2 == 0 ) { ps_dec -> u2_cur_slice_idx = 0 ; ps_dec -> u1_slice_idx = 0 ; ps_dec -> u1_slice_idx = 0 ; ps_dec -> u2_cur_slice_idx = 0 ; ps_dec -> u1_slice_idx = 0 ; ps_dec -> u2_cur_slice_idx = 0 ; ps_dec -> u2_cur_slice_idx = 0 ; ps_dec -> u1_slice_idx = 0 ; ps_dec -> u2_cur_slice_idx = 0 ; ps_dec -> u2_cur_slice_idx = 0 ; ps_dec -> u2_cur_slice_idx = 0 ; ps_dec -> u1_slice_idx = 0 ; ps_dec -> u2_cur_slice_idx = 0 ; ps_dec -> u2_cur_slice_idx = 0 ; ps_dec -> u1_slice_idx = 0 ; ps_dec -> u2_cur_slice_idx =,0
402,<S2SV_ModStart> ; UWORD32 u4_x_dst_offset <S2SV_ModEnd> = 0 ; <S2SV_ModStart> ) ; else { <S2SV_ModStart> ps_dec ) ; },0
403,"<S2SV_ModStart> VP9_LAST_FLAG ) { if ( cm -> ref_frame_map [ 0 ] >= cm -> num_frame_bufs ) { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Invalid <S2SV_blank> reference <S2SV_blank> frame"" ) ; return VPX_CODEC_ERROR ; } <S2SV_ModStart> -> frame_bufs [ <S2SV_ModEnd> cm -> ref_frame_map",0
404,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
405,"<S2SV_ModStart> TX_SIZE tx_size = get_plane_tx_size ( pd, plane <S2SV_ModEnd> ) : mbmi <S2SV_ModStart> ; int i <S2SV_ModEnd> ; int max_blocks_wide <S2SV_ModStart> ) ) ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) { int r, c ; int max_blocks_wide = num_4x4_w ; int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> ( 5 + pd -> subsampling_y ) ) ; i = 0 ; for ( r = 0 ; r < num_4x4_w ; r += ( 1 << tx_size ) ) { for ( c = 0 ; c < num_4x4_w ; c += ( 1 << tx_size ) ) { if ( r < max_blocks_",0
406,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 4 ) ; <S2SV_ModEnd> src += src_stride",0
407,"<S2SV_ModStart> nrow ) { if ( row + img -> row_offset > h ) { TIFFErrorExt ( tif -> tif_clientdata, ""%s"", ""gtStripSeparate"" ) ; return ( 0 ) ; } <S2SV_ModStart> -> row_offset ; <S2SV_ModEnd> if ( _TIFFReadEncodedStripAndAllocBuffer <S2SV_ModStart> ) ) { TIFFErrorExt ( tif -> tif_clientdata, ""%s"", ""gtStripSeparate"" ) ; return ( 0 ) ; } <S2SV_ModStart> ) ) { TIFFErrorExt ( tif -> tif_clientdata, ""%s"", ""gtStripSeparate"" ) ; <S2SV_ModStart> ) ) { TIFFErrorExt ( tif -> tif_clientdata, ""%s"", ""gtStripSeparate"" ) ; return ( 0 ) ; } <S2SV_ModStart> ) ) { TIFFErrorExt ( tif -> tif_clientdata, ""%s"", ""gtStripSeparate"" ) ; <S2SV_ModStart> ) ) { TIFFErrorExt ( tif -> tif_clientdata, ""%s"", ""gtStripSeparate"" ) ; <S2SV_ModStart> ) ) { TIFFErrorExt ( tif -> tif_clientdata, ""%s"", ""gtStripSeparate"" ) ;",0
408,<S2SV_ModStart> ; } } <S2SV_ModEnd> return 0 ;,0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. be <S2SV_ModEnd> [ psf -> <S2SV_ModStart> [ psf -> header. be <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ; psf -> header. be <S2SV_ModEnd> [ psf -> <S2SV_ModStart> [ psf -> header. be <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
410,<S2SV_ModStart> num & ( 1U <S2SV_ModEnd> << ( number,0
411,"<S2SV_ModStart> ] ; const size_t <S2SV_ModEnd> w = vpx_img_plane_width <S2SV_ModStart>, 1, stride <S2SV_ModEnd>, file ) <S2SV_ModStart>!= w ) { fclose ( file ) ; <S2SV_ModStart> return 0 ; }",0
412,"<S2SV_ModStart> ; uint16_t attr_len <S2SV_ModEnd> ; uint16_t bytes_left <S2SV_ModStart> 1 ; } <S2SV_ModEnd> MD5_Init ( & <S2SV_ModStart> md5_ctx ) ; if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } attr_len = avp -> length - sizeof ( struct l2tp_avp_t ) ; if ( attr_len <= MD5_DIGEST_LENGTH ) { memxor ( avp -> val, p1, attr_len ) ; return 0 ; } memxor ( p1, avp -> val, MD5_DIGEST_LENGTH ) ; orig_attr_len = ntohs ( * ( uint16_t * ) p1 ) ; if ( orig_attr_len <= MD5_DIGEST_LENGTH - 2 ) { memcpy ( avp -> val, p1,",0
413,<S2SV_ModStart> case EVP_CTRL_AEAD_SET_IVLEN : if ( arg <= 0 || arg > CHACHA_CTR_SIZE ) return 0 ; <S2SV_ModStart> case EVP_CTRL_AEAD_SET_IV_FIXED : if ( arg <= 0 || arg > CHACHA_CTR_SIZE ) return 0 ;,0
414,"<S2SV_ModStart>, 0, comm_event -> comm_size <S2SV_ModEnd> ) ; if",0
415,"<S2SV_ModStart>, sk ) ; if (! sk ) return - EINVAL",0
416,<S2SV_ModStart> MT_CPTYPE_PASSSALT ) { if ( cpkt. length > MT_PASSSALT_MAXLEN ) { return - 1 ; },0
417,<S2SV_ModStart> MUTT_ABORT ) { mutt_socket_close ( adata -> conn ) ; imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; mutt_socket_close ( adata -> conn ) ; imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ) ; mutt_socket_close ( adata -> conn ) ; imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } # <S2SV_ModStart> MUTT_ABORT ) { mutt_socket_close ( adata -> conn ) ; imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; mutt_socket_close ( adata -> conn ) ; imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; mutt_socket_close ( adata -> conn ) ; imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } # <S2SV_ModStart> MUTT_ABORT ) { mutt_socket_close ( adata -> conn ) ; imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; mutt_socket_close ( adata -> conn ),0
418,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
419,"<S2SV_ModStart> ) ) ; if ( <S2SV_ModStart>, 0 ) < 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModEnd> memset ( line",0
420,"<S2SV_ModStart> remainder, & rlen ) ; if ( ret ) return ret ; if (! check_atype_tag ( a, & t ) ) return ASN1_BAD_ID ; if (! decode_atype_to_ptr ( & t, contents, clen, a, retrep ) ) return ASN1_BAD_ID <S2SV_ModEnd> ; if (",0
421,"<S2SV_ModStart> ; read_userfile ( ) ; memset ( md5sum, 0, sizeof ( md5sum ) <S2SV_ModStart> state ) ; if ( strlen ( user -> password ) + 17 > 100 ) { syslog ( LOG_NOTICE, _ ( ""(%d) <S2SV_blank> Invalid <S2SV_blank> login <S2SV_blank> by <S2SV_blank> %s."" ), curconn -> seskey, curconn -> username ) ; abort_connection ( curconn, pkthdr, _ ( ""Login <S2SV_blank> failed, <S2SV_blank> incorrect <S2SV_blank> username <S2SV_blank> or <S2SV_blank> password\\r\\n"" ) ) ; return ; } <S2SV_ModStart> ) + 17 <S2SV_ModEnd> ) ; md5_finish",0
422,"<S2SV_ModStart> ; if ( _PyUnicodeCompareWithASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart> { if ( _PyUnicodeCompareWithASCIIString <S2SV_ModEnd> ( name,",0
423,<S2SV_ModStart> off } ; if (! str ) { return - 1 ; },0
424,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
425,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
426,"<S2SV_ModStart> size_t s ; s = exif_get_long ( o, EXIF_BYTE_ORDER_INTEL ) ; if ( s > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } <S2SV_ModStart> s ) ; if ( s > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } <S2SV_ModStart> s ) ; if ( s > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } <S2SV_ModStart> s ) ; if ( s > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; }",0
427,<S2SV_ModStart> bd_addr ) { if ( bd_addr -> bd_flags & BT_BD_ADDR_RANDOM ) return BT_STATUS_INVALID_ARGS ;,0
428,"<S2SV_ModStart> int i ; size_t avail ; size_t <S2SV_ModEnd> expect ; txid <S2SV_ModStart> 4 ) ; expect = 8 + 8 + nxip * 8 ; if ( nxip < 0 || nxip > avail || expect > avail ) goto bad_format ; xmin = pq_getmsgint64 ( buf ) ; xmax = pq_getmsgint64 ( buf ) ; if ( xmin == 0 || xmin > xmax || xmax > MAX_TXID ) goto bad_format ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; snap -> nxip = nxip ; SET_VARSIZE ( snap, TXID_SNAPSHOT_SIZE ( nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last || cur < xmin || cur >= xmax ) goto bad_format ; snap -> xip [ i ] = cur ; last = cur ; } PG_RETURN_POINTER ( snap ) ; bad_format : elog ( ERROR, ""invalid <S2SV_blank> snapshot <S2SV_blank> data"" ) ; return ( Datum ) NULL <S2SV_ModEnd> ; } <S2SV_null>",0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
430,<S2SV_ModStart> ( epoll_ ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
431,"<S2SV_ModStart> ( CMD_INITIALIZE, & new_global_options. option <S2SV_ModEnd>, NULL ) <S2SV_ModStart> ( CMD_INITIALIZE, & new_service_options. option <S2SV_ModEnd>, NULL )",0
432,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_PHNUM_MIN : * ( size_t * ) val = ms -> elf_phnum_min ; return 0 ; case MAGIC_PARAM_ELF_SHNUM_MIN : * ( size_t * ) val = ms -> elf_shnum_min ; return 0 ;,0
433,<S2SV_ModStart> offset ) { struct address_space * mapping = page -> mapping ; <S2SV_ModStart> = EXT4_JOURNAL ( <S2SV_ModEnd> host ) ; <S2SV_ModStart> ; if (! trylock_page ( page ) ) { unlock_page ( page ) ; return ; } if ( <S2SV_ModStart> offset ) ; unlock_page ( page ) ;,0
434,<S2SV_ModStart> ++ ) { if ( i + 1 >= movie -> moov -> trackList -> nb_entries ) return GF_OUT_OF_MEM ; <S2SV_ModStart> + 1 ) ; if (! trak ) continue,0
435,<S2SV_ModStart> 17 ] ; size_t <S2SV_ModEnd> plen ; md5_state_t <S2SV_ModStart> = 0 ; strlcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> = '\\0' ; strlcpy <S2SV_ModEnd> ( md5data +,0
436,<S2SV_ModStart> ; if ( <S2SV_ModEnd> Prefix!= NULL <S2SV_ModStart> = NULL ; if ( _mibindexes ) { int i ; for ( i = 0 ; i < _mibindex ; ++ i ) SNMP_FREE ( _mibindexes [ i ] ) ; free ( _mibindexes ) ; _mibindex = 0 ; _mibindex_max = 0 ; _mibindexes = NULL ; },0
437,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
438,<S2SV_ModStart> ( ) ; g_hash_table_remove_all ( headers ) ;,0
439,"<S2SV_ModStart> -> y_buffer ; # if CONFIG_VP9_HIGHBITDEPTH if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { vpx_memcpy ( dst, src, src_ybc -> y_width ) ; src += src_ybc -> y_stride ; dst += dst_ybc -> y_stride ; } # endif <S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst,",0
440,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_rd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> mi_col += MI_BLOCK_SIZE, 0 <S2SV_ModStart> ) { int <S2SV_ModEnd> i ; MACROBLOCK <S2SV_ModStart> pred_mv ) ; return 0 ;",0
441,"<S2SV_ModStart>, obj_tlen ; u_int <S2SV_ModEnd> offset ; u_int <S2SV_ModStart> ) ) ; ND_TCHECK ( * obj_tptr ) ; obj_tptr = EXTRACT_16BITS ( lmp_obj_header -> length ) ; if ( EXTRACT_16BITS ( lmp_obj_len ) > len ) { ND_PRINT ( ( ndo, ""LMP <S2SV_blank> object <S2SV_blank> length <S2SV_blank> too <S2SV_blank> large: <S2SV_blank> %u"", tlen ) ) ; return ; } ND_TCHECK ( * obj_tptr ) ; obj_tptr = EXTRACT_16BITS ( lmp_obj_header -> length ) ; if ( EXTRACT_16BITS ( lmp_obj_len ) > len ) { ND_PRINT ( ( ndo, ""LMP <S2SV_blank> object <S2SV_blank> length <S2SV_blank> too <S2SV_blank> large: <S2SV_blank> %u"", tlen ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( EXTRACT_16BITS ( lmp_obj_len ) > len ) { ND_PRINT ( ( ndo, ""LMP <S2SV_blank> object <S2SV_blank> length <S2SV_blank> too <S2SV_blank> large: <S2SV_blank> %u"", tlen ) ) ; return ; }",0
442,"<S2SV_ModStart> * mbmi, nmv_context_counts * counts, <S2SV_ModStart> [ 2 ] <S2SV_ModEnd> ) { int <S2SV_ModStart> i ) { nmv_inc_mv ( counts, <S2SV_ModEnd> & mbmi -> <S2SV_ModStart> ]. as_mv <S2SV_ModEnd> ) ; }",0
443,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ),",0
444,"<S2SV_ModStart> ; if ( skb_out -> len + hdr_size > skb -> len ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; } skb_pull_rcsum ( skb_out, hdr_size ) ; memmove ( skb_out -> data - ETH_HLEN, skb_mac_header ( skb_out ), ETH_HLEN ) ; skb_set_mac_header ( skb_out, - ETH_HLEN ) ; skb_reset_network_header ( skb_out ) ; skb_reset_transport_header ( skb_out ) ; hlist_for_each_entry ( entry, chain, list ) { size = entry -> skb -> len - hdr_size ; memcpy ( skb_put ( skb_out, size ), entry -> skb -> data + hdr_size, size ) ; } free : batadv_frag_clear_chain ( chain ) ; return skb_out <S2SV_ModEnd> ; } <S2SV_null>",0
445,<S2SV_ModStart> ) return ; if (! <S2SV_ModStart> netsnmp_mibindex_load ( ) ) { SNMP_FREE ( env_var ) ; return ; } <S2SV_ModEnd> DEBUGMSGTL ( (,0
446,"<S2SV_ModStart> { fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, O_RDWR ) ) <S2SV_ModStart> 1 ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_KEY ) ) <S2SV_ModStart> EV_REL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_SYN ) ) <S2SV_ModStart> x ++ ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> ]. mapped_id )",0
447,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
448,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s, <S2SV_ModStart> & 1 ) vpx_lpf_vertical_4 <S2SV_ModEnd> ( s +",0
449,<S2SV_ModStart> krb5_error_code iakerb_alloc_context ( krb5_ctx_id_t * ctx_id <S2SV_ModEnd> ) { iakerb_ctx_id_t <S2SV_ModStart> pctx ) { krb5_ctx_id_t ctx ; krb5_error_code code <S2SV_ModEnd> ; ctx = <S2SV_ModStart> = 0 ; * ctx_id = ctx ; code = krb5_gss_init_context ( & ctx -> k5c ) ; if ( code!= 0 ) goto cleanup ; * pctx = ctx ; cleanup : if ( code!= 0 ) iakerb_release_context ( ctx ) ; return code <S2SV_ModEnd> ; } <S2SV_null>,0
450,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> bitmapDC = CreateCompatibleDC",1
451,<S2SV_ModStart> ; while ( ( <S2SV_ModStart> )!= START_CODE_PREFIX ) && ( ps_stream -> u4_offset < ps_stream -> u4_max_offset ),1
452,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { kfree ( string ) ; <S2SV_ModStart> - EINVAL ; }",0
453,"<S2SV_ModStart> ) ; } mono_class_inflate_generic_method ( imethod, & tmp_context ) ;",0
454,<S2SV_ModStart> ) ] ; long <S2SV_ModEnd> tmp ; if <S2SV_ModStart> count ) ) { uml_exitcode = tmp ; <S2SV_ModStart> - EFAULT ; },0
455,"<S2SV_ModStart> char * last_elem = NULL <S2SV_ModStart> size_t len ; const char * l_origin = NULL ; const char * l_platform = NULL ; <S2SV_ModStart> ( ( ( strncmp ( & name [ 1 ], ""PLATFORM"", 8 ) == 0 && ( len = 9 )!= 0 ) ) && ( name [ len ] == '\\0' || name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) || ( name [ 1 ] == '{' && ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 9 )!= 0 ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( len = 11 )!= 0 ) ) ) { repl = ( ( len == 7 || name [ 2 ] == 'O' )? ( __libc_enable_secure? NULL : l -> l_origin ) : _dl_platform ) ; if ( repl!= NULL && repl!= ( const char * ) - 1 ) { wp = __stpcpy ( wp, repl ) ; name += len ; } else { wp = last_elem ;",0
456,<S2SV_ModStart> decContainer_t ) ) ; if ( pDecCont == NULL ) return ( H264SWDEC_MEMFAIL ),0
457,"<S2SV_ModStart> drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> srr ) ) { struct in_device * in_dev = __in_dev_get_rcu ( dev ) ; if ( in_dev &&! IN_DEV_SOURCE_ROUTE ( in_dev ) ) goto drop ; if ( ip_options_rcv_srr ( skb ) ) goto drop ; } return 0 ; inhdr_error : IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INHDRERRORS ) ; <S2SV_ModEnd> return 0 ; <S2SV_ModStart> 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
458,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
459,<S2SV_ModStart> errout ; return 0 <S2SV_ModEnd> ; } <S2SV_null>,0
460,<S2SV_ModStart> krb5_key_data * key_data = NULL <S2SV_ModStart> == NULL ) { err = ENOMEM ; <S2SV_ModStart> goto cleanup ; },0
461,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
462,<S2SV_ModStart> -> zInput = sqlite3_calloc <S2SV_ModEnd> ( nByte +,0
463,<S2SV_ModStart> filp ) { struct socket_info * si = <S2SV_ModEnd> SOCKET_I ( inode <S2SV_ModStart> ( inode ) ; if ( si -> i_state & I_CLOSED ) return - EBADF ; sock_release ( si,0
464,"<S2SV_ModStart> asdl_seq * orelse, bool is_block <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. is_block = is_block",0
465,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> my_bool <S2SV_ModEnd> mi_sort_index ( MI_CHECK <S2SV_ModStart> * param, my_isam_t * isam <S2SV_ModEnd>, char * <S2SV_ModStart> char * name, my_off_t * index_pos ) { reg2 uint key ; reg1 MI_KEYDEF * keyinfo ; File new_file ; my_off_t index_pos [ HA_MAX_POSSIBLE_KEY ] ; uint r_locks, w_locks ; my_off_t old_lock ; MYISAM_SHARE * share = info -> s ; MI_STATE_INFO old_state ; DBUG_ENTER ( ""mi_sort_index"" ) ; if (! ( param -> testflag & T_SILENT ) ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; fn_format ( param -> temp_filename, name, """", MI_NAME_IEXT, 2 + 4 + 32 ) ; fn_format ( param -> temp_filename, param -> temp_filename, """", INDEX",0
466,"<S2SV_ModStart> NGHTTP2_ERR_INVALID_STREAM_ID : return ""Stream <S2SV_blank> ID <S2SV_blank> is <S2SV_blank> invalid"" <S2SV_ModEnd> ; case NGHTTP2_ERR_BAD_STREAM_ID <S2SV_ModStart> NGHTTP2_ERR_INVALID_STREAM_ID : return ""Stream <S2SV_blank> ID <S2SV_blank> is <S2SV_blank> invalid"" <S2SV_ModEnd> ; case NGHTTP2_ERR_BAD_STREAM_ID",0
467,"<S2SV_ModStart> UINT error ; if (! <S2SV_ModStart>, eventId ) ||! <S2SV_ModEnd> Stream_Read_UINT32 ( s <S2SV_ModStart>, pduLength ) ) return CHANNEL_RC_DATA",0
468,"<S2SV_ModStart> ) ; } if ( pData -> socket == INVALID_SOCKET ) { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"", pData -> description, zmq_strerror ( errno ) ) ; ABORT_FINALIZE ( RS_RET_NO_ERRCODE ) ; }",0
469,"<S2SV_ModStart> struct flowi6 fl6 ; int ret <S2SV_ModStart> daddr ) ; ret = ip6_xmit ( sk, skb, & fl6, np -> opt, np -> tclass ) ; if ( ret < 0 ) return ret ; <S2SV_ModStart> = 1 ; <S2SV_ModEnd> return ip6_xmit (",0
470,"<S2SV_ModStart> ) break ; if ( quantum_info -> quantum_type == QuantumTypeNone ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( clone_info ) ) ; }",0
471,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
472,"<S2SV_ModStart> = 0 ; bn_t t ; bn_null ( t ) ; RLC_TRY { bn_new ( t ) ; switch ( operation ) { case RSA_ENC : bn_zero ( m ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, RSA_PUB ) ; * p_len = k_len - 3 - m_len ; for ( int i = 0 ; i < * p_len ; i ++ ) { bn_lsh ( m, m, 8 ) ; do { rand_bytes ( & pad, 1 ) ; } while ( pad == 0 ) ; bn_add_dig ( m, m, pad ) ; } bn_lsh ( m, m, 0 ) ; bn_lsh ( m, m, m_len * 8 ) ; bn_lsh ( m, m, m_len * 8 ) ; break ; case RSA_DEC : m_len = k_len - 1 ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; if ( pad!= RSA_PUB ) { result",0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,<S2SV_ModStart> 8 ) ; <S2SV_ModEnd> psf = calloc <S2SV_ModStart> SF_PRIVATE ) ) ; if ( psf <S2SV_ModEnd> == NULL ),0
475,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fix_interp_filter ( VP9_COMMON <S2SV_ModStart> cm ) { int count [ SWITCHABLE_FILTERS ] ; int i, j, c = 0 ; for ( i = 0 ; i < SWITCHABLE_FILTERS ; ++ i ) { count [ i ] = 0 ; for ( j = 0 ; j < SWITCHABLE_FILTER_CONTEXTS ; ++ j ) { if ( cm -> counts. switchable_interp [ j ] [ i ] == 0 ) { cm -> interp_filter = i ; break ; } } } if ( c == 1 ) { for ( i = 0 ; i < SWITCHABLE_FILTERS ; ++ i ) { if ( count [ i ] ) { cm -> interp_filter = i ; break ; } } } } if ( c == 1 ) { for ( i = 0 ; i < SWITCHABLE_FILTERS ; ++ i ) { if ( count [ i ] ) { cm -> interp_filter = i ; break ; } } } } } return c ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
476,"<S2SV_ModStart> & cpi -> encode_frame <S2SV_ModEnd> ; VP9_COMMON * <S2SV_ModStart> mi_cols ) ; <S2SV_ModEnd> vp9_setup_src_planes ( x <S2SV_ModStart> subsampling_y ) ; vpx_memset ( xd -> above_context [ 0 ], 0, sizeof ( * xd -> above_context [ 0 ] ) * 2 * aligned_mi_cols * MAX_MB_PLANE ) ; vpx_memset ( xd -> above_seg_context, 0, sizeof ( * xd -> above_seg_context ) * aligned_mi_cols ) ; <S2SV_ModStart> MAX_MB_PLANE ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
477,"<S2SV_ModStart> hp ) ; if ( <S2SV_ModEnd> htc_request_check_host_hdr ( hp <S2SV_ModStart> ( hp ) <S2SV_ModEnd>!= 0 ) <S2SV_ModStart>, SLT_Error, ""Duplicated <S2SV_blank> HTTP <S2SV_blank> host <S2SV_blank> header"" <S2SV_ModEnd> ) ; return",0
478,"<S2SV_ModStart> EOFOp 0x07 char * magick_buffer <S2SV_ModEnd> ; Image * <S2SV_ModStart> char * ) magick_buffer <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart>. x = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. y = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. columns = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. rows = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart>. x = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. y = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. columns = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ( memcmp ( magick",0
479,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> sizeof ( tETH_HDR ),1
480,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ps_dec -> s_cur_slice <S2SV_ModStart> ps_dec -> s_cur_slice == 0 ) { ps_dec -> s_cur_slice <S2SV_ModStart> = 0 ; } else { ps_dec -> s_cur_slice ++ ; },0
481,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> * karg ; <S2SV_ModEnd> struct pci_dev * <S2SV_ModStart> pci_dev * pdev <S2SV_ModEnd> ; int iocnum <S2SV_ModStart> } if ( <S2SV_ModEnd> karg -> hdr <S2SV_ModStart>. iocnum!= ioc -> num_ioc <S2SV_ModEnd> ) { printk",0
482,"<S2SV_ModStart> ( image -> rows <S2SV_ModEnd>, 3 *",0
483,"<S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv",0
484,"<S2SV_ModStart> ; if ( datao + 8 > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> order = EXIF_BYTE_ORDER_INTEL ; datao += exif_get_long ( buf + datao + 8, EXIF_BYTE_ORDER_INTEL ) ; if ( <S2SV_ModStart> EXIF_BYTE_ORDER_INTEL ) ; c = exif_get_short ( buf + datao, EXIF_BYTE_ORDER_INTEL ) ; datao += 2 ; exif_mnote_data_fuji_clear ( n ) ; n -> entries = exif_mem_alloc ( en -> mem, sizeof ( MnoteFujiEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( en -> log, ""ExifMnoteDataFuji"", sizeof ( MnoteFujiEntry ) * c ) ; return ; } tcount = 0 ; for ( i = c, o = datao ; i <",0
485,"<S2SV_ModStart> ) ; } if ( snprintf ( charbuf, sizeof ( charbuf ), ""%s.html"", rootname ) < 0 ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModStart> ) ; } if ( snprintf ( charbuf, sizeof ( charbuf ), ""%s.html"", rootname ) < 0 ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; }",0
486,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> opt = service_options <S2SV_ModStart> service_options. next <S2SV_ModEnd> ; while ( <S2SV_ModStart> 0 ; } <S2SV_ModEnd> s_log ( LOG_DEBUG <S2SV_ModStart> servname ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
487,<S2SV_ModStart> void ) { if (! recovery_started ) return ;,0
488,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ;",0
489,"<S2SV_ModStart> image ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
490,<S2SV_ModStart> { WORD32 i <S2SV_ModEnd> ; WORD32 num_neg_pics <S2SV_ModStart> u4_num_total_curr ; } <S2SV_ModEnd> for ( i <S2SV_ModStart> u4_num_st_curr_after [ u4_num_st_curr_before <S2SV_ModEnd> ] ; for <S2SV_ModStart> u4_num_st_curr_after [ u4_num_st_curr_before <S2SV_ModEnd> ] ; for <S2SV_ModStart> u4_num_st_curr_after [ u4_num_st_curr_before <S2SV_ModEnd> ] ; for <S2SV_ModStart> u4_num_st_curr_after [ u4_num_st_curr_after <S2SV_ModEnd> ] ; for <S2SV_ModStart> u4_num_lt_curr [ u4_num_lt_curr <S2SV_ModEnd> ] ; for <S2SV_ModStart> u4_num_lt_curr [ u4_num_lt_curr <S2SV_ModEnd> ] ; for <S2SV_ModStart> u4_num_lt_curr [ u4_num_lt_curr <S2SV_ModEnd> ] ; for <S2SV_ModStart> u4_num_lt_curr [ u4_num_lt_curr <S2SV_ModEnd> ] ; for <S2SV_ModStart> u4_num_lt_curr [ u4_num_lt_curr <S2SV_ModEnd> ] ; for <S2SV_ModStart> u4_num_lt_curr [,0
491,"<S2SV_ModStart> cJSON * item, const char * name <S2SV_ModStart> child ) { if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( names = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) { cJSON_free ( entries ) ; return 0 ; } memset ( names, 0, sizeof ( char * ) * numentries ) ; child = item -> child ; ++ depth ; if ( fmt ) len += depth ; while ( child ) { if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) { cJSON_free ( entries ) ; return 0 ; } memset ( names, 0, sizeof ( char * ) * numentries ) ; child = child -> child ; ++ depth ; if ( fmt ) len += depth ; while ( child ) { <S2SV_ModStart> = print_string_ptr ( name ) ; entries [ i ++ ] = ret = print_value ( child, depth, fmt ) ; if ( str && ret ) len += strlen ( ret ) + 2 + ( fmt? 2",0
492,<S2SV_ModStart> sk ) ; if ( writable ) { unix_state_lock ( sk ) ; other = unix_peer ( sk ) ; if ( other && unix_peer ( <S2SV_ModEnd> other )!= <S2SV_ModStart> = 0 ; unix_state_unlock ( sk ) ; } <S2SV_ModEnd> } if (,0
493,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; fflush ( outputbuffer ) ;",0
494,<S2SV_ModStart> ( OM_uint32 ) KRB5_INTERNAL_ERROR <S2SV_ModEnd> ; return GSS_S_DEFECTIVE_TOKEN,0
495,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vp9_ref_frame_t * ) ; YV12_BUFFER_CONFIG * fb <S2SV_ModStart> NULL ) { <S2SV_ModEnd> vp9_get_reference_enc ( ctx",0
496,<S2SV_ModStart> plug ) ; <S2SV_ModEnd> put_ioctx ( ctx,0
497,"<S2SV_ModStart> * name, my_bool <S2SV_ModEnd> rep_quick ) { <S2SV_ModStart> ) ) || init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> read_buffer_length, WRITE_CACHE, share -> pack. header_length, 1, MYF ( MY_WME ) ) ||",0
498,"<S2SV_ModStart> s } ; uECC_word_t p [ uECC_MAX_WORDS * 2 ] ; wordcount_t num_words = curve -> num_words ; wordcount_t num_n_words = BITS_TO_WORDS ( curve -> num_n_bits ) ; bitcount_t num_n_bits = curve -> num_n_bits ; if ( uECC_vli_isZero ( k, num_words ) || uECC_vli_cmp ( k, tmp, num_words )!= 1 ) { return 0 ; } carry = regularize_k ( k, tmp, s, curve ) ; EccPoint_mult ( p, curve -> G, k2 [! carry ], 0, num_n_bits + 1, curve ) ; if ( uECC_vli_isZero ( p, num_words ) ) { return 0 ; } if (! g_rng_function ) { uECC_vli_clear ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! uECC_generate_random_int ( tmp, curve -> n",0
499,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|dao-truncated]"" <S2SV_ModEnd> ) ) ;",0
500,<S2SV_ModStart> ; } else if ( pool -> free_total == 0 ) { return ; } else <S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
501,"<S2SV_ModStart> tp ; { if ( * cp == '\\\\' && cp [ 1 ] && index ( ""mM"", cp [ 1 ] ) && cp [ 2 ] ) { meta = 1 ; cp += 2 ; } if ( * cp == '\\\\' && cp [ 1 ] && index ( ""0123456789xXoO"", cp [ 1 ] ) && cp [ 2 ] ) { NEARDATA const char hex [ ] = ""00112233445566778899aAbBcCdDeEfF"" ; const char * dp ; int dcount = 0 ; cp ++ ; if ( * cp == 'x' || * cp == 'X' ) for ( ++ cp ; * cp && ( dp = index ( hex, * cp ) ) && ( dcount ++ < 2 ) ; cp ++ ) cval = ( cval * 16 ) + ( ( int ) ( dp - hex ) / 2 ) ; else if ( * cp == 'o' || * cp == 'O' ) for ( ++ cp ; * cp && ( index ( ""01234567"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 8 ) + ( * cp",0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
503,"<S2SV_ModStart>, * pixg <S2SV_ModEnd> ; PIXCMAP * <S2SV_ModStart> == NULL ) { pixDestroy ( & pixc ) ; <S2SV_ModStart> NULL ) ; }",0
504,<S2SV_ModStart>. vf = vpx_mse16x16 <S2SV_ModEnd> ; xd ->,1
505,"<S2SV_ModStart> data ; int size = overhead ; if ( mongo_validate_ns ( conn, ns )!= MONGO_OK ) return MONGO_ERROR ; for ( i = 0 ; i < count ; i ++ ) { size += bson_size ( bsons [ i ] ) ; if ( mongo_bson_valid ( conn, bsons [ i ], 1 )!= MONGO_OK ) return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } mm = mongo_message_create ( size, 0, 0, MONGO_OP_INSERT ) ; data = & mm -> data ; if ( flags & MONGO_CONTINUE_ON_ERROR ) data = mongo_data_append32 ( data, & ONE ) ; else data = mongo_data_append32 ( data, & ZERO ) ; for ( i = 0 ; i < count ; i ++ ) { data = mongo_data_append ( data, bsons [ i ] -> data, bson_size ( bsons [ i",0
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NEGO_STATE_FAIL ; goto error <S2SV_ModEnd> ; } Stream_Read_UINT8 <S2SV_ModStart> = NEGO_STATE_FINAL ; return ; error : return ;,0
507,"<S2SV_ModStart> i, target_bits_per_mb <S2SV_ModEnd> ; target_bits_per_mb = <S2SV_ModStart> int bits_per_mb_at_this_q = <S2SV_ModEnd> vp9_rc_bits_per_mb ( cm <S2SV_ModStart> cm -> frame_type <S2SV_ModEnd>, correction_factor )",0
508,<S2SV_ModStart> ; value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1101WritePhyReg (,0
509,<S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModStart> ; if ( i < NCH ( n ) &&,0
510,"<S2SV_ModStart> int dst_stride, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart> uint8_t, left_col [ 64 ] <S2SV_ModStart>, 64 ) ; DECLARE_ALIGNED_ARRAY ( 64, uint8_t, right_col, 64 ) <S2SV_ModStart> + y ; memset <S2SV_ModEnd> ( left_col, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( right_col, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( right_col, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset",0
511,"<S2SV_ModStart> ++ ; } else if ( pattern [ end ] == \'""\' ) { end ++ ; while ( ( pattern [ end ]!= 0 ) && ( pattern [ end ]!= \'""\' ) ) end ++ ; }",0
512,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_completed_io_lock ) ;,1
513,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; write_profile_and_bit <S2SV_ModEnd> ( cm -> <S2SV_ModStart> wb ) ; write_bit_and_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; write_bit_and_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; write_bit_and_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> show_frame ) ; write_bit_and_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> KEY_FRAME ) { write_bit_and_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; } write_bit_and_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { write_bit_and_bit <S2SV_ModEnd> ( cm -> <S2SV_ModStart> -> show_frame ) write_bit_and_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm -> error_resilient_mode ) write_bit_and_bit <S2SV_ModEnd> ( wb,",0
514,"<S2SV_ModStart> ; if ( optind < 1 ) { fprintf ( stderr, ""Usage: <S2SV_blank> %s <S2SV_blank> <image_desc>\\n"", argv [ 0 ] ) ; exit ( EXIT_FAILURE ) ; } if (",0
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { q = osStrchr <S2SV_ModEnd> ( p +,1
516,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
517,<S2SV_ModStart> KEY_FRAME ) { memcpy <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd ->,1
518,"<S2SV_ModStart> error_t error ; int16_t <S2SV_ModEnd> n ; uint32_t <S2SV_ModStart> ( interface, ENC624J600_ESTAT <S2SV_ModEnd> ) & ESTAT_PKTCNT <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL <S2SV_ModEnd>, ENC624J600_RX_BUFFER_STOP ) <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_ECON1 <S2SV_ModEnd>, ENC624J600_ECON1_STOP ) <S2SV_ModStart> ( interface, ENC624J600_ECON1 <S2SV_ModEnd>, ENC624J600_ECON1_",0
519,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv, VALUE klass ) { VALUE content ; VALUE rb_schema ; VALUE errors = rb_ary_new ( ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; # ifdef HAVE_XMLSCHEMASETPARSERSTRUCTUREDERRORS xmlSchemaSetParserStructuredErrors ( ctx, Nokogiri_error_array_pusher, ( void * ) errors ) ; # endif <S2SV_ModEnd> ctx = xmlSchemaNewMemParserCtxt <S2SV_ModStart> xmlSchemaNewMemParserCtxt ( ( <S2SV_ModEnd> const char * <S2SV_ModStart> content ), argc, argv <S2SV_ModEnd> ) ; VALUE <S2SV_ModStart> errors ) ; rb_iv_set ( rb_schema, ""@content"", content ) ;",0
520,"<S2SV_ModStart> ) ; } if ( strlen ( config_opt ) == 0 ) { s_log ( LOG_ERR, ""Empty <S2SV_blank> configuration <S2SV_blank> line"" ) ; print_syntax ( ) ; return 1 ; }",0
521,<S2SV_ModStart> 2 ] ; if ( out [ 3 ] > state -> buffersize ) return - 1 ; <S2SV_ModStart> 2 ] ; if ( out [ 3 ] > state -> buffersize ) return - 1 ;,0
522,<S2SV_ModStart> err = - <S2SV_ModEnd> EALREADY ; if,0
523,<S2SV_ModStart> POLL_IN ) ; <S2SV_ModEnd> perf_event_wakeup ( handle,0
524,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
525,"<S2SV_ModStart> EPROTONOSUPPORT ) { crm_trace <S2SV_ModEnd> ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" )",0
526,"<S2SV_ModStart> ( interface, KSZ8851_RXFHSR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXMR | KSZ8851_RXFHSR_RXFTL | KSZ8851_RXFHSR_RXRF | KSZ8851_RXFHSR_RXCE <S2SV_ModEnd> ) ) == <S2SV_ModStart> ( interface, KSZ8851_RXFDPR, KSZ8851_RXFDPR_RXFPAI <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851ReadFifo <S2SV_ModStart> ( interface, KSZ8851_RXFDPR, KSZ8851_RXFDPR_RXFPAI <S2SV_ModEnd> ) ; ancillary <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_RRXEF <S2SV_ModEnd> ) ; return",0
527,"<S2SV_ModStart> stmt_ty ast_for_funcdef_impl ( <S2SV_ModEnd> const node * <S2SV_ModStart> * n, asdl_seq * args, asdl_seq * body, <S2SV_ModStart> int is_async ) <S2SV_ModEnd> { identifier name <S2SV_ModStart> returns, type_comment <S2SV_ModEnd>, n ->",0
528,"<S2SV_ModStart> mm, 0xA0000 ) ; if ( pgd_none_or_clear_bad ( pgd ) ) goto out ; pud = pud_offset ( pgd, 0xA0000",0
529,"<S2SV_ModStart> packet_len ) ; if ( message_left < 0 ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> packet_data_start_ptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; }",0
530,"<S2SV_ModStart> ) ; } if (! is_valid_test_name ( test_name ) ) { printf ( ""Error: <S2SV_blank> invalid <S2SV_blank> test <S2SV_blank> name.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; }",0
531,"<S2SV_ModStart> 0 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif <S2SV_ModStart> row ++ ) <S2SV_ModEnd> for ( col <S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD if ( ( RAW ( row, col ) = pred [ col & 1 ] ) > 4098 && col < width ) derror ( ) ; # else <S2SV_ModStart> ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
532,<S2SV_ModStart> ; if (! nl ) { up_write ( & _hash_lock ) ; return - ENOMEM ; } if (,0
533,<S2SV_ModStart> ) break ; if ( quantum_info -> quantum_type == QuantumTypeNone ) { quantum_info -> quantum_type = MagickFalse ; quantum_info = DestroyQuantumInfo ( quantum_info ) ; return ( DestroyImageList ( clone_info ) ) ; },0
534,<S2SV_ModStart> ( bfqq ) __bfq_idle_slice_timer_body <S2SV_ModEnd> ( bfqq ),0
535,<S2SV_ModStart> ; length += sizeof ( PRIMARY_DRAWING_ORDER_FIELD ) <S2SV_ModEnd> ; length +=,0
536,<S2SV_ModStart> d_inode ) ; if (! d_is_dir ( old ) &&! new_is_dir ) { err = - ENOENT ; goto out ; },0
537,"<S2SV_ModStart> int plane ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
538,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> nonrd_pick_sb_modes ( VP9_COMP <S2SV_ModStart> -> e_mbd ; if ( xd -> mi [ 0 ] -> mbmi. sb_type!= BLOCK_NONE ) { <S2SV_ModStart> bsize ) ; } else { xd -> mi [ 0 ] -> mbmi. sb_type = BLOCK_NONE ; } <S2SV_ModStart> ) ) { return <S2SV_ModStart> = DC_PRED ; if ( xd -> mi [ 0 ] -> mbmi. sb_type!= BLOCK_NONE ) { <S2SV_ModStart> intramode ) ; },0
539,"<S2SV_ModStart> = NULL ; if ( <S2SV_ModEnd> superblockRead ( & <S2SV_ModStart>. superblock )!= 1 ) { hrtf = getHrtf ( & reader, err ) ; } else <S2SV_ModEnd> { hrtf =",0
540,"<S2SV_ModStart> -> ranges = calloc ( 1, <S2SV_ModEnd> sizeof ( MappedRange",0
541,"<S2SV_ModStart> ; if ( flags & VP8_EFLAG_NO_REF_LAST ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_FORCE_GF ) ref ^= VP8_ALTR_FRAME ; vp8_use_as_reference ( ctx -> cpi, ref ) ; } if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_ALTR_FRAME ; vp8_use_as_reference ( ctx -> cpi, ref ) ;",0
542,<S2SV_ModStart> ; quantum_info = ( QuantumInfo * ),0
543,<S2SV_ModStart>! head ) <S2SV_ModEnd> return - EINVAL <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
544,"<S2SV_ModStart> * pptr, u_int64 <S2SV_ModEnd> len ) { <S2SV_ModStart> advance ; u_int64 <S2SV_ModEnd> tlen ; const <S2SV_ModStart>, pptr, tlen <S2SV_ModEnd> ) ; if <S2SV_ModStart>, pptr, tlen <S2SV_ModEnd> ) ; if <S2SV_ModStart>, pptr, tlen <S2SV_ModEnd> ) ; if <S2SV_ModStart>, pptr, tlen <S2SV_ModEnd> ) ; if <S2SV_ModStart>, pptr, tlen <S2SV_ModEnd> ) ; if <S2SV_ModStart>, pptr, tlen <S2SV_ModEnd> ) ; if <S2SV_ModStart>, pptr, tlen <S2SV_ModEnd> ) ; if <S2SV_ModStart>, pptr, tlen <S2SV_ModEnd> ) ; if <S2SV_ModStart>, pptr, tlen <S2SV_ModEnd> ) ; if <S2SV_ModStart>, pptr, tlen <S2SV_ModEnd> ) ; if <S2SV_ModStart>, pptr, tlen <S2SV_ModEnd> ) ; if <S2SV_ModStart>, pptr, tlen <S2SV_ModEnd> ) ; if <S2SV_ModStart>, pptr, tlen <S2SV_ModEnd> ) ; if <S2SV_ModStart>, pptr, tlen <S2SV_ModEnd> ) ; if <S2SV_ModStart>, pptr, tlen <S2SV_ModEnd> ) ; if <S2SV_ModStart>, pptr, tlen <S2SV_ModEnd> ) ; if <S2SV_ModStart>, pptr, tlen <S2SV_ModEnd> ) ; if <S2SV_ModStart>, pptr, tlen <S2SV_ModEnd> ) ; if <S2SV_ModStart>, pptr, tlen <S2SV_ModEnd> ) ; if <S2SV_ModStart>, pptr, tlen <S2SV_ModEnd> ) ; if <S2SV_ModStart>, pptr, tlen <S2SV_ModEnd> )",0
545,"<S2SV_ModStart> ""<tr><td>Running <S2SV_blank> in <S2SV_blank> progress</td><td>%s</td></tr>"", Run. running_in_progress? ""True"" : ""False"" ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Running <S2SV_blank> in <S2SV_blank> progress</td><td>%s</td></tr>"", Run. running_in_progress? ""True"" : ""False"" ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Running <S2SV_blank> in <S2SV_blank> progress</td><td>%s</td></tr>"", Run. running_in_progress? ""True"" : ""False"" ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Running <S2SV_blank> in <S2SV_blank> progress</td><td>%s</td></tr>"", Run. running_in_progress? ""True"" : ""False"" ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Running <S2SV_blank> in <S2SV_blank> progress</td><td>%s</td></tr>"", Run. running_in_progress? ""True"" : ""False"" ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Running <S2SV_blank> in <S2SV_blank> progress</td",0
546,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
547,"<S2SV_ModStart> ) ) ; if ( strlen ( constr1 ) > sizeof ( constr2 ) ) { fprintf ( stderr, ""invalid <S2SV_blank> amount <S2SV_blank> for <S2SV_blank> liquid <S2SV_blank> transaction: <S2SV_blank> %s\\n"", constr1 ) ; return false ; } <S2SV_ModStart> ) ) ; if ( strlen ( constr1 ) > sizeof ( constr1 ) ) { fprintf ( stderr, ""invalid <S2SV_blank> amount <S2SV_blank> for <S2SV_blank> liquid <S2SV_blank> transaction: <S2SV_blank> %s\\n"", constr1 ) ; return false ; } <S2SV_ModStart> ) ) ; if ( strlen ( constr2 ) > sizeof ( constr2 ) ) { fprintf ( stderr, ""invalid <S2SV_blank> amount <S2SV_blank> for <S2SV_blank> liquid <S2SV_blank> transaction: <S2SV_blank> %s\\n"", constr2 ) ; return false ; } <S2SV_ModStart> ) ) ; if ( strlen ( constr1 ) > sizeof ( constr1 ) ) { fprintf ( stderr, ""invalid <S2SV_blank> amount <S2SV_blank> for <S2SV_blank> liquid <S2SV_blank> transaction: <S2SV_blank> %s\\n"", constr1 ) ; return false ; } <S2SV_ModStart> ) ) ; if ( strlen ( constr2 ) > sizeof ( constr2 ) ) { fprintf ( stderr, ""invalid <S2SV_blank> amount <S2SV_blank> for <S2SV_blank> liquid <S2SV_blank> transaction: <S2SV_blank> %s\\n"", constr2",0
548,"<S2SV_ModStart> iad_num ++ ; if ( iad_num >= USB_MAXINTERFACES ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, nintf_orig, USB_MAXINTERFACES ) ; nintf = USB_MAXINTERFACES ; }",0
549,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
550,<S2SV_ModStart> ; distortion = vpx_variance16x16 <S2SV_ModEnd> ( * (,1
551,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_ECON2_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR4 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR5 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR6 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR4 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR5 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR6 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR4 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR5 <S2SV_ModEnd>,",0
552,<S2SV_ModStart> * start ; if ( psf -> header == NULL ) { return ; } <S2SV_ModStart> header ) ; if ( maxlen > sizeof ( psf -> header ) ) { return ; } <S2SV_ModStart> + maxlen ; if ( maxlen > sizeof ( psf -> header ) ) { return ; } <S2SV_ModStart> = 0 ; if ( strlen ( ( char * ) psf -> header ) > sizeof ( psf -> header ) ) { psf -> headindex = sizeof ( psf -> header ) ; } else { <S2SV_ModStart> header ) ; },0
553,<S2SV_ModStart> -> alg_priv ) { <S2SV_ModStart> alg_priv ) ; ctx -> priv -> alg_priv = NULL ; },0
554,<S2SV_ModStart> { sf -> <S2SV_ModEnd> recode_loop = ( <S2SV_ModStart> ; sf -> <S2SV_ModEnd> less_rectangular_check = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> use_rd_breakout = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> auto_mv_step_size = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> intra_y_mode_mask [ TX_32X32 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> intra_uv_mode_mask [ TX_16X16 <S2SV_ModStart> = INTRA_DC_H_V ; <S2SV_ModEnd> } if ( <S2SV_ModStart> { sf -> <S2SV_ModEnd> recode_loop = ALLOW_RECODE_KFMAXBW <S2SV_ModStart> : ALLOW_RECODE_KFMAXBW ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
555,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
556,<S2SV_ModStart> ) + 2 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( inuse <S2SV_ModEnd> <= ( LUAI_MAXSTACK,0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,"<S2SV_ModStart>, * s <S2SV_ModEnd> ; int quote <S2SV_ModStart> errstr ) { <S2SV_ModEnd> char buf [ <S2SV_ModStart> 128 ] ; s = _PyUnicode_AsString ( errstr ) ; ast_error ( n, buf ) ; Py_DECREF ( errstr ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } Py_DECREF ( type ) ; Py_DECREF ( value ) ; Py_XDECREF ( tback ) ; return NULL ; } PyArena_AddPyObject ( c -> c_arena, str ) ; return Str ( str, kind, LINENO ( n ), n -> n_col_offset, c -> c_arena ) ; } case INTEGER : { PyObject * pynum = parsinteger ( c, STR ( ch ) ) ; if (! pynum ) { ast_error ( n, ""(integer) <S2SV_blank> unknown <S2SV_blank> error"" ) ; return NULL ; } PyArena_AddPyObject ( c -> c_arena, str ) ; return Str ( str, kind, LINENO ( n ), n -> n_col_offset, c -> c_arena",0
559,"<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> break ; } svc_ctx -> spatial_layers = 0 ; svc_ctx -> scale_factors = 0 ; svc_ctx -> quantizers = 0 ; svc_ctx -> quantizers_keyframe = 0 ; svc_ctx -> spatial_layers = 0 ; svc_ctx -> spatial_layers = 0 ; svc_ctx -> scale_factors = 0 ; svc_ctx -> quantizers_keyframe = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> is_keyframe_qaunt_set = 1 ; } else if ( strcmp ( ""encoding-mode"", option_name ) == 0 ) { res = set_option_encoding_mode ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""layers"", option_name ) == 0 ) { res = set_option_layers ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""scale-factors"", option_name ) == 0 ) { res = parse_scale_",0
560,<S2SV_ModStart> ) ; } <S2SV_ModEnd> mb_index = 0,0
561,<S2SV_ModStart> self ) { size_t <S2SV_ModEnd> i ; PyObject,1
562,,1
563,"<S2SV_ModStart> ( dbh, mysql_error_string <S2SV_ModEnd> ( imp_dbh ->",0
564,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ioctl ( slot <S2SV_ModStart> & size )!= 0 <S2SV_ModEnd> ) pthread_mutex_unlock ( <S2SV_ModStart> ( & slot_lock <S2SV_ModEnd> ) ; },0
565,"<S2SV_ModStart> ieee_802_11_phdr phdr ; if ( pinfo -> curr_layer_num < 1 || pinfo -> curr_layer_num > MAX_PPI_FRAMES ) { fprintf ( stderr, ""Invalid <S2SV_blank> frame <S2SV_blank> number <S2SV_blank> (%d)\\n"", pinfo -> curr_layer_num ) ; return ; }",0
566,<S2SV_ModStart> ; sh = sds_malloc <S2SV_ModEnd> ( hdrlen +,0
567,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> BYTE a_val ; if (! context ) return FALSE ; <S2SV_ModStart> -> ColorLossLevel ; if (! context -> priv -> PlaneBuffers ) return FALSE ; <S2SV_ModStart> ; } } return TRUE ;,0
568,<S2SV_ModStart> > nr_parens ) { ret = <S2SV_ModEnd> - EINVAL ; <S2SV_ModStart> - EINVAL ; goto out_free ; },0
569,<S2SV_ModStart> ) { const VP9EncoderConfig * oxcf = & cpi -> oxcf ; const <S2SV_ModStart> target = ( oxcf -> <S2SV_ModEnd> starting_buffer_level / 2 <S2SV_ModStart> > INT_MAX )? oxcf -> <S2SV_ModEnd> starting_buffer_level / 2 <S2SV_ModStart> int ) ( oxcf -> <S2SV_ModEnd> starting_buffer_level / 2 <S2SV_ModStart> int ) ( oxcf -> <S2SV_ModEnd> output_framerate - 16 <S2SV_ModStart> ; if ( oxcf -> <S2SV_ModEnd> frames_since_key < cpi <S2SV_ModStart> frames_since_key / ( oxcf -> <S2SV_ModEnd> output_framerate / 2 <S2SV_ModStart> = ( ( oxcf -> <S2SV_ModEnd> av_per_frame_bandwidth ) >>,0
570,"<S2SV_ModStart> TX_MODE read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r )",1
571,"<S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd>",0
572,<S2SV_ModStart> -> cpi ; MACROBLOCK_INFO * const mbmi = & cpi -> mb. plane [ plane ] ; <S2SV_ModStart> args -> tp <S2SV_ModEnd> ; struct macroblock_plane <S2SV_ModStart> plane_type ; const <S2SV_ModEnd> int ( * <S2SV_ModStart> UNCONSTRAINED_NODES ] = <S2SV_ModEnd> counts. eob_branch <S2SV_ModStart> COEFF_CONTEXTS ] = <S2SV_ModEnd> counts. eob_branch,0
573,<S2SV_ModStart> pSelect -> pSrc ; assert ( pWalker -> pParse -> db -> mallocFailed ),0
574,<S2SV_ModStart> ; serv = svc_create_pooled <S2SV_ModEnd> ( & nfs4_callback_program,1
575,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
576,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
577,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
578,"<S2SV_ModStart> s ) { if (! TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) ) ) { <S2SV_ModEnd> ret = send <S2SV_ModStart> 0 ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> == EINTR ) ) ; } <S2SV_ModEnd> if ( ret",0
579,"<S2SV_ModStart> ( xIter = xml_first_attr <S2SV_ModEnd> ( xml ) <S2SV_ModStart> ( prop_name, ID_ATTR <S2SV_ModEnd> ) == 0 <S2SV_ModStart> } else { <S2SV_ModEnd> crm_trace ( ""Cannot <S2SV_blank> add <S2SV_blank> new <S2SV_blank> node <S2SV_blank> %s <S2SV_blank> at <S2SV_blank> %s"" <S2SV_ModStart> ; } } <S2SV_ModEnd> while ( cIter",0
580,<S2SV_ModStart> <S2SV_null> <S2SV_null> static SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> NULL ; return <S2SV_ModEnd> svc_ctx -> internal,0
581,<S2SV_ModStart> ptr ) ; array_init ( * current_param ) ; <S2SV_ModStart> ptr ) ; array_init ( * current_args ) ;,0
582,"<S2SV_ModStart> only_420 ) { <S2SV_ModEnd> int ret ; <S2SV_ModStart> ; int i ; _y4m -> chroma_fmt = VPX_IMG_FMT_I420 ; _y4m -> chroma_bps = 12 <S2SV_ModStart> = VPX_IMG_FMT_I420 ; <S2SV_ModEnd> if ( strcmp <S2SV_ModStart> -> chroma_fmt, VPX_IMG_FMT_I420 <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_fmt = VPX_IMG_FMT_I420 <S2SV_ModEnd> ; _y4m -> <S2SV_ModStart> -> chroma_bps = VPX_IMG_FMT_I420 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, VPX_IMG_FMT_I420 <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_bps = VPX_IMG_FMT_I420 <S2SV_ModEnd> ; _y4m -> <S2SV_ModStart> -> chroma_bps = VPX_IMG_FMT_I420 <S2SV_ModEnd> ; _y4m -> <S2SV_ModStart> -> chroma_fmt = VPX_IMG_FMT_I420 <S2SV_ModEnd> ; _y4m",0
583,"<S2SV_ModStart> buf ; { if ( strlen ( buf ) >= 60 ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; }",0
584,<S2SV_ModStart> ( ) { <S2SV_ModEnd> if ( read_xattrs_from_disk <S2SV_ModStart> == 0 ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( read_uids_guids <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( parse_exports_table <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( read_fragment_table <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( read_inode_table <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( read_directory_table <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_,0
585,<S2SV_ModStart> * createenv ( <S2SV_ModEnd> struct rule * <S2SV_ModStart> root ) ; <S2SV_ModEnd> if ( rule <S2SV_ModStart> ; } } <S2SV_ModEnd> return env ;,0
586,"<S2SV_ModStart> -> seg ; vpx_memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> -> base_qindex, cpi -> in_frame_q_adj_ratio <S2SV_ModEnd> [ segment ]",0
587,"<S2SV_ModStart> = make_type ( ""module"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""interactive"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""expression"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""suite"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""functiondef"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""asyncfunctiondef"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""classdef"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""return"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""delete"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""assign"" <S2SV_ModEnd>, stmt_type,",0
588,<S2SV_ModStart> } logfile_fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> S_IWGRP | S_IROTH ) <S2SV_ModStart> return ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart> 16 ) ; ),0
589,<S2SV_ModStart> ; } # else ( void ) cpi ; #,1
590,"<S2SV_ModStart> cinput ) { <S2SV_ModEnd> char * s <S2SV_ModStart>, * StartClean <S2SV_ModEnd> ; SetDefaults ( <S2SV_ModStart> t ++ ; <S2SV_ModEnd> if ( * <S2SV_ModStart> = 1 ; <S2SV_ModEnd> fprintf ( outfile <S2SV_ModStart> ( outfile, ""%s"", outputbuffer ) ; return ( 0 ) ; } } StartClean = outputbuffer ; nameobject = t ; while ( * t!='<S2SV_blank>'&& * t!= '\\t' || * t == '\\n' ) t ++ ; if ( ( strcmp ( nameobject, ""Curve"" ) == 0 ) || ( strcmp ( nameobject, ""Polygon"" ) == 0 ) || ( strcmp ( nameobject, ""FilledPolygon"" ) == 0 ) ) { if ( ( argbuf = ReadArray ( t, & num1, & num2 ) ) == 0 ) return ( - 1 ) ; if ( num2 - 1 <S2SV_ModEnd>!= 0 ) <S2SV_ModStart> ( stderr, ""%s: <S2SV_blank> Command <S2SV_blank> %s <S2SV_blank> should <S2SV_blank> have <S2SV_blank> no <S2SV_blank> arguments\\n"", axohelp, nameobject ) ; return ( - 1 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
591,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> int res ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { lower = NULL ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> int res ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { upper = NULL ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { step = NULL ; } * out = Slice ( lower, upper, step, arena ) ; if ( * out == NULL ) goto failed ; return 0 ; } isinstance = PyObject_IsInstance ( obj, ( PyObject",0
592,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
593,"<S2SV_ModStart> extack ) ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; return - EOPNOTSUPP ; } <S2SV_ModEnd> tos_off = proto <S2SV_ModStart> ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; return - EOPNOTSUPP <S2SV_ModEnd> ; } } <S2SV_ModStart>! match ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; return - EOPNOTSUPP ; } <S2SV_ModEnd> list_add ( & <S2SV_ModStart> knode ) ; kfree ( match ) ;",0
594,<S2SV_ModStart> ) ; } if ( stream -> config. cfg. g_pass == VPX_RC_ONE_PASS ) { <S2SV_ModStart> : VPX_RC_ONE_PASS ; } else { stream -> config. cfg. g_pass = VPX_RC_LAST_PASS ; } <S2SV_ModStart> ( pass ) { <S2SV_ModStart> stats ) ; },0
595,"<S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( data, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( new_data, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( new_data,",0
596,"<S2SV_ModStart> data_end ) { const <S2SV_ModStart>, tile_col ; <S2SV_ModEnd> uint8_t * end <S2SV_ModStart> = NULL ; <S2SV_ModEnd> assert ( tile_rows <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> aligned_cols ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) * aligned_cols <S2SV_ModEnd> ; for (",0
597,"<S2SV_ModStart> vp9_decoder_create ( const VP9EncoderConfig <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> pbi ) ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> = 1 ; vpx_init_dec <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ) ) ; vpx_memset ( & pbi -> ref_frame_map, - 1, sizeof ( pbi -> ref_frame_map ) ) ; pbi -> oxcf = * oxcf ; pbi -> ready_for_new_data = 1 ; pbi -> decoded_key_frame = 0 ; vp9_init_dequantizer ( cm ) ; vp9_loop_filter_init ( cm ) ; cm -> error. setjmp = 0 ; vp9_worker_init ( & pbi -> lf_worker ) ; <S2SV_ModStart> current_video_frame = 0 <S2SV_ModEnd> ; return pbi",0
598,"<S2SV_ModStart> dref ) { GF_LOG_DEBUG <S2SV_ModEnd> ( GF_LOG_ERROR, <S2SV_ModStart> GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" <S2SV_ModEnd> ) ) ;",0
599,<S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> -> opt ; <S2SV_ModEnd> cipso_v4_delopt ( &,0
600,"<S2SV_ModStart> tokens, const vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> do { const vpx_tree_index <S2SV_ModEnd> j = tree",1
601,"<S2SV_ModStart> = VPX_CODEC_OK ; pick_quickcompress_mode ( ctx, duration, deadline ) ; vpx_codec_pkt_list_init ( & ctx -> pkt_list ) ; if ( ( ( flags & VP8_EFLAG_NO_REF_LAST ) && ( flags & VP8_EFLAG_NO_REF_GF ) && ( flags & VP8_EFLAG_FORCE_GF ) ) || ( ( flags & VP8_EFLAG_NO_UPD_LAST ) && ( flags & VP8_EFLAG_NO_UPD_ARF ) && ( flags & VP8_EFLAG_FORCE_ARF ) ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_UPD_ARF | VP8_EFLAG_FORCE_GF | VP8_EFLAG_FORCE_ARF",0
602,"<S2SV_ModStart>, & len, 0",1
603,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
604,"<S2SV_ModStart> rc, const VP9EncoderConfig <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> ( int64_t ) oxcf <S2SV_ModEnd> -> av_per_frame_bandwidth *",0
605,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
606,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_superblock ( VP9_COMP <S2SV_ModStart> * cpi, <S2SV_ModEnd> int mi_row, <S2SV_ModStart> BLOCK_SIZE bsize ) { VP9_COMMON * const cm = & cpi -> common ; MACROBLOCK * const x = & cpi -> mb ; MACROBLOCKD * const xd = & x -> e_mbd ; MODE_INFO * * mi_8x8 = xd -> mi ; MB_MODE_INFO * mi = mi_8x8 [ 0 ] ; MB_MODE_CONTEXT * ctx = get_block_context ( x, bsize ) ; unsigned int segment_id = mbmi -> segment_id ; const int mis = cm -> mi_stride ; const int mi_width = num_8x8_blocks_wide_lookup [ bsize ] ; const int mi_height = num_8x8_blocks_high_lookup [ bsize ] ; x -> skip_recode =! x -> select_txfm_size && mbmi -> sb_type >= BLOCK_8X8 && cpi -> oxcf. allow_skip_recode",0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
608,"<S2SV_ModStart> range_max ) { size_t <S2SV_ModEnd> value ; int <S2SV_ModStart> position, zeroes <S2SV_ModEnd> ; char bits <S2SV_ModStart> gbc ) ; if ( get_bits_left ( gbc ) < zeroes ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits1 ( gbc ) ) { bits [ i ++ ] = '1' ; break ; } else { bits [ i ++ ] = '0' ; ++ zeroes ; } } if ( zeroes >= 32 ) { value = MAX_UINT_BITS ( 32 ) ; } else { value = get_bits_long ( gbc, zeroes ) ; for ( j = 0 ; j < zeroes ; j ++ ) bits [ i ++ ] = ( value >> ( zeroes - j - 1 ) & 1 )? '1' : '0' ; value += ( 1 << zeroes ) - 1 ; } if ( ctx -> trace_enable ) { bits [ i ] = 0 ; ff_cbs_trace_syntax_element",0
609,"<S2SV_ModStart> || strchr ( ""!#$%&\'*+-.^_`|^"" <S2SV_ModEnd>, c ) <S2SV_ModStart> || strchr ( ""!#$%&\'*+-.^_`|^"" <S2SV_ModEnd>, c ) <S2SV_ModStart> || strchr ( ""!#$%&\'*+-.^_`|^"" <S2SV_ModEnd>, c )",0
610,"<S2SV_ModStart>, packet -> <S2SV_ModEnd> http_origin. ptr",0
611,<S2SV_ModStart> 4 ) { if ( ( x + x ) > dds_info -> width || ( y + y ) > dds_info -> height ) return MagickFalse ;,0
612,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL ) <S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL )",1
613,<S2SV_ModStart> action ) { if ( w < 0 ) w = 0 ; if ( h < 0 ) h = 0 ; if ( w > 1 ) w = 1 ; if ( h > 1 ) h = 1 ; if ( w > 1 ) w = 1 ; if ( h > 1 ) h = 1 ; if ( w > 1 ) w = 1 ; if ( h > 1 ) h = 1 ; if ( w > 1 ) w = 1 ; if ( h > 1 ) h = 1 ; if ( w > 1 ) w = 1 ; if ( h > 1 ) w = 1 ; if ( h > 1 ) h = 1 ; if ( w > 1 ) w = 1 ; if ( h > 1 ) h = 1 ; if ( w > 1 ) w = 1 ; if ( h > 1 ) h = 1 ; if ( w > 1 ) w = 1 ; if ( h > 1 ) h = 1 ; if ( w > 1 ) w = 1 ; if ( h > 1 ) h = 1 ; if ( w > 1 ) w = 1 ; if ( h > 1 ) h = 1 ; if ( w > 1 ) w = 1 ; if ( w > 1 ) w =,0
614,"<S2SV_ModStart> ) ) { printf ( <S2SV_ModEnd> ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", x11 <S2SV_ModStart> y ) ; printf ( ""\\n"" ) ;",0
615,"<S2SV_ModStart> ( AUTODETECT_TAG, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU\\n"" <S2SV_ModEnd> ) ; Stream_Read_UINT32",0
616,"<S2SV_ModStart> recon_uv_stride, recon_y_stride, recon_uv_stride <S2SV_ModStart> recon_y_stride, recon_y_stride, recon_uv_stride <S2SV_ModStart> recon_uv_stride, recon_uv_stride, recon_y_stride, recon_uv_stride <S2SV_ModStart> recon_y_stride, recon_y_stride, recon_uv_stride <S2SV_ModStart> recon_uv_stride, recon_uv_stride, recon_uv_stride <S2SV_ModStart> recon_y_stride, recon_y_stride, recon_uv_stride <S2SV_ModStart> recon_uv_stride, recon_y_stride, recon_uv_stride <S2SV_ModStart> recon_uv_stride, recon_uv_stride, recon_y_stride, recon_uv_stride <S2SV_ModStart> recon_y_stride, recon_y_stride, recon_uv_stride, recon_uv_stride, recon_uv_stride <S2SV_ModStart> recon_uv_stride, recon_uv_stride, recon_y_stride, recon_uv_stride, recon_uv_stride, recon_uv_stride <S2SV_ModStart> recon_uv_stride, recon_uv_stride, recon_uv_stride, recon_",0
617,<S2SV_ModStart> -> b_multithreaded_rd ) { <S2SV_ModStart> mb_rows ) ; },0
618,<S2SV_ModStart> { if ( ( <S2SV_ModStart> xWantedSize > 0 ) && ( ( xWantedSize + xHeapStructSize ) > xWantedSize ) <S2SV_ModStart> 0x00 ) { if ( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize ) { mtCOVERAGE_TEST_MARKER ( ) ; } <S2SV_ModStart> portBYTE_ALIGNMENT_MASK ) ) ; xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ),0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,<S2SV_ModStart> s ) { int <S2SV_ModEnd> num_updates ; uint16 <S2SV_ModStart> __func__ ) ; if (! check_stream ( s ) ) { return ; },0
621,"<S2SV_ModStart> } else { ovalue = strim ( option, ""\\""\'"", MPR_TRIM_BOTH ) ; if ( smatch ( option, ""size"" ) ) { size = ( ssize ) getnum ( ovalue ) ; } else if ( smatch ( option, ""level"" ) ) { level = atoi ( ovalue ) ; } else if ( smatch ( option, ""backup"" ) ) { backup = atoi ( ovalue ) ; } else { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> ErrorLog <S2SV_blank> option <S2SV_blank> %s"", option ) ; } } else if ( smatch ( option, ""anew"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""stamp"" ) ) { stamp = httpGetTicks ( ovalue ) ; } } if ( size < ( 10 * 1000 ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Size <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small. <S2SV_blank> Must <S2SV_blank> be <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> 10K"" ) ; return MPR_ERR_BAD_SYNTAX ; } if ( path == 0",0
622,"<S2SV_ModStart> tx_size, vp9_coeff_stats coef_stats <S2SV_ModEnd> ) { vp9_coeff_probs_model <S2SV_ModStart> tx_size ] ; vpx_coeff_counts <S2SV_ModEnd> * coef_counts = <S2SV_ModStart> l ) { vpx_tree_probs_from_distribution <S2SV_ModEnd> ( vp9_coef_tree, <S2SV_ModStart> m ) coef_probs [ i ] [ j ] [ k ] [ l ] [ m ] = get_binary_prob ( coef_branch_ct [ i ] [ j ] [ k ] [ l ] [ 0 ], coef_branch_ct [ i ] [ j ] [ k ] [ l ] [ m ]",0
623,"<S2SV_ModStart> { } ; if (! access_ok ( VERIFY_READ, fd, F_OK ) ) return - EBADF <S2SV_ModEnd> ; r =",0
624,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static void <S2SV_ModEnd> su3000_frontend_attach ( struct <S2SV_ModStart> dvb_usb_adapter * d, struct dvb_frontend_state * state ) { <S2SV_ModEnd> u8 ibuf [ <S2SV_ModStart> 0 } ; <S2SV_ModEnd> d -> fe_adap <S2SV_ModStart> dvb_attach ( ds3000_attach <S2SV_ModEnd>, & su3000_ds3000_config <S2SV_ModStart> & su3000_ds3000_config, <S2SV_ModEnd> d -> dev <S2SV_ModStart> dev -> i2c_adap ) ; if ( d -> fe_adap [ 0 ]. fe == NULL ) return - EIO ; if ( dvb_attach ( ts2020_attach, d -> fe_adap [ 0 ]. fe, & dw3000_ts2020_config ) <S2SV_ModStart> - EIO ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
625,"<S2SV_ModStart>, vpx_codec_enc_cfg_t * enc_cfg <S2SV_ModEnd>, vpx_codec_flags_t flags <S2SV_ModStart> if ( ( enc_cfg <S2SV_ModEnd> -> init_flags & <S2SV_ModStart> } if ( enc_cfg <S2SV_ModEnd> -> priv ) <S2SV_ModStart> ) ctx -> enc_cfg <S2SV_ModEnd> -> iface =",0
626,"<S2SV_ModStart> stride, int mv_row, int mv_col, uint8_t * pred, struct scale_factors * scale, int x, int y ) { const int which_mv = 0 ; const MV mv = { mv_row, mv_col } ; const InterpKernel * const kernel = <S2SV_ModEnd> xd -> mi <S2SV_ModStart> mbmi. interp_filter <S2SV_ModEnd> ; enum mv_precision <S2SV_ModStart> MV_PRECISION_Q3 ; } vpx_build_inter_predictor <S2SV_ModEnd> ( y_mb_ptr, <S2SV_ModStart> y ) ; vpx_build_inter_predictor <S2SV_ModEnd> ( u_mb_ptr, <S2SV_ModStart> y ) ; vpx_build_inter_predictor <S2SV_ModEnd> ( v_mb_ptr, <S2SV_ModStart> y ) ; vpx_build_inter_predictor <S2SV_ModEnd> ( y_mb_ptr, <S2SV_ModStart> y ) ; vpx_build_inter_predictor <S2SV_ModEnd> ( v_mb_ptr, <S2SV_ModStart> y ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
627,"<S2SV_ModStart> = TRUE ; if ( strlen ( origbuf ) + 1 > BUFSZ ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> too <S2SV_blank> long"" ) ; return FALSE ; }",0
628,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> cJSON_CreateFloatArray ( double <S2SV_ModStart> ( ) ; if (! a ) return 0 ; <S2SV_ModStart> i ) { if (! ( <S2SV_ModStart> i ] ) ) ) return 0 <S2SV_ModStart> ; if ( <S2SV_ModEnd> i ) a,0
629,"<S2SV_ModStart> data_end ) { const int tile_cols = 1 << cm -> log2_tile_cols ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int num_workers = MIN ( pbi -> oxcf. max_threads, tile_cols ) ; TileBuffer tile_buffers [ 1 << 6 ] ; int n ; int final_worker = - 1 ; assert ( tile_cols <= ( 1 << 6 ) ) ; assert ( tile_rows == 1 ) ; ( void ) tile_rows ; if ( pbi -> num_tile_workers == 0 ) { const int num_threads = pbi -> oxcf. max_threads & ~ 1 ; int i ; CHECK_MEM_ERROR ( cm, pbi -> tile_workers, vpx_malloc ( num_threads * sizeof ( * pbi -> tile_workers ) ) ) ; for ( i = 0 ; i < num_threads ; ++ i ) { VP9Worker * const worker = & pbi -> tile_workers [ i ] ; ++ pbi -> num_tile_workers ; vp9_worker_init ( worker ) ; CHECK_MEM_ERROR ( cm, worker",0
630,<S2SV_ModStart> * 0x101 ; if (! ( <S2SV_ModStart> get4 ( ) ) ) ) return <S2SV_ModEnd> ; while ( <S2SV_ModStart> ( ) ; if (! ( <S2SV_ModStart> get4 ( ) ) ) return <S2SV_ModEnd> ; switch ( <S2SV_ModStart> ( ) ; if (! ( <S2SV_ModStart> get4 ( ) ) ) return <S2SV_ModEnd> ; break ; <S2SV_ModStart> ( ) ; if (! ( <S2SV_ModStart> get4 ( ) ) ) return <S2SV_ModEnd> ; break ; <S2SV_ModStart> ( ) ; if (! ( <S2SV_ModStart> get4 ( ) ) ) return <S2SV_ModEnd> ; break ; <S2SV_ModStart> ( ) ; if (! ( <S2SV_ModStart> get4 ( ) ) ) return <S2SV_ModEnd> ; break ; <S2SV_ModStart> ( ) ; if (! ( <S2SV_ModStart> get4 ( ) ) ) return <S2SV_ModEnd> ; break ; <S2SV_ModStart> ( ) ; if (! ( <S2SV_ModStart> get4 ( ) ) ) return <S2SV_ModEnd> ; break ; <S2SV_ModStart> ( ) ; if (! ( <S2SV_ModStart> get4 ( ) ) ) return <S2SV_ModEnd> ; break ; <S2SV_ModStart> ( ) ; if (! ( <S2SV_ModStart> get4 ( ) ) ) return <S2SV_ModEnd> ; break ; <S2SV_ModStart> ( ) ; if (! ( <S2SV_ModStart> get4 ( ) ) ) return <S2SV_ModEnd> ; break ; <S2SV_ModStart> ( ) ; if (! ( <S2SV_ModStart> get4 ( ) ) ) return <S2SV_ModEnd> ; break ; <S2SV_ModStart> ( ) ; if (! ( <S2SV_ModStart> get4,0
631,"<S2SV_ModStart> -> common ; VP9_COMP * rc = & cpi -> rc ; <S2SV_ModStart> = SEGMENT_DELTADATA ; <S2SV_ModEnd> for ( i <S2SV_ModStart> ++ ) { vpx_clear_system_state ( ) ; vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, 0 ) ; vpx_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q ) ; vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, 0 ) ; vpx_clear_system_state ( ) ; vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, 0 ) ; vpx_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q ) ; vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, qindex_delta ) ; vpx_set_segfeature ( seg, SEGMENT",0
632,"<S2SV_ModStart> -> error_code ) memcpy ( & <S2SV_ModStart> base. err_detail, <S2SV_ModEnd> error -> has_detail <S2SV_ModStart> error -> detail, sizeof ( ctx -> base. err_detail ) ) <S2SV_ModEnd> ; return error",0
633,"<S2SV_ModStart>, * ps_cur_poc ; if (! ps_dec -> s_cab_dec_env. pv_init_done ) return",0
634,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet ),0
635,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int getnum (,0
636,<S2SV_ModStart> GCSpropagate ) ; g -> gcstate = GCSdestroyed ;,0
637,<S2SV_ModStart> 0 ; else { ret = <S2SV_ModEnd> - EIO ; <S2SV_ModStart> - EIO ; goto err ; },0
638,"<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } <S2SV_ModEnd> memset ( buffer <S2SV_ModStart> buffer ) ; <S2SV_ModEnd> s_write ( c",0
639,"<S2SV_ModStart> remote_connection_s * connection, const char * server ) { <S2SV_ModEnd> int rc = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> int ret_ga ; <S2SV_ModStart> mainloop_fd_callbacks cib_fd_callbacks = <S2SV_ModEnd> connection -> socket <S2SV_ModStart> session = NULL <S2SV_ModEnd> ; ret_ga =",0
640,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi,",0
641,"<S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( bp + 26, sizeof ( struct icmp6_hdr ) ) ;",0
642,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command",0
643,"<S2SV_ModStart> Image * image <S2SV_ModEnd> ; register IndexPacket <S2SV_ModStart> length, padding <S2SV_ModEnd>, version, <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { DestroyImageList ( image ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { DestroyImageList ( image ) ; return ( DestroyImageList ( image ) ) ; }",0
644,"<S2SV_ModStart> ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SCC <S2SV_blank> marker\\n"" ) ; return - 1 ; } if (! ( qcd = jas_qcd_create ( qcd ) ) ) { jas_eprintf ( ""cannot <S2SV_blank> create <S2SV_blank> SCC <S2SV_blank> marker\\n"" ) ; return - 1 ; } if (! ( qcd = jas_qcd_create ( qcd ) ) ) { jas_eprintf ( ""cannot <S2SV_blank> create <S2SV_blank> SCC <S2SV_blank> marker\\n"" ) ; return - 1 ; } if (! ( qcd = jas_qcd_create ( qcd ) ) ) { jas_eprintf ( ""cannot <S2SV_blank> create <S2SV_blank> SCC <S2SV_blank> marker\\n"" ) ; return - 1 ; } if (! ( qcd = jas_qcd_create ( qcd ) ) ) { jas_eprintf ( ""cannot <S2SV_blank> create <S2SV_blank> SCC <S2SV_blank> marker\\n"" ) ; return - 1 ; } if (! ( qcd = jas_qcd_create ( qcd ) ) ) { jas_eprintf ( ""cannot <S2SV_blank> create <S2SV_blank> SCC <S2SV_blank> marker\\n"" ) ;",0
645,<S2SV_ModStart> = '\\0' ; if (! new_args ) { free ( new_modes ) ; free ( new_args ) ; return ; } <S2SV_ModStart> = '\\0' ; if (! new_modes ) { free ( new_args ) ; free ( str_modes ) ; free ( new_args ) ; return ; } <S2SV_ModStart> = '\\0' ; if (! new_args ) { free ( new_modes ) ; free ( new_args ) ; return ; },0
646,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> - m + vpx_read_bit <S2SV_ModEnd> ( r )",1
647,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
648,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> REFERENCE_MODE mode = vpx_read <S2SV_ModEnd> ( r,",0
649,"<S2SV_ModStart>! stream ) { <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; } <S2SV_ModStart> ( res ) { <S2SV_ModStart> ) ) ; } <S2SV_ModStart> stereo_fmt = STEREO_FORMAT_MONO <S2SV_ModEnd> ; # if",0
650,"<S2SV_ModStart> nd_opt_len ) ; if ( op -> nd_opt_len < 4 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u), <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""unknown"", op -> nd_opt_type ), op -> nd_opt_type, op -> nd_opt_len << 3 ) ) ; goto trunc ; }",0
651,<S2SV_ModStart> -> root_node = ( yr_re_node * ),0
652,"<S2SV_ModStart> ; ret = db_var_expand <S2SV_ModEnd> ( path, <S2SV_ModStart> 0 ) { auth_request_log_debug <S2SV_ModEnd> ( iter -> <S2SV_ModStart>, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"" <S2SV_ModEnd>, key ->",0
653,<S2SV_ModStart> -> level = 1 <S2SV_ModEnd> ; tok ->,0
654,<S2SV_ModStart> maxBitrate ; } av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo = NULL ;,0
655,"<S2SV_ModStart> ASSERT ( dpbSize ) ; memset ( dpb, 0, sizeof ( dpbStorage_t )",0
656,"<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> (! sock ||! addr ||! addrlen ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } <S2SV_ModEnd> if ( addrlen <S2SV_ModStart> ( addrlen ) { <S2SV_ModStart> * addrlen ; addrlen_out = * addrlen ; } <S2SV_ModStart>, addrlen_in, & addrlen_out <S2SV_ModEnd> )!= OE_OK <S2SV_ModStart> ) ; } * addrlen = addrlen_out ;",0
657,,1
658,"<S2SV_ModStart> FALSE ; } if (! <S2SV_ModStart>, s ) ) return FALSE",1
659,<S2SV_ModStart> ipv6_pinfo * np <S2SV_ModEnd> ; struct ipv6_txoptions <S2SV_ModStart> ) ; } np = inet6_sk ( sk ) ;,0
660,"<S2SV_ModStart> ; unsigned int <S2SV_ModEnd> found, upx_success <S2SV_ModStart> size_t fsize ; size_t <S2SV_ModEnd> valign, falign <S2SV_ModStart>, hdr_size, <S2SV_ModEnd> j ; struct <S2SV_ModStart> j ) ; if ( j >= sizeof ( exe_sections ) ) { cli_errmsg ( ""cli_scanpe: <S2SV_blank> cli_exe_sections <S2SV_blank> == <S2SV_blank> NULL\\n"" ) ; return CL_ENULLARG ; }",0
661,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR <S2SV_ModEnd>, EPCR_EPOS | <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR <S2SV_ModEnd> ) & EPCR_ERRE <S2SV_ModStart> } dm9000WriteReg ( DM9000_EPCR <S2SV_ModEnd>, EPCR_EPOS ) <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPDRH <S2SV_ModEnd> ) << 8 <S2SV_ModStart> | dm9000ReadReg ( DM9000_EPDRL <S2SV_ModEnd> ) ; }",0
662,"<S2SV_ModStart> pcmk_ok ) { cib -> state = cib_connected_command ; cib -> type = cib_command ; <S2SV_ModStart> pcmk_ok ) { cib -> state = cib_connected_callback ; cib -> type = cib_command ; <S2SV_ModStart> callback ) ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> callback. token, CRM_OP_REGISTER, NULL, NULL, NULL, 0, NULL ) ; crm_xml_add ( hello, F_CIB_CLIENTNAME, name ) ; crm_send_remote_msg ( private -> command. session, hello, private -> command. encrypted ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { fprintf ( stderr, ""%s: <S2SV_blank> Opened <S2SV_blank> connection <S2SV_blank> to <S2SV_blank> %s:%d\\n"", name, private -> server, private -> port ) ; cib -> state = cib_connected_command ; cib -> type = cib_command ; } else { fprintf ( stderr, ""%s: <S2SV_blank> Connection <S2SV_blank> to <S2SV_blank> %s:%d <S2SV_blank> failed: <S2SV_blank>",0
663,"<S2SV_ModStart> = ubuf ; memset ( & address, 0, sizeof ( address ) ) ;",0
664,"<S2SV_ModStart> ; int num00 = 0, tmp_err = 0, n = 0, sr = 0 ; int step_param = 3 ; int further_steps = ( MAX_MVSEARCH_STEPS - 1 ) - step_param ; const BLOCK_SIZE bsize = xd -> mi [ 0 ] -> mbmi. sb_type ; vp9_variance_fn_ptr_t v_fn_ptr = cpi -> fn_ptr [ bsize ] ; int new_mv_mode_penalty = 256 ; const int quart_frm = MIN ( cpi -> common. width, cpi -> common. height ) ; while ( sr < ( MAX_MVSEARCH_STEPS - 1 ) ) ++ sr ; step_param += sr ; further_steps -= sr ; v_fn_ptr. vf = get_block_variance_fn ( bsize ) ; num00 = <S2SV_ModEnd> cpi -> diamond_search_sad <S2SV_ModStart>, & ref_mv_full, & tmp_mv, step_param, x -> sadperbit16, & num00, & v_fn_ptr, x -> nmvjointcost, x -> mvcost",0
665,<S2SV_ModStart> ; if ( <S2SV_ModEnd> hivex_write ( h,0
666,"<S2SV_ModStart> ; # endif if ( child -> is_default == NOT_SET ) { ap_log_perror ( APLOG_MARK, APLOG_STARTUP | APLOG_NOERRNO, 0, mp, ""No <S2SV_blank> default <S2SV_blank> directory <S2SV_blank> config <S2SV_blank> is <S2SV_blank> set"" ) ; return NULL ; }",0
667,"<S2SV_ModStart>, one, <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart> MagickFalse ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
668,<S2SV_ModStart> ( r = <S2SV_ModEnd> sshbuf_put_string ( b,0
669,"<S2SV_ModStart> ) ) { ovalue = sclone ( sclone ( value ) ) ; <S2SV_ModStart>, & ovalue <S2SV_ModEnd> ) ; if",0
670,"<S2SV_ModStart> client = user_data ; crm_trace ( ""Cleaning <S2SV_blank> up <S2SV_blank> after <S2SV_blank> client <S2SV_blank> disconnect: <S2SV_blank> %s/%s"", crm_str ( client -> name ), client -> id ) ; if ( client -> id!= NULL ) { if (! g_hash_table_remove ( client_list, client -> id ) ) { crm_err ( ""Client <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> the <S2SV_blank> hashtable"", client -> name ) ; } } crm_trace ( ""Destroying <S2SV_blank> %s <S2SV_blank> (%p)"", client -> name, user_data ) ; num_clients -- ; crm_trace ( ""Num <S2SV_blank> unfree\'d <S2SV_blank> clients: <S2SV_blank> %d"", num_clients ) <S2SV_ModStart> client -> name <S2SV_ModEnd> ) ; free <S2SV_ModStart> user ) ; <S2SV_ModEnd> free ( client",0
671,<S2SV_ModStart> * uv ; if ( thread -> twups!= NULL ) { <S2SV_ModStart> next ) { <S2SV_ModEnd> if (! <S2SV_ModStart> } } } } },0
