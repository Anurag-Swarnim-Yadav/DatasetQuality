,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
1,"<S2SV_ModStart> skb ) ; unfrag_ip6hlen = min_t ( int, unfrag_ip6hlen, skb -> len - offset ) ;",0
2,<S2SV_ModStart> 0 ) ; if ( writer -> stco ),0
3,"<S2SV_ModStart> item ) { return cJSON_GetItemRecursive ( array, item, 0, 0 ) <S2SV_ModEnd> ; } <S2SV_null>",0
4,"<S2SV_ModStart> u64 nr, <S2SV_ModEnd> struct pt_regs * <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",1
5,<S2SV_ModStart> EXT4_EXTENTS_FLAG ) { <S2SV_ModEnd> struct grub_ext4_extent_header * <S2SV_ModStart> leaf ) { <S2SV_ModEnd> return - 1 <S2SV_ModStart> ; if ( ( fileblock + grub_le_to_cpu16 ( ext [ i ]. len ) ) > <S2SV_ModEnd> grub_le_to_cpu16 ( ext <S2SV_ModStart> ]. len <S2SV_ModEnd> ) return 0 <S2SV_ModStart> return 0 ; <S2SV_ModEnd> } else { <S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
6,"<S2SV_ModStart> fdct16 ( const tran_low_t * in, tran_low_t * out <S2SV_ModEnd> ) { int <S2SV_ModStart> ] ) { tran_high_t step1 [ 16 ] ; tran_high_t step2 [ 16 ] ; tran_high_t step3 [ 16 ] ; tran_low_t input [ 16 <S2SV_ModEnd> ] ; int <S2SV_ModStart> ] ; int temp0, temp1, temp2 ; int temp0, temp1, temp2 ; int temp0, temp1, temp2 ; int temp0, temp1, temp2 ; int temp0, temp1, temp2 ; int temp0, temp1, temp2 ; int temp0, temp1, temp2 ; int temp0, temp1, temp2 ; int temp0, temp1, temp2 ; int temp0, temp1, temp2 ; int temp0, temp1, temp2 ; int temp0, temp1, temp2 ; int temp0, temp1, temp2 ; int temp0, temp1, temp2 ; int temp0, temp1, temp2 ; int temp0, temp1, temp2 ; int temp0, temp1, temp2 ; int temp0, temp1,",0
7,<S2SV_ModStart> ; if ( hlen > 0 &&,0
8,"<S2SV_ModStart> void search_filter_level ( VP9_COMMON * const cm, struct loopfilter * lf, int min_filter_level, int max_filter_level, int filt_direction, int filt_mid, int filter_step, int best_err, int filt_best, int filt_direction, int best_err ) { <S2SV_ModEnd> int partial_frame ) <S2SV_ModStart> partial_frame ) { <S2SV_ModEnd> const YV12_BUFFER_CONFIG * <S2SV_ModStart> * sd, <S2SV_ModEnd> cm -> common <S2SV_ModStart> cm -> common <S2SV_ModEnd> ; const int <S2SV_ModStart> ) ; int <S2SV_ModEnd> best_err ; int <S2SV_ModStart> ) ; int <S2SV_ModEnd> ss_err [ MAX_LOOP_FILTER <S2SV_ModStart> / 4 ; <S2SV_ModEnd> while ( filter_step <S2SV_ModStart> min_filter_level ) ; <S2SV_ModEnd> int bias = <S2SV_ModStart> * filter_step ; <S2SV_ModEnd> if ( cpi <S2SV_ModStart> 0 ) { int <S2SV_ModStart> partial_frame ) ; int <S2SV_ModStart> } else { int <S2SV_ModStart> } } } }",0
9,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 2, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",0
10,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ++ i ) vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( usehp ) vpx_write <S2SV_ModEnd> ( w,",1
11,<S2SV_ModStart> -> rxBlockSzx = COAP_CLIENT_DEFAULT_RX_BLOCK_SIZE <S2SV_ModEnd> ; else if <S2SV_ModStart> -> rxBlockSzx = COAP_CLIENT_DEFAULT_RX_BLOCK_SIZE <S2SV_ModEnd> ; else if <S2SV_ModStart> -> rxBlockSzx = COAP_CLIENT_DEFAULT_RX_BLOCK_SIZE <S2SV_ModEnd> ; else if <S2SV_ModStart> -> rxBlockSzx = COAP_CLIENT_DEFAULT_RX_BLOCK_SIZE <S2SV_ModEnd> ; else if <S2SV_ModStart> -> rxBlockSzx = COAP_CLIENT_DEFAULT_RX_BLOCK_SIZE <S2SV_ModEnd> ; else if <S2SV_ModStart> -> rxBlockSzx = COAP_CLIENT_DEFAULT_RX_BLOCK_SIZE <S2SV_ModEnd> ; else if <S2SV_ModStart> -> rxBlockSzx = COAP_CLIENT_DEFAULT_RX_BLOCK_SIZE <S2SV_ModEnd> ; else if <S2SV_ModStart> -> rxBlockSzx = COAP_CLIENT_DEFAULT_RX_BLOCK_SIZE <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> rxBlockSzx > COAP_CLIENT_MAX_MAX_BLOCK_SIZE ) request -> rxBlockSzx = COAP_CLIENT_MAX_MAX_BLOCK_SIZE <S2SV_ModEnd> ; osReleaseMutex (,0
12,"<S2SV_ModStart> ) dat ; u_int i ; <S2SV_ModStart> ptr ++ ; i = EXTRACT_16BITS ( ptr ) ; if ( i < length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ( ndo, ""%04x <S2SV_blank> "", i <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ) ) ; if ( i + 1 > length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ( length > 6 <S2SV_ModEnd> ) { ND_PRINT <S2SV_ModStart> ) ptr, 6 <S2SV_ModEnd> ) ; }",0
13,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> construct_get_dest_keyring ( struct <S2SV_ModStart> * authkey ; int ret ; <S2SV_ModStart> dest_keyring ) ; ret = 0 ; goto out ; } else <S2SV_ModEnd> switch ( cred <S2SV_ModStart> ) ; } out : return ret ;,0
14,<S2SV_ModStart> = create_spnego_ctx ( 0,0
15,<S2SV_ModStart> int len ; # ifdef HAVE_LOCALTIME <S2SV_ModStart> t ) ; # else tm = localtime_r ( & t ) ; # endif,0
16,"<S2SV_ModStart> length ) ; if ( strlen ( password ) > MAXPASS ) { fprintf ( stderr, ""Password <S2SV_blank> too <S2SV_blank> long\\n"" ) ; exit ( EXIT_FAILURE ) ; }",0
17,<S2SV_ModStart> e == p || e - p > HOST_NAME_MAX,0
18,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",1
19,<S2SV_ModStart> = 0 ; if (! <S2SV_ModStart> & timeout ) ) return false,0
20,"<S2SV_ModStart> detect_transition_to_still ( struct twopass_data <S2SV_ModEnd> * twopass, <S2SV_ModStart> last_decay_rate ) { <S2SV_ModEnd> if ( frame_interval <S2SV_ModStart> ; if ( still_interval > MIN_STILL_INTERVAL <S2SV_ModEnd> && loop_decay_rate >= <S2SV_ModStart> j ; const TWO_PASS <S2SV_ModEnd> * position = <S2SV_ModStart> * position = & <S2SV_ModStart> { if (! <S2SV_ModStart> twopass, & tmp_next_frame, & <S2SV_ModStart> } reset_fpf_position ( & <S2SV_ModStart> j == still_interval &&! trans_to_still ) { <S2SV_ModEnd> trans_to_still = 1 <S2SV_ModStart> = 1 ; }",0
21,"<S2SV_ModStart> inode ) ) { if ( io -> offset + size > i_size_read ( inode ) ) { printk ( KERN_EMERG ""%s: <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, inode -> i_ino ) ; return ret ; } <S2SV_ModStart> size ) ; }",0
22,"<S2SV_ModStart> alg ) { <S2SV_ModEnd> if (! <S2SV_ModStart> CRYPTO_ALG_NEED_FALLBACK ) ) { <S2SV_ModStart> name ) ; if (! try_module_get ( name ) ) { pr_err ( ""failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> module <S2SV_blank> %s: <S2SV_blank> %d\\n"", name, - EBUSY ) ; return ERR_PTR ( - EBUSY ) ; } }",0
23,<S2SV_ModStart> = GIT_PKT_NG ; if ( len < 3 ) goto out_err ; <S2SV_ModStart> += 3 ; len -= 3 ; <S2SV_ModStart>'<S2SV_blank>') ) || len > GIT_PKT_NG_MAX_LEN <S2SV_ModStart> = '\\0' ; len -= 1 ; <S2SV_ModStart> + 1 ; len -= 1 ; <S2SV_ModStart> '\\n' ) ) || len > GIT_PKT_NG_MAX_LEN,0
24,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> BYTE flags ; UINT32 <S2SV_ModEnd> length ; Stream_Read_UINT32 <S2SV_ModStart> = NEGO_STATE_FINAL ; if ( Stream_GetRemainingLength ( s ) < length ) { WLog_ERR ( TAG, ""RDP_NEG_REQ: <S2SV_blank> RemainingLength: <S2SV_blank> %u <S2SV_blank> less <S2SV_blank> than <S2SV_blank> the <S2SV_blank> requested <S2SV_blank> length: <S2SV_blank> %u"", Stream_RemainingLength ( s ), length ) ; return ; }",0
25,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; if (,0
26,"<S2SV_ModStart> mntent, path, false",0
27,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } io -> io_cleanup = mem_cleanup ;,1
28,<S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ) pixel & <S2SV_ModEnd> value + 0.5 <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ) pixel << <S2SV_ModEnd> value + 0.5,0
29,"<S2SV_ModStart> ) ) ; ret &= btif_config_set_int ( bdstr, ""BTIF_CONFIG_FORCE_BT_WRITE"", ( int ) BTIF_CONFIG_FORCE_BT_WRITE ) ;",0
30,<S2SV_ModStart> vpx_codec_enc_cfg_map_t * map ; unsigned int max_usage = ( unsigned int ) ( INT_MAX - 1 ) <S2SV_ModStart>. cfg_maps ; ( <S2SV_ModStart> usage >= 0 ) && ( map -> usage < max_usage ),0
31,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
32,"<S2SV_ModStart> void show_progress ( uint64_t frame_out, <S2SV_ModStart> dx_time ) { if ( frame_out > 0 )",0
33,"<S2SV_ModStart> ; if ( mysql_num_fields ( svsock ) < 1 ) { do_error ( sth, JW_ERR_INTERNAL, ""MySQL <S2SV_blank> query <S2SV_blank> has <S2SV_blank> no <S2SV_blank> fields"", NULL ) ; return Nullav ; } if (",0
34,"<S2SV_ModStart> NO_ERROR ; } if ( ancillary -> txAncillaryLength > ENC28J60_TX_ANC_THRESHOLD ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_INVALID_LENGTH ; } <S2SV_ModStart> ( interface, ENC28J60_ECON, ENC28J60_ECON_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_ETXSTH <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXSTL <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC28J60_EWRPTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60",0
35,<S2SV_ModStart> ; value = ast2obj_text <S2SV_ModEnd> ( o -> <S2SV_ModStart> ; value = ast2obj_text <S2SV_ModEnd> ( o ->,0
36,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( access ( <S2SV_ModStart> == 0 ) && ( file_exists ( page ) == 0 ) ) <S2SV_ModStart> ; if ( <S2SV_ModEnd> ( unlink ( <S2SV_ModStart> == 0 ) && ( file_exists ( page ) == 0 ) <S2SV_ModStart> ; if ( <S2SV_ModEnd> ( access ( <S2SV_ModStart> == 0 ) && ( file_exists ( page ) == 0 ),0
37,"<S2SV_ModStart> low_var_thresh, int uv_stride, int uv_stride, int <S2SV_ModStart> = source -> uv_width <S2SV_ModEnd> >> 4 ; <S2SV_ModStart> = source -> uv_height <S2SV_ModEnd> >> 4 ; <S2SV_ModStart> pp_limits_buffer ; ; <S2SV_ModEnd> ( void ) <S2SV_ModStart> ) flag ; memset <S2SV_ModEnd> ( limits, <S2SV_ModStart> 16 ) ; vp8_post_proc_down_and_across_mb_row <S2SV_ModEnd> ( source -> <S2SV_ModStart> 8 ) ; vp8_post_proc_down_and_across_mb_row <S2SV_ModEnd> ( source -> <S2SV_ModStart> ; } } }",0
38,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; error = mb2_cache_entry_alloc ( ext4_mb_cache, GFP_NOFS, & ce ) ; if ( error ) return ; <S2SV_ModEnd> error = mb_cache_entry_insert <S2SV_ModStart> error ) { mb2_cache_entry_free ( ext4_mb_cache, <S2SV_ModEnd> ce ) ; <S2SV_ModStart> hash ) ; mb2_cache_entry_release <S2SV_ModEnd> ( ce )",0
39,<S2SV_ModStart> ) ) ; * code = 200 ; * rlen = 0 ;,0
40,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> return ip_options_get_finish (",0
41,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|truncated]"" <S2SV_ModEnd> ) ) ;",0
42,"<S2SV_ModStart> ) N_ ( ""E530: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'keybinding\' <S2SV_blank> in <S2SV_blank> a <S2SV_blank> non-interactive <S2SV_blank> mode"" <S2SV_ModEnd> ) ; else",0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode <S2SV_ModStart>, & new_mode, & acl ) ; if ( ret <S2SV_ModEnd> ) goto out",0
44,"<S2SV_ModStart> size_t size ; size_t cps ; <S2SV_ModStart> / 8 ; cps = cmpt -> cps_ ; <S2SV_ModStart> ( cmpt -> cps_, cps <S2SV_ModEnd>, & size",0
45,<S2SV_ModStart> dp == datalen || ( op & ASN1_OP__MATCHES_TAG && flags & FLAG_INDEFINITE_LENGTH ),0
46,"<S2SV_ModStart> * req, u32 acl_len, <S2SV_ModStart> size_t * acl_len, u32 * hdr_len <S2SV_ModStart> int status ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> xdr, OP_GETATTR, hdr_len <S2SV_ModStart> attrlen, & hdr_len <S2SV_ModEnd> ) )!= <S2SV_ModStart> recvd ) { * hdr_len = hdrlen ; <S2SV_ModStart> attrlen ) ; <S2SV_ModEnd> } else status",0
47,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
48,<S2SV_ModStart> ) ) { if ( snumber ( auth ) ) { <S2SV_ModStart> ; } } } else { owner = auth ; },0
49,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> addr = VPX_MALLOC_L <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; <S2SV_ModEnd> if ( addr,0
50,"<S2SV_ModStart> int res ; unsigned <S2SV_ModStart> inodes ) ; unsigned <S2SV_ModStart> indexes ] ; if ( indexes > MAX_EXPORT_TABLE_SIZE ) { ERROR ( ""parse_exports_table: <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u) <S2SV_blank> for <S2SV_blank> export <S2SV_blank> table\\n"", MAX_EXPORT_TABLE_SIZE ) ; return FALSE ; }",0
51,<S2SV_ModStart> ; } else { <S2SV_ModStart> p1 ) ; },0
52,<S2SV_ModStart> = 0 ; int is_vp8_encoder = 0 ; int is_vp9_encoder = 0 ; <S2SV_ModStart> ; # endif is_vp8_encoder = 1 ; <S2SV_ModStart> } if ( is_vp8_encoder ) { config -> cfg. g_out_fn = NULL ; } else if ( <S2SV_ModStart> } if ( is_vp9_encoder ) { config -> cfg. g_out_fn = NULL ; } else if (,0
53,"<S2SV_ModStart> } if ( c -> opt -> option. client ) { if ( c -> opt -> redirect_addr. names ) return 1 ; SSL_SESSION * sess = SSL_get1_session ( c -> ssl ) ; if ( sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } } if ( c -> opt -> option. client || c -> opt -> protocol ) return 0 ; if ( c -> opt -> option. client || c -> opt -> protocol ) return 0 ; } else { if ( c -> opt -> redirect_addr. names ) return 1 ; if ( c -> opt -> option. client || c -> opt -> protocol ) return 0 ; if ( c -> opt -> redirect_addr. names ) return 1 ; return 0 ; } } if ( c -> opt -> option. client || c -> opt -> protocol ) return 0 ; if ( c -> opt -> redirect_addr. names ) return 1 ; if ( c -> opt -> option",0
54,"<S2SV_ModStart> ; if ( crypto_memneq <S2SV_ModEnd> ( cmac,",0
55,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> const uint64_t bits_used <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> -= bits_used ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
56,"<S2SV_ModStart> EOFOp 0x07 char * magick_buffer <S2SV_ModEnd> ; Image * <S2SV_ModStart> ) ) ; magick_buffer = ( char * ) MagickCalloc ( 12, sizeof ( char ) ) ; <S2SV_ModStart>, 2, magick_buffer <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart>. x = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. y = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. columns = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. rows = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. color = ReadBlobByte <S2SV_ModEnd> ( image ) <S2SV_ModStart>. color = ReadBlobByte <S2SV_ModEnd> ( image ) <S2SV_ModStart>. color = ReadBlobByte <S2SV_ModEnd> ( image ) <S2SV_ModStart>. color = ReadBlobByte <S2SV_ModEnd> ( image ) <S2SV_ModStart>. color = ReadBlobByte <S2SV_ModEnd> ( image ) <S2SV_ModStart>. color = ReadBlobByte <S2SV_ModEnd> ( image ) <S2SV_ModStart>. color = ReadBlobByte <S2SV_ModEnd> ( image ) <S2SV_ModStart>. color = ReadBlobByte <S2SV_ModEnd> ( image ) <S2SV_ModStart>. color = ReadBlobByte <S2SV_ModEnd> ( image ) <S2SV_ModStart>. color = ReadBlobByte <S2SV_ModEnd> ( image ) <S2SV_ModStart>. color = ReadBlobByte <S2SV_ModEnd> ( image ) <S2SV_ModStart>. color = ReadBlobByte",0
57,"<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> altsetting [ 0 ]. desc. bNumEndpoints < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; error = - EINVAL ; goto err_free_urb ; }",1
58,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
59,"<S2SV_ModStart> * dir = ""/tmp"" <S2SV_ModEnd> ; if (",0
60,<S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; },0
61,"<S2SV_ModStart> ) ) { if ( narg == NULL ) { addreply_noformat ( 500, ""?"" ) ; continue ; }",0
62,"<S2SV_ModStart> void vp9_setup_dst_planes ( VP9_COMP * const c, <S2SV_ModStart> mi_col ) { const <S2SV_ModStart> const buffers [ 8 <S2SV_ModEnd> ] = { <S2SV_ModStart> const int strides [ 8 <S2SV_ModEnd> ] = { <S2SV_ModStart> i ) { const <S2SV_ModStart> struct macroblockd_plane * <S2SV_ModEnd> pd = &",0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,"<S2SV_ModStart> == READ ) return ocfs2_read_lock_file ( file, inode, iter ) <S2SV_ModEnd> ; else get_block <S2SV_ModStart> else get_block = ocfs2_dio_read_lock <S2SV_ModEnd> ; return __blockdev_direct_IO",0
65,<S2SV_ModStart> ; if ( fgetc ( f )!= '\\n' ) { if ( <S2SV_ModStart> ; } } },0
66,"<S2SV_ModStart> n ) { <S2SV_ModEnd> char * str <S2SV_ModStart> * str ; <S2SV_ModEnd> assert ( expr_end <S2SV_ModStart> expr_start == ':' ) ; return fstring_compile_expr_ex ( expr_start, expr_end, c, n, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
67,"<S2SV_ModStart> string ) { return cJSON_GetChild ( object, string, 0 ) <S2SV_ModEnd> ; } <S2SV_null>",0
68,<S2SV_ModStart> size ) ; if ( px -> ft == NULL ) { return FALSE ; },0
69,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ;",0
70,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
71,"<S2SV_ModStart> int i ; const <S2SV_ModStart> alpha_buffer } ; # if CONFIG_VP9_HIGHBITDEPTH if ( src -> depth > 8 ) { vpx_fatal ( ""Depth <S2SV_blank> too <S2SV_blank> large <S2SV_blank> for <S2SV_blank> pre-planes\\n"" ) ; return ; } # endif",0
72,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; for ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> unlock : sock_put,0
73,<S2SV_ModStart> ) ) ; if ( cpi -> mb_activity_map == NULL ) return ;,0
74,<S2SV_ModStart> user ) { struct ipmi_dev * dev = user -> dev ; <S2SV_ModStart> _ipmi_destroy_user ( user ) ; mutex_lock ( & dev -> data_mutex,0
75,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> sl = strlen,1
76,"<S2SV_ModStart> * for_ch ; <S2SV_ModEnd> REQ ( n <S2SV_ModStart> comp_for ) ; for ( ; ; ) { <S2SV_ModEnd> if ( TYPE <S2SV_ModStart> == ASYNC ) <S2SV_ModEnd> is_async = 1 <S2SV_ModStart> = 1 ; <S2SV_ModEnd> for_ch = CHILD <S2SV_ModStart> ( n, 2 <S2SV_ModEnd> + is_async ) <S2SV_ModStart> ( n, 4 <S2SV_ModEnd> + is_async ) <S2SV_ModStart> ( n, 5 <S2SV_ModEnd> + is_async ) <S2SV_ModStart> ( n, 6 <S2SV_ModEnd> + is_async ) <S2SV_ModStart> ( n, 7 <S2SV_ModEnd> + is_async ) <S2SV_ModStart> ( n, 7 <S2SV_ModEnd> + is_async ) <S2SV_ModStart> ( n, 7 <S2SV_ModEnd> + is_async ) <S2SV_ModStart> ( n, 7 <S2SV_ModEnd> + is_async ) <S2SV_ModStart> ( n, 7 <S2SV_ModEnd> + is_async ) <S2SV_ModStart> ( n, 7 <S2SV_ModEnd> + is_async ) <S2SV_ModStart> ( n, 7 <S2SV_ModEnd> + is_async ) <S2SV_ModStart> ( n, 7 <S2SV_ModEnd> + is_async ) <S2SV_ModStart> ( n, 7 <S2SV_ModEnd> + is_async )",0
77,<S2SV_ModStart> NULL ; } if ( src -> curframe > BPF_MAX_FUNC_FRAMES ) return - EINVAL ;,0
78,"<S2SV_ModStart> * cpi, vpx_writer * w, <S2SV_ModStart> * mi_8x8, int mi_stride, int left_stride <S2SV_ModEnd> ) { const <S2SV_ModStart> = mi_8x8 [ <S2SV_ModEnd> mi_stride ] ; <S2SV_ModStart> -> left_available? mi_stride <S2SV_ModEnd> [ - 1 <S2SV_ModStart> segment_id ) ; if ( left_stride == BLOCK_8X8 ) { write_skip ( cpi, mi, w ) ; } else { write_skip ( cpi, mi, w ) ; } <S2SV_ModEnd> if ( bsize <S2SV_ModStart> == TX_MODE_SELECT ) { write_selected_tx_size ( cpi, mi -> tx_size, bsize, w ) ; } else { write_intra_mode ( w, mi -> bmi [ 0 ]. as_mode, get_y_mode_probs ( mi, above_mi, left_mi, 0 ) ) ; } } else { write_skip ( cpi, mbmi -> segment_id, mi, w ) ; } if ( bsize >= BLOCK_8X8 && cm -> tx_mode == TX_MODE_SELECT ) { write_selected_tx_size ( cpi, mbmi -> tx_",0
79,<S2SV_ModStart> maxn ) { int i ; <S2SV_ModStart> ; # endif for ( i = 0 ; i < n ; i ++ ) { if ( actions [ i ]. SWF_ACTIONRECORD. ActionCode == SWF_ACTION_END ) { return 0 ; } },0
80,<S2SV_ModStart> ) ) ; ND_TCHECK ( len ) ;,0
81,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
82,<S2SV_ModStart> zArg ) { assert ( pTable -> nModuleArg < 2 ) ; <S2SV_ModStart> * ) * <S2SV_ModEnd> pTable -> nModuleArg <S2SV_ModStart> pTable -> nModuleArg <S2SV_ModEnd> ; char *,0
83,<S2SV_ModStart> j ] ; if ( j < 0 ) { j = 0 ; },0
84,<S2SV_ModStart> -> dmin ; if ( ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { <S2SV_ModStart> p ) ; },0
85,"<S2SV_ModStart> bfq_idle_slice_timer_body ( struct bfq_sched_data * sched_data <S2SV_ModEnd> ) { struct <S2SV_ModStart> bfq_data * bfqd <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> long flags ; struct bfq_queue * bfqq = sched_data -> bfqq ; <S2SV_ModStart> flags ) ; if (! bfq_bfqq_in_service_queue ( bfqq ) ) { spin_unlock_irqrestore ( & bfqd -> lock, flags ) ; return ; } <S2SV_ModStart> in_service_queue ) { bfq_put_async_queue ( bfqd, bfqq <S2SV_ModEnd> ) ; return <S2SV_ModStart> return ; } bfq_bfqq_expire ( bfqd, bfqq, true, reason ) ; spin_unlock_irqrestore ( & bfqd -> lock, flags ) ;",0
86,,1
87,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
88,"<S2SV_ModStart> + x > newDataLength - diffBlockLength || diffPtr + x > <S2SV_ModStart> + diffBlockLength || extraPtr + y > extraBlockLength - diffBlockLength || <S2SV_ModStart> newData + newpos <S2SV_ModEnd>, diffPtr,",0
89,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> np -> tclass ) ; rcu_read_unlock (,0
90,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> == 0 ) && ( image -> rows > 0 ) ) <S2SV_ModStart> ; if ( ( <S2SV_ModStart> == 0 ) && ( image -> rows > 0 ) ) <S2SV_ModStart> ; if ( ( <S2SV_ModStart> == 0 ) && ( image -> rows > 0 ) ),0
91,<S2SV_ModStart> data ) { ( void ) data ;,0
92,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
93,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
94,<S2SV_ModStart> ; if ( xd -> mbmi. mv_bias_mode == VP8_MV_BIAS_HIGH && xd -> mbmi. mv_bias_mode == VP8_MV_BIAS_HIGH && xd -> mbmi. mv_bias_mode == VP8_MV_BIAS_HIGH && xd -> mbmi. mv_bias_mode == VP8_MV_BIAS_HIGH && xd -> mbmi. mv_bias_mode == VP8_MV_BIAS_HIGH && xd -> mbmi. mv_bias_mode == VP8_MV_BIAS_HIGH && xd -> mbmi. mv_bias_mode == VP8_MV_BIAS_HIGH && xd -> mbmi. mv_bias_mode == VP8_MV_BIAS_HIGH && xd -> mbmi. mv_bias_mode == VP8_MV_BIAS_HIGH && xd -> mbmi. mv_bias_mode == VP8_MV_BIAS_HIGH && xd -> mbmi. mv_bias_mode == VP8_MV_BIAS,0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
97,"<S2SV_ModStart> msicap msicap ; int rc ; <S2SV_ModStart> msicap, msgnum <S2SV_ModEnd> ) ; return",0
98,"<S2SV_ModStart> c -> argv, c -> argv",0
99,"<S2SV_ModStart> ; if ( cfg -> g_w == 0 || cfg -> g_h == 0 ) { return VPX_CODEC_ERR_INVALID_ARGS ; } if ( <S2SV_ModStart> VPX_RC_ONE_PASS ) ) { <S2SV_ModStart> ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; }",0
100,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> vp9_init_plane_quantizers ( cpi,0
101,<S2SV_ModStart> info -> si_code!= SI_QUEUE ) return - EINVAL <S2SV_ModEnd> ; info ->,0
102,<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; if ( ptr -> movie_identifier ) { <S2SV_ModStart> - 8 ; if ( tmp_strsize > sizeof ( char ) * tmp_strsize ) return GF_ISOM_INVALID_FILE ; },0
103,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
104,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> -> state == fmode <S2SV_ModEnd> ) return ; <S2SV_ModStart> ; if ( fmode & FMODE_READ <S2SV_ModEnd> ) { if <S2SV_ModStart> { if ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> -> state = fmode <S2SV_ModEnd> ; } <S2SV_null>",0
105,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> rows, image -> cols ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
106,<S2SV_ModStart> 0 ; } if ( len > SIZE_MAX - elem. in_sg [ 0 ]. iov_len ) { return 0 ; },0
107,"<S2SV_ModStart>, i, <S2SV_ModEnd> JPC_QCX_GETEXPN ( qcd <S2SV_ModStart> ] ), <S2SV_ModEnd> JPC_QCX_GETMANT ( qcd",0
108,<S2SV_ModStart> = AV_PIX_FMT_PAL8 ; c -> frame_id = 0 ;,0
109,<S2SV_ModStart> ) ; } ND_TCHECK_NLEN ( length ) ;,0
110,"<S2SV_ModStart> image_noffset ) { if ( noffset == - FDT_ERR_TRUNCATED || noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; }",0
111,<S2SV_ModStart> rx_kfifo_lock ) ; mutex_init ( & state -> tx_kfifo_lock ) ; <S2SV_ModStart> - ENOMEM ; mutex_init ( & state -> tx_kfifo_lock ) ;,0
112,"<S2SV_ModStart> * iface, vpx_codec_dec_config_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> = cfg ; ctx -> config. dec -> flags = flags ; <S2SV_ModStart> = VPX_CODEC_OK ; <S2SV_ModEnd> } return res",0
113,<S2SV_ModStart> ; value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1100WritePhyReg (,0
114,<S2SV_ModStart> ; if ( icmp_is_multicast ( type ) <S2SV_ModEnd> ) { struct,0
115,<S2SV_ModStart> else if ( <S2SV_ModEnd> flags & VPX_CODEC_USE_XMA <S2SV_ModStart> flags & VPX_CODEC_USE_XMA <S2SV_ModEnd> ) res =,0
116,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
117,"<S2SV_ModStart> counter ) ; if ( arg -> open_flags & NFS_O_CREAT ) <S2SV_ModStart> arg -> open_flags, true",0
118,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ) ; return 0 <S2SV_ModStart> break ; } return error <S2SV_ModEnd> ; } <S2SV_null>,1
119,"<S2SV_ModStart> ; if ( len < 1 ) { r_strbuf_append ( & op -> esil, "" <S2SV_blank> "" ) ; } else if (",0
120,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
121,<S2SV_ModStart> goto trunc ; ND_TCHECK_16BITS ( & lshp -> ls_length ) ;,0
122,<S2SV_ModStart> } else { if (! ( flags & SPLICE_F_NO_DATA ) ) { ret = - EFAULT ; break ; },0
123,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
124,<S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ),0
125,"<S2SV_ModStart> costs, vp9_tree * <S2SV_ModStart> c ) { vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> ) ; const vpx_tree_index <S2SV_ModEnd> ii = tree",0
126,"<S2SV_ModStart> * output, tran_low_t <S2SV_ModEnd> * in0, <S2SV_ModStart> * in0, tran_low_t <S2SV_ModEnd> * in1,",0
127,<S2SV_ModStart> & 0xffff ; if ( fmt >= EV_SZ ) return - EINVAL ;,0
128,"<S2SV_ModStart> fadst16 ( const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t x0, x1, x2, x3, x4, x5, x6, x7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t <S2SV_ModEnd> x0 = input <S2SV_ModStart> 15 ] ; tran_high_t <S2SV_ModEnd> x1 = input <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> x2 = input <S2SV_ModStart> 13 ] ; tran_high_t <S2SV_ModEnd> x3 = input <S2SV_ModStart> 2 ] ; tran_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 4 ] ; tran_high_t <S2SV_ModEnd> x5 = input <S2SV_ModStart> 9 ] ; tran_high_t <S2SV_ModEnd> x7 = input <S2SV_ModStart> 7 ] ; tran_high_t <S2SV_ModEnd> x8 = input <S2SV_ModStart> 8 ] ; tran_high",0
129,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> flags |= HAS_EDSP <S2SV_ModStart> |= HAS_EDSP ; <S2SV_ModEnd> flags |= HAS_MEDIA <S2SV_ModStart> |= HAS_MEDIA ; <S2SV_ModEnd> flags |= HAS_NEON <S2SV_ModStart> flags |= HAS_NEON ; <S2SV_ModEnd> return flags &,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
131,"<S2SV_ModStart> * cpi, <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd>, int * <S2SV_ModStart> bsize ) { <S2SV_ModEnd> const int mis <S2SV_ModStart> ) return ; int bw, bh ; const int bs = num_8x8_blocks_wide_lookup [ bsize ], hbs = bs / 2 ; if ( mi_row >= cm -> mi_rows || mi_col >= cm -> mi_cols ) return ; bw = num_8x8_blocks_wide_lookup [ mi <S2SV_ModEnd> [ 0 ] <S2SV_ModStart>. sb_type ] ; bh = num_8x8_blocks_high_lookup [ mi <S2SV_ModEnd> [ 0 ] <S2SV_ModStart>. sb_type ] <S2SV_ModEnd> ; if ( <S2SV_ModStart>, tile, mi <S2SV_ModEnd>, no_pred_segcounts, <S2SV_ModStart>, tile, mi <S2SV_ModEnd> + hbs * <S2SV_ModStart>, tile, mi <S2SV_ModEnd>, no_pred_segcounts, <S2SV_ModStart>, tile, mi <S2SV_ModEnd> + hbs * <S2SV_ModStart>, tile, mi <S2SV_ModEnd>, no_pred_segcounts, <S2SV_ModStart>, tile, mi <S2SV_ModEnd> + hbs * <S2SV_ModStart>, tile, mi <S2SV_ModEnd>, no_pred_segcounts,",0
132,<S2SV_ModStart> flags & CLIENT_CLOSE_AFTER_REPLY ) break ; if ( c -> flags & CLIENT_CLOSE_AFTER_REPLY_WITH_MESSAGE,0
133,<S2SV_ModStart> ; get_blocks_flags = EXT4_GET_BLOCKS_READ_WRITE | <S2SV_ModStart> get_blocks_flags |= EXT4_GET_BLOCKS_DELALLOC_RESERVE ; if ( mpd -> b_size & ( 1 << BH_Mapped ) ) get_blocks_flags |= EXT4_GET_BLOCKS_UNMAPPED,0
134,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart>, handle, hints, <S2SV_ModStart> & retval, <S2SV_ModEnd> p -> ai_flags <S2SV_ModStart> p -> ai_flags <S2SV_ModEnd>, & p <S2SV_ModStart> p -> ai_family <S2SV_ModEnd>, & p <S2SV_ModStart> p -> ai_socktype <S2SV_ModEnd>, p -> <S2SV_ModStart>, NULL, <S2SV_ModEnd> p -> ai_addrlen <S2SV_ModStart> p -> ai_addrlen <S2SV_ModEnd>, NULL ) <S2SV_ModStart> } if ( hints && hints -> ai_family <S2SV_ModEnd> ) { struct <S2SV_ModStart> ) ; } if (! p -> ai_family ) { ret = OE_EAI_MEMORY ; goto done ; }",0
135,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
136,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
137,"<S2SV_ModStart> __u16 size, const <S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
138,"<S2SV_ModStart> asdl_seq * body, PyObject * self <S2SV_ModStart> = body ; p -> v. Module. self = self ;",0
139,"<S2SV_ModStart>, int64_t ts_end <S2SV_ModEnd> ) { struct <S2SV_ModStart> 4 ; # else int64_t ts_start, ts_end ; # <S2SV_ModStart> write_idx ) ; if (! buf ) return - 1 ; <S2SV_ModStart> } else { # if USE_PARTIAL_COPY if ( ctx -> max_sz == 1 && active_map &&! flags ) { for ( row = 0 ; row < mb_rows ; ++ row ) { col = 0 ; while ( 1 ) { for ( col = 0 ; col < mb_cols ; ++ col ) { if ( active_map [ col ] ) break ; } vp9_copy_and_extend_frame_with_rect ( src, & buf -> img, row << 4, col << 4, 16, ( active_end - col ) << 4 ) ; col = active_end ; } active_map += mb_cols ; } } else { # endif vp9_copy_and_extend_frame ( src, & buf -> img ) ; } # else <S2SV_ModStart> img ) ; # endif <S2SV_ModStart> = flags ; # if USE_PARTIAL_COPY if ( ctx -> max_sz == 1 && active_map &&! flags ) { for ( row",0
140,"<S2SV_ModStart>. sharpness ; const int q_index = cpi -> oxcf. q_index ; <S2SV_ModStart> = vp9_ac_quant ( q_index <S2SV_ModEnd>, 0 ) <S2SV_ModStart> int filt_guess = ROUND_POWER_OF_TWO_INT <S2SV_ModEnd> ( q *",0
141,<S2SV_ModStart> BTA_DmSetDeviceAddress ( bd_addr ) ; btif_storage_load_autopair_device_list (,0
142,"<S2SV_ModStart> int a = getint <S2SV_ModEnd> ( fmt,",0
143,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
144,"<S2SV_ModStart> vpx_codec_err_t res ; vpx_alg_priv_t * priv ; <S2SV_ModStart> ; else { priv = ctx -> priv -> alg_priv ; <S2SV_ModStart>. decode ( <S2SV_ModEnd> priv, data",0
145,"<S2SV_ModStart> inode * inode, int fmode <S2SV_ModStart> ; if ( fmode == 1 && <S2SV_ModStart> ; if ( fmode == 2 &&",0
146,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> ) ; } outpos += strlen ( outputbuffer ) ;",0
147,<S2SV_ModStart> self ) { if ( self -> dict ),0
148,<S2SV_ModStart> ( ) ; if (! a ) return 0 ; <S2SV_ModStart> i ) { if (! ( <S2SV_ModStart> ] ) ) ) return 0 ; <S2SV_ModEnd> suffix_object ( p,0
149,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> len ; Py_ssize_t <S2SV_ModEnd> i ; tmp <S2SV_ModStart> ++ ) { asdl_stmt_ty <S2SV_ModEnd> value ; res <S2SV_ModStart> ; res = obj2ast_stmt_ty <S2SV_ModEnd> ( PyList_GET_ITEM ( <S2SV_ModStart> len ; Py_ssize_t <S2SV_ModEnd> i ; tmp <S2SV_ModStart> } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> len ; Py_ssize_t <S2SV_ModEnd> i ; tmp <S2SV_ModStart> } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> len ; Py_ssize_t <S2SV_ModEnd> i ; tmp <S2SV_ModStart> ++ ) { asdl_stmt_ty <S2SV_ModEnd> value ; res <S2SV_ModStart> ; res = obj2ast_stmt_ty <S2SV_ModEnd> ( PyList_GET_ITEM ( <S2SV_ModStart> len ; Py_ssize_t <S2SV_ModEnd> i ; tmp <S2SV_ModStart> } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> len ; Py_ssize_t <S2SV_ModEnd> i ; tmp <S2SV_ModStart> } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> len ; Py_ssize_t <S2SV_ModEnd> i ; tmp",0
150,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
151,"<S2SV_ModStart> ; if ( msg_sys -> msg_name == NULL ) { err = - EFAULT ; goto out_freeiov ; } if ( <S2SV_ModStart> -> msg_control ; if ( msg_sys -> msg_name ) memcpy ( & addr, msg_sys -> msg_name, sizeof ( addr ) ) ;",0
152,<S2SV_ModStart> buffer_head * dibh <S2SV_ModEnd> ; u64 bn <S2SV_ModStart> unsigned ptrs_per_blk ; <S2SV_ModEnd> int eob = <S2SV_ModStart> unsigned ptrs_per_blk ; <S2SV_ModEnd> unsigned end_of_metadata = <S2SV_ModStart> height - 1 <S2SV_ModEnd> ; enum alloc_state <S2SV_ModStart> ) ; } if (! dibh ) { if (! buffer_map_valid ( bh_map ) ) return - ENOMEM ; dibh = mp -> mp_bh [ 0 ] ; },0
153,"<S2SV_ModStart>, vpx_codec_iface_name ( get_codec_interface ( global <S2SV_ModEnd> ) ) ) <S2SV_ModStart> ; SHOW ( g_max_frame_size ) ; SHOW (",0
154,<S2SV_ModStart> ) ) { if ( ctxt -> curOp -> opcode == XSLT_OP_REPLACE ) { <S2SV_ModStart> ) ) ; },0
155,"<S2SV_ModStart> { if ( safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> { if ( safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> { if ( safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.zshrc"",",0
156,<S2SV_ModStart> msix_tab_size ) { <S2SV_ModEnd> bzero ( msixcap,1
157,<S2SV_ModStart> ; if ( <S2SV_ModEnd> js_regexec ( re,0
158,"<S2SV_ModStart> case OFreshOID : { value * p = Field ( ( value ) dest, 1 ) ; if ( p == NULL ) { caml_set_oo_id ( ( value ) dest ) ; return ; } <S2SV_ModStart> ( Int_val ( p <S2SV_ModEnd> ) >= 0 <S2SV_ModStart> >= 0 ) { <S2SV_ModStart> dest ) ; } }",0
159,"<S2SV_ModStart> = FALSE ; if ( ( interface -> flags & KSZ8851_FLAG_TX_INTR_ENABLED ) == 0 ) { <S2SV_ModStart> 0 ) ; } <S2SV_ModStart> 0 ) { <S2SV_ModEnd> interface -> nicEvent <S2SV_ModStart> ) ; } ier = ksz8851ReadReg ( interface, KSZ8851_IER ) ; if ( ( ier & IER_LCIE )!= 0 ) { ier &= ~ IER_LCIE ; interface -> nicEvent = TRUE ; flag |= osSetEventFromIsr ( & netEvent ) ; } <S2SV_ModStart> 0 ) { <S2SV_ModEnd> n = ksz8851ReadReg <S2SV_ModStart> ; } } ier = ksz8851ReadReg ( interface, KSZ8851_IER ) ; if ( ( ier & IER_RXIE )!= 0 ) { ier &= ~ IER_RXIE ; interface -> nicEvent = TRUE ; flag |= osSetEventFromIsr ( & netEvent ) ; } <S2SV_ModStart> 0 ) { <S2SV_ModEnd> interface -> nicEvent <S2SV_ModStart> ) ; } <S2SV_ModEnd> return flag ;",0
160,"<S2SV_ModStart> void encode_quantization ( VP9EncoderState * bs <S2SV_ModEnd>, struct vp9_write_bit_buffer <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm -> base_qindex <S2SV_ModEnd> ) ; write_delta_q",0
161,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> p_buf, msglen )",1
162,<S2SV_ModStart> ; if ( fp ) { if ( <S2SV_ModStart> fp ) ; },0
163,<S2SV_ModStart> ( ) ; if ( strlen ( t1_buf_array ) + 1 + strlen ( t1_line_array ) + 1 > T1_MAX_BUF_SIZE ) { t1_getline ( ) ; return ; },0
164,"<S2SV_ModStart> int mi_col, MACROBLOCKD * x_b, <S2SV_ModStart> int bsl = b_width_log2_subsize <S2SV_ModEnd> ( bsize ) <S2SV_ModStart> / 4 ; int partition ; <S2SV_ModStart> mi_col ) ; if ( cm -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { <S2SV_ModStart> bsize ) ; } else { * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; } <S2SV_ModStart> case PARTITION_VERT : if ( cm -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) { <S2SV_ModStart> subsize ) = 1 <S2SV_ModEnd> ; set_modeinfo_offsets ( <S2SV_ModStart> subsize ) = 0 <S2SV_ModEnd> ; set_modeinfo_offsets ( <S2SV_ModStart> subsize ) = 0 <S2SV_ModEnd> ; set_modeinfo_offsets ( <S2SV_ModStart> subsize ) = 1 <S2SV_ModEnd> ; set_modeinfo_offsets ( <S2SV_ModStart> subsize ) = 0 <S2SV_ModEnd> ; set_modeinfo_offsets ( <S2SV_ModStart> subsize ) = 1 <S2SV_ModEnd> ; set_modeinfo_offsets ( <S2SV_ModStart> subsize ) = 0 <S2SV_ModEnd> ; set_modeinfo_offsets ( <S2SV_ModStart> subsize ) = 1 <S2SV_ModEnd> ; set_modeinfo_offsets ( <S2SV_ModStart> subsize )",0
165,"<S2SV_ModStart> key_ref ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) { ret = - ENOKEY ; goto error2 ; }",1
166,<S2SV_ModStart> ) ) ; if ( 0 == ( ps_dec -> u1_first_slice_in_pic_list ) ) { if ( ( ps_dec -> u1_first_slice_in_pic_list == 1 ) && ( ( ps_dec -> u1_first_slice_in_pic_list == 0 ) || ( ( ps_dec -> u1_first_slice_in_pic_list == 2 ) && ( ( ps_dec -> u1_first_slice_in_pic_list == 1 ) && ( ( ps_dec -> u1_first_slice_in_pic_list == 0 ) || ( ( ps_dec -> u1_first_slice_in_pic_list == 2 ) && ( ( ps_dec -> u1_first_slice_in_pic_list == 0 ) && ( ( ps_dec -> u1_first_slice_in_pic_list == 0 ) && ( ( ps_dec -> u1_first_slice_in_pic_list == 1 ) && ( ( ps_dec -> u1_first_slice_in_pic_list == 0 ) || ( ( ps_dec,0
167,<S2SV_ModStart> var_off ) ; if (! src_known && insn -> code == BPF_ALU64 ) { return - EINVAL ; },0
168,<S2SV_ModStart> ; if (! pTcon -> oplock_mode ) { if ( <S2SV_ModStart> = 0 ; },0
169,"<S2SV_ModStart> -> sk_bound_dev_if ; RCU_INIT_POINTER ( ireq -> ireq_opt, <S2SV_ModEnd> tcp_v4_save_options ( skb <S2SV_ModStart> tcp_v4_save_options ( skb )",0
170,"<S2SV_ModStart> svc_ctx ) { <S2SV_ModEnd> int i, <S2SV_ModStart> svc_ctx ) ; <S2SV_ModEnd> if ( svc_ctx <S2SV_ModStart> svc_ctx ) ; <S2SV_ModEnd> if ( si <S2SV_ModStart> svc_ctx ) ; <S2SV_ModEnd> if ( si <S2SV_ModStart> svc_ctx ) ; <S2SV_ModEnd> if ( si <S2SV_ModStart> svc_ctx ) ; <S2SV_ModEnd> if ( si <S2SV_ModStart> ""\\n"" ) ; int number_of_frames = si -> encode_frame_count ; int number_of_keyframes = si -> encode_frame_count / si -> kf_dist + 1 ; <S2SV_ModStart> i ) { int <S2SV_ModStart> number_of_frames = encode_frame_count ; number_of_keyframes ++ ; } if ( number_of_keyframes > MAX_KEYFRAMES ) { number_of_keyframes = MAX_KEYFRAMES ; } svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f], <S2SV_blank> Bytes=[%u]\\n"" <S2SV_ModEnd>, i, <S2SV_ModStart> ] ) ; if ( si -> encoding_mode == ALT_INTER_LAYER_PREDICTION_IP ) { svc_log (",0
171,<S2SV_ModStart> = new_cols ; screen -> state -> pos = * delta ; <S2SV_ModStart> = new_cols ; <S2SV_ModEnd> return 0 ;,0
172,"<S2SV_ModStart> n ) { <S2SV_ModEnd> char * literal_start <S2SV_ModStart> NULL ) ; literal_start = * str ; literal_end = * str ; <S2SV_ModStart> ; for ( <S2SV_ModEnd> ; * str <S2SV_ModStart> == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 1 ; } else if ( in_named_escape && ch == '{' && ( * str ) == '}' ) { in_named_escape = 0 ; } else if ( ch == '{' || ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } if ( ch == '}' ) { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; return - 1 ; } } } else { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; return - 1 ; } } } else",0
173,"<S2SV_ModStart> ( pd, g_settings_dump_dir_filename <S2SV_ModEnd> ) ; char",0
174,<S2SV_ModStart> ; if ( ( x + w ) > ( ptr -> width ) || ( x + w ) > ( ptr -> height ) || ( y + h ) > ( ptr -> height ) ) { if ( <S2SV_ModStart> ) ; } },0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""Invalid <S2SV_blank> length <S2SV_blank> %u"", length ) ) ; return ; }",0
176,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mv_stride <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if",0
177,"<S2SV_ModStart> * cpi, MACROBLOCKD * xd, <S2SV_ModStart> int mi_col ; <S2SV_ModEnd> for ( mi_col <S2SV_ModStart> int mi_col ; <S2SV_ModEnd> for ( mi_col <S2SV_ModStart> + mi_col ; MODE_INFO_8x8 <S2SV_ModEnd> * * mi_8x8 <S2SV_ModStart> * * mi_8x8 <S2SV_ModEnd> ; MODE_INFO * <S2SV_ModStart> MODE_INFO * * prev_mi_8x8 <S2SV_ModEnd> ; BLOCK_SIZE bsize <S2SV_ModStart> + idx_str ; <S2SV_ModEnd> int64_t dummy_rate = <S2SV_ModStart> + idx_str ; <S2SV_ModEnd> int64_t dummy_dist = <S2SV_ModStart> + idx_str ; <S2SV_ModEnd> cpi -> mb <S2SV_ModStart> = UINT_MAX ; <S2SV_ModEnd> switch ( cpi <S2SV_ModStart>, tile, mi_row, mi_col, cm -> mi_grid_visible, idx_str, cm -> prev_mi_grid_visible, idx_str, BLOCK_64X64, 1, & dummy_rate, & dummy_dist ) ; break ; case SOURCE_VAR_BASED_PARTITION : set_offsets ( cpi, tile, mi_row, mi_col, cm -> mi_grid_visible, idx_str, cm -> prev_mi_grid_visible <S2SV_ModEnd>, BLOCK",0
178,<S2SV_ModStart> u_int8_t state ; if ( nf_ct_is_ping ( ct ) ) return false ;,0
179,<S2SV_ModStart> <S2SV_null> <S2SV_null> static void <S2SV_ModEnd> ip_options_get_finish ( struct <S2SV_ModStart> ip_options * opt ) { <S2SV_ModEnd> opt -> optlen <S2SV_ModStart> = optlen ; <S2SV_ModEnd> kfree ( *,0
180,"<S2SV_ModStart> ; if ( strcmp ( connection, ""Upgrade"" ) == 0 <S2SV_ModEnd> ) goto error",0
181,"<S2SV_ModStart> nif = 0 ; struct rpcap_sockaddr * addr <S2SV_ModStart> -> description ) { addr = d -> description ; <S2SV_ModStart> d -> description ) ; } if ( d -> name ) { addr = d -> name ; <S2SV_ModEnd> plen += strlen <S2SV_ModStart> -> name ) ; } if ( sock_bufferize ( NULL, sizeof ( struct rpcap_header ), NULL, & sendbufidx, RPCAP_NETBUF_SIZE, SOCK_STREAM, sendbuf + RPCAP_NETBUF_SIZE - 1, 0, NULL ) == - 1 ) { return - 1 ; } addr -> sa_family = AF_INET ; addr -> addr_len = sizeof ( struct pcap_addr ) ; addr -> sa_family = AF_INET6 ; addr -> sa_family = AF_INET ; addr -> sa_family = AF_INET ; addr -> sa_family = AF_INET ; addr -> sa_family = AF_INET6 ; addr -> sa_family = AF_INET ; addr -> sa_family = AF_INET ; addr -> sa_family = AF_INET ; addr -> sa_addr = address -> addr ; if ( addr -> sa_family == AF_INET6 ) addr -> sa",0
182,"<S2SV_ModStart>, client_uid, DUMP_DIR_MODE_READWRITE <S2SV_ModEnd> ) ; if",0
183,<S2SV_ModStart> -> columns - 2 <S2SV_ModEnd> ) ; x,0
184,<S2SV_ModStart> a ) { const BN_ULONG * t1 = a ; const BN_ULONG * <S2SV_ModEnd> t2 = a,0
185,"<S2SV_ModStart> ) NULL ) ; if ( image -> bytes_read < 0 ) ThrowReaderException ( CorruptImageError, ""InsufficientImageData"" )",0
186,<S2SV_ModStart> ; if ( len < 4 ) goto trunc ; if (,0
187,"<S2SV_ModStart>! ptrace_has_cap ( task_cred ( task ) <S2SV_ModEnd> -> user_ns,",0
188,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
189,<S2SV_ModStart> SEI_USER_DATA_REGISTERED_ITU_T_T35 : case SEI_USER_DATA_REGISTERED_ITU_T_T36 : case SEI_USER_DATA_REGISTERED_ITU_T_36 : case SEI_USER_DATA_REGISTERED_ITU_T36_HD : case SEI_USER_DATA_REGISTERED_ITU_T36_HD : case SEI_USER_DATA_REGISTERED_ITU_T36_HD : case SEI_USER_DATA_REGISTERED_ITU_T36_HD : case SEI_USER_DATA_REGISTERED_ITU_T36_HD : case SEI_USER_DATA_REGISTERED_ITU_T36_HD : case SEI_USER_DATA_REGISTERED_ITU_T36_HD : case SEI_USER_DATA_REGISTERED_ITU_T36_HD : case SEI_USER_DATA_REGISTERED_ITU_T36_HD : case SEI_USER_DATA_REGISTERED_ITU_T36_HD : case SEI_USER_DATA_REGISTERED_,0
190,<S2SV_ModStart> ; sde -> <S2SV_ModEnd> sdma_descq_cnt = 0 <S2SV_ModStart> = 0 ; sde -> sdma_descq_cnt = 0 ;,0
191,"<S2SV_ModStart> * name, my_bool <S2SV_ModEnd> rep_quick ) { <S2SV_ModStart> ; if (! rep_quick && <S2SV_ModStart> ) ) ; <S2SV_ModEnd> DBUG_PRINT ( ""info"" <S2SV_ModStart>, ( ""repairing <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ) ; if (! rep_quick ) { my_free ( share -> pack. data ) ; share -> pack. data = NULL ; } <S2SV_ModEnd> DBUG_RETURN ( 0",0
192,<S2SV_ModStart> } pairs = pallocarray <S2SV_ModEnd> ( pcount *,0
193,"<S2SV_ModStart> val ) ; if (! <S2SV_ModStart>, val ) ) continue",0
194,"<S2SV_ModStart> ) ) { if ( clen > sizeof ( path. url ) ) { return bad_request ( c, 400, __LINE__ ) ; }",0
195,"<S2SV_ModStart> vp9_fht16x16_c ( const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> 256 ] ; tran_low_t <S2SV_ModEnd> * outptr = <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16",0
196,"<S2SV_ModStart> ; if ( flatpak_check_export_context_permission ( current_context, cancellable, error ) ) goto out ; if (",0
197,"<S2SV_ModStart> '\\0' ) ; size_t len = <S2SV_ModEnd> strlen ( filename <S2SV_ModStart> ) + 5 ; char * temp_filename = osi_calloc ( len <S2SV_ModStart> ; if ( temp_filename == NULL <S2SV_ModEnd> ) { LOG_ERROR <S2SV_ModStart> false ; } memset ( temp_filename, 0, len ) ; strncpy <S2SV_ModEnd> ( temp_filename, <S2SV_ModStart> section -> name, len <S2SV_ModStart> enode ) ; if ( entry -> key == NULL ) continue ; <S2SV_ModStart> value ) ; if ( entry -> value == NULL ) continue ; <S2SV_ModStart> sections ) ) { <S2SV_ModStart> fp ) ; }",0
198,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
199,"<S2SV_ModStart> userData, target <S2SV_ModEnd> ) ; ctxt",0
200,"<S2SV_ModStart> ( ) ; char * _header = _getHeader ( ) ; <S2SV_ModStart> ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.1\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %lu\\r\\n"" <S2SV_ModEnd> ""%s"" ""\\r\\n"" ""%s"" <S2SV_ModStart> ""%s"" ""\\r\\n"" ""%s"", _header? _header : request, _header? _header : """" <S2SV_ModEnd>, StringBuffer_length (",0
201,"<S2SV_ModStart> ) ; } if ( copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> ( src, dest, 0 <S2SV_ModEnd> ) < 0 <S2SV_ModStart> ""chown"" ) ; <S2SV_ModEnd> unlink ( src",0
202,<S2SV_ModStart>!= BFA_STATUS_OK ) { kfree ( fcstats ) ; <S2SV_ModStart> return NULL ; },1
203,"<S2SV_ModStart> -> x = clampf ( 1.0f, <S2SV_ModEnd> value -> x <S2SV_ModStart> -> x ), 0.0f <S2SV_ModStart> -> y = clampf ( 1.0f, <S2SV_ModEnd> value -> y <S2SV_ModStart> -> y ), 0.0f <S2SV_ModStart> -> z = clampf ( 1.0f, <S2SV_ModEnd> value -> z <S2SV_ModStart> -> z = 0.0f <S2SV_ModEnd> ; } <S2SV_null>",0
204,<S2SV_ModStart> ; rec -> sasl_username_type = IRC_SASL_USERNAME_TYPE_UNKNOWN ; rec -> sasl_username_default = IRC_SASL_USERNAME_DEFAULT ; rec -> sasl_password_type = IRC_SASL_PASSWORD_TYPE_UNKNOWN <S2SV_ModEnd> ; * dest,0
205,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
206,"<S2SV_ModStart> o, datao ; size_t sz = 0 <S2SV_ModStart> ) ; } sz = exif_get_long ( buf + o, n -> order ) ; if ( sz > buf_size ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; }",0
207,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> testflag & T_DESCRIPT ) && ( param -> testflag & ( T_READONLY | T_READONLY ) ),0
208,<S2SV_ModStart> olen ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> hex ; CURLcode rc <S2SV_ModEnd> ; if ( <S2SV_ModStart> hex ) ; rc <S2SV_ModEnd> = Curl_convert_from_network ( <S2SV_ModStart> ; if ( rc <S2SV_ModEnd> ) { free <S2SV_ModStart> olen = strindex + 1,0
209,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
210,<S2SV_ModStart> ; def -> <S2SV_ModEnd> session_setup = usm_session_init,0
211,<S2SV_ModStart> NULL ; return <S2SV_ModEnd> match ( prog,0
212,<S2SV_ModStart> idx ] ; <S2SV_ModEnd> switch ( action <S2SV_ModStart> ) ; } <S2SV_ModEnd> return SNMP_ERR_NOERROR ;,0
213,<S2SV_ModStart> pixels ++ = <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> pixels ++ = <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> pixels ++ = <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> pixels ++ = <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> pixels ++ = <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> pixels ++ = <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> pixels ++ = <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> pixels ++ = <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> pixels ++ = <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> pixels ++ = <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> pixels ++ = <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> pixels ++ = <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> pixels ++ = <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> pixels ++ = <S2SV_ModEnd> ( unsigned char,0
214,<S2SV_ModStart> timer ) ; spin_lock_irq ( & slave_active_lock ) ; spin_lock ( & timer -> lock ) ; <S2SV_ModStart> open_list ) { <S2SV_ModEnd> list_move_tail ( & <S2SV_ModStart> = NULL ; list_del_init ( & slave -> ack_list ) ; list_del_init ( & slave -> active_list ) ; spin_unlock ( & timer -> lock ) ; } spin_unlock ( & timeri -> timer -> lock ) ; <S2SV_ModEnd> mutex_unlock ( & <S2SV_ModStart> & register_mutex ) <S2SV_ModEnd> ; return 0,0
215,<S2SV_ModStart> -> u1_dpb_commands_read ) { <S2SV_ModStart> ps_dec ) ; } else { ps_dec -> u4_bitoffset = 0 ; },0
216,"<S2SV_ModStart> decode ) { uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > info -> rasterSize || widthOverflow > 0 || heightOverflow > 0 ) { void * tmpRasterBits = reallocarray ( info -> rasterBits, newRasterSize ) ; <S2SV_ModStart> -> originalHeight ; <S2SV_ModEnd> if ( newRasterSize <S2SV_ModStart> 0 ) { <S2SV_ModEnd> uint_fast32_t newOffset = <S2SV_ModStart> 0 ) { uint_fast32_t newOffset = ( uint_fast32_t ) ( ( ( uint_fast32_t ) ( ( uint_fast32_t ) ( ( uint_fast32_t ) ( ( uint_fast32_t ) ( ( uint_fast32_t ) ( ( uint_fast32_t ) ( ( uint_fast32_t ) ( ( uint_fast32_t ) ( ( uint_fast32_t ) ( ( uint_fast32_t ) ( ( uint_fast32_t ) ( ( uint_fast32_t ) ( ( uint_fast32_t ) ( ( uint_fast32_t ) ( ( uint_fast32_t )",0
217,<S2SV_ModStart> validator -> user. buf,0
218,"<S2SV_ModStart> bus ] ; if ( bi == NULL ) { pr_err ( ""%s: <S2SV_blank> pci_lintr_release(), <S2SV_blank> bus <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> no <S2SV_blank> businfo\\n"", __func__, dev -> bus ) ; return ; } <S2SV_ModEnd> si = &",0
219,"<S2SV_ModStart>, timeo ) <S2SV_ModEnd> ; if (",1
220,<S2SV_ModStart> += 9 ; ( <S2SV_ModStart> isspace ( * ( s + 9 ) <S2SV_ModEnd> ) ; s <S2SV_ModStart> t &&! ( <S2SV_ModStart> isspace ( * ( s + t ) ) && ( t < s + len ) <S2SV_ModEnd> ) ) t,0
221,"<S2SV_ModStart>. active_set ; if ( uipc_main. read_set == UINT_MAX ) { BTIF_TRACE_EVENT ( ""UIPC <S2SV_blank> READ <S2SV_blank> THREAD <S2SV_blank> EXITING"" ) ; uipc_main_cleanup ( ) ; uipc_main. tid = 0 ; BTIF_TRACE_EVENT ( ""UIPC <S2SV_blank> READ <S2SV_blank> THREAD <S2SV_blank> DONE"" ) ; break ; }",0
222,"<S2SV_ModStart> msixcap msixcap ; if <S2SV_ModEnd> ( msgnum >= <S2SV_ModStart> msix <= MAX_MSIX_TABLE_ENTRIES ) { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> msix <S2SV_blank> table <S2SV_blank> entry <S2SV_blank> count <S2SV_blank> (%d)\\n"", __func__, msgnum ) ; return - 1 ; } <S2SV_ModEnd> assert ( barnum",0
223,"<S2SV_ModStart> * rb, unsigned <S2SV_ModStart> max ) { return decode_unsigned_max_ext <S2SV_ModEnd> ( rb, <S2SV_ModStart> ( rb, max, MAX_DECODE_BITS <S2SV_ModEnd> ) ; }",0
224,<S2SV_ModStart> == NULL ) { retval = KRB5KDC_ERR_INVALID_PKID_LEN ; goto cleanup ; } <S2SV_ModEnd> status = X509_NAME_cmp <S2SV_ModStart> = 0 ; <S2SV_ModEnd> X509_NAME_free ( is,0
225,<S2SV_ModStart> <S2SV_null> <S2SV_null> static MV_REFERENCE_FRAME <S2SV_ModEnd> select_tx_mode ( const <S2SV_ModStart> cpi ) { return cpi -> common. tx_mode ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_ModStart> } <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
226,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ]. cf == CF_AVERAGE ) { magfact = mag_calc ( im -> gdes [ i ]. data, im -> gdes [ i ]. data, im -> gdes [ i ]. step ) ; } else { magfact = mag_calc ( im -> gdes [ i ]. data, im -> gdes [ i ]. step ) ; } if ( magfact <S2SV_ModStart> ; if ( <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ]. cf == CF_AVERAGE ) { <S2SV_ModEnd> magfact = mag_calc <S2SV_ModStart> ( im -> gdes [ i ]. data, im -> gdes [ i ]. step ) ; } else { magfact = mag_calc ( im -> gdes [ i ]. data, im -> gdes [ i ]. step ) ; } <S2SV_ModEnd> } break ;",0
227,<S2SV_ModStart> ; if ( buf2 <S2SV_ModEnd> -> size < <S2SV_ModStart> -> size < buf1 <S2SV_ModEnd> -> size ),0
228,<S2SV_ModStart> ) + size ; if ( unlikely (! sz ) ) return NULL,0
229,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,1
230,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs,",0
231,<S2SV_ModStart> ; r = sd_event_add_fd <S2SV_ModEnd> ( b ->,0
232,<S2SV_ModStart> ( ) ; errors += test_curl_off_t_formatting ( ) ;,0
233,<S2SV_ModStart> -> lun ) sas_eh_finish_cmd <S2SV_ModEnd> ( cmd ),1
234,"<S2SV_ModStart>, end_col_offset ; bool is_func_body = false ; <S2SV_ModStart> 2 ; } is_func_body = true ; <S2SV_ModStart> ( is_async ) { if ( TYPE ( CHILD ( n, name_i + 4 ) ) == FUNCTION ) { is_func_body = true ; } <S2SV_ModStart> returns, LINENO ( n0 ), n0 <S2SV_ModEnd> -> n_col_offset, <S2SV_ModStart> c_arena ) ; } else { if ( is_func_body ) { body = ast_for_suite ( c, CHILD ( n, name_i + 4 ) ) ; if (! body ) return NULL ; is_func_body = false ; } body = ast_for_suite ( c, CHILD ( n, name_i + 4 ) ) ; if (! body ) return NULL ; is_func_body = true ; }",0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,"<S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > Rec2. RecordLength ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
237,,1
238,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
239,<S2SV_ModStart> : if ( psf -> header. size <S2SV_ModEnd> > SIGNED_SIZEOF ( <S2SV_ModStart> > psf -> header. end ) { <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> headend = position ; } <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> : if ( psf -> header. size <S2SV_ModEnd> + position < <S2SV_ModStart> ; if ( psf -> header. size <S2SV_ModEnd> + position <= <S2SV_ModStart> + position <= psf -> header. end ) { psf -> header. index <S2SV_ModEnd> += position ; <S2SV_ModStart> ; } ; <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> headend = position - ( psf -> header. end - psf -> header. index ) <S2SV_ModEnd> ; psf_fseek ( <S2SV_ModStart> ; } ; <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> headindex = psf -> header. end <S2SV_ModEnd> ; psf_fseek ( <S2SV_ModStart> ; } ; <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> headindex = psf -> header. end <S2SV_ModEnd> ; break ;,0
240,"<S2SV_ModStart> u4_ofst ) ; ihevcd_cabac_set_max_idc ( ps_cabac, cabac_init_idc ) ;",0
241,<S2SV_ModStart> ; } } if ( off < ctx -> size ) { <S2SV_ModStart> = off ; },0
242,"<S2SV_ModStart> event ) { perf_event_disable_common ( event, false <S2SV_ModEnd> ) ; }",0
243,<S2SV_ModStart> -> post_proc_flag = <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> noise_level ; # if CONFIG_VP9_HIGHBITDEPTH flags -> bit_depth_flag = ctx -> bit_depth_flag ; #,0
244,"<S2SV_ModStart> = 0 ; if (! ( * tptr & 0x1f ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> empty <S2SV_blank> packet"", ( is_ipv6 == 0 )? 4 : 6 ) ) ; goto trunc ; }",0
245,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> int64_t store_reg [ <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vpx_usec_timer_start ( & <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,0
246,"<S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file <S2SV_blank> %s\\n"", src <S2SV_ModEnd> ) ; exit <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> copy_file ( src <S2SV_ModStart> src, dest <S2SV_ModEnd> ) ; if",0
247,<S2SV_ModStart> = 0 ; if ( sfb > 0x7FFF ) { return IXHEAACD_ERR_INVALID_FRAME_SIZE ; },0
248,<S2SV_ModStart> lua_module ) ; <S2SV_ModEnd> lua_authz_provider_spec * prov_spec <S2SV_ModStart> prov_spec = parsed_require_line <S2SV_ModEnd> ; spec = <S2SV_ModStart> r ) ; <S2SV_ModEnd> return AUTHZ_OK ;,0
249,"<S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> rows, image -> cols ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
250,<S2SV_ModStart> (! proto_end || proto_end + 3 > url,0
251,<S2SV_ModStart> end = path ; if ( end > path_len ) return - FDT_ERR_NOSPACE,0
252,<S2SV_ModStart> ( server. <S2SV_ModEnd> maxidletime && ( <S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( server,0
253,<S2SV_ModStart> -> priv -> timeout <S2SV_ModEnd> = g_timeout_add_seconds (,0
254,<S2SV_ModStart> - 1 ; if ( book -> dim > 0 ),0
255,<S2SV_ModStart> action ) { if ( r < 0.0 ) return ;,0
256,<S2SV_ModStart> this_h ) { int i ; <S2SV_ModStart> 16 ) { for ( i = 0 ; i < 2 ; i ++ ) { if ( sf -> predict [ i ] [ i ] [ 0 ] == vp9_convolve8_copy ) { sf -> predict [ i ] [ i ] [ 0 ] = vp9_convolve8_copy ; sf -> predict [ i ] [ i ] [ 1 ] = vp9_convolve8_avg ; sf -> predict [ i ] [ i ] [ 1 ] = vp9_convolve8_avg_horiz ; } else { sf -> predict [ i ] [ i ] [ 0 ] = vp9_convolve8_copy ; sf -> predict [ i ] [ i ] [ 1 ] = vp9_convolve8_avg_horiz ; } } } else { <S2SV_ModStart> } else { for ( i = 0 ; i < 2 ; i ++ ) { <S2SV_ModStart> -> predict [ i ] [ i ] [ 0 ] = vp9_convolve8_copy ; sf -> predict [ i ] [ i ] [ 1 ] = vp9_convolve8_avg ; sf -> predict [ i ] [ 0 ] [ 1 ] = vp9_,0
257,<S2SV_ModStart> (! sock ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( <S2SV_ModEnd> ( count && <S2SV_ModStart> buf ) ) { ret = - 1 ; goto done ; } <S2SV_ModEnd> if ( buf,0
258,<S2SV_ModStart> ; if ( msg. msg_namelen > sizeof ( src_info ) ) return - EINVAL ; if (,0
259,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> sctp_v6_protosw_exit ( ) <S2SV_ModStart> ( ) ; unregister_pernet_subsys ( & sctp_net_ops ) ;,0
260,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> stream ) { int ret ; <S2SV_ModStart> index ) ; ret = sse_to_psnr ( ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0",0
261,<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen (,1
262,"<S2SV_ModStart> ( ) ; <S2SV_ModEnd> context -> frameId <S2SV_ModStart> ERROR_OUT_OF_MEMORY ; } memset ( context -> txBuffer, 0, ETH_MAX_FRAME_SIZE ) ; memset ( context -> rxBuffer, 0, ETH_MAX_FRAME_SIZE ) ; memset ( context -> txBuffer, 0, ETH_MAX_FRAME_SIZE ) ; memset ( context -> rxBuffer, 0, ETH_MAX_FRAME_SIZE ) ; <S2SV_ModStart> ) ) ; memset ( context -> txBuffer, 0, ETH_MAX_FRAME_SIZE ) ; memset ( context -> rxBuffer, 0, ETH_MAX_FRAME_SIZE ) ; <S2SV_ModStart> ) ) ; memset ( context -> txBuffer, 0, ETH_MAX_FRAME_SIZE ) ; memset ( context -> rxBuffer, 0, ETH_MAX_FRAME_SIZE ) ; <S2SV_ModStart> ) ) ; memset ( context -> txBuffer, 0, ETH_MAX_FRAME_SIZE ) ; <S2SV_ModStart> ) ) ; memset ( context -> rxBuffer, 0, ETH_MAX_FRAME_SIZE ) ; <S2SV_ModStart> ) ) ; memset ( context -> txBuffer, 0, ETH_MAX_",0
263,"<S2SV_ModStart> skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
264,"<S2SV_ModStart> ; if ( fit_check_format_uninitialized <S2SV_ModEnd> ( fit, <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; ret = <S2SV_ModEnd> - ENOEXEC ; <S2SV_ModStart> - ENOEXEC ; goto error ; <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; ret = <S2SV_ModEnd> - ENOEXEC ; <S2SV_ModStart> - ENOEXEC ; goto error ; <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; ret = <S2SV_ModEnd> - ENOEXEC ; <S2SV_ModStart> - ENOEXEC ; goto error ; <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; ret = <S2SV_ModEnd> - ENOEXEC ; <S2SV_ModStart> - ENOEXEC ; goto error ; <S2SV_ModStart> - ENOEXEC ; goto error ; <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; ret = <S2SV_ModEnd> - ENOEXEC ; <S2SV_ModStart> - ENOEXEC ; goto error ; <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; ret = <S2SV_ModEnd> - ENOEXEC ; <S2SV_ModStart> - ENOEXEC ; goto error ; <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; ret = <S2SV_ModEnd> - ENOEXEC ; <S2SV_ModStart> - ENOEXEC ; goto error ; <S2SV_ModStart> - ENOEXEC ; goto error ; <S2SV_ModStart> - ENOEXEC ; goto error ; <S2SV_ModStart> - ENOEXEC ; goto error ; <S2SV_ModStart> - ENOEXEC ; goto error ; <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; ret = <S2SV_ModEnd> - ENOEXEC ; <S2SV_ModStart> - ENOEXEC ; goto",0
265,"<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart>, UI_DEV_DESTROY ) )",0
266,<S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> = rc -> avg_frame_bandwidth <S2SV_ModEnd> ; # endif,1
267,"<S2SV_ModStart> i ], ""--allow-untrusted-credentials"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted-credentials"" <S2SV_ModEnd> ) ; argv",0
268,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
269,<S2SV_ModStart> ib ] ; dequant_ptr = d -> dequant ; coeff_ptr = b -> coeff ; qcoeff_ptr = b -> qcoeff ; dqcoeff_ptr = d -> dqcoeff ; i0 =! type ; eob = * d -> eob ; rdmult = mb -> rdmult * err_mult ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ; rddiv = mb -> rddiv ; best_mask [ 0 ] = best_mask [ 1 ] = 0 ; tokens [ 0 ]. token = DCT_EOB_TOKEN ; tokens [ 0 ]. error = 0 ; tokens [ 0 ]. qc = 0 ; * ( tokens [ 0 ] + 1 ) = * ( tokens [ 0 ] + 0 ) ; * ( tokens [ 0 ] + 2 ) = * ( tokens [ 0 ] + 1 ) ; * ( tokens [ 0 ] + 3 ) = * ( tokens [ 0 ] + 2 ) ; * ( tokens [ 0 ] + 4 ) = ( ( int ) ( ( int ) ( ( int ) ( ( int ) ( ( int,0
270,<S2SV_ModStart> FN_REFLEN ] ; if ( strlen ( opt_basedir ) + 1 > sizeof ( buff ) - 1 ) { error = - 1 ; goto exit ; },0
271,<S2SV_ModStart> decrypt_cb ) { ptrdiff_t <S2SV_ModEnd> n = ( <S2SV_ModStart> n = ( ptrdiff_t <S2SV_ModEnd> ) ( data_end,0
272,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
273,"<S2SV_ModStart> int * returnintra, int * return_yrd, int * return_uvrd <S2SV_ModStart> # if CONFIG_TEMPORAL_DENOISING <S2SV_ModEnd> int zero_mv_sse = <S2SV_ModStart> int zero_mv_sse = - 1, best_sse = - 1, best_rd_sse = - 1 <S2SV_ModEnd> ; # endif <S2SV_ModStart>. rd = - 1 <S2SV_ModEnd> ; best_mode. <S2SV_ModStart>. yrd = - 1 <S2SV_ModEnd> ; best_mode. <S2SV_ModStart>. intra_rd = - 1 <S2SV_ModEnd> ; # endif <S2SV_ModStart>. intra_yrd = - 1 <S2SV_ModEnd> ; best_mode. <S2SV_ModStart>. intra_yrd = - 1 <S2SV_ModEnd> ; best_mode. <S2SV_ModStart>. intra_rd = - 1 <S2SV_ModEnd> ; best_mode. <S2SV_ModStart>. yrd = - 1 <S2SV_ModEnd> ; best_mode. <S2SV_ModStart>. intra_yrd = - 1 <S2SV_ModEnd> ; best_mode. <S2SV_ModStart>. intra_yrd = - 1 <S2SV_ModEnd> ; best_mode. <S2SV_ModStart>. intra_rd = - 1 <S2SV_ModEnd> ; # endif <S2SV_ModStart>. intra_yrd = - 1 <S2SV_ModEnd> ; best_mode. <S2SV_ModStart>. intra_yrd = - 1 <S2SV_ModEnd> ; best_mode. <S2SV_ModStart>. intra",0
274,"<S2SV_ModStart> goto error ; if ( stat ( h -> filename, & statbuf ) == - 1 ) goto error ;",0
275,"<S2SV_ModStart> u1_level_idc, u1_seq_parameter_set_id, u1_frame_cropping_flag <S2SV_ModStart> u1_frame_cropping_flag ) ; u1_frame_cropping_flag = ih264d_get_bit_h264 ( ps_bitstrm, 4 ) ; COPYTHECONTEXT ( ""SPS: <S2SV_blank> frame_cropping_flag"", u1_frame_cropping_flag ) ; <S2SV_ModStart> u4_num_reorder_frames ) ; if ( u4_num_reorder_frames > 1 ) { ps_seq -> u4_num_reorder_frames = u4_num_reorder_frames ; }",0
276,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; int i ; <S2SV_ModStart> return VPX_CODEC_INVALID_PARAM ; for ( i = 0 ; i < ctx -> num_layers ; ++ i ) { VPxLayer * const layer = ctx -> layers [ i ] ; if ( layer -> type == VPX_LAYER_TYPE_SPATIAL ) { <S2SV_ModStart> -> svc. spatial_layer_id_id = layer -> spatial_layer ; cpi -> svc. temporal_layer_id = layer -> temporal_layer ; } else { return VPX_CODEC_INVALID_PARAM ; } } <S2SV_ModStart> -> svc. <S2SV_ModEnd> lst_fb_idx = params <S2SV_ModStart> = params -> <S2SV_ModEnd> lst_fb_idx ; cpi <S2SV_ModStart> = params -> <S2SV_ModEnd> lst_fb_idx ; cpi <S2SV_ModStart> = params -> <S2SV_ModEnd> gld_fb_idx ; cpi <S2SV_ModStart> = params -> <S2SV_ModEnd> alt_fb_idx ; if",0
277,"<S2SV_ModStart> out ) { uint32 bitspersample ; uint32 samplesperpixel ; uint16 input_compression, input_photometric ; uint32 width, length ; struct cpTag * p ; uint32 width, length ; uint32 compression ; uint32 bitsperpixel ; uint32 samplesperpixel ; uint32 width ; uint32 length ; uint32 compression ; uint32 width ; uint32 length ; struct cpTag * p ; if ( ( bitspersample > UINT32_MAX / bitsperpixel ) || ( samplesperpixel > UINT32_MAX / bitspersample ) ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Invalid <S2SV_blank> values <S2SV_blank> for <S2SV_blank> bitspersample <S2SV_blank> = <S2SV_blank> %u, <S2SV_blank> samplesperpixel <S2SV_blank> = <S2SV_blank> %u.\\n"", TIFFFileName ( in ), bitspersample, samplesperpixel ) ; return FALSE ; } bitspersample = ( uint32 ) ( bitspersample * ( uint32_t ) bitsperpixel ) ; samplesperpixel = ( uint32_t ) ( samplesperpixel * bitspersample ) <S2SV_ModEnd> ; if (",0
278,"<S2SV_ModStart> a ) { <S2SV_ModEnd> char * pn <S2SV_ModStart> = '\\0' ; if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else { <S2SV_ModStart> ) ; } <S2SV_ModEnd> } } return <S2SV_ModStart> ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
279,"<S2SV_ModStart> unsigned int link_count ; struct buffer_head * nbh = NULL ; struct kernel_lb_addr loc <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct indirectEntry * <S2SV_ModStart> extLocation ) ; <S2SV_ModEnd> nbh = udf_read_ptagged <S2SV_ModStart> & ident ) ; if ( nbh ) { if ( nbh -> b_data == ibh ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> ICB <S2SV_blank> for <S2SV_blank> ibh\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } <S2SV_ModEnd> memcpy ( & <S2SV_ModStart> ) ) ; } else { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> ICB <S2SV_blank> for <S2SV_blank> ibh\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; } }",0
280,"<S2SV_ModStart> get_uv_tx_size ( mbmi ) ; const int filter_level = get_filter_level ( lfi_n, mbmi ) ; uint64_t * const left_y = & lfm -> left_y [ tx_size_y ] ; uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const left_uv = & lfm -> left_uv [ tx_size_uv ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_y = & lfm -> int_4x4_y ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv ; int i ; if (! filter_level ) { return ; } else { const int w = num_8x8_blocks_wide_lookup [ block_size ] ; const int h = num_8x8_blocks_high_lookup [ block_size ] ; int index = shift_y ; for ( i",0
281,"<S2SV_ModStart> mq_ops ) { spin_lock <S2SV_ModEnd> ( & fq <S2SV_ModStart> mq_flush_lock, flags <S2SV_ModEnd> ) ; }",0
282,<S2SV_ModStart> uint8_t val ; if ( addr > vdev -> config_len ) { <S2SV_ModStart> config ) ; <S2SV_ModEnd> return ( uint32_t <S2SV_ModStart> addr ) ; },0
283,<S2SV_ModStart> ) ) { ovalue = NULL ;,0
284,<S2SV_ModStart> ( effect_param_t ) || ( effect -> state!= EFFECT_STATE_ACTIVE ),0
285,<S2SV_ModStart> ; if ( j >= num_versions ) { err = EINVAL ; goto cleanup ; } if (,0
286,"<S2SV_ModStart> 0x02 ) ; if ( crgram_len > SC_MAX_APDU_BUFFER_SIZE - 1 ) { r = sc_transmit_apdu ( card, & apdu ) ; LOG_TEST_RET ( card -> ctx, r, ""APDU <S2SV_blank> transmit <S2SV_blank> failed"" ) ; } <S2SV_ModStart> crgram, crgram_len + 1",0
287,"<S2SV_ModStart> -> rss_size ; if (! ( hw -> flags & I40E_HW_FLAG_AQ_VSI_RX_CAPABLE ) ) { dev_info ( & pf -> pdev -> dev, ""AQ <S2SV_blank> VSI <S2SV_blank> is <S2SV_blank> not <S2SV_blank> enabled\\n"" ) ; return - EINVAL ; }",0
288,"<S2SV_ModStart> ; } } return send_msg ( g, ""E01"" ) ;",0
289,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
290,"<S2SV_ModStart> -> mb_stride ; if ( xd -> mb_stride > MAX_REF_FRAMES ) { vpx_log ( ""b/263638: <S2SV_blank> b/263638 <S2SV_blank> overflow\\n"" ) ; return ; }",0
291,<S2SV_ModStart> ) ; } if ( image -> format == MagickFormatBlob ) { image -> format = MagickFormatBlob ; },0
292,"<S2SV_ModStart> len ) { <S2SV_ModEnd> char * buf <S2SV_ModStart> char * p <S2SV_ModEnd> ; if ( <S2SV_ModStart> s ++ ; <S2SV_ModEnd> } if ( <S2SV_ModStart> 10 ; } if ( p - buf > Py_SIZE ( u ) ) { Py_DECREF ( w ) ; return NULL ; } <S2SV_ModStart> buf ; return decode_unicode_escape_no_cache <S2SV_ModEnd> ( s,",0
293,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> enum { YES <S2SV_ModStart>, targisdir, wrerrno ; int setimes, targisdir ; int <S2SV_ModEnd> wrerrno = 0 <S2SV_ModStart> ""Unexpected <S2SV_blank> off_t/time_t <S2SV_blank> size"" ) ; <S2SV_ModEnd> mask = umask <S2SV_ModStart> ; if ( lstat <S2SV_ModEnd> ( targ, <S2SV_ModStart> ; if ( lstat <S2SV_ModEnd> ( cp, <S2SV_ModStart> ; if ( lstat <S2SV_ModEnd> ( cp,",0
294,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w,",0
295,"<S2SV_ModStart> ; if ( vpx_alloc_frame_buffer ( & oci -> vpx_temp_scale_frame, width, height, VP8BORDERINPIXELS ) < 0 ) goto allocation_fail ; if (",0
296,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
297,<S2SV_ModStart> u1_num_mbs_next ) { if ( u1_num_mbsNby2 > ps_dec -> u2_num_slice_in_pic ) { return ERROR_SLICE_COUNT_OVERFLOW ; },0
298,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> vterm_allocator_free ( screen,1
299,"<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & delay )",1
300,"<S2SV_ModStart>, one, <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart> ) break ; offset = ( ssize_t ) ( p - image -> data ) ; <S2SV_ModStart> ) break ; if ( offset > image -> rows ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( number_planes_filled <S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( number_planes_filled <S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( number_planes_filled <S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( number_planes_filled <S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( number_planes_filled <S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( number_planes_filled <S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( number_planes_filled <S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( number_planes_filled <S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( number_planes_filled <S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( number_planes_filled <S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( number_planes_filled <S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( number_planes_filled <S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( number_planes_filled <S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( number_planes_filled <S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( number",0
301,"<S2SV_ModStart> value ) { cchar * name = sclone ( value ) ; <S2SV_ModStart>, stok ( name <S2SV_ModEnd>, "" <S2SV_blank> \\t,"", <S2SV_ModStart> -> endpoints = name <S2SV_ModEnd> ; } }",0
302,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
303,<S2SV_ModStart> ; if ( <S2SV_ModEnd>! prev_hash || <S2SV_ModStart> ntime ) { <S2SV_ModEnd> free ( job_id,0
304,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
305,"<S2SV_ModStart> unused ) { _Py_IDENTIFIER ( __dict__ ) ; PyObject * dict ; PyObject * res <S2SV_ModEnd> ; PyObject * <S2SV_ModStart> * dict = _PyObject_GetAttrId2 <S2SV_ModEnd> ( self, <S2SV_ModStart> dict ) { Py_RETURN_NONE <S2SV_ModEnd> ; } return",0
306,"<S2SV_ModStart> ) & desc, sizeof ( * desc )",1
307,"<S2SV_ModStart> perf_event * ) ; struct perf_event_context * ctx <S2SV_ModStart> case PERF_EVENT_IOC_PERIOD : ctx = perf_event_ctx_lock ( event ) ; <S2SV_ModStart> perf_event_period ( event, ctx <S2SV_ModStart> ret ; } <S2SV_ModEnd> default : return",0
308,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> y_mode ) { return <S2SV_ModEnd> read_intra_mode ( r <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> ] ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
309,"<S2SV_ModStart> ; if (! ccp_dm_workarea_init ( & ctx, <S2SV_ModEnd> sha -> op <S2SV_ModStart> sha -> op, <S2SV_ModEnd> sha -> op_len <S2SV_ModStart> sha -> op_len ) ) return - ENOMEM <S2SV_ModEnd> ; memcpy (",0
310,"<S2SV_ModStart> iv ) ; if (! NIL_P ( self ) ) { rb_raise ( eTypeError, ""pkcs5_keyivgen <S2SV_blank> requires <S2SV_blank> an <S2SV_blank> object"" ) ; }",0
311,<S2SV_ModStart> s ) ; if (! s -> nic ) { device_unregister ( dev ) ; return - ENOMEM ; },0
312,<S2SV_ModStart> ; if (! session -> settings_ready ) { rv = nghttp2_session_read_settings ( session ) ; if ( nghttp2_is_fatal ( rv ) ) { return rv ; } } if (,0
313,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> x86_pmu. max_pebs_events,0
314,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * tp, <S2SV_ModEnd> TOKENEXTRA * stop <S2SV_ModStart> TOKENEXTRA * stop, vpx_writer * w_ ) { vpx_writer <S2SV_ModEnd> * p = <S2SV_ModStart> ] ; const vpx_extra_bit <S2SV_ModEnd> * const b <S2SV_ModStart> b = & vpx_extra_bits <S2SV_ModEnd> [ t ] <S2SV_ModStart> & 1 ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ; } vpx_write_bit <S2SV_ModEnd> ( w,",0
315,"<S2SV_ModStart>, uncompressed_hdr_size ; vpx_write_bit_buffer <S2SV_ModEnd> wb = { <S2SV_ModStart> 0 } ; vpx_write_bit_buffer <S2SV_ModEnd> saved_wb ; write_uncompressed_header <S2SV_ModStart> cpi, & wb ) <S2SV_ModEnd> ; vp9_wb_write_literal ( <S2SV_ModStart> ; vp9_wb_write_literal ( <S2SV_ModEnd> wb, 0 <S2SV_ModStart> += uncompressed_hdr_size ; vpx_write_bit_buffer <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> += first_part_size ; vpx_write_bit_buffer <S2SV_ModEnd> ( & saved_wb",0
316,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> dev_get_valid_name ( struct <S2SV_ModStart> ) ) return false <S2SV_ModEnd> ; if ( <S2SV_ModStart> name ) ) { if (! dev_valid_name ( dev -> name ) ) return false ; <S2SV_ModStart> name ) ; },0
317,"<S2SV_ModStart> struct ikev2_id id ; struct ikev2_hdr hdr <S2SV_ModStart> * typedata ; ND_TCHECK_MIN ( sizeof ( hdr ), sizeof ( hdr ) ) ; <S2SV_ModStart> * typedata ; if ( ext [ 0 ] == 0 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; goto trunc ; } <S2SV_ModStart> trunc ; } if ( id_len < sizeof ( hdr ) ) goto trunc ;",0
318,"<S2SV_ModStart> ) ) { jas_log ( jas_log_get_console ( ), ""mif_process_cmpt: <S2SV_blank> invalid <S2SV_blank> cmpt <S2SV_blank> value <S2SV_blank> %d"", id ) ;",0
319,<S2SV_ModStart> urb ) ; kfree_skb ( skb ) ;,0
320,"<S2SV_ModStart>, yt2_0 ; WORD64 mul_1, mul_2, mul_3, mul_4, mul_5, mul_6 ; WORD64 mul_7, mul_8, mul_9, mul_10, mul_11, mul_12 ; <S2SV_ModStart> x_0, x_1 <S2SV_ModEnd> ; WORD32 x_l1_0 <S2SV_ModStart> x_l2_1 ) ; <S2SV_ModEnd> for ( i1 <S2SV_ModStart> x_h2_1 ) ; <S2SV_ModEnd> for ( i1 <S2SV_ModStart> x_h2_1 ) ; <S2SV_ModEnd> for ( i1 <S2SV_ModStart> x_l2_1 ) ; <S2SV_ModEnd> for ( i1 <S2SV_ModStart> x_l2_1 ) ; <S2SV_ModEnd> for ( i1 <S2SV_ModStart> x_l2_1 ) ; <S2SV_ModEnd> for ( i1 <S2SV_ModStart> x_h2_1 ) ; <S2SV_ModEnd> for ( i1 <S2SV_ModStart> x_h2_1 ) ; <S2SV_ModEnd> for ( i1 <S2SV_ModStart> x_h2_1 ) ; <S2SV_ModEnd> for ( i1 <S2SV_ModStart> x_h2_1 ) ; <S2SV_ModEnd> for ( i1 <S2SV_ModStart> x_h2_1 ) ; <S2SV_ModEnd> for ( i1 <S2SV_ModStart> x_h2_1 ) ; <S2SV_ModEnd> for ( i1 <S2SV_ModStart> x_h2_1 )",0
321,"<S2SV_ModStart> mntent -> mnt_dir, false",0
322,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
323,"<S2SV_ModStart> ( req ) ) ; rb_hash_set ( env, agoo_server. request_env_key, Qnil",0
324,<S2SV_ModStart> endif int col_type <S2SV_ModEnd> ; MYSQL_BIND * <S2SV_ModStart> ; # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID <S2SV_ModStart> endif # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID <S2SV_ModStart> ; # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID <S2SV_ModStart> ; # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID <S2SV_ModStart> ; # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID <S2SV_ModStart> ; # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID <S2SV_ModStart> ; # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID <S2SV_ModStart> ; # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID <S2SV_ModStart> ; # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID <S2SV_ModStart> ; # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID <S2SV_ModStart> ; # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID <S2SV_ModStart> ; # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID <S2SV_ModStart> ; # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID <S2SV_ModStart> ; # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID <S2SV_ModStart> ; # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID <S2SV_ModStart> ; # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID <S2SV_ModStart> ; # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID <S2SV_ModStart> ; # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID <S2SV_ModStart> ; # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID <S2SV_ModStart> ; # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID,0
325,"<S2SV_ModStart> need = 0, max_rows = screen -> max_row ; int max_cols = screen -> max_col <S2SV_ModStart> screen, { max_rows = max_rows? max_rows : 1 ;",0
326,"<S2SV_ModStart> fractionalDigits ) { int len_max = len ; <S2SV_ModStart> val ) ) strncpy_s ( str, len_max <S2SV_ModEnd>, ""NaN"", <S2SV_ModStart> < 0 ) strncpy_s ( str, len_max <S2SV_ModEnd>, ""-Infinity"", <S2SV_ModStart> ) ; else strncpy_s ( str, len_max <S2SV_ModEnd>, ""Infinity"",",0
327,<S2SV_ModStart> ( unlikely ( crng_ready ( ) <S2SV_ModEnd> == 0 ),0
328,"<S2SV_ModStart> LEX_ID ) { snprintf ( str, len, ""%s"" <S2SV_ModEnd>, ""ID:"", <S2SV_ModStart> len ) ; strcat <S2SV_ModEnd> ( str, <S2SV_ModStart> LEX_STR ) { snprintf ( str, len, ""%s"" <S2SV_ModEnd>, ""String:\'"", <S2SV_ModStart> len ) ; strcat <S2SV_ModEnd> ( str, <S2SV_ModStart> jslGetTokenValueAsString ( ) <S2SV_ModEnd> ) ; }",0
329,,1
330,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
331,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
332,"<S2SV_ModStart> ) { return memcmp <S2SV_ModEnd> ( s1,",0
333,"<S2SV_ModStart> ) ) { if (! <S2SV_ModStart>, NULL ) ) { s_log ( LOG_ERR, ""No <S2SV_blank> help <S2SV_blank> option <S2SV_blank> specified"" ) ; print_syntax ( ) ; return 1 ; } <S2SV_ModEnd> parse_service_option ( CMD_PRINT_HELP <S2SV_ModStart> ) ) { if (! <S2SV_ModStart>, NULL ) ) { s_log ( LOG_ERR, ""No <S2SV_blank> default <S2SV_blank> configuration <S2SV_blank> option <S2SV_blank> specified"" ) ; print_syntax ( ) ; return 1 ; } <S2SV_ModEnd> parse_service_option ( CMD_PRINT_DEFAULTS",0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,<S2SV_ModStart> ; if (! new_iv_set && <S2SV_ModStart> ; if (! new_iv_set &&,0
336,<S2SV_ModStart> ; } } if ( 0 == ps_dec -> u4_num_bytes_to_decode ) { ps_dec -> u4_num_bytes_to_decode = 0 ; },0
337,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static const <S2SV_ModStart> item ) { const char * ptr = <S2SV_ModEnd> item -> valuestring <S2SV_ModStart> item -> valuestring ; return ptr? ptr : """" <S2SV_ModEnd> ; } <S2SV_null>",0
338,"<S2SV_ModStart> -> iface -> enc_priv <S2SV_ModEnd>. encode ( <S2SV_ModStart> -> iface -> enc_priv <S2SV_ModEnd>, img, <S2SV_ModStart> ( res = vpx_codec_encode_internal <S2SV_ModEnd> ( ctx ->",0
339,"<S2SV_ModStart> ) ; } else if ( arg1 == 3 ) { win_maximise ( - 2 ) ; win_set_chars ( - 2, - 2 ) ; }",0
340,<S2SV_ModStart> i < cols <S2SV_ModEnd> ; i ++,0
341,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> i -> width ) || ( <S2SV_ModEnd> i -> height <S2SV_ModStart> i -> height ) || ( <S2SV_ModEnd> context. curX <S2SV_ModStart> i -> width ) || ( <S2SV_ModEnd> context. curY <S2SV_ModStart> i -> height ) || ( <S2SV_ModEnd> context. curX <S2SV_ModStart> i -> width ) || ( <S2SV_ModEnd> context. curY <S2SV_ModStart> i -> height ) || ( <S2SV_ModEnd> context. curY <S2SV_ModStart> i -> height ) || ( <S2SV_ModEnd> context. curY <S2SV_ModStart> i -> height ) || ( <S2SV_ModEnd> context. curY <S2SV_ModStart> i -> height ) || ( <S2SV_ModEnd> ( context. <S2SV_ModStart> i -> height ) || ( <S2SV_ModEnd> ( context. <S2SV_ModStart> i -> width ) || ( <S2SV_ModEnd> ( context. <S2SV_ModStart> i -> height ) || ( <S2SV_ModEnd> ( context. <S2SV_ModStart> i -> height ) || ( <S2SV_ModEnd> ( context. <S2SV_ModStart> i -> height ) ) ) ) ),0
342,"<S2SV_ModStart> encode_term_subexp ( vp9_writer <S2SV_ModEnd> w, int <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",0
343,<S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; },0
344,"<S2SV_ModStart> ) ) { if ( psf -> psf_debug ) { fprintf ( psf -> stderr, ""format <S2SV_blank> string <S2SV_blank> %c <S2SV_blank> not <S2SV_blank> recognized\\n"", c ) ; }",0
345,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
346,"<S2SV_ModStart> 0 ; } if ( copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) == - 1 ) { fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> copy <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; return 0 ; } <S2SV_ModStart> ; else { <S2SV_ModEnd> } _exit (",0
347,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> BLOCK_8X8 : return vpx_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> BLOCK_16X8 : return vpx_mse16x8 <S2SV_ModEnd> ; case BLOCK_8X16 <S2SV_ModStart> default : return vpx_mse8x16 <S2SV_ModEnd> ; } },0
348,<S2SV_ModStart> ; if (! subjectPublicKey ||! server_key ||! dh_pubkey ||! server_key_len ) { retval = KRB5_E_INVALID_PARAM ; goto done ; } if ( <S2SV_ModStart> ) ; } done :,0
349,"<S2SV_ModStart> flags ) ; if (! vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } <S2SV_ModStart> vb. vb2_buf <S2SV_ModEnd> ) ; if",0
350,<S2SV_ModStart> size ) { if ( size > SIZE_MAX - PREFIX_SIZE ) { zmalloc_oom_handler ( size ) ; return NULL ; },0
351,<S2SV_ModStart> & rxh -> serviceID <S2SV_ModEnd> ) && rxent,0
352,"<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len > MWIFIEX_MAX_SSID_LEN ) { mwifiex_dbg ( adapter, ERROR, ""Invalid <S2SV_blank> SSID <S2SV_blank> length <S2SV_blank> %d\\n"", req_ssid -> ssid_len ) ; return - 1 ; }",0
353,"<S2SV_ModStart> ; if (! xfs_attr_shortform_needs_sort ( dp, sf ) <S2SV_ModEnd> ) { error",0
354,"<S2SV_ModStart> struct l2cap_conf_rfc rfc <S2SV_ModEnd> ; void * <S2SV_ModStart> sk ) ; rfc = { 0 } ; <S2SV_ModStart> = L2CAP_MODE_ERTM ; if ( pi -> txwin_size > L2CAP_DEFAULT_TX_WINDOW ) { l2cap_add_conf_opt ( & ptr, L2CAP_CONF_TXWINDOW, 2, L2CAP_DEFAULT_TX_WINDOW ) ; } <S2SV_ModStart> = L2CAP_DEFAULT_MAX_RECEIVE ; if ( pi -> retrans_timeout > L2CAP_DEFAULT_RETRANS_TO ) { l2cap_add_conf_opt ( & ptr, L2CAP_CONF_RETRANS_TIMEOUT, 2, L2CAP_DEFAULT_RETRANS_TO ) ; } <S2SV_ModStart> = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO <S2SV_ModEnd> ) ; rfc <S2SV_ModStart> = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU <S2SV_ModEnd> ) ; l2cap_add_conf_opt",0
355,"<S2SV_ModStart> r ) { if (! TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_WAITALL ) ) ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> r:%d"", sock_fd, errno, r ) ; return - 1 ; } <S2SV_ModEnd> ret = recv",0
356,<S2SV_ModStart> ) ) { if ( ps_dec -> u4_nal_ref_idc == IDR_SLICE_NAL ) { <S2SV_ModStart> u4_length ) ; },0
357,"<S2SV_ModStart> tok ) ; if ( pair == NULL ) { mprLog ( LOG_WARNING, ""Invalid <S2SV_blank> form <S2SV_blank> variable <S2SV_blank> \\""%s\\"""", buf ) ; return ; }",0
358,"<S2SV_ModStart> delegation, int fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> = 0 ; fmode <S2SV_ModEnd> &= ( FMODE_READ <S2SV_ModStart> -> type & fmode <S2SV_ModEnd> )!= open_flags <S2SV_ModStart> -> stateid, fmode <S2SV_ModEnd> ) ; ret <S2SV_ModStart>, NULL, fmode <S2SV_ModEnd> ) ; ret",0
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,"<S2SV_ModStart> * xd, int64_t rate_sum, int64_t dist_sum, int64_t <S2SV_ModEnd> * out_dist_sum ) <S2SV_ModStart> out_dist_sum ) { int64_t sse = 0 ; int64_t rate_sum_inv = 0 ; int64_t dist_inv = 0 ; <S2SV_ModStart> i ) { const struct macroblockd_plane * const pd = & xd -> plane [ i ] ; const BLOCK_SIZE bs = get_plane_block_size ( bsize, pd ) ; <S2SV_ModStart> == 0 ) { <S2SV_ModStart> = sse ; } <S2SV_ModStart> == 0 ) { <S2SV_ModStart> = sse ; } <S2SV_ModStart> 4 ) { <S2SV_ModEnd> int quantizer = <S2SV_ModStart> } else { <S2SV_ModEnd> vp9_model_rd_from_var_lapndz ( sse <S2SV_ModStart> ; } } } <S2SV_ModStart> * out_rate_sum = rate_sum_inv <S2SV_ModEnd> ; * out_dist_sum",0
361,<S2SV_ModStart> } if ( pmd_trans_unstable <S2SV_ModEnd> ( pmd ),0
362,<S2SV_ModStart> { if ( index >= PAM_MAX_RESP_SIZE ) { return ( PAM_BUF_ERR ) ; } if ( <S2SV_ModStart> == NULL ) { free ( * ret_username ) ; <S2SV_ModStart> PAM_BUF_ERR ) ; },0
363,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> seg ) { vpx_read_tree <S2SV_ModEnd> ( r, <S2SV_ModStart> ( r, vpx_segment_tree <S2SV_ModEnd>, seg ->",0
364,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",1
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,<S2SV_ModStart> depth ++ ; if ( depth > MAXDEPTH ) return ( NULL ) ;,0
367,<S2SV_ModStart> ERROR_INVALID_LENGTH ; } if ( ( length + 8 ) > netBufferGetLength ( buffer ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_INVALID_LENGTH ; } <S2SV_ModStart> length ) ; if ( ( length + 8 ) > netBufferGetLength ( context -> txBuffer ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_INVALID_LENGTH ; } <S2SV_ModStart> length ) ; if ( ( length + 8 ) > netBufferGetLength ( context -> txBuffer ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_INVALID_LENGTH ; } <S2SV_ModStart> RXQCR_SDA ) ; if ( ( length + 8 ) > netBufferGetLength ( context -> txBuffer ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_INVALID_LENGTH ; } <S2SV_ModStart> TXQCR_METFE ) ; if ( ( length + 8 ) > netBufferGetLength ( buffer ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_INVALID_LENGTH ; },0
368,<S2SV_ModStart> ( ) ; mono_attach_maybe_stop ( ) ;,0
369,"<S2SV_ModStart>, x_e, x_f ; WORD32 n0, j0 ; WORD32 * x2, * x0 ; WORD32 * y0, * y1, * y2, * y3 ; WORD32 n0, j1, n0, j2, n0, j1, n0, j2, n0, j1, n0, j2, n0, j1, n0, j2 <S2SV_ModEnd> ; WORD32 n00 <S2SV_ModStart> x0 ++ ; j1 = ( WORD32 ) ( npoints >> 2 ) ; n0 = ( WORD32 ) ( npoints >> 1 ) ; n2 = ( WORD32 ) ( npoints >> 2 ) ; n3 = ( WORD32 ) ( npoints >> 2 ) ; n4 = ( WORD32 ) ( npoints >> 1 ) ; n5 = ( WORD32 ) ( npoints >> 1 ) ; n6 = ( WORD32 ) ( npoints >> 2 ) ; n7 = ( WORD32 ) ( npoints >> 2 ) ; n8 = ( WORD32 ) ( npoints >> 1 ) ; n9 = ( WORD32 ) ( npoints >> 2",0
370,<S2SV_ModStart> ; if ( pmd_none_or_clear_bad ( pmd ) ) { if ( <S2SV_ModStart> ) continue ; } <S2SV_ModEnd> ret = unuse_pte_range,0
371,"<S2SV_ModStart>, frames ; <S2SV_ModEnd> if ( argc <S2SV_ModStart> ""Incorrect <S2SV_blank> parameters:\\n"" ) ; fprintf ( stderr, ""usage: <S2SV_blank> %s <S2SV_blank> <filename>\\n"", argv [ 0 ] ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( argv [ 2 ], & width ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; fprintf ( stderr, ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; fprintf ( stderr, ""usage: <S2SV_blank> %s <S2SV_blank> <width> <S2SV_blank> <height> <S2SV_blank> <target_width> <S2SV_blank> <target_height>\\n"", argv [ 0 ] ) ; return 1 ; } fin = argv [ 2 ] ; fout = argv [ 3 ] ; if (! parse_dim ( argv [ 3 ], & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; fprintf ( stderr, ""usage: <S2SV_blank> %s <S2SV_blank> <filename>\\n"", argv [ 0 ] ) ; return 1 ; } if (! parse_dim (",0
372,"<S2SV_ModStart> num_fields ) { <S2SV_ModEnd> _Py_IDENTIFIER ( _attributes <S2SV_ModStart> i, result <S2SV_ModEnd> ; PyObject * <S2SV_ModStart> ) ; } return <S2SV_ModEnd> _PyObject_SetAttrId ( (",0
373,<S2SV_ModStart> = VPX_CODEC_OK ; vpx_codec_alg_priv_t <S2SV_ModEnd> * priv ; <S2SV_ModStart> priv ) { struct vpx_codec_alg_priv * priv ; <S2SV_ModStart> VPX_CODEC_MEM_ERROR ; } priv = & priv -> base ; ctx -> priv -> sz = sizeof ( * ctx -> priv ) ; ctx -> priv -> iface = ctx -> iface ; ctx -> priv -> alg_priv = priv ; ctx -> priv -> init_flags = ctx -> init_flags ; if ( ctx -> config. enc ) { <S2SV_ModStart> -> config. enc <S2SV_ModEnd> = & ctx <S2SV_ModStart> -> priv -> <S2SV_ModEnd> cfg ; } <S2SV_ModStart> ++ ) ; priv -> cfg = extracfg_map [ i ]. cfg ; priv <S2SV_ModEnd> -> vp8_cfg = <S2SV_ModStart> i ]. <S2SV_ModEnd> cfg ; priv,0
374,"<S2SV_ModStart>, rc, x, cnt_x, cnt_c, totfr, c <S2SV_ModEnd> ) ) <",0
375,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx ->,0
376,"<S2SV_ModStart> ) ) { if ( iinfo -> i_location. l_len > UDF_I ( inode ) -> i_sb -> s_blocksize ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> inode <S2SV_blank> %s <S2SV_blank> has <S2SV_blank> invalid <S2SV_blank> location\\n"", inode -> i_ino, ""inode <S2SV_blank> %s <S2SV_blank> has <S2SV_blank> invalid <S2SV_blank> location\\n"", UDF_I ( inode ) -> i_sb -> s_blocksize, UDF_I ( inode ) -> i_sb -> s_blocksize ) ; goto out ; }",0
377,"<S2SV_ModStart> data ) { uint8_t data_reg = ENC28J60_MIREGADR_PHY_DATA_BASE_ADDR_0 | ( address & REG_ADDR_MASK ) ; <S2SV_ModStart>, ENC28J60_REG_MIREGADR, data_reg <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> ) & MISTAT_BUSY",0
378,<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline <S2SV_ModStart> char * ptr <S2SV_ModEnd> ; ptr = <S2SV_ModStart> 'S' ) { return 1 <S2SV_ModEnd> ; } else <S2SV_ModStart> } } return 0 <S2SV_ModEnd> ; } <S2SV_null>,0
379,"<S2SV_ModStart> ; # endif DefragRegisterTest ( ""DefragInOrderTest2"", DefragInOrderTest2 ) ;",0
380,<S2SV_ModStart> ; if ( object_length > 0 &&,0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,<S2SV_ModStart> p_sys -> b_eos_pulled || p_sys -> p_schro -> p_last_frame_id > p_enc -> p_last_frame_id,0
384,<S2SV_ModStart> ; if ( bfname. len &&,0
385,<S2SV_ModStart> 4 ) ; if ( len < 4 ) return NULL ;,0
386,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
387,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * fb ; if ( ctx -> pbi -> num_channels > VPX_MAX_CHANNELS ) { return VPX_CODEC_INVALID_PARAM ; } <S2SV_ModStart> * fb ; if ( ctx -> pbi -> num_channels > VPX_MAX_CHANNELS ) { return VPX_CODEC_INVALID_PARAM ; }",0
388,<S2SV_ModStart> ; if ( <S2SV_ModEnd> unit >= JPEG_UNIT_COUNT <S2SV_ModStart> ; if ( <S2SV_ModEnd> unit >= JPEG_UNIT_COUNT <S2SV_ModStart> ; if ( <S2SV_ModEnd> unit >= JPEG_UNIT_COUNT <S2SV_ModStart> ; if ( <S2SV_ModEnd> unit >= JPEG_UNIT_COUNT <S2SV_ModStart> ; if ( <S2SV_ModEnd> unit >= JPEG_UNIT_COUNT <S2SV_ModStart> ; if ( <S2SV_ModEnd> unit >= JPEG_UNIT_COUNT <S2SV_ModStart> ; if ( <S2SV_ModEnd> unit >= JPEG_UNIT_COUNT <S2SV_ModStart> ; if ( <S2SV_ModEnd> unit >= JPEG_UNIT_COUNT <S2SV_ModStart> ; if ( <S2SV_ModEnd> unit >= JPEG_UNIT_COUNT <S2SV_ModStart> ; if ( <S2SV_ModEnd> unit >= JPEG_UNIT_COUNT <S2SV_ModStart> ; if ( <S2SV_ModEnd> unit >= JPEG_UNIT_COUNT <S2SV_ModStart> ; if ( <S2SV_ModEnd> unit >= JPEG_UNIT_COUNT <S2SV_ModStart> ; if ( <S2SV_ModEnd> unit >= JPEG_UNIT_COUNT <S2SV_ModStart> ; if ( <S2SV_ModEnd> unit >= JPEG_UNIT_COUNT <S2SV_ModStart> ; if ( <S2SV_ModEnd> unit >= JPEG_UNIT_COUNT <S2SV_ModStart> ; if ( <S2SV_ModEnd> unit >= JPEG_UNIT_COUNT <S2SV_ModStart> ; if ( <S2SV_ModEnd> unit >= JPEG_UNIT_COUNT <S2SV_ModStart> ; if ( <S2SV_ModEnd> unit >= JPEG_UNIT_COUNT <S2SV_ModStart> ; if ( <S2SV_ModEnd> unit >= JPEG_UNIT_COUNT <S2SV_ModStart> ; if ( <S2SV_ModEnd> unit >= JPEG_UNIT_COUNT <S2SV_ModStart> ; if ( <S2SV_ModEnd> unit >= JPEG_UNIT_COUNT,0
389,"<S2SV_ModStart> expr_stmt ) ; REQ ( CHILD ( n, 0 ), testlist_ty ) ;",0
390,"<S2SV_ModStart> int vp8_denoiser_filter_c ( <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * mc_running_avg, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * running_avg, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * sig, <S2SV_ModEnd> unsigned int motion_magnitude <S2SV_ModStart> int r, c, i ; int sum_diff = 0 ; int adj_val [ 3 ] = { 3, 4, 6 } ; int r, c <S2SV_ModEnd> ; int sum_diff <S2SV_ModStart> -> y_stride ; <S2SV_ModEnd> if ( motion_magnitude <S2SV_ModStart> MOTION_MAGNITUDE_THRESHOLD ) { <S2SV_ModEnd> if ( motion_magnitude <S2SV_ModStart> MOTION_MAGNITUDE_THRESHOLD ) { int i ; <S2SV_ModStart> diff ) ; diff = mc_running_avg [ c ] - sig [ c ] ; absdiff = abs ( diff ) ; <S2SV_ModStart> if ( absdiff >= <S2SV_ModEnd> 3 ) { <S2SV_ModStart> c ] ; <S2SV_ModEnd> } else { <S2SV_ModStart> += adjustment ; <S2SV_ModEnd> } else { <S2SV_ModStart> += adjustment ; <S2SV_ModEnd> } } } <S2SV_ModStart> += adjustment ; <S2SV_ModEnd> } } } <S2SV_ModStart> += adjustment ; <S2SV_ModEnd> } } <S2SV_null>",0
391,<S2SV_ModStart> ) ) { if ( ( sockPtr -> flags & NS_SOCK_NONBLOCK )!= 0u ) { <S2SV_ModStart> ) ) ; },0
392,<S2SV_ModStart> ret = 0 ; xtregs -> cp0 &= ~ XTENSA_CP_MASK,0
393,"<S2SV_ModStart> size ) ; if ( message -> length == 0 ) { osLog ( LOG_WARNING, ""Error <S2SV_blank> reading <S2SV_blank> from <S2SV_blank> IP <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> queue <S2SV_blank> item <S2SV_blank> of <S2SV_blank> type <S2SV_blank> %d"", queueItem -> type ) ; error = ERROR_TIMEOUT ; }",0
394,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" <S2SV_ModStart> cg_item ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
395,<S2SV_ModStart> int error ; int old_block = EXT2_I ( inode ) -> i_block_group ; <S2SV_ModStart> new_bh ) ; new_block = <S2SV_ModStart> new_bh ) ; if ( new_block ),0
396,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
397,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
398,"<S2SV_ModStart>, 0, <S2SV_ModEnd> 0 ) ;",0
399,"<S2SV_ModStart> * imsy, MagickFalse <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) ; } if ( ( void ) ResetQuantumMemory ( imbuf, imsx * imsy, 1 ) == MagickFalse ) { return ( MagickFalse ) ; }",0
400,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vpx_ref_frame_t * ) ; VPxCipherData * cipher = ( VPxCipherData * ) ctx -> data <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; if (! frame -> is_yuv_frame ) { return VPX_CODEC_INVALID_PARAM ; } <S2SV_ModStart> sd ) ; if (! ctx -> pbi ) { return VPX_CODEC_INVALID_PARAM ; } <S2SV_ModStart> sd ) ; if (! ctx -> pbi -> copy_reference_dec ) { return VPX_CODEC_INVALID_PARAM ; } <S2SV_ModStart> vp9_copy_reference_dec ( ctx <S2SV_ModEnd>, ( VP9_REFFRAME",0
401,<S2SV_ModStart> u1_num_mbs_next ) { if ( u1_num_mbsNby2 > ps_dec -> u2_num_slice_in_pic ) { return ERROR_SLICE_COUNT_OVERFLOW ; },0
402,<S2SV_ModStart> ; UWORD32 u4_x_dst_offset <S2SV_ModEnd> = 0 ; <S2SV_ModStart> ) ; else { <S2SV_ModStart> ps_dec ) ; },0
403,<S2SV_ModStart> VP9_LAST_FLAG ) { int i ; for ( i = 0 ; i < cm -> num_frame_bufs ; i ++ ) { YV12_BUFFER_CONFIG * const cfg = <S2SV_ModEnd> cm -> frame_bufs <S2SV_ModStart> -> frame_bufs [ i <S2SV_ModEnd> ]. buf <S2SV_ModStart> ) ; } },0
404,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
405,"<S2SV_ModStart> TX_SIZE tx_size = get_plane_tx_size ( pd, plane <S2SV_ModEnd> ) : mbmi <S2SV_ModStart> ; int i <S2SV_ModEnd> ; int max_blocks_wide <S2SV_ModStart> ) ) ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) { int r, c ; int max_blocks_wide = num_4x4_w ; int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> ( 5 + pd -> subsampling_y ) ) ; i = 0 ; for ( r = 0 ; r < num_4x4_w ; r += ( 1 << tx_size ) ) { for ( c = 0 ; c < num_4x4_w ; c += ( 1 << tx_size ) ) { if ( r < max_blocks_",0
406,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 4 ) ; <S2SV_ModEnd> src += src_stride",0
407,"<S2SV_ModStart> nrow ) { uint32 rowoffset = img -> row_offset ; <S2SV_ModStart> = rowsperstrip - rowoffset <S2SV_ModEnd> ; nrow = <S2SV_ModStart> -> row_offset ; if ( offset_row >= h ) { TIFFErrorExt ( tif -> tif_clientdata, ""Error <S2SV_blank> reading <S2SV_blank> row <S2SV_blank> offset <S2SV_blank> %u"", offset_row ) ; return ( 0 ) ; } <S2SV_ModStart> -> row_offset ; if ( rowoffset >= h ) { TIFFErrorExt ( tif -> tif_clientdata, ""Error <S2SV_blank> reading <S2SV_blank> row <S2SV_blank> offset <S2SV_blank> %u"", rowoffset ) ; return ( 0 ) ; } <S2SV_ModStart> -> row_offset ; if ( rowoffset >= h ) { TIFFErrorExt ( tif -> tif_clientdata, ""Error <S2SV_blank> reading <S2SV_blank> row <S2SV_blank> offset <S2SV_blank> %u"", rowoffset ) ; return ( 0 ) ; } <S2SV_ModStart> -> row_offset ; if ( rowoffset >= h ) { TIFFErrorExt ( tif -> tif_clientdata, ""Error <S2SV_blank> reading <S2SV_blank> row <S2SV_blank> offset <S2SV_blank> %u"", rowoffset ) ; return ( 0 ) ; } <S2SV_ModStart> -> row_offset ; if ( rowoffset >= h ) { TIFFErrorExt ( tif -> t",0
408,<S2SV_ModStart> ; } } <S2SV_ModEnd> return 0 ;,0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr <S2SV_ModEnd> [ psf -> <S2SV_ModStart> [ psf -> header. ptr <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ; psf -> header. ptr <S2SV_ModEnd> [ psf -> <S2SV_ModStart> [ psf -> header. ptr <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
410,<S2SV_ModStart> num & ( 1U <S2SV_ModEnd> << ( number,0
411,"<S2SV_ModStart> ] ; const size_t <S2SV_ModEnd> w = vpx_img_plane_width <S2SV_ModStart> y ) { int bytes_read = <S2SV_ModEnd> fread ( buf <S2SV_ModStart>, file ) ; if ( bytes_read == 0 ) return 0 ; if ( bytes_read",0
412,"<S2SV_ModStart> = NULL ; uint8_t * avp_buf ; <S2SV_ModStart> uint16_t last_block_len ; uint8_t * avp_buf ; <S2SV_ModStart> 1 ; } avp_buf = avp + <S2SV_ModEnd> sizeof ( struct <S2SV_ModStart> struct l2tp_avp_t ) ; avp_buf = avp_buf + sizeof ( struct l2tp_avp_t ) <S2SV_ModStart> md5_ctx ) ; memcpy ( avp_buf, p1, MD5_DIGEST_LENGTH ) ; if ( avp_buf == avp -> val ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> AVP <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } <S2SV_ModStart> ( p1, avp_buf <S2SV_ModEnd>, MD5_DIGEST_LENGTH ) <S2SV_ModStart> ( p1, avp_buf <S2SV_ModEnd>, MD5_DIGEST_LENGTH ) <S2SV_ModStart> ( p1, avp_buf <S2SV_ModEnd>, MD5_DIGEST_LENGTH )",0
413,<S2SV_ModStart> case EVP_CTRL_AEAD_SET_IV_FIXED : if ( arg < 2 ) return 0 ;,0
414,"<S2SV_ModStart>, 0, comm_event -> comm_size <S2SV_ModEnd> ) ; if",0
415,"<S2SV_ModStart>, sk ) ; if (! sk ) return - EINVAL",0
416,<S2SV_ModStart> MT_CPTYPE_PASSSALT ) { if ( cpkt. length > MT_PASS_SALT_MAX_LEN ) { return - 1 ; },0
417,<S2SV_ModStart> MUTT_ABORT ) { mutt_socket_close ( adata -> conn ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; mutt_socket_close ( adata -> conn ) ; return - 1 <S2SV_ModEnd> ; } else <S2SV_ModStart> ) ) ; mutt_socket_close ( adata -> conn ) ; return - 1 <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ) ; mutt_socket_close ( adata -> conn ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; mutt_socket_close ( adata -> conn ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; mutt_socket_close ( adata -> conn ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; mutt_socket_close ( adata -> conn ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; mutt_socket_close ( adata -> conn ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; mutt_socket_close ( adata -> conn ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; mutt_socket_close ( adata -> conn ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; mutt_socket_close ( adata -> conn ) ; return - 1,0
418,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
419,"<S2SV_ModStart> ) ) ; if ( <S2SV_ModStart>, 0 ) < 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModEnd> memset ( line",0
420,"<S2SV_ModStart> remainder, & rlen ) ; if (! ret && rlen == 0 ) return ASN1_BAD_ID <S2SV_ModEnd> ; if (",0
421,"<S2SV_ModStart> * slavename ; char * pass_salt ; <S2SV_ModStart> } # endif pass_salt = malloc ( strlen ( curconn -> pass_salt ) + 1 ) ; if (! pass_salt ) { syslog ( LOG_ERR, _ ( ""login <S2SV_blank> failed, <S2SV_blank> incorrect <S2SV_blank> username <S2SV_blank> or <S2SV_blank> password\\r\\n"" ) ) ; abort_connection ( curconn, pkthdr, _ ( ""Login <S2SV_blank> failed, <S2SV_blank> incorrect <S2SV_blank> username <S2SV_blank> or <S2SV_blank> password\\r\\n"" ) ) ; return ; } <S2SV_ModStart> -> password, pass_salt, 16 ) ; memcpy ( md5data + 1 + strlen ( user -> password ), curconn -> pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( user -> password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; md5sum [ 0 ] = 0 ; init_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr, pkth",0
422,"<S2SV_ModStart> ; if ( unicode_compare_with_ASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart> { if ( unicode_compare_with_ASCIIString <S2SV_ModEnd> ( name,",0
423,<S2SV_ModStart> off } ; if ( str == NULL ) { return - 1 ; },0
424,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
425,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
426,"<S2SV_ModStart> size_t s ; size_t sz ; <S2SV_ModStart> return ; } sz = exif_get_long ( o, EXIF_BYTE_ORDER_INTEL ) ; if ( sz > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } <S2SV_ModStart> s ) ; if ( sz > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; }",0
427,<S2SV_ModStart> bd_addr ) { if ( bd_addr -> bd_flags & BT_BD_ADDR_FLAG_TINY ) return BT_STATUS_SUCCESS ;,0
428,"<S2SV_ModStart> int i ; size_t avail ; size_t <S2SV_ModEnd> expect ; txid <S2SV_ModStart> 4 ) ; expect = 8 + 8 + nxip * 8 ; if ( nxip < 0 || nxip > avail || expect > avail ) goto bad_format ; xmin = pq_getmsgint64 ( buf ) ; xmax = pq_getmsgint64 ( buf ) ; if ( xmin == 0 || xmin > xmax || xmax > MAX_TXID ) goto bad_format ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; snap -> nxip = nxip ; SET_VARSIZE ( snap, TXID_SNAPSHOT_SIZE ( nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last || cur < xmin || cur >= xmax ) goto bad_format ; snap -> xip [ i ] = cur ; last = cur ; } PG_RETURN_POINTER ( snap ) ; bad_format : elog ( ERROR, ""invalid <S2SV_blank> snapshot <S2SV_blank> data"" ) ; return ( Datum ) NULL <S2SV_ModEnd> ; } <S2SV_null>",0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
430,"<S2SV_ModStart> ( epoll_ ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> OE_EINVAL ) ; else ret = _epoll_io ( epoll_, buf, count ) ;",0
431,"<S2SV_ModStart> ( CMD_INITIALIZE, & new_global_options. option <S2SV_ModEnd>, NULL ) <S2SV_ModStart> ( CMD_INITIALIZE, & new_service_options. option <S2SV_ModEnd>, NULL )",0
432,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_PHNUM_MIN : * ( size_t * ) val = ms -> elf_phnum_min ; return 0 ;,0
433,"<S2SV_ModStart> offset ) { struct address_space * mapping = page -> mapping ; <S2SV_ModStart> = EXT4_JOURNAL ( <S2SV_ModEnd> host ) ; <S2SV_ModStart> ; if ( mapping &&! test_bit ( AS_ENOSPC, & mapping -> flags ) ) { if (! try_get_page ( page ) ) { ClearPageError ( page ) ; return ; } ext4_journal_invalidatepage ( journal, page, offset ) ; } else { <S2SV_ModEnd> jbd2_journal_invalidatepage ( journal <S2SV_ModStart> ) ; } }",0
434,<S2SV_ModStart> ++ ) { if (! ( <S2SV_ModStart> + 1 ) ) ) return GF_NO_MEMORY <S2SV_ModStart> ; exit : if ( trak ),0
435,"<S2SV_ModStart> 17 ] ; unsigned char pass_salt [ 16 ] ; <S2SV_ModStart> = 0 ; strlcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart>, password, sizeof ( password ) - 1 <S2SV_ModEnd> ) ; md5data <S2SV_ModStart> = '\\0' ; strlcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> + 1 + ( <S2SV_ModStart> strlen ( password ) - 1",0
436,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( Prefix,0
437,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
438,<S2SV_ModStart> ( ) ; g_hash_table_remove_all ( headers ) ;,0
439,"<S2SV_ModStart> -> y_buffer ; if ( src_ybc -> y_height > ( ( ( int64_t ) dst_ybc -> y_buffer ) >> ( 32 - 8 ) ) / 8 ) { return ; } <S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst,",0
440,"<S2SV_ModStart> * cpi, MACROBLOCK * x, <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart>",0
441,"<S2SV_ModStart>, obj_tlen ; u_int <S2SV_ModEnd> offset ; u_int <S2SV_ModStart> ; if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""LMP <S2SV_blank> packet <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if (",0
442,"<S2SV_ModStart> mbmi, const MV_MODE_INFO <S2SV_ModEnd> * mvs [ <S2SV_ModStart> i ) { <S2SV_ModEnd> MV * ref <S2SV_ModStart> ref = & ( <S2SV_ModStart> [ i ] ) <S2SV_ModStart> 0 ]. mv <S2SV_ModEnd> ; vp9_inc_mv (",0
443,"<S2SV_ModStart> ) ; } res = vpx_codec_enc_config_default ( encoder -> interface ( ), & cfg, 0 ) ; if ( res ) die_codec ( & codec, & cfg ) ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if (!",0
444,<S2SV_ModStart> ; if ( skb_out -> len < size - hdr_size ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; } if (,0
445,<S2SV_ModStart> ) return ; if (! <S2SV_ModStart> netsnmp_mibindex_load ( ) ) { SNMP_FREE ( env_var ) ; return ; } <S2SV_ModEnd> DEBUGMSGTL ( (,0
446,"<S2SV_ModStart> { fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ], O_RDWR ) <S2SV_ModStart> 1 ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_KEY ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_REL ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModEnd> ioctl ( fd <S2SV_ModStart>, EV_SYN ) ) <S2SV_ModStart> x ++ ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> ]. mapped_id )",0
447,<S2SV_ModStart> i ++ ) vp9_free_frame_buffer_ext <S2SV_ModEnd> ( & ctx,0
448,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s, <S2SV_ModStart> & 1 ) vpx_lpf_vertical_4 <S2SV_ModEnd> ( s +",0
449,<S2SV_ModStart> krb5_error_code iakerb_alloc_context ( krb5_ctx_id_t * ctx_id <S2SV_ModEnd> ) { iakerb_ctx_id_t <S2SV_ModStart> pctx ) { krb5_ctx_id_t ctx ; krb5_error_code code <S2SV_ModEnd> ; ctx = <S2SV_ModStart> = 0 ; ctx -> ctx_id = ctx_id ; code = krb5_gss_init_context ( & ctx -> k5c ) ; if ( code!= 0 ) goto cleanup ; ctx -> ctx_id = ctx ; code = krb5_gss_set_default_context ( & ctx -> k5c ) ; if ( code!= 0 ) goto cleanup ; ctx -> ctx_id = ctx_id <S2SV_ModEnd> ; cleanup :,0
450,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> bitmapDC = CreateCompatibleDC",1
451,<S2SV_ModStart> ; while ( ( <S2SV_ModStart> )!= START_CODE_PREFIX ) && ( ps_stream -> u4_offset < ps_stream -> u4_max_offset ),1
452,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { kfree ( string ) ; <S2SV_ModStart> - EINVAL ; }",0
453,"<S2SV_ModStart> ) ) ; mono_reflection_error ( rmethod, ""bind_generic_method_parameters"" <S2SV_ModEnd> ) ; return",0
454,<S2SV_ModStart> ) ] ; long <S2SV_ModEnd> tmp ; if <S2SV_ModStart> count ) ) { uml_exitcode = tmp ; <S2SV_ModStart> - EFAULT ; },0
455,<S2SV_ModStart> char * last_elem = NULL <S2SV_ModStart> size_t len ; int is_secure = 0 ; <S2SV_ModStart> == 'O' ) && ( is_path || * name == ':' ) ) { is_secure = 1 ; } <S2SV_ModEnd> repl = ( <S2SV_ModStart> l -> l_origin <S2SV_ModEnd> ) ; if,0
456,"<S2SV_ModStart> ) ; } if ( decInst -> numSamples < 1 ) { DEC_API_TRC ( ""H264SwDecInit# <S2SV_blank> ERROR: <S2SV_blank> numSamples <S2SV_blank> <= <S2SV_blank> 1"" ) ; return ( H264SWDEC_PARAM_ERR ) ; }",0
457,<S2SV_ModStart> drop ; } <S2SV_ModEnd> opt -> optlen,0
458,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
459,<S2SV_ModStart> goto errout ; if ( info -> stages > MAX_STAGES ) { _ogg_free ( info -> stagemasks ) ; _ogg_free ( info -> stagebooks ) ; _ogg_free ( info ) ; return - 1 ; },0
460,<S2SV_ModStart> krb5_key_data * key_data ; int max_key_size = 0 <S2SV_ModStart> == NULL ) { max_key_size = n_key_data ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { max_key_size = 0 ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { max_key_size = 0 ; <S2SV_ModStart> goto cleanup ; },0
461,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject <S2SV_ModStart> value ) { size_t new_idx ; <S2SV_ModStart> ) ; } new_idx = ( size_t ) idx ; if ( new_idx >= self -> memo_len ) { return - 1 ; } <S2SV_ModStart> -> memo [ new_idx <S2SV_ModEnd> ] ; self <S2SV_ModStart> -> memo [ new_idx <S2SV_ModEnd> ] = value",0
462,<S2SV_ModStart> ] ) ; if ( nByte > 0 ) { <S2SV_ModStart> } } } },0
463,"<S2SV_ModStart> filp ) { struct socket_info * si = <S2SV_ModEnd> SOCKET_I ( inode <S2SV_ModStart> ( inode ) ; struct sockaddr_storage saddr ; struct sockaddr_storage * saddr ; struct sockaddr_storage * saddr_storage ; si -> si_family = AF_UNSPEC ; saddr_storage = & si -> si_addr ; saddr_storage -> si_addr_type = 0 ; saddr_storage -> si_addr_scope = NULL ; saddr_storage -> si_addr_scope = NULL ; saddr_storage -> si_addr_scope_flags = 0 ; i_size_read ( inode -> i_sb, & saddr, sizeof ( saddr ) ) ; i_size_write ( inode -> i_sb, & saddr_storage, sizeof ( saddr_storage ) ) ; i_size_write ( inode -> i_sb, & saddr_storage -> si_addr, SADDR_LEN ) ; if (! S_ISBLK ( saddr_storage -> si_type ) ) { struct sockaddr_storage * s = SOCKET_I ( inode ) ; if (! S_ISBLK ( saddr_",0
464,"<S2SV_ModStart> * orelse, bool is_block, <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. is_block = is_block",0
465,"<S2SV_ModStart> char * name, my_bool * is_shared <S2SV_ModStart> ; if ( is_shared ) * is_shared = 0 ; if (",0
466,"<S2SV_ModStart> return ""Invalid <S2SV_blank> request <S2SV_blank> ID"" ; case NGHTTP2_ERR_INVALID_REQUEST_ID : return ""Invalid <S2SV_blank> request <S2SV_blank> ID"" ;",0
467,"<S2SV_ModStart> UINT error ; if (! <S2SV_ModStart>, eventId ) ||! <S2SV_ModEnd> Stream_Read_UINT32 ( s <S2SV_ModStart>, pduLength ) ) { WLog_ERR ( TAG, ""Failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> eventId <S2SV_blank> %d, <S2SV_blank> pduLength <S2SV_blank> %d"", eventId, pduLength ) ; return CHANNEL_RC_ERROR ; } <S2SV_ModEnd> # ifdef WITH_DEBUG_RDPEI",0
468,"<S2SV_ModStart> ) ; } if ( pData -> socket == INVALID_SOCKET ) { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"", pData -> description, zmq_strerror ( errno ) ) ; ABORT_FINALIZE ( RS_RET_NO_ERRCODE ) ; }",0
469,"<S2SV_ModStart> struct flowi6 fl6 ; int ret <S2SV_ModStart> daddr ) ; ret = ip6_xmit_tun_and_drops <S2SV_ModEnd> ( sk, <S2SV_ModStart>, skb, <S2SV_ModEnd> fl6, np <S2SV_ModStart> np -> tclass, & fl6. flowi6_oif ) ; if ( ret < 0 ) return ret <S2SV_ModEnd> ; } <S2SV_null>",0
470,"<S2SV_ModStart> ) break ; status = SetBlob ( image, filepos, ( unsigned char * ) & MATLAB_HDR, sizeof ( MATLAB_HDR ) ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
471,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> UINT32 failureCode ; if (! Stream_IsAvailable ( s ) ) { WLog_ERR ( TAG, ""Invalid <S2SV_blank> stream"" ) ; return ; }",0
472,"<S2SV_ModStart> 0 ; int <S2SV_ModEnd> result = RLC_OK <S2SV_ModStart> m_len ) ; <S2SV_ModEnd> * p_len = <S2SV_ModStart> 8 ) ; bn_mod_2b ( m, m, ( k_len - * p_len ) * 8 ) ; <S2SV_ModStart>! bn_is_zero ( & <S2SV_ModStart> ) ) { return <S2SV_ModEnd> RLC_ERR ; } <S2SV_ModStart> 8 ) ; bn_mod_2b ( m, m, ( k_len - * p_len ) * 8 ) ; <S2SV_ModStart> 8 ) ; bn_mod_2b ( m, m, ( k_len - * p_len ) * 8 ) ;",0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,"<S2SV_ModStart> 8 ) ; psf = psf_calloc ( <S2SV_ModEnd> 1, sizeof <S2SV_ModStart> SF_PRIVATE ) ) ; if ( psf <S2SV_ModEnd> == NULL )",0
475,"<S2SV_ModStart> void fix_interp_filter ( VP9_COMMON_CONTEXT * ctx, <S2SV_ModStart> i ] += ctx -> counts -> <S2SV_ModEnd> switchable_interp [ j",0
476,<S2SV_ModStart> & cpi -> encode_frame <S2SV_ModEnd> ; VP9_COMMON * <S2SV_ModStart> mi_cols ) ; <S2SV_ModEnd> vp9_setup_src_planes ( x <S2SV_ModStart> subsampling_y ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
477,"<S2SV_ModStart> hp ) ; if ( htc -> rxbuf [ HTTP_HDR_PROTO ] == 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; }",0
478,"<S2SV_ModStart> define EOFOp 0x07 # define BMIPER_OP 0x00 <S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; <S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; <S2SV_ModStart> ; do { status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ;",0
479,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> sizeof ( tETH_HDR ),1
480,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ps_dec -> s_cur_slice <S2SV_ModStart> ps_dec -> s_cur_slice == 0 ) { if ( ps_dec -> s_cur_slice <S2SV_ModStart> = 0 ; } else { ps_dec -> s_cur_slice = 1 ; },0
481,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> * karg ; <S2SV_ModEnd> struct pci_dev * <S2SV_ModStart> pci_dev * pdev <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> } if ( <S2SV_ModEnd> karg -> hdr <S2SV_ModStart> hdr. iocnum <S2SV_ModEnd> < 0 ) <S2SV_ModStart> ) || ( ioc <S2SV_ModEnd> == NULL ) <S2SV_ModStart> printk ( MYIOC_s_ERR_FMT ""%s@%d::mptctl_getiocinfo <S2SV_blank> - <S2SV_blank> "" ""Structure <S2SV_blank> size <S2SV_blank> of <S2SV_blank> ioc <S2SV_blank> is <S2SV_blank> wrong!\\n"" <S2SV_ModEnd>, __FILE__, <S2SV_ModStart> ) ) ; goto err_free_karg <S2SV_ModEnd> ; } sdev <S2SV_ModStart> ) ) ; goto err_free_karg <S2SV_ModEnd> ; } sdev <S2SV_ModStart> ) ) ; goto err_free_karg <S2SV_ModEnd> ; } sdev <S2SV_ModStart> ) ) ; goto err_free_karg <S2SV_ModEnd> ; } sdev <S2SV_ModStart> ) ) ; goto err_free_karg <S2SV_ModEnd> ; } sdev <S2SV_ModStart> ) ) ; goto err_free_karg <S2SV_ModEnd> ; } sdev <S2SV_ModStart> ) ) ; goto err_free_karg <S2SV_ModEnd> ; } sdev <S2SV_ModStart> ) ) ; goto err_free_karg <S2SV_ModEnd> ; } s",0
482,<S2SV_ModStart> = 8 ; image -> rows_max = image -> columns ;,0
483,"<S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv",0
484,"<S2SV_ModStart> ; if ( datao + 8 > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> order = EXIF_BYTE_ORDER_INTEL ; datao += exif_get_long ( buf + datao + 8, EXIF_BYTE_ORDER_INTEL ) ; if ( <S2SV_ModStart> ; if ( <S2SV_ModEnd> c = exif_get_short <S2SV_ModStart> ; if ( <S2SV_ModEnd> o + 12 <S2SV_ModStart> o + 12 > o ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( <S2SV_ModEnd> o + 2 <S2SV_ModStart> o + 2 > o ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( <S2SV_ModEnd> o + 2 <S2SV_ModStart> o + 2 > o ) { exif_log ( en -> log, EXIF",0
485,"<S2SV_ModStart> ; if (! filename ) { L_ERROR ( ""output <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found\\n"", procName, dirout ) ; return 1 ; } if (",0
486,"<S2SV_ModStart> void unbind_ports ( int num_ports <S2SV_ModEnd> ) { SERVICE_OPTIONS <S2SV_ModStart> 1 ) ; if ( num_ports > MAX_PORTS ) { s_log ( LOG_ERR, ""Too <S2SV_blank> many <S2SV_blank> ports <S2SV_blank> to <S2SV_blank> unbind"" ) ; return ; } <S2SV_ModStart>. next ; if ( num_ports > MAX_PORTS ) { s_log ( LOG_ERR, ""Too <S2SV_blank> many <S2SV_blank> ports <S2SV_blank> to <S2SV_blank> unbind"" ) ; return ; } <S2SV_ModStart> service_options ) ; if ( num_ports > MAX_PORTS ) { s_log ( LOG_ERR, ""Too <S2SV_blank> many <S2SV_blank> ports <S2SV_blank> to <S2SV_blank> unbind"" ) ; return ; } <S2SV_ModStart> -> ctx ) { long timeout = <S2SV_ModEnd> ( long ) <S2SV_ModStart> + opt -> connect_timeout ; SSL_CTX_set_timeout ( opt -> ctx, timeout ) ; } <S2SV_ModEnd> s_log ( LOG_DEBUG <S2SV_ModStart> servname ) ; <S2SV_ModEnd> } CRYPTO_THREAD_unlock (",0
487,<S2SV_ModStart> void ) { if (! recovery_started ) return ;,0
488,"<S2SV_ModStart> ; } } if ( hashTable [ 0 ] == ENC624J600_EHT_NONE ) { return E_EHT_NONE ; } <S2SV_ModStart> ] ) ; if ( hashTable [ 1 ] == ENC624J600_EHT_NONE ) { return E_EHT_NONE ; } <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ) ) ; return E_EHT_OK <S2SV_ModEnd> ; } <S2SV_null>",0
489,"<S2SV_ModStart> image ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
490,"<S2SV_ModStart> { WORD32 i, u4_num_total_curr <S2SV_ModStart> u4_num_total_curr ) ; u4_num_total_curr = 0 ; <S2SV_ModStart> u4_num_total_curr ) ; u4_num_total_curr = 0 ; <S2SV_ModStart> u4_num_total_curr ) ; u4_num_total_curr = 0 ; <S2SV_ModStart> u4_num_total_curr ) ; u4_num_total_curr = 0 ; <S2SV_ModStart> u4_num_total_curr ) ; u4_num_total_curr = 0 ; <S2SV_ModStart> u4_num_total_curr ) ; u4_num_total_curr = 0 ; <S2SV_ModStart> u4_num_total_curr ) ; u4_num_total_curr = 0 ; <S2SV_ModStart> u4_num_total_curr ) ; u4_num_total_curr = 0 ; <S2SV_ModStart> u4_num_total_curr ) ; u4_num_total_curr = 0 ; <S2SV_ModStart> u4_num_total_curr ) ; u4_num_total_curr = 0 ; <S2SV_ModStart> u4_num_total_curr ) ; u4_num_total_curr =",0
491,"<S2SV_ModStart>, int fmt, int * indent <S2SV_ModStart> child ) { if ( indent ) * indent ++ ='<S2SV_blank>'; <S2SV_ModStart> = str = print_string <S2SV_ModEnd> ( child -> <S2SV_ModStart> depth, fmt, indent <S2SV_ModStart> = ret = print_value_ptr <S2SV_ModEnd> ( child, <S2SV_ModStart> depth, fmt, indent <S2SV_ModStart> fail ) { * indent ++ = '\\n' ; <S2SV_ModStart> + 1 ; * indent ++ = '\\0' ; <S2SV_ModStart> + 1 ; * indent ++ ='<S2SV_blank>'; <S2SV_ModStart> + 1 ; * indent ++ ='<S2SV_blank>'; <S2SV_ModStart> = 0 ; * indent ++ ='<S2SV_blank>'; <S2SV_ModStart> = '\\t' ; * indent ++ ='<S2SV_blank>'; <S2SV_ModStart> = 0 ; * indent ++ ='<S2SV_blank>'; <S2SV_ModStart> = '\\n' ; * indent ++ ='<S2SV_blank>'; <S2SV_ModStart> = 0 ; * indent ++ ='<S2SV_blank>'; <S2SV_ModStart> = '\\t' ; * indent ++ = '\\0' ; <S2SV_ModStart> = 0 ; * indent ++ ='<S2SV_blank>'; <S2SV_ModStart> = '\\t' ; * indent ++ ='<S2SV_blank>'; <S2SV_ModStart> = '\\n' ; * indent ++ ='<S2SV_blank>'; <S2SV_ModStart> = '\\t' ; * indent ++ ='<S2SV_blank>'; <S2SV_ModStart> = '\\n' ; * indent ++ ='<S2SV_blank>';",0
492,"<S2SV_ModStart> sk ) ; if ( writable ) { unix_state_lock ( sk ) ; other = unix_peer ( sk ) ; if ( other ) { unix_poll_wait ( file, & unix_sk ( other ) -> peer_wait, wait ) ; unix_state_unlock ( sk ) ; } } else { <S2SV_ModStart> = 0 ; }",0
493,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; outpos += strlen ( outputbuffer ) ;",0
494,<S2SV_ModStart> ( OM_uint32 ) KRB5_INTERNAL_ERROR <S2SV_ModEnd> ; return GSS_S_DEFECTIVE_TOKEN,0
495,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vp9_ref_frame_t * ) ; VPxWindow * window = ctx -> window <S2SV_ModStart> * fb ; if (! ctx -> cpi -> frame_cache [ frame -> idx ]. active ) { return VPX_CODEC_INVALID_PARAM ; } <S2SV_ModStart> NULL ) ; if (! ctx -> cpi -> frame_cache [ frame -> idx ]. active ) { return VPX_CODEC_INVALID_PARAM ; } <S2SV_ModStart> NULL ) ; if (! ctx -> cpi -> frame_cache [ frame -> idx ]. active ) { return VPX_CODEC_INVALID_PARAM ; } <S2SV_ModStart> VPX_CODEC_OK ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
496,<S2SV_ModStart> plug ) ; if ( ret ),0
497,"<S2SV_ModStart> * name, my_bool <S2SV_ModEnd> rep_quick ) { <S2SV_ModStart> ) ) { <S2SV_ModEnd> DBUG_RETURN ( 0",0
498,"<S2SV_ModStart> s } ; uECC_word_t p [ uECC_MAX_WORDS * 2 ] ; <S2SV_ModStart> # if uECC_VLI_NATIVE_LITTLE_ENDIAN <S2SV_ModEnd> p = ( <S2SV_ModStart> carry ], <S2SV_ModEnd> num_n_bits + 1",0
499,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|dao-truncated]"" <S2SV_ModEnd> ) ) ;",0
500,<S2SV_ModStart> ; } else if ( buf -> type == NW_BUF_TYPE_NULL ) { return ; } else <S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
501,<S2SV_ModStart> tp ; { int i ; <S2SV_ModStart> ] ) { <S2SV_ModEnd> const char hex <S2SV_ModStart> * dp ; <S2SV_ModEnd> if ( * <S2SV_ModStart> == 'X' ) { <S2SV_ModStart> 2 ) ; } <S2SV_ModStart> == 'O' ) { <S2SV_ModStart> 2 ) ; } <S2SV_ModStart> cp ; } i ++ ; } else if ( * cp == '^' && cp [ 1 ] ) { cval = ( * ++ cp & 0x1f ) ; cp ++ ; } else cval = * cp ++ ; if ( meta ) cval = ( meta? ( cval & 0x1f ) : cval ) ; if ( i == 2 ) cval = ( meta? ( cval & 0x1f ) : cval ) ; if ( i == 3 ) cval = ( cval & 0x1f ) ; if ( i == 4 ) cval = ( cval & 0x1f ) ; if ( i == 5 ) cval = ( cval & 0x1f ) ; if ( i == 6 ) cval = ( cval & 0x1f ) ; if ( i == 4 ) cval = ( cval & 0x1f ) | ( cval & 0x1f ) ; if ( i ==,0
502,"<S2SV_ModStart> char detect [ 5 <S2SV_ModEnd> ] ) { <S2SV_ModStart> ] ) { if ( memcmp ( detect, ""YUV4"", 5 ) == 0 ) { return 1 ; }",0
503,"<S2SV_ModStart>, * pixd, * pixc2 <S2SV_ModStart> == NULL ) { pixc2 = pixFewColorsOctcubeQuant1 ( pixs, level ) ; if ( pixc2 == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; pixc2 = pixFewColorsOctcubeQuant1 ( pixs, level ) ; if ( pixc2 == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; } <S2SV_ModEnd> cmap = pixGetColormap",0
504,<S2SV_ModStart>. vf = vpx_mse16x16 <S2SV_ModEnd> ; xd ->,1
505,<S2SV_ModStart> int overhead = ( <S2SV_ModStart> ) + 1 ) * sizeof ( int ),0
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NEGO_STATE_FAIL ; goto fail <S2SV_ModEnd> ; } Stream_Read_UINT8 <S2SV_ModStart> = NEGO_STATE_FINAL ; return ; fail : return ;,0
507,"<S2SV_ModStart> i, target_bits_per_mb ; int rc_bits_per_mb = 0 <S2SV_ModStart>, i, & rc_bits_per_mb <S2SV_ModEnd> ) ; if <S2SV_ModStart> active_worst_quality ) ; if ( rc_bits_per_mb > cm -> max_bit_depth ) { q = active_worst_quality ; }",0
508,<S2SV_ModStart> ; value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1101WritePhyReg (,0
509,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
510,"<S2SV_ModStart> int dst_stride, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart>, left_col, 128 <S2SV_ModEnd> ) ; DECLARE_ALIGNED_ARRAY <S2SV_ModStart> + y ; memset <S2SV_ModEnd> ( left_col, <S2SV_ModStart>, 129, 128 <S2SV_ModEnd> ) ; if <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( right_col, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( right_col, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; mem",0
511,"<S2SV_ModStart> ++ ; } else if ( pattern [ end ] == \'""\' ) { end ++ ; while ( ( pattern [ end ]!= 0 ) && ( pattern [ end ]!= \'""\' ) ) end ++ ; }",0
512,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_completed_io_lock ) ;,1
513,"<S2SV_ModStart> * cpi, VP9EncoderConfig * config, <S2SV_ModStart> -> common ; write_profile_config ( cm, config <S2SV_ModEnd>, 2 ) <S2SV_ModStart> wb ) ; write_bit_config ( cm, <S2SV_ModEnd> wb, 0 <S2SV_ModStart> 0 ) ; write_bit_config ( cm, <S2SV_ModEnd> wb, cm <S2SV_ModStart> show_frame ) ; write_bit_config ( cm, <S2SV_ModEnd> wb, cm <S2SV_ModStart> KEY_FRAME ) { write_key_frame_header ( cpi, config <S2SV_ModEnd> ) ; } <S2SV_ModStart> } else { write_frame_size_config ( cm, config <S2SV_ModEnd> ) ; } <S2SV_ModStart> } else { write_frame_size_config ( cm, config <S2SV_ModEnd> ) ; }",0
514,<S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 1 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 2 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 3 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 2 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 3 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 2 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 3 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 3 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 2 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 3 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 2 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 2 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 3 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 3 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 3 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 2 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 3 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 2 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 3 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 3 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 2 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 3 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 2 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 2 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 3 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 3 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 3 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 2 <S2SV_ModStart> ;,0
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { q = osStrchr <S2SV_ModEnd> ( p +,1
516,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
517,<S2SV_ModStart> KEY_FRAME ) { memcpy <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd ->,1
518,"<S2SV_ModStart> error_t error ; int16_t <S2SV_ModEnd> n ; uint32_t <S2SV_ModStart> ( interface, ENC624J600_ESTAT <S2SV_ModEnd> ) & ESTAT_PKTCNT <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart>, sizeof ( int16_t <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL <S2SV_ModEnd>, ENC624J600_RX_BUFFER_STOP ) <S2SV_ModStart>, context -> rxBuffer [ ENC624J600_RX_BUFFER_STOP ] <S2SV_ModEnd> ) ; error <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL <S2SV_ModEnd>, ENC624J600_RX_BUFFER_STOP ) <S2SV_ModStart> ( interface, ENC624J600_ER",0
519,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv ) { VALUE klass = rb_ary_get ( argc, 1 ) ; <S2SV_ModEnd> xmlSchemaPtr schema ; <S2SV_ModStart> xmlSchemaPtr schema ; VALUE rb_schema ; VALUE errors = rb_ary_new ( ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; # ifdef HAVE_XMLSCHEMASETPARSERSTRUCTUREDERRORS xmlSchemaSetParserStructuredErrors ( ctx, Nokogiri_error_array_pusher, ( void * ) errors ) ; # endif <S2SV_ModStart> content ) ) <S2SV_ModEnd> ; VALUE schema <S2SV_ModStart> errors ) ; rb_iv_set ( rb_schema, ""@parser_context"", ctx ) ;",0
520,"<S2SV_ModStart> ) ; } if ( strlen ( config_opt ) > CONF_MAX_OPTION_LEN ) { s_log ( LOG_ERR, ""Configuration <S2SV_blank> line <S2SV_blank> too <S2SV_blank> long"" ) ; print_syntax ( ) ; return 1 ; }",0
521,<S2SV_ModStart> 2 ] ; if ( state -> ysize < 2 ) return - 1 ; <S2SV_ModStart> 2 ] ; if ( state -> ysize < 2 ) return - 1 ;,0
522,<S2SV_ModStart> err = - <S2SV_ModEnd> EALREADY ; if,0
523,<S2SV_ModStart> POLL_IN ) ; <S2SV_ModEnd> perf_event_wakeup ( handle,0
524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> len, wchar_t * <S2SV_ModStart> = pwcs ; if ( len < 0 ) return - EINVAL ; <S2SV_ModStart> PLANE_SIZE ) { if ( len < size ) return - EINVAL ; <S2SV_ModStart> ( wchar_t ) <S2SV_ModEnd> ( ( u <S2SV_ModStart> ( u & ( SURROGATE_BITS - 1 ) ) ; } else { * op ++ = ( wchar_t ) u ; } s += size ; len -= size ; } else { * op ++ = * s ++ ; len -- ; } } return <S2SV_ModEnd> op - pwcs",0
525,"<S2SV_ModStart> EPROTONOSUPPORT ) { crm_trace ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" ) ; crm_sleep ( 1 <S2SV_ModEnd> ) ; if",0
526,"<S2SV_ModStart> -> nicContext ; if ( ( context -> rxBuffer == NULL ) || ( context -> rxBuffer -> len == 0 ) ) { return ERROR_INVALID_PACKET ; } <S2SV_ModStart> ( status & ( RXFHSR_RXFV | RXFHSR_RXFHSR_RXCE ) )!= 0 ) { if ( ( status & ( RXFHSR_RXMR | RXFHSR_RXFTL | RXFHSR_RXRF | RXFHSR_RXCE ) ) == 0 ) { return ERROR_INVALID_PACKET ; } n = ksz8851ReadReg ( interface, KSZ8851_RXFDPR ) & RXFDPR_RXFPAI <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( status & RXFHSR_RXMR ) == RXFHSR_RXMR <S2SV_ModEnd> ) { if <S2SV_ModStart> ( status & RXFHSR_RXFTL ) { if ( ( status & RXFHSR_RXFTL ) == RXFHSR_RXFTL ) { return ERROR_INVALID_PACKET ; } if (",0
527,"<S2SV_ModStart> ast_for_funcdef_impl ( struct compiler * c, const node * n, asdl_seq * decorator_seq, int is_async ) { identifier name ; arguments_ty args ; asdl_seq * body ; expr_ty returns = NULL ; int name_i = 1 ; node * tc ; string type_comment = NULL ; int is_async_type = 0 ; int is_async_stmt = 0 ; int is_async_stmt = 0 ; int is_async_stmt = 0 ; int is_async_stmt = 0 ; <S2SV_ModEnd> identifier name ; <S2SV_ModStart> * n, <S2SV_ModEnd> is_async ) { <S2SV_ModStart> is_async ) { <S2SV_ModEnd> expr_ty returns = <S2SV_ModStart> returns, type_comment, is_async_stmt? LINENO ( n ) : LINENO ( n ), <S2SV_ModEnd> n -> n_col_offset <S2SV_ModStart> c_arena ) ; if ( is_async_stmt ) { ast_error ( c, n, ""Async <S2SV_blank> functions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.5 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } is_async_stmt = 1 ; is_async_stmt = 1 ;",0
528,<S2SV_ModStart> int i ; if ( mm_is_pmd_cache_invalid ( mm ) ) return ;,0
529,"<S2SV_ModStart> ; } } if ( 0!= ( * packet_data_pptr ) [ packet_len ] ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> packet <S2SV_blank> length <S2SV_blank> is <S2SV_blank> different <S2SV_blank> from <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> value!"" ) ; return - 1 ; }",0
530,"<S2SV_ModStart> ) ) { if (! is_valid_address ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> invalid <S2SV_blank> address <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; }",0
531,"<S2SV_ModStart> 0 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif <S2SV_ModStart> row ++ ) <S2SV_ModEnd> for ( col <S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD if ( ( RAW ( row, col ) = pred [ col & 1 ] ) > 4098 && col < width ) derror ( ) ; # else <S2SV_ModStart> ; } } # endif",0
532,<S2SV_ModStart> len < needed ||! nl,0
533,<S2SV_ModStart> ) break ; if ( quantum_info -> quantum_type == QuantumTypeLinear ) { quantum_info -> quantum_type = MagickFalse ; },0
534,<S2SV_ModStart> ( bfqq ) bfq_idle_slice_timer <S2SV_ModEnd> ( bfqq ),0
535,<S2SV_ModStart> ; length += sizeof ( PRIMARY_DRAWING_ORDER_FIELD ) <S2SV_ModEnd> ; length +=,0
536,<S2SV_ModStart> ; if (! new_create &&! new_is_dir ) { if ( <S2SV_ModStart> goto out ; },0
537,<S2SV_ModStart> int plane ; if ( xd -> plane_id == VP9_INVALID_BLOCK_ID ) return ;,0
538,"<S2SV_ModStart> * cpi, TileDataEnc * tile_data, TileDataEnc * tile_data_end <S2SV_ModEnd>, int mi_row <S2SV_ModStart> -> e_mbd ; const TileInfo * const tile_info = & tile_data -> tile_info ; <S2SV_ModStart> ( cpi, tile_data, tile_info <S2SV_ModEnd>, mi_row, <S2SV_ModStart> ( cpi, tile_data, tile_info <S2SV_ModEnd>, mi_row,",0
539,<S2SV_ModStart> = NULL ; reader. hrtf_type = 0 ;,0
540,"<S2SV_ModStart> -> ranges = calloc ( 1, <S2SV_ModEnd> sizeof ( MappedRange",0
541,<S2SV_ModStart> pkt_list ) ; ctx -> last_frame_id = 0 ; ctx -> last_frame_time = 0 ; ctx -> last_frame_time_last = 0 ; ctx -> last_frame_time_last_offset = 0 ; ctx -> last_frame_time_last_offset = 0 ; ctx -> last_frame_time_last_offset = 0 ; ctx -> last_frame_time_last_offset = 0 ; ctx -> last_frame_time_last_offset = 0 ; ctx -> last_frame_time_last_offset = 0 ; ctx -> last_frame_time_last_offset = 0 ; ctx -> last_frame_time_last_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset_offset = 0 ; <S2SV_ModStart> VP8_EFLAG_FORCE_GF ) ) && <S2SV_ModEnd> ( ( flags <S2SV_ModStart> VP8_EFLAG_FORCE_ARF ) ) && <S2SV_ModEnd> ( ( flags <S2SV_ModStart> VP8_EFLAG_FORCE_,0
542,"<S2SV_ModStart> ) ) ; if ( quantum_info -> quantum_type == QuantumTypeLinear ) { quantum_info -> quantum_type = MagickFalse ; quantum_info -> quantum_type_max = MagickMax ( quantum_info -> quantum_type_max, quantum_info -> quantum_type_min ) ; quantum_info -> quantum_type_max = MagickMax ( quantum_info -> quantum_type_max, quantum_info -> quantum_type_max ) ; }",0
543,<S2SV_ModStart> event ) ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
544,"<S2SV_ModStart> * pptr, u_int64 <S2SV_ModEnd> len ) { <S2SV_ModStart> advance ; u_int64 <S2SV_ModEnd> tlen ; const <S2SV_ModStart> case BGP_ATTR_TYPE_IPV4_IPV6 : if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_ATTR_TYPE_IPV6_IPV6_IPV6_IPV6_IPV6_IPV6_IPV6_IPV6 : if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; }",0
545,"<S2SV_ModStart>, ""%s"", Run. env. user <S2SV_ModEnd> ) ; StringBuffer_append",0
546,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
547,"<S2SV_ModStart>, tokenMinAmount, ( uint32_t )",0
548,<S2SV_ModStart> ; if ( ( size2 < sizeof ( * header ) ) || ( <S2SV_ModStart> desc. bNumInterfaces < 1 ),0
549,"<S2SV_ModStart>, 0, <S2SV_ModEnd> 0 ) ;",0
550,<S2SV_ModStart> ; distortion = vpx_variance16x16 <S2SV_ModEnd> ( * (,1
551,<S2SV_ModStart> interface ) ; <S2SV_ModEnd> if ( macCompAddr <S2SV_ModStart> ) ) { <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> temp ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart>,0
552,<S2SV_ModStart> * start ; if (! psf -> header ) return ; <S2SV_ModStart> header ) ; if ( maxlen > sizeof ( psf -> header ) ) return ; <S2SV_ModStart> + maxlen ; if ( maxlen > sizeof ( psf -> header ) ) return ; <S2SV_ModStart> = 0 ; if (! psf -> headindex ) { <S2SV_ModStart> header ) ; },0
553,<S2SV_ModStart> -> alg_priv ) { <S2SV_ModStart> alg_priv ) ; ctx -> priv -> alg_priv = NULL ; },0
554,<S2SV_ModStart> { sf -> <S2SV_ModEnd> recode_loop = ( <S2SV_ModStart> 1 ) { if ( cpi -> frame_type == VP9_FRAME_TYPE_KF ) { if ( cpi -> frame_type == VP9_FRAME_TYPE_KF ) { if ( cpi -> frame_type == VP9_FRAME_TYPE_KF ) { if ( cpi -> frame_type == VP9_FRAME_TYPE_KF ) { if ( cpi -> frame_type == VP9_FRAME_TYPE_KF ) { if ( cpi -> frame_type == VP9_FRAME_TYPE_KF ) { if ( cpi -> frame_type == VP9_FRAME_TYPE_KF ) { if ( cpi -> frame_type == VP9_FRAME_TYPE_KF ) { if ( cpi -> frame_type == VP9_FRAME_TYPE_KF ) { if ( cpi -> frame_type == VP9_FRAME_TYPE_KF ) { if ( cpi -> frame_type == VP9_FRAME_TYPE_KF ) { if ( cpi -> frame_type,0
555,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ]. poll_count ),0
556,<S2SV_ModStart> int goodsize = ( <S2SV_ModStart> 2 * EXTRA_STACK ) ) % LUAI_MAXSTACK,0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,"<S2SV_ModStart> n ) ; <S2SV_ModEnd> char * s <S2SV_ModStart> errstr ) { <S2SV_ModEnd> char buf [ <S2SV_ModStart> 128 ] ; if (! _PyUnicode_AsUTF8 ( errstr, buf ) ) { ast_error ( n, buf ) ; Py_DECREF ( errstr ) ; } else { ast_error ( n, buf ) ; Py_DECREF ( errstr ) ; } <S2SV_ModEnd> } else {",0
559,"<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> ) break ; svc_ctx -> spatial_layers = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> spatial_layers = atoi ( option_value ) ; <S2SV_ModStart> ) break ; svc_ctx -> quantizers = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> quantizers_keyframe = 0 ; } else if ( strcmp ( ""quantizers-keyframe"", option_name ) == 0 ) { res = parse_quantizer_values ( svc_ctx, option_value, 0 ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( res == VPX_CODEC_OK ) { svc_log ( svc_ctx, SVC_LOG_ERROR, ""invalid <S2SV_blank> quantizer <S2SV_blank> value: <S2SV_blank> %s\\n"", option_value ) ; res = VPX_CODEC_INVALID_PARAM ; break ; } } svc_ctx -> num_quantizers = svc_ctx -> spatial_layers ; svc_ctx -> spatial_layers = svc_ctx -> spatial_layers ; <S2SV_ModEnd> return res ;",0
560,<S2SV_ModStart> ) ; } <S2SV_ModEnd> mb_index = 0,0
561,"<S2SV_ModStart> self ) { <S2SV_ModEnd> PyObject * new_memo <S2SV_ModStart> return NULL ; return _PyDict_Copy ( new_memo, <S2SV_ModEnd> self -> unpickler <S2SV_ModStart> -> memo_size, & PyUnicode_FromString ) <S2SV_ModEnd> ; } <S2SV_null>",0
562,,1
563,"<S2SV_ModStart> ) ) { if ( mysql_errno ( imp_dbh -> pmysql )!= 0 ) { PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""mysql_errno(%d) <S2SV_blank> = <S2SV_blank> %s\\n"", mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ) ) ; return FALSE ; }",0
564,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ioctl ( slot <S2SV_ModStart> size ) ) { <S2SV_ModStart> slot_lock ) ; return ; } <S2SV_ModStart> ( need_close || ( <S2SV_ModStart> )!= 0 && size ),0
565,"<S2SV_ModStart> struct ieee_802_11_phdr phdr ; gboolean errorextension = FALSE <S2SV_ModStart>, & phdr, & errorextension",0
566,"<S2SV_ModStart> * fp ; if ( hdrlen + initlen + 1 > SDS_MAXSIZE ) { sdserr ( ""sdsnewlen: <S2SV_blank> %d <S2SV_blank> > <S2SV_blank> %d"", ( int ) ( sdsMaxsize - hdrlen ), ( int ) ( sdsMaxsize - initlen ) ) ; return NULL ; }",0
567,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> BYTE a_val ; BOOL is_bit_depth = FALSE ; <S2SV_ModStart> -> ColorLossLevel ; if ( context -> priv -> FrameDepths [ y ] > context -> priv -> FrameDepths [ y ] ) { is_bit_depth = TRUE ; } <S2SV_ModStart> ; } } return is_bit_depth ;,0
568,<S2SV_ModStart> ERR_PTR ( - ERANGE <S2SV_ModEnd> ) ; *,0
569,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> int target ; <S2SV_ModStart> target = ( <S2SV_ModEnd> cpi -> oxcf <S2SV_ModStart> / 2 ) > INT_MAX? INT_MAX : <S2SV_ModEnd> ( int ) <S2SV_ModStart> cpi -> oxcf -> starting_buffer_level <S2SV_ModEnd> ; } else <S2SV_ModStart> = 32 ; const int <S2SV_ModEnd> kf_boost = MAX <S2SV_ModStart> ; if ( rc -> frames_since_key > cpi -> oxcf -> <S2SV_ModEnd> output_framerate / 2 <S2SV_ModStart> / 2 ) <S2SV_ModEnd> kf_boost = ( <S2SV_ModStart> kf_boost * rc -> <S2SV_ModEnd> frames_since_key / ( <S2SV_ModStart> frames_since_key / ( rc -> <S2SV_ModEnd> output_framerate / 2,0
570,"<S2SV_ModStart> TX_MODE read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> == ALLOW_32X32 ) return vpx_read_bit <S2SV_ModEnd> ( r )",0
571,"<S2SV_ModStart> : # line 1046 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> } # line 1046 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 1051 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1057 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1066 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1066 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 1066 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 1061 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1062 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1070 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 1070 <S2SV_ModEnd> ""re_grammar.c"" break ;",0
572,"<S2SV_ModStart> -> cpi ; MACROBLOCK_INFO * const mbmi = & cpi -> mb. plane [ plane ] ; <S2SV_ModStart> args -> tp <S2SV_ModEnd> ; struct macroblock_plane <S2SV_ModStart> plane_type ; const int <S2SV_ModEnd> * qcoeff = <S2SV_ModStart> = cpi -> fc. coef_counts <S2SV_ModEnd> [ tx_size ] <S2SV_ModStart> UNCONSTRAINED_NODES ] = <S2SV_ModEnd> counts. eob_branch <S2SV_ModStart> COEFF_CONTEXTS ] = <S2SV_ModEnd> counts. eob_branch <S2SV_ModStart>, loff ; if (! is_inter_block ( mbmi ) ) { vp9_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> fc. coef_probs [ tx_size ] [ type ] [ ref ] ; }",0
573,"<S2SV_ModStart>. pRename ; SelectSelect_t * pSelectCopy = pSelect -> pCopy ; <S2SV_ModStart> -> pSrc ; if ( pSelectCopy -> selFlags & SF_WILL_NOT_RENAME ) { renameWalkWith ( pWalker, pSelectCopy ) ; return WRC_Abort ; }",0
574,"<S2SV_ModStart> users ) ; if ( sv_ops -> set_auth_buf ) { struct nfs4_callback_program program ; program. ops = & nfs4_callback_program ; program. data = kzalloc ( NFS4_CALLBACK_BUFSIZE, GFP_KERNEL ) ; if (! program. data ) return ERR_PTR ( - ENOMEM ) ; } <S2SV_ModStart> & nfs4_callback_program, sizeof ( program ) <S2SV_ModEnd>, sv_ops )",0
575,"<S2SV_ModStart> point, const double <S2SV_ModEnd> scalar, const <S2SV_ModStart> curve ) { double x, y ; mpz_init ( x, x ) ; mpz_init ( y, y ) ; mpz_mul ( & x, & y, scalar, curve ) ; mpz_set ( x, x ) ; mpz_set ( y, y ) ; mpz_mul ( & tmp, & x, & y ) ; mpz_set ( x, x ) ; mpz_set ( y, y ) ; mpz_mul ( & tmp, & y, scalar, curve ) ; mpz_set ( x, x ) ; mpz_set ( y, y ) ; mpz_mul ( & tmp, & y, scalar, curve ) ; mpz_set ( x, x ) ; mpz_set ( y, y ) ; mpz_mul ( & tmp, & x, & y ) ; mpz_set ( x, y ) ; mpz_set ( y, y ) ; mpz_mul ( & tmp, & x, & y ) ; mpz_set ( x, x ) ; mpz_set ( y, y ) ; mpz_",0
576,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
577,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_DONTWAIT ) )",0
578,"<S2SV_ModStart> s ) { if (! TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) ) ) { <S2SV_ModEnd> ret = send <S2SV_ModStart> 0 ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> == EINTR ) ) ; }",0
579,"<S2SV_ModStart> = NULL ; int i = 0 ; <S2SV_ModStart> -> name ; int rc = 0 ; <S2SV_ModStart> } else { <S2SV_ModEnd> crm_trace ( ""Cannot <S2SV_blank> add <S2SV_blank> new <S2SV_blank> node <S2SV_blank> %s <S2SV_blank> at <S2SV_blank> %s"" <S2SV_ModStart> ; } } if ( i == 0 ) { crm_trace ( ""Skipping <S2SV_blank> %s <S2SV_blank> because <S2SV_blank> of <S2SV_blank> ACL <S2SV_blank> check"", crm_element_name ( xml ), ID ( xml ) ) ; continue ; }",0
580,<S2SV_ModStart> <S2SV_null> <S2SV_null> static SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> NULL ; return <S2SV_ModEnd> svc_ctx -> internal,0
581,<S2SV_ModStart> ) ) { zval * * zdata_ptr_tmp ; <S2SV_ModStart> ) ) { zdata_ptr_tmp = * current_param ; <S2SV_ModStart> ) ) { zdata_ptr_tmp = * current_args ; <S2SV_ModStart> ) ) { zdata_ptr_tmp = * current_param ; <S2SV_ModStart> ) ) { zdata_ptr_tmp = * current_param ;,0
582,"<S2SV_ModStart> only_420 ) { int i ; <S2SV_ModStart> char buffer [ 79 <S2SV_ModEnd> ] ; int <S2SV_ModStart> -> vpx_bps = 14 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_bps = 14 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_bps = 14 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_bps = 14 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_bps = 14 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_bps = 14 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_bps = 14 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_bps = 14 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chrom",0
583,"<S2SV_ModStart> buf ; { char * name = strdup ( buf ) ; <S2SV_ModStart> * otmp = read_objnam <S2SV_ModEnd> ( buf, <S2SV_ModStart> ( buf, name <S2SV_ModEnd> ) ; if",0
584,<S2SV_ModStart> ( ) { <S2SV_ModEnd> if ( read_xattrs_from_disk <S2SV_ModStart> == 0 ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( read_uids_guids <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( parse_exports_table <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( read_fragment_table <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( read_inode_table <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( read_directory_table <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_,0
585,"<S2SV_ModStart> rule * rule, u_int flags <S2SV_ModStart> count = 0 ; env -> flags = flags <S2SV_ModStart> ; } } if ( flags & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ]!= NULL ; i ++ ) { struct envnode * node ; const char * e, * eq ; size_t len ; char keybuf [ 1024 ] ; e = strchr ( e, '=' ) ; if ( ( eq = strchr ( e, '=' ) ) == NULL || eq == e ) continue ; memcpy ( keybuf, e, len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf, eq + 1 ) ; if ( RB_INSERT ( envtree, & env -> root, node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } }",0
586,"<S2SV_ModStart> -> seg ; vpx_memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> -> base_qindex, cpi -> in_frame_q_adj_ratio <S2SV_ModEnd> [ segment ]",0
587,"<S2SV_ModStart> = make_type ( ""module"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""interactive"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""expression"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""suite"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""functiondef"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""asyncfunctiondef"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""classdef"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""delete"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""assign"" <S2SV_ModEnd>, stmt_type,",0
588,"<S2SV_ModStart> ) ; } if (! access ( log_path, F_OK ) ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> access <S2SV_blank> log <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, log_path, strerror ( errno ) ) ; is_logging = false ; return ; }",0
589,<S2SV_ModStart> ) ; } if ( cpi -> common. frame_type == KEY_FRAME ) { unsigned int * const bct = is_key? b_modes : inter_b_modes ; int b = 0 ; do { ++ bct [ xd -> block [ b ]. bmi. mode ] ; } while ( ++ b < 16 ) ; },0
590,"<S2SV_ModStart> num1, num2, len <S2SV_ModStart>, * StartClean <S2SV_ModEnd> ; SetDefaults ( <S2SV_ModStart> t ++ ; len = snprintf ( outputbuffer, len <S2SV_ModEnd>, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"", <S2SV_ModStart> TERMCHAR ) ; outpos += len ; <S2SV_ModStart> = 1 ; len <S2SV_ModEnd> += sprintf ( <S2SV_ModStart> SUBVERSION ) ; outpos += len ; <S2SV_ModStart> ) ) { len = snprintf ( outputbuffer, len <S2SV_ModEnd>, ""%s"", <S2SV_ModStart> nameobject ) ; <S2SV_ModEnd> free ( argbuf <S2SV_ModStart> ( argbuf = ReadArray_s ( t, len <S2SV_ModEnd> ) ) == <S2SV_ModStart> ( stderr, ""%s: <S2SV_blank> Command <S2SV_blank> %s <S2SV_blank> should <S2SV_blank> have <S2SV_blank> no <S2SV_blank> arguments\\n"", axohelp <S2SV_ModEnd>, nameobject ) <S2SV_ModStart> ) ) { len = snprintf ( outputbuffer, len <S2SV_ModEnd>, ""%s"", <S2SV_ModStart> ) ) ; outpos += len ; <S2SV_ModStart> ( outpos, len <S2SV_ModEnd>, ""%s"", <S2SV_ModStart> ( outpos, len <S2SV_ModEnd>, ""%s"", <S2SV_ModStart> ( outpos, len <S2SV_ModEnd>, ""%s"", <S2SV_ModStart> ( outpos, len <S2SV_ModEnd>, ""%s"", <S2SV_ModStart> ( outpos, len <S2SV_ModEnd>, ""%s""",0
591,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> int res ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { lower = NULL ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> int res ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { upper = NULL ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { step = NULL ; } * out = Slice ( lower, upper, step, <S2SV_ModEnd> arena ) ; <S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = lookup_attr_id <S2SV_ModEnd> ( obj,",0
592,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
593,"<S2SV_ModStart> int err ; u32 classid ; <S2SV_ModStart> ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; classid = iter -> band ; <S2SV_ModStart> - ENOMEM ; err = nfp_abm_u32_knode_create ( match, knode, proto, extack ) ; if ( err ) goto err_delete ; <S2SV_ModStart> knode ) ; NL_SET_ERR_MSG_MOD ( extack, ""failed <S2SV_blank> to <S2SV_blank> create <S2SV_blank> filter <S2SV_blank> for <S2SV_blank> filter <S2SV_blank> %u"", match -> band ) ;",0
594,"<S2SV_ModStart> ) ; } if (! global -> pass_mode ) { if (! stream -> config. cfg. cfg. cfg. cfg. rc_twopass_stats_in ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> twopass <S2SV_blank> stats"" ) ; <S2SV_ModStart> : VPX_RC_ONE_PASS ; } else { if ( pass ) stream -> config. cfg. g_pass = VPX_RC_ONE_PASS ; }",0
595,"<S2SV_ModStart> ; if ( flatpak_check_export_context_permission ( current_context, cancellable, error ) ) goto out ; if (",0
596,"<S2SV_ModStart> data_end ) { const <S2SV_ModStart> = NULL ; vpx_reader <S2SV_ModEnd> r ; assert <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> aligned_cols ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) * aligned_cols ) ; memset ( cm -> above_seg_context, 0, sizeof ( * cm -> above_seg_context ) * aligned_cols",0
597,"<S2SV_ModStart> * vp9_decoder_create ( VP9DecoderConfig <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> pbi ) ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> = 1 ; vpx_memset ( & pbi -> ref_frame_map, - 1, sizeof ( pbi -> ref_frame_map ) ) ; pbi -> oxcf = * oxcf ; pbi -> ready_for_new_data = 1 ; pbi -> decoded_key_frame = 0 ; vp9_init_dequantizer ( cm ) ; vp9_loop_filter_init ( cm ) ; cm -> error. setjmp = 0 ; vp9_worker_init ( & pbi -> lf_worker ) ; pbi -> reset_decoder = 1 ; pbi -> reset_frame_map = NULL ; pbi -> reset_frame_map = NULL ; pbi -> reset_frame_map = NULL ; pbi -> reset_frame_map = NULL ; pbi -> reset_frame_map = NULL ; pbi -> reset_frame_map = NULL ; pbi -> reset_frame_map = NULL ; pbi -> reset_frame_map = NULL ; pbi -> reset_frame_",0
598,"<S2SV_ModStart> dref ) { GF_LOG_DEBUG <S2SV_ModEnd> ( GF_LOG_ERROR, <S2SV_ModStart> GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf <S2SV_blank> %p\\n"", s <S2SV_ModEnd> ) ) ;",0
599,<S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> -> opt ; <S2SV_ModEnd> cipso_v4_delopt ( &,0
600,"<S2SV_ModStart> tokens, const vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> do { const vpx_tree_index <S2SV_ModEnd> j = tree",1
601,"<S2SV_ModStart> ( img ) { <S2SV_ModStart> img ) ; if ( res!= VPX_CODEC_OK ) { ctx -> base. err_detail = ""Invalid <S2SV_blank> image <S2SV_blank> data."" ; return res ; } }",0
602,"<S2SV_ModStart>, & len, 0",1
603,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( in, u, v ) ; memcpy ( s, in, 16 <S2SV_ModEnd> ) ; }",0
604,"<S2SV_ModStart> rc, const VP9EncoderConfig <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> ( int64_t ) oxcf -> vbr_max_section <S2SV_ModEnd> * ( int64_t",0
605,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
606,"<S2SV_ModStart> * cpi, MACROBLOCK * const x, <S2SV_ModStart>, BLOCK_SIZE bsize, int skip_encode <S2SV_ModStart> -> common ; <S2SV_ModEnd> MACROBLOCKD * const <S2SV_ModStart> -> mbmi ; <S2SV_ModEnd> const int mis <S2SV_ModStart> bsize ] ; <S2SV_ModEnd> x -> skip_recode <S2SV_ModStart> -> skip_recode = skip_encode <S2SV_ModEnd> ; x -> <S2SV_ModStart> ; if ( x -> skip_encode <S2SV_ModEnd> ) return ; <S2SV_ModStart> } else { set_ref_ptrs_for_key_frame <S2SV_ModEnd> ( cm, <S2SV_ModStart> mi_row, mi_col <S2SV_ModEnd> ) ; }",0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. size <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
608,"<S2SV_ModStart> range_max ) { int64_t <S2SV_ModEnd> value ; int <S2SV_ModStart> position, zeroes <S2SV_ModEnd> ; char bits <S2SV_ModStart> gbc ) ; if ( ctx -> trace_enable ) { value = get_bits_long ( gbc, 0 ) ; if ( value < range_min || value > range_max ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""%s <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range: <S2SV_blank> "" ""%"" PRIu64 "", <S2SV_blank> but <S2SV_blank> must <S2SV_blank> be <S2SV_blank> in <S2SV_blank> [%"" PRIu64 "",%"" PRIu64 ""].\\n"", name, value, range_min, range_max ) ; return AVERROR_INVALIDDATA ; } zeroes = i = 0 ; <S2SV_ModEnd> if ( get_bits1 <S2SV_ModStart> = '1' ; value += ( 1 << zeroes ) - 1 ; } if ( ctx -> trace_enable ) { bits [ i ] = 0 ; ff_cbs_trace_syntax_element ( ctx, position, name, NULL, bits, value ) ; } if ( value < range_min || value > range_max ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""%s <S2SV_blank> out <S2SV_blank> of",0
609,"<S2SV_ModStart> || strchr ( ""!#$%&\'*+-.^_`|^"" <S2SV_ModEnd>, c ) <S2SV_ModStart> || strchr ( ""!#$%&\'*+-.^_`|^"" <S2SV_ModEnd>, c )",0
610,"<S2SV_ModStart>, packet -> http_headers. ptr = NULL, packet -> http_headers. len = 0, packet ->",0
611,"<S2SV_ModStart> { q = QueueAuthenticPixels_Internal <S2SV_ModEnd> ( image, <S2SV_ModStart> x ), Max <S2SV_ModEnd> ( 4, <S2SV_ModStart> y ), ( ExceptionInfo * )",0
612,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL ) <S2SV_ModStart> EINTR ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL )",0
613,<S2SV_ModStart> action ) { if ( w < 0 || h < 0 || w > 1 || h > 1 || h > 1 || w > 100 || h > 100 || w < 0 || h > 100 || w > 100 || h > 100 || h > 100 || w > 100 || h > 100 || w > 100 || h > 100 || h > 100 || w > 100 || h > 100 || w > 100 || h > 100 || w > 100 || h > 100 || h > 100 || h > 100 || h > 100 || h > 100 || w > 100 || h > 100 || w > 100 || h > 100 || w > 100 || h > 100 || w > 100 || h > 100 || w > 100 || h > 100 || h > 100 || w > 100 || h > 100 || w > 100 || h > 100 || w > 100 || h > 100 || w > 100 || h > 100 || w > 100 || h > 100 || w > 100 || h > 100 || h > 100 || h > 100 || w > 100 || h > 100 || w > 100 || w > 100 || h > 100 || h > 100 || h > 100 || h > 100 || h > 100 || h > 100 ||,0
614,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; if ( outpos >= outputbuffer ) { fprintf ( stderr, ""Error: <S2SV_blank> outputbuffer <S2SV_blank> too <S2SV_blank> large\\n"" ) ; exit ( EXIT_FAILURE ) ; }",0
615,"<S2SV_ModStart> ( AUTODETECT_TAG, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU <S2SV_blank> with <S2SV_blank> sequence <S2SV_blank> number <S2SV_blank> %d"", autodetectRspPdu -> sequenceNumber <S2SV_ModEnd> ) ; Stream_Read_UINT32",0
616,<S2SV_ModStart> recon_uv_stride ; } # if CONFIG_TEMPORAL_DEPTH if ( cm -> mb_cols > cpi -> common. mb_cols ) { vp8_writer_destroy ( & cpi -> td_writer ) ; } # endif,0
617,<S2SV_ModStart> -> b_multithreaded_rd ) { <S2SV_ModStart> mb_rows ) ; },0
618,<S2SV_ModStart> { if ( ( <S2SV_ModStart> xWantedSize > 0 ) && ( xWantedSize + xHeapStructSize ) > xWantedSize <S2SV_ModStart> 0x00 ) { if ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) > xWantedSize ) { mtCOVERAGE_TEST_MARKER ( ) ; } <S2SV_ModStart> portBYTE_ALIGNMENT_MASK ) ) ; xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ),0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,"<S2SV_ModStart> s ) { <S2SV_ModEnd> uint16 left, <S2SV_ModStart> int i ; <S2SV_ModEnd> in_uint16_le ( s <S2SV_ModStart> ++ ) { <S2SV_ModEnd> logger ( Graphics <S2SV_ModStart>, Debug, ""process_bitmap_updates(), <S2SV_blank> [%d,%d,%d], <S2SV_blank> [%d,%d], <S2SV_blank> bpp=%d, <S2SV_blank> compression=%d"" <S2SV_ModEnd>, left, <S2SV_ModStart> size ) ; <S2SV_ModEnd> ui_paint_bitmap ( left",0
621,"<S2SV_ModStart> } else { ovalue = strim ( option <S2SV_ModEnd>, ""\\""\'"",",0
622,"<S2SV_ModStart> tx_size, vp9_coeff_stats coef_stats, vpx_coeff_probs_model <S2SV_ModStart> coef_branch_ct ) { vpx_coeff_probs_model <S2SV_ModEnd> * coef_probs = <S2SV_ModStart> tx_size ] ; vpx_coeff_count <S2SV_ModEnd> * coef_counts = <S2SV_ModStart> l ) { vpx_tree_probs_from_distribution <S2SV_ModEnd> ( vp9_coef_tree,",0
623,"<S2SV_ModStart> { } ; if (! access_ok ( VERIFY_WRITE, fd, ( const char * ) name, 10 ) ) return - EBADF <S2SV_ModEnd> ; r =",0
624,"<S2SV_ModStart> dvb_usb_adapter * d, struct dvb_frontend_state * state <S2SV_ModStart> 0 } ; int ret = 0 ; <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; ret = <S2SV_ModEnd> dvb_usb_generic_rw ( d <S2SV_ModStart>, 1, state ) ; if ( ret <S2SV_ModEnd> < 0 ) <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; ret = <S2SV_ModEnd> dvb_usb_generic_rw ( d <S2SV_ModStart>, 1, state ) ; if ( ret <S2SV_ModEnd> < 0 ) <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; ret = <S2SV_ModEnd> dvb_usb_generic_rw ( d <S2SV_ModStart>, 1, state ) ; if ( ret <S2SV_ModEnd> < 0 ) <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; ret = <S2SV_ModEnd> dvb_usb_generic_rw ( d <S2SV_ModStart>, 1, state ) ; if ( ret <S2SV_ModEnd> < 0 ) <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; ret = <S2SV_ModEnd> dvb_usb_generic_rw ( d <S2SV_ModStart>, 1, state ) ; if ( ret <S2SV_ModEnd> < 0 ) <S2SV_ModStart> ""command <S2SV_blank> 0x51 <S2SV_blank> transfer <S2SV_blank> failed."" ) ; ret =",0
625,"<S2SV_ModStart> * iface, vpx_codec_enc_config_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> ( ( flags & VPX_CODEC_USE_XMA ) &&! ( ctx -> config. enc. <S2SV_ModEnd> caps & VPX_CODEC_CAP_XMA <S2SV_ModStart> ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( ctx -> config. enc. <S2SV_ModEnd> caps & VPX_CODEC_CAP_PSNR <S2SV_ModStart> ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( ctx -> config. enc. <S2SV_ModEnd> caps & VPX_CODEC_CAP_OUTPUT_PARTITION",0
626,"<S2SV_ModStart> int stride, vpx_bit_depth_t bit_depth, <S2SV_ModStart>. interp_filter ) ; const MV_PRECISION_BITS_T * const mv_bits = MV_BITS_T <S2SV_ModStart> MV_PRECISION_Q3 ; } vpx_build_inter_predictor <S2SV_ModEnd> ( y_mb_ptr, <S2SV_ModStart> y ) ; vpx_build_inter_predictor <S2SV_ModEnd> ( u_mb_ptr, <S2SV_ModStart> y ) ; vpx_build_inter_predictor <S2SV_ModEnd> ( v_mb_ptr, <S2SV_ModStart> y ) ; vpx_build_inter_predictor <S2SV_ModEnd> ( y_mb_ptr, <S2SV_ModStart> y ) ; vpx_build_inter_predictor <S2SV_ModEnd> ( v_mb_ptr, <S2SV_ModStart> y ) ; vpx_build_inter_predictor <S2SV_ModEnd> ( y_mb_ptr, <S2SV_ModStart> y ) ; vpx_build_inter_predictor <S2SV_ModEnd> ( v_mb_ptr, <S2SV_ModStart> y ) ; vpx_build_inter_predictor <S2SV_ModEnd> ( v_mb_ptr,",0
627,"<S2SV_ModStart> = TRUE ; if ( strlen ( origbuf ) >= 4 * BUFSZ ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> too <S2SV_blank> long <S2SV_blank> \\""%s\\"""", origbuf ) ; return FALSE ; }",0
628,"<S2SV_ModStart> * cJSON_CreateFloatArray ( const <S2SV_ModStart> * numbers, size_t <S2SV_ModEnd> count ) { <S2SV_ModStart> i ) { if (! ( <S2SV_ModStart> i ] ) ) ) return 0",0
629,<S2SV_ModStart> data_end ) { const <S2SV_ModStart> tile_cols ) ; const int tile_workers_size = pbi -> oxcf. max_threads / sizeof ( * pbi -> tile_workers ) ; TileBuffer tile_buffers [ tile_workers_size ] ; int n ; int final_worker = - 1 ; assert ( tile_cols <= ( 1 << 6 ) ) ; assert ( tile_rows == 1 ) ; ( void ) tile_rows ; if ( pbi -> num_tile_workers == 0 ) { <S2SV_ModStart> << 6 ] <S2SV_ModEnd> ; CHECK_MEM_ERROR ( <S2SV_ModStart> pbi -> tile_workers [ 0 ] <S2SV_ModStart> ) ) ; <S2SV_ModEnd> VP9Worker * const <S2SV_ModStart> pbi -> num_tile_workers ; worker -> hook = ( VP9WorkerHook ) tile_worker_init ; worker -> data1 = vpx_malloc ( sizeof ( TileWorkerData ) ) ; worker -> data2 = vpx_malloc ( sizeof ( TileInfo ) ) ; worker -> data_size = sizeof ( TileInfo ) ; worker -> hook_flags = 0 ; worker -> data_end = vpx_malloc ( sizeof ( TileInfo ) ) ; worker -> hook_flags |= 0x8,0
630,"<S2SV_ModStart> * 0x101 ; if ( order < 0 || order > 0x101 ) { printf ( ""Invalid <S2SV_blank> minolta <S2SV_blank> order <S2SV_blank> value <S2SV_blank> (%d)\\n"", order ) ; return ; }",0
631,"<S2SV_ModStart> -> common ; VP9_COMP * rc = & cpi -> rc ; <S2SV_ModStart> = SEGMENT_DELTADATA ; seg -> max_delta = SEGMENT_DELTADATA ; <S2SV_ModStart> ++ ) { const int qindex_delta = 0, segment_rdmult = 0 ; <S2SV_ModStart> ++ ) { <S2SV_ModEnd> if ( Q_RATIO <S2SV_ModStart> continue ; } rc -> q_delta [ i ] = qindex_delta ; <S2SV_ModStart> ) ) ; rc -> segdata [ SEGMENT_ID ( i ) ] = SEG_LVL_ALT_Q ; rc -> segfeature [ SEGMENT_ID ( i ) ] = SEG_LVL_ALT_Q ; <S2SV_ModStart> ( seg, <S2SV_ModEnd> SEGMENT_ID ( i <S2SV_ModStart> i ), <S2SV_ModEnd> SEG_LVL_ALT_Q ) ; <S2SV_ModStart> cm -> base_qindex <S2SV_ModEnd> ) ; segment_rdmult",0
632,<S2SV_ModStart> -> error_code ) { <S2SV_ModStart> : NULL ; ctx -> base. err_detail_type = error -> has_detail? VPX_ERR_NO_DETAIL : VPX_ERR_NO_DETAIL ; },0
633,"<S2SV_ModStart>, * ps_cur_poc ; if (! ps_dec -> s_cab_dec_env. pv_init_done ) return",0
634,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet ),0
635,<S2SV_ModStart> <S2SV_null> <S2SV_null> static long <S2SV_ModEnd> getnum ( const <S2SV_ModStart> int getnum ( <S2SV_ModEnd> char * * <S2SV_ModStart> df ) { const char * p = * fmt ; <S2SV_ModStart>! isdigit ( p <S2SV_ModEnd> ) ) return <S2SV_ModStart> = 0 ; if ( * * fmt == 0 ) return 0 ; <S2SV_ModStart> ( isdigit ( p <S2SV_ModEnd> ) ) ;,0
636,<S2SV_ModStart> GCSpropagate ) ; g -> gcstate = GCSdestroyed ;,0
637,<S2SV_ModStart> 0 ; else { kfree ( buf ) ; <S2SV_ModStart> - EIO ; },0
638,"<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } <S2SV_ModEnd> memset ( buffer <S2SV_ModStart> buffer ) ; <S2SV_ModEnd> s_write ( c",0
639,"<S2SV_ModStart> remote_connection_s * connection, int * socket_id <S2SV_ModStart> = 0 ; <S2SV_ModEnd> struct addrinfo * <S2SV_ModStart> mainloop_fd_callbacks cib_fd_callbacks = <S2SV_ModEnd> connection -> socket <S2SV_ModStart> connection -> socket = socket_id ; connection -> session = NULL ; * socket_id = - 1 ; connection -> socket = 0 ; connection -> session = NULL ; * socket_id = - 1 ; connection -> socket = 0 ; connection -> session = NULL ; * socket_id = - 1 ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } bzero ( & hints, sizeof ( struct addrinfo ) ) ; hints. ai_flags = AI_CANONNAME ; hints. ai_family = AF_INET ; hints. ai_socktype = SOCK_RAW ; if ( hints. ai_family == AF_INET6 ) { hints. ai_protocol = IPPROTO_ICMP ; } else { hints. ai_protocol = IPPROTO_ICMP ; } crm_debug ( ""Looking",0
640,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> ; cpi -> <S2SV_ModEnd> non_gf_bitrate_adjustment = 0",0
641,"<S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( bp + 26, len - 26 ) ;",0
642,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command",0
643,"<S2SV_ModStart> Image * image <S2SV_ModEnd> ; register IndexPacket <S2SV_ModStart> length, padding <S2SV_ModEnd>, version, <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { DestroyImageList ( image ) ; return ( DestroyImageList ( image ) ) ; }",0
644,"<S2SV_ModStart> ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SCC <S2SV_blank> marker\\n"" ) ;",0
645,<S2SV_ModStart> ; if (! chanmode_found ) { if ( <S2SV_ModStart> ) ; } },0
646,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> - m + vpx_read_bit <S2SV_ModEnd> ( r )",1
647,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
648,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> REFERENCE_MODE mode = vpx_read <S2SV_ModEnd> ( r,",0
649,"<S2SV_ModStart>! stream ) { <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; } <S2SV_ModStart> ; res = vpx_codec_enc_config_default_with_usage <S2SV_ModEnd> ( global -> <S2SV_ModStart> stereo_fmt = STEREO_FORMAT_MONO <S2SV_ModEnd> ; # if <S2SV_ModStart> ; # if CONFIG_WEBM_IO <S2SV_ModEnd> stream -> ebml",0
650,<S2SV_ModStart> ; if ( opp -> nd_opt_len < 4 ) goto trunc ; if (,0
651,<S2SV_ModStart> re_ast ) -> root_type = RE_AST_ROOT_NODE ; ( * re_ast ) ->,0
652,"<S2SV_ModStart> ) ) ; if ( iter -> conn -> dict -> dict_mode == DICT_MODE_MULTI ) { ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> = <S2SV_blank> %s"", str_c ( path ), key -> value ) ; } else if ( ret < 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> lookup <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", str_c ( path ), error ) ; return - 1 ; } } else { <S2SV_ModStart> 0 ) { <S2SV_ModEnd> return - 1 <S2SV_ModStart> 1 ; } }",0
653,<S2SV_ModStart> ; tok -> line_type = 0 ; tok ->,0
654,<S2SV_ModStart> maxBitrate ; } av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo = NULL ;,0
655,<S2SV_ModStart> ( dpbSize ) ; dpb -> picSizeInMbs = picSizeInMbs ; dpb -> dpbSize = dpbSize,0
656,"<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> (! sock ||! addr ||! addrlen <S2SV_ModStart> OE_EINVAL ) ; <S2SV_ModEnd> addrlen_in = * <S2SV_ModStart> if ( addrlen_in > OE_SOCKLEN_MAX ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } <S2SV_ModEnd> if ( oe_syscall_getpeername_ocall <S2SV_ModStart>, addrlen_in, & addrlen_out <S2SV_ModEnd> )!= OE_OK <S2SV_ModStart> ) ; } if ( addrlen_out > OE_SOCKLEN_MAX ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; }",0
657,,1
658,<S2SV_ModStart> FALSE ; } if (!,0
659,<S2SV_ModStart> ipv6_pinfo * np <S2SV_ModEnd> ; struct ipv6_txoptions <S2SV_ModStart> ; if ( msg -> msg_flags & MSG_PROBE ) { if ( <S2SV_ModStart> flowlabel ) ; },0
660,"<S2SV_ModStart>, err, <S2SV_ModEnd> overlays = 0 <S2SV_ModStart>, hdr_size, j ; size_t fsize_in_bytes ; uint32_t valign = 0, hdr_size = 0 <S2SV_ModEnd> ; struct cli_exe_section <S2SV_ModStart> ; if ( cli_scanpe_check_file_size ( ctx, & fsize_in_bytes ) ) { cli_errmsg ( ""cli_scanpe: <S2SV_blank> file <S2SV_blank> size <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large\\n"" ) ; return CL_ENULLARG ; } if ( <S2SV_ModStart> ; if ( cli_scanpe_check_file_size ( ctx, & fsize_in_bytes ) ) { cli_errmsg ( ""cli_scanpe: <S2SV_blank> file <S2SV_blank> size <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large\\n"" ) ; return CL_ENULLARG ; } if ( <S2SV_ModStart> ; if ( cli_scanpe_check_file_size ( ctx, & fsize_in_bytes ) ) { cli_errmsg ( ""cli_scanpe: <S2SV_blank> file <S2SV_blank> size <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large\\n"" ) ; return CL_ENULLARG ; } if ( <S2SV_ModStart> ; if ( cli_scanpe_check_file_size ( ctx, & f",0
661,"<S2SV_ModStart> address ) { uint16_t res = dm9000ReadReg ( DM9000_EPAR ) ; uint16_t epcr = dm9000ReadReg ( DM9000_EPCR ) ; uint16_t erre = dm9000ReadReg ( DM9000_EPCR ) & EPCR_ERRE ; if ( erre!= 0 ) { return 0 ; } <S2SV_ModStart> ( DM9000_REG_EPAR, epcr <S2SV_ModEnd> | address ) <S2SV_ModStart> address ) ; if ( erre!= 0 ) { return 0 ; } res = dm9000ReadReg ( DM9000_EPCR ) ; if ( erre!= 0 ) { return 0 ; } res = dm9000ReadReg ( DM9000_EPCR ) ; if ( res!= 0 ) { return 0 ; } res = dm9000ReadReg ( DM9000_EPCR ) ; if ( res!= 0 ) { return 0 ; } res = dm9000ReadReg ( DM9000_EPDRH ) << 8 ) | dm9000ReadReg ( DM9000_EPDRL ) ; if ( res!= 0 ) { return 0 ; } res =",0
662,"<S2SV_ModStart> pcmk_ok ) { int rc2 ; <S2SV_ModStart> cib, & rc2 ) ; } if ( rc == pcmk_ok ) { int rc2 ; rc = cib_tls_signon ( cib, & rc2 ) ; } if ( rc == pcmk_ok ) { int rc2 ; rc2 <S2SV_ModEnd> = cib_tls_signon ( <S2SV_ModStart> pcmk_ok ) { int rc2 ; rc2 <S2SV_ModEnd> = cib_tls_signon ( <S2SV_ModStart> cib, & rc2 ) ; } if ( rc == pcmk_ok ) { int rc2 ; rc2 <S2SV_ModEnd> = cib_tls_signon ( <S2SV_ModStart> pcmk_ok ) { int rc2 ; rc2 <S2SV_ModEnd> = cib_tls_signon ( <S2SV_ModStart> pcmk_ok ) { int rc2 ; rc2 <S2SV_ModEnd> = cib_tls_signon ( <S2SV_ModStart> pcmk_ok ) { int rc2 ; rc2 <S2SV_ModEnd> = cib_tls_signon ( <S2SV_ModStart> cib, & rc2 ) ; } if ( rc == pcmk_ok ) { int rc2 ; rc2 <S2SV_ModEnd> = cib_tls_signon ( <S2SV_ModStart> pcmk_ok ) { int rc2",0
663,<S2SV_ModStart> ; msg. msg_iter. type = READ ; msg. <S2SV_ModStart> ( address ) ; msg. msg_iter. nr_segs = 1,0
664,"<S2SV_ModStart> num00, tmp_err = 0 <S2SV_ModStart> int new_mv_mode_penalty = 64 <S2SV_ModEnd> ; const int <S2SV_ModStart> bsize ] ; <S2SV_ModEnd> v_fn_ptr. vf <S2SV_ModStart> bsize ) ; int num00 = 0 ; int sr = 0 ; int step_param = 3 ; int further_steps = ( MAX_MVSEARCH_STEPS - 1 ) - step_param ; <S2SV_ModStart>, & tmp_err, & num00, & v_fn_ptr, x -> nmvjointcost, x -> mvcost, ref_mv ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX - new_mv_mode_penalty ) tmp_err += new_mv_mode_penalty ; if ( tmp_err < * best_motion_err ) { * best_motion_err = tmp_err ; best_mv -> row = tmp_mv. row ; best_mv -> col = tmp_mv. col ; } n = num00 ;",0
665,<S2SV_ModStart> ; h -> <S2SV_ModEnd> csum = ntreg_header_csum,0
666,<S2SV_ModStart> ; merged -> <S2SV_ModEnd> is_dir_config = (,0
667,"<S2SV_ModStart>, one, <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart> ) break ; offset = ( ssize_t ) ( p - image -> data ) ; <S2SV_ModStart> ) break ; if ( offset > image -> rows ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( number_planes_filled <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( number_planes_filled <S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( number_planes_filled <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( number_planes_filled <S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( number_planes_filled <S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( number_planes_filled <S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( number_planes_filled <S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( number_planes_filled <S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( number_planes_filled <S2SV_ModStart>",0
668,"<S2SV_ModStart> ( r = sshbuf_put_string ( b, comp -> name, comp -> name_len <S2SV_ModEnd> ) )!=",0
669,"<S2SV_ModStart> ) ) { ovalue = sclone ( sclone ( value ) ) ; <S2SV_ModStart>, & ovalue ) ; if (! ovalue ) return 0 <S2SV_ModEnd> ; ovalue =",0
670,<S2SV_ModStart> client = user_data ; gboolean shutdown_flag = FALSE <S2SV_ModStart> num_clients ) ; if ( client -> shutdown_flag ) { shutdown_flag = TRUE ; } <S2SV_ModStart> user ) ; if ( client -> shutdown_flag ) { shutdown_flag = FALSE ; },0
671,<S2SV_ModStart> * uv ; if ( thread -> twups!= NULL ) { <S2SV_ModStart> next ) { <S2SV_ModEnd> if (! <S2SV_ModStart> ; } } } },0
