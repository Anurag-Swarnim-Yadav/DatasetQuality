,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; ret = <S2SV_ModEnd> - ETIMEDOUT ; <S2SV_ModStart> - ETIMEDOUT ; goto out ;,0
1,<S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;,0
2,<S2SV_ModStart> ) ) { if ( writer -> stco!= NULL ) { <S2SV_ModStart> 0 ) ; },0
3,<S2SV_ModStart> -> child ; if ( item > 0 ) { <S2SV_ModStart> 0 ) { <S2SV_ModEnd> c = c <S2SV_ModStart> -> next ; },0
4,"<S2SV_ModStart> u32 nr, u32 <S2SV_ModEnd> nmi, struct <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",0
5,"<S2SV_ModStart> { # ifndef _MSC_VER <S2SV_ModEnd> char buf [ <S2SV_ModStart> { grub_error ( ""invalid <S2SV_blank> extent"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( data, ext [ i ]. len <S2SV_ModEnd> ) ; return <S2SV_ModStart> { grub_disk_addr_t start ; memset ( & start, 0, sizeof ( start ) )",0
6,"<S2SV_ModStart> fdct16 ( const tran_low_t <S2SV_ModEnd> in [ 16 <S2SV_ModStart> 16 ], tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> ] ) { tran_low_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> 8 ] ; tran_low_t <S2SV_ModEnd> step3 [ 8 <S2SV_ModStart> 8 ] ; tran_low_t <S2SV_ModEnd> temp1, temp2 <S2SV_ModStart> ] ; { tran_low_t <S2SV_ModEnd> s0, s1 <S2SV_ModStart> ] ; { tran_low_t <S2SV_ModEnd> s0, s1 <S2SV_ModStart> ] ; { tran_low_t <S2SV_ModEnd> s0, s1 <S2SV_ModStart> ] ; { tran_low_t <S2SV_ModEnd> s0, s1 <S2SV_ModStart> ] ; { tran_low_t <S2SV_ModEnd> s0, s1 <S2SV_ModStart> ] ; { tran_low_t <S2SV_ModEnd> s0, s1 <S2SV_ModStart> ] ; { tran_low_t <S2SV_ModEnd> s0, s1 <S2SV_ModStart> ] ; { tran_low_t <S2SV_ModEnd> s0, s1 <S2SV_ModStart> ] ; { tran_low_t <S2SV_ModEnd> s0, s1 <S2SV_ModStart> ] ; { tran_low_t <S2SV_ModEnd> s0, s1 <S2SV_ModStart> ] ; { tran_low_t <S2SV_ModEnd> s0, s1 <S2SV_ModStart> ; tran",0
7,<S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { #,0
8,"<S2SV_ModStart> search_filter_level ( const VP9_COMMON * const cm, const <S2SV_ModStart> * cpi, const <S2SV_ModStart> & cpi -> td. <S2SV_ModStart> cm -> lf <S2SV_ModEnd> ; const int <S2SV_ModStart> cm -> lf. <S2SV_ModEnd> filter_level = get_max_filter_level <S2SV_ModStart> get_max_filter_level ( cpi <S2SV_ModEnd> ) ; int <S2SV_ModStart> max_filter_level ) ; <S2SV_ModEnd> best_err = try_filter_frame <S2SV_ModStart> min_filter_level ) ; <S2SV_ModEnd> bias = ( <S2SV_ModStart> = bias * cm -> frame_to_show <S2SV_ModEnd> / 20 ; <S2SV_ModStart> = bias * cm -> frame_to_show <S2SV_ModEnd> / 20 ;",0
9,"<S2SV_ModStart>. left ; if ( c. left == 0 ) { luaL_checkstack ( L, 1, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> in <S2SV_blank> input <S2SV_blank> length <S2SV_blank> %d"", c. left, c. left ) ; return luaL_error ( L, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> in <S2SV_blank> input <S2SV_blank> length <S2SV_blank> %d"", c. left, c. left ) ; } else { luaL_checkstack ( L, 1, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> in <S2SV_blank> input <S2SV_blank> length <S2SV_blank> %d"", c. left, c. left ) ; return luaL_error ( L, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> %d <S2SV_blank> in <S2SV_blank> input <S2SV_blank> length <S2SV_blank> %d"", c. left, c. left ) ; } }",0
10,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ++ i ) vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( usehp ) vpx_write <S2SV_ModEnd> ( w,",1
11,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = coapClientGetMaxBlockSize ( ) ; } else { <S2SV_ModEnd> request -> rxBlockSzx <S2SV_ModStart> request -> rxBlockSzx ; } <S2SV_ModEnd> osReleaseMutex ( &,0
12,"<S2SV_ModStart> ) dat ; if ( length < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> EXTRACT_16BITS ( ptr <S2SV_ModEnd> ) ) ) <S2SV_ModStart> ) ) ) ) ) ; if ( length < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> ) ) ; <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } } <S2SV_null>",0
13,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> construct_get_dest_keyring ( struct <S2SV_ModStart> * authkey ; int ret = 0 ; <S2SV_ModStart> } else { ret = <S2SV_ModStart> dest_keyring ) break ; if ( dest_keyring ) { key_put ( dest_keyring ) ; break ; } } } if ( dest_keyring ) { key_put ( dest_keyring ) ; return ret,0
14,<S2SV_ModStart> = NULL ; if ( spcred == NULL ) return GSS_S_INIT_TOKEN_SEND ;,0
15,"<S2SV_ModStart> int len ; if ( t < 0 ) { g_warn ( ""too <S2SV_blank> many <S2SV_blank> times <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> (%d)\\n"", t, strerror ( errno ) ) ; return NULL ; }",0
16,<S2SV_ModStart> length ) ; if ( length > AUTH_PASS_LEN ) { <S2SV_ModStart> ) ) ; },0
17,<S2SV_ModStart> e == p || e == p,0
18,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",1
19,<S2SV_ModStart> = 0 ; if ( <S2SV_ModStart> & timeout )!= 0 ) { return false ; } <S2SV_ModEnd> return FD_ISSET (,0
20,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> detect_transition_to_still ( struct <S2SV_ModStart> last_decay_rate ) { BOOL <S2SV_ModEnd> trans_to_still = 0 <S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( frame_interval <S2SV_ModStart> if ( frame_interval >= <S2SV_ModEnd> MIN_GF_INTERVAL && loop_decay_rate <S2SV_ModStart> if ( frame_interval >= <S2SV_ModEnd> MIN_GF_INTERVAL && loop_decay_rate <S2SV_ModStart> if ( EOF >= <S2SV_ModEnd> input_stats ( twopass <S2SV_ModStart> tmp_next_frame ) ) break ; <S2SV_ModEnd> reset_fpf_position ( twopass <S2SV_ModStart> position ) ; <S2SV_ModEnd> } return trans_to_still,0
21,<S2SV_ModStart> + size <= EXT4_IO_MAX_SIZE <S2SV_ModEnd> ) ret =,0
22,"<S2SV_ModStart> alg ) { <S2SV_ModEnd> if (! <S2SV_ModStart> CRYPTO_ALG_NEED_FALLBACK ) ) return ERR_PTR ( - ENOENT ) ; request_module ( ""%s"" <S2SV_ModEnd>, name )",0
23,<S2SV_ModStart> = GIT_PKT_NG ; if ( len < 0 ) return - 1 ; <S2SV_ModStart> line += 3 <S2SV_ModEnd> ; GITERERR_CHECK_ALLOC_ADD ( <S2SV_ModStart> ; if ( len < 0 ) return - 1 ; if ( <S2SV_ModStart> + 1 ; <S2SV_ModEnd> GITERERR_CHECK_ALLOC_ADD ( &,0
24,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
25,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) { avio_r8 ( pb ) ; avio_r8 ( pb ) ; avio_r8 ( pb ) ; avio_r8 ( pb ) ; } if (,0
26,"<S2SV_ModStart> 1 ; } if (! IS_ERR ( rootfs ) ) { ERROR ( ""mount <S2SV_blank> entry <S2SV_blank> on <S2SV_blank> relative <S2SV_blank> rootfs <S2SV_blank> %s"", rootfs ) ; return - 1 ; }",0
27,"<S2SV_ModStart> - ENODEV ; memset ( & io -> io_size, 0, sizeof ( io -> io_size ) ) ;",0
28,<S2SV_ModStart> MagickRealType ) ( QuantumRange * ( 0.0 * QuantumRange * QuantumRange * pixel ) <S2SV_ModEnd> & ( size_t,0
29,<S2SV_ModStart> ) ) ; ret &= ~ ( BT_STATUS_SUCCESS | BT_STATUS_DONE ) ;,0
30,<S2SV_ModStart> vpx_codec_err_t res ; <S2SV_ModEnd> if (! <S2SV_ModStart> = VPX_CODEC_INVALID_PARAM ; if ( iface -> enc. cfg_maps ) { for ( ; map = iface -> enc. cfg_maps ; map -> usage >= 0 ; map ++ ) { if ( map -> cfg == NULL ) { res = VPX_CODEC_INCAPABLE ; break ; } } } else { res = VPX_CODEC_INCAPABLE ; } } for ( <S2SV_ModEnd> ; map ->,0
31,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
32,"<S2SV_ModStart>, uint64_t dx_time, int frame_in_yielded <S2SV_ModStart> dx_time ) { if ( frame_in_yielded == 0 ) { fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %d <S2SV_blank> frames\\r"", frame_in, frame_out, dx_time, ( double ) frame_out ) ; return ; }",0
33,"<S2SV_ModStart> ) ) { if (! <S2SV_ModStart>, ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> fields <S2SV_blank> to <S2SV_blank> fetch\\n"" ) ) { D_imp_dbh_from_sth = NULL ; return NULL ; } <S2SV_ModEnd> if (!",0
34,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteBuffer <S2SV_ModStart> ( interface, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60WriteBuffer <S2SV_ModStart> ( interface, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60WriteBuffer <S2SV_ModStart> ( interface, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60WriteBuffer <S2SV_ModStart> ( interface, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60WriteBuffer <S2SV_ModStart> ( interface, ENC28J60_",0
35,"<S2SV_ModStart> ; value = ast2obj_expr ( o -> annotation ) ; if (! value ) goto failed ; Py_DECREF ( value ) ; value = <S2SV_ModStart> o -> lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_expr ( o -> col_offset, value ) < 0 ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_expr ( o -> col_offset, value ) < 0 ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_expr ( o -> col_offset, value ) < 0 ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_expr ( o -> col_offset, value ) < 0 ) goto failed ;",0
36,"<S2SV_ModStart> page && ( ( <S2SV_ModStart>, R_OK )!= 0 ) || ( ( page = <S2SV_ModEnd> access ( page <S2SV_ModStart>, R_OK )!= 0 ) || ( ( page = <S2SV_ModEnd> unlink ( page <S2SV_ModStart> ) > 0 ) || ( ( page = <S2SV_ModEnd> unlink ( page <S2SV_ModStart> ) > 0 ) || ( ( page = <S2SV_ModEnd> unlink ( page <S2SV_ModStart> ) > 0 ) || ( ( page = <S2SV_ModEnd> unlink ( page <S2SV_ModStart> ) > 0 ) || ( ( page = <S2SV_ModEnd> unlink ( page <S2SV_ModStart> ) > 0 ) || ( ( page = <S2SV_ModEnd> unlink ( page <S2SV_ModStart> ) > 0 ) || ( ( page = <S2SV_ModEnd> unlink ( page <S2SV_ModStart> ) > 0 ) || ( ( page = <S2SV_ModEnd> unlink ( page <S2SV_ModStart> ) > 0 ) || ( ( page = <S2SV_ModEnd> unlink ( page <S2SV_ModStart> ) > 0 ) || ( ( page = <S2SV_ModEnd> unlink ( page <S2SV_ModStart> ) > 0 ) || ( ( page = <S2SV_ModEnd> unlink ( page",0
37,"<S2SV_ModStart>, int flag, VP8_COMMON * const cm, const char * const mb <S2SV_ModStart>.5 ) ; <S2SV_ModEnd> unsigned char * <S2SV_ModStart> pp_limits_buffer ; ; <S2SV_ModEnd> ( void ) <S2SV_ModStart> ) flag ; memset <S2SV_ModEnd> ( limits, <S2SV_ModStart> 16 * mb_cols, 0 <S2SV_ModStart> 8 ) ; memset <S2SV_ModEnd> ( source -> <S2SV_ModStart> 8 ) ; memset <S2SV_ModEnd> ( source ->",0
38,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> ) ; struct mb2_cache_entry * ce ; int error ; ce = mb2_cache_entry_alloc ( ext4_mb_cache, GFP_NOFS ) ; if (! ce ) { ea_bdebug ( bh, ""out <S2SV_blank> of <S2SV_blank> memory"" ) ; return ; } error = mb2_cache_entry_insert ( ce, bh -> b_bdev, bh -> b_blocknr, hash ) ; if ( error ) { ea_bdebug ( bh, ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; error = 0 ; } error = mb2_cache_entry_insert ( ce, bh -> b_bdev, bh -> b_blocknr, hash ) ; if ( error ) { ea_bdebug ( bh, ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; error = 0 ; } } else { ea_bdebug ( bh, ""inserting <S2SV_blank> [%x]"", ( int ) hash ) ; <S2SV_ModEnd> } else { <S2SV_ModStart> ""al",0
39,<S2SV_ModStart> ) ) ; free ( uri ) ;,0
40,"<S2SV_ModStart> net * net, const struct ip_options_rcu * rcu <S2SV_ModStart> ip_options_get_alloc ( optlen, rcu <S2SV_ModStart> ; if ( rcu < 0 || optlen > rcu <S2SV_ModEnd> ) return - <S2SV_ModStart> ; if ( rcu < 0 || optlen > rcu <S2SV_ModEnd> ) return -",0
41,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|truncated]"" <S2SV_ModEnd> ) ) ;",0
42,"<S2SV_ModStart> ) N_ ( ""E531: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> term <S2SV_blank> to <S2SV_blank> the <S2SV_blank> VT <S2SV_blank> file"" <S2SV_ModEnd> ) ; else",0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode, & new_mode, & new_mode, & new_mode, & new_mode, & new_mode, & new_mode, & new_mode, & new_mode, & new_mode, & new_mode, & new_mode, & new_mode, & new_mode, & new_mode, & new_mode, & new_mode, & new_mode, & new_mode, & new_mode, & new_mode, & new_mode, & new_mode, & new_mode, & new_mode, & new_mode, & new_mode, & new_mode, & new_mode, & new_mode, & new_mode, & new_mode, & new_mode, & new_mode, & new_mode, & new_mode, & new_mode, & new_mode, & new_mode, & new_mode, & new_mode, & new_mode, & new_mode, & new_mode, & new_mode, & new_mode, & new_mode, & newattrs, & newatt",0
44,<S2SV_ModStart> size_t size ; uint_fast16_t size_tmp ; <S2SV_ModStart> ) ||! size_tmp <S2SV_ModEnd> ) ) { <S2SV_ModStart> if (! size_tmp <S2SV_ModEnd> ) { goto <S2SV_ModStart> if (! size_tmp <S2SV_ModEnd> ) { goto,0
45,<S2SV_ModStart> FLAG_MATCHED ) || ( <S2SV_ModStart> dp == datalen ||! datalen ) <S2SV_ModStart> ; if ( ( <S2SV_ModStart> dp == datalen ||! datalen ),0
46,"<S2SV_ModStart> size_t * acl_len, struct xdr_stream * * xdr_stream <S2SV_ModStart> acl_len ) { struct xdr_stream * const rq_stream = xdr -> rq_stream ; <S2SV_ModStart> int status ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> int status ; if ( xdr_stream -> len < xdr -> len ) { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> attr <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> (%u)\\n"", __func__, xdr -> len, xdr -> len ) ; return - EINVAL ; } * xdr_stream = xdr -> rq_stream <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; hdrlen = xdr_stream -> len <S2SV_ModEnd> ; recvd = <S2SV_ModStart> attrlen ) ; <S2SV_ModEnd> } else status",0
47,<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value,0
48,"<S2SV_ModStart> { owner = ssplit <S2SV_ModEnd> ( auth, <S2SV_ModStart> } group = ssplit <S2SV_ModEnd> ( tok,",1
49,<S2SV_ModStart> = NULL ; size_t alloc_size = 0 ; <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; alloc_size = align ; if ( addr ) { alloc_size = align ; } else if ( addr ) { alloc_size = align ; } else { alloc_size = align ; } <S2SV_ModEnd> if ( addr,0
50,"<S2SV_ModStart> int indexes = lookup_index_table_index ( indexes, <S2SV_ModEnd> sBlk. s <S2SV_ModStart> s. inodes, <S2SV_ModEnd> sBlk. s <S2SV_ModStart> s. inodes ) <S2SV_ModEnd> ; res =",0
51,"<S2SV_ModStart> } else return apr_psprintf ( cmd -> pool, ""ModSecurity: <S2SV_blank> Invalid <S2SV_blank> value <S2SV_blank> for <S2SV_blank> SecRuleEngine: <S2SV_blank> %s"" <S2SV_ModEnd>, p1 )",0
52,"<S2SV_ModStart> ; if ( global -> codec -> name == NULL ) { return 1 ; } else if ( strcmp ( global -> codec -> name, ""vp9"" ) == 0 ) { ctrl_args = vp9_args ; ctrl_args_map = vp9_arg_ctrl_map ; } else if ( strcmp ( global -> codec -> name, ""vp9"" ) == 0 ) { ctrl_args = vp9_args ; ctrl_args_map = vp9_arg_ctrl_map ; } else if ( strcmp ( global -> codec -> name, ""vp9"" ) == 0 ) { ctrl_args = vp9_args ; ctrl_args_map = vp9_arg_ctrl_map ; } else if ( strcmp ( global -> codec -> name, ""vp9"" ) == 0 ) { ctrl_args = vp9_args ; ctrl_args_map = vp9_arg_ctrl_map ; } else if ( strcmp ( global -> codec -> name, ""vp9"" ) == 0 ) { ctrl_args = vp9_args ; ctrl_args_",0
53,<S2SV_ModStart> } if (! c -> opt ) return 0 ; if ( <S2SV_ModStart>. client ||! c -> opt -> redirect_addr. names ) return 0 ; if ( <S2SV_ModStart>. names ) { <S2SV_ModStart> return 1 ; },0
54,"<S2SV_ModStart> ; if ( ( cmac & AT91_AES_BLOCK_SIZE_BYTE )!= 0 ) { pr_err ( ""%s: <S2SV_blank> Invalid <S2SV_blank> AES <S2SV_blank> method <S2SV_blank> for <S2SV_blank> %d\\n"", __func__, cmac ) ; goto exit ; } if (",0
55,"<S2SV_ModStart> cpi ) { VP9_COMMON * const cm = & cpi -> common ; <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> -> twopass. gf_group_bits <S2SV_ModEnd> = MAX ( <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
56,"<S2SV_ModStart> EOFOp 0x07, image_info -> rows, <S2SV_ModStart> ; do { image_info -> rows = 0 ; <S2SV_ModStart> ; image -> rows = 0 ; image_info -> rows = 0 ; image_info -> <S2SV_ModStart> MagickFalse ) ; if ( MagickFalse ) SetImageExtent ( image, image_info -> columns, image_info -> rows ) ; <S2SV_ModStart> MagickFalse ) ; if ( MagickFalse ) SetImageExtent ( image, image_info -> columns, image_info -> rows ) ; <S2SV_ModStart> MagickFalse ) ; if ( MagickFalse ) SetImageExtent ( image, image_info -> columns, image_info -> columns ) ; <S2SV_ModStart> MagickFalse ) ; if ( MagickFalse ) SetImageExtent ( image, image_info -> columns, image_info -> columns ) ; <S2SV_ModStart> MagickFalse ) ; if ( MagickFalse ) SetImageExtent ( image, image_info -> columns, image_info -> columns ) ; <S2SV_ModStart> MagickFalse ) ; if ( MagickFalse ) SetImageExtent ( image, image_info -> columns, image_info -> columns ) ; <S2SV_ModStart> MagickFalse ) ; if ( MagickFalse ) SetImageExt",0
57,<S2SV_ModStart> err_free_buf ; } usb_free_urb ( usbinterface ) ;,0
58,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
59,"<S2SV_ModStart> = ""/etc"" ; if (! ( tmpname = ""/etc"" ) ) { uid_t uid ; uid = open ( ""/dev/null"", O_RDONLY | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O",0
60,<S2SV_ModStart> i1_slice_len ) ; ps_codec -> i1_slice_len = MAX_PPS_CNT_CNT - 1 ;,0
61,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
62,"<S2SV_ModStart> void vp9_setup_dst_planes ( MACROBLOCKD * xd, MACROBLOCKD * xd, <S2SV_ModEnd> const YV12_BUFFER_CONFIG * <S2SV_ModStart> mi_col ) { const YV12_BUFFER_CONFIG * const buffers = xd -> plane ; const YV12_BUFFER_CONFIG * const buffers = xd -> buffers ; const YV12_BUFFER_CONFIG * const buffers = xd -> buffers ; const YV12_BUFFER_CONFIG * const buffers = xd -> buffers ; const YV12_BUFFER_CONFIG * const buffers = xd -> buffers ; const YV12_BUFFER_CONFIG * const buffers = xd -> buffers ; const YV12_BUFFER_CONFIG * const buffers = xd -> buffers ; const YV12_BUFFER_CONFIG * const buffers = xd -> buffers ; const YV12_BUFFER_CONFIG * const buffers = xd -> buffers ; const int <S2SV_ModEnd> * const buffers <S2SV_ModStart> int strides [ <S2SV_ModEnd> ] = { <S2SV_ModStart> int strides [ <S2SV_ModEnd> ] = { <S2SV_ModStart> i ) { <S2SV_ModEnd> pd = & <S2SV_ModStart> -> dst",0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,<S2SV_ModStart> ) get_block = ocfs2_get_block_block <S2SV_ModEnd> ; else get_block <S2SV_ModStart> else get_block = ocfs2_dio_get_block_block <S2SV_ModEnd> ; return __blockdev_direct_IO,0
65,"<S2SV_ModStart> ; if ( strparm [ 0 ] == '\\0' || strparm [ 0 ] == '\\0' ) { printf ( ""\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t",0
66,"<S2SV_ModStart> n ) { const char * str ; <S2SV_ModStart> PyCompilerFlags cf ; <S2SV_ModEnd> PyObject * o <S2SV_ModStart> PyObject * o <S2SV_ModEnd> ; PyObject * <S2SV_ModStart>, * fstring_name <S2SV_ModEnd> ; assert ( <S2SV_ModStart> ':' ) ; str = PyUnicode_DecodeUTF8 ( expr_start, expr_end - expr_start, NULL ) ; if ( str == NULL ) return NULL ; <S2SV_ModStart> ':' ) ; str = PyUnicode_DecodeUTF8 ( str, expr_start, NULL ) ; if ( str == NULL ) return NULL ; <S2SV_ModStart> == NULL ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ; } <S2SV_ModEnd> str [ 0 <S2SV_ModStart> = PyCF_ONLY_AST ; str = PyUnicode_FromString ( ""<fstring>"" ) ; <S2SV_ModStart> = PyCF_ONLY_AST ; str = PyUnicode_FromString ( ""<fstring>"" ) ; <S2SV_ModStart> fstring_name ) ; if ( str == NULL ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ; }",0
67,<S2SV_ModStart> string ) { if ( string == NULL ) return NULL ;,0
68,"<S2SV_ModStart> size ) ; if (! px -> ft ) { g_warning ( ""Not <S2SV_blank> enough <S2SV_blank> data <S2SV_blank> for <S2SV_blank> implementation <S2SV_blank> file <S2SV_blank> to <S2SV_blank> use <S2SV_blank> %d <S2SV_blank> for <S2SV_blank> %s"", ic -> name, xfer -> filename ) ; return FALSE ; }",0
69,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; length = 0 ; <S2SV_ModStart> ) ) ; length = 0 ; <S2SV_ModStart> ) ) ; length = 0 ; <S2SV_ModStart> ) ) ; length = 0 ; <S2SV_ModStart> ) ) ; length = 0 ; <S2SV_ModStart> ) ) ; length = 0 ; <S2SV_ModStart> ) ) ; length = 0 ; <S2SV_ModStart> ) ) ; length = 0 ; <S2SV_ModStart> ) ) ; length = 0 ; <S2SV_ModStart> ) ) ; length = 0 ; <S2SV_ModStart> ) ) ; length = 0 ; <S2SV_ModStart> ) ) ; length = 0 ; <S2SV_ModStart> ) ) ; length = 0 ; <S2SV_ModStart> ) ) ; length = 0 ; <S2SV_ModStart> ) ) ; length = 0 ; <S2SV_ModStart> ) ) ; length = 0 ; <S2SV_ModStart> ) ) ; length = 0 ; <S2SV_ModStart> ) ) ; length = 0 ; <S2SV_ModStart> ) ) ; length = 0 ;",0
70,"<S2SV_ModStart> void ) { test_checkout_fails ( ""refs/heads/git_tilde1"", "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
71,<S2SV_ModStart> int i ; const <S2SV_ModStart> src -> v_buffer <S2SV_ModEnd> } ; const <S2SV_ModStart> int strides [ MAX_MB_PLANE <S2SV_ModEnd> ] = {,0
72,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
73,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
74,<S2SV_ModStart> user ) { struct ipmi_host_info * host = user -> host ; struct ipmi_host_info * host = & host -> host ; struct ipmi_host_info * host = & host -> host ; struct ipmi_host_info * host = & host -> host ; struct ipmi_host_info * host = host -> host ; struct ipmi_host_info * host = & host -> host ; struct ipmi_host_info * host = host -> host ; struct ipmi_host_info * host = host -> host ; struct ipmi_host_info * host = host -> host ; struct ipmi_host_info * host = host -> host ; struct ipmi_host_info * host = host -> host ; if ( host ) host -> host -> host -> host -> host -> host -> host -> host -> host -> host -> host_host -> host_host -> host_host -> host_host -> host_host -> host_host_host_host_host_host_host_host_host_host_host_host_host_host_host_host_host_host_host_host_host_host_host_host_,0
75,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> sl = strlen <S2SV_ModStart> -> ns ) ; int limit = 0 ; if ( cursor -> seen > 0 ) limit = cursor -> seen ; else limit = cursor -> seen ; if ( cursor -> seen > 0 ) limit = cursor -> seen ; else limit = cursor -> seen ; if ( cursor -> seen > 0 ) limit = cursor -> seen ; else limit = cursor -> seen ; if ( cursor -> seen > 0 ) limit = cursor -> seen ; else limit = cursor -> seen ; if ( cursor -> seen > 0 ) limit = cursor -> seen ; else <S2SV_ModEnd> limit = cursor,0
76,"<S2SV_ModStart> * for_ch ; <S2SV_ModEnd> REQ ( n <S2SV_ModStart> ; if ( c -> c_feature_version < 6 ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } for_ch = CHILD ( n, 0 ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; expression = ast_for_expr ( c, CHILD ( n, 3 + is_async ) ) ; if (! expression ) return NULL ; if ( NCH ( n ) == ( 5 + is_async ) ) { int j, n_ifs ; asdl_seq_GET ( t, 0 ) ; n = CHILD ( n, 4 + is_async ) ; n = CHILD ( n, 4 + is_async ) ; n = CHILD ( n, 4 + is_async ) ; n = CHILD ( n, n_ifs ) ; n = CHILD ( n, n_ifs ) ; n = CHILD ( n, n",0
77,<S2SV_ModStart> NULL ; } if ( src -> curframe > src -> curframe ),0
78,"<S2SV_ModStart> write_mb_modes_kf ( const VP9_COMMON * const cm, const MACROBLOCKD * const xd, const MODE_INFO * const above_mi <S2SV_ModEnd>, vpx_writer * <S2SV_ModStart> write_mb_modes_kf ( const <S2SV_ModEnd> const MODE_INFO * <S2SV_ModStart> const mi = mi <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> ] ; const <S2SV_ModEnd> const MODE_INFO * <S2SV_ModStart> const left_mi = mi <S2SV_ModEnd> [ - 1 <S2SV_ModStart> ; write_skip ( <S2SV_ModEnd> mbmi -> segment_id <S2SV_ModStart> == TX_MODE_SELECT ) write_selected_tx_size <S2SV_ModEnd> ( cpi, <S2SV_ModStart> bsize, bsize <S2SV_ModEnd> ) ; if",0
79,"<S2SV_ModStart> maxn ) { <S2SV_ModEnd> # ifdef DEBUG <S2SV_ModStart> ; # endif if ( n > maxn ) SWF_error ( ""Action <S2SV_blank> overflow <S2SV_blank> (%d)!!\\n"", n ) ;",0
80,<S2SV_ModStart> if ( len <= <S2SV_ModEnd> sizeof ( *,0
81,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
82,"<S2SV_ModStart> zArg ) { <S2SV_ModEnd> char * * <S2SV_ModStart> * * azModuleArg ; if ( pTable -> nModuleArg > MAX_TABLE_SIZE ) { sqlite3Error ( ""addModuleArgument <S2SV_blank> too <S2SV_blank> many <S2SV_blank> table <S2SV_blank> for <S2SV_blank> %s"", pTable -> nModuleArg ) ; return ; } if ( pTable -> nModuleArg > MAX_TABLE_SIZE ) { sqlite3Error ( ""addModuleArgument <S2SV_blank> too <S2SV_blank> many <S2SV_blank> table <S2SV_blank> for <S2SV_blank> %s"", pTable -> nModuleArg ) ; return ; } if ( pTable -> nModuleArg > MAX_TABLE_SIZE ) { sqlite3Error ( ""addModuleArgument <S2SV_blank> too <S2SV_blank> many <S2SV_blank> table <S2SV_blank> for <S2SV_blank> %s"", pTable -> nModuleArg ) ; return ; } if ( pTable -> nModuleArg > MAX_TABLE_SIZE ) { sqlite3Error ( ""addModuleArgument <S2SV_blank> too <S2SV_blank> many <S2SV_blank> table <S2SV_blank> for <S2SV_blank> %s"", pTable -> nModuleArg ) ; return ; } if ( pTable -> nModuleArg > MAX_TABLE_SIZE ) { sqlite3Error ( ""addModuleArgument <S2SV_blank> too <S2SV_blank> many <S2SV_blank> table <S2SV_blank> for <S2SV_blank> %s""",0
83,<S2SV_ModStart> ) ) { if ( interp_window_coeff [ idx ]!= interp_window_coeff [ idx ] ) { <S2SV_ModStart> ) ) ; },0
84,<S2SV_ModStart> ) p += ( UChar * ),0
85,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> bfq_idle_slice_timer_body ( struct <S2SV_ModStart> bfq_data * bfqd, enum bfq_expiration reason ; enum bfqq_expiration reason ; unsigned long flags ; unsigned long flags ; spin_lock_irqsave ( & bfqd -> lock, flags ) ; if ( bfq_bfqq_budget_timeout ( bfqd, bfqd -> in_service_queue ) ) return - EBUSY ; spin_unlock_irqrestore ( & bfqd -> lock, flags ) ; if ( bfq_bfqq_budget_timeout ( bfqd -> in_service_queue ) ) return - EBUSY <S2SV_ModEnd> ; spin_unlock_irqrestore ( <S2SV_ModStart> flags ) ; return 0 ;",0
86,,1
87,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
88,<S2SV_ModStart> diffPtr + x >= <S2SV_ModEnd> diffBlock + diffBlockLength <S2SV_ModStart> diffPtr + x >= <S2SV_ModEnd> diffBlock + diffBlockLength <S2SV_ModStart> extraPtr + y >= <S2SV_ModEnd> extraBlockLength ) {,0
89,"<S2SV_ModStart>, fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
90,<S2SV_ModStart> ) ) { MagickBooleanType <S2SV_ModEnd> * const image <S2SV_ModStart> * const image = MagickBooleanType <S2SV_ModEnd> * const image <S2SV_ModStart> * const image = MagickBooleanType <S2SV_ModEnd> * const image,0
91,<S2SV_ModStart> ) { return encoder_common_init <S2SV_ModEnd> ( ctx ),0
92,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
93,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
94,"<S2SV_ModStart> int_mv ; } if ( mv. as_int ) { int_mv_reduction ( cpi, near_ref, mv. as_int ) ; int_mv_reduction ( cpi, near_ref, mv. as_int ) ; } else { int_mv_reduction ( cpi, near_ref, mv. as_int ) ; int_mv_reduction ( cpi, near_ref, mv. as_int ) ; } <S2SV_ModStart> int_mv ; } if ( mv. as_int ) { int_mv_reduction ( cpi, near_ref, mv. as_int ) ; int_mv_reduction ( cpi, near_ref, mv. as_int ) ; int_mv_reduction ( cpi, near_ref, mv. as_int ) ; int_mv_reduction ( cpi, near_ref, mv. as_int ) ; int_mv_reduction ( cpi, near_ref, mv. as_int ) ; int_mv_reduction ( c",0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
97,<S2SV_ModStart> msicap msicap ; int ret = <S2SV_ModStart> 0 ) ; if ( ret < 0 ) return ret ;,0
98,<S2SV_ModStart> = server. <S2SV_ModEnd> server_name ; if,0
99,<S2SV_ModStart> vpx_codec_err_t res ; const int g_w = cfg -> g_w ; const int g_h = cfg -> g_h ; const int g_w = cfg -> g_w ; const int g_w = cfg -> g_w ; const int g_w = cfg -> g_w ; const int g_h = cfg -> g_w ; const int g_w = cfg -> g_w ; const int g_w = cfg -> g_w ; const int g_h = cfg -> g_w ; const int g_h = cfg -> g_h ; const int g_pass = <S2SV_ModEnd> cfg -> g_pass <S2SV_ModStart> g_pass!= VPX_RC_ONE_PASS ; if ( ( g_w > g_w ) || ( g_h!= ctx -> cfg. g_w ) || ( g_h!= ctx -> cfg. g_w ) || ( g_h!= ctx -> cfg. g_h ) ) && ( g_w!= ctx -> cfg. g_w ) || ( g_w!= ctx -> cf,0
100,"<S2SV_ModStart> cpi ) { vpx_set_bit ( VP9_COMMON_BITS, & cpi -> flags ) ; <S2SV_ModStart> cpi, & cpi -> <S2SV_ModEnd> mb ) ;",0
101,<S2SV_ModStart> info -> si_code == SI_CONTINUE <S2SV_ModEnd> ) return -,0
102,<S2SV_ModStart> size - 8 ; if ( ptr -> size < 8 ) return GF_ISOM_INVALID_FILE,0
103,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
104,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> state == mode || fmode & FMODE_WRITE <S2SV_ModStart> ( mode & fmode <S2SV_ModEnd> )!= ( <S2SV_ModStart> ( mode & fmode <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( mode & fmode <S2SV_ModEnd> ) list_move ( <S2SV_ModStart> state -> owner <S2SV_ModEnd> ) ; } <S2SV_ModStart> -> state = fmode <S2SV_ModEnd> ; } <S2SV_null>",0
105,<S2SV_ModStart> read_info ) ; if ( ( <S2SV_ModStart> read_info -> filename )!= MagickFalse ) || ( <S2SV_ModEnd> ( length > <S2SV_ModStart> length > ( <S2SV_ModEnd> size_t ),0
106,<S2SV_ModStart> 0 ; } if ( len > sizeof ( elem ) ) { return 0 ; },0
107,"<S2SV_ModStart>, i, jpc_x_getEXPN <S2SV_ModEnd> ( qcd -> <S2SV_ModStart>, i, jpc_x_getMANT <S2SV_ModEnd> ( qcd ->",0
108,<S2SV_ModStart> avctx -> height && c -> format!= CHUNKY,0
109,<S2SV_ModStart> length - 1 <S2SV_ModEnd> ) ; return,1
110,"<S2SV_ModStart> noffset, NULL, 0",0
111,"<S2SV_ModStart> rx_kfifo, CX23888_IR_RX_KFIFO_SIZE + 1",0
112,"<S2SV_ModStart> vpx_codec_dec_cfg_t * cfg, vpx_codec_dec_cfg_t * cfg_config <S2SV_ModStart> else if ( cfg_config && <S2SV_ModStart> -> caps & VPX_CODEC_CAP_DECODER_XMA <S2SV_ModEnd> ) ) res",0
113,<S2SV_ModStart> ; value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1100WritePhyReg (,0
114,<S2SV_ModStart> ; if ( iph -> protocol == IPPROTO_ICMP && iph -> ihl << 2 ) { struct ipcm_skb_data * skb_data ; skb_data = skb_in -> data ; if ( skb_data -> len < skb_data -> len ) goto out ; } if ( <S2SV_ModStart> ; if ( skb_data -> len < skb_data -> len ) goto out ; if ( <S2SV_ModStart> ; if ( skb_data -> len < skb_data -> len ) goto out ; if ( <S2SV_ModStart> ; if ( skb_data -> len < skb_data -> len ) goto out ; if ( <S2SV_ModStart> ; if ( skb_data -> len < skb_data -> len ) goto out ; if ( <S2SV_ModStart> ; if ( skb_data -> len < skb_data -> len ) goto out ; if ( <S2SV_ModStart> ; if ( skb_data -> len < skb_data -> len ) goto out ; if ( <S2SV_ModStart> ; if ( skb_data -> len < skb_data -> len ) goto out ; if ( <S2SV_ModStart> ; if ( skb_data -> len < skb_data -> len ) goto out,0
115,<S2SV_ModStart> ( flags & VPX_CODEC_CAP_XMA_MODE ) && ( ( flags & VPX_CODEC_FLAG_XMA_MODE ) == 0 ) <S2SV_ModEnd> ) ) res,0
116,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
117,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; RESERVE_SPACE",1
118,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ) ; return 0 <S2SV_ModStart> break ; } return 0 ;,0
119,<S2SV_ModStart> len ) ; if ( len < 1 ) { r_strbuf_destroy ( & op -> esil ) ; return 1 ; },0
120,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
121,<S2SV_ModStart> goto trunc ; ND_TCHECK_16BITS ( & lshp -> ls_type ) ; ND_TCHECK_16BITS ( & lshp -> ls_type ) ; ND_TCHECK_16BITS ( & lshp -> ls_type ) ;,0
122,<S2SV_ModStart> } else { if ( len < opipe -> nrbufs ),0
123,"<S2SV_ModStart> vp9_tree_probs_from_distribution ( vpx_tree * tree, vpx_tree_tree_tree * tree -> tree_tree <S2SV_ModEnd>, unsigned int",0
124,<S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ),0
125,"<S2SV_ModStart> * costs, vpx_tree_tree <S2SV_ModEnd> tree, const <S2SV_ModStart> ) { const vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> ) ; const vpx_tree_index ii = tree [ i + b ] ; if ( ii <= 0 ) costs [ - ii ] = cc ; else cost ( costs, tree, probs, ii, cc ) ; <S2SV_ModEnd> } } <S2SV_null>",0
126,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
127,"<S2SV_ModStart> & 0xffff ; DEB ( printk ( ""sequencer_write(dev=%d, <S2SV_blank> %d)\\n"", dev, fmt ) ) ;",0
128,"<S2SV_ModStart> fadst16 ( const tran_low_t * input, tran_low_t * input, tran_low_t * output ) { tran_low_t * input, tran_low_t * output ) { tran_low_t * input = tran_low_t * input ; tran_low_t * input = tran_low_t * input ; tran_low_t * input = tran_low_t * input ; tran_low_t * input = tran_low_t * input ; tran_low_t * input = tran_low_t * input ; tran_low_t * input = tran_low_t * input ; tran_low_t * input = tran_low_t * input = tran_low_t * input ; tran_low_t * input = tran_low_t * input = tran_low_t * input ; tran_low_t * input = tran_low_t * input = tran_low_t * input = tran_low_t * input = tran",0
129,<S2SV_ModStart> ; # if HAVE_EDSP <S2SV_ModEnd> flags |= HAS_EDSP <S2SV_ModStart> endif # if HAVE_CODEC <S2SV_ModEnd> flags |= HAS_MEDIA <S2SV_ModStart> endif # if HAVE_CODEC <S2SV_ModEnd> flags |= HAS_NEON,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
131,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd>, int * <S2SV_ModStart> ) { const ThreadData * td = td -> td ; const <S2SV_ModStart> & cpi -> td. <S2SV_ModStart> cm = & td <S2SV_ModEnd> -> common ; <S2SV_ModStart> = num_8x8_blocks_wide_lookup [ td <S2SV_ModEnd> -> mbmi. <S2SV_ModStart> = num_8x8_blocks_high_lookup [ td <S2SV_ModEnd> -> mbmi. <S2SV_ModStart> bs ) { td -> td. <S2SV_ModStart> ( cpi, td <S2SV_ModEnd>, mi_8x8, <S2SV_ModStart> ( cpi, td <S2SV_ModEnd>, mi_8x8, <S2SV_ModStart> ( cpi, td <S2SV_ModEnd>, mi_8x8 + <S2SV_ModStart> ( cpi, td <S2SV_ModEnd>, mi_8x8 +",0
132,<S2SV_ModStart> -> flags & CLIENT_CLOSE_REPLY <S2SV_ModEnd> ) break ;,0
133,<S2SV_ModStart> get_blocks_flags = EXT4_GET_BLOCKS_CREATE | EXT4_GET_BLOCKS_DELALLOC_RESERVE,0
134,"<S2SV_ModStart> = 0 ; uint64_t ai_family = 0 ; uint64_t ai_socktype = 0 ; uint64_t ai_protocol = 0 ; <S2SV_ModStart>, handle, & ai_addrlen, & ai_addrlen, & ai_addrlen, NULL, NULL, NULL, NULL <S2SV_ModEnd> ) ) ) <S2SV_ModStart>, handle, & ai_addrlen, & ai_addrlen, NULL <S2SV_ModEnd> )!= OE_OK",0
135,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token,",0
136,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
137,"<S2SV_ModStart> __u16 size, const <S2SV_ModStart> data ) { <S2SV_ModEnd> ret = usb_control_msg <S2SV_ModStart>, indx, <S2SV_ModEnd> size, 100 <S2SV_ModStart> ret ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
138,"<S2SV_ModStart> asdl_seq * body, const asdl_seq * seq_seq <S2SV_ModStart> = body ; p -> v. Module. seq_seq = seq_seq_seq ;",0
139,"<S2SV_ModStart> * src, unsigned int ts_start, unsigned int ts_end, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int flags, unsigned int",0
140,<S2SV_ModStart>. sharpness ; const int q = cm -> frame_type == KEY_FRAME? 1 : 0 ; <S2SV_ModStart>. sharpness ; <S2SV_ModEnd> q = vp9_ac_quant <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> filt_guess = ROUND_POWER_OF_TWO <S2SV_ModStart> } else { <S2SV_ModEnd> lf -> filter_level,0
141,<S2SV_ModStart> ( ) ; if ( btif_get_enabled_device_list ( ) ),0
142,<S2SV_ModStart> = getnum ( ( unsigned char * ),0
143,"<S2SV_ModStart> ""MemoryAllocationFailed"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
144,"<S2SV_ModStart> vpx_codec_err_t res ; uint8_t * alg_priv ; <S2SV_ModStart>. decode ( <S2SV_ModEnd> alg_priv, data",0
145,"<S2SV_ModStart> inode * inode, struct iso_directory_record * ei_sb <S2SV_ModStart> inode ) ; ei -> i_ino = ei -> i_sb ; ei -> i_ino = ei -> i_ino ; ei -> i_ino = ei -> i_ino ; ei -> i_ino = ei -> i_ino ; ei -> i_ino = ei -> i_ino ; ei -> i_ino = ei -> i_ino ; ei -> i_ino = ei -> i_ino ; ei -> i_ino = ei -> i_ino ; ei -> i_ino = ei -> i_ino ; ei -> i_ino = ei -> i_ino ; ei -> i_ino = ei -> i_ino ; ei -> i_ino = ei -> i_ino ; ei -> i_ino = ei -> i_ino ; ei -> i_ino = ei -> i_ino ; ei -> i_ino = ei -> i_ino ; ei -> i_ino = ei -> i_ino ; ei -> i_ino =",0
146,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> ; } } sendClean ( outputbuffer ) ;",0
147,<S2SV_ModStart> self ) { if ( self -> dict ),0
148,<S2SV_ModStart> 0 ; a && <S2SV_ModEnd> i < count,0
149,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body, & tmp -> ob_type -> tp_name <S2SV_ModStart> Py_ssize_t i ; if ( tmp -> ob_type -> tp_name == NULL ) { PyErr_SetString ( PyExc_TypeError, ""Module <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> must <S2SV_blank> be <S2SV_blank> a <S2SV_blank> list, <S2SV_blank> not <S2SV_blank> a <S2SV_blank> %.200s"", tmp -> ob_type -> tp_name ) ; goto failed ; } <S2SV_ModStart> ++ ) { <S2SV_ModEnd> res = obj2ast_stmt <S2SV_ModStart> failed ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp -> ob_type -> tp_name ) < 0 ) { PyErr_SetString ( PyExc_RuntimeError, ""Module <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> changed <S2SV_blank> size <S2SV_blank> during <S2SV_blank> iteration"" ) ; return 1 ; } <S2SV_ModStart>, i, tmp -> ob_type -> tp_name <S2SV_ModEnd> ) ; } <S2SV_ModStart>, i, tmp -> ob_type -> tp_name <S2SV_ModEnd> ) ; }",0
150,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
151,<S2SV_ModStart> ; if ( msg_compat -> msg_control == NULL ) { err = - EINVAL ; goto out_freeiov ; } if ( <S2SV_ModStart> msg_sys -> msg_control <S2SV_ModEnd> ; if (,0
152,<S2SV_ModStart> struct buffer_head * bh = mp -> mp_bh [ 0 ] ; struct buffer_head * <S2SV_ModStart> unsigned end_of_metadata = bh <S2SV_ModEnd> -> mp_bh [ <S2SV_ModStart> = bh_map -> bh_mapping <S2SV_ModEnd> ; bh =,0
153,"<S2SV_ModStart>, vpx_codec_iface_name ( <S2SV_ModEnd> global -> codec <S2SV_ModStart> ; SHOW ( g_max_quantizer <S2SV_ModEnd> ) ; }",0
154,"<S2SV_ModStart> copy ) ; xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> Attribute <S2SV_blank> \'{%s}%s\'"", attr -> name, attr -> name ) ; <S2SV_ModStart> copy ) ; xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> Attribute <S2SV_blank> \'{%s}%s\'"", attr -> name, attr -> name ) ; <S2SV_ModStart> copy ) ; xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> Attribute <S2SV_blank> \'{%s}%s\'"", attr -> name, attr -> name ) ; <S2SV_ModStart> copy ) ; xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> Attribute <S2SV_blank> \'{%s}%s\'"", attr -> name, attr -> name ) ; <S2SV_ModStart> copy ) ; xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> Attribute <S2SV_blank> \'{%s}%s\'"", attr -> name, attr -> name ) ; <S2SV_ModStart> copy ) ; xsltTransformError",0
155,"<S2SV_ModStart> { if ( copy_file_as_safe <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> ) ; } else { if ( copy_file_as_safe <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> ) ; } else { if ( copy_file_as_safe <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ) ; } else { if ( copy_file_as_safe <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ) ; } else { if ( copy_file_as_safe <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ) ; } else { if ( copy_file_as_safe <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ) ; } else { if ( copy_file_as_safe <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ) ; } else { if ( copy_file_as_safe <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ) ; } else { if ( copy_file_as_safe <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ) ; } else {",0
156,<S2SV_ModStart> msix_tab_size ) { <S2SV_ModEnd> bzero ( msixcap,1
157,"<S2SV_ModStart> if (! js_isundefined ( J, 1 ) ) js_raise ( J, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; if (!",0
158,"<S2SV_ModStart> case OFreshOID : { <S2SV_ModStart> 1 ) ) ; } else { if ( Int_val ( Field ( ( value ) dest, 1 ) ) { if ( Int_val ( Field ( ( value ) dest, 1 ) ) { if ( Int_val ( Field ( ( value ) dest, 1 ) ) < 0 ) { return ; } } else { if ( Int_val ( Field ( ( value ) dest, 1 ) ) { return ; } } } else { if ( Int_val ( Field ( ( value ) dest, 1 ) ) < 0 ) { return ; } } } <S2SV_ModEnd> sp -- ; <S2SV_ModStart> case OShift : { if ( Int_val ( Field ( ( value ) dest, 1 ) ) < 0 ) { return ; } else { if ( Int_val ( Field ( ( value ) dest, 1 ) ) < 0 ) { return ; } } } else { if ( Int_val ( Field ( ( ( value ) dest, 1 ) ) < 0 ) { return ; } } } else { if ( Int_val ( Field ( ( ( value ) dest, 1 ) ) < 0 ) { return ; } } } else { if ( Int_val ( Field ( ( value )",0
159,"<S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; ksz8851WriteReg <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( isr & KSZ8851_ISR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_ISR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_ISR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_ISR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_ISR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_ISR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_ISR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_ISR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> (",0
160,"<S2SV_ModStart> void encode_quantization ( VP9_COMMON * cm, const VP9_COMMON * const cm, const <S2SV_ModEnd> struct vpx_write_bit_buffer * <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
161,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, msglen ) ) < 0 ) { TEMP_FAILURE_RETRY ( ""UIPC_Send <S2SV_blank> failed"" ) ; } <S2SV_ModEnd> BTIF_TRACE_ERROR ( ""failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> (%s)""",0
162,"<S2SV_ModStart> ( fp, &",0
163,"<S2SV_ModStart> ( ) ; strcpy <S2SV_ModEnd> ( t1_buf_array, <S2SV_ModStart> t1_buf_array, t1_line_array, sizeof ( t1_buf_array )",0
164,"<S2SV_ModStart> BLOCK_SIZE bsize, VP9_COMMON * const cm, <S2SV_ModStart> BLOCK_SIZE subsize ) { const int bs_offset = cm -> mi_rows ; const int bs_offset = cm -> mi_cols + bs_offset ; <S2SV_ModStart> / 4 ; if ( bs_offset < bs_offset ) return ; <S2SV_ModStart> case PARTITION_NONE : if ( bs_offset < bs_offset ) return ; <S2SV_ModStart> mi_col ) ; if ( bs_offset < bs_offset ) return ; <S2SV_ModStart> mi_col ) ; if ( bs_offset < bs_offset ) return ; <S2SV_ModStart> mi_col ) ; if ( bs_offset < bs_offset ) return ; <S2SV_ModStart> mi_col ) ; if ( bs_offset < bs_offset ) return ; <S2SV_ModStart> mi_col ) ; if ( bs_offset < bs_offset ) return ; <S2SV_ModStart> mi_col ) ; if ( bs_offset < bs_offset ) return ; <S2SV_ModStart> mi_col ) ; if ( bs_offset < bs_offset ) return ; <S2SV_ModStart> mi_col ) { if ( bs_offset < bs_",0
165,<S2SV_ModStart> key_ref ) ; if ( key -> type -> read ) { down_read ( & key -> sem ) ; ret = - EOPNOTSUPP ; goto error2 ; },0
166,<S2SV_ModStart> ps_dec -> u4_first_slice_in_pic || ps_dec -> u4_first_slice_in_pic,0
167,<S2SV_ModStart> var_off ) ; if ( src_known ) { <S2SV_ModStart> var_off ) ; },0
168,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( cifs_sb -> <S2SV_ModStart> -> i_name. len > sizeof ( struct dentry ) - 1 ) || ( cifs_sb -> mnt_cifs_flags & ( CIFS_MOUNT_POSIX_PATHS | CIFS_MOUNT_EXCL ) ) <S2SV_ModEnd> ) { rc,0
169,"<S2SV_ModStart> -> opt_rmt_port ; RCU_INIT_POINTER ( ireq -> ireq_opt, & tp -> ireq_opt ) ;",0
170,"<S2SV_ModStart> svc_ctx ) { uint32_t number_of_keyframes ; uint32_t <S2SV_ModEnd> i, j <S2SV_ModStart> ; encode_frame_count = ( int ) <S2SV_ModStart> ; if ( ( <S2SV_ModStart> si -> kf_dist > 1 ) || ( si -> layer_mode == ALT_INTER_LAYER_PREDICTION_IP && encode_frame_count > 1 ) <S2SV_ModEnd> ) return vpx_svc_get_message <S2SV_ModStart> ""\\n"" ) ; <S2SV_ModEnd> if ( svc_ctx <S2SV_ModStart> i ) { <S2SV_ModEnd> if ( svc_ctx <S2SV_ModStart> i ) { <S2SV_ModEnd> if ( svc_ctx <S2SV_ModStart> i ] [ 1 ] * si -> layer_mode == ALT_INTER_LAYER_PREDICTION_IP && encode_frame_count > 1 ) { encode_frame_count = encode_frame_count / si -> layer_mode ; } else { encode_frame_count = encode_frame_count / si -> layer_mode ; } <S2SV_ModEnd> if ( svc_ctx <S2SV_ModStart> ] ) ; } else { encode_frame_count = encode_frame_count / si -> layer_mode ; } <S2SV_ModStart> i ] [ 1 ] * si -> layer_",0
171,"<S2SV_ModStart> = new_cols ; vterm_allocator_free ( <S2SV_ModEnd> screen -> vt <S2SV_ModStart> screen -> sb_buffer, sizeof ( VTermScreenCell ) * new_cols",0
172,"<S2SV_ModStart> n ) { int result = 0 ; int result = 0 ; assert ( * str < end ) ; <S2SV_ModStart> NULL ) ; int result = 0 ; assert ( * str < end ) ; for ( <S2SV_ModEnd> ; * str <S2SV_ModStart> < end ; ( * str ) ++ ) { char ch = * * str ; if ( ch == '{' || ch == '}' ) { if ( ch == '{' || ch == '}' ) { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; return - 1 ; } } else if ( ch == '{' || ch == '}' ) { if ( ch == '}' ) { if ( ch == '}' ) { if ( ch == '}' ) { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; return - 1 ; } } } } } } } }literal_end = * str ; assert ( * str <= end ) ; assert ( * str == end || * * str == '{' || * * str == '{' || * * str == '",0
173,<S2SV_ModStart> ) ; struct dump_dir_data <S2SV_ModEnd> * dd =,0
174,<S2SV_ModStart> bytesPerPixel ) ; if ( bytesPerPixel > bytesPerPixel ) { <S2SV_ModStart> bytesPerPixel ) ; },0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""%s: <S2SV_blank> too <S2SV_blank> short"", length ) ) ; return ; }",0
176,<S2SV_ModStart> check_here ) { thissad = check_here ; this_mv = check_here ; this_mv = check_here ; this_mv = check_here ; this_mv = check_here ; this_mv = check_here ; this_mv = check_here ; this_mv = check_here ; this_mv = check_here ; this_mv = check_here ; this_mv = check_here ; this_mv = check_here ; this_mv = check_here ; this_mv = check_here ; this_mv = check_here ; this_mv = check_here ; this_mv = check_here ; this_mv = check_here ; this_mv = check_here ; this_mv = check_here ; this_mv = check_here ; this_mv = check_here ; this_mv = check_here ; this_mv = check_here ; this_mv = check_here ; this_mv = check_here ; this_mv = check_here ; this_mv = check,0
177,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart> int mi_col ; const <S2SV_ModStart> int mi_col ; const <S2SV_ModStart> mi_col < mi_col_end && mi_col < td -> sf. partition_search_type <S2SV_ModStart> mi_col < mi_col_end && mi_col < td -> sf. partition_search_type <S2SV_ModStart> ; MVT_INFO * * mi_8x8 <S2SV_ModEnd> = cm -> <S2SV_ModStart> = UINT_MAX ; vp9_zero <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> case VAR_BASED_PARTITION : if ( cpi -> sf. partition_search_type == VPX_BASED_PARTITION ) { <S2SV_ModStart> = UINT_MAX ; vp9_zero <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> mi_col ) ; } else { vp9_zero ( cpi -> sf. partition_search_type ) ; } <S2SV_ModStart> mi_col ) ; if ( cpi -> sf. partition_search_type == VPX_BASED_PARTITION ) { <S2SV_ModStart>, mi_col, mi_col, BLOCK_64X64, & dummy_dist ) ; } else { vp9_zero ( cpi ->",0
178,"<S2SV_ModStart> u_int8_t state ; if (! skb_header_pointer ( skb, dataoff, sizeof ( _dh ), & dh ) ) { msg = ""nf_ct_dccp: <S2SV_blank> skb_header_pointer <S2SV_blank> (skb <S2SV_blank> = <S2SV_blank> %u, <S2SV_blank> size <S2SV_blank> = <S2SV_blank> %u)"", skb_size ( skb ), skb_size ( skb ), skb_size ( skb ) ) ; goto out_invalid ; }",0
179,"<S2SV_ModStart> net, struct ip_options_rcu * rcu <S2SV_ModEnd>, struct ip_options <S2SV_ModStart> & 3 ) rcu_dereference_protected ( <S2SV_ModStart> [ optlen ++ ], <S2SV_ModEnd> opt -> __data <S2SV_ModStart> = IPOPT_END ; rcu_dereference_protected ( <S2SV_ModStart> net, opt, rcu <S2SV_ModEnd> ) ) {",0
180,"<S2SV_ModStart> connection == NULL || strcasecmp ( connection, ""Connection"" ) == 0",0
181,<S2SV_ModStart> * findalldevs_if ; uint32_t <S2SV_ModEnd> nif = 0 <S2SV_ModStart> 0 ; } if ( plen < 0 ) { return - 1 ; } <S2SV_ModStart> -> description ) { if ( plen < 0 ) { return - 1 ; } <S2SV_ModEnd> if ( d <S2SV_ModStart> name ) ; if ( plen < 0 ) { return - 1 ; } <S2SV_ModStart> -> name ) { if ( plen < 0 ) { return - 1 ; } <S2SV_ModEnd> break ; default <S2SV_ModStart> ; default : return - 1 ; } <S2SV_ModStart> ; default : return - 1 ;,0
182,"<S2SV_ModStart> ""basename"" ) ; g_hash_table_remove ( problem_info, FILENAME_ABRT_VERSION ) ;",0
183,<S2SV_ModStart> -> columns - 3 <S2SV_ModEnd> ) ; x <S2SV_ModStart> -> columns - 3 <S2SV_ModEnd> ) ; x <S2SV_ModStart> -> columns - 3 <S2SV_ModEnd> ) ; x <S2SV_ModStart> -> columns - 3 <S2SV_ModEnd> ) ; x <S2SV_ModStart> -> columns - 3 <S2SV_ModEnd> ) ; x <S2SV_ModStart> -> columns - 3 <S2SV_ModEnd> ) ; x <S2SV_ModStart> -> columns - 3 <S2SV_ModEnd> ) ; x <S2SV_ModStart> -> columns - 3 <S2SV_ModEnd> ) ; x <S2SV_ModStart> -> columns - 3 <S2SV_ModEnd> ) ; x <S2SV_ModStart> -> columns - 3 <S2SV_ModEnd> ) ; x <S2SV_ModStart> -> columns - 3 <S2SV_ModEnd> ) ; x <S2SV_ModStart> -> columns - 3 <S2SV_ModEnd> ) ; x <S2SV_ModStart> -> columns - 3 <S2SV_ModEnd> ) ; x <S2SV_ModStart> -> columns - 3 <S2SV_ModEnd> ) ; x <S2SV_ModStart> -> columns - 3 <S2SV_ModEnd> ) ; x <S2SV_ModStart> -> columns - 3 <S2SV_ModEnd> ) ; x <S2SV_ModStart> -> columns - 3 <S2SV_ModEnd> ) ; x <S2SV_ModStart> -> columns - 3 <S2SV_ModEnd> ) ; x <S2SV_ModStart> -> columns - 3 <S2SV_ModEnd> ) ; x <S2SV_ModStart> -> columns - 3 <S2SV_ModEnd> ) ; x <S2SV_ModStart> -> columns - 3 <S2SV_ModEnd> ) ; x <S2SV_ModStart> -> columns - 3 <S2SV_ModEnd> ) ; x <S2SV_ModStart> -> columns - 3 <S2SV_ModEnd> ) ; x <S2SV_ModStart> -> columns - 3 <S2SV_ModEnd> ) ; x <S2SV_ModStart> -> columns - 3 <S2SV_ModEnd> ) ; x <S2SV_ModStart> -> columns - 3 <S2SV_ModEnd> ) ; x <S2SV_ModStart> -> columns - 3 <S2SV_ModEnd> ) ; x,0
184,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
185,"<S2SV_ModStart>. rows, ( size_t )",0
186,"<S2SV_ModStart> ( ndo, ""%s"", bp [ 1 ] <S2SV_ModEnd> ) ) ;",0
187,"<S2SV_ModStart>! dumpable && ( <S2SV_ModStart> user_ns, mode ) ||! dumpable ) <S2SV_ModEnd> ) { rcu_read_unlock",0
188,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
189,<S2SV_ModStart> i1_nal_type ) { if ( u4_payload_size < 0 ) { ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; },0
190,<S2SV_ModStart> sdma_unfreeze_wq ) ; <S2SV_ModEnd> ret = - <S2SV_ModStart> sdma_unfreeze_wq ) ; <S2SV_ModEnd> if (!,0
191,"<S2SV_ModStart>, int rep_quick, my_bool skip_copy <S2SV_ModStart> my_MUTEX_INIT_FAST ) ; if ( skip_copy ) { <S2SV_ModStart> my_MUTEX_INIT_FAST ) ; }",0
192,<S2SV_ModStart> } pairs = palloc0 <S2SV_ModEnd> ; for (,0
193,"<S2SV_ModStart> val ) ; ruleadd <S2SV_ModEnd> ( r,",0
194,<S2SV_ModStart> ) ) { if ( c -> bind -> kind == AGOO_TYPE_HEADER ) { <S2SV_ModStart> __LINE__ ) ; },0
195,"<S2SV_ModStart> vp9_fht16x16_c ( const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> 256 ] ; vpx_fdct16x16_c <S2SV_ModEnd> * outptr = <S2SV_ModStart>, j ; vpx_fdct16x16_c <S2SV_ModEnd> temp_in [ 16",0
196,"<S2SV_ModStart> g_print ( ""Could <S2SV_blank> not <S2SV_blank> find <S2SV_blank> desktop <S2SV_blank> file <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> %s"", name, name <S2SV_ModStart>, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) { g_print ( ""Could <S2SV_blank> not <S2SV_blank> find <S2SV_blank> desktop <S2SV_blank> file <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> %s"", name, name <S2SV_ModEnd> ) ; goto <S2SV_ModStart> g_print ( ""Could <S2SV_blank> not <S2SV_blank> find <S2SV_blank> desktop <S2SV_blank> file <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> %s"", name, name <S2SV_ModEnd> ) ; goto",0
197,<S2SV_ModStart> = osi_calloc ( strlen ( filename ) + 5 + strlen ( filename ) + 5 + strlen ( filename ) + 5 + strlen ( filename ) + 5 + strlen ( filename ) + 5 + strlen ( filename ) + 5 + strlen ( filename ) + 5 + strlen ( filename ) + 5 + strlen ( filename ) + 5 + strlen ( filename ) + 5 + strlen ( filename ) + 5 + strlen ( filename ) + 5 + strlen ( filename ) + 5 + strlen ( filename ) + 5 + strlen ( filename ) + 5 + strlen ( filename ) + 5 + strlen ( filename ) + 5 + strlen ( filename ) + 5 + strlen ( filename ) + 5 + strlen ( filename ) + 5 + strlen ( filename ) + 5 + strlen ( filename ) + 5 + strlen ( filename ) + 5 + strlen ( filename ) + 5 + strlen ( filename ) + 5 + strlen ( filename ) + 5 + strlen ( filename ) + 5 + strlen ( filename ) + 5 + strlen ( filename ) + 5 + strlen ( filename ) + 5 + strlen ( filename ) +,0
198,<S2SV_ModStart> len ) ; ND_TCHECK_16BITS ( tptr + 4 ) ; <S2SV_ModStart> len ) ; ND_TCHECK_16BITS ( tptr + 4 ) ; <S2SV_ModStart> len ) ; ND_TCHECK_16BITS ( tptr + 4 ) ; <S2SV_ModStart> len ) ; ND_TCHECK_16BITS ( tptr + 4 ) ; <S2SV_ModStart> len ) ; ND_TCHECK_16BITS ( tptr + 4 ) ; <S2SV_ModStart> len ) ; ND_TCHECK_16BITS ( tptr + 4 ) ; <S2SV_ModStart> len ) ; ND_TCHECK_16BITS ( tptr + 4 ) ; <S2SV_ModStart> len ) ; ND_TCHECK_16BITS ( tptr + 4 ) ; <S2SV_ModStart> len ) ; ND_TCHECK_16BITS ( tptr + 4 ) ; <S2SV_ModStart> len ) ; ND_TCHECK_16BITS ( tptr + 4 ) ; <S2SV_ModStart> len ) ; ND_TCHECK_16BITS ( tptr + 4 ) ; <S2SV_ModStart> len ) ; ND_TCHECK_16BITS ( tptr + 4 ) ; <S2SV_ModStart> len ) ; ND_TCHECK_16BITS ( tptr + 4 ) ; <S2SV_ModStart> len ) ; ND_T,0
199,"<S2SV_ModStart> target, NULL ) ; xmlFreeInputStream ( ctxt <S2SV_ModStart> NULL ) { xmlFreeInputStream ( ctxt ) ;",0
200,"<S2SV_ModStart> S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %ld\\r\\n"" <S2SV_ModEnd> ""%s"", request",0
201,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> src, dest, & dest ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""chown"" ) ; <S2SV_ModEnd> unlink ( src",0
202,<S2SV_ModStart> rc!= BFA_STATUS_OK || fcomp. fc. fc_hcb_comp_done,0
203,"<S2SV_ModStart> -> x = MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> y = MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> y = MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> z = MagickMax <S2SV_ModEnd> ( 1.0f,",0
204,<S2SV_ModStart> ; rec -> sasl_username = src -> sasl_username ; rec ->,0
205,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
206,"<S2SV_ModStart> o, datao, n_offset <S2SV_ModStart> n -> order, n_offset <S2SV_ModStart> n -> order, n_offset",0
207,"<S2SV_ModStart> ) ) { my_bool is_same_data = <S2SV_ModEnd> ( param -> <S2SV_ModStart> param -> isam_file_name == NULL ) ; mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> same <S2SV_blank> data"", filename ) ; mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> same <S2SV_blank> data"", filename ) ; mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> same <S2SV_blank> data"", filename ) ; mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> same <S2SV_blank> data"", filename ) ; mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> same <S2SV_blank> data"", filename ) ; mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> same <S2SV_blank> data"", filename ) ; mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> same <S2SV_blank> data"", filename ) ; mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> same <S2SV_blank> data"", filename ) ; mi_check_print_error ( param, ""\'%s\' <S2SV_blank>",0
208,"<S2SV_ModStart> olen ) { char * ns ; int alloc ; char * ns ; int strindex = 0 ; char * ns ; int strindex = 0 ; char * ns ; int strindex = 0 ; char * ns ; int strindex = 0 ; char * ns ; int strindex = 0 ; char * ns ; int strindex = 0 ; char * ns ; int strindex = 0 ; char * ns ; int strindex = 0 ; char * ns ; int strindex = 0 ; char * ns ; int strindex = 0 ; char * ns ; int strindex = 0 ; char * ns ; int strindex = 0 ; char * ns ; int strindex = 0 ; char * ns ; int strindex = 0 ; while ( -- alloc > 0 ) { <S2SV_ModEnd> curl_convert_from_network ( handle <S2SV_ModStart> in, 1, & in, 1 <S2SV_ModStart> = Curl_convert_from_network ( <S2SV_ModEnd> in, 1 <S2SV_ModStart> in, 1, & in, 1, & res ) ; if ( res ) { free ( ns ) ; return NULL ; } ns [ strindex ] = 0 ; alloc -= 2 ; alloc -= 2 ; alloc -= 2 ; alloc -= 2 ; } ns [ strindex",0
209,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
210,<S2SV_ModStart> ; def -> <S2SV_ModEnd> session_setup = usm_session_init,0
211,"<S2SV_ModStart>, sp, sub,",0
212,<S2SV_ModStart> ] ; # if defined ( NETSNMP_NO_WRITE_SUPPORT ) && defined ( NETSNMP_NO_WRITE_SUPPORT ) <S2SV_ModEnd> switch ( action,0
213,<S2SV_ModStart> 8 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 4 ) & 0xFFFF ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 4 ) & 0xFFFF ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 4 ) & 0xFFFF ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 4 ) & 0xFFFF ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 4 ) & 0xFFFF ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 4 ) & 0xFFFF ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 4 ) & 0xFFFF ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 4 ) & 0xFFFF ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 4 ) & 0xFFFF ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 4 ) & 0xFFFF ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 4 ) & 0xFFFF ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 4 ) & 0xFFFF ) ; * pixels ++ = ( unsigned char ) ( (,0
214,"<S2SV_ModStart> timer ) ; spin_lock_irq ( & slave_active_lock ) ; <S2SV_ModStart> open_list ) { spin_lock_irq ( & slave_active_lock ) ; list_move_tail ( & slave -> open_list, & snd_timer_slave_list ) ; list_move_tail ( & slave -> open_list, & snd_timer_slave_list ) ; <S2SV_ModStart> ( & slave_active_lock <S2SV_ModEnd> ) ; slave",0
215,<S2SV_ModStart> -> u4_bitoffset = ih264d_read_mmco_commands <S2SV_ModEnd> ( ps_dec ),0
216,<S2SV_ModStart> decode ) { const <S2SV_ModStart> -> originalHeight ; const <S2SV_ModStart> -> originalHeight ; const <S2SV_ModStart> -> originalHeight ; const <S2SV_ModStart> -> originalHeight ; const <S2SV_ModStart> -> originalHeight ; const <S2SV_ModStart> -> originalHeight ; const <S2SV_ModStart> -> originalHeight ; const <S2SV_ModStart> -> originalHeight ; const <S2SV_ModStart> -> originalHeight ; const <S2SV_ModStart> -> originalHeight ; const <S2SV_ModStart> -> originalHeight ; const <S2SV_ModStart> -> originalHeight ; const <S2SV_ModStart> -> originalHeight ; const <S2SV_ModStart> -> originalHeight ; const <S2SV_ModStart> -> originalHeight ; const <S2SV_ModStart> -> originalHeight ; const <S2SV_ModStart> -> originalHeight ; const <S2SV_ModStart> -> originalHeight ; const <S2SV_ModStart> -> originalHeight ; const <S2SV_ModStart> -> originalHeight ; const <S2SV_ModStart> -> originalHeight ; const <S2SV_ModStart> -> originalHeight ; const <S2SV_ModStart> -> originalHeight ; const <S2SV_ModStart> -> originalHeight ; const <S2SV_ModStart> -> originalHeight ; const <S2SV_ModStart> -> originalHeight ; const <S2SV_ModStart> -> originalHeight ; const <S2SV_ModStart> -> originalHeight ; const <S2SV_ModStart> -> originalHeight ; const <S2SV_ModStart> -> originalHeight ; const <S2SV_ModStart> -> originalHeight ; const <S2SV_ModStart> -> originalHeight ; const <S2SV_ModStart> -> originalHeight ; const,0
217,<S2SV_ModStart> || cherokee_buffer_is_empty ( <S2SV_ModEnd> conn -> validator <S2SV_ModStart> -> user ) ||! conn -> validator -> user. len,0
218,"<S2SV_ModStart> bus ] ; if ( bi == NULL ) { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> bus <S2SV_blank> [%d] <S2SV_blank> for <S2SV_blank> bus <S2SV_blank> %d <S2SV_blank> for <S2SV_blank> bus <S2SV_blank> %d\\n"", __func__, dev -> bus, dev -> bus ) ; return ; } <S2SV_ModEnd> si = &",0
219,"<S2SV_ModStart>, timeo ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> timeo ) ; <S2SV_ModEnd> if ( msg_flags <S2SV_ModStart> msg_namelen = 0 <S2SV_ModEnd> ; while (",0
220,"<S2SV_ModStart> 0 ) { if (! strncmp ( s, ""/FontName"", 9 ) ) { <S2SV_ModStart> ++ ) ; } <S2SV_ModStart> * t && <S2SV_ModEnd> isspace ( *",0
221,<S2SV_ModStart> ; result = TEMP_FAILURE_RETRY ( <S2SV_ModStart> uipc_main. read_set ),0
222,<S2SV_ModStart> msixcap msixcap ; <S2SV_ModEnd> pci_msix_table_init ( dev,0
223,"<S2SV_ModStart> int decode_unsigned_max ( vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",0
224,<S2SV_ModStart> == NULL ) { retval = KRB5KDC_ERR_PREAUTH_FAILED ; <S2SV_ModStart> goto cleanup ; },0
225,<S2SV_ModStart> cpi ) { const VP9_COMMON * const cm = & cpi -> common ; <S2SV_ModStart> cpi ) { const VP9_COMMON * const cm = & cpi -> common ; <S2SV_ModStart> cpi ) { const VP9_COMMON * const cm = & cpi -> common ; <S2SV_ModStart> ( cpi -> oxcf. <S2SV_ModStart> else if ( cm -> <S2SV_ModStart> ( cpi -> oxcf. <S2SV_ModStart> ( cpi -> oxcf. <S2SV_ModStart> ( cpi -> oxcf. <S2SV_ModStart> ( cpi -> oxcf. <S2SV_ModStart> ( cpi -> oxcf. <S2SV_ModStart> ( cpi -> oxcf. <S2SV_ModStart> ( cpi -> oxcf. <S2SV_ModStart> ( cpi -> oxcf. <S2SV_ModStart> ( cpi -> oxcf. <S2SV_ModStart> ( cpi -> oxcf. <S2SV_ModStart> ; } } return cm ->,0
226,<S2SV_ModStart> ) ) { if ( magfact > 1 ) { <S2SV_ModStart> goto trunc ; },0
227,<S2SV_ModStart> ; if ( buf2 <S2SV_ModEnd> -> size <,0
228,<S2SV_ModStart> ) + size ; if ( size < 0 ) return NULL,0
229,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,1
230,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
231,"<S2SV_ModStart> b ) ; if ( b -> fd >= 0 ) { log_debug_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; }",0
232,<S2SV_ModStart> ( ) ; errors += test_string_formatting ( ) ;,0
233,<S2SV_ModStart> -> lun ) list_del_init ( & cmd -> sdev_list ) ;,0
234,"<S2SV_ModStart>, end_col_offset ; if ( TYPE ( CHILD ( n, name_i ) ) == TYPE_COMMENT ) { return NULL ; } <S2SV_ModStart> 2 ; } if ( TYPE ( CHILD ( n, name_i ) ) == TYPE_COMMENT ) { return AsyncFunctionDef ( name, args, body, decorator_seq, returns, LINENO ( n0 ), n0 -> n_col_offset, end_lineno, end_lineno, end_col_offset, c -> c_arena ) ; } else <S2SV_ModStart> 2 ; } if ( is_async ) return AsyncFunctionDef ( name, args, body, decorator_seq, returns, LINENO ( n ), n0 -> n_col_offset, end_lineno, end_lineno, end_col_offset, c -> c_arena ) ; else return FunctionDef ( name, args, body, decorator_seq, returns, LINENO ( n ), n -> n_col_offset, end_lineno, end_lineno, end_lineno, end_col_offset, c -> c_arena ) ;",0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,"<S2SV_ModStart> Rec. RecordLength, Rec. RecordLength",0
237,,1
238,<S2SV_ModStart> 0 ) ; if (! res ) return - ENODEV ;,0
239,"<S2SV_ModStart> case SEEK_SET : <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> headend = <S2SV_ModEnd> psf_fread ( psf <S2SV_ModStart> psf -> header, 1, position - <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> headend <S2SV_ModEnd> ) ; psf <S2SV_ModStart> case SEEK_CUR : <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> headindex = <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> headend <S2SV_ModEnd> ; break ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> header, 1, position - <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> headend <S2SV_ModEnd> ) { psf <S2SV_ModStart> psf -> header, 1, position - <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> headend <S2SV_ModEnd> ), psf <S2SV_ModStart> psf -> header, 1, position - <S2SV_ModEnd> psf -> headend",0
240,<S2SV_ModStart> u4_ofst ) ; ps_cabac -> u4_max_bv_size = 0 ;,0
241,<S2SV_ModStart> ) ) { if ( ctx -> is_contains_object_type == MD_CONTAINER_TYPE_COMMENT ) { <S2SV_ModStart> ) ) ; } else { line -> beg = off ; },0
242,<S2SV_ModStart> perf_event_context * ctx ; perf_event_ctx_lock ( event ) ; ctx <S2SV_ModStart> event ) ; <S2SV_ModEnd> } raw_spin_unlock_irq (,0
243,<S2SV_ModStart> -> post_proc_flag = <S2SV_ModEnd> ctx -> dbg_color_ref_frame_flag <S2SV_ModStart> ctx -> dbg_color_ref_frame_flag <S2SV_ModEnd> ; flags -> <S2SV_ModStart>. noise_level ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
244,<S2SV_ModStart> sizeof ( struct olsr_common <S2SV_ModEnd> ) ) ; <S2SV_ModStart> sizeof ( struct olsr_common <S2SV_ModEnd> ) ) ; <S2SV_ModStart> sizeof ( struct olsr_msg4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> sizeof ( struct olsr_msg4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> sizeof ( struct olsr_msg4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> sizeof ( struct olsr_msg6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> sizeof ( struct olsr_msg6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> sizeof ( struct olsr_msg6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> sizeof ( struct olsr_msg6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> sizeof ( struct olsr_msg6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> sizeof ( struct olsr_msg6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> sizeof ( struct olsr_msg6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> sizeof ( struct olsr_msg6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> sizeof ( struct olsr_msg6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> sizeof ( struct olsr_msg6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> sizeof ( struct olsr_msg6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> sizeof ( struct olsr_msg6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart>,0
245,<S2SV_ModStart> end_time ) { int64_t store_reg [ 8 ] ; int64_t store_reg [ 8 ] ; int64_t store_reg [ 8 ] ; int64_t store_reg [ 8 ] ; int64_t store_reg [ 8 ] ; int64_t store_reg [ 8 ] ; int64_t store_reg [ 8 ] ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vpx_usec_timer_start ( & <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,0
246,"<S2SV_ModStart> ) ) { char * fp = fopen ( src, ""r"" ) ; if ( fp ) fclose ( fp ) ; <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> rv = copy_file <S2SV_ModStart> ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ; if ( fp ) fclose ( fp ) ; if (",0
247,<S2SV_ModStart> ; if ( ptr_hbe_txposer -> core_frame_length > 1024 ) ptr_hbe_txposer -> core_frame_length = 1024 ; if (,0
248,"<S2SV_ModStart> * prov_spec = ( lua_authz_provider_spec * ) <S2SV_ModStart> ; int nargs = 0 ; lua_checkstack ( L, prov_spec -> args -> nelts ) ; lua_checkstack ( L, prov_spec -> args -> nelts ) ; lua_checkstack ( L, prov_spec -> args -> nelts <S2SV_ModStart> ; if ( <S2SV_ModEnd> lua_checkstack ( L <S2SV_ModStart> -> function_name ) <S2SV_ModEnd> ) { int <S2SV_ModStart> ; if ( <S2SV_ModEnd> lua_checkstack ( L <S2SV_ModStart> -> function_name ) <S2SV_ModEnd> ) { ap_log_rerror <S2SV_ModStart> ( L, <S2SV_ModEnd> l, prov_spec <S2SV_ModStart> -> function_name ) <S2SV_ModEnd> ) ; }",0
249,<S2SV_ModStart> image_info -> columns ) { quantum_info = DestroyImageList ( image ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModEnd> if ( (,0
250,<S2SV_ModStart> (! proto_end ||! url_is_valid ( url ),0
251,<S2SV_ModStart> fdt ) ; if (! end ) { return - 1 ; },0
252,<S2SV_ModStart> ( server. bgrewritechildpid <S2SV_ModEnd> ) { if,0
253,<S2SV_ModStart> channel ) ; <S2SV_ModEnd> set_description ( client,1
254,<S2SV_ModStart> book -> dim && v [ i ],0
255,"<S2SV_ModStart> action ) { if ( r < 0 ) { outpos += sprintf ( outpos, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", r, - r, - r * BzK, r ) ; outpos += sprintf ( outpos, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", r, - r, - r * BzK, r, r * BzK, r ) ; } else { outpos += sprintf ( outpos, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", r, - r * BzK, r, - r * BzK, r ) ; } }",0
256,<S2SV_ModStart> this_h ) { int i ; <S2SV_ModStart> 16 ) { for ( i = 0 ; i < sf -> x_step_q4 ; i ++ ) { sf -> predict [ 0 ] [ 0 ] [ 0 ] = vpx_convolve_copy ; sf -> predict [ 1 ] [ 0 ] = vpx_convolve_avg ; sf -> predict [ 1 ] [ 0 ] = vpx_convolve_avg ; sf -> predict [ 1 ] [ 0 ] = vpx_convolve_avg ; sf -> predict [ 1 ] [ 0 ] = vpx_convolve_avg ; sf -> predict [ 1 ] [ 0 ] = vpx_convolve_avg ; sf -> predict [ 1 ] [ 0 ] = vpx_convolve_avg ; sf -> predict [ 1 ] [ 0 ] = vpx_convolve_avg ; sf -> predict [ 1 ] [ 1 ] = vpx_convolve_avg ; sf -> predict [ 2 ] [ 0 ] = vpx_convolve_avg ; sf -> predict [ 2 ] [ 0 ] = vpx_convolve_,0
257,<S2SV_ModStart> (! sock || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ;,0
258,"<S2SV_ModStart> sk ) ; atomic_set ( & np -> pktoptions, 1 ) ;",0
259,<S2SV_ModStart> ( ) ; sctp_v4_protosw_exit ( ) ; <S2SV_ModStart> sctp_net_ops ) ; <S2SV_ModEnd> sctp_sysctl_unregister ( ),0
260,"<S2SV_ModStart> void show_psnr ( struct stream_struct * stream, <S2SV_ModStart> index ) ; if ( stream -> psnr_count ) return ;",0
261,<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen (,1
262,"<S2SV_ModStart> ( ) ; <S2SV_ModEnd> TRACE_DEBUG ( ""CIDER=0x%04"" <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_REG_CIDER <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_REG_MARH <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_REG_MARM <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ERROR_OUT_OF_MEMORY ; } <S2SV_ModEnd> return ERROR_SUONG_IDENTIFIER ;",0
263,"<S2SV_ModStart> skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
264,"<S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; ret = fit_check_format_ext <S2SV_ModEnd> ( fit, <S2SV_ModStart>, IMAGE_SIZE_INVAL ) ; if ( ret <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; ret = fit_image_get_node ( fit, fit_uname_configp, & ret ) ; if ( ret < 0 ) { ret = - ENOEXEC ; goto ret ; } <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; ret = fit_image_get_node ( fit, fit_uname_configp, & ret ) ; if ( ret < 0 ) { ret = - ENOEXEC ; goto ret ; } <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT_OK ) { ret = fit_image_get_node ( fit, fit_uname_configp, & ret ) ; if ( ret < 0 ) { ret = - ENOEXEC ; goto ret ; } <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT_OK ) { ret = <S2SV_ModEnd> - ENOEXEC ; <S2SV_ModStart> - ENOEXEC ; ret = fit_image_get_node ( fit, fit",0
265,<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> ui_DEV_DESTROY ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ui_dev ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ui_fd ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ui_mutex_unlock ( uinput_fd ),0
266,<S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc ->,0
267,"<S2SV_ModStart> i ], ""--allow-trusted"" <S2SV_ModEnd> ) == 0",0
268,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
269,<S2SV_ModStart> ib ] ; <S2SV_ModEnd> dequant_ptr = d <S2SV_ModStart> ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME && mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME && mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME && mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME && mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME && mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME && mb -> eob == mb -> eob ) { mb -> e_mbd. mode_info_context -> mbmi. ref_frame = INTRA_FRAME ; } if (,0
270,"<S2SV_ModStart> FN_REFLEN ] ; strncpy <S2SV_ModEnd> ( buff, <S2SV_ModStart> ( buff ) <S2SV_ModEnd> ) ; # <S2SV_ModStart> ; # endif strncpy ( buff, opt_basedir, sizeof ( buff ) - 1 ) ;",0
271,<S2SV_ModStart> decrypt_cb ) { unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned <S2SV_ModStart> n = ( unsigned,0
272,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
273,"<S2SV_ModStart> int * returnintra, int * returndistortion <S2SV_ModStart> # if CONFIG_TEMPORAL_DENOISING <S2SV_ModEnd> unsigned int zero_mv_sse <S2SV_ModStart>, best_sse = * returndistortion <S2SV_ModEnd>, best_rd_sse = <S2SV_ModStart>, best_rd_sse = * returndistortion <S2SV_ModEnd> ; # endif <S2SV_ModStart> # if CONFIG_TEMPORAL_DENOISING <S2SV_ModEnd> unsigned int zero_mv_sse <S2SV_ModStart>, best_sse = * returndistortion <S2SV_ModEnd> ; # else <S2SV_ModStart>, best_rd_sse = * returndistortion <S2SV_ModEnd> ; # endif <S2SV_ModStart> # if CONFIG_TEMPORAL_DENOISING <S2SV_ModEnd> unsigned int zero_mv_sse <S2SV_ModStart>, best_sse = * returndistortion <S2SV_ModEnd> ; # else <S2SV_ModStart>, best_rd_sse = * returndistortion <S2SV_ModEnd> ; # endif",0
274,<S2SV_ModStart> goto error ; if ( h -> size < 0 ) goto error ;,0
275,"<S2SV_ModStart> u1_level_idc, u1_seq_parameter_set_id, u2_max_frm_num <S2SV_ModStart> ; i < <S2SV_ModEnd> i ++_frame_num_modes ; <S2SV_ModStart> ; i < <S2SV_ModEnd> i ++_frame_num_modes ; i <S2SV_ModStart> ; i < <S2SV_ModEnd> i ++_frame_num_modes ; i <S2SV_ModStart> ; i < <S2SV_ModEnd> i ++_frame_num_modes ; i <S2SV_ModStart> ; i < <S2SV_ModEnd> i ++_frame_num_modes ; i <S2SV_ModStart> ; i < <S2SV_ModEnd> i ++_frame_num_modes ; i <S2SV_ModStart> ; i < <S2SV_ModEnd> i ++_frame_num_modes ; i <S2SV_ModStart> ; i < <S2SV_ModEnd> i ++_frame_num_modes ; i <S2SV_ModStart> ; i < <S2SV_ModEnd> i ++_frame_num_modes <S2SV_ModStart> i ++_frame_num_modes ; i ++_frame_num_modes <S2SV_ModStart> ; i < <S2SV_ModEnd> i ++_frame_num_modes ; i <S2SV_ModStart> ; i < <S2SV_ModEnd> i ++_frame_num_modes <S2SV_ModStart> i ++_frame_num_modes ; i ++_frame_num_modes <S2SV_ModStart> i ++_frame_num_modes ; i ++",0
276,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> ; vpx_svc_parameters_t * const <S2SV_ModStart> ; if ( ctx -> oxcf. rc_max_quantizer > 0 ) { vpx_codec_err_t * const cpi = & ctx -> oxcf ; const int i = 0 ; for ( i = 0 ; i < ctx -> oxcf. rc_max_quantizer ; i ++ ) { ctx -> oxcf. rc_max_quantizer = ctx -> oxcf. rc_max_quantizer ; ctx -> oxcf. rc_max_quantizer = ctx -> oxcf. rc_max_quantizer ; ctx -> oxcf. rc_max_quantizer = ctx -> oxcf. rc_max_quantizer ; } ctx -> cfg. rc_max_quantizer = ctx -> oxcf. rc_max_quantizer ; ctx -> cfg. rc_max_quantizer = ctx -> oxcf. rc_max_quantizer ; ctx -> cfg. rc_max_quantizer = ctx -> oxcf. rc_max_quantizer ;",0
277,"<S2SV_ModStart> out ) { int64 <S2SV_ModEnd> bitspersample, samplesperpixel <S2SV_ModStart> bitspersample, samplesperpixel, samplesperpixel <S2SV_ModStart> input_photometric ) ; if ( input_photometric!= ( uint64 ) - 1 ) { <S2SV_ModStart> ( in ) ; } else { uint64 <S2SV_ModEnd> tiffcp_set_parameter ( in <S2SV_ModStart> ( in ) ; } <S2SV_ModEnd> if ( input_photometric",0
278,"<S2SV_ModStart> a ) { char * pn ; char c ; int r ; struct stat st ; <S2SV_ModEnd> st ; pn <S2SV_ModStart> ; r = safe_lstat_nolock <S2SV_ModEnd> ( a -> <S2SV_ModStart> ) ) { if (! safe_strchr ( & ( a -> path_safe, '/' ), & st ) ) { break ; } else { <S2SV_ModStart> ARCHIVE_FAILED ) ; } <S2SV_ModStart> ) ) { if ( safe_strchr ( & ( a -> path_safe, '/' ), & st ) ) { <S2SV_ModStart> ARCHIVE_FAILED ) ; } else { break ; } } <S2SV_ModStart> -> mode ) &&! safe_strchr ( & ( a -> path_safe, '/' ), & st ) ) { if ( errno == ENOENT ) { break ; } else { break ; } } else if (! safe_strchr ( & ( a -> path_safe, '/' ), & st ) ) { break ; } else { break ; } } <S2SV_ModEnd> if (! <S2SV_ModStart> -> mode ) &&! safe_strchr ( & ( a -> path_safe, '/' ), & st ) ) { <S2SV_ModEnd> pn [ 0",0
279,"<S2SV_ModStart> unsigned int link_count ; struct buffer_head * ibh <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct kernel_lb_addr loc <S2SV_ModStart> extLocation ) ; ibh = udf_read_ptagged ( inode -> i_sb, & iinfo -> i_location, 1, & ident ) ; if ( ibh ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!bh\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } <S2SV_ModStart> extLength && ( ibh <S2SV_ModEnd> -> i_sb, <S2SV_ModStart> -> i_sb, <S2SV_ModEnd> ih -> i_ino <S2SV_ModStart> -> i_ino, <S2SV_ModEnd> ih -> i_ino <S2SV_ModStart> -> i_ino, <S2SV_ModEnd> ih -> i_ino <S2SV_ModStart> -> i_ino, <S2SV_ModEnd> ih -> i_ino <S2SV_ModStart> -> i_ino, <S2SV_ModEnd> ih -> i_ino <S2SV_ModStart> -> i_ino, <S2SV_ModEnd> ih -> i_ino <S2SV_ModStart> -> i_ino, <S2SV_ModEnd> ih -> i_ino <S2SV_ModStart> -> i_ino, <S2SV_ModEnd> ih -> i_ino <S2SV_ModStart> -> i_ino, <S2SV_ModEnd> ih -> i_ino <S2SV_ModStart> -> i_ino, <S2SV_ModEnd> ih -> i_ino <S2SV_ModStart> ->",0
280,"<S2SV_ModStart> tx_size ; const TX_SIZE tx_size_y <S2SV_ModEnd> = get_uv_tx_size ( <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm <S2SV_ModStart> ], filter_level <S2SV_ModEnd> ) ; index",0
281,<S2SV_ModStart> mq_ops ) { if ( q -> mq_ops ) <S2SV_ModStart> flags ) ; else flush_rq -> tag = - 1 ;,0
282,<S2SV_ModStart> uint8_t val ; if ( addr > ( vdev -> config_len - sizeof ( val ) ) ) return ( uint32_t ) - 1 ; <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,0
283,"<S2SV_ModStart> { option = sstr <S2SV_ModEnd> ( option,",0
284,"<S2SV_ModStart> == NULL || ( <S2SV_ModStart> sizeof ( effect_param_t ) || ( * replySize < ( int ) sizeof ( effect_param_t ) ) <S2SV_ModStart> == NULL || ( * replySize < ( int ) sizeof ( effect_param_t ) || ( * replySize < ( int ) sizeof ( effect_param_t ) ) || ( * replySize < ( int ) sizeof ( effect_param_t ) ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } effect -> state = EFFECT_STATE_ACTIVE ; if ( pCmdData == NULL || <S2SV_ModStart> == NULL || ( * replySize < ( int ) sizeof ( effect_param_t ) || ( * replySize < ( int ) sizeof ( effect_param_t ) ) || ( * replySize < ( int ) sizeof ( effect_param_t ) ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } effect -> state = EFFECT_STATE_ACTIVE ; if ( <S2SV_ModStart>",0
285,<S2SV_ModStart> = 0 ; if ( ret [ j ]. key_data_length [ j ] == 0 ) { err = ENODEV_ERROR ; goto cleanup ; },0
286,"<S2SV_ModStart> 0x02 ) ; if (! sbuf ) { <S2SV_ModStart> ""APDU <S2SV_blank> transmit <S2SV_blank> failed"" ) ; }",0
287,<S2SV_ModStart> I40E_AQ_VSI_VSI_TC_QUE_MAP_CONTIG ) ; if ( hw -> hw_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi_vsi,0
288,<S2SV_ModStart> ; } } g -> data [ g -> data_len ] = '\\0' ;,0
289,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
290,"<S2SV_ModStart> -> mb_buffer ; memcpy <S2SV_ModEnd> ( dst_buffer, <S2SV_ModStart> -> mb_buffer ; memcpy <S2SV_ModEnd> ( dst_buffer,",0
291,"<S2SV_ModStart> ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image_info -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
292,"<S2SV_ModStart> len ) { const char * const <S2SV_ModEnd> u ; char <S2SV_ModStart> char * end ; const char * const u = NULL ; const char * const <S2SV_ModEnd> end ; if <S2SV_ModStart> s ++ ; const char * const <S2SV_ModEnd> p = buf <S2SV_ModStart> ""u005c"" ) ; if ( len > SIZE_MAX / 6 ) { Py_DECREF ( u ) ; return NULL ; } <S2SV_ModStart> 10 ; } if ( len > SIZE_MAX / 6 ) { Py_DECREF ( u ) ; return NULL ; } <S2SV_ModStart> ( u ) ) ; return NULL ; } return PyUnicode_DecodeUnicodeEscape ( c, n, len, NULL, NULL",0
293,<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> enum { YES <S2SV_ModStart> ; int setimes = 0 <S2SV_ModStart> ; int setimes = 0 <S2SV_ModStart> scratchup ) { setimes = 0 ; setimes = 0 ; setimes = 0 ; setimes = 0 ; setimes = 0 ; setimes = 0 ; setimes = 0 ; setimes = 0 ; setimes = 0 ; setimes = 0 ; setimes = 0 ; setimes = 0 ; setimes = 0 ; setimes = 0 ; setimes = 0 <S2SV_ModEnd> ; mask =,0
294,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
295,"<S2SV_ModStart> -> mip = vpx_calloc ( width, <S2SV_ModEnd> sizeof ( MODE_INFO",0
296,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
297,<S2SV_ModStart> u2_frame_num ) ; <S2SV_ModEnd> } if ( <S2SV_ModStart> u2_frame_num ) ; <S2SV_ModEnd> } else { <S2SV_ModStart> u2_frame_num ) ; <S2SV_ModEnd> } } },0
298,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> vterm_allocator_free ( screen,1
299,<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart> delay ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> errno == EINTR ),0
300,"<S2SV_ModStart> one, offset = 0 <S2SV_ModStart>, pixel_info_length = 0 <S2SV_ModEnd> ; ssize_t count <S2SV_ModStart> ( number_planes_filled < 1 <S2SV_ModEnd> ) ThrowReaderException ( <S2SV_ModStart> ( number_planes_filled < 1 <S2SV_ModEnd> ) ThrowReaderException (",0
301,<S2SV_ModStart> value ) { char * str = <S2SV_ModEnd> stok ( sclone <S2SV_ModStart> NULL ) ) ; if ( str ) free ( str ) ; else free ( str ),0
302,"<S2SV_ModStart>. cmp = key_cmp ( type -> match, <S2SV_ModStart> type -> match )",0
303,"<S2SV_ModStart>! ntime ) <S2SV_ModEnd> goto out ; <S2SV_ModStart> ntime ) { <S2SV_ModEnd> cb1 = job_id <S2SV_ModStart> ; cb2 = json_array_string ( val, 1 ) ; if ( cb1 ) free ( cb2 ) ; if ( cb2 ) free ( cb2 ) ; if ( cb2 ) free ( cb2 ) ; if ( cb2 ) free ( cb2 ) ; if ( cb2 ) free ( cb2 ) ; if ( cb2 ) free ( cb2 ) ; if ( cb2 ) free ( cb2 ) ; if ( cb2 ) free ( cb2 ) ; if ( cb2 ) free ( cb2 ) ; if ( cb2 ) free ( cb2 ) ; if ( cb2 ) free ( cb2 ) ; if ( cb2 ) free ( cb2 ) ; if ( cb2 ) free ( cb2 ) ; if ( cb2 ) free ( cb2 ) ; if ( cb2 ) free ( cb2 ) ; if ( cb2 ) free ( cb2 ) ; <S2SV_ModEnd> free ( pool",0
304,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
305,"<S2SV_ModStart> * res ; if ( Py_TYPE_NONE == 1 ) { PyErr_SetString ( PyExc_AttributeError, ""Function <S2SV_blank> type <S2SV_blank> reduce <S2SV_blank> to <S2SV_blank> a <S2SV_blank> type <S2SV_blank> of <S2SV_blank> type <S2SV_blank> "" ""1"" ) ; return NULL ; } <S2SV_ModStart> __dict__ ) ; <S2SV_ModEnd> if ( dict <S2SV_ModStart> dict ) { Py_RETURN_NONE <S2SV_ModEnd> ; } return",0
306,"<S2SV_ModStart> ) & desc, sizeof ( * desc )",1
307,<S2SV_ModStart> -> private_data ; struct perf_event_context * ctx = event -> ctx ; <S2SV_ModStart> case PERF_EVENT_IOC_PERIOD : ctx -> perf_event_ctx = perf_event_ctx ; <S2SV_ModStart> case PERF_EVENT_IOC_SET_OUTPUT : ctx -> perf_event_ctx = perf_event_ctx ;,0
308,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> * r, vpx_reader <S2SV_ModEnd> y_mode ) { <S2SV_ModStart> y_mode ) { <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode",0
309,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ioffset < 0 <S2SV_ModStart> == 0 ) { if ( <S2SV_ModEnd> ioffset < 0 <S2SV_ModStart> ioffset < 0 || ioffset < 0 <S2SV_ModStart> ioffset < 0 || ioffset < 0 <S2SV_ModStart> ) ; } },0
310,"<S2SV_ModStart> iv ) ; if (! EVP_Cipher_is_valid ( self, self ) ) ossl_raise ( eCipherError, ""Invalid <S2SV_blank> key <S2SV_blank> parameter"" ) ;",0
311,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
312,<S2SV_ModStart> ; if ( <S2SV_ModEnd> iframe -> state <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( if,0
313,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> x86_pmu. event_name_id <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
314,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> t, const vpx_extra_bit <S2SV_ModEnd> * stop ) <S2SV_ModStart> t ] ; const vpx_extra_bit <S2SV_ModEnd> * const b <S2SV_ModStart> b = & vpx_extra_bits <S2SV_ModEnd> [ t ] <S2SV_ModStart> & 1 ; vpx_write_tree <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ; } vpx_write_bit <S2SV_ModEnd> ( w,",0
315,<S2SV_ModStart> ; struct vpx_write_bit_buffer * <S2SV_ModStart> ; struct vpx_write_bit_buffer * <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> += uncompressed_hdr_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb,0
316,<S2SV_ModStart> <S2SV_null> <S2SV_null> static __maybe_unused,0
317,"<S2SV_ModStart> _U_ ) { ND_TCHECK_OVERFLOW ( * ext, sizeof ( * ext ) ) ; <S2SV_ModStart> * typedata ; <S2SV_ModEnd> UNALIGNED_MEMCPY ( & <S2SV_ModStart> ( * ext <S2SV_ModEnd> ) ; id_len <S2SV_ModStart> ) ) ; if (! ND_TCHECK_OVERFLOW ( * ext, sizeof ( * ext ) ) ) goto trunc ; <S2SV_ModStart> ndo -> ndo_vflag <S2SV_ModEnd> ) ) goto",0
318,<S2SV_ModStart> cmpt -> height * sizeof ( jas_taginfo_t ),0
319,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
320,"<S2SV_ModStart> ; WORD32 xt0_0, xt0_0, xt1_0, xt1_0, xt1_0, xt1_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2",0
321,<S2SV_ModStart> mntent ) { struct mount_entry * root = <S2SV_ModEnd> mntent -> mnt_dir <S2SV_ModStart> mntent -> mnt_dir ; if ( root -> mount_mounts && root -> mount_mounts -> mount_mounts ) return root -> mount_mounts ; return root -> mount_mounts <S2SV_ModEnd> ; } <S2SV_null>,0
322,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
323,"<S2SV_ModStart> ( env, http_url_val, req_http_url_val_val ) ; rb_hash_aset ( env, http_url_val, http_url_val_val <S2SV_ModEnd> ) ; rb_hash_aset <S2SV_ModStart> ( env, http_url_val, req_http_url_val_val <S2SV_ModEnd> ) ; rb_hash_aset",0
324,"<S2SV_ModStart> endif int col_type = 0 <S2SV_ModStart>, prepare_retval ; if ( DBIc_TRACE_LEVEL ( imp_xxh ) >= 2 ) { <S2SV_ModStart> -> use_server_side_prepare ; } <S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( DBIc_TRACE_LEVEL <S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( DBIc_TRACE_LEVEL <S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( DBIc_TRACE_LEVEL <S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( DBIc_TRACE_LEVEL <S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( DBIc_TRACE_LEVEL <S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( DBIc_TRACE_LEVEL <S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( DBIc_TRACE_LEVEL <S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( DBIc_TRACE_LEVEL <S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( DBIc_TRACE_LEVEL <S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( DBIc_TRACE_LEVEL <S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( DBIc_TRACE_LEVEL <S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( DBIc_TRACE_LEVEL <S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( DBIc_TRACE_",0
325,"<S2SV_ModStart> need = 0, i <S2SV_ModStart> need *= 4 ; i = 0 <S2SV_ModStart> need *= 4 ; i ++ <S2SV_ModStart> need *= 4 ; i ++ <S2SV_ModStart> need *= 4 ; i ++ <S2SV_ModStart> need *= 4 ; i ++ <S2SV_ModStart> need *= 4 ; i ++ <S2SV_ModStart> need *= 4 ; i ++ <S2SV_ModStart> need *= 4 ; i ++ <S2SV_ModStart> need *= 4 ; i ++ <S2SV_ModStart> need *= 4 ; i ++ <S2SV_ModStart> need *= 4 ; i ++ <S2SV_ModStart> need *= 4 ; i ++ <S2SV_ModStart> need *= 4 ; i ++ <S2SV_ModStart> need *= 4 ; i ++ <S2SV_ModStart> need *= 4 ; i ++ <S2SV_ModStart> need *= 4 ; i ++ <S2SV_ModStart> need *= 4 ; i ++ <S2SV_ModStart> need *= 4 ; i ++ <S2SV_ModStart> need *= 4 ; i ++ <S2SV_ModStart> need *= 4 ; i ++ <S2SV_ModStart> need *= 4 ; i ++ <S2SV_ModStart> need *= 4 ; i ++ <S2SV_ModStart> need *= 4 ; i ++ <S2SV_ModStart> need *= 4 ; i ++ ; <S2SV_ModStart> need *= 4 ; i ++ ; <S2SV_ModStart> need *= 4 ; i ++ ;",0
326,"<S2SV_ModStart> char * str, size_t len ) { const JsVarFloat <S2SV_ModEnd> val = char <S2SV_ModStart> val ) ) strlcpy <S2SV_ModEnd> ( str, <S2SV_ModStart>, ""NaN"", len ) ; else if ( len > INT_MAX - len ) { * str = 0 ; return ; } <S2SV_ModEnd> else if ( <S2SV_ModStart> < 0 ) strlcpy <S2SV_ModEnd> ( str, <S2SV_ModStart>, ""-Infinity"", len ) ; else strlcpy <S2SV_ModEnd> ( str, <S2SV_ModStart>, ""Infinity"", len ) ; } else { if ( len < 0 ) { * str = 0 ; return ; } * ( str ++ ) = '.' ; val = - val ; } <S2SV_ModEnd> } else { <S2SV_ModStart> ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
327,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( fast_pool ->,0
328,"<S2SV_ModStart> LEX_ID ) { strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> len ) ; strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> LEX_STR ) { strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> len ) ; strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> len ) ; strncpy <S2SV_ModEnd> ( str,",0
329,,1
330,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
331,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
332,"<S2SV_ModStart> s2 ) { const char * s1 = <S2SV_ModEnd> s1, s2 <S2SV_ModStart> ( s1 ) ; const char * s2 = <S2SV_ModEnd> strlen ( s1 <S2SV_ModStart> ( s1 ) ; const char * s2 = <S2SV_ModEnd> strlen ( s1 <S2SV_ModStart> ( s1 ) ; return ( const char * ) s1 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
333,"<S2SV_ModStart> { parse_global_option ( CMD_PRINT_HELP <S2SV_ModEnd>, NULL, <S2SV_ModStart> { parse_global_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL, <S2SV_ModStart> ; parse_service_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL,",0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,"<S2SV_ModStart> RC_LOG_SERIOUS, ""unable <S2SV_blank> to <S2SV_blank> send <S2SV_blank> to <S2SV_blank> send <S2SV_blank> an <S2SV_blank> unstable <S2SV_blank> message"" ) ; md -> st_skeyid_e_nss = md -> st_skeyid_e_nss ; if ( md -> st_v1_new_iv == NULL ) { loglog ( RC_LOG_SERIOUS, ""unable <S2SV_blank> to <S2SV_blank> send <S2SV_blank> an <S2SV_blank> unstable <S2SV_blank> message""",0
336,<S2SV_ModStart> u4_size ) ; <S2SV_ModEnd> ps_op -> s_ivd_video_decode_op_t <S2SV_ModStart> u4_size ) ; <S2SV_ModEnd> ps_op -> s_ivd_video_decode_op_t,0
337,<S2SV_ModStart> <S2SV_null> <S2SV_null> static const <S2SV_ModStart> ) { return print_string_ptr <S2SV_ModEnd> ( item ->,0
338,"<S2SV_ModStart>. encode ( vpx_image_t * img, <S2SV_ModStart>. encode ( vpx_image_t * <S2SV_ModStart>. encode ( vpx_image_t * <S2SV_ModStart>. encode ( vpx_image_t *",0
339,<S2SV_ModStart> term. rows0 && term. cols0,0
340,<S2SV_ModStart> < cols + 17 <S2SV_ModEnd> ; i ++,0
341,"<S2SV_ModStart> -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> too <S2SV_blank> big <S2SV_blank> to <S2SV_blank> big <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> bigger <S2SV_blank>",0
342,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
343,<S2SV_ModStart> i1_slice_len ) ; ps_codec -> i1_slice_len = MAX_PPS_CNT_CNT - 1 ;,0
344,<S2SV_ModStart> ) ) { if ( count > SF_FALSE ) { psf -> f_log_error = SF_TRUE ; psf -> f_log_error = SF_TRUE ; },0
345,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( sun_info. length > ( ssize_t ) ( ssize_t ) ( ssize_t ) ( ssize_t ) ( ssize_t ) ( ssize_t ) ( <S2SV_ModEnd> ssize_t ) ( <S2SV_ModStart> ssize_t ) ( <S2SV_ModEnd> ssize_t ) ( <S2SV_ModStart> ssize_t ) ( <S2SV_ModEnd> ssize_t ) ( <S2SV_ModStart> ssize_t ) ( <S2SV_ModEnd> ssize_t ) ( <S2SV_ModStart> ssize_t ) ( <S2SV_ModEnd> ssize_t ) ( <S2SV_ModStart> ssize_t ) ( <S2SV_ModEnd> ssize_t ) ( <S2SV_ModStart> ssize_t ) ( <S2SV_ModEnd> ssize_t ) ( <S2SV_ModStart> ssize_t ) ( <S2SV_ModEnd> ssize_t ) ( <S2SV_ModStart> ssize_t ) ( <S2SV_ModEnd> ssize_t ) ( <S2SV_ModStart> ssize_t ) ( <S2SV_ModEnd> ssize_t ) ( <S2SV_ModStart> ssize_t ) ( <S2SV_ModEnd> ssize_t ) ( <S2SV_ModStart> ssize_t ) ( <S2SV_ModEnd> ssize_t ) ( <S2SV_ModStart> ssize_t ) ( <S2SV_ModEnd> ssize_t ) ( <S2SV_ModStart> ssize_t ) ( <S2SV_ModEnd> ssize_t ) ( <S2SV_ModEnd> ssize_t ) ( <S2SV_ModStart> ssize_",0
346,"<S2SV_ModStart> 0 ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 0600 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; return",1
347,<S2SV_ModStart> BLOCK_8X8 : return vpx_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> BLOCK_16X8 : return vpx_mse16x8 <S2SV_ModEnd> ; case BLOCK_8X16 <S2SV_ModStart> BLOCK_8X16 : return vpx_mse8x16 <S2SV_ModEnd> ; default : <S2SV_ModStart> default : return vpx_mse16x16 <S2SV_ModEnd> ; } },0
348,<S2SV_ModStart> retval ) { if ( retval == 0 ) { retval = krb5_keyblock_insert_pk_as_req_draft9_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del_del,0
349,"<S2SV_ModStart> flags ) ; if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", input -> buf_cur_space_left, frame_len ) ; return ; } <S2SV_ModStart> vb. vb2_buf ) ; vb -> vb. vb2_buf = NULL ; vb -> vb. vb2_buf = NULL ; vb -> vb. vb2_buf = NULL ; v4l2_buf = NULL ; v4l2_buf = NULL ; v4l2_buf = NULL ; if ( vb ) { dev_err_once ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } vb2_v4l2_buffer = NULL ; v4l2_buf =",0
350,<S2SV_ModStart> size ) { assert ( size <= MAX_SIZE ) ;,0
351,<S2SV_ModStart> -> serviceId == EXTRACT_32BITS <S2SV_ModEnd> ( & rxh,0
352,<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len > sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) ) return - 1 ;,0
353,<S2SV_ModStart> ) ; } if (! sbuf ) { kmem_free ( sbuf ) ; return error ; },0
354,"<S2SV_ModStart> struct l2cap_conf_rfc rfc <S2SV_ModEnd> ; void * <S2SV_ModStart> sk ) ; struct l2cap_conf_rfc * rfc ; <S2SV_ModStart> case L2CAP_MODE_ERTM : rfc = l2cap_get_conf_rfc ( sk, pi -> mode, & rfc ) ; if ( rfc ) { l2cap_add_conf_opt ( & rfc, L2CAP_DEFAULT_ERTM, rfc ) ; l2cap_add_conf_opt ( & rfc, L2CAP_DEFAULT_RX_WINDOW, rfc ) ; } else { rfc = l2cap_get_conf_rfc ( sk, pi -> mode, & rfc ) ; } <S2SV_ModEnd> l2cap_add_conf_opt ( &",0
355,"<S2SV_ModStart> do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_WAITALL ) )",0
356,<S2SV_ModStart> u1_nal_unit_type == 1 || ( ps_dec -> u1_pic_decode_done == 1 ),0
357,<S2SV_ModStart>!= 0 ) <S2SV_ModEnd> mprAddItem ( app <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
358,"<S2SV_ModStart> * delegation, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> -> type & fmode <S2SV_ModEnd> )!= open_flags <S2SV_ModStart> -> stateid, fmode <S2SV_ModEnd> ) ; ret <S2SV_ModStart> NULL ) { __update_open_stateid ( state, fmode <S2SV_ModEnd>, NULL, <S2SV_ModStart> NULL ) { __update_open_stateid ( state, fmode <S2SV_ModEnd>, NULL, <S2SV_ModStart> NULL ) { __update_open_stateid ( state, fmode <S2SV_ModEnd>, NULL,",0
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,"<S2SV_ModStart> int64_t * out_dist_sum, int * out_slice_idx, int * out_slice_idx, int * out_slice_idx, int * out_slice_idx, int * out_slice_idx, int * out_slice_idx <S2SV_ModStart> int sse ; int64_t rate_sum = 0 ; int64_t dist_sum = 0 ; <S2SV_ModStart> == 0 ) { <S2SV_ModStart> = sse ; rate_sum = ( pd -> dequant [ 1 ] >> 3 ) ; dist_sum = ( pd -> dequant [ 1 ] >> 3 ) ; rate_sum += rate ; dist_sum += dist ; } else { int64_t dist ; dist = ( pd -> dequant [ 1 ] >> 3 ) ; dist = ( pd -> dequant [ 1 ] >> 3 ) ; dist = ( pd -> dequant [ 1 ] >> 3 ) ; rate_sum += dist ; } } else { int rate ; dist = ( pd -> dequant [ 1 ] >> 3 ) ; dist = ( pd -> dequant [ 1 ] >> 3 ) ; dist = ( pd -> dequant [ 1 ]",0
361,<S2SV_ModStart> } if ( pmd_none_or_clear_huge_or_huge <S2SV_ModEnd> ( pmd ),0
362,<S2SV_ModStart> '\\0' ) { char * ptr_buf ; <S2SV_ModStart> == NULL ) { ptr_buf = <S2SV_ModEnd> strcpy ( * <S2SV_ModStart> username ) ; },0
363,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> ) { return vpx_read_tree <S2SV_ModEnd> ( r,",1
364,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",1
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,<S2SV_ModStart> depth ++ ; if ( buf2 == NULL ) return ( NULL ) ;,0
367,"<S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_RXQCR <S2SV_ModEnd> ) ; header <S2SV_ModStart> ( interface, KSZ8851_RXQCR <S2SV_ModEnd>, RXQCR_SDA ) <S2SV_ModStart> ( interface, KSZ8851_RXQCR <S2SV_ModEnd>, RXQCR_SDA ) <S2SV_ModStart> ( interface, KSZ8851_RXQCR <S2SV_ModEnd>, TXQCR_METFE ) <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK",0
368,<S2SV_ModStart> ( ) ; mono_gc_invoke_finalizers ( ) ;,0
369,"<S2SV_ModStart> x_7 ; WORD32 <S2SV_ModEnd> x_8, x_9 <S2SV_ModStart> x0 ++ ; <S2SV_ModEnd> n00 = x_0 <S2SV_ModStart> x0 ++ ; <S2SV_ModEnd> n00 = x_0 <S2SV_ModStart> x0 ++ ; <S2SV_ModEnd> n00 = x_0 <S2SV_ModStart> x0 ++ ; <S2SV_ModEnd> n00 = x_0 <S2SV_ModStart> x0 ++ ; <S2SV_ModEnd> n00 = x_0 <S2SV_ModStart> x0 ++ ; <S2SV_ModEnd> n00 = x_0 <S2SV_ModStart> x0 ++ ; <S2SV_ModEnd> n00 = x_0 <S2SV_ModStart> x0 ++ ; <S2SV_ModEnd> n00 = x_0 <S2SV_ModStart> x0 ++ ; <S2SV_ModEnd> n00 = x_0 <S2SV_ModStart> x0 ++ ; <S2SV_ModEnd> n00 = x_0 <S2SV_ModStart> x0 ++ ; <S2SV_ModEnd> n00 = x_0 <S2SV_ModStart> x0 ++ ; <S2SV_ModEnd> n00 = x_0 <S2SV_ModStart> x0 ++ ; <S2SV_ModEnd> n00 = x_0 <S2SV_ModStart> x0 ++ ; <S2SV_ModEnd> n00 = x_0 <S2SV_ModStart> x0 ++ ; <S2SV_ModEnd> n00 = x_0 <S2SV_ModStart> x0 ++ ; <S2SV_ModEnd> n00 = x_0 <S2SV_ModStart> x0 ++ ; <S2SV_ModEnd> n00 = x_0 <S2SV_ModStart> x0 ++ ; <S2SV_ModEnd> n00 = x_0 <S2SV_ModStart> x0 ++ ; <S2SV_ModEnd> n00 = x_0 <S2SV_ModStart> x0 ++ ; <S2SV_ModEnd> n00 = x",0
370,<S2SV_ModStart> ( unlikely ( pmd_trans_huge_or_clear_bad ( pmd ) ) ) { <S2SV_ModEnd> ret = unuse_pte_range,0
371,"<S2SV_ModStart>, frames ; unsigned <S2SV_ModStart> ""Incorrect <S2SV_blank> parameters:\\n"" ) ; if ( argc < 1 ) { fprintf ( stderr, ""ERROR: <S2SV_blank> usage <S2SV_blank> of <S2SV_blank> arguments <S2SV_blank> for <S2SV_blank> argc <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> < <S2SV_blank> 1 <S2SV_blank> <",0
372,"<S2SV_ModStart> num_fields ) { size_t <S2SV_ModEnd> i, result",0
373,<S2SV_ModStart> vpx_codec_alg_priv * priv = NULL <S2SV_ModStart> vpx_codec_alg_priv_t * priv = NULL <S2SV_ModStart> -> base ; priv = NULL ; <S2SV_ModStart> -> enc ) { priv = NULL ; <S2SV_ModStart> enc ) { priv <S2SV_ModEnd> -> cfg = <S2SV_ModStart> enc = & priv <S2SV_ModEnd> -> cfg ; <S2SV_ModStart> ++ ) ; priv <S2SV_ModEnd> -> pkt_list = <S2SV_ModStart> ++ ) ; priv <S2SV_ModEnd> -> cx_data_sz =,0
374,<S2SV_ModStart> } if ( c < 256 ) { if ( <S2SV_ModStart> return ret ; },0
375,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx ->,0
376,<S2SV_ModStart> if (! udf_sectors_valid ( inode -> i_sb ) <S2SV_ModEnd> ) goto out,0
377,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0",0
378,"<S2SV_ModStart> int bad_format_imginfo ( const <S2SV_ModStart> char * ptr, const char * * fmt ) { const char * ptr = fmt ; const char * ptr = fmt ; const char * ptr = fmt ; const char * ptr = fmt ; const char * ptr = fmt ; const char * ptr = fmt ; const char * ptr = fmt ; const char * ptr = fmt ; const char * ptr = ( const char * ) fmt ; const char * ptr = ( const char * ) fmt ; const char * const <S2SV_ModEnd> n = 0",0
379,"<S2SV_ModStart> ; UtRegisterTest ( ""DefragInvalidMemory"", DefragInvalidMemory ) ; UtRegisterTest (",0
380,<S2SV_ModStart> = object_length ; new_object. data = malloc ( <S2SV_ModEnd> object_length + add_v1_record,0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,<S2SV_ModStart> p_frame ) ; if ( p_enc -> b_top_field_first ) { <S2SV_ModStart> p_frame ) ; },0
384,"<S2SV_ModStart> ) ; } if (! <S2SV_ModStart>, filename ) ) { mp_err ( log, ""invalid <S2SV_blank> filename\\n"" ) ; return NULL ; } <S2SV_ModEnd> if (!",0
385,<S2SV_ModStart> 4 ) ; size_t <S2SV_ModEnd> num_properties = GETINT32 <S2SV_ModStart> len ) ; if ( len < 4 ) { return NULL ; } <S2SV_ModStart> len ) ; if ( len < 4 ) { return NULL ; } <S2SV_ModStart> len ) ; if ( len < 4 ) { return NULL ; },0
386,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
387,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; <S2SV_ModEnd> YV12_BUFFER_CONFIG * fb <S2SV_ModStart> * fb ; vpx_dec_reference_dec <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> cb ) ; <S2SV_ModEnd> return VPX_CODEC_OK ;",0
388,"<S2SV_ModStart> availer ) ; if ( length < 4 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> "" ""too <S2SV_blank> big <S2SV_blank> end <S2SV_blank> of <S2SV_blank> JPEG <S2SV_blank> image.\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
389,"<S2SV_ModStart> ; if ( CHILD ( n, 1 ) == 0 ) { ast_error ( c, CHILD ( n, 0 ), ""invalid <S2SV_blank> expression <S2SV_blank> type <S2SV_blank> type"" ) ; return NULL ; } if (",0
390,"<S2SV_ModStart> int vp8_denoiser_filter_c ( <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * mc_running_avg_y, unsigned char * running_avg_y_stride, unsigned char * running_avg_y_stride, unsigned char * running_avg_y_stride, unsigned char * running_avg_y_stride, unsigned char * running_avg_y_stride, unsigned char * running_avg_y_stride, unsigned char * running_avg_y_stride, unsigned char * running_avg_y_stride, unsigned char * running_avg_y_stride, unsigned char * running_avg_y_stride, unsigned char * running_avg_y_stride, unsigned char * running_avg_y_stride, unsigned char * running_avg_y_stride, unsigned char * running_avg_y_stride, unsigned char * running_avg_y_stride, unsigned char * running_avg_y_stride, unsigned char * running_avg_y_stride, unsigned char",0
391,<S2SV_ModStart> -> flags = NS_FALSE <S2SV_ModEnd> ; } result,0
392,<S2SV_ModStart> ret = 0 ; if ( ti -> xtregs_opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt.,0
393,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
394,<S2SV_ModStart> se_device * remote_dev ; struct se_device * remote_dev <S2SV_ModStart> == XCOL_SOURCE_RECV_OP ) remote_dev = & <S2SV_ModEnd> xop -> dst_dev <S2SV_ModStart> xop -> dst_dev ; else remote_dev = & remote_dev -> src_dev,0
395,"<S2SV_ModStart> int error ; struct buffer_head * b_bh = ext2_group_first_block_no ( sb, EXT2_I ( inode ) -> h_sb_cache ) ; <S2SV_ModStart> ext2_xattr_cache_insert ( new_bh ) ; b_bh = ext2_group_first_block_no ( sb, EXT2_I ( inode ) -> h_sb_cache ) ; int block = ext2_new_block ( inode, goal, & error ) ; if ( unlikely (! new_bh ) ) { ea_bdebug ( inode, ""creating <S2SV_blank> block <S2SV_blank> %d"", block <S2SV_ModStart> new_bh ) ; <S2SV_ModEnd> goto cleanup ;",0
396,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
397,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( ( <S2SV_ModStart>, length ) < 0 ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
398,"<S2SV_ModStart> 0, 0, 0",0
399,<S2SV_ModStart> ) AcquireQuantumMemory ( ( unsigned char * ),0
400,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vpx_ref_frame_t * ) ; ( void ) ctx <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; if (! frame ) { VPx_CODEC_ERR_T * const frame = ( VPx_CODEC_ERR_T * ) ctx -> pbi ; if ( frame -> frame_type == VPX_CODEC_MAY_TYPE_MAY_FRAME ) { VPxWorker * const frame = ( VPxWorker * const ) frame -> pbi ; if ( frame -> frame_type == VPX_CODEC_MAY_TYPE_MAY_FRAME ) { frame -> frame_type = VPX_CODEC_MAY_FRAME ; } else { frame -> frame_type = VPX_CODEC_MAY_FRAME ; } } else { <S2SV_ModStart> frame -> img <S2SV_ModEnd> ) ; return <S2SV_ModStart> ) ; } }",0
401,<S2SV_ModStart> u2_frame_num ) ; <S2SV_ModEnd> } if ( <S2SV_ModStart> u2_frame_num ) ; <S2SV_ModEnd> } else { <S2SV_ModStart> u2_frame_num ) ; <S2SV_ModEnd> } } },0
402,"<S2SV_ModStart>, u4_y_offset ; <S2SV_ModEnd> UWORD32 u4_y_dst_offset = <S2SV_ModStart> ) ; else { <S2SV_ModStart> ) ; } }",0
403,"<S2SV_ModStart> VP9_LAST_FLAG ) { const VP9EncoderConfig * const cfg = cm -> frame_bufs ; const YV12_BUFFER_CONFIG * const cfg = cm -> frame_bufs ; <S2SV_ModStart> const cfg = <S2SV_ModEnd> cm -> frame_bufs <S2SV_ModStart> cm -> frame_bufs ; if ( cm -> frame_bufs_id == VPX_CODEC_FRAME_ID_ID_ID_ID_ID_ID_ID_ID_ID_ID_ID_ID_ID_ID ) { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Invalid <S2SV_blank> reference <S2SV_blank> frame <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank> id <S2SV_blank>",0
404,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
405,<S2SV_ModStart> TX_SIZE tx_size = get_vpx_tx_size <S2SV_ModEnd> ( mbmi ) <S2SV_ModStart> 1 ) ; const TX_SIZE tx_size = get_uv_tx_size ( mbmi ) ; const TX_SIZE tx_size = get_vpx_tx_size ( mbmi ) ; const TX_SIZE tx_size = get_vpx_tx_size ( mbmi ) ; const TX_SIZE tx_size = tx_size ; const TX_SIZE tx_size = get_vpx_tx_size ( mbmi ) ; const TX_SIZE tx_size = tx_size ; const TX_SIZE tx_size = tx_size ; const TX_SIZE tx_size = tx_size ; const TX_SIZE tx_size = tx_size ; const TX_SIZE tx_size = tx_size ; const TX_SIZE tx_size = tx_size ; const TX_SIZE tx_size = tx_size ; const TX_SIZE tx_size = tx_size ; const TX_SIZE tx_size = tx_size ; const TX_SIZE tx_size = tx_size ; const TX_SIZE tx_size = get,0
406,"<S2SV_ModStart> ++ ) { memset ( dst, 0, sizeof ( uint32_t ) ) ; <S2SV_ModEnd> src += src_stride",0
407,<S2SV_ModStart> nrow ) { if ( ( <S2SV_ModStart> ( row + img -> row_offset ) > ( <S2SV_ModStart> img -> row_offset ) ) || ( row + img -> row_offset ) > ( ( <S2SV_ModEnd> img -> row_offset <S2SV_ModStart> img -> row_offset ) - ( <S2SV_ModEnd> img -> row_offset <S2SV_ModStart> img -> row_offset ) - ( <S2SV_ModEnd> img -> row_offset <S2SV_ModStart> img -> row_offset ) - ( <S2SV_ModEnd> img -> row_offset <S2SV_ModStart> img -> row_offset ) - ( <S2SV_ModEnd> img -> row_offset <S2SV_ModStart> img -> row_offset ) - ( <S2SV_ModEnd> img -> row_offset <S2SV_ModStart> img -> row_offset ) - ( <S2SV_ModEnd> img -> row_offset <S2SV_ModStart> img -> row_offset ) - ( <S2SV_ModEnd> img -> row_offset <S2SV_ModStart> img -> row_offset ) - ( <S2SV_ModEnd> img -> row_offset <S2SV_ModStart> img -> row_offset ) - ( <S2SV_ModEnd> img -> row_offset <S2SV_ModStart> img -> row_offset ) - ( <S2SV_ModEnd> img -> row_offset <S2SV_ModStart> img -> row_offset ) - ( <S2SV_ModEnd> img -> row_offset <S2SV_ModStart> img -> row_offset ) - ( <S2SV_ModEnd> img -> row_offset <S2SV_ModStart> img -> row_offset ) - ( <S2SV_ModEnd> img -> row_offset <S2SV_ModStart> img -> row_offset ) - ( <S2SV_ModEnd> img ->,0
408,<S2SV_ModStart> ; } } <S2SV_ModEnd> return 0 ;,0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
410,<S2SV_ModStart> number ) ; int r = <S2SV_ModEnd> num & ( <S2SV_ModStart> number - 1 ; if ( r < 0 ) return r ; if ( r < 0 ) return r ; if ( number > 0 ) return r ; if ( number > 0 ) return r <S2SV_ModEnd> ; else return,0
411,"<S2SV_ModStart>, 1, ( unsigned char ) <S2SV_ModStart>, file ) == ( unsigned char ) <S2SV_ModEnd> w ) return",0
412,"<S2SV_ModStart> ; uint16_t attr_len = 0 <S2SV_ModStart> ; if ( avp -> length < sizeof ( struct l2tp_avp_t ) + 2 ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %u):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", avp -> type, avp -> length ) ; return - 1 ; } attr_len = <S2SV_ModEnd> sizeof ( struct <S2SV_ModStart> struct l2tp_avp_t ) ; attr_len = <S2SV_ModEnd> sizeof ( struct <S2SV_ModStart> struct l2tp_avp_t ) ; if ( attr_len < sizeof ( struct l2tp_avp_t ) ) { memxor ( avp -> val, p1, attr_len ) ; return 0 ; } attr_len = <S2SV_ModEnd> sizeof ( struct <S2SV_ModStart> struct l2tp_avp_t ) ; if ( attr_len <= MD5_DIGEST_LENGTH ) { memcpy ( avp -> val, p1, attr_len ) ; return 0 ; } memcpy ( avp ->",0
413,<S2SV_ModStart> ; case EVP_CTRL_AEAD_SET_IV_FIXED : if ( arg > CHACHA_CTR_SIZE ) return 0 ; actx -> key. length = CHACHA_CTR_SIZE ; actx -> key. length = CHACHA_CTR_SIZE ; actx -> key. length = CHACHA_CTR_SIZE ; return 1,0
414,"<S2SV_ModStart> 0, 0, false",0
415,"<S2SV_ModStart> sock, sk ) ; memset ( & sa -> rc_family, sizeof ( struct sockaddr_rc )",0
416,<S2SV_ModStart> MT_CPTYPE_PASSSALT ) { if ( cpkt. length > MT_HEADER_LEN ) { <S2SV_ModStart> length ) ; },0
417,<S2SV_ModStart> ) { goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } else <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; return 0 ; bail : imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } <S2SV_null>,0
418,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
419,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> gps_remove_from_json ( gpsd_sock <S2SV_ModStart> gpsd_sock ) ; <S2SV_ModEnd> gps_remove_from_json ( gpsd_sock,0
420,"<S2SV_ModStart>, & rlen, 0",1
421,"<S2SV_ModStart> * slavename ; if ( strlen ( curconn -> password ) > sizeof ( md5data ) ) { syslog ( LOG_ERR, ""Invalid <S2SV_blank> password <S2SV_blank> by <S2SV_blank> %s."", curconn -> password ) ; abort_connection ( curconn, & pdata ) ; return ; } <S2SV_ModStart> } # endif strncpy ( md5data + 1, <S2SV_ModEnd> user -> password <S2SV_ModStart> user -> password <S2SV_ModEnd>, curconn -> <S2SV_ModStart> -> password ) <S2SV_ModEnd> ) ; md5_init <S2SV_ModStart> state ) ; strncpy ( md5data + 1, <S2SV_ModEnd> strlen ( user <S2SV_ModStart> -> password ) <S2SV_ModEnd> ) ; md5_finish",0
422,"<S2SV_ModStart> ; if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart> { if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name,",0
423,<S2SV_ModStart> off } ; if ( str [ i ] && str [ i ] ) { <S2SV_ModStart> i ] ; },0
424,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
425,<S2SV_ModStart> credssp ) ; transport -> settings = NULL ;,0
426,"<S2SV_ModStart> size_t s ; size_t len = 0 ; <S2SV_ModStart> ; if ( len < 4 ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if (",0
427,<S2SV_ModStart> bd_addr ) { if ( bd_addr == NULL ) return BT_STATUS_NOT_READY ;,0
428,"<S2SV_ModStart> i ; int avail, expect ; unsigned int <S2SV_ModEnd> pci = buf <S2SV_ModStart> 4 ) ; expect = buf -> len - buf -> cursor ; expect = 8 + 8 + 8 + nxip * 8 ; if ( expect > <S2SV_ModEnd> 8 + nxip <S2SV_ModStart> if ( nxip >= <S2SV_ModEnd> 0 || nxip <S2SV_ModStart> 0 || nxip >= <S2SV_ModEnd> 0 || nxip <S2SV_ModStart> 0 || nxip >= <S2SV_ModEnd> 0 || expect <S2SV_ModStart> 0 || nxip >= <S2SV_ModEnd> 0 || expect <S2SV_ModStart> 0 || expect > <S2SV_ModEnd> 0 ) goto",0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
430,<S2SV_ModStart> epoll_ ) ; if ( count > OE_SSIZE_MAX ) { ret = - EINVAL ; OE_RAISE_ERRNO ( OE_EINVAL ) ; return ret ; },0
431,"<S2SV_ModStart> = parse_global_option ( CMD_INITIALIZE <S2SV_ModEnd>, NULL,",0
432,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_EXTERNAL_MAX : * ( size_t * ) val = ms -> elf_external_max ; return 0 ;,0
433,<S2SV_ModStart> = EXT4_JOURNAL ( page_get_page ( page ) <S2SV_ModEnd> ) ; if,0
434,"<S2SV_ModStart> {trak = gf_isom_get_track_no_track <S2SV_ModEnd> ( movie -> <S2SV_ModStart>, TrackWriter ) ; if (!trak ) goto exit",0
435,"<S2SV_ModStart> 17 ] ; size_t <S2SV_ModEnd> plen ; md5_state_t <S2SV_ModStart> ; # endif md5data [ 1 ] = 0 ; <S2SV_ModStart> = 0 ; md5data [ 1 ] = 0 ; <S2SV_ModStart>, password, sizeof ( md5data ) <S2SV_ModEnd> ) ; md5data <S2SV_ModStart> state ) ; if ( strlen ( password ) > sizeof ( md5data ) ) { <S2SV_ModStart> ) md5data, sizeof ( md5data ) - sizeof ( md5data ) - sizeof ( md5data ) - sizeof ( md5data ) - sizeof ( md5data ) - sizeof ( md5data ) - sizeof ( md5data ) - sizeof ( md5data ) - sizeof ( md5data ) - sizeof ( md5data ) - sizeof ( md5data ) - sizeof ( md5data ) - sizeof ( md5data ) - sizeof ( md5data ) - sizeof ( md5data ) - sizeof ( md5data ) - sizeof ( md5data ) - sizeof ( md5data ) - sizeof ( md5data ) - sizeof ( md5data ) - sizeof ( md5data ) - sizeof ( md5data ) - sizeof ( md5data ) - sizeof ( md5data ) - sizeof",0
436,<S2SV_ModStart> ; if ( <S2SV_ModEnd> Prefix!= NULL,1
437,<S2SV_ModStart> ; if ( i + 1 < NCH ( n ) &&,0
438,<S2SV_ModStart> ( ) ; g_hash_table_remove_all ( headers ) ;,0
439,"<S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst,",0
440,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart> int mi_col ; SPEED_FEATURES * const sf = & cpi -> td ; SPEED_FEATURES * const sf = & cpi -> sf ; SPEED_FEATURES * const sf = & sf -> sf ; <S2SV_ModStart> int mi_col ; SPEED_FEATURES * const sf = & cpi -> sf ; SPEED_FEATURES * const sf = & sf -> sf ; SPEED_FEATURES * const sf = & sf -> sf ; <S2SV_ModStart> mi_col < mi_col_end && mi_col < mi_col <S2SV_ModStart> mi_col_end ; mi_col = mi_col + mi_col_start ; mi_col <S2SV_ModStart> mi_col < mi_col_end && mi_col < mi_col_end <S2SV_ModStart> mi_col_end ; mi_col += mi_col_end ; BLOCK_SIZE <S2SV_ModStart> mi_col < mi_col_end && mi_col < mi_col_end <S2SV_ModStart> mi_col_end ; mi_col += mi_col_end ; BLOCK_SIZE <S2SV_ModStart> ) { int <S2SV_ModEnd> num_",0
441,"<S2SV_ModStart>, obj_tlen ; u_int <S2SV_ModEnd> hexdump ; u_int <S2SV_ModStart> ( ndo, ""%s"", obj_tlen <S2SV_ModEnd> ) ) ;",0
442,"<S2SV_ModStart> mbmi, const MV <S2SV_ModEnd> * mvs [",0
443,"<S2SV_ModStart> ) ; } <S2SV_ModEnd> res = vpx_codec_enc_config_config <S2SV_ModStart> ) ) ; if (! writer ) die ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> video <S2SV_blank> interface <S2SV_blank> for <S2SV_blank> video <S2SV_blank> interface."" ) ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if (!",0
444,"<S2SV_ModStart> ; if ( skb_expand_head_safe <S2SV_ModEnd> ( skb_out,",0
445,<S2SV_ModStart> ) return ; <S2SV_ModEnd> DEBUGMSGTL ( ( <S2SV_ModStart> st ) ; <S2SV_ModEnd> } netsnmp_init_mib_internals (,0
446,"<S2SV_ModStart> ], O_RDWR | O_NOCTTY <S2SV_ModStart> ( fd, ( int ) <S2SV_ModStart> UI_SET_EVBIT, EV_KEY | EV_REL | EV_SYN | EV_REL | EV_SYN | EV_SYN | EV_SYN | EV_NOCTTY <S2SV_ModStart> ( fd, ( int ) <S2SV_ModStart> UI_SET_EVBIT, EV_SYN | EV_NOCTTY <S2SV_ModStart> ( fd, ( int ) <S2SV_ModStart> UI_SET_EVBIT, EV_SYN | EV_NOCTTY <S2SV_ModStart> ; if ( ( int ) <S2SV_ModStart> UI_DEV_CREATE, NULL )",0
447,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
448,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s,",0
449,"<S2SV_ModStart> krb5_error_code iakerb_alloc_context ( void * pctx, void * pctx <S2SV_ModEnd> ) { iakerb_ctx_id_t <S2SV_ModStart> { iakerb_ctx_id_t ctx <S2SV_ModEnd> ; ctx = <S2SV_ModStart> = krb5_gss_init_context ( pctx <S2SV_ModEnd> ) ; if",0
450,<S2SV_ModStart> = DirectClass ; image = ( Image * ) NULL ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> bitmapDC = CreateCompatibleDC,0
451,<S2SV_ModStart> )!= START_CODE_PREFIX && ps_stream -> u4_offset < ps_stream -> u4_max_offset,0
452,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { ret = <S2SV_ModEnd> - EINVAL ; <S2SV_ModStart> - EINVAL ; goto out ; }",1
453,<S2SV_ModStart> ) ; } if ( mono_class_inflated_method ( klass ) ) mono_class_inflated_method ( klass ) ;,0
454,<S2SV_ModStart> ) ] ; unsigned <S2SV_ModStart> ; if ( count > sizeof ( buf ) ) return - EINVAL ; if (,0
455,"<S2SV_ModStart> { char * name_base, * <S2SV_ModStart> size_t len ; name_base = l -> l_origin ; <S2SV_ModStart> size_t len ; name_base = l -> l_origin ; <S2SV_ModStart> size_t len ; name_base = l -> l_origin ; <S2SV_ModStart> == 'O' ) { if ( <S2SV_ModEnd> l -> l_origin <S2SV_ModStart> l -> l_origin ) { const char * const <S2SV_ModEnd> name += len <S2SV_ModStart> len ; } } else { const char * const <S2SV_ModEnd> name += len",0
456,"<S2SV_ModStart> ) ; } if ( H264SwDecGetDecSize ( & pDecCont -> str, sizeof ( decContainer_t ) ) > H264SWDEC_MAX_BUFFER ) { DEC_API_TRC ( ""H264SwDecInit# <S2SV_blank> ERROR: <S2SV_blank> maximum <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> of <S2SV_blank> decoder <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large"" ) ; return ( H264SWDEC_INVALID_BUFFER ) ; }",0
457,"<S2SV_ModStart> iph -> ihl >= 5 ) { memset ( IPCB ( skb ), 0, sizeof ( struct iphdr ) ) ; return 0 ; } if ( iph -> ihl <S2SV_ModStart> iph -> ihl >= 5 ) { memset ( IPCB ( skb ), 0, sizeof ( struct iphdr ) ) ; return 0 ; } if ( iph -> ihl <S2SV_ModStart> 0 ; } <S2SV_ModEnd> if ( ip_options_compile",0
458,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
459,<S2SV_ModStart> goto errout ; if ( info -> stagebooks ) _ogg_free ( info -> stagebooks ) ;,0
460,<S2SV_ModStart> krb5_key_data * key_data ; if ( n_key_data < 0 || n_key_data > MAX_KEY_DATA_LEN ) return NULL <S2SV_ModStart> == NULL ) { err = ENOMEM ; <S2SV_ModStart> goto cleanup ; },0
461,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
462,<S2SV_ModStart> ] ) ; if ( nByte > 0 ) { <S2SV_ModStart> 1 ) ; },0
463,<S2SV_ModStart> filp ) { struct sock * sk = <S2SV_ModEnd> SOCKET_I ( inode <S2SV_ModStart> ( inode ) ; sock_release ( sk,0
464,"<S2SV_ModStart> * orelse, string type_comment, <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. type_comment = type_comment",0
465,"<S2SV_ModStart> char * name, my_bool * is_key_valid <S2SV_ModStart> ) ) ; * is_key_valid = MYF ( 0 ) ;",0
466,"<S2SV_ModStart> ""Invalid <S2SV_blank> stream <S2SV_blank> data"" ; case NGHTTP2_ERR_INVALID_HOST_EXPLICIT_REPLICIT_REPLICIT : return ""Invalid <S2SV_blank> HOST_EXPLICIT_REPLICIT_REPLICIT"" ; case",0
467,"<S2SV_ModStart> UINT error ; if ( ( <S2SV_ModStart>, eventId ) ) < 0 ) { WLog_ERR ( TAG, ""rdpei_recv_pdu <S2SV_blank> failed <S2SV_blank> with <S2SV_blank> error <S2SV_blank> %"" PRIu32 ""!"", ( UINT32 ) <S2SV_ModEnd> pduLength ) ;",0
468,"<S2SV_ModStart> -> socket, ""%s"",",0
469,"<S2SV_ModStart> struct flowi6 fl6 ; int ret <S2SV_ModStart> daddr ) ; ret = <S2SV_ModEnd> ip6_xmit ( sk <S2SV_ModStart> np -> tclass, & fl6 ) ; if ( ret < 0 ) goto out ; fl6. flowi6_proto = sk -> sk_protocol ; fl6. flowi6_oif = sk -> sk_bound_dev_if ; if ( fl6. flowi6_oif ) { SCTP_INC_STATS ( sock_net ( sk ), SCTP_MIB_OUTSCTPPACKS ) ; if ( fl6. flowi6_oif ) { SCTP_INC_STATS ( sock_net ( sk ), SCTP_MIB_OUTSCTPPACKS ) ; } else { SCTP_INC_STATS ( sock_net ( sk ), SCTP_MIB_OUTSCTPPACKS ) ; } } out : return ret <S2SV_ModEnd> ; } <S2SV_null>",0
470,<S2SV_ModStart> ; MATLAB_KO : if ( clone_info!= ( PixelInfo * ) NULL ),0
471,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> UINT32 failureCode ; if (! nego -> sendNegoData ) { WLog_ERR ( TAG, ""RDP_NEG_FAILURE"" ) ; return FALSE ; }",0
472,<S2SV_ModStart> ; int len <S2SV_ModEnd> ; bn_t t <S2SV_ModStart> 8 ) ; len = 0 ; <S2SV_ModStart> ) ) { len = 0 ; <S2SV_ModStart> 0 ] ; len = 0 ; <S2SV_ModStart> 8 ) ; len = 0 ; <S2SV_ModStart> 8 ) ; len = 0 ; <S2SV_ModStart> 8 ) ; len = 0 ; <S2SV_ModStart> 8 ) ; len = 0 ; <S2SV_ModStart> ) * 8 ) ; len = 0 ; } else { len = 0 ; len = 0 ; } return len <S2SV_ModEnd> ; case RSA_SIG,0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,"<S2SV_ModStart> ( psf = psf_calloc ( <S2SV_ModEnd>, sizeof (",0
475,"<S2SV_ModStart> void fix_interp_filter ( VP9_COMMON_CONTROL * cm, <S2SV_ModStart> cm -> counts -> <S2SV_ModEnd> switchable_interp [ j",0
476,"<S2SV_ModStart> & cpi -> td. <S2SV_ModStart> -> mb ; const <S2SV_ModStart> = 0 ; vpx_setup_pre_planes ( x, cpi -> Source, 0, 0, NULL ) ; vpx_setup_block_planes ( xd, cm -> subsampling_x, cm -> subsampling_x, cm -> subsampling_y ) ; vpx_setup_block_planes ( xd, cm -> subsampling_x, cm -> subsampling_y ) ; vpx_memset ( xd -> above_context [ 0 ], 0, sizeof ( * x -> above_seg_context ) * aligned_mi_cols * MAX_MB_PLANE ) ; vpx_memset ( x <S2SV_ModEnd> -> above_context [ <S2SV_ModStart> MAX_MB_PLANE ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
477,"<S2SV_ModStart> ; retval = http_check_host_hdr <S2SV_ModEnd> ( hp ) <S2SV_ModStart>, SLT_Error, ""Invalid <S2SV_blank> Host <S2SV_blank> header"" <S2SV_ModEnd> ) ; return",0
478,"<S2SV_ModStart> EOFOp 0x07, image_info -> rows, image_info -> rows, image_info -> rows, image_info -> rows, image_info -> rows, image_info -> rows, image_info -> rows, image_info -> rows, image_info -> rows, image_info -> rows, image_info -> rows, image_info -> rows, image_info -> rows, image_info -> rows, image_info -> rows, image_info -> rows, image_info -> rows, image_info -> rows, image_info -> rows, image_info -> rows, image_info -> rows, image_info -> rows, image_info -> rows, image_info -> rows, image_info -> rows, image_info -> rows, image_info -> rows, image_info -> rows, image_info -> rows, image_info -> rows, image_info -> rows, image_info -> rows, image_info -> rows, image_info -> rows, image_info -> rows, image_info -> rows, image_info -> rows, image_info -> rows, image_info -> rows, image_info -> rows, image_info -> rows",0
479,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> len ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> sizeof ( tETH_HDR ),0
480,<S2SV_ModStart> -> u2_frame_num ; ps_dec -> u2_cur_slice_num = 0 ;,0
481,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> * karg ; <S2SV_ModEnd> struct pci_dev * <S2SV_ModStart> karg ) ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> karg -> hdr <S2SV_ModStart>. maxDataSize ; <S2SV_ModEnd> karg -> hdr",0
482,"<S2SV_ModStart> ) AcquireQuantumMemory ( MagickFalse <S2SV_ModEnd>, 3 *",0
483,<S2SV_ModStart> } else { if ( strlen ( * argv ) > 4 ) { <S2SV_ModStart> ) ; } },0
484,<S2SV_ModStart> ; if ( <S2SV_ModEnd> datao + 12 <S2SV_ModStart> ; if ( <S2SV_ModEnd> datao + 2 <S2SV_ModStart> ; if ( <S2SV_ModEnd> datao + 2 <S2SV_ModStart> ; if ( <S2SV_ModEnd> datao + 2 <S2SV_ModStart> ; if ( <S2SV_ModEnd> datao + 2 <S2SV_ModStart> ; if ( <S2SV_ModEnd> datao + 2 <S2SV_ModStart> ; if ( <S2SV_ModEnd> datao + 2 <S2SV_ModStart> ; if ( <S2SV_ModEnd> datao + 2 <S2SV_ModStart> ; if ( <S2SV_ModEnd> datao + 2 <S2SV_ModStart> ; if ( <S2SV_ModEnd> datao + 2 <S2SV_ModStart> ; if ( <S2SV_ModEnd> datao + 2 <S2SV_ModStart> ; if ( <S2SV_ModEnd> datao + 2 <S2SV_ModStart> ; if ( <S2SV_ModEnd> datao + 2 <S2SV_ModStart> ; if ( <S2SV_ModEnd> datao + 2 <S2SV_ModStart> ; if ( <S2SV_ModEnd> datao + 2 <S2SV_ModStart> ; if ( <S2SV_ModEnd> datao + 2 <S2SV_ModStart> ; if ( <S2SV_ModEnd> datao + 2 <S2SV_ModStart> ; if ( <S2SV_ModEnd> datao + 2 <S2SV_ModStart> ; if ( <S2SV_ModEnd> datao + 2 <S2SV_ModStart> ; if ( <S2SV_ModEnd> datao + 2 <S2SV_ModStart> ; if ( <S2SV_ModEnd> datao + 2 <S2SV_ModStart> ; if ( <S2SV_ModEnd> datao + 2 <S2SV_ModStart> ; if ( <S2SV_ModEnd> datao + 2 <S2SV_ModStart> ; if ( <S2SV_ModEnd> datao + 2 <S2SV_ModStart> ; if ( <S2SV_ModEnd> datao + 2 <S2SV_ModStart> ; if ( <S2SV_ModEnd> datao + 2 <S2SV_ModStart> ; if ( <S2SV_ModEnd> datao + 2 <S2SV_ModStart> ; if ( <S2SV_ModEnd> datao + 2 <S2SV_ModStart> ;,0
485,"<S2SV_ModStart> 1 ) ; if ( <S2SV_ModStart>, 1 ) < 0 ) { return ERROR_INT ( ""pixHtmlViewer"", procName, 1 ) ; } <S2SV_ModEnd> pix = (",0
486,"<S2SV_ModStart> void ) { struct sockaddr_storage * s_addr = & stunnel_locks [ LOCK_SECTIONS ] ; <S2SV_ModStart> 1 ) ; if (! s_addr -> s_family ) { SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; service_free ( & service_options ) ; return ; } <S2SV_ModStart>. next ; if (! s_addr -> s_family ) { SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; service_free ( & service_options ) ; return ; } <S2SV_ModStart> 0 ; } <S2SV_ModEnd> s_log ( LOG_DEBUG <S2SV_ModStart> servname ) ; <S2SV_ModEnd> } CRYPTO_THREAD_unlock (",0
487,<S2SV_ModStart> void ) { if ( recovery_delete_character ( ) ),0
488,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) )",0
489,<S2SV_ModStart> ) break ; if ( ( <S2SV_ModStart> image -> columns )!= MagickFalse ) || ( <S2SV_ModEnd> ( pixels + <S2SV_ModStart> image -> columns )!= MagickFalse ) || ( <S2SV_ModEnd> ( pixels + <S2SV_ModStart> image -> columns )!= MagickFalse ) || ( <S2SV_ModEnd> ( pixels + <S2SV_ModStart> image -> columns )!= MagickFalse ) || ( <S2SV_ModEnd> ( pixels + <S2SV_ModStart> image -> columns )!= MagickFalse ) || ( <S2SV_ModEnd> ( pixels + <S2SV_ModStart> image -> columns )!= MagickFalse ) || ( <S2SV_ModEnd> ( pixels + <S2SV_ModStart> image -> columns )!= MagickFalse ) || ( <S2SV_ModEnd> ( pixels + <S2SV_ModStart> image -> columns )!= MagickFalse ) || ( <S2SV_ModEnd> ( pixels + <S2SV_ModStart> image -> columns )!= MagickFalse ) || ( <S2SV_ModEnd> ( pixels + <S2SV_ModStart> image -> columns )!= MagickFalse ) || ( <S2SV_ModEnd> ( pixels + <S2SV_ModStart> image -> columns )!= MagickFalse ) || ( <S2SV_ModEnd> ( pixels + <S2SV_ModStart> image -> columns )!= MagickFalse ) || ( <S2SV_ModEnd> ( pixels + <S2SV_ModStart> image -> columns )!= MagickFalse ) || ( <S2SV_ModEnd> ( pixels + <S2SV_ModStart> image -> columns )!= MagickFalse ) || ( <S2SV_ModEnd> ( pixels + <S2SV_ModStart> image -> columns )!= MagickFalse ) || ( <S2SV_ModEnd> ( pixels + <S2SV_ModStart> image -> columns )!= Mag,0
490,"<S2SV_ModStart> { WORD32 i, j <S2SV_ModStart> ) ; } j = 0 ; <S2SV_ModStart> ) ; } j = 0 ; <S2SV_ModStart> ) ; } j < 2 ; j ++ ; <S2SV_ModStart> ) ; } j ++ ;",0
491,"<S2SV_ModStart>, int fmt, int * ret <S2SV_ModStart> child ) { * ret = 0 ; <S2SV_ModStart> child ) { * ret = 0 ; <S2SV_ModStart> child ) { * ret = 0 ; <S2SV_ModStart> child ) { * ret = 0 ; <S2SV_ModStart> child ) { * ret = 0 ; <S2SV_ModStart> child -> string, ret <S2SV_ModStart> child -> string, ret <S2SV_ModStart> child, depth, ret <S2SV_ModStart> = 1 ; * ret = 0 ; <S2SV_ModStart> = 1 ; * ret = 0 ; <S2SV_ModStart> = 1 ; * ret = 0 ; <S2SV_ModStart> ( fmt ) * ret = 1 ; <S2SV_ModStart> i < numentries && ret < 0 ) * ret = 1 ; * ptr ++ = '\\n' ; * ptr ++ = '\\n' ; * ptr ++ = '\\n' ; * ptr ++ = '\\n' ; * ptr ++ = '\\n' ; * ptr ++ = '\\n' ; * ptr ++ = '\\n' ; * ptr ++ = '\\n' ; * ptr ++ = '\\n' ; * ptr ++ = '\\n' ; * ptr ++ = '\\n' ; * ptr ++ = 0 ; for ( i = 0 ; i < depth ; ++ i ) { if ( fmt ) for ( j < depth ; ++ j",0
492,<S2SV_ModStart> sk ) ; other = unix_peer ( sk ) ; if ( other ) { <S2SV_ModStart> other ) { <S2SV_ModEnd> sock_poll_wait ( file <S2SV_ModStart> wait ) ; <S2SV_ModEnd> unix_recvq_full ( other <S2SV_ModStart> = 0 ; } <S2SV_ModStart> = 0 ; <S2SV_ModEnd> sock_put ( other,0
493,"<S2SV_ModStart> ( outpos, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"" <S2SV_ModEnd>, x,",0
494,<S2SV_ModStart> ( OM_uint32 ) KRB5_BAD_MSIZE <S2SV_ModEnd> ; return GSS_S_DEFECTIVE_TOKEN,0
495,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vp9_ref_frame_t * ) ; const VPxWorker * const frame_worker = ctx -> cpi <S2SV_ModStart> NULL ) { const YV12_BUFFER_CONFIG * const <S2SV_ModEnd> fb ; vpx_get_reference_enc <S2SV_ModStart> -> cpi, ( const VPxWorker * const ) frame_worker, ( const VPxWorker * const ) frame_worker, ( const VPxWorker * const ) frame_worker, ( const VPxWorker * const ) frame_worker, ( const VPxWorker * const ) frame_worker, ( const VPxWorker * const ) frame_worker, ( const VPxWorker * const ) frame_worker, ( const VPxWorker * const ) frame_worker, ( const VPxWorker * const ) frame_worker, ( const VPxWorker * const ) frame_worker, ( const VPxWorker * const ) frame_worker, ( const VPxWorker * const ) frame_worker, ( const VPxWorker * const ) frame_worker, ( const VPxWorker * const ) frame_worker, (",0
496,<S2SV_ModStart> plug ) ; kiocb_batch_free ( & batch ) ;,0
497,"<S2SV_ModStart>, int rep_quick, my_bool skip_key <S2SV_ModStart> ) ) { if ( skip_key ) { <S2SV_ModStart> ) ) ; }",0
498,"<S2SV_ModStart> s } ; <S2SV_ModEnd> uECC_word_t * p <S2SV_ModStart> curve ) ; if ( uECC_vli_isZero ( p, num_words ) ) { return 0 ; }",0
499,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|dao-truncated]"" <S2SV_ModEnd> ) ) ;",0
500,<S2SV_ModStart> ; } else if ( buf -> free_total < 0 ) { free ( buf ) ; return ; } else,0
501,"<S2SV_ModStart> tp ; { const char * eof = cp [ 1 ] ; <S2SV_ModStart> ] = ""00112233445566779999aAbBcCdDeEfFF"" ; const char * eof = cp [ 1 ] <S2SV_ModStart> cp == 'x' || cp [ 1 ] == eof ) { cval = ( cval * 8 ) + ( * cp - '0' ) ; } else if ( * cp == '\\\\' && cp [ 1 ] <S2SV_ModStart> cp ; } }",0
502,<S2SV_ModStart> char detect [ 4 <S2SV_ModEnd> ] ) {,0
503,"<S2SV_ModStart>, * pixd, * pixd <S2SV_ModStart> == NULL ) { <S2SV_ModStart> NULL ) ; pixc = pixc ; } <S2SV_ModStart> maxspan ) ; if ( pixc == NULL ) { <S2SV_ModStart> NULL ) ; }",0
504,"<S2SV_ModStart> = 256 ; memcpy ( v_fn_ptr, & v_fn_ptr, sizeof ( v_fn_ptr ) ) ;",0
505,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd>  overhead = <S2SV_ModStart> + 1 ; size_t <S2SV_ModEnd> size = overhead,0
506,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NEGO_STATE_FAIL ; if ( Stream_GetRemainingLength ( s ) < 7 ) { WLog_ERR ( TAG, ""Invalid <S2SV_blank> RDP_NEG_RSP"" ) ; nego -> state = NEGO_STATE_FAIL ; return ; } <S2SV_ModStart> = NEGO_STATE_FINAL ; if ( Stream_GetRemainingLength ( s ) < 7 ) { WLog_ERR ( TAG, ""Invalid <S2SV_blank> RDP_NEG_RSP"" ) ; return ; }",0
507,"<S2SV_ModStart> i, target_bits_per_mb, target_bits_per_mb <S2SV_ModStart> ; do { target_bits_per_mb = ( ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; <S2SV_ModStart>, i, target_bits_per_mb <S2SV_ModEnd> ) ; if",0
508,<S2SV_ModStart> ; value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1101WritePhyReg (,0
509,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
510,"<S2SV_ModStart> int dst_stride, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart> int i ; PREDICTION_MODE <S2SV_ModEnd> ( 16, <S2SV_ModStart> plane ] ; PREDICTION_MODE <S2SV_ModEnd> ( left_col, <S2SV_ModStart> + y ; PREDICTION_MODE <S2SV_ModEnd> ( left_col, <S2SV_ModStart>, left_col, 64 <S2SV_ModEnd> ) ; if",0
511,<S2SV_ModStart> ++ ; } if ( end < end ) end = end ;,0
512,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_block_dio_lock ) ;,0
513,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb, 0 <S2SV_ModEnd> ) ; vp9_wb_write_bit <S2SV_ModStart> KEY_FRAME ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> KEY_FRAME ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
514,"<S2SV_ModStart> 'O' } ; if (! <S2SV_ModStart>, '\\0' ) ||! <S2SV_ModEnd> ( strcmp ( <S2SV_ModStart>, '\\0' ) ||! <S2SV_ModEnd> ( strcmp ( <S2SV_ModStart>, '\\0' ) ||! <S2SV_ModEnd> ( strcmp (",0
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { q = osStrchr <S2SV_ModEnd> ( p +,1
516,<S2SV_ModStart> ; if ( i + 1 < NCH ( n ) &&,0
517,"<S2SV_ModStart> KEY_FRAME ) { memcpy <S2SV_ModEnd> ( pc -> <S2SV_ModStart>. mvc, vpx_default_mv_context, sizeof ( vpx_default_mv_context ) ) ; vpx_memcpy <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memcpy <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( xd ->",0
518,"<S2SV_ModStart> error_t error ; <S2SV_ModEnd> Enc624j600Context * context <S2SV_ModStart> Enc624j600Context * context ; uint32_t n <S2SV_ModStart> -> nicContext ; <S2SV_ModEnd> if ( enc624j600ReadReg <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ERXRDPT ) { enc624j600WriteReg ( interface, ENC624J600_ERXDATA, ( uint8_t * ) & n, sizeof ( uint32_t ) ) ; n = letoh16 ( n ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & n, sizeof ( uint32_t ) ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & status, sizeof ( uint32_t ) ) ; status = done ; } else { enc624j600ReadBuffer ( interface, ENC624J600_RX_BUFFER_START ) { enc624j600WriteReg ( interface, E",0
519,"<S2SV_ModStart> VALUE read_memory ( VALUE klass, VALUE content, VALUE * rb_size <S2SV_ModEnd> ) { xmlSchemaPtr <S2SV_ModStart> xmlSchemaPtr schema ; int rb_size = RSTRING_LEN ( content ) ; <S2SV_ModStart> = xmlSchemaNewMemParserCtxt ( rb_size <S2SV_ModEnd>, ( int <S2SV_ModStart> content ) ) <S2SV_ModEnd> ; VALUE errors <S2SV_ModStart> errors ) ; rb_iv_set ( rb_schema, ""@rgb"", errors ) ;",0
520,"<S2SV_ModStart> ( LOG_ERR, ""Option <S2SV_blank> options <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> is <S2SV_blank> too <S2SV_blank> short"" <S2SV_ModEnd> ) ; return",0
521,<S2SV_ModStart> 2 ] ; if ( bytes < chunk ) return ptr - buf ; <S2SV_ModStart> 2 ] ; if ( bytes < chunk ) return ptr - buf ;,0
522,<S2SV_ModStart> err = - EINVAL ; if ( po -> running ||! po -> running ) goto out ; err = - <S2SV_ModStart> fanout_mutex ) ; <S2SV_ModEnd> if ( po,0
523,<S2SV_ModStart> POLL_IN ) ; <S2SV_ModEnd> perf_event_wakeup ( handle,0
524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> u16 <S2SV_ModEnd> utf8s_to_utf16s ( const <S2SV_ModStart> len > 0, u16 * op, u16 * op, u16 * op, u16 * op ) { u16 * op ; u16 * op ; u16 * op ; u16 * op ; u16 * op ; u16 * op ; u16 * op ; u16 * op ; u16 * op ; u16 * op ; u16 * op ; u16 * op ; u16 * op ; u <S2SV_ModEnd> ; while ( <S2SV_ModStart> len > 0 && len < 0 ) { op = pwcs ; op = pwcs ; op = pwcs ; op = pwcs ; op = pwcs ; op = pwcs ; } if ( u == 0 ) { op = pwcs ; op = pwcs ; op = pwcs ; } else if ( u == 0 ) { op = pwcs ; op = pwcs ; op = pwcs ; op = pwcs ; } else { * op = pwcs ; op = pwcs ; op = pwcs ; } <S2SV_ModEnd> } return op",0
525,"<S2SV_ModStart> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" ) ; rc = pcmk_ok ; } if ( rc == pcmk_ok ) { cib -> cmds -> set_connection_dnotify ( cib, mon_cib_connection_destroy <S2SV_ModStart> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" ) ; } else { rc = pcmk_ok ; } } if ( rc == pcmk_ok ) { cib -> cmds -> set_connection_dnotify ( cib, mon_cib_connection_destroy <S2SV_ModStart> ) ; } <S2SV_ModEnd> } } if",0
526,"<S2SV_ModStart> -> nicContext ; if ( ( status & RXFHSR_RXFVSR )!= 0 ) { <S2SV_ModStart> ( interface, KSZ8851_RXFHSR ) ; if ( status & RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> status & ( RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> status & ( RXFHSR_RXMR | RXFHSR_RXFTL <S2SV_ModEnd> ) ) == <S2SV_ModStart> ( interface, KSZ8851_RXFDPR <S2SV_ModEnd> ) & RXFDPR_RXFC_RXCE <S2SV_ModStart> ( interface, KSZ8851_RXFDPR <S2SV_ModEnd> ) ; kz8851ReadFifo <S2SV_ModStart> ( interface, KSZ8851_RXQCR <S2SV_ModEnd>, TXQCR_SDA ) <S2SV_ModStart> } } } <S2SV_ModEnd> return ERROR_INVALID_PACKET ;",0
527,"<S2SV_ModStart> const node * func, const node * <S2SV_ModStart>, int is_async, const node * const c_feature_version < 5 ) { ast_error ( c, n, ""Async <S2SV_blank> functions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.5 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } <S2SV_ModEnd> expr_ty returns = <S2SV_ModStart>, LINENO ( func <S2SV_ModEnd> ), n",0
528,<S2SV_ModStart> int i ; flush_tlb_batched ( ) ; <S2SV_ModStart> ; out : <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
529,"<S2SV_ModStart> ; } } if ( message_left < 0 ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> remaining <S2SV_blank> packet <S2SV_blank> to <S2SV_blank> be <S2SV_blank> negative!"" ) ; return - 1 ; }",0
530,<S2SV_ModStart> test_name ) ; <S2SV_ModEnd> } } <S2SV_null>,0
531,<S2SV_ModStart> ; row < raw_width <S2SV_ModEnd> ; row ++ <S2SV_ModStart> ; row < raw_width <S2SV_ModEnd> ; row ++,0
532,<S2SV_ModStart> len ) ; param -> data_size = param -> data_start + needed ; <S2SV_ModStart> if ( len <= <S2SV_ModEnd> needed ) {,0
533,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( clone_info!= ( ExceptionInfo * ) NULL )",0
534,<S2SV_ModStart> ( bfqq ) bfq_idle_slice_timer_body <S2SV_ModEnd> ( bfqq ),0
535,<S2SV_ModStart> ; length += <S2SV_ModEnd> update_prepare_bounds ( context,0
536,"<S2SV_ModStart> old_upperdir, new_type, false",0
537,"<S2SV_ModStart> int plane ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
538,"<S2SV_ModStart> * cpi, TileData * tile_data, <S2SV_ModStart> ( cpi, tile_data <S2SV_ModEnd>, mi_row, <S2SV_ModStart> ( cpi, tile_data <S2SV_ModEnd>, mi_row, <S2SV_ModStart>, x, tile_data <S2SV_ModEnd>, mi_row,",0
539,<S2SV_ModStart> * err = mysofa_load <S2SV_ModEnd> ( & reader,0
540,<S2SV_ModStart> -> ranges = safe_calloc <S2SV_ModEnd> ( sizeof (,0
541,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> flags & VP8_EFLAG_NO_UPD_GF <S2SV_ModStart> flags & VP8_EFLAG_NO_UPD_ARF <S2SV_ModEnd> ) { int <S2SV_ModStart> | VP8_EFLAG_NO_UPD_ARF ) && <S2SV_ModEnd> flags & VP8_EFLAG_NO_REF_LAST <S2SV_ModStart> | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_LAST <S2SV_ModEnd> ) ) { <S2SV_ModStart> | VP8_EFLAG_NO_REF_LAST ; vpx_set_as_reference ( ctx -> cpi, ctx -> cpi -> cpi -> cpi -> cpi -> cpi -> cpi -> cpi -> cpi -> cpi -> cpi -> cpi -> cpi -> cpi -> cpi -> cpi -> cpi -> cpi -> cpi -> cpi -> cpi -> cpi -> cpi -> cpi -> cpi -> cpi -> cpi -> cpi -> cpi -> cpi -> cpi -> cpi -> cpi -> cpi -> cpi -> cpi -> cpi -> cpi -> cpi -> cpi -> cpi ->",0
542,<S2SV_ModStart> ) break ; if ( clone_info!= ( ExceptionInfo * ) NULL ),0
543,<S2SV_ModStart> (! head ||! head,0
544,"<S2SV_ModStart> * pptr, u_int <S2SV_ModEnd> len ) { <S2SV_ModStart> advance ; u_int tlen ; const u_int <S2SV_ModStart> len ) { if ( len < 2 ) goto trunc ; <S2SV_ModStart> len ) { if ( len < 2 ) goto trunc ; <S2SV_ModStart> len ) { if ( len < 2 ) goto trunc ; <S2SV_ModStart> len ) { if ( len < 2 ) goto trunc ; <S2SV_ModStart> len ) { if ( len < 2 ) goto trunc ; <S2SV_ModStart> len ) { if ( len < 2 ) goto trunc ; <S2SV_ModStart> len ) { if ( len < 2 ) goto trunc ; <S2SV_ModStart> len ) { if ( len < 2 ) goto trunc ; <S2SV_ModStart> len ) { if ( len < 2 ) goto trunc ; <S2SV_ModStart> len ) { if ( len < 2 ) goto trunc ; <S2SV_ModStart> len ) { if ( len < 2 ) goto trunc ; <S2SV_ModStart> len ) { if ( len < 2 ) goto trunc ; <S2SV_ModStart> len ) { if ( len < 2 ) goto trunc ; <S2SV_ModStart> len ) { if ( len < 2 ) goto trunc ; <S2SV_ModStart> len ) { if ( len < 2 ) goto trunc ; <S2SV_ModStart> len ) ; } <S2SV_ModStart> len ) { if ( len < 2 ) goto trunc ; <S2SV_ModStart> len ) ; } <S2SV_ModStart> len ) { if ( len < 2 )",0
545,"<S2SV_ModStart> outputbuffer, ""<tr><td>Monit <S2SV_blank> controlfile</td><td>%s</td>"", ( int ) <S2SV_ModEnd> ( GetLastError ( <S2SV_ModStart> ( res, ""Monit <S2SV_blank> controlfile</td>"" ) ) ; if ( res -> outputbuffer ) { res -> outputbuffer = res -> outputbuffer ; res -> outputbuffer = res -> outputbuffer ; } else { res -> outputbuffer = res -> outputbuffer ; } <S2SV_ModEnd> StringBuffer_append ( res",0
546,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
547,<S2SV_ModStart> ) ) { if ( tokenAmount > 20 ) { return false ; },0
548,"<S2SV_ModStart> iad_num ) ; if ( n < 0 || n < 0 ) { dev_err ( ddev, ""invalid <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d: <S2SV_blank> "" ""number <S2SV_blank> of <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d <S2SV_blank> in <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d\\n"", cfgidx, nalts ) ; return - EINVAL ; } <S2SV_ModStart> iad_num ) ; if ( n < 0 || n < 0 ) { dev_err ( ddev, ""invalid <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d: <S2SV_blank> "" ""number <S2SV_blank> of <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d <S2SV_blank> in <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d\\n"", cfgidx, nalts ) ; return - EINVAL ; }",0
549,"<S2SV_ModStart> 0, 0 <S2SV_ModEnd> ) ; if",0
550,<S2SV_ModStart> ; distortion = vpx_variance16x16 <S2SV_ModEnd> ( * (,1
551,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface",0
552,<S2SV_ModStart> ; maxlen = ( int ) <S2SV_ModStart> ; start = <S2SV_ModEnd> ( char * <S2SV_ModStart> char * ) <S2SV_ModEnd> ( psf -> <S2SV_ModStart> psf -> header <S2SV_ModEnd> ) + maxlen <S2SV_ModStart> ; maxlen = <S2SV_ModEnd> ( char * <S2SV_ModStart> char * ) <S2SV_ModEnd> ( psf -> <S2SV_ModStart> char * ) <S2SV_ModEnd> ( psf ->,0
553,<S2SV_ModStart> { if (! ctx -> priv ) { vpx_codec_destroy ( ctx -> priv ) ; ctx -> priv = NULL ; } if ( <S2SV_ModStart> -> destroy ( <S2SV_ModEnd> priv -> alg_priv,0
554,<S2SV_ModStart> { sf -> <S2SV_ModEnd> recode_loop = ( <S2SV_ModStart> { sf -> <S2SV_ModEnd> tx_size_search_method = vp9_frame_is_boosted <S2SV_ModStart> ; sf -> <S2SV_ModEnd> mode_skip_start = 10 <S2SV_ModStart> { sf -> <S2SV_ModEnd> mode_skip_start = 10 <S2SV_ModStart> { sf -> <S2SV_ModEnd> mode_skip_start = 10 <S2SV_ModStart> { sf -> <S2SV_ModEnd> mode_skip_start = 10 <S2SV_ModStart> { sf -> <S2SV_ModEnd> mode_skip_start = 10 <S2SV_ModStart> { sf -> <S2SV_ModEnd> mode_skip_start = 10,0
555,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> - 1 ) ),0
556,<S2SV_ModStart> inuse + ( ( <S2SV_ModStart> inuse / 8 ) + 1 <S2SV_ModStart> inuse / 8 ) + 1,0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,"<S2SV_ModStart>, * s ; char * ch, s_kind [ 3 ] ; char * ch, s_kind [ 3 ] ; char * ch, s_kind [ 3 ] ; char * ch, s_kind [ 3 ] ; char * ch, s_kind [ 3 ] ; char * ch, s_kind [ 3 ] ; char * ch, s_kind [ 3 ] ; char buf [ 128 ] ; char buf [ 128 ] ; if (! str ) { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } Py_DECREF ( value ) ; } # endif return NULL ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } return NULL ; } <S2SV_ModEnd> # endif return",0
559,"<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> break ; } <S2SV_ModEnd> if ( strcmp <S2SV_ModStart> ) break ; <S2SV_ModEnd> SvcInternal * const <S2SV_ModStart> ) break ; <S2SV_ModEnd> SvcInternal * const <S2SV_ModStart> ) break ; <S2SV_ModEnd> SvcInternal * const <S2SV_ModStart> ) break ; <S2SV_ModEnd> SvcInternal * const <S2SV_ModStart> -> quantizer_keyframe, <S2SV_ModEnd> si -> qb_data <S2SV_ModStart> -> quantizer_keyframe, <S2SV_ModEnd> si -> qb_data <S2SV_ModStart> -> quantizer_keyframe, <S2SV_ModEnd> si -> qb_data <S2SV_ModStart> si -> qb_data <S2SV_ModEnd>, si -> <S2SV_ModStart> -> qb_data ; <S2SV_ModEnd> return 0 ;",0
560,<S2SV_ModStart> ) ; } fclose ( mvs ) ;,0
561,<S2SV_ModStart> self ) { size_t <S2SV_ModEnd> i ; PyObject,1
562,,1
563,"<S2SV_ModStart> ) ) { if ( mysql_errno ( imp_dbh -> pmysql )!= mysql_error ( imp_dbh -> pmysql ) ) { PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""Error <S2SV_blank> in <S2SV_blank> mysql_error: <S2SV_blank> %s\\n"", imp_dbh -> pmysql ) ; imp_dbh -> pmysql = NULL ; }",0
564,<S2SV_ModStart> ) || ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> & size ) ) <S2SV_ModStart> ( need_close || TEMP_FAILURE_RETRY ( <S2SV_ModStart> & size ) ) <S2SV_ModStart> ||! size ),0
565,"<S2SV_ModStart> struct ieee_802_11_phdr phdr ; if (! dissect_ppi_length ( tvb, offset, data_len ) ) return",0
566,<S2SV_ModStart> ; sh = safe_calloc <S2SV_ModEnd> ( hdrlen +,0
567,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> BYTE a_val ; BOOL is_wide_wide_wide_wide_wide_wide = FALSE ; <S2SV_ModStart> ; y < is_wide_wide_wide_wide_wide_wide_wide <S2SV_ModEnd> ; y ++ <S2SV_ModStart> ; } } if ( is_wide_wide_wide_wide_wide_wide_wide_wide ) { is_wide_wide_wide_wide_wide_wide_wide_wide_wide_wide = FALSE ; },0
568,<S2SV_ModStart> ( - EINVAL ) ; kfree ( inverts,0
569,"<S2SV_ModStart> ) { const VP9EncoderConfig * const config = & cpi -> common ; const <S2SV_ModStart> & cpi -> oxcf. <S2SV_ModStart> 0 ) { const int initial_boost = 32 ; int kf_boost ; <S2SV_ModStart> 0 ) { const int kf_boost = MAX ( <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> cpi -> oxcf. starting_buffer_level, 16 ) ) ; if ( kf_boost < 16 ) kf_boost = MAX ( <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> cpi -> oxcf. starting_buffer_level, 16 ) ) ; else kf_boost = MAX ( <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> cpi -> oxcf. starting_buffer_level, 16 ) ) ; } else { const int kf_boost = MAX ( <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> cpi -> oxcf. starting_buffer_level, 16 ) ) ; if ( kf_boost < 16 ) kf_boost = MAX ( <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> cpi -> oxcf. starting_buffer_level, 16 ) ) ; } <S2SV_ModEnd> } else { <S2SV_ModStart> int ) ( <S2SV_ModEnd> rc -> frames_since_key <S2SV_ModStart> cpi -> output_framerate <S2SV_ModEnd> ) ; }",0
570,"<S2SV_ModStart> TX_MODE read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r )",1
571,"<S2SV_ModStart> : # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> } # line 101 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy",0
572,"<S2SV_ModStart> -> cpi ; MACROBLOCK * xd = args -> xd ; <S2SV_ModStart> & cpi -> td. <S2SV_ModStart> & cpi -> td. <S2SV_ModStart> & cpi -> td. <S2SV_ModStart> [ plane ] <S2SV_ModEnd> ; const int <S2SV_ModStart> UNCONSTRAINED_NODES ] = xd -> <S2SV_ModEnd> coef_probs [ tx_size <S2SV_ModStart> [ ref ] <S2SV_ModEnd> ; const uint8_t <S2SV_ModStart> tx_size ) ; vpx_prob <S2SV_ModEnd> ( band, <S2SV_ModStart> tx_size ) ; vpx_prob <S2SV_ModEnd> ( band, <S2SV_ModStart> tx_size ) ; vpx_prob <S2SV_ModEnd> ( band, <S2SV_ModStart> int seg_eob = get_tx_eob <S2SV_ModEnd> ( & cpi <S2SV_ModStart> tx_size ) ; vpx_prob <S2SV_ModEnd> ( band, <S2SV_ModStart> tx_size ) ; vpx_prob <S2SV_ModEnd> ( band, <S2SV_ModStart> tx_size ) ; vpx_prob <S2SV_ModEnd> ( band, <S2SV_ModStart> tx_size ) ; vpx_prob <S2SV_ModEnd> ( band, <S2SV_ModStart> tx_size ) ; vpx_prob <S2SV_ModEnd> ( band, <S2SV_ModStart> tx_size ) ; vpx_prob <S2SV_ModEnd> ( band, <S2SV_ModStart> tx_size ) ; vpx_prob <S2SV_ModEnd> ( band, <S2SV_ModStart>",0
573,<S2SV_ModStart>. pRename ; assert ( pSelect -> pSrc == 0 ) ; <S2SV_ModStart> pSelect -> pSrc ; assert ( pSelect -> pParse -> db -> mallocFailed ),0
574,"<S2SV_ModStart>, NFS4_CALLBACK_BUFSIZE, & cb_info -> serv_bufs [ minorversion ] <S2SV_ModEnd> ) ; if",0
575,"<S2SV_ModStart> void pointZZ_pMul ( PointZZ_p * rop, <S2SV_ModStart> scalar, const PointZZ_p * scalar ) { PointZZ_p R0, R1, tmp ; mpz_init_set ( R0. x, R0. y ) ; mpz_set ( tmp. y, R0. y ) ; mpz_set ( tmp. x, R0. y ) ; mpz_set ( tmp. y, R0. y ) ; mpz_set ( tmp. y, R0. y ) ; mpz_set ( tmp. x, R0. y ) ; mpz_set ( tmp. y, R0. y ) ; mpz_set ( tmp. y, R0. y ) ; mpz_set ( tmp. y, R0. y ) ; mpz_set ( tmp. x, R0. y ) ; mpz_set ( tmp. y, R0. y ) ; mpz_set ( tmp. y, R0. y ) ; mpz_set ( tmp. x, R0. y ) ; mpz_set ( tmp. y, R0.",0
576,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
577,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
578,"<S2SV_ModStart> do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> s, 0 )",1
579,<S2SV_ModStart> = NULL ; xml -> doc = xml -> doc ; <S2SV_ModStart> next ) { xml -> doc = xml -> doc ; <S2SV_ModStart> } else { xml -> doc = xml -> doc ;,0
580,<S2SV_ModStart> <S2SV_null> static const SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> return ( const SvcInternal_t <S2SV_ModEnd> * ) svc_ctx,1
581,<S2SV_ModStart> ) ) { zval * tmp ; * arg = * * args ; zval * * args ; zval * args ; zval * args ; zval * args ; zval * args ; zval * args ; zval * args ; zval * args ; zval * args ; zval * args ; zval * args ; zval * args ; zval * args ; zval * args ; zval * args ; zval * args ; zval * args ; zval * args ; zval * args ; zval * args ; zval * args ; zval * args ; zval * args ; zval * args ; zval * args ; zval * args ; zval * args ; zval * args ; zval * args ; zval * args ; zval * args ; zval * args ; zval * args ; zval * args ; zval * args = args ; zval * args = args ; zval * args = args ; zval * args = args ; zval * args = args ; zval * args = args ; zval * args = args ; zval * args = args ; zval * args = args ; zval_copy,0
582,<S2SV_ModStart> char buffer [ 80 <S2SV_ModEnd> ] ; int <S2SV_ModStart> -> vpx_fmt = VPX_IMG_FMT_I420 <S2SV_ModEnd> ; _y4m ->,0
583,"<S2SV_ModStart> buf ; { int len = strlen ( buf ) ; if ( len < 4 ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } <S2SV_ModStart> * otmp = readobjnam_safe <S2SV_ModEnd> ( buf,",0
584,"<S2SV_ModStart> long long directory_table_end = 0, table_start = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 0 ) { <S2SV_ModStart> return FALSE ; } <S2SV_ModStart> == 0 ) { <S2SV_ModStart> return FALSE ; } <S2SV_ModStart> == FALSE ) { <S2SV_ModStart> return FALSE ; } <S2SV_ModStart> == FALSE ) { <S2SV_ModStart> return FALSE ; } <S2SV_ModStart> == FALSE ) { <S2SV_ModStart> return FALSE ; }",0
585,"<S2SV_ModStart> rule * rule, u_int flags <S2SV_ModStart> count = 0 ; env -> flags &= ~ I_NOFOLLOW <S2SV_ModStart> ; } } env -> flags &= ~ I_NOFOLLOW ;",0
586,"<S2SV_ModStart> -> seg ; vpx_clear_system_state <S2SV_ModEnd> ( ) ; <S2SV_ModStart> int segment ; vpx_clear_system_state <S2SV_ModEnd> ( ) ; <S2SV_ModStart> -> base_qindex, cm -> mi_cols <S2SV_ModEnd> [ segment ] <S2SV_ModStart> ; } } vpx_clear_system_state ( ) ;",0
587,"<S2SV_ModStart>, Module_fields, 2 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Module_fields, 2 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Module_fields, 2 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 2 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 2 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 2 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 2 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 2 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 2 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 2 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 2 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 2 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 2 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, ClassDef_fields, 2 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 2 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 2 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 2 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 2 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 2 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 2 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 2 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_",0
588,"<S2SV_ModStart> ) ; } const char * fp = open ( log_path, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR | S_IWUSR | S_IROTH ) ; if ( fp!= NULL ) { <S2SV_ModStart> return ; } }",0
589,<S2SV_ModStart> ) ; } if ( x -> e_mbd. flags & YV_FLAG_HIGHBITDEPTH ) { const int b_mode_count = x -> block [ b_mode_count ] ; const int b_mode_count = x -> block [ b_mode_count ] ; const int b_mode_count = x -> block [ b_mode_count ] ; const int b_mode_count = x -> block [ b_mode_count ] ; const int b_mode_count = x -> block [ b_mode_count ] ; const int b_mode_count = x -> block [ b_mode_count ] ; const int b_mode_count = x -> block [ b_mode_count ] ; const int b_mode_count = x -> block [ b_mode_count ] ; const int b_mode_count = x -> uv_mode_count [ b_mode_count ] ; const int b_mode_count = b_mode_count [ b_mode_count ] ; const int b_mode_count = b_mode_count [ b_mode_count ] ; const int b_mode_count = b,0
590,"<S2SV_ModStart>, * StartClean, * t <S2SV_ModStart>, * StartClean <S2SV_ModEnd> ; s = <S2SV_ModStart> t ++ ; t = s ; while ( t [ 1 ] == '\\0' ) { if ( strcmp ( nameobject, ""AxodrawWantsPDF"" ) == 0 ) { if ( strcmp ( nameobject, ""AxodrawWantsPDF"" ) == 0 ) { strcpy ( nameobject, ""AxodrawWantsPDF"" ) ; t ++ ; } else { strcpy ( nameobject, ""AxodrawWantsPDF"" ) ; t ++ ; } } <S2SV_ModStart> t ++ ; t = s ; while ( * t == '0' && * t == '\\n' ) { if ( strcmp ( nameobject, ""AxodrawWantsPDF"" ) == 0 ) { if ( strcmp ( nameobject, ""AxodrawWantsPDF"" ) == 0 ) { strcpy ( nameobject, ""AxodrawWantsPDF"" ) ; t ++ ; } else { strcpy ( nameobject, ""AxodrawWantsPDF"" ) ; t ++ ; } } } else { if ( strcmp ( nameobject, ""AxodrawW",0
591,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lower, & tmp ) < 0 ) { return 0 ; } if ( tmp == NULL ) { lower = NULL ; } else { lower = NULL ; } if ( tmp == NULL ) { int res ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { int res ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( tmp == NULL ) { return 0 ; } if ( lookup_attr_id ( obj, & PyId_dims, & tmp ) < 0 ) { return 0 ; } if ( tmp == NULL ) { return 0 ; } if ( tmp == NULL ) { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { int res ; Py_CLEAR ( tmp ) ; } if ( tmp == NULL ) { return 0 ; } <S2SV_ModEnd>",0
592,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
593,<S2SV_ModStart> int err ; kfree ( alink ) ; <S2SV_ModStart> ) goto err_delete <S2SV_ModEnd> ; } } <S2SV_ModStart>! match ) { kfree ( alink ) ; <S2SV_ModStart> - ENOMEM ; } <S2SV_ModStart> kfree ( match ) ; kfree ( alink <S2SV_ModStart> kfree ( match ) ; kfree ( alink <S2SV_ModStart> kfree ( match ) ; kfree ( alink <S2SV_ModStart> kfree ( match ) ; kfree ( alink <S2SV_ModStart> kfree ( match ) ; kfree ( alink <S2SV_ModStart> kfree ( match ) ; kfree ( alink <S2SV_ModStart> kfree ( match ) ; kfree ( alink <S2SV_ModStart> kfree ( match ) ; kfree ( alink <S2SV_ModStart> kfree ( match ) ; kfree ( alink <S2SV_ModStart> kfree ( match ) ; kfree ( alink <S2SV_ModStart> kfree ( match ) ; kfree ( alink <S2SV_ModStart> kfree ( match ) ; kfree ( alink <S2SV_ModStart> kfree ( match ) ; kfree ( alink <S2SV_ModStart> kfree ( match ) ; kfree ( alink <S2SV_ModStart> kfree ( match ) ; kfree ( alink <S2SV_ModStart> kfree ( match ) ; kfree ( alink <S2SV_ModStart> kfree ( match ) ; kfree ( alink <S2SV_ModStart> kfree ( match ) ; kfree (,0
594,<S2SV_ModStart> ) ; } if ( pass ) { <S2SV_ModStart> ; if ( <S2SV_ModEnd> stream -> cx_time <S2SV_ModStart> stats ) ; },0
595,"<S2SV_ModStart> g_print ( ""Could <S2SV_blank> not <S2SV_blank> find <S2SV_blank> desktop <S2SV_blank> file <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> %s"", name, name <S2SV_ModStart>, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) { g_print ( ""Could <S2SV_blank> not <S2SV_blank> find <S2SV_blank> desktop <S2SV_blank> file <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> %s"", name, name <S2SV_ModEnd> ) ; goto <S2SV_ModStart> g_print ( ""Could <S2SV_blank> not <S2SV_blank> find <S2SV_blank> desktop <S2SV_blank> file <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> %s"", name, name <S2SV_ModEnd> ) ; goto",0
596,"<S2SV_ModStart> data_end ) { VP9EncoderConfig * const cm = & pbi -> common ; <S2SV_ModStart>, tile_col ; <S2SV_ModEnd> assert ( tile_rows <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> aligned_cols ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) * aligned_cols <S2SV_ModEnd> ) ; for <S2SV_ModStart> ; } } memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) * aligned_cols <S2SV_ModEnd> ) ; TileBuffer",0
597,<S2SV_ModStart> vp9_decoder_create ( const VP9D_CONFIG <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> vp9_decoder_create ( const VP9D_CONFIG <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> ) ) ; const int oxcf = oxcf ; <S2SV_ModStart> = 1 ; vpx_initialize_dec <S2SV_ModEnd> ( ) ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> pbi -> ready_for_new_data <S2SV_ModStart> = 1 ; <S2SV_ModEnd> vp9_init_dequantizer ( cm,0
598,"<S2SV_ModStart> dref ) { if ( ( ( GF_DataInformationBox * ) s ) -> dref == NULL ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; return e ; }",0
599,<S2SV_ModStart> req ) { <S2SV_ModEnd> struct inet_request_sock * <S2SV_ModStart> ; if (! opt ) return ; cipso_v4_delopt ( & req_inet -> opt ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
600,"<S2SV_ModStart> tree2tok ( struct vpx_token <S2SV_ModEnd> * tokens, <S2SV_ModStart> tokens, const vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> do { const vpx_tree_index <S2SV_ModEnd> j = tree",0
601,"<S2SV_ModStart> = VPX_CODEC_OK ; const VP8_EFLAG_EXT_FRAME_LAST = ( flags & VP8_EFLAG_EXT_FRAME_LAST )? VPX_CODEC_EXT_FRAME_LAST : VPX_CODEC_EXT_FRAME_LAST ; <S2SV_ModStart>, img ) ; if ( ctx -> cpi -> frame_flags & VPX_CODEC_FRAME_LAST ) { vpx_codec_ext_frame_flags_t flags = VPX_CODEC_FRAME_LAST ; flags = flags & VPX_CODEC_FRAME_LAST ; if ( flags & VPX_CODEC_FRAME_LAST ) flags &= ~ VPX_CODEC_FRAME_LAST ; } else if ( flags & VPX_CODEC_FRAME_LAST ) flags &= ~ VPX_CODEC_FRAME_LAST ; if ( flags & VPX_CODEC_FRAME_LAST ) flags &= ~ VPX_CODEC_FRAME_LAST ;",0
602,"<S2SV_ModStart>, & len, 0",1
603,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = _epi16_8col ; # if CONFIG_VP9_HIGHBITDEPTH if ( x [ 0 ]!= 0xFFFFFFFF ) { x [ 0 ] = _epi16_16x ( x [ 1 ], x [ 1 ] ) ; x [ 1 ] = _epi16_16x ( x [ 1 ] ) ; x [ 1 ] = _epi16_16x ( x [ 1 ], x [ 1 ] ) ; x [ 1 ] = _epi16_16x ( x [ 1 ], x [ 1 ] ) ; x [ 1 ] = _epi16_16x ( x [ 1 ] ) ; x [ 1 ] = _epi16_16x ( x [ 1 ], x [ 1 ] ) ; x [ 1 ] = _epi16_16x ( x [ 1 ], x [ 1 ] ) ; x [ 1 ] = _epi16_16x ( x [ 1 ], x [ 1 ] ) ; x [ 1 ] = _epi16_16",0
604,<S2SV_ModStart> int frame_max_bits ( <S2SV_ModEnd> VP9_CONFIG * oxcf <S2SV_ModStart> oxcf ) { const VP9EncoderConfig * const config = & oxcf -> common. config ; const VP9EncoderConfig * const config = & config -> common. config ; const VP9EncoderConfig * const config = & config -> config ; const VP9EncoderConfig * const config = & config -> config -> config ; const VP9EncoderConfig * const config = & config -> config -> config ; const VP9EncoderConfig * const config = & config -> config -> config -> config ; const VP9EncoderConfig * const config = config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config -> config,0
605,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
606,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart> * t, const <S2SV_ModStart> -> common ; const <S2SV_ModStart> -> mbmi ; const <S2SV_ModStart> -> skip_recode = <S2SV_ModEnd> cm -> mi_stride <S2SV_ModStart> cm -> mi_stride <S2SV_ModEnd> ; x -> <S2SV_ModStart> -> skip_optimize = <S2SV_ModEnd> cm -> mi_stride <S2SV_ModStart> cm -> mi_stride <S2SV_ModEnd> ; x -> <S2SV_ModStart> ) return ; vp9_update_zbin_extra <S2SV_ModEnd> ( cpi, <S2SV_ModStart> x ) ; vp9_update_zbin_extra <S2SV_ModEnd> ( cpi, <S2SV_ModStart> x ) ; vp9_update_zbin_extra <S2SV_ModEnd> ( cpi, <S2SV_ModStart> x ) ; vp9_update_zbin <S2SV_ModEnd> ( cpi, <S2SV_ModStart> x ) ; vp9_update_zbin <S2SV_ModEnd> ( cpi, <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
608,"<S2SV_ModStart> range_max ) { int <S2SV_ModEnd> value ; int <S2SV_ModStart> gbc ) ; int <S2SV_ModEnd> i, j <S2SV_ModStart> { if ( get_bits_left <S2SV_ModEnd> ( gbc ) <S2SV_ModStart> gbc ) ; if ( get_bits_left <S2SV_ModEnd> ( gbc ) <S2SV_ModStart> gbc ) ; if ( get_bits_left <S2SV_ModEnd> ( gbc ) <S2SV_ModStart> AVERROR_INVALIDDATA ; } <S2SV_ModEnd> value = get_bits_long <S2SV_ModStart> ; value += <S2SV_ModEnd> 1 ; }",0
609,"<S2SV_ModStart> else if ( ( <S2SV_ModStart> c ) || ( <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> c ) || ( <S2SV_ModStart> strchr ( ""!#$%&\'*+-.^_`|~"" ) <S2SV_ModStart> else if ( ( <S2SV_ModStart> strchr ( ""!#$%&\'*+-.^_`|~"" )",0
610,"<S2SV_ModStart>, packet -> http_content_line. ptr = NULL, packet ->",0
611,"<S2SV_ModStart>, y, ( <S2SV_ModStart> width - x ) <S2SV_ModStart>, y, ( <S2SV_ModStart> height - y )",0
612,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL ) <S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL )",1
613,"<S2SV_ModStart> action ) { sprintf ( output, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", w, w, h, h ) ;",0
614,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; sendClean ( outputbuffer ) ;",0
615,"<S2SV_ModStart> return FALSE ; if ( rdp -> autodetect -> bandwidthMeasureTimeDelta > 0 ) { <S2SV_ModStart> ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" ) ; }",0
616,<S2SV_ModStart> ) ; } # if CONFIG_VP8_HIGHBITDEPTH if ( cm -> above_context -> flags & VP8_FLAG_HIGHBITDEPTH ) { if ( cm -> above_context -> flags & VP8_FLAG_HIGHBITDEPTH ) { if ( cm -> above_context -> flags & VP8_FLAG_HIGHBITDEPTH ) { if ( cm -> above_context -> flags & VP8_FLAG_HIGHBITDEPTH ) { if ( cm -> above_context -> flags & VP8_FLAG_HIGHBITDEPTH ) { if ( ( cm -> above_context -> flags & VP8_FLAG_HIGHBITDEPTH ) && ( ( cm -> above_context -> flags & VP8_FLAG_HIGHBITDEPTH ) ) && ( ( cm -> above_context -> flags & VP8_FLAG_HIGHBITDEPTH ) ) ) { if ( ( cm -> above_context -> flags & VP8_FLAG_HIGHBITDEPTH ) && ( cm -> above_context -> flags & VP8_FLAG_HIGHBITDEPTH ) ) { if ( cm -> above_context -> flags & VP8_,0
617,<S2SV_ModStart> CONFIG_MULTITHREAD if ( pbi -> common. mb_rows > 0 &&,0
618,<S2SV_ModStart> 0 ) { size_t size = <S2SV_ModEnd> xHeapStructSize ; if <S2SV_ModStart> 0x00 ) { size_t allocSize = <S2SV_ModEnd> ( portBYTE_ALIGNMENT - <S2SV_ModStart> portBYTE_ALIGNMENT - ( allocSize <S2SV_ModEnd> & portBYTE_ALIGNMENT_MASK ) <S2SV_ModStart> portBYTE_ALIGNMENT_MASK ) ) ; if ( allocSize > 0 ) { xWantedSize = allocSize <S2SV_ModStart> ) ) ; } else { mtCOVERAGE_TEST_MARKER ( ) ; },0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,"<S2SV_ModStart> s ) { uint32 <S2SV_ModEnd> num_updates ; uint16 <S2SV_ModStart>, __func__ ) ; in_uint32_le ( s, num_updates ) ; in_uint32_le ( s, num_updates ) ; in_uint32_le ( s, num_updates ) ; in_uint32_le ( s, num_updates ) ; in_uint32_le ( s, num_updates ) ; in_uint32_le ( s, num_updates ) ; in_uint32_le ( s, num_updates ) ; in_uint32_le ( s, num_updates ) ; in_uint32_le ( s, num_updates ) ; in_uint32_le ( s, num_updates ) ; in_uint32_le ( s, num_updates ) ; in_uint32_le ( s, num_updates ) ; in_uint32_le ( s, num_updates ) ; in_uint32_le ( s, num_updates ) ; in_uint32_le ( s, num_updates ) ; in_uint32_le ( s",0
621,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
622,"<S2SV_ModStart> tx_size, vpx_coeff_stats <S2SV_ModEnd> coef_branch_ct ) { <S2SV_ModStart> tx_size ] ; vpx_coeff_probs_model * coef_probs = cpi -> frame_coef_probs [ tx_size ] ; int i, j, k, l, m ; for ( i = 0 ; i < PLANE_TYPES ; ++ i ) { for ( k = 0 ; k < PLANE_TYPES ; ++ k ) { for ( k = 0 ; k < PLANE_TYPES ; ++ k ) { for ( k = 0 ; k < PLANE_TYPES ; ++ k ) { for ( k = 0 ; k < PLANE_TYPES ; ++ k ) { for ( k = 0 ; k < PLANE_TYPES ; ++ k ) { for ( k = 0 ; k < PLANE_TYPES ; ++ k ) { for ( k = 0 ; k < PLANE_TYPES ; ++ k ) { for ( k = 0 ; k < PLANE_TYPES ; ++ k ) { for ( k = 0 ; k < PLANE_",0
623,"<S2SV_ModStart> name ) ; if ( utf8 ) { log_debug ( ""UTF-8 <S2SV_blank> kbdmode <S2SV_blank> %sd <S2SV_blank> on <S2SV_blank> %s"", name ) ; return - 1 ; }",0
624,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static void <S2SV_ModEnd> su3000_frontend_attach ( struct <S2SV_ModStart> d ) { <S2SV_ModEnd> u8 obuf [ <S2SV_ModStart> 0 } ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; <S2SV_ModEnd> } <S2SV_null>",0
625,"<S2SV_ModStart> vpx_codec_enc_cfg_t * cfg, vpx_codec_enc_t * enc_cfg <S2SV_ModStart> else if ( enc_cfg && <S2SV_ModStart> -> caps & VPX_CODEC_CAP_XMA <S2SV_ModEnd> ) ) res <S2SV_ModStart> else if ( enc_cfg && <S2SV_ModStart> -> caps & VPX_CODEC_CAP_PSNR <S2SV_ModEnd> ) { ctx",0
626,"<S2SV_ModStart> int stride, <S2SV_ModEnd> int mv_row, <S2SV_ModStart> const kernel = vpx_get_interp_kernel <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ] -> mbmi -> interp_filter ) ; vpx_build_inter_predictor ( y_mb_ptr, stride, & pred [ 0 ], 16, & mv, scale, 16, 16, 16, which_mv, kernel, mv, kernel, mv_precision_uv, x, y ) ; vpx_build_inter_predictor ( u_mb_ptr, stride, & pred [ 0 ], 16, & mv, scale, 16, 16, 16, which_mv, kernel, mv, kernel, mv_precision_uv, x, y ) ; vpx_build_inter_predictor ( u_mb_ptr, stride, & pred [ 0 ], 16, & mv, scale, 16, 16, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vpx_build_inter_predictor ( u_mb_ptr, uv_stride, & pred",0
627,"<S2SV_ModStart> = TRUE ; if ( strchr ( buf, ':' ) ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; }",0
628,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 0 ; a < <S2SV_ModEnd> count ; ++ <S2SV_ModStart> i ) { if ( <S2SV_ModEnd> i < count <S2SV_ModStart> i < count ) { fprintf ( stderr, ""Error: <S2SV_blank> cJSON_CreateFloat() <S2SV_blank> failed\\n"" ) ; return NULL ; } <S2SV_ModStart> i ] ) ; if (! n ) { fprintf ( stderr, ""Error: <S2SV_blank> cJSON_CreateFloat() <S2SV_blank> failed\\n"" ) ; return NULL ; } <S2SV_ModEnd> else suffix_object (",0
629,"<S2SV_ModStart> data_end ) { VP9EncoderData * const cm = & pbi -> common ; <S2SV_ModStart> data_end ) { VP9EncoderData * const <S2SV_ModEnd> cm = & <S2SV_ModStart> & pbi -> td_data ; const VP9EncoderData * const worker = & pbi -> td_data ; const VP9EncoderData * const worker = & pbi -> td_data ; const <S2SV_ModStart> int num_workers = MIN ( num_workers, tile_cols ) ; const int num_workers = MIN ( num_workers, tile_cols ) ; const int num_workers = MIN ( num_workers, tile_cols ) ; const int num_workers = MIN ( num_workers, tile_cols ) ; const int num_workers = MIN ( num_workers <S2SV_ModEnd> * sizeof ( <S2SV_ModStart> -> tile_workers, num_workers <S2SV_ModEnd> ) ; for <S2SV_ModStart> i ) { const <S2SV_ModStart> -> num_tile_workers ; const <S2SV_ModStart> ) ) ; const <S2SV_ModStart> ) ) ; const <S2SV_ModStart> i ] ; const <S2SV_ModStart> i ] ; const <S2SV_ModStart> i ] ; const <S2SV_ModStart> i ] ; const <S2SV_ModStart> i ] ; const <S2SV_ModStart> ) ) ; const <S2SV_ModStart> i ] ; const <S2SV_ModStart> ) ) ; const <S2SV_ModStart> ) ) ; const <S2SV_ModStart>",0
630,<S2SV_ModStart> * 0x101 ; if ( len < 4 ) return ; <S2SV_ModStart> ( ) ; if ( len < 4 ) return ; <S2SV_ModStart> case 0x505244 : if ( len < 4 ) return ; <S2SV_ModStart> case 0x5249 : if ( len < 4 ) return ;,0
631,"<S2SV_ModStart> -> common ; const VP9EncoderConfig * cfg = & cpi -> cfg ; <S2SV_ModStart> cm -> seg ; const int seg_idx = cm -> seg_idx <S2SV_ModStart> = SEGMENT_DELTADATA ; seg -> seg_idx = seg -> seg_idx ; <S2SV_ModStart> ++ ) { <S2SV_ModEnd> if ( Q_RATIO <S2SV_ModStart>, segment_rdmult ; seg -> seg_idx = seg -> seg_idx ; <S2SV_ModStart> = vp9_compute_qdelta ( cfg <S2SV_ModEnd>, base_q, <S2SV_ModStart>, base_q * seg -> seg_idx <S2SV_ModEnd> ) ; vpx_set_segfeature <S2SV_ModStart> ( seg, seg -> seg_idx <S2SV_ModEnd>, SEG_LVL_ALT_Q ) <S2SV_ModStart> ( seg, seg -> seg_idx <S2SV_ModEnd>, SEG_LVL_ALT_Q ) <S2SV_ModStart> ( seg, seg -> seg_idx <S2SV_ModEnd>, SEG_LVL_ALT_Q ) <S2SV_ModStart> ( seg, seg -> seg_idx <S2SV_ModEnd>, SEG_LVL_ALT_Q",0
632,<S2SV_ModStart> -> error_code ) { <S2SV_ModStart> detail : NULL ; },0
633,<S2SV_ModStart> pocstruct_t * ps_cur_slice <S2SV_ModEnd> ; ih264d_free_dynamic_bufs ( <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
634,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet ),0
635,"<S2SV_ModStart> int getnum ( <S2SV_ModEnd> char * * <S2SV_ModStart> * fmt, char * fmt ) { if (! fmt ) return df ; <S2SV_ModEnd> if (! <S2SV_ModStart> = 0 ; <S2SV_ModEnd> a = a <S2SV_ModStart> '0' ; } <S2SV_ModEnd> return a ;",0
636,<S2SV_ModStart> GCSpropagate ) ; g -> gcstate = GCSpropagate ;,0
637,<S2SV_ModStart> 0 ; else { kfree ( buf ) ; <S2SV_ModStart> - EIO ; },0
638,"<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart>!= PROTOCOL_EARLY ) { log_err ( ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; return NULL ; } <S2SV_ModEnd> memset ( buffer <S2SV_ModStart> buffer ) ; <S2SV_ModEnd> s_write ( c",0
639,"<S2SV_ModStart> cib, struct remote_connection_s <S2SV_ModEnd> * connection ) <S2SV_ModStart> struct sockaddr_in addr <S2SV_ModEnd> ; int ret_ga <S2SV_ModStart> = 0 ; <S2SV_ModEnd> static struct mainloop_fd_callbacks <S2SV_ModStart> = NULL ; <S2SV_ModEnd> bzero ( & <S2SV_ModStart> ) ) ; <S2SV_ModEnd> crm_debug ( ""Looking <S2SV_blank> up <S2SV_blank> %s"" <S2SV_ModStart> ) ) ; <S2SV_ModEnd> crm_debug ( ""Got <S2SV_blank> address <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> %s"" <S2SV_ModStart> private -> server, private -> server ) ; close ( sock <S2SV_ModStart> server ) ; <S2SV_ModEnd> return - 1",0
640,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> ; cpi -> <S2SV_ModEnd> frames_till_gf_update_due = 0",0
641,"<S2SV_ModStart> ( ndo, ""%s"", icp -> icmp6_tstr <S2SV_ModEnd> ) ) ;",0
642,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command",0
643,<S2SV_ModStart> Image * image <S2SV_ModEnd> ; assert ( <S2SV_ModStart> MagickFalse ) { image -> columns = 0 ; <S2SV_ModStart> ) break ; image -> columns = 0 ; <S2SV_ModStart> image ) ; if ( image -> columns!= 0 ) { <S2SV_ModStart> image ) ; },0
644,"<S2SV_ModStart> jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC <S2SV_blank> marker\\n"" ) ; jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC <S2SV_blank> marker\\n""",0
645,<S2SV_ModStart> = strlen ( str_temp <S2SV_ModEnd> ) ; str_temp,0
646,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> - m + vpx_read_bit <S2SV_ModEnd> ( r )",0
647,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
648,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> ( REFERENCE_MODE ) vpx_read <S2SV_ModEnd> ( r,",0
649,"<S2SV_ModStart>! stream ) { <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; } <S2SV_ModStart> = vpx_codec_enc_config_default ( <S2SV_ModEnd> ), & <S2SV_ModStart> = 0 ; stream -> config. cfg. g_type = VPX_TYPE_G_TYPE ; stream -> config. cfg. g_type = VPX_TYPE_G_TYPE ; <S2SV_ModStart> write_webm = 1 ; stream -> config. cfg. g_type = VPX_TYPE_G_TYPE ; stream -> config. cfg. g_type = VPX_TYPE_G_TYPE ; stream -> config. cfg. g_type = VPX_TYPE_G_TYPE ; stream -> config. cfg. g_type = VPX_TYPE_G_TYPE ; stream -> config. cfg. g_type = VPX_TYPE_G_TYPE ; stream -> config. cfg. g_type = VPX_TYPE_G_TYPE ; stream -> config. cfg. g_type = VPX_TYPE_G_TYPE ; stream -> config. cfg. g_type = VPX_TYPE_G_TYPE ; stream ->",0
650,<S2SV_ModStart> nd_opt_len ) ; ND_TCHECK_ADDR_LEN ( op ) ;,0
651,<S2SV_ModStart> re_ast ) -> type_comment = 0 ; ( * re_ast ) ->,0
652,"<S2SV_ModStart> ; ret = db_dict_expand_key_values ( iter -> conn, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret < 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> values: <S2SV_blank> %s"", key -> key -> key -> key, error ) ; return - 1 ; } ret = <S2SV_ModStart> 0 ) { <S2SV_ModEnd> ret = dict_lookup",0
653,<S2SV_ModStart> ; tok -> type = TYPE_TYPE ; tok -> <S2SV_ModStart> tok -> altwarning = 1 ; tok -> altwarning <S2SV_ModStart> = 0 ; # ifdef HAVE_DECL if ( tok -> type == TYPE_DECL ) { tok -> type = TYPE_DECL ; tok -> type = TYPE_DECL ; } else { tok -> type = TYPE_DECL ; tok -> type = TYPE_DECL ; } # endif,0
654,"<S2SV_ModStart> av1_config ) { if ( av1 -> emul_esd -> decoderSpecificInfo -> dataLength > GF_MAX_ESD_DATA_SIZE ) {
655,<S2SV_ModStart> ( dpbSize ) ; if ( picSizeInMbs > MAX_NUM_REF_IDX_L0_ACTIVE ) return ( MEMORY_ALLOCATION_ERROR ),0
656,"<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_in = 0 ; <S2SV_ModStart> (! sock ||! addr ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen ) addrlen_in = * addrlen ; if ( addrlen ) <S2SV_ModEnd> addrlen_in = * <S2SV_ModStart> ; if ( <S2SV_ModEnd> oe_syscall_getpeername_ocall ( & <S2SV_ModStart>, addrlen_in, & addrlen_in <S2SV_ModEnd> )!= OE_OK <S2SV_ModStart> ) ; } if ( addrlen ) * addrlen = * addrlen ;",0
657,,1
658,"<S2SV_ModStart> FALSE ; } if ( Stream_GetRemainingLength ( s ) > 4 ) { WLog_ERR ( TAG, ""Invalid <S2SV_blank> RDP <S2SV_blank> length <S2SV_blank> for <S2SV_blank> routing <S2SV_blank> token <S2SV_blank> %d"", s ) ; return FALSE ; }",0
659,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; struct ipv6_txoptions <S2SV_ModStart> np -> opt_len + 1,0
660,"<S2SV_ModStart> int i, <S2SV_ModEnd> upx_success = 0 <S2SV_ModStart> size_t fsize ; uint32_t valign ; uint32_t <S2SV_ModEnd>  falign, hdr_size <S2SV_ModStart> hdr_size, j, ret <S2SV_ModStart> CL_ENULLARG ; } ret = cli_scanpe_file_ext ( ctx, section_hdr, & section_hdr, & valign, sizeof ( valign ) ) ; if ( ret < 0 ) { cli_errmsg ( ""cli_scanpe: <S2SV_blank> file <S2SV_blank> == <S2SV_blank> NULL\\n"" ) ; return CL_EINVAL ; } <S2SV_ModStart> cli_scanpe_file_ext ( ctx, section_hdr, & valign <S2SV_ModStart> cli_scanpe_file_ext ( ctx, section_hdr, & valign, sizeof ( valign <S2SV_ModStart> cli_scanpe_file_ext ( ctx, section_hdr <S2SV_ModStart> cli_scanpe_file_ext ( ctx, section_hdr, & valign, sizeof ( valign ) <S2SV_ModStart> cli_scanpe_file_ext ( ctx, section_hdr <S2SV_ModStart> cli_scanpe_file_ext (",0
661,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> | EPCR_ERPRR ) <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; usleep <S2SV_ModStart> ; return ( DM9000_EPCR <S2SV_ModEnd> << 8 ) <S2SV_ModStart> | dm9000ReadReg ( DM9000_EPDRH <S2SV_ModEnd> ) ; }",0
662,<S2SV_ModStart> pcmk_ok ) { char * tls_str = NULL ; <S2SV_ModStart> pcmk_ok ) { tls_str = <S2SV_ModEnd> private -> callback <S2SV_ModStart> private -> callback ; if ( tls_str ) free ( tls_str ) ; } if ( tls_str ) free ( tls_str ) ; <S2SV_ModEnd> xmlNode * hello,0
663,<S2SV_ModStart> ; msg. msg_namelen = sizeof ( struct sockaddr_storage <S2SV_ModEnd> ) ; if,0
664,"<S2SV_ModStart> num00, tmp_err <S2SV_ModEnd> ; int sr <S2SV_ModStart> bsize ] ; MV tmp_err = cpi -> diamond_search_sad ( x, & ref_mv_full, & tmp_mv, step_param, x -> nmvjointcost, x -> mvcost, ref_mv ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, ref_mv, ref_mv, ref_mv, ref_mv, ref_mv, x -> mvcost, ref_mv ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, ref_mv, ref_mv, ref_mv, ref_mv, ref_mv, ref_mv, ref_mv, x -> nmvjointcost, x -> mvcost, ref_mv ) ; if ( tmp_err < INT_MAX ) tmp_err",0
665,"<S2SV_ModStart> ( h -> fd <S2SV_ModEnd>, h ->",0
666,"<S2SV_ModStart> ; } } merged -> ds_cache_cache = ( child -> ds_cache_cache == NOT_SET? parent -> ds_cache_cache : ""(child -> ds_cache_cache)"" ) ;",0
667,"<S2SV_ModStart> one, offset = 0 <S2SV_ModStart>, pixel_info_length = 1 <S2SV_ModEnd> ; ssize_t count <S2SV_ModStart> ) break ; if ( number_planes_filled > ( number_planes_filled - number_planes ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
668,"<S2SV_ModStart> ( r = sshmac_put_cstring ( b, enc -> type ) )!= 0 || ( r = sshmac_put_string ( b, enc -> type ) )!= 0 || ( r = sshmac_put_string ( b, enc -> type ) )!= 0 ) goto out ; if ( ( r = sshmac_put_string ( b, enc -> type ) )!= 0 || ( r = sshmac_put_string ( b, enc -> type ) )!= 0 || ( r = sshmac_put_string ( b, enc -> type ) )!= 0 ) goto out ; if ( ( r = sshmac_put_string ( b, enc -> type ) )!= 0 ) goto out ; if ( ( r = sshmac_put_string ( b, enc -> type ) )!= 0 || ( r = sshmac_put_string ( b, enc -> type ) )!= 0 ) goto out ; if ( ( r = sshmac_put_string ( b, enc -> type ) )!= 0 ) goto out ; if ( ( r = sshmac_put_string ( b, enc -> type ) )!= 0 ) goto out ; if ( ( r",0
669,<S2SV_ModStart> ) ) { if ( strlen ( option ) > sizeof ( ovalue ) ) { <S2SV_ModStart> ovalue ) ; },0
670,"<S2SV_ModStart> user_data ) { g_autofree gchar * last_client_data = NULL ; <S2SV_ModStart> num_clients ) ; last_client_data = g_strdup_printf ( ""CIB_client_connection_destroy"" ) ; <S2SV_ModStart> free ( client -> last_client_data ) ; free ( last_client_data ) ; free ( last_client_data <S2SV_ModStart> free ( client -> last_client_data ) ; free ( last_client_data ) ; free ( last_client_data <S2SV_ModStart> free ( client -> last_client_data ) ; free ( last_client_data ) ; free ( last_client_data",0
671,<S2SV_ModStart> * uv ; if (! g -> twups ) break ; <S2SV_ModStart> next ) { if (! g -> twups ) break ;,0
