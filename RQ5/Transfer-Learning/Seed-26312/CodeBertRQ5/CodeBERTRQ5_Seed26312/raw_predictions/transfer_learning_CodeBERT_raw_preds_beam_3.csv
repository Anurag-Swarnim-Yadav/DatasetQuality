,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; mutex_unlock ( & wmi -> op_mutex ) ;,0
1,<S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;,0
2,<S2SV_ModStart> writer = ( TrackWriter <S2SV_ModEnd> * ) gf_list_get,0
3,<S2SV_ModStart> -> child ; if ( item > 0 ) { <S2SV_ModStart> -> next ; },0
4,"<S2SV_ModStart>, u64 nr <S2SV_ModEnd>, struct pt_regs <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",0
5,"<S2SV_ModStart> EXT4_EXTENTS_FLAG ) { <S2SV_ModEnd> struct grub_ext4_extent_header * <S2SV_ModStart> ( data, ( struct grub_ext4_extent * ) inode -> blocks. dir_blocks, <S2SV_ModStart> return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
6,,0
7,<S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { #,0
8,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int search_filter_level ( YV12_BUFFER_CONFIG * sd, YV12_BUFFER_CONFIG * cpi <S2SV_ModEnd>, int partial_frame <S2SV_ModStart> partial_frame ) { <S2SV_ModEnd> struct loopfilter * <S2SV_ModStart> cm = & cpi <S2SV_ModEnd> -> common ; <S2SV_ModStart> cm -> lf <S2SV_ModEnd> ; int filt_direction <S2SV_ModStart> ; int filt_direction <S2SV_ModEnd> ; int filt_direction <S2SV_ModStart> / 4 ; int filt_err <S2SV_ModEnd> ; int bias <S2SV_ModStart> min_filter_level ) ; filt_err <S2SV_ModEnd> ; while ( <S2SV_ModStart> ; if ( cpi <S2SV_ModEnd> -> twopass. <S2SV_ModStart> ; if ( cpi <S2SV_ModEnd> -> twopass. <S2SV_ModStart> ; if ( cpi <S2SV_ModEnd> -> twopass. <S2SV_ModStart> ; if ( cpi <S2SV_ModEnd> -> twopass. <S2SV_ModStart> ; if ( cpi <S2SV_ModEnd> -> twopass. <S2SV_ModStart> ; if ( cpi <S2SV_ModEnd> -> twopass. <S2SV_ModStart> ; if ( cpi <S2SV_ModEnd> -> twopass. <S2SV_ModStart> ; if ( cpi <S2SV_ModEnd> -> twopass. <S2SV_ModStart> ; if ( cpi <S2SV_ModEnd> -> twopass. <S2SV_ModStart> ; if ( cpi <S2SV_ModEnd> -> twopass. <S2SV_ModStart> ; if",0
9,"<S2SV_ModStart>. left ; luaL_checkstack <S2SV_ModEnd> ( L,",0
10,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ++ i ) vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( usehp ) vpx_write <S2SV_ModEnd> ( w,",1
11,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; },0
12,"<S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ( ndo, "" <S2SV_blank> "" <S2SV_ModEnd> ) ) ;",0
13,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void construct_get_dest_keyring ( <S2SV_ModStart> * authkey ; <S2SV_ModEnd> if ( dest_keyring <S2SV_ModStart> dest_keyring ) ; <S2SV_ModEnd> } else { <S2SV_ModStart> ( dest_keyring ) <S2SV_ModEnd> } case KEY_REQKEY_DEFL_THREAD_KEYRING,0
14,<S2SV_ModStart> = NULL ; sc = NULL ;,0
15,<S2SV_ModStart> int len ; struct tm * tm ; <S2SV_ModStart> & t ) ; tm = asctime ( tm ),0
16,<S2SV_ModStart> length ) ; if ( length > AUTH_PASS_LEN ) { <S2SV_ModStart> ) ) ; },0
17,<S2SV_ModStart> e == p || e == p,0
18,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",1
19,<S2SV_ModStart> = 0 ; if ( reader -> bytes_available_fd < 0 ) return false ;,0
20,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> detect_transition_to_still ( struct <S2SV_ModStart> last_decay_rate ) { <S2SV_ModEnd> if ( frame_interval <S2SV_ModStart> trans_to_still = 0 <S2SV_ModEnd> ; FIRSTPASS_STATS tmp_next_frame <S2SV_ModStart> ; FIRSTPASS_STATS tmp_next_frame <S2SV_ModEnd> ; for ( <S2SV_ModStart> ) break ; <S2SV_ModEnd> } reset_fpf_position ( <S2SV_ModStart> position ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
21,<S2SV_ModStart> offset + size < <S2SV_ModEnd> i_size_read ( inode,0
22,"<S2SV_ModStart> alg ) { request_module <S2SV_ModEnd> ( ""%s"", <S2SV_ModStart> CRYPTO_ALG_NEED_FALLBACK ) ) request_module <S2SV_ModEnd> ( ""%s-all"",",0
23,<S2SV_ModStart> = GIT_PKT_NG ; if ( len < 2 ) return - 1 ; <S2SV_ModStart> line += 3 ; if ( len < 2 ) return - 1,0
24,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
25,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; if (,0
26,"<S2SV_ModStart> mntent, path, 0",0
27,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } io -> io_cleanup = mem_cleanup ;,1
28,<S2SV_ModStart> ( value + 0.5 <S2SV_ModEnd> ) ) ;,0
29,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return ret?,0
30,<S2SV_ModStart> vpx_codec_enc_cfg_map_t * map ; if ( cfg == NULL ) return 0,0
31,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
32,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
33,<S2SV_ModStart> ) ) { if ( imp_readonly ) { <S2SV_ModStart> length ) ; },0
34,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST ) ; enc28j60ClearBit ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_TXERIF ) ; enc28j60ClearBit ( interface, ENC28J60_EIR, ENC28J60_EIR_TXERIF ) ; enc28j60WriteReg ( interface, ENC28J60_ETXSTL, MSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_ETXSTH, MSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_ETXSTH, MSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_ETXNDH, MSB ( ENC28J60_TX_BUFFER_ST",0
35,<S2SV_ModStart> ; value = ast2obj_string <S2SV_ModEnd> ( o ->,0
36,"<S2SV_ModStart> ; if ( ( <S2SV_ModStart> page, R_OK ) <S2SV_ModStart> ; if ( ( <S2SV_ModStart> page, wikitext ) <S2SV_ModStart> ; if ( ( <S2SV_ModStart> page, R_OK )",0
37,"<S2SV_ModStart> low_var_thresh, int mb_cols <S2SV_ModEnd> ) { double <S2SV_ModStart> -> pp_limits_buffer ; <S2SV_ModEnd> ( void ) <S2SV_ModStart> ) flag ; memset <S2SV_ModEnd> ( limits, <S2SV_ModStart> ( limits, <S2SV_ModEnd> ppl, 16",0
38,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ext4_xattr_cache_insert ( struct <S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> ) ; struct mb2_cache <S2SV_ModEnd> * ce ; <S2SV_ModStart> ; ce = mb2_cache_entry_alloc ( ext4_mb_cache <S2SV_ModEnd>, GFP_NOFS ) <S2SV_ModStart> error ) { mb2_cache_entry_free <S2SV_ModEnd> ( ce ) <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; mb2_cache_entry_release <S2SV_ModEnd> ( ce ) <S2SV_ModStart> hash ) ; return 0 <S2SV_ModEnd> ; } } <S2SV_ModStart> ; } } return 0 ;",0
39,"<S2SV_ModStart> code, rlen, 0",0
40,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp",0
41,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|truncated]"" <S2SV_ModEnd> ) ) ;",0
42,,0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode",0
44,"<S2SV_ModStart> size_t size ; jas_safe_intfast32_add <S2SV_ModEnd> ( tlx, <S2SV_ModStart> ) ||! jas_safe_intfast32_add <S2SV_ModEnd> ( tly, <S2SV_ModStart> ) ||! jas_safe_intfast32_add <S2SV_ModEnd> ( tly, <S2SV_ModStart> ; if ( jas_safe_intfast32_add <S2SV_ModEnd> ( size,",0
45,<S2SV_ModStart> dp == datalen || pc == 0,0
46,"<S2SV_ModStart>, size_t * acl_len <S2SV_ModEnd> ) { __be32 <S2SV_ModStart> { __be32 * acl_len <S2SV_ModEnd> ; struct kvec <S2SV_ModStart> int status ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> u32 recvd ; acl_len <S2SV_ModEnd> = ( u8 <S2SV_ModStart> u8 * ) acl_len <S2SV_ModEnd>, recvd ) <S2SV_ModStart> ) ; * acl_len <S2SV_ModEnd> = attrlen ;",0
47,"<S2SV_ModStart> * TICK_NSEC ; u64 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",0
48,<S2SV_ModStart> { owner = sclone ( auth <S2SV_ModEnd> ) ; if <S2SV_ModStart> } group = sclone ( auth <S2SV_ModEnd> ) ; if,0
49,<S2SV_ModStart> ; # if CONFIG_MEM_MANAGER <S2SV_ModEnd> int number_aau ;,0
50,"<S2SV_ModStart> = SQUASHFS_LOOKUP_BLOCKS ( fd <S2SV_ModEnd>. inodes ) <S2SV_ModStart> = read_fs_bytes ( fd <S2SV_ModEnd>, sBlk.",0
51,<S2SV_ModStart> } else return apr_psprintf <S2SV_ModEnd> ( cmd ->,0
52,<S2SV_ModStart> ; if ( 1 <S2SV_ModEnd> ) { # <S2SV_ModStart> } if ( 1 <S2SV_ModEnd> ) { },0
53,<S2SV_ModStart> } if ( c -> opt -> redirect_addr. names ) return 0 ; if (,0
54,<S2SV_ModStart> ; if ( cmac &&,0
55,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> const uint64_t bits_left <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> -= bits_used ; <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
56,"<S2SV_ModStart> define EOFOp 0x07 <S2SV_ModEnd> char magick [ <S2SV_ModStart> ; do { if ( count == 2 ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
57,"<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> altsetting [ 0 ]. desc. bNumEndpoints < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; error = - EINVAL ; goto err_free_urb ; }",1
58,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
59,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> & tmpname, lockfd <S2SV_ModEnd> ) ) ==",0
60,<S2SV_ModStart> = value ; ps_pps -> i4_sps_valid = value ;,0
61,,0
62,,0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,<S2SV_ModStart> ) get_block = ocfs2_get_block <S2SV_ModEnd> ; else get_block,0
65,"<S2SV_ModStart> ( f, ""%79s <S2SV_blank> %[^\\n]\\n"" <S2SV_ModEnd>, def,",0
66,"<S2SV_ModStart> n ) { <S2SV_ModEnd> char * str <S2SV_ModStart> PyCompilerFlags cf ; <S2SV_ModEnd> char * str <S2SV_ModStart> * str ; <S2SV_ModEnd> Py_ssize_t len ; <S2SV_ModStart> ':' ) ; if ( str == NULL ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ; } <S2SV_ModStart> == NULL ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ; } <S2SV_ModEnd> str [ 0 <S2SV_ModStart> = PyCF_ONLY_AST ; if ( str == NULL ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ; } <S2SV_ModStart> = PyCF_ONLY_AST ; if ( str == NULL ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ; }",0
67,<S2SV_ModStart> string ) { if ( string == NULL ) return NULL ;,0
68,<S2SV_ModStart> size ) ; if (! px -> ft ) { return FALSE ; },1
69,"<S2SV_ModStart> u_char * dat, u_int len <S2SV_ModStart>, val_l ; if ( len < 2 ) return - EINVAL ; <S2SV_ModStart> ) ) ; if ( len < 2 ) return - EINVAL ; <S2SV_ModStart> ) ) ; if ( len < 2 ) return - EINVAL ; <S2SV_ModStart> ) ) ; if ( len < 2 ) return - EINVAL ; <S2SV_ModStart> ) ) ; if ( len < 2 ) return - EINVAL ;",0
70,<S2SV_ModStart> void ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
71,<S2SV_ModStart> const buffers [ 3 <S2SV_ModEnd> ] = { <S2SV_ModStart> int strides [ 3 <S2SV_ModEnd> ] = {,0
72,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; for (,1
73,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
74,"<S2SV_ModStart> _ipmi_destroy_user ( user ) ; kref_put ( & user -> refcount, free_user",0
75,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> sl = strlen,1
76,"<S2SV_ModStart> * for_ch ; <S2SV_ModEnd> REQ ( n <S2SV_ModStart>, comp_for ) ; if ( TYPE ( CHILD ( n, 0 ) ) == ASYNC ) { is_async = 1 ; } if ( TYPE ( CHILD ( n, 0 ) ) == ASYNC ) { is_async = 1 ; } else if ( TYPE ( CHILD ( n, 0 ) ) == ASYNC ) { is_async = 1 ; } else if ( TYPE ( CHILD ( n, 0 ) ) == ASYNC ) { is_async = 1 ; } else if ( TYPE ( CHILD ( n, 0 ) ) == ASYNC ) { is_async = 1 ; } else if ( TYPE ( CHILD ( n, 0 ) ) == ASYNC ) { is_async = 1 ; } else if ( TYPE ( CHILD ( n, 0 ) ) == ASYNC ) { is_async = 1 ; } else if ( TYPE ( CHILD ( n, 0 ) ) == ASYNC ) { is_async = 1 ; } else if ( TYPE ( CHILD ( n, 0 ) ) == ASYNC ) { is_as",0
77,<S2SV_ModStart> NULL ; } dst_state -> curframe = src -> curframe ;,0
78,"<S2SV_ModStart> write_mb_modes_kf ( const MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd ) { <S2SV_ModEnd> const MACROBLOCKD * <S2SV_ModStart> * const cm <S2SV_ModEnd> ; const MODE_INFO <S2SV_ModStart> segment_id ) ; <S2SV_ModEnd> if ( bsize <S2SV_ModStart> == TX_MODE_SELECT ) write_selected_tx_size <S2SV_ModEnd> ( cpi, <S2SV_ModStart> == TX_MODE_SELECT ) write_selected_tx_size <S2SV_ModEnd> ( cpi, <S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
79,"<S2SV_ModStart> > maxn ) { <S2SV_ModStart> ""Action <S2SV_blank> overflow!!"" ) ; }",0
80,<S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( & prep -> pp_n ) ;,0
81,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
82,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void addModuleArgument (,0
83,<S2SV_ModStart> [ j ] += <S2SV_ModEnd> x [ j <S2SV_ModStart> [ j ] += <S2SV_ModEnd> x [ j <S2SV_ModStart> [ j ] += <S2SV_ModEnd> x [ j <S2SV_ModStart> [ j ] += <S2SV_ModEnd> x [ j <S2SV_ModStart> [ j ] += <S2SV_ModEnd> x [ j <S2SV_ModStart> [ j ] += <S2SV_ModEnd> x [ j <S2SV_ModStart> [ j ] += <S2SV_ModEnd> x [ j <S2SV_ModStart> [ j ] += <S2SV_ModEnd> x [ j <S2SV_ModStart> [ j ] += <S2SV_ModEnd> x [ j <S2SV_ModStart> [ j ] += <S2SV_ModEnd> x [ j <S2SV_ModStart> [ j ] += <S2SV_ModEnd> x [ j <S2SV_ModStart> [ j ] += <S2SV_ModEnd> x [ j <S2SV_ModStart> [ j ] += <S2SV_ModEnd> x [ j <S2SV_ModStart> [ j ] += <S2SV_ModEnd> x [ j <S2SV_ModStart> [ j ] += <S2SV_ModEnd> x [ j <S2SV_ModStart> [ j ] += <S2SV_ModEnd> x [ j <S2SV_ModStart> [ j ] += <S2SV_ModEnd> y [ j <S2SV_ModStart> [ j ] += <S2SV_ModEnd> y [ j <S2SV_ModStart> [ j ] += <S2SV_ModEnd> y [ j <S2SV_ModStart> [ j ] += <S2SV_ModEnd> y [ j <S2SV_ModStart> [ j ] += <S2SV_ModEnd> y [ j <S2SV_ModStart> [ j ] += <S2SV_ModEnd> y [ j <S2SV_ModStart> [ j ] += <S2SV_ModEnd> y [ j <S2SV_ModStart> [ j ] += <S2SV_ModEnd> y [ j <S2SV_ModStart> [ j ] += <S2SV_ModEnd> y [ j <S2SV_ModStart> [ j ] += <S2SV_ModEnd> y [ j <S2SV_ModStart> [ j ] += <S2SV_ModEnd> y [ j <S2SV_ModStart> [ j ] += <S2SV_ModEnd> y [ j <S2SV_ModStart> [,0
84,"<S2SV_ModStart> enc, p, 1",0
85,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void bfq_idle_slice_timer_body (,0
86,,1
87,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
88,<S2SV_ModStart> + x > ( int ) <S2SV_ModStart> + diffBlockLength || ( int ) <S2SV_ModStart> + y > ( int ),0
89,<S2SV_ModStart> np -> opt <S2SV_ModEnd> ) ; err,0
90,<S2SV_ModStart> == VFF_TYP_DOUBLE ) { <S2SV_ModStart> = 0 ; },0
91,<S2SV_ModStart> data ) { ( void ) ctx ; ( void ) data ;,0
92,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
93,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
94,<S2SV_ModStart> mv. as_int <S2SV_ModEnd> ; mv.,0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
97,"<S2SV_ModStart> msicap, msgnum <S2SV_ModEnd> ) ; return",0
98,"<S2SV_ModStart> ) ; } if ( cmd -> flags & REDIS_REPL_CONNECTED ) { addReplyError ( c, shared. ok ) ; return REDIS_OK ; }",0
99,<S2SV_ModStart> vpx_codec_err_t res ; vpx_uint_t g_pass ; <S2SV_ModStart> g_pass!= VPX_RC_ONE_PASS ) || ( cfg -> g_pass!= VPX_RC_ONE_PASS ),0
100,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> vp9_init_plane_quantizers ( cpi,0
101,<S2SV_ModStart> si_code >= 0 && info -> si_signo,0
102,<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; if ( ptr -> size < 8 ) return GF_ISOM_INVALID_FILE ;,0
103,<S2SV_ModStart>. get_glob_hdrs ( ( int ),0
104,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> -> state == fmode <S2SV_ModEnd> ) return ; <S2SV_ModStart> ; if ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> & FMODE_WRITE ) { <S2SV_ModEnd> list_move ( & <S2SV_ModStart> ) ; } }",0
105,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; break ;",0
106,<S2SV_ModStart> 0 ; } memcpy <S2SV_ModEnd> ( elem.,0
107,"<S2SV_ModStart> i, ( jpc_qcx_getEXPN <S2SV_ModEnd> ( qcd -> <S2SV_ModStart> i, ( jpc_qcx_getMANT <S2SV_ModEnd> ( qcd ->",0
108,<S2SV_ModStart> ; if ( c -> video_size < 8 ) return AVERROR_INVALIDDATA ; if (,0
109,<S2SV_ModStart> length - 1 <S2SV_ModEnd> ) ; return,1
110,"<S2SV_ModStart> * name = fit_get_name_safe <S2SV_ModEnd> ( fit,",0
111,<S2SV_ModStart> ; if ( kfifo_alloc_zero <S2SV_ModEnd> ( & state,0
112,"<S2SV_ModStart> * iface, <S2SV_ModEnd> vpx_codec_flags_t flags, <S2SV_ModStart> else if ( <S2SV_ModEnd> flags & VPX_CODEC_CAP_DECODER <S2SV_ModStart> flags & VPX_CODEC_CAP_DECODER <S2SV_ModEnd> ) res =",0
113,<S2SV_ModStart> ; value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1100WritePhyReg (,0
114,,0
115,<S2SV_ModStart> else if ( <S2SV_ModEnd> flags & VPX_CODEC_CAP_XMA <S2SV_ModStart> flags & VPX_CODEC_CAP_XMA <S2SV_ModEnd> ) res =,0
116,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
117,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; RESERVE_SPACE",1
118,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void modify_bar_registration ( <S2SV_ModStart> ) ; return 0,0
119,<S2SV_ModStart> len ) ; r_strbuf_release ( & op -> esil ) ;,0
120,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
121,"<S2SV_ModStart> goto trunc ; memset ( & lshp -> ls_stateid, 0, sizeof ( struct lsa6_hdr ) ) ;",0
122,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { ret = - EINVAL ; break ; } <S2SV_ModEnd> * obuf =",0
123,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
124,<S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ) <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ),1
125,"<S2SV_ModStart> * costs, vpx_tree <S2SV_ModEnd> tree, const <S2SV_ModStart> tree, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> ) { const vpx_tree_index <S2SV_ModEnd> b ; for <S2SV_ModStart> ) ; const vpx_tree_index <S2SV_ModEnd> ii = tree",0
126,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
127,"<S2SV_ModStart>, c, 1 <S2SV_ModEnd> ) ; if",0
128,"<S2SV_ModStart> fadst16 ( const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> output ) { tran_low_t <S2SV_ModEnd> s0, s1 <S2SV_ModStart> input, int16_t <S2SV_ModEnd> output ) { <S2SV_ModStart> input, int16_t <S2SV_ModEnd> output ) { <S2SV_ModStart> output ) { tran_low_t <S2SV_ModEnd> x0 = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x2 = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 2 ] ; tran_low_t <S2SV_ModEnd> x5 = input <S2SV_ModStart> 4 ] ; tran_low_t <S2SV_ModEnd> x6 = input <S2SV_ModStart> 9 ] ; tran_low_t <S2SV_ModEnd> x7 = input <S2SV_ModStart> 9 ] ; tran_low_t <S2SV_ModEnd> x9 = input <S2SV_ModStart> 9 ] ; tran_low_t <S2SV_ModEnd> x9 = input <S2SV_ModStart> 9 ] ; tran_low_t <S2SV_ModEnd> x12 = input <S2SV_ModStart> 12 ] ; tran_low_t <S2SV_ModEnd> x14 = input <S2SV_ModStart> 12 ] ; tran_low_t <S2SV_ModEnd> x15 = input <S2SV_ModStart> 12 ] ; tran_low_t <S2SV_ModEnd> x15 = input <S2SV_ModStart> 14 ] ; tran_low_t <S2SV_ModEnd> x15 = input <S2SV_ModStart> 14 ] ;",0
129,<S2SV_ModStart> ; # if <S2SV_ModEnd> HAVE_MEDIA flags |= <S2SV_ModStart> ; # endif <S2SV_ModEnd> return flags &,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
131,"<S2SV_ModStart> void count_segs_sb ( <S2SV_ModEnd> const TileInfo * <S2SV_ModStart> const TileInfo * <S2SV_ModEnd> tile, MODE_INFO <S2SV_ModStart> ) { const <S2SV_ModEnd> int bw, <S2SV_ModStart> cm = & cpi <S2SV_ModEnd> -> common ; <S2SV_ModStart> cm = & cpi <S2SV_ModEnd> -> mi_stride ; <S2SV_ModStart> = num_8x8_blocks_wide_lookup [ mi_8x8 <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = num_8x8_blocks_high_lookup [ mi_8x8 <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = num_8x8_blocks_high_lookup [ mi_8x8 <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = num_8x8_blocks_high_lookup [ mi_8x8 <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = num_8x8_blocks_high_lookup [ mi_8x8 <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = num_8x8_blocks_high_lookup [ mi_8x8 <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = num_8x8_blocks_high_lookup [ mi_8x8 <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = num_8x8_blocks_high_lookup [ mi_8x8 <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = num_",0
132,<S2SV_ModStart> ) break ; <S2SV_ModEnd> if (!,0
133,<S2SV_ModStart> get_blocks_flags = EXT4_GET_BLOCKS_CREATE | EXT4_GET_BLOCKS_DELALLOC_RESERVE,0
134,"<S2SV_ModStart> = 0 ; uint64_t addr_len = 0 ; <S2SV_ModStart> & p -> ai_family, & p -> ai_protocol, & p -> ai_protocol, & p -> ai_addrlen, NULL, & p -> ai_addrlen, NULL )!= OE_OK ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval == 1 || oe_errno!= OE_ENAMETOOLONG ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval == - 1 || oe_errno!= OE_ENAMETOOLONG ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval!= - 1 || oe_errno!= OE_ENAMETOOLONG ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE",0
135,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
136,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
137,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int set_registers ( <S2SV_ModStart> int ret ; if ( ret < 0 ) return ret ; <S2SV_ModStart> ret ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
138,"<S2SV_ModStart> mod_ty Module ( asdl_seq <S2SV_ModEnd> * body,",0
139,"<S2SV_ModStart> * src, <S2SV_ModEnd> int64_t ts_start, <S2SV_ModStart> >> 4 ; <S2SV_ModEnd> if ( ctx <S2SV_ModStart> write_idx ) ; <S2SV_ModEnd> if ( ctx <S2SV_ModStart> } else { vpx_copy_and_extend_frame <S2SV_ModEnd> ( src, <S2SV_ModStart> img ) ; <S2SV_ModEnd> # else vp9_copy_and_extend_frame",0
140,"<S2SV_ModStart>. sharpness ; const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; const int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; if ( cm -> frame_type == KEY_FRAME ) filt_guess = clamp ( filt_guess, min_filter_level, max_filter_level ) ; <S2SV_ModStart> int q = vp9_ac_quant <S2SV_ModEnd> ( cm -> <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> filt_guess = ROUND_POWER_OF_TWO <S2SV_ModStart> } else { <S2SV_ModEnd> lf -> filter_level <S2SV_ModStart>, method == LPF_PICK_FROM_SUBIMAGE <S2SV_ModEnd> ) ; }",0
141,<S2SV_ModStart> BT_STATUS_SUCCESS ) ; btif_in_execute_bonded_devices ( ) ;,0
142,<S2SV_ModStart> '!' : { long <S2SV_ModEnd> a = getnum,0
143,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
144,<S2SV_ModStart> (! ctx <S2SV_ModEnd> ) res = <S2SV_ModStart>. decode ( <S2SV_ModEnd> priv -> alg_priv,0
145,,0
146,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> ) ; } sendClean ( outputbuffer ) ;",1
147,<S2SV_ModStart> self ) { Py_CLEAR ( self ) -> tp_free ( self ) ;,0
148,<S2SV_ModStart> < count ; i ++ <S2SV_ModEnd> ) { n,0
149,,0
150,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
151,,0
152,<S2SV_ModStart> inode ) ; <S2SV_ModEnd> unsigned end_of_metadata = <S2SV_ModStart> height - 1 <S2SV_ModEnd> ; enum alloc_state <S2SV_ModStart> ) ; } <S2SV_ModEnd> return 0 ;,0
153,"<S2SV_ModStart>, ""Codec: <S2SV_blank> %s\\n"", <S2SV_ModEnd> input -> use_i420 <S2SV_ModStart> : ""YV12"" ) <S2SV_ModEnd> ; } if",0
154,,0
155,"<S2SV_ModStart> { if ( copy_file_exists <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> { if ( copy_file_exists <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> { if ( copy_file_exists <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> { if ( copy_file_exists <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> { if ( copy_file_exists <S2SV_ModEnd> ( ""/etc/skel/.cshrc"",",0
156,<S2SV_ModStart> msix_tab_size ) { <S2SV_ModEnd> bzero ( msixcap,1
157,<S2SV_ModStart> ; if ( <S2SV_ModEnd> js_regexec ( re,0
158,<S2SV_ModStart> : if ( Long_val <S2SV_ModEnd> ( Field ( <S2SV_ModStart> 1 ) ) > <S2SV_ModEnd> 0 ) caml_set_oo_id,0
159,"<S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; ksz8851WriteReg <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; isr <S2SV_ModStart> ( isr & KSZ8851_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851",0
160,"<S2SV_ModStart> void encode_quantization ( <S2SV_ModEnd> struct vp9_write_bit_buffer * <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
161,"<S2SV_ModStart> ( ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, msglen ) )",0
162,<S2SV_ModStart> peerec ) ; <S2SV_ModEnd> if ( (,0
163,"<S2SV_ModStart> ( ) ; strcpy <S2SV_ModEnd> ( t1_buf_array,",0
164,"<S2SV_ModStart>, BLOCK_SIZE subsize, MACROBLOCKD * x, MACROBLOCKD * xd <S2SV_ModStart> -> e_mbd ; <S2SV_ModEnd> PARTITION_TYPE partition = <S2SV_ModStart> ] ) = x -> <S2SV_ModEnd> mi ; dup_mode_info_in_sb <S2SV_ModStart> case PARTITION_VERT : x -> <S2SV_ModEnd> mi [ 0 <S2SV_ModStart> mi_col ) ; x -> <S2SV_ModEnd> mi [ 0 <S2SV_ModStart> mi_col ) ; x -> <S2SV_ModEnd> mi [ 0 <S2SV_ModStart> mi_cols ) { x -> <S2SV_ModEnd> mi [ 0 <S2SV_ModStart> mi_cols ) { x -> <S2SV_ModEnd> mi [ 0 <S2SV_ModStart> mi_cols ) { x -> <S2SV_ModEnd> mi [ 0 <S2SV_ModStart> mi_cols ) { x -> <S2SV_ModEnd> mi [ 0 <S2SV_ModStart> mi_cols ) { x -> <S2SV_ModEnd> mi [ 0 <S2SV_ModStart> mi_cols ) { x -> <S2SV_ModEnd> mi [ 0 <S2SV_ModStart> mi_cols ) { x -> <S2SV_ModEnd> mi [ 0 <S2SV_ModStart> mi_cols ) { x -> <S2SV_ModEnd> mi [ 0 <S2SV_ModStart> mi_cols ) { x -> <S2SV_ModEnd> mi [ 0 <S2SV_ModStart> mi_cols ) { x -> <S2SV_ModEnd> mi [ 0 <S2SV_ModStart> mi_cols ) { x -> <S2SV_ModEnd> mi [ 0 <S2SV_ModStart> mi_cols ) { x -> <S2SV_ModEnd> mi [ 0 <S2SV_ModStart> mi_col",0
165,"<S2SV_ModStart> key_ref ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) { ret = - ENOKEY ; goto error2 ; }",1
166,,0
167,<S2SV_ModStart> var_off ) ; if ( src_known ) { <S2SV_ModStart> var_off ) ; },0
168,<S2SV_ModStart> ; if ( IS_ERR ( cifs_sb ) ) { rc = PTR_ERR ( cifs_sb ) ; goto lookup_out ; } if (,0
169,<S2SV_ModStart> th -> dest <S2SV_ModEnd> ) ; if,0
170,"<S2SV_ModStart> svc_ctx ) { SvcInternal_t <S2SV_ModEnd> * const si <S2SV_ModStart> svc_ctx ) ; <S2SV_ModEnd> svc_log ( svc_ctx <S2SV_ModStart> svc_ctx ) ; if ( si == NULL ) return NULL ; <S2SV_ModStart> ""\\n"" ) ; <S2SV_ModEnd> number_of_frames = encode_frame_count <S2SV_ModStart> i ) { <S2SV_ModEnd> if ( svc_ctx",0
171,<S2SV_ModStart> = new_cols ; <S2SV_ModEnd> screen -> sb_buffer,0
172,<S2SV_ModStart> n ) { int in_named_escape = 0 ; int in_named_escape = 0 ; int in_named_escape = 0 ; int in_named_escape = 0 ; int in_named_escape <S2SV_ModEnd> ; int in_named_escape <S2SV_ModStart> NULL ) ; in_named_escape = 0 ; in_named_escape = 0 ; in_named_escape = 0 ; <S2SV_ModStart> NULL ) ; in_named_escape = 0 ; <S2SV_ModStart> < end && in_named_escape <S2SV_ModEnd> >= 2 && <S2SV_ModStart> == '\\\\' && in_named_escape <S2SV_ModEnd> >= 2 && <S2SV_ModStart> == ch ) { in_named_escape = 0 ; in_named_escape = 0 ; } else if ( in_named_escape ) { in_named_escape = 0 ; } else if ( in_named_escape ) { in_named_escape = 0 ; } else if ( in_named_escape ) { in_named_escape = 0 ; } else if ( in_named_escape ) { in_named_escape = 0 ; } else if ( in_named_escape ) { in_named_escape = 0 ; } else if ( in_named_escape ) { in_named,0
173,"<S2SV_ModStart> ( pd, g_settings_dump_location <S2SV_ModEnd> ) ; char",0
174,"<S2SV_ModStart>, areaY, ""%s"", <S2SV_ModStart>, areaY, ""%s"",",0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> uint16_t * ) length <S2SV_ModEnd> ; ND_PRINT (",0
176,"<S2SV_ModStart>, in_what_stride, in_what_stride <S2SV_ModEnd>, in_what_stride,",0
177,"<S2SV_ModStart> * cpi, MACROBLOCK * xd, MACROBLOCKD * xd, <S2SV_ModStart> int mi_col ; vpx_memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; vpx_memset <S2SV_ModEnd> ( xd <S2SV_ModStart> ) ) ; vpx_memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; vpx_memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; vpx_memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; vpx_memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; vpx_memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = UINT_MAX ; vpx_memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> pred_mv ) ; vpx_memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> case VAR_BASED_PARTITION : vpx_memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> case VAR_BASED_PARTITION : vpx_memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ) ) ; vpx_memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ) ) ; vpx_memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ) ) ; vpx_memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ) ) ; vpx_memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart>",0
178,"<S2SV_ModStart>, & dh, NULL",0
179,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> * optp, const <S2SV_ModStart> & 3 ) { <S2SV_ModStart> = IPOPT_END ; }",0
180,<S2SV_ModStart> connection == NULL || strlen ( upgrade ) == 0,0
181,<S2SV_ModStart> * findalldevs_if ; uint32 <S2SV_ModEnd> nif = 0 <S2SV_ModStart> 0 ; } if ( plen < sizeof ( struct rpcap_findalldevs_if ) ) return - 1 ; <S2SV_ModStart> -> next ) <S2SV_ModEnd> if ( d <S2SV_ModStart> -> description ) <S2SV_ModEnd> if ( d <S2SV_ModStart> -> name ) <S2SV_ModEnd> if ( d <S2SV_ModStart> -> name ) <S2SV_ModEnd> if ( d <S2SV_ModStart> -> name ) <S2SV_ModEnd> if ( d <S2SV_ModStart> -> name ) <S2SV_ModEnd> if ( d <S2SV_ModStart> -> name ) <S2SV_ModEnd> if ( d <S2SV_ModStart> -> name ) <S2SV_ModEnd> if ( d <S2SV_ModStart> -> name ) <S2SV_ModEnd> if ( d <S2SV_ModStart> -> name ) <S2SV_ModEnd> if ( d <S2SV_ModStart> -> name ) <S2SV_ModEnd> if ( d <S2SV_ModStart> -> name ) <S2SV_ModEnd> if ( d <S2SV_ModStart> -> name ) <S2SV_ModEnd> if ( sendbufidx <S2SV_ModStart> sendbufidx ) ; <S2SV_ModEnd> } } if,0
182,"<S2SV_ModStart>, client_uid, ""%s"",",0
183,<S2SV_ModStart> -> columns - 3 <S2SV_ModEnd> ) ; x,0
184,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
185,"<S2SV_ModStart> num_images ++ ; if ( num_images > 1 ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
186,"<S2SV_ModStart> ( ndo, ""%s"" <S2SV_ModEnd>, bp [ <S2SV_ModStart> ( ndo, ""%s"" <S2SV_ModEnd>, bp [ <S2SV_ModStart> ( ndo, ""%s"" <S2SV_ModEnd>, bp [ <S2SV_ModStart> ( ndo, ""%s"" <S2SV_ModEnd>, bp [ <S2SV_ModStart> ( ndo, ""%s"" <S2SV_ModEnd>, bp [ <S2SV_ModStart> ( ndo, ""%s"" <S2SV_ModEnd>, bp [ <S2SV_ModStart> ( ndo, ""%s"" <S2SV_ModEnd>, bp [ <S2SV_ModStart> ( ndo, ""%s"" <S2SV_ModEnd>, bp [ <S2SV_ModStart> ( ndo, ""%s"" <S2SV_ModEnd>, bp [",0
187,<S2SV_ModStart> (! dumpable <S2SV_ModEnd> ) { rcu_read_unlock,0
188,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
189,<S2SV_ModStart> ; } } ps_parse -> s_sei_params. i4_sei_parameters_present_flag = 1 ;,0
190,<S2SV_ModStart> = 0 ; dd -> per_sdma = NULL ;,0
191,,0
192,,0
193,"<S2SV_ModStart> val ) ; if (! <S2SV_ModStart>, val ) ) { <S2SV_ModEnd> if ( strcmp <S2SV_ModStart> name ) ; }",0
194,"<S2SV_ModStart> ; } } if ( clen < 0 ) { return bad_request ( c, 400, __LINE__ ) ; }",0
195,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> 256 ] ; tran_low_t <S2SV_ModEnd> * outptr = <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16",0
196,"<S2SV_ModStart> goto out ; if ( g_str_has_prefix ( name ) ) { g_key_file_append_from_data ( keyfile, tmpfile_name ) ; g_key_file_append_from_data ( keyfile, tmpfile_name ) ; }",0
197,"<S2SV_ModStart> char * temp_filename <S2SV_ModEnd> ; if ( <S2SV_ModStart> node ) ; temp_filename = osi_calloc ( strlen ( filename ) + 5 ) ; if (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long"", __func__ ) ; return false ; } <S2SV_ModStart> enode ) ; <S2SV_ModEnd> } if ( <S2SV_ModStart> sections ) ) { <S2SV_ModStart> fp ) ; }",0
198,"<S2SV_ModStart> ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> TIMESTAMP <S2SV_blank> %x, <S2SV_blank> Length <S2SV_blank> %u"" <S2SV_ModEnd>, tptr,",0
199,"<S2SV_ModStart>, NULL ) <S2SV_ModEnd> ; return ;",0
200,"<S2SV_ModStart> ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModEnd> ""%s"", request",0
201,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> waitpid ( child <S2SV_ModStart> ; if ( copy_file_as_user <S2SV_ModEnd> ( dest, <S2SV_ModStart> ( dest, <S2SV_ModEnd> S_IRUSR | S_IWUSR <S2SV_ModStart> S_IWUSR ) < 0 <S2SV_ModEnd> ) errExit (",0
202,<S2SV_ModStart>!= BFA_STATUS_OK ) { kfree ( fcstats ) ; <S2SV_ModStart> return NULL ; },1
203,"<S2SV_ModStart> -> x = MinF <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> y = MinF <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> z = MinF <S2SV_ModEnd> ( 1.0f,",0
204,<S2SV_ModStart> ; rec -> <S2SV_ModEnd> sasl_password = src,0
205,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
206,"<S2SV_ModStart> o, datao ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteCanonEntry ) )",0
207,"<S2SV_ModStart> ) ; } if ( my_errno == EINVAL ) { if ( my_errno == EINVAL ) { mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> valid"", filename ) ; } else { <S2SV_ModStart> ) ; } }",0
208,<S2SV_ModStart> olen ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> long hex ; size_t <S2SV_ModEnd> strindex = 0 <S2SV_ModStart> hex ; CURLcode res ; size_t alloc = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> hex ) ; if (! res ) { free ( ns ) ; return NULL ; } <S2SV_ModStart> ( res ) { free ( ns ) ; return NULL ; } <S2SV_ModEnd> return NULL ;,0
209,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
210,<S2SV_ModStart> ; def -> <S2SV_ModEnd> session_setup = usm_session_init,0
211,"<S2SV_ModStart> NULL ; return <S2SV_ModEnd> match ( prog <S2SV_ModStart>, sub ) == 0",0
212,<S2SV_ModStart> idx ] ; <S2SV_ModEnd> switch ( action <S2SV_ModStart> ) ; } <S2SV_ModEnd> return SNMP_ERR_NOERROR ;,0
213,<S2SV_ModStart> break ; } if ( packets > 1 ),0
214,"<S2SV_ModStart> -> slave_list_head, timeri <S2SV_ModEnd> ) { spin_lock_irq <S2SV_ModStart> ( & slave_active_lock <S2SV_ModEnd> ) ; list_move_tail",0
215,<S2SV_ModStart> -> u4_bitoffset = ih264d_read_mmco_commands <S2SV_ModEnd> ( ps_dec ),0
216,<S2SV_ModStart> int_fast32_t widthOverflow = ( <S2SV_ModStart> info -> originalWidth ) <S2SV_ModStart> uint_fast32_t newRasterSize = ( <S2SV_ModStart> info -> originalHeight ) <S2SV_ModStart> int_fast32_t newRasterSize = ( <S2SV_ModStart> info -> rasterSize ) <S2SV_ModStart> int_fast32_t newRasterSize = ( <S2SV_ModStart> info -> rasterSize ) <S2SV_ModStart> int_fast32_t newRasterSize = ( <S2SV_ModStart> info -> rasterSize ) <S2SV_ModStart> int_fast32_t newRasterSize = ( <S2SV_ModStart> info -> rasterSize ) <S2SV_ModStart> int_fast32_t newRasterSize = ( <S2SV_ModStart> info -> rasterSize ) <S2SV_ModStart> int_fast32_t newRasterSize = ( <S2SV_ModStart> info -> rasterSize ) <S2SV_ModStart> int_fast32_t newRasterSize = ( <S2SV_ModStart> info -> rasterSize ) <S2SV_ModStart> int_fast32_t newRasterSize = ( <S2SV_ModStart> info -> rasterSize ) <S2SV_ModStart> int_fast32_t newRasterSize = ( <S2SV_ModStart> info -> rasterSize ) <S2SV_ModStart> int_fast32_t newRasterSize = ( <S2SV_ModStart> info -> rasterSize ) <S2SV_ModStart> int_fast32_t newRasterSize = ( <S2SV_ModStart> info -> r,0
217,"<S2SV_ModStart> validator -> user, 0",0
218,<S2SV_ModStart> bus ] ; <S2SV_ModEnd> si = &,0
219,"<S2SV_ModStart>, timeo ) <S2SV_ModEnd> ; while (",0
220,<S2SV_ModStart> += 9 ; if ( <S2SV_ModStart> s ++ )!= 0 ) { <S2SV_ModEnd> if ( * <S2SV_ModStart> t ++ ; },0
221,"<S2SV_ModStart> ; result = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL ) )",1
222,<S2SV_ModStart> msixcap msixcap ; if <S2SV_ModEnd> ( msgnum >= <S2SV_ModStart> msgnum <= MAX_MSIX_TABLE_ENTRIES <S2SV_ModEnd> ) { return,0
223,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",1
224,<S2SV_ModStart> == NULL ) { retval = KRB5KDC_ERR_PREAUTH_FAILED ; <S2SV_ModStart> goto cleanup ; },0
225,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> select_tx_mode ( const <S2SV_ModStart> cpi ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; <S2SV_ModStart> else if ( frame_type <S2SV_ModEnd> == 0 ) <S2SV_ModStart> else if ( frame_type <S2SV_ModEnd> == USE_FULL_RD ) <S2SV_ModStart> else if ( frame_type <S2SV_ModEnd> == USE_FULL_RD ) <S2SV_ModStart> else if ( frame_type <S2SV_ModEnd> == FULL_FULL_RD ) <S2SV_ModStart> else if ( frame_type <S2SV_ModEnd> == FULL_32X32 ) <S2SV_ModStart> else if ( frame_type <S2SV_ModEnd> == FULL_32X32 ) <S2SV_ModStart> else if ( frame_type <S2SV_ModEnd> == FULL_32X32 ) <S2SV_ModStart> else if ( frame_type <S2SV_ModEnd> == FULL_32X32 ) <S2SV_ModStart> else if ( frame_type <S2SV_ModEnd> == FULL_32X32 ) <S2SV_ModStart> else if ( frame_type <S2SV_ModEnd> == FULL_32X32 ) <S2SV_ModStart> else if ( frame_type <S2SV_ModEnd> == FULL_32X32 ) <S2SV_ModStart> else if ( frame_type <S2SV_ModEnd> == FULL_32X32 ) <S2SV_ModStart> ; } } return 0 ;,0
226,,0
227,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> size < buf2 ) || ( buf1 -> size < buf2 -> size ) || ( buf1 -> size < buf2 -> size ) || ( buf1 -> size < buf2 -> size ) || ( buf1 -> size == buf2 -> size ) || ( buf1 -> size == buf2 -> size ) || ( buf1 -> size == buf2 -> size ) || ( buf1 -> size == buf2 -> size ) || ( buf1 -> size == buf2 -> size ) || ( buf1 -> size == buf2 -> size ) || ( buf1 -> size == buf2 -> size ) || ( buf1 -> size == buf2 -> size ) || ( buf1 -> size == buf2 -> size ) || ( buf1 -> size == buf2 -> size ) || ( buf1 -> size == buf2 -> size ) || ( buf1 -> size == buf2 -> size ) || ( buf1 -> size == buf2 -> size ) || ( buf1 -> size == buf2 -> size ) || ( buf1 -> size == buf2 -> size ) || ( buf1 -> size == buf2 -> size ) || ( buf1 -> size == buf2 -> size ) || ( buf,0
228,<S2SV_ModStart> ; size_t sz ; if ( size < sizeof ( * info ) ) return NULL ; sz <S2SV_ModStart> ) + size <S2SV_ModEnd> ; if (,0
229,"<S2SV_ModStart>, & init_net, kern",0
230,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs,",0
231,"<S2SV_ModStart> button_dispatch, b, 0",0
232,,0
233,<S2SV_ModStart> -> lun ) sas_eh_defer_cmd <S2SV_ModEnd> ( cmd ),0
234,"<S2SV_ModStart>, end_col_offset ; if ( TYPE ( CHILD ( n, name_i ) ) == RARROW ) return NULL ; <S2SV_ModStart> 2 ; } if ( TYPE ( CHILD ( n, name_i + 3 ) ) == RARROW ) return NULL ; <S2SV_ModStart> end_col_offset ) ; if ( is_async ) return AsyncFunctionDef ( name, args, body, decorator_seq, returns, LINENO ( n0 ), n0 -> n_col_offset, end_lineno, end_col_offset, end_col_offset, c -> c_arena ) ; else return FunctionDef ( name, args, body, decorator_seq, returns, end_col_offset, end_col_offset, end_col_offset, c -> c_arena ) ;",0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,<S2SV_ModStart> ) ) ; if ( WPG_Palette. StartIndex > WPG_Palette. StartIndex ) ThrowReaderException ( CorruptImageError ) ;,0
237,,1
238,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
239,<S2SV_ModStart> case SEEK_SET : <S2SV_ModEnd> if ( position <S2SV_ModStart> > psf -> header_end ) return ; if ( position > psf -> header_end ) return ; if ( position > psf -> header_end ) return ; if ( position > psf -> header_end ) return <S2SV_ModEnd> ; if ( <S2SV_ModStart> > psf -> header_end ) return <S2SV_ModEnd> ; if ( <S2SV_ModStart> < 0 ) return <S2SV_ModEnd> ; if ( <S2SV_ModStart> < 0 ) return <S2SV_ModEnd> ; if ( <S2SV_ModStart> < 0 ) return <S2SV_ModEnd> ; if ( <S2SV_ModStart> < 0 ) return <S2SV_ModEnd> ; if ( <S2SV_ModStart> < 0 ) return <S2SV_ModEnd> ; if ( <S2SV_ModStart> < 0 ) return <S2SV_ModEnd> ; if ( <S2SV_ModStart> < 0 ) return <S2SV_ModEnd> ; if ( <S2SV_ModStart> < 0 ) return <S2SV_ModEnd> ; if ( <S2SV_ModStart> < 0 ) return <S2SV_ModEnd> ; if ( <S2SV_ModStart> < 0 ) return <S2SV_ModEnd> ; if ( <S2SV_ModStart> < 0 ) return <S2SV_ModEnd> ; } <S2SV_null>,0
240,<S2SV_ModStart> u4_ofst ) ; ps_cabac -> au1_ctxt_models = ps_cabac -> u4_ofst ;,0
241,<S2SV_ModStart> ) ) { if ( c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && ctx -> ch!= _T ( '>' ) && ctx -> ch!= _T ( '>' ) && ctx -> ch!= _T ( '>' ) && ctx -> ch!= _T ( '>' ) && ctx -> ch!= _T ( '>' ) && ctx -> ch!= _T ( '>' ) && ctx -> ch!= _T ( '>' ) && ctx -> ch!= _T ( '>' ) && ctx -> ch!= _T ( '>' ) && ctx -> ch!= _T ( '>' ) && ctx -> ch!= _T ( '>' ) && ctx -> ch!= _T ( '>' ) && ctx -> ch!= _T (,0
242,<S2SV_ModStart> perf_event_context * ctx <S2SV_ModEnd> ; struct task_struct <S2SV_ModStart> event ) ; <S2SV_ModEnd> } raw_spin_unlock_irq (,0
243,<S2SV_ModStart> -> post_proc_flag = <S2SV_ModEnd> ctx -> postproc_cfg <S2SV_ModStart>. noise_level ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
244,<S2SV_ModStart> = 0 ; ND_TCHECK_16BITS ( ptr. common -> packet_len ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( ptr. common -> packet_len ) ;,0
245,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vpx_usec_timer_start ( & <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,1
246,"<S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" <S2SV_ModEnd> ) ; exit <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> _exit ( 0 <S2SV_ModStart> ( src, ""%s"", src <S2SV_ModEnd> ) ; return",0
247,<S2SV_ModStart> ; if ( ptr_hbe_txposer <S2SV_ModEnd> -> start_band >,0
248,"<S2SV_ModStart> lua_module ) ; ap_lua_run_lua_request ( L, r ) ; <S2SV_ModStart> r ) ; ap_lua_run_lua_request ( L, r ) ; <S2SV_ModEnd> return result ;",0
249,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> rows, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
250,<S2SV_ModStart> (! proto_end ||! url,0
251,<S2SV_ModStart> end = path ; if ( base < 0 ) return - FDT_ERR_BADSTRUCTURE,0
252,<S2SV_ModStart> ( server. <S2SV_ModEnd> clients ) ;,0
253,<S2SV_ModStart> channel ) ; <S2SV_ModEnd> set_description ( client,1
254,<S2SV_ModStart> book -> dim && i < n,1
255,,0
256,"<S2SV_ModStart> this_h ) { <S2SV_ModEnd> sf -> x_scale_fp <S2SV_ModStart> } else { if (! check_scale_factors ( other_w, other_w, this_w, this_h ) ) return ;",0
257,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
258,"<S2SV_ModStart> -> pktoptions ; memset ( & sk, 0, sizeof ( sk ) ) ;",0
259,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> sctp_v6_protosw_exit ( ) <S2SV_ModStart> ( ) ; unregister_pernet_subsys ( & sctp_net_ops ) ;,0
260,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void show_psnr (,0
261,<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen (,1
262,"<S2SV_ModStart> PRIX16 ""\\r\\n"", ksz8851ReadReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> PRIX16 ""\\r\\n"", ksz8851ReadReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, KSZ8851_MARM <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_MARM <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ( interface, KSZ8851_MARM <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ( interface, KSZ8851_MARM <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID",0
263,"<S2SV_ModStart> skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
264,"<S2SV_ModStart> ( fit, IMAGE_SIZE_INVALID <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( fit, IMAGE_SIZE_INVALID <S2SV_ModEnd> ) ; bootstage_error <S2SV_ModStart> ( fit, IMAGE_SIZE_INVALID <S2SV_ModEnd> ) ; }",0
265,"<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> uinput_fd, UI_DEV_DESTROY )",1
266,<S2SV_ModStart> ( rc -> avg_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_bandwidth <S2SV_ModEnd> * rc ->,0
267,<S2SV_ModStart> ) if ( strchr <S2SV_ModEnd> ( argv [,0
268,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
269,"<S2SV_ModStart> ib ] ; vpx_strict_quantize_b <S2SV_ModEnd> ( b, <S2SV_ModStart> ; # endif vpx_strict_quantize_b <S2SV_ModEnd> ( b,",0
270,<S2SV_ModStart> FN_REFLEN ] ; my_free ( opt_basedir ) ;,0
271,<S2SV_ModStart> decrypt_cb ) { size_t <S2SV_ModEnd> n = ( <S2SV_ModStart> n = ( size_t <S2SV_ModEnd> ) ( data_end,0
272,<S2SV_ModStart> getprivs_ret ret ; <S2SV_ModEnd> OM_uint32 minor_stat ; <S2SV_ModStart> errmsg ) ; <S2SV_ModEnd> free_server_handle ( handle,0
273,"<S2SV_ModStart> int * returnintra, int * returndistortion <S2SV_ModStart> CONFIG_TEMPORAL_DENOISING unsigned int <S2SV_ModEnd> zero_mv_sse = INT_MAX <S2SV_ModStart>, best_sse = INT_MAX <S2SV_ModEnd>, best_rd_sse = <S2SV_ModStart>, best_rd_sse = INT_MAX <S2SV_ModEnd>, best_rd_sse = <S2SV_ModStart>, best_rd_sse = INT_MAX <S2SV_ModEnd> ; # endif <S2SV_ModStart>, best_rd_sse = INT_MAX <S2SV_ModEnd> ; # else <S2SV_ModStart>, best_rd_sse = INT_MAX <S2SV_ModEnd> ; # endif <S2SV_ModStart>, best_rd_sse = INT_MAX <S2SV_ModEnd> ; # else <S2SV_ModStart>, best_rd_sse = INT_MAX <S2SV_ModEnd> ; # endif <S2SV_ModStart>, best_rd_sse = INT_MAX <S2SV_ModEnd> ; # else <S2SV_ModStart>, best_rd_sse = INT_MAX <S2SV_ModEnd> ; # endif <S2SV_ModStart>, best_rd_sse = INT_MAX <S2SV_ModEnd> ; # else <S2SV_ModStart>, best_rd_sse = INT_MAX <S2SV_ModEnd> ; # endif <S2SV_ModStart>, best_rd_sse = INT_MAX <S2SV_ModEnd> ; # else <S2SV_ModStart>, best_rd_sse = INT_MAX <S2SV_ModEnd>",0
274,<S2SV_ModStart> -> size = ( int ),0
275,"<S2SV_ModStart> ; UWORD8 u1_profile_idc = 0, u1_level_idc = 0, u1_seq_parameter_set_id = 0 <S2SV_ModEnd> ; UWORD16 i2_max_frm_num <S2SV_ModStart> i4_num_reorder_frames ++ ; if ( u2_pic_wd > 0 && u2_pic_ht > 0 && u2_pic_ht > 0 && u2_pic_ht > 0 && u2_pic_ht > 0 && u2_pic_ht > 0 && u2_pic_ht > 0 && u2_pic_ht > 0 && u2_pic_ht > 0 && u2_pic_ht > 0 && u2_pic_ht > 0 && u2_pic_ht > 0 && u2_pic_ht > 0 && u2_pic_ht > 0 && u2_pic_ht > 0 && u2_pic_ht > 0 && u2_pic_ht > 0 && u2_pic_ht > 0 && u2_pic_ht > 0 && u2_pic_ht > 0 && u2_pic_ht",0
276,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; <S2SV_ModEnd> if ( vp9_set_size_literal",0
277,"<S2SV_ModStart> out ) { uint32 <S2SV_ModEnd> bitspersample, samplesperpixel <S2SV_ModStart> ; uint16 input_compression = 0 ; uint32 input_photometric = 0 <S2SV_ModEnd> ; copyFunc cf <S2SV_ModStart> ( TIFFTAG_BITSPERSAMPLE, bitspersample <S2SV_ModEnd> ) ; if",0
278,"<S2SV_ModStart> a ) { <S2SV_ModEnd> char * pn <S2SV_ModStart> ; r = safe_lstat <S2SV_ModEnd> ( a -> <S2SV_ModStart> ) ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } else if ( S_ISDIR ( st. st_mode ) ) { archive_set_error ( & a -> archive, errno, ""Cannot <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } else if ( S_ISREG ( st. st_mode ) ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } else if ( S_ISREG ( st. st_mode ) ) { archive_set_error ( & a -> archive, errno, ""Cannot <S2SV_blank> remove <S2SV_blank>",0
279,<S2SV_ModStart> i_sb ) ; <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> ) { struct <S2SV_ModEnd> kernel_lb_addr loc ; <S2SV_ModStart> indirectICB. extLength <S2SV_ModEnd> ) { if,0
280,"<S2SV_ModStart> tx_size_uv = get_uv_tx_size ( mbmi ) ; memset ( & lfm -> lfl_y [ index ], filter_level, w",0
281,"<S2SV_ModStart> mq_ops ) { spin_lock <S2SV_ModEnd> ( & fq <S2SV_ModStart> mq_flush_lock, flags <S2SV_ModEnd> ) ; flush_rq",0
282,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) return ( uint32_t ) - 1 ;,0
283,"<S2SV_ModStart> { option = maTokenize <S2SV_ModEnd> ( option,",0
284,<S2SV_ModStart> ) sizeof ( effect_param_t <S2SV_ModEnd> ) ) {,0
285,<S2SV_ModStart> ++ ) { if ( key_data [ i ]. key_data_length [ j ] == 0 ) continue ;,0
286,"<S2SV_ModStart> 0x02 ) ; if (! <S2SV_ModStart>, crgram_len ) ) return - EINVAL",0
287,,0
288,<S2SV_ModStart> ; } } return 0 ;,0
289,<S2SV_ModStart> uchar * dataptr = NULL,0
290,<S2SV_ModStart> ; if ( recon_y_stride >= recon_y_stride ) { if ( <S2SV_ModStart> ) ; } },0
291,<S2SV_ModStart> ) ; } clone_info = DestroyImageList ( image ) ;,0
292,<S2SV_ModStart> len ) { <S2SV_ModEnd> char * buf <S2SV_ModStart> * p ; <S2SV_ModEnd> if ( len <S2SV_ModStart> s ++ ; <S2SV_ModEnd> } if ( <S2SV_ModStart> 10 ; } if <S2SV_ModEnd> ( p - <S2SV_ModStart> - buf <= len ) { Py_DECREF ( w ) ; return NULL ; } <S2SV_ModEnd> } else {,0
293,"<S2SV_ModStart> struct stat stb <S2SV_ModEnd> ; BUF * <S2SV_ModStart> wrerrno = 0, wrerrno = 0 <S2SV_ModStart> ) break ; if ( wrerrno == 0 ) break ;",0
294,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
295,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
296,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
297,<S2SV_ModStart> u1_num_mbsNby2 ++ ; ps_dec -> ps_cur_slice -> u1_total_mbs_coded = 0 ;,0
298,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> vterm_allocator_free ( screen,1
299,"<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & delay )",1
300,"<S2SV_ModStart> one, offset = 0",0
301,<S2SV_ModStart> value ) { sfree ( value ) ;,0
302,"<S2SV_ModStart>. cmp = key_type_match <S2SV_ModEnd>,. match_data",0
303,<S2SV_ModStart>! ntime ) <S2SV_ModEnd> goto out ; <S2SV_ModStart> goto out ; <S2SV_ModEnd> cg_wlock ( &,0
304,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
305,"<S2SV_ModStart> { PyObject * <S2SV_ModEnd> dict = _PyObject_GetAttrId <S2SV_ModStart> PyId___dict__ ) ; if ( _PyObject_GetAttrId ( self, & PyId___dict__ ) < 0 ) { return NULL ; } <S2SV_ModStart> = Py_BuildValue ( ""O()O"" <S2SV_ModEnd>, Py_TYPE ( <S2SV_ModStart> return Py_BuildValue ( ""O()O"" <S2SV_ModEnd>, Py_TYPE (",0
306,"<S2SV_ModStart> ) & desc, 0",0
307,<S2SV_ModStart> -> private_data ; <S2SV_ModEnd> u32 flags = <S2SV_ModStart> perf_event * ) <S2SV_ModEnd> ; switch ( <S2SV_ModStart> case PERF_EVENT_IOC_PERIOD : <S2SV_ModEnd> return perf_event_period ( <S2SV_ModStart> ret ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
308,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> * r, vpx_reader <S2SV_ModEnd> y_mode ) { <S2SV_ModStart> y_mode ) { <S2SV_ModEnd> if (!",0
309,<S2SV_ModStart> ; if ( sha -> ctx_len < block_size ) return - EINVAL ; if (,0
310,,0
311,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
312,<S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_is_fatal ( rv,0
313,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 0 ;,0
314,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ] ; const vpx_extra_bit <S2SV_ModEnd> * const b <S2SV_ModStart> b = & vpx_extra_bits <S2SV_ModEnd> [ t ] <S2SV_ModStart> ) ; } vpx_write_tree <S2SV_ModEnd> ( w,",0
315,"<S2SV_ModStart> struct vp9_write_bit_buffer wb <S2SV_ModEnd> ; struct vp9_write_bit_buffer <S2SV_ModStart> struct vp9_write_bit_buffer saved_wb ; memset ( & wb, 0, sizeof ( wb ) )",0
316,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
317,<S2SV_ModStart> struct ikev2_id id = { 0 },0
318,<S2SV_ModStart> cmpt ) ; <S2SV_ModEnd> return 0 ;,0
319,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
320,"<S2SV_ModStart> fft_jmp ; WORD32 xt0_0, xt1_0, xt1_0, xt1_0, xt1_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_0, xt2_",0
321,<S2SV_ModStart> mntent ) { <S2SV_ModEnd> mount_entry_on_generic ( mntent <S2SV_ModStart> mnt_dir ) ; return 0 ;,0
322,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
323,"<S2SV_ModStart> ( env, server_name <S2SV_ModEnd>, req_server_name (",0
324,"<S2SV_ModStart> endif int col_type = 0, prepare_retval = 0 <S2SV_ModEnd> ; MYSQL_BIND *",0
325,<S2SV_ModStart> need = 0 <S2SV_ModEnd> ; CELL first,0
326,"<S2SV_ModStart>, size_t len <S2SV_ModEnd> ) { const <S2SV_ModStart> val ) ) strlcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> < 0 ) strlcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> ""-Infinity"", len - 1",0
327,<S2SV_ModStart> ; if (! crng_init <S2SV_ModEnd> ) { if,0
328,"<S2SV_ModStart> LEX_ID ) { memcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> LEX_STR ) { memcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> len ) ; memcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""\'"" <S2SV_ModEnd> ) ; }",0
329,,1
330,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
331,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
332,,0
333,"<S2SV_ModStart> { parse_global_option ( CMD_PRINT_HELP <S2SV_ModEnd>, NULL, <S2SV_ModStart> { parse_global_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL, <S2SV_ModStart> ; parse_service_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL,",0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,<S2SV_ModStart> len ) ; if ( st -> st_skeyid_e_nss!= NULL ),0
336,<S2SV_ModStart> u4_size ) ; ps_op -> pu1_input_buffer [ u4_size ] = 0 ;,0
337,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char * print_string,0
338,<S2SV_ModStart> -> iface -> enc_alg <S2SV_ModEnd>. encode ( <S2SV_ModStart> -> iface -> enc_alg <S2SV_ModEnd>. encode (,0
339,<S2SV_ModStart> ; } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
340,<S2SV_ModStart> i < cols <S2SV_ModEnd> ; i ++,0
341,<S2SV_ModStart> ) ) { if ( i -> parent -> width > i -> parent -> height ) return - 1 ;,0
342,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
343,<S2SV_ModStart> = value ; ps_pps -> i4_sps_valid = value ;,0
344,<S2SV_ModStart> ) ) { if ( c == '\\0' ) break ;,0
345,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( sun_info. maptype == RMT_NONE ) sun_info. maptype = RMT_NONE ;",0
346,"<S2SV_ModStart> 0 ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 0600 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; return",1
347,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> BLOCK_8X8 : return vpx_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> BLOCK_16X8 : return vpx_mse16x8 <S2SV_ModEnd> ; case BLOCK_8X16 <S2SV_ModStart> BLOCK_8X16 : return vpx_mse8x16 <S2SV_ModEnd> ; default : <S2SV_ModStart> default : return vpx_mse16x16 <S2SV_ModEnd> ; } },1
348,,0
349,"<S2SV_ModStart> flags ) ; if ( vb -> vb. vb2_buf == NULL ) { dev_err ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; }",0
350,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
351,<S2SV_ModStart> -> serviceId == EXTRACT_32BITS <S2SV_ModEnd> && rxent ->,0
352,<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len < sizeof ( bss_desc ) ) return - EINVAL ;,0
353,<S2SV_ModStart> ++ ) { if ( sbuf == NULL ) break ;,0
354,<S2SV_ModStart> struct l2cap_conf_rfc rfc <S2SV_ModEnd> ; void * <S2SV_ModStart> sk ) ; <S2SV_ModEnd> break ; },0
355,"<S2SV_ModStart> { do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> r, MSG_WAITALL )",0
356,<S2SV_ModStart> -> u4_pic_decode_done = 0 <S2SV_ModEnd> ; ps_dec ->,0
357,<S2SV_ModStart>!= 0 ) <S2SV_ModEnd> mprAddItem ( app <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
358,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd>, nfs4_stateid * <S2SV_ModStart> -> type & fmode <S2SV_ModEnd> )!= open_flags <S2SV_ModStart> ( state, fmode <S2SV_ModEnd>, & deleg_cur <S2SV_ModStart> -> stateid, fmode <S2SV_ModEnd> ) ; ret",0
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,"<S2SV_ModStart>, int64_t * out_dist_sse <S2SV_ModEnd> ) { int <S2SV_ModStart> pd ) ; if ( xd -> mi [ 0 ] -> mbmi. ref_frame [ 0 ] == xd -> mi [ 0 ] -> mbmi. ref_frame [ 0 ] && xd -> mi [ 0 ] -> mbmi. ref_frame [ 1 ] == xd -> mi [ 0 ] -> mbmi. ref_frame [ 1 ] ) { x -> pred_sse [ ref ] = xd -> mi [ 0 ] -> mbmi. ref_frame [ 1 ] ; } else { x -> pred_sse [ ref ] = xd -> mi [ 0 ] -> mbmi. ref_frame [ 1 ] ; x -> pred_sse [ ref ] = xd -> mi [ 0 ] -> mbmi. ref_frame [ 1 ] ; } <S2SV_ModStart> ( void ) cpi -> fn_ptr [ bs ]. vf ( pd -> dst. buf, pd -> dst. buf, pd -> dst. stride, & sse ) ; if ( cpi -> speed > 4 ) x -> pred_sse [ ref ] =",0
361,<S2SV_ModStart> ; } } <S2SV_ModEnd> mincore_pte_range ( vma,0
362,<S2SV_ModStart> { if ( strlen ( username ) > PAM_MAX_RESP_SIZE ) { return ( PAM_BUF_ERR ) ; } if (,0
363,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> ) { return vpx_read_tree <S2SV_ModEnd> ( r,",1
364,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",1
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,<S2SV_ModStart> depth ++ ; if ( buf2 == NULL ) return ( NULL ) ;,0
367,,0
368,<S2SV_ModStart> ; # endif mono_finalizer_unlock ( ) ;,0
369,"<S2SV_ModStart> x_7 ; WORD32 <S2SV_ModEnd> x_8, x_9 <S2SV_ModStart> x_0 + x_2 ; n01 = x_1 + x_3 ; n20 = x_1 + x_3 ; n12 = x_1 + x_3 ; n12 = x_1 + x_3 ; n12 = x_1 - x_3 ; n12 = x_1 - x_3 ; n12 = x_1 - x_3 ; n12 = x_1 - x_3 ; n12 = x_1 - x_3 ; n12 = x_1 - x_3 ; n12 = x_1 - x_3 ; n12 = x_1 - x_3 ; n12 = x_1 - x_3 ; n12 = x_1 - x_3 ; n12 = x_1 - x_3 ; n12 = x_1 - x_3 ; n12 = x_1 - x_3 ; n12 = x_1 - x_3 ; n12 = x_1 - x_3 ; n12 = x_1 - x_3 ; n12 = x_1 - x_",0
370,<S2SV_ModStart> ( unlikely (! pmd_none_or_clear_bad ( pmd ) ) continue ; if ( unlikely ( <S2SV_ModStart> * pmd ) <S2SV_ModEnd> ) continue ;,0
371,"<S2SV_ModStart> ""Incorrect <S2SV_blank> parameters:\\n"" ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> ] ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> ] ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> fout ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> fout ) ; <S2SV_ModEnd> return 1 ;",0
372,"<S2SV_ModStart> i, result <S2SV_ModEnd> ; PyObject *",1
373,<S2SV_ModStart> vpx_codec_alg_priv * priv = NULL <S2SV_ModStart> priv ) { <S2SV_ModEnd> unsigned int i <S2SV_ModStart> VPX_CODEC_MEM_ERROR ; } if ( ctx -> cfg == NULL ) { return VPX_CODEC_MEM_ERROR ; } <S2SV_ModStart> enc ) { <S2SV_ModEnd> ctx -> priv <S2SV_ModStart> enc ) { <S2SV_ModEnd> ctx -> priv <S2SV_ModStart> ++ ) ; } priv -> cx_data = malloc ( priv -> cx_data_sz ) ; priv -> cx_data = malloc ( priv -> cx_data_sz ) ; priv -> cx_data = malloc ( priv -> cx_data_sz ) ; if ( priv -> cx_data_sz < 0 ) { return VPX_CODEC_MEM_ERROR ; } priv -> cx_data = malloc ( priv -> cx_data_sz ) ; priv -> cx_data = malloc ( priv -> cx_data_sz ) ; if ( priv -> cx_data_sz < 0 ) { return VPX_CODEC_MEM_ERROR ; } if ( priv -> cx_data_sz < 0 ) { return VPX_CODEC,0
374,<S2SV_ModStart> ++ ; } <S2SV_ModEnd> pixel -> freq,0
375,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx ->,0
376,<S2SV_ModStart> ) ) { if ( unlikely ( iinfo -> i_size < sizeof ( * iinfo ) ) ) goto out ;,0
377,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0",1
378,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int bad_format_imginfo (,0
379,"<S2SV_ModStart> ; UtRegisterTest ( ""DefragAllowedTest"", DefragAllowedTest ) ; UtRegisterTest (",0
380,<S2SV_ModStart> = object_length ; <S2SV_ModEnd> r = coolkey_add_object_to_list,0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,<S2SV_ModStart> p_frame ) ; <S2SV_ModEnd> if ( p_sys,0
384,<S2SV_ModStart> ; exit_mf : <S2SV_ModEnd> free_stream ( s,0
385,<S2SV_ModStart> + idx ) + 4,0
386,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
387,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
388,"<S2SV_ModStart> data_size ) { av_bufferRef * p = data ; if ( p == NULL ) { av_log ( ctx -> log_ctx, AV_LOG_WARNING, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> parsing <S2SV_blank> data <S2SV_blank> at <S2SV_blank> "" ""beginning <S2SV_blank> of <S2SV_blank> image.\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
389,<S2SV_ModStart> ; if ( NCH ( n ) == 2 ) return NULL ; if (,0
390,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = 16 ; unsigned char * mc_running_avg_y = mc_running_avg_y ; unsigned char * running_avg_y = mc_running_avg_y ; unsigned char * running_avg_y = running_avg_y ; unsigned char * running_avg_y = running_avg_y ; unsigned char * running_avg_y = running_avg_y ; unsigned char * running_avg_y = running_avg_y ; unsigned char * running_avg_y = running_avg_y ; unsigned char * running_avg_y = running_avg_y ; unsigned char * running_avg_y = running_avg_y ; unsigned char * running_avg_y = running_avg_y ; unsigned char * running_avg_y = running_avg_y ; unsigned char * running_avg_y = running_avg_y ; unsigned char * running_avg_y = running_avg,0
391,<S2SV_ModStart> reqPtr ) ; if ( reqPtr -> avail < reqPtr -> avail ) { return SOCK_MORE ; },0
392,<S2SV_ModStart> = uregs ; <S2SV_ModEnd> # if XTENSA_HAVE_COPROCESS,0
393,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
394,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> if ( xop <S2SV_ModStart> == XCOL_SOURCE_RECV_OP ) return ; <S2SV_ModEnd> remote_dev = xop <S2SV_ModStart> -> src_dev ; <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for""",0
395,"<S2SV_ModStart> ( header ) <S2SV_ModEnd> ext2_xattr_cache_insert ( new_bh <S2SV_ModStart> ext2_xattr_cache_insert ( new_bh, HDR ( new_bh )",0
396,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
397,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
398,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
399,"<S2SV_ModStart> AcquireQuantumMemory ( imsx <S2SV_ModEnd>, 1 )",0
400,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> Vpx_ref_frame_t * ) <S2SV_ModEnd> ; image2yuvconfig ( <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; memset ( frame, 0, sizeof ( frame ) ) ; <S2SV_ModStart> ( ctx -> pbi <S2SV_ModEnd>, ( VPX_REFFRAME",0
401,<S2SV_ModStart> u1_num_mbsNby2 ++ ; ps_dec -> ps_cur_slice -> u1_total_mbs_coded = 0 ;,0
402,"<S2SV_ModStart>, u4_y_offset ; UWORD8 u4_x_dst_offset = 0 ; UWORD8 u4_y_dst_offset = 0 ; <S2SV_ModStart>, u4_y_offset ; <S2SV_ModEnd> u4_pred_strd ; IMPEG2D_TRACE_MB_START <S2SV_ModStart>, u4_pred_strd ; <S2SV_ModEnd> IMEG2D_TRACE_MB_START ( ps_dec <S2SV_ModStart>, u4_pred_strd, u4_x_dst_offset, u4_y_dst_offset, u4_y_dst_offset, u4_y_dst_offset, u4_pred_strd, u4_pred_strd, u4_pred_strd, u4_pred_strd, u4_pred_strd, u4_pred_strd, u4_pred_strd, u4_pred_strd, u4_pred_strd, u4_pred_strd, u4_pred_strd, u4_pred_strd, u4_pred_strd, u4_pred",0
403,<S2SV_ModStart> VP9_LAST_FLAG ) { if ( cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ]. buf!= NULL ) { return 0 ; },0
404,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
405,"<S2SV_ModStart> tx_size = plane? <S2SV_ModEnd> get_uv_tx_size ( mbmi <S2SV_ModStart> ( mbmi ) : mbmi -> tx_size <S2SV_ModEnd> ; const BLOCK_SIZE <S2SV_ModStart> ) ) ; <S2SV_ModEnd> for ( r <S2SV_ModStart> ) ) ; <S2SV_ModEnd> visit ( plane <S2SV_ModStart>, arg ) <S2SV_ModEnd> ; } <S2SV_null>",0
406,"<S2SV_ModStart> ++ ) { memset ( dst, 0, sizeof ( * dst ) ) ;",0
407,<S2SV_ModStart> nrow ) { if ( row + img -> row_offset > ( row + img -> row_offset ) / rowsperstrip ) { <S2SV_ModStart> % rowsperstrip ; },0
408,<S2SV_ModStart> ; } } <S2SV_ModEnd> return 0 ;,0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
410,<S2SV_ModStart> num & ( 1U << <S2SV_ModEnd> number - 1 <S2SV_ModStart> number - 1 <S2SV_ModEnd> ) ) return,0
411,"<S2SV_ModStart>, plane ) - 1 <S2SV_ModStart>, file ) > <S2SV_ModEnd> w ) return",0
412,"<S2SV_ModStart> ; uint16_t attr_len = 0 <S2SV_ModStart> uint16_t last_block_len ; uint16_t <S2SV_ModEnd> last_block_len ; uint16_t <S2SV_ModStart> 1 ; } if ( avp -> length < sizeof ( struct l2tp_avp_t ) + sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", avp -> length, avp -> length ) ; return - 1 ; }",0
413,<S2SV_ModStart> case EVP_CTRL_AEAD_SET_IVLEN : if ( arg == 0 ) return 0 ;,0
414,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",0
415,"<S2SV_ModStart> ; BT_DBG ( ""sock <S2SV_blank> %p, <S2SV_blank> sk <S2SV_blank> %pK"" <S2SV_ModEnd>, sock,",0
416,"<S2SV_ModStart> MT_CPTYPE_PASSSALT ) { memcpy <S2SV_ModEnd> ( pass_salt,",0
417,<S2SV_ModStart> ) { goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } else <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } mutt_socket_close ( adata -> conn ) ; mutt_socket_close ( adata -> conn ) ; bail : mutt_socket_close ( adata -> conn ) ; mutt_socket_close ( adata -> conn ) ; mutt_socket_close ( adata -> conn ) ; mutt_socket_close ( adata -> conn ) ; mutt_socket_close ( adata -> conn ) ; mutt_socket_close ( adata -> conn ) ; mutt_socket_close ( adata -> conn ) ; mutt_socket_close ( adata -> conn ) ; mutt_socket_close,0
418,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
419,<S2SV_ModStart> 0 ) { close ( gpsd_sock ) ; return <S2SV_ModEnd> ; } <S2SV_null>,0
420,"<S2SV_ModStart>, & rlen, 0",1
421,"<S2SV_ModStart> ; read_userfile ( curconn <S2SV_ModStart> } # endif if ( ( user = find_user ( curconn -> username ) )!= NULL ) { <S2SV_ModStart> = 0 ; <S2SV_ModEnd> memcpy ( md5data <S2SV_ModStart>, 16 ) ; } else { <S2SV_ModEnd> memcpy ( md5data <S2SV_ModStart> state ) ; }",0
422,<S2SV_ModStart> ; if ( name &&,0
423,<S2SV_ModStart> ( buf ) <S2SV_ModEnd> && str [,0
424,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
425,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
426,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteFujiEntry ) ) ;",1
427,<S2SV_ModStart> bd_addr ) { btif_dm_remove_bond ( bd_addr ) ;,0
428,,0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
430,<S2SV_ModStart> ( epoll_ ) ; if ( count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ),0
431,"<S2SV_ModStart> { errstr = parse_global_option <S2SV_ModEnd> ( CMD_INITIALIZE,",0
432,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_DIR_MAX : * ( size_t * ) val = ms -> dir_max ; return 0 ;,0
433,<S2SV_ModStart> offset ) { struct page * p = page -> mapping -> host ; <S2SV_ModStart> = EXT4_JOURNAL ( p <S2SV_ModEnd> -> host ),0
434,<S2SV_ModStart> ++ ) { if (! writer ) return GF_OUT_OF_MEM ;,0
435,<S2SV_ModStart> ; int plen = 0 <S2SV_ModStart> ; # endif if ( password!= NULL ) { <S2SV_ModStart> = 0 ; },0
436,<S2SV_ModStart> ; if ( <S2SV_ModEnd> Prefix!= NULL,1
437,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
438,<S2SV_ModStart> ( ) ; g_hash_table_remove_all ( headers ) ;,0
439,"<S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst,",0
440,"<S2SV_ModStart> * cpi, <S2SV_ModEnd> TileInfo * const <S2SV_ModStart> int mi_col ; vpx_memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; vpx_memset <S2SV_ModEnd> ( xd <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ;",0
441,<S2SV_ModStart> ; int hexdump = 0,0
442,"<S2SV_ModStart> mbmi, const mbmi_int_mv <S2SV_ModEnd> mvs [ 2",0
443,,0
444,"<S2SV_ModStart>, 0, hdr_size <S2SV_ModEnd>, GFP_ATOMIC )",0
445,<S2SV_ModStart> ) return ; <S2SV_ModEnd> DEBUGMSGTL ( ( <S2SV_ModStart> entry ) { <S2SV_ModEnd> entry = strtok_r <S2SV_ModStart> st ) ; },0
446,"<S2SV_ModStart> { fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ], O_RDWR ) <S2SV_ModStart> 1 ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_KEY ) ) <S2SV_ModStart> x ++ ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> [ x ] )",0
447,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
448,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s +",0
449,"<S2SV_ModStart> iakerb_ctx_id_t * pctx, krb5_error_code code ) { <S2SV_ModEnd> krb5_gss_init_context ( &",0
450,"<S2SV_ModStart> screen -> rows, screen -> rows",0
451,<S2SV_ModStart> ; while ( ( <S2SV_ModStart> )!= START_CODE_PREFIX ) && ( ps_stream -> u4_offset < ps_stream -> u4_max_offset ),1
452,<S2SV_ModStart> return - EINVAL <S2SV_ModEnd> ; if (,0
453,<S2SV_ModStart> } if ( mono_class_inflated_generic_inst <S2SV_ModEnd> ( klass ),0
454,<S2SV_ModStart> ; int tmp ; if (! count ) return - EINVAL,0
455,"<S2SV_ModStart>, * wp <S2SV_ModEnd> ; do { <S2SV_ModStart> size_t len ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> 'O' )? _dl_platform : _dl_platform <S2SV_ModEnd> ; if (",0
456,<S2SV_ModStart> decContainer_t * ) H264SwDecMalloc0 <S2SV_ModEnd> ( sizeof (,0
457,<S2SV_ModStart> drop ; } <S2SV_ModEnd> opt -> optlen,0
458,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
459,<S2SV_ModStart> goto errout ; if ( info -> stagebook >= ci -> books ) goto errout ;,0
460,<S2SV_ModStart> krb5_key_data * key_data = NULL <S2SV_ModStart> err ) ; <S2SV_ModEnd> memcpy ( key_data,0
461,"<S2SV_ModStart> Py_ssize_t idx, Py_ssize_t <S2SV_ModEnd> value ) {",0
462,<S2SV_ModStart> ] ) ; sqlite3_free ( pCsr ) ;,0
463,<S2SV_ModStart> filp ) { __sock_release <S2SV_ModEnd> ( SOCKET_I (,0
464,<S2SV_ModStart> asdl_seq * orelse <S2SV_ModEnd> ) { stmt_ty,0
465,,0
466,,0
467,"<S2SV_ModStart> UINT error ; UINT16 <S2SV_ModEnd> ( s, <S2SV_ModStart> eventId ) ; UINT16 <S2SV_ModEnd> ( s,",0
468,"<S2SV_ModStart> -> socket, ""%s"",",0
469,"<S2SV_ModStart> struct flowi6 fl6 ; memset ( & fl6, 0, sizeof ( fl6 ) )",0
470,<S2SV_ModStart> ; MATLAB_KO : if ( image2 == NULL ),0
471,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
472,"<S2SV_ModStart> ; int len = 0, result = RLC_OK ; bn_t t ; bn_t t ; bn_t t ; bn_null ( t ) ; switch ( operation ) { case RSA_ENC : bn_zero ( m ) ; bn_lsh ( m, m, 8 ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, 0 ) ; bn_add_dig ( m, m, 0 ) ; bn_lsh ( m, m, 0 ) ; bn_lsh ( m, m, 0 ) ; bn_lsh ( m, m, 0 ) ; bn_add_dig ( m, m, 0 ) ; bn_lsh ( m, m, 0 ) ; bn_lsh ( m, m, 0 ) ; bn_mod_2b ( m, m, ( k_len - 1 ) * 8 ) ; bn_mod_2b ( m, m, ( k_len - 1 ) * 8 ) ; bn_mod_2b ( m, m, ( k_len -",0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,"<S2SV_ModStart> ( psf = safe_calloc <S2SV_ModEnd> ( 1,",0
475,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fix_interp_filter ( VP9_COMMON <S2SV_ModStart> cm ) { if ( cm -> interp_filter == NULL ) return - 1 ; <S2SV_ModStart> i ] += cm -> counts. switchable_interp [ j ] [ i ] ; if ( cm -> interp_filter == NULL ) return - 1 <S2SV_ModEnd> ; c += <S2SV_ModStart> } } } return 0 ;,0
476,"<S2SV_ModStart> cpi ) { MACROBLOCK * const x = & cpi -> common ; MACROBLOCKD * const xd = & x -> e_mbd ; const int aligned_mi_cols = mi_cols_aligned_to_sb ( cm -> mi_cols ) ; x -> act_zbin_adj = 0 ; vpx_setup_src_planes ( x, cpi -> Source, 0, 0 ) ; vpx_setup_dst_planes ( x, 0, get_frame_new_buffer ( cm ), 0, 0 ) ; vpx_setup_dst_planes ( xd, 0, 0, 0 ) ; vpx_setup_block_planes ( xd, 0, get_frame_new_buffer ( cm ), 0, 0 ) ; vpx_setup_block_planes ( xd, 0, 0 ) ; vpx_memset ( xd -> above_context [ 0 ], 0, sizeof ( * xd -> above_context ) * MAX_MB_PLANE ) ; vpx_memset ( xd -> above_seg_context, 0, sizeof ( * xd",0
477,<S2SV_ModStart> hp ) ; if ( retval!= 0 ) { <S2SV_ModStart> ) ; } },0
478,"<S2SV_ModStart> define EOFOp 0x07 <S2SV_ModEnd> char magick [ <S2SV_ModStart> ) ) ; if ( count!= 2 ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
479,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> sizeof ( tETH_HDR ),1
480,<S2SV_ModStart> -> ps_cur_slice_idx = ps_dec -> ps_cur_slice_idx <S2SV_ModEnd> ; ps_dec ->,0
481,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> * karg ; <S2SV_ModEnd> int iocnum ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> return PTR_ERR (",0
482,"<S2SV_ModStart> -> columns, 3 <S2SV_ModEnd> * sizeof (",0
483,"<S2SV_ModStart> } else { ERROR <S2SV_ModEnd> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", <S2SV_ModStart> } else { ERROR <S2SV_ModEnd> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"",",0
484,"<S2SV_ModStart> ; if ( buf_size < 2 ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if (",0
485,<S2SV_ModStart> ; if ( pix!= NULL ) { if ( <S2SV_ModStart> ) ; } },0
486,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
487,<S2SV_ModStart> void ) { if ( mnemonic ),0
488,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ;",0
489,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> rows, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
490,<S2SV_ModStart> { WORD32 i ; WORD32 ai4_max_poc_lsb ; WORD32 u4_max_poc_lsb ; WORD32 u4_max_poc_lsb ; WORD32 u4_max_poc_lsb ; WORD32 u4_max_poc_lsb ; WORD32 u4_max_poc_lsb ; u4_max_poc_lsb = ps_mv_buf_mgr -> ps_mv_buf_mgr -> ps_mv_buf_mgr -> ps_mv_buf_mgr -> ps_mv_buf_mgr -> ps_mv_buf_mgr -> ps_mv_buf_mgr -> ps_mv_buf_mgr -> ps_mv_buf_mgr -> ps_mv_buf_mgr -> ps_mv_buf_mgr -> ps_mv_buf_mgr -> ps_mv_buf_mgr -> ps_mv_buf_mgr -> ps_mv_buf_mgr -> ps,0
491,"<S2SV_ModStart>, int fmt, int len <S2SV_ModStart> child ) { <S2SV_ModEnd> children [ i <S2SV_ModStart> child -> string, len <S2SV_ModStart> = 1 ; <S2SV_ModEnd> if ( str <S2SV_ModStart> if (! out ) { out = ( char * ) cJSON_malloc ( len ) ; if (! out ) { out = ( char * ) cJSON_malloc ( len ) ; if (! out ) return 0 ; out = ( char * ) cJSON_malloc ( len ) ; if ( out ) * ptr ++ = '\\n' ; * ptr ++ = '\\n' ; * ptr ++ = '\\n' ; * ptr = 0 ; for ( i = 0 ; i < depth ; ++ i ) { if ( fmt ) for ( j = 0 ; j < depth ; ++ j ) * ptr ++ = 0 ; for ( j = 0 ; j < depth ; ++ j ) * ptr ++ = 0 ; for ( i = 0 ; j < depth ; ++ j ) * ptr ++ = 0 ; for ( j = 0 ; j < depth ; ++ j ) * ptr ++ = 0 ; for ( i = 0 ; j < depth ; ++ j ) * ptr ++ = 0 ; for ( i = 0 ; j < depth ;",0
492,<S2SV_ModStart> ; other = unix_dgram_peer_get <S2SV_ModEnd> ( sk ) <S2SV_ModStart> { if ( unix_dgram_peer_get <S2SV_ModEnd> ( other ) <S2SV_ModStart> } if ( unix_dgram_peer_get <S2SV_ModEnd> ( other ),0
493,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; sendClean ( outputbuffer ) ;",1
494,<S2SV_ModStart> ( OM_uint32 ) KRB5_BAD_MSIZE <S2SV_ModEnd> ; return GSS_S_DEFECTIVE_TOKEN,0
495,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> ( args, vpx_ref_frame_t <S2SV_ModEnd> * ) ;",0
496,<S2SV_ModStart> plug ) ; <S2SV_ModEnd> put_ioctx ( ctx,0
497,,0
498,"<S2SV_ModStart> s } ; <S2SV_ModEnd> uECC_word_t carry ; <S2SV_ModStart> curve ) ; if ( uECC_vli_isZero ( p, num_n_bits ) ) { return 0 ; }",0
499,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|dao-truncated]"" <S2SV_ModEnd> ) ) ;",0
500,<S2SV_ModStart> ; } else if ( pool -> free_total < pool -> free_total ) { return ; } else,0
501,<S2SV_ModStart> cp ) { cp ++ ; <S2SV_ModStart> cp ++ ; <S2SV_ModEnd> } else if <S2SV_ModStart> cp ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
503,"<S2SV_ModStart> PIX * pixc <S2SV_ModEnd>, * pixd <S2SV_ModStart> == NULL ) { <S2SV_ModStart> NULL ) ; }",0
504,"<S2SV_ModStart> = 256 ; memset ( xd, 0, sizeof ( xd ) ) ;",0
505,<S2SV_ModStart> * data ; size_t overhead ; size_t <S2SV_ModEnd> size = overhead,0
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
507,"<S2SV_ModStart> i, target_bits_per_mb = 0",0
508,<S2SV_ModStart> ; value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1101WritePhyReg (,0
509,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
510,"<S2SV_ModStart> int dst_stride, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart> plane ] ; memset <S2SV_ModEnd> ( left_col,",0
511,<S2SV_ModStart> ++ ; } <S2SV_ModEnd> } if (,0
512,<S2SV_ModStart> i_completed_io_list ) ; <S2SV_ModEnd> ei -> i_sync_tid,0
513,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> KEY_FRAME ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> profile == PROFILE_1 <S2SV_ModEnd> ) ; if <S2SV_ModStart> profile ==",0
514,"<S2SV_ModStart> ) ; } if ( bad_path ( argv [ 0 ], argv [ 1 ], argv [ 1 ], argv [ 1 ], argv [ 1 ], argv [ 1 ], argv [ 1 ], argv [ 1 ], argv [ 1 ], argv [ 1 ], argv [ 1 ], argv [ 1 ], argv [ 1 ], argv [ 1 ], argv [ 1 ], argv [ 1 ], argv [ 1 ], argv [ 1 ], argv [ 1 ], argv [ 1 ], argv [ 1 ], argv [ 1 ], argv [ 1 ], argv [ 1 ], argv [ 1 ], argv [ 1 ], argv [ 1 ], argv [ 1 ], argv [ 1 ], argv [ 1 ], argv [ 1 ], argv [ 1 ], argv [ 1 ], argv [ 1 ], argv [ 1 ], argv [ 1 ], argv [ 1 ], argv [ 1 ], argv [ 1 ], argv [ 1 ], argv [ 1",0
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { q = osStrchr <S2SV_ModEnd> ( p +,1
516,<S2SV_ModStart> ; if ( NCH ( n ) &&,0
517,<S2SV_ModStart> KEY_FRAME ) { memcpy <S2SV_ModEnd> ( xd -> <S2SV_ModStart> pc ) ; memcpy <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memcpy <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( xd ->,0
518,,0
519,"<S2SV_ModStart> VALUE read_memory ( VALUE klass, VALUE <S2SV_ModEnd> content ) { <S2SV_ModStart> xmlSchemaPtr schema ; VALUE rb_schema ; VALUE errors = rb_ary_new ( ) ; <S2SV_ModStart> xmlSchemaPtr schema ; <S2SV_ModEnd> VALUE errors = <S2SV_ModStart> errors ) ; <S2SV_ModEnd> xmlSetStructuredErrorFunc ( NULL",0
520,<S2SV_ModStart> break ; case CONF_RELOAD : case CONF_RELOAD : case CONF_RELOAD : case CONF_RELOAD : case CONF_RELOAD : case CONF_RELOAD : case CONF_RELOAD : case CONF_RELOAD : case CONF_RELOAD : case CONF_RELOAD : case CONF_RELOAD : case CONF_RELOAD : case CONF_RELOAD : case CONF_RELOAD : case CONF_RELOAD : case CONF_RELOAD : case CONF_RELOAD : case CONF_RELOAD : case CONF_RELOAD : case CONF_RELOAD : case CONF_RELOAD : case CONF_RELOAD : case CONF_RELOAD : case CONF_RELOAD : case CONF_RELOAD : case CONF_RELOAD : case CONF_RELOAD : case CONF_RELOAD : case CONF_RELOAD : case CONF_RELOAD : case CONF_RELOAD : case CONF_RELOAD : case CONF_RELOAD : case CONF_RELOAD : case CONF_RELOAD : case CONF_RELOAD,0
521,<S2SV_ModStart> ; out += 3 <S2SV_ModEnd> ; } state <S2SV_ModStart> ; out += 3 <S2SV_ModEnd> ; } state,1
522,<S2SV_ModStart> err = - <S2SV_ModEnd> EALREADY ; if,0
523,<S2SV_ModStart> POLL_IN ) ; <S2SV_ModEnd> handle -> event <S2SV_ModStart> pending ) ; <S2SV_ModEnd> perf_event_wakeup ( handle,0
524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> * s, size_t <S2SV_ModEnd> len, wchar_t",0
525,"<S2SV_ModStart> { print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" <S2SV_ModEnd> ) ; if",0
526,,0
527,"<S2SV_ModStart> * c, <S2SV_ModEnd> asdl_seq * decorator_seq <S2SV_ModStart> is_async ) { <S2SV_ModEnd> expr_ty returns = <S2SV_ModStart>, type_comment, <S2SV_ModEnd> n -> n_col_offset",0
528,<S2SV_ModStart> int i ; struct mm_struct * mm = mm -> mm ; <S2SV_ModStart> ; out : mm -> mm = mm ;,0
529,"<S2SV_ModStart> ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> received <S2SV_blank> packet <S2SV_blank> data <S2SV_blank> packet"" ) ;",0
530,,0
531,<S2SV_ModStart> row < height && col < width,0
532,<S2SV_ModStart> len < needed ||! nl,0
533,<S2SV_ModStart> ) ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
534,<S2SV_ModStart> ( bfqq ) bfq_idle_slice_timer_body <S2SV_ModEnd> ( bfqq ),0
535,<S2SV_ModStart> ; length += <S2SV_ModEnd> update_prepare_bounds ( context,0
536,,0
537,<S2SV_ModStart> plane < MAX_MB_PLANE && plane < 0,0
538,"<S2SV_ModStart> * cpi, <S2SV_ModEnd> int mi_row, <S2SV_ModStart> ( cpi, x <S2SV_ModEnd>, mi_row, <S2SV_ModStart> ( cpi, x <S2SV_ModEnd>, mi_row, <S2SV_ModStart>, x, x <S2SV_ModEnd>, mi_row,",0
539,<S2SV_ModStart> * err = safe_superblockRead <S2SV_ModEnd> ( & reader,0
540,<S2SV_ModStart> -> ranges = safe_calloc <S2SV_ModEnd> ( sizeof (,0
541,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flags & VP8_EFLAG_NO_UPD_GF <S2SV_ModStart> flags & VP8_EFLAG_FORCE_GF <S2SV_ModEnd> ) { ctx,0
542,<S2SV_ModStart> ) ) ; quantum_info = DestroyImageList ( quantum_info ) ;,0
543,<S2SV_ModStart>! head ) <S2SV_ModEnd> return - EINVAL <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
544,"<S2SV_ModStart> * ndo, u_int <S2SV_ModEnd> atype, const <S2SV_ModStart> * pptr, u_int <S2SV_ModEnd> len ) { <S2SV_ModStart> * pptr, u_int <S2SV_ModEnd> len ) {",0
545,<S2SV_ModStart> ) ; } if ( buf ),0
546,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
547,"<S2SV_ModStart> ( constr1, <S2SV_ModEnd> strlen ( strlen",0
548,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> header -> bLength <S2SV_ModStart> header -> bLength > sizeof ( struct usb_interface_cache ) ) { dev_err ( ddev, ""invalid <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> interface <S2SV_blank> index <S2SV_blank> %d\\n"", header -> bLength ) ; return - EINVAL ; } if ( header -> bLength > sizeof ( struct usb_interface_cache ) ) { dev_err ( ddev, ""invalid <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> interface <S2SV_blank> index <S2SV_blank> %d\\n"", header -> bLength ) ; return - EINVAL ; } if ( header -> bLength > sizeof ( struct usb_interface_cache ) ) { dev_err ( ddev, ""invalid <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> interface <S2SV_blank> index <S2SV_blank> %d\\n"", header -> bLength ) ; return - EINVAL ; } if ( header -> bLength > sizeof ( struct usb_interface_cache ) ) { dev_err ( ddev, ""invalid <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> interface <S2SV_blank> index <S2SV_blank> %d\\n"", header -> bLength ) ; return - EINVAL ; } if ( header -> bLength > sizeof ( struct usb_interface_",0
549,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",0
550,<S2SV_ModStart> ; distortion = vpx_variance16x16 <S2SV_ModEnd> ( * (,1
551,"<S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd>, ECON2_ETHEN | <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; temp <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; temp <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; temp <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; temp <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; temp <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; temp <S2SV_ModStart> ( interface",0
552,<S2SV_ModStart> * start ; if ( psf -> header == NULL ) return ;,0
553,<S2SV_ModStart> -> alg_priv ) { <S2SV_ModStart> alg_priv ) ; },0
554,<S2SV_ModStart> { sf -> frame_depth = 0 ; sf -> <S2SV_ModStart> -> use_square_partition_only = 1 <S2SV_ModEnd> ; sf -> <S2SV_ModStart> ; sf -> <S2SV_ModEnd> less_rectangular_check = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> tx_size_search_method = vp9_frame_is_boosted <S2SV_ModStart> ; sf -> <S2SV_ModEnd> auto_mv_step_size = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> adaptive_rd_thresh = 2 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> mode_skip_start = 10 <S2SV_ModStart> 2 ) { sf -> <S2SV_ModEnd> adaptive_pred_interp_filter = 1 <S2SV_ModStart> 2 ) { sf -> <S2SV_ModEnd> adaptive_pred_interp_filter = 1 <S2SV_ModStart> 2 ) { sf -> <S2SV_ModEnd> adaptive_pred_interp_filter = 1 <S2SV_ModStart> 2 ) { sf -> <S2SV_ModEnd> adaptive_pred_interp_filter = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> adaptive_pred_interp_filter = 1 <S2SV_ModStart> 2 ) { sf -> <S2SV_ModEnd> adaptive_pred_interp_filter = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> adaptive_pred_interp_filter = 1 <S2SV_ModStart> 2 ) { sf -> <S2SV_ModEnd> adaptive_pred,0
555,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
556,<S2SV_ModStart> 2 * EXTRA_STACK ; if ( inuse < 0 ) return,0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,"<S2SV_ModStart> * s = _PyUnicode_AsString <S2SV_ModEnd> ( CHILD ( <S2SV_ModStart>, 0 ) <S2SV_ModEnd> ) ; char",0
559,<S2SV_ModStart> } if ( option_name == NULL ) return VPX_CODEC_INVALID_PARAM ; if ( <S2SV_ModStart> break ; } <S2SV_ModEnd> if ( strcmp <S2SV_ModStart> break ; } <S2SV_ModEnd> if ( strcmp <S2SV_ModStart> break ; } <S2SV_ModEnd> if ( strcmp <S2SV_ModStart> break ; } <S2SV_ModEnd> if (!,0
560,<S2SV_ModStart> ) ; } fclose ( mvs ) ;,0
561,<S2SV_ModStart> { Py_ssize_t i <S2SV_ModEnd> ; for (,0
562,,1
563,"<S2SV_ModStart> ( dbh, imp_dbh -> pmysql <S2SV_ModEnd>, mysql_error (",0
564,<S2SV_ModStart> SOCK_THREAD_FD_EXCEPTION ) ||! <S2SV_ModStart> size ) ) { <S2SV_ModStart> & slot_lock ) ; } <S2SV_ModEnd> } else { <S2SV_ModStart> ( need_close ||!,0
565,<S2SV_ModStart> struct ieee_802_11_phdr phdr = { 0 },0
566,<S2SV_ModStart> ; sh = safe_calloc <S2SV_ModEnd> ( hdrlen +,0
567,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void nsc_encode_argb_to_aycocg (,0
568,<S2SV_ModStart> > nr_parens ) { kfree_array ( inverts ) ; <S2SV_ModStart> EINVAL ) ; },0
569,<S2SV_ModStart> ) { const RATE_CONTROL <S2SV_ModEnd> * rc = <S2SV_ModStart> = ( ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> = ( ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> ; if ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> < cpi -> <S2SV_ModStart> -> frames_since_key < cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> ) { kf_boost <S2SV_ModStart> -> frames_since_key / cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> ) ; },0
570,"<S2SV_ModStart> TX_MODE read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r )",1
571,"<S2SV_ModStart> : # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> } # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr",0
572,<S2SV_ModStart> -> cpi ; <S2SV_ModEnd> TOKENEXTRA * * <S2SV_ModStart> -> plane_type ; <S2SV_ModEnd> const int segment_id <S2SV_ModStart> COEFF_CONTEXTS ] = cpi -> common. fc. coef_probs [ tx_size ] [ ref ] ; vpx_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] = cpi -> common. counts. eob_branch [ tx_size ] [ ref ] ; vpx_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] = cpi -> common. counts. eob_branch [ tx_size ] [ ref ] ; vpx_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] = cpi -> common. counts. eob_branch [ tx_size ] [ ref ] ; vpx_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] = cpi -> common. counts. eob_branch [ tx_size ] [ ref ] ; vpx_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] =,0
573,<S2SV_ModStart> pSelect -> pSrc ; assert ( pWalker -> pParse -> db -> mallocFailed ),0
574,<S2SV_ModStart> ; serv = svc_create <S2SV_ModEnd> ( & nfs4_callback_program,0
575,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
576,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
577,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
578,"<S2SV_ModStart> { do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> s, 0 )",0
579,<S2SV_ModStart> ( xIter = xml_get_child_attr <S2SV_ModEnd> ( xml ) <S2SV_ModStart> ( xIter = xml_get_child_attr <S2SV_ModEnd> ( xml ),0
580,<S2SV_ModStart> <S2SV_null> static const SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> return ( const SvcInternal_t <S2SV_ModEnd> * ) svc_ctx,1
581,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
582,<S2SV_ModStart> [ 80 ] = { 0 },0
583,"<S2SV_ModStart> buf ; { <S2SV_ModEnd> readobjnam ( buf <S2SV_ModStart> ( buf, <S2SV_ModEnd> 0 ) ;",0
584,"<S2SV_ModStart> long long directory_table_end = 0, table_start = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( fd, <S2SV_ModEnd> s, no_xattrs <S2SV_ModStart> read_uids_guids ( & <S2SV_ModEnd> table_start ) == <S2SV_ModStart> parse_exports_table ( & <S2SV_ModEnd> directory_table_end ) == <S2SV_ModStart> read_fragment_table ( & <S2SV_ModEnd> directory_table_end ) == <S2SV_ModStart> read_directory_table ( & <S2SV_ModEnd> directory_table_start, directory_table_end",0
585,"<S2SV_ModStart> rule * rule, u_int len <S2SV_ModStart> count = 0 ; env -> len = len",0
586,<S2SV_ModStart> -> seg ; <S2SV_ModEnd> if ( cm <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
587,"<S2SV_ModStart>, Module_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Module_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Module_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, stmt_attributes, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, stmt_attributes, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, stmt_attributes, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, stmt_type, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, stmt_type, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, stmt_type, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, stmt_type, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>,",0
588,<S2SV_ModStart> S_IWGRP | S_IROTH | S_IWUSR,0
589,<S2SV_ModStart> ) ; } <S2SV_ModEnd> ++ x -> <S2SV_ModStart> m ] ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
590,"<S2SV_ModStart> cinput ) { <S2SV_ModEnd> char * s <S2SV_ModStart>, * t <S2SV_ModEnd> ; setDefaults ( <S2SV_ModStart> t ++ ; outputbuffer = malloc ( sizeof ( outputbuffer ) ) ; if ( outputbuffer == NULL ) return ( - 1 ) ; <S2SV_ModStart> t ++ ; outputbuffer = malloc ( sizeof ( outputbuffer ) ) ; if ( outputbuffer == NULL ) return ( - 1 ) ; <S2SV_ModStart> t, TERMCHAR ) ; free ( outputbuffer",0
591,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj,",0
592,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
593,"<S2SV_ModStart>! nfp_abm_u32_check_knode ( alink <S2SV_ModEnd>, knode, <S2SV_ModStart>! match ) goto err_delete <S2SV_ModEnd> ; list_add ( <S2SV_ModStart> return 0 ; err_delete : kfree ( match ) ; return err_delete <S2SV_ModEnd> ; } <S2SV_null>",0
594,<S2SV_ModStart> ) ; } <S2SV_ModEnd> stream -> config <S2SV_ModStart> stats ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
595,"<S2SV_ModStart> goto out ; if ( g_str_has_prefix ( name ) ) { g_key_file_append_from_data ( keyfile, tmpfile_name ) ; g_key_file_append_from_data ( keyfile, tmpfile_name ) ; }",0
596,"<S2SV_ModStart> data_end ) { <S2SV_ModEnd> const uint8_t * <S2SV_ModStart> end = NULL <S2SV_ModEnd> ; assert ( <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) * aligned_cols, sizeof ( * cm -> above_seg_context ) * MAX_MB_PLANE * 2 * sizeof ( * cm -> above_seg_context ) ) ; memcpy <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) * aligned_cols, sizeof ( * cm -> above_seg_context ) * MAX_MB_PLANE * 2 * sizeof ( * cm -> error )",0
597,<S2SV_ModStart> vp9_decoder_create ( const VP9_CONFIG <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> ) { VP9_COMMON <S2SV_ModEnd> * const cm <S2SV_ModStart> = 1 ; <S2SV_ModEnd> vp9_rtcd ( ) <S2SV_ModStart> current_video_frame = 0 <S2SV_ModEnd> ; pbi -> <S2SV_ModStart> = 1 ; <S2SV_ModEnd> vp9_init_dequantizer ( cm,0
598,"<S2SV_ModStart>, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; GF_FREE ( ( ( GF_DataInformationBox * ) s",0
599,<S2SV_ModStart> req ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
600,"<S2SV_ModStart> tree2tok ( struct vpx_token <S2SV_ModEnd> * tokens, <S2SV_ModStart> ; do { vpx_tree_index <S2SV_ModEnd> j = tree",0
601,"<S2SV_ModStart> ( img ) { <S2SV_ModStart> ctx, img, pts <S2SV_ModStart> VPX_CODEC_INVALID_PARAM ; } }",0
602,"<S2SV_ModStart>, & len, 0",1
603,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
604,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int frame_max_bits (,0
605,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
606,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_superblock ( VP9_COMMON <S2SV_ModStart> * cpi, MACROBLOCK * const x, MACROBLOCK * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBL",0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
608,"<S2SV_ModStart> range_max ) { uint32_t <S2SV_ModEnd> position, zeroes <S2SV_ModStart> gbc ) ; uint32_t <S2SV_ModStart> gbc ) ; if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> } if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( <S2SV_ModStart> ) ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } else { av_log ( ctx -> log_ctx,",0
609,<S2SV_ModStart> else if ( isalnum <S2SV_ModEnd> ( c ) <S2SV_ModStart> else if ( isalnum <S2SV_ModEnd> ( c ) <S2SV_ModStart> else if ( isalnum <S2SV_ModEnd> ( c ),0
610,"<S2SV_ModStart>, packet -> http_content_len <S2SV_ModEnd>. ptr =",0
611,"<S2SV_ModStart>, y, MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> x ), MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart>, dds_info, MagickMin <S2SV_ModEnd> ( 4,",0
612,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL )",0
613,,0
614,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; sendClean ( outputbuffer ) ;",1
615,"<S2SV_ModStart> ( AUTODETECT_TAG, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" <S2SV_ModEnd> ) ; Stream_Read_UINT32",0
616,<S2SV_ModStart> # if ( CONFIG_MULTITHREAD <S2SV_ModEnd> & CONFIG_MULTITHREAD ),0
617,<S2SV_ModStart> # if CONFIG_MULTITHREAD <S2SV_ModEnd> vp8_decoder_remove_threads ( pbi,1
618,<S2SV_ModStart> xWantedSize > 0 && ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0 ),0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,<S2SV_ModStart> s ) { int num_updates ; int num_updates ; int num_updates ; int num_updates ; int num_updates ; int num_updates ; int num_updates ; int num_updates ; int num_updates ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ;,0
621,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
622,"<S2SV_ModStart> tx_size, vpx_coeff_stats <S2SV_ModEnd> coef_branch_ct ) { <S2SV_ModStart> tx_size ] ; vpx_coeff_probs_model <S2SV_ModEnd> coef_counts = cpi",0
623,<S2SV_ModStart> ( name ) ; if (! fd ) return log_warning_errno,0
624,,0
625,"<S2SV_ModStart> * iface, vpx_codec_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> else if ( cfg && <S2SV_ModStart> caps & VPX_CODEC_CAP_PSNR <S2SV_ModEnd> ) res =",0
626,"<S2SV_ModStart> int stride, tran_low_block_size <S2SV_ModEnd>, int mv_row <S2SV_ModStart> const kernel = vpx_get_interp_kernel <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ; if ( tran_low_block_size <S2SV_ModEnd> == 8 ) <S2SV_ModStart> MV_PRECISION_Q3 ; } vpx_build_inter_predictor <S2SV_ModEnd> ( y_mb_ptr, <S2SV_ModStart> 256 ], vpx_get_block_size <S2SV_ModEnd>, & mv <S2SV_ModStart> 512 ], vpx_get_block_size <S2SV_ModEnd>, which_mv, <S2SV_ModStart> 512 ], vpx_get_block_size <S2SV_ModEnd>, which_mv,",0
627,"<S2SV_ModStart> = TRUE ; memset ( translate, 0, sizeof ( translate ) ) ;",0
628,<S2SV_ModStart> * cJSON_CreateFloatArray ( const,0
629,"<S2SV_ModStart> pbi -> common <S2SV_ModEnd> ; const uint8_t <S2SV_ModStart> tile_cols ) ; const int num_workers = MIN ( pbi -> oxcf. max_threads, tile_cols ) ; const int num_workers = MIN ( pbi -> oxcf. max_threads, tile_cols ) ; const int num_threads = MIN ( pbi -> oxcf. max_threads, tile_cols ) ; const int num_threads = MIN ( num_threads * sizeof ( * pbi -> tile_workers ) ) ; const int num_threads = MIN ( num_threads * sizeof ( * pbi -> tile_workers ), tile_rows ) ; <S2SV_ModStart> int num_threads = num_threads <S2SV_ModEnd> & ~ 1 <S2SV_ModStart> int num_threads = num_threads <S2SV_ModEnd> & ~ 1 <S2SV_ModStart> int num_threads = num_threads <S2SV_ModEnd> * sizeof ( <S2SV_ModStart> i ) { vpx_worker_init <S2SV_ModEnd> ( worker ) <S2SV_ModStart> i ] ; vpx_worker_init <S2SV_ModEnd> ( worker ) <S2SV_ModStart> i ] ; vpx_worker_init <S2SV_ModEnd> ( worker ) <S2SV_ModStart> i < num_threads <S2SV_ModEnd> ) { vpx_internal_error",0
630,<S2SV_ModStart> * 0x101 ; # ifdef LIBRAW_LIBRARY_BUILD <S2SV_ModStart> + 8 ; # endif,0
631,"<S2SV_ModStart> -> common ; <S2SV_ModEnd> const double base_q <S2SV_ModStart> = SEGMENT_DELTADATA ; vpx_clear_system_state ( ) ; for ( i = ENERGY_MIN ; i <= ENERGY_MAX ; i ++ ) { int qindex_delta, segment_rdmult ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; } qindex_delta = vp9_compute_qdelta ( & cpi -> rc, base_q, base_q * Q_RATIO ( i ) ) ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; } qindex_delta = vp9_compute_qdelta ( & cpi -> rc, base_q, base_q * Q_RATIO ( i ) ) ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; } qindex_delta = vp9_compute_qd",0
632,<S2SV_ModStart> -> error_code ) { <S2SV_ModStart> : NULL ; },0
633,<S2SV_ModStart> pocstruct_t * ps_cur_poc <S2SV_ModEnd> ; ps_cur_slice =,0
634,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet ),0
635,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int getnum (,0
636,<S2SV_ModStart> GCSpropagate ) ; <S2SV_ModEnd> atomic ( L,0
637,<S2SV_ModStart> 0 ; else * cold = 0 ;,0
638,<S2SV_ModStart> void ) opt <S2SV_ModEnd> ; memset ( <S2SV_ModStart> ) ) { ( void ) opt ;,0
639,,0
640,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi,",0
641,"<S2SV_ModStart> ( ndo, ""%s"", icp -> icmp6_name <S2SV_ModEnd> ) ) )",0
642,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> return rc ;",0
643,"<S2SV_ModStart> Image * image = ( ImageInfo * ) NULL <S2SV_ModStart>, length, <S2SV_ModEnd> version, width <S2SV_ModStart>, length, <S2SV_ModEnd> version, width",0
644,"<S2SV_ModStart> jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC <S2SV_blank> marker\\n"" <S2SV_ModEnd> ) ; jas_eprintf <S2SV_ModStart> jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC <S2SV_blank> marker\\n"" <S2SV_ModEnd> ) ; jas_eprintf",0
645,"<S2SV_ModStart> ) ) { if ( strlen ( str_temp ) > strlen ( str_temp ) ) { weechat_error ( server, ERR_MSG_LIMIT_FAILURE, ""invalid <S2SV_blank> argument <S2SV_blank> parameter"" ) ; return ; }",0
646,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r,",0
647,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
648,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> ( REFERENCE_MODE ) vpx_read <S2SV_ModEnd> ( r,",0
649,"<S2SV_ModStart>! stream ) { <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; return NULL ; }",0
650,<S2SV_ModStart> -> nd_opt_len ; if ( cp == NULL ) goto trunc ;,0
651,<S2SV_ModStart> re_ast ) -> parent = NULL ; ( * re_ast ) ->,0
652,"<S2SV_ModStart> ; ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret < 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key -> key, error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> = <S2SV_blank> %s"", str_c ( path ), key -> value ) ; return - 1 ; } else if ( ret < 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found, <S2SV_blank> using <S2SV_blank> default <S2SV_blank> value <S2SV_blank> %s"", str_c ( path ), key ->",0
653,<S2SV_ModStart> ; tok -> <S2SV_ModEnd> altwarning = 1,0
654,<S2SV_ModStart> maxBitrate ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
655,<S2SV_ModStart> ( dpbSize ) ; if ( maxFrameNum < 0 ) return MEMORY_ALLOCATION_ERROR,0
656,<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_in = 0 ; <S2SV_ModStart> (! sock ||! addrlen_in <S2SV_ModStart> ( addrlen ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; <S2SV_ModStart> ) ; } },0
657,,1
658,"<S2SV_ModStart> FALSE ; } if (! <S2SV_ModStart>, s ) ) return FALSE",1
659,<S2SV_ModStart> ipv6_sk ( sk ) ; struct ipv6_txoptions * opt = NULL ; struct ipv6_txoptions * opt = NULL ; struct ipv6_txoptions * opt = NULL ; struct ipv6_txoptions * opt = NULL ; struct ipv6_txoptions * opt = NULL ; struct ipv6_txoptions * opt = NULL ; struct ipv6_txoptions * opt = NULL ; struct ipv6_txoptions * opt = NULL ; struct ipv6_txoptions * opt = NULL ; struct ipv6_txoptions * opt = NULL ; struct ipv6_txoptions * opt = NULL ; struct ipv6_txoptions * opt = NULL ; struct ipv6_txoptions * opt = NULL ; struct ipv6_txoptions * opt = NULL ; struct ipv6_txoptions * opt = NULL ; if ( msg -> msg_namelen < opt ) return - EINVAL ; opt = opt -> opt ; opt = opt ; opt = opt -> opt ; opt = opt ; opt = opt -> opt ; opt_space = opt ; opt -> opt_space = opt -> opt_space ; opt ->,0
660,"<S2SV_ModStart> ; uint32_t valign = 0 <S2SV_ModStart> hdr_size, j = 0",0
661,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPOS <S2SV_ModEnd> | EPCR_ERPRR ) <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPOS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> { dm9000WriteReg ( DM9000_EPCR, DM9000_EPOS <S2SV_ModEnd> ) ; usleep <S2SV_ModStart> ; return ( DM9000_EPDRH <S2SV_ModEnd> ) << 8 <S2SV_ModStart> | dm9000ReadReg ( DM9000_EPDRL <S2SV_ModEnd> ) ; }",0
662,<S2SV_ModStart> pcmk_ok ) { if ( private -> server == NULL ) { <S2SV_ModStart> ) ) ; } else { rc = - ENOMEM ; },0
663,<S2SV_ModStart> ; msg. msg_namelen = sizeof ( address ) ; msg.,0
664,"<S2SV_ModStart> } ; int best_mv_mode_penalty <S2SV_ModEnd>, sr = <S2SV_ModStart>, step_param, best_mv_mode_penalty <S2SV_ModEnd>, & v_fn_ptr <S2SV_ModStart>, x -> sadperbit16 <S2SV_ModEnd>, & v_fn_ptr <S2SV_ModStart>, x -> sadperbit16 <S2SV_ModEnd>, x -> <S2SV_ModStart>, x -> sadperbit16 <S2SV_ModEnd>, x -> <S2SV_ModStart>, x -> sadperbit16 <S2SV_ModEnd>, x -> <S2SV_ModStart>, x -> sadperbit16 <S2SV_ModEnd>, x -> <S2SV_ModStart>, x -> sadperbit16 <S2SV_ModEnd>, x -> <S2SV_ModStart>, x -> sadperbit16 <S2SV_ModEnd>, x -> <S2SV_ModStart>, x -> sadperbit16 <S2SV_ModEnd>, x -> <S2SV_ModStart>, x -> sadperbit16 <S2SV_ModEnd>, x -> <S2SV_ModStart>, x -> sadperbit16 <S2SV_ModEnd>, x -> <S2SV_ModStart>, x -> sadperbit16 <S2SV_ModEnd>, x ->",0
665,<S2SV_ModStart> = 0 ; if ( h -> addr == NULL ) { if ( h -> addr == NULL ) goto error ; },0
666,<S2SV_ModStart> ) ) ; if ( child -> body_buffer_size < 0 ) return NULL ;,0
667,"<S2SV_ModStart> one, offset <S2SV_ModEnd> ; ssize_t count <S2SV_ModStart> ) break ; if ( number_planes_filled > number_planes_filled ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
668,"<S2SV_ModStart> ( b, comp <S2SV_ModEnd> ) )!=",0
669,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
670,"<S2SV_ModStart> client = user_data ; memset ( client, 0, sizeof ( client ) )",0
671,<S2SV_ModStart> * uv ; thread -> twups = thread ; <S2SV_ModStart> next ) { <S2SV_ModEnd> if (!,0
