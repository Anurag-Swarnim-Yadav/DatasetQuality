,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; ret = <S2SV_ModEnd> - ETIMEDOUT ; <S2SV_ModStart> - ETIMEDOUT ; goto out ;,0
1,<S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;,0
2,<S2SV_ModStart> * writer = <S2SV_ModEnd> gf_list_get ( writers,0
3,<S2SV_ModStart> -> child ; if <S2SV_ModEnd> ( c && <S2SV_ModStart> > 0 ) <S2SV_ModEnd> c = c <S2SV_ModStart> -> next ; <S2SV_ModEnd> return c ;,0
4,"<S2SV_ModStart>, u64 nr <S2SV_ModEnd>, struct pt_regs <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",0
5,<S2SV_ModStart> { # ifndef _MSC_VER <S2SV_ModEnd> char buf [,0
6,"<S2SV_ModStart> fdct16 ( const tran_low_t <S2SV_ModEnd> in [ 16 <S2SV_ModStart> 16 ], tran_low_t <S2SV_ModEnd> step2 [ 8 <S2SV_ModStart> 8 ] ; tran_low_t <S2SV_ModEnd> input [ 8 <S2SV_ModStart> ] ; { tran_low_t <S2SV_ModEnd> s0, s1 <S2SV_ModStart> ] ; { tran_low_t <S2SV_ModEnd> s0, s1 <S2SV_ModStart> ] ; { tran_low_t <S2SV_ModEnd> s1, s2 <S2SV_ModStart>, s7 ; tran_low_t <S2SV_ModEnd> t0, t1 <S2SV_ModStart>, t3 ; tran_low_t <S2SV_ModEnd> x0, x1",0
7,<S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { #,0
8,,0
9,"<S2SV_ModStart>. left ; if ( c. left == 0 ) return luaL_error ( L, ""Bad <S2SV_blank> data <S2SV_blank> format <S2SV_blank> in <S2SV_blank> input <S2SV_blank> length <S2SV_blank> %d."", c. left ) ;",0
10,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ++ i ) vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( usehp ) vpx_write <S2SV_ModEnd> ( w,",1
11,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; },0
12,"<S2SV_ModStart> ( ndo, ""%04x, <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%s"", tok2str ( l2tp_cc_direction2str, ""Direction-#%u"" <S2SV_ModEnd>, * ( <S2SV_ModStart> ( ndo, <S2SV_ModEnd> ptr, length",0
13,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> construct_get_dest_keyring ( struct <S2SV_ModStart> dest_keyring ) ; return 0 ; <S2SV_ModStart> ( dest_keyring ) { if ( dest_keyring ) break ; } <S2SV_ModEnd> } case KEY_REQKEY_DEFL_THREAD_KEYRING,0
14,<S2SV_ModStart> = NULL ; if ( spcred == NULL ) return GSS_S_FAILURE ;,0
15,<S2SV_ModStart> int len ; if ( t > 0 ) { <S2SV_ModStart> t ) ; },0
16,<S2SV_ModStart> ( password ) - 1,0
17,<S2SV_ModStart> e == p || e == p,0
18,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",1
19,<S2SV_ModStart> = 0 ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> & timeout ) ),1
20,,0
21,<S2SV_ModStart> + size <= PAGE_SIZE <S2SV_ModEnd> ) ret =,0
22,<S2SV_ModStart> alg ) { <S2SV_ModEnd> if (! <S2SV_ModStart> CRYPTO_ALG_NEED_FALLBACK ) ) <S2SV_ModEnd> alg = crypto_alg_lookup,0
23,<S2SV_ModStart> = GIT_PKT_NG ; if ( len < 0 ) goto out_err ; <S2SV_ModStart> line += 3 <S2SV_ModEnd> ; GITERERR_CHECK_ALLOC_ADD ( <S2SV_ModStart> = '\\0' ; if ( len < 0 ) goto out_err ;,0
24,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
25,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) return AVERROR_EOF ; if ( <S2SV_ModStart> ; if ( avio_feof ( pb ) ) return AVERROR_EOF ; if (,0
26,"<S2SV_ModStart> mntent, path, rootfs",1
27,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } io -> io_cleanup = mem_cleanup ;,1
28,<S2SV_ModStart> ( size_t ) value <S2SV_ModEnd> ) ; break,0
29,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return ret?,0
30,<S2SV_ModStart> vpx_codec_err_t res ; vpx_codec_enc_cfg_t <S2SV_ModEnd> * map ;,0
31,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
32,"<S2SV_ModStart>, uint64_t dx_time, int frame_out_offset <S2SV_ModStart> dx_time ) { if ( frame_out_offset < frame_out_offset ) { return ; }",0
33,<S2SV_ModStart> ; if ( D_imp_dbh_from_sth <S2SV_ModEnd> ( fbh ) <S2SV_ModStart> ; if ( D_imp_dbh_from_sth <S2SV_ModEnd> ( fbh ) <S2SV_ModStart> ; if ( D_imp_dbh_from_sth <S2SV_ModEnd> ( fbh ),0
34,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST ) ; enc28j60ClearBit ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST ) ; enc28j60ClearBit ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST ) ; enc28j60ClearBit ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST ) ; enc28j60ClearBit ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST ) ; enc28j60ClearBit ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST ) ; enc28j60ClearBit ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST ) ; enc28j60ClearBit ( interface, ENC28J60_ECON1, ENC",0
35,<S2SV_ModStart> ; value = ast2obj_expr <S2SV_ModEnd> ( o -> <S2SV_ModStart> ; value = ast2obj_expr <S2SV_ModEnd> ( o -> <S2SV_ModStart> ; value = ast2obj_expr <S2SV_ModEnd> ( o ->,0
36,<S2SV_ModStart> page && ( ( <S2SV_ModStart> ) == 0 ) <S2SV_ModStart> page && ( ( <S2SV_ModStart> ) > 0 ),0
37,"<S2SV_ModStart> low_var_thresh, int mb_cols <S2SV_ModEnd> ) { double <S2SV_ModStart> = source -> y_width <S2SV_ModEnd> >> 4 ; <S2SV_ModStart> = source -> y_height <S2SV_ModEnd> >> 4 ; <S2SV_ModStart> = source -> y_height <S2SV_ModEnd> >> 4 ; <S2SV_ModStart> ; int mb_cols <S2SV_ModEnd> ; ( void",0
38,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; <S2SV_ModEnd> error = mb_cache_entry_insert <S2SV_ModStart> error ) { mb2_cache_entry_free <S2SV_ModEnd> ( ce ) <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> } else { <S2SV_ModStart> hash ) ; <S2SV_ModEnd> } } <S2SV_null>",0
39,<S2SV_ModStart> ) ) ; free ( uri ) ;,0
40,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
41,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|truncated]"" <S2SV_ModEnd> ) ) ;",0
42,,0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode <S2SV_ModStart>, & new_mode, & acl ) ; if ( ret <S2SV_ModEnd> ) goto out",0
44,"<S2SV_ModStart> size_t size ; if (! jas_safe_intfast32_add ( tlx, width, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ) { goto error ; }",0
45,<S2SV_ModStart> FLAG_MATCHED ) || ( <S2SV_ModStart> dp == datalen ) || ( datalen < datalen ),0
46,"<S2SV_ModStart> size_t * acl_len, struct kvec * iov <S2SV_ModStart> int status ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> attrlen ) ; <S2SV_ModEnd> } else status",0
47,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
48,"<S2SV_ModStart> { owner = safe_stok <S2SV_ModEnd> ( auth, <S2SV_ModStart> } group = safe_stok <S2SV_ModEnd> ( tok,",0
49,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> addr = VPX_MALLOC_L <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; <S2SV_ModEnd> if ( addr,0
50,<S2SV_ModStart> int res ; long long <S2SV_ModEnd> export_index_table [ indexes,0
51,"<S2SV_ModStart> ; } else if ( strcasecmp ( p1, ""off"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_is_enabled = HASH_ENABLED ; dcfg -> hash_enforcement = HASH_ENABLED ; } else",0
52,<S2SV_ModStart> ; if ( 1 <S2SV_ModEnd> ) { # <S2SV_ModStart> } if ( 1 <S2SV_ModEnd> ) { },0
53,"<S2SV_ModStart> 1 ; } SSL_SESSION * sess = SSL_get1_session ( c -> ssl ) ; if ( sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; if ( sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; if ( sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; if ( sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_",0
54,"<S2SV_ModStart> ; if ( memcmp <S2SV_ModEnd> ( cmac,",0
55,,0
56,<S2SV_ModStart> define EOFOp 0x07 <S2SV_ModEnd> char magick [ <S2SV_ModStart>. x = ReadBlob <S2SV_ModEnd> ( image ) <S2SV_ModStart>. y = ReadBlob <S2SV_ModEnd> ( image ) <S2SV_ModStart>. rows = ReadBlob <S2SV_ModEnd> ( image ),0
57,<S2SV_ModStart> err_free_buf ; } usb_free_urb ( usbinterface ) ;,0
58,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart> stateid, open_flags, fmode",0
59,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> fd = xfmkstemp <S2SV_ModStart> tmpname, dir <S2SV_ModEnd> ) ) ==",0
60,,0
61,,0
62,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> mi_col ) { <S2SV_ModEnd> int i ; <S2SV_ModStart> i ) { <S2SV_ModEnd> setup_pred_plane ( &,0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,<S2SV_ModStart> ) get_block = ocfs2_get_block <S2SV_ModEnd> ; else get_block <S2SV_ModStart> else get_block = ocfs2_dio_get_block <S2SV_ModEnd> ; return __blockdev_direct_IO,0
65,"<S2SV_ModStart> ( f, ""%79s <S2SV_blank> %[^\\n]"" <S2SV_ModEnd>, def,",0
66,"<S2SV_ModStart> n ) { <S2SV_ModEnd> char * str <S2SV_ModStart> ; PyCompilerFlags cf <S2SV_ModEnd> ; Py_ssize_t len <S2SV_ModStart> ':' ) ; Py_ssize_t i ; assert ( expr_start >= expr_end ) ; assert ( expr_end >= expr_end ) ; assert ( expr_end >= expr_end ) ; <S2SV_ModStart> == NULL ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ; } <S2SV_ModEnd> str [ 0 <S2SV_ModStart> = PyCF_ONLY_AST ; str = PyUnicode_FromString ( ""<fstring>"" ) ; if ( str == NULL ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ; } str = PyUnicode_FromString ( ""<fstring>"" ) ; if ( str == NULL ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ; } str = PyUnicode_FromString ( ""<fstring>"" ) ; if ( str == NULL ) { ast_error ( c, n, ""f-string",0
67,<S2SV_ModStart> string ) { if ( string == NULL ) return NULL ;,0
68,<S2SV_ModStart> size ) ; if ( px -> ft ),0
69,,0
70,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
71,"<S2SV_ModStart> const buffers [ 4 <S2SV_ModEnd> ] = { <S2SV_ModStart>, src -> uv_stride <S2SV_ModEnd>, src -> <S2SV_ModStart>, src -> uv_stride <S2SV_ModEnd> } ; for",0
72,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; for (,1
73,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
74,<S2SV_ModStart> ( user ) ; if (! user ) return 0,0
75,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> sl = strlen,1
76,"<S2SV_ModStart> * for_ch ; REQ ( n, comp_for ) ; if ( TYPE ( CHILD ( n, 0 ) ) == ASYNC ) { for_ch = CHILD ( n, 0 ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; expression = ast_for_exprlist ( c, for_ch, Store ) ; if (! expression ) return NULL ; expression = ast_for_expr ( c, for_ch, Store ) ; if (! expression ) return NULL ; expression = ast_for_expr ( c, for_ch, Store ) ; if (! expression ) return NULL ; if ( NCH ( n ) == ( 5 + is_async ) ) { int j, n_ifs ; n_ifs = CHILD ( n, 4 + is_async ) ; n_ifs = CHILD ( n, n_ifs ) ; n_ifs = CHILD ( n, n_ifs ) ; n_ifs = CHILD ( n, n_ifs ) ; n_ifs = CHILD ( n, n_ifs",0
77,<S2SV_ModStart> = NULL ; dst_state -> curframe = src -> curframe ;,0
78,,0
79,<S2SV_ModStart> maxn ) { <S2SV_ModEnd> # ifdef DEBUG,0
80,<S2SV_ModStart> ( len < ND_TTEST ( * prep ) || len <,0
81,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
82,,0
83,,0
84,<S2SV_ModStart> ) p += ( UChar * ),0
85,,0
86,,1
87,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
88,<S2SV_ModStart> diffPtr + x >= <S2SV_ModEnd> diffBlock + diffBlockLength <S2SV_ModStart> diffPtr + x >= <S2SV_ModEnd> diffBlock + diffBlockLength,0
89,"<S2SV_ModStart>, fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
90,,0
91,"<S2SV_ModStart> encoder_common_init ( ctx, 0",0
92,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
93,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
94,"<S2SV_ModStart> vp8_mv_reduction ( cpi, cpi",0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
97,"<S2SV_ModStart> msicap, msgnum <S2SV_ModEnd> ) ; return",0
98,,0
99,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> cfg -> g_lag_in_frames <S2SV_ModStart> cfg -> g_pass == VPX_RC_ONE_PASS <S2SV_ModEnd> ) ) ERROR <S2SV_ModStart> ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" <S2SV_ModEnd> ) ; if",0
100,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> vp9_init_plane_quantizers ( cpi,0
101,<S2SV_ModStart> info -> si_code == <S2SV_ModEnd> 0 ) return <S2SV_ModStart> return - EPERM <S2SV_ModEnd> ; return do_send_specific,0
102,<S2SV_ModStart> size - 8 ; if ( ptr -> size < 8 ) return GF_ISOM_INVALID_FILE,0
103,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
104,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> -> state == fmode <S2SV_ModEnd> ) return ; <S2SV_ModStart> ( mode & fmode <S2SV_ModEnd> )!= ( <S2SV_ModStart> state -> state <S2SV_ModEnd> ) ) { <S2SV_ModStart> state -> state = fmode <S2SV_ModEnd> ; } <S2SV_null>",0
105,<S2SV_ModStart> read_info ) ; if ( read_info -> filename!= NULL ),0
106,<S2SV_ModStart> 0 ; } memset <S2SV_ModEnd> ( elem.,0
107,"<S2SV_ModStart>, i, jpc_x_getEXPN <S2SV_ModEnd> ( qcd -> <S2SV_ModStart>, i, jpc_x_getMANT <S2SV_ModEnd> ( qcd ->",0
108,<S2SV_ModStart> avctx -> height <S2SV_ModEnd> ; if (,0
109,<S2SV_ModStart> length - 1 <S2SV_ModEnd> ) ; return,1
110,"<S2SV_ModStart> noffset, NULL, 0",0
111,"<S2SV_ModStart> -> rx_kfifo, CX23888_IR_RX_KFIFO_SIZE <S2SV_ModEnd>, GFP_KERNEL )",0
112,<S2SV_ModStart> vpx_codec_dec_cfg_t * cfg __attribute__ ( ( unused ) ),0
113,<S2SV_ModStart> ; value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1100WritePhyReg (,0
114,<S2SV_ModStart> ; if ( iph -> protocol == IPPROTO_ICMP && iph -> ihl << 2 ) goto out ; if (,0
115,<S2SV_ModStart> else if ( <S2SV_ModEnd> flags & VPX_CODEC_USE_XMA <S2SV_ModStart> flags & VPX_CODEC_USE_PSNR <S2SV_ModEnd> ) res =,0
116,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
117,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; RESERVE_SPACE",1
118,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ) ; return 0 <S2SV_ModStart> break ; } return 0 ;,0
119,<S2SV_ModStart> len ) ; if ( len < 0 ) return - 1 ;,0
120,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
121,<S2SV_ModStart> goto trunc ; ND_TCHECK_16BITS ( & lshp -> ls_type ) ;,0
122,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { ret = - EINVAL ; break ; } <S2SV_ModEnd> * obuf =",0
123,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
124,<S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ),0
125,"<S2SV_ModStart> * costs, vpx_tree_tree <S2SV_ModEnd> tree, const <S2SV_ModStart> ) { const vpx_tree_index <S2SV_ModEnd> ii = tree",0
126,<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline,0
127,"<S2SV_ModStart> 4, c <S2SV_ModEnd> ) ; if",0
128,"<S2SV_ModStart> fadst16 ( const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> output ) { tran_low_t <S2SV_ModEnd> s0, s1 <S2SV_ModStart>, s1, tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> input ) { tran_low_t <S2SV_ModEnd> x1 = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x2 = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x3 = input <S2SV_ModStart> 2 ] ; tran_low_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 2 ] ; tran_low_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 2 ] ; tran_low_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 2 ] ; tran_low_t <S2SV_ModEnd> x5 = input <S2SV_ModStart> 4 ] ; tran_low_t <S2SV_ModEnd> x5 = input <S2SV_ModStart> 4 ] ; tran_low_t <S2SV_ModEnd> x5 = input <S2SV_ModStart> 4 ] ; tran_low_t <S2SV_ModEnd> x5 = input <S2SV_ModStart> 6 ] ; tran_low_t <S2SV_ModEnd> x6 = input <S2SV_ModStart> 6 ] ; tran_low_t <S2SV_ModEnd> x9 = input <S2SV_ModStart> 8 ] ; tran_low_t <S2SV_ModEnd> x10 = input <S2SV_ModStart> 5 ] ; tran_low_t <S2SV_ModEnd>",0
129,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> return flags &,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
131,,0
132,<S2SV_ModStart> -> flags & CLIENT_CLOSE_AFTER_REPLY <S2SV_ModEnd> ) break ;,0
133,<S2SV_ModStart> get_blocks_flags = EXT4_GET_BLOCKS_CREATE <S2SV_ModEnd> ; blks =,0
134,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( oe_syscall_getaddrinfo_read_ocall <S2SV_ModStart> done ; } if (! ( p = oe_calloc ( 1, sizeof ( struct oe_addrinfo ) ) ) ) { ret = OE_EAI_MEMORY ; goto done ; }",0
135,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token,",0
136,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
137,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int set_registers ( <S2SV_ModStart> data ) { return <S2SV_ModEnd> usb_control_msg ( pegasus <S2SV_ModStart> ret ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
138,"<S2SV_ModStart> mod_ty Module ( asdl_seq <S2SV_ModEnd> * body,",0
139,"<S2SV_ModStart> * src, <S2SV_ModEnd> unsigned int flags <S2SV_ModStart> >> 4 ; <S2SV_ModEnd> if ( ctx <S2SV_ModStart> write_idx ) ; <S2SV_ModEnd> } else { <S2SV_ModStart> } else { vp9_copy_and_extend_frame <S2SV_ModEnd> ( src, <S2SV_ModStart> img ) ; <S2SV_ModEnd> } # else",0
140,<S2SV_ModStart>. sharpness ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
141,,0
142,<S2SV_ModStart> = getnum ( <S2SV_ModEnd> MAXALIGN ) ;,0
143,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
144,"<S2SV_ModStart> (! data || data_sz < 0 <S2SV_ModStart>. decode ( <S2SV_ModEnd> data, data",0
145,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int isofs_read_inode (,0
146,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> k ) ; sendClean ( outputbuffer ) ;",0
147,<S2SV_ModStart> self ) { if ( self -> dict ),0
148,<S2SV_ModStart> 0 ; a && <S2SV_ModEnd> i < count,0
149,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_RuntimeError, ""Module <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> must <S2SV_blank> be <S2SV_blank> a <S2SV_blank> list, <S2SV_blank> not <S2SV_blank> a <S2SV_blank> %.200s"", tmp -> ob_type -> tp_name ) ; goto failed ; } <S2SV_ModEnd> tmp = _PyObject_GetAttrId <S2SV_ModStart> Py_ssize_t i ; if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } <S2SV_ModStart> ++ ) { <S2SV_ModEnd> res = obj2ast_stmt <S2SV_ModStart> failed ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } <S2SV_ModStart>, i, tmp <S2SV_ModEnd> ) ; }",0
150,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
151,<S2SV_ModStart> ; if ( msg_sys -> msg_control == NULL ) { err = - EINVAL ; goto out_freeiov ; } if ( <S2SV_ModStart> msg_sys -> msg_control <S2SV_ModEnd> ; if (,0
152,,0
153,<S2SV_ModStart> ( ) ) <S2SV_ModEnd> ) ; },0
154,,0
155,"<S2SV_ModStart> { if ( copy_file_safe <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> ) ; } <S2SV_ModEnd> } free ( <S2SV_ModStart> { if ( copy_file_safe <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ) ; } <S2SV_ModEnd> } free ( <S2SV_ModStart> { if ( copy_file_safe <S2SV_ModEnd> ( ""/etc/skel/.cshrc"",",0
156,<S2SV_ModStart> msix_tab_size ) { <S2SV_ModEnd> bzero ( msixcap,1
157,"<S2SV_ModStart>! js_regexec ( J,",0
158,"<S2SV_ModStart> case OFreshOID : if ( Int_val ( Field ( ( value ) dest, 1 ) ) >= 0 )caml_set_oo_id ( ( value ) dest ) ;",0
159,,0
160,"<S2SV_ModStart> void encode_quantization ( VP9_COMMON <S2SV_ModEnd> * cm, <S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
161,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, msglen ) )",0
162,"<S2SV_ModStart> ( fp, out,",0
163,"<S2SV_ModStart> ( ) ; strcpy <S2SV_ModEnd> ( t1_buf_array, <S2SV_ModStart> t1_buf_array, t1_line_array, sizeof ( t1_buf_array )",0
164,,0
165,<S2SV_ModStart> key_ref ) ; if ( key -> type -> read ) { down_read ( & key -> sem ) ; ret = - EOPNOTSUPP ; goto error2 ; },0
166,,0
167,<S2SV_ModStart> var_off ) ; if ( src_known ) { <S2SV_ModStart> var_off ) ; },0
168,,0
169,,0
170,,0
171,<S2SV_ModStart> = new_cols ; screen -> buffers = NULL ;,0
172,<S2SV_ModStart> n ) { int result = 0 ; int result = 0 ; assert ( * str < end ) ; for ( ; * str < end ; ( * str ) ++ ) { char ch = * * str ; if ( ch == '{' && ( * str - 2 ) == '\\\\' && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == '\\\\' ) { in_named_escape = 0 ; } else if ( ch == '{' || ch == '}' ) { in_named_escape = 0 ; } else if ( ch == '{' || ch == '}' ) { in_named_escape = 0 ; } else if ( ch == '{' || ch == '}' ) { in_named_escape = 0 ; } else if ( ch == '{' || ch == '}' ) { in_named_escape = 0 ; } else if ( ch == '{' || ch == '}' ) { in_named_escape = 0 ; } else if ( ch == '{' || ch == '}' ) { in_named_escape = 0 ; } else if ( ch == '{,0
173,<S2SV_ModStart> ) ; struct dump_dir <S2SV_ModEnd> * dd =,0
174,<S2SV_ModStart> bytesPerPixel ) ; if ( bytesPerPixel > 0 ) { <S2SV_ModStart> bytesPerPixel ) ; },0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
176,"<S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; this_mv <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; this_mv",0
177,,0
178,"<S2SV_ModStart> ; dh = skb_header_pointer <S2SV_ModEnd> ( skb,",0
179,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * opt <S2SV_ModStart> & 3 ) { <S2SV_ModStart> = IPOPT_END ; } <S2SV_ModStart> ( optlen && ip_options_compile <S2SV_ModEnd> ( net,",0
180,"<S2SV_ModStart> connection == NULL || strcasecmp ( connection, ""websocket"" ) == 0",0
181,,0
182,"<S2SV_ModStart> path, client_uid <S2SV_ModEnd> ) ; if",0
183,<S2SV_ModStart> -> columns - 2 ) ; x += 2 <S2SV_ModEnd> ) { index,0
184,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
185,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> filename, image -> filename ) ; if ( status == MagickFalse ) { ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; }",0
186,"<S2SV_ModStart> ( ndo, ""%s"", bp [ 3 ] <S2SV_ModEnd> ) ) ;",0
187,<S2SV_ModStart>! dumpable && <S2SV_ModEnd> ptrace_has_cap ( __task_cred,0
188,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
189,<S2SV_ModStart> i1_nal_type ) { if ( u4_payload_size < 0 ) { return ; },0
190,<S2SV_ModStart> tmp_idx ) ; mutex_init ( & dd -> per_sdma_lock ) ;,0
191,,0
192,<S2SV_ModStart> } pairs = palloc64 <S2SV_ModEnd> ( pcount *,0
193,<S2SV_ModStart> val ) ; <S2SV_ModEnd> if ( strcmp,0
194,"<S2SV_ModStart> ) ) { if ( clen < c -> bind -> length ) { return bad_request ( c, 431, __LINE__ ) ; }",0
195,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> 256 ] ; tran_low_t <S2SV_ModEnd> * outptr = <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16",0
196,,0
197,"<S2SV_ModStart> = osi_calloc ( strlen ( filename ) + 5 <S2SV_ModEnd> ) ; if <S2SV_ModStart> node ) ; strcpy ( temp_filename, filename ) ; strcat ( temp_filename, filename ) ; strcat ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; strcat ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; strcat ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; strcat ( temp_filename, "".new"" ) ; strcat ( temp_filename, "".new"" ) ; strcat ( temp_filename, "".new"" ) ; strcat ( temp_filename, "".new"" ) ; strcat ( temp_filename, "".new"" ) ; strcat ( temp_filename, "".new"" ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename ) ; goto error ;",0
198,<S2SV_ModStart> case VTP_SUMMARY_ADV : ND_TCHECK_16BITS ( tptr ) ; <S2SV_ModStart> case VTP_SUMMARY_ADV : ND_TCHECK_16BITS ( tptr ) ;,0
199,"<S2SV_ModStart> userData, target <S2SV_ModEnd> ) ; ctxt",0
200,"<S2SV_ModStart> S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" <S2SV_ModEnd> ""%s"", request",0
201,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> src, dest <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; if ( copy_file_as_user <S2SV_ModEnd> ( dest, <S2SV_ModStart> | S_IWUSR ) <S2SV_ModEnd> ) errExit (",0
202,<S2SV_ModStart>!= BFA_STATUS_OK ) { kfree ( fcstats ) ; <S2SV_ModStart> return NULL ; },1
203,"<S2SV_ModStart> -> x = <S2SV_ModEnd> 1.0f, MaxF <S2SV_ModStart> -> y = <S2SV_ModEnd> 1.0f, MaxF <S2SV_ModStart> -> y = <S2SV_ModEnd> 1.0f, MaxF <S2SV_ModStart> -> z = <S2SV_ModEnd> 1.0f, MaxF <S2SV_ModStart> -> z = <S2SV_ModEnd> 1.0f, MaxF",0
204,<S2SV_ModStart> ; rec -> sasl_username <S2SV_ModEnd> = src -> <S2SV_ModStart> ; rec -> sasl_password <S2SV_ModEnd> = src ->,0
205,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
206,"<S2SV_ModStart> c ; size_t <S2SV_ModEnd> o, datao",0
207,<S2SV_ModStart> ) ; } if ( info ) { <S2SV_ModStart> ) ; } },0
208,<S2SV_ModStart> olen ) { size_t alloc ; char * ns ; int strindex = 0 ; unsigned char in ; int strindex = 0 ; unsigned char in ; int strindex = 0 ; unsigned char in ; int strindex = 0 ; unsigned char in ; int strindex = 0 ; char * ns = malloc ( alloc ) ; if (! ns ) return NULL ; while ( -- alloc > 0 ) { in = * string ; if ( ( '%' == in ) && ISXDIGIT ( string [ 1 ] ) && ISXDIGIT ( string [ 2 ] ) && ISXDIGIT ( string [ 2 ] ) && ISXDIGIT ( string [ 2 ] ) && ISXDIGIT ( string [ 2 ] ) && ISXDIGIT ( string [ 2 ] ) ) { in = * string ; in = * string ; } string ++ ; } ns [ strindex ++ ] = in ; string ++ ; } ns [ strindex ++ ] = in ; string ++ ; } ns [ strindex ++ ] = in ; string ++ ; } ns [ strindex ] = 0 ; if ( olen ) * olen = strindex ; if ( olen ) *,0
209,<S2SV_ModStart> ; RAnalOp next_op = NULL,0
210,<S2SV_ModStart> ; def -> <S2SV_ModEnd> session_setup = usm_session_init,0
211,"<S2SV_ModStart>, sp, sub,",0
212,<S2SV_ModStart> idx ] ; <S2SV_ModEnd> switch ( action,0
213,<S2SV_ModStart> ++ = ( ( <S2SV_ModStart> ) & 0x03 ) <S2SV_ModStart> ++ = ( ( <S2SV_ModStart> ) & 0x03 ),0
214,"<S2SV_ModStart> timer ) ; spin_lock_irq ( & slave_active_lock ) ; list_for_each_entry_safe ( slave, tmp, & timeri -> slave_list_head, open_list ) { spin_lock_irq ( & slave_active_lock ) ; list_move_tail ( & slave -> open_list, & snd_timer_slave_list ) ; list_move_tail ( & slave -> open_list, & snd_timer_slave_list ) ; slave -> master = NULL ; mutex_unlock ( & timer -> lock ) ; mutex_unlock ( & timer -> lock <S2SV_ModEnd> ) ; list_move_tail",0
215,<S2SV_ModStart> -> u4_bitoffset = ih264d_read_mmco_commands <S2SV_ModEnd> ( ps_dec ),0
216,,0
217,<S2SV_ModStart> || cherokee_buffer_is_empty ( <S2SV_ModEnd> conn -> validator,0
218,<S2SV_ModStart> bus ] ; <S2SV_ModEnd> si = &,0
219,"<S2SV_ModStart>, timeo ) <S2SV_ModEnd> ; if (",1
220,<S2SV_ModStart> 0 ) { if ( * s == '/' ) { <S2SV_ModStart> ++ ) ; },0
221,<S2SV_ModStart> ; result = TEMP_FAILURE_RETRY ( <S2SV_ModStart> uipc_main. read_set ),0
222,<S2SV_ModStart> msixcap msixcap ; <S2SV_ModEnd> pci_populate_msixcap ( &,0
223,"<S2SV_ModStart> int decode_unsigned_max ( vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",0
224,<S2SV_ModStart> == NULL ) return retval <S2SV_ModEnd> ; status = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> return retval ;,0
225,<S2SV_ModStart> cpi ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; <S2SV_ModStart> ( cpi -> <S2SV_ModEnd> tx_size_search_method == USE_FULL_RD <S2SV_ModStart> ( cpi -> <S2SV_ModEnd> tx_size_search_method == USE_FULL_RD,0
226,,0
227,<S2SV_ModStart> ; if ( buf2 <S2SV_ModEnd> -> size <,0
228,<S2SV_ModStart> ) + size ; if ( size < 0 ) return NULL,0
229,<S2SV_ModStart> ; if ( protocol < 0 || protocol < 0 ) return - EINVAL ; if (,0
230,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
231,"<S2SV_ModStart> b ) ; if ( b -> fd < 0 ) { log_debug_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; }",0
232,<S2SV_ModStart> ( ) ; errors += test_string_formatting ( ) ;,0
233,<S2SV_ModStart> -> lun ) <S2SV_ModEnd> } } <S2SV_null>,0
234,"<S2SV_ModStart>, end_col_offset ; string type_comment ; <S2SV_ModStart> 2 ; } type_comment = CHILD ( n, name_i ) ; if (! type_comment ) type_comment = CHILD ( n, name_i ) ; if (! type_comment ) type_comment = CHILD ( n, name_i ) ; if (! type_comment ) type_comment = CHILD ( n, name_i ) ; if (! type_comment ) type_comment = CHILD ( n, name_i ) ; if (! type_comment ) type_comment = CHILD ( n, name_i ) ; if (! type_comment ) type_comment = CHILD ( n, name_i ) ; if (! type_comment ) type_comment = CHILD ( n, name_i ) ; if (! type_comment ) type_comment = CHILD ( n, name_i ) ; if (! type_comment ) type_comment = CHILD ( n, name_i ) ; if (! type_comment ) type_comment = CHILD ( n, name_i ) ; if (! type_comment ) type_comment = CHILD",0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,,0
237,,1
238,<S2SV_ModStart> 0 ) ; if (! res ) return - ENOMEM ;,0
239,<S2SV_ModStart> if ( position >= <S2SV_ModEnd> psf -> headend <S2SV_ModStart> > psf -> headend ) psf_fseek ( psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf ->,0
240,<S2SV_ModStart> u4_ofst ) ; ps_cabac -> u4_ofst = 0 ;,0
241,,0
242,<S2SV_ModStart> perf_event_context * ctx <S2SV_ModEnd> ; struct task_struct <S2SV_ModStart> event ) ; <S2SV_ModEnd> } raw_spin_unlock_irq (,0
243,<S2SV_ModStart> -> post_proc_flag = <S2SV_ModEnd> ctx -> dbg_color_ref_frame_flag <S2SV_ModStart> ctx -> dbg_color_ref_frame_flag <S2SV_ModEnd> ; flags -> <S2SV_ModStart>. noise_level ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
244,,0
245,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vpx_usec_timer_start ( & <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,1
246,"<S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" <S2SV_ModEnd> ) ; exit",0
247,<S2SV_ModStart> ; if ( ptr_hbe_txposer -> core_frame_length > 1024 ) ptr_hbe_txposer -> core_frame_length = 1024 ; if (,0
248,<S2SV_ModStart> ) ; const lua_authz_provider_spec <S2SV_ModEnd> * prov_spec =,0
249,<S2SV_ModStart> 0 ) { quantum_info = DestroyQuantumInfo ( image ) ; <S2SV_ModStart> 0 ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
250,<S2SV_ModStart> (! proto_end ||! url,0
251,"<S2SV_ModStart> fdt ) ; if ( len > MAX_DEPTH ) return - EINVAL ; <S2SV_ModStart>, & len, MAX_DEPTH",0
252,<S2SV_ModStart> ; if ( server. bgrewritechildpid &&,0
253,<S2SV_ModStart> channel ) ; <S2SV_ModEnd> set_description ( client,1
254,<S2SV_ModStart> book -> dim && i < n,1
255,<S2SV_ModStart> action ) { ( void ) action ;,0
256,<S2SV_ModStart> this_h ) { vpx_setup_scale_factors <S2SV_ModEnd> ( sf ),0
257,<S2SV_ModStart> (! sock <S2SV_ModEnd> ) OE_RAISE_ERRNO (,0
258,<S2SV_ModStart> sk_state!= IPPROTO_UDP && sk -> sk_state!= TCP_ESTABLISHED,0
259,<S2SV_ModStart> ( & sctp_net_ops ) ; unregister_pernet_subsys ( & sctp_net_ops,0
260,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> index ) ; if ( stream -> psnr_count ) return 0 ;,0
261,<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen (,1
262,"<S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ERROR_OUT_OF_MEMORY ; } ksz8851DumpReg ( interface ) ; <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> ) ; return",0
263,"<S2SV_ModStart> skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
264,<S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; bootstage_mark ( bootstage_id + BOOTSTAGE_SUB_FORMAT_OK ) ; <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; bootstage_mark ( bootstage_id + BOOTSTAGE_SUB_FORMAT_OK ) ; <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; ret = <S2SV_ModEnd> - ENOEXEC ; <S2SV_ModStart> - ENOEXEC ; goto ret ;,0
265,"<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart>, UI_DEV_DESTROY ) )",0
266,<S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> = rc -> avg_frame_bandwidth <S2SV_ModEnd> ; # endif,1
267,<S2SV_ModStart> ) if ( strchr <S2SV_ModEnd> ( argv [,0
268,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
269,<S2SV_ModStart> ib ] ; <S2SV_ModEnd> dequant_ptr = d,1
270,<S2SV_ModStart> ( buff ) <S2SV_ModEnd> ) ; # <S2SV_ModStart> ( buff ) <S2SV_ModEnd> ) ; # <S2SV_ModStart> ( buff ) <S2SV_ModEnd> ) ; #,0
271,<S2SV_ModStart> decrypt_cb ) { size_t <S2SV_ModEnd> n = ( <S2SV_ModStart> n = ( size_t <S2SV_ModEnd> ) ( data_end,0
272,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; <S2SV_ModEnd> exit_func : free_server_handle,0
273,,0
274,<S2SV_ModStart> statbuf. st_size ; if ( h -> size < 0 ) goto error,0
275,"<S2SV_ModStart> u1_level_idc, u1_seq_parameter_set_id = 0",0
276,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> const params = va_arg ( args, vpx_svc_parameters_t * ) ; if ( params == NULL ) return VPX_CODEC_INVALID_PARAM <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( <S2SV_ModEnd> vp9_set_size_literal ( ctx",0
277,"<S2SV_ModStart> { uint16 bitspersample = 0, samplesperpixel = 0, input_photometric = 0 <S2SV_ModEnd> ; uint16 input_photometric <S2SV_ModStart> ( TIFFTAG_SAMPLESPERPIXEL, samplesperpixel <S2SV_ModEnd> ) ; if",0
278,,0
279,<S2SV_ModStart> i_sb ) ; <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> indicB. extLength <S2SV_ModEnd> ) { if,0
280,"<S2SV_ModStart> get_uv_tx_size ( mbmi ) ; memset ( & lfm -> lfl_y [ index ], filter_level",0
281,"<S2SV_ModStart> mq_ops ) { spin_lock_irqsave <S2SV_ModEnd> ( & fq <S2SV_ModStart> mq_flush_lock, flags <S2SV_ModEnd> ) ; flush_rq",0
282,<S2SV_ModStart> uint8_t val ; if ( addr > ( vdev -> config_len - sizeof ( val ) ) ) return ( uint32_t ) - 1 ; <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,0
283,"<S2SV_ModStart> { option = strchr <S2SV_ModEnd> ( option,",0
284,<S2SV_ModStart> || * replySize < <S2SV_ModEnd> ( int ),0
285,"<S2SV_ModStart> ) calloc ( num_versions <S2SV_ModEnd>, sizeof (",0
286,<S2SV_ModStart> 0x02 ) ; <S2SV_ModEnd> r = sc_transmit_apdu,0
287,,0
288,<S2SV_ModStart> ; } } return - 1 ;,1
289,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
290,,0
291,<S2SV_ModStart> ) ; } quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
292,"<S2SV_ModStart> len ) { return decode_unicode_with_escapes <S2SV_ModEnd> ( c, <S2SV_ModStart> len ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
293,,0
294,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
295,"<S2SV_ModStart> -> mip_idx ; memset ( & oci -> temp_scale_frame, 0, sizeof ( MODE_INFO ) ) ;",0
296,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
297,,0
298,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> vterm_allocator_free ( screen,1
299,<S2SV_ModStart> { err = _ nanosleep <S2SV_ModEnd> ( & delay,0
300,,0
301,"<S2SV_ModStart> ( state -> route <S2SV_ModEnd>, stok (",0
302,"<S2SV_ModStart>. cmp = key_cmp ( type -> match, <S2SV_ModStart> type -> match )",0
303,<S2SV_ModStart>! ntime ) goto out ; <S2SV_ModEnd> cg_wlock ( &,0
304,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
305,<S2SV_ModStart> * res ; if ( _PyObject_Check ( self ) ) { Py_DECREF ( dict ) ; return NULL ; },0
306,<S2SV_ModStart> & desc ) ; if ( err < 0 ) return err,0
307,,0
308,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> * r, PREDICTION_MODE <S2SV_ModEnd> y_mode ) { <S2SV_ModStart> ) { const PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode",0
309,<S2SV_ModStart> ; if ( ioffset < 0 ) return - EINVAL ; if (,0
310,,0
311,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
312,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ngttp2_is_fatal ( rv <S2SV_ModStart> ; if ( <S2SV_ModEnd> ngttp2_is_fatal ( rv,0
313,<S2SV_ModStart> ; x86_pmu. cntval_bits = 0 ; x86_pmu.,0
314,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> t ] ; const vpx_extra_bit * const b = & vpx_extra_bits [ t ] ; <S2SV_ModStart> t ] ; <S2SV_ModEnd> int v =",0
315,"<S2SV_ModStart> struct vp9_write_bit_buffer wb <S2SV_ModEnd> ; struct vp9_write_bit_buffer <S2SV_ModStart> ; struct vp9_write_bit_buffer saved_wb ; memset ( & wb, 0, sizeof ( wb ) ) <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> += uncompressed_hdr_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb",0
316,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
317,<S2SV_ModStart> _U_ ) { ND_TCHECK ( * ext ) ; <S2SV_ModStart> * typedata ; <S2SV_ModEnd> UNALIGNED_MEMCPY ( &,0
318,,0
319,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
320,,0
321,<S2SV_ModStart> return mount_entry_on_generic ( <S2SV_ModEnd> mntent -> mnt_dir,0
322,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
323,"<S2SV_ModStart> ( env, server_name_val, req_server_name_val <S2SV_ModEnd> ( req )",0
324,"<S2SV_ModStart> endif int col_type = 0 <S2SV_ModStart>, prepare_retval ; if ( col_type!= 0 ) { <S2SV_ModStart> ) ) ; }",0
325,<S2SV_ModStart> need = 0 <S2SV_ModEnd> ; if (,0
326,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> JsVarFloat <S2SV_ModEnd> ftoa_bounded_extra ( JsVarFloat <S2SV_ModStart> val ) ) strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> < 0 ) strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> ) ; else strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> ) ; else strcpy <S2SV_ModEnd> ( str,",0
327,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( fast_pool ->,0
328,"<S2SV_ModStart> LEX_ID ) { strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> ( str, ""ID:"" <S2SV_ModEnd>, len ) <S2SV_ModStart> LEX_STR ) { strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> ( str, ""String:\'"" <S2SV_ModEnd>, len ) <S2SV_ModStart> ( str, ""String:\'"" <S2SV_ModEnd>, len )",0
329,,1
330,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
331,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
332,<S2SV_ModStart> ( s1 ) <S2SV_ModEnd> ) ; },0
333,"<S2SV_ModStart> { parse_global_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL, <S2SV_ModStart> { parse_global_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL,",0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,,0
336,<S2SV_ModStart> = e_error ; if ( ( IMPEG2D_ERROR_CODES_T ) IVD_ERROR_NONE!= e_error ) { return ; },0
337,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char * print_string <S2SV_ModStart> ) { return <S2SV_ModEnd> item -> valuestring,0
338,<S2SV_ModStart>. encode ( <S2SV_ModEnd> ctx -> priv <S2SV_ModStart>. encode ( <S2SV_ModEnd> ctx -> priv,0
339,,0
340,<S2SV_ModStart> < cols + 17 <S2SV_ModEnd> ; i ++,0
341,<S2SV_ModStart> ; if ( i -> width > i -> width ) i -> height = i -> height ; if (,0
342,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
343,<S2SV_ModStart> i1_sps_valid ) { if ( ps_codec -> i4_sps_valid ) { return IHEVCD_INVALID_HEADER ; },0
344,<S2SV_ModStart> ) ) { va_end ( argptr ) ;,0
345,"<S2SV_ModStart> ) break ; if ( sun_info. length > sun_info. height ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
346,"<S2SV_ModStart> 0 ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 0600 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; return",1
347,<S2SV_ModStart> BLOCK_8X8 : return vpx_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> BLOCK_16X8 : return vpx_mse16x8 <S2SV_ModEnd> ; case BLOCK_8X16 <S2SV_ModStart> BLOCK_8X16 : return vpx_mse8x16 <S2SV_ModEnd> ; default : <S2SV_ModStart> default : return vpx_mse8x16 <S2SV_ModEnd> ; } },0
348,,0
349,,0
350,<S2SV_ModStart> size ) { assert ( size <= MAX_SIZE ) ;,0
351,<S2SV_ModStart> -> serviceId == EXTRACT_16BITS <S2SV_ModEnd> ( & rxh,1
352,<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len < sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) ) return - 1 ;,0
353,<S2SV_ModStart> ) ) { if (! sbuf ) return - ENOMEM ;,0
354,"<S2SV_ModStart> struct l2cap_conf_rfc rfc <S2SV_ModEnd> ; void * <S2SV_ModStart> sk ) ; rfc. mode = L2CAP_MODE_ERTM ; rfc. txwin_size = L2CAP_DEFAULT_RX_WINDOW ; rfc. max_transmit = L2CAP_DEFAULT_MAX_RECEIVE ; rfc. monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; rfc. monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; l2cap_add_conf_opt ( & ptr, L2CAP_CONF_RFC, sizeof",0
355,"<S2SV_ModStart> do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_WAITALL ) )",0
356,<S2SV_ModStart> u1_nal_unit_type = 0 ; ps_dec -> u1_pic_decode_done = 1,0
357,<S2SV_ModStart> ( pair!= NULL <S2SV_ModEnd> ) { mprAddItem,0
358,"<S2SV_ModStart> * delegation, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> -> type & fmode )!= fmode <S2SV_ModEnd> ) goto no_delegation_unlock <S2SV_ModStart> -> stateid, fmode <S2SV_ModEnd> ) ; ret <S2SV_ModStart> NULL ) { __update_open_stateid ( state, fmode <S2SV_ModEnd>, NULL, <S2SV_ModStart> NULL ) { __update_open_stateid ( state, fmode <S2SV_ModEnd>, NULL,",0
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,,0
361,"<S2SV_ModStart> ( pmd_none_or_clear_bad ( pmd,",0
362,<S2SV_ModStart> '\\0' ) { <S2SV_ModEnd> username [ index <S2SV_ModStart> PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ;,0
363,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> ) { return vpx_read_tree <S2SV_ModEnd> ( r,",1
364,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",1
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,<S2SV_ModStart> depth ++ ; if ( buf2 == NULL ) return ( NULL ) ;,0
367,"<S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_RXQCR <S2SV_ModEnd>, RXQCR_SDA ) <S2SV_ModStart> ( interface, KSZ8851_RXQCR <S2SV_ModEnd>, RXQCR_SDA ) <S2SV_ModStart> ( interface, KSZ8851_RXQCR <S2SV_ModEnd>, RXQCR_SDA ) <S2SV_ModStart> ( interface, KSZ8851_TXQCR <S2SV_ModEnd>, TXQCR_METFE ) <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK",0
368,<S2SV_ModStart> ( ) ; mono_gc_invoke_finalizers ( ) ;,0
369,,0
370,<S2SV_ModStart> ( unlikely ( pmd_trans_huge <S2SV_ModEnd> ( * pmd,0
371,<S2SV_ModStart> ( argv [ 1 <S2SV_ModEnd> ] ) ; <S2SV_ModStart> ( argv [ 1 <S2SV_ModEnd> ] ) ; <S2SV_ModStart> ( argv [ 1 <S2SV_ModEnd> ] ) ; <S2SV_ModStart> ( argv [ 1 <S2SV_ModEnd> ] ) ; <S2SV_ModStart> ( argv [ 1 <S2SV_ModEnd> ] ) ; <S2SV_ModStart> ( argv [ 1 <S2SV_ModEnd> ] ) ; <S2SV_ModStart> ( argv [ 1 <S2SV_ModEnd> ] ) ;,0
372,"<S2SV_ModStart> i, result <S2SV_ModEnd> ; PyObject *",1
373,"<S2SV_ModStart> vpx_codec_alg_priv * priv <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> VPX_CODEC_MEM_ERROR ; } priv = calloc ( 1, sizeof ( * priv ) ) ; if (! priv ) { return VPX_CODEC_MEM_ERROR ; } <S2SV_ModStart> enc ) { priv <S2SV_ModEnd> -> cfg = <S2SV_ModStart> enc ) { priv <S2SV_ModEnd> -> cfg = <S2SV_ModStart> enc = & priv <S2SV_ModEnd> -> cfg ; <S2SV_ModStart> ++ ) ; priv <S2SV_ModEnd> -> vp8_cfg =",0
374,<S2SV_ModStart> } if ( c < 256 ) return 0 ; if (,0
375,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx ->,0
376,<S2SV_ModStart> i_sb ) ; udf_debug ( inode -> i_sb ) ;,0
377,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0",1
378,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int bad_format_imginfo ( <S2SV_ModStart> char * ptr <S2SV_ModEnd> ; ptr =,0
379,"<S2SV_ModStart> ; UtRegisterTest ( ""DefragReverseTest"", DefragReverseTest ) ; UtRegisterTest (",0
380,<S2SV_ModStart> = object_length ; new_object. data = NULL ;,0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,,0
384,<S2SV_ModStart> ) ; } if (! stream_close ( s ) ) break ;,0
385,<S2SV_ModStart> + idx ) ; if ( len < 4 ) return NULL,0
386,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
387,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; <S2SV_ModEnd> return VPX_CODEC_OK ;",0
388,<S2SV_ModStart> data_size < 4 || data_size < 4,0
389,"<S2SV_ModStart> ; if ( CHILD ( n, 0 ) == 0 ) return NULL ; if (",0
390,,0
391,,0
392,<S2SV_ModStart> = uregs ; <S2SV_ModEnd> # if XTENSA_HAVE_COPROCESSORS,0
393,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
394,<S2SV_ModStart> se_device * remote_dev = NULL <S2SV_ModStart> == XCOL_SOURCE_RECV_OP ) { <S2SV_ModStart> dst_dev ; else { <S2SV_ModStart> -> src_dev ; },0
395,"<S2SV_ModStart> int error ; <S2SV_ModEnd> new_bh = ext2_group_first_block_no <S2SV_ModStart> ext2_xattr_cache_insert ( new_bh ) ; if ( header ) { new_bh = ext2_group_first_block_no ( sb, EXT2_I ( inode ) -> i_block_group",0
396,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
397,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( image -> rows > 0 ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
398,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
399,<S2SV_ModStart> ) AcquireQuantumMemory ( ( unsigned char * ),0
400,,0
401,,0
402,"<S2SV_ModStart>, u4_y_offset ; <S2SV_ModEnd> UWORD32 u4_y_dst_offset = <S2SV_ModStart> ) ; else { <S2SV_ModStart> ) ; } }",0
403,<S2SV_ModStart> VP9_LAST_FLAG ) { <S2SV_ModEnd> if (!,0
404,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
405,<S2SV_ModStart> TX_SIZE tx_size = <S2SV_ModEnd> get_uv_tx_size ( mbmi <S2SV_ModStart> ( mbmi ) <S2SV_ModEnd> ; const BLOCK_SIZE <S2SV_ModStart> ) ) ; <S2SV_ModEnd> for ( r,0
406,<S2SV_ModStart> ++ ) { <S2SV_ModEnd> src += src_stride,0
407,<S2SV_ModStart> { rowstoread = ( <S2SV_ModStart> ) % rowsperstrip ),0
408,<S2SV_ModStart> ; } } <S2SV_ModEnd> return 0 ;,0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> = x ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
410,<S2SV_ModStart> num & ( 1U << <S2SV_ModEnd> ( number -,0
411,"<S2SV_ModStart> ( buf, 1 <S2SV_ModEnd>, w,",0
412,"<S2SV_ModStart> ; uint16_t attr_len = 0 <S2SV_ModStart> ; if ( avp -> length < sizeof ( struct l2tp_avp_t ) + 2 ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", avp -> type, avp -> length ) ; return - 1 ; } attr_len = <S2SV_ModEnd> avp -> length <S2SV_ModStart> avp -> length <S2SV_ModEnd> ; MD5_Init (",0
413,,0
414,"<S2SV_ModStart> 0, 0 <S2SV_ModEnd> ) ; if",0
415,"<S2SV_ModStart> sock, sk ) ; memset ( sa, 0, sizeof ( * sa )",1
416,"<S2SV_ModStart> cpkt. length, cpkt. length",0
417,,0
418,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
419,<S2SV_ModStart> 0 ) { close ( gpsd_sock ) ; return ;,0
420,"<S2SV_ModStart>, & rlen, 0",1
421,"<S2SV_ModStart> * slavename ; if ( ( user = find_user ( curconn -> username ) )!= NULL ) { <S2SV_ModStart> = 0 ; md5data [ 0 ] = 0 ; } <S2SV_ModStart> ) md5data, strlen <S2SV_ModEnd> ( user -> <S2SV_ModStart> user -> password <S2SV_ModEnd> ), curconn <S2SV_ModStart> ) md5data, strlen <S2SV_ModEnd> ( user ->",0
422,"<S2SV_ModStart> ; if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart> { if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name,",0
423,<S2SV_ModStart> ; i < ( ut32 ),0
424,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
425,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
426,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteFujiEntry ) * c ) ;",0
427,<S2SV_ModStart> bd_addr ) { if ( bd_addr ),0
428,<S2SV_ModStart> i ; int nxip <S2SV_ModEnd> ; txid xmin <S2SV_ModStart> 4 ) ; nxip <S2SV_ModEnd> = buf -> <S2SV_ModStart> ; if ( nxip <S2SV_ModEnd> < 0 || <S2SV_ModStart> || nxip > nxip <S2SV_ModEnd> ) goto bad_format,0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
430,<S2SV_ModStart> epoll_ ) ; if ( count > OE_SSIZE_MAX ) { ret = - EINVAL ; OE_RAISE_ERRNO ( OE_EINVAL ) ; return ret ; },0
431,"<S2SV_ModStart> = parse_global_option ( CMD_INITIALIZE <S2SV_ModEnd>, NULL,",0
432,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_NAME_MAX : * ( size_t * ) val = ms -> elf_name_max ; return 0 ;,0
433,<S2SV_ModStart> = EXT4_JOURNAL ( page_mu ( page ) <S2SV_ModEnd> ) ; if,0
434,<S2SV_ModStart> 1 ) ; if (! trak ) goto exit ;,0
435,"<S2SV_ModStart> 17 ] ; size_t <S2SV_ModEnd> plen ; md5_state_t <S2SV_ModStart> ; # endif memset ( md5data, 0, sizeof ( md5data ) ) ; <S2SV_ModStart> = 0 ; memset ( md5data, 0, sizeof ( md5data ) ) ; <S2SV_ModStart> = '\\0' ; memset ( md5data, 0, sizeof ( md5data ) ) ;",0
436,<S2SV_ModStart> ; if ( <S2SV_ModEnd> Prefix!= NULL,1
437,<S2SV_ModStart> ; if ( i + 1 < NCH ( n ) &&,0
438,<S2SV_ModStart> ( ) ; g_hash_table_remove_all ( headers ) ;,0
439,"<S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst,",0
440,,0
441,"<S2SV_ModStart>, obj_tlen ; u_int <S2SV_ModEnd> hexdump ; u_int <S2SV_ModStart> ( ndo, ""%s"", obj_tlen <S2SV_ModEnd> ) ) ;",0
442,"<S2SV_ModStart> mbmi, const MV <S2SV_ModEnd> * ref =",0
443,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ) )",0
444,<S2SV_ModStart> skb -> len <S2SV_ModEnd> ) < 0,0
445,<S2SV_ModStart> ) return ; <S2SV_ModEnd> DEBUGMSGTL ( ( <S2SV_ModStart> st ) ; <S2SV_ModEnd> } netsnmp_init_mib_internals (,0
446,"<S2SV_ModStart> { fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ], O_RDWR ) <S2SV_ModStart> ( fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd, T",0
447,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
448,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s,",0
449,<S2SV_ModStart> krb5_error_code iakerb_alloc_context ( void <S2SV_ModEnd> ) { iakerb_ctx_id_t <S2SV_ModStart> = k5alloc ( <S2SV_ModEnd> ) ; if,0
450,<S2SV_ModStart> = DirectClass ; image = ( Image * ) NULL ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> bitmapDC = CreateCompatibleDC,0
451,<S2SV_ModStart> )!= START_CODE_PREFIX && u4_start_code!= USER_DATA_START_CODE,0
452,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { ret = <S2SV_ModEnd> - EINVAL ; <S2SV_ModStart> - EINVAL ; goto out ; }",1
453,<S2SV_ModStart> ; if ( mono_class_is_valid ( klass ) &&,0
454,<S2SV_ModStart> ; int tmp ; if ( count > sizeof ( buf ) ) return - EINVAL,0
455,"<S2SV_ModStart> char * last_elem = result ; char * last_elem = result ; if ( * name == '$' ) { const char * repl ; size_t len ; if ( ( ( strncmp ( & name [ 1 ], ""ORIGIN"", 6 ) == 0 && ( strncmp ( & name [ 1 ], ""PLATFORM"", 8 ) == 0 && ( strncmp ( & name [ 1 ], ""PLATFORM}"", 7 ) == 0 && ( strncmp ( & name [ 2 ], ""PLATFORM}"", 7 ) == 0 && ( strncmp ( & name [ 2 ], ""PLATFORM}"", 7 ) == 0 && ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( strncmp ( & name [ 2 ], ""PLAT",0
456,<S2SV_ModStart> ) H264SwDecMalloc ( <S2SV_ModEnd> ) ; if,0
457,<S2SV_ModStart> drop ; } <S2SV_ModEnd> opt -> optlen,0
458,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
459,"<S2SV_ModStart> goto errout ; memset ( info, 0, sizeof ( * info ) ) ;",0
460,<S2SV_ModStart> krb5_key_data * key_data ; if ( n_key_data == NULL ) return NULL <S2SV_ModStart> == NULL ) { free ( key_data_in ) ; <S2SV_ModStart> goto cleanup ; },0
461,"<S2SV_ModStart> * self, Py_ssize_t <S2SV_ModEnd> idx, PyObject",0
462,<S2SV_ModStart> ] ) ; if ( nByte > 0 ) { rc = SQLITE_NOMEM ; },0
463,<S2SV_ModStart> filp ) { <S2SV_ModEnd> return 0 ;,0
464,"<S2SV_ModStart> * orelse, string type_comment, <S2SV_ModStart>. orelse = type_comment <S2SV_ModEnd> ; p ->",0
465,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> MYISAM_EXPORTED,0
466,,0
467,"<S2SV_ModStart> UINT error ; if (! Stream_Read_UINT16 <S2SV_ModEnd> ( s, <S2SV_ModStart> eventId ) ; if (! Stream_Read_UINT32 <S2SV_ModEnd> ( s,",0
468,"<S2SV_ModStart> -> socket, ""%s"", <S2SV_ModStart> -> socket, ""%s"",",1
469,"<S2SV_ModStart> struct flowi6 fl6 ; int ret <S2SV_ModStart> daddr ) ; ret = <S2SV_ModEnd> ip6_xmit ( sk <S2SV_ModStart> np -> tclass, & fl6 <S2SV_ModStart> np -> tclass, & fl6 ) ; if ( ret ) return ret <S2SV_ModEnd> ; } <S2SV_null>",0
470,<S2SV_ModStart> ; MATLAB_KO : if ( clone_info!= ( const ImageInfo * ) NULL ),0
471,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
472,,0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,"<S2SV_ModStart> ( psf = psf_calloc <S2SV_ModEnd> ( 1,",0
475,<S2SV_ModStart> void fix_interp_filter ( VP9_COMMON <S2SV_ModEnd> * cm ),0
476,"<S2SV_ModStart> ) { MACROBLOCK <S2SV_ModEnd> const x = <S2SV_ModStart> = 0 ; vpx_setup_src_planes <S2SV_ModEnd> ( x, <S2SV_ModStart> subsampling_y ) ; <S2SV_ModEnd> vpx_memset ( xd",0
477,"<S2SV_ModStart> htc_request_check_host_hdr ( hp, 0",0
478,,0
479,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> sizeof ( tETH_HDR ),1
480,<S2SV_ModStart> ; ps_dec -> u4_cur_slice_num = 0 ; ps_dec -> u4_cur_slice_num = 0 ; ps_dec ->,0
481,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> * karg ; <S2SV_ModEnd> struct pci_dev * <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( (",0
482,<S2SV_ModStart> char * ) AcquireQuantumMemory <S2SV_ModEnd> ( image ->,0
483,"<S2SV_ModStart> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", <S2SV_ModEnd> argv ) ;",0
484,"<S2SV_ModStart> ; if ( n -> order < EXIF_BYTE_ORDER_INTEL ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if (",0
485,,0
486,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> unbind_ports ( void <S2SV_ModStart> 1 ) ; if (! opt ) return - 1 ; <S2SV_ModStart>. next ; if (! opt ) return - 1 ; <S2SV_ModStart> 0 ; } return 0 ;,0
487,<S2SV_ModStart> void ) { recovery_delete_character ( ) ;,0
488,"<S2SV_ModStart> ( interface, ENC624J600_EHT1, hashTable [ 0 ] ) ; enc624j600WriteReg ( interface, ENC624J600_EHT2, hashTable [ 1 ] ) ; enc624j600WriteReg ( interface, ENC624J600_EHT2, hashTable [ 2 ] ) ; enc624j600WriteReg ( interface, ENC624J600_EHT3, hashTable [ 3 ] ) ; enc624j600WriteReg ( interface, ENC624J600_EHT4, hashTable [ 3 ] ) ; TRACE_DEBUG ( "" <S2SV_blank> <S2SV_blank> EHT1 <S2SV_blank> = <S2SV_blank> %04"" PRIX16 ""\\r\\n"", enc624j600ReadReg ( interface, ENC624J600_EHT2 ) ) ; TRACE_DEBUG ( "" <S2SV_blank> <S2SV_blank> EHT2 <S2SV_blank> = <S2SV_blank> %04"" PRIX16 ""\\r\\n"", enc624j600ReadReg ( interface, ENC624J600_EHT2 ) ) ; TRACE_DEBUG ( "" <S2SV_blank> <S2SV_blank> EHT2 <S2SV_blank> = <S2SV_blank> %04"" PRIX16",0
489,,0
490,,0
491,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char * print_object <S2SV_ModStart> = 0 ; int ret = 0 ; <S2SV_ModStart> child ) { ret = print_value ( child, depth, fmt ) ; if ( ret ) len += strlen ( ret ) + 2 + ( fmt? 2 + depth : 0 ) ; else fail = 1 ; child = child -> next ; } if (! fail ) { out = ( char * ) cJSON_malloc ( len ) ; if (! out ) fail = 1 ; * ptr ++ = '\\n' ; * ptr ++ = '\\n' ; * ptr ++ = '\\n' ; * ptr ++ = '\\n' ; * ptr ++ = '\\n' ; * ptr ++ = '\\n' ; * ptr ++ = '\\n' ; * ptr ++ = 0 ; for ( i = 0 ; i < numentries ; ++ i ) { if ( fmt ) * ptr ++ = '\\n' ; * ptr ++ = '\\n' ; * ptr ++ = '\\n' ; * ptr ++ = '\\n' ; * ptr ++ = '\\",0
492,<S2SV_ModStart> sk ) ; other = unix_peer ( sk ) ; if ( other ) { <S2SV_ModStart> ( other ) <S2SV_ModEnd>!= sk ) <S2SV_ModStart> wait ) ; <S2SV_ModEnd> writable = 0 <S2SV_ModStart> = 0 ; <S2SV_ModEnd> sock_put ( other,0
493,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; sendClean ( outputbuffer ) ;",0
494,<S2SV_ModStart> ( OM_uint32 ) KRB5_BAD_MSIZE <S2SV_ModEnd> ; return GSS_S_DEFECTIVE_TOKEN,0
495,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vp9_ref_frame_t * ) ; ( void ) ctx",0
496,<S2SV_ModStart> plug ) ; <S2SV_ModEnd> put_ioctx ( ctx,0
497,,0
498,"<S2SV_ModStart> s } ; <S2SV_ModEnd> uECC_word_t p [ <S2SV_ModStart> curve ) ; if ( uECC_vli_isZero ( p, curve ) ) { return 0 ; }",0
499,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|dao-truncated]"" <S2SV_ModEnd> ) ) ;",0
500,<S2SV_ModStart> ; } else if ( pool -> free_total < pool -> free_total ) { free ( buf ) ; return ; } else,0
501,"<S2SV_ModStart> cp ) { const char hex [ ] = ""00112233445566778899aAbBcCdDeEfF"" ; const char hex [ ] = ""00112233445566778899aAbBcCdDeEfF"" ; const char hex [ ] = ""00112233445566778899aAbBcCdDeEfF"" ; const char hex [ ] = ""00112233445566778899aAbBcCdDeEfF"" ; const char hex [ ] = ""00112233445566778899aAbBcCdDeEfF"" ; const char hex [ ] = ""00112233445566778899aAbBcCdDeEfF"" ; const char hex [ ] = ""00112233445566778899aAbBcCdDeEfF"" ; const char hex [ ] = ""00112233445566778899aAbBcCdDeEfF"" ; const char hex [ ] = ""00112233445566778899aAbBcCdDeEfF",0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
503,"<S2SV_ModStart>, * pixd = NULL <S2SV_ModStart> == NULL ) { <S2SV_ModStart> NULL ) ; }",0
504,"<S2SV_ModStart> = 256 ; memset ( v_fn_ptr, 0, sizeof ( v_fn_ptr ) ) ;",0
505,<S2SV_ModStart> + 1 ; size_t <S2SV_ModEnd> size = overhead,0
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
507,"<S2SV_ModStart> i, target_bits_per_mb, target_bits_per_mb <S2SV_ModStart> ; do { <S2SV_ModEnd> bits_per_mb_at_this_q = ( <S2SV_ModStart> ) vp9_rc_bits_per_mb ( target_bits_per_frame <S2SV_ModEnd>, i,",0
508,<S2SV_ModStart> ; value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1101WritePhyReg (,0
509,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
510,"<S2SV_ModStart> int dst_stride, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart> plane ] ; <S2SV_ModEnd> if ( plane",0
511,"<S2SV_ModStart> } end ++ ; } if ( current == end ) { xsltTransformError ( NULL, NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> NULL <S2SV_blank> pattern\\n"" )",0
512,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_completed_io_list ) ;,0
513,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> cb ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart>, 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> show_frame ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
514,<S2SV_ModStart> ) ; } if ( argc > 1 ) { <S2SV_ModStart> ) ; } },0
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { q = osStrchr <S2SV_ModEnd> ( p +,1
516,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
517,<S2SV_ModStart> KEY_FRAME ) { memset <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd ->,0
518,"<S2SV_ModStart> error_t error ; <S2SV_ModEnd> Enc624j600Context * context <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ERXRDPT <S2SV_ModEnd> ) { enc624j600ReadBuffer <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_ERXDATA, ( ENC624J600_ERXDATA, ( ENC624J600_ERXDATA, ( ENC624J600_ERXDATA, ( ENC624J600_ERXDATA, ( ENC624J600_ERXDATA, ( ENC624J600_ERXDATA, ( ENC624J600_ERXDATA, ( ENC624J600_ERXDATA, ( ENC624J600_ERXDATA, ( ENC624J600_ERXDATA, ( ENC624J600",0
519,,0
520,"<S2SV_ModStart> ( LOG_ERR, ""%s"", <S2SV_ModStart> ( LOG_ERR, ""%s"",",0
521,<S2SV_ModStart> 2 ] ; <S2SV_ModEnd> } state -> <S2SV_ModStart> 2 ] ; <S2SV_ModEnd> } state ->,0
522,<S2SV_ModStart> err = - <S2SV_ModEnd> EALREADY ; if,0
523,<S2SV_ModStart> POLL_IN ) ; <S2SV_ModEnd> perf_event_wakeup ( handle <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
524,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> u16 <S2SV_ModEnd> utf8s_to_utf16s ( const <S2SV_ModStart> ( * s <S2SV_ModEnd> ) { if <S2SV_ModStart> ( u >= PLANE_SIZE ) { * op ++ = ( wchar_t ) u ; <S2SV_ModEnd> u -= PLANE_SIZE <S2SV_ModStart> PLANE_SIZE ) { * op ++ = ( wchar_t ) u ; <S2SV_ModEnd> } else { <S2SV_ModStart> } else { * op ++ = * s ++ ; len -- <S2SV_ModEnd> ; } s,0
525,"<S2SV_ModStart> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" <S2SV_ModEnd> ) ; if",0
526,,0
527,"<S2SV_ModStart> const node * n, const node_t * n <S2SV_ModEnd>, int is_async <S2SV_ModStart> is_async ) { const node * const n = n -> n_col_offset ; <S2SV_ModStart> is_async ) { const node * const n = n -> n_col_offset ;",0
528,"<S2SV_ModStart> ; pgd = pgd_offset <S2SV_ModEnd> ( mm, <S2SV_ModStart> ; out : flush_tlb <S2SV_ModEnd> ( ) ;",0
529,<S2SV_ModStart> ; if ( <S2SV_ModEnd> sn_coap_protocol_malloc_copy ( handle,0
530,<S2SV_ModStart> test_name ) ; free ( test_name ) ;,0
531,<S2SV_ModStart> ; row < raw_width <S2SV_ModEnd> ; row ++ <S2SV_ModStart> ; row < raw_width <S2SV_ModEnd> ; row ++,0
532,<S2SV_ModStart> len ) ; <S2SV_ModEnd> param -> data_size,0
533,<S2SV_ModStart> ; if ( quantum_info!= ( QuantumInfo * ) NULL <S2SV_ModEnd> ) { quantum_info,0
534,"<S2SV_ModStart> bfq_idle_slice_timer_body ( bfqq, true",0
535,<S2SV_ModStart> ; length += <S2SV_ModEnd> update_prepare_bounds ( context,0
536,,0
537,"<S2SV_ModStart> int plane ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
538,,0
539,"<S2SV_ModStart> * err = read <S2SV_ModEnd> ( & reader <S2SV_ModStart> reader. superblock, & reader. superblock",0
540,<S2SV_ModStart> -> ranges = safe_calloc <S2SV_ModEnd> ( sizeof (,0
541,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flags & VP8_EFLAG_NO_UPD_GF <S2SV_ModStart> flags & VP8_EFLAG_FORCE_GF <S2SV_ModEnd> ) { ctx,0
542,"<S2SV_ModStart> ; if ( quantum_info!= ( QuantumInfo * ) NULL ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if (",0
543,<S2SV_ModStart>! head ) <S2SV_ModEnd> return - EINVAL <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
544,<S2SV_ModStart> u_char * pptr <S2SV_ModEnd> ) { int <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( & tptr [ 0 ] ) ;,0
545,,0
546,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
547,"<S2SV_ModStart> ( tokbuf, ""%s"",",0
548,"<S2SV_ModStart> iad_num ) ; if ( nalts [ iad_num ] == 0 ) { dev_err ( ddev, ""invalid <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d: <S2SV_blank> %d\\n"", cfgidx, nalts [ iad_num ] ) ; return - EINVAL ; }",0
549,"<S2SV_ModStart> 0, 0 <S2SV_ModEnd> ) ; if",0
550,<S2SV_ModStart> ; distortion = vpx_variance16x16 <S2SV_ModEnd> ( * (,1
551,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface",0
552,<S2SV_ModStart> ; maxlen = <S2SV_ModEnd> ( char * <S2SV_ModStart> ) + maxlen <S2SV_ModEnd> ; va_start ( <S2SV_ModStart> -> headindex = <S2SV_ModEnd> ( char *,0
553,<S2SV_ModStart> ( ctx -> priv <S2SV_ModEnd> -> alg_priv ) <S2SV_ModStart> ( ctx -> priv <S2SV_ModEnd> -> alg_priv ),0
554,,0
555,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
556,<S2SV_ModStart> + 2 * L -> stacksize <S2SV_ModEnd> ; if (,0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,"<S2SV_ModStart>, * s <S2SV_ModEnd> ; int quote <S2SV_ModStart> errstr ) { <S2SV_ModEnd> ast_error ( n",0
559,<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> break ; } <S2SV_ModEnd> if ( strcmp <S2SV_ModStart> ) break ; <S2SV_ModEnd> SvcInternal * const,0
560,<S2SV_ModStart> ) ; } fclose ( mvs ) ;,0
561,<S2SV_ModStart> self ) { size_t <S2SV_ModEnd> i ; PyObject,1
562,,1
563,<S2SV_ModStart> ) ) { if ( mysql_errno ( imp_dbh -> pmysql ) ),0
564,"<S2SV_ModStart> ) || ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & size ) <S2SV_ModStart> ( need_close || TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & size )",0
565,<S2SV_ModStart> struct ieee_802_11_phdr phdr = { 0 },0
566,<S2SV_ModStart> ; sh = safe_calloc <S2SV_ModEnd> ( hdrlen +,0
567,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> ; UINT32 tempWidth ; UINT16 b_val <S2SV_ModStart> -> ColorLossLevel ; <S2SV_ModEnd> for ( y,0
568,<S2SV_ModStart> ( - EINVAL ) ; kfree ( inverts,0
569,,0
570,"<S2SV_ModStart> TX_MODE read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r )",1
571,,0
572,,0
573,<S2SV_ModStart> pSelect -> pSrc ; assert ( pSelect -> nSrc > 0 ),0
574,"<S2SV_ModStart>, NFS4_CALLBACK_BUFSIZE, & cb_info -> serv_buf <S2SV_ModEnd> ) ; if",0
575,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
576,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
577,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
578,"<S2SV_ModStart> do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> s, 0 )",1
579,,0
580,<S2SV_ModStart> <S2SV_null> static const SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> return ( const SvcInternal_t <S2SV_ModEnd> * ) svc_ctx,1
581,,0
582,<S2SV_ModStart> char buffer [ 80 <S2SV_ModEnd> ] ; int,0
583,<S2SV_ModStart> buf ; { <S2SV_ModEnd> return TRUE ;,0
584,"<S2SV_ModStart>, table_start ; if ( read_xattrs_from_disk ( fd, & sBlk. s, no_xattrs, & table_start ) == 0 ) return FALSE ; if ( read_xattrs_from_disk ( fd, & sBlk. s, no_xattrs, & table_start ) == 0 ) return FALSE ; if ( read_uids_guids ( & table_start ) == 0 ) return FALSE ; if ( parse_exports_table ( & table_start ) == FALSE ) return FALSE ; if ( parse_exports_table ( & table_start ) == FALSE ) return FALSE ; if ( read_fragment_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( no_xattrs ) sBlk. s.",0
585,"<S2SV_ModStart> rule * rule, struct envnode * node <S2SV_ModStart> count = 0 <S2SV_ModEnd> ; for ( <S2SV_ModStart> ; } } node = createnode ( keybuf, eq + 1 ) ; node = createnode ( node ) ; if ( node == NULL ) { freenode ( node ) ; }",0
586,<S2SV_ModStart> -> seg ; vpx_clear_system_state <S2SV_ModEnd> ( ) ; <S2SV_ModStart> int segment ; vpx_memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ; } } vpx_clear_system_state ( ) ;,0
587,"<S2SV_ModStart>, Module_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Interactive_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef",0
588,"<S2SV_ModStart> } logfile_fd = open_safe <S2SV_ModEnd> ( log_path,",0
589,<S2SV_ModStart> ; } # else ( void ) cpi ; #,1
590,"<S2SV_ModStart>, * StartClean <S2SV_ModEnd> ; double * <S2SV_ModStart> t ++ ; outpos = outputbuffer ; outpos = outputbuffer ; outpos = outputbuffer ; outpos += sprintf ( outpos, ""\\\\axo@setObject{%s}%%\\n{%s%c}"", s, t, TERMCHAR ) ; if ( strcmp ( nameobject, ""AxodrawWantsPDF"" ) == 0 ) { outpos += sprintf ( outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", VERSION, SUBVERSION ) ; fprintf ( outfile, ""%s"", outputbuffer ) ; return ( 0 ) ; } else { fprintf ( stderr, ""%s: <S2SV_blank> Illegal <S2SV_blank> request <S2SV_blank> in <S2SV_blank> identification <S2SV_blank> string <S2SV_blank> [0]: <S2SV_blank> %s\\n"", axohelp, nameobject ) ; if ( argbuf ) free ( argbuf ) ; return ( 0 ) ; } } StartClean = outpos ; nameobject = t ; while ( * t!='<S2SV_blank>'|| * t!= '\\n' ) { if ( strcmp ( nameobject, ""AxodrawWantsPDF"" )",0
591,"<S2SV_ModStart> ; tmp = _PyObject_GetAttrId <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = _PyObject_GetAttrId <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = _PyObject_GetAttrId <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = _PyObject_GetAttrId <S2SV_ModEnd> ( obj,",0
592,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
593,"<S2SV_ModStart> ) ) goto err_delete <S2SV_ModEnd> ; tos_off = <S2SV_ModStart> ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; err_delete : kfree ( alink -> dscp_map ) ; err_delete : nfp_abm_u32_knode_delete ( alink, knode ) ; err_delete : kfree ( iter ) ; <S2SV_ModEnd> } match ->",0
594,<S2SV_ModStart>. g_pass = <S2SV_ModEnd> pass? VPX_RC_LAST_PASS <S2SV_ModStart> : VPX_RC_ONE_PASS ; <S2SV_ModEnd> stream -> cx_time,0
595,,0
596,<S2SV_ModStart> data_end ) { <S2SV_ModEnd> assert ( tile_rows <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> aligned_cols ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) * aligned_cols <S2SV_ModEnd> ) ; for,0
597,<S2SV_ModStart> vp9_decoder_create ( const VP9D_CONFIG <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> ) ) ; <S2SV_ModEnd> vp9_zero ( * <S2SV_ModStart> ) ) ; <S2SV_ModEnd> pbi -> oxcf <S2SV_ModStart> = 1 ; <S2SV_ModEnd> pbi -> ready_for_new_data <S2SV_ModStart> = 1 ; <S2SV_ModEnd> vp9_init_dequantizer ( cm,0
598,<S2SV_ModStart> dref ) { if (! ( ( GF_DataInformationBox * ) s ) -> dref ) { <S2SV_ModStart> ) ) ; },0
599,<S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> || opt -> opt.,1
600,"<S2SV_ModStart> tree2tok ( struct vpx_token <S2SV_ModEnd> * tokens, <S2SV_ModStart> tokens, const vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> do { const vpx_tree_index <S2SV_ModEnd> j = tree",0
601,"<S2SV_ModStart> = VPX_CODEC_OK ; <S2SV_ModEnd> res = validate_img <S2SV_ModStart> ctx, img <S2SV_ModEnd> ) ; vpx_codec_pkt_list_init",0
602,"<S2SV_ModStart>, & len, 0",1
603,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
604,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int64_t <S2SV_ModEnd> frame_max_bits ( const <S2SV_ModStart> oxcf ) { int64_t <S2SV_ModEnd> max_bits = ( <S2SV_ModStart> = ( ( int64_t <S2SV_ModEnd> ) rc -> <S2SV_ModStart> -> av_per_frame_bandwidth * <S2SV_ModEnd> max_bits = 0,0
605,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
606,,0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
608,"<S2SV_ModStart> range_max ) { int <S2SV_ModEnd> value ; int <S2SV_ModStart> gbc ) ; <S2SV_ModEnd> while ( 1 <S2SV_ModStart> { if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( <S2SV_ModStart> AVERROR_INVALIDDATA ; } if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALID",0
609,,0
610,"<S2SV_ModStart>, packet -> http_content_line. ptr = NULL, packet ->",0
611,"<S2SV_ModStart> { q = QueueAuthenticPixels <S2SV_ModEnd> ( image, <S2SV_ModStart>, dds_info, exception,",0
612,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL ) <S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL )",1
613,<S2SV_ModStart> action ) ; output [ 0 ] = 0 ;,0
614,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; sendClean ( outputbuffer ) ;",1
615,"<S2SV_ModStart> return FALSE ; Stream_Read_UINT32 ( s, rdp -> autodetect -> bandwidthMeasureTimeDelta ) ;",0
616,,0
617,<S2SV_ModStart> # if CONFIG_MULTITHREAD <S2SV_ModEnd> vp8_decoder_remove_threads ( pbi,1
618,,0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,,0
621,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
622,"<S2SV_ModStart> vp9_coeff_stats * coef_branch_ct, vpx_coeff_probs_model * coef_counts",0
623,<S2SV_ModStart> { } ; <S2SV_ModEnd> r = ioctl,0
624,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static void su3000_frontend_attach ( struct dvb_usb_adapter * d ) { u8 obuf [ 3 ] = { 0xe, 0x80, 0 } ; u8 ibuf [ 1 ] = { 0xe, 0x80, 0 } ; u8 ibuf [ 2 ] = { 0xe, 0x80, 0 } ; u8 ibuf [ 2 ] = { 0xe, 0x80, 0 } ; u8 ibuf [ 2 ] = { 0xe, 0x80, 0 } ; u8 ibuf [ 2 ] = { 0xe, 0x02, 0 } ; if ( dvb_usb_generic_rw ( d -> dev, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; mdelay ( 300 ) ; obuf [ 0 ] = 0x02 ; obuf [ 1 ] = 0x02 ; obuf [ 2 ] = 0x83 ; obuf [ 2 ] = 0 ; if ( dvb_usb_generic",0
625,,0
626,,0
627,<S2SV_ModStart> = TRUE ; <S2SV_ModEnd> bufp = find_optparam,0
628,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> cJSON_CreateFloatArray ( double <S2SV_ModStart> 0 ; a < count && <S2SV_ModEnd> i < count <S2SV_ModStart> i ) { if ( <S2SV_ModEnd> cJSON_CreateFloat ( numbers <S2SV_ModStart> ] ) ; else suffix_object ( p, n ) ; } return 0 <S2SV_ModEnd> ; } <S2SV_null>",0
629,"<S2SV_ModStart> data_end ) { VP9Worker * const worker = & pbi -> tile_workers ; <S2SV_ModStart> int num_workers = MIN ( <S2SV_ModEnd> pbi -> oxcf <S2SV_ModStart> pbi -> common <S2SV_ModEnd> ; TileBuffer tile_buffers <S2SV_ModStart> tile_cols ) ; int num_workers = MIN ( <S2SV_ModEnd> pbi -> oxcf <S2SV_ModStart> pbi -> num_tile_workers, tile_cols ) ; CHECK_MEM_ERROR ( cm, pbi -> tile_workers, vpx_malloc ( num_threads * sizeof ( * pbi -> tile_workers ) ) ) ; for ( i = 0 ; i < num_workers ; ++ i ) { VP9Worker * const worker = & pbi -> tile_workers [ i ] ; ++ pbi -> num_tile_workers ; vpx_worker_init ( worker ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data2, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR",0
630,<S2SV_ModStart> ; offset = get4 <S2SV_ModEnd> ( ) + <S2SV_ModStart> ; len = get4 <S2SV_ModEnd> ( ) ;,0
631,,0
632,<S2SV_ModStart> -> error_code ) { <S2SV_ModStart> : NULL ; },0
633,<S2SV_ModStart> pocstruct_t * ps_cur_poc <S2SV_ModEnd> ; ih264d_free_dynamic_bufs (,0
634,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet ),0
635,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int getnum ( <S2SV_ModStart> = 0 ; <S2SV_ModEnd> a = a <S2SV_ModStart> '0' ; } <S2SV_ModEnd> return a ;,0
636,<S2SV_ModStart> GCSpropagate ) ; <S2SV_ModEnd> psurvival = sweepgen,0
637,<S2SV_ModStart> 0 ; else { ret = <S2SV_ModEnd> - EIO ; <S2SV_ModStart> - EIO ; goto err ; },0
638,<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart>!= PROTOCOL_EARLY ) { return NULL ; } <S2SV_ModEnd> memset ( buffer <S2SV_ModStart> buffer ) ; <S2SV_ModEnd> s_write ( c,0
639,"<S2SV_ModStart> cib, struct sockaddr_in <S2SV_ModEnd> * connection ) <S2SV_ModStart> struct sockaddr_in addr <S2SV_ModEnd> ; int ret_ga <S2SV_ModStart> = 0 ; <S2SV_ModEnd> struct addrinfo hints <S2SV_ModStart> struct addrinfo hints <S2SV_ModEnd> ; struct addrinfo <S2SV_ModStart> struct addrinfo hints <S2SV_ModEnd> ; struct addrinfo <S2SV_ModStart> struct addrinfo hints <S2SV_ModStart> struct addrinfo hints <S2SV_ModEnd> ; struct addrinfo <S2SV_ModStart> struct addrinfo hints <S2SV_ModEnd> ; struct addrinfo <S2SV_ModStart> struct addrinfo hints <S2SV_ModEnd> ; struct addrinfo <S2SV_ModStart> struct addrinfo hints ; int ret_ga ; struct addrinfo hints <S2SV_ModStart> struct addrinfo hints ; int ret_ga ; struct addrinfo hints ; int ret_ga ; struct addrinfo hints ; int ret_ga ; struct addrinfo hints ; int ret_ga ; struct addrinfo hints ; int ret_ga ; struct addrinfo hints ; struct addrinfo hints ; int ret_ga ; struct addrinfo hints ; int ret_ga ; struct addrinfo hints ; struct addrinfo hints ; struct addrinfo hints ; struct addrinfo hints ; struct addrinfo hints ; struct addrinfo hints ; struct addrinfo hints ; struct addrinfo hints ; struct addrinfo hints ; struct addrinfo hints ; struct addrinfo hints ; struct addrinfo hints ; struct addrinfo hints ; struct addrinfo hints ; struct addrinfo",0
640,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi,",0
641,"<S2SV_ModStart> ( ndo, ""%s"", icp -> icmp6_name <S2SV_ModEnd> ) ) ;",0
642,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command",0
643,<S2SV_ModStart> Image * image <S2SV_ModEnd> ; assert ( <S2SV_ModStart> MagickFalse ) { image = DestroyImageList ( image ) ; return ( DestroyImageList ( image ) ) ;,0
644,,0
645,<S2SV_ModStart> ; if ( chanmode_found && <S2SV_ModStart> ; if ( chanmode_found &&,0
646,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> - m + vpx_read_bit <S2SV_ModEnd> ( r )",1
647,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
648,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> ( REFERENCE_MODE ) vpx_read <S2SV_ModEnd> ( r,",0
649,"<S2SV_ModStart>! stream ) { <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; }",0
650,<S2SV_ModStart> nd_opt_len ) ; ND_TCHECK ( op -> nd_opt_len ) ;,0
651,<S2SV_ModStart> -> root_node = NULL <S2SV_ModEnd> ; return ERROR_SUCCESS,0
652,"<S2SV_ModStart> ( path, iter -> var_expand_table, iter -> var_expand_table <S2SV_ModEnd>, & error <S2SV_ModStart> ; if ( iter -> var_expand_table <S2SV_ModEnd> ) { auth_request_log_error",0
653,<S2SV_ModStart> -> level = 1 <S2SV_ModEnd> ; tok ->,0
654,<S2SV_ModStart> maxBitrate ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
655,<S2SV_ModStart> ( dpbSize ) ; if ( maxFrameNum < 0 ) return ( MEMORY_ALLOCATION_ERROR ),0
656,<S2SV_ModStart> = 0 ; if ( addrlen ) OE_RAISE_ERRNO ( OE_EINVAL ) ; <S2SV_ModStart> (! sock || addrlen ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_in <S2SV_ModStart> ( OE_EINVAL ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ; } if ( addrlen ) * addrlen = * addrlen ;,0
657,,1
658,"<S2SV_ModStart> FALSE ; } if (! <S2SV_ModStart>, s ) ) return FALSE",1
659,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; struct ipv6_txoptions <S2SV_ModStart> final ; } <S2SV_ModEnd> struct ipv6_txoptions *,0
660,,0
661,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, EPCR_EPOS | EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) & EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> } dm9000WriteReg ( DM9000_EPCR, EPCR_EPOS <S2SV_ModEnd> ) ; usleep",0
662,<S2SV_ModStart> pcmk_ok ) { if ( private -> command == NULL ) { <S2SV_ModStart> ) ) ; } <S2SV_ModStart> pcmk_ok ) { if ( private -> callback == NULL ) { <S2SV_ModStart> callback ) ) ; },0
663,<S2SV_ModStart> ; msg. msg_namelen = sizeof ( struct sockaddr_storage <S2SV_ModEnd> ) ; if,0
664,,0
665,<S2SV_ModStart> -> size ; if ( h -> size < 0 ) goto error ;,0
666,,0
667,,0
668,"<S2SV_ModStart> ( b, enc -> type <S2SV_ModEnd> ) )!=",0
669,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
670,"<S2SV_ModStart> client = user_data <S2SV_ModEnd> ; num_clients -- <S2SV_ModStart> num_clients ) ; <S2SV_ModEnd> crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client""",0
671,<S2SV_ModStart> * uv ; <S2SV_ModEnd> for ( uv <S2SV_ModStart> next ) { * p = thread -> twups ;,0
