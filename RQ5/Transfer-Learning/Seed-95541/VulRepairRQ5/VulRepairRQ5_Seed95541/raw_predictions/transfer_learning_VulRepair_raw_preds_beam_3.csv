,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
1,<S2SV_ModStart> ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ; if (,0
2,<S2SV_ModStart> 0 ) ; if ( writer -> stco ),0
3,"<S2SV_ModStart> item ) { return cJSON_Get ( array, item, 0 ) <S2SV_ModEnd> ; } <S2SV_null>",0
4,"<S2SV_ModStart> u64 nr, <S2SV_ModEnd> struct pt_regs * <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",1
5,<S2SV_ModStart> EXT4_EXTENTS_FLAG ) { <S2SV_ModEnd> struct grub_ext4_extent_header * <S2SV_ModStart> leaf ) { <S2SV_ModEnd> return - 1 <S2SV_ModStart> len ) ) { <S2SV_ModStart> return 0 ; } else { grub_disk_addr_t start ; start = grub_le_to_cpu16 ( ext [ i ]. start_hi ) ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext [ i ]. start ) ; return fileblock + start ; } } else { grub_disk_addr_t start ; start = grub_le_to_cpu16 ( ext [ i ]. start_hi ) ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext [ i ]. start ) ; return fileblock + start ; } } else { grub_disk_addr_t start ; start = grub_le_to_cpu16 ( ext [ i ]. start_hi ) ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext [ i ]. start ) ; return fileblock + start ; } } else { grub_error ( GRUB,0
6,"<S2SV_ModStart> fdct16 ( const tran_low_t <S2SV_ModEnd> in [ 16 <S2SV_ModStart> 16 ], tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> ] ) { tran_high_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step2 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step3 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t input [ 8 ] ; tran_high_t <S2SV_ModEnd> temp1, temp2 <S2SV_ModStart> ] ; { tran_low_t <S2SV_ModEnd> s0, s1 <S2SV_ModStart>, s7 ; tran_high_t <S2SV_ModEnd> t0, t1 <S2SV_ModStart>, t3 ; tran_high_t <S2SV_ModEnd> x0, x1 <S2SV_ModStart> x2, x3 ; tran_high_t x1, x2, x3 ; tran_low_t x3 ; tran_low_t x4 ; tran_low_t x5 ; tran_low_t x6 ; tran_low_t x7 ; tran_low_t x8 ; tran_low_t x9 ; tran_low_t x10 ; tran_low_t x11 ; tran_low_t x12 ; tran_low_t x13 ; tran_low",0
7,"<S2SV_ModStart> ( ) ; parse_ciff ( save + hlen, len - hlen, 0 ) ; } if ( parse_tiff ( save + 6 ) ) apply_tiff ( ) ; fseek ( ifp, save + len, SEEK_SET ) ; <S2SV_ModStart> # ifdef LIBRAW_LIBRARY_BUILD <S2SV_ModEnd> # endif return",0
8,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> search_filter_level ( const <S2SV_ModStart> search_filter_level ( const YV12_COMMON <S2SV_ModEnd> * sd, <S2SV_ModStart> partial_frame ) { VP9_COMMON_EXT <S2SV_ModEnd> * const cm <S2SV_ModStart> & cpi -> common_ext <S2SV_ModEnd> ; struct loopfilter <S2SV_ModStart> ) ; int best_err ; int filt_best ; int filt_direction = 0 ; int filt_mid = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; int ss_err [ MAX_LOOP_FILTER + 1 ] ; vpx_yv12_copy_y ( cm -> frame_to_show, & cpi -> last_frame_uf ) ; best_err = try_filter_frame ( sd, cpi, filt_mid, partial_frame ) ; filt_best = filt_mid ; ss_err [ filt_mid ] = best_err ; while ( filter_step > 0 ) { const int filt_high = MIN ( filt_mid + filter_step, max_filter_level ) ; const int filt_low = MAX ( filt_mid - filter",0
9,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
10,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ++ i ) vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( usehp ) vpx_write <S2SV_ModEnd> ( w,",1
11,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } else { <S2SV_ModEnd> request -> rxBlockSzx <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; } <S2SV_ModStart> ( ) ) { <S2SV_ModStart> ( ) ; },1
12,"<S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; }",0
13,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> construct_get_dest_keyring ( struct <S2SV_ModStart> * authkey ; int ret ; <S2SV_ModStart> dest_keyring ) ; ret = key_read_state ( dest_keyring, & key_state ) ; if ( ret < 0 ) return ret ; <S2SV_ModEnd> switch ( cred <S2SV_ModStart> ) ; } * _dest_keyring = dest_keyring ; return 0 ;",0
14,<S2SV_ModStart> = create_spnego_ctx ( 0,0
15,<S2SV_ModStart> ; tm = g_localtime <S2SV_ModEnd> ( & t,0
16,<S2SV_ModStart> length ) ; if ( strlen ( password )!= 0 ) { <S2SV_ModStart> ) ) ; },0
17,<S2SV_ModStart> == p ) { * errnop = ERANGE ; <S2SV_ModStart> goto not_found ; },0
18,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",1
19,<S2SV_ModStart> = 0 ; if ( <S2SV_ModStart> & timeout ) == 0 ) { return false ; } <S2SV_ModEnd> return FD_ISSET,0
20,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> detect_transition_to_still ( struct <S2SV_ModStart> last_decay_rate ) { bool trans_to_still = false <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( still_interval > MIN_GF_INTERVAL <S2SV_ModEnd> ) { int <S2SV_ModStart> j ; const TWO_PASS <S2SV_ModEnd> * position = <S2SV_ModStart> * position = TWO_PASS <S2SV_ModEnd> -> stats_in ; <S2SV_ModStart> == input_stats ( TWO_PASS <S2SV_ModEnd>, & tmp_next_frame <S2SV_ModStart> tmp_next_frame ) ) { trans_to_still = true ; break ; } <S2SV_ModEnd> if ( tmp_next_frame <S2SV_ModStart> pcnt_motion < 0.999 || tmp_next_frame. pcnt_inter > tmp_next_frame. pcnt_motion <S2SV_ModStart> break ; } if (! trans_to_still ) { <S2SV_ModStart> position ) ; } <S2SV_ModStart> == still_interval ) { <S2SV_ModStart> 1 ; } } return true <S2SV_ModEnd> ; } <S2SV_null>",0
21,"<S2SV_ModStart> inode ) ) { if ( io -> offset + size > i_size_read ( inode ) ) { printk ( KERN_EMERG ""%s: <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, inode -> i_ino ) ; return ret ; } <S2SV_ModStart> size ) ; }",0
22,<S2SV_ModStart> alg ) { <S2SV_ModEnd> if (! <S2SV_ModStart> CRYPTO_ALG_NEED_FALLBACK ) ) <S2SV_ModEnd> alg = crypto_alg_lookup,0
23,"<S2SV_ModStart> = GIT_PKT_NG ; if ( len < 3 ) goto out_err ; <S2SV_ModStart> += 3 ; <S2SV_ModEnd> ptr = strchr <S2SV_ModStart>,'<S2SV_blank>') ; if (! ptr ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> ref = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> ref ) ; memcpy ( pkt -> ref, line, len ) ; pkt -> ref [ len ] = '\\0' ; line = ptr + 1 ; <S2SV_ModEnd> ptr = strchr <S2SV_ModStart>, '\\n' ) ; if (! ptr ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> msg = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> msg ) ; memcpy ( pkt -> msg, line, len ) ; pkt -> msg [ len ] = '\\0' ; line = ptr + 1 ; <S2SV_ModEnd> ptr = strchr <S2SV_ModStart>, '\\n'",0
24,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> BYTE flags ; UINT32 <S2SV_ModEnd> length ; Stream_Read_UINT32 <S2SV_ModStart> = NEGO_STATE_FINAL ; return ;,0
25,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; if (,0
26,"<S2SV_ModStart> mntent, path, false",0
27,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } io -> io_cleanup = mem_cleanup ;,1
28,<S2SV_ModStart> & ( size_t ) ( value + 0.5 ) ) ; break ; } case RightShiftEvaluateOperator : { result = ( MagickRealType ) ( ( size_t ) pixel << ( size_t,0
29,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return ret?,0
30,<S2SV_ModStart> vpx_codec_enc_cfg_map_t * map ; if ( iface -> enc. cfg_maps == NULL ) return VPX_CODEC_INCAPABLE <S2SV_ModStart> ( map = ( vpx_codec_enc_cfg_map_t * ),0
31,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
32,"<S2SV_ModStart> void show_progress ( long <S2SV_ModEnd> frame_in, int <S2SV_ModStart> dx_time ) { if ( frame_in > 0 && frame_out > 0 )",0
33,"<S2SV_ModStart> NULL ) { PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> %s\\n"", fields [ i ]. name ) ;",0
34,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_ETXSTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXSTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXRTS <S2SV_ModEnd>, ECON1_TXRTS )",0
35,<S2SV_ModStart> ; value = ast2obj_number <S2SV_ModEnd> ( o -> <S2SV_ModStart> ; value = ast2obj_number <S2SV_ModEnd> ( o -> <S2SV_ModStart> ; value = ast2obj_number <S2SV_ModEnd> ( o ->,0
36,"<S2SV_ModStart> ( page && access ( page, R_OK ) == 0 ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } } else if (! strcmp ( func, ""page/set"" ) ) { char * wikitext = NULL, * page = NULL ; if ( ( ( wikitext = http_request_param_get ( req, ""text"" ) )!= NULL ) && ( ( page = http_request_param_get ( req, ""page"" ) )!= NULL ) ) { file_write ( page, wikitext ) ; http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } } else if ( ( ( wikitext = http_request_param_get ( req, ""text"" ) )!= NULL ) && ( ( page = http_request_param_get ( req, ""page"" ) )!= NULL ) ) { file_write ( page, wikitext ) ; http_response_printf ( res, ""success"" ) ; http_response_send ( res",0
37,"<S2SV_ModStart> low_var_thresh, int mb_rows, int mb_cols, <S2SV_ModEnd> double level = <S2SV_ModStart>.5 ) ; <S2SV_ModEnd> unsigned char * <S2SV_ModStart> pp_limits_buffer ; ; <S2SV_ModEnd> ( void ) <S2SV_ModStart> ) flag ; memset <S2SV_ModEnd> ( limits, <S2SV_ModStart> 16 ) ; vpx_post_proc_down_and_across_mb_row <S2SV_ModEnd> ( source -> <S2SV_ModStart> 8 ) ; vpx_post_proc_down_and_across_mb_row <S2SV_ModEnd> ( source -> <S2SV_ModStart> 8 ) ; vpx_post_proc_down_and_across_mb_row <S2SV_ModEnd> ( source ->",0
38,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; <S2SV_ModEnd> error = mb_cache_entry_insert <S2SV_ModStart> = mb_cache_entry_insert ( ext4_mb_cache, <S2SV_ModEnd> bh -> b_bdev <S2SV_ModStart> bh -> b_blocknr <S2SV_ModEnd> ) ; if <S2SV_ModStart> error ) { <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> hash ) ; <S2SV_ModEnd> } } <S2SV_null>",0
39,<S2SV_ModStart> ) ) ; * code = 200 ; * rlen = 0 ;,0
40,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct ip_options_rcu <S2SV_ModEnd> * ip_options_get_from_user ( <S2SV_ModStart> ip_options_get_from_user ( struct ip_options_rcu <S2SV_ModEnd> * net, <S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> return ip_options_get_finish (",0
41,"<S2SV_ModStart> ( ndo, ""[|truncated]"" <S2SV_ModEnd> ) ) ;",0
42,"<S2SV_ModStart> ) N_ ( ""E530: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'escape\' <S2SV_blank> in <S2SV_blank> string"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) N_ ( ""E531: <S2SV_blank> Use <S2SV_blank> \\""escape\\"" <S2SV_blank> in <S2SV_blank> string"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) N_ ( ""E532: <S2SV_blank> Not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> string"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) N_ ( ""E535: <S2SV_blank> Not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> string"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) N_ ( ""E536: <S2SV_blank> Not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> string"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) N_ ( ""E537: <S2SV_blank> Not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> string"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) N_ ( ""E538: <S2SV_blank> Not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> string"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) N_ ( ""E539: <S2SV_blank> Not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> string"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) N_ ( ""E535: <S2SV_blank> Not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> string"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) N_ ( ""E536: <S2SV_blank> Not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> string"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) N_ ( ""E536: <S2SV_blank> Not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> string",0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode <S2SV_ModStart>, & new_mode, & acl ) ; if ( ret <S2SV_ModEnd> ) goto out",0
44,"<S2SV_ModStart> size_t size ; size_t cps ; <S2SV_ModStart> / 8 ; cps = ( depth + 7 ) / 8 ; <S2SV_ModStart> ( cmpt -> cps_, cmpt -> cps_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ) { goto error ; } cmpt -> stream_ = ( inmem )? jas_stream_memopen2 ( 0, size ) : jas_stream_tmpfile ( ) ; if (! cmpt -> stream_ ) { goto error ; } if ( size > 0 ) { if ( size - 1 > LONG_MAX ) { goto error ; } if ( jas_stream_seek ( cmpt -> stream_, size - 1, SEEK_SET ) < 0 || jas_stream_putc ( cmpt -> stream_, '\\0' ) < 0 || jas_stream_putc ( cmpt -> stream_, '\\0' ) < 0 ) { goto error ; } if ( jas_stream_seek ( cmpt -> stream_, size - 1, SEEK_SET ) < 0 || jas_stream_putc ( cm",0
45,<S2SV_ModStart> dp == datalen || tdp == datalen,0
46,"<S2SV_ModStart> * req, u32 <S2SV_ModEnd> * acl_len ) <S2SV_ModStart> acl_len ) { <S2SV_ModEnd> uint32_t attrlen, <S2SV_ModStart> int status ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> xdr, OP_GETATTR ) )!= 0 ) goto out ; * acl_len = 0 ; if ( ( status = decode_op_hdr ( xdr, OP_GETACL ) )!= 0 ) goto out ; if ( ( status = decode_attr_bitmap ( xdr, bitmap ) )!= 0 ) goto out ; if ( unlikely ( bitmap [ 0 ] & FATTR4_WORD0_ACL ) ) { size_t hdrlen ; u32 recvd ; hdrlen = ( u8 * ) xdr -> p - ( u8 * ) iov -> iov_base ; recvd = req -> rq_rcv_buf. len - hdrlen ; if ( attrlen > recvd ) { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen, recvd ) ; return - EINVAL ; } xdr_read",0
47,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
48,"<S2SV_ModStart> ) ) { if ( snumber ( auth ) ) { <S2SV_ModStart> ; } } } if ( snumber ( tok ) ) { group = stok ( tok, "":"", & perms ) ; if ( group && * group ) { if ( snumber ( group ) ) { gid = ( int ) stoi ( group ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { gid = HTTP -> gid ; } else { gid = groupToID ( group ) ; } } if ( perms && snumber ( perms ) ) { mode = ( int ) stoiradix ( perms, - 1, NULL ) ; } else { mode = 0 ; } } else { mode = 0 ; } } else { dirs = auth ; auth = 0 ; } tok = dirs ; for ( tok = sclone ( dirs ) ; ( dir = stok ( tok, "","", & tok ) )!= 0 ; ) { path = httpMakePath ( state -> route, state -> configDir, dir ) ; if ( mprGetPathInfo ( path, & info ) == 0 && info. isDir ) { continue ; }",0
49,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> int number_aau ; <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; <S2SV_ModEnd> if ( addr,0
50,"<S2SV_ModStart> int res ; long long export_index_table [ indexes ] ; res = read_fs_bytes ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } SQUASHFS_INSWAP_LOOKUP_BLOCKS ( export_index_table, indexes ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } <S2SV_ModStart> inodes ) ; <S2SV_ModEnd> export_index_table [ indexes <S2SV_ModStart> indexes ] ; <S2SV_ModEnd> SQUASHFS_INSWAP_LOOKUP_BLOCKS ( export_index_table",0
51,<S2SV_ModStart> ; } else { <S2SV_ModStart> p1 ) ; },0
52,<S2SV_ModStart> ; if ( global -> codec == NULL ) { return - 1 ; } if ( <S2SV_ModStart> } if ( global -> codec == NULL ) { return - 1 ; } if (,0
53,"<S2SV_ModStart> preverify_ok, callback_ctx, 0 <S2SV_ModStart> 1 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
54,"<S2SV_ModStart> ; if ( crypto_memneq <S2SV_ModEnd> ( cmac,",0
55,"<S2SV_ModStart> cpi ) { <S2SV_ModEnd> const uint64_t bits_used <S2SV_ModStart> bits_used = cpi -> twopass <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> twopass. kf_group_bits = MAX ( cpi -> twopass. kf_group_bits, 0 ) ; <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> twopass. kf_group_bits = MAX ( cpi -> twopass. kf_group_bits, 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
56,"<S2SV_ModStart> EOFOp 0x07 char * magick_buffer <S2SV_ModEnd> ; Image * <S2SV_ModStart> char * ) magick_buffer <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( count!= 3 ) || ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return DestroyImageList ( image ) ; } <S2SV_ModStart>. x = ReadBlobLSBShort ( image ) ; image -> page. y = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; flags = ( MagickStatusType ) ReadBlobByte ( image ) ; image -> alpha_trait = flags & 0x01 <S2SV_ModEnd> ; image -> <S2SV_ModStart>. y = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; flags = ( MagickStatusType ) Read",0
57,"<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> altsetting [ 0 ]. desc. bNumEndpoints < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; error = - EINVAL ; goto err_free_urb ; }",1
58,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
59,"<S2SV_ModStart> * dir = ""/tmp"" <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> tmpname, dir )",0
60,<S2SV_ModStart> = value ; if ( 0 == ps_codec -> i4_pps_done ) { ps_codec -> i4_pps_done = 1 ; return IHEVCD_INVALID_HEADER ; },0
61,<S2SV_ModStart> ) ) { if ( shm_data_cur!= NULL && shm_data_cur -> state!= FTPWHO_STATE_IDLE ) { if ( shm_data_cur -> state!= FTPWHO_STATE_IDLE ) { if ( shm_data_cur -> state!= FTPWHO_STATE_IDLE ) { if ( shm_data_cur -> state!= FTPWHO_STATE_IDLE ) { if ( shm_data_cur -> state!= FTPWHO_STATE_IDLE ) { if ( shm_data_cur -> state!= FTPWHO_STATE_IDLE ) { if ( shm_data_cur -> state!= FTPWHO_STATE_IDLE ) { if ( shm_data_cur -> state!= FTPWHO_STATE_IDLE ) { if ( shm_data_cur -> state!= FTPWHO_STATE_IDLE ) { if ( shm_data_cur -> state!= FTPWHO_STATE_IDLE ) { if ( shm_data_cur -> state!= FTPWHO_STATE_IDLE ) { if ( shm_data_cur -> state,0
62,"<S2SV_ModStart> void vp9_setup_dst_planes ( <S2SV_ModEnd> const YV12_BUFFER_CONFIG * <S2SV_ModStart> const YV12_BUFFER_CONFIG * const <S2SV_ModStart> src -> y_buffer <S2SV_ModEnd>, src -> <S2SV_ModStart> src -> u_buffer <S2SV_ModEnd>, src -> <S2SV_ModStart> src -> v_buffer <S2SV_ModEnd> } ; const <S2SV_ModStart> int strides [ MAX_MB_PLANE <S2SV_ModEnd> ] = { <S2SV_ModStart> i ) { <S2SV_ModEnd> setup_pred_plane ( &",0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,<S2SV_ModStart> get_block = ocfs2_get_block <S2SV_ModEnd> ; return __blockdev_direct_IO,0
65,"<S2SV_ModStart>, ""%79s <S2SV_blank> %[^\\n]\\n"", def, strparm ) == 2 ) { if ( strparm [ 0 ] == \'""\' ) { isstring = true ; len = strlen ( strparm ) ; newstring = ( char * ) malloc ( len ) ; strparm [ len - 1 ] = 0 ; strcpy ( newstring, strparm + 1 ) ; } else if ( strparm [ 0 ] == '0' && strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else sscanf ( strparm, ""%i"", & parm ) ; for ( i = 0 ; i < numdefaults ; i ++ ) if (! strcmp ( def, defaults [ i ]. name ) ) { if (! isstring ) * defaults [ i ]. location = parm ; else * defaults [ i ]. location = ( int ) newstring ; break ; } } } fclose ( f ) ; } for ( i = 0 ; i < numdefaults ; i ++ ) if (! strcmp ( def, defaults [ i ]. name ) ) {",0
66,"<S2SV_ModStart> n ) { <S2SV_ModEnd> int kind ; <S2SV_ModStart> ; mod_ty mod <S2SV_ModEnd> ; assert ( <S2SV_ModStart> ':' ) ; return fstring_compile_expr_ex ( expr_start, expr_end, c, n, ""f-string"" <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
67,"<S2SV_ModStart> string ) { return cJSON_FindString <S2SV_ModEnd> ( object -> <S2SV_ModStart> object -> child, string ) <S2SV_ModEnd> ; } <S2SV_null>",0
68,<S2SV_ModStart> size ) ; if ( px -> ft == NULL ) { return FALSE ; },0
69,"<S2SV_ModStart> u_char * dat, u_int len <S2SV_ModStart>, val_l ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart>",0
70,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
71,"<S2SV_ModStart> int i ; const <S2SV_ModStart> src -> alpha_buffer, src -> uv_buffer <S2SV_ModStart> src -> uv_stride <S2SV_ModEnd> } ; for",0
72,"<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; for ( <S2SV_ModStart> ; msg -> msg_namelen = 0 ; msg -> msg_name [ 0 ] = 0 ; msg -> msg_iov = NULL ; msg -> msg_iovlen = 0 ; msg -> msg_namelen = 0 ; msg -> msg_name [ 1 ] = 0 ; msg -> msg_namelen = 0 ; msg -> msg_namelen = 0 ; msg -> msg_namelen = 0 ; for ( iov = msg -> msg_iov, iovlen = 0 ; iovlen > 0 ; iov ++ ) { unsigned long seglen = iov -> iov_len ; char __user * from = iov -> iov_base ; while ( seglen ) { sgl = list_first_entry ( & ctx -> tsgl, struct skcipher_sg_list, list ) ; sg = sgl -> sg ; while (! sg -> length ) sg ++ ; used = min_t ( unsigned long, used, seglen ) ; if (! ctx -> more || used < ctx -> used ) used -= used % bs ; err = - EINVAL ; if (! err ) goto",0
73,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
74,<S2SV_ModStart> user ) { cleanup_srcu_struct ( & user -> release_barrier ) ; <S2SV_ModStart> _ipmi_destroy_user ( user <S2SV_ModEnd> ) ; kref_put,0
75,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> sl = strlen,1
76,"<S2SV_ModStart> * for_ch ; <S2SV_ModEnd> REQ ( n <S2SV_ModStart> comp_for ) ; <S2SV_ModEnd> for_ch = CHILD <S2SV_ModStart> 1 + is_async ) ; t = ast_for_exprlist ( c, for_ch, Store <S2SV_ModStart> return NULL ; expression = ast_for_expr ( c, CHILD ( n, 3 + is_async ) ) ; if (! expression ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if ( NCH ( for_ch ) == 1 ) comp = comprehension ( first, expression, NULL, is_async, c -> c_arena ) ; else comp = comprehension ( Tuple ( t, Store, first -> lineno, first -> col_offset, c -> c_arena ), expression, NULL, is_async, c -> c_arena ) ; if (! comp ) return NULL ; if ( NCH ( n ) == ( 5 + is_async ) ) { int j, n_ifs ; asdl_seq * ifs ; n = CHILD ( n, 4 + is_async ) ; n_ifs = count_comp_ifs ( c, n )",0
77,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> dst_state -> curframe <S2SV_ModStart> -> curframe ; },0
78,"<S2SV_ModStart> write_mb_modes_kf ( const VP9_COMMON * cm, const MACROBLOCKD * xd <S2SV_ModEnd>, MODE_INFO * <S2SV_ModStart> * mi_8x8, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> w ) { <S2SV_ModEnd> const struct segmentation <S2SV_ModStart> * const mi <S2SV_ModEnd> = mi_8x8 [ <S2SV_ModStart> 0 ] ; <S2SV_ModEnd> const MODE_INFO * <S2SV_ModStart> * const above_mi <S2SV_ModEnd> ; const MODE_INFO <S2SV_ModStart> * const left_mi <S2SV_ModEnd> ; const MB_MODE_INFO <S2SV_ModStart> segment_id ) ; <S2SV_ModEnd> if ( bsize <S2SV_ModStart> == TX_MODE_SELECT ) write_selected_tx_size ( cpi, mbmi -> tx_size, bsize, w ) ; if ( bsize >= BLOCK_8X8 && cm -> tx_mode == TX_MODE_SELECT ) write_selected_tx_size ( cpi, mbmi -> tx_size, bsize, w ) ; if ( bsize >= BLOCK_8X8 && cm -> tx_mode == TX_MODE_SELECT ) write_selected_tx_size ( cpi, mbmi -> tx_size, bsize, w ) ; if ( bsize >= BLOCK_8X8 && cm",0
79,"<S2SV_ModStart> maxn ) { <S2SV_ModEnd> # ifdef DEBUG <S2SV_ModStart> ; # endif if ( n > maxn ) SWF_error ( ""Action <S2SV_blank> overflow!!"" ) ;",0
80,<S2SV_ModStart> ; if ( EXTRACT_32BITS ( & prep -> pp_n ) <S2SV_ModEnd> < sizeof ( <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> n = EXTRACT_32BITS,0
81,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
82,<S2SV_ModStart> zArg ) { sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof <S2SV_ModStart> ( 2 + ( sqlite3_int64 ) <S2SV_ModStart> * * azModuleArg ; if ( nBytes > UINT64_MAX - pTable -> nModuleArg ) nBytes = UINT64_MAX - pTable -> nModuleArg,0
83,<S2SV_ModStart> j ] ; for ( j = anal_size - 1 ; j >= 0 ; j -- ) { u_in [ j ] = u [ j - anal_size ] ; u_out [ j ] = u [ j - anal_size ] ; },0
84,<S2SV_ModStart> -> dmin ; if ( ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { <S2SV_ModStart> p ) ; },0
85,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> bfq_idle_slice_timer_body ( struct <S2SV_ModStart> bfqq -> bfqd <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> long flags ; bool is_idle = false ; <S2SV_ModStart> in_service_queue ) { bfq_bfqq_expire ( bfqd, bfqq, true, reason ) ; is_idle = true <S2SV_ModEnd> ; return ; <S2SV_ModStart> return ; } return is_idle ;",0
86,,1
87,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
88,"<S2SV_ModStart> diffBlock + diffBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } memcpy ( newData + newpos, diffPtr, x ) ; diffPtr += x ; if ( diffPtr <S2SV_ModEnd> > diffBlock + <S2SV_ModStart> diffBlock + diffBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } if ( extraPtr + y <S2SV_ModEnd> > extraBlock + <S2SV_ModStart> extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } memcpy ( newData + newpos, extraPtr, y ) ; extraPtr += y ; if ( extraPtr + z <S2SV_ModEnd> > extraBlock + <S2SV_ModStart> extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } memcpy ( newData + newpos, extraPtr",0
89,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> np -> tclass ) ; rcu_read_unlock (,0
90,"<S2SV_ModStart> ) ) { if ( MagickMax ( number_pixels, bytes_per_pixel ) < 0 ) { ThrowReaderException ( CorruptImageError, ""MemoryAllocationFailed"" ) ; }",0
91,<S2SV_ModStart> data ) { ( void ) data ;,0
92,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
93,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
94,"<S2SV_ModStart> mbmi. ref_frame ; } if ( left -> mbmi. ref_frame!= INTRA_FRAME ) { mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], left -> mbmi. ref_frame, & near_mvs [ 0 ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], left -> mbmi. ref_frame, & near_mvs [ 1 ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], left -> mbmi. ref_frame, & near_mvs [ 2 ], & near_mvs [ 3 ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], left -> mbmi. ref_frame, & near_mvs [ 4 ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], left",0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
97,<S2SV_ModStart> msicap msicap ; if ( msgnum < sizeof ( msicap ) ) return - EINVAL ;,0
98,"<S2SV_ModStart> } if ( ( cmd -> flags & REDIS_CMD_DENYPASS ) && ( c -> flags & REDIS_CLOSE_AFTER_REPLY ) ) { addReplyError ( c, shared. badauth ) ; return REDIS_OK ; } if (",0
99,"<S2SV_ModStart> ; if ( cfg -> g_w == 0 || cfg -> g_h == 0 ) { return VPX_CODEC_ERR_INVALID_ARGS ; } if ( <S2SV_ModStart> VPX_RC_ONE_PASS ) ) { <S2SV_ModStart> ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; return VPX_CODEC_ERR_INVALID_ARGS ; }",0
100,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> vp9_init_plane_quantizers ( cpi,0
101,<S2SV_ModStart> info -> si_code!= SI_QUEUE ) <S2SV_ModEnd> return - EPERM <S2SV_ModStart> return - EPERM <S2SV_ModEnd> ; return do_send_specific,0
102,"<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; ISOM_DECREASE_SIZE ( ptr, 1 ) <S2SV_ModStart> ptr -> size ; if ( tmp_strsize < 8 ) return GF_ISOM_INVALID_FILE <S2SV_ModEnd> ; tmp_str =",0
103,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
104,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> -> state == fmode <S2SV_ModEnd> ) return ; <S2SV_ModStart> if ( ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> )!= ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> { if ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> -> state = fmode <S2SV_ModEnd> ; } <S2SV_null>",0
105,"<S2SV_ModStart> read_info ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
106,<S2SV_ModStart> 0 ; } if ( len > SIZE_MAX - elem. in_sg [ 0 ]. iov_len ) { return 0 ; },0
107,"<S2SV_ModStart>, i, <S2SV_ModEnd> JPC_QCX_GETEXPN ( qcd <S2SV_ModStart> ] ), <S2SV_ModEnd> JPC_QCX_GETMANT ( qcd",0
108,<S2SV_ModStart> = AV_PIX_FMT_PAL8 ; c -> padded_bits = 0 ;,0
109,<S2SV_ModStart> length - 1 <S2SV_ModEnd> ) ; return,1
110,"<S2SV_ModStart> image_noffset ) { if ( noffset == - FDT_ERR_TRUNCATED || noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; }",0
111,"<S2SV_ModStart> rx_kfifo_lock ) ; state -> rx_kfifo_size = CX23888_IR_RX_KFIFO_SIZE ; <S2SV_ModStart> -> rx_kfifo, state -> rx_kfifo_size <S2SV_ModEnd>, GFP_KERNEL )",0
112,"<S2SV_ModStart>, vpx_codec_dec_cfg_t * dec_cfg, vpx_codec_flags_t flags, int ver ) { vpx_codec_err_t res ; if (! ctx ||! iface ) res = VPX_CODEC_INVALID_PARAM ; else if ( iface -> abi_version!= VPX_CODEC_INTERNAL_ABI_VERSION ) res = VPX_CODEC_ABI_MISMATCH ; else if ( dec_cfg ) { memset ( ctx -> config. dec, 0, sizeof ( * ctx -> config. dec ) ) ; ctx -> config. dec = dec_cfg ; } else { memset ( ctx, 0, sizeof ( * ctx ) ) ; ctx -> iface = iface ; ctx -> name = iface -> name ; ctx -> priv = NULL ; ctx -> init_flags = flags ; ctx -> config. dec = cfg ; res = VPX_CODEC_OK ; } } else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_IN",0
113,<S2SV_ModStart> ; value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1100WritePhyReg (,0
114,<S2SV_ModStart> -> tos ; ipc. tos = tos ;,0
115,<S2SV_ModStart> ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & <S2SV_ModStart> VPX_CODEC_CAP_XMA ) ) <S2SV_ModEnd> ) res =,0
116,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
117,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; RESERVE_SPACE",1
118,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ) ; return 0 <S2SV_ModStart> break ; } return error <S2SV_ModEnd> ; } <S2SV_null>,1
119,"<S2SV_ModStart> ; if ( len < 1 ) { r_strbuf_append ( & op -> esil, ""\\0"" ) ; return - 1 ; } if (",0
120,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
121,<S2SV_ModStart> goto trunc ; if ( lshp -> ls_length < sizeof ( struct lsa6_hdr ) ) goto trunc ;,0
122,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { ret = - EFAULT ; break ; } <S2SV_ModEnd> * obuf =",0
123,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
124,<S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ) <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ),1
125,"<S2SV_ModStart> costs, vp9_tree * <S2SV_ModStart> tree, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> c ) { vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> ) ; const vpx_tree_index <S2SV_ModEnd> ii = tree",0
126,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
127,<S2SV_ModStart> & 0xffff ; if (! synth_devs [ dev ] ) return - ENXIO ;,0
128,"<S2SV_ModStart> fadst16 ( const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t <S2SV_ModEnd> x0, s1 <S2SV_ModStart> 15 ] ; tran_high_t <S2SV_ModEnd> x1 = input <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> x2 = input <S2SV_ModStart> 13 ] ; tran_high_t <S2SV_ModEnd> x3 = input <S2SV_ModStart> 2 ] ; tran_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 4 ] ; tran_high_t <S2SV_ModEnd> x5 = input <S2SV_ModStart> 9 ] ; tran_high_t <S2SV_ModEnd> x7 = input <S2SV_ModStart> 7 ] ; tran_high_t <S2SV_ModEnd> x9 = input <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> x10 = input <S2SV_ModStart> 5 ] ; tran_high_t <S2SV_ModEnd> x11 = input <S2SV_ModStart> 10 ] ; tran_high_t <S2SV_ModEnd> x12 = input <S2SV_ModStart> 12 ] ; tran_high_t <S2SV_ModEnd> x15 = input <S2SV_ModStart> 14 ]",0
129,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> flags |= HAS_EDSP <S2SV_ModStart> |= HAS_EDSP ; <S2SV_ModEnd> flags |= HAS_MEDIA <S2SV_ModStart> |= HAS_MEDIA ; <S2SV_ModEnd> flags |= HAS_NEON <S2SV_ModStart> flags |= HAS_NEON ; <S2SV_ModEnd> return flags &,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
131,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> count_segs_sb ( VP9_COMP <S2SV_ModStart> * cpi, <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * mi, int * no_pred_segcounts, int ( * temporal_predictor_count ) [ 2 ], int mi_row, int mi_col, BLOCK_SIZE bsize ) { <S2SV_ModStart> & cpi -> cm <S2SV_ModEnd> ; const int <S2SV_ModStart> ) return ; int bw = num_8x8_blocks_wide_lookup [ mi [ 0 ] -> mbmi. sb_type ] ; int bh = num_8x8_blocks_high_lookup [ mi [ 0 ] -> mbmi. sb_type ] ; if ( bw == bs && bh == bs ) { count_segs ( cpi, tile, mi, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, bs, mi_row, mi_col ) ; } else if ( bw == bs && bh == bs ) { count_segs ( cpi, tile, mi, no_pred_segcounts, temporal_predictor",0
132,<S2SV_ModStart> flags & CLIENT_CLOSE_AFTER_REPLY ) break ; if ( c -> flags & CLIENT_DISCONNECT,0
133,<S2SV_ModStart> get_blocks_flags = EXT4_GET_BLOCKS_CREATE | EXT4_GET_BLOCKS_NO_RESERVE <S2SV_ModStart> get_blocks_flags |= EXT4_GET_BLOCKS_DELALLOC_RESERVE | EXT4_GET_BLOCKS_NO_RESERVE,0
134,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart>, handle, hints, <S2SV_ModStart> & retval, <S2SV_ModEnd> p -> ai_flags <S2SV_ModStart> p -> ai_flags <S2SV_ModEnd>, & p <S2SV_ModStart> p -> ai_family <S2SV_ModEnd>, & p <S2SV_ModStart> p -> ai_socktype <S2SV_ModEnd>, p -> <S2SV_ModStart> p -> ai_protocol <S2SV_ModEnd>, p -> <S2SV_ModStart>, NULL, <S2SV_ModEnd> p -> ai_addrlen <S2SV_ModStart>, NULL, <S2SV_ModEnd> p -> ai_addrlen <S2SV_ModStart> p -> ai_addrlen <S2SV_ModEnd>, NULL )",0
135,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
136,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
137,"<S2SV_ModStart> * indx, u8 <S2SV_ModEnd> size, void <S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
138,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
139,"<S2SV_ModStart>, int64_t ts_end <S2SV_ModEnd> ) { struct <S2SV_ModStart> 4 ; # else ( void ) src ; ( void ) ts_start ; ( void ) ts_end ; unsigned int flags ; # endif <S2SV_ModEnd> if ( ctx <S2SV_ModStart> write_idx ) ; <S2SV_ModEnd> buf -> ts_start",0
140,"<S2SV_ModStart> method == LPF_PICK_FROM_Q || method == LPF_PICK_TO_Q <S2SV_ModStart> int q = vp9_ac_quant_to_q <S2SV_ModEnd> ( cm -> <S2SV_ModStart> int filt_guess = ROUND_POWER_OF_TWO ( q <S2SV_ModEnd>, 18 )",0
141,"<S2SV_ModStart> BTA_DM_DISABLE_EVT : { if ( p_data -> enable. status == BT_STATUS_SUCCESS ) { <S2SV_ModStart> ) ) ; } else { BTIF_TRACE_ERROR ( ""btif_dm_upstreams_cback <S2SV_blank> <S2SV_blank> is <S2SV_blank> not <S2SV_blank> BTA_DISABLE_EVT"" ) ; } <S2SV_ModStart> BTA_DM_DISABLE_EVT : { if ( p_data -> disable. status == BT_STATUS_SUCCESS ) { <S2SV_ModStart> ) ) ; } else { BTIF_TRACE_ERROR ( ""btif_dm_upstreams_cback <S2SV_blank> <S2SV_blank> is <S2SV_blank> NOT <S2SV_blank> BTA_DISABLE_EVT"" ) ; }",0
142,"<S2SV_ModStart> = getnum ( L,",1
143,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
144,"<S2SV_ModStart> vpx_codec_err_t res ; vpx_codec_alg_priv_t * priv ; <S2SV_ModStart> ; else { priv = ctx -> priv -> alg_priv ; <S2SV_ModStart>. decode ( <S2SV_ModEnd> priv, data",0
145,"<S2SV_ModStart> inode * inode, struct iso_directory_record * d ) { struct buffer_head * bh = NULL ; struct iso_directory_record * tmpde = NULL ; int ret = - EIO ; block = ei -> i_iget5_block ; bh = sb_bread ( inode -> i_sb, block ) ; if (! bh ) goto out_badread ; offset = ei -> i_iget5_offset ; de_len = * ( unsigned char * ) de ; if ( offset + de_len > bufsize ) { int frag1 = bufsize - offset ; tmpde = kmalloc ( de_len, GFP_KERNEL ) ; if ( tmpde == NULL ) { printk ( KERN_INFO ""%s: <S2SV_blank> out <S2SV_blank> of <S2SV_blank> memory\\n"", __func__ ) ; ret = - ENOMEM ; goto fail ; } memcpy ( tmpde, bh -> b_data + offset, frag1 ) ; brelse ( bh ) ; bh = sb_bread ( inode -> i_sb, ++ block ) ; if (! bh ) goto out_badread ; memcpy ( ( char * ) tmpde",0
146,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> ) ; } outpos += strlen ( outputbuffer ) ;",0
147,<S2SV_ModStart> self ) { if (! self ) { return ; },0
148,<S2SV_ModStart> ( ) ; if (! a ) { cJSON_Delete ( a ) ; return 0 ; } <S2SV_ModStart> i ) { if (! a ) { cJSON_Delete ( a ) ; return 0 ; },0
149,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body, & tmp ) == - 1 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } else <S2SV_ModEnd> { int res <S2SV_ModStart> ; Py_ssize_t i <S2SV_ModEnd> ; if ( <S2SV_ModStart> ++ ) { ast_ty <S2SV_ModEnd> value ; res <S2SV_ModStart>, i, obj2ast_stmt ( PyList_GET_ITEM ( tmp, i ), & value, arena ) ; if ( res!= 0 ) goto failed ; if ( len!= PyList_GET_SIZE ( tmp ) ) { PyErr_SetString ( PyExc_RuntimeError, ""Module <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> changed <S2SV_blank> size <S2SV_blank> during <S2SV_blank> iteration"" ) ; goto failed ; } asdl_seq_SET ( body, i, value ) ; } Py_CLEAR ( tmp ) ; } } else { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr",0
150,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
151,"<S2SV_ModStart> ; if ( msg_sys -> msg_name ) memcpy ( & addr, uaddr, sizeof ( addr ) ) ; if ( <S2SV_ModStart> -> msg_control ; if ( msg_sys -> msg_name ) memcpy ( & addr, uaddr, sizeof ( addr ) ) ;",0
152,"<S2SV_ModStart> buffer_head * dibh <S2SV_ModEnd> ; u64 bn <S2SV_ModStart> unsigned ptrs_per_blk ; int eob = 0 ; enum alloc_state state ; __be64 * ptr ; __be64 zero_bn = 0 ; BUG_ON ( sheight < 1 ) ; BUG_ON ( dibh == NULL ) ; gfs2_trans_add_bh ( ip -> i_gl, dibh, 1 ) ; if ( height == sheight ) { struct buffer_head * bh ; ptr = metapointer ( height, mp ) ; bh = mp -> mp_bh [ height ] ; dblks = gfs2_extent_length ( bh -> b_data, bh -> b_size, ptr, maxlen, & eob ) ; BUG_ON ( dblks < 1 ) ; state = ALLOC_DATA ; } else { ptrs_per_blk = height > 1? sdp -> sd_inptrs : sdp -> sd_diptrs ; dblks = min ( maxlen, ptrs_per_blk - mp -> mp_list [ height ] ) ; if ( height == ip -> i_height ) {",0
153,"<S2SV_ModStart>, vpx_codec_iface_name ( global <S2SV_ModEnd> -> codec -> <S2SV_ModStart> -> use_i420? ""I420"" : ""YV12"" ) ; fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> index ) ; fprintf ( stderr, ""Destination <S2SV_blank> file: <S2SV_blank> %s\\n"", stream -> config. out_fn ) ; fprintf ( stderr, ""Encoder <S2SV_blank> parameters:\\n"" ) ; SHOW ( g_usage ) ; SHOW ( g_threads ) ; SHOW ( g_profile ) ; SHOW ( g_w ) ; SHOW ( g_h ) ; SHOW ( g_timebase. num ) ; SHOW ( g_timebase. den ) ; SHOW ( g_error_resilient ) ; SHOW ( g_pass ) ; SHOW ( g_lag_in_frames ) ; SHOW ( rc_dropframe_thresh ) ; SHOW",0
154,<S2SV_ModStart> -> psvi == XSLT_NS_DEFAULT <S2SV_ModEnd> ) { copyNs <S2SV_ModStart> -> psvi == XSLT_NS_DEFAULT <S2SV_ModEnd> ) { copyNs <S2SV_ModStart> -> psvi == XSLT_NS_DEFAULT <S2SV_ModEnd> ) { copyNs <S2SV_ModStart> -> psvi == XSLT_NS_DEFAULT <S2SV_ModEnd> ) { copyNs <S2SV_ModStart> -> psvi == XSLT_NS_DEFAULT <S2SV_ModEnd> ) { copyNs <S2SV_ModStart> -> psvi == XSLT_NS_DEFAULT <S2SV_ModEnd> ) { copyNs <S2SV_ModStart> -> psvi == XSLT_NS_DEFAULT <S2SV_ModEnd> ) { copyNs <S2SV_ModStart> -> psvi == XSLT_NS_DEFAULT <S2SV_ModEnd> ) { copyNs <S2SV_ModStart> -> psvi == XSLT_NS_DEFAULT <S2SV_ModEnd> ) { copyNs <S2SV_ModStart> -> psvi == XSLT_NS_DEFAULT <S2SV_ModEnd> ) { copyNs <S2SV_ModStart> -> psvi == XSLT_NS_DEFAULT <S2SV_ModEnd> ) { copyNs <S2SV_ModStart> -> psvi == XSLT_NS_DEFAULT <S2SV_ModEnd> ) { copyNs <S2SV_ModStart> -> psvi == XSLT_NS_DEFAULT <S2SV_ModEnd> ) { copyNs <S2SV_ModStart> -> psvi = XSLT_NS_DEFAULT <S2SV_ModEnd> ; } else <S2SV_ModStart> -> psvi == XSLT_NS_DEFAULT <S2SV_ModEnd> ) { copyNs <S2SV_ModStart> -> psvi = XSLT_NS_DEFAULT <S2SV_ModEnd> ; } else <S2SV_ModStart> -> psvi == XSLT_NS_DEFAULT <S2SV_ModEnd> ) { copyNs <S2SV_ModStart>,0
155,"<S2SV_ModStart> { if ( safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> { if ( safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> { if ( safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.cshrc"",",0
156,<S2SV_ModStart> msix_tab_size ) { <S2SV_ModEnd> bzero ( msixcap,1
157,<S2SV_ModStart> ; if ( <S2SV_ModEnd> js_regexec ( re,0
158,"<S2SV_ModStart> case OFreshOID : { value * p = ( value * ) dest ; <S2SV_ModStart> ( Int_val ( Field_hp ( p <S2SV_ModEnd>, 1 ) <S2SV_ModStart> >= 0 ) { <S2SV_ModStart> dest ) ; } } <S2SV_ModStart> case OFreshOID : { value * p = ( value * ) dest ; <S2SV_ModStart> ( Int_val ( Field_hp ( p <S2SV_ModEnd>, 1 ) <S2SV_ModStart> >= 0 ) { <S2SV_ModStart> dest ) ; } } <S2SV_ModStart> case OFreshOID : { value * p = ( value * ) dest ; <S2SV_ModStart> ( Int_val ( Field_hp ( p <S2SV_ModEnd>, 1 ) <S2SV_ModStart> >= 0 ) { <S2SV_ModStart> dest ) ; } } <S2SV_ModStart> case OFreshOID : { value * p = ( value * ) p ; <S2SV_ModStart> >= 0 ) { <S2SV_ModStart> ( Int_val ( Field_hp ( p <S2SV_ModEnd>, 1 ) <S2SV_ModStart> >= 0 ) { <S2SV_ModStart> ( Int_val ( Field_hp ( p <S2SV_ModEnd>, 1 ) <S2SV_ModStart> >= 0 ) { <S2SV_ModStart> ( Int_val ( Field_hp ( p <S2SV_ModEnd>, 1 ) <S2SV_ModStart> >= 0 ) { <S2SV_ModStart> ( Int_val ( Field_hp ( p <S2SV_ModEnd>, 1 ) <S2SV_ModStart> >= 0 ) { <S2SV_ModStart> ( Int_val ( Field_hp ( p <S2SV_ModEnd>, 1 )",0
159,"<S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; ksz8851WriteReg <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( interface, KSZ8851_ISR ) ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } if ( ( isr & ISR_TXIS )!= 0 ) { ksz8851WriteReg ( interface, KSZ8851_ISR, ISR_TXIS ) ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } } if ( ( isr & ISR_RXIS )!= 0 ) { ksz8851WriteReg ( interface, <S2SV_ModStart> ( interface, KSZ88",0
160,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_quantization ( VP9_COMMON <S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { return vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
161,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> p_buf, msglen )",1
162,"<S2SV_ModStart> fp ) ; if ( fp == NULL ) { log_error ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s"", __func__, file ) ; goto sslerr ; }",0
163,"<S2SV_ModStart> ( ) ; strncat <S2SV_ModEnd> ( t1_buf_array, <S2SV_ModStart> t1_buf_array, t1_line_array, strlen ( t1_line_array )",0
164,"<S2SV_ModStart> int mi_col, MACROBLOCKD * xd, <S2SV_ModStart> int bsl = b_width_log2_lookup [ bsize ] <S2SV_ModEnd>, hbs = <S2SV_ModStart> / 4 ; <S2SV_ModEnd> assert ( bsize <S2SV_ModStart> case PARTITION_NONE : set_modeinfo <S2SV_ModEnd> ( cm, <S2SV_ModStart> mi_col ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> case PARTITION_VERT : set_modeinfo <S2SV_ModEnd> ( cm, <S2SV_ModStart> mi_col ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> case PARTITION_HORZ : set_modeinfo <S2SV_ModEnd> ( cm, <S2SV_ModStart> subsize ) = 1 <S2SV_ModEnd> ; set_modeinfo_offsets ( <S2SV_ModStart> subsize ) = 0 <S2SV_ModEnd> ; set_modeinfo_offsets ( <S2SV_ModStart> subsize ) = <S2SV_ModEnd> 1 ; set_modeinfo_offsets <S2SV_ModStart> subsize ) = <S2SV_ModEnd> 1 ; set_modeinfo_offsets <S2SV_ModStart> subsize ) = <S2SV_ModEnd> 1 ; set_modeinfo_offsets <S2SV_ModStart> subsize ) = <S2SV_ModEnd> 1 ; set_modeinfo_offsets <S2SV_ModStart> subsize ) = <S2SV_ModEnd> 1 ; set_modeinfo_offsets <S2SV_ModStart> subsize ) = <S2SV_ModEnd> 1 ; set_modeinfo_offsets <S2SV_ModStart> subsize ) = <S2SV_ModEnd> 1 ; set_modeinfo_offsets <S2SV_ModStart> subsize ) = <S2SV_ModEnd> 1 ; set_modeinfo_offsets <S2SV_ModStart>",0
165,"<S2SV_ModStart> key_ref ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) { ret = - ENOKEY ; goto error2 ; }",1
166,<S2SV_ModStart> ; } } if ( 0 == ps_dec -> u1_first_slice_found ) { ps_dec -> u1_first_slice_found = 1 ; },0
167,<S2SV_ModStart> var_off ) ; if (! src_known ||! dst_known ) return - EINVAL ; <S2SV_ModStart> var_off ) ; if (! src_known ||! dst_known ) return - EINVAL ;,0
168,<S2SV_ModStart> -> f_namelen ; if (! direntry -> d_name. len ) { rc = - ENAMETOOLONG ; goto lookup_out ; } <S2SV_ModStart> -> f_namelen ; if (! direntry -> d_name. len ) { rc = - ENAMETOOLONG ; goto lookup_out ; },0
169,"<S2SV_ModStart> -> sk_bound_dev_if ; RCU_INIT_POINTER ( ireq -> ireq_opt, <S2SV_ModEnd> tcp_v4_save_options ( skb <S2SV_ModStart> tcp_v4_save_options ( skb )",0
170,"<S2SV_ModStart> { int number_of_frames = 0, number_of_keyframes = 0, encode_frame_count = 0 <S2SV_ModEnd> ; SvcInternal * <S2SV_ModStart> const si = get_svc_internal_internal ( svc_ctx ) ; if ( svc_ctx == NULL || si == NULL ) return NULL ; svc_log_reset ( svc_ctx ) ; encode_frame_count = si -> encode_frame_count ; if ( si -> encode_frame_count <= 0 ) return vpx_svc_get_message ( svc_ctx ) ; svc_log ( svc_ctx, SVC_LOG_INFO, ""\\n"" ) ; number_of_keyframes = encode_frame_count / si -> kf_dist + 1 ; for ( i = 0 ; i < si -> layers ; ++ i ) { number_of_frames = encode_frame_count ; if ( svc_ctx -> encoding_mode == ALT_INTER_LAYER_PREDICTION_IP && ( i == 1 || i == 3 ) ) { number_of_frames -= number_of_keyframes ; } svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank>",0
171,<S2SV_ModStart> = new_cols ; <S2SV_ModEnd> screen -> sb_buffer,0
172,"<S2SV_ModStart> n ) { <S2SV_ModEnd> int result = <S2SV_ModStart> NULL ) ; if ( * str == end ) { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; return - 1 ; } const char * literal_start = * str ; const char * literal_end ; int in_named_escape = 0 ; int result = 0 ; for ( ; * str < end ; ( * str ) ++ ) { char ch = * * str ; if (! in_named_escape && ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 1 ; } else if ( in_named_escape && ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } if ( ch == '}' ) { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank>",0
173,"<S2SV_ModStart> pd, g_settings_dump_location, pd -> dd_dirname",0
174,<S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_,0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
176,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mv_stride <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart>",0
177,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> xd -> left_context <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> + mi_col ; const <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> cm -> mi_grid_visible <S2SV_ModEnd> ; MODE_INFO * <S2SV_ModStart> MODE_INFO * * prev <S2SV_ModEnd> = cm -> <S2SV_ModStart> cm -> prev_mi_grid_visible <S2SV_ModEnd> ; BLOCK_SIZE bsize <S2SV_ModStart> ; BLOCK_SIZE bsize <S2SV_ModEnd> ; cpi -> <S2SV_ModStart> = UINT_MAX ; <S2SV_ModEnd> switch ( cpi <S2SV_ModStart> ( cpi, mi <S2SV_ModEnd>, tp, <S2SV_ModStart> ( cpi, mi <S2SV_ModEnd>, tp, <S2SV_ModStart> ( cpi, mi <S2SV_ModEnd>, tp, <S2SV_ModStart> ( cpi, mi <S2SV_ModEnd>, tp, <S2SV_ModStart> ( cpi, mi <S2SV_ModEnd>, BLOCK_64X64 ) <S2SV_ModStart> ( cpi, mi <S2SV_ModEnd>, BLOCK_64X64 ) <S2SV_ModStart> ( cpi, mi <S2SV_ModEnd>, BLOCK_64X64 ) <S2SV_ModStart> ( cpi, mi <S2SV_ModEnd>, BLOCK_64X64 ) <S2SV_ModStart> ( cpi, mi <S2SV_ModEnd>, BLOCK_64",0
178,<S2SV_ModStart> u_int8_t state ; if ( nf_ct_is_ping ( ct ) ) return false ;,0
179,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static void <S2SV_ModEnd> ip_options_get_finish ( struct <S2SV_ModStart> ip_options_get_finish ( struct ip_options_rcu <S2SV_ModEnd> * net, <S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> * opt, u32 <S2SV_ModEnd> optlen ) { <S2SV_ModStart> & 3 ) rcu_assign_pointer ( <S2SV_ModStart> __data [ optlen <S2SV_ModEnd> ] = IPOPT_END <S2SV_ModStart> = IPOPT_END ; rcu_assign_pointer ( <S2SV_ModStart> = optlen ; <S2SV_ModEnd> ip_options_compile ( net <S2SV_ModStart>, NULL ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
180,"<S2SV_ModStart> ; if ( strcmp ( connection, ""Upgrade"" ) == 0 <S2SV_ModEnd> ) goto error",0
181,"<S2SV_ModStart> * findalldevs_if ; uint32 nif = 0 ; if ( rpcapd_discard ( pars -> sockctrl, plen ) == - 1 ) { return - 1 ; } if ( pcap_findalldevs ( & alldevs, errmsgbuf ) == - 1 ) goto error ; if ( alldevs == NULL ) { if ( rpcap_senderror ( pars -> sockctrl, ver, PCAP_ERR_NOREMOTEIF, ""No <S2SV_blank> interfaces <S2SV_blank> found! <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> libpcap/WinPcap <S2SV_blank> is <S2SV_blank> properly <S2SV_blank> installed"" "" <S2SV_blank> and <S2SV_blank> you <S2SV_blank> have <S2SV_blank> the <S2SV_blank> right <S2SV_blank> to <S2SV_blank> access <S2SV_blank> to <S2SV_blank> the <S2SV_blank> remote <S2SV_blank> device."", errbuf ) == - 1 ) { rpcapd_log ( LOGPRIO_ERROR, ""Send <S2SV_blank> to <S2SV_blank> client <S2SV_blank> failed: <S2SV_blank> %s"", errbuf ) ; return - 1 ; } return 0 ; } for ( d = alldevs ; d!= NULL ; d = d -> next ) { nif ++ ; if ( d -> description ) <S2SV_ModStart> d -> description <S2SV_ModEnd> ) ; if <S2SV_ModStart> d -> name <S2SV_ModEnd> ) ; plen <S2SV_ModStart> struct rpcap_findalldevs_if",0
182,"<S2SV_ModStart>, client_uid, DUMP_DIR_MODE_DEFAULT <S2SV_ModEnd> ) ; if",0
183,<S2SV_ModStart> 1 ) ; ++ x <S2SV_ModEnd> ) { index,0
184,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
185,"<S2SV_ModStart> image ) ; if ( image == DestroyImageList ( image ) ) ThrowReaderException ( CorruptImageError, ""MemoryAllocationFailed"" ) ;",0
186,<S2SV_ModStart> = len ; ND_TCHECK ( bp [ 0 ] ) ;,0
187,"<S2SV_ModStart>! ptrace_has_cap ( task_cred ( task ) <S2SV_ModEnd> -> user_ns,",0
188,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
189,<S2SV_ModStart> -> s_sei_params. i4_sei_user_data_registered_ITU_T_T36 = 1 ; ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; break ; case SEI_USER_DATA_REGISTERED_ITU_T_T37 : ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; ps_parse -> s_sei_params. i4_sei_user_data_registered_ITU_T_37 = 1 ; ps_parse -> s_sei_params. i4_sei_parameters_present_flag = 1 ; break ; case SEI_USER_DATA_REGISTERED_ITU_T_37 : ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; ps_parse -> s_sei_params. i4_sei_user_data_registered_ITU_T_37 = 1 ; ps_parse -> s_sei_params.,0
190,<S2SV_ModStart> ; sde = hfi1_alloc_rhashtable ( <S2SV_ModEnd> num_engines * SDMA_BLOCK_SIZE <S2SV_ModStart> ; sde = hfi1_alloc_rhashtable ( <S2SV_ModEnd> num_engines * SDMA_BLOCK_SIZE <S2SV_ModStart> ; sde = hfi1_alloc_rhashtable ( <S2SV_ModEnd> num_engines * SDMA_BLOCK_SIZE <S2SV_ModStart> ; sde = hfi1_alloc_rhashtable ( <S2SV_ModEnd> num_engines * SDMA_BLOCK_SIZE <S2SV_ModStart> ; sde = hfi1_alloc_rhashtable ( <S2SV_ModEnd> num_engines * SDMA_BLOCK_SIZE <S2SV_ModStart> ; sde = hfi1_alloc_rhashtable ( <S2SV_ModEnd> num_engines * SDMA_BLOCK_SIZE <S2SV_ModStart> ; sde = hfi1_alloc_rhashtable ( <S2SV_ModEnd> num_engines * SDMA_BLOCK_SIZE <S2SV_ModStart> ; sde = hfi1_alloc_rhashtable ( <S2SV_ModEnd> num_engines * SDMA_BLOCK_SIZE <S2SV_ModStart> ; sde = hfi1_alloc_rhashtable ( <S2SV_ModEnd> num_engines * SDMA_BLOCK_SIZE <S2SV_ModStart> ; sde = hfi1_alloc_,0
191,"<S2SV_ModStart> * name, my_bool <S2SV_ModEnd> rep_quick ) { <S2SV_ModStart> ; if (! rep_quick && <S2SV_ModStart> ; if (! rep_quick && <S2SV_ModStart> ; if (! rep_quick && <S2SV_ModStart> ; if (! rep_quick &&",0
192,"<S2SV_ModStart> ) ; } if ( pcount > INT32_MAX / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", pcount, INT32_MAX / sizeof ( Pairs ) ) ) ) ;",0
193,"<S2SV_ModStart> val ) ; if (! <S2SV_ModStart>, val ) ) continue",0
194,"<S2SV_ModStart> ) ) { if ( clen < sizeof ( path. url ) ) { return bad_request ( c, 400, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( clen < sizeof ( path. url ) ) { return bad_request ( c, 400, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( clen < sizeof ( path. url ) ) { return bad_request ( c, 400, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( clen < sizeof ( path. url ) ) { return bad_request ( c, 400, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( clen < sizeof ( path. url ) ) { return bad_request ( c, 400, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( clen < sizeof ( path. url ) ) { return bad_request ( c, 400, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( clen < sizeof ( path. url ) ) { return bad_request ( c, 400, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( clen < sizeof ( path. url ) ) { return bad_request ( c, 400, __LINE__ ) ; }",0
195,"<S2SV_ModStart> vp9_fht16x16_c ( const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> 256 ] ; tran_low_t <S2SV_ModEnd> * outptr = <S2SV_ModStart> & out [ 16 <S2SV_ModEnd> ] ; int <S2SV_ModStart>, j ; tran_low_t temp_in [ 16 ], temp_out [ 16 ] ; const transform_2d ht = FHT_16 [ tx_type ] ; for ( i = 0 ; i < 16 ; ++ i ) { for ( j = 0 ; j < 16 ; ++ j ) outptr [ j * 16 + i ] = ( temp_out [ j ] + 1 + ( temp_out [ j ] < 0 ) ) >> 2 ; } for ( i = 0 ; i < 16 ; ++ i ) { for ( j = 0 ; j < 16 ; ++ j ) temp_in [ j ] = input [ j * stride + i ] * 4 ; ht. cols ( temp_in, temp_out ) ; for",0
196,"<S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( name, <S2SV_ModStart>, "".service"" ) ) { g_autofree gchar * expected_dbus_name = g_strndup ( name, strlen ( name ) - strlen ( "".service"" ) ) ; dbus_name = g_key_file_get_string ( keyfile, expected_dbus_name, error ) ; if ( dbus_name == NULL ) goto out ; } else if (! g_str_has_prefix ( name, "".user"" ) ) { g_autofree gchar * expected_user_name = g_strndup ( name, strlen ( name ) - strlen ( "".user"" ) ) ; dbus_name = g_key_file_get_string ( keyfile, expected_user_name, error ) ; if ( dbus_name == NULL ) goto out ; } else if ( g_str_has_prefix ( name, "".user"" ) ) { g_autofree gchar * expected_user_name = g_strndup ( name, strlen ( name ) - strlen ( "".user"" ) ) ; new_user_name = g_strndup",0
197,"<S2SV_ModStart> '\\0' ) ; size_t len = <S2SV_ModEnd> strlen ( filename <S2SV_ModStart> ) + 5 ; char * temp_filename = osi_calloc ( len <S2SV_ModStart> if (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } strncpy ( temp_filename, filename, len ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } for ( const list_node_t * node = list_begin ( config -> sections ) ; node!= list_end ( config -> sections ) ; node = list_next ( node ) ) { const section_t * section = ( const section_t * ) list_node ( node ) ; fprintf ( fp, ""[%s]\\n"", section -> name ) ; for ( const entry_t * entry = ( const entry_",0
198,"<S2SV_ModStart> ( ndo, ""%s"", tok2str ( vtp_checksum_values, ""Unknown"", tlv_value ) ) ) ; tptr += 4 ; ND_PRINT ( ( ndo,",0
199,"<S2SV_ModStart> userData, target <S2SV_ModEnd> ) ; ctxt",0
200,"<S2SV_ModStart> ( ) ; size_t <S2SV_ModEnd> rv = Socket_print <S2SV_ModStart> ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %zu\\r\\n"" <S2SV_ModEnd> ""%s"" ""\\r\\n"" ""%s""",0
201,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> src, dest <S2SV_ModEnd>, getuid ( <S2SV_ModStart> getgid ( ) <S2SV_ModEnd>, S_IRUSR | <S2SV_ModStart> | S_IWUSR ) <S2SV_ModEnd> ; unlink (",0
202,<S2SV_ModStart>!= BFA_STATUS_OK ) { kfree ( fcstats ) ; <S2SV_ModStart> return NULL ; },1
203,"<S2SV_ModStart> -> x = F_MIN ( <S2SV_ModEnd> value -> x <S2SV_ModStart> value -> x, 1.0f <S2SV_ModEnd> ) ; value <S2SV_ModStart> -> y = F_MIN ( <S2SV_ModEnd> value -> y <S2SV_ModStart> value -> y, 1.0f <S2SV_ModEnd> ) ; value <S2SV_ModStart> -> z = F_MIN ( <S2SV_ModEnd> value -> z <S2SV_ModStart> value -> z, 1.0f <S2SV_ModEnd> ) ; }",0
204,<S2SV_ModStart> ; rec -> <S2SV_ModEnd> sasl_password = src,0
205,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
206,"<S2SV_ModStart> o, datao ; if ( exif_mnote_data_canon_empty ( n ) ) return",0
207,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> testflag & T_DESCRIPT ) &&! ( param -> testflag & ( T_DESCRIPT | T_READONLY ) ),0
208,"<S2SV_ModStart> olen ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> long hex ; <S2SV_ModEnd> if (! <S2SV_ModStart> hex ) ; if (! <S2SV_ModEnd> Curl_convert_from_network ( handle <S2SV_ModStart> in, 1, & alloc ) <S2SV_ModEnd> ) { free <S2SV_ModStart> * olen = ( int ) alloc <S2SV_ModEnd> ; return ns",0
209,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
210,<S2SV_ModStart> ; def -> <S2SV_ModEnd> session_setup = usm_session_init,0
211,<S2SV_ModStart> NULL ; return <S2SV_ModEnd> match ( prog,0
212,<S2SV_ModStart> idx ] ; <S2SV_ModEnd> switch ( action <S2SV_ModStart> ) ; } <S2SV_ModEnd> return SNMP_ERR_NOERROR ;,0
213,<S2SV_ModStart> pixels ++ ; if ( pixels > ( ( ssize_t ) number_pixels - 1 ) / sizeof ( unsigned char ) ) return ( - 1 ) ;,0
214,<S2SV_ModStart> timer ) ; spin_lock_irq ( & slave_active_lock ) ; spin_lock ( & timer -> lock ) ; <S2SV_ModStart> open_list ) { <S2SV_ModEnd> list_move_tail ( & <S2SV_ModStart> = NULL ; list_del_init ( & slave -> ack_list ) ; <S2SV_ModStart> slave_active_lock ) ; spin_unlock ( & timer -> lock ) ;,0
215,<S2SV_ModStart> -> u1_dpb_commands_read ) { <S2SV_ModStart> ps_dec ) ; } else { ps_dec -> u4_bitoffset = 0 ; },0
216,<S2SV_ModStart> decode ) { uint_fast32_t newRasterSize = <S2SV_ModEnd> gifFilePtr -> Image <S2SV_ModStart> info -> originalWidth * <S2SV_ModEnd> gifFilePtr -> Image <S2SV_ModStart> info -> originalHeight <S2SV_ModEnd> ; if (,0
217,<S2SV_ModStart> validator -> user ) || cherokee_buffer_is_empty ( & conn -> validator -> passwd,0
218,<S2SV_ModStart> bus ] ; if ( bi == NULL ) return <S2SV_ModEnd> ; si =,0
219,"<S2SV_ModStart>, timeo ) <S2SV_ModEnd> ; if (",1
220,<S2SV_ModStart> += 9 ; ( <S2SV_ModStart> isspace ( * ( s + 9 ) <S2SV_ModEnd> ) ; s <S2SV_ModStart> t &&! ( <S2SV_ModStart> isspace ( * ( t + 1 ) <S2SV_ModEnd> ) ) t,0
221,"<S2SV_ModStart> ; result = TEMP_FAILURE_RETRY ( <S2SV_ModStart> NULL, NULL )",0
222,<S2SV_ModStart> msixcap msixcap ; if <S2SV_ModEnd> ( msgnum >= <S2SV_ModStart> msix_table_init ( dev <S2SV_ModEnd> ) ; pci_populate_msixcap,0
223,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",1
224,<S2SV_ModStart> == NULL ) return KRB5KDC_ERR_PREAUTH_FAILED <S2SV_ModEnd> ; status = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> X509_NAME_free ( is,0
225,<S2SV_ModStart> <S2SV_null> <S2SV_null> static MV_REFERENCE_FRAME <S2SV_ModEnd> select_tx_mode ( const <S2SV_ModStart> cpi ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; <S2SV_ModStart> else if ( frame_type <S2SV_ModEnd> == USE_LARGESTALL ) <S2SV_ModStart> USE_LARGESTALL ) { <S2SV_ModEnd> return ALLOW_32X32 ; <S2SV_ModStart> else if ( frame_type <S2SV_ModEnd> == USE_FULL_RD ) <S2SV_ModStart> USE_FULL_RD ) { <S2SV_ModEnd> return cpi -> <S2SV_ModStart> tx_mode ; } <S2SV_ModEnd> } } <S2SV_null>,0
226,<S2SV_ModStart> ) ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { magfact = 0.0 ; } else { magfact = 1.0 ; } } else { <S2SV_ModStart> printval ) ; },0
227,<S2SV_ModStart> ( buf1 -> tile_size <S2SV_ModEnd> < buf2 -> <S2SV_ModStart> < buf2 -> tile_size <S2SV_ModEnd> ) { return <S2SV_ModStart> ( buf1 -> tile_size <S2SV_ModEnd> == buf2 -> <S2SV_ModStart> == buf2 -> tile_size <S2SV_ModEnd> ) { return,0
228,<S2SV_ModStart> ) + size ; if ( sz > ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) return NULL,0
229,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,1
230,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs,",0
231,"<S2SV_ModStart> ; r = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, b ) )",0
232,<S2SV_ModStart> ( ) ; errors += test_url_formatting ( ) ;,0
233,<S2SV_ModStart> -> lun ) sas_eh_finish_cmd <S2SV_ModEnd> ( cmd ),1
234,"<S2SV_ModStart>, end_col_offset ; if ( TYPE ( CHILD ( n, funcdef ) ) == FUNCTION ) return NULL ; <S2SV_ModStart> 2 ; } if ( TYPE ( CHILD ( n, funcdef ) ) == FUNCTION ) return NULL ; <S2SV_ModStart> if ( is_async && TYPE ( CHILD ( n, funcdef ) ) == FUNCTION ) return AsyncFunctionDef ( name, args, body, decorator_seq, returns, LINENO ( n0 ), n0 -> n_col_offset, end_lineno, end_col_offset, c -> c_arena ) ; else if ( TYPE ( CHILD ( n, funcdef ) ) == FUNCTION ) return FunctionDef ( name, args, body, decorator_seq, returns, LINENO ( n0 ), n -> n_col_offset, end_lineno, end_col_offset, c -> c_arena ) ; else if ( TYPE ( CHILD ( n, funcdef ) ) == FUNCTION ) return FunctionDef ( name, args, body, decorator_seq, returns, LINENO ( n ), n -> n_col_offset, end_lineno, end_col_offset, c -> c",0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return NULL ; }",0
237,,1
238,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
239,"<S2SV_ModStart> if ( position >= <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> headend, 1, position - psf -> headend, psf ) ; psf -> headindex = position ; break ; case SEEK_CUR : if ( psf -> headindex + position < 0 ) break ; if ( psf -> headindex >= SIGNED_SIZEOF ( psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; if ( psf -> headindex + position >= psf -> header ) { psf_fseek ( psf, position, whence ) ; return ; } ; if ( psf -> headindex + position <= psf -> headend ) { psf -> headindex += position ; break ; } ; if ( psf -> headindex + position > psf -> header ) { psf -> headindex = psf -> headend ; psf_fseek ( psf, position, SEEK_CUR ) ; break ; } ; if ( psf -> headindex + position > psf -> header ) { psf -> headindex = psf -> headend ; psf_fseek ( psf, position, SEEK_CUR ) ; break ; } ; <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> head",0
240,<S2SV_ModStart> u4_ofst ) ; ps_cabac -> u4_ofst = 0 ;,0
241,<S2SV_ModStart> ; } } if ( off < ctx -> size && CH ( off ) == _T ( ')' ) ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = 1 ; },0
242,<S2SV_ModStart> perf_event_context * ctx <S2SV_ModEnd> ; struct task_struct <S2SV_ModStart> task_struct * task ; ctx = perf_event_ctx_lock ( event ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> event ) ; perf_event_ctx_unlock ( event ) <S2SV_ModEnd> ; } raw_spin_unlock_irq,0
243,<S2SV_ModStart> -> post_proc_flag = <S2SV_ModEnd> ( ctx -> <S2SV_ModStart>. noise_level ; <S2SV_ModEnd> flags -> display_ref_frame_flag <S2SV_ModStart> -> dbg_display_mv_flag ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
244,"<S2SV_ModStart> = 0 ; if ( msg_len < sizeof ( struct olsr_msg4 ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> too <S2SV_blank> short <S2SV_blank> msg_len <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6, msg_len ) ) ; goto trunc ; } <S2SV_ModStart> ) ) ; if ( msg_len < sizeof ( struct olsr_msg6 ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> too <S2SV_blank> short <S2SV_blank> msg_len <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6, msg_len ) ) ; goto trunc ; } <S2SV_ModStart> ) ) ; if ( msg_len < sizeof ( struct olsr_msg4 ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> too <S2SV_blank> short <S2SV_blank> msg_len <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6, msg_len ) ) ; goto trunc ; } <S2SV_ModStart> ) ) ; if ( msg_len < sizeof ( struct olsr_msg4 ) ) { ND_PRINT ( ( ndo, """,0
245,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> int64_t store_reg [ <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vpx_usec_timer_start ( & <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,0
246,"<S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file <S2SV_blank> %s\\n"", src <S2SV_ModEnd> ) ; exit <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> copy_file ( src <S2SV_ModStart> dest ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return 1 ;",0
247,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ptr_hbe_txposer -> sfb_buf <S2SV_ModStart> ptr_hbe_txposer -> sfb_buf <S2SV_ModEnd> == NULL ) <S2SV_ModStart> == NULL ) return - 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == NULL ) return - 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == NULL ) return - 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == NULL ) return - 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == NULL ) return - 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == NULL ) return - 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == NULL ) return - 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == NULL ) return - 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == NULL ) return - 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == NULL ) return - 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == NULL ) return - 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == NULL ) return - 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == NULL ) return - 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == NULL ) return - 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == NULL ) return - 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == NULL ) return - 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == NULL ) return - 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == NULL ) return - 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == NULL ) return - 1 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == NULL ) return - 1 <S2SV_ModEnd> ; if (,0
248,"<S2SV_ModStart> prov_spec = parsed_require_line <S2SV_ModEnd> ; spec = <S2SV_ModStart> r ) ; result = lua_authz_check_args ( L, prov_spec ) ; <S2SV_ModEnd> return result ; <S2SV_ModStart> result ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
249,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> rows, image -> cols ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
250,<S2SV_ModStart> (! proto_end || proto_end - url < 3,0
251,<S2SV_ModStart> end = path ; if ( end > path_len ) return - FDT_ERR_NOSPACE <S2SV_ModStart> - FDT_ERR_BADSTRUCTURE ; if ( end > path + path_len - 2 ) return - FDT_ERR_NOSPACE ;,0
252,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> server. bgsavechildpid <S2SV_ModStart> server. bgsavechildpid == - 1 || <S2SV_ModEnd> server. bgrewritechildpid <S2SV_ModStart> server. bgrewritechildpid == - 1 ) { if ( server. maxidletime ) closeTimedoutClients ( ) ; } if ( server. maxidletime ) closeTimedoutClients ( ) ; if ( server. maxidletime ) closeTimedoutClients ( ) ; if ( server. maxidletime ) closeTimedoutClients ( ) ; if ( server. maxidletime ) closeTimedoutClients ( ) ; if ( server. shutdown_asap ) { if ( prepareForShutdown ( ) == REDIS_OK ) exit ( 0 ) ; redisLog ( REDIS_WARNING, ""SIGTERM <S2SV_blank> received <S2SV_blank> but <S2SV_blank> errors <S2SV_blank> trying <S2SV_blank> to <S2SV_blank> shutdown <S2SV_blank> the <S2SV_blank> server, <S2SV_blank> check <S2SV_blank> the <S2SV_blank> logs <S2SV_blank> for <S2SV_blank> more <S2SV_blank> information"" ) ; } if ( server. shutdown_asap ) { if ( prepareForShutdown ( ) == REDIS_OK ) exit ( 0 ) ; redisLog ( REDIS_WARNING, ""SIGTERM <S2SV_blank> received <S2SV_blank> but <S2SV_blank> errors <S2SV_blank> trying <S2SV_blank> to <S2SV_blank> shutdown <S2SV_blank> the <S2SV_blank> server,",0
253,"<S2SV_ModStart> = g_timeout_add_seconds ( 10 <S2SV_ModEnd>, ( GSourceFunc",0
254,<S2SV_ModStart> book -> dim && i < n,1
255,<S2SV_ModStart> action ) { if ( r < 0.0 ) { return ; },0
256,<S2SV_ModStart> this_h ) { int i ; <S2SV_ModStart> 16 ) { for ( i = 0 ; i < 2 ; i ++ ) { <S2SV_ModStart> -> predict [ i ] [ 0 ] [ 0 ] = vp9_convolve8_copy ; sf -> predict [ i ] [ 0 ] [ 1 ] = vp9_convolve8_avg ; sf -> predict [ i ] [ 1 ] [ 0 ] = vp9_convolve8_horiz ; sf -> predict [ i ] [ 1 ] [ 0 ] = vp9_convolve8_avg_horiz ; } else { sf -> predict [ i ] [ 0 ] [ 0 ] = vp9_convolve8_vert ; sf -> predict [ i ] [ 1 ] [ 0 ] = vp9_convolve8_avg_vert ; sf -> predict [ i ] [ 1 ] [ 0 ] = vp9_convolve8_horiz ; } } else { sf -> predict [ i ] [ 0 ] [ 0 ] = vp9_convolve8_copy ; sf -> predict [ i ] [ 1 ] [ 0 ] = vp9_convolve8_horiz ; sf -> predict [ i ] [ 1 ] [ 0 ] = vp,0
257,<S2SV_ModStart> (! sock <S2SV_ModEnd> ) OE_RAISE_ERRNO ( <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
258,<S2SV_ModStart> ; if ( msg. msg_namelen > sizeof ( src_info ) ) return - EINVAL ; if (,0
259,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> sctp_v6_protosw_exit ( ) <S2SV_ModStart> ( ) ; unregister_pernet_subsys ( & sctp_net_ops ) ;,0
260,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> index ) ; if ( stream -> psnr_sse_total > 0.0 ) { <S2SV_ModStart> = sse_to_psnr ( <S2SV_ModEnd> stream -> psnr_samples_total <S2SV_ModStart> -> psnr_samples_total, <S2SV_ModEnd> stream -> psnr_sse_total <S2SV_ModStart> -> psnr_sse_total ) ; } else { ovpsnr = sse_to_psnr ( 255.0, stream -> psnr_samples_total ) ; } fprintf ( stderr, "" <S2SV_blank> %.3f"", ovpsnr",0
261,<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen (,1
262,"<S2SV_ModStart> ; TRACE_DEBUG ( ""CIDER=0x%04x"" <S2SV_ModEnd> PRIX16 ""\\r\\n"", <S2SV_ModStart> ; TRACE_DEBUG ( ""PHY1ILR=0x%04x"" <S2SV_ModEnd> PRIX16 ""\\r\\n"", <S2SV_ModStart> ; TRACE_DEBUG ( ""PHY1IHR=0x%04x"" <S2SV_ModEnd> PRIX16 ""\\r\\n"", <S2SV_ModStart> ; if ( ksz8851ReadReg ( interface, KSZ8851_CIDER )!= KSZ8851_REV_A3_ID ) { return ERROR_WRONG_IDENTIFIER ; } ksz8851DumpReg ( interface ) ; context -> frameId = 0 ; context -> txBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; context -> rxBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; if ( context -> txBuffer == NULL || context -> rxBuffer == NULL ) { memPoolFree ( context -> txBuffer ) ; memPoolFree ( context -> rxBuffer ) ; return ERROR_OUT_OF_MEMORY ; } ksz8851WriteReg ( interface, KSZ8851_MARH, htons ( interface ->",0
263,"<S2SV_ModStart> skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
264,"<S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; ret = <S2SV_ModEnd> fit_check_format ( fit <S2SV_ModStart>, IMAGE_SIZE_INVAL ) ; if ( ret ) { bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; ret = <S2SV_ModEnd> - ENOEXEC ; <S2SV_ModStart> - ENOEXEC ; } else { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; ret = - ENOEXEC ; } <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; ret = <S2SV_ModEnd> - ENOEXEC ; <S2SV_ModStart> - ENOEXEC ; <S2SV_ModEnd> bootstage_mark ( bootstage_id <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT_OK ) ; ret = fit_check_format ( fit, IMAGE_SIZE_INVAL ) ; if ( ret ) { bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; ret = - ENOEXEC ; }",0
265,"<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> uinput_fd, UI_DEV_DESTROY )",1
266,<S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> = rc -> avg_frame_bandwidth <S2SV_ModEnd> ; # endif,1
267,"<S2SV_ModStart> i ], ""-u"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart>, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""-u"" <S2SV_ModEnd> ) ; argv",0
268,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
269,<S2SV_ModStart> ib ] ; dequant_ptr = d -> dequant ; coeff_ptr = b -> coeff ; qcoeff_ptr = d -> qcoeff ; dqcoeff_ptr = d -> dqcoeff ; i0 =! type ; eob = * d -> eob ; rdmult = mb -> rdmult * err_mult ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ; rddiv = mb -> rddiv ; best_mask [ 0 ] = best_mask [ 1 ] = 0 ; tokens [ 0 ]. token = DCT_EOB_TOKEN ; tokens [ 0 ]. rate = 0 ; tokens [ 0 ]. error = 0 ; tokens [ 0 ]. error1 = 0 ; tokens [ 0 ]. token = DCT_EOB_TOKEN ; tokens [ 0 ]. qc = 0 ; * ( tokens [ 0 ] + 1 ) = * ( tokens [ 0 ] + 1 ) ; * ( tokens [ 0 ] + 2 ) = * ( tokens [ 0 ] + 2 ) ; * ( tokens [ 0 ] + 3 ) = * ( tokens [ 0,0
270,"<S2SV_ModStart> FN_REFLEN ] ; my_snprintf ( buff, sizeof ( buff ), ""%s"", opt_basedir <S2SV_ModEnd> ) ; #",0
271,<S2SV_ModStart> decrypt_cb ) { ptrdiff_t <S2SV_ModEnd> n = ( <S2SV_ModStart> n = ( ptrdiff_t <S2SV_ModEnd> ) ( data_end,0
272,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
273,"<S2SV_ModStart> int * returnintra, int use_uv <S2SV_ModStart> # if CONFIG_TEMPORAL_DENOISING <S2SV_ModEnd> int zero_mv_sse = <S2SV_ModStart> int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # else unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # endif # endif mode_mv = mode_mv_sb [ sign_bias ] ; best_ref_mv. as_int = 0 ; best_ref_mv. as_int = 0 ; best_mode. rd = INT_MAX ; best_mode. yrd = INT_MAX ; best_mode. intra_rd = INT_MAX ; # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX ; # endif # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best_s",0
274,<S2SV_ModStart> goto error ; if ( <S2SV_ModEnd> statbuf. st_size <S2SV_ModStart> statbuf. st_size < 0 ) goto error ; h -> size = statbuf. st_size,0
275,"<S2SV_ModStart> ; UWORD8 u1_profile_idc = 0, u1_level_idc = 0, u1_seq_parameter_set_id = 0 <S2SV_ModEnd> ; UWORD16 i2_max_frm_num <S2SV_ModStart> ; WORD32 i4_num_reorder_frames <S2SV_ModEnd> ; WORD32 i4_i",0
276,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * params = ( vpx_svc_parameters_t * ) <S2SV_ModStart> -> cpi ; <S2SV_ModEnd> if ( params <S2SV_ModStart> return VPX_CODEC_INVALID_PARAM ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = params -> min_quantizer ; set_encoder_config ( & ctx -> oxcf, & ctx -> cfg, & ctx -> extra_cfg ) ; vp9_change_config ( ctx -> cpi, & ctx -> oxcf <S2SV_ModEnd> ) ; return",0
277,"<S2SV_ModStart> out ) { uint32 <S2SV_ModEnd> bitspersample, samplesperpixel <S2SV_ModStart>, samplesperpixel ; uint32 <S2SV_ModEnd> input_compression, input_photometric <S2SV_ModStart> input_compression, input_photometric <S2SV_ModEnd> ; uint32 width <S2SV_ModStart> ; if ( samplesperpixel!= ( uint32 ) - 1 ) { TIFFSetField ( out, TIFFTAG_SAMPLESPERPIXEL, samplesperpixel ) ; } else if ( bitspersample!= ( uint32 ) - 1 ) { TIFFSetField ( out, TIFFTAG_BITSPERSAMPLE, bitspersample ) ; } else if ( samplesperpixel!= ( uint32 ) - 1 ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Can\'t <S2SV_blank> copy/convert <S2SV_blank> subsampled <S2SV_blank> image.\\n"", TIFFFileName ( in ) ) ; return FALSE ; } } if (",0
278,"<S2SV_ModStart> a ) { char * pn ; char c ; int r ; struct stat st ; pn = a -> name ; if ( archive_strlen ( & ( a -> path_safe ) ) > 0 ) { char * p = a -> path_safe. s ; while ( * p == * pn ) ++ p, ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '/' ) && ( * p == * pn ) ) ++ p, ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '/' ) ) ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '/' ) ) ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '/' ) ) ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '/' ) ) ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '/' ) ) ++ pn ; c = pn [ 0 ]",0
279,"<S2SV_ModStart> unsigned int link_count ; struct kernel_lb_addr loc ; struct indirectEntry * ie ; ie = ( struct indirectEntry * ) ibh -> b_data <S2SV_ModStart> ibh ) { <S2SV_ModEnd> loc = lelb_to_cpu <S2SV_ModStart> extLocation ) ; <S2SV_ModEnd> nbh = udf_read_ptagged <S2SV_ModStart> -> i_sb, <S2SV_ModEnd> & loc, <S2SV_ModStart> & ident ) ; if ( nbh <S2SV_ModEnd> ) { if",0
280,"<S2SV_ModStart> tx_size_uv = get_uv_tx_size ( mbmi ) ; const int filter_level = get_filter_level ( lfi_n, mbmi ) ; uint64_t * const left_y = & lfm -> left_y [ tx_size_y ] ; uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const left_uv = & lfm -> left_uv [ tx_size_uv ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv ; int i ; if (! filter_level ) { return ; } else { const int w = num_8x8_blocks_wide_lookup [ block_size ] ; const int h = num_8x8_blocks_high_lookup [ block_size ] ; int index = shift_y ; for ( i = 0 ; i < h ; i ++ ) { vpx_memset <S2SV_ModStart> w ) ;",0
281,"<S2SV_ModStart> mq_ops ) { spin_lock_irqsave_nested <S2SV_ModEnd> ( & fq <S2SV_ModStart> mq_flush_lock, flags, SINGLE_DEPTH_NESTING",0
282,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
283,<S2SV_ModStart> ) ) { ovalue <S2SV_ModEnd> = stok (,0
284,"<S2SV_ModStart> ( effect_param_t ) || * ( effect_param_t * ) pCmdData > * replySize <S2SV_ModStart> ; if ( * ( effect_param_t * ) pCmdData > * replySize ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if (",0
285,<S2SV_ModStart> ; if ( j >= num_versions ) { err = ENOMEM ; goto cleanup ; } if (,0
286,<S2SV_ModStart> 0x02 ) ; if ( crgram_len > SC_MAX_APDU_BUFFER_SIZE - 1 ),0
287,"<S2SV_ModStart> ; if ( ctxt. tc_mapping [ I40E_AQ_VSI_TC_QUE_OFFSET_SHIFT ] & ( I40E_AQ_VSI_TC_QUE_NUMBER_MASK - 1 ) ) { dev_warn ( & pf -> pdev -> dev, ""invalid <S2SV_blank> TC <S2SV_blank> queue <S2SV_blank> mapping\\n"" ) ; return - EINVAL ; } if (",0
288,<S2SV_ModStart> ; } } return - 1 ;,1
289,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
290,"<S2SV_ModStart> mb_idx, recon_y_stride, recon_uv_stride <S2SV_ModStart> mb_idx, recon_y_stride, recon_uv_stride <S2SV_ModStart> mb_idx, recon_y_stride, recon_uv_stride <S2SV_ModStart> mb_idx, recon_y_stride, recon_uv_stride <S2SV_ModStart> mb_idx, recon_uv_stride, recon_y_stride <S2SV_ModStart> mb_idx, recon_uv_stride, recon_uv_stride <S2SV_ModStart> mb_idx, recon_y_stride, recon_uv_stride <S2SV_ModStart> mb_idx, recon_y_stride, recon_uv_stride <S2SV_ModStart> mb_idx, recon_y_stride, recon_uv_stride <S2SV_ModStart> mb_idx, recon_uv_stride, recon_uv_stride <S2SV_ModStart> mb_idx, recon_y_stride, recon_uv_stride <S2SV_ModStart> mb_idx, recon_y_stride, recon_uv_stride <S2SV_ModStart> mb_idx, recon_uv_stride, recon_uv_stride, recon_uv_stride <S2SV_ModStart> mb_idx, recon_y_stride, recon_uv_stride, recon_uv_stride",0
291,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
292,"<S2SV_ModStart> len ) { <S2SV_ModEnd> char * buf <S2SV_ModStart> char * p <S2SV_ModEnd> ; if ( <S2SV_ModStart> len > SIZE_MAX <S2SV_ModEnd> ) return NULL <S2SV_ModStart> return NULL ; return unicode_decode_with_escapes <S2SV_ModEnd> ( c, <S2SV_ModStart> ( c, n, s, len <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
293,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> enum { YES <S2SV_ModStart> setimes, targisdir <S2SV_ModEnd> ; BUF * <S2SV_ModStart> ""Unexpected <S2SV_blank> off_t/time_t <S2SV_blank> size"" ) ; <S2SV_ModEnd> mask = umask <S2SV_ModStart> ; if ( lstat <S2SV_ModEnd> ( targ, <S2SV_ModStart> ; if ( lstat <S2SV_ModEnd> ( targ, <S2SV_ModStart> ; if ( lstat <S2SV_ModEnd> ( targ,",0
294,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
295,"<S2SV_ModStart> ; if ( vp8_de_alloc_frame_buffer ( & oci -> vpx_temp_scale_frame, width, height, VP8BORDERINPIXELS ) < 0 ) goto allocation_fail ; if (",0
296,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
297,<S2SV_ModStart> u1_num_mbsNby2 ) ; if ( u1_num_mbsNby2 == 0 ) { ps_dec -> ps_dec_err_status -> u1_err_flag &= ~ REJECT_CUR_PIC ; ps_dec -> ps_dec_err_status -> u1_err_flag &= ~ REJECT_CUR_SLICE ; } <S2SV_ModStart> u1_num_mbsNby2 ) ; if ( u1_num_mbsNby2 == 0 ) { ps_dec -> ps_dec_err_status -> u1_err_flag &= ~ REJECT_CUR_PIC ; ps_dec -> ps_dec_err_status -> u1_err_flag &= ~ REJECT_CUR_SLICE ; ps_dec -> ps_dec_err_status -> u1_err_flag &= ~ REJECT_CUR_SLICE ; ps_dec -> ps_dec_err_status -> u1_err_flag &= ~ REJECT_CUR_SLICE ; ps_dec -> ps_dec_err_status -> u1_err_flag &= ~ REJECT_CUR_,0
298,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> vterm_allocator_free ( screen,1
299,"<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & delay )",1
300,"<S2SV_ModStart> one, offset ; size_t <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
301,"<S2SV_ModStart> value ) { cchar * name = sclone ( value ) ; <S2SV_ModStart>, stok ( name <S2SV_ModEnd>, "" <S2SV_blank> \\t,"", <S2SV_ModStart> -> endpoints = name <S2SV_ModEnd> ; } }",0
302,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
303,<S2SV_ModStart> ) ) ; cg_wlock ( & pool -> data_lock ) ; <S2SV_ModStart> ntime ) { free ( pool -> swork. job_id ) ; pool -> swork. job_id = NULL ; free ( prev_hash ) ; pool -> swork. prev_hash = NULL ; pool -> swork. coinbase1 = NULL ; pool -> swork. coinbase2 = NULL ; pool -> swork. bbversion = NULL ; pool -> swork. nbit = NULL ; pool -> swork. ntime = NULL ; <S2SV_ModStart> out ; } <S2SV_ModEnd> free ( pool,0
304,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
305,"<S2SV_ModStart> unused ) { <S2SV_ModEnd> _Py_IDENTIFIER ( __dict__ <S2SV_ModStart> __dict__ ) ; return ast_type_reduce_with_id <S2SV_ModEnd> ( self, <S2SV_ModStart> ( self, & PyId___dict__, ""__reduce__"" <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
306,"<S2SV_ModStart> ) & desc, sizeof ( * desc )",1
307,"<S2SV_ModStart> perf_event * ) ; u64 id <S2SV_ModStart> case PERF_EVENT_IOC_PERIOD : id = perf_event_id ( event ) ; if ( copy_to_user ( ( void __user * ) arg, & id, sizeof ( id ) ) ) return - EFAULT ; return 0 <S2SV_ModEnd> ; case PERF_EVENT_IOC_ID <S2SV_ModStart> ret ; } <S2SV_ModEnd> default : return",0
308,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> * r, PREDICTION_MODE <S2SV_ModEnd> y_mode ) { <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> ] ) ; <S2SV_ModEnd> return uv_mode ;",0
309,"<S2SV_ModStart> sha_zero ) ; memset ( & ctx, 0, sizeof ( ctx ) ) ; <S2SV_ModStart> sha_zero ) ; memset ( & src, 0, sizeof ( src ) ) ;",0
310,"<S2SV_ModStart> iv ) ; if (! NIL_P ( key ) ) rb_ivar_set ( self, id_key, Qnil ) ; if (! NIL_P ( iv ) ) rb_ivar_set ( self, id_iv, Qnil ) ;",0
311,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
312,<S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail ( & <S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail ( & <S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail ( & <S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail ( & <S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail ( & <S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail ( & <S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail ( & <S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail ( & <S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail ( & <S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail ( & <S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail ( & <S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail ( & <S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail ( & <S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail ( & <S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail (,0
313,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> cpu_has ( & <S2SV_ModStart>, X86_FEATURE_ARCH_PERFMON ) ) x86_pmu. max_pebs_events = max ( x86_pmu. max_pebs_events, 4 ) ; else x86_pmu. max_pebs_events = 4",0
314,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> tp, const vpx_TOKENEXTRA <S2SV_ModEnd> * stop ) <S2SV_ModStart> stop ) { vpx_writer <S2SV_ModEnd> * p = <S2SV_ModStart> ] ; const vpx_extra_bit <S2SV_ModEnd> * const b <S2SV_ModStart> b = & vpx_extra_bits <S2SV_ModEnd> [ t ] <S2SV_ModStart> & 1 ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ; } vpx_write_bit <S2SV_ModEnd> ( w,",0
315,"<S2SV_ModStart>, uncompressed_hdr_size ; vpx_write_bit_buffer <S2SV_ModEnd> wb = { <S2SV_ModStart> 0 } ; vpx_write_bit_buffer <S2SV_ModEnd> saved_wb ; write_uncompressed_header <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> += uncompressed_hdr_size ; vpx_compute_update_table <S2SV_ModEnd> ( ) ; <S2SV_ModStart> += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb",0
316,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct net_device * <S2SV_ModEnd> dev_get_valid_name ( struct <S2SV_ModStart> net * net <S2SV_ModEnd>, const char <S2SV_ModStart> name ) { <S2SV_ModEnd> if (! <S2SV_ModStart> '%' ) ) { dev = __dev_get_by_name ( net, name ) ; if ( IS_ERR ( dev ) ) return PTR_ERR ( dev ) ; } <S2SV_ModEnd> else if ( <S2SV_ModStart> ) ; return dev <S2SV_ModEnd> ; } <S2SV_null>",0
317,<S2SV_ModStart> ) { struct ikev2_hdr hdr <S2SV_ModEnd> ; int id_len <S2SV_ModStart> * typedata ; ND_TCHECK ( * ext ) ; if ( item_len < sizeof ( struct ikev2_hdr ) ) goto trunc ; ND_TCHECK ( * ext ) ; if ( item_len < sizeof ( struct ikev2_id ) ) goto trunc <S2SV_ModEnd> ; UNALIGNED_MEMCPY ( <S2SV_ModStart> - sizeof ( hdr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> - sizeof ( hdr <S2SV_ModEnd> ) ; switch <S2SV_ModStart> - sizeof ( hdr <S2SV_ModEnd> ) ; switch <S2SV_ModStart> - sizeof ( hdr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> - sizeof ( hdr <S2SV_ModEnd> ) ; switch <S2SV_ModStart> - sizeof ( hdr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> - sizeof ( hdr <S2SV_ModEnd> ) ; switch <S2SV_ModStart> - sizeof ( hdr <S2SV_ModEnd> ) ; switch <S2SV_ModStart> - sizeof ( hdr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> - sizeof ( hdr <S2SV_ModEnd> ) ; switch <S2SV_ModStart> - sizeof ( hdr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> - sizeof ( hdr <S2SV_ModEnd> ) ; switch <S2SV_ModStart> - sizeof ( hdr <S2SV_ModEnd> ) ; switch <S2SV_ModStart> - sizeof ( hdr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> - sizeof ( hdr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> - sizeof ( hdr <S2SV_ModEnd> ),0
318,"<S2SV_ModStart> ) ) { jas_log ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( ) ) ) ) ) ), ""mif_process_cmpt"" ), hdr, buf, jas_taginfo_nonull ( jas_taginfos_lookup ( mif_tags, jas_taginfo_gettag ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( ) ) ) ) ) ) -> id ) ) ) ) ) ) ) ) ) ;",0
319,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
320,"<S2SV_ModStart> ; WORD32 xt0_0 = 0, yt0_0 = 0, yt1_0 = 0, yt2_0 = 0 <S2SV_ModEnd> ; WORD32 xh0_0 <S2SV_ModStart> ; WORD32 xh0_0 = 0, xh1_0 = 0, xh20_0 = 0, xh21_0 = 0, xl0_0 = 0, xl1_0 = 0, xl20_0 = 0, xl21_0 = 0 <S2SV_ModEnd> ; WORD32 x_0",0
321,"<S2SV_ModStart> mntent -> mnt_dir, false",0
322,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
323,"<S2SV_ModStart> ( req ) ) ; rb_hash_aset ( env, client_id_val, req_client_id ( req )",0
324,"<S2SV_ModStart> endif int col_type ; int <S2SV_ModEnd> prepare_retval ; MYSQL_BIND <S2SV_ModStart> endif # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID <S2SV_ModStart> ; # endif prepare_retval = mysql_prepare ( sth, statement, attribs ) ; if ( prepare_retval!= MYSQL_RES_OK ) { do_error ( sth, 2000, ""SQL <S2SV_blank> prepare <S2SV_blank> failed"", ""HY000"" ) ; return 0 ; }",0
325,"<S2SV_ModStart> need = 0 <S2SV_ModEnd> ; CELL first <S2SV_ModStart> screen, { <S2SV_ModEnd> } ) ;",0
326,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> val ) ) strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> < 0 ) strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> ) ; else strcpy <S2SV_ModEnd> ( str,",0
327,<S2SV_ModStart> ( unlikely ( crng_ready ( ) <S2SV_ModEnd> == 0 ),0
328,"<S2SV_ModStart> LEX_ID ) { snprintf ( str, len <S2SV_ModEnd>, ""ID:"", <S2SV_ModStart> ""ID:"", len <S2SV_ModEnd>, jslGetTokenValueAsString ( <S2SV_ModStart> jslGetTokenValueAsString ( ) <S2SV_ModEnd> ) ; } <S2SV_ModStart> LEX_STR ) { snprintf ( str, len <S2SV_ModEnd>, ""String:\'"", <S2SV_ModStart> ""String:\'"", len <S2SV_ModEnd> ) ; }",0
329,,1
330,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
331,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
332,"<S2SV_ModStart> ) { return memcmp <S2SV_ModEnd> ( s1,",0
333,"<S2SV_ModStart> { parse_global_option ( ""help"" <S2SV_ModEnd>, NULL, <S2SV_ModStart> ; parse_service_option ( ""help"" <S2SV_ModEnd>, NULL, <S2SV_ModStart> { parse_global_option ( ""defaults"" <S2SV_ModEnd>, NULL,",0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,"<S2SV_ModStart> ; if (! new_iv_set ) { DBG_log ( ""decrypting <S2SV_blank> encrypted <S2SV_blank> message"" ) ; return ; } if (",0
336,"<S2SV_ModStart> ; } } { IMPEG2D_ERROR_CODES_T e_error ; e_error = impeg2d_process_video_header ( & ( ps_dec -> s_bit_stream ), ps_dec -> pu1_input_buffer, u4_size ) ; if ( IMPEG2D_ERROR_CODES_T ) IVD_ERROR_NONE!= e_error ) { ps_op -> s_ivd_video_decode_op_t. u4_error_code = e_error ; } }",0
337,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char * print_string,0
338,"<S2SV_ModStart>. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img, <S2SV_ModStart>. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img,",1
339,"<S2SV_ModStart> ) ; } else if ( arg1 == - 1 ) { win_maximise ( - 1 ) ; win_set_chars ( 0, 0 ) ; }",0
340,<S2SV_ModStart> < cols + 8 <S2SV_ModEnd> ; i ++,0
341,"<S2SV_ModStart> -> log ) { if ( i -> parent -> log ) <S2SV_ModStart> -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; } <S2SV_ModEnd> context. curX <S2SV_ModStart> -> log ) { if ( i -> parent -> log ) <S2SV_ModStart> -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; } <S2SV_ModEnd> context. curX <S2SV_ModStart> -> log ) { if ( i -> parent -> log ) <S2SV_ModStart> -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; } <S2SV_ModEnd> context. curX <S2SV_ModStart> -> log ) { if ( i -> parent -> log ) <S2SV_ModStart> -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; } <S2SV_ModEnd> context. curX <S2SV_ModStart> -> log ) { if ( i -> parent -> log ) <S2SV_ModStart> -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than",0
342,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
343,<S2SV_ModStart> = value ; if ( 0 == ps_codec -> i4_pps_done ) { ps_codec -> i4_pps_done = 1 ; return IHEVCD_INVALID_HEADER ; },0
344,"<S2SV_ModStart> ) ) { if ( psf -> debug ) { fprintf ( stderr, ""Format <S2SV_blank> \'%c\' <S2SV_blank> not <S2SV_blank> recognized\\n"", c ) ; }",0
345,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
346,"<S2SV_ModStart> 0 ; } if ( copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) == - 1 ) { fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> copy <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; return 0 ; } <S2SV_ModStart> ( rv ) { <S2SV_ModStart> ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; return 0 ; } <S2SV_ModEnd> } _exit (",0
347,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> BLOCK_8X8 : return vpx_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> BLOCK_16X8 : return vpx_mse16x8 <S2SV_ModEnd> ; case BLOCK_8X16 <S2SV_ModStart> BLOCK_8X16 : return vpx_mse8x16 <S2SV_ModEnd> ; default : <S2SV_ModStart> default : return vpx_mse16x16 <S2SV_ModEnd> ; } },1
348,<S2SV_ModStart> ; if ( encoded_key_pack == NULL ) { retval = KRB5_E_MALLOC_FAILURE ; goto done ; } if ( <S2SV_ModStart> ; if ( encoded_dhkey_info == NULL ) { retval = KRB5_E_MALLOC_FAILURE ; goto done ; } if ( <S2SV_ModStart> ; if ( encoded_key_pack == NULL ) { retval = KRB5_E_MALLOC_FAILURE ; goto done ; } if ( <S2SV_ModStart> ; if ( encoded_dhkey_info == NULL ) { retval = KRB5_E_MALLOC_FAILURE ; goto done ; } if (,0
349,"<S2SV_ModStart> flags ) ; if (! vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } <S2SV_ModStart> vb2_buf ) ; <S2SV_ModEnd> if ( input",1
350,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> size_t <S2SV_ModEnd> zcalloc ( size_t <S2SV_ModStart> size ) { size_t ret ; <S2SV_ModStart> # ifdef HAVE_MALLOC_SIZE ret = zmalloc_size ( ptr ) ; if ( ret < 0 ) { zmalloc_oom_handler ( size ) ; return - 1 ; } <S2SV_ModStart> ; # else ret = ( size_t ) * ( ( size_t * ) ptr ) ; if ( ret < 0 ) { zmalloc_oom_handler ( size ) ; return - 1 ; },0
351,<S2SV_ModStart> -> serviceId == EXTRACT_16BITS <S2SV_ModEnd> ( & rxh,1
352,"<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len > MWIFIEX_SSID_MAX_SSID_LEN ) { mwifiex_dbg ( adapter, INFO, ""info: <S2SV_blank> ADHOC_S_CMD: <S2SV_blank> SSID <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d\\n"", MWIFIEX_SSID_MAX_SSID_LEN ) ; return - 1 ; }",0
353,"<S2SV_ModStart> -> valuelen ; if ( nsbuf == 0 ) { error = context -> put_listent ( context, NULL, 0, 0, 0 ) ; if ( context -> seen_error ) return error ; }",0
354,"<S2SV_ModStart> struct l2cap_conf_rfc rfc ; void * ptr = req -> data ; BT_DBG ( ""sk <S2SV_blank> %p"", sk ) ; switch ( pi -> mode ) { case L2CAP_MODE_BASIC : if ( pi -> imtu!= L2CAP_DEFAULT_MTU ) l2cap_add_conf_opt ( & ptr, L2CAP_CONF_MTU, 2, pi -> imtu ) ; break ; case L2CAP_MODE_ERTM : rfc. mode = L2CAP_MODE_ERTM ; rfc. txwin_size = L2CAP_DEFAULT_RX_WINDOW ; rfc. max_transmit = L2CAP_DEFAULT_MAX_RECEIVE ; rfc. retrans_timeout = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO ) ; rfc. monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; l2cap_add_conf_opt ( & ptr, L",0
355,"<S2SV_ModStart> { do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> r, MSG_WAITALL )",0
356,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ps_dec -> u1_nal_ref_idc <S2SV_ModStart> ps_dec -> u1_nal_ref_idc == IDR_SLICE_NAL ) { return ERROR_INCOMPLETE_FRAME ; } if ( ( ps_dec -> u1_nal_ref_idc == IDR_SLICE_NAL ) && ( ps_dec -> u1_pic_decode_done == 1 ) ) { return ERROR_INCOMPLETE_FRAME ; } if ( ( ps_dec -> u1_nal_ref_idc == IDR_SLICE_NAL ) && ( ps_dec -> u1_pic_decode_done == 1 ) ) { return ERROR_INCOMPLETE_FRAME ; } if ( ( ps_dec -> u1_nal_ref_idc == IDR_SLICE_NAL ) && ( ps_dec -> u1_pic_decode_done == 1 ) ) { return ERROR_INCOMPLETE_FRAME ; } if ( ( ps_dec -> u1_pic_decode_done == 1 ) && ( ps_dec -> u1_pic_decode_,0
357,<S2SV_ModStart> while ( pair <S2SV_ModEnd> ) { mprAddItem,1
358,"<S2SV_ModStart> * delegation, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> = 0 ; fmode <S2SV_ModEnd> &= ( FMODE_READ <S2SV_ModStart> -> type & fmode )!= fmode <S2SV_ModEnd> ) goto no_delegation_unlock <S2SV_ModStart> -> stateid, fmode <S2SV_ModEnd> ) ; ret <S2SV_ModStart>, NULL, fmode <S2SV_ModEnd> ) ; ret",1
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,"<S2SV_ModStart> * xd, int64_t <S2SV_ModEnd> * out_rate_sum, <S2SV_ModStart> * out_dist_sum ) { int i ; int64_t rate_sum = 0 ; int64_t dist_sum = 0 ; const int ref = xd -> mi [ 0 ] -> mbmi. ref_frame [ 0 ] ; unsigned int sse ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblock_plane * const p = & x -> plane [ i ] ; struct macroblockd_plane * const pd = & xd -> plane [ i ] ; const BLOCK_SIZE bs = get_plane_block_size ( bsize, pd ) ; ( void ) cpi -> fn_ptr [ bs ]. vf ( p -> src. buf, p -> src. stride, pd -> dst. buf, pd -> dst. stride, & sse ) ; if ( cpi -> speed > 4 ) { int64_t rate ; int64_t dist ; int64_t square_error = sse ; int quantizer = ( pd -> dequant [ 1 ] >> 3 ) ; if ( quantizer < 120 ) rate = ( square_error * (",0
361,<S2SV_ModStart> } if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
362,<S2SV_ModStart> { if ( index >= PAM_MAX_RESP_SIZE ) { return ( PAM_BUF_ERR ) ; } if ( <S2SV_ModStart> == NULL ) { free ( * ret_username ) ; <S2SV_ModStart> PAM_BUF_ERR ) ; },0
363,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> seg ) { vpx_read_tree <S2SV_ModEnd> ( r, <S2SV_ModStart> ( r, vpx_segment_tree <S2SV_ModEnd>, seg ->",0
364,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",1
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,"<S2SV_ModStart> depth ++ ; if ( depth == 0 ) { ND_PRINT ( ( ndo, ""No <S2SV_blank> data\\n"" ) ) ; return ( buf ) ; }",0
367,"<S2SV_ModStart> ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n < ( length + 8 ) ) { return ERROR_FAILURE ; } netBufferRead ( context -> txBuffer, buffer, offset, length ) ; header. controlWord = htole16 ( TX_CTRL_TXIC | ( context -> frameId ++ & TX_CTRL_TXFID ) ) ; header. byteCount = htole16 ( length ) ; ksz8851SetBit ( interface, KSZ8851_RXQCR, RXQCR_SDA ) ; ksz8851WriteFifo ( interface, ( uint8_t * ) & header, sizeof ( Ksz8851TxHeader ) ) ; ksz8851WriteFifo ( interface, context -> txBuffer, length ) ; ksz8851ClearBit ( interface, KSZ8851_TXQCR, TXQCR_METFE ) ; n = ksz8851ReadReg ( interface, <S2SV_ModStart> ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8",0
368,<S2SV_ModStart> ( ) ; mono_attach_maybe_stop ( ) ;,0
369,"<S2SV_ModStart>, x_e, x_f ; WORD32 n10, n20, n30, n01, n11, n21, n31 ; WORD32 n12, n22, n32, n03, n13, n23, n33 ; WORD32 n0, j0 ; WORD32 * x0, * y0, * y1, * y2, * y3 ; WORD32 * x_0, * x_1, * x_2, * x_3 ; x_0 = ptr_x ; x_1 = ptr_y ; x2 = ptr_x + ( WORD32 ) npoints ; x_2 = ptr_x + ( WORD32 ) npoints ; x_3 = ptr_x + ( WORD32 ) npoints ; x_4 = * x0 ++ ; x_5 = * x0 ++ ; x_6 = * x0 ++ ; x_7 = * x0 ++ ; <S2SV_ModStart> x0 ++ ; n10 = x_0 + x_2 ; n01 = x_1 + x_3 ; n20 = x_0 - x_2 ; n21 = x_1 - x_",0
370,"<S2SV_ModStart> ; if ( pmd_none_or_clear_bad ( pmd ) ) continue ; ret = unuse_pte_range ( vma, pmd, addr, next, entry, page ) ; if ( ret ) return ret ; if ( <S2SV_ModStart> ) ) ) <S2SV_ModEnd> return ret ;",0
371,"<S2SV_ModStart> height, target_width = 0, target_height = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( argv [ 2 ], & width, & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } if (! parse_dim ( argv [ 3 ], & target_width, & target_height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpin = fopen ( fin, ""rb"" ) ; if ( fpin == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> read\\n"", fin ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpout = fopen ( fout, ""wb"" ) ; if ( fpout == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank>",0
372,"<S2SV_ModStart> num_fields ) { <S2SV_ModEnd> _Py_IDENTIFIER ( _attributes <S2SV_ModStart> _attributes ) ; int result ; int i ; PyObject * s, * l ; if (! attrs ) return 0 ; for ( i = 0 ; i < num_fields ; i ++ ) { s = PyUnicode_FromString ( attrs [ i ] ) ; if (! s ) { Py_DECREF ( l ) ; return 0 ; } PyTuple_SET_ITEM ( l, i, s ) ; } result = _PyObject_SetAttrId ( ( PyObject * ) type, & PyId__attributes, l ) >= 0 ; Py_DECREF ( l ) ; return result <S2SV_ModEnd> ; } <S2SV_null>",0
373,<S2SV_ModStart> ; struct vpx_codec_alg_priv <S2SV_ModEnd> priv ; vpx_codec_enc_cfg_t <S2SV_ModStart> sizeof ( struct vpx_codec_alg_priv <S2SV_ModEnd> ) ) ; <S2SV_ModStart> -> priv = <S2SV_ModEnd> priv -> base <S2SV_ModStart> enc ) { priv <S2SV_ModEnd> -> cfg = <S2SV_ModStart> enc = & priv <S2SV_ModEnd> -> cfg ; <S2SV_ModStart> ++ ) ; priv <S2SV_ModEnd> = extracfg_map [ <S2SV_ModStart> ]. cfg <S2SV_ModEnd> ; priv ->,0
374,"<S2SV_ModStart>, totfr ) ) < 0 ) return ret ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; totfr += step ; if ( totfr > BOT ) { totfr = 0 ; for ( i = 0 ; i < 256 ; i ++ ) { unsigned nc = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] = nc ; totfr += nc ; } for ( i = 0 ; i < 256 ; i ++ ) { unsigned sum = 0 ; unsigned i16_17 = i << 4 ; for ( j = 0 ; j < 16 ; j ++ ) sum += i16_17 ; pixel -> lookup [ i ] = sum ; } } pixel -> total_freq = totfr ; * rval = c & s -> cbits ; return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
375,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx ->,0
376,"<S2SV_ModStart> ) ) { if ( iinfo -> i_location. length > UDF_I ( inode ) -> i_sb -> s_blocksize ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> inconsistent <S2SV_blank> file <S2SV_blank> entry <S2SV_blank> length\\n"", inode -> i_ino ) ; ret = - EIO ; goto out ; } <S2SV_ModStart> ) ) { if ( iinfo -> i_location. length > UDF_I ( inode ) -> i_sb -> s_blocksize ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> inconsistent <S2SV_blank> file <S2SV_blank> entry <S2SV_blank> length\\n"", inode -> i_ino ) ; ret = - EIO ; goto out ; } <S2SV_ModStart> ) ) { if ( iinfo -> i_location. length > UDF_I ( inode ) -> i_sb -> s_blocksize ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> inconsistent <S2SV_blank> file <S2SV_blank> entry <S2SV_blank> length\\n"", inode -> i_ino ) ; ret = - EIO ; goto out ; }",0
377,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0",1
378,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> bad_format_imginfo ( char <S2SV_ModStart> char * ptr <S2SV_ModEnd> ; ptr = <S2SV_ModStart> 'S' ) { return true <S2SV_ModEnd> ; } else <S2SV_ModStart> } } return false <S2SV_ModEnd> ; } <S2SV_null>,0
379,<S2SV_ModStart> IPV6DefragSturgesNovakLastTest ) ; # if defined ( CONFIG_IPV6_MULTICAST ) || defined ( CONFIG_IPV6_MULTICAST_IPV6 ) <S2SV_ModStart> IPV6DefragSturgesNovakLastTest ) ; # endif,0
380,<S2SV_ModStart> if ( object_data && object_length,0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,<S2SV_ModStart> p_sys -> b_auto_field_coding &&! p_sys -> b_eos_pulled,0
384,<S2SV_ModStart> bfname. len && bfname. len,0
385,<S2SV_ModStart> 4 ) ; size_t <S2SV_ModEnd> num_properties = GETINT32 <S2SV_ModStart> len ) ; if (! a -> names [ i ]. data ) return NULL ;,0
386,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
387,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { vpx_ref_frame_t <S2SV_ModEnd> * data = <S2SV_ModStart> * fb ; vpx_get_reference_dec <S2SV_ModEnd> ( ctx ->",0
388,"<S2SV_ModStart> + 1 ; if ( length > frag -> data_size - start ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> "" ""no <S2SV_blank> image <S2SV_blank> content <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> + 1 ; if ( length > frag -> data_size - start ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> "" ""no <S2SV_blank> image <S2SV_blank> content <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> + 1 ; if ( length > frag -> data_size - start ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> "" ""no <S2SV_blank> image <S2SV_blank> content <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
389,"<S2SV_ModStart> expr_stmt ) ; REQ ( CHILD ( n, 0 ), testlist_ty ) ; <S2SV_ModStart> 1 ) { node * testlist = CHILD ( n, 0 ) ; if (! testlist ) return NULL ; <S2SV_ModStart> c_arena ) ; } else if ( TYPE ( CHILD ( n, 1 ) ) == testlist ) { node * testlist = CHILD ( n, 0 ) ; expr_ty e = ast_for_testlist ( c, testlist ) ; if (! e ) return NULL ; return Expr ( e, LINENO ( n ), n -> n_col_offset, n -> n_end_lineno, n -> n_end_col_offset, c -> c_arena ) ; } else if ( TYPE ( CHILD ( n, 1 ) ) == testlist ) { expr_ty e = ast_for_testlist ( c, CHILD ( n, 0 ) ) ; if (! e ) return NULL ; return Expr ( e, LINENO ( n ), n -> n_col_offset, n -> n_end_lineno, n -> n_end_col_offset, c -> c_",0
390,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> vp8_denoiser_filter_c ( YV12_BUFFER_CONFIG <S2SV_ModStart> = 16 ; <S2SV_ModEnd> char * mc_running_avg_y <S2SV_ModStart> -> y_stride ; <S2SV_ModEnd> char * running_avg_y <S2SV_ModStart> -> y_stride ; <S2SV_ModEnd> int r, <S2SV_ModStart> c, i <S2SV_ModEnd> ; if ( <S2SV_ModStart> MOTION_MAGNITUDE_THRESHOLD ) { int adj_val [ 3 ] = { 3, 4, 6 } ; for ( i = 0 ; i < 3 ; ++ i ) adj_val [ i ] += 1 ; } for ( r = 0 ; r < 16 ; ++ r ) { for ( c = 0 ; c < 16 ; ++ c ) { int diff = 0 ; int adjustment = 0 ; int absdiff = 0 ; diff = mc_running_avg_y [ c ] - sig [ c ] ; absdiff = abs ( diff ) ; if ( absdiff <= 3 ) { running_avg_y [ c ] = mc_running_avg_y [ c ] ; sum_diff += diff ; } else { if ( absdiff >= 4 &&",0
391,<S2SV_ModStart> ; } } if ( ( sockPtr -> flags & NS_SOCK_ESTABLISHED )!= 0u ) { sockPtr -> keep = NS_TRUE ; },0
392,"<S2SV_ModStart> = uregs ; xtregs_coprocessor_t cp0 ; <S2SV_ModStart> ret = 0 ; memset ( & cp0, 0, sizeof ( cp0 ) ) <S2SV_ModStart> ti ) ; <S2SV_ModEnd> ret |= __copy_from_user <S2SV_ModStart> ) ) ; <S2SV_ModEnd> ret |= __copy_from_user",0
393,<S2SV_ModStart> size ) ; if ( message -> length > 0 ) { <S2SV_ModStart> buffer ) ; },0
394,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" <S2SV_ModStart> cg_item ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
395,<S2SV_ModStart> ; if (! header ) return 0 ; <S2SV_ModEnd> new_bh = ext2_xattr_cache_find <S2SV_ModStart> new_bh ) ; <S2SV_ModEnd> } else {,0
396,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
397,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
398,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
399,"<S2SV_ModStart>, 1 ) ; if ( imbuf == NULL ) return ( MagickFalse ) <S2SV_ModStart> ) ; } for ( n = 0 ; n < 16 ; n ++ ) { sixel_palet [ n ] = sixel_default_color_table [ n ] ; } for ( r = 0 ; r < 6 ; r ++ ) { for ( g = 0 ; g < 6 ; g ++ ) { for ( b = 0 ; b < 6 ; b ++ ) { sixel_palet [ n ++ ] = SIXEL_RGB ( r * 51, g * 51, b * 51 ) ; } } } for ( ; n < SIXEL_PALETTE_MAX ; n ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 255, 255, 255 ) ; } for ( ; n < SIXEL_PALETTE_MAX ; n ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 255, 255, 255 ) ; } for ( ; n < SIXEL_PALETTE_MAX ; n ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 255, 255,",0
400,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vpx_ref_frame_t * ) ; YV12_BUFFER_CONFIG sd <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; <S2SV_ModEnd> frame -> img <S2SV_ModStart> frame -> img = image2yuvconfig ( <S2SV_ModEnd> frame -> img <S2SV_ModStart> -> img, <S2SV_ModEnd> sd ) ; <S2SV_ModStart> sd ) ; if ( vp9_copy_reference_dec ( ctx -> pbi, ( VP9_REFFRAME ) frame -> frame_type, & sd ) ) { return VPX_CODEC_INVALID_PARAM ; } else { return VPX_CODEC_INVALID_PARAM ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
401,<S2SV_ModStart> u1_num_mbsNby2 ) ; if ( u1_num_mbsNby2 == 0 ) { ps_dec -> ps_dec_err_status -> u1_err_flag &= ~ REJECT_CUR_PIC ; ps_dec -> ps_dec_err_status -> u1_err_flag &= ~ REJECT_CUR_SLICE ; } <S2SV_ModStart> u1_num_mbsNby2 ) ; if ( u1_num_mbsNby2 == 0 ) { ps_dec -> ps_dec_err_status -> u1_err_flag &= ~ REJECT_CUR_PIC ; ps_dec -> ps_dec_err_status -> u1_err_flag &= ~ REJECT_CUR_SLICE ; ps_dec -> ps_dec_err_status -> u1_err_flag &= ~ REJECT_CUR_SLICE ; ps_dec -> ps_dec_err_status -> u1_err_flag &= ~ REJECT_CUR_SLICE ; ps_dec -> ps_dec_err_status -> u1_err_flag &= ~ REJECT_CUR_,0
402,<S2SV_ModStart> ; UWORD32 u4_x_dst_offset <S2SV_ModEnd> = 0 ; <S2SV_ModStart> ) ; else { <S2SV_ModStart> ps_dec ) ; },0
403,"<S2SV_ModStart> VP9_LAST_FLAG ) { <S2SV_ModEnd> YV12_BUFFER_CONFIG * const <S2SV_ModStart> * const cfg ; if ( cm -> ref_frame_map [ 0 ] >= pbi -> num_frames ) { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Invalid <S2SV_blank> reference <S2SV_blank> frame"" ) ; return VPX_CODEC_ERROR ; } cfg <S2SV_ModStart> -> frame_bufs [ <S2SV_ModEnd> cm -> ref_frame_map <S2SV_ModStart> [ 0 ] <S2SV_ModEnd> ]. buf",0
404,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
405,"<S2SV_ModStart> TX_SIZE tx_size = <S2SV_ModEnd> get_uv_tx_size ( mbmi <S2SV_ModStart> get_uv_tx_size ( mbmi <S2SV_ModEnd> ) ; const <S2SV_ModStart> ; int i ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) { int r, c ; int max_blocks_wide = num_4x4_w ; int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> ( 5 + pd -> subsampling_y ) ) ; i = 0 ; for ( r = 0 ; r < num_4x4_w ; r += ( 1 << tx_size ) ) { for ( c = 0 ; c < num_4x4_w ; c += ( 1 << tx_size ) ) { if ( r < max_blocks_high",0
406,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 4 ) ; <S2SV_ModEnd> src += src_stride",0
407,<S2SV_ModStart> { rowstoread = ( row + img -> row_offset ) % rowsperstrip ; nrow = ( row + rowstoread > h? h - row : rowstoread ) ; offset_row = row + <S2SV_ModEnd> img -> row_offset <S2SV_ModStart> img -> row_offset <S2SV_ModEnd> ; if (,0
408,<S2SV_ModStart> ; } } <S2SV_ModEnd> return 0 ;,0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. size <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. size <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
410,<S2SV_ModStart> num & ( 1U << number <S2SV_ModEnd> ) ) return <S2SV_ModStart> num - ( 1U <S2SV_ModEnd> << number ),0
411,"<S2SV_ModStart> ] ; const size_t <S2SV_ModEnd> w = vpx_img_plane_width <S2SV_ModStart> y ) { int r = <S2SV_ModEnd> fread ( buf <S2SV_ModStart>, file ) ; if ( r <S2SV_ModStart>!= w ) { fclose ( file ) ; <S2SV_ModStart> return 0 ; }",0
412,"<S2SV_ModStart> = NULL ; uint32_t attr_len ; uint32_t <S2SV_ModEnd> orig_attr_len ; uint16_t <S2SV_ModStart> 1 ; } if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } <S2SV_ModStart> md5_ctx ) ; if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; }",0
413,<S2SV_ModStart> case EVP_CTRL_AEAD_SET_IVLEN : if ( arg <= 0 || arg > CHACHA_CTR_SIZE ) return 0 ;,0
414,"<S2SV_ModStart>, 0, comm_event -> comm_size <S2SV_ModEnd> ) ; if",0
415,"<S2SV_ModStart> ; BT_DBG ( ""sock <S2SV_blank> %p, <S2SV_blank> peer <S2SV_blank> %d, <S2SV_blank> sk <S2SV_blank> %p"" <S2SV_ModEnd>, sock, <S2SV_ModStart> sock, sk, peer",0
416,<S2SV_ModStart> MT_CPTYPE_PASSSALT ) { if ( cpkt. length > MT_PASS_SALT_LEN ) { return - 1 ; },0
417,<S2SV_ModStart> MUTT_ABORT ) { imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } else <S2SV_ModStart> ) ) ; imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } # <S2SV_ModStart> MUTT_ABORT ) { imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } # <S2SV_ModStart> MUTT_ABORT ) { imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; },0
418,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
419,"<S2SV_ModStart> ) ) ; memset ( G. gps_loc, 0, sizeof ( float ) * 5 ) ;",0
420,"<S2SV_ModStart> remainder, & rlen, NULL <S2SV_ModEnd> ) ; if",0
421,"<S2SV_ModStart> * slavename ; if ( ( user = find_user ( curconn -> username ) )!= NULL ) { md5_state_t state ; # if defined ( __linux__ ) && defined ( _POSIX_MEMLOCK_RANGE ) mlock ( md5data, sizeof ( md5data ) ) ; mlock ( md5sum, sizeof ( md5sum ) ) ; if ( user -> password!= NULL ) { mlock ( user -> password, strlen ( user -> password ) ) ; } # endif <S2SV_ModStart> = 0 ; strlcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> 82 ) ; memcpy ( md5data + 1 + strlen ( user -> password ), curconn -> pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( user -> password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; md5sum [ 0 ] = 0 ; init_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr",0
422,"<S2SV_ModStart> ; if ( unicode_compare_with_ascii_string <S2SV_ModEnd> ( name, <S2SV_ModStart> { if ( unicode_compare_with_ASCII_string <S2SV_ModEnd> ( name,",0
423,<S2SV_ModStart> off } ; if ( str == NULL ) { return - 1 ; },0
424,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
425,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
426,"<S2SV_ModStart> size_t s ; s = exif_get_long ( o, EXIF_BYTE_ORDER_INTEL ) ; if ( s > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } <S2SV_ModStart> 12 ) ) <S2SV_ModEnd> { exif_log (",0
427,<S2SV_ModStart> bd_addr ) { if (! check_addr ( bd_addr ) ) return BT_STATUS_INVALID_ARGS ;,0
428,"<S2SV_ModStart> int i ; size_t avail ; size_t <S2SV_ModEnd> expect ; txid <S2SV_ModStart> 4 ) ; expect = 8 + 8 + nxip * 8 ; if ( nxip < 0 || nxip > avail || expect > avail ) goto bad_format ; xmin = pq_getmsgint64 ( buf ) ; xmax = pq_getmsgint64 ( buf ) ; if ( xmin == 0 || xmin > xmax || xmax > MAX_TXID ) goto bad_format ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; snap -> xmin = xmin ; snap -> xmax = xmax ; SET_VARSIZE ( snap, TXID_SNAPSHOT_SIZE ( nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last || cur < xmin || cur >= xmax ) goto bad_format ; snap -> xip [ i ] = cur ; last = cur ; } PG_RETURN_POINTER ( snap ) ; bad_format : elog ( ERROR, ""invalid <S2SV_blank> snapshot <S2SV_blank> data"" ) ; return ( Datum ) NULL <S2SV_ModEnd> ; } <S2SV_null>",0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. size <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. size <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. size <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. size <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
430,<S2SV_ModStart> ( epoll_ ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
431,"<S2SV_ModStart> ( CMD_INITIALIZE, & new_global_options. option <S2SV_ModEnd>, NULL ) <S2SV_ModStart> ( CMD_INITIALIZE, & new_service_options. option <S2SV_ModEnd>, NULL )",0
432,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_PHNUM_MIN : * ( size_t * ) val = ms -> elf_phnum_min ; return 0 ;,0
433,<S2SV_ModStart> offset ) { struct address_space * mapping = page -> mapping ; <S2SV_ModStart> EXT4_JOURNAL ( page <S2SV_ModEnd> ) ; if,0
434,"<S2SV_ModStart> ++ ) { writer = ( TrackWriter * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STSC ) ; if (! writer ) return GF_OUT_OF_MEM ; <S2SV_ModStart> 1 ) ; if (! trak ) { GF_SAFEFREE ( writer, TrackWriter ) ; goto exit ; } <S2SV_ModEnd> writer -> sampleNumber",0
435,"<S2SV_ModStart> 17 ] ; size_t <S2SV_ModEnd> plen ; md5_state_t <S2SV_ModStart> = 0 ; strlcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart>, password, sizeof ( md5data ) - 1 <S2SV_ModEnd> ) ; md5data <S2SV_ModStart> ; md5data [ sizeof ( md5data ) - 1 <S2SV_ModEnd> ] = '\\0' <S2SV_ModStart> = '\\0' ; strlcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> ( password ), pass_salt, sizeof ( md5sum ) - 1 <S2SV_ModEnd> ) ; md5_init",0
436,<S2SV_ModStart> ; if ( _mibindex_max ) { int i ; for ( i = 0 ; i < _mibindex_max ; ++ i ) SNMP_FREE ( _mibindex_max [ i ] ) ; _mibindex_max = 0 ; _mibindex_max = NULL ; } if (,0
437,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
438,<S2SV_ModStart> ( ) ; g_hash_table_remove_all ( headers ) ;,0
439,"<S2SV_ModStart> -> y_buffer ; # if CONFIG_VP9_HIGHBITDEPTH if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { memcpy ( dst, src, src_ybc -> y_width ) ; src += src_ybc -> y_stride ; dst += dst_ybc -> y_stride ; } # endif <S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst,",0
440,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_rd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart>,0
441,"<S2SV_ModStart>, obj_tlen ; u_int <S2SV_ModEnd> offset ; u_int <S2SV_ModStart> ) ) ; if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( lmp_obj_",0
442,"<S2SV_ModStart> * mbmi, nmv_context_counts * counts, <S2SV_ModStart> [ 2 ] <S2SV_ModEnd> ) { int <S2SV_ModStart> i ) { nmv_inc_mv ( counts, <S2SV_ModEnd> & mbmi -> <S2SV_ModStart> [ 0 ] <S2SV_ModEnd> ) ; }",0
443,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ),",0
444,"<S2SV_ModStart> ; if ( skb_out -> len + hdr_size > skb -> len ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; } skb_pull_rcsum ( skb_out, hdr_size ) ; memmove ( skb_out -> data - ETH_HLEN, skb_mac_header ( skb_out ), ETH_HLEN ) ; skb_set_mac_header ( skb_out, - ETH_HLEN ) ; skb_reset_network_header ( skb_out ) ; skb_reset_transport_header ( skb_out ) ; hlist_for_each_entry ( entry, chain, list ) { size = entry -> skb -> len - hdr_size ; memcpy ( skb_put ( skb_out, size ), entry -> skb -> data + hdr_size, size ) ; } free_skb ( skb_out ) ; hlist_for_each_entry ( entry, chain, list ) { size = entry -> skb -> len - hdr_size ; memcpy",0
445,<S2SV_ModStart> ) return ; if (! <S2SV_ModStart> netsnmp_mibindex_load ( ) ) { SNMP_FREE ( env_var ) ; return ; } <S2SV_ModEnd> DEBUGMSGTL ( (,0
446,"<S2SV_ModStart> { fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, O_RDWR ) ) <S2SV_ModStart> 1 ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_KEY ) ) <S2SV_ModStart> EV_REL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_SYN ) ) <S2SV_ModStart> x ++ ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> ]. mapped_id )",0
447,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
448,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s, <S2SV_ModStart> & 1 ) vpx_lpf_vertical_4 <S2SV_ModEnd> ( s +",0
449,<S2SV_ModStart> krb5_error_code iakerb_alloc_context ( krb5_ctx_id <S2SV_ModEnd> * pctx ) <S2SV_ModStart> pctx ) { krb5_ctx_id <S2SV_ModEnd> ctx ; krb5_error_code <S2SV_ModStart> ; code = krb5_gss_init_key_context <S2SV_ModEnd> ( & ctx,0
450,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> bitmapDC = CreateCompatibleDC",1
451,<S2SV_ModStart> ; while ( ( <S2SV_ModStart> )!= START_CODE_PREFIX ) && ( ps_stream -> u4_offset < ps_stream -> u4_max_offset ),1
452,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { ret = <S2SV_ModEnd> - EINVAL ; <S2SV_ModStart> - EINVAL ; goto out ; }",1
453,"<S2SV_ModStart> ; if ( mono_class_is_abstract_method ( imethod -> klass ) ) { MonoClass * klass = ( MonoClass * ) imethod -> klass ; if (! mono_class_is_abstract_method ( klass ) ) return NULL ; mono_class_set_abstract_method ( klass, imethod ) ; } if (",0
454,<S2SV_ModStart> ) ] ; long <S2SV_ModEnd> tmp ; if <S2SV_ModStart> ; if ( count >= sizeof ( buf ) ) return - EINVAL ; if (,0
455,"<S2SV_ModStart> char * last_elem = NULL <S2SV_ModStart>, * wp = NULL <S2SV_ModStart> ( ( ( strncasecmp <S2SV_ModEnd> ( & name <S2SV_ModStart> ) || ( strncasecmp <S2SV_ModEnd> ( & name <S2SV_ModStart> 'O' )? <S2SV_ModEnd> l -> l_origin <S2SV_ModStart> l -> l_origin : NULL",0
456,<S2SV_ModStart> decContainer_t ) ) ; if ( pDecCont == NULL ) return ( H264SWDEC_MEMFAIL ),0
457,<S2SV_ModStart> ihl == 5 || iph -> iph_len < iph -> ihl * 4 <S2SV_ModStart> 0 ; } if ( unlikely ( iph -> iph_len < sizeof ( struct iphdr ) ) ) goto inhdr_error ;,0
458,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
459,<S2SV_ModStart> errout ; return 1 <S2SV_ModEnd> ; } <S2SV_null>,0
460,<S2SV_ModStart> krb5_key_data * key_data ; if ( key_data_in == NULL ) return NULL <S2SV_ModStart> == NULL ) { err = ENOMEM ; <S2SV_ModStart> goto cleanup ; },0
461,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
462,<S2SV_ModStart> ] ) ; if ( nByte < 0 ) { rc = SQLITE_NOMEM_BKPT ; } else { <S2SV_ModStart> 1 ) ; },0
463,<S2SV_ModStart> filp ) { struct socket * sk = <S2SV_ModEnd> SOCKET_I ( inode <S2SV_ModStart> ( inode ) ; if ( sk ) sock_put ( sk,0
464,"<S2SV_ModStart> * orelse, asdl_seq * params, <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. params = params",0
465,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> my_off_t <S2SV_ModEnd> mi_sort_index ( MI_CHECK <S2SV_ModStart> char * name, my_off_t * index_pos ) { reg2 uint key ; reg1 MI_KEYDEF * keyinfo ; File new_file ; my_off_t index_pos [ HA_MAX_POSSIBLE_KEY ] ; uint r_locks, w_locks ; int old_lock ; MYISAM_SHARE * share = info -> s ; MI_STATE_INFO old_state ; DBUG_ENTER ( ""mi_sort_index"" ) ; DBUG_RETURN ( 0 ) ; fn_format ( param -> temp_filename, name, """", MI_NAME_IEXT, 2 + 4 + 32 ) ; fn_format ( param -> temp_filename, param -> temp_filename, """", INDEX_TMP_EXT, 2 + 4 ) ; if ( ( new_file = mysql_file_create ( mi_key_file_datatmp, fn_format ( param -> temp_filename, param -> temp_filename, """", INDEX_",0
466,"<S2SV_ModStart> return ""Invalid <S2SV_blank> request <S2SV_blank> ID"" ; case NGHTTP2_ERR_INVALID_REQUEST_ID : return ""Invalid <S2SV_blank> request <S2SV_blank> ID"" ; case NGHTTP2_ERR_UNSUPPORTED_REQUEST_ID : return ""Unsupported <S2SV_blank> request <S2SV_blank> ID"" ; case NGHTTP2_ERR_NOT_SUPPORTED_REQUEST_ID : return ""Not <S2SV_blank> supported <S2SV_blank> request <S2SV_blank> ID"" ; case NGHTTP2_ERR_NOT_SUPPORTED_REQUEST_ID : return ""Not <S2SV_blank> supported <S2SV_blank> request <S2SV_blank> ID"" ; case NGHTTP2_ERR_UNSUPPORTED_REQUEST_ID : return ""Not <S2SV_blank> supported <S2SV_blank> request <S2SV_blank> ID"" ; case NGHTTP2_ERR_UNSUPPORTED_REQUEST_ID : return ""Not <S2SV_blank> supported <S2SV_blank> request <S2SV_blank> ID"" ; case NGHTTP2_ERR_UNSUPPORTED_REQUEST_ID : return ""Not <S2SV_blank> supported <S2SV_blank> request <S2SV_blank> ID"" ; case NGHTTP2_ERR_UNSUPPORTED_REQUEST_ID : return ""Not <S2SV_blank> supported <S2SV_blank> request <S2SV_blank> ID"" ; case NGHTTP2_ERR_UNSUPPORTED_REQUEST_ID : return ""Not <S2SV_blank> supported <S2SV_blank> request <S2SV_blank> ID"" ; case NGHTTP2_ERR_UNSUPPORTED_REQUEST_",0
467,"<S2SV_ModStart> UINT error ; if (! <S2SV_ModStart>, eventId ) ||! <S2SV_ModEnd> Stream_Read_UINT32 ( s <S2SV_ModStart>, pduLength ) ) { return CHANNEL_RC_INVALID_DATA ; } <S2SV_ModEnd> # ifdef WITH_DEBUG_RDPEI",0
468,"<S2SV_ModStart> ) ; } if ( pData -> mqttTimeout > 0 ) { zsocket_setsockopt ( pData -> socket, ZMQ_NODELAY, & pData -> mqttTimeout, sizeof ( pData -> mqttTimeout ) ) ; }",0
469,"<S2SV_ModStart> struct flowi6 fl6 ; struct ipv6_txoptions * opt <S2SV_ModStart> daddr ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart>, & fl6, opt <S2SV_ModStart>, skb, <S2SV_ModEnd> fl6, np <S2SV_ModStart>, np -> opt, <S2SV_ModEnd> tclass ) ;",0
470,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
471,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nego_process_negotiation_failure ( rdpNego <S2SV_ModStart> UINT32 failureCode ; if (! s ) { return FALSE ; } <S2SV_ModStart> = NEGO_STATE_FAIL ; return TRUE ;,0
472,"<S2SV_ModStart> = 0 ; bn_t t ; bn_null ( t ) ; RLC_TRY { bn_new ( t ) ; switch ( operation ) { case RSA_ENC : bn_zero ( m ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, RSA_PUB ) ; * p_len = k_len - 3 - m_len ; for ( int i = 0 ; i < * p_len ; i ++ ) { bn_lsh ( m, m, 8 ) ; do { rand_bytes ( & pad, 1 ) ; } while ( pad == 0 ) ; bn_add_dig ( m, m, pad ) ; } bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, 0 ) ; bn_lsh ( m, m, m_len * 8 ) ; break ; case RSA_DEC : m_len = k_len - 1 ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; if ( pad!= RSA_PUB ) { result = RLC",0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
475,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fix_interp_filter ( VP9_COMMON <S2SV_ModStart> VP9_COMMON * cm <S2SV_ModEnd> ) { int <S2SV_ModStart> i ] += get_counts_switchable_interp ( cm, j, i ) <S2SV_ModEnd> ; c += <S2SV_ModStart> } } } return 0 ;",0
476,"<S2SV_ModStart> & cpi -> encode_frame <S2SV_ModEnd> ; VP9_COMMON * <S2SV_ModStart> mi_cols ) ; <S2SV_ModEnd> vp9_setup_src_planes ( x <S2SV_ModStart> ( x, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vp9_setup_pre_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vp9_setup_dst_planes ( xd, get_frame_new_buffer ( cm ), 0, 0 ) ; vp9_setup_block_planes ( & x -> e_mbd, cm -> subsampling_x, cm -> subsampling_y ) ; xd -> mi [ 0 ] -> mbmi. mode = DC_PRED ; xd -> mi [ 0 ] -> mbmi. uv_mode = DC_PRED ; vpx_memset ( xd -> above_context [ 0 ], 0, sizeof ( * xd -> above_context [ 0 ] ) * 2 * aligned_mi_cols * MAX_MB_PLANE ) ; vpx_memset ( xd -> above_seg",0
477,"<S2SV_ModStart> hp ) ; if ( <S2SV_ModEnd> htc_request_check_host_hdr ( hp <S2SV_ModStart> ( hp ) <S2SV_ModEnd>!= 0 ) <S2SV_ModStart>, SLT_Error, ""Duplicated <S2SV_blank> HTTP <S2SV_blank> Host <S2SV_blank> header"" <S2SV_ModEnd> ) ; return",0
478,"<S2SV_ModStart> EOFOp 0x07 char * magick_buffer <S2SV_ModEnd> ; Image * <S2SV_ModStart> char * ) magick_buffer <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( count!= 3 ) || ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return DestroyImageList ( image ) ; } <S2SV_ModStart>. x = ReadBlobLSBShort ( image ) ; image -> page. y = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; flags = ( MagickStatusType ) ReadBlobByte ( image ) ; image -> matte = flags & 0x04 ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; flags = ( MagickStatusType ) ReadBlobByte ( image",0
479,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> sizeof ( tETH_HDR ),1
480,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ps_dec -> s_cur_slice_type <S2SV_ModStart> ps_dec -> s_cur_slice_type == <S2SV_ModEnd> 2 ) { <S2SV_ModStart> ) ; } if ( ps_dec -> s_cur_slice_type == 3 ) { if ( ps_dec -> s_cur_slice_type == 4 ) { if ( ps_dec -> s_cur_slice_type == 2 ) { if ( ps_dec -> s_cur_slice_type == 1 ) { if ( ps_dec -> s_cur_slice_type == 2 ) { if ( ps_dec -> s_cur_slice_type == 3 ) { ps_dec -> s_cur_slice_type = 4 ; } else { if ( ps_dec -> s_cur_slice_type == 4 ) { if ( ps_dec -> s_cur_slice_type == 2 ) { if ( ps_dec -> s_cur_slice_type == 3 ) { if ( ps_dec -> s_cur_slice_type == 2 ) { if ( ps_dec -> s_cur_slice_type == 3 ) { ps_dec -> s_cur_slice_type = 4,0
481,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> * karg ; <S2SV_ModEnd> struct pci_dev * <S2SV_ModStart> pci_dev * pdev <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> } if ( <S2SV_ModEnd> karg -> hdr <S2SV_ModStart> hdr. iocnum <S2SV_ModEnd> < 0 ) <S2SV_ModStart> < 0 ) { printk ( MYIOC_s_ERR_FMT ""%s@%d::mptctl_getiocinfo <S2SV_blank> - <S2SV_blank> "" ""Structure <S2SV_blank> size <S2SV_blank> mismatch!\\n"", __FILE__, __LINE__ ) ; kfree ( karg ) ; return - ENODEV ; } if ( karg -> hdr. maxDataSize!= data_size ) { printk ( MYIOC_s_ERR_FMT ""%s@%d::mptctl_getiocinfo <S2SV_blank> - <S2SV_blank> "" ""Structure <S2SV_blank> size <S2SV_blank> mismatch!\\n"", __FILE__, __LINE__ ) ; kfree ( karg ) ; return - ENODEV ; } if ( karg -> hdr. maxDataSize!= data_size ) { printk ( MYIOC_s_ERR_FMT ""%s@%d::mptctl_get",0
482,"<S2SV_ModStart> = 8 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
483,"<S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv",0
484,"<S2SV_ModStart> ; if ( datao + 8 > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> order = EXIF_BYTE_ORDER_INTEL ; datao += exif_get_long ( buf + datao + 8, EXIF_BYTE_ORDER_INTEL ) ; if ( <S2SV_ModStart> ( datao + <S2SV_ModEnd> 2 < datao <S2SV_ModStart> + 2 < <S2SV_ModEnd> 2 ) || <S2SV_ModStart> + 2 > buf_size <S2SV_ModEnd> ) { exif_log <S2SV_ModStart> ; if ( o > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } c = exif_get_short ( buf + o, EXIF_BYTE_ORDER_INTEL ) ; datao += <S2SV_ModEnd> 2 ; exif_mnote_data_fuji_clear",0
485,"<S2SV_ModStart> ) ; } if ( snprintf ( charbuf, sizeof ( charbuf ), ""%s.html"", rootname ) < 0 ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModStart> ) ; } if ( snprintf ( charbuf, sizeof ( charbuf ), ""%s.html"", rootname ) < 0 ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; }",0
486,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> opt = service_options <S2SV_ModStart> service_options. next <S2SV_ModEnd> ; while ( <S2SV_ModStart> 0 ; } <S2SV_ModEnd> s_log ( LOG_DEBUG <S2SV_ModStart> servname ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
487,<S2SV_ModStart> void ) { if (! recovery_started ) { recovery_started = 1 ; return ; },0
488,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ;",0
489,"<S2SV_ModStart> image ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
490,"<S2SV_ModStart> { WORD32 i <S2SV_ModEnd> ; WORD32 num_neg_pics <S2SV_ModStart> u4_num_total_curr ; WORD8 ai1_curr_delta_poc_msb_present_flag [ MAX_DPB_SIZE ] ; WORD8 ai1_foll_delta_poc_msb_present_flag [ MAX_DPB_SIZE ] ; WORD32 u4_num_st_curr_before, u4_num_st_curr_after, u4_num_lt_curr, u4_num_lt_curr ; UWORD32 u4_num_lt_curr, u4_num_lt_foll ; UWORD32 u4_num_total_curr ; u4_num_st_curr_before, u4_num_st_curr_after, u4_num_lt_curr, u4_num_lt_curr ; UWORD32 u4_num_lt_curr, u4_num_lt_curr, u4_num_lt_foll ; UWORD32 u4_num_total_curr ; WORD8 ai1_curr_delta_poc_msb_",0
491,"<S2SV_ModStart> * print_object ( JSON * obj, <S2SV_ModStart> child ) { if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( names = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) { cJSON_free ( entries ) ; return 0 ; } memset ( entries, 0, sizeof ( char * ) * numentries ) ; child = item -> child ; ++ depth ; if ( fmt ) len += depth ; while ( child ) { <S2SV_ModStart> = print_string_ptr ( obj <S2SV_ModEnd> -> string ) <S2SV_ModStart> = print_value ( obj <S2SV_ModEnd>, depth, <S2SV_ModStart> = 1 ; <S2SV_ModEnd> out = ( <S2SV_ModStart> + 1 ; <S2SV_ModEnd> * ptr ++ <S2SV_ModStart> = 0 ; len = 7 ; for ( i = 0 ; i < numentries ; ++ i ) { if ( names [ i ] ) cJSON_free ( names [ i ] ) ; if ( entries [ i ] ) cJSON_free ( entries [ i ] ) ; entries [ i ] = ret = print_value ( child, depth, fmt ) ; if ( str && ret ) len += strlen ( ret )",0
492,"<S2SV_ModStart> sk ) ; if ( writable ) { unix_state_lock ( sk ) ; other = unix_peer ( sk ) ; if ( other ) { sock_poll_wait ( file, & unix_sk ( other ) -> peer_wait, wait ) ; if ( unix_recvq_full ( other ) ) writable = 0 ; unix_state_unlock ( sk ) ; } } else { unix_state_lock ( sk ) ; <S2SV_ModStart> { if ( unix_peer ( sk )!= sk ) { sock_poll_wait ( file, & unix_sk ( sk ) -> peer_wait, wait ) ; if ( unix_recvq_full ( other ) ) writable = 0 ; } } unix_state_unlock ( sk ) ; <S2SV_ModEnd> if ( writable <S2SV_ModStart> = 0 ; <S2SV_ModEnd> sock_put ( other",0
493,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; fflush ( outputbuffer ) ;",0
494,<S2SV_ModStart> ( OM_uint32 ) KRB5_MALLOC_FAILURE <S2SV_ModEnd> ; return GSS_S_DEFECTIVE_TOKEN <S2SV_ModStart> buffer. length > <S2SV_ModEnd> token_wrapper_len + 14,0
495,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vp9_ref_frame_t * ) ; YV12_BUFFER_CONFIG * fb <S2SV_ModStart> NULL ) { <S2SV_ModEnd> vp9_get_reference_enc ( ctx",0
496,<S2SV_ModStart> plug ) ; <S2SV_ModEnd> put_ioctx ( ctx,0
497,"<S2SV_ModStart> * name, my_bool <S2SV_ModEnd> rep_quick ) { <S2SV_ModStart> ; if ( <S2SV_ModEnd> init_io_cache ( &",0
498,"<S2SV_ModStart> s } ; uECC_word_t p [ uECC_MAX_WORDS * 2 ] ; wordcount_t num_words = curve -> num_words ; wordcount_t num_n_words = BITS_TO_WORDS ( curve -> num_n_bits ) ; bitcount_t num_n_bits = curve -> num_n_bits ; if ( uECC_vli_isZero ( k, num_words ) || uECC_vli_cmp ( curve -> n, k, num_words )!= 1 ) { return 0 ; } carry = regularize_k ( k, tmp, s, curve ) ; EccPoint_mult ( p, curve -> G, k2 [! carry ], 0, num_n_bits + 1, curve ) ; if ( uECC_vli_isZero ( p, num_words ) ) { return 0 ; } if (! g_rng_function ) { uECC_vli_clear ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! uECC_generate_random_int ( tmp, curve",0
499,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|dao-truncated]"" <S2SV_ModEnd> ) ) ;",0
500,<S2SV_ModStart> ; } else <S2SV_ModEnd> { uint32_t new_free_total <S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
501,"<S2SV_ModStart> { while ( cp && <S2SV_ModStart> ] ) { <S2SV_ModEnd> const char hex <S2SV_ModStart> const char hex [ ] = ""00112233445566778899aAbBcCdDeEfF"" ; int dcount = 0 ; if ( * cp == 'x' || * cp == 'X' ) for ( ++ cp ; * cp && ( dp = index ( hex, * cp ) ) && ( dcount ++ < 2 ) ; cp ++ ) cval = ( cval * 16 ) + ( ( int ) ( dp - hex ) / 2 ) ; else if ( * cp == 'o' || * cp == 'O' ) for ( ++ cp ; * cp && ( index ( ""01234567"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 8 ) + ( * cp - '0' ) ; else for ( ; * cp && ( index ( ""0123456789"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 10 ) + ( * cp - '0' ) ; } else if ( * cp == '\\\\' && cp [ 1 ] ) { switch ( * ++",0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
503,"<S2SV_ModStart>, * pixg <S2SV_ModEnd> ; PIXCMAP * <S2SV_ModStart> == NULL ) { pixDestroy ( & pixc ) ; <S2SV_ModStart> NULL ) ; } <S2SV_ModStart> == NULL ) { pixDestroy ( & pixc ) ; <S2SV_ModStart> NULL ) ; }",0
504,<S2SV_ModStart>. vf = vpx_mse16x16 <S2SV_ModEnd> ; xd ->,1
505,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> overhead = 16 <S2SV_ModStart> = overhead ; if ( ( flags & MONGO_CONTINUE_ON_ERROR ) && ( ( size_t ) overhead > conn -> max_bson_size ) ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; },0
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NEGO_STATE_FAIL ; goto fail <S2SV_ModEnd> ; } Stream_Read_UINT8 <S2SV_ModStart> = NEGO_STATE_FINAL ; return ; fail : return ;,0
507,"<S2SV_ModStart> i, target_bits_per_mb <S2SV_ModEnd> ; target_bits_per_mb = <S2SV_ModStart> int bits_per_mb_at_this_q = <S2SV_ModEnd> vp9_rc_bits_per_mb ( cm <S2SV_ModStart> cm -> frame_type <S2SV_ModEnd> ) ; if",0
508,<S2SV_ModStart> ; value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1101WritePhyReg (,0
509,<S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModStart> ; if ( i < NCH ( n ) && <S2SV_ModStart> ; if ( i < NCH ( n ) &&,0
510,"<S2SV_ModStart> int dst_stride, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart> int i ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> uint8_t, left_col <S2SV_ModEnd> ) ; DECLARE_ALIGNED <S2SV_ModStart> plane ] ; <S2SV_ModEnd> if ( plane <S2SV_ModStart> + y ; memset <S2SV_ModEnd> ( left_col, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; mem",0
511,"<S2SV_ModStart> ++ ; } else if ( pattern [ end ] == \'""\' ) { end ++ ; while ( ( pattern [ end ]!= 0 ) && ( pattern [ end ]!= \'""\' ) ) end ++ ; }",0
512,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_completed_io_lock ) ;,1
513,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; write_profile ( <S2SV_ModEnd> cm -> profile <S2SV_ModStart> wb ) ; write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> show_frame ) ; write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; if ( <S2SV_ModEnd> cm -> profile <S2SV_ModStart> profile > PROFILE_1 && <S2SV_ModEnd> cm -> bit_depth <S2SV_ModStart> BITS_8 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; } vp9_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> profile == PROFILE_1 && <S2SV_ModEnd> cm -> bit_depth <S2SV_ModStart> BITS_10 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> KEY_FRAME ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; if ( <S2SV_ModEnd> cm -> profile <S2SV_ModStart> profile >= PROFILE_1 && <S2SV_ModEnd> cm -> subsampling_x <S2SV_ModStart> subsampling_x ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> subsampling_y ) ; vpx_wb_write_",0
514,<S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 1 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 2 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 3 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 2 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 3 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 4 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 5 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 6 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 7 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 6 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 7 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 8 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 9 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 9 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 10 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 10 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 11 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 12 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 12 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 13 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 13 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 14 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 14 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 14 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 15 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 15 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 12 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 12 <S2SV_ModStart> ;,0
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { q = osStrchr <S2SV_ModEnd> ( p +,1
516,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
517,<S2SV_ModStart> KEY_FRAME ) { memcpy <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd ->,1
518,"<S2SV_ModStart> error_t error ; int16_t <S2SV_ModEnd> n ; uint32_t <S2SV_ModStart> ( interface, ENC624J600_ESTAT <S2SV_ModEnd> ) & ESTAT_PKTCNT <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD",0
519,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv ) { VALUE klass = rb_ary_get ( argc, 0 ) ; VALUE content = rb_ary_get ( argc, 1 ) ; <S2SV_ModEnd> xmlSchemaPtr schema ; <S2SV_ModStart> xmlSchemaPtr schema ; VALUE rb_schema ; VALUE errors = rb_ary_new ( ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; # ifdef HAVE_XMLSCHEMASETPARSERSTRUCTUREDERRORS xmlSchemaSetParserStructuredErrors ( ctx, Nokogiri_error_array_pusher, ( void * ) errors ) ; # endif schema = xmlSchemaParse ( ctx ) ; xmlSetStructuredErrorFunc ( NULL, NULL ) ; xmlSchemaFreeParserCtxt ( ctx ) ; if ( NULL == schema ) { xmlErrorPtr error = xmlGetLastError ( ) ; if ( error ) Nokogiri_error_raise ( NULL, error ) ; else rb_raise ( rb_eRuntimeError, ""Could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> document"" ) ; return Qnil ; } rb_schema = Data_Wrap_Struct ( klass, 0, dealloc, schema )",0
520,"<S2SV_ModStart> ) ; } if ( strlen ( config_arg ) == 0 ) { s_log ( LOG_ERR, ""Empty <S2SV_blank> configuration <S2SV_blank> argument"" ) ; print_syntax ( ) ; return 1 ; }",0
521,"<S2SV_ModStart> 2 ] ; memcpy ( out + 4, ptr + 4, state -> xsize ) <S2SV_ModEnd> ; } state <S2SV_ModStart> 2 ] ; memcpy ( out + 4, ptr + 5, state -> xsize ) <S2SV_ModEnd> ; } state",0
522,<S2SV_ModStart> err = - <S2SV_ModEnd> EALREADY ; if,0
523,<S2SV_ModStart> POLL_IN ) ; <S2SV_ModEnd> perf_event_wakeup ( handle,0
524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> u16 * <S2SV_ModEnd> utf8s_to_utf16s ( const <S2SV_ModStart> len, wchar_t * <S2SV_ModStart> = pwcs ; if ( len < 0 ) return NULL ; <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> * op ++ <S2SV_ModStart> * op ++ = <S2SV_ModEnd> ( wchar_t ) <S2SV_ModStart> ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( u & SURROGATE_BITS ) ) ; } else { * op ++ = ( wchar_t ) u ; } s += size ; len -= size ; } else { * op ++ = * s ++ ; len -- ; } } return <S2SV_ModEnd> op - pwcs <S2SV_ModStart> pwcs ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
525,"<S2SV_ModStart> EPROTONOSUPPORT ) { if ( as_console ) { sleep ( 2 ) ; } <S2SV_ModStart> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" <S2SV_ModEnd> ) ; }",0
526,"<S2SV_ModStart> ( interface, KSZ8851_RXFHSR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_RXFHBCR ) & KSZ8851_RXFHBCR_RXBC_MASK <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( interface, KSZ8851_RXFDPR, KSZ8851_RXFDPR_RXFPAI <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851ReadFifo <S2SV_ModStart> ( interface, KSZ8851_RXFDPR, KSZ8851_RXFDPR_RXFPAI <S2SV_ModEnd> ) ; ksz8851ClearBit <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ancillary <S2SV_ModStart> ( interface, KSZ8851_",0
527,"<S2SV_ModStart> ast_for_funcdef_impl ( struct compiler <S2SV_ModEnd> * c, <S2SV_ModStart> * n, <S2SV_ModEnd> int is_async ) <S2SV_ModStart> int is_async ) { <S2SV_ModEnd> identifier name ; <S2SV_ModStart> returns, type_comment <S2SV_ModEnd>, n ->",0
528,"<S2SV_ModStart> ( mm, 0xA1C000 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( pgd, 0xA1C000 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( pud, 0xA1C000 <S2SV_ModEnd> ) ; split_huge_page_pmd <S2SV_ModStart>, pmd, 0xA1C000 <S2SV_ModEnd>, & ptl <S2SV_ModStart> : flush_tlb ( ) ; mm_dec_nr_pmds ( mm",0
529,"<S2SV_ModStart> packet_len ) ; if ( 0!= message_left ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> message_left <S2SV_blank> overflow!"" ) ; return - 1 ; }",0
530,<S2SV_ModStart> ) ) { hal_close ( ) ; <S2SV_ModStart> ) ) { hal_close ( ) ; <S2SV_ModStart> ) ) { hal_close ( ) ; <S2SV_ModStart> ) ) { hal_close ( ) ; <S2SV_ModStart> ) ) { hal_close ( ) ; <S2SV_ModStart> ) ) { hal_close ( ) ; <S2SV_ModStart> ) ) { hal_close ( ) ; <S2SV_ModStart> ) ) { hal_close ( ) ; <S2SV_ModStart> ) ) { hal_close ( ) ; <S2SV_ModStart> ) ) { hal_close ( ) ; <S2SV_ModStart> ) ) { hal_close ( ) ; <S2SV_ModStart> ) ) { hal_close ( ) ; <S2SV_ModStart> ) ) { hal_close ( ) ; <S2SV_ModStart> ) ) { hal_close ( ) ; <S2SV_ModStart> ) ) { hal_close ( ) ; <S2SV_ModStart> ) ) { hal_close ( ) ; <S2SV_ModStart> ) ) { hal_close ( ) ; <S2SV_ModStart> ) ) { hal_close ( ) ; <S2SV_ModStart> ) ) { hal_close ( ) ; <S2SV_ModStart> ) ) { hal_close ( ) ; <S2SV_ModStart> ) ) { hal_close ( ) ; <S2SV_ModStart> ) ) { hal_close ( ) ; <S2SV_ModStart> ) ) { hal_close ( ) ; <S2SV_ModStart> ) ) { hal_close ( ) ;,0
531,<S2SV_ModStart> 0 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif <S2SV_ModStart> row ++ ) <S2SV_ModEnd> for ( col <S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif,0
532,<S2SV_ModStart> len < needed || len > param -> data_start,0
533,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
534,<S2SV_ModStart> ( bfqq ) __bfq_idle_slice_timer_body <S2SV_ModEnd> ( bfqq ),0
535,<S2SV_ModStart> ; length += sizeof ( PRIMARY_DRAWING_ORDER_FIELD ) <S2SV_ModEnd> ; length +=,0
536,<S2SV_ModStart> d_inode ) { if (! new_create ) { err = - EBUSY ; goto out ; } <S2SV_ModStart> d_inode ) { if (! new_create ) { err = - EBUSY ; goto out ; },0
537,"<S2SV_ModStart> int plane ; vp9_foreach_transformed_block_in_all_plans <S2SV_ModEnd> ( xd,",0
538,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> nonrd_pick_sb_modes ( VP9_COMP <S2SV_ModStart> -> e_mbd ; if (! frame_is_intra_only ( cm ) ) { vp9_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } else { MB_PREDICTION_MODE intramode = DC_PRED ; set_mode_info ( & xd -> mi [ 0 ] -> mbmi, bsize, intramode ) ; } <S2SV_ModStart> bsize ) ; <S2SV_ModEnd> duplicate_mode_info_in_sb ( cm <S2SV_ModStart> bsize ) ; return 0 ;",0
539,<S2SV_ModStart> = NULL ; if ( <S2SV_ModEnd> superblockRead ( & <S2SV_ModStart>. superblock )!= 1 ) { * err = EINVAL ; return NULL ; } <S2SV_ModEnd> hrtf = getHrtf,0
540,"<S2SV_ModStart> -> ranges = calloc ( 1, <S2SV_ModEnd> sizeof ( MappedRange",0
541,"<S2SV_ModStart> ; if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_ALTR_FRAME ; vp8_use_as_reference ( ctx -> cpi, ref ) ; } if (",0
542,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
543,<S2SV_ModStart>! head ) <S2SV_ModEnd> return - EINVAL <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
544,"<S2SV_ModStart> * pptr, u_int64 <S2SV_ModEnd> len ) { <S2SV_ModStart> advance ; u_int64 <S2SV_ModEnd> tlen ; const <S2SV_ModStart>, pptr, tlen <S2SV_ModEnd> ) ; if",0
545,"<S2SV_ModStart> -> outputbuffer, ""<tr><td>Stackfile</td><td>%s</td></tr>"" <S2SV_ModEnd>, Run. <S2SV_ModStart> -> outputbuffer, ""<tr><td>Stackfile</td><td>%s</td></tr>"" <S2SV_ModEnd>, Run. <S2SV_ModStart> -> outputbuffer, ""<tr><td>Stackfile</td><td>%s</td></tr>"" <S2SV_ModEnd>, Run. <S2SV_ModStart> -> outputbuffer, ""<tr><td>Stackfile</td><td>%s</td></tr>"" <S2SV_ModEnd>, Run. <S2SV_ModStart> -> outputbuffer, ""<tr><td>Stackfile</td><td>%s</td></tr>"" <S2SV_ModEnd>, Run. <S2SV_ModStart> -> outputbuffer, ""<tr><td>Stackfile</td><td>%s</td></tr>"" <S2SV_ModEnd>, Run. <S2SV_ModStart> -> outputbuffer, ""<tr><td>Stackfile</td><td>%s</td></tr>"" <S2SV_ModEnd>, Run. <S2SV_ModStart> -> outputbuffer, ""<tr><td>Stackfile</td><td>%s</td></tr>"" <S2SV_ModEnd>, Run. <S2SV_ModStart> -> outputbuffer, ""<tr><td>Stackfile</td><td>%s</td></tr>"" <S2SV_ModEnd>, Run.",0
546,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
547,<S2SV_ModStart> ) ) ; if ( strlen ( constr1 ) > 40 || strlen ( constr2 ) > 40 || strlen ( constr3 ) > 40 || strlen ( constr4 ) > 40 || strlen ( constr5 ) > 40 || strlen ( constr6 ) > 40 || strlen ( constr7 ) > 40 || strlen ( constr8 ) > 40 || strlen ( constr9 ) > 40 || strlen ( constr10 ) > 40 || strlen ( constr11 ) > 40 || strlen ( constr12 ) > 40 || strlen ( constr12 ) > 40 || strlen ( constr13 ) > 40 || strlen ( constr14 ) > 40 || strlen ( constr15 ) > 40 || strlen ( constr15 ) > 40 || strlen ( constr15 ) > 40 ) { return false ; },0
548,"<S2SV_ModStart> desc. bmAttributes & USB_ENDPOINT_NUMBER_MASK ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> descriptor <S2SV_blank> has <S2SV_blank> %d <S2SV_blank> excess <S2SV_blank> "" ""byte%s, <S2SV_blank> ignoring\\n"", cfgno, header -> bLength, header -> bName ) ; retval = - EINVAL ; break ; } if ( config -> desc. bmAttributes & USB_ENDPOINT_NUMBER_MASK ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> descriptor <S2SV_blank> has <S2SV_blank> %d <S2SV_blank> excess <S2SV_blank> "" ""byte%s, <S2SV_blank> ignoring\\n"", cfgno, header -> bName, header -> bLength ) ; retval = - EINVAL ; break ; } if ( config -> desc. bmAttributes & USB_ENDPOINT_NUMBER_MASK ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> descriptor <S2SV_blank> has <S2SV_blank> %d <S2SV_blank> excess <S2SV_blank> "" ""byte%s, <S2SV_blank> ignoring\\n"", cfgno, header -> bName, header -> bLength ) ; retval = - EINVAL ; break ; } if ( config -> desc. bmAttributes & USB_ENDPOINT_NUMBER_MASK",0
549,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
550,<S2SV_ModStart> ; distortion = vpx_variance16x16 <S2SV_ModEnd> ( * (,1
551,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_ECON2_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR4 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR5 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR6 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR7 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR8 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR9 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR10 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR11 <S2SV_ModEnd>,",0
552,<S2SV_ModStart> * start ; if ( psf -> header == NULL ) { return ; } <S2SV_ModStart> header ) ; if ( maxlen >= sizeof ( psf -> header ) ) { return ; } <S2SV_ModStart> + maxlen ; if ( maxlen >= sizeof ( psf -> header ) ) { return ; } <S2SV_ModStart> = 0 ; if ( strlen ( ( char * ) psf -> header ) >= sizeof ( psf -> header ) ) { psf -> headindex = 0 ; } else { <S2SV_ModStart> header ) ; },0
553,<S2SV_ModStart> -> alg_priv ) { <S2SV_ModStart> alg_priv ) ; ctx -> priv -> alg_priv = NULL ; },0
554,<S2SV_ModStart> { sf -> <S2SV_ModEnd> recode_loop = ( <S2SV_ModStart> ; sf -> <S2SV_ModEnd> less_rectangular_check = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> mode_skip_start = 10 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> recode_loop = ALLOW_RECODE_KFARFGF <S2SV_ModStart> ; sf -> <S2SV_ModEnd> intra_y_mode_mask [ TX_32X32 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> intra_uv_mode_mask [ TX_16X16 <S2SV_ModStart> ] = INTRA_DC_H_V <S2SV_ModEnd> ; } if <S2SV_ModStart> { sf -> <S2SV_ModEnd> recode_loop = ALLOW_RECODE_KFMAXBW <S2SV_ModStart> : ALLOW_RECODE_KFMAXBW ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
555,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
556,"<S2SV_ModStart> int goodsize = ( <S2SV_ModStart> 2 * EXTRA_STACK ) <S2SV_ModStart> ; if ( goodsize < L -> stacksize ) { if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else condmovestack ( L, { }, { } ) ; } else { if ( goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else condmovestack ( L, { }, { } ) ; } <S2SV_ModEnd> luaE_shrinkCI ( L",0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,"<S2SV_ModStart>, * s <S2SV_ModEnd> ; int quote <S2SV_ModStart> errstr ) { <S2SV_ModEnd> char buf [ <S2SV_ModStart> 128 ] ; if (! _PyUnicode_AsString ( errstr ) ) { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } Py_DECREF ( type ) ; Py_DECREF ( value ) ; Py_XDECREF ( tback ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } Py_DECREF ( type ) ; Py_DECREF ( value ) ; Py_XDECREF ( tback ) ; } # endif return NULL ; } PyArena_AddPyObject ( c -> c_arena, str ) ; return Str ( str, kind, LINENO ( n ), n -> n_col_offset, c -> c_arena ) ; } case INTEGER : { PyObject * pynum = parsinteger ( c, STR ( ch ) ) ; if (! pynum ) { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } if (! pynum ) { ast_error ( n,",0
559,"<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> ( strcmp ( <S2SV_ModEnd> ""scale-factors"", option_name <S2SV_ModStart> ) break ; svc_ctx -> spatial_layers = atoi ( option_value ) ; } else if ( strcmp ( ""encoding-mode"", option_name ) == 0 ) { res = set_option_encoding_mode ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""layers"", option_name ) == 0 ) { res = parse_layers ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers"", option_name ) == 0 ) { res = parse_quantizer_values ( svc_ctx, option_value, 0 ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers-keyframe"", option_name ) == 0 ) { res = parse_quantizer_values ( svc_ctx, option_value, 0 ) ; if ( res!= V",0
560,<S2SV_ModStart> ) ; } <S2SV_ModEnd> mb_index = 0,0
561,<S2SV_ModStart> self ) { size_t <S2SV_ModEnd> i ; PyObject,1
562,,1
563,<S2SV_ModStart> ) ) { if ( mysql_errno ( imp_dbh -> pmysql )!= 0 ),0
564,<S2SV_ModStart> ) || ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> & size ) ) <S2SV_ModStart> ( need_close || TEMP_FAILURE_RETRY ( <S2SV_ModStart> & size ) ),0
565,<S2SV_ModStart> ; struct ieee_802_11_phdr * phdr = NULL <S2SV_ModEnd> ; col_set_str ( <S2SV_ModStart> ; if ( phdr ) { phdr = & phdr -> phdr ; } if (,0
566,<S2SV_ModStart> ; sh = s_calloc <S2SV_ModEnd> ( hdrlen +,0
567,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> BYTE a_val ; if ( context -> width > INT_MAX / scanline ) { return FALSE ; } <S2SV_ModStart> -> ColorLossLevel ; if ( context -> height > INT_MAX / scanline ) { return FALSE ; } <S2SV_ModStart> ; } } return TRUE ;,0
568,<S2SV_ModStart> > nr_parens ) { ret = - EINVAL ; goto out_free ; } <S2SV_ModEnd> * ( ++,1
569,"<S2SV_ModStart> cpi ) { <S2SV_ModEnd> int target ; <S2SV_ModStart> target = ( <S2SV_ModEnd> cpi -> oxcf <S2SV_ModStart> starting_buffer_level / 2 <S2SV_ModEnd> > INT_MAX ) <S2SV_ModStart> > INT_MAX )? INT_MAX : <S2SV_ModEnd> ( int ) <S2SV_ModStart> cpi -> oxcf -> starting_buffer_level <S2SV_ModEnd> ; } else <S2SV_ModStart> = 32 ; const int <S2SV_ModEnd> kf_boost = MAX <S2SV_ModStart> ( int ) <S2SV_ModEnd> 2 * cpi <S2SV_ModStart> cpi -> output_framerate ; if ( rc -> frames_since_key < cpi -> output_framerate / 2 ) { kf_boost = ( int ) ( kf_boost * rc -> frames_since_key / ( cpi -> output_framerate / 2 ) ) ; } target = ( ( 16 + kf_boost ) * rc -> av_per_frame_bandwidth ) >> 4 ; } return vp9_rc_clamp_iframe_target_size ( cpi, target ) <S2SV_ModEnd> ; } <S2SV_null>",0
570,"<S2SV_ModStart> TX_MODE read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r )",1
571,"<S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> } # line 1046 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 1051 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 1057 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 1063 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 1069 <S2SV_ModEnd> ""re_grammar.c"" break ;",0
572,<S2SV_ModStart> -> cpi ; MACROBLOCK * const mb = & cpi -> mb. plane [ plane ] ; <S2SV_ModStart> args -> xd <S2SV_ModEnd> ; uint8_t token_cache <S2SV_ModStart> & cpi -> <S2SV_ModEnd> plane [ plane <S2SV_ModStart> plane_type ; const tran_low_t <S2SV_ModEnd> * qcoeff = <S2SV_ModStart> = cpi -> fc <S2SV_ModEnd>. coef_probs [ <S2SV_ModStart> = cpi -> counts <S2SV_ModEnd>. coef_probs [ <S2SV_ModStart> = cpi -> counts <S2SV_ModEnd>. eob_branch [ <S2SV_ModStart> = cpi -> counts <S2SV_ModEnd>. eob_branch [ <S2SV_ModStart> = cpi -> counts <S2SV_ModEnd>. eob_branch [,0
573,<S2SV_ModStart> pSelect -> pSrc ; assert ( pWalker -> pParse -> db -> mallocFailed ),0
574,"<S2SV_ModStart> users ) ; if ( cb_info -> serv ) { printk ( KERN_ERR ""nfs_callback_create_svc: <S2SV_blank> create <S2SV_blank> service <S2SV_blank> failed\\n"" ) ; return ERR_PTR ( - ENOMEM ) ; } cb_info -> serv = serv ; serv -> sv_maxconn = 1024 ; dprintk ( ""nfs_callback_create_svc: <S2SV_blank> service <S2SV_blank> created\\n"" ) ; <S2SV_ModStart> sv_ops ) ; <S2SV_ModEnd> return serv ;",0
575,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
576,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
577,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
578,"<S2SV_ModStart> { do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> s, 0 )",0
579,"<S2SV_ModStart> = NULL ; char * path = NULL ; <S2SV_ModStart> next ) { <S2SV_ModEnd> path = xml_get_path <S2SV_ModStart> } else { <S2SV_ModEnd> path = xml_get_path <S2SV_ModStart> ; } } crm_trace ( ""Cannot <S2SV_blank> add <S2SV_blank> new <S2SV_blank> node <S2SV_blank> %s"", crm_element_name ( xml ) ) ; if ( xml!= xmlDocGetRootElement ( xml -> doc ) ) { xmlUnlinkNode ( xml ) ; xmlFreeNode ( xml ) ; } free ( path ) ;",0
580,<S2SV_ModStart> <S2SV_null> static const SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> return ( const SvcInternal_t <S2SV_ModEnd> * ) svc_ctx,1
581,<S2SV_ModStart> ; if ( Z_TYPE ( zdata_ptr ) == IS_ARRAY && Z_TYPE ( zdata_ptr ) == IS_OBJECT <S2SV_ModEnd> ) { zval <S2SV_ModStart> ; if ( Z_TYPE ( zdata_ptr ) == IS_ARRAY && <S2SV_ModStart> ; if ( Z_TYPE ( zdata_ptr ) == IS_ARRAY &&,0
582,"<S2SV_ModStart> only_420 ) { <S2SV_ModEnd> int ret ; <S2SV_ModStart> -> vpx_bps = 24 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_bps = 8 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_bps = 8 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_bps = 8 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt = ""I420"" <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_bps = 8 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt = ""I420"" <S2SV_ModEnd> ; _y4m -> <S2SV_ModStart> -> chroma_bps = 8 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt = ""I420"" <S2SV_ModEnd> ; _y4m -> <S2SV_ModStart> -> chroma_bps = 8 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt = ""I420"" <S2SV_ModEnd> ; _y4m -> <S2SV_ModStart> -> chroma_bps = 8 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt = ""I420"" <S2SV_ModEnd> ; _y4m",0
583,<S2SV_ModStart> buf ; { wizkit_addinv ( <S2SV_ModEnd> readobjnam ( buf <S2SV_ModStart> * ) 0 <S2SV_ModEnd> ) ; },0
584,<S2SV_ModStart> ( ) { <S2SV_ModEnd> if ( read_xattrs_from_disk <S2SV_ModStart> == 0 ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( read_uids_guids <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( parse_exports_table <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( read_fragment_table <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( read_inode_table <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( read_directory_table <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_,0
585,<S2SV_ModStart> * createenv ( <S2SV_ModEnd> struct rule * <S2SV_ModStart> root ) ; <S2SV_ModEnd> if ( rule <S2SV_ModStart> ; } } <S2SV_ModEnd> return env ;,0
586,"<S2SV_ModStart> -> seg ; <S2SV_ModEnd> if ( cm <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> cm -> mi_cols <S2SV_ModEnd> ) ; vp9_enable_segmentation <S2SV_ModStart> base_qindex, in_frame_q_adj_ratio [ segment ] ) ; memset ( cpi -> segmentation_map, 0, cm -> mi_rows * cm -> mi_cols ) ; vpx_memset ( cpi -> complexity_map, 0, cm -> mi_rows * cm -> mi_cols ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vp9_disable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> frame_type, cm -> base_qindex, in_frame_q_adj_ratio [ segment ] ) ; vp9_enable_segfeature ( seg, segment, SEG_LVL_ALT_Q ) ; vpx_memset ( cpi -> segmentation_map, 0, cm -> mi_rows *",0
587,"<S2SV_ModStart> = make_type ( ""module"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""module"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""interactive"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""expression"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""suite"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""stmt"" <S2SV_ModEnd>, & AST_type <S2SV_ModStart> = make_type ( ""function"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""function"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""async"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""class"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""return"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""delete"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""assign"" <S2SV_ModEnd>, stmt_type,",0
588,<S2SV_ModStart> } logfile_fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> S_IWGRP | S_IROTH ) <S2SV_ModStart> return ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart> 16 ) ; ),0
589,<S2SV_ModStart> ; } # else ( void ) cpi ; #,1
590,"<S2SV_ModStart> cinput ) { <S2SV_ModEnd> char * s <S2SV_ModStart>, * StartClean <S2SV_ModEnd> ; SetDefaults ( <S2SV_ModStart> ; outpos = stdout <S2SV_ModEnd> ; outpos += <S2SV_ModStart> ; outpos += snprintf ( outpos, sizeof ( outpos ) <S2SV_ModEnd>, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"", <S2SV_ModStart> ; outpos += snprintf ( outpos, sizeof ( outpos ) <S2SV_ModEnd>, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", <S2SV_ModStart> ; outpos += snprintf ( outpos, sizeof ( outpos ) <S2SV_ModEnd>, ""%s"", <S2SV_ModStart> ; outpos += snprintf ( outpos, sizeof ( outpos ) <S2SV_ModEnd>, ""%s"", <S2SV_ModStart> ; outpos += snprintf ( outpos, sizeof ( outpos ) <S2SV_ModEnd>, ""%s"", <S2SV_ModStart> ; outpos += snprintf ( outpos, sizeof ( outpos ) <S2SV_ModEnd>, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", <S2SV_ModStart> ; outpos += snprintf ( outpos, sizeof ( outpos ) <S2SV_ModEnd>, ""%s"", <S2SV_ModStart> ; outpos += snprintf ( outpos, sizeof ( outpos ) <S2SV_ModEnd>, ""%",0
591,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lower, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { int res ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { lower = NULL ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_upper, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { int res ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { upper = NULL ; } if ( lookup_attr_id ( obj, & PyId_step, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { step = NULL ; } * out = Slice ( lower, upper,",0
592,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
593,"<S2SV_ModStart> extack ) ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; <S2SV_ModStart> goto err_delete ; } <S2SV_ModStart> ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; err = - EOPNOTSUPP ; goto err_delete <S2SV_ModEnd> ; } } <S2SV_ModStart>! match ) err = <S2SV_ModEnd> - ENOMEM ; <S2SV_ModStart> - ENOMEM ; list_add ( & match -> list, & alink -> dscp_map ) ; } match -> handle = knode -> handle ; match -> band = knode -> res -> classid ; match -> mask = mask ; match -> val = val ; err = nfp_abm_update_band_map ( alink ) ; if ( err ) goto err_delete ; return 0 ; err_delete : nfp_abm_u32_knode_delete ( alink, knode ) ; return err <S2SV_ModEnd> ; } <S2SV_null>",0
594,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( pass <S2SV_ModStart> ( pass ) { <S2SV_ModStart> stats ) ; } else { stream -> config. cfg. g_pass = VPX_RC_ONE_PASS ; },0
595,"<S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( name, <S2SV_ModStart>, "".service"" ) ) { g_autofree gchar * expected_dbus_name = g_strndup ( name, strlen ( name ) - strlen ( "".service"" ) ) ; dbus_name = g_key_file_get_string ( keyfile, expected_dbus_name, error ) ; if ( dbus_name == NULL ) goto out ; } else if (! g_str_has_prefix ( name, "".user"" ) ) { g_autofree gchar * expected_user_name = g_strndup ( name, strlen ( name ) - strlen ( "".user"" ) ) ; dbus_name = g_key_file_get_string ( keyfile, expected_user_name, error ) ; if ( dbus_name == NULL ) goto out ; } else if ( g_str_has_prefix ( name, "".user"" ) ) { g_autofree gchar * expected_user_name = g_strndup ( name, strlen ( name ) - strlen ( "".user"" ) ) ; new_user_name = g_strndup",0
596,"<S2SV_ModStart> data_end ) { const <S2SV_ModStart>, tile_col ; <S2SV_ModEnd> uint8_t * end <S2SV_ModStart> end = NULL <S2SV_ModEnd> ; assert ( <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> aligned_cols ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> aligned_cols ) ; memset <S2SV_ModEnd> ( cm ->",0
597,"<S2SV_ModStart> vp9_decoder_create ( const VP9_COMMON * cm, const <S2SV_ModStart> pbi ) ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> = 1 ; vpx_memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_video_frame = 0 ; pbi -> oxcf = * oxcf ; pbi -> ready_for_new_data = 1 ; pbi -> decoded_key_frame = 0 ; vpx_init_dequantizer ( cm ) ; vp9_loop_filter_init ( cm ) ; cm -> error. setjmp = 0 ; vp9_worker_init ( & pbi -> lf_worker ) ; return pbi <S2SV_ModEnd> ; } <S2SV_null>",0
598,"<S2SV_ModStart> ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; return GF_NON_COMPLIANT_BOX <S2SV_ModEnd> ; } return",0
599,"<S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> -> opt ; rcu_read_lock ( ) ; opt = rcu_dereference_protected ( req_inet -> opt, sock_owned_by_user ( req ) ) ; rcu_read_unlock ( ) ; if ( <S2SV_ModEnd> opt == NULL <S2SV_ModStart> == NULL || rcu_access_pointer ( <S2SV_ModStart> opt -> cipso )",0
600,"<S2SV_ModStart> tokens, const vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> do { const vpx_tree_index <S2SV_ModEnd> j = tree",1
601,"<S2SV_ModStart> ( img ) { <S2SV_ModStart> ctx, img ) ; if ( res!= VPX_CODEC_OK ) return res ; } <S2SV_ModEnd> pick_quickcompress_mode ( ctx",0
602,"<S2SV_ModStart>, & len, 0",1
603,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> in ) { memset ( s, 0, 16 ) ; memcpy ( s + 1, in, 16 ) ; memcpy ( s + 2, in, 16 ) ; memcpy ( s + 3, in, 16 ) ; memcpy ( s + 4, in, 16 ) ; memcpy ( s + 5, in, 16 ) ; memcpy ( s + 6, in, 16 ) ; memcpy ( s + 7, in, 16 ) ; memcpy ( s + 8, in, 16 ) ; memcpy ( s + 9, in, 16 ) ; memcpy ( s + 10, in, 16 ) ; memcpy ( s + 11, in, 16 ) ; memcpy ( s + 12, in, 16 ) ; memcpy ( s + 13, in, 16 ) ; memcpy ( s + 14, in, 16 ) ; memcpy ( s + 15, in, 16 ) ; memcpy ( s + 15, in, 16 ) ; memcpy ( s + 13, in",0
604,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int64_t <S2SV_ModEnd> frame_max_bits ( const <S2SV_ModStart> ovcf ) { int64_t <S2SV_ModEnd> max_bits = ( <S2SV_ModStart> max_bits = ( <S2SV_ModEnd> rc -> av_per_frame_bandwidth <S2SV_ModStart> rc -> av_per_frame_bandwidth <S2SV_ModEnd> / 100 ;,0
605,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
606,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_superblock ( VP9_COMP <S2SV_ModStart> * cpi, MACROBLOCK * const x, MACROBLOCKD * const xd <S2SV_ModEnd>, BLOCK_SIZE bsize <S2SV_ModStart> bsize ) { <S2SV_ModEnd> MACROBLOCK * const <S2SV_ModStart> -> common ; <S2SV_ModEnd> int mis = <S2SV_ModStart> bsize ] ; <S2SV_ModEnd> x -> skip_recode <S2SV_ModStart> -> skip_recode = <S2SV_ModEnd> x -> select_txfm_size <S2SV_ModStart> -> select_txfm_size && ( <S2SV_ModStart> sb_type >= BLOCK_8X8 || cm -> frame_type == KEY_FRAME ) <S2SV_ModStart> -> skip_optimize = xd <S2SV_ModEnd> -> is_coded ; <S2SV_ModStart>. allow_skip_recode ; xd <S2SV_ModEnd> -> skip_encode = <S2SV_ModStart> ; if ( xd <S2SV_ModEnd> -> frame_type == <S2SV_ModStart> KEY_FRAME ) { set_ref_ptrs ( cm, xd, mbmi -> ref_frame [ 0 ], mbmi -> ref_frame [ 1 ], mbmi -> ref_frame [ 2 ], mbmi -> ref_frame [ 3 ] ) ; } else { set_ref_ptrs ( cm, xd, mbmi -> ref_frame [ 0 ],",0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. size <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. size <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. size <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. size <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. size <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
608,"<S2SV_ModStart> range_max ) { int32_t <S2SV_ModEnd> value ; int <S2SV_ModStart> position, zeroes <S2SV_ModEnd> ; char bits <S2SV_ModStart> gbc ) ; if ( ctx -> trace_enable ) { bits [ 65 ] = 0 ; ff_cbs_trace_syntax_element ( ctx, position, name, NULL, bits, value ) ; } if ( value < range_min || value > range_max ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""%s <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range: <S2SV_blank> "" ""%"" PRIu32 "", <S2SV_blank> but <S2SV_blank> must <S2SV_blank> be <S2SV_blank> in <S2SV_blank> [%"" PRIu32 "",%"" PRIu32 ""].\\n"", name, value, range_min, range_max ) ; return AVERROR_INVALIDDATA ; } if ( get_bits1 ( gbc ) ) { bits [ i ++ ] = '1' ; ++ zeroes ; } else { bits [ i ++ ] = '0' ; ++ zeroes ; } } if ( zeroes >= 32 ) { value = MAX_UINT_BITS ( 32 ) ; for ( j = 0 ; j < zeroes ; j ++ ) bits [ i ++ ] = ( value >> ( zeroes -",0
609,"<S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!$%&\'*+-.^_`|~"" <S2SV_ModStart>",0
610,"<S2SV_ModStart>, packet -> <S2SV_ModEnd> http_cookie. ptr",0
611,"<S2SV_ModStart> 4 ) { if ( ( x + x ) > ( ssize_t ) dds_info -> width || ( y + y ) > ( ssize_t ) dds_info -> height ) return MagickFalse ; <S2SV_ModStart>, y, <S2SV_ModEnd> dds_info -> height <S2SV_ModStart> dds_info -> height <S2SV_ModEnd>, exception ) <S2SV_ModStart> ; } } if ( SyncAuthenticPixels ( image, exception ) == MagickFalse ) return MagickFalse ;",0
612,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL ) <S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL )",1
613,<S2SV_ModStart> action ) { if ( w < 0 ) w = 0 ; if ( h < 0 ) h = 0 ; if ( w > 1 ) w = 1 ; if ( h > 1 ) h = 1 ; if ( w > 1 ) w = 1 ; if ( h > 1 ) h = 1 ; if ( w > 1 ) w = 1 ; if ( h > 1 ) h = 1 ; if ( w > 1 ) w = 1 ; if ( h > 1 ) h = 1 ; if ( w > 1 ) w = 0 ; if ( h > 1 ) h = 1 ; if ( w > 1 ) w = 1 ; if ( h > 1 ) h = 1 ; if ( w > 1 ) w = 1 ; if ( h > 1 ) h = 1 ; if ( w > 1 ) w = 1 ; if ( h > 1 ) h = 1 ; if ( w > 1 ) w = 1 ; if ( h > 1 ) h = 1 ; if ( w > 1 ) w = 0 ; if ( h > 1 ) w = 1 ; if ( w > 1 ) w = 1 ; if ( h > 1 ) h = 1 ; if ( w > 1 ) w = 1 ;,0
614,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; fflush ( outputbuffer ) ;",0
615,"<S2SV_ModStart> ( AUTODETECT_TAG, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU\\n"" <S2SV_ModEnd> ) ; Stream_Read_UINT32",0
616,<S2SV_ModStart> ; # endif # if CONFIG_REALTIME_ONLY & CONFIG_ONTHEFLY_BITPACKING ) if ( cpi -> b_multi_threaded == 0 ) { vp8_writer_reset ( cpi -> tok ) ; cpi -> b_multi_threaded = 0 ; } # endif,0
617,<S2SV_ModStart> -> b_multithreaded_rd ) { <S2SV_ModStart> mb_rows ) ; },0
618,<S2SV_ModStart> { if ( ( <S2SV_ModStart> xWantedSize > 0 ) && ( ( xWantedSize + xHeapStructSize ) > xWantedSize ) <S2SV_ModStart> 0x00 ) { if ( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize ) { mtCOVERAGE_TEST_MARKER ( ) ; } <S2SV_ModStart> portBYTE_ALIGNMENT_MASK ) ) ; } else { mtCOVERAGE_TEST_MARKER ( ) ; } } else { mtCOVERAGE_TEST_MARKER ( ) ; } if ( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) ) { pxPreviousBlock = & xStart ; pxBlock = xStart. pxNextFreeBlock ; while ( ( ( uint8_t * ) pxBlock -> xBlockSize < xWantedSize ) && ( pxBlock -> pxNextFreeBlock!= NULL ) ) { pxPreviousBlock = pxBlock -> pxNextFreeBlock ; } if ( pxBlock!= pxEnd ) { pvReturn = ( void * ) ( ( ( uint8_t * ),0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,"<S2SV_ModStart> s ) { <S2SV_ModEnd> uint16 left, <S2SV_ModStart>, Debug, ""%s()\\n"" <S2SV_ModEnd>, __func__ ) <S2SV_ModStart> ++ ) { in_uint8s ( s, 2 ) ; in_uint16_le ( s, size ) ; in_uint8p ( s, data, size ) ; bmpdata = ( uint8 * ) xmalloc ( size ) ; for ( y = 0 ; y < size ; y ++ ) { in_uint8a ( s, & bmpdata [ ( height - y - 1 ) * ( width * Bpp ) ], width * Bpp ) ; } ui_paint_bitmap ( left, top, cx, cy, width, height, bmpdata ) ; xfree ( bmpdata ) ; continue ; } if ( compress & 0x400 ) { size = bufsize ; } else { size = size ; } if ( compress & 0x400 ) { size = bufsize ; } else { size = size ; } if ( size > bufsize ) { size = bufsize ; } else { size = size ; } <S2SV_ModEnd> bmpdata = (",0
621,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
622,"<S2SV_ModStart> TX_SIZE tx_size, vpx_coeff_stats <S2SV_ModEnd> * coef_branch_ct ) <S2SV_ModStart> coef_branch_ct ) { vpx_coeff_probs_model <S2SV_ModEnd> * coef_probs = <S2SV_ModStart> tx_size ] ; vpx_coeff_count <S2SV_ModEnd> * coef_counts =",0
623,<S2SV_ModStart> ( name ) ; ( void ) utf8,0
624,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static void <S2SV_ModEnd> su3000_frontend_attach ( struct <S2SV_ModStart> dvb_usb_adapter * d, struct dvb_mux_ctx * ctx <S2SV_ModStart> 0 } ; mutex_lock ( & ctx -> data_mutex ) ; <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; mutex_unlock ( & ctx -> data_mutex ) ; <S2SV_ModStart> = 1 ; mutex_unlock ( & ctx -> data_mutex ) ; <S2SV_ModStart> 300 ) ; mutex_lock ( & ctx -> data_mutex ) ; <S2SV_ModStart> = 0 ; mutex_unlock ( & ctx -> data_mutex ) ; <S2SV_ModStart> = 1 ; mutex_unlock ( & ctx -> data_mutex ) ; <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; mutex_unlock ( & ctx -> data_mutex ) ; <S2SV_ModStart> ""command <S2SV_blank> 0x51 <S2SV_blank> transfer <S2SV_blank> failed."" ) ; mutex_unlock ( & ctx -> data_mutex ) ; <S2SV_ModStart> dvb_attach ( ds3000_attach, & su3000_ds3000_config, & d -> dev -> i2c_adap ) ; mutex_unlock ( & ctx -> data_mutex )",0
625,"<S2SV_ModStart>, vpx_codec_enc_cfg_t * enc_cfg, vpx_codec_flags_t flags, int ver ) { vpx_codec_err_t res ; if (! ctx ||! iface ||! cfg ) res = VPX_CODEC_INVALID_PARAM ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else { ctx -> iface = iface ; ctx -> name = iface -> name ; ctx -> priv = NULL ; ctx -> init_flags = flags ;",0
626,"<S2SV_ModStart> stride, int mv_row, int mv_col, uint8_t * pred, struct scale_factors * scale, int x, int y ) { const int which_mv = 0 ; const MV mv = { mv_row, mv_col } ; const InterpKernel * const kernel = <S2SV_ModEnd> xd -> mi <S2SV_ModStart> ] -> interp_filter <S2SV_ModEnd> ; enum mv_precision <S2SV_ModStart> mv_precision_uv ; int uv_stride ; vp9_build_inter_predictor ( y_mb_ptr, stride, & pred [ 0 ], 16, & mv, scale, 16, 16, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vp9_build_inter_predictor ( u_mb_ptr, uv_stride, & pred [ 256 ], uv_block_size, & mv, scale, uv_block_size, which_mv, kernel, mv_precision_uv, x, y ) ; vp9_build_inter_predictor ( v_mb_ptr, uv_stride, & pred [ 512 ], uv_block_size, & mv, scale, uv_block_size, uv_block_size",0
627,"<S2SV_ModStart> = TRUE ; if ( strlen ( origbuf ) >= sizeof ( buf ) ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> too <S2SV_blank> long"" ) ; return FALSE ; }",0
628,"<S2SV_ModStart> * numbers, size_t <S2SV_ModEnd> count ) { <S2SV_ModStart> count ) { size_t <S2SV_ModEnd> i ; cJSON <S2SV_ModStart> i ) { if ( numbers [ i ] == 0 ) { cJSON_Delete ( a ) ; return 0 ; }",0
629,"<S2SV_ModStart> data_end ) { const <S2SV_ModStart> pbi -> common <S2SV_ModEnd> ; const int <S2SV_ModStart> tile_cols ) ; <S2SV_ModEnd> int n ; <S2SV_ModStart> 0 ) { const int num_workers = MIN ( pbi -> oxcf. max_threads & ~ 1, tile_cols ) ; TileBuffer tile_buffers [ 1 << 6 ] ; int i ; CHECK_MEM_ERROR ( cm, pbi -> tile_workers, vpx_malloc ( num_workers * sizeof ( * pbi -> tile_workers ) ) ) ; for ( i = 0 ; i < num_workers ; ++ i ) { VP9Worker * const worker = & pbi -> tile_workers [ i ] ; ++ pbi -> num_tile_workers ; vp9_worker_init ( worker ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data2, vpx_malloc ( sizeof ( TileInfo ) ) ) ; if ( i < num_threads - 1 &&! vp9_worker_reset ( worker ) ) { vpx_internal_error ( & cm -> error",0
630,<S2SV_ModStart> * 0x101 ; if ( len < 4 ) return ; <S2SV_ModStart> = base + ( int ) <S2SV_ModStart> ( ) + ( int ) <S2SV_ModStart> ; len = ( int ) <S2SV_ModStart> ; len = ( int ) <S2SV_ModStart> ; len = ( int ) <S2SV_ModStart> ; len = ( int ) <S2SV_ModStart> ; len = ( int ) <S2SV_ModStart> ; len = ( int ) <S2SV_ModStart> ; len = ( int ) <S2SV_ModStart> ; len = ( int ) <S2SV_ModStart> ; len = ( int ) <S2SV_ModStart> ; len = ( int ) <S2SV_ModStart> ; len = ( int ) <S2SV_ModStart> ; len = ( int ) <S2SV_ModStart> ; len = ( int ) <S2SV_ModStart> ; len = ( int ) <S2SV_ModStart> ; len = ( int ) <S2SV_ModStart> ; len = ( int ) <S2SV_ModStart> ; len = ( int ) <S2SV_ModStart> ; len = ( int ) <S2SV_ModStart> ; len = ( int ) <S2SV_ModStart> ; len = ( int ) <S2SV_ModStart> ; len = ( int ) <S2SV_ModStart> ; len = ( int ) <S2SV_ModStart> ; len = ( int ) <S2SV_ModStart> ; len = ( int ) <S2SV_ModStart> ; len = ( int ) <S2SV_ModStart> ; len = ( int ) <S2SV_ModStart> ; len = ( int ) <S2SV_ModStart> ; len = ( int ) <S2SV_ModStart> ; len = ( int ) <S2SV_ModStart> ; len = ( int ) <S2SV_ModStart> ; len = ( int ) <S2SV_ModStart> ; len = ( int ),0
631,"<S2SV_ModStart> -> common ; vpx_clear_system_state ( ) ; <S2SV_ModStart> cm -> seg <S2SV_ModEnd> ; int i <S2SV_ModStart> = SEGMENT_DELTADATA ; <S2SV_ModEnd> for ( i <S2SV_ModStart> ++ ) { vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, qindex_delta ) ; vpx_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q ) ; } for ( i = ENERGY_MIN ; i <= ENERGY_MAX ; i ++ ) { int qindex_delta, segment_rdmult ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; } qindex_delta = vp9_compute_qdelta ( & cpi -> rc, base_q, base_q * Q_RATIO ( i ) ) ; vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, qindex_delta ) ; vpx_enable_segfeature ( seg, SEGMENT_ID ( i",0
632,"<S2SV_ModStart> -> error_code ) memcpy ( & <S2SV_ModStart> ctx -> base, & <S2SV_ModEnd> error -> has_detail <S2SV_ModStart> error -> has_detail, sizeof ( ctx -> base. err_detail ) ) <S2SV_ModEnd> ; return error",0
633,"<S2SV_ModStart>, * ps_cur_poc <S2SV_ModEnd> ; ps_cur_slice = <S2SV_ModStart> ps_cur_slice ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
634,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet ),0
635,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static long <S2SV_ModEnd> getnum ( const <S2SV_ModStart> int getnum ( <S2SV_ModEnd> const char * <S2SV_ModStart> const char * fmt, <S2SV_ModEnd> int df ) <S2SV_ModStart> df ) { if (! fmt ) return - 1 ; <S2SV_ModStart> ; else { long <S2SV_ModEnd> a = 0 <S2SV_ModStart> = 0 ; while ( isdigit ( * * fmt ) ) { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } <S2SV_ModEnd> return a ;",0
636,<S2SV_ModStart> GCSpropagate ) ; <S2SV_ModEnd> atomic ( L,0
637,<S2SV_ModStart> 0 ; else ret = <S2SV_ModEnd> - EIO ;,0
638,"<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } <S2SV_ModEnd> memset ( buffer <S2SV_ModStart> buffer ) ; <S2SV_ModEnd> s_write ( c",0
639,"<S2SV_ModStart> struct remote_connection_s * remote_connection <S2SV_ModEnd> ) { int <S2SV_ModStart> = 0 ; <S2SV_ModEnd> int ret_ga ; <S2SV_ModStart> static struct mainloop_fd_callbacks remote_fd_callbacks <S2SV_ModEnd> ; connection -> <S2SV_ModStart> = NULL ; remote_connection <S2SV_ModEnd> -> socket = <S2SV_ModStart> = NULL ; remote_fd_callbacks <S2SV_ModEnd>. destroy = <S2SV_ModStart> destroy = cib_remote_connection_destroy <S2SV_ModEnd> ; sock = <S2SV_ModStart> = socket ( AF_INET <S2SV_ModEnd>, SOCK_STREAM, <S2SV_ModStart> ; if ( remote_fd_callbacks. socket <S2SV_ModEnd> == - 1 <S2SV_ModStart> ( ""Looking <S2SV_blank> up <S2SV_blank> %s"", remote_connection -> <S2SV_ModStart>, server, remote_connection -> <S2SV_ModEnd> server ) ; <S2SV_ModStart> 1 memcpy ( remote_connection <S2SV_ModEnd> -> ai_addr, <S2SV_ModStart> 1 memcpy ( remote_connection <S2SV_ModEnd> -> ai_addr, <S2SV_ModStart> 1 memcpy ( remote_connection <S2SV_ModEnd> -> ai_addr, <S2SV_ModStart> ; memcpy ( remote_connection <S2SV_ModEnd> -> ai_addr, <S2SV_ModStart> ; memcpy ( remote_connection <S2SV_ModEnd> -> ai_addr, <S2SV_ModStart> ; memcpy ( remote_connection <S2SV_ModEnd> -> ai_addr, <S2SV_ModStart> ; memcpy ( remote_connection <S2SV_ModEnd> -> ai_addr, <S2SV_ModStart> ; memcpy ( remote_connection <S2SV_ModEnd> ->",0
640,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi,",0
641,"<S2SV_ModStart> ) ) ; ND_TCHECK2 ( bp [ 26 ], sizeof ( struct icmp6_hdr ) ) ; <S2SV_ModStart> ) ) ; ND_TCHECK2 ( bp [ 26 ], sizeof ( struct icmp6_hdr ) ) ;",0
642,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command",0
643,"<S2SV_ModStart> Image * image <S2SV_ModEnd> ; register IndexPacket <S2SV_ModStart> length, padding <S2SV_ModEnd>, version, <S2SV_ModStart> version, width ; MagickBooleanType status <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { DestroyImageList ( image ) ; return ( DestroyImageList ( image ) ) ; }",0
644,"<S2SV_ModStart> ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SCC <S2SV_blank> marker\\n"" ) ; <S2SV_ModStart> ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SCC <S2SV_blank> marker\\n"" ) ; <S2SV_ModStart> ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SCC <S2SV_blank> marker\\n"" ) ; <S2SV_ModStart> ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SCC <S2SV_blank> marker\\n"" ) ; <S2SV_ModStart> ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SCC <S2SV_blank> marker\\n"" ) ; <S2SV_ModStart> ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SCC <S2SV_blank> marker\\n"" ) ; <S2SV_ModStart> ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SCC <S2SV_blank> marker\\n"" ) ; <S2SV_ModStart> ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SCC <S2SV_blank> marker\\n"" ) ; <S2SV_ModStart> ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SCC <S2SV_blank> marker\\n"" ) ; <S2SV_ModStart> ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SCC <S2SV_blank> marker\\n"" ) ; <S2SV_ModStart> ) ) { jas_eprintf ( ""cannot <S2SV_blank> write",0
645,"<S2SV_ModStart> = '\\0' ; if ( strlen ( str_mode ) + 1 + strlen ( argument ) + 1 > INT_MAX ) { irc_log ( server, IRC_LOG_ERROR, ""Invalid <S2SV_blank> channel <S2SV_blank> modes <S2SV_blank> string: <S2SV_blank> %s"", str_mode ) ; free ( new_modes ) ; free ( new_args ) ; return ; } <S2SV_ModStart> = '\\0' ; if ( strlen ( str_temp ) + 1 + strlen ( argument ) + 1 > INT_MAX ) { irc_log ( server, IRC_LOG_ERROR, ""Invalid <S2SV_blank> channel <S2SV_blank> argument <S2SV_blank> string: <S2SV_blank> %s"", str_temp ) ; free ( new_args ) ; free ( str_modes ) ; free ( new_args ) ; return ; }",0
646,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> - m + vpx_read_bit <S2SV_ModEnd> ( r )",1
647,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
648,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> REFERENCE_MODE mode = vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> ( REFERENCE_MODE ) vpx_read <S2SV_ModEnd> ( r,",0
649,"<S2SV_ModStart>! stream ) { <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; } <S2SV_ModStart> stereo_fmt = STEREO_FORMAT_MONO <S2SV_ModEnd> ; # if <S2SV_ModStart> # if CONFIG_WEBM_IO if ( stream -> config. write_webm ) { <S2SV_ModStart> - 1 ; } else { stream -> ebml. last_pts_ms = - 1 ; }",0
650,<S2SV_ModStart> nd_opt_rdnssl * ) ( cp + 2 ) <S2SV_ModEnd> ; if (,0
651,<S2SV_ModStart> -> root_node = yr_malloc ( sizeof ( RE_AST ) ) ; if ( * re_ast -> root_node == NULL ) return ERROR_INSUFFICIENT_MEMORY ; ( * re_ast ) -> root_node -> next = yr_malloc ( sizeof ( RE_AST ) ) ; ( * re_ast ) -> root_node -> prev = yr_malloc ( sizeof ( RE_AST ) ) ; if ( * re_ast -> root_node == NULL ) return ERROR_INSUFFICIENT_MEMORY ; ( * re_ast ) -> root_node -> next = yr_malloc ( sizeof ( RE_AST ) ) ; ( * re_ast ) -> root_node -> prev = yr_malloc ( sizeof ( RE_AST ) ) ; ( * re_ast ) -> root_node -> next -> prev = yr_malloc ( sizeof ( RE_AST ) ) ; ( * re_ast ) -> root_node -> prev -> next = yr_malloc ( sizeof ( RE_AST ) ) ; if ( * re_ast -> root_node == NULL ) return ERROR_INSUFFICIENT_MEMORY ;,0
652,"<S2SV_ModStart> ) ) ; if ( iter -> var_expand_table ) { <S2SV_ModStart> 0 ) { auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s"", key -> key -> key -> key ) ; } else { <S2SV_ModStart> error ) ; } <S2SV_ModStart> 0 ) { auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> = <S2SV_blank> %s"", str_c ( path ), key -> value ) ; } else if ( ret < 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> lookup <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", str_c ( path ), error ) ; return - 1 ; } else if ( key -> key -> default_value!= NULL ) { auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found, <S2SV_blank> using <S2SV_blank> default <S2SV_blank> value <S2SV_blank> %s"", str_c ( path ), key -> key -> default_value )",0
653,<S2SV_ModStart> level = 0 ; tok -> type_comment = 0,0
654,<S2SV_ModStart> maxBitrate ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
655,"<S2SV_ModStart> ASSERT ( dpbSize ) ; memset ( dpb, 0, sizeof ( dpbStorage_t )",0
656,"<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart> (! sock ||! addr ||! addrlen ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen ) addrlen_in = * addrlen ; if ( oe_syscall_getpeername_ocall ( & ret, sock -> host_fd, ( struct oe_sockaddr * ) addr, addrlen_in, addrlen_out )!= OE_OK ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( addrlen_in ) addrlen_out = * addrlen ; if ( oe_syscall_getpeername_ocall ( & ret, sock -> host_fd, ( struct oe_sockaddr * ) addr, addrlen_in, addrlen_out )!= OE_OK <S2SV_ModStart> ) ; } <S2SV_ModEnd> return ret ;",0
657,,1
658,"<S2SV_ModStart> FALSE ; } if (! <S2SV_ModStart>, s ) ) return FALSE",1
659,<S2SV_ModStart> ipv6_pinfo * np <S2SV_ModEnd> ; struct ipv6_txoptions <S2SV_ModStart> ) ; } np = inet6_sk ( sk ) ;,0
660,"<S2SV_ModStart> ; unsigned int <S2SV_ModEnd> found, upx_success <S2SV_ModStart> size_t fsize ; size_t <S2SV_ModEnd> valign, falign <S2SV_ModStart>, hdr_size, <S2SV_ModEnd> j ; struct <S2SV_ModStart> j ) ; if ( j >= sizeof ( struct cli_exe_section ) ) { cli_err ( ""cli_scanpe: <S2SV_blank> cli_exe_sections <S2SV_blank> == <S2SV_blank> NULL\\n"" ) ; return CL_ENULLARG ; }",0
661,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; usleep <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPDRH <S2SV_ModEnd> ) << 8 <S2SV_ModStart> | dm9000ReadReg ( DM9000_EPDRL <S2SV_ModEnd> ) ; }",1
662,"<S2SV_ModStart> cib, & <S2SV_ModEnd> private -> command <S2SV_ModStart> private -> command <S2SV_ModEnd> ) ; } <S2SV_ModStart> cib, & <S2SV_ModEnd> private -> callback <S2SV_ModStart> private -> callback <S2SV_ModEnd> ) ; }",0
663,"<S2SV_ModStart> = ubuf ; memset ( & address, 0, sizeof ( address ) ) ;",0
664,"<S2SV_ModStart> ; int num00 = 0, tmp_err = 0, n = 0, sr = 0 ; int step_param = 3 ; int further_steps = ( MAX_MVSEARCH_STEPS - 1 ) - step_param ; const BLOCK_SIZE bsize = xd -> mi [ 0 ] -> mbmi. sb_type ; vp9_variance_fn_ptr_t v_fn_ptr = cpi -> fn_ptr [ bsize ] ; int new_mv_mode_penalty = 256 ; const int quart_frm = MIN ( cpi -> common. width, cpi -> common. height ) ; while ( ( sr < MAX_FULL_PEL_VAL ) ++ sr ; step_param += sr ; further_steps -= sr ; v_fn_ptr. vf = get_block_variance_fn ( bsize ) ; num00 = cpi -> diamond_search_sad ( x, & ref_mv_full, & tmp_mv, step_param, x -> sadperbit16, & num00, & v_fn_ptr, x -> nmvjointcost, x -> mvcost, ref_mv",0
665,"<S2SV_ModStart> ; if ( h -> addr == MAP_FAILED ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> map <S2SV_blank> file <S2SV_blank> at <S2SV_blank> %p"", filename ) ; goto error ; } if (",0
666,<S2SV_ModStart> ; # endif if ( child -> is_default == NOT_SET ) { if ( parent -> is_default == NOT_SET ) { if ( parent -> is_default == NOT_SET ) { if ( parent -> is_default == NOT_SET ) { if ( parent -> is_default == NOT_SET ) { if ( parent -> is_default == NOT_SET ) { if ( parent -> is_default == NOT_SET ) { if ( parent -> is_default == NOT_SET ) { if ( parent -> is_default == NOT_SET ) { if ( parent -> is_default == NOT_SET ) { if ( parent -> is_default == NOT_SET ) { if ( parent -> is_default == NOT_SET ) { if ( parent -> is_default == NOT_SET ) { if ( parent -> is_default == NOT_SET ) { if ( parent -> is_default == NOT_SET ) { if ( parent -> is_default == NOT_SET ) { if ( parent -> is_default == NOT_SET ) { if ( parent -> is_default == NOT_SET ) { if ( parent -> is_default == NOT_SET ) { if ( parent,0
667,"<S2SV_ModStart> one, offset ; size_t <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
668,<S2SV_ModStart> ( r = <S2SV_ModEnd> sshbuf_put_cstring ( b,1
669,<S2SV_ModStart> ) ) { ovalue = sclone ( <S2SV_ModEnd> stok ( option <S2SV_ModStart> & ovalue ) ),0
670,"<S2SV_ModStart> client = user_data ; crm_trace ( ""Cleaning <S2SV_blank> up <S2SV_blank> after <S2SV_blank> client <S2SV_blank> disconnect: <S2SV_blank> %s/%s"", crm_str ( client -> name ), client -> id ) <S2SV_ModStart> client -> name <S2SV_ModEnd> ) ; free <S2SV_ModStart> user ) ; <S2SV_ModEnd> crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client""",0
671,<S2SV_ModStart> * uv ; <S2SV_ModEnd> thread -> twups <S2SV_ModStart> next ) { <S2SV_ModEnd> if (!,0
