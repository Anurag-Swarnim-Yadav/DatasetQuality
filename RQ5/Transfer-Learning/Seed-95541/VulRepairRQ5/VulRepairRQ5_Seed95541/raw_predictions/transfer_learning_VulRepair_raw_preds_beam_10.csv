,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
1,<S2SV_ModStart> ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ; if (,0
2,"<S2SV_ModStart>, 0 ) ; if ( writer -> stco ) gf_isom_box_del ( ( GF_Box * ) writer -> stco ) ; if ( writer -> stsc ) gf_isom_box_del ( ( GF_Box * ) writer -> stsc",0
3,<S2SV_ModStart> c = array? array -> child : NULL <S2SV_ModEnd> ; while ( <S2SV_ModStart> while ( c ) { if ( <S2SV_ModEnd> item > 0 <S2SV_ModStart> > 0 ) return c ; <S2SV_ModEnd> c = c <S2SV_ModStart> -> next ; <S2SV_ModEnd> return c ;,0
4,"<S2SV_ModStart> u64 nr, <S2SV_ModEnd> struct pt_regs * <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",1
5,"<S2SV_ModStart> EXT4_EXTENTS_FLAG ) { char * buf ; struct grub_ext4_extent_header * leaf ; int i ; leaf = grub_ext4_find_leaf ( data, buf, ( struct grub_ext4_extent_header * ) inode -> blocks. dir_blocks, fileblock ) ; if (! leaf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) ( leaf + 1 ) ; for ( i = 0 ; i < grub_le_to_cpu16 ( leaf -> entries ) ; i ++ ) { if ( fileblock < grub_le_to_cpu32 ( ext [ i ]. block ) ) break ; } if ( fileblock >= grub_le_to_cpu32 ( ext [ i ]. len ) ) return 0 ; else { grub_disk_addr_t start ; start = grub_le_to_cpu16 ( ext [ i ]. start_hi ) ; start = ( start << 32 ) + grub_le_to_cpu32 (",0
6,"<S2SV_ModStart> fdct16 ( const tran_low_t <S2SV_ModEnd> in [ 16 <S2SV_ModStart> 16 ], tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> ] ) { tran_high_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step2 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step3 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> input [ 8 <S2SV_ModStart> ] ; { tran_low_t s0, s1, s2, s3, s4, s5, s6, s7 ; tran_high_t t0, t1, t2, t3 ; tran_high_t <S2SV_ModEnd> x0, x1 <S2SV_ModStart> x2, x3 ; tran_high_t x1, x2, x3 ; tran_low_t x3 ; tran_low_t x4 ; tran_low_t x5 ; tran_low_t x6 ; tran_low_t x7 ; tran_low_t x8 ; tran_low_t x9 ; tran_low_t x10 ; tran_low_t x11 ; tran_low_t x12 ; tran_low_t x13 ; tran",0
7,"<S2SV_ModStart> ( ) ; # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; # endif parse_ciff ( save + hlen, len - hlen, 0 ) ; } if ( parse_tiff ( save + 6 ) ) apply_tiff ( ) ; fseek ( ifp, save + len, SEEK_SET ) ; } return 1 <S2SV_ModEnd> ; } <S2SV_null>",0
8,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> search_filter_level ( const <S2SV_ModStart> search_filter_level ( const YV12_COMMON <S2SV_ModEnd> * sd, <S2SV_ModStart> partial_frame ) { VP9_COMMON_EXT <S2SV_ModEnd> * const cm <S2SV_ModStart> & cpi -> common_ext <S2SV_ModEnd> ; struct loopfilter <S2SV_ModStart> ) ; int best_err ; int filt_best ; int filt_direction = 0 ; int filt_mid = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; int ss_err [ MAX_LOOP_FILTER + 1 ] ; vpx_yv12_copy_y ( cm -> frame_to_show, & cpi -> last_frame_uf ) ; best_err = try_filter_frame ( sd, cpi, filt_mid, partial_frame ) ; filt_best = filt_mid ; ss_err [ filt_mid ] = best_err ; while ( filter_step > 0 ) { const int filt_high = MIN ( filt_mid + filter_step, max_filter_level ) ; const int filt_low = MAX ( filt_mid - filter",0
9,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
10,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ++ i ) vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( usehp ) vpx_write <S2SV_ModEnd> ( w,",1
11,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } else { <S2SV_ModEnd> request -> rxBlockSzx <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; } <S2SV_ModStart> ( ) ) { <S2SV_ModStart> ( ) ; },1
12,"<S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; }",0
13,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> construct_get_dest_keyring ( struct <S2SV_ModStart> * authkey ; int ret ; <S2SV_ModStart> dest_keyring ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & dest_keyring -> flags ) ) { ret = key_read_state ( dest_keyring, & dest_keyring -> state ) ; if ( ret < 0 ) return ret ; } <S2SV_ModStart> ( dest_keyring ) { ret = key_read_state ( dest_keyring, & dest_keyring -> state ) ; if ( ret < 0 ) return ret ; } <S2SV_ModEnd> } case KEY_REQKEY_DEFL_THREAD_KEYRING <S2SV_ModStart> ( dest_keyring ) { ret = key_read_state ( dest_keyring, & dest_keyring -> state ) ; if ( ret < 0 ) return ret ; } <S2SV_ModEnd> } case KEY_REQKEY_DEFL_PROCESS_KEYRING <S2SV_ModStart> ( dest_keyring ) { ret = key_read_state ( dest_keyring, & dest_keyring -> state ) ; if ( ret < 0 ) return ret ; } <S2SV_ModEnd> * _dest",0
14,"<S2SV_ModStart> = create_spnego_ctx ( ) ; if ( sc == NULL ) return GSS_S_FAILURE ; ret = get_negotiable_mechs ( minor_status, spcred, GSS_C_INITIATE, & sc -> mech_set ) ; if ( ret!= GSS_S_COMPLETE ) goto cleanup ; sc -> internal_mech = & sc -> mech_set -> elements [ 0 ] ; if ( put_mech_set ( sc -> mech_set, & sc -> DER_mechTypes ) < 0 ) { ret = GSS_S_FAILURE ; goto cleanup ; } sc -> ctx_handle = GSS_C_NO_CONTEXT ; * ctx = ( gss_ctx_id_t ) sc ; sc = NULL ; * tokflag = INIT_TOKEN_SEND ; ret = GSS_S_CONTINUE_NEEDED ; cleanup : release_spnego_ctx ( & sc",0
15,<S2SV_ModStart> ; tm = g_localtime <S2SV_ModEnd> ( & t,0
16,<S2SV_ModStart> length ) ; if ( strlen ( password )!= 0 ) { <S2SV_ModStart> ) ) ; },0
17,<S2SV_ModStart> == p ) { * errnop = ERANGE ; <S2SV_ModStart> goto not_found ; },0
18,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",1
19,<S2SV_ModStart> = 0 ; if (! <S2SV_ModStart> & timeout ) ) return false,0
20,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> detect_transition_to_still ( struct <S2SV_ModStart> int detect_transition_to_still ( TWO_PASS <S2SV_ModEnd> * twopass, <S2SV_ModStart> last_decay_rate ) { bool trans_to_still = false <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( still_interval > MIN_GF_INTERVAL <S2SV_ModEnd> ) { int <S2SV_ModStart> j ; const TWO_PASS <S2SV_ModEnd> * position = <S2SV_ModStart> * position = TWO_PASS <S2SV_ModEnd> -> stats_in ; <S2SV_ModStart> == input_stats ( TWO_PASS <S2SV_ModEnd>, & tmp_next_frame <S2SV_ModStart> tmp_next_frame ) ) { trans_to_still = true ; break ; } <S2SV_ModEnd> if ( tmp_next_frame <S2SV_ModStart> pcnt_motion < 0.999 ) { trans_to_still = true ; break ; } <S2SV_ModEnd> } reset_fpf_position ( <S2SV_ModStart> twopass, position ) ; if ( j == still_interval ) trans_to_still = true ; } return trans_to_still <S2SV_ModEnd> ; } <S2SV_null>",0
21,<S2SV_ModStart> inode ) ) { spin_lock ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModStart> size ) ; spin_unlock ( & EXT4_I ( inode ) -> i_mmap_sem ) ; },0
22,<S2SV_ModStart> alg ) { <S2SV_ModEnd> if (! <S2SV_ModStart> CRYPTO_ALG_NEED_FALLBACK ) ) <S2SV_ModEnd> alg = crypto_alg_lookup,0
23,"<S2SV_ModStart> = GIT_PKT_NG ; if ( len < 3 ) goto out_err ; <S2SV_ModStart> += 3 ; <S2SV_ModEnd> ptr = strchr <S2SV_ModStart>,'<S2SV_blank>') ; if (! ptr ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> ref = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> ref ) ; memcpy ( pkt -> ref, line, len ) ; pkt -> ref [ len ] = '\\0' ; line = ptr + 1 ; <S2SV_ModEnd> ptr = strchr <S2SV_ModStart>, '\\n' ) ; if (! ptr ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> msg = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> msg ) ; memcpy ( pkt -> msg, line, len ) ; pkt -> msg [ len ] = '\\0' ; line = ptr + 1 ; <S2SV_ModEnd> ptr = strchr <S2SV_ModStart>, '\\n'",0
24,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> BYTE flags ; UINT32 <S2SV_ModEnd> length ; Stream_Read_UINT32 <S2SV_ModStart> = NEGO_STATE_FINAL ; return ;,0
25,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; if (,0
26,"<S2SV_ModStart> 1 ; } ret = <S2SV_ModEnd> mount_entry_on_generic ( mntent <S2SV_ModStart> path ) ; if ( ret < 0 ) { ERROR ( ""mount_entry_on_generic <S2SV_blank> failed"" ) ; return - 1 ; } return ret ;",0
27,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } io -> io_cleanup = mem_cleanup ;,1
28,<S2SV_ModStart> & ( size_t ) ( value + 0.5 ) ) ; break ; } case DivideEvaluateOperator : { result = pixel / ( value == 0.0? 1.0 : value ) ; break ; } case ExponentialEvaluateOperator : { result = ( MagickRealType ) ( QuantumRange * exp ( ( double ) ( value * QuantumScale * pixel ) ) ) ; break ; } case GaussianNoiseEvaluateOperator : { result = ( MagickRealType ) ( QuantumRange * exp ( ( double ) ( value * QuantumScale * pixel ) ) ) ; break ; } case LaplacianNoiseEvaluateOperator : { result = ( MagickRealType ) ( ( size_t ) pixel << ( size_t,0
29,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return ret?,0
30,"<S2SV_ModStart> vpx_codec_enc_cfg_map_t * map ; int i <S2SV_ModStart> = VPX_CODEC_INVALID_PARAM ; for ( i = 0 ; i < iface -> enc. cfg_maps_len ; i ++, map ++ ) { if ( map -> usage == ( int ) usage ) { * cfg = map -> cfg ; cfg -> g_usage = usage ; res = VPX_CODEC_OK ; break ; } } for ( i = 0 ; i < iface -> enc. cfg_maps_len ; i ++, map ++ ) { if ( map -> usage == ( int ) usage ) { * cfg = map -> cfg ; cfg -> g_usage = usage ; res = VPX_CODEC_OK ; break ; } }",0
31,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
32,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
33,"<S2SV_ModStart> NULL ) { PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> SQL <S2SV_blank> statement\\n"" ) ; <S2SV_ModStart> NULL ) { PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> SQL <S2SV_blank> statement\\n"" ) ; <S2SV_ModStart> NULL ) { PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> SQL <S2SV_blank> statement\\n"" ) ; <S2SV_ModStart> NULL ) { PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> SQL <S2SV_blank> statement\\n"" ) ; <S2SV_ModStart> NULL ) { PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> SQL <S2SV_blank> statement\\n"" ) ; <S2SV_ModStart> NULL ) { PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank>",0
34,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_ETXSTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXSTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXRTS <S2SV_ModEnd>, ECON1_TXRTS )",0
35,"<S2SV_ModStart> value ) ; if ( o -> type_comment ) { value = ast2obj_string ( o -> type_comment ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_type_comment, value ) == - 1 ) goto failed ; Py_DECREF ( value ) ; }",0
36,"<S2SV_ModStart> ( page && access ( page, R_OK ) == 0 ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } } else if (! strcmp ( func, ""page/set"" ) ) { char * wikitext = NULL, * page = NULL ; if ( ( ( wikitext = http_request_param_get ( req, ""text"" ) )!= NULL ) && ( ( page = http_request_param_get ( req, ""page"" ) )!= NULL ) ) { file_write ( page, wikitext ) ; http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } } else if ( ( ( wikitext = http_request_param_get ( req, ""text"" ) )!= NULL ) && ( ( page = http_request_param_get ( req, ""page"" ) )!= NULL ) ) { file_write ( page, wikitext ) ; http_response_printf ( res, ""success"" ) ; http_response_send ( res",0
37,"<S2SV_ModStart> low_var_thresh, int mb_rows, int mb_cols, <S2SV_ModEnd> double level = <S2SV_ModStart>.5 ) ; <S2SV_ModEnd> unsigned char * <S2SV_ModStart> pp_limits_buffer ; ; <S2SV_ModEnd> ( void ) <S2SV_ModStart> ) flag ; memset <S2SV_ModEnd> ( limits, <S2SV_ModStart> 16 ) ; vpx_post_proc_down_and_across_mb_row <S2SV_ModEnd> ( source -> <S2SV_ModStart> 8 ) ; vpx_post_proc_down_and_across_mb_row <S2SV_ModEnd> ( source -> <S2SV_ModStart> 8 ) ; vpx_post_proc_down_and_across_mb_row <S2SV_ModEnd> ( source ->",0
38,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; <S2SV_ModEnd> error = mb_cache_entry_insert <S2SV_ModStart> = mb_cache_entry_insert ( ext4_mb_cache, <S2SV_ModEnd> bh -> b_bdev <S2SV_ModStart> bh -> b_blocknr <S2SV_ModEnd> ) ; if <S2SV_ModStart> error ) { <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> hash ) ; <S2SV_ModEnd> } } <S2SV_null>",0
39,<S2SV_ModStart> ) ) ; * code = 200 ; * rlen = 0 ;,0
40,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct ip_options_rcu <S2SV_ModEnd> * ip_options_get_from_user ( <S2SV_ModStart> ip_options_get_from_user ( struct ip_options_rcu <S2SV_ModEnd> * net, <S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> return ip_options_get_finish (",0
41,"<S2SV_ModStart> ( ndo, ""[|truncated]"" <S2SV_ModEnd> ) ) ;",0
42,<S2SV_ModStart> else if ( ( options [ opt_idx ]. flags & P_TOUCH ) && <S2SV_ModStart> else if ( ( options [ opt_idx ]. flags & P_TOUCH ) && <S2SV_ModStart> else if ( ( options [ opt_idx ]. flags & P_TOUCH ) && <S2SV_ModStart> else if ( ( options [ opt_idx ]. flags & P_TOUCH ) && <S2SV_ModStart> else if ( ( options [ opt_idx ]. flags & P_TOUCH ) && <S2SV_ModStart> else if ( ( options [ opt_idx ]. flags & P_TOUCH ) && <S2SV_ModStart> else if ( ( options [ opt_idx ]. flags & P_TOUCH ) && <S2SV_ModStart> else if ( ( options [ opt_idx ]. flags & P_TOUCH ) && <S2SV_ModStart> else if ( ( options [ opt_idx ]. flags & P_TOUCH ) && <S2SV_ModStart> else if ( ( options [ opt_idx ]. flags & P_TOUCH ) && <S2SV_ModStart> else if ( ( options [ opt_idx ]. flags & P_TOUCH ) && <S2SV_ModStart> else if ( ( options [ opt_idx ]. flags & P_TOUCH ) && <S2SV_ModStart> else,0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode <S2SV_ModStart>, & new_mode, & acl ) ; if ( ret <S2SV_ModEnd> ) goto out",0
44,"<S2SV_ModStart> size_t size ; if ( width < 0 || height < 0 ) { goto error ; } if (! ( cmpt = jas_malloc ( sizeof ( jas_image_cmpt_t ) ) ) ) { goto error ; } cmpt -> type_ = JAS_IMAGE_CT_UNKNOWN ; cmpt -> tlx_ = tlx ; cmpt -> tly_ = tly ; cmpt -> hstep_ = hstep ; cmpt -> vstep_ = vstep ; cmpt -> prec_ = depth ; cmpt -> sgnd_ = sgnd ; cmpt -> stream_ = 0 ; cmpt -> cps_ = ( depth + 7 ) / 8 ; if (! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ) { goto error ; } cmpt -> stream_ = ( inmem )? jas_stream_memopen2 ( 0, size ) : jas_stream_tmpfile ( ) ; if (! cmpt -> stream_ ) { goto",0
45,<S2SV_ModStart> == datalen ) goto machine_overrun_error ; <S2SV_ModEnd> flags = 0 <S2SV_ModStart> ) ) goto machine_overrun_error <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) goto machine_overrun_error <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) goto machine_overrun_error <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) goto machine_overrun_error <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) goto machine_overrun_error <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) goto machine_overrun_error <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) goto machine_overrun_error <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) goto machine_overrun_error <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) goto machine_overrun_error <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) goto machine_overrun_error <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) goto machine_overrun_error <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) goto machine_overrun_error <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) goto machine_overrun_error <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) goto machine_overrun_error <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) goto machine_overrun_error <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) goto machine_overrun_error,0
46,"<S2SV_ModStart> * req, uint32_t <S2SV_ModEnd> * acl_len ) <S2SV_ModStart> acl_len ) { <S2SV_ModEnd> uint32_t attrlen, <S2SV_ModStart> int status ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> xdr, OP_GETATTR ) )!= 0 ) goto out ; if ( ( status = decode_op_hdr ( xdr, OP_GETACL ) )!= 0 ) goto out ; if ( ( status = decode_attr_bitmap ( xdr, bitmap ) )!= 0 ) goto out ; if ( unlikely ( bitmap [ 0 ] & FATTR4_WORD0_ACL ) ) { size_t hdrlen ; u32 recvd ; hdrlen = ( u8 * ) xdr -> p - ( u8 * ) iov -> iov_base ; recvd = req -> rq_rcv_buf. len - hdrlen ; if ( attrlen > recvd ) { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen, recvd ) ; return - EINVAL ; } xdr_read_pages ( xdr",0
47,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
48,"<S2SV_ModStart> ) ) { if ( ( <S2SV_ModStart> & tok ) ) == NULL ) { return MPR_ERR_BAD_SYNTAX ; } <S2SV_ModEnd> if ( owner <S2SV_ModStart> } group = stok ( tok, "":"", & perms ) ; if ( group && * group ) { if ( snumber ( group ) ) { gid = ( int ) stoi ( group ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { gid = HTTP -> gid ; } else { gid = groupToID ( group ) ; } } if ( perms && snumber ( perms ) ) { mode = ( int ) stoiradix ( perms, - 1, NULL ) ; } else { mode = 0 ; } if ( gid < 0 || uid < 0 ) { return MPR_ERR_BAD_SYNTAX ; } } else { dirs = auth ; auth = 0 ; } tok = dirs ; for ( tok = sclone ( dirs ) ; ( dir = stok ( tok, "","", & tok ) )!= 0 ; ) { path = httpMakePath ( state -> route, state -> configDir, dir ) ; if ( mprGetPathInfo ( path, & info ) == 0 && info. isDir ) {",0
49,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> addr = VPX_MALLOC_L <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; <S2SV_ModEnd> if ( addr,0
50,"<S2SV_ModStart> int res ; size_t <S2SV_ModEnd> indexes = SQUASHFS_LOOKUP_BLOCKS <S2SV_ModStart> long long export_index_table ; memset ( export_index_table, 0, sizeof ( long long ) * indexes ) ; res = read_fs_bytes ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } SQUASHFS_INSWAP_LOOKUP_BLOCKS ( export_index_table, indexes ) ; export_index_table <S2SV_ModStart> indexes ] ; <S2SV_ModEnd> * table_start =",0
51,<S2SV_ModStart> ; } else { <S2SV_ModStart> p1 ) ; },0
52,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> # if CONFIG_VP8_ENCODER <S2SV_ModStart> # endif } for ( argi = argj = argv ; ( * argj = * argi ) ; argi += arg. argv_step ) { arg. argv_step = 1 ; if ( eos_mark_found ) { argj ++ ; continue ; } else if (! strcmp ( * argj, ""--"" ) ) { eos_mark_found = 1 ; continue ; } else if (! strcmp ( * argj, ""--"" ) ) { eos_mark_found = 1 ; continue ; } if ( 0 ) { } else if ( arg_match ( & arg, & outputfile, argi ) ) { config -> out_fn = arg. val ; } else if ( arg_match ( & fpf_name, argi ) ) { config -> stats_fn = arg. val ; } else if ( arg_match ( & arg, & use_ivf, argi ) ) { config -> write_webm = 0 ; } else if ( arg_match ( & arg, & threads, argi ) ) { config -> cfg. g_threads = arg_parse_uint (",0
53,"<S2SV_ModStart> } if ( c -> opt -> option. client || c -> opt -> protocol ) return 0 ; if ( c -> opt -> redirect_addr. names ) return 1 ; if ( c -> opt -> option. client <S2SV_ModEnd> ) { SSL_SESSION <S2SV_ModStart>, index_session_authenticated, NULL <S2SV_ModEnd> ) ; SSL_SESSION_free <S2SV_ModStart> } if ( preverify_ok ) { SSL_SESSION * sess = SSL_get1_session ( c -> ssl ) ; if ( sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } } return 1 ; } if ( verify_checks ( c, preverify_ok, callback_ctx ) ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, NULL ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } } return 1 ;",0
54,"<S2SV_ModStart> ; if ( crypto_memneq <S2SV_ModEnd> ( cmac,",0
55,"<S2SV_ModStart> cpi ) { <S2SV_ModEnd> const uint64_t bits_used <S2SV_ModStart> bits_used = cpi -> twopass <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> twopass. kf_group_bits = MAX ( cpi -> twopass. kf_group_bits, 0 ) ; <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> twopass. kf_group_bits = MAX ( cpi -> twopass. kf_group_bits, 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
56,"<S2SV_ModStart> EOFOp 0x07 char * magick_buffer <S2SV_ModEnd> ; Image * <S2SV_ModStart> char * ) magick_buffer <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( count!= 3 ) || ( memcmp ( magick_buffer, ""\\122\\314"", 3 )!= 0 ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; do { image -> page. x = ReadBlobLSBShort ( image ) ; image -> page. y = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; flags = ( MagickStatusType ) ReadBlobByte ( image ) ; image -> alpha_trait = flags & 0x01 ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; flags = ( MagickStatusType ) ReadBlobByte ( image ) ; image -> alpha_trait = flags & 0x02 ; image -> columns = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; flags",0
57,"<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> altsetting [ 0 ]. desc. bNumEndpoints < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; error = - EINVAL ; goto err_free_urb ; }",1
58,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
59,"<S2SV_ModStart> * dir = ""/tmp"" <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> tmpname, dir )",0
60,<S2SV_ModStart> = value ; if ( 0 == ps_codec -> i4_pps_done ) { ps_codec -> i4_pps_done = 1 ; return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_codec -> i4_pps_done ) { ps_codec -> i4_pps_done = 1 ; return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_codec -> i4_pps_done ) { ps_codec -> i4_pps_done = 1 ; return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_codec -> i4_pps_done ) { ps_codec -> i4_pps_done = 1 ; return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_codec -> i4_pps_done ) { ps_codec -> i4_pps_done = 1 ; return IHEVCD_INVALID_HEADER ; },0
61,"<S2SV_ModStart> n ] ; if ( n == ( size_t ) 0U ) { addreply_noformat ( 500, ""?"" ) ; break ; } <S2SV_ModStart> n ] ; if ( n == ( size_t ) 0U ) { addreply_noformat ( 500, ""?"" ) ; break ; } <S2SV_ModStart> n ] ; if ( n == ( size_t ) 0U ) { addreply_noformat ( 500, ""?"" ) ; break ; } <S2SV_ModStart> n ] ; if ( n == ( size_t ) 0U ) { addreply_noformat ( 500, ""?"" ) ; break ; } <S2SV_ModStart> n ] ; if ( n == ( size_t ) 0U ) { addreply_noformat ( 500, ""?"" ) ; break ; } <S2SV_ModStart> n ] ; if ( n == ( size_t ) 0U ) { addreply_noformat ( 500, ""?"" ) ; break ; } <S2SV_ModStart> n ] ; if ( n == ( size_t ) 0U ) { addreply_noformat ( 500, ""?"" ) ; break ; } <S2SV_ModStart> n ] ; if ( n == ( size_t ) 0U ) { addreply_noformat ( 500, ""?"" ) ; break ; }",0
62,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> vp9_setup_dst_planes ( MACROBLOCKD <S2SV_ModStart> mi_col ) { int i ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y ) ; } for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y ) ; } for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { <S2SV_ModStart> i ) { <S2SV_ModEnd> setup_pred_plane ( &",0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,<S2SV_ModStart> ) get_block = ocfs2_read_get_block <S2SV_ModEnd> ; else get_block <S2SV_ModStart> else get_block = ocfs2_dio_read_block <S2SV_ModEnd> ; return __blockdev_direct_IO,0
65,"<S2SV_ModStart>, ""%79s <S2SV_blank> %[^\\n]\\n"", def, strparm ) == 2 ) { if ( strparm [ 0 ] == \'""\' ) { isstring = true ; len = strlen ( strparm ) ; newstring = ( char * ) malloc ( len ) ; strparm [ len - 1 ] = 0 ; strcpy ( newstring, strparm + 1 ) ; } else if ( strparm [ 0 ] == '0' && strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else sscanf ( strparm, ""%i"", & parm ) ; for ( i = 0 ; i < numdefaults ; i ++ ) if (! strcmp ( def, defaults [ i ]. name ) ) { if (! isstring ) * defaults [ i ]. location = parm ; else * defaults [ i ]. location = ( int ) newstring ; break ; } } } fclose ( f ) ; } for ( i = 0 ; i < numdefaults ; i ++ ) if (! strcmp ( def, defaults [ i ]. name ) ) {",0
66,"<S2SV_ModStart> n ) { <S2SV_ModEnd> int kind ; <S2SV_ModStart> ; mod_ty mod <S2SV_ModEnd> ; assert ( <S2SV_ModStart> ':' ) ; return fstring_compile_expr_ex ( expr_start, expr_end, c, n, ""f-string"" <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
67,"<S2SV_ModStart> string ) { return _cJSON_GetItem <S2SV_ModEnd> ( object -> <S2SV_ModStart> object -> child, string ) <S2SV_ModEnd> ; } <S2SV_null>",0
68,<S2SV_ModStart> size ) ; if ( px -> ft == NULL ) { return FALSE ; },0
69,"<S2SV_ModStart> u_char * dat, u_int len <S2SV_ModStart>, val_l ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart>",0
70,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
71,"<S2SV_ModStart> int i ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> uv_stride, src -> alpha_stride } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ], buffers [ i ], strides [ i ], mi_row, mi_col, sf, pd -> subsampling_x, pd -> subsampling_y ) ; } } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ], buffers [ i ], strides [ i ], mi_row, mi_col, sf, pd -> subsampling_x, pd -> subsampling_y ) ; } } for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * pd = & xd -> plane [ i ] ; setup_pred",0
72,"<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ; for ( iov = msg -> msg_iov, iovlen = msg -> msg_iovlen ; iovlen > 0 ; iov ++ ) { unsigned long seglen = iov -> iov_len ; char __user * from = iov -> iov_base ; while ( seglen ) { sgl = list_first_entry ( & ctx -> tsgl, struct skcipher_sg_list, list ) ; sg = sgl -> sg ; while (! sg -> length ) sg ++ ; used = min_t ( unsigned long, used, seglen ) ; if (! ctx -> more || used < ctx -> used ) used -= used % bs ; err = - EINVAL ; if (! ctx -> more || used < ctx -> used ) goto free ; ablkcipher_request_set_crypt ( & ctx -> req, sg, ctx -> rsgl. sg, used, ctx -> iv ) ; err = af_alg_wait_for_completion ( ctx -> enc? crypto_ablkcipher_encrypt ( & ctx -> req ) : crypto_ablkcipher_decrypt (",0
73,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
74,<S2SV_ModStart> user ) { cleanup_srcu_struct ( & user -> release_barrier ) ; <S2SV_ModStart> _ipmi_destroy_user ( user <S2SV_ModEnd> ) ; kref_put,0
75,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> sl = strlen,1
76,"<S2SV_ModStart> * for_ch ; if ( TYPE ( CHILD ( n, 0 ) ) == ASYNC ) { is_async = 1 ; } else if ( c -> c_feature_version < 6 ) { ast_error ( c, n, ""Async <S2SV_blank> comprehension <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } for_ch = CHILD ( n, 1 + is_async ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; expression = ast_for_expr ( c, CHILD ( n, 3 + is_async ) ) ; if (! expression ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if ( NCH ( for_ch ) == 1 ) comp = comprehension ( Tuple ( t, Store, first -> lineno, first -> col_offset, c -> c_arena ), expression, NULL, is_async, c -> c_arena ) ; if (! comp ) return NULL ; if ( NCH ( n ) == ( 5",0
77,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> dst_state -> curframe <S2SV_ModStart> -> curframe ; },0
78,"<S2SV_ModStart> write_mb_modes_kf ( const VP9_COMMON * cm, const MACROBLOCKD * xd <S2SV_ModEnd>, MODE_INFO * <S2SV_ModStart> * mi_8x8, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> w ) { <S2SV_ModEnd> const struct segmentation <S2SV_ModStart> ; const MODE_INFO above_mi = xd -> above_mi <S2SV_ModEnd> ; const MODE_INFO <S2SV_ModStart> ; const MODE_INFO left_mi = xd -> left_mi? mi_8x8 [ - 1 ] : NULL ; const MB_MODE_INFO * const mbmi = & mi -> mbmi ; const BLOCK_SIZE bsize = mbmi -> sb_type ; if ( seg -> update_map ) write_segment_id ( w, seg, mbmi -> segment_id ) ; write_skip ( cpi, mbmi -> segment_id, mi, w ) ; if ( bsize >= BLOCK_8X8 && cm -> tx_mode == TX_MODE_SELECT ) write_selected_tx_size ( cpi, mbmi -> tx_size, bsize, w ) ; if ( bsize >= BLOCK_8X8 && cm -> tx_mode == TX_MODE_SELECT ) write_",0
79,"<S2SV_ModStart> maxn ) { <S2SV_ModEnd> # ifdef DEBUG <S2SV_ModStart> ; # endif if ( n > maxn ) SWF_error ( ""Action <S2SV_blank> overflow!!"" ) ;",0
80,<S2SV_ModStart> ; if ( EXTRACT_32BITS ( & prep -> pp_n ) <S2SV_ModEnd> < sizeof ( <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> n = EXTRACT_32BITS,0
81,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
82,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> addModuleArgument ( sqlite3 <S2SV_ModStart> zArg ) { sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof <S2SV_ModStart> = sizeof ( sqlite3_int64 <S2SV_ModEnd> ) * ( <S2SV_ModStart> nModuleArg ) ; sqlite3_int64 <S2SV_ModEnd> * * azModuleArg <S2SV_ModStart> } else { sqlite3_int64 <S2SV_ModEnd> i = pTable,0
83,<S2SV_ModStart> ] ; } for ( i = anal_size - 1 ; i >= 0 ; i -- ) { u_in [ i ] = x [ i - anal_size ] ; } for ( i = anal_size - 1 ; i >= 0 ; i -- ) { u_out [ i ] = x [ i - anal_size ] ; } for ( i = anal_size - 1 ; i >= 0 ; i -- ) { u_in [ i ] = x [ i - anal_size ] ; } for ( i = anal_size - 1 ; i >= 0 ; i -- ) { u_out [ i ] = x [ i - anal_size ] ; } for ( i = anal_size - 1 ; i >= 0 ; i -- ) { u_in [ i ] = x [ i - anal_size ] ; } for ( i = anal_size - 1 ; i >= 0 ; i -- ) { u_in [ i ] = x [ i - anal_size ] ; } for ( i = anal_size - 1 ; i >= 0 ; i -- ) { u_in [ i ] = x [,0
84,<S2SV_ModStart> -> dmin ; if ( ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { <S2SV_ModStart> p ) ; } <S2SV_ModStart> ONIGENC_IS_SINGLEBYTE ( reg <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_SINGLEBYTE ( reg <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_SINGLEBYTE ( reg <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_SINGLEBYTE ( reg <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_SINGLEBYTE ( reg <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_SINGLEBYTE ( reg <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_SINGLEBYTE ( reg <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_SINGLEBYTE ( reg <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_SINGLEBYTE ( reg <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_SINGLEBYTE ( reg <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_SINGLEBYTE ( reg <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_SINGLEBYTE ( reg <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_SINGLEBYTE ( reg <S2SV_ModEnd> ) ) {,0
85,"<S2SV_ModStart> bfq_idle_slice_timer_body ( struct bfq_sched_data * sched_data <S2SV_ModEnd> ) { struct <S2SV_ModStart> bfq_data * bfqd <S2SV_ModEnd> ; enum bfqq_expiration <S2SV_ModStart> long flags ; spin_lock <S2SV_ModEnd> ( & bfqd <S2SV_ModStart> bfqd -> lock <S2SV_ModEnd> ) ; bfq_clear_bfqq_wait_request <S2SV_ModStart> in_service_queue ) { spin_unlock <S2SV_ModEnd> ( & bfqd <S2SV_ModStart> return ; } bfq_bfqq_expire ( bfqd, bfqq, true, reason ) ; spin_unlock <S2SV_ModEnd> ( & bfqd <S2SV_ModStart> flags ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
86,,1
87,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
88,"<S2SV_ModStart> diffBlock + diffBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } memcpy ( newData + newpos, diffPtr, x ) ; diffPtr += x ; if ( diffPtr <S2SV_ModEnd> > diffBlock + <S2SV_ModStart> diffBlock + diffBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } if ( extraPtr + y <S2SV_ModEnd> > extraBlock + <S2SV_ModStart> extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } memcpy ( newData + newpos, extraPtr, y ) ; extraPtr += y ; if ( extraPtr + z <S2SV_ModEnd> > extraBlock + <S2SV_ModStart> extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } memcpy ( newData + newpos, extraPtr",0
89,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> np -> tclass ) ; rcu_read_unlock (,0
90,<S2SV_ModStart> = VFF_TYP_BIT ; status = MagickTrue ; <S2SV_ModStart> = VFF_TYP_BIT ; status = MagickFalse ; <S2SV_ModStart> = VFF_TYP_BIT ; status = MagickTrue ; <S2SV_ModStart> = VFF_TYP_BIT ; status = MagickTrue ; <S2SV_ModStart> = VFF_TYP_BIT ; status = MagickTrue ; <S2SV_ModStart> = VFF_TYP_BIT ; status = MagickTrue ; <S2SV_ModStart> = VFF_TYP_BIT ; status = MagickTrue ; <S2SV_ModStart> = VFF_TYP_BIT ; status = MagickTrue ; <S2SV_ModStart> = VFF_TYP_BIT ; status = MagickFalse ; <S2SV_ModStart> = VFF_TYP_BIT ; status = MagickTrue ; <S2SV_ModStart> = VFF_TYP_BIT ; status = MagickTrue ; <S2SV_ModStart> = VFF_TYP_BIT ; status = MagickTrue ; <S2SV_ModStart> = VFF_TYP_BIT ; status = MagickTrue ; <S2SV_ModStart> = VFF_TYP_BIT ; status = MagickTrue ; <S2SV_ModStart> = VFF_TYP_BIT ; status = MagickTrue ; <S2SV_ModStart> = VFF_TYP_BIT ; status = Magick,0
91,<S2SV_ModStart> data ) { ( void ) data ;,0
92,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
93,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
94,<S2SV_ModStart> mbmi. ref_frame < <S2SV_ModEnd> INTRA_FRAME ) { <S2SV_ModStart> mbmi. ref_frame < <S2SV_ModEnd> INTRA_FRAME ) { <S2SV_ModStart> mbmi. ref_frame < <S2SV_ModEnd> INTRA_FRAME ) { <S2SV_ModStart> mbmi. ref_frame < <S2SV_ModEnd> INTRA_FRAME ) { <S2SV_ModStart> mbmi. ref_frame < <S2SV_ModEnd> INTRA_FRAME ) { <S2SV_ModStart> mbmi. ref_frame < <S2SV_ModEnd> INTRA_FRAME ) { <S2SV_ModStart> mbmi. ref_frame < <S2SV_ModEnd> INTRA_FRAME ) { <S2SV_ModStart> mbmi. ref_frame < <S2SV_ModEnd> INTRA_FRAME ) { <S2SV_ModStart> mbmi. ref_frame < <S2SV_ModEnd> INTRA_FRAME ) { <S2SV_ModStart> mbmi. ref_frame < <S2SV_ModEnd> INTRA_FRAME ) { <S2SV_ModStart> mbmi. ref_frame < <S2SV_ModEnd> INTRA_FRAME ) { <S2SV_ModStart> mbmi. ref_frame < <S2SV_ModEnd> INTRA_FRAME ) { <S2SV_ModStart> mbmi. ref_frame < <S2SV_ModEnd> INTRA_FRAME ) { <S2SV_ModStart> mbmi. ref_frame < <S2SV_ModEnd> INTRA_FRAME ) { <S2SV_ModStart> mbmi. ref_frame < <S2SV_ModEnd> INTRA_FRAME ) { <S2SV_ModStart> mbmi. ref_frame < <S2SV_ModEnd> INTRA_FRAME ) { <S2SV_ModStart> mbmi. ref_frame < <S2SV_ModEnd> INTRA_FRAME ),0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
97,"<S2SV_ModStart> msicap msicap ; memset ( ( void * ) & msicap, 0, sizeof ( msicap ) ) ;",0
98,"<S2SV_ModStart> } if ( ( cmd -> flags & REDIS_CMD_DENYPASS ) && ( c -> flags & REDIS_CLOSE_AFTER_REPLY ) ) { addReplyError ( c, shared. ok ) ; c -> flags |= REDIS_CLOSE_AFTER_REPLY ; return REDIS_OK ; } if (",0
99,"<S2SV_ModStart> ; if ( cfg -> g_w == 0 || cfg -> g_h == 0 ) return VPX_CODEC_ERR_INVALID_ARGS ; if ( <S2SV_ModStart> VPX_RC_ONE_PASS ) ) { <S2SV_ModStart> ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; return VPX_CODEC_ERR_INVALID_ARGS ; } <S2SV_ModStart> ""Cannot <S2SV_blank> increase <S2SV_blank> lag_in_frames"" ) ; if ( ( cfg -> g_lag_in_frames > ctx -> cfg. g_lag_in_frames ) ) { ERROR ( ""Cannot <S2SV_blank> increase <S2SV_blank> lag_in_frames"" ) ; return VPX_CODEC_ERR_INVALID_ARGS ; }",0
100,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> vp9_init_plane_quantizers ( cpi,0
101,<S2SV_ModStart> info -> si_code!= SI_QUEUE ) <S2SV_ModEnd> return - EPERM <S2SV_ModStart> return - EPERM <S2SV_ModEnd> ; return do_send_specific,0
102,<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; if (! ( <S2SV_ModStart> size - 8 ) ) ) return GF_ISOM_INVALID_FILE,0
103,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
104,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> -> state == fmode <S2SV_ModEnd> ) return ; <S2SV_ModStart> if ( ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> )!= ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> { if ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> -> state = fmode <S2SV_ModEnd> ; } <S2SV_null>",0
105,"<S2SV_ModStart> read_info ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( ( Image * ) NULL ) ; }",0
106,<S2SV_ModStart> 0 ; } if ( len > SIZE_MAX - elem. in_sg [ 0 ]. iov_len ) { return 0 ; },0
107,"<S2SV_ModStart>, i, <S2SV_ModEnd> JPC_QCX_GETEXPN ( qcd <S2SV_ModStart> ] ), <S2SV_ModEnd> JPC_QCX_GETMANT ( qcd",0
108,<S2SV_ModStart> AV_PIX_FMT_PAL8 ; } else if ( c -> format == CHUNKY ) { avctx -> pix_fmt = AV_PIX_FMT_PAL16 ; },0
109,<S2SV_ModStart> length - 1 <S2SV_ModEnd> ) ; return,1
110,"<S2SV_ModStart> image_noffset ) { char * name ; if ( noffset == - FDT_ERR_TRUNCATED || noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; } name = fit_get_name ( fit, noffset, NULL ) ; if (! name ) { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; if ( ret ) { puts ( ""- <S2SV_blank> "" ) ; } else { puts ( ""+ <S2SV_blank> "" ) ; verified = 1 ; break ; } } } if ( noffset == - FDT_ERR_TRUNCATED || noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; } return verified? 0 : - EPERM ; error : printf ( "" <S2SV_blank> error!\\n%s <S2SV_blank> for <S2SV_blank> \'%s\' <S2SV_blank> hash <S2SV_blank> node <S2SV_blank> in <S2SV_blank> \'%s\' <S2SV_blank> image <S2SV_blank> node\\n"", err_msg, fit_get_name ( fit, noffset, NULL",0
111,"<S2SV_ModStart> ; if (! cx23888_ir_kfifo_alloc ( & state -> rx_kfifo, CX23888_IR_RX_KFIFO_SIZE, GFP_KERNEL ) ) return - ENOMEM ; state -> dev = dev ; sd = & state -> sd ; v4l2_subdev_init ( sd, & cx23888_ir_controller_ops ) ; v4l2_set_subdevdata ( sd, state ) ; snprintf ( sd -> name, sizeof ( sd -> name ), ""%s/888-ir"", dev -> name ) ; sd -> grp_id = CX23885_HW_888_IR ; ret = v4l2_device_register_subdev ( & dev -> v4l2_dev, sd ) ; if ( ret == 0 ) { cx23888_ir_write4 ( dev, CX23888_IR_IRQEN_REG, 0 ) ; mutex_init ( & state -> rx_params_lock ) ; default_params = default_rx_params ; v4l2_subdev_",0
112,"<S2SV_ModStart>, vpx_codec_dec_cfg_t * dec_cfg, vpx_codec_flags_t flags, int ver ) { vpx_codec_err_t res ; if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_POSTPROC ) &&! ( iface -> caps & VPX_CODEC_CAP_POSTPROC ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_ERROR_CONCEALMENT ) &&! ( iface -> caps & VPX_CODEC_CAP_ERROR_CONCEALMENT ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODE",0
113,<S2SV_ModStart> ; value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1100WritePhyReg (,0
114,<S2SV_ModStart> = tos ; ipc. tos = tos ;,0
115,"<S2SV_ModStart> ( flags & ( VPX_CODEC_USE_XMA | VPX_CODEC_USE_PSNR ) <S2SV_ModEnd> ) &&! <S2SV_ModStart> & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else { int i ; void * mem_loc = NULL ; if (! ( res = iface -> enc. mr_get_mem_loc ( cfg,",0
116,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
117,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; RESERVE_SPACE",1
118,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ) ; return 0 <S2SV_ModStart> break ; } return error <S2SV_ModEnd> ; } <S2SV_null>,1
119,"<S2SV_ModStart> ; if ( len < 1 ) { r_strbuf_append ( & op -> esil, ""\\0"" ) ; return - 1 ; } if (",0
120,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
121,<S2SV_ModStart> goto trunc ; if ( lshp -> ls_length < sizeof ( struct lsa6_hdr ) ) goto trunc ;,0
122,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { ret = - EFAULT ; break ; } <S2SV_ModEnd> * obuf =",0
123,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
124,<S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ),0
125,"<S2SV_ModStart> costs, vp9_tree * <S2SV_ModStart> tree, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> c ) { vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> ) ; const vpx_tree_index <S2SV_ModEnd> ii = tree",0
126,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
127,"<S2SV_ModStart> & 0xffff ; if (! synth_devs [ dev ] -> load_patch ) return - ENXIO ; <S2SV_ModStart> c, 0 ) ; if ( err < 0 ) return err ; return err ; } if ( ev_code >= 128 ) { if ( seq_mode == SEQ_2 && ev_code == SEQ_EXTENDED ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> Invalid <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> event <S2SV_blank> %x\\n"", ev_code ) ; return - EINVAL ; } ev_size = 8 ; if ( c < ev_size ) { if (! seq_playing ) seq_startplay ( ) ; return count - c ; } if ( copy_from_user ( ( char * ) & event_rec [ 4 ], & ( buf ) [ p + 4 ], 4 ) ) return count - c ; } if ( c < ev_size ) { if (! seq_playing ) seq_startplay ( ) ; return count - c ; } if ( copy_from_user ( ( char * ) & event_rec [ 4 ], & ( buf ) [ p + 4 ], 4 )",0
128,"<S2SV_ModStart> fadst16 ( const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t <S2SV_ModEnd> x0, s1 <S2SV_ModStart> 15 ] ; tran_high_t <S2SV_ModEnd> x1 = input <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> x2 = input <S2SV_ModStart> 13 ] ; tran_high_t <S2SV_ModEnd> x3 = input <S2SV_ModStart> 2 ] ; tran_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 4 ] ; tran_high_t <S2SV_ModEnd> x5 = input <S2SV_ModStart> 9 ] ; tran_high_t <S2SV_ModEnd> x7 = input <S2SV_ModStart> 7 ] ; tran_high_t <S2SV_ModEnd> x9 = input <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> x10 = input <S2SV_ModStart> 5 ] ; tran_high_t <S2SV_ModEnd> x11 = input <S2SV_ModStart> 10 ] ; tran_high_t <S2SV_ModEnd> x12 = input <S2SV_ModStart> 12 ] ; tran_high_t <S2SV_ModEnd> x15 = input <S2SV_ModStart> 14 ]",0
129,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> flags |= HAS_EDSP <S2SV_ModStart> |= HAS_EDSP ; <S2SV_ModEnd> flags |= HAS_MEDIA <S2SV_ModStart> |= HAS_MEDIA ; <S2SV_ModEnd> flags |= HAS_NEON <S2SV_ModStart> flags |= HAS_NEON ; <S2SV_ModEnd> return flags &,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
131,"<S2SV_ModStart> * cpi, <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd>, int * <S2SV_ModStart> bsize ) { <S2SV_ModEnd> int bw, <S2SV_ModStart> = num_8x8_blocks_wide_lookup [ mi <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = num_8x8_blocks_high_lookup [ mi <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> ( cpi, mi <S2SV_ModEnd>, no_pred_segcounts, <S2SV_ModStart> ( cpi, mi <S2SV_ModEnd>, no_pred_segcounts, <S2SV_ModStart> ( cpi, mi <S2SV_ModEnd>, no_pred_segcounts, <S2SV_ModStart> ( cpi, mi <S2SV_ModEnd>, no_pred_segcounts, <S2SV_ModStart> ( cpi, mi <S2SV_ModEnd>, no_pred_segcounts, <S2SV_ModStart> ( cpi, mi <S2SV_ModEnd>, no_pred_segcounts, <S2SV_ModStart> ( cpi, mi <S2SV_ModEnd>, no_pred_segcounts, <S2SV_ModStart> ( cpi, mi <S2SV_ModEnd>, no_pred_segcounts, <S2SV_ModStart> ( cpi, mi <S2SV_ModEnd>, no_pred_segcounts,",0
132,<S2SV_ModStart> flags & CLIENT_CLOSE_AFTER_REPLY ) break ; if ( c -> flags & CLIENT_DISCONNECT,0
133,<S2SV_ModStart> get_blocks_flags = EXT4_GET_BLOCKS_CREATE | EXT4_GET_BLOCKS_RESERVE <S2SV_ModStart> get_blocks_flags |= EXT4_GET_BLOCKS_DELALLOC_RESERVE <S2SV_ModEnd> ; blks =,0
134,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart>, handle, <S2SV_ModEnd> p -> ai_flags <S2SV_ModStart> p -> ai_flags <S2SV_ModEnd>, & p <S2SV_ModStart> p -> ai_family <S2SV_ModEnd>, & p <S2SV_ModStart> p -> ai_socktype <S2SV_ModEnd>, p -> <S2SV_ModStart> p -> ai_protocol <S2SV_ModEnd>, p -> <S2SV_ModStart>, NULL, <S2SV_ModEnd> p -> ai_addrlen <S2SV_ModStart>, NULL, <S2SV_ModEnd> p -> ai_addrlen <S2SV_ModStart> p -> ai_addrlen <S2SV_ModEnd>, NULL )",0
135,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
136,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
137,"<S2SV_ModStart> * indx, u8 <S2SV_ModEnd> size, void <S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
138,"<S2SV_ModStart> asdl_seq * body, asdl_seq * type_comment <S2SV_ModStart> = body ; p -> v. Module. type_comment = type_comment ;",0
139,"<S2SV_ModStart>, int64_t ts_end <S2SV_ModEnd> ) { struct <S2SV_ModStart> 4 ; # else ( void ) src ; ( void ) ts_start ; ( void ) ts_end ; ( void ) flags ; # <S2SV_ModStart> write_idx ) ; vp9_copy_and_extend_frame ( src, & buf -> img ) ; <S2SV_ModStart> } else { # if USE_PARTIAL_COPY if ( ctx -> max_sz == 1 && active_map &&! flags ) { for ( row = 0 ; row < mb_rows ; ++ row ) { col = 0 ; while ( 1 ) { for ( ; col < mb_cols ; ++ col ) { if ( active_map [ col ] ) break ; } if ( col == mb_cols ) break ; active_end = col ; for ( ; active_end < mb_cols ; ++ active_end ) { if ( active_map [ active_end ] ) break ; } vp9_copy_and_extend_frame_with_rect ( src, & buf -> img, row << 4, col << 4, 16, ( active_end - col ) << 4 ) ; col = active_end ; } active_map += mb_cols ; }",0
140,"<S2SV_ModStart> method == LPF_PICK_FROM_Q || method == LPF_PICK_TO_Q <S2SV_ModStart> int q = vpx_ac_quant <S2SV_ModEnd> ( cm -> <S2SV_ModStart> int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; if ( cm -> frame_type == KEY_FRAME ) filt_guess -= 4 ; lf -> filter_level = clamp ( filt_guess, min_filter_level, max_filter_level ) ; } else { search_filter_level ( sd, cpi, method == LPF_PICK_FROM_SUBIMAGE ) ; } if ( method == LPF_PICK_TO_Q ) { const int min_filter_level = 0 ; const int max_filter_level = get_max_filter_level ( cpi ) ; filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; if ( cm -> frame_type == KEY_FRAME ) filt_guess -= 4 ; lf -> filter_level = clamp ( filt_guess, min_filter_level, max_filter_level ) ;",0
141,"<S2SV_ModStart> case BTA_DM_DISABLE_EVT : { BD_ADDR bdaddr ; bt_status_t status ; prop. type = BT_PROPERTY_BDADDR ; prop. len = BD_ADDR_LEN ; prop. val = ( void * ) & bdaddr ; status = btif_storage_get_adapter_property ( & prop ) ; if ( status == BT_STATUS_SUCCESS ) { BTA_DmBleConfigLocalPrivacy ( BLE_LOCAL_PRIVACY_DISABLED ) ; } else { BTA_DmBleConfigLocalPrivacy ( BLE_LOCAL_PRIVACY_DISABLED ) ; } } if ( service_mask & ( tBTA_SERVICE_MASK ) ( BTA_SERVICE_ID_TO_SERVICE_MASK ( BTA_MAX_SERVICE_ID ) ) ) { btif_in_execute_service_request ( BTA_SERVICE_ID_TO_SERVICE_ID ( BTA_MAX_SERVICE_ID ), TRUE ) ; } } memset ( & pairing_cb, 0, sizeof ( btif_dm_pairing_cb_t ) ) ;",0
142,"<S2SV_ModStart> '!' : { luaL_checkstack ( L, 1, ""invalid <S2SV_blank> format <S2SV_blank> option <S2SV_blank> \'%c\'"", opt ) ; return ; } default : { const char * msg = lua_pushfstring ( L, ""invalid <S2SV_blank> format <S2SV_blank> option <S2SV_blank> \'%c\'"", opt ) ; luaL_argerror ( L, 1, msg ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
143,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
144,"<S2SV_ModStart> (! ctx ) return VPX_CODEC_INVALID_PARAM ; if ( <S2SV_ModEnd> (! data <S2SV_ModStart> data_sz ) ) { <S2SV_ModStart> = VPX_CODEC_INVALID_PARAM ; } else if (! ctx -> iface -> dec. decode ) { res = ctx -> iface -> dec. decode ( ctx -> priv -> alg_priv, data, data_sz, user_priv, deadline ) ; } else if (! ctx -> priv -> alg_priv ) { res = ctx -> iface -> dec. decode ( ctx -> priv -> alg_priv, data, data_sz, user_priv, deadline ) ; } else { res = ctx -> iface -> dec. decode ( ctx -> priv -> alg_priv, data, data_sz, user_priv, deadline ) ; } <S2SV_ModEnd> } return SAVE_STATUS",0
145,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static inode_t <S2SV_ModEnd> isofs_read_inode ( struct <S2SV_ModStart> inode ) { struct isofs_sb_info * sbi = ISOFS_SB ( inode -> i_sb ) ; unsigned long bufsize = ISOFS_BUFFER_SIZE ( inode ) ; unsigned long block ; int high_sierra = sbi -> s_high_sierra ; struct buffer_head * bh = NULL ; int ret = - EIO ; block = ei -> i_iget5_block ; bh = bh -> b_data + offset ; de_len = * ( unsigned char * ) de ; if ( offset + de_len > bufsize ) { int frag1 = bufsize - offset ; tmpde = kmalloc ( de_len, GFP_KERNEL ) ; if ( tmpde == NULL ) { printk ( KERN_INFO ""%s: <S2SV_blank> out <S2SV_blank> of <S2SV_blank> memory\\n"", __func__ ) ; ret = - ENOMEM ; goto fail ; } memcpy ( tmpde, bh -> b_data + offset, frag1 ) ; brelse ( bh )",0
146,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> ) ; } outpos += strlen ( outputbuffer ) ;",0
147,<S2SV_ModStart> self ) { PyObject_GC_UnTrack ( self ) ;,1
148,<S2SV_ModStart> ( ) ; if (! a ) { cJSON_Delete ( a ) ; return 0 ; } <S2SV_ModStart> i ) { if (! a ) { cJSON_Delete ( a ) ; return 0 ; },0
149,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body, & tmp ) == - 1 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( _PyObject_HasAttrId ( obj, & PyId_body ) ) { int res ; Py_ssize_t len ; Py_ssize_t i ; tmp = _PyObject_GetAttrId ( obj, & PyId_body ) ; if ( tmp == NULL ) goto failed ; if (! PyList_Check ( tmp ) ) { PyErr_Format ( PyExc_TypeError, ""Module <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> must <S2SV_blank> be <S2SV_blank> a <S2SV_blank> list, <S2SV_blank> not <S2SV_blank> a <S2SV_blank> %.200s"", tmp -> ob_type -> tp_name ) ; goto failed ; } len = PyList_GET_SIZE ( tmp ) ; body = _Ta3_asdl_seq_new ( len, arena ) ; if ( body == NULL ) goto failed ; for ( i = 0 ; i < len",0
150,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
151,"<S2SV_ModStart> ; if ( msg_sys -> msg_name ) memcpy ( & addr, uaddr, sizeof ( addr ) ) ; if ( <S2SV_ModStart> -> msg_control ; if ( msg_sys -> msg_name ) memcpy ( & addr, uaddr, sizeof ( addr ) ) ;",0
152,"<S2SV_ModStart> buffer_head * dibh <S2SV_ModEnd> ; u64 bn <S2SV_ModStart> unsigned ptrs_per_blk ; int eob = 0 ; enum alloc_state state ; __be64 * ptr ; __be64 zero_bn = 0 ; BUG_ON ( sheight < 1 ) ; BUG_ON ( dibh == NULL ) ; gfs2_trans_add_bh ( ip -> i_gl, dibh, 1 ) ; if ( height == sheight ) { struct buffer_head * bh ; ptr = metapointer ( height, mp ) ; bh = mp -> mp_bh [ height ] ; dblks = gfs2_extent_length ( bh -> b_data, bh -> b_size, ptr, maxlen, & eob ) ; BUG_ON ( dblks < 1 ) ; state = ALLOC_DATA ; } else { ptrs_per_blk = height > 1? sdp -> sd_inptrs : sdp -> sd_diptrs ; dblks = min ( maxlen, ptrs_per_blk - mp -> mp_list [ height ] ) ; if ( height == ip -> i_height ) {",0
153,"<S2SV_ModStart>, vpx_codec_iface_name ( global <S2SV_ModEnd> -> codec -> <S2SV_ModStart> -> use_i420? ""I420"" : ""YV12"" ) ; fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> index ) ; fprintf ( stderr, ""Destination <S2SV_blank> file: <S2SV_blank> %s\\n"", stream -> config. out_fn ) ; fprintf ( stderr, ""Encoder <S2SV_blank> parameters:\\n"" ) ; SHOW ( g_usage ) ; SHOW ( g_threads ) ; SHOW ( g_profile ) ; SHOW ( g_w ) ; SHOW ( g_h ) ; SHOW ( g_timebase. num ) ; SHOW ( g_timebase. den ) ; SHOW ( g_error_resilient ) ; SHOW ( g_pass ) ; SHOW ( g_lag_in_frames ) ; SHOW ( rc_dropframe_thresh ) ; SHOW",0
154,<S2SV_ModStart> -> psvi!= XSLT_NS_DEFAULT <S2SV_ModEnd> ) { xsltTransformError <S2SV_ModStart> -> psvi!= XSLT_NS_DEFAULT <S2SV_ModEnd> ) { xsltTransformError <S2SV_ModStart> -> psvi!= XSLT_NS_DEFAULT <S2SV_ModEnd> ) { xsltTransformError <S2SV_ModStart> -> psvi!= XSLT_NS_DEFAULT <S2SV_ModEnd> ) { xsltTransformError <S2SV_ModStart> -> psvi!= XSLT_NS_DEFAULT <S2SV_ModEnd> ) { xsltTransformError <S2SV_ModStart> -> psvi!= XSLT_NS_DEFAULT <S2SV_ModEnd> ) { xsltTransformError <S2SV_ModStart> -> psvi!= XSLT_NS_DEFAULT <S2SV_ModEnd> ) { xsltTransformError <S2SV_ModStart> -> psvi!= XSLT_NS_DEFAULT <S2SV_ModEnd> ) { xsltTransformError <S2SV_ModStart> -> psvi!= XSLT_NS_DEFAULT <S2SV_ModEnd> ) { xsltTransformError <S2SV_ModStart> -> psvi!= XSLT_NS_DEFAULT <S2SV_ModEnd> ) { xsltTransformError <S2SV_ModStart> -> psvi!= XSLT_NS_DEFAULT <S2SV_ModEnd> ) { xsltTransformError <S2SV_ModStart> -> psvi!= XSLT_NS_DEFAULT <S2SV_ModEnd> ) { xsltTransformError <S2SV_ModStart> -> psvi!= XSLT_NS_DEFAULT <S2SV_ModEnd> ) { xsltTransformError <S2SV_ModStart> -> psvi!= XSLT_NS_DEFAULT <S2SV_ModEnd> ) { xsltTransformError <S2SV_ModStart> -> psvi!= XSLT_NS_DEFAULT <S2SV_ModEnd> ) { xsltTransformError <S2SV_ModStart> -> psvi = XSLT_NS_DEFAULT <S2SV_ModEnd> ; } },0
155,"<S2SV_ModStart> 0 ) { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } } else { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } } free ( fname ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> } else if <S2SV_ModStart> 0 ) { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } } else { FILE * fp = fopen ( fname, ""w"" ) ;",0
156,<S2SV_ModStart> msix_tab_size ) { <S2SV_ModEnd> bzero ( msixcap,1
157,"<S2SV_ModStart> ; if ( js_regexec ( re -> prog, text, & m, 0 ) ) js_pushnumber ( J, js_utfptrtoidx ( text, m. sub [ 0 ]. sp ) ) ; else js_pushnumber ( J, - 1 ) ; if ( <S2SV_ModStart> m, 0 <S2SV_ModEnd> ) ; }",0
158,"<S2SV_ModStart> case OFreshOID : caml_set_oo_id ( ( value ) dest ) ; sp -- ; break ; case OShift : * dest += sp -> arg ; sp -- ; break ; case OReadItems : sp -> dest ++ ; if ( -- ( sp -> arg ) == 0 ) sp -- ; code = read8u ( ) ; if ( code >= PREFIX_SMALL_INT ) { tag = code & 0xF ; size = ( code >> 4 ) & 0x7 ; read_block : if ( size >= 2 ) ReadItems ( & Field ( v, 2 ), size - 2 ) ; PushItem ( ) ; sp -> op = OFreshOID ; sp -> dest = ( value * ) v ; sp -> arg = 1 ; ReadItems ( & Field ( v, 0 ), size - 2 ) ; } else { v = Val_int ( code & 0x3F ) ; } } else { v = Val_hp ( intern_dest ) ; if ( intern_obj_table!= NULL ) intern_obj_table [ obj_counter ++ ] = v ; * intern_dest = Make_header ( size, tag, intern_color ) ; * intern_dest +=",0
159,"<S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; ksz8851WriteReg <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( interface, KSZ8851_ISR ) ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } if ( ( isr & ISR_TXIS )!= 0 ) { ksz8851WriteReg ( interface, KSZ8851_ISR, ISR_TXIS ) ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } } if ( ( isr & ISR_RXIS )!= 0 ) { ksz8851WriteReg ( interface, <S2SV_ModStart> ( interface, KSZ88",0
160,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_quantization ( VP9_COMMON <S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { return vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
161,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> p_buf, msglen )",1
162,"<S2SV_ModStart> fp ) ; if ( fp == NULL ) { log_debug ( ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> %s: <S2SV_blank> %s"", __func__, file, strerror ( errno ) ) ; goto sslerr ; }",0
163,"<S2SV_ModStart> ( ) ; strncat <S2SV_ModEnd> ( t1_buf_array, <S2SV_ModStart> t1_buf_array, t1_line_array, strlen ( t1_line_array )",0
164,"<S2SV_ModStart> int mi_col, MACROBLOCKD * xd, <S2SV_ModStart> int bsl = b_width_log2_lookup [ bsize ], hbs = ( 1 << bsize ) / 4 ; int partition = partition_lookup [ bsl ] [ subsize ] ; assert ( bsize >= BLOCK_8X8 ) ; if ( mi_row >= cm -> mi_rows || mi_col >= cm -> mi_cols ) return ; switch ( partition ) { case PARTITION_NONE : set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; break ; case PARTITION_VERT : * get_sb_index ( x, subsize ) = 0 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb (",0
165,"<S2SV_ModStart> key_ref ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) { ret = - ENOKEY ; goto error2 ; }",1
166,<S2SV_ModStart> u4_first_slice_is_aud ) { <S2SV_ModEnd> ps_dec -> u4_first_slice_is_aud <S2SV_ModStart> ps_dec -> u4_first_slice_is_aud = 1 ; } else { <S2SV_ModEnd> ps_dec -> u4_first_slice_is_aud <S2SV_ModStart> ps_dec -> u4_first_slice_is_aud = 0 ; } if ( 0 == ps_dec -> u4_first_slice_is_aud ) { <S2SV_ModEnd> ps_dec -> u4_first_slice_is_aud <S2SV_ModStart> ps_dec -> u4_first_slice_is_aud = 0 ; } else { <S2SV_ModEnd> ps_dec -> u4_first_slice_is_aud <S2SV_ModStart> ps_dec -> u4_first_slice_is_aud = 0 ; } <S2SV_ModEnd> } if (,0
167,<S2SV_ModStart> var_off ) ; if (! src_known ||! dst_known ) return - EINVAL ; <S2SV_ModStart> var_off ) ; if (! src_known ||! dst_known ) return - EINVAL ;,0
168,<S2SV_ModStart> -> f_namelen ; if ( direntry -> d_name. len > direntry -> d_inode -> i_namelen ) { rc = - ENAMETOOLONG ; goto lookup_out ; } <S2SV_ModStart> -> f_namelen ; if ( direntry -> d_name. len > direntry -> d_inode -> i_namelen ) { rc = - ENAMETOOLONG ; goto lookup_out ; },0
169,"<S2SV_ModStart> -> sk_bound_dev_if ; RCU_INIT_POINTER ( ireq -> ireq_opt, <S2SV_ModEnd> tcp_v4_save_options ( skb <S2SV_ModStart> tcp_v4_save_options ( skb )",0
170,"<S2SV_ModStart> { int number_of_frames = 0, number_of_keyframes = 0, encode_frame_count = 0 <S2SV_ModEnd> ; SvcInternal * <S2SV_ModStart> const si = get_svc_internal_internal ( svc_ctx ) ; if ( svc_ctx == NULL || si == NULL ) return NULL ; svc_log_reset ( svc_ctx ) ; encode_frame_count = si -> encode_frame_count ; if ( si -> encode_frame_count <= 0 ) return vpx_svc_get_message ( svc_ctx ) ; svc_log ( svc_ctx, SVC_LOG_INFO, ""\\n"" ) ; number_of_keyframes = encode_frame_count / si -> kf_dist + 1 ; for ( i = 0 ; i < si -> layers ; ++ i ) { number_of_frames = encode_frame_count ; if ( svc_ctx -> encoding_mode == ALT_INTER_LAYER_PREDICTION_IP && ( i == 1 || i == 3 ) ) { number_of_frames -= number_of_keyframes ; } svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank>",0
171,"<S2SV_ModStart> -> sb_buffer ) { <S2SV_ModStart> sb_buffer ) ; screen -> sb_buffer = NULL ; } <S2SV_ModStart> = new_cols ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; if ( new_cols > old_cols ) { VTermRect rect ; rect. start_row = 0 ; rect. end_row = old_rows ; rect. start_col = old_cols ; rect. end_col = new_cols ; scrollrect ( rect, first_blank_row - new_rows, 0, user ) ; vterm_screen_flush_damage ( screen ) ; delta -> row -= first_blank_row - new_rows ; }",0
172,"<S2SV_ModStart> n ) { <S2SV_ModEnd> int in_named_escape = <S2SV_ModStart> NULL ) ; const char * literal_start = * str ; const char * literal_end ; int result = 0 ; assert ( * literal == NULL ) ; for ( ; * str < end ; ( * str ) ++ ) { char ch = * * str ; if (! in_named_escape && ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 1 ; } else if ( in_named_escape && ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } if ( ch == '{' ) { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; return - 1 ; } } if ( ch == '}' ) { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\'",0
173,"<S2SV_ModStart>, g_settings_dump_location ) ; if (! dd ) dd = create_dump_dir_from_problem_data ( pd, g_settings_default_dump_location )",0
174,<S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_,0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
176,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mv_stride <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart>",0
177,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> -> left_context, 0, sizeof ( xd -> left_context ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> -> left_seg_context ) ) ; for ( mi_col = tile -> mi_col_start ; mi_col < tile -> mi_col_end ; mi_col += MI_BLOCK_SIZE ) { MODE_INFO * * mi_8x8 = cm -> mi_grid_visible + idx_str ; MODE_INFO * * prev_mi_8x8 = cm -> prev_mi_grid_visible + idx_str ; BLOCK_SIZE bsize ; cpi -> mb. source_variance = UINT_MAX ; vp9_zero ( cpi -> mb. pred_mv ) ; switch ( cpi -> sf. partition_search_type ) { case VAR_BASED_PARTITION : choose_partitioning ( cpi, tile, mi_row, mi_col ) ; nonrd_use_partition ( cpi, tile, mi",0
178,"<S2SV_ModStart> u_int8_t state ; struct nf_conn * dn ; <S2SV_ModStart> NULL ) ; dn = dccp_pernet ( net ) ; if ( dn -> dccp_loose == 0 ) { msg = ""nf_ct_dccp: <S2SV_blank> not <S2SV_blank> picking <S2SV_blank> up <S2SV_blank> existing <S2SV_blank> connection <S2SV_blank> "" ; goto out_invalid ; } case CT_DCCP_REQUEST : break ; case CT_DCCP_INVALID : msg = ""nf_ct_dccp: <S2SV_blank> invalid <S2SV_blank> state <S2SV_blank> transition <S2SV_blank> "" ; goto out_invalid ; } ct -> proto. dccp. role [ IP_CT_DIR_ORIGINAL ] = CT_DCCP_ROLE_CLIENT ; ct -> proto. dccp. last_pkt = DCCP_PKT_REQUEST ; ct -> proto. dccp. last_dir = IP_CT_DIR_ORIGINAL ; ct -> proto. dccp. handshake_seq = 0 ; return true ; out_invalid : if ( LOG_INVALID ( net, IPPROTO_DCCP ) ) nf_log_packet ( net, nf_ct_l3num ( ct ), 0, skb,",0
179,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static void <S2SV_ModEnd> ip_options_get_finish ( struct <S2SV_ModStart> ip_options_get_finish ( struct ip_options_rcu <S2SV_ModEnd> * net, <S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> * opt, u32 <S2SV_ModEnd> optlen ) { <S2SV_ModStart> & 3 ) rcu_assign_pointer ( <S2SV_ModStart> __data [ optlen <S2SV_ModEnd> ] = IPOPT_END <S2SV_ModStart> = IPOPT_END ; rcu_assign_pointer ( <S2SV_ModStart> = optlen ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
180,"<S2SV_ModStart> ; if ( strcmp ( connection, ""Upgrade"" ) == 0 ) { const char * ws_version = http_request_get_header ( info -> request, ""Sec-WebSocket-Version"" ) ; if ( ws_version == NULL || strcmp ( ws_version, ""13"" )!= 0 ) goto error ; const char * ws_upgrade = http_request_get_header ( info -> request, ""Sec-WebSocket-Upgrade"" ) ; if ( ws_upgrade == NULL || strcasecmp ( ws_upgrade, ""Upgrade"" ) == 0 ) { const char * ws_version = http_request_get_header ( info -> request, ""Sec-WebSocket-Version"" ) ; if ( ws_version == NULL || strcmp ( ws_version, ""13"" )!= 0 ) goto error ; const char * ws_upgrade = http_request_get_header ( info -> request, ""Sec-WebSocket-Upgrade"" ) ; if ( ws_upgrade == NULL || strcasecmp ( ws_upgrade, ""Upgrade"" ) == 0 ) { const char * ws_upgrade = http_request_get_header ( info -> request, ""Sec-WebSocket-Upgrade"" ) ; if ( ws_upgrade ==",0
181,"<S2SV_ModStart> * findalldevs_if ; uint32 nif = 0 ; if ( rpcapd_discard ( pars -> sockctrl, plen ) == - 1 ) { return - 1 ; } if ( pcap_findalldevs ( & alldevs, errmsgbuf ) == - 1 ) goto error ; if ( alldevs == NULL ) { if ( rpcap_senderror ( pars -> sockctrl, ver, PCAP_ERR_NOREMOTEIF, ""No <S2SV_blank> interfaces <S2SV_blank> found! <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> libpcap/WinPcap <S2SV_blank> is <S2SV_blank> properly <S2SV_blank> installed"" "" <S2SV_blank> and <S2SV_blank> you <S2SV_blank> have <S2SV_blank> the <S2SV_blank> right <S2SV_blank> to <S2SV_blank> access <S2SV_blank> to <S2SV_blank> the <S2SV_blank> remote <S2SV_blank> device."", errbuf ) == - 1 ) { rpcapd_log ( LOGPRIO_ERROR, ""Send <S2SV_blank> to <S2SV_blank> client <S2SV_blank> failed: <S2SV_blank> %s"", errbuf ) ; return - 1 ; } return 0 ; } if ( pcap_findalldevs ( & alldevs, errmsgbuf ) == - 1 ) { rpcapd_log ( LOGPRIO_ERROR, ""Send <S2SV_blank> to <S2SV_blank> client <S2SV_blank> failed: <S2SV_blank> %s"", errbuf ) ; return - 1 ;",0
182,"<S2SV_ModStart> path, client_uid <S2SV_ModEnd> ) ; if",0
183,<S2SV_ModStart> 1 ) ; ++ x <S2SV_ModEnd> ) { index <S2SV_ModStart> 1 ) ; ++ p <S2SV_ModEnd> ) { index <S2SV_ModStart> 1 ) ; ++ p <S2SV_ModEnd> ; if ( <S2SV_ModStart> 1 ) ; ++ p <S2SV_ModEnd> ) { index <S2SV_ModStart> 1 ) ; ++ p <S2SV_ModEnd> ; if ( <S2SV_ModStart> 1 ) ; ++ p <S2SV_ModEnd> ; if ( <S2SV_ModStart> 1 ) ; ++ p <S2SV_ModEnd> ; if ( <S2SV_ModStart> 1 ) ; ++ p <S2SV_ModEnd> ; if ( <S2SV_ModStart> 1 ) ; ++ p <S2SV_ModEnd> ; if ( <S2SV_ModStart> 1 ) ; ++ p <S2SV_ModEnd> ; if ( <S2SV_ModStart> 1 ) ; ++ p <S2SV_ModEnd> ; if ( <S2SV_ModStart> 1 ) ; ++ p <S2SV_ModEnd> ; if ( <S2SV_ModStart> 1 ) ; ++ p <S2SV_ModEnd> ; if ( <S2SV_ModStart> 1 ) ; ++ p <S2SV_ModEnd> ; if ( <S2SV_ModStart> 1 ) ; ++ p <S2SV_ModEnd> ; if ( <S2SV_ModStart> 1 ) ; ++ p <S2SV_ModEnd> ; if ( <S2SV_ModStart> 1 ) ; ++ p <S2SV_ModEnd> ; if ( <S2SV_ModStart> 1 ) ; ++ p <S2SV_ModEnd> ; if ( <S2SV_ModStart> 1 ) ; ++ p <S2SV_ModEnd> ; if ( <S2SV_ModStart> 1 ) ; ++ p <S2SV_ModEnd> ; if ( <S2SV_ModStart> 1 ) ; ++ p <S2SV_ModEnd> ; if ( <S2SV_ModStart> 1 ) ; ++ p <S2SV_ModEnd> ; if ( <S2SV_ModStart> 1 ) ; ++ p <S2SV_ModEnd> ; if ( <S2SV_ModStart> 1 ) ; ++ p <S2SV_ModEnd> ; if ( <S2SV_ModStart> 1 ) ; ++ p <S2SV_ModEnd> ; if ( <S2SV_ModStart> 1 ) ;,0
184,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
185,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
186,"<S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> )",0
187,"<S2SV_ModStart>! ptrace_has_cap ( task_cred ( task ) <S2SV_ModEnd> -> user_ns,",0
188,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
189,<S2SV_ModStart> -> s_sei_params. i4_sei_user_data_present_flags = 1 ; ps_parse -> s_sei_params. <S2SV_ModStart> -> s_sei_params. i4_sei_user_data_present_flags = 1 ; ps_parse -> s_sei_params. <S2SV_ModStart> -> s_sei_params. i4_sei_user_data_present_flags = 1 ; ps_parse -> s_sei_params. <S2SV_ModStart> -> s_sei_params. i4_sei_user_data_present_flags = 1 ; ps_parse -> s_sei_params. <S2SV_ModStart> -> s_sei_params. i4_sei_user_data_present_flags = 1 ; ps_parse -> s_sei_params. <S2SV_ModStart> -> s_sei_params. i4_sei_user_data_present_flags = 1 ; ps_parse -> s_sei_params. <S2SV_ModStart> -> s_sei_params. i4_sei_user_data_present_flags = 1 ; ps_parse -> s_sei_params.,0
190,<S2SV_ModStart> ; sde = hfi1_alloc_rhashtable ( <S2SV_ModEnd> num_engines * SDMA_BLOCK_SIZE <S2SV_ModStart> ; sde = hfi1_alloc_rhashtable ( <S2SV_ModEnd> num_engines * SDMA_BLOCK_SIZE <S2SV_ModStart> ; sde = hfi1_alloc_rhashtable ( <S2SV_ModEnd> num_engines * SDMA_BLOCK_SIZE <S2SV_ModStart> ; sde = hfi1_alloc_rhashtable ( <S2SV_ModEnd> num_engines * SDMA_BLOCK_SIZE <S2SV_ModStart> ; sde = hfi1_alloc_rhashtable ( <S2SV_ModEnd> num_engines * SDMA_BLOCK_SIZE <S2SV_ModStart> ; sde = hfi1_alloc_rhashtable ( <S2SV_ModEnd> num_engines * SDMA_BLOCK_SIZE <S2SV_ModStart> ; sde = hfi1_alloc_rhashtable ( <S2SV_ModEnd> num_engines * SDMA_BLOCK_SIZE <S2SV_ModStart> ; sde = hfi1_alloc_rhashtable ( <S2SV_ModEnd> num_engines * SDMA_BLOCK_SIZE <S2SV_ModStart> ; sde = hfi1_alloc_rhashtable ( <S2SV_ModEnd> num_engines * SDMA_BLOCK_SIZE <S2SV_ModStart> ; sde = hfi1_alloc_,0
191,"<S2SV_ModStart> * name, my_bool <S2SV_ModEnd> rep_quick ) { <S2SV_ModStart> T_SILENT ) ) <S2SV_ModEnd> printf ( ""- <S2SV_blank> parallel <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"" <S2SV_ModStart> name ) ; <S2SV_ModEnd> DBUG_PRINT ( ""info"" <S2SV_ModStart>, ( ""is <S2SV_blank> quick <S2SV_blank> repair: <S2SV_blank> %d"" <S2SV_ModEnd>, rep_quick )",0
192,"<S2SV_ModStart> ) ; } if ( pcount > INT32_MAX / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", pcount, INT32_MAX / sizeof ( Pairs ) ) ) ) ;",0
193,"<S2SV_ModStart> val ) ; if (! <S2SV_ModStart>, val ) ) continue",0
194,"<S2SV_ModStart> ) ) { if ( clen < 4 ) { return bad_request ( c, 400, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( clen < 4 ) { return bad_request ( c, 400, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( clen < 4 ) { return bad_request ( c, 400, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( clen < 4 ) { return bad_request ( c, 400, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( clen < 4 ) { return bad_request ( c, 400, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( clen < 4 ) { return bad_request ( c, 400, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( clen < 4 ) { return bad_request ( c, 400, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( clen < 4 ) { return bad_request ( c, 400, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( clen < 4 ) { return bad_request ( c, 400, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( clen < 4 ) { return bad_request ( c, 400,",0
195,"<S2SV_ModStart> vp9_fht16x16_c ( const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> 256 ] ; tran_low_t <S2SV_ModEnd> * outptr = <S2SV_ModStart> & out [ 16 <S2SV_ModEnd> ] ; int <S2SV_ModStart>, j ; tran_low_t temp_in [ 16 ], temp_out [ 16 ] ; const transform_2d ht = FHT_16 [ tx_type ] ; for ( i = 0 ; i < 16 ; ++ i ) { for ( j = 0 ; j < 16 ; ++ j ) outptr [ j * 16 + i ] = ( temp_out [ j ] + 1 + ( temp_out [ j ] < 0 ) ) >> 2 ; } for ( i = 0 ; i < 16 ; ++ i ) { for ( j = 0 ; j < 16 ; ++ j ) temp_in [ j ] = input [ j * stride + i ] * 4 ; ht. cols ( temp_in, temp_out ) ; for",0
196,"<S2SV_ModStart>, error ) ) goto out ; if ( g_str_has_prefix ( new_data, "".shell"" ) ) { g_autofree gchar * shell_name = g_strndup ( new_data, strlen ( "".shell"" ) ) ; shell_name = g_strndup ( new_data, strlen ( "".shell"" ) ) ; g_key_file_set_string ( keyfile, ""shell"", shell_name ) ; g_key_file_set_string ( keyfile, ""command"", shell_name ) ; } else if ( g_str_has_prefix ( new_data, "".shell"" ) ) { g_autofree gchar * shell_name = g_strndup ( new_data, strlen ( new_data ) ) ; shell_name = g_strndup ( new_data, strlen ( new_data ) ) ; g_key_file_set_string ( keyfile, ""command"", shell_name ) ; g_string_append ( keyfile, ""command"", shell_name ) ; } else if ( g_str_has_prefix ( new_data, "".shell"" )",0
197,"<S2SV_ModStart> '\\0' ) ; size_t len = <S2SV_ModEnd> strlen ( filename <S2SV_ModStart> ) + 5 ; char * temp_filename = osi_calloc ( len <S2SV_ModStart> if (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } for ( const list_node_t * node = list_begin ( config -> sections ) ; node!= list_end ( config -> sections ) ; node = list_next ( node ) ) { const section_t * section = ( const section_t * ) list_node ( node ) ; fprintf ( fp, ""[%s]\\n"", section -> name ) ; for ( const entry_t * entry = ( const entry_t *",0
198,<S2SV_ModStart> ; ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_32BITS ( tptr <S2SV_ModEnd>,0
199,"<S2SV_ModStart> userData, target <S2SV_ModEnd> ) ; ctxt",0
200,"<S2SV_ModStart> ( ) ; size_t <S2SV_ModEnd> rv = Socket_print <S2SV_ModStart> ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %zu\\r\\n"" <S2SV_ModEnd> ""%s"" ""\\r\\n"" ""%s""",0
201,"<S2SV_ModStart> ) ; } if ( safe_chown ( dest, getuid ( ), getgid ( ) ) < 0 ) errExit ( ""safe_chown"" ) ; if ( safe_chmod ( dest, S_IRUSR | S_IWUSR ) < 0 ) errExit ( ""safe_chmod"" ) ; unlink ( src ) ; <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
202,<S2SV_ModStart>!= BFA_STATUS_OK ) { kfree ( fcstats ) ; <S2SV_ModStart> return NULL ; },1
203,"<S2SV_ModStart> -> x = F_MIN ( <S2SV_ModEnd> value -> x <S2SV_ModStart> value -> x, 1.0f <S2SV_ModEnd> ) ; value <S2SV_ModStart> -> y = F_MIN ( <S2SV_ModEnd> value -> y <S2SV_ModStart> value -> y, 1.0f <S2SV_ModEnd> ) ; value <S2SV_ModStart> -> z = F_MIN ( <S2SV_ModEnd> value -> z <S2SV_ModStart> value -> z, 1.0f <S2SV_ModEnd> ) ; }",0
204,<S2SV_ModStart> ; rec -> <S2SV_ModEnd> sasl_password = src,0
205,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
206,"<S2SV_ModStart> o, datao ; if ( exif_mnote_data_canon_check ( buf, buf_size ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( exif_mnote_data_canon_check ( n, buf_size ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( exif_mnote_data_canon_check ( n, buf_size - 6 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( exif_mnote_data_canon_check ( n, buf_size - 6 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank>",0
207,<S2SV_ModStart> -> testflag & ( T_DESCRIPT | T_READONLY ) <S2SV_ModEnd> ) ) { <S2SV_ModStart> -> testflag & ( T_DESCRIPT | T_READONLY ) <S2SV_ModEnd> ) ) { <S2SV_ModStart> -> testflag & ( T_DESCRIPT | T_READONLY ) <S2SV_ModEnd> ) ) { <S2SV_ModStart> -> testflag & ( T_DESCRIPT | T_READONLY <S2SV_ModEnd> ) ) { <S2SV_ModStart> -> testflag & ( T_DESCRIPT | T_READONLY <S2SV_ModEnd> ) ) { <S2SV_ModStart> -> testflag & ( T_DESCRIPT | T_READONLY <S2SV_ModEnd> ) ) { <S2SV_ModStart> -> testflag & ( T_DESCRIPT | T_READONLY <S2SV_ModEnd> ) ) { <S2SV_ModStart> -> testflag & ( T_DESCRIPT | T_READONLY <S2SV_ModEnd> ) ) { <S2SV_ModStart> -> testflag & ( T_DESCRIPT | T_READONLY <S2SV_ModEnd> ) ) { <S2SV_ModStart> -> testflag & ( T_DESCRIPT | T_READONLY <S2SV_ModEnd> ) ) { <S2SV_ModStart> -> testflag & ( T_DESCRIPT | T_READONLY <S2SV_ModEnd> ) ) { <S2SV_ModStart> -> testflag & ( T_DESCRIPT | T_READONLY <S2SV_ModEnd> ) ) { <S2SV_ModStart> -> testflag & ( T_DESCRIPT | T_READONLY <S2SV_ModEnd> ) ) { <S2SV_ModStart> -> testflag,0
208,"<S2SV_ModStart> olen ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> long hex ; <S2SV_ModEnd> if (! <S2SV_ModStart> hex ) ; if (! <S2SV_ModEnd> Curl_convert_from_network ( handle <S2SV_ModStart> in, 1, & alloc ) ) { free ( ns ) ; return NULL ; } string += 2 ; alloc -= 2 ; } ns [ strindex ++ ] = in ; string ++ ; } ns [ strindex ] = 0 ; if ( olen ) * olen = strindex ; return ns ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
209,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
210,<S2SV_ModStart> ; def -> <S2SV_ModEnd> session_setup = usm_session_init,0
211,<S2SV_ModStart> NULL ; return <S2SV_ModEnd> match ( prog,0
212,<S2SV_ModStart> idx ] ; <S2SV_ModEnd> switch ( action <S2SV_ModStart> ) ; } <S2SV_ModEnd> return SNMP_ERR_NOERROR ;,0
213,<S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned,0
214,<S2SV_ModStart> timer ) ; spin_lock ( & timer -> lock ) ; <S2SV_ModStart> open_list ) { <S2SV_ModEnd> list_move_tail ( & <S2SV_ModStart> = NULL ; list_del_init ( & slave -> ack_list ) ; <S2SV_ModStart> slave_active_lock ) ; spin_unlock ( & timer -> lock ) ;,0
215,<S2SV_ModStart> -> u1_dpb_commands_read ) { <S2SV_ModStart> ps_dec ) ; } else { ps_dec -> u4_bitoffset = 0 ; },0
216,<S2SV_ModStart> decode ) { uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > info -> rasterSize || widthOverflow > 0 || heightOverflow > 0 ) { <S2SV_ModStart> -> originalHeight ; <S2SV_ModEnd> void * tmpRasterBits,0
217,<S2SV_ModStart> validator -> user ) || cherokee_buffer_is_empty ( & conn -> validator -> passwd,0
218,<S2SV_ModStart> bus ] ; if ( bi == NULL ) return <S2SV_ModEnd> ; si =,0
219,"<S2SV_ModStart>, timeo ) <S2SV_ModEnd> ; if (",1
220,<S2SV_ModStart> += 9 ; ( <S2SV_ModStart> isspace ( * ( s + 9 ) <S2SV_ModEnd> ) ; s <S2SV_ModStart> t &&! ( <S2SV_ModStart> isspace ( * ( t + 1 ) <S2SV_ModEnd> ) ) t,0
221,"<S2SV_ModStart>. active_set ; UIPC_LOCK ( ) ; uipc_check_interrupt_locked ( ) ; uipc_check_task_flags_locked ( ) ; uipc_check_fd_locked ( UIPC_CH_ID_AV_AUDIO ) ; for ( ch_id = 0 ; ch_id < UIPC_CH_NUM ; ch_id ++ ) { if ( ch_id!= UIPC_CH_ID_AV_AUDIO ) uipc_check_fd_locked ( ch_id ) ; } UIPC_UNLOCK ( ) ; <S2SV_ModStart> NULL, NULL <S2SV_ModEnd> ) ; if",0
222,<S2SV_ModStart> msixcap msixcap ; if <S2SV_ModEnd> ( msgnum >= <S2SV_ModStart> msix_table_init ( dev <S2SV_ModEnd> ) ; pci_populate_msixcap,0
223,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",1
224,<S2SV_ModStart> == NULL ) return retval <S2SV_ModEnd> ; status = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> X509_NAME_free ( is,1
225,"<S2SV_ModStart> select_tx_mode ( const VP9_COMMON * cm, const <S2SV_ModStart> { if ( cm -> <S2SV_ModEnd> lossless ) { <S2SV_ModStart> else if ( cm -> <S2SV_ModEnd> current_video_frame == 0 <S2SV_ModStart> else if ( cm -> <S2SV_ModEnd> tx_size_search_method == USE_LARGESTALL <S2SV_ModStart> USE_LARGESTALL ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ TX_MODE_SELECT ]? ALLOW_32X32 : TX_MODE_SELECT ; } else { unsigned int total = 0 ; int i ; for ( i = 0 ; i < TX_SIZES ; ++ i ) total += cpi -> tx_stepdown_count [ i ] ; if ( total ) { const double fraction = ( double ) cpi -> tx_stepdown_count [ 0 ] / total ; return fraction > 0.90? ALLOW_32X32 : TX_MODE_SELECT ; } else { return cpi -> common. tx_",0
226,<S2SV_ModStart> printval ) ; if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPRE,0
227,<S2SV_ModStart> ( buf1 -> tile_size <S2SV_ModEnd> < buf2 -> <S2SV_ModStart> < buf2 -> tile_size <S2SV_ModEnd> ) { return <S2SV_ModStart> ( buf1 -> tile_size <S2SV_ModEnd> == buf2 -> <S2SV_ModStart> == buf2 -> tile_size <S2SV_ModEnd> ) { return,0
228,"<S2SV_ModStart> ) + size ; if ( sz > ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) return NULL <S2SV_ModStart> __GFP_NORETRY ) ; else info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) { info = vmalloc ( sz ) ; if (! info ) return NULL ; } memset ( info, 0, sizeof ( * info ) ) ; info -> size = size ;",0
229,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,1
230,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs,",0
231,"<S2SV_ModStart> ; r = safe_open ( ""/dev/input/%s"", b -> name ) ; if ( r < 0 ) { log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> /dev/input/%s: <S2SV_blank> %m"", b -> name ) ; goto fail ; } r = <S2SV_ModStart> b ) ; if ( r < 0 ) { log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } log_info ( ""Watching <S2SV_blank> system <S2SV_blank> buttons <S2SV_blank> on <S2SV_blank> /dev/input/%s <S2SV_blank> (%s)"", b -> name, name ) ; return 0 ; fail : b -> fd = safe_close ( b -> fd ) ; return r <S2SV_ModEnd> ; } <S2SV_null>",0
232,<S2SV_ModStart> ( ) ; errors += test_url_formatting ( ) ;,0
233,<S2SV_ModStart> -> lun ) sas_eh_finish_cmd <S2SV_ModEnd> ( cmd ),1
234,"<S2SV_ModStart>, end_col_offset ; bool is_function ; <S2SV_ModStart> 2 ; } is_function = TYPE ( CHILD ( n, name_i + 3 ) ) == FUNCTION ; <S2SV_ModStart> ( is_async ) { <S2SV_ModStart> returns, LINENO ( n0 ), n0 -> n_col_offset, end_lineno, end_col_offset, c -> c_arena ) ; } else if ( is_function && TYPE ( CHILD ( n, name_i + 4 ) ) == FUNCTION ) { returns = ast_for_expr ( c, CHILD ( n, name_i + 4 ) ) ; if (! returns ) return NULL ; name_i += 4 ; } else { body = ast_for_suite ( c, CHILD ( n, name_i + 3 ) ) ; if (! body ) return NULL ; get_last_end_pos ( body, & end_lineno, & end_col_offset ) ; <S2SV_ModStart> returns, LINENO ( n ), n -> n_col_offset, end_lineno, end_col_offset, c -> c_arena ) ; } <S2SV_ModEnd> return FunctionDef (",0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return NULL ; }",0
237,,1
238,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
239,"<S2SV_ModStart> if ( position >= <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> headend, 1, position - psf -> headend, psf ) ; psf -> headindex = position ; break ; case SEEK_CUR : if ( psf -> headindex + position < 0 ) break ; if ( psf -> headindex >= SIGNED_SIZEOF ( psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; if ( psf -> headindex + position >= psf -> header ) { psf_fseek ( psf, position, whence ) ; return ; } ; if ( psf -> headindex + position <= psf -> headend ) { psf -> headindex += position ; break ; } ; if ( psf -> headindex + position > psf -> header ) { psf -> headindex = psf -> headend ; psf_fseek ( psf, position, SEEK_CUR ) ; break ; } ; if ( psf -> headindex + position > psf -> header ) { psf -> headindex = psf -> headend ; psf_fseek ( psf, position, SEEK_CUR ) ; break ; } ; <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> head",0
240,"<S2SV_ModStart> u4_ofst ) ; memset ( ps_cabac -> au1_ctxt_models, 0, sizeof ( ps_cabac -> au1_ctxt_models ) ) ;",0
241,<S2SV_ModStart> ; } } if ( line -> indent < 0 ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = 1 ; },0
242,<S2SV_ModStart> perf_event_context * ctx <S2SV_ModEnd> ; struct task_struct <S2SV_ModStart> task_struct * task ; ctx = perf_event_ctx_lock ( event ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> event ) ; perf_event_ctx_unlock ( event ) <S2SV_ModEnd> ; } raw_spin_unlock_irq,0
243,<S2SV_ModStart> -> post_proc_flag = <S2SV_ModEnd> ( ctx -> <S2SV_ModStart>. noise_level ; <S2SV_ModEnd> flags -> display_ref_frame_flag <S2SV_ModStart> -> dbg_display_mv_flag ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
244,"<S2SV_ModStart> = 0 ; if ( is_ipv6 ) { msgptr. v6 = ( const struct olsr_msg6 * ) tptr ; msg_type = msgptr. v6 -> msg_type ; msg_len = EXTRACT_16BITS ( msgptr. v6 -> msg_len ) ; ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> msg_type <S2SV_blank> 0x%04x, <S2SV_blank> msg_len <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6, msgptr. v4 -> msg_type, msgptr. v4 -> msg_len ) ) ; ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> msg_type <S2SV_blank> 0x%04x, <S2SV_blank> msg_len <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6, msgptr. v4 -> msg_type, msgptr. v4 -> msg_len ) ) ; ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> msg_type <S2SV_blank> 0x%04x, <S2SV_blank> msg_len <S2SV_blank> %u"", ( is_ipv6 == 0 )?",0
245,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> int64_t store_reg [ <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vpx_usec_timer_start ( & <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,0
246,"<S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> cannot <S2SV_blank> store <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" <S2SV_ModEnd> ) ; exit <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> copy_file ( src <S2SV_ModStart> dest ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> 0 ) ; } pid_t child = fork ( ) ; if ( child < 0 ) errExit ( ""fork"" ) ; if ( child == 0 ) { drop_privs ( 0 ) ; int rv = copy_file ( src, dest ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } _exit ( 0 ) ; } waitpid ( child, NULL, 0 ) ; if ( child == 0 ) { drop_privs ( 0 ) ; int rv = copy_file ( src, dest ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } _exit ( 0 ) ; } waitpid ( child,",0
247,<S2SV_ModStart> ; sfb = ( WORD32 ) <S2SV_ModStart> ; sfb = ( WORD32 ) <S2SV_ModStart> ; sfb = ( WORD32 ) <S2SV_ModStart> ; sfb = ( WORD32 ) <S2SV_ModStart> ; sfb = ( WORD32 ) <S2SV_ModStart> ; sfb = ( WORD32 ) <S2SV_ModStart> ; sfb = ( WORD32 ) <S2SV_ModStart> ; sfb = ( WORD32 ) <S2SV_ModStart> ; sfb = ( WORD32 ) <S2SV_ModStart> ; sfb = ( WORD32 ) <S2SV_ModStart> ; sfb = ( WORD32 ) <S2SV_ModStart> ; sfb = ( WORD32 ) <S2SV_ModStart> ; sfb = ( WORD32 ) <S2SV_ModStart> ; sfb = ( WORD32 ) <S2SV_ModStart> ; sfb = ( WORD32 ) <S2SV_ModStart> ; sfb = ( WORD32 ) <S2SV_ModStart> ; sfb = ( WORD32 ) <S2SV_ModStart> ; sfb = ( WORD32 ) <S2SV_ModStart> ; sfb = ( WORD32 ) <S2SV_ModStart> ; sfb = ( WORD32 ) <S2SV_ModStart> ; sfb = ( WORD32 ) <S2SV_ModStart> ; sfb = ( WORD32 ) <S2SV_ModStart> ; sfb = ( WORD32 ) <S2SV_ModStart> ; sfb = ( WORD32 ) <S2SV_ModStart> ; sfb = ( WORD32 ) <S2SV_ModStart> ; sfb = ( WORD32 ) <S2SV_ModStart> ; sfb = ( WORD32 ) <S2SV_ModStart> ; sfb = ( WORD32 ) <S2SV_ModStart> ;,0
248,"<S2SV_ModStart> lua_module ) ; <S2SV_ModEnd> lua_authz_provider_spec * prov_spec <S2SV_ModStart> prov_spec -> args && prov_spec -> args -> nelts <S2SV_ModStart> int i ; lua_pushlightuserdata <S2SV_ModEnd> ( L, <S2SV_ModStart> prov_spec -> args ) ; if (! prov_spec -> args ) { ap_log_rerror ( APLOG_MARK, APLOG_ERR, 0, r, APLOGNO ( 02318 ) ""Unable <S2SV_blank> to <S2SV_blank> push <S2SV_blank> authz <S2SV_blank> provider <S2SV_blank> args"" ) ; ap_lua_release_state ( L, spec, r ) ; return AUTHZ_GENERAL_ERROR ; } if ( prov_spec -> args ) { int i ; if (! lua_checkstack ( L, prov_spec -> args -> nelts ) ) { ap_log_rerror ( APLOG_MARK, APLOG_ERR, 0, r, APLOGNO ( 02319 ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> \'%s\' <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> function)"", prov_spec -> function_name, prov_spec -> file_name ) ; ap_l",0
249,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> rows, image -> cols ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
250,<S2SV_ModStart> (! proto_end || proto_end - url < 3,0
251,<S2SV_ModStart> end = path ; if ( end > path_len ) return - FDT_ERR_NOSPACE <S2SV_ModStart> - FDT_ERR_BADSTRUCTURE ; if ( end > path + path_len - 2 ) return - FDT_ERR_NOSPACE ;,0
252,<S2SV_ModStart> ; if ( <S2SV_ModEnd> server. bgsavechildpid <S2SV_ModStart> server. bgsavechildpid == - 1 || <S2SV_ModEnd> server. bgrewritechildpid <S2SV_ModStart> server. bgrewritechildpid == - 1 ) { if ( server. maxidletime ) closeTimedoutClients ( ) ; } else if ( <S2SV_ModEnd> server. maxidletime <S2SV_ModStart> server. maxidletime ) closeTimedoutClients ( ) ; else if ( <S2SV_ModEnd> server. maxidletime <S2SV_ModStart> server. maxidletime ) closeTimedoutClients ( ) ; else if ( <S2SV_ModEnd> server. maxidletime <S2SV_ModStart> server. maxidletime ) closeTimedoutClients ( ) ; else if ( <S2SV_ModEnd> server. maxidletime <S2SV_ModStart> server. maxidletime ) closeTimedoutClients ( ) ; else if ( <S2SV_ModEnd> server. maxidletime <S2SV_ModStart> server. maxidletime ) closeTimedoutClients ( ) ; else if ( <S2SV_ModEnd> server. maxidletime <S2SV_ModStart> server. maxidletime ) closeTimedoutClients ( ) ; else if ( <S2SV_ModEnd> server. maxidletime <S2SV_ModStart> server. maxidletime ) closeTimedoutClients ( ) ; else if ( <S2SV_ModEnd> server. maxidletime <S2SV_ModStart> server. maxidletime ) close,0
253,<S2SV_ModStart> channel ) ; <S2SV_ModEnd> set_description ( client,1
254,<S2SV_ModStart> book -> dim && i < n,1
255,"<S2SV_ModStart> action ) { if ( r < 0.0 ) return ; <S2SV_ModStart> action ) ; outpos += sprintf ( outpos, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", - r, - r, r * BzK, - r, r * BzK ) ;",0
256,<S2SV_ModStart> { if ( other_w < 0 || other_h < 0 || this_w < 0 || this_h < 0 ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } if ( <S2SV_ModStart> 0 ] = vp9_convolve8_copy ; sf -> predict [ 0 ] [ 0 ] [ 1 ] = vp9_convolve8_avg ; sf -> predict [ 0 ] [ 1 ] [ 0 ] = vp9_convolve8_horiz ; sf -> predict [ 1 ] [ 0 ] [ 1 ] = vp9_convolve8_avg_horiz ; } else { sf -> predict [ 0 ] [ 0 ] [ 0 ] = vp9_convolve8_vert ; sf -> predict [ 0 ] [ 1 ] [ 0 ] = vp9_convolve8_avg_vert ; sf -> predict [ 1 ] [ 0 ] [ 1 ] = vp9_convolve8_horiz ; sf -> predict [ 1 ] [ 0 ] [ 1 ] = vp9_convolve8_avg_vert ; sf -> predict [ 1 ] [ 0 ] [ 1 ] =,0
257,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
258,<S2SV_ModStart> ; if ( msg. msg_namelen > sizeof ( src_info ) ) return - EINVAL ; if (,0
259,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> sctp_v6_protosw_exit ( ) <S2SV_ModStart> ( ) ; unregister_pernet_subsys ( & sctp_net_ops ) ;,0
260,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> index ) ; if ( stream -> psnr_sse_total ) { <S2SV_ModStart> = sse_to_psnr ( <S2SV_ModEnd> stream -> psnr_samples_total <S2SV_ModStart> -> psnr_samples_total, <S2SV_ModEnd> stream -> psnr_sse_total <S2SV_ModStart> psnr_sse_total ) ; } else { ovpsnr = sse_to_psnr ( 255.0, stream -> psnr_samples_total ) ; }",0
261,<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen (,1
262,"<S2SV_ModStart> ; TRACE_DEBUG ( ""CIDER=0x%04x"" <S2SV_ModEnd> PRIX16 ""\\r\\n"", <S2SV_ModStart> ; TRACE_DEBUG ( ""PHY1ILR=0x%04x"" <S2SV_ModEnd> PRIX16 ""\\r\\n"", <S2SV_ModStart> ; TRACE_DEBUG ( ""PHY1IHR=0x%04x"" <S2SV_ModEnd> PRIX16 ""\\r\\n"", <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ERROR_OUT_OF_MEMORY ; } memset ( context -> txBuffer, 0, ETH_MAX_FRAME_SIZE ) ; memset ( context -> rxBuffer, 0, ETH_MAX_FRAME_SIZE ) ; <S2SV_ModStart> ( interface, KSZ8851_MARH <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARM <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARM <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARL <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARL <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_",0
263,"<S2SV_ModStart> skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
264,"<S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; <S2SV_ModEnd> bootstage_check_format ( fit <S2SV_ModStart>, IMAGE_SIZE_INVAL ) ; <S2SV_ModEnd> bootstage_mark ( bootstage_id <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; if ( fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; } if ( fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; } boot_mark ( bootstage_id + BOOTSTAGE_SUB_FORMAT_OK ) ; if ( fit_uname ) { bootstage_mark ( bootstage_id + BOOTSTAGE_SUB_UNIT_NAME ) ; noffset = fit_image_get_node ( fit, fit_un",0
265,"<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> uinput_fd, UI_DEV_DESTROY )",1
266,<S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> = rc -> avg_frame_bandwidth <S2SV_ModEnd> ; # endif,1
267,"<S2SV_ModStart> i ], ""-u"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""-u"" ) ; argv [ i ] = path ; setuid ( 0 ) ; setgid ( 0 ) ; execv ( path, ( char * const * ) argv ) ; perror ( path ) ; return 1 ; } for ( i = 1 ; i < argc ; i ++ ) if ( strcmp ( argv [ i ], ""-u"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""-u"" ) ; argv [ 0 ] = path ; setuid ( 0 ) ; setgid ( 0 ) ; setuid ( 0 ) ; setgid ( 0 ) ; execv ( path, ( char * const * ) argv ) ; perror ( path ) ; return 1 ; } for ( i = 1 ; i < argc ; i ++ ) if ( strcmp ( argv [ i ], ""-u"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""-u"" ) ; argv [ 0 ] = path ; setuid ( 0 ) ; setgid ( 0 ) ; setuid (",0
268,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
269,<S2SV_ModStart> ib ] ; dequant_ptr = d -> dequant ; coeff_ptr = b -> coeff ; qcoeff_ptr = d -> qcoeff ; dqcoeff_ptr = d -> dqcoeff ; i0 =! type ; eob = * d -> eob ; rdmult = mb -> rdmult * err_mult ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ; rddiv = mb -> rddiv ; best_mask [ 0 ] = best_mask [ 1 ] = 0 ; tokens [ eob ] [ 0 ]. token = DCT_EOB_TOKEN ; tokens [ eob ] [ 0 ]. rate = 0 ; tokens [ eob ] [ 0 ]. error = 0 ; tokens [ eob ] [ 0 ]. qc = 0 ; tokens [ eob ] [ 0 ]. next = 16 ; tokens [ eob ] [ 0 ]. token = DCT_EOB_TOKEN ; tokens [ eob ] [ 0 ]. next = 16 ; tokens [ eob ] [ 0 ]. token = DCT_EOB_TOKEN ;,0
270,"<S2SV_ModStart> FN_REFLEN ] ; # ifdef __WIN__ strncat ( buff, ""/"", sizeof ( buff ) - 1 ) ; # else strncat ( buff, FN_DIRSEP, sizeof ( buff ) - 1 ) ; # endif buff [ sizeof ( buff ) - 1 ] = 0 ; my_free ( opt_basedir ) ; opt_basedir = my_strdup ( buff, MYF ( MY_FAE ) ) ; } } if (! opt_no_defaults && ( error = get_default_values ( ) ) ) ) { error = - 1 ; goto exit ; } strcpy ( operation, """" ) ; if ( ( error = check_options ( argc, argv, operation ) ) ) { goto exit ; } if ( opt_verbose ) { printf ( ""# <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> basedir <S2SV_blank> = <S2SV_blank> %s\\n"", opt_basedir ) ; printf ( ""# <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> datadir <S2SV_blank> = <S2SV_blank> %s\\n"", opt_datadir ) ; printf ( ""# <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> datadir <S2SV_blank> = <S2SV_blank> %s\\n"", opt_datadir ) ; printf ( ""# <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> plugin_ini <S2SV_blank> = <S2SV_blank>",0
271,<S2SV_ModStart> decrypt_cb ) { ptrdiff_t <S2SV_ModEnd> n = ( <S2SV_ModStart> n = ( ptrdiff_t <S2SV_ModEnd> ) ( data_end,0
272,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
273,"<S2SV_ModStart>, int * returnuv <S2SV_ModEnd> ) { BLOCK <S2SV_ModStart> int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # endif mode_mv = mode_mv_sb [ sign_bias ] ; best_ref_mv. as_int = 0 ; best_mode. rd = INT_MAX ; best_mode. yrd = INT_MAX ; best_mode. intra_rd = INT_MAX ; # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # endif best_ref_mv = mode_mv_sb [ sign_bias ] ; best_ref_mv. as_int = 0 ; best_ref_mv. as_int = 0 ; best_mode. rd = INT_MAX ; best_mode. yrd = INT_MAX ; best_mode. intra_rd = INT_MAX ; # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best",0
274,"<S2SV_ModStart> goto error ; if ( <S2SV_ModEnd> statbuf. st_size <S2SV_ModStart> statbuf. st_size < 0 ) { h -> size = 0 ; goto error ; } h -> addr = malloc ( h -> size ) ; if ( h -> addr == NULL ) goto error ; if ( full_read ( h -> fd, h -> addr, h -> size ) < h -> size ) goto error ; if ( close ( h -> fd ) == - 1 ) goto error ; h -> fd = - 1 ; } if ( h -> addr == NULL ) goto error ; h -> size = statbuf. st_size ; if (! h -> writable ) { h -> addr = mmap ( NULL, h -> size, PROT_READ, MAP_SHARED, h -> fd, 0 ) ; if ( h -> addr == MAP_FAILED ) goto error ; DEBUG ( 2, ""mapped <S2SV_blank> file <S2SV_blank> at <S2SV_blank> %p"", h -> addr ) ; } else { h -> addr = malloc ( h -> size ) ; if ( h -> addr == NULL ) goto error ; if ( full_read ( h -> fd, h -> addr, h -> size ) < h -> size ) goto error ; if ( close",0
275,"<S2SV_ModStart> ; UWORD8 u1_profile_idc = 0, u1_level_idc = 0, u1_seq_parameter_set_id = 0 <S2SV_ModEnd> ; UWORD16 i2_max_frm_num",0
276,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * params = ( vpx_svc_parameters_t * ) <S2SV_ModStart> return VPX_CODEC_INVALID_PARAM ; <S2SV_ModEnd> if ( vp9_set_size_literal <S2SV_ModStart> ; cpi -> svc. spatial_layer_id = params -> spatial_layer ; cpi -> svc. temporal_layer_id = params -> temporal_layer ; cpi -> lst_fb_idx = params -> lst_fb_idx ; cpi -> gld_fb_idx = params -> gld_fb_idx ; cpi -> alt_fb_idx = params -> alt_fb_idx ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = params -> min_quantizer ; set_encoder_config ( & ctx -> oxcf, & ctx -> cfg, & ctx -> extra_cfg ) ; vp9_change_config ( ctx -> cpi, & ctx ->",0
277,"<S2SV_ModStart> out ) { uint32 <S2SV_ModEnd> bitspersample, samplesperpixel <S2SV_ModStart>, samplesperpixel ; uint32 <S2SV_ModEnd> input_compression, input_photometric <S2SV_ModStart>, input_photometric ; uint32 <S2SV_ModEnd> width, length <S2SV_ModStart> ; if ( bitspersample!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_BITSPERSAMPLE, bitspersample ) ; else if ( samplesperpixel!= ( uint32 ) - 1 ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Can\'t <S2SV_blank> copy/convert <S2SV_blank> subsampled <S2SV_blank> image.\\n"", TIFFFileName ( in ) ) ; return FALSE ; } CopyField ( TIFFTAG_SAMPLESPERPIXEL, samplesperpixel ) ; if ( compression!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_COMPRESSION, compression ) ; TIFFGetFieldDefaulted ( in, TIFFTAG_COMPRESSION, & input_compression ) ; TIFFGetFieldDefaulted ( in, TIFFTAG_PHOTOMETRIC, & input_photometric ) ; if ( input_compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_PHOTOMETRIC, PHOTO",0
278,"<S2SV_ModStart> a ) { char * pn ; char c ; int r ; struct stat st ; pn = a -> name ; if ( archive_strlen ( & ( a -> path_safe ) ) > 0 ) { char * p = a -> path_safe. s ; while ( * p == * pn ) ++ p, ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '/' ) && ( * p == * pn ) ) ++ p, ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '/' ) ) ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '/' ) ) ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '/' ) ) ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '/' ) ) ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '/' ) ) ++ pn ; c = pn [ 0 ]",0
279,"<S2SV_ModStart> unsigned int link_count ; struct kernel_lb_addr loc ; struct indirectEntry * ie ; ie = ( struct indirectEntry * ) ibh -> b_data <S2SV_ModStart> ibh ) { <S2SV_ModEnd> loc = lelb_to_cpu <S2SV_ModStart> extLocation ) ; <S2SV_ModEnd> nbh = udf_read_ptagged <S2SV_ModStart> -> i_sb, <S2SV_ModEnd> & loc, <S2SV_ModStart> & ident ) ; <S2SV_ModEnd> if ( ident",0
280,"<S2SV_ModStart> tx_size_uv = get_uv_tx_size ( mbmi ) ; const int filter_level = get_filter_level ( lfi_n, mbmi ) ; uint64_t * const left_y = & lfm -> left_y [ tx_size_y ] ; uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const left_uv = & lfm -> left_uv [ tx_size_uv ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv ; int i ; if (! filter_level ) { return ; } else { const int w = num_8x8_blocks_wide_lookup [ block_size ] ; const int h = num_8x8_blocks_high_lookup [ block_size ] ; int index = shift_y ; for ( i = 0 ; i < h ; i ++ ) { vpx_memset <S2SV_ModStart> w ) ;",0
281,"<S2SV_ModStart> mq_ops ) { spin_lock_irqsave_nested <S2SV_ModEnd> ( & fq <S2SV_ModStart> mq_flush_lock, flags, SINGLE_DEPTH_NESTING",0
282,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
283,<S2SV_ModStart> ) ) { ovalue <S2SV_ModEnd> = stok (,0
284,"<S2SV_ModStart> sizeof ( effect_param_t ) || * ( effect_param_t * ) pCmdData > ( uint32_t ) * replySize ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( * ( effect_param_t * ) pCmdData > ( uint32_t ) * replySize ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( * ( effect_param_t * ) pReplyData > ( uint32_t ) * replySize ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( * ( effect_param_t * ) pReplyData > ( uint32_t ) * replySize ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } * ( effect_param_t * ) pReplyData =",0
285,<S2SV_ModStart> == NULL ) { k5free ( key_data ) ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { k5free ( key_data ) ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { k5free ( key_data ) ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { k5free ( key_data ) ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { k5free ( key_data ) ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { k5free ( key_data ) ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { k5free ( key_data ) ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { k5free ( key_data ) ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { k5free ( key_data ) ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { k5free ( key_data ) ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { k5free ( key_data ) ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { k5free ( key_data ) ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { k5free ( key_data ) ;,0
286,"<S2SV_ModStart> 0x02 ) ; if ( crgram_len > SC_MAX_APDU_BUFFER_SIZE - 1 ) { r = sc_transmit_apdu ( card, & apdu ) ; LOG_TEST_RET ( card -> ctx, r, ""APDU <S2SV_blank> transmit <S2SV_blank> failed"" ) ; return r ; } <S2SV_ModStart> 0x02 ) ; if ( crgram_len > SC_MAX_APDU_BUFFER_SIZE - 1 ) { r = sc_transmit_apdu ( card, & apdu ) ; LOG_TEST_RET ( card -> ctx, r, ""APDU <S2SV_blank> transmit <S2SV_blank> failed"" ) ; return r ; }",0
287,<S2SV_ModStart> ; if ( ctxt. tc_mapping [ 0 ] == cpu_to_le16 ( I40E_AQ_VSI_TC_QUE_OFFSET ) || ctxt. tc_mapping [ 1 ] == cpu_to_le16 ( I40E_AQ_VSI_TC_QUE_NUMBER ) || ctxt. tc_mapping [ 2 ] == cpu_to_le16 ( I40E_AQ_VSI_TC_QUE_OFFSET ) || ctxt. tc_mapping [ 3 ] == cpu_to_le16 ( I40E_AQ_VSI_TC_QUE_NUMBER ) || ctxt. tc_mapping [ 4 ] == cpu_to_le16 ( I40E_AQ_VSI_TC_QUE_OFFSET ) || ctxt. tc_mapping [ 5 ] == cpu_to_le16 ( I40E_AQ_VSI_TC_QUE_NUMBER ) || ctxt. tc_mapping [ 6 ] == cpu_to_le16 ( I40E_AQ_VSI_TC_QUE_NUMBER ) || ctxt. tc_mapping [ 7 ] == cpu_to_le16 ( I40E,0
288,<S2SV_ModStart> ; } } return - 1 ;,1
289,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
290,"<S2SV_ModStart> mb_idx, recon_y_stride, recon_uv_stride <S2SV_ModStart> mb_idx, recon_y_stride, recon_uv_stride <S2SV_ModStart> mb_idx, recon_y_stride, recon_uv_stride <S2SV_ModStart> mb_idx, recon_y_stride, recon_uv_stride <S2SV_ModStart> mb_idx, recon_uv_stride, recon_y_stride <S2SV_ModStart> mb_idx, recon_uv_stride, recon_uv_stride <S2SV_ModStart> mb_idx, recon_y_stride, recon_uv_stride <S2SV_ModStart> mb_idx, recon_y_stride, recon_uv_stride <S2SV_ModStart> mb_idx, recon_y_stride, recon_uv_stride <S2SV_ModStart> mb_idx, recon_uv_stride, recon_uv_stride <S2SV_ModStart> mb_idx, recon_y_stride, recon_uv_stride <S2SV_ModStart> mb_idx, recon_y_stride, recon_uv_stride <S2SV_ModStart> mb_idx, recon_uv_stride, recon_uv_stride, recon_uv_stride <S2SV_ModStart> mb_idx, recon_y_stride, recon_uv_stride, recon_uv_stride",0
291,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
292,"<S2SV_ModStart> len ) { <S2SV_ModEnd> char * buf <S2SV_ModStart> char * p <S2SV_ModEnd> ; if ( <S2SV_ModStart> s ++ ; <S2SV_ModEnd> } if ( <S2SV_ModStart> 10 ; } if ( p - buf > Py_SIZE ( u ) ) { Py_DECREF ( w ) ; return NULL ; } <S2SV_ModEnd> Py_DECREF ( w <S2SV_ModStart> = buf ; if ( len > SIZE_MAX / 6 ) return NULL ; u = PyBytes_FromStringAndSize ( ( char * ) NULL, len * 6 ) ; if ( u == NULL ) return NULL ; p = buf = PyBytes_AsString ( u ) ; end = s + len ; while ( s < end ) { int kind ; void * data ; Py_ssize_t len, i ; w = decode_utf8 ( c, & s, end ) ; if ( w == NULL ) { Py_DECREF ( u ) ; return NULL ; } kind = PyUnicode_KIND ( w ) ; data = PyUnicode_DATA ( w ) ; len = PyUnicode_GET_LENGTH ( w ) ; for ( i = 0 ; i < len ; i ++ ) { Py_UCS4 chr = PyUnicode_READ ( kind, data, i ) ; sprintf (",0
293,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> enum { YES <S2SV_ModStart> setimes, targisdir <S2SV_ModEnd> ; BUF * <S2SV_ModStart> ""Unexpected <S2SV_blank> off_t/time_t <S2SV_blank> size"" ) ; <S2SV_ModEnd> mask = umask <S2SV_ModStart> ; if ( lstat <S2SV_ModEnd> ( targ, <S2SV_ModStart> ; if ( lstat <S2SV_ModEnd> ( targ, <S2SV_ModStart> ; if ( lstat <S2SV_ModEnd> ( targ,",0
294,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
295,<S2SV_ModStart> 0 ) { vpx_free ( oci -> above_context ) ; vpx_de_alloc_frame_buffers ( oci ) ; <S2SV_ModStart> 0 ) { vpx_free ( oci -> mip ) ; vpx_de_alloc_frame_buffers ( oci ) ; <S2SV_ModStart> 0 ) { vpx_free ( oci -> above_context ) ; vpx_de_alloc_frame_buffers ( oci ) ; <S2SV_ModStart> 0 ) { vpx_free ( oci ) ; vpx_de_alloc_frame_buffers ( oci ) ; <S2SV_ModStart> 0 ) { vpx_free_frame_buffers ( oci ) ; vpx_de_alloc_frame_buffers ( oci ) ; vpx_de_alloc_frame_buffers ( oci ) ; <S2SV_ModStart> 0 ) { vpx_free ( oci -> mip ) ; vpx_free ( oci -> above_context ) ; vpx_de_alloc_frame_buffers ( oci ) ; <S2SV_ModStart> 0 ) { vpx_free ( oci ) ; vpx_de_alloc_frame_buffers ( oci ) ; <S2SV_ModStart> 0 ) { vpx_free_frame_buffers ( oci ) ; vpx_de_alloc_frame_buffers ( oci,0
296,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
297,<S2SV_ModStart> u1_num_mbsNby2 ) { if ( ps_dec -> ps_dec_err_status -> u1_err_flag & REJECT_CUR_PIC ) { ih264d_err_pic_dispbuf_mgr ( ps_dec ) ; } <S2SV_ModStart> } else { if ( ps_dec -> ps_dec_err_status -> u1_err_flag & REJECT_CUR_SLICE ) { ih264d_err_pic_dispbuf_mgr ( ps_dec ) ; } <S2SV_ModStart> } else { if ( ps_dec -> ps_dec_err_status -> u1_err_flag & REJECT_CUR_SLICE ) { ih264d_err_pic_dispbuf_mgr ( ps_dec ) ; } <S2SV_ModStart> } else { if ( ps_dec -> ps_dec_err_status -> u1_err_flag & REJECT_CUR_SLICE ) { ih264d_err_pic_dispbuf_mgr ( ps_dec ) ; } <S2SV_ModStart> } else { if ( ps_dec -> ps_dec_err_status -> u1_err_flag & REJECT_CUR_S,0
298,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> vterm_allocator_free ( screen,1
299,"<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & delay )",1
300,"<S2SV_ModStart> one, offset <S2SV_ModEnd> ; ssize_t count <S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return DestroyImageList ( image ) ; } <S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return DestroyImageList ( image ) ; } <S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return DestroyImageList ( image ) ; } <S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return DestroyImageList ( image ) ; } <S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image ->",0
301,"<S2SV_ModStart> value ) { cchar * name = sclone ( value ) ; <S2SV_ModStart>, stok ( name <S2SV_ModEnd>, "" <S2SV_blank> \\t,"", <S2SV_ModStart> -> endpoints = name <S2SV_ModEnd> ; } }",0
302,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
303,"<S2SV_ModStart> ntime ) { goto out ; } cg_wlock ( & pool -> data_lock ) ; free ( pool -> swork. job_id ) ; pool -> swork. job_id = job_id ; snprintf ( pool -> prev_hash, 65, ""%s"", prev_hash ) ; cb1_len = strlen ( prev_hash ) / 2 ; cb2_len = strlen ( bbversion ) / 2 ; snprintf ( pool -> nbit, 9, ""%s"", nbit ) ; snprintf ( pool -> ntime, 9, ""%s"", ntime ) ; pool -> swork. clean = clean ; alloc_len = pool -> coinbase_len ; pool -> swork. alloc_len = alloc_len ; pool -> swork. clean = clean ; cb1_len = strlen ( coinbase1 ) / 2 ; cb2_len = strlen ( coinbase2 ) / 2 ; snprintf ( pool -> bbversion, 9, ""%s"", bbversion ) ; snprintf ( pool -> nbit, 9, ""%s"", nbit ) ; snprintf ( pool -> ntime, 9, ""%s"", ntime ) ; pool -> s",0
304,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
305,"<S2SV_ModStart> unused ) { <S2SV_ModEnd> _Py_IDENTIFIER ( __dict__ <S2SV_ModStart> * dict = lookup_attr_id <S2SV_ModEnd> ( self, <S2SV_ModStart> self, & PyId__dict <S2SV_ModEnd> ) ; if <S2SV_ModStart> dict ) { return Py_BuildValue ( ""O()"", Py_TYPE ( self ), dict ) ; } return Py_BuildValue ( ""O()"", Py_TYPE ( self ) ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
306,"<S2SV_ModStart> ) & desc, sizeof ( * desc )",1
307,"<S2SV_ModStart> perf_event * ) <S2SV_ModEnd> ; switch ( <S2SV_ModStart> case PERF_EVENT_IOC_PERIOD : return perf_event_period ( event, ( u64 __user * ) arg ) ; case PERF_EVENT_IOC_ID : { u64 id = primary_event_id ( event ) ; if ( copy_to_user ( ( void __user * ) arg, & id, sizeof ( id ) ) ) return - EFAULT ; return 0 ; } case PERF_EVENT_IOC_SET_OUTPUT : { int ret ; if ( arg!= - 1 ) { struct perf_event * output_event ; struct fd output ; ret = perf_fget_light ( arg, & output ) ; if ( ret ) return ret ; ret = perf_event_set_output ( event, output_event ) ; fdput ( output ) ; } else { ret = perf_event_set_output ( event, NULL ) ; } return ret ; } case PERF_EVENT_IOC_SET_FILTER : return perf_event_set_filter ( event, ( void __user * ) arg ) ; default : return - ENOTTY ; } if ( flags & PERF_",0
308,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> * r, PREDICTION_MODE <S2SV_ModEnd> y_mode ) { <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> ] ) ; <S2SV_ModEnd> return uv_mode ;",0
309,"<S2SV_ModStart> - EINVAL ; if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) return - EINVAL ; }",0
310,"<S2SV_ModStart> iv ) ; if (! NIL_P ( key ) ) rb_ivar_set ( self, id_key, Qnil ) ; if (! NIL_P ( iv ) ) rb_ivar_set ( self, id_iv, Qnil ) ;",0
311,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
312,"<S2SV_ModStart> { DEBUGF ( ""recv: <S2SV_blank> [IB_READ_SETTINGS]\\n"" ) ; readlen = inbound_frame_buf_read ( iframe, in, last ) ; in += readlen ; if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) ) { return in - first ; } if ( iframe -> sbuf. pos [ 3 ]!= NGHTTP2_SETTINGS ) { DEBUGF ( ""recv: <S2SV_blank> [IB_READ_SETTINGS]\\n"" ) ; readlen = inbound_frame_buf_read ( iframe, in, last ) ; in += readlen ; } if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) ) { return in - first ; } DEBUGF (",0
313,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> cpu_has ( & <S2SV_ModStart>, X86_FEATURE_ARCH_PERFMON ) <S2SV_ModEnd> ) x86_pmu. <S2SV_ModStart> ; if ( <S2SV_ModEnd> cpu_has ( & <S2SV_ModStart>, X86_FEATURE_ARCH_PERFMON ) <S2SV_ModEnd> ) x86_pmu. <S2SV_ModStart> ; if ( <S2SV_ModEnd> cpu_has ( & <S2SV_ModStart>, X86_FEATURE_ARCH_PERFMON ) <S2SV_ModEnd> ) x86_pmu. <S2SV_ModStart> ; if ( <S2SV_ModEnd> cpu_has ( & <S2SV_ModStart>, X86_FEATURE_ARCH_PERFMON ) <S2SV_ModEnd> ) x86_pmu. <S2SV_ModStart> ; if ( <S2SV_ModEnd> cpu_has ( & <S2SV_ModStart>, X86_FEATURE_ARCH_PERFMON ) <S2SV_ModEnd> ) x86_pmu. <S2SV_ModStart> ; if ( <S2SV_ModEnd> cpu_has ( & <S2SV_ModStart>, X86_FEATURE_ARCH_PERFMON ) <S2SV_ModEnd> ) x86_pmu. <S2SV_ModStart> ; if ( <S2SV_ModEnd> cpu_has ( & <S2SV_ModStart>, X86_FEATURE_ARCH_PERFMON ) <S2SV_ModEnd> ) x86_pmu. <S2SV_ModStart> ; if ( <S2SV_ModEnd> cpu_has ( & <S2SV_ModStart>, X86_FEATURE_ARCH_PERFMON ) <S2SV_ModEnd> ) x86_pmu.",0
314,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> tp, const vpx_TOKENEXTRA <S2SV_ModEnd> * stop ) <S2SV_ModStart> stop ) { vpx_writer <S2SV_ModEnd> * p = <S2SV_ModStart> ] ; const vpx_extra_bit <S2SV_ModEnd> * const b <S2SV_ModStart> b = & vpx_extra_bits <S2SV_ModEnd> [ t ] <S2SV_ModStart> & 1 ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ; } vpx_write_bit <S2SV_ModEnd> ( w,",0
315,"<S2SV_ModStart>, uncompressed_hdr_size ; vpx_write_bit_buffer <S2SV_ModEnd> wb = { <S2SV_ModStart> 0 } ; vpx_write_bit_buffer <S2SV_ModEnd> saved_wb ; write_uncompressed_header <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> += uncompressed_hdr_size ; vpx_compute_update_table <S2SV_ModEnd> ( ) ; <S2SV_ModStart> += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb",0
316,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
317,"<S2SV_ModStart> _U_ ) { ND_TCHECK ( * ext ) ; <S2SV_ModStart> struct ikev2_id id <S2SV_ModEnd> ; ND_TCHECK ( <S2SV_ModStart> * typedata ; if ( item_len < sizeof ( struct ikev2_id ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; goto trunc ; } <S2SV_ModStart> * typedata ; if ( item_len < sizeof ( struct ikev2_id ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; goto trunc ; } <S2SV_ModStart> * typedata ; if ( item_len < sizeof ( struct ikev2_id ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; goto trunc ; } <S2SV_ModStart> * typedata ; if ( item_len < sizeof ( struct ikev2_id ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; goto trunc ; } <S2SV_ModStart> * typedata ; if ( item_len < sizeof ( struct ikev2_id ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; goto trunc ; }",0
318,"<S2SV_ModStart> ) ) { jas_log ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( ) ) ) ) ) ), ""mif_process_cmpt"" ), hdr, buf, jas_taginfo_nonull ( jas_taginfos_lookup ( mif_tags, jas_taginfo_lookup ( mif_tags, jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( jas_logger ( ) ) ) ) ) ) -> id ) ) ) ) ) ) ; goto error <S2SV_ModEnd> ; } jas_tvparser_destroy <S2SV_ModStart> ) ) { jas_log ( jas_logger ( jas_logger ( jas_logger ( jas",0
319,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
320,"<S2SV_ModStart>, yt2_0 ; WORD32 xl0_0, xl1_0, xl20_0, xl21_0 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 si10, si20, si30, co10, co20, co30 ; WORD64 mul_1, mul_2, mul_3, mul_4, mul_5, mul_6 ; WORD64 mul_7, mul_8, mul_9, mul_10, mul_11, mul_12 ; WORD32 * x_l1 ; WORD32 * x_l2 ; WORD32 * x_h2 ; WORD32 * x_l1 ; WORD32 * x_l2 ; WORD32 * x_h2 ; WORD32 * x_l3 ; WORD32 * x_l4 ; WORD32 * x_l5 ; WORD32 * x_l6 ; WORD32 * x_h7 ; WORD64 mul_9, mul_10,",0
321,"<S2SV_ModStart> mntent -> mnt_dir, NULL",1
322,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
323,"<S2SV_ModStart> ( req ) ) ; rb_hash_aset ( env, client_id_val, req_client_id ( req )",0
324,<S2SV_ModStart> endif int col_type ; int <S2SV_ModEnd> prepare_retval ; MYSQL_BIND <S2SV_ModStart> endif # endif <S2SV_ModEnd> # endif D_imp_xxh,0
325,"<S2SV_ModStart> need = 0 <S2SV_ModEnd> ; CELL first <S2SV_ModStart> screen, { <S2SV_ModEnd> } ) ;",0
326,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> val ) ) strncpy_s ( str, len, ""NaN"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> < 0 ) strncpy_s ( str, len, ""-Infinity"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) ; else strncpy_s ( str, len, ""Infinity"" <S2SV_ModEnd> ) ; }",0
327,"<S2SV_ModStart> ( unlikely ( crng_ready == 0 ) ) { if ( ( fast_pool -> count >= 64 ) && crng_fast_load ( ( char * ) fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ) { fast_pool -> count = 0 ; fast_pool -> last = now ; } return ; } if ( ( fast_pool -> count < 64 ) &&! time_after ( now, fast_pool -> last + HZ ) ) return ; r = & input_pool ; if (! spin_trylock ( & r -> lock ) ) return ; fast_pool -> last = now ; __mix_pool_bytes ( r, & fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ; if ( arch_get_random_seed_long ( & seed ) ) { __mix_pool_bytes ( r, & seed, sizeof ( seed ) ) ; credit = 1 ; } spin_unlock ( & r -> lock ) ; fast_pool -> count = 0 ; credit_entropy ( r, credit ) ; return ; } if ( crng_init == 0 ) { if ( ( fast_pool -> count >= 64 ) && cr",0
328,"<S2SV_ModStart> LEX_ID ) { snprintf ( str, len, ""ID:%s"" <S2SV_ModEnd>, jslGetTokenValueAsString ( <S2SV_ModStart> jslGetTokenValueAsString ( ) <S2SV_ModEnd> ) ; } <S2SV_ModStart> LEX_STR ) { snprintf ( str, len, ""String:\'%s\'"" <S2SV_ModEnd>, jslGetTokenValueAsString ( <S2SV_ModStart> jslGetTokenValueAsString ( ) <S2SV_ModEnd> ) ; }",0
329,,1
330,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
331,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
332,"<S2SV_ModStart> ) { return memcmp <S2SV_ModEnd> ( s1,",0
333,"<S2SV_ModStart> parse_global_option ( CMD_PRINT_HELP, NULL, NULL ) ; parse_service_option ( CMD_PRINT_HELP <S2SV_ModStart> ( CMD_PRINT_DEFAULTS, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-version"" ) ) { parse_global_option ( CMD_PRINT_DEFAULTS, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-ssls"" ) ) { socket_options_print ( ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-options"" ) ) { print_ssl_options ( ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else # ifndef USE_WIN32 if (! strcasecmp ( arg1, ""-fd"" ) ) { if (! arg2 ) { s_log ( LOG",0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,"<S2SV_ModStart> ; if (! new_iv_set ) { DBG_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; st -> st_v1_new_iv. len = 0 ; DBG_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; st -> st_v1_new_iv. len = 0 ; DBG_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; st -> st_v1_new_iv. len = 0 ; DBG_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; st -> st_v1_new_iv. len = 0 ; DBG_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; st -> st_v1_",0
336,"<S2SV_ModStart> ; } } { IMPEG2D_ERROR_CODES_T e_error ; e_error = impeg2d_process_video_header ( & ( ps_dec -> s_bit_stream ), ps_dec -> pu1_input_buffer, u4_size ) ; if ( IMPEG2D_ERROR_CODES_T ) IVD_ERROR_NONE!= e_error ) { ps_op -> s_ivd_video_decode_op_t. u4_error_code = e_error ; } }",0
337,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char * print_string,0
338,"<S2SV_ModStart>. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img, <S2SV_ModStart>. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img,",1
339,"<S2SV_ModStart> ) ; } else if ( arg1 == 3 ) { win_maximise ( - 2 ) ; win_set_chars ( rows0, cols0 ) ; } else if ( arg1 == 4 ) { win_maximise ( - 2 ) ; win_set_chars ( rows0, 0 ) ; } else if ( arg1 == 5 ) { win_maximise ( - 1 ) ; win_set_chars ( rows0, 0 ) ; } else if ( arg1 == 6 ) { win_maximise ( - 1 ) ; win_set_chars ( rows0, 0 ) ; } else if ( arg1 == 7 ) { win_maximise ( - 1 ) ; win_set_chars ( rows0, 0 ) ; } else if ( arg1 == 8 ) { win_maximise ( - 1 ) ; win_set_chars ( rows0, 0 ) ; } else if ( arg1 == 9 ) { win_maximise ( - 1 ) ; win_set_chars ( rows0, 0 ) ; } else if ( arg1 == 10 ) { win_maximise ( - 1 ) ; win_set_chars (",0
340,<S2SV_ModStart> < cols + 8 ; i ++ ) s [ i ] = s [ cols - 1 ] ; for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; d [ i + 8 ] = 0 ; } for ( c = 0 ; c < cols + 8 ; c ++ ) { int x = s [ c + 7 ] - s [ c - 8 ] ; int y = s [ c + 7 ] + s [ c - 8 ] ; sum += x ; sumsq += x * y ; d [ c & 15 ] = s [ c ] ; if ( sumsq * 15 - sum * sum < flimit ) { d [ c & 15 ] = ( 8 + sum + s [ c ] ) >> 4 ; } s [ c - 8 ] = d [ ( c - 8 ) & 15 ] ; } s,0
341,"<S2SV_ModStart> -> log ) { <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> -> log ) { <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> -> log ) { <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> -> log ) { <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> -> log ) { <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> -> log ) { <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> -> log ) { <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> -> log ) { <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> b",0
342,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
343,<S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_pic_done ) { ps_codec -> i4_pic_done = 1 ; ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_pic_done ) { ps_codec -> i4_pic_done = 1 ; ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_pic_done ) { ps_codec -> i4_pic_done = 1 ; ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_pic_done ) { ps_codec -> i4_pic_done =,0
344,"<S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_start ( argptr, strptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr )",0
345,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
346,"<S2SV_ModStart> 0 ; } fs_logger2 ( ""clone"", dest ) ; int rv = copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { <S2SV_ModStart> ( rv ) { <S2SV_ModStart> ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; } <S2SV_ModEnd> } _exit (",0
347,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> BLOCK_8X8 : return vpx_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> BLOCK_16X8 : return vpx_mse16x8 <S2SV_ModEnd> ; case BLOCK_8X16 <S2SV_ModStart> BLOCK_8X16 : return vpx_mse8x16 <S2SV_ModEnd> ; default : <S2SV_ModStart> default : return vpx_mse16x16 <S2SV_ModEnd> ; } },1
348,"<S2SV_ModStart> ; if ( padata -> pa_type == KRB5_PADATA_PKINIT_KX ) { return return_pkinit_kx ( context, request, reply, encrypting_key, send_pa ) ; } if (",0
349,"<S2SV_ModStart> flags ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> if (! v4l2_buf ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", input -> buf_cur_space_left, frame_len ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d.",0
350,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> size_t <S2SV_ModEnd> zcalloc ( size_t <S2SV_ModStart> size ) { size_t new_size = size + PREFIX_SIZE ; <S2SV_ModStart> ( 1, new_size <S2SV_ModEnd> ) ; if <S2SV_ModStart> HAVE_MALLOC_SIZE update_zmalloc_stat_alloc ( new_size <S2SV_ModEnd> ) ; return",0
351,<S2SV_ModStart> -> serviceId == EXTRACT_16BITS <S2SV_ModEnd> ( & rxh,1
352,"<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len > MWIFIEX_SSID_MAX_SSID_LEN ) { mwifiex_dbg ( adapter, INFO, ""info: <S2SV_blank> ADHOC_S_CMD: <S2SV_blank> SSID <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d\\n"", MWIFIEX_SSID_MAX_SSID_LEN ) ; return - 1 ; }",0
353,"<S2SV_ModStart> -> valuelen ; if ( nsbuf == 0 ) { error = context -> put_listent ( context, NULL, 0, 0, 0 ) ; if ( context -> seen_error ) return error ; sfe = XFS_ATTR_SF_NEXTENTRY ( sfe ) ; } else if ( nsbuf > XFS_ATTR_SF_MAXSIZE ) { error = context -> put_listent ( context, NULL, 0, 0, 0, 0 ) ; if ( context -> seen_error ) return error ; sfe = XFS_ATTR_SF_NEXTENTRY ( sfe ) ; } else if ( nsbuf > XFS_ATTR_SF_MAXSIZE ) { error = context -> put_listent ( context, NULL, 0, 0, 0, 0 ) ; if ( context -> seen_error ) return error ; sfe = XFS_ATTR_SF_NEXTENTRY ( sfe ) ; } else if ( nsbuf > XFS_ATTR_SF_MAXSIZE ) { error = context -> put_listent ( context, NULL, 0, 0, 0, 0, 0 ) ; if ( error ) return error ; sfe = XFS_ATTR",0
354,"<S2SV_ModStart> struct l2cap_conf_rfc rfc ; void * ptr = req -> data ; BT_DBG ( ""sk <S2SV_blank> %p"", sk ) ; switch ( pi -> mode ) { case L2CAP_MODE_BASIC : if ( pi -> imtu!= L2CAP_DEFAULT_MTU ) l2cap_add_conf_opt ( & ptr, L2CAP_CONF_MTU, 2, pi -> imtu ) ; break ; case L2CAP_MODE_ERTM : rfc. mode = L2CAP_MODE_ERTM ; rfc. txwin_size = L2CAP_DEFAULT_RX_WINDOW ; rfc. max_transmit = L2CAP_DEFAULT_MAX_RECEIVE ; rfc. retrans_timeout = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO ) ; rfc. monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; l2cap_add_conf_opt ( & ptr, L",0
355,"<S2SV_ModStart> { do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> r, MSG_WAITALL )",0
356,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ps_dec -> u1_nal_ref_idc <S2SV_ModStart> ps_dec -> u1_nal_ref_idc > IDR_SLICE_NAL ) { return ERROR_INCOMPLETE_FRAME ; } if ( ( ( ps_dec -> u1_nal_ref_idc == IDR_SLICE_NAL ) || ( ( ps_dec -> u1_nal_ref_idc > IDR_SLICE_NAL ) && ( ( ps_dec -> u1_nal_ref_idc > IDR_SLICE_NAL ) && ( ( ps_dec -> u1_nal_ref_idc > IDR_SLICE_NAL ) && ( ( ps_dec -> u1_nal_ref_idc > IDR_SLICE_NAL ) || ( ( ps_dec -> u1_nal_ref_idc > IDR_SLICE_NAL ) && ( ( ps_dec -> u1_nal_ref_idc > IDR_SLICE_NAL ) && (,0
357,<S2SV_ModStart> while ( pair <S2SV_ModEnd> ) { mprAddItem,1
358,"<S2SV_ModStart> * delegation, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> = 0 ; fmode <S2SV_ModEnd> &= ( FMODE_READ <S2SV_ModStart> -> type & fmode )!= fmode <S2SV_ModEnd> ) goto no_delegation_unlock <S2SV_ModStart> -> stateid, fmode <S2SV_ModEnd> ) ; ret <S2SV_ModStart>, NULL, fmode <S2SV_ModEnd> ) ; ret",1
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,"<S2SV_ModStart> * xd, int64_t <S2SV_ModEnd> * out_rate_sum, <S2SV_ModStart> * out_dist_sum ) { int i ; int64_t rate_sum = 0 ; int64_t dist_sum = 0 ; const int ref = xd -> mi [ 0 ] -> mbmi. ref_frame [ 0 ] ; unsigned int sse ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblock_plane * const p = & x -> plane [ i ] ; struct macroblockd_plane * const pd = & xd -> plane [ i ] ; const BLOCK_SIZE bs = get_plane_block_size ( bsize, pd ) ; ( void ) cpi -> fn_ptr [ bs ]. vf ( p -> src. buf, p -> src. stride, pd -> dst. buf, pd -> dst. stride, & sse ) ; if ( cpi -> speed > 4 ) { int64_t rate ; int64_t dist ; int64_t square_error = sse ; int quantizer = ( pd -> dequant [ 1 ] >> 3 ) ; if ( quantizer < 120 ) rate = ( square_error * (",0
361,<S2SV_ModStart> } if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
362,<S2SV_ModStart> { if ( index >= PAM_MAX_RESP_SIZE ) { return ( PAM_BUF_ERR ) ; } if ( <S2SV_ModStart> == NULL ) { free ( * ret_username ) ; <S2SV_ModStart> PAM_BUF_ERR ) ; },0
363,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> ) { return vpx_read_tree <S2SV_ModEnd> ( r,",1
364,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",1
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,"<S2SV_ModStart> depth ++ ; ND_TCHECK ( depth ) ; <S2SV_ModStart> maxbuf, unicodestr ) ; ND_TCHECK ( depth",0
367,"<S2SV_ModStart> ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n < ( length + 8 ) ) { return ERROR_FAILURE ; } netBufferRead ( context -> txBuffer, buffer, offset, length ) ; header. controlWord = htole16 ( TX_CTRL_TXIC | ( context -> frameId ++ & TX_CTRL_TXFID ) ) ; header. byteCount = htole16 ( length ) ; ksz8851SetBit ( interface, KSZ8851_RXQCR, RXQCR_SDA ) ; ksz8851WriteFifo ( interface, ( uint8_t * ) & header, sizeof ( Ksz8851TxHeader ) ) ; ksz8851WriteFifo ( interface, context -> txBuffer, length ) ; ksz8851ClearBit ( interface, KSZ8851_TXQCR, TXQCR_METFE ) ; n = ksz8851ReadReg ( interface, <S2SV_ModStart> ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8",0
368,<S2SV_ModStart> ; # endif mono_gc_invoke_finalizers ( ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> SetEvent ( pending_done_event,0
369,"<S2SV_ModStart> ; WORD32 x_8 <S2SV_ModEnd>, x_a, <S2SV_ModStart> ; WORD32 n10, n20, n30, n01, n11, n21, n31 ; WORD32 n12, n22, n32, n03, n13, n23, n33 ; WORD32 n0, j0 ; WORD32 * x0, * y0, * y1, * y2, * y3 ; x0 = ptr_x ; x2 = ptr_x + ( WORD32 ) npoints ; y1 = ptr_y + ( WORD32 ) npoints ; y2 = ptr_y + ( WORD32 ) npoints ; x3 = ptr_x + ( WORD32 ) npoints ; x_4 = * x0 ++ ; x_5 = * x0 ++ ; x_6 = * x0 ++ ; x_7 = * x0 ++ ; n00 = x_0 + x_2 ; n01 = x_1 + x_3 ; n20 = x_0 - x_2 ; n21 = x_1 - x_3 ; n10 = x_4 + x_6 ; n11 = x_",0
370,"<S2SV_ModStart> ; if ( pmd_none_or_clear_bad ( pmd ) ) continue ; ret = unuse_pte_range ( vma, pmd, addr, next, entry, page ) ; if ( ret ) return ret ; if ( <S2SV_ModStart> ) ) ) <S2SV_ModEnd> return ret ;",0
371,"<S2SV_ModStart> height, target_width = 0, target_height = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( argv [ 2 ], & width, & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } if (! parse_dim ( argv [ 3 ], & target_width, & target_height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpin = fopen ( fin, ""rb"" ) ; if ( fpin == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> read\\n"", fin ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpout = fopen ( fout, ""wb"" ) ; if ( fpout == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank>",0
372,"<S2SV_ModStart> i, result <S2SV_ModEnd> ; PyObject *",1
373,<S2SV_ModStart> VPX_CODEC_OK ; struct vpx_codec_alg_priv_enc <S2SV_ModEnd> * priv ; <S2SV_ModStart> sizeof ( struct vpx_codec_alg_priv_enc <S2SV_ModEnd> ) ) ; <S2SV_ModStart> priv = & priv_enc <S2SV_ModEnd> -> base ; <S2SV_ModStart> enc ) { priv_enc <S2SV_ModEnd> -> cfg = <S2SV_ModStart> enc = & priv_enc <S2SV_ModEnd> -> cfg ; <S2SV_ModStart> ++ ) ; priv_enc <S2SV_ModEnd> -> vp8_cfg = <S2SV_ModStart> ]. cfg ; priv_enc -> vp8_cfg. pkt_list = & priv -> pkt_list. head ; priv -> cx_data_sz = priv_enc -> cfg. g_w * priv_enc -> cfg. g_h * 3 / 2 * 2 ; if ( priv -> cx_data_sz < 32768 ) priv -> cx_data_sz = 32768 ; priv -> cx_data = malloc ( priv -> cx_data_sz ) ; if (! priv -> cx_data ) { return VPX_CODEC_MEM_ERROR ; } if ( mr_cfg ) ctx -> priv -> enc. total_encoders = mr_cfg -> mr_total_resolutions ; else ctx -> priv -> enc. total_,0
374,"<S2SV_ModStart>, totfr ) ) < 0 ) return ret ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; totfr += step ; if ( totfr > BOT ) { totfr = 0 ; for ( i = 0 ; i < 256 ; i ++ ) { unsigned nc = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] = nc ; totfr += nc ; } for ( i = 0 ; i < 256 ; i ++ ) { unsigned sum = 0 ; unsigned i16_17 = i << 4 ; for ( j = 0 ; j < 16 ; j ++ ) sum += i16_17 ; pixel -> lookup [ i ] = sum ; } } pixel -> total_freq = totfr ; * rval = c & s -> cbits ; return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
375,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx ->,0
376,"<S2SV_ModStart> i_location ) ; if ( iinfo -> i_location. length > UDF_I ( inode ) -> i_sb -> s_blocksize ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> inconsistent <S2SV_blank> file <S2SV_blank> entry <S2SV_blank> length\\n"", inode -> i_ino ) ; ret = - EIO ; goto out ; }",0
377,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0",1
378,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> bad_format_imginfo ( char <S2SV_ModStart> char * ptr <S2SV_ModEnd> ; ptr = <S2SV_ModStart> 'S' ) { return true <S2SV_ModEnd> ; } else <S2SV_ModStart> } } return false <S2SV_ModEnd> ; } <S2SV_null>,0
379,"<S2SV_ModStart> IPV6DefragSturgesNovakLastTest ) ; UtRegisterTest ( ""DefragIPv6NoDataTest"", DefragIPv6NoDataTest ) ;",0
380,<S2SV_ModStart> if ( object_data && object_length,0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,"<S2SV_ModStart> p_sys -> b_auto_field_coding && p_sys -> p_format -> interlaced ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""interlaced_coding"",! p_sys -> p_format -> interlaced ) ; if ( p_sys -> b_auto_field_coding ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""auto_field_coding"", p_sys -> p_format -> interlaced ) ; if ( p_sys -> b_auto_field_coding ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""auto_field_coding"", p_sys -> p_format -> interlaced ) ; if ( p_sys -> b_auto_field_coding ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""auto_field_coding"", p_sys -> p_format -> interlaced ) ; if ( p_sys -> b_auto_field_coding ) schro",0
384,"<S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> regular <S2SV_blank> file: <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, fname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> regular <S2SV_blank> file: <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, fname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> regular <S2SV_blank> file: <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, fname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> regular <S2SV_blank> file: <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, fname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> regular <S2SV_blank> file: <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, fname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> regular <S2SV_blank> file: <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, fname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> regular <S2SV_blank> file: <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, fname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank>",0
385,"<S2SV_ModStart> 4 ) ; size_t <S2SV_ModEnd> num_properties = GETINT32 <S2SV_ModStart> ; j < <S2SV_ModEnd> a -> names <S2SV_ModStart> ]. len ; j ++ ) a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ; } } else { size_t i ; a -> names = CHECKED_XCALLOC ( VarLenData, a -> num_names ) ; for ( i = 0 ; i < a -> num_names ; i ++ ) { size_t j ; CHECKINT32 ( idx, len ) ; a -> names [ i ]. len = GETINT32 ( buf + idx ) ; idx += 4 ; a -> names [ i ]. data = CHECKED_XMALLOC ( unsigned char, a -> names [ i ]. len ) ; for ( j = 0 ; j < ( a -> names [ i ]. len >> 1 ) ; j ++ ) a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ;",0
386,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
387,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; vpx_pbi_t * pbi = ctx -> pbi ; <S2SV_ModStart> ; vp9_get_reference_dec ( <S2SV_ModEnd> pbi, data",0
388,"<S2SV_ModStart> JPEG_MARKER_EOI ) { if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> first <S2SV_blank> "" ""marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> EOI.\\n"", JPEG_MARKER_EOI ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> JPEG_MARKER_SOS ) { if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> first <S2SV_blank> "" ""marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> SOS.\\n"", JPEG_MARKER_SOS ) ; return AVERROR_INVALIDDATA ; }",0
389,"<S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == testlist ) { node * ch = CHILD ( n, 0 ) ; expr_ty e = ast_for_testlist ( c, ch ) ; if (! e ) return NULL ; return Expr ( e, LINENO ( n ), n -> n_col_offset, n -> n_end_lineno, n -> n_end_col_offset, c -> c_arena ) ; } else if (",0
390,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> vp8_denoiser_filter_c ( YV12_BUFFER_CONFIG <S2SV_ModStart> = 16 ; <S2SV_ModEnd> char * mc_running_avg_y <S2SV_ModStart> -> y_stride ; <S2SV_ModEnd> char * running_avg_y <S2SV_ModStart> -> y_stride ; int r, c, i ; int sum_diff = 0 ; int adj_val [ 3 ] = { 3, 4, 6 } ; if ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) { for ( i = 0 ; i < 3 ; i ++ ) adj_val [ i ] += 1 ; } for ( r = 0 ; r < 16 ; ++ r ) { for ( c = 0 ; c < 16 ; ++ c ) { int diff = 0 ; int adjustment = 0 ; int absdiff = 0 ; diff = mc_running_avg_y [ c ] - sig [ c ] ; absdiff = abs ( diff ) ; if ( absdiff <= 3 ) { running_avg_y [ c ] = mc_running_avg_y [ c ] ; sum_diff += diff ; } else {",0
391,<S2SV_ModStart> ; } } if ( ( sockPtr -> flags & NS_SOCK_ESTABLISHED ) == 0u ) { sockPtr -> keep = NS_TRUE ; },0
392,"<S2SV_ModStart> = uregs ; xtregs_coprocessor_t cp0 ; <S2SV_ModStart> ret = 0 ; memset ( & cp0, 0, sizeof ( cp0 ) ) <S2SV_ModStart> ti ) ; <S2SV_ModEnd> ret |= __copy_from_user <S2SV_ModStart> ) ) ; <S2SV_ModEnd> ret |= __copy_from_user",0
393,<S2SV_ModStart> size ) ; if ( message -> length > 0 ) { <S2SV_ModStart> buffer ) ; },0
394,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" <S2SV_ModStart> cg_item ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
395,"<S2SV_ModStart> int error ; new_bh = ext2_xattr_cache_find ( inode, header ) ; if ( new_bh ) { if ( new_bh == old_bh ) { ea_bdebug ( new_bh, ""keeping <S2SV_blank> this <S2SV_blank> block"" ) ; } else { ea_bdebug ( new_bh, ""reusing <S2SV_blank> block"" ) ; error = dquot_alloc_block ( inode, 1 ) ; if ( error ) { unlock_buffer ( new_bh ) ; goto cleanup ; } le32_add_cpu ( & HDR ( new_bh ) -> h_refcount, 1 ) ; ea_bdebug ( new_bh, ""refcount <S2SV_blank> now=%d"", le32_to_cpu ( HDR ( new_bh ) -> h_refcount ) ) ; } unlock_buffer ( new_bh ) ; } else if ( old_bh && header == HDR ( old_bh ) ) { new_bh = old_bh ; get_bh ( new_bh ) ; <S2SV_ModStart> new_bh ) ; <S2SV_ModEnd> } else {",0
396,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
397,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
398,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
399,"<S2SV_ModStart>, 1 ) ; if ( imbuf == NULL ) { return ( MagickFalse ) ; } for ( n = 0 ; n < 16 ; n ++ ) { sixel_palet [ n ] = sixel_default_color_table [ n ] ; } for ( r = 0 ; r < 6 ; r ++ ) { for ( g = 0 ; g < 6 ; g ++ ) { for ( b = 0 ; b < 6 ; b ++ ) { sixel_palet [ n ++ ] = SIXEL_RGB ( r * 51, g * 51, b * 51 ) ; } } } for ( ; n < SIXEL_PALETTE_MAX ; n ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 255, 255, 255 ) ; } for ( ; n < SIXEL_PALETTE_MAX ; n ++ ) { sixel_palet [ n ++ ] = SIXEL_RGB ( 255, 255, 255 ) ; } for ( ; n < SIXEL_PALETTE_MAX ; n ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 255, 255,",0
400,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vpx_ref_frame_t * ) ; YV12_BUFFER_CONFIG sd <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; # if CONFIG_VP9_HIGHBITDEPTH image2yuvconfig ( & frame -> img, & sd ) ; # else image2yuvconfig ( & frame -> img, & sd ) ; # endif <S2SV_ModStart> sd ) ; # if CONFIG_VP9_HIGHBITDEPTH <S2SV_ModStart> sd ) ; # else return vp9_copy_reference_dec ( ctx -> pbi, ( VP9_REFFRAME ) frame -> frame_type, & sd ) ; # endif <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
401,<S2SV_ModStart> u1_num_mbsNby2 ) { if ( ps_dec -> ps_dec_err_status -> u1_err_flag & REJECT_CUR_PIC ) { ih264d_err_pic_dispbuf_mgr ( ps_dec ) ; } <S2SV_ModStart> } else { if ( ps_dec -> ps_dec_err_status -> u1_err_flag & REJECT_CUR_SLICE ) { ih264d_err_pic_dispbuf_mgr ( ps_dec ) ; } <S2SV_ModStart> } else { if ( ps_dec -> ps_dec_err_status -> u1_err_flag & REJECT_CUR_SLICE ) { ih264d_err_pic_dispbuf_mgr ( ps_dec ) ; } <S2SV_ModStart> } else { if ( ps_dec -> ps_dec_err_status -> u1_err_flag & REJECT_CUR_SLICE ) { ih264d_err_pic_dispbuf_mgr ( ps_dec ) ; } <S2SV_ModStart> } else { if ( ps_dec -> ps_dec_err_status -> u1_err_flag & REJECT_CUR_S,0
402,<S2SV_ModStart> ; UWORD32 u4_x_dst_offset <S2SV_ModEnd> = 0 ; <S2SV_ModStart> == B_PIC ) { <S2SV_ModStart> ps_dec ) ; } else { <S2SV_ModEnd> impeg2d_dec_p_mb_params ( ps_dec <S2SV_ModStart> ps_dec ) ; } <S2SV_ModStart> == B_PIC ) { <S2SV_ModStart> ps_dec ) ; } else { <S2SV_ModEnd> impeg2d_dec_pnb_mb_params ( ps_dec <S2SV_ModStart> ps_dec ) ; } <S2SV_ModStart> == B_PIC ) { <S2SV_ModStart> ps_dec ) ; } else { <S2SV_ModEnd> impeg2d_dec_p_mb_params ( ps_dec <S2SV_ModStart> ps_dec ) ; } <S2SV_ModStart> == B_PIC ) { <S2SV_ModStart> ps_dec ) ; } else { <S2SV_ModEnd> impeg2d_dec_pnb_mb_params ( ps_dec <S2SV_ModStart> ps_dec ) ; } <S2SV_ModStart> == B_PIC ) { <S2SV_ModStart> ps_dec ) ; } else { <S2SV_ModEnd> impeg2d_dec_pnb_mb_params ( ps_dec <S2SV_ModStart> ps_dec ) ; },0
403,<S2SV_ModStart> VP9_LAST_FLAG ) { int idx = <S2SV_ModEnd> cm -> ref_frame_map <S2SV_ModStart> [ 0 ] ; YV12_BUFFER_CONFIG * const cfg = <S2SV_ModEnd> cm -> frame_bufs <S2SV_ModStart> -> frame_bufs [ idx <S2SV_ModEnd> ]. buf,0
404,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
405,"<S2SV_ModStart> ; const TX_SIZE plane_bsize = get_plane_block_size ( bsize, pd ) ; const int num_4x4_w = num_4x4_blocks_wide_lookup [ plane_bsize ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ plane_bsize ] ; const int step = 1 << ( tx_size << 1 ) ; int i ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) { int r, c ; int max_blocks_wide = num_4x4_w ; int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> ( 5 + pd -> subsampling_y ) ) ; i = 0 ; for ( r =",0
406,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 4 ) ; <S2SV_ModEnd> src += src_stride",0
407,<S2SV_ModStart> { rowstoread = ( row + img -> row_offset ) % rowsperstrip ; nrow = ( row + rowstoread > h? h - row : rowstoread ) <S2SV_ModEnd> ; offset_row = <S2SV_ModStart> { rowstoread = ( row + img -> row_offset ) % rowsperstrip ; nrow = ( row + rowstoread > h? h - row : rowstoread ) <S2SV_ModEnd> ; p0 = <S2SV_ModStart> { rowstoread = ( row + img -> row_offset ) % rowsperstrip ; nrow = ( row + rowstoread > h? h - row : rowstoread ) <S2SV_ModEnd> ; p1 = <S2SV_ModStart> { rowstoread = ( row + img -> row_offset ) % rowsperstrip ; nrow = ( row + rowstoread > h? h - row : rowstoread ) <S2SV_ModEnd> ; p2 = <S2SV_ModStart> { rowstoread = ( row + img -> row_offset ) % rowsperstrip ; nrow = ( row + rowstoread > h? h - row : rowstoread ) <S2SV_ModEnd> ; p2 = <S2SV_ModStart> { rowstoread = ( row + img -> row_offset ) % rowsperstrip ; nrow,0
408,<S2SV_ModStart> ; } } <S2SV_ModEnd> return 0 ;,0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. be <S2SV_ModEnd> [ psf -> <S2SV_ModStart> [ psf -> header. be <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ; psf -> header. be <S2SV_ModEnd> [ psf -> <S2SV_ModStart> [ psf -> header. be <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
410,<S2SV_ModStart> num & ( 1U << number <S2SV_ModEnd> ) ) return <S2SV_ModStart> num - ( 1U <S2SV_ModEnd> << number ),0
411,"<S2SV_ModStart> ] ; const size_t <S2SV_ModEnd> w = vpx_img_plane_width <S2SV_ModStart> y ) { int r = <S2SV_ModEnd> fread ( buf <S2SV_ModStart>, file ) ; if ( r <S2SV_ModStart>!= w ) { fclose ( file ) ; <S2SV_ModStart> return 0 ; }",0
412,"<S2SV_ModStart> = NULL ; uint32_t attr_len ; uint32_t <S2SV_ModEnd> orig_attr_len ; uint16_t <S2SV_ModStart> 1 ; } if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } attr_len = avp -> length - sizeof ( struct l2tp_avp_t ) ; MD5_Init ( & md5_ctx ) ; MD5_Update ( & md5_ctx, & avp -> type, sizeof ( avp -> type ) ) ; MD5_Update ( & md5_ctx, secret, secret_len ) ; MD5_Update ( & md5_ctx, RV -> val. octets, RV -> length ) ; MD5_Final ( p1, & md5_ctx ) ; if ( attr_len <= MD5_DIGEST_LENGTH ) { memxor (",0
413,"<S2SV_ModStart> ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_INVALID_IV_LENGTH <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_INVALID_IV_LENGTH <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_INVALID_IV_LENGTH <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_INVALID_IV_LENGTH <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_INVALID_IV_LENGTH <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_INVALID_IV_LENGTH <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_INVALID_IV_LENGTH <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( EVP_F_CHACHA20_POLY1305",0
414,"<S2SV_ModStart>, 0, comm_event -> comm_size <S2SV_ModEnd> ) ; if",0
415,"<S2SV_ModStart> ; BT_DBG ( ""sock <S2SV_blank> %p, <S2SV_blank> peer <S2SV_blank> %d, <S2SV_blank> sk <S2SV_blank> %p"" <S2SV_ModEnd>, sock, <S2SV_ModStart> sock, sk, peer",0
416,"<S2SV_ModStart> MT_CPTYPE_PASSSALT ) { memset ( pass_salt, 0, sizeof ( pass_salt ) ) ;",0
417,"<S2SV_ModStart> MUTT_ABORT ) { imap_exec ( adata, ""STARTTLS"", IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc!= IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could <S2SV_blank> not <S2SV_blank> negotiate <S2SV_blank> TLS <S2SV_blank> connection"" ) ) ; imap_exec ( adata, ""CAPABILITY"", IMAP_CMD_NO_FLAGS ) ; goto bail ; } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted <S2SV_blank> connection <S2SV_blank> unavailable"" ) ) ; imap_exec ( adata, ""STARTTLS"", IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could <S2SV_blank> not <S2SV_blank> negotiate <S2SV_blank> TLS <S2SV_blank> connection""",0
418,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
419,"<S2SV_ModStart> ) ) ; if ( <S2SV_ModStart>, 0 ) < 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModEnd> if ( strncmp <S2SV_ModStart> ) ) ; if ( <S2SV_ModStart>, 0 ) < 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModEnd> if ( strncmp <S2SV_ModStart> ) ) ; if ( <S2SV_ModStart>, 0 ) < 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModEnd> if ( strncmp <S2SV_ModStart> ) ) ; if ( <S2SV_ModStart>, 0 ) < 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModEnd> if ( strncmp <S2SV_ModStart> ) ) ; if ( <S2SV_ModStart>, 0 ) < 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModEnd> if ( strncmp <S2SV_ModStart> ) ) ; if ( <S2SV_ModStart>, 0 ) < 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModEnd> if ( strncmp <S2SV_ModStart> ) ) ; if ( <S2SV_ModStart>, 0 ) < 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModEnd> if ( strncmp <S2SV_ModStart> ) ) ; if ( <S2SV_ModStart> ) ) ; if ( <S2SV_ModStart> ) ) ; if ( <S2SV_ModStart>, 0 ) < 0 ) { close ( gpsd_sock ) ; return ; }",0
420,"<S2SV_ModStart> remainder, & rlen ) ; if ( ret ) return ret ; if (! check_atype_tag ( a, & t ) ) return ASN1_BAD_ID ; if (! decode_atype_to_ptr ( & t, contents, clen, a, retrep ) ; return ASN1_OK <S2SV_ModEnd> ; } <S2SV_null>",0
421,"<S2SV_ModStart> * slavename ; if ( ( user = find_user ( curconn -> username ) )!= NULL ) { md5_state_t state ; # if defined ( __linux__ ) && defined ( _POSIX_MEMLOCK_RANGE ) mlock ( md5data, sizeof ( md5data ) ) ; mlock ( md5sum, sizeof ( md5sum ) ) ; if ( user -> password!= NULL ) { mlock ( user -> password, strlen ( user -> password ) ) ; } # endif <S2SV_ModStart> = 0 ; strncpy ( md5data + 1, user -> password, 82 ) ; memcpy ( md5data + 1 + strlen ( user -> password ), curconn -> pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; md5sum [ 0 ] = 0 ; init_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr",0
422,"<S2SV_ModStart> ; if ( _PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart> { if ( _PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name,",0
423,<S2SV_ModStart> off } ; if (! str ) { return - 1 ; },0
424,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
425,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
426,"<S2SV_ModStart> size_t s ; s = exif_get_long ( o, EXIF_BYTE_ORDER_INTEL ) ; if ( s > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } <S2SV_ModStart> ; if ( s > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } if (",0
427,<S2SV_ModStart> bd_addr ) { int ret ; <S2SV_ModStart> return BT_STATUS_NOT_READY ; ret = <S2SV_ModEnd> btif_dm_remove_bond ( bd_addr <S2SV_ModStart> bd_addr ) ; return ret ;,0
428,"<S2SV_ModStart> int i ; size_t avail ; size_t <S2SV_ModEnd> expect ; txid <S2SV_ModStart> 4 ) ; expect = 8 + 8 + nxip * 8 ; if ( nxip < 0 || nxip > avail || expect > avail ) goto bad_format ; xmin = pq_getmsgint64 ( buf ) ; xmax = pq_getmsgint64 ( buf ) ; if ( xmin == 0 || xmin > xmax || xmax > MAX_TXID ) goto bad_format ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; snap -> xmin = xmin ; snap -> xmax = xmax ; SET_VARSIZE ( snap, TXID_SNAPSHOT_SIZE ( nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last || cur < xmin || cur >= xmax ) goto bad_format ; snap -> xip [ i ] = cur ; last = cur ; } PG_RETURN_POINTER ( snap ) ; bad_format : elog ( ERROR, ""invalid <S2SV_blank> snapshot <S2SV_blank> data"" ) ; return ( Datum ) NULL <S2SV_ModEnd> ; } <S2SV_null>",0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. size <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. size <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. size <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. size <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
430,"<S2SV_ModStart> ( epoll_ ) <S2SV_ModEnd> ; if ( <S2SV_ModStart>, count ) < 0 <S2SV_ModEnd> ) OE_RAISE_ERRNO ( <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; }",0
431,"<S2SV_ModStart> ( CMD_INITIALIZE, & new_global_options. option <S2SV_ModEnd>, NULL ) <S2SV_ModStart> ( CMD_INITIALIZE, & new_service_options. option <S2SV_ModEnd>, NULL )",0
432,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_VERSION_MAX : * ( size_t * ) val = ms -> elf_version_max ; return 0 ;,0
433,<S2SV_ModStart> offset ) { struct address_space * mapping = page -> mapping ; <S2SV_ModStart> EXT4_JOURNAL ( page <S2SV_ModEnd> ) ; if,0
434,"<S2SV_ModStart> i + 1 ) ; if (! trak ) continue ; GF_SAFEALLOC ( writer, TrackWriter ) ; if (! writer ) goto exit ; writer -> sampleNumber = 1 ; writer -> mdia = trak -> Media ; writer -> stbl = trak -> Media -> information -> sampleTable ; writer -> timeScale = trak -> Media -> mediaHeader -> timeScale ; writer -> all_dref_mode = Media_SelfContainedType ( writer -> mdia ) ; if ( trak -> sample_encryption ) writer -> prevent_dispatch = GF_TRUE ; writer -> isDone = 0 ; writer -> DTSprev = 0 ; writer -> chunkDur = 0 ; writer -> chunkDur = 0 ; writer -> constant_size = writer -> constant_dur = 0 ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STSC ) ; if (! writer -> stsc ) return GF_OUT_OF_MEM ; if ( writer -> stsc -> ChunkOffset -> type == GF_ISOM_BOX_TYPE_STSC ) return GF_",0
435,"<S2SV_ModStart> 17 ] ; size_t <S2SV_ModEnd> plen ; md5_state_t <S2SV_ModStart> = 0 ; strlcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart>, password, sizeof ( md5data ) - 1 <S2SV_ModEnd> ) ; md5data <S2SV_ModStart> ; md5data [ sizeof ( md5data ) - 1 <S2SV_ModEnd> ] = '\\0' <S2SV_ModStart> = '\\0' ; strlcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart>, pass_salt, sizeof ( pass_salt ) - 1 <S2SV_ModEnd> ) ; md5_init",0
436,<S2SV_ModStart> ; if ( _mibindex_max ) { int i ; for ( i = 0 ; i < _mibindex_max ; ++ i ) SNMP_FREE ( _mibindex_max [ i ] ) ; _mibindex_max = 0 ; _mibindex_max = NULL ; } if ( Prefix!= NULL && Prefix!= & Standard_Prefix [ 0 ] ) SNMP_FREE ( Prefix ) ; if ( Prefix ) Prefix = NULL ; SNMP_FREE ( confmibs ) ; SNMP_FREE ( confmibdir ) ; if ( _mibindexes ) { int i ; for ( i = 0 ; i < _mibindex ; ++ i ) SNMP_FREE ( _mibindexes [ i ] ) ; _mibindex = 0 ; _mibindexes = NULL ; } if ( Prefix!= NULL && Prefix!= & Standard_Prefix [ 0 ] ) SNMP_FREE ( Prefix ) ; if ( Prefix ) Prefix = NULL ; if ( confmibs ),0
437,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
438,<S2SV_ModStart> ( ) ; g_hash_table_remove_all ( headers ) ;,0
439,"<S2SV_ModStart> -> y_buffer ; # if CONFIG_VP9_HIGHBITDEPTH if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { memcpy ( dst, src, src_ybc -> y_width ) ; } else if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { memcpy ( dst, src, src_ybc -> y_width ) ; } else if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { memcpy ( dst, src, src_ybc -> y_width ) ; } else { memcpy ( dst, src, src_ybc -> y_stride ) ; } # else <S2SV_ModStart> y_width ) ; # endif <S2SV_ModStart> y_stride ; } # if CONFIG_VP9_HIGHBITDEPTH if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { memcpy ( dst, src, src_ybc -> y_width ) ; } else { memcpy ( dst, src, src_ybc -> y_stride ) ; } # else memcpy ( dst, src, src_",0
440,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_rd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( x -> <S2SV_ModStart> pred_mv ) ; return 0 ;,0
441,"<S2SV_ModStart>, obj_tlen ; u_int offset ; u_int link_type ; union { float f ; uint32_t i ; } bw ; ND_TCHECK ( * pptr ) ; tptr = pptr ; lmp_com_header = ( const struct lmp_common_header * ) pptr ; ND_TCHECK ( * lmp_com_header ) ; if ( LMP_EXTRACT_VERSION ( lmp_com_header -> version_res [ 0 ] )!= LMP_VERSION ) { ND_PRINT ( ( ndo, ""LMP <S2SV_blank> version <S2SV_blank> %u <S2SV_blank> packet <S2SV_blank> not <S2SV_blank> supported"", LMP_EXTRACT_VERSION ( lmp_com_header -> version_res [ 0 ] ) ) ) ; return ; } if ( ndo -> ndo_vflag < 1 ) { ND_PRINT ( ( ndo, ""LMPv%u <S2SV_blank> %s <S2SV_blank> Message, <S2SV_blank> length: <S2SV_blank> %u"", LMP_EXTRACT_VERSION ( lmp_com_header -> version_res [ 0 ] ), tok2str ( lmp_msg_type_values, ""unknown"", lmp",0
442,"<S2SV_ModStart> * mbmi, nmv_context_counts * counts, <S2SV_ModStart> [ 2 ] <S2SV_ModEnd> ) { int <S2SV_ModStart> i ) { nmv_inc_mv ( counts, <S2SV_ModEnd> & mbmi -> <S2SV_ModStart> [ 0 ] <S2SV_ModEnd> ) ; }",0
443,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ),",0
444,"<S2SV_ModStart> ; if ( skb_out -> len < size ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; } skb_pull_rcsum ( skb_out, hdr_size ) ; memmove ( skb_out -> data - ETH_HLEN, skb_mac_header ( skb_out ), ETH_HLEN ) ; skb_set_mac_header ( skb_out, - ETH_HLEN ) ; skb_reset_network_header ( skb_out ) ; skb_reset_transport_header ( skb_out ) ; hlist_for_each_entry ( entry, chain, list ) { size = entry -> skb -> len - hdr_size ; memcpy ( skb_put ( skb_out, size ), entry -> skb -> data + hdr_size, size ) ; } free_skb ( skb_out ) ; hlist_for_each_entry ( entry, chain, list ) { size = entry -> skb -> len - hdr_size ; memcpy ( skb_put ( sk",0
445,"<S2SV_ModStart> ) return ; DEBUGMSGTL ( ( ""init_mib"", ""Seen <S2SV_blank> MIBDIRS: <S2SV_blank> Looking <S2SV_blank> in <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> mib <S2SV_blank> dirs <S2SV_blank>...\\n"", env_var ) ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibdir ( entry ) ; entry = strtok_r ( NULL, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = netsnmp_getenv ( ""MIBFILES"" ) ; if ( env_var == NULL ) { if ( confmibs!= NULL ) env_var = strdup ( confmibs ) ; else env_var = strdup ( NETSNMP_DEFAULT_MIBS ) ; } else { <S2SV_ModStart> NULL ) ; }",0
446,"<S2SV_ModStart> { fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, O_RDWR ) ) <S2SV_ModStart> 1 ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_KEY ) ) <S2SV_ModStart> EV_REL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_SYN ) ) <S2SV_ModStart> x ++ ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> ]. mapped_id )",0
447,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
448,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s, <S2SV_ModStart> & 1 ) vpx_lpf_vertical_4 <S2SV_ModEnd> ( s +",0
449,<S2SV_ModStart> krb5_error_code iakerb_alloc_context ( krb5_gss_ctx_t <S2SV_ModEnd> * pctx ) <S2SV_ModStart> pctx ) { krb5_gss_ctx_t <S2SV_ModEnd> ctx ; krb5_error_code <S2SV_ModStart> ; code = k5_gss_init_context <S2SV_ModEnd> ( & ctx,0
450,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> bitmapDC = CreateCompatibleDC",1
451,<S2SV_ModStart> ; while ( ( <S2SV_ModStart> )!= START_CODE_PREFIX ) && ( ps_stream -> u4_offset < ps_stream -> u4_max_offset ),1
452,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { ret = <S2SV_ModEnd> - EINVAL ; <S2SV_ModStart> - EINVAL ; goto out ; }",1
453,<S2SV_ModStart> -> is_inflated ) { MonoClass * klass = ( MonoClass * ) mono_reflection_type_get_handle ( ( MonoReflectionType * ) rmethod -> object. vtable -> klass ) ; <S2SV_ModStart> imethod ) ; } else { MonoClass * klass = ( MonoClass * ) rmethod -> object. vtable -> klass ; klass = mono_class_from_mono_type ( mono_reflection_type_get_handle ( ( MonoReflectionType * ) klass ) ) ) ; imethod = ( MonoMethod * ) imethod ; },0
454,<S2SV_ModStart> ; int tmp ; mutex_lock ( & exitcode_mutex ) <S2SV_ModStart> count ) ) { uml_exitcode = - EFAULT ; goto out ; } <S2SV_ModEnd> tmp = simple_strtol <S2SV_ModStart> end ) ) { uml_exitcode = - EINVAL ; goto out ; } uml_exitcode = tmp ; out : mutex_unlock ( & exitcode_mutex ) <S2SV_ModEnd> ; return count,0
455,"<S2SV_ModStart> is_path ) { <S2SV_ModEnd> do { if <S2SV_ModStart> size_t len ; char * last_elem, * wp ; last_elem = wp = result ; <S2SV_ModStart> ( ( ( strncmp ( & name [ 1 ], ""ORIGIN}"", 7 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 1 ], ""PLATFORM}"", 9 ) == 0 && ( len = 11 )!= 0 ) ) ) { repl = ( ( len == 7 || name [ 2 ] == 'O' )? ( __libc_enable_secure? NULL : l -> l_origin ) : _dl_platform ) ; if ( repl!= NULL && repl!= ( const char * ) - 1 ) { wp = __stpcpy ( wp, repl ) ; name += len ; } else { wp = last_elem ; name += len ; while ( * name!= '\\0' && (! is_path || * name!= ':' ) ) ++ name ; } } else { wp = last_elem ; name += len ; while ( * name!= '\\0' && (! is_path || * name!= ':' ) ) ++ name ; } } else * wp ++",0
456,"<S2SV_ModStart> ) ; } # ifdef H264DEC_TRACE sprintf ( decInst -> str, ""H264SwDecInit# <S2SV_blank> decInst <S2SV_blank> %p <S2SV_blank> noOutputReordering <S2SV_blank> %d"", ( void * ) decInst, noOutputReordering ) ; DEC_API_TRC ( decInst -> str ) ; # endif <S2SV_ModStart> decContainer_t ) ) ; if ( pDecCont == NULL ) { H264SwDecRelease ( decInst ) ; return ( H264SWDEC_MEMFAIL ) ; } rv = h264bsdInit ( & pDecInst -> storage, noOutputReordering ) ; if ( rv!= HANTRO_OK ) { H264SwDecRelease ( pDecCont ) ; return ( H264SWDEC_MEMFAIL ) ; } pDecCont -> decStat = INITIALIZED ; pDecCont -> picNumber = 0 ; # ifdef H264DEC_TRACE sprintf ( pDecCont -> str, ""H264SwDecInit# <S2SV_blank> OK: <S2SV_blank> return <S2SV_blank> %p"", ( void * ) pDecCont ) ; DEC_API_TRC ( pDecCont -> str ) ; # endif * decInst = pDecCont",0
457,"<S2SV_ModStart> } if ( ip_options_rcv_csum ( skb ) ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INDISCARDS ) ; goto drop ; } if (",0
458,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
459,"<S2SV_ModStart> goto errout ; for ( j = 0 ; j < info -> partitions ; j ++ ) { info -> stagemasks [ j ] = 0 ; } for ( j = 0 ; j < info -> partitions ; j ++ ) { info -> stagemasks [ j ] = 0 ; } for ( j = 0 ; j < info -> partitions ; j ++ ) { info -> stagemasks [ j ] = 0 ; } for ( j = 0 ; j < info -> partitions ; j ++ ) { for ( k = 0 ; k < 8 ; k ++ ) { if ( ( info -> stagemasks [ j ] >> k ) & 1 ) { unsigned char book = ( unsigned char ) oggpack_read ( opb, 8 ) ; if ( book >= ci -> books ) goto errout ; info -> stagebooks [ j * 8 + k ] = book ; if ( k + 1 > info -> stages ) info -> stages = k + 1 ; } } if ( oggpack_eop ( opb ) ) goto errout ; }",0
460,<S2SV_ModStart> krb5_key_data * key_data = NULL <S2SV_ModStart> == NULL ) { k5free ( key_data ) ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { k5free ( key_data ) ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { k5free ( key_data ) ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { k5free ( key_data ) ; <S2SV_ModStart> goto cleanup ; },0
461,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
462,<S2SV_ModStart> ] ) ; if ( nByte < 0 ) { rc = SQLITE_NOMEM_BKPT ; } else { <S2SV_ModStart> 1 ) ; },0
463,<S2SV_ModStart> filp ) { struct socket * sk = <S2SV_ModEnd> SOCKET_I ( inode <S2SV_ModStart> ( inode ) ; if ( sk ) sock_put ( sk,0
464,"<S2SV_ModStart> * orelse, string type_comment, <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. type_comment = type_comment",0
465,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> my_off_t <S2SV_ModEnd> mi_sort_index ( MI_CHECK <S2SV_ModStart> char * name, my_off_t * index_pos ) { reg2 uint key ; reg1 MI_KEYDEF * keyinfo ; File new_file ; my_off_t r_locks, w_locks ; MYISAM_SHARE * share = info -> s ; MI_STATE_INFO old_state ; DBUG_ENTER ( ""mi_sort_index"" ) ; for ( key = 0, keyinfo = & share -> keyinfo [ 0 ] ; key < share -> base. keys ; key ++, keyinfo ++ ) if ( keyinfo -> key_alg == HA_KEY_ALG_RTREE ) DBUG_RETURN ( 0 ) ; fn_format ( param -> temp_filename, name, """", MI_NAME_IEXT, 2 + 4 + 32 ) ; fn_format ( param -> temp_filename, param -> temp_filename, """", INDEX_TMP_EXT, 2 + 4 ) ; if ( ( new_file = mysql_file_create (",0
466,"<S2SV_ModStart> ; case NGHTTP2_ERR_UNSUPPORTED_PROTOCOL : return ""Unsupported <S2SV_blank> protocol"" ; case NGHTTP2_ERR_UNSUPPORTED_PROTOCOL_VERSION : return ""Unsupported <S2SV_blank> protocol <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_PROTOCOL_VERSION_MISMATCH : return ""Unsupported <S2SV_blank> protocol <S2SV_blank> version <S2SV_blank> mismatch"" ; case NGHTTP2_ERR_UNSUPPORTED_PROTOCOL_VERSION_MISMATCH : return ""Unsupported <S2SV_blank> protocol <S2SV_blank> version <S2SV_blank> mismatch"" ; case NGHTTP2_ERR_UNSUPPORTED_PROTOCOL_VERSION_MISMATCH : return ""Unsupported <S2SV_blank> protocol <S2SV_blank> version <S2SV_blank> mismatch"" ; case NGHTTP2_ERR_UNSUPPORTED_PROTOCOL_VERSION_MISMATCH : return ""Unsupported <S2SV_blank> protocol <S2SV_blank> version <S2SV_blank> mismatch"" ; case NGHTTP2_ERR_UNSUPPORTED_PROTOCOL_VERSION_MISMATCH : return ""Unsupported <S2SV_blank> protocol <S2SV_blank> version <S2SV_blank> mismatch"" ; case NGHTTP2_ERR_UNSUPPORTED_PROTOCOL_VERSION_MISMATCH : return ""Unsupported <S2SV_blank> protocol <S2SV_blank> version <S2SV_blank> mismatch"" ; case NGHTTP2_ERR_UNSUPPORTED_PROTOCOL_VERSION_MISMATCH : return ""Unsupported <S2SV_blank> protocol <S2SV_blank> version <S2SV_blank> mismatch",0
467,"<S2SV_ModStart> UINT error ; if (! <S2SV_ModStart>, eventId ) ||! <S2SV_ModEnd> Stream_Read_UINT32 ( s <S2SV_ModStart>, pduLength ) ) { return CHANNEL_RC_INVALID_DATA ; } <S2SV_ModEnd> # ifdef WITH_DEBUG_RDPEI",0
468,"<S2SV_ModStart> ) ; } if ( pData -> socket == INVALID_SOCKET ) { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"", pData -> description, zmq_strerror ( errno ) ) ; ABORT_FINALIZE ( RS_RET_NO_ERRCODE ) ; }",0
469,"<S2SV_ModStart> struct flowi6 fl6 ; int ret <S2SV_ModStart> daddr ) ; ret = ip6_xmit ( sk, skb, & fl6, np -> opt, np -> tclass ) ; <S2SV_ModStart>, SCTP_MIB_OUTSCTPPACKS ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> = 1 ; SCTP_INC_STATS ( sock_net ( sk ), SCTP_MIB_OUTSCTPPACKS ) ; <S2SV_ModStart>, skb, <S2SV_ModEnd> fl6, np <S2SV_ModStart> np -> opt <S2SV_ModEnd> ) ; }",0
470,"<S2SV_ModStart> == MagickFalse ) { InheritException ( exception, & image -> exception ) ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; } <S2SV_ModStart> == MagickFalse ) { InheritException ( exception, & image -> exception ) ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; } <S2SV_ModStart> == MagickFalse ) { InheritException ( exception, & image -> exception ) ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; } <S2SV_ModStart> == MagickFalse ) { InheritException ( exception, & image -> exception ) ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; } <S2SV_ModStart> == MagickFalse ) { InheritException ( exception, & image -> exception ) ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; } <S2SV_ModStart> == MagickFalse ) { InheritException ( exception, & image -> exception ) ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; } <S2SV_ModStart> == MagickFalse ) { InheritException ( exception, & image -> exception ) ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; } <S2SV_ModStart> == MagickFalse ) { InheritException ( exception, & image -> exception ) ; <S2SV_ModStart> == MagickFalse ) { InheritException ( exception, & image -> exception ) ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; } <S2SV_ModStart> == MagickFalse ) { InheritException ( exception,",0
471,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nego_process_negotiation_failure ( rdpNego <S2SV_ModStart> UINT32 failureCode ; if (! s ) { return FALSE ; } <S2SV_ModStart> = NEGO_STATE_FAIL ; return TRUE ;,0
472,"<S2SV_ModStart> = 0 ; bn_t t ; bn_null ( t ) ; RLC_TRY { bn_new ( t ) ; switch ( operation ) { case RSA_ENC : bn_zero ( m ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, RSA_PUB ) ; * p_len = k_len - 3 - m_len ; for ( int i = 0 ; i < * p_len ; i ++ ) { bn_lsh ( m, m, 8 ) ; do { rand_bytes ( & pad, 1 ) ; } while ( pad == 0 ) ; bn_add_dig ( m, m, pad ) ; } bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, 0 ) ; bn_lsh ( m, m, m_len * 8 ) ; break ; case RSA_DEC : m_len = k_len - 1 ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; if ( pad!= RSA_PUB ) { result = RLC",0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
475,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fix_interp_filter ( VP9_COMMON <S2SV_ModStart> VP9_COMMON * cm, int <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
476,"<S2SV_ModStart> & cpi -> encode_frame <S2SV_ModEnd> ; VP9_COMMON * <S2SV_ModStart> mi_cols ) ; <S2SV_ModEnd> vp9_setup_src_planes ( x <S2SV_ModStart> ( x, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vp9_setup_pre_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vp9_setup_dst_planes ( xd, get_frame_new_buffer ( cm ), 0, 0 ) ; vp9_setup_block_planes ( & x -> e_mbd, cm -> subsampling_x, cm -> subsampling_y ) ; xd -> mi [ 0 ] -> mbmi. mode = DC_PRED ; xd -> mi [ 0 ] -> mbmi. uv_mode = DC_PRED ; vpx_memset ( xd -> above_context [ 0 ], 0, sizeof ( * xd -> above_context [ 0 ] ) * 2 * aligned_mi_cols * MAX_MB_PLANE ) ; vpx_memset ( xd -> above_seg",0
477,"<S2SV_ModStart> hp ) ; if ( <S2SV_ModEnd> htc_request_check_host_hdr ( hp <S2SV_ModStart> ( hp ) <S2SV_ModEnd>!= 0 ) <S2SV_ModStart>, SLT_Error, ""Duplicated <S2SV_blank> HTTP <S2SV_blank> Host <S2SV_blank> header"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> ) ; } WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ;",0
478,"<S2SV_ModStart> EOFOp 0x07 char * magick_buffer <S2SV_ModEnd> ; Image * <S2SV_ModStart> char * ) magick_buffer <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( count!= 3 ) || ( memcmp ( magick_buffer, ""\\122\\314"", 3 )!= 0 ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; do { image -> page. x = ReadBlobLSBShort ( image ) ; image -> page. y = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; flags = ( MagickStatusType ) ReadBlobByte ( image ) ; image -> matte = flags & 0x04 ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; flags = ( MagickStatusType ) ReadBlobByte ( image ) ; image -> matte = flags & 0x08 ; image -> columns = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; flags = (",0
479,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> sizeof ( tETH_HDR ),1
480,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ps_dec -> s_cur_slice_type <S2SV_ModStart> ps_dec -> s_cur_slice_type!= IVD_SLICE_TYPE_NONE <S2SV_ModEnd> ) { ps_dec <S2SV_ModStart> ; if ( <S2SV_ModEnd> ps_dec -> s_cur_slice_type <S2SV_ModStart> ps_dec -> s_cur_slice_type!= IVD_SLICE_TYPE_NONE <S2SV_ModEnd> ) { ps_dec <S2SV_ModStart> ; if ( <S2SV_ModEnd> ps_dec -> s_cur_slice_type <S2SV_ModStart> ps_dec -> s_cur_slice_type!= IVD_SLICE_TYPE_NONE <S2SV_ModEnd> ) { ps_dec <S2SV_ModStart> ; if ( <S2SV_ModEnd> ps_dec -> s_cur_slice_type <S2SV_ModStart> ps_dec -> s_cur_slice_type!= IVD_SLICE_TYPE_NONE <S2SV_ModEnd> ) { ps_dec <S2SV_ModStart> ; if ( <S2SV_ModEnd> ps_dec -> s_cur_slice_type <S2SV_ModStart> ps_dec -> s_cur_slice_type!= IVD_SLICE_TYPE_NONE <S2SV_ModEnd> ) { ps_dec <S2SV_ModStart> ; if ( <S2SV_ModEnd> ps_dec -> s_cur_slice_type <S2SV_ModStart> ps_dec -> s_cur_slice_type <S2SV_ModStart>,0
481,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> * karg ; <S2SV_ModEnd> struct pci_dev * <S2SV_ModStart> pci_dev * pdev <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> } if ( <S2SV_ModEnd> karg -> hdr <S2SV_ModStart> hdr. iocnum <S2SV_ModEnd> < 0 ) <S2SV_ModStart> < 0 ) { printk ( MYIOC_s_ERR_FMT ""%s@%d::mptctl_getiocinfo <S2SV_blank> - <S2SV_blank> "" ""Structure <S2SV_blank> size <S2SV_blank> mismatch!\\n"", __FILE__, __LINE__ ) ; kfree ( karg ) ; return - ENODEV ; } if ( karg -> hdr. maxDataSize!= data_size ) { printk ( MYIOC_s_ERR_FMT ""%s@%d::mptctl_getiocinfo <S2SV_blank> - <S2SV_blank> "" ""Structure <S2SV_blank> size <S2SV_blank> mismatch!\\n"", __FILE__, __LINE__ ) ; kfree ( karg ) ; return - ENODEV ; } if ( karg -> hdr. maxDataSize!= data_size ) { printk ( MYIOC_s_ERR_FMT ""%s@%d::mptctl_get",0
482,"<S2SV_ModStart> ; pixels = AcquireQuantumMemory ( image -> columns, 3 * sizeof ( * pixels ) ) ; if ( pixels == ( unsigned char * ) NULL ) ThrowReaderException ( ResourceLimitError, ""MemoryAllocationFailed"" ) ; length = ( size_t ) ( 3 * image -> columns ) ; for ( y = 0 ; y < ( ssize_t ) image -> rows ; y ++ ) { count = ReadBlob ( image, length, pixels ) ; if ( ( size_t ) count!= length ) ThrowReaderException ( CorruptImageError, ""UnableToReadImageData"" ) ; p = pixels ; q = QueueAuthenticPixels ( image, 0, y, image -> columns, 1, exception ) ; if ( q == ( PixelPacket * ) NULL ) break ; SetPixelRed ( q, ScaleCharToQuantum ( 4 * * p ++ ) ) ; SetPixelGreen ( q, ScaleCharToQuantum ( 4 * * p ++ ) ) ; SetPixelBlue ( q, ScaleCharToQuantum ( 4 * * p ++ ) ) ; q ++ ; } if ( SyncAuthenticPixels ( image, 0, y, image -> columns, 1, exception ) == ( PixelPacket *",0
483,"<S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %.*s"", l, * argv ) ; exit ( EXIT_FAILURE <S2SV_ModEnd> ) ; } <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %.*s"", l, * argv ) ; exit ( EXIT_FAILURE <S2SV_ModEnd> ) ; } <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %.*s"", l, * argv ) ; exit ( EXIT_FAILURE <S2SV_ModEnd> ) ; } <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %.*s"", l, * argv ) ; exit ( EXIT_FAILURE <S2SV_ModEnd> ) ; } <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %.*s"", l, * argv ) ; exit ( EXIT_FAILURE <S2SV_ModEnd> ) ; } <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %.*s"", l, * argv ) ; exit ( EXIT_FAILURE <S2SV_ModEnd> ) ; } <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %.*s"", l, * argv ) ; exit ( EXIT_FAILURE <S2SV_ModEnd> ) ; exit <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %.*s"", l, * argv ) ; exit ( EXIT_FAILURE <S2SV_ModEnd> )",0
484,"<S2SV_ModStart> -> offset ; n -> order = EXIF_BYTE_ORDER_INTEL ; <S2SV_ModStart> EXIF_BYTE_ORDER_INTEL ) ; c = exif_get_short ( buf + datao, EXIF_BYTE_ORDER_INTEL ) ; datao += 2 ; exif_mnote_data_fuji_clear ( n ) ; n -> entries = exif_mem_alloc ( en -> mem, sizeof ( MnoteFujiEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( en -> log, ""ExifMnoteDataFuji"", sizeof ( MnoteFujiEntry ) * c ) ; return ; } datao += 2 ; exif_mnote_data_fuji_clear ( n ) ; n -> entries = exif_mem_alloc ( en -> mem, sizeof ( MnoteFujiEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( en -> log, ""ExifMnoteDataFuji"", sizeof ( MnoteFujiEntry ) * c ) ; return ; } tcount = 0 ;",0
485,"<S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> does <S2SV_blank> not <S2SV_blank> exist\\n"", procName, dirout <S2SV_ModEnd> ) ; return <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> does <S2SV_blank> not <S2SV_blank> exist\\n"", procName, dirout <S2SV_ModEnd> ) ; return <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> does <S2SV_blank> not <S2SV_blank> exist\\n"", procName, dirout <S2SV_ModEnd> ) ; return <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> does <S2SV_blank> not <S2SV_blank> contain\\n"", procName, dirout <S2SV_ModEnd> ) ; return <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> does <S2SV_blank> not <S2SV_blank> contain\\n"", procName, dirout <S2SV_ModEnd> ) ; return <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> does <S2SV_blank> not <S2SV_blank> contain\\n"", procName, dirout <S2SV_ModEnd> ) ; return <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> does <S2SV_blank> not <S2SV_blank> contain\\n"", procName, dirout <S2SV_ModEnd> ) ; return <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> does <S2SV_blank> not <S2SV_blank> contain\\n"", procName, dirout <S2SV_ModEnd> )",0
486,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> opt = service_options <S2SV_ModStart> service_options. next <S2SV_ModEnd> ; while ( <S2SV_ModStart> 0 ; } <S2SV_ModEnd> s_log ( LOG_DEBUG <S2SV_ModStart> servname ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
487,<S2SV_ModStart> void ) { if (! recovery_started ) { recovery_started = 1 ; return ; },0
488,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ;",0
489,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
490,"<S2SV_ModStart> { WORD32 i <S2SV_ModEnd> ; WORD32 num_neg_pics <S2SV_ModStart> u4_num_total_curr ; WORD8 ai1_curr_delta_poc_msb_present_flag [ MAX_DPB_SIZE ], ai1_foll_delta_poc_msb_present_flag [ MAX_DPB_SIZE ] ; WORD32 st_rps_idx ; WORD32 num_neg_pics, num_pos_pics ; WORD8 * pi1_used ; WORD16 * pi2_delta_poc ; UWORD32 u4_max_poc_lsb ; dpb_mgr_t * ps_dpb_mgr = ( dpb_mgr_t * ) ps_codec -> pv_dpb_mgr ; buf_mgr_t * ps_mv_buf_mgr = ( buf_mgr_t * ) ps_codec -> pv_mv_buf_mgr ; dpb_mgr_t * ps_dpb_mgr = ( dpb_mgr_t * ) ps_codec -> pv_dpb_mgr ; dpb_mgr_t * ps_dpb_mgr = ( d",0
491,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> print_object ( cJSON <S2SV_ModStart> child ) { if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( names = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) { cJSON_free ( entries ) ; return 0 ; } memset ( entries, 0, sizeof ( char * ) * numentries ) ; child = item -> child ; ++ depth ; if ( fmt ) len += depth ; while ( child ) { <S2SV_ModStart> string ) ; if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) { cJSON_free ( entries ) ; return 0 ; } memset ( names, 0, sizeof ( char * ) * numentries ) ; child = child -> next ; } if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) { cJSON_free ( entries ) ; return 0 ; } memset ( names,",0
492,"<S2SV_ModStart> sk ) ; if ( writable ) unix_poll_wait ( file, & sk -> sk_receive_queue, wait ) ; <S2SV_ModStart> { if ( unix_peer ( other )!= sk ) { sock_poll_wait ( file, & unix_sk ( other ) -> peer_wait, wait ) ; if ( unix_recvq_full ( other ) ) writable = 0 ; } sock_put ( other ) ; } if ( writable ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; if ( writable ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else <S2SV_ModEnd> set_bit ( SOCK_ASYNC_NOSPACE <S2SV_ModStart> flags ) ; <S2SV_ModEnd> return mask ;",0
493,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; fflush ( outputbuffer ) ;",0
494,<S2SV_ModStart> * minor_status = GSS_S_DEFECTIVE_TOKEN ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } ptr = ( unsigned char * ) trailer -> buffer. value + token_wrapper_len ; signalg = ptr [ 0 ] ; signalg |= ptr [ 1 ] << 8 ; sealalg = ptr [ 2 ] ; sealalg |= ptr [ 3 ] << 8 ; if ( ptr [ 4 ]!= 0xFF || ptr [ 5 ]!= 0xFF ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } if ( header -> buffer. length < token_wrapper_len ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } if ( header -> buffer. length < token_wrapper_len + 14 ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } ptr = ( unsigned char * ) header -> buffer. value + token_wrapper_len ; signalg = ptr [ 0 ] ;,0
495,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { vpx_ref_frame_t <S2SV_ModEnd> * frame = <S2SV_ModStart> ( args, vpx_ref_frame_t <S2SV_ModEnd> * ) ; <S2SV_ModStart> * fb ; vpx_get_reference_enc <S2SV_ModEnd> ( ctx ->",0
496,<S2SV_ModStart> plug ) ; <S2SV_ModEnd> put_ioctx ( ctx,0
497,"<S2SV_ModStart> * name, my_bool <S2SV_ModEnd> rep_quick ) { <S2SV_ModStart> ) ) || init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> read_buffer_length, READ_CACHE, share -> pack. header_length, 1, MYF ( MY_WME ) ) || <S2SV_ModStart> ) ) || init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, READ_CACHE, share -> pack. header_length, 1, MYF ( MY_WME ) ) ||",0
498,"<S2SV_ModStart> s } ; uECC_word_t p [ uECC_MAX_WORDS * 2 ] ; wordcount_t num_words = curve -> num_words ; wordcount_t num_n_words = BITS_TO_WORDS ( curve -> num_n_bits ) ; bitcount_t num_n_bits = curve -> num_n_bits ; if ( uECC_vli_isZero ( k, num_words ) || uECC_vli_cmp ( curve -> n, k, num_words )!= 1 ) { return 0 ; } carry = regularize_k ( k, tmp, s, curve ) ; EccPoint_mult ( p, curve -> G, k2 [! carry ], 0, num_n_bits + 1, curve ) ; if ( uECC_vli_isZero ( p, num_words ) ) { return 0 ; } if (! g_rng_function ) { uECC_vli_clear ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! uECC_generate_random_int ( tmp, curve",0
499,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|dao-truncated]"" <S2SV_ModEnd> ) ) ;",0
500,<S2SV_ModStart> ; } else <S2SV_ModEnd> { uint32_t new_free_total <S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
501,"<S2SV_ModStart> tp ; { int cval = 0, meta = 0 ; if ( * cp == '\\\\' && cp [ 1 ] && index ( ""mM"", cp [ 1 ] ) && cp [ 2 ] ) { meta = 1 ; cp += 2 ; } if ( * cp == '\\\\' && cp [ 1 ] && index ( ""0123456789xXoO"", cp [ 1 ] ) && cp [ 2 ] ) { NEARDATA const char hex [ ] = ""00112233445566778899aAbBcCdDeEfF"" ; const char * dp ; int dcount = 0 ; cp ++ ; if ( * cp == 'x' || * cp == 'X' ) for ( ++ cp ; * cp && ( dp = index ( hex, * cp ) ) && ( dcount ++ < 2 ) ; cp ++ ) cval = ( cval * 16 ) + ( ( int ) ( dp - hex ) / 2 ) ; else if ( * cp == 'o' || * cp == 'O' ) for ( ++ cp ; * cp && ( index ( ""01234567"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval =",0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
503,"<S2SV_ModStart>, * pixd, * pixwc <S2SV_ModStart> == NULL ) { pixDestroy ( & pixc ) ; <S2SV_ModStart> NULL ) ; } <S2SV_ModStart> == NULL ) { pixDestroy ( & pixc ) ; <S2SV_ModStart> NULL ) ; } <S2SV_ModStart> == NULL ) { pixDestroy ( & pixc ) ; <S2SV_ModStart> NULL ) ; } <S2SV_ModStart> == NULL ) { pixDestroy ( & pixc ) ; <S2SV_ModStart> NULL ) ; } <S2SV_ModStart> == NULL ) { pixDestroy ( & pixc ) ; <S2SV_ModStart> NULL ) ; } <S2SV_ModStart> == NULL ) { pixDestroy ( & pixc ) ; <S2SV_ModStart> NULL ) ; } <S2SV_ModStart> == NULL ) { pixDestroy ( & pixc ) ; <S2SV_ModStart> NULL ) ; } <S2SV_ModStart> == NULL ) { pixDestroy ( & pixc ) ; <S2SV_ModStart> NULL ) ; } <S2SV_ModStart> == NULL ) { pixDestroy ( & pixc ) ; <S2SV_ModStart> NULL ) ; } <S2SV_ModStart> == NULL ) { pixDestroy ( & pixc ) ; <S2SV_ModStart> NULL ) ; } <S2SV_ModStart> == NULL ) { pixDestroy ( & pixc ) ; <S2SV_ModStart> NULL ) ; } <S2SV_ModStart> == NULL ) { pixDestroy ( & pixc ) ; <S2SV_ModStart> == NULL ) { pixDestroy ( & pixc ) ; <S2SV_ModStart> NULL ) ; }",0
504,<S2SV_ModStart>. vf = vpx_mse16x16 <S2SV_ModEnd> ; xd ->,1
505,"<S2SV_ModStart> data ; int size = overhead ; if ( mongo_validate_ns ( conn, ns )!= MONGO_OK ) return MONGO_ERROR ; for ( i = 0 ; i < count ; i ++ ) { size += bson_size ( bsons [ i ] ) ; if ( mongo_bson_valid ( conn, bsons [ i ], 1 )!= MONGO_OK ) return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } mm = mongo_message_create ( size, 0, 0, MONGO_OP_INSERT ) ; data = & mm -> data ; if ( flags & MONGO_CONTINUE_ON_ERROR ) data = mongo_data_append32 ( data, & ONE ) ; else data = mongo_data_append32 ( data, & ZERO ) ; for ( i = 0 ; i < count ; i ++ ) { data = mongo_data_append ( data, bsons [ i ] -> data, bson_size ( bsons [ i",0
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NEGO_STATE_FAIL ; goto fail <S2SV_ModEnd> ; } Stream_Read_UINT8 <S2SV_ModStart> = NEGO_STATE_FINAL ; return ; fail : return ;,0
507,"<S2SV_ModStart> i, target_bits_per_mb <S2SV_ModEnd> ; target_bits_per_mb = <S2SV_ModStart> int bits_per_mb_at_this_q = <S2SV_ModEnd> vp9_rc_bits_per_mb ( cm <S2SV_ModStart> cm -> frame_type <S2SV_ModEnd> ) ; if",0
508,<S2SV_ModStart> ; value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1101WritePhyReg (,0
509,<S2SV_ModStart>! arg ) { asdl_seq_free ( posargs ) ; return NULL ; } <S2SV_ModEnd> if (! <S2SV_ModStart>! arg ) { asdl_seq_free ( kwonlyargs ) ; return NULL ; } <S2SV_ModEnd> if (! <S2SV_ModStart>! arg ) { asdl_seq_free ( posdefaults ) ; return NULL ; } <S2SV_ModEnd> if (! <S2SV_ModStart>! arg ) { asdl_seq_free ( kwdefaults ) ; return NULL ; } <S2SV_ModEnd> if (! <S2SV_ModStart>! arg ) { asdl_seq_free ( posdefaults ) ; return NULL ; } <S2SV_ModEnd> if (! <S2SV_ModStart>! arg ) { asdl_seq_free ( kwdefaults ) ; return NULL ; } <S2SV_ModEnd> if (! <S2SV_ModStart>! arg ) { asdl_seq_free ( posdefaults ) ; return NULL ; } <S2SV_ModEnd> if (! <S2SV_ModStart>! arg ) { asdl_seq_free ( kwdefaults ) ; return NULL ; } <S2SV_ModEnd> if (! <S2SV_ModStart>! arg ) { asdl_seq_free ( varargs ) ; return NULL ; } <S2SV_ModEnd> if (! <S2SV_ModStart>! arg ) { asdl_seq_free ( kwdefaults ) ; return NULL ; } <S2SV_ModEnd> if (! <S2SV_ModStart>! arg ) { asdl_seq_free ( var,0
510,"<S2SV_ModStart> int dst_stride, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart> int i ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> uint8_t, left_col <S2SV_ModEnd> ) ; DECLARE_ALIGNED <S2SV_ModStart> plane ] ; <S2SV_ModEnd> if ( plane <S2SV_ModStart> + y ; memset <S2SV_ModEnd> ( left_col, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; mem",0
511,"<S2SV_ModStart> ++ ; } else if ( pattern [ end ] == \'""\' ) { end ++ ; while ( ( pattern [ end ]!= 0 ) && ( pattern [ end ]!= \'""\' ) ) end ++ ; }",0
512,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_completed_io_lock ) ;,1
513,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> show_frame ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> show_frame ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> KEY_FRAME ) { vpx_wb_write_sync_code ( wb ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; } vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> SRGB ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
514,"<S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, strerror ( <S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, strerror ( <S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, strerror ( <S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, strerror ( <S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, strerror ( <S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, strerror ( <S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, strerror ( <S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, strerror ( <S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, strerror ( <S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, strerror ( <S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, strerror ( <S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, strerror ( <S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, strerror ( <S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, strerror ( <S2SV_ModStart> (",0
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { q = osStrchr <S2SV_ModEnd> ( p +,1
516,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
517,<S2SV_ModStart> KEY_FRAME ) { memcpy <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd ->,1
518,"<S2SV_ModStart> error_t error ; int16_t <S2SV_ModEnd> n ; uint32_t <S2SV_ModStart> ( interface, ENC624J600_ESTAT <S2SV_ModEnd> ) & ESTAT_PKTCNT <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD",0
519,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv <S2SV_ModEnd> ) { xmlSchemaPtr <S2SV_ModStart> xmlSchemaPtr schema ; VALUE rb_schema ; VALUE errors = rb_ary_new ( ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; # ifdef HAVE_XMLSCHEMASETPARSERSTRUCTUREDERRORS xmlSchemaSetParserStructuredErrors ( ctx, Nokogiri_error_array_pusher, ( void * ) errors ) ; # endif schema = xmlSchemaParse ( ctx ) ; xmlSetStructuredErrorFunc ( NULL, NULL ) ; xmlSchemaFreeParserCtxt ( ctx ) ; if ( NULL == schema ) { xmlErrorPtr error = xmlGetLastError ( ) ; if ( error ) Nokogiri_error_raise ( NULL, error ) ; else rb_raise ( rb_eRuntimeError, ""Could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> document"" ) ; return Qnil ; } rb_schema = Data_Wrap_Struct ( klass, 0, dealloc, schema ) ; rb_iv_set ( rb_schema, ""@errors"", errors ) ; return rb_schema ; } rb_iv_set ( rb_",0
520,<S2SV_ModStart>!= CONF_RELOAD ) { <S2SV_ModStart> ( ) ; } <S2SV_ModStart>!= CONF_RELOAD ) { <S2SV_ModStart> ( ) ; } <S2SV_ModStart>!= CONF_RELOAD ) { <S2SV_ModStart> ( ) ; } <S2SV_ModStart>!= CONF_RELOAD ) { <S2SV_ModStart> ( ) ; } <S2SV_ModStart>!= CONF_RELOAD ) { <S2SV_ModStart> ( ) ; } <S2SV_ModStart>!= CONF_RELOAD ) { <S2SV_ModStart> ( ) ; } <S2SV_ModStart>!= CONF_RELOAD ) { <S2SV_ModStart> ( ) ; } <S2SV_ModStart>!= CONF_RELOAD ) { <S2SV_ModStart> ( ) ; } <S2SV_ModStart>!= CONF_RELOAD ) { <S2SV_ModStart> ( ) ; } <S2SV_ModStart>!= CONF_RELOAD ) { <S2SV_ModStart> ( ) ; } <S2SV_ModStart>!= CONF_RELOAD ) { <S2SV_ModStart> ( ) ; } <S2SV_ModStart>!= CONF_RELOAD ) { <S2SV_ModStart> ( ) ; } <S2SV_ModStart>!= CONF_RELOAD ) { <S2SV_ModStart> ( ) ; } <S2SV_ModStart>!= CONF_RELOAD ) { <S2SV_ModStart> ( ) ; } <S2SV_ModStart>!= CONF_RELOAD ) { <S2SV_ModStart> ( ) ; } <S2SV_ModStart>!= CONF_RELOAD ) { <S2SV_ModStart> ( ) ; } <S2SV_ModStart>!= CONF_RELOAD ) { <S2SV_ModStart> ( ) ; } <S2SV_ModStart>!= CONF_RELOAD ) { <S2SV_ModStart> ( ) ; } <S2SV_ModStart>!,0
521,"<S2SV_ModStart> 2 ] ; memcpy ( out + 4, ptr + 4, state -> xsize ) <S2SV_ModEnd> ; } state <S2SV_ModStart> 2 ] ; memcpy ( out + 4, ptr + 5, state -> xsize ) <S2SV_ModEnd> ; } state",0
522,<S2SV_ModStart> err = - <S2SV_ModEnd> EALREADY ; if,0
523,<S2SV_ModStart> POLL_IN ) ; <S2SV_ModEnd> perf_event_wakeup ( handle,0
524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int utf8s_to_utf16s ( <S2SV_ModEnd> u8 * s <S2SV_ModStart> len, wchar_t * <S2SV_ModStart> = pwcs ; if ( len < 0 ) return - EINVAL ; <S2SV_ModStart> if ( u > <S2SV_ModEnd> PLANE_SIZE ) { <S2SV_ModStart> PLANE_SIZE ) { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( u & SURROGATE_BITS ) ) ; } else { * op ++ = ( wchar_t ) u ; } s += size ; len -= size ; } else { * op ++ = * s ++ ; len -- ; } } return <S2SV_ModEnd> op - pwcs <S2SV_ModStart> pwcs ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
525,"<S2SV_ModStart> EPROTONOSUPPORT ) { if ( as_console ) { sleep ( 2 ) ; } <S2SV_ModStart> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" <S2SV_ModEnd> ) ; }",0
526,"<S2SV_ModStart> ( interface, KSZ8851_RXFHSR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_RXFHBCR ) & KSZ8851_RXFHBCR_RXBC_MASK <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( interface, KSZ8851_RXFDPR, KSZ8851_RXFDPR_RXFPAI <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851ReadFifo <S2SV_ModStart> ( interface, KSZ8851_RXFDPR, KSZ8851_RXFDPR_RXFPAI <S2SV_ModEnd> ) ; ksz8851ClearBit <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ancillary <S2SV_ModStart> ( interface, KSZ8851_",0
527,"<S2SV_ModStart> stmt_ty ast_for_funcdef_impl ( <S2SV_ModEnd> const node * <S2SV_ModStart> * n, asdl_seq * decorator_seq, int is_async ) { identifier name ; arguments_ty args ; asdl_seq * body ; expr_ty returns = NULL ; int name_i = 1 ; node * tc ; string type_comment = NULL ; if ( is_async && c -> c_feature_version < 5 ) { ast_error ( c, n, ""Async <S2SV_blank> functions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.5 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } REQ ( n, funcdef ) ; name = NEW_IDENTIFIER ( CHILD ( n, name_i ) ) ; if (! name ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i ), 0 ) ) return NULL ; args = ast_for_arguments ( c, CHILD ( n, name_i + 1 ) ) ; if (! args ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 2 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CH",0
528,"<S2SV_ModStart> ( mm, 0xA1C000 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( pgd, 0xA1C000 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( pud, 0xA1C000 <S2SV_ModEnd> ) ; split_huge_page_pmd <S2SV_ModStart>, pmd, 0xA1C000 <S2SV_ModEnd>, & ptl <S2SV_ModStart> : flush_tlb ( ) ; mm_dec_nr_pmds ( mm",0
529,"<S2SV_ModStart> { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> token <S2SV_blank> not <S2SV_blank> valid!"" <S2SV_ModEnd> ) ; ret_status <S2SV_ModStart> { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> token <S2SV_blank> not <S2SV_blank> valid!"" <S2SV_ModEnd> ) ; ret_status <S2SV_ModStart> { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> token <S2SV_blank> not <S2SV_blank> valid!"" <S2SV_ModEnd> ) ; ret_status <S2SV_ModStart> { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> token <S2SV_blank> not <S2SV_blank> valid!"" <S2SV_ModEnd> ) ; ret_status <S2SV_ModStart> { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> token <S2SV_blank> not <S2SV_blank> valid!"" <S2SV_ModEnd> ) ; ret_status <S2SV_ModStart> { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> token <S2SV_blank> not <S2SV_blank> valid!"" <S2SV_ModEnd> ) ; ret_status <S2SV_ModStart> { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> token <S2SV_blank> not <S2SV_blank> valid!"" <S2SV_ModEnd> ) ; ret_status <S2SV_ModStart> { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> token <S2SV_blank> not <S2SV_blank> valid!"" <S2SV_ModEnd> ) ; ret",0
530,"<S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> ADB <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" <S2SV_ModEnd> ) ; print_usage <S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> ADB <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" <S2SV_ModEnd> ) ; print_usage <S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> ADB <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" <S2SV_ModEnd> ) ; print_usage <S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> ADB <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" <S2SV_ModEnd> ) ; print_usage <S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> ADB <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" <S2SV_ModEnd> ) ; print_usage <S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> ADB <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" <S2SV_ModEnd> ) ; print_usage <S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> ADB <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" <S2SV_ModEnd> ) ; print_usage <S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> ADB",0
531,"<S2SV_ModStart> ; row < raw_height <S2SV_ModEnd> ; row ++ <S2SV_ModStart> 4 ) ; } for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { if ( ( i = col % 14 ) == 0 ) pred [ 0 ] = nonz [ 0 ] = 0 ; if ( i % 3 == 2 ) sh = 4 >> ( 3 - pana_bits ( 2 ) ) ; if ( ( j = pana_bits ( 8 ) ) ) { if ( ( pred [ i & 1 ] -= 0x80 << sh ) < 0 || sh == 4 ) pred [ i & 1 ] &= ~ ( ( ~ 0u ) << sh ) ; pred [ i & 1 ] = j << sh ; } } else if ( ( j = pana_bits ( 8 ) ) || i > 11 ) pred [ i & 1 ] = ( j << 4 ) << 4 | pana_bits ( 4 ) ; if ( ( RAW ( row, col ) = pred [ col & 1 ] ) > 4098 && col < width ) derror ( ) ; }",0
532,<S2SV_ModStart> len < needed || len > param -> data_start,0
533,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
534,<S2SV_ModStart> ( bfqq ) __bfq_idle_slice_timer_body <S2SV_ModEnd> ( bfqq ),0
535,<S2SV_ModStart> ; length += sizeof ( PRIMARY_DRAWING_ORDER_FIELD ) <S2SV_ModEnd> ; length +=,0
536,<S2SV_ModStart> -> d_inode ) { err = - EBUSY ; <S2SV_ModStart> goto out ; } <S2SV_ModStart> -> d_inode ) { err = - EBUSY ; <S2SV_ModStart> goto out ; } <S2SV_ModStart> d_inode ) ) { err = - EBUSY ; <S2SV_ModStart> goto out ; } <S2SV_ModStart> d_inode ) ) { err = - EBUSY ; <S2SV_ModStart> goto out ; } <S2SV_ModStart> d_inode ) ) { err = - EBUSY ; <S2SV_ModStart> goto out ; } <S2SV_ModStart> d_inode ) ) { err = - EBUSY ; <S2SV_ModStart> goto out ; } <S2SV_ModStart> d_inode ) ) { err = - EBUSY ; <S2SV_ModStart> goto out ; } <S2SV_ModStart> d_inode ) ) { err = - EBUSY ; <S2SV_ModStart> goto out ; } <S2SV_ModStart> d_inode ) ) { err = - EBUSY ; <S2SV_ModStart> goto out ; } <S2SV_ModStart> d_inode ) ) { err = - EBUSY ; <S2SV_ModStart> goto out ; } <S2SV_ModStart> d_inode ) ) { err = - EBUSY ; <S2SV_ModStart> goto out ; } <S2SV_ModStart> d_inode ) ) { err = - EBUSY ; <S2SV_ModStart> goto out ; },0
537,<S2SV_ModStart> < MAX_MB_PLANE ; ++ plane <S2SV_ModEnd> ) vp9_foreach_transformed_block_in_plane (,1
538,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> nonrd_pick_sb_modes ( VP9_COMP <S2SV_ModStart> -> e_mbd ; if (! frame_is_intra_only ( cm ) ) { vp9_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } else { MB_PREDICTION_MODE intramode = DC_PRED ; set_mode_info ( & xd -> mi [ 0 ] -> mbmi, bsize, intramode ) ; } <S2SV_ModStart> bsize ) ; <S2SV_ModEnd> duplicate_mode_info_in_sb ( cm <S2SV_ModStart> bsize ) ; return 0 ;",0
539,"<S2SV_ModStart> = NULL ; if ( strcmp ( filename, ""-"" ) ) fclose ( reader. fhd ) ; <S2SV_ModStart> superblock ) ; <S2SV_ModEnd> hrtf = getHrtf",0
540,"<S2SV_ModStart> -> ranges = calloc ( 1, <S2SV_ModEnd> sizeof ( MappedRange",0
541,"<S2SV_ModStart> ; if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_ALTR_FRAME ; vp8_use_as_reference ( ctx -> cpi, ref ) ; } if (",0
542,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
543,<S2SV_ModStart>! head ) <S2SV_ModEnd> return - EINVAL <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
544,"<S2SV_ModStart> * pptr, u_int64 <S2SV_ModEnd> len ) { <S2SV_ModStart> advance ; u_int64 <S2SV_ModEnd> tlen ; const <S2SV_ModStart> ) ) ; ND_TCHECK2 ( tptr [ 2 ], as_size ) ; ND_PRINT ( ( ndo, ""%s <S2SV_blank> "", as_printf ( ndo, astostr, sizeof ( astostr ), as_size == 2? & tptr [ 2 + i ] : EXTRACT_32BITS ( & tptr [ 2 + i ] ) ) ) ) ;",0
545,"<S2SV_ModStart> res -> outputbuffer, ""<table <S2SV_blank> id=\'status-table\'><tr>"" <S2SV_ModEnd> ""<th <S2SV_blank> width=\'40%%\'>Parameter</th>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""<th <S2SV_blank> width=\'60%%\'>Name</th>""",0
546,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
547,"<S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr1, <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2, <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr1 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr1 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr1 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr1 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr1 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr1 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart>",0
548,"<S2SV_ModStart> iad_num ++ ; if ( iad_num >= nintf ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, nintf_orig, nintf ) ; nintf = USB_MAXINTERFACES ; }",0
549,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
550,<S2SV_ModStart> ; distortion = vpx_variance16x16 <S2SV_ModEnd> ( * (,1
551,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_ECON2_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR4 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR5 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR6 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR7 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR8 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR9 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR10 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR11 <S2SV_ModEnd>,",0
552,"<S2SV_ModStart> * start ; va_start ( argptr, format ) ; vsnprintf ( start, sizeof ( psf -> header ), format, argptr ) ; va_end ( argptr ) ; start [ sizeof ( psf -> header ) - 1 ] = 0 ; <S2SV_ModStart> header ) ; <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> headindex += <S2SV_ModEnd> strlen ( ( <S2SV_ModStart> header ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
553,<S2SV_ModStart> -> alg_priv ) { <S2SV_ModStart> alg_priv ) ; ctx -> priv -> alg_priv = NULL ; },0
554,"<S2SV_ModStart> { sf -> <S2SV_ModEnd> recode_loop = ( <S2SV_ModStart>! frame_is_intra_only ( cpi <S2SV_ModEnd> ) ; sf <S2SV_ModStart> ; sf -> <S2SV_ModEnd> tx_size_search_method = vp9_frame_is_boosted <S2SV_ModStart> ( cpi )? USE_FULL_RD : USE_LARGESTALL ; if ( MIN ( cm -> width, cm -> height ) >= 720 ) sf -> disable_split_mask = cm -> show_frame? DISABLE_ALL_SPLIT : DISABLE_ALL_INTER_SPLIT ; else sf -> disable_split_mask = DISABLE_COMPOUND_SPLIT ; sf -> use_rd_breakout = 1 ; sf -> adaptive_motion_search = 1 ; sf -> auto_mv_step_size = 1 ; sf -> adaptive_rd_thresh = 2 ; sf -> subpel_iters_per_step = 1 ; sf -> mode_skip_start = 10 ; sf -> adaptive_pred_interp_filter = 1 ; sf -> recode_loop = ALLOW_RECODE_KFARFGF ; sf -> intra_y_mode_mask [ TX_32X32 ] = INT",0
555,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
556,"<S2SV_ModStart> int goodsize = ( <S2SV_ModStart> 2 * EXTRA_STACK ) <S2SV_ModStart> ; if ( goodsize > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else condmovestack ( L, { }, { } ) ; luaE_shrinkCI ( L ) ; goodsize = inuse + ( inuse / 8 ) + 2 * EXTRA_STACK ; if ( goodsize > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else condmovestack ( L, { }, { } ) ; if ( goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else condmovestack ( L, { }, { } ) ; }",0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,"<S2SV_ModStart>, * s <S2SV_ModEnd> ; int quote <S2SV_ModStart> errstr ) { <S2SV_ModEnd> char buf [ <S2SV_ModStart> 128 ] ; if (! _PyUnicode_AsString ( errstr ) ) { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } Py_DECREF ( type ) ; Py_DECREF ( value ) ; Py_XDECREF ( tback ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } Py_DECREF ( type ) ; Py_DECREF ( value ) ; Py_XDECREF ( tback ) ; } # endif return NULL ; } PyArena_AddPyObject ( c -> c_arena, str ) ; return Str ( str, kind, LINENO ( n ), n -> n_col_offset, c -> c_arena ) ; } case INTEGER : { PyObject * pynum = parsinteger ( c, STR ( ch ) ) ; if (! pynum ) { return NULL ; } PyArena_AddPyObject ( c -> c_arena, str ) ; return Str ( str, kind, LINEN",0
559,"<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> break ; } input_string = strdup ( option_value ) ; option_name = strtok_r ( NULL, ""="", & input_ptr ) ; while ( option_name!= NULL ) { option_value = strtok_r ( NULL, "" <S2SV_blank> "", & input_ptr ) ; if ( option_value == NULL ) { svc_log ( svc_ctx, SVC_LOG_ERROR, ""option <S2SV_blank> missing <S2SV_blank> value: <S2SV_blank> %s\\n"", option_name ) ; res = VPX_CODEC_INVALID_PARAM ; break ; } if ( strcmp ( ""encoding-mode"", option_name ) == 0 ) { res = set_option_encoding_mode ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""layers"", option_name ) == 0 ) { svc_ctx -> spatial_layers = atoi ( option_value ) ; } else if ( strcmp ( ""scale-factors"", option_name ) == 0 ) { res = parse_scale_factors",0
560,<S2SV_ModStart> ) ; } <S2SV_ModEnd> mb_index = 0 <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; },0
561,<S2SV_ModStart> self ) { size_t <S2SV_ModEnd> i ; PyObject,1
562,,1
563,"<S2SV_ModStart> ( dbh, ""%s"", mysql_error ( imp_dbh -> pmysql ) ) ; if ( mysql_errno ( imp_dbh -> pmysql )!= 0 ) do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; else do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ) ) ; return FALSE ; } DBIc_ACTIVE_on ( imp_dbh ) ; DBIc_on ( imp_dbh, DBIcf_IMPSET ) ; return TRUE ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
564,"<S2SV_ModStart> || ( ioctl ( slot -> fd, FIONREAD, & size ) == 0 <S2SV_ModEnd> ) ) pthread_mutex_unlock <S2SV_ModStart> ( need_close || ioctl ( slot -> fd, FIONREAD, & size )!= 0 <S2SV_ModEnd> ) cleanup_rfc_slot (",0
565,<S2SV_ModStart> ; struct ieee_802_11_phdr * phdr = NULL <S2SV_ModEnd> ; col_set_str ( <S2SV_ModStart> struct ieee_802_11_phdr phdr ; phdr = ( struct ieee_802_11_phdr * ) malloc ( sizeof ( * phdr ) ) <S2SV_ModStart> ; if ( phdr ) { phdr = ( struct ieee_802_11_phdr * ) malloc ( sizeof ( * phdr ) ) ; phdr = ( struct ieee_802_11_phdr * ) malloc ( sizeof ( * phdr ) ) ; } if ( <S2SV_ModStart> ; if ( phdr ) { phdr = ( struct ieee_802_11_phdr * ) malloc ( sizeof ( * phdr ) ) ; phdr = ( struct ieee_802_11_phdr * ) malloc ( sizeof ( * phdr ) ) ; phdr = ( struct ieee_802_11_phdr * ) malloc ( sizeof ( * phdr ) ) ; phdr = ( struct ieee_802_11_phdr * ) malloc ( sizeof ( * phdr ) ),0
566,<S2SV_ModStart> ; sh = s_calloc <S2SV_ModEnd> ( hdrlen +,0
567,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> BYTE a_val ; if (! context ) return FALSE ; <S2SV_ModStart> -> ColorLossLevel ; if (! context -> priv -> PlaneBuffers ) return FALSE ; <S2SV_ModStart> ; } } return TRUE ;,0
568,<S2SV_ModStart> > nr_parens ) { ret = - EINVAL ; goto out_free ; } <S2SV_ModEnd> * ( ++,1
569,"<S2SV_ModStart> cpi ) { int target ; if ( cpi -> common. current_video_frame == 0 ) { const int initial_boost = 32 ; int kf_boost = MAX ( initial_boost, ( int ) ( 2 * cpi -> output_framerate - 16 ) ) ; if ( rc -> frames_since_key < cpi -> output_framerate / 2 ) { kf_boost = ( int ) ( kf_boost * rc -> frames_since_key / ( cpi -> output_framerate / 2 ) ) ; } target = ( ( cpi -> oxcf. starting_buffer_level / 2 ) > INT_MAX )? INT_MAX : ( int ) ( cpi -> oxcf. starting_buffer_level / 2 ) ; } else { <S2SV_ModStart> rc -> frames_since_key > <S2SV_ModEnd> cpi -> output_framerate <S2SV_ModStart> -> output_framerate / 2 ) { kf_boost = ( int ) ( kf_boost * rc -> frames_since_key / ( cpi -> output_framerate / 2 ) ) ; } target = ( ( 16 + kf_boost ) * rc -> av_per_frame_",0
570,"<S2SV_ModStart> TX_MODE read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r )",1
571,"<S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd>",0
572,"<S2SV_ModStart> -> cpi ; MACROBLOCK * const mb = & cpi -> mb. plane [ plane ] ; <S2SV_ModStart> args -> xd <S2SV_ModEnd> ; uint8_t token_cache <S2SV_ModStart> & cpi -> <S2SV_ModEnd> plane [ plane <S2SV_ModStart> plane_type ; const tran_low_t <S2SV_ModEnd> * qcoeff = <S2SV_ModStart> = cpi -> fc. coef_probs [ tx_size ] [ type ] [ ref ] ; vp9_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> <S2SV_ModEnd> fc. coef_probs <S2SV_ModStart> ] [ ref ] ; unsigned int ( * const eob_branch ) [ COEFF_CONTEXTS ] = cpi -> common. counts. eob_branch [ tx_size ] [ type ] [ ref ] ; const uint8_t * const band = get_band_translate ( tx_size ) ; const int seg_eob = get_tx_eob ( & cpi -> common. seg, segment_id, tx_size ) ; int aoff, loff ; txfrm_block_to_raster_xy ( plane_bsize, tx_size, block, & aoff, &",0
573,"<S2SV_ModStart>. pRename ; Select_item * pItem ; <S2SV_ModStart> -> pSrc ; if ( pItem == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; } for ( i = 0 ; i < pSrc -> nSrc ; i ++ ) { struct SrcList_item * pItem = & pSrc -> a [ i ] ; if ( pItem -> pTab == p -> pTab ) { renameTokenFind ( pWalker -> pParse, p, pItem -> zName ) ; } } renameWalkWith ( pWalker, pSelect ) ; if ( pSrc == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; } for ( i = 0 ; i < pSrc -> nSrc ; i ++ ) { struct SrcList_item * pItem = & pSrc -> a [ i ] ; if ( pItem -> pTab == p -> pTab ) { renameTokenFind ( pWalker -> pParse, p, pItem -> zName ) ; } }",0
574,"<S2SV_ModStart> users ) ; if ( cb_info -> serv ) { printk ( KERN_ERR ""nfs_callback_create_svc: <S2SV_blank> create <S2SV_blank> service <S2SV_blank> failed\\n"" ) ; return ERR_PTR ( - ENOMEM ) ; } cb_info -> serv = serv = svc_create ( & nfs4_callback_program, NFS4_CALLBACK_BUFSIZE, sv_ops ) ; if (! serv ) { printk ( KERN_ERR ""nfs_callback_create_svc: <S2SV_blank> create <S2SV_blank> service <S2SV_blank> failed\\n"" ) ; return ERR_PTR ( - ENOMEM ) ; } cb_info -> serv = serv ; serv -> sv_maxconn = 1024 ; dprintk ( ""nfs_callback_create_svc: <S2SV_blank> service <S2SV_blank> created\\n"" ) ; <S2SV_ModStart> sv_ops ) ; <S2SV_ModEnd> return serv ;",0
575,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
576,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
577,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
578,"<S2SV_ModStart> { do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> s, 0 )",0
579,"<S2SV_ModStart> next ) { if ( strcmp ( prop_name, XML_ATTR_ID ) == 0 ) { continue ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else { char * path = xml_get_path ( xml ) ; crm_trace ( ""Cannot <S2SV_blank> add <S2SV_blank> new <S2SV_blank> node <S2SV_blank> %s <S2SV_blank> at <S2SV_blank> %s"", crm_element_name ( xml ), path ) ; if ( xml!= xmlDocGetRootElement ( xml -> doc ) ) { xmlUnlinkNode ( xml ) ; xmlFreeNode ( xml ) ; return ; } free ( path ) ; return ; } } else { <S2SV_ModStart> ; } } <S2SV_ModEnd> while ( cIter",0
580,<S2SV_ModStart> <S2SV_null> static const SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> return ( const SvcInternal_t <S2SV_ModEnd> * ) svc_ctx,1
581,"<S2SV_ModStart> ) ; } if ( hkey. type == HASH_KEY_IS_LONG ) { zend_hash_update ( params, hkey. str, sizeof ( ""arguments"" ), ( void * ) & tmp, sizeof ( zval * ), ( void * ) & args ) ; * current_args = args ; }",0
582,"<S2SV_ModStart> only_420 ) { <S2SV_ModEnd> int ret ; <S2SV_ModStart> = VPX_IMG_FMT_I420 ; <S2SV_ModEnd> if ( strcmp <S2SV_ModStart> ( _y4m -> chroma_fmt <S2SV_ModEnd>, _y4m -> <S2SV_ModStart> ( _y4m -> chroma_bps <S2SV_ModEnd>, _y4m -> <S2SV_ModStart> ( _y4m -> chroma_fmt <S2SV_ModEnd>, _y4m -> <S2SV_ModStart> ( _y4m -> chroma_bps <S2SV_ModEnd>, _y4m -> <S2SV_ModStart> ( _y4m -> chroma_fmt <S2SV_ModEnd>, _y4m -> <S2SV_ModStart> ( _y4m -> chroma_bps <S2SV_ModEnd>, _y4m -> <S2SV_ModStart> ( _y4m -> chroma_fmt <S2SV_ModEnd>, _y4m -> <S2SV_ModStart> ( _y4m -> chroma_bps <S2SV_ModEnd>, _y4m -> <S2SV_ModStart> ( _y4m -> chroma_bps <S2SV_ModEnd>, _y4m -> <S2SV_ModStart> ( _y4m -> chroma_fmt <S2SV_ModEnd>, _y4m -> <S2SV_ModStart> ( _y4m -> chroma_bps <S2SV_ModEnd>, _y4m -> <S2SV_ModStart> ( _y4m -> chroma_fmt <S2SV_ModEnd>, _y4m -> <S2SV_ModStart>",0
583,"<S2SV_ModStart> buf ; { if ( strlen ( buf ) >= 60 ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; }",0
584,<S2SV_ModStart> ( ) { <S2SV_ModEnd> if ( read_xattrs_from_disk <S2SV_ModStart> == 0 ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( read_uids_guids <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( parse_exports_table <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( read_fragment_table <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( read_inode_table <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( read_directory_table <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_,0
585,"<S2SV_ModStart> rule * rule, u_int flags <S2SV_ModStart> count = 0 ; env -> flags = flags <S2SV_ModStart> ; } } if ( flags & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ]!= NULL ; i ++ ) { struct envnode * node ; const char * e, * eq ; size_t len ; char keybuf [ 1024 ] ; e = strchr ( e, '=' ) ; if ( ( eq = strchr ( e, '=' ) ) == NULL || eq == e ) continue ; memcpy ( keybuf, e, len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf, eq + 1 ) ; if ( RB_INSERT ( envtree, & env -> root, node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } }",0
586,"<S2SV_ModStart> -> seg ; <S2SV_ModEnd> if ( cm <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> mi_cols ) ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> base_qindex, in_frame_q_adj_ratio [ segment ] ) ; vpx_memset ( seg, segment, SEG_LVL_ALT_Q ) ; qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> frame_type, cm -> base_qindex, in_frame_q_adj_ratio <S2SV_ModStart> ; } } vpx_memset ( cpi -> segmentation_map, 0, cm -> mi_rows * cm -> mi_cols ) ; vpx_memset ( cpi -> complexity_map, 0, cm -> mi_rows * cm -> mi_cols ) ; vp9_enable_segmentation ( seg ) ; clearall_segfeatures ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vp9_disable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta",0
587,"<S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, stmt_type",0
588,"<S2SV_ModStart> S_IWGRP | S_IROTH ) ; if ( logfile_fd < 0 ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, log_path, strerror ( errno ) ) ; is_logging = false ; return ; } write ( logfile_fd, ""btsnoop\\0\\0\\0\\1\\0\\0\\x3\\xea"", 16 ) ; } else { if ( logfile_fd!= INVALID_FD ) close ( logfile_fd ) ; logfile_fd = INVALID_FD ; btsnoop_net_close ( ) ; } write ( logfile_fd, ""btsnoop\\0\\0\\0\\1\\0\\0\\x3\\xea"", 16 ) ; } else { if ( logfile_fd!= INVALID_FD ) close ( logfile_fd ) ; logfile_fd = INVALID_FD ; btsnoop_net_close (",0
589,<S2SV_ModStart> ; } # else ( void ) cpi ; #,1
590,"<S2SV_ModStart> cinput ) { <S2SV_ModEnd> char * s <S2SV_ModStart>, * StartClean <S2SV_ModEnd> ; SetDefaults ( <S2SV_ModStart> t ++ ; sprintf ( outputbuffer <S2SV_ModEnd>, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"", <S2SV_ModStart> = outputbuffer ; fprintf ( outfile <S2SV_ModEnd>, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"", <S2SV_ModStart> = 1 ; sprintf ( outputbuffer <S2SV_ModEnd>, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", <S2SV_ModStart> SUBVERSION ) ; return ( 0 ) ; } } StartClean = outputbuffer ; nameobject = t ; while ( * t!='<S2SV_blank>'&& * t!= '\\t' || * t == '\\n' ) t ++ ; * t ++ = 0 ; while ( * t =='<S2SV_blank>'|| * t == '\\t' || * t == '\\n' ) t ++ ; if ( * s == '0' && s [ 1 ] == ']' ) { if ( strcmp ( nameobject, ""AxodrawWantsPDF"" ) == 0 ) { identification = 1 ; outpos += sprintf ( outpos, ""Axohelp <S2SV_blank>",0
591,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lower, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { int res ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { lower = NULL ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_upper, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { int res ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { upper = NULL ; } if ( lookup_attr_id ( obj, & PyId_step, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { step = NULL ; } * out = Slice ( lower, upper,",0
592,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
593,"<S2SV_ModStart> int err ; list_for_each_entry ( iter, & alink -> dscp_map, list ) { u32 cmask ; if ( iter -> handle == knode -> handle ) { match = iter ; continue ; } cmask = iter -> mask & mask ; if ( ( iter -> val & cmask ) == ( val & cmask ) && iter -> band!= knode -> res -> classid ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; } } if (! match ) { match = kzalloc ( sizeof ( * match ), GFP_KERNEL ) ; if (! match ) return - ENOMEM ; list_add ( & match -> list, & alink -> dscp_map ) ; } match -> handle = knode -> handle ; match -> band = knode -> res -> classid ; match -> mask = mask ; match -> val = val ; err = nfp_abm_update_band_map ( alink ) ; if ( err ) goto err_delete ; return 0 ; err_delete : nfp_abm_u",0
594,<S2SV_ModStart>. cfg. rc_twopass_stats_in = 0 ; if ( pass ) stream -> config. cfg. g_pass = VPX_RC_ONE_PASS ; else if ( global -> passes == 2 ) stream -> config. cfg. g_pass = VPX_RC_LAST_PASS ; else if ( global -> passes == 1 ) stream -> config. cfg. g_pass = VPX_RC_FIRST_PASS ; else if ( global -> passes == 2 ) stream -> config. cfg. g_pass = VPX_RC_LAST_PASS ; else if ( global -> passes == 2 ) stream -> config. cfg. g_pass = VPX_RC_FIRST_PASS ; else if ( global -> passes == 1 ) stream -> config. cfg. g_pass = VPX_RC_LAST_PASS ; else if ( global -> passes == 2 ) stream -> config. cfg. g_pass = VPX_RC_ONE_PASS ; else <S2SV_ModEnd> stream -> config <S2SV_ModStart> stats ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
595,"<S2SV_ModStart>, error ) ) goto out ; if ( g_str_has_prefix ( new_data, "".shell"" ) ) { g_autofree gchar * shell_name = g_strndup ( new_data, strlen ( "".shell"" ) ) ; shell_name = g_strndup ( new_data, strlen ( "".shell"" ) ) ; g_key_file_set_string ( keyfile, ""shell"", shell_name ) ; g_key_file_set_string ( keyfile, ""command"", shell_name ) ; } else if ( g_str_has_prefix ( new_data, "".shell"" ) ) { g_autofree gchar * shell_name = g_strndup ( new_data, strlen ( new_data ) ) ; shell_name = g_strndup ( new_data, strlen ( new_data ) ) ; g_key_file_set_string ( keyfile, ""command"", shell_name ) ; g_string_append ( keyfile, ""command"", shell_name ) ; } else if ( g_str_has_prefix ( new_data, "".shell"" )",0
596,<S2SV_ModStart> data_end ) { const <S2SV_ModStart> end = NULL <S2SV_ModEnd> ; assert ( <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> aligned_cols ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> aligned_cols ) ; memset <S2SV_ModEnd> ( cm ->,0
597,"<S2SV_ModStart> vp9_decoder_create ( const VP9_COMMON * cm <S2SV_ModEnd> ) { VP9Decoder <S2SV_ModStart> pbi ) ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> = 1 ; vpx_memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_video_frame = 0 ; vpx_memset ( & cm -> oxcf, - 1, sizeof ( cm -> oxcf ) ) ; pbi -> oxcf = * oxcf ; pbi -> ready_for_new_data = 1 ; pbi -> decoded_key_frame = 0 ; vpx_init_dequantizer ( cm ) ; vp9_loop_filter_init ( cm ) ; cm -> error. setjmp = 0 ; vp9_worker_init ( & pbi -> lf_worker ) ; return pbi ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
598,"<S2SV_ModStart>, GF_LOG_CONTAINER, <S2SV_ModEnd> ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) <S2SV_ModStart> GF_ISOM_BOX_TYPE_DREF ) ; if (! ( ( GF_DataInformationBox * ) s ) -> dref ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
599,"<S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> -> opt ; rcu_read_lock ( ) ; opt = rcu_dereference_protected ( req_inet -> opt, sock_owned_by_user ( req ) ) ; if ( opt && <S2SV_ModEnd> opt -> cipso <S2SV_ModStart> cipso == 0 ) { rcu_read_unlock ( ) ; return ; } rcu_read_unlock ( ) <S2SV_ModEnd> ; cipso_v4_delopt (",0
600,"<S2SV_ModStart> tokens, const vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> do { const vpx_tree_index <S2SV_ModEnd> j = tree",1
601,"<S2SV_ModStart> = VPX_CODEC_OK ; pick_quickcompress_mode ( ctx, duration, deadline ) ; vpx_codec_pkt_list_init ( & ctx -> pkt_list ) ; <S2SV_ModStart> ctx, img <S2SV_ModEnd> ) ; if <S2SV_ModStart> VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF <S2SV_ModEnd> ) ) { <S2SV_ModStart> VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_GOLD_FLAG ; vp9_use_as_reference ( ctx -> cpi, ref ) ; } if ( flags & ( VP8_EFLAG_NO_UPD_LAST | VP8_EFLAG_NO_UPD_GF | VP8_EFLAG_NO_UPD_ARF | VP8_EFLAG_FORCE_GF | VP8_EFLAG_FORCE_ARF ) ) { int",0
602,"<S2SV_ModStart> { ret = get_tag_ext <S2SV_ModEnd> ( asn1, <S2SV_ModStart>, & len, & t ) ; if ( ret ) goto error ; if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } newseq = realloc ( seq, ( count + 1 ) * elemtype -> size ) ; if ( newseq == NULL ) { ret = ENOMEM ; goto error ; } seq = newseq ; elem = ( char * ) seq + count * elemtype -> size ; memset ( elem, 0, elemtype -> size ) ; ret = decode_atype ( & t, contents, clen, elemtype, elem ) ; if ( ret ) goto error ; count ++ ; } * seq_out = seq ; * count_out = count ; return 0 ; error : free_sequence_of ( elemtype, seq, count ) ; free ( seq ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>",0
603,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( s, <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( s + <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( s + <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( s + <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( s + <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( s + <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( s + <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( s + <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( s + <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( s + <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( s + <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( s + <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( s + <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( s + <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( s + <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( s + <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( s + <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( s + <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( s + <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( s + <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( s +",0
604,"<S2SV_ModStart> rc, const VP9EncoderConfig <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> ( int64_t ) oxcf <S2SV_ModEnd> -> av_per_frame_bandwidth * <S2SV_ModStart> -> av_per_frame_bandwidth * oxcf <S2SV_ModEnd> -> two_pass_vbrmax_section )",0
605,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
606,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_superblock ( VP9_COMP <S2SV_ModStart> * cpi, MACROBLOCK * const x, MACROBLOCKD * const xd, <S2SV_ModStart> BLOCK_SIZE bsize ) # else void encode_superblock ( VP9_COMMON * cpi, TOKENEXTRA * * t, int output_enabled, int mi_row, int mi_col, BLOCK_SIZE bsize ) # endif { <S2SV_ModStart> -> common ; <S2SV_ModEnd> MACROBLOCKD * const <S2SV_ModStart> -> mbmi ; PICK_MODE_CONTEXT <S2SV_ModEnd> * ctx = <S2SV_ModStart>. allow_skip_recode ; if ( cm -> frame_type == KEY_FRAME ) { if ( cpi -> oxcf. tuning == VP8_TUNE_SSIM ) { if ( cpi -> oxcf. tuning == VP8_TUNE_SSIM ) { adjust_act_zbin ( cpi, x ) ; vp9_update_zbin_extra ( cpi, x ) ; } } else { set_ref_ptrs ( cm, xd, mbmi -> ref_frame [ 0 ], mb",0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. size <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. size <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. size <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. size <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. size <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
608,"<S2SV_ModStart> range_max ) { size_t <S2SV_ModEnd> value ; int <S2SV_ModStart> position, zeroes <S2SV_ModEnd> ; char bits <S2SV_ModStart> gbc ) ; if ( get_bits_left ( gbc ) < 32 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits1 ( gbc ) ) { bits [ i ++ ] = '1' ; ++ zeroes ; } else { bits [ i ++ ] = '0' ; ++ zeroes ; } } if ( zeroes >= 32 ) { value = MAX_UINT_BITS ( 32 ) ; } else { value = get_bits_long ( gbc, zeroes ) ; for ( j = 0 ; j < zeroes ; j ++ ) bits [ i ++ ] = ( value >> ( zeroes - j - 1 ) & 1 )? '1' : '0' ; value += ( 1 << zeroes ) - 1 ; } if ( ctx -> trace_enable ) { bits [ i ] = 0 ; ff_cbs_trace_syntax_",0
609,"<S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> c >= 128 <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> c >= 128",0
610,"<S2SV_ModStart>, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_origin. ptr = NULL, packet -> http_origin. len = 0, packet -> http_x_session_type. ptr = NULL, packet -> http_x_session_type. len = 0, packet -> server_line. ptr = NULL, packet -> server_line. len = 0, packet ->",0
611,"<S2SV_ModStart> { q = QueuePixelPacket <S2SV_ModEnd> ( image, <S2SV_ModStart> x ), <S2SV_ModEnd> dds_info -> height <S2SV_ModStart> dds_info -> height, exception ) ; if ( q == ( PixelPacket * ) NULL ) return MagickFalse ; c0 = ReadBlobLSBShort ( image ) ; c1 = ReadBlobLSBShort ( image ) ; bits = ReadBlobLSBLong ( image ) ; CalculateColors ( c0, c1, & colors, MagickFalse ) ; for ( j = 0 ; j < 4 ; j ++ ) { for ( i = 0 ; i < 4 ; i ++ ) { if ( ( x + i ) < ( ssize_t ) dds_info -> width && ( y + j ) < ( ssize_t ) dds_info -> height ) { code = ( unsigned char ) ( ( bits >> ( ( j * 4 + i ) * 2 ) ) & 0x3 ) ; SetPixelRed ( q, ScaleCharToQuantum ( colors. r [ code ] ) ) ; SetPixelGreen ( q, ScaleCharToQuantum ( colors. g [ code ] ) ) ; SetPixelBlue ( q, ScaleCharToQuantum ( colors.",0
612,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL ) <S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL )",1
613,<S2SV_ModStart> action ) { if ( w < 0 ) w = 0 ; if ( h < 0 ) h = 0 ; if ( w > h * BzK ) w = h * BzK ; if ( w > w * BzK ) w = w * BzK ; if ( h > h * BzK ) h = h * BzK ; if ( w > w * BzK ) w = w * BzK ; if ( h > h * BzK ) h = h * BzK ; if ( w > w * BzK ) w = w * BzK ; if ( h > h * BzK ) h = h * BzK ; if ( w > w * BzK ) w = w * BzK ; if ( h > h * BzK ) h = h * BzK ; if ( w > w * BzK ) w = w * BzK ; if ( h > h * BzK ) h = h * BzK ; if ( w > w * BzK ) w = w * BzK ; if ( h > h * BzK ) h = h *,0
614,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; sendClean ( outputbuffer ) ;",1
615,"<S2SV_ModStart> ( AUTODETECT_TAG, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU\\n"" <S2SV_ModEnd> ) ; Stream_Read_UINT32",0
616,"<S2SV_ModStart> recon_uv_stride, recon_y_stride, recon_uv_stride <S2SV_ModStart> recon_y_stride, recon_y_stride, recon_uv_stride <S2SV_ModStart> recon_uv_stride, recon_uv_stride, recon_y_stride <S2SV_ModStart> recon_uv_stride, recon_uv_stride, recon_uv_stride <S2SV_ModStart> recon_y_stride, recon_y_stride, recon_uv_stride <S2SV_ModStart> recon_uv_stride, recon_uv_stride, recon_uv_stride <S2SV_ModStart> recon_y_stride, recon_y_stride, recon_uv_stride <S2SV_ModStart> recon_uv_stride, recon_uv_stride, recon_uv_stride, recon_y_stride <S2SV_ModStart> recon_uv_stride, recon_uv_stride, recon_uv_stride <S2SV_ModStart> recon_y_stride, recon_y_stride, recon_uv_stride, recon_uv_stride, recon_uv_stride <S2SV_ModStart> recon_uv_stride, recon_uv_stride, recon_y_stride, recon_uv_stride <S2SV_ModStart> recon_uv_stride, recon_uv_stride, recon_uv_stride, recon",0
617,<S2SV_ModStart> # if CONFIG_MULTITHREAD <S2SV_ModEnd> vp8_decoder_remove_threads ( pbi,1
618,<S2SV_ModStart> { if ( ( <S2SV_ModStart> xWantedSize > 0 ) && ( xWantedSize < xFreeBytesRemaining ) <S2SV_ModStart> portBYTE_ALIGNMENT_MASK ) ) ; } else { mtCOVERAGE_TEST_MARKER ( ) ; } } else { mtCOVERAGE_TEST_MARKER ( ) ; } if ( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) ) { pxPreviousBlock = & xStart ; pxBlock = xStart. pxNextFreeBlock ; while ( ( pxBlock -> xBlockSize < xWantedSize ) && ( pxBlock -> pxNextFreeBlock!= NULL ) ) { pxPreviousBlock = pxBlock ; pxBlock = pxBlock -> pxNextFreeBlock ; } if ( pxBlock!= pxEnd ) { pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock -> pxNextFreeBlock ) + xHeapStructSize ) ; pxPreviousBlock -> pxNextFreeBlock = pxBlock -> pxNextFreeBlock ; if ( ( pxBlock -> xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE ) { pxNewBlockLink = ( void * ) (,0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,"<S2SV_ModStart> s ) { uint32 <S2SV_ModEnd> num_updates ; uint16 <S2SV_ModStart>, Debug, ""%s()\\n"" <S2SV_ModEnd>, __func__ ) <S2SV_ModStart> ++ ) { in_uint32_le ( s, left ) ; in_uint32_le ( s, top ) ; in_uint32_le ( s, right ) ; in_uint32_le ( s, bottom ) ; in_uint32_le ( s, width ) ; in_uint32_le ( s, bpp ) ; Bpp = ( bpp + 7 ) / 8 ; in_uint32_le ( s, compress ) ; in_uint32_le ( s, bufsize ) ; cx = right - left + 1 ; cy = bottom - left + 1 ; logger ( Graphics, Debug, ""process_bitmap_updates(), <S2SV_blank> [%d,%d,%d], <S2SV_blank> [%d,%d], <S2SV_blank> bpp=%d, <S2SV_blank> compression=%d"", left, top, right, bottom, width, height, Bpp, compress ) ; if (! compress ) { int y ; bmpdata = ( uint8 * ) xmalloc ( width * height * Bpp ) ; for ( y = 0 ; y <",0
621,"<S2SV_ModStart> } else { ovalue = strim ( option, ""\\""\'"", MPR_TRIM_BOTH ) ; if ( smatch ( option, ""size"" ) ) { size = ( ssize ) getnum ( ovalue ) ; } else if ( smatch ( option, ""level"" ) ) { level = ( ssize ) atoi ( ovalue ) ; } else if ( smatch ( option, ""backup"" ) ) { backup = atoi ( ovalue ) ; } else { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> ErrorLog <S2SV_blank> option <S2SV_blank> %s"", option ) ; } } else if ( smatch ( option, ""anew"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""stamp"" ) ) { stamp = httpGetTicks ( ovalue ) ; } } if ( size < ( 10 * 1000 ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Size <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small. <S2SV_blank> Must <S2SV_blank> be <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> 10K"" ) ; return MPR_ERR_BAD_SYNTAX ; } if",0
622,"<S2SV_ModStart> TX_SIZE tx_size, vpx_coeff_stats <S2SV_ModEnd> * coef_branch_ct ) <S2SV_ModStart> coef_branch_ct ) { vpx_coeff_probs_model <S2SV_ModEnd> * coef_probs = <S2SV_ModStart> tx_size ] ; vpx_coeff_count <S2SV_ModEnd> * coef_counts =",0
623,<S2SV_ModStart> ( name ) ; ( void ) utf8,0
624,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static void <S2SV_ModEnd> su3000_frontend_attach ( struct <S2SV_ModStart> dvb_usb_adapter * d, struct i2c_client * i2c <S2SV_ModStart> { 0 } <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( dvb_usb_generic_rw ( i2c <S2SV_ModEnd>, obuf, <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; i2c <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; i2c <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> = 0x02 ; i2c <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> ( dvb_usb_generic_rw ( i2c <S2SV_ModEnd>, obuf, <S2SV_ModStart> 300 ) ; i2c <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; i2c <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> = 0x83 ; i2c <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> ( dvb_usb_generic_rw ( i2c <S2SV_ModEnd>, obuf, <S2SV_ModStart> ( dvb_usb_generic_rw ( i2c <S2SV_ModEnd>, obuf, <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; i2c <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0x51 ; i2c <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = dvb_",0
625,"<S2SV_ModStart> * iface, <S2SV_ModEnd> vpx_codec_flags_t flags, <S2SV_ModStart> ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else { ctx -> iface = iface ; ctx -> name = iface -> name ; ctx -> priv = NULL ; ctx -> init_flags = flags ; ctx -> config. enc = cfg ; res = ctx -> iface -> init ( ctx, NULL ) ; if ( res ) { ctx -> err_detail = ctx -> priv? ctx -> priv -> err_detail : NULL ; vpx_codec_",0
626,"<S2SV_ModStart> stride, int mv_row, int mv_col, uint8_t * pred, struct scale_factors * scale, int x, int y ) { const int which_mv = 0 ; const MV mv = { mv_row, mv_col } ; const InterpKernel * const kernel = <S2SV_ModEnd> xd -> mi <S2SV_ModStart> ] -> interp_filter <S2SV_ModEnd> ; enum mv_precision <S2SV_ModStart> mv_precision_uv ; int uv_stride ; vp9_build_inter_predictor ( y_mb_ptr, stride, & pred [ 0 ], 16, & mv, scale, 16, 16, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vp9_build_inter_predictor ( u_mb_ptr, uv_stride, & pred [ 256 ], uv_block_size, & mv, scale, uv_block_size, which_mv, kernel, mv_precision_uv, x, y ) ; vp9_build_inter_predictor ( v_mb_ptr, uv_stride, & pred [ 512 ], uv_block_size, & mv, scale, uv_block_size, uv_block_size",0
627,"<S2SV_ModStart> = TRUE ; if ( strlen ( origbuf ) >= 4 * BUFSZ ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; }",0
628,"<S2SV_ModStart> * numbers, size_t <S2SV_ModEnd> count ) { <S2SV_ModStart> count ) { size_t <S2SV_ModEnd> i ; cJSON <S2SV_ModStart> 0 ; a <S2SV_ModEnd> ; ++ i <S2SV_ModStart> i ) { if (! i ) a -> child = cJSON_CreateFloat ( numbers [ i ] ) ; else suffix_object ( p, n ) ; p = n ; } for ( i = 0 ; a && i < count ; ++ i ) { n = cJSON_CreateFloat ( numbers [ i ] ) ; if (! i ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; } for ( i = 0 ; a && i < count ; ++ i ) { n = cJSON_CreateFloat ( numbers [ i ] ) ; if (! i ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; } return a ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
629,"<S2SV_ModStart> pbi -> common <S2SV_ModEnd> ; const int <S2SV_ModStart> tile_cols ) ; int n ; int final_worker = - 1 ; assert ( tile_cols <= ( 1 << 6 ) ) ; assert ( tile_rows == 1 ) ; ( void ) tile_rows ; if ( pbi -> num_tile_workers == 0 ) { const int num_threads = pbi -> oxcf. max_threads & ~ 1 ; int i ; CHECK_MEM_ERROR ( cm, pbi -> tile_workers, vpx_malloc ( num_threads * sizeof ( * pbi -> tile_workers ) ) ) ; for ( i = 0 ; i < num_threads ; ++ i ) { VP9Worker * const worker = & pbi -> tile_workers [ i ] ; ++ pbi -> num_tile_workers ; vp9_worker_init ( worker ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data2, vpx_malloc ( sizeof ( TileInfo ) ) ) ; if ( i < num_threads - 1 &&! vp",0
630,<S2SV_ModStart> = base + get3 <S2SV_ModEnd> ( ) + <S2SV_ModStart> ; len = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c =,0
631,"<S2SV_ModStart> -> common ; <S2SV_ModEnd> const double base_q <S2SV_ModStart> = SEGMENT_DELTADATA ; <S2SV_ModEnd> for ( i <S2SV_ModStart> ( i = ENERGY_MIN ; i <= ENERGY_MAX ; i ++ ) { int qindex_delta, segment_rdmult ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; } qindex_delta = vp9_compute_qdelta ( & cpi -> rc, base_q, base_q * Q_RATIO ( i ) ) ; vp9_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, qindex_delta ) ; vp9_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q ) ; for ( i = ENERGY_MIN ; i <= ENERGY_MAX ; i ++ ) { int qindex_delta, segment_rdmult ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; } qindex_delta =",0
632,"<S2SV_ModStart> -> error_code ) memcpy ( & <S2SV_ModStart> ctx -> base, & <S2SV_ModEnd> error -> has_detail <S2SV_ModStart> error -> has_detail, sizeof ( ctx -> base. err_detail ) ) <S2SV_ModEnd> ; return error",0
633,"<S2SV_ModStart>, * ps_cur_poc <S2SV_ModEnd> ; ps_cur_slice = <S2SV_ModStart> ps_cur_slice ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
634,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet ),0
635,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int getnum (,0
636,"<S2SV_ModStart> GCSpropagate ) ; atomic ( L ) ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> survival = g -> allgc ; psurvival = sweepgen ( L, g, & g -> tobefnz, NULL ) ; finishgencycle ( L, g ) ;",0
637,<S2SV_ModStart> 0 ; else ret = <S2SV_ModEnd> - EIO ;,0
638,"<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } <S2SV_ModEnd> memset ( buffer <S2SV_ModStart> buffer ) ; <S2SV_ModEnd> s_write ( c",0
639,"<S2SV_ModStart> * cib, cib_remote_opaque_t <S2SV_ModEnd> * private = <S2SV_ModStart> -> variant_opaque ; <S2SV_ModEnd> int rc = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> int ret_ga ; <S2SV_ModStart> = NULL ; connection -> socket = 0 ; connection -> session = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } bzero ( & hints, sizeof ( struct addrinfo ) ) ; hints. ai_flags = AI_CANONNAME ; hints. ai_family = AF_INET ; hints. ai_socktype = SOCK_RAW ; if ( hints. ai_family == AF_INET6 ) { hints. ai_protocol = IPPROTO_ICMPV6 ; } else { hints. ai_protocol = IPPROTO_ICMP ; } crm_debug ( ""Looking <S2SV_blank> up <S2SV_blank> %s"", server ) ; ret_ga = getaddrinfo ( server, NULL, & hints, & res ) ; if ( ret_ga ) { crm_err ( ""getaddrinfo: <S2SV_blank>",0
640,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi,",0
641,<S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( bp + 26 ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( bp + 26 ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( bp + 26 ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( bp + 26 ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( bp + 26 ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( bp + 26 ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( bp + 26 ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( bp + 26 ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( bp + 26 ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( bp + 26 ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( bp + 26 ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( bp + 26 ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( bp + 26 ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( bp + 26 ) ; <S2SV_ModStart> ),0
642,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command",0
643,"<S2SV_ModStart> Image * image <S2SV_ModEnd> ; register IndexPacket <S2SV_ModStart> length, padding <S2SV_ModEnd>, version, <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
644,"<S2SV_ModStart> jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> COM <S2SV_blank> marker\\n"" ) ; jas_ms_destroy ( enc -> mrk <S2SV_ModStart> jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> COM <S2SV_blank> marker\\n"" ) ; jas_ms_destroy ( enc -> mrk <S2SV_ModStart> jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> COM <S2SV_blank> marker\\n"" ) ; jas_ms_destroy ( enc -> mrk <S2SV_ModStart> jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> COM <S2SV_blank> marker\\n"" ) ; jas_ms_destroy ( enc -> mrk <S2SV_ModStart> jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> COM <S2SV_blank> marker\\n"" ) ; jas_ms_destroy ( enc -> mrk <S2SV_ModStart> jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> COM <S2SV_blank> marker\\n"" ) ; jas_ms_destroy ( enc -> mrk <S2SV_ModStart> jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> COM <S2SV_blank> marker\\n"" ) ; jas_ms_destroy ( enc -> mrk <S2SV_ModStart> jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> COM <S2SV_blank> marker\\n"" ) ; jas_ms_destroy ( enc -> mrk <S2SV_ModStart> jas_eprintf",0
645,<S2SV_ModStart> = '\\0' ; if (! new_args ) { free ( new_modes ) ; free ( new_args ) ; return ; } <S2SV_ModStart> = '\\0' ; if (! ptr_arg ) { free ( new_modes ) ; free ( new_args ) ; return ; } <S2SV_ModStart> = '\\0' ; if (! ptr_arg ) { free ( new_modes ) ; free ( new_args ) ; return ; } <S2SV_ModStart> = '\\0' ; if (! ptr_arg ) { free ( new_modes ) ; free ( new_args ) ; return ; } <S2SV_ModStart> = '\\0' ; if (! ptr_arg ) { free ( str_temp ) ; free ( new_modes ) ; free ( new_args ) ; return ; } <S2SV_ModStart> = '\\0' ; if (! ptr_arg ) { free ( str_temp ) ; free ( new_modes ) ; free ( new_args ) ; return ; } <S2SV_ModStart> = '\\0' ; if (! ptr_arg ) { free ( str_temp ) ; free ( new_args ) ; return ; },0
646,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> - m + vpx_read_bit <S2SV_ModEnd> ( r )",1
647,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
648,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> REFERENCE_MODE mode = vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> ( REFERENCE_MODE ) vpx_read <S2SV_ModEnd> ( r,",0
649,"<S2SV_ModStart>! stream ) { <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; } <S2SV_ModStart> stereo_fmt = STEREO_FORMAT_MONO <S2SV_ModEnd> ; # if <S2SV_ModStart> # if CONFIG_WEBM_IO if ( stream -> config. write_webm ) { <S2SV_ModStart> - 1 ; } else { stream -> ebml. last_pts_ms = - 1 ; }",0
650,"<S2SV_ModStart> -> ndo_snapend ; if ( cp < ndo -> ndo_snapend ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u), <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""unknown"", op -> nd_opt_type ), op -> nd_opt_len << 3, cp - ndo -> ndo_snapend ) ) ; goto trunc ; }",0
651,<S2SV_ModStart> -> root_node = yr_malloc ( sizeof ( RE_AST ) ) ; if ( * re_ast -> root_node == NULL ) return ERROR_INSUFFICIENT_MEMORY ; ( * re_ast ) -> root_node -> next = yr_malloc ( sizeof ( RE_AST ) ) ; if ( ( * re_ast ) -> root_node -> next == NULL ) return ERROR_INSUFFICIENT_MEMORY ; ( * re_ast ) -> root_node -> next -> prev = yr_malloc ( sizeof ( RE_AST ) ) ; if ( ( * re_ast ) -> root_node == NULL ) return ERROR_INSUFFICIENT_MEMORY ; ( * re_ast ) -> root_node -> next -> prev = yr_malloc ( sizeof ( RE_AST ) ) ; if ( ( * re_ast ) -> root_node -> next == NULL ) return ERROR_INSUFFICIENT_MEMORY ; ( * re_ast ) -> root_node -> next -> prev = yr_malloc ( sizeof ( RE_AST ) ) ; ( * re_ast ) -> root_node -> next -> prev ->,0
652,"<S2SV_ModStart> ) ) ; auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> = <S2SV_blank> %s"", str_c ( path ), key -> key -> key -> value ) ; <S2SV_ModStart> 0 ) { auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", str_c ( path ), error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> = <S2SV_blank> %s"", str_c ( path ), key -> value ) ; } else if ( ret < 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> lookup <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", str_c ( path ), error ) ; return",0
653,<S2SV_ModStart> level = 0 ; tok -> type_comment = 0,0
654,<S2SV_ModStart> av1 -> av1_config && av1 -> av1_config -> config,1
655,<S2SV_ModStart> ( dpbSize ) ; dpb -> picSizeInMbs = picSizeInMbs ; dpb -> dpbSize = dpbSize,0
656,"<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart> (! sock ||! addr ||! addrlen ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen ) addrlen_in = * addrlen ; if ( oe_syscall_getpeername_ocall ( & ret, sock -> host_fd, ( struct oe_sockaddr * ) addr, addrlen_in, addrlen_out )!= OE_OK ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( addrlen_in ) addrlen_out = * addrlen ; if ( oe_syscall_getpeername_ocall ( & ret, sock -> host_fd, ( struct oe_sockaddr * ) addr, addrlen_in, addrlen_out )!= OE_OK <S2SV_ModStart> ) ; } <S2SV_ModEnd> return ret ;",0
657,,1
658,"<S2SV_ModStart> FALSE ; } if (! <S2SV_ModStart>, s ) ) return FALSE",1
659,<S2SV_ModStart> ipv6_pinfo * np <S2SV_ModEnd> ; struct ipv6_txoptions <S2SV_ModStart> ) ; } np = inet6_sk ( sk ) ;,0
660,"<S2SV_ModStart> fsize ; uint32_t <S2SV_ModEnd> hdr_size, j <S2SV_ModStart> j ; struct cli_exe_section * exe_sections ; char timestr [ 32 ] ; struct pe_image_data_dir * dirs ; struct cli_bc_ctx * bc_ctx ; fmap_t * map ; struct cli_pe_hook_data pedata ; # ifdef HAVE__INTERNAL__SHA_COLLECT int sha_collect = ctx -> sha_collect ; # endif # if HAVE__INTERNAL__SHA_COLLECT int sha_collect = ctx -> sha_collect ; # endif const char * archtype = NULL, * subsystem = NULL ; uint32_t <S2SV_ModStart> size_t fsize ; <S2SV_ModEnd> uint32_t valign, <S2SV_ModStart> hdr_size, j <S2SV_ModEnd> ; # ifdef",0
661,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; usleep <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPDRH <S2SV_ModEnd> ) << 8 <S2SV_ModStart> | dm9000ReadReg ( DM9000_EPDRL <S2SV_ModEnd> ) ; }",1
662,"<S2SV_ModStart> pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> callback. token, CRM_OP_REGISTER, NULL, NULL, NULL, 0, NULL ) ; crm_xml_add ( hello, F_CIB_CLIENTNAME, name ) ; crm_send_remote_msg ( private -> command. session, hello, private -> command. encrypted ) ; free_xml ( hello ) ; <S2SV_ModStart> pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> command. token, CRM_OP_REGISTER, NULL, NULL, NULL, 0, NULL ) ; crm_xml_add ( hello, F_CIB_CLIENTNAME, name ) ; crm_send_remote_msg ( private -> command. session, hello, private -> command. encrypted ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { fprintf ( stderr, ""%s: <S2SV_blank> Opened <S2SV_blank> connection <S2SV_blank> to <S2SV_blank> %s:%d\\n"", name, private -> server, private -> port ) ; cib -> state = cib_connected_command ; cib -> type =",0
663,"<S2SV_ModStart> ; msg. msg_namelen = sizeof ( address ) ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; err = sock_recvmsg ( sock, & msg, size, flags ) ; if ( err >= 0 && addr!= NULL ) { err2 = move_addr_to_user ( & address, msg. msg_namelen, addr, addr_len ) ; if ( err2 < 0 ) err = err2 ; } err = move_addr_to_user ( addr, msg. msg_namelen, addr, addr_len ) ; if ( err2 < 0 ) err = err2 ; } err = sock_recvmsg ( sock, & msg, size, flags ) ; if ( err >= 0 && addr!= NULL ) { err2 = move_addr_to_user ( & address, msg. msg_namelen, addr, addr_len ) ; if ( err2 < 0 ) err = err2 ; } fput_light ( sock -> file, fput_needed ) ; out : return err <S2SV_ModEnd> ; } <S2SV_null>",0
664,"<S2SV_ModStart> ; int num00 = 0, tmp_err = 0, n, sr = 0 ; int step_param = 3 ; int further_steps = ( MAX_MVSEARCH_STEPS - 1 ) - step_param ; const BLOCK_SIZE bsize = xd -> mi [ 0 ] -> mbmi. sb_type ; vp9_variance_fn_ptr_t v_fn_ptr = cpi -> fn_ptr [ bsize ] ; int new_mv_mode_penalty = 256 ; const int quart_frm = MIN ( cpi -> common. width, cpi -> common. height ) ; while ( ( quart_frm << sr ) < MAX_FULL_PEL_VAL ) ++ sr ; step_param += sr ; further_steps -= sr ; v_fn_ptr. vf = get_block_variance_fn ( bsize ) ; num00 = cpi -> diamond_search_sad ( x, & ref_mv_full, & tmp_mv, step_param, x -> sadperbit16, & num00, & v_fn_ptr, x -> nmvjointcost, x -> mvc",0
665,"<S2SV_ModStart> ( EFAULT, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( EFAULT, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( EFAULT, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( EFAULT, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( EFAULT, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( EFAULT, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( EFAULT, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too",0
666,"<S2SV_ModStart> ; # endif # ifdef DEBUG_CONF ap_log_perror ( APLOG_MARK, APLOG_STARTUP | APLOG_NOERRNO, 0, mp, ""Merge <S2SV_blank> parent <S2SV_blank> %pp <S2SV_blank> child <S2SV_blank> %pp"", _parent, _child ) ; # endif",0
667,"<S2SV_ModStart>, one, <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
668,<S2SV_ModStart> ( r = <S2SV_ModEnd> sshbuf_put_cstring ( b,1
669,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
670,"<S2SV_ModStart> client = user_data ; crm_trace ( ""Cleaning <S2SV_blank> up <S2SV_blank> after <S2SV_blank> client <S2SV_blank> disconnect: <S2SV_blank> %s/%s"", crm_str ( client -> name ), client -> id ) ; if ( client -> id!= NULL ) { if (! g_hash_table_remove ( client_list, client -> id ) ) { crm_err ( ""Client <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> the <S2SV_blank> hashtable"", client -> name ) ; } } crm_trace ( ""Destroying <S2SV_blank> %s <S2SV_blank> (%p)"", client -> name, user_data ) ; num_clients -- ; crm_trace ( ""Num <S2SV_blank> unfree\'d <S2SV_blank> clients: <S2SV_blank> %d"", num_clients ) <S2SV_ModStart> client -> name <S2SV_ModEnd> ) ; free <S2SV_ModStart> user ) ; <S2SV_ModEnd> free ( client",0
671,"<S2SV_ModStart> * uv ; if ( iswhite ( thread ) ) markvalue ( g, thread -> v ) ; <S2SV_ModStart> next ) { <S2SV_ModEnd> if (!",0
