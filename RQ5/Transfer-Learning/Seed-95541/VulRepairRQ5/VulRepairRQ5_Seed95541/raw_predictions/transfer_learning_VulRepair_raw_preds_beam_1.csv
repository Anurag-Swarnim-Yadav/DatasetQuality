,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
1,"<S2SV_ModStart> skb ) ; unfrag_ip6hlen = min_t ( int, unfrag_ip6hlen, skb -> len - tnl_hlen ) ;",0
2,<S2SV_ModStart> 0 ) ; if ( writer -> stco ),0
3,"<S2SV_ModStart> item ) { return cJSON_GetItemRecursive ( array, item, 0, 0 ) <S2SV_ModEnd> ; } <S2SV_null>",0
4,"<S2SV_ModStart> u64 nr, <S2SV_ModEnd> struct pt_regs * <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",1
5,"<S2SV_ModStart> EXT4_EXTENTS_FLAG ) { <S2SV_ModEnd> struct grub_ext4_extent_header * <S2SV_ModStart> leaf ) { <S2SV_ModEnd> return - 1 <S2SV_ModStart> len ) ) { <S2SV_ModStart> return 0 ; } <S2SV_ModEnd> grub_disk_addr_t start ; <S2SV_ModStart> start ) ; if ( start >= EXT2_BLOCK_SIZE ( data ) ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } <S2SV_ModStart> ; } } <S2SV_ModEnd> return fileblock + <S2SV_ModStart> fileblock + start <S2SV_ModEnd> ; } <S2SV_null>",0
6,"<S2SV_ModStart> fdct16 ( const tran_low_t <S2SV_ModEnd> in [ 16 <S2SV_ModStart> 16 ], tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> ] ) { tran_high_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step2 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step3 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t input [ 8 ] ; tran_high_t <S2SV_ModEnd> temp1, temp2 <S2SV_ModStart> ] ; { tran_low_t <S2SV_ModEnd> s0, s1 <S2SV_ModStart>, s7 ; tran_high_t <S2SV_ModEnd> t0, t1 <S2SV_ModStart>, t3 ; tran_high_t <S2SV_ModEnd> x0, x1 <S2SV_ModStart> x2, x3 ; tran_high_t x1, x2, x3 ; tran_high_t x3 ; tran_low_t x4 ; tran_low_t x5 ; tran_low_t x6 ; tran_low_t x7 ; tran_low_t x8 ; tran_low_t x9 ; tran_low_t x10 ; tran_low_t x11 ; tran_low_t x12 ; tran_low_t x13 ; tran_low",0
7,<S2SV_ModStart> ; if ( hlen < 0 ) return 0 ; if (,0
8,"<S2SV_ModStart> search_filter_level ( const YV12_COMMON * cm, struct loopfilter * lf, int min_filter_level, int max_filter_level, int filt_direction <S2SV_ModEnd>, int partial_frame <S2SV_ModStart> partial_frame ) { <S2SV_ModEnd> const int min_filter_level <S2SV_ModStart> ) ; int best_err ; int filt_best ; int filt_direction = 0 ; int filt_mid = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; int ss_err [ MAX_LOOP_FILTER + 1 ] ; vpx_yv12_copy_y ( cm -> frame_to_show, & cpi -> last_frame_uf ) ; best_err = try_filter_frame ( sd, cpi, filt_mid, partial_frame ) ; filt_best = filt_mid ; ss_err [ filt_mid ] = best_err ; while ( filter_step > 0 ) { const int filt_high = MIN ( filt_mid + filter_step, max_filter_level ) ; const int filt_low = MAX ( filt_mid - filter_step, min_filter_level ) ; int filt_",0
9,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 2, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",0
10,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ++ i ) vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( usehp ) vpx_write <S2SV_ModEnd> ( w,",1
11,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } else { <S2SV_ModEnd> request -> rxBlockSzx <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; },0
12,"<S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; }",0
13,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> construct_get_dest_keyring ( struct <S2SV_ModStart> * authkey ; int ret ; <S2SV_ModStart> dest_keyring ) ; ret = key_permission ( make_key_ref ( dest_keyring, KEY_NEED_WRITE ) ) ; if ( ret ) return ret ; <S2SV_ModStart> ( dest_keyring ) { ret = - EPERM ; goto out ; } <S2SV_ModEnd> } case KEY_REQKEY_DEFL_THREAD_KEYRING <S2SV_ModStart> ) ; } out : return ret ;",0
14,<S2SV_ModStart> = create_spnego_ctx ( 0,0
15,<S2SV_ModStart> int len ; # ifdef HAVE_LOCALTIME <S2SV_ModStart> t ) ; # else tm = localtime_r ( & t ) ; # endif,0
16,"<S2SV_ModStart> length ) ; if ( strlen ( password ) > 256 ) { fprintf ( stderr, ""Password <S2SV_blank> too <S2SV_blank> long\\n"" ) ; exit ( EXIT_FAILURE ) ; }",0
17,<S2SV_ModStart> e == p || e - p > HOST_NAME_MAX,0
18,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",1
19,<S2SV_ModStart> = 0 ; if ( <S2SV_ModStart> & timeout ) == 0 ) { if ( errno == EINTR ) return false ; } <S2SV_ModEnd> return FD_ISSET,0
20,"<S2SV_ModStart> detect_transition_to_still ( struct twopass_stats <S2SV_ModEnd> * twopass, <S2SV_ModStart> last_decay_rate ) { <S2SV_ModEnd> if ( frame_interval <S2SV_ModStart> ; if ( still_interval > MIN_GF_INTERVAL <S2SV_ModEnd> && loop_decay_rate >= <S2SV_ModStart> j ; const TWO_PASS <S2SV_ModEnd> * position = <S2SV_ModStart> * position = & <S2SV_ModStart> { if (! <S2SV_ModStart> twopass, & tmp_next_frame, <S2SV_ModStart> tmp_next_frame. pcnt_inter, <S2SV_ModEnd> tmp_next_frame. pcnt_motion <S2SV_ModStart> tmp_next_frame. pcnt_motion <S2SV_ModEnd> ) break ; <S2SV_ModStart> } reset_fpf_position ( & <S2SV_ModStart> j == still_interval && twopass -> stats_in!= NULL <S2SV_ModStart> 1 ; } else { trans_to_still = 0 ; }",0
21,<S2SV_ModStart> inode ) ) { if ( io -> offset + size > i_size_read ( inode ) ) { ret = ext4_end_io_nolock_write ( io ) ; if ( ret ) return ret ; } <S2SV_ModStart> size ) ; },0
22,"<S2SV_ModStart> alg ) { <S2SV_ModEnd> if (! <S2SV_ModStart> CRYPTO_ALG_NEED_FALLBACK ) ) { if (! try_module_get ( name ) ) { pr_err ( ""No <S2SV_blank> module <S2SV_blank> for <S2SV_blank> %s\\n"", name ) ; return ERR_PTR ( - EBUSY ) ; } <S2SV_ModStart> name ) ; }",0
23,<S2SV_ModStart> = GIT_PKT_NG ; if ( len < 3 ) goto out_err ; <S2SV_ModStart> += 3 ; len -= 3 ; <S2SV_ModStart>'<S2SV_blank>') ) || len > GIT_PKT_NG_MAX_LEN <S2SV_ModStart> = '\\0' ; len -= 1 ; <S2SV_ModStart> + 1 ; len -= 1 ; <S2SV_ModStart> '\\n' ) ) || len > GIT_PKT_NG_MAX_LEN,0
24,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> BYTE flags ; UINT32 <S2SV_ModEnd> length ; Stream_Read_UINT32 <S2SV_ModStart> = NEGO_STATE_FINAL ; if ( Stream_GetRemainingLength ( s ) < length ) { WLog_ERR ( TAG, ""RDP_NEG_REQ: <S2SV_blank> RemainingLength: <S2SV_blank> %u"", Stream_GetRemainingLength ( s ) ) ; }",0
25,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; if (,0
26,"<S2SV_ModStart> mntent, path, false",0
27,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } io -> io_cleanup = mem_cleanup ;,1
28,<S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ) pixel & <S2SV_ModEnd> value + 0.5 <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ) pixel << <S2SV_ModEnd> value + 0.5 <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ) pixel << <S2SV_ModEnd> value + 0.5,0
29,"<S2SV_ModStart> ) ) ; ret &= btif_config_set_int ( bdstr, ""BTIF_MAX_PINS"", ( int ) BTIF_MAX_PINS ) ;",0
30,<S2SV_ModStart> vpx_codec_enc_cfg_map_t * map ; ( void ) iface,0
31,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
32,"<S2SV_ModStart> void show_progress ( uint64_t frame_in, uint64_t <S2SV_ModEnd> frame_out, uint64_t",0
33,"<S2SV_ModStart> ; if ( mysql_vdb_error ( imp_sth -> result ) ) { PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> SQL <S2SV_blank> error\\n"" ) ; return Nullav ; } if (",0
34,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_ETXSTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDL <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_TXRTS <S2SV_ModEnd> ; return NO_ERROR",0
35,<S2SV_ModStart> ; value = ast2obj_number <S2SV_ModEnd> ( o -> <S2SV_ModStart> ; value = ast2obj_number <S2SV_ModEnd> ( o -> <S2SV_ModStart> ; value = ast2obj_number <S2SV_ModEnd> ( o ->,0
36,<S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if (,0
37,"<S2SV_ModStart> low_var_thresh, int uv_stride, int uv_width, int uv_height <S2SV_ModEnd> ) { double <S2SV_ModStart>.5 ) ; <S2SV_ModEnd> unsigned char * <S2SV_ModStart> pp_limits_buffer ; ; <S2SV_ModEnd> ( void ) <S2SV_ModStart> ) flag ; memset <S2SV_ModEnd> ( limits, <S2SV_ModStart> 16 ) ; vpx_post_proc_down_and_across_mb_row <S2SV_ModEnd> ( source -> <S2SV_ModStart> 8 ) ; vpx_post_proc_down_and_across_mb_row <S2SV_ModEnd> ( source -> <S2SV_ModStart> 8 ) ; vpx_post_proc_down_and_across_mb_row <S2SV_ModEnd> ( source -> <S2SV_ModStart> 8 ) ; vpx_post_proc_down_and_across_mb_row <S2SV_ModEnd> ( source -> <S2SV_ModStart> ; } } }",0
38,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; error = mb2_cache_entry_alloc ( ext4_mb_cache, GFP_NOFS, hash, & ce ) ; if ( error ) return error ; <S2SV_ModEnd> error = mb_cache_entry_insert <S2SV_ModStart> = mb_cache_entry_insert ( ext4_mb_cache, ce <S2SV_ModEnd>, bh -> <S2SV_ModStart> error ) { <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> } } else <S2SV_ModStart> hash ) ; <S2SV_ModEnd> } } <S2SV_null>",0
39,<S2SV_ModStart> ) ) ; * code = 200 ; * rlen = 0 ;,0
40,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ip_options * * opt <S2SV_ModEnd>, unsigned char <S2SV_ModStart> optlen ) { return ip_options_get_from_buffer <S2SV_ModEnd> ( net, <S2SV_ModStart> ( net, opt <S2SV_ModEnd>, data, <S2SV_ModStart> data, optlen, optp <S2SV_ModEnd> ) ; }",0
41,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|truncated]"" <S2SV_ModEnd> ) ) ;",0
42,"<S2SV_ModStart> ) N_ ( ""E530: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'escape\' <S2SV_blank> in <S2SV_blank> string"" <S2SV_ModEnd> ) ; else",0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode <S2SV_ModStart>, & new_mode, & acl ) ; if ( ret <S2SV_ModEnd> ) goto out",0
44,"<S2SV_ModStart> size_t size ; size_t cps ; <S2SV_ModStart> / 8 ; cps = ( depth + 7 ) / 8 ; <S2SV_ModStart> ( cmpt -> cps_, cmpt -> cps_, & cps ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ) { goto error ; } if ( inmem ) { jas_stream_memopen2 ( 0, size ) : jas_stream_tmpfile ( ) ; if (! cmpt -> stream_ ) { goto error ; } if ( size > size ) { if ( size - 1 > LONG_MAX ) { goto error ; } if ( jas_stream_seek ( cmpt -> stream_, size - 1, SEEK_SET ) < 0 || jas_stream_putc ( cmpt -> stream_, '\\0' ) < 0 || jas_stream_putc ( cmpt -> stream_, '\\0' ) < 0 ) { goto error ; } if ( jas_stream_seek ( cmpt -> stream_, size - 1, SEEK_SET ) < 0 || jas_stream_putc ( cmpt -> stream_",0
45,<S2SV_ModStart> dp == datalen || ( datalen == 0 && op & ASN1_OP__MATCHES_TAG_END ) <S2SV_ModStart> ; if ( datalen == 0 &&,0
46,"<S2SV_ModStart> * req, u32 <S2SV_ModEnd> * acl_len ) <S2SV_ModStart> acl_len ) { <S2SV_ModEnd> uint32_t attrlen, <S2SV_ModStart> int status ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> xdr, OP_GETATTR <S2SV_ModEnd> ) )!= <S2SV_ModStart> ; if ( <S2SV_ModEnd> bitmap [ 0 <S2SV_ModStart> & FATTR4_WORD0_ACL ) <S2SV_ModEnd> { size_t hdrlen <S2SV_ModStart> u32 recvd ; struct kvec * iov = req -> rq_rcv_buf. head ; <S2SV_ModStart> xdr, attrlen ) ; if (! acl_len ) * acl_len = attrlen ; } else status = - EOPNOTSUPP ; out : if ( acl_len ) * acl_len = min_t ( u32, attrlen, req -> rq_rcv_buf. len - hdrlen ) ; <S2SV_ModEnd> return status ;",0
47,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
48,<S2SV_ModStart> ) ) { if (! auth ) { return MPR_ERR_BAD_SYNTAX ; },0
49,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> int number_aau ; <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; <S2SV_ModEnd> if ( addr,0
50,"<S2SV_ModStart> int res ; unsigned <S2SV_ModStart> inodes ) ; unsigned <S2SV_ModStart> long export_index_table [ SQUASHFS_LOOKUP_BLOCKS ( sBlk. s. inodes ) <S2SV_ModEnd> ] ; res <S2SV_ModStart> ( fd, sBlk. s. lookup_table_end <S2SV_ModEnd>, SQUASHFS_LOOKUP_BLOCK_BYTES (",0
51,<S2SV_ModStart> ; } else { <S2SV_ModStart> p1 ) ; },0
52,"<S2SV_ModStart> = 0 ; int is_vp8_encoder = 0 ; int is_vp9_encoder = 0 ; <S2SV_ModStart> vp9_arg_ctrl_map ; # else # if CONFIG_VP8_ENCODER } else if ( global -> codec -> name == NULL ) { is_vp8_encoder = 1 ; ctrl_args = no_args ; ctrl_args_map = no_args ; # endif } else if ( strcmp ( global -> codec -> name, ""vp8"" ) == 0 ) { ctrl_args = vp8_args ; ctrl_args_map = vp8_arg_ctrl_map ; # endif # if CONFIG_VP9_ENCODER } else if ( strcmp ( global -> codec -> name, ""vp9"" ) == 0 ) { ctrl_args = vp9_args ; ctrl_args_map = vp9_arg_ctrl_map ; # endif } else if ( is_vp9_encoder ) { is_vp9_encoder = 1 ; ctrl_args = no_args ; } else if ( is_vp8_encoder ) { config -> out_fn = vp8_args [ 0 ] ; config -> stats_fn = vp",0
53,"<S2SV_ModStart> 1 ; } int rc = <S2SV_ModEnd> verify_checks ( c <S2SV_ModStart>, callback_ctx ) ; if ( rc <S2SV_ModStart> 1 ; } <S2SV_ModEnd> return 0 ;",0
54,"<S2SV_ModStart> ; if ( crypto_memneq <S2SV_ModEnd> ( cmac,",0
55,"<S2SV_ModStart> cpi ) { <S2SV_ModEnd> const uint64_t bits_used <S2SV_ModStart> = cpi -> twopass. bits_left - bits_used ; <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> twopass. kf_group_bits = MAX ( cpi -> twopass. kf_group_bits, 0 ) ; <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> twopass. gf_group_bits <S2SV_ModEnd> = MAX ( <S2SV_ModStart> = MAX ( cpi -> twopass. gf_group_bits <S2SV_ModEnd>, 0 )",0
56,"<S2SV_ModStart> EOFOp 0x07 char * magick_buffer <S2SV_ModEnd> ; Image * <S2SV_ModStart> ) ) ; magick_buffer = ( char * ) MagickCalloc ( 12, sizeof ( char ) ) ; <S2SV_ModStart>, 2, magick_buffer <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart>. x = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. y = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. columns = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. rows = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. pixels = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. pixels = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. pixels = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. pixels = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. pixels = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. pixels = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. pixels = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. pixels = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. pixels = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. pixels = ReadBlobLSBLong <S2SV_ModEnd> (",0
57,"<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> altsetting [ 0 ]. desc. bNumEndpoints < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; error = - EINVAL ; goto err_free_urb ; }",1
58,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
59,"<S2SV_ModStart> * dir = ""/tmp"" <S2SV_ModEnd> ; if (",0
60,<S2SV_ModStart> = value ; if ( 0 == ps_codec -> i4_pic_done ) { ps_codec -> i4_pic_done = 1 ; return IHEVCD_INVALID_HEADER ; },0
61,"<S2SV_ModStart> ) ) { if ( narg == NULL ) { addreply_noformat ( 500, ""?"" ) ; continue ; }",0
62,"<S2SV_ModStart> void vp9_setup_dst_planes ( MACROBLOCKD_MATRIX <S2SV_ModEnd> * xd, <S2SV_ModStart> const buffers [ 8 <S2SV_ModEnd> ] = { <S2SV_ModStart> src -> y_buffer <S2SV_ModEnd>, src -> <S2SV_ModStart> src -> v_buffer <S2SV_ModEnd> } ; const <S2SV_ModStart> int strides [ 8 <S2SV_ModEnd> ] = { <S2SV_ModStart> i ) { const <S2SV_ModStart> pd = & xd -> planes <S2SV_ModEnd> [ i ]",0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,"<S2SV_ModStart> == READ ) return ocfs2_read_lock_dio ( inode, iter ) <S2SV_ModEnd> ; else get_block <S2SV_ModStart> else get_block = ocfs2_dio_read_lock <S2SV_ModEnd> ; return __blockdev_direct_IO",0
65,"<S2SV_ModStart> ; if ( fscanf_s ( f, <S2SV_ModEnd> ""%79s <S2SV_blank> %[^\\n]\\n"", def",0
66,"<S2SV_ModStart> n ) { <S2SV_ModEnd> char * str <S2SV_ModStart> * str ; <S2SV_ModEnd> char * str <S2SV_ModStart> * str ; <S2SV_ModEnd> char * str <S2SV_ModStart> * str ; <S2SV_ModEnd> char * str <S2SV_ModStart> * str ; <S2SV_ModEnd> assert ( expr_end <S2SV_ModStart> expr_start == ':' ) ; if (! fstring_decode_utf8 ( expr_start, expr_end, & str ) ) return NULL ; if ( str == NULL ) return NULL ; if ( str_compile_string ( str, expr_start, expr_end, c, n ) ) return NULL ; return str <S2SV_ModEnd> ; } <S2SV_null>",0
67,"<S2SV_ModStart> string ) { return cJSON_GetChild ( object, string, 0 ) <S2SV_ModEnd> ; } <S2SV_null>",0
68,<S2SV_ModStart> size ) ; if ( px -> ft == NULL ) { return FALSE ; },0
69,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ;",0
70,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
71,"<S2SV_ModStart> int i ; const <S2SV_ModStart> ] = { 0, 0, 0, 0, <S2SV_ModStart> src -> alpha_buffer, 0, <S2SV_ModStart> src -> uv_stride, src -> uv_stride, src -> alpha_stride, src -> alpha_stride, src -> uv_stride, src -> uv_stride, src -> alpha_stride, src -> uv_stride, src -> uv_stride, src -> alpha_stride, src -> uv_stride, src -> uv_stride, src -> alpha_stride, src -> uv_stride, src -> uv_stride, src -> alpha_stride, src -> y_stride, src -> uv_stride, src -> uv_stride, src -> y_stride, src -> uv_stride, src -> uv_stride, src -> alpha_stride, src -> uv_stride, src -> alpha_stride, src -> uv_stride, src -> uv_stride, src -> alpha_stride, src -> uv_stride, src -> uv_stride, src -> alpha_stride, src -> uv_stride, src -> uv_stride, src -> y_stride, src -> uv_stride, src -> uv_stride, src -> alpha_stride",0
72,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; for ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> msg -> msg_namelen,0
73,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
74,<S2SV_ModStart> user ) { <S2SV_ModEnd> cleanup_srcu_struct ( &,0
75,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> sl = strlen,1
76,"<S2SV_ModStart> * for_ch ; <S2SV_ModEnd> REQ ( n <S2SV_ModStart> comp_for ) ; for ( ; ; ) { if ( NCH ( n ) == 1 ) { <S2SV_ModEnd> if ( TYPE <S2SV_ModStart> == ASYNC ) <S2SV_ModEnd> is_async = 1 <S2SV_ModStart> is_async = 1 ; break ; } else if ( TYPE ( CHILD ( n, 0 ) ) == FUNCTION ) { is_async = 1 ; break ; } for_ch = CHILD ( n, 1 + is_async ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; expression = ast_for_expr ( c, CHILD ( n, 3 + is_async ) ) ; if (! expression ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if ( NCH ( for_ch ) == 1 ) comp = comprehension ( first, expression, NULL, is_async, c -> c_arena ) ; else comp = comprehension ( Tuple ( t, Store, first -> lineno, first -> col_offset, c -> c_arena ), expression, NULL, is_async, c",0
77,<S2SV_ModStart> NULL ; } if ( src -> curframe == BPF_MINFRAME ) return 0 ;,0
78,"<S2SV_ModStart> write_mb_modes_kf ( const VP9_COMMON * cm, const MACROBLOCKD * xd, const MODE_INFO * mi <S2SV_ModEnd>, vpx_writer * <S2SV_ModStart> w ) { <S2SV_ModEnd> const struct segmentation <S2SV_ModStart> * const mi <S2SV_ModEnd> = mi_8x8 [ <S2SV_ModStart> = mi_8x8 [ 0 <S2SV_ModEnd> ] ; const <S2SV_ModStart> * const above_mi <S2SV_ModEnd> ; const MODE_INFO <S2SV_ModStart> * const left_mi <S2SV_ModEnd> ; const MB_MODE_INFO <S2SV_ModStart> segment_id ) ; if ( xd -> left_available ) { <S2SV_ModStart> w ) ; } else { write_skip ( cpi, mbmi -> segment_id, mi, w ) ; } <S2SV_ModStart> == TX_MODE_SELECT ) { write_selected_tx_size ( cpi, mbmi -> tx_size, bsize, w ) ; } else { write_intra_mode ( w, mbmi -> mode, get_y_mode_probs ( mi, above_mi, left_mi, 0 ) ) ; } } if ( bsize >= BLOCK_8X8 && cm -> tx_mode == TX_MODE_SELECT ) { write_selected_tx_size ( cpi, mbmi ->",0
79,<S2SV_ModStart> maxn ) { int i ; <S2SV_ModStart> ; # endif for ( i = 0 ; i < n ; i ++ ) { if ( actions [ i ]. SWF_ACTIONRECORD. ActionCode == SWF_ACTION_END ) { return 0 ; } },0
80,<S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( & prep -> pp_n ) ; <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> } n =,0
81,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
82,<S2SV_ModStart> zArg ) { assert ( pTable -> nModuleArg >= 0 ) ; <S2SV_ModStart> * ) * <S2SV_ModEnd> 2 + pTable <S2SV_ModStart> pTable -> nModuleArg <S2SV_ModEnd> ; char * <S2SV_ModStart> * * azModuleArg ; assert ( nBytes <= MAX_MODULE_ARG_SIZE ),0
83,<S2SV_ModStart> j ] ; if ( j < 0 ) { j = 0 ; } <S2SV_ModStart> j ] ; if ( j < 0 ) { j = 0 ; },0
84,<S2SV_ModStart> -> dmin ; if ( ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { <S2SV_ModStart> p ) ; },0
85,"<S2SV_ModStart> bfq_idle_slice_timer_body ( struct bfq_sched_data * sched_data <S2SV_ModEnd> ) { struct <S2SV_ModStart> bfq_data * bfqd <S2SV_ModEnd> ; enum bfqq_expiration <S2SV_ModStart> long flags ; struct bfq_queue * bfqq ; <S2SV_ModStart> flags ) ; bfq_clear_bfqq_wait_request_and_put_in_service <S2SV_ModEnd> ( bfqq ) <S2SV_ModStart> return ; } bfq_bfqq_expire ( bfqd, bfqq, true, reason ) ; <S2SV_ModStart> flags ) ; if (! sched_data -> is_idle ) { spin_unlock_irqrestore ( & bfqd -> lock, flags ) ; return ; }",0
86,,1
87,"<S2SV_ModStart> PERF_COUNT_SW_ALIGNMENT_FAULTS, 1 <S2SV_ModEnd>, regs,",0
88,<S2SV_ModStart> diffBlock + diffBlockLength <S2SV_ModEnd> ) { PyMem_Free <S2SV_ModStart> newData + newpos + x <S2SV_ModStart> j ] = ( char ) <S2SV_ModStart> j ] = ( char ) <S2SV_ModStart> j ] = ( char ) <S2SV_ModStart> j ] = ( char ) <S2SV_ModStart> j ] = ( char ) <S2SV_ModStart> j ] = ( char ) <S2SV_ModStart> j ] = ( char ) <S2SV_ModStart> j ] = ( char ) <S2SV_ModStart> j ] = ( char ) <S2SV_ModStart> j ] = ( char ) <S2SV_ModStart> j ] = ( char ) <S2SV_ModStart> j ] = ( char ) <S2SV_ModStart> j ] = ( char ),0
89,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> np -> tclass ) ; rcu_read_unlock (,0
90,"<S2SV_ModStart> ; if ( max_packets < 1 ) { if ( MagickError ( GetException ( ), ""MemoryAllocationFailed"" ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageData"" ) ; } if (",0
91,<S2SV_ModStart> data ) { ( void ) data ;,0
92,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
93,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
94,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> mv. as_int <S2SV_ModStart> mbmi. mv_bias!= 0 ) { mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], left -> mbmi. mv_bias <S2SV_ModStart> mbmi. mv_bias <S2SV_ModEnd>, & near_mvs <S2SV_ModStart> mbmi. mv_bias <S2SV_ModEnd> ; } }",0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
97,"<S2SV_ModStart> msicap msicap ; int rc ; rc = <S2SV_ModStart> msicap, msgnum <S2SV_ModEnd> ) ; return <S2SV_ModStart> ) ; return rc <S2SV_ModEnd> ; } <S2SV_null>",0
98,"<S2SV_ModStart> -> ptr ; if (! ( cmd -> flags & REDIS_CMD_DENYPASS ) ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> permitted"" ) ; return REDIS_OK ; }",0
99,"<S2SV_ModStart> ; if ( cfg -> g_w == 0 || cfg -> g_h == 0 ) { return VPX_CODEC_ERR_INVALID_ARGS ; } if ( <S2SV_ModStart> VPX_RC_ONE_PASS ) ) { <S2SV_ModStart> ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; }",0
100,<S2SV_ModStart> { cpi -> mb. <S2SV_ModStart> & cpi -> mb. quantizers <S2SV_ModEnd> ) ; },0
101,<S2SV_ModStart> info -> si_code!= SI_QUEUE ) <S2SV_ModEnd> return - EPERM <S2SV_ModStart> return - EPERM <S2SV_ModEnd> ; return do_send_specific,0
102,<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; if ( ptr -> movie_identifier ) { <S2SV_ModStart> - 8 ; if ( tmp_strsize > sizeof ( char ) * tmp_strsize ) return GF_ISOM_INVALID_FILE ; },0
103,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
104,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> -> state == fmode <S2SV_ModEnd> ) return ; <S2SV_ModStart> ; if ( fmode & FMODE_WRITE <S2SV_ModEnd> ) { if <S2SV_ModStart> { if ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> -> state = fmode <S2SV_ModEnd> ; } <S2SV_null>",0
105,"<S2SV_ModStart> read_info ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
106,<S2SV_ModStart> 0 ; } if ( len > SIZE_MAX - elem. in_sg [ 0 ]. iov_len ) { return 0 ; },0
107,"<S2SV_ModStart>, i, <S2SV_ModEnd> JPC_QCX_GETEXPN ( qcd <S2SV_ModStart> ] ), <S2SV_ModEnd> JPC_QCX_GETMANT ( qcd",0
108,<S2SV_ModStart> = AV_PIX_FMT_PAL8 ; c -> padded_bits = 0 ;,0
109,<S2SV_ModStart> ) ; } ND_TCHECK_NLEN ( length ) ;,0
110,"<S2SV_ModStart> image_noffset ) { if ( noffset == - FDT_ERR_TRUNCATED || noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; } <S2SV_ModStart>, NULL ) ; if ( name == NULL ) return - 1",0
111,"<S2SV_ModStart> rx_kfifo_lock ) ; state -> rx_kfifo_size = CX23888_IR_RX_KFIFO_SIZE ; <S2SV_ModStart> -> rx_kfifo, state -> rx_kfifo_size <S2SV_ModEnd>, GFP_KERNEL ) <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> sd = &",0
112,"<S2SV_ModStart> * iface, vpx_codec_dec_config_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> = cfg ; ctx -> config. dec -> flags = flags ; <S2SV_ModStart> = VPX_CODEC_OK ; <S2SV_ModEnd> } return res",0
113,<S2SV_ModStart> ; value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1100WritePhyReg (,0
114,<S2SV_ModStart> ; if ( icmp_bxm. opt. optlen <S2SV_ModEnd> ) ipc.,0
115,<S2SV_ModStart> else if (! ( flags & VPX_CODEC_USE_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if (,0
116,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
117,"<S2SV_ModStart> counter ) ; if ( arg -> open_flags & NFS_O_CREAT ) <S2SV_ModStart> arg -> open_flags ) ; else encode_dentry ( xdr, 0",0
118,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ) ; return 0 <S2SV_ModStart> break ; } return error <S2SV_ModEnd> ; } <S2SV_null>,1
119,"<S2SV_ModStart> ; if ( len < 1 ) { r_strbuf_append ( & op -> esil, "" <S2SV_blank> (invalid)"" ) ; return - 1 ; } if (",0
120,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
121,<S2SV_ModStart> goto trunc ; ND_TCHECK_16BITS <S2SV_ModEnd> ( lshp ->,0
122,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { ret = - EFAULT ; break ; } <S2SV_ModEnd> * obuf =",0
123,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
124,<S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ),0
125,"<S2SV_ModStart> costs, vp9_tree * <S2SV_ModStart> c ) { vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> ) ; const vpx_tree_index <S2SV_ModEnd> ii = tree",0
126,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> write_buffer_16x16 ( int16_t <S2SV_ModStart> * output, tran_low_t <S2SV_ModEnd> * in0, <S2SV_ModStart> * in0, tran_low_t <S2SV_ModEnd> * in1,",0
127,<S2SV_ModStart> & 0xffff ; if (! synth_devs [ dev ] ) return - ENXIO ;,0
128,"<S2SV_ModStart> fadst16 ( const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t <S2SV_ModEnd> x0, s1 <S2SV_ModStart> 15 ] ; tran_high_t <S2SV_ModEnd> x1 = input <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> x2 = input <S2SV_ModStart> 13 ] ; tran_high_t <S2SV_ModEnd> x3 = input <S2SV_ModStart> 2 ] ; tran_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 4 ] ; tran_high_t <S2SV_ModEnd> x5 = input <S2SV_ModStart> 9 ] ; tran_high_t <S2SV_ModEnd> x7 = input <S2SV_ModStart> 7 ] ; tran_high_t <S2SV_ModEnd> x9 = input <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> x10 = input <S2SV_ModStart> 5 ] ; tran_high_t <S2SV_ModEnd> x11 = input <S2SV_ModStart> 10 ] ; tran_high_t <S2SV_ModEnd> x12 = input <S2SV_ModStart> 12 ] ; tran_high_t <S2SV_ModEnd> x15 = input <S2SV_ModStart> 14 ]",0
129,<S2SV_ModStart> ; # if HAVE_LIBRETRO flags |= LIBRETRO_NEON ; # endif # if <S2SV_ModStart> ; # endif <S2SV_ModEnd> return flags &,0
130,"<S2SV_ModStart> vp9_left_block_mode ( const PREDICTION_MODE * pre_mi <S2SV_ModEnd>, const MODE_INFO <S2SV_ModStart>, int b, int * y_mode <S2SV_ModStart> ) ) return PREDICTION_DC <S2SV_ModEnd> ; return get_y_mode <S2SV_ModStart> ) ; return pre_mi <S2SV_ModEnd> -> bmi [",0
131,"<S2SV_ModStart> * cpi, <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd>, int * <S2SV_ModStart> bsize ) { <S2SV_ModEnd> int bw, <S2SV_ModStart> = num_8x8_blocks_wide_lookup [ mi <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = num_8x8_blocks_high_lookup [ mi <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> ( cpi, mi <S2SV_ModEnd>, no_pred_segcounts, <S2SV_ModStart> ( cpi, mi <S2SV_ModEnd>, no_pred_segcounts, <S2SV_ModStart> ( cpi, mi <S2SV_ModEnd>, no_pred_segcounts, <S2SV_ModStart> ( cpi, mi <S2SV_ModEnd>, no_pred_segcounts, <S2SV_ModStart> ( cpi, mi <S2SV_ModEnd>, no_pred_segcounts, <S2SV_ModStart> ( cpi, mi <S2SV_ModEnd>, no_pred_segcounts, <S2SV_ModStart> ( cpi, mi <S2SV_ModEnd>, no_pred_segcounts, <S2SV_ModStart> ( cpi, mi <S2SV_ModEnd>, no_pred_segcounts, <S2SV_ModStart> ( cpi, mi <S2SV_ModEnd>, no_pred_segcounts,",0
132,<S2SV_ModStart> flags & CLIENT_CLOSE_AFTER_REPLY ) break ; if ( c -> flags & CLIENT_CLOSE_AFTER_REPLY_WITH_MESSAGE,0
133,<S2SV_ModStart> ; get_blocks_flags = EXT4_GET_BLOCKS_READ_WRITE <S2SV_ModEnd> ; if (,0
134,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart>, handle, hints, <S2SV_ModStart> & retval, <S2SV_ModEnd> p -> ai_flags <S2SV_ModStart> p -> ai_flags <S2SV_ModEnd>, & p <S2SV_ModStart> p -> ai_family <S2SV_ModEnd>, & p <S2SV_ModStart> p -> ai_socktype <S2SV_ModEnd>, p -> <S2SV_ModStart>, p -> ai_protocol <S2SV_ModEnd>, p -> <S2SV_ModStart>, NULL, <S2SV_ModEnd> p -> ai_addrlen <S2SV_ModStart> p -> ai_addrlen <S2SV_ModEnd>, NULL ) <S2SV_ModStart> } if (! head ||! tail ) { ret = OE_EAI_MEMORY ; goto done ; } if ( retval == 1 ) break ; if ( retval!= - 1 || oe_errno!= OE_ENAMETOOLONG ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( oe_errno ) ; } if ( head == tail ) { ret = OE_EAI_SUCCESS ; goto done ; } if ( tail == head ) { ret = OE_EAI_SUCCESS ; goto done ; } if ( head -> ai_family == AF_INET ) { struct oe_addrinfo * ai = head ; ai -> ai_addrlen = p -> ai_addrlen ; } if",0
135,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
136,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
137,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static s32 <S2SV_ModEnd> set_registers ( pegasus_t <S2SV_ModStart> data ) { s32 <S2SV_ModEnd> ret ; ret <S2SV_ModStart> ret ; ret = usb_control_msg ( pegasus -> usb, usb_sndctrlpipe ( pegasus -> usb, 0 ), PEGASUS_REQ_SET_REGS, PEGASUS_REQT_WRITE, 0, indx, data, size, 100 ) ; if ( ret < size ) netif_dbg ( pegasus, drv, pegasus -> net, ""%s <S2SV_blank> returned <S2SV_blank> %d\\n"", __func__, ret ) ; ret = set_buf ( pegasus, indx, data, size ) ; if ( ret < size ) ret = - EINVAL ; return ret ; } return 0 <S2SV_ModEnd> ; } <S2SV_null>",0
138,"<S2SV_ModStart> asdl_seq * body, PyObject * object <S2SV_ModStart> = body ; p -> v. Module. object = object ;",0
139,"<S2SV_ModStart>, int64_t ts_end <S2SV_ModEnd> ) { struct <S2SV_ModStart> 4 ; # else ( void ) src ; ( void ) ts_start ; ( void ) ts_end ; ( void ) flags ; # <S2SV_ModStart> write_idx ) ; <S2SV_ModEnd> if ( ctx <S2SV_ModStart> } else { copy_frame <S2SV_ModEnd> ( src, <S2SV_ModStart> ) ; } <S2SV_ModEnd> buf -> ts_start",0
140,"<S2SV_ModStart> method == LPF_PICK_FROM_Q && cpi -> oxcf. q_index!= - 1 <S2SV_ModStart> int q = vp9_ac_quant_ext <S2SV_ModEnd> ( cm -> <S2SV_ModStart> + 1015158, 20 <S2SV_ModEnd> ) ; if <S2SV_ModStart> } else { const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; <S2SV_ModStart>, cpi, q,",0
141,<S2SV_ModStart> BTA_DM_DISABLE_EVT : { if ( p_data -> enable. status == BT_STATE_SUCCESS ) { <S2SV_ModStart> ) ) ; } else { btif_dm_disable_evt ( ) ; },0
142,"<S2SV_ModStart> int a = getint <S2SV_ModEnd> ( fmt,",0
143,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
144,"<S2SV_ModStart> vpx_codec_err_t res ; vpx_codec_alg_priv_t * priv ; <S2SV_ModStart> ; else { priv = ctx -> priv -> alg_priv ; <S2SV_ModStart>. decode ( <S2SV_ModEnd> priv, data",0
145,"<S2SV_ModStart> inode * inode, struct buffer_head * * dirblock <S2SV_ModStart> inode ) ; * dirblock = NULL ;",0
146,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> ) ; } outpos += strlen ( outputbuffer ) ;",0
147,<S2SV_ModStart> self ) { if ( self -> dict ),0
148,<S2SV_ModStart> ( ) ; if (! a ) return 0 ; <S2SV_ModStart> (! i && a,0
149,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body, & tmp ) == - 1 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( tmp == NULL ) { return 1 ; } <S2SV_ModEnd> int res ; <S2SV_ModStart> Py_ssize_t len ; <S2SV_ModEnd> if (! <S2SV_ModStart> ++ ) { asdl_stmt <S2SV_ModEnd> value ; res <S2SV_ModStart> ( obj2ast_stmt ( tmp <S2SV_ModEnd>, & value <S2SV_ModStart>, i, & <S2SV_ModStart> } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_type_ignores, & tmp ) == - 1 ) { return 1 ; } if ( tmp == NULL ) { Py_CLEAR ( tmp ) ; return 1 ; } if ( tmp == NULL ) { Py_CLEAR ( tmp ) ; return 1 ; } if ( tmp == Py_None ) { Py_CLEAR ( tmp ) ; return 1 ; } if ( tmp == Py_None ) { Py_CLEAR ( tmp ) ; return 1 ; } if ( tmp == Py_None )",0
150,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
151,<S2SV_ModStart> ; if ( msg_sys -> msg_name == NULL ) { err = - ENOMEM ; goto out_freeiov ; } if ( <S2SV_ModStart> ; if ( msg_sys -> msg_name == NULL ) { err = - ENOMEM ; goto out_freeiov ; } if (,0
152,<S2SV_ModStart> buffer_head * dibh <S2SV_ModEnd> ; u64 bn <S2SV_ModStart> unsigned ptrs_per_blk ; <S2SV_ModEnd> unsigned end_of_metadata = <S2SV_ModStart> height - 1 <S2SV_ModEnd> ; enum alloc_state <S2SV_ModStart> ; if (! dibh ) return - ENOSPC ; if (,0
153,"<S2SV_ModStart>, vpx_codec_iface_name ( get_codec_interface ( global <S2SV_ModEnd> ) ) ) <S2SV_ModStart> -> filename, get_codec_interface ( global ) <S2SV_ModEnd> ) ; } <S2SV_ModStart> ; SHOW ( g_max_frame_size ) ; SHOW (",0
154,<S2SV_ModStart> -> psvi == XSLT_NS_NODE <S2SV_ModEnd> ) { copyNs,0
155,"<S2SV_ModStart> { if ( safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> { if ( safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> { if ( safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.cshrc"",",0
156,<S2SV_ModStart> msix_tab_size ) { <S2SV_ModEnd> bzero ( msixcap,1
157,<S2SV_ModStart> ; if ( <S2SV_ModEnd> js_regexec ( re,0
158,<S2SV_ModStart> case OFreshOID : { value * p = ( value * ) dest ; if ( p == NULL ) { caml_set_oo_id ( ( value ) dest ) ; return ; } <S2SV_ModStart> ( Int_val ( p -> oid <S2SV_ModEnd> ) >= 0 <S2SV_ModStart> >= 0 ) { <S2SV_ModStart> dest ) ; } },0
159,"<S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; ksz8851WriteReg <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( interface, KSZ8851_ISR ) ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } if ( ( isr & ISR_TXIS )!= 0 ) { ksz8851WriteReg ( interface, KSZ8851_ISR, ISR_TXIS ) ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } } if ( ( isr & ISR_RXIS )!= 0 ) { ksz8851WriteReg ( interface, <S2SV_ModStart> ( interface, KSZ88",0
160,"<S2SV_ModStart> void encode_quantization ( VP9_COMMON_EXT <S2SV_ModEnd> * cm, <S2SV_ModStart> * cm, vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
161,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> p_buf, msglen )",1
162,<S2SV_ModStart> ; if ( fp == NULL ) goto sslerr ; if (,0
163,"<S2SV_ModStart> ( ) ; if ( strlen ( t1_buf_array ) + strlen ( t1_line_array ) + 1 > T1_MAX_BUF_LEN ) { t1_fatal_error ( ""t1_check_unusual_charstring"" ) ; }",0
164,"<S2SV_ModStart> int mi_col, int subsize, int partition_idx <S2SV_ModEnd> ) { MACROBLOCKD <S2SV_ModStart> int bsl = b_width_log2_sub <S2SV_ModEnd> ( bsize ) <S2SV_ModStart> / 4 ; if ( partition_idx >= MAX_PARTITIONS ) { return ; } <S2SV_ModStart> [ subsize ] <S2SV_ModEnd> ; if ( <S2SV_ModStart> case PARTITION_NONE : if ( partition_idx == 0 ) { <S2SV_ModStart> mi_col ) ; } else { set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; } <S2SV_ModStart> case PARTITION_VERT : if ( partition_idx == 0 ) { <S2SV_ModStart> mi_col ) ; } else { <S2SV_ModEnd> set_modeinfo_offsets ( cm <S2SV_ModStart> mi_col ) ; } <S2SV_ModStart> case PARTITION_HORZ : if ( partition_idx == 0 ) { <S2SV_ModStart> subsize ) = 1 ; } else { <S2SV_ModEnd> set_modeinfo_offsets ( cm <S2SV_ModStart> subsize ) = 0 ; } else { <S2SV_ModEnd> set_modeinfo_offsets ( cm <S2SV_ModStart> subsize ) = 1 ; } <S2SV_ModEnd> set_modeinfo_offsets ( cm <S2SV_ModStart> subsize ) = 1 ; } else { <S2SV_ModEnd> set_modeinfo_offsets ( cm <S2SV_ModStart> subsize ) = 1 ;",0
165,"<S2SV_ModStart> key_ref ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) { ret = - ENOKEY ; goto error2 ; }",1
166,<S2SV_ModStart> ; if ( 0 == ps_dec -> u1_first_slice_found ) { if ( <S2SV_ModStart> ) ; } },0
167,<S2SV_ModStart> var_off ) ; if (! src_known ||! dst_known ) { return - EINVAL ; },0
168,<S2SV_ModStart> ; if (! posix_open ) { if ( <S2SV_ModStart> ) ; } },0
169,<S2SV_ModStart> -> opt. opt.,0
170,"<S2SV_ModStart> number_of_frames, number_of_keyframes <S2SV_ModEnd> ; int i <S2SV_ModStart> double y_scale ; SvcInternal_t <S2SV_ModEnd> * const si <S2SV_ModStart> svc_ctx ) ; <S2SV_ModEnd> if ( si <S2SV_ModStart> ( si -> num_encode_frames <S2SV_ModEnd> <= 0 ) <S2SV_ModStart> ; number_of_keyframes = si -> num_encode_frames <S2SV_ModEnd> / si -> <S2SV_ModStart> ; for ( int <S2SV_ModStart> i ) { int <S2SV_ModStart> number_of_frames = encode_frame_count ; if ( i == 0 || i == si -> layers - 1 ) break <S2SV_ModStart> i ) { if ( i == 0 || i == si -> layers - 1 ) break ;",0
171,<S2SV_ModStart> = new_cols ; <S2SV_ModEnd> screen -> sb_buffer,0
172,"<S2SV_ModStart> n ) { <S2SV_ModEnd> int result = <S2SV_ModStart> NULL ) ; if ( * str == end ) { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; return - 1 ; } <S2SV_ModStart> ; for ( <S2SV_ModEnd> ; * str <S2SV_ModStart> == '{' && ( <S2SV_ModStart> ) - literal_start > 2 ) && ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( in_named_escape && ch == '{' || ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } if ( ch == '}' ) { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; return - 1 ; } } else { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } } break ; } } literal_end = * str ; assert ( <S2SV_ModStart>",0
173,"<S2SV_ModStart> ( pd, g_settings_dump_location_default <S2SV_ModEnd> ) ; char",0
174,<S2SV_ModStart> ; if ( ( x + w ) > ( screen -> paddedWidthInBytes - x0 ) || ( y + h ) > ( screen -> paddedHeightInBytes - y0 ) ) { if ( <S2SV_ModStart> ) ; } },0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
176,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mv_stride <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if",0
177,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> -> left_context ) <S2SV_ModEnd> ) ; for <S2SV_ModStart> + mi_col ; const <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> cm -> mi_grid_visible ; const MODE_INFO * * prev <S2SV_ModEnd> = cm -> <S2SV_ModStart> cm -> prev_mi_grid_visible ; const BLOCK_SIZE bsize ; memset ( xd -> left_seg_context, 0 <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> ; for ( int mi = 0 ; mi < mi -> mi_row_end ; mi ++ ) { const int idx_str = cm -> mi_stride * mi_row + mi_col ; const MODE_INFO * * mi_8x8 = cm -> mi_grid_visible + idx_str ; const MODE_INFO * * prev_mi_8x8 = cm -> prev_mi_grid_visible ; BLOCK_SIZE bsize ; cpi -> mb. source_variance = UINT_MAX ; vp9_zero ( cpi -> mb. pred_mv ) ; switch ( cp",0
178,<S2SV_ModStart> u_int8_t state ; if (! nf_ct_is_confirmed ( ct ) ) return false ;,0
179,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static void <S2SV_ModEnd> ip_options_get_finish ( struct <S2SV_ModStart> ip_options_get_finish ( struct ip_options_rcu <S2SV_ModEnd> * net, <S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> * opt, u32 <S2SV_ModEnd> optlen ) { <S2SV_ModStart> & 3 ) rcu_assign_pointer ( <S2SV_ModStart> __data [ optlen <S2SV_ModEnd> ] = IPOPT_END <S2SV_ModStart> = IPOPT_END ; rcu_assign_pointer ( <S2SV_ModStart> ( optlen && ip_options_compile_rcu <S2SV_ModEnd> ( net, <S2SV_ModStart>, NULL )!= 0 <S2SV_ModStart> ) ; return <S2SV_ModEnd> ; } <S2SV_null>",0
180,"<S2SV_ModStart> ; if ( strcmp ( connection, ""Upgrade"" ) == 0 <S2SV_ModEnd> ) goto error",0
181,"<S2SV_ModStart> nif = 0 ; struct rpcap_sockaddr * addr <S2SV_ModStart> -> description ) { if ( strlen ( d -> description ) > RPCAP_NETBUF_SIZE ) { rpcapd_log ( LOGPRIO_ERROR, ""Too <S2SV_blank> long <S2SV_blank> interface <S2SV_blank> description <S2SV_blank> in <S2SV_blank> daemon <S2SV_blank> msg <S2SV_blank> request"" ) ; return - 1 ; } <S2SV_ModStart> description ) ; } <S2SV_ModStart> -> name ) { if ( strlen ( d -> name ) > RPCAP_NETBUF_SIZE ) { rpcapd_log ( LOGPRIO_ERROR, ""Too <S2SV_blank> long <S2SV_blank> interface <S2SV_blank> name <S2SV_blank> in <S2SV_blank> daemon <S2SV_blank> msg <S2SV_blank> request"" ) ; return - 1 ; } <S2SV_ModStart> name ) ; } <S2SV_ModStart> rpcap_findalldevs_if ) ; addr = d -> addresses ; if ( addr!= NULL ) { if ( strlen ( addr -> addr -> sa_family ) > RPCAP_NETBUF_SIZE ) { rpcapd_log ( LOGPRIO_ERROR, ""Too <S2SV_blank> long <S2SV_blank> interface <S2SV_blank> address <S2SV_blank> in <S2SV_blank> daemon <S2SV_blank> msg <S2SV_blank> request"" ) ; return - 1 ; } <S2SV_ModStart> : # endif addr = address -> addr ; if ( addr -> sa_family == AF_INET ) { if ( strlen",0
182,"<S2SV_ModStart>, client_uid, DUMP_DIR_MODE_DEFAULT <S2SV_ModEnd> ) ; if",0
183,<S2SV_ModStart> -> columns - 3 <S2SV_ModEnd> ) ; x <S2SV_ModStart> -> columns - 4 <S2SV_ModEnd> ) ; x,0
184,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
185,"<S2SV_ModStart> ) NULL ) { if ( image -> bytes_read < image -> bytes_written ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> image ) ; }",0
186,<S2SV_ModStart> ; if (!,0
187,"<S2SV_ModStart>! ptrace_has_cap ( task_cred ( task ) <S2SV_ModEnd> -> user_ns,",0
188,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
189,<S2SV_ModStart> SEI_USER_DATA_REGISTERED_ITU_T_T36 : case SEI_USER_DATA_REGISTERED_ITU_T_T37 : case,0
190,<S2SV_ModStart> -> sdma_rht ; <S2SV_ModEnd> sde = hfi1_sdma_alloc_engine <S2SV_ModStart> -> sdma_rht ; <S2SV_ModEnd> if (!,0
191,"<S2SV_ModStart>, int rep_quick, my_bool * is_sparse <S2SV_ModStart> ) ) ; if (! is_sparse ) { <S2SV_ModStart> ) ) ; }",0
192,<S2SV_ModStart> } pairs = palloc0 <S2SV_ModEnd> ( pcount *,0
193,"<S2SV_ModStart> val ) ; if (! <S2SV_ModStart>, val ) ) continue",0
194,"<S2SV_ModStart> ) ) { if ( clen < 1 || clen > ( size_t ) ( c -> buf - hend ) ) { return bad_request ( c, 400, __LINE__ ) ; }",0
195,"<S2SV_ModStart> vp9_fht16x16_c ( const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> 256 ] ; tran_low_t <S2SV_ModEnd> * outptr = <S2SV_ModStart> & out [ 16 <S2SV_ModEnd> ] ; int <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16 <S2SV_ModStart> ++ j ) out <S2SV_ModEnd> [ j *",0
196,"<S2SV_ModStart> ; if ( flatpak_check_export_version ( version, previous_ids, cancellable, error ) ) goto out ; if (",0
197,"<S2SV_ModStart> '\\0' ) ; size_t len = <S2SV_ModEnd> strlen ( filename <S2SV_ModStart> ) + 5 ; char * temp_filename = osi_calloc ( len <S2SV_ModStart> ; if ( temp_filename == NULL <S2SV_ModEnd> ) { LOG_ERROR <S2SV_ModStart> false ; } memset ( temp_filename, 0, len ) ; <S2SV_ModStart> node ) ; if ( strlen ( section -> name ) + len + 1 > sizeof ( temp_filename ) ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } <S2SV_ModStart> ename ) ; if ( strlen ( entry -> key ) + len + 1 > sizeof ( temp_filename ) ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> entry <S2SV_blank> key."", __func__ ) ; return false ; } <S2SV_ModStart> sections ) ) { <S2SV_ModStart> fp ) ; } <S2SV_ModStart> fp ) ; <S2SV_ModEnd> if ( chmod",0
198,<S2SV_ModStart> case VTP_SUMMARY_ADV : if ( len < 4 ) goto trunc ; <S2SV_ModStart> case VTP_VLAN_INFO : if ( len < 4 ) goto trunc ; <S2SV_ModStart> case VTP_VLAN_INFO_MAC : if ( len < 4 ) goto trunc ; <S2SV_ModStart> case VTP_VLAN_INFO_MAC_ADDR : if ( len < 4 ) goto trunc ; <S2SV_ModStart> case VTP_VLAN_INFO_MAC_ADDR : if ( len < 4 ) goto trunc ; <S2SV_ModStart> case VTP_VLAN_INFO_MAC_ADDR : if ( len < 4 ) goto trunc ; <S2SV_ModStart> case VTP_VLAN_INFO_MAC_ADDR : if ( len < 4 ) goto trunc ; <S2SV_ModStart> case VTP_VLAN_INFO_MAC_ADDR : if ( len < 4 ) goto trunc ; <S2SV_ModStart> case VLAN_INFO_MAC_ADDR : if ( len < 4 ) goto trunc ; <S2SV_ModStart> case VLAN_INFO_MAC_ADDR : if ( len < 4 ) goto trunc ; <S2SV_ModStart> case VLAN_INFO_MAC_ADDR : if ( len < 4 ) goto trunc ; <S2SV_ModStart> case VLAN_INFO_MAC_ADDR : if ( len < 4 ) goto trunc,0
199,"<S2SV_ModStart>, target, ctxt -> lineno,",0
200,"<S2SV_ModStart> ( ) ; char * _header = _getHeader ( ) ; <S2SV_ModStart> ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %lu\\r\\n"" <S2SV_ModEnd> ""%s"" ""\\r\\n"" ""%s"" <S2SV_ModStart> ""%s"" ""\\r\\n"" ""%s"", _header? _header : request, _length <S2SV_ModEnd>, _auth?",0
201,"<S2SV_ModStart> ) ; } if ( copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> src, dest, 0 ) < 0 ) errExit ( ""copy_file_as_user"" <S2SV_ModEnd> ) ; if",0
202,<S2SV_ModStart>!= BFA_STATUS_OK ) { kfree ( fcstats ) ; <S2SV_ModStart> return NULL ; },1
203,"<S2SV_ModStart> -> x = F_MIN ( 1.0f, <S2SV_ModStart> -> x ) ) <S2SV_ModStart> -> y = F_MIN ( 1.0f, <S2SV_ModStart> -> y ) ) <S2SV_ModStart> -> z = F_MIN ( 1.0f, <S2SV_ModStart> -> z = F_MIN ( 1.0f, <S2SV_ModStart> ) ) ; }",0
204,<S2SV_ModStart> ; rec -> sasl_username_type = IRC_SASL_USERNAME_TYPE_UNKNOWN ; rec -> sasl_username <S2SV_ModEnd> = src -> <S2SV_ModStart> ; rec -> sasl_password_type = IRC_SASL_PASSWORD_TYPE_UNKNOWN <S2SV_ModEnd> ; * dest,0
205,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
206,"<S2SV_ModStart> o, datao ; size_t sz = 0 <S2SV_ModStart> 12 ) { if ( sz > buf_size ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; }",0
207,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> testflag & T_DESCRIPT ) && ( param -> testflag & ( T_READONLY | T_WRITE ) ),0
208,"<S2SV_ModStart> olen ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> long hex ; <S2SV_ModEnd> if (! <S2SV_ModStart> hex ) ; if (! <S2SV_ModEnd> Curl_convert_from_network ( handle <S2SV_ModStart>, 1 ) ) return NULL ; <S2SV_ModEnd> string += 2 <S2SV_ModStart> * olen = ( int ) ( strindex - 1 ) <S2SV_ModEnd> ; return ns",0
209,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
210,<S2SV_ModStart> ; def -> <S2SV_ModEnd> session_setup = usm_session_init,0
211,<S2SV_ModStart> NULL ; return <S2SV_ModEnd> match ( prog,0
212,<S2SV_ModStart> idx ] ; <S2SV_ModEnd> switch ( action <S2SV_ModStart> ) ; } <S2SV_ModEnd> return SNMP_ERR_NOERROR ;,0
213,<S2SV_ModStart> pixels ++ = 0 ; break ; } case 3 : { CheckNumberPixels ( 4 ) ; * pixels ++ = <S2SV_ModStart> pixels ++ = <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> pixels ++ = <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> pixels ++ = <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> pixels ++ = <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> pixels ++ = <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> pixels ++ = <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> pixels ++ = <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> pixels ++ = <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> pixels ++ = <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> pixels ++ = <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> pixels ++ = <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> pixels ++ = <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> pixels ++ = <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> pixels ++ = <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> pixels ++ = <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> pixels ++ = <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> pixels ++ = <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> pixels ++ = <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> pixels ++ = <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> pixels ++ = <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> pixels ++ = <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> pixels ++ = <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> pixels ++ = <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> pixels ++ = <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> pixels ++ = <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> pixels ++ = <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> pixels ++ = <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> pixels ++ = <S2SV_ModEnd> ( unsigned char <S2SV_ModStart> pixels ++ = <S2SV_ModEnd> (,0
214,<S2SV_ModStart> timer ) ; spin_lock_irq ( & timer -> lock ) ; <S2SV_ModStart> open_list ) { <S2SV_ModEnd> list_move_tail ( & <S2SV_ModStart> = NULL ; list_del_init ( & slave -> ack_list ) ; } spin_unlock ( & timer -> lock ) ; <S2SV_ModEnd> mutex_unlock ( & <S2SV_ModStart> register_mutex ) ; } return 0 ;,0
215,<S2SV_ModStart> -> u1_dpb_commands_read ) { <S2SV_ModStart> ps_dec ) ; } else { ps_dec -> u4_bitoffset = 0 ; },0
216,"<S2SV_ModStart> decode ) { uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > info -> rasterSize || widthOverflow > 0 || heightOverflow > 0 ) { void * tmpRasterBits = reallocarray ( info -> rasterBits, <S2SV_ModEnd> gifFilePtr -> Image <S2SV_ModStart> info -> originalWidth * <S2SV_ModEnd> gifFilePtr -> Image <S2SV_ModStart> info -> originalHeight <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ) { <S2SV_ModEnd> freeRasterBits ( info <S2SV_ModStart> info -> rasterSize <S2SV_ModEnd> ; } if <S2SV_ModStart> 0 ) { freeRasterBits ( info -> rasterBits ) ; } <S2SV_ModStart> 0 ) { freeRasterBits ( info -> rasterBits ) ; <S2SV_ModStart> 0 ) { freeRasterBits ( info -> rasterBits ) ; <S2SV_ModStart> 0 ) { freeRasterBits ( info -> rasterBits ) ; <S2SV_ModStart> 0 ) { freeRasterBits ( info -> rasterBits ) ; <S2SV_ModStart> 0 ) { freeRasterBits ( info -> rasterBits ) ; <S2SV_ModStart> 0 ) { freeRasterBits ( info -> rasterBits ) ; <S2SV_ModStart> 0 ) { freeRasterBits ( info -> rasterBits ) ; <S2SV_ModStart> 0 ) { freeRasterBits ( info -> rasterBits ) ;",0
217,<S2SV_ModStart> validator -> user ) || cherokee_buffer_is_empty ( & conn -> validator -> passwd,0
218,"<S2SV_ModStart> bus ] ; if ( bi == NULL ) { pr_err ( ""%s: <S2SV_blank> pci <S2SV_blank> [%s] <S2SV_blank> has <S2SV_blank> no <S2SV_blank> businfo\\n"", __func__, dev -> name ) ; return ; } <S2SV_ModEnd> si = &",0
219,"<S2SV_ModStart>, timeo ) <S2SV_ModEnd> ; if (",1
220,<S2SV_ModStart> += 9 ; ( <S2SV_ModStart> isspace ( * ( s + 9 ) <S2SV_ModEnd> ) ; s <S2SV_ModStart>! isspace ( ( unsigned char ) <S2SV_ModStart> t ) ) ) t ++ ; if ( t - s > MAX_FONT_NAME_LEN ) { output_current_post ( ) ; blocktyp = POST_UNKNOWN ; return ; } <S2SV_ModEnd> free ( font_name,0
221,"<S2SV_ModStart>. active_set ; if ( uipc_main. read_set == UINT_MAX ) { BTIF_TRACE_EVENT ( ""UIPC <S2SV_blank> READ <S2SV_blank> THREAD <S2SV_blank> EXITING"" ) ; uipc_main_cleanup ( ) ; uipc_main. tid = 0 ; BTIF_TRACE_EVENT ( ""UIPC <S2SV_blank> READ <S2SV_blank> THREAD <S2SV_blank> DONE"" ) ; break ; } <S2SV_ModStart> NULL, NULL <S2SV_ModEnd> ) ; if",0
222,"<S2SV_ModStart> msixcap msixcap ; if <S2SV_ModEnd> ( msgnum >= <S2SV_ModStart> <= MAX_MSIX_TABLE_ENTRIES ) { pr_err ( ""%s: <S2SV_blank> too <S2SV_blank> many <S2SV_blank> msix <S2SV_blank> table <S2SV_blank> entries\\n"", __func__ ) ; return - 1 ; } <S2SV_ModEnd> assert ( barnum",0
223,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> max ) { return vpx_rb_read_literal <S2SV_ModEnd> ( rb,",0
224,<S2SV_ModStart> == NULL ) { retval = KRB5KDC_ERR_PREAUTH_FAILED ; goto cleanup ; } <S2SV_ModEnd> status = X509_NAME_cmp <S2SV_ModStart> = 0 ; <S2SV_ModEnd> X509_NAME_free ( is,0
225,"<S2SV_ModStart> select_tx_mode ( const VP9_COMMON * cm, const <S2SV_ModStart> { if ( cm -> <S2SV_ModEnd> lossless ) { <S2SV_ModStart> else if ( cm -> <S2SV_ModEnd> current_video_frame == 0 <S2SV_ModStart> else { if ( cm -> <S2SV_ModEnd> tx_size_search_method == USE_LARGESTALL <S2SV_ModStart> USE_LARGESTALL ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ TX_MODE_SELECT ]? ALLOW_32X32 : TX_MODE_SELECT ; } else { unsigned int total = 0 ; int i ; for ( i = 0 ; i < TX_SIZES ; ++ i ) total += cpi -> tx_stepdown_count [ i ] ; if ( total ) { const double fraction = ( double ) cpi -> tx_stepdown_count [ 0 ] / total ; return fraction > 0.90? ALLOW_32X32 : TX_MODE_SELECT ; } else { return cpi -> common. tx",0
226,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ]. cf == CF_AVERAGE ) { magfact = mag_calc ( im -> gdes [ i ]. data, im -> gdes [ i ]. ds, im -> gdes [ i ]. step ) ; } else if ( im -> gdes [ i ]. cf <S2SV_ModStart> ]. cf == CF_AVERAGE ) { magfact = mag_calc ( im -> gdes [ i ]. data, im -> gdes [ i ]. step ) ; } else if ( im -> gdes [ i ]. cf <S2SV_ModStart> ]. cf == CF_AVERAGE ) { magfact = mag_calc ( im -> gdes [ i ]. data, im -> gdes [ i ]. ds, im -> gdes [ i ]. step ) ; } else { magfact = mag_calc ( im -> gdes [ i ]. data, im -> gdes [ i ]. step ) ; } <S2SV_ModEnd> } break ;",0
227,<S2SV_ModStart> ; if ( tile_buffer_size ( buf1 ) < tile_buffer_size ( buf2 ) <S2SV_ModEnd> ) { return,0
228,<S2SV_ModStart> ) + size ; if ( sz > ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) return NULL,0
229,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,1
230,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs,",0
231,"<S2SV_ModStart> ; r = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, b ) )",0
232,<S2SV_ModStart> ( ) ; errors += test_curl_off_t_formatting ( ) ;,0
233,<S2SV_ModStart> -> lun ) sas_eh_finish_cmd <S2SV_ModEnd> ( cmd ),1
234,"<S2SV_ModStart>, end_col_offset ; bool is_func_body = false ; <S2SV_ModStart> 2 ; } is_func_body = is_async && TYPE ( CHILD ( n, name_i + 3 ) ) == FUNCTION_TYPE_RETURN ; <S2SV_ModStart> ( is_async ) { <S2SV_ModStart> returns, LINENO ( n0 ), n0 <S2SV_ModEnd> -> n_col_offset, <S2SV_ModStart> c_arena ) ; } else { if ( is_func_body ) { body = ast_for_suite ( c, CHILD ( n, name_i + 3 ) ) ; if (! body ) return NULL ; is_func_body = true ; } } <S2SV_ModStart> ) ; else { body = ast_for_suite ( c, CHILD ( n, name_i + 3 ) ) ; if (! body ) return NULL ; get_last_end_pos ( body, & end_lineno, & end_col_offset ) ; if ( is_func_body ) { body = ast_for_suite ( c, CHILD ( n, name_i + 3 ) ) ; if (! body ) return NULL ; is_func_body = true ; } }",0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return NULL ; }",0
237,,1
238,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
239,"<S2SV_ModStart> : if ( psf -> header. size <S2SV_ModEnd> > SIGNED_SIZEOF ( <S2SV_ModStart> > psf -> header. end ) { <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> headend = position ; } ; if ( psf -> header. size <S2SV_ModStart> > psf -> header. end ) { <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> headend = position ; } <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> : if ( psf -> header. size <S2SV_ModEnd> + position < <S2SV_ModStart> ; if ( psf -> header. size <S2SV_ModEnd> + position <= <S2SV_ModStart> <= psf -> header. end ) { <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> headindex = psf -> header. end ; <S2SV_ModEnd> psf_fseek ( psf <S2SV_ModStart> ; } ; if ( psf -> header. size <S2SV_ModEnd> + position > <S2SV_ModStart> > psf -> header. end ) { <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> headend = psf -> header. end ; } <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> headindex = psf -> header. end ; <S2SV_ModEnd> psf_fseek ( psf <S2SV_ModStart> ( psf -> header. end <S2SV_ModEnd> + psf -> <S2SV_ModStart> + psf -> header. end <S2SV_ModEnd>, 1, <S2SV_ModStart> - psf -> header. end <S2SV_ModEnd> ), psf <S2SV_ModStart> ; psf -> header.",0
240,<S2SV_ModStart> u4_ofst ) ; if ( ps_cabac -> u4_ofst > SIZE_MAX - ps_cabac -> au1_ctxt_models ) { IHEVCD_ERROR_T ps_err = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_PARAMETER ; return ( ps_err ) ; },0
241,<S2SV_ModStart> ; } } if ( off < ctx -> size ) { <S2SV_ModStart> ; } } },0
242,"<S2SV_ModStart> event ) { perf_event_disable_common ( event, false <S2SV_ModEnd> ) ; }",0
243,<S2SV_ModStart> -> post_proc_flag = <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> noise_level ; # if CONFIG_VP9_DEBUG_VISUALIZER <S2SV_ModEnd> flags -> display_ref_frame_flag,0
244,"<S2SV_ModStart> = 0 ; if ( msg_len < sizeof ( struct olsr_msg4 ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> msg_len <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6, msg_len ) ) ; goto trunc ; } <S2SV_ModStart> ) ) ; if ( msg_len < sizeof ( struct olsr_msg6 ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> msg_len <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6, msg_len ) ) ; goto trunc ; }",0
245,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> int64_t store_reg [ <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vpx_usec_timer_start ( & <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,0
246,"<S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file <S2SV_blank> %s\\n"", src <S2SV_ModEnd> ) ; exit <S2SV_ModStart> 0 ) ; copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> ( dest, dest, getuid ( ), getgid ( ) <S2SV_ModEnd> ) ; if",0
247,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ptr_hbe_txposer -> sfb_buf <S2SV_ModStart> ptr_hbe_txposer -> sfb_buf <S2SV_ModEnd> == NULL ) <S2SV_ModStart> NULL ) { return - 1 ; } if ( sfb_buf == NULL ) { return - 1 ; },0
248,"<S2SV_ModStart> prov_spec = parsed_require_line ; const lua_authz_provider_spec * prov_spec_ext <S2SV_ModStart> r ) ; prov_spec_ext = ap_lua_getglobal ( L, prov_spec -> function_name ) ; if ( prov_spec_ext ) { lua_pushlightuserdata ( L, prov_spec_ext ) ; } <S2SV_ModStart> ; if ( prov_spec_ext &&",0
249,"<S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> rows, image -> cols ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
250,<S2SV_ModStart> (! proto_end || proto_end - url < 3,0
251,"<S2SV_ModStart> end = path ; if ( end >= path_len ) return - FDT_ERR_NOSPACE <S2SV_ModStart> - FDT_ERR_BADSTRUCTURE ; if ( end - path < 2 ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart>, & len ) ; if (! name ) return - FDT_ERR_NOSPACE ; if ( end - path < 2 + len",0
252,<S2SV_ModStart> ( server. <S2SV_ModEnd> maxidletime &&! <S2SV_ModStart> ( server. <S2SV_ModEnd> maxidletime ) ),0
253,"<S2SV_ModStart> -> protocol_timeout = g_timeout_add ( 10 <S2SV_ModEnd>, ( GSourceFunc",0
254,<S2SV_ModStart> book -> dim && i < n,1
255,<S2SV_ModStart> action ) { if ( r < 0.0 ) return ;,0
256,<S2SV_ModStart> this_h ) { int i ; <S2SV_ModStart> 16 ) { for ( i = 0 ; i < 2 ; i ++ ) { if ( sf -> predict [ i ] [ i ] == vp9_convolve_copy ) { <S2SV_ModStart> -> predict [ i ] [ i ] [ 0 ] = vp9_convolve8_copy ; sf -> predict [ i ] [ i ] [ 1 ] = vp9_convolve8_avg ; sf -> predict [ i ] [ 0 ] [ 1 ] = vp9_convolve8_avg_horiz ; } else { sf -> predict [ i ] [ i ] [ 0 ] = vp9_convolve8_copy ; sf -> predict [ i ] [ 0 ] [ 1 ] = vp9_convolve8_avg_vert ; sf -> predict [ i ] [ 1 ] [ 0 ] = vp9_convolve8_horiz ; } } } else { sf -> predict [ i ] [ 0 ] [ 0 ] = vp9_convolve8_vert ; sf -> predict [ i ] [ 1 ] [ 0 ] = vp9_convolve8_avg_vert ; sf -> predict [ i ] [ 1 ] [ 0 ] = vp,0
257,<S2SV_ModStart> (! sock <S2SV_ModEnd> ) OE_RAISE_ERRNO (,0
258,<S2SV_ModStart> ; if ( msg. msg_namelen > sizeof ( src_info ) ) return - EINVAL ; if (,0
259,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> sctp_v6_protosw_exit ( ) <S2SV_ModStart> ( ) ; unregister_pernet_subsys ( & sctp_net_ops ) ;,0
260,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> stream ) { int ret ; <S2SV_ModStart> index ) ; ret = sse_to_psnr ( ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; if ( ret < 0 ) { fprintf ( stderr, "" <S2SV_blank> (Out <S2SV_blank> of <S2SV_blank> bounds)"" ) ; return - 1 ; } <S2SV_ModStart> = sse_to_psnr ( ret <S2SV_ModEnd>, 255.0,",0
261,<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen (,1
262,"<S2SV_ModStart> ( ) ; <S2SV_ModEnd> if ( ksz8851ReadReg <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ERROR_OUT_OF_MEMORY ; } memset ( context -> txBuffer, 0, ETH_MAX_FRAME_SIZE ) ; memset ( context -> rxBuffer, 0, ETH_MAX_FRAME_SIZE ) ; <S2SV_ModStart> ( interface, KSZ8851_MARH <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARM <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARL <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARL <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARL <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARL <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARH <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARM <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface",0
263,"<S2SV_ModStart> skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
264,"<S2SV_ModStart> ; if ( fit_check_format_no_error <S2SV_ModEnd> ( fit, <S2SV_ModStart> { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"" <S2SV_ModEnd>, prop_name ) <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; ret = <S2SV_ModEnd> - ENOEXEC ; <S2SV_ModStart> - ENOEXEC ; goto error ; <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; ret = <S2SV_ModEnd> - ENOEXEC ; <S2SV_ModStart> - ENOEXEC ; goto error ; <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT_OK ) ; ret = fit_check_format_no_error ( fit, IMAGE_SIZE_INVAL ) ; if ( ret ) goto error ; <S2SV_ModStart> BOOTSTAGE_SUB_NO_SIZE ) ; ret = fit_check_format_no_error ( fit, IMAGE_SIZE_INVAL ) ; if ( ret ) goto error ; <S2SV_ModStart> BOOTSTAGE_SUB_NO_SIZE ) ; ret = fit_check_format_no_error ( fit, IMAGE_SIZE_INVAL ) ; if ( ret ) goto error ; <S2SV_ModStart> BOOTSTAGE_SUB_NO_SIZE ) ; ret = fit_check_format_no_error ( fit, IMAGE_SIZE_INVAL ) ; if ( ret )",0
265,"<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart>, UI_DEV_DESTROY ) )",0
266,<S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> = rc -> avg_frame_bandwidth <S2SV_ModEnd> ; # else,0
267,"<S2SV_ModStart> i ], ""--allow-untrusted="" <S2SV_ModEnd> ) == 0 <S2SV_ModStart>, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted="" <S2SV_ModEnd> ) ; argv",0
268,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
269,<S2SV_ModStart> ib ] ; dequant_ptr = d -> dequant ; coeff_ptr = b -> coeff ; qcoeff_ptr = d -> qcoeff ; dqcoeff_ptr = d -> dqcoeff ; i0 =! type ; eob = * d -> eob ; rdmult = mb -> rdmult * err_mult ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ; rddiv = mb -> rddiv ; best_mask [ 0 ] = best_mask [ 1 ] = 0 ; tokens [ 0 ]. token = DCT_EOB_TOKEN ; tokens [ 0 ]. rate = 0 ; tokens [ 0 ]. error = 0 ; tokens [ 0 ]. error1 = 0 ; tokens [ 0 ]. token = DCT_EOB_TOKEN ; tokens [ 0 ]. qc = 0 ; * ( tokens [ 0 ] + 1 ) = * ( tokens [ 0 ] + 0 ) ; * ( tokens [ 0 ] + 2 ) = * ( tokens [ 0 ] + 1 ) ; * ( tokens [ 0 ] + 3 ) = * ( tokens [ 0,0
270,"<S2SV_ModStart> FN_REFLEN ] ; my_snprintf ( buff, sizeof ( buff ), ""%s"", opt_basedir <S2SV_ModEnd> ) ; #",0
271,"<S2SV_ModStart> decrypt_cb ) { ptrdiff_t <S2SV_ModEnd> n = ( <S2SV_ModStart> n = ( ptrdiff_t <S2SV_ModEnd> ) ( data_end <S2SV_ModStart> clear_buffer, n ) ; if ( n < 0 ) return - 1 ; memset ( clear_buffer, 0, n",0
272,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; <S2SV_ModEnd> exit_func : free_server_handle,0
273,"<S2SV_ModStart>, int * returnintra_distortion <S2SV_ModEnd> ) { BLOCK <S2SV_ModStart> int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # else unsigned int zero_mv_sse = <S2SV_ModStart>, best_rd_sse = INT_MAX ; # endif # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING best_sse = INT_MAX ; best_rd_sse = INT_MAX ; # else unsigned int best_sse = INT_MAX, best_rd_sse = INT_MAX ; # endif <S2SV_ModEnd> # endif mode_mv <S2SV_ModStart>. intra_rd = INT_MAX ; best_mode. intra_yrd = INT_MAX ; best_mode. intra_uvrd = INT_MAX ; best_mode. intra_yrd = INT_MAX ; best_mode. intra_intra = INT_MAX ; best_mode. intra_yrd = INT_MAX ; best_mode. intra_yrd = INT_MAX ; best_mode. intra_intra_",0
274,<S2SV_ModStart> goto error ; if ( S_ISREG ( statbuf. st_mode ) ) { h -> fd = - 1 ; goto error ; },0
275,"<S2SV_ModStart> u1_level_idc, u1_seq_parameter_set_id, u1_frame_cropping_flag <S2SV_ModStart> ; WORD32 i4_i <S2SV_ModEnd> ; WORD32 u1_frame_cropping_flag <S2SV_ModStart> ; WORD32 u1_frame_cropping_flag <S2SV_ModEnd> ; u1_level_idc = <S2SV_ModStart> ; if ( <S2SV_ModEnd> u1_level_idc == 1 <S2SV_ModStart> == 1 ) { <S2SV_ModStart> = 1 ; } else { <S2SV_ModEnd> u1_level_idc = ih264d_get_bits_h264 <S2SV_ModStart> = 1 ; }",0
276,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * params = ( vpx_svc_parameters_t * ) <S2SV_ModStart> -> cpi ; <S2SV_ModEnd> if ( params <S2SV_ModStart> return VPX_CODEC_INVALID_PARAM ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; <S2SV_ModStart> -> svc. <S2SV_ModEnd> lst_fb_idx = params <S2SV_ModStart> = params -> lst_fb_idx <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; cpi -> <S2SV_ModEnd> gld_fb_idx = params <S2SV_ModStart> = params -> gld_fb_idx <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; cpi -> <S2SV_ModEnd> alt_fb_idx = params <S2SV_ModStart> = params -> alt_fb_idx ; ctx -> svc. spatial_layer_id = params -> spatial_layer ; ctx -> svc. temporal_layer_id = params -> temporal_layer ; ctx -> svc. lst_fb_idx = params -> lst_fb_idx ; ctx -> svc. gld_fb_idx = params -> gld_fb_idx ; ctx -> svc. alt_fb_idx = params -> alt_fb_idx ; ctx -> svc.",0
277,"<S2SV_ModStart> out ) { uint32 bitspersample ; uint32 samplesperpixel ; uint16 input_compression ; uint32 input_photometric ; uint32 width, length ; struct cpTag * p ; uint32 width, length ; uint32 compression ; uint16 * p_photometric ; uint32 width ; uint32 length ; struct cpTag * p ; <S2SV_ModStart>, samplesperpixel ; <S2SV_ModEnd> CopyFunc cf ; <S2SV_ModStart>, input_photometric ; <S2SV_ModEnd> CopyField ( TIFFTAG_IMAGEWIDTH <S2SV_ModStart> ) ) ; if ( bitspersample > UINT32_MAX / samplesperpixel ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Can\'t <S2SV_blank> copy/convert <S2SV_blank> subsampled <S2SV_blank> image.\\n"", TIFFFileName ( in ) ) ; return FALSE ; } <S2SV_ModStart> ) ) ; if ( p_photometric == PHOTOMETRIC_NONE ) { TIFFSetField ( out, TIFFTAG_PHOTOMETRIC, PHOTOMETRIC_NONE ) ; return FALSE ; } <S2SV_ModStart> ) ) ; if ( p_photometric == PHOTOMETRIC_NONE ) { TIFFSetField ( out, TIFFTAG_PHOTOMETRIC, PHOTOMETRIC_NONE ) ;",0
278,"<S2SV_ModStart> a ) { <S2SV_ModEnd> char * pn <S2SV_ModStart> = '\\0' ; if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else { archive_set_error ( & a -> archive, 0, ""Removing <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( 0 ) ; } } else if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> interven",0
279,"<S2SV_ModStart> unsigned int link_count ; struct kernel_lb_addr loc <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct indirectEntry * <S2SV_ModStart> extLength && ( bh <S2SV_ModEnd> = udf_read_ptagged ( <S2SV_ModStart> -> i_sb, <S2SV_ModEnd> loc, 0 <S2SV_ModStart> -> i_location, <S2SV_ModEnd> loc, sizeof <S2SV_ModStart> -> i_location, <S2SV_ModEnd> loc, sizeof <S2SV_ModStart> -> i_location, <S2SV_ModEnd> loc, sizeof <S2SV_ModStart> -> i_location, <S2SV_ModEnd> loc, sizeof <S2SV_ModStart> -> i_location, <S2SV_ModEnd> loc, sizeof <S2SV_ModStart> -> i_location, <S2SV_ModEnd> loc, sizeof <S2SV_ModStart> -> i_location, <S2SV_ModEnd> loc, sizeof <S2SV_ModStart> -> i_location, <S2SV_ModEnd> loc, sizeof <S2SV_ModStart> -> i_location, <S2SV_ModEnd> loc, sizeof <S2SV_ModStart> -> i_location, <S2SV_ModEnd> loc, sizeof <S2SV_ModStart> -> i_location, <S2SV_ModEnd> loc, sizeof <S2SV_ModStart> -> i_location, <S2SV_ModEnd> loc, sizeof <S2SV_ModStart> -> i_location, <S2SV_ModEnd> loc, sizeof <S2SV_ModStart> -> i_location, <S2SV_ModEnd> loc, sizeof <S2SV_ModStart> -> i_location, <S2SV_ModEnd> loc, sizeof <S2SV_ModStart> -> i_location, <S2SV_ModEnd> loc, sizeof <S2SV_ModStart> -> i_location, <S2SV_ModEnd> loc, sizeof <S2SV_ModStart> -> i_location, <S2SV_ModEnd> loc, sizeof <S2SV_ModStart> -> i_location, <S2SV_ModEnd> loc, sizeof <S2SV_ModStart> -> i_location, <S2SV_ModEnd> loc, sizeof <S2SV_ModStart> -> i_",0
280,"<S2SV_ModStart> get_uv_tx_size ( mbmi ) ; const int filter_level = get_filter_level ( lfi_n, mbmi <S2SV_ModStart> tx_size_uv, w, mbmi -> tx_type <S2SV_ModStart> index ], 0, filter_level <S2SV_ModEnd> ) ; index",0
281,"<S2SV_ModStart> mq_ops ) { spin_lock_irqsave_nested <S2SV_ModEnd> ( & fq <S2SV_ModStart> mq_flush_lock, flags, SINGLE_DEPTH_NESTING",0
282,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
283,<S2SV_ModStart> ) ) { ovalue = strim ( <S2SV_ModEnd> stok ( option,0
284,<S2SV_ModStart> ( effect_param_t ) || * ( effect_param_t * ) pCmdData > * replySize,0
285,<S2SV_ModStart> ; if ( j >= num_versions ) { err = ENOMEM ; goto cleanup ; } if (,0
286,<S2SV_ModStart> 0x02 ) ; if ( crgram_len > 0 ),0
287,"<S2SV_ModStart> -> rss_size ; if ( macvlan_cnt > I40E_MAX_VLAN_COUNT ) { dev_err ( & pf -> pdev -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> VLANs\\n"" ) ; return - EINVAL ; }",0
288,"<S2SV_ModStart> ; } } return send_msg ( g, ""E01"" ) ;",0
289,<S2SV_ModStart> * streams ; jasuchar <S2SV_ModEnd> * dataptr ;,0
290,"<S2SV_ModStart> -> mb_row_offset ; if ( mb_row < 0 || mb_row >= MAX_REF_FRAMES ) { vpx_log ( ""Invalid <S2SV_blank> mb_row <S2SV_blank> offset <S2SV_blank> (%d)\\n"", mb_row ) ; return ; }",0
291,"<S2SV_ModStart> ) ; } if ( image -> format == MagickFormatBytes ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
292,"<S2SV_ModStart> len ) { return decode_unicode_with_escapes_ext <S2SV_ModEnd> ( c, <S2SV_ModStart> ( c, n, s, len, 0 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
293,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> enum { YES <S2SV_ModStart> setimes, targisdir <S2SV_ModEnd> ; BUF * <S2SV_ModStart> ; if ( lstat <S2SV_ModEnd> ( targ, <S2SV_ModStart> ; if ( lstat <S2SV_ModEnd> ( targ,",0
294,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
295,<S2SV_ModStart> ; # endif vp8_de_alloc_frame_buffers ( oci ) ;,0
296,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
297,<S2SV_ModStart> u1_num_mbsNby2 ) { if ( u1_num_mbsNby2 == 0 ) { ps_dec -> u1_slice_idx = 0 ; ps_dec -> u1_slice_idx_prev = 0 ; },0
298,<S2SV_ModStart> 1 ] ) { <S2SV_ModStart> ] ) ; },0
299,"<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & delay )",1
300,"<S2SV_ModStart> one, offset <S2SV_ModEnd> ; ssize_t count <S2SV_ModStart> ) break ; if ( number_planes_filled > MagickMax ( number_colormaps, number_planes_filled ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > MagickMax ( number_pixels, number_pixels ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > MagickMax ( number_colormaps, number_planes_filled ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > MagickMax ( number_pixels, number_planes_filled ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > MagickMax ( number_pixels, number_planes ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > Mag",0
301,"<S2SV_ModStart> value ) { cchar * name = sclone ( value ) ; <S2SV_ModStart> -> host, name <S2SV_ModEnd> ) ; httpSetRouteName",0
302,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
303,<S2SV_ModStart> ntime ) { if ( clean ) { free ( pool -> swork. job_id ) ; pool -> swork. job_id = NULL ; pool -> swork. clean = clean ; pool -> swork. clean_len = 0 ; },0
304,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
305,"<S2SV_ModStart> unused ) { <S2SV_ModEnd> _Py_IDENTIFIER ( __dict__ <S2SV_ModStart> __dict__ ) ; return _PyObject_reduce_n ( self, _PyObject_GetAttrId <S2SV_ModEnd> ( self, <S2SV_ModStart>, & PyId___dict__, 1 ) <S2SV_ModEnd> ) ; }",0
306,"<S2SV_ModStart> ) & desc, sizeof ( * desc )",1
307,<S2SV_ModStart> perf_event * ) ; struct perf_event_context * ctx <S2SV_ModStart> case PERF_EVENT_IOC_PERIOD : ctx = perf_event_ctx_lock ( event ) ; if (! ctx ) return - EINVAL ; <S2SV_ModStart> ret ; } <S2SV_ModEnd> default : return,0
308,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> * r, PREDICTION_MODE <S2SV_ModEnd> y_mode ) { <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> if (! cm -> fc -> <S2SV_ModEnd> frame_parallel_decoding_mode ) ++",0
309,<S2SV_ModStart> ; if (! sha -> src_len ) return 0 ; if (,0
310,"<S2SV_ModStart> iv ) ; if (! NIL_P ( vsalt ) ) rb_ivar_set ( self, id_key, Qnil ) ;",0
311,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
312,<S2SV_ModStart> ; if (! session -> settings_ready ) { return NGHTTP2_ERR_INVALID_DATA ; } if (,0
313,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> x86_pmu. arch_features,0
314,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, TOKEN * p <S2SV_ModEnd>, const TOKENEXTRA <S2SV_ModStart> stop ) { vpx_writer <S2SV_ModEnd> * p = <S2SV_ModStart> ] ; const vpx_extra_bit <S2SV_ModEnd> * const b <S2SV_ModStart> b = & vpx_extra_bits <S2SV_ModEnd> [ t ] <S2SV_ModStart> & 1 ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ; } vpx_write_bit <S2SV_ModEnd> ( w,",0
315,"<S2SV_ModStart>, uncompressed_hdr_size ; vpx_write_bit_buffer <S2SV_ModEnd> wb = { <S2SV_ModStart> 0 } ; vpx_write_bit_buffer <S2SV_ModEnd> saved_wb ; write_uncompressed_header <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> += uncompressed_hdr_size ; vpx_compute_update_table <S2SV_ModEnd> ( ) ; <S2SV_ModStart> += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb",0
316,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> dev_get_valid_name ( struct <S2SV_ModStart> net * net <S2SV_ModEnd>, const char <S2SV_ModStart> name ) { bool ret ; <S2SV_ModStart> '%' ) ) ret = <S2SV_ModEnd> dev_alloc_name_ns ( net <S2SV_ModStart> name ) ; else ret = dev_get_by_name_nolock ( net, name ) ; if ( ret ) return ret ;",0
317,<S2SV_ModStart> struct ikev2_id id ; struct ikev2_hdr hdr <S2SV_ModStart> * typedata ; ND_TCHECK_EXT ( ext ) ; if ( item_len < sizeof ( struct ikev2_id ) ) goto trunc ; ND_TCHECK_LEN ( sizeof ( hdr ) ),0
318,"<S2SV_ModStart> ; } } jas_log ( ""Processing <S2SV_blank> CMPT <S2SV_blank> %p\\n"", cmpt ) ;",0
319,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
320,"<S2SV_ModStart>, yt2_0 ; WORD64 mul_1, mul_2, mul_3, mul_4, mul_5, mul_6 ; WORD64 mul_7, mul_10, mul_11, mul_12 ; <S2SV_ModStart> x_h2_1 ; WORD32 * x_l1 ; WORD32 * x_l2 ; WORD32 * x_h2 ; WORD64 * x_l3 ; WORD64 * x_l4 ; WORD64 * x_l5 ; WORD64 * x_l6 ; WORD64 * x_l7 ; WORD64 * x_l8 ; WORD64 * x_l9 ; WORD64 * x_l10 ; WORD64 * x_l20 ; WORD64 * x_l20 ; WORD64 * x_l30 ; WORD64 * x_co10 ; WORD64 * co10 ; WORD64 * co20 ; WORD64 * co30 ; WORD64 mul_1, mul_2, mul_3, mul_4, mul_5, mul_6 ; WORD64 mul_7, mul_8, mul_9, mul_10, mul_11, mul_12 ; WORD64 * x",0
321,"<S2SV_ModStart> mntent -> mnt_dir, false",0
322,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
323,"<S2SV_ModStart> ( req ) ) ; rb_hash_aset ( env, proxy_uri_val, rb_const_get ( req, ""proxy_uri"", Qnil )",0
324,<S2SV_ModStart> endif int col_type <S2SV_ModEnd> ; MYSQL_BIND * <S2SV_ModStart> ; # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID <S2SV_ModStart> ; # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID <S2SV_ModStart> ; # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID <S2SV_ModStart> ; # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID <S2SV_ModStart> ; # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID <S2SV_ModStart> ; # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID <S2SV_ModStart> ; # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID <S2SV_ModStart> ; # endif <S2SV_ModEnd> } # if <S2SV_ModStart> ; # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID <S2SV_ModStart> ; # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID <S2SV_ModStart> ; # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID <S2SV_ModStart> ; # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID <S2SV_ModStart> ; # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID <S2SV_ModStart> ; # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID <S2SV_ModStart> ; # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID <S2SV_ModStart> ; # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID <S2SV_ModStart> ; # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID >= <S2SV_ModStart> ; # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID >= <S2SV_ModStart> ; # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID <S2SV_ModStart> ; # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID >=,0
325,"<S2SV_ModStart> need = 0, max_chars <S2SV_ModStart> screen, { max_chars = 4 * ( unsigned ) <S2SV_ModEnd> need *= 4 <S2SV_ModStart> need *= 4 <S2SV_ModEnd> } ) ;",0
326,"<S2SV_ModStart> fractionalDigits ) { const JsVarInt max = len / 2 ; <S2SV_ModStart> val ) ) strncpy_s ( str, max <S2SV_ModEnd>, ""NaN"", <S2SV_ModStart> < 0 ) strncpy_s ( str, max <S2SV_ModEnd>, ""-Infinity"", <S2SV_ModStart> ) ; else strncpy_s ( str, max <S2SV_ModEnd>, ""Infinity"",",0
327,<S2SV_ModStart> ( unlikely ( crng_ready ( ) <S2SV_ModEnd> == 0 ),0
328,"<S2SV_ModStart> LEX_ID ) { snprintf ( str, len, ""%s"" <S2SV_ModEnd>, ""ID:"", <S2SV_ModStart> ""ID:"", len <S2SV_ModEnd>, jslGetTokenValueAsString ( <S2SV_ModStart> jslGetTokenValueAsString ( ) <S2SV_ModEnd> ) ; } <S2SV_ModStart> LEX_STR ) { snprintf ( str, len, ""%s"" <S2SV_ModEnd>, ""String:\'"", <S2SV_ModStart> ""String:\'"", len <S2SV_ModEnd> ) ; }",0
329,,1
330,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
331,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
332,"<S2SV_ModStart> ) { return memcmp <S2SV_ModEnd> ( s1,",0
333,"<S2SV_ModStart> ( CMD_PRINT_HELP, ""stunnel.conf"", <S2SV_ModStart> ( CMD_PRINT_DEFAULTS, ""stunnel.conf"",",0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> md -> hdr <S2SV_ModStart>. isa_flags & ISAKMP_FLAGS_V1_ENCRYPTION_NON_SELF_DELETE ) { if ( st -> st_oakley. ta_encrypt_non_self_delete ) { st -> st_oakley. ta_encrypt_non_self_delete = FALSE ; } else { st -> st_oakley. ta_encrypt_non_self_delete = TRUE ; } } if (! new_iv_set ) { if ( st -> st_v1_new_iv. len == 0 ) { st -> st_v1_new_iv. len = 0 ; } else { st -> st_v1_new_iv. len = 0 ; } } if ( DBGP ( DBG_CRYPT ) ) { DBG_log ( ""decrypting <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> for <S2SV_blank> an <S2SV_blank> unknown <S2SV_blank> ISAKMP <S2SV_blank> SA"" ) ; } if ( <S2SV_ModStart>. ta_encrypt_non_self_delete ) { if ( st -> st_oakley. ta_encrypt_non_self_delete ) { st -> st_v1_new_iv. len = 0",0
336,<S2SV_ModStart> ; } } if ( 0 == ps_dec -> u4_is_first_frame_finished ) { ps_dec -> u4_is_first_frame_finished = 1 ; },0
337,<S2SV_ModStart> <S2SV_null> <S2SV_null> static const <S2SV_ModStart> item ) { if ( item == NULL ) return NULL ;,0
338,<S2SV_ModStart>. encode ( <S2SV_ModEnd> ctx -> priv <S2SV_ModStart>. encode ( <S2SV_ModEnd> ctx -> priv,0
339,"<S2SV_ModStart> ) ; } else if ( arg1 == - 1 ) { win_maximise ( - 1 ) ; win_set_chars ( 0, 0 ) ; }",0
340,<S2SV_ModStart> i < cols <S2SV_ModEnd> ; i ++,0
341,"<S2SV_ModStart> ; # endif if ( ( i -> width + i -> height ) > i -> parent -> width || ( i -> height + i -> width ) > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; } <S2SV_ModStart> -> height ; if ( ( i -> width + i -> height ) > i -> parent -> width || ( i -> height + i -> height ) > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; }",0
342,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",0
343,<S2SV_ModStart> = value ; if ( 0 == ps_codec -> i4_pic_done ) { ps_codec -> i4_pic_done = 1 ; return IHEVCD_INVALID_HEADER ; },0
344,<S2SV_ModStart> ) ) { if ( psf -> header_write ) { if ( psf -> header_write ) { psf -> header_write = 0 ; } else { <S2SV_ModStart> ) ; } } },0
345,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
346,"<S2SV_ModStart> 0 ; } if ( copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) == - 1 ) { fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> copy <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; return 0 ; } <S2SV_ModStart> ( rv ) { <S2SV_ModStart> dest ) ; return 0 ; }",0
347,"<S2SV_ModStart> <S2SV_null> static vp9_variance_fn_t vpx_get_block_variance_fn ( const BLOCK_SIZE bsize, const vpx_t * vpx_ptr <S2SV_ModEnd> ) { switch <S2SV_ModStart> BLOCK_8X8 : return vpx_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> BLOCK_16X8 : return vpx_mse16x8 <S2SV_ModEnd> ; case BLOCK_8X16 <S2SV_ModStart> BLOCK_8X16 : return vpx_mse8x16 <S2SV_ModEnd> ; default : <S2SV_ModStart> default : return vpx_mse16x16 <S2SV_ModEnd> ; } }",0
348,<S2SV_ModStart> ; if ( encoded_key_pack == NULL ) { retval = KRB5_E_MALLOC_FAILURE ; goto done ; } if (,0
349,"<S2SV_ModStart> flags ) ; if (! vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } <S2SV_ModStart> vb. vb2_buf <S2SV_ModEnd> ) ; if",0
350,<S2SV_ModStart> size ) { if ( size > SIZE_MAX ) { zmalloc_oom_handler ( size ) ; return NULL ; },0
351,<S2SV_ModStart> & rxh -> serviceID <S2SV_ModEnd> ) && rxent,0
352,"<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len > MWIFIEX_MAX_SSID_LEN ) { mwifiex_dbg ( adapter, ERROR, ""Error: <S2SV_blank> Invalid <S2SV_blank> SSID <S2SV_blank> length\\n"" ) ; return - 1 ; }",0
353,<S2SV_ModStart> -> valuelen ; if ( nsbuf > ( XFS_ATTR_SB_MAXSIZE / sizeof ( * sbuf ) ) ) return 0 ;,0
354,"<S2SV_ModStart> struct l2cap_conf_rfc rfc <S2SV_ModEnd> ; void * <S2SV_ModStart> sk ) ; rfc = kzalloc ( sizeof ( * rfc ), GFP_KERNEL ) ; if (! rfc ) return - ENOMEM ; <S2SV_ModStart> = L2CAP_MODE_ERTM ; memset ( & rfc, 0, sizeof ( rfc ) ) ; <S2SV_ModStart> = L2CAP_DEFAULT_MAX_RECEIVE ; memset ( & rfc, 0, sizeof ( rfc ) ) ; <S2SV_ModStart> = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO <S2SV_ModEnd> ) ; rfc <S2SV_ModStart> = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO <S2SV_ModEnd> ) ; rfc <S2SV_ModStart> = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU <S2SV_ModEnd> ) ; l2cap_add_conf_opt",0
355,"<S2SV_ModStart> { do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> r, MSG_WAITALL )",0
356,<S2SV_ModStart> ) ) { if ( ps_dec -> u4_nal_ref_idc == 0 ) { <S2SV_ModStart> = 1 ; },0
357,<S2SV_ModStart> while ( pair <S2SV_ModEnd> ) { mprAddItem,1
358,"<S2SV_ModStart> delegation, int fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> = 0 ; fmode <S2SV_ModEnd> &= ( FMODE_READ <S2SV_ModStart> -> type & fmode <S2SV_ModEnd> )!= open_flags <S2SV_ModStart> -> stateid, fmode <S2SV_ModEnd> ) ; ret <S2SV_ModStart>, NULL, fmode <S2SV_ModEnd> ) ; ret",0
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,"<S2SV_ModStart> * xd, int64_t <S2SV_ModEnd> * out_rate_sum, <S2SV_ModStart> * out_dist_sum ) { int i ; int64_t rate_sum = 0 ; int64_t dist_sum = 0 ; const int ref = xd -> mi [ 0 ] -> mbmi. ref_frame [ 0 ] ; unsigned int sse ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblock_plane * const p = & x -> plane [ i ] ; struct macroblockd_plane * const pd = & xd -> plane [ i ] ; const BLOCK_SIZE bs = get_plane_block_size ( bsize, pd ) ; ( void ) <S2SV_ModEnd> cpi -> fn_ptr <S2SV_ModStart>. vf ( <S2SV_ModEnd> p -> src <S2SV_ModStart>. stride, <S2SV_ModEnd> pd -> dst <S2SV_ModStart> ; if ( <S2SV_ModEnd> cpi -> speed <S2SV_ModStart> -> speed > 8 ) { int64_t rate ; int64_t dist ; int64_t square_error = sse ; int quantizer = ( pd -> dequant [ 1 ] >> 3 ) ; if ( quantizer < 120 ) rate = ( square_error * ( 280 - quantizer ) ) >> 8 ; else",0
361,<S2SV_ModStart> } if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
362,<S2SV_ModStart> { if ( index >= PAM_MAX_RESP_SIZE ) { return ( PAM_BUF_ERR ) ; } if ( <S2SV_ModStart> == NULL ) { free ( * ret_username ) ; <S2SV_ModStart> PAM_BUF_ERR ) ; },0
363,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> seg ) { vpx_read_tree <S2SV_ModEnd> ( r, <S2SV_ModStart> ( r, vpx_segment_tree <S2SV_ModEnd>, seg ->",0
364,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",1
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,<S2SV_ModStart> depth ++ ; if ( depth > MAXDEPTH ) return ( NULL ) ;,0
367,<S2SV_ModStart> ERROR_INVALID_LENGTH ; } if ( length < 8 ) { return ERROR_FAILURE ; } <S2SV_ModStart> length ) ; if ( length < sizeof ( Ksz8851TxHeader ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_FAILURE ; } <S2SV_ModStart> length ) ; if ( length < sizeof ( Ksz8851TxHeader ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_FAILURE ; } <S2SV_ModStart> RXQCR_SDA ) ; if ( length < sizeof ( Ksz8851TxHeader ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_FAILURE ; } <S2SV_ModStart> length ) ; if ( length < sizeof ( Ksz8851TxHeader ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_FAILURE ; } <S2SV_ModStart> RXQCR_SDA ) ; if ( length < sizeof ( Ksz8851TxHeader ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_FAILURE ; } <S2SV_ModStart> TXQCR_METFE ) ; if ( length < sizeof ( Ksz8851TxHeader ) ) { osSetEvent ( & interface -> nicTxEvent ) ;,0
368,<S2SV_ModStart> ; # endif mono_attach_maybe_stop ( ) ;,0
369,"<S2SV_ModStart>, x_e, x_f ; WORD32 n10, n20, n30, n01, n11, n21, n31 ; WORD32 n12, n22, n32, n03, n13, n23, n33 ; WORD32 * x0, * y0, * y1, * y2, * y3 ; WORD32 * x0, * y0, * y2, * y3 ; WORD32 n10, n20, n30, n01, n11, n21, n31 ; WORD32 n10, n20, n30, n01, n12, n22, n32, n03, n13, n23, n33 ; WORD32 n0, j0 ; WORD32 * x2, * x1, * x2, * y3 ; x0 = ptr_x ; x2 = ptr_y ; x3 = ptr_x + ( WORD32 ) npoints ; x0 = ptr_x + ( WORD32 ) npoints ; x0 = ptr_x + ( WORD32 ) npoints ; x0 = ptr_y + ( WORD32 ) npoints ;",0
370,<S2SV_ModStart> ; if ( pmd_none_or_clear_bad ( pmd ) ) continue ; if ( <S2SV_ModStart> ) ) ) <S2SV_ModEnd> ret = unuse_pte_range,0
371,"<S2SV_ModStart> target_width, target_height ; int frames <S2SV_ModStart> ] ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> ] ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> fin ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> fout ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 1 ;",0
372,"<S2SV_ModStart> i, result <S2SV_ModEnd> ; PyObject *",1
373,"<S2SV_ModStart> VPX_CODEC_OK ; struct vpx_codec_enc_priv_cfg <S2SV_ModEnd> * priv ; <S2SV_ModStart> sizeof ( struct vpx_codec_enc_priv_cfg <S2SV_ModEnd> ) ) ; <S2SV_ModStart> -> priv = vpx_codec_alg_priv_init ( priv ) <S2SV_ModEnd> ; ctx -> <S2SV_ModStart> enc ) { vpx_codec_enc_cfg_copy ( priv, <S2SV_ModEnd> ctx -> config <S2SV_ModStart> config. enc ) <S2SV_ModEnd> ; } cfg <S2SV_ModStart> ++ ) ; vpx_codec_alg_priv_init ( priv ) <S2SV_ModEnd> ; for ( <S2SV_ModStart> ++ ) ; vpx_codec_enc_cfg_copy ( priv ) <S2SV_ModEnd> ; for ( <S2SV_ModStart> ) ; } vpx_codec_alg_priv_destroy ( priv ) <S2SV_ModEnd> ; } if",0
374,"<S2SV_ModStart>, totfr ) ) < 0 ) return ret ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; totfr += step ; if ( totfr > BOT ) { totfr = 0 ; for ( i = 0 ; i < 256 ; i ++ ) { unsigned nc = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] = nc ; totfr += nc ; } for ( i = 0 ; i < 256 ; i ++ ) { unsigned sum = 0 ; unsigned i16_17 = i << 4 ; for ( j = 0 ; j < 16 ; j ++ ) sum += i16_17 ; pixel -> lookup [ i ] = sum ; } } pixel -> total_freq = totfr ; * rval = c & s -> cbits ; return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
375,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx ->,0
376,"<S2SV_ModStart> ) ) { if ( iinfo -> i_location. i_len > UDF_I ( inode ) -> i_max_inode_len ) { udf_err ( inode -> i_sb, ""inode <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large\\n"", inode -> i_ino ) ; goto out ; }",0
377,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> ) & MISTAT_BUSY",0
378,<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline <S2SV_ModStart> char * ptr <S2SV_ModEnd> ; ptr = <S2SV_ModStart> 'S' ) { return ( n!= 3 ) ; } return ( 0 <S2SV_ModEnd> ) ; },0
379,<S2SV_ModStart> ; # endif # if CONFIG_IPV6_DEFAGRAM_VERSION >= 0x10100000L <S2SV_ModStart> ; # endif # endif,0
380,<S2SV_ModStart> ; if ( object_length > 0 &&,0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,<S2SV_ModStart> p_sys -> b_auto_field_coding && p_sys -> p_schro -> b_auto_field_encoding_set <S2SV_ModStart> p_sys -> b_auto_field_coding && p_sys -> p_schro -> b_auto_field_coding_set,0
384,<S2SV_ModStart> ; if ( bfilename. len &&,0
385,<S2SV_ModStart> 4 ) ; if ( len < 4 ) return NULL ; <S2SV_ModStart> j ++ ) { <S2SV_ModStart> 2 ] ; },0
386,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
387,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; VPxWorker * const worker = ctx -> priv ; <S2SV_ModStart> * fb ; if ( worker -> ref_frame_idx < 0 ) { return VPX_CODEC_INVALID_PARAM ; } <S2SV_ModStart> * fb ; if ( <S2SV_ModStart>, & fb ) < 0 ) { return VPX_CODEC_INVALID_PARAM ; } vpx_worker_lock ( worker <S2SV_ModStart> NULL ) ; vpx_worker_unlock ( worker ) ;",0
388,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> j + length <S2SV_ModStart> + length > <S2SV_ModEnd> frag -> data_size <S2SV_ModStart> -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> "" ""too <S2SV_blank> many <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> image <S2SV_blank> content.\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( next_start + length > frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> "" ""too <S2SV_blank> many <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> image <S2SV_blank> content.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModEnd> if ( next_marker <S2SV_ModStart> ; if ( <S2SV_ModEnd> j + length <S2SV_ModStart> -> data_size > <S2SV_ModEnd> frag -> data_size <S2SV_ModStart> -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> "" ""too <S2SV_blank> many <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> image <S2SV_blank> content.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModEnd> if ( next_marker <S2SV_ModStart> -> data_size > <S2SV_ModEnd> frag -> data_size <S2SV_ModStart> -> data_size ) {",0
389,"<S2SV_ModStart> expr_stmt ) ; REQ ( CHILD ( n, 0 ), testlist ) ; <S2SV_ModStart> 1 ) { node * testlist = CHILD ( n, 0 ) ; if (! testlist ) return NULL ; <S2SV_ModStart> ( e, testlist -> kind == testlist? LINENO ( n ) : <S2SV_ModStart>, expr3, testlist -> kind == testlist? LINENO ( n ) : <S2SV_ModStart>, expr3, testlist -> kind == testlist? LINENO ( n ) :",0
390,"<S2SV_ModStart> int vp8_denoiser_filter_c ( <S2SV_ModEnd> unsigned char * <S2SV_ModStart> * mc_running_avg_y = ( unsigned char * ) <S2SV_ModStart> -> y_stride ; <S2SV_ModEnd> int mc_avg_y_stride = <S2SV_ModStart> -> y_stride ; <S2SV_ModEnd> int avg_y_stride = <S2SV_ModStart> int avg_y_stride = ( unsigned char * ) <S2SV_ModStart> -> y_stride ; unsigned <S2SV_ModStart> c, i, r, c, i <S2SV_ModStart> = 0 ; int adj_val [ 3 ] = { 3, 4, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 8, 9, 10, 11, 10, 11, 10, 11, 10, 12, 13, 14, 15, 16, 15, 16, 10, 15, 16, 10, 10, 11, 12, 13, 14, 15, 15, 15, 15, 16, 15, 16, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 10, 10, 11, 14, 15, 15, 10, 15, 10, 11, 14, 15, 15, 15, 15, 15, 15, 15, 15",0
391,<S2SV_ModStart> ) ) { if ( ( sockPtr -> flags & NS_CONN_ESTABLISHED ) == 0u ) { sockPtr -> keep = NS_TRUE ; } else { <S2SV_ModStart> ) ) ; },0
392,<S2SV_ModStart> ret = 0 ; xtregs -> cp0 &= ~ XTENSA_CP_GLOBAL_MASK,0
393,<S2SV_ModStart> size ) ; if ( message -> length == 0 ) { osFree ( queueItem -> buffer ) ; queueItem -> buffer = NULL ; },0
394,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" <S2SV_ModStart> cg_item ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
395,"<S2SV_ModStart> int error ; int insert_count = 0 ; <S2SV_ModStart> new_bh ) ; insert_count ++ ; <S2SV_ModStart> ext2_xattr_cache_insert ( new_bh, insert_count",0
396,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
397,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
398,"<S2SV_ModStart>, 0, <S2SV_ModEnd> 0 ) ;",0
399,"<S2SV_ModStart> * imsy, 2 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) ; } if ( ( void ) ResetQuantumMemory ( imbuf, imsx * imsy, 1 ) == MagickFalse ) { return ( MagickFalse ) ; }",0
400,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; if ( ctx -> pbi -> num_channels > ctx -> pbi -> num_channels ) { return VPX_CODEC_INVALID_PARAM ; } <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; if ( frame -> frame_type == VPX_FRAME_TYPE_VP9 ) { <S2SV_ModStart> sd ) ; } else { return VPX_CODEC_INVALID_PARAM ; } <S2SV_ModStart> vp9_copy_reference_dec ( ctx <S2SV_ModEnd>, ( VP9_REFFRAME",0
401,<S2SV_ModStart> u1_num_mbsNby2 ) { if ( u1_num_mbsNby2 == 0 ) { ps_dec -> u1_slice_idx = 0 ; ps_dec -> u1_slice_idx_prev = 0 ; },0
402,<S2SV_ModStart> ; UWORD32 u4_x_dst_offset <S2SV_ModEnd> = 0 ; <S2SV_ModStart> ) ; else { <S2SV_ModStart> ps_dec ) ; },0
403,<S2SV_ModStart> VP9_LAST_FLAG ) { int i ; <S2SV_ModStart> const YV12_BUFFER_CONFIG * const cfg ; for ( i = 0 ; i < cm -> num_frame_bufs ; i ++ ) { <S2SV_ModStart> -> frame_bufs [ i <S2SV_ModEnd> ]. buf <S2SV_ModStart> ]. buf ; cfg = & cm -> frame_bufs [ cm -> ref_frame_map [ i ] ] ; },0
404,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
405,"<S2SV_ModStart> TX_SIZE tx_size = get_plane_tx_size ( pd, plane <S2SV_ModEnd> ) : mbmi <S2SV_ModStart> ; int i <S2SV_ModEnd> ; int max_blocks_wide <S2SV_ModStart> ) ) ; <S2SV_ModEnd> for ( r <S2SV_ModStart> if ( r <= <S2SV_ModEnd> max_blocks_high && c <S2SV_ModStart> if ( c <= <S2SV_ModEnd> max_blocks_wide ) visit <S2SV_ModStart> step ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
406,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 4 ) ; <S2SV_ModEnd> src += src_stride",0
407,<S2SV_ModStart> nrow ) { uint32 rowoffset = ( row + img -> row_offset ) % rowsperstrip ; <S2SV_ModStart> = rowsperstrip - rowoffset <S2SV_ModEnd> ; nrow = <S2SV_ModStart> -> row_offset ; <S2SV_ModEnd> if ( _TIFFReadEncodedStripAndAllocBuffer <S2SV_ModStart> ) ; } rowoffset = ( row + img -> row_offset ) % rowsperstrip ; <S2SV_ModStart> -> row_offset = rowoffset <S2SV_ModEnd> ; } if,0
408,<S2SV_ModStart> ; } } <S2SV_ModEnd> return 0 ;,0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. size <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. size <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
410,<S2SV_ModStart> num & ( 1U << number <S2SV_ModEnd> ) ) return <S2SV_ModStart> num - ( 1U <S2SV_ModEnd> << number ),0
411,"<S2SV_ModStart> int w = img -> rows * <S2SV_ModStart>, 1, img -> cols *",0
412,"<S2SV_ModStart> = NULL ; uint8_t * tmp_buf ; <S2SV_ModStart> uint16_t last_block_len ; uint8_t * tmp_buf ; <S2SV_ModStart> 1 ; } tmp_buf = & avp -> val [ <S2SV_ModEnd> avp -> length <S2SV_ModStart> avp -> length ] ; tmp_buf = & tmp_buf [ sizeof ( struct l2tp_avp_t ) ] ; if ( tmp_buf == NULL ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } tmp_buf = tmp_buf ; memcpy ( tmp_buf, & avp -> val, sizeof ( struct l2tp_avp_t ) ) ; if ( tmp_buf == NULL ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp ->",0
413,<S2SV_ModStart> case EVP_CTRL_AEAD_SET_IV_FIXED : if ( arg <= 0 || arg > CHACHA_CTR_SIZE ) return 0 ;,0
414,"<S2SV_ModStart> 0, 0, 0",0
415,"<S2SV_ModStart>, sk ) ; if (! sock_flag ( sk, SOCK_ZAPPED ) ) return - EBADF",0
416,<S2SV_ModStart> MT_CPTYPE_PASSSALT ) { if ( cpkt. length > MT_PASS_SALT_LEN ) { return - 1 ; },0
417,<S2SV_ModStart> MUTT_ABORT ) { imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } else <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto,0
418,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
419,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> strncmp ( line <S2SV_ModStart>, "" <S2SV_blank> "" ) == 0 ) { if ( <S2SV_ModEnd> strncmp ( line <S2SV_ModStart>, "" <S2SV_blank> "" ) == 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModEnd> } } }",0
420,"<S2SV_ModStart> remainder, & rlen ) ; if (! ret ) return ret ; if ( rlen == 0 ) return ASN1_BAD_ID <S2SV_ModEnd> ; if (",0
421,"<S2SV_ModStart> * slavename ; char * ptr ; <S2SV_ModStart> read_userfile ( ) ; ptr = user -> password <S2SV_ModStart> = 0 ; strlcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> 82 ) ; strlcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> -> pass_salt, strlen ( curconn -> pass_salt ) ) ; memcpy ( ptr <S2SV_ModEnd> + 1 + <S2SV_ModStart> state ) ; if ( strlen ( curconn -> pass_salt ) + 17 > sizeof ( md5sum ) ) { syslog ( LOG_NOTICE, _ ( ""(%d) <S2SV_blank> Invalid <S2SV_blank> login <S2SV_blank> by <S2SV_blank> %s."" ), curconn -> seskey, curconn -> username ) ; abort_connection ( curconn, pkthdr, _ ( ""Login <S2SV_blank> failed, <S2SV_blank> incorrect <S2SV_blank> username <S2SV_blank> or <S2SV_blank> password\\r\\n"" ) ) ; return ; } <S2SV_ModStart> ) + 17 <S2SV_ModEnd> ) ; md5_finish <S2SV_ModStart>, _ ( ""Login <S2SV_blank> failed, <S2SV_blank> incorrect <S2SV_blank> username <S2SV_blank> or <S2SV_blank> password\\r\\n"" ) ) ; free ( ptr <S2SV_ModEnd> ) ; return",0
422,"<S2SV_ModStart> ; if ( unicode_compare_with_ascii_string <S2SV_ModEnd> ( name, <S2SV_ModStart> { if ( unicode_compare_with_ASCII_string <S2SV_ModEnd> ( name,",0
423,"<S2SV_ModStart> off } ; if ( off > ut32_max ( sizeof ( buf ), ( ut32 ) UINT32_MAX - 1 ) ) { return - 1 ; }",0
424,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
425,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
426,"<S2SV_ModStart> size_t s ; size_t r ; <S2SV_ModStart> return ; } r = exif_get_long ( o, EXIF_BYTE_ORDER_INTEL ) ; if ( r < 0 || r > 6 ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } <S2SV_ModStart> ; if ( r < 0 || r > 6 || r > 6 || r > 6 || r > 7 || r > 7 <S2SV_ModEnd> ) { exif_log <S2SV_ModStart> return ; } r = exif_get_long ( o, EXIF_BYTE_ORDER_INTEL ) ; if ( r < 0 || r > 6 ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; }",0
427,<S2SV_ModStart> bd_addr ) { if ( bd_addr -> bd_flags & BT_BD_ADDR_FLAG_TINY ) return BT_STATUS_NOT_READY ;,0
428,"<S2SV_ModStart> int i ; size_t avail ; size_t <S2SV_ModEnd> expect ; txid <S2SV_ModStart> 4 ) ; expect = 8 + 8 + nxip * 8 ; if ( nxip < 0 || nxip > avail || expect > avail ) goto bad_format ; xmin = pq_getmsgint64 ( buf ) ; xmax = pq_getmsgint64 ( buf ) ; if ( xmin == 0 || xmin > xmax || xmax > MAX_TXID ) goto bad_format ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; snap -> xmin = xmin ; snap -> xmax = xmax ; SET_VARSIZE ( snap, TXID_SNAPSHOT_SIZE ( nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last || cur < xmin || cur >= xmax ) goto bad_format ; snap -> xip [ i ] = cur ; last = cur ; } PG_RETURN_POINTER ( snap ) ; bad_format : elog ( ERROR, ""invalid <S2SV_blank> snapshot <S2SV_blank> data"" ) ; return ( Datum ) NULL <S2SV_ModEnd> ; } <S2SV_null>",0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. size <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. size <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. size <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. size <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
430,<S2SV_ModStart> ( epoll_ ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> OE_EINVAL ) ; else ret = 0 ;,0
431,"<S2SV_ModStart> ( CMD_INITIALIZE, & new_global_options. option <S2SV_ModEnd>, NULL ) <S2SV_ModStart> ( CMD_INITIALIZE, & new_service_options. option <S2SV_ModEnd>, NULL )",0
432,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_PHNUM_MIN : * ( size_t * ) val = ms -> elf_phnum_min ; return 0 ;,0
433,<S2SV_ModStart> offset ) { struct address_space * mapping = page -> mapping ; <S2SV_ModStart> EXT4_JOURNAL ( page <S2SV_ModEnd> ) ; if,0
434,<S2SV_ModStart> ++ ) { if (! ( <S2SV_ModStart> + 1 ) ) ) return GF_OUT_OF_MEM <S2SV_ModStart> ; exit : if ( trak ) { <S2SV_ModStart> ) ; } },0
435,"<S2SV_ModStart> 17 ] ; unsigned char pass_salt [ 16 ] ; <S2SV_ModStart> = 0 ; strlcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart>, password, sizeof ( password ) - 1 ) ; pass_salt [ sizeof ( pass_salt ) - 1 <S2SV_ModEnd> ] = '\\0' <S2SV_ModStart> = '\\0' ; strlcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> + 1 + pass_salt, password, sizeof ( pass_salt ) - 1 <S2SV_ModEnd> ) ; md5_init <S2SV_ModStart> state ) ; memcpy <S2SV_ModEnd> ( md5sum + <S2SV_ModStart> ( password ) <S2SV_ModEnd> ) ; md5sum",0
436,<S2SV_ModStart> ; if ( _mibindex_max > 0 <S2SV_ModEnd> ) { int <S2SV_ModStart> { int i ; if ( _mibindex_max > 0 ) SNMP_FREE ( _mibindex_max ),0
437,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
438,<S2SV_ModStart> ( ) ; g_hash_table_remove_all ( headers ) ;,0
439,"<S2SV_ModStart> -> y_buffer ; if ( src_ybc -> y_width > dst_ybc -> y_height ) { return ; } <S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst,",0
440,"<S2SV_ModStart> * cpi, MACROBLOCK * x, MACROBLOCK * x ) { <S2SV_ModEnd> int mi_col ; <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ( mi_col = x -> mi_col_start ; mi_col < x -> mi_col_end ; mi_col += MI_BLOCK_SIZE ) { <S2SV_ModEnd> for ( i <S2SV_ModStart> ; i < x -> mb_index <S2SV_ModEnd> ; ++ i <S2SV_ModStart> ; } } memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> pred_mv ) ; memset <S2SV_ModEnd> ( sf -> <S2SV_ModStart> -> partition_search_type == SEARCH_PARTITION <S2SV_ModEnd> && sf -> <S2SV_ModStart> -> use_lastframe_partitioning ) { memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ( xd -> <S2SV_ModEnd> left_context, 0 <S2SV_ModStart> ( xd -> <S2SV_ModEnd> left_seg_context, 0 <S2SV_ModStart> ( xd -> <S2SV_ModEnd> left_seg_context ) ) <S2SV_ModStart> ( xd ->",0
441,"<S2SV_ModStart> ; int hexdump, length_hexdump <S2SV_ModStart> ; if ( tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } if ( <S2SV_ModStart> ) ) ; length_hexdump = EXTRACT_32BITS ( lmp_obj_header -> length ) ; if ( length_hexdump < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( length_hexdump < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } <S2SV_ModStart> ) ) ; length_hexdump = EXTRACT_32BITS ( lmp_obj_header -> length ) ; if ( length_hexdump < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } <S2SV_ModStart> ) ) ; length_hexdump = EXTRACT_32BITS ( lmp_obj_header -> length ) ; if ( length_hexdump < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } <S2SV_ModStart> ) )",0
442,"<S2SV_ModStart> mbmi, const MV <S2SV_ModEnd> mvs [ 2 <S2SV_ModStart> i ) { <S2SV_ModEnd> MV * ref <S2SV_ModStart> ref = & ( <S2SV_ModStart> [ i ] ) <S2SV_ModStart> 0 ]. as_mv_matrix <S2SV_ModEnd> ; vp9_inc_mv (",0
443,"<S2SV_ModStart> ) ; } res = vpx_codec_enc_config_default ( encoder -> interface ( ), & cfg, 0 ) ; if ( res ) die_codec ( & codec, & cfg ) ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if (!",0
444,<S2SV_ModStart> ; if ( skb_out -> len < size ||,0
445,<S2SV_ModStart> ) return ; if (! <S2SV_ModStart> netsnmp_mibindex_load ( ) ) { return ; } <S2SV_ModEnd> DEBUGMSGTL ( (,0
446,"<S2SV_ModStart> { fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ], O_RDWR ) <S2SV_ModStart> 1 ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_KEY ) ) <S2SV_ModStart> EV_REL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_SYN ) ) <S2SV_ModStart> x ++ ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> ]. mapped_id )",0
447,<S2SV_ModStart> i ++ ) vp9_free_frame <S2SV_ModEnd> ( & ctx,0
448,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s, <S2SV_ModStart> & 1 ) vpx_lpf_vertical_4 <S2SV_ModEnd> ( s +",0
449,"<S2SV_ModStart> krb5_error_code iakerb_alloc_context ( krb5_ctx_id_t * ctx_id <S2SV_ModEnd> ) { iakerb_ctx_id_t <S2SV_ModStart> pctx ) { krb5_ctx_id_t ctx ; krb5_error_code code <S2SV_ModEnd> ; ctx = <S2SV_ModStart> ; code = k5_gss_init_context_id <S2SV_ModEnd> ( & ctx <S2SV_ModStart> ctx -> k5c, ctx_id",0
450,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> bitmapDC = CreateCompatibleDC",1
451,<S2SV_ModStart> ; while ( ( <S2SV_ModStart> )!= START_CODE_PREFIX ) && ( ps_stream -> u4_offset < ps_stream -> u4_max_offset ),1
452,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { kfree ( string ) ; <S2SV_ModStart> - EINVAL ; }",0
453,"<S2SV_ModStart> ) ) ; mono_class_set_generic_inst_type_info <S2SV_ModEnd> ( imethod,",0
454,<S2SV_ModStart> ) ] ; long <S2SV_ModEnd> tmp ; if <S2SV_ModStart> ; if ( count >= sizeof ( buf ) ) return - EINVAL ; if (,0
455,<S2SV_ModStart> char * last_elem = NULL <S2SV_ModStart> size_t len ; int is_secure = 0 ; <S2SV_ModStart> == 'O' ) && ( is_path || * name == ':' ) ) { is_secure = 1 ; } if ( is_secure ) { if ( <S2SV_ModEnd> ( __libc_enable_secure? <S2SV_ModStart> l -> l_origin ) == NULL ) { __libc_enable_secure = 0 ; } else { __libc_enable_secure = 0 ; } } <S2SV_ModEnd> repl = (,0
456,"<S2SV_ModStart> ) ; } if ( decInst -> numSamples < 1 ) { DEC_API_TRC ( ""H264SwDecInit# <S2SV_blank> ERROR: <S2SV_blank> numSamples <S2SV_blank> <= <S2SV_blank> 1"" ) ; return ( H264SWDEC_PARAM_ERR ) ; }",0
457,<S2SV_ModStart> drop ; } <S2SV_ModEnd> opt -> optlen,0
458,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) break ;",0
459,<S2SV_ModStart> goto errout ; if ( info -> stages > MAX_STAGES ) goto errout ;,0
460,<S2SV_ModStart> krb5_key_data * key_data ; int max_key_size = 0 <S2SV_ModStart> == NULL ) { max_key_size = 0 ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { max_key_size = 0 ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { max_key_size = 0 ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { max_key_size = 0 ; <S2SV_ModStart> goto cleanup ; },0
461,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
462,<S2SV_ModStart> ] ) ; if ( nByte < 0 ) { rc = SQLITE_NOMEM ; goto trunc ; } <S2SV_ModStart> 1 ) ; trunc :,0
463,<S2SV_ModStart> filp ) { struct sockaddr_storage addr ; struct sockaddr_storage * s = ( struct sockaddr_storage * ) filp -> private_data ; <S2SV_ModStart> ) ) ; iput ( s ) ;,0
464,"<S2SV_ModStart> * orelse, bool is_block, <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. is_block = is_block",0
465,"<S2SV_ModStart> char * name, my_bool is_header <S2SV_ModStart> ; if ( is_header ) { if ( <S2SV_ModStart> ) ; } }",0
466,"<S2SV_ModStart> return ""Invalid <S2SV_blank> request <S2SV_blank> ID"" ; case NGHTTP2_ERR_INVALID_REQUEST_ID : return ""Invalid <S2SV_blank> request <S2SV_blank> ID"" ;",0
467,"<S2SV_ModStart> UINT error ; if (! <S2SV_ModStart>, eventId ) ||! <S2SV_ModEnd> Stream_Read_UINT32 ( s <S2SV_ModStart>, pduLength ) ) { WLog_ERR ( TAG, ""Failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> eventId: <S2SV_blank> %"" PRIu16 ""!"", eventId ) ; return ERROR_INVALID_DATA ; } <S2SV_ModEnd> # ifdef WITH_DEBUG_RDPEI",0
468,"<S2SV_ModStart> ) ) ; if ( pData -> mqttTimeout > 0 ) { zsocket_setsockopt ( pData -> socket, ZMQ_LINGER, ( const char * ) pData -> mqttTimeout, sizeof ( pData -> mqttTimeout ) ) ; }",0
469,"<S2SV_ModStart> struct flowi6 fl6 ; struct ipv6_txoptions * opt <S2SV_ModStart> daddr ) ; opt = rcu_dereference ( np -> opt ) ; <S2SV_ModStart>, skb, <S2SV_ModEnd> fl6, np <S2SV_ModStart>, & fl6, opt <S2SV_ModStart>, skb, <S2SV_ModEnd> fl6, np",0
470,"<S2SV_ModStart> ; if ( quantum_info == NULL ) { clone_info = DestroyImageInfo ( clone_info ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; } if (",0
471,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> UINT32 failureCode ; if (! Stream_SafeSeek ( s, length ) ) { WLog_ERR ( TAG, ""RDP_NEG_FAILURE"" ) ; return ; } <S2SV_ModStart> = NEGO_STATE_FAIL ; return ;",0
472,<S2SV_ModStart> ; int len ; int <S2SV_ModEnd> result = RLC_OK <S2SV_ModStart> 8 ) ; if ( m_len > 0 ) { <S2SV_ModStart> 8 ) ; } <S2SV_ModStart> 8 ) ; if ( m_len > 0 ) { <S2SV_ModStart> 8 ) ; },0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,<S2SV_ModStart> 8 ) ; psf = psf_allocate ( <S2SV_ModEnd> ) ; if,0
475,"<S2SV_ModStart> void fix_interp_filter ( VP9_COMMON_CONTEXT * ctx, <S2SV_ModStart> += cm -> counts_switchable_interp <S2SV_ModEnd> [ j ]",0
476,<S2SV_ModStart> & cpi -> td. <S2SV_ModStart> ; x -> act_zbin_adj = 0 ; x -> act_zbin_adj_intra = 0 ; x -> act_zbin_adj_intra <S2SV_ModEnd> = 0 ; <S2SV_ModStart> subsampling_y ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
477,"<S2SV_ModStart> hp ) ; if ( htc -> rxbuf_len > HTTP_Rx_BUF_SIZE ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } <S2SV_ModStart> 0 ) { WSPR <S2SV_ModEnd> ( sp, <S2SV_ModStart> ( sp, SLT_HttpGarbage <S2SV_ModEnd> ) ; return <S2SV_ModStart> ) ; } retval = htc_request_check_host_hdr ( hp ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_Error, ""Duplicated <S2SV_blank> Host <S2SV_blank> header"" ) ; return ( retval ) ; }",0
478,"<S2SV_ModStart> EOFOp 0x07 char * magick_buffer <S2SV_ModEnd> ; Image * <S2SV_ModStart> ) ) ; magick_buffer = ( char * ) malloc ( sizeof ( char ) * count ) ; <S2SV_ModStart> char * ) magick_buffer <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( count!= 3 ) || ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ( image, 3, ( unsigned char * ) magick_buffer <S2SV_ModEnd> )!= 0 <S2SV_ModStart>. x = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. y = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. columns = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. rows = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart> ( image, 3, ( unsigned char * ) magick_buffer <S2SV_ModEnd> ) ; flags <S2SV_ModStart> ( image, 3, ( unsigned char * ) magick_buffer <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( image, 3, ( unsigned char * ) magick_buffer <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( image, 3, ( unsigned char * ) magick_buffer <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( image, 3, ( unsigned char * ) magick_buffer <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( image, 3, ( unsigned char *",0
479,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( tETH_HDR ) ),0
480,<S2SV_ModStart> -> u4_cur_slice_offset ; <S2SV_ModEnd> ps_dec -> u4_cur_slice_offset_lsb <S2SV_ModStart> -> u4_cur_slice_offset_msb ; <S2SV_ModEnd> ps_dec -> u4_cur_slice_offset_msb,0
481,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> * karg ; <S2SV_ModEnd> struct pci_dev * <S2SV_ModStart> pci_dev * pdev <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> ; if ( <S2SV_ModEnd> ( ( iocnum <S2SV_ModStart> ) || ( ioc -> num_ioc <S2SV_ModEnd> < 0 ) <S2SV_ModStart> 0 ) || <S2SV_ModEnd> ( ioc == <S2SV_ModStart> ) || ( pdev <S2SV_ModEnd> == NULL ) <S2SV_ModStart> printk ( MYIOC_s_ERR_FMT ""%s@%d::mptctl_getiocinfo <S2SV_blank> - <S2SV_blank> "" ""Structure <S2SV_blank> size <S2SV_blank> mismatch\\n"" <S2SV_ModEnd>, __FILE__, <S2SV_ModStart> ) ) ; <S2SV_ModEnd> return - ENODEV <S2SV_ModStart> ENODEV ; } <S2SV_ModEnd> sdev = mptctl_get_device <S2SV_ModStart> ( pdev ) <S2SV_ModEnd> ; sdev -> <S2SV_ModStart> port ) ; <S2SV_ModEnd> return 0 ;",0
482,<S2SV_ModStart> = 8 ; image -> rows_max = 255 ;,0
483,"<S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv",0
484,"<S2SV_ModStart> ; if ( datao + 8 > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> order = EXIF_BYTE_ORDER_INTEL ; datao += exif_get_long ( buf + datao + 8, EXIF_BYTE_ORDER_INTEL ) ; if ( <S2SV_ModStart> ; if ( <S2SV_ModEnd> c = exif_get_short <S2SV_ModStart> ; if ( <S2SV_ModEnd> o + 12 <S2SV_ModStart> o + 12 > o ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( <S2SV_ModEnd> o + 2 <S2SV_ModStart> o + 2 > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( s > buf_size ) { exif_log ( en -> log, EXIF_LOG_",0
485,"<S2SV_ModStart> ; if (! filename ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found\\n"", procName, dirout ) ; return 1 ; } if (",0
486,"<S2SV_ModStart> void unbind_ports ( int num_ports <S2SV_ModEnd> ) { SERVICE_OPTIONS <S2SV_ModStart> 1 ) ; if ( num_ports > MAX_PORTS ) { s_log ( LOG_ERR, ""Number <S2SV_blank> of <S2SV_blank> ports <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", num_ports, MAX_PORTS ) ; return ; } <S2SV_ModStart>. next ; if ( num_ports > MAX_PORTS ) { s_log ( LOG_ERR, ""Number <S2SV_blank> of <S2SV_blank> ports <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", num_ports, MAX_PORTS ) ; return ; } <S2SV_ModStart> service_options ) ; if (! opt ) { s_log ( LOG_ERR, ""No <S2SV_blank> service <S2SV_blank> options <S2SV_blank> in <S2SV_blank> the <S2SV_blank> queue"" ) ; return ; } <S2SV_ModStart> -> ctx ) { if (! opt -> session_timeout ) { s_log ( LOG_ERR, ""No <S2SV_blank> session <S2SV_blank> timeout <S2SV_blank> in <S2SV_blank> queue"" ) ; return ; } <S2SV_ModStart> 1 ) ; } <S2SV_ModStart> servname ) ; if (! opt -> session_timeout ) { s_log ( LOG_ERR, ""No <S2SV_blank> session <S2SV_blank> timeout <S2SV_blank> in <S2SV_blank>",0
487,<S2SV_ModStart> void ) { if (! recovery_started ) return ;,0
488,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> )",0
489,"<S2SV_ModStart> image ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
490,"<S2SV_ModStart> { WORD32 i, j <S2SV_ModStart> ; WORD32 st_rps_idx, st_rps_idx_idx <S2SV_ModStart> ; st_rps_idx = 0 <S2SV_ModEnd> ; num_neg_pics = <S2SV_ModStart> ; st_rps_idx = 0 <S2SV_ModEnd> ; num_pos_pics = <S2SV_ModStart> ; st_rps_idx = 0 <S2SV_ModEnd> ; num_neg_pics = <S2SV_ModStart> ; st_rps_idx = 0 <S2SV_ModEnd> ; num_pos_pics = <S2SV_ModStart> ; st_rps_idx = 0 <S2SV_ModEnd> ; num_neg_pics = <S2SV_ModStart> ; st_rps_idx = 0 <S2SV_ModEnd> ; num_pos_pics = <S2SV_ModStart> ; st_rps_idx = 0 <S2SV_ModEnd> ; num_pos_pics = <S2SV_ModStart> ; st_rps_idx = 0 <S2SV_ModEnd> ; num_pos_pics = <S2SV_ModStart> ; st_rps_idx = 0 <S2SV_ModEnd> ; num_pos_pics = <S2SV_ModStart> ; st_rps_idx = 0 <S2SV_ModEnd> ; num_pos_pics = <S2SV_ModStart> ; st_rps_idx = 0 <S2SV_ModEnd> ; num_pos_pics = <S2SV_ModStart> ; st_rps_idx = 0 <S2SV_ModEnd> ; num_pos_pics =",0
491,"<S2SV_ModStart>, int fmt, int * indent <S2SV_ModStart> child ) { if ( indent ) * indent ++ ='<S2SV_blank>'; <S2SV_ModStart> = str = print_string <S2SV_ModEnd> ( child -> <S2SV_ModStart> child -> string, indent <S2SV_ModStart> depth, fmt, indent <S2SV_ModStart> = 1 ; * indent ++ ='<S2SV_blank>'; <S2SV_ModStart> fail ) { * indent ++ ='<S2SV_blank>'; <S2SV_ModStart> + 1 ; * indent ++ ='<S2SV_blank>'; <S2SV_ModStart> ; i < * indent <S2SV_ModEnd> ; ++ i <S2SV_ModStart> ; i < * indent <S2SV_ModEnd> ; ++ i <S2SV_ModStart> ; i < * indent <S2SV_ModEnd> ; ++ i <S2SV_ModStart> ; j < * indent <S2SV_ModEnd> ; ++ j <S2SV_ModStart> = 0 ; * indent ++ ='<S2SV_blank>'; <S2SV_ModStart> ; i < * indent <S2SV_ModEnd> ; ++ i <S2SV_ModStart> ; i < * indent <S2SV_ModEnd> ; ++ i <S2SV_ModStart> ; j < * indent <S2SV_ModEnd> ; ++ j <S2SV_ModStart> = '\\t' ; * ptr ++ = str [ j ] ; <S2SV_ModStart> ( ptr, * indent <S2SV_ModEnd> ) ; }",0
492,"<S2SV_ModStart> sk ) ; if ( writable ) unix_poll_wait ( file, & sk -> sk_receive_queue, wait ) ; <S2SV_ModStart> { if ( unix_peer ( other )!= sk ) { sock_poll_wait ( file, & unix_sk ( other ) -> peer_wait, wait ) ; if ( unix_recvq_full ( other ) ) writable = 0 ; } sock_put ( other ) ; } if ( writable ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; if (! capable ( CAP_SYS_RAWIO ) ) { if ( <S2SV_ModStart> = 0 ; <S2SV_ModEnd> } if (",0
493,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; outpos += strlen ( outputbuffer ) ;",0
494,<S2SV_ModStart> ( OM_uint32 ) KRB5_MALLOC_FAILURE <S2SV_ModEnd> ; return GSS_S_DEFECTIVE_TOKEN <S2SV_ModStart> buffer. length > <S2SV_ModEnd> token_wrapper_len + 14,0
495,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { vpx_ref_frame_t <S2SV_ModEnd> * frame = <S2SV_ModStart> ( args, vpx_ref_frame_t <S2SV_ModEnd> * ) ; <S2SV_ModStart> NULL ) { VPxWindow * window = ctx -> frame_window ; <S2SV_ModStart> * fb ; if (! ctx -> cpi -> frame_mode ) { return VPX_CODEC_INVALID_PARAM ; } <S2SV_ModStart> * fb ; if (! <S2SV_ModStart>, & fb ) ) return VPX_CODEC_ERROR ; yuvconfig2image ( & frame -> img, fb, NULL ) ; frame -> idx = 0 ; frame -> ref_frame = 1 ; frame -> ref_frame_idx = 0 ; frame -> ref_frame_enc = 1 <S2SV_ModEnd> ; return VPX_CODEC_OK",0
496,<S2SV_ModStart> plug ) ; <S2SV_ModEnd> put_ioctx ( ctx,0
497,"<S2SV_ModStart> name, int rep_no_key_blocks <S2SV_ModEnd> ) { int <S2SV_ModStart> ; if ( rep_no_key_blocks <S2SV_ModEnd> ) { my_off_t",0
498,"<S2SV_ModStart> s } ; <S2SV_ModEnd> uECC_word_t carry ; <S2SV_ModStart> curve ) ; if (! <S2SV_ModStart>, curve ) ) { return 0 ; } <S2SV_ModEnd> if ( uECC_vli_isZero",0
499,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|dao-truncated]"" <S2SV_ModEnd> ) ) ;",0
500,<S2SV_ModStart> ; } else if ( pool -> free_total > 0 ) <S2SV_ModStart> ) ; } pool -> free_total = 0 ;,0
501,"<S2SV_ModStart> { while ( cp && <S2SV_ModStart> ] ) { <S2SV_ModEnd> const char hex <S2SV_ModStart> const char hex [ ] = ""00112233445566778899aAbBcCdDeEfF"" ; int dcount = 0 ; if ( * cp == 'x' || * cp == 'X' ) for ( ++ cp ; * cp && ( dp = index ( hex, * cp ) ) && ( dcount ++ < 2 ) ; cp ++ ) cval = ( cval * 16 ) + ( ( int ) ( dp - hex ) / 2 ) ; else if ( * cp == 'o' || * cp == 'O' ) for ( ++ cp ; * cp && ( index ( ""01234567"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 8 ) + ( * cp - '0' ) ; else for ( ; * cp && ( index ( ""0123456789"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 10 ) + ( * cp - '0' ) ; } else if ( * cp == '\\\\' && cp [ 1 ] ) { switch ( * ++",0
502,"<S2SV_ModStart> char detect [ 5 <S2SV_ModEnd> ] ) { <S2SV_ModStart> ( detect, ""YUV5"" <S2SV_ModEnd>, 4 )",0
503,"<S2SV_ModStart>, * pixd, * pixwc <S2SV_ModStart> == NULL ) { pixFree ( pixc ) ; <S2SV_ModStart> NULL ) ; } <S2SV_ModStart> == NULL ) { pixFree ( pixc ) ; <S2SV_ModStart> NULL ) ; } <S2SV_ModStart> == NULL ) { pixFree ( pixc ) ; <S2SV_ModStart> NULL ) ; } <S2SV_ModStart> == NULL ) { pixFree ( pixc ) ; <S2SV_ModStart> NULL ) ; } <S2SV_ModStart> == NULL ) { pixFree ( pixc ) ; <S2SV_ModStart> NULL ) ; } <S2SV_ModStart> == NULL ) { pixFree ( pixc ) ; <S2SV_ModStart> NULL ) ; } <S2SV_ModStart> == NULL ) { pixFree ( pixc ) ; <S2SV_ModStart> NULL ) ; } <S2SV_ModStart> == NULL ) { pixFree ( pixc ) ; <S2SV_ModStart> NULL ) ; } <S2SV_ModStart> == NULL ) { pixFree ( pixc ) ; <S2SV_ModStart> NULL ) ; } <S2SV_ModStart> == NULL ) { pixFree ( pixc ) ; <S2SV_ModStart> NULL ) ; } <S2SV_ModStart> == NULL ) { pixFree ( pixc ) ; <S2SV_ModStart> NULL ) ; } <S2SV_ModStart> == NULL ) { pixFree ( pixc ) ; <S2SV_ModStart> NULL ) ; } <S2SV_ModStart> == NULL ) { pixFree ( pixc ) ; <S2SV_ModStart> NULL ) ; }",0
504,<S2SV_ModStart>. vf = vpx_mse16x16 <S2SV_ModEnd> ; xd ->,1
505,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> overhead = 16 <S2SV_ModStart> int size = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> } if ( size <S2SV_ModEnd> > conn ->,0
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NEGO_STATE_FAIL ; goto fail <S2SV_ModEnd> ; } Stream_Read_UINT8 <S2SV_ModStart> = NEGO_STATE_FINAL ; return ; fail : return ;,0
507,"<S2SV_ModStart> i, target_bits_per_mb ; int correction_factor <S2SV_ModStart> i, correction_factor <S2SV_ModEnd> ; target_bits_per_mb = <S2SV_ModStart> ; do { int bits_per_mb_at_this_q ; if ( i >= active_worst_quality ) { break ; } <S2SV_ModStart>, i, <S2SV_ModEnd> correction_factor ) ;",0
508,<S2SV_ModStart> ; value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1101WritePhyReg (,0
509,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
510,"<S2SV_ModStart> int dst_stride, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart>, left_col, 128 <S2SV_ModEnd> ) ; DECLARE_ALIGNED_ARRAY <S2SV_ModStart>, above_data, 128 <S2SV_ModEnd> + 16 ) <S2SV_ModStart> + y ; memset <S2SV_ModEnd> ( left_col, <S2SV_ModStart>, 129, 128 <S2SV_ModEnd> ) ; if <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( right_col, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset",0
511,"<S2SV_ModStart> ++ ; } else if ( pattern [ end ] == \'""\' ) { end ++ ; while ( ( pattern [ end ]!= 0 ) && ( pattern [ end ]!= \'""\' ) ) end ++ ; }",0
512,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_mmap_lock ) ;,0
513,"<S2SV_ModStart> * cpi, VP9_COMMON * cm, <S2SV_ModStart> -> common ; write_profile ( <S2SV_ModEnd> cm -> profile <S2SV_ModStart> wb ) ; write_bit ( wb, 0 ) ; write_bit ( wb, <S2SV_ModEnd> cm -> frame_type <S2SV_ModStart> cm -> frame_type <S2SV_ModEnd> ) ; if <S2SV_ModStart> KEY_FRAME ) { write_bit ( wb, 0 ) ; write_bit ( wb, <S2SV_ModEnd> cm -> profile <S2SV_ModStart> profile > PROFILE_1 <S2SV_ModEnd> ) ; if <S2SV_ModStart> } else { assert ( cm -> profile == PROFILE_1 ) ; vp9_wb_write_bit ( wb, 0 ) ; } write_frame_size ( cm, wb ) ; } else { if (! cm -> show_frame ) vp9_wb_write_bit ( wb, cm -> intra_only ) ; if (! cm -> error_resilient_mode ) vp9_wb_write_literal ( wb, cm -> reset_frame_context, 2 ) ; if ( cm -> intra_only ) { write_sync_code ( wb ) ; vp9_wb_write_literal ( wb, get_refresh_mask ( cpi ), REF_FRAMES ) ; } else {",0
514,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 1 <S2SV_ModStart> 1 ) { if (! rrd_image_get_option ( im, ""graph-render-mode"", NULL ) ) { fprintf ( stderr, ""Error: <S2SV_blank> %s\\n"", strerror ( errno ) ) ; exit ( EXIT_FAILURE ) ; } <S2SV_ModStart> ; if ( <S2SV_ModEnd>! rrd_image_get_option ( <S2SV_ModStart> 1 ) { if (! rrd_image_get_option ( im, ""graph-render-mode"", NULL ) ) { fprintf ( stderr, ""Error: <S2SV_blank> %s\\n"", strerror ( errno ) ) ; exit ( EXIT_FAILURE ) ; } <S2SV_ModStart> ; if ( <S2SV_ModEnd>! rrd_image_get_option ( <S2SV_ModStart> 1 ) { if (! rrd_image_get_option ( im, ""graph-render-mode"", NULL ) ) { fprintf ( stderr, ""Error: <S2SV_blank> %s\\n"", strerror ( errno ) ) ; exit ( EXIT_FAILURE ) ; } <S2SV_ModStart> ; if ( <S2SV_ModEnd>! rrd_image_get_option ( <S2SV_ModStart> 1 ) { if (! rrd_image_get_option ( im, ""graph",0
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { q = osStrchr <S2SV_ModEnd> ( p +,1
516,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
517,<S2SV_ModStart> KEY_FRAME ) { memcpy <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd ->,1
518,"<S2SV_ModStart> error_t error ; int16_t <S2SV_ModEnd> n ; uint32_t <S2SV_ModStart> ; uint32_t status ; uint8_t * rxBuffer <S2SV_ModStart> ( interface, ENC624J600_ESTAT <S2SV_ModEnd> ) & ESTAT_PKTCNT <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, context ->",0
519,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv ) { VALUE klass = rb_ary_search ( rb_ary_lookup ( argc, ""klass"" ), RB_TYPE_P, rb_ary_lookup ( argc, ""content"" ) ) ; <S2SV_ModEnd> xmlSchemaPtr schema ; <S2SV_ModStart> xmlSchemaPtr schema ; VALUE content = rb_ary_lookup ( argc, ""content"" ) ; <S2SV_ModStart> = xmlSchemaNewMemParserCtxt ( content <S2SV_ModEnd> ) ; VALUE <S2SV_ModStart> errors ) ; rb_iv_set ( rb_schema, ""@content"", content ) ;",0
520,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> strlen ( config_arg <S2SV_ModStart> ( config_arg ) > <S2SV_ModEnd> CONF_MAX_OPTION_ARG_LEN ) { <S2SV_ModStart> ( LOG_ERR, ""Invalid <S2SV_blank> option <S2SV_blank> value <S2SV_blank> %s"", config_arg ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( config_arg ) <S2SV_ModStart> ( LOG_ERR, ""Invalid <S2SV_blank> argument <S2SV_blank> %s"", config_arg ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( config_arg ) > <S2SV_ModEnd> CONF_MAX_OPTION_ARG_LEN ) { <S2SV_ModStart> ( LOG_ERR, ""Invalid <S2SV_blank> argument <S2SV_blank> value <S2SV_blank> %s"", config_arg ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( config_arg ) > <S2SV_ModEnd> CONF_MAX_OPTION_ARG_LEN ) { <S2SV_ModStart> ( LOG_ERR, ""Invalid <S2SV_blank> argument <S2SV_blank> %s"", config_arg ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( config_arg ) > <S2SV_ModEnd> CONF_MAX_OPTION_ARG_LEN ) { <S2SV_ModStart> ( LOG_ERR, ""Invalid <S2SV_blank> argument <S2SV_blank> value <S2SV_blank> %s"", config_arg ) ; print_syntax ( ) ; return 1",0
521,<S2SV_ModStart> 2 ] ; if ( x + state -> xsize > state -> ysize - 3 ) return - 1 ; <S2SV_ModStart> 2 ] ; if ( x + state -> xsize > state -> ysize - 3 ) return - 1 ;,0
522,<S2SV_ModStart> err = - <S2SV_ModEnd> EALREADY ; if,0
523,<S2SV_ModStart> POLL_IN ) ; <S2SV_ModEnd> perf_event_wakeup ( handle,0
524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> len, wchar_t * <S2SV_ModStart> len > 0 && * op <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> * op ++ <S2SV_ModStart> * op ++ = <S2SV_ModEnd> ( wchar_t ) <S2SV_ModStart> ( wchar_t ) <S2SV_ModEnd> ( ( u <S2SV_ModStart> ) ) ; <S2SV_ModEnd> s += size <S2SV_ModStart> } else { * op ++ = * s ++ ; len -- ; } } return <S2SV_ModEnd> op - pwcs",0
525,"<S2SV_ModStart> EPROTONOSUPPORT ) { if ( as_console ) { sleep ( 2 ) ; } <S2SV_ModStart> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" <S2SV_ModEnd> ) ; }",0
526,"<S2SV_ModStart> ( interface, KSZ8851_RXFHSR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_RXFHBCR <S2SV_ModEnd> ) & RXFHBCR_RXBC_MASK <S2SV_ModStart> ( interface, KSZ8851_RXFDPR, KSZ8851_RXFDPR_RXFPAI <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851ReadFifo <S2SV_ModStart> ( interface, KSZ8851_RXFDPR, KSZ8851_RXFDPR_RXFPAI <S2SV_ModEnd> ) ; ksz8851ClearBit <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ancillary <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ88",0
527,"<S2SV_ModStart> ast_for_funcdef_impl ( struct compiler <S2SV_ModEnd> * c, <S2SV_ModStart> * n, asdl_seq * decorator_seq, int is_async, string * type_comment, string * comment <S2SV_ModEnd> ) { identifier <S2SV_ModStart> returns, type_comment, comment <S2SV_ModStart> ( n ) <S2SV_ModEnd>, c ->",0
528,"<S2SV_ModStart> ( mm, 0xA1C000 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( pgd, 0xA1C000 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( pud, 0xA1C000 <S2SV_ModEnd> ) ; split_huge_page_pmd <S2SV_ModStart>, pmd, 0xA1C000 <S2SV_ModEnd>, & ptl <S2SV_ModStart> : flush_tlb ( ) ; mm_dec_nr_pmds ( mm",0
529,"<S2SV_ModStart> ; if ( 0!= ( * packet_data_pptr + 1 ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> packet_data_pptr <S2SV_blank> = <S2SV_blank> %p <S2SV_blank> (packet_len <S2SV_blank> = <S2SV_blank> %d) <S2SV_blank>!= <S2SV_blank> token_ptr <S2SV_blank> = <S2SV_blank> %p <S2SV_blank> (packet_data_start_ptr <S2SV_blank> = <S2SV_blank> %p)"", * packet_data_pptr, packet_len, * packet_data_start_ptr, dst_coap_msg_ptr -> token_ptr ) ; return - 1 ; } if (",0
530,"<S2SV_ModStart> ) ) { if (! hal_set_mode ( callbacks_get_adapter_struct ( ), hal_MODE_READ_ONLY ) ) { printf ( ""Unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> adb <S2SV_blank> device.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; }",0
531,"<S2SV_ModStart> 0 ) ; if ( ( RAW ( row, col ) = pred [ col & 1 ] ) > 4098 && col < width ) derror ( ) ; <S2SV_ModStart> ; if ( row >= height && row < height ) { <S2SV_ModEnd> derror ( )",0
532,<S2SV_ModStart> len < needed || len > param -> data_start,0
533,"<S2SV_ModStart> ; if ( ( clone_info -> quantum_info = ( QuantumInfo * ) AllocateQuantumInfo ( quantum_info -> quantum_info_size ) ) == NULL ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if (",0
534,<S2SV_ModStart> ( bfqq ) bfq_idle_slice_timer <S2SV_ModEnd> ( bfqq ),0
535,<S2SV_ModStart> ; length += sizeof ( PRIMARY_DRAWING_ORDER_FIELD ) <S2SV_ModEnd> ; length +=,0
536,<S2SV_ModStart> ; if ( <S2SV_ModEnd>! new_create ) <S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
537,"<S2SV_ModStart> int plane ; vp9_foreach_transformed_block_in_all_plans <S2SV_ModEnd> ( xd,",0
538,"<S2SV_ModStart> * cpi, TileDataEnc * tile_data <S2SV_ModEnd>, int mi_row <S2SV_ModStart> -> e_mbd ; int mi_row, int mi_col ; BLOCK_SIZE bsize ; <S2SV_ModStart> ( cpi, tile_data <S2SV_ModEnd>, mi_row, <S2SV_ModStart> ( cpi, tile_data <S2SV_ModEnd>, mi_row, <S2SV_ModStart> ) ) { set_mode_info ( & xd -> mi [ 0 ] -> mbmi, bsize, DC_PRED <S2SV_ModEnd> ) ; }",0
539,<S2SV_ModStart> = NULL ; reader. hrtf = NULL ;,0
540,<S2SV_ModStart> -> ranges = safeMalloc <S2SV_ModEnd> ( sizeof (,0
541,"<S2SV_ModStart> ; if ( flags & VP8_EFLAG_NO_UPD_GF ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( flags & VP8_EFLAG_NO_UPD_ARF ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( <S2SV_ModStart> VP8_EFLAG_FORCE_GF ) ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_ALTR_FRAME ; vp",0
542,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
543,<S2SV_ModStart>! head ) <S2SV_ModEnd> return - EINVAL <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
544,"<S2SV_ModStart> * pptr, u_int64 <S2SV_ModEnd> len ) { <S2SV_ModStart> advance ; u_int64 <S2SV_ModEnd> tlen ; const <S2SV_ModStart> case BGP_ATTR_TYPE_IPV4_ADDR : if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_ATTR_TYPE_IPV6_ADDR : if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_ATTR_TYPE_IPV6_ADDR : if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_ATTR_TYPE_IPV6_ADDR : if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_ATTR_TYPE_IPV6_ADDR : if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_ATTR_IPV6_ADDR : if ( tlen < 4 ) { ND_PRINT (",0
545,"<S2SV_ModStart> ""<tr><td>Runtime <S2SV_blank> time</td><td>%s</td>"", ( int64_t ) <S2SV_ModStart>, ""<tr><td>Runtime <S2SV_blank> time <S2SV_blank> in <S2SV_blank> seconds</td>"", ( int64_t )",0
546,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
547,"<S2SV_ModStart>, ""%s"", zx_liquidTxConfirmStr <S2SV_ModEnd> ) ; }",0
548,"<S2SV_ModStart> ; if ( len < sizeof ( * intfc ) ) { dev_err ( ddev, ""invalid <S2SV_blank> interface <S2SV_blank> cache <S2SV_blank> descriptor\\n"" ) ; retval = - EINVAL ; goto err_free_intfc ; } if (",0
549,"<S2SV_ModStart> 0, 0, 0",0
550,<S2SV_ModStart> ; distortion = vpx_variance16x16 <S2SV_ModEnd> ( * (,1
551,"<S2SV_ModStart> interface ) ; <S2SV_ModEnd> if ( macCompAddr <S2SV_ModStart> ) ) { enc624j600WriteReg ( interface, ENC624J600_MAADR1, ENC624J600_MAADR1_DEFAULT ) ; <S2SV_ModStart> temp ) ; enc624j600WriteReg ( interface, ENC624J600_MAADR2, ENC624J600_MAADR2_DEFAULT ) ; <S2SV_ModStart> temp ) ; enc624j600WriteReg ( interface, ENC624J600_MAADR3, ENC624J600_MAADR3_DEFAULT ) ; <S2SV_ModStart> ] ) ; enc624j600WriteReg ( interface, ENC624J600_MAADR1, ENC624J600_MAADR1_DEFAULT ) ; temp = htole16 ( interface -> macAddr. w [ 0 ] ) ; enc624j600WriteReg ( interface, ENC624J600_MAADR2, ENC624J600_MAADR2_DEFAULT ) ; temp = htole16 ( interface -> macAddr. w [ 1 ] ) ; enc624j600WriteReg ( interface",0
552,<S2SV_ModStart> * start ; if ( psf -> header == NULL ) return ; <S2SV_ModStart> header ) ; if ( maxlen > sizeof ( psf -> header ) ) return ; <S2SV_ModStart> ; start = psf -> header + <S2SV_ModEnd> maxlen ; maxlen <S2SV_ModStart> ; maxlen = <S2SV_ModEnd> sizeof ( psf <S2SV_ModStart> psf -> header <S2SV_ModEnd> - maxlen ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> return ; },0
553,<S2SV_ModStart> -> alg_priv ) { <S2SV_ModStart> alg_priv ) ; ctx -> priv -> alg_priv = NULL ; },0
554,"<S2SV_ModStart> { sf -> <S2SV_ModEnd> recode_loop = ( <S2SV_ModStart> 1 ) { if ( cpi -> frame_type == VP9_FRAME_TYPE_P010 ) { sf -> use_square_partition_only =! frame_is_intra_only ( cm ) ; sf -> less_rectangular_check = 1 ; } else { <S2SV_ModStart> cm ) ; } <S2SV_ModEnd> if ( MIN <S2SV_ModStart> ; sf -> <S2SV_ModEnd> auto_mv_step_size = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> intra_uv_mode_mask [ TX_16X16 <S2SV_ModStart> TX_16X16 ] = INTRA_DC_H_V <S2SV_ModEnd> ; } if <S2SV_ModStart> 2 ) { if ( cpi -> frame_type == VP9_FRAME_TYPE_P010 ) { sf -> tx_size_search_method = vp9_frame_is_boosted ( cpi )? USE_FULL_RD : USE_LARGESTALL ; if ( MIN ( cm -> width, cm -> height ) >= 720 ) sf -> disable_split_mask = cm -> show_frame? DISABLE_ALL_SPLIT : DISABLE_ALL_INTER_SPLIT ; else sf -> disable_split_mask = DISABLE",0
555,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ]. poll_count ),0
556,"<S2SV_ModStart> int goodsize = ( <S2SV_ModStart> 2 * EXTRA_STACK ) <S2SV_ModStart> ; if ( goodsize < L -> stacksize ) { if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else condmovestack ( L, { }, { } ) ; } else { if ( goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else condmovestack ( L, { }, { } ) ; } <S2SV_ModEnd> luaE_shrinkCI ( L",0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,"<S2SV_ModStart> n ) ; if (! str ) { return NULL ; } <S2SV_ModStart> errstr ) { <S2SV_ModEnd> char buf [ <S2SV_ModStart> 128 ] ; if (! _PyUnicode_AsString ( errstr ) ) { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } Py_DECREF ( type ) ; Py_DECREF ( value ) ; Py_XDECREF ( tback ) ; } # endif return NULL ; } PyArena_AddPyObject ( c -> c_arena, str ) ; return Str ( str, kind, LINENO ( n ), n -> n_col_offset, c -> c_arena ) ; } case INTEGER : { PyObject * pynum = parsinteger ( c, STR ( ch ) ) ; if (! pynum ) { return NULL ; } <S2SV_ModStart> n ) ; <S2SV_ModEnd> return Expr ( <S2SV_ModStart> n ) ; <S2SV_ModEnd> case STRING :",0
559,<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> break ; } svc_ctx -> spatial_layers = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> scale_factors = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> quantizers = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> quantizers = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> quantizers = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> quantizers = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> quantizers = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> quantizers = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> quantizers = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> quantizers = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> quantizers = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> quantizers = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> quantizers = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> quantizers = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> quantizers = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> quantizers = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> quantizers = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> quantizers = 0 ;,0
560,<S2SV_ModStart> ) ; } <S2SV_ModEnd> mb_index = 0,0
561,"<S2SV_ModStart> self ) { <S2SV_ModEnd> PyObject * new_memo <S2SV_ModStart> return NULL ; return _PyDict_Copy ( new_memo, <S2SV_ModEnd> self -> unpickler <S2SV_ModStart> -> memo_size, 0 ) <S2SV_ModEnd> ; } <S2SV_null>",0
562,,1
563,<S2SV_ModStart> ) ) { if ( mysql_errno ( imp_dbh -> pmysql )!= 0 ),0
564,<S2SV_ModStart> ) || ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) ) <S2SV_ModStart> ( need_close || TEMP_FAILURE_RETRY ( <S2SV_ModStart> & size ) ),0
565,<S2SV_ModStart> struct ieee_802_11_phdr phdr ; gboolean errorextension = FALSE <S2SV_ModStart> ; if ( errorextension &&,0
566,<S2SV_ModStart> ; sh = s_calloc <S2SV_ModEnd> ( hdrlen +,0
567,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> BYTE a_val ; BOOL got_first_row = FALSE ; <S2SV_ModStart> -> ColorLossLevel ; got_first_row = TRUE ; <S2SV_ModStart> ; } } return got_first_row ;,0
568,<S2SV_ModStart> > nr_parens ) { ret = - EINVAL ; goto out_free ; } <S2SV_ModEnd> * ( ++,1
569,"<S2SV_ModStart> cpi ) { <S2SV_ModEnd> int target ; <S2SV_ModStart> target = ( <S2SV_ModEnd> cpi -> oxcf <S2SV_ModStart> starting_buffer_level / 2 <S2SV_ModEnd> > INT_MAX ) <S2SV_ModStart> > INT_MAX )? INT_MAX : <S2SV_ModEnd> ( int ) <S2SV_ModStart> cpi -> oxcf -> starting_buffer_level <S2SV_ModEnd> ; } else <S2SV_ModStart> = 32 ; const int <S2SV_ModEnd> kf_boost = MAX <S2SV_ModStart> ; if ( cpi -> oxcf -> <S2SV_ModEnd> frames_since_key < cpi <S2SV_ModStart> frames_since_key < cpi -> oxcf -> <S2SV_ModEnd> 2 ) { <S2SV_ModStart> * rc -> frames_since_key <S2SV_ModEnd> / ( cpi <S2SV_ModStart> / ( cpi -> oxcf -> <S2SV_ModEnd> 2 ) ) <S2SV_ModStart> ) ; } target = ( ( cpi -> oxcf -> av_per_frame_bandwidth * cpi -> oxcf -> frames_since_key ) >> 4 ; } return vp9_rc_clamp_iframe_target_size ( cpi, target ) <S2SV_ModEnd> ; } <S2SV_null>",0
570,"<S2SV_ModStart> TX_MODE read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> == ALLOW_32X32 ) return ALLOW_32X32 <S2SV_ModEnd> ; return tx_mode",0
571,"<S2SV_ModStart> : # line 1046 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> } # line 1046 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 1051 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1057 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1066 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1066 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 1066 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 1081 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1081 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1080 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1081 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 1066 <S2SV_ModEnd> ""re_grammar.c"" break ;",0
572,"<S2SV_ModStart> -> cpi ; MACROBLOCK * const mb = & cpi -> mb. plane [ plane ] ; <S2SV_ModStart> args -> xd <S2SV_ModEnd> ; uint8_t token_cache <S2SV_ModStart> & cpi -> <S2SV_ModEnd> plane [ plane <S2SV_ModStart> plane_type ; const TX_SIZE tx_size = pd -> tx_size ; const <S2SV_ModStart> = cpi -> fc. coef_probs <S2SV_ModEnd> [ tx_size ] <S2SV_ModStart> = cpi -> counts <S2SV_ModEnd>. coef_probs [ <S2SV_ModStart> = cpi -> counts <S2SV_ModEnd>. eob_branch [ <S2SV_ModStart> get_tx_eob ( & mb -> <S2SV_ModEnd> seg, segment_id <S2SV_ModStart>, seg_id, mb -> <S2SV_ModEnd> fc. aoff <S2SV_ModStart>, seg_id, mb -> <S2SV_ModEnd> fc. aoff <S2SV_ModStart>, seg_id, mb -> <S2SV_ModEnd> fc. b",0
573,<S2SV_ModStart> pSelect -> pSrc ; assert ( pWalker -> pParse -> db -> mallocFailed ),0
574,"<S2SV_ModStart> users ) ; if ( sv_ops -> version == 0 ) { printk ( KERN_ERR ""nfs_callback_create_svc: <S2SV_blank> no <S2SV_blank> version <S2SV_blank> support\\n"" ) ; return ERR_PTR ( - EINVAL ) ; }",0
575,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
576,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
577,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
578,"<S2SV_ModStart> s ) { if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) ) ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> retrying"", sock_fd, errno ) ; break ; } <S2SV_ModEnd> ret = send",0
579,"<S2SV_ModStart> = NULL ; int i = 0 ; <S2SV_ModStart> next ) { if ( strcmp ( ( const char * ) xIter -> name, XML_ATTR_ID ) == 0 ) { continue ; } else <S2SV_ModStart> ; if ( i == 0 || <S2SV_ModStart> } else { int i = 0 ; <S2SV_ModStart> * path = xml_get_path_by_name ( xml, & path ) ; if ( path == NULL ) { crm_trace ( ""Cannot <S2SV_blank> add <S2SV_blank> new <S2SV_blank> node <S2SV_blank> %s"", crm_element_name ( xml ), path ) ; return ; } else { crm_trace ( ""Cannot <S2SV_blank> add <S2SV_blank> new <S2SV_blank> node <S2SV_blank> %s <S2SV_blank> at <S2SV_blank> %s"", crm_element_name ( xml ), path ) ; if ( xml!= xmlDocGetRootElement ( xml -> doc ) ) { xmlUnlinkNode ( xml ) ; xmlFreeNode ( xml ) ; } free ( path ) ; return ; } } i ++ ; } } while ( cIter!= NULL ) { xmlNode * child = cIter ; cIter = __xml_next ( cIter ) ; __xml_acl_post_process ( child ) ; }",0
580,<S2SV_ModStart> <S2SV_null> static const SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> return ( const SvcInternal_t <S2SV_ModEnd> * ) svc_ctx,1
581,"<S2SV_ModStart> ) ) { zval * tmp_val ; <S2SV_ModStart> ) ) { tmp_val = * * current_param ; <S2SV_ModStart> ) ) { zval * tmp_val ; <S2SV_ModStart> ) ) { tmp_val = * * current_param ; <S2SV_ModStart> ) ) { zval * tmp_val ; <S2SV_ModStart> ) ) { zval * tmp_val ; <S2SV_ModStart> ) ) { zval * tmp_val ; <S2SV_ModStart> ) ) { zval * tmp_val ; <S2SV_ModStart> ) ) { tmp_val = * * current_param ; <S2SV_ModStart> ) ) { zval_copy_ctor_args ( & tmp_val, & tmp_val ) ; <S2SV_ModStart> ) ) { zval_copy_ctor_args ( & tmp_val, & tmp_val ) ; <S2SV_ModStart> ) ) { zval * tmp_val ; <S2SV_ModStart> ) ) { zval * tmp_val ; <S2SV_ModStart> ) ) { zval * tmp_val ; <S2SV_ModStart> ) ) { zval * tmp_val ; <S2SV_ModStart> ) ) { zval = * * current_param ; <S2SV_ModStart> ) ) { zval_copy_ctor_args ( & tmp_val, & tmp_val ) ; <S2SV_ModStart> ) ) { zval_copy_ctor_args ( & tmp_val",0
582,"<S2SV_ModStart> only_420 ) { int i ; <S2SV_ModStart> char buffer [ 79 <S2SV_ModEnd> ] ; int <S2SV_ModStart> -> vpx_bps = 24 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_bps = 8 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_bps = 8 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_bps = 8 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_bps = 8 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_bps = 8 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_bps = 8 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt = ""I420"" <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_bps = 8 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt = ""I420"" <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chrom",0
583,"<S2SV_ModStart> buf ; { wizkit_addinv ( <S2SV_ModEnd> readobjnam ( buf <S2SV_ModStart> * ) 0, & zeroobj ) ; <S2SV_ModEnd> return TRUE ;",0
584,<S2SV_ModStart> ( ) { int64_t directory_table_end ; int64_t <S2SV_ModEnd> table_start ; if <S2SV_ModStart> == 0 ) goto error <S2SV_ModEnd> ; if ( <S2SV_ModStart> == FALSE ) goto error <S2SV_ModEnd> ; if ( <S2SV_ModStart> == FALSE ) goto error <S2SV_ModEnd> ; if ( <S2SV_ModStart> == FALSE ) goto error <S2SV_ModEnd> ; if ( <S2SV_ModStart> == FALSE ) goto error <S2SV_ModEnd> ; if ( <S2SV_ModStart> == FALSE ) goto error <S2SV_ModEnd> ; if ( <S2SV_ModStart> == FALSE ) goto error <S2SV_ModEnd> ; if ( <S2SV_ModStart> == FALSE ) goto error <S2SV_ModEnd> ; if ( <S2SV_ModStart> return TRUE ; error : return FALSE ;,0
585,"<S2SV_ModStart> rule * rule, u_int flags <S2SV_ModStart> count = 0 ; env -> flags = flags <S2SV_ModStart> ; } } if ( flags & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ]!= NULL ; i ++ ) { struct envnode * node ; const char * e, * eq ; size_t len ; char keybuf [ 1024 ] ; e = strchr ( e, '=' ) ; if ( ( eq = strchr ( e, '=' ) ) == NULL || eq == e ) continue ; memcpy ( keybuf, e, len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf, eq + 1 ) ; if ( RB_INSERT ( envtree, & env -> root, node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } }",0
586,"<S2SV_ModStart> -> seg ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> cm -> mi_cols <S2SV_ModEnd> ) ; vp9_enable_segmentation <S2SV_ModStart> base_qindex, in_frame_q_adj_ratio [ segment ], cpi -> in_frame_q_adj_ratio <S2SV_ModStart> ; } } memset ( cpi -> segmentation_map, 0, cm -> mi_rows * cm -> mi_cols ) ; memset ( cpi -> complexity_map, 0, cm -> mi_rows * cm -> mi_cols ) ;",0
587,"<S2SV_ModStart> = make_type ( ""module"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""interactive"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart>, mod_type, Interactive_fields, 1 ) ; if (! Interactive_type ) return 0 ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; Suite_type = make_type ( ""suite"", mod_type, Suite_fields, 1 ) ; if (! Suite_type ) return 0 ; stmt_type = make_type ( ""stmt"", & AST_type, NULL, 0 ) ; if (! stmt_type ) return 0 ; if (! add_attributes ( stmt_type, stmt_attributes, 4 ) ) return 0 ; FunctionDef_type = make_type ( ""FunctionDef"", stmt_type, FunctionDef_fields, 5 ) ; if (! FunctionDef_type ) return 0 ; AsyncFunctionDef_type = make_type ( ""AsyncFunctionDef"", stmt_type, AsyncFunctionDef_fields, 5 ) ; if (! AsyncFunctionDef_type ) return 0",0
588,"<S2SV_ModStart> ) ; } if (! access ( log_path, F_OK ) ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> access <S2SV_blank> log <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, log_path, strerror ( errno ) ) ; is_logging = false ; return ; }",0
589,<S2SV_ModStart> ) ; } if ( cpi -> common. frame_type == KEY_FRAME ) { ++ ( is_key? uv_modes : inter_uv_modes ) [ uvm ] ; },0
590,"<S2SV_ModStart> num1, num2, j <S2SV_ModStart>, * StartClean <S2SV_ModEnd> ; SetDefaults ( <S2SV_ModStart> t ++ ; outstr ( <S2SV_ModEnd> ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"", s <S2SV_ModStart>, t, TERMCHAR ) ; outlen = strlen ( outputbuffer <S2SV_ModEnd> ) ; if <S2SV_ModStart> = 1 ; outstr ( <S2SV_ModEnd> ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", VERSION <S2SV_ModStart> SUBVERSION ) ; outlen = strlen ( outputbuffer ) ; <S2SV_ModStart> ( outfile, ""%s%s"", outputbuffer, outlen <S2SV_ModEnd> ) ; return <S2SV_ModStart> ) ) { <S2SV_ModEnd> ReadArray ( t <S2SV_ModStart>, & num2, outlen ) ; if ( num1 == 0 || num2 == 0 ) { fprintf ( stderr, ""%s: <S2SV_blank> Command <S2SV_blank> %s <S2SV_blank> should <S2SV_blank> have <S2SV_blank> no <S2SV_blank> arguments\\n"", axohelp, nameobject ) ; return ( - 1 ) ; } if ( num2 - 1!= 0 ) { fprintf ( stderr, ""%s: <S2SV_blank> Command <S2SV_blank> %s <S2SV_blank> should <S2SV_blank> have <S2SV_blank> no <S2SV_blank> arguments\\n"", axohelp, nameobject ) ; return ( - 1 ) ;",0
591,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lower, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { int res ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { lower = NULL ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_upper, & tmp ) < 0 ) { int res ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { upper = NULL ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_step, & tmp ) < 0 ) { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { step = NULL ; } * out = Slice ( lower, upper, step, <S2SV_ModEnd> tmp, arena <S2SV_ModStart> ) ; } <S2SV_ModEnd> return 0 ;",0
592,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs ) <S2SV_ModStart> probs ) { vpx_write_token <S2SV_ModEnd> ( w,",0
593,"<S2SV_ModStart> int err ; u32 classid ; <S2SV_ModStart> ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; classid = iter -> band ; <S2SV_ModStart> - ENOMEM ; err = nfp_abm_u32_knode_create ( match, knode -> res -> classid, proto, extack ) ; if ( err ) goto err_delete ; <S2SV_ModStart> match -> list, & alink -> dscp_map ) ; } match -> handle = knode -> handle ; match -> band = knode -> res -> classid ; match -> mask = mask ; match -> val = val ; err = nfp_abm_update_band_map ( alink ) ; if ( err ) goto err_delete ; return 0 ; err_delete : nfp_abm_u32_knode_delete ( alink, knode ) ; return err <S2SV_ModEnd> ; } <S2SV_null>",0
594,<S2SV_ModStart> ) ; } if ( global -> passes == 2 ) <S2SV_ModStart>. cfg. rc_twopass_stats_in = global -> pass_stats_in ; else <S2SV_ModEnd> stream -> config <S2SV_ModStart> stats ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
595,"<S2SV_ModStart> ; if ( flatpak_check_export_version ( version, previous_ids, cancellable, error ) ) goto out ; if (",0
596,"<S2SV_ModStart> data_end ) { const <S2SV_ModStart> pbi -> common ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = 1 << cm -> log2_tile_cols ; const int tile_rows = 1 << cm -> log2_tile_rows ; TileBuffer tile_buffers [ 4 ] [ 1 << 6 ] <S2SV_ModStart> end = NULL <S2SV_ModEnd> ; assert ( <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> aligned_cols ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) * aligned_cols ) ; memset ( cm -> above_seg_context, 0, sizeof ( * cm -> above_seg_context ) * aligned_cols <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> aligned_cols ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> aligned_cols ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) * aligned_cols ; memset ( cm -> above_seg_context, 0, sizeof ( * cm -> above_seg_context ) * aligned_cols ) ; for ( tile_row = 0 ; tile_row <",0
597,"<S2SV_ModStart> vp9_decoder_create ( const VP9_COMMON * cm, const <S2SV_ModStart> pbi ) ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> = 1 ; vpx_memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_video_frame = 0 ; vpx_memset ( & cm -> oxcf, - 1, sizeof ( cm -> oxcf ) ) ; cm -> oxcf = * oxcf ; pbi -> oxcf = * oxcf ; pbi -> ready_for_new_data = 1 ; pbi -> decoded_key_frame = 0 ; vpx_init_dequantizer ( cm ) ; vp9_loop_filter_init ( cm ) ; cm -> error. setjmp = 0 ; vp9_worker_init ( & pbi -> lf_worker ) ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> pbi -> oxcf <S2SV_ModStart> = 0 ; <S2SV_ModEnd> return pbi ;",0
598,"<S2SV_ModStart> GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf <S2SV_blank> [%s]\\n"", GF_ISOM_BOX_TYPE_STR <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF_RAW <S2SV_ModEnd> ) ; }",0
599,<S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> ; if (! opt_unhashed ( opt ) <S2SV_ModEnd> || opt ->,0
600,"<S2SV_ModStart> tokens, const vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> { const vpx_tree_index <S2SV_ModEnd> j = tree",0
601,"<S2SV_ModStart> ( img ) { <S2SV_ModStart> ctx, img ) ; } else { res = validate_image ( ctx, NULL ) ; } <S2SV_ModEnd> pick_quickcompress_mode ( ctx",0
602,"<S2SV_ModStart>, & len, 0",1
603,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( in, u, v ) ; memcpy ( s, in, 16 ) ; memcpy ( s + 16, v, 16 <S2SV_ModEnd> ) ; }",0
604,"<S2SV_ModStart> rc, const VP9EncoderConfig <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> ( int64_t ) oxcf -> avg_frame_bandwidth <S2SV_ModEnd> * ( int64_t",0
605,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
606,"<S2SV_ModStart> * cpi, MACROBLOCK * const x, MACROBLOCKD * const xd, <S2SV_ModStart> bsize ) { <S2SV_ModEnd> MACROBLOCK * const <S2SV_ModStart> -> common ; <S2SV_ModEnd> int mis = <S2SV_ModStart> bsize ] ; <S2SV_ModEnd> x -> skip_recode <S2SV_ModStart> -> skip_recode = <S2SV_ModEnd> x -> select_txfm_size <S2SV_ModStart> -> select_txfm_size && x -> mb. <S2SV_ModEnd> sb_type >= BLOCK_8X8 <S2SV_ModStart> -> skip_optimize = xd <S2SV_ModEnd> -> is_coded ; <S2SV_ModStart> -> skip_encode = (! output_enabled && x -> select_txfm_size && x -> sb_type >= BLOCK_8X8 && cpi -> oxcf. aq_mode!= COMPLEXITY_AQ && cpi -> sf. allow_skip_recode ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( xd -> <S2SV_ModEnd> frame_type == KEY_FRAME <S2SV_ModStart> KEY_FRAME ) { set_ref_ptrs_key <S2SV_ModEnd> ( cm, <S2SV_ModStart> } else { set_ref_ptrs_bmp ( cm, xd, x -> mb. <S2SV_ModEnd> ref_frame [ 0 <S2SV_ModStart> 0 ], x -> mb. <S2SV_ModEnd> ref_frame [ 1 <S2SV_ModStart> 1 ], x -> mb. <S2SV_ModEnd>",0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. size <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
608,"<S2SV_ModStart> range_max ) { int64_t <S2SV_ModEnd> value ; int <S2SV_ModStart> position, zeroes <S2SV_ModEnd> ; char bits <S2SV_ModStart> gbc ) ; if ( ctx -> trace_enable ) { bits [ 65 ] = 0 ; ff_cbs_trace_syntax_element ( ctx, position, name, NULL, bits, value ) ; } else { <S2SV_ModStart> = 0 ; <S2SV_ModEnd> value = get_bits_long <S2SV_ModStart> j ++ ) { if ( ctx -> trace_enable ) { bits [ i ++ ] = '0' ; ff_cbs_trace_syntax_element ( ctx, position, name, NULL, bits, value ) ; } } else { bits [ i ++ ] = '1' ; value += ( 1 << zeroes ) - 1 ; } } if ( ctx -> trace_enable ) { bits [ i ] = 0 ; ff_cbs_trace_syntax_element ( ctx, position, name, NULL, bits, value ) ; } if ( value < range_min || value > range_max ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""%s <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range: <S2SV_blank> "" ""%"" PRIu32 "", <S2SV_blank> but <S2SV_blank> must <S2SV_blank> be <S2SV_blank> in",0
609,"<S2SV_ModStart> || strchr ( ""!#$%&\'*+-.^_`|~\\\\"" <S2SV_ModEnd>, c ) <S2SV_ModStart> || strchr ( ""!#$%&\'*+-.^_`|~\\\\"" <S2SV_ModEnd>, c )",0
610,"<S2SV_ModStart>, packet -> http_max_headers. ptr = NULL, packet -> http_max_headers. len = 0, packet ->",0
611,"<S2SV_ModStart> { q = QueuePixelPacket <S2SV_ModEnd> ( image, <S2SV_ModStart> x ), Max <S2SV_ModEnd> ( 4, <S2SV_ModStart> y ), <S2SV_ModEnd> exception ) ;",0
612,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL ) <S2SV_ModStart> EINTR ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL )",0
613,"<S2SV_ModStart> action ) { double x, y ; <S2SV_ModStart> action ) ; x = w * BzK ; y = h * BzK ; x = w * BzK ; y = h * BzK ; x = w * BzK ; y = h * BzK ; x = w * BzK ; y = h * BzK ; x = w * BzK ; y = h * BzK ; x = w * BzK ; y = h * BzK ; x = w * BzK ; y = h * BzK ; x = w * BzK ; y = h * BzK ; y = h * BzK ; x = w * BzK ; y = h * BzK ; y = h * BzK ; x = w * BzK ; y = h * BzK ; y = h * BzK ; x = w * BzK ; y = h * BzK ; y = h * BzK ; x = w * BzK ; y = h * BzK ; x = w * BzK ; y = h * BzK ; x",0
614,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; SetMatrix_Internal ( outputbuffer, x11, x12, x21, x22, x, y ) ;",0
615,"<S2SV_ModStart> ( AUTODETECT_TAG, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU <S2SV_blank> (Time <S2SV_blank> Delta: <S2SV_blank> %u, <S2SV_blank> Byte <S2SV_blank> Count: <S2SV_blank> %u)"", rdp -> autodetect -> bandwidthMeasureTimeDelta, rdp -> autodetect -> bandwidthMeasureByteCount <S2SV_ModEnd> ) ; Stream_Read_UINT32",0
616,<S2SV_ModStart> -> cur_tile_start_y + ( <S2SV_ModStart> cm -> mb_cols - 1 ) <S2SV_ModStart> -> cur_tile_start_uv + ( <S2SV_ModStart> cm -> mb_cols - 1 ),0
617,<S2SV_ModStart> -> b_multithreaded_rd ) { <S2SV_ModStart> mb_rows ) ; },0
618,<S2SV_ModStart> { if ( ( <S2SV_ModStart> xWantedSize > 0 ) && ( xWantedSize + xHeapStructSize > xFreeBytesRemaining ) <S2SV_ModStart> 0x00 ) { if ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) > xFreeBytesRemaining ) { mtCOVERAGE_TEST_MARKER ( ) ; } <S2SV_ModStart> portBYTE_ALIGNMENT_MASK ) ) ; } else { mtCOVERAGE_TEST_MARKER ( ) ; } } else { mtCOVERAGE_TEST_MARKER ( ) ; } if ( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) ) { pxPreviousBlock = & xStart ; pxBlock = xStart. pxNextFreeBlock ; while ( ( ( uint8_t * ) pxBlock -> xBlockSize < xWantedSize ) && ( pxBlock -> pxNextFreeBlock!= NULL ) ) { pxPreviousBlock = pxBlock -> pxNextFreeBlock ; pxBlock = pxBlock -> pxNextFreeBlock ; } if ( pxBlock!= pxEnd ) { pvReturn = ( void * ) ( ( ( uint,0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,"<S2SV_ModStart> s ) { <S2SV_ModEnd> uint16 left, <S2SV_ModStart> int i ; <S2SV_ModEnd> for ( i <S2SV_ModStart> ++ ) { in_uint8s ( s, 2 ) ; in_uint16_le ( s, size ) ; in_uint8p ( s, data, size ) ; bmpdata = ( uint8 * ) xmalloc ( size ) ; for ( y = 0 ; y < size ; y ++ ) { in_uint8a ( s, & bmpdata [ ( height - y - 1 ) * ( width * Bpp ) ], width * Bpp ) ; } ui_paint_bitmap ( left, top, cx, cy, width, height, bmpdata ) ; xfree ( bmpdata ) ; continue ; } if ( compress & 0x400 ) { size = bufsize ; } else { size = bufsize ; } if ( compress & 0x400 ) { size = size ; } else { size = size ; } if ( size > bufsize ) { size = bufsize ; } else { size = size ; } <S2SV_ModEnd> bmpdata = ( <S2SV_ModStart> ) xmalloc ( size ) ; for ( y = 0 ; y < height ; y ++ ) { in_uint",0
621,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
622,"<S2SV_ModStart> tx_size, vp9_coeff_stats coef_stats <S2SV_ModEnd> ) { vp9_coeff_probs_model <S2SV_ModStart> tx_size ] ; vpx_coeff_count <S2SV_ModEnd> * coef_counts = <S2SV_ModStart> { vp9_tree_probs_from_distribution ( vpx_coef_tree <S2SV_ModEnd>, coef_branch_ct [",0
623,"<S2SV_ModStart> { } ; if (! access_ok ( VERIFY_WRITE, fd, ( struct iovec * ) & fd ) ) return - EBADF <S2SV_ModEnd> ; r =",0
624,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static void <S2SV_ModEnd> su3000_frontend_attach ( struct <S2SV_ModStart> dvb_usb_adapter * d, struct dvb_frontend_soc * fe <S2SV_ModStart> 0 } ; struct dvb_device * dev = & d -> dev ; <S2SV_ModStart> ( dvb_usb_generic_rw ( <S2SV_ModEnd> dev, obuf <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; ibuf [ 0 ] = 0xe ; ibuf [ 1 ] = 0x80 ; ibuf [ 2 ] = 1 ; if ( dvb_usb_generic_rw ( <S2SV_ModEnd> dev, obuf <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; ibuf [ 0 ] = 0xe ; ibuf [ 1 ] = 0x80 ; ibuf [ 2 ] = 1 ; if ( dvb_usb_generic_rw ( <S2SV_ModEnd> dev, obuf <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; ibuf [ 0 ] = 0xe ; ibuf [ 1 ] = 0x83 ; ibuf [ 2 ] = 0 ; if ( dvb_usb_generic_rw ( <S2SV_ModEnd> dev, obuf",0
625,"<S2SV_ModStart> * iface, vpx_codec_enc_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags <S2SV_ModStart> -> priv ) { <S2SV_ModStart> iface ; } }",0
626,"<S2SV_ModStart> stride, int mv_row, int mv_col, uint8_t * pred, struct scale_factors * scale, int x, int y ) { const int which_mv = 0 ; const MV mv = { mv_row, mv_col } ; const InterpKernel * const kernel = <S2SV_ModEnd> xd -> mi <S2SV_ModStart> ] -> interp_filter <S2SV_ModEnd> ; enum mv_precision <S2SV_ModStart> mv_precision_uv ; int uv_stride ; vp9_build_inter_predictor ( y_mb_ptr, stride, & pred [ 0 ], 16, & mv, scale, 16, 16, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vp9_build_inter_predictor ( u_mb_ptr, uv_stride, & pred [ 256 ], uv_block_size, & mv, scale, uv_block_size, which_mv, kernel, mv_precision_uv, x, y ) ; vp9_build_inter_predictor ( v_mb_ptr, uv_stride, & pred [ 512 ], uv_block_size, & mv, scale, uv_block_size, uv_block_size",0
627,"<S2SV_ModStart> = TRUE ; if ( strlen ( origbuf ) >= 4 ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; }",0
628,"<S2SV_ModStart> * numbers, size_t <S2SV_ModEnd> count ) { <S2SV_ModStart> count ) { size_t <S2SV_ModEnd> i ; cJSON <S2SV_ModStart> ( ) ; if (! numbers ) return a ; <S2SV_ModStart> i ) { if ( numbers [ i ] == 0 ) return a ;",0
629,"<S2SV_ModStart> data_end ) { const <S2SV_ModStart> pbi -> common <S2SV_ModEnd> ; const int <S2SV_ModStart> tile_cols ) ; const <S2SV_ModStart> tile_buffers [ 1 << 6 ] ; const int num_workers = MIN ( num_workers, tile_cols ) ; TileBuffer tile_buffers_end [ 1 << 6 ] ; int n ; int final_worker = - 1 ; assert ( tile_cols <= ( 1 << 6 ) ) ; assert ( tile_rows == 1 ) ; ( void ) tile_rows ; if ( pbi -> num_tile_workers == 0 ) { const int num_threads = pbi -> oxcf. max_threads & ~ 1 ; int i ; CHECK_MEM_ERROR ( cm, pbi -> tile_workers, vpx_malloc ( num_threads * sizeof ( * pbi -> tile_workers ) ) ) ; for ( i = 0 ; i < num_threads ; ++ i ) { VP9Worker * const worker = & pbi -> tile_workers [ i ] ; ++ pbi -> num_tile_workers ; vp9_worker_init ( worker ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32,",0
630,<S2SV_ModStart> * 0x101 ; if ( len < 4 ) return ; <S2SV_ModStart> ( ) + len <S2SV_ModEnd> ; while ( <S2SV_ModStart> ( ) ; if ( len < 4 ) return ;,0
631,"<S2SV_ModStart> -> common ; VP9_COMMON_EXT * const ext = & cpi -> common. ext ; <S2SV_ModStart> cm -> seg ; struct segment_info * seg_info = & seg_info -> seg <S2SV_ModStart> = SEGMENT_DELTADATA ; seg_info -> seg_flags &= ~ SEGMENT_FLAG_HIGHBITDEPTH ; seg_info -> seg_flags |= SEGMENT_FLAG_HIGHBITDEPTH ; <S2SV_ModStart> ++ ) { <S2SV_ModEnd> if ( Q_RATIO <S2SV_ModStart> continue ; } seg_info -> seg_flags |= SEGMENT_FLAG_HIGHBITDEPTH ; <S2SV_ModStart> ) ) ; seg_info -> seg_data [ SEGMENT_ID ( i ) ] = qindex_delta ; seg_info -> segfeature [ SEGMENT_ID ( i ) ] = SEG_LVL_ALT_Q ; seg_info -> rdmult [ SEGMENT_ID ( i ) ] = ( double ) segment_rdmult / base_rdmult ; } } for ( i = ENERGY_MIN ; i <= ENERGY_MAX ; i ++ ) { int qindex_delta, segment_rdmult ; <S2SV_ModStart> ( seg, seg_info -> seg_id <S2SV_ModEnd>, SEG_LV",0
632,<S2SV_ModStart> -> error_code ) { <S2SV_ModStart> : NULL ; ctx -> base. err_detail_max = ctx -> base. err_detail_max ; },0
633,"<S2SV_ModStart>, * ps_cur_poc ; if (! ps_dec -> ps_dpb_mgr ) return",0
634,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet ),0
635,<S2SV_ModStart> <S2SV_null> <S2SV_null> static long <S2SV_ModEnd> getnum ( const <S2SV_ModStart> int getnum ( <S2SV_ModEnd> char * * <S2SV_ModStart> df ) { long a ; <S2SV_ModStart> = 0 ; if (! isdigit ( * * fmt ) ) return 0 ;,0
636,<S2SV_ModStart> GCSpropagate ) ; g -> gcstate = GCSpropagate ;,0
637,<S2SV_ModStart> 0 ; else { kfree ( buf ) ; <S2SV_ModStart> - EIO ; },0
638,"<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } <S2SV_ModEnd> memset ( buffer <S2SV_ModStart> buffer ) ; <S2SV_ModEnd> s_write ( c",0
639,"<S2SV_ModStart> * cib, remote_connection_t <S2SV_ModEnd> * connection ) <S2SV_ModStart> -> variant_opaque ; <S2SV_ModEnd> int rc = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> int ret_ga ; <S2SV_ModStart> = NULL ; connection -> socket = 0 ; connection -> session = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } bzero ( & hints, sizeof ( struct addrinfo ) ) ; hints. ai_flags = AI_CANONNAME ; hints. ai_family = AF_INET ; hints. ai_socktype = SOCK_RAW ; if ( hints. ai_family == AF_INET6 ) { hints. ai_protocol = IPPROTO_ICMPV6 ; } else { hints. ai_protocol = IPPROTO_ICMP ; } crm_debug ( ""Looking <S2SV_blank> up <S2SV_blank> %s"", server ) ; ret_ga = getaddrinfo ( server, NULL, & hints, & res ) ; if ( ret_ga ) { crm_err ( ""getaddrinfo: <S2SV_blank> %s"",",0
640,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> ; cpi -> <S2SV_ModEnd> non_gf_bitrate_adjustment = 0",0
641,<S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( bp + 26 ) ;,0
642,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command",0
643,"<S2SV_ModStart> Image * image <S2SV_ModEnd> ; register IndexPacket <S2SV_ModStart> length, padding <S2SV_ModEnd>, version, <S2SV_ModStart> version, width ; MagickBooleanType status ; register char * name ; size_t name_len <S2SV_ModStart> ) break ; name_len = strlen ( buffer ) ; if ( name_len > MaxTextExtent ) { image = DestroyImageList ( image ) ; return ( ( Image * ) NULL ) ; } <S2SV_ModStart> ) break ; if ( ( strlen ( name ) > MaxTextExtent ) || ( strlen ( name ) > MaxTextExtent ) ) { image = DestroyImageList ( image ) ; return ( ( Image * ) NULL ) ; }",0
644,"<S2SV_ModStart> ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> BITFIELD <S2SV_blank> marker\\n"" ) ;",0
645,<S2SV_ModStart> ; if (! chanmode_found ) { if ( <S2SV_ModStart> ) ; } },0
646,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> - m + vpx_read_bit <S2SV_ModEnd> ( r )",1
647,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
648,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> REFERENCE_MODE mode = vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> comp_inter_prob [ ctx <S2SV_ModStart> ( REFERENCE_MODE ) vpx_read <S2SV_ModEnd> ( r,",0
649,"<S2SV_ModStart>! stream ) { <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; } <S2SV_ModStart> ( res ) { <S2SV_ModStart> ) ) ; } <S2SV_ModStart> stereo_fmt = STEREO_FORMAT_MONO <S2SV_ModEnd> ; # if <S2SV_ModStart> # if CONFIG_WEBM_IO if ( stream -> config. write_webm ) { <S2SV_ModStart> - 1 ; }",0
650,"<S2SV_ModStart> nd_opt_len ) ; if ( domp == NULL ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> ( <S2SV_blank> NULL)\\n"" ) ) ; return ; }",0
651,<S2SV_ModStart> -> root_node = ( yr_re_node * ),0
652,"<S2SV_ModStart> ) ) ; if ( iter -> conn -> dict -> dict_mode == DICT_MODE_DICT ) { <S2SV_ModStart> 0 ) { auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> = <S2SV_blank> %s"", str_c ( path ), key -> key -> value ) ; } else if ( ret < 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> lookup <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", str_c ( path ), error ) ; return - 1 ; } } else { <S2SV_ModStart> error ) ; }",0
653,<S2SV_ModStart> ; tok -> type_comment = 0 ; tok ->,0
654,<S2SV_ModStart> maxBitrate ; } av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo = NULL ;,0
655,<S2SV_ModStart> ( dpbSize ) ; dpb -> picSize = picSizeInMbs ; dpb -> dpbSize = dpbSize,0
656,"<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> (! sock ||! addr <S2SV_ModStart> ; if ( addrlen_in ) { <S2SV_ModEnd> addrlen_in = * <S2SV_ModStart> * addrlen ; addrlen_out = * addrlen ; } <S2SV_ModStart>, addrlen_in, & addrlen_out <S2SV_ModEnd> )!= OE_OK <S2SV_ModStart> ) ; } if ( addrlen_out ) * addrlen = addrlen_out ;",0
657,,1
658,<S2SV_ModStart> FALSE ; } if (!,0
659,<S2SV_ModStart> ipv6_pinfo * np <S2SV_ModEnd> ; struct ipv6_txoptions <S2SV_ModStart> ; if ( msg -> msg_name ) { np = inet6_sk ( sk ) ; if ( <S2SV_ModStart> flowlabel ) ; },0
660,"<S2SV_ModStart>, err, <S2SV_ModEnd> overlays = 0 <S2SV_ModStart> hdr_size, j, opt_size <S2SV_ModStart> ; if ( ( opt_size = ( opt_size + 4 ) ) > sizeof ( struct pe_image_optional_hdr32 ) ) { cli_err ( ""cli_scanpe: <S2SV_blank> invalid <S2SV_blank> option <S2SV_blank> size\\n"" ) ; return CL_EINVAL ; } if ( <S2SV_ModStart> ; if ( ( opt_size = ( opt_size + 4 ) ) > sizeof ( struct pe_image_optional_hdr32 ) ) { cli_err ( ""cli_scanpe: <S2SV_blank> invalid <S2SV_blank> option <S2SV_blank> size\\n"" ) ; return CL_EINVAL ; } if ( <S2SV_ModStart> ; if ( ( opt_size = ( opt_size + 4 ) ) > sizeof ( struct pe_image_optional_hdr32 ) ) { cli_err ( ""cli_scanpe: <S2SV_blank> invalid <S2SV_blank> option <S2SV_blank> size\\n"" ) ; return CL_EINVAL ; } if (",0
661,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR <S2SV_ModEnd>, EPCR_EPOS | <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR <S2SV_ModEnd> ) & EPCR_ERRE <S2SV_ModStart> } dm9000WriteReg ( DM9000_EPCR <S2SV_ModEnd>, EPCR_EPOS ) <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPDRH <S2SV_ModEnd> ) << 8 <S2SV_ModStart> | dm9000ReadReg ( DM9000_EPDRL <S2SV_ModEnd> ) ; }",0
662,"<S2SV_ModStart> pcmk_ok ) { int rc2 ; <S2SV_ModStart> cib, & rc2 ) ; } if ( rc == pcmk_ok ) { int rc2 ; <S2SV_ModEnd> rc = cib_tls_signon <S2SV_ModStart> pcmk_ok ) { int rc2 ; <S2SV_ModStart> cib, & rc2 ) ; } if ( rc == pcmk_ok ) { int rc2 ; <S2SV_ModEnd> rc = cib_tls_signon <S2SV_ModStart> callback ) ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> callback. token, CRM_OP_REGISTER, NULL, NULL, NULL, 0, NULL ) ; crm_xml_add ( hello, F_CIB_CLIENTNAME, name ) ; crm_send_remote_msg ( private -> command. session, hello, private -> command. encrypted ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { fprintf ( stderr, ""%s: <S2SV_blank> Opened <S2SV_blank> connection <S2SV_blank> to <S2SV_blank> %s:%d\\n"", name, private -> server, private -> port ) ; cib -> state = cib_connected_command ; cib",0
663,<S2SV_ModStart> ; msg. msg_iter. type = READ ; msg. <S2SV_ModStart> ( address ) ; msg. msg_iter. nr = 1,0
664,"<S2SV_ModStart> num00, tmp_err = 0 <S2SV_ModStart> int new_mv_mode_penalty = 64 <S2SV_ModEnd> ; const int <S2SV_ModStart> bsize ] ; <S2SV_ModEnd> v_fn_ptr. vf <S2SV_ModStart> bsize ) ; int num00_sad, num00_mv, num00_mv_adj, num00_mv_adj ; <S2SV_ModStart>, & ref_mv_full, & tmp_mv, step_param, x -> sadperbit16, & num00_sad, & num00_mv_adj <S2SV_ModStart>, & v_fn_ptr <S2SV_ModEnd> ) ; if <S2SV_ModStart> = tmp_err ; if ( num00_sad < num00 ) { tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX - new_mv_mode_penalty ) tmp_err += new_mv_mode_penalty ; if ( tmp_err < * best_motion_err ) * best_motion_err = tmp_err ; best_mv -> row = tmp_mv. row ; best_mv -> col = tmp_mv.",0
665,<S2SV_ModStart> ; if ( <S2SV_ModEnd> hivex_write ( h,0
666,<S2SV_ModStart> ; merged -> <S2SV_ModEnd> is_dir_config = (,0
667,"<S2SV_ModStart> one, offset <S2SV_ModEnd> ; ssize_t count <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
668,"<S2SV_ModStart> ( r = sshbuf_put_string ( b, comp -> name, comp -> name_len <S2SV_ModEnd> ) )!=",0
669,<S2SV_ModStart> ) ) { ovalue = sclone ( <S2SV_ModEnd> stok ( option <S2SV_ModStart> & ovalue ) ),0
670,<S2SV_ModStart> client = user_data ; gboolean shutdown_flag = FALSE <S2SV_ModStart> num_clients ) ; if ( client -> shutdown_flag ) { shutdown_flag = TRUE ; } <S2SV_ModStart> user ) ; if ( client -> shutdown_flag ) { shutdown_flag = FALSE ; },0
671,<S2SV_ModStart> * uv ; if ( thread -> twups!= NULL ) { <S2SV_ModStart> next ) { <S2SV_ModEnd> if (! <S2SV_ModStart> ; } } } },0
