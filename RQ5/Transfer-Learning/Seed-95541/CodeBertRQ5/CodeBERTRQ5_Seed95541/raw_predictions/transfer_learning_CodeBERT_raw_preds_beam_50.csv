,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
1,<S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;,0
2,<S2SV_ModStart> writer = ( TrackWriter <S2SV_ModEnd> * ) gf_list_get,0
3,<S2SV_ModStart> -> child ; if <S2SV_ModEnd> ( c && <S2SV_ModStart> > 0 ) <S2SV_ModEnd> -- item ; <S2SV_ModStart> -> next ; <S2SV_ModEnd> return c ;,0
4,"<S2SV_ModStart> u64 nr, <S2SV_ModEnd> struct pt_regs * <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",1
5,<S2SV_ModStart> EXT4_EXTENTS_FLAG ) { <S2SV_ModEnd> char buf [ <S2SV_ModStart> ( data ) ] ; <S2SV_ModEnd> struct grub_ext4_extent_header *,0
6,,0
7,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> parse_ciff ( save,0
8,,0
9,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
10,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ++ i ) vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( usehp ) vpx_write <S2SV_ModEnd> ( w,",1
11,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; },0
12,,0
13,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void construct_get_dest_keyring ( <S2SV_ModStart> * authkey ; <S2SV_ModEnd> if ( dest_keyring <S2SV_ModStart> ) break ; <S2SV_ModEnd> } case KEY_REQKEY_DEFL_THREAD_KEYRING,0
14,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> ret = get_negotiable_mechs,0
15,<S2SV_ModStart> = localtime ( <S2SV_ModEnd> t ) ;,0
16,<S2SV_ModStart> length ) ; if ( length > AUTH_PASS_LEN ) { <S2SV_ModStart> ) ) ; },0
17,<S2SV_ModStart> e == p || e == p,0
18,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",1
19,<S2SV_ModStart> = 0 ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> & timeout ) ),1
20,,0
21,<S2SV_ModStart> return ret ; <S2SV_ModEnd> ret = ext4_convert_unwritten_extents,1
22,"<S2SV_ModStart> alg ) { request_module <S2SV_ModEnd> ( ""%s"", <S2SV_ModStart> CRYPTO_ALG_NEED_FALLBACK ) ) request_module <S2SV_ModEnd> ( ""%s-all"",",0
23,"<S2SV_ModStart> = GIT_PKT_NG ; if <S2SV_ModEnd> ( ptr = <S2SV_ModStart> ( ptr = giterr_strchr <S2SV_ModEnd> ( line, <S2SV_ModStart> ( ptr = giterr_strchr <S2SV_ModEnd> ( line, <S2SV_ModStart> ( ptr = giterr_strchr <S2SV_ModEnd> ( line,",0
24,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> BYTE flags ; UINT16 <S2SV_ModEnd> length ; Stream_Read_UINT8,0
25,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ; if (,0
26,"<S2SV_ModStart> mntent, path, rootfs",1
27,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } io -> io_cleanup = mem_cleanup ;,1
28,<S2SV_ModStart> ( value + 0.5 <S2SV_ModEnd> ) ) ;,0
29,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return ret?,0
30,<S2SV_ModStart> vpx_codec_enc_cfg_map_t * map ; if ( cfg ) return 0,0
31,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
32,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
33,<S2SV_ModStart> ) malloc ( MYSQL_BUFSIZE <S2SV_ModEnd> ) ; if,0
34,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_ETXSTL <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXSTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXSTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ET",0
35,<S2SV_ModStart> ; value = ast2obj_expr <S2SV_ModEnd> ( o ->,0
36,<S2SV_ModStart> if ( page <S2SV_ModEnd> ) { http_response_printf <S2SV_ModStart> if ( page <S2SV_ModEnd> ) { http_response_printf <S2SV_ModStart> if ( page <S2SV_ModEnd> ) { http_response_printf <S2SV_ModStart> if ( page <S2SV_ModEnd> ) { http_response_printf,0
37,"<S2SV_ModStart> int low_var_thresh, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> -> pp_limits_buffer ; <S2SV_ModEnd> ( void ) <S2SV_ModStart> ) flag ; memset <S2SV_ModEnd> ( limits,",0
38,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; <S2SV_ModEnd> error = mb_cache_entry_insert <S2SV_ModStart> error ) { <S2SV_ModEnd> if ( error <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> error = 0 <S2SV_ModStart> hash ) ; <S2SV_ModEnd> } } else <S2SV_ModStart> hash ) ; <S2SV_ModEnd> } } <S2SV_null>",0
39,<S2SV_ModStart> ) ) ; * rlen = 0 ;,0
40,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp",0
41,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
42,,0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode <S2SV_ModStart>, & new_mode, & acl ) ; if ( ret <S2SV_ModEnd> ) goto out",0
44,"<S2SV_ModStart> size_t size ; memset ( cmpt, 0, sizeof ( jas_image_cmpt_t ) ) ;",0
45,<S2SV_ModStart> dp == datalen || dp == datalen,0
46,"<S2SV_ModStart> req, size_t <S2SV_ModEnd> acl_len ) { <S2SV_ModStart> acl_len ) { <S2SV_ModEnd> uint32_t attrlen, <S2SV_ModStart> int status ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> u32 recvd ; <S2SV_ModEnd> recvd = req <S2SV_ModStart> attrlen ) ; <S2SV_ModEnd> } else status",0
47,"<S2SV_ModStart> * TICK_NSEC ; u64 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",0
48,"<S2SV_ModStart> { owner = ssplit <S2SV_ModEnd> ( auth, <S2SV_ModStart> } group = ssplit <S2SV_ModEnd> ( tok,",1
49,<S2SV_ModStart> ; # if CONFIG_MEM_MANAGER <S2SV_ModEnd> int number_aau ; <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; <S2SV_ModEnd> if ( addr,0
50,<S2SV_ModStart> int indexes = 0 ; long long <S2SV_ModEnd> export_index_table [ indexes,0
51,<S2SV_ModStart> HASH_DISABLED ; } <S2SV_ModEnd> return NULL ;,0
52,<S2SV_ModStart> ; if ( 1 <S2SV_ModEnd> ) { # <S2SV_ModStart> endif if ( 1 <S2SV_ModEnd> ) { },0
53,<S2SV_ModStart> } if ( c -> opt -> option. client || c -> opt -> protocol ) return 0 ; if ( <S2SV_ModStart> 1 ; } <S2SV_ModEnd> return 0 ;,0
54,<S2SV_ModStart> ; if ( cmac == NULL ||,0
55,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> const uint64_t bits_used <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
56,"<S2SV_ModStart> define EOFOp 0x07 <S2SV_ModEnd> char magick [ <S2SV_ModStart> ) ) ; if ( count!= 2 ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
57,"<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> altsetting [ 0 ]. desc. bNumEndpoints < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; error = - EINVAL ; goto err_free_urb ; }",1
58,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
59,<S2SV_ModStart> = NULL ; const,0
60,,0
61,<S2SV_ModStart> if ( n >= <S2SV_ModEnd> cmdsize ) {,0
62,"<S2SV_ModStart> void vp9_setup_dst_planes ( MACROBLOCKD <S2SV_ModEnd> * xd, <S2SV_ModStart> mi_col ) { const",0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,<S2SV_ModStart> == READ ) { <S2SV_ModStart> = ocfs2_get_block ; } else { <S2SV_ModEnd> get_block = ocfs2_dio_get_block <S2SV_ModStart> = ocfs2_dio_get_block ; },0
65,"<S2SV_ModStart> ( f, ""%79s <S2SV_blank> %[^\\n]\\n"" <S2SV_ModEnd>, def,",0
66,,0
67,<S2SV_ModStart> string ) { assert ( string ) ;,0
68,<S2SV_ModStart> size ) ; if (! px -> ft ) { return FALSE ; },1
69,"<S2SV_ModStart> u_char * dat, u_int len <S2SV_ModStart>, val_l ; <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> ) ) ; len = <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> ) ) ; len = <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> ) ) ; len = <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> ) ) ; len = <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> ) ) ; len = <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> ) ) ; len = <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> ) ) ; len = <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> ) ) ; len = <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> ) ) ; len = <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> ) ) ; len = <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> ) ) ; len = <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> ) ) ; len = <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> ) ) ; len = <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> ) ) ; len = <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> ) ) ; len = <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> ) ) ; len = <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> ) ) ; len = <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> ) ) ; len = <S2SV_ModEnd> ND_",0
70,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
71,<S2SV_ModStart> const buffers [ 3 <S2SV_ModEnd> ] = { <S2SV_ModStart> int strides [ 3 <S2SV_ModEnd> ] = {,0
72,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; for (,1
73,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
74,<S2SV_ModStart> _ipmi_destroy_user ( user <S2SV_ModEnd> ) ; kref_put,1
75,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> sl = strlen,1
76,,0
77,<S2SV_ModStart> = NULL ; dst_state -> frame [ i ] = NULL ;,0
78,,0
79,"<S2SV_ModStart> maxn ) { <S2SV_ModEnd> # ifdef DEBUG <S2SV_ModStart> ; # endif if ( n > maxn ) SWF_error ( ""Action <S2SV_blank> overflow!!"" ) ;",0
80,<S2SV_ModStart> ( len < ep <S2SV_ModEnd> ) { return,0
81,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
82,<S2SV_ModStart> zArg ) { sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof <S2SV_ModStart> nModuleArg ) ; sqlite3_int64 <S2SV_ModEnd> * * azModuleArg,0
83,<S2SV_ModStart> if ( interp_window_coeff && interp_window_coeff,0
84,"<S2SV_ModStart>, p ) ; * low_prev = 0",0
85,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> bfq_idle_slice_timer_body ( struct <S2SV_ModStart> bfqq ) { return false <S2SV_ModEnd> ; } <S2SV_null>,0
86,,1
87,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
88,<S2SV_ModStart> + x > ( <S2SV_ModStart> diffBlock + diffBlockLength ),0
89,<S2SV_ModStart> np -> opt <S2SV_ModEnd> ) ; err,0
90,<S2SV_ModStart> ) ; } status = MagickFalse ;,0
91,<S2SV_ModStart> data ) { ( void ) ctx ; ( void ) data ;,0
92,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
93,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
94,<S2SV_ModStart> if ( near_sadidx && near_sadidx,0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
97,<S2SV_ModStart> msicap msicap ; <S2SV_ModEnd> return pci_emul_add_capability (,0
98,,0
99,<S2SV_ModStart> ; if ( <S2SV_ModEnd> cfg -> g_lag_in_frames <S2SV_ModStart> g_pass!= VPX_RC_ONE_PASS <S2SV_ModEnd> ) ERROR (,0
100,<S2SV_ModStart> { cpi -> zbin_mode_boost <S2SV_ModEnd> = 0 ;,0
101,<S2SV_ModStart> info -> si_code > <S2SV_ModEnd> 0 ) return <S2SV_ModStart> return - EPERM <S2SV_ModEnd> ; return do_send_specific,0
102,<S2SV_ModStart> ptr -> size <S2SV_ModEnd> ; tmp_str =,1
103,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
104,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> -> state == fmode <S2SV_ModEnd> ) return ; <S2SV_ModStart> -> state = fmode <S2SV_ModEnd> ; } state",0
105,<S2SV_ModStart> read_info ) ; <S2SV_ModEnd> if ( (,0
106,<S2SV_ModStart> 0 ; } memcpy <S2SV_ModEnd> ( elem.,0
107,<S2SV_ModStart> ( unsigned ) ( <S2SV_ModStart> [ i ] ) <S2SV_ModStart> ( unsigned ) ( <S2SV_ModStart> [ i ] ),0
108,"<S2SV_ModStart> { avpriv_request_sample ( avctx,",0
109,<S2SV_ModStart> length - 1 <S2SV_ModEnd> ) ; return,1
110,"<S2SV_ModStart> * name = fit_get_name_safe <S2SV_ModEnd> ( fit,",0
111,<S2SV_ModStart> ; if ( kfifo_alloc_zero <S2SV_ModEnd> ( & state,0
112,"<S2SV_ModStart> * iface, vpx_codec_dec_cfg_t <S2SV_ModEnd> * cfg,",0
113,<S2SV_ModStart> ; value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1100WritePhyReg (,0
114,<S2SV_ModStart> if ( iph && iph -> frag_off & htons ( IP_OFFSET ),0
115,<S2SV_ModStart> else if ( <S2SV_ModEnd> flags & VPX_CODEC_USE_XMA <S2SV_ModStart> flags & VPX_CODEC_USE_XMA <S2SV_ModEnd> ) res =,0
116,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
117,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; RESERVE_SPACE",1
118,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ) ; return 0 <S2SV_ModStart> break ; } return 1 ;,0
119,"<S2SV_ModStart> 0, buffsize, 0 <S2SV_ModStart> 0, buffsize, 0",0
120,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
121,<S2SV_ModStart> goto trunc ; <S2SV_ModEnd> ND_PRINT ( (,0
122,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> * obuf =",1
123,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
124,<S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ) <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ),1
125,"<S2SV_ModStart> * costs, vpx_tree <S2SV_ModEnd> tree, const <S2SV_ModStart> tree, const vpx_tree <S2SV_ModEnd> * probs, <S2SV_ModStart> ) { const vpx_tree <S2SV_ModEnd> prob = probs <S2SV_ModStart> ) ; const vpx_tree_index <S2SV_ModEnd> ii = tree",0
126,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
127,"<S2SV_ModStart> c, 0, 0",0
128,,0
129,<S2SV_ModStart> ; # if HAVE_EDSP <S2SV_ModEnd> flags |= HAS_EDSP <S2SV_ModStart> ; # endif <S2SV_ModEnd> flags |= HAS_MEDIA <S2SV_ModStart> ; # endif <S2SV_ModEnd> return flags &,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
131,"<S2SV_ModStart> void count_segs_sb ( <S2SV_ModEnd> const TileInfo * <S2SV_ModStart> const tile, <S2SV_ModEnd> int * no_pred_segcounts <S2SV_ModStart> ) { const <S2SV_ModEnd> int bw, <S2SV_ModStart> { count_segs ( <S2SV_ModEnd> tile, mi_8x8 <S2SV_ModStart> { count_segs ( <S2SV_ModEnd> tile, mi_8x8 <S2SV_ModStart> { count_segs ( <S2SV_ModEnd> tile, mi_8x8 <S2SV_ModStart> { count_segs ( <S2SV_ModEnd> tile, mi_8x8 <S2SV_ModStart> { count_segs ( <S2SV_ModEnd> tile, mi_8x8 <S2SV_ModStart> { count_segs ( <S2SV_ModEnd> tile, mi_8x8 <S2SV_ModStart> { count_segs ( <S2SV_ModEnd> tile, mi_8x8 <S2SV_ModStart> { count_segs ( <S2SV_ModEnd> tile, mi_8x8 <S2SV_ModStart> { count_segs ( <S2SV_ModEnd> tile, mi_8x8 <S2SV_ModStart> { count_segs ( <S2SV_ModEnd> tile, mi_8x8 <S2SV_ModStart> { count_segs ( <S2SV_ModEnd> tile, mi_8x8 <S2SV_ModStart> { count_segs ( <S2SV_ModEnd> tile, mi_8x8 <S2SV_ModStart> { count_segs ( <S2SV_ModEnd> tile, mi_8x8 <S2SV_ModStart> { count_segs ( <S2SV_ModEnd> tile, mi_8x8 <S2SV_ModStart> { count_segs",0
132,<S2SV_ModStart> ) break ; <S2SV_ModEnd> if (!,0
133,<S2SV_ModStart> get_blocks_flags = EXT4_GET_BLOCKS_CREATE <S2SV_ModEnd> ; blks =,0
134,"<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> canonnamelen = 0 <S2SV_ModStart> & p -> ai_family, <S2SV_ModEnd> & p -> <S2SV_ModStart> & p -> ai_socktype, <S2SV_ModEnd> p -> ai_protocol <S2SV_ModStart> p -> ai_protocol, <S2SV_ModEnd> p -> ai_addrlen <S2SV_ModStart> p -> ai_addrlen <S2SV_ModEnd> )!= OE_OK",0
135,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
136,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
137,"<S2SV_ModStart> __u16 size, const <S2SV_ModStart> data ) { size_t <S2SV_ModEnd> ret ; ret",0
138,"<S2SV_ModStart> mod_ty Module ( asdl_seq <S2SV_ModEnd> * body,",0
139,"<S2SV_ModStart>, int64_t ts_end <S2SV_ModEnd> ) { struct <S2SV_ModStart> write_idx ) ; <S2SV_ModEnd> for ( row <S2SV_ModStart> } else { vpx_copy_and_extend_frame <S2SV_ModEnd> ( src, <S2SV_ModStart> img ) ; <S2SV_ModEnd> # endif buf",0
140,<S2SV_ModStart>. sharpness ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
141,<S2SV_ModStart> ) ) ; btif_in_execute_bonded_devices ( ) ;,0
142,<S2SV_ModStart> = getnum ( <S2SV_ModEnd> MAXALIGN ) ;,0
143,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
144,"<S2SV_ModStart> (! data <S2SV_ModEnd> ) ) res <S2SV_ModStart>. decode ( <S2SV_ModEnd> data, data_sz",0
145,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int isofs_read_inode (,0
146,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> ) ; } sendClean ( outputbuffer ) ;",1
147,<S2SV_ModStart> self ) { if ( self ),0
148,<S2SV_ModStart> < count ; i ++ <S2SV_ModEnd> ) { n,0
149,,0
150,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
151,<S2SV_ModStart> & flags ) <S2SV_ModEnd> err = verify_compat_iovec <S2SV_ModStart> VERIFY_WRITE ) ; <S2SV_ModEnd> if ( err <S2SV_ModStart> msg_sys -> msg_control <S2SV_ModEnd> ; if (,0
152,<S2SV_ModStart> buffer_head * dibh <S2SV_ModEnd> ; u64 bn <S2SV_ModStart> ; const unsigned int,0
153,<S2SV_ModStart> ) ) ) <S2SV_ModEnd> ; } if,0
154,,0
155,"<S2SV_ModStart> { if ( copy_file_ex <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> { if ( copy_file_ex <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> { if ( copy_file_ex <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> { if ( copy_file_ex <S2SV_ModEnd> ( ""/etc/skel/.cshrc"",",0
156,<S2SV_ModStart> msix_tab_size ) { <S2SV_ModEnd> bzero ( msixcap,1
157,<S2SV_ModStart> ; if ( <S2SV_ModEnd> js_regexec ( re,0
158,<S2SV_ModStart> : if ( Long_val <S2SV_ModEnd> ( Field (,1
159,"<S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; ksz8851WriteReg <S2SV_ModStart> ( interface, KSZ8851_ISR ) ; isr = ksz8851ReadReg ( interface, KSZ8851_ISR ) ; isr = ksz8851ReadReg ( interface, KSZ8851_ISR ) ; if ( ( isr & ISR_LCIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & ISR_LCIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & ISR_TXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & ISR_TXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & ISR_TXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & ISR_RXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & ISR_RXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & ISR_RXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & ISR_RXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & ISR_RXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & ISR_RXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & ISR_RXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart>",0
160,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
161,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> p_buf, msglen )",1
162,<S2SV_ModStart> ( fp ) ; idp. id_buf = NULL,0
163,"<S2SV_ModStart> ( ) ; strcpy ( t1_buf_array, t1_buf_array ) ;",0
164,,0
165,"<S2SV_ModStart> key_ref ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) { ret = - ENOKEY ; goto error2 ; }",1
166,,0
167,<S2SV_ModStart> var_off ) ; <S2SV_ModEnd> switch ( opcode,0
168,"<S2SV_ModStart> pTcon, pTcon, true",0
169,"<S2SV_ModStart> th -> dest, true",0
170,"<S2SV_ModStart> number_of_keyframes, encode_frame_count <S2SV_ModEnd> ; uint32_t bytes_total <S2SV_ModStart> svc_ctx ) ; <S2SV_ModEnd> svc_log ( svc_ctx <S2SV_ModStart> ""\\n"" ) ; <S2SV_ModEnd> if ( svc_ctx <S2SV_ModStart> i ) { <S2SV_ModEnd> if ( svc_ctx",0
171,<S2SV_ModStart> = new_cols ; <S2SV_ModEnd> vterm_allocator_free ( screen,1
172,,0
173,"<S2SV_ModStart> ( pd, g_settings_dump_location <S2SV_ModEnd> ) ; char",0
174,"<S2SV_ModStart> ""rfbScaledScreenUpdateRect"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
175,"<S2SV_ModStart> u_char * dat, u_int length ) { <S2SV_ModEnd> ND_PRINT ( (",0
176,<S2SV_ModStart> check_here ) { <S2SV_ModEnd> if ( check_here,0
177,,0
178,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
179,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> * optp, const <S2SV_ModStart> & 3 ) { <S2SV_ModStart> = IPOPT_END ; }",0
180,<S2SV_ModStart> ; if ( connection <S2SV_ModEnd> == NULL ),0
181,<S2SV_ModStart> * findalldevs_if ; uint32 <S2SV_ModEnd> nif = 0 <S2SV_ModStart> 0 ; } if ( plen < sizeof ( struct rpcap_findalldevs_if ) ) { return - 1 ; },0
182,"<S2SV_ModStart> client_uid, DEFAULT_DUMP_DIR_MODE, NULL",0
183,<S2SV_ModStart> ; x += 4 <S2SV_ModEnd> ) { index,1
184,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
185,"<S2SV_ModStart> ; status = SetImageExtent <S2SV_ModEnd> ( image,",0
186,<S2SV_ModStart> len ) ; ND_TCHECK ( bp [ 0 ] ) ;,0
187,"<S2SV_ModStart>! ptrace_has_cap ( task <S2SV_ModEnd> -> user_ns,",0
188,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
189,<S2SV_ModStart> ; } else { <S2SV_ModStart> ps_codec ) ; },0
190,<S2SV_ModStart> = 0 ; dd -> per_sdma = NULL ;,0
191,,0
192,<S2SV_ModStart> } pairs = palloc0 <S2SV_ModEnd> ( pcount *,0
193,<S2SV_ModStart> val ) ; <S2SV_ModEnd> if ( strcmp,0
194,"<S2SV_ModStart> += mlen ; if ( clen < 0 ) { return bad_request ( c, 400, __LINE__ ) ; }",0
195,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> 256 ] ; <S2SV_ModEnd> int i, <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16 <S2SV_ModStart> ++ j ) out <S2SV_ModEnd> [ j *",1
196,<S2SV_ModStart> { if ( <S2SV_ModEnd>! flatpak_openat_noatime (,0
197,<S2SV_ModStart> char * temp_filename <S2SV_ModEnd> ; if ( <S2SV_ModStart> node ) ; temp_filename = osi_calloc ( strlen ( filename ) + 5 ) ; if ( temp_filename ) { <S2SV_ModStart> enode ) ; } <S2SV_ModStart> sections ) ) { <S2SV_ModStart> fp ) ; },0
198,<S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( tptr ) ;,0
199,"<S2SV_ModStart>, NULL ) <S2SV_ModEnd> ; return ;",0
200,"<S2SV_ModStart> ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" <S2SV_ModEnd> ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" ""%s"" <S2SV_ModStart> ""Content-Length: <S2SV_blank> %d\\r\\n"" ""%s"" ""\\r\\n"" ""%s"" <S2SV_ModEnd>, request,",0
201,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""chown"" ) ; <S2SV_ModEnd> unlink ( src",0
202,<S2SV_ModStart>!= BFA_STATUS_OK ) { kfree ( fcstats ) ; <S2SV_ModStart> return NULL ; },1
203,"<S2SV_ModStart> -> x = MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> y = MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> z = MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> z = MagickMax <S2SV_ModEnd> ( 1.0f,",0
204,<S2SV_ModStart> ; rec -> sasl_password = src -> sasl_password ; rec ->,0
205,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
206,"<S2SV_ModStart> o, datao ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteCanonEntry ) )",0
207,"<S2SV_ModStart> ( param, ""%s"",",0
208,,0
209,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
210,<S2SV_ModStart> ; def -> <S2SV_ModEnd> session_setup = usm_session_init,0
211,"<S2SV_ModStart>! match ( eflags <S2SV_ModEnd>, sp,",0
212,<S2SV_ModStart> ] ; # if NETSNMP_NO_WRITE_SUPPORT <S2SV_ModEnd> switch ( action,0
213,,0
214,<S2SV_ModStart> open_list ) { spin_lock ( & timer -> lock ) ; <S2SV_ModStart> ( & slave_active_lock ) ; spin_unlock ( & timer -> lock,0
215,<S2SV_ModStart> -> u4_bitoffset = ih264d_read_mmco_commands <S2SV_ModEnd> ( ps_dec ),0
216,"<S2SV_ModStart> int_fast32_t widthOverflow = MIN ( <S2SV_ModStart> info -> originalWidth, <S2SV_ModStart> info -> originalHeight ) <S2SV_ModStart> uint_fast32_t newRasterSize = MIN ( <S2SV_ModStart> info -> originalHeight, <S2SV_ModStart> info -> rasterSize )",0
217,<S2SV_ModStart> user ) ) { ret = ret_error ; <S2SV_ModStart> return ret_error ; },0
218,<S2SV_ModStart> bus ] ; <S2SV_ModEnd> si = &,0
219,"<S2SV_ModStart>, timeo ) <S2SV_ModEnd> ; if (",1
220,<S2SV_ModStart> ; isspace ( ( unsigned char ) <S2SV_ModStart> && isspace ( ( unsigned char ),0
221,"<S2SV_ModStart> ; result = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL ) )",1
222,<S2SV_ModStart> msixcap msixcap ; <S2SV_ModEnd> tab_size = msgnum,0
223,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",1
224,<S2SV_ModStart> == NULL ) return retval <S2SV_ModEnd> ; status = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> X509_NAME_free ( is,1
225,<S2SV_ModStart> cpi ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; <S2SV_ModStart> } else { <S2SV_ModEnd> frame_type = get_frame_type,0
226,<S2SV_ModStart> ; break ; default : break ;,0
227,<S2SV_ModStart> ) b ; <S2SV_ModEnd> return - 1,0
228,<S2SV_ModStart> ) + size <S2SV_ModEnd> ; if (,0
229,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,1
230,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs,",0
231,<S2SV_ModStart> b ) ; b -> fd = - 1 ;,0
232,,0
233,<S2SV_ModStart> -> lun ) sas_eh_defer_cmd <S2SV_ModEnd> ( cmd ),0
234,"<S2SV_ModStart>, end_col_offset ; if ( TYPE ( CHILD ( n, name_i ) ) == RARROW ) { return NULL ; } <S2SV_ModStart> 2 ; } <S2SV_ModEnd> get_last_end_pos ( body",0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,<S2SV_ModStart> Rec. RecordLength <S2SV_ModEnd> ) ; if,0
237,,1
238,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
239,<S2SV_ModStart> case SEEK_SET : <S2SV_ModEnd> psf_fseek ( psf <S2SV_ModStart> ; } ; <S2SV_ModEnd> break ; case <S2SV_ModStart> case SEEK_CUR : <S2SV_ModEnd> psf_fseek ( psf <S2SV_ModStart> ; } ; <S2SV_ModEnd> psf_fseek ( psf <S2SV_ModStart> ; } ; <S2SV_ModEnd> psf_fseek ( psf,0
240,"<S2SV_ModStart> u4_ofst ) ; DEBUG_RANGE_OFST ( ""init"", ps_cabac -> u4_range, ps_cabac -> u4_ofst ) ;",0
241,,0
242,<S2SV_ModStart> perf_event_context * ctx <S2SV_ModEnd> ; struct task_struct <S2SV_ModStart> event ) ; ctx <S2SV_ModEnd> -> state =,0
243,<S2SV_ModStart> post_proc_flag = # <S2SV_ModEnd> endif ctx -> <S2SV_ModStart>. noise_level ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
244,<S2SV_ModStart> struct olsr_msg4 ) ) ; ND_TCHECK_16BITS ( ptr. common -> packet_len,0
245,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vpx_usec_timer_start ( & <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,1
246,<S2SV_ModStart> ) ) { <S2SV_ModEnd> exit ( 1 <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> _exit ( 0 <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> _exit ( 0,0
247,<S2SV_ModStart> ; ptr_hbe_txposer -> synth_buf_offset = 0 ; ptr_hbe_txposer ->,0
248,,0
249,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
250,<S2SV_ModStart> (! proto_end ||! url,0
251,<S2SV_ModStart> end = path ; if ( base < 0 ) return - FDT_ERR_BADSTRUCTURE,0
252,,0
253,<S2SV_ModStart> channel ) ; <S2SV_ModEnd> set_description ( client,1
254,<S2SV_ModStart> book -> dim && i < n,1
255,<S2SV_ModStart> action ) { ( void ) r ;,0
256,<S2SV_ModStart> { if ( <S2SV_ModEnd> check_scale_factors ( other_w,0
257,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
258,"<S2SV_ModStart> -> pktoptions ; memset ( & skb, 0, sizeof ( skb ) ) ;",0
259,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> sctp_v6_protosw_exit ( ) <S2SV_ModStart> ( ) ; unregister_pernet_subsys ( & sctp_net_ops ) ;,0
260,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void show_psnr (,0
261,<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen (,1
262,"<S2SV_ModStart> ( ) ; <S2SV_ModEnd> TRACE_DEBUG ( ""CIDER=0x%04"" <S2SV_ModStart> ( interface, KSZ8851_CIDER ) ) ; TRACE_DEBUG ( ""CIDER=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_CIDER ) ) ; TRACE_DEBUG ( ""PHY1ILR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1ILR ) ) ; TRACE_DEBUG ( ""PHY1ILR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1ILR ) ) ; TRACE_DEBUG ( ""PHY1IHR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1IHR ) ) ; if ( ksz8851ReadReg ( interface, KSZ8851_CIDER )!= KSZ8851_RE",0
263,"<S2SV_ModStart> skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
264,<S2SV_ModStart> IMAGE_SIZE_INVAL ) ) <S2SV_ModEnd> return - ENOEXEC <S2SV_ModStart> - ENOEXEC ; <S2SV_ModEnd> bootstage_mark ( bootstage_id,0
265,"<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> uinput_fd, UI_DEV_DESTROY )",1
266,<S2SV_ModStart> ( rc -> avg_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_bandwidth <S2SV_ModEnd> * rc ->,0
267,<S2SV_ModStart> ) if ( strchr <S2SV_ModEnd> ( argv [,0
268,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
269,<S2SV_ModStart> ib ] ; <S2SV_ModEnd> dequant_ptr = d,1
270,"<S2SV_ModStart> FN_REFLEN ] ; memset ( buff, 0, sizeof ( buff ) ) ;",1
271,<S2SV_ModStart> decrypt_cb ) { unsigned char <S2SV_ModEnd> n = ( <S2SV_ModStart> n = ( unsigned char <S2SV_ModEnd> ) ( data_end,0
272,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
273,,0
274,<S2SV_ModStart> -> size = ( int ),0
275,"<S2SV_ModStart> ; UWORD8 u1_level_idc = 0, u1_seq_parameter_set_id = 0 <S2SV_ModEnd> ; UWORD16 i2_max_frm_num",0
276,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; <S2SV_ModEnd> if ( vp9_set_size_literal",0
277,"<S2SV_ModStart> out ) { uint16 <S2SV_ModEnd> bitspersample, samplesperpixel <S2SV_ModStart>, input_photometric ; uint16 <S2SV_ModEnd> input_photometric ; uint32",0
278,<S2SV_ModStart> a ) { <S2SV_ModEnd> char * pn <S2SV_ModStart> ; r = safe_lstat <S2SV_ModEnd> ( a ->,0
279,"<S2SV_ModStart> i_sb ) ; <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> ) { struct <S2SV_ModEnd> kernel_lb_addr loc ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> udf_read_ptagged ( inode <S2SV_ModStart>, & ident <S2SV_ModEnd> ) ) {",0
280,"<S2SV_ModStart> get_uv_tx_size ( mbmi, 0",0
281,"<S2SV_ModStart> mq_ops ) { spin_lock <S2SV_ModEnd> ( & fq <S2SV_ModStart> mq_flush_lock, flags <S2SV_ModEnd> ) ; flush_rq",0
282,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
283,"<S2SV_ModStart> { option = sscanf <S2SV_ModEnd> ( option,",0
284,<S2SV_ModStart> ) sizeof ( effect_param_t <S2SV_ModEnd> ) ) {,0
285,<S2SV_ModStart> == NULL ) { k5free ( key_data ) ; <S2SV_ModStart> goto cleanup ; },0
286,"<S2SV_ModStart> ; memcpy ( sbuf <S2SV_ModEnd> + 1,",0
287,"<S2SV_ModStart> ctxt ) ; memset ( & ctxt, 0, sizeof ( ctxt ) ) ;",0
288,<S2SV_ModStart> ; } } return - 1 ;,1
289,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
290,"<S2SV_ModStart> 1 ] ; memset ( dst_buffer, 0, sizeof ( dst_buffer ) ) ;",0
291,<S2SV_ModStart> ) ; } clone_info = DestroyImageInfo ( image ) ;,0
292,"<S2SV_ModStart> len ) { return _PyUnicode_DecodeUnicodeEscape ( s, len, NULL ) <S2SV_ModEnd> ; } <S2SV_null>",0
293,,0
294,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
295,<S2SV_ModStart> = 1 ; <S2SV_ModEnd> return 0 ;,0
296,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
297,<S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> } ps_dec -> <S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> } ps_dec ->,0
298,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> vterm_allocator_free ( screen,1
299,"<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & delay )",1
300,"<S2SV_ModStart> one, offset = 0",0
301,<S2SV_ModStart> value ) { <S2SV_ModEnd> state -> endpoints,0
302,"<S2SV_ModStart> cmp = type <S2SV_ModEnd>,. lookup_type",0
303,<S2SV_ModStart> ||! ntime ||! nbit,0
304,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
305,<S2SV_ModStart> unused ) { return _Py_IDENTIFIER ( __dict__ ) <S2SV_ModEnd> ; } <S2SV_null>,0
306,"<S2SV_ModStart> ) & desc, sizeof ( * desc )",1
307,<S2SV_ModStart> -> private_data ; int ret ; <S2SV_ModStart> PERF_EVENT_IOC_PERIOD : return ret <S2SV_ModEnd> ; case PERF_EVENT_IOC_ID,0
308,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> * r, PREDICTION_MODE <S2SV_ModEnd> y_mode ) { <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> ] ) ; <S2SV_ModEnd> return uv_mode ;",0
309,<S2SV_ModStart> = block_size ; if ( sha -> ctx_len < block_size ) return - EINVAL ;,0
310,<S2SV_ModStart> ) ; return Qnil <S2SV_ModEnd> ; } <S2SV_null>,0
311,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
312,<S2SV_ModStart> if ( len < <S2SV_ModEnd> readlen ) {,0
313,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 0 ;,0
314,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> t ] ; vpx_extra_bit <S2SV_ModEnd> * const b <S2SV_ModStart> b = & vpx_extra_bits <S2SV_ModEnd> [ t ] <S2SV_ModStart> ) ; } vpx_write_bit <S2SV_ModEnd> ( w,",0
315,"<S2SV_ModStart> struct vp9_write_bit_buffer wb <S2SV_ModEnd> ; struct vp9_write_bit_buffer <S2SV_ModStart> struct vp9_write_bit_buffer saved_wb ; memset ( & wb, 0, sizeof ( wb ) ) <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> = vp9_rb_bytes_written ( <S2SV_ModEnd> wb ) ; <S2SV_ModStart> += uncompressed_hdr_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb",0
316,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
317,<S2SV_ModStart> struct ikev2_id id = { 0 },0
318,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 0 ;,0
319,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
320,,0
321,"<S2SV_ModStart> mntent -> mnt_dir, NULL",1
322,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
323,"<S2SV_ModStart> ( env, server_name_val <S2SV_ModEnd>, req_server_name (",0
324,"<S2SV_ModStart> endif int col_type = 0, prepare_retval = 0 <S2SV_ModEnd> ; MYSQL_BIND *",0
325,<S2SV_ModStart> need = 0 <S2SV_ModEnd> ; CELL first,0
326,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
327,<S2SV_ModStart> ; if (! crng_init <S2SV_ModEnd> ) { if,0
328,"<S2SV_ModStart> LEX_ID ) { strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""ID:"" <S2SV_ModEnd> ) ; } <S2SV_ModStart> LEX_STR ) { strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""String:\'"" <S2SV_ModEnd> ) ; strncat <S2SV_ModStart> str, ""\'"" <S2SV_ModEnd> ) ; }",0
329,,1
330,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
331,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
332,<S2SV_ModStart> ( s1 ) <S2SV_ModEnd> ) ; },0
333,"<S2SV_ModStart> { parse_global_option ( CMD_PRINT_HELP <S2SV_ModEnd>, NULL, <S2SV_ModStart> { parse_global_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL, <S2SV_ModStart> ; parse_service_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL, <S2SV_ModStart> ; parse_service_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL,",0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,<S2SV_ModStart> len == 0 || st -> st_skeyid_e_nss == NULL,0
336,<S2SV_ModStart> = e_error ; ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = 0 ;,0
337,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char * print_string,0
338,"<S2SV_ModStart>. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img, <S2SV_ModStart>. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img,",1
339,<S2SV_ModStart> ; } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
340,<S2SV_ModStart> i < cols <S2SV_ModEnd> ; i ++,0
341,,0
342,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
343,,0
344,<S2SV_ModStart> ) ) { if ( strptr == NULL ) return - 1 ;,0
345,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
346,"<S2SV_ModStart> 0 ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 0600 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; return",1
347,<S2SV_ModStart> BLOCK_8X8 : return vpx_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> BLOCK_16X8 : return vpx_mse16x8 <S2SV_ModEnd> ; case BLOCK_8X16 <S2SV_ModStart> BLOCK_8X16 : return vpx_mse8x16 <S2SV_ModEnd> ; case BLOCK_8X16 <S2SV_ModStart> BLOCK_8X16 : return vpx_mse8x16 <S2SV_ModEnd> ; default : <S2SV_ModStart> default : return vpx_mse16x16 <S2SV_ModEnd> ; } },0
348,<S2SV_ModStart> ; if ( fixed_keypack <S2SV_ModEnd> ) { retval,0
349,"<S2SV_ModStart> flags ) ; memset ( vb, 0, sizeof ( vb ) ) ;",0
350,<S2SV_ModStart> size ) { ASSERT_NO_SIZE_OVERFLOW ( size ) ;,1
351,<S2SV_ModStart> == sip && ( <S2SV_ModStart> rxh -> serviceId ),0
352,"<S2SV_ModStart> ; memset ( bss_desc <S2SV_ModEnd> -> ssid,",0
353,,0
354,"<S2SV_ModStart> struct l2cap_conf_rfc rfc ; memset ( & rfc, 0, sizeof ( rfc ) ) <S2SV_ModEnd> ; void * <S2SV_ModStart> sk ) ; <S2SV_ModEnd> break ; }",0
355,"<S2SV_ModStart> do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> r, MSG_WAITALL )",1
356,<S2SV_ModStart> ; } } ps_dec -> u1_pic_decode_done = 0 ;,0
357,<S2SV_ModStart> while ( pair <S2SV_ModEnd> ) { mprAddItem,1
358,"<S2SV_ModStart> * delegation, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> -> type & fmode <S2SV_ModEnd> )!= open_flags <S2SV_ModStart> ( state, fmode <S2SV_ModEnd>, & deleg_cur <S2SV_ModStart> -> stateid, fmode <S2SV_ModEnd> ) ; ret <S2SV_ModStart> ( state, fmode <S2SV_ModEnd>, NULL,",0
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,,0
361,<S2SV_ModStart> } if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
362,<S2SV_ModStart> { if ( strlen ( username ) >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if (,0
363,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> ) { return vpx_read_tree <S2SV_ModEnd> ( r,",1
364,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",1
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,<S2SV_ModStart> depth ++ ; ND_TCHECK ( buf2 ) ;,0
367,"<S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> length ) ; ksz8851ClearBit <S2SV_ModEnd> ( interface, <S2SV_ModStart> length ) ; ksz8851ClearBit <S2SV_ModEnd> ( interface, <S2SV_ModStart> length ) ; ksz8851ClearBit <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) ; n <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK",0
368,<S2SV_ModStart> ; # endif mono_gc_invoke_finalizers ( ) ;,0
369,,0
370,<S2SV_ModStart> end ) ; <S2SV_ModEnd> ret = unuse_pte_range,0
371,"<S2SV_ModStart> ""Incorrect <S2SV_blank> parameters:\\n"" ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> ] ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> ] ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> ] ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> fout ) ; <S2SV_ModEnd> return 1 ;",0
372,"<S2SV_ModStart> i, result <S2SV_ModEnd> ; PyObject *",1
373,<S2SV_ModStart> vpx_codec_alg_priv * priv = NULL <S2SV_ModStart> priv ) { <S2SV_ModEnd> unsigned int i <S2SV_ModStart> VPX_CODEC_MEM_ERROR ; } priv <S2SV_ModEnd> -> sz = <S2SV_ModStart> enc ) { priv <S2SV_ModEnd> -> cfg = <S2SV_ModStart> enc = & priv <S2SV_ModEnd> -> cfg ; <S2SV_ModStart> ++ ) ; priv <S2SV_ModEnd> -> cx_data_sz =,0
374,"<S2SV_ModStart> cnt_c, totfr, false",0
375,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx ->,0
376,"<S2SV_ModStart> inode -> i_sb, false",0
377,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0",1
378,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int bad_format_imginfo (,0
379,"<S2SV_ModStart> ; UtRegisterTest ( ""DefragAdvancedTest"", DefragAdvancedTest ) ; UtRegisterTest (",0
380,<S2SV_ModStart> = object_length ; new_object. length = 0 ;,0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,"<S2SV_ModStart> p_sys, p_sys <S2SV_ModEnd> ) ; }",0
384,<S2SV_ModStart> ; exit_mf : <S2SV_ModEnd> free_stream ( s,0
385,<S2SV_ModStart> + idx ) ; assert ( a -> names == NULL ),0
386,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
387,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
388,<S2SV_ModStart> if ( j >= <S2SV_ModEnd> 0 ) {,0
389,<S2SV_ModStart> ) == 1 || NCH ( n ) == 2,0
390,,0
391,"<S2SV_ModStart> reqPtr, reqPtr <S2SV_ModEnd> ) ; if",0
392,<S2SV_ModStart> ret = 0 ; ( void ) ti,0
393,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
394,<S2SV_ModStart> se_device * remote_dev <S2SV_ModEnd> = xop -> <S2SV_ModStart> = xop -> src_dev <S2SV_ModEnd> ; pr_debug (,0
395,<S2SV_ModStart> ; if ( header <S2SV_ModEnd> ) { new_bh,0
396,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
397,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
398,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
399,"<S2SV_ModStart> AcquireQuantumMemory ( imsx <S2SV_ModEnd>, 1 )",0
400,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> Vpx_ref_frame_t * ) ; ( void ) ctx ; ( void ) args",0
401,<S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> } ps_dec -> <S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> } ps_dec ->,0
402,"<S2SV_ModStart>, u4_y_offset ; <S2SV_ModEnd>  UWORD8 * pu1_out_p <S2SV_ModStart> == B_PIC ) { <S2SV_ModStart> ps_dec ) ; } else { <S2SV_ModEnd> impeg2d_dec_p_mb_params ( ps_dec <S2SV_ModStart> ) ; } }",0
403,<S2SV_ModStart> ) { const VP9EncoderConfig <S2SV_ModEnd> * const cfg,0
404,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
405,<S2SV_ModStart> tx_size = plane? <S2SV_ModEnd> get_uv_tx_size ( mbmi <S2SV_ModStart> get_uv_tx_size ( mbmi ) : mbmi -> tx_size <S2SV_ModEnd> ; const BLOCK_SIZE,0
406,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 8 ) ; <S2SV_ModEnd> src += src_stride",1
407,<S2SV_ModStart> row + img <S2SV_ModEnd> -> row_offset ),0
408,<S2SV_ModStart> ; } } <S2SV_ModEnd> return 0 ;,0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
410,<S2SV_ModStart> num & ( 1U << <S2SV_ModEnd> number - 1 <S2SV_ModStart> number - 1 <S2SV_ModEnd> ) ) return,0
411,"<S2SV_ModStart>, plane ) - 1 <S2SV_ModStart>, file ) > <S2SV_ModEnd> w ) return",0
412,"<S2SV_ModStart> ; uint16_t attr_len = 0 <S2SV_ModStart> ; uint16_t orig_attr_len = 0 <S2SV_ModStart> "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", avp -> length ) ; return - 1 ; } <S2SV_ModEnd> MD5_Init ( &",0
413,<S2SV_ModStart> = 1 ; <S2SV_ModEnd> return 1 ;,0
414,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0 ) ;",0
415,"<S2SV_ModStart> ; BT_DBG ( ""sock <S2SV_blank> %p, <S2SV_blank> sk <S2SV_blank> %p"" <S2SV_ModEnd>, sock,",0
416,"<S2SV_ModStart> MT_CPTYPE_PASSSALT ) { memcpy <S2SV_ModEnd> ( pass_salt,",0
417,<S2SV_ModStart> ) { goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } else <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } },0
418,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
419,<S2SV_ModStart> ) ) ; close ( gpsd_sock ) ;,0
420,"<S2SV_ModStart>, & rlen, 0",1
421,<S2SV_ModStart> * slavename ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> } # endif read_userfile ( ) ; <S2SV_ModStart> ] = 0 <S2SV_ModEnd> ; md5_init ( <S2SV_ModStart> state ) ; <S2SV_ModEnd> init_packet ( &,0
422,"<S2SV_ModStart> ; if ( _PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart> { if ( _PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name,",0
423,<S2SV_ModStart> ( buf ) <S2SV_ModEnd> && str [,0
424,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
425,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
426,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteFujiEntry ) ) ;",1
427,<S2SV_ModStart> bd_addr ) { ( void ) bd_addr ;,0
428,<S2SV_ModStart> i ; int <S2SV_ModEnd> avail ; int <S2SV_ModStart> buf -> cursor <S2SV_ModEnd> ; xmin =,0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
430,<S2SV_ModStart> * epoll = TEMP_FAILURE_RETRY ( <S2SV_ModStart> _cast_epoll ( epoll_ ),0
431,"<S2SV_ModStart> { errstr = TEMP_FAILURE_RETRY ( <S2SV_ModStart> NULL, NULL )",0
432,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_DIR_MAX : * ( size_t * ) val = ms -> dir_max ; return 0 ;,0
433,<S2SV_ModStart> offset ) { <S2SV_ModEnd> if ( offset,0
434,<S2SV_ModStart> ++ ) { if (! writer ) return GF_OUT_OF_MEM ;,0
435,<S2SV_ModStart> 17 ] ; unsigned,0
436,<S2SV_ModStart> ; if ( <S2SV_ModEnd> Prefix!= NULL,1
437,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
438,<S2SV_ModStart> ( ) ; g_hash_table_remove_all ( headers ) ;,0
439,"<S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst,",0
440,,0
441,<S2SV_ModStart> ; int hexdump = 0,0
442,"<S2SV_ModStart> mbmi, const mbmi_int_mv <S2SV_ModEnd> mvs [ 2",0
443,<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ),0
444,"<S2SV_ModStart> ; if ( skb_expand_head_safe <S2SV_ModEnd> ( skb_out,",0
445,"<S2SV_ModStart> ) return ; <S2SV_ModEnd> DEBUGMSGTL ( ( <S2SV_ModStart> entry, NULL <S2SV_ModEnd> ) ; entry",0
446,"<S2SV_ModStart> ++ ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart>, O_RDWR ) ) <S2SV_ModStart> 1 ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_KEY ) ) <S2SV_ModStart> EV_REL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_REL ) ) <S2SV_ModStart> x ++ ) TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_SYN ) )",0
447,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
448,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s,",0
449,"<S2SV_ModStart> iakerb_ctx_id_t * pctx, krb5_error_code code ) { <S2SV_ModEnd> ctx = krb5_gss_init_context",0
450,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> bitmapDC = CreateCompatibleDC",1
451,<S2SV_ModStart> ; while ( ( <S2SV_ModStart> )!= START_CODE_PREFIX ) && ( ps_stream -> u4_offset < ps_stream -> u4_max_offset ),1
452,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { ret = <S2SV_ModEnd> - EINVAL ; <S2SV_ModStart> - EINVAL ; goto out ; }",1
453,,0
454,"<S2SV_ModStart> ; int tmp ; if ( count > sizeof ( ""nnnnn\\0"" ) ) return - EINVAL",0
455,"<S2SV_ModStart>, * wp <S2SV_ModEnd> ; do { <S2SV_ModStart> 'O' )? _dl_platform <S2SV_ModEnd> : _dl_platform )",0
456,<S2SV_ModStart> decContainer_t * ) H264SwDecMalloc0 <S2SV_ModEnd> ( sizeof (,0
457,<S2SV_ModStart> drop ; } <S2SV_ModEnd> opt -> optlen,0
458,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
459,<S2SV_ModStart> goto errout ; if ( info -> stagebook >= ci -> books ) goto errout ;,0
460,<S2SV_ModStart> krb5_key_data * key_data = NULL <S2SV_ModStart> err ) ; <S2SV_ModEnd> memcpy ( key_data,0
461,"<S2SV_ModStart> Py_ssize_t idx, Py_ssize_t <S2SV_ModEnd> value ) {",0
462,<S2SV_ModStart> -> zInput = sqlite3_malloc64 <S2SV_ModEnd> ( nByte +,1
463,<S2SV_ModStart> filp ) { __sock_release <S2SV_ModEnd> ( SOCKET_I (,0
464,"<S2SV_ModStart> * orelse, string type_comment, <S2SV_ModStart> relse = orelse ; p -> v. AsyncFor. type_comment = type_comment",0
465,"<S2SV_ModStart> * param, my_bool <S2SV_ModEnd> * name )",0
466,,0
467,"<S2SV_ModStart> UINT error ; UINT16 <S2SV_ModEnd> ( s, <S2SV_ModStart> eventId ) ; UINT16 <S2SV_ModEnd> ( s,",0
468,"<S2SV_ModStart> -> socket, ""%s"", <S2SV_ModStart> -> socket, ""%s"",",1
469,"<S2SV_ModStart> struct flowi6 fl6 ; memset ( & fl6, 0, sizeof ( fl6 ) ) <S2SV_ModStart> daddr ) ; <S2SV_ModEnd> if (!",0
470,<S2SV_ModStart> ; MATLAB_KO : <S2SV_ModEnd> image = DestroyImageList,0
471,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
472,,0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
475,<S2SV_ModStart> cm ) { ( void ) cm ;,0
476,<S2SV_ModStart> cpi ) { const,0
477,<S2SV_ModStart> hp ) ; if ( retval!= 0 ) { <S2SV_ModStart> ) ; } },0
478,"<S2SV_ModStart> define EOFOp 0x07 <S2SV_ModEnd> char magick [ <S2SV_ModStart> ) ) ; if ( count!= 2 ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
479,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> sizeof ( tETH_HDR ),1
480,<S2SV_ModStart> return ret ; <S2SV_ModEnd> } ps_dec ->,0
481,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> * karg ; <S2SV_ModEnd> int iocnum ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } if (",0
482,"<S2SV_ModStart> -> columns, 3 <S2SV_ModEnd> * sizeof (",0
483,"<S2SV_ModStart> } else { fprintf ( stderr, <S2SV_ModEnd> ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", * <S2SV_ModStart> } else { fprintf ( stderr, <S2SV_ModEnd> ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", * <S2SV_ModStart> } else { fprintf ( stderr, <S2SV_ModEnd> ""Player <S2SV_blank> name <S2SV_blank> expected <S2SV_blank> after <S2SV_blank> -u"" ) ;",0
484,"<S2SV_ModStart> ; if ( buf_size < 2 ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( <S2SV_ModStart> EXIF_BYTE_ORDER_INTEL ) ; <S2SV_ModEnd> c = exif_get_short",0
485,,0
486,<S2SV_ModStart> void ) { srand ( time ( NULL ) ) ; <S2SV_ModStart> [ LOCK_SECTIONS ] ) ; srand ( time ( NULL ),0
487,<S2SV_ModStart> void ) { if (! recovery_started ) return ;,0
488,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> )",0
489,<S2SV_ModStart> = ReadBlobMSBShort ( <S2SV_ModEnd> image ) ;,0
490,<S2SV_ModStart> { WORD32 i <S2SV_ModEnd> ; WORD32 num_neg_pics,0
491,,0
492,<S2SV_ModStart> ; other = unix_peer <S2SV_ModEnd> ( sk ) <S2SV_ModStart> { if ( unix_peer <S2SV_ModEnd> ( other ) <S2SV_ModStart> = 0 ; <S2SV_ModEnd> sock_put ( other,0
493,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; sendClean ( outputbuffer ) ;",1
494,<S2SV_ModStart> ( OM_uint32 ) KRB5_BAD_MSIZE <S2SV_ModEnd> ; return GSS_S_DEFECTIVE_TOKEN <S2SV_ModStart> ( OM_uint32 ) KRB5_BAD_MSIZE <S2SV_ModEnd> ; return GSS_S_DEFECTIVE_TOKEN,0
495,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> ( args, vpx_ref_frame_t <S2SV_ModEnd> * ) ;",0
496,<S2SV_ModStart> plug ) ; <S2SV_ModEnd> put_ioctx ( ctx,0
497,,0
498,<S2SV_ModStart> s } ; <S2SV_ModEnd> uECC_word_t carry ; <S2SV_ModStart> curve ) ; if ( uECC_vli_isZero ( p ) ) { return 0 ; },0
499,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
500,<S2SV_ModStart> = buf ; pool -> free_total ++ ;,0
501,"<S2SV_ModStart> tp ; { <S2SV_ModEnd> const char hex <S2SV_ModStart> ] = ""00112233445566778899aAbBcCdDeEfF"" <S2SV_ModEnd> ; const char <S2SV_ModStart> cp ++ ; cp ++ ; <S2SV_ModStart> cp ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
503,"<S2SV_ModStart> PIX * pixc <S2SV_ModEnd>, * pixd <S2SV_ModStart> == NULL ) { <S2SV_ModStart> NULL ) ; }",0
504,"<S2SV_ModStart> = 256 ; memset ( xd, 0, sizeof ( xd ) ) ;",0
505,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> overhead = 16 <S2SV_ModStart> + 1 ; size_t <S2SV_ModEnd> size = overhead,1
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
507,"<S2SV_ModStart> i, target_bits_per_mb <S2SV_ModEnd> ; target_bits_per_mb = <S2SV_ModStart>, i, active_worst_quality <S2SV_ModEnd> ) ; if",0
508,<S2SV_ModStart> ~ TJA1101_CONFIG1_MII_MODE ; <S2SV_ModEnd> tja1101WritePhyReg ( interface,0
509,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
510,"<S2SV_ModStart> int dst_stride, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart> plane ] ; memset <S2SV_ModEnd> ( left_col, <S2SV_ModStart> + y ; memset <S2SV_ModEnd> ( left_col,",0
511,<S2SV_ModStart> end ++ ; <S2SV_ModEnd> } if (,0
512,<S2SV_ModStart> i_completed_io_list ) ; <S2SV_ModEnd> ei -> i_sync_tid,0
513,,0
514,"<S2SV_ModStart> ) ; } memset ( parsetime_error, 0, sizeof ( parsetime_error ) ) ;",0
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { q = osStrchr <S2SV_ModEnd> ( p +,1
516,<S2SV_ModStart> ; if ( i + 1 < NCH ( n ) &&,0
517,<S2SV_ModStart> KEY_FRAME ) { memcpy <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd ->,1
518,,0
519,<S2SV_ModStart> VALUE read_memory ( <S2SV_ModEnd> VALUE content ) <S2SV_ModStart> xmlSchemaPtr schema ; <S2SV_ModEnd> VALUE errors = <S2SV_ModStart> errors ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
520,"<S2SV_ModStart> ( LOG_ERR, ""Cannot <S2SV_blank> open <S2SV_blank> configuration <S2SV_blank> file"" <S2SV_ModEnd> ) ; print_syntax",0
521,<S2SV_ModStart> ; out += 3 <S2SV_ModEnd> ; } state <S2SV_ModStart> ; out += 3 <S2SV_ModEnd> ; } state,1
522,<S2SV_ModStart> err = - <S2SV_ModEnd> EALREADY ; if,0
523,<S2SV_ModStart> POLL_IN ) ; <S2SV_ModEnd> handle -> event <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
524,,0
525,"<S2SV_ModStart> { print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" <S2SV_ModEnd> ) ; if",0
526,"<S2SV_ModStart> ( interface, KSZ8851_RXFHSR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> 0 ) { <S2SV_ModEnd> if ( n <S2SV_ModStart> ( interface, KSZ8851_RXFDPR, RXFDPR_RXFPAI ) ; <S2SV_ModEnd> ksz8851ReadFifo ( interface <S2SV_ModStart> n ) ; <S2SV_ModEnd> ancillary = NET_DEFAULT_RX_ANCILLARY",0
527,"<S2SV_ModStart> * n, string type_comment, <S2SV_ModStart>, int is_async, string type_comment <S2SV_ModStart>, type_comment, type_comment,",0
528,<S2SV_ModStart> int i ; flush_tlb ( mm <S2SV_ModEnd> ) ; },0
529,<S2SV_ModStart> if ( 0!= <S2SV_ModEnd> ptr_check_result ) {,0
530,<S2SV_ModStart> ; config_free ( config ) ; config_free (,0
531,<S2SV_ModStart> row < height && row < raw_width <S2SV_ModStart> col < width && col < raw_width,0
532,<S2SV_ModStart> len < needed || len < 0,0
533,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; quantum_info = DestroyImageInfo ( clone_info ) ;",0
534,<S2SV_ModStart> ( bfqq ) bfq_idle_slice_timer_body <S2SV_ModEnd> ( bfqq ),0
535,<S2SV_ModStart> ; length += PRIMARY_DRAWING_ORDER_FIELD_BYTES <S2SV_ModEnd> [ orderInfo ->,0
536,<S2SV_ModStart>! overwrite && ( flags & RENAME_EXCHANGE ) <S2SV_ModEnd> ) { err,0
537,<S2SV_ModStart> ( plane = 1 <S2SV_ModEnd> ; plane <,0
538,"<S2SV_ModStart> * cpi, <S2SV_ModEnd> int mi_row, <S2SV_ModStart> ( cpi, x <S2SV_ModEnd>, mi_row, <S2SV_ModStart> ( cpi, x <S2SV_ModEnd>, mi_row, <S2SV_ModStart>, x, x <S2SV_ModEnd>, mi_row,",0
539,"<S2SV_ModStart> reader. superblock, false",0
540,<S2SV_ModStart> -> ranges = safe_calloc <S2SV_ModEnd> ( sizeof (,0
541,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flags & VP8_EFLAG_NO_UPD_GF <S2SV_ModStart> flags & VP8_EFLAG_FORCE_GF <S2SV_ModEnd> ) { ctx,0
542,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;",0
543,<S2SV_ModStart>! head ) <S2SV_ModEnd> return - EINVAL <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
544,"<S2SV_ModStart> * pptr, u_int <S2SV_ModEnd> len ) { <S2SV_ModStart> * pptr, u_int <S2SV_ModEnd> len ) {",0
545,"<S2SV_ModStart>, buf, sizeof ( buf ) <S2SV_ModEnd> ) ; if",0
546,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
547,<S2SV_ModStart> strlen ( constr1 <S2SV_ModEnd> ) ) ;,0
548,"<S2SV_ModStart>, sizeof ( * intfc <S2SV_ModEnd> ) ) ;",0
549,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0 ) ;",0
550,<S2SV_ModStart> ; distortion = vpx_variance16x16 <S2SV_ModEnd> ( * (,1
551,"<S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd>, ECON2_ETHEN | <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd> ) ; temp <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; temp <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; temp <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; temp <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; temp <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; temp <S2SV_ModStart> ( interface,",0
552,<S2SV_ModStart> = strlen ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header <S2SV_ModEnd> ) ; start <S2SV_ModStart> = 0 ; <S2SV_ModEnd> return ; },0
553,<S2SV_ModStart> -> alg_priv ) { <S2SV_ModStart> alg_priv ) ; },0
554,,0
555,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
556,<S2SV_ModStart> ) + 2 <S2SV_ModEnd> ; if (,0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,"<S2SV_ModStart>, * s <S2SV_ModEnd> ; int quote <S2SV_ModStart> errstr ) { <S2SV_ModEnd> char buf [",0
559,<S2SV_ModStart> * input_ptr ; unsigned,0
560,<S2SV_ModStart> ) ; } fclose ( mvs ) ;,0
561,<S2SV_ModStart> self ) { size_t <S2SV_ModEnd> i ; PyObject,1
562,,1
563,"<S2SV_ModStart> ( dbh, mysql_error <S2SV_ModEnd> ( imp_dbh ->",0
564,"<S2SV_ModStart> = 0 ; BTA_JvRfcommWrite ( slot -> rfc_handle, slot -> id ) ; <S2SV_ModStart> ( & slot_lock <S2SV_ModEnd> ) ; }",0
565,"<S2SV_ModStart> struct ieee_802_11_phdr phdr ; memset ( ppi_flags_tree, 0, sizeof ( ppi_flags_tree ) )",0
566,<S2SV_ModStart> ; sh = safe_calloc <S2SV_ModEnd> ( hdrlen +,0
567,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void nsc_encode_argb_to_aycocg (,0
568,<S2SV_ModStart> > nr_parens ) { ret = - EINVAL ; goto out_free ; } <S2SV_ModEnd> * ( ++,1
569,,0
570,"<S2SV_ModStart> TX_MODE read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r )",1
571,,0
572,,0
573,<S2SV_ModStart> pSelect -> pSrc ; assert ( pWalker -> pParse -> db -> mallocFailed ),0
574,"<S2SV_ModStart> = svc_create ( <S2SV_ModEnd> NFS4_CALLBACK_BUFSIZE, sv_ops",0
575,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
576,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
577,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
578,"<S2SV_ModStart> do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> s, 0 )",1
579,<S2SV_ModStart> ( xIter = xml_get_attr <S2SV_ModEnd> ( xml ),0
580,<S2SV_ModStart> <S2SV_null> static const SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> return ( const SvcInternal_t <S2SV_ModEnd> * ) svc_ctx,1
581,<S2SV_ModStart> ; } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
582,<S2SV_ModStart> [ 80 ] = { 0 },0
583,"<S2SV_ModStart> ( buf, <S2SV_ModEnd> 0 ) ;",0
584,"<S2SV_ModStart> ( ) { int <S2SV_ModEnd> directory_table_end, table_start <S2SV_ModStart> == 0 ) { <S2SV_ModStart> return FALSE ; } <S2SV_ModStart> == FALSE ) { <S2SV_ModStart> return FALSE ; } <S2SV_ModStart> == FALSE ) { <S2SV_ModStart> return FALSE ; } <S2SV_ModStart> == FALSE ) { <S2SV_ModStart> return FALSE ; } <S2SV_ModStart> == FALSE ) { <S2SV_ModStart> return FALSE ; } <S2SV_ModStart> == FALSE ) { <S2SV_ModStart> return FALSE ; }",0
585,"<S2SV_ModStart> rule * rule, int flags <S2SV_ModStart> count = 0 ; env -> flags &= ~ KEEPENV",0
586,<S2SV_ModStart> -> seg ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
587,,0
588,<S2SV_ModStart> S_IRUSR | S_IWUSR <S2SV_ModEnd> ) ; if,0
589,<S2SV_ModStart> ; } # else ( void ) cpi ; #,1
590,,0
591,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = lookup_attr_id <S2SV_ModEnd> ( obj,",0
592,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
593,"<S2SV_ModStart>! nfp_abm_u32_check_knode ( alink <S2SV_ModEnd>, knode, <S2SV_ModStart> ) goto err_delete <S2SV_ModEnd> ; list_add (",0
594,<S2SV_ModStart> ) ; } <S2SV_ModEnd> stream -> config <S2SV_ModStart> stats ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
595,<S2SV_ModStart> { if ( <S2SV_ModEnd>! flatpak_openat_noatime (,0
596,"<S2SV_ModStart> data_end ) { VP9_COMMON <S2SV_ModEnd> * const cm <S2SV_ModStart>, tile_col ; <S2SV_ModEnd> const int aligned_cols <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> sizeof ( * cm -> above_context <S2SV_ModEnd> ) * aligned_cols",0
597,<S2SV_ModStart> vp9_decoder_create ( const VP9D_CONFIG <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> ) { VP9_COMMON <S2SV_ModEnd> * const cm <S2SV_ModStart> = 1 ; <S2SV_ModEnd> vp9_rtcd ( ) <S2SV_ModStart> current_video_frame = 0 <S2SV_ModEnd> ; pbi -> <S2SV_ModStart> = 1 ; <S2SV_ModEnd> vp9_init_dequantizer ( cm,0
598,<S2SV_ModStart> ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF <S2SV_ModEnd> ) ; },0
599,<S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> || opt -> opt.,1
600,"<S2SV_ModStart> tok ( struct vpx_token <S2SV_ModEnd> * tokens, <S2SV_ModStart> tok, const vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> do { const vpx_tree_index <S2SV_ModEnd> j = tree",0
601,"<S2SV_ModStart> ( img ) { <S2SV_ModStart> ctx, img ) ; } <S2SV_ModEnd> pick_quickcompress_mode ( ctx",0
602,"<S2SV_ModStart>, & len, 0",1
603,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
604,"<S2SV_ModStart> rc, const VP9EncoderConfig <S2SV_ModEnd> * oxcf )",0
605,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
606,,0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
608,<S2SV_ModStart> range_max ) { unsigned,0
609,"<S2SV_ModStart> || strchr ( ""!#$%&\'*+^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> || strchr ( ""!#$%&\'*+^_`|~"" <S2SV_ModEnd>, c )",0
610,<S2SV_ModStart> packet -> http_contentlen <S2SV_ModEnd>. ptr =,0
611,"<S2SV_ModStart>, y, MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> x ), MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> - y ) <S2SV_ModEnd>, exception )",0
612,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL )",0
613,<S2SV_ModStart> action ) { ( void ) w ;,0
614,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; sendClean ( outputbuffer ) ;",1
615,"<S2SV_ModStart> return FALSE ; WLog_VRB <S2SV_ModEnd> ( AUTODETECT_TAG,",0
616,<S2SV_ModStart> ]. y_stride <S2SV_ModEnd> ; if (,0
617,<S2SV_ModStart> # if CONFIG_MULTITHREAD <S2SV_ModEnd> vp8_decoder_remove_threads ( pbi,1
618,,0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,,0
621,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
622,"<S2SV_ModStart> tx_size, vpx_coeff_stats <S2SV_ModEnd> coef_branch_ct ) { <S2SV_ModStart> tx_size ] ; vpx_coeff_count <S2SV_ModEnd> * coef_counts =",0
623,<S2SV_ModStart> { } ; <S2SV_ModEnd> r = ioctl,0
624,<S2SV_ModStart> <S2SV_null> <S2SV_null> static void <S2SV_ModEnd> su3000_frontend_attach ( struct <S2SV_ModStart> 0 } ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
625,"<S2SV_ModStart> * iface, vpx_codec_enc_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> else if ( <S2SV_ModEnd> flags & VPX_CODEC_USE_XMA <S2SV_ModStart> caps & VPX_CODEC_USE_XMA <S2SV_ModEnd> ) res =",0
626,,0
627,"<S2SV_ModStart> ; mungspaces ( strncpy <S2SV_ModEnd> ( buf,",0
628,<S2SV_ModStart> * cJSON_CreateFloatArray ( const,0
629,,0
630,,0
631,,0
632,<S2SV_ModStart> -> error_code ) return <S2SV_ModEnd> error -> has_detail <S2SV_ModStart> error -> has_detail <S2SV_ModEnd> ; return error,0
633,<S2SV_ModStart> pocstruct_t * ps_prev_poc <S2SV_ModEnd> ; ps_cur_slice =,0
634,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet ),0
635,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int getnum (,0
636,<S2SV_ModStart> GCSpropagate ) ; <S2SV_ModEnd> atomic ( L,0
637,<S2SV_ModStart> 0 ; else * cold = 0 ;,0
638,<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart> ) return NULL <S2SV_ModEnd> ; s_read ( <S2SV_ModStart> buffer ) ; <S2SV_ModEnd> s_write ( c,0
639,"<S2SV_ModStart> struct sockaddr_in addr <S2SV_ModEnd> ; char * <S2SV_ModStart> = 0 ; <S2SV_ModEnd> int ret_ga ; <S2SV_ModStart> = {. <S2SV_ModEnd> dispatch = cib_remote_dispatch <S2SV_ModStart> = cib_remote_dispatch,. <S2SV_ModEnd> destroy = cib_remote_connection_destroy <S2SV_ModStart> = cib_remote_connection_destroy,. <S2SV_ModEnd> destroy = cib_remote_connection_destroy",0
640,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi,",0
641,<S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( & bp [ i ] ) ;,0
642,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> return rc ;",0
643,,0
644,"<S2SV_ModStart> { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC <S2SV_blank> marker\\n"" <S2SV_ModEnd> ) ; }",0
645,,0
646,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> - m + vpx_read_bit <S2SV_ModEnd> ( r )",1
647,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
648,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> ( REFERENCE_MODE ) vpx_read <S2SV_ModEnd> ( r,",0
649,"<S2SV_ModStart>! stream ) { <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; return NULL ; }",0
650,<S2SV_ModStart> nd_opt_len ) ; ND_TCHECK ( op -> nd_opt_len ) ;,0
651,<S2SV_ModStart> re_ast ) -> parent = NULL ; ( * re_ast ) ->,0
652,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> ret = dict_lookup,0
653,<S2SV_ModStart> ; tok -> type_comment = 0 ; tok ->,0
654,<S2SV_ModStart> maxBitrate ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
655,<S2SV_ModStart> ( dpbSize ) <S2SV_ModEnd> ; ALLOCATE (,0
656,<S2SV_ModStart> = 0 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; <S2SV_ModStart> (! sock <S2SV_ModEnd> ) OE_RAISE_ERRNO ( <S2SV_ModStart> ( addrlen ) { <S2SV_ModStart> ) ; } },0
657,,1
658,"<S2SV_ModStart> FALSE ; } if (! <S2SV_ModStart>, s ) ) return FALSE",1
659,,0
660,,0
661,<S2SV_ModStart> address ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
662,<S2SV_ModStart> pcmk_ok ) { <S2SV_ModEnd> } if ( <S2SV_ModStart> pcmk_ok ) { <S2SV_ModEnd> } if ( <S2SV_ModStart> pcmk_ok ) { <S2SV_ModEnd> } if (,0
663,<S2SV_ModStart> ; msg. msg_name <S2SV_ModEnd> = ( struct <S2SV_ModStart> ; msg. msg_namelen <S2SV_ModEnd> = sizeof (,0
664,"<S2SV_ModStart> } ; int num00 <S2SV_ModEnd>, tmp_err, <S2SV_ModStart> ] ; int <S2SV_ModEnd> new_mv_mode_penalty = 256 <S2SV_ModStart>, step_param, x -> sadperbit16 <S2SV_ModEnd>, & num00 <S2SV_ModStart>, & num00 <S2SV_ModEnd> ) ; if",0
665,<S2SV_ModStart> = 0 ; if ( h -> addr ),0
666,,0
667,"<S2SV_ModStart> one, offset = 0",0
668,<S2SV_ModStart> ( r = <S2SV_ModEnd> sshbuf_put_cstring ( b,1
669,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
670,"<S2SV_ModStart> client = user_data ; memset ( client, 0, sizeof ( client ) )",0
671,<S2SV_ModStart> * uv ; if (! thread -> openupval ) { <S2SV_ModStart> = thread ; },0
