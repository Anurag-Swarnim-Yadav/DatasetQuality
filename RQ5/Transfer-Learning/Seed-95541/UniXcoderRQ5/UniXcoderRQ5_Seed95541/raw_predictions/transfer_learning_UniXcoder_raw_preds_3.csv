,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
1,"<S2SV_ModStart> skb ) ; fptr = rcu_dereference_protected ( skb -> ip_summed, skb_tnl_header_len ( skb ) ) ; if ( fptr == NULL ) goto out ;",0
2,<S2SV_ModStart> * writer = <S2SV_ModEnd> gf_list_get ( writers,0
3,"<S2SV_ModStart> item ) { return cJSON_GetArrayItem ( array, <S2SV_ModEnd> array -> child <S2SV_ModStart> array -> child, item ) <S2SV_ModEnd> ; } <S2SV_null>",0
4,"<S2SV_ModStart>, u64 nr <S2SV_ModEnd>, struct pt_regs <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",0
5,,0
6,"<S2SV_ModStart> fdct16 ( const tran_low_t in [ 16 ], tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> ] ) { tran_low_t step1 [ 8 ] ; tran_low_t step2 [ 8 ] ; tran_low_t step3 [ 8 ] ; tran_low_t step3 [ 8 ] ; tran_low_t input [ 8 ] ; tran_low_t input [ 8 ] ; tran_low_t <S2SV_ModEnd> temp1, temp2 <S2SV_ModStart> ; { int step1 [ 8 ] ; tran_low_t step2 [ 8 ] ; tran_low_t step3 [ 8 ] ; tran_low_t step3 [ 8 ] ; tran_low_t <S2SV_ModEnd> temp1, temp2 <S2SV_ModStart> ; { int step1 [ 8 ] ; tran_low_t step3 [ 8 ] ; tran_low_t step3 [ 8 ] ; tran_low_t step3 [ 8 ] ; tran_low_t <S2SV_ModEnd> temp1, temp2 <S2SV_ModStart> ; { int step1 [ 8 ] ; tran_low_t step3 [ 8 ] ; tran_low_t step3 [ 8 ] ; tran_low_t step3 [ 8 ]",0
7,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> parse_ciff ( save,0
8,,0
9,"<S2SV_ModStart>. left ; luaL_pushboolean <S2SV_ModEnd> ( L,",0
10,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ++ i ) vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( usehp ) vpx_write <S2SV_ModEnd> ( w,",1
11,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } <S2SV_ModStart> ( ) ) { <S2SV_ModStart> ( ) ; },0
12,"<S2SV_ModStart>, ""%04x, <S2SV_blank> "", EXTRACT_16BITS <S2SV_ModEnd> ( ptr ) <S2SV_ModStart>, ""%04x <S2SV_blank> "", EXTRACT_16BITS <S2SV_ModEnd> ( ptr )",0
13,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> construct_get_dest_keyring ( struct <S2SV_ModStart> * authkey ; if ( dest_keyring ) { key_get ( dest_keyring ) ; <S2SV_ModEnd> key_get ( dest_keyring <S2SV_ModStart> dest_keyring ) ; return 0 ; } <S2SV_ModEnd> switch ( cred <S2SV_ModStart> ( dest_keyring ) { return 0 ; } <S2SV_ModEnd> } case KEY_REQKEY_DEFL_THREAD_KEYRING <S2SV_ModStart> ) ; } return 0 ;,0
14,<S2SV_ModStart> = create_spnego_ctx ( 0,0
15,<S2SV_ModStart> ; tm = localtime_safe <S2SV_ModEnd> ( & t,0
16,"<S2SV_ModStart> length ) ; memcpy <S2SV_ModEnd> ( hashed,",0
17,<S2SV_ModStart> e == p || e - p,0
18,"<S2SV_ModStart> ) &&! inode_capable <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! inode_capable <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! inode_capable <S2SV_ModEnd> ( inode,",0
19,<S2SV_ModStart> = 0 ; if (! <S2SV_ModStart> & timeout ) ) return false,0
20,"<S2SV_ModStart> int detect_transition_to_still ( TWO_PASS <S2SV_ModEnd> * twopass, <S2SV_ModStart> = 0 ; TWO_PASS <S2SV_ModEnd> * position = <S2SV_ModStart> j ; const TWO_PASS <S2SV_ModEnd> * position = <S2SV_ModStart> * position = twopass -> stats_in ; FIRSTPASS <S2SV_ModEnd> tmp_next_frame ; for <S2SV_ModStart> ) break ; <S2SV_ModEnd> reset_fpf_position ( twopass",0
21,<S2SV_ModStart> ; if ( <S2SV_ModEnd> size <= i_size_read,0
22,"<S2SV_ModStart> alg ) { <S2SV_ModEnd> if (! <S2SV_ModStart> CRYPTO_ALG_NEED_FALLBACK ) ) request_module <S2SV_ModEnd> ( ""%s-all"",",0
23,<S2SV_ModStart> = GIT_PKT_NG ; if ( len < 4 ) return - 1 ; <S2SV_ModStart> += 3 ; if ( len < 4 ) return - 1 ; <S2SV_ModStart> = '\\0' ; if ( len < 4 ) return - 1 ; <S2SV_ModStart> = '\\0' ; if ( len < 4 ) return - 1 ; <S2SV_ModStart> = '\\0' ; if ( len < 4 ) return - 1 ;,0
24,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> nego_process_negotiation_request ( rdpNego <S2SV_ModStart> UINT16 length ; if (! Stream_IsSafe ( s ) ) { WLog_ERR ( TAG, ""Not <S2SV_blank> enough <S2SV_blank> process_negotiation_request"" ) ; return - 1 ; } <S2SV_ModStart> = NEGO_STATE_FINAL ; return 0 ;",0
25,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) return AVERROR_EOF ; if (,0
26,"<S2SV_ModStart> mntent, path, true",0
27,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } io -> io_cleanup = mem_cleanup ;,1
28,,0
29,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return ret?,0
30,<S2SV_ModStart> vpx_codec_enc_cfg_map_t * map ; if ( cfg == NULL ) return VPX_CODEC_INVALID_PARAM,0
31,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
32,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
33,,0
34,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_EWRPTL, ENC28J60_EWRPTH, ENC28J60_EWRPTH <S2SV_ModEnd> ) ; enc28j60WriteBuffer <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRTS <S2SV_ModEnd> ) ; return",0
35,<S2SV_ModStart> ; value = ast2obj_int <S2SV_ModEnd> ( o -> <S2SV_ModStart> ; value = ast2obj_int <S2SV_ModEnd> ( o ->,0
36,"<S2SV_ModStart> page && ( file_access <S2SV_ModEnd> ( page, <S2SV_ModStart> ) ) { file_access <S2SV_ModEnd> ( page, <S2SV_ModStart> page && ( file_access <S2SV_ModEnd> ( page,",0
37,"<S2SV_ModStart> low_var_thresh, int * <S2SV_ModStart> int mb_rows = * <S2SV_ModStart> source -> y_width <S2SV_ModEnd> ; int mb_cols <S2SV_ModStart> int mb_cols = * <S2SV_ModStart> -> pp_limits_buffer ; <S2SV_ModEnd> ( void ) <S2SV_ModStart> ) flag ; memset <S2SV_ModEnd> ( limits, <S2SV_ModStart> 16 * mb_cols, 16 * mb_cols",0
38,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache * ext4_mb_cache, struct mb2_cache * ext4_mb_cache <S2SV_ModEnd>, struct buffer_head <S2SV_ModStart> ) ; struct mb2_cache * ext4_mb_cache = ext4_mb_cache ; struct <S2SV_ModStart> int error ; error = mb2_cache_entry_insert ( ext4_mb_cache, bh -> b_bdev, bh -> b_blocknr, hash ) ; if ( error ) { mb2_cache_entry_free ( ext4_mb_cache <S2SV_ModEnd>, bh -> <S2SV_ModStart> bh -> b_blocknr <S2SV_ModEnd> ) ; if <S2SV_ModStart> error ) { <S2SV_ModEnd> if ( error <S2SV_ModStart> hash ) ; mb2_cache_entry_release ( ext4_mb_cache <S2SV_ModEnd> ) ; }",0
39,"<S2SV_ModStart> ) ; return r_socket_http_answer <S2SV_ModEnd> ( s,",0
40,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> ip_options_t <S2SV_ModEnd> ip_options_get_from_user ( struct <S2SV_ModStart> net, struct ip_options_t <S2SV_ModEnd> * * optp <S2SV_ModStart> optlen ) { ip_options_t <S2SV_ModEnd> * opt = <S2SV_ModStart> ; if ( <S2SV_ModEnd> copy_from_user ( opt",0
41,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
42,,0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode",0
44,,0
45,<S2SV_ModStart> || dp == ( unsigned char ),0
46,"<S2SV_ModStart>, size_t * acl_len <S2SV_ModEnd> ) { __be32 <S2SV_ModStart> { __be32 * acl_len = req -> rq_rcv_buf. head <S2SV_ModEnd> ; uint32_t attrlen <S2SV_ModStart> int status ; <S2SV_ModEnd> if ( ( <S2SV_ModStart>!= 0 ) return - EIO ; * acl_len = 0 ; * acl_len = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart>!= 0 ) return - EIO <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( xdr, * acl_len <S2SV_ModEnd>, & savep <S2SV_ModStart> * acl_len = acl_len <S2SV_ModEnd> ; } else",0
47,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
48,"<S2SV_ModStart> { owner = ssplit <S2SV_ModEnd> ( auth, <S2SV_ModStart> } group = ssplit <S2SV_ModEnd> ( tok,",1
49,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( addr <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; <S2SV_ModEnd> if ( addr,0
50,<S2SV_ModStart> int res ; size_t <S2SV_ModEnd> indexes = SQUASHFS_LOOKUP_BLOCKS <S2SV_ModStart> = SQUASHFS_LOOKUP_BLOCKS ( SQUASHFS_LOOKUP_BLOCK_BYTES ( SQUASHFS_LOOKUP_BLOCK_BYTES ( SQUASHFS_LOOKUP_BLOCK_BYTES ( SQUASHFS_LOOKUP_BLOCK_BYTES ( SQUASHFS_LOOKUP_BLOCK_BYTES ( SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ) ) ) ) <S2SV_ModEnd> ) ; long <S2SV_ModStart> long export_index_table [ SQUASHFS_LOOKUP_BLOCK_BYTES ( SQUASHFS_LOOKUP_BLOCK_BYTES ( SQUASHFS_LOOKUP_BLOCK_BYTES ( SQUASHFS_LOOKUP_BLOCK_BYTES ( SQUASHFS_LOOKUP_BLOCK_BYTES ( SQUASHFS_LOOKUP_BLOCK_BYTES ( SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ) ) ) ) <S2SV_ModEnd> ] ; res,0
51,<S2SV_ModStart> ; } else { <S2SV_ModStart> p1 ) ; },0
52,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> for ( argi <S2SV_ModStart> continue ; } <S2SV_ModEnd> } else if,0
53,<S2SV_ModStart> } if ( c -> opt -> option. client || c -> opt -> opt -> redirect_addr. names ) return 1 ; if (,0
54,"<S2SV_ModStart> ; if ( memcmp <S2SV_ModEnd> ( cmac,",0
55,,0
56,,0
57,<S2SV_ModStart> err_free_buf ; } <S2SV_ModEnd> dev_dbg ( &,0
58,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
59,"<S2SV_ModStart> * dir = ""/etc"" <S2SV_ModEnd> ; if (",0
60,<S2SV_ModStart> ; ps_codec -> <S2SV_ModEnd> s_parse. s_bitstrm,0
61,,0
62,,0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,<S2SV_ModStart> ) get_block = ocfs2_dio_get_block <S2SV_ModEnd> ; else get_block <S2SV_ModStart> else get_block = ocfs2_dio_get_block <S2SV_ModEnd> ; return __blockdev_direct_IO,0
65,"<S2SV_ModStart> ( f, ""%79s <S2SV_blank> %[^\\n]"" <S2SV_ModEnd>, def,",0
66,"<S2SV_ModStart> n ) { return fstring_compile_expr ( expr_start, expr_end, expr_end, c, n ) <S2SV_ModEnd> ; } <S2SV_null>",0
67,"<S2SV_ModStart> string ) { return cJSON_GetObjectItem ( object, string, string ) <S2SV_ModEnd> ; } <S2SV_null>",0
68,<S2SV_ModStart> size ) ; if ( px -> ft ) { <S2SV_ModStart> = px ; },0
69,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""CRCErr=%u <S2SV_blank> "", ( val_h << 16 ) + val_l ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""HardOver=%u <S2SV_blank> "", ( val_h << 16 ) + val_l ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""BufOver=%u <S2SV_blank> "", ( val_h << 16 ) + val_l ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""Timeout=%u <S2SV_blank> "", ( val_h << 16 ) + val_l ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AlignErr=%u <S2SV_blank> "", ( val_h << 16 ) + val_l ) ) ; return ; }",0
70,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
71,<S2SV_ModStart> const buffers [ 4 <S2SV_ModEnd> ] = { <S2SV_ModStart> int strides [ 4 <S2SV_ModEnd> ] = {,0
72,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; for (,1
73,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
74,"<S2SV_ModStart> _ipmi_destroy_user ( user ) ; kref_put ( & user -> refcount, free_user",0
75,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> sl = strlen,1
76,,0
77,<S2SV_ModStart> NULL ; } if ( dst_state -> frame [ i ] ),0
78,,0
79,"<S2SV_ModStart> if ( n >= <S2SV_ModEnd> maxn ) SWF_error <S2SV_ModStart> WF_error ( ""Action <S2SV_blank> overflow!!"" ) ; if ( n >= maxn ) SWF_error ( ""Action <S2SV_blank> overflow!!",0
80,<S2SV_ModStart> prep ) ) return ( - 1 ) ; <S2SV_ModEnd> n = EXTRACT_32BITS,0
81,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
82,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> addModuleArgument ( sqlite3 <S2SV_ModStart> zArg ) { size_t <S2SV_ModEnd> nModuleArg ) ; <S2SV_ModStart> nModuleArg ) ; size_t <S2SV_ModEnd> * azModuleArg ;,0
83,<S2SV_ModStart> i ] = ( int ) <S2SV_ModStart> i ] = ( int ),0
84,<S2SV_ModStart> ) p += ( int ) <S2SV_ModStart> ) p += ( int ),0
85,,0
86,,1
87,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
88,<S2SV_ModStart> newDataLength || diffPtr + x > diffBlockLength || <S2SV_ModEnd> extraPtr + y,0
89,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart>, fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
90,<S2SV_ModStart> image ) ; status = MagickFalse ;,0
91,<S2SV_ModStart> data ) { ( void ) data ;,0
92,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
93,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
94,<S2SV_ModStart> mv. as_int <S2SV_ModEnd> ; if (,0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
97,<S2SV_ModStart> msicap ; pci_populate_msicap <S2SV_ModEnd> ( & msicap,0
98,<S2SV_ModStart> } if ( <S2SV_ModEnd> cmd -> proc,0
99,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( cfg -> <S2SV_ModStart> g_lag_in_frames > 1 && <S2SV_ModEnd> cfg -> g_pass <S2SV_ModStart> -> g_pass!= VPX_RC_ONE_PASS <S2SV_ModEnd> ) ERROR (,0
100,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> vp9_init_plane_quantizers ( cpi,0
101,<S2SV_ModStart> info -> si_code > <S2SV_ModEnd> 0 ) return <S2SV_ModStart> return - EPERM <S2SV_ModEnd> ; return do_send_specific,0
102,<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; if ( ptr -> size < 8 ) return GF_ISOM_INVALID_FILE ;,0
103,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
104,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> { if ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> ( state -> fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> ( state -> fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> ) ; } fmode <S2SV_ModEnd> = mode ;",0
105,,0
106,<S2SV_ModStart> 0 ; } memcpy <S2SV_ModEnd> ( elem.,0
107,<S2SV_ModStart> ( unsigned ) JPC_QCX_GETEXPN <S2SV_ModEnd> ( qcd ->,0
108,<S2SV_ModStart> == 8 ) && c -> format!= CHUNKY,1
109,<S2SV_ModStart> ) ; } ND_TCHECK ( ndo -> ndo_vflag ) ;,0
110,"<S2SV_ModStart> image_noffset ) { <S2SV_ModEnd> char * name <S2SV_ModStart> * name = fit_get_name ( fit, noffset, NULL ) ; if (! name ) { err_msg = ""Invalid <S2SV_blank> name <S2SV_blank> for <S2SV_blank> \'%s\'\\n"", err_msg ) ; goto error ; } name =",0
111,<S2SV_ModStart> ; if ( kzalloc ( <S2SV_ModEnd> state -> rx_kfifo,0
112,"<S2SV_ModStart> * iface, vpx_codec_dec_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> ; res = VPX_CODEC_OK <S2SV_ModEnd> ; if (",0
113,<S2SV_ModStart> ; value |= TJA1100_CONFIG1_MII_MODE_RMII_25 <S2SV_ModEnd> ; tja1100WritePhyReg (,0
114,,0
115,<S2SV_ModStart> & VPX_CODEC_USE_XMA ) || <S2SV_ModEnd> ( iface -> <S2SV_ModStart> & VPX_CODEC_CAP_XMA ) || <S2SV_ModEnd> ( iface ->,0
116,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
117,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ;RESERVE_SPACE",0
118,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ) ; return 0 <S2SV_ModStart> break ; } return error <S2SV_ModEnd> ; } <S2SV_null>,1
119,<S2SV_ModStart> ; } } if ( buffsize < 0 ) { return - 1 ; },0
120,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
121,<S2SV_ModStart> goto trunc ; ND_TCHECK <S2SV_ModEnd> ( lshp -> <S2SV_ModStart> ls_type ) ; ND_TCHECK <S2SV_ModEnd> ( lshp ->,0
122,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { ret = - EIO ; break ; } <S2SV_ModEnd> * obuf =",0
123,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
124,<S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ),0
125,"<S2SV_ModStart> * costs, vpx_tree <S2SV_ModEnd> tree, const <S2SV_ModStart> tree, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> ) { const vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> ) ; const vpx_tree_index <S2SV_ModEnd> ii = tree",1
126,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
127,"<S2SV_ModStart> c, 0, true",0
128,,0
129,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> return flags &,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
131,,0
132,<S2SV_ModStart> ; if ( sdslen ( c -> querybuf ) > 0 &&,0
133,<S2SV_ModStart> get_blocks_flags = EXT4_GET_BLOCKS_CREATE <S2SV_ModEnd> ; blks =,0
134,"<S2SV_ModStart> ; size_t canonnamelen <S2SV_ModEnd> ; if ( <S2SV_ModStart>, handle, <S2SV_ModEnd> p -> ai_flags <S2SV_ModStart> p -> ai_flags <S2SV_ModEnd>, & p <S2SV_ModStart> p -> ai_family <S2SV_ModEnd>, & p <S2SV_ModStart> p -> ai_socktype <S2SV_ModEnd>, p -> <S2SV_ModStart> p -> ai_protocol <S2SV_ModEnd>, p -> <S2SV_ModStart> } if ( <S2SV_ModEnd>! ( p <S2SV_ModStart> p -> ai_addrlen <S2SV_ModEnd> ) { ret",0
135,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
136,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
137,"<S2SV_ModStart> __u16 size, const",0
138,"<S2SV_ModStart> * body, const <S2SV_ModStart> = body ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
139,"<S2SV_ModStart> * src, <S2SV_ModEnd> unsigned int flags <S2SV_ModStart> >> 4 ; <S2SV_ModEnd> if ( ctx <S2SV_ModStart> write_idx ) ; <S2SV_ModEnd> buf -> ts_start <S2SV_ModStart> buf -> ts_start = ts_start ; buf -> ts_end = ts_end ; buf -> ts_end = ts_end ; <S2SV_ModEnd> return 0 ;",0
140,,0
141,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } break ;,0
142,"<S2SV_ModStart> int a = getnum <S2SV_ModEnd> ( fmt,",0
143,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImage ( image ) ) ; }",0
144,<S2SV_ModStart>! ctx ||! ctx -> priv ||,0
145,"<S2SV_ModStart> inode * inode, struct super_block * sb <S2SV_ModStart> inode ) ; <S2SV_ModEnd> inode -> i_ino",0
146,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> ) ; } send ( outputbuffer ) ;",0
147,<S2SV_ModStart> self ) { if ( self ),0
148,<S2SV_ModStart> && i < ( int ),0
149,"<S2SV_ModStart> ; if ( _PyObject_HasAttrId <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; Py_ssize_t i <S2SV_ModEnd> ; if ( <S2SV_ModStart> ++ ) { <S2SV_ModEnd> res = obj2ast_stmt <S2SV_ModStart>, i, _PyObject_GetAttrId ( obj, & PyId_type_ignores ) <S2SV_ModEnd> ) ; }",0
150,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
151,"<S2SV_ModStart> msg ) ; <S2SV_ModEnd> err = verify_compat_iovec <S2SV_ModStart> ; } else { <S2SV_ModStart> ; } else { err = verify_compat_iovec ( msg_sys, iov, & addr, VERIFY_WRITE ) ; } } <S2SV_ModEnd> if ( sock",0
152,<S2SV_ModStart> ) ; struct buffer_head * dibh = mp -> mp_bh [ 0 ] ; struct <S2SV_ModStart> end_of_metadata = height <S2SV_ModEnd> ; int eob,0
153,<S2SV_ModStart> -> codec -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> -> codec -> codec_interface <S2SV_ModEnd> ( ) ),0
154,<S2SV_ModStart> ) ) ; if ( ctxt -> insert ) ctxt -> insert = NULL ;,0
155,"<S2SV_ModStart> { if ( safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> { if ( safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> { if ( safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ) ; } safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ) ; } safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ) ; } safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ) ; } safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ) ; } safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ) ; } safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ) ; } safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ) ; } safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ) ; } safe_copy_file ( ""/etc/skel/.cshrc"", fname, u",0
156,<S2SV_ModStart> msix_tab_size ) { <S2SV_ModEnd> bzero ( msixcap,1
157,<S2SV_ModStart> ; if ( <S2SV_ModEnd> js_regexec ( re,0
158,<S2SV_ModStart> : if ( Str_val <S2SV_ModEnd> ( Field (,0
159,"<S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; ksz8851WriteReg <S2SV_ModStart> ( interface, KSZ8851_ISR ) ; if ( ( isr & ISR_LCIS )!= 0 ) { ier &= ~ IER_LCIE ; interface -> nicEvent = TRUE ; flag |= osSetEventFromIsr ( & netEvent ) ; } if ( ( isr & ISR_TXIS )!= 0 ) { ksz8851WriteReg ( interface, KSZ8851_ISR, ISR_TXIS ) ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } } if ( ( isr & ISR_RXIS )!= 0 ) { ier &= ~ IER_RXIE ; interface -> nicEvent = TRUE ; flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } if ( ( isr & ISR_RXIS )!= 0 ) { ier &= ~ IER_RXIE ; interface -> nicEvent =",0
160,"<S2SV_ModStart> void encode_quantization ( vpx_write_bit_buffer <S2SV_ModEnd> * cm, <S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
161,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> ]. fd ),0
162,,0
163,<S2SV_ModStart> ( ) ; t1_getline ( ) ;,0
164,,0
165,"<S2SV_ModStart> key_ref ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) { ret = - ENOKEY ; goto error2 ; }",1
166,,0
167,<S2SV_ModStart> var_off ) ; if (! src_known ) return - EINVAL ;,0
168,<S2SV_ModStart> ; if ( <S2SV_ModEnd>! cfile ),0
169,<S2SV_ModStart> ; if ( sk -> sk_uid!= sk -> sk_uid ) goto out ; if (,0
170,,0
171,<S2SV_ModStart> = new_cols ; <S2SV_ModEnd> if ( new_cols,0
172,"<S2SV_ModStart> * literal_start = str [ end ] <S2SV_ModEnd> ; const char <S2SV_ModStart> const char * literal_end = * str <S2SV_ModEnd> ; int in_named_escape <S2SV_ModStart> ; for ( int i = 0 ; i < end ; i ++ ) { char ch = * str ; if (! in_named_escape && ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( in_named_escape && ch == '}' ) { in_named_escape = 0 ; } else if ( in_named_escape && ch == '}' ) { in_named_escape = 0 ; } else if ( ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } if ( ch == '}' ) { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; return -",0
173,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> dump_dir * dd,0
174,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
176,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if",1
177,,0
178,"<S2SV_ModStart> u_int8_t state ; memset ( & _dh, 0, sizeof ( _dh ) ) ;",0
179,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int ip_options_get_finish (,0
180,<S2SV_ModStart> connection == NULL || connection == NULL,0
181,<S2SV_ModStart> * findalldevs_if ; <S2SV_ModEnd> if ( rpcapd_discard <S2SV_ModStart> 0 ; } for ( d = alldevs ; d!= NULL ; d = d -> next ) { <S2SV_ModEnd> if ( d <S2SV_ModStart> -> description ) { <S2SV_ModEnd> if ( d <S2SV_ModStart> -> name ) { <S2SV_ModEnd> if ( d <S2SV_ModStart> -> name ) { <S2SV_ModEnd> plen += ( <S2SV_ModStart> -> name ) } } } <S2SV_ModEnd> for ( address,0
182,"<S2SV_ModStart>, client_uid, DEFAULT_DUMP_DIR_MODE <S2SV_ModEnd> ) ; if",0
183,<S2SV_ModStart> -> columns - 3 <S2SV_ModEnd> ) ; x <S2SV_ModStart> ; x += 3 <S2SV_ModEnd> ) { index,0
184,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
185,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
186,"<S2SV_ModStart>, 1 ) && in_cksum ( vec, 1 )",0
187,"<S2SV_ModStart>! ptrace_has_cap ( task <S2SV_ModEnd> -> user_ns,",0
188,<S2SV_ModStart>  maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t,0
189,"<S2SV_ModStart> = 1 ; ihevcd_parse_user_data_registered_itu_t_t <S2SV_ModEnd> ( ps_codec,",0
190,,0
191,"<S2SV_ModStart> * name, my_off_t <S2SV_ModEnd> rep_quick ) {",0
192,<S2SV_ModStart> } pairs = palloc0 <S2SV_ModEnd> ( pcount *,0
193,"<S2SV_ModStart> val ) ; if ( <S2SV_ModStart>, val ) < 0 ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> command"", r -> name )",0
194,,0
195,"<S2SV_ModStart> vp9_fht16x16_c ( const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> 256 ] ; tran_low_t <S2SV_ModEnd> * outptr = <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16 <S2SV_ModStart> ++ j ) out <S2SV_ModEnd> [ j *",0
196,,0
197,"<S2SV_ModStart> '\\0' ) ; if (! filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } char * temp_filename = osi_calloc ( strlen ( filename ) + 5 ) ; if (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } for ( const list_node_t * enode = list_begin ( section -> entries ) ; enode!= list_end ( enode ) ; enode = list_next ( enode ) ) { const entry_t * entry = ( const entry_t * ) list_node ( enode ) ; fprintf ( fp, ""%s <S2SV_blank>",0
198,"<S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ;",0
199,"<S2SV_ModStart>, target, NULL,",0
200,"<S2SV_ModStart> ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModEnd> ""%s"" ""\\r\\n"" ""%s"",",0
201,"<S2SV_ModStart> ) ; } <S2SV_ModEnd> copy_file ( src <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> copy_file ( dest <S2SV_ModStart> ( dest, <S2SV_ModEnd> dest, getuid <S2SV_ModStart> ( ) ) ; <S2SV_ModEnd> waitpid ( child <S2SV_ModStart> ( dest, <S2SV_ModEnd> S_IRUSR | S_IWUSR <S2SV_ModStart> | S_IWUSR ) ; <S2SV_ModEnd> unlink ( src",0
202,<S2SV_ModStart>!= BFA_STATUS_OK ) { kfree ( fcstats ) ; <S2SV_ModStart> return NULL ; },1
203,"<S2SV_ModStart> -> x = Max <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> y = Max <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> z = Max <S2SV_ModEnd> ( 1.0f,",0
204,<S2SV_ModStart> ; rec -> sasl_username <S2SV_ModEnd> = src -> <S2SV_ModStart> ; rec -> sasl_password <S2SV_ModEnd> = src ->,0
205,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
206,"<S2SV_ModStart> o, datao ; memset ( & n -> entries [ 0 ], 0, sizeof ( MnoteCanonEntry ) )",0
207,,0
208,"<S2SV_ModStart> olen ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> long hex ; <S2SV_ModEnd> if (! <S2SV_ModStart> hex ) ; return <S2SV_ModEnd> Curl_convert_from_network ( handle <S2SV_ModStart> ( handle, <S2SV_ModEnd> in, 1 <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
209,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
210,<S2SV_ModStart> ; def -> <S2SV_ModEnd> session_setup = usm_session_init,0
211,<S2SV_ModStart> NULL ; return <S2SV_ModEnd> match ( prog,0
212,<S2SV_ModStart> idx ] ; <S2SV_ModEnd> switch ( action <S2SV_ModStart> ) ; } <S2SV_ModEnd> return SNMP_ERR_NOERROR ;,0
213,,0
214,"<S2SV_ModStart> timer ) ; list_for_each_entry_safe ( slave, tmp, & timeri -> slave_list_head, open_list ) { spin_lock_irq ( & slave_active_lock ) ; _snd_timer_stop ( slave, 1, SNDRV_TIMER_EVENT_RESOLUTION ) ; list_move_tail ( & slave -> open_list, & snd_timer_slave_list ) ; slave -> master = NULL ; spin_unlock_irq ( & slave_active_lock ) ; } <S2SV_ModStart> = NULL ; <S2SV_ModEnd> mutex_unlock ( &",0
215,<S2SV_ModStart> -> u1_dpb_commands_read ) { <S2SV_ModStart> ps_dec ) ; },0
216,<S2SV_ModStart> = gifFilePtr -> ImageCount <S2SV_ModEnd> ; int_fast32_t heightOverflow <S2SV_ModStart> = gifFilePtr -> ImageCount <S2SV_ModEnd> * gifFilePtr ->,0
217,"<S2SV_ModStart> validator -> user, 0",0
218,<S2SV_ModStart> bus ] ; if ( bi == NULL ) return <S2SV_ModEnd> ; si =,0
219,"<S2SV_ModStart>, timeo ) <S2SV_ModEnd> ; if (",1
220,<S2SV_ModStart> ; isspace ( ( unsigned char ) <S2SV_ModStart>! isspace ( ( unsigned char ),1
221,"<S2SV_ModStart> ; result = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL, NULL ) <S2SV_ModEnd> ) ; if",0
222,"<S2SV_ModStart> msixcap msixcap ; if <S2SV_ModEnd> ( msgnum >= <S2SV_ModStart> && msgnum <= MSIX_TABLE_ENTRIES <S2SV_ModEnd> ) ; assert <S2SV_ModStart> dev, msgnum, MSIX_TABLE_ENTRY_SIZE",0
223,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",1
224,<S2SV_ModStart> == NULL ) { retval = KRB5KDC_ERR_PREAUTH_FAILED ; goto cleanup ; } <S2SV_ModEnd> status = X509_NAME_cmp <S2SV_ModStart> = 0 ; <S2SV_ModEnd> free ( is,0
225,,0
226,,0
227,<S2SV_ModStart> buf1 -> size > <S2SV_ModEnd> buf2 -> size,0
228,<S2SV_ModStart> ; size_t sz <S2SV_ModEnd> ; if (,0
229,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,1
230,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
231,<S2SV_ModStart> ; r = sd_event_add_io_event <S2SV_ModEnd> ( b ->,0
232,<S2SV_ModStart> ( ) ; errors += test_short_formatting ( ) ;,0
233,"<S2SV_ModStart> sas_eh_defer_cmd ( cmd, my_cmd",0
234,"<S2SV_ModStart>, end_col_offset ; int ret ; <S2SV_ModStart> end_col_offset ) ; ret = AsyncFunctionDef ( name, args, body, decorator_seq, returns,LINENO ( n0 ), n0 -> n_col_offset, end_col_offset, c -> c_arena ) ; if (! ret ) return NULL ; ret = FunctionDef ( name, args, body, decorator_seq, returns,LINENO ( n0 ), n0 -> n_col_offset, end_col_offset, c -> c_arena ) ; } return ret <S2SV_ModEnd> ; } <S2SV_null>",0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,,0
237,,1
238,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
239,<S2SV_ModStart> : if ( ( size_t ) <S2SV_ModStart> ; if ( ( size_t ) <S2SV_ModStart> : if ( ( size_t ) <S2SV_ModStart> ; if ( ( size_t ) <S2SV_ModStart> ; if ( ( size_t ) <S2SV_ModStart> ; if ( ( size_t ) <S2SV_ModStart> ; if ( ( size_t ) <S2SV_ModStart> ; if ( ( size_t ) <S2SV_ModStart> ; if ( ( size_t ) <S2SV_ModStart> ; if ( ( size_t ) <S2SV_ModStart> ; if ( ( size_t ) <S2SV_ModStart> ; if ( ( size_t ) <S2SV_ModStart> ; if ( ( size_t ) <S2SV_ModStart> ; if ( ( size_t ) <S2SV_ModStart> ; if ( ( size_t ) <S2SV_ModStart> ; if ( ( size_t ) <S2SV_ModStart> ; if ( ( size_t ) <S2SV_ModStart> ; if ( ( size_t ) <S2SV_ModStart> ; if ( ( size_t ) <S2SV_ModStart> ; if ( ( size_t ) <S2SV_ModStart> ; if ( ( size_t ) <S2SV_ModStart> ; if ( ( size_t ) <S2SV_ModStart> ; if ( ( size_t ) <S2SV_ModStart> ; if ( ( size_t ) <S2SV_ModStart> ; if ( ( size_t ),0
240,<S2SV_ModStart> u4_ofst ) ; ps_cabac -> au1_ctxt_models [ ps_cabac -> u4_range ] = ps_cabac -> au1_ctxt_models [ ps_cabac -> u4_range ] ;,0
241,,0
242,<S2SV_ModStart> perf_event_context * ctx <S2SV_ModEnd> ; if ( <S2SV_ModStart> event ) ; perf_event_disable ( event ) <S2SV_ModEnd> ; } raw_spin_unlock_irq,0
243,<S2SV_ModStart> -> post_proc_flag = <S2SV_ModEnd> ctx -> postproc_cfg <S2SV_ModStart>. noise_level ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
244,"<S2SV_ModStart> = 0 ; ND_TCHECK2 ( * tptr, sizeof ( struct olsr_msg4 <S2SV_ModEnd> ) ) ;",0
245,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> int64_t store_reg [ <S2SV_ModStart> = 0 ; <S2SV_ModEnd>  vpx_usec_timer_start ( & <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,0
246,"<S2SV_ModStart>, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) <S2SV_ModEnd> ; } pid_t",0
247,<S2SV_ModStart> -> core_frame_length ; ptr_hbe_txposer -> core_frame_length = ptr_hbe_txposer -> core_frame_length ;,0
248,"<S2SV_ModStart> prov_spec = parsed_require_line ; lua_checkstack ( L, prov_spec -> args -> nelts ) <S2SV_ModStart> ) ) { <S2SV_ModEnd> return AUTHZ_GENERAL_ERROR ;",0
249,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> columns ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
250,<S2SV_ModStart> (! proto_end ||! url,0
251,"<S2SV_ModStart> fdt ) ; struct fdt_name * name ; <S2SV_ModStart> = nextoffset ; name = fdt_get_name ( fdt, offset, & len ) ; if (! name ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart> offset, & name <S2SV_ModEnd> ) ; if",0
252,<S2SV_ModStart> ; if ( server. shutdown_asap &&,0
253,"<S2SV_ModStart> = g_timeout_add_seconds ( 100 <S2SV_ModEnd>, ( GSourceFunc",0
254,<S2SV_ModStart> book -> dim && i < n,1
255,<S2SV_ModStart> action ) { ( void ) action ;,0
256,<S2SV_ModStart> this_h ) ) return ; <S2SV_ModEnd> sf -> x_scale_fp,0
257,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX,0
258,"<S2SV_ModStart> ( sk, <S2SV_ModEnd> sk -> sk_state",0
259,<S2SV_ModStart> ( & sctp_net_ops ) ; unregister_pernet_subsys ( & sctp_net_ops,0
260,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct,0
261,<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen (,1
262,,0
263,"<S2SV_ModStart> skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
264,"<S2SV_ModStart>, IMAGE_SIZE_INVAL ) || fit_check_size ( fit, IMAGE_SIZE_INVAL )",0
265,"<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> uinput_fd, UI_DEV_DESTROY )",1
266,<S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> = rc -> avg_frame_bandwidth <S2SV_ModEnd> ; # endif,1
267,<S2SV_ModStart> ) if ( strcmp <S2SV_ModEnd> ( argv [,0
268,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
269,<S2SV_ModStart> ib ] ; <S2SV_ModEnd> dequant_ptr = d,1
270,"<S2SV_ModStart> FN_REFLEN ] ; strncpy <S2SV_ModEnd> ( buff,",0
271,<S2SV_ModStart> decrypt_cb ) { size_t <S2SV_ModEnd> n = ( <S2SV_ModStart> n = ( size_t <S2SV_ModEnd> ) ( data_end,0
272,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
273,,0
274,"<S2SV_ModStart> goto error ; if ( fstat ( h -> fd, & statbuf ) == - 1 ) goto error ;",0
275,<S2SV_ModStart> ; UWORD8 u1_profile_idc = 0 ; UWORD8 u1_level_idc = 0 ; UWORD16 <S2SV_ModEnd> u1_seq_parameter_set_id ; UWORD16,0
276,,0
277,"<S2SV_ModStart> { uint16 bitspersample = 0, samplesperpixel = 0 <S2SV_ModEnd> ; uint16 input_compression",0
278,,0
279,"<S2SV_ModStart> unsigned int link_count = 0 <S2SV_ModStart> ) { struct kernel_lb_addr loc ; struct indirectEntry * ie ; ie = ( struct indirectEntry * ) iinfo -> i_location ; loc = lelb_to_cpu ( ie -> indirectICB. extLocation ) ; if ( ie -> indirectICB. extLength && ( nbh = udf_read_ptagged ( inode -> i_sb, & loc, 0, & ident ) ) ) { if ( ident == TAG_IDENT_EFE || ident == TAG_IDENT_EFE ) { memcpy ( & iinfo -> i_location, & loc, sizeof ( struct kernel_lb_addr ) ) ; brelse ( bh ) ; make_bad_inode ( inode ) ; make_bad_inode ( inode ) ; return ; } if ( ident == TAG_IDENT_EFE ) { memcpy ( & iinfo -> i_location, & loc, sizeof ( struct kernel_lb_addr ) ) ; brelse ( bh ) ; brelse ( bh ) ; brelse ( bh ) ; make_bad_inode ( inode ) ; return ; } if ( ident == TAG_IDENT_EFE ) { memcpy ( & iinfo -> i_",0
280,<S2SV_ModStart> tx_size_uv = get_uv_tx_size <S2SV_ModEnd> ( mbmi ) <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm,0
281,"<S2SV_ModStart> mq_ops ) { if ( q -> mq_ops ) <S2SV_ModStart>, flags ) <S2SV_ModEnd> ; } running",0
282,<S2SV_ModStart> uint8_t val ; if ( addr > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,0
283,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
284,<S2SV_ModStart> NULL || * replySize > <S2SV_ModEnd> ( int ),0
285,<S2SV_ModStart>. key_data_kvno ; if ( key_data [ j ]. key_data_kvno == 0 ) { err = EINVAL ; goto cleanup ; },0
286,<S2SV_ModStart> 0x02 ) ; memcpy <S2SV_ModEnd> ( sbuf +,0
287,,0
288,<S2SV_ModStart> ; } } return - 1 ;,1
289,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
290,,0
291,<S2SV_ModStart> ) ; } image = DestroyImageList ( image ) ;,0
292,"<S2SV_ModStart> len ) { <S2SV_ModEnd> char * end <S2SV_ModStart> char * end ; const char * end <S2SV_ModStart> & 0x80 ) <S2SV_ModEnd> strcpy ( p <S2SV_ModStart> ""u005c"" ) ; <S2SV_ModEnd> } if ( <S2SV_ModStart> 10 ; } <S2SV_ModEnd> Py_DECREF ( w",0
293,<S2SV_ModStart> struct stat stb = { 0 },0
294,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
295,"<S2SV_ModStart> ; if ( vp8_yv12_alloc_frame_buffer ( & oci -> temp_scale_frame, width, 16, VP8BORDERINPIXELS ) < 0 ) goto allocation_fail ; if (",0
296,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
297,<S2SV_ModStart> 0 ; } ps_dec -> ps_dec_err_status -> u1_cur_slice_num = 0 ; ps_dec -> ps_dec_err_status -> u1_cur_slice_num = 0 ; ps_dec -> ps_dec_err_status -> u1_cur_slice_num = 0 ;,0
298,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> vterm_allocator_free ( screen,1
299,"<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & delay )",1
300,,0
301,<S2SV_ModStart> { httpSetHostName ( <S2SV_ModEnd> stok ( sclone,0
302,"<S2SV_ModStart>. cmp = key_cmp ( type ) <S2SV_ModEnd>,. match_data",0
303,,0
304,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
305,"<S2SV_ModStart> PyObject * res <S2SV_ModEnd> ; _Py_IDENTIFIER ( <S2SV_ModStart> __dict__ ) ; return _Py_BuildValue ( ""O()O"" <S2SV_ModEnd>, Py_TYPE ( <S2SV_ModStart> ), dict <S2SV_ModEnd> ) ; }",0
306,"<S2SV_ModStart> ) & desc, sizeof ( * desc )",1
307,"<S2SV_ModStart> -> private_data ; u32 <S2SV_ModEnd> ( * func <S2SV_ModStart> ) ; case PERF_EVENT_IOC_PERIOD : return perf_event_period ( event, ( u64 __user * ) arg ) ; case <S2SV_ModStart> PERF_EVENT_IOC_PERIOD : return perf_event_period <S2SV_ModEnd> ( event, <S2SV_ModStart> ; } case PERF_EVENT_IOC_SET_FILTER : return perf_event_set_filter <S2SV_ModEnd> ( event,",0
308,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> * cm, PREDICTION_MODE <S2SV_ModEnd> y_mode ) { <S2SV_ModStart> ) { const PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode",0
309,,0
310,"<S2SV_ModStart> iv ) ; if (! NIL_P ( vpass ) ) ossl_raise ( eCipherError, ""Key <S2SV_blank> must <S2SV_blank> be <S2SV_blank> an <S2SV_blank> 8-octet <S2SV_blank> string"" ) ;",0
311,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
312,<S2SV_ModStart> ; if ( nghttp2_is_fatal ( rv ) ) { return ( ssize_t ) inlen ; } if (,0
313,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> if ( x86_pmu,0
314,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ] ; const vpx_extra_bit <S2SV_ModEnd> * const b <S2SV_ModStart> b = & vpx_extra_bits <S2SV_ModEnd> [ t ]",0
315,<S2SV_ModStart> struct vp9_write_bit_buffer wb <S2SV_ModEnd> ; struct vp9_write_bit_buffer <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> += uncompressed_hdr_size ; vpx_compute_update_table <S2SV_ModEnd> ( ) ; <S2SV_ModStart> += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb,0
316,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
317,<S2SV_ModStart> struct ikev2_id id = { 0 },0
318,<S2SV_ModStart> -> data = jas_strdup <S2SV_ModEnd> ( cmpt ->,0
319,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
320,,0
321,"<S2SV_ModStart> mntent -> mnt_dir, mount_entry_on_systemfs",0
322,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
323,"<S2SV_ModStart> ( env, server_port_val, req_server_port ( req ) ) ; rb_hash_aset ( env,",0
324,<S2SV_ModStart> endif int col_type <S2SV_ModEnd> ; MYSQL_BIND * <S2SV_ModStart> ) ) { int col_type ; int prepare_retval ;,0
325,"<S2SV_ModStart> need = 0, max_col <S2SV_ModStart> screen, { max_col = max ( need, <S2SV_ModEnd> 4 ; } <S2SV_ModStart>, { need, max_col ) ; <S2SV_ModEnd> } ) ;",0
326,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> ftoa_bounded_extra ( JsVarFloat <S2SV_ModStart> val ) ) strlcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> < 0 ) strlcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> ) ; else strlcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> ) ; else strlcpy <S2SV_ModEnd> ( str,",0
327,<S2SV_ModStart> cycles ) ; <S2SV_ModEnd> r = &,0
328,"<S2SV_ModStart> LEX_ID ) { strlcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> len ) ; strlcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> LEX_STR ) { strlcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> len ) ; strlcpy <S2SV_ModEnd> ( str,",0
329,,1
330,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
331,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
332,"<S2SV_ModStart>, s2, ( int )",0
333,"<S2SV_ModStart> { parse_global_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL, <S2SV_ModStart> ; parse_service_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL, <S2SV_ModStart> { parse_global_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL,",0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,<S2SV_ModStart> md ) ; <S2SV_ModEnd> if (!,0
336,<S2SV_ModStart> u4_num_bytes_consumed ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
337,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char * print_string,0
338,"<S2SV_ModStart>. encode ( NULL, <S2SV_ModStart>. encode ( NULL,",0
339,<S2SV_ModStart> ) ; } <S2SV_ModEnd> when 10 :,0
340,<S2SV_ModStart> < cols + 8 <S2SV_ModEnd> ; i ++,0
341,,0
342,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
343,<S2SV_ModStart> ; ps_codec -> <S2SV_ModEnd> s_parse. s_bitstrm,0
344,"<S2SV_ModStart> ) ) { if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_be_big ( psf, data ) ; } ;",0
345,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
346,"<S2SV_ModStart> pid_t child = safe_fork <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; if ( safe_copy_file <S2SV_ModEnd> ( src, <S2SV_ModStart> ; else { safe_copy_file <S2SV_ModEnd> ( ""clone"",",0
347,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> BLOCK_8X8 : return vpx_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> BLOCK_16X8 : return vpx_mse16x8 <S2SV_ModEnd> ; case BLOCK_8X16 <S2SV_ModStart> BLOCK_8X16 : return vpx_mse8x16 <S2SV_ModEnd> ; default : <S2SV_ModStart> default : return vpx_mse16x16 <S2SV_ModEnd> ; } },1
348,,0
349,<S2SV_ModStart> ; if ( <S2SV_ModEnd> input -> buf_cur_space_left,0
350,<S2SV_ModStart> size ) { assert ( size <= PREFIX_SIZE ) ;,0
351,<S2SV_ModStart> && rxent -> <S2SV_ModEnd> dport == sport,0
352,<S2SV_ModStart> = bss_desc ; <S2SV_ModEnd> mwifiex_dbg ( adapter,0
353,<S2SV_ModStart> ( error ) { kmem_free ( sbuf ) ; <S2SV_ModStart> return error ; },1
354,,0
355,"<S2SV_ModStart> do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> r, MSG_WAITALL )",1
356,<S2SV_ModStart> ps_dec -> u1_pic_decode_done == 1 ) { return ERROR_INCOMPLETE_FRAME ; } ps_dec -> u1_pic_decode_done,0
357,<S2SV_ModStart> pair!= 0 && app -> formData,0
358,"<S2SV_ModStart> delegation, int fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> -> type & fmode )!= fmode <S2SV_ModEnd> ) goto no_delegation_unlock <S2SV_ModStart> -> stateid, fmode <S2SV_ModEnd> ) ; ret",0
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,,0
361,<S2SV_ModStart> } if ( pmd_none_or_pmd <S2SV_ModEnd> ( pmd ),0
362,"<S2SV_ModStart> * ret_username = safe_calloc <S2SV_ModEnd> ( index + <S2SV_ModStart> + 1 ), sizeof ( username ) <S2SV_ModStart> ( void ) safe_strcpy <S2SV_ModEnd> ( * ret_username",0
363,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> ) { return vpx_read_tree <S2SV_ModEnd> ( r,",1
364,"<S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr1,",0
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,<S2SV_ModStart> depth ++ ; if (! maxbuf ) return ( NULL ) ;,0
367,"<S2SV_ModStart>, KSZ8851_REG_TXMIR ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> = htole16 ( TX_CTRL_TXIC <S2SV_ModEnd> | ( context <S2SV_ModStart> ( interface, KSZ8851_RXQCR, RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851WriteFifo <S2SV_ModStart> ( interface, KSZ8851_RXQCR, RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_RXQCR, RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_RXQCR, TXQCR_METFE <S2SV_ModEnd> ) ; n
_TXMA_MASK",0
368,<S2SV_ModStart> ; # endif mono_console_handle_async_ops ( ) ;,0
369,,0
370,<S2SV_ModStart> ( unlikely ( pmd_trans_huge_safe <S2SV_ModEnd> ( * pmd,0
371,,0
372,"<S2SV_ModStart> i, result <S2SV_ModEnd> ; PyObject *",1
373,,0
374,"<S2SV_ModStart> ++ ; } <S2SV_ModEnd> ret = s <S2SV_ModStart>, totfr ) ; if ( ret <S2SV_ModEnd> < 0 )",0
375,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx ->,0
376,,0
377,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0",1
378,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int bad_format_imginfo ( <S2SV_ModStart> int bad_format_imginfo ( const,0
379,"<S2SV_ModStart> ; UtRegisterTest ( ""IPV6DefragReverseSimpleTest"", IPV6DefragReverseSimpleTest ) ; UtRegisterTest (",0
380,<S2SV_ModStart> = object_length ; new_object. data = NULL ;,0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,<S2SV_ModStart> p_frame ) ; <S2SV_ModEnd> p_frame = p_frame,0
384,<S2SV_ModStart> ; exit_mf : if ( mf -> nr_of_files > 0 ),0
385,<S2SV_ModStart> 4 ) ; size_t <S2SV_ModEnd> num_properties = GETINT32,0
386,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
387,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> if ( data && data -> idx",0
388,,0
389,"<S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 1 ) ) == subscript_kind &&",0
390,,0
391,,0
392,<S2SV_ModStart> ret = 0 ; if ( ti -> xtregs_opt. opt. user ) return - EINVAL,0
393,<S2SV_ModStart> ; message -> buffer = queueItem -> buffer ; message ->,0
394,"<S2SV_ModStart> se_device * remote_dev <S2SV_ModEnd> ; if ( <S2SV_ModStart> == XCOL_SOURCE_RECV_OP ) { <S2SV_ModStart> dst_dev ; else { remote_dev = xop -> src_dev ; } } <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for""",0
395,"<S2SV_ModStart> ; if ( header == HDR ( header ) <S2SV_ModEnd> ) { new_bh <S2SV_ModStart> ; ext2_xattr_cache_insert ( inode, <S2SV_ModStart> ; ext2_xattr_cache_insert ( inode,",0
396,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
397,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
398,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
399,"<S2SV_ModStart> char * ) AcquireQuantumMemory <S2SV_ModEnd> ( imbuf,",0
400,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vp_ref_frame_t * ) <S2SV_ModEnd> ; YV12_BUFFER_CONFIG sd <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; <S2SV_ModEnd> return vp9_copy_reference_dec (",0
401,<S2SV_ModStart> } if ( <S2SV_ModEnd> u1_num_mbs < 0 <S2SV_ModStart> u1_num_mbs < 0 <S2SV_ModEnd> ) { ps_dec,0
402,<S2SV_ModStart> ; UWORD32 u4_x_dst_offset <S2SV_ModEnd> ; UWORD32 u4_y_dst_offset <S2SV_ModStart> == B_PIC ) { <S2SV_ModStart> ps_dec ) ; } <S2SV_ModStart> == B_PIC ) { <S2SV_ModStart> ps_dec ) ; },0
403,<S2SV_ModStart> VP9_LAST_FLAG ) { YV12_BUFFER_CONFIG <S2SV_ModEnd> * const cfg <S2SV_ModStart> cfg = & cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ] <S2SV_ModEnd> ; if (,0
404,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
405,,0
406,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 4 ) ; <S2SV_ModEnd> src += src_stride",0
407,,0
408,<S2SV_ModStart> ; } } <S2SV_ModEnd> return 0 ;,0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. ptr <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
410,<S2SV_ModStart> num & ( 1U <S2SV_ModEnd> << ( number,0
411,"<S2SV_ModStart> plane ] ; size_t <S2SV_ModEnd> w = vpx_img_plane_width <S2SV_ModStart>, plane ) ; size_t <S2SV_ModEnd> h = vpx_img_plane_height <S2SV_ModStart> { if ( vpx_fread <S2SV_ModEnd> ( buf, <S2SV_ModStart>, file )!= <S2SV_ModEnd> w ) return",0
412,,0
413,,0
414,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",0
415,"<S2SV_ModStart> sock, sk ) ; memset ( sa, 0, sizeof ( struct sockaddr_rc )",0
416,"<S2SV_ModStart> MT_CPTYPE_PASSSALT ) { memcpy <S2SV_ModEnd> ( pass_salt,",0
417,<S2SV_ModStart> MUTT_ABORT ) { mutt_socket_empty ( adata -> conn ) ; <S2SV_ModStart> ) ; goto err_close_conn <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto err_close_conn <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ; goto err_close_conn <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ; goto err_close_conn <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ; goto err_close_conn <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto err_close_conn <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto err_close_conn <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto err_close_conn <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto err_close_conn <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto err_close_conn <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto err_close_conn <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto err_close_conn <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto err_close_conn <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto err_close_conn <S2SV_ModEnd> ; } },0
418,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
419,<S2SV_ModStart> ) ) { <S2SV_ModEnd> if (!,0
420,"<S2SV_ModStart>, & rlen, 0",1
421,<S2SV_ModStart> * slavename ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> } # endif read_userfile ( ) ;,0
422,"<S2SV_ModStart> ; if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart> { if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name,",0
423,<S2SV_ModStart> ( buf ) <S2SV_ModEnd> && str [,0
424,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
425,<S2SV_ModStart> credssp ) ; free ( instance ) ;,0
426,"<S2SV_ModStart> size_t s ; memset ( & s, 0, sizeof ( s ) ) ;",0
427,<S2SV_ModStart> bd_addr ) { if (! bd_addr ) return BT_STATUS_NOT_READY ;,0
428,<S2SV_ModStart> i ; int <S2SV_ModEnd> expect ; txid <S2SV_ModStart> 4 ) ; if ( <S2SV_ModEnd> buf -> len <S2SV_ModStart> buf -> cursor < 0 || <S2SV_ModEnd> buf -> len <S2SV_ModStart> buf -> cursor < 0 || <S2SV_ModEnd> buf -> len <S2SV_ModStart> buf -> cursor < 0 || <S2SV_ModEnd> buf -> len <S2SV_ModStart> buf -> cursor < 0 || <S2SV_ModEnd> buf -> len <S2SV_ModStart> buf -> cursor < 0 || <S2SV_ModEnd> buf -> len <S2SV_ModStart> buf -> cursor < 0 || buf -> len < buf -> cursor,0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. ptr <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. ptr <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
430,"<S2SV_ModStart> * epoll = _epoll_safe <S2SV_ModEnd> ( epoll_ ) <S2SV_ModStart>, count ) <S2SV_ModEnd> ) OE_RAISE_ERRNO ( <S2SV_ModStart> OE_EINVAL ) ; <S2SV_ModEnd> return ret ;",0
431,"<S2SV_ModStart> { errstr = parse_global_options <S2SV_ModEnd> ( CMD_INITIALIZE,",0
432,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_SHNUM_MAX : * ( size_t * ) val = ms -> elf_shnum_max ; return 0 ;,0
433,<S2SV_ModStart> offset ) { <S2SV_ModEnd> if ( offset,0
434,<S2SV_ModStart> 1 ) ; if (! trak ) goto exit ;,0
435,"<S2SV_ModStart> 17 ] ; size_t <S2SV_ModEnd> plen ; md5_state_t <S2SV_ModStart> = 0 ; strncpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> password, 82 <S2SV_ModEnd> ) ; md5data <S2SV_ModStart> = '\\0' ; md5data [ 83 ] = '\\0' ;",0
436,<S2SV_ModStart> ; if ( <S2SV_ModEnd> Prefix!= NULL,1
437,<S2SV_ModStart> += 1 ; <S2SV_ModEnd> break ; case,0
438,"<S2SV_ModStart> ( ) ; g_hash_table_remove_all ( headers ) ; g_hash_table_insert ( headers, g_strdup ( ""Cookie"" ), g_strdup ( ""CockpitAuth=v=2;k=blah"" ) ) ; if ( cockpit_auth_check_cookie ( test -> auth, ""/cockpit"", headers ) ) g_assert_not_reached ( ) ;",0
439,"<S2SV_ModStart> -> y_buffer ; memcpy <S2SV_ModEnd> ( dst, <S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst,",0
440,,0
441,"<S2SV_ModStart>, obj_tlen ; u_int <S2SV_ModEnd> hexdump ; u_int",0
442,"<S2SV_ModStart> mbmi, const MV <S2SV_ModEnd>  mvs [ 2 <S2SV_ModStart> ) { const MV <S2SV_ModEnd> diff = {",0
443,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ),",0
444,"<S2SV_ModStart> ; if ( skb_expand_head <S2SV_ModEnd> ( skb_out,",0
445,<S2SV_ModStart> ; netsnmp_mibindex_load ( ) ; SNMP_FREE ( env_var,0
446,"<S2SV_ModStart> { fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ], O_RDWR ) <S2SV_ModStart> 1 ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_KEY ) ) <S2SV_ModStart> ; ioctl ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_REL ) ) <S2SV_ModStart> x ++ ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> ]. mapped_id )",0
447,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
448,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s,",0
449,"<S2SV_ModStart> iakerb_ctx_id_t * pctx, krb5_error_code code <S2SV_ModStart> = 0 ; <S2SV_ModEnd> * pctx =",0
450,"<S2SV_ModStart> screen -> rows, image -> columns",0
451,<S2SV_ModStart> START_CODE_LEN ) ; <S2SV_ModEnd> u4_start_code = impeg2d_bit_stream_nxt,0
452,<S2SV_ModStart> return - EINVAL <S2SV_ModEnd> ; if (,0
453,<S2SV_ModStart> ; if ( mono_array_length ( types ) < 1 ||,0
454,<S2SV_ModStart> ) ] ; size_t <S2SV_ModEnd> tmp ; if,0
455,"<S2SV_ModStart> is_path ) { const <S2SV_ModStart> ( ( ( strncmp <S2SV_ModEnd> ( & name <S2SV_ModStart> 1 ], ""ORIGIN"", 6 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 1 ], ""PLATFORM"", 8 ) == 0 && ( len = 9 )!= 0 ) ) && ( name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) || ( name [ 1 ] == '{' && ( ( strncmp ( & name [ 2 ], <S2SV_ModStart> ) == 0 && ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) ==",0
456,<S2SV_ModStart> decContainer_t * ) H264SwDecAlloc <S2SV_ModEnd> ( sizeof (,0
457,<S2SV_ModStart> drop ; } <S2SV_ModEnd> opt -> optlen,0
458,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
459,<S2SV_ModStart> goto errout ; if ( info -> groupbook >= ci -> books ) goto errout ;,0
460,<S2SV_ModStart> krb5_key_data * key_data = NULL <S2SV_ModStart> == NULL ) { err = ENOMEM ; <S2SV_ModStart> goto cleanup ; },0
461,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
462,<S2SV_ModStart> ] ) ; if ( nByte < 0 ) { rc = SQLITE_NOMEM ; } else { <S2SV_ModStart> 1 ) ; },0
463,"<S2SV_ModStart> filp ) { struct sock * sock = SOCKET_I ( inode ) ; <S2SV_ModStart> ( inode ), sock",0
464,"<S2SV_ModStart> * orelse, string type_comment, <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. type_comment = type_comment",0
465,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> mi_sort_index ( MI_CHECK,0
466,,0
467,,0
468,,0
469,"<S2SV_ModStart> struct flowi6 fl6 ; IP6_ECN_flow_xmit ( sk, fl6. flowlabel ) ; IP6_ECN_flow_xmit ( sk, fl6. flowlabel ) ; IP6_ECN_flow_xmit ( sk, fl6. flowlabel ) ; IP6_ECN_flow_xmit ( sk, fl6. flowlabel ) ; IP6_ECN_flow_xmit ( sk, fl6. flowlabel ) ; IP6_ECN_flow_xmit ( sk, fl6. flowlabel ) ; IP6_ECN_flow_xmit ( sk, fl6. flowlabel ) ; IP6_ECN_flow_xmit ( sk, fl6. flowlabel ) ; if ( ipv6_addr_type ( & fl6. saddr ) & IPV6_ADDR_LINKLOCAL ) fl6. flowi6_oif = sk -> sk_bound_dev_if ; else fl6. flowi6_oif = sk -> sk_bound_dev_if ; else fl6. flowi6_oif = sk -> sk_bound_dev_if ; if (! ( transport -> param_",0
470,"<S2SV_ModStart> ; END_OF_READING : SetImageExtent ( image, image -> columns, image -> columns ) ;",0
471,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> UINT32 failureCode ; Stream_Read_UINT32 <S2SV_ModEnd> ( s, <S2SV_ModStart> = NEGO_STATE_FAIL ; return nego -> state ;",0
472,,0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,"<S2SV_ModStart> ( psf = safe_calloc <S2SV_ModEnd> ( 1,",0
475,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void fix_interp_filter (,0
476,,0
477,<S2SV_ModStart> ; retval = htc_request_check_host_hdr <S2SV_ModEnd> ( hp ),0
478,,0
479,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> sizeof ( tETH_HDR ),1
480,<S2SV_ModStart> ; ps_dec -> u2_offset_num = 0 ; ps_dec ->,0
481,,0
482,"<S2SV_ModStart> = 8 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
483,"<S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv",0
484,"<S2SV_ModStart> ; if ( datao < 0 || datao < 0 || datao > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> order = EXIF_BYTE_ORDER_INTEL ; datao += exif_get_long ( buf + datao, EXIF_BYTE_ORDER_INTEL ) ; if ( <S2SV_ModStart> ; if ( datao < 0 || <S2SV_ModStart> ; if ( datao < 0 || <S2SV_ModStart> ; if ( datao < 0 || <S2SV_ModStart> ; if ( datao < 0 || <S2SV_ModStart> ; if ( datao < 0 || <S2SV_ModStart> ; if ( datao < 0 || <S2SV_ModStart> ; if ( datao < 0 || <S2SV_ModStart> ; if ( datao < 0 || <S2SV_ModStart> ; if ( datao < 0 || <S2SV_ModStart> ; if ( datao < 0 || <S2SV_ModStart> ; if ( datao < 0 || <S2SV_ModStart> ; if ( datao < 0 || <S2SV_ModStart> ; if ( datao < 0 || <S2SV_ModStart> ; if ( datao < 0 || <S2SV_ModStart> ; if ( datao < 0 || datao < 0 || <S2SV_ModStart> ; if ( datao < 0 || datao < 0 ||",0
485,"<S2SV_ModStart> ; if ( l_strcmp0 <S2SV_ModEnd> ( outname,",0
486,"<S2SV_ModStart> void ) { if ( opt -> local_addr. num > 0 ) { s_log ( LOG_DEBUG, ""Unbinding <S2SV_blank> service <S2SV_blank> [%s]"", opt -> servname ) ; for ( i = 0 ; i < opt -> local_addr. num ; ++ i ) unbind_port ( opt, i ) ; } <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> while ( opt <S2SV_ModStart> 0 ; } <S2SV_ModEnd> s_log ( LOG_DEBUG <S2SV_ModStart> servname ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
487,<S2SV_ModStart> ( void ) <S2SV_ModEnd> next_character ( ),0
488,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ;",0
489,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
490,<S2SV_ModStart> ps_slice_hdr ) { <S2SV_ModEnd> WORD32 st_rps_idx ; <S2SV_ModStart> ; } } <S2SV_ModEnd> return 0 ;,0
491,,0
492,<S2SV_ModStart> sk ) ; unix_peer_wake_disconnect ( sk ) ; <S2SV_ModStart> { if ( unix_peer_wake_disconnect ( sk ) <S2SV_ModEnd> ) { sock_poll_wait <S2SV_ModStart> wait ) ; unix_peer_wake_disconnect ( sk ) ; } <S2SV_ModEnd> sock_put ( other,0
493,<S2SV_ModStart> h ) { <S2SV_ModEnd> sprintf ( outpos,0
494,<S2SV_ModStart> * minor_status = <S2SV_ModEnd> KRB5_BAD_MSIZE ; return,0
495,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vp9_ref_frame_t * frame <S2SV_ModEnd> ; if ( <S2SV_ModStart> NULL ) { vpx_get_reference_enc <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> ctx -> cpi <S2SV_ModEnd>, & fb",0
496,<S2SV_ModStart> plug ) ; <S2SV_ModEnd> put_ioctx ( ctx,0
497,,0
498,"<S2SV_ModStart> s } ; <S2SV_ModEnd> uECC_word_t carry ; <S2SV_ModStart> curve ) ; EccPoint_mult ( p, curve -> G, k2 [! carry ], 0, num_n_bits + 1, curve ) ; <S2SV_ModEnd> if ( uECC_vli_isZero",0
499,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
500,<S2SV_ModStart> ; } else if ( pool -> free_total < pool -> free_total ) <S2SV_ModStart> ; } } else { free ( buf ) ; },0
501,,0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
503,,0
504,<S2SV_ModStart>. vf = vpx_mse16x16 <S2SV_ModEnd> ; xd ->,1
505,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> overhead = 16 <S2SV_ModStart> + 1 ; size_t <S2SV_ModEnd> size = overhead,1
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> nego_process_negotiation_response ( rdpNego <S2SV_ModStart> NEGO_STATE_FAIL ; return 0 <S2SV_ModStart> = NEGO_STATE_FINAL ; return 0 ;,0
507,<S2SV_ModStart> ; int i ; int <S2SV_ModEnd> target_bits_per_mb ; const <S2SV_ModStart> ; do { int bits_per_mb_at_this_q ; int bits_per_mb ; int bits_per_mb ; int bits_per_mb ; int bits_per_mb_at_this_q ; int bits_per_mb ; int bits_per_mb_at_this_q ; int bits_per_mb ; int bits_per_mb_at_this_q ; for ( i = active_worst_quality ; i < active_worst_quality ; i ++ ) { if ( cpi -> flags & VPX_FLAG_VP9_FLAG_VP9_FLAG_VP9_FLAG_VP9 ) { if ( cpi -> flags & VPX_FLAG_VP9_FLAG_VP9_FLAG_VP9_FLAG_VP9 ) { if ( cpi -> flags & VPX_FLAG_VP9_FLAG_VP9_FLAG_VP9 ) { if ( cpi -> flags & VPX_FLAG_VP9_FLAG_VP9_FLAG_VP9_FLAG_VP9 ) { if ( cpi -> flags & VPX,0
508,<S2SV_ModStart> ; value |= TJA1101_CONFIG1_MII_MODE_RMII_25 <S2SV_ModEnd> ; tja1101WritePhyReg (,0
509,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
510,"<S2SV_ModStart> int dst_stride, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart> plane ] ; memset <S2SV_ModEnd> ( left_col, <S2SV_ModStart> + y ; memset <S2SV_ModEnd> ( left_col,",0
511,"<S2SV_ModStart> ; } end ++ ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> NULL <S2SV_blank> pattern\\n"" ) ; goto error <S2SV_ModEnd> ; } if",0
512,<S2SV_ModStart> ; ei -> <S2SV_ModEnd> i_sync_tid = 0,0
513,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; } vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
514,<S2SV_ModStart> ; } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { q = osStrchr <S2SV_ModEnd> ( p +,1
516,<S2SV_ModStart> ; if ( i + 1 < NCH ( n ) &&,0
517,<S2SV_ModStart> KEY_FRAME ) { memset <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd ->,0
518,,0
519,,0
520,,0
521,<S2SV_ModStart> ; out += 3 <S2SV_ModEnd> ; } state <S2SV_ModStart> ; out += 3 <S2SV_ModEnd> ; } state,1
522,<S2SV_ModStart> err = - <S2SV_ModEnd> EALREADY ; if,0
523,<S2SV_ModStart> POLL_IN ) ; <S2SV_ModEnd> perf_event_wakeup ( handle <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
524,"<S2SV_ModStart> utf8s_to_utf16s ( const u8 <S2SV_ModEnd> * s, <S2SV_ModStart> * s, u16 <S2SV_ModEnd> len, wchar_t <S2SV_ModStart> if ( u < PLANE_SIZE ) { u -= PLANE_SIZE ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( u & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) u ; } else { * op ++ = ( wchar_t ) u ; } * op ++ = ( wchar_t ) u ; } s += size ; len -= size ; } return <S2SV_ModEnd> pwcs ; }",0
525,"<S2SV_ModStart> { print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" <S2SV_ModEnd> ) ; if",0
526,,0
527,,0
528,"<S2SV_ModStart> ( mm, 0xA0000 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; out : <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
529,<S2SV_ModStart> ; if ( <S2SV_ModEnd> dst_coap_msg_ptr -> token_ptr,0
530,"<S2SV_ModStart> ""Unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> Bluetooth <S2SV_blank> HAL.\\n"" ) ; return - 1 ;",0
531,<S2SV_ModStart> 0 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif <S2SV_ModStart> ] ) > 4098 <S2SV_ModEnd> && col <,0
532,<S2SV_ModStart> len ) ; <S2SV_ModEnd> param -> flags,0
533,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image2, image2 ) ; if ( status == MagickFalse ) { InheritException ( exception, & image2 -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
534,<S2SV_ModStart> ( bfqq ) bfq_idle_slice_timer_body <S2SV_ModEnd> ( bfqq ),0
535,<S2SV_ModStart> ; length += PRIMARY_DRAWING_ORDER_FIELD_BYTES <S2SV_ModEnd> [ orderInfo ->,0
536,<S2SV_ModStart> ; if ( ovl_dentry_is_dir ( new ) ) { err = - EPERM ; goto out ; } if (,0
537,<S2SV_ModStart> plane < MAX_MB_PLANE - 1,0
538,"<S2SV_ModStart> * cpi, TileData * tile_data <S2SV_ModEnd>, int mi_row <S2SV_ModStart> ; set_offsets ( <S2SV_ModEnd> tile, mi_row <S2SV_ModStart>, x, tile_data <S2SV_ModEnd>, mi_row,",0
539,<S2SV_ModStart> * err = safeRead <S2SV_ModEnd> ( & reader,0
540,<S2SV_ModStart> -> ranges = safe_calloc <S2SV_ModEnd> ( sizeof (,0
541,<S2SV_ModStart> ( flags & ( VP8_EFLAG_NO_REF_ARF | VP8_EFLAG_FORCE_ARF ) <S2SV_ModEnd> ) && ( <S2SV_ModStart> ( flags & ( VP8_EFLAG_NO_REF_ARF | VP8_EFLAG_FORCE_ARF ) <S2SV_ModEnd> ) ) ||,0
542,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;",0
543,<S2SV_ModStart>! head ) <S2SV_ModEnd> return - EINVAL <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
544,"<S2SV_ModStart> * pptr, u_int <S2SV_ModEnd> len ) {",0
545,"<S2SV_ModStart> -> outputbuffer, ""<tr><td>Debug</td><td>%s</td></tr>"" <S2SV_ModEnd>, ( Run",0
546,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
547,"<S2SV_ModStart>, constr2, ""%s"", <S2SV_ModStart>, constr2, ""%s"",",0
548,,0
549,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",0
550,<S2SV_ModStart> ; distortion = vpx_variance16x16 <S2SV_ModEnd> ( * (,1
551,"<S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd>, ECON2_ETHEN | <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_ECON3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_ECON3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_ECON3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_ECON3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_ECON3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_ECON3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_ECON3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_ECON3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_",0
552,<S2SV_ModStart> * start ; if (! psf -> header ) return ; <S2SV_ModStart> + maxlen ; if (! psf -> header ) return ;,0
553,<S2SV_ModStart> -> alg_priv ) { if ( ctx -> priv -> alg_priv ) <S2SV_ModStart> alg_priv ) ; },0
554,,0
555,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
556,<S2SV_ModStart> ( inuse / LUAI_MAXSTACK <S2SV_ModEnd> ) + 2,0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,<S2SV_ModStart> * s = _PyUnicode_AsString <S2SV_ModEnd> ( CHILD (,0
559,<S2SV_ModStart> input_ptr ; int is_keyframe_qaunt_set <S2SV_ModEnd> = 0 ; <S2SV_ModStart> } if ( is_keyframe_qaunt_set <S2SV_ModEnd> ) { SvcInternal <S2SV_ModStart> ; if ( is_keyframe_qaunt_set <S2SV_ModEnd> ) { SvcInternal,0
560,,0
561,<S2SV_ModStart> self ) { <S2SV_ModEnd> PyObject * new_memo,0
562,,1
563,"<S2SV_ModStart> ( dbh, mysql_error ( imp_dbh -> pmysql ),",0
564,<S2SV_ModStart> ) || ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) == 0 ) <S2SV_ModStart> slot_lock ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> slot -> id ),0
565,<S2SV_ModStart> struct ieee_802_11_phdr phdr = { },0
566,<S2SV_ModStart> ; sh = s_calloc <S2SV_ModEnd> ( hdrlen +,0
567,,0
568,<S2SV_ModStart> > nr_parens ) { ret = - EINVAL ; goto out_free ; } <S2SV_ModEnd> * ( ++,1
569,<S2SV_ModStart> ) { const VP9EncoderConfig <S2SV_ModEnd> * rc = <S2SV_ModStart> = ( ( VP9EncoderConfig <S2SV_ModEnd> * rc = <S2SV_ModStart> = ( ( VP9EncoderConfig <S2SV_ModEnd> * rc -> <S2SV_ModStart> = ( ( VP9EncoderConfig <S2SV_ModEnd> * rc -> <S2SV_ModStart> = ( ( VP9EncoderConfig <S2SV_ModEnd> * rc -> <S2SV_ModStart> = ( ( VP9EncoderConfig <S2SV_ModEnd> * rc -> <S2SV_ModStart> = ( ( VP9EncoderConfig <S2SV_ModEnd> * rc ->,0
570,"<S2SV_ModStart> TX_MODE read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r )",1
571,"<S2SV_ModStart> : # line 10 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> } # line 10 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 10 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 10 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 10 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 10 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 10 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 10 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 10 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 10 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 10 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 10 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 10 <S2SV_ModEnd> ""re_grammar.y",0
572,,0
573,<S2SV_ModStart> -> pSrc ; if ( pWalker -> pParse -> db -> mallocFailed ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; },0
574,<S2SV_ModStart> ; serv = svc_create_svc ( <S2SV_ModEnd> sv_ops ) ;,0
575,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
576,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
577,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
578,"<S2SV_ModStart> do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> s, 0 )",1
579,<S2SV_ModStart> ( xIter = crm_first_attr <S2SV_ModEnd> ( xml ),0
580,<S2SV_ModStart> <S2SV_null> static const SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> return ( const SvcInternal_t <S2SV_ModEnd> * ) svc_ctx,1
581,<S2SV_ModStart> ) ; } <S2SV_ModEnd> zend_hash_get_current_data ( Z_ARRVAL_P,0
582,,0
583,"<S2SV_ModStart> * otmp = readobj <S2SV_ModEnd> ( buf,",0
584,"<S2SV_ModStart> directory_table_end, table_start ; struct stat st <S2SV_ModStart> == 0 ) { st = SQUASHFS_INVALID_BLK ; break ; } <S2SV_ModEnd> if ( read_xattrs_from_disk <S2SV_ModStart> == FALSE ) { st = SQUASHFS_INVALID_BLK ; break ; } <S2SV_ModEnd> if ( parse_exports_table <S2SV_ModStart> == FALSE ) { st = SQUASHFS_INVALID_BLK ; break ; } <S2SV_ModEnd> if ( read_fragment_table <S2SV_ModStart> == FALSE ) { st = SQUASHFS_INVALID_BLK ; break ; } <S2SV_ModEnd> if ( read_inode_table <S2SV_ModStart> == FALSE ) { st = SQUASHFS_INVALID_BLK ; break ; } <S2SV_ModEnd> if ( read_directory_table <S2SV_ModStart> return TRUE ; }",0
585,"<S2SV_ModStart> rule * rule, const struct env * env <S2SV_ModStart> count = 0 <S2SV_ModEnd> ; for ( <S2SV_ModStart> ; } } <S2SV_ModEnd> return env ;",0
586,<S2SV_ModStart> -> seg ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
587,,0
588,,0
589,<S2SV_ModStart> ) ; } <S2SV_ModEnd> ++ x ->,0
590,,0
591,"<S2SV_ModStart> ; if ( _PyObject_HasAttrId <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = _PyObject_GetAttrId <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = _PyObject_GetAttrId <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = _PyObject_GetAttrId <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = _PyObject_GetAttrId <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = _PyObject_GetAttrId <S2SV_ModEnd> ( obj,",0
592,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
593,"<S2SV_ModStart> int err ; u32 cmask ; <S2SV_ModStart> goto err_delete ; cmask = be32_to_cpu ( knode -> sel -> keys [ 0 ]. val ) >> tos_off ; <S2SV_ModStart>! match ) { err = <S2SV_ModEnd> - ENOMEM ; <S2SV_ModStart> - ENOMEM ; goto err_delete ; } <S2SV_ModStart> list, & <S2SV_ModEnd> dscp_map ) ;",0
594,<S2SV_ModStart> ) ; } <S2SV_ModEnd> stream -> config <S2SV_ModStart> ; stream -> <S2SV_ModEnd> cx_time = 0,0
595,,0
596,<S2SV_ModStart> data_end ) { vpx_reader <S2SV_ModEnd> r ; assert <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> aligned_cols ) ; memset <S2SV_ModEnd> ( cm ->,0
597,"<S2SV_ModStart> vp9_decoder_create ( const VP9DecoderConfig <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> ) ) ; const VP9DecoderConfig <S2SV_ModEnd> * const cm <S2SV_ModStart> const cm = vpx_memalign ( 32, sizeof ( * pbi ) ) ; if (! cm ) return NULL ; cm -> error. setjmp = 0 ; cm -> current_video_frame = 0 ; cm -> oxcf = * oxcf ; cm -> ready_for_new_data = 1 ; cpi -> decoded_key_frame <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vp9_init_dequantizer ( cm",0
598,<S2SV_ModStart> ) ) ; if (! ( ( GF_DataInformationBox * ) s ) -> dref ) { <S2SV_ModStart> ) ; } },0
599,<S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> || opt -> opt.,1
600,"<S2SV_ModStart> void tree2tok ( vpx_token <S2SV_ModEnd> * tokens, <S2SV_ModStart> tokens, const vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> do { const vpx_tree_index <S2SV_ModEnd> j = tree",0
601,"<S2SV_ModStart> = VPX_CODEC_OK ; <S2SV_ModEnd> res = validate_img <S2SV_ModStart> ctx, img <S2SV_ModEnd> ) ; vpx_codec_pkt_list_init",0
602,"<S2SV_ModStart> { ret = get_tag_internal <S2SV_ModEnd> ( asn1,",0
603,,0
604,"<S2SV_ModStart> rc, const VP9EncoderConfig <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> ) rc -> avg_frame_bandwidth <S2SV_ModEnd> * ( int64_t",1
605,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
606,,0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header,0
608,"<S2SV_ModStart> range_max ) { uint32_t <S2SV_ModEnd> value ; int <S2SV_ModStart> gbc ) ; <S2SV_ModEnd> i = 0 <S2SV_ModStart> { if ( get_bits_left <S2SV_ModEnd> ( gbc ) <S2SV_ModStart> gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits_left <S2SV_ModEnd> ( gbc ) <S2SV_ModStart> gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits_left ( gbc ) ) { bits [ i ++ ] = '1' ; ++ zeroes ; } else { bits [ i ++ ] = '0' ; ++ zeroes ; } if ( zeroes >= 32 ) { value = MAX_UINT_BITS ( 32 ) ; } else { value = get_bits_long ( gbc, zeroes ) ; for ( j = 0 ; j < zeroes ; j",0
609,"<S2SV_ModStart> || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> || strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> || strchr ( ""#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c ) <S2SV_ModStart> || strchr ( ""#$%&\'*+-.^_`|~"" <S2SV_ModEnd>, c )",0
610,,0
611,"<S2SV_ModStart>, y, Max <S2SV_ModEnd> ( 4, <S2SV_ModStart>, dds_info, Max <S2SV_ModEnd> ( 4,",0
612,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL ) <S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL )",1
613,<S2SV_ModStart> action ) { ( void ) w ; ( void ) h ;,0
614,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; send ( outputbuffer ) ;",0
615,"<S2SV_ModStart>, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" ) ; if (! rdp -> autodetect ) return FALSE",0
616,,0
617,<S2SV_ModStart> # if CONFIG_MULTITHREAD <S2SV_ModEnd> vp8_decoder_remove_threads ( pbi,1
618,<S2SV_ModStart> { if ( ( <S2SV_ModStart> xWantedSize > 0 ) && ( xWantedSize < xWantedSize <S2SV_ModStart> portBYTE_ALIGNMENT_MASK ) ) ),0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,,0
621,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
622,"<S2SV_ModStart> TX_SIZE tx_size, vpx_coeff_probs_model <S2SV_ModEnd> * coef_branch_ct ) <S2SV_ModStart> coef_branch_ct ) { vpx_coeff_probs_model <S2SV_ModEnd> * coef_probs =",0
623,<S2SV_ModStart> { } ; if (! utf8 ) return 0 <S2SV_ModEnd> ; r =,0
624,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int su3000_frontend_attach ( <S2SV_ModStart> d ) { <S2SV_ModEnd> if ( dvb_usb_generic_rw <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; <S2SV_ModEnd> if ( dvb_usb_generic_rw <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; <S2SV_ModEnd> if ( dvb_usb_generic_rw <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; <S2SV_ModEnd> if ( dvb_usb_generic_rw <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; <S2SV_ModEnd> if ( dvb_usb_generic_rw <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; <S2SV_ModEnd> if ( dvb_usb_generic_rw <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; <S2SV_ModEnd> if ( dvb_usb_generic_rw <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; <S2SV_ModEnd> if ( dvb_usb_generic_rw <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; <S2SV_ModEnd> if ( dvb_usb_generic_rw <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank>",0
625,"<S2SV_ModStart> * iface, vpx_codec_enc_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> ( ( flags & VPX_CODEC_CAP_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA <S2SV_ModEnd> ) ) res <S2SV_ModStart> ) ; } <S2SV_ModEnd> return SAVE_STATUS (",0
626,"<S2SV_ModStart> stride, int <S2SV_ModEnd> mv_row, int <S2SV_ModStart> const kernel = vpx_get_interp_kernel <S2SV_ModEnd> ( xd -> <S2SV_ModStart> const kernel = vpx_get_interp_kernel <S2SV_ModEnd> ( xd -> <S2SV_ModStart>, stride, <S2SV_ModEnd> pred [ 0 <S2SV_ModStart> 256 ], <S2SV_ModEnd> mv, scale <S2SV_ModStart>, uv_stride, <S2SV_ModEnd> pred [ 512 <S2SV_ModStart> 512 ], <S2SV_ModEnd> mv, scale",0
627,"<S2SV_ModStart> = TRUE ; memset <S2SV_ModEnd> ( buf, <S2SV_ModStart>, origbuf ), 0",0
628,"<S2SV_ModStart> * numbers, size_t <S2SV_ModEnd> count ) { <S2SV_ModStart> && i < ( size_t )",0
629,<S2SV_ModStart> data_end ) { VP9_COMMON * const cm = & pbi -> common ; const uint8_t * bit_reader_end = NULL ; <S2SV_ModStart> & pbi -> tile_workers <S2SV_ModEnd> ; const uint8_t <S2SV_ModStart> = MIN ( cm <S2SV_ModEnd> -> oxcf. <S2SV_ModStart> = MIN ( cm <S2SV_ModEnd> -> oxcf. <S2SV_ModStart> = pbi -> tile_workers <S2SV_ModEnd>. max_threads & <S2SV_ModStart> = pbi -> tile_workers <S2SV_ModEnd>. max_threads & <S2SV_ModStart> = pbi -> tile_workers <S2SV_ModEnd>. max_threads & <S2SV_ModStart> = pbi -> tile_workers <S2SV_ModEnd>. max_threads & <S2SV_ModStart> = pbi -> tile_workers <S2SV_ModEnd>. max_threads & <S2SV_ModStart> = pbi -> tile_workers <S2SV_ModEnd>. max_threads & <S2SV_ModStart> = pbi -> tile_workers <S2SV_ModEnd>. max_threads & <S2SV_ModStart> = pbi -> tile_workers <S2SV_ModEnd>. max_threads & <S2SV_ModStart> = pbi -> tile_workers <S2SV_ModEnd>. max_threads & <S2SV_ModStart> = pbi -> tile_workers <S2SV_ModEnd>. max_threads & <S2SV_ModStart> = pbi -> tile_workers <S2SV_ModEnd>. max_threads & <S2SV_ModStart> = pbi -> tile_workers <S2SV_ModEnd>. max_threads & <S2SV_ModStart> = pbi -> tile_workers <S2SV_ModEnd>. max_threads & <S2SV_ModStart> = p,0
630,,0
631,,0
632,<S2SV_ModStart> -> error_code ) { if ( ctx -> base. error_code ) { <S2SV_ModStart> : NULL ; } },0
633,<S2SV_ModStart> * ps_cur_slice ; <S2SV_ModEnd> ih264d_free_dynamic_bufs ( ps_dec,0
634,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet ),0
635,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int getnum (,0
636,"<S2SV_ModStart>, g -> gcstate, g ->",0
637,<S2SV_ModStart> ; else return <S2SV_ModEnd> EIO ; deb_info,0
638,<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart> return NULL ; ( void ) opt ;,0
639,,0
640,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi,",0
641,<S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( & icp -> icmp6_data16 [ i ] ) ;,0
642,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command",0
643,"<S2SV_ModStart> Image * image = NULL <S2SV_ModStart> length, padding = 0 <S2SV_ModStart>, padding, value = 0, value = 0 <S2SV_ModEnd> ; assert (",0
644,"<S2SV_ModStart> ) ) { jas_eprintf ( ""jas_enc_encodemainhdr <S2SV_blank> marker\\n"" ) ;",0
645,<S2SV_ModStart> ] ) { if (! channel -> modes ) return ;,0
646,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> - m + vpx_read_bit <S2SV_ModEnd> ( r )",1
647,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
648,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> ( REFERENCE_MODE ) vpx_read <S2SV_ModEnd> ( r,",0
649,"<S2SV_ModStart>! stream ) { <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; return NULL ; }",0
650,<S2SV_ModStart> op -> nd_opt_len <S2SV_ModEnd> ) ) goto,0
651,<S2SV_ModStart> -> root_node = yr_malloc ( sizeof ( RE_AST ) ) <S2SV_ModEnd> ; return ERROR_SUCCESS,0
652,"<S2SV_ModStart> ; ret = db_var_expand <S2SV_ModEnd> ( path, <S2SV_ModStart> if ( ret < <S2SV_ModEnd> 0 ) {",0
653,<S2SV_ModStart> ; tok -> lineno = 0 ; tok ->,0
654,"<S2SV_ModStart> ( av1 -> av1_config ) { GF_AV1Config * av1_cfg = AV1_DuplicateConfig ( av1 -> av1_config -> config ) ; if ( av1_cfg ) { gf_odf_av1_cfg_write ( av1_cfg, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> data, & av1 -> emul_esd -> decoderConfig -> dataLength ) ; gf_odf_av1_cfg_del ( av1_cfg ) ; } } if ( av1 ->",0
655,<S2SV_ModStart> ( dpbSize ) <S2SV_ModEnd> ; dpb ->,0
656,"<S2SV_ModStart> ; oe_errno = OE_EINVAL <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( addrlen ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } <S2SV_ModEnd> if ( oe_syscall_getpeername_ocall <S2SV_ModStart>, addrlen_in, ret <S2SV_ModEnd> )!= OE_OK <S2SV_ModStart> ) ; } <S2SV_ModEnd> return ret ;",0
657,,1
658,<S2SV_ModStart> FALSE ; } if ( Stream_GetRemainingLength ( s ) < 4 ) return FALSE ;,0
659,<S2SV_ModStart> ipv6_pinfo * np <S2SV_ModEnd> ; struct ipv6_txoptions <S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; struct ip6_flowlabel,0
660,"<S2SV_ModStart> falign, hdr_size <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> uint32_t falign ; uint32_t <S2SV_ModEnd> j ; struct",0
661,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; us <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPDRH <S2SV_ModEnd> ) << 8 <S2SV_ModStart> | dm9000ReadReg ( DM9000_EPDRL <S2SV_ModEnd> ) ; }",0
662,<S2SV_ModStart> { rc = <S2SV_ModEnd> cib_tls_signon ( cib <S2SV_ModStart> -> command ) <S2SV_ModEnd> ; } if <S2SV_ModStart> { rc = <S2SV_ModEnd> cib_tls_signon ( cib <S2SV_ModStart> private -> callback <S2SV_ModEnd> ) ; },0
663,"<S2SV_ModStart> = ubuf ; memset ( & msg, 0, sizeof ( msg ) ) ;",0
664,,0
665,<S2SV_ModStart> ; if ( <S2SV_ModEnd> h -> filename,0
666,,0
667,"<S2SV_ModStart> one, offset = 0",0
668,"<S2SV_ModStart> ( r = sshbuf_put_string <S2SV_ModEnd> ( b,",0
669,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
670,"<S2SV_ModStart> client = user_data <S2SV_ModEnd> ; if ( <S2SV_ModStart> num_clients ) ; <S2SV_ModEnd> crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client""",0
671,<S2SV_ModStart> * uv ; <S2SV_ModEnd> thread -> twups <S2SV_ModStart> next ) { * p = thread -> twups ;,0
