,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
1,<S2SV_ModStart> ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ; if (,0
2,"<S2SV_ModStart>, 0 ) ; if ( writer -> stco ) { GF_FREE ( writer -> stco ) ; GF_FREE ( writer -> stsc ) ; writer -> stco = NULL ; writer -> stsc = NULL ; } if ( writer -> stsc ) { GF_FREE ( writer -> stsc ) ; writer -> stsc = NULL ; } if ( writer -> stco ) { GF_FREE ( writer -> stco ) ; GF_FREE ( writer -> stsc ) ; writer -> stco = NULL ; writer -> stsc = NULL ; } if ( writer -> stsc ) { GF_FREE ( writer -> stsc ) ; writer -> stsc = NULL ; } if ( writer -> stco ) { GF_FREE ( writer -> stco ) ; GF_FREE ( writer -> stsc ) ; writer -> stsc = NULL ; } if ( writer -> stco ) { GF_FREE ( writer -> stco ) ; GF_FREE ( writer -> stsc ) ; writer -> stco = NULL ; } if ( writer -> stsc ) { GF_FREE ( writer -> stsc ) ; writer -> stsc = NULL ; }",0
3,<S2SV_ModStart> item ) { if ( item < 0 ) { return NULL ; } <S2SV_ModStart> -> child ; if (! c ) { return NULL ; } <S2SV_ModStart> while ( c ) { <S2SV_ModEnd> c = c <S2SV_ModStart> -> next ; <S2SV_ModEnd> } return c,0
4,"<S2SV_ModStart> u64 nr, <S2SV_ModEnd> struct pt_regs * <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",1
5,"<S2SV_ModStart> EXT4_EXTENTS_FLAG ) { char * buf = grub_malloc ( <S2SV_ModEnd> EXT2_BLOCK_SIZE ( data <S2SV_ModStart> ( data ) ) ; if (! buf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } leaf = grub_ext4_find_leaf ( data, buf, ( struct grub_ext4_extent_header * ) inode -> blocks. dir_blocks, fileblock ) ; if (! leaf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) ( leaf + 1 ) ; for ( i = 0 ; i < grub_le_to_cpu16 ( leaf -> entries ) ; i ++ ) { if ( fileblock < grub_le_to_cpu32 ( ext [ i ]. block ) ) break ; } if ( fileblock >= grub_le_to_cpu16 ( ext [ i ]. len ) ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank>",0
6,"<S2SV_ModStart> fdct16 ( const tran_low_t * in, tran_low_t * out ) { tran_high_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step2 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step3 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t input [ 8 ] ; tran_high_t <S2SV_ModEnd> temp1, temp2 <S2SV_ModStart> ] ; { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7 ; tran_high_t t0, t1, t2, t3 ; tran_high_t x0, x1, x2, x3 ; tran_high_t <S2SV_ModEnd> x0 = input",0
7,"<S2SV_ModStart> ( ) ; # ifdef LIBRAW_LIBRARY_BUILD if ( get4 ( ) == LIBRAW_MOUNT_FixedLens ) { imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; # else <S2SV_ModStart> = LIBRAW_MOUNT_FixedLens ; # endif } # endif if ( parse_ciff ( save + hlen, len - hlen, 0 ) ) { if ( parse_tiff ( save + 6 ) ) apply_tiff ( ) ; } if ( parse_tiff ( save + 6 ) ) apply_tiff ( ) ; fseek ( ifp, save + len, SEEK_SET ) ; } if ( parse_tiff ( save + 6 ) ) apply_tiff ( ) ; fseek ( ifp, save + len, SEEK_SET ) ;",0
8,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> search_filter_level ( const <S2SV_ModStart> * sd, VP9EncoderConfig <S2SV_ModEnd> * cpi, <S2SV_ModStart> partial_frame ) { YV12_COMMON <S2SV_ModEnd> * const cm <S2SV_ModStart> -> common ; YV12EncoderConfig <S2SV_ModEnd> * lf = <S2SV_ModStart> ) ; int <S2SV_ModEnd> filt_direction = 0 <S2SV_ModStart> / 4 ; YV12EncoderData <S2SV_ModEnd> ss_err [ MAX_LOOP_FILTER <S2SV_ModStart> + 1 ] <S2SV_ModEnd> ; best_err = <S2SV_ModStart> min_filter_level ) ; YV12EncoderData <S2SV_ModEnd> filt_err ; int <S2SV_ModStart> * filter_step ; YV12EncoderData <S2SV_ModEnd> bias = ( <S2SV_ModStart> * filter_step ; YV12EncoderData <S2SV_ModEnd> bias = ( <S2SV_ModStart> * filter_step ; YV12EncoderData <S2SV_ModEnd> bias = ( <S2SV_ModStart> 0 ) { int <S2SV_ModStart> partial_frame ) ; YV12EncoderData <S2SV_ModEnd> ss_err [ filt_low <S2SV_ModStart> [ filt_low ] <S2SV_ModEnd> ; } } <S2SV_ModStart> } } return filt_best <S2SV_ModEnd> ; } <S2SV_null>",0
9,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
10,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ++ i ) vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( usehp ) vpx_write <S2SV_ModEnd> ( w,",1
11,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } else { <S2SV_ModEnd> request -> rxBlockSzx <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; },0
12,"<S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ) ) ; <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
13,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> construct_get_dest_keyring ( struct <S2SV_ModStart> * authkey ; int ret ; <S2SV_ModStart> dest_keyring ) ; ret = key_read_state ( dest_keyring, & dest_keyring -> state ) ; if ( ret < 0 ) { key_put ( dest_keyring ) ; return ret ; } <S2SV_ModStart> ( dest_keyring ) { ret = key_read_state ( dest_keyring, & dest_keyring -> state ) ; if ( ret < 0 ) { key_put ( dest_keyring ) ; return ret ; } } <S2SV_ModEnd> } case KEY_REQKEY_DEFL_THREAD_KEYRING <S2SV_ModStart> ) ; } ret = key_read_state ( dest_keyring, & dest_keyring -> state ) ; if ( ret < 0 ) { key_put ( dest_keyring ) ; return ret ; }",0
14,<S2SV_ModStart> = create_spnego_ctx ( 0,0
15,<S2SV_ModStart> ; tm = localtime_r <S2SV_ModEnd> ( & t,0
16,<S2SV_ModStart> length ) ; if ( strlen ( password )!= 0 ) { <S2SV_ModStart> ) ) ; },0
17,<S2SV_ModStart> == p ) { * errnop = ERANGE ; return NSS_STATUS_TRYAGAIN ; } <S2SV_ModEnd> r = parse_uid,0
18,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",1
19,<S2SV_ModStart> = 0 ; if (! <S2SV_ModStart> & timeout ) ) return false,0
20,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> detect_transition_to_still ( struct <S2SV_ModStart> int detect_transition_to_still ( TWO_PASS <S2SV_ModEnd> * twopass, <S2SV_ModStart> last_decay_rate ) { bool trans_to_still = false <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( still_interval > MIN_STILL_INTERVAL <S2SV_ModEnd> && loop_decay_rate >= <S2SV_ModStart> && loop_decay_rate >= 0.01 <S2SV_ModEnd> && last_decay_rate < <S2SV_ModStart> && last_decay_rate < 0.01 <S2SV_ModEnd> ) { int <S2SV_ModStart> j ; const TWO_PASS <S2SV_ModEnd> * position = <S2SV_ModStart> * position = TWO_PASS <S2SV_ModEnd> -> stats_in ; <S2SV_ModStart> tmp_next_frame ) ) { trans_to_still = true ; break ; } <S2SV_ModEnd> if ( tmp_next_frame <S2SV_ModStart> pcnt_motion < 0.999 || tmp_next_frame. pcnt_inter > tmp_next_frame. pcnt_motion <S2SV_ModStart> break ; } } <S2SV_ModStart> twopass, position ) ; if ( trans_to_still ) return true <S2SV_ModEnd> ; } <S2SV_null>",0
21,"<S2SV_ModStart> inode ) ) { if ( offset + size > i_size_read ( inode ) ) { printk ( KERN_EMERG ""%s: <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, inode -> i_ino ) ; return ret ; } <S2SV_ModStart> size ) ; }",0
22,"<S2SV_ModStart> alg ) { <S2SV_ModEnd> if (! <S2SV_ModStart> CRYPTO_ALG_NEED_FALLBACK ) ) { request_module ( ""%s"", name ) ; <S2SV_ModStart> name ) ; }",0
23,"<S2SV_ModStart> = GIT_PKT_NG ; if ( len < 3 ) goto out_err ; <S2SV_ModStart> += 3 ; <S2SV_ModEnd> ptr = strchr <S2SV_ModStart>,'<S2SV_blank>') ; if (! ptr ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> ref = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> ref ) ; memcpy ( pkt -> ref, line, len ) ; pkt -> ref [ len ] = '\\0' ; line = ptr + 3 ; <S2SV_ModEnd> ptr = strchr <S2SV_ModStart>, '\\n' ) ; if (! ptr ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> msg = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> msg ) ; memcpy ( pkt -> msg, line, len ) ; pkt -> msg [ len ] = '\\0' ; <S2SV_ModEnd> * out =",0
24,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> BYTE flags ; UINT32 <S2SV_ModEnd> length ; Stream_Read_UINT32,0
25,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; if (,0
26,"<S2SV_ModStart> mntent, path, 0",0
27,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } io -> io_cleanup = mem_cleanup ;,1
28,<S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart>,0
29,<S2SV_ModStart> ) ) ; ret &=,0
30,<S2SV_ModStart> vpx_codec_enc_cfg_map_t * map ; if ( ( iface -> caps & VPX_CODEC_CAP_ENCODER ) == 0 ) return VPX_CODEC_INCAPABLE <S2SV_ModStart> = VPX_CODEC_INVALID_PARAM ; if ( ( <S2SV_ModEnd> map = iface <S2SV_ModStart> enc. cfg_maps ) == NULL ) return VPX_CODEC_INVALID_PARAM,0
31,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
32,"<S2SV_ModStart> void show_progress ( uint64_t frame_in, uint64_t <S2SV_ModEnd> frame_out, uint64_t",0
33,"<S2SV_ModStart> NULL ) { PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> %s\\n"", fields [ i ]. name ) ;",0
34,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_ETXSTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXSTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRTS <S2SV_ModEnd> ) ; return",0
35,"<S2SV_ModStart> value ) ; if ( _PyObject_SetAttrId ( result, & PyId_description, value ) < 0 ) goto failed ; Py_DECREF ( value ) ;",0
36,"<S2SV_ModStart> ( page && access ( page, R_OK ) == 0 ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } } else if (! strcmp ( func, ""page/set"" ) ) { char * wikitext = NULL, * page = NULL ; if ( ( ( wikitext = http_request_param_get ( req, ""text"" ) )!= NULL ) && ( ( page = http_request_param_get ( req, ""page"" ) )!= NULL ) ) { file_write ( page, wikitext ) ; http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } } else if (! strcmp ( func, ""page/delete"" ) ) { char * page = http_request_param_get ( req, ""page"" ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( unlink ( page ) > 0 ) { http_response_printf ( res, ""success"" ) ; http_response_send (",0
37,"<S2SV_ModStart> low_var_thresh, int mb_rows, int mb_cols, <S2SV_ModEnd> double level = <S2SV_ModStart>.5 ) ; <S2SV_ModEnd> unsigned char * <S2SV_ModStart> pp_limits_buffer ; ; <S2SV_ModEnd> ( void ) <S2SV_ModStart> ) flag ; memset <S2SV_ModEnd> ( limits, <S2SV_ModStart> 16 ) ; vpx_post_proc_down_and_across_mb_row <S2SV_ModEnd> ( source -> <S2SV_ModStart> 8 ) ; vpx_post_proc_down_and_across_mb_row <S2SV_ModEnd> ( source -> <S2SV_ModStart> 8 ) ; vpx_post_proc_down_and_across_mb_row <S2SV_ModEnd> ( source ->",0
38,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; error = mb2_cache_entry_alloc ( ext4_mb_cache, GFP_NOFS, & ce ) ; if ( error ) { ea_bdebug ( bh, ""out <S2SV_blank> of <S2SV_blank> memory"" ) ; return ; } error = mb2_cache_entry_insert ( ce, bh -> b_bdev, bh -> b_blocknr, hash ) ; if ( error ) { ea_bdebug ( bh, ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; error = 0 ; } } else { ea_bdebug ( bh, ""inserting <S2SV_blank> [%x]"", ( int ) hash ) ; mb2_cache_entry_release ( ce ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
39,"<S2SV_ModStart> ) ) ; if (! <S2SV_ModEnd> r_socket_http_answer ( s <S2SV_ModStart>, rlen ) ) { free ( uri ) ; return NULL ; } return NULL",0
40,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct ip_options_rcu <S2SV_ModEnd> * ip_options_get_from_user ( <S2SV_ModStart> ip_options_get_from_user ( struct ip_options_rcu <S2SV_ModEnd> * net, <S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> return ip_options_get_finish (",0
41,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|truncated]"" <S2SV_ModEnd> ) ) ;",0
42,"<S2SV_ModStart> ) N_ ( ""E530: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'escape\' <S2SV_blank> in <S2SV_blank> string <S2SV_blank> option"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) N_ ( ""E531: <S2SV_blank> Use <S2SV_blank> \\""escape\\"" <S2SV_blank> in <S2SV_blank> string <S2SV_blank> option"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) N_ ( ""E532: <S2SV_blank> Not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> string <S2SV_blank> option"" <S2SV_ModEnd> ) ; else",0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode <S2SV_ModStart>, & new_mode, & acl ) ; if ( ret <S2SV_ModEnd> ) goto out",0
44,"<S2SV_ModStart> size_t size ; if ( width < 0 || height < 0 || hstep <= 0 || vstep <= 0 ) { goto error ; } if (! jas_safe_intfast32_add ( tlx, width, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ) { goto error ; } if (! ( cmpt = jas_malloc ( sizeof ( jas_image_cmpt_t ) ) ) ) { goto error ; } cmpt -> type_ = JAS_IMAGE_CT_UNKNOWN ; cmpt -> tlx_ = tlx ; cmpt -> tly_ = tly ; cmpt -> hstep_ = hstep ; cmpt -> vstep_ = vstep ; cmpt -> prec_ = depth ; cmpt -> sgnd_ = sgnd ; cmpt -> stream_ = 0 ; cmpt -> cps_ = ( depth + 7 ) / 8 ; if (! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps",0
45,<S2SV_ModStart> dp == datalen || tdp == datalen,0
46,"<S2SV_ModStart> size_t * acl_len, struct xdr_buf * buf <S2SV_ModStart> int status ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> xdr, OP_GETATTR, buf <S2SV_ModStart>, & attrlen <S2SV_ModEnd> ) )!= <S2SV_ModStart> { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr <S2SV_blank> "" ""acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"" <S2SV_ModEnd>, attrlen, <S2SV_ModStart> attrlen ) ; <S2SV_ModEnd> } else status",0
47,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
48,"<S2SV_ModStart> ) ) { if ( smatch ( auth, ""APPWEB"" ) ) { return MPR_ERR_BAD_SYNTAX ; } <S2SV_ModStart> ; } } if ( smatch ( tok, ""APPWEB"" ) ) { if ( snumber ( owner ) ) { uid = ( int ) stoi ( owner ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { gid = HTTP -> gid ; } else { gid = groupToID ( owner ) ; } } if ( perms && snumber ( perms ) ) { mode = ( int ) stoiradix ( perms, - 1, NULL ) ; } else { mode = 0 ; } } else { dirs = auth ; auth = 0 ; } tok = dirs ; for ( tok = sclone ( dirs ) ; ( dir = stok ( tok, "","", & tok ) )!= 0 ; ) { path = httpMakePath ( state -> route, state -> configDir, dir ) ; if ( mprGetPathInfo ( path, & info ) == 0 && info. isDir ) { continue ; } if ( mprMakeDir ( path, mode, uid, gid, 1 ) < 0 ) { return MPR_ERR_",0
49,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> addr = VPX_MALLOC_L <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; <S2SV_ModEnd> if ( addr,0
50,"<S2SV_ModStart> int res ; <S2SV_ModEnd> long long export_index_table <S2SV_ModStart> long export_index_table [ SQUASHFS_LOOKUP_BLOCKS ( sBlk. s. inodes ) <S2SV_ModEnd> ] ; res <S2SV_ModStart> read_fs_bytes ( fd <S2SV_ModEnd>, export_index_table )",0
51,<S2SV_ModStart> ; } else { <S2SV_ModStart> p1 ) ; },0
52,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> # if CONFIG_VP8_ENCODER <S2SV_ModStart> ; # endif <S2SV_ModEnd> for ( argi <S2SV_ModStart> } if ( <S2SV_ModEnd> arg_match ( &,0
53,<S2SV_ModStart> } if ( c -> opt -> option. client || c -> opt -> protocol ) return 0 ; if ( c -> opt -> redirect_addr. names ) return 1 ; if ( <S2SV_ModStart> 1 ; } <S2SV_ModEnd> return 0 ;,0
54,"<S2SV_ModStart> ; if ( crypto_memneq <S2SV_ModEnd> ( cmac,",0
55,"<S2SV_ModStart> cpi ) { <S2SV_ModEnd> const uint64_t bits_used <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> twopass. kf_group_bits = MAX ( cpi -> twopass. kf_group_bits, 0 ) ; <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits <S2SV_ModEnd>, 0 ) <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
56,"<S2SV_ModStart> EOFOp 0x07 char * magick = ( char * ) calloc ( 12, sizeof ( char ) ) <S2SV_ModEnd> ; Image * <S2SV_ModStart> ) ) ; if ( image -> columns > image -> rows ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ReadBlobLSBShort ( image ) ; if ( image -> rows > image -> columns ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> ReadBlobLSBShort ( image ) ; if ( image -> columns > image -> rows ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> ReadBlobLSBShort ( image ) ; if ( image -> columns > image -> rows ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> ReadBlobLSBShort ( image ) ; if ( image -> rows > image -> columns ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> ReadBlobLSBShort ( image ) ; if ( image -> columns > image -> rows ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> ReadBlobLSBShort ( image ) ; if ( image -> columns > image",0
57,"<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> altsetting [ 0 ]. desc. bNumEndpoints < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; error = - EINVAL ; goto err_free_urb ; }",1
58,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
59,"<S2SV_ModStart> dir = ""/etc"" ; if ( ( fd = TEMP_FAILURE_RETRY ( TEMP_FAILURE_RETRY ( TEMP_FAILURE_RETRY ( TEMP_FAILURE_RETRY ( TEMP_FAILURE_RETRY ( TEMP_FAILURE_RETRY ( TEMP_FAILURE_RETRY ( TEMP_FAILURE_RETRY ( TEMP_FAILURE_RETRY ( TEMP_FAILURE_RETRY ( TEMP_FAILURE_RETRY ( TEMP_FAILURE_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_LIMIT_",0
60,<S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; },0
61,"<S2SV_ModStart> ) ) { if ( n < 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> ) ) { if ( n < 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; }",0
62,"<S2SV_ModStart> void vp9_setup_dst_planes ( <S2SV_ModEnd> const YV12_BUFFER_CONFIG * <S2SV_ModStart> src -> alpha_buffer } ; MACROBLOCKD * const xd = & xd -> plane [ 0 ] ; const int num_planes = MIN ( xd -> num_planes, MAX_MB_PLANE ) ; const int stride [ 4 ] = { src -> y_stride, src -> uv_stride, src -> uv_stride, src -> alpha_stride } ; int i ; for ( i = 0 ; i < num_planes ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y ) ; } <S2SV_ModStart> i ) { <S2SV_ModEnd> setup_pred_plane ( &",0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,<S2SV_ModStart> ) get_block = ocfs2_do_get_block <S2SV_ModEnd> ; else get_block <S2SV_ModStart> else get_block = ocfs2_do_dio <S2SV_ModEnd> ; return __blockdev_direct_IO,0
65,"<S2SV_ModStart> ( f, ""%79s <S2SV_blank> %100s\\n"" <S2SV_ModEnd>, def,",0
66,"<S2SV_ModStart> n ) { <S2SV_ModEnd> PyCompilerFlags cf ; <S2SV_ModStart> PyCompilerFlags cf ; expr_ty <S2SV_ModEnd> mod ; char <S2SV_ModStart> * str ; <S2SV_ModEnd> Py_ssize_t len ; <S2SV_ModStart> Py_ssize_t i ; int all_whitespace = 1 ; int kind ; void * data ; PyObject * o, * fstring_name ; Py_ssize_t len ; Py_ssize_t i ; assert ( expr_end >= expr_start ) ; assert ( * ( expr_start - 1 ) == '{' ) ; assert ( * ( expr_end - expr_start ) == '}' || * ( expr_end - expr_start ) == '!' || * expr_end == ':' ) ; o = PyUnicode_DecodeUTF8 ( expr_start, expr_end - expr_start, NULL ) ; if ( o == NULL ) return NULL ; len = expr_end - expr_start ; str = PyMem_RawMalloc ( len + 3 ) ; if ( str == NULL ) return NULL ; str [ 0 ] = '(' ; memcpy ( str + 1, expr_start, len ) ; str [ len + 1 ] = ')' ; str [ len + 2 ] = 0 ; cf",0
67,"<S2SV_ModStart> string ) { return cJSON_GetChild ( object, string ) <S2SV_ModEnd> ; } <S2SV_null>",0
68,<S2SV_ModStart> size ) ; if ( px -> ft == NULL ) return FALSE ;,0
69,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ;",0
70,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
71,"<S2SV_ModStart> int i ; const <S2SV_ModStart> alpha_buffer } ; # if CONFIG_VP9_HIGHBITDEPTH const int stride [ 4 ] = { src -> y_stride, src -> uv_stride, src -> uv_stride, src -> alpha_stride } ; # else const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> uv_stride, src -> alpha_stride } ; # endif for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ], buffers [ i ], strides [ i ], mi_row, mi_col, sf, pd -> subsampling_x, pd -> subsampling_y ) ; } # endif <S2SV_ModEnd> for ( i",0
72,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; for (,1
73,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
74,<S2SV_ModStart> user ) { <S2SV_ModEnd> cleanup_srcu_struct ( &,0
75,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> sl = strlen,1
76,"<S2SV_ModStart> * for_ch ; <S2SV_ModEnd> REQ ( n <S2SV_ModStart> comp_for ) ; for_ch = CHILD ( n, 1 + is_async ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; expression = ast_for_expr ( c, CHILD ( n, 3 + is_async ) ) ; if (! expression ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if ( NCH ( for_ch ) == 1 ) comp = comprehension ( Tuple ( t, Store, first -> lineno, first -> col_offset, c -> c_arena ), expression, NULL, is_async, c -> c_arena ) ; else comp = comprehension ( Tuple ( t, Store, first -> lineno, first -> col_offset, c -> c_arena ), expression, NULL, is_async, c -> c_arena ) ; if (! comp ) return NULL ; if ( NCH ( n ) == ( 5 + is_async ) ) { int j, n_ifs ; asdl_seq * ifs",0
77,<S2SV_ModStart> = NULL ; dst_state -> frames [ i ] = NULL ; <S2SV_ModStart> = dst ; dst_state -> frames [ i ] = NULL ;,0
78,"<S2SV_ModStart> write_mb_modes_kf ( const VP9_COMMON * cm, const MACROBLOCKD * xd, const MODE_INFO * mi, vpx_writer * w ) { const <S2SV_ModStart> * cpi, <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * above_mi = xd -> above_mi <S2SV_ModEnd> ; const MODE_INFO <S2SV_ModStart> MODE_INFO * const left_mi = xd -> left_mi <S2SV_ModEnd> ; const MB_MODE_INFO <S2SV_ModStart> ; write_skip ( <S2SV_ModEnd> mbmi -> segment_id <S2SV_ModStart> ; write_selected_tx_size ( <S2SV_ModEnd> mbmi -> tx_size <S2SV_ModStart> ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
79,"<S2SV_ModStart> maxn ) { <S2SV_ModEnd> # ifdef DEBUG <S2SV_ModStart> ; # endif if ( n > maxn ) SWF_error ( ""Action <S2SV_blank> overflow!!"" ) ;",0
80,<S2SV_ModStart> ; if ( EXTRACT_32BITS ( & prep -> pp_n ) <S2SV_ModEnd> < sizeof ( <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> n = EXTRACT_32BITS,0
81,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
82,<S2SV_ModStart> zArg ) { assert ( pTable -> nModuleArg >= 0 ) ; <S2SV_ModStart> * ) * <S2SV_ModEnd> 2 + pTable <S2SV_ModStart> pTable -> nModuleArg <S2SV_ModEnd> ; char *,0
83,<S2SV_ModStart> ) ; } for ( i = anal_size - 1 ; i >= 0 ; i -- ) { u_in [ i ] = x [ i - anal_size ] ; } for ( i = anal_size - 1 ; i >= 0 ; i -- ) { u_out [ i ] = x [ i - anal_size ] ; } for ( i = anal_size - 1 ; i >= 0 ; i -- ) { u_in [ i ] = x [ i - anal_size ] ; } for ( i = anal_size - 1 ; i >= 0 ; i -- ) { u_out [ i ] = x [ i - anal_size ] ; } for ( i = anal_size - 1 ; i >= 0 ; i -- ) { u_in [ i ] = x [ i - anal_size ] ; } for ( i = anal_size - 1 ; i >= 0 ; i -- ) { u_in [ i ] = x [ i - anal_size ] ; } for ( i = anal_size - 1 ; i >= 0 ; i -- ) { u_in [ i ] = x [,0
84,<S2SV_ModStart> -> dmin ; if ( ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE (,0
85,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> bfq_idle_slice_timer_body ( struct <S2SV_ModStart> bfq_data * bfqd <S2SV_ModEnd> ) { spin_lock_irqsave <S2SV_ModStart> long flags ; bool is_idle = false ; <S2SV_ModStart> in_service_queue ) { if (! bfq_bfqq_budget_timeout ( bfqq ) ) is_idle = true ; <S2SV_ModStart> return ; } if ( is_idle ) { bfq_bfqq_expire ( bfqd, bfqq, true, reason ) ; bfq_schedule_dispatch ( bfqd ) ; return true ; } spin_unlock_irqrestore ( & bfqd -> lock, flags ) ; return false ;",0
86,,1
87,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
88,"<S2SV_ModStart> diffBlock + diffBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } memcpy ( newData + newpos, diffPtr, x ) ; diffPtr += x ; if ( diffPtr <S2SV_ModEnd> > diffBlock + <S2SV_ModStart> diffBlock + diffBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } if ( extraPtr + y <S2SV_ModEnd> > extraBlock + <S2SV_ModStart> extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } memcpy ( newData + newpos, extraPtr, y ) ; extraPtr += y ; if ( extraPtr + z <S2SV_ModEnd> > extraBlock + <S2SV_ModStart> extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } memcpy ( newData + newpos, extraPtr",0
89,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> np -> tclass ) ; rcu_read_unlock (,0
90,<S2SV_ModStart> ) ) { if ( image -> rows < image -> columns ) { if ( image -> columns < image -> rows - 1 ) { if ( image -> rows < image -> columns - 1 ) { if ( image -> rows < image -> columns - 1 ) { if ( image -> rows < image -> columns - 1 ) { if ( image -> rows < image -> columns - 1 ) { if ( image -> rows < image -> columns - 1 ) { if ( image -> rows < image -> columns - 1 ) { if ( image -> rows < image -> columns - 1 ) { if ( image -> columns < image -> rows - 1 ) { if ( image -> rows < image -> columns - 1 ) { if ( image -> rows < image -> columns - 1 ) { if ( image -> rows < image -> rows - 1 ) { if ( image -> rows < image -> columns - 1 ) { if ( image -> rows < image -> rows - 1 ) { if ( image -> rows < image -> columns - 1 ) { if ( image -> rows < image -> rows - 1 ) { if ( image -> rows < image -> rows - 1 ) { if ( image -> rows < image -> rows - 1 ) { if ( image -> rows,0
91,<S2SV_ModStart> data ) { ( void ) data ;,0
92,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
93,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
94,<S2SV_ModStart> mbmi. ref_frame!= INTRA_FRAME && left -> mbmi. ref_frame!= INTRA_FRAME && left -> mbmi. ref_frame!= INTRA_FRAME && near_mvs [ 0 ]. as_int == near_mvs [ 1 ]. as_int && near_mvs [ 2 ]. as_int == near_mvs [ 3 ]. as_int && near_mvs [ 4 ]. as_int == near_mvs [ 5 ]. as_int && near_mvs [ 6 ]. as_int == near_mvs [ 7 ]. as_int && near_mvs [ 8 ]. as_int == near_mvs [ 8 ]. as_int && near_mvs [ 7 ]. as_int == near_mvs [ 8 ]. as_int && near_mvs [ 8 ]. as_int == near_mvs [ 7 ]. as_int && near_mvs [ 8 ]. as_int == near_mvs [ 7 ]. as_int && near_mvs [ 8 ]. as_int == near_mvs [ 8 ]. as,0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
97,<S2SV_ModStart> msicap msicap ; if ( msgnum < sizeof ( msicap ) ) return - EINVAL ;,0
98,"<S2SV_ModStart> -> ptr ; if ( cmd -> flags & REDIS_CMD_DENYPASS ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> authenticated"" ) ; return REDIS_OK ; } <S2SV_ModStart> -> ptr ; if ( cmd -> flags & REDIS_CMD_DENYPASS ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> authenticated"" ) ; return REDIS_OK ; }",0
99,"<S2SV_ModStart> ; if ( cfg -> g_w == 0 || cfg -> g_h == 0 ) return VPX_CODEC_ERR_INVALID_ARGS ; if ( <S2SV_ModStart> VPX_RC_ONE_PASS ) ) return VPX_CODEC_ERR_INVALID_ARGS ; <S2SV_ModStart> ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; res = validate_config ( ctx, cfg, & ctx -> vp8_cfg, 0 ) ; if (! res ) { ctx -> cfg = * cfg ; set_vp8e_config ( & ctx -> oxcf, ctx -> cfg, ctx -> vp8_cfg, NULL ) ; vp8_change_config ( ctx -> cpi, & ctx -> oxcf ) ; }",0
100,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> vp9_init_plane_quantizers ( cpi,0
101,<S2SV_ModStart> info -> si_code!= SI_QUEUE ) <S2SV_ModEnd> return - EPERM <S2SV_ModStart> return - EPERM <S2SV_ModEnd> ; return do_send_specific,0
102,"<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; ISOM_DECREASE_SIZE ( ptr, 1 ) <S2SV_ModStart> size - 8 ; if ( tmp_strsize > sizeof ( char ) * tmp_strsize ) return GF_ISOM_INVALID_FILE",0
103,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
104,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> -> state == fmode <S2SV_ModEnd> ) return ; <S2SV_ModStart> if ( ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> )!= ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> -> state = fmode <S2SV_ModEnd> ; } <S2SV_null>",0
105,"<S2SV_ModStart> read_info ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( ( Image * ) NULL ) ; }",0
106,<S2SV_ModStart> 0 ; } if ( len > SIZE_MAX - elem. in_sg [ 0 ]. iov_len ) { return 0 ; },0
107,<S2SV_ModStart> unsigned ) JPC_QCX_GETEXPN <S2SV_ModEnd> ( qcd -> <S2SV_ModStart> unsigned ) JPC_QCX_GETMANT <S2SV_ModEnd> ( qcd ->,0
108,<S2SV_ModStart> AV_PIX_FMT_PAL8 ; } else if ( c -> format == CHUNKY ) { avctx -> pix_fmt = AV_PIX_FMT_PAL10 ; },0
109,<S2SV_ModStart> length - 1 <S2SV_ModEnd> ) ; return,1
110,"<S2SV_ModStart> image_noffset ) { if ( noffset == - FDT_ERR_TRUNCATED || noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; }",0
111,"<S2SV_ModStart> ; if (! <S2SV_ModStart>, GFP_KERNEL ) ) { kfree ( state ) ; <S2SV_ModEnd> return - ENOMEM <S2SV_ModStart> - ENOMEM ; }",0
112,"<S2SV_ModStart> vpx_codec_dec_cfg_t * cfg, vpx_codec_caps_t caps <S2SV_ModStart> else if ( caps & VPX_CODEC_CAP_XMA ) { res = VPX_CODEC_INCAPABLE ; } else if ( caps & VPX_CODEC_CAP_POSTPROC ) { res = VPX_CODEC_INCAPABLE ; } else if ( caps & VPX_CODEC_CAP_ERROR_CONCEALMENT ) { res = VPX_CODEC_INCAPABLE ; } else if ( caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) { res = VPX_CODEC_INCAPABLE ; } else if ( caps & VPX_CODEC_CAP_DECODER ) { res = VPX_CODEC_INCAPABLE ; } else { memset ( ctx, 0, sizeof ( * ctx ) ) ; ctx -> iface = iface ; ctx -> name = iface -> name ; ctx -> priv = NULL ; ctx -> init_flags = flags ; ctx -> config. dec = cfg ; res = VPX_CODEC_",0
113,<S2SV_ModStart> ; value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1100WritePhyReg (,0
114,"<S2SV_ModStart> ; if ( icmp_bxm. opt. optlen ) { struct icmphdr * iph ; iph = skb_header_pointer ( skb_in, iph -> ihl << 2, sizeof ( * iph ), & iph -> opt ) ; if ( iph == NULL ) goto out ; if ( iph -> protocol == IPPROTO_ICMP ) goto out ; } if (",0
115,<S2SV_ModStart> ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & <S2SV_ModStart> VPX_CODEC_CAP_XMA ) ) <S2SV_ModEnd> ) res =,0
116,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
117,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; RESERVE_SPACE",1
118,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ) ; return 0 <S2SV_ModStart> break ; } return error <S2SV_ModEnd> ; } <S2SV_null>,1
119,<S2SV_ModStart> ; if ( len < 1 ) return - 1 ; if (,0
120,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
121,<S2SV_ModStart> goto trunc ; if ( lshp -> ls_length < sizeof ( struct lsa6_hdr ) ) goto trunc ;,0
122,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { ret = - EFAULT ; break ; } <S2SV_ModEnd> * obuf =",0
123,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
124,<S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_RDWR | O_CLOEXEC ),0
125,"<S2SV_ModStart> costs, vp9_tree * <S2SV_ModStart> ) { const vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> ) ; const vpx_tree_index <S2SV_ModEnd> ii = tree",0
126,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
127,<S2SV_ModStart> & 0xffff ; if ( fmt >= EV_SZ ) return - EINVAL ;,0
128,"<S2SV_ModStart> fadst16 ( const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t <S2SV_ModEnd> x0, s1 <S2SV_ModStart> 15 ] ; tran_high_t <S2SV_ModEnd> x1 = input <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> x2 = input <S2SV_ModStart> 13 ] ; tran_high_t <S2SV_ModEnd> x3 = input <S2SV_ModStart> 2 ] ; tran_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 4 ] ; tran_high_t <S2SV_ModEnd> x5 = input <S2SV_ModStart> 9 ] ; tran_high_t <S2SV_ModEnd> x7 = input <S2SV_ModStart> 7 ] ; tran_high_t <S2SV_ModEnd> x9 = input <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> x10 = input <S2SV_ModStart> 5 ] ; tran_high_t <S2SV_ModEnd> x11 = input <S2SV_ModStart> 10 ] ; tran_high_t <S2SV_ModEnd> x12 = input <S2SV_ModStart> 12 ] ; tran_high_t <S2SV_ModEnd> x15 = input",0
129,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> flags |= HAS_EDSP <S2SV_ModStart> |= HAS_EDSP ; <S2SV_ModEnd> flags |= HAS_MEDIA <S2SV_ModStart> |= HAS_MEDIA ; <S2SV_ModEnd> flags |= HAS_NEON <S2SV_ModStart> flags |= HAS_NEON ; <S2SV_ModEnd> return flags &,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
131,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> count_segs_sb ( VP9_COMP <S2SV_ModStart> * cpi, <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * mi, int * no_pred_segcounts, int ( * temporal_predictor_count ) [ 2 ], int mi_row, int mi_col, BLOCK_SIZE bsize ) { const VP9_COMMON * const cm = & cpi -> common ; const int mis = cm -> mi_stride ; int bw, bh ; const int bs = num_8x8_blocks_wide_lookup [ bsize ], hbs = bs / 2 ; if ( mi_row >= cm -> mi_rows || mi_col >= cm -> mi_cols ) return ; bw = num_8x8_blocks_wide_lookup [ mi [ 0 ] -> mbmi. sb_type ] ; bh = num_8x8_blocks_high_lookup [ mi [ 0 ] -> mbmi. sb_type ] ; if ( bw == bs && bh == bs ) { count_segs ( cpi, tile, mi, mi_8x8",0
132,<S2SV_ModStart> flags & CLIENT_CLOSE_AFTER_REPLY ) break ; if ( c -> flags & CLIENT_CLOSE_AFTER_REQUEST,0
133,<S2SV_ModStart> ; get_blocks_flags = ( mpd -> b_state & ( 1 << BH_Mapped ) )? EXT4_GET_BLOCKS_CREATE : 0 <S2SV_ModEnd> ; if (,0
134,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart>, handle, hints, <S2SV_ModStart> p -> ai_flags <S2SV_ModEnd>, & p <S2SV_ModStart> p -> ai_family <S2SV_ModEnd>, & p <S2SV_ModStart> p -> ai_socktype <S2SV_ModEnd>, & p <S2SV_ModStart> p -> ai_protocol <S2SV_ModEnd>, p -> <S2SV_ModStart>, NULL, <S2SV_ModEnd> & canonnamelen, <S2SV_ModStart> } if (! p ) { ret = OE_EAI_MEMORY ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval == 1 ) break ; if ( retval!= - 1 || oe_errno!= OE_ENAMETOOLONG ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( oe_errno ) ; } if ( p -> ai_family == AF_INET || p -> ai_socktype == SOCK_STREAM ) { ret = OE_EAI_MEMORY ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval == 1 ) break ; if ( retval!= - 1 || oe_errno!= OE_EADDRNOTAVAIL ) { ret = OE_EAI_SYSTEM ; OE_",0
135,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
136,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
137,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static ssize_t <S2SV_ModEnd> set_registers ( pegasus_t <S2SV_ModStart> data ) { ssize_t <S2SV_ModEnd> ret ; ret <S2SV_ModStart>, indx, ( void * )",0
138,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
139,"<S2SV_ModStart>, int64_t ts_end <S2SV_ModEnd> ) { struct <S2SV_ModStart> >> 4 ; <S2SV_ModEnd> if ( ctx <S2SV_ModStart> write_idx ) ; vp9_copy_and_extend_frame ( src, & buf -> img ) ; <S2SV_ModStart> } else { vp9_copy_and_extend_frame_with_rect <S2SV_ModEnd> ( src, <S2SV_ModStart> img ) ; } # else vp9_copy_and_extend_frame ( src, & buf -> img ) ; # endif buf -> ts_start = ts_start ; buf -> ts_end = ts_end ; buf -> flags = flags ; # if USE_PARTIAL_COPY if ( ctx -> max_sz == 1 && active_map &&! flags ) { for ( row = 0 ; row < mb_rows ; ++ row ) { col = 0 ; while ( 1 ) { for ( ; col < mb_cols ; ++ col ) { if ( active_map [ col ] ) break ; } if ( col == mb_cols ) break ; active_end = col ; for ( ; active_end < mb_cols ; ++ active_end ) { if ( active_map [ active_end ] ) break ; } vp9_copy_and_extend_",0
140,"<S2SV_ModStart> method == LPF_PICK_FROM_Q || method == LPF_PICK_FROM_SUBIMAGE <S2SV_ModStart> int q = get_qindex_ac_quant ( cpi <S2SV_ModEnd> ) ; int <S2SV_ModStart> int filt_guess = ROUND_POWER_OF_TWO ( q <S2SV_ModEnd> * 20723 + <S2SV_ModStart> + 1015158, 18 ) ; if ( method == LPF_PICK_FROM_SUBIMAGE ) filt_guess -= 4 ; else filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; lf -> filter_level = clamp ( filt_guess, min_filter_level, max_filter_level ) ; } else { search_filter_level ( sd, cpi, method == LPF_PICK_FROM_Q <S2SV_ModEnd> ) ; }",0
141,<S2SV_ModStart> case BTA_DM_DISABLE_EVT : if ( p_data -> enable. status == BT_STATUS_SUCCESS ) { <S2SV_ModStart> ) ; } },0
142,"<S2SV_ModStart> int a = getint <S2SV_ModEnd> ( fmt,",0
143,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
144,"<S2SV_ModStart> vpx_codec_err_t res ; vpx_alg_priv_t * priv ; <S2SV_ModStart> ; else { priv = ctx -> priv -> alg_priv ; <S2SV_ModStart>. decode ( <S2SV_ModEnd> priv, data",0
145,"<S2SV_ModStart> inode * inode, struct iso_directory_record * * direntry <S2SV_ModStart> inode ) ; * direntry = NULL ;",0
146,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> ) ; } outpos += strlen ( outputbuffer ) ;",0
147,<S2SV_ModStart> self ) { PyObject_GC_UnTrack ( self ) ;,1
148,<S2SV_ModStart> ( ) ; if (! a ) return 0 ; <S2SV_ModStart> ] ) ; <S2SV_ModEnd> suffix_object ( p,0
149,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; Py_ssize_t i ; if ( lookup_attr_id ( obj, & PyId_type_ignores ) ) { return 1 <S2SV_ModStart> ++ ) { asdl_seq * type_ignores ; asdl_seq * body ; asdl_seq * type_ignores ; type_ignores = _PyObject_GetAttrId ( obj, & PyId_type_ignores ) ; if ( type_ignores == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } <S2SV_ModStart> Py_ssize_t len ; asdl_seq * type_ignores = _PyObject_GetAttrId ( obj, & PyId_type_ignores ) ; if ( type_ignores == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } len = PyList_GET_SIZE ( tmp ) ; type_ignores = _PyObject_GetAttr",0
150,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
151,<S2SV_ModStart> ; if ( msg_sys -> msg_name == NULL || uaddr_len == NULL ) { err = - EFAULT ; goto out_freeiov ; } if (,0
152,"<S2SV_ModStart> buffer_head * dibh <S2SV_ModEnd> ; u64 bn <S2SV_ModStart> unsigned ptrs_per_blk ; unsigned int end_of_metadata ; int eob = 0 ; enum alloc_state state ; __be64 * ptr ; __be64 zero_bn = 0 ; BUG_ON ( sheight < 1 ) ; BUG_ON ( dibh == NULL ) ; gfs2_trans_add_bh ( ip -> i_gl, dibh, 1 ) ; if ( height == sheight ) { struct buffer_head * bh ; ptr = metapointer ( height - 1, mp ) ; bh = mp -> mp_bh [ height - 1 ] ; dblks = gfs2_extent_length ( bh -> b_data, bh -> b_size, ptr, maxlen, & eob ) ; BUG_ON ( dblks < 1 ) ; state = ALLOC_DATA ; } else { ptrs_per_blk = height > 1? sdp -> sd_inptrs : sdp -> sd_diptrs ; dblks = min ( maxlen, ptrs_per_blk - mp -> mp_list [ height - 1",0
153,"<S2SV_ModStart>, vpx_codec_iface_name ( stream <S2SV_ModEnd> -> codec -> <S2SV_ModStart> -> use_i420? ""I420"" : ""YV12"" ) ) ; fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> index ) ; fprintf ( stderr, ""Destination <S2SV_blank> file: <S2SV_blank> %s\\n"", stream -> config. out_fn ) ; fprintf ( stderr, ""Encoder <S2SV_blank> parameters:\\n"" ) ; SHOW ( g_usage ) ; SHOW ( g_threads ) ; SHOW ( g_profile ) ; SHOW ( g_w ) ; SHOW ( g_h ) ; SHOW ( g_timebase. num ) ; SHOW ( g_timebase. den ) ; SHOW ( g_error_resilient ) ; SHOW ( g_pass ) ; SHOW ( g_lag_in_frames ) ; SHOW ( rc_dropframe_thresh ) ;",0
154,<S2SV_ModStart> -> psvi ; if ( copyNs!= NULL ) { <S2SV_ModStart> copyNs ) ; },0
155,"<S2SV_ModStart> { if ( safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> { if ( safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> { if ( safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.cshrc"",",0
156,<S2SV_ModStart> msix_tab_size ) { <S2SV_ModEnd> bzero ( msixcap,1
157,<S2SV_ModStart> ; if ( <S2SV_ModEnd> js_regexec ( re,0
158,<S2SV_ModStart> case OFreshOID : sp -- ; <S2SV_ModStart> >= 0 ) { <S2SV_ModStart> dest ) ; },0
159,"<S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; ksz8851WriteReg <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( interface, KSZ8851_ISR ) ; if ( ( isr & KSZ8851_ISR_LCIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> { ier &= IER_LCIE <S2SV_ModEnd> ; interface -> <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_TXIS ) ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } } if ( ( isr & KSZ8851_ISR_RXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> { ier &= IER_RXIE <S2SV_ModEnd> ; interface -> <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, ier )",0
160,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_quantization ( VP9_COMMON <S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> QINDEX_BITS ) ; return",0
161,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> p_buf, msglen )",1
162,"<S2SV_ModStart> ( fp, ""%s/%s.pem"" <S2SV_ModEnd>, file, <S2SV_ModStart> ( fp, ""%s/%s.pem"" <S2SV_ModEnd>, file, <S2SV_ModStart> ( fp, ""%s/%s.pem"" <S2SV_ModEnd>, file, <S2SV_ModStart> ( fp, ""%s/%s.pem"" <S2SV_ModEnd>, file, <S2SV_ModStart> ( fp, ""%s/%s.pem"" <S2SV_ModEnd>, file, <S2SV_ModStart> ( fp, ""%s/%s.pem"" <S2SV_ModEnd>, file, <S2SV_ModStart> ( fp, ""%s/%s.pem"" <S2SV_ModEnd>, file, <S2SV_ModStart> ( fp, ""%s/%s.pem"" <S2SV_ModEnd>, file, <S2SV_ModStart> ( fp, ""%s/%s.pem"" <S2SV_ModEnd>, file, <S2SV_ModStart> ( fp, ""%s/%s.pem"" <S2SV_ModEnd>, file, <S2SV_ModStart> ( fp, ""%s/%s.pem"" <S2SV_ModEnd>, file, <S2SV_ModStart> ( fp, ""%s/%s.pem"" <S2SV_ModEnd>, file, <S2SV_ModStart> ( fp, ""%s/%s.pem"" <S2SV_ModEnd>, file, <S2SV_ModStart> ( fp, ""%s/%s.pem"" <S2SV_ModEnd>, file, <S2SV_ModStart> ( fp, ""%s/%s.pem"" <S2SV_ModEnd>, file, <S2SV_ModStart> ( fp, ""%s/%s.pem"" <S2SV_ModEnd>, file, <S2SV_ModStart> ( fp, ""%s/%s.pem"" <S2SV_ModEnd>, file",0
163,"<S2SV_ModStart> ( ) ; strncat <S2SV_ModEnd> ( t1_buf_array, <S2SV_ModStart> t1_buf_array, t1_line_array, strlen ( t1_line_array ) - 1",0
164,"<S2SV_ModStart> int mi_col, MACROBLOCKD * xd, <S2SV_ModStart> int bsl = b_width_log2_lookup [ bsize ] <S2SV_ModEnd>, hbs = <S2SV_ModStart> / 4 ; <S2SV_ModEnd> assert ( bsize <S2SV_ModStart> case PARTITION_NONE : <S2SV_ModEnd> if ( mi_row <S2SV_ModStart> case PARTITION_VERT : <S2SV_ModEnd> if ( mi_col <S2SV_ModStart> case PARTITION_VERT : <S2SV_ModEnd> if ( mi_col <S2SV_ModStart> case PARTITION_HORZ : <S2SV_ModEnd> if ( xd <S2SV_ModStart> case PARTITION_NONE : <S2SV_ModEnd> if ( xd <S2SV_ModStart> case PARTITION_NONE : <S2SV_ModEnd> if ( xd <S2SV_ModStart> case PARTITION_NONE : <S2SV_ModEnd> if ( xd <S2SV_ModStart> case PARTITION_VERT : <S2SV_ModEnd> if ( xd <S2SV_ModStart> case PARTITION_NONE : <S2SV_ModEnd> if ( xd <S2SV_ModStart> case PARTITION_NONE : <S2SV_ModEnd> if ( xd <S2SV_ModStart> case PARTITION_NONE : <S2SV_ModEnd> if ( xd <S2SV_ModStart> case PARTITION_NONE : <S2SV_ModEnd> if ( xd <S2SV_ModStart> case PARTITION_NONE : <S2SV_ModEnd> if ( xd <S2SV_ModStart> case PARTITION_NONE : <S2SV_ModEnd> if ( xd <S2SV_ModStart> case PARTITION_NONE : <S2SV_ModEnd> if ( xd <S2SV_ModStart> case PARTITION_NONE : <S2SV_ModEnd> if ( xd <S2SV_ModStart> case PARTITION_NONE : <S2SV_ModEnd> if ( xd <S2SV_ModStart> case PARTITION_NONE : <S2SV_ModEnd> if ( xd <S2SV_ModStart> case PARTITION",0
165,"<S2SV_ModStart> key_ref ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) { ret = - ENOKEY ; goto error2 ; }",1
166,<S2SV_ModStart> ps_dec ) ; if ( 0 == ps_dec -> u1_first_slice_found ) { ps_dec -> u1_first_slice_found = 1 ; } <S2SV_ModStart> ps_dec ) ; if ( 0 == ps_dec -> u1_first_slice_found ) { ps_dec -> u1_first_slice_found = 0 ; },0
167,<S2SV_ModStart> var_off ) ; if (! src_known ||! dst_known ) return - EINVAL ; <S2SV_ModStart> var_off ) ; if (! src_known ||! dst_known ) return - EINVAL ;,0
168,"<S2SV_ModStart> ; if (! pTcon ) { cifs_dbg ( FYI, ""Invalid <S2SV_blank> file <S2SV_blank> configuration"" ) ; rc = - EINVAL ; goto lookup_out ; } if (",0
169,"<S2SV_ModStart> -> sk_bound_dev_if ; RCU_INIT_POINTER ( rt -> rt_opt, <S2SV_ModEnd> tcp_v4_save_options ( skb <S2SV_ModStart> tcp_v4_save_options ( skb )",0
170,"<S2SV_ModStart> { int number_of_frames = 0, number_of_keyframes = 0, encode_frame_count = 0 <S2SV_ModEnd> ; SvcInternal * <S2SV_ModStart> ( svc_ctx ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ""\\n"" ) ; <S2SV_ModEnd> for ( i <S2SV_ModStart> ++ i ) number_of_frames += <S2SV_ModEnd> encode_frame_count / si <S2SV_ModStart> si -> kf_dist ; <S2SV_ModEnd> svc_log ( svc_ctx",0
171,<S2SV_ModStart> = new_cols ; <S2SV_ModEnd> screen -> sb_buffer,0
172,"<S2SV_ModStart> n ) { <S2SV_ModEnd> char * literal_start <S2SV_ModStart> ; for ( int i = 0 ; i < ( int ) ( end - * str ) ; i ++ ) { char ch = * * str ; if (! in_named_escape && ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 1 ; } else if ( in_named_escape && ch == '}' ) { in_named_escape = 0 ; } else if ( ch == '{' || ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } if ( ch == '}' ) { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; return - 1 ; } } else { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; return",0
173,"<S2SV_ModStart> ) ; struct dump_dir_data <S2SV_ModEnd> * dd = <S2SV_ModStart> g_settings_dump_location ) ; if (! dd ) { log_error ( ""Could <S2SV_blank> not <S2SV_blank> create <S2SV_blank> dump <S2SV_blank> directory"" ) ; return NULL ; }",0
174,<S2SV_ModStart> ; if ( ( x + w1 ) > ( ptr -> width ) || ( y + h1 ) > ( ptr -> height ) ) { if ( x1 == 0 ) x1 = ptr -> width ; else x1 = ptr -> height ; } if ( <S2SV_ModStart> ; if ( ( y + h1 ) > ( ptr -> height ) || ( y1 + h1 ) > ( ptr -> height ) ) { if ( y1 == 0 ) y1 = ptr -> height ; else y1 = ptr -> height ; } if ( <S2SV_ModStart> ; if ( ( x + w1 ) > ( ptr -> width ) || ( y1 + h1 ) > ( ptr -> width ) || ( y1 + h1 ) > ( ptr -> height ) ) { if ( x1 == 0 ) x1 = ptr -> width ; else x1 = ptr -> width ; } if ( <S2SV_ModStart> ; if ( ( y + h1 ) > ( ptr -> height ) || ( y1 + h1 ) > ( ptr -> height ) ) { if ( y1 == 0 ) y1 = ptr -> height ; else y1 = ptr -> height ; } if (,0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
176,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mv_stride",0
177,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; MODE_INFO * * mi_8x8 = cm -> mi_grid_visible ; MODE_INFO * * prev_mi_8x8 = cm -> prev_mi_grid_visible ; BLOCK_SIZE bsize ; <S2SV_ModStart> -> left_context, 0, sizeof ( xd -> left_context ) ) ; vpx_memset ( xd -> left_seg_context, 0, sizeof ( xd -> left_seg_context ) ) ; for ( mi_col = tile -> mi_col_start ; mi_col < tile -> mi_col_end ; mi_col += MI_BLOCK_SIZE ) { int dummy_rate = 0 ; int64_t dummy_dist = 0 ; const int idx_str = cm -> mi_stride * mi_row + mi_col ; MODE_INFO * * mi_8x8 = cm -> mi_grid_visible + idx_str ; BLOCK_SIZE dummy_rate = 0 ; int64_t dummy_dist = 0 ; const int idx_str_",0
178,<S2SV_ModStart> u_int8_t state ; if ( nf_ct_protocol ( ct )!= IPPROTO_DCCP ) return false ;,0
179,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static void <S2SV_ModEnd> ip_options_get_finish ( struct <S2SV_ModStart> ip_options_get_finish ( struct ip_options_rcu <S2SV_ModEnd> * net, <S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * opt, <S2SV_ModStart> & 3 ) rcu_assign_pointer ( <S2SV_ModStart> __data [ optlen <S2SV_ModEnd> ] = IPOPT_END <S2SV_ModStart> = IPOPT_END ; rcu_assign_pointer ( <S2SV_ModStart> = optlen ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
180,"<S2SV_ModStart> ; if ( strcmp ( connection, ""Upgrade"" ) == 0 ) { const char * ws_version = http_request_get_header ( info -> request, ""Sec-WebSocket-Version"" ) ; if ( ws_version == NULL || strcmp ( ws_version, ""13"" )!= 0 ) goto error ; const char * ws_upgrade = http_request_get_header ( info -> request, ""Sec-WebSocket-Upgrade"" ) ; if ( ws_upgrade == NULL || strcasecmp ( ws_upgrade, ""Upgrade"" ) == 0 ) { const char * ws_version = http_request_get_header ( info -> request, ""Sec-WebSocket-Version"" ) ; if ( ws_version == NULL || strcmp ( ws_version, ""13"" )!= 0 ) goto error ; const char * ws_upgrade = http_request_get_header ( info -> request, ""Sec-WebSocket-Upgrade"" ) ; if ( ws_upgrade == NULL || strcasecmp ( ws_upgrade, ""Upgrade"" ) == 0 ) { const char * ws_upgrade = http_request_get_header ( info -> request, ""Sec-WebSocket-Upgrade"" ) ; if ( ws_upgrade ==",0
181,"<S2SV_ModStart> * findalldevs_if ; uint32 nif = 0 ; if ( rpcapd_discard ( pars -> sockctrl, plen ) == - 1 ) { return - 1 ; } if ( pcap_findalldevs ( & alldevs, errmsgbuf ) == - 1 ) goto error ; if ( alldevs == NULL ) { if ( rpcap_senderror ( pars -> sockctrl, ver, PCAP_ERR_NOREMOTEIF, ""No <S2SV_blank> interfaces <S2SV_blank> found! <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> libpcap/WinPcap <S2SV_blank> is <S2SV_blank> properly <S2SV_blank> installed"" "" <S2SV_blank> and <S2SV_blank> you <S2SV_blank> have <S2SV_blank> the <S2SV_blank> right <S2SV_blank> to <S2SV_blank> access <S2SV_blank> to <S2SV_blank> the <S2SV_blank> remote <S2SV_blank> device."", errbuf ) == - 1 ) { rpcapd_log ( LOGPRIO_ERROR, ""Send <S2SV_blank> to <S2SV_blank> client <S2SV_blank> failed: <S2SV_blank> %s"", errbuf ) ; return - 1 ; } return 0 ; } for ( d = alldevs ; d!= NULL ; d = d -> next ) { nif ++ ; if ( d -> description ) <S2SV_ModStart> d -> description <S2SV_ModEnd> ) ; if <S2SV_ModStart> d -> name <S2SV_ModEnd> ) ; plen <S2SV_ModStart> struct rpcap_findalldevs_if",0
182,"<S2SV_ModStart>, client_uid, DUMP_DIR_MODE_DEFAULT <S2SV_ModEnd> ) ; if",0
183,<S2SV_ModStart> 1 ) ; ++ x <S2SV_ModEnd> ) { index,0
184,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
185,"<S2SV_ModStart> ) ; } if ( ( dds_info. pixelformat. flags & ( DDPF_RGB | DDPF_LUMINANCE ) )!= ( DDPF_RGB | DDPF_LUMINANCE ) ) { ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; }",0
186,"<S2SV_ModStart> in_cksum ( bp, len <S2SV_ModStart> in_cksum ( bp, len",0
187,"<S2SV_ModStart> &&! ptrace_has_cap ( task -> group_leader -> user_ns, mode ) ) { rcu_read_unlock ( ) ; return - EPERM ; } rcu_read_unlock ( ) ; if (! dumpable &&! ptrace_has_cap",0
188,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
189,<S2SV_ModStart> -> s_sei_params. i4_sei_user_data_registered_ITU_T_T36 = 1 ; ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; break ; case SEI_USER_DATA_REGISTERED_ITU_T_T37 : ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; ps_parse -> s_sei_params. i4_sei_user_data_registered_ITU_T_37 = 1 ; ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; break ; case SEI_USER_DATA_REGISTERED_ITU_T_37 : ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; ps_parse -> s_sei_params. i4_sei_user_data_registered_ITU_T_37 = 1 ; ps_parse -> s_sei_params. i4_sei_user_data_registered_,0
190,<S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( *,0
191,"<S2SV_ModStart> * name, my_bool <S2SV_ModEnd> rep_quick ) { <S2SV_ModStart> ; if (! rep_quick && <S2SV_ModStart> ) ) ; <S2SV_ModEnd> DBUG_PRINT ( ""info"" <S2SV_ModStart>, ( ""is <S2SV_blank> quick <S2SV_blank> repair: <S2SV_blank> %d\\n"" <S2SV_ModEnd>, rep_quick )",0
192,<S2SV_ModStart> } pairs = palloc0 <S2SV_ModEnd> ( pcount *,0
193,"<S2SV_ModStart> val ) ; if (! <S2SV_ModStart>, val ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> invalid <S2SV_blank> variable"", r -> name )",0
194,"<S2SV_ModStart> ) ) { if ( clen < 4 ) { return bad_request ( c, 400, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( clen < 4 ) { return bad_request ( c, 400, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( clen < 4 ) { return bad_request ( c, 400, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( clen < 4 ) { return bad_request ( c, 400, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( clen < 4 ) { return bad_request ( c, 400, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( clen < 4 ) { return bad_request ( c, 400, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( clen < 4 ) { return bad_request ( c, 400, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( clen < 4 ) { return bad_request ( c, 400, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( clen < 4 ) { return bad_request ( c, 400, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( clen < 4 ) { return bad_request ( c, 400,",0
195,"<S2SV_ModStart> vp9_fht16x16_c ( const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> 256 ] ; tran_low_t <S2SV_ModEnd> * outptr = <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16",0
196,"<S2SV_ModStart> ; if ( g_str_has_prefix ( new_data, "".shell"" ) ) { g_autofree gchar * new_shell = g_strdup_printf ( ""%s <S2SV_blank> %s <S2SV_blank> %s"", new_data, "".shell"", escaped_app, escaped_branch ) ; g_string_append_printf ( new_shell, ""\\n"" ) ; g_string_append_printf ( new_shell, ""\\n"" ) ; } if ( g_str_has_prefix ( new_data, "".shell"" ) ) { g_autofree gchar * new_shell = g_strdup_printf ( ""%s <S2SV_blank> %s"", new_data, "".shell"" ) ; g_string_append_printf ( new_shell, ""\\n"" ) ; g_string_append_printf ( new_shell, ""\\n"" ) ; g_string_append_printf ( new_shell, ""\\n"" ) ; g_string_append_printf ( new_shell, ""\\n"" ) ; g_string_append_printf ( new_shell, ""\\n"" ) ; g_string_append_printf ( new_shell",0
197,"<S2SV_ModStart> * temp_filename = osi_safe_calloc <S2SV_ModEnd> ( strlen ( <S2SV_ModStart> ; if ( temp_filename == NULL <S2SV_ModEnd> ) { LOG_ERROR <S2SV_ModStart> ( fp, ""[%s]\\n\\n"" <S2SV_ModEnd>, section -> <S2SV_ModStart> entry -> value ) ; } if ( list_next ( node )!= list_end ( config -> sections ) ) fputc ( '\\n', fp ) ; } fflush ( fp ) ; fclose ( fp ) ; if ( chmod ( temp_filename, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP ) == - 1 ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> change <S2SV_blank> file <S2SV_blank> permissions <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, filename, strerror ( errno ) ) ; goto error ; } if ( rename ( temp_filename, filename ) == - 1 ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> change <S2SV_blank> file <S2SV_blank> permissions <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, filename, strerror ( errno ) ) ; goto error ; } if ( chmod ( temp_filename, S_IRUSR | S_IWUSR",0
198,"<S2SV_ModStart> tptr ) ; ND_TCHECK2 ( * tptr, len ) ;",0
199,"<S2SV_ModStart> userData, target <S2SV_ModEnd> ) ; ctxt",0
200,"<S2SV_ModStart> ( ) ; size_t len = strlen ( request ) ; <S2SV_ModStart> ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %zu\\r\\n"" <S2SV_ModEnd> ""%s"" ""\\r\\n"" ""%s"" <S2SV_ModStart> ""%s"" ""\\r\\n"" ""%s"", request, len",0
201,"<S2SV_ModStart> ) ; } if ( safe_chown ( dest, getuid ( ), getgid ( ) ) < 0 ) errExit ( ""safe_chown"" ) ; if ( safe_chmod ( dest, S_IRUSR | S_IWUSR ) < 0 ) errExit ( ""safe_chmod"" ) ; unlink ( src ) ; <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
202,<S2SV_ModStart>!= BFA_STATUS_OK ) { kfree ( fcstats ) ; <S2SV_ModStart> return NULL ; },1
203,"<S2SV_ModStart> -> x = Max ( 1.0f, <S2SV_ModStart> value -> x <S2SV_ModEnd> ) ) ; <S2SV_ModStart> -> y = Max ( 1.0f, <S2SV_ModStart> value -> y <S2SV_ModEnd> ) ) ; <S2SV_ModStart> -> z = Max ( 1.0f, <S2SV_ModStart> value -> z <S2SV_ModEnd> ) ) ;",0
204,<S2SV_ModStart> ; rec -> <S2SV_ModEnd> sasl_password = src,0
205,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
206,"<S2SV_ModStart> o, datao ; if ( exif_mnote_data_canon_empty ( n ) ) return",0
207,<S2SV_ModStart> ) ) { if (! ( param -> testflag & ( T_DESCRIPT | T_READONLY ) ) ) { <S2SV_ModStart> filename ) ; },0
208,"<S2SV_ModStart> olen ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> long hex ; <S2SV_ModEnd> if (! <S2SV_ModStart> hex ) ; if (! <S2SV_ModEnd> Curl_convert_from_network ( handle <S2SV_ModStart>, 1 ) <S2SV_ModEnd> ) { free",0
209,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
210,<S2SV_ModStart> ; def -> <S2SV_ModEnd> session_setup = usm_session_init,0
211,<S2SV_ModStart> NULL ; return <S2SV_ModEnd> match ( prog,0
212,<S2SV_ModStart> idx ] ; <S2SV_ModEnd> switch ( action <S2SV_ModStart> ) ; } <S2SV_ModEnd> return SNMP_ERR_NOERROR ;,0
213,<S2SV_ModStart> 255U ; } if ( pixels < 256 ) return ( - 1 ) ;,0
214,<S2SV_ModStart> timer ) ; spin_lock_irq ( & slave_active_lock ) ; <S2SV_ModStart> open_list ) { <S2SV_ModEnd> _snd_timer_stop ( slave <S2SV_ModStart> = NULL ; list_del_init ( & slave -> ack_list ) ; } spin_unlock <S2SV_ModEnd> ( & slave_active_lock <S2SV_ModStart> slave_active_lock ) ; <S2SV_ModEnd> mutex_unlock ( &,0
215,<S2SV_ModStart> -> u1_dpb_commands_read ) { <S2SV_ModStart> ps_dec ) ; } else { ps_dec -> u4_bitoffset = 0 ; },0
216,"<S2SV_ModStart> decode ) { uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > info -> rasterSize || widthOverflow > 0 || heightOverflow > 0 ) { void * tmpRasterBits = reallocarray ( info -> rasterBits, newRasterSize, sizeof ( uint_fast32_t ) ) ; <S2SV_ModStart> -> originalHeight ; <S2SV_ModEnd> if ( newRasterSize",0
217,<S2SV_ModStart> validator -> user ) || cherokee_buffer_is_empty ( & conn -> validator -> passwd,0
218,<S2SV_ModStart> bus ] ; if ( bi == NULL ) return <S2SV_ModEnd> ; si =,0
219,"<S2SV_ModStart>, timeo ) <S2SV_ModEnd> ; if (",1
220,<S2SV_ModStart> += 9 ; ( <S2SV_ModStart> isspace ( * ( s + 9 ) <S2SV_ModEnd> ) ; s <S2SV_ModStart> t &&! ( <S2SV_ModStart> isspace ( * ( s + 1 ) <S2SV_ModEnd> ) ) t,0
221,"<S2SV_ModStart>. active_set ; if ( uipc_main. read_set == UINT_MAX ) { BTIF_TRACE_EVENT ( ""UIPC <S2SV_blank> READ <S2SV_blank> THREAD <S2SV_blank> EXITING"" ) ; uipc_main_cleanup ( ) ; uipc_main. tid = 0 ; BTIF_TRACE_EVENT ( ""UIPC <S2SV_blank> READ <S2SV_blank> THREAD <S2SV_blank> DONE"" ) ; break ; }",0
222,<S2SV_ModStart> msixcap msixcap ; if <S2SV_ModEnd> ( msgnum >= <S2SV_ModStart> msix_table_init ( dev <S2SV_ModEnd> ) ; pci_populate_msixcap,0
223,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_int64_t <S2SV_ModEnd> decode_unsigned_max ( struct <S2SV_ModStart> max ) { vpx_int64_t <S2SV_ModEnd> data = vp9_rb_read_literal,0
224,<S2SV_ModStart> == NULL ) return KRB5KDC_ERR_PREAUTH_FAILED <S2SV_ModEnd> ; status = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> X509_NAME_free ( is,0
225,<S2SV_ModStart> <S2SV_null> <S2SV_null> static MV_REFERENCE_FRAME <S2SV_ModEnd> select_tx_mode ( const <S2SV_ModStart> cpi ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; <S2SV_ModStart> else if ( frame_type <S2SV_ModEnd> == USE_LARGESTALL ) <S2SV_ModStart> else if ( frame_type <S2SV_ModEnd> == USE_FULL_RD ),0
226,<S2SV_ModStart> ) ; } if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT,0
227,<S2SV_ModStart> ( buf1 -> tile_size <S2SV_ModEnd> < buf2 -> <S2SV_ModStart> < buf2 -> tile_size <S2SV_ModEnd> ) { return <S2SV_ModStart> ( buf1 -> tile_size <S2SV_ModEnd> == buf2 -> <S2SV_ModStart> == buf2 -> tile_size <S2SV_ModEnd> ) { return,0
228,<S2SV_ModStart> ) + size ; if ( unlikely (! sz ) ) return NULL,0
229,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,1
230,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs,",0
231,"<S2SV_ModStart> fd, EPOLLIN | EPOLLRDHUP",0
232,<S2SV_ModStart> ( ) ; errors += test_url_formatting ( ) ;,0
233,<S2SV_ModStart> -> lun ) sas_eh_finish_cmd <S2SV_ModEnd> ( cmd ),1
234,"<S2SV_ModStart>, end_col_offset ; if ( TYPE ( CHILD ( n, name_i + 1 ) ) == FUNCTION ) { return NULL ; } <S2SV_ModStart> 2 ; } if ( TYPE ( CHILD ( n, name_i + 3 ) ) == FUNCTION ) { body = ast_for_funcdef_body ( c, CHILD ( n, name_i + 3 ) ) ; if (! body ) return NULL ; name_i += 3 ; } <S2SV_ModStart> end_col_offset ) ; get_last_end_pos ( body, & end_lineno, & end_col_offset ) ; <S2SV_ModStart> ( is_async ) { if ( TYPE ( CHILD ( n, name_i + 4 ) ) == FUNCTION ) <S2SV_ModStart>, returns, end_lineno, end_col_offset, c -> c_arena ) ; } else { if ( TYPE ( CHILD ( n, name_i + 4 ) ) == FUNCTION ) { body = ast_for_funcdef_body ( c, CHILD ( n, name_i + 4 ) ) ; if (! body ) return NULL ; name_i += 4 ; } <S2SV_ModStart>, returns, end_lineno, end_col_offset,",0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) break ;",0
237,,1
238,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
239,"<S2SV_ModStart> if ( position >= <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> headend, 1, position - psf -> headend, psf ) ; psf -> headindex = position ; break ; case SEEK_CUR : if ( psf -> headindex + position < 0 ) break ; if ( psf -> headindex >= SIGNED_SIZEOF ( psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; if ( psf -> headindex + position <= psf -> headend ) { psf -> headindex = psf -> headend ; psf_fseek ( psf, position, SEEK_CUR ) ; break ; } ; if ( psf -> headindex + position <S2SV_ModStart> psf -> headend > <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> headend, 1, position - psf -> headend, psf ) ; psf -> headindex = <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> headend <S2SV_ModEnd> ; break ;",0
240,<S2SV_ModStart> u4_ofst ) ; if ( ps_cabac -> au1_ctxt_models == NULL ) { return ( IHEVCD_ERROR_T ) IHEVCD_INVALID_PARAMETER ; },0
241,"<S2SV_ModStart> ; } } if ( off < ctx -> size ) { if ( line -> indent > 0 ) line -> indent = md_line_indentation ( ctx, total_indent, off, & off ) ; if ( line -> indent > 0 ) line -> indent = md_line_indentation ( ctx, total_indent, off, & off ) ; if ( line -> indent > 0 ) line -> indent = md_line_indentation ( ctx, total_indent, off, & off ) ; if ( line -> indent > 0 ) line -> indent = md_line_indentation ( ctx, total_indent, off, & off ) ; if ( line -> indent > 0 ) line -> indent = md_line_indentation ( ctx, total_indent, off, & off ) ; if ( line -> indent > 0 ) line -> indent = md_line_indentation ( ctx, total_indent, off, & off ) ; if ( line -> indent > 0 ) line -> indent = md_line_indentation ( ctx, total_indent, off, & off ) ; }",0
242,<S2SV_ModStart> perf_event_context * ctx <S2SV_ModEnd> ; struct task_struct <S2SV_ModStart> task_struct * task ; ctx = perf_event_ctx_lock ( event ) ; task = perf_event_ctx_get_task ( event ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> lock ) ; perf_event_ctx_put ( event ) <S2SV_ModEnd> ; } raw_spin_unlock_irq,0
243,<S2SV_ModStart> -> post_proc_flag = <S2SV_ModEnd> ctx -> postproc_cfg <S2SV_ModStart>. noise_level ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
244,"<S2SV_ModStart> = 0 ; if ( msg_len < sizeof ( struct olsr_msg4 ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> too <S2SV_blank> short <S2SV_blank> msg_len <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6, msg_len ) ) ; goto trunc ; } <S2SV_ModStart> ) ) ; if ( msg_len < sizeof ( struct olsr_msg6 ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> too <S2SV_blank> short <S2SV_blank> msg_len <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6, msg_len ) ) ; goto trunc ; } <S2SV_ModStart> ) ) ; if ( msg_len < sizeof ( struct olsr_msg4 ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> too <S2SV_blank> short <S2SV_blank> msg_len <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6, msg_len ) ) ; goto trunc ; } <S2SV_ModStart> ) ) ; if ( msg_len < sizeof ( struct olsr_msg4 ) ) { ND_PRINT ( ( ndo, """,0
245,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> int64_t store_reg [ <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vpx_usec_timer_start ( & <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,0
246,"<S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file <S2SV_blank> %s\\n"", src <S2SV_ModEnd> ) ; exit <S2SV_ModStart> 0 ) ; if ( copy_file ( src, dest ) == - 1 ) errExit ( ""copy_file"" ) ; else <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> dest ) ; <S2SV_ModEnd> _exit ( 0",0
247,<S2SV_ModStart> ) ) ; if ( sfb > IXHEACD_MAX_FRAME_SIZE ) sfb = IXHEACD_MAX_FRAME_SIZE ; <S2SV_ModStart> ) ) ; if ( sfb > IXHEACD_MAX_FRAME_SIZE ) sfb = IXHEACD_MAX_FRAME_SIZE ; <S2SV_ModStart> ) ) ; if ( sfb > IXHEACD_MAX_FRAME_SIZE ) sfb = IXHEACD_MAX_FRAME_SIZE ; <S2SV_ModStart> ) ) ; if ( sfb > IXHEACD_MAX_FRAME_SIZE ) sfb = IXHEACD_MAX_FRAME_SIZE ; <S2SV_ModStart> ) ) ; if ( sfb > IXHEACD_MAX_FRAME_SIZE ) sfb = IXHEACD_MAX_FRAME_SIZE ; <S2SV_ModStart> ) ) ; if ( sfb > IXHEACD_MAX_FRAME_SIZE ) sfb = IXHEACD_MAX_FRAME_SIZE ; <S2SV_ModStart> ) ) ; if ( sfb > IXHEACD_MAX_FRAME_SIZE ) sfb = IXHEACD_MAX_FRAME_SIZE ;,0
248,<S2SV_ModStart> prov_spec = parsed_require_line <S2SV_ModEnd> ; spec = <S2SV_ModStart> r ) ; <S2SV_ModEnd> return AUTHZ_OK ;,0
249,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> rows, image -> cols ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
250,<S2SV_ModStart> (! proto_end || proto_end - url < 3,0
251,<S2SV_ModStart> end = path ; if ( end > path + path_len ) return - FDT_ERR_OVERFLOW,0
252,"<S2SV_ModStart> ) ; } if (! ( loops % 50 ) ) { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ), zmalloc_used_memory ( ) ) ; } <S2SV_ModStart> ) ; } if (! ( loops % 50 ) ) { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ), zmalloc_used_memory ( ) ) ; }",0
253,"<S2SV_ModStart> = g_timeout_add_seconds ( 10 <S2SV_ModEnd>, ( GSourceFunc",0
254,<S2SV_ModStart> book -> dim && i < n,1
255,<S2SV_ModStart> action ) { if ( r < 0.0 ) return ; <S2SV_ModStart> action ) ; return ;,0
256,<S2SV_ModStart> this_h ) { int i ; <S2SV_ModStart> 16 ) { for ( i = 0 ; i < 2 ; i ++ ) { <S2SV_ModStart> -> predict [ i ] [ 0 ] [ 0 ] = vp9_convolve8_copy ; sf -> predict [ i ] [ 0 ] [ 1 ] = vp9_convolve8_avg ; sf -> predict [ i ] [ 1 ] [ 0 ] = vp9_convolve8_horiz ; sf -> predict [ i ] [ 1 ] [ 0 ] = vp9_convolve8_avg_horiz ; sf -> predict [ i ] [ 1 ] [ 1 ] = vp9_convolve8_horiz ; } } else { sf -> predict [ i ] [ 0 ] [ 0 ] = vp9_convolve8_copy ; sf -> predict [ i ] [ 0 ] [ 1 ] = vp9_convolve8_avg ; sf -> predict [ i ] [ 1 ] [ 0 ] = vp9_convolve8_horiz ; sf -> predict [ i ] [ 1 ] [ 0 ] = vp9_convolve8_horiz ; sf -> predict [ i ] [ 1 ] [ 0 ] = vp9_convolve,0
257,<S2SV_ModStart> (! sock <S2SV_ModEnd> ) OE_RAISE_ERRNO ( <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
258,<S2SV_ModStart> ; if ( msg. msg_namelen > sizeof ( src_info ) ) return - EINVAL ; if (,0
259,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> sctp_v6_protosw_exit ( ) <S2SV_ModStart> ( ) ; unregister_pernet_subsys ( & sctp_net_ops ) ;,0
260,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void show_psnr (,0
261,<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen (,1
262,"<S2SV_ModStart> ; TRACE_DEBUG ( ""CIDER=0x%04x"" <S2SV_ModEnd> PRIX16 ""\\r\\n"", <S2SV_ModStart> ; TRACE_DEBUG ( ""PHY1ILR=0x%04x"" <S2SV_ModEnd> PRIX16 ""\\r\\n"", <S2SV_ModStart> ; TRACE_DEBUG ( ""PHY1IHR=0x%04x"" <S2SV_ModEnd> PRIX16 ""\\r\\n"", <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ERROR_OUT_OF_MEMORY ; } memset ( context -> txBuffer, 0, ETH_MAX_FRAME_SIZE ) ; memset ( context -> rxBuffer, 0, ETH_MAX_FRAME_SIZE ) ; <S2SV_ModStart> ( interface, KSZ8851_MARH <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARM <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARM <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARL <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARL <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_",0
263,"<S2SV_ModStart> skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
264,"<S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; ret = <S2SV_ModEnd> fit_check_format ( fit <S2SV_ModStart>, IMAGE_SIZE_INVAL ) ; if ( ret <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; ret = <S2SV_ModEnd> - ENOEXEC ; <S2SV_ModStart> - ENOEXEC ; goto error ; <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; ret = <S2SV_ModEnd> - ENOEXEC ; <S2SV_ModStart> - ENOEXEC ; goto error ; <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; ret = <S2SV_ModEnd> - ENOEXEC ; <S2SV_ModStart> - ENOEXEC ; goto error ; <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; ret = - ENOEXEC ; goto error ; <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; ret = <S2SV_ModEnd> - ENOEXEC ; <S2SV_ModStart> - ENOEXEC ; goto error ; <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; ret = <S2SV_ModEnd> - ENOEXEC ; <S2SV_ModStart> - ENOEXEC ; goto error ; <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; ret = <S2SV_ModEnd> - ENOEXEC ; <S2SV_ModStart> - ENOEXEC ; goto error ; <S2SV_ModStart> - ENOEXEC ; goto error ; <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; ret = - ENOEXEC ; goto error ; <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; ret = <S2SV_ModEnd> - ENOEXEC ; <S2SV_ModStart> - ENOEXEC ; goto error ;",0
265,"<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> uinput_fd, UI_DEV_DESTROY )",1
266,<S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> = rc -> avg_frame_bandwidth <S2SV_ModEnd> ; # endif,1
267,"<S2SV_ModStart> i ], ""-u"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart>, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""-u"" <S2SV_ModEnd> ) ; argv",0
268,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
269,"<S2SV_ModStart> ib ] ; dequant_ptr = d -> dequant ; coeff_ptr = b -> coeff ; qcoeff_ptr = b -> qcoeff ; dqcoeff_ptr = d -> dqcoeff ; i0 =! type ; eob = * d -> eob ; rdmult = mb -> rdmult * err_mult ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ; rddiv = mb -> rddiv ; best_mask [ 0 ] = best_mask [ 1 ] = 0 ; tokens [ eob ] [ 0 ]. token = DCT_EOB_TOKEN ; tokens [ eob ] [ 0 ]. error = 0 ; tokens [ eob ] [ 0 ]. qc = 0 ; * ( tokens [ eob ] + 1 ) = * ( tokens [ eob ] + 0 ) ; next = eob ; for ( i = eob ; i -- > i0 ; i -- > i0 ) { int dx ; int dx2 ; rc = vp8_default_zig_zag1 ( dx, dx2 ) ; rc = vp",0
270,<S2SV_ModStart> FN_REFLEN ] ; if ( strlen ( opt_basedir ) + 1 > sizeof ( buff ) - 1 ) { error = - 1 ; goto exit ; },0
271,<S2SV_ModStart> decrypt_cb ) { ptrdiff_t <S2SV_ModEnd> n = ( <S2SV_ModStart> n = ( ptrdiff_t <S2SV_ModEnd> ) ( data_end,0
272,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
273,"<S2SV_ModStart> * returnrate, RATE_DISTORTION <S2SV_ModEnd> * returndistortion, <S2SV_ModStart> int zero_mv_sse = - 1, best_sse = - 1 <S2SV_ModEnd>, best_rd_sse = <S2SV_ModStart>, best_rd_sse = - 1 <S2SV_ModEnd> ; # endif <S2SV_ModStart>. rd = - 1 <S2SV_ModEnd> ; best_mode. <S2SV_ModStart>. yrd = - 1 <S2SV_ModEnd> ; best_mode. <S2SV_ModStart>. intra_rd = - 1 <S2SV_ModEnd> ; this_mode. <S2SV_ModStart>. rate = - 1 <S2SV_ModEnd> ; this_mode. <S2SV_ModStart>. distortion = - 1 <S2SV_ModEnd> ; this_mode. <S2SV_ModStart>. rate = - 1 <S2SV_ModEnd> ; this_mode. <S2SV_ModStart>. distortion = - 1 <S2SV_ModEnd> ; this_mode. <S2SV_ModStart>. rate = - 1 <S2SV_ModEnd> ; this_mode. <S2SV_ModStart>. rate = - 1 <S2SV_ModEnd> ; this_mode. <S2SV_ModStart>. distortion = - 1 <S2SV_ModEnd> ; this_mode. <S2SV_ModStart>. rate = - 1 <S2SV_ModEnd> ; this_mode. <S2SV_ModStart>. rate = - 1 <S2SV_ModEnd> ; this_mode. <S2SV_ModStart>. rate = - 1 <S2SV_ModEnd> ; this_mode. <S2SV_ModStart>. rate = - 1 <S2SV_ModEnd> ; this_mode. <S2SV_ModStart>. rate = - 1 <S2SV_ModEnd> ; this_mode. <S2SV_ModStart>. rate = - 1",0
274,"<S2SV_ModStart> goto error ; if ( stat ( h -> filename, & statbuf ) == - 1 ) goto error ;",0
275,"<S2SV_ModStart> u1_level_idc, u1_seq_parameter_set_id, u1_frame_cropping_flag <S2SV_ModStart> ) ; } u1_frame_cropping_flag = ih264d_get_bit_h264 ( ps_bitstrm, 4 ) ; COPYTHECONTEXT ( ""SPS: <S2SV_blank> frame_cropping_flag"", u1_frame_cropping_flag ) ;",0
276,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * params = ( vpx_svc_parameters_t * ) <S2SV_ModStart> return VPX_CODEC_INVALID_PARAM ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; <S2SV_ModStart> -> svc. <S2SV_ModEnd> temporal_layer_id = params <S2SV_ModStart> params -> temporal_layer <S2SV_ModEnd> ; if (",0
277,"<S2SV_ModStart> out ) { uint32 bitspersample ; uint32 samplesperpixel ; uint16 input_compression, input_photometric ; uint32 width, length ; struct cpTag * p ; uint32 width ; uint32 length ; struct cpTag * p ; if ( compression!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_COMPRESSION, compression ) ; TIFFGetFieldDefaulted ( in, TIFFTAG_BITSPERSAMPLE, & bitspersample ) ; else if ( samplesperpixel!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_SAMPLESPERPIXEL, samplesperpixel ) ; if ( bitspersample!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_BITSPERSAMPLE, bitspersample ) ; else if ( samplesperpixel!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_SAMPLESPERPIXEL, samplesperpixel ) ; if ( bitspersample!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_BITSPERSAMPLE, bitspersample ) ; else if ( samplesperpixel!= ( uint32 ) - 1 ) TIFFSetField (",0
278,"<S2SV_ModStart> a ) { char * pn ; char c ; int r ; struct stat st ; pn = a -> name ; if ( archive_strlen ( & ( a -> path_safe ) ) > 0 ) { char * p = a -> path_safe. s ; while ( * pn!= '\\0' && ( * p == * pn ) ) ++ p, ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '/' || * pn!= '\\0' ) ) ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '/' ) ) ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '/' ) ) ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '/' ) ) ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '\\0' && ( * pn!= '/' ) ) ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn",0
279,<S2SV_ModStart> unsigned int link_count ; struct kernel_lb_addr loc ; struct indirectEntry * ie ; struct indirectEntry * ie ; ie = ( struct indirectEntry * ) ibh -> b_data <S2SV_ModStart> ibh ) { <S2SV_ModEnd> loc = lelb_to_cpu <S2SV_ModStart> extLocation ) ; <S2SV_ModEnd> nbh = udf_read_ptagged <S2SV_ModStart> & ident ) ; if ( nbh ) <S2SV_ModEnd> { if (,0
280,"<S2SV_ModStart> get_uv_tx_size ( mbmi ) ; const int filter_level = get_filter_level ( lfi_n, mbmi ) ; uint64_t * const left_y = & lfm -> left_y [ tx_size_y ] ; uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const left_uv = & lfm -> left_uv [ tx_size_uv ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv ; int i ; if (! filter_level ) { return ; } else { const int w = num_8x8_blocks_wide_lookup [ block_size ] ; const int h = num_8x8_blocks_high_lookup [ block_size ] ; int index = shift_y ; for ( i = 0 ; i < h ; i ++ ) { vpx_memset ( <S2SV_ModEnd> lfm -> lfl_y <S2SV_ModStart>",0
281,"<S2SV_ModStart> mq_ops ) { spin_lock_irqsave_nested <S2SV_ModEnd> ( & fq <S2SV_ModStart> mq_flush_lock, flags, SINGLE_DEPTH_NESTING",0
282,<S2SV_ModStart> uint8_t val ; if ( addr > ( vdev -> config_len - sizeof ( val ) ) ) return ( uint32_t ) - 1 ; <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,0
283,<S2SV_ModStart> ) ) { ovalue = NULL ;,0
284,<S2SV_ModStart> ) sizeof ( effect_param_t_t <S2SV_ModEnd> ) ) {,0
285,<S2SV_ModStart> ; } } if ( j < num_versions ) { k5free ( ret ) ; ret = NULL ; err = ENOMEM ; goto cleanup ; },0
286,"<S2SV_ModStart> 0x02 ) ; if ( crgram_len > SC_MAX_APDU_BUFFER_SIZE - 1 ) { r = sc_transmit_apdu ( card, & apdu ) ; LOG_TEST_RET ( card -> ctx, r, ""APDU <S2SV_blank> transmit <S2SV_blank> failed"" ) ; return r ; }",0
287,"<S2SV_ModStart> ) ; } if ( macvlan_cnt > I40E_MAX_VSI_MACVLANS ) { dev_err ( & pf -> pdev -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> MACVLANs <S2SV_blank> (%d)\\n"", macvlan_cnt ) ; return - EINVAL ; }",0
288,<S2SV_ModStart> ; } } return - 1 ;,1
289,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
290,<S2SV_ModStart> ; if ( recon_yoffset < 0 || recon_uvoffset < 0 ||,0
291,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( ( Image * ) NULL ) ; }",0
292,"<S2SV_ModStart> len ) { <S2SV_ModEnd> char * buf <S2SV_ModStart> char * p <S2SV_ModEnd> ; if ( <S2SV_ModStart> s ++ ; <S2SV_ModEnd> } if ( <S2SV_ModStart> 10 ; } if ( p - buf > Py_SIZE ( u ) ) { Py_DECREF ( w ) ; return NULL ; } assert ( len <= Py_SIZE ( u ) ) ; Py_DECREF ( w ) ; } len = p - buf ; s = buf ; return PyUnicode_DecodeUnicodeEscape ( s, len, NULL ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
293,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> enum { YES <S2SV_ModStart> setimes, targisdir <S2SV_ModEnd> ; BUF * <S2SV_ModStart> ""Unexpected <S2SV_blank> off_t/time_t <S2SV_blank> size"" ) ; <S2SV_ModEnd> mask = umask <S2SV_ModStart> ; if ( lstat <S2SV_ModEnd> ( targ, <S2SV_ModStart> ; if ( lstat <S2SV_ModEnd> ( targ,",0
294,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
295,<S2SV_ModStart> ; if ( vp8_de_alloc_frame_buffers ( oci ) < 0 ) goto allocation_fail ; if (,0
296,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
297,<S2SV_ModStart> u1_num_mbsNby2 ) { if ( u1_num_mbsNby2 > ps_dec -> u2_total_mbs_coded ) { ps_dec -> u2_total_mbs_coded = 0 ; ps_dec -> ps_dec_err_status -> u1_err_flag &= ~ REJECT_CUR_PIC ; ps_dec -> ps_dec_err_status -> u1_err_flag |= REJECT_CUR_SLICE ; },0
298,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> vterm_allocator_free ( screen,1
299,"<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & delay )",1
300,"<S2SV_ModStart>, one, <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart> ) break ; if ( number_planes_filled > image -> rows ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( Corrupt",0
301,"<S2SV_ModStart> value ) { cchar * name = sclone ( value ) ; <S2SV_ModStart> -> host, name <S2SV_ModEnd> ) ; httpSetRouteName",0
302,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
303,<S2SV_ModStart> ) ) ; cg_wlock ( & pool -> data_lock ) ; <S2SV_ModStart> ntime ) { free ( pool -> swork. job_id ) ; pool -> swork. job_id = NULL ; pool -> swork. prev_hash = NULL ; pool -> swork. coinbase1 = NULL ; pool -> swork. coinbase2 = NULL ; pool -> swork. bbversion = NULL ; pool -> swork. nbit = NULL ; pool -> swork. ntime = NULL ; <S2SV_ModStart> out ; } <S2SV_ModEnd> free ( pool,0
304,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
305,"<S2SV_ModStart> unused ) { _Py_IDENTIFIER ( __dict__ ) ; PyObject * dict = _PyObject_GetAttrId ( self, & PyId___dict__ ) ; if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( _PyObject_GetAttrId ( self, & PyId___dict__ ) == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( _PyObject_GetAttrId ( self, & PyId___dict__ ) == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( _PyObject_GetAttrId ( self, & PyId___dict__ ) == Py_None ) { <S2SV_ModStart> * res ; <S2SV_ModEnd> dict = _PyObject_GetAttrId <S2SV_ModStart>, & PyId___dict__ <S2SV_ModEnd> ) ; if",0
306,"<S2SV_ModStart> ) & desc, sizeof ( * desc )",1
307,"<S2SV_ModStart> perf_event * ) ; struct perf_event_context * ctx <S2SV_ModStart> case PERF_EVENT_IOC_PERIOD : ctx = perf_event_ctx_lock ( event ) ; if ( IS_ERR ( ctx ) ) return PTR_ERR ( ctx ) ; <S2SV_ModStart> perf_event_period ( event, ctx <S2SV_ModStart> ret ; } <S2SV_ModEnd> default : return",0
308,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> ] ) ; <S2SV_ModEnd> return uv_mode ;",0
309,"<S2SV_ModStart> sha_zero ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 )",0
310,"<S2SV_ModStart> iv ) ; if (! NIL_P ( vdigest ) ) { if ( EVP_DigestFinal ( digest, NULL )!= 1 ) ossl_raise ( eCipherError, NULL ) ; }",0
311,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
312,<S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail ( & <S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail ( & <S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail ( & <S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail ( & <S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail ( & <S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail ( & <S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail ( & <S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail ( & <S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail ( & <S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail ( & <S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail ( & <S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail ( & <S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail ( & <S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail ( & <S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail (,0
313,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> x86_pmu. max_pebs_events,0
314,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> t ] ; vpx_write_tree <S2SV_ModEnd> ( w, <S2SV_ModStart> & 1 ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ; } vpx_write_bit <S2SV_ModEnd> ( w,",0
315,"<S2SV_ModStart>, uncompressed_hdr_size ; vpx_write_bit_buffer <S2SV_ModEnd> wb = { <S2SV_ModStart> 0 } ; vpx_write_bit_buffer <S2SV_ModEnd> saved_wb ; write_uncompressed_header <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> += uncompressed_hdr_size ; vpx_compute_update_table <S2SV_ModEnd> ( ) ; <S2SV_ModStart> += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb",0
316,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct net_device * <S2SV_ModEnd> dev_get_valid_name ( struct <S2SV_ModStart> net * net <S2SV_ModEnd>, const char <S2SV_ModStart> name ) { struct net_device * dev ; <S2SV_ModStart> '%' ) ) { dev = <S2SV_ModEnd> dev_alloc_name_ns ( net <S2SV_ModStart> name ) ; if ( IS_ERR ( dev ) ) return PTR_ERR ( dev ) ; }",0
317,<S2SV_ModStart> struct ikev2_id id = { 0 } <S2SV_ModStart> * typedata ; if ( * ext == 0 ) { ND_TCHECK ( * ext ) ; return NULL ; } <S2SV_ModStart> * typedata ; if ( ext [ 1 ] == 0 ) { ND_TCHECK ( * ext ) ; return NULL ; },0
318,"<S2SV_ModStart> ) ) { jas_log ( jas_log_get_stream ( ), LOG_ERROR, ""Invalid <S2SV_blank> MIF_DATA <S2SV_blank> value"" ) ; <S2SV_ModStart> ) ) { jas_log ( jas_log_get_stream ( ), LOG_ERROR, ""Invalid <S2SV_blank> MIF_DATA <S2SV_blank> value"" ) ; <S2SV_ModStart> ) ) { jas_log ( jas_log_get_stream ( ), LOG_ERROR, ""Invalid <S2SV_blank> MIF_DATA <S2SV_blank> value"" ) ; <S2SV_ModStart> ) ) { jas_log ( jas_log_get_stream ( ), LOG_ERROR, ""Invalid <S2SV_blank> MIF_DATA <S2SV_blank> value"" ) ; <S2SV_ModStart> ) ) { jas_log ( jas_log_get_stream ( ), LOG_ERROR, ""Invalid <S2SV_blank> MIF_DATA <S2SV_blank> value"" ) ; <S2SV_ModStart> ) ) { jas_log ( jas_log_get_stream ( ), LOG_ERROR, ""Invalid <S2SV_blank> MIF_DATA <S2SV_blank> value"" ) ; <S2SV_ModStart> ) ) { jas_log ( jas_log_get_stream ( ), LOG_ERROR, ""Invalid <S2SV_blank> MIF_DATA <S2SV_blank> value"" ) ;",0
319,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
320,"<S2SV_ModStart>, yt0_0, <S2SV_ModEnd> xh0_0, xh1_0 <S2SV_ModStart>, xl21_0 ; WORD64 mul_1, mul_2, mul_3, mul_4, mul_5, mul_6 ; WORD64 mul_7, mul_8, mul_9, mul_10, mul_11, mul_12 ; WORD32 * x_l1 ; WORD32 * x_l2 ; WORD32 * x_h2 ; const WORD32 * w_ptr = w ; WORD32 i1 ; WORD32 * x_l1 ; WORD32 * x_l2 ; WORD32 * x_h2 ; WORD64 * x_h3 ; WORD64 * x_l4 ; WORD64 * x_l5 ; WORD64 * x_l6 ; WORD64 * x_h3 ; WORD64 * x_l7 ; WORD64 * x_l8 ; WORD64 * x_l9 ; WORD64 * x_l10 ; WORD64 * x_l10 ; WORD64 * x_l10 ; WORD64 * x_l2 ; WORD64 * x_h2 ; WORD64 * x_h3 ;",0
321,"<S2SV_ModStart> mntent -> mnt_dir, false",0
322,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
323,"<S2SV_ModStart> ( req ) ) ; rb_hash_aset ( env, server_port_val, req_server_port ( req )",0
324,<S2SV_ModStart> endif int col_type ; int <S2SV_ModEnd> prepare_retval ; MYSQL_BIND <S2SV_ModStart> endif # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID,0
325,"<S2SV_ModStart> need = 0 <S2SV_ModEnd> ; CELL first <S2SV_ModStart> screen, { if ( need > MAX_WIDE_CHARS * 4 ) { SysError ( ERROR_BMALLOC2 ) ; return ; }",0
326,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> val ) ) strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> < 0 ) strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> ) ; else strcpy <S2SV_ModEnd> ( str,",0
327,<S2SV_ModStart> ( unlikely ( crng_ready ( ) <S2SV_ModEnd> == 0 ),0
328,"<S2SV_ModStart> LEX_ID ) { snprintf ( str, len, ""%s"" <S2SV_ModEnd>, ""ID:"", <S2SV_ModStart> len ) ; strcat <S2SV_ModEnd> ( str, <S2SV_ModStart> ( ), ""%s"", jslGetTokenValueAsString ( ) <S2SV_ModEnd> ) ; } <S2SV_ModStart> LEX_STR ) { snprintf ( str, len, ""%s"" <S2SV_ModEnd>, ""String:\'"", <S2SV_ModStart> len ) ; strcat <S2SV_ModEnd> ( str, <S2SV_ModStart> ( ), ""%s"", jslGetTokenValueAsString ( ) <S2SV_ModEnd> ) ; }",0
329,,1
330,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
331,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
332,"<S2SV_ModStart> ) { return memcmp <S2SV_ModEnd> ( s1,",0
333,"<S2SV_ModStart> ( CMD_PRINT_HELP, ""stunnel.conf"", <S2SV_ModStart> ( CMD_PRINT_HELP, ""stunnel.conf"", <S2SV_ModStart> ( CMD_PRINT_DEFAULTS, ""stunnel.conf"",",0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,"<S2SV_ModStart> ) ; } if ( st -> st_oakley. ta_encrypt == NULL ) { st -> st_oakley. ta_encrypt = malloc ( e -> enc_blocksize ) ; if (! st -> st_oakley. ta_encrypt ) { loglog ( RC_LOG_SERIOUS, ""malformed <S2SV_blank> message: <S2SV_blank> not <S2SV_blank> a <S2SV_blank> multiple <S2SV_blank> of <S2SV_blank> encryption <S2SV_blank> blocksize"" ) ; return ; } md -> raw_packet = clone_bytes_as_chunk ( md -> raw_packet. start, pbs_room ( & st -> st_oakley. ta_encrypt ), ""raw <S2SV_blank> packet"" ) ; if (! st -> st_oakley. ta_encrypt ) { loglog ( RC_LOG_SERIOUS, ""malformed <S2SV_blank> message: <S2SV_blank> no <S2SV_blank> encryption <S2SV_blank> key"" ) ; return ; } st -> st_oakley. ta_encrypt = malloc ( e -> enc_blocksize ) ; if (! st -> st_oakley. ta_encrypt ) { loglog ( RC_LOG_SERIOUS, ""no <S2SV_blank> encryption <S2SV_blank> key"" ) ; return ; } st -> st",0
336,<S2SV_ModStart> ; } } if ( 0 == ps_dec -> s_ivd_video_decode_ip_t. u4_num_Bytes ) { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = 0 ; },0
337,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char * print_string,0
338,"<S2SV_ModStart> == 1 ) { if ( ( <S2SV_ModStart>, deadline ) )!= VPX_CODEC_OK ) res = VPX_CODEC_ERROR ; } <S2SV_ModEnd> else { int <S2SV_ModStart> -- ) { res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ; if ( res!= VPX_CODEC_OK ) res = VPX_CODEC_ERROR <S2SV_ModEnd> ; ctx --",0
339,"<S2SV_ModStart> ) ; } else if ( arg1 == 3 ) { win_maximise ( - 1 ) ; win_set_geom ( 0, - 1, 0, - 1 ) ; } else if ( arg1 == 4 ) { win_maximise ( 1 ) ; win_set_geom ( 0, - 1, 0, - 1 ) ; } else if ( arg1 == 5 ) { win_maximise ( - 1 ) ; win_set_geom ( 0, - 1, 0, - 1 ) ; } else if ( arg1 == 6 ) { win_maximise ( - 1 ) ; win_set_geom ( 0, - 1, 0, - 1 ) ; } else if ( arg1 == 7 ) { win_maximise ( 1 ) ; win_set_geom ( 0, - 1, 0, - 1 ) ; } else if ( arg1 == 8 ) { win_maximise ( - 1 ) ; win_set_geom ( 0, - 1, 0, - 1 ) ; } else if ( arg1 == 9 ) { win_maximise ( - 1 ) ; win_set_geom ( 0, - 1,",0
340,<S2SV_ModStart> i < cols <S2SV_ModEnd> ; i ++,0
341,"<S2SV_ModStart> -> log ) { <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> -> log ) { <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> -> log ) { <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> -> log ) { <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> -> log ) { <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> -> log ) { <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> -> log ) { <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> -> log ) { <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> b",0
342,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",0
343,<S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; },0
344,"<S2SV_ModStart> ) ) { if ( psf -> debug ) { fprintf ( stderr, ""[SF] <S2SV_blank> format <S2SV_blank> \'%c\' <S2SV_blank> not <S2SV_blank> recognized\\n"", c ) ; return - 1 ; }",0
345,"<S2SV_ModStart> ) break ; if ( sun_info. length > image -> columns ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
346,"<S2SV_ModStart> 0 ; } if ( copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) == - 1 ) { fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; return 0 ; } <S2SV_ModStart> ( rv ) { <S2SV_ModStart> ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; return 0 ; } <S2SV_ModEnd> } _exit (",0
347,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> BLOCK_8X8 : return vpx_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> BLOCK_16X8 : return vpx_mse16x8 <S2SV_ModEnd> ; case BLOCK_8X16 <S2SV_ModStart> BLOCK_8X16 : return vpx_mse8x16 <S2SV_ModEnd> ; default : <S2SV_ModStart> default : return vpx_mse16x16 <S2SV_ModEnd> ; } },1
348,"<S2SV_ModStart> ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_KX ) { return return_pkinit_kx ( context, request, reply, encrypting_key, send_pa ) ; }",0
349,"<S2SV_ModStart> flags ) ; if (! vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", input -> buf_cur_space_left, frame_len ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n",0
350,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
351,<S2SV_ModStart> -> serviceId == EXTRACT_16BITS <S2SV_ModEnd> ( & rxh,1
352,"<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len > MWIFIEX_MAX_SSID_LEN ) { mwifiex_dbg ( adapter, ERROR, ""Invalid <S2SV_blank> SSID <S2SV_blank> length\\n"" ) ; return - EINVAL ; }",0
353,"<S2SV_ModStart> -> valuelen ; if ( nsbuf == 0 ) { error = context -> put_listent ( context, XFS_ATTR_FORK, & sfe -> nameval, ( int ) sfe -> namelen, & sfe -> valueval ) ; if ( context -> seen_enough ) break ; }",0
354,"<S2SV_ModStart> struct l2cap_conf_rfc rfc ; void * ptr = req -> data ; BT_DBG ( ""sk <S2SV_blank> %p"", sk ) ; switch ( pi -> mode ) { case L2CAP_MODE_BASIC : if ( pi -> imtu!= L2CAP_DEFAULT_MTU ) l2cap_add_conf_opt ( & ptr, L2CAP_CONF_MTU, 2, pi -> imtu ) ; break ; case L2CAP_MODE_ERTM : <S2SV_ModEnd> rfc. txwin_size <S2SV_ModStart> txwin_size = L2CAP_DEFAULT_RX_WINDOW <S2SV_ModEnd> ; rfc. <S2SV_ModStart> = L2CAP_DEFAULT_RETRANS_TO ; <S2SV_ModEnd> l2cap_add_conf_opt ( & <S2SV_ModStart> = L2CAP_DEFAULT_MONITOR_TO ; <S2SV_ModEnd> l2cap_add_conf_opt ( &",0
355,"<S2SV_ModStart> { do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> r, MSG_WAITALL )",0
356,"<S2SV_ModStart> u1_nal_ref_idc ) ; if ( u1_nal_ref_idc == 0 ) { H264_DEC_DEBUG_PRINT ( ""\\nInvalid <S2SV_blank> ref <S2SV_blank> idc <S2SV_blank> set <S2SV_blank> in <S2SV_blank> Nal <S2SV_blank> Unit, <S2SV_blank> Let\'s <S2SV_blank> try\\n"" ) ; return ERROR_INCOMPLETE_FRAME ; }",0
357,<S2SV_ModStart> while ( pair <S2SV_ModEnd> ) { mprAddItem,1
358,"<S2SV_ModStart> * delegation, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> = 0 ; fmode <S2SV_ModEnd> &= ( FMODE_READ <S2SV_ModStart> -> type & fmode )!= fmode <S2SV_ModEnd> ) goto no_delegation_unlock <S2SV_ModStart> -> stateid, fmode <S2SV_ModEnd> ) ; ret <S2SV_ModStart>, NULL, fmode <S2SV_ModEnd> ) ; ret",1
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,"<S2SV_ModStart> * xd, int64_t <S2SV_ModEnd> * out_rate_sum, <S2SV_ModStart> * out_dist_sum ) { int i ; int64_t rate_sum = 0 ; int64_t dist_sum = 0 ; const int ref = xd -> mi [ 0 ] -> mbmi. ref_frame [ 0 ] ; unsigned int sse ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblock_plane * const p = & xd -> plane [ i ] ; struct macroblockd_plane * const pd = & xd -> plane [ i ] ; const BLOCK_SIZE bs = get_plane_block_size ( bsize, pd ) ; ( void ) <S2SV_ModEnd> cpi -> fn_ptr <S2SV_ModStart>. vf ( <S2SV_ModEnd> p -> src <S2SV_ModStart>. stride, <S2SV_ModEnd> pd -> dst <S2SV_ModStart> sse ) ; <S2SV_ModEnd> if ( cpi <S2SV_ModStart> == 0 ) { <S2SV_ModStart> = sse ; } <S2SV_ModStart> == 0 ) { <S2SV_ModStart> = sse ; } <S2SV_ModStart> 4 ) { int64_t rate ; int64_t dist ; int64_t <S2SV_ModEnd> quantizer = ( <S2SV_ModStart> } else { int64_t rate ; int64_t <S2SV_ModEnd> dist ; vp9_model_rd_from",0
361,<S2SV_ModStart> } if ( pmd_trans_unstable <S2SV_ModEnd> ( pmd ),0
362,<S2SV_ModStart> { if ( index >= PAM_MAX_RESP_SIZE ) { return ( PAM_BUF_ERR ) ; } if ( <S2SV_ModStart> == NULL ) { free ( username ) ; <S2SV_ModStart> PAM_BUF_ERR ) ; },0
363,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> ) { return vpx_read_tree <S2SV_ModEnd> ( r,",1
364,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",1
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,<S2SV_ModStart> depth ++ ; if ( depth == 0 ) return ( buf ) ;,0
367,"<S2SV_ModStart> ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n < ( length + 8 ) ) { return ERROR_FAILURE ; } netBufferRead ( context -> txBuffer, buffer, offset, length ) ; header. controlWord = htole16 ( TX_CTRL_TXIC | ( context -> frameId ++ & TX_CTRL_TXFID ) ) ; header. byteCount = htole16 ( length ) ; ksz8851SetBit ( interface, KSZ8851_RXQCR, RXQCR_SDA ) ; ksz8851WriteFifo ( interface, ( uint8_t * ) & header, sizeof ( Ksz8851TxHeader ) ) ; ksz8851WriteFifo ( interface, context -> txBuffer, length ) ; ksz8851ClearBit ( interface, KSZ8851_TXQCR, TXQCR_METFE ) ; n = ksz8851ReadReg ( interface, <S2SV_ModStart>, KSZ8851_REG_TXMIR ) <S2SV_ModEnd> ; if (",0
368,<S2SV_ModStart> ( ) ; mono_attach_maybe_stop ( ) ;,0
369,"<S2SV_ModStart>, x_e, x_f ; WORD32 n00, n10, n20, n30, n01, n11, n21, n31 ; WORD32 n12, n22, n32, n03, n13, n23, n33 ; WORD32 n0, j0 ; WORD32 * x2, * x1, * y1, * y2, * y3 ; WORD32 * x0, * y0, * y0 ; WORD32 x_8, x_9, x_a, x_b, x_c, x_d, x_e, x_f ; WORD32 n10, n20, n30, n01, n11, n21, n31 ; WORD32 n02, n12, n22, n32, n03, n13, n23, n33 ; WORD32 * y0, * y1, * y2, * y3 ; x0 = ptr_x ; x1 = ptr_y ; x2 = ptr_x + ( WORD32 ) npoints ; x2 = ptr_x + ( WORD32 ) npoints ; y2 = ptr_y",0
370,<S2SV_ModStart> ; if ( pmd_none_or_clear_bad ( pmd ) ) continue ; if ( <S2SV_ModStart> ) ) ) <S2SV_ModEnd> ret = unuse_pte_range,0
371,"<S2SV_ModStart>, frames ; <S2SV_ModEnd> if ( argc <S2SV_ModStart> ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( argv [ 2 ], & width, & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } if (! parse_dim ( argv [ 3 ], & target_width, & target_height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpin = fopen ( fin, ""rb"" ) ; if ( fpin == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> read\\n"", fin ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpout = fopen ( fout, ""wb"" ) ; if ( fpout == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> write\\n"", fout ) ; return",0
372,"<S2SV_ModStart> num_fields ) { PyObject * s, * l ; <S2SV_ModStart> i, result <S2SV_ModEnd> ; _Py_IDENTIFIER ( <S2SV_ModStart> _attributes ) ; <S2SV_ModEnd> l = PyTuple_New",0
373,<S2SV_ModStart> = VPX_CODEC_OK ; vpx_codec_alg_priv_t <S2SV_ModEnd> * priv ; <S2SV_ModStart> sizeof ( struct vpx_codec_alg_priv_t <S2SV_ModEnd> ) ) ; <S2SV_ModStart> priv = & priv -> base ; ctx -> priv -> iface = ctx -> iface ; ctx -> priv -> alg_priv = priv ; ctx -> priv -> init_flags = ctx -> init_flags ; if ( ctx -> config. enc ) { ctx -> priv -> alg_priv -> cfg = * ctx -> config. enc ; ctx -> config. enc = & ctx -> priv -> alg_priv -> cfg ; } cfg = & ctx -> priv -> alg_priv -> cfg ; for ( i = 0 ; extracfg_map [ i ]. usage && extracfg_map [ i ]. usage!= cfg -> g_usage ; i ++ ) ; priv -> vp8_cfg = extracfg_map [ i ]. cfg ; priv -> vp8_cfg. pkt_list = & priv -> pkt_list. head ; priv -> cx_data_sz = priv -> cfg. g_w * priv -> cfg. g_h * 3 / 2 * 2 ; if ( priv -> cx,0
374,<S2SV_ModStart> } if ( cnt_c > BOT ) return - 1 ; if (,0
375,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx ->,0
376,"<S2SV_ModStart> ) ) { if ( iinfo -> i_location. i_len!= le16_to_cpu ( iinfo -> i_location. i_len ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> inode <S2SV_blank> entry\\n"", inode -> i_ino ) ; ret = - EIO ; goto out ; } <S2SV_ModStart> ) ) { if ( iinfo -> i_location. i_len!= le16_to_cpu ( iinfo -> i_location. i_len ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> inode <S2SV_blank> entry <S2SV_blank> entry <S2SV_blank> length\\n"", inode -> i_ino ) ; ret = - EIO ; goto out ; }",0
377,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0",1
378,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int bad_format_imginfo (,0
379,"<S2SV_ModStart> IPV6DefragSturgesNovakLastTest ) ; UtRegisterTest ( ""DefragIPv6NoDataTest"", DefragIPv6NoDataTest ) ;",0
380,<S2SV_ModStart> if ( object_data && object_length,0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,<S2SV_ModStart> p_sys -> b_auto_field_coding &&! p_sys -> b_eos_pulled <S2SV_ModStart> p_sys -> b_auto_field_coding &&! p_sys -> b_eos_pulled,0
384,"<S2SV_ModStart> bfname ) ; if ( bfname. len < 0 ) { mp_err ( log, ""invalid <S2SV_blank> filename\\n"" ) ; goto exit_mf ; }",0
385,<S2SV_ModStart> 4 ) ; if ( len < 4 ) return NULL ;,0
386,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
387,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * fb ; vpx_get_reference_dec <S2SV_ModEnd> ( ctx ->",0
388,"<S2SV_ModStart> ; if ( next_marker == JPEG_MARKER_EOI ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> first <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } if (",0
389,"<S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == testlist ) { node * ch = CHILD ( n, 0 ) ; if (! ch ) return NULL ; if (! set_context ( c, ch, Store, ch ) ) return NULL ; ch = CHILD ( n, 2 ) ; if ( TYPE ( ch ) == testlist ) { node * ch1 = CHILD ( n, 0 ) ; if (! ch1 ) return NULL ; return Expr ( ch1, LINENO ( n ), n -> n_col_offset, n -> n_end_lineno, n -> n_end_col_offset, c -> c_arena ) ; } ch = CHILD ( n, 1 ) ; if ( TYPE ( CHILD ( ch ) == testlist ) { node * ch2 = CHILD ( n, 0 ) ; if (! ch2 ) return NULL ; return Expr ( ch1, LINENO ( ch1 ), n -> n_col_offset, n -> n_end_lineno, n -> n_end_col_offset, c -> c_arena ) ; } else if ( TYPE ( CHILD (",0
390,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> vp8_denoiser_filter_c ( YV12_BUFFER_CONFIG <S2SV_ModStart> = 16 ; vpx_buffer_config <S2SV_ModEnd> * mc_running_avg = <S2SV_ModStart> -> y_stride ; vpx_buffer_config <S2SV_ModEnd> * running_avg = <S2SV_ModStart> -> y_stride ; vpx_buffer_config <S2SV_ModEnd> * avg_y = <S2SV_ModStart> -> y_stride ; vpx_buffer_config <S2SV_ModEnd> * adj_val [ <S2SV_ModStart> MOTION_MAGNITUDE_THRESHOLD ) { vpx_buffer_config <S2SV_ModEnd> * adj_val [ <S2SV_ModStart> ; if ( ( <S2SV_ModStart> absdiff <= 3 ) || ( absdiff >= 4 && absdiff <= 7 ) <S2SV_ModStart> c ] ; } else { if ( absdiff >= 8 && absdiff <= 15 ) adjustment = adj_val [ 0 ] ; else if ( absdiff >= 16 && absdiff <= 32 ) adjustment = adj_val [ 1 ] ; if ( diff > 0 ) { if ( ( sig [ c ] + adjustment ) > 255 ) running_avg_y [ c ] = 0 ; else running_avg_y [ c ] = sig,0
391,<S2SV_ModStart> ) ; } if ( ( sockPtr -> flags & NS_CONN_ESTABLISHED ) == 0u ) { sockPtr -> keep = NS_TRUE ; },0
392,"<S2SV_ModStart> = uregs ; xtregs_coprocessor_t cp0 ; <S2SV_ModStart> ret = 0 ; memset ( & cp0, 0, sizeof ( cp0 ) ) <S2SV_ModStart> ti ) ; <S2SV_ModEnd> ret |= __copy_from_user <S2SV_ModStart> ) ) ; ret |= __copy_from_user ( & ti -> xtregs_cp, & cp0, sizeof ( cp0 ) ) ;",0
393,<S2SV_ModStart> size ) ; if ( message -> length > 0 ) { <S2SV_ModStart> buffer ) ; queueItem -> buffer = NULL ; queueItem -> offset = 0 ; },0
394,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" <S2SV_ModStart> cg_item ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
395,<S2SV_ModStart> ; if (! header ) return 0 ; <S2SV_ModEnd> new_bh = ext2_xattr_cache_find <S2SV_ModStart> new_bh ) ; error = <S2SV_ModStart> ( new_bh ) ; if ( error ) goto cleanup,0
396,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
397,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
398,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
399,"<S2SV_ModStart> = 2048 ; if ( ( <S2SV_ModStart> imsy, 1 ) ) == NULL ) { return ( MagickFalse ) ; } for ( n = 0 ; n < 16 ; n ++ ) { sixel_palet [ n ] = sixel_default_color_table [ n ] ; } for ( r = 0 ; r < 6 ; r ++ ) { for ( g = 0 ; g < 6 ; g ++ ) { for ( b = 0 ; b < 6 ; b ++ ) { sixel_palet [ n ++ ] = SIXEL_RGB ( r * 51, g * 51, b * 51 ) ; } } } for ( ; n < SIXEL_PALETTE_MAX ; n ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 255, 255, 255 ) ; } for ( ; n < SIXEL_PALETTE_MAX ; n ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 255, 255, 255 ) ; } for ( ; n < SIXEL_PALETTE_MAX ; n ++ ) { sixel_palet [ n ] = SIXEL_RGB (",0
400,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vpx_ref_frame_t * ) ; vpx_codec_err_t ret = 0 <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; ret = <S2SV_ModStart> sd ) ; if ( ret!= VPX_CODEC_OK ) { return ret ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
401,<S2SV_ModStart> u1_num_mbsNby2 ) { if ( u1_num_mbsNby2 > ps_dec -> u2_total_mbs_coded ) { ps_dec -> u2_total_mbs_coded = 0 ; ps_dec -> ps_dec_err_status -> u1_err_flag &= ~ REJECT_CUR_PIC ; ps_dec -> ps_dec_err_status -> u1_err_flag |= REJECT_CUR_SLICE ; },0
402,<S2SV_ModStart> ; UWORD32 u4_x_dst_offset <S2SV_ModEnd> = 0 ; <S2SV_ModStart> ) ; else { <S2SV_ModStart> ps_dec ) ; },0
403,"<S2SV_ModStart> VP9_LAST_FLAG ) { if ( cm -> ref_frame_map [ 0 ] >= MAX_FRAMES ) { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Invalid <S2SV_blank> reference <S2SV_blank> frame"" ) ; return VPX_CODEC_ERROR ; } <S2SV_ModStart> -> frame_bufs [ <S2SV_ModEnd> cm -> ref_frame_map",0
404,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
405,"<S2SV_ModStart> TX_SIZE tx_size = <S2SV_ModEnd> get_uv_tx_size ( mbmi <S2SV_ModStart> ( mbmi ) ; const BLOCK_SIZE plane_bsize = get_plane_block_size ( bsize, pd ) ; const int num_4x4_w = num_4x4_blocks_wide_lookup [ plane_bsize ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ plane_bsize ] ; const int step = 1 << ( tx_size << 1 ) ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) { int r, c ; int max_blocks_wide = num_4x4_w ; int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >>",0
406,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 4 ) ; <S2SV_ModEnd> src += src_stride",0
407,"<S2SV_ModStart> nrow ) { if ( row + img -> row_offset > h ) { TIFFErrorExt ( tif -> tif_clientdata, ""Error <S2SV_blank> in <S2SV_blank> gtStripSeparate(), <S2SV_blank> row <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> %u"", row, h ) ; return ( 0 ) ; } <S2SV_ModStart> -> row_offset ; <S2SV_ModEnd> if ( _TIFFReadEncodedStripAndAllocBuffer <S2SV_ModStart> 0 ) { if ( row + img -> row_offset > h ) { TIFFErrorExt ( tif -> tif_clientdata, ""Error <S2SV_blank> in <S2SV_blank> gtStripSeparate(), <S2SV_blank> row <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> %u"", row, h ) ; return ( 0 ) ; } <S2SV_ModStart> 0 ) { if ( row + img -> row_offset > h ) { TIFFErrorExt ( tif -> tif_clientdata, ""Error <S2SV_blank> in <S2SV_blank> gtStripSeparate(), <S2SV_blank> row <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> %u"", row, h ) ; return ( 0 ) ; } <S2SV_ModStart> 0 ) { if ( row + img -> row_offset > h ) { TIFFErrorExt ( tif -> tif_clientdata, ""Error <S2SV_blank> in <S2SV_blank> gtStripSeparate(), <S2SV_blank> row <S2SV_blank> %u <S2SV_blank>",0
408,<S2SV_ModStart> ; } } Py_RETURN_NONE <S2SV_ModEnd> ; } <S2SV_null>,0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
410,<S2SV_ModStart> num & ( 1U << number <S2SV_ModEnd> ) ) return <S2SV_ModStart> num - ( 1U <S2SV_ModEnd> << number ),0
411,"<S2SV_ModStart> ] ; const size_t <S2SV_ModEnd> w = vpx_img_plane_width <S2SV_ModStart> y ) { int r = <S2SV_ModEnd> fread ( buf <S2SV_ModStart>, file ) ; if ( r <S2SV_ModStart>!= w ) { fclose ( file ) ; <S2SV_ModStart> return 0 ; }",0
412,"<S2SV_ModStart> ; uint16_t attr_len = 0 <S2SV_ModStart> ; uint16_t orig_attr_len = 0 <S2SV_ModStart> 1 ; } if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } <S2SV_ModStart> struct l2tp_avp_t ) ; if ( avp -> length < attr_len ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } attr_len = avp -> length - sizeof ( struct l2tp_avp_t ) ; MD5_Init ( & md5_ctx ) ; MD5_Update ( & md5_ctx, & avp ->",0
413,<S2SV_ModStart> case EVP_CTRL_AEAD_SET_IVLEN : if ( arg <= 0 || arg > CHACHA_CTR_SIZE ) return 0 ;,0
414,"<S2SV_ModStart>, 0, comm_event -> comm_size <S2SV_ModEnd> ) ; if",0
415,"<S2SV_ModStart> ; BT_DBG ( ""sock <S2SV_blank> %p, <S2SV_blank> peer <S2SV_blank> %d, <S2SV_blank> sk <S2SV_blank> %p"" <S2SV_ModEnd>, sock, <S2SV_ModStart> sock, sk, peer",0
416,<S2SV_ModStart> MT_CPTYPE_PASSSALT ) { if ( cpkt. length > MT_PASSSALT_MAXLEN ) { return - 1 ; },0
417,<S2SV_ModStart> MUTT_ABORT ) { imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } else <S2SV_ModStart> ) ) ; imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ) ; imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ) ; imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ) ; imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; imap_close_connection,0
418,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
419,<S2SV_ModStart> 0 ) { if ( errno == EINTR ) { close ( gpsd_sock ) ; return ; } <S2SV_ModStart> 0 ) { if ( errno == EINTR ) { close ( gpsd_sock ) ; return ; } <S2SV_ModStart> 0 ) { if ( errno == EINTR ) { close ( gpsd_sock ) ; return ; } <S2SV_ModStart> 0 ) { if ( errno == EINTR ) { close ( gpsd_sock ) ; return ; } <S2SV_ModStart> 0 ) { if ( errno == EINTR ) { close ( gpsd_sock ) ; return ; } <S2SV_ModStart> 0 ) { if ( errno == EINTR ) { close ( gpsd_sock ) ; return ; } <S2SV_ModStart> 0 ) { if ( errno == EINTR ) { close ( gpsd_sock ) ; return ; } <S2SV_ModStart> 0 ) { if ( errno == EINTR ) { close ( gpsd_sock ) ; return ; } <S2SV_ModStart> 0 ) { if ( errno == EINTR ) { close ( gpsd_sock ) ; return ; } <S2SV_ModStart> 0 ) { if ( errno == EINTR ) { close ( gpsd_sock ) ; return ; },0
420,"<S2SV_ModStart> remainder, & rlen ) ; if ( ret ) return ret ; if (! check_atype_tag ( a, & t ) ) return ASN1_BAD_ID ; if (! decode_atype_to_ptr ( & t, contents, clen, a, retrep ) ) return ASN1_BAD_ID <S2SV_ModEnd> ; if (",0
421,"<S2SV_ModStart> ; read_userfile ( ) ; syslog ( LOG_NOTICE, _ ( ""(%d) <S2SV_blank> Trying <S2SV_blank> to <S2SV_blank> login <S2SV_blank> by <S2SV_blank> %s."" ), curconn -> seskey, curconn -> username <S2SV_ModStart> = 0 ; strlcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> 82 ) ; strlcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> password ), ""%s"", <S2SV_ModStart> curconn -> pass_salt <S2SV_ModEnd> ) ; md5_init <S2SV_ModStart> state ) ; if (! <S2SV_ModStart> + 17 ) ) { syslog ( LOG_NOTICE, _ ( ""(%d) <S2SV_blank> Invalid <S2SV_blank> login <S2SV_blank> by <S2SV_blank> %s."" ), curconn -> seskey, curconn -> username ) ; abort_connection ( curconn, pkthdr, _ ( ""Login <S2SV_blank> failed, <S2SV_blank> incorrect <S2SV_blank> username <S2SV_blank> or <S2SV_blank> password\\r\\n"" ) ) ; } <S2SV_ModEnd> md5_finish ( &",0
422,"<S2SV_ModStart> ; if ( unicode_compare_with_ASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart> { if ( unicode_compare_with_ASCIIString <S2SV_ModEnd> ( name,",0
423,<S2SV_ModStart> off } ; if ( str [ 0 ] == '\\0' ) { return - 1 ; },0
424,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
425,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
426,"<S2SV_ModStart> size_t s ; if ( o + 12 > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; }",0
427,<S2SV_ModStart> bd_addr ) { if ( bd_addr == NULL ) return BT_STATUS_NULL ;,0
428,"<S2SV_ModStart> int i ; size_t avail ; size_t <S2SV_ModEnd> expect ; txid <S2SV_ModStart> 4 ) ; expect = 8 + 8 + nxip * 8 ; if ( nxip < 0 || nxip > avail || expect > avail ) goto bad_format ; xmin = pq_getmsgint64 ( buf ) ; xmax = pq_getmsgint64 ( buf ) ; if ( xmin == 0 || xmin > xmax || xmax > MAX_TXID ) goto bad_format ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; snap -> nxip = nxip ; SET_VARSIZE ( snap, TXID_SNAPSHOT_SIZE ( nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last || cur < xmin || cur >= xmax ) goto bad_format ; snap -> xip [ i ] = cur ; last = cur ; } PG_RETURN_POINTER ( snap ) ; bad_format : elog ( ERROR, ""invalid <S2SV_blank> snapshot <S2SV_blank> data"" ) ; return ( Datum ) NULL <S2SV_ModEnd> ; } <S2SV_null>",0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. data <S2SV_ModStart> psf -> header. data <S2SV_ModStart> psf -> header. data <S2SV_ModStart> psf -> header. data <S2SV_ModStart> psf -> header. data <S2SV_ModStart> psf -> header. data <S2SV_ModStart> psf -> header. data <S2SV_ModStart> psf -> header. data <S2SV_ModStart> psf -> header. data <S2SV_ModStart> psf -> header. data <S2SV_ModStart> psf -> header. data <S2SV_ModStart> psf -> header. data <S2SV_ModStart> psf -> header. data <S2SV_ModStart> psf -> header. data <S2SV_ModStart> psf -> header. data,0
430,<S2SV_ModStart> ( epoll_ ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
431,"<S2SV_ModStart> ( CMD_INITIALIZE, & new_global_options. option <S2SV_ModEnd>, NULL ) <S2SV_ModStart> ( CMD_INITIALIZE, & new_service_options. option <S2SV_ModEnd>, NULL )",0
432,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_PHNUM_MIN : * ( size_t * ) val = ms -> elf_phnum_min ; return 0 ; case MAGIC_PARAM_ELF_SHNUM_MIN : * ( size_t * ) val = ms -> elf_shnum_min ; return 0 ;,0
433,"<S2SV_ModStart> offset ) { struct address_space * mapping = page -> mapping ; journal_t * journal = EXT4_JOURNAL ( <S2SV_ModEnd> mapping -> host <S2SV_ModStart> offset ) ; if ( offset == 0 ) ClearPageChecked ( page ) ; if ( journal ) jbd2_journal_invalidatepage ( journal, page, offset ) ; else block_invalidatepage ( page, offset ) ;",0
434,<S2SV_ModStart> ++ ) { if (! ( <S2SV_ModStart> + 1 ) ) ) return GF_OUT_OF_MEM,0
435,"<S2SV_ModStart> 17 ] ; size_t <S2SV_ModEnd> plen ; md5_state_t <S2SV_ModStart> = 0 ; strlcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> password, 82, sizeof ( md5data ) <S2SV_ModStart> = '\\0' ; strlcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> password ), pass_salt, sizeof ( pass_salt ) <S2SV_ModEnd> ) ; md5_init",0
436,<S2SV_ModStart> ; if ( _mibindex_max > 0 ) { int i ; for ( i = 0 ; i < _mibindex_max ; ++ i ) SNMP_FREE ( _mibindexes [ i ] ) ; free ( _mibindexes ) ; _mibindex = 0 ; _mibindex_max = 0 ; _mibindexes = NULL ; } if ( Prefix!= NULL && Prefix!= & Standard_Prefix [ 0 ] ) SNMP_FREE ( Prefix ) ; if ( Prefix ) Prefix = NULL ; if ( confmibs ) SNMP_FREE ( confmibs ) ; SNMP_FREE ( confmibdir ) ; if ( confmibdir ) { <S2SV_ModEnd> SNMP_FREE ( confmibdir <S2SV_ModStart> confmibdir ) ; },0
437,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
438,<S2SV_ModStart> ( ) ; g_hash_table_remove_all ( headers ) ;,0
439,"<S2SV_ModStart> -> y_buffer ; # if CONFIG_VP9_HIGHBITDEPTH if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { memcpy ( dst, src, src_ybc -> y_width ) ; src += src_ybc -> y_stride ; dst += dst_ybc -> y_stride ; } # endif <S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst,",0
440,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_rd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart>,0
441,"<S2SV_ModStart>, obj_tlen ; u_int offset ; u_int link_type ; union { float f ; uint32_t i ; } bw ; tptr = pptr ; lmp_obj_header = ( const struct lmp_object_header * ) pptr ; ND_TCHECK ( * lmp_obj_header ) ; if ( lmp_obj_header -> length > len ) { ND_PRINT ( ( ndo, ""LMP <S2SV_blank> object <S2SV_blank> length <S2SV_blank> too <S2SV_blank> large"" ) ) ; return ; } if ( lmp_obj_len > len ) { ND_PRINT ( ( ndo, ""LMP <S2SV_blank> object <S2SV_blank> length <S2SV_blank> too <S2SV_blank> large"" ) ) ; return ; } if ( lmp_obj_len > len ) { ND_PRINT ( ( ndo, ""LMP <S2SV_blank> object <S2SV_blank> length <S2SV_blank> too <S2SV_blank> large"" ) ) ; return ; } if ( lmp_obj_len > len ) { ND_PRINT ( ( ndo, ""LMP <S2SV_blank> object <S2SV_blank> length <S2SV_blank> too <S2SV_blank> large"" ) ) ; return ; } if ( obj_tlen > len ) { ND_PRINT ( ( ndo, ""LMP <S2SV_blank>",0
442,"<S2SV_ModStart> * mbmi, nmv_context_counts * counts, <S2SV_ModStart> [ 2 ] <S2SV_ModEnd> ) { int <S2SV_ModStart> i ) { <S2SV_ModEnd> MV * ref <S2SV_ModStart> * ref = counts -> <S2SV_ModEnd> ref_mvs [ mbmi <S2SV_ModStart> [ 0 ] <S2SV_ModEnd> ; vp9_inc_mv (",0
443,"<S2SV_ModStart> ) ; } <S2SV_ModEnd> res = vpx_codec_enc_config_default <S2SV_ModStart> = vpx_codec_enc_config_default ( encoder <S2SV_ModEnd>, & cfg",0
444,<S2SV_ModStart> entry ) ; skb_out -> ip_summed = CHECKSUM_UNNECESSARY ;,0
445,<S2SV_ModStart> ) return ; if (! <S2SV_ModStart> netsnmp_mibindex_load ( ) ) { SNMP_FREE ( env_var ) ; return ; } <S2SV_ModEnd> DEBUGMSGTL ( (,0
446,"<S2SV_ModStart> { fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ], O_RDWR ) <S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> dev ) ) ) <S2SV_ModStart> 1 ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_KEY ) ) <S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_REL ) ) <S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL ) )",0
447,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
448,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s, <S2SV_ModStart> & 1 ) vpx_lpf_vertical_4 <S2SV_ModEnd> ( s +",0
449,"<S2SV_ModStart> krb5_error_code iakerb_alloc_context ( gss_session_t * s, <S2SV_ModStart> ; code = krb5_gss_init_session <S2SV_ModEnd> ( & ctx <S2SV_ModStart> ctx -> k5c, s",0
450,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> bitmapDC = CreateCompatibleDC",1
451,<S2SV_ModStart> ; while ( ( <S2SV_ModStart> )!= START_CODE_PREFIX ) && ( ps_stream -> u4_offset < ps_stream -> u4_max_offset ),1
452,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { ret = <S2SV_ModEnd> - EINVAL ; <S2SV_ModStart> - EINVAL ; goto out ; }",1
453,"<S2SV_ModStart> ) ; } mono_class_inflate_generic_method ( imethod, & tmp_context. class_inst, & tmp_context. method_inst ) ; <S2SV_ModStart> ) ; } mono_class_inflate_generic_method ( imethod, & tmp_context. class_inst, & tmp_context. method_inst ) ;",0
454,<S2SV_ModStart> ) ] ; long <S2SV_ModEnd> tmp ; if <S2SV_ModStart> count ) ) { uml_exitcode = tmp ; return count ; } <S2SV_ModEnd> tmp = simple_strtol,0
455,"<S2SV_ModStart> char * last_elem = NULL <S2SV_ModStart> size_t len ; const char * l_origin = NULL ; const char * l_platform = NULL ; <S2SV_ModStart> ( ( ( strncmp ( & name [ 1 ], ""ORIGIN"", 6 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 1 ], ""PLATFORM"", 8 ) == 0 && ( len = 9 )!= 0 ) ) && ( name [ len ] == '\\0' || name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) || ( name [ 1 ] == '{' && ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 9 )!= 0 ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( len = 11 )!= 0 ) ) ) ) { repl = ( len == 7 || name [ 2 ] == 'O' )? ( __libc_enable_secure? NULL : l -> l_origin ) : _dl_platform ) ; if ( repl!= NULL && repl!= ( const char * )",0
456,"<S2SV_ModStart> ) ; } # ifdef H264DEC_TRACE sprintf ( decInst -> str, ""H264SwDecInit# <S2SV_blank> decInst <S2SV_blank> %p <S2SV_blank> noOutputReordering <S2SV_blank> %d"", ( void * ) decInst, noOutputReordering ) ; DEC_API_TRC ( decInst -> str ) ; # endif <S2SV_ModStart> decContainer_t ) ) ; if ( pDecCont == NULL ) return ( H264SWDEC_MEMFAIL )",0
457,"<S2SV_ModStart> drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> srr ) ) { struct in_device * in_dev = __in_dev_get_rcu ( dev ) ; if ( in_dev &&! IN_DEV_SOURCE_ROUTE ( in_dev ) ) goto drop ; if ( ip_options_rcv_srr ( skb ) ) goto drop ; } return 0 ; inhdr_error : IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INHDRERRORS ) ; goto drop ; } <S2SV_ModStart> == 5 ) <S2SV_ModEnd> return 0 ; <S2SV_ModStart> return 0 ; <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
458,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
459,<S2SV_ModStart> errout ; return 0 <S2SV_ModEnd> ; } <S2SV_null>,0
460,<S2SV_ModStart> krb5_key_data * key_data = NULL <S2SV_ModStart> == NULL ) { err = ENOMEM ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { err = ENOMEM ; <S2SV_ModStart> goto cleanup ; },0
461,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
462,<S2SV_ModStart> ] ) ; if ( nByte < 0 ) { rc = SQLITE_NOMEM ; } else { <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> memcpy ( pCsr,0
463,<S2SV_ModStart> filp ) { struct socket * sk = <S2SV_ModEnd> SOCKET_I ( inode <S2SV_ModStart> ( inode ) ; if ( sk ) sock_release ( sk,0
464,"<S2SV_ModStart> expr_ty iter, asdl_stmt <S2SV_ModEnd> * body, <S2SV_ModStart> * orelse, asdl_stmt <S2SV_ModEnd> * orelse, <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. orelse_stmt = NULL",0
465,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> my_off_t <S2SV_ModEnd> mi_sort_index ( MI_CHECK <S2SV_ModStart> char * name, my_off_t * index_pos ) { reg2 uint key ; reg1 MI_KEYDEF * keyinfo ; File new_file ; my_off_t r_locks, w_locks ; MYISAM_SHARE * share = info -> s ; MI_STATE_INFO old_state ; DBUG_ENTER ( ""mi_sort_index"" ) ; if (! ( param -> testflag & T_SILENT ) ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; fn_format ( param -> temp_filename, name, """", MI_NAME_IEXT, 2 + 4 + 32 ) ; fn_format ( param -> temp_filename, param -> temp_filename, """", INDEX_TMP_EXT, 2 + 4 ) ; if ( ( new_file = mysql_file_create ( mi_key_file_datatmp, fn_format ( param -> temp_",0
466,"<S2SV_ModStart> NGHTTP2_ERR_BAD_HEADER_BLOCK : return ""Bad <S2SV_blank> header <S2SV_blank> block"" <S2SV_ModEnd> ; case NGHTTP2_ERR_NOT_IMPLEMENTED_HEADER <S2SV_ModStart> NGHTTP2_ERR_NOT_IMPLEMENTED_HEADER_BLOCK : return ""Not <S2SV_blank> IMPLEMENTED <S2SV_blank> HEADER_BLOCK"" <S2SV_ModEnd> ; case NGHTTP2_ERR_NOT_IMPLEMENTED_HEADER_BLOCK <S2SV_ModStart> NGHTTP2_ERR_NOT_IMPLEMENTED_HEADER_BLOCK : return ""Not <S2SV_blank> IMPLEMENTED <S2SV_blank> HEADER_BLOCK"" <S2SV_ModEnd> ; case NGHTTP2_ERR_NOT_IMPLEMENTED_HEADER_BLOCK <S2SV_ModStart> NGHTTP2_ERR_NOT_IMPLEMENTED_HEADER_BLOCK : return ""Not <S2SV_blank> IMPLEMENTED <S2SV_blank> HEADER_BLOCK"" <S2SV_ModEnd> ; case NGHTTP2_ERR_NOT_IMPLEMENTED_HEADER_BLOCK <S2SV_ModStart> NGHTTP2_ERR_NOT_IMPLEMENTED_HEADER_BLOCK : return ""Not <S2SV_blank> IMPLEMENTED <S2SV_blank> HEADER_BLOCK"" <S2SV_ModEnd> ; case NGHTTP2_ERR_NOT_IMPLEMENTED_HEADER_BLOCK <S2SV_ModStart> NGHTTP2_ERR_NOT_IMPLEMENTED_HEADER_BLOCK : return ""Not <S2SV_blank> IMPLEMENTED",0
467,"<S2SV_ModStart> UINT error ; if (! <S2SV_ModStart>, eventId ) ||! <S2SV_ModEnd> Stream_Read_UINT32 ( s <S2SV_ModStart>, pduLength ) ||! pduLength ) { WLog_ERR ( TAG, ""rdpei_recv_pdu: <S2SV_blank> invalid <S2SV_blank> pdu <S2SV_blank> length"" ) ; return CHANNEL_RC_INVALID_DATA ; } <S2SV_ModEnd> # ifdef WITH_DEBUG_RDPEI",0
468,"<S2SV_ModStart> ) ; } if ( pData -> socket == INVALID_SOCKET ) { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"", pData -> description, zmq_strerror ( errno ) ) ; ABORT_FINALIZE ( RS_RET_NO_ERRCODE ) ; }",0
469,"<S2SV_ModStart> struct flowi6 fl6 ; int ret <S2SV_ModStart> daddr ) ; ret = ip6_xmit ( sk, skb, & fl6, np -> opt, np -> tclass ) ; if ( ret < 0 ) { SCTP_INC_STATS ( sock_net ( sk ), SCTP_MIB_OUTSCTPPACKS ) ; return ret ; } <S2SV_ModStart> = 1 ; <S2SV_ModEnd> return ip6_xmit (",0
470,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
471,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
472,"<S2SV_ModStart> = 0 ; bn_t t ; bn_null ( t ) ; RLC_TRY { bn_new ( t ) ; switch ( operation ) { case RSA_ENC : bn_zero ( m ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, RSA_PUB ) ; * p_len = k_len - 3 - m_len ; for ( int i = 0 ; i < * p_len ; i ++ ) { bn_lsh ( m, m, 8 ) ; do { rand_bytes ( & pad, 1 ) ; bn_add_dig ( m, m, pad ) ; } bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, 0 ) ; bn_lsh ( m, m, m_len * 8 ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, 0 ) ; bn_lsh ( m, m, m_len * 8 ) ; } bn_lsh ( m, m, 8 ) ; bn_lsh ( m, m, m_len * 8 ) ;",0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,<S2SV_ModStart> 8 ) ; <S2SV_ModEnd> psf = calloc <S2SV_ModStart> SF_PRIVATE ) ) ; if ( psf <S2SV_ModEnd> == NULL ),0
475,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fix_interp_filter ( VP9_COMMON <S2SV_ModStart> cm ) { int count [ SWITCHABLE_FILTERS ] ; int i, j, c = 0 ; for ( i = 0 ; i < SWITCHABLE_FILTERS ; ++ i ) { count [ i ] = 0 ; for ( j = 0 ; j < SWITCHABLE_FILTER_CONTEXTS ; ++ j ) { if ( cm -> counts. switchable_interp [ j ] [ i ] == 0 ) break ; } } for ( i = 0 ; i < SWITCHABLE_FILTERS ; ++ i ) { count [ i ] += cm -> counts. switchable_interp [ j ] [ i ] ; c += ( count [ i ] > 0 ) ; } if ( c == 1 ) { for ( i = 0 ; i < SWITCHABLE_FILTERS ; ++ i ) { if ( count [ i ] ) { cm -> interp_filter = i ; break ; } } } } if ( c == 1 ) { for ( i = 0 ; i < SWITCHABLE_FILTERS ; ++ i ) { if ( count [ i",0
476,"<S2SV_ModStart> & cpi -> encode_frame <S2SV_ModEnd> ; VP9_COMMON * <S2SV_ModStart> mi_cols ) ; <S2SV_ModEnd> vp9_setup_src_planes ( x <S2SV_ModStart> 0, 0 <S2SV_ModEnd> ) ; vp9_setup_pre_planes <S2SV_ModStart> subsampling_y ) ; vpx_memset ( xd -> above_context [ 0 ], 0, sizeof ( * xd -> above_context [ 0 ] ) * 2 * aligned_mi_cols * MAX_MB_PLANE ) ; vpx_memset ( xd -> above_seg_context, 0, sizeof ( * xd -> above_seg_context ) * aligned_mi_cols ) ; <S2SV_ModStart> MAX_MB_PLANE ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
477,"<S2SV_ModStart> hp ) ; if ( htc -> rxbuf == NULL ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } <S2SV_ModStart>, SLT_Error, ""Duplicated <S2SV_blank> HTTP <S2SV_blank> header"" <S2SV_ModEnd> ) ; return",0
478,"<S2SV_ModStart> define EOFOp 0x07 size_t size_of_image ; <S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; <S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; <S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; <S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; <S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> rows ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; <S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ;",0
479,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> sizeof ( tETH_HDR ),1
480,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ps_dec -> s_cur_slice <S2SV_ModStart> ps_dec -> s_cur_slice!= NULL ) { if ( <S2SV_ModEnd> ps_dec -> s_cur_slice <S2SV_ModStart> ps_dec -> s_cur_slice!= NULL ) { <S2SV_ModEnd> ps_dec -> s_cur_slice <S2SV_ModStart> ps_dec -> s_cur_slice = NULL ; } if ( <S2SV_ModEnd> ps_dec -> s_cur_slice <S2SV_ModStart> ps_dec -> s_cur_slice!= NULL ) { if ( <S2SV_ModEnd> ps_dec -> s_cur_slice <S2SV_ModStart> ps_dec -> s_cur_slice!= NULL ) { if ( <S2SV_ModEnd> ps_dec -> s_cur_slice <S2SV_ModStart> ps_dec -> s_cur_slice!= NULL ) { <S2SV_ModEnd> ps_dec -> s_cur_slice <S2SV_ModStart> ps_dec -> s_cur_slice = NULL ; } if ( <S2SV_ModEnd> ps_dec -> s_cur_slice <S2SV_ModStart> ps_dec -> s_cur_slice!= NULL ) { if ( <S2SV_ModEnd> ps_dec -> s_cur_slice <S2SV_ModStart> ps_dec -> s_cur_slice!= NULL ) { if ( <S2SV_ModEnd> ps_dec -> s_cur_slice <S2SV_ModStart> ps_dec -> s_cur_slice,0
481,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> * karg ; <S2SV_ModEnd> struct pci_dev * <S2SV_ModStart> pci_dev * pdev <S2SV_ModEnd> ; int cim_rev <S2SV_ModStart> ) ) ; kfree ( karg ) ; <S2SV_ModStart> karg ) ; } if ( karg -> hdr. maxDataSize!= data_size ) { printk ( MYIOC_s_ERR_FMT ""%s@%d::mptctl_getiocinfo <S2SV_blank> - <S2SV_blank> Structure <S2SV_blank> size <S2SV_blank> mismatch!\\n"", __FILE__, __LINE__, data_size ) ; kfree ( karg ) ; return - ENODEV ; } if ( ( iocnum = mpt_verify_adapter ( karg -> hdr. iocnum, & ioc ) ) < 0 ) { printk ( KERN_DEBUG MYNAM ""%s::mptctl_getiocinfo() <S2SV_blank> - <S2SV_blank> ioc%d <S2SV_blank> not <S2SV_blank> found!\\n"", __FILE__, __LINE__, iocnum ) ; kfree ( karg ) ; return - ENODEV ; } if ( karg -> hdr. maxDataSize!= data_size",0
482,"<S2SV_ModStart> = 8 ; if ( image -> rows > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""UnableToReadImageData"" ) ;",0
483,"<S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv",0
484,"<S2SV_ModStart> -> offset ; n -> order = EXIF_BYTE_ORDER_INTEL ; datao += exif_get_long ( buf + datao + 8, EXIF_BYTE_ORDER_INTEL ) ; <S2SV_ModStart> EXIF_BYTE_ORDER_INTEL ) ; c = exif_get_short ( buf + datao, EXIF_BYTE_ORDER_INTEL ) ; datao += 2 ; exif_mnote_data_fuji_clear ( n ) ; n -> entries = exif_mem_alloc ( en -> mem, sizeof ( MnoteFujiEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( en -> log, ""ExifMnoteFuji"", sizeof ( MnoteFujiEntry ) * c ) ; return ; } tcount = 0 ; for ( i = c, o = datao ; i < c ; -- i, o += 12 ) { size_t s ; if ( ( o + 12 < o ) || ( o + 12 < o ) || ( o + 2 < 2 ) || ( o + 2 > buf_size ) ) { exif_log (",0
485,"<S2SV_ModStart> ) ; } if ( snprintf ( charbuf, sizeof ( charbuf ), ""%s.html"", rootname ) < 0 ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModStart> ) ; } if ( snprintf ( charbuf, sizeof ( charbuf ), ""%s.html"", rootname ) < 0 ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; }",0
486,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> opt = service_options <S2SV_ModStart> service_options. next <S2SV_ModEnd> ; while ( <S2SV_ModStart> 0 ; } <S2SV_ModEnd> s_log ( LOG_DEBUG <S2SV_ModStart> servname ) ; <S2SV_ModEnd> CRYPTO_THREAD_unlock ( stunnel_locks,0
487,<S2SV_ModStart> void ) { if (! recovery_started ) return ;,0
488,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ;",0
489,"<S2SV_ModStart> image ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
490,<S2SV_ModStart> { WORD32 i <S2SV_ModEnd> ; WORD32 num_neg_pics <S2SV_ModStart> u4_num_total_curr ; } if ( u4_num_st_curr_before < u4_num_lt_curr [ 0 ] || u4_num_st_curr_after < u4_num_lt_curr [ 0 ] || u4_num_lt_curr [ 0 ] || u4_num_st_curr_after > u4_num_lt_curr [ 0 ] || u4_num_st_curr_after > u4_num_total_curr ) { return - 1 ; } st_rps_idx = 0 ; st_rps_idx = 0 ; st_rps_idx += u4_num_st_curr_before ; st_rps_idx += u4_num_st_curr_before ; st_rps_idx += u4_num_st_curr_after ; st_rps_idx += u4_num_st_curr_after ; st_rps_idx += u4_num_st_curr_after ; st_rps_idx += u4_num,0
491,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> print_object ( cJSON <S2SV_ModStart> child ) { if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( names = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) { cJSON_free ( entries ) ; return 0 ; } memset ( names, 0, sizeof ( char * ) * numentries ) ; child = item -> child ; ++ depth ; if ( fmt ) len += depth ; while ( child ) { if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) { cJSON_free ( entries ) ; return 0 ; } memset ( names, 0, sizeof ( char * ) * numentries ) ; child = child -> child ; ++ depth ; if ( fmt ) len += depth ; while ( child ) { <S2SV_ModStart> = print_string_ptr ( <S2SV_ModEnd> child -> string <S2SV_ModStart> = ret = print_value ( child, depth, fmt ) ; if ( str && ret ) len +=",0
492,"<S2SV_ModStart> sk ) ; if ( writable ) { unix_state_lock ( sk ) ; other = unix_peer ( sk ) ; if ( other ) { sock_poll_wait ( file, & unix_sk ( other ) -> peer_wait, wait ) ; if ( unix_recvq_full ( other ) ) writable = 0 ; } unix_state_unlock ( sk ) ; } else { <S2SV_ModStart> = 0 ; } <S2SV_ModEnd> } if (",0
493,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; sprintf ( outputbuffer, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", x, y, w, h ) ;",0
494,<S2SV_ModStart> ( OM_uint32 ) GSS_S_DEFECTIVE_TOKEN <S2SV_ModEnd> ; return GSS_S_DEFECTIVE_TOKEN,0
495,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { vpx_ref_frame_t <S2SV_ModEnd> * frame = <S2SV_ModStart> ( args, vpx_ref_frame_t <S2SV_ModEnd> * ) ; <S2SV_ModStart> NULL ) { vpx_get_reference_enc <S2SV_ModEnd> ( ctx ->",0
496,<S2SV_ModStart> plug ) ; <S2SV_ModEnd> put_ioctx ( ctx,0
497,"<S2SV_ModStart> * name, my_bool <S2SV_ModEnd> rep_quick ) { <S2SV_ModStart> ) || ( <S2SV_ModEnd> init_io_cache ( & <S2SV_ModStart> ) || ( <S2SV_ModEnd> init_io_cache ( & <S2SV_ModStart> ) || ( <S2SV_ModEnd> init_io_cache ( & <S2SV_ModStart> ) || ( <S2SV_ModEnd> init_io_cache ( & <S2SV_ModStart> ) || ( <S2SV_ModEnd> init_io_cache ( & <S2SV_ModStart> ) || ( <S2SV_ModEnd> init_io_cache ( & <S2SV_ModStart> ) || ( <S2SV_ModEnd> init_io_cache ( & <S2SV_ModStart> ) || ( <S2SV_ModEnd> init_io_cache ( & <S2SV_ModStart> ) || ( <S2SV_ModEnd> init_io_cache ( & <S2SV_ModStart> ) || ( <S2SV_ModEnd> init_io_cache ( & <S2SV_ModStart> ) || ( <S2SV_ModEnd> init_io_cache ( & <S2SV_ModStart> ) || ( <S2SV_ModEnd> init_io_cache ( & <S2SV_ModStart> ) || ( <S2SV_ModEnd> init_io_cache ( & <S2SV_ModStart> ) || ( <S2SV_ModEnd> init_io_cache ( & <S2SV_ModStart> ) || ( <S2SV_ModEnd> init_io_cache ( & <S2SV_ModStart> ) || ( <S2SV_ModEnd> init_io_cache ( & <S2SV_ModStart> ) || ( <S2SV_ModEnd> init_io_cache ( & <S2SV_ModStart> ) || ( <S2SV_ModEnd> init_io_cache ( & <S2SV_ModStart> ) || ( <S2SV_ModEnd> init_io_cache ( & <S2SV_ModStart> ) || ( <S2SV_ModEnd> init_io_cache ( &",0
498,"<S2SV_ModStart> s } ; uECC_word_t p [ uECC_MAX_WORDS * 2 ] ; wordcount_t num_words = curve -> num_words ; wordcount_t num_n_words = BITS_TO_WORDS ( curve -> num_n_bits ) ; bitcount_t num_n_bits = curve -> num_n_bits ; if ( uECC_vli_isZero ( k, num_words ) || uECC_vli_cmp ( curve -> n, k, num_words )!= 1 ) { return 0 ; } carry = regularize_k ( k, tmp, s, curve ) ; EccPoint_mult ( p, curve -> G, k2 [! carry ], 0, num_n_bits + 1, curve ) ; if ( uECC_vli_isZero ( p, num_words ) ) { return 0 ; } if (! g_rng_function ) { uECC_vli_clear ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! uECC_generate_random_int ( tmp, curve",0
499,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|dao-truncated]"" <S2SV_ModEnd> ) ) ;",0
500,<S2SV_ModStart> ; } else if ( pool -> free_total == 0 ) { pool -> free_arr = malloc ( sizeof ( nw_buf * ) ) ; if (! pool -> free_arr ) { free ( buf ) ; return ; } } else <S2SV_ModStart> ) ; } pool -> free_total = new_free_total ;,0
501,"<S2SV_ModStart> tp ; { int cval = 0, meta = 0 ; if ( * cp == '\\\\' && cp [ 1 ] && index ( ""mM"", cp [ 1 ] ) && cp [ 2 ] ) { meta = 1 ; cp += 2 ; } if ( * cp == '\\\\' && cp [ 1 ] && index ( ""0123456789xXoO"", cp [ 1 ] ) && cp [ 2 ] ) { NEARDATA const char hex [ ] = ""00112233445566778899aAbBcCdDeEfF"" ; const char * dp ; int dcount = 0 ; cp ++ ; if ( * cp == 'x' || * cp == 'X' ) for ( ++ cp ; * cp && ( dp = index ( hex, * cp ) ) && ( dcount ++ < 2 ) ; cp ++ ) cval = ( cval * 16 ) + ( ( int ) ( dp - hex ) / 2 ) ; else if ( * cp == 'o' || * cp == 'O' ) for ( ++ cp ; * cp && ( index ( ""01234567"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval =",0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
503,"<S2SV_ModStart>, * pixg <S2SV_ModEnd> ; PIXCMAP * <S2SV_ModStart> == NULL ) { pixDestroy ( & pixc ) ; <S2SV_ModStart> NULL ) ; }",0
504,<S2SV_ModStart>. vf = vpx_mse16x16 <S2SV_ModEnd> ; xd ->,1
505,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> overhead = 16 <S2SV_ModStart> + 1 ; size_t <S2SV_ModEnd> size = overhead,1
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NEGO_STATE_FAIL ; goto error <S2SV_ModEnd> ; } Stream_Read_UINT8 <S2SV_ModStart> = NEGO_STATE_FINAL ; return ; error : return ;,0
507,"<S2SV_ModStart> i, target_bits_per_mb <S2SV_ModEnd> ; target_bits_per_mb = <S2SV_ModStart> int bits_per_mb_at_this_q = <S2SV_ModEnd> vp9_rc_bits_per_mb ( cm <S2SV_ModStart> i, correction_factor <S2SV_ModEnd> ) ; if",0
508,<S2SV_ModStart> value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ | TJA1101_CONFIG1_MII_MODE_MII_25MHZ,0
509,"<S2SV_ModStart> if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == VARARGS && TYPE ( CHILD ( n, i ) ) == VARARGS && TYPE ( CHILD ( n, i ) ) == VARARGS && TYPE ( CHILD ( n, i ) ) == VARARGS && TYPE ( CHILD ( n, i ) ) == VARARGS && TYPE ( CHILD ( n, i ) ) == VARARGS && TYPE ( CHILD ( n, i ) ) == VARARGS && TYPE ( CHILD ( n, i ) ) == VARARGS && TYPE ( CHILD ( n, i ) ) == VARARGS && TYPE ( CHILD ( n, i ) ) == VARARGS && TYPE ( CHILD ( n, i ) ) == VARARGS && TYPE ( CHILD ( n, i ) ) == VARARGS && TYPE ( CHILD ( n, i ) ) == VARARGS && TYPE ( CHILD ( n, i ) ) == VARARGS && TYPE ( CHILD ( n, i ) ) == VARARGS && TYPE ( CHILD ( n, i ) ) == VARARGS && TYPE ( CHILD ( n, i ) ) == VARARGS && TYPE ( CHILD (",0
510,"<S2SV_ModStart> int dst_stride, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart> int i ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> uint8_t, left_col <S2SV_ModEnd> ) ; DECLARE_ALIGNED <S2SV_ModStart> plane ] ; <S2SV_ModEnd> if ( plane <S2SV_ModStart> + y ; memset <S2SV_ModEnd> ( left_col, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( right_col, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; mem",0
511,"<S2SV_ModStart> ++ ; } else if ( pattern [ end ] == \'""\' ) { end ++ ; while ( ( pattern [ end ]!= 0 ) && ( pattern [ end ]!= \'""\' ) ) end ++ ; }",0
512,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_completed_io_lock ) ;,1
513,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; write_profile ( cm -> profile, wb ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> show_frame ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> KEY_FRAME ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; } vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; } vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
514,"<S2SV_ModStart> ) ; } if ( optind < 1 ) { fprintf ( stderr, ""Error: <S2SV_blank> %s\\n"", strerror ( errno ) ) ; exit ( EXIT_FAILURE ) ; }",0
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { q = osStrchr <S2SV_ModEnd> ( p +,1
516,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
517,<S2SV_ModStart> KEY_FRAME ) { memcpy <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd ->,1
518,"<S2SV_ModStart> error_t error ; int16_t <S2SV_ModEnd> n ; uint32_t <S2SV_ModStart> ( interface, ENC624J600_ESTAT <S2SV_ModEnd> ) & ESTAT_PKTCNT <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( n, ENC624J600_MAX_FRAME_SIZE <S2SV_ModEnd> ) ; enc624j600ReadBuffer <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL <S2SV_ModEnd>, ENC624J600_RX_BUFFER_STOP ) <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL <S2SV_ModEnd>, ENC624J600_RX_BUFFER_STOP ) <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL <S2SV_ModEnd>, ENC624J600_RX_BUFFER_",0
519,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv ) { VALUE klass = rb_ary_get ( argc, 1 ) ; <S2SV_ModEnd> xmlSchemaPtr schema ; <S2SV_ModStart> ; xmlSchemaParserCtxtPtr ctx ; VALUE rb_schema ; VALUE errors = rb_ary_new ( ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; # ifdef HAVE_XMLSCHEMASETPARSERSTRUCTUREDERRORS xmlSchemaSetParserStructuredErrors ( ctx, Nokogiri_error_array_pusher, ( void * ) errors ) ; # endif schema = xmlSchemaParse ( ctx ) ; xmlSetStructuredErrorFunc ( NULL, NULL ) ; xmlSchemaFreeParserCtxt ( ctx ) ; if ( NULL == schema ) { xmlErrorPtr error = xmlGetLastError ( ) ; if ( error ) Nokogiri_error_raise ( NULL, error ) ; else rb_raise ( rb_eRuntimeError, ""Could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> document"" ) ; return Qnil ; } ctx = xmlSchemaNewMemParserCtxt ( ( const char * ) StringValuePtr ( content ), ( int ) RSTRING_LEN ( content ) )",0
520,"<S2SV_ModStart> ) ; } if ( strlen ( config_arg ) > CONF_MAX_OPTION ) { s_log ( LOG_ERR, ""Configuration <S2SV_blank> argument <S2SV_blank> too <S2SV_blank> long: <S2SV_blank> %s"", config_arg ) ; print_syntax ( ) ; return 1 ; }",0
521,<S2SV_ModStart> 2 ] ; ptr <S2SV_ModEnd> += 4 ; <S2SV_ModStart> 2 ] ; ptr <S2SV_ModEnd> += 4 ; <S2SV_ModStart> 2 ] ; ptr <S2SV_ModEnd> += 4 ;,0
522,<S2SV_ModStart> err = - <S2SV_ModEnd> EALREADY ; if,0
523,<S2SV_ModStart> POLL_IN ) ; <S2SV_ModEnd> perf_event_wakeup ( handle,0
524,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
525,"<S2SV_ModStart> EPROTONOSUPPORT ) { if ( as_console ) { sleep ( 2 ) ; } <S2SV_ModStart> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" <S2SV_ModEnd> ) ; }",0
526,"<S2SV_ModStart> ( interface, KSZ8851_RXFHSR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXMR | KSZ8851_RXFTL | KSZ8851_RXRF | KSZ8851_RXCE <S2SV_ModEnd> ) ) == <S2SV_ModStart> ( interface, KSZ8851_RXFDPR, KSZ8851_RXFDPR_RXFPAI <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ancillary <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_RRXEF <S2SV_ModEnd> ) ; return",0
527,"<S2SV_ModStart> ast_for_funcdef_impl ( struct compiler * c, const node * n, asdl_seq * decorator_seq, int is_async ) { identifier name ; arguments_ty args ; asdl_seq * body ; expr_ty returns = NULL ; int name_i = 1 ; node * tc ; string type_comment = NULL ; if ( c -> c_feature_version < 5 ) { ast_error ( c, n, ""Async <S2SV_blank> functions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.5 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } REQ ( n, funcdef ) ; name = NEW_IDENTIFIER ( CHILD ( n, name_i ) ) ; if (! name ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i ), 0 ) ) return NULL ; args = ast_for_arguments ( c, CHILD ( n, name_i + 1 ) ) ; if (! args ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 2 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name",0
528,"<S2SV_ModStart> int i ; if ( unlikely ( mm_is_oom_victim ( mm ) ) ) return ; <S2SV_ModStart> mm, 0xA0000 ) ; if ( pgd_none_or_clear_bad ( pgd ) ) goto out ; pud = pud_offset ( pgd, 0xA0000",0
529,"<S2SV_ModStart> token_len ) ; if ( 0!= ptr_check_result ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } <S2SV_ModStart> token_len ) ; if ( 0!= ptr_check_result ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } <S2SV_ModStart> token_len ) ; if ( 0!= ptr_check_result ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; }",0
530,<S2SV_ModStart> ) ) { hal_close ( callbacks_get_adapter_struct ( ) ) ; <S2SV_ModStart> ) ) { hal_close ( callbacks_get_adapter_struct ( ) ) ; <S2SV_ModStart> ) ) { hal_close ( callbacks_get_adapter_struct ( ) ) ; <S2SV_ModStart> ) ) { hal_close ( callbacks_get_adapter_struct ( ) ) ; <S2SV_ModStart> ) ) { hal_close ( callbacks_get_adapter_struct ( ) ) ; <S2SV_ModStart> ) ) { hal_close ( callbacks_get_adapter_struct ( ) ) ; <S2SV_ModStart> ) ) { hal_close ( callbacks_get_adapter_struct ( ) ) ; <S2SV_ModStart> ) ) { hal_close ( callbacks_get_adapter_struct ( ) ) ; <S2SV_ModStart> ) ) { hal_close ( callbacks_get_adapter_struct ( ) ) ; <S2SV_ModStart> ) ) { hal_close ( callbacks_get_adapter_struct ( ) ) ; <S2SV_ModStart> ) ) { hal_close ( callbacks_get_adapter_struct ( ) ) ; <S2SV_ModStart> ) ) { hal_close ( callbacks_get_adapter_struct ( ) ) ; <S2SV_ModStart> ) ) { hal_close ( callbacks_get_adapter_struct ( ) ) ;,0
531,<S2SV_ModStart> 0 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif <S2SV_ModStart> row ++ ) <S2SV_ModEnd> for ( col <S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif,0
532,<S2SV_ModStart> ; if (! nl ) { up_write ( & _hash_lock ) ; return - ENOMEM ; } if (,0
533,"<S2SV_ModStart> ) break ; if ( quantum_info -> quantum_type == QuantumTypeNone ) { quantum_info = ( QuantumInfo * ) CloneImageInfo ( clone_info ) ; if ( quantum_info -> quantum_type == QuantumTypeNone ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; }",0
534,<S2SV_ModStart> ( bfqq ) __bfq_idle_slice_timer_body <S2SV_ModEnd> ( bfqq ),0
535,<S2SV_ModStart> ; length += sizeof ( PRIMARY_DRAWING_ORDER_FIELD ) <S2SV_ModEnd> ; length +=,0
536,<S2SV_ModStart>! new_create ) { if (! d_is_dir ( new ) ) { err = - EISDIR ; goto out ; } <S2SV_ModStart> goto out ; },0
537,"<S2SV_ModStart> int plane ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
538,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> nonrd_pick_sb_modes ( VP9_COMP <S2SV_ModStart> -> e_mbd ; if ( xd -> mi [ 0 ] -> mbmi. sb_type!= BLOCK_NONE ) { <S2SV_ModStart> bsize ) ; } else { if ( xd -> mi [ 0 ] -> mbmi. sb_type!= BLOCK_NONE ) { vp9_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } else { MB_PREDICTION_MODE intramode = DC_PRED ; set_mode_info ( & xd -> mi [ 0 ] -> mbmi, bsize, intramode ) ; } duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; } return 0 <S2SV_ModEnd> ; } <S2SV_null>",0
539,"<S2SV_ModStart> = NULL ; if ( strcmp ( filename, ""-"" ) ) fclose ( reader. fhd ) ; <S2SV_ModStart> superblock ) ; <S2SV_ModEnd> hrtf = getHrtf",0
540,"<S2SV_ModStart> -> ranges = calloc ( 1, <S2SV_ModEnd> sizeof ( MappedRange",0
541,"<S2SV_ModStart> ; if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_ALTR_FRAME ; vp8_use_as_reference ( ctx -> cpi, ref ) ; } if ( flags & ( VP8_EFLAG_FORCE_GF | VP8_EFLAG_NO_UPD_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_FORCE_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_FORCE_ARF ) ref ^= VP8_ALTR_FRAME ; vp8_",0
542,<S2SV_ModStart> ) break ; if ( quantum_info -> quantum_type == QuantumTypeLinear ) quantum_info -> quantum_type = MagickFalse ;,0
543,<S2SV_ModStart>! head ) <S2SV_ModEnd> return - EINVAL <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
544,"<S2SV_ModStart> * pptr, u_int64 <S2SV_ModEnd> len ) { <S2SV_ModStart> advance ; u_int64 <S2SV_ModEnd> tlen ; const",0
545,"<S2SV_ModStart> ( res, ""HTTP/1.1 <S2SV_blank> 200 <S2SV_blank> OK\\r\\n\\r\\n"" <S2SV_ModEnd> ) ; }",0
546,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
547,<S2SV_ModStart> ) ) ; if ( strlen ( constr1 ) > sizeof ( constr2 ) - 1 ) { return false ; },0
548,"<S2SV_ModStart> iad_num ++ ; if ( iad_num >= USB_MAXINTERFACES ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, nintf_orig, USB_MAXINTERFACES ) ; nintf = USB_MAXINTERFACES ; }",0
549,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
550,<S2SV_ModStart> ; distortion = vpx_variance16x16 <S2SV_ModEnd> ( * (,1
551,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_ECON2_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MAADR1 ) ; interface -> macAddr. w [ 0 ] = letoh16 ( temp ) ; temp = enc624j600ReadReg ( interface, ENC624J600_MAADR2 ) ; interface -> macAddr. w [ 1 ] = letoh16 ( temp ) ; temp = enc624j600ReadReg ( interface, ENC624J600_MAADR3 ) ; interface -> macAddr. w [ 2 ] = letoh16 ( temp ) ; macAddrToEui64 ( & interface -> macAddr, & interface -> eui64 ) ; } else { temp = htole16 ( interface -> macAddr. w [ 0 ] ) ; enc624j600WriteReg ( interface, ENC624J600_MAADR1, temp ) ; temp = htole16 ( interface -> macAddr. w [ 1 ] ) ; enc624j600Write",0
552,<S2SV_ModStart> * start ; if ( psf -> header == NULL ) return ; <S2SV_ModStart> header ) ; if ( maxlen >= sizeof ( psf -> header ) ) return ; <S2SV_ModStart> + maxlen ; if ( maxlen >= sizeof ( psf -> header ) ) return ; <S2SV_ModStart> = 0 ; if ( strlen ( ( char * ) psf -> header ) >= sizeof ( psf -> header ) ) return ;,0
553,<S2SV_ModStart> -> alg_priv ) { <S2SV_ModStart> alg_priv ) ; ctx -> priv -> alg_priv = NULL ; },0
554,<S2SV_ModStart> { sf -> <S2SV_ModEnd> recode_loop = ( <S2SV_ModStart> ; sf -> <S2SV_ModEnd> less_rectangular_check = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> mode_skip_start = 10 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> recode_loop = ALLOW_RECODE_KFARFGF <S2SV_ModStart> ; sf -> <S2SV_ModEnd> recode_loop = ALLOW_RECODE_KFMAXBW <S2SV_ModStart> ; sf -> <S2SV_ModEnd> recode_loop = ALLOW_RECODE_KFMAXBW <S2SV_ModStart> { sf -> <S2SV_ModEnd> recode_loop = ALLOW_RECODE_KFMAXBW <S2SV_ModStart> ; sf -> <S2SV_ModEnd> allow_skip_recode = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> mode_skip_start = 10 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> recode_loop = ALLOW_RECODE_KFARFGF <S2SV_ModStart> ; sf -> <S2SV_ModEnd> recode_loop = ALLOW_RECODE_KFMAXBW <S2SV_ModStart> ; sf -> <S2SV_ModEnd> recode_loop = ALLOW_RECODE_KFMAXBW <S2SV_ModStart> ; sf -> <S2SV_ModEnd> recode_loop = ALLOW_RECODE_KFMAXBW <S2SV_ModStart> ; sf -> <S2SV_ModEnd> allow_skip_recode = 1,0
555,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
556,<S2SV_ModStart> int goodsize = ( <S2SV_ModStart> 2 * EXTRA_STACK ) <S2SV_ModStart> if ( goodsize >= <S2SV_ModEnd> LUAI_MAXSTACK ) goodsize,0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,"<S2SV_ModStart> n ) ; if (! str ) { PyArena_AddPyObject ( c -> c_arena, str ) ; return Str ( str, kind, LINENO ( n ), n -> n_col_offset, c -> c_arena ) ; } <S2SV_ModStart> ) ) ; <S2SV_ModEnd> char * ch <S2SV_ModStart> errstr ) { <S2SV_ModEnd> Py_DECREF ( errstr",0
559,"<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> break ; } input_string = strdup ( option_value ) ; option_name = strtok_r ( NULL, ""="", & input_ptr ) ; while ( option_name!= NULL ) { option_value = strtok_r ( NULL, "" <S2SV_blank> "", & input_ptr ) ; if ( option_value == NULL ) { svc_log ( svc_ctx, SVC_LOG_ERROR, ""option <S2SV_blank> missing <S2SV_blank> value: <S2SV_blank> %s\\n"", option_name ) ; res = VPX_CODEC_INVALID_PARAM ; break ; } <S2SV_ModStart> ) break ; svc_ctx -> spatial_layers = atoi ( option_value ) ; } else if ( strcmp ( ""layers"", option_name ) == 0 ) { res = set_option_layers ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""scale-factors"", option_name ) == 0 ) { res = parse_scale_factors ( svc_ctx, option_value ) ; if ( res!= VP",0
560,<S2SV_ModStart> ) ; } <S2SV_ModEnd> mb_index = 0,0
561,<S2SV_ModStart> self ) { size_t <S2SV_ModEnd> i ; PyObject,1
562,,1
563,"<S2SV_ModStart> ( dbh, MYSQL_ERROR <S2SV_ModEnd> ( imp_dbh ->",0
564,<S2SV_ModStart> size ) ) { <S2SV_ModStart> slot_lock ) ; return ; },0
565,<S2SV_ModStart> struct ieee_802_11_phdr phdr ; if ( pinfo -> curr_layer_num < 2 ) return,0
566,<S2SV_ModStart> ; sh = sds_malloc <S2SV_ModEnd> ( hdrlen +,0
567,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> BYTE a_val ; if ( context -> width > UINT32_MAX / scanline ) { return FALSE ; } <S2SV_ModStart> -> ColorLossLevel ; if ( context -> height > UINT32_MAX / scanline ) { return FALSE ; } <S2SV_ModStart> ; } } return TRUE ;,0
568,<S2SV_ModStart> > nr_parens ) { ret = <S2SV_ModEnd> - EINVAL ; <S2SV_ModStart> - EINVAL ; goto out_free ; },0
569,"<S2SV_ModStart> cpi ) { int target ; if ( cpi -> common. current_video_frame == 0 ) { const int initial_boost = 32 ; int kf_boost = MAX ( initial_boost, ( int ) ( 2 * cpi -> output_framerate - 16 ) ) ; if ( rc -> frames_since_key < cpi -> output_framerate / 2 ) { kf_boost = ( int ) ( kf_boost * rc -> frames_since_key / ( cpi -> output_framerate / 2 ) ) ; } target = ( ( cpi -> oxcf. starting_buffer_level / 2 ) > INT_MAX )? INT_MAX : ( int ) ( cpi -> oxcf. starting_buffer_level / 2 ) ; } else { <S2SV_ModStart> rc -> rc. <S2SV_ModEnd> av_per_frame_bandwidth ) >>",0
570,"<S2SV_ModStart> TX_MODE read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r )",1
571,"<S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd>",0
572,"<S2SV_ModStart> -> cpi ; <S2SV_ModEnd> struct macroblock_plane * <S2SV_ModStart> & cpi -> td. <S2SV_ModStart> plane_type ; const int16_t * qcoeff = BLOCK_OFFSET ( p -> qcoeff, block ) ; const int segment_id = mbmi -> segment_id ; const int16_t * scan, * nb ; const scan_order * so ; const int ref = is_inter_block ( mbmi ) ; unsigned int ( * const counts ) [ COEFF_CONTEXTS ] [ ENTROPY_TOKENS ] = cpi -> coef_counts [ tx_size ] [ type ] [ ref ] ; vp9_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = <S2SV_ModEnd> cpi -> common <S2SV_ModStart> common. fc -> <S2SV_ModEnd> coef_probs [ tx_size <S2SV_ModStart> [ ref ] <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> COEFF_CONTEXTS ] = <S2SV_ModEnd> cpi -> common <S2SV_ModStart> type ] [ <S2SV_ModEnd> ref ] ; <S2SV_ModStart> int aoff, <S2SV_ModEnd> loff ; txfrm_block_to_raster_xy",0
573,<S2SV_ModStart>. pRename ; if ( pSelect -> selFlags & SF_View ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; },0
574,"<S2SV_ModStart> users ) ; if ( cb_info -> serv ) { printk ( KERN_ERR ""nfs_callback_create_svc: <S2SV_blank> create <S2SV_blank> service <S2SV_blank> failed\\n"" ) ; return ERR_PTR ( - ENOMEM ) ; } cb_info -> serv = serv ; serv -> sv_maxconn = 1024 ; dprintk ( ""nfs_callback_create_svc: <S2SV_blank> service <S2SV_blank> created\\n"" ) ; <S2SV_ModStart> sv_ops ) ; <S2SV_ModEnd> return serv ;",0
575,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
576,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
577,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
578,"<S2SV_ModStart> s ) { if (! TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) ) ) { <S2SV_ModEnd> ret = send <S2SV_ModStart> 0 ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> == EINTR ) ) ; } <S2SV_ModEnd> if ( ret",0
579,"<S2SV_ModStart> ( xIter = xml_first_attr <S2SV_ModEnd> ( xml ) <S2SV_ModStart> ( prop_name, ID_ATTR_NAME <S2SV_ModEnd> ) == 0 <S2SV_ModStart> } else { <S2SV_ModEnd> crm_trace ( ""Cannot <S2SV_blank> add <S2SV_blank> new <S2SV_blank> node <S2SV_blank> %s <S2SV_blank> at <S2SV_blank> %s"" <S2SV_ModStart> } } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
580,<S2SV_ModStart> <S2SV_null> static const SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> return ( const SvcInternal_t <S2SV_ModEnd> * ) svc_ctx,1
581,<S2SV_ModStart> ptr ) ; MAKE_STD_ZVAL ( zdata_ptr ) ;,0
582,"<S2SV_ModStart> only_420 ) { int i ; <S2SV_ModStart> char buffer [ 79 <S2SV_ModEnd> ] ; int <S2SV_ModStart> -> vpx_bps = 14 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) ) { <S2SV_ModStart> -> chroma_bps = 14 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) ) { <S2SV_ModStart> -> chroma_bps = 14 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) ) { <S2SV_ModStart> -> chroma_bps = 14 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) ) { <S2SV_ModStart> -> chroma_bps = 14 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) ) { <S2SV_ModStart> -> chroma_bps = 14 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) ) { <S2SV_ModStart> -> chroma_bps = 14 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) ) { <S2SV_ModStart> -> chroma_bps = 14 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) ) { <S2SV_ModStart> -> chrom",0
583,"<S2SV_ModStart> buf ; { wizkit_addinv ( <S2SV_ModEnd> readobjnam ( buf <S2SV_ModStart> * ) 0, & zeroobj ) ; <S2SV_ModEnd> return TRUE ;",0
584,<S2SV_ModStart> ( ) { <S2SV_ModEnd> if ( read_xattrs_from_disk <S2SV_ModStart> == 0 ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( read_uids_guids <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( parse_exports_table <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( read_fragment_table <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( read_inode_table <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( no_xattrs <S2SV_ModStart> return TRUE ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
585,"<S2SV_ModStart> * createenv ( struct envtree * envtree, <S2SV_ModStart> root ) ; <S2SV_ModEnd> if ( rule <S2SV_ModStart> ; } } <S2SV_ModEnd> return env ;",0
586,"<S2SV_ModStart> -> seg ; vpx_clear_system_state <S2SV_ModEnd> ( ) ; <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> mi_cols ) ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ; } } vpx_memset ( cpi -> segmentation_map, 0, cm -> mi_rows * cm -> mi_cols ) ; vpx_memset ( cpi -> complexity_map, 0, cm -> mi_rows * cm -> mi_cols ) ; vp9_enable_segmentation ( seg ) ; vp9_clearall_segfeatures ( seg ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> frame_type, cm -> base_qindex, in_frame_q_adj_ratio [ segment ] ) ; vp9_enable_segfeature ( seg, segment, SEG_LVL_ALT_Q ) ; vp9_set_segdata ( seg, segment, SEG_LVL_ALT_Q, qindex_delta ) ; }",0
587,"<S2SV_ModStart> = make_type ( ""module"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""interactive"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""expression"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""suite"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""functiondef"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""asyncfunctiondef"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""classdef"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""delete"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""assign"" <S2SV_ModEnd>, stmt_type,",0
588,<S2SV_ModStart> } logfile_fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> S_IWGRP | S_IROTH ) <S2SV_ModStart> return ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart> 16 ) ; ),0
589,<S2SV_ModStart> ; } # else ( void ) cpi ; #,1
590,"<S2SV_ModStart> cinput ) { <S2SV_ModEnd> char * s <S2SV_ModStart>, * StartClean <S2SV_ModEnd> ; SetDefaults ( <S2SV_ModStart> t ++ ; if ( * s == '0' && s [ 1 ] == ']' ) { if ( strcmp ( nameobject, ""AxodrawWantsPDF"" ) == 0 ) { identification = 1 ; outpos += sprintf ( outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", VERSION, SUBVERSION ) ; fprintf ( outfile, ""%s"", outputbuffer ) ; return ( 0 ) ; } else { fprintf ( stderr, ""%s: <S2SV_blank> Illegal <S2SV_blank> request <S2SV_blank> in <S2SV_blank> identification <S2SV_blank> string <S2SV_blank> [0]: <S2SV_blank> %s\\n"", axohelp, nameobject ) ; if ( argbuf ) free ( argbuf ) ; return ( - 1 ) ; } } else { fprintf ( stderr, ""%s: <S2SV_blank> Illegal <S2SV_blank> request <S2SV_blank> in <S2SV_blank> identification <S2SV_blank> string <S2SV_blank> [1]: <S2SV_blank> %s\\n"", axohelp, nameobject ) ; return ( - 1 ) ; } } StartClean = outputbuffer ; nameobject = t ; while ( * t!='<S2SV_blank>'&& * t!= '\\t' || * t == '\\",0
591,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lower, & tmp ) < 0 ) { return 1 ; } else <S2SV_ModEnd> { int res <S2SV_ModStart> int res ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { lower = NULL ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_upper, & tmp ) < 0 ) { return 1 ; } else { upper = NULL ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_step, & tmp ) < 0 ) { return 1 ; } else { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { step = NULL ; } * out = Slice ( lower, upper, step, arena ) ; if ( * out == NULL ) goto failed ; return 0 ; } isinstance = PyObject_IsInstance ( obj, ( PyObject * ) ExtSlice_type ) ; if ( isinstance == - 1 )",0
592,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs ) <S2SV_ModStart> probs ) { vpx_write_token <S2SV_ModEnd> ( w,",0
593,"<S2SV_ModStart> extack ) ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; return - EOPNOTSUPP ; } <S2SV_ModEnd> tos_off = proto <S2SV_ModStart> ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; return - EOPNOTSUPP <S2SV_ModEnd> ; } } <S2SV_ModStart>! match ) { err = <S2SV_ModEnd> - ENOMEM ; <S2SV_ModStart> - ENOMEM ; goto err_delete ; } <S2SV_ModStart> knode ) ; kfree ( match ) ;",0
594,<S2SV_ModStart> ) ; } if ( stream -> config. cfg. g_pass!= VPX_RC_ONE_PASS ) { <S2SV_ModStart> : VPX_RC_ONE_PASS ; },0
595,"<S2SV_ModStart> ; if ( g_str_has_prefix ( new_data, "".shell"" ) ) { g_autofree gchar * new_shell = g_strdup_printf ( ""%s <S2SV_blank> %s <S2SV_blank> %s"", new_data, "".shell"", escaped_app, escaped_branch ) ; g_string_append_printf ( new_shell, ""\\n"" ) ; g_string_append_printf ( new_shell, ""\\n"" ) ; } if ( g_str_has_prefix ( new_data, "".shell"" ) ) { g_autofree gchar * new_shell = g_strdup_printf ( ""%s <S2SV_blank> %s"", new_data, "".shell"" ) ; g_string_append_printf ( new_shell, ""\\n"" ) ; g_string_append_printf ( new_shell, ""\\n"" ) ; g_string_append_printf ( new_shell, ""\\n"" ) ; g_string_append_printf ( new_shell, ""\\n"" ) ; g_string_append_printf ( new_shell, ""\\n"" ) ; g_string_append_printf ( new_shell",0
596,<S2SV_ModStart> data_end ) { const <S2SV_ModStart> end = NULL <S2SV_ModEnd> ; assert ( <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> aligned_cols ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> aligned_cols ) ; memset <S2SV_ModEnd> ( cm ->,0
597,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> * vp9_decoder_create ( <S2SV_ModEnd> VP9D_CONFIG * oxcf <S2SV_ModStart> ovcf ) { VP9Decoder * const pbi = vpx_memalign ( 32, sizeof ( * pbi ) ) ; VP9_COMMON * const cm = pbi? & pbi -> common : NULL ; if (! cm ) return NULL ; vp9_zero ( * pbi ) ; if ( setjmp ( cm -> error. jmp ) ) { cm -> error. setjmp = 0 ; vp9_decoder_remove ( pbi ) ; return NULL ; } cm -> error. setjmp = 1 ; vp9_initialize_dec ( ) ; vpx_memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_video_frame = 0 ; pbi -> oxcf = * oxcf ; pbi -> ready_for_new_data = 1 ; pbi -> decoded_key_frame = 0 ; vp9_init_dequantizer ( cm )",0
598,"<S2SV_ModStart>, GF_LOG_CONTAINER, <S2SV_ModEnd> ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) <S2SV_ModStart> GF_ISOM_BOX_TYPE_DREF ) ; if (! ( ( GF_DataInformationBox * ) s ) -> dref ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
599,<S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> -> opt ; <S2SV_ModEnd> cipso_v4_delopt ( &,0
600,"<S2SV_ModStart> tokens, const vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> do { const vpx_tree_index <S2SV_ModEnd> j = tree",1
601,"<S2SV_ModStart> ( img ) { <S2SV_ModStart> img ) ; if ( res!= VPX_CODEC_OK ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } }",0
602,"<S2SV_ModStart>, & len, 0",1
603,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
604,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int64_t <S2SV_ModEnd> frame_max_bits ( const <S2SV_ModStart> occf ) { int64_t <S2SV_ModEnd> max_bits = ( <S2SV_ModStart> = ( ( int64_t <S2SV_ModEnd> ) rc ->,0
605,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
606,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_superblock ( VP9_COMP <S2SV_ModStart> * cpi, <S2SV_ModEnd> int mi_row, <S2SV_ModStart> BLOCK_SIZE bsize ) { VP9_COMMON * const cm = & cpi -> common ; MACROBLOCKD * const xd = & x -> e_mbd ; MODE_INFO * * mi_8x8 = xd -> mi ; MB_MODE_INFO * mi = mi_8x8 [ 0 ] ; PICK_MODE_CONTEXT * ctx = get_block_context ( x, bsize ) ; unsigned int segment_id = mbmi -> segment_id ; const int mis = cm -> mi_stride ; const int mi_width = num_8x8_blocks_wide_lookup [ bsize ] ; const int mi_height = num_8x8_blocks_high_lookup [ bsize ] ; int skip_recode =! x -> select_txfm_size && mbmi -> sb_type >= BLOCK_8X8 && cpi -> oxcf. aq_mode!= COMPLEXITY_AQ && cpi -> sf. allow_",0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
608,"<S2SV_ModStart> range_max ) { int64_t value ; int64_t <S2SV_ModEnd> position, zeroes <S2SV_ModStart> position, zeroes <S2SV_ModEnd> ; char bits <S2SV_ModStart> gbc ) ; if ( get_bits_left ( gbc ) < 32 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits1 ( gbc ) ) { bits [ i ++ ] = '1' ; ++ zeroes ; } else { bits [ i ++ ] = '0' ; ++ zeroes ; } } if ( zeroes >= 32 ) { value = MAX_UINT_BITS ( 32 ) ; for ( j = 0 ; j < zeroes ; j ++ ) bits [ i ++ ] = ( value >> ( zeroes - j - 1 ) & 1 )? '1' : '0' ; value += ( 1 << zeroes ) - 1 ; if ( ctx -> trace_enable ) { bits [ i ] = 0 ; ff_cbs_trace_syntax_element ( ctx, position, name, NULL,",0
609,"<S2SV_ModStart> || strchr ( ""!#$%&\'*+-.^_`|^"" <S2SV_ModEnd>, c ) <S2SV_ModStart> || strchr ( ""!#$%&\'*+-.^_`|^"" <S2SV_ModEnd>, c )",0
610,"<S2SV_ModStart>, packet -> <S2SV_ModEnd> http_origin. ptr",0
611,<S2SV_ModStart> 4 ) { if ( ( x + 4 ) > ( ssize_t ) dds_info -> width || ( y + 4 ) > ( ssize_t ) dds_info -> height ) return MagickFalse ;,0
612,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL ) <S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL )",1
613,<S2SV_ModStart> action ) { if ( w < 0 || h < 0 || w > 1 || h > 1 || h > 1 || w > 100 || h > 100 || w < 0 || h > 100 || h > 100 || w > 100 || h > 100 || w > 100 || h > 100 || h > 100 || w > 100 || h > 100 || w > 100 || h > 100 || h > 100 || w > 100 || h > 100 || w > 100 || h > 100 || h > 100 || h > 100 || h > 100 || w > 100 || h > 100 || w > 100 || h > 100 || h > 100 || w > 100 || h > 100 || w > 100 || h > 100 || w > 100 || h > 100 || w > 100 || h > 100 || h > 100 || w > 100 || h > 100 || w > 100 || h > 100 || w > 100 || h > 100 || h > 100 || w > 100 || h > 100 || w > 100 || h > 100 || h > 100 || w > 100 || h > 100 || w > 100 || h > 100 || h > 100 || h > 100 || h > 100 || w > 100 || w > 100 ||,0
614,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; printf ( outputbuffer ) ;",0
615,"<S2SV_ModStart> ( AUTODETECT_TAG, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU\\n"" <S2SV_ModEnd> ) ; Stream_Read_UINT32",0
616,"<S2SV_ModStart> recon_y_stride, recon_uv_stride, cm -> mb_cols <S2SV_ModStart> recon_y_stride, recon_uv_stride, cm -> mb_cols",0
617,<S2SV_ModStart> -> b_multithreaded_rd ) { <S2SV_ModStart> mb_rows ) ; },0
618,<S2SV_ModStart> { if ( ( <S2SV_ModStart> xWantedSize > 0 ) && ( xWantedSize + xHeapStructSize > xFreeBytesRemaining ) <S2SV_ModStart> portBYTE_ALIGNMENT_MASK ) ) ; } else { mtCOVERAGE_TEST_MARKER ( ) ; } } else { mtCOVERAGE_TEST_MARKER ( ) ; } if ( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) ) { pxPreviousBlock = & xStart ; pxBlock = xStart. pxNextFreeBlock ; while ( ( pxBlock -> xBlockSize < xWantedSize ) && ( pxBlock -> pxNextFreeBlock!= NULL ) ) { pxPreviousBlock = pxBlock ; pxBlock = pxBlock -> pxNextFreeBlock ; } if ( pxBlock!= pxEnd ) { pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock -> pxNextFreeBlock ) + xHeapStructSize ) ; pxPreviousBlock -> pxNextFreeBlock = pxBlock -> pxNextFreeBlock ; if ( ( pxBlock -> xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE ) { pxNewBlockLink =,0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,"<S2SV_ModStart> s ) { <S2SV_ModEnd> uint16 left, <S2SV_ModStart>, Debug, ""%s()\\n"" <S2SV_ModEnd>, __func__ ) <S2SV_ModStart> ++ ) { in_uint8s ( s, 2 ) ; in_uint16_le ( s, size ) ; ui_paint_bitmap ( left, top, cx, cy, width, height, bmpdata ) ; xfree ( bmpdata ) ; continue ; } if ( compress & 0x400 ) { size = bufsize ; } else { size = bufsize ; } ui_paint_bitmap ( left, top, cx, cy, width, height, bmpdata ) ; xfree ( bmpdata ) ; continue ; } if ( compress & 0x400 ) { size = bufsize ; } else { size = bufsize ; } if ( compress & 0x400 ) { size = bufsize ; } else { size = size ; } if ( compress & 0x400 ) { size = bufsize ; } else { size = size ; bmpdata = ( uint8 * ) xmalloc ( width * height * Bpp ) ; for ( y = 0 ; y < height ; y ++ ) { in_uint8a ( s",0
621,"<S2SV_ModStart> } else { ovalue = 0 ; <S2SV_ModStart> ovalue ) ; if ( ovalue == 0 ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Missing <S2SV_blank> ErrorLog <S2SV_blank> option"" ) ; return MPR_ERR_BAD_SYNTAX ; }",0
622,"<S2SV_ModStart> TX_SIZE tx_size, vpx_coeff_stats <S2SV_ModEnd> * coef_branch_ct ) <S2SV_ModStart> coef_branch_ct ) { vpx_coeff_probs_model <S2SV_ModEnd> * coef_probs = <S2SV_ModStart> tx_size ] ; vpx_coeff_count <S2SV_ModEnd> * coef_counts =",0
623,"<S2SV_ModStart> { } ; if (! access_ok ( VERIFY_WRITE, fd, ( const char * ) name, 0 ) ) return - EBADF <S2SV_ModEnd> ; r =",0
624,<S2SV_ModStart> <S2SV_null> <S2SV_null> static void <S2SV_ModEnd> su3000_frontend_attach ( struct <S2SV_ModStart> ( dvb_usb_generic_rw ( & <S2SV_ModStart> ( dvb_usb_generic_rw ( & <S2SV_ModStart> ( dvb_usb_generic_rw ( & <S2SV_ModStart> ( dvb_usb_generic_rw ( & <S2SV_ModStart> ( dvb_usb_generic_rw ( & <S2SV_ModStart> ( dvb_usb_generic_rw ( & <S2SV_ModStart> ( dvb_usb_generic_rw ( & <S2SV_ModStart> ( dvb_usb_generic_rw ( & <S2SV_ModStart> ( dvb_usb_generic_rw ( & <S2SV_ModStart> ( dvb_usb_generic_rw ( & <S2SV_ModStart> ( dvb_usb_generic_rw ( & <S2SV_ModStart> ( dvb_usb_generic_rw ( & <S2SV_ModStart> ( dvb_usb_generic_rw ( & <S2SV_ModStart> ( dvb_usb_generic_rw ( & <S2SV_ModStart> ( dvb_usb_generic_rw ( & <S2SV_ModStart> ( dvb_usb_generic_rw ( & <S2SV_ModStart> ( dvb_usb_generic_rw ( & <S2SV_ModStart> ( dvb_usb_generic_rw ( & <S2SV_ModStart> ( dvb_usb_generic_rw (,0
625,"<S2SV_ModStart>, vpx_codec_enc_cfg_t * enc_cfg <S2SV_ModEnd>, vpx_codec_flags_t flags <S2SV_ModStart> ( ( flags & VPX_CODEC_USE_XMA ) &&! ( enc_cfg <S2SV_ModEnd> -> caps & <S2SV_ModStart> -> priv ) enc_cfg <S2SV_ModEnd> -> iface =",0
626,"<S2SV_ModStart> stride, int mv_row, int mv_col, uint8_t * pred, struct scale_factors * scale, int x, int y ) { const int which_mv = 0 ; const MV mv = { mv_row, mv_col } ; const InterpKernel * const kernel = <S2SV_ModEnd> xd -> mi <S2SV_ModStart> mbmi. interp_filter <S2SV_ModEnd> ; enum mv_precision <S2SV_ModStart> MV_PRECISION_Q3 ; } vpx_build_inter_predictor <S2SV_ModEnd> ( y_mb_ptr, <S2SV_ModStart> y ) ; vpx_build_inter_predictor <S2SV_ModEnd> ( u_mb_ptr, <S2SV_ModStart> y ) ; vpx_build_inter_predictor <S2SV_ModEnd> ( v_mb_ptr, <S2SV_ModStart> y ) ; vpx_build_inter_predictor <S2SV_ModEnd> ( y_mb_ptr, <S2SV_ModStart> y ) ; vpx_build_inter_predictor <S2SV_ModEnd> ( v_mb_ptr,",0
627,"<S2SV_ModStart> = TRUE ; if ( strlen ( origbuf ) >= 4 * BUFSZ ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> too <S2SV_blank> long <S2SV_blank> \\""%s\\"""", origbuf ) ; return FALSE ; }",0
628,"<S2SV_ModStart> * cJSON_CreateFloatArray ( const <S2SV_ModStart> * numbers, size_t <S2SV_ModEnd> count ) { <S2SV_ModStart> count ) { size_t <S2SV_ModEnd> i ; cJSON <S2SV_ModStart> 0 ; a <S2SV_ModEnd> ; ++ i <S2SV_ModStart> i ) { if (! i ) a -> child = n ; else { <S2SV_ModStart> ] ) ; <S2SV_ModEnd> suffix_object ( p <S2SV_ModStart> n ; } }",0
629,"<S2SV_ModStart> data_end ) { const uint8_t * tile_buffers [ 1 << 6 ] ; <S2SV_ModStart> int num_workers = <S2SV_ModEnd> pbi -> oxcf <S2SV_ModStart> occf. max_threads ; const int num_workers = MIN ( num_workers <S2SV_ModEnd>, tile_cols ) <S2SV_ModStart>, tile_cols ) <S2SV_ModEnd> ; int n <S2SV_ModStart> 0 ) { int i ; CHECK_MEM_ERROR ( cm, pbi -> tile_workers, vpx_malloc ( num_threads * sizeof ( * pbi -> tile_workers ) ) ) ; for ( i = 0 ; i < num_workers ; ++ i ) { VP9Worker <S2SV_ModEnd> * const worker <S2SV_ModStart> [ i ] <S2SV_ModEnd> ; CHECK_MEM_ERROR ( <S2SV_ModStart> -> num_tile_workers ; vpx_worker_init ( worker ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data2, vpx_malloc ( sizeof ( TileInfo ) ) ) ; if ( i < num_threads - 1 &&! vpx_worker_reset ( worker ) ) { vpx_internal_error (",0
630,<S2SV_ModStart> * 0x101 ; if ( len < 4 ) return ; <S2SV_ModStart> ( ) + len <S2SV_ModEnd> ; while ( <S2SV_ModStart> ( ) ; if ( len < 4 ) return ; <S2SV_ModStart> case 0x505244 : if ( len < 4 ) return ; <S2SV_ModStart> case 0x524946 : if ( len < 4 ) return ; <S2SV_ModStart> case 0x524950 : if ( len < 4 ) return ; <S2SV_ModStart> case 0x524950 : if ( len < 4 ) return ; <S2SV_ModStart> case 0x524950 : if ( len < 4 ) return ; <S2SV_ModStart> case 0x524950 : if ( len < 4 ) return ; <S2SV_ModStart> case 0x524950 : if ( len < 4 ) return ; <S2SV_ModStart> case 0x524950 : if ( len < 4 ) return ; <S2SV_ModStart> case 0x524950 : if ( len < 4 ) return ; <S2SV_ModStart> case 0x524950 : if ( len < 4 ) return ; <S2SV_ModStart> case 0x524950 : if ( len < 4 ) return ; <S2SV_ModStart> case 0x524950 : if ( len < 4 ) return ; <S2SV_ModStart> case 0x524950 : if ( len < 4 ),0
631,"<S2SV_ModStart> -> common ; vpx_clear_system_state ( ) ; <S2SV_ModStart> cm -> seg <S2SV_ModEnd> ; int i <S2SV_ModStart> = SEGMENT_DELTADATA ; <S2SV_ModEnd> for ( i <S2SV_ModStart> ++ ) { vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, qindex_delta ) ; vpx_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q <S2SV_ModEnd> ) ; RDMULT_RATIO <S2SV_ModStart> continue ; } vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, qindex_delta ) ; vpx_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q <S2SV_ModEnd> ) ; }",0
632,"<S2SV_ModStart> -> error_code ) memcpy ( & <S2SV_ModStart> base. err_detail, <S2SV_ModEnd> error -> detail <S2SV_ModStart> error -> detail, sizeof ( ctx -> base. err_detail ) ) <S2SV_ModEnd> ; return error",0
633,"<S2SV_ModStart> pocstruct_t * ps_prev_poc = NULL, * ps_cur_poc = NULL <S2SV_ModEnd> ; ih264d_free_dynamic_bufs (",0
634,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet ),0
635,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int getnum (,0
636,<S2SV_ModStart> GCSpropagate ) ; g -> gcstate = GCSpropagate ;,0
637,<S2SV_ModStart> 0 ; else { ret = <S2SV_ModEnd> - EIO ; <S2SV_ModStart> - EIO ; goto err ; },0
638,"<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } <S2SV_ModEnd> memset ( buffer <S2SV_ModStart> buffer ) ; <S2SV_ModEnd> s_write ( c",0
639,"<S2SV_ModStart> struct remote_connection_s * remote_connection <S2SV_ModEnd> ) { int <S2SV_ModStart> = 0 ; <S2SV_ModEnd> int ret_ga ; <S2SV_ModStart> mainloop_fd_callbacks cib_fd_callbacks = remote_connection -> fd_callbacks ; connection -> socket = 0 ; connection -> session = NULL ; connection -> socket = 0 ; connection -> session = remote_connection -> session ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } bzero ( & hints, sizeof ( struct addrinfo ) ) ; hints. ai_flags = AI_CANONNAME ; hints. ai_socktype = SOCK_RAW ; if ( hints. ai_family == AF_INET ) { hints. ai_protocol = IPPROTO_ICMP ; } else { hints. ai_protocol = IPPROTO_ICMP ; } crm_debug ( ""Looking <S2SV_blank> up <S2SV_blank> %s"", server ) ; ret_ga = getaddrinfo ( server, NULL, & hints, & res ) ; if ( ret_ga ) { crm_err",0
640,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> ; cpi -> <S2SV_ModEnd> kf_bitrate_adjustment = 0",0
641,"<S2SV_ModStart> ) ) ; ND_TCHECK2 ( bp [ 26 ], sizeof ( struct icmp6_hdr ) ) ;",0
642,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command",0
643,"<S2SV_ModStart> Image * image <S2SV_ModEnd> ; register IndexPacket <S2SV_ModStart> length, padding <S2SV_ModEnd>, version, <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { image = DestroyImageList ( image ) ; return ( ( Image * ) NULL ) ; }",0
644,"<S2SV_ModStart> ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC <S2SV_blank> marker\\n"" ) ; return - 1 ; } if (! ( qcc = jpc_enc_getqcc ( enc ) ) ) { jas_eprintf ( ""cannot <S2SV_blank> get <S2SV_blank> qcc\\n"" ) ; return - 1 ; } if (! ( qcc = jpc_enc_getqcc ( enc ) ) ) { jas_eprintf ( ""cannot <S2SV_blank> get <S2SV_blank> qcc\\n"" ) ; return - 1 ; } if (! ( qcc = jpc_enc_getqcc ( enc ) ) ) { jas_eprintf ( ""cannot <S2SV_blank> get <S2SV_blank> qcc\\n"" ) ; return - 1 ; } if (! ( qcc = jpc_enc_getqcc ( enc ) ) ) { jas_eprintf ( ""cannot <S2SV_blank> get <S2SV_blank> qcc\\n"" ) ; return - 1 ; } if (! ( qcc = jpc_enc_getqcc ( enc ) ) ) { jas_eprintf ( ""cannot <S2SV_blank> get <S2SV_blank> qcc\\n"" ) ; return - 1 ; } if (! ( q",0
645,<S2SV_ModStart> = '\\0' ; if (! str_temp ) return ; <S2SV_ModStart> = '\\0' ; if (! str_temp ) return ; <S2SV_ModStart> = '\\0' ; if (! str_temp ) return ; <S2SV_ModStart> = '\\0' ; if (! str_temp ) return ; <S2SV_ModStart> = '\\0' ; if (! str_temp ) return ; <S2SV_ModStart> = '\\0' ; if (! str_temp ) return ; <S2SV_ModStart> = '\\0' ; if (! str_temp ) return ; <S2SV_ModStart> = '\\0' ; if (! str_temp ) return ; <S2SV_ModStart> = '\\0' ; if (! str_temp ) return ; <S2SV_ModStart> = '\\0' ; if (! str_temp ) return ; <S2SV_ModStart> = '\\0' ; if (! str_temp ) return ; <S2SV_ModStart> = '\\0' ; if (! str_temp ) return ; <S2SV_ModStart> = '\\0' ; if (! str_temp ) return ; <S2SV_ModStart> = '\\0' ; if (! str_temp ) return ; <S2SV_ModStart> = '\\0' ; if (! str_temp ) return ; <S2SV_ModStart> = '\\0' ; if (! str_temp ) return ; <S2SV_ModStart> = '\\0' ; if (! str_temp ) return,0
646,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> - m + vpx_read_bit <S2SV_ModEnd> ( r )",1
647,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
648,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> ( REFERENCE_MODE ) vpx_read <S2SV_ModEnd> ( r,",0
649,"<S2SV_ModStart>! stream ) { <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; } <S2SV_ModStart> ( res ) { <S2SV_ModStart> ) ) ; } <S2SV_ModStart> stereo_fmt = STEREO_FORMAT_MONO <S2SV_ModEnd> ; # if",0
650,"<S2SV_ModStart> nd_opt_len ) ; if ( op -> nd_opt_len > sizeof ( * opp ) ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u), <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""unknown"", op -> nd_opt_type ), op -> nd_opt_len << 3, sizeof ( * opp ) ) ) ; goto trunc ; }",0
651,<S2SV_ModStart> -> root_node = ( * re_ast ) -> root_node = yr_malloc ( sizeof ( RE_AST ) ) ; if ( * re_ast -> root_node == NULL ) return ERROR_INSUFFICIENT_MEMORY ; ( * re_ast ) -> root_node -> next = yr_malloc ( sizeof ( RE_AST ) ) ; if ( ( * re_ast ) -> root_node -> next == NULL ) return ERROR_INSUFFICIENT_MEMORY ; ( * re_ast ) -> root_node -> prev = yr_malloc ( sizeof ( RE_AST ) ) ; if ( ( * re_ast ) -> root_node -> prev == NULL ) return ERROR_INSUFFICIENT_MEMORY ; ( * re_ast ) -> root_node -> next = yr_malloc ( sizeof ( RE_AST ) ) ; if ( ( * re_ast ) -> root_node -> next == NULL ) return ERROR_INSUFFICIENT_MEMORY ; ( * re_ast ) -> root_node -> prev = yr_malloc ( sizeof ( RE_AST ) ) ; ( * re_ast ) -> root,0
652,"<S2SV_ModStart> ) ) ; if (! iter -> var_expand_table ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s"", key -> key -> key -> key ) ; return - 1 ; } <S2SV_ModStart> if ( ret < <S2SV_ModEnd> 0 ) { <S2SV_ModStart>, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key -> key, error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> = <S2SV_blank> %s"", str_c ( path ), key -> value ) ; } else if ( ret < 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> lookup <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", str_c ( path ),",0
653,<S2SV_ModStart> -> level = 1 <S2SV_ModEnd> ; tok ->,0
654,<S2SV_ModStart> maxBitrate ; } av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo = NULL ;,0
655,"<S2SV_ModStart> ASSERT ( dpbSize ) ; memset ( dpb, 0, sizeof ( dpbPicture_t )",0
656,"<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> (! sock ||! addr <S2SV_ModStart> ( addrlen ) { <S2SV_ModStart> * addrlen ; addrlen_out = * addrlen ; } <S2SV_ModStart>, addrlen_in, & addrlen_out <S2SV_ModEnd> )!= OE_OK <S2SV_ModStart> ) ; } if ( addrlen_out ) * addrlen = addrlen_in ;",0
657,,1
658,"<S2SV_ModStart> FALSE ; } if (! <S2SV_ModStart>, s ) ) return FALSE",1
659,<S2SV_ModStart> ipv6_pinfo * np ; struct ipv6_txoptions * opt = NULL ; struct ip6_flowlabel * flowlabel = NULL ; struct dst_entry * dst = NULL ; struct flowi6 fl6 ; int addr_len = msg -> msg_namelen ; int hlimit = - 1 ; int tclass = - 1 ; int dontfrag = - 1 ; int transhdrlen = 4 ; int ulen = len + transhdrlen ; int err ; if ( addr_len < SIN6_LEN_RFC2133 ) return - EINVAL ; np <S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; if (,0
660,"<S2SV_ModStart> ; unsigned int <S2SV_ModEnd> found, upx_success <S2SV_ModStart> size_t fsize ; size_t <S2SV_ModEnd> valign, falign <S2SV_ModStart>, hdr_size, <S2SV_ModEnd> j ; struct",0
661,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR <S2SV_ModEnd>, EPCR_EPOS | <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR <S2SV_ModEnd> ) & EPCR_ERRE <S2SV_ModStart> } dm9000WriteReg ( DM9000_EPCR <S2SV_ModEnd>, EPCR_EPOS ) <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPDRH <S2SV_ModEnd> ) << 8 <S2SV_ModStart> | dm9000ReadReg ( DM9000_EPDRL <S2SV_ModEnd> ) ; }",0
662,"<S2SV_ModStart> pcmk_ok ) { if ( private -> command. session == NULL ) { fprintf ( stderr, ""%s: <S2SV_blank> Connection <S2SV_blank> to <S2SV_blank> %s:%d <S2SV_blank> failed: <S2SV_blank> %s\\n"", name, private -> server, private -> port, pcmk_fatal_error ( ) ) ; } <S2SV_ModStart> pcmk_ok ) { if ( private -> callback. session == NULL ) { fprintf ( stderr, ""%s: <S2SV_blank> Connection <S2SV_blank> to <S2SV_blank> %s:%d <S2SV_blank> failed: <S2SV_blank> %s\\n"", name, private -> server, pcmk_fatal_error ( ) ) ; } <S2SV_ModStart> callback ) ) ; } if ( rc == pcmk_ok ) { if ( private -> command. session == NULL ) { fprintf ( stderr, ""%s: <S2SV_blank> Connection <S2SV_blank> to <S2SV_blank> %s:%d <S2SV_blank> failed: <S2SV_blank> %s\\n"", name, private -> server, pcmk_fatal_error ( ) ) ; } if ( private -> command. session == NULL ) { fprintf ( stderr, ""%s: <S2SV_blank> Connection <S2SV_blank> to <S2SV_blank> %s:%d <S2SV_blank> failed: <S2SV_blank> %s\\n"", name, private -> server, pcmk_fatal_error ( ) ) ; }",0
663,"<S2SV_ModStart> = ubuf ; memset ( & address, 0, sizeof ( address ) ) ;",0
664,"<S2SV_ModStart> num00, tmp_err = 0, n = 0, sr = 0 ; int step_param = 3 ; int further_steps = ( MAX_MVSEARCH_STEPS - 1 ) - step_param ; const BLOCK_SIZE bsize = xd -> mi [ 0 ] -> mbmi. sb_type ; vp9_variance_fn_ptr_t v_fn_ptr = cpi -> fn_ptr [ bsize ] ; int new_mv_mode_penalty = 256 ; const int quart_frm = MIN ( cpi -> common. width, cpi -> common. height ) ; while ( ( quart_frm << sr ) < MAX_FULL_PEL_VAL ) ++ sr ; step_param += sr ; further_steps -= sr ; v_fn_ptr. vf = get_block_variance_fn ( bsize ) ; tmp_err = cpi -> diamond_search_sad ( x, & ref_mv_full, & tmp_mv, step_param, x -> sadperbit16, & num00, & v_fn_ptr, x -> nmvjointcost, x -> mvcost",0
665,"<S2SV_ModStart> ; if ( h -> addr == MAP_FAILED ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> can\'t <S2SV_blank> map <S2SV_blank> file <S2SV_blank> at <S2SV_blank> %p"", filename ) ; goto error ; } if (",0
666,<S2SV_ModStart> child -> of_limit_action ) ; if ( child -> of_limit_action == NOT_SET && parent -> of_limit_action == NOT_SET && child -> of_limit_action == NOT_SET && parent -> of_limit_action == NOT_SET && child -> of_limit_action == NOT_SET && parent -> of_limit_action == NOT_SET && child -> of_limit_action == NOT_SET && parent -> of_limit_action == NOT_SET && parent -> of_limit_action == NOT_SET && parent -> of_limit_action == NOT_SET && child -> of_limit_action == NOT_SET && child -> of_limit_action == NOT_SET && parent -> of_limit_action == NOT_SET && child -> of_limit_action == NOT_SET && parent -> of_limit_action == NOT_SET && child -> of_limit_action == NOT_SET && parent -> of_limit_action == NOT_SET && parent -> of_limit_action == NOT_SET && parent -> of_limit_action == NOT_SET && parent -> of_limit_action == NOT_SET && parent ->,0
667,"<S2SV_ModStart>, one, <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart> MagickFalse ) { if ( number_planes_filled > number_colormaps ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReader",0
668,"<S2SV_ModStart> ( r = sshbuf_put_string <S2SV_ModEnd> ( b,",0
669,<S2SV_ModStart> ) ) { ovalue = sclone ( <S2SV_ModEnd> stok ( option <S2SV_ModStart> & ovalue ) ),0
670,"<S2SV_ModStart> client = user_data ; crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client"" ) <S2SV_ModStart> client ) ; <S2SV_ModEnd> if ( cib_shutdown_flag",0
671,"<S2SV_ModStart> * uv ; if (! iswhite ( thread ) ) markvalue ( g, thread -> v ) ; <S2SV_ModStart> next ) { <S2SV_ModEnd> if (!",0
