,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
1,"<S2SV_ModStart> skb ) ; unfrag_ip6hlen = min_t ( int, unfrag_ip6hlen, skb -> len - offset ) ;",0
2,<S2SV_ModStart> ) ) { TrackWriter_t <S2SV_ModEnd> * writer = <S2SV_ModStart> writer = ( TrackWriter_t <S2SV_ModEnd> * ) gf_list_get,0
3,"<S2SV_ModStart> item ) { return cJSON_GetItem ( array, item, 0 ) <S2SV_ModEnd> ; } <S2SV_null>",0
4,"<S2SV_ModStart> u32 event_id, <S2SV_ModEnd> struct pt_regs * <S2SV_ModStart>, event_id, <S2SV_ModEnd> & data,",0
5,<S2SV_ModStart> EXT4_EXTENTS_FLAG ) { <S2SV_ModEnd> struct grub_ext4_extent_header * <S2SV_ModStart> leaf ) { <S2SV_ModEnd> return - 1 <S2SV_ModStart> block ) ; return fileblock + <S2SV_ModEnd> ext [ i <S2SV_ModStart> ]. len <S2SV_ModEnd> ; } } <S2SV_ModStart> 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
6,"<S2SV_ModStart> fdct16 ( const tran_low_t * in, tran_low_t * out <S2SV_ModEnd> ) { int <S2SV_ModStart> ] ) { tran_high_t step1 [ 16 ] ; tran_high_t step2 [ 16 ] ; tran_high_t step3 [ 16 ] ; tran_high_t input [ 16 ] ; tran_high_t temp1, temp2 ; int input [ 16 ] ; input [ 0 ] = in [ 0 ] + in [ 15 ] ; input [ 1 ] = in [ 1 ] + in [ 14 ] ; input [ 2 ] = in [ 2 ] + in [ 13 ] ; input [ 3 ] = in [ 3 ] + in [ 12 ] ; input [ 4 ] = in [ 4 ] + in [ 11 ] ; input [ 5 ] = in [ 5 ] + in [ 10 ] ; input [ 6 ] = in [ 6 ] - in [ 9 ] ; input [ 7 ] = in [ 7 ] - in [ 8 ] ; step1 [ 0 ] = in [ 7 ] - in [ 8 ] ; step1 [ 1 ] = in [ 7 ] - in [ 14 ] ; step1 [ 2 ] = in [ 5 ] - in [",0
7,<S2SV_ModStart> ; if ( hlen > 0 &&,0
8,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> search_filter_level ( const <S2SV_ModStart> * sd, VP9EncoderConfig * cm, int partial_frame, int filt_direction, int filt_high, int filt_low, int filt_err ) { <S2SV_ModStart> -> common ; const <S2SV_ModStart> -> lf ; const int max_filter_level = get_max_filter_level ( cpi ) ; <S2SV_ModStart> ) ; int <S2SV_ModEnd> filt_mid = clamp <S2SV_ModStart> / 4 ; <S2SV_ModEnd> while ( filter_step <S2SV_ModStart> min_filter_level ) ; <S2SV_ModEnd> if ( cpi <S2SV_ModStart> twopass. section_intra_rating > 20 ) { <S2SV_ModEnd> if ( cpi <S2SV_ModStart> twopass. section_intra_rating <= 20 ) { <S2SV_ModEnd> bias = bias <S2SV_ModStart> = bias * ( <S2SV_ModStart> twopass. section_intra_rating >> 20 ) ; } else { <S2SV_ModEnd> bias = bias <S2SV_ModStart> / 20 ; } <S2SV_ModStart> 0 ) { filt_high <S2SV_ModEnd> = try_filter_frame ( <S2SV_ModStart> partial_frame ) ; } <S2SV_ModStart> } else { filt_high <S2SV_ModEnd> = try_filter_frame ( <S2SV_ModStart> partial_frame ) ; } return filt_high <S2SV_ModEnd> ; } <S2SV_null>",0
9,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 2, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",0
10,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ++ i ) vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( usehp ) vpx_write <S2SV_ModEnd> ( w,",1
11,<S2SV_ModStart> -> rxBlockSzx = coapClientGetMaxBlockSize ( ) <S2SV_ModEnd> ; else if <S2SV_ModStart> -> rxBlockSzx = coapClientGetMaxBlockSize ( ) <S2SV_ModEnd> ; else if <S2SV_ModStart> -> rxBlockSzx = coapClientGetMaxBlockSize ( ) <S2SV_ModEnd> ; else if <S2SV_ModStart> -> rxBlockSzx = coapClientGetMaxBlockSize ( ) <S2SV_ModEnd> ; else if <S2SV_ModStart> -> rxBlockSzx = coapClientGetMaxBlockSize ( ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> rxBlockSzx > coapClientGetMaxBlockSize ( ) ) coapClientSetMaxBlockSize ( coapClientGetMaxBlockSize ( ) <S2SV_ModEnd> ) ; osReleaseMutex,0
12,"<S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( length < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; }",0
13,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> construct_get_dest_keyring ( struct <S2SV_ModStart> * authkey ; int ret ; <S2SV_ModStart> dest_keyring ) ; ret = key_permission ( make_key_con ( key_type_keyring ( KEY_TYPE_KEYRING ), & dest_keyring ) ) ; if ( ret < 0 ) { key_put ( dest_keyring ) ; return ret ; } <S2SV_ModStart> ( dest_keyring ) { ret = key_permission ( make_key_con ( key_type_keyring ( KEY_TYPE_KEYRING ), & dest_keyring ) ) ; if ( ret < 0 ) { key_put ( dest_keyring ) ; return ret ; } } <S2SV_ModEnd> } case KEY_REQKEY_DEFL_THREAD_KEYRING <S2SV_ModStart> ) ; } ret = key_permission ( dest_keyring ) ; if ( ret < 0 ) { key_put ( dest_keyring ) ; return ret ; }",0
14,<S2SV_ModStart> = create_spnego_ctx ( 0,0
15,<S2SV_ModStart> int len ; # ifdef HAVE_LOCALTIME <S2SV_ModStart> t ) ; # else tm = localtime_r ( & t ) ; # endif,0
16,"<S2SV_ModStart> length ) ; if ( strlen ( password ) > 256 ) { fprintf ( stderr, ""Password <S2SV_blank> too <S2SV_blank> long\\n"" ) ; exit ( EXIT_FAILURE ) ; }",0
17,<S2SV_ModStart> e == p || e - p > HOST_NAME_MAX,0
18,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",1
19,<S2SV_ModStart> = 0 ; if ( <S2SV_ModStart> & timeout )!= 1 ) { return false ; } <S2SV_ModEnd> return FD_ISSET (,0
20,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> detect_transition_to_still ( struct <S2SV_ModStart> last_decay_rate ) { bool trans_to_still = false <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( still_interval > MIN_GF_INTERVAL <S2SV_ModEnd> && loop_decay_rate >= <S2SV_ModStart> { int j <S2SV_ModEnd> ; for ( <S2SV_ModStart> { if ( <S2SV_ModEnd> tmp_next_frame. pcnt_inter <S2SV_ModStart> tmp_next_frame. pcnt_motion <= <S2SV_ModEnd> 0.999 ) break <S2SV_ModStart> break ; } if (! trans_to_still ) { <S2SV_ModStart> position ) ; } <S2SV_ModStart> == still_interval ) { <S2SV_ModStart> 1 ; } } return true <S2SV_ModEnd> ; } <S2SV_null>,0
21,"<S2SV_ModStart> inode ) ) { if ( offset + size > i_size_read ( inode ) ) { printk ( KERN_EMERG ""%s: <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, inode -> i_ino ) ; return ret ; } <S2SV_ModStart> size ) ; }",0
22,"<S2SV_ModStart> alg ) { if ( type & CRYPTO_ALG_NEED_FALLBACK ) { if (! ( type ^ CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_NEED_FALLBACK ) { if (! try_module_get ( current -> nsproxy -> nsproxy_name ) ) { pr_err ( ""No <S2SV_blank> fallback <S2SV_blank> for <S2SV_blank> %s\\n"", name ) ; return ERR_PTR ( - EPERM ) ; } } else { pr_info ( ""No <S2SV_blank> fallback <S2SV_blank> for <S2SV_blank> %s\\n"", name ) ; return ERR_PTR ( - EPERM ) ; } } else { <S2SV_ModStart> name ) ; } <S2SV_ModEnd> alg = crypto_alg_lookup",0
23,<S2SV_ModStart> = GIT_PKT_NG ; if ( len < 3 ) goto out_err ; <S2SV_ModStart> += 3 ; len -= 3 ; <S2SV_ModStart>'<S2SV_blank>') ) || len < 1 <S2SV_ModStart> = '\\0' ; len -= 1 ; <S2SV_ModStart> + 1 ; len -= 1 ;,0
24,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> BYTE flags ; UINT32 <S2SV_ModEnd> length ; Stream_Read_UINT32 <S2SV_ModStart> = NEGO_STATE_FINAL ; if ( Stream_GetRemainingLength ( s ) < length ) { WLog_ERR ( TAG, ""RDP_NEG_REQ: <S2SV_blank> Remaining <S2SV_blank> Length <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> length <S2SV_blank> (%d)"", length, Stream_GetRemainingLength ( s ) ) ; return ; } if ( Stream_GetRemainingLength ( s ) < length ) { WLog_ERR ( TAG, ""RDP_NEG_REQ: <S2SV_blank> Remaining <S2SV_blank> Length <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> length <S2SV_blank> (%d)"", length, Stream_GetRemainingLength ( s ) ) ; return ; }",0
25,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; if (,0
26,"<S2SV_ModStart> mntent, path, 0",0
27,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io,0
28,<S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart>,0
29,"<S2SV_ModStart> ) ) ; ret &= btif_config_set_int ( bdstr, ""BLEND_MODE"", BLEND_MODE_OFF ) ;",0
30,<S2SV_ModStart> vpx_codec_enc_cfg_map_t * map ; unsigned int max_usage = 0 <S2SV_ModStart>. cfg_maps ; ( <S2SV_ModStart> map -> usage < max_usage ) && map -> usage,0
31,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
32,"<S2SV_ModStart> void show_progress ( uint64_t frame_in, uint64_t <S2SV_ModEnd> frame_out, uint64_t",0
33,"<S2SV_ModStart> ; if ( mysql_vdb_error ( imp_sth -> result ) ) { PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> SQL <S2SV_blank> error\\n"" ) ; return Nullav ; } if (",0
34,"<S2SV_ModStart> NO_ERROR ; } if ( ancillary -> txAncillaryLength > ENC28J60_TX_ANC_THRESHOLD ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_INVALID_LENGTH ; } <S2SV_ModStart> ( interface, ENC28J60_ECON, ENC28J60_ECON_TXRST ) ; enc28j60ClearBit ( interface, ENC28J60_ECON, ENC28J60_ECON_TXRST ) ; enc28j60ClearBit ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF ) ; enc28j60WriteReg ( interface, ENC28J60_ETXSTL, ENC28J60_TX_BUFFER_START ) ; enc28j60WriteReg ( interface, ENC28J60_ETXSTH, ENC28J60_TX_BUFFER_START ) ; enc28j60WriteReg ( interface, ENC28J60_EWRPTL, ENC28J60_TX_BUFFER_START ) ;",0
35,<S2SV_ModStart> ; value = ast2obj_string <S2SV_ModEnd> ( o -> <S2SV_ModStart> ; value = ast2obj_string <S2SV_ModEnd> ( o ->,0
36,<S2SV_ModStart> ; if ( * page!= '\\0' <S2SV_ModEnd> ) { char <S2SV_ModStart> ; if ( * page!= '\\0' <S2SV_ModEnd> ) { char <S2SV_ModStart> ; if ( * page!= '\\0' <S2SV_ModEnd> ) { char <S2SV_ModStart> ; if ( * page!= '\\0' <S2SV_ModEnd> ) { char <S2SV_ModStart> ; if ( * page!= '\\0' <S2SV_ModEnd> ) { char <S2SV_ModStart> ; if ( * page!= '\\0' <S2SV_ModEnd> ) { char <S2SV_ModStart> ; if ( * page!= '\\0' <S2SV_ModEnd> ) { char,0
37,"<S2SV_ModStart> low_var_thresh, int uv_rows, int uv_cols <S2SV_ModEnd> ) { double <S2SV_ModStart>.5 ) ; <S2SV_ModEnd> unsigned char * <S2SV_ModStart> pp_limits_buffer ; ; <S2SV_ModEnd> ( void ) <S2SV_ModStart> ) flag ; vpx_memset_down_and_across_mb_row <S2SV_ModEnd> ( limits, <S2SV_ModStart> 16 ) ; vpx_post_proc_down_and_across_mb_row <S2SV_ModEnd> ( source -> <S2SV_ModStart> 8 ) ; vpx_post_proc_down_and_across_mb_row <S2SV_ModEnd> ( source ->",0
38,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; error = mb2_cache_entry_alloc ( ext4_mb_cache, GFP_NOFS, & ce ) ; if ( error ) return error ; <S2SV_ModEnd> error = mb_cache_entry_insert <S2SV_ModStart> = mb_cache_entry_insert ( ext4_mb_cache, ce, <S2SV_ModEnd> bh -> b_bdev <S2SV_ModStart> bh -> b_blocknr <S2SV_ModEnd> ) ; if <S2SV_ModStart> error ) { mb2_cache_entry_free ( ext4_mb_cache, ce ) ; <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> hash ) ; mb2_cache_entry_release ( ext4_mb_cache, <S2SV_ModEnd> ce ) ;",0
39,<S2SV_ModStart> ) ) ; * code = 200 ; * rlen = 0 ;,0
40,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> - ENOMEM ; opt = rcu_dereference_protected ( * optp, lockdep_is_held ( & net -> ipv4. ip_options_rcu ) ) ; if ( opt ) { <S2SV_ModStart> optlen ) ) <S2SV_ModEnd> return - EFAULT <S2SV_ModStart> - EFAULT ; <S2SV_ModEnd> return ip_options_get_finish (",0
41,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|truncated]"" <S2SV_ModEnd> ) ) ;",0
42,"<S2SV_ModStart> ) N_ ( ""E530: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'escape\' <S2SV_blank> in <S2SV_blank> string <S2SV_blank> option"" <S2SV_ModEnd> ) ; else",0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode <S2SV_ModStart>, & new_mode, & acl ) ; if ( ret <S2SV_ModEnd> ) goto out",0
44,"<S2SV_ModStart> size_t size ; size_t cps ; <S2SV_ModStart> / 8 ; cps = cmpt -> cps_ ; <S2SV_ModStart> ( cmpt -> cps_, cps <S2SV_ModEnd>, & size",0
45,<S2SV_ModStart> dp == datalen || tdp == datalen,0
46,"<S2SV_ModStart> * req, u32 acl_len, <S2SV_ModStart> size_t * acl_len, u8 * hdr, size_t hdr_len <S2SV_ModStart> int status ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> xdr, OP_GETATTR, hdr, hdr_len <S2SV_ModStart>, & attrlen <S2SV_ModEnd> ) )!= <S2SV_ModStart> { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"" <S2SV_ModEnd>, attrlen, <S2SV_ModStart> attrlen ) ; if ( hdr_len > hdr_len ) { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> hdr <S2SV_blank> len <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> hdr <S2SV_blank> len <S2SV_blank> %u\\n"", hdr_len, hdr_len ) ; return - EINVAL ; }",0
47,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
48,"<S2SV_ModStart> ) ) { if ( smatch ( auth, ""APPWEB"" ) ) { if ( HTTP -> uid < 0 || HTTP -> gid < 0 ) { return MPR_ERR_BAD_SYNTAX ; } } <S2SV_ModStart> ; } } if ( smatch ( tok, ""APPWEB"" ) ) { if ( HTTP -> uid < 0 || HTTP -> gid < 0 ) { return MPR_ERR_BAD_SYNTAX ; } }",0
49,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> addr = VPX_MALLOC_L <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; <S2SV_ModEnd> if ( addr,0
50,<S2SV_ModStart> int res ; unsigned <S2SV_ModStart> inodes ) ; unsigned <S2SV_ModStart> ; res = TEMP_FAILURE_RETRY ( <S2SV_ModStart> s. lookup_table_start ),0
51,<S2SV_ModStart> ; } else { <S2SV_ModStart> p1 ) ; },0
52,<S2SV_ModStart> = 0 ; int is_vp8 = 0 ; int is_vp9 = 0 ; <S2SV_ModStart> ; # endif is_vp8 = 1 ; <S2SV_ModStart> } if ( is_vp8 ) { if ( <S2SV_ModStart> 0 ) { is_vp8 = 1 ; } else if ( is_vp9 ) { if ( config -> cfg. g_threads > INT_MAX / config -> cfg. g_threads ) { is_vp9 = 0 ; } else { config -> cfg. g_threads = INT_MAX / config -> cfg. g_threads ; } },0
53,<S2SV_ModStart> } if ( c -> opt -> option. client || c -> opt -> protocol ) return 0 ; if ( c -> opt -> redirect_addr. names ) return 1 ; if ( c -> opt -> option. client || c -> opt -> protocol ) return 1 ; if ( c -> opt -> option. client ) return 1 ; if ( c -> opt -> redirect_addr. names ) return 1 ; if ( c -> opt -> option. client || c -> opt -> protocol ) return 0 ; if ( c -> opt -> option. peer ) return 1 ; if ( c -> opt -> peer -> opt. peer_name. names ) return 1 ; if ( c -> opt -> peer -> opt. peer_name. names ) return 1 ; if ( c -> opt -> peer -> opt. peer_name. names ) return 1 ; if ( c -> opt -> peer -> opt. peer_name. name ) return 1 ; if ( c -> opt -> peer -> opt. peer_name. name. len ) return 1 ; if ( c -> opt -> peer -> opt. peer_name. len ) return 1 ; if ( c -> opt ->,0
54,"<S2SV_ModStart> ; if ( crypto_memneq <S2SV_ModEnd> ( cmac,",0
55,"<S2SV_ModStart> cpi ) { <S2SV_ModEnd> const uint64_t bits_used <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> twopass. kf_group_bits = MAX ( cpi -> twopass. kf_group_bits, 0 ) ; <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> twopass. kf_group_bits <S2SV_ModEnd> = MAX ( <S2SV_ModStart> = MAX ( cpi -> twopass. kf_group_bits <S2SV_ModEnd>, 0 )",0
56,"<S2SV_ModStart> define EOFOp 0x07 # define BMOP 0x08 <S2SV_ModStart> ) ) ; if ( image -> columns > image -> rows ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart>. x = ReadBlobUnsignedShort <S2SV_ModEnd> ( image ) <S2SV_ModStart>. y = ReadBlobUnsignedShort <S2SV_ModEnd> ( image ) <S2SV_ModStart>. columns = ReadBlobUnsignedShort <S2SV_ModEnd> ( image ) <S2SV_ModStart>. rows = ReadBlobUnsignedShort <S2SV_ModEnd> ( image ) <S2SV_ModStart>. pixel = ReadBlobUnsignedShort <S2SV_ModEnd> ( image ) <S2SV_ModStart>. pixel = ReadBlobUnsignedShort <S2SV_ModEnd> ( image ) <S2SV_ModStart>. map_length = ReadBlobUnsignedShort <S2SV_ModEnd> ( image ) <S2SV_ModStart>. map_length = ReadBlobUnsignedShort <S2SV_ModEnd> ( image ) <S2SV_ModStart>. map_length = ReadBlobUnsignedShort <S2SV_ModEnd> ( image ) <S2SV_ModStart>. map_length = ReadBlobUnsignedShort <S2SV_ModEnd> ( image ) <S2SV_ModStart>. map_length = ReadBlobUnsignedShort <S2SV_ModEnd> ( image ) <S2SV_ModStart>. map_length = ReadBlobUnsignedShort <S2SV_ModEnd> ( image ) <S2SV_ModStart>. pixel = ReadBlobUnsignedShort <S2SV_ModEnd> ( image ) <S2SV_ModStart>. pixel = ReadBlobUnsignedShort <S2SV_ModEnd> ( image ) <S2SV_ModStart>. map_length = ReadBlobUnsignedShort <S2SV_ModEnd> ( image ) <S2SV_ModStart>. map_length = ReadBlobUnsignedShort <S2SV_ModEnd> (",0
57,"<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> altsetting [ 0 ]. desc. bNumEndpoints < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; error = - EINVAL ; goto err_free_urb ; }",1
58,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
59,"<S2SV_ModStart> * dir = ""/tmp"" <S2SV_ModEnd> ; if (",0
60,<S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; },0
61,"<S2SV_ModStart> ) ) { if ( n < 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; }",0
62,"<S2SV_ModStart> void vp9_setup_dst_planes ( MACROBLOCKD_MATRIX <S2SV_ModEnd> * xd, <S2SV_ModStart> mi_col ) { const <S2SV_ModStart> ] = { xd -> y_buffer, xd -> u_buffer, xd -> v_buffer, xd -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, xd -> uv_stride, xd -> alpha_stride } ; int i ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane_MATRIX <S2SV_ModEnd> * const pd <S2SV_ModStart> i ] ; if ( xd -> plane [ i ]. is_empty ) { setup_empty_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y ) ; } else { <S2SV_ModStart> ; } } }",0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,<S2SV_ModStart> ) get_block = ocfs2_do_get_block <S2SV_ModEnd> ; else get_block <S2SV_ModStart> else get_block = ocfs2_do_dio <S2SV_ModEnd> ; return __blockdev_direct_IO,0
65,"<S2SV_ModStart> ; if ( fscanf_s <S2SV_ModEnd> ( f,",0
66,"<S2SV_ModStart> n ) { <S2SV_ModEnd> char * str <S2SV_ModStart> * str ; expr_ty expr ; <S2SV_ModStart> PyCompilerFlags cf ; <S2SV_ModEnd> char * str <S2SV_ModStart> PyObject * o <S2SV_ModEnd> ; assert ( <S2SV_ModStart> ':' ) ; expr = string_object_to_c_ast ( expr_start, expr_end, Py_eval_input, & cf, c -> c_feature_version, c -> c_arena ) ; if ( expr == NULL ) return NULL ; <S2SV_ModStart> expr_start, NULL <S2SV_ModEnd> ) ; if <S2SV_ModStart> == NULL ) { Py_DECREF ( expr ) ; return NULL ; } <S2SV_ModEnd> str [ 0 <S2SV_ModStart> = PyCF_ONLY_AST ; <S2SV_ModEnd> mod = string_object_to_c_ast <S2SV_ModStart> ( str, expr <S2SV_ModEnd>, Py_eval_input, <S2SV_ModStart> ; Py_DECREF ( expr <S2SV_ModEnd> ) ; PyMem_RawFree",0
67,"<S2SV_ModStart> string ) { return cJSON_GetChild ( object, string, 0 ) <S2SV_ModEnd> ; } <S2SV_null>",0
68,<S2SV_ModStart> size ) ; if ( px -> ft == NULL ) { return FALSE ; },0
69,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""Invalid <S2SV_blank> length=%u <S2SV_blank> "", length ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""Invalid <S2SV_blank> length=%u <S2SV_blank> "", length ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""Invalid <S2SV_blank> length=%u <S2SV_blank> "", length ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""Invalid <S2SV_blank> length=%u <S2SV_blank> "", length ) ) ; return ; }",0
70,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
71,<S2SV_ModStart> int i ; const <S2SV_ModStart> } ; const uint32_t <S2SV_ModEnd> strides [ 4,0
72,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; for (,1
73,<S2SV_ModStart> ) ) ; if ( cpi -> mb_activity_map == NULL ) return ;,0
74,<S2SV_ModStart> user ) { struct ipmi_dev * dev = user -> dev ; <S2SV_ModStart> _ipmi_destroy_user ( user ) ; mutex_lock ( & dev -> data_mutex,0
75,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> sl = strlen,1
76,"<S2SV_ModStart> * for_ch ; <S2SV_ModEnd> REQ ( n <S2SV_ModStart> comp_for ) ; for ( ; ; ) { if ( NCH ( n ) == ( 5 + is_async ) ) { int j, n_ifs ; asdl_seq * ifs ; n = CHILD ( n, 4 + is_async ) ; n_ifs = count_comp_ifs ( c, n, n ) ; if (! n_ifs ) return NULL ; if ( c -> c_feature_version < 6 ) { ast_error ( c, n, ""Async <S2SV_blank> comprehension <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } <S2SV_ModStart> == ASYNC ) <S2SV_ModEnd> is_async = 1 <S2SV_ModStart> = 1 ; <S2SV_ModEnd> if ( is_async <S2SV_ModStart> ( n, 5 <S2SV_ModEnd> + is_async ) <S2SV_ModStart> ( n, 5 <S2SV_ModEnd> + is_async ) <S2SV_ModStart> ( n, 5 <S2SV_ModEnd> + is_async ) <S2SV_ModStart> ( n, 5 <S2SV_ModEnd> + is_async )",0
77,<S2SV_ModStart> NULL ; } if ( src -> curframe >= BPF_MAX_FUNC_ARGS ) return - EINVAL ;,0
78,"<S2SV_ModStart> * cpi, vpx_writer * w, <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd>, vpx_writer * <S2SV_ModStart> * above_mi = mi <S2SV_ModEnd> [ - xd <S2SV_ModStart> -> left_available? mi <S2SV_ModEnd> [ - 1 <S2SV_ModStart> segment_id ) ; if ( xd -> left_available ) { <S2SV_ModStart> w ) ; } else { const MODE_INFO * const above_mi = mi_8x8 [ - xd -> mi_stride ] ; const MODE_INFO * left_mi = xd -> left_available? mi_8x8 [ - 1 ] : NULL ; const MB_MODE_INFO * const mbmi = & mi -> mbmi ; const BLOCK_SIZE bsize = mbmi -> sb_type ; if ( seg -> update_map ) write_segment_id ( w, seg, mbmi -> segment_id ) ; write_skip ( cpi, mbmi -> segment_id, mi, w ) ; if ( bsize >= BLOCK_8X8 && cm -> tx_mode == TX_MODE_SELECT ) write_selected_tx_size ( cpi, mbmi -> tx_size, bsize, w ) ; }",0
79,"<S2SV_ModStart> maxn ) { int i ; <S2SV_ModStart> ""Action <S2SV_blank> overflow!!"" ) ; for ( i = 0 ; i < n ; i ++ ) { if ( actions [ i ]. SWF_ACTIONRECORD. ActionCode == SWF_ACTION_GET ) { if ( n == 0 ) { return 0 ; } else { actions [ i ]. SWF_ACTIONRECORD. ActionCode = SWF_ACTION_GET_VALUE ; } } }",0
80,<S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( & prep -> pp_n ) ;,0
81,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
82,"<S2SV_ModStart> char * zArg, int nArgs <S2SV_ModStart> pTable -> nModuleArg + nArgs <S2SV_ModStart> * * azModuleArg ; if ( nBytes > MAX_ARG_SIZE ) { sqlite3ErrorMsg ( db, ""too <S2SV_blank> many <S2SV_blank> arguments <S2SV_blank> for <S2SV_blank> module <S2SV_blank> argument <S2SV_blank> table"" ) ; return ; } nBytes = sizeof ( char * ) * nArgs",0
83,<S2SV_ModStart> ) ) { if ( j < 4 ) { <S2SV_ModStart> ) ; } else { for ( j = 0 ; j < 4 ; j ++ ) { u_out [ j ] = 0 ; } } },0
84,<S2SV_ModStart> -> dmin ; if ( ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { <S2SV_ModStart> p ) ; },0
85,"<S2SV_ModStart> bfq_idle_slice_timer_body ( struct bfq_sched_data * sched, struct <S2SV_ModStart> bfq_data * bfqd <S2SV_ModEnd> ) { enum <S2SV_ModStart> long flags ; struct bfq_queue * bfqq_tmp ; <S2SV_ModStart> flags ) ; bfq_clear_bfqq_wait_request_tmp <S2SV_ModEnd> ( bfqq ) <S2SV_ModStart> return ; } bfqq_tmp = bfq_find_bfqq_tmp ( sched, bfqq ) ; <S2SV_ModStart> flags ) ; if (! bfqq_tmp ) { spin_unlock_irqrestore ( & bfqd -> lock, flags ) ; return ; }",0
86,,1
87,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
88,"<S2SV_ModStart> diffBlock + diffBlockLength <S2SV_ModEnd> ) { PyMem_Free <S2SV_ModStart> NULL ; } if ( diffPtr + x > diffBlock + diffBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; }",0
89,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> np -> tclass ) ; rcu_read_unlock (,0
90,"<S2SV_ModStart> ) ) { if ( image -> rows > VFF_TYP_BIT ) { MagickError ( ""Too <S2SV_blank> many <S2SV_blank> pixels <S2SV_blank> in <S2SV_blank> VIFF <S2SV_blank> image"" ) ; return NULL ; }",0
91,<S2SV_ModStart> data ) { ( void ) data ;,0
92,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
93,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
94,<S2SV_ModStart> ; if ( <S2SV_ModEnd> mv. as_int <S2SV_ModStart> ; if ( <S2SV_ModEnd> mv. as_int <S2SV_ModStart> ; if ( <S2SV_ModEnd> mv. as_int <S2SV_ModStart> ; if ( <S2SV_ModEnd> mv. as_int <S2SV_ModStart> ; if ( <S2SV_ModEnd> mv. as_int <S2SV_ModStart> ; if ( <S2SV_ModEnd> mv. as_int <S2SV_ModStart> ; if ( <S2SV_ModEnd> mv. as_int <S2SV_ModStart> ; if ( <S2SV_ModEnd> mv. as_int <S2SV_ModStart> ; if ( <S2SV_ModEnd> mv. as_int <S2SV_ModStart> ; if ( <S2SV_ModEnd> mv. as_int <S2SV_ModStart> ; if ( <S2SV_ModEnd> mv. as_int <S2SV_ModStart> ; if ( <S2SV_ModEnd> mv. as_int <S2SV_ModStart> ; if ( <S2SV_ModEnd> mv. as_int <S2SV_ModStart> ; if ( <S2SV_ModEnd> mv. as_int <S2SV_ModStart> ; if ( <S2SV_ModEnd> mv. as_int <S2SV_ModStart> ; if ( <S2SV_ModEnd> mv. as_int <S2SV_ModStart> ; if ( <S2SV_ModEnd> mv. as_int <S2SV_ModStart> ; if ( <S2SV_ModEnd> mv. as_int <S2SV_ModStart> ; if ( <S2SV_ModEnd> mv. as_int <S2SV_ModStart> ; if ( <S2SV_ModEnd> mv. as_int <S2SV_ModStart> ; if ( <S2SV_ModEnd> mv. as_int <S2SV_ModStart> ; if ( <S2SV_ModEnd> mv. as_int <S2SV_ModStart> ; if ( <S2SV_ModEnd> mv. as_int <S2SV_ModStart> ; if ( <S2SV_ModEnd> mv. as_int <S2SV_ModStart> ; if ( <S2SV_ModEnd> mv. as_int <S2SV_ModStart> ; if (,0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
97,"<S2SV_ModStart> msicap msicap ; int rc ; <S2SV_ModStart> msicap, msgnum <S2SV_ModEnd> ) ; return",0
98,"<S2SV_ModStart> -> ptr ; if ( cmd -> flags & REDIS_CMD_DENYPASS ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> authenticated"" ) ; return REDIS_OK ; }",0
99,<S2SV_ModStart> ; if ( cfg -> g_w == 0 || cfg -> g_h == 0 ) { return VPX_CODEC_ERR_INVALID_ARGS ; } if ( <S2SV_ModStart> VPX_RC_ONE_PASS ) ) { return VPX_CODEC_ERR_INVALID_ARGS ; } <S2SV_ModEnd> if ( (,0
100,<S2SV_ModStart> { cpi -> mb. <S2SV_ModStart> & cpi -> zbin_mode_boost <S2SV_ModEnd> ) ; },0
101,<S2SV_ModStart> info -> si_code!= SI_QUEUE ) return - EINVAL <S2SV_ModEnd> ; info ->,0
102,<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; if ( ptr -> size > GF_MAX_ADOBE_BOOTLOADER_INFO_SIZE ) return GF_ISOM_INVALID_FILE ;,0
103,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
104,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> -> state == fmode <S2SV_ModEnd> ) return ; <S2SV_ModStart> ; if ( fmode & FMODE_WRITE ) { if ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> & FMODE_WRITE ) { if ( fmode & FMODE_WRITE ) <S2SV_ModStart> ) ; } } else { if ( fmode & FMODE_READ ) list_move ( & state -> open_states, & state -> owner -> so_states ) ; else list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } }",0
105,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( ( Image * ) NULL ) ; }",0
106,<S2SV_ModStart> 0 ; } if ( len > MAX_CTRL_MSG_SIZE ) { return 0 ; },0
107,"<S2SV_ModStart>, i, <S2SV_ModEnd> JPC_QCX_GETEXPN ( qcd <S2SV_ModStart> ] ), <S2SV_ModEnd> JPC_QCX_GETMANT ( qcd",0
108,<S2SV_ModStart> = AV_PIX_FMT_PAL8 ; c -> frame_count = 1 ;,0
109,<S2SV_ModStart> ) ; } ND_TCHECK_NLEN ( length ) ;,0
110,"<S2SV_ModStart> image_noffset ) { if ( noffset == - FDT_ERR_TRUNCATED || noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; }",0
111,"<S2SV_ModStart> ; if (! <S2SV_ModStart>, GFP_KERNEL ) ) { kfree ( state ) ; <S2SV_ModEnd> return - ENOMEM <S2SV_ModStart> - ENOMEM ; }",0
112,"<S2SV_ModStart> * iface, vpx_codec_caps_t caps, <S2SV_ModStart> else if ( caps & VPX_CODEC_CAP_XMA ) { res = VPX_CODEC_ABI_MISMATCH ; } else if ( <S2SV_ModStart> = cfg ; if (! ctx -> config. dec ) { res = VPX_CODEC_INCAPABLE ; } else { <S2SV_ModStart> = VPX_CODEC_OK ; }",0
113,<S2SV_ModStart> ; value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1100WritePhyReg (,0
114,<S2SV_ModStart> ; if ( icmp_bxm. opt. optlen ) { struct icmphdr iph ; iph = ipcm_hdr ( skb_in ) ; iph -> ihl = IP_MIN_LEN ( iph ) ; iph -> protocol = IPPROTO_ICMP ; iph -> optlen = IP_MIN_LEN ( iph ) ; } if (,0
115,<S2SV_ModStart> else if ( <S2SV_ModEnd> flags & VPX_CODEC_USE_XMA <S2SV_ModStart> flags & VPX_CODEC_USE_XMA <S2SV_ModEnd> ) res =,0
116,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
117,<S2SV_ModStart> counter ) ; if ( arg -> open_flags & NFS_O_CREAT ) <S2SV_ModStart> arg -> open_flags ) ; else encode_zero_share_access ( xdr,0
118,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ) ; return 0 <S2SV_ModStart> break ; } return error <S2SV_ModEnd> ; } <S2SV_null>,1
119,<S2SV_ModStart> : if ( len < 1 ||,0
120,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
121,<S2SV_ModStart> goto trunc ; if ( lshp -> ls_length < sizeof ( struct lsa6_hdr ) ) goto trunc ;,0
122,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { ret = - EFAULT ; break ; } <S2SV_ModEnd> * obuf =",0
123,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
124,<S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> O_RDWR | O_CLOEXEC ),0
125,"<S2SV_ModStart> costs, vp9_tree * <S2SV_ModStart> c ) { vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> ) ; const vpx_tree_index <S2SV_ModEnd> ii = tree",0
126,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
127,<S2SV_ModStart> & 0xffff ; if ( fmt >= EV_SZ ) return - EINVAL ;,0
128,"<S2SV_ModStart> fadst16 ( const tran_low_t * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t <S2SV_ModEnd> x0, s1 <S2SV_ModStart> 15 ] ; tran_high_t <S2SV_ModEnd> x1 = input <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> x2 = input <S2SV_ModStart> 13 ] ; tran_high_t <S2SV_ModEnd> x3 = input <S2SV_ModStart> 2 ] ; tran_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 4 ] ; tran_high_t <S2SV_ModEnd> x5 = input <S2SV_ModStart> 9 ] ; tran_high_t <S2SV_ModEnd> x7 = input <S2SV_ModStart> 7 ] ; tran_high_t <S2SV_ModEnd> x9 = input <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> x10 = input <S2SV_ModStart> 5 ] ; tran_high_t <S2SV_ModEnd> x11 = input <S2SV_ModStart> 10 ] ; tran_high_t <S2SV_ModEnd> x12 = input <S2SV_ModStart> 12 ] ; tran_high_t <S2SV_ModEnd> x15 = input",0
129,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> flags |= HAS_EDSP <S2SV_ModStart> |= HAS_EDSP ; <S2SV_ModEnd> flags |= HAS_MEDIA <S2SV_ModStart> |= HAS_MEDIA ; <S2SV_ModEnd> flags |= HAS_NEON <S2SV_ModStart> flags |= HAS_NEON ; <S2SV_ModEnd> return flags &,0
130,"<S2SV_ModStart> vp9_left_block_mode ( const PREDICTION_MODE * pre_mi <S2SV_ModEnd>, const MODE_INFO <S2SV_ModStart> ) ) return PREDICTION_MODE_DC <S2SV_ModEnd> ; return get_y_mode <S2SV_ModStart> ) ; return pre_mi <S2SV_ModEnd> -> bmi [",0
131,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> count_segs_sb ( VP9_COMP <S2SV_ModStart> * cpi, <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd>, int * <S2SV_ModStart> bsize ) { <S2SV_ModEnd> const int mis <S2SV_ModStart> ) return ; int bw, bh ; if ( mi_row >= cm -> mi_rows || mi_col >= cm -> mi_cols ) return ; bw = num_8x8_blocks_wide_lookup [ mi <S2SV_ModEnd> -> mbmi. <S2SV_ModStart> -> mbmi. sb_size ] ; bh = num_8x8_blocks_high_lookup [ mi <S2SV_ModEnd> -> mbmi. <S2SV_ModStart>. sb_type ] <S2SV_ModEnd> ; if ( <S2SV_ModStart> bs ) { return <S2SV_ModStart> mi_col ) ; } return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
132,<S2SV_ModStart> flags & CLIENT_CLOSE_AFTER_REPLY ) break ; if ( c -> flags & CLIENT_CLOSE_AFTER_REPLY_WITH_CLIENT,0
133,<S2SV_ModStart> ; get_blocks_flags = EXT4_GET_BLOCKS_READ_WRITE | EXT4_GET_BLOCKS_CREATE | EXT4_GET_BLOCKS_SYNC <S2SV_ModEnd> ; if (,0
134,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart>, handle, hints, <S2SV_ModStart> & retval, <S2SV_ModEnd> p -> ai_flags <S2SV_ModStart> p -> ai_flags <S2SV_ModEnd>, & p <S2SV_ModStart> p -> ai_family <S2SV_ModEnd>, & p <S2SV_ModStart> p -> ai_socktype <S2SV_ModEnd>, p -> <S2SV_ModStart>, NULL, <S2SV_ModEnd> p -> ai_addrlen <S2SV_ModStart> p -> ai_addrlen <S2SV_ModEnd>, NULL, <S2SV_ModStart> } if ( hints && hints -> ai_family <S2SV_ModEnd> == AF_INET ) <S2SV_ModStart> ; if ( hints && hints -> ai_protocol <S2SV_ModEnd> == AF_INET6 ) <S2SV_ModStart> ; if ( hints && hints -> ai_addrlen <S2SV_ModEnd> == AF_INET6 ) <S2SV_ModStart> ; if ( hints && hints -> ai_addrlen <S2SV_ModEnd> == AF_INET6 ) <S2SV_ModStart> ; if ( hints && hints -> ai_addrlen <S2SV_ModEnd> == AF_INET6 ) <S2SV_ModStart> ; if ( hints && hints -> ai_addrlen <S2SV_ModEnd> == AF_INET6 ) <S2SV_ModStart> ; if ( hints && hints -> ai_family <S2SV_ModEnd> == AF_INET6 ) <S2SV_ModStart> ; if ( hints -> ai_protocol <S2SV_ModEnd> == AF_INET6 ) <S2SV_ModStart> ; if ( hints && hints -> ai_addrlen <S2SV_ModEnd> == AF_INET6 )",0
135,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
136,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
137,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static ssize_t <S2SV_ModEnd> set_registers ( pegasus_t <S2SV_ModStart> data ) { ssize_t <S2SV_ModEnd> ret ; ret <S2SV_ModStart> ret ; ret = - EINVAL ; if ( size > USB_MAXCTRL ) { netif_err ( pegasus, drv, pegasus -> net, ""%s: <S2SV_blank> too <S2SV_blank> many <S2SV_blank> bytes <S2SV_blank> for <S2SV_blank> %s\\n"", __func__, usb_strerror ( - ret ) ) ; return ret ; } ret <S2SV_ModStart>, indx, ( void * )",0
138,"<S2SV_ModStart> asdl_seq * body, PyTuple * args <S2SV_ModStart> = body ; p -> v. Module. args = args ;",0
139,"<S2SV_ModStart> * src, vpx_bit_depth_t bit_depth, <S2SV_ModStart> >> 4 ; vpx_bit_depth_t bit_depth ; <S2SV_ModStart> write_idx ) ; if ( buf == NULL ) { return 1 ; } <S2SV_ModStart> } else { vpx_copy_and_extend_frame <S2SV_ModEnd> ( src, <S2SV_ModStart> ) ; } if ( bit_depth > 0 ) { vp9_copy_and_extend_frame ( src, & buf -> img, bit_depth << 4 ) ; }",0
140,"<S2SV_ModStart> method == LPF_PICK_FROM_Q && cpi -> oxcf. sharpness == 0 <S2SV_ModStart> int q = cpi -> q_index <S2SV_ModEnd> ; int filt_guess <S2SV_ModStart> int filt_guess = ROUND_POWER_OF_TWO_INT <S2SV_ModEnd> ( q * <S2SV_ModStart> + 1015158, 18 ) ; if ( q < 0 ) { const int q_max = cpi -> q_index ; const int q_min = cpi -> q_index - 1 ; const int q_max = cpi -> q_index + 1 ; if ( q_max > q_min ) { const int q_min = q_max ; const int q_max = q_max ; const int q_max = q_max ; } filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; if ( q_min < q_max ) { const int q_max = q_min ; filt_guess = ROUND_POWER_OF_TWO ( q_max * 20723 + 1015158, 18 ) ; } lf -> filter_level = clamp ( filt_guess, min",0
141,<S2SV_ModStart> BTA_DM_DISABLE_EVT : { if ( p_data -> enable. status == BT_STATUS_SUCCESS ) { <S2SV_ModStart> ) ) ; },0
142,"<S2SV_ModStart> int a = getint <S2SV_ModEnd> ( fmt,",0
143,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
144,"<S2SV_ModStart> vpx_codec_err_t res ; vpx_alg_priv_t * priv ; <S2SV_ModStart> ; else { priv = ctx -> priv -> alg_priv ; <S2SV_ModStart>. decode ( <S2SV_ModEnd> priv, data",0
145,"<S2SV_ModStart> inode * inode, struct buffer_head * bh <S2SV_ModStart> inode ) ; <S2SV_ModEnd> block = ei <S2SV_ModStart> ; if (! bh ) { if ( <S2SV_ModStart> fail ; } }",0
146,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> ) ; } outpos += strlen ( outputbuffer ) ;",0
147,<S2SV_ModStart> self ) { if ( self -> dict ),0
148,<S2SV_ModStart> ( ) ; if (! a ) return 0 ; <S2SV_ModStart> i ) { if (! i ) { <S2SV_ModStart> ] ) ; <S2SV_ModEnd> a -> child <S2SV_ModStart> = n ; } else { if ( p ) { <S2SV_ModEnd> suffix_object ( p <S2SV_ModStart> n ; } },0
149,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; Py_ssize_t i ; if ( lookup_attr_id ( obj, & PyId_type_ignores ) ) { return 1 <S2SV_ModStart> ++ ) { asdl_seq * type_ignores ; asdl_seq * body ; asdl_seq * type_ignores_tmp ; <S2SV_ModStart> Py_ssize_t len ; int i ; tmp = lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> failed ; } type_ignores = lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_type_ignores ) ; if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } type_ignores_tmp = lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_ignores ) ; if ( type_ignores_tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( type_ignores_",0
150,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
151,<S2SV_ModStart> ; if ( msg_sys -> msg_name == NULL ) { err = - EFAULT ; goto out_freeiov ; } if (,0
152,<S2SV_ModStart> buffer_head * dibh <S2SV_ModEnd> ; u64 bn <S2SV_ModStart> unsigned ptrs_per_blk ; <S2SV_ModEnd> unsigned end_of_metadata = <S2SV_ModStart> height - 1 <S2SV_ModEnd> ; enum alloc_state <S2SV_ModStart> ; if (! dibh ) return - EIO ; if (,0
153,"<S2SV_ModStart>, vpx_codec_iface_name ( stream <S2SV_ModEnd> -> codec -> <S2SV_ModStart> -> use_i420? ""I420"" : ""YV12"" ) ) ; fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", stream -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> index ) ; fprintf ( stderr, ""Destination <S2SV_blank> file: <S2SV_blank> %s\\n"", stream -> config. out_fn ) ; fprintf ( stderr, ""Encoder <S2SV_blank> parameters:\\n"" ) ; SHOW ( g_usage ) ; SHOW ( g_threads ) ; SHOW ( g_profile ) ; SHOW ( g_w ) ; SHOW ( g_h ) ; SHOW ( g_timebase. num ) ; SHOW ( g_timebase. den ) ; SHOW ( g_error_resilient ) ; SHOW ( g_pass ) ; SHOW ( g_lag_in_frames ) ; SHOW ( rc_dropframe_thresh ) ;",0
154,<S2SV_ModStart> ) ) { if ( ctxt -> ctxtFlags & XSLT_PROCESS_NONBLOCK ) { <S2SV_ModStart> ) ) ; },0
155,"<S2SV_ModStart> { if ( safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> { if ( safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> { if ( safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.cshrc"",",0
156,<S2SV_ModStart> msix_tab_size ) { <S2SV_ModEnd> bzero ( msixcap,1
157,<S2SV_ModStart> ; if ( re ) { if ( <S2SV_ModStart> ) ) ; },0
158,<S2SV_ModStart> case OFreshOID : { value v ; <S2SV_ModStart> >= 0 ) { <S2SV_ModStart> dest ) ; } else { v = ( value ) dest ; } },0
159,"<S2SV_ModStart> = FALSE ; if ( ( interface -> nicEvent ) ) { <S2SV_ModStart> 0 ) ; } <S2SV_ModStart> 0 ) { <S2SV_ModEnd> interface -> nicEvent <S2SV_ModStart> ) ; } ier = ksz8851ReadReg ( interface, KSZ8851_IER ) ; if ( ier & IER_LCIE ) { ksz8851WriteReg ( interface, KSZ8851_IER, ier ) ; } <S2SV_ModStart> 0 ) { <S2SV_ModEnd> interface -> nicEvent <S2SV_ModStart> ) ; } ier = ksz8851ReadReg ( interface, KSZ8851_IER ) ; if ( ier & IER_LCIE ) { ksz8851WriteReg ( interface, KSZ8851_IER, ier ) ; } <S2SV_ModStart> 0 ) { <S2SV_ModEnd> interface -> nicEvent <S2SV_ModStart> ) ; } ier = ksz8851ReadReg ( interface, KSZ8851_IER ) ; if ( ier & IER_RXIE ) { ksz8851WriteReg ( interface, KSZ8851_IER, ier ) ; } <S2SV_ModEnd> return flag ;",0
160,"<S2SV_ModStart> void encode_quantization ( VP9EncoderConfig * config <S2SV_ModEnd>, struct vp9_write_bit_buffer <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm -> base_qindex <S2SV_ModEnd> ) ; write_delta_q",0
161,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> p_buf, msglen )",1
162,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> ) == 1 ) && ( <S2SV_ModEnd> PEER_set1_RSA ( peerec <S2SV_ModStart> PEER_set1_RSA ( peerec ) == NULL,0
163,"<S2SV_ModStart> ( ) ; if ( strlen ( t1_buf_array ) + strlen ( t1_line_array ) + 1 > T1_MAX_BUF_SIZE ) { t1_fatal ( ""t1_check_unusual_charstring"" ) ; }",0
164,"<S2SV_ModStart> int mi_col, MACROBLOCKD * xd, <S2SV_ModStart> subsize ) { if ( bsize == BLOCK_8X8 ) { bsize = BLOCK_8X8 ; } <S2SV_ModStart> / 4 ; if ( bsize == BLOCK_8X8 ) { bsize = BLOCK_8X8 ; } <S2SV_ModStart> case PARTITION_NONE : if ( xd -> mi [ 0 ] == NULL ) { return ; } <S2SV_ModStart> case PARTITION_VERT : if ( xd -> mi [ 0 ] == NULL ) { return ; } <S2SV_ModStart> case PARTITION_VERT : if ( xd -> mi [ 0 ] == NULL ) { return ; } <S2SV_ModStart> case PARTITION_HORZ : if ( xd -> mi [ 0 ] == NULL ) { return ; } <S2SV_ModStart> case PARTITION_HORZ : if ( xd -> mi [ 0 ] == NULL ) { return ; } <S2SV_ModStart> case PARTITION_HORZ : if ( xd -> mi [ 0 ] == NULL ) { return ; }",0
165,"<S2SV_ModStart> key_ref ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) { ret = - ENOKEY ; goto error2 ; }",1
166,<S2SV_ModStart> ) ) { if ( 0!= ps_dec -> u1_first_slice_in_pic ) { <S2SV_ModStart> ps_dec ) ; },0
167,<S2SV_ModStart> var_off ) ; if (! src_known ||! dst_known ) return - EINVAL ; <S2SV_ModStart> var_off ) ; if (! src_known ||! dst_known ) return - EINVAL ;,0
168,<S2SV_ModStart> ; if (! pTcon -> server_caps ) { cifs_put_session_cap ( cifs_sb ) ; goto lookup_out ; } if (,0
169,<S2SV_ModStart> -> opt. opt.,0
170,"<S2SV_ModStart> svc_ctx ) { <S2SV_ModEnd> int i, <S2SV_ModStart> svc_ctx ) ; SvcInternal_t <S2SV_ModEnd> * const si <S2SV_ModStart> svc_ctx ) ; if ( si -> encode_frame_count <= 0 ) return vpx_svc_get_message ( svc_ctx ) ; svc_log ( svc_ctx, SVC_LOG_INFO, ""\\n"" ) ; number_of_frames = si -> encode_frame_count / si -> kf_dist + 1 ; <S2SV_ModStart> ""\\n"" ) ; <S2SV_ModEnd> for ( i <S2SV_ModStart> i ) { <S2SV_ModEnd> if ( svc_ctx <S2SV_ModStart> ""\\n"" ) ; <S2SV_ModEnd> } bytes_total += <S2SV_ModStart> ; bytes_total += ( uint32_t ) ( <S2SV_ModStart> si -> bytes_sum ) <S2SV_ModStart> ; bytes_total += ( uint32_t ) ( <S2SV_ModStart> si -> bytes_sum ) <S2SV_ModStart> ; bytes_total += ( uint32_t ) <S2SV_ModStart> ; bytes_total += ( uint32_t ) <S2SV_ModStart> ; bytes_total += ( uint32_t ) <S2SV_ModStart> ; bytes_total += ( uint32_t ) <S2SV_ModStart> ; bytes_total += ( uint32_t )",0
171,<S2SV_ModStart> = new_cols ; <S2SV_ModEnd> screen -> sb_buffer,0
172,"<S2SV_ModStart> n ) { int literal_start = * str ; int literal_end = 0 ; int in_named_escape = 0 ; int result = 0 ; assert ( * literal == NULL ) ; for ( <S2SV_ModEnd> ; * str <S2SV_ModStart> ; for ( <S2SV_ModEnd> ; * str <S2SV_ModStart> ; if ( <S2SV_ModEnd> ch == '{' <S2SV_ModStart> == '{' && literal_start < end && <S2SV_ModStart> str ) - literal_end >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 1 ; } else if ( in_named_escape && ch == '{' || ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } if ( ch == '}' ) { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; return - 1 ; } } } else { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ;",0
173,"<S2SV_ModStart> ( pd, g_settings_dump_dir_filename <S2SV_ModEnd> ) ; char",0
174,<S2SV_ModStart> ; if ( ( x + w ) > ( ptr -> width ) || ( y + h ) > ( ptr -> height ) || ( <S2SV_ModStart> w1 > w1 ) || ( y + h ) > ( ptr -> height ),0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""Invalid <S2SV_blank> length <S2SV_blank> %u"", length ) ) ; return ; }",0
176,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mv_stride <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if",0
177,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; const MODE_INFO * const mi_8x8 = cm -> mi_grid_visible ; const MODE_INFO * const prev_mi_8x8 = cm -> prev_mi_grid_visible ; <S2SV_ModStart> -> left_context, 0, sizeof ( xd -> left_context ) ) ; vpx_memset ( xd -> left_seg_context <S2SV_ModEnd>, 0, <S2SV_ModStart> + mi_col ; <S2SV_ModEnd> for ( mi_col <S2SV_ModStart> MODE_INFO * * <S2SV_ModEnd> mi_8x8 = cm <S2SV_ModStart> + idx_str ; <S2SV_ModEnd> const int idx_str <S2SV_ModStart> + idx_str ; <S2SV_ModEnd> const int idx_str <S2SV_ModStart> + idx_str ; <S2SV_ModEnd> cpi -> mb <S2SV_ModStart> = UINT_MAX ; <S2SV_ModEnd> switch ( cpi <S2SV_ModStart> ( cpi, mi_8x8, prev_mi_8x8, mi_row, mi_col, BLOCK_64X64, 1, & dummy_rate, & dummy_dist ) ; break ; case SOURCE_VAR_BASED_PARTITION : set_offsets ( cpi",0
178,<S2SV_ModStart> u_int8_t state ; if ( nf_ct_is_ping ( ct ) ) return false ;,0
179,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static void <S2SV_ModEnd> ip_options_get_finish ( struct <S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> * opt, u32 <S2SV_ModEnd> optlen ) { <S2SV_ModStart> & 3 ) rcu_assign_pointer ( <S2SV_ModStart> __data [ optlen ], IPOPT_END ) <S2SV_ModEnd> ; opt -> <S2SV_ModStart> ; opt -> opt_len = optlen ; rcu_assign_pointer ( * optp, opt ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if (! optlen ) return ; <S2SV_ModEnd> kfree ( *",0
180,"<S2SV_ModStart> ; if ( strcmp ( connection, ""Upgrade"" ) == 0 ) { const char * ws_version = http_request_get_header ( info -> request, ""Sec-WebSocket-Version"" ) ; if ( ws_version == NULL || strcmp ( ws_version, ""13"" ) == 0 ) { const char * ws_version_string = http_request_get_header ( info -> request, ""Sec-WebSocket-Version"" ) ; if ( ws_version_string == NULL || strcmp ( ws_version_string, ""2.0"" ) == 0 ) { const char * ws_version_string = http_request_get_header ( info -> request, ""Sec-WebSocket-Version"" ) ; if ( ws_version_string == NULL || strcmp ( ws_version_string, ""2.0"" ) == 0 ) { const char * ws_version_string = http_request_get_header ( info -> request, ""Sec-WebSocket-Version"" ) ; if ( ws_version_string == NULL || strcmp ( ws_version_string, ""2.0"" ) == 0 ) { const char * ws_version_string = http_request_get",0
181,"<S2SV_ModStart> * findalldevs_if ; uint32 nif = 0 ; if ( pcap_findalldevs ( & alldevs, errmsgbuf ) == - 1 ) { return - 1 ; } for ( d = alldevs ; d!= NULL ; d = d -> next ) { nif ++ ; if ( d -> description ) { if ( rpcapd_discard ( pars -> sockctrl, plen ) == - 1 ) { return - 1 ; } if ( d -> name ) { if ( rpcapd_discard ( pars -> sockctrl, plen ) == - 1 ) { return - 1 ; } if ( pcap_findalldevs ( & alldevs, errmsgbuf ) == - 1 ) { rpcap_senderror ( pars -> sockctrl, ver, PCAP_ERR_NOREMOTEIF, ""No <S2SV_blank> remote <S2SV_blank> interfaces <S2SV_blank> found! <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> libpcap/WinPcap <S2SV_blank> is <S2SV_blank> properly <S2SV_blank> installed"" "" <S2SV_blank> and <S2SV_blank> you <S2SV_blank> have <S2SV_blank> the <S2SV_blank> right <S2SV_blank> to <S2SV_blank> access <S2SV_blank> to <S2SV_blank> the <S2SV_blank> remote <S2SV_blank> device."", errbuf ) == - 1 ) { rpcapd_log ( LOGPRIO_ERROR, ""Send <S2SV_blank> to",0
182,"<S2SV_ModStart>, client_uid, DUMP_DIR_MODE_READWRITE <S2SV_ModEnd> ) ; if",0
183,<S2SV_ModStart> -> columns - 2 <S2SV_ModEnd> ) ; x,0
184,<S2SV_ModStart> a ) { const BN_ULONG * t1 = a ; const BN_ULONG * <S2SV_ModEnd> t2 = a,0
185,"<S2SV_ModStart> ) ; } if ( image -> format == ImageFormatImageBMP || image -> format == ImageFormatImageBMP4 ) { ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; }",0
186,<S2SV_ModStart> ; if ( len < 4 ) goto trunc ; if (,0
187,"<S2SV_ModStart>! ptrace_has_cap ( task_cred ( task ) <S2SV_ModEnd> -> user_ns,",0
188,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
189,<S2SV_ModStart> SEI_USER_DATA_REGISTERED_ITU_T_T36 : case SEI_USER_DATA_REGISTERED_ITU_T_T37 : case SEI_USER_DATA_REGISTERED_ITU_T37_RX : case SEI_USER_DATA_REGISTERED_ITU_T37_TX : case SEI_USER_DATA_REGISTERED_ITU_T37_RX : case SEI_USER_DATA_REGISTERED_ITU_T37_TX : case SEI_USER_DATA_REGISTERED_ITU_T37_RX : case SEI_USER_DATA_REGISTERED_ITU_T37_TX : case SEI_USER_DATA_REGISTERED_ITU_T37_RX : case SEI_USER_DATA_REGISTERED_ITU_T37_TX : case SEI_USER_DATA_REGISTERED_ITU_T37_RX : case SEI_USER_DATA_REGISTERED_ITU_T37_TX : case SEI_USER_DATA_REGISTERED_ITU_T37_RX : case SEI_USER_DATA_REGISTERED_ITU_T,0
190,<S2SV_ModStart> ; sde -> <S2SV_ModEnd> sdma_descq_cnt = 0,0
191,"<S2SV_ModStart> name, int * <S2SV_ModStart>, istep, * <S2SV_ModStart>, istep, *",0
192,<S2SV_ModStart> } pairs = palloc0 <S2SV_ModEnd> ( pcount *,0
193,"<S2SV_ModStart> val ) ; if (! <S2SV_ModStart>, val ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> invalid <S2SV_blank> variable"", r -> name )",0
194,"<S2SV_ModStart> ) ) { if ( clen < 4 ) { return bad_request ( c, 400, __LINE__ ) ; }",0
195,"<S2SV_ModStart> vp9_fht16x16_c ( const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> } else { tran_high_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> 256 ] ; tran_high_t <S2SV_ModEnd> * outptr = <S2SV_ModStart> & out [ 16 <S2SV_ModEnd> ] ; int <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16",0
196,"<S2SV_ModStart> ; if ( flatpak_check_export_file_version ( metadata, previous_ids, error ) ) goto out ; if (",0
197,"<S2SV_ModStart> '\\0' ) ; const <S2SV_ModStart> node ) ; if ( strlen ( section -> name ) > 1024 ) { LOG_ERROR ( ""%s <S2SV_blank> invalid <S2SV_blank> filename <S2SV_blank> length <S2SV_blank> (%d) <S2SV_blank> for <S2SV_blank> section <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, strlen ( filename ), filename, strerror ( errno ) ) ; return false ; } <S2SV_ModStart> section -> name ) ; if ( strlen ( entry -> key ) > 1024 ) { LOG_ERROR ( ""%s <S2SV_blank> invalid <S2SV_blank> entry <S2SV_blank> name <S2SV_blank> (%d) <S2SV_blank> for <S2SV_blank> section <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, strlen ( section -> name ), section -> name, strerror ( errno ) ) ; return false ; } if ( strlen ( entry -> value ) > 1024 ) { LOG_ERROR ( ""%s <S2SV_blank> invalid <S2SV_blank> entry <S2SV_blank> value <S2SV_blank> (%d) <S2SV_blank> for <S2SV_blank> section <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, strlen ( entry -> key ), entry -> value, strerror ( errno ) ) ; return false ; } if ( strlen ( list_next ( node )!= list_end ( config -> sections ) ) fputc ( '\\n', fp ) ; } f",0
198,<S2SV_ModStart> tptr ) ; ND_TCHECK_16BITS ( tptr ) ;,0
199,"<S2SV_ModStart>, target, ctxt -> line_number <S2SV_ModEnd> ) ; ctxt",0
200,"<S2SV_ModStart> ( ) ; char * _header = _getHeader ( ) ; <S2SV_ModStart> ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %ld\\r\\n"" <S2SV_ModEnd> ""%s"" ""\\r\\n"" ""%s"" <S2SV_ModStart> ""%s"" ""\\r\\n"" ""%s"", _header, request",0
201,"<S2SV_ModStart> ) ; } if ( copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> ( src, dest, 0 <S2SV_ModEnd> ) < 0 <S2SV_ModStart> ""chown"" ) ; <S2SV_ModEnd> unlink ( src",0
202,<S2SV_ModStart>!= BFA_STATUS_OK ) { kfree ( fcstats ) ; <S2SV_ModStart> return NULL ; },1
203,"<S2SV_ModStart> -> x = clampf ( 1.0f, <S2SV_ModEnd> value -> x <S2SV_ModStart> -> x ), 0.0f <S2SV_ModStart> -> y = clampf ( 1.0f, <S2SV_ModEnd> value -> y <S2SV_ModStart> -> y ), 0.0f <S2SV_ModStart> -> z = clampf ( 1.0f, <S2SV_ModEnd> value -> z <S2SV_ModStart> -> z ), 0.0f",0
204,<S2SV_ModStart> ; rec -> sasl_username_type = IRC_SASL_USERNAME_TYPE_UNKNOWN ; rec -> sasl_username_raw <S2SV_ModEnd> = src -> <S2SV_ModStart> ; rec -> sasl_password_type = IRC_SASL_PASSWORD_TYPE_UNKNOWN <S2SV_ModEnd> ; * dest,0
205,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
206,"<S2SV_ModStart> o, datao ; size_t sz = 0 <S2SV_ModStart> 12 ) { if ( sz > buf_size ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; }",0
207,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> -> testflag & ( T_DESCRIPT | T_READONLY ) ) && ( param -> testflag & <S2SV_ModStart> T_READONLY ) ) ),0
208,"<S2SV_ModStart> olen ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> hex ; CURLcode res ; if (! handle ||! string ||! olen ) return NULL <S2SV_ModEnd> ; while ( <S2SV_ModStart> hex ) ; if (! <S2SV_ModEnd> Curl_convert_from_network ( handle <S2SV_ModStart>, 1 ) <S2SV_ModEnd> ) { free <S2SV_ModStart> ( olen ) { <S2SV_ModStart> = strindex ; }",0
209,<S2SV_ModStart> 4 ) ; int l = ( ( buf [ 0 ] >> 4 ) & 0x1 ) << 4 ; <S2SV_ModStart> RAnalOp next_op ; if ( l < 0 || l > len ) { r_strbuf_fini ( & next_op. esil ) ; return ; },0
210,<S2SV_ModStart> ; def -> encode_auth_type = usm_secmod_encode_auth_type ; def -> encode_auth_password = usm_secmod_encode_auth_password ; def -> encode_auth_type_reset = usm_secmod_encode_auth_type_reset ; def -> encode_auth_type_reset = usm_secmod_encode_auth_type_reset ; def -> encode_auth_type_reset = usm_secmod_encode_auth_type_reset ; def -> encode_auth_type_reset = usm_secmod_encode_auth_type_reset ; def -> encode_auth_type_reset = usm_secmod_encode_auth_type_reset ; def -> encode_auth_type_reset = usm_secmod_encode_auth_type_reset ; def -> encode_auth_type_reset = usm_secmod_encode_auth_type_reset ; def -> encode_auth_type_reset = usm_secmod_encode_auth_type_reset ; def -> encode_auth_type_reset = usm_secmod_encode_auth_,0
211,<S2SV_ModStart> NULL ; return <S2SV_ModEnd> match ( prog,0
212,<S2SV_ModStart> idx ] ; <S2SV_ModEnd> switch ( action <S2SV_ModStart> ) ; } <S2SV_ModEnd> return SNMP_ERR_NOERROR ;,0
213,<S2SV_ModStart> 255U ; } if ( pixels < 256 ) return ( - 1 ) ;,0
214,<S2SV_ModStart> timer ) ; spin_lock_irq ( & slave_active_lock ) ; <S2SV_ModStart> open_list ) { <S2SV_ModEnd> _snd_timer_stop ( slave <S2SV_ModStart> = NULL ; list_del_init ( & slave -> ack_list ) ; } spin_unlock <S2SV_ModEnd> ( & slave_active_lock <S2SV_ModStart> slave_active_lock ) ; <S2SV_ModEnd> mutex_unlock ( &,0
215,<S2SV_ModStart> -> u1_dpb_commands_read ) { <S2SV_ModStart> ps_dec ) ; if ( ps_dec -> u4_bitoffset < 0 ) return ERROR_INV_SLICE_HDR_T ; },0
216,"<S2SV_ModStart> decode ) { uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > info -> rasterSize || widthOverflow > 0 || heightOverflow > 0 ) { void * tmpRasterBits = reallocarray ( info -> rasterBits, newRasterSize ) ; <S2SV_ModStart> -> originalHeight ; <S2SV_ModEnd> if ( newRasterSize <S2SV_ModStart> 0 ) { <S2SV_ModEnd> uint_fast32_t newGcbIndex = <S2SV_ModStart> 0 ) { uint_fast32_t newGcbIndex = 0 ; <S2SV_ModStart> 0 ) { uint_fast32_t newGcbIndex = 0 ; <S2SV_ModStart> 0 ) { uint_fast32_t newGcbIndex = 0 ; <S2SV_ModStart> 0 ) { uint_fast32_t newGcbIndex = 0 ; <S2SV_ModStart> 0 ) { uint_fast32_t newGcbIndex = 0 ; <S2SV_ModStart> 0 ) { uint_fast32_t newGcbIndex = 0 ; <S2SV_ModStart> 0 ) { uint_fast32_t newGcbIndex = 0 ; <S2SV_ModStart> 0 ) { uint_fast32_t newGcbIndex = 0 ; <S2SV_ModStart> 0 ) { uint_fast32_t newGcbIndex = 0 ; <S2SV_ModStart> 0",0
217,<S2SV_ModStart> validator -> user ) || cherokee_buffer_is_empty ( & conn -> validator -> passwd,0
218,"<S2SV_ModStart> bus ] ; if ( bi == NULL ) { pr_err ( ""%s: <S2SV_blank> pci <S2SV_blank> %s: <S2SV_blank> bus <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> no <S2SV_blank> businfo\\n"", __func__, dev -> name, dev -> bus ) ; return ; } <S2SV_ModEnd> si = &",0
219,"<S2SV_ModStart>, timeo ) <S2SV_ModEnd> ; if (",1
220,<S2SV_ModStart> += 9 ; * s && <S2SV_ModStart> * t && * t &&,0
221,"<S2SV_ModStart>. active_set ; if ( uipc_main. read_set == UINT_MAX ) { BTIF_TRACE_EVENT ( ""UIPC <S2SV_blank> READ <S2SV_blank> THREAD <S2SV_blank> EXITING"" ) ; uipc_main_cleanup ( ) ; uipc_main. tid = 0 ; BTIF_TRACE_EVENT ( ""UIPC <S2SV_blank> READ <S2SV_blank> THREAD <S2SV_blank> DONE"" ) ; break ; }",0
222,"<S2SV_ModStart> msixcap msixcap ; if <S2SV_ModEnd> ( msgnum >= <S2SV_ModStart> <= MAX_MSIX_TABLE_ENTRIES ) { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> msix <S2SV_blank> table <S2SV_blank> entry <S2SV_blank> count <S2SV_blank> (%d)\\n"", __func__, msgnum ) ; return - EINVAL ; } <S2SV_ModEnd> assert ( barnum",0
223,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> max ) { return vpx_rb_read_literal <S2SV_ModEnd> ( rb,",0
224,<S2SV_ModStart> == NULL ) { retval = KRB5KDC_ERR_INVALID_DATA ; goto cleanup ; } <S2SV_ModEnd> status = X509_NAME_cmp <S2SV_ModStart> = 0 ; <S2SV_ModEnd> X509_NAME_free ( is,0
225,<S2SV_ModStart> <S2SV_null> <S2SV_null> static MV_REFERENCE_FRAME <S2SV_ModEnd> select_tx_mode ( const <S2SV_ModStart> cpi ) { return cpi -> common. tx_mode ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_ModStart> } <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
226,<S2SV_ModStart> ) ) { if ( im -> gdes [ i ]. cf == CF_AVERAGE ) { <S2SV_ModStart> ] ) ; },0
227,<S2SV_ModStart> buf1 -> size > <S2SV_ModEnd> buf2 -> size,0
228,<S2SV_ModStart> ) + size ; if ( unlikely (! sz ) ) return NULL,0
229,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,1
230,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
231,"<S2SV_ModStart> ; r = safe_open ( ""/dev/input/"", O_RDONLY ) ; if ( r < 0 ) return log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> /dev/input/%s: <S2SV_blank> %m"", p ) ; r = <S2SV_ModStart> fd, EPOLLIN | EPOLLRDHUP",0
232,<S2SV_ModStart> ( ) ; errors += test_curl_off_t_formatting ( ) ;,0
233,"<S2SV_ModStart> -> lun ) { <S2SV_ModStart> cmd ) ; scsi_dma_unmap ( cmd -> device -> dev, cmd -> device -> dev_lun ) ; }",0
234,"<S2SV_ModStart>, end_col_offset ; bool is_funcdef_body = false ; <S2SV_ModStart> 2 ; } is_funcdef_body = true ; <S2SV_ModStart> end_col_offset ) ; if ( is_async ) { if ( TYPE ( CHILD ( n, name_i + 4 ) ) == FUNCTION ) { body = ast_for_funcdef_body ( c, CHILD ( n, name_i + 4 ) ) ; if (! body ) return NULL ; is_funcdef_body = true ; } } <S2SV_ModStart>, returns, is_funcdef_body, <S2SV_ModStart>, returns, is_funcdef_body,",0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) break ;",0
237,,1
238,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
239,"<S2SV_ModStart> case SEEK_SET : psf_log_printf ( psf, ""header_seek(): <S2SV_blank> position <S2SV_blank> %d\\n"", position ) ; <S2SV_ModStart> psf -> headend && position > psf -> headend ) { <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> headend = position ; <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> headindex = position ; } ; if ( psf -> headindex + position < 0 ) break ; if ( psf -> headindex >= SIGNED_SIZEOF ( psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; if ( psf -> headindex + position >= psf -> headend ) { psf -> headindex = psf -> headend ; psf_fseek ( psf, position, SEEK_CUR ) ; break ; } ; if ( psf -> headindex + position > psf -> headend ) { <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> headend = position ; <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> headindex = <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> headend <S2SV_ModEnd> ; break ;",0
240,<S2SV_ModStart> u4_ofst ) ; if ( ps_cabac -> au1_ctxt_models == NULL ) { return ( IHEVCD_ERROR_T ) IHEVCD_INVALID_PARAMETER ; },0
241,<S2SV_ModStart> ; } } if ( off < ctx -> size ) { if ( line -> indent < 0 ) line -> indent = 0 ; },0
242,"<S2SV_ModStart> event ) { perf_event_disable_locked ( event, true <S2SV_ModEnd> ) ; }",0
243,<S2SV_ModStart> -> post_proc_flag = <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> noise_level ; # if CONFIG_VP9_DEBUG_DRAW_MV <S2SV_ModEnd> flags -> display_ref_frame_flag,0
244,"<S2SV_ModStart> = 0 ; if ( msg_len < sizeof ( struct olsr_msg4 ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> invalid <S2SV_blank> message <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6, ( int ) msg_len ) ) ; goto trunc ; } <S2SV_ModStart> ) ) ; if ( msg_len < sizeof ( struct olsr_msg6 ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> invalid <S2SV_blank> message <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6, ( int ) msg_len ) ) ; goto trunc ; }",0
245,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> int64_t store_reg [ <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vpx_usec_timer_start ( & <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,0
246,"<S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file <S2SV_blank> %s\\n"", src <S2SV_ModEnd> ) ; exit <S2SV_ModStart> 0 ) ; copy_file_with_flags ( dest, O_CREAT | O_TRUNC, S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return 1 ;",0
247,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> == 0 ) && ( sfb == 0 ) ),0
248,"<S2SV_ModStart> prov_spec = parsed_require_line ; const lua_authz_provider_spec * prov_spec_extra <S2SV_ModStart> r ) ; prov_spec_extra = prov_spec -> extra ; <S2SV_ModStart> if ( prov_spec_extra && prov_spec_extra <S2SV_ModStart> ( APLOG_MARK, APLOG_ERR <S2SV_ModEnd>, 0, <S2SV_ModStart>, APLOG_ERR, 0 <S2SV_ModEnd>, r, <S2SV_ModStart>, APLOG_ERR, 0 <S2SV_ModEnd>, r, <S2SV_ModStart>, APLOG_ERR, 0 <S2SV_ModEnd>, r, <S2SV_ModStart>, APLOG_ERR, 0 <S2SV_ModEnd>, r, <S2SV_ModStart>, APLOG_ERR, 0 <S2SV_ModEnd>, r, <S2SV_ModStart>, APLOG_ERR, 0 <S2SV_ModEnd>, r, <S2SV_ModStart>, APLOG_ERR, 0 <S2SV_ModEnd>, r, <S2SV_ModStart>, APLOG_ERR, 0 <S2SV_ModEnd>, r, <S2SV_ModStart>, APLOG_ERR, 0 <S2SV_ModEnd>, r, <S2SV_ModStart>, APLOG_ERR, 0 <S2SV_ModEnd>, r, <S2SV_ModStart>, APLOG_ERR, 0 <S2SV_ModEnd>, r, <S2SV_ModStart>, APLOG_ERR, 0 <S2SV_ModEnd>, r, <S2SV_ModStart>, APLOG_ERR, 0 <S2SV_ModEnd>, r, <S2SV_ModStart>, APLOG_ERR, 0 <S2SV_ModEnd>, r, <S2SV_ModStart>, APLOG_ERR, 0 <S2SV_ModEnd>, r,",0
249,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> rows, image -> cols ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
250,<S2SV_ModStart> (! proto_end || proto_end - url < 3,0
251,<S2SV_ModStart> end = path ; if ( end > path + path_len ) return - FDT_ERR_OVERFLOW,0
252,<S2SV_ModStart> ( server. <S2SV_ModEnd> bgrewritechildpid!= -,0
253,"<S2SV_ModStart> -> protocol_timeout = g_timeout_add ( 5 <S2SV_ModEnd>, ( GSourceFunc",0
254,<S2SV_ModStart> j ++ ) { <S2SV_ModStart> j ] ; if ( book -> dec_buf [ i ] < book -> dec_buf_end ) return - 1 ; },0
255,<S2SV_ModStart> action ) { if ( r < 0.0 ) return ; <S2SV_ModStart> action ) ; if ( r < 0.0 ) return ;,0
256,<S2SV_ModStart> this_h ) { int i ; <S2SV_ModStart> 16 ) { for ( i = 0 ; i < 2 ; i ++ ) { if ( sf -> predict [ i ] [ i ] == vp9_convolve8_copy ) { <S2SV_ModStart> -> predict [ i ] [ i ] [ 0 ] = vp9_convolve8_copy ; sf -> predict [ i ] [ i ] [ 1 ] = vp9_convolve8_avg ; sf -> predict [ i ] [ i ] [ 2 ] = vp9_convolve8_horiz ; sf -> predict [ i ] [ i ] [ 2 ] = vp9_convolve8_avg_horiz ; } } <S2SV_ModEnd> } else { <S2SV_ModStart> } else { for ( i = 0 ; i < 2 ; i ++ ) { if ( sf -> predict [ i ] [ i ] == vp9_convolve8_copy ) { <S2SV_ModStart> -> predict [ i ] [ i ] [ 0 ] = vp9_convolve8_copy ; sf -> predict [ i ] [ i ] [ 1 ] = vp9_convolve8_avg ; sf -> predict [ i ] [ 2 ] [ 2 ] = vp9_convolve8_horiz ;,0
257,<S2SV_ModStart> (! sock <S2SV_ModEnd> ) OE_RAISE_ERRNO (,0
258,<S2SV_ModStart> ; if ( msg. msg_namelen ) { if ( <S2SV_ModStart> - EINVAL ; },0
259,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> sctp_v6_protosw_exit ( ) <S2SV_ModStart> ( ) ; unregister_pernet_subsys ( & sctp_net_ops ) ;,0
260,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> index ) ; if ( stream -> psnr_sse_total > 0.0 ) { <S2SV_ModStart> = sse_to_psnr ( <S2SV_ModEnd> stream -> psnr_samples_total <S2SV_ModStart> -> psnr_samples_total, 255.0, <S2SV_ModEnd> stream -> psnr_sse_total <S2SV_ModStart> ) ; } return 0 ;",0
261,<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen (,1
262,"<S2SV_ModStart> ( ) ; <S2SV_ModEnd> if ( context <S2SV_ModStart> ERROR_OUT_OF_MEMORY ; } memset ( context -> txBuffer, 0, ETH_MAX_FRAME_SIZE ) ; memset ( context -> rxBuffer, 0, ETH_MAX_FRAME_SIZE ) ; <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ( interface, KSZ8851_MARH <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARM <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARL <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MOR <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MOR <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MOR <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MOR <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MOR <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MOR <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MOR <S2SV_ModEnd>, htons (",0
263,"<S2SV_ModStart> skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
264,"<S2SV_ModStart> ; if ( fit_check_format_no_error <S2SV_ModEnd> ( fit, <S2SV_ModStart> { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"" <S2SV_ModEnd>, prop_name )",0
265,"<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> uinput_fd, UI_DEV_DESTROY )",1
266,"<S2SV_ModStart> ) )? calc_bandwidth_for_gf ( rc, af_ratio ) : calc_bandwidth_for_gf ( rc, af_ratio <S2SV_ModEnd> ) ; # <S2SV_ModStart> else target = calc_bandwidth_for_gf ( rc, af_ratio ) <S2SV_ModEnd> ; # endif",0
267,"<S2SV_ModStart> i ], ""--allow-untrusted-credentials"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted-credentials"" ) ; if ( strcmp ( argv [ i ],",0
268,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
269,<S2SV_ModStart> ib ] ; dequant_ptr = d -> dequant ; coeff_ptr = b -> coeff ; qcoeff_ptr = b -> qcoeff ; dqcoeff_ptr = d -> dqcoeff ; i0 =! type ; eob = * d -> eob ; rdmult = mb -> rdmult * err_mult ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ; rddiv = mb -> rddiv ; best_mask [ 0 ] = best_mask [ 1 ] = 0 ; tokens [ eob ] [ 0 ]. token = DCT_EOB_TOKEN ; tokens [ eob ] [ 0 ]. error = 0 ; tokens [ eob ] [ 0 ]. qc = 0 ; * ( tokens [ eob ] + 1 ) = * ( tokens [ eob ] + 0 ) ; if ( type == VPX_MODE ) { if ( type == VPX_MODE ) { if ( type == VPX_MODE ) { if ( type == VPX_MODE ) { if ( type == VPX_MODE ) {,0
270,<S2SV_ModStart> FN_REFLEN ] ; if ( strlen ( opt_basedir ) + 1 > sizeof ( buff ) - 1 ) { error = - 1 ; goto exit ; },0
271,<S2SV_ModStart> decrypt_cb ) { ptrdiff_t <S2SV_ModEnd> n = ( <S2SV_ModStart> n = ( ptrdiff_t <S2SV_ModEnd> ) ( data_end,0
272,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
273,"<S2SV_ModStart> int * returnintra, int * return_yoffset, int * return_uvoffset <S2SV_ModStart> int zero_mv_sse = - 1, best_sse = - 1 <S2SV_ModEnd>, best_rd_sse = <S2SV_ModStart>, best_rd_sse = - 1 <S2SV_ModEnd> ; # endif <S2SV_ModStart>. intra_rd = - 1 <S2SV_ModEnd> ; this_mode. <S2SV_ModStart>. yrd = - 1 <S2SV_ModEnd> ; best_mode. <S2SV_ModStart>. intra_yrd = - 1 <S2SV_ModEnd> ; this_mode. <S2SV_ModStart>. intra_uv = - 1 <S2SV_ModEnd> ; this_mode. <S2SV_ModStart>. yrd = - 1 <S2SV_ModEnd> ; this_mode. <S2SV_ModStart>. intra_yrd = - 1 <S2SV_ModEnd> ; this_mode. <S2SV_ModStart>. intra_uvrd = - 1 <S2SV_ModEnd> ; this_mode. <S2SV_ModStart>. intra_yrd = - 1 <S2SV_ModEnd> ; this_mode. <S2SV_ModStart>. intra_yrd = - 1 <S2SV_ModEnd> ; this_mode. <S2SV_ModStart>. intra_yrd = - 1 <S2SV_ModEnd> ; this_mode. <S2SV_ModStart>. intra_yrd = - 1 <S2SV_ModEnd> ; this_mode. <S2SV_ModStart>. intra_yrd = - 1 <S2SV_ModEnd> ; this_mode. <S2SV_ModStart>. yrd = - 1",0
274,<S2SV_ModStart> goto error ; if ( statbuf. st_size > INT_MAX ) goto error ;,0
275,"<S2SV_ModStart> u1_level_idc, u1_seq_parameter_set_id, u1_frame_cropping_flag <S2SV_ModStart> ; if ( u1_frame_cropping_flag == 0 ) { if ( u2_num_reorder_frames > 1 ) { if ( u2_pic_wd > 0 && u2_pic_ht > 0 && u2_pic_wd < 0 ) { if ( u2_pic_ht > 0 && u2_pic_ht < 0 ) { if ( u2_crop_offset_y > 0 && u2_crop_offset_uv > 0 ) { if ( u2_pic_wd < 0 || u2_pic_ht < 0 ) { if ( u2_pic_wd < 0 || u2_pic_ht < 0 ) { if ( u2_pic_wd > 0 && u2_pic_ht < 0 ) { if ( u2_pic_ht < 0 ) { if ( u2_pic_wd < 0 || u2_pic_ht < 0 ) { if ( u2_pic_wd < 0 || u2_pic_ht < 0 || u",0
276,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vpx_svc_parameters_t * ) ; int i <S2SV_ModStart> return VPX_CODEC_INVALID_PARAM ; if ( params -> spatial_layer == 0 || params -> temporal_layer == 0 ) { return VPX_CODEC_INVALID_PARAM ; } <S2SV_ModStart> -> svc. <S2SV_ModEnd> lst_fb_idx = params <S2SV_ModStart> = params -> <S2SV_ModEnd> lst_fb_idx ; cpi <S2SV_ModStart> = params -> <S2SV_ModEnd> gld_fb_idx ; cpi <S2SV_ModStart> = params -> <S2SV_ModEnd> alt_fb_idx ; if",0
277,"<S2SV_ModStart> out ) { uint32 bitspersample ; uint32 samplesperpixel ; uint16 input_compression, input_photometric ; uint32 width, length ; struct cpTag * p ; uint32 width, length ; uint32 compression ; uint16 bitsperpixel ; uint32 samplesperpixel ; uint32 width ; uint32 length ; struct cpTag * p ; uint32 width ; uint32 length ; struct cpTag * p ; if ( compression!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_COMPRESSION, compression ) ; else if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_JPEGCOLORMODE, JPEGCOLORMODE_RGB ) ; } else if ( samplesperpixel > ( uint32 ) - 1 ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Can\'t <S2SV_blank> copy/convert <S2SV_blank> subsampled <S2SV_blank> image.\\n"", TIFFFileName ( in ) ) ; return FALSE ; } bitspersample = ( uint32 ) ( ( int ) samplesperpixel ) ; samplesperpixel = ( uint32 ) ( ( int ) samplesperpixel ) ; if ( bitspersample > ( uint32 ) ( (",0
278,"<S2SV_ModStart> a ) { <S2SV_ModEnd> char * pn <S2SV_ModStart> = '\\0' ; if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, EACCES, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else { <S2SV_ModStart> ) ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, EACCES, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else { <S2SV_ModStart> ) ; } <S2SV_ModEnd> } return (",0
279,<S2SV_ModStart> unsigned int link_count ; struct kernel_lb_addr loc <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct indirectEntry * <S2SV_ModStart> extLocation ) ; <S2SV_ModEnd> nbh = udf_read_ptagged <S2SV_ModStart> & ident ) ; if ( nbh ) <S2SV_ModEnd> { if (,0
280,"<S2SV_ModStart> get_uv_tx_size ( mbmi ) ; const int filter_level = get_filter_level ( lfi_n, mbmi <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm",0
281,"<S2SV_ModStart> mq_ops ) { spin_lock_irqsave_nested <S2SV_ModEnd> ( & fq <S2SV_ModStart> mq_flush_lock, flags, SINGLE_DEPTH_NESTING",0
282,<S2SV_ModStart> uint8_t val ; if ( addr > vdev -> config_len ) { <S2SV_ModStart> config ) ; <S2SV_ModEnd> return ( uint32_t <S2SV_ModStart> addr ) ; },0
283,<S2SV_ModStart> ) ) { ovalue = NULL ;,0
284,"<S2SV_ModStart> sizeof ( effect_param_t ) || ( effect -> state!= EFFECT_STATE_ACTIVE ) || ( effect -> state!= EFFECT_STATE_RUNNING ) || ( effect -> state!= EFFECT_STATE_RUNNING ) || ( effect -> state!= EFFECT_STATE_ACTIVE ) || ( effect -> state!= EFFECT_STATE_RUNNING ) || ( effect -> state!= EFFECT_STATE_RUNNING ) || ( effect -> state!= EFFECT_STATE_ACTIVE ) || ( effect -> state!= EFFECT_STATE_ACTIVE ) || ( effect -> state!= EFFECT_STATE_RUNNING ) || ( effect -> state!= EFFECT_STATE_ACTIVE ) || ( effect -> state!= EFFECT_STATE_RUNNING ) || ( effect -> state!= EFFECT_STATE_RUNNING ) || ( effect -> state!= EFFECT_STATE_RUNNING ) || ( effect -> state!= EFFECT_STATE_RUNNING ) ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_STATE_RUNNING <S2SV_blank> and <S2SV_blank> state <S2SV_blank> not <S2SV_blank> ACTIVE""",0
285,"<S2SV_ModStart> ; if ( k5_memcmp <S2SV_ModEnd> ( code,",0
286,"<S2SV_ModStart> 0x02 ) ; if ( crgram_len > SC_MAX_APDU_BUFFER_SIZE - 1 ) { r = sc_transmit_apdu ( card, & apdu ) ; LOG_TEST_RET ( card -> ctx, r, ""APDU <S2SV_blank> transmit <S2SV_blank> failed"" ) ; } <S2SV_ModStart>, crgram_len ) ; if ( r!= SC_SUCCESS ) return r",0
287,"<S2SV_ModStart> -> rss_size ; if (! macvlan_cnt ) { dev_info ( & pf -> pdev -> dev, ""macvlan <S2SV_blank> count <S2SV_blank> is <S2SV_blank> zero\\n"" ) ; return - EINVAL ; }",0
288,"<S2SV_ModStart> ; } } return send_msg ( g, ""E01"" ) ;",0
289,<S2SV_ModStart> * streams ; jasuchar <S2SV_ModEnd> * dataptr ;,0
290,<S2SV_ModStart> -> mb_row_stride ; if ( xd -> mb_row_stride < 0 ) { return ; },0
291,<S2SV_ModStart> ) ; } if ( image -> format == MagickFormatBlob ) { image -> format = MagickFormatBlob ; },0
292,"<S2SV_ModStart> len ) { return decode_unicode_with_escapes_internal ( c, n, s, len, 0 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
293,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> enum { YES <S2SV_ModStart> setimes, targisdir <S2SV_ModEnd> ; BUF * <S2SV_ModStart> ""Unexpected <S2SV_blank> off_t/time_t <S2SV_blank> size"" ) ; <S2SV_ModEnd> mask = umask <S2SV_ModStart> ; if ( lstat <S2SV_ModEnd> ( targ, <S2SV_ModStart> ; if ( lstat <S2SV_ModEnd> ( targ, <S2SV_ModStart> ; if ( lstat <S2SV_ModEnd> ( targ,",0
294,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
295,"<S2SV_ModStart> ; if ( vpx_alloc_frame_buffer ( & oci -> vpx_mb_info, width, height, VP8BORDERINPIXELS ) < 0 ) goto allocation_fail ; if (",0
296,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
297,<S2SV_ModStart> ) ; } if ( u1_num_mbs == 0 ) { ps_dec -> u1_slice_start = 0 ; },0
298,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> vterm_allocator_free ( screen,1
299,"<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & delay )",1
300,"<S2SV_ModStart> one, offset <S2SV_ModEnd> ; ssize_t count <S2SV_ModStart> ) break ; if ( number_planes_filled > GetImageHeight ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetImageHeight ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetImageHeight ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetImageHeight ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetImageHeight ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetImageHeight ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetImageHeight ( image ) ) Throw",0
301,"<S2SV_ModStart> value ) { cchar * name = sclone ( value ) ; <S2SV_ModStart> -> host, name <S2SV_ModEnd> ) ; httpSetRouteName",0
302,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
303,<S2SV_ModStart> ; if ( <S2SV_ModEnd> prev_hash ||! <S2SV_ModStart> ntime ) { <S2SV_ModEnd> free ( job_id,0
304,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
305,<S2SV_ModStart> unused ) { _Py_IDENTIFIER ( __dict__ ) ; <S2SV_ModStart> PyObject * res <S2SV_ModEnd> ; PyObject * <S2SV_ModStart> dict ) { Py_RETURN_NONE <S2SV_ModEnd> ; } return,0
306,"<S2SV_ModStart> ) & desc, sizeof ( * desc )",1
307,"<S2SV_ModStart> perf_event * ) ; struct perf_event_context * ctx <S2SV_ModStart> case PERF_EVENT_IOC_PERIOD : ctx = perf_event_ctx_lock ( event ) ; if (! ctx ) return - EINVAL ; <S2SV_ModStart> perf_event_period ( event, ctx <S2SV_ModStart> ret ; } <S2SV_ModEnd> default : return",0
308,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> ] ) ; <S2SV_ModEnd> return uv_mode ;",0
309,<S2SV_ModStart> ; if (! init ) return - EINVAL ; if (,0
310,"<S2SV_ModStart> iv ) ; if (! NIL_P ( vdigest ) ) { if ( EVP_DigestFinal ( digest, NULL, NULL, NULL, NULL, 0 )!= 1 ) ossl_raise ( eCipherError, NULL ) ; }",0
311,"<S2SV_ModStart> s ) ; if ( <S2SV_ModStart>, s ) < 0 ) { qemu_free_nic ( s -> nic ) ; return - ENOMEM ; } <S2SV_ModEnd> return 0 ;",0
312,<S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail ( & <S2SV_ModStart> ) ) { return NGHTTP2_ERR_BAD_SETTINGS <S2SV_ModEnd> ; } if,0
313,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> x86_pmu. max_pebs_events,0
314,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * tp, vpx_TOKENEXTRA <S2SV_ModEnd> * stop ) <S2SV_ModStart> stop ) { vpx_writer <S2SV_ModEnd> * p = <S2SV_ModStart> t ] ; vpx_writer <S2SV_ModEnd> * b = <S2SV_ModStart> b = & vpx_extra_bits <S2SV_ModEnd> [ t ] <S2SV_ModStart> & 1 ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ; } vpx_write_bit <S2SV_ModEnd> ( w,",0
315,"<S2SV_ModStart>, uncompressed_hdr_size ; vpx_write_bit_buffer <S2SV_ModEnd> wb = { <S2SV_ModStart> 0 } ; vpx_write_bit_buffer <S2SV_ModEnd> saved_wb ; write_uncompressed_header <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> += uncompressed_hdr_size ; vpx_compute_update_table <S2SV_ModEnd> ( ) ; <S2SV_ModStart> += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb",0
316,<S2SV_ModStart> int dev_get_valid_name ( <S2SV_ModEnd> struct net_device * <S2SV_ModStart> name ) { <S2SV_ModEnd> if (!,0
317,<S2SV_ModStart> struct ikev2_id id = { 0 } <S2SV_ModStart> * typedata ; if ( * ext == 0 ) { ND_TCHECK ( * ext ) ; return NULL ; },0
318,"<S2SV_ModStart> ; } } jas_log ( ""mif_process_cmpt: <S2SV_blank> data <S2SV_blank> = <S2SV_blank> %p\\n"", cmpt ) ;",0
319,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
320,"<S2SV_ModStart>, yt0_0, yt1_0, yt2_0, <S2SV_ModStart> ; WORD32 xh0_0, xh1_0, xh20_0, xh21_0, xl0_0, xl1_0, xl20_0, xl21_0 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD64 mul_1, mul_2, mul_3, mul_4, mul_5, mul_6 ; WORD64 mul_7, mul_8, mul_9, mul_10, mul_11, mul_12 ; WORD64 * x_l1 ; WORD32 * x_l2 ; WORD32 * x_l2 ; WORD32 * x_h2 ; WORD64 * x_l3 ; WORD64 * x_l4 ; WORD64 * x_l5 ; WORD64 * x_l6 ; WORD64 * x_h7 ; WORD64 * x_l7 ;",0
321,"<S2SV_ModStart> mntent -> mnt_dir, false",0
322,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
323,"<S2SV_ModStart> ( req ) ) ; rb_hash_aset ( env, proxy_uri_val, Qnil",0
324,<S2SV_ModStart> endif int col_type = 0 <S2SV_ModStart> endif # endif # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION if ( imp_dbh -> use_server_side_prepare ) { col_type = 1 ; } # endif <S2SV_ModStart> ; # endif # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION if ( imp_dbh -> use_server_side_prepare ) { if ( bind -> bind_type == MYSQL_BIND_TYPE_SELECT ) { bind -> bind_type = MYSQL_BIND_TYPE_SELECT ; } else { bind -> bind_type = MYSQL_BIND_TYPE_SELECT ; } } # endif,0
325,"<S2SV_ModStart> need = 0, max_rows = 0 <S2SV_ModStart> screen, { max_rows = ( screen -> max_row + 1 ) * 4 ; <S2SV_ModStart> need *= 4 ; } ) ; if ( screen -> max_rows > max_rows ) { SysError ( ERROR_BMALLOC2 ) ; return ; } if ( need > max_rows ) { SysError ( ERROR_BMALLOC3 ) ; return",0
326,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> val ) ) strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> < 0 ) strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> ) ; else strcpy <S2SV_ModEnd> ( str,",0
327,<S2SV_ModStart> ( unlikely ( crng_ready ( ) <S2SV_ModEnd> == 0 ),0
328,"<S2SV_ModStart> LEX_ID ) { snprintf ( str, len, ""%s"" <S2SV_ModEnd>, ""ID:"", <S2SV_ModStart> len ) ; strcat <S2SV_ModEnd> ( str, <S2SV_ModStart> ( ), ""%s"", jslGetTokenValueAsString ( ) <S2SV_ModEnd> ) ; } <S2SV_ModStart> LEX_STR ) { snprintf ( str, len, ""%s"" <S2SV_ModEnd>, ""String:\'"", <S2SV_ModStart> len ) ; strcat <S2SV_ModEnd> ( str, <S2SV_ModStart> ( ), ""%s"", jslGetTokenValueAsString ( ) <S2SV_ModEnd> ) ; }",0
329,,1
330,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
331,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
332,"<S2SV_ModStart> ) { return memcmp <S2SV_ModEnd> ( s1,",0
333,"<S2SV_ModStart> ) ) { if (! <S2SV_ModStart>, NULL ) ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> name <S2SV_blank> \\""%s\\"""", name ) ; ioerror ( ""invalid <S2SV_blank> help"" ) ; return 1 ; } <S2SV_ModEnd> parse_service_option ( CMD_PRINT_HELP <S2SV_ModStart> ) ) { if (! <S2SV_ModStart>, NULL ) ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> name <S2SV_blank> \\""%s\\"""", name ) ; ioerror ( ""invalid <S2SV_blank> default"" ) ; return 1 ; } <S2SV_ModEnd> parse_service_option ( CMD_PRINT_DEFAULTS",0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,<S2SV_ModStart> ; if (! new_iv_set && <S2SV_ModStart> ; if (! new_iv_set &&,0
336,<S2SV_ModStart> ; } } if ( 0!= ps_dec -> u4_num_bytes_consumed ) { <S2SV_ModStart> = 0 ; },0
337,<S2SV_ModStart> <S2SV_null> <S2SV_null> static const <S2SV_ModStart> item ) { const char * ptr = <S2SV_ModEnd> print_string_ptr ( item <S2SV_ModStart> valuestring ) ; if ( ptr == NULL ) return NULL ; return ptr ;,0
338,<S2SV_ModStart> -> iface -> codec <S2SV_ModEnd>. encode ( <S2SV_ModStart> -> iface -> codec <S2SV_ModEnd>. encode (,0
339,"<S2SV_ModStart> ) ; } else if ( arg1 == 3 ) { win_maximise ( - 2 ) ; win_set_geom ( 0, - 1, - 1, 0 ) ; } else if ( arg1 == 1 ) { win_maximise ( 1 ) ; win_set_geom ( 0, - 1, - 1, 0 ) ; } else if ( arg1 == 2 ) { win_maximise ( - 2 ) ; win_set_geom ( 0, - 1, - 1, 0 ) ; } else if ( arg1 == 0 ) { win_maximise ( - 1 ) ; win_set_geom ( 0, - 1, - 1, 0 ) ; } else if ( arg1 == 1 ) { win_maximise ( - 1 ) ; win_set_geom ( 0, - 1, - 1, 0 ) ; } else if ( arg1 == 2 ) { win_maximise ( - 2 ) ; win_set_geom ( 0, - 1, - 1, 0 ) ; } else if ( arg1 == 3 ) { win_maximise ( - 1 ) ; win_set_geom ( 0, - 1",0
340,<S2SV_ModStart> i < cols <S2SV_ModEnd> ; i ++,0
341,"<S2SV_ModStart> -> log ) { <S2SV_ModStart> ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Invalid <S2SV_blank> GIF <S2SV_blank> image <S2SV_blank>!\\n"" ) ; }",0
342,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",0
343,<S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; },0
344,<S2SV_ModStart> ) ) { if ( psf -> header_size < sizeof ( psf -> header ) ) { count = - 1 ; break ; },0
345,"<S2SV_ModStart> ) break ; if ( sun_info. length > image -> columns ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
346,"<S2SV_ModStart> 0 ; } if ( copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) == - 1 ) { fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; return 0 ; } <S2SV_ModStart> ; else { <S2SV_ModEnd> } _exit (",0
347,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> BLOCK_8X8 : return vpx_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> BLOCK_16X8 : return vpx_mse16x8 <S2SV_ModEnd> ; case BLOCK_8X16 <S2SV_ModStart> default : return vpx_mse8x16 <S2SV_ModEnd> ; } },0
348,<S2SV_ModStart> ) ) { if ( encoded_key_pack == NULL ) { retval = KRB5_E_INVAL ; goto error ; },0
349,"<S2SV_ModStart> flags ) ; if (! vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } <S2SV_ModStart> vb. vb2_buf <S2SV_ModEnd> ) ; if",0
350,<S2SV_ModStart> size ) { if ( size > SIZE_MAX - PREFIX_SIZE ) { zmalloc_oom_handler ( size ) ; return NULL ; },0
351,<S2SV_ModStart> & rxh -> serviceID <S2SV_ModEnd> ) && rxent,0
352,"<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len > MWIFIEX_MAX_SSID_LEN ) { mwifiex_dbg ( adapter, ERROR, ""Error: <S2SV_blank> Invalid <S2SV_blank> SSID <S2SV_blank> length <S2SV_blank> %d\\n"", req_ssid -> ssid_len ) ; return - EINVAL ; }",0
353,<S2SV_ModStart> -> valuelen ; if ( nsbuf > ( XFS_ATTR_FORK / sizeof ( * sbuf ) ) ) { error = - EFSCORRUPTED ; break ; },0
354,"<S2SV_ModStart> struct l2cap_conf_rfc rfc <S2SV_ModEnd> ; void * <S2SV_ModStart> sk ) ; rfc = { } ; <S2SV_ModStart> = L2CAP_MODE_ERTM ; if ( pi -> txwin_size > L2CAP_DEFAULT_TX_WINDOW ) { l2cap_add_conf_opt ( & ptr, L2CAP_CONF_TXWINDOW, 2, L2CAP_DEFAULT_TX_WINDOW ) ; } <S2SV_ModStart> = L2CAP_DEFAULT_MAX_RECEIVE ; if ( pi -> monitor_timeout > L2CAP_DEFAULT_MONITOR_TO ) { l2cap_add_conf_opt ( & ptr, L2CAP_CONF_MONITOR, 2, L2CAP_DEFAULT_MONITOR_TO ) ; } <S2SV_ModStart> = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO <S2SV_ModEnd> ) ; rfc <S2SV_ModStart> = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO <S2SV_ModEnd> ) ; rfc",0
355,"<S2SV_ModStart> r ) { if (! TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_WAITALL ) ) ) { <S2SV_ModEnd> ret = recv <S2SV_ModStart> MSG_WAITALL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> == EINTR ) ) ; } <S2SV_ModEnd> if ( ret",0
356,<S2SV_ModStart> ) ) { if ( u1_nal_ref_idc > IDR_SLICE_NAL ) { return ERROR_INVALID_REF_IDC ; },0
357,<S2SV_ModStart> while ( pair && * tok,0
358,"<S2SV_ModStart> * delegation, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> = 0 ; fmode <S2SV_ModEnd> &= ( FMODE_READ <S2SV_ModStart> -> type & fmode <S2SV_ModEnd> )!= open_flags <S2SV_ModStart> -> stateid, fmode <S2SV_ModEnd> ) ; ret <S2SV_ModStart>, NULL, fmode <S2SV_ModEnd> ) ; ret",0
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,"<S2SV_ModStart> * xd, int64_t <S2SV_ModEnd> * out_rate_sum, <S2SV_ModStart> * out_dist_sum ) { int i ; int64_t rate_sum = 0 ; int64_t dist_sum = 0 ; const int ref = xd -> mi [ 0 ] -> mbmi. ref_frame [ 0 ] ; unsigned int sse ; const BLOCK_SIZE bs = get_plane_block_size ( bsize, pd ) ; if ( cpi -> speed > 4 ) { int64_t rate ; int64_t dist ; int64_t square_error = sse ; int quantizer = ( pd -> dequant [ 1 ] >> 3 ) ; if ( quantizer < 120 ) rate = ( sse * ( 280 - quantizer ) ) >> 8 ; else rate = 0 ; dist = ( sse * quantizer ) >> 8 ; rate_sum += rate ; dist_sum += dist ; } else <S2SV_ModStart> == 0 ) { <S2SV_ModStart> = sse ; <S2SV_ModEnd> quantizer = ( <S2SV_ModStart> pd ) ; <S2SV_ModEnd> vp9_model_rd_from_var_lapndz ( sse <S2SV_ModStart> ; } } } <S2SV_ModStart> * out_rate_sum = <S2SV_ModEnd> rate_sum ; *",0
361,<S2SV_ModStart> } if ( pmd_trans_unstable <S2SV_ModEnd> ( pmd ),0
362,<S2SV_ModStart> { if ( index >= PAM_MAX_RESP_SIZE ) { return ( PAM_BUF_ERR ) ; } if ( <S2SV_ModStart> == NULL ) { free ( username ) ; <S2SV_ModStart> PAM_BUF_ERR ) ; },0
363,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> seg ) { vpx_read_tree <S2SV_ModEnd> ( r, <S2SV_ModStart> ( r, vpx_segment_tree <S2SV_ModEnd>, seg ->",0
364,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",1
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,<S2SV_ModStart> depth ++ ; if ( depth > MAXDEPTH ) return ( NULL ) ;,0
367,<S2SV_ModStart> ERROR_INVALID_LENGTH ; } if ( length < 8 ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_FAILURE ; } <S2SV_ModStart> length ) ; if ( length > ( ETH_MAX_FRAME_SIZE + 8 ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_FAILURE ; } <S2SV_ModStart> length ) ; if ( length < sizeof ( Ksz8851TxHeader ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_FAILURE ; } <S2SV_ModStart> RXQCR_SDA ) ; if ( length < sizeof ( Ksz8851TxHeader ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_FAILURE ; } <S2SV_ModStart> length ) ; if ( length > ( ETH_MAX_FRAME_SIZE + 8 ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_FAILURE ; } <S2SV_ModStart> RXQCR_SDA ) ; if ( length < sizeof ( Ksz8851TxHeader ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_FAILURE ; },0
368,<S2SV_ModStart> ( ) ; mono_attach_maybe_stop ( ) ;,0
369,"<S2SV_ModStart>, x_e, x_f, n10, n20, n30, n01, n11, n21, n31 ; WORD32 n12, n22, n32, n03, n13, n23, n33 ; WORD32 n0, j0 ; WORD32 * x2, * x1, * y1, * y2, * y3 ; WORD32 * x0, * y0, * y2, * y3 ; x0 = ptr_x ; x2 = ptr_y ; y2 = ptr_y + ( WORD32 ) npoints ; x3 = ptr_x + ( WORD32 ) npoints ; x_4 = * x0 ++ ; x_5 = * x0 ++ ; x_6 = * x0 ++ ; x_7 = * x0 ++ ; n10 = x_0 + x_2 ; n01 = x_1 + x_3 ; n20 = x_1 + x_2 ; n21 = x_1 - x_3 ; n22 = x_0 - x_2 ; n12 = x_4 + x_6 ; n13 = x_5",0
370,<S2SV_ModStart> ; if ( pmd_none_or_clear_bad ( pmd ) ) { if ( <S2SV_ModStart> ) continue ; },0
371,"<S2SV_ModStart>, frames ; <S2SV_ModEnd> if ( argc <S2SV_ModStart> ""Incorrect <S2SV_blank> parameters:\\n"" ) ; fprintf ( stderr, ""usage: <S2SV_blank> %s <S2SV_blank> <file> <S2SV_blank> <output <S2SV_blank> file>\\n"", argv [ 0 ] ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( argv [ 2 ], & width, & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; fprintf ( stderr, ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; return 1 ; } if (! parse_dim ( argv [ 3 ], & target_width, & target_height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; fprintf ( stderr, ""Invalid <S2SV_blank> parameters: <S2SV_blank> <width> <S2SV_blank> <height>\\n"" ) ; return 1 ; } fpin = fopen ( fin, ""rb"" ) ; if ( fpin == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> read\\n"", fin ) ; fprintf ( stderr",0
372,"<S2SV_ModStart> num_fields ) { <S2SV_ModEnd> _Py_IDENTIFIER ( _attributes <S2SV_ModStart> i, result <S2SV_ModEnd> ; PyObject *",0
373,<S2SV_ModStart> struct vpx_codec_alg_priv * * <S2SV_ModStart> sizeof ( struct vpx_codec_alg_priv_t <S2SV_ModEnd> ) ) ; <S2SV_ModStart> -> priv = <S2SV_ModEnd> priv -> base <S2SV_ModStart> enc ) { enc_cfg_t * cfg = & ctx -> priv -> alg_priv -> cfg ; <S2SV_ModStart> config. enc -> <S2SV_ModEnd> cfg ; } <S2SV_ModStart> ++ ) ; enc_cfg_t * <S2SV_ModStart> i ]. enc_cfg ; priv -> vp8_cfg = & cfg -> <S2SV_ModEnd> cfg ; priv,0
374,<S2SV_ModStart> ++ ; } <S2SV_ModEnd> pixel -> freq,0
375,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx ->,0
376,"<S2SV_ModStart> ) ) { if ( iinfo -> i_location. i_len > UDF_INODE_MAX_SIZE ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> inode <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large\\n"", inode -> i_ino, ""inode <S2SV_blank> %ld <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large\\n"", inode -> i_ino ) ; goto out ; }",0
377,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> ) & MISTAT_BUSY",0
378,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline <S2SV_ModStart> char * ptr, * endptr <S2SV_ModStart> * ptr ; if ( * fmt == '\\0' ) return 1 ; endptr = ptr ; if ( endptr == fmt ) return 1 ; ptr = endptr ; if ( * ptr == '\\0' ) return 1",0
379,<S2SV_ModStart> DefragIPv6TooLargeTest ) ; # if CONFIG_IPV6_DEFINE_IPV6_NOT_USED,0
380,<S2SV_ModStart> ; if ( object_length > 0 &&,0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,<S2SV_ModStart> p_sys -> b_auto_field_coding && p_sys -> p_schro -> p_frame_state == SCHRO_FRAME_STATE_IDLE,0
384,<S2SV_ModStart> ; if ( bfname. len > 0 &&,0
385,<S2SV_ModStart> 4 ) ; if ( len < 4 ) return NULL ;,0
386,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
387,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * fb ; if ( ctx -> pbi -> num_channels > VPX_MAX_CHANNELS ) { return VPX_CODEC_INVALID_PARAM ; } <S2SV_ModStart> * fb ; if ( <S2SV_ModStart>, & fb )!= VPX_OK ) { return VPX_CODEC_INVALID_PARAM ; } vpx_get_reference_dec ( ctx -> pbi, data -> idx, & fb",0
388,<S2SV_ModStart> ; if ( <S2SV_ModEnd> unit >= JPEG_UNIT_COUNT <S2SV_ModStart> ; if ( <S2SV_ModEnd> unit >= JPEG_UNIT_COUNT <S2SV_ModStart> ; if ( <S2SV_ModEnd> unit >= JPEG_UNIT_COUNT,0
389,"<S2SV_ModStart> expr_stmt ) ; REQ ( CHILD ( n, 0 ), testlist ) ; <S2SV_ModStart> 1 ) { node * testlist = CHILD ( n, 0 ) ; if ( TYPE ( testlist ) == testlist ) testlist = ast_for_testlist ( c, testlist ) ; else testlist = ast_for_expr ( c, testlist ) ; <S2SV_ModStart> ( e, testlist -> kind == Testlist_kind? LINENO ( n ) : LINENO ( n ), n -> n_col_offset, n -> n_end_lineno, n -> n_end_col_offset, c -> c_arena ) ; } else if ( TYPE ( CHILD ( n, 1 ) ) == testlist ) testlist = ast_for_testlist ( c, CHILD ( n, 1 ) ) ; else testlist = ast_for_expr ( c, CHILD ( n, 1 ) ) ; if (! testlist ) return NULL ; return Expr ( testlist, LINENO ( n ), n -> n_col_offset, n -> n_end_lineno, n -> n_end_col_offset,",0
390,"<S2SV_ModStart> int vp8_denoiser_filter_c ( <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * mc_running_avg, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * running_avg, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * sig, <S2SV_ModEnd> unsigned int motion_magnitude <S2SV_ModStart> unsigned int motion_magnitude ) { int r, c, i ; int sum_diff = 0 ; int adj_val [ 3 ] = { 3, 4, 6 } ; if ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) { for ( i = 0 ; i < 3 ; ++ i ) adj_val [ i ] += 1 ; } for ( r = 0 ; r < 16 ; ++ r ) { for ( c = 0 ; c < 16 ; ++ c ) { int diff = 0 ; int adjustment = 0 ; int absdiff = 0 ; diff = mc_running_avg_y [ c ] - sig [ c ] ; absdiff = abs ( diff ) ; if ( absdiff <= 3 ) { running_avg_y [ c ] = mc_running_avg_y [ c ] ; sum_diff += diff ; } else { if ( absdiff >= 4 && absdiff <= 7 ) adjustment",0
391,<S2SV_ModStart> ) ) { if ( ( sockPtr -> flags & NS_CONN_ESTABLISHED ) == 0u ) { <S2SV_ModStart> ) ) ; },0
392,<S2SV_ModStart> ret = 0 ; if ( xtregs -> cp0. cp0_epc == XTENSA_CP_UNKNOWN ) return - EINVAL,0
393,"<S2SV_ModStart> size ) ; if ( message -> length == 0 ) { osLog ( LOG_WARNING, ""Error <S2SV_blank> reading <S2SV_blank> from <S2SV_blank> IP <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> queue <S2SV_blank> item <S2SV_blank> %p\\n"", queueItem ) ; error = ERROR_TIMEOUT ; }",0
394,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" <S2SV_ModStart> cg_item ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
395,"<S2SV_ModStart> int error ; int old_block = EXT2_I ( inode ) -> i_block_group ; <S2SV_ModStart> new_bh ) ; new_block = <S2SV_ModStart> ext2_xattr_cache_insert ( new_bh, old_block",0
396,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
397,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
398,"<S2SV_ModStart>, 0, PERF_OUTPUT_DEFAULT_FLAGS <S2SV_ModEnd> ) ; if",0
399,"<S2SV_ModStart> char * ) MagickAllocateQuantumMemory <S2SV_ModEnd> ( imsx * <S2SV_ModStart> ) ; } if ( ( void ) ResetQuantumMemory ( imbuf, 1 )!= MagickFalse ) { return ( MagickFalse ) ; }",0
400,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vpx_ref_frame_t * ) ; VPxWorker * worker = ( VPxWorker * ) ctx -> worker <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; if ( worker -> frame_type == VPX_FRAME_WORKAROUND ) { <S2SV_ModStart> sd ) ; } else { return VPX_CODEC_INVALID_PARAM ; }",0
401,<S2SV_ModStart> ) ; } if ( u1_num_mbs == 0 ) { ps_dec -> u1_slice_start = 0 ; },0
402,<S2SV_ModStart> ; UWORD32 u4_x_dst_offset <S2SV_ModEnd> = 0 ; <S2SV_ModStart> ) ; else { <S2SV_ModStart> ps_dec ) ; },0
403,"<S2SV_ModStart> VP9_LAST_FLAG ) { int i ; <S2SV_ModStart> * const cfg ; for ( i = 0 ; i < cm -> num_frame_bufs ; i ++ ) { YV12_BUFFER_CONFIG * const frame_buf = <S2SV_ModEnd> cm -> frame_bufs <S2SV_ModStart> ]. buf ; if ( frame_buf -> flags & YV12_FLAG_FLAG_DECODED ) { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Invalid <S2SV_blank> reference <S2SV_blank> frame"" ) ; break ; } } else { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Invalid <S2SV_blank> reference <S2SV_blank> frame"" ) ; break ; } } else { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Invalid <S2SV_blank> reference <S2SV_blank> frame"" ) ; } return cm -> error. error_code <S2SV_ModEnd> ; } <S2SV_null>",0
404,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
405,"<S2SV_ModStart> TX_SIZE tx_size = <S2SV_ModEnd> get_uv_tx_size ( mbmi <S2SV_ModStart> ( mbmi ) ; const BLOCK_SIZE plane_bsize = get_plane_block_size ( bsize, pd ) ; const int num_4x4_w = num_4x4_blocks_wide_lookup [ plane_bsize ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ plane_bsize ] ; const int step = 1 << ( tx_size << 1 ) ; const int max_blocks_wide = num_4x4_w ; int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> ( 5 + pd -> subsampling_y ) ) ; if ( xd -> mb_to",0
406,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 4 ) ; <S2SV_ModEnd> src += src_stride",0
407,"<S2SV_ModStart> nrow ) { if ( row + img -> row_offset > h ) { TIFFErrorExt ( tif -> tif_clientdata, ""Error <S2SV_blank> in <S2SV_blank> gtStripSeparate(), <S2SV_blank> row <S2SV_blank> %u <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", row, h ) ; return ( 0 ) ; } <S2SV_ModStart> -> row_offset ; <S2SV_ModEnd> if ( _TIFFReadEncodedStripAndAllocBuffer <S2SV_ModStart> ) ; } if ( buf == NULL ) { if ( _TIFFReadEncodedStripAndAllocBuffer ( tif, buf, bufsize, & p0, & p1, & p2, & pa, 1 ) < 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""Error <S2SV_blank> in <S2SV_blank> gtStripSeparate(), <S2SV_blank> buf <S2SV_blank> is <S2SV_blank> NULL"" ) ; return ( 0 ) ; } }",0
408,<S2SV_ModStart> ; } } UNREACHABLE ( ) ;,0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
410,<S2SV_ModStart> num & ( 1U << number <S2SV_ModEnd> ) ) return <S2SV_ModStart> num - ( 1U <S2SV_ModEnd> << number ),0
411,<S2SV_ModStart> int w = img -> rows * <S2SV_ModStart> int h = img -> cols *,0
412,"<S2SV_ModStart> = NULL ; uint8_t * tmp_buf ; <S2SV_ModStart> uint16_t last_block_len ; uint8_t * tmp_buf ; <S2SV_ModStart> 1 ; } tmp_buf = & avp -> val [ MD5_DIGEST_LENGTH ] ; tmp_buf = & p1 [ MD5_DIGEST_LENGTH ] ; <S2SV_ModStart> md5_ctx ) ; memcpy ( tmp_buf, tmp_buf, MD5_DIGEST_LENGTH ) ; if ( tmp_buf == NULL ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } <S2SV_ModStart> ( p1, tmp_buf, MD5_DIGEST_LENGTH <S2SV_ModEnd> ) ; orig_attr_len <S2SV_ModStart> ( orig_attr_len > MD5_DIGEST_LENGTH <S2SV_ModEnd> ) { log_warn <S2SV_ModStart> ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> AVP <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank>",0
413,<S2SV_ModStart> case EVP_CTRL_AEAD_SET_IV : if ( arg < 4 ) return 0 ;,0
414,"<S2SV_ModStart>, 0, comm_event -> comm_size <S2SV_ModEnd> ) ; if",0
415,"<S2SV_ModStart>, sk ) ; if (! sk ) return - EINVAL",0
416,<S2SV_ModStart> MT_CPTYPE_PASSSALT ) { if ( cpkt. length > MT_PASSSALT_MAXLEN ) { return - 1 ; },0
417,<S2SV_ModStart> MUTT_ABORT ) { imap_cmd_step ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } else <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto,0
418,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
419,"<S2SV_ModStart> ) ) ; if ( <S2SV_ModStart>, 0 ) < 0 ) return ; memset ( line, 0, sizeof ( line ) ) ; if ( send ( gpsd_sock, line, 22, 0 ) <S2SV_ModStart> ) return ; if ( send ( gpsd_sock, line, 22, 0 ) < 22 ) return ; memset ( line, 0, sizeof ( line ) ) ; if ( send ( gpsd_sock, line, 22, 0 ) < 22 ) return ; memset ( line, 0, sizeof ( line ) ) ; if ( recv ( gpsd_sock, line, 22, 0 ) < 22 ) return ; memset ( line, 0, sizeof ( line ) ) ; if ( send ( gpsd_sock, line, 22, 0 ) < 22 ) return ; memset ( line, 0, sizeof ( line ) ) ; if ( send ( gpsd_sock, line, 22, 0 ) < 22 ) return ; memset ( line, 0, sizeof ( line ) ) ; if ( recv ( gpsd_sock, line, 22, 0 ) < 22 ) return ; memset ( line, 0, sizeof ( line ) ) ; if ( recv ( gpsd_sock,",0
420,"<S2SV_ModStart> remainder, & rlen ) ; if ( ret ) return ret ; if ( rlen == 0 ) return ASN1_BAD_ID <S2SV_ModEnd> ; if (",0
421,"<S2SV_ModStart> * slavename ; if ( curconn -> user_type!= USER_TYPE_MACTELNET ) { syslog ( LOG_NOTICE, _ ( ""(%d) <S2SV_blank> Invalid <S2SV_blank> login <S2SV_blank> by <S2SV_blank> %s."" ), curconn -> seskey, curconn -> username ) ; abort_connection ( curconn, pkthdr, _ ( ""Login <S2SV_blank> failed, <S2SV_blank> incorrect <S2SV_blank> username <S2SV_blank> or <S2SV_blank> password\\r\\n"" ) ) ; return ; } <S2SV_ModStart> = 0 ; strlcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> 82 ) ; strlcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> password ), ""%s"", <S2SV_ModStart> curconn -> pass_salt ) ; if ( strlen ( user -> password ) + 17 > 100 ) { syslog ( LOG_NOTICE, _ ( ""(%d) <S2SV_blank> Invalid <S2SV_blank> password <S2SV_blank> or <S2SV_blank> password\\r\\n"" ), curconn -> seskey ) ; abort_connection ( curconn, pkthdr, _ ( ""Login <S2SV_blank> failed, <S2SV_blank> incorrect <S2SV_blank> username <S2SV_blank> or <S2SV_blank> password\\r\\n"" ) ) ; return ; } memcpy ( md5data + 1 + strlen ( user -> password ), <S2SV_ModStart> 16 ) ; if ( strlen ( user",0
422,"<S2SV_ModStart> ; if ( PyUnicodeCompareWithASCIIStringAndSize <S2SV_ModEnd> ( name, <S2SV_ModStart> { if ( PyUnicodeCompareWithASCIIStringAndSize <S2SV_ModEnd> ( name,",0
423,<S2SV_ModStart> off } ; if ( off > UINT32_MAX - sizeof ( buf ) ) { return - 1 ; },0
424,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
425,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
426,"<S2SV_ModStart> size_t s ; size_t r ; <S2SV_ModStart> ) ) { if ( tcount >= MAX_FUJI_ENTRY ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Too <S2SV_blank> many <S2SV_blank> entries <S2SV_blank> in <S2SV_blank> the <S2SV_blank> file"" ) ; return ; }",0
427,<S2SV_ModStart> bd_addr ) { if ( bd_addr -> bd_type!= BT_BD_ADDR_TYPE_RANDOM ) return BT_STATUS_INVALID_ARGS ;,0
428,<S2SV_ModStart> int i ; size_t avail ; size_t <S2SV_ModEnd> expect ; txid <S2SV_ModStart> 4 ) ; if ( nxip < 0 || nxip > MAX_TXID ) goto bad_format ; <S2SV_ModStart> buf -> cursor <S2SV_ModEnd> ; if (,0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> ; } ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
430,<S2SV_ModStart> ( epoll_ ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> OE_EINVAL ) ; else ret = 0 ;,0
431,"<S2SV_ModStart> ( CMD_INITIALIZE, & new_global_options. option <S2SV_ModEnd>, NULL ) <S2SV_ModStart> ( CMD_INITIALIZE, & new_service_options. option <S2SV_ModEnd>, NULL )",0
432,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_PHNUM_MIN : * ( size_t * ) val = ms -> elf_phnum_min ; return 0 ;,0
433,"<S2SV_ModStart> offset ) { struct buffer_head * bh = page_file_mapping ( page ) ; <S2SV_ModStart> EXT4_JOURNAL ( page ) ; if ( WARN_ON_ONCE ( bh -> b_state & B_IO_ERROR ) ) return ; if ( test_clear_bit ( PG_writeback_state, & bh -> b_state ) ) return ; if ( test_clear_bit ( PG_writeback_state, & bh -> b_state ) ) return ; if ( test_clear_bit ( PG_journal_data, & bh -> b_state ) ) return ; if ( test_clear_bit ( PG_journal_data, & bh -> b_state ) ) return ; if ( test_clear_bit ( PG_journal_data, & bh -> b_state ) ) return ; if ( test_clear_bit ( PG_journal_data, & bh -> b_state ) ) return ; if ( test_clear_bit ( PG_journal_data, & bh -> b_state ) ) return ; if ( test_clear_bit ( PG_journal_data, & bh -> b_state ) ) return",0
434,<S2SV_ModStart> ++ ) { if (! ( <S2SV_ModStart> + 1 ) ) ) return GF_OUT_OF_MEM,0
435,"<S2SV_ModStart> 17 ] ; unsigned char pass_salt [ 16 ] ; <S2SV_ModStart> = 0 ; strlcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart>, password, sizeof ( password ) - 1 ) ; pass_salt [ sizeof ( pass_salt ) - 1 <S2SV_ModEnd> ] = '\\0' <S2SV_ModStart> = '\\0' ; strlcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> + 1 + pass_salt, password, sizeof ( pass_salt ) - 1 <S2SV_ModEnd> ) ; md5_init <S2SV_ModStart> state ) ; memcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> + 17 ) ; memcpy ( md5sum + 1, pass_salt, sizeof ( md5sum ) - 1 )",0
436,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( Prefix,0
437,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
438,<S2SV_ModStart> ( ) ; g_hash_table_remove_all ( headers ) ;,0
439,"<S2SV_ModStart> -> y_buffer ; if ( src_ybc -> y_height > MAX_YHEIGHT ) { return ; } <S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst,",0
440,"<S2SV_ModStart> * cpi, MACROBLOCK * x, <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> left_context ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( x -> <S2SV_ModStart> pred_mv ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
441,"<S2SV_ModStart>, obj_tlen ; u_int <S2SV_ModEnd> offset ; u_int <S2SV_ModStart> ; if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""LMP <S2SV_blank> packet <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if (",0
442,"<S2SV_ModStart> mbmi, const MV <S2SV_ModEnd> mvs [ 2 <S2SV_ModStart> i ) { <S2SV_ModEnd> vp9_inc_mv ( &",0
443,"<S2SV_ModStart> ) ; } res = vpx_codec_enc_config_default ( encoder -> interface ( ), & cfg, 0 ) ; if ( res ) die_codec ( & codec, & cfg ) ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if (!",0
444,<S2SV_ModStart> entry ) ; skb_out -> ip_summed = CHECKSUM_NONE ;,0
445,<S2SV_ModStart> ) return ; if (! <S2SV_ModStart> netsnmp_mibindex_load ( ) ) { SNMP_FREE ( env_var ) ; return ; } <S2SV_ModEnd> DEBUGMSGTL ( (,0
446,"<S2SV_ModStart> { fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ], O_RDWR ) <S2SV_ModStart> 1 ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_KEY ) ) <S2SV_ModStart> EV_REL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_SYN ) ) <S2SV_ModStart> x ++ ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> ]. mapped_id )",0
447,<S2SV_ModStart> i ++ ) vp9_free_frame_buffer_ext <S2SV_ModEnd> ( & ctx,0
448,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s, <S2SV_ModStart> & 1 ) vpx_lpf_vertical_4 <S2SV_ModEnd> ( s +",0
449,"<S2SV_ModStart> krb5_error_code iakerb_alloc_context ( krb5_ctx_id_t * ctx_id <S2SV_ModEnd> ) { iakerb_ctx_id_t <S2SV_ModStart> pctx ) { krb5_ctx_id_t ctx ; krb5_error_code code ; <S2SV_ModStart> = 0 ; * ctx_id = ctx ; code = krb5_gss_init_context ( & ctx -> k5c ) ; if ( code!= 0 ) goto cleanup ; * ctx_id = ctx ; code = krb5_gss_init_context ( & ctx -> k5c ) ; if ( code!= 0 ) goto cleanup ; if ( ctx_id -> defcred!= GSS_C_NO_CREDENTIAL ) { k5_free ( ctx ) ; goto cleanup ; } code = krb5_gss_init_context ( & ctx -> k5c ) ; if ( code!= 0 ) goto cleanup ; * pctx = ctx ; ctx = k5alloc ( sizeof ( * ctx ), & code ) ; if ( ctx == NULL ) goto cleanup ; ctx -> magic = KG_IAKERB_CONTEXT ; ctx -> state =",0
450,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> bitmapDC = CreateCompatibleDC",1
451,<S2SV_ModStart> ; while ( ( <S2SV_ModStart> )!= START_CODE_PREFIX ) && ( ps_stream -> u4_offset < ps_stream -> u4_max_offset ),1
452,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { kfree ( string ) ; return - EINVAL ; } <S2SV_ModEnd> if (!",0
453,"<S2SV_ModStart> ) ) { MonoType * type_arg = mono_type_get_arg ( ( MonoType * ) imethod -> type ) ; <S2SV_ModStart>, type_arg ) ; if ( type_arg ) type_arg = type_arg",0
454,<S2SV_ModStart> ) ] ; long <S2SV_ModEnd> tmp ; if <S2SV_ModStart> count ) ) { uml_exitcode = tmp ; return count ; } <S2SV_ModEnd> tmp = simple_strtol,0
455,"<S2SV_ModStart> char * last_elem = NULL <S2SV_ModStart> size_t len ; const char * l_origin = NULL ; <S2SV_ModStart> ( ( ( strncmp ( & name [ 1 ], ""ORIGIN"", 6 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 1 ], ""PLATFORM"", 8 ) == 0 && ( len = 9 )!= 0 ) ) && ( name [ len ] == '\\0' || name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) || ( name [ 1 ] == '{' && ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 9 )!= 0 ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( len = 11 )!= 0 ) ) ) { repl = ( len == 7 || name [ 2 ] == 'O' )? ( __libc_enable_secure? NULL : l -> l_origin ) : _dl_platform ) ; if ( repl!= NULL && repl!= ( const char * ) - 1 ) { wp = __stpcpy",0
456,"<S2SV_ModStart> ) ; } if ( decInst -> numSamples < 1 ) { DEC_API_TRC ( ""H264SwDecInit# <S2SV_blank> ERROR: <S2SV_blank> numSamples <S2SV_blank> <= <S2SV_blank> 1"" ) ; return ( H264SWDEC_PARAM_ERR ) ; }",0
457,<S2SV_ModStart> drop ; } opt = & ( IPCB ( skb ) -> opt ) ;,0
458,"<S2SV_ModStart> ) break ; if ( image -> columns > GetQuantumMemorySize ( image -> columns ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
459,<S2SV_ModStart> goto errout ; if ( info -> stages > MAX_STAGES ) goto errout ;,0
460,<S2SV_ModStart> krb5_key_data * key_data ; int max_key_size = 0 <S2SV_ModStart> == NULL ) { max_key_size = 0 ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { max_key_size = 0 ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { max_key_size = 0 ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { max_key_size = 0 ; <S2SV_ModStart> goto cleanup ; },0
461,"<S2SV_ModStart> * self, int <S2SV_ModEnd> idx, PyObject <S2SV_ModStart> PyObject * value, Py_ssize_t len <S2SV_ModStart> ) ; } if ( len > self -> memo_len ) { PyErr_SetString ( PyExc_MemoryError, ""InsufficientMemory"" ) ; return - 1 ; }",0
462,<S2SV_ModStart> ] ) ; if ( nByte < 0 ) { rc = SQLITE_NOMEM ; goto out ; } <S2SV_ModStart> 1 ) ; out :,0
463,<S2SV_ModStart> filp ) { struct socket * sk = <S2SV_ModEnd> SOCKET_I ( inode <S2SV_ModStart> ( inode ) ; struct socket * sk = sk -> sk_socket ; int ret = - ENODEV ; if ( unlikely (! sk ) ) { ret = - ENODEV ; goto out ; } sock_release ( sk,0
464,"<S2SV_ModStart> * orelse, bool is_block, <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. is_block = is_block",0
465,"<S2SV_ModStart> char * name, my_bool * is_shared <S2SV_ModStart> ; if ( is_shared && ( <S2SV_ModStart> keyinfo -> key_alg!= HA_KEY_ALG_RTREE ) ) ) { if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; fn_format ( param -> temp_filename, name, """", MI_NAME_IEXT, 2 + 4 + 32 ) ; } else fn_format ( param -> temp_filename, name, """", INDEX_TMP_EXT, 2 + 4 ) ; if ( ( new_file = mysql_file_create ( mi_key_file_datatmp, fn_format ( param -> temp_filename, param -> temp_filename, """", INDEX_TMP_EXT, 2 + 4 ), 0, param -> tmpfile_createflag, MYF ( 0 ) ) ) <= 0 ) { mi_check_print_error ( param, ""Can\'t <S2SV_blank> create <S2SV_blank> new <S2SV_blank> tempfile: <S2SV_blank> \'%s\'"", param -> temp_filename ) ; DBUG_RETURN ( - 1 )",0
466,"<S2SV_ModStart> return ""Invalid <S2SV_blank> frame <S2SV_blank> length"" ; case NGHTTP2_ERR_INVALID_FRAME_SIZE : return ""Invalid <S2SV_blank> frame <S2SV_blank> size"" ; case NGHTTP2_ERR_INVALID_FRAME_SIZE_OVERFLOW : return ""Invalid <S2SV_blank> frame <S2SV_blank> size <S2SV_blank> overflow"" ; case NGHTTP2_ERR_INVALID_FRAME_SIZE_OVERFLOW : return ""Invalid <S2SV_blank> frame <S2SV_blank> size <S2SV_blank> overflow"" ; case NGHTTP2_ERR_INVALID_FRAME_SIZE_OVERFLOW : return ""Invalid <S2SV_blank> frame <S2SV_blank> size <S2SV_blank> overflow"" ; case NGHTTP2_ERR_INVALID_FRAME_SIZE_OVERFLOW_LIMIT : return ""Invalid <S2SV_blank> frame <S2SV_blank> size <S2SV_blank> overflow"" ; case NGHTTP2_ERR_INVALID_FRAME_SIZE_OVERFLOW_LIMIT : return ""Invalid <S2SV_blank> frame <S2SV_blank> size <S2SV_blank> overflow"" ; case NGHTTP2_ERR_INVALID_FRAME_SIZE_OVERFLOW_LIMIT : return ""Invalid <S2SV_blank> frame <S2SV_blank> size <S2SV_blank> overflow"" ; case NGHTTP2_ERR_INVALID_FRAME_SIZE_OVERFLOW_LIMIT : return ""Invalid <S2SV_blank> frame <S2SV_blank> size <S2SV_blank> overflow"" ; case NGHTTP2_ERR_",0
467,"<S2SV_ModStart> UINT error ; if ( <S2SV_ModStart>, eventId )!= 2 ) { WLog_ERR ( TAG, ""Failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> eventId: <S2SV_blank> %d, <S2SV_blank> length: <S2SV_blank> %d"", eventId, pduLength ) ; return ERROR_INVALID_DATA ; } if ( <S2SV_ModEnd> Stream_Read_UINT32 ( s",0
468,"<S2SV_ModStart> ) ; } if ( pData -> mqttTimeout > 0 ) { zsocket_setsockopt ( pData -> socket, ZMQ_LINGER, ( int ) pData -> linger, ( int ) pData -> mqttTimeout ) ; }",0
469,"<S2SV_ModStart> struct flowi6 fl6 ; int ret <S2SV_ModStart> daddr ) ; ret = ip6_xmit ( sk, skb, & fl6, np -> opt, np -> tclass ) ; if ( ret < 0 ) return ret ; <S2SV_ModStart> = 1 ; if ( ret < 0 ) return ret ; <S2SV_ModStart>, & fl6 <S2SV_ModEnd> ) ; return",0
470,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
471,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> UINT32 failureCode ; if (! Stream_IsEmpty ( s ) ) { <S2SV_ModStart> = NEGO_STATE_FAIL ; },0
472,<S2SV_ModStart> 0 ; int <S2SV_ModEnd> result = RLC_OK <S2SV_ModStart> m_len ) ; <S2SV_ModEnd> * p_len = <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> break ; case,0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,"<S2SV_ModStart> 8 ) ; psf = psf_open_file ( path, sfinfo ) ; if ( psf == NULL ) { sf_errno = SFE_NOMEM ; return NULL ; } ; <S2SV_ModStart> SF_PRIVATE ) ) <S2SV_ModEnd> )!= 0",0
475,"<S2SV_ModStart> void fix_interp_filter ( VP9_COMMON_CONTEXT * ctx, <S2SV_ModStart> i ] += ctx -> counts -> <S2SV_ModEnd> switchable_interp [ j",0
476,"<S2SV_ModStart> cpi ) { VP9EncoderConfig * const config = & cpi -> encoder_config ; <S2SV_ModStart> x = & config <S2SV_ModEnd> -> mb ; <S2SV_ModStart> mi_cols ) ; <S2SV_ModEnd> vp9_setup_src_planes ( x <S2SV_ModStart> ( x, config <S2SV_ModEnd> -> Source, <S2SV_ModStart> subsampling_y ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
477,"<S2SV_ModStart> hp ) ; if ( htc -> rxbuf == NULL ) { WSPR ( sp, SLT_HttpGarbage, ""Empty <S2SV_blank> HTTP <S2SV_blank> packet"" ) ; return ( retval ) ; }",0
478,"<S2SV_ModStart> define EOFOp 0x07 # define RLE_SIZE 0x08 <S2SV_ModStart> ) ) ; if ( image -> columns > GetBlobWidth ( image ) || image -> rows > GetBlobHeight ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart>. x = ReadBlobWideShort <S2SV_ModEnd> ( image ) <S2SV_ModStart>. y = ReadBlobWideShort <S2SV_ModEnd> ( image ) <S2SV_ModStart>. columns = ReadBlobWideShort <S2SV_ModEnd> ( image ) <S2SV_ModStart>. rows = ReadBlobWideShort <S2SV_ModEnd> ( image ) <S2SV_ModStart> ( count!= 3 ) || ( memcmp ( magick, ""\\122\\315"", 3 )!= 0 ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( count!= 3 ) { if ( image -> columns > GetBlobWidth ( image ) || image -> rows > GetBlobHeight ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; count = ReadBlob ( image, 3, ( unsigned char * ) magick ) ; if ( ( count!= 3 ) || ( memcmp ( magick, ""\\122\\315"", 3 )!= 0 ) ThrowReaderException ( Corrupt",0
479,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( tETH_HDR ) ),0
480,<S2SV_ModStart> -> u4_pic_offset_offset ; if ( ps_dec -> s_cur_slice -> u1_field_pic_flag == 1 ) { <S2SV_ModStart> -> u4_pic_offset_offset ; },0
481,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> * karg ; <S2SV_ModEnd> struct pci_dev * <S2SV_ModStart> pci_dev * pdev <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> ; if ( <S2SV_ModEnd> iocnum!= mpt_verify_adapter <S2SV_ModStart> iocnum ) ; <S2SV_ModEnd> return - ENODEV <S2SV_ModStart> ENODEV ; } <S2SV_ModEnd> sdev = mptctl_get_device <S2SV_ModStart> ) ) ; <S2SV_ModEnd> return - ENODEV <S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> } if ( <S2SV_ModStart> ) ) ; <S2SV_ModEnd> return - ENODEV <S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> } if (",0
482,<S2SV_ModStart> = 8 ; image -> rows_max = 3 * image -> columns ;,0
483,"<S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv",0
484,"<S2SV_ModStart> ; if ( datao + 8 > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> order = EXIF_BYTE_ORDER_INTEL ; datao += exif_get_long ( buf + datao + 8, EXIF_BYTE_ORDER_INTEL ) ; if ( <S2SV_ModStart> ; if ( <S2SV_ModEnd> datao + 2 <S2SV_ModStart> + 2 < o ) || <S2SV_ModEnd> datao + 2 <S2SV_ModStart> + 2 < o <S2SV_ModEnd> || ( datao <S2SV_ModStart> + 2 > buf_size <S2SV_ModEnd> ) { exif_log <S2SV_ModStart> ; if ( <S2SV_ModEnd> o + 12 <S2SV_ModStart> o + 12 > o ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( <S2SV_ModEnd> o + 2 <S2SV_ModStart> o + 2 > buf_size <S2SV_ModEnd> ) { exif_log <S2SV_ModStart> ; if ( <S2SV_ModEnd> o + 2 <S2SV_ModStart> o + 2 > o <S2SV_ModEnd> ) { exif_log <S2SV_ModStart> ; if ( <S2SV_ModEnd> o + 2 <S2SV_ModStart> o +",0
485,"<S2SV_ModStart> ; if (! viewfile ) { L_ERROR ( ""viewfile <S2SV_blank> not <S2SV_blank> found"", procName ) ; return 1 ; } if (",0
486,"<S2SV_ModStart> void unbind_ports ( int num_ports <S2SV_ModEnd> ) { SERVICE_OPTIONS <S2SV_ModStart> 1 ) ; if ( num_ports > MAX_PORTS ) { s_log ( LOG_ERR, ""Too <S2SV_blank> many <S2SV_blank> ports <S2SV_blank> to <S2SV_blank> unbind"" ) ; return ; } <S2SV_ModStart>. next ; if ( num_ports > MAX_PORTS ) { s_log ( LOG_ERR, ""Too <S2SV_blank> many <S2SV_blank> ports <S2SV_blank> to <S2SV_blank> unbind"" ) ; return ; } <S2SV_ModStart> service_options ) ; if ( num_ports > MAX_PORTS ) { s_log ( LOG_ERR, ""Too <S2SV_blank> many <S2SV_blank> ports <S2SV_blank> to <S2SV_blank> unbind"" ) ; return ; } <S2SV_ModStart> 0 ; } <S2SV_ModEnd> s_log ( LOG_DEBUG <S2SV_ModStart> servname ) ; <S2SV_ModEnd> CRYPTO_THREAD_unlock ( stunnel_locks",0
487,<S2SV_ModStart> void ) { if (! recovery_started ) return ;,0
488,<S2SV_ModStart> ; } } if ( hashTable [ 0 ] == ENC624J600_EHT_NONE ) { return E_NOT_SUPPORTED ; } <S2SV_ModStart> ] ) ; if ( hashTable [ 1 ] == ENC624J600_EHT_NONE ) { return E_NOT_SUPPORTED ; } <S2SV_ModStart> ] ) ; if ( hashTable [ 2 ] == ENC624J600_EHT_NONE ) { return E_NOT_SUPPORTED ; } <S2SV_ModStart> ENC624J600_REG_EHT1 ) ) ; if ( hashTable [ 1 ] == ENC624J600_EHT_NONE ) { return E_NOT_SUPPORTED ; } <S2SV_ModEnd> enc624j600WriteReg ( interface <S2SV_ModStart> ENC624J600_REG_EHT2 ) ) ; if ( hashTable [ 3 ] == ENC624J600_EHT_NONE ) { return E_NOT_SUPPORTED ; } <S2SV_ModEnd> enc624j600WriteReg ( interface <S2SV_ModStart> ENC624J600_REG_EHT3 ) ) ; if ( hashTable [ 4 ] == ENC624J600_EHT_NONE ) { return E_NOT_SUPPORTED ; } <S2SV_ModEnd> enc6,0
489,"<S2SV_ModStart> image ) ; if ( image -> size < img_offset ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
490,"<S2SV_ModStart> { WORD32 i, st_rps_idx <S2SV_ModStart> ) { WORD32 <S2SV_ModEnd> u4_num_total_curr ; ai4_num_st_curr_before <S2SV_ModStart> u4_num_total_curr ; } st_rps_idx = 0 ; <S2SV_ModStart> u4_num_st_curr_after [ u4_num_st_curr_before <S2SV_ModEnd> ] ; ai4_num_st_curr_after <S2SV_ModStart> u4_num_st_curr_after [ u4_num_st_curr_before <S2SV_ModEnd> ] ; ai4_num_lt_curr <S2SV_ModStart> u4_num_lt_curr [ u4_num_lt_curr <S2SV_ModEnd> ] ; for <S2SV_ModStart> u4_num_total_curr ; } st_rps_idx = 0 ; st_rps_idx < u4_num_st_curr_before ; st_rps_idx ++ ) { if ( st_rps_idx >= u4_num_st_curr_after ) { st_rps_idx = u4_num_st_curr_after ; ai4_num_st_curr_before [ u4_num_st_curr_after",0
491,"<S2SV_ModStart> * item, const char * name, <S2SV_ModStart> child ) { if (! name ) name = str = """" ; <S2SV_ModStart> = print_string_ptr ( name <S2SV_ModEnd> ) ; entries <S2SV_ModStart> = ret = print_value ( child, depth, fmt ) ; if ( str && ret ) len += strlen ( ret ) + strlen ( str ) + 2 + ( fmt? 2 + depth : 0 ) ; else fail = 1 ; child = child -> next ; } if (! fail ) { out = ( char * ) cJSON_malloc ( len ) ; if (! out ) fail = 1 ; } if (! fail ) { for ( i = 0 ; i < numentries ; ++ i ) { if ( names [ i ] ) cJSON_free ( names [ i ] ) ; if ( entries [ i ] ) cJSON_free ( entries [ i ] ) ; } cJSON_free ( names ) ; cJSON_free ( entries ) ; return 0 ; } * out = '{' ; ptr = out + 1 ; if ( fmt ) * ptr ++ = '\\n' ; * ptr = 0 ; for ( i = 0 ; i < numentries ; ++ i ) { if ( fmt ) for ( j =",0
492,"<S2SV_ModStart> sk ) ; if ( writable ) { unix_state_lock ( sk ) ; other = unix_peer ( sk ) ; if ( other ) { sock_poll_wait ( file, & unix_sk ( other ) -> peer_wait, wait ) ; if ( unix_recvq_full ( other ) ) writable = 0 ; } unix_state_unlock ( sk ) ; } else { <S2SV_ModStart> = 0 ; } <S2SV_ModEnd> } if (",0
493,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; outpos += strlen ( outputbuffer ) ;",0
494,<S2SV_ModStart> ( OM_uint32 ) GSS_S_DEFECTIVE_TOKEN <S2SV_ModEnd> ; return GSS_S_DEFECTIVE_TOKEN <S2SV_ModStart> buffer. length > <S2SV_ModEnd> token_wrapper_len + 14,0
495,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { vpx_ref_frame_t <S2SV_ModEnd> * frame = <S2SV_ModStart> ( args, vpx_ref_frame_t <S2SV_ModEnd> * ) ; <S2SV_ModStart> NULL ) { vpx_get_reference_enc <S2SV_ModEnd> ( ctx ->",0
496,<S2SV_ModStart> plug ) ; if ( ret ),0
497,"<S2SV_ModStart> name, int * <S2SV_ModStart> ) ) { * rep_quick = 0 ;",0
498,"<S2SV_ModStart> s } ; uECC_word_t p [ uECC_MAX_WORDS * 2 ] ; <S2SV_ModStart> # if uECC_VLI_NATIVE_LITTLE_ENDIAN <S2SV_ModEnd> p = ( <S2SV_ModStart> carry ], <S2SV_ModEnd> num_n_bits + 1",0
499,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|dao-truncated]"" <S2SV_ModEnd> ) ) ;",0
500,<S2SV_ModStart> ; } else if ( pool -> free_total == 0 ) { return ; } else <S2SV_ModStart> ) ; } pool -> free_total = new_free_total ;,0
501,"<S2SV_ModStart> tp ; { int cval = 0, meta = 0 ; if ( * cp == '\\\\' && cp [ 1 ] && index ( ""mM"", cp [ 1 ] ) && cp [ 2 ] ) { meta = 1 ; cp += 2 ; } if ( * cp == '\\\\' && cp [ 1 ] && index ( ""0123456789xXoO"", cp [ 1 ] ) && cp [ 2 ] ) { NESTABS <S2SV_ModEnd> const char hex <S2SV_ModStart> [ ] = ""00112233445566778899aAbBcCdDeEfF"" <S2SV_ModEnd> ; const char <S2SV_ModStart> * dp ; <S2SV_ModEnd> if ( * <S2SV_ModStart> == 'X' ) { <S2SV_ModStart> 2 ) ; } <S2SV_ModStart> == 'O' ) { <S2SV_ModStart> 2 ) ; } <S2SV_ModStart> '0' ) ; } <S2SV_ModStart> cp ; } <S2SV_ModEnd> } else if",0
502,"<S2SV_ModStart> char detect [ 5 <S2SV_ModEnd> ] ) { <S2SV_ModStart> ( detect, ""YUV5"" <S2SV_ModEnd>, 4 )",0
503,"<S2SV_ModStart>, * pixd, * pixc2 <S2SV_ModStart> == NULL ) { pixc2 = pixFewColorsOctcubeQuant1 ( pixs, level ) ; if ( pixc2 == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; pixc2 = pixFewColorsOctcubeQuant1 ( pixs, level ) ; if ( pixc2 == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; } <S2SV_ModEnd> cmap = pixGetColormap",0
504,<S2SV_ModStart>. vf = vpx_mse16x16 <S2SV_ModEnd> ; xd ->,1
505,<S2SV_ModStart> data ; int size = overhead ; int overhead_bytes = 16 + 4 + ( flags & MONGO_CONTINUE_ON_ERROR )? 4 : <S2SV_ModEnd> strlen ( ns <S2SV_ModStart> ) + 1 ; int overhead = overhead_bytes * sizeof ( int ),0
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NEGO_STATE_FAIL ; goto fail <S2SV_ModEnd> ; } Stream_Read_UINT8 <S2SV_ModStart> = NEGO_STATE_FINAL ; fail : return ;,0
507,"<S2SV_ModStart> i, target_bits_per_mb, bits_per_mb_at_this_q <S2SV_ModStart> i, correction_factor, frame_type <S2SV_ModStart> i, correction_factor, frame_type",0
508,<S2SV_ModStart> ; value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ ; value &= ~ TJA1101_CONFIG1_MII_MODE_MII_MASK <S2SV_ModEnd> ; tja1101WritePhyReg (,0
509,"<S2SV_ModStart> ) == VARARGS || TYPE ( CHILD ( n, i ) ) == VARARGSLIST",0
510,"<S2SV_ModStart> int dst_stride, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart>, left_col, 128 <S2SV_ModEnd> ) ; DECLARE_ALIGNED_ARRAY <S2SV_ModStart> + y ; memset <S2SV_ModEnd> ( left_col, <S2SV_ModStart>, 129, 128 <S2SV_ModEnd> ) ; if <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( right_col, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( right_col, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; mem",0
511,"<S2SV_ModStart> ++ ; } else if ( pattern [ end ] == \'""\' ) { end ++ ; while ( ( pattern [ end ]!= 0 ) && ( pattern [ end ]!= \'""\' ) ) end ++ ; }",0
512,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_mmap_lock ) ;,0
513,"<S2SV_ModStart> * cpi, VP9EncoderConfig * config, <S2SV_ModStart> -> common ; write_profile ( cm -> profile, wb ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> show_frame ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> KEY_FRAME ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; } vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; } vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; } vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; } vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; } vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; } vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; } vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; } vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
514,<S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 1 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 2 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 3 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 4 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 5 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 6 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 7 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 8 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 9 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 10 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 11 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 10 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 11 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 12 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 13 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 13 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 14 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 14 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 15 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 15 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 14 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 15 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 15 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 15 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 15 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 14 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 15 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 15 <S2SV_ModStart> ;,0
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { q = osStrchr <S2SV_ModEnd> ( p +,1
516,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
517,<S2SV_ModStart> KEY_FRAME ) { memcpy <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd ->,1
518,"<S2SV_ModStart> error_t error ; int16_t <S2SV_ModEnd> n ; uint32_t <S2SV_ModStart> ; if ( ( <S2SV_ModStart> ) & ESTAT_PKTCNT ) && ( context -> nextPacket < ENC624J600_RX_BUFFER_START ) <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT, ENC624J600_RX_BUFFER_START ) ; enc624j600WriteReg ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & n, sizeof ( uint16_t ) ) ; n = letoh16 ( n ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & status, sizeof ( uint32_t ) ) ; status = letoh32 ( status ) ; if ( ( status & RSV_RECEIVED_OK )!= 0 ) { n = MIN ( n, ENC624J600_MAX_FRAME_SIZE ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) &",0
519,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv ) { VALUE klass = rb_ary_search ( rb_ary_get ( argc, 1 ), RSTRING_TYPE ( argc ) ) ; <S2SV_ModEnd> xmlSchemaPtr schema ; <S2SV_ModStart> xmlSchemaPtr schema ; VALUE content = rb_ary_search ( rb_ary_get ( argc, 2 ), RSTRING_TYPE ( argc ) ) ; <S2SV_ModStart> = xmlSchemaNewMemParserCtxt ( content <S2SV_ModEnd>, ( int <S2SV_ModStart> ( content ) <S2SV_ModEnd> ) ; VALUE <S2SV_ModStart> errors ) ; rb_iv_set ( rb_schema, ""@content"", content ) ;",0
520,<S2SV_ModStart> ) ; } if ( strlen ( config_arg ) > 0 ) { <S2SV_ModStart> = config_arg ; },0
521,<S2SV_ModStart> 2 ] ; if ( x + 4 * state -> xsize > state -> ysize - 3 ) return - 1 ; <S2SV_ModStart> 2 ] ; if ( x + 4 * state -> xsize > state -> ysize - 3 ) return - 1 ;,0
522,<S2SV_ModStart> err = - <S2SV_ModEnd> EALREADY ; if,0
523,<S2SV_ModStart> POLL_IN ) ; <S2SV_ModEnd> perf_event_wakeup ( handle,0
524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> len, wchar_t * <S2SV_ModStart> * s && ( len > 0 ) <S2SV_ModEnd> ) { if <S2SV_ModStart> ; if ( len > PLANE_SIZE ) { return - EINVAL ; } if ( <S2SV_ModStart> PLANE_SIZE ) { return - EINVAL ; } <S2SV_ModStart> PLANE_SIZE ) { return - EINVAL ; } <S2SV_ModStart> SURROGATE_BITS ) ) ; if ( len > SIZE_MAX - size ) return - EINVAL <S2SV_ModStart> } else { return - EINVAL <S2SV_ModEnd> ; } s <S2SV_ModStart> } else { return <S2SV_ModEnd> * s ++ <S2SV_ModStart> s ++ ; <S2SV_ModEnd> } } return",0
525,"<S2SV_ModStart> EPROTONOSUPPORT ) { if ( as_console ) { sleep ( 2 ) ; } <S2SV_ModStart> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" <S2SV_ModEnd> ) ; }",0
526,"<S2SV_ModStart> -> nicContext ; if ( ( context -> rxBuffer == NULL ) || ( context -> rxBuffer -> length > ETH_MAX_FRAME_SIZE ) ) { return ERROR_INVALID_PACKET ; } <S2SV_ModStart> ( status & ( RXFHSR_RXFV | RXFHSR_RXCE ) ) == 0 ) { if ( ( status & ( RXFHSR_RXMR | RXFHSR_RXFTL | RXFHSR_RXRF | RXFHSR_RXCE ) ) == 0 ) { return ERROR_INVALID_PACKET ; } if ( ( status & RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & RXFHSR_RXMR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & RXFHSR_RXFTL | RXFHSR_RXRF | RXFHSR_RXCE <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( interface, KSZ8851_RXFDPR, RXFDPR_RXFPAI <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_RXQCR",0
527,"<S2SV_ModStart> ast_for_funcdef_impl ( struct compiler * c, const node * n, asdl_seq * decorator_seq, int is_async ) { identifier name ; arguments_ty args ; asdl_seq * body ; expr_ty returns = NULL ; int name_i = 1 ; node * tc ; string type_comment = NULL ; if ( c -> c_feature_version < 5 ) { ast_error ( c, n, ""Async <S2SV_blank> functions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.5 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } REQ ( n, funcdef ) ; name = NEW_IDENTIFIER ( CHILD ( n, name_i ) ) ; if (! name ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i ), 0 ) ) return NULL ; args = ast_for_arguments ( c, CHILD ( n, name_i + 1 ) ) ; if (! args ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 2 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name",0
528,<S2SV_ModStart> int i ; if ( mm_count_vmid ( mm ) >= MM_ANONPAGES ) return ;,0
529,"<S2SV_ModStart> ; if ( 0!= ptr_check_result ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } if (",0
530,"<S2SV_ModStart> ) ) { if (! hal_set_mode ( callbacks_get_adapter_struct ( ), hal_MODE_ADB ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> set <S2SV_blank> adb <S2SV_blank> mode.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; }",0
531,<S2SV_ModStart> 0 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif <S2SV_ModStart> row ++ ) <S2SV_ModEnd> for ( col <S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif,0
532,<S2SV_ModStart> len < needed ||! nl,0
533,<S2SV_ModStart> ) break ; if ( quantum_info -> quantum_type == QuantumTypeNone ) { quantum_info = ( QuantumInfo * ) ( ( ( ImageInfo * ) clone_info ) -> next ) ; },0
534,<S2SV_ModStart> ( bfqq ) bfq_idle_slice_timer <S2SV_ModEnd> ( bfqq ),0
535,<S2SV_ModStart> ; length += sizeof ( PRIMARY_DRAWING_ORDER_FIELD ) <S2SV_ModEnd> ; length +=,0
536,<S2SV_ModStart> ; if (! err && new_create &&! new_is_dir ) { err = - EPERM ; goto out ; } if (,0
537,"<S2SV_ModStart> int plane ; if ( xd -> plane_count > MAX_MB_PLANE ) { vpx_foreach_transformed_block_in_plane ( xd, bsize, visit, arg ) ; return ; }",0
538,"<S2SV_ModStart> * cpi, TileDataEnc * tile_data, <S2SV_ModStart> -> e_mbd ; if ( tile_data -> tile_type!= TILE_INFO_HDMI ) { return ; } <S2SV_ModStart> bsize ) ; if ( xd -> mi [ 0 ] -> mbmi. sb_type == BLOCK_NONE ) { xd -> mi [ 0 ] -> mbmi. sb_type = BLOCK_NONE ; return ; }",0
539,<S2SV_ModStart> = NULL ; reader. hrtf = NULL ;,0
540,"<S2SV_ModStart> -> ranges = safe_calloc ( 1, <S2SV_ModEnd> sizeof ( MappedRange",0
541,"<S2SV_ModStart> ; if ( flags & VP8_EFLAG_FORCE_GF ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( flags & VP8_EFLAG_NO_UPD_ARF ) { if ( ctx -> cpi -> cpi_flags & VP8_CPI_FLAG_NO_UPD_ARF ) { if ( ctx -> cpi -> cpi_flags & VP8_CPI_FLAG_NO_UPD_ARF ) { vp8_use_as_reference ( ctx -> cpi, 7 ) ; } else { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_ALTR_FRAME ; vp8_use_as_reference ( ctx -> cpi, ref ) ;",0
542,<S2SV_ModStart> ) ; } if ( quantum_info -> quantum_type == QuantumTypeLinear ) { quantum_info -> quantum_type = MagickFalse ; },0
543,<S2SV_ModStart> event ) ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
544,"<S2SV_ModStart> * pptr, u_int64 <S2SV_ModEnd> len ) { <S2SV_ModStart> advance ; u_int64 <S2SV_ModEnd> tlen ; const <S2SV_ModStart> case BGP_ATTR_TYPE_IPV4 : if ( tlen < 4 ) goto trunc ; <S2SV_ModStart> case BGP_ATTR_TYPE_IPV6 : if ( tlen < 4 ) goto trunc ; <S2SV_ModStart> case BGP_ATTR_TYPE_IPV6 : if ( tlen < 4 ) goto trunc ; <S2SV_ModStart> case BGP_ATTR_TYPE_IPV6 : if ( tlen < 4 ) goto trunc ; <S2SV_ModStart> case BGP_ATTR_TYPE_IPV6 : if ( tlen < 4 ) goto trunc ; <S2SV_ModStart> case BGP_ATTR_IPV6_IPV6 : if ( tlen < 4 ) goto trunc ; <S2SV_ModStart> case BGP_ATTR_IPV6_IPV6 : if ( tlen < 4 ) goto trunc ; <S2SV_ModStart> case BGP_ATTR_IPV6_IPV6 : if ( tlen < 4 ) goto trunc ; <S2SV_ModStart> case BGP_ATTR_IPV6_IPV6 : if ( tlen < 4 ) goto trunc ; <S2SV_ModStart> case BGP_ATTR_IPV6_IPV6 : if ( tlen < 4 ) goto trunc ; <S2SV_ModStart> case BGP_ATTR_IPV6_IPV6_IPV6",0
545,"<S2SV_ModStart>, ""<tr><td>Runtime <S2SV_blank> status</td><td>%s</td></tr>"", ( <S2SV_ModStart> flags & Run_Run )? ""True"" : ""False"" ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Runtime <S2SV_blank> status</td><td>%s</td></tr>"", ( Run. flags & Run_Run )? ""True"" : ""False"" ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Runtime <S2SV_blank> status</td><td>%s</td></tr>"", ( Run. flags & Run_Run )? ""True"" : ""False"" ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Runtime <S2SV_blank> status</td><td>%s</td></tr>"", ( Run. flags & Run_Run )? ""True"" : ""False"" ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Runtime <S2SV_blank> status</td><td>%s</td></tr>"", ( Run. flags & Run_Run )? ""True"" : ""False"" ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Runtime <S2SV_blank> status</td><td>%",0
546,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
547,<S2SV_ModStart> ) ) ; if ( strlen ( constr1 ) > sizeof ( constr2 ) ) { return false ; },0
548,"<S2SV_ModStart> ; if ( len < sizeof ( * intfc ) ) { dev_err ( ddev, ""invalid <S2SV_blank> intfc <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d\\n"", cfgno ) ; retval = - EINVAL ; goto err_free_intfc ; } if (",0
549,"<S2SV_ModStart>, 0, PERF_OUTPUT_MODE_READ <S2SV_ModEnd> ) ; if",0
550,<S2SV_ModStart> ; distortion = vpx_variance16x16 <S2SV_ModEnd> ( * (,1
551,<S2SV_ModStart> interface ) ; <S2SV_ModEnd> if ( macCompAddr <S2SV_ModStart> ) ) { <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> temp ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> temp ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart>,0
552,<S2SV_ModStart> * start ; if ( psf -> header == NULL ) return ; <S2SV_ModStart> header ) ; if ( maxlen > sizeof ( psf -> header ) - 1 ) return ; <S2SV_ModStart> + maxlen ; if ( maxlen > sizeof ( psf -> header ) - 1 ) return ; <S2SV_ModStart> = 0 ; if ( strlen ( ( char * ) psf -> header ) > sizeof ( psf -> header ) - 1 ) return ;,0
553,<S2SV_ModStart> ; else { <S2SV_ModEnd> ctx -> iface,0
554,<S2SV_ModStart> { sf -> <S2SV_ModEnd> recode_loop = ( <S2SV_ModStart> 1 ) { if ( cpi -> frame_type == VP9_FRAME_TYPE_P010 ) { if ( cpi -> frame_type == VP9_FRAME_TYPE_P010 ) { if ( cpi -> frame_type == VP9_FRAME_TYPE_P010 ) { if ( cpi -> frame_type == VP9_FRAME_TYPE_P010 ) { if ( cpi -> frame_type == VP9_FRAME_TYPE_P010 ) { if ( cpi -> frame_type == VP9_FRAME_TYPE_P010 ) { if ( cpi -> frame_type == VP9_FRAME_TYPE_P010 ) { if ( cpi -> frame_type == VP9_FRAME_TYPE_P010 ) { if ( cpi -> frame_type == VP9_FRAME_TYPE_P010 ) { if ( cpi -> frame_type == VP9_FRAME_TYPE_P010 ) { if ( cpi -> frame_type == VP9_FRAME_TYPE_P010 ) { if ( cpi -> frame_type,0
555,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ]. poll_count ),0
556,<S2SV_ModStart> int goodsize = ( <S2SV_ModStart> 2 * EXTRA_STACK ) <S2SV_ModStart> ; if ( goodsize < inuse <S2SV_ModEnd> && goodsize <,0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,<S2SV_ModStart> n ) ; if (! str ) { return NULL ; } <S2SV_ModStart> errstr ) { <S2SV_ModEnd> Py_DECREF ( type,0
559,<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> break ; } svc_ctx -> spatial_layers = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> scale_factors = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> quantizers = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> quantizers_keyframe = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> spatial_layers = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> scale_factors = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> quantizers_keyframe = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> spatial_layers = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> scale_factors = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> quantizers = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> spatial_layers = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> scale_factors = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> quantizers_keyframe = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> spatial_layers = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> scale_factors = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> spatial_layers = 0 ;,0
560,<S2SV_ModStart> ) ; } <S2SV_ModEnd> mb_index = 0,0
561,"<S2SV_ModStart> self ) { return _copy_impl ( self, 0 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
562,,1
563,<S2SV_ModStart> ) ) { if ( mysql_errno ( imp_dbh -> pmysql )!= 0 ),0
564,<S2SV_ModStart> size ) ) { <S2SV_ModStart> slot_lock ) ; return ; },0
565,<S2SV_ModStart> struct ieee_802_11_phdr phdr ; gboolean mpdu_len_set = FALSE <S2SV_ModStart> ; if ( mpdu_len_set ) { mpdu_len = 0 ; } if ( <S2SV_ModStart> ; if ( mpdu_len_set <S2SV_ModEnd> ) { if,0
566,<S2SV_ModStart> ; sh = sds_malloc <S2SV_ModEnd> ( hdrlen +,0
567,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> BYTE a_val ; BOOL got_first_row = FALSE ; <S2SV_ModStart> -> ColorLossLevel ; got_first_row = TRUE ; <S2SV_ModStart> ; } } return got_first_row ;,0
568,<S2SV_ModStart> ERR_PTR ( - ENOTSUPP <S2SV_ModEnd> ) ; *,0
569,"<S2SV_ModStart> cpi ) { <S2SV_ModEnd> RATE_CONTROL * rc <S2SV_ModStart> target = ( <S2SV_ModEnd> cpi -> oxcf <S2SV_ModStart> starting_buffer_level / 2 <S2SV_ModEnd> > INT_MAX ) <S2SV_ModStart> > INT_MAX )? INT_MAX : <S2SV_ModEnd> ( int ) <S2SV_ModStart> cpi -> oxcf -> starting_buffer_level <S2SV_ModEnd> ; } else <S2SV_ModStart> = 32 ; const <S2SV_ModStart> int kf_boost = <S2SV_ModEnd> 2 * cpi <S2SV_ModStart> cpi -> output_framerate ; if ( rc -> frames_since_key > cpi -> output_framerate / 2 ) { kf_boost = ( int ) ( kf_boost * rc -> frames_since_key / ( cpi -> output_framerate / 2 ) ) ; } target = ( ( 16 + kf_boost ) * rc -> av_per_frame_bandwidth ) >> 4 ; } return vp9_rc_clamp_iframe_target_size ( cpi, target ) <S2SV_ModEnd> ; } <S2SV_null>",0
570,"<S2SV_ModStart> TX_MODE read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> == ALLOW_32X32 ) return ALLOW_32X32 <S2SV_ModEnd> ; return tx_mode",0
571,"<S2SV_ModStart> : # line 1046 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> } # line 1046 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 1051 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1057 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1066 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1066 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 1069 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 1080 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1081 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1080 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1081 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 1070 <S2SV_ModEnd> ""re_grammar.c"" break ;",0
572,"<S2SV_ModStart> -> cpi ; MACROBLOCKD_EXT * const xd_ext = & cpi -> mb. plane [ plane ] ; <S2SV_ModStart> macroblock_plane * p <S2SV_ModEnd> ; struct macroblockd_plane <S2SV_ModStart> plane_type ; const int16_t * qcoeff = BLOCK_OFFSET ( p -> qcoeff, block ) ; const int segment_id = mbmi -> segment_id ; const int16_t * scan, * nb ; const scan_order * so ; const int ref = is_inter_block ( mbmi ) ; unsigned int ( * const counts ) [ COEFF_CONTEXTS ] [ ENTROPY_TOKENS ] = cpi -> coef_counts [ tx_size ] [ type ] [ ref ] ; vp9_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> <S2SV_ModEnd> fc. coef_probs <S2SV_ModStart> [ ref ] <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> COEFF_CONTEXTS ] = cpi -> <S2SV_ModEnd> counts. eob_branch <S2SV_ModStart> tx_size ) ; const uint8_t * const band = get_band_translate ( tx_size ) ; int aoff, loff ; txfr",0
573,<S2SV_ModStart>. pRename ; if ( pSelect -> selFlags & SF_View ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; },0
574,"<S2SV_ModStart> users ) ; if ( cb_info -> serv ) { printk ( KERN_ERR ""nfs_callback_create_svc: <S2SV_blank> create <S2SV_blank> service <S2SV_blank> failed\\n"" ) ; return ERR_PTR ( - ENOMEM ) ; }",0
575,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
576,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
577,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
578,"<S2SV_ModStart> s ) { if (! TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) ) ) { <S2SV_ModEnd> ret = send <S2SV_ModStart> 0 ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> == EINTR ) ) ; } <S2SV_ModEnd> if ( ret",0
579,"<S2SV_ModStart> = NULL ; int i = 0 ; <S2SV_ModStart> next ) { if ( strcmp ( ( const char * ) xIter -> name, XML_ATTR_ID ) == 0 ) { continue ; } else <S2SV_ModStart> ; if ( i < 3 ) { crm_error ( ""Invalid <S2SV_blank> ACL <S2SV_blank> attribute <S2SV_blank> %s"", prop_name ) ; continue ; } if ( <S2SV_ModStart> } else { int i = 0 ; <S2SV_ModStart> * path = xml_get_path_by_name ( xml, path ) ; if ( path == NULL ) { crm_error ( ""Invalid <S2SV_blank> ACL <S2SV_blank> attribute <S2SV_blank> %s"", path ) ; continue ; } <S2SV_ModEnd> crm_trace ( ""Cannot <S2SV_blank> add <S2SV_blank> new <S2SV_blank> node <S2SV_blank> %s <S2SV_blank> at <S2SV_blank> %s"" <S2SV_ModStart> ; } } i ++ ;",0
580,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> SvcInternal * get_const_svc_internal <S2SV_ModStart> NULL ; return <S2SV_ModEnd> svc_ctx -> internal,0
581,<S2SV_ModStart> ) ) { if ( Z_TYPE ( * zdata_ptr ) == IS_ARRAY ) { <S2SV_ModStart> ) ) ; },0
582,"<S2SV_ModStart> only_420 ) { int i ; <S2SV_ModStart> char buffer [ 79 <S2SV_ModEnd> ] ; int <S2SV_ModStart> -> vpx_bps = 14 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) ) { <S2SV_ModStart> -> chroma_bps = 14 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) ) { <S2SV_ModStart> -> chroma_bps = 14 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) ) { <S2SV_ModStart> -> chroma_bps = 14 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) ) { <S2SV_ModStart> -> chroma_bps = 14 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) ) { <S2SV_ModStart> -> chroma_bps = 14 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) ) { <S2SV_ModStart> -> chroma_bps = 14 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) ) { <S2SV_ModStart> -> chroma_bps = 14 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) ) { <S2SV_ModStart> -> chrom",0
583,"<S2SV_ModStart> buf ; { wizkit_addinv ( <S2SV_ModEnd> readobjnam ( buf <S2SV_ModStart> * ) 0, & zeroobj ) ; <S2SV_ModEnd> return TRUE ;",0
584,<S2SV_ModStart> ( ) { <S2SV_ModEnd> if ( read_xattrs_from_disk <S2SV_ModStart> == 0 ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( read_uids_guids <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( parse_exports_table <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( read_fragment_table <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( read_inode_table <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( no_xattrs <S2SV_ModStart> return TRUE ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
585,"<S2SV_ModStart> rule * rule, u_int flags <S2SV_ModStart> count = 0 ; env -> flags = flags <S2SV_ModStart> ; } } if ( flags & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ]!= NULL ; i ++ ) { struct envnode * node ; const char * e, * eq ; size_t len ; char keybuf [ 1024 ] ; e = strchr ( e, '=' ) ; if ( ( eq = strchr ( e, '=' ) ) == NULL || eq == e ) continue ; memcpy ( keybuf, e + 1, len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf, eq + 1 ) ; if ( RB_INSERT ( envtree, & env -> root, node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } }",0
586,"<S2SV_ModStart> -> seg ; vpx_clear_system_state <S2SV_ModEnd> ( ) ; <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> mi_cols ) ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ; } } vpx_memset ( cpi -> segmentation_map, 0, cm -> mi_rows * cm -> mi_cols ) ; vpx_memset ( cpi -> complexity_map, 0, cm -> mi_rows * cm -> mi_cols ) ; vp9_enable_segmentation ( seg ) ; vp9_clearall_segfeatures ( seg ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> frame_type, cm -> base_qindex, in_frame_q_adj_ratio [ segment ] ) ; vp9_enable_segfeature ( seg, segment, SEG_LVL_ALT_Q ) ; vp9_set_segdata ( seg, segment, SEG_LVL_ALT_Q, qindex_delta ) ; }",0
587,"<S2SV_ModStart> = make_type ( ""module"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""interactive"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""expression"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""suite"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""functiondef"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""asyncfunctiondef"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""classdef"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""delete"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""assign"" <S2SV_ModEnd>, stmt_type,",0
588,"<S2SV_ModStart> ) ; } if (! access ( log_path, F_OK ) ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> access <S2SV_blank> log <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, log_path, strerror ( errno ) ) ; is_logging = false ; return ; }",0
589,<S2SV_ModStart> ) ; } if ( m == B_PRED ) { unsigned int * const bct = is_key? b_modes : inter_b_modes ; int b = 0 ; do { ++ bct [ xd -> block [ b ]. bmi. mode ] ; } while ( ++ b < 16 ) ; },0
590,"<S2SV_ModStart> num1, num2, len <S2SV_ModStart>, * StartClean <S2SV_ModEnd> ; SetDefaults ( <S2SV_ModStart> t ++ ; len = sprintf ( outputbuffer, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"" <S2SV_ModEnd>, s, <S2SV_ModStart> t, TERMCHAR ) ; outpos += len <S2SV_ModEnd> ; if ( <S2SV_ModStart> = 1 ; len <S2SV_ModEnd> += sprintf ( <S2SV_ModStart> SUBVERSION ) ; outpos += len ; <S2SV_ModStart> ( outfile, ""%s"", outputbuffer ) ; return ( 0 ) ; } } if ( len < 1 ) { fprintf ( stderr, ""%s: <S2SV_blank> Command <S2SV_blank> %s <S2SV_blank> should <S2SV_blank> have <S2SV_blank> a <S2SV_blank> value <S2SV_blank> in <S2SV_blank> the <S2SV_blank> form: <S2SV_blank> "", axohelp, nameobject ) ; return ( - 1 ) ; } if ( outpos - outpos < len ) { fprintf ( stderr, ""%s: <S2SV_blank> Out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> output <S2SV_blank> buffer\\n"", axohelp ) ; return ( - 1 ) ; } if ( outpos - StartClean < len ) { fprintf ( stderr, ""%s: <S2SV_blank> Out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> output <S2SV_blank> buffer\\n"", axohelp ) ; return (",0
591,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lower, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { return 1 ; } if ( exists_not_none ( obj, & PyId_lower ) ) { int res ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { lower = NULL ; } if ( lookup_attr_id ( obj, & PyId_upper, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { return 1 ; } if ( tmp == Py_None ) { return 1 ; } if ( lookup_attr_id ( obj, & PyId_step, & tmp ) < 0 ) { return 1 ; } if ( tmp == Py_None ) { return 1 ; } if ( tmp == Py_None ) { return 1 ; } if ( tmp == Py_None ) { return 1 ; } if ( tmp == Py_None ) { return 1 ; } if ( tmp == Py_None ) { return 1 ; } if ( lookup_attr",0
592,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs ) <S2SV_ModStart> probs ) { vpx_write_token <S2SV_ModEnd> ( w,",0
593,"<S2SV_ModStart> int err ; u32 classid ; <S2SV_ModStart> ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; classid = iter -> band ; <S2SV_ModStart> return - ENOMEM ; match -> band = knode -> res -> classid ; err = nfp_abm_update_band_map ( alink ) ; if ( err ) goto err_delete <S2SV_ModStart> match ) ; err = - EOPNOTSUPP ; goto err_delete <S2SV_ModEnd> ; } <S2SV_null>",0
594,<S2SV_ModStart> ) ; } if ( global -> pass_mode == VPX_ENC_MODE_HIGHBITDEPTH ) { if (! stream -> config. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. cfg. g_pass = VPX_,0
595,"<S2SV_ModStart> ; if ( flatpak_check_export_file_version ( metadata, previous_ids, error ) ) goto out ; if (",0
596,"<S2SV_ModStart> data_end ) { const <S2SV_ModStart>, tile_col ; <S2SV_ModEnd> uint8_t * end <S2SV_ModStart> end = NULL <S2SV_ModEnd> ; assert ( <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> aligned_cols ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> aligned_cols ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) * aligned_cols ) ; pbi -> tile_buffer_size = tile_rows * tile_cols * tile_rows * cm -> mi_cols * 2 * cm -> log2_tile_rows * cm -> log2_tile_cols ; pbi -> tile_buffer_offset = 0 ; pbi -> tile_buffer_end = data_end ; pbi -> tile_buffer_offset += tile_rows * tile_cols ; pbi -> tile_buffer_end_offset = data_end ; pbi -> tile_buffer_size = tile_rows * tile_cols * tile_rows * cm -> mi_cols ; pbi -> tile_buffer_offset = tile_rows * cm -> log2_tile_rows * cm -> log2_tile_cols ; pbi -> tile_buffer_offset = tile_cols * cm -> mi_cols ; pbi -> tile",0
597,<S2SV_ModStart> vp9_decoder_create ( const VP9EncoderConfig <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> pbi ) ) ; const VP9EncoderConfig <S2SV_ModEnd> * const cm <S2SV_ModStart> = 1 ; vpx_init_dec <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ) ) ; vpx_init_rtcd ( ) ; <S2SV_ModStart> current_video_frame = 0 ; cm -> ref_frame_map_size = 0 ; cm -> ref_frame_map = NULL <S2SV_ModStart> = 0 ; cm -> ref_frame_map = NULL ; <S2SV_ModStart> = 1 ; cm -> ref_frame_map_size = 0 ; <S2SV_ModStart> = 0 ; cm -> ref_frame_map = NULL ; <S2SV_ModStart> = 0 ; cm -> ref_frame_map_size = 0 ; <S2SV_ModStart> = 0 ; cm -> ref_frame_map_size = 0 ; <S2SV_ModStart> = 0 ; cm -> ref_frame_map_size = 0 ; cm -> ref_frame_map = NULL ; cm -> ref_frame_map = NULL ; cm -> ref_frame_map_size = NULL ; cm -> ref_frame_map_size = 0 ; cm -> ref_frame_map_size = NULL ; cm -> ref_frame_map_size = 0 ;,0
598,"<S2SV_ModStart> dref ) { GF_LOG_DEBUG <S2SV_ModEnd> ( GF_LOG_ERROR, <S2SV_ModStart> GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf <S2SV_blank> [%s]\\n"", GF_ISOM_TYPE_STRING <S2SV_ModEnd> ) ) ;",0
599,<S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> -> opt ; <S2SV_ModEnd> cipso_v4_delopt ( &,0
600,"<S2SV_ModStart> tokens, const vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> do { const vpx_tree_index <S2SV_ModEnd> j = tree",1
601,"<S2SV_ModStart> ( img ) { <S2SV_ModStart> img ) ; if ( res!= VPX_CODEC_OK ) { ctx -> base. err_detail = ""Invalid <S2SV_blank> image."" ; return res ; } }",0
602,"<S2SV_ModStart> { ret = get_tag_ext <S2SV_ModEnd> ( asn1,",0
603,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> in ) { memset ( s, 0, 16 ) ; memset ( x, 0, 16 ) ; memset ( u, 0, 32 ) ; memset ( v, 0, 32 ) ; memcpy ( in, s, 16 ) ; memcpy ( in + 16, s + 16, 16 ) ; memcpy ( in + 16, s + 16, 16 ) ; memcpy ( in + 16, s + 16, 16 ) ; memcpy ( in + 16, v + 16, 16 ) ; memcpy ( in + 16, s + 16, 16 ) ; memcpy ( in + 16, s + 16, 16 ) ; memcpy ( in + 16, v + 16, 16 ) ; memcpy ( in + 16, s + 16, 16 ) ; memcpy ( in + 16, s + 16, 16 ) ; memcpy ( in + 16, s + 16, v + 16, 16 ) ; memcpy ( in + 16, s + 16, 16 ) ; memcpy ( in + 16",0
604,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int64_t <S2SV_ModEnd> frame_max_bits ( const <S2SV_ModStart> occf ) { int64_t <S2SV_ModEnd> max_bits = ( <S2SV_ModStart> max_bits = ( int64_t ) ( <S2SV_ModStart> rc -> av_per_frame_bandwidth ),0
605,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
606,"<S2SV_ModStart> * cpi, <S2SV_ModEnd> int mi_row, <S2SV_ModStart> BLOCK_SIZE bsize ) { VP9_COMMON * const cm = & cpi -> common ; MACROBLOCKD * const xd = & x -> e_mbd ; MODE_INFO * * mi_8x8 = xd -> mi ; MB_MODE_INFO * mbmi = & mi -> mbmi ; PICK_MODE_CONTEXT * ctx = get_block_context ( x, bsize ) ; unsigned int segment_id = mbmi -> segment_id ; const int mis = cm -> mi_stride ; const int mi_width = num_8x8_blocks_wide_lookup [ bsize ] ; const int mi_height = num_8x8_blocks_high_lookup [ bsize ] ; const int skip_encode = (! output_enabled && cpi -> sf. skip_encode_frame && x -> q_index < QIDX_SKIP_THRESH ) ; if ( x -> skip_encode ) return ; if ( cm -> frame_type == KEY_FRAME ) { if ( cpi -> oxcf. tuning == VP8_TUNE_SSIM ) {",0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr_index <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr_index <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr_index <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr_index <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr_index <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr_index <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr_index <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr_index <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
608,"<S2SV_ModStart> range_max ) { int64_t value ; int64_t <S2SV_ModEnd> position, zeroes <S2SV_ModStart> position, zeroes <S2SV_ModEnd> ; char bits <S2SV_ModStart> gbc ) ; if ( ctx -> trace_enable ) { value = get_bits_long ( gbc, 0 ) ; if ( value < range_min || value > range_max ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""%s <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range: <S2SV_blank> "" ""%"" PRIu64 "", <S2SV_blank> but <S2SV_blank> must <S2SV_blank> be <S2SV_blank> in <S2SV_blank> [%"" PRIu64 "",%"" PRIu64 ""].\\n"", name, value, range_min, range_max ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> 1 ) { value = MAX_UINT_BITS ( 32 ) ; if ( value > range_max ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""%s <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range: <S2SV_blank> "" ""%"" PRIu64 "", <S2SV_blank> but <S2SV_blank> must <S2SV_blank> be <S2SV_blank> in <S2SV_blank> [%"" PRIu64 "",%"" PRIu64 ""].\\n"", name, value, range_min, range_max ) ; return AVERROR_INVALIDDATA ;",0
609,"<S2SV_ModStart> || strchr ( ""!#$%&\'*+-.^_`|^"" <S2SV_ModEnd>, c ) <S2SV_ModStart> || strchr ( ""!#$%&\'*+-.^_`|^"" <S2SV_ModEnd>, c )",0
610,"<S2SV_ModStart>, packet -> http_session_type. ptr = NULL, packet -> http_session_type. len = 0, packet ->",0
611,"<S2SV_ModStart> { q = QueueAuthenticPixels_Internal <S2SV_ModEnd> ( image, <S2SV_ModStart> x ), Max <S2SV_ModEnd> ( 4, <S2SV_ModStart> y ), 0, <S2SV_ModStart> ; } } if ( image -> matte == MagickFalse ) return MagickFalse ;",0
612,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL ) <S2SV_ModStart> EINTR ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL )",0
613,<S2SV_ModStart> action ) { if ( w < 0 || h < 0 || w > 1 || h > 1 || h > 1 || w > 100 || h > 100 || w < 0 || h > 100 || h > 100 || w > 100 || h > 100 || w > 100 || h > 100 || h > 100 || w > 100 || h > 100 || w > 100 || h > 100 || h > 100 || w > 100 || h > 100 || w > 100 || h > 100 || h > 100 || h > 100 || h > 100 || w > 100 || h > 100 || h > 100 || w > 100 || h > 100 || w > 100 || h > 100 || w > 100 || h > 100 || w > 100 || h > 100 || w > 100 || h > 100 || h > 100 || w > 100 || h > 100 || w > 100 || h > 100 || w > 100 || h > 100 || w > 100 || h > 100 || h > 100 || w > 100 || h > 100 || h > 100 || w > 100 || h > 100 || w > 100 || h > 100 || h > 100 || w > 100 || w > 100 || w > 100 || h > 100 ||,0
614,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; if ( outpos >= outputbuffer ) { printf ( ""Error: <S2SV_blank> outbuffer <S2SV_blank> too <S2SV_blank> large\\n"" ) ; exit ( EXIT_FAILURE ) ; }",0
615,"<S2SV_ModStart> ( AUTODETECT_TAG, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU <S2SV_blank> 0x%04X"", autodetectRspPdu -> sequenceNumber <S2SV_ModEnd> ) ; Stream_Read_UINT32",0
616,<S2SV_ModStart> -> tok ; if ( cm -> mb_cols > 1 ) { <S2SV_ModStart> -> tok ; } <S2SV_ModStart> -> tok ; if ( cm -> mb_cols > 1 ) { <S2SV_ModStart> -> tok ; },0
617,<S2SV_ModStart> -> b_multithreaded_rd ) { <S2SV_ModStart> mb_rows ) ; },0
618,<S2SV_ModStart> 0 ) { xWantedSize = ( xWantedSize + xHeapStructSize ) & ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; <S2SV_ModStart> 0 ) { if ( xWantedSize > xFreeBytesRemaining ) { <S2SV_ModStart> ) ) ; } else { mtCOVERAGE_TEST_MARKER ( ) ; },0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,"<S2SV_ModStart> s ) { <S2SV_ModEnd> uint16 left, <S2SV_ModStart>, Debug, ""%s()\\n"" <S2SV_ModEnd>, __func__ ) <S2SV_ModStart> ++ ) { in_uint8s ( s, 2 ) ; in_uint16_le ( s, size ) ; ui_paint_bitmap ( left, top, cx, cy, width, height, bmpdata ) ; xfree ( bmpdata ) ; continue ; } if ( compress & 0x400 ) { size = bufsize ; } else { size = bufsize ; } if ( compress & 0x400 ) { size = bufsize ; } else { size = size ; } if ( compress & 0x400 ) { size = bufsize ; } else { size = size ; } if ( compress & 0x400 ) { size = bufsize ; } else { size = size ; } if ( compress & 0x400 ) { size = bufsize ; } else { size = size ; } if ( compress & 0x400 ) { size = bufsize ; } else { size = size ; } ui_paint_bitmap ( left, top, cx, cy, width, height, bmpdata ) ; xfree ( bmpdata ) ;",0
621,"<S2SV_ModStart> } else { ovalue = 0 ; <S2SV_ModStart> ovalue ) ; if ( ovalue == 0 ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Missing <S2SV_blank> ErrorLog <S2SV_blank> option"" ) ; return MPR_ERR_BAD_SYNTAX ; }",0
622,"<S2SV_ModStart> tx_size, vp9_coeff_stats coef_stats <S2SV_ModEnd> ) { vp9_coeff_probs_model <S2SV_ModStart> tx_size ] ; vpx_coeff_count <S2SV_ModEnd> * coef_counts = <S2SV_ModStart> l ) { vpx_tree_probs_from_distribution <S2SV_ModEnd> ( vp9_coef_tree, <S2SV_ModStart> m ) coef_probs [ i ] [ j ] [ k ] [ l ] [ 0 ] [ 1 ] = get_binary_prob ( coef_branch_ct [ i ] [ j ] [ k ] [ l ] [ m ], coef_counts [ i ] [ j ] [ k ] [ l ] [ 0 ] [ 1 ] ) ; } } } } } for ( i = 0 ; i < PLANE_TYPES ; ++ i ) { for ( j = 0 ; j < REF_TYPES ; ++ j ) { for ( k = 0 ; k < BAND_COEFF_CONTEXTS ( k ) ; ++ k ) { for ( l = 0 ; l < BAND_COEFF_CONTEXTS ( k ) ; ++ l ) { vpx_tree_probs_from_distribution ( vpx_coef_tree, coef_branch_ct [ i ]",0
623,"<S2SV_ModStart> { } ; if (! access_ok ( VERIFY_WRITE, fd, ( const char * ) name, 0 ) ) return - EBADF <S2SV_ModEnd> ; r =",0
624,"<S2SV_ModStart> int su3000_frontend_attach ( struct dvb_usb_encoder_state * bs ) { struct <S2SV_ModStart> dvb_usb_adapter * d = & bs -> d ; <S2SV_ModEnd> u8 obuf [ <S2SV_ModStart> 0 } ; int ret = 0 ; if ( bs -> bulk_out_avail == 0 ) { ret = - EBUSY ; goto out ; } if ( bs -> bulk_in_avail == 1 ) { ret = - EBUSY ; goto out ; } if ( dvb_usb_generic_rw ( d -> dev, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; ret = 0 ; if ( bs -> bulk_out_avail == 0 ) { ret = - EBUSY ; goto out ; } if ( dvb_usb_generic_rw ( d -> dev, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; ret = 0 ; if ( dvb_usb_generic_rw ( d -> dev, obuf, 3, ibuf, 1,",0
625,"<S2SV_ModStart> * iface, vpx_codec_enc_config_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & V",0
626,"<S2SV_ModStart> stride, int mv_row, int mv_col, uint8_t * pred, struct scale_factors * scale, int x, int y ) { const int which_mv = 0 ; const MV mv = { mv_row, mv_col } ; const InterpKernel * const kernel = <S2SV_ModEnd> xd -> mi <S2SV_ModStart> mbmi. interp_filter <S2SV_ModEnd> ; enum mv_precision <S2SV_ModStart> MV_PRECISION_Q3 ; } vpx_build_inter_predictor <S2SV_ModEnd> ( y_mb_ptr, <S2SV_ModStart> y ) ; vpx_build_inter_predictor <S2SV_ModEnd> ( u_mb_ptr, <S2SV_ModStart>, uv_stride, <S2SV_ModEnd> & pred [ <S2SV_ModStart> y ) ; vpx_build_inter_predictor <S2SV_ModEnd> ( v_mb_ptr, <S2SV_ModStart>, uv_stride, <S2SV_ModEnd> & pred [ <S2SV_ModStart> y ) ; vpx_build_inter_predictor <S2SV_ModEnd> ( v_mb_ptr,",0
627,"<S2SV_ModStart> = TRUE ; if ( strlen ( origbuf ) >= 4 * BUFSZ ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> too <S2SV_blank> long <S2SV_blank> \\""%s\\"""", origbuf ) ; return FALSE ; }",0
628,"<S2SV_ModStart> * cJSON_CreateFloatArray ( const <S2SV_ModStart> * numbers, size_t <S2SV_ModEnd> count ) { <S2SV_ModStart> i ) { if (! ( <S2SV_ModStart> i ] ) ) ) return 0",0
629,"<S2SV_ModStart> data_end ) { const <S2SV_ModStart> int num_workers = <S2SV_ModEnd> pbi -> oxcf <S2SV_ModStart> occf. max_threads <S2SV_ModEnd> ; TileBuffer tile_buffers <S2SV_ModStart> tile_cols ) ; const int num_threads_max = pbi -> oxcf. max_threads ; <S2SV_ModStart> tile_cols ) ; const int num_workers_max = pbi -> oxcf. max_threads ; <S2SV_ModStart> tile_buffers [ 1 << 6 ] ; const int num_workers_max = pbi -> oxcf. max_threads ; int i ; CHECK_MEM_ERROR ( cm, pbi -> tile_workers, vpx_malloc ( num_workers_max <S2SV_ModEnd> * sizeof ( <S2SV_ModStart> -> num_tile_workers ; worker -> hook = ( VP9WorkerHook ) tile_worker_init <S2SV_ModEnd> ; CHECK_MEM_ERROR ( <S2SV_ModStart> n ) { worker -> <S2SV_ModEnd> hook = ( <S2SV_ModStart> ) ; } pbi -> num_tile_workers ++ ;",0
630,"<S2SV_ModStart> * 0x101 ; if ( order < 0 || order > 0x101 ) { printf ( ""Invalid <S2SV_blank> minolta <S2SV_blank> order <S2SV_blank> value\\n"" ) ; return ; }",0
631,"<S2SV_ModStart> -> common ; VP9_COMP * rc = & cpi -> rc ; <S2SV_ModStart> = SEGMENT_DELTADATA ; seg -> max_delta = SEGMENT_DELTADATA ; <S2SV_ModStart> ( ) ; if ( cpi -> rc. is_src_frame_alt_ref ) { vp9_clear_system_state ( ) ; } <S2SV_ModStart> ++ ) { vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, qindex_delta ) ; vpx_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q ) ; <S2SV_ModStart> ( i = ENERGY_MIN ; i <= ENERGY_MAX ; i ++ ) { int qindex_delta, segment_rdmult ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; } qindex_delta = vp9_compute_qdelta ( & rc -> rc, base_q, base_q * Q_RATIO ( i ) ) ; vpx_set_segdata ( seg, SEGMENT_ID",0
632,<S2SV_ModStart> -> error_code ) { <S2SV_ModStart> : NULL ; ctx -> base. err_detail_type = error -> has_detail? VPX_ERR_NO_DETAIL : VPX_ERR_NO_DETAIL ; },0
633,"<S2SV_ModStart>, * ps_cur_poc ; if (! ps_dec -> s_cab_dec_env. pv_codec_handle ) return",0
634,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet ),0
635,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static long <S2SV_ModEnd> getnum ( const <S2SV_ModStart> int getnum ( <S2SV_ModEnd> char * * <S2SV_ModStart>, int df, int * a ) { if (! a ) return 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) return 0 <S2SV_ModEnd> ; else { <S2SV_ModStart> = 0 ; while ( isdigit ( * * fmt ) ) { if ( a == 0 ) { * a = 0 ; break ; } a ++ ; } else { * a ++ = * ( ( * fmt ) ++ ) - '0' ; } } <S2SV_ModEnd> return a ; <S2SV_ModStart> a ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
636,<S2SV_ModStart> GCSpropagate ) ; g -> gcstate = GCSpropagate ;,0
637,<S2SV_ModStart> 0 ; else { ret = <S2SV_ModEnd> - EIO ; <S2SV_ModStart> - EIO ; goto err ; },0
638,"<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } <S2SV_ModEnd> memset ( buffer <S2SV_ModStart> buffer ) ; <S2SV_ModEnd> s_write ( c",0
639,"<S2SV_ModStart> remote_connection_s * connection, int * socket_timeout <S2SV_ModStart> -> variant_opaque ; <S2SV_ModEnd> int rc = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> struct addrinfo * <S2SV_ModStart> = NULL ; * socket_timeout = 0 ; <S2SV_ModStart> = NULL ; * socket_timeout = 0 ; <S2SV_ModStart> = SOCK_RAW ; if (! * socket_timeout ) { crm_err ( ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; close ( sock ) ; return - 1 ; } <S2SV_ModStart> = SOCK_RAW ; if (! * socket_timeout ) { * socket_timeout = sock ; <S2SV_ModStart> = SOCK_RAW ; } <S2SV_ModStart> = SOCK_RAW ; if (! * socket_timeout ) { * socket_timeout = sock ; } <S2SV_ModStart> ) ) ; * socket_timeout = sock ; <S2SV_ModStart> ) ) ; * socket_timeout = sock ; <S2SV_ModStart> ) ; } * socket_timeout = sock ; <S2SV_ModStart> ) ; } * socket_timeout = sock ; <S2SV_ModStart> ) ; } * socket_timeout = sock ;",0
640,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> ; cpi -> <S2SV_ModEnd> kf_bitrate_adjustment = 0",0
641,"<S2SV_ModStart> ) ) ; if ( len < 26 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> len <S2SV_blank> %d]"", len ) ) ; return ; }",0
642,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command",0
643,"<S2SV_ModStart> Image * image, * tmp_image <S2SV_ModStart> length, padding, value, version, width ; size_t bytes_per_line ; size_t padding ; size_t <S2SV_ModEnd> value ; assert <S2SV_ModStart> ) break ; tmp_image = ( size_t ) image -> columns * image -> rows * image -> columns ; <S2SV_ModStart> ) break ; tmp_image = ( size_t ) image -> columns * image -> rows ; <S2SV_ModStart> ) break ; tmp_image = ( size_t ) image -> rows * image -> columns ; <S2SV_ModStart> ) break ; tmp_image = ( size_t ) image -> columns * image -> rows ; <S2SV_ModStart> ) break ; tmp_image = ( size_t ) image -> rows * image -> columns ; <S2SV_ModStart> ) break ; tmp_image = ( size_t ) image -> rows * image -> columns ; <S2SV_ModStart> ) break ; tmp_image = ( size_t ) image -> rows * image -> columns ; <S2SV_ModStart> ) break ; tmp_image = ( size_t ) image -> rows * image -> columns ; <S2SV_ModStart> ) break ; tmp_image = ( size_t ) image -> rows * image -> rows ;",0
644,"<S2SV_ModStart> ) ) { if (! qcc -> qccp ) { jas_eprintf ( ""cannot <S2SV_blank> create <S2SV_blank> QCD\\n"" ) ; return - 1 ; }",0
645,<S2SV_ModStart> ) ; } if (! new_modes ||! new_args ) return ;,0
646,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> - m + vpx_read_bit <S2SV_ModEnd> ( r )",1
647,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
648,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> REFERENCE_MODE mode = vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> comp_inter_prob [ ctx <S2SV_ModStart> ( REFERENCE_MODE ) vpx_read <S2SV_ModEnd> ( r,",0
649,"<S2SV_ModStart>! stream ) { <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; } <S2SV_ModStart> ( res ) { <S2SV_ModStart> ) ) ; } <S2SV_ModStart> stereo_fmt = STEREO_FORMAT_MONO <S2SV_ModEnd> ; # if",0
650,<S2SV_ModStart> ; if ( opp -> nd_opt_len < 4 ) goto trunc ; if (,0
651,<S2SV_ModStart> re_ast ) -> type_flags = 0 ; ( * re_ast ) ->,0
652,"<S2SV_ModStart> ) ) ; if ( iter -> conn -> dict -> auth_mode == AUTH_MODE_DISTRIBUTED ) { <S2SV_ModStart> 0 ) { auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found, <S2SV_blank> using <S2SV_blank> default <S2SV_blank> value <S2SV_blank> %s"", str_c ( path ), key -> key -> default_value ) ; key -> value = key -> key -> default_value ; } else { <S2SV_ModStart> 1 ; } }",0
653,<S2SV_ModStart> ; tok -> line_number = 0 ; tok ->,0
654,<S2SV_ModStart> maxBitrate ; } av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo = NULL ;,0
655,<S2SV_ModStart> ( dpbSize ) ; dpb -> picSizeInMbs = picSizeInMbs ; dpb -> dpbSize = dpbSize,0
656,<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> (! sock ||! addr ||! addrlen ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; addrlen_out = * addrlen ; } if ( addrlen_out ) { <S2SV_ModEnd> addrlen_in = * <S2SV_ModStart> = * addrlen ; addrlen_in = addrlen_out <S2SV_ModStart> ) ; } } if ( addrlen_out ) * addrlen = addrlen_out ;,0
657,,1
658,<S2SV_ModStart> FALSE ; } if (!,0
659,<S2SV_ModStart> ipv6_pinfo * np <S2SV_ModEnd> ; struct ipv6_txoptions <S2SV_ModStart> ; if ( msg -> msg_name ) { np = inet6_sk ( sk ) ; if ( <S2SV_ModStart> - EINVAL ; },0
660,"<S2SV_ModStart>, err, <S2SV_ModEnd> overlays = 0 <S2SV_ModStart>, hdr_size, j ; uint32_t falign ; uint32_t valign = 0 <S2SV_ModEnd> ; struct cli_exe_section <S2SV_ModStart> ; if ( ( falign = cli_falign_check ( ctx, & falign ) ) == 0 <S2SV_ModEnd> ) { cli_errmsg <S2SV_ModStart> } if ( ( falign = cli_falign_check ( ctx, & hdr_size ) ) == 0 <S2SV_ModEnd> ) { cli_errmsg <S2SV_ModStart> } if ( ( falign = cli_falign_check ( ctx, & valign ) ) == 0 <S2SV_ModEnd> ) { cli_errmsg <S2SV_ModStart> } if ( ( falign = cli_falign_check ( ctx, & hdr_size ) ) == 0 <S2SV_ModEnd> ) { cli_errmsg <S2SV_ModStart> } if ( ( falign = cli_falign_check ( ctx, & falign ) ) == 0 <S2SV_ModEnd> ) { cli_errmsg <S2SV_ModStart> } if ( ( falign = cli_falign_check ( ctx, & hdr_size ) ) == 0 <S2SV_ModEnd> ) { cli_errmsg <S2SV_ModStart> } if ( ( falign = cli_falign_check ( ctx, & hdr_size ) ) == 0 <S2SV_ModEnd> ) { cli_errmsg",0
661,"<S2SV_ModStart> address ) { uint16_t result = 0 ; <S2SV_ModStart> address ) ; result |= <S2SV_ModStart> DM9000_REG_EPCR, EPCR_EPOS <S2SV_ModEnd> ) ; while <S2SV_ModStart> ; while ( <S2SV_ModEnd> dm9000ReadReg ( DM9000_EPCR <S2SV_ModStart> dm9000ReadReg ( DM9000_EPCR <S2SV_ModEnd> ) & EPCR_ERRE <S2SV_ModStart> ) { } result |= dm9000ReadReg ( DM9000_EPCR ) ; <S2SV_ModStart> DM9000_REG_EPCR, EPCR_EPOS <S2SV_ModEnd> ) ; return <S2SV_ModStart> 8 ) | result <S2SV_ModEnd> ; } <S2SV_null>",0
662,"<S2SV_ModStart> pcmk_ok ) { if (! cib_tls_signon ( cib, & ( private -> command ) ) ) { fprintf ( stderr, ""%s: <S2SV_blank> Connection <S2SV_blank> to <S2SV_blank> %s:%d <S2SV_blank> failed: <S2SV_blank> %s\\n"", name, private -> server, private -> port, pcmk_fatal_error ( ) ) ; return - EINVAL ; } <S2SV_ModStart> pcmk_ok ) { if (! cib_tls_signon ( cib, & ( private -> callback ) ) ) { fprintf ( stderr, ""%s: <S2SV_blank> Connection <S2SV_blank> to <S2SV_blank> %s:%d <S2SV_blank> failed: <S2SV_blank> %s\\n"", name, private -> server, private -> port, pcmk_fatal_error ( ) ) ; return - EINVAL ; }",0
663,"<S2SV_ModStart> = ubuf ; memset ( & address, 0, sizeof ( address ) ) ;",0
664,"<S2SV_ModStart> num00, tmp_err = 0 <S2SV_ModStart> int new_mv_mode_penalty = 64 <S2SV_ModEnd> ; const int <S2SV_ModStart> bsize ] ; <S2SV_ModEnd> v_fn_ptr. vf <S2SV_ModStart> bsize ) ; if ( x -> sadperbit16 > 0 ) { <S2SV_ModStart> = cpi -> diamond_search_sad_16 <S2SV_ModEnd> ( x, <S2SV_ModStart>, & tmp_mv <S2SV_ModEnd>, step_param, <S2SV_ModStart>, & v_fn_ptr <S2SV_ModEnd> ) ; if <S2SV_ModStart> = tmp_err ; } else { tmp_err = cpi -> diamond_search_sad ( x, & ref_mv_full, & tmp_mv, step_param, x -> sadperbit16, & num00, & v_fn_ptr, x -> nmvjointcost, x -> mvcost, ref_mv ) ; }",0
665,<S2SV_ModStart> ; if ( h -> addr == MAP_FAILED ) goto error ; if (,0
666,<S2SV_ModStart> ; merged -> <S2SV_ModEnd> is_dir_config = (,0
667,"<S2SV_ModStart> one, offset <S2SV_ModEnd> ; ssize_t count <S2SV_ModStart> ) break ; if ( number_planes_filled > GetImageDimensions ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetImageDimensions ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetImageDimensions ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetImageDimensions ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetImageDimensions ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_colormaps > GetImageDimensions ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetImageDimensions ( image ) ) ThrowReader",0
668,"<S2SV_ModStart> ( r = sshbuf_put_string ( b, comp -> name, comp -> name_len ) )!= 0 || ( r =",0
669,"<S2SV_ModStart> ) ) { if (! smatch ( option, ""content"" ) ) { <S2SV_ModStart> ovalue ) ; } else { ovalue = sclone ( value ) ; }",0
670,<S2SV_ModStart> client = user_data ; gboolean shutdown_flag = FALSE <S2SV_ModStart> num_clients ) ; if ( client -> shutdown_flag ) { shutdown_flag = TRUE ; } <S2SV_ModStart> client ) ; <S2SV_ModEnd> return ; },0
671,<S2SV_ModStart> * uv ; if (! iswhite ( thread ) ) { <S2SV_ModStart> = thread ; } <S2SV_ModStart> next ) { <S2SV_ModEnd> if (!,0
