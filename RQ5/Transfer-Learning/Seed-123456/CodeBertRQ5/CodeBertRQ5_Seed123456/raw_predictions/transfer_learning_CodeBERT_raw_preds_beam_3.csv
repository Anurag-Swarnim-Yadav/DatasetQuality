,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; mutex_unlock ( & wmi -> op_mutex ) ;,0
1,<S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;,0
2,<S2SV_ModStart> writer = ( TrackWriter <S2SV_ModEnd> * ) gf_list_get,0
3,<S2SV_ModStart> -> child ; if (! c ) { return NULL ; },0
4,"<S2SV_ModStart> u64 nr, <S2SV_ModEnd> struct pt_regs * <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",1
5,<S2SV_ModStart> EXT4_EXTENTS_FLAG ) { <S2SV_ModEnd> struct grub_ext4_extent_header * <S2SV_ModStart> ) ) ; <S2SV_ModEnd> struct grub_ext4_extent_header *,0
6,"<S2SV_ModStart> fdct16 ( const tran_low_t <S2SV_ModEnd> in [ 16 <S2SV_ModStart> ] ) { tran_low_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> 8 ] ; tran_low_t <S2SV_ModEnd> step3 [ 8 <S2SV_ModStart> 8 ] ; tran_low_t <S2SV_ModEnd> input [ 8 <S2SV_ModStart> ] ; { tran_low_t <S2SV_ModEnd> s0, s1 <S2SV_ModStart>, s7 ; tran_low_t <S2SV_ModEnd> t0, t1 <S2SV_ModStart> t3 ; } tran_low_t <S2SV_ModEnd> x0, x1",0
7,<S2SV_ModStart> ( ) == 0x48454250 <S2SV_ModEnd> ) { # <S2SV_ModStart> # ifdef LIBRAW_LIBRARY_BUILD if ( raw_width < 8 ) { fgetc ( ifp ) ; return 0 ; },0
8,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int search_filter_level ( const YV12_BUFFER_CONFIG * cpi, <S2SV_ModEnd> const YV12_BUFFER_CONFIG * <S2SV_ModStart> cm = & cpi -> common <S2SV_ModEnd> ; const int <S2SV_ModStart> cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; int filt_direction = 0 ; int filt_direction = 0 ; int filt_direction = 0 ; int filt_direction = 0 ; int filt_direction = 0 ; int filt_direction = 0 ; int filt_mid = clamp ( lf -> filter_level, min_filter_level, max_filter_level, max_filter_level ) ; int filt_err ; int filt_err ; int filt_err ; int filter_step = filter",0
9,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
10,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ++ i ) vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( usehp ) vpx_write <S2SV_ModEnd> ( w,",1
11,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; },0
12,<S2SV_ModStart> ) dat ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( ptr ) ;,0
13,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> construct_get_dest_keyring ( struct <S2SV_ModStart> * authkey ; int ret = 0 ; <S2SV_ModStart> dest_keyring ) ; ret = 0 ; <S2SV_ModStart> ( dest_keyring ) { ret = - 1 ; break ; } <S2SV_ModEnd> } case KEY_REQKEY_DEFL_THREAD_KEYRING,0
14,<S2SV_ModStart> = NULL ; if ( sc == NULL ) return GSS_S_CONTINUE ;,0
15,<S2SV_ModStart> ; tm = safe_asctime <S2SV_ModEnd> ( & t,0
16,<S2SV_ModStart> length ) ; if ( length > AUTH_PASS_LEN ) { <S2SV_ModStart> ) ) ; },0
17,<S2SV_ModStart> (! e ) goto not_found ; if ( <S2SV_ModEnd> e == p,0
18,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",1
19,"<S2SV_ModStart> ; select ( reader -> bytes_available_fd <S2SV_ModEnd>, & read_fds",0
20,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> detect_transition_to_still ( struct <S2SV_ModStart> last_decay_rate ) { <S2SV_ModEnd> if ( frame_interval <S2SV_ModStart> ; if ( <S2SV_ModEnd> loop_decay_rate >= 0.999 <S2SV_ModStart> ) break ; <S2SV_ModEnd> reset_fpf_position ( twopass <S2SV_ModStart> position ) ; <S2SV_ModEnd> return trans_to_still ;,0
21,<S2SV_ModStart> offset + size < <S2SV_ModEnd> i_size_read ( inode,0
22,"<S2SV_ModStart> alg ) { request_module <S2SV_ModEnd> ( ""%s"", <S2SV_ModStart> CRYPTO_ALG_NEED_FALLBACK ) ) request_module <S2SV_ModEnd> ( ""%s-all"",",0
23,<S2SV_ModStart> = GIT_PKT_NG ; <S2SV_ModEnd> if (! <S2SV_ModStart> line += 3 ; line += 3 <S2SV_ModStart> line = ptr <S2SV_ModEnd> ; if ( <S2SV_ModStart> line = ptr <S2SV_ModEnd> ; if (,0
24,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
25,<S2SV_ModStart> ; } } if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ;,0
26,"<S2SV_ModStart> mntent, path, rootfs",1
27,"<S2SV_ModStart> - ENODEV ; memset ( io, 0, sizeof ( io ) ) ;",0
28,<S2SV_ModStart> ( value + 0.5 <S2SV_ModEnd> ) ) ;,0
29,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return ret?,0
30,<S2SV_ModStart> vpx_codec_enc_cfg_map_t * map ; if ( cfg == NULL ) return VPX_CODEC_INVALID_PARAM,0
31,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
32,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
33,<S2SV_ModStart> ; if ( imp_readonly ) { if ( <S2SV_ModStart> ) ; } },0
34,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_ETXSTL, MSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_ETXSTH, MSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_ETXSTH, MSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_ETXSTH, MSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_ETXSTH, MSB ( ENC28J60_TX_",0
35,<S2SV_ModStart> ; value = ast2obj_string <S2SV_ModEnd> ( o ->,0
36,<S2SV_ModStart> ; if ( <S2SV_ModEnd> access ( page <S2SV_ModStart> ; if ( <S2SV_ModEnd> unlink ( page <S2SV_ModStart> ; if ( <S2SV_ModEnd> unlink ( page,0
37,"<S2SV_ModStart> low_var_thresh, int mb_cols <S2SV_ModEnd> ) { double <S2SV_ModStart> -> pp_limits_buffer ; <S2SV_ModEnd> unsigned char * <S2SV_ModStart> ) flag ; memset <S2SV_ModEnd> ( limits,",0
38,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> ) ; struct mb2_cache <S2SV_ModEnd> * ce ; <S2SV_ModStart> ; ce = mb2_cache_entry_alloc <S2SV_ModEnd> ( ext4_mb_cache, <S2SV_ModStart> error ) { mb2_cache_entry_free <S2SV_ModEnd> ( ce ) <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> } else { <S2SV_ModStart> hash ) ; <S2SV_ModEnd> } } <S2SV_null>",0
39,<S2SV_ModStart> ) ) ; * rlen = 0 ;,0
40,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp",0
41,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|truncated]"" <S2SV_ModEnd> ) ) ;",0
42,"<S2SV_ModStart> ) ; } else if ( opt_idx >= INT_MAX / sizeof ( * s ) ) { errmsg = ( char_u * ) N_ ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> the <S2SV_blank> channels"" ) ; }",0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode <S2SV_ModStart>, & new_mode, & acl ) ; if ( ret <S2SV_ModEnd> ) goto out",0
44,"<S2SV_ModStart> size_t size ; if (! jas_safe_intfast32_add ( tlx, width, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ) { goto error ; } if (! jas_safe_intfast32_add ( tly, height, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ) { goto error ; } if (! jas_safe_size_mul ( size, & size ) ||! jas_safe_size_mul ( size, & size ) ||! jas_safe_size_mul ( size, & size ) ) { goto error ; } if (! jas_safe_size_mul ( size, & size ) ||! jas_safe_size_mul ( size, & size ) ) { goto error ; } if (! jas_safe_size_mul ( size, & size ) ||! jas_safe_size_mul ( size, & size",0
45,<S2SV_ModStart> dp == datalen || ( op & ASN1_OP_MATCHED ) == 0,0
46,"<S2SV_ModStart> req, size_t <S2SV_ModEnd> acl_len ) { <S2SV_ModStart> acl_len ) { <S2SV_ModEnd> uint32_t attrlen, <S2SV_ModStart> int status ; if ( ( status = decode_op_hdr ( xdr, OP_GETATTR ) )!= 0 ) return - EINVAL ; if ( ( status = decode_attr_bitmap ( xdr, bitmap ) )!= 0 ) return - EINVAL ; if ( ( status = decode_attr_bitmap ( xdr, bitmap ) )!= 0 ) return - EINVAL ; if ( ( status = decode_attr_bitmap ( xdr, bitmap ) )!= 0 ) return - EIO ; if ( ( status = decode_attr_length ( xdr, bitmap ) )!= 0 ) return - EIO ; if ( ( status = decode_attr_length ( xdr, bitmap ) )!= 0 ) return - EINVAL ; if ( ( status = decode_attr_length ( xdr, bitmap ) )!= 0 ) return - EINVAL ; if ( ( status = decode_attr_length ( xdr, bitmap ) )!= 0 ) return - EINVAL ; if (",0
47,"<S2SV_ModStart> * TICK_NSEC ; u64 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div64_u64_rem <S2SV_ModEnd> ( nsec,",0
48,"<S2SV_ModStart> { owner = ssplit <S2SV_ModEnd> ( auth, <S2SV_ModStart> } group = ssplit <S2SV_ModEnd> ( tok,",1
49,<S2SV_ModStart> ; # if CONFIG_MEM_MANAGER <S2SV_ModEnd> int number_aau ;,0
50,<S2SV_ModStart> = SQUASHFS_LOOKUP_BLOCKS ( fd <S2SV_ModEnd>. inodes ) <S2SV_ModStart> = read_fs_bytes ( fd <S2SV_ModEnd>. s.,0
51,<S2SV_ModStart> } else return apr_psprintf <S2SV_ModEnd> ( cmd ->,0
52,<S2SV_ModStart> ; if ( 1 <S2SV_ModEnd> ) { # <S2SV_ModStart> } if ( 1 <S2SV_ModEnd> ) { },0
53,<S2SV_ModStart> } if (! c -> opt -> option. client ||! c -> opt -> protocol ) return 0 ; if (,0
54,<S2SV_ModStart> ; if ( cmac == NULL ||,0
55,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> const uint64_t bits_left <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
56,"<S2SV_ModStart> define EOFOp 0x07 <S2SV_ModEnd> char magick [ <S2SV_ModStart> ) ) ; if ( ( count!= 2 ) || ( memcmp ( magick, ""\\122\\354"", 2 )!= 0 ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ; do { if ( ( count!= 2 ) || ( memcmp ( magick, ""\\122\\354"", 2 )!= 0 ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
57,"<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> altsetting [ 0 ]. desc. bNumEndpoints < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; error = - EINVAL ; goto err_free_urb ; }",1
58,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
59,"<S2SV_ModStart> = ""/etc"" ; if ( ( fd = xfmkstemp ( & tmpname, dir ) ) == NULL ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; }",0
60,<S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_pps_valid ) { return IHEVCD_INVALID_HEADER ; },0
61,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } } <S2SV_null>,0
62,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> vp9_setup_dst_planes ( MACROBLOCKD <S2SV_ModStart> mi_col ) { const <S2SV_ModStart> ] = { src -> y_stride, src -> uv_stride, src -> uv_stride, src -> uv_stride, src -> alpha_stride, src -> alpha_stride, src -> alpha_stride, src -> alpha_stride, src -> alpha_stride, src -> alpha_stride, src -> alpha_stride, src -> alpha_stride <S2SV_ModEnd> } ; const <S2SV_ModStart> int strides [ 3 <S2SV_ModEnd> ] = { <S2SV_ModStart> src -> uv_stride, src -> uv_stride, src -> alpha_stride } ; int i ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, pd -> subsampling_x, pd -> subsampling_y, pd -> subsam",0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,<S2SV_ModStart> ) get_block = ocfs2_get_block <S2SV_ModEnd> ; else get_block,0
65,"<S2SV_ModStart> ( f, ""%79s <S2SV_blank> %[^\\n]\\n"" <S2SV_ModEnd>, def,",0
66,"<S2SV_ModStart> n ) { <S2SV_ModEnd> char * str <S2SV_ModStart> * str ; <S2SV_ModEnd> Py_ssize_t len ; <S2SV_ModStart> ':' ) ; if ( str == NULL ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ; } <S2SV_ModStart> == NULL ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ; } <S2SV_ModEnd> str [ 0 <S2SV_ModStart> = PyCF_ONLY_AST ; if ( str == NULL ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ; } str = PyUnicode_FromString ( ""<fstring>"" ) ; mod = string_object_to_c_ast ( str, fstring_name, Py_eval_input, & cf, c -> c_feature_version, c -> c_feature_version, c -> c_feature_version, c -> c_feature_version, c -> c_feature_version, c -> c_feature_version, c -> c_feature_version, c -> c_feature_version, c -> c",0
67,<S2SV_ModStart> string ) { if (! object ) return NULL ;,0
68,<S2SV_ModStart> size ) ; if (! px -> ft ) return FALSE ;,0
69,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; length = 0 ; <S2SV_ModStart> ) ) ; length = 0 ; <S2SV_ModStart> ) ) ; length = 0 ; <S2SV_ModStart> ) ) ; length = 0 ; <S2SV_ModStart> ) ) ; length = 0 ; <S2SV_ModStart> ) ) ; length = 0 ;",0
70,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
71,<S2SV_ModStart> const buffers [ 3 <S2SV_ModEnd> ] = { <S2SV_ModStart> int strides [ 3 <S2SV_ModEnd> ] = {,0
72,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; for (,1
73,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
74,<S2SV_ModStart> _ipmi_destroy_user ( user ) ; if (! user -> user ) return 0 ; if (! user -> user ) put_user ( user -> user,0
75,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> sl = strlen,1
76,"<S2SV_ModStart> * for_ch ; <S2SV_ModEnd> REQ ( n <S2SV_ModStart>, comp_for ) ; if ( TYPE ( CHILD ( n, 0 ) ) == ASYNC ) { is_async = 1 ; } if ( TYPE ( CHILD ( n, 0 ) ) == ASYNC ) { is_async = 1 ; } if ( TYPE ( CHILD ( n, 0 ) ) == ASYNC ) { is_async = 1 ; } if ( TYPE ( CHILD ( n, 0 ) ) == ASYNC ) { is_async = 1 ; } if ( is_async && c -> c_feature_version < 6 ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } for_ch = CHILD ( n, 0 ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; expression = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; expression = ast_for_exprlist (",0
77,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> dst_state -> curframe,0
78,"<S2SV_ModStart> write_mb_modes_kf ( const VP9_COMMON * const cm = & cpi -> common ; const MACROBLOCKD * const xd = & cpi -> xd ; const MACROBLOCKD * const xd = & cpi -> xd ; const MACROBLOCKD * const xd = & cpi -> xd ; const MODE_INFO * const mbmi = & mi -> mbmi ; const BLOCK_SIZE bsize = mbmi -> sb_type ; write_skip ( cpi, mbmi -> segment_id, mi, w ) ; if ( bsize >= BLOCK_8X8 && cm -> tx_mode == TX_MODE_SELECT ) write_selected_tx_size ( cpi, mbmi -> tx_size, bsize, w ) ; if ( bsize >= BLOCK_8X8 ) { write_selected_tx_size ( cpi, mbmi -> tx_size, bsize, w ) ; } else { int num_4x4_w = num_4x4_w ; num_4x4_w = num_4",0
79,<S2SV_ModStart> if ( n >= <S2SV_ModEnd> maxn ) SWF_error,0
80,<S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( & prep -> pp_n ) ; <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> n = EXTRACT_32BITS,0
81,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
82,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void addModuleArgument (,0
83,<S2SV_ModStart> ; } } if ( interp_window_coeff == NULL ) return - 1 ;,0
84,"<S2SV_ModStart> enc, p ) ; * low = 0 ; * low_prev = 0 ; * low_prev = 0 ; * low_prev = 0 ; * low_prev = 0 ; * low_prev = 0 ; * low_prev = 0 ; * low_prev = 0 ; * low_prev = 0 ; * low_prev = 0 ; * low_prev = 0 ; * low_prev = 0 ; * low_prev = 0 ; * low_prev = 0 ; * low_prev = 0 ; * low_prev = 0 ; * low_prev = 0 ; * low_prev = 0 ; * low_prev = 0 ; * low_prev = 0 ; * low_prev = 0 ; * low_prev = 0 ; * low_prev = 0 ; * low_prev = 0 ; * low_prev = 0 ; * low_prev = 0 ; * low_prev = 0 ; * low_prev = 0 ; * low_prev = 0 ; * low_prev = 0 ; * low_prev = 0 ; * low_prev = 0 ; * low_prev = 0 ; * low_prev = 0 ; * low_prev = 0 ; * low_prev =",0
85,,0
86,,1
87,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
88,<S2SV_ModStart> + x > ( int ) <S2SV_ModStart> + y > ( int ),0
89,<S2SV_ModStart> np -> opt <S2SV_ModEnd> ) ; err,0
90,<S2SV_ModStart> == VFF_TYP_DOUBLE ) { <S2SV_ModStart> = VFF_TYP_DOUBLE ; },0
91,<S2SV_ModStart> data ) { ( void ) ctx ; ( void ) data ;,0
92,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
93,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
94,<S2SV_ModStart>. as_int ; if ( near_mvs [ vcnt ]. as_int == 0 ) { mv. as_int = 0 ; },0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
97,"<S2SV_ModStart> msicap, msgnum <S2SV_ModEnd> ) ; return",0
98,"<S2SV_ModStart> ) ; } if ( cmd -> flags & REDIS_REPL_CONNECTED ) { addReplyError ( c, ""unable <S2SV_blank> to <S2SV_blank> change <S2SV_blank> command"" ) ; return REDIS_OK ; }",0
99,"<S2SV_ModStart> vpx_codec_err_t res ; vpx_set_g_mode ( ctx, cfg ) ; <S2SV_ModStart> g_pass!= VPX_RC_ONE_PASS <S2SV_ModEnd> ) ; res",0
100,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> vp9_init_plane_quantizers ( cpi,0
101,<S2SV_ModStart> si_code >= 0 || info -> si_code < 0,0
102,<S2SV_ModStart> ; tmp_strsize = <S2SV_ModEnd> ptr -> size <S2SV_ModStart> ptr -> size <S2SV_ModEnd> ; tmp_str =,0
103,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
104,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> -> state == fmode <S2SV_ModEnd> ) return ; <S2SV_ModStart> ; if ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> & FMODE_WRITE ) { if ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> & FMODE_WRITE ) { if ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> & FMODE_WRITE ) { if ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> ) ; } } }",0
105,<S2SV_ModStart> read_info ) ; <S2SV_ModEnd> if ( (,0
106,<S2SV_ModStart> 0 ; } memcpy <S2SV_ModEnd> ( elem.,0
107,"<S2SV_ModStart>, i, <S2SV_ModEnd> JPC_QCX_GETEXPN ( qcd <S2SV_ModStart>, i, <S2SV_ModEnd> JPC_QCX_GETMANT ( qcd",0
108,<S2SV_ModStart> ; if ( c -> video_size < 8 ) return AVERROR_INVALIDDATA ; if (,0
109,<S2SV_ModStart> ) ; } ND_TCHECK ( ndo -> ndo_vflag ) ;,0
110,"<S2SV_ModStart> * name = fit_get_name_safe <S2SV_ModEnd> ( fit,",0
111,<S2SV_ModStart> ; if ( kfifo_alloc_zero <S2SV_ModEnd> ( & state,0
112,"<S2SV_ModStart> * iface, vpx_codec_dec_cfg_t <S2SV_ModEnd> * cfg,",0
113,<S2SV_ModStart> ; value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1100WritePhyReg (,0
114,<S2SV_ModStart> ; ipc. icmp_hdr = ip_hdr ( skb_in ) ; ipc.,0
115,<S2SV_ModStart> else if ( <S2SV_ModEnd> flags & VPX_CODEC_CAP_XMA <S2SV_ModStart> flags & VPX_CODEC_CAP_XMA <S2SV_ModEnd> ) res =,0
116,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
117,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; RESERVE_SPACE",1
118,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ) ; return 0 <S2SV_ModStart> break ; } return 0 ;,0
119,<S2SV_ModStart> R_ANAL_OP_TYPE_UNK ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
120,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
121,<S2SV_ModStart> goto trunc ; ND_TCHECK_16BITS ( & lshp -> ls_type ) ;,0
122,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { ret = - EFAULT ; break ; } <S2SV_ModEnd> * obuf =",0
123,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
124,<S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ),0
125,"<S2SV_ModStart> * costs, vpx_tree_tree <S2SV_ModEnd> * probs, <S2SV_ModStart> ) { const vpx_tree_index <S2SV_ModEnd> bpro = probs",0
126,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
127,"<S2SV_ModStart> c, 0, true",0
128,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fadst16 ( const <S2SV_ModStart> fadst16 ( const transt16_t <S2SV_ModEnd> * input, <S2SV_ModStart> output ) { transt16_t <S2SV_ModEnd> s0, s1 <S2SV_ModStart> = input [ 0 ] ; transt16_t <S2SV_ModEnd> x1 = input <S2SV_ModStart> 0 ] ; transt16_t <S2SV_ModEnd> x2 = input <S2SV_ModStart> 0 ] ; transt16_t <S2SV_ModEnd> x2 = input <S2SV_ModStart> 0 ] ; transt16_t <S2SV_ModEnd> x3 = input <S2SV_ModStart> 2 ] ; transt16_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 4 ] ; transt16_t <S2SV_ModEnd> x6 = input <S2SV_ModStart> 8 ] ; transt16_t <S2SV_ModEnd> x7 = input <S2SV_ModStart> 8 ] ; transt16_t <S2SV_ModEnd> x9 = input <S2SV_ModStart> 5 ] ; transt16_t <S2SV_ModEnd> x12 = input <S2SV_ModStart> 12 ] ; transt16_t <S2SV_ModEnd> x14 = input <S2SV_ModStart> 12 ] ; transt16_t <S2SV_ModEnd> x15 = input <S2SV_ModStart> 12 ] ; transt16_t <S2SV_ModEnd> x15 = input <S2SV_ModStart> 14 ] ; transt16_t <S2SV_ModEnd> x",0
129,<S2SV_ModStart> ; # if <S2SV_ModEnd> HAVE_MEDIA flags |= <S2SV_ModStart> ; # endif <S2SV_ModEnd> return flags &,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
131,"<S2SV_ModStart> * const tile <S2SV_ModEnd>, int * <S2SV_ModStart> ) { const VP9_COMMON * const cm = & cpi -> common ; const <S2SV_ModStart> ) { const <S2SV_ModEnd> int bw, <S2SV_ModStart> ) return ; if ( mi_8x8 [ 0 ] -> mbmi. sb_type < 2 ) return ; <S2SV_ModStart> bs ) { if ( mi_8x8 [ 0 ] -> mbmi. sb_type < 2 ) return ; <S2SV_ModStart> bs ) { if ( mi_8x8 [ 0 ] -> mbmi. sb_type < 2 ) return ; <S2SV_ModStart> mi_col ) ; if ( mi_8x8 [ 0 ] -> mbmi. sb_type < 2 ) return ; <S2SV_ModStart> mi_col ) ; if ( mi_8x8 [ 0 ] -> mbmi. sb_type < 2 ) return ;",0
132,<S2SV_ModStart> ) break ; <S2SV_ModEnd> if (!,0
133,<S2SV_ModStart> get_blocks_flags = EXT4_GET_BLOCKS_CREATE | EXT4_GET_BLOCKS_DELALLOC_RESERVE,0
134,"<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> canonnamelen = 0 <S2SV_ModStart> & p -> ai_family, <S2SV_ModEnd> p -> ai_family <S2SV_ModStart> & p -> ai_socktype, <S2SV_ModEnd> p -> ai_protocol <S2SV_ModStart> p -> ai_protocol, <S2SV_ModEnd> p -> ai_addrlen <S2SV_ModStart> p -> ai_addrlen <S2SV_ModEnd> )!= OE_OK",0
135,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
136,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
137,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_registers ( pegasus <S2SV_ModStart> data ) { int ret ; if (! <S2SV_ModEnd> usb_control_msg ( pegasus <S2SV_ModStart>, size, false <S2SV_ModEnd> ) ) netif_dbg <S2SV_ModStart> ret ) ; return ret ;",0
138,"<S2SV_ModStart> mod_ty Module ( asdl_seq <S2SV_ModEnd> * body,",0
139,"<S2SV_ModStart> * src, <S2SV_ModEnd> int64_t ts_start, <S2SV_ModStart> >> 4 ; <S2SV_ModEnd> if ( ctx <S2SV_ModStart> write_idx ) ; <S2SV_ModEnd> for ( row <S2SV_ModStart> } else { vpx_copy_and_extend_frame <S2SV_ModEnd> ( src, <S2SV_ModStart> img ) ; <S2SV_ModEnd> # endif buf",0
140,"<S2SV_ModStart>. sharpness ; const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; <S2SV_ModStart> ( cm -> <S2SV_ModEnd> base_qindex, 0",0
141,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> btif_in_execute_service_request ( ),0
142,<S2SV_ModStart> = getnum ( <S2SV_ModEnd> MAXALIGN ) ;,0
143,<S2SV_ModStart> ) ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
144,<S2SV_ModStart> (! ctx <S2SV_ModEnd> ) res = <S2SV_ModStart>. decode ( <S2SV_ModEnd> priv -> alg_priv,0
145,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int isofs_read_inode (,0
146,"<S2SV_ModStart> STROKING ) { sprintf <S2SV_ModEnd> ( outpos, <S2SV_ModStart> } else { sprintf <S2SV_ModEnd> ( outpos,",0
147,<S2SV_ModStart> self ) { Py_CLEAR ( self ) ;,0
148,<S2SV_ModStart> < count ; i ++ <S2SV_ModEnd> ) { n,0
149,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body, & tmp ) < 0 ) { return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body, & tmp ) < 0 ) { PyErr_SetString ( PyExc_RuntimeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ++ ) { Py_CLEAR ( tmp ) ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, &",0
150,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
151,<S2SV_ModStart> & flags ) err = <S2SV_ModEnd> verify_compat_iovec ( msg_sys <S2SV_ModStart> VERIFY_WRITE ) ; else err = <S2SV_ModEnd> verify_iovec ( msg_sys,0
152,<S2SV_ModStart> ) ; struct gfs2_inode_info * inode = GFS2_I ( inode ) ; struct <S2SV_ModStart> unsigned end_of_metadata = inode -> i_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb -> s_sb ->,0
153,"<S2SV_ModStart>, ""Codec: <S2SV_blank> %s\\n"", global <S2SV_ModEnd> -> codec -> <S2SV_ModStart> : ""YV12"" ) ; } if ( global -> codec -> interface ( ) ) { fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, global -> codec -> interface ( ) )",0
154,,0
155,"<S2SV_ModStart> { if ( safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> { if ( safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> { if ( safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.cshrc"",",0
156,<S2SV_ModStart> msix_tab_size ) { <S2SV_ModEnd> bzero ( msixcap,1
157,<S2SV_ModStart> ; if ( <S2SV_ModEnd> js_regexec ( re,0
158,"<S2SV_ModStart> : if ( Long_val <S2SV_ModEnd> ( Field ( <S2SV_ModStart> ( Field ( <S2SV_ModEnd> dest, 1 <S2SV_ModStart> >= 0 ) { <S2SV_ModStart> dest ) ; }",0
159,"<S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; ksz8851WriteReg <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; isr <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( isr & KSZ8851_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_IER <S2SV_ModEnd> )!= 0",0
160,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
161,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> ch_id ]. fd ) <S2SV_ModEnd> ) { BTIF_TRACE_ERROR,0
162,<S2SV_ModStart> peerec ) ; <S2SV_ModEnd> if ( (,0
163,"<S2SV_ModStart> ( ) ; strncpy <S2SV_ModEnd> ( t1_buf_array,",0
164,"<S2SV_ModStart>, BLOCK_SIZE subsize, MACROBLOCKD * x, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBL",0
165,"<S2SV_ModStart> key_ref ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) { ret = - ENOKEY ; goto error2 ; }",1
166,<S2SV_ModStart> ) ) { if ( ps_dec -> u4_first_slice ) { return IV_FAIL ; },0
167,<S2SV_ModStart> var_off ) ; if ( src_known ) { <S2SV_ModStart> var_off ) ; },0
168,"<S2SV_ModStart> ( cifs_sb, cifs_inode <S2SV_ModEnd> ) ; rc",0
169,<S2SV_ModStart> ; opt -> opt = opt ; opt ->,0
170,"<S2SV_ModStart> ) { int <S2SV_ModEnd> number_of_keyframes, encode_frame_count <S2SV_ModStart> svc_ctx ) ; <S2SV_ModEnd> svc_log ( svc_ctx <S2SV_ModStart> ; number_of_keyframes = <S2SV_ModEnd> si -> encode_frame_count <S2SV_ModStart> si -> encode_frame_count <S2SV_ModEnd> ; for ( <S2SV_ModStart> i ) { <S2SV_ModEnd> if ( svc_ctx",0
171,<S2SV_ModStart> = new_cols ; <S2SV_ModEnd> vterm_allocator_free ( screen,1
172,<S2SV_ModStart> n ) { int in_named_escape ; int in_named_escape ; int in_named_escape ; int in_named_escape <S2SV_ModEnd> ; assert ( <S2SV_ModStart> NULL ) ; in_named_escape = 0 ; in_named_escape = 0 ; in_named_escape = 0 ; in_named_escape = 0 ; in_named_escape = 0 ; in_named_escape = 0 ; in_named_escape = 0 ; } else if ( in_named_escape && ch == '\\\\' ) { in_named_escape = 0 ; in_named_escape = 0 ; } else if ( in_named_escape && ch == '\\\\' ) { in_named_escape = 0 ; } else if ( in_named_escape && ch == '\\\\' ) { in_named_escape = 0 ; } else if ( in_named_escape && ch == '\\\\' ) { in_named_escape = 0 ; } else if ( in_named_escape && ch == '\\\\' ) { in_named_escape = 0 ; } else if ( in_named_escape && ch == '\\\\' ) { in_named_escape = 0 ; },0
173,"<S2SV_ModStart> ( pd, <S2SV_ModEnd> g_settings_dump_location ) ;",0
174,<S2SV_ModStart> ; if ( y1 < 0 || y1 < 0 || y1 < 0 || y1 < 0 || y1 < 0 ) { return ; } if (,0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""%u"", EXTRACT_16BITS ( ptr ) & L2TP_PROXY_AUTH_ID_MASK ) ) ; return ; }",0
176,"<S2SV_ModStart>, in_what_stride, in_what_stride <S2SV_ModEnd>, in_what_stride,",0
177,"<S2SV_ModStart> * cpi, <S2SV_ModEnd> TileInfo * const <S2SV_ModStart> int mi_col ; vpx_memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; vpx_memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; vpx_memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; vpx_memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; vpx_memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; vpx_memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; vpx_memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; vpx_memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; vpx_memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; vpx_memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; vpx_memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; vpx_memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; vpx_memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; vpx_memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; vpx_memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; vpx_memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; vpx_memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ;",0
178,"<S2SV_ModStart> ; dh = skb_header_pointer <S2SV_ModEnd> ( skb,",0
179,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * opt, <S2SV_ModStart> & 3 ) { <S2SV_ModStart> ++ ] = IPOPT_RCU ; } <S2SV_ModEnd> opt -> optlen",0
180,<S2SV_ModStart> ; if ( upgrade <S2SV_ModEnd> == NULL ),0
181,<S2SV_ModStart> * findalldevs_if ; uint32 <S2SV_ModEnd> nif = 0 <S2SV_ModStart> 0 ; } if ( plen < sizeof ( struct rpcap_findalldevs_if ) ) { return - 1 ; } <S2SV_ModStart> next ) { if ( plen < sizeof ( struct rpcap_findalldevs_if ) ) { return - 1 ; } <S2SV_ModStart> -> description ) if ( plen < sizeof ( struct rpcap_findalldevs_if ) ) { return - 1 ; } <S2SV_ModEnd> if ( d <S2SV_ModStart> name ) ; if ( plen < sizeof ( struct rpcap_findalldevs_if ) ) { return - 1 ; },0
182,"<S2SV_ModStart>, client_uid, DEFAULT_DUMP_DIR_MODE <S2SV_ModEnd> ) ; if",0
183,<S2SV_ModStart> ; x += 4 <S2SV_ModEnd> ) { index,1
184,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
185,<S2SV_ModStart> ; if ( <S2SV_ModEnd> num_images > 0,0
186,"<S2SV_ModStart> ( ndo, ""%s"",",0
187,<S2SV_ModStart> (! dumpable <S2SV_ModEnd> ) { rcu_read_unlock,0
188,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
189,<S2SV_ModStart> ; } } else if ( 0 == ps_codec -> ps_codec -> ps_codec_id ) { return ; },0
190,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ppd -> per_sdma <S2SV_ModStart> ppd -> per_sdma <S2SV_ModEnd> ) HFI1_CAP_CLEAR (,0
191,"<S2SV_ModStart> char * name <S2SV_ModEnd> ) { int <S2SV_ModStart> ) ) { <S2SV_ModEnd> DBUG_ENTER ( ""mi_repair_parallel""",0
192,<S2SV_ModStart> pairs = palloc ( pcount * <S2SV_ModEnd> sizeof ( Pairs,0
193,<S2SV_ModStart> val ) ; <S2SV_ModEnd> if ( strcmp,0
194,"<S2SV_ModStart> ) ) { if ( NULL == p ) { return bad_request ( c, 400, __LINE__ ) ; }",0
195,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> 256 ] ; tran_low_t <S2SV_ModEnd> * outptr = <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16",0
196,"<S2SV_ModStart> goto out ; if ( g_str_has_prefix ( app, ""."" ) ) g_print ( "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
197,"<S2SV_ModStart> char * temp_filename <S2SV_ModEnd> ; if ( <S2SV_ModStart> node ) ; <S2SV_ModEnd> for ( const <S2SV_ModStart> enode ) ; } for ( const list_node_t * enode = list_begin ( section -> entries ) ; enode!= list_end ( enode ) ) { const entry_t * entry = ( const entry_t * ) list_node ( enode ) ; enode = list_next ( enode ) ) { <S2SV_ModStart> ( '\\n', fp ) ; } <S2SV_ModEnd> } fflush (",0
198,<S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( tptr ) ;,0
199,<S2SV_ModStart> NULL ) ; if (! ctxt -> instate ),0
200,"<S2SV_ModStart> ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" <S2SV_ModEnd> ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" ""%s"" <S2SV_ModStart> ""Content-Length: <S2SV_blank> %d\\r\\n"" ""%s"" ""\\r\\n"" ""%s"" <S2SV_ModEnd>, request,",0
201,"<S2SV_ModStart> ) ; } <S2SV_ModEnd> waitpid ( child <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> waitpid ( child <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""chown"" ) ; <S2SV_ModEnd> unlink ( src",0
202,<S2SV_ModStart>!= BFA_STATUS_OK ) { kfree ( fcstats ) ; <S2SV_ModStart> return NULL ; },1
203,"<S2SV_ModStart> -> x = MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> y = MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> z = MagickMax <S2SV_ModEnd> ( 1.0f,",0
204,<S2SV_ModStart> ; rec -> <S2SV_ModEnd> sasl_password = src,0
205,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
206,"<S2SV_ModStart> o, datao ; exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" )",0
207,<S2SV_ModStart> ) ) { if ( my_errno!= EINVAL ) { <S2SV_ModStart> ) ; } },0
208,"<S2SV_ModStart> olen ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> hex ; CURLcode res ; size_t alloc <S2SV_ModEnd> ; if ( <S2SV_ModStart> hex ; CURLcode res <S2SV_ModEnd> ; while ( <S2SV_ModStart> hex ) ; res = Curl_convert_from_network ( handle, & in <S2SV_ModEnd>, 1 ) <S2SV_ModStart> ; if ( res <S2SV_ModEnd> ) { free",0
209,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
210,<S2SV_ModStart> ; def -> <S2SV_ModEnd> session_setup = usm_session_init,0
211,<S2SV_ModStart> NULL ; return <S2SV_ModEnd> match ( prog,0
212,<S2SV_ModStart> idx ] ; <S2SV_ModEnd> switch ( action <S2SV_ModStart> ) ; } <S2SV_ModEnd> return SNMP_ERR_NOERROR ;,0
213,<S2SV_ModStart> break ; } if ( packets == 0 ) break ;,0
214,"<S2SV_ModStart> -> slave_list_head, NULL <S2SV_ModEnd> ) { spin_lock_irq <S2SV_ModStart> open_list ) { spin_lock ( & slave_active_lock ) ; list_del ( & slave -> active_list ) ; spin_unlock ( & slave_active_lock ) ; <S2SV_ModStart> slave_active_lock ) ; <S2SV_ModEnd> list_move_tail ( &",0
215,<S2SV_ModStart> -> u4_bitoffset = ih264d_read_mmco_commands <S2SV_ModEnd> ( ps_dec ),0
216,<S2SV_ModStart> int_fast32_t widthOverflow = ( <S2SV_ModStart> info -> originalWidth ) <S2SV_ModStart> uint_fast32_t heightOverflow = ( <S2SV_ModStart> info -> originalHeight ) <S2SV_ModStart> uint_fast32_t newRasterSize = ( <S2SV_ModStart> info -> rasterSize ),0
217,"<S2SV_ModStart> validator -> user ) ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()""",0
218,<S2SV_ModStart> bus ] ; <S2SV_ModEnd> si = &,0
219,"<S2SV_ModStart>, timeo ) <S2SV_ModEnd> ; while (",0
220,<S2SV_ModStart> += 9 ; if ( * s == '/' ) { <S2SV_ModStart> ++ ) ; },0
221,"<S2SV_ModStart>. active_set ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> read_set, NULL )",0
222,<S2SV_ModStart> msixcap msixcap ; <S2SV_ModEnd> ( msgnum >= <S2SV_ModStart> msgnum <= MAX_MSIX_TABLE_ENTRIES <S2SV_ModEnd> ) ; tab_size,0
223,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",1
224,<S2SV_ModStart> == NULL ) { retval = KRB5KDC_ERR_PREAUTH_FAILED ; goto cleanup ; } <S2SV_ModEnd> status = X509_NAME_cmp,0
225,<S2SV_ModStart> cpi ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; <S2SV_ModStart> -> oxcf. tx_size_search_method <S2SV_ModEnd> == 0 ) <S2SV_ModStart> ( cpi -> oxcf. tx_size_search_method <S2SV_ModEnd> == USE_LARGESTALL ) <S2SV_ModStart> ( cpi -> oxcf. tx_size_search_method <S2SV_ModEnd> == USE_FULL_RD ),0
226,<S2SV_ModStart> ; break ; default : break ;,0
227,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> size < buf2 ) || ( <S2SV_ModEnd> buf1 -> size <S2SV_ModStart> buf2 -> size > buf2 -> size ) <S2SV_ModEnd> ) { return,0
228,<S2SV_ModStart> ; size_t sz ; if ( size < sizeof ( * info ) ) return NULL ; sz <S2SV_ModStart> ) + size <S2SV_ModEnd> ; if (,0
229,"<S2SV_ModStart>, & init_net ) ) return - EAFNOSUPPORT ; if ( protocol < 0 || protocol >= PF_AX25 ) protocol = AX25_P_TEXT ; else protocol = AX25_P_TEXT ; if ( protocol >= PF_AX25 ) protocol = AX25_P_TEXT ; else protocol = AX25_P_TEXT ; if ( protocol >= PF_AX25 ) protocol = AX25_P_TEXT ; else protocol = AX25_P_TEXT ; if ( protocol >= PF_AX25 ) protocol = AX25_P_TEXT ; else protocol = AX25_P_TEXT ; if ( protocol >= PF_AX25 ) protocol = AX25_P_TEXT ; else protocol = AX25_P_TEXT ; else protocol = AX25_P_TEXT ; break ; case SOCK_SEQPACKET : if ( protocol >= PF_AX25 ) protocol = AX25_P_TEXT ; else protocol = AX25_P_TEXT ; break ; default : return - ESOCKTNOSUPPORT ; } sk = sk_alloc ( net, PF_AX25, GFP_ATOMIC, & ax25_proto, kern",0
230,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs,",0
231,<S2SV_ModStart> ; r = sd_event_add_io <S2SV_ModEnd> ( b ->,0
232,<S2SV_ModStart> ( ) ; errors += test_string_formatting ( ) ;,0
233,<S2SV_ModStart> -> lun ) sas_eh_del_cmd <S2SV_ModEnd> ( cmd ),0
234,"<S2SV_ModStart>, end_col_offset ; if ( TYPE ( CHILD ( n, name_i ) ) == RARROW ) { return NULL ; } <S2SV_ModStart> } body = ast_for_suite ( c, CHILD ( n, name_i ) ) ; if (! body ) return NULL ; get_last_end_pos ( body, & end_lineno, & end_col_offset ) ; if (! body ) return NULL ; get_last_end_pos ( body, & end_lineno, & end_col_offset ) ; if ( is_async ) return AsyncFunctionDef ( name, args, body, decorator_seq, returns, lineno, end_col_offset, end_col_offset, c -> c_arena ) ; else body = <S2SV_ModStart> end_col_offset ) ; <S2SV_ModEnd> return FunctionDef (",0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,"<S2SV_ModStart> ) ) ; if ( WPG_Palette. NumOfEntries > WPG_Palette. NumOfEntries ) ThrowReaderException ( CorruptImageError, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> entries"" ) ;",0
237,,1
238,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
239,<S2SV_ModStart> > psf -> header. size <S2SV_ModEnd> ) psf_fread ( <S2SV_ModStart> > psf -> header. size <S2SV_ModEnd> ) psf_fread ( <S2SV_ModStart> > psf -> header. size <S2SV_ModEnd> ) psf_fread ( <S2SV_ModStart> > psf -> header. size <S2SV_ModEnd> ) psf_fread ( <S2SV_ModStart> > psf -> header. size <S2SV_ModEnd> ) { psf_fseek <S2SV_ModStart> > psf -> header. size <S2SV_ModEnd> ) { psf_fseek <S2SV_ModStart> > psf -> header. size <S2SV_ModEnd> ) { psf_fseek <S2SV_ModStart> > psf -> header. size <S2SV_ModEnd> ) { psf_fseek <S2SV_ModStart> > psf -> header. size <S2SV_ModEnd> ) { psf_fseek <S2SV_ModStart> > psf -> header. size <S2SV_ModEnd> ) { psf_fseek <S2SV_ModStart> > psf -> header. size <S2SV_ModEnd> ) { psf_fseek <S2SV_ModStart> > psf -> header. size <S2SV_ModEnd> ) { psf_fseek <S2SV_ModStart> ; } ; } <S2SV_ModEnd> break ; case,0
240,<S2SV_ModStart> u4_ofst ) ; ps_cabac -> u4_ofst = ps_cabac -> u4_ofst ;,0
241,<S2SV_ModStart> ) ) { if ( c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( ',0
242,<S2SV_ModStart> perf_event_context * ctx <S2SV_ModEnd> ; struct task_struct <S2SV_ModStart> event ) ; ctx <S2SV_ModEnd> -> state =,0
243,<S2SV_ModStart> post_proc_flag = # if CONFIG_VP9_HIGHBITDEPTH <S2SV_ModEnd> ( ctx -> <S2SV_ModStart>. noise_level ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
244,<S2SV_ModStart> = 0 ; ND_TCHECK_16BITS ( ptr. common -> packet_len ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( ptr. common -> packet_len ) ;,0
245,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vpx_usec_timer_start ( & <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,1
246,"<S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" <S2SV_ModEnd> ) ; exit <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> _exit ( 0",0
247,<S2SV_ModStart> ; ptr_hbe_txposer -> <S2SV_ModEnd> k_start = p_freq_band_tab,0
248,"<S2SV_ModStart> lua_module ) ; ap_lua_run_lua_request ( L, r ) ; ap_lua_run_lua_request ( L, r ) ; <S2SV_ModEnd> ap_lua_run_lua_request ( L",0
249,"<S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
250,<S2SV_ModStart> (! proto_end ||! url,0
251,<S2SV_ModStart> end = path <S2SV_ModEnd> ; do { <S2SV_ModStart> - FDT_ERR_BADSTRUCTURE ; if ( base < base ) return - FDT_ERR_BADSTRUCTURE ;,0
252,<S2SV_ModStart> ; if ( server. maxidletime ) server. maxidletime = server. maxidletime ; if (,0
253,<S2SV_ModStart> channel ) ; <S2SV_ModEnd> set_description ( client,1
254,<S2SV_ModStart> book -> dim && i < n,1
255,,0
256,<S2SV_ModStart> { if ( <S2SV_ModEnd> check_scale_factors ( other_w,0
257,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
258,"<S2SV_ModStart> -> pktoptions ; memset ( & skb, 0, sizeof ( skb ) ) ;",0
259,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> sctp_v6_protosw_exit ( ),0
260,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void show_psnr (,0
261,<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen (,1
262,"<S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_PHY1ILR <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID",0
263,"<S2SV_ModStart> skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
264,"<S2SV_ModStart> ( fit, IMAGE_SIZE_INVALID <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( fit, IMAGE_SIZE_INVALID <S2SV_ModEnd> ) ) {",0
265,"<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> uinput_fd, UI_DEV_DESTROY )",1
266,<S2SV_ModStart> ( rc -> avg_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_bandwidth <S2SV_ModEnd> * rc ->,0
267,<S2SV_ModStart> ) if ( strchr <S2SV_ModEnd> ( argv [,0
268,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
269,<S2SV_ModStart> ib ] ; <S2SV_ModEnd> dequant_ptr = d,1
270,<S2SV_ModStart> ( buff ) <S2SV_ModEnd> ) ; # <S2SV_ModStart> ( buff ) <S2SV_ModEnd> ) ; # <S2SV_ModStart> ( buff ) <S2SV_ModEnd> ) ; #,0
271,<S2SV_ModStart> decrypt_cb ) { unsigned int <S2SV_ModEnd> n = ( <S2SV_ModStart> n = ( unsigned int <S2SV_ModEnd> ) ( data_end,0
272,<S2SV_ModStart> getprivs_ret ret ; <S2SV_ModEnd> OM_uint32 minor_stat ; <S2SV_ModStart> errmsg ) ; exit_func : <S2SV_ModEnd> free_server_handle ( handle,0
273,"<S2SV_ModStart> int * returnra, int * returndistortion <S2SV_ModStart>, best_sse = INT_MAX <S2SV_ModEnd>, best_rd_sse = <S2SV_ModStart>, best_rd_sse = INT_MAX <S2SV_ModEnd>, best_rd_sse = <S2SV_ModStart>, best_rd_sse = INT_MAX <S2SV_ModEnd> ; # endif",0
274,<S2SV_ModStart> -> size = ( int ),0
275,"<S2SV_ModStart> ; UWORD8 u1_profile_idc = 0, u1_level_idc = 0, u1_seq_parameter_set_id = 0 <S2SV_ModEnd> ; UWORD16 i2_max_frm_num",0
276,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; <S2SV_ModEnd> if ( vp9_set_size_literal",0
277,"<S2SV_ModStart> out ) { uint32 <S2SV_ModEnd> bitspersample, samplesperpixel <S2SV_ModStart> ; uint16 input_compression = 0 ; uint32 input_photometric = 0 <S2SV_ModEnd> ; uint32 width",0
278,"<S2SV_ModStart> a ) { archive_set_error ( & a -> archive, <S2SV_ModEnd> a -> name <S2SV_ModStart> a -> name <S2SV_ModEnd>, errno, <S2SV_ModStart> ) ) { archive_set_error ( & a -> archive, <S2SV_ModEnd> errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"" <S2SV_ModStart> ) ) { archive_set_error ( & a -> archive, <S2SV_ModEnd> errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"" <S2SV_ModStart> ) ) { archive_set_error ( & a -> archive, <S2SV_ModEnd> errno, ""Removing <S2SV_blank> symlink <S2SV_blank> %s"" <S2SV_ModStart> ) ) { archive_set_error ( & a -> archive, <S2SV_ModEnd> errno, ""Cannot <S2SV_blank> remove <S2SV_blank> interrupt <S2SV_blank> symlink <S2SV_blank> %s""",0
279,<S2SV_ModStart> i_sb ) ; uint64_t <S2SV_ModEnd> link_count ; bh <S2SV_ModStart> ) { struct <S2SV_ModEnd> kernel_lb_addr loc ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> unlikely ( nbh,0
280,<S2SV_ModStart> TX_SIZE tx_size_uv = get_tx_size <S2SV_ModEnd> ( mbmi ),0
281,"<S2SV_ModStart> mq_ops ) { spin_lock <S2SV_ModEnd> ( & fq <S2SV_ModStart> mq_flush_lock, flags <S2SV_ModEnd> ) ; flush_rq",0
282,<S2SV_ModStart> uint8_t val ; if ( addr < vdev -> config_len ) return ( uint32_t ) - 1 ; <S2SV_ModStart> get_config ( vdev <S2SV_ModEnd> ) ; if,0
283,"<S2SV_ModStart> { option = safeStrchr <S2SV_ModEnd> ( option,",0
284,<S2SV_ModStart> ) sizeof ( effect_param_t <S2SV_ModEnd> ) ) {,0
285,<S2SV_ModStart> ++ ) { if ( key_data [ i ]. key_kvno!= currkvno ),0
286,"<S2SV_ModStart> ; memcpy ( sbuf <S2SV_ModEnd>, crgram,",0
287,<S2SV_ModStart> ) ) ; ret = - EINVAL ;,0
288,<S2SV_ModStart> ; } } return - 1 ;,1
289,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
290,<S2SV_ModStart> ; if ( recon_y_stride == yv12_fb_new -> uv_stride ) { if ( <S2SV_ModStart> ; } } },0
291,<S2SV_ModStart> ) ; } clone_info = DestroyImageList ( clone_info ) ;,0
292,<S2SV_ModStart> len ) { <S2SV_ModEnd> if ( len <S2SV_ModStart> s ++ ; <S2SV_ModEnd> } if ( <S2SV_ModStart> 10 ; } <S2SV_ModEnd> Py_DECREF ( w,0
293,"<S2SV_ModStart> struct stat stb <S2SV_ModEnd> ; BUF * <S2SV_ModStart> ; int setimes <S2SV_ModEnd>, wrerrno = <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( (",0
294,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
295,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
296,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
297,<S2SV_ModStart> u1_num_mbs ++ ; ps_dec -> u2_cur_slice -> u2_cur_slice_num = 0 ; ps_dec -> u2_cur_slice -> u2_cur_slice_num = 0 ; ps_dec -> u2_cur_slice -> u2_cur_slice_num = 0 ; ps_dec -> u2_cur_slice -> u2_cur_slice_num = 0 ;,0
298,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> vterm_allocator_free ( screen,1
299,"<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & delay )",1
300,"<S2SV_ModStart>, one, <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart> ) break ; if ( pixel_info_length < 1 ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
301,"<S2SV_ModStart> value ) { if ( strchr <S2SV_ModEnd> ( sclone ( <S2SV_ModStart> ( value ),'<S2SV_blank>') ) { <S2SV_ModEnd> httpSetRouteName ( state <S2SV_ModStart> ) ) ; }",0
302,"<S2SV_ModStart> ),. <S2SV_ModEnd> cmp = type <S2SV_ModStart> ),. <S2SV_ModEnd> cmp = type",0
303,<S2SV_ModStart> ; if ( clean ) clean = false ; if (,0
304,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
305,"<S2SV_ModStart> unused ) { <S2SV_ModEnd> _Py_IDENTIFIER ( __dict__ <S2SV_ModStart> __dict__ ) ; return <S2SV_ModEnd> Py_BuildValue ( ""O()O"" <S2SV_ModStart> Py_BuildValue ( ""O"" <S2SV_ModEnd>, Py_TYPE ( <S2SV_ModStart> dict ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
306,"<S2SV_ModStart> ) & desc, true",0
307,"<S2SV_ModStart> perf_event * ) <S2SV_ModEnd> ; switch ( <S2SV_ModStart> ) ; case PERF_EVENT_IOC_REFRESH : return perf_event_reload ( event, arg ) ; case",0
308,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> ) { const PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart>. uv_mode_prob [ y_mode <S2SV_ModEnd> ] ) ;",0
309,<S2SV_ModStart> ; if ( sha -> ctx_len < block_size ) return - EINVAL ; if (,0
310,,0
311,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
312,<S2SV_ModStart> iframe -> payloadleft >= <S2SV_ModEnd> inlen ) {,0
313,<S2SV_ModStart> ; x86_add_queries ( <S2SV_ModEnd> ) ; return,0
314,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ] ; const vpx_extra_bit <S2SV_ModEnd> * const b <S2SV_ModStart> b = & vpx_extra_bits <S2SV_ModEnd> [ t ]",0
315,"<S2SV_ModStart> struct vp9_write_bit_buffer wb <S2SV_ModEnd> ; struct vp9_write_bit_buffer <S2SV_ModStart> ; struct vp9_write_bit_buffer saved_wb ; memset ( & wb, 0, sizeof ( wb ) ) <S2SV_ModEnd> ; write_uncompressed_header ( <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> += uncompressed_hdr_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb",0
316,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
317,<S2SV_ModStart> struct ikev2_id id = { 0 },0
318,<S2SV_ModStart> cmpt ) ; <S2SV_ModEnd> return - 1,0
319,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
320,"<S2SV_ModStart> fft_jmp ; WORD32 xt0_0, xt1_0, xt1_0, xt1_0, xt1_0, xt1_0, xt2_0, xt2_0 ; WORD32 x_0, xt1_0, xt1_0, xt1_0, xt2_0 ; WORD32 x_0, xt1_0, xt1_0, xt1_0, xt2_0 ; WORD32 x_0, xt1_0, xt1_0, xt1_0, xt2_0 ; WORD32 x_0, xt1_0, xt1_0, xt2_0 ; WORD32 x_0, xt1_0, xt1_0, xt1_0, xt2_0 ; WORD32 x_0, xt1_0, xt1_0 ; WORD32 x_0, xt1_0, xt1_0, xt2_0 ; WORD32",0
321,<S2SV_ModStart> mntent ) { if (! mntent -> mnt_dir ) return - ENOENT ;,0
322,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
323,"<S2SV_ModStart> ( env, server_name_val, req_server_name_val ) ; rb_hash_aset ( env,",0
324,<S2SV_ModStart> endif int col_type <S2SV_ModEnd> ; MYSQL_BIND * <S2SV_ModStart> ; imp_sth_phb_t * <S2SV_ModEnd> fbind ; imp_sth_phb_t,0
325,<S2SV_ModStart> need = 0 <S2SV_ModEnd> ; CELL first,0
326,"<S2SV_ModStart> ( JsVarFloat val <S2SV_ModEnd>, char * <S2SV_ModStart> val ) ) strlcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> val ) ) strlcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> < 0 ) strlcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> ) ; else strlcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
327,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( fast_pool ->,0
328,"<S2SV_ModStart> LEX_ID ) { strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> ( str, ""ID:"" <S2SV_ModEnd> ) ; } <S2SV_ModStart> LEX_STR ) { strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> ( str, ""String:\'"" <S2SV_ModEnd> ) ; }",0
329,,1
330,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
331,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
332,<S2SV_ModStart> s2 ) { const char * s1 = * s2 ; const char * s2 = * s2 ; const char * s2 = * s2 ; const char * s2 = * s2 ; if ( s1 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2,0
333,"<S2SV_ModStart> { parse_global_option ( CMD_PRINT_HELP <S2SV_ModEnd>, NULL, <S2SV_ModStart> { parse_global_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL, <S2SV_ModStart> ; parse_service_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL, <S2SV_ModStart> ; parse_service_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL,",0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,<S2SV_ModStart> ) ) ; if ( st -> st_skeyid_e_nss!= NULL ),0
336,<S2SV_ModStart> ps_dec -> pu1_input_buffer && ps_dec -> pu1_input_buffer,0
337,<S2SV_ModStart> <S2SV_null> <S2SV_null> static void <S2SV_ModEnd> print_string ( cJSON <S2SV_ModStart> ) { return <S2SV_ModEnd> item -> valuestring,0
338,"<S2SV_ModStart>. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img,",0
339,<S2SV_ModStart> ; } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
340,<S2SV_ModStart> i < cols <S2SV_ModEnd> ; i ++,0
341,<S2SV_ModStart> ) ) { if ( i -> parent -> width > i -> parent -> height ) break ;,0
342,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
343,<S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_pps_valid ) { return IHEVCD_INVALID_HEADER ; },0
344,<S2SV_ModStart> ) ) { if ( c == '\\0' ) break ;,0
345,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( sun_info. width > sun_info. height ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
346,"<S2SV_ModStart> 0 ; } <S2SV_ModEnd> int rv = <S2SV_ModStart> 0600 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> dest ) ; <S2SV_ModEnd> _exit ( 0",0
347,<S2SV_ModStart> BLOCK_8X8 : return vpx_mse16x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> BLOCK_16X8 : return vpx_mse16x8 <S2SV_ModEnd> ; case BLOCK_8X16 <S2SV_ModStart> BLOCK_8X16 : return vpx_mse16x16 <S2SV_ModEnd> ; default : <S2SV_ModStart> default : return vpx_mse16x16 <S2SV_ModEnd> ; } },0
348,,0
349,"<S2SV_ModStart> flags ) ; memset ( vb, 0, sizeof ( vb ) ) ;",0
350,<S2SV_ModStart> size ) { if ( size == 0 ) return NULL ;,0
351,<S2SV_ModStart> -> serviceId == EXTRACT_32BITS <S2SV_ModEnd> && rxent ->,0
352,"<S2SV_ModStart> ; memset ( bss_desc <S2SV_ModEnd> -> ssid,",0
353,<S2SV_ModStart> ; } } if (! sbuf ) { error = - ENOMEM ; goto error ; },0
354,"<S2SV_ModStart> struct l2cap_conf_rfc rfc ; memset ( & rfc, 0, sizeof ( rfc ) ) <S2SV_ModEnd> ; void * <S2SV_ModStart> sk ) ; rfc. mode = L2CAP_MODE_BASIC ; rfc. txwin_size = L2CAP_DEFAULT_RX_WINDOW ; rfc. max_transmit = L2CAP_DEFAULT_MAX_RETRANS_TO ; rfc. retrans_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RETRANS_TO ) ; rfc. monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; rfc. monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; l2cap_add_conf_opt ( & ptr, L2CAP_CONF_RFC, sizeof ( rfc ), ( unsigned long ) & rfc ) <S2SV_ModEnd> ) ;",0
355,"<S2SV_ModStart> { do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> r, MSG_WAITALL )",0
356,<S2SV_ModStart> u4_length ) { if ( ps_dec -> u4_slice_start_code_found == 1 ) { return ERROR_INCOMPLETE_FRAME ; },0
357,<S2SV_ModStart> ( pair!= NULL <S2SV_ModEnd> ) { mprAddItem,0
358,"<S2SV_ModStart> * delegation, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> -> type & fmode <S2SV_ModEnd> )!= open_flags <S2SV_ModStart> ( state, fmode <S2SV_ModEnd>, & deleg_cur <S2SV_ModStart> -> stateid, fmode <S2SV_ModEnd> ) ; ret",0
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,<S2SV_ModStart> int sse ; int64_t rate_sum = 0 ; int64_t rate_sum = 0 ; int64_t rate_sum = 0 ; int64_t rate_sum = 0 ; int64_t rate_sum = 0 ; int64_t dist_sum = 0 ; int64_t rate_sum = 0 ; int64_t dist_sum = 0 ; int64_t dist_sum = 0 ; int64_t dist_sum = 0 ; int64_t dist_sum = 0 <S2SV_ModEnd> ; const BLOCK_SIZE <S2SV_ModStart> pd ) ; dist_sum = 0 ; dist_sum = 0 ; dist_sum = 0 ; dist_sum = 0 ; dist_sum = 0 ; dist_sum = 0 ; dist_sum = 0 ; dist_sum = 0 ; dist_sum = 0 ; dist_sum = 0 ; dist_sum = 0 ; dist_sum = 0 ; dist_sum = 0 ; dist_sum = 0 ; dist_sum = 0 ; dist_sum = 0 ; dist_sum = 0 ; dist_sum = 0 ; dist_sum = 0 ; dist_sum = 0 ; dist_sum = 0 ; dist_sum,0
361,<S2SV_ModStart> ; } } <S2SV_ModEnd> mincore_unmapped_range ( vma,0
362,<S2SV_ModStart> * ret_username = safe_calloc <S2SV_ModEnd> ( index +,0
363,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> ) { return vpx_read_tree <S2SV_ModEnd> ( r,",1
364,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",1
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,<S2SV_ModStart> depth ++ ; ND_TCHECK ( buf2 ) ;,0
367,"<S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_RXQCR, TXQCR_SDA <S2SV_ModEnd> ) ; ksz8851WriteFifo <S2SV_ModStart> ( interface, KSZ8851_RXQCR, TXQCR_SDA <S2SV_ModEnd> ) ; ksz8851ClearBit <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) ; n <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK",0
368,<S2SV_ModStart> ; # endif mono_gc_invoke_finalizers ( ) ;,0
369,"<S2SV_ModStart> x_7 ; WORD32 <S2SV_ModEnd> x_8, x_9 <S2SV_ModStart> x_0 + x_2 ; n01 = x_1 + x_3 ; n12 = x_1 + y_3 ; n12 = x_1 + y_3 ; n12 = x_1 + y_3 ; n12 = x_1 + y_3 ; n12 = x_1 + y_3 ; n12 = x_1 + y_3 ; n12 = x_1 + y_3 ; n12 = x_1 + y_3 ; n12 = x_1 + y_3 ; n12 = x_1 + y_3 ; n12 = x_1 + y_3 ; n12 = x_1 + y_3 ; n12 = x_1 + y_3 ; n12 = x_1 + y_3 ; n12 = x_1 + y_3 ; n12 = x_1 - y_3 ; n12 = x_1 - y_3 ; n12 = x_1 - y_3 ; n12 = x_1 - y3 ; n12 = x_1 - y3 ;",0
370,<S2SV_ModStart> end ) ; <S2SV_ModEnd> ret = unuse_pte_range,0
371,"<S2SV_ModStart> ""Incorrect <S2SV_blank> parameters:\\n"" ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> ] ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> ] ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> fout ) ; <S2SV_ModEnd> return 1 ;",0
372,"<S2SV_ModStart> i, result <S2SV_ModEnd> ; PyObject *",1
373,"<S2SV_ModStart> vpx_codec_alg_priv * priv <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> priv ) { vpx_calloc ( priv -> base, sizeof ( * priv -> base ) <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> struct vpx_codec_alg_priv ), mr_cfg ) ; <S2SV_ModEnd> return VPX_CODEC_MEM_ERROR ; <S2SV_ModStart> VPX_CODEC_MEM_ERROR ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
374,<S2SV_ModStart> ++ ; } <S2SV_ModEnd> pixel -> freq,0
375,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx ->,0
376,"<S2SV_ModStart> ; } } else if ( unlikely ( iinfo -> i_sb -> s_type == S_IFREG ) ) { udf_debug ( inode -> i_sb, ""(inode <S2SV_blank> %ld) <S2SV_blank> in <S2SV_blank> %s\\n"", inode -> i_sb, iinfo -> i_sb -> s_type ) ; goto out ; }",0
377,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0",1
378,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int bad_format_imginfo (,0
379,"<S2SV_ModStart> ; UtRegisterTest ( ""DefragAllowedTest"", DefragAllowedTest ) ; UtRegisterTest (",0
380,<S2SV_ModStart> = object_length ; new_object. length = 0 ;,0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,<S2SV_ModStart> p_sys ) ; <S2SV_ModEnd> if ( p_sys,0
384,<S2SV_ModStart> ; exit_mf : <S2SV_ModEnd> free_stream ( s,0
385,<S2SV_ModStart> 4 ) ; assert ( len > 0 ) ; <S2SV_ModStart> ; j < <S2SV_ModEnd> a -> names,0
386,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
387,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
388,"<S2SV_ModStart> data_size ) { if ( data_size < 0 ) { av_log ( ctx -> log_ctx, AV_LOG_WARNING, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> data <S2SV_blank> size <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large.\\n"", data_size ) ; return AVERROR_INVALIDDATA ; }",0
389,"<S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 1 ) ) == TYPE_COMMENT ) { ast_error ( c, ch, ""illegal <S2SV_blank> expression <S2SV_blank> for <S2SV_blank> augmented <S2SV_blank> assignment"" ) ; return NULL ; } if (",0
390,"<S2SV_ModStart> int vp8_denoiser_filter_c ( YV12_BUFFER_CONFIG * mc_running_avg_y, YV12_BUFFER_CONFIG * running_avg_y, YV12_BUFFER_CONFIG * running_avg_y, YV12_BUFFER_CONFIG * running_avg_y, YV12_BUFFER_CONFIG * running_avg_y, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * <S2SV_ModEnd> running_avg_y = running_avg <S2SV_ModStart> unsigned char * <S2SV_ModEnd> running_avg_y = running_avg <S2SV_ModStart> unsigned char * <S2SV_ModEnd> running_avg_y = running_avg <S2SV_ModStart> c, i <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( absdiff <= 3 ) { running_avg_y [ c ] = mc_running_avg_y [ c ] ; else running_avg_y [ c ] = mc_running_avg_y [ c ] ; else running_avg_y [ c ] = mc_running_avg_y [ c ] ; else running_avg_y [ c ] = mc_running_avg",0
391,<S2SV_ModStart> ; } } if ( result == SOCK_CONTINUE ) { return SOCK_CONTINUE ; },0
392,<S2SV_ModStart> = uregs ; <S2SV_ModEnd> # if XTENSA_HAVE_COPROCESS,0
393,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
394,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" <S2SV_ModStart> "" <S2SV_blank> remote_dev: <S2SV_blank> %p <S2SV_blank> remote_dev->dev_group: <S2SV_blank> %p\\n"", xop <S2SV_ModEnd>, & remote_dev",0
395,"<S2SV_ModStart> if ( header && header == HDR ( new_bh ) <S2SV_ModStart> ext2_xattr_cache_insert ( new_bh, header",0
396,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
397,"<S2SV_ModStart> ) ) ; if ( ( size_t ) ( size_t ) ( size_t ) image -> rows ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
398,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
399,"<S2SV_ModStart> AcquireQuantumMemory ( imsx <S2SV_ModEnd>, 1 )",0
400,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; memset ( frame -> img, 0, sizeof ( frame -> img ) ) ;",0
401,<S2SV_ModStart> u1_num_mbs ++ ; ps_dec -> u2_cur_slice -> u2_cur_slice_num = 0 ; ps_dec -> u2_cur_slice -> u2_cur_slice_num = 0 ; ps_dec -> u2_cur_slice -> u2_cur_slice_num = 0 ; ps_dec -> u2_cur_slice -> u2_cur_slice_num = 0 ;,0
402,"<S2SV_ModStart>, u4_y_offset ; <S2SV_ModEnd>  UWORD8 * <S2SV_ModStart> ) impeg2d_dec_pnb_mb_params ( <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) impeg2d_dec_p_mb_params ( <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) impeg2d_dec_p_mb_params ( <S2SV_ModEnd> ) ; }",0
403,<S2SV_ModStart> ) { const VP9EncoderConfig <S2SV_ModEnd> * const cfg,0
404,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
405,"<S2SV_ModStart> tx_size = plane? <S2SV_ModEnd> get_uv_tx_size ( mbmi <S2SV_ModStart> get_uv_tx_size ( mbmi ) : mbmi -> tx_size ; const PRINTF ( ""%s: <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank>",0
406,<S2SV_ModStart> ++ ) { <S2SV_ModEnd> src += src_stride,0
407,<S2SV_ModStart> row + img <S2SV_ModEnd> -> row_offset ),0
408,<S2SV_ModStart> ; } } <S2SV_ModEnd> return 0 ;,0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. <S2SV_ModEnd> header [ psf <S2SV_ModStart> [ psf -> header. <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
410,<S2SV_ModStart> num & ( 1U << <S2SV_ModEnd> ( number -,0
411,"<S2SV_ModStart> ] ; const size_t <S2SV_ModEnd> w = vpx_img_plane_width <S2SV_ModStart>, plane ) ; const size_t <S2SV_ModEnd> h = vpx_img_plane_height",0
412,<S2SV_ModStart> ; uint16_t attr_len = 0 <S2SV_ModStart> ; uint16_t last_block_len = 0 <S2SV_ModStart> ; uint16_t last_block_len = 0 <S2SV_ModStart> ; uint16_t last_block_len = 0 <S2SV_ModStart> ; uint16_t prev_block_len = 0 <S2SV_ModStart> ; uint16_t prev_block_len = 0 <S2SV_ModStart> ; uint16_t prev_block_len = 0 <S2SV_ModStart> ; uint16_t prev_block_len = 0 <S2SV_ModStart> ; uint16_t prev_block_len = 0 <S2SV_ModStart> ; uint16_t prev_block_len = 0 <S2SV_ModStart> ; uint16_t prev_block_len = 0 <S2SV_ModStart> ; uint16_t prev_block_len = 0 <S2SV_ModStart> ; uint16_t prev_block_len = 0 <S2SV_ModStart> ; uint16_t prev_block_len = 0 <S2SV_ModStart> ; uint16_t prev_block_len = 0 <S2SV_ModStart> ; uint16_t prev_block_len = 0 <S2SV_ModStart> ; uint16_t prev_block_len = 0 <S2SV_ModStart> ; uint16_t prev_block_len = 0 <S2SV_ModStart> ; uint16_t prev_block_len = 0 <S2SV_ModStart> ; uint16_t prev_,0
413,<S2SV_ModStart> len ) ; <S2SV_ModEnd> return 1 ;,0
414,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",0
415,"<S2SV_ModStart> ; BT_DBG ( ""sock <S2SV_blank> %p, <S2SV_blank> sk <S2SV_blank> %pK"" <S2SV_ModEnd>, sock,",0
416,"<S2SV_ModStart> MT_CPTYPE_PASSSALT ) { memcpy <S2SV_ModEnd> ( pass_salt,",0
417,<S2SV_ModStart> ) { goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } else <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } },0
418,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
419,<S2SV_ModStart> ) ) ; close ( gpsd_sock ) ;,0
420,"<S2SV_ModStart>, & rlen, 0",1
421,<S2SV_ModStart> * slavename ; struct mt_session * session = curconn -> session ; <S2SV_ModStart> } # endif session = get_session ( curconn -> session ) ; if ( session ) { session = get_session ( curconn -> session ) ; if ( session == NULL ) session = get_session ( curconn -> session ) ; if ( session == NULL ) session = get_session ( curconn -> session ) ; else session = get_session ( curconn -> session ) ; if ( session == NULL ) session = get_session ( curconn -> session ) ; else session = get_session ( curconn -> session ) ; if ( session == NULL ) session = get_session ( curconn -> session ) ; if ( session == NULL ) session = get_session ( curconn -> session ) ; else session = get_session ( curconn -> session ) ; if ( session == NULL ) session = get_session ( curconn -> session ) ; else session = get_session ( curconn -> session ) ; if ( session == NULL ) session = get_session ( curconn -> session ) ; else session = get_session ( curconn -> session ) ; if ( session == NULL ) session = get_session (,0
422,"<S2SV_ModStart> ; if ( safe_strchr <S2SV_ModEnd> ( name, <S2SV_ModStart> { if ( safe_strchr <S2SV_ModEnd> ( name,",0
423,<S2SV_ModStart> off } ; if ( strlen ( str ) > sizeof ( buf ) ) { return - 1 ; },0
424,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
425,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
426,"<S2SV_ModStart> ; if ( CHECKOVERFLOW <S2SV_ModEnd> ( o,",0
427,<S2SV_ModStart> bd_addr ) { if (! btif_dm_remove_bond ( bd_addr ) ) return BT_STATUS_INVALID_PARAM ;,0
428,<S2SV_ModStart> i ; int <S2SV_ModEnd> expect ; txid <S2SV_ModStart> buf -> cursor <S2SV_ModEnd> ; xmin =,0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. <S2SV_ModEnd> header [ psf <S2SV_ModStart> [ psf -> header. <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
430,<S2SV_ModStart> * epoll = TEMP_FAILURE_RETRY ( <S2SV_ModStart> _cast_epoll ( epoll_ ),0
431,"<S2SV_ModStart> { errstr = parse_global_options ( CMD_INITIALIZE <S2SV_ModEnd>, NULL, <S2SV_ModStart> eof ) { <S2SV_ModEnd> s_log ( LOG_INFO <S2SV_ModStart> ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"" <S2SV_ModEnd>, ( * <S2SV_ModStart> ; errstr = parse_service_options ( CMD_INITIALIZE <S2SV_ModEnd>, section_ptr,",0
432,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_MAX : * ( size_t * ) val = ms -> elf_max ; return 0 ;,0
433,"<S2SV_ModStart> offset ) { unsigned long flags ; unsigned long flags ; spin_lock_irqsave ( & page -> lock, flags ) ; <S2SV_ModStart> mapping -> host ) ; spin_unlock_irqrestore ( & page -> lock, flags",0
434,<S2SV_ModStart> + 1 ) ; if (! writer ) return GF_OUT_OF_MEM,0
435,"<S2SV_ModStart> ] ; int plen <S2SV_ModEnd> ; md5_state_t state <S2SV_ModStart> ; # endif md5sum [ 0 ] = 0 ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> memcpy ( md5data <S2SV_ModStart> ; memcpy ( <S2SV_ModEnd> md5data + 1 <S2SV_ModStart> ) md5data, <S2SV_ModEnd> pass_salt, 16 <S2SV_ModStart> 16 ) ; <S2SV_ModEnd> init_packet ( &",0
436,<S2SV_ModStart> ; if ( <S2SV_ModEnd> Prefix!= NULL,1
437,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
438,<S2SV_ModStart> ( ) ; g_free ( headers ) ;,0
439,"<S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst,",0
440,"<S2SV_ModStart> * cpi, <S2SV_ModEnd> TileInfo * const <S2SV_ModStart> int mi_col ; vpx_memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; vpx_memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> ) { int64_t <S2SV_ModEnd> dummy_dist ; BLOCK_SIZE <S2SV_ModStart> ( i = BLOCK_4X4 ; i < BLOCK_8X8 ; ++ i ) { const int num_4x4_w = num_4x4_blocks_high_lookup [ i ] ; const int num_4x4_w = num_4x4_blocks_high_lookup [ i ] ; const int num_4x4_blk = MAX ( 4, num_4x4_blk * num_4x4_blk * num_4x4_blk ) ; const int num_4x4_blk = MAX ( 4, num_4x4_blk * num_4x4_blk ) ; const int num_4x4_blk = MAX ( 4, num_4x4_blk * num_4x4_",0
441,"<S2SV_ModStart>, obj_tlen ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset <S2SV_ModEnd> ; u_int offset <S2SV_ModStart> ) ) ; offset = offset",0
442,"<S2SV_ModStart> mbmi, const MV <S2SV_ModEnd> * mvs [",0
443,<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ),0
444,"<S2SV_ModStart> ; if ( skb_expand_head_safe <S2SV_ModEnd> ( skb_out,",0
445,<S2SV_ModStart> ) return ; <S2SV_ModEnd> DEBUGMSGTL ( (,0
446,"<S2SV_ModStart> { fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, O_RDWR ) ) <S2SV_ModStart> 1 ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_KEY ) ) <S2SV_ModStart> ; x ++ ) TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_REL ) )",0
447,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
448,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s,",0
449,"<S2SV_ModStart> iakerb_ctx_id_t * pctx, krb5_error_code code ) { <S2SV_ModEnd> krb5_gss_init_context ( &",0
450,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> bitmapDC = CreateCompatibleDC",1
451,<S2SV_ModStart> ; while ( ( <S2SV_ModStart> )!= START_CODE_PREFIX ) && ( ps_stream -> u4_offset < ps_stream -> u4_max_offset ),1
452,<S2SV_ModStart> return - EINVAL <S2SV_ModEnd> ; if (,0
453,<S2SV_ModStart> ) ) ; g_assert ( mono_method_has_internal ( klass ) ) ;,0
454,<S2SV_ModStart> ; int tmp ; if ( count > sizeof ( buf ) ) return - EINVAL,0
455,"<S2SV_ModStart>, * wp <S2SV_ModEnd> ; do { <S2SV_ModStart> 'O' )? _dl_platform : _dl_platform <S2SV_ModEnd> ; if (",0
456,<S2SV_ModStart> decContainer_t * ) H264SwDecMalloc <S2SV_ModEnd> ( sizeof (,0
457,<S2SV_ModStart> drop ; } <S2SV_ModEnd> opt -> optlen,0
458,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
459,<S2SV_ModStart> goto errout ; if ( info -> stagebook >= ci -> books ) goto errout ;,0
460,<S2SV_ModStart> krb5_key_data * key_data = NULL <S2SV_ModStart> err ) ; <S2SV_ModEnd> memcpy ( key_data,0
461,"<S2SV_ModStart> Py_ssize_t idx, Py_ssize_t <S2SV_ModEnd> * value )",0
462,<S2SV_ModStart> ] ) ; sqlite3_free ( pCsr ) ;,0
463,<S2SV_ModStart> filp ) { __sock_release <S2SV_ModEnd> ( SOCKET_I (,0
464,"<S2SV_ModStart> asdl_seq * orelse <S2SV_ModEnd>, int col_offset",0
465,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> my_bool <S2SV_ModEnd> mi_sort_index ( MI_CHECK <S2SV_ModStart> * param, my_bool <S2SV_ModEnd> * name )",0
466,"<S2SV_ModStart> ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> channels"" ; case NGHTTP2_ERR_UNSUPPORTED_DATA_EXISTING : return ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> channels"" ; case",0
467,"<S2SV_ModStart> UINT error ; UINT16 <S2SV_ModEnd> ( s,",0
468,"<S2SV_ModStart> -> socket, ""%s"",",0
469,"<S2SV_ModStart> struct flowi6 fl6 ; memset ( & fl6, 0, sizeof ( fl6 ) ) <S2SV_ModStart> daddr ) ; <S2SV_ModEnd> if (!",0
470,<S2SV_ModStart> ; MATLAB_KO : if ( clone_info ),0
471,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
472,"<S2SV_ModStart> ; int len = 0, result = RLC_OK ; bn_t t ; bn_t t ; bn_new ( t ) ; switch ( operation ) { case RSA_ENC : bn_zero ( m ) ; bn_lsh ( m, m, 8 ) ; bn_lsh ( m, m, RSA_PUB ) ; * p_len = k_len - 3 - m_len ; for ( int i = 0 ; i < * p_len ; i ++ ) { bn_lsh ( m, m, 8 ) ; if (! bn_is_zero ( t ) ) { result = RLC_ERR ; } * p_len = m_len ; m_len -- ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; if ( pad!= RSA_PUB ) { result = RLC_ERR ; } else { result = RLC_ERR ; } * p_len = m_len ; m_len -- ; bn_rsh ( t, m, 8 * m",0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,"<S2SV_ModStart> ( psf = _calloc <S2SV_ModEnd> ( 1,",0
475,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fix_interp_filter ( VP9_COMMON <S2SV_ModStart> i ] += ( int ),0
476,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> VP9_COMMON * const <S2SV_ModStart> mi_cols ) ; <S2SV_ModEnd> vp9_setup_src_planes ( x <S2SV_ModStart> subsampling_y ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
477,<S2SV_ModStart> hp ) ; if ( retval!= 0 ) { <S2SV_ModStart> ) ; } },0
478,"<S2SV_ModStart> define EOFOp 0x07 <S2SV_ModEnd> char magick [ <S2SV_ModStart> ) ) ; if ( ( count!= 2 ) || ( memcmp ( magick, ""\\122\\314"", 2 )!= 0 ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ; do { if ( ( count!= 2 ) || ( memcmp ( magick, ""\\122\\314"", 2 )!= 0 ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
479,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> sizeof ( tETH_HDR ),1
480,<S2SV_ModStart> ; ps_dec -> i4_cur_slice_num = 0 ; ps_dec ->,0
481,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> * karg ; <S2SV_ModEnd> int iocnum ; <S2SV_ModStart> ) ) ; goto out <S2SV_ModEnd> ; } if <S2SV_ModStart> karg ) ; goto out <S2SV_ModEnd> ; } if",0
482,"<S2SV_ModStart> ; pixels = <S2SV_ModEnd> AcquireQuantumMemory ( image <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; if ( pixels == ( unsigned char * ) NULL ) ThrowReaderException ( ResourceLimitError, ""MemoryAllocationFailed"" ) ;",0
483,"<S2SV_ModStart> } else { ERROR <S2SV_ModEnd> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", <S2SV_ModStart> } else { ERROR <S2SV_ModEnd> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", <S2SV_ModStart> } else { ERROR <S2SV_ModEnd> ( ""Player <S2SV_blank> name <S2SV_blank> expected <S2SV_blank> after <S2SV_blank> -u"" )",0
484,"<S2SV_ModStart> ; if ( buf_size < 2 ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if (",0
485,"<S2SV_ModStart> charbuf ), ""%s"",",0
486,<S2SV_ModStart> void ) { CRYPTO_THREAD_lock ( stunnel_locks [ LOCK_SECTIONS ] ) ; <S2SV_ModStart> ] ) ; <S2SV_ModEnd> while ( opt <S2SV_ModStart> 0 ; } <S2SV_ModEnd> s_log ( LOG_DEBUG,0
487,<S2SV_ModStart> void ) { if ( mnemonic ),0
488,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ;",0
489,"<S2SV_ModStart> image ) ; status = SetImageExtent ( image, image ) ; if ( status == MagickFalse ) { ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; return ( DestroyImageList ( image ) ) ; }",0
490,<S2SV_ModStart> ps_slice_hdr ) { <S2SV_ModEnd> WORD32 st_rps_idx ;,0
491,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char * print_object <S2SV_ModStart> = 0 ; char * * out = NULL ; <S2SV_ModStart> child ) { <S2SV_ModEnd> child = child <S2SV_ModStart> child -> string ) ; entries [ i ++ ] = ret = print_value ( child, depth, fmt ) ; if ( str && ret ) len += strlen ( str ) + strlen ( str ) + 2 + ( fmt? 2 + depth : 0 ) ; else fail = 1 ; child = child -> next ; } if (! fail ) { for ( i = 0 ; i < numentries ; ++ i ) { if ( fmt ) * ptr ++ = '\\n' ; * ptr ++ = '\\n' ; * ptr ++ = '\\n' ; * ptr = 0 ; for ( j = 0 ; j < depth ; ++ j ) * ptr ++ = 0 ; for ( j = 0 ; j < depth ; ++ j ) * ptr ++ = 0 ; for ( j = 0 ; j < depth ; ++ j ) * ptr ++ = 0 ; for ( j = 0 ; j < depth ; ++ j ) * ptr ++ = 0 ; for",0
492,<S2SV_ModStart> ; other = unix_dgram_peer_get <S2SV_ModEnd> ( sk ) <S2SV_ModStart> { if ( unix_dgram_peer_get <S2SV_ModEnd> ( other ) <S2SV_ModStart> ; if ( unix_dgram_peer_get <S2SV_ModEnd> ( other ),0
493,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; sendClean ( outputbuffer ) ;",0
494,<S2SV_ModStart> ( OM_uint32 ) KRB5_BAD_MSIZE <S2SV_ModEnd> ; return GSS_S_DEFECTIVE_TOKEN,0
495,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> ( args, vpx_ref_frame_t <S2SV_ModEnd> * ) ;",0
496,<S2SV_ModStart> plug ) ; <S2SV_ModEnd> put_ioctx ( ctx,0
497,"<S2SV_ModStart>, int rep_quick, my_off_t new_size <S2SV_ModStart> rec_per_key_part ) { my_off_t new_size = MYF ( MY_WME ) ; if ( new_size < MYF ( MY_WME ) ) { my_off_t new_size = MYF ( MY_WME ) ; if ( new_size < MYF ( MY_WME ) ) new_size = MYF ( MY_WME ) ; } else new_size = MYF ( MY_WME ) ; if ( new_size < MYF ( MY_WME ) ) new_size = MYF ( MY_WME ) ; else new_size = MYF ( MY_WME ) ; if ( new_size < MYF ( MY_WME ) ) new_size = MYF ( MY_WME ) ; else new_size = MYF ( MY_WME ) ; if ( new_size < MYF ( MY_WME ) ) new_size = MYF ( MY_WME ) ; else new_size = MYF ( MY_WME ) ; if ( new_size < MY_",0
498,"<S2SV_ModStart> s } ; uECC_word_t carry ; wordcount_t num_words = curve -> num_words ; if ( uECC_vLI_NATIVE_LITTLE_ENDIAN ( k, curve -> num_n_bits ) ) { return 0 ; } if ( uECC_vli_isZero ( p, num_n_bits ) ) { return 0 ; } if ( uECC_vli_isZero ( p, num_words ) ) { return 0 ; } if ( uECC_vli_isZero ( p, num_words ) ) { return 0 ; } if ( uECC_vli_isZero ( p, num_n_words ) ) { return 0 ; } if ( uECC_vli_isZero ( p, num_n_words ) ) { return 0 ; } if ( uECC_vli_isZero ( p, num_n_words ) ) { return 0 ; } if ( uECC_vli_isZero ( p, num_n_words ) ) { return 0 ; } if ( uECC_vli_isZero ( p,",0
499,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|dao-truncated]"" <S2SV_ModEnd> ) ) ;",0
500,<S2SV_ModStart> ; } else if ( pool -> free_total < pool -> free_total ) <S2SV_ModStart> ) ; } else { free ( pool -> free_arr ) ; },0
501,<S2SV_ModStart> cp ; { <S2SV_ModEnd> const char * <S2SV_ModStart> cp ) { <S2SV_ModEnd> const char * <S2SV_ModStart> cp ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
503,"<S2SV_ModStart> pixc, * pixc <S2SV_ModEnd> ; PIXCMAP * <S2SV_ModStart> == NULL ) { pixc = pixFewColorsOctcubeQuant1 ( pixs, level ) ; <S2SV_ModStart> NULL ) ; }",0
504,"<S2SV_ModStart> = 256 ; memset ( v_fn_ptr, 0, sizeof ( v_fn_ptr ) ) ;",0
505,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> overhead = 16 <S2SV_ModStart> + 1 ; size_t <S2SV_ModEnd> size = overhead,1
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
507,"<S2SV_ModStart> ; int i <S2SV_ModEnd> ; const double <S2SV_ModStart>, i, active_worst_quality <S2SV_ModEnd> ) ; if",0
508,<S2SV_ModStart> ; value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1101WritePhyReg (,0
509,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
510,"<S2SV_ModStart> int dst_stride, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart> plane ] ; memset <S2SV_ModEnd> ( left_col,",0
511,"<S2SV_ModStart> ++ ; } if ( end >= end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> NULL <S2SV_blank> pattern\\n"" ) ; goto error ; }",0
512,<S2SV_ModStart> i_completed_io_list ) ; <S2SV_ModEnd> ei -> i_sync_tid,0
513,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; if ( <S2SV_ModEnd> frame_type == KEY_FRAME <S2SV_ModStart> KEY_FRAME ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> profile == PROFILE_1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> profile == PROFILE_1 ) ; vpx_wb",0
514,"<S2SV_ModStart> ) ; } if ( strchr ( argv [ 1 ], '\\n' ) ) { if ( strchr ( argv [ 1 ], '\\n' ) ) { if ( strchr ( argv [ 1 ], '\\n' ) ) { if ( strchr ( argv [ 1 ], '\\n' ) ) { if ( strchr ( argv [ 1 ], '\\n' ) ) { if ( strchr ( argv [ 1 ], '\\n' ) ) { if ( strchr ( argv [ 1 ], '\\n' ) ) { if ( strchr ( argv [ 1 ], '\\n' ) ) { if ( strchr ( argv [ 1 ], '\\n' ) ) { if ( strchr ( argv [ 1 ], '\\n' ) ) { if ( strchr ( argv [ 1 ], '\\n' ) ) { if ( strchr ( argv [ 1 ], '\\n' ) ) { if ( strchr ( argv [ 1 ], '\\n' ) ) { if ( str",0
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { q = osStrchr <S2SV_ModEnd> ( p +,1
516,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
517,<S2SV_ModStart> KEY_FRAME ) { memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd ->,0
518,"<S2SV_ModStart> error_t error ; <S2SV_ModEnd> Enc624j600Context * context <S2SV_ModStart> ; uint32_t status <S2SV_ModEnd> ; if ( <S2SV_ModStart> ESTAT_PKTCNT ) { enc624j600WriteReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) ; enc624j600WriteReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) ; enc624j600ReadBuffer <S2SV_ModEnd> ( interface, <S2SV_ModStart>, ENC624J600_CMD_RRXDATA, <S2SV_ModEnd> & status, <S2SV_ModStart> status ) ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> 0 ) { enc624j600WriteReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, ENC624J600_RXDATA, ENC624J600_RX_BUFFER_STOP <S2SV_ModEnd> ) ; error <S2SV_ModStart> } else { enc624j600WriteReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, ENC624J600_RXDATA, ENC624J600_RX_BUFFER_STOP <S2SV_ModEnd> ) ; }",0
519,<S2SV_ModStart> VALUE read_memory ( <S2SV_ModEnd> VALUE content ) <S2SV_ModStart> xmlSchemaPtr schema ; <S2SV_ModEnd> VALUE errors =,0
520,"<S2SV_ModStart> ( LOG_ERR, ""Cannot <S2SV_blank> open <S2SV_blank> configuration <S2SV_blank> file"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( LOG_ERR, ""Cannot <S2SV_blank> open <S2SV_blank> configuration <S2SV_blank> file"" <S2SV_ModEnd> ) ; return",0
521,<S2SV_ModStart> ; out += 3 <S2SV_ModEnd> ; } state <S2SV_ModStart> ; out += 3 <S2SV_ModEnd> ; } state,1
522,<S2SV_ModStart> err = - <S2SV_ModEnd> EALREADY ; if,0
523,<S2SV_ModStart> POLL_IN ) ; mutex_lock ( & handle -> event_mutex ) ; <S2SV_ModStart> nmi ) { mutex_unlock ( & handle -> event_mutex ) ; <S2SV_ModStart> pending ) ; mutex_unlock ( & handle -> event_mutex ) ;,0
524,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( * s <S2SV_ModEnd> ) { if <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> op ++ = <S2SV_ModStart> PLANE_SIZE ) { <S2SV_ModEnd> op ++ = <S2SV_ModStart> } else { <S2SV_ModEnd> op ++ = <S2SV_ModStart> ++ = * s <S2SV_ModEnd> ; } },0
525,"<S2SV_ModStart> { print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" <S2SV_ModEnd> ) ; if",0
526,"<S2SV_ModStart> ( status & ( RXFHSR_RXFHSR | RXFHSR_RXFC | RXFHSR_RXFC | RXFHSR_RXFC | RXFHSR_RXFC | RXFHSR_RXCE | RXFHSR_RXCE | RXFHSR_RXCE | RXFHSR_RXCE | RXFHSR_RXCE | RXFHSR_RXCE <S2SV_ModEnd> ) ) == <S2SV_ModStart> ( status & ( RXFHSR_RXFC | RXFHSR_RXFC | RXFHSR_RXFC | RXFHSR_RXFC | RXFHSR_RXFC | RXFHSR_RXCE ) <S2SV_ModEnd> ) ) == <S2SV_ModStart> ( interface, <S2SV_ModEnd> TXFDPR_RXFPAI ) ; <S2SV_ModStart> ( interface, <S2SV_ModEnd> n ) ; <S2SV_ModStart> ( interface, <S2SV_ModEnd> n ) ;",0
527,"<S2SV_ModStart> * c, <S2SV_ModEnd> asdl_seq * decorator_seq <S2SV_ModStart> asdl_seq * decorator_seq <S2SV_ModEnd> ) { identifier <S2SV_ModStart>, type_comment, <S2SV_ModEnd> n -> n_col_offset",0
528,<S2SV_ModStart> int i ; struct mm_struct * mm = mm -> mm ; struct mm_struct * mm = mm -> mm ; struct mm_struct * mm = mm -> mm ; struct mm_struct * mm = mm -> mm ; struct mm_struct * mm = mm -> mm ; struct mm_struct * mm = mm -> mm ; struct mm_struct * mm = mm -> mm ; struct mm_struct * mm = mm -> mm ; mm -> mm = mm ; mm -> mm = mm ; mm -> mm = mm ; mm -> mm = mm ; mm -> mm = mm ; mm -> mm = mm ; mm -> mm = mm ; mm -> mm = mm ; mm -> mm = mm ; mm -> mm = mm ; mm -> mm = mm ; mm -> mm = mm ; mm -> mm = mm ; mm -> mm = mm ; mm -> mm = mm <S2SV_ModEnd> ; } <S2SV_null>,0
529,"<S2SV_ModStart> { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> missing <S2SV_blank> packet <S2SV_blank> header"" <S2SV_ModEnd> ) ; return",0
530,<S2SV_ModStart> ; if ( bdaddr_is_empty ( & bdaddr ) ) { break ; } if (,0
531,<S2SV_ModStart> ; row < raw_width <S2SV_ModEnd> ; row ++,0
532,<S2SV_ModStart> len < needed ||! nl,0
533,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; quantum_info = DestroyQuantum ( quantum_info ) ;",0
534,<S2SV_ModStart> ( bfqq ) { spin_lock_bh ( & bfq_lock ) ; <S2SV_ModStart> ( bfqq ) ; spin_unlock_bh ( & bfq_lock ),0
535,<S2SV_ModStart> ; length += <S2SV_ModEnd> update_prepare_bounds ( context,0
536,<S2SV_ModStart> ; if ( <S2SV_ModEnd>! OVL_TYPE_UPPER ( <S2SV_ModStart>! OVL_TYPE_UPPER ( new_upperdir <S2SV_ModEnd> ) ) {,0
537,"<S2SV_ModStart> int plane ; memset ( xd, 0, sizeof ( xd ) ) ;",0
538,"<S2SV_ModStart> * cpi, <S2SV_ModEnd> int tile, <S2SV_ModStart> ( cpi, x <S2SV_ModEnd>, mi_row, <S2SV_ModStart>, x, x <S2SV_ModEnd>, mi_row,",0
539,<S2SV_ModStart> = NULL ; reader. gcol = NULL ; reader. gcol = NULL ;,0
540,<S2SV_ModStart> -> ranges = safe_calloc <S2SV_ModEnd> ( sizeof (,0
541,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flags & VP8_EFLAG_NO_UPD_GF <S2SV_ModStart> flags & VP8_EFLAG_FORCE_GF <S2SV_ModEnd> ) { ctx,0
542,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; quantum_info = DestroyQuantum ( quantum_info ) ;",0
543,<S2SV_ModStart>! head ) <S2SV_ModEnd> return - EINVAL <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
544,"<S2SV_ModStart> * pptr, u_int <S2SV_ModEnd> len ) { <S2SV_ModStart> * pptr, u_int <S2SV_ModEnd> len ) {",0
545,"<S2SV_ModStart> ) ; } if ( Run. files. log ) StringBuffer_append ( res -> outputbuffer, ""<tr><td>Controlfile</td><td>%s</td></tr>"", Run. files. log ) ;",0
546,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
547,<S2SV_ModStart> ; ethereumFormatStr ( <S2SV_ModEnd> msg -> name <S2SV_ModStart> ; ethereumFormatStr ( <S2SV_ModEnd> msg -> name <S2SV_ModStart> ; ethereumFormatStr ( <S2SV_ModEnd> msg -> name,0
548,"<S2SV_ModStart> ; } } if ( size2 < sizeof ( struct usb_interface_cache ) ) { dev_err ( ddev, ""Invalid <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> interface <S2SV_blank> index\\n"" ) ; return - EINVAL ; }",0
549,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",0
550,<S2SV_ModStart> ; distortion = vpx_variance16x16 <S2SV_ModEnd> ( * (,1
551,"<S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd>, ECON2_ETHEN | <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_ECON3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_ECON3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_ECON3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_ECON3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_ECON3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_ECON3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_ECON3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_ECON3 <S2SV_ModEnd>",0
552,<S2SV_ModStart> ; maxlen = psf_strlen <S2SV_ModEnd> ( ( char <S2SV_ModStart> ; start = psf_strlen <S2SV_ModEnd> ( ( char <S2SV_ModStart> ; maxlen = psf_strlen <S2SV_ModEnd> ( ( char,0
553,<S2SV_ModStart> ( ctx -> <S2SV_ModEnd> iface -> destroy <S2SV_ModStart> ( ctx -> <S2SV_ModEnd> iface = NULL,0
554,<S2SV_ModStart> { sf -> <S2SV_ModEnd> inode_loop = ( <S2SV_ModStart> { sf -> <S2SV_ModEnd> less_rectangular_check = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> tx_size_search_method = vp9_frame_is_boosted <S2SV_ModStart> ; sf -> <S2SV_ModEnd> tx_size_search_method = vp9_frame_is_boosted <S2SV_ModStart> ; sf -> <S2SV_ModEnd> auto_mv_step_size = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> mode_skip_start = 10,0
555,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
556,<S2SV_ModStart> L ) ; unsigned,0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,"<S2SV_ModStart>, 0 ) ) ; const char * ch, s_kind [ 3 ] = { 0, 0, 0, 0 } ; char buf [ 128 ] ; char buf [ 128 ] ; Py_DECREF ( type ) ; ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> %s"", <S2SV_ModEnd> s ) ;",0
559,<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> break ; } <S2SV_ModEnd> if ( strcmp <S2SV_ModStart> break ; } <S2SV_ModEnd> if ( strcmp <S2SV_ModStart> break ; } <S2SV_ModEnd> if ( strcmp <S2SV_ModStart> break ; } <S2SV_ModEnd> if ( strcmp <S2SV_ModStart> break ; } <S2SV_ModEnd> if ( is_keyframe_qaunt_set,0
560,<S2SV_ModStart> ) ; } fclose ( mvs ) ;,0
561,<S2SV_ModStart> self ) { <S2SV_ModEnd> PyObject * new_memo,0
562,,1
563,"<S2SV_ModStart> ( dbh, mysql_error <S2SV_ModEnd> ( imp_dbh ->",0
564,<S2SV_ModStart> SOCK_THREAD_FD_EXCEPTION ) || TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) ),0
565,"<S2SV_ModStart> struct ieee_802_11_phdr phdr ; memset ( ppi_flags_tree, 0, sizeof ( ppi_flags_tree ) )",0
566,<S2SV_ModStart> ; sh = safe_calloc <S2SV_ModEnd> ( hdrlen +,0
567,<S2SV_ModStart> BYTE a_val ; UINT16 <S2SV_ModEnd> tempWidth ; BYTE,0
568,<S2SV_ModStart> > nr_parens ) { kfree ( op_stack ) ; <S2SV_ModStart> EINVAL ) ; },0
569,<S2SV_ModStart> ) { const RATE_CONTROL <S2SV_ModEnd> * rc = <S2SV_ModStart> { target = <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ; if ( <S2SV_ModEnd> rc -> frames_since_key <S2SV_ModStart> rc -> frames_since_key <= <S2SV_ModEnd> rc -> output_framerate <S2SV_ModStart> rc -> output_framerate <S2SV_ModEnd> ) { kf_boost,0
570,"<S2SV_ModStart> TX_MODE read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r )",1
571,"<S2SV_ModStart> : # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> } # line 101 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy",0
572,<S2SV_ModStart> -> cpi ; <S2SV_ModEnd> TOKENEXTRA * * <S2SV_ModStart> ] ; struct <S2SV_ModEnd> int segment_id = <S2SV_ModStart> = cpi -> <S2SV_ModEnd> fc. coef_probs <S2SV_ModStart> = cpi -> <S2SV_ModEnd> fc. coef_probs <S2SV_ModStart> = cpi -> <S2SV_ModEnd> fc. coef_probs <S2SV_ModStart> = cpi -> <S2SV_ModEnd> fc. coef_probs <S2SV_ModStart> = cpi -> <S2SV_ModEnd> fc. coef_probs <S2SV_ModStart> = cpi -> <S2SV_ModEnd> fc. coef_probs,0
573,<S2SV_ModStart> pSelect -> pSrc ; assert ( pWalker -> pParse -> db -> mallocFailed ),0
574,<S2SV_ModStart> ; serv = svc_create <S2SV_ModEnd> ( & nfs4_callback_program,0
575,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
576,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
577,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
578,"<S2SV_ModStart> { do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> s, 0 )",0
579,<S2SV_ModStart> ( xIter = xmlDocGetRootElement ( xml -> doc ) <S2SV_ModEnd> ; xIter!= <S2SV_ModStart> ; } } <S2SV_ModEnd> while ( cIter,0
580,<S2SV_ModStart> <S2SV_null> static const SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> return ( const SvcInternal_t <S2SV_ModEnd> * ) svc_ctx,1
581,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } else {,0
582,<S2SV_ModStart> char buffer [ 80 <S2SV_ModEnd> ] ; int,0
583,"<S2SV_ModStart> * otmp = safe_readobj <S2SV_ModEnd> ( buf,",0
584,"<S2SV_ModStart> ( ) { int <S2SV_ModEnd> directory_table_end, table_start <S2SV_ModStart> ) == 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( read_uids_guids ( & table_start ) == FALSE ) return FALSE ; if ( <S2SV_ModStart> read_uids_guids ( & <S2SV_ModEnd> table_start ) == <S2SV_ModStart> parse_exports_table ( & <S2SV_ModEnd> table_start ) == <S2SV_ModStart> ; if ( read_fragment_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( <S2SV_ModStart> read_fragment_table ( & <S2SV_ModEnd> directory_table_end ) ==",0
585,"<S2SV_ModStart> rule * rule, u_int len <S2SV_ModStart> ; } } env -> count = len ;",0
586,<S2SV_ModStart> -> seg ; <S2SV_ModEnd> if ( cm <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
587,"<S2SV_ModStart>, module_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Interactive_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Module_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, ModuleFunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, moduleFunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, moduleFunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, moduleFunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, moduleFunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, moduleFunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, moduleFunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, moduleFunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, moduleFunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, moduleFunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, moduleFunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, moduleFunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, moduleFunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, moduleFunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, moduleFunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, moduleFunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, moduleFunctionDef_fields, 0 <S2SV_ModEnd> ) ; if",0
588,"<S2SV_ModStart> } logfile_fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, S_IRUSR | S_IRUSR ), S_IRUSR ) ; if ( logfile_fd == INVALID_FD ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, log_path, strerror ( errno ) ) ; is_logging = false ; } else { logfile_fd = <S2SV_ModStart> S_IROTH ) ; }",0
589,<S2SV_ModStart> ; } # else ( void ) cpi ; #,1
590,"<S2SV_ModStart> cinput ) { <S2SV_ModEnd> char * s <S2SV_ModStart>, * t <S2SV_ModEnd> ; setDefaults ( <S2SV_ModStart> t ++ ; <S2SV_ModEnd> if ( * <S2SV_ModStart> ']' ) { if ( strcmp ( nameobject, ""AxodrawWantsPDF"" ) == 0 ) { identification = 1 ; <S2SV_ModStart> ; fprintf ( outfile <S2SV_ModEnd>, ""%s"", <S2SV_ModStart> nameobject ) ; } else { fprintf ( stderr, ""%s: <S2SV_blank> Illegal <S2SV_blank> request <S2SV_blank> in <S2SV_blank> identification <S2SV_blank> string <S2SV_blank> [0]: <S2SV_blank> %s\\n"", axohelp, nameobject ) ; return ( - 1 ) ; } } } <S2SV_ModEnd> nameobject = t",0
591,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj,",0
592,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
593,<S2SV_ModStart> int err ; struct tc_cls_u32_hdr * hdr = alink -> abm ; <S2SV_ModStart> ) ) goto err_delete_hdr <S2SV_ModEnd> ; tos_off = <S2SV_ModStart>! match ) goto err_delete_hdr <S2SV_ModEnd> ; list_add ( <S2SV_ModStart> ) ; goto err_delete_hdr <S2SV_ModEnd> ; } match <S2SV_ModStart> ) ; goto err_delete_hdr <S2SV_ModEnd> ; } match <S2SV_ModStart> return 0 ; err_delete_hdr : kfree ( hdr ) ; err_delete_hdr : kfree ( hdr ) ; return err_delete_hdr : kfree ( hdr <S2SV_ModEnd> ) ; },0
594,<S2SV_ModStart> ) ; } <S2SV_ModEnd> stream -> config <S2SV_ModStart> stats ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
595,"<S2SV_ModStart> goto out ; if ( g_str_has_prefix ( app, ""."" ) ) g_print ( "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
596,"<S2SV_ModStart> data_end ) { VP9_COMMON <S2SV_ModEnd> * const cm <S2SV_ModStart>, tile_col ; <S2SV_ModEnd> assert ( tile_rows <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> aligned_cols ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) * aligned_cols, 0",0
597,<S2SV_ModStart> vp9_decoder_create ( const VP9_CONFIG <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> ) ) ; const VP9_COMMON * const cm = & <S2SV_ModEnd> pbi -> common <S2SV_ModStart> ; vpx_initialize_dec ( <S2SV_ModEnd> ) ; vpx_rtcd <S2SV_ModStart> ; vpx_rtcd ( <S2SV_ModEnd> ) ; vpx_init_dequantizer,0
598,"<S2SV_ModStart> dref ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dinf <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ;",0
599,<S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> ; if (! opt ||! opt -> cipso <S2SV_ModEnd> ) return ;,0
600,"<S2SV_ModStart> tok ( struct vpx_token <S2SV_ModEnd> * tokens, <S2SV_ModStart> tok ( const vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> do { const vpx_tree_index <S2SV_ModEnd> j = tree",0
601,"<S2SV_ModStart> = VPX_CODEC_OK ; ctx -> base. err_code = 0 ; <S2SV_ModStart>, img ) ; ctx -> base. err_code = 0",0
602,"<S2SV_ModStart>, & len, 0",1
603,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ; } } return 0 ;,0
604,"<S2SV_ModStart> rc, const VP9EncoderConfig <S2SV_ModEnd> * oxcf )",0
605,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
606,"<S2SV_ModStart> * t, MACROBLOCK * x, MACROBLOCK * x, MACROBLOCK * x, MACROBLOCK * x <S2SV_ModEnd>, BLOCK_SIZE bsize <S2SV_ModStart>, BLOCK_SIZE bsize ) { VP9_COMMON * const x = & cpi -> common ; MACROBLOCK * const x = x -> mb ; MACROBLOCKD * const x = x -> mb ; MACROBLOCKD * const x = x -> mb ; MACROBLOCKD * const x = x -> mb ; MACROBLOCKD * const x = x -> mb ; MACROBLOCKD * const x = x -> mb ; MACROBLOCKD * const x = x -> mb ; MACROBLOCKD * const x = & x -> mb ; MACROBLOCKD * const x = & x -> mb ; MACROBLOCKD * const x = & x -> mb ; MACROBLOCKD * const x = x -> mb ; MACROBLOCKD * const x = x -> mb ; MACROBLOCKD * const x = x -> mb ; MACROBLOCKD *",0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. <S2SV_ModEnd> header [ psf <S2SV_ModStart> [ psf -> header. <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> [ psf -> header. <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> [ psf -> header. <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> [ psf -> header. <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
608,<S2SV_ModStart> range_max ) { uint32_t <S2SV_ModEnd> value ; int <S2SV_ModStart> gbc ) ; uint32_t <S2SV_ModEnd> i = 0 <S2SV_ModStart> { if ( get_bits_left <S2SV_ModEnd> ( gbc ) <S2SV_ModStart> } if ( get_bits_left <S2SV_ModEnd> ( gbc ) <S2SV_ModStart> ) ) { uint32_t <S2SV_ModEnd> i = 0 <S2SV_ModStart> } if ( get_bits_left <S2SV_ModEnd> ( gbc ) <S2SV_ModStart> } if ( get_bits_left <S2SV_ModEnd> ( gbc ) <S2SV_ModStart> } if ( get_bits_left <S2SV_ModEnd> ( gbc ) <S2SV_ModStart> } if ( get_bits_left <S2SV_ModEnd> ( gbc ) <S2SV_ModStart> } if ( get_bits_left <S2SV_ModEnd> ( gbc ) <S2SV_ModStart> ) ) { uint32_t <S2SV_ModEnd> i = MAX_UINT_BITS <S2SV_ModStart> } if ( get_bits_left <S2SV_ModEnd> ( gbc ) <S2SV_ModStart> } if ( get_bits_left <S2SV_ModEnd> ( gbc ) <S2SV_ModStart> } if ( get_bits_left <S2SV_ModEnd> ( gbc ),0
609,"<S2SV_ModStart> c ) || strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> c ) || strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"",",0
610,<S2SV_ModStart> packet -> http_contentlen <S2SV_ModEnd>. len =,0
611,"<S2SV_ModStart>, y, MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> x ), MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart>, dds_info, MagickMin <S2SV_ModEnd> ( 4,",0
612,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL )",0
613,,0
614,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"",",0
615,"<S2SV_ModStart> return FALSE ; if ( rdp -> autodetect -> bandwidthMeasureTimeDelta > 0 ) { Stream_Read_UINT32 ( s, rdp -> autodetect -> bandwidthMeasureTimeDelta ) ; }",0
616,<S2SV_ModStart> mb_cols ) ; # if CONFIG_VP8_HIGHBITDEPTH if ( mb_row < recon_yoffset || mb_col < recon_yoffset || mb_col < recon_yoffset || mb_col < recon_yoffset || mb_col < recon_yoffset || mb_col < recon_yoffset || mb_col < recon_yoffset || mb_col < recon_yoffset || mb_col < recon_yoffset || mb_col < recon_yoffset || mb_col < recon_yoffset || mb_col < recon_yoffset || mb_col < recon_yoffset || mb_col < recon_yoffset || mb_col < recon_yoffset || mb_col < recon_yoffset || mb_col < recon_yoffset || mb_col < recon_yoffset || mb_col < recon_yoffset || mb_col < recon_yoffset || mb_col < recon_yoffset || mb_col < recon_yoffset || mb_col < recon_yoffset || mb,0
617,<S2SV_ModStart> -> b_multithreaded_rd ) { if (! <S2SV_ModStart> mb_rows ) ; },0
618,<S2SV_ModStart> xWantedSize > 0 && ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 <S2SV_ModStart> { xWantedSize += <S2SV_ModEnd> portBYTE_ALIGNMENT - ( <S2SV_ModStart> portBYTE_ALIGNMENT_MASK ) ) <S2SV_ModEnd> ; } else,0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,<S2SV_ModStart> s ) { int num_updates = 0 ; int num_updates = 0 ; int num_updates = 0 ; int num_updates = 0 ; int num_updates = 0 ; int num_updates = 0 ; int num_updates = 0 ; int num_updates = 0 ; int num_updates = 0 ; int num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_updates = 0 ; num_,0
621,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
622,"<S2SV_ModStart> vp9_coeff_stats * coef_branch_ct, vpx_coeff_probs_model * coef_probs ) { <S2SV_ModEnd> vp9_coeff_probs_model * coef_probs <S2SV_ModStart> tx_size ] ; <S2SV_ModEnd> unsigned int ( <S2SV_ModStart> l, m ; vpx_tree_probs_from_distribution ( vp9_coef_tree, coef_branch_ct [ i ] [ j ] [ k ] [ l ], coef_counts [ i ] )",0
623,<S2SV_ModStart> { } ; if (! name ) return - ENOENT ;,0
624,<S2SV_ModStart> <S2SV_null> <S2SV_null> static void <S2SV_ModEnd> su3000_frontend_attach ( struct <S2SV_ModStart> ud3000_frontend_attach ( struct dvb_usb_adapter <S2SV_ModEnd> * d ) <S2SV_ModStart> 0 } ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
625,"<S2SV_ModStart> * iface, vpx_codec_enc_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> else if ( <S2SV_ModEnd> flags & VPX_CODEC_CAP_XMA <S2SV_ModStart> caps & VPX_CODEC_CAP_XMA <S2SV_ModEnd> ) res =",0
626,"<S2SV_ModStart> int stride, uint8_t <S2SV_ModEnd> udp_block_size, int <S2SV_ModStart> ; if ( uv_block_size <S2SV_ModEnd> == 8 ) <S2SV_ModStart> ; if ( uv_block_size <S2SV_ModEnd> == 8 ) <S2SV_ModStart> ; if ( uv_block_size <S2SV_ModEnd> == 8 ) <S2SV_ModStart> ; if ( uv_block_size <S2SV_ModEnd> == 8 ) <S2SV_ModStart> ; if ( uv_block_size <S2SV_ModEnd> == 8 ) <S2SV_ModStart> ; if ( uv_block_size <S2SV_ModEnd> == 8 ) <S2SV_ModStart> ; if ( uv_block_size <S2SV_ModEnd> == 8 ) <S2SV_ModStart> ; if ( uv_block_size <S2SV_ModEnd> == 8 ) <S2SV_ModStart> ; if ( uv_block_size <S2SV_ModEnd> == 8 ) <S2SV_ModStart> ; if ( uv_block_size <S2SV_ModEnd> == 8 ) <S2SV_ModStart> ; if ( uv_block_size <S2SV_ModEnd> == 8 ) <S2SV_ModStart> ; if ( uv_block_size <S2SV_ModEnd> == 8 ) <S2SV_ModStart> ; if ( uv_block_size <S2SV_ModEnd> == 8 ) <S2SV_ModStart> ; if ( uv_block_size <S2SV_ModEnd> == 8 ) <S2SV_ModStart> ; if ( uv_block_size <S2SV_ModEnd> == 8 ) <S2SV_ModStart> ; if ( uv_block_size <S2SV_ModEnd> == 8 ) <S2SV_ModStart> ; if ( uv_block_size <S2SV_ModEnd> == 8",0
627,"<S2SV_ModStart> ; mungspaces ( strncpy <S2SV_ModEnd> ( buf,",0
628,<S2SV_ModStart> * cJSON_CreateFloatArray ( const <S2SV_ModStart> ; a && ( <S2SV_ModStart> i < count ),0
629,"<S2SV_ModStart> data_end ) { const VP9Worker * const worker = & pbi -> tile_workers ; <S2SV_ModStart> int num_workers = MIN ( <S2SV_ModEnd> pbi -> oxcf <S2SV_ModStart> oxcf. max_threads, tile_cols ) ; TileBuffer tile_buffers [ 1 << 6 ] ; int n ; int final_worker = - 1 ; assert ( tile_cols <= ( 1 << 6 ) ) ; assert ( tile_cols <= ( 1 << 6 ) ) ; assert ( tile_cols <= ( 1 << 6 ) ) ; assert ( tile_cols <= ( 1 << 6 ) ) ; assert ( tile_cols <= ( 1 << 6 ) ) ; assert ( tile_cols <= ( 1 << 6 ) ) ; assert ( tile_cols <= ( 1 << 6 ) ) ; assert ( tile_cols <= ( 1 << 6 ) ) ; assert ( tile_cols <= ( 1 << 6 ) ) ; assert ( tile_cols <= ( 1 << 6 ) ) ; assert ( tile_cols <= ( 1 << 6 ) ) ) ; assert ( tile_rows <= ( 1 << 6 ) ) ; <S2SV_ModEnd> int final_worker = <S2SV_ModStart> int num_thread",0
630,<S2SV_ModStart> ; offset = get2 <S2SV_ModEnd> ( ) +,0
631,"<S2SV_ModStart> -> common ; <S2SV_ModEnd> const double base_q <S2SV_ModStart> = SEGMENT_DELTADATA ; vpx_clear_system_state ( ) ; for ( i = ENERGY_MIN ; i <= ENERGY_MAX ; i ++ ) { int qindex_delta = vp9_compute_qdelta ( & cpi -> rc, base_q, base_q * Q_RATIO ( i ) ) ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; } qindex_delta = vp9_compute_qdelta ( & cpi -> rc, base_q, base_q * Q_RATIO ( i ) ) ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; } qindex_delta = vp9_compute_qdelta ( & cpi -> rc, base_q, base_q * Q_RATIO ( i ) ) ; vp9_set_segdata ( seg, SEG",0
632,<S2SV_ModStart> -> error_code ) return <S2SV_ModEnd> error -> has_detail <S2SV_ModStart> error -> has_detail <S2SV_ModEnd> ; return error,0
633,<S2SV_ModStart> pocstruct_t * ps_cur_slice <S2SV_ModEnd> ; ps_dec ->,0
634,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet ),0
635,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int getnum (,0
636,<S2SV_ModStart> GCSpropagate ) ; <S2SV_ModEnd> atomic ( L,0
637,<S2SV_ModStart> 0 ; else { kfree ( buf ) ; <S2SV_ModStart> - EIO ; },0
638,"<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } <S2SV_ModEnd> memset ( buffer <S2SV_ModStart> buffer ) ; <S2SV_ModEnd> s_write ( c",0
639,"<S2SV_ModStart> int cib_tls_signon ( <S2SV_ModEnd> struct remote_connection_s * <S2SV_ModStart> -> variant_opaque ; <S2SV_ModEnd> int ret_ga ; <S2SV_ModStart> struct mainloop_fd_callbacks cib_fd_callbacks <S2SV_ModEnd> = {. <S2SV_ModStart> = cib_remote_dispatch, <S2SV_ModEnd> destroy = cib_remote_connection_destroy <S2SV_ModStart> destroy = cib_remote_connection_destroy <S2SV_ModEnd> ; connection -> <S2SV_ModStart> ; close ( <S2SV_ModEnd> server ) ;",0
640,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi,",0
641,<S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( bp [ i ] ) ;,0
642,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; if ( <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> return rc ;",0
643,"<S2SV_ModStart> Image * image <S2SV_ModEnd> ; MagickBooleanType status <S2SV_ModStart>, padding, <S2SV_ModEnd> version, width <S2SV_ModStart> ) break ; <S2SV_ModEnd> bit = ( <S2SV_ModStart> ) break ; <S2SV_ModEnd> bit = ( <S2SV_ModStart> ) break ; <S2SV_ModEnd> bit = ( <S2SV_ModStart> ) break ; <S2SV_ModEnd> bit = (",0
644,"<S2SV_ModStart> ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC <S2SV_blank> marker\\n"" ) ;",0
645,<S2SV_ModStart> ) ) { if ( strlen ( str_modes ) > strlen ( str_modes ) ) { free ( str_modes ) ; return ; },0
646,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r,",0
647,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs,",0
648,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> ( REFERENCE_MODE ) vpx_read <S2SV_ModEnd> ( r,",0
649,"<S2SV_ModStart>! stream ) { <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; return NULL ; }",0
650,"<S2SV_ModStart> ndo -> ndo_snapend ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u), <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""unknown"", op -> nd_opt_len << 3, op -> nd_opt_len ), op -> nd_opt_len, op -> nd_opt_len )",0
651,<S2SV_ModStart> re_ast ) -> parent = NULL ; ( * re_ast ) ->,0
652,"<S2SV_ModStart> ; ret = db_dict_expand <S2SV_ModEnd> ( path, <S2SV_ModStart> if ( ret < 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value ) ; if ( ret > 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> = <S2SV_blank> %s"", str_c ( path ), key -> value ) ; } else if ( ret < 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> lookup <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", str_c ( path ), key -> value ) ; } else if ( ret < 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB",0
653,<S2SV_ModStart> ; tok -> <S2SV_ModEnd> altwarning = 1,0
654,<S2SV_ModStart> maxBitrate ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
655,<S2SV_ModStart> ( dpbSize ) <S2SV_ModEnd> ; ALLOCATE (,0
656,<S2SV_ModStart> = 0 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; <S2SV_ModStart> (! sock ||! addrlen ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } <S2SV_ModEnd> if ( addrlen <S2SV_ModStart> ) ; } <S2SV_ModEnd> return ret ;,0
657,,1
658,"<S2SV_ModStart> FALSE ; } if (! <S2SV_ModStart>, s ) ) return FALSE",1
659,<S2SV_ModStart> ipv6_pinfo * np <S2SV_ModEnd> ; struct ipv6_txoptions <S2SV_ModStart> ) ; } np = inet6_sk ( sk ) ;,0
660,"<S2SV_ModStart> ; uint32_t valign = 0, hdr_size = 0 <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> ; uint32_t valign = 0, hdr_size = 0 <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> ; uint32_t valign = 0, max = 0, err = 0 <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> ; uint32_t valign = 0, max = 0, err = 0 <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> ; uint32_t valign = 0, max = 0, max = 0, err = 0 <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> ; uint32_t valign = 0, max = 0, max = 0, max = 0, max = 0, max = 0, max = 0, max = 0, max = 0, max = 0, max = 0, max = 0, max = 0, max = 0, max = 0, max = 0, max = 0, max = 0, max = 0, max = 0, max = 0, max = 0, max = 0, max = 0, max = 0, max = 0, max = 0, max = 0, max = 0, max = 0, max = 0, max = 0, max = 0, max = 0",0
661,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; usleep <S2SV_ModStart> ; return ( DM9000_EPDRH <S2SV_ModEnd> ) << 8",0
662,"<S2SV_ModStart> pcmk_ok ) { if ( rc == pcmk_ok ) { fprintf ( stderr, ""%s: <S2SV_blank> Error <S2SV_blank> on <S2SV_blank> tls <S2SV_blank> signon\\n"", name ) ; } else { <S2SV_ModStart> ) ) ; }",0
663,<S2SV_ModStart> ; msg. msg_namelen = sizeof ( address ) ; msg.,0
664,"<S2SV_ModStart> } ; int <S2SV_ModEnd> new_mv_mode_penalty = 256 <S2SV_ModStart> bsize ) ; int new_mv_mode_penalty = 256 ; <S2SV_ModStart>, step_param, x -> sadperbit16 <S2SV_ModEnd>, & num00 <S2SV_ModStart>, & num00 <S2SV_ModEnd> ) ; if",0
665,<S2SV_ModStart> ) ) ; if ( h -> addr ),0
666,<S2SV_ModStart> ) ; } if ( child -> userdata_buffer_size == child -> userdata_buffer_size ) return NULL ;,0
667,"<S2SV_ModStart> one, offset <S2SV_ModEnd> ; ssize_t count <S2SV_ModStart> colormap ) ; <S2SV_ModEnd> if ( (",0
668,<S2SV_ModStart> ( r = <S2SV_ModEnd> sshbuf_put_cstring ( b,1
669,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
670,<S2SV_ModStart> client = user_data ; g_free ( client -> name ),0
671,<S2SV_ModStart> * uv ; if (! isgray ( thread ) ) break ;,0
