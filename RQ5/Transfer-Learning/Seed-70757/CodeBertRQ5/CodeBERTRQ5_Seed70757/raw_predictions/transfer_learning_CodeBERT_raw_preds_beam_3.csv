,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; mutex_unlock ( & wmi -> op_mutex ) ;,0
1,<S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;,0
2,<S2SV_ModStart> writer = ( TrackWriter <S2SV_ModEnd> * ) gf_list_get,0
3,<S2SV_ModStart> -> child ; if ( item > 0 ) { <S2SV_ModStart> 0 ) { <S2SV_ModEnd> c = c <S2SV_ModStart> -> next ; },0
4,"<S2SV_ModStart> u64 nr, <S2SV_ModEnd> struct pt_regs * <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",1
5,<S2SV_ModStart> EXT4_EXTENTS_FLAG ) { <S2SV_ModEnd> struct grub_ext4_ext4_extent_header * <S2SV_ModStart> ( data ) ; <S2SV_ModEnd> struct grub_ext4_extent_header * <S2SV_ModStart> return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
6,"<S2SV_ModStart> fdct16 ( const tran_low_t <S2SV_ModEnd> in [ 16 <S2SV_ModStart> ], int16_t out [ 16 ] ) { tran_low_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> 8 ] ; tran_low_t <S2SV_ModEnd> step3 [ 8 <S2SV_ModStart> 8 ] ; tran_low_t <S2SV_ModEnd> input [ 8 <S2SV_ModStart> ] ; { tran_low_t <S2SV_ModEnd> s0, s1 <S2SV_ModStart> ] ; } tran_low_t <S2SV_ModEnd> t0, t1 <S2SV_ModStart> t3 ; } tran_low_t <S2SV_ModEnd> x0, x1",0
7,<S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> # ifdef LIBRAW_LIBRARY_BUILD <S2SV_ModEnd> # endif parse_ciff,0
8,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> search_filter_level ( const <S2SV_ModStart> * sd, const <S2SV_ModStart> * cpi, const <S2SV_ModStart> partial_frame ) { const <S2SV_ModStart> struct loopfilter * const cm = & cpi -> common ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; int filt_direction = 0 ; int filt_direction = 0 ; int filt_direction = 0 ; int filt_direction = 0 ; int filt_direction = 0 ; int filt_direction = 0 ; int filt_direction = 0 ; int filt_direction = 0 ; int filt_direction = 0 ; int filt_direction = 0 ; int filt_direction = 0 ; int filt_direction = 0 ; int filt_direction = 0 ; int filt_direction = 0 ; int filt_direction = 0 ; int filt_direction = 0 ; int filt_direction = 0 ; int filt_direction = 0 ; int filt_direction = 0 ; int filt",0
9,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
10,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ++ i ) vpx_write <S2SV_ModEnd> ( w,",0
11,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; },0
12,"<S2SV_ModStart> ) dat ; if ( length > 5 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length > 5 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; print_string ( ndo, ( const u_char * ) ptr, length - 5 ) ; return ; } <S2SV_ModStart> ptr ++ ; <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> ptr ++ ) ; if ( length > 5 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
13,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void construct_get_dest_keyring ( <S2SV_ModStart> * authkey ; <S2SV_ModEnd> if ( dest_keyring <S2SV_ModStart> dest_keyring ) ; <S2SV_ModEnd> switch ( cred <S2SV_ModStart> ( dest_keyring ) { kenter ( ""%p"", dest_keyring ) ; } <S2SV_ModEnd> } case KEY_REQKEY_DEFL_THREAD_KEYRING",0
14,<S2SV_ModStart> = NULL ; sc = NULL ;,0
15,<S2SV_ModStart> int len ; struct tm * tm ; <S2SV_ModStart> & t ) ; tm = tm <S2SV_ModStart> = g_strdup ( tm <S2SV_ModEnd> ) ; len,0
16,<S2SV_ModStart> length ) ; if ( length > AUTH_PASS_LEN - 1 ) { <S2SV_ModStart> ) ) ; },0
17,<S2SV_ModStart> || e == p || e ==,0
18,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",1
19,<S2SV_ModStart> = 0 ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> & timeout ) ),1
20,"<S2SV_ModStart> detect_transition_to_still ( struct twopass_rc <S2SV_ModEnd> * twopass, <S2SV_ModStart> last_decay_rate ) { const FIRSTPASS_STATS * const <S2SV_ModEnd> position = twopass <S2SV_ModStart> -> stats_in ; const FIRSTPASS_STATS * const <S2SV_ModEnd> tmp_next_frame ; for <S2SV_ModStart> j ) { const FIRSTPASS_STATS * const <S2SV_ModEnd> tmp_next_frame ; for <S2SV_ModStart> j ) { const FIRSTPASS_STATS * const <S2SV_ModEnd> pcnt_inter - tmp_next_frame <S2SV_ModStart> pcnt_motion < 0.999 ; ++ j ) { const FIRSTPASS_STATS * const <S2SV_ModEnd> pcnt_inter - tmp_next_frame <S2SV_ModStart> pcnt_motion < 0.999 ; ++ j ) <S2SV_ModEnd> reset_fpf_position ( twopass <S2SV_ModStart> position ) ; <S2SV_ModEnd> return trans_to_still ;",0
21,<S2SV_ModStart> + size <= i_size_read <S2SV_ModEnd> ( inode ),0
22,"<S2SV_ModStart> alg ) { request_module <S2SV_ModEnd> ( ""%s"", <S2SV_ModStart> CRYPTO_ALG_NEED_FALLBACK ) ) request_module <S2SV_ModEnd> ( ""%s-all"",",0
23,<S2SV_ModStart> = GIT_PKT_NG ; <S2SV_ModEnd> if (! <S2SV_ModStart> line += 3 ; line += 3 <S2SV_ModStart> = '\\0' ; line += 3 ; <S2SV_ModStart> line = ptr <S2SV_ModEnd> ; if (,0
24,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> BYTE flags ; UINT32 <S2SV_ModEnd> length ; Stream_Read_UINT8,0
25,<S2SV_ModStart> ; } } if ( avio_feof ( pb ) ) return AVERROR_EOF ;,0
26,"<S2SV_ModStart> mntent, path, rootfs",1
27,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } io -> io_cleanup = mem_cleanup ;,1
28,<S2SV_ModStart> ( value + 0.5 <S2SV_ModEnd> ) ) ;,0
29,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return ret?,0
30,<S2SV_ModStart> vpx_codec_enc_cfg_map_t * map ; if (! cfg ) return VPX_CODEC_INVALID_PARAM,0
31,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
32,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
33,<S2SV_ModStart> AV_READONLY ) { if ( av_readonly ) { <S2SV_ModStart> ; } } },0
34,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF ) ; enc28j60ClearBit ( interface, ENC28J60_ETXSTL, MSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_ETXSTH, MSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_ETXSTH, MSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_ETXSTH, MSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_ETXNDL, MSB (",0
35,<S2SV_ModStart> ; value = ast2obj_string <S2SV_ModEnd> ( o -> <S2SV_ModStart> ; value = ast2obj_string <S2SV_ModEnd> ( o ->,0
36,<S2SV_ModStart> if ( page <S2SV_ModEnd> ) { http_response_printf <S2SV_ModStart> if ( page <S2SV_ModEnd> ) { http_response_printf <S2SV_ModStart> if ( page <S2SV_ModEnd> ) { http_response_printf <S2SV_ModStart> if ( page <S2SV_ModEnd> ) { http_response_printf <S2SV_ModStart> if ( page <S2SV_ModEnd> ) { http_response_printf,0
37,"<S2SV_ModStart> int low_var_thresh, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> 4 ; int <S2SV_ModEnd> mb_cols = source <S2SV_ModStart> -> pp_limits_buffer ; <S2SV_ModEnd> ( void ) <S2SV_ModStart> ) flag ; memset <S2SV_ModEnd> ( limits,",0
38,"<S2SV_ModStart> void ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; <S2SV_ModEnd> error = mb_cache_entry_insert <S2SV_ModStart> error ) { <S2SV_ModEnd> if ( error <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> } else { <S2SV_ModStart> hash ) ; <S2SV_ModEnd> } } }",0
39,<S2SV_ModStart> ) ) ; * rlen = 0 ;,0
40,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp",0
41,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
42,<S2SV_ModStart> p_bkc ) { char_u * bkc = new_value_alloced ; <S2SV_ModStart> p_bkc ) { bkc = new_value_alloced ;,0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode <S2SV_ModStart>, & new_mode, & acl ) ; if ( ret ) goto out ; <S2SV_ModEnd> } break ;",0
44,"<S2SV_ModStart> size_t size ; jas_safe_intfast32_add ( tlx, width, height, 0 ) ; <S2SV_ModStart> ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ) { goto error ; } if (! <S2SV_ModStart> / 8 ; <S2SV_ModEnd> if (!",0
45,<S2SV_ModStart> dp == datalen || dp == datalen,0
46,"<S2SV_ModStart> req, size_t <S2SV_ModEnd> acl_len ) { <S2SV_ModStart> acl_len ) { <S2SV_ModEnd> uint32_t attrlen, <S2SV_ModStart> int status ; <S2SV_ModEnd> if ( ( <S2SV_ModStart>!= 0 ) return - EIO <S2SV_ModEnd> ; if ( <S2SV_ModStart> u32 recvd ; <S2SV_ModEnd> recvd = req <S2SV_ModStart> attrlen ) ; <S2SV_ModEnd> } else status",0
47,"<S2SV_ModStart> * TICK_NSEC ; u64 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",0
48,"<S2SV_ModStart> { owner = ssplit <S2SV_ModEnd> ( auth, <S2SV_ModStart> } group = ssplit <S2SV_ModEnd> ( tok,",1
49,<S2SV_ModStart> ; # if CONFIG_MEM_MANAGER <S2SV_ModEnd> int number_aau ;,0
50,<S2SV_ModStart> = SQUASHFS_LOOKUP_BLOCKS ( ( long long ) <S2SV_ModStart> = SQUASHFS_LOOKUP_BLOCKS ( ( long long ),0
51,"<S2SV_ModStart> } else return apr_psprintf ( cmd, ""ModSecurity: <S2SV_blank> Invalid <S2SV_blank> value <S2SV_blank> for <S2SV_blank> SecRuleEngine: <S2SV_blank> %s"" <S2SV_ModEnd>, p1 )",0
52,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> # if CONFIG_VP9_ENCODER <S2SV_ModStart> # endif } <S2SV_ModEnd> for ( argi <S2SV_ModStart> } if ( <S2SV_ModEnd> arg_match ( & <S2SV_ModStart> & use_ivf, argi ) ) { config -> write_webm = 0 ; } else if ( arg_match ( & arg, & use_ivf, argi ) ) { config -> write_webm = 0 ; } else if ( arg_match ( & arg, & use_ivf, argi ) ) { config -> write_webm = 0 ; } else if ( arg_match ( & arg, & use_ivf, argi ) ) { config -> write_webm = 0 ; } else if ( arg_match ( & arg, & use_ivf, argi ) ) { config -> write_webm = 0 ; } else if ( arg_match ( & arg, & use_ivf, argi ) ) { config -> write_webm = 0 ; } else if ( arg_match ( & arg, & use_ivf, argi ) ) { config -> write_webm = 0 ; } else if ( arg_match ( & arg, & use",0
53,<S2SV_ModStart> } if ( c -> opt -> option. client || c -> opt -> protocol ) return 0 ; if ( <S2SV_ModStart> 1 ; } <S2SV_ModEnd> return 0 ;,0
54,<S2SV_ModStart> ; if ( cmac == NULL ||,0
55,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> const uint64_t bits_used <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
56,"<S2SV_ModStart> define EOFOp 0x07 <S2SV_ModEnd> char magick [ <S2SV_ModStart> ) ) ; if ( count!= 2 ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
57,"<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> altsetting [ 0 ]. desc. bNumEndpoints < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; error = - EINVAL ; goto err_free_urb ; }",1
58,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
59,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> & tmpname, ""/etc"" <S2SV_ModEnd> ) ) ==",0
60,<S2SV_ModStart> ; } } if ( 0 == ps_sps -> i4_pps_valid ) { return IHEVCD_INVALID_HEADER ; },0
61,"<S2SV_ModStart> ; if ( n == ( size_t ) 0U ) { addreply_noformat ( 500, LOG_WARNING, MSG_LINE_TOO_LONG ) ; continue ; } if (",0
62,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> vp9_setup_dst_planes ( MACROBLOCKD <S2SV_ModStart> mi_col ) { const <S2SV_ModStart> mi_col ) { const <S2SV_ModStart> ] = { src -> y_buffer, src -> u_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> uv_stride, src -> uv_stride, src -> uv_stride, src -> uv_stride, src -> uv_stride, src -> alpha_stride } ; int i ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y ) ; return 1 ;",0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,<S2SV_ModStart> ) get_block = ocfs2_get_block <S2SV_ModEnd> ; else get_block <S2SV_ModStart> else get_block = ocfs2_dio_get_block <S2SV_ModEnd> ; return __blockdev_direct_IO,0
65,"<S2SV_ModStart> ( f, ""%79s <S2SV_blank> %[^\\n]\\n"" <S2SV_ModEnd>, def,",0
66,"<S2SV_ModStart> n ) { <S2SV_ModEnd> int kind ; <S2SV_ModStart> PyCompilerFlags cf ; <S2SV_ModEnd> char * str <S2SV_ModStart> * str ; <S2SV_ModEnd> Py_ssize_t len ; <S2SV_ModStart> ': ) ; if ( expr_end - expr_start > expr_end - expr_start ) { ast_error ( c, n, ""f-string: <S2SV_blank> too <S2SV_blank> short"" ) ; return NULL ; } <S2SV_ModStart> == NULL ) { ast_error ( c, n, ""f-string: <S2SV_blank> too <S2SV_blank> short"" ) ; return NULL ; } <S2SV_ModEnd> str [ 0 <S2SV_ModStart> = PyCF_ONLY_AST ; <S2SV_ModEnd> mod = string_object_to_c_ast <S2SV_ModStart> ; Py_DECREF ( fstring_name ) ; if ( str ) { ast_error ( c, n, ""f-string: <S2SV_blank> too <S2SV_blank> short"" ) ; return NULL ; } <S2SV_ModEnd> Py_DECREF ( fstring_name",0
67,<S2SV_ModStart> string ) { if ( string == NULL ) return NULL ;,0
68,<S2SV_ModStart> size ) ; if (! px -> ft ) return FALSE ;,0
69,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; length = 0 ; <S2SV_ModStart> ) ) ; length = 0 ; <S2SV_ModStart> ) ) ; length = 0 ; <S2SV_ModStart> ) ) ; length = 0 ; <S2SV_ModStart> ) ) ; length = 0 ; <S2SV_ModStart> ) ) ; length = 0 ; <S2SV_ModStart> ) ) ; length = 0 ; <S2SV_ModStart> ) ) ; length = 0 ;",0
70,<S2SV_ModStart> void ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
71,<S2SV_ModStart> const buffers [ 3 <S2SV_ModEnd> ] = { <S2SV_ModStart> int strides [ 3 <S2SV_ModEnd> ] = {,0
72,<S2SV_ModStart> ( sk ) ; if ( msg -> msg_namelen ) goto free,0
73,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
74,<S2SV_ModStart> user ) { <S2SV_ModEnd> cleanup_srcu_struct ( &,0
75,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> sl = strlen,1
76,"<S2SV_ModStart> * for_ch ; <S2SV_ModEnd> REQ ( n <S2SV_ModStart>, comp_for ) ; if ( TYPE ( CHILD ( n, 0 ) ) == ASYNC ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL <S2SV_ModStart> = 1 ; } for_ch = CHILD ( n, 0 ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; expression = ast_for_exprlist ( c, for_ch, 3 + is_async ) ) ; if (! t ) return NULL ; expression = ast_for_exprlist ( c, CHILD ( n, 3 + is_async ) ) ; if (! t ) return NULL ; expression = ast_for_exprlist ( c, for_ch, 3 + is_async ) ) ; if (! expression ) return NULL ; if ( NCH ( n ) == ( 5 + is_async ) &&! comp ) return NULL ; if ( NCH ( n ) == ( 5 + is_async )",0
77,<S2SV_ModStart> NULL ; } dst_state -> curframe = src -> curframe ;,0
78,"<S2SV_ModStart> write_mb_modes_kf ( const VP9_COMMON * cm = & cpi -> common ; const MACROBLOCKD * const xd = & cpi -> mb. e_mbd ; const MODE_INFO * const mbmi = & mi -> mbmi ; const BLOCK_SIZE bsize = mbmi -> sb_type ; write_skip ( cpi, mbmi -> segment_id, mi, w ) ; if ( bsize >= BLOCK_8X8 && cm -> tx_mode == TX_MODE_SELECT ) write_selected_tx_size ( cpi, mbmi -> tx_size, bsize, w ) ; if ( bsize >= BLOCK_8X8 && cm -> tx_mode == TX_MODE_SELECT ) write_selected_tx_size ( cpi, mbmi -> tx_size, bsize, w ) ; if ( bsize >= BLOCK_8X8 && cm -> tx_mode == TX_MODE_SELECT ) write_selected_tx_size ( cpi, mbmi -> tx_size, bsize, 0 ) ; if ( b",0
79,"<S2SV_ModStart> maxn ) { <S2SV_ModEnd> # ifdef DEBUG <S2SV_ModStart> ; # endif if ( n > maxn ) SWF_error ( ""Action <S2SV_blank> overflow!!"" ) ;",0
80,"<S2SV_ModStart> ; if ( ep ) { ND_PRINT ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ; return - 1 ; } if (",0
81,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
82,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void addModuleArgument (,0
83,<S2SV_ModStart> ; } } if ( interp_window_coeff [ idx + HBE_OPER_WIN_LEN - 1 ]!= 0 ) { <S2SV_ModStart> ; } } },0
84,"<S2SV_ModStart>, p ) ; * low = 0",0
85,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void bfq_idle_slice_timer_body (,0
86,,1
87,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
88,<S2SV_ModStart> + x > ( int ) <S2SV_ModStart> + diffBlockLength || ( int ) <S2SV_ModStart> + y > ( int ),0
89,"<S2SV_ModStart>, fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
90,<S2SV_ModStart> { if ( MagickFalse <S2SV_ModEnd> ( number_pixels *,0
91,<S2SV_ModStart> data ) { ( void ) ctx ; ( void ) data ;,0
92,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
93,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
94,<S2SV_ModStart>. mv. mv. <S2SV_ModStart>. mv. mv. <S2SV_ModStart>. mv. mv. <S2SV_ModStart>. mv. mv. <S2SV_ModStart>. mv. mv. <S2SV_ModStart>. mv. mv. <S2SV_ModStart>. mv. mv. <S2SV_ModStart>. mv. mv. <S2SV_ModStart>. mv. mv. <S2SV_ModStart>. mv. mv. <S2SV_ModStart>. mv. mv. <S2SV_ModStart>. mv. mv. <S2SV_ModStart>. mv. mv. <S2SV_ModStart>. mv. mv. <S2SV_ModStart>. mv. mv. <S2SV_ModStart>. mv. mv. <S2SV_ModStart>. mv. mv. <S2SV_ModStart>. mv. mv. <S2SV_ModStart>. mv. mv. <S2SV_ModStart>. mv. mv. <S2SV_ModStart>. mv. mv. <S2SV_ModStart>. mv. mv. <S2SV_ModStart>. mv. mv. <S2SV_ModStart>. mv. mv. <S2SV_ModStart>. mv. mv. <S2SV_ModStart>. mv. mv. <S2SV_ModStart>. mv. mv. <S2SV_ModStart>. mv. mv. <S2SV_ModStart>. mv. mv. <S2SV_ModStart>. mv. mv. <S2SV_ModStart>. mv. mv. <S2SV_ModStart>. mv. m,0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
97,<S2SV_ModStart> msicap msicap ; <S2SV_ModEnd> return pci_emul_add_capability (,0
98,<S2SV_ModStart> ) ; } if ( server. daemon ) daemon ( ) ;,0
99,"<S2SV_ModStart> vpx_codec_err_t res ; vpx_codec_err_t res ; if <S2SV_ModEnd> ( cfg -> <S2SV_ModStart> cfg -> g_lag_in_frames >= VPX_RC_ONE_PASS <S2SV_ModEnd> ) ERROR ( <S2SV_ModStart> ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) ERROR ( ""Cannot <S2SV_blank> increase <S2SV_blank> lag_in_frames"" <S2SV_ModEnd> ) ; res",0
100,<S2SV_ModStart> { cpi -> zbin_mode_boost <S2SV_ModEnd> = 0 ;,0
101,<S2SV_ModStart> info -> si_code > <S2SV_ModEnd> 0 ) return <S2SV_ModStart> return - EPERM <S2SV_ModEnd> ; return do_send_specific,0
102,<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; if ( ptr -> size < 8 ) return GF_ISOM_INVALID_FILE ;,0
103,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
104,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> -> state == fmode <S2SV_ModEnd> ) return ; <S2SV_ModStart> ; if ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> & FMODE_WRITE ) == fmode <S2SV_ModEnd> ) list_move ( <S2SV_ModStart> & FMODE_WRITE ) { if ( fmode & FMODE_WRITE ) list_move_tail <S2SV_ModEnd> ( & state <S2SV_ModStart> & FMODE_WRITE ) <S2SV_ModEnd> list_move_tail ( & <S2SV_ModStart> ) ; } }",0
105,<S2SV_ModStart> read_info ) ; break ;,0
106,<S2SV_ModStart> 0 ; } memcpy <S2SV_ModEnd> ( elem.,0
107,<S2SV_ModStart> ( unsigned ) jpc_qcx_getEXPN <S2SV_ModEnd> ( qcd -> <S2SV_ModStart> ( unsigned ) jpc_qcx_getMANT <S2SV_ModEnd> ( qcd ->,0
108,<S2SV_ModStart> ; if ( c -> format == CHUNKY ) return AVERROR_PATCHWELCOME ; if (,0
109,"<S2SV_ModStart>, length - <S2SV_ModEnd> caplen - 1",0
110,"<S2SV_ModStart> * name = fit_get_name_safe <S2SV_ModEnd> ( fit,",0
111,<S2SV_ModStart> ; if ( kfifo_safe_alloc <S2SV_ModEnd> ( & state,0
112,"<S2SV_ModStart> * iface, vpx_codec_dec_cfg_t <S2SV_ModEnd> * cfg,",0
113,<S2SV_ModStart> ; value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1100WritePhyReg (,0
114,<S2SV_ModStart> ; ipc. hdr_len = sizeof ( ipc. hdr ) ; ipc.,0
115,<S2SV_ModStart> else if ( <S2SV_ModEnd> flags & VPX_CODEC_USE_XMA <S2SV_ModStart> flags & VPX_CODEC_USE_XMA <S2SV_ModEnd> ) res =,0
116,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
117,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; RESERVE_SPACE",1
118,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ) ; return 0 <S2SV_ModStart> break ; } return 1 ;,0
119,"<S2SV_ModStart>, buffsize, ""%s"", <S2SV_ModStart>, buffsize, ""%s"",",0
120,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
121,<S2SV_ModStart> goto trunc ; ND_TCHECK_16BITS ( & lshp -> ls_length ) ;,0
122,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> * obuf =",1
123,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
124,<S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ),0
125,"<S2SV_ModStart> * costs, vpx_tree_tree <S2SV_ModEnd> tree, const <S2SV_ModStart> tree, const vpx_tree_tree <S2SV_ModEnd> * probs, <S2SV_ModStart> ) { const vpx_tree_index <S2SV_ModEnd> b ; for <S2SV_ModStart> ) ; const vpx_tree_index <S2SV_ModEnd> ii = tree",0
126,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
127,"<S2SV_ModStart>, buf, count <S2SV_ModEnd>, c,",0
128,"<S2SV_ModStart> fadst16 ( const tran_low_t * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_low_t s0, s1, s3, s4, s5, s5, s5, s5, s7, s8, s9, s9, s12, s12, s12, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14, s14",0
129,<S2SV_ModStart> ; # if HAVE_MEDIA <S2SV_ModEnd> flags |= HAS_MEDIA <S2SV_ModStart> ; # endif <S2SV_ModEnd> return flags &,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
131,"<S2SV_ModStart> void count_segs_sb ( <S2SV_ModEnd> const TileInfo * <S2SV_ModStart> const TileInfo * <S2SV_ModEnd> tile, MODE_INFO <S2SV_ModStart> const TileInfo * <S2SV_ModEnd> tile, MODE_INFO <S2SV_ModStart> ) { const <S2SV_ModEnd> int bw, <S2SV_ModStart> ) { const VP9_COMMON * const cm = & cpi -> common ; const <S2SV_ModStart>, tile, mi_8x8, no_pred_segcounts, no_pred_segcounts, temporal_predictor_count, t_unpred_segcounts, bs, hbs, mi_row, mi_col ) ; } else if ( bw == bs && bh == bs && bh == bs && bh == bs && bh == bs && bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, no_pred_segcounts, bs, hbs, mi_row, mi_col ) ; } else { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, bs, hbs, mi_row, mi",0
132,<S2SV_ModStart> -> flags & CLIENT_CLOSE_AFTER_REPLY <S2SV_ModEnd> ) break ;,0
133,<S2SV_ModStart> get_blocks_flags = EXT4_GET_BLOCKS_CREATE | EXT4_GET_BLOCKS_DELALLOC_RESERVE,0
134,"<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> canonnamelen = 0 <S2SV_ModStart> = 0 ; if (! p ) { ret = OE_EAI_MEMORY ; goto done ; } <S2SV_ModStart>, handle, <S2SV_ModEnd> p -> ai_flags <S2SV_ModStart> p -> ai_flags <S2SV_ModEnd>, & p <S2SV_ModStart> -> ai_family, <S2SV_ModEnd> p -> ai_protocol <S2SV_ModStart> p -> ai_protocol, <S2SV_ModEnd> p -> ai_addrlen <S2SV_ModStart> p -> ai_addrlen <S2SV_ModEnd>, NULL,",0
135,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
136,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
137,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int set_registers (,0
138,"<S2SV_ModStart> mod_ty Module ( asdl_seq <S2SV_ModEnd> * body,",0
139,"<S2SV_ModStart>, int64_t ts_start, int64_t <S2SV_ModEnd> ts_end, unsigned <S2SV_ModStart> write_idx ) ; <S2SV_ModEnd> if ( ctx <S2SV_ModStart> # if USE_PARTIAL_COPY <S2SV_ModEnd> if ( ctx <S2SV_ModStart> } else { vpx_copy_and_extend_frame <S2SV_ModEnd> ( src,",0
140,"<S2SV_ModStart>. sharpness ; const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; <S2SV_ModStart> int q = vp9_ac_quant <S2SV_ModEnd> ( cm -> <S2SV_ModStart>, 0 ) <S2SV_ModEnd> ; if (",0
141,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> btif_enable_bonded_devices ( ),0
142,<S2SV_ModStart> = getnum ( <S2SV_ModEnd> ) ; if,0
143,"<S2SV_ModStart> image ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
144,"<S2SV_ModStart> (! ctx <S2SV_ModEnd> ) res = <S2SV_ModStart>. decode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, data,",0
145,"<S2SV_ModStart> inode * inode, const struct file * file ) { <S2SV_ModEnd> struct isofs_sb_info * <S2SV_ModStart> ; if ( file ) { if ( file -> fmode & ( FILE_ATTR_READ | FILE_ATTR_READ | FILE_ATTR_READ | FILE_ATTR_WRITE ) ) <S2SV_ModEnd> goto fail ; <S2SV_ModStart> goto fail ; }",0
146,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> ) ; } sendClean ( outputbuffer ) ;",0
147,<S2SV_ModStart> self ) { Py_CLEAR ( self ) ;,0
148,<S2SV_ModStart> < count ; i ++ <S2SV_ModEnd> ) { n,0
149,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body, & tmp ) < 0 ) { return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body, & tmp ) < 0 ) { return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body, & tmp ) < 0 ) { return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( lookup_attr_",0
150,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
151,"<S2SV_ModStart> msg ) ; err = verify_iovec ( msg_sys, iov, & addr, VERIFY_WRITE ) ; if ( err < 0 ) goto out_freeiov ; <S2SV_ModStart> ; } else { if ( msg_sys -> msg_control ) <S2SV_ModStart> VERIFY_WRITE ) ; }",0
152,"<S2SV_ModStart> buffer_head * dibh <S2SV_ModEnd> ; u64 bn <S2SV_ModStart> unsigned end_of_metadata = MAX ( height, height - 1 ) <S2SV_ModEnd> ; int eob",0
153,"<S2SV_ModStart>, ""Codec: <S2SV_blank> %s\\n"", vpx_codec_iface_name <S2SV_ModEnd> ( global -> <S2SV_ModStart> ( ) ) <S2SV_ModEnd> ) ; }",0
154,<S2SV_ModStart> } else { if ( value == NULL ) goto error ;,0
155,"<S2SV_ModStart> { if ( copy_file_exists <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> { if ( copy_file_exists <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> { if ( copy_file_exists <S2SV_ModEnd> ( ""/etc/skel/.cshrc"",",0
156,<S2SV_ModStart> msix_tab_size ) { <S2SV_ModEnd> bzero ( msixcap,1
157,<S2SV_ModStart> ; if ( <S2SV_ModEnd> js_regexec ( re,0
158,<S2SV_ModStart> : if ( Long_val <S2SV_ModEnd> ( Field ( <S2SV_ModStart> 1 ) ) > <S2SV_ModEnd> 0 ) caml_set_oo_id,0
159,"<S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; ksz8851WriteReg <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( isr & KSZ8851_ISR_LCIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_ISR_TXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_TXMIR <S2SV_ModEnd> ) ; n <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK",0
160,"<S2SV_ModStart> void encode_quantization ( VP9_COMMON * cm, <S2SV_ModEnd> struct vp9_write_bit_buffer * <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
161,"<S2SV_ModStart> ( ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, msglen ) )",0
162,<S2SV_ModStart> peerec ) ; <S2SV_ModEnd> if ( (,0
163,"<S2SV_ModStart> ( ) ; strncpy <S2SV_ModEnd> ( t1_buf_array,",0
164,"<S2SV_ModStart> BLOCK_SIZE subsize ) { int bsize = b_width_log2 ( bsize, bsize, BLOCK_SIZE subsize, BLOCK_SIZE subsize ) ; <S2SV_ModEnd> PARTITION_TYPE partition = <S2SV_ModStart> ] ) = get_block_context ( x, subsize, BLOCK_8X8 ) <S2SV_ModEnd> ; dupicate_mode_info_in_sb ( <S2SV_ModStart> case PARTITION_VERT : set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize, bsize ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize, bsize ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize, bsize ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize, bsize ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize, bsize ) ; * ( xd -> mi [ 0 ] ) = get",0
165,"<S2SV_ModStart> key_ref ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) { ret = - ENOKEY ; goto error2 ; }",1
166,<S2SV_ModStart> u4_first_slice_is_nonref ) { if ( u4_first_slice_is_nonref > ps_dec -> u4_first_slice_size ) { return IV_FAIL ; },0
167,<S2SV_ModStart> var_off ) ; if ( src_known ) { <S2SV_ModStart> var_off ) ; },0
168,<S2SV_ModStart> ; if ( IS_ERR ( cifs_sb ) ) { rc = PTR_ERR ( cifs_sb ) ; goto lookup_out ; } if (,0
169,"<S2SV_ModStart> th -> dest, skb",0
170,"<S2SV_ModStart> svc_ctx ) { uint32_t <S2SV_ModEnd> number_of_keyframes, encode_frame_count <S2SV_ModStart> svc_ctx ) ; uint32_t <S2SV_ModEnd> encode_frame_count = si <S2SV_ModStart> = si -> encode_frame_count <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; number_of_keyframes = ( uint32_t ) <S2SV_ModStart> ; i < ( uint32_t )",0
171,<S2SV_ModStart> = new_cols ; screen -> buffers [ 0 ] = 0 ;,0
172,"<S2SV_ModStart> n ) { int in_named_escape = 0 ; int in_named_escape = 0 ; int in_named_escape = 0 ; int in_named_escape <S2SV_ModEnd> ; int in_named_escape <S2SV_ModStart> NULL ) ; if (! in_named_escape ) { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; return - 1 ; } <S2SV_ModStart> < end ; in_named_escape <S2SV_ModEnd> ++ ) { <S2SV_ModStart> '}' ) { in_named_escape = 1 ; } else if ( in_named_escape ) { if (! in_named_escape ) { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; return - 1 ; } } else if ( ch == '}' ) { if ( in_named_escape ) { if (! in_named_escape ) { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; return - 1 ; } } else if ( ch == '}' ) { if ( in_named_escape",0
173,"<S2SV_ModStart> ( pd, g_settings_dump_location <S2SV_ModEnd> ) ; char",0
174,"<S2SV_ModStart> ""rfbScaledScreenUpdateRect"" ) ; memcpy <S2SV_ModEnd> ( srcptr,",0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AUTH <S2SV_blank> ID <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",0
176,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if",1
177,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart> int mi_col ; vpx_memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; vpx_memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ; mi_col < td -> <S2SV_ModEnd> mi_col_end ; mi_col <S2SV_ModStart> mi_col < tile -> <S2SV_ModEnd> mi_col_end ; mi_col <S2SV_ModStart> mi_col < tile -> <S2SV_ModEnd> mi_col_end ; mi_col <S2SV_ModStart> mi_col < tile -> <S2SV_ModEnd> mi_col_end ; mi_col <S2SV_ModStart> mi_col < tile -> <S2SV_ModEnd> mi_col_end ; mi_col <S2SV_ModStart> mi_col < tile -> <S2SV_ModEnd> mi_col_end ; mi_col <S2SV_ModStart> mi_col < tile -> <S2SV_ModEnd> mi_col_end ; mi_col <S2SV_ModStart> mi_col < tile -> <S2SV_ModEnd> mi_col_end ; mi_col <S2SV_ModStart> mi_col < tile -> <S2SV_ModEnd> mi_col_end ; mi_col <S2SV_ModStart> mi_col < tile -> <S2SV_ModEnd> mi_col_end ; mi_col <S2SV_ModStart> mi_col < tile -> <S2SV_ModEnd> mi_col_end ; mi_col <S2SV_ModStart> mi_col < tile -> <S2SV_ModEnd> mi_col_end ; mi_col <S2SV_ModStart> mi_col < tile -> <S2SV_ModEnd> mi",0
178,"<S2SV_ModStart> ; dh = skb_header_pointer <S2SV_ModEnd> ( skb,",0
179,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * opt <S2SV_ModStart> * optp, const <S2SV_ModStart> & 3 ) { <S2SV_ModStart> ++ ] = IPOPT_RCU ; } <S2SV_ModEnd> if ( optlen",0
180,<S2SV_ModStart> ; if ( connection!= NULL ) goto error ; if (,0
181,<S2SV_ModStart> * findalldevs_if ; size_t <S2SV_ModEnd> nif = 0 <S2SV_ModStart> 0 ; } if ( plen < sizeof ( struct rpcap_findalldevs_if ) ) { return - 1 ; } <S2SV_ModStart> next ) { if ( plen < sizeof ( struct rpcap_findalldevs_if ) ) { return - 1 ; },0
182,"<S2SV_ModStart>, client_uid, DEFAULT_DUMP_DIR_MODE <S2SV_ModEnd> ) ; if",0
183,<S2SV_ModStart> ; x += 3 <S2SV_ModEnd> ) { index,0
184,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
185,"<S2SV_ModStart> ; } } if ( num_images > 1 ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
186,<S2SV_ModStart> len ) ; ND_TCHECK ( bp [ 0 ] ) ;,0
187,"<S2SV_ModStart>! ptrace_has_cap ( task,",0
188,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
189,"<S2SV_ModStart> ; break ; case SEI_USER_DATA_REGISTERED_LEVEL : ps_parse -> s_sei_params. i4_sei_parameters_present_flag = 1 ; ihevcd_parse_segment_segment_segment ( ps_codec, ps_codec ) ; break ;",0
190,<S2SV_ModStart> ; } } dd -> per_sdma = NULL ;,0
191,"<S2SV_ModStart>, int rep_quick, ulong rec_length <S2SV_ModStart> ; if ( rec_length > 0 &&",0
192,<S2SV_ModStart> } pairs = pq_dup ( <S2SV_ModEnd> ) ; for,0
193,<S2SV_ModStart> val ) ; parselet ( var ) ;,0
194,"<S2SV_ModStart> ; if ( '\\0' == * mlenp ) { return bad_request ( c, 400, __LINE__ ) ; } if (",0
195,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> 256 ] ; tran_low_t <S2SV_ModEnd> * outptr = <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16",0
196,"<S2SV_ModStart> goto out ; if ( g_str_has_prefix ( name, ""prefix"" ) && g_str_has_prefix ( name, ""prefix"" ) && g_str_has_prefix ( name, ""prefix"" ) && g_str_has_prefix ( name, ""prefix"" ) && g_str_has_prefix ( name, ""prefix"" ) && g_str_has_prefix ( name, ""prefix"" ) && g_str_has_prefix ( name, ""prefix"" ) && g_str_has_prefix ( name, ""prefix"" ) && g_str_has_prefix ( name, ""prefix"" ) && g_str_has_prefix ( name, ""prefix"" ) && g_str_has_prefix ( name, ""prefix"" ) && g_str_has_prefix ( name, ""prefix"" ) && g_str_has_prefix ( name, ""prefix"" ) && g_str_has_prefix ( name, ""prefix"" ) && g_str_has_prefix ( name, ""prefix"" ) && g_str_has_prefix ( name, ""prefix"" ) && g_str_has_prefix",0
197,"<S2SV_ModStart> = osi_calloc ( strlen ( filename ) + 5 ) ; if (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large"", __func__ ) ; return false ; } char * temp_filename = osi_calloc ( strlen ( filename ) + 5 ) ; if (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large"", __func__ ) ; return false ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; strcat ( temp_filename, "".new"" ) ; for ( const list_node_t * enode = list_begin ( section -> entries ) ; enode!= list_end ( enode ) ) { const entry_t * entry = ( const entry_t * ) list_node ( enode ) ; enode!= list_next ( enode ) ) { LOG_ERROR ( ""%s <S2SV_blank> = <S2SV_blank> %s\\n"", entry -> key, entry -> value ) ; } if ( list_next ( node )!= list_end ( config -> sections ) ) fputc ( '\\n',",0
198,"<S2SV_ModStart> ( ndo, ""%s"", tptr <S2SV_ModEnd> ) ) ;",0
199,<S2SV_ModStart> NULL ) ; if (! ctxt -> instate ),0
200,"<S2SV_ModStart> ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" <S2SV_ModEnd> ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" ""%s"" <S2SV_ModStart> ""Content-Length: <S2SV_blank> %d\\r\\n"" ""%s"" ""\\r\\n"" ""%s"" <S2SV_ModEnd>, request,",0
201,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> waitpid ( child <S2SV_ModStart> ; if ( copy_file_as_user <S2SV_ModEnd> ( dest, <S2SV_ModStart> | S_IWUSR ) <S2SV_ModEnd> ) errExit (",0
202,<S2SV_ModStart>!= BFA_STATUS_OK ) { kfree ( fcstats ) ; <S2SV_ModStart> return NULL ; },1
203,"<S2SV_ModStart> -> x = MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 0.0f,",0
204,<S2SV_ModStart> ; rec -> <S2SV_ModEnd> sasl_password = src,0
205,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
206,"<S2SV_ModStart> ExifShort c ; size_t <S2SV_ModEnd> tcount, tcount <S2SV_ModStart> o, datao ; size_t i, tcount, o",0
207,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> == - 1 ) && ( param -> testflag & T_DESCRIPT ) <S2SV_ModStart> ; if ( ( <S2SV_ModStart> == - 1 ) && ( param -> testflag & T_DESCRIPT ),0
208,<S2SV_ModStart> len ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> long hex ; size_t <S2SV_ModEnd> strindex = 0 <S2SV_ModStart> hex ; CURLcode res ; char * ns = malloc ( alloc ) ; if (! ns ) return NULL <S2SV_ModEnd> ; while ( <S2SV_ModStart> hex ) ; <S2SV_ModEnd> string += 2 <S2SV_ModStart> = strindex ; free ( ns ) ;,0
209,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
210,<S2SV_ModStart> ; def -> <S2SV_ModEnd> session_setup = usm_session_init,0
211,<S2SV_ModStart> NULL ; return <S2SV_ModEnd> match ( prog,0
212,<S2SV_ModStart> idx ] ; <S2SV_ModEnd> switch ( action <S2SV_ModStart> ) ; } <S2SV_ModEnd> return SNMP_ERR_NOERROR ;,0
213,<S2SV_ModStart> ++ ) { if ( packets > 1 ),0
214,"<S2SV_ModStart> timer ) ; list_for_each_entry_safe ( slave, tmp, & timeri -> slave_list_head <S2SV_ModEnd>, open_list ) <S2SV_ModStart> open_list ) { <S2SV_ModEnd> list_move_tail ( &",0
215,<S2SV_ModStart> -> u4_bitoffset = ih264d_read_mmco_commands <S2SV_ModEnd> ( ps_dec ),0
216,<S2SV_ModStart> int_fast32_t widthOverflow = ( <S2SV_ModStart> info -> originalWidth ) <S2SV_ModStart> int_fast32_t heightOverflow = ( <S2SV_ModStart> info -> originalHeight ),0
217,"<S2SV_ModStart> validator -> user, 0 <S2SV_ModStart> validator -> user, 0",0
218,<S2SV_ModStart> bus ] ; <S2SV_ModEnd> si = &,0
219,"<S2SV_ModStart>, timeo ) <S2SV_ModEnd> ; while (",0
220,<S2SV_ModStart> ; isspace ( ( unsigned char ) <S2SV_ModStart> && isspace ( ( unsigned char ),0
221,"<S2SV_ModStart>. active_set ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> read_set, NULL )",0
222,<S2SV_ModStart> msixcap msixcap ; if <S2SV_ModEnd> ( msgnum >= <S2SV_ModStart> msgnum <= MAX_MSIX_TABLE_ENTRIES <S2SV_ModEnd> ) ; tab_size,0
223,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",1
224,<S2SV_ModStart> == NULL ) { retval = KRB5KDC_ERR_PREAUTH_FAILED ; goto cleanup ; } <S2SV_ModEnd> status = X509_NAME_cmp <S2SV_ModStart> = 0 ; <S2SV_ModEnd> X509_NAME_free ( is,0
225,"<S2SV_ModStart> VP9_COMP * cpi, const MV_REFERENCE_FRAME frame_type <S2SV_ModStart> { if ( frame_type == VP9_REFERENCE_FRAME ) { return ALLOW_32X32 ; } else if ( frame_type == VP9_REFERENCE_FRAME ) { return ALLOW_32X32 ; } else if ( <S2SV_ModStart>. lossless ) <S2SV_ModEnd> return ALLOW_4X4 ; <S2SV_ModStart> else if ( frame_type == VP9_REFERENCE_FRAME ) { return ALLOW_32X32 ; } else if ( frame_type == VP9_REFERENCE_FRAME ) { return ALLOW_32X32 ; } else if ( frame_type == VP9_REFERENCE_FRAME ) { return ALLOW_32X32 ; } else if ( frame_type == VP9_REFERENCE_FRAME ) { return ALLOW_32X32 ; } else if ( frame_type == VP9_REFERENCE_FRAME ) { return ALLOW_32X32 ; } else if ( frame_type == VP9_REFERENCE_FRAME ) { return ALLOW_32X",0
226,<S2SV_ModStart> ; break ; default : break ;,0
227,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> -> size < MIN_BUFFER_SIZE ) || ( buf1 -> size < MIN_BUFFER_SIZE ) ) { return - 1 ; } else if ( ( buf1 -> size < MIN_BUFFER_SIZE ) || ( buf1 -> size == MIN_BUFFER_SIZE ) ) { return - 1 ; } else <S2SV_ModEnd> { return 1 <S2SV_ModStart> ; } else <S2SV_ModEnd> { return -,0
228,<S2SV_ModStart> = sizeof ( * info <S2SV_ModEnd> ) + size,0
229,<S2SV_ModStart> ; if ( protocol < 0 || protocol >= PF_AX25 ) protocol = 0 ; if (,0
230,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
231,"<S2SV_ModStart> b ) ; log_info ( ""Watching <S2SV_blank> system <S2SV_blank> buttons <S2SV_blank> on <S2SV_blank> /dev/input/%s <S2SV_blank> (%s)"", b -> name, name ) ;",0
232,<S2SV_ModStart> ( ) ; errors += test_string_formatting ( ) ;,0
233,<S2SV_ModStart> -> lun ) sas_eh_defer_cmd <S2SV_ModEnd> ( cmd ),0
234,"<S2SV_ModStart>, end_col_offset ; if ( TYPE ( CHILD ( n, name_i ) ) == RARROW ) return NULL ; <S2SV_ModStart> 2 ; } if ( TYPE ( CHILD ( n, name_i + 3 ) ) == RARROW ) return NULL ; <S2SV_ModStart> end_col_offset ) ; <S2SV_ModEnd> return FunctionDef (",0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,"<S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
237,,1
238,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
239,<S2SV_ModStart> case SEEK_SET : <S2SV_ModEnd> if ( position <S2SV_ModStart> > psf -> header. end ) return ; if ( position > psf -> header. end ) return ; if ( position > psf -> header. end ) return ; if ( position > psf -> header. end ) return ; if ( position > psf -> header. end ) return ; if ( position > psf -> header. end ) return ; if ( position > psf -> header. end ) return ; if ( position > psf -> header. end ) return ; if ( position > psf -> header. end ) return ; if ( position > psf -> header. end ) return ; if ( position > psf -> header. end ) return ; if ( position > psf -> header. end ) return ; if ( position > psf -> header. end ) return ; if ( position > psf -> header. end ) return ; if ( position > psf -> header. end ) return ; if ( position > psf -> header. end ) return ; if ( position > psf -> header. end ) return ; if ( position > psf -> header. end ) return ; if ( position > psf -> header. end ),0
240,<S2SV_ModStart> u4_ofst ) ; ps_cabac -> u4_ofst = ps_cabac -> u4_ofst ;,0
241,<S2SV_ModStart> ; } } if ( c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( ',0
242,<S2SV_ModStart> perf_event_context * ctx <S2SV_ModEnd> ; struct task_struct <S2SV_ModStart> event ) ; <S2SV_ModEnd> } raw_spin_unlock_irq (,0
243,<S2SV_ModStart> -> post_proc_flag = <S2SV_ModEnd> ( ctx -> <S2SV_ModStart>. noise_level ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
244,<S2SV_ModStart> = 0 ; ND_TCHECK_16BITS ( ptr. common -> packet_seq ) ;,0
245,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vpx_usec_timer_start ( & <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,1
246,"<S2SV_ModStart> ) ) { <S2SV_ModEnd> exit ( 1 <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone""",0
247,<S2SV_ModStart> ; if ( ptr_hbe_txposer -> synth_buf_offset < 8 || ptr_hbe_txposer -> synth_buf_offset < 8 || ptr_hbe_txposer -> synth_buf_offset < 8 || ptr_hbe_txposer -> synth_buf_offset < 8 || ptr_hbe_txposer -> synth_buf_offset < 8 || ptr_hbe_txposer -> synth_buf_offset < 8 || ptr_hbe_txposer -> synth_buf_offset < 8 || ptr_hbe_txposer -> synth_buf_offset < 8 || ptr_hbe_txposer -> synth_buf_offset < 8 || ptr_hbe_txposer -> synth_buf_offset < 8 || ptr_hbe_txposer -> synth_buf_offset < 8 || ptr_hbe_txposer -> synth_buf_offset < 8 || ptr_hbe_txposer -> synth_buf_offset < 8 || ptr_hbe_txposer -> synth_buf_offset < 8 || ptr_hbe_txposer -> synth_buf,0
248,,0
249,"<S2SV_ModStart> ; } } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
250,<S2SV_ModStart> (! proto_end ||! url,0
251,<S2SV_ModStart> end = path <S2SV_ModEnd> ; do { <S2SV_ModStart> - FDT_ERR_BADSTRUCTURE ; if ( base < base ) return - FDT_ERR_BADSTRUCTURE ;,0
252,<S2SV_ModStart> server. maxidletime || server. maxidletime,0
253,<S2SV_ModStart> channel ) ; <S2SV_ModEnd> set_description ( client,1
254,<S2SV_ModStart> book -> dim && i < n,1
255,,0
256,<S2SV_ModStart> { if ( sf -> x_step_q4 == 16 ) { sf -> predict [ 0 ] [ 0 ] = vp9_convolve_copy ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve_avg ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve_avg ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve_avg ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve_avg ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve_avg ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve_avg ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve_avg ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve_avg ; sf -> predict [ 0 ] [ 2 ] = vp9_convolve_avg ; sf -> predict [ 0 ] [ 2 ] = vp9_convolve_avg ; sf -> predict [ 0 ],0
257,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
258,"<S2SV_ModStart> -> pktoptions ; memset ( & skb, 0, sizeof ( skb ) ) ;",0
259,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> sctp_v6_protosw_protosw_exit ( ) <S2SV_ModStart> ( ) ; <S2SV_ModEnd> sctp_v4_pf_exit ( ),0
260,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void show_psnr (,0
261,<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen (,1
262,"<S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_PHY1ILR <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID",0
263,"<S2SV_ModStart> skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
264,"<S2SV_ModStart> ( fit, IMAGE_SIZE_INVALID <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( fit, IMAGE_SIZE_INVALID <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( fit, IMAGE_SIZE_INVALID <S2SV_ModEnd> ) ; }",0
265,"<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> uinput_fd, UI_DEV_DESTROY )",1
266,<S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc ->,0
267,<S2SV_ModStart> ) if ( argv [ i ] &&,0
268,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
269,<S2SV_ModStart> ib ] ; <S2SV_ModEnd> dequant_ptr = d,1
270,<S2SV_ModStart> FN_REFLEN ] ; if ( strlen ( opt_basedir ) > sizeof ( buff ) ) { error = - 1 ; goto exit ; },0
271,<S2SV_ModStart> decrypt_cb ) { unsigned char <S2SV_ModEnd> n = ( <S2SV_ModStart> n = ( unsigned char <S2SV_ModEnd> ) ( data_end,0
272,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
273,"<S2SV_ModStart> int * returnintra, int max_mv_sse, int max_mv_sse <S2SV_ModStart>, best_sse = max_mv_sse <S2SV_ModEnd>, best_rd_sse = <S2SV_ModStart>, best_rd_sse = max_mv_sse <S2SV_ModEnd>, best_rd_sse =",0
274,<S2SV_ModStart> -> size = ( int ),0
275,"<S2SV_ModStart> UWORD8 u1_profile_idc, u1_seq_parameter_set_id <S2SV_ModEnd> ; UWORD16 i2_max_frm_num <S2SV_ModStart> u1_level_idc, u1_seq_parameter_set_id <S2SV_ModEnd> ; if (",0
276,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> ; if ( cpi <S2SV_ModEnd> == NULL ) <S2SV_ModStart> return VPX_CODEC_INVALID_PARAM ; cpi <S2SV_ModEnd> -> svc. <S2SV_ModStart> -> svc. spatial_layer_id = params -> spatial_layer_id ; cpi <S2SV_ModEnd> -> svc. <S2SV_ModStart> -> svc. temporal_layer_id = params -> temporal_layer_id ; cpi <S2SV_ModEnd> -> lst_fb_idx = <S2SV_ModStart> -> lst_fb_idx = cpi <S2SV_ModEnd> -> gld_fb_idx ; <S2SV_ModStart> -> gld_fb_idx = cpi <S2SV_ModEnd> -> gld_fb_idx ; <S2SV_ModStart> -> gld_fb_idx = cpi <S2SV_ModEnd> -> gld_fb_idx ; <S2SV_ModStart> -> gld_fb_idx = cpi <S2SV_ModEnd> -> alt_fb_idx ; <S2SV_ModStart> -> alt_fb_idx = cpi <S2SV_ModEnd> -> alt_fb_idx ; <S2SV_ModStart> -> alt_fb_idx = cpi <S2SV_ModEnd> -> alt_fb_idx ; <S2SV_ModStart> -> alt_fb_idx = cpi <S2SV_ModEnd> -> alt_fb_idx ;",0
277,<S2SV_ModStart> { uint16 bitspersample = 0 <S2SV_ModStart> ; uint16 input_compression = 0 <S2SV_ModStart> ; uint16 input_photometric = 0 <S2SV_ModStart> ; uint16 input_photometric = 0 <S2SV_ModStart> ; uint16 input_photometric = 0,0
278,"<S2SV_ModStart> a ) { <S2SV_ModEnd> char * pn <S2SV_ModStart> ; r = safe_lstat <S2SV_ModEnd> ( a -> <S2SV_ModStart> ) ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } else if ( S_ISLNK ( st. st_mode ) ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( 0 ) ; } else if ( S_ISLNK ( st. st_mode ) ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( 0 ) ; } else if ( S_ISLNK ( st. st_mode ) ) { archive_set_error ( & a -> archive, 0, ""Removing <S2SV_blank> symlink <S2SV_blank> %s"", a -> name",0
279,"<S2SV_ModStart> i_sb ) ; <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> struct buffer_head * bh ; if (! iinfo -> i_location ) goto out_unlock ; bh = udf_read_ptagged ( inode -> i_sb, & iinfo -> i_location, 1, & ident ) ; if (! bh ) goto out_unlock <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( bh ) goto out_unlock ; if ( <S2SV_ModStart> return ; } bh = udf_read_ptagged ( inode -> i_sb, & loc, 0, & ident ) ; if ( bh ) goto out_unlock ; <S2SV_ModStart> ; if ( bh ) goto out_unlock ; if ( <S2SV_ModStart> ; if ( bh ) goto out_unlock ; if ( <S2SV_ModStart> ; if ( bh ) goto out_unlock ; if (",0
280,<S2SV_ModStart> TX_SIZE tx_size_uv = get_tx_size <S2SV_ModEnd> ( mbmi ),0
281,"<S2SV_ModStart> mq_ops ) { fq -> mq_ops = NULL ; <S2SV_ModStart> mq_flush_lock, flags <S2SV_ModEnd> ) ; flush_rq",0
282,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
283,"<S2SV_ModStart> { option = safeStrchr <S2SV_ModEnd> ( option,",0
284,<S2SV_ModStart> || * replySize <= <S2SV_ModEnd> sizeof ( effect_param_t,0
285,<S2SV_ModStart> ++ ) { if ( key_data [ i ]. key_type == KRB5_KDB_SALTTYPE_NORMAL ) { <S2SV_ModStart> goto cleanup ; },0
286,<S2SV_ModStart> 0x02 ) ; if ( outlen!= sizeof ( sbuf ) ) { <S2SV_ModStart> crgram_len ) ; },0
287,<S2SV_ModStart> ) ) ; if ( ret < 0 ) return ret ;,0
288,<S2SV_ModStart> ; } } return - 1 ;,1
289,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
290,<S2SV_ModStart> 1 ) ; memcpy <S2SV_ModEnd> ( & pbi <S2SV_ModStart> 1 ) ; memcpy <S2SV_ModEnd> ( & pbi,0
291,<S2SV_ModStart> NULL ) ; quantum_info = ( QuantumInfo * ) NULL ;,0
292,<S2SV_ModStart> len ) { <S2SV_ModEnd> if ( len <S2SV_ModStart> s ++ ; <S2SV_ModEnd> } if ( <S2SV_ModStart> 10 ; } if ( len > SIZE_MAX / 6 ) { Py_DECREF ( u ) ; return NULL ; } <S2SV_ModStart> 10 ; } <S2SV_ModEnd> } else {,0
293,"<S2SV_ModStart> struct stat stb <S2SV_ModEnd> ; BUF * <S2SV_ModStart> long ull ; int setimes, targisdir, wrerrno = 0, wrerrno = 0 ; <S2SV_ModStart> ; int setimes = 0, targisdir = 0, wrerrno = 0, wrerrno = 0, wrerrno = 0, wrerrno = 0, wrerrno = 0, wrerrno = 0, wrerrno = 0, wrerrno = 0, wrerrno = 0, wrerrno = 0, wrerrno = 0, wrerrno = 0, wrerrno = 0, wrerrno = 0, wrerrno = 0, wrerrno = 0, wrerrno = 0, wrerrno = 0, wrerrno = 0, wrerrno = 0, wrerrno = 0, wrerrno = 0, wrerrno = 0, wrerrno = 0, wrerrno = 0, wrerrno = 0, wrerrno = 0, wrerrno = 0, wrerrno = 0,",0
294,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
295,"<S2SV_ModStart> -> mip = vpx_calloc <S2SV_ModEnd> ( width,",0
296,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
297,<S2SV_ModStart> u2_frame_num ++ ; if ( u1_is_idr_slice && u1_is_idr_slice ) { <S2SV_ModStart> u2_frame_num ++ ; },0
298,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> vterm_allocator_free ( screen,1
299,"<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & delay )",1
300,"<S2SV_ModStart> one, offset = 0",0
301,<S2SV_ModStart> value ) { if ( strlen ( value ) >= sizeof ( value ) ) { <S2SV_ModStart> ) ) ; },0
302,"<S2SV_ModStart>. cmp = key_type_cmp <S2SV_ModEnd>,. match_data",0
303,<S2SV_ModStart> ; if ( <S2SV_ModEnd>! ntime ) <S2SV_ModStart> ntime ) { <S2SV_ModEnd> goto out ;,0
304,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
305,"<S2SV_ModStart> { PyObject * <S2SV_ModEnd> dict = _PyObject_GetAttrId <S2SV_ModStart>, & PyId___dict__ <S2SV_ModEnd> ) ; return",0
306,"<S2SV_ModStart> ) & desc, sizeof ( * desc )",1
307,<S2SV_ModStart> -> private_data ; struct perf_event_context * ctx = event -> ctx ; <S2SV_ModStart> PERF_EVENT_IOC_PERIOD : return ctx <S2SV_ModEnd> ; case PERF_EVENT_IOC_ID,0
308,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> * r, PREDICTION_MODE <S2SV_ModEnd> y_mode ) { <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode",0
309,<S2SV_ModStart> { if ( sha -> ctx_len > CCP_MAX_PKT_SIZE ) return - EINVAL ; if (,0
310,"<S2SV_ModStart> iv ) ; if ( self == NULL ) ossl_raise ( eCipherError, NULL ) ;",0
311,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
312,<S2SV_ModStart> ; if ( <S2SV_ModEnd> NGHTTP2_IS_Fatal ( rv,0
313,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> return 0 ;,0
314,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ] ; const vpx_extra_bit <S2SV_ModEnd> * const b <S2SV_ModStart> b = & vpx_extra_bits <S2SV_ModEnd> [ t ]",0
315,"<S2SV_ModStart> struct vp9_write_bit_buffer wb <S2SV_ModEnd> ; write_uncompressed_header ( <S2SV_ModStart> } ; struct vpx_write_bit_buffer saved_wb ; memset ( & wb, 0, sizeof ( wb ) ) <S2SV_ModEnd> ; write_uncompressed_header ( <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> += uncompressed_hdr_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb",0
316,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
317,<S2SV_ModStart> struct ikev2_id id = { 0 },0
318,<S2SV_ModStart> cmpt ) ; <S2SV_ModEnd> return ( 1,0
319,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
320,"<S2SV_ModStart> fft_jmp ; WORD32 xt0_0, xt1_0, xt1_0, xt1_0, xt1_0, xt1_0, xt1_0, xt1_0, xt2_0, xt2_0, xt2_0 ; WORD32 x_0, x_1, x_l1_0, xt1_0, xt1_0, xt1_0, xt2_0, xt2_0 ; WORD32 x_0, x_1, x_l1_0, xl1_0, xl1_0, xl1_0, xt2_0 ; WORD32 x_0, x_1, x_l1_0, x_l1_0, xl1_0, xl1_0, xl1_0, xt2_0 ; WORD32 x_0, x_1, x_l1_0, x_l1_0, xl1_0, xl1_0, xl",0
321,<S2SV_ModStart> mntent ) { if (! mntent -> mnt_dir ) return - ENOENT ;,0
322,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
323,"<S2SV_ModStart> ( env, server_name_val, req_server_name ( req ) ) ; rb_hash_aset ( env,",0
324,<S2SV_ModStart> endif int col_type = 0 <S2SV_ModStart> endif int prepare_retval = 0,0
325,<S2SV_ModStart> int eol ; size_t <S2SV_ModEnd> need = 0,0
326,"<S2SV_ModStart> val ) ) strlcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""NaN"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> < 0 ) strlcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""-Infinity"" <S2SV_ModEnd> ) ; else",0
327,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( fast_pool ->,0
328,"<S2SV_ModStart> LEX_ID ) { strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""ID:"" <S2SV_ModEnd> ) ; } <S2SV_ModStart> LEX_STR ) { strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""String:\'"" <S2SV_ModEnd> ) ; }",0
329,,1
330,<S2SV_ModStart> options ) { <S2SV_ModEnd> const si =,0
331,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
332,<S2SV_ModStart> s2 ) { const char * s1 = s1 ; const char * s2 = s2 ; if ( s1 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL ) return - 1 ; if ( s1 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL || s2 == NULL ) return - 1 ; if ( s1 == NULL || s2 == NULL || s2 == NULL ) return - 1 ; if ( s1 == NULL ) return - 1 ; if ( s1 == NULL ) return - 1 ; if ( s1 == NULL ) return - 1 ; if ( s1 == NULL ) return - 1 ; if ( s1 == NULL ) return - 1 ; if ( s1 == NULL ) return - 1 ; if ( s1 == NULL ) return - 1 ; if ( s1 == NULL ) return - 1 ; if ( s1 == NULL ) return - 1,0
333,"<S2SV_ModStart> { parse_global_option ( CMD_PRINT_HELP <S2SV_ModEnd>, NULL, <S2SV_ModStart> { parse_global_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL,",0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,"<S2SV_ModStart> ) ) ; if ( md -> enc_blocksize < 0 ) { loglog ( RC_LOG_WARNING, ""Encrypting <S2SV_blank> packet <S2SV_blank> too <S2SV_blank> large"" ) ; return ; }",0
336,<S2SV_ModStart> = e_error ; ps_dec -> pu1_input_buffer [ u4_size ] = 0 ;,0
337,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char * print_string,0
338,"<S2SV_ModStart>. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img, <S2SV_ModStart>. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, pts,",0
339,<S2SV_ModStart> ; } } if ( term. csi_argc!= 2 ) return ;,0
340,<S2SV_ModStart> < cols + 17 <S2SV_ModEnd> ; i ++,0
341,<S2SV_ModStart> ; if (! i -> parent ) return - 1 ; if (,0
342,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
343,<S2SV_ModStart> ; } } if ( 0 == ps_sps -> i4_pps_valid ) { return IHEVCD_INVALID_HEADER ; },0
344,<S2SV_ModStart> ) ) { if ( psf -> rwf_endian == SF_ENDIAN || psf -> rwf_endian == SF_ENDIAN_BIG ) break ;,0
345,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( sun_info. width > sun_info. width ) sun_info. height = sun_info. width * sun_info. height * sun_info. height * sun_info. height * sun_info. height * sun_info. height ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( sun_info. width > sun_info. height ) sun_info. width = sun_info. width * sun_info. height * sun_info. height * sun_info. height * sun_info. height * sun_info. height * sun_info. height * sun_info. height * sun_info. height * sun_info. height * sun_info. height * sun_info. height * sun_info. height * sun_info. height * sun_info. width * sun_info. height * sun_info. height * sun_info. height * sun_info. height * sun_info. height * sun_info. height * sun_info. height * sun_info. height * sun_info. height * sun_info. height * sun_info. height * sun_info.",0
346,"<S2SV_ModStart> 0 ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 0600 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone""",0
347,<S2SV_ModStart> BLOCK_8X8 : return vpx_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> BLOCK_16X8 : return vpx_mse16x8 <S2SV_ModEnd> ; case BLOCK_8X16 <S2SV_ModStart> BLOCK_8X16 : return vpx_mse8x16 <S2SV_ModEnd> ; case BLOCK_8X16 <S2SV_ModStart> ; default : return vpx_mse16x16 <S2SV_ModEnd> ; } },0
348,<S2SV_ModStart> ; if ( fixed_key_pack9 &&,0
349,"<S2SV_ModStart> flags ) ; if (! vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } <S2SV_ModStart> vb. vb2_buf ) ; if (! vb ) { dev_err ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } v4l2_buf = to_vb2_v4l2_buffer ( & vb -> vb. vb2_buf",0
350,<S2SV_ModStart> size ) { if ( size == 0 ) return NULL ;,0
351,<S2SV_ModStart> == sip && rxent -> client. s_addr == ip || <S2SV_ModStart> == EXTRACT_32BITS ( & ip -> ip_dst <S2SV_ModEnd> ) && rxent,0
352,"<S2SV_ModStart> = bss_desc ; memset ( bss_desc, 0, IEEE80211_MAX_SSID_LEN ) ;",0
353,<S2SV_ModStart> ; if ( unlikely (! sbuf ) ) goto error ; if (,0
354,<S2SV_ModStart> struct l2cap_conf_rfc rfc <S2SV_ModEnd> ; void * <S2SV_ModStart> sk ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> = L2CAP_MODE_ERTM ; <S2SV_ModEnd> break ; case <S2SV_ModStart>. retrans_timeout = L2CAP_DEFAULT_MAX_RETRANS_TO <S2SV_ModEnd> ; rfc. <S2SV_ModStart>. monitor_timeout = L2CAP_DEFAULT_MONITOR_TO <S2SV_ModEnd> ; l2cap_add_conf_opt (,0
355,"<S2SV_ModStart> { do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> r, MSG_WAITALL )",0
356,<S2SV_ModStart> u4_length ) { if ( u4_length ) { <S2SV_ModStart> u4_length ) ; },0
357,<S2SV_ModStart> tok ) ; sfree ( tok ) ; <S2SV_ModStart> 0 ) { if (! <S2SV_ModStart> ( pair ) ) return,0
358,"<S2SV_ModStart> * delegation, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> -> type & fmode <S2SV_ModEnd> )!= open_flags <S2SV_ModStart> ( state, fmode <S2SV_ModEnd>, & deleg_cur <S2SV_ModStart> -> stateid, fmode <S2SV_ModEnd> ) ; ret",0
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,"<S2SV_ModStart> * xd, const <S2SV_ModStart> int sse ; const int64_t rate_sum = 0 ; <S2SV_ModStart> pd ) ; const int64_t rate_sum = 0 ; const int64_t dist_sum = 0 ; <S2SV_ModStart> pd ) ; const int64_t dist_sum = 0 ; <S2SV_ModStart> == 0 ) { <S2SV_ModStart> = sse ; dist_sum += rate_sum ; dist_sum += rate_sum ; dist_sum += rate_sum ; dist_sum += rate_sum ; dist_sum += rate_sum ; dist_sum += rate_sum ; } else { int rate ; int64_t dist ; int quantizer = ( pd -> dequant [ 1 ] >> 3 ) ; if ( quantizer < 120 ) rate_sum += rate_sum ; dist_sum += rate_sum ; dist_sum += rate_sum ; dist_sum += rate_sum ; dist_sum += rate_sum ; } else { int rate ; int64_t dist ; int quantizer = ( pd -> dequant [ 1 ] >> 3 ) ; if ( quantizer < 120 ) rate = ( square_error * ( 280 - quantizer ) ) >> 8 ; rate_sum +=",0
361,<S2SV_ModStart> } if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
362,<S2SV_ModStart> { if ( strlen ( username ) >= PAM_MAX_RESP_SIZE ) { return ( PAM_BUF_ERR ) ; } if (,0
363,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> ) { return vpx_read_tree <S2SV_ModEnd> ( r,",1
364,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",1
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,<S2SV_ModStart> depth ++ ; ND_TCHECK ( buf2 ) ;,0
367,"<S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_RXQCR, RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_RXQCR, RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_TXQCR, TXQCR_METFE <S2SV_ModEnd> ) ; n <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK",0
368,<S2SV_ModStart> ; # endif mono_cleanup_threads ( ) ;,0
369,"<S2SV_ModStart> x_7 ; WORD32 <S2SV_ModEnd> x_8, x_9 <S2SV_ModStart> x_b, x_b <S2SV_ModEnd>, x_b, <S2SV_ModStart> x_b, x_b <S2SV_ModEnd>, x_b, <S2SV_ModStart> x_b, x_b <S2SV_ModEnd>, x_b, <S2SV_ModStart> x_b, x_b <S2SV_ModEnd>, x_b, <S2SV_ModStart> x_b, x_b <S2SV_ModEnd>, x_b, <S2SV_ModStart> x_b, x_b <S2SV_ModEnd>, x_b, <S2SV_ModStart> x_b, x_b <S2SV_ModEnd>, x_b, <S2SV_ModStart> x_b, x_b <S2SV_ModEnd>, x_b, <S2SV_ModStart> x_b, x_b <S2SV_ModEnd>, x_b, <S2SV_ModStart> x_b, x_b <S2SV_ModEnd>, x_b, <S2SV_ModStart> x_b, x_b <S2SV_ModEnd>, x_b, <S2SV_ModStart> x_b, x_b <S2SV_ModEnd>, x_b, <S2SV_ModStart> x_b, x_b <S2SV_ModEnd>, x_b, <S2SV_ModStart> x_b, x_b <S2SV_ModEnd>, x_b, <S2SV_ModStart> x_b, x_b <S2SV_ModEnd>, x_b, <S2SV_ModStart> x_b, x_b <S2SV_ModEnd>, x_b, <S2SV_ModStart> x_b, x_b <S2SV_ModEnd>, x_b,",0
370,<S2SV_ModStart> ; if ( <S2SV_ModEnd> pmd_none_or_clear_bad ( pmd,0
371,"<S2SV_ModStart> ""Incorrect <S2SV_blank> parameters:\\n"" ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> ""Incorrect <S2SV_blank> parameters:\\n"" ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> ] ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> ] ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> fout ) ; <S2SV_ModEnd> return 1 ;",0
372,"<S2SV_ModStart> num_fields ) { size_t <S2SV_ModEnd> i, result <S2SV_ModStart>, result ; if ( num_fields > UINT_MAX / num_fields ) { Py_DECREF ( l ) ; return 0 ; }",0
373,<S2SV_ModStart> vpx_codec_alg_priv * priv <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> priv ) { <S2SV_ModEnd> unsigned int i <S2SV_ModStart> VPX_CODEC_MEM_ERROR ; } <S2SV_ModEnd> ctx -> priv <S2SV_ModStart> VPX_CODEC_MEM_ERROR ; } <S2SV_ModEnd> for ( i <S2SV_ModStart> ++ ) ; priv -> cx_data = malloc ( priv -> cx_data_sz ) ; if ( priv -> cx_data_sz < 0 ) { return VPX_CODEC_MEM_ERROR ; } priv -> cx_data = malloc ( priv -> cx_data_sz ) ; priv -> cx_data = malloc ( priv -> cx_data_sz ) ; if (! priv -> cx_data ) { return VPX_CODEC_MEM_ERROR ; } <S2SV_ModStart> VPX_CODEC_MEM_ERROR ; } <S2SV_ModEnd> for ( i,0
374,<S2SV_ModStart> ++ ; } <S2SV_ModEnd> pixel -> freq,0
375,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx ->,0
376,<S2SV_ModStart> out ; } if ( unlikely ( iinfo -> i_size > UDF_MAX_SIZE ) ) goto out ;,0
377,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB (",0
378,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int bad_format_imginfo (,0
379,"<S2SV_ModStart> ; UtRegisterTest ( ""IPV4TooLargeTest"", IPV4TooLargeTest ) ; UtRegisterTest (",0
380,<S2SV_ModStart> = object_length ; new_object. length = 0 ;,0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,<S2SV_ModStart> p_frame ) ; if ( p_frame == NULL ) return NULL ;,0
384,"<S2SV_ModStart> ; exit_mf : if (! mf -> nr_of_files ) { mp_verbose ( log, ""open <S2SV_blank> mf <S2SV_blank> pattern <S2SV_blank> does <S2SV_blank> not <S2SV_blank> exist"" ) ; }",0
385,<S2SV_ModStart> + idx ) ; assert ( a -> names == NULL ),0
386,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
387,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
388,"<S2SV_ModStart> ++ ) { if ( data_size > JPEG_MAX_FRAME_SIZE ) { av_log ( ctx -> log_ctx, AV_LOG_WARNING, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> maximum <S2SV_blank> of <S2SV_blank> image <S2SV_blank> size <S2SV_blank> exceeded.\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
389,"<S2SV_ModStart> expr_stmt ) ; compile_expr_stmt ( c, n ) ;",0
390,"<S2SV_ModStart> int vp8_denoiser_filter_c ( int motion_magnitude, int motion_magnitude, int y_offset, int uv_offset, int uv_offset, int uv_offset, int uv_offset, int uv_offset <S2SV_ModEnd> ) { unsigned <S2SV_ModStart> unsigned char * running_avg_y = running_avg_y <S2SV_ModEnd> ; unsigned char <S2SV_ModStart> unsigned char * running_avg_y = running_avg_y <S2SV_ModEnd> ; int avg_val <S2SV_ModStart> c, i <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( <S2SV_ModEnd> absdiff <= 3 <S2SV_ModStart> c ] ; <S2SV_ModEnd> } else { <S2SV_ModStart> c ] ; } else { if ( absdiff >= 4 && absdiff <= 15 ) running_avg_y [ c ] = mc_running_avg_y [ c ] ; else running_avg_y [ c ] = mc_running_avg_y [ c ] ; else running_avg_y [ c ] = mc_running_avg_y [ c ] ; else running_avg_y [ c ] = mc_running_avg_y [ c ] ; else running_avg_y [ c",0
391,<S2SV_ModStart> reqPtr ) ; if ( result == SOCK_OK ) { return SOCK_MORE ; },0
392,<S2SV_ModStart> = uregs ; <S2SV_ModEnd> # if XTENSA_HAVE_COPROCESSORS <S2SV_ModStart> ; # endif return <S2SV_ModEnd> - EFAULT ;,0
393,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
394,<S2SV_ModStart> xop ) { <S2SV_ModEnd> if ( xop <S2SV_ModStart> == XCOL_SOURCE_RECV_OP ) return ; <S2SV_ModEnd> remote_dev = xop,0
395,"<S2SV_ModStart> int error ; EXT2_FSBLk_t goal = ext2_group_first_block_no ( sb, EXT2_SB ( inode ) -> i_block_group ) ; int block = ext2_new_block ( inode, goal, & error ) ; if ( unlikely ( block ) ) { ea_idebug ( inode, ""creating <S2SV_blank> block <S2SV_blank> %d"", block ) ; mark_inode_dirty ( inode ) ; mark_inode_dirty ( inode ) ; mark_inode_dirty ( inode ) ; mark_inode_dirty ( inode ) ; mark_inode_dirty ( inode ) ; mark_inode_dirty ( inode ) ; mark_inode_dirty ( inode ) ; mark_inode_dirty ( inode ) ; mark_inode_dirty ( inode ) ; mark_inode_dirty ( inode ) ; mark_inode_dirty ( inode ) ; mark_inode_dirty ( inode ) ; mark_inode_dirty ( inode ) ; mark_inode_dirty ( inode ) ; mark_inode_dirty (",0
396,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
397,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
398,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0 ) ;",0
399,"<S2SV_ModStart> AcquireQuantumMemory ( imsx <S2SV_ModEnd>, 1 )",0
400,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; <S2SV_ModEnd> return vp9_copy_reference_dec (",0
401,<S2SV_ModStart> u2_frame_num ++ ; if ( u1_is_idr_slice && u1_is_idr_slice ) { <S2SV_ModStart> u2_frame_num ++ ; },0
402,"<S2SV_ModStart>, u4_y_offset ; UWORD32 u4_x_dst_offset = 0 ; UWORD32 u4_y_dst_offset = 0 ; <S2SV_ModStart>, u4_y_offset ; u4_x_dst_offset = 0 ; <S2SV_ModStart>, u4_y_offset ; u4_x_dst_offset = 0 ; <S2SV_ModStart>, u4_y_offset ; u4_x_dst_offset = 0 ; <S2SV_ModStart>, u4_y_offset ; u4_x_dst_offset = 0 ; <S2SV_ModStart>, u4_y_offset, u4_x_dst_offset, u4_y_dst_offset, u4_y_dst_offset, u4_y_dst_offset, u4_y_dst_offset, u4_y_dst_offset, u4_y_dst_offset, u4_pred_strd, u4_pred_strd, u4_pred_strd, u4_pred_strd, u4_pred_strd, u4_pred_strd, u4_pred",0
403,<S2SV_ModStart> ) { const VP9EncoderConfig <S2SV_ModEnd> * const cfg,0
404,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
405,"<S2SV_ModStart> tx_size = plane? get_uv_tx_size ( mbmi ) : <S2SV_ModEnd> mbmi -> tx_size <S2SV_ModStart> mbmi -> tx_size <S2SV_ModEnd> ; const BLOCK_SIZE <S2SV_ModStart> ; int i = 0 <S2SV_ModStart> ) ) ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 || xd -> mb_to_bottom_edge < 0 || xd -> mb_to_bottom_edge < 0 || xd -> mb_to_bottom_edge < 0 || xd -> mb_to_bottom_edge < 0 || xd -> mb_to_bottom_edge < 0 || xd -> mb_to_bottom_edge < 0 ) { for ( r = 0 ; r < num_4x4_h ; r += ( 1 << tx_size ) ) { if ( r < max_blocks_high && c < max_blocks_wide ) { if ( r < max_blocks_high && c < max_blocks_wide )visit ( plane, i, plane_bsize, arg ) ; i += ( 1 << tx_size )",0
406,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 4 ) ; <S2SV_ModEnd> src += src_stride",0
407,<S2SV_ModStart> nrow ) { if ( row + img -> row_offset > ( row + img -> row_offset ) / rowsperstrip ) { return ( 0 ) ; } <S2SV_ModStart> % rowsperstrip ; if ( row + img -> row_offset > ( row + img -> row_offset ) / rowsperstrip ) { return ( 0 ) ; },0
408,<S2SV_ModStart> ; } } <S2SV_ModEnd> return 0 ;,0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
410,<S2SV_ModStart> num & ( 1U << <S2SV_ModEnd> ( number -,0
411,"<S2SV_ModStart> int w = vpx_img_plane_width <S2SV_ModEnd> ( img,",0
412,"<S2SV_ModStart> ; uint16_t attr_len = 0 <S2SV_ModStart> ; uint16_t orig_attr_len = 0 <S2SV_ModStart> ; uint16_t last_block_len = 0 <S2SV_ModStart> ; uint16_t last_block_len = 0 <S2SV_ModStart> 1 ; } if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", avp -> length, avp -> length ) ; return - 1 ; }",0
413,<S2SV_ModStart> 1 ] ; if ( arg == 0 ) return 0 ; <S2SV_ModStart> len ) ; if ( arg == 0 ) return 0 ;,0
414,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0 ) ;",0
415,"<S2SV_ModStart> ; BT_DBG ( ""sock <S2SV_blank> %p, <S2SV_blank> sk <S2SV_blank> %pK"" <S2SV_ModEnd>, sock,",0
416,"<S2SV_ModStart> MT_CPTYPE_PASSSALT ) { memcpy <S2SV_ModEnd> ( pass_salt,",0
417,<S2SV_ModStart> ) { goto bail_close_conn <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail_close_conn <S2SV_ModEnd> ; } else <S2SV_ModStart> ) ; goto bail_close_conn <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto bail_close_conn <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto bail_close_conn <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto bail_close_conn <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto bail_close_conn <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto bail_close_conn <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto bail_close_conn <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto bail_close_conn <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto bail_close_conn <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto bail_close_conn <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto bail_close_conn <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto bail_close_conn <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto bail_close_conn <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto bail_close_conn ; } } bail_close_conn : mutt_socket_close ( adata -> conn ) ; bail_close_conn : mutt_socket_close ( adata -> conn ) ; bail_close_conn : mutt_,0
418,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
419,"<S2SV_ModStart> ( gpsd_sock, ""%s"",",0
420,"<S2SV_ModStart>, & rlen, 0",1
421,"<S2SV_ModStart> * slavename ; char * pass_salt ; <S2SV_ModStart> } # endif pass_salt = strchr ( curconn -> pass_salt, '\\0' ) ; if ( pass_salt!= NULL && strchr ( pass_salt, '\\0' )!= NULL ) { syslog ( LOG_NOTICE, _ ( ""(%d) <S2SV_blank> Invalid <S2SV_blank> login <S2SV_blank> by <S2SV_blank> %s."" ), curconn -> pass_salt ) ; abort_connection ( curconn, & pdata ) ; } <S2SV_ModStart> = 0 ; strncpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> user -> password, sizeof ( pkthdr -> pass_salt ) - 17 ) ; strncpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> ) + 17, sizeof ( pkthdr -> pass_salt ) - 17",0
422,<S2SV_ModStart> ; if ( name &&,0
423,<S2SV_ModStart> off } ; if ( strlen ( str ) > sizeof ( buf ) ) { return - 1 ; },0
424,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
425,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
426,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteFujiEntry ) ) ;",1
427,<S2SV_ModStart> bd_addr ) { if (! bt_addr ) return BT_STATUS_NOT_READY ;,0
428,<S2SV_ModStart> i ; int <S2SV_ModEnd> expect ; txid <S2SV_ModStart> 4 ) ; <S2SV_ModEnd> expect = 8 <S2SV_ModStart> || nxip > ( int ),0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
430,<S2SV_ModStart> ( epoll_ ) ; if ( count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ),0
431,"<S2SV_ModStart> = parse_global_option ( CMD_INITIALIZE <S2SV_ModEnd>, NULL,",0
432,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_LOADER_MAX : * ( size_t * ) val = ms -> elf_loader_max ; return 0 ;,0
433,<S2SV_ModStart> offset ) { <S2SV_ModEnd> if ( offset,0
434,<S2SV_ModStart> ++ ) { if (! writer ) return GF_OUT_OF_MEM ;,0
435,"<S2SV_ModStart> ] ; int plen, <S2SV_ModStart> ; # endif <S2SV_ModEnd> # if defined <S2SV_ModStart> ; # endif memcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> password, 82, sizeof ( md5data ) <S2SV_ModStart> = '\\0' ; memcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> ) md5data, pass_salt, 16 ) ; memcpy <S2SV_ModEnd> ( md5data +",0
436,<S2SV_ModStart> ; if ( <S2SV_ModEnd> Prefix!= NULL,1
437,<S2SV_ModStart> ; if ( NCH ( n ) &&,0
438,<S2SV_ModStart> ( ) ; g_free ( headers ) ;,0
439,"<S2SV_ModStart> -> y_buffer ; memcpy <S2SV_ModEnd> ( dst, <S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst,",0
440,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart> int mi_col ; vpx_memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ( mi_col = td <S2SV_ModEnd> -> mi_col_start ; <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> mi_col < MI_BLOCK_SIZE ) { int64_t dummy_dist ; BLOCK_SIZE <S2SV_ModEnd> i ; MACROBLOCK <S2SV_ModStart> { for ( <S2SV_ModEnd> i = BLOCK_4X4",0
441,"<S2SV_ModStart>, obj_tlen ; u_int <S2SV_ModEnd> hexdump ; u_int <S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ;",0
442,"<S2SV_ModStart> mbmi, const MV <S2SV_ModEnd> mvs [ 2 <S2SV_ModStart> ) { const MV <S2SV_ModEnd> * ref =",0
443,"<S2SV_ModStart>, vpx_codec_iface_name ( encoder <S2SV_ModEnd> -> interface ( <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) )",0
444,"<S2SV_ModStart> ; if ( skb_expand_tail <S2SV_ModEnd> ( skb_out,",0
445,"<S2SV_ModStart> ; netsnmp_mibindex_load ( ) ; netsnmp_init_mib_internals ( ) ; env_var = netsnmp_getenv ( ""MIBFILES"" ) ; if ( env_var == NULL ) { env_var = netsnmp_getenv ( ""MIBFILES"" ) ; if ( env_var == NULL ) env_var = netsnmp_getenv ( ""MIBFILES"" ) ; else env_var = netsnmp_getenv ( ""MIBFILES"" ) ; if ( env_var == NULL ) env_var = netsnmp_getenv ( ""MIBFILES"" ) ; else env_var = netsnmp_getenv ( ""MIBFILES"" ) ; if ( env_var == NULL ) env_var = netsnmp_getenv ( ""MIBFILES"" ) ; else env_var = netsnmp_getenv ( ""MIBFILES"" ) ; if ( env_var == NULL ) env_var = netsnmp_getenv ( ""MIBFILES"" ) ; else env_var = netsnmp_getenv",0
446,"<S2SV_ModStart> ++ ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> ], O_RDWR ) <S2SV_ModStart> 1 ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_KEY ) ) <S2SV_ModStart> 1 ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_REL ) )",0
447,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
448,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s,",0
449,"<S2SV_ModStart> iakerb_ctx_id_t * pctx, krb5_error_code code ) { <S2SV_ModEnd> krb5_gss_init_context ( &",0
450,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> bitmapDC = CreateCompatibleDC",1
451,<S2SV_ModStart> ; while ( ( <S2SV_ModStart> )!= START_CODE_PREFIX ) && ( ps_stream -> u4_offset < ps_stream -> u4_max_offset ),1
452,<S2SV_ModStart> return - EINVAL <S2SV_ModEnd> ; if (,0
453,<S2SV_ModStart>. class_inst ; if ( mono_class_has_error ( klass ) ) return NULL ;,0
454,"<S2SV_ModStart> ; int tmp ; if ( count > sizeof ( ""nnnnn\\0"" ) ) return - EINVAL",0
455,"<S2SV_ModStart> { char * <S2SV_ModEnd> last_elem, * <S2SV_ModStart> size_t len ; char * last_elem = result ; if ( ( ( strncmp ( name, ""ORIGIN"", 6 ) == 0 && ( len = 7 )!= 0 ) ) && ( name [ len ] == '\\0' || name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) && ( name [ 1 ] == '\\0' || name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) || ( name [ 1 ] == '{' && ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 9 )!= 0 && ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( len = 11 )!= 0 ) ) ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( len = 11 )!= 0 ) ) ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0",0
456,<S2SV_ModStart> ) H264SwDecMalloc ( <S2SV_ModEnd> ) ; if,0
457,<S2SV_ModStart> drop ; } <S2SV_ModEnd> opt -> optlen,0
458,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
459,<S2SV_ModStart> goto errout ; if ( info -> stagebook >= ci -> books ) goto errout ;,0
460,<S2SV_ModStart> krb5_key_data * key_data = NULL <S2SV_ModStart> err ) ; <S2SV_ModEnd> memcpy ( key_data,0
461,"<S2SV_ModStart> * self, Py_ssize_t <S2SV_ModEnd> idx, PyObject",0
462,<S2SV_ModStart> ] ) ; sqlite3_free ( pCsr ) ;,0
463,<S2SV_ModStart> filp ) { struct sock * sk = SOCKET_I ( inode ) ; <S2SV_ModStart> ( inode ) ) ; if ( unlikely (! sk ) ) sock_release ( sk,0
464,"<S2SV_ModStart> * orelse, string type_comment, <S2SV_ModStart> ; p -> v. AsyncFor. type_comment = type_comment ; p ->",0
465,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> my_bool <S2SV_ModEnd> mi_sort_index ( MI_CHECK <S2SV_ModStart> * param, my_bool <S2SV_ModEnd> * name )",0
466,,0
467,"<S2SV_ModStart> UINT error ; UINT16 <S2SV_ModEnd> ( s,",0
468,"<S2SV_ModStart> -> socket, ""%s"", <S2SV_ModStart> -> socket, ""%s"",",1
469,"<S2SV_ModStart> struct flowi6 fl6 ; memset ( & fl6, 0, sizeof ( fl6 ) )",0
470,<S2SV_ModStart> ; MATLAB_KO : MATLAB_KO :,0
471,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
472,"<S2SV_ModStart> 0 ; int <S2SV_ModEnd> result = RLC_OK <S2SV_ModStart> 8 ) ; * p_len = m_len - k_len - k_len - 3 - m_len ; <S2SV_ModStart> m_len ) ; <S2SV_ModEnd> * p_len = <S2SV_ModStart> m_len ) ; <S2SV_ModEnd> * p_len = <S2SV_ModStart> 0 ] ; <S2SV_ModEnd> do { m_len <S2SV_ModStart> 8 ) ; * p_len -= ( m_len - 1 ) ; * p_len -= ( m_len - 1 ) ; * p_len -= ( m_len - 1 ) ; bn_mod_2b ( m, m, ( k_len - * p_len ) * 8 ) ; <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> case RSA_SIG :",0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,"<S2SV_ModStart> ( psf = safe_calloc <S2SV_ModEnd> ( 1,",0
475,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void fix_interp_filter (,0
476,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> const int aligned_mi_cols <S2SV_ModStart> mi_cols ) ; <S2SV_ModEnd> vpx_setup_src_planes ( x <S2SV_ModStart> subsampling_y ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
477,<S2SV_ModStart> hp ) ; if ( retval!= 0 ) { <S2SV_ModStart> ) ; } },0
478,<S2SV_ModStart> define EOFOp 0x07 <S2SV_ModEnd> char magick [ <S2SV_ModStart> readBlobLSBShort ( image <S2SV_ModEnd> ) ; if <S2SV_ModStart> readBlobLSBShort ( image <S2SV_ModEnd> ) ; if <S2SV_ModStart> readBlobLSBShort ( image <S2SV_ModEnd> ) ; if <S2SV_ModStart> readBlobLSBShort ( image <S2SV_ModEnd> ) ; if <S2SV_ModStart> readBlobLSBShort ( image <S2SV_ModEnd> ) ; if,0
479,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> sizeof ( tETH_HDR ),1
480,<S2SV_ModStart> ; ps_dec -> u2_frame_num = 0 ; ps_dec ->,0
481,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> * karg ; <S2SV_ModEnd> int iocnum ; <S2SV_ModStart> ) ) ; kfree ( karg ) ; <S2SV_ModStart> karg ) ; kfree ( karg ) ;",0
482,"<S2SV_ModStart> -> columns, 3 <S2SV_ModEnd> * sizeof (",0
483,"<S2SV_ModStart> } else { fprintf ( stderr, ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { fprintf ( stderr, ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { fprintf ( stderr, ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv",0
484,"<S2SV_ModStart> ; if ( buf_size < 2 ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( <S2SV_ModStart> ; if ( buf_size < 2 ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if (",0
485,"<S2SV_ModStart> charbuf ), ""%s"",",0
486,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> unbind_ports ( void <S2SV_ModStart> 1 ) ; if (! stunnel_locks [ LOCK_SECTIONS ] ) { return - 1 ; } <S2SV_ModStart> ] ) ; if (! stunnel_locks [ LOCK_SECTIONS ] ) { return - 1 ; } <S2SV_ModStart> 0 ; } if (! stunnel_locks [ LOCK_SECTIONS ] ) { return - 1 ; } <S2SV_ModStart> ) ; } return 0 ;,0
487,<S2SV_ModStart> void ) { if ( mnemonic ),0
488,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ;",0
489,"<S2SV_ModStart> image ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
490,<S2SV_ModStart> ps_slice_hdr ) { <S2SV_ModEnd> WORD32 st_rps_idx ;,0
491,"<S2SV_ModStart>, int fmt, const char * name <S2SV_ModStart> = 0 ; if ( name ) { <S2SV_ModStart> = 0 ; } <S2SV_ModStart> child ) { if ( name ) { <S2SV_ModStart> child -> string ) ; } entries [ i ++ ] = name ; entries [ i ++ ] = name ; if ( str && ret ) len += strlen ( name ) + strlen ( name ) + 2 + ( fmt? 2 + depth : 0 <S2SV_ModStart> ; if ( str ) { for ( i = 0 ; i < depth ; ++ i ) { if ( fmt ) * ptr ++ = '\\n' ; * ptr ++ = '\\n' ; * ptr ++ = '\\n' ; * ptr ++ = 0 ; for ( i = 0 ; i < depth ; ++ i ) { if ( fmt ) for ( j = 0 ; j < depth ; ++ j ) * ptr ++ = 0 ; for ( j = 0 ; j < depth ; ++ j ) * ptr ++ = 0 ; for ( j = 0 ; j < depth ; ++ j ) * ptr ++ = 0 ; for ( j = 0 ; j < depth ; ++ j ) * ptr ++ = 0 ; for ( j = 0 ; j < depth ; ++ j ) * ptr ++ =",0
492,<S2SV_ModStart> ; other = unix_peer <S2SV_ModEnd> ( sk ) <S2SV_ModStart> { if ( unix_peer <S2SV_ModEnd> ( other ) <S2SV_ModStart> { if ( unix_peer <S2SV_ModEnd> ( other ) <S2SV_ModStart> = 0 ; <S2SV_ModEnd> sock_put ( other,0
493,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; sendClean ( outputbuffer ) ;",1
494,<S2SV_ModStart> ( OM_uint32 ) KRB5_BAD_MSIZE <S2SV_ModEnd> ; return GSS_S_DEFECTIVE_TOKEN <S2SV_ModStart> ( OM_uint32 ) KRB5_BAD_MSIZE <S2SV_ModEnd> ; return GSS_S_DEFECTIVE_TOKEN,0
495,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> ( args, vpx_ref_frame_t <S2SV_ModEnd> * ) ;",0
496,<S2SV_ModStart> plug ) ; <S2SV_ModEnd> put_ioctx ( ctx,0
497,"<S2SV_ModStart>, int rep_quick, my_bool check_mode <S2SV_ModStart> ) ) { if ( check_mode == MY_WME ) check_mode = MY_WME ;",0
498,"<S2SV_ModStart> s } ; uECC_word_t carry ; wordcount_t num_words = curve -> num_words ; if ( uECC_vli_isZero ( p, num_n_bits ) ) { return 0 ; } if ( uECC_vli_isZero ( p, num_words ) ) { return 0 ; } if ( uECC_vli_isZero ( p, num_words ) ) { return 0 ; } if ( uECC_vli_isZero ( p, num_words ) ) { return 0 ; } if ( uECC_vli_isZero ( p, num_words ) ) { return 0 ; } if ( uECC_vli_isZero ( p, num_words ) ) { return 0 ; } if ( uECC_vli_isZero ( p, num_words ) ) { return 0 ; } if ( uECC_vli_isZero ( p, num_words ) ) { return 0 ; } if ( uECC_vli_isZero ( p, num_words ) ) { return 0 ; } if ( uECC_vli_",0
499,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
500,<S2SV_ModStart> ; } else if ( pool -> free < pool -> free_total ) <S2SV_ModStart> ; } } else { free ( buf ) ; },0
501,"<S2SV_ModStart> tp ; { <S2SV_ModEnd> const char hex <S2SV_ModStart> ] = ""00112233445566778899aAbBcCdDeEfF"" <S2SV_ModEnd> ; const char <S2SV_ModStart> cp ++ ; cp ++ ; <S2SV_ModStart> cp ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
503,"<S2SV_ModStart> pixc, * <S2SV_ModEnd> pixg, * <S2SV_ModStart> pixc = pixFewColorsOctcubeQuant1 ( pixs, level ) ; if ( pixc <S2SV_ModEnd> == NULL ) <S2SV_ModStart> == NULL ) { <S2SV_ModStart> NULL ) ; }",0
504,"<S2SV_ModStart> = 256 ; memset ( xd, 0, sizeof ( xd ) ) ;",0
505,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd>  overhead = <S2SV_ModStart> * data ; size_t <S2SV_ModEnd> size = overhead,0
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> bool <S2SV_ModEnd> nego_process_negotiation_response ( rdpNego <S2SV_ModStart> = NEGO_STATE_FAIL ; return false <S2SV_ModEnd> ; } Stream_Read_UINT8 <S2SV_ModStart> = NEGO_STATE_FINAL ; return false ;,0
507,"<S2SV_ModStart> ; int i <S2SV_ModEnd> ; const double <S2SV_ModStart>, i, active_worst_quality <S2SV_ModEnd> ) ; if <S2SV_ModStart> active_worst_quality ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( active_worst_quality > VP9_HIGHBITDEPTH ) { assert ( active_worst_quality > VP9_HIGHBITDEPTH ) ; q = i - 1 ; break ; } # endif",0
508,<S2SV_ModStart> ; value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1101WritePhyReg (,0
509,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
510,"<S2SV_ModStart> int dst_stride, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart> plane ] ; memset <S2SV_ModEnd> ( left_col,",0
511,<S2SV_ModStart> ++ ; } if ( pattern [ end ] == '\\0' ) { end ++ ; },0
512,<S2SV_ModStart> i_completed_io_list ) ; <S2SV_ModEnd> ei -> i_sync_tid,0
513,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> KEY_FRAME ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> profile == PROFILE_1 <S2SV_ModEnd> ) ; if <S2SV_ModStart> profile == PROFILE_1 <S2SV_ModEnd> ) ; if <S2SV_ModStart> profile == PROFILE_1 <S2SV_ModEnd> ) ; if <S2SV_ModStart> profile == PROFILE_1 <S2SV_ModEnd> ) ; if <S2SV_ModStart> profile == PROFILE_",0
514,"<S2SV_ModStart> ; if ( bad_format ( argc, argv ) ) return ; if ( bad_format ( argc, argv ) ) return ; if ( bad_format ( argc, argv ) ) return ; if ( bad_format ( argc, argv ) ) return ; if ( bad_format ( argc, argv ) ) return ; if ( bad_format ( argc, argv ) ) return ; if ( bad_format ( argc, argv ) ) return ; if ( bad_format ( argc, argv ) ) return ; if ( bad_format ( argc, argv ) ) return ; if ( bad_format ( argc, argv ) ) return ; if ( bad_format ( argc, argv ) ) return ; if ( bad_format ( argc, argv ) ) return ; if ( bad_format ( argc, argv ) ) return ; if ( bad_format ( argc, argv ) ) return ; if ( bad_format ( argc, argv ) ) return ; if ( bad_format ( argc, argv ) ) return ; if ( bad_format ( argc, argv )",0
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { q = osStrchr <S2SV_ModEnd> ( p +,1
516,<S2SV_ModStart> ; if ( NCH ( n ) &&,0
517,<S2SV_ModStart> KEY_FRAME ) { memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd ->,0
518,"<S2SV_ModStart> error ; uint16_t status ; uint16_t <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT ) { enc624j600WriteReg ( interface, ENC624J600_ERXRDPT, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA, ENC624J600_CMD_RRXDATA, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL, ENC624J600_ERXTAIL <S2SV_ModEnd>, ENC624J600_RX_BUFFER_STOP ) <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL, ENC624",0
519,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv, VALUE * argv, VALUE * argv, VALUE * argv ) { VALUE rb_schema ; xmlSchemaPtr schema ; xmlSchemaPtr ctx = xmlSchemaNewMemParserCtxt ( argc, argv ) ; VALUE rb_schema ; VALUE errors = rb_ary_new ( ) ; xmlSetStructuredErrorFunc ( NULL, NULL ) ; xmlSetStructuredErrorFunc ( NULL, NULL ) ; xmlSetStructuredErrorFunc ( NULL, NULL <S2SV_ModEnd> ) ; return",0
520,"<S2SV_ModStart> ( LOG_ERR, ""Cannot <S2SV_blank> open <S2SV_blank> configuration <S2SV_blank> file"" <S2SV_ModEnd> ) ; return",0
521,<S2SV_ModStart> ; out += 3 <S2SV_ModEnd> ; } state <S2SV_ModStart> ; out += 3 <S2SV_ModEnd> ; } state,1
522,<S2SV_ModStart> err = - EINVAL ; if ( po -> running ) goto out ; err = -,0
523,<S2SV_ModStart> POLL_IN ) ; <S2SV_ModEnd> handle -> event <S2SV_ModStart> pending ) ; <S2SV_ModEnd> perf_event_wakeup ( handle,0
524,"<S2SV_ModStart> * s, u16 <S2SV_ModEnd> len, wchar_t <S2SV_ModStart> ( * s <S2SV_ModEnd> ) { if <S2SV_ModStart> > 0 ) <S2SV_ModEnd> return - EINVAL <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> op ++ = <S2SV_ModStart> -= PLANE_SIZE ; <S2SV_ModEnd> op ++ = <S2SV_ModStart> wchar_t ) ( SURROGATE_PAIR | SURROGATE_BITS ) ; * op ++ = ( <S2SV_ModStart> & SURROGATE_BITS ) ) ; <S2SV_ModEnd> else { * <S2SV_ModStart> += size ; <S2SV_ModEnd> } return op",0
525,"<S2SV_ModStart> { print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" <S2SV_ModEnd> ) ; if",0
526,"<S2SV_ModStart> ( interface, KSZ8851_RXFHSR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & KSZ8851_RXFHSR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXFHBCR <S2SV_ModEnd> ) & RXFHBCR_RXBC_MASK <S2SV_ModStart> ( interface, KSZ8851_RXFDPR <S2SV_ModEnd>, RXFDPR_RXFPAI ) <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; kz8851ReadFifo <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ;ancillary",0
527,"<S2SV_ModStart> const node * n, <S2SV_ModEnd> asdl_seq * decorator_seq <S2SV_ModStart> is_async ) { const node * n = n -> n_col_offset ;",0
528,<S2SV_ModStart> int i ; if ( unlikely (! mm_try_get ( mm ) ) ) goto out ;,0
529,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ptr_check_result ) {,0
530,<S2SV_ModStart> ; if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { break ; } if (,0
531,<S2SV_ModStart> ; row < raw_width <S2SV_ModEnd> ; row ++ <S2SV_ModStart> 4 ) ; <S2SV_ModEnd> } } <S2SV_null>,0
532,<S2SV_ModStart> len < needed ||! nl,0
533,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; quantum_info = ( QuantumInfo * ) NULL ;",0
534,<S2SV_ModStart> ( bfqq ) bfq_idle_slice_timer_body <S2SV_ModEnd> ( bfqq ),0
535,<S2SV_ModStart> ; length += PRIMARY_DRAWING_ORDER_FIELD_BYTES <S2SV_ModEnd> [ orderInfo ->,0
536,<S2SV_ModStart> ; if ( <S2SV_ModEnd>! OVL_TYPE_UPPER ( <S2SV_ModStart>!= OVL_TYPE_UPPER ( new_upperdir <S2SV_ModEnd> ) ) err,0
537,"<S2SV_ModStart> int plane ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
538,"<S2SV_ModStart> * cpi, <S2SV_ModEnd> int mi_row, <S2SV_ModStart> ( cpi, x <S2SV_ModEnd>, mi_row, <S2SV_ModStart> ( cpi, x <S2SV_ModEnd>, mi_row,",0
539,<S2SV_ModStart> = NULL ; reader. gcol = NULL ;,0
540,<S2SV_ModStart> -> ranges = safe_calloc <S2SV_ModEnd> ( sizeof (,0
541,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flags & VP8_EFLAG_NO_UPD_GF <S2SV_ModStart> flags & VP8_EFLAG_FORCE_GF <S2SV_ModEnd> ) { ctx,0
542,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;",0
543,<S2SV_ModStart>! head ) <S2SV_ModEnd> return - EINVAL <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
544,"<S2SV_ModStart> * pptr, u_int <S2SV_ModEnd> len ) { <S2SV_ModStart> * pptr, u_int <S2SV_ModEnd> len ) {",0
545,"<S2SV_ModStart> ( res, ""%s"", Run. system -> name <S2SV_ModEnd> ) ; if",0
546,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
547,"<S2SV_ModStart>, sizeof ( constr1 <S2SV_ModEnd> ) ) ;",0
548,<S2SV_ModStart> bLength ) ; if (! buffer0 ) return - EINVAL ;,0
549,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0 ) ;",0
550,<S2SV_ModStart> ; distortion = vpx_variance16x16 <S2SV_ModEnd> ( * (,1
551,"<S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd>, ECON2_ETHEN | <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface",0
552,<S2SV_ModStart> ; maxlen = psf_strlen <S2SV_ModEnd> ( ( char <S2SV_ModStart> ; start = psf_strlen <S2SV_ModEnd> ( ( char <S2SV_ModStart> ; maxlen = psf_strlen <S2SV_ModEnd> ( ( char,0
553,<S2SV_ModStart> { if ( ctx -> priv &&,0
554,<S2SV_ModStart> speed ) { const VP9EncoderConfig * cfg = & sf -> cfg ; <S2SV_ModStart> { sf -> use_square_partition_only <S2SV_ModEnd> =! frame_is_intra_only <S2SV_ModStart> ; sf -> <S2SV_ModEnd> less_rectangular_check = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> tx_size_search_method = vp9_frame_is_boosted <S2SV_ModStart> ; sf -> <S2SV_ModEnd> adaptive_rd_thresh = 2 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> adaptive_rd_thresh = 2 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> adaptive_pred_interp_filter = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> adaptive_pred_interp_filter = 1 <S2SV_ModStart> 2 ) { <S2SV_ModEnd> sf -> adaptive_pred_interp_filter <S2SV_ModStart> ; sf -> <S2SV_ModEnd> adaptive_pred_interp_filter = 1 <S2SV_ModStart> 2 ) { <S2SV_ModEnd> sf -> adaptive_pred_interp_filter <S2SV_ModStart> ; sf -> <S2SV_ModEnd> adaptive_pred_interp_filter = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> adaptive_pred_interp_filter = 1 <S2SV_ModStart> 2 ) { <S2SV_ModEnd> sf -> adaptive_pred_interp_filter <S2SV_ModStart> ; sf -> <S2SV_ModEnd> adaptive_pred_,0
555,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
556,<S2SV_ModStart> L ) ; unsigned,0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,"<S2SV_ModStart> const char * <S2SV_ModEnd> s = STR <S2SV_ModStart>, 0 ) <S2SV_ModEnd> ; int quote <S2SV_ModStart> errstr ) { const char * <S2SV_ModStart> char * s <S2SV_ModEnd> ; char buf",0
559,"<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> break ; } <S2SV_ModEnd> if ( strcmp <S2SV_ModStart> break ; } <S2SV_ModEnd> if ( strcmp <S2SV_ModStart> break ; } <S2SV_ModEnd> if ( strcmp <S2SV_ModStart> break ; } <S2SV_ModEnd> if (! <S2SV_ModStart> break ; } <S2SV_ModEnd> SvcInternal * const <S2SV_ModStart> -> quantizer_keyframe, <S2SV_ModEnd> svc_ctx -> quantizer_keyframe",0
560,<S2SV_ModStart> ) ; } fclose ( mvs ) ;,0
561,<S2SV_ModStart> self ) { <S2SV_ModEnd> PyObject * new_memo,0
562,,1
563,"<S2SV_ModStart> ( dbh, mysql_error <S2SV_ModEnd> ( imp_dbh ->",0
564,<S2SV_ModStart> ) || ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> & size ) ) <S2SV_ModStart> ( & slot_lock ),0
565,"<S2SV_ModStart> struct ieee_802_11_phdr phdr ; memset ( ppi_flags_tree, 0, sizeof ( ppi_flags_tree ) )",0
566,<S2SV_ModStart> ; sh = safe_calloc <S2SV_ModEnd> ( hdrlen +,0
567,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void nsc_encode_argb_to_aycocg (,0
568,<S2SV_ModStart> > nr_parens ) { kfree ( op_stack ) ; <S2SV_ModStart> EINVAL ) ; },0
569,<S2SV_ModStart> ) { const RATE_CONTROL <S2SV_ModEnd> * rc = <S2SV_ModStart> { target = <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> rc -> oxcf. starting_buffer_level / 2 <S2SV_ModEnd> > INT_MAX ) <S2SV_ModStart> > INT_MAX )? INT_MAX : <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> rc -> oxcf. starting_buffer_level / 2 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ; if ( <S2SV_ModEnd> rc -> frames_since_key <S2SV_ModStart> rc -> frames_since_key <= <S2SV_ModEnd> rc -> output_framerate <S2SV_ModStart> rc -> output_framerate <S2SV_ModEnd> ) { target,0
570,"<S2SV_ModStart> TX_MODE read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r )",1
571,"<S2SV_ModStart> : # line 101 ""re_grammar.y"" { yr_free ( ( ( * yyvaluep ). class_vector ) ) ; } # line 1045 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 97 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1051 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 97 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1054 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 97 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1054 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 99 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1064 <S2SV_ModEnd> ""re_",0
572,"<S2SV_ModStart> -> cpi ; <S2SV_ModEnd> TOKENEXTRA * * <S2SV_ModStart> ] ; struct <S2SV_ModEnd> int16_t * qcoeff <S2SV_ModStart> qcoeff = BLOCK_OFFSET ( p -> qcoeff, block ) ; vpx_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ ENTROPY_TOKENS ] = cpi -> common. fc. coef_probs [ tx_size ] [ ref ] ; vpx_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> common. counts. eob_branch [ tx_size ] [ ref ] ; vpx_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> common. counts. eob_branch [ tx_size ] [ ref ] ; vpx_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> common. counts.",0
573,<S2SV_ModStart> pSelect -> pSrc ; assert ( pWalker -> pParse -> db -> mallocFailed ),0
574,<S2SV_ModStart> ; serv = svc_create <S2SV_ModEnd> ( & nfs4_callback_program,0
575,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PointZZ_p * pointZZ_pMul ( PointZZ_p * rop, const PointZZ_p * point, const mpz_t scalar ) { PointZZ_p R0, R1, tmp ; mpz_init_set ( R0. x, R1. y ) ; mpz_init_set ( R0. x ) ; mpz_set ( tmp. y, R1. y ) ; mpz_set ( tmp. y, R1. y ) ; mpz_set ( tmp. y, R1. y ) ; mpz_set ( tmp. y, R1. y ) ; mpz_set ( tmp. x, R1. y ) ; mpz_set ( tmp. y, R1. y ) ; mpz_set ( tmp. y, R1. y ) ; mpz_set ( tmp. y, R1. y ) ; mpz_set ( tmp. y, R1. y ) ; mpz_set ( tmp. y, R1. y )",0
576,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
577,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
578,"<S2SV_ModStart> { do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
579,<S2SV_ModStart> ( xIter = crm_element_name <S2SV_ModEnd> ( xml ) <S2SV_ModStart> ( xml ) ; if ( xIter ) { continue <S2SV_ModStart> ; } } },0
580,<S2SV_ModStart> <S2SV_null> static const SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> return ( const SvcInternal_t <S2SV_ModEnd> * ) svc_ctx,1
581,<S2SV_ModStart> ; } } zval_dtor ( * current_param ) ;,0
582,<S2SV_ModStart> only_420 ) { <S2SV_ModEnd> int ret ; <S2SV_ModStart> -> vpx_fmt = VPX_IMG_FMT_I420 <S2SV_ModEnd> ; _y4m ->,0
583,"<S2SV_ModStart> * otmp = safe_readobj <S2SV_ModEnd> ( buf,",0
584,"<S2SV_ModStart> ( ) { int <S2SV_ModEnd> directory_table_end, table_start <S2SV_ModStart> ( fd, <S2SV_ModEnd> sBlk. s <S2SV_ModStart> s, no_xattrs <S2SV_ModEnd>, & table_start <S2SV_ModStart> ; if ( read_uids_guids ( & table_start ) == FALSE ) return FALSE ; if ( <S2SV_ModStart> read_uids_guids ( & table_start ) == FALSE ) return FALSE ; if ( read_uids_guids ( & table_start ) == FALSE ) return FALSE ; if ( parse_exports_table ( & table_start ) == FALSE ) return FALSE ; if ( parse_exports_table ( & directory_table_start ) == FALSE ) return FALSE ; if ( read_fragment_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( no_xattrs ) sBlk. s. xattr_",0
585,"<S2SV_ModStart> rule * rule, const struct envnode * * e ) { <S2SV_ModEnd> if ( rule <S2SV_ModStart> ; } } <S2SV_ModEnd> return env ;",0
586,<S2SV_ModStart> -> seg ; <S2SV_ModEnd> if ( cm <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
587,"<S2SV_ModStart>, Module_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Module_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Module_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Module_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, stmt_attributes, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, ClassDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, ClassDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, ClassDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, ClassDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, stmt_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, stmt_type, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, stmt_type, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, stmt_type, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, stmt_type, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, stmt_type, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, stmt_type, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, stmt_type, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, stmt_type, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, stmt_",0
588,"<S2SV_ModStart> S_IRUSR | S_IWUSR <S2SV_ModEnd> ) ; if <S2SV_ModStart> return ; } if ( <S2SV_ModStart>, 16 )!= 0 ) { logfile_fd = - 1 ; } <S2SV_ModEnd> } else {",0
589,<S2SV_ModStart> ; } # else ( void ) cpi ; #,1
590,"<S2SV_ModStart> cinput ) { <S2SV_ModEnd> char * s <S2SV_ModStart> num, num1 <S2SV_ModEnd> ; char * <S2SV_ModStart> t ++ ; char * s, * t, * t, * <S2SV_ModStart> t ++ ; t = s ; while ( * t!= '[' ) t ++ ; t ++ ; t ++ ; <S2SV_ModStart> t ++ ; t ++ ; <S2SV_ModStart> ( outpos, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"" <S2SV_ModEnd>, s, <S2SV_ModStart> TERMCHAR ) ; <S2SV_ModEnd> if ( strcmp <S2SV_ModStart> ']' ) { if ( strcmp ( nameobject, ""AxodrawWantsPDF"" ) == 0 ) { identification = 1 ; <S2SV_ModStart> ; fprintf ( outfile <S2SV_ModEnd>, ""%s"", <S2SV_ModStart> nameobject ) ; <S2SV_ModEnd> return ( 0 <S2SV_ModStart> ; if ( <S2SV_ModEnd> ( argbuf =",0
591,"<S2SV_ModStart> expr_ty step ; Py_CLEAR ( tmp ) ; <S2SV_ModStart> int res ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; <S2SV_ModStart> int res ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } if ( tmp == NULL ) goto failed ; Py_CLEAR ( tmp ) ; if ( tmp == NULL ) goto failed ; Py_CLEAR ( tmp ) ; if ( tmp == NULL ) goto failed ; Py_CLEAR ( tmp ) ; if ( tmp == NULL ) goto failed ; Py_CLEAR ( tmp ) ; if ( tmp == NULL ) goto failed ; Py_CLEAR ( tmp ) ; if ( tmp == NULL ) goto failed ; Py_CLEAR ( tmp ) ; if ( tmp == NULL ) goto failed ; Py_CLEAR ( tmp ) ; if ( tmp == NULL ) goto failed ; Py_CLEAR ( tmp ) ; if ( tmp == NULL ) goto failed ; Py_CLEAR ( tmp ) ; if ( tmp == NULL ) goto failed ; Py_CLE",0
592,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",0
593,"<S2SV_ModStart> int err ; struct nfp_abm_link * link ; <S2SV_ModStart> ) goto err_delete ; link = alink -> dscp_map <S2SV_ModStart> ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; } match = kzalloc ( sizeof ( * match ), GFP_KERNEL ) ; if ( match ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; } match = kzalloc ( sizeof ( * match ), GFP_KERNEL ) ; if ( match ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; } match = kzalloc ( sizeof ( * match ), GFP_KERNEL ) ; if ( match ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; } match -> band = mask ; match -> val = val ; err",0
594,"<S2SV_ModStart> ) ; } switch ( pass ) { case VPX_RC_LAST_PASS : case VPX_RC_LAST_PASS : case VPX_RC_LAST_PASS : case VPX_RC_FIRST_PASS : case VPX_RC_LAST_PASS : case VPX_RC_LAST_PASS : case VPX_RC_FIRST_PASS : case VPX_RC_FIRST_PASS : case VPX_RC_FIRST_PASS : case VPX_RC_FIRST_PASS : case VPX_RC_LAST_PASS : case VPX_RC_FIRST_PASS : case VPX_RC_FIRST_PASS : case VPX_RC_FIRST_PASS : case VPX_RC_RC_FIRST_PASS : <S2SV_ModEnd> stream -> config <S2SV_ModStart> stats ) ; break ; default : fatal ( ""Failed <S2SV_blank> to <S2SV_blank> decode <S2SV_blank> pass"" ) ; } break ; }",0
595,"<S2SV_ModStart> goto out ; if ( g_str_has_prefix ( name, ""prefix"" ) && g_str_has_prefix ( name, ""prefix"" ) && g_str_has_prefix ( name, ""prefix"" ) && g_str_has_prefix ( name, ""prefix"" ) && g_str_has_prefix ( name, ""prefix"" ) && g_str_has_prefix ( name, ""prefix"" ) && g_str_has_prefix ( name, ""prefix"" ) && g_str_has_prefix ( name, ""prefix"" ) && g_str_has_prefix ( name, ""prefix"" ) && g_str_has_prefix ( name, ""prefix"" ) && g_str_has_prefix ( name, ""prefix"" ) && g_str_has_prefix ( name, ""prefix"" ) && g_str_has_prefix ( name, ""prefix"" ) && g_str_has_prefix ( name, ""prefix"" ) && g_str_has_prefix ( name, ""prefix"" ) && g_str_has_prefix ( name, ""prefix"" ) && g_str_has_prefix",0
596,"<S2SV_ModStart> data_end ) { vpx_reader <S2SV_ModEnd> * const cm <S2SV_ModStart>, tile_col ; vpx_reader <S2SV_ModEnd> r ; assert <S2SV_ModStart> ) ) ; vpx_reader <S2SV_ModEnd> r ; assert <S2SV_ModStart> ) ) ; vpx_reader <S2SV_ModEnd> ( cm -> <S2SV_ModStart> sizeof ( * cm -> above_context <S2SV_ModEnd> ) * MAX_MB_PLANE <S2SV_ModStart> sizeof ( * cm -> above_seg_context <S2SV_ModEnd> ) * aligned_cols",0
597,"<S2SV_ModStart> vp9_decoder_create ( const VP9D_CONFIG <S2SV_ModEnd> * oxcf ) <S2SV_ModStart>  oxcf ) { const VP9_COMMON * const cm = & cm -> common ; <S2SV_ModStart> = vpx_memalign ( cm <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> ; VP9_COMMON * <S2SV_ModEnd> cm = pbi <S2SV_ModStart> = 1 ; <S2SV_ModEnd> current_video_frame = 0 <S2SV_ModStart> ; pbi -> oxcf = * oxcf ; <S2SV_ModEnd> decoded_key_frame = 0 <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vp9_loop_filter_init ( cm",0
598,"<S2SV_ModStart>, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; GF_FREE ( ( ( GF_DataInformationBox * ) s ) -> dref",0
599,<S2SV_ModStart> req ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
600,"<S2SV_ModStart> tree2tok ( struct vpx_token <S2SV_ModEnd> * tokens, <S2SV_ModStart> toks, const vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> do { const vpx_tree_index <S2SV_ModEnd> j = tree",0
601,<S2SV_ModStart> = VPX_CODEC_OK ; ( void ) pts ; ( void ) duration ;,0
602,"<S2SV_ModStart>, & len, 0",1
603,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
604,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int frame_max_bits (,0
605,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
606,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_superblock ( VP9_COMMON <S2SV_ModStart> * cpi, ThreadData * td, ThreadData * td, <S2SV_ModStart> BLOCK_SIZE bsize ) { <S2SV_ModEnd> VP9_COMMON * const <S2SV_ModStart> -> common ; const <S2SV_ModStart> -> mbmi ; const <S2SV_ModStart> bmi ; PICK_MODE_CONTEXT * ctx = get_block_context ( x, bsize ) ; <S2SV_ModStart> ; x -> <S2SV_ModEnd> skip_recode =! <S2SV_ModStart>. allow_skip_recode ; x -> skip_recode =! x -> select_txfm_size &&! x -> select_txfm_size && mbmi -> sb_type >= BLOCK_8X8 && cpi -> oxcf. aq_mode!= CYCLIC_REFRESH_AQ && cpi -> oxcf. aq_mode!= CYCLIC_REFRESH_AQ && cpi -> oxcf. aq_mode!= CYCLIC_REFRESH_AQ && cpi -> oxcf. aq_mode!= CYCLIC_REFRESH_AQ && c",0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
608,<S2SV_ModStart> range_max ) { uint32_t <S2SV_ModEnd> value ; int <S2SV_ModStart> gbc ) ; uint32_t <S2SV_ModEnd> i = 0 <S2SV_ModStart> { if ( get_bits_left <S2SV_ModEnd> ( gbc ) <S2SV_ModStart> gbc ) ) <S2SV_ModEnd> bits [ i <S2SV_ModStart> = '1' ; <S2SV_ModEnd> } else { <S2SV_ModStart> } if ( get_bits_left <S2SV_ModEnd> ( gbc ) <S2SV_ModStart> } if ( get_bits_left <S2SV_ModEnd> ( gbc ) <S2SV_ModStart> gbc ) ) <S2SV_ModEnd> value = MAX_UINT_BITS <S2SV_ModStart> 1 )? '1' : '0' ; value += ( 1 << <S2SV_ModEnd> zeroes ) - <S2SV_ModStart> 1 << zeroes <S2SV_ModEnd> ) - 1,0
609,"<S2SV_ModStart> else if ( strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> else if ( strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"",",0
610,"<S2SV_ModStart>, packet -> http_content_len <S2SV_ModEnd>. ptr =",0
611,"<S2SV_ModStart>, y, MagickFalse <S2SV_ModEnd> ( 4, <S2SV_ModStart> x ), MagickFalse <S2SV_ModEnd> ( 4, <S2SV_ModStart> image, dds_info <S2SV_ModEnd> ) ; return",0
612,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL )",0
613,,0
614,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; sendClean ( outputbuffer ) ;",0
615,"<S2SV_ModStart> return FALSE ; WLog_VRB <S2SV_ModEnd> ( AUTODETECT_TAG,",0
616,<S2SV_ModStart> ; # else ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; #,0
617,<S2SV_ModStart> -> b_multithreaded_rd ) { <S2SV_ModStart> mb_rows ) ; },0
618,<S2SV_ModStart> { if ( ( <S2SV_ModStart> xWantedSize > 0 ) && ( xWantedSize > xHeapStructSize ) <S2SV_ModStart> 0x00 ) { xWantedSize = ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize = ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize = ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) ; } else { xWantedSize = ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize = ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) ; } else { xWantedSize = ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } if ( ( xWanted,0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,"<S2SV_ModStart> s ) { struct stream packet = * s ; struct stream packet = * s ; <S2SV_ModStart>, __func__ ) ; in_uint16_le ( s, num_updates ) ; in_uint16_le ( s, left ) ; in_uint16_le ( s, bottom ) ; in_uint16_le ( s, height ) ; in_uint16_le ( s, height ) ; in_uint16_le ( s, bpp ) ; in_uint16_le ( s, bpp ) ; in_uint16_le ( s, bufsize ) ; in_uint16_le ( s, bufsize ) ; in_uint16_le ( s, bufsize ) ; in_uint16_le ( s, bufsize ) ; in_uint16_le ( s, bufsize ) ; in_uint16_le ( s, bufsize ) ; in_uint16_le ( s, bufsize ) ; in_uint8_le ( s, bufsize ) ; in_uint8_le ( s, bufsize ) ; in_uint8_le ( s, bufsize ) ; in_uint8_le ( s, buf",0
621,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
622,"<S2SV_ModStart> tx_size, vpx_coeff_stats <S2SV_ModEnd> coef_branch_ct ) { <S2SV_ModStart> tx_size ] ; vpx_coeff_probs_model <S2SV_ModEnd> * coef_counts =",0
623,"<S2SV_ModStart> { } ; if (! name ) return log_warning_errno ( ENOENT, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> UTF-8 <S2SV_blank> kbdmode <S2SV_blank> %sd <S2SV_blank> on <S2SV_blank> %s"", enable_disable ( utf8 ), name ) ;",0
624,<S2SV_ModStart> struct dvb_usb_adapter * adap ) { struct dvb_usb_adapter * adap = adap -> priv ; struct dvb_usb_device * d = adap -> priv ; struct dvb_usb_device * d = adap -> priv ; struct dvb_usb_device * d = adap -> priv ; struct dvb_usb_device * d = adap -> priv ; struct dvb_usb_device * d = adap -> priv ; struct dvb_usb_device * d = adap -> priv ; struct dvb_usb_device * d = adap -> priv ; struct dvb_usb_device * d = adap -> priv ; struct dvb_usb_device * d = adap -> priv ; struct dvb_usb_device * d = adap -> priv ; struct dvb_usb_device * d = adap -> priv ; struct dvb_usb_device * d = adap -> priv ; struct dvb_usb_device * d = adap -> priv ; struct dvb_usb_device * d = adap,0
625,"<S2SV_ModStart> * iface, vpx_codec_enc_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> else if ( cfg && <S2SV_ModStart> caps & VPX_CODEC_USE_XMA <S2SV_ModEnd> ) res =",0
626,"<S2SV_ModStart> int stride, <S2SV_ModEnd> int mv_row, <S2SV_ModStart> const kernel = vpx_get_interp_kernel <S2SV_ModEnd> ( xd -> <S2SV_ModStart> const kernel = vpx_get_interp_kernel <S2SV_ModEnd> ( xd -> <S2SV_ModStart> const kernel = vpx_get_interp_kernel <S2SV_ModEnd> ( xd -> <S2SV_ModStart> const kernel = vpx_get_interp_kernel <S2SV_ModEnd> ( xd ->",0
627,"<S2SV_ModStart> ; mungspaces ( strncpy <S2SV_ModEnd> ( buf,",0
628,<S2SV_ModStart> * cJSON_CreateFloatArray ( const <S2SV_ModStart> < count ; i ++ <S2SV_ModEnd> ) { n,0
629,"<S2SV_ModStart> data_end ) { const VP9Worker * const worker = & pbi -> tile_workers ; <S2SV_ModStart> & pbi -> tile_workers <S2SV_ModEnd> ; const int <S2SV_ModStart> int num_workers = MIN ( tile_cols * sizeof ( * pbi -> tile_workers ) <S2SV_ModEnd>, tile_cols ) <S2SV_ModStart> ; TileBuffer tile_buffers <S2SV_ModEnd> ; int n <S2SV_ModStart> 0 ) { const int num_workers = MIN ( tile_cols * sizeof ( * pbi -> tile_workers ) <S2SV_ModEnd>, tile_cols * <S2SV_ModStart>, vpx_malloc ( num_workers * sizeof ( TileWorkerData ) ) ) ) ; CHECK_MEM_ERROR ( cm, pbi -> tile_workers, vpx_malloc ( num_workers * sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR ( cm, pbi -> tile_workers, vpx_malloc ( sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR ( cm, pbi -> tile_workers, vpx_malloc ( sizeof ( TileInfo ) ) ) ; CHECK_MEM_ERROR ( cm, pbi -> tile_workers, vpx",0
630,"<S2SV_ModStart> * 0x101 ; # ifdef LIBRAW_LIBRARY_BUILD <S2SV_ModStart> + 8 ; # else offset = base + get4 ( ) + 8 ; # endif <S2SV_ModStart> ( ) ; # ifdef LIBRAW_LIBRARY_BUILD if ( model == LIBRAW_WBI_Tungsten ) { fseek ( ifp, 8, SEEK_CUR ) ; high = get2 ( ) ; wide = get2 ( ) ; # else fseek ( ifp, 8, SEEK_CUR ) ; # endif break ; # ifdef LIBRAW_LIBRARY_BUILD if (! strncasecmp ( model, ""DSLR-A100"", 9 ) ) { fseek ( ifp, 8, SEEK_CUR ) ; # endif fseek ( ifp, 8, SEEK_CUR ) ; # ifdef LIBRAW_LIBRARY_BUILD if (! strncasecmp ( model, ""DSLR-A100"", 9 ) ) { fseek ( ifp, 8, SEEK_CUR ) ; # endif fseek ( ifp, 8, SEEK_CUR ) ; # ifdef LIB",0
631,"<S2SV_ModStart> -> common ; <S2SV_ModEnd> const double base_q <S2SV_ModStart> = SEGMENT_DELTADATA ; vpx_clear_system_state ( ) ; for ( i = ENERGY_MIN ; i <= ENERGY_MAX ; i ++ ) { int qindex_delta, segment_rdmult ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; } qindex_delta = vp9_compute_qdelta ( & cpi -> rc, base_q, base_q * Q_RATIO ( i ) ) ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; } qindex_delta = vp9_compute_qdelta ( & cpi -> rc, base_q, base_q * Q_RATIO ( i ) ) ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; } qindex_delta = vp9_compute_qd",0
632,<S2SV_ModStart>. err_detail = get_detail ( ctx ) <S2SV_ModEnd> ; return error,0
633,<S2SV_ModStart> pocstruct_t * ps_prev_poc = NULL <S2SV_ModStart> ; ps_dec -> <S2SV_ModEnd> u2_pic_wd = 0,0
634,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet ),0
635,<S2SV_ModStart> int getnum ( <S2SV_ModEnd> char * *,0
636,<S2SV_ModStart> GCSpropagate ) ; <S2SV_ModEnd> atomic ( L,0
637,<S2SV_ModStart> 0 ; else * cold = 0 ;,0
638,"<S2SV_ModStart> 'S' } ; if ( phase == PROTOCOL_EARLY ) return NULL ; <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } <S2SV_ModEnd> memset ( buffer <S2SV_ModStart> buffer ) ; <S2SV_ModEnd> s_write ( c",0
639,"<S2SV_ModStart> struct sockaddr_in addr <S2SV_ModEnd> ; int ret_ga <S2SV_ModStart> struct mainloop_fd_callbacks cib_fd_callbacks <S2SV_ModEnd> ; static struct <S2SV_ModStart> mainloop_fd_callbacks cib_fd_callbacks = { <S2SV_ModEnd>. dispatch = <S2SV_ModStart> destroy = cib_remote_connection_destroy, } <S2SV_ModEnd> ; connection ->",0
640,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi,",0
641,"<S2SV_ModStart> ( ndo, ""%s"", icp -> icmp6_name <S2SV_ModEnd> ) ) ;",0
642,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> return rc ;",0
643,"<S2SV_ModStart> Image * image <S2SV_ModEnd> ; unsigned int <S2SV_ModStart>, length, <S2SV_ModEnd> version, width <S2SV_ModStart>, length, <S2SV_ModEnd> version, width <S2SV_ModStart>, length, <S2SV_ModEnd> height ) ; <S2SV_ModStart>, length, <S2SV_ModEnd> height ) ;",0
644,"<S2SV_ModStart> ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC <S2SV_blank> marker\\n"" ) ;",0
645,<S2SV_ModStart> ; if ( strlen ( str_temp ) > strlen ( str_temp ) ) return ; if (,0
646,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> - m + vpx_read_bit <S2SV_ModEnd> ( r )",1
647,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
648,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> ( REFERENCE_MODE ) vpx_read <S2SV_ModEnd> ( r,",0
649,"<S2SV_ModStart>! stream ) { <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; return NULL ; }",0
650,<S2SV_ModStart> nd_opt_len ) ; ND_TCHECK ( op -> nd_opt_len ) ;,0
651,<S2SV_ModStart> re_ast ) -> parent = NULL ; ( * re_ast ) ->,0
652,"<S2SV_ModStart> ; ret = map_expand <S2SV_ModEnd> ( path, <S2SV_ModStart> if ( ret < 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> map <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key -> key, error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value ) ; if ( ret > 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> = <S2SV_blank> %s"", str_c ( path ), key -> value ) ; return - 1 ; } else if ( ret < 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found, <S2SV_blank> using <S2SV_blank> default <S2SV_blank> value <S2SV_blank> %s"", str_c ( path ), key -> value ) ; return - 1 ; } else if ( ret < 0 ) { auth_request_log_error ( iter ->",0
653,<S2SV_ModStart> ; tok -> type_comment = 0 ; tok ->,0
654,<S2SV_ModStart> maxBitrate ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
655,<S2SV_ModStart> ( dpbSize ) ; if ( maxFrameFrames > MAX_NUM_REF_PICS ) return ( MEMORY_ALLOCATION_ERROR ),0
656,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart> OE_EINVAL ) ; if (! sock ) OE_RAISE_ERRNO ( OE_EINVAL ) ; <S2SV_ModStart> ( addrlen ) { <S2SV_ModStart> = * addrlen ; } <S2SV_ModEnd> if ( oe_syscall_getpeername_ocall,0
657,,1
658,"<S2SV_ModStart> FALSE ; } if (! <S2SV_ModStart>, s ) ) return FALSE",1
659,<S2SV_ModStart> ipv6_pinfo * np <S2SV_ModEnd> ; struct ipv6_txoptions <S2SV_ModStart> ( sk ) ; np = inet6_sk ( sk ) <S2SV_ModStart> ; if (! np ) goto out ; if (,0
660,"<S2SV_ModStart> int i, <S2SV_ModEnd> upx_success = 0 <S2SV_ModStart> ; uint32_t valign = 0, hdr_size = 0 <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> break ; } <S2SV_ModEnd> break ; case",0
661,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPOS <S2SV_ModEnd> | EPCR_ERPRR ) <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> } dm9000WriteReg ( DM9000_EPCR, DM9000_EPOS <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPDRH <S2SV_ModEnd> ) << 8",0
662,<S2SV_ModStart> pcmk_ok ) { if (! private -> command ) { <S2SV_ModStart> ) ) ; } <S2SV_ModStart> pcmk_ok ) { if (! private -> command ) { <S2SV_ModStart> ) ) ; },0
663,<S2SV_ModStart> ; msg. msg_name = <S2SV_ModEnd> & address ;,0
664,"<S2SV_ModStart> } ; int <S2SV_ModEnd> tmp_err, n <S2SV_ModStart> ] ; int <S2SV_ModEnd> new_mv_mode_penalty = 256 <S2SV_ModStart> bsize ) ; if ( xd -> mi [ 0 ] -> mbmi. sb_type == 2 ) { x -> mi [ 0 ] -> mbmi. sb_type = xd -> mi [ 0 ] -> mbmi. sb_type ; x -> mi [ 1 ] -> mbmi. sb_type = xd -> mi [ 0 ] -> mbmi. sb_type ; x -> mi [ 2 ] -> mbmi. sb_type = xd -> mi [ 2 ] -> mbmi. sb_type ; x -> mi [ 2 ] -> mbmi. sb_type = xd -> mi [ 2 ] -> mbmi. sb_type ; x -> mi [ 2 ] -> mbmi. sb_type = xd -> mi [ 2 ] -> mbmi. sb_type ; x -> mi [ 2 ] -> mbmi. sb_type = xd -> mi [ 2 ] -> mbmi. sb_type ; x -> mi",0
665,<S2SV_ModStart> ; if ( h -> addr == NULL ) goto error ; if (,0
666,"<S2SV_ModStart>, 0, mp,",0
667,"<S2SV_ModStart>, one, number_planes_filled, <S2SV_ModStart> number_planes_filled, one, number_planes_filled <S2SV_ModStart> number_planes_filled, one, number_planes_filled",0
668,"<S2SV_ModStart> ( r = sshbuf_put_string <S2SV_ModEnd> ( b, <S2SV_ModStart> ( r = sshbuf_put_string <S2SV_ModEnd> ( b, <S2SV_ModStart> ( r = sshbuf_put_string <S2SV_ModEnd> ( b,",0
669,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
670,"<S2SV_ModStart> client = user_data ; memset ( client, 0, sizeof ( client ) )",0
671,<S2SV_ModStart> * uv ; thread -> twups = thread ; <S2SV_ModStart> next ) { <S2SV_ModEnd> if (!,0
