,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; ret = <S2SV_ModEnd> - ETIMEDOUT ; <S2SV_ModStart> - ETIMEDOUT ; goto out ;,0
1,<S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;,0
2,<S2SV_ModStart> * writer = <S2SV_ModEnd> gf_list_get ( writers,0
3,<S2SV_ModStart> -> child ; if ( item > 0 ) { -- item ; c = c -> next ; },0
4,"<S2SV_ModStart>, u64 nr <S2SV_ModEnd>, struct pt_regs <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",0
5,<S2SV_ModStart> { # ifndef _MSC_VER <S2SV_ModEnd> char buf [ <S2SV_ModStart> { # ifndef _MSC_VER <S2SV_ModEnd> char * buf,0
6,,0
7,<S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { #,0
8,,0
9,,0
10,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ++ i ) vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( usehp ) vpx_write <S2SV_ModEnd> ( w,",1
11,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; },0
12,"<S2SV_ModStart>, ""%04x, <S2SV_blank> "", ( int ) <S2SV_ModStart>, ""%04x <S2SV_blank> "", ( int ) <S2SV_ModStart>, ""%04x <S2SV_blank> "", ( int ) <S2SV_ModStart>, ""Direction-#%u"", ( int ) <S2SV_ModStart> ( length > ( int )",0
13,,0
14,<S2SV_ModStart> = NULL ; if ( spcred == NULL ) return GSS_S_FAILURE ;,0
15,<S2SV_ModStart> int len ; if ( t < 0 ) { return NULL ; },0
16,<S2SV_ModStart> length ) ; if ( length > AUTH_PASS_LEN ) { <S2SV_ModStart> ) ) ; },0
17,<S2SV_ModStart> e == p || e == p,0
18,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",1
19,<S2SV_ModStart> = 0 ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> & timeout ) ),1
20,,0
21,<S2SV_ModStart> + size <= PAGE_SIZE <S2SV_ModEnd> ) ret =,0
22,<S2SV_ModStart> alg ) { <S2SV_ModEnd> if (! <S2SV_ModStart> CRYPTO_ALG_NEED_FALLBACK ) ) return ERR_PTR ( - EINVAL ) ; <S2SV_ModEnd> alg = crypto_alg_lookup,0
23,<S2SV_ModStart> = GIT_PKT_NG ; if ( len < 0 ) goto out_err ; <S2SV_ModStart> line += 3 <S2SV_ModEnd> ; GITERERR_CHECK_ALLOC_ADD ( <S2SV_ModStart> + 1 ; <S2SV_ModEnd> GITERR_CHECK_ALLOC_ADD ( &,0
24,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
25,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) return AVERROR_EOF ; if (,0
26,"<S2SV_ModStart> mntent, path, 0",0
27,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } io -> io_cleanup = mem_cleanup ;,1
28,<S2SV_ModStart> ( ( size_t * <S2SV_ModStart> pixel & ( size_t *,0
29,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return ret?,0
30,<S2SV_ModStart> vpx_codec_err_t res ; vpx_codec_enc_cfg_map_t <S2SV_ModEnd> * map ;,0
31,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
32,"<S2SV_ModStart>, uint64_t dx_time, int frame_out_offset <S2SV_ModStart> dx_time ) { if ( frame_out_offset < frame_out_offset ) { return ; }",0
33,<S2SV_ModStart> ; if ( D_imp_dbh_from_sth == NULL ) { if ( <S2SV_ModStart> NULL ) ; },0
34,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60WriteBuffer <S2SV_ModStart> ( interface, ENC28",0
35,<S2SV_ModStart> ; value = ast2obj_expr <S2SV_ModEnd> ( o -> <S2SV_ModStart> ; value = ast2obj_expr <S2SV_ModEnd> ( o -> <S2SV_ModStart> ; value = ast2obj_expr <S2SV_ModEnd> ( o ->,0
36,"<S2SV_ModStart> page && ( ( <S2SV_ModStart>, R_OK ) ) <S2SV_ModStart> page && ( ( <S2SV_ModStart> ) > 0 )",0
37,"<S2SV_ModStart> low_var_thresh, int mb_cols <S2SV_ModEnd> ) { double <S2SV_ModStart> ; int mb_cols <S2SV_ModEnd> ; unsigned char <S2SV_ModStart> pp_limits_buffer ; ; <S2SV_ModEnd> ( void ) <S2SV_ModStart> ) flag ; vpx_memset <S2SV_ModEnd> ( limits, <S2SV_ModStart> 16 * mb_cols <S2SV_ModEnd> ) ; for",0
38,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> int error ; mb2_cache_entry * ce ; <S2SV_ModStart> int error ; <S2SV_ModEnd> error = mb_cache_entry_insert <S2SV_ModStart> error ) { mb2_cache_entry_free <S2SV_ModEnd> ( ce ) <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; mb2_cache_entry_release <S2SV_ModEnd> ( ce ) <S2SV_ModStart> hash ) ; mb2_cache_entry_release <S2SV_ModEnd> ( ce ) <S2SV_ModStart> hash ) ; mb2_cache_entry_release <S2SV_ModEnd> ( ce )",0
39,<S2SV_ModStart> ) ) ; free ( uri ) ;,0
40,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> * opt = ip_options_rcu <S2SV_ModEnd> ( optlen ) <S2SV_ModStart> ; if ( optlen ) return - EINVAL ; <S2SV_ModEnd> return ip_options_get_finish (",0
41,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|truncated]"" <S2SV_ModEnd> ) ) ;",0
42,,0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode",0
44,,0
45,<S2SV_ModStart> FLAG_MATCHED ) || ( <S2SV_ModStart> dp == datalen ||! datalen ),0
46,"<S2SV_ModStart> size_t * acl_len, size_t * acl_len <S2SV_ModStart> int status ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> int status ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> attrlen ) ; * acl_len = attrlen ;",0
47,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
48,"<S2SV_ModStart> { owner = ssplit <S2SV_ModEnd> ( auth, <S2SV_ModStart> } group = ssplit <S2SV_ModEnd> ( tok,",1
49,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> addr = VPX_MALLOC_L <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; <S2SV_ModEnd> if ( addr,0
50,<S2SV_ModStart> int indexes = 0 <S2SV_ModEnd> ; long long <S2SV_ModStart> long export_index_table [ sBlk. s. inodes <S2SV_ModEnd> ] ; res,0
51,"<S2SV_ModStart> ; } else if ( strcasecmp ( p1, ""modSecurity: <S2SV_blank> Invalid <S2SV_blank> value <S2SV_blank> for <S2SV_blank> SecRuleEngine: <S2SV_blank> %s"", p1 ) ) return apr_psprintf ( cmd -> pool, ""ModSecurity: <S2SV_blank> Invalid <S2SV_blank> value <S2SV_blank> for <S2SV_blank> SecRuleEngine: <S2SV_blank> %s"" <S2SV_ModEnd>, p1 )",0
52,<S2SV_ModStart> ; if ( 1 <S2SV_ModEnd> ) { # <S2SV_ModStart> } if ( 1 <S2SV_ModEnd> ) { },0
53,"<S2SV_ModStart> } if ( SSL_get_ex_data ( ssl, index_session_authenticated ) ) return 1 ; if ( <S2SV_ModStart> 1 ; } <S2SV_ModEnd> return 0 ;",0
54,"<S2SV_ModStart> ; if ( memcmp_safe <S2SV_ModEnd> ( cmac,",0
55,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> const uint64_t bits_used <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> -= bits_used ; <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> -> twopass. gf_group_bits <S2SV_ModEnd> = MAX ( <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
56,,0
57,<S2SV_ModStart> err_free_buf ; } usb_free_urb ( usbinterface ) ;,0
58,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
59,"<S2SV_ModStart> = ""/etc"" ; if (! capable ( CAP_NET_ADMIN ) ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; return NULL ; }",0
60,<S2SV_ModStart> 1 ) ; if ( ps_codec -> i4_sps_valid ) { return IHEVCD_INVALID_HEADER ; },0
61,,0
62,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> mi_col ) { <S2SV_ModEnd> int i ; <S2SV_ModStart> i ) { <S2SV_ModEnd> setup_pred_plane ( &,0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,<S2SV_ModStart> ) get_block = ocfs2_get_block_block <S2SV_ModEnd> ; else get_block <S2SV_ModStart> else get_block = ocfs2_get_block_block <S2SV_ModEnd> ; return __blockdev_direct_IO,0
65,"<S2SV_ModStart> ( f, ""%79s <S2SV_blank> %[^\\n]"" <S2SV_ModEnd>, def,",0
66,"<S2SV_ModStart> n ) { <S2SV_ModEnd> char * str <S2SV_ModStart> ; PyCompilerFlags cf <S2SV_ModEnd> ; PyObject * <S2SV_ModStart> PyCompilerFlags cf ; <S2SV_ModEnd> PyObject * o <S2SV_ModStart>, * fstring_name <S2SV_ModEnd> ; assert ( <S2SV_ModStart> ':' ) ; if ( str == NULL ) return NULL ; <S2SV_ModStart> == NULL ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ; } <S2SV_ModStart> == NULL ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ; } <S2SV_ModEnd> str [ 0 <S2SV_ModStart> ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; if ( str == NULL ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ; } <S2SV_ModStart> fstring_name ) ; if ( str == NULL ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ; }",0
67,,0
68,<S2SV_ModStart> size ) ; if (! px -> ft ) return FALSE ;,0
69,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; if ( length < 4 ) { return ; } <S2SV_ModStart> ) dat ; if ( length < 4 ) { return ; } <S2SV_ModStart> ) dat ; if ( length < 4 ) { return ; } <S2SV_ModStart> ) dat ; if ( length < 4 ) { return ; } <S2SV_ModStart> ) dat ; if ( length < 4 ) { return ; } <S2SV_ModStart> ) dat ; if ( length < 4 ) { return ; } <S2SV_ModStart> ) dat ; if ( length < 4 ) { return ; } <S2SV_ModStart> ) dat ; if ( length < 4 ) { return ; } <S2SV_ModStart> ) dat ; if ( length < 4 ) { return ; }",0
70,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
71,<S2SV_ModStart> const buffers [ 4 <S2SV_ModEnd> ] = { <S2SV_ModStart> const buffers [ 4 <S2SV_ModEnd> ] = { <S2SV_ModStart> int strides [ 4 <S2SV_ModEnd> ] = {,0
72,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; for (,1
73,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
74,"<S2SV_ModStart> _ipmi_destroy_user ( user, true",0
75,<S2SV_ModStart> int sl = ( int ),0
76,"<S2SV_ModStart> * for_ch ; <S2SV_ModEnd> REQ ( n <S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == ASYNC <S2SV_ModEnd> ) { ast_error <S2SV_ModStart> } for_ch = TYPE ( CHILD ( n, 0 ) ) == ASYNC <S2SV_ModEnd> ; t = <S2SV_ModStart> ( c, TYPE ( CHILD ( n, 0 ) ) == ASYNC <S2SV_ModEnd> ) ; t <S2SV_ModStart> ( c, TYPE ( CHILD ( n, 0 ) ) == ASYNC <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( n, TYPE ( CHILD ( n, 0 ) ) == ASYNC <S2SV_ModEnd> ) { int <S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == ASYNC <S2SV_ModEnd> ) { int <S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == ASYNC <S2SV_ModEnd> ) { int <S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == ASYNC <S2SV_ModEnd> ) { int <S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == ASYNC <S2SV_ModEnd> ) { int <S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == ASYNC <S2SV_ModEnd> ) { int <S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 1 ) ) == ASYNC <S2SV_ModEnd>",0
77,<S2SV_ModStart> = NULL ; dst_state -> curframe = src -> curframe ;,0
78,,0
79,"<S2SV_ModStart> maxn ) { <S2SV_ModEnd> # ifdef DEBUG <S2SV_ModStart> ; # endif if ( n > maxn ) SWF_error ( ""Action <S2SV_blank> overflow!"" ) ;",0
80,<S2SV_ModStart> if ( len > <S2SV_ModEnd> sizeof ( *,0
81,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
82,,0
83,,0
84,<S2SV_ModStart> ) p += ( UChar * ),0
85,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> bfq_idle_slice_timer_body ( struct <S2SV_ModStart> bfq_data * bfqd <S2SV_ModEnd>, enum bfqq_expiration <S2SV_ModStart> long flags ; if (! bfqd ) return - EBUSY ; <S2SV_ModStart> flags ) ; return 0 ;",0
86,,1
87,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
88,<S2SV_ModStart> diffPtr + x >= <S2SV_ModEnd> diffBlock + diffBlockLength <S2SV_ModStart> diffPtr + x >= <S2SV_ModEnd> diffBlock + diffBlockLength <S2SV_ModStart> extraPtr + y >= <S2SV_ModEnd> extraBlockLength ) {,0
89,"<S2SV_ModStart>, fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
90,,0
91,<S2SV_ModStart> data ) { ( void ) data ; ( void ) data ;,0
92,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
93,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
94,,0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
97,"<S2SV_ModStart> msicap, msgnum <S2SV_ModEnd> ) ; return",0
98,<S2SV_ModStart> } if ( server. masterhost &&,0
99,,0
100,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> vp9_init_plane_quantizers ( cpi,0
101,<S2SV_ModStart> info -> si_code == <S2SV_ModEnd> 0 ) return <S2SV_ModStart> return - EPERM <S2SV_ModEnd> ; return do_send_specific,0
102,<S2SV_ModStart> ptr -> size <S2SV_ModEnd> ; tmp_str =,1
103,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
104,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> -> state == fmode <S2SV_ModEnd> ) return ; <S2SV_ModStart> if ( ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> -> state = fmode <S2SV_ModEnd> ; } <S2SV_null>",0
105,<S2SV_ModStart> read_info ) ; <S2SV_ModEnd> if ( (,0
106,<S2SV_ModStart> 0 ; } memset <S2SV_ModEnd> ( elem.,0
107,<S2SV_ModStart> ( unsigned ) JPC_QCX_GETEXPN <S2SV_ModEnd> ( qcd -> <S2SV_ModStart> ( unsigned ) JPC_QCX_GETMANT <S2SV_ModEnd> ( qcd ->,0
108,<S2SV_ModStart> avctx -> height <S2SV_ModEnd> ; if (,0
109,<S2SV_ModStart> length - 1 <S2SV_ModEnd> ) ; return,1
110,"<S2SV_ModStart> * name = fit_get_name <S2SV_ModEnd> ( fit,",0
111,"<S2SV_ModStart> -> rx_kfifo, CX23888_IR_RX_KFIFO_SIZE <S2SV_ModEnd>, GFP_KERNEL )",0
112,"<S2SV_ModStart> * iface, <S2SV_ModEnd> vpx_codec_flags_t flags, <S2SV_ModStart> else if ( <S2SV_ModEnd> flags & VPX_CODEC_USE_XMA <S2SV_ModStart> flags & VPX_CODEC_USE_POSTPROC <S2SV_ModEnd> ) { memset",0
113,<S2SV_ModStart> ; value |= TJA1100_MODE_RMII_MODE <S2SV_ModEnd> ; tja1100WritePhyReg (,0
114,,0
115,<S2SV_ModStart> else if ( <S2SV_ModEnd> flags & VPX_CODEC_USE_XMA <S2SV_ModStart> flags & VPX_CODEC_USE_PSNR <S2SV_ModEnd> ) res =,0
116,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
117,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; RESERVE_SPACE",1
118,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ) ; return 0 <S2SV_ModStart> break ; } return 0 ;,0
119,,0
120,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
121,<S2SV_ModStart> goto trunc ; ND_TCHECK ( lshp -> ls_type ) ; ND_TCHECK ( lshp -> ls_seq ) ;,0
122,<S2SV_ModStart> } else { if ( len < 0 ) { <S2SV_ModStart> ibuf ) ; },0
123,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
124,<S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ),0
125,"<S2SV_ModStart> * costs, vpx_tree_tree <S2SV_ModEnd> tree, const <S2SV_ModStart> tree, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> ) { const vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> ) ; const vpx_tree_index <S2SV_ModEnd> ii = tree",0
126,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
127,"<S2SV_ModStart> 4, c <S2SV_ModEnd> ) ; if",0
128,,0
129,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> flags |= HAS_EDSP <S2SV_ModStart> ; # endif <S2SV_ModEnd> return flags &,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
131,,0
132,<S2SV_ModStart> -> flags & CLIENT_CLOSE_REPLY <S2SV_ModEnd> ) break ;,0
133,<S2SV_ModStart> get_blocks_flags = EXT4_GET_BLOCKS_CREATE <S2SV_ModEnd> ; blks =,0
134,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart>, handle, NULL <S2SV_ModEnd>, & p <S2SV_ModStart> & p -> ai_family, NULL <S2SV_ModEnd>, & p <S2SV_ModStart>, NULL, NULL <S2SV_ModEnd>, NULL )",0
135,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
136,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
137,"<S2SV_ModStart> * pegasus, __u16 <S2SV_ModEnd> size, void <S2SV_ModStart> data ) { return <S2SV_ModEnd> usb_control_msg ( pegasus <S2SV_ModStart>, indx, <S2SV_ModEnd> size, 100 <S2SV_ModStart> ret ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
138,"<S2SV_ModStart> mod_ty Module ( asdl_seq <S2SV_ModEnd> * body,",0
139,"<S2SV_ModStart> * src, <S2SV_ModEnd> int64_t ts_start, <S2SV_ModStart> >> 4 ; <S2SV_ModEnd> if ( ctx <S2SV_ModStart> write_idx ) ; <S2SV_ModEnd> for ( row <S2SV_ModStart> } else { vpx_copy_and_extend_frame <S2SV_ModEnd> ( src, <S2SV_ModStart> img ) ; <S2SV_ModEnd> } buf ->",0
140,<S2SV_ModStart>. sharpness ; <S2SV_ModEnd> const int min_filter_level <S2SV_ModStart> int q = vpx_ac_quant <S2SV_ModEnd> ( cm -> <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } else { <S2SV_ModStart> } else { <S2SV_ModEnd> } } <S2SV_null>,0
141,"<S2SV_ModStart> ( ) ; # if ( LINUX_VERSION_CODE >= KERNEL_VERSION ( 4, 10, 0 ) ) <S2SV_ModStart> ( ) ; # else ( void ) p_data ; # endif",0
142,<S2SV_ModStart> '!' : { size_t <S2SV_ModEnd> a = getnum,0
143,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
144,"<S2SV_ModStart> vpx_codec_err_t res ; uint8_t flags ; <S2SV_ModStart>. decode ( flags <S2SV_ModEnd>, data, <S2SV_ModStart> deadline ) ; flags = 0 ;",0
145,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int isofs_read_inode (,0
146,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> ; } } }",0
147,<S2SV_ModStart> self ) { if ( self -> dict ),0
148,<S2SV_ModStart> 0 ; a && <S2SV_ModEnd> i < count,0
149,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""Module <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> must <S2SV_blank> be <S2SV_blank> a <S2SV_blank> list, <S2SV_blank> not <S2SV_blank> a <S2SV_blank> %.200s"", tmp -> ob_type -> tp_name ) ; goto failed ; } <S2SV_ModEnd> tmp = _PyObject_GetAttrId <S2SV_ModStart> Py_ssize_t i ; if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } <S2SV_ModStart> ++ ) { <S2SV_ModEnd> res = obj2ast_stmt <S2SV_ModStart> failed ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( lookup_attr_id ( obj, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""Module <S2SV_blank> field <S2SV_blank> \\""body\\""",0
150,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
151,<S2SV_ModStart> ; if ( msg_compat ) msg_compat = msg_compat ; if ( msg_compat ) msg_compat = msg_compat ; if ( msg_compat ) msg_compat = msg_compat ; if ( msg_compat ) msg_compat = msg_compat <S2SV_ModEnd> ; if (,0
152,,0
153,,0
154,"<S2SV_ModStart> { xsltTransformError ( ctxt,",0
155,,0
156,<S2SV_ModStart> msix_tab_size ) { <S2SV_ModEnd> bzero ( msixcap,1
157,"<S2SV_ModStart>! js_regexec ( J,",0
158,"<S2SV_ModStart> case OFreshOID : if ( Int_val ( Field ( ( value ) dest, 1 ) ) >= 0 )caml_set_oo_id ( ( value ) dest ) ;",0
159,"<S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; ksz8851WriteReg <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( isr & KSZ8851_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_IER <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_",0
160,"<S2SV_ModStart> void encode_quantization ( VP9_COMMON <S2SV_ModEnd> * cm, <S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
161,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> p_buf, msglen )",1
162,"<S2SV_ModStart> ( fp, out,",0
163,"<S2SV_ModStart> ( ) ; strcpy <S2SV_ModEnd> ( t1_buf_array, <S2SV_ModStart> t1_buf_array, t1_line_array, sizeof ( t1_buf_array )",0
164,,0
165,<S2SV_ModStart> key_ref ) ; if ( buflen < 0 ) goto error2 ;,0
166,<S2SV_ModStart> ps_dec -> u4_first_slice_in_pic || ps_dec -> u4_first_slice_in_pic,0
167,<S2SV_ModStart> var_off ) ; if ( src_known ) { <S2SV_ModStart> var_off ) ; },0
168,<S2SV_ModStart> ; if ( rc == - EINVAL ) goto lookup_out ; if (,0
169,,0
170,,0
171,<S2SV_ModStart> = new_cols ; <S2SV_ModEnd> vterm_allocator_free ( screen,1
172,"<S2SV_ModStart> n ) { int in_named_escape = 0 ; int result = 0 ; int result = 0 ; int result = 0 ; int result = 0 ; assert ( * str < end ) ; for ( ; * str < end ; ( * str ) ++ ) { char ch = * * str ; if ( ch == '{' && ( * str - 2 ) == '\\\\' && * ( * str - 2 ) == '\\\\' && * ( * str - 2 ) == '\\\\' ) { in_named_escape = 0 ; } else if ( ch == '{' && ( * str - 2 ) == '\\\\' && * ( * str - 2 ) == '\\\\' && * ( * str - 2 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } } else if ( ch == '{' || ch == '}' ) { if ( ch == '{' || ch == '}' ) { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; return - 1 ; } } } else if ( ch == '",0
173,<S2SV_ModStart> ) ; struct dump_dir <S2SV_ModEnd> * dd =,0
174,<S2SV_ModStart> bytesPerLine ) ; if ( bytesPerLine < 0 ) { return ; },0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
176,"<S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if",0
177,,0
178,"<S2SV_ModStart> ; dh = skb_header_pointer <S2SV_ModEnd> ( skb,",0
179,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart>, struct ip_options_rcu <S2SV_ModEnd> * opt, <S2SV_ModStart> & 3 ) { <S2SV_ModStart> = IPOPT_END ; } <S2SV_ModStart> ( optlen && ip_options_compile <S2SV_ModEnd> ( net,",0
180,"<S2SV_ModStart> connection == NULL || strcasecmp ( connection, ""Connection"" ) == 0",0
181,<S2SV_ModStart> * findalldevs_if ; uint32 <S2SV_ModEnd> nif = 0 <S2SV_ModStart> -> description ) { <S2SV_ModStart> name ) ; } <S2SV_ModStart> -> name ) { <S2SV_ModStart> name ) ; } <S2SV_ModStart> case AF_INET : { <S2SV_ModStart> 4 ) ; },0
182,"<S2SV_ModStart>, client_uid, DEFAULT_DUMP_DIR_MODE <S2SV_ModEnd> ) ; if",0
183,<S2SV_ModStart> -> columns - 3 <S2SV_ModEnd> ) ; x,0
184,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
185,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { ThrowReaderException ( CorruptImageError, ""ImproperImageExtent"" ) ; }",0
186,"<S2SV_ModStart> ( ndo, ""%u"", bp [ 3 ] <S2SV_ModEnd> ) ) ;",0
187,"<S2SV_ModStart>! ptrace_has_cap ( __task_cred ( task ) <S2SV_ModEnd> -> user_ns,",0
188,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
189,,0
190,<S2SV_ModStart> tmp_idx ; } dd -> per_sdma = NULL ;,0
191,,0
192,<S2SV_ModStart> } pairs = palloc64 <S2SV_ModEnd> ( pcount *,0
193,"<S2SV_ModStart> val ) ; ruleadd <S2SV_ModEnd> ( r,",0
194,,0
195,"<S2SV_ModStart> vp9_fht16x16_c ( const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> 256 ] ; vpx_fdct16x16_c <S2SV_ModEnd> ( out, <S2SV_ModStart>, j ; vpx_fdct16x16_c <S2SV_ModEnd> temp_out [ 16",0
196,,0
197,"<S2SV_ModStart> = osi_calloc ( strlen ( filename ) + 5 + strlen ( filename ) + 5 <S2SV_ModEnd> ) ; if <S2SV_ModStart> node ) ; <S2SV_ModEnd> for ( const <S2SV_ModStart> ( fp, ""%s <S2SV_blank> = <S2SV_blank> %s\\n"" <S2SV_ModEnd>, entry -> <S2SV_ModStart> entry -> value <S2SV_ModEnd> ) ; } <S2SV_ModStart> sections ) ) { <S2SV_ModStart> fp ) ; }",0
198,"<S2SV_ModStart> ( ndo, ""%s"", tptr <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( ndo, ""%s"", tptr <S2SV_ModEnd> ) ) ;",0
199,"<S2SV_ModStart> userData, target <S2SV_ModEnd> ) ; ctxt",0
200,"<S2SV_ModStart> S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %u\\r\\n"" <S2SV_ModEnd> ""%s"", request",0
201,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 0 ) ; copy_file_as_user <S2SV_ModEnd> ( dest, <S2SV_ModStart> ""chown"" ) ; <S2SV_ModEnd> unlink ( src",0
202,<S2SV_ModStart>!= BFA_STATUS_OK ) { kfree ( fcstats ) ; <S2SV_ModStart> return NULL ; },1
203,"<S2SV_ModStart> ( 1.0f, Max <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> ( 1.0f, Max <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> ( 1.0f, Max <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> ( 1.0f, Max <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> ( 1.0f, Max <S2SV_ModEnd> ( 0.0f,",0
204,<S2SV_ModStart> ; rec -> sasl_nick = src -> sasl_nick ; rec ->,0
205,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
206,"<S2SV_ModStart> ExifShort c ; int <S2SV_ModEnd> o, datao",0
207,"<S2SV_ModStart> ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> correct <S2SV_blank> index <S2SV_blank> definition"" <S2SV_ModEnd>, filename )",0
208,"<S2SV_ModStart> olen ) { size_t alloc ; char * ns ; int alloc ; char * ns ; int strindex = 0 ; char * ns ; int strindex = 0 ; unsigned char in ; int strindex = 0 ; char * ns ; int strindex = 0 ; char * ns ; int strindex = 0 ; char * ns ; int strindex = 0 ; char * ns ; int strindex = 0 ; char * ns ; int strindex = 0 ; char * ns ; int strindex = 0 ; char * ns ; int strindex = 0 ; char * ns ; int strindex = 0 ; char * ns ; int strindex = 0 ; char * ns ; int strindex = 0 ; char * ns ; int strindex = 0 ; char * ns ; int strindex = 0 ; char * ns ; int strindex = 0 ; char * ns ; int strindex = 0 ; char * ns ; int strindex = 0 ; char * ns ; int strindex = 0 ; if (! ns ) return NULL ; while ( -- alloc > 0 ) { strindex = Curl_convert_from_network ( handle, & in, 1 ) ; res = Curl_convert_from_",0
209,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
210,<S2SV_ModStart> ; def -> <S2SV_ModEnd> session_setup = usm_session_init,0
211,"<S2SV_ModStart> NULL ; return <S2SV_ModEnd> match ( prog <S2SV_ModStart> prog -> flags <S2SV_ModEnd>, sub )",0
212,<S2SV_ModStart> idx ] ; <S2SV_ModEnd> switch ( action <S2SV_ModStart> ) ; } <S2SV_ModEnd> return SNMP_ERR_NOERROR ;,0
213,,0
214,"<S2SV_ModStart> timer ) ; spin_lock_irq ( & slave_active_lock ) ; <S2SV_ModStart> open_list ) { spin_lock_irq ( & slave_active_lock ) ; list_move_tail ( & slave -> open_list, & snd_timer_slave_list ) ; <S2SV_ModStart> ( & slave_active_lock <S2SV_ModEnd> ) ; list_move_tail",0
215,<S2SV_ModStart> -> u4_bitoffset = 0 <S2SV_ModEnd> ; else ps_dec,0
216,<S2SV_ModStart> decode ) { const uint_fast32_t <S2SV_ModEnd> widthOverflow = gifFilePtr <S2SV_ModStart> -> originalWidth ; const uint_fast32_t <S2SV_ModEnd> heightOverflow = gifFilePtr <S2SV_ModStart> -> originalHeight ; const uint_fast32_t <S2SV_ModEnd> newRasterSize = gifFilePtr <S2SV_ModStart> -> originalHeight ; const uint_fast32_t <S2SV_ModEnd> newRasterSize = info <S2SV_ModStart> -> originalHeight ; const uint_fast32_t <S2SV_ModEnd> newRasterSize = info <S2SV_ModStart> -> originalHeight ; const uint_fast32_t <S2SV_ModEnd> newRasterSize = info <S2SV_ModStart> -> originalHeight ; const uint_fast32_t <S2SV_ModEnd> newRasterSize = info <S2SV_ModStart> -> originalHeight ; const uint_fast32_t <S2SV_ModEnd> newRasterSize = info <S2SV_ModStart> -> originalHeight ; const uint_fast32_t <S2SV_ModEnd> newRasterSize = info <S2SV_ModStart> -> originalHeight ; const uint_fast32_t <S2SV_ModEnd> newRasterSize = info <S2SV_ModStart> -> originalHeight ; const uint_fast32_t <S2SV_ModEnd> newRasterSize = info <S2SV_ModStart> -> originalHeight ; const uint_fast32_t <S2SV_ModEnd> newRasterSize = info <S2SV_ModStart> -> originalHeight ; const uint_fast32_t <S2SV_ModEnd> newRasterSize = info <S2SV_ModStart> -> original,0
217,<S2SV_ModStart> || cherokee_buffer_is_empty ( <S2SV_ModEnd> conn -> validator,0
218,<S2SV_ModStart> bus ] ; <S2SV_ModEnd> si = &,0
219,"<S2SV_ModStart>, timeo ) <S2SV_ModEnd> ; if (",1
220,<S2SV_ModStart> 0 ) { if ( * s == '/' ) { <S2SV_ModStart> ++ ) ; } <S2SV_ModStart> * t && <S2SV_ModEnd> * t ),0
221,<S2SV_ModStart> ; result = TEMP_FAILURE_RETRY ( <S2SV_ModStart> uipc_main. read_set ),0
222,<S2SV_ModStart> msixcap msixcap ; <S2SV_ModEnd> tab_size = msgnum <S2SV_ModStart> msgnum ) ; <S2SV_ModEnd> pci_populate_msixcap ( &,0
223,"<S2SV_ModStart> int decode_unsigned_max ( vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",0
224,<S2SV_ModStart> == NULL ) return retval <S2SV_ModEnd> ; status = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> return retval ;,0
225,,0
226,,0
227,<S2SV_ModStart> ; if ( buf2 <S2SV_ModEnd> -> size <,0
228,<S2SV_ModStart> ) + size ; if ( size < 0 ) return NULL,0
229,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,1
230,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs,",0
231,"<S2SV_ModStart> b ) ; if ( b -> fd < 0 ) { log_debug_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; }",0
232,<S2SV_ModStart> ( ) ; errors += test_string_formatting ( ) ;,0
233,<S2SV_ModStart> -> lun ) sas_eh_defer_cmd <S2SV_ModEnd> ( cmd ),0
234,"<S2SV_ModStart>, end_col_offset ; if ( TYPE ( CHILD ( n, name_i ) ) == TYPE_COMMENT ) return NULL ; <S2SV_ModStart> 2 ; } if ( TYPE ( CHILD ( n, name_i ) ) == TYPE_COMMENT ) return AsyncFunctionDef ( name, args, body, decorator_seq, returns, LINENO ( n0 ), n0 -> n_col_offset, end_lineno, end_col_offset, c -> c_arena ) ; else <S2SV_ModStart> 2 ; } if ( TYPE ( CHILD ( n, name_i ) ) == TYPE_COMMENT ) return AsyncFunctionDef ( name, args, body, body, decorator_seq, returns, LINENO ( n0 ), n0 -> n_col_offset, end_lineno, end_lineno, end_col_offset, c -> c_arena ) ;",0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,<S2SV_ModStart> Rec. RecordLength + 1,0
237,,1
238,<S2SV_ModStart> 0 ) ; if (! res ) return - ENOMEM ;,0
239,<S2SV_ModStart> case SEEK_SET : if ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf,0
240,,0
241,,0
242,<S2SV_ModStart> perf_event_context * ctx <S2SV_ModEnd> ; if ( <S2SV_ModStart> event ) ; <S2SV_ModEnd> } raw_spin_unlock_irq (,0
243,<S2SV_ModStart> -> post_proc_flag = <S2SV_ModEnd> ctx -> dbg_color_ref_frame_flag <S2SV_ModStart> ctx -> dbg_color_ref_frame_flag <S2SV_ModEnd> ; flags -> <S2SV_ModStart>. noise_level ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
244,<S2SV_ModStart> sizeof ( struct olsr_msg4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> msg_len_valid = 0 ; msg_len_valid = 0 <S2SV_ModStart> msg_len_valid = 0 ; msg_len_valid = 0,0
245,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vpx_usec_timer_start ( & <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,1
246,"<S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" <S2SV_ModEnd> ) ; exit",0
247,<S2SV_ModStart> ; if ( ptr_hbe_txposer -> core_frame_length > 1024 ) ptr_hbe_txposer -> core_frame_length = 1024 ; if (,0
248,<S2SV_ModStart> ) ; const lua_authz_provider_spec <S2SV_ModEnd> * prov_spec =,0
249,<S2SV_ModStart> 0 ) { quantum_info = DestroyImageList ( image ) ; <S2SV_ModStart> 0 ) { quantum_info = DestroyImageList ( quantum_info ) ;,0
250,<S2SV_ModStart> (! proto_end ||! proto_end,0
251,<S2SV_ModStart> fdt ) ; if (! path ) return - ENOENT ;,0
252,<S2SV_ModStart> ; if ( server. bgrewritechildpid &&,0
253,<S2SV_ModStart> channel ) ; <S2SV_ModEnd> set_description ( client,1
254,<S2SV_ModStart> book -> dim && i < n,1
255,<S2SV_ModStart> action ) { ( void ) r ;,0
256,"<S2SV_ModStart> this_h ) { vpx_setup_scale_factors <S2SV_ModEnd> ( sf, <S2SV_ModStart> } else { vpx_setup_scale_factors <S2SV_ModEnd> ( sf,",0
257,"<S2SV_ModStart> (! sock ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( buf ) { if ( oe_memset_s ( buf, count, 0, count )!= OE_OK ) OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( buf ) { if ( oe_memset_s ( buf, count, 0, count )!= OE_OK ) OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( oe_syscall_recv_ocall ( & ret, sock -> host_fd, buf, count, flags )!= OE_OK ) OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( count && <S2SV_ModEnd> buf ) { <S2SV_ModStart> OE_EINVAL ) ; <S2SV_ModEnd> return ret ;",0
258,"<S2SV_ModStart> skb ) ; atomic_set ( & np -> pktoptions, 0 ) ;",0
259,<S2SV_ModStart> ( & sctp_net_ops ) ; unregister_pernet_subsys ( & sctp_net_ops,0
260,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> index ) ; return 0 ;,0
261,<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen (,1
262,"<S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_PHY1ILR <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ERROR_OUT_OF_MEMORY ; } ksz8851DumpReg ( interface ) ; <S2SV_ModStart> ( interface, KSZ8851_MARM <S2SV_ModEnd> ) ; context <S2SV_ModStart> ( interface, KSZ8851_MARM <S2SV_ModEnd> ) ; context <S2SV_ModStart> ( interface, KSZ8851_MARM <S2SV_ModEnd> ) ; context",0
263,"<S2SV_ModStart> skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
264,,0
265,<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> ui_DEV_DESTROY ) ; ),0
266,<S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> = rc -> avg_frame_bandwidth <S2SV_ModEnd> ; # endif,0
267,"<S2SV_ModStart> i ], ""--allow-trusted"" <S2SV_ModEnd> ) == 0",0
268,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
269,<S2SV_ModStart> ib ] ; <S2SV_ModEnd> dequant_ptr = d,1
270,<S2SV_ModStart> FN_REFLEN ] ; if ( strlen ( opt_basedir ) > sizeof ( buff ) ) { error = - 1 ; goto exit ; },0
271,<S2SV_ModStart> decrypt_cb ) { size_t <S2SV_ModEnd> n = ( <S2SV_ModStart> n = ( size_t <S2SV_ModEnd> ) ( data_end,0
272,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; <S2SV_ModEnd> exit_func : free_server_handle,0
273,,0
274,<S2SV_ModStart> goto error ; if ( statbuf. st_size < h -> size ) goto error ;,0
275,,0
276,,0
277,"<S2SV_ModStart> out ) { int64 <S2SV_ModEnd> bitspersample, samplesperpixel <S2SV_ModStart>, samplesperpixel ; int64 <S2SV_ModEnd> input_photometric ; uint32 <S2SV_ModStart> ( TIFFTAG_SAMPLESPERPIXEL, ( int64 )",0
278,,0
279,"<S2SV_ModStart> unsigned int link_count ; struct buffer_head * nbh ; struct kernel_lb_addr loc ; struct kernel_lb_addr loc ; struct kernel_lb_addr loc ; struct kernel_lb_addr loc ; struct kernel_lb_addr loc ; struct indirectEntry * ie ; ie = ( struct indirectEntry * ) ibh -> b_data ; loc = lelb_to_cpu ( ie -> indirectICB. extLength ) ; if ( ie -> indirectICB. extLength && ( nbh = udf_read_ptagged ( inode -> i_sb, & loc, 0, & ident ) ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!bh\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; make_bad_inode ( inode ) ; return ; } if ( se -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!bh\\n"", inode -> i_ino ) ; make",0
280,"<S2SV_ModStart> get_uv_tx_size ( mbmi ) ; memset ( & lfm -> lfl_y [ index ], filter_level, w",0
281,"<S2SV_ModStart> mq_ops ) { spin_lock_irqsave <S2SV_ModEnd> ( & fq <S2SV_ModStart>, flags ) <S2SV_ModEnd> ; } running",0
282,<S2SV_ModStart> uint8_t val ; if ( addr > ( vdev -> config_len - sizeof ( val ) ) ) return ( uint32_t ) - 1 ; <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,0
283,"<S2SV_ModStart> { option = strchr <S2SV_ModEnd> ( option,",0
284,<S2SV_ModStart> || * replySize > <S2SV_ModEnd> sizeof ( effect_param_t,0
285,<S2SV_ModStart> ++ ) { if ( ret [ j ]. key_data_length [ j ] == 0 ) { err = ENOMEM ; goto cleanup ; },0
286,<S2SV_ModStart> 0x02 ) ; <S2SV_ModEnd> r = sc_transmit_apdu,0
287,,0
288,<S2SV_ModStart> ; } } return 0 ;,0
289,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
290,,0
291,<S2SV_ModStart> ) ; } if ( status == MagickFalse ) { return ( DestroyImageList ( image ) ) ; },0
292,"<S2SV_ModStart> len ) { return decode_unicode_with_escapes <S2SV_ModEnd> ( c, <S2SV_ModStart> len ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
293,,0
294,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
295,,0
296,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
297,,0
298,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> vterm_allocator_free ( screen,1
299,<S2SV_ModStart> { err = _ nanosleep <S2SV_ModEnd> ( & delay,0
300,"<S2SV_ModStart> one, offset <S2SV_ModEnd> ; ssize_t count <S2SV_ModStart> ( number_planes_filled > ( number_planes_filled - number_planes_filled ) <S2SV_ModEnd> ) ThrowReaderException (",0
301,"<S2SV_ModStart> value ) { if (! <S2SV_ModStart>, NULL ) ) { <S2SV_ModEnd> httpSetRouteName ( state <S2SV_ModStart> ) ) ; }",0
302,"<S2SV_ModStart>. cmp = key_cmp ( type, <S2SV_ModStart> type -> match )",0
303,<S2SV_ModStart>! ntime ) <S2SV_ModEnd> goto out ; <S2SV_ModStart> goto out ; <S2SV_ModEnd> cg_wlock ( &,0
304,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
305,"<S2SV_ModStart> unused ) { <S2SV_ModEnd> _Py_IDENTIFIER ( __dict__ <S2SV_ModStart> __dict__ ) ; return Py_BuildValue ( ""O()O"" <S2SV_ModEnd>, Py_TYPE ( <S2SV_ModStart> ( self ) <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
306,"<S2SV_ModStart>, USB_DT_OTG, <S2SV_ModEnd> & desc )",0
307,<S2SV_ModStart> -> private_data ; struct perf_event_context * ctx ; <S2SV_ModStart> case PERF_EVENT_IOC_PERIOD : ctx = perf_event_ctx_lock ( event ) ; <S2SV_ModStart> case PERF_EVENT_IOC_SET_FILTER : ctx = perf_event_ctx_lock ( event ) ;,0
308,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> * r, vpx_reader <S2SV_ModEnd> y_mode ) { <S2SV_ModStart> y_mode ) { <S2SV_ModEnd> uv_mode = read_intra_mode",0
309,<S2SV_ModStart> == 0 ) { <S2SV_ModStart> - EINVAL ; } <S2SV_ModStart> == 0 ) { <S2SV_ModStart> - EINVAL ; } <S2SV_ModStart> == 0 ) { <S2SV_ModStart> - EINVAL ; } <S2SV_ModStart> == 0 ) { <S2SV_ModStart> - EINVAL ; },0
310,,0
311,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
312,,0
313,,0
314,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> t, const vpx_extra_bit <S2SV_ModEnd> * stop ) <S2SV_ModStart> ] ; const vpx_extra_bit <S2SV_ModEnd> * const b <S2SV_ModStart> b = & vpx_extra_bits <S2SV_ModEnd> [ t ] <S2SV_ModStart> b = & vpx_extra_bits <S2SV_ModEnd> [ t ] <S2SV_ModStart> ) ; } vpx_write_bit <S2SV_ModEnd> ( w,",0
315,<S2SV_ModStart> ; struct vpx_write_bit_buffer * <S2SV_ModStart> ; struct vpx_write_bit_buffer * <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> += uncompressed_hdr_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb,0
316,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
317,<S2SV_ModStart> _U_ ) { ND_TCHECK ( * ext ) ; <S2SV_ModStart> * typedata ; <S2SV_ModEnd> UNALIGNED_MEMCPY ( &,0
318,<S2SV_ModStart> cmpt -> data + cmpt -> data,0
319,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
320,,0
321,<S2SV_ModStart> return mount_entry_on_generic ( <S2SV_ModEnd> mntent -> mnt_dir,0
322,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
323,"<S2SV_ModStart> ( env, server_name_val, req_server_name_val <S2SV_ModEnd> ( req )",0
324,"<S2SV_ModStart> endif int col_type = 0 <S2SV_ModStart> col_type, prepare_retval = 0",0
325,<S2SV_ModStart> need = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> need *= 4 <S2SV_ModEnd> ; } ),0
326,,0
327,<S2SV_ModStart> cycles ) ; <S2SV_ModEnd> if ( (,0
328,"<S2SV_ModStart> LEX_ID ) { strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> ( str, jslGetTokenValueAsString <S2SV_ModEnd> ( ), <S2SV_ModStart> LEX_STR ) { strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> ( str, jslGetTokenValueAsString <S2SV_ModEnd> ( ),",0
329,,1
330,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
331,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
332,<S2SV_ModStart> s2 ) { if (! s1 ||! s2 ) return - 1 ;,0
333,"<S2SV_ModStart> { parse_global_option ( CMD_PRINT_HELP <S2SV_ModEnd>, NULL, <S2SV_ModStart> { parse_global_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL, <S2SV_ModStart> ; parse_service_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL,",0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,,0
336,<S2SV_ModStart> ; if ( IMPEG2D_ERROR_CODES_T <S2SV_ModEnd> ) { ps_op,0
337,<S2SV_ModStart> <S2SV_null> <S2SV_null> static const <S2SV_ModStart> ) { return <S2SV_ModEnd> item -> valuestring,0
338,"<S2SV_ModStart>. encode ( <S2SV_ModEnd> img, pts <S2SV_ModStart>. encode ( <S2SV_ModEnd> img, pts",0
339,<S2SV_ModStart> term. rows0 && term. cols0,0
340,<S2SV_ModStart> < cols + 17 <S2SV_ModEnd> ; i ++,0
341,<S2SV_ModStart> ; if ( i -> width > i -> height ) i -> height = i -> height ; if (,0
342,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
343,<S2SV_ModStart> 1 ) ; if ( ps_codec -> i4_sps_valid ) { return IHEVCD_INVALID_HEADER ; },0
344,<S2SV_ModStart> ) ) { va_end ( argptr ) ;,0
345,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( sun_info. length > sun_info. length ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
346,"<S2SV_ModStart> 0 ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 0600 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; return",1
347,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> BLOCK_8X8 : return vpx_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> BLOCK_16X8 : return vpx_mse16x8 <S2SV_ModEnd> ; case BLOCK_8X16 <S2SV_ModStart> BLOCK_8X16 : return vpx_mse8x16 <S2SV_ModEnd> ; default : <S2SV_ModStart> default : return vpx_mse8x16 <S2SV_ModEnd> ; } },0
348,,0
349,"<S2SV_ModStart> flags ) ; if (! vb ) { dev_err ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; }",0
350,<S2SV_ModStart> size ) { if ( size < 0 ) return NULL ;,0
351,<S2SV_ModStart> -> serviceId == EXTRACT_16BITS <S2SV_ModEnd> ( & rxh,1
352,<S2SV_ModStart> = bss_desc ; if (! req_ssid -> ssid_len ) return - EINVAL ;,0
353,,0
354,,0
355,"<S2SV_ModStart> do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> r, MSG_WAITALL )",1
356,<S2SV_ModStart> -> u1_pic_decode_done ; if ( ps_dec -> u1_pic_decode_done!= 1 ) { return ERROR_INCOMPLETE_FRAME ; },0
357,<S2SV_ModStart>!= 0 ) <S2SV_ModEnd> mprAddItem ( app <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
358,"<S2SV_ModStart> * delegation, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> -> type & fmode )!= fmode <S2SV_ModEnd> ) goto no_delegation_unlock <S2SV_ModStart> -> stateid, fmode <S2SV_ModEnd> ) ; ret <S2SV_ModStart> NULL ) { __update_open_stateid ( state, fmode <S2SV_ModEnd>, NULL, <S2SV_ModStart> NULL ) { __update_open_stateid ( state, fmode <S2SV_ModEnd>, NULL,",0
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,,0
361,<S2SV_ModStart> } if ( pmd_none_or_unmapped <S2SV_ModEnd> ( pmd ),0
362,<S2SV_ModStart> '\\0' ) { <S2SV_ModEnd> username [ index <S2SV_ModStart> ; } } <S2SV_ModEnd> ( void ),0
363,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> ) { return vpx_read_tree <S2SV_ModEnd> ( r,",1
364,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",1
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,<S2SV_ModStart> depth ++ ; ND_TCHECK ( buf2 ) ;,0
367,"<S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_RXQCR <S2SV_ModEnd> ) ; header <S2SV_ModStart> ( interface, KSZ8851_RXQCR <S2SV_ModEnd>, RXQCR_SDA ) <S2SV_ModStart> ( interface, KSZ8851_RXQCR <S2SV_ModEnd>, RXQCR_SDA ) <S2SV_ModStart> ( interface, KSZ8851_RXQCR <S2SV_ModEnd>, TXQCR_METFE ) <S2SV_ModStart> ( interface, KSZ8851_RXQCR <S2SV_ModEnd>, TXQCR_METFE )",0
368,<S2SV_ModStart> ( ) ; mono_gc_invoke_finalizers ( ) ;,0
369,,0
370,<S2SV_ModStart> ( unlikely ( pmd_trans_huge <S2SV_ModEnd> ( * pmd,0
371,"<S2SV_ModStart> ""Incorrect <S2SV_blank> parameters:\\n"" ) ; fprintf ( stderr, ""Usage: <S2SV_blank> %s\\n"", argv [ 0 ] ) ; <S2SV_ModStart> ; usage ( <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; usage ( <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; usage ( <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; usage ( <S2SV_ModEnd> ) ; return",0
372,"<S2SV_ModStart> num_fields ) { size_t <S2SV_ModEnd> i, result",0
373,<S2SV_ModStart> vpx_codec_alg_priv * priv <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> VPX_CODEC_MEM_ERROR ; } priv = ( vpx_codec_alg_priv_t * ) priv ; <S2SV_ModStart> enc ) { priv <S2SV_ModEnd> -> cfg = <S2SV_ModStart> enc ) { priv <S2SV_ModEnd> -> cfg = <S2SV_ModStart> enc = & priv <S2SV_ModEnd> -> cfg ; <S2SV_ModStart> ++ ) ; priv <S2SV_ModEnd> -> vp8_cfg = <S2SV_ModStart> ++ ) ; priv <S2SV_ModEnd> -> cx_data_sz =,0
374,<S2SV_ModStart> } if ( c < 256 ) return 0 ; if (,0
375,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx ->,0
376,<S2SV_ModStart> == cpu_to_le16 ( le32_to_le16 ( <S2SV_ModStart> di -> icbTag ),0
377,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB (",0
378,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int bad_format_imginfo (,0
379,"<S2SV_ModStart> ; UtRegisterTest ( ""DefragReverseTest"", DefragReverseTest ) ; UtRegisterTest (",0
380,<S2SV_ModStart> = object_length ; new_object. length = object_length ;,0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,,0
384,"<S2SV_ModStart> ( log, ""%s"", filename <S2SV_ModEnd> ) ; if",0
385,<S2SV_ModStart> 4 ) ; size_t <S2SV_ModEnd> num_properties = GETINT32 <S2SV_ModStart> ; j < <S2SV_ModEnd> num_properties ; j,0
386,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
387,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; <S2SV_ModEnd> return VPX_CODEC_INVALID_PARAM ; <S2SV_ModStart> VPX_CODEC_INVALID_PARAM ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
388,,0
389,"<S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 1 ) ) == type_kind ) return NULL ; if (",0
390,,0
391,,0
392,<S2SV_ModStart> ret = 0 ; if ( ti -> xtregs_opt ) return - EINVAL,0
393,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
394,<S2SV_ModStart> se_device * remote_dev ; if (! xop -> src_dev ) return,0
395,"<S2SV_ModStart> int error ; <S2SV_ModEnd> new_bh = ext2_group_first_block_no <S2SV_ModStart> ext2_xattr_cache_insert ( new_bh ) ; if ( header ) { new_bh = ext2_group_first_block_no ( sb, EXT2_I ( inode ) -> i_block_group",0
396,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
397,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
398,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
399,<S2SV_ModStart> ) AcquireQuantumMemory ( ( size_t ),0
400,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vpx_ref_frame_t * ) ; ( void ) ctx",0
401,,0
402,<S2SV_ModStart> == B_PIC ) { <S2SV_ModStart> ps_dec ) ; } else { <S2SV_ModEnd> impeg2d_dec_p_mb_params ( ps_dec <S2SV_ModStart> ) ; } },0
403,<S2SV_ModStart> VP9_LAST_FLAG ) { <S2SV_ModEnd> if (!,0
404,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
405,,0
406,<S2SV_ModStart> ++ ) { <S2SV_ModEnd> src += src_stride,0
407,<S2SV_ModStart> { rowstoread = ( uint32 ) ( <S2SV_ModStart> img -> row_offset ) <S2SV_ModStart> { rowstoread = ( uint32 ) ( <S2SV_ModStart> img -> row_offset ),0
408,<S2SV_ModStart> ; } } <S2SV_ModEnd> return 0 ;,0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
410,<S2SV_ModStart> num & ( 1U <S2SV_ModEnd> << ( number,0
411,"<S2SV_ModStart>, 1, ( int )",0
412,,0
413,,0
414,"<S2SV_ModStart> 0, 0 <S2SV_ModEnd> ) ; if",0
415,"<S2SV_ModStart> sock, sk ) ; memset ( sa, 0, sizeof ( * sa )",1
416,<S2SV_ModStart> MT_CPTYPE_PASSSALT ) { if ( <S2SV_ModStart> length ) ; },0
417,<S2SV_ModStart> ) { goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } else <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } return <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } return <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } return <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } return <S2SV_ModStart> ) ; return 0 <S2SV_ModEnd> ; } <S2SV_null>,0
418,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
419,<S2SV_ModStart> 0 ) { close ( gpsd_sock ) ; return ;,0
420,"<S2SV_ModStart>, & rlen, 0",1
421,"<S2SV_ModStart> * slavename ; memset ( & md5data, 0, sizeof ( md5data ) ) ;",0
422,"<S2SV_ModStart> ; if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart> { if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name,",0
423,<S2SV_ModStart> ; i < ( ut32 ),0
424,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
425,<S2SV_ModStart> credssp ) ; if ( transport -> credssp == NULL ) transport -> credssp = NULL ;,0
426,"<S2SV_ModStart> size_t s ; exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ;",0
427,<S2SV_ModStart> bd_addr ) { ( void ) bd_addr ;,0
428,"<S2SV_ModStart> i ; int avail, len <S2SV_ModEnd> ; txid xmin <S2SV_ModStart> 4 ) ; len = buf -> len - buf -> cursor ; <S2SV_ModStart> ; if ( len <S2SV_ModEnd> > avail || <S2SV_ModStart> > avail || len <S2SV_ModEnd> > avail )",0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
430,<S2SV_ModStart> epoll_ ) ; if ( count > OE_SSIZE_MAX ) { ret = - EINVAL ; OE_RAISE_ERRNO ( OE_EINVAL ) ; return ret ; },0
431,"<S2SV_ModStart> = parse_global_option ( CMD_INITIALIZE <S2SV_ModEnd>, NULL,",0
432,,0
433,<S2SV_ModStart> = EXT4_JOURNAL ( page_offset ( page ) <S2SV_ModEnd> ) ; if,0
434,<S2SV_ModStart> 1 ) ; if (! trak ) goto exit ;,0
435,"<S2SV_ModStart> 17 ] ; size_t <S2SV_ModEnd> plen ; md5_state_t <S2SV_ModStart> ; # endif memset ( & md5data, 0, sizeof ( md5data ) ) ; <S2SV_ModStart> = 0 ; memset ( & md5data, 0, sizeof ( md5data ) ) ;",0
436,<S2SV_ModStart> ; if ( <S2SV_ModEnd> Prefix!= NULL,1
437,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
438,<S2SV_ModStart> ( ) ; g_hash_table_remove_all ( headers ) ;,0
439,"<S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst,",0
440,,0
441,"<S2SV_ModStart>, obj_tlen ; u_int <S2SV_ModEnd> hexdump ; u_int <S2SV_ModStart> ( ndo, ""%s"", obj_tlen <S2SV_ModEnd> ) ) ;",0
442,"<S2SV_ModStart> mbmi, const MV <S2SV_ModEnd> * mvs [ <S2SV_ModStart> * ref = <S2SV_ModEnd> mbmi -> ref_frame",0
443,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart>, encoder -> codec_interface <S2SV_ModEnd> ( ) )",0
444,"<S2SV_ModStart> ; if ( skb_expand_head <S2SV_ModEnd> ( skb_out,",0
445,,0
446,"<S2SV_ModStart> { fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ], O_RDWR ) <S2SV_ModStart> ( fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_SET_EVBIT, EV_KEY ) <S2SV_ModStart> ( fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_SET_EVBIT, EV_REL ) <S2SV_ModStart> ( fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_SET_EVBIT, EV_SYN ) <S2SV_ModStart> ( fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_CREATE, NULL )",0
447,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
448,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s,",0
449,<S2SV_ModStart> krb5_error_code iakerb_alloc_context ( struct krb5_context * ctx ) { <S2SV_ModEnd> krb5_error_code code ; <S2SV_ModStart> = 0 ; ctx -> priv = ctx ;,0
450,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> bitmapDC = CreateCompatibleDC",1
451,<S2SV_ModStart> )!= START_CODE_PREFIX && ps_stream -> u4_offset < ps_stream -> u4_max_offset,0
452,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { ret = <S2SV_ModEnd> - EINVAL ; <S2SV_ModStart> - EINVAL ; goto out ; }",1
453,<S2SV_ModStart> ; if ( mono_class_has_generic_method ( klass ) &&,0
454,<S2SV_ModStart> ; int tmp ; if ( count > sizeof ( buf ) ) return - EINVAL,0
455,"<S2SV_ModStart> char * last_elem = NULL <S2SV_ModStart>, * wp <S2SV_ModEnd> ; do { <S2SV_ModStart> size_t len ; if ( l -> l_origin ) <S2SV_ModStart> == 'O' ) { last_elem = <S2SV_ModEnd> l -> l_origin <S2SV_ModStart> l -> l_origin ; } else if ( l -> l_origin ) { char * last_elem = l -> l_origin ; last_elem = l -> l_origin ; } else { const char * last_elem = l -> l_origin ; last_elem = l -> l_origin ; } <S2SV_ModEnd> if ( repl",0
456,<S2SV_ModStart> decContainer_t * ) H264SwDecCalloc <S2SV_ModEnd> ( sizeof (,0
457,<S2SV_ModStart> drop ; } <S2SV_ModEnd> opt -> optlen,0
458,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
459,"<S2SV_ModStart> goto errout ; memset ( info, 0, sizeof ( * info ) ) ;",0
460,<S2SV_ModStart> krb5_key_data * key_data ; if ( n_key_data == NULL ) return NULL <S2SV_ModStart> == NULL ) { err = ENOMEM ; <S2SV_ModStart> goto cleanup ; },0
461,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
462,<S2SV_ModStart> ] ) ; if ( nByte > 0 ) { <S2SV_ModStart> 1 ) ; },0
463,<S2SV_ModStart> filp ) { struct sock * sk = inode -> sock ; <S2SV_ModStart> ( inode ) ) ; sock_release ( sk,0
464,"<S2SV_ModStart> * orelse, string type_comment, <S2SV_ModStart>. orelse = type_comment <S2SV_ModEnd> ; p ->",0
465,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> MYISAM_EXPORTED,0
466,,0
467,"<S2SV_ModStart> UINT error ; UINT16 <S2SV_ModEnd> ( s, <S2SV_ModStart> eventId ) ; UINT32 <S2SV_ModEnd> ( s,",0
468,<S2SV_ModStart> pData -> socket <S2SV_ModEnd> ) ; if,0
469,"<S2SV_ModStart> struct flowi6 fl6 ; int ret <S2SV_ModStart> daddr ) ; ret = <S2SV_ModEnd> ip6_xmit ( sk <S2SV_ModStart> np -> tclass, & fl6 ) ; if ( ret < 0 ) goto out ; return ret <S2SV_ModEnd> ; } <S2SV_null>",0
470,<S2SV_ModStart> ; MATLAB_KO : if ( clone_info!= ( Image * ) NULL ),0
471,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> UINT32 failureCode ; if (! nego -> sendNegoData ) { WLog_ERR ( TAG, ""RDP_NEG_FAILURE"" ) ; return FALSE ; }",0
472,,0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,"<S2SV_ModStart> ( psf = safe_calloc <S2SV_ModEnd> ( 1,",0
475,"<S2SV_ModStart> void fix_interp_filter ( VP9_COMMON * cm, <S2SV_ModStart> cm ) { if ( cm -> interp_filter == SWITCHABLE ) return ;",0
476,"<S2SV_ModStart> ) { MACROBLOCK <S2SV_ModEnd> const x = <S2SV_ModStart> = 0 ; vpx_setup_src_planes <S2SV_ModEnd> ( x, <S2SV_ModStart> subsampling_y ) ; <S2SV_ModEnd> vpx_memset ( xd",0
477,"<S2SV_ModStart> hp ) ; if ( retval == 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; }",0
478,<S2SV_ModStart> define EOFOp 0x07 <S2SV_ModEnd> char magick [ <S2SV_ModStart> -> page. x <S2SV_ModEnd> = ReadBlobLSBShort ( <S2SV_ModStart> -> page. y <S2SV_ModEnd> = ReadBlobLSBShort ( <S2SV_ModStart> -> columns = ReadBlobLSBShort <S2SV_ModEnd> ( image ),0
479,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> sizeof ( tETH_HDR ),1
480,<S2SV_ModStart> ; ps_dec -> u4_slice_num = 0 ; ps_dec ->,0
481,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> * karg ; <S2SV_ModEnd> struct pci_dev * <S2SV_ModStart> karg ) ; <S2SV_ModEnd> if ( (",0
482,<S2SV_ModStart> ) AcquireQuantumMemory ( ( size_t ),0
483,"<S2SV_ModStart> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", <S2SV_ModEnd> argv ) ; <S2SV_ModStart> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", <S2SV_ModEnd> argv ) ;",0
484,<S2SV_ModStart> ; if ( <S2SV_ModEnd> datao + 12 <S2SV_ModStart> ; if ( <S2SV_ModEnd> datao + 2 <S2SV_ModStart> + 2 < <S2SV_ModEnd> datao ) || <S2SV_ModStart> ; if ( <S2SV_ModEnd> datao + 2 <S2SV_ModStart> + 2 < <S2SV_ModEnd> datao ) || <S2SV_ModStart> ; if ( <S2SV_ModEnd> datao + 2 <S2SV_ModStart> + 2 < <S2SV_ModEnd> datao ) {,0
485,,0
486,<S2SV_ModStart> void ) { if (! service_options ) return ; <S2SV_ModStart>. next ; if (! service_options ) return ; <S2SV_ModStart> 0 ; } <S2SV_ModEnd> s_log ( LOG_DEBUG <S2SV_ModStart> servname ) ; <S2SV_ModEnd> } CRYPTO_THREAD_unlock (,0
487,<S2SV_ModStart> void ) { recovery_delete_character ( ) ;,0
488,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) )",0
489,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
490,,0
491,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char * print_object <S2SV_ModStart> = 0 ; char * * entries = 0, * * names = 0 ; <S2SV_ModStart> child ) { entries [ i ] = str = print_string_ptr ( child -> string ) ; entries [ i ++ ] = ret = print_value ( child, depth, fmt ) ; if ( str && ret ) len += strlen ( ret ) ; if ( str && ret ) len += strlen ( ret ) ; if ( str && ret ) len += strlen ( ret ) ; if ( str && ret ) len += strlen ( ret ) ; if ( str && ret ) len += strlen ( ret ) ; if ( str && ret ) len += strlen ( ret ) ; if ( str && ret ) len += strlen ( ret ) ; if ( str && ret ) len += strlen ( ret ) ; if ( str && ret ) len += strlen ( ret ) len += strlen ( ret ) ; if ( str && ret ) len += strlen ( ret ) ; if ( str && ret ) len += strlen ( ret ) len += strlen (",0
492,<S2SV_ModStart> sk ) ; other = unix_peer_get ( sk ) ; <S2SV_ModStart> ( other ) <S2SV_ModEnd>!= sk ) <S2SV_ModStart> wait ) ; <S2SV_ModEnd> writable = 0 <S2SV_ModStart> = 0 ; <S2SV_ModEnd> sock_put ( other,0
493,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; sendClean ( outputbuffer ) ;",0
494,<S2SV_ModStart> ( OM_uint32 ) KRB5_BAD_MSIZE <S2SV_ModEnd> ; return GSS_S_DEFECTIVE_TOKEN,0
495,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vp9_ref_frame_t * ) ; ( void ) ctx",0
496,<S2SV_ModStart> plug ) ; <S2SV_ModEnd> put_ioctx ( ctx,0
497,"<S2SV_ModStart> * info, <S2SV_ModEnd> int rep_quick ) <S2SV_ModStart> ( ""- <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", share -> pack. header_length <S2SV_ModEnd> ) ; printf",0
498,"<S2SV_ModStart> s } ; <S2SV_ModEnd> uECC_word_t * p <S2SV_ModStart> curve ) ; if ( uECC_vli_isZero ( p, curve ) ) { return 0 ; }",0
499,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|dao-truncated]"" <S2SV_ModEnd> ) ) ;",0
500,<S2SV_ModStart> ; } else if ( pool -> free_total > 0 ) <S2SV_ModStart> ; } } else { free ( buf ) ; },0
501,,0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
503,"<S2SV_ModStart> PIX * pixc = pixFewColorsOctcubeQuant1 <S2SV_ModEnd> ( pixs, <S2SV_ModStart> == NULL ) { if ( pixc ) <S2SV_ModStart> NULL ) ; }",0
504,"<S2SV_ModStart> = 256 ; memset ( v_fn_ptr, 0, sizeof ( vp8_mse16x16 ) ) ;",0
505,<S2SV_ModStart> + 1 ; size_t <S2SV_ModEnd> size = overhead,0
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NEGO_STATE_FAIL ; return ;,0
507,"<S2SV_ModStart> i, target_bits_per_mb <S2SV_ModEnd> ; target_bits_per_mb = <S2SV_ModStart> ( int ) vpx_rc_bits_per_mb <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ; if ( target_bits_per_mb <S2SV_ModEnd> <= target_bits_per_mb ) <S2SV_ModStart> active_worst_quality ) ; return 0 ;",0
508,<S2SV_ModStart> ; value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1101WritePhyReg (,0
509,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
510,"<S2SV_ModStart> int dst_stride, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart>, left_col, PREDICTION_MODE <S2SV_ModEnd> ) ; DECLARE_ALIGNED_ARRAY <S2SV_ModStart> + y ; PREDICTION_MODE <S2SV_ModEnd> ( left_col, <S2SV_ModStart> + y ; PREDICTION_MODE <S2SV_ModEnd> ( left_col,",0
511,<S2SV_ModStart> ++ ; } if ( end < end ) end ++ ;,0
512,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_cached_lock ) ;,0
513,,0
514,"<S2SV_ModStart> ; if ( <S2SV_ModEnd>! ( ""no-graph""",0
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { q = osStrchr <S2SV_ModEnd> ( p +,1
516,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
517,<S2SV_ModStart> KEY_FRAME ) { memcpy <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memcpy <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memcpy <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( xd ->,0
518,"<S2SV_ModStart> error_t error ; uint16_t <S2SV_ModEnd> n ; uint32_t <S2SV_ModStart> ; uint32_t status <S2SV_ModEnd> ; enc624j600Context * <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ERXRDPT <S2SV_ModEnd> ) { enc624j600ReadBuffer <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_ERXDATA <S2SV_ModEnd>, ( uint16_t <S2SV_ModStart> ( interface, ENC624J600_ERXDATA <S2SV_ModEnd>, ( uint16_t <S2SV_ModStart> ( interface, ENC624J600_ERXDATA <S2SV_ModEnd>, ( uint16_t <S2SV_ModStart> ( interface, ENC624J600_ERXDATA <S2SV_ModEnd>, ( uint16_t <S2SV_ModStart> ( interface, ENC624J600_ERXDATA <S2SV_ModEnd>, ( uint16_t <S2SV_ModStart> ( interface, ENC624J600_ERXDATA <S2SV_ModEnd>, ( uint16_t <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL, ENC",0
519,"<S2SV_ModStart> VALUE read_memory ( VALUE klass, VALUE <S2SV_ModEnd> content ) { <S2SV_ModStart> content ) ) <S2SV_ModEnd> ; VALUE errors",0
520,"<S2SV_ModStart> ( LOG_ERR, ""%s"", <S2SV_ModStart> ( LOG_ERR, ""%s"",",0
521,<S2SV_ModStart> 2 ] ; <S2SV_ModEnd> } state -> <S2SV_ModStart> 2 ] ; <S2SV_ModEnd> } state ->,0
522,<S2SV_ModStart> err = - EINVAL <S2SV_ModEnd> ; if (,0
523,<S2SV_ModStart> POLL_IN ) ; <S2SV_ModEnd> perf_event_wakeup ( handle <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
524,,0
525,"<S2SV_ModStart> { print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" <S2SV_ModEnd> ) ; if",0
526,,0
527,"<S2SV_ModStart> * n, const <S2SV_ModStart> is_async ) { const <S2SV_ModStart> is_async ) { const <S2SV_ModStart> is_async ) { const <S2SV_ModStart> return NULL ; const <S2SV_ModStart> return NULL ; }",0
528,<S2SV_ModStart> int i ; spin_lock_irq ( & mm -> lock ) ; <S2SV_ModStart> : flush_tlb ( mm,0
529,,0
530,,0
531,<S2SV_ModStart> ; row < raw_height <S2SV_ModEnd> ; row ++ <S2SV_ModStart> ; row < raw_height <S2SV_ModEnd> ; row ++ <S2SV_ModStart> ; if ( row < raw_height <S2SV_ModEnd> )derror (,0
532,<S2SV_ModStart> ; if (! nl ) return - EINVAL ; if (,0
533,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( quantum_info!= ( quantum_info * ) NULL )",0
534,<S2SV_ModStart> ( bfqq ) __bfq_idle_slice_timer_body <S2SV_ModEnd> ( bfqq ),0
535,<S2SV_ModStart> ; length += <S2SV_ModEnd> update_prepare_bounds ( context,0
536,,0
537,"<S2SV_ModStart> int plane ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
538,"<S2SV_ModStart> * cpi, TileData * tile_data <S2SV_ModEnd>, int mi_row <S2SV_ModStart> ( cpi, tile_data <S2SV_ModEnd>, mi_row, <S2SV_ModStart>, x, tile_data <S2SV_ModEnd>, mi_row,",0
539,<S2SV_ModStart> * err = mysofa_load <S2SV_ModEnd> ( & reader,0
540,<S2SV_ModStart> -> ranges = safe_calloc <S2SV_ModEnd> ( sizeof (,0
541,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flags & VP8_EFLAG_NO_UPD_GF <S2SV_ModStart> flags & VP8_EFLAG_FORCE_GF <S2SV_ModEnd> ) { ctx,0
542,,0
543,<S2SV_ModStart>! head ) <S2SV_ModEnd> return - EINVAL <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
544,"<S2SV_ModStart> * pptr, u_int <S2SV_ModEnd> len ) { <S2SV_ModStart> advance ; u_int <S2SV_ModEnd> tlen ; const",0
545,,0
546,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
547,"<S2SV_ModStart> ( tokbuf, ""%s"",",0
548,"<S2SV_ModStart> iad_num ) ; if ( iad_num < 0 ) { dev_err ( ddev, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d\\n"", iad_num ) ; return - EINVAL ; }",0
549,"<S2SV_ModStart> 0, 0 <S2SV_ModEnd> ) ; if",0
550,<S2SV_ModStart> ; distortion = vpx_variance16x16 <S2SV_ModEnd> ( * (,1
551,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface",0
552,<S2SV_ModStart> ; maxlen = ( int ) <S2SV_ModStart> ; start = ( int ) <S2SV_ModStart> ; maxlen = ( int ),0
553,<S2SV_ModStart> ; else { <S2SV_ModEnd> ctx -> iface <S2SV_ModStart> priv -> alg_priv = NULL ; if ( ctx -> priv -> alg_priv ) ctx -> iface -> destroy ( ctx -> priv -> alg_priv,0
554,,0
555,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> - 1 ) ),0
556,<S2SV_ModStart> + 2 * L -> stacksize <S2SV_ModEnd> ; if (,0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,,0
559,<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> break ; } <S2SV_ModEnd> if ( strcmp <S2SV_ModStart> ) break ; <S2SV_ModEnd> SvcInternal * const <S2SV_ModStart> ) break ; <S2SV_ModEnd> SvcInternal * const,0
560,<S2SV_ModStart> ) ; } fclose ( mvs ) ;,0
561,<S2SV_ModStart> self ) { size_t <S2SV_ModEnd> i ; PyObject,1
562,,1
563,"<S2SV_ModStart> ( dbh, mysql_error <S2SV_ModEnd> ( imp_dbh -> <S2SV_ModStart> pmysql ), mysql_error <S2SV_ModEnd> ( imp_dbh ->",0
564,"<S2SV_ModStart> ) || ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & size ) <S2SV_ModStart> ( need_close || TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & size )",0
565,<S2SV_ModStart> struct ieee_802_11_phdr phdr = { 0 },0
566,<S2SV_ModStart> ; sh = safe_calloc <S2SV_ModEnd> ( hdrlen +,0
567,,0
568,<S2SV_ModStart> ERR_PTR ( - EINVAL <S2SV_ModEnd> ) ; *,0
569,,0
570,"<S2SV_ModStart> TX_MODE read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r )",1
571,"<S2SV_ModStart> : # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> } # line 1045 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 101 <S2SV_ModEnd> ""re_grammar.y"" {",0
572,,0
573,<S2SV_ModStart> pSelect -> pSrc ; assert ( pSelect -> nSrc > 0 ),0
574,"<S2SV_ModStart>, NFS4_CALLBACK_BUFSIZE, sizeof ( * serv ) <S2SV_ModEnd> ) ; if",0
575,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
576,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
577,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
578,"<S2SV_ModStart> do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> s, 0 )",1
579,,0
580,<S2SV_ModStart> <S2SV_null> static const SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> return ( const SvcInternal_t <S2SV_ModEnd> * ) svc_ctx,1
581,,0
582,<S2SV_ModStart> char buffer [ 80 <S2SV_ModEnd> ] ; int <S2SV_ModStart> -> vpx_fmt = VPX_IMG_FMT_I420 <S2SV_ModEnd> ; _y4m ->,0
583,"<S2SV_ModStart> * otmp = readobj <S2SV_ModEnd> ( buf,",0
584,"<S2SV_ModStart> long long directory_table_end = 0, table_start = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == 0 ) { <S2SV_ModStart> return FALSE ; } <S2SV_ModStart> == 0 ) { <S2SV_ModStart> return FALSE ; } <S2SV_ModStart> == 0 ) { <S2SV_ModStart> return FALSE ; } <S2SV_ModStart> == 0 ) { <S2SV_ModStart> return FALSE ; }",0
585,"<S2SV_ModStart> rule * rule, u_int flags <S2SV_ModStart> count = 0 ; env -> flags &= ~ IOPENV <S2SV_ModStart> ; } } env -> flags &= ~ IOPENV ;",0
586,,0
587,"<S2SV_ModStart>, Module_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, mod_type, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Expression_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, ClassDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Delete_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Delete_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Delete_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Delete_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Delete_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Delete_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Delete_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Delete_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Delete_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Delete_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Delete_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Delete_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Delete_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Delete_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Delete_fields, 0",0
588,"<S2SV_ModStart> } logfile_fd = fopen <S2SV_ModEnd> ( log_path, <S2SV_ModStart> return ; } fclose <S2SV_ModEnd> ( logfile_fd,",0
589,<S2SV_ModStart> ) ; } <S2SV_ModEnd> ++ x ->,0
590,,0
591,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; if ( lookup_attr",0
592,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
593,"<S2SV_ModStart> int err ; struct nfp_abm_u32_match * match ; <S2SV_ModStart> ) goto err_delete ; match = kzalloc ( sizeof ( * match ), GFP_KERNEL ) <S2SV_ModStart>! match ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; <S2SV_ModStart> - ENOMEM ; } <S2SV_ModStart> -> dscp_map ) ; kfree ( match )",0
594,<S2SV_ModStart> ) ; } if ( pass ) { <S2SV_ModStart> ; if ( <S2SV_ModEnd> stream -> cx_time <S2SV_ModStart> stats ) ; },0
595,,0
596,<S2SV_ModStart> data_end ) { <S2SV_ModEnd> assert ( tile_rows <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> aligned_cols ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm ->,0
597,<S2SV_ModStart> vp9_decoder_create ( const VP9D_CONFIG <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> vp9_decoder_create ( const VP9D_CONFIG <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> = 1 ; vpx_initialize_dec <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ) ) ; vpx_init_dequantizer <S2SV_ModEnd> ( cm ) <S2SV_ModStart> cm ) ; <S2SV_ModEnd> return pbi ;,0
598,<S2SV_ModStart> dref ) { if (! ( ( GF_DataInformationBox * ) s ) -> dref ) { <S2SV_ModStart> ) ) ; },0
599,"<S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> ; opt = rcu_dereference_protected ( <S2SV_ModStart> req_inet -> opt, & opt )",0
600,"<S2SV_ModStart> tree2tok ( struct vpx_token <S2SV_ModEnd> * tokens, <S2SV_ModStart> tokens, const vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> do { const vpx_tree_index <S2SV_ModEnd> j = tree",0
601,"<S2SV_ModStart> = VPX_CODEC_OK ; <S2SV_ModEnd> res = validate_img <S2SV_ModStart>, img ) ; if ( res ) res = validate_img ( ctx, img )",0
602,"<S2SV_ModStart>, & len, 0",1
603,,0
604,<S2SV_ModStart> int frame_max_bits ( <S2SV_ModEnd> RATE_CONTROL * rc <S2SV_ModStart> oxcf ) { const RATE_CONTROL * oxcf = ( RATE_CONTROL * ) oxcf ;,0
605,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
606,,0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> = x ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
608,"<S2SV_ModStart> range_max ) { int <S2SV_ModEnd> value ; int <S2SV_ModStart> gbc ) ; int <S2SV_ModEnd> i, j <S2SV_ModStart> { if ( get_bits_left <S2SV_ModEnd> ( gbc ) <S2SV_ModStart> } if ( get_bits_left <S2SV_ModEnd> ( gbc ) <S2SV_ModStart> } if ( get_bits_left <S2SV_ModEnd> ( gbc ) <S2SV_ModStart> gbc ) ) return AVERROR_INVALIDDATA ; if ( get_bits_left <S2SV_ModEnd> ( gbc ) <S2SV_ModStart> gbc ) ) return AVERROR_INVALIDDATA ; <S2SV_ModEnd> bits [ i <S2SV_ModStart> = '1' ; <S2SV_ModEnd> } if ( <S2SV_ModStart> j ++ ) return AVERROR_INVALIDDATA ; if ( get_bits_left ( gbc ) < zeroes ) return AVERROR_INVALIDDATA ; if ( get_bits_left ( gbc ) < zeroes ) return AVERROR_INVALIDDATA ; if ( get_bits_left ( gbc ) < zeroes ) return AVERROR_INVALIDDATA ; if ( get_bits_left ( gbc ) < zeroes ) return AVERROR_INVALIDDATA ; if ( get_bits_left ( gbc ) < zeroes ) return",0
609,<S2SV_ModStart> else if (! <S2SV_ModStart> else if (! <S2SV_ModStart> else if (! <S2SV_ModStart> else if (!,0
610,"<S2SV_ModStart>, packet -> http_content_type. ptr = NULL, packet ->",0
611,"<S2SV_ModStart>, y, ( ssize_t ) <S2SV_ModStart>, dds_info, ( ssize_t )",0
612,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL ) <S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL )",1
613,<S2SV_ModStart> action ) { ( void ) w ;,0
614,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; sendClean ( outputbuffer ) ;",1
615,"<S2SV_ModStart> return FALSE ; if ( rdp -> autodetect -> bandwidthMeasureTimeDelta > 0 ) { <S2SV_ModStart> ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" ) ; }",0
616,,0
617,<S2SV_ModStart> # if CONFIG_MULTITHREAD <S2SV_ModEnd> vp8_decoder_remove_threads ( pbi,1
618,,0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,,0
621,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
622,"<S2SV_ModStart> tx_size, vpx_coeff_stats <S2SV_ModEnd> coef_branch_ct ) { <S2SV_ModStart> tx_size ] ; vpx_coeff_probs_model <S2SV_ModEnd> * coef_counts =",0
623,<S2SV_ModStart> { } ; if ( utf8 ) { <S2SV_ModStart> name ) ; },0
624,,0
625,"<S2SV_ModStart> * iface, vpx_codec_enc_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> else if ( <S2SV_ModEnd> flags & VPX_CODEC_USE_XMA <S2SV_ModStart> flags & VPX_CODEC_USE_PSNR <S2SV_ModEnd> ) res =",0
626,,0
627,<S2SV_ModStart> = TRUE ; <S2SV_ModEnd> bufp = find_optparam,0
628,,0
629,,0
630,<S2SV_ModStart> * 0x101 ; if ( len < 4 ) return ; <S2SV_ModStart> + 8 ; if ( len < 4 ) return ; <S2SV_ModStart> case 0x505244 : if ( len < 4 ) return ;,0
631,,0
632,<S2SV_ModStart> -> error_code ) { <S2SV_ModStart> detail : NULL ; },0
633,<S2SV_ModStart> pocstruct_t * ps_prev_poc <S2SV_ModEnd> ; ih264d_free_dynamic_bufs ( <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
634,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet ),0
635,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int getnum (,0
636,<S2SV_ModStart> GCSpropagate ) ; g -> gcstate = GCSpropagate ;,0
637,<S2SV_ModStart> 0 ; else { kfree ( buf ) ; <S2SV_ModStart> - EIO ; },0
638,<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart>! PROTOCOL_EARLY ) { return NULL ; } <S2SV_ModEnd> memset ( buffer <S2SV_ModStart> buffer ) ; <S2SV_ModEnd> s_write ( c,0
639,"<S2SV_ModStart> cib, struct sockaddr_in <S2SV_ModEnd> * connection ) <S2SV_ModStart> struct sockaddr_in addr <S2SV_ModEnd> ; int ret_ga <S2SV_ModStart> = 0 ; int ret_ga ; struct addrinfo hints ; xmlNode * answer = NULL ; xmlNode * answer = NULL ; struct addrinfo hints ; xmlNode * answer = NULL ; xmlNode * answer = NULL ; xmlNode * answer = NULL ; xmlNode * answer = NULL ; xmlNode * answer = NULL ; xmlNode * answer = NULL ; xmlNode * answer = NULL ; xmlNode * answer = NULL ; xmlNode * answer = NULL ; xmlNode * answer = NULL ; xmlNode * answer = NULL ; xmlNode * answer = NULL ; xmlNode * answer = NULL ; connection -> session = NULL ; connection -> session = NULL ; connection -> session = NULL ; connection -> session = NULL ; connection -> session = NULL ; connection -> session = NULL ; connection -> session = NULL ; connection -> session = NULL ; connection -> session = NULL ; connection -> session = NULL ; connection -> session = NULL ; connection -> session = NULL ; connection -> session = NULL ; connection -> session = NULL ; connection -> session = NULL ; connection -> session = NULL ; connection -> session = NULL ; connection ->",0
640,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi,",0
641,<S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( & bp [ 8 ] ) ;,0
642,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command",0
643,"<S2SV_ModStart> Image * image <S2SV_ModEnd> ; assert ( <S2SV_ModStart> height, length <S2SV_ModEnd> ; assert ( <S2SV_ModStart> ) break ; if ( length > MaxTextExtent ) { image = DestroyImageList ( image ) ; return ( DestroyImageList ( image ) ) ; }",0
644,"<S2SV_ModStart> jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC <S2SV_blank> marker\\n"" <S2SV_ModEnd> ) ; return",0
645,,0
646,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> - m + vpx_read_bit <S2SV_ModEnd> ( r )",1
647,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
648,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> ( REFERENCE_MODE ) vpx_read <S2SV_ModEnd> ( r,",0
649,,0
650,,0
651,<S2SV_ModStart> re_ast ) -> root_node = NULL ; ( * re_ast ) ->,0
652,"<S2SV_ModStart> ( path, iter -> var_expand_table <S2SV_ModEnd>, & error <S2SV_ModStart> 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value <S2SV_ModEnd>, & error",0
653,<S2SV_ModStart> ; tok -> type_comment = 0 ; tok ->,0
654,<S2SV_ModStart> maxBitrate ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
655,<S2SV_ModStart> dpbSize ) ; if ( picSizeInMbs > dpbSize ) { return ( MEMORY_ALLOCATION_ERROR ) ; },0
656,<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_in = 0 ; <S2SV_ModStart> (! sock || addrlen ) OE_RAISE_ERRNO ( OE_EINVAL ) ; addrlen_in = * addrlen ; if ( addrlen_in > sizeof ( struct oe_sockaddr_storage ) ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_in > sizeof ( struct oe_sockaddr_storage ) ) OE_RAISE_ERRNO ( OE_EINVAL ) ; addrlen_in = sizeof ( struct oe_sockaddr_storage ) ; if ( addrlen_in > sizeof ( struct oe_sockaddr_storage ) ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_in > sizeof ( struct oe_sockaddr_storage ) ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen_in > sizeof ( struct oe_sockaddr_storage ) OE_RAISE_ERRNO ( O,0
657,,1
658,"<S2SV_ModStart> FALSE ; } if (! <S2SV_ModStart>, s ) ) return FALSE",1
659,,0
660,,0
661,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, EPCR_EPOS | <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPOS <S2SV_ModEnd> ) & EPCR_ERPRR <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPOS <S2SV_ModEnd> ) & EPCR_ERPRR <S2SV_ModStart> } dm9000WriteReg ( DM9000_EPOS <S2SV_ModEnd>, EPCR_EPOS )",0
662,,0
663,<S2SV_ModStart> ; msg. msg_namelen = sizeof ( struct sockaddr_storage <S2SV_ModEnd> ) ; if,0
664,,0
665,"<S2SV_ModStart> -> size ; if ( h -> size > 0 ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> too <S2SV_blank> large"", filename ) ; goto error ; }",0
666,<S2SV_ModStart> = ( child <S2SV_ModEnd> -> of_limit ==,0
667,,0
668,,0
669,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
670,"<S2SV_ModStart> * client = NULL <S2SV_ModEnd> ; if ( <S2SV_ModStart> num_clients ) ; <S2SV_ModEnd> crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client""",0
671,<S2SV_ModStart> * uv ; <S2SV_ModEnd> for ( uv <S2SV_ModStart> next ) { * p = thread -> twups ;,0
