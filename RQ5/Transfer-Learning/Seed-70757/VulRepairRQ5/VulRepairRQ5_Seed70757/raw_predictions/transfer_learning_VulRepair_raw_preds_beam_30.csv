,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
1,<S2SV_ModStart> ; if ( unlikely ( unfrag_ip6hlen < 0 ) ) return ERR_PTR ( unfrag_ip6hlen ) ; if (,0
2,"<S2SV_ModStart>, 0 ) ; if ( writer -> stco && writer -> stsc ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_MODULE, ( ""[TrackWriter] <S2SV_blank> cleaning <S2SV_blank> writer <S2SV_blank> %p <S2SV_blank> stco <S2SV_blank> %p <S2SV_blank> stsc <S2SV_blank> %p\\n"", writer, writer -> stco, writer -> stsc ) ) ; } if ( writer -> stco && writer -> stsc ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_MODULE, ( ""[TrackWriter] <S2SV_blank> cleaning <S2SV_blank> writer <S2SV_blank> %p <S2SV_blank> stco <S2SV_blank> %p <S2SV_blank> stsc <S2SV_blank> %p\\n"", writer, writer -> stco, writer -> stsc ) ) ; } if ( writer -> stco && writer -> stsc ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_MODULE, ( ""[TrackWriter] <S2SV_blank> cleaning <S2SV_blank> writer <S2SV_blank> %p <S2SV_blank> stco <S2SV_blank> %p <S2SV_blank> stsc <S2SV_blank> %p\\n"", writer, writer -> stco, writer -> stsc ) ) ; } if ( writer -> stsc ) { GF_LOG ( GF_LOG_ERROR, G",0
3,<S2SV_ModStart> c = array? array -> child : NULL <S2SV_ModEnd> ; while ( <S2SV_ModStart> while ( c ) { if ( <S2SV_ModEnd> item > 0 <S2SV_ModStart> > 0 ) return c ; <S2SV_ModEnd> c = c <S2SV_ModStart> -> next ; <S2SV_ModEnd> return c ;,0
4,"<S2SV_ModStart> u64 nr, <S2SV_ModEnd> struct pt_regs * <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",1
5,"<S2SV_ModStart> EXT4_EXTENTS_FLAG ) { char * buf ; struct grub_ext4_extent_header * leaf ; int i ; leaf = grub_ext4_find_leaf ( data, buf, ( struct grub_ext4_extent_header * ) inode -> blocks. dir_blocks, fileblock ) ; if (! leaf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) ( leaf + 1 ) ; for ( i = 0 ; i < grub_le_to_cpu16 ( leaf -> entries ) ; i ++ ) { if ( fileblock < grub_le_to_cpu32 ( ext [ i ]. block ) ) break ; } if ( fileblock >= grub_le_to_cpu16 ( ext [ i ]. len ) ) return 0 ; else { grub_disk_addr_t start ; start = grub_le_to_cpu16 ( ext [ i ]. start_hi ) ; start = ( start << 32 ) + grub_le_to_cpu32 (",0
6,"<S2SV_ModStart> fdct16 ( const tran_low_t <S2SV_ModEnd> in [ 16 <S2SV_ModStart> 16 ], tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> ] ) { tran_high_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step2 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step3 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> input [ 8 <S2SV_ModStart> ] ; { tran_high_t <S2SV_ModEnd> s0, s1 <S2SV_ModStart>, s7 ; tran_high_t <S2SV_ModEnd> t0, t1 <S2SV_ModStart>, t3 ; tran_high_t <S2SV_ModEnd> x0, x1",0
7,"<S2SV_ModStart> ( ) ; # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; # endif parse_ciff ( save + hlen, len - hlen, 0 ) ; } if ( parse_tiff ( save + 6 ) ) apply_tiff ( ) ; fseek ( ifp, save + len, SEEK_SET ) ; } return 1 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
8,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> search_filter_level ( const <S2SV_ModStart> search_filter_level ( const YV12_COMMON * const cm, struct loopfilter * lf <S2SV_ModEnd>, int partial_frame <S2SV_ModStart> partial_frame ) { <S2SV_ModEnd> const int min_filter_level <S2SV_ModStart> ) ; int best_err ; int filt_best ; int filt_direction = 0 ; int filt_mid = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; int ss_err [ MAX_LOOP_FILTER + 1 ] ; vpx_yv12_copy_y ( cm -> frame_to_show, & cpi -> last_frame_uf ) ; best_err = try_filter_frame ( sd, cpi, filt_mid, partial_frame ) ; filt_best = filt_mid ; ss_err [ filt_mid ] = best_err ; while ( filter_step > 0 ) { const int filt_high = MIN ( filt_mid + filter_step, max_filter_level ) ; const int filt_low = MAX ( filt_mid - filter_step, min_filter",0
9,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
10,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ++ i ) vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( usehp ) vpx_write <S2SV_ModEnd> ( w,",1
11,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } else { <S2SV_ModEnd> request -> rxBlockSzx <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; } <S2SV_ModStart> ( ) ) { <S2SV_ModStart> ( ) ; },1
12,"<S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; }",0
13,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> construct_get_dest_keyring ( struct <S2SV_ModStart> * authkey ; int ret ; <S2SV_ModStart> dest_keyring ) ; ret = wait_for_key_construction ( dest_keyring, & authkey -> sem ) ; if ( ret < 0 ) { key_put ( dest_keyring ) ; return ret ; } <S2SV_ModStart> ( dest_keyring ) { ret = wait_for_key_construction ( dest_keyring, & authkey -> sem ) ; if ( ret < 0 ) { key_put ( dest_keyring ) ; return ret ; } ret = wait_for_key_construction ( dest_keyring, & authkey -> sem ) ; if ( ret < 0 ) { key_put ( dest_keyring ) ; return ret ; } ret = wait_for_key_construction ( dest_keyring, & authkey -> sem ) ; if ( ret < 0 ) { key_put ( dest_keyring ) ; return ret ; } ret = wait_for_key_construction ( dest_keyring, & authkey -> sem ) ; if ( ret <",0
14,"<S2SV_ModStart> = create_spnego_ctx ( ) ; if ( sc == NULL ) return GSS_S_FAILURE ; ret = get_negotiable_mechs ( minor_status, spcred, GSS_C_INITIATE, & sc -> mech_set ) ; if ( ret!= GSS_S_COMPLETE ) goto cleanup ; sc -> internal_mech = & sc -> mech_set -> elements [ 0 ] ; if ( put_mech_set ( sc -> mech_set, & sc -> DER_mechTypes ) < 0 ) { ret = GSS_S_FAILURE ; goto cleanup ; } sc -> ctx_handle = GSS_C_NO_CONTEXT ; * ctx = ( gss_ctx_id_t ) sc ; sc = NULL ; * tokflag = INIT_TOKEN_SEND ; ret = GSS_S_CONTINUE_NEEDED ; cleanup : release_spnego_ctx ( & sc",0
15,<S2SV_ModStart> ; tm = localtime_r <S2SV_ModEnd> ( & t,0
16,<S2SV_ModStart> length ) ; if ( strlen ( password )!= 0 ) { <S2SV_ModStart> ) ) ; },0
17,"<S2SV_ModStart> == p ) { if ( buflen < 1 ) { * errnop = ERANGE ; return NSS_STATUS_TRYAGAIN ; } <S2SV_ModStart> ) goto not_found ; } if ( e - p > HOST_NAME_MAX - 1 ) { * errnop = ERANGE ; return NSS_STATUS_TRYAGAIN ; } r = parse_uid ( e + 1, & uid ) ; if ( r < 0 ) goto not_found ; machine = strndupa ( p, e - p ) ; if (! machine_name_is_valid ( machine ) ) { if ( sd_bus_error_has_name ( & error, BUS_ERROR_NO_SUCH_USER_MAPPING ) ) goto not_found ; goto fail ; } r = sd_bus_message_read ( reply, ""u"", & mapped ) ; if ( r < 0 ) { if ( sd_bus_error_has_name ( & error, BUS_ERROR_NO_SUCH_USER_MAPPING ) ) goto not_found ; goto fail ; } memcpy ( buffer, name, l + 1 ) ; pwd -> pw_name = buffer ; pwd ->",0
18,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",1
19,<S2SV_ModStart> = 0 ; if (! <S2SV_ModStart> & timeout ) ) return false,0
20,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> detect_transition_to_still ( struct <S2SV_ModStart> last_decay_rate ) { bool trans_to_still = false <S2SV_ModEnd> ; if ( <S2SV_ModStart> int j ; <S2SV_ModEnd> FIRSTPASS_STATS tmp_next_frame ; <S2SV_ModStart> { if ( <S2SV_ModEnd> tmp_next_frame. pcnt_inter <S2SV_ModStart> tmp_next_frame. pcnt_motion <= <S2SV_ModEnd> 0.999 ) break <S2SV_ModStart> break ; } if ( <S2SV_ModStart> twopass, position ) ) trans_to_still = true <S2SV_ModEnd> ; } return <S2SV_ModStart> ; } return true <S2SV_ModEnd> ; } <S2SV_null>",0
21,"<S2SV_ModStart> inode ) ) { if ( offset + size > i_size_read ( inode ) ) { printk ( KERN_EMERG ""%s: <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, ret, inode -> i_ino ) ; return ret ; } <S2SV_ModStart> size ) ; }",0
22,"<S2SV_ModStart> alg ) { if (! try_module_get <S2SV_ModEnd> ( ""%s"", <S2SV_ModStart> ""%s"", name ) ) return ERR_PTR ( - EBUSY <S2SV_ModStart> CRYPTO_ALG_NEED_FALLBACK ) ) if (! try_module_get <S2SV_ModEnd> ( ""%s-all"", <S2SV_ModStart> ""%s-all"", name ) ) return ERR_PTR ( - EBUSY",0
23,"<S2SV_ModStart> = GIT_PKT_NG ; if ( len < 3 ) goto out_err ; <S2SV_ModStart> += 3 ; <S2SV_ModEnd> ptr = strchr <S2SV_ModStart>,'<S2SV_blank>') ; if (! ptr ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> ref = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> ref ) ; memcpy ( pkt -> ref, line, len ) ; pkt -> ref [ len ] = '\\0' ; line = ptr + 3 <S2SV_ModEnd> ; if ( <S2SV_ModStart> + 1 ; <S2SV_ModEnd> ptr = strchr <S2SV_ModStart>, '\\n' ) ; if (! ptr ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> msg = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> msg ) ; memcpy ( pkt -> msg, line, len ) ; pkt -> msg [ len ] = '\\0' ; <S2SV_ModEnd> * out =",0
24,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> BYTE flags ; UINT32 <S2SV_ModEnd> length ; Stream_Read_UINT32,0
25,<S2SV_ModStart> ) ) { if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; <S2SV_ModStart> ) ) { if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; <S2SV_ModStart> ) ) { if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; <S2SV_ModStart> ) ) { if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; <S2SV_ModStart> ) ) { if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; <S2SV_ModStart> ) ) { if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; <S2SV_ModStart> ) ) { if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; <S2SV_ModStart> ) ) { if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; <S2SV_ModStart> ) ) { if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ;,0
26,"<S2SV_ModStart> mntent, path, rootfs",1
27,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } io -> io_cleanup = mem_cleanup ;,1
28,"<S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> pixel & ( MagickRealType ) ( value + 0.5 ) ) ) ; break ; } case CosineEvaluateOperator : { result = ( MagickRealType ) ( QuantumRange * ( 0.5 * cos ( ( double ) ( 2.0 * MagickPI * QuantumScale * pixel * value ) ) + 0.5 ) ) ; break ; } case DivideEvaluateOperator : { result = pixel / ( value == 0.0? 1.0 : value ) ) ; break ; } case GaussianNoiseEvaluateOperator : { result = ( MagickRealType ) ( QuantumRange * exp ( ( double ) ( value * QuantumScale * pixel ) ) ) ; break ; } case ImpulseNoiseEvaluateOperator : { result = ( MagickRealType ) GenerateDifferentialNoise ( random_info, pixel, ImpulseNoise, value ) ; break ; } case LaplacianNoiseEvaluateOperator : { result = ( MagickRealType ) GenerateDifferentialNoise ( random_info, pixel, LaplacianNoise, value ) ; break ; } case LogEvaluateOperator : { if (",0
29,"<S2SV_ModStart> ) ) ; ret &= btif_config_set_bdaddr ( bdstr, remote_bd_addr, bdstr, sizeof ( bdstr ) ) ;",0
30,<S2SV_ModStart> vpx_codec_enc_cfg_map_t * map ; if ( ( iface -> caps & VPX_CODEC_CAP_ENCODER ) && ( iface -> enc. cfg_maps == NULL ) ) return VPX_CODEC_INCAPABLE <S2SV_ModStart> = VPX_CODEC_INVALID_PARAM ; if ( <S2SV_ModEnd> iface -> enc <S2SV_ModStart> enc. cfg_maps ) { for ( map = iface -> enc. cfg_maps ; map -> usage >= 0 ; map ++ ) { if ( map -> usage == ( int ) usage ) { * cfg = map -> cfg ; cfg -> g_usage = usage ; res = VPX_CODEC_OK ; break ; } } } else { for ( map = iface -> enc. cfg_maps ; map -> usage >= 0 ; map ++ ) { if ( map -> usage == ( int ) usage ) { * cfg = map -> cfg ; cfg -> g_usage = usage ; res = VPX_CODEC_OK ; break ; } } } } else { res = VPX_CODEC_INVALID_PARAM,0
31,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
32,"<S2SV_ModStart> void show_progress ( <S2SV_ModEnd> uint64_t dx_time ) <S2SV_ModStart> dx_time ) { if ( dx_time > 100 ) { fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out, dx_time, ( double ) frame_out * 1000000.0 / ( double ) dx_time ) ; } else { fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out, dx_time, ( double ) frame_out * 1000000.0 / ( double ) dx_time ) ; }",0
33,"<S2SV_ModStart> -> pmysql ) { PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> server <S2SV_blank> side <S2SV_blank> prepare\\n"" ) ; <S2SV_ModStart> NULL ) ; } <S2SV_ModStart> -> pmysql ) { PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> server <S2SV_blank> side <S2SV_blank> prepare\\n"" ) ; <S2SV_ModStart> NULL ) ; } <S2SV_ModStart> -> pmysql ) { PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> server <S2SV_blank> side <S2SV_blank> prepare\\n"" ) ; <S2SV_ModStart> NULL ) ; } <S2SV_ModStart> -> pmysql ) { PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> server <S2SV_blank> side <S2SV_blank> prepare\\n"" ) ; <S2SV_ModStart> NULL ) ; } <S2SV_ModStart> -> pmysql ) { PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> server <S2SV_blank> side <S2SV_blank>",0
34,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_ETXSTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXSTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXRTS <S2SV_ModEnd>, ECON1_TXRTS )",0
35,"<S2SV_ModStart> value ) ; if ( o -> type_comment ) { value = ast2obj_string ( o -> type_comment ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_type_comment, value ) == - 1 ) goto failed ; Py_DECREF ( value ) ; }",0
36,"<S2SV_ModStart> ( page && access ( page, R_OK ) == 0 ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } } else if (! strcmp ( func, ""page/set"" ) ) { char * wikitext = NULL, * page = NULL ; if ( ( ( wikitext = http_request_param_get ( req, ""text"" ) )!= NULL ) && ( page = http_request_get_query_string ( req ) ) ) { file_write ( page, wikitext ) ; http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } } else if (! strcmp ( func, ""page/delete"" ) ) { char * page = http_request_param_get ( req, ""page"" ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page && unlink ( page ) > 0 ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return",0
37,"<S2SV_ModStart> low_var_thresh, int mb_rows, int mb_cols, <S2SV_ModEnd> double level = <S2SV_ModStart>.5 ) ; unsigned char * limits = cm -> pp_limits_buffer ; ; int mbr, mbc ; ( void ) post ; ( void ) low_var_thresh ; ( void ) flag ; vpx_memset ( limits, ( unsigned char ) ppl, 16 * mb_rows ) ; for ( mbr = 0 ; mbr < mb_rows ; mbr ++ ) { vp8_post_proc_down_and_across_mb_row ( source -> y_buffer + 16 * mbr * source -> y_stride, source -> y_buffer + 16 * mbr * source -> y_stride, source -> y_stride, source -> y_width, limits, 16 ) ; vp8_post_proc_down_and_across_mb_row ( source -> u_buffer + 8 * mbr * source -> uv_stride, source -> u_buffer + 8 * mbr * source -> uv_stride, source -> uv_stride, source -> uv_width, limits, 8 ) ; vp8_post_proc_down_",0
38,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; error = mb2_cache_entry_alloc ( ext4_mb_cache, GFP_NOFS, & ce ) ; if ( error ) { ea_bdebug ( bh, ""out <S2SV_blank> of <S2SV_blank> memory"" ) ; return ; } error = mb2_cache_entry_insert ( ce, bh -> b_bdev, bh -> b_blocknr, hash ) ; if ( error ) { ea_bdebug ( bh, ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; error = 0 ; } } else { ea_bdebug ( bh, ""inserting <S2SV_blank> [%x]"", ( int ) hash ) ; mb2_cache_entry_release ( ce ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
39,"<S2SV_ModStart> ) ) ; if (! <S2SV_ModEnd> r_socket_http_answer ( s <S2SV_ModStart>, rlen ) ) { free ( uri ) ; return NULL ; } return NULL",0
40,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( optlen && copy_from_user_rcu <S2SV_ModEnd> ( opt ->",0
41,"<S2SV_ModStart> ( ndo, ""[|truncated]"" <S2SV_ModEnd> ) ) ;",0
42,"<S2SV_ModStart> new_value_alloced ) { <S2SV_ModEnd> # ifdef FEAT_GUI <S2SV_ModStart> # ifdef FEAT_GUI if ( gui. in_use ) errmsg = ( char_u * ) N_ ( ""E531: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; else <S2SV_ModStart> # ifdef FEAT_GUI if ( gui. in_use ) errmsg = ( char_u * ) N_ ( ""E531: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; else <S2SV_ModStart> # ifdef FEAT_GUI if ( gui. in_use ) errmsg = ( char_u * ) N_ ( ""E531: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; else <S2SV_ModStart> # ifdef FEAT_GUI if ( gui. in_use ) errmsg = ( char_u * ) N_ ( ""E532: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; else <S2SV_ModStart> # ifdef FEAT_GUI if ( gui. in_use ) errmsg = ( char_u",0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode <S2SV_ModStart>, & new_mode, & acl ) ; if ( ret <S2SV_ModEnd> ) goto out",0
44,"<S2SV_ModStart> size_t size ; if ( width < 0 || height < 0 ) { goto error ; } if (! jas_safe_intfast32_add ( tlx, width, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ) { goto error ; } if (! ( cmpt = jas_malloc ( sizeof ( jas_image_cmpt_t ) ) ) ) { goto error ; } cmpt -> type_ = JAS_IMAGE_CT_UNKNOWN ; cmpt -> tlx_ = tlx ; cmpt -> tly_ = tly ; cmpt -> hstep_ = hstep ; cmpt -> vstep_ = vstep ; cmpt -> prec_ = depth ; cmpt -> sgnd_ = sgnd ; cmpt -> stream_ = 0 ; cmpt -> cps_ = ( depth + 7 ) / 8 ; if (! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ) { goto error ;",0
45,<S2SV_ModStart> == datalen ) <S2SV_ModEnd> goto next_op ; <S2SV_ModStart> goto next_op ; <S2SV_ModEnd> flags = 0 <S2SV_ModStart> & FLAG_MATCHED ) <S2SV_ModEnd> goto next_op ; <S2SV_ModStart> & FLAG_MATCHED ) <S2SV_ModEnd> goto next_op ; <S2SV_ModStart> & FLAG_MATCHED ) <S2SV_ModEnd> goto next_op ; <S2SV_ModStart> & FLAG_MATCHED ) <S2SV_ModEnd> goto next_op ; <S2SV_ModStart> & FLAG_MATCHED ) <S2SV_ModEnd> goto next_op ; <S2SV_ModStart> & FLAG_MATCHED ) <S2SV_ModEnd> goto next_op ; <S2SV_ModStart> & FLAG_MATCHED ) <S2SV_ModEnd> goto next_op ; <S2SV_ModStart> & FLAG_MATCHED ) <S2SV_ModEnd> goto next_op ; <S2SV_ModStart> & FLAG_MATCHED ) <S2SV_ModEnd> goto next_op ; <S2SV_ModStart> & FLAG_MATCHED ) <S2SV_ModEnd> goto next_op ; <S2SV_ModStart> & FLAG_MATCHED ) <S2SV_ModEnd> goto next_op ; <S2SV_ModStart> & FLAG_MATCHED ) <S2SV_ModEnd> goto next_op ; <S2SV_ModStart> & FLAG_MATCHED ) <S2SV_ModEnd> goto next_op ; <S2SV_ModStart> & FLAG_MATCHED ) <S2SV_ModEnd> goto next_op ; <S2SV_ModStart> & FLAG_MATCHED ) <S2SV_ModEnd> goto next_op ; <S2SV_ModStart> & FLAG_MATCHED ) <S2SV_ModEnd> goto next_op ; <S2SV_ModStart> & FLAG_MATCHED ),0
46,"<S2SV_ModStart> * req, u32 <S2SV_ModEnd> * acl_len ) <S2SV_ModStart> acl_len ) { <S2SV_ModEnd> uint32_t attrlen, <S2SV_ModStart> int status ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> xdr, OP_GETATTR ) )!= 0 ) goto out ; if ( ( status = decode_attr_bitmap ( xdr, bitmap ) )!= 0 ) goto out ; if ( ( status = decode_attr_length ( xdr, & attrlen, & savep ) )!= 0 ) goto out ; if ( unlikely ( bitmap [ 0 ] & FATTR4_WORD0_ACL ) ) { size_t hdrlen ; u32 recvd ; hdrlen = ( u8 * ) xdr -> p - ( u8 * ) iov -> iov_base ; recvd = req -> rq_rcv_buf. len - hdrlen ; if ( attrlen > recvd ) { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen, recvd ) ; return - EINVAL ; } xdr_read_pages ( x",0
47,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
48,"<S2SV_ModStart> ) ) { if ( ( <S2SV_ModStart> & tok ) ) == NULL ) { return MPR_ERR_BAD_SYNTAX ; } <S2SV_ModEnd> if ( owner <S2SV_ModStart> } group = stok ( tok, "":"", & perms ) ; if ( group && * group ) { if ( snumber ( group ) ) { gid = ( int ) stoi ( group ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { gid = HTTP -> gid ; } else { gid = groupToID ( group ) ; } } if ( perms && snumber ( perms ) ) { mode = ( int ) stoiradix ( perms, - 1, NULL ) ; } else { mode = 0 ; } if ( gid < 0 || uid < 0 ) { return MPR_ERR_BAD_SYNTAX ; } } else { dirs = auth ; auth = 0 ; } tok = dirs ; for ( tok = sclone ( dirs ) ; ( dir = stok ( tok, "","", & tok ) )!= 0 ; ) { path = httpMakePath ( state -> route, state -> configDir, dir ) ; if ( mprGetPathInfo ( path, & info ) == 0 && info. isDir ) {",0
49,"<S2SV_ModStart> = NULL ; int number_aau ; <S2SV_ModStart> # if CONFIG_MEM_MANAGER <S2SV_ModEnd> number_aau = ( <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; if ( addr ) { x = align_addr ( ( unsigned char * ) addr + ADDRESS_STORAGE_SIZE, ( int ) align ) ; ( ( size_t * ) x ) [ - 1 ] = ( size_t ) addr ; } else <S2SV_ModEnd> { x = <S2SV_ModStart> addr ; } # if CONFIG_MEM_MANAGER if ( vpx_mm_create_heap_memory ( ) < 0 ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> create <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ; ) } number_aau = ( ( size + align - 1 + ADDRESS_STORAGE_SIZE ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) + 1 ; addr = hmm_alloc ( & hmm_d, number_aau ) ; # else addr = VPX_MALLOC_L ( size + align - 1 + ADDRESS_STORAGE_SIZE ) ; # endif",0
50,"<S2SV_ModStart> int res ; size_t <S2SV_ModEnd> indexes = SQUASHFS_LOOKUP_BLOCKS <S2SV_ModStart> ; long long * export_index_table = calloc ( indexes, sizeof ( long long ) ) ; if (! export_index_table ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } res = read_fs_bytes ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } res = read_fs_bytes ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" )",0
51,<S2SV_ModStart> ; } else { <S2SV_ModStart> p1 ) ; },0
52,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> # if CONFIG_VP8_ENCODER <S2SV_ModStart> # endif } for ( argi = argj = argv ; ( * argj = * argi ) ; argi += arg. argv_step ) { arg. argv_step = 1 ; if ( eos_mark_found ) { argj ++ ; continue ; } else if (! strcmp ( * argj, ""--"" ) ) { eos_mark_found = 1 ; continue ; } else if (! strcmp ( * argj, ""--"" ) ) { eos_mark_found = 1 ; continue ; } if ( 0 ) { } else if ( arg_match ( & arg, & outputfile, argi ) ) { config -> out_fn = arg. val ; } else if ( arg_match ( & fpf_name, argi ) ) { config -> stats_fn = arg. val ; } else if ( arg_match ( & arg, & use_ivf, argi ) ) { config -> write_webm = 0 ; } else if ( arg_match ( & arg, & threads, argi ) ) { config -> cfg. g_threads = arg_parse_uint (",0
53,"<S2SV_ModStart> 1 ; } SSL_SESSION * sess = SSL_get1_session ( c -> ssl ) ; if ( sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } } return 1 ; } if ( c -> opt -> option. client || c -> opt -> protocol ) { SSL_SESSION * sess = SSL_get1_session ( c -> ssl ) ; if ( sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } } return 1 ; } if ( c -> opt -> option. client || c -> opt -> protocol ) { SSL_SESSION * sess = SSL_get1_session ( c -> ssl ) ; if ( sess ) { int ok = SSL_",0
54,"<S2SV_ModStart> ; if ( crypto_memneq <S2SV_ModEnd> ( cmac,",0
55,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> const uint64_t bits_used <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
56,"<S2SV_ModStart> EOFOp 0x07 char * magick_buffer <S2SV_ModEnd> ; Image * <S2SV_ModStart> char * ) magick_buffer <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( count!= 3 ) || ( memcmp ( magick_buffer, ""\\122\\314"", 3 )!= 0 ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; do { image -> page. x = ReadBlobLSBShort ( image ) ; image -> page. y = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; flags = ( MagickStatusType ) ReadBlobByte ( image ) ; image -> alpha_trait = flags & 0x01 <S2SV_ModEnd> ; image -> <S2SV_ModStart>. x = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; flags = ( MagickStatusType ) ReadBlobByte ( image ) ; image -> alpha_trait = flags & 0x",0
57,"<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> altsetting [ 0 ]. desc. bNumEndpoints < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; error = - EINVAL ; goto err_free_urb ; }",1
58,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
59,"<S2SV_ModStart> * dir = ""/tmp"" <S2SV_ModEnd> ; if (",0
60,<S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_pps_done ) { ps_codec -> i4_pps_done = 1 ; return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_pps_done ) { ps_codec -> i4_pps_done = 1 ; return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_pps_done ) { ps_codec -> i4_pps_done = 1 ; return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_pps_done ) { ps_codec -> i4_pps_done = 1 ; return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_pps_done ) { ps_codec -> i4_pps_done = 1 ; return IHEVCD_INVALID_HEADER ; },0
61,"<S2SV_ModStart> n ] ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> n ] ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> n ] ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> n ] ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> n ] ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> n ] ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> n ] ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO",0
62,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> vp9_setup_dst_planes ( MACROBLOCKD <S2SV_ModStart> mi_col ) { int i ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y ) ; } for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y ) ; } for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { <S2SV_ModStart> const pd = <S2SV_ModEnd> xd -> plane",0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,<S2SV_ModStart> ) get_block = ocfs2_read_block <S2SV_ModEnd> ; else get_block <S2SV_ModStart> else get_block = ocfs2_dio_read_block <S2SV_ModEnd> ; return __blockdev_direct_IO,0
65,"<S2SV_ModStart>, ""%79s <S2SV_blank> %[^\\n]\\n"", def, strparm ) == 2 ) { if ( strparm [ 0 ] == \'""\' ) { isstring = true ; len = strlen ( strparm ) ; newstring = ( char * ) malloc ( len ) ; strparm [ len - 1 ] = 0 ; strcpy ( newstring, strparm + 1 ) ; } else if ( strparm [ 0 ] == '0' && strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else sscanf ( strparm, ""%i"", & parm ) ; for ( i = 0 ; i < numdefaults ; i ++ ) if (! strcmp ( def, defaults [ i ]. name ) ) { if (! isstring ) * defaults [ i ]. location = parm ; else * defaults [ i ]. location = ( int ) newstring ; break ; } } } fclose ( f ) ; } for ( i = 0 ; i < numdefaults ; i ++ ) if (! strcmp ( def, defaults [ i ]. name ) ) {",0
66,"<S2SV_ModStart> n ) { assert ( expr_end >= expr_start ) ; assert ( * ( expr_start - 1 ) == '{' ) ; assert ( * ( expr_end - 1 ) == '}' || * ( expr_end - 1 ) == '!' || * ( expr_end - 1 ) == ':' ) ; assert ( * expr_end >= expr_start ) ; assert ( * ( expr_start - 1 ) == '{' ) ; assert ( * ( expr_end - 1 ) == '{' || * ( expr_end - 1 ) == '}' || * ( expr_end - 1 ) == '!' || * ( expr_end - 1 ) == ':' ) ; <S2SV_ModStart> ; mod_ty mod <S2SV_ModEnd> ; assert ( <S2SV_ModStart> ; o = unicode_decode_utf8 <S2SV_ModEnd> ( expr_start, <S2SV_ModStart> = PyCF_ONLY_AST ; mod = string_object_to_c_ast ( str, PyUnicode_FromString ( ""<fstring>"" ), Py_eval_input, & cf, c -> c_feature_version, c -> c_arena ) ; Py_DECREF ( str ) ; if (! mod ) return NULL ; return mod -> v. Expression. body <S2SV_ModEnd> ; } <S2",0
67,<S2SV_ModStart> c = object? object -> child : NULL <S2SV_ModEnd> ; while (,0
68,<S2SV_ModStart> size ) ; if ( px -> ft == NULL ) return FALSE ;,0
69,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart>",0
70,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
71,"<S2SV_ModStart> int i ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> uv_stride, src -> alpha_stride } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ], buffers [ i ], strides [ i ], mi_row, mi_col, sf, pd -> subsampling_x, pd -> subsampling_y ) ; } } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ], buffers [ i ], strides [ i ], mi_row, mi_col, sf, pd -> subsampling_x, pd -> subsampling_y ) ; } } for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * pd = & xd -> plane [ i ] ; setup_pred",0
72,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; for (,1
73,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
74,<S2SV_ModStart> user ) { cleanup_srcu_struct ( & user -> release_barrier ) ; <S2SV_ModStart> _ipmi_destroy_user ( user <S2SV_ModEnd> ) ; kref_put,0
75,"<S2SV_ModStart> int sl = 0 ; int limit = 0 ; mongo_message * mm ; if ( cursor -> limit > 0 ) limit = cursor -> limit - cursor -> seen ; mm = mongo_message_create ( 16 + 4 + sl + 4 + 8, 0, 0, MONGO_OP_GET_MORE ) ; data = & mm -> data ; data = mongo_data_append32 ( data, & ZERO ) ; data = mongo_data_append ( data, cursor -> ns, sl ) ; data = mongo_data_append32 ( data, & limit ) ; mongo_data_append64 ( data, & cursor -> reply -> fields. cursorID ) ; bson_free ( cursor -> reply ) ; res = mongo_message_send ( cursor -> conn, mm ) ; if ( res!= MONGO_OK ) { mongo_cursor_destroy ( cursor ) ; return MONGO_ERROR ; } res = mongo_read_response ( cursor -> conn, & ( cursor -> reply ) ) ; if ( res!= MONGO_OK ) { mongo_cursor_destroy ( cursor ) ; return MONGO_ERROR ; }",0
76,"<S2SV_ModStart> * for_ch ; if ( TYPE ( CHILD ( n, 0 ) ) == ASYNC ) { is_async = 1 ; } else if ( c -> c_feature_version < 6 ) { ast_error ( c, n, ""Async <S2SV_blank> comprehension <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } for_ch = CHILD ( n, 1 + is_async ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; expression = ast_for_expr ( c, CHILD ( n, 3 + is_async ) ) ; if (! expression ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if ( NCH ( for_ch ) == 1 ) comp = comprehension ( Tuple ( t, Store, first -> lineno, first -> col_offset, c -> c_arena ), expression, NULL, is_async, c -> c_arena ) ; else comp = comprehension ( Tuple ( t, Store, first -> lineno,",0
77,"<S2SV_ModStart> NULL ; } memset ( dst_state -> frame, 0, sizeof ( * dst_state -> frame ) ) ;",0
78,"<S2SV_ModStart> * cpi, <S2SV_ModEnd> vp9_writer * w <S2SV_ModStart> w ) { const VP9_COMMON * const cm = & cpi -> common ; const MACROBLOCKD * const xd = & cpi -> mb. e_mbd ; const struct segmentation * const seg = & cm -> seg ; const MODE_INFO * const mi = mi_8x8 [ 0 ] ; const MODE_INFO * const above_mi = mi_8x8 [ - xd -> mi_stride ] ; const MODE_INFO * const left_mi = xd -> left_available? mi_8x8 [ - 1 ] : NULL ; const MB_MODE_INFO * const mbmi = & mi -> mbmi ; const BLOCK_SIZE bsize = mbmi -> sb_type ; if ( seg -> update_map ) write_segment_id ( w, seg, mbmi -> segment_id ) ; write_skip ( cpi, mbmi -> segment_id, mi, w ) ; if ( bsize >= BLOCK_8X8 && cm -> tx_mode == TX_MODE_SELECT ) write_selected_tx_size ( cpi, mbmi -> tx_size, bsize,",0
79,"<S2SV_ModStart> maxn ) { switch ( actions [ n ]. SWF_ACTIONRECORD. ActionCode ) { case SWFACTION_END : return 0 ; case SWFACTION_CONSTANTPOOL : decompileCONSTANTPOOL ( & actions [ n ] ) ; return 0 ; case SWFACTION_GOTOLABEL : decompileGOTOFRAME ( n, actions, maxn, 1 ) ; case SWFACTION_GOTOFRAME : decompileGOTOFRAME ( n, actions, maxn, 0 ) ; case SWFACTION_GETURL2 : decompileGETURL2 ( & actions [ n ] ) ; return 0 ; case SWFACTION_PUSH : decompilePUSH ( & actions [ n ] ) ; return 0 ; case SWFACTION_PUSHDUP : decompilePUSHDUPDUP ( & actions [ n ] ) ; return 0 ; case SWFACTION_STACKSWAP : decompileSTACKSWAP ( & actions [ n ] ) ; return 0 ; case SWFACTION_GETPROPERTY : decompileGETPROPERTY ( & actions [ n ] ) ; return 0 ; case SWFACTION_GETTIME : decompileGETTIME ( n, actions, maxn ) ; return",0
80,"<S2SV_ModStart> ) ) ; n = EXTRACT_32BITS ( & prep -> pp_n ) ; ps = ( const struct pgstate * ) ( prep + 1 ) ; while ( -- n >= 0 && ND_TTEST ( * ps ) ) { const struct id_off * io, * ie ; char c = '<' ; ND_PRINT ( ( ndo, "" <S2SV_blank> %u/%s:%u"", EXTRACT_32BITS ( & ps -> slot ), ipaddr_string ( ndo, & ps -> page. p_sid ), EXTRACT_32BITS ( & ps -> page. p_uid ) ) ) ; io = ( const struct id_off * ) ( ps + 1 ) ; for ( ie = io + ps -> nid ; io < ie && ND_TTEST ( * io ) ; ++ io ) { ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_string ( ndo, & io -> id ), EXTRACT_32BITS ( & io -> off ) ) ) ; c = ',' ; } ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( const struct pgstate * )",0
81,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
82,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> addModuleArgument ( sqlite3 <S2SV_ModStart> zArg ) { sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof <S2SV_ModStart> = sizeof ( sqlite3_int64 <S2SV_ModEnd> ) * ( <S2SV_ModStart> nModuleArg ) ; sqlite3_int64 <S2SV_ModEnd> * * azModuleArg,0
83,<S2SV_ModStart> ] ; } for ( i = anal_size - 1 ; i >= 0 ; i -- ) { u_in [ i ] = x [ i - anal_size ] ; } for ( i = anal_size - 1 ; i >= 0 ; i -- ) { u_out [ i ] = x [ i - anal_size ] ; } for ( i = anal_size - 1 ; i >= 0 ; i -- ) { u_in [ i ] = x [ i - anal_size ] ; } for ( i = anal_size - 1 ; i >= 0 ; i -- ) { u_out [ i ] = x [ i - anal_size ] ; } for ( i = anal_size - 1 ; i >= 0 ; i -- ) { u_in [ i ] = x [ i - anal_size ] ; } for ( i = anal_size - 1 ; i >= 0 ; i -- ) { u_in [ i ] = ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer ->,0
84,<S2SV_ModStart> < q ) { <S2SV_ModStart> p ) ; if ( ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS,0
85,"<S2SV_ModStart> bfq_idle_slice_timer_body ( struct bfq_sched_data * sched_data <S2SV_ModEnd> ) { struct <S2SV_ModStart> bfq_data * bfqd <S2SV_ModEnd> ; enum bfqq_expiration <S2SV_ModStart> long flags ; struct bfq_queue * bfqq = & sched_data -> bfqq ; <S2SV_ModStart> spin_lock_irqsave ( & sched_data <S2SV_ModEnd> -> lock, <S2SV_ModStart> spin_unlock_irqrestore ( & sched_data <S2SV_ModEnd> -> lock, <S2SV_ModStart> return ; } bfq_clear_bfqq_wait_request ( bfqq ) ;",0
86,,1
87,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
88,"<S2SV_ModStart> diffBlock + diffBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } memcpy ( newData + newpos, diffPtr, x ) ; diffPtr += x ; if ( diffPtr <S2SV_ModEnd> > diffBlock + <S2SV_ModStart> diffBlock + diffBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } if ( extraPtr + y <S2SV_ModEnd> > extraBlock + <S2SV_ModStart> extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } memcpy ( newData + newpos, extraPtr, y ) ; extraPtr += y ; if ( extraPtr + z <S2SV_ModEnd> > extraBlock + <S2SV_ModStart> extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } memcpy ( newData + newpos, extraPtr",0
89,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> np -> tclass ) ; rcu_read_unlock (,0
90,<S2SV_ModStart> case VFF_TYP_BIT : status = MagickTrue ; break ; <S2SV_ModStart> case VFF_TYP_BIT : status = MagickTrue ; break ; <S2SV_ModStart> case VFF_TYP_BIT : status = MagickTrue ; break ; <S2SV_ModStart> case VFF_TYP_BIT : status = MagickTrue ; break ; <S2SV_ModStart> case VFF_TYP_BIT : status = MagickTrue ; break ; <S2SV_ModStart> case VFF_TYP_BIT : status = MagickTrue ; break ; <S2SV_ModStart> case VFF_TYP_BIT : status = MagickTrue ; break ; <S2SV_ModStart> case VFF_TYP_BIT : status = MagickTrue ; break ; <S2SV_ModStart> case VFF_TYP_BIT : status = MagickTrue ; break ; <S2SV_ModStart> case VFF_TYP_BIT : status = MagickTrue ; break ; <S2SV_ModStart> case VFF_TYP_BIT : status = MagickTrue ; break ; <S2SV_ModStart> case VFF_TYP_BIT : status = MagickTrue ; break ; <S2SV_ModStart> case VFF_TYP_BIT : status = MagickTrue ; break ; <S2SV_ModStart> case VFF_TYP_BIT : status = MagickTrue ; break ; <S2SV_ModStart> case,0
91,<S2SV_ModStart> data ) { ( void ) data ;,0
92,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
93,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
94,<S2SV_ModStart> ] = near_mvs [ 0 ] ; mv. as_int = near_mvs <S2SV_ModStart> ] = near_mvs [ 0 ] ; mv. as_int = near_mvs <S2SV_ModStart> ] = near_mvs [ 0 ] ; mv. as_int = near_mvs <S2SV_ModStart> ] = near_mvs [ 1 ] ; mv. as_int = near_mvs <S2SV_ModStart> ] = near_mvs [ 2 ] ; mv. as_int = near_mvs <S2SV_ModStart> ] = near_mvs [ 3 ] ; mv. as_int = near_mvs <S2SV_ModStart> ] = near_mvs [ 4 ] ; mv. as_int = near_mvs <S2SV_ModStart> ] = near_mvs [ 5 ] ; mv. as_int = near_mvs <S2SV_ModStart> ] = near_mvs [ 6 ] ; mv. as_int = near_mvs <S2SV_ModStart> ] = near_mvs [ 7 ] ; mv. as_int = near_mvs <S2SV_ModStart> ] = near_mvs [ 7 ] ; mv. as_int = near_m,0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
97,"<S2SV_ModStart> msicap msicap ; memset ( & msicap, 0, sizeof ( msicap ) ) ;",0
98,"<S2SV_ModStart> return REDIS_OK ; } if (! ( cmd -> flags & REDIS_CMD_DENYPASS ) && ( c -> flags & REDIS_CLOSE_AFTER_REPLY ) ) { addReplyError ( c, shared. ok ) ; c -> flags |= REDIS_CLOSE_AFTER_REPLY ; return REDIS_ERR ; }",0
99,"<S2SV_ModStart> ; if ( cfg -> g_w == 0 || cfg -> g_h == 0 ) { return VPX_CODEC_ERR_INVALID_ARGS ; } if ( cfg -> g_w == 0 || cfg -> g_h == 0 ) { return VPX_CODEC_ERR_INVALID_ARGS ; } if ( cfg -> g_w == 0 || cfg -> g_h == 0 ) { return VPX_CODEC_ERR_INVALID_ARGS ; } if ( cfg -> g_w == 0 || cfg -> g_h == 0 ) { return VPX_CODEC_ERR_INVALID_ARGS ; } if ( <S2SV_ModEnd> ( cfg -> <S2SV_ModStart> VPX_RC_ONE_PASS ) ) { return VPX_CODEC_ERR_INVALID_ARGS ; } if <S2SV_ModEnd> ( cfg -> <S2SV_ModStart> ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; res = validate_config ( ctx, cfg, & ctx -> vp8_cfg, 0 ) ; if (! res ) { ctx -> cfg = * cfg ; set_vp8e_config ( & ctx -> oxcf, ctx -> cfg, ctx -> vp8_cfg",0
100,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> vp9_init_plane_quantizers ( cpi,0
101,<S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> info -> si_signo,0
102,"<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; ISOM_DECREASE_SIZE ( ptr, 1 ) <S2SV_ModStart> - 8 ; if ( tmp_strsize > sizeof ( char ) * tmp_strsize ) { ISOM_DECREASE_SIZE ( ptr, 1 ) tmp_strsize = sizeof ( char ) * tmp_strsize ; tmp_str = gf_malloc ( sizeof ( char ) * tmp_strsize ) ; if (! tmp_str ) return GF_OUT_OF_MEM ; memset ( tmp_str, 0, sizeof ( char ) * tmp_strsize ) ; while ( tmp_strsize ) { ISOM_DECREASE_SIZE ( ptr, 1 ) tmp_str [ i ] = gf_bs_read_u8 ( bs ) ; tmp_strsize -- ; if (! tmp_str [ i ] ) break ; i ++ ; } if ( i ) { ptr -> movie_identifier = gf_strdup ( tmp_str ) ; } ISOM_DECREASE_SIZE ( ptr, 1 ) ptr -> server_entry_count = 0 ; for ( i = 0 ; i < ptr -> server_entry_count",0
103,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
104,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> -> state == fmode <S2SV_ModEnd> ) return ; <S2SV_ModStart> if ( ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> )!= ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> { if ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> -> state = fmode <S2SV_ModEnd> ; } <S2SV_null>",0
105,"<S2SV_ModStart> read_info ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( ( Image * ) NULL ) ; }",0
106,<S2SV_ModStart> 0 ; } if ( len > UINT32_MAX - elem. in_sg [ 0 ]. iov_len ) { return 0 ; },0
107,"<S2SV_ModStart>, i, <S2SV_ModEnd> JPC_QCX_GETEXPN ( qcd <S2SV_ModStart> ] ), <S2SV_ModEnd> JPC_QCX_GETMANT ( qcd",0
108,"<S2SV_ModStart> AV_PIX_FMT_PAL8 ; } else if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; }",0
109,"<S2SV_ModStart> ) ; } if ( ND_TTEST ( * p,'<S2SV_blank>') ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } <S2SV_ModStart> caplen - 1 ) ; if ( ND_TTEST ( * p,'<S2SV_blank>') ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } if ( ND_TTEST ( * p,'<S2SV_blank>') ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } if ( ND_TTEST ( * p,'<S2SV_blank>') ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } if ( ND_TTEST ( * p,'<S2SV_blank>') ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } if ( ND_TTEST ( * p,'<S2SV_blank>') ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]""",0
110,"<S2SV_ModStart> image_noffset ) { char * name ; if ( noffset == - FDT_ERR_TRUNCATED || noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; } name = fit_get_name ( fit, noffset, NULL ) ; if (! name ) { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; if ( ret ) { puts ( ""- <S2SV_blank> "" ) ; } else { puts ( ""+ <S2SV_blank> "" ) ; verified = 1 ; break ; } } } if ( noffset == - FDT_ERR_TRUNCATED || noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; } return verified? 0 : - EPERM ; error : printf ( "" <S2SV_blank> error!\\n%s <S2SV_blank> for <S2SV_blank> \'%s\' <S2SV_blank> hash <S2SV_blank> node <S2SV_blank> in <S2SV_blank> \'%s\' <S2SV_blank> image <S2SV_blank> node\\n"", err_msg, fit_get_name ( fit, noffset, NULL",0
111,"<S2SV_ModStart> ; if ( kzalloc ( CX23888_IR_RX_KFIFO_SIZE, GFP_KERNEL ) ) return - ENOMEM ; state -> dev = dev ; sd = & state -> sd ; v4l2_subdev_init ( sd, & cx23888_ir_controller_ops ) ; v4l2_set_subdevdata ( sd, state ) ; snprintf ( sd -> name, sizeof ( sd -> name ), ""%s/888-ir"", dev -> name ) ; sd -> grp_id = CX23885_HW_888_IR ; ret = v4l2_device_register_subdev ( & dev -> v4l2_dev, sd ) ; if ( ret == 0 ) { cx23888_ir_write4 ( dev, CX23888_IR_IRQEN_REG, 0 ) ; mutex_init ( & state -> rx_params_lock ) ; default_params = default_rx_params ; v4l2_subdev_call ( sd, ir, rx_s_parameters, & default_params ) ; mutex",0
112,"<S2SV_ModStart> * iface, <S2SV_ModEnd> vpx_codec_flags_t flags, <S2SV_ModStart> ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_POSTPROC ) &&! ( iface -> caps & VPX_CODEC_CAP_POSTPROC ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_ERROR_CONCEALMENT ) &&! ( iface -> caps & VPX_CODEC_CAP_ERROR_CONCEALMENT ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_DECOD",0
113,<S2SV_ModStart> ; value |= TJA1100_CONFIG1_MII_MODE_RMII_24MHZ <S2SV_ModEnd> ; tja1100WritePhyReg (,0
114,"<S2SV_ModStart> ( unlikely ( IPCB ( skb_in ) -> opt. optlen + sizeof ( struct icmphdr ) + iph -> ihl > IP_SKB_CB ( skb_in ) -> optlen ) ) { kfree_skb ( skb_in ) ; iph = skb_header_pointer ( skb_in, skb_network_header ( skb_in ) + ( iph -> ihl << 2 ) + sizeof ( struct icmphdr ) + iph -> ihl * 4 ), sizeof ( struct icmphdr ), & _inner_type ) ; goto out ; } if (",0
115,<S2SV_ModStart> ( ( flags & ( VPX_CODEC_USE_XMA | VPX_CODEC_USE_PSNR ) ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else { int i ; void * mem_loc = NULL ; if (! ( res = iface -> enc. mr_get_mem_,0
116,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
117,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; RESERVE_SPACE",1
118,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ) ; return 0 <S2SV_ModStart> break ; } return error <S2SV_ModEnd> ; } <S2SV_null>,1
119,"<S2SV_ModStart> ) ) ; if ( len < 1 ) { r_strbuf_append ( & op -> esil, ""\\0"" ) ; return - 1 ; } <S2SV_ModStart> ) ) ; if ( len < 1 ) { r_strbuf_append ( & op -> esil, ""\\0"" ) ; return - 1 ; } <S2SV_ModStart> ) ) ; if ( len < 1 ) { r_strbuf_append ( & op -> esil, ""\\0"" ) ; return - 1 ; } <S2SV_ModStart> ) ) ; if ( len < 1 ) { r_strbuf_append ( & op -> esil, ""\\0"" ) ; return - 1 ; } <S2SV_ModStart> ) ) ; if ( len < 1 ) { r_strbuf_append ( & op -> esil, ""\\0"" ) ; return - 1 ; } <S2SV_ModStart> ) ) ; if ( len < 1 ) { r_strbuf_append ( & op -> esil, ""\\0"" ) ; return - 1 ; } <S2SV_ModStart> ) ) ; if ( len < 1 ) { r_strbuf_append ( & op -> esil, ""\\0"" ) ; return - 1 ; } <S2SV_ModStart> ) ) ; if ( len < 1 ) { r_strbuf_",0
120,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
121,<S2SV_ModStart> goto trunc ; if ( lshp -> ls_length < sizeof ( struct lsa6_hdr ) ) goto trunc ;,0
122,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { ret = - EFAULT ; break ; } <S2SV_ModEnd> * obuf =",0
123,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
124,"<S2SV_ModStart> 0 ) { if ( ( <S2SV_ModStart> | O_CLOEXEC ) ) < 0 ) { APPL_TRACE_ERROR ( ""%s: <S2SV_blank> Error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank> err:%d"", __FUNCTION__, errno ) ; break ; } <S2SV_ModEnd> p_dev -> fd <S2SV_ModStart> 0 ) { if ( ( <S2SV_ModStart> | O_CLOEXEC ) ) < 0 ) { APPL_TRACE_ERROR ( ""%s: <S2SV_blank> Error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank> err:%d"", __FUNCTION__, errno ) ; break ; } <S2SV_ModEnd> p_dev -> fd <S2SV_ModStart> 0 ) { if ( ( <S2SV_ModStart> | O_CLOEXEC ) ) < 0 ) { APPL_TRACE_ERROR ( ""%s: <S2SV_blank> Error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank> err:%d"", __FUNCTION__, errno ) ; break ; } <S2SV_ModEnd> p_dev -> fd <S2SV_ModStart> 0 ) { if ( ( <S2SV_ModStart> | O_CLOEXEC ) ) < 0 ) { APPL_TRACE_ERROR ( ""%s: <S2SV_blank> Error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank> err:%d"", __FUNCTION__, errno ) ; break ; }",0
125,"<S2SV_ModStart> * costs, vpx_tree <S2SV_ModEnd> tree, const <S2SV_ModStart> tree, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> ) { const vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> ) ; const vpx_tree_index <S2SV_ModEnd> ii = tree",1
126,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
127,"<S2SV_ModStart> & 0xffff ; if (! synth_devs [ dev ] -> load_patch ) return - ENXIO ; <S2SV_ModStart> c, 0 ) ; if ( err < 0 ) return err ; return err ; } if ( ev_code >= 128 ) { if ( seq_mode == SEQ_2 && ev_code == SEQ_EXTENDED ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> Invalid <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> event <S2SV_blank> %x\\n"", ev_code ) ; return - EINVAL ; } ev_size = 8 ; if ( c < ev_size ) { if (! seq_playing ) seq_startplay ( ) ; return count - c ; } if ( copy_from_user ( ( char * ) & event_rec [ 4 ], & ( buf ) [ p + 4 ], 4 ) ) return - EINVAL ; if ( c < ev_size ) { if (! seq_playing ) seq_startplay ( ) ; return count - c ; } if ( c < ev_size ) { if (! seq_playing ) seq_startplay ( ) ; return count - c ; } if (",0
128,"<S2SV_ModStart> fadst16 ( const tran_low_t * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t <S2SV_ModEnd> x0 = input <S2SV_ModStart> 15 ] ; tran_high_t <S2SV_ModEnd> x1 = input <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> x2 = input <S2SV_ModStart> 13 ] ; tran_high_t <S2SV_ModEnd> x3 = input <S2SV_ModStart> 2 ] ; tran_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 4 ] ; tran_high_t <S2SV_ModEnd> x5 = input <S2SV_ModStart> 11 ] ; tran_high_t <S2SV_ModEnd> x6 = input <S2SV_ModStart> 9 ] ; tran_high_t <S2SV_ModEnd> x7 = input <S2SV_ModStart> 7 ] ; tran_high_t <S2SV_ModEnd> x8 = input <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> x9 = input <S2SV_ModStart> 9 ] ; tran_high_t <S2SV_ModEnd> x10 = input <S2SV_ModStart> 5 ] ; tran_high_t <S2SV_ModEnd> x11 = input <S2SV_ModStart> 10 ] ; tran_high_t",0
129,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> flags |= HAS_EDSP <S2SV_ModStart> |= HAS_EDSP ; <S2SV_ModEnd> flags |= HAS_MEDIA <S2SV_ModStart> |= HAS_MEDIA ; <S2SV_ModEnd> flags |= HAS_NEON <S2SV_ModStart> flags |= HAS_NEON ; <S2SV_ModEnd> return flags &,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
131,"<S2SV_ModStart> * cpi, TileDataEnc * tile_data <S2SV_ModEnd>, MODE_INFO * <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd>, int * <S2SV_ModStart> bsize ) { TileInfo * tile_info = & tile_data -> tile_info ; <S2SV_ModStart> cm = & tile_data <S2SV_ModEnd> -> common ; <S2SV_ModStart> = num_8x8_blocks_wide_lookup [ mi <S2SV_ModEnd> -> mbmi. <S2SV_ModStart> = num_8x8_blocks_high_lookup [ mi <S2SV_ModEnd> -> mbmi. <S2SV_ModStart> ( cpi, tile_data, mi <S2SV_ModEnd>, no_pred_segcounts, <S2SV_ModStart> ( cpi, tile_data, mi <S2SV_ModEnd>, no_pred_segcounts, <S2SV_ModStart> ( cpi, tile_data, mi <S2SV_ModEnd>, no_pred_segcounts, <S2SV_ModStart> ( cpi, tile_data, mi <S2SV_ModEnd>, no_pred_segcounts, <S2SV_ModStart> ( cpi, tile_data, mi <S2SV_ModEnd>, no_pred_segcounts, <S2SV_ModStart> ( cpi, tile_data, mi <S2SV_ModEnd>, no_pred_segcounts, <S2SV_ModStart> ( cpi, tile_data, mi <S2SV_ModEnd>, no_pred_segcounts, <S2SV_ModStart> ( cpi, tile_data, mi <S2SV_ModEnd>, no_pred_segcounts,",0
132,"<S2SV_ModStart> ; if (! c -> reqtype ) { if ( c -> querybuf [ 0 ] == '*' ) { c -> reqtype = PROTO_REQ_MULTIBULK ; } else { c -> reqtype = PROTO_REQ_INLINE ; } } if ( c -> reqtype == PROTO_REQ_INLINE ) { if ( processInlineBuffer ( c )!= C_OK ) break ; } else if ( c -> reqtype == PROTO_REQ_MULTIBULK ) { if ( processMultibulkBuffer ( c )!= C_OK ) break ; } else { serverPanic ( ""Unknown <S2SV_blank> request <S2SV_blank> type"" ) ; } if ( <S2SV_ModStart> CLIENT_CLOSE_AFTER_REPLY ) break <S2SV_ModEnd> ; } if",0
133,"<S2SV_ModStart> ; get_blocks_flags = EXT4_GET_BLOCKS_SYNC ; if ( mpd -> b_state & ( 1 << BH_Mapped ) ) get_blocks_flags |= EXT4_GET_BLOCKS_SYNC ; if ( mpd -> b_state & ( 1 << BH_Unwritten ) ) get_blocks_flags |= EXT4_GET_BLOCKS_DELALLOC_RESERVE ; blks = ext4_get_blocks ( handle, mpd -> inode, next, max_blocks, & new, get_blocks_flags ) ; if ( blks < 0 ) { err = blks ; if ( err == - ENOSPC && ext4_count_free_blocks ( mpd -> inode -> i_sb ) ) { mpd -> retval = err ; return 0 ; } ext4_msg ( mpd -> inode -> i_sb, KERN_CRIT ""delayed <S2SV_blank> block <S2SV_blank> allocation <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> at <S2SV_blank> "" ""logical <S2SV_blank> offset <S2SV_blank> %llu <S2SV_blank> with <S2SV_blank> max <S2SV_blank> blocks <S2SV_blank> %zd <S2SV_blank> with <S2SV_blank> error <S2SV_blank> %d\\n"", mpd -> inode ->",0
134,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart>, handle, ( struct oe_addrinfo * * ) <S2SV_ModStart> & retval, ( struct oe_addrinfo * * ) <S2SV_ModStart> -> ai_flags, ( struct oe_addrinfo * * ) <S2SV_ModStart> -> ai_family, ( struct oe_addrinfo * * ) <S2SV_ModStart> -> ai_socktype, ( struct oe_addrinfo * * ) <S2SV_ModStart> -> ai_protocol, ( struct oe_addrinfo * * ) <S2SV_ModStart> & p -> ai_addrlen, ( struct oe_addrinfo * * ) <S2SV_ModEnd> & p -> <S2SV_ModStart> & p -> ai_family, ( struct oe_addrinfo * * ) <S2SV_ModEnd> & p -> <S2SV_ModStart> & p -> ai_protocol, ( struct oe_addrinfo * * ) <S2SV_ModEnd> & p -> <S2SV_ModStart> & p -> ai_addrlen, ( struct oe_addrinfo * * ) <S2SV_ModEnd> & p -> <S2SV_ModStart> & p -> ai_family, ( struct oe_addrinfo * * ) <S2SV_ModEnd> & p -> <S2SV_ModStart> & p -> ai_protocol, ( struct oe_addrinfo * * ) <S2SV_ModEnd> & p -> <S2SV_ModStart> & p -> ai_addrlen, ( struct oe_addrinfo",0
135,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
136,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
137,"<S2SV_ModStart> __u16 size, const <S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmemdup ( data, size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; kfree ( buf ) ;",1
138,"<S2SV_ModStart> asdl_seq * body, const char * name <S2SV_ModStart> = body ; p -> v. Module. name = name ;",0
139,"<S2SV_ModStart>, int64_t ts_end <S2SV_ModEnd> ) { struct <S2SV_ModStart> >> 4 ; <S2SV_ModEnd> if ( ctx <S2SV_ModStart> write_idx ) ; # if USE_PARTIAL_COPY if ( ctx -> max_sz == 1 && active_map &&! flags ) { for ( row = 0 ; row < mb_rows ; ++ row ) { col = 0 ; while ( 1 ) { for ( ; col < mb_cols ; ++ col ) { if ( active_map [ col ] ) break ; } vp9_copy_and_extend_frame_with_rect ( src, & buf -> img, row << 4, col << 4, 16, ( active_end - col ) << 4 ) ; col = active_end ; } active_map += mb_cols ; } else { vp9_copy_and_extend_frame ( src, & buf -> img ) ; } } else { vp9_copy_and_extend_frame ( src, & buf -> img ) ; } # else vp9_copy_and_extend_frame ( src, & buf -> img ) ; # endif buf -> ts_start = ts_start ; buf -> ts_end = ts_end ; buf -> flags =",0
140,"<S2SV_ModStart>. sharpness ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; <S2SV_ModStart> LPF_PICK_FROM_Q ) { <S2SV_ModEnd> int filt_guess = <S2SV_ModStart> int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; if ( cm -> frame_type == KEY_FRAME ) filt_guess -= 4 ; lf -> filter_level = clamp ( filt_guess, min_filter_level, max_filter_level ) ; } else { const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; if ( cm -> frame_type == KEY_FRAME ) filt_guess -= 4 ; lf -> filter_level = clamp ( filt_guess, min_filter_level, max_filter_level ) ; } } else { search_filter_level ( sd, cpi, method == LPF_PICK_FROM",0
141,<S2SV_ModStart> } break ; case BTA_DM_DISABLE_EVT : { BD_NAME bdname ; bt_status_t status ; prop. type = BT_PROPERTY_BDNAME ; prop. len = BD_NAME_LEN ; prop. val = ( void * ) bdname ; status = btif_storage_get_adapter_property ( & prop ) ; if ( status == BT_STATUS_SUCCESS ) { BTA_DmSetDeviceName ( ( char * ) prop. val ) ; } else { BTA_DmSetDeviceName ( ( char * ) bdname ) ; } # if ( defined ( BLE_INCLUDED ) && ( BLE_INCLUDED == TRUE ) ) BTA_DmBleConfigLocalPrivacy ( BLE_LOCAL_PRIVACY_DISABLED ) ; # endif service_mask = btif_get_enabled_services_mask ( ) ; for ( i = 0 ; i <= BTA_MAX_SERVICE_ID ; i ++ ) { if ( service_mask & ( tBTA_SERVICE_MASK ) ( BTA_SERVICE_ID_TO_SERVICE_MASK ( i ) ),0
142,"<S2SV_ModStart> { int a ; if (! isp2 ( getnum ( fmt, MAXALIGN, & a ) ) ) luaL_error ( L, ""alignment <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> power <S2SV_blank> of <S2SV_blank> 2"", a ) ; h -> align = a ; return ; } default : { const char * msg = lua_pushfstring ( L, ""invalid <S2SV_blank> format <S2SV_blank> option <S2SV_blank> \'%c\'"", opt ) ; luaL_argerror ( L, 1, msg ) ; return ; } } int a = getnum ( fmt, MAXALIGN ) ; if (! isp2 ( a ) ) luaL_error ( L, ""alignment <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> power <S2SV_blank> of <S2SV_blank> 2"", a ) ; h -> align = a ; return ; } default : { const char * msg = lua_pushfstring ( L, ""invalid <S2SV_blank> format <S2SV_blank> option <S2SV_blank> \'%c\'"", opt ) ; luaL_argerror ( L, 1, msg ) ; h -> align = a ; return ; } default : { const char * msg = lua_pushfstring ( L, ""invalid <S2SV_blank> format <S2SV_blank> option <S2SV_blank> \'%c\'""",0
143,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
144,"<S2SV_ModStart> vpx_codec_err_t res ; vpx_alg_priv_t * priv ; <S2SV_ModStart> ; else { priv = ctx -> priv -> alg_priv ; <S2SV_ModStart>. decode ( <S2SV_ModEnd> priv, data",0
145,"<S2SV_ModStart> inode * inode, const struct iso_directory_record * dir ) { struct isofs_sb_info * sbi = ISOFS_SB ( inode -> i_sb ) ; unsigned long bufsize = ISOFS_BUFFER_SIZE ( inode ) ; unsigned long block ; int high_sierra = sbi -> s_high_sierra ; struct buffer_head * bh = NULL ; struct iso_inode_info * ei = ISOFS_I ( inode ) ; int ret = - EIO ; block = ei -> i_iget5_block ; offset = ei -> i_iget5_offset ; de = ( struct iso_directory_record * ) ( bh -> b_data + offset ) ; de_len = * ( unsigned char * ) de ; if ( offset + de_len > bufsize ) { int frag1 = bufsize - offset ; tmpde = kmalloc ( de_len, GFP_KERNEL ) ; if ( tmpde == NULL ) { printk ( KERN_INFO ""%s: <S2SV_blank> out <S2SV_blank> of <S2SV_blank> memory\\n"", __func__ ) ; ret = - ENOMEM ; goto fail ; } memc",0
146,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> ) ; } outpos += strlen ( outputbuffer ) ;",0
147,<S2SV_ModStart> self ) { PyObject_GC_UnTrack ( self ) ;,1
148,"<S2SV_ModStart> 0 ; a && i < count ; ++ i ) { n = cJSON_CreateString ( strings [ i ] ) ; if (! i ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; } for ( i = 0 ; a <S2SV_ModStart> ] ) ; <S2SV_ModEnd> } return a",0
149,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ) ) { int res ; Py_ssize_t len ; Py_ssize_t i ; tmp = _PyObject_GetAttrId ( obj, & PyId_body ) ; if ( tmp == NULL ) goto failed ; if (! PyList_Check ( tmp ) ) { PyErr_Format ( PyExc_TypeError, ""Module <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> must <S2SV_blank> be <S2SV_blank> a <S2SV_blank> list, <S2SV_blank> not <S2SV_blank> a <S2SV_blank> %.200s"", tmp -> ob_type -> tp_name ) ; goto failed ; } len = PyList_GET_SIZE ( tmp ) ; body = _Ta3_asdl_seq_new ( len, arena ) ; if ( body == NULL ) goto failed ; for ( i = 0 ; i < len ; i ++ ) { stmt_ty value ; res = obj2ast_stmt ( PyList_GET_ITEM ( tmp, i ), & value, arena ) ; if ( res!= 0 ) goto failed ; if ( len!= PyList_GET_SIZE ( tmp ) ) { PyErr_SetString ( PyExc_RuntimeError, ""Module",0
150,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
151,"<S2SV_ModStart> & flags ) <S2SV_ModEnd> err = verify_compat_iovec <S2SV_ModStart> VERIFY_WRITE ) ; else err = verify_iovec ( msg_sys, iov, & addr, VERIFY_READ ) ; if ( err < 0 ) goto out_freeiov ; total_len = err ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; err = ( nosec? sock_recvmsg_nosec : sock_recvmsg ) ( sock, msg_sys, flags ) ; if ( err < 0 ) goto out_freeiov ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; err = ( nosec? sock_recvmsg_nosec :",0
152,"<S2SV_ModStart> buffer_head * dibh <S2SV_ModEnd> ; u64 bn <S2SV_ModStart> unsigned ptrs_per_blk ; int eob = 0 ; enum alloc_state state ; __be64 * ptr ; __be64 zero_bn = 0 ; BUG_ON ( sheight < 1 ) ; BUG_ON ( dibh == NULL ) ; gfs2_trans_add_bh ( ip -> i_gl, dibh, 1 ) ; if ( height == sheight ) { struct buffer_head * bh ; ptr = metapointer ( height - 1, mp ) ; bh = mp -> mp_bh [ height - 1 ] ; dblks = gfs2_extent_length ( bh -> b_data, bh -> b_size, ptr, maxlen, & eob ) ; BUG_ON ( dblks < 1 ) ; state = ALLOC_DATA ; } else { ptrs_per_blk = height > 1? sdp -> sd_inptrs : sdp -> sd_diptrs ; dblks = min ( maxlen, ptrs_per_blk - mp -> mp_list [ height - 1 ] ) ; if ( height == ip",0
153,"<S2SV_ModStart>, vpx_codec_iface_name ( get_codec_interface ( global -> codec ) ) ) ; fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } if ( stream -> next || stream -> index ) { fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> index ) ; fprintf ( stderr, ""Destination <S2SV_blank> file: <S2SV_blank> %s\\n"", stream -> config. out_fn ) ; fprintf ( stderr, ""Encoder <S2SV_blank> parameters:\\n"" ) ; SHOW ( g_usage ) ; SHOW ( g_threads ) ; SHOW ( g_profile ) ; SHOW ( g_w ) ; SHOW ( g_h ) ; SHOW ( g_timebase. num ) ; SHOW ( g_timebase. den ) ; SHOW ( g_error_resilient ) ; SHOW ( g_pass ) ; SHOW ( g_lag_in_frames ) ; SHOW ( rc_dropframe_thresh ) ; SHOW ( rc_resize_allowed ) ; SHOW ( rc_",0
154,<S2SV_ModStart>!= NULL ) { <S2SV_ModStart> name ) ; } <S2SV_ModStart>!= NULL ) { <S2SV_ModStart> name ) ; } <S2SV_ModStart>!= NULL ) { <S2SV_ModStart> name ) ; } <S2SV_ModStart>!= NULL ) { <S2SV_ModStart> name ) ; } <S2SV_ModStart>!= NULL ) { <S2SV_ModStart> name ) ; } <S2SV_ModStart>!= NULL ) { <S2SV_ModStart> name ) ; } <S2SV_ModStart>!= NULL ) { <S2SV_ModStart> name ) ; } <S2SV_ModStart>!= NULL ) { <S2SV_ModStart> name ) ; } <S2SV_ModStart>!= NULL ) { <S2SV_ModStart> name ) ; } <S2SV_ModStart>!= NULL ) { <S2SV_ModStart> name ) ; } <S2SV_ModStart>!= NULL ) { <S2SV_ModStart>!= NULL ) { <S2SV_ModStart>!= NULL ) { <S2SV_ModStart>!= NULL ) { <S2SV_ModStart>!= NULL ) { <S2SV_ModStart>!= NULL ) { <S2SV_ModStart>!= NULL ) { <S2SV_ModStart>!= NULL ) { <S2SV_ModStart>!= NULL ) { <S2SV_ModStart>!= NULL ) { <S2SV_ModStart>!= NULL ) { <S2SV_ModStart>!= NULL ) { <S2SV_ModStart>!= NULL ) { <S2SV_ModStart>!= NULL ) { <S2SV_ModStart>!= NULL ) { <S2SV_ModStart>!= NULL ) { <S2SV_ModStart>!= NULL ) { <S2SV_ModStart>!= NULL ) { <S2SV_ModStart>!= NULL ) { <S2SV_ModStart>!= NULL ) { <S2SV_ModStart>!= NULL ) { <S2SV_ModStart>!= NULL ) { <S2SV_ModStart>!= NULL ) { <S2SV_ModStart>!= NULL ) {,0
155,"<S2SV_ModStart> 0 ) { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } } else { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } } free ( fname ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> } else if <S2SV_ModStart> 0 ) { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } <S2SV_ModStart> 0 ) { FILE * fp = fopen ( fname, ""w"" )",0
156,<S2SV_ModStart> msix_tab_size ) { <S2SV_ModEnd> bzero ( msixcap,1
157,"<S2SV_ModStart> ; if ( js_regexec ( re -> prog, text, & m, 0 ) ) js_pushnumber ( J, js_utfptrtoidx ( text, m. sub [ 0 ]. sp ) ) ; else if (",0
158,"<S2SV_ModStart> case OFreshOID : caml_set_oo_id ( ( value ) dest ) ; sp -- ; break ; case OShift : * dest += sp -> arg ; sp -- ; break ; case OReadItems : sp -> dest ++ ; if ( -- ( sp -> arg ) == 0 ) sp -- ; code = read8u ( ) ; if ( code >= 0x1F ) { v = Val_hp ( intern_dest ) ; if ( intern_obj_table!= NULL ) intern_obj_table [ obj_counter ++ ] = v ; * intern_dest = Make_header ( size, tag, intern_color ) ; intern_dest += 1 + size ; if ( tag == Object_tag ) { Assert ( size >= 2 ) ; ReadItems ( & Field ( v, 2 ), size - 2 ) ; PushItem ( ) ; sp -> op = OFreshOID ; sp -> dest = ( value * ) v ; sp -> arg = 1 ; ReadItems ( & Field ( v, 0 ), size - 2 ) ; } else { v = Val_int ( code & 0x3F ) ; } } else { v = Val_hp ( intern_dest ) ;",0
159,"<S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; ksz8851WriteReg <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( interface, KSZ8851_ISR ) ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } } if ( ( isr & ISR_TXIS )!= 0 ) { ksz8851WriteReg ( interface, KSZ8851_ISR, ISR_TXIS ) ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } } if ( ( isr & ISR_RXIS )!= 0 ) { ksz8851WriteReg ( interface, <S2SV_ModStart> ( interface, KSZ",0
160,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_quantization ( VP9_COMMON <S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
161,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> p_buf, msglen )",1
162,"<S2SV_ModStart> fp ) ; if ( fp == NULL ) { log_error ( ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s: <S2SV_blank> %s"", __func__, file, strerror ( errno ) ) ; goto sslerr ; } <S2SV_ModStart> fp ) ; if ( fp == NULL ) { log_error ( ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s: <S2SV_blank> %s"", __func__, file, strerror ( errno ) ) ; goto sslerr ; } <S2SV_ModStart> fp ) ; if ( fp == NULL ) { log_error ( ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s: <S2SV_blank> %s"", __func__, file, strerror ( errno ) ) ; goto sslerr ; } <S2SV_ModStart> fp ) ; if ( fp == NULL ) { log_error ( ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s: <S2SV_blank> %s"", __func__, file, strerror ( errno ) ) ; goto sslerr ; } <S2SV_ModStart> fp ) ; if ( fp == NULL ) { log_error ( ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s: <S2SV_blank> %s"", __func__, file, str",0
163,"<S2SV_ModStart> ( ) ; strncat <S2SV_ModEnd> ( t1_buf_array, <S2SV_ModStart> t1_buf_array, t1_line_array, strlen ( t1_line_array )",0
164,"<S2SV_ModStart> int mi_col, <S2SV_ModEnd> BLOCK_SIZE subsize ) <S2SV_ModStart> int bsl = b_width_log2_lookup [ bsize ], hbs = ( 1 << bsize ) / 4 ; PARTITION_TYPE partition = partition_lookup [ bsl ] [ subsize ] ; assert ( bsize >= BLOCK_8X8 ) ; if ( mi_row >= cm -> mi_rows || mi_col >= cm -> mi_cols ) return ; switch ( partition ) { case PARTITION_NONE : set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; break ; case PARTITION_VERT : * get_sb_index ( x, subsize ) = 0 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in",0
165,"<S2SV_ModStart> key_ref ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) { ret = - ENOKEY ; goto error2 ; }",1
166,<S2SV_ModStart> u4_first_slice_is_aud ) { <S2SV_ModEnd> ps_dec -> u1_first_slice_is_aud <S2SV_ModStart> ps_dec -> u1_first_slice_is_aud = 1 ; } else { <S2SV_ModEnd> ps_dec -> u1_first_slice_is_aud <S2SV_ModStart> ps_dec -> u1_first_slice_is_aud = 0 ; } if ( 0!= ps_dec -> u1_first_slice_is_aud ) { <S2SV_ModEnd> ps_dec -> u1_first_slice_is_aud <S2SV_ModStart> ps_dec -> u1_first_slice_is_aud = 0 ; } else { <S2SV_ModEnd> ps_dec -> u1_first_slice_is_aud <S2SV_ModStart> ps_dec -> u1_first_slice_is_aud = 0 ; } if ( 0!= ps_dec -> u1_first_slice_is_aud ) { <S2SV_ModEnd> ps_dec -> u1_first_slice_is_aud <S2SV_ModStart> ps_dec -> u1_first_slice_is_aud = 0 ; } else { <S2SV_ModEnd> ps_dec -> u1_first_slice_is_aud <S2SV_ModStart> ps_dec -> u1_first_,0
167,"<S2SV_ModStart> var_off ) ; switch ( opcode ) { case BPF_ADD : if ( signed_add_overflows ( dst_reg -> smin_value, smin_val ) || signed_add_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else { dst_reg -> smin_value += smin_val ; dst_reg -> smax_value += smax_val ; } if ( dst_reg -> umin_value + umin_val < umin_val || dst_reg -> umax_value + umax_val < umax_val ) { dst_reg -> umin_value = 0 ; dst_reg -> umax_value = U64_MAX ; } else { dst_reg -> umin_value += umin_val ; dst_reg -> umax_value += umax_val ; } <S2SV_ModStart> var_off ) ; <S2SV_ModEnd> if ( src_known",0
168,"<S2SV_ModStart> goto lookup_out ; if ( direntry -> d_name. len > PATH_MAX ) { cifs_dbg ( FYI, ""direntry <S2SV_blank> name <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", direntry -> d_name. len ) ; rc = - ENAMETOOLONG ; goto lookup_out ; }",0
169,"<S2SV_ModStart> ; opt = rcu_dereference_protected ( <S2SV_ModStart> tcp_opt. opt, sock_owned_by_user ( sk ) <S2SV_ModStart> ; opt = rcu_dereference_protected ( <S2SV_ModStart> tcp_opt. opt, sock_owned_by_user ( sk ) <S2SV_ModStart> ; opt = rcu_dereference_protected ( <S2SV_ModStart> tcp_opt. opt, sock_owned_by_user ( sk ) <S2SV_ModStart> ; opt = rcu_dereference_protected ( <S2SV_ModStart> tcp_opt. opt, sock_owned_by_user ( sk ) <S2SV_ModStart> ; opt = rcu_dereference_protected ( <S2SV_ModStart> tcp_opt. opt, sock_owned_by_user ( sk ) <S2SV_ModStart> ; opt = rcu_dereference_protected ( <S2SV_ModStart> tcp_opt. opt, sock_owned_by_user ( sk ) <S2SV_ModStart> ; opt = rcu_dereference_protected ( <S2SV_ModStart> tcp_opt. opt, sock_owned_by_user ( sk ) <S2SV_ModStart> ; opt = rcu_dereference_protected ( <S2SV_ModStart> tcp_opt. opt, sock_owned_by_user ( sk )",0
170,"<S2SV_ModStart> svc_ctx ) { const SvcInternal * const si = get_svc_internal ( svc_ctx ) ; if ( svc_ctx == NULL || si == NULL ) return NULL ; svc_log_reset ( svc_ctx ) ; encode_frame_count = si -> encode_frame_count ; if ( si -> encode_frame_count <= 0 ) return vpx_svc_get_message ( svc_ctx ) ; svc_log ( svc_ctx, SVC_LOG_INFO, ""\\n"" ) ; number_of_keyframes = encode_frame_count / si -> kf_dist + 1 ; for ( i = 0 ; i < si -> layers ; ++ i ) { int number_of_frames = encode_frame_count ; if ( svc_ctx -> encoding_mode == ALT_INTER_LAYER_PREDICTION_IP && ( i == 1 || i == 3 ) ) { number_of_frames -= number_of_keyframes ; } svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3",0
171,"<S2SV_ModStart> ( screen -> buffers [ 0 ] ) free ( screen -> buffers [ 0 ] ) ; if ( screen -> buffers [ 1 ] ) free ( screen -> buffers [ 1 ] ) ; if ( screen -> sb_buffer ) vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; if ( new_cols > old_cols ) { VTermRect rect ; rect. start_row = 0 ; rect. end_row = old_rows ; rect. start_col = old_cols ; rect. end_col = new_cols ; scrollrect ( rect, screen -> buffer, 0, user ) ; vterm_screen_flush_damage ( screen ) ; } if ( new_cols > old_cols ) { VTermRect rect ; rect. start_row = 0 ; rect. end_row = new_rows ; rect. start_col = old_cols ; rect. end_col = new_cols ; scrollrect ( rect, screen -> buffer, 0, user ) ; vterm_screen_flush",0
172,"<S2SV_ModStart> n ) { <S2SV_ModEnd> char * literal_start <S2SV_ModStart> * str ; for ( ; * str < end ; ( * str ) ++ ) { char ch = * * str ; if (! in_named_escape && ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 1 ; } else if ( in_named_escape && ch == '}' ) { in_named_escape = 0 ; } else if ( ch == '{' || ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } if ( ch == '{' ) { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; return - 1 ; } } if ( ch == '}' ) { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; return -",0
173,"<S2SV_ModStart>, g_settings_dump_location ) ; if ( dd ) { dd_close ( dd ) ; dd = NULL ; } log_info ( ""problem <S2SV_blank> id: <S2SV_blank> \'%s\'"", dd -> dd_dirname ) ; if ( dd ) { dd_close ( dd ) ; dd = create_dump_dir_from_problem_data ( pd, g_settings_dump_location ) ; } else { dd = create_dump_dir_from_problem_data ( pd, g_settings_dump_location ) ; } char * problem_id = NULL ; if ( dd ) { problem_id = xstrdup ( dd -> dd_dirname ) ; dd_close ( dd ) ; } log_info ( ""problem <S2SV_blank> id: <S2SV_blank> \'%s\'"", problem_id ) ; if ( dd ) { problem_id = xstrdup ( dd -> dd_dirname ) ; dd_close ( dd ) ; } log_info ( ""problem <S2SV_blank> id: <S2SV_blank> \'%s\'"", problem_id ) ; dd = create_dump_dir_from_problem_data ( pd, g_settings_dump_location )",0
174,<S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ),0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
176,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mv_stride <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; check_here <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; check_here <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; check_here <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; check_here <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; check_here <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; check_here <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; check_here <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; check_here <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; check_here <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; check_here <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; check_here <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; check_here <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; check_here <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; check_here <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; check_",0
177,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> -> left_context ) ) ; memset ( xd -> left_seg_context, 0, sizeof ( xd -> left_seg_context ) ) ; for ( mi_col = tile -> mi_col_start ; mi_col < tile -> mi_col_end ; mi_col += MI_BLOCK_SIZE ) { MODE_INFO * * mi_8x8 = cm -> mi_grid_visible + idx_str ; MODE_INFO * * prev_mi_8x8 = cm -> prev_mi_grid_visible + idx_str ; BLOCK_SIZE bsize ; cpi -> mb. source_variance = UINT_MAX ; vp9_zero ( cpi -> mb. pred_mv ) ; switch ( cpi -> sf. partition_search_type ) { case VAR_BASED_PARTITION : choose_partitioning ( cpi, tile, mi_row, mi_col ) ; nonrd_use_partition ( cpi, tile, mi_",0
178,"<S2SV_ModStart> u_int8_t state ; memset ( & _dh, 0, sizeof ( _dh ) ) ;",0
179,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static void <S2SV_ModEnd> ip_options_get_finish ( struct <S2SV_ModStart> ip_options_get_finish ( struct ip_options_rcu <S2SV_ModEnd> * net, <S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> * opt, u32 <S2SV_ModEnd> optlen ) { <S2SV_ModStart> & 3 ) rcu_assign_pointer ( <S2SV_ModStart> __data [ optlen <S2SV_ModEnd> ] = IPOPT_END <S2SV_ModStart> = IPOPT_END ; rcu_assign_pointer ( <S2SV_ModStart> = optlen ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
180,"<S2SV_ModStart> ""Connection"" ) ; bool found_upgrade = false ; int count ; sds * tokens = sdssplitlen ( connection, strlen ( connection ), "","", 1, & count ) ; if ( tokens == NULL ) goto error ; for ( int i = 0 ; i < count ; i ++ ) { sds token = tokens [ i ] ; sdstrim ( token, "" <S2SV_blank> "" ) ; if ( strcasecmp ( token, ""Upgrade"" ) == 0 ) { found_upgrade = true ; break ; } } sdsfreesplitres ( tokens, count ) ; for ( int i = 0 ; i < count ; i ++ ) { sds token = tokens [ i ] ; sdstrim ( token, "" <S2SV_blank> "" ) ; if ( strcasecmp ( token, ""Upgrade"" ) == 0 ) { found_upgrade = true ; break ; } } sdsfreesplitres ( tokens, count ) ; if (! found_upgrade ) goto error ; } const char * ws_version = http_request_get_header ( info -> request, ""Sec-WebSocket-Version"" ) ; if ( ws_version == NULL || strcmp ( ws_version, ""13"" )!= 0 ) goto error",0
181,"<S2SV_ModStart> * findalldevs_if ; uint32 nif = 0 ; if ( rpcapd_discard ( pars -> sockctrl, plen ) == - 1 ) { return - 1 ; } if ( pcap_findalldevs ( & alldevs, errmsgbuf ) == - 1 ) goto error ; if ( alldevs == NULL ) { if ( rpcap_senderror ( pars -> sockctrl, ver, PCAP_ERR_NOREMOTEIF, ""No <S2SV_blank> interfaces <S2SV_blank> found! <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> libpcap/WinPcap <S2SV_blank> is <S2SV_blank> properly <S2SV_blank> installed"" "" <S2SV_blank> and <S2SV_blank> you <S2SV_blank> have <S2SV_blank> the <S2SV_blank> right <S2SV_blank> to <S2SV_blank> access <S2SV_blank> to <S2SV_blank> the <S2SV_blank> remote <S2SV_blank> device."", errbuf ) == - 1 ) { rpcapd_log ( LOGPRIO_ERROR, ""Send <S2SV_blank> to <S2SV_blank> client <S2SV_blank> failed: <S2SV_blank> %s"", errbuf ) ; return - 1 ; } return 0 ; } for ( d = alldevs ; d!= NULL ; d = d -> next ) { <S2SV_ModStart> d -> description <S2SV_ModEnd> ) ; if <S2SV_ModStart> d -> name <S2SV_ModEnd> ) ; plen <S2SV_ModStart> struct rpcap_findalldevs_if ) ; if ( sock_bufferize ( NULL",0
182,"<S2SV_ModStart> ; struct dump_dir dd ; dd = dd_create ( path, client_uid, DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; } dd_create_basic_files ( dd, client_uid, NULL ) ; dd_save_text ( dd, FILENAME_ABRT_VERSION, VERSION ) ; gpointer gpkey = g_hash_table_lookup ( problem_info, FILENAME_CMDLINE ) ; if (! gpkey ) { char * cmdline = get_cmdline ( pid ) ; if ( cmdline ) { dd_save_text ( dd, FILENAME_CMDLINE, cmdline ) ; free ( cmdline ) ; } } char uid_str [ sizeof ( long ) * 3 + 2 ] ; sprintf ( uid_str, ""%lu"", ( long ) client_uid ) ; dd_save_text ( dd, FILENAME_UID, uid_str ) ; GHashTableIter iter ; gpointer gpvalue ; g_hash_table_iter_init ( & iter, problem_info ) ; while (",0
183,"<S2SV_ModStart> -> columns - 2 ) ; x += 2 ) { index = ConstrainColormapIndex ( image, ( * p >> 6 ) & 0x3 ) ; SetPixelIndex ( indexes + x, index ) ; q ++ ; p ++ ; } if ( ( image -> columns % 8 )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 8 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x + bit, index ) ; q ++ ; } p ++ ; } if ( ( image -> columns % 8 )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 8 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x + bit, index ) ; q ++ ; } p ++ ; } if ( ( image -> columns % 8 )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns %",0
184,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
185,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
186,"<S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> )",0
187,"<S2SV_ModStart>! ptrace_has_cap ( task_cred ( task ) <S2SV_ModEnd> -> user_ns,",0
188,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
189,<S2SV_ModStart> ps_sps ) ; if ( 0 == ps_parse -> s_sei_params. i1_sei_parameters_present_flag ) { ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 0 ; ps_parse -> s_sei_params. i4_sei_user_data_registered_ITU_t_t35 = 0 ; ps_parse -> s_sei_params. i4_sei_user_data_registered_ITU_t_t35 = 0 ; ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 0 ; ps_parse -> s_sei_params. i4_sei_user_data_registered_ITU_t_t35 = 0 ; ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 0 ; ps_parse -> s_sei_params. i4_sei_user_data_registered_ITU_t_35 = 0 ; ps_parse -> s_sei_params. i1_sei_,0
190,"<S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ), GFP_KERNEL <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ), GFP_KERNEL <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ), GFP_KERNEL <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ), GFP_KERNEL <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ), GFP_KERNEL <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ), GFP_KERNEL <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ), GFP_KERNEL <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ), GFP_KERNEL <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ), GFP_KERNEL <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> size",0
191,"<S2SV_ModStart> * name, my_bool <S2SV_ModEnd> rep_quick ) { <S2SV_ModStart> ) ) ; <S2SV_ModEnd> DBUG_PRINT ( ""info"" <S2SV_ModStart> ) ) ; <S2SV_ModEnd> DBUG_PRINT ( ""info"" <S2SV_ModStart> ) ) ; <S2SV_ModEnd> DBUG_PRINT ( ""info"" <S2SV_ModStart> ) ) ; <S2SV_ModEnd> DBUG_PRINT ( ""info"" <S2SV_ModStart> ) ) ; <S2SV_ModEnd> DBUG_PRINT ( ""info"" <S2SV_ModStart> ) ) ; <S2SV_ModEnd> DBUG_PRINT ( ""info"" <S2SV_ModStart> ) ) ; <S2SV_ModEnd> DBUG_PRINT ( ""info"" <S2SV_ModStart> ) ) ; <S2SV_ModEnd> DBUG_PRINT ( ""info"" <S2SV_ModStart> ) ) ; <S2SV_ModEnd> DBUG_PRINT ( ""info"" <S2SV_ModStart> ) ) ; <S2SV_ModEnd> DBUG_PRINT ( ""info"" <S2SV_ModStart> ) ) ; <S2SV_ModEnd> DBUG_PRINT ( ""info"" <S2SV_ModStart> ) ) ; <S2SV_ModEnd> DBUG_PRINT ( ""info"" <S2SV_ModStart> ) ) ; <S2SV_ModEnd> DBUG_PRINT ( ""info"" <S2SV_ModStart> ) ) ; <S2SV_ModEnd> DBUG_PRINT ( ""info"" <S2SV_ModStart> ) ) ; <S2SV_ModEnd> DBUG_PRINT ( ""info"" <S2SV_ModStart> ) ) ; <S2SV_ModEnd> DBUG_PRINT ( ""info"" <S2SV_ModStart> ) ) ; <S2SV_ModEnd> DBUG_PRINT ( ""info"" <S2SV_ModStart> ) )",0
192,"<S2SV_ModStart> ) ; } if ( pcount > MaxAllocSize / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", pcount, ( int ) ( MaxAllocSize / sizeof ( Pairs ) ) ) ) ) ;",0
193,"<S2SV_ModStart> val ) ; if (! <S2SV_ModStart>, val ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> invalid <S2SV_blank> variable"", r -> name )",0
194,"<S2SV_ModStart> agoo_log_cat ( & agoo_req_url <S2SV_ModEnd>, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", <S2SV_ModStart> agoo_log_cat ( & agoo_req_url <S2SV_ModEnd>, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", <S2SV_ModStart> agoo_log_cat ( & agoo_req_url <S2SV_ModEnd>, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", <S2SV_ModStart> agoo_log_cat ( & agoo_req_url <S2SV_ModEnd>, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", <S2SV_ModStart> agoo_log_cat ( & agoo_req_url <S2SV_ModEnd>, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", <S2SV_ModStart> agoo_log_cat ( & agoo_req_url <S2SV_ModEnd>, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", <S2SV_ModStart> agoo_log_cat ( & agoo_req_url <S2SV_ModEnd>, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", <S2SV_ModStart> agoo_log_cat ( & agoo_req_url <S2SV_ModEnd>, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", <S2SV_ModStart> agoo_log_cat ( & agoo_req_url <S2SV_ModEnd>, ""%s <S2SV_blank> %ll",0
195,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_high_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> 256 ] ; tran_high_t <S2SV_ModEnd> * outptr = <S2SV_ModStart> & out [ 16 <S2SV_ModEnd> ] ; int",0
196,"<S2SV_ModStart> ; if (! g_key_file_set_string ( keyfile, expected_dbus_name, name <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if (! g_key_file_set_string ( keyfile, expected_dbus_name, name <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if (! g_key_file_set_string ( keyfile, expected_dbus_name, name <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if (! g_key_file_set_string ( keyfile, expected_dbus_name, name <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if (! g_key_file_set_string ( keyfile, expected_dbus_name, name <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if (! g_key_file_set_string ( keyfile, expected_dbus_name, name <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if (! g_key_file_set_string ( keyfile, expected_dbus_name, name <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if (! g_key_file_set_string ( keyfile, expected_dbus_name, name <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if (! g_key_file_set_string ( keyfile, expected_dbus_",0
197,"<S2SV_ModStart> '\\0' ) ; <S2SV_ModEnd> const list_node_t * <S2SV_ModStart> node ) ; char * temp_filename = osi_calloc ( strlen ( filename ) + 5 ) ; if (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } for ( const section_t * node = list_begin ( config -> sections ) ; node!= list_end ( config -> sections ) ; node = list_next ( node ) ) { char * temp_filename = osi_calloc ( strlen ( filename ) + 5 ) ; if (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__",0
198,"<S2SV_ModStart> ; ND_TCHECK2 ( tlv_len <S2SV_ModEnd>, VTP_VLAN_LEN ) <S2SV_ModStart> ; ND_TCHECK2 ( tlv_len <S2SV_ModEnd>, VTP_MAC_LEN ) <S2SV_ModStart> ; ND_TCHECK2 ( tlv_len <S2SV_ModEnd>, VTP_MAC_LEN ) <S2SV_ModStart> ; ND_TCHECK2 ( tlv_len <S2SV_ModEnd>, VTP_MAC_LEN ) <S2SV_ModStart> ; ND_TCHECK2 ( tlv_len <S2SV_ModEnd>, VTP_MAC_LEN ) <S2SV_ModStart> ; ND_TCHECK2 ( tlv_len <S2SV_ModEnd>, VTP_MAC_LEN ) <S2SV_ModStart> ; ND_TCHECK2 ( tlv_len <S2SV_ModEnd>, VTP_MAC_LEN ) <S2SV_ModStart> ; ND_TCHECK2 ( tlv_len <S2SV_ModEnd>, VTP_MAC_LEN ) <S2SV_ModStart> ; ND_TCHECK2 ( tlv_len <S2SV_ModEnd>, VTP_MAC_LEN ) <S2SV_ModStart> ; ND_TCHECK2 ( tlv_len <S2SV_ModEnd>, VTP_MAC_LEN ) <S2SV_ModStart> ; ND_TCHECK2 ( tlv_len <S2SV_ModEnd>, VTP_MAC_LEN ) <S2SV_ModStart> ; ND_TCHECK2 ( tlv",0
199,"<S2SV_ModStart>, target, NULL ) ; else if ( ctxt -> parserState == XML_PARSER_ERROR ) xmlFatalErrMsg ( ctxt, XML_ERR_ENTITY_BOUNDARY, ""ParsePI: <S2SV_blank> PI <S2SV_blank> declaration <S2SV_blank> doesn\'t <S2SV_blank> start <S2SV_blank> and <S2SV_blank> stop <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> entity\\n"" ) ; else if ( ctxt -> parserState == XML_PARSER_ERROR ) xmlFatalErrMsg ( ctxt, XML_ERR_ENTITY_BOUNDARY, ""ParsePI: <S2SV_blank> PI <S2SV_blank> declaration <S2SV_blank> doesn\'t <S2SV_blank> start <S2SV_blank> and <S2SV_blank> stop <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> entity\\n"" ) ; else if ( ctxt -> parserState == XML_PARSER_ERROR ) xmlFatalErrMsg ( ctxt, XML_ERR_ENTITY_BOUNDARY, ""ParsePI: <S2SV_blank> PI <S2SV_blank> declaration <S2SV_blank> doesn\'t <S2SV_blank> stop <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> entity\\n"" ) ; else if ( ctxt -> parserState == XML_PARSER_ERROR ) xmlFatalErrMsg ( ctxt, XML_ERR_ENTITY_BOUNDARY, ""ParsePI: <S2SV_blank> PI <S2SV_blank> declaration <S2SV_blank> doesn\'t <S2SV_blank> start <S2SV_blank> and <S2SV_blank> stop <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> entity\\n"" ) ; else if (",0
200,"<S2SV_ModStart> ( ) ; size_t <S2SV_ModEnd> rv = Socket_print <S2SV_ModStart> ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %lu\\r\\n"" <S2SV_ModEnd> ""%s"" ""\\r\\n"" ""%s""",0
201,"<S2SV_ModStart> ) ; } if ( safe_chown ( dest, getuid ( ), getgid ( ) ) < 0 ) errExit ( ""safe_chown"" ) ; if ( safe_chmod ( dest, S_IRUSR | S_IWUSR ) < 0 ) errExit ( ""safe_chmod"" ) ; <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> unlink ( src",0
202,<S2SV_ModStart>!= BFA_STATUS_OK ) { kfree ( fcstats ) ; <S2SV_ModStart> return NULL ; },1
203,"<S2SV_ModStart> { value -> x0 <S2SV_ModEnd> = MinF ( <S2SV_ModStart>, MaxF ( 1.0f, value -> x0 ) ) ; value -> x1 <S2SV_ModEnd> = MinF ( <S2SV_ModStart> ; value -> y0 <S2SV_ModEnd> = MinF ( <S2SV_ModStart>, MaxF ( 1.0f, value -> y0 ) ) ; value -> y1 <S2SV_ModEnd> = MinF ( <S2SV_ModStart>, MaxF ( 1.0f, value -> y1 ) ) ; value -> y1 <S2SV_ModEnd> = MinF ( <S2SV_ModStart>, MaxF ( 1.0f, value -> y1 ) ) ; value -> y1 <S2SV_ModEnd> = MinF ( <S2SV_ModStart>, MaxF ( 1.0f, value -> y1 ) ) ; value -> z0 <S2SV_ModEnd> = MinF ( <S2SV_ModStart>, MaxF ( 1.0f, value -> z0 ) ) ; * value = * value <S2SV_ModEnd> ; } <S2SV_null>",0
204,<S2SV_ModStart> -> sasl_mechanism ; g_free ( rec -> sasl_mechanism ) ; <S2SV_ModStart> -> sasl_username ; g_free ( rec -> sasl_username ) ; <S2SV_ModStart> -> sasl_password ; g_free ( rec -> sasl_password ) ;,0
205,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
206,"<S2SV_ModStart> o, datao ; if ( exif_mem_empty ( ne -> mem ) ) exif_log ( ne -> log, EXIF_LOG_CODE_NO_MEMORY, ""ExifMnoteCanon"", sizeof ( MnoteCanonEntry ) )",0
207,"<S2SV_ModStart> ""myisamchk"" ) ; if (! ( info = mi_open ( filename, ( param -> testflag & ( T_DESCRIPT | T_READONLY ) )? O_RDONLY : O_RDWR, HA_OPEN_FOR_REPAIR | ( ( param -> testflag & ( T_DESCRIPT | T_READONLY ) )? HA_OPEN_IGNORE_IF_LOCKED : ( ( param -> testflag & ( T_DESCRIPT | T_READONLY ) )? HA_OPEN_ABORT_IF_LOCKED : ( param -> testflag & ( T_DESCRIPT | T_READONLY ) ) )? HA_OPEN_ABORT_IF_LOCKED : ( ( param -> testflag & ( T_DESCRIPT | T_READONLY ) ) )? HA_OPEN_IGNORE_IF_LOCKED : ( ( param -> testflag & ( T_DESCRIPT | T_READONLY ) ) )? HA_OPEN_ABORT_IF_LOCKED : ( ( param -> testflag & ( T_DESCRIPT | T_READONLY ) )? HA_OPEN_IGNORE_IF_LOCKED : ( ( param",0
208,"<S2SV_ModStart> olen ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> long hex ; <S2SV_ModEnd> if (! <S2SV_ModStart> hex ) ; if (! <S2SV_ModEnd> Curl_convert_from_network ( handle <S2SV_ModStart>, 1 ) ) { free ( ns ) ; return NULL ; } string += 2 ; alloc -= 2 ; } ns [ strindex ++ ] = in ; string ++ ; } ns [ strindex ] = 0 ; if ( olen ) * olen = strindex ; if ( ns ) return ns <S2SV_ModEnd> ; return NULL <S2SV_ModStart> NULL ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
209,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
210,"<S2SV_ModStart> ; def -> session_setup = usm_session_init ; def -> handle_report = usm_handle_report ; def -> probe_engineid = usm_discover_engineid ; def -> post_probe_engineid = usm_create_user_from_session_hook ; register_sec_mod ( USM_SEC_MODEL_NUMBER, ""usm"", def ) ; if ( register_sec_mod ( USM_SEC_MODEL_NUMBER, ""usm"", def )!= SNMPERR_SUCCESS ) { SNMP_FREE ( def ) ; snmp_log ( LOG_ERR, ""could <S2SV_blank> not <S2SV_blank> register <S2SV_blank> usm <S2SV_blank> sec <S2SV_blank> mod\\n"" ) ; return ; } def -> pdu_free_state_ref = usm_free_usmStateReference ; register_config_handler ( ""snmp"", ""defAuthType"", snmpv3_authtype_conf, NULL, ""MD5|SHA|SHA-512|SHA-384|SHA-256|SHA-224"" ) ; register_config_handler ( ""snmp"", ""defPrivType"", snmpv3_authtype",0
211,<S2SV_ModStart> NULL ; return <S2SV_ModEnd> match ( prog,0
212,<S2SV_ModStart> idx ] ; <S2SV_ModEnd> switch ( action <S2SV_ModStart> ) ; } <S2SV_ModEnd> return SNMP_ERR_NOERROR ;,0
213,<S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned char ) <S2SV_ModStart> pixels ++ = ( unsigned,0
214,<S2SV_ModStart> timer ) ; spin_lock_irq ( & slave_active_lock ) ; <S2SV_ModStart> open_list ) { <S2SV_ModEnd> _snd_timer_stop ( slave <S2SV_ModStart> = NULL ; list_del_init ( & slave -> ack_list ) ; <S2SV_ModStart> slave_active_lock ) ; spin_unlock ( & slave_active_lock ) ;,0
215,<S2SV_ModStart> -> u1_dpb_commands_read ) { <S2SV_ModStart> ps_dec ) ; } else { ps_dec -> u4_bitoffset = 0 ; },0
216,"<S2SV_ModStart> decode ) { uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > info -> rasterSize || widthOverflow > 0 || heightOverflow > 0 ) { void * tmpRasterBits = reallocarray ( info -> rasterBits, newRasterSize ) ; <S2SV_ModStart> -> originalHeight ; <S2SV_ModEnd> if ( newRasterSize",0
217,"<S2SV_ModStart> -> validator -> passwd ) ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> passwd, 0, ""*()"" ) ; if ( size!= conn -> validator -> passwd. len ) return ret_error ; ret = init_filter ( ldap, props, conn ) ; if ( ret!= ret_ok ) return ret ; re = ldap_search_s ( ldap -> conn, props -> basedn. buf, LDAP_SCOPE_SUBTREE, props -> passwd. buf, attrs, 0, & message ) ; if ( re!= 1 ) { ldap_msgfree ( message ) ; return ret_not_found ; } first = ldap_first_entry ( ldap -> conn, message ) ; if ( first == NULL ) { ldap_msgfree ( message ) ; return ret_not_found ; } dn = ldap_get_dn ( ldap -> conn, first ) ; if ( dn == NULL ) { ldap_msgfree ( message ) ; return ret_error ; } ldap_msgfree ( message ) ; ret = validate_dn ( props, dn, conn -> validator -> passwd. buf ) ; if ( ret!= ret_ok ) return ret",0
218,"<S2SV_ModStart> bus ] ; if ( bi == NULL ) { pr_err ( ""%s: <S2SV_blank> pci <S2SV_blank> [%s] <S2SV_blank> has <S2SV_blank> wrong <S2SV_blank> bus <S2SV_blank> %d <S2SV_blank> info!\\n"", __func__, dev -> name, dev -> bus ) ; return ; } <S2SV_ModEnd> si = &",1
219,"<S2SV_ModStart>, timeo ) <S2SV_ModEnd> ; if (",1
220,<S2SV_ModStart> += 9 ; ( <S2SV_ModStart> isspace ( * ( s + 9 ) <S2SV_ModEnd> ) ; s <S2SV_ModStart> * t && <S2SV_ModEnd> isspace ( * <S2SV_ModStart> isspace ( * ( t + 1 ) <S2SV_ModEnd> ) ) t,0
221,"<S2SV_ModStart> = select ( 1, & uipc_main. read_set, NULL, NULL, NULL ) ; if ( result == 0 ) { BTIF_TRACE_EVENT ( ""select <S2SV_blank> timeout"" ) ; continue ; } else if ( result < 0 ) { BTIF_TRACE_EVENT ( ""select <S2SV_blank> failed <S2SV_blank> %s"", strerror ( errno ) ) ; continue ; } UIPC_LOCK ( ) ; uipc_check_interrupt_locked ( ) ; uipc_check_task_flags_locked ( ) ; uipc_check_fd_locked ( UIPC_CH_ID_AV_AUDIO ) ; for ( ch_id = 0 ; ch_id < UIPC_CH_NUM ; ch_id ++ ) { if ( ch_id!= UIPC_CH_ID_AV_AUDIO ) uipc_check_fd_locked ( ch_id ) ; } UIPC_UNLOCK ( ) ; uipc_check_task_flags_locked ( ) ; uipc_check_fd_locked ( UIPC_CH_ID_AV_AUDIO ) ; for",0
222,<S2SV_ModStart> msixcap msixcap ; if ( msgnum < 1 || <S2SV_ModEnd> msgnum <= MAX_MSIX_TABLE_ENTRIES <S2SV_ModStart> msix_table_init ( dev <S2SV_ModEnd> ) ; pci_populate_msixcap,0
223,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",1
224,<S2SV_ModStart> == NULL ) return KRB5KDC_ERR_PREAUTH_FAILED <S2SV_ModEnd> ; status = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> X509_NAME_free ( is,0
225,<S2SV_ModStart> cpi ) { if ( cpi -> oxcf. lossless ) { return ONLY_4X4 ; } else if ( cpi -> common. current_video_frame == 0 ) { return TX_MODE_SELECT ; } else { if ( cpi -> sf. tx_size_search_method == USE_LARGESTALL ) { return ALLOW_32X32 ; } else if ( cpi -> sf. tx_size_search_method == USE_FULL_RD ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ TX_MODE_SELECT ]? ALLOW_32X32 : TX_MODE_SELECT ; } else { unsigned int total = 0 ; int i ; for ( i = 0 ; i < TX_SIZES ; ++ i ) total += cpi -> tx_stepdown_count [ i ] ; if ( total ) { const double fraction = ( double ) cpi -> tx_stepdown_count [ 0,0
226,<S2SV_ModStart> printval ) ; if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPRE,0
227,<S2SV_ModStart> buf1 -> size > <S2SV_ModEnd> buf2 -> size,0
228,"<S2SV_ModStart> ) + size ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) { info = vmalloc ( sz ) ; if (! info ) return NULL ; } memset ( info, 0, sizeof ( * info ) ) <S2SV_ModStart> ( sz <= <S2SV_ModEnd> PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER <S2SV_ModStart> PAGE_ALLOC_COSTLY_ORDER ) ) { info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) { info = vmalloc ( sz ) ; if (! info ) return NULL ; } memset ( info, 0, sizeof ( * info ) ) ; info -> size = size ; return info ; } <S2SV_ModEnd> info = kmalloc",0
229,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,1
230,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs,",0
231,"<S2SV_ModStart> ; r = safe_event_add ( b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r < 0 ) { log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } log_info ( ""Watching <S2SV_blank> system <S2SV_blank> buttons <S2SV_blank> on <S2SV_blank> /dev/input/%s <S2SV_blank> (%s)"", b -> name, name ) ; r = sd_event_add_io ( b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r < 0 ) { log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } log_info ( ""Watching <S2SV_blank> system <S2SV_blank> buttons <S2SV_blank> on <S2SV_blank> /dev/input/%s <S2SV_blank> (%s)"", b -> name, name ) ; return 0 ; fail : b -> fd = safe_close ( b -> fd ) ; return r <S2SV_ModEnd> ; } <S2SV_null>",0
232,<S2SV_ModStart> ; if (! errors ) { errors = 0 ; } <S2SV_ModEnd> return TEST_ERR_MAJOR_BAD ;,0
233,<S2SV_ModStart> -> lun ) sas_eh_finish_cmd <S2SV_ModEnd> ( cmd ),1
234,"<S2SV_ModStart>, end_col_offset ; bool is_function ; <S2SV_ModStart> 2 ; } is_function = TYPE ( CHILD ( n, name_i + 3 ) ) == FUNCTION && TYPE ( CHILD ( n, name_i + 4 ) ) == FUNCTION && TYPE ( CHILD ( n, name_i + 5 ) ) == FUNCTION && TYPE ( CHILD ( n, name_i + 6 ) ) == FUNCTION && TYPE ( CHILD ( n, name_i + 7 ) ) == FUNCTION && TYPE ( CHILD ( n, name_i + 8 ) ) == FUNCTION && TYPE ( CHILD ( n, name_i + 9 ) ) == FUNCTION && TYPE ( CHILD ( n, name_i + 10 ) ) == FUNCTION && TYPE ( CHILD ( n, name_i + 11 ) ) == FUNCTION && TYPE ( CHILD ( n, name_i + 12 ) ) == FUNCTION && TYPE ( CHILD ( n, name_i + 13 ) ) == FUNCTION && TYPE ( CHILD ( n, name_i + 14 ) ) == FUNCTION && TYPE ( CHILD ( n, name_i + 14 ) ) == FUNCTION && TYPE ( CHILD ( n, name_i + 15",0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,"<S2SV_ModStart> ; } } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return NULL ; }",0
237,,1
238,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
239,"<S2SV_ModStart> if ( position >= <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> headend, 1, position - psf -> headend, psf ) ; psf -> headindex = position ; break ; case SEEK_CUR : if ( psf -> headindex + position < 0 ) break ; if ( psf -> headindex >= SIGNED_SIZEOF ( psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; if ( psf -> headindex + position >= <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> header",0
240,<S2SV_ModStart> u4_ofst ) ; if ( ps_cabac -> au1_ctxt_models == NULL ) { IHEVCD_ERROR_T ps_err = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_PARAMETER ; ps_cabac -> au1_ctxt_models = NULL ; ps_err = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_PARAMETER ; ps_cabac -> u4_ofst = 0 ; ps_err = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_PARAMETER ; ps_cabac -> au1_ctxt_models = NULL ; ps_err = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_PARAMETER ; ps_err = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_PARAMETER ; ps_err = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_PARAMETER ; ps_err = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_PARAMETER ; ps_cabac -> au1_ctxt_models = NULL ;,0
241,<S2SV_ModStart> type == MD_LINE_FENCEDCODE || CH ( pivot_line -> beg ) == CH ( pivot_line -> end ) <S2SV_ModStart> type == MD_LINE_FENCEDCODE || CH ( pivot_line -> beg ) == CH ( pivot_line -> end ) <S2SV_ModStart> -> type == MD_LINE_FENCEDCODE || CH ( pivot_line -> beg ) == CH ( pivot_line -> end ) || CH ( pivot_line -> end ) == CH ( pivot_line -> end ) || CH ( pivot_line -> beg ) == CH ( pivot_line -> end ) || CH ( pivot_line -> beg ) == CH ( pivot_line -> end ) || CH ( pivot_line -> end ) == CH ( pivot_line -> end ) || CH ( pivot_line -> beg ) == CH ( pivot_line -> end ) || CH ( line -> beg ) == CH ( pivot_line -> end ) || CH ( line -> beg ) == CH ( pivot_line -> end ) || CH ( line -> beg ) == CH ( pivot_line -> end ) || CH ( line -> beg ) == CH ( pivot_line -> end ) || CH ( line -> beg ) == CH ( pivot_,0
242,<S2SV_ModStart> perf_event_context * ctx <S2SV_ModEnd> ; struct task_struct <S2SV_ModStart> task_struct * task ; ctx = perf_event_ctx_lock ( event ) <S2SV_ModStart> event ) ; perf_event_ctx_unlock ( event ) <S2SV_ModEnd> ; } raw_spin_unlock_irq,0
243,<S2SV_ModStart> -> post_proc_flag = <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> noise_level ; # ifdef CONFIG_POSTPROC_VISUALIZER flags -> display_ref_frame_flag = ctx -> dbg_color_ref_frame_flag ; flags -> display_mb_modes_flag = ctx -> dbg_color_mb_modes_flag ; flags -> display_b_modes_flag = ctx -> dbg_display_b_modes_flag ; flags -> display_mv_flag = ctx -> dbg_display_mv_flag ; # else flags -> display_ref_frame_flag = ctx -> dbg_color_ref_frame_flag ; flags -> display_mb_modes_flag = ctx -> dbg_color_mb_modes_flag ; flags -> display_b_modes_flag = ctx -> dbg_color_b_modes_flag ; flags -> display_mv_flag = ctx -> dbg_display_mv_flag ; # <S2SV_ModStart> ; # endif <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
244,"<S2SV_ModStart> = 0 ; if ( msg_len < sizeof ( struct olsr_msg4 ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> too <S2SV_blank> short <S2SV_blank> msg_len <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6, msg_len ) ) ; goto trunc ; } <S2SV_ModStart> ) ) ; if ( msg_len < sizeof ( struct olsr_msg6 ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> too <S2SV_blank> short <S2SV_blank> msg_len <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6, msg_len ) ) ; goto trunc ; } <S2SV_ModStart> ) ) ; if ( msg_len < sizeof ( struct olsr_msg4 ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> too <S2SV_blank> short <S2SV_blank> msg_len <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6, msg_len ) ) ; goto trunc ; } <S2SV_ModStart> ) ) ; if ( msg_len < sizeof ( struct olsr_msg4 ) ) { ND_PRINT ( ( ndo, """,0
245,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> int64_t store_reg [ <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vpx_usec_timer_start ( & <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,0
246,"<S2SV_ModStart> stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; fs_logger2 ( ""clone"", dest <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> copy_file ( src <S2SV_ModStart> src, dest <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; if ( copy_file ( dest, getuid ( ), getgid ( ) ) == - 1 ) errExit ( ""fchown"" ) ; if ( chmod ( dest, 0600 ) == - 1 ) errExit ( ""fchmod"" ) ; } return 1 ; } return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
247,<S2SV_ModStart> ; sfb = <S2SV_ModEnd> ptr_hbe_txposer -> sfb_buf <S2SV_ModStart> ptr_hbe_txposer -> sfb_buf [ sfb ] ; sfb = <S2SV_ModEnd> ptr_hbe_txposer -> sfb_buf <S2SV_ModStart> ptr_hbe_txposer -> sfb_buf [ sfb ] ; sfb = <S2SV_ModEnd> ptr_hbe_txposer -> sfb_buf <S2SV_ModStart> ptr_hbe_txposer -> sfb_buf [ sfb ] ; sfb = <S2SV_ModEnd> ptr_hbe_txposer -> sfb_buf <S2SV_ModStart> ptr_hbe_txposer -> sfb_buf [ sfb ] ; sfb = <S2SV_ModEnd> ptr_hbe_txposer -> sfb_buf <S2SV_ModStart> ptr_hbe_txposer -> sfb_buf [ sfb ] ; sfb = <S2SV_ModEnd> ptr_hbe_txposer -> sfb_buf <S2SV_ModStart> ptr_hbe_txposer -> sfb_buf [ sfb ] ; sfb = <S2SV_ModEnd> ptr_hbe_txposer -> sfb_buf <S2SV_ModStart> ptr_hbe_txposer -> sfb_buf [ sfb ] ; sfb = <S2SV_ModEnd> ptr_hbe_txposer -> sfb,0
248,"<S2SV_ModStart> lua_module ) ; <S2SV_ModEnd> lua_authz_provider_spec * prov_spec <S2SV_ModStart> prov_spec -> args && prov_spec -> args -> nelts ) { int i ; if (! lua_checkstack ( L, prov_spec -> args -> nelts ) ) { ap_log_rerror ( APLOG_MARK, APLOG_ERR, 0, r, APLOGNO ( 02318 ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> \'%s\' <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> function)"", prov_spec -> function_name, prov_spec -> file_name ) ; ap_lua_release_state ( L, spec, r ) ; return AUTHZ_GENERAL_ERROR ; } lua_getglobal ( L, prov_spec -> function_name ) ; if (! lua_isfunction ( L, - 1 ) ) { ap_log_rerror ( APLOG_MARK, APLOG_CRIT, 0, r, APLOGNO ( 02319 ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> \'%s\' <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a <S2SV_blank>",0
249,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
250,<S2SV_ModStart> (! proto_end || proto_end + 3 >= url,0
251,"<S2SV_ModStart> end = path ; if ( end >= path_len ) return - FDT_ERR_NOSPACE <S2SV_ModStart> tag ) { case FDT_BEGIN_NODE : depth ++ ; if ( depth == FDT_MAX_DEPTH ) return - FDT_ERR_BADSTRUCTURE ; name = fdt_get_name ( fdt, offset, & len ) ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end!= path + 1 ) * end ++ = '/' ; strcpy ( end, name ) ; end += len ; stack [ depth ] = want ; if ( want == 1 ) stop_at = offset ; if ( str_in_list ( path, inc, inc_count ) ) want = 2 ; else if ( end!= path + 1 ) * end ++ = '/' ; strcpy ( end, name ) ; end += len ; <S2SV_ModStart> - FDT_ERR_BADSTRUCTURE ; <S2SV_ModEnd> if ( end",0
252,<S2SV_ModStart> ; if ( <S2SV_ModEnd> server. bgsavechildpid <S2SV_ModStart> server. bgsavechildpid == - 1 || <S2SV_ModEnd> server. bgrewritechildpid <S2SV_ModStart> server. bgrewritechildpid == - 1 || server. maxidletime == - 1 || server. maxidletime == - 1 || server. maxidletime == - 1 || server. maxidletime == - 1 || server. maxidletime == - 1 || server. maxidletime == - 1 || server. maxidletime == - 1 || server. maxidletime == - 1 || server. maxidletime == - 1 || server. maxidletime == - 1 || server. maxidletime == - 1 || server. maxidletime == - 1 || server. maxidletime == - 1 || server. maxidletime == - 1 || server. maxidletime == - 1 || server. maxidletime == - 1 || server. maxidletime == - 1 || server. maxidletime == - 1 || server. maxidletime == - 1 || server. maxidletime == - 1 || server. maxidletime == - 1 || server.,0
253,<S2SV_ModStart> channel ) ; <S2SV_ModEnd> set_description ( client,1
254,<S2SV_ModStart> book -> dim && i < n,1
255,"<S2SV_ModStart> action ) { if ( r < 0.0 ) return ; <S2SV_ModStart> action ) ; outpos += sprintf ( outpos, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", - r, - r, r * BzK, r, r ) ; outpos += sprintf ( outpos, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", r, r * BzK, r, r * BzK, r ) ;",0
256,"<S2SV_ModStart> { if ( other_w < 0 || other_h < 0 || this_w < 0 || this_h < 0 ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } if ( <S2SV_ModStart>, this_h ) || sf -> x_scale_fp == REF_INVALID_SCALE || sf -> y_scale_fp == REF_INVALID_SCALE ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } if ( sf -> x_scale_fp == REF_INVALID_SCALE || sf -> y_scale_fp == REF_INVALID_SCALE ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } sf -> x_scale_fp = get_fixed_point_scale_factor ( other_w, this_w ) ; sf -> y_scale_fp = get_fixed_point_scale_factor ( other_h, this_h ) ; sf -> x_step_q4 =",0
257,"<S2SV_ModStart> ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( buf ) { if ( oe_memset_s ( buf, count, 0, count )!= OE_OK ) OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( oe_syscall_recv_ocall ( & ret, sock -> host_fd, buf, count, flags )!= OE_OK ) OE_RAISE_ERRNO ( OE_EINVAL ) ; ret = - 1 ; if ( buf ) { if ( oe_memset_s ( buf, count, 0, count )!= OE_OK ) OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( oe_syscall_recv_ocall ( & ret, sock -> host_fd, buf, count, flags )!= OE_OK ) OE_RAISE_ERRNO ( OE_EINVAL )",0
258,<S2SV_ModStart> ; if ( msg. msg_namelen > sizeof ( src_info ) ) return - EINVAL ; if (,0
259,"<S2SV_ModStart> ( & sctp_net_ops ) ; sctp_protosw_exit ( ) ; sctp_protosw_exit ( ) ; sctp_v4_protosw_exit ( ) ; sctp_sysctl_unregister ( ) ; free_pages ( ( unsigned long ) sctp_assoc_hashtable, get_order ( sctp_assoc_hashsize * sizeof ( struct sctp_hashbucket ) ) ) ; kfree ( sctp_ep_hashtable ) ; free_pages ( ( unsigned long ) sctp_port_hashtable, get_order ( sctp_port_hashsize * sizeof ( struct sctp_bind_hashbucket ) ) ) ; percpu_counter_destroy ( & sctp_sockets_allocated ) ; rcu_barrier ( ) ; kmem_cache_destroy ( sctp_chunk_cachep ) ; kmem_cache_destroy ( sctp_bucket_cachep ) ; sctp_sysctl_unregister ( ) ; free_pages ( ( unsigned long ) sctp_assoc_hashsize * sizeof ( struct sctp_hashbucket ) ) ) ; free_pages ( ( unsigned",0
260,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> index ) ; if ( stream -> psnr_sse_total > 0.0 ) { <S2SV_ModStart> ) stream -> psnr_sse_total, 255.0, 255.0 ) ; } else { ovpsnr = sse_to_psnr ( ( double ) stream -> psnr_samples_total, 255.0, 255.0 ) ; } fprintf ( stderr, "" <S2SV_blank> %.3f"", ovpsnr ) ; for ( i = 0 ; i < 4 ; i ++ ) { fprintf ( stderr, "" <S2SV_blank> %.3f"", stream -> psnr_totals [ i ] / stream -> psnr_count ) ; } fprintf ( stderr, ""\\n"" ) ; return 0 <S2SV_ModEnd> ; } <S2SV_null>",0
261,<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen (,1
262,"<S2SV_ModStart> ( ""CIDER=0x%04"" PRIX16 <S2SV_ModEnd> ""\\r\\n"", ksz8851ReadReg <S2SV_ModStart> ; TRACE_DEBUG ( ""PHY1ILR=0x%04"" PRIX16 <S2SV_ModEnd> ""\\r\\n"", ksz8851ReadReg <S2SV_ModStart> ; TRACE_DEBUG ( ""PHY1IHR=0x%04"" PRIX16 <S2SV_ModEnd> ""\\r\\n"", ksz8851ReadReg <S2SV_ModStart> ( interface, KSZ8851_CIDER )!= KSZ8851_REV_A3_ID ) { return ERROR_WRONG_IDENTIFIER ; } ksz8851DumpReg ( interface ) ; context -> frameId = 0 ; context -> txBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; context -> rxBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; if ( context -> txBuffer == NULL || context -> rxBuffer == NULL ) { memPoolFree ( context -> txBuffer ) ; memPoolFree ( context -> rxBuffer ) ; return ERROR_OUT_OF_MEMORY ; } ksz8851WriteReg ( interface, KSZ8851_REG_MARH",0
263,"<S2SV_ModStart> skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
264,"<S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; <S2SV_ModEnd> fit_check_format ( fit <S2SV_ModStart>, IMAGE_SIZE_INVAL ) ; <S2SV_ModEnd> bootstage_mark ( bootstage_id <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; if ( fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; } <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; if ( fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; } bootstage_mark ( bootstage_id + BOOTSTAGE_SUB_FORMAT_OK ) ; if ( fit_uname ) { bootstage_mark ( bootstage_id + BOOTSTAGE_SUB_UNIT_NAME ) ; noffset = fit_image",0
265,"<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> uinput_fd, UI_DEV_DESTROY )",1
266,<S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> = rc -> avg_frame_bandwidth <S2SV_ModEnd> ; # endif,1
267,"<S2SV_ModStart> i ], ""-h"" ) == 0 || strcmp ( argv [ i ], ""--help"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""-h"" ) ; argv [ i ] = path ; setuid ( 0 ) ; setgid ( 0 ) ; execv ( path, ( char * const * ) argv ) ; perror ( path ) ; return 1 ; } for ( i = 1 ; i < argc ; i ++ ) if ( strcmp ( argv [ i ], ""-h"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""-h"" ) ; argv [ 0 ] = path ; setuid ( 0 ) ; setgid ( 0 ) ; setuid ( 0 ) ; setgid ( 0 ) ; execv ( path, ( char * const * ) argv ) ; perror ( path ) ; return 1 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
268,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
269,<S2SV_ModStart> ib ] ; dequant_ptr = d -> dequant ; coeff_ptr = b -> coeff ; qcoeff_ptr = b -> qcoeff ; dqcoeff_ptr = d -> dqcoeff ; i0 =! type ; eob = * d -> eob ; rdmult = mb -> rdmult * err_mult ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ; rddiv = mb -> rddiv ; best_mask [ 0 ] = best_mask [ 1 ] = 0 ;,0
270,"<S2SV_ModStart> FN_REFLEN ] ; my_snprintf ( buff, sizeof ( buff ), ""%s"", opt_basedir ) ; # ifdef __WIN__ strncat ( buff, ""/"", sizeof ( buff ) - strlen ( buff ) - 1 ) ; # else strncat ( buff, FN_DIRSEP, sizeof ( buff ) - strlen ( buff ) - 1 ) ; # endif buff [ sizeof ( buff ) - 1 ] = 0 ; my_free ( opt_basedir ) ; opt_basedir = my_strdup ( buff, MYF ( MY_FAE ) ) ; } } if (! opt_no_defaults && ( error = get_default_values ( ) ) ) ) { error = - 1 ; goto exit ; } strcpy ( operation, """" ) ; if ( ( error = check_options ( argc, argv, operation ) ) ) { goto exit ; } if ( opt_verbose ) { printf ( ""# <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> basedir <S2SV_blank> = <S2SV_blank> %s\\n"", opt_basedir ) ; printf ( ""# <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> datadir <S2SV_blank> = <S2SV_blank> %s\\n"", opt_datadir ) ; printf ( ""# <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> plugin",0
271,<S2SV_ModStart> decrypt_cb ) { ptrdiff_t <S2SV_ModEnd> n = ( <S2SV_ModStart> n = ( ptrdiff_t <S2SV_ModEnd> ) ( data_end,0
272,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; <S2SV_ModEnd> exit_func : free_server_handle,0
273,"<S2SV_ModStart> * returnrate, RATE_DISTORTION * returndistortion, RATE_DISTORTION <S2SV_ModEnd> * returnintra ) <S2SV_ModStart> # if CONFIG_TEMPORAL_DENOISING <S2SV_ModEnd> int zero_mv_sse = <S2SV_ModStart> int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # else unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # endif # endif mode_mv = mode_mv_sb [ sign_bias ] ; best_ref_mv. as_int = 0 ; best_mode. rd = INT_MAX ; best_mode. yrd = INT_MAX ; best_mode. intra_rd = INT_MAX ; # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # else unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX,",0
274,"<S2SV_ModStart> goto error ; if ( <S2SV_ModEnd> statbuf. st_size <S2SV_ModStart> statbuf. st_size < 0 ) { h -> size = 0 ; goto error ; } h -> addr = malloc ( h -> size ) ; if ( h -> addr == NULL ) goto error ; if ( full_read ( h -> fd, h -> addr, h -> size ) < h -> size ) goto error ; if ( close ( h -> fd ) == - 1 ) goto error ; h -> fd = - 1 ; } if (! h -> writable ) { h -> addr = mmap ( NULL, h -> size, PROT_READ, MAP_SHARED, h -> fd, 0 ) ; if ( h -> addr == MAP_FAILED ) goto error ; DEBUG ( 2, ""mapped <S2SV_blank> file <S2SV_blank> at <S2SV_blank> %p"", h -> addr ) ; } else { h -> addr = malloc ( h -> size ) ; if ( h -> addr == NULL ) goto error ; if ( full_read ( h -> fd, h -> addr, h -> size ) < h -> size ) goto error ; if ( close ( h -> fd ) == - 1 ) goto error ; h -> fd = - 1 ; } h ->",0
275,"<S2SV_ModStart> ; UWORD8 u1_profile_idc = 0, u1_level_idc = 0, u1_seq_parameter_set_id = 0 <S2SV_ModEnd> ; UWORD16 i2_max_frm_num",0
276,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * params = ( vpx_svc_parameters_t * ) <S2SV_ModStart> return VPX_CODEC_INVALID_PARAM ; <S2SV_ModEnd> if ( vp9_set_size_literal <S2SV_ModStart> ; cpi -> svc. spatial_layer_id = params -> spatial_layer ; cpi -> svc. temporal_layer_id = params -> temporal_layer ; cpi -> lst_fb_idx = params -> lst_fb_idx ; cpi -> gld_fb_idx = params -> gld_fb_idx ; cpi -> alt_fb_idx = params -> alt_fb_idx ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = params -> min_quantizer ; set_encoder_config ( & ctx -> oxcf, & ctx -> cfg, & ctx -> extra_cfg ) ; vp9_change_config ( ctx -> cpi, & ctx ->",0
277,"<S2SV_ModStart> out ) { uint32 bitspersample, samplesperpixel ; uint16 input_compression, input_photometric ; uint32 width, length ; struct cpTag * p ; uint32 width <S2SV_ModEnd> ; CopyField ( <S2SV_ModStart> samplesperpixel ) ; TIFFGetFieldDefaulted ( in, TIFFTAG_IMAGEWIDTH, & width ) ; CopyField ( TIFFTAG_IMAGELENGTH, & length ) ; CopyField ( TIFFTAG_BITSPERSAMPLE, bitspersample ) ; CopyField ( TIFFTAG_SAMPLESPERPIXEL, samplesperpixel ) ; if ( compression!= ( uint16 ) - 1 ) TIFFSetField ( out, TIFFTAG_COMPRESSION, compression ) ; else CopyField ( TIFFTAG_COMPRESSION, compression ) ; TIFFGetFieldDefaulted ( in, TIFFTAG_COMPRESSION, & input_compression ) ; TIFFGetFieldDefaulted ( in, TIFFTAG_PHOTOMETRIC, & input_photometric ) ; if ( input_compression == COMPRESSION_JPEG ) { if ( input_photometric == PHOTOMETRIC_RGB && jpegcolormode == JPEGCOLORMODE_RGB ) TIFFSetField ( out, TIFFTAG_PHOTOMETRIC, input",0
278,"<S2SV_ModStart> a ) { <S2SV_ModEnd> char * pn <S2SV_ModStart> = '\\0' ; if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; if (! S_ISLNK ( a -> mode ) ) { archive_set_error ( & a -> archive, 0, ""Removing <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; } pn [ 0 ] = c ; return ( 0 ) ; } else if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else { archive_set_error ( & a -> archive,",0
279,"<S2SV_ModStart> unsigned int link_count ; struct kernel_lb_addr loc ; struct indirectEntry * ie ; ie = ( struct indirectEntry * ) ibh -> b_data <S2SV_ModStart> ibh ) { <S2SV_ModEnd> loc = lelb_to_cpu <S2SV_ModStart> extLength && ( ibh = udf_read_ptagged ( inode -> i_sb, & loc, 0, & ident ) ) ) { if ( ident == TAG_IDENT_FE || ident == TAG_IDENT_EFE ) { memcpy ( & iinfo -> i_location, & loc, sizeof ( struct kernel_lb_addr ) ) ; brelse ( bh ) ; make_bad_inode ( inode ) ; return ; } if ( ie -> indirectICB. extLength && ( nbh = udf_read_ptagged ( inode -> i_sb, & loc, 0, & ident ) ) ) { if ( ident == TAG_IDENT_FE || ident == TAG_IDENT_EFE ) { memcpy ( & iinfo -> i_location, & loc, sizeof ( struct kernel_lb_addr ) ) ; brelse ( bh ) ; make_bad_inode ( inode ) ; return ;",0
280,"<S2SV_ModStart> tx_size_uv = get_uv_tx_size ( mbmi ) ; const int filter_level = get_filter_level ( lfi_n, mbmi ) ; uint64_t * const left_y = & lfm -> left_y [ tx_size_y ] ; uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const left_uv = & lfm -> left_uv [ tx_size_uv ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_y = & lfm -> int_4x4_y ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv [ tx_size_uv ] ; int i ; if (! filter_level ) { return ; } else { const int w = num_8x8_blocks_wide_lookup [ block_size ] ; const int h = num_8x8_blocks_high_lookup [ block_",0
281,"<S2SV_ModStart> mq_ops ) { spin_lock_irqsave_nested <S2SV_ModEnd> ( & fq <S2SV_ModStart> mq_flush_lock, flags, SINGLE_DEPTH_NESTING",0
282,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
283,"<S2SV_ModStart> ) ) { if (! <S2SV_ModEnd> stok ( option <S2SV_ModStart> & ovalue ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; } <S2SV_ModEnd> ovalue = strim",0
284,"<S2SV_ModStart> sizeof ( effect_param_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } effect_param_t * p = ( effect_param_t * ) pCmdData ; if ( * ( int * ) pReplyData!= 0 ) break ; if ( effect -> state!= EFFECT_STATE_ACTIVE ) * ( int * ) pReplyData = effect_set_state ( effect, EFFECT_STATE_CONFIG",0
285,<S2SV_ModStart> == NULL ) { k5free ( key_data ) ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { k5free ( key_data ) ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { k5free ( key_data ) ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { k5free ( key_data ) ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { k5free ( key_data ) ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { k5free ( key_data ) ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { k5free ( key_data ) ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { k5free ( key_data ) ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { k5free ( key_data ) ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { k5free ( key_data ) ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { k5free ( key_data ) ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { k5free ( key_data ) ; <S2SV_ModStart> goto cleanup ; },0
286,"<S2SV_ModStart> 0x02 ) ; if ( crgram_len > SC_MAX_APDU_BUFFER_SIZE - 1 ) { r = sc_transmit_apdu ( card, & apdu ) ; LOG_TEST_RET ( card -> ctx, r, ""APDU <S2SV_blank> transmit <S2SV_blank> failed"" ) ; } <S2SV_ModStart> 0x02 ) ; if ( crgram_len > SC_MAX_APDU_BUFFER_SIZE - 1 ) { r = sc_transmit_apdu ( card, & apdu ) ; LOG_TEST_RET ( card -> ctx, r, ""APDU <S2SV_blank> transmit <S2SV_blank> failed"" ) ; }",0
287,"<S2SV_ModStart> ; if ( ctxt. info. tc_mapping [ I40E_AQ_VSI_TC_QUE_OFFSET_SHIFT ] & ( I40E_AQ_VSI_TC_QUE_NUMBER_MASK << I40E_AQ_VSI_TC_QUE_OFFSET_SHIFT ) ) { dev_err ( & pf -> pdev -> dev, ""invalid <S2SV_blank> TC <S2SV_blank> queue <S2SV_blank> mapping\\n"" ) ; return - EINVAL ; } if ( ctxt. info. tc_mapping [ I40E_AQ_VSI_TC_QUE_OFFSET_SHIFT ] & ( I40E_AQ_VSI_TC_QUE_NUMBER_MASK << I40E_AQ_VSI_TC_QUE_OFFSET_SHIFT ) ) { dev_err ( & pf -> pdev -> dev, ""invalid <S2SV_blank> TC <S2SV_blank> queue <S2SV_blank> mapping\\n"" ) ; return - EINVAL ; } if (",0
288,<S2SV_ModStart> ; } } return - 1 ;,1
289,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
290,<S2SV_ModStart> if ( recon_y_stride!= yv12_fb_new -> y_stride || recon_uv_stride!= yv12_fb_new -> uv_stride ) { if ( recon_y_stride!= yv12_fb_new -> y_stride || recon_uv_stride!= yv12_fb_new -> uv_stride ) { if ( recon_y_stride!= yv12_fb_new -> y_stride || recon_uv_stride!= yv12_fb_new -> uv_stride ) { if ( recon_y_stride!= yv12_fb_new -> y_stride || recon_uv_stride!= yv12_fb_new -> uv_stride ) { if ( recon_y_stride!= yv12_fb_new -> y_stride || recon_uv_stride!= yv12_fb_new -> u_stride || recon_uv_stride!= yv12_fb_new -> uv_stride ) { if ( recon_y_stride!= yv12_fb_new -> y_stride || recon_uv_stride!= yv12_fb_new -> u_stride || recon_,0
291,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
292,"<S2SV_ModStart> len ) { <S2SV_ModEnd> char * buf <S2SV_ModStart> char * p <S2SV_ModEnd> ; if ( <S2SV_ModStart> * s ++ <S2SV_ModEnd> ; } } <S2SV_ModStart> 10 ; } if ( p - buf > Py_SIZE ( u ) ) { Py_DECREF ( w ) ; return NULL ; } assert ( p - buf <= Py_SIZE ( u ) ) ; Py_DECREF ( w ) ; } else { * p ++ = * s ++ ; } } len = p - buf ; s = buf ; return PyUnicode_DecodeUnicodeEscape ( s, len, NULL ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
293,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> enum { YES <S2SV_ModStart> int setimes, targisdir ; int <S2SV_ModEnd> wrerrno = 0 <S2SV_ModStart> ""Unexpected <S2SV_blank> off_t/time_t <S2SV_blank> size"" ) ; targisdir = 0 ; mask = umask ( 0 ) ; if (! pflag ) umask ( mask ) ; if ( targetshouldbedirectory ) verifydir ( targ ) ; ( void ) atomicio ( vwrite, remout, """", 1 ) ; if ( stat ( targ, & stb ) == 0 && S_ISDIR ( stb. st_mode ) ) targisdir = 1 ; if ( src!= NULL &&! iamrecursive &&! Tflag ) { if ( brace_expand ( src, & patterns, & npatterns )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> expand <S2SV_blank> pattern"", __func__ ) ; } for ( first = 1 ; ; first = 1 ) { cp = buf ; if ( atomicio ( read, remin, & ch, sizeof ( ch ) )!= 1 ) goto done ; if ( * cp == '\\n' ) { run_err ( ""unexpected <S2SV_blank> newline"" ) ; exit ( 1 ) ; } cp = buf ;",0
294,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
295,<S2SV_ModStart> < 0 ) { vpx_free ( oci -> mip ) ; vp8_de_alloc_frame_buffers ( oci ) ; <S2SV_ModStart> goto allocation_fail ; } <S2SV_ModStart> < 0 ) { vpx_free ( oci -> mip ) ; vp8_de_alloc_frame_buffers ( oci ) ; vp8_de_alloc_frame_buffers ( oci ) ; vp8_de_alloc_frame_buffers ( oci ) ; vp8_de_alloc_frame_buffers ( oci ) ; vp8_de_alloc_frame_buffers ( oci ) ; vp8_de_alloc_frame_buffers ( oci ) ; <S2SV_ModStart> goto allocation_fail ; } <S2SV_ModStart> < 0 ) { vpx_free ( oci -> mip ) ; vp8_de_alloc_frame_buffers ( oci ) ; vp8_de_alloc_frame_buffers ( oci ) ; vp8_de_alloc_frame_buffers ( oci ) ; vp8_de_alloc_frame_buffers ( oci ) ; vp8_de_alloc_frame_buffers ( oci ) ; vp8_de_alloc_frame_buffers ( oci ) ; vp8_de_alloc_frame,0
296,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
297,"<S2SV_ModStart> i2_cur_mb_addr, u1_num_mbs, u1_num_mbsNby2 <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbs, u1_num_mbsNby2 <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbsNby2, u1_num_mbsNby2 <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbs, u1_num_mbsNby2 <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbs, u1_num_mbsNby2 <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbsNby2, u1_num_mbsNby2 <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbsNby2, u1_num_mbsNby2 <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbsNby2, u1_num_mbsNby2 <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbsN",0
298,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> vterm_allocator_free ( screen,1
299,"<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & delay )",1
300,"<S2SV_ModStart>, one, <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart> == MagickFalse ) { <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; } <S2SV_ModStart> == MagickFalse ) { <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; } <S2SV_ModStart> == MagickFalse ) { <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; } <S2SV_ModStart> == MagickFalse ) { <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; } <S2SV_ModStart> == MagickFalse ) { <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; } <S2SV_ModStart> == MagickFalse ) { <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; } <S2SV_ModStart> == MagickFalse ) { <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; } <S2SV_ModStart> == MagickFalse ) { <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; } <S2SV_ModStart> == MagickFalse ) { <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; } <S2SV_ModStart> == MagickFalse ) { <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; } <S2SV_ModStart> == MagickFalse ) { <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; } <S2SV_ModStart> == MagickFalse ) { <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; } <S2SV_ModStart> == MagickFalse ) { <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; } <S2SV_ModStart> == MagickFalse ) { <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; } <S2SV_ModStart> == MagickFalse ) { <S2SV_ModStart> ""MemoryAllocationFailed"" ) ;",0
301,"<S2SV_ModStart> value ) { cchar * name = <S2SV_ModEnd> sclone ( value <S2SV_ModStart> ( value ) ; cchar * value2 = stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ; if ( name2 ) { state -> host = httpCloneHost ( name2 ) ; } else { state -> host = httpCloneHost ( name2 ) ; } httpSetHostName ( state -> host, stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) ; httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } else { httpSetHostName ( state -> host, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } <S2SV_ModEnd> } } return",0
302,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
303,<S2SV_ModStart> ) ) ; cg_wlock ( & pool -> data_lock ) ; <S2SV_ModStart> { if ( pool -> swork. job_id ) free ( pool -> swork. job_id ) ; if ( pool -> swork. prev_hash ) free ( pool -> swork. prev_hash ) ; if ( pool -> swork. coinbase1 ) free ( pool -> swork. coinbase1 ) ; if ( pool -> swork. coinbase2 ) free ( pool -> swork. coinbase2 ) ; if ( pool -> swork. bbversion ) free ( pool -> swork. bbversion ) ; if ( pool -> swork. nbit ) free ( pool -> swork. nbit ) ; if ( pool -> swork. ntime ) free ( pool -> swork. ntime ) ; if ( <S2SV_ModStart> { if ( pool -> swork. prev_hash ) free ( pool -> swork. prev_hash ) ; if ( pool -> swork. coinbase1 ) free ( pool -> swork. coinbase1 ) free ( pool -> swork. coinbase1 ) ; if ( pool -> swork. coinbase2 ) free ( pool -> swork. coinbase2 ) ; if ( pool -> s,0
304,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
305,"<S2SV_ModStart> unused ) { _Py_IDENTIFIER ( __json__ ) ; PyObject * dict = _PyObject_GetAttrId ( self, & PyId___json__ ) ; if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( _PyObject_GetAttrId ( self, & PyId___json__ ) == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( _PyObject_GetAttrId ( self, & PyId___json__ ) == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( _PyObject_GetAttrId ( self, & PyId___json__ ) == NULL ) { if ( _PyObject_GetAttrId ( self, & PyId___json__ ) == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( _PyObject_GetAttrId (",0
306,"<S2SV_ModStart> ) & desc, sizeof ( * desc )",1
307,"<S2SV_ModStart> perf_event * ) ; u64 id <S2SV_ModStart> ) ; case PERF_EVENT_IOC_ID : id = primary_event_id ( event ) ; if ( copy_to_user ( ( void __user * ) arg, & id, sizeof ( id ) ) ) return - EFAULT ; return 0 ; case PERF_EVENT_IOC_SET_OUTPUT : { int ret ; if ( arg!= - 1 ) { struct perf_event * output_event ; struct fd output ; ret = perf_fget_light ( arg, & output ) ; if ( ret ) return ret ; output_event = output. file -> private_data ; ret = perf_event_set_output ( event, output_event ) ; fdput ( output ) ; } else { ret = perf_event_set_output ( event, NULL ) ; } return ret ; } case <S2SV_ModStart> perf_event_period ( event <S2SV_ModEnd> ) ; case",0
308,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> * r, PREDICTION_MODE <S2SV_ModEnd> y_mode ) { <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode",0
309,"<S2SV_ModStart> == CCP_SHA_TYPE_1 ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) <S2SV_ModStart> - EINVAL ; } <S2SV_ModStart> == CCP_SHA_TYPE_256 ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) <S2SV_ModStart> - EINVAL ; } <S2SV_ModStart> == CCP_SHA_TYPE_384 ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) <S2SV_ModStart> - EINVAL ; } <S2SV_ModStart> == CCP_SHA_TYPE_512 ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) <S2SV_ModStart> - EINVAL ; } <S2SV_ModStart> == CCP_SHA_TYPE_384 ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) <S2SV_ModStart> - EINVAL ; } <S2SV_ModStart> == CCP_SHA_TYPE_512 ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) <S2SV_ModStart> - E",0
310,"<S2SV_ModStart> iv ) ; if (! NIL_P ( key ) ) rb_ivar_set ( self, id_key, Qnil ) ; if (! NIL_P ( iv ) ) rb_ivar_set ( self, id_iv, Qnil ) ;",0
311,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
312,"<S2SV_ModStart> break ; case NGHTTP2_IB_READ_SETTINGS : DEBUGF ( ""recv: <S2SV_blank> [IB_READ_SETTINGS]\\n"" ) ; readlen = inbound_frame_buf_read ( iframe, in, last ) ; in += readlen ; if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) ) { return in - first ; } iframe -> state = NGHTTP2_IB_READ_CLIENT_MAGIC ; break ; case NGHTTP2_IB_READ_SETTINGS : DEBUGF ( ""recv: <S2SV_blank> [IB_READ_SETTINGS]\\n"" ) ; readlen = inbound_frame_buf_read ( iframe, in, last ) ; in += readlen ; if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) ) { return in - first ; } iframe -> state = NGHTTP2_IB_READ_CLIENT_MAGIC ; break ; case NGHTTP2_IB_READ_CLIENT_MAGIC : DEBUGF ( ""recv: <S2SV_blank> [IB_READ_CLIENT_MAGIC]\\n"" ) ; readlen = inbound_frame_buf_read ( iframe",0
313,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> x86_pmu. max_pebs_events <S2SV_ModStart> x86_pmu. max_pebs_events > ARCH_PERFMON_EVENTS_COUNT ) { pr_err ( ""%s: <S2SV_blank> maximum <S2SV_blank> number <S2SV_blank> of <S2SV_blank> PEBS <S2SV_blank> events <S2SV_blank> exceeded <S2SV_blank> (%d)\\n"", __func__, x86_pmu. max_pebs_events ) ; x86_pmu. max_pebs_events = ARCH_PERFMON_EVENTS_COUNT ; } else if ( x86_pmu. max_pebs_events > ARCH_PERFMON_EVENTS_COUNT ) { pr_err ( ""%s: <S2SV_blank> maximum <S2SV_blank> number <S2SV_blank> of <S2SV_blank> PEBS <S2SV_blank> events <S2SV_blank> exceeded <S2SV_blank> (%d)\\n"", __func__, x86_pmu. max_pebs_events ) ; x86_pmu. max_pebs_events = ARCH_PERFMON_EVENTS_COUNT ; } else if ( x86_pmu. max_pebs_events > ARCH_PERFMON_EVENTS_COUNT ) { pr_err ( ""%s: <S2SV_blank> maximum <S2SV_blank> number",0
314,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> vp9_extra_bits [ t ] ; int i = 0 ; int v = a -> value ; int n = a -> len ; if ( p -> skip_eob_node ) { n -= p -> skip_eob_node ; i = 2 * p -> skip_eob_node ; } if ( t >= TWO_TOKEN && t < EOB_TOKEN ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; int bits = v >> ( n - len ) ; vp9_write_tree ( w, vp9_coef_tree, p -> context_tree, bits, len, i ) ; vp9_write_tree ( w, vp9_coef_con_tree, vp9_pareto8_full [ p -> context_tree [ PIVOT_NODE ] - 1 ], v, n - len, 0 ) ; } else { vp9_write_tree ( w, vp9_coef_tree, p -> context_tree, v, n - len, i ) ; } if ( b -> base_",0
315,"<S2SV_ModStart>, uncompressed_hdr_size ; vpx_write_bit_buffer <S2SV_ModEnd> wb = { <S2SV_ModStart> 0 } ; vpx_write_bit_buffer <S2SV_ModEnd> saved_wb ; write_uncompressed_header <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> += uncompressed_hdr_size ; vpx_compute_update_table <S2SV_ModEnd> ( ) ; <S2SV_ModStart> += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb",0
316,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct net_device * dev_get_valid_name ( struct net * net, struct net_device * dev, const char * name ) { BUG_ON (! net ) ; if (! dev ) return - EINVAL ; if ( strchr ( name, '%' ) ) return dev_alloc_name_ns ( net, dev, name ) ; else if ( __dev_get_by_name ( net, name ) ) return - EEXIST ; else if ( dev -> name!= name ) strlcpy ( dev -> name, name, IFNAMSIZ ) ; return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
317,"<S2SV_ModStart> _U_ ) { ND_TCHECK ( * ep ) ; ND_TCHECK ( * ep ) ; ND_TCHECK ( * ep ) ; ND_TCHECK ( * ep ) ; ND_TCHECK ( * ep ) ; ND_TCHECK ( * ep ) ; ND_TCHECK ( * ep ) ; ND_ALIGNED_MEMCPY ( & id, ep, sizeof ( id ) ) ; ikev2_pay_print ( ndo, NPSTR ( tpay ), id. h. critical ) ; id_len = ntohs ( id. h. len ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> len=%d"", id_len - 4 ) ) ; if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) goto trunc ; } idtype_len = id_len - sizeof ( struct ikev2_id ) ; dumpascii",0
318,"<S2SV_ModStart> ) ) ; if (! jas_taginfo_nonull ( jas_taginfos_lookup ( mif_tags, jas_jas_taginfo_get ( jas_taginfo_get ( jas_taginfo_get ( jas_taginfo_get ( jas_taginfo_get ( jas_taginfo_get ( jas_taginfo_get ( jas_taginfo_get ( jas_taginfo_get ( jas_taginfo_get ( jas_taginfo_get ( jas_taginfo_get ( jas_taginfo_get ( jas_taginfo_get ( jas_taginfo_get ( jas_taginfo_get ( jas_taginfo_get ( jas_taginfo_get ( jas_taginfo_get ( jas_taginfo_get ( jas_taginfo_get ( jas_taginfo_get ( jas_taginfo_get ( jas_taginfo_get ( jas_taginfo_get ( jas_taginfo_get ( jas_taginfo_get ( jas_taginfo_",0
319,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
320,"<S2SV_ModStart> ; WORD32 xt0_0 = 0, yt0 = 0, yt1 = 0, yt2 = 0 <S2SV_ModEnd> ; WORD32 xh0_0 <S2SV_ModStart> ; WORD32 xh0_0 = 0, xh1 = 0, xh20_0 = 0, xh21_0 = 0, xl0 = 0, xl1 = 0, xl20_0 = 0, xl21_0 = 0 ; WORD32 x_0 = 0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_h2_0 = 0, x_h2_1 ; WORD32 si10, si20, si30, co10, co20, co30 ; WORD64 mul_1, mul_2, mul_4, mul_5, mul_6 ; WORD64 mul_7, mul_8, mul_9, mul_10, mul_11, mul_12 ; WORD32 * x_l1 ; WORD32 * x_l2 ; WORD32 * x_l2 ; WORD32 * x_h2 ; const",0
321,"<S2SV_ModStart> mntent -> mnt_dir, mntent -> mnt_root -> mnt_sb -> s_root -> mnt_sb -> s_root -> mnt_sb -> s_root -> mnt_sb -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root -> s_root ->",0
322,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
323,"<S2SV_ModStart> ( req ) ) ; rb_hash_aset ( env, proxy_uri_val, rb_const_get ( req, rb_const_get ( req, rb_const_get ( req, rb_const_get ( req, rb_const_get ( req, rb_const_get ( req, rb_const_get ( req, rb_const_get ( req, rb_const_get ( req, rb_const_get ( req, rb_const_get ( req, rb_const_get ( req, rb_const_get ( req, rb_const_get ( req, rb_const_get ( req, rb_const_get ( req, rb_const_get ( req, rb_const_get ( req, rb_const_get ( req, rb_const_get ( req, rb_const_get ( req, rb_const_get ( req, rb_const_get ( req, rb_const_get ( req, rb_const_get ( req, rb_const_get ( req, rb_const_get ( req, rb_const_get ( req, rb_const_get ( req, rb_",0
324,"<S2SV_ModStart> endif int col_type = 0 <S2SV_ModStart> endif # endif # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION if ( DBIc_TRACE_LEVEL ( imp_xxh ) >= 2 ) PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t-> <S2SV_blank> dbd_st_prepare <S2SV_blank> MYSQL_VERSION_ID <S2SV_blank> %d, <S2SV_blank> SQL <S2SV_blank> statement: <S2SV_blank> %s\\n"", MYSQL_VERSION_ID, statement ) ; # endif # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION if ( DBIc_TRACE_LEVEL ( imp_xxh ) >= 2 ) PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t-> <S2SV_blank> dbd_st_prepare <S2SV_blank> MYSQL_VERSION_ID <S2SV_blank> %d, <S2SV_blank> SQL <S2SV_blank> statement: <S2SV_blank> %s\\n"", MYSQL_VERSION_ID, statement ) ; # endif # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION if ( DBIc_TRACE_LEVEL ( imp_xxh ) >= 2 ) PerlIO_printf ( DBIc_LOGPIO ( imp_xxh )",0
325,"<S2SV_ModStart> need = 0 ; int max_row ; int max_col <S2SV_ModStart> screen, { max_row = screen -> max_row ; max_col = screen -> max_col ; } ) ; if ( need < 0 ) return ; if ( scp -> data_limit <= ( unsigned ) need ) { if ( ( line = ( Char * ) malloc ( ( size_t ) need + 1 ) ) == 0 ) SysError ( ERROR_BMALLOC2 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = line ; scp -> data_limit = ( size_t ) ( need + 1 ) ; } else { line = ( Char * ) malloc ( ( size_t ) need + 1 ) ; } if ( scp -> data_limit <= ( unsigned ) need ) { if ( ( line = ( Char * ) malloc ( ( size_t ) need + 1 ) ) == 0 ) SysError ( ERROR_BMALLOC2 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = line ; scp -> data_limit = ( size_t ) ( need + 1 ) ; } else { line = ( Char * ) malloc (",0
326,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> val ) ) strncpy_s ( str, len, ""NaN"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> < 0 ) strncpy_s ( str, len, ""-Infinity"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) ; else strncpy_s ( str, len, ""Infinity"" <S2SV_ModEnd> ) ; }",0
327,"<S2SV_ModStart> ( unlikely ( crng_ready == 0 ) ) { if ( ( fast_pool -> count >= 64 ) && crng_fast_load ( ( char * ) fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ) { fast_pool -> count = 0 ; fast_pool -> last = now ; } return ; } if ( ( fast_pool -> count < 64 ) &&! time_after ( now, fast_pool -> last + HZ ) ) return ; r = & input_pool ; if (! spin_trylock ( & r -> lock ) ) return ; fast_pool -> last = now ; __mix_pool_bytes ( r, & fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ; if ( arch_get_random_seed_long ( & seed ) ) { __mix_pool_bytes ( r, & seed, sizeof ( seed ) ) ; credit = 1 ; } spin_unlock ( & r -> lock ) ; crng_init = 1 ; if ( crng_init <S2SV_ModEnd> == 0 )",0
328,"<S2SV_ModStart> LEX_ID ) { snprintf ( str, len, ""ID:%s"" <S2SV_ModEnd>, jslGetTokenValueAsString ( <S2SV_ModStart> jslGetTokenValueAsString ( ) <S2SV_ModEnd> ) ; } <S2SV_ModStart> LEX_STR ) { snprintf ( str, len, ""String:\'%s\'"" <S2SV_ModEnd>, jslGetTokenValueAsString ( <S2SV_ModStart> jslGetTokenValueAsString ( ) <S2SV_ModEnd> ) ; }",0
329,,1
330,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
331,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
332,"<S2SV_ModStart> ) { return memcmp <S2SV_ModEnd> ( s1,",0
333,"<S2SV_ModStart> ( CMD_PRINT_HELP, NULL, NULL ) ; parse_service_option ( CMD_PRINT_HELP, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-version"" ) ) { parse_global_option ( CMD_PRINT_DEFAULTS, <S2SV_ModStart> ( CMD_PRINT_DEFAULTS, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-ssls"" ) ) { socket_options_print ( ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-options"" ) ) { print_ssl_options ( ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else # ifndef USE_WIN32 if (! strcasecmp ( arg1, ""-fd"" ) ) { if (! arg2 ) { s_log ( LOG_ERR, ""No <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> specified"" ) ; print_syntax (",0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,"<S2SV_ModStart>! new_iv_set ) { if ( st -> st_v1_new_iv. len > pbs_room ( & md -> packet_pbs ) ) { loglog ( RC_LOG_SERIOUS, ""malformed <S2SV_blank> message: <S2SV_blank> not <S2SV_blank> a <S2SV_blank> multiple <S2SV_blank> of <S2SV_blank> encryption <S2SV_blank> blocksize"" ) ; return ; } <S2SV_ModStart> new_iv_set ) { if ( st -> st_v1_new_iv. len > pbs_room ( & md -> packet_pbs ) ) { loglog ( RC_LOG_SERIOUS, ""malformed <S2SV_blank> message: <S2SV_blank> not <S2SV_blank> a <S2SV_blank> multiple <S2SV_blank> of <S2SV_blank> encryption <S2SV_blank> blocksize"" ) ; return ; } <S2SV_ModStart> new_iv_set ) { if ( st -> st_v1_new_iv. len > pbs_room ( & md -> packet_pbs ) ) { <S2SV_ModStart> new_iv_set ) { if ( st -> st_v1_new_iv. len > pbs_room ( & md -> packet_pbs ) ) { loglog ( RC_LOG_SERIOUS, ""malformed <S2SV_blank> message: <S2SV_blank> not <S2SV_blank> a <S2SV_blank> multiple <S2SV_blank> of <S2SV_blank> encryption <S2SV_blank> block",0
336,"<S2SV_ModStart> } } } { IMPEG2D_ERROR_CODES_T e_error ; e_error = impeg2d_process_video_header ( & ( ps_dec -> s_bit_stream ), ps_dec -> pu1_input_buffer, u4_size ) ; if ( IMPEG2D_ERROR_CODES_T ) IVD_ERROR_NONE!= e_error ) { ps_op -> s_ivd_video_decode_op_t. u4_error_code = e_error ; ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = 0 ; ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; } else { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = 0 ; ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = 0 ;",0
337,<S2SV_ModStart> <S2SV_null> <S2SV_null> static const <S2SV_ModStart> item ) { if ( item == NULL ) return NULL ;,0
338,"<S2SV_ModStart>. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img, <S2SV_ModStart>. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img,",1
339,<S2SV_ModStart> ) ; } else if ( arg1 == 1 ) { win_maximise ( 1 ) ; term. rows = rows0 ; term. cols = cols0 ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; term. rows = rows0 ; term. cols = cols0 ; } else if ( arg1 == 2 ) { win_maximise ( - 2 ) ; term. rows = rows0 ; term. cols = cols0 ; } else if ( arg1 == 3 ) { win_maximise ( - 2 ) ; term. rows = rows0 ; term. cols = cols0 ; } else if ( arg1 == 1 ) { win_maximise ( - 1 ) ; term. rows = rows0 ; term. cols = cols0 ; } else if ( arg1 == 2 ) { win_maximise ( - 2 ) ; term. rows = rows0 ; term. cols = cols0 ; } else if ( arg1 == 3 ) { win_maximise ( - 2 ) ; term. rows = rows0 ; term. cols = cols0 ; },0
340,<S2SV_ModStart> < cols + 8 ; i ++ ) s [ i ] = s [ cols - 1 ] ; for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; d [ i + 8 ] = 0 ; } for ( c = 0 ; c < cols + 8 ; c ++ ) { int x = s [ c + 7 ] - s [ c - 8 ] ; int y = s [ c + 7 ] + s [ c - 8 ] ; sum += x ; sumsq += x * y ; d [ c & 15 ] = s [ c ] ; if ( sumsq * 15 - sum * sum < flimit ) { d [ c & 15 ] = ( 8 + sum + s [ c ] ) >> 4 ; } s [ c - 8 ] = d [ ( c - 8 ) & 15 ] ; } s += pitch ; for ( <S2SV_ModEnd> ; i <,0
341,"<S2SV_ModStart> -> log ) { <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> -> log ) { <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> -> log ) { <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> -> log ) { <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> -> log ) { <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> -> log ) { <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> -> log ) { <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> -> log ) { <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> b",0
342,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
343,<S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_pps_done ) { ps_codec -> i4_pps_done = 1 ; return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_pps_done ) { ps_codec -> i4_pps_done = 1 ; return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_pps_done ) { ps_codec -> i4_pps_done = 1 ; return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_pps_done ) { ps_codec -> i4_pps_done = 1 ; return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_pps_done ) { ps_codec -> i4_pps_done = 1 ; return IHEVCD_INVALID_HEADER ; },0
344,"<S2SV_ModStart> ) ) { switch ( c ) { case'<S2SV_blank>': psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'e' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case 'E' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 't' : trunc_8to4 = SF_TRUE ; break ; case 'T' : trunc_8to4 = SF_FALSE ; break ; case'm' : data = va_arg ( argptr, unsigned int ) ; header_put_marker ( psf, data ) ; count += 4 ; break ; case '1' : data = va_arg ( argptr, unsigned int ) ; header_put_byte ( psf, data ) ; count += 1 ; break ; case '2' : data = va_arg ( argptr, unsigned int ) ; header_put_byte ( psf, data ) ; count += 2 ; break ; case '3' : data = va_arg ( argptr, unsigned int ) ; header_put_be_3byte ( psf, data ) ; } ; count += 3 ; break ; case '",0
345,"<S2SV_ModStart> ""MemoryAllocationFailed"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; return ( DestroyImageList ( image ) ) ; }",0
346,"<S2SV_ModStart> 0 ; } if ( copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; return 0 ; } <S2SV_ModStart> ( rv ) { <S2SV_ModStart> ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; return 0 ; } <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; return",0
347,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> BLOCK_8X8 : return vpx_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> BLOCK_16X8 : return vpx_mse16x8 <S2SV_ModEnd> ; case BLOCK_8X16 <S2SV_ModStart> BLOCK_8X16 : return vpx_mse8x16 <S2SV_ModEnd> ; default : <S2SV_ModStart> default : return vpx_mse16x16 <S2SV_ModEnd> ; } },1
348,"<S2SV_ModStart> ; if ( encoded_key_pack == NULL ) { krb5_log ( context, KRB5_LOG_ERROR, ""pkinit_server_return_padata: <S2SV_blank> encoded_key_pack <S2SV_blank> is <S2SV_blank> NULL"" ) ; retval = KRB5_EINVAL ; break ; } if (",0
349,"<S2SV_ModStart> flags ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> if (! v4l2_buf ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", input -> buf_cur_space_left, frame_len ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d.",0
350,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> size_t <S2SV_ModEnd> zcalloc ( size_t <S2SV_ModStart> size ) { size_t new_size = size + PREFIX_SIZE ; <S2SV_ModStart> ( 1, new_size <S2SV_ModEnd> ) ; if <S2SV_ModStart> HAVE_MALLOC_SIZE update_zmalloc_stat_alloc ( new_size <S2SV_ModEnd> ) ; return",0
351,<S2SV_ModStart> && rxent -> dport == sport ) { rx_cache_hint = i ; * opcode = rxent -> opcode ; return ( 1 ) ; } if ( ++ i >= RX_CACHE_SIZE ) i = 0 ; } while ( i!= rx_cache_hint ) ; return ( 0 ) ; } while ( i!= rx_cache_hint ) ; for ( i = 0 ; i < RX_CACHE_SIZE ; i ++ ) { rxent = & rx_cache [ i ] ; if ( rxent -> callnum == EXTRACT_32BITS ( & rxh -> callNumber ) && rxent -> client. s_addr == clip && rxent -> server. s_addr == sip && rxent -> serviceId == EXTRACT_32BITS ( & rxh -> serviceId ) && rxent -> dport == sport ) { rx_cache_hint = i ; * opcode = rxent -> opcode ; return ( 1 ) ; } if ( ++ i >= RX_CACHE_SIZE ) i = 0 ; } while ( i!= rx_cache_hint ) ; return ( 0 ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <,0
352,"<S2SV_ModStart>, 0, sizeof ( adhoc_start -> ssid ) ) ; memcpy ( adhoc_start -> ssid, req_ssid -> ssid, req_ssid -> ssid_len ) ; mwifiex_dbg ( adapter, INFO, ""info: <S2SV_blank> ADHOC_S_CMD: <S2SV_blank> SSID <S2SV_blank> = <S2SV_blank> %s\\n"", adhoc_start -> ssid ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memcpy ( bss_desc -> ssid. ssid, req_ssid -> ssid, req_ssid -> ssid_len ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memcpy ( bss_desc -> ssid. ssid, req_ssid -> ssid, req_ssid -> ssid_len ) ; memcpy ( bss_desc -> ssid. ssid, req_ssid -> ssid, req_ssid -> ssid_len",0
353,"<S2SV_ModStart>!= 0 ) { error = context -> put_listent ( context, sfe -> flags, sfe -> nameval, ( int ) sfe -> namelen, ( int ) sfe -> valuelen, & sfe -> nameval [ sfe -> namelen ] ) ; if ( context -> seen_enough ) break ; <S2SV_ModStart> return error ; } <S2SV_ModStart>!= 0 ) { error = context -> put_listent ( context, sfe -> flags, sfe -> nameval, ( int ) sfe -> namelen, ( int ) sfe -> valuelen, & sfe -> nameval [ sfe -> namelen ] ) ; if ( context -> seen_enough ) break ; <S2SV_ModStart> return error ; } <S2SV_ModStart>!= 0 ) { error = context -> put_listent ( context, sfe -> flags, sfe -> nameval, ( int ) sfe -> namelen, ( int ) sfe -> valuelen, & sfe -> nameval [ sfe -> namelen ] ) ; if ( context -> seen_enough ) break ; }",0
354,"<S2SV_ModStart> struct l2cap_conf_rfc rfc ; void * ptr = req -> data ; BT_DBG ( ""sk <S2SV_blank> %p"", sk ) ; switch ( pi -> mode ) { case L2CAP_MODE_BASIC : if ( pi -> imtu!= L2CAP_DEFAULT_MTU ) l2cap_add_conf_opt ( & ptr, L2CAP_CONF_MTU, 2, pi -> imtu ) ; break ; case L2CAP_MODE_ERTM : rfc. mode = L2CAP_MODE_NONE ; rfc. txwin_size = L2CAP_DEFAULT_RX_WINDOW ; rfc. max_transmit = L2CAP_DEFAULT_MAX_RECEIVE ; rfc. retrans_timeout = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO ) ; rfc. monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; rfc. max_pdu_size = cpu_to_le16",0
355,"<S2SV_ModStart> { do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> r, MSG_WAITALL )",0
356,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ps_dec -> u1_nal_ref_idc <S2SV_ModStart> ps_dec -> u1_nal_ref_idc == IDR_SLICE_NAL ) { ps_dec -> u1_nal_ref_idc = IDR_SLICE_NAL ; } else if ( <S2SV_ModEnd> ps_dec -> u1_nal_ref_idc <S2SV_ModStart> ps_dec -> u1_nal_ref_idc == IDR_SLICE_NAL ) { ps_dec -> u1_nal_ref_idc = IDR_SLICE_NAL ; } else if ( <S2SV_ModEnd> ps_dec -> u1_nal_ref_idc <S2SV_ModStart> ps_dec -> u1_nal_ref_idc == IDR_SLICE_NAL ) { ps_dec -> u1_nal_ref_idc = IDR_SLICE_NAL ; } else if ( <S2SV_ModEnd> ps_dec -> u1_nal_ref_idc <S2SV_ModStart> ps_dec -> u1_nal_ref_idc == IDR_SLICE,0
357,<S2SV_ModStart> while ( pair <S2SV_ModEnd> ) { mprAddItem,1
358,"<S2SV_ModStart> * delegation, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> = 0 ; fmode <S2SV_ModEnd> &= ( FMODE_READ <S2SV_ModStart> -> type & fmode )!= fmode <S2SV_ModEnd> ) goto no_delegation_unlock <S2SV_ModStart> -> stateid, fmode <S2SV_ModEnd> ) ; ret <S2SV_ModStart>, NULL, fmode <S2SV_ModEnd> ) ; ret",1
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,"<S2SV_ModStart> int * out_rate_sum ) { int i ; int64_t rate_sum = 0 ; int64_t dist_sum = 0 ; const int ref = xd -> mi [ 0 ] -> mbmi. ref_frame [ 0 ] ; unsigned int sse ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblock_plane * const p = & x -> plane [ i ] ; struct macroblockd_plane * const pd = & xd -> plane [ i ] ; const BLOCK_SIZE bs = get_plane_block_size ( bsize, pd ) ; ( void ) cpi -> fn_ptr [ bs ]. vf ( p -> src. buf, p -> src. stride, pd -> dst. buf, pd -> dst. stride, & sse ) ; if ( i == 0 ) x -> pred_sse [ ref ] = sse ; if ( cpi -> speed > 4 ) { int64_t rate ; int64_t dist ; int64_t square_error = sse ; int quantizer = ( pd -> dequant [ 1 ] >> 3 ) ; if ( quantizer < 120 ) rate = ( square_",0
361,<S2SV_ModStart> } if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
362,<S2SV_ModStart> { if ( index >= PAM_MAX_RESP_SIZE ) { return ( PAM_BUF_ERR ) ; } if ( <S2SV_ModStart> == NULL ) { free ( username ) ; <S2SV_ModStart> PAM_BUF_ERR ) ; },0
363,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> seg ) { vpx_read_tree <S2SV_ModEnd> ( r, <S2SV_ModStart> ( r, vpx_segment_tree <S2SV_ModEnd>, seg ->",0
364,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",1
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,"<S2SV_ModStart>, fmt, maxbuf, unicodestr ) ; if ( buf2 == NULL ) return ( NULL ) ; if ( buf2 == buf ) return ( buf ) ; buf = buf2 ; } return ( buf ) ; case '|' : fmt ++ ; if ( buf >= maxbuf ) return ( buf ) ; break ; case '#' : fmt ++ ; buf = maxbuf ; break ; case '[' : fmt ++ ; if ( buf >= maxbuf ) return ( buf ) ; memset ( s, 0, sizeof ( s ) ) ; p = strchr ( fmt, ']' ) ; if ( ( size_t ) ( p - fmt + 1 ) > sizeof ( s ) ) { return ( buf ) ; } strncpy ( s, fmt, p - fmt ) ; s [ p - fmt ] = '\\0' ; fmt = p + 1 ; buf = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( buf == NULL ) return ( NULL ) ; break ; default : ND_PRINT ( ( ndo, ""%c"", *",0
367,"<S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851WriteFifo <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_TXQCR, KSZ8851_TXQCR_METFE <S2SV_ModEnd> ) ; n",0
368,<S2SV_ModStart> ; # endif mono_gc_invoke_finalizers ( ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> SetEvent ( pending_done_event,0
369,"<S2SV_ModStart>, x_8, x_9, x_a, x_b, x_c, x_d, x_e, x_f ; WORD32 n00, n10, n20, n30, n01, n11, n21, n31 ; WORD32 n12, n22, n32, n03, n13, n23, n33 ; WORD32 * x2, * x0 ; WORD32 * y0, * y1, * y2, * y3 ; x0 = ptr_y ; y2 = ptr_x + ( WORD32 ) npoints ; x_1 = ptr_y + ( WORD32 ) npoints ; x_2 = ptr_x + ( WORD32 ) npoints ; x_3 = ptr_x + ( WORD32 ) npoints ; x_4 = ptr_x + ( WORD32 ) npoints ; x_5 = ptr_x + ( WORD32 ) npoints ; x_6 = ptr_y + ( WORD32 ) npoints ; x_7 = ptr_x + ( WORD32 ) npoints ; x_8 = * x0 ++ ;",0
370,<S2SV_ModStart> ; if ( <S2SV_ModEnd> pmd_none_or_clear_bad ( pmd,0
371,"<S2SV_ModStart> height, target_width = 0, target_height = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( argv [ 2 ], & width ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } if (! parse_dim ( argv [ 3 ], & target_width, & target_height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpin = fopen ( fin, ""rb"" ) ; if ( fpin == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> read\\n"", fin ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpout = fopen ( fout, ""wb"" ) ; if ( fpout == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> write\\n",0
372,"<S2SV_ModStart> num_fields ) { Py_IDENTIFIER ( _attributes ) ; PyObject * s, * l = PyTuple_New ( num_fields ) ; if (! l ) return 0 ; for ( int i = 0 ; i < num_fields ; i ++ ) { s = PyUnicode_FromString ( attrs [ i ] ) ; if (! s ) { Py_DECREF ( l ) ; return 0 ; } PyTuple_SET_ITEM ( l, i, s ) ; } result = _PyObject_SetAttrId ( ( PyObject * ) type, & PyId__attributes, l ) >= 0 ; Py_DECREF ( l ) ; return result <S2SV_ModEnd> ; } <S2SV_null>",0
373,<S2SV_ModStart> ; struct vpx_codec_alg_priv <S2SV_ModEnd> priv ; vpx_codec_enc_cfg_t <S2SV_ModStart> sizeof ( struct vpx_codec_alg_priv <S2SV_ModEnd> ) ) ; <S2SV_ModStart> priv = & priv -> base ; ctx -> priv -> iface = ctx -> iface ; ctx -> priv -> alg_priv = priv ; ctx -> priv -> init_flags = ctx -> init_flags ; if ( ctx -> config. enc ) { priv -> cfg = * ctx -> config. enc ; } cfg = & ctx -> priv -> alg_priv -> cfg ; for ( i = 0 ; extracfg_map [ i ]. usage && extracfg_map [ i ]. usage!= cfg -> g_usage ; i ++ ) ; priv -> vp8_cfg = extracfg_map [ i ]. cfg ; priv -> vp8_cfg. pkt_list = & priv -> pkt_list. head ; priv -> cx_data_sz = priv -> cfg. g_w * priv -> cfg. g_h * 3 / 2 * 2 ; if ( priv -> cx_data_sz < 32768 ) priv -> cx_data_sz = 32768 ; priv -> cx_data = m,0
374,"<S2SV_ModStart>, totfr ) ) < 0 ) return ret ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; totfr += step ; if ( totfr > BOT ) { totfr = 0 ; for ( i = 0 ; i < 256 ; i ++ ) { unsigned nc = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] = nc ; totfr += nc ; } for ( i = 0 ; i < 16 ; i ++ ) { unsigned sum = 0 ; unsigned i16_17 = i << 4 ; for ( j = 0 ; j < 16 ; j ++ ) sum += i16_17 ; pixel -> lookup [ i ] = sum ; } } pixel -> total_freq = totfr ; * rval = c & s -> cbits ; return 0 <S2SV_ModEnd> ; } <S2SV_null>",0
375,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx ->,0
376,"<S2SV_ModStart> bh ) ; if ( ret < 0 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!bh\\n"", inode -> i_ino ) ; goto out ; } <S2SV_ModStart> bh ) ; if ( ret < 0 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!bh\\n"", inode -> i_ino ) ; goto out ; } <S2SV_ModStart> bh ) ; if ( ret < 0 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!bh\\n"", inode -> i_ino ) ; goto out ; } <S2SV_ModStart> bh ) ; if ( ret < 0 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!bh\\n"", inode -> i_ino ) ; goto out ; } <S2SV_ModStart> bh ) ; if ( ret < 0 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!bh\\n"", inode -> i_ino ) ; goto out ; }",0
377,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0",1
378,<S2SV_ModStart> <S2SV_null> <S2SV_null> static char * <S2SV_ModEnd> bad_format_imginfo ( char <S2SV_ModStart> fmt ) { <S2SV_ModEnd> int n = <S2SV_ModStart> = 0 ; if (! fmt ) return NULL ; ptr = fmt ; while ( * ptr!= '\\0' ) if ( * ptr ++ == '%' ) { if ( * ptr == '\\0' ) return 1 ; if ( * ptr =='s' || * ptr == 'S' ) { n = 1 ; ptr ++ ; } else { if ( * ptr =='<S2SV_blank>') ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'u' ) ptr ++ ; else return 1 ; n ++ ; } } return ptr <S2SV_ModEnd> ; } <S2SV_null>,0
379,<S2SV_ModStart> ) ; # else ( void ) DefragInOrderSimpleTest ; ( void ) DefragReverseSimpleTest ; ( void ) IPV6DefragInOrderSimpleTest ; ( void ) IPV6DefragInOrderSimpleTest ; ( void ) IPV6DefragInOrderSimpleTest ; ( void ) IPV6DefragInOrderSimpleTest ; ( void ) IPV6DefragInOrderSimpleTest ; ( void ) IPV6DefragInOrderSimpleTest ; ( void ) IPV6DefragInOrderSimpleTest ; ( void ) IPV6DefragInOrderSimpleTest ; ( void ) IPV6DefragInOrderSimpleTest ; ( void ) IPV6DefragInOrderSimpleTest ; ( void ) IPV6DefragInOrderSimpleTest ; ( void ) IPV6DefragInOrderSimpleTest ; ( void ) IPV6DefragInOrderSimpleTest ; ( void ) IPV6DefragInOrderSimpleTest ; ( void ) IPV6DefragInOrderSimpleTest ; ( void ) IPV6DefragInOrderSimpleTest ; ( void ) IPV6DefragInOrderSimpleTest ; ( void ) IPV6DefragInOrderSimpleTest ; ( void ) IPV6DefragInOrderSimpleTest ; ( void,0
380,<S2SV_ModStart> if ( object_data && object_length,0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,"<S2SV_ModStart> p_sys -> b_auto_field_coding && p_sys -> p_format -> interlaced ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""interlaced_coding"", p_sys -> p_format -> interlaced ) ; if ( p_sys -> b_auto_field_coding && p_sys -> p_format -> top_field_first ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""top_field_first"", p_sys -> p_format -> top_field_first ) ; if ( p_sys -> b_auto_field_coding && p_sys -> p_format -> interlaced ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""auto_field_coding"", p_sys -> p_format -> interlaced ) ; if ( p_sys -> b_auto_field_coding ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""auto_field_coding"", p_sys",0
384,"<S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> regular <S2SV_blank> file: <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, fname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> regular <S2SV_blank> file: <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, fname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> regular <S2SV_blank> file: <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, fname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> regular <S2SV_blank> file: <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, fname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> regular <S2SV_blank> file: <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, fname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> regular <S2SV_blank> file: <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, fname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> regular <S2SV_blank> file: <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, fname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank>",0
385,"<S2SV_ModStart> 4 ) ; size_t <S2SV_ModEnd> num_properties = GETINT32 <S2SV_ModStart> len >> 1 ) && j < a -> names [ i ]. len ; j ++ ) a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ; } } else { size_t i ; a -> names = CHECKED_XCALLOC ( VarLenData, a -> num_names ) ; for ( i = 0 ; i < a -> num_names ; i ++ ) { size_t j ; CHECKINT32 ( idx, len ) ; a -> names [ i ]. len = GETINT32 ( buf + idx ) ; idx += 4 ; a -> names [ i ]. data = CHECKED_XMALLOC ( unsigned char, a -> names [ i ]. len ) ; for ( j = 0 ; j < ( a -> names [ i ]. len >> 1 ) ; j ++ ) a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]",0
386,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
387,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { vpx_pbi_t * pbi = ctx -> pbi ; <S2SV_ModStart> * fb ; if (! <S2SV_ModStart>, & fb ) ) return VPX_CODEC_INVALID_PARAM ; vp9_get_reference_dec ( pbi, data -> idx, & fb",0
388,"<S2SV_ModStart>!= JPEG_MARKER_EOI ) { if ( i + 1 < frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> first <S2SV_blank> "" ""marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> EOI.\\n"", marker ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart>!= JPEG_MARKER_SOS ) { if ( i + 1 < frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> first <S2SV_blank> "" ""marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> SOS.\\n"", marker ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart>!= JPEG_MARKER_EOI ) { if ( i + 1 < frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> first <S2SV_blank> "" ""marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> EOI.\\n"", marker ) ; return AVERROR_INVALIDDATA",0
389,"<S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == testlist ) { node * ch = CHILD ( n, 0 ) ; expr_ty e = ast_for_testlist ( c, CHILD ( ch, 0 ) ) ; if (! e ) return NULL ; return Expr ( e, LINENO ( n ), n -> n_col_offset, n -> n_end_lineno, n -> n_end_col_offset, c -> c_arena ) ; } else if (",0
390,"<S2SV_ModStart> int vp8_denoiser_filter_c ( <S2SV_ModEnd> MACROBLOCK * signal <S2SV_ModStart> = 16 ; int r, c, i ; int sum_diff = 0 ; int adj_val [ 3 ] = { 3, 4, 6 } ; if ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) { for ( i = 0 ; i < 3 ; i ++ ) adj_val [ i ] += 1 ; } for ( r = 0 ; r < 16 ; ++ r ) { for ( c = 0 ; c < 16 ; ++ c ) { int diff = 0 ; int adjustment = 0 ; int absdiff = 0 ; diff = mc_running_avg_y [ c ] - sig [ c ] ; absdiff = abs ( diff ) ; if ( absdiff <= 3 ) { running_avg_y [ c ] = mc_running_avg_y [ c ] ; sum_diff += diff ; } else { if ( absdiff >= 4 && absdiff <= 7 ) adjustment = adj_val [ 0 ] ; else if ( absdiff >= 8 && absdiff <= 15 ) adjustment = adj_val [ 1 ] ; else adjustment = adj_val [ 2 ] ;",0
391,<S2SV_ModStart> ; } } if ( ( sockPtr -> flags & ( NS_CONN_REQUESTURITOOLONG | NS_CONN_LINETOOLONG ) ) == 0 ) { sockPtr -> flags = NS_CONN_REQUESTURITOOLONG ; } else if ( ( sockPtr -> flags & ( NS_CONN_REQUESTURITOOLONG | NS_CONN_LINETOOLONG ) ) == 0 ) { sockPtr -> flags = NS_CONN_REQUESTURITOOLONG ; } else if ( ( sockPtr -> flags & ( NS_CONN_REQUESTURITOOLONG | NS_CONN_LINETOOLONG ) ) == 0 ) { sockPtr -> flags = NS_CONN_REQUESTURITOOLONG ; } else if ( ( sockPtr -> flags & ( NS_CONN_REQUESTURITOOLONG | NS_CONN_LINETOOLONG ) ) == 0 ) { sockPtr -> flags = NS_CONN_REQUESTURITOOLONG ; } else if ( ( sockPtr -> flags & ( NS_CONN_REQUESTURITOOLONG | NS_CONN_LINETOOLONG ) ) == 0 ) { sockPtr ->,0
392,"<S2SV_ModStart> = uregs ; xtregs_coprocessor_t cp0 ; <S2SV_ModStart> ret = 0 ; memset ( & cp0, 0, sizeof ( cp0 ) ) <S2SV_ModStart> ti ) ; <S2SV_ModEnd> ret |= __copy_from_user <S2SV_ModStart> & ti -> xtregs_cp, & cp0, sizeof ( cp0 ) ) ; ret |= __copy_from_user ( & regs -> xtregs_opt, & xtregs -> opt, sizeof ( xtregs -> opt ) ) ; ret |= __copy_from_user ( & ti -> xtregs_user, & xtregs -> user, sizeof ( xtregs -> user ) ) ; ret |= __copy_from_user ( & ti -> xtregs_cp, & xtregs -> cp, sizeof ( xtregs -> cp ) ) ; ret |= __copy_from_user ( & ti -> xtregs_user, & xtregs -> user, sizeof ( xtregs -> user ) ) ;",0
393,"<S2SV_ModStart> size ) ; if ( message -> length == 0 ) { socket -> eventMask = SOCKET_EVENT_RX_ERROR ; osResetEvent ( & socket -> event ) ; osReleaseMutex ( & socket -> event ) ; osWaitForEvent ( & socket -> event, socket -> timeout ) ; osAcquireMutex ( & socket -> event ) ; message -> srcIpAddr = queueItem -> srcIpAddr ; message -> srcPort = queueItem -> srcPort ; message -> destIpAddr = queueItem -> destIpAddr ; message -> ttl = queueItem -> ancillary. ttl ; # if ( ETH_SUPPORT == ENABLED ) message -> srcMacAddr = queueItem -> ancillary. srcMacAddr ; message -> destMacAddr = queueItem -> ancillary. destMacAddr ; # endif # if ( ETH_PORT_TAGGING_SUPPORT == ENABLED ) message -> switchPort = queueItem -> ancillary. port ; # endif # if ( ETH_TIMESTAMP_SUPPORT == ENABLED ) message -> timestamp = queueItem -> ancillary. timestamp ; # endif if ( ( flags & SOCKET_FLAG_PEEK ) == 0 ) { socket -> receive",0
394,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" <S2SV_ModStart> cg_item ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
395,"<S2SV_ModStart> int error ; new_bh = ext2_xattr_cache_find ( inode, header ) ; if ( new_bh ) { if ( new_bh == old_bh ) { ea_bdebug ( new_bh, ""keeping <S2SV_blank> this <S2SV_blank> block"" ) ; } else { ea_bdebug ( new_bh, ""reusing <S2SV_blank> block"" ) ; error = dquot_alloc_block ( inode, 1 ) ; if ( error ) { unlock_buffer ( new_bh ) ; goto cleanup ; } le32_add_cpu ( & HDR ( new_bh ) -> h_refcount, 1 ) ; ea_bdebug ( new_bh, ""refcount <S2SV_blank> now=%d"", le32_to_cpu ( HDR ( new_bh ) -> h_refcount ) ) ; } unlock_buffer ( new_bh ) ; } else if ( old_bh && header == HDR ( old_bh ) ) { new_bh = old_bh ; get_bh ( new_bh ) ; <S2SV_ModStart> new_bh ) ; <S2SV_ModEnd> } else {",0
396,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
397,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
398,"<S2SV_ModStart> 0, 0 ) ; WARN_ON_ONCE (! test_bit ( PERF_EVENT_FLAG_TASK_ID, & task_event -> flags <S2SV_ModStart> event_id ) ; task_event -> event_id. pid = perf_event_pid ( event, task ) ; task_event -> event_id. ppid = perf_event_pid ( event, current ) ; task_event -> event_id. tid = perf_event_tid ( event, task ) ; perf_output_put ( & handle, task_event -> event_id ) ; perf_event__output_id_sample ( event, & handle, & sample ) ; perf_output_end ( & handle ) ; out : task_event -> event_id. pid = perf_event_pid ( event, task ) ; task_event -> event_id. ppid = perf_event_pid ( event, current ) ; task_event -> event_id. tid = perf_event_tid ( event, task ) ; task_event -> event_id. ptid = perf_event_tid ( event, current ) ;",0
399,"<S2SV_ModStart> imsy, 1 ) ; if ( imbuf == NULL ) { return ( MagickFalse ) ; } for ( n = 0 ; n < 16 ; n ++ ) { sixel_palet [ n ] = sixel_default_color_table [ n ] ; } for ( r = 0 ; r < 6 ; r ++ ) { for ( g = 0 ; g < 6 ; g ++ ) { for ( b = 0 ; b < 6 ; b ++ ) { sixel_palet [ n ++ ] = SIXEL_RGB ( r * 51, g * 51, b * 51 ) ; } } } for ( ; n < SIXEL_PALETTE_MAX ; n ++ ) { sixel_palet [ n ++ ] = SIXEL_RGB ( 255, 255, 255 ) ; } for ( ; n < SIXEL_PALETTE_MAX ; n ++ ) { sixel_palet [ n ++ ] = SIXEL_RGB ( 255, 255, 255 ) ; } ( void ) ResetQuantumMemory ( imsx * imsy, 1",0
400,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * data = ( vpx_ref_frame_t * ) <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; # if CONFIG_VP9_HIGHBITDEPTH if ( frame -> frame_type > VPX_REFFRAME_HIGHBITDEPTH ) { return VPX_CODEC_INVALID_PARAM ; } # endif <S2SV_ModStart> sd ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( frame -> frame_type > VPX_REFFRAME_HIGHBITDEPTH ) { return VPX_CODEC_INVALID_PARAM ; } # endif <S2SV_ModStart> sd ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( frame -> frame_type > VPX_REFFRAME_HIGHBITDEPTH ) { return VPX_CODEC_INVALID_PARAM ; } # endif <S2SV_ModStart> } else { # if CONFIG_VP9_HIGHBITDEPTH if ( frame -> frame_type > VPX_REFFRAME_HIGHBITDEPTH ) { return VPX_CODEC_INVALID_PARAM ; } # endif",0
401,"<S2SV_ModStart> i2_cur_mb_addr, u1_num_mbs, u1_num_mbsNby2 <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbs, u1_num_mbsNby2 <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbsNby2, u1_num_mbsNby2 <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbs, u1_num_mbsNby2 <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbs, u1_num_mbsNby2 <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbsNby2, u1_num_mbsNby2 <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbsNby2, u1_num_mbsNby2 <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbsNby2, u1_num_mbsNby2 <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbsN",0
402,<S2SV_ModStart> ; UWORD32 u4_x_dst_offset <S2SV_ModEnd> = 0 ; <S2SV_ModStart> == B_PIC ) { <S2SV_ModStart> ps_dec ) ; u4_x_dst_offset = ps_dec -> u2_mb_x ; u4_y_dst_offset = ps_dec -> u2_mb_y ; } else { <S2SV_ModEnd> impeg2d_dec_p_mb_params ( ps_dec <S2SV_ModStart> ps_dec ) ; u4_x_dst_offset = ps_dec -> u2_mb_x ; u4_y_dst_offset = ps_dec -> u2_mb_y ; } <S2SV_ModStart> == B_PIC ) { <S2SV_ModStart> ps_dec ) ; u4_y_dst_offset = ps_dec -> u2_mb_y ; } else { <S2SV_ModEnd> impeg2d_dec_p_mb_params ( ps_dec <S2SV_ModStart> ps_dec ) ; u4_y_dst_offset = ps_dec -> u2_mb_y ; } <S2SV_ModStart> == B_PIC ) { <S2SV_ModStart> ps_dec ) ; u4_y_dst_offset = ps_dec -> u2_mb_x ; u4_y,0
403,<S2SV_ModStart> VP9_LAST_FLAG ) { int index = <S2SV_ModEnd> cm -> ref_frame_map <S2SV_ModStart> [ 0 ] ; YV12_BUFFER_CONFIG * const cfg = <S2SV_ModEnd> cm -> frame_bufs <S2SV_ModStart> -> frame_bufs [ index <S2SV_ModEnd> ]. buf,0
404,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
405,"<S2SV_ModStart> TX_SIZE tx_size = <S2SV_ModEnd> get_uv_tx_size ( mbmi <S2SV_ModStart> int i ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) { int r, c ; int max_blocks_wide = num_4x4_w ; int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> ( 5 + pd -> subsampling_y ) ) ; i = 0 ; for ( r = 0 ; r < num_4x4_h ; r += ( 1 << tx_size ) ) { for ( c = 0 ; c < num_4x4_w ; c += ( 1 << tx_size ) ) { if ( r < max_blocks_wide && c < max_blocks_wide ) visit ( plane, i, plane",0
406,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 4 ) ; <S2SV_ModEnd> src += src_stride",0
407,<S2SV_ModStart> { rowstoread = ( row + img -> row_offset ) <S2SV_ModEnd> % rowsperstrip ; <S2SV_ModStart> { rowstoread = ( row + img -> row_offset ) <S2SV_ModEnd> % rowsperstrip ; <S2SV_ModStart> { rowstoread = ( row + img -> row_offset ) <S2SV_ModEnd> % rowsperstrip ; <S2SV_ModStart> { rowstoread = ( row + img -> row_offset ) <S2SV_ModEnd> % rowsperstrip ; <S2SV_ModStart> { rowstoread = ( row + img -> row_offset ) <S2SV_ModEnd> % rowsperstrip ; <S2SV_ModStart> { rowstoread = ( row + img -> row_offset ) <S2SV_ModEnd> % rowsperstrip ; <S2SV_ModStart> { rowstoread = ( row + img -> row_offset ) <S2SV_ModEnd> % rowsperstrip ; <S2SV_ModStart> { rowstoread = ( row + img -> row_offset ) <S2SV_ModEnd> % rowsperstrip ; <S2SV_ModStart> { rowstoread = ( row + img -> row_offset ) <S2SV_ModEnd> % rowsperstrip ; <S2SV_ModStart> { rowstoread = ( row + img -> row_offset ) <S2SV_ModEnd> % rowsperstrip ; <S2SV_ModStart> { rowstoread = ( row + img -> row_offset ) <S2SV_ModEnd> % rowsperstrip ; <S2SV_ModStart> { rowstoread = ( row + img -> row,0
408,<S2SV_ModStart> ; } } Py_RETURN_NONE <S2SV_ModEnd> ; } <S2SV_null>,0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr <S2SV_ModEnd> [ psf -> <S2SV_ModStart> [ psf -> header. ptr <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ; psf -> header. ptr <S2SV_ModEnd> [ psf -> <S2SV_ModStart> [ psf -> header. ptr <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
410,<S2SV_ModStart> num & ( 1U << number <S2SV_ModEnd> ) ) return <S2SV_ModStart> num - ( 1U << number ) ; else if ( num & ( 1U << number ) ) return num - ( 1U << number ) ; else if ( num & ( 1U << number ) ) return num - ( 1U << number ) ; else if ( num & ( 1U << number ) ) return num - ( 1U << number ) ; else if ( num & ( 1U << number ) ) return num - ( 1U << number ) ; else if ( num & ( 1U << number ) ) return num - ( 1U << number ) ; else if ( num & ( 1U << number ) ) return num - ( 1U << number ) ; else if ( num & ( 1U << number ) ) return num - ( 1U << number ) ; else if ( num & ( 1U << number ) ) return num - ( 1U << number ) ; else if ( num & ( 1U << number ) ) return num - ( 1U << number ) ; else if ( num & ( 1U << number ) ) return num - ( 1U << number ) ; else if ( num & ( 1U << number ) ),0
411,"<S2SV_ModStart> int w = img -> width [ plane ] ; const int h = img -> height [ plane ] ; int y ; for ( y = 0 ; y < h ; ++ y ) { if ( fread ( buf, 1, w, file )!= w ) return 0 ; buf += stride ; } } for ( y = 0 ; y < h ; ++ y ) { if ( fread ( buf, 1, w, file )!= w ) return 0 ; buf += stride ; } for ( y = 0 ; y < h ; ++ y ) { if ( fread ( buf, 1, w, file )!= w ) return 0 ; buf += stride ; } } return <S2SV_ModEnd> 1 ; } <S2SV_ModStart> 1 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
412,"<S2SV_ModStart> = NULL ; uint32_t attr_len ; uint32_t <S2SV_ModEnd> orig_attr_len ; uint16_t <S2SV_ModStart> 1 ; } if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } attr_len = avp -> length - sizeof ( struct l2tp_avp_t ) ; MD5_Init ( & md5_ctx ) ; MD5_Update ( & md5_ctx, & avp -> type, sizeof ( avp -> type ) ) ; MD5_Update ( & md5_ctx, & avp -> type, sizeof ( avp -> type ) ) ; MD5_Update ( & md5_ctx, secret, secret_len ) ; MD5_Update ( & md5_ctx, RV -> val. octets, RV -> length ) ; MD5_Final ( p1",0
413,<S2SV_ModStart> 1 ; case EVP_CTRL_AEAD_SET_IVLEN_FIXED : if ( arg <= 0 || arg > CHACHA_CTR_SIZE ) return 0 ; actx -> nonce [ 0 ] = actx -> key. counter [ 1 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr ) ; actx -> nonce [ 1 ] = actx -> key. counter [ 2 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 4 ) ; return 1 ; case EVP_CTRL_AEAD_SET_IVLEN_FIXED : if ( arg <= 0 || arg > CHACHA_CTR_SIZE ) return 0 ; actx -> nonce [ 0 ] = actx -> key. counter [ 1 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr ) ; actx -> nonce [ 1 ] = actx -> key. counter [ 2 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 4 ) ; return 1 ; case EVP_CTRL_AEAD_SET_IVLEN_FIXED : if ( arg <= 0 || arg >,0
414,"<S2SV_ModStart>, 0, comm_event -> comm_size <S2SV_ModEnd> ) ; if",0
415,"<S2SV_ModStart> ; BT_DBG ( ""sock <S2SV_blank> %p, <S2SV_blank> peer <S2SV_blank> %d, <S2SV_blank> sk <S2SV_blank> %p"" <S2SV_ModEnd>, sock, <S2SV_ModStart>, sk, peer ) ; if ( peer ) memcpy ( & sa -> rc_bdaddr, & sk -> sk_addr, sizeof ( struct sockaddr_storage ) ) ; else memset ( & sa -> rc_bdaddr, 0, sizeof ( struct sockaddr_storage ) ) ; sa -> rc_family = AF_BLUETOOTH ; sa -> rc_channel = rfcomm_pi ( sk ) -> channel ; if ( peer ) bacpy ( & sa -> rc_bdaddr, & sk -> sk_dst ) ; else bacpy ( & sa -> rc_bdaddr, & sk -> sk_addr ) ; * len = sizeof ( struct sockaddr_rc ) ; if ( peer ) memcpy ( & sa -> rc_bdaddr, & sk -> sk_src, sizeof ( struct sockaddr_storage ) ) ; else memcpy ( & sa -> rc_bdaddr, & sk -> sk_src ) ; <S2SV_ModEnd> * len =",0
416,"<S2SV_ModStart> MT_CPTYPE_PASSSALT ) { snprintf ( pass_salt, sizeof ( pass_salt ), ""%.*s"", cpkt. length, pass_salt ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PLAINDATA ) { fwrite ( ( const void * ) cpkt. data, 1, cpkt. length, stdout ) ; } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 1 ; if ( is_a_tty ) { raw_term ( ) ; setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch ) ; } } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 1 ; if ( is_a_tty ) { raw_term ( ) ; setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch ) ; } } success = parse_control_packet ( NULL, 0,",0
417,"<S2SV_ModStart> MUTT_ABORT ) { imap_exec ( adata, ""STARTTLS"", IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc!= IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could <S2SV_blank> not <S2SV_blank> negotiate <S2SV_blank> TLS <S2SV_blank> connection"" ) ) ; imap_exec ( adata, ""CAPABILITY"", IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted <S2SV_blank> connection <S2SV_blank> unavailable"" ) ) ; imap_exec ( adata, ""STARTTLS"", IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc!= IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ (",0
418,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
419,<S2SV_ModStart>!= 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModEnd> if ( strncmp <S2SV_ModStart>!= 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModEnd> if ( strncmp <S2SV_ModStart>!= 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModEnd> if ( strncmp <S2SV_ModStart>!= 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModEnd> if ( strncmp <S2SV_ModStart>!= 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModEnd> if ( strncmp <S2SV_ModStart>!= 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModEnd> if ( strncmp <S2SV_ModStart>!= 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModEnd> if ( strncmp <S2SV_ModStart>!= 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModEnd> if ( strncmp <S2SV_ModStart>!= 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModEnd> if ( strncmp <S2SV_ModStart>!= 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModEnd> if ( strncmp <S2SV_ModStart>!= 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModEnd> if ( strncmp <S2SV_ModStart>,0
420,"<S2SV_ModStart> remainder, & rlen ) ; if ( ret ) return ret ; if (! check_atype_tag ( a, & t ) ) return ASN1_BAD_ID ; if (! decode_atype_to_ptr ( & t, contents, clen, a, retrep ) ) return ASN1_BAD_ID <S2SV_ModEnd> ; if (",0
421,"<S2SV_ModStart> * slavename ; if ( ( user = find_user ( curconn -> username ) )!= NULL ) { md5_state_t state ; <S2SV_ModStart> read_userfile ( ) <S2SV_ModEnd> ; # if <S2SV_ModStart> } # endif strncpy ( md5data + 1, user -> password, 82 ) ; memcpy ( md5data + 1 + strlen ( user -> password ), curconn -> pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( user -> password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; md5sum [ 0 ] = 0 ; init_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr, pkthdr -> seskey, curconn -> outcounter ) ; curconn -> outcounter += add_control_packet ( & pdata, MT_CPTYPE_END_AUTH, NULL, 0 ) ; send_udp ( curconn, & pdata ) ; if ( user == NULL",0
422,"<S2SV_ModStart> ; if ( unicode_compare_with_ASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart> { if ( unicode_compare_with_ASCIIString <S2SV_ModEnd> ( name,",0
423,<S2SV_ModStart> off } ; if (! str ) { return - 1 ; },0
424,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
425,"<S2SV_ModStart> credssp ) ; connectErrorCode = AUTHENTICATIONERROR ; fprintf ( stderr, ""Authentication <S2SV_blank> failure, <S2SV_blank> check <S2SV_blank> credentials.\\n"" ""If <S2SV_blank> credentials <S2SV_blank> are <S2SV_blank> valid, <S2SV_blank> the <S2SV_blank> NTLMSSP <S2SV_blank> implementation <S2SV_blank> may <S2SV_blank> be <S2SV_blank> to <S2SV_blank> blame.\\n"" ) ; credssp_free ( transport -> credssp ) ; <S2SV_ModStart> FALSE ; } if (! transport_connect_tls ( transport ) ) { connectErrorCode = AUTHENTICATIONERROR ; fprintf ( stderr, ""Authentication <S2SV_blank> failure, <S2SV_blank> check <S2SV_blank> credentials.\\n"" ""If <S2SV_blank> credentials <S2SV_blank> are <S2SV_blank> valid, <S2SV_blank> the <S2SV_blank> NTLMSSP <S2SV_blank> implementation <S2SV_blank> may <S2SV_blank> be <S2SV_blank> to <S2SV_blank> blame.\\n"" ) ; credssp_free ( transport -> credssp ) ; connectErrorCode = AUTHENTICATIONERROR ; fprintf ( stderr, ""Authentication <S2SV_blank> failure, <S2SV_blank> check <S2SV_blank> credentials.\\n"" ""If <S2SV_blank> credentials <S2SV_blank> are <S2SV_blank> valid, <S2SV_blank> the <S2SV_blank> NTLMSSP <S2SV_blank> implementation <S2SV_blank> may <S2SV_blank> be <S2SV_blank> to <S2SV_blank> blame.\\n"" ) ; credssp_free ( transport -> credssp ) ; connectErrorCode = AUTHENTICATIONERROR ; fprintf ( stderr, ""Authentication",0
426,"<S2SV_ModStart> if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; continue ; } s = exif_get_long ( o, EXIF_BYTE_ORDER_INTEL ) ; if ( s > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; continue ; } if ( s > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; continue ; } if ( s > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; continue ; } if ( s > buf_size ) { exif_log ( en -> log, EXIF_",0
427,<S2SV_ModStart> bd_addr ) { if (! check_addr ( bd_addr ) ) return BT_STATUS_INVALID_ARGS ;,0
428,"<S2SV_ModStart> int i ; size_t avail ; size_t <S2SV_ModEnd> expect ; txid <S2SV_ModStart> 4 ) ; expect = 8 + 8 + nxip * 8 ; if ( nxip < 0 || nxip > avail || expect > avail ) goto bad_format ; xmin = pq_getmsgint64 ( buf ) ; xmax = pq_getmsgint64 ( buf ) ; if ( xmin == 0 || xmin > xmax || xmax > MAX_TXID ) goto bad_format ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; snap -> nxip = nxip ; SET_VARSIZE ( snap, TXID_SNAPSHOT_SIZE ( nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last || cur < xmin || cur >= xmax ) goto bad_format ; snap -> xip [ i ] = cur ; last = cur ; } PG_RETURN_POINTER ( snap ) ; bad_format : elog ( ERROR, ""invalid <S2SV_blank> snapshot <S2SV_blank> data"" ) ; return ( Datum ) NULL <S2SV_ModEnd> ; } <S2SV_null>",0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr,0
430,<S2SV_ModStart> ( epoll_ ) ; if (! epoll ) OE_RAISE_ERRNO ( OE_EINVAL ) <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
431,"<S2SV_ModStart> parse_global_option ( CMD_INITIALIZE, NULL, NULL ) ; if ( errstr ) { s_log ( LOG_ERR, ""Global <S2SV_blank> options: <S2SV_blank> %s"", errstr ) ; return 1 ; } } if ( * section_ptr == & new_service_options || eof ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_ERR, ""Inetd <S2SV_blank> mode: <S2SV_blank> %s"", errstr ) ; else s_log ( LOG_ERR, ""Service <S2SV_blank> [%s]: <S2SV_blank> %s"", ( * section_ptr ) -> servname, errstr ) ; return 1 ; } } if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing",0
432,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_MD_PHNUM_MAX : * ( size_t * ) val = ms -> elf_md_phnum_max ; return 0 ; case MAGIC_PARAM_ELF_MD_SHNUM_MAX : * ( size_t * ) val = ms -> elf_md_shnum_max ; return 0 ;,0
433,"<S2SV_ModStart> offset ) { struct address_space * mapping = page -> mapping ; journal_t * journal = EXT4_JOURNAL ( mapping -> host ) ; if ( offset == 0 ) ClearPageChecked ( page ) ; if ( journal ) jbd2_journal_invalidatepage ( journal, page, offset ) ; else block_invalidatepage <S2SV_ModEnd> ( page, <S2SV_ModStart> offset ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
434,"<S2SV_ModStart> i + 1 ) ; if (! trak ) continue ; GF_SAFEALLOC ( writer, TrackWriter ) ; if (! writer ) goto exit ; writer -> sampleNumber = 1 ; writer -> mdia = trak -> Media ; writer -> stbl = trak -> Media -> information -> sampleTable ; writer -> timeScale = trak -> Media -> mediaHeader -> timeScale ; writer -> all_dref_mode = Media_SelfContainedType ( writer -> mdia ) ; if ( trak -> sample_encryption ) writer -> prevent_dispatch = GF_TRUE ; writer -> isDone = 0 ; writer -> chunkDur = 0 ; writer -> chunkDur = 0 ; writer -> constant_size = writer -> constant_dur = 0 ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STSC ) ; if (! writer -> stsc ) return GF_OUT_OF_MEM ; if ( writer -> stbl -> SampleSize -> sampleSize ) writer -> sampleSize = writer -> stbl -> SampleSize -> sampleSize ; if ( writer -> stbl -> Time",0
435,"<S2SV_ModStart> 17 ] ; # if defined ( __linux__ ) && defined ( _POSIX_MEMLOCK_RANGE ) mlock ( md5data, sizeof ( md5data ) ) ; mlock ( md5sum, sizeof ( md5sum ) ) ; # endif <S2SV_ModStart> = 0 ; # if defined ( __linux__ ) && defined ( _POSIX_MEMLOCK_RANGE ) <S2SV_ModStart> password, 82 ) ; # else strncpy ( md5data + 1, password, 82 ) ; # endif # if defined ( __linux__ ) && defined ( _POSIX_MEMLOCK_RANGE ) memcpy ( md5data + 1 + strlen ( password ), pass_salt, 16 ) ; # else memcpy ( md5data + 1 + strlen ( password ), pass_salt, 16 ) ; # endif <S2SV_ModEnd> md5_init ( & <S2SV_ModStart> state ) ; # if defined ( __linux__ ) && defined ( _POSIX_MEMLOCK_RANGE ) <S2SV_ModStart> 17 ) ; # else memcpy ( md5data + 1 + strlen ( password ), pass_salt, 16 ) ; # endif",0
436,<S2SV_ModStart> ; if ( global_mibindexes ) { int i ; for ( i = 0 ; i < global_mibindex ; ++ i ) SNMP_FREE ( global_mibindexes [ i ] ) ; free ( global_mibindexes ) ; global_mibindex = 0 ; global_mibindex_max = 0 ; global_mibindexes = NULL ; } if (,0
437,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
438,<S2SV_ModStart> ( ) ; g_hash_table_remove_all ( headers ) ;,0
439,<S2SV_ModStart> -> y_buffer ; # if CONFIG_VP9_HIGHBITDEPTH if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { # else if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { # endif # if CONFIG_VP9_HIGHBITDEPTH if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { # endif # if CONFIG_VP9_HIGHBITDEPTH if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { # endif # if CONFIG_VP9_HIGHBITDEPTH if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { # endif # if CONFIG_VP9_HIGHBITDEPTH if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { # endif # if CONFIG_VP9_HIGHBITDEPTH if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { # if CONFIG_VP9_HIGHBITDEPTH if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { # if CONFIG_VP9,0
440,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_rd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> left_seg_context ) ) ; for ( mi_col = tile -> mi_col_start ; mi_col < tile -> mi_col_end ; mi_col += MI_BLOCK_SIZE ) { int dummy_rate ; int64_t dummy_dist ; BLOCK_SIZE i ; MACROBLOCK * x = & cpi -> mb ; if ( sf -> adaptive_pred_interp_filter ) { for ( i = BLOCK_4X4 ; i < BLOCK_8X8 ; ++ i ) { const int num_4x4_w = num_4x4_blocks_wide_lookup [ i ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ i ] ; for ( x -> sb_index = 0 ; x -> sb_index < 4 ; ++ x -> sb_index ) for ( x -> b_index = 0 ; x -> b_index < 16 / num_4x4_,0
441,"<S2SV_ModStart>, obj_tlen ; u_int offset ; u_int link_type ; union { float f ; uint32_t i ; } bw ; ND_TCHECK ( * pptr ) ; tptr = pptr ; lmp_com_header = ( const struct lmp_common_header * ) pptr ; ND_TCHECK ( * lmp_com_header ) ; if ( LMP_EXTRACT_VERSION ( lmp_com_header -> version_res [ 0 ] )!= LMP_VERSION ) { ND_PRINT ( ( ndo, ""LMP <S2SV_blank> version <S2SV_blank> %u <S2SV_blank> packet <S2SV_blank> not <S2SV_blank> supported"", LMP_EXTRACT_VERSION ( lmp_com_header -> version_res [ 0 ] ) ) ) ; return ; } if ( ndo -> ndo_vflag < 1 ) { ND_PRINT ( ( ndo, ""LMPv%u <S2SV_blank> %s <S2SV_blank> Message, <S2SV_blank> length: <S2SV_blank> %u"", LMP_EXTRACT_VERSION ( lmp_com_header -> version_res [ 0 ] ), tok2str ( lmp_msg_type_values, ""unknown, <S2SV_blank> type:",0
442,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static nmv_context_counts * <S2SV_ModEnd> inc_mvs ( const <S2SV_ModStart> i ) { nmv_context_counts * counts = & mbmi -> counts [ <S2SV_ModEnd> mbmi -> ref_frame <S2SV_ModStart> [ i ] <S2SV_ModEnd> ] ; vp9_inc_mv <S2SV_ModStart> ; vp9_inc_mv ( counts, ref -> <S2SV_ModEnd> row - ref <S2SV_ModStart> row - ref -> row, ref -> <S2SV_ModEnd> col - ref <S2SV_ModStart> col } ; counts += vp9_get_context_counts ( counts <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
443,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ),",0
444,"<S2SV_ModStart> ; if ( unlikely ( <S2SV_ModStart>, GFP_ATOMIC ) ) ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; } skb_pull_rcsum ( skb_out, hdr_size ) ; memmove ( skb_out -> data - ETH_HLEN, skb_mac_header ( skb_out ), ETH_HLEN ) ; skb_set_mac_header ( skb_out, - ETH_HLEN ) ; skb_reset_network_header ( skb_out ) ; skb_reset_transport_header ( skb_out ) ; hlist_for_each_entry ( entry, chain, list ) { size = entry -> skb -> len - hdr_size ; memcpy ( skb_put ( skb_out, size ), entry -> skb -> data + hdr_size, size ) ; } free : batadv_frag_clear_chain ( chain ) ; return skb_out <S2SV_ModEnd> ; } <S2SV_null>",0
445,"<S2SV_ModStart> ) return ; DEBUGMSGTL ( ( ""init_mib"", ""Seen <S2SV_blank> MIBDIRS: <S2SV_blank> Looking <S2SV_blank> in <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> mib <S2SV_blank> dirs <S2SV_blank>...\\n"", env_var ) ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibdir ( entry ) ; entry = strtok_r ( NULL, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = netsnmp_getenv ( ""MIBFILES"" ) ; if ( env_var == NULL ) { if ( confmibs!= NULL ) env_var = strdup ( confmibs ) ; else env_var = strdup ( NETSNMP_DEFAULT_MIBS ) ; } else { <S2SV_ModStart> NULL ) ; }",0
446,"<S2SV_ModStart> { fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ], O_RDWR ) <S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> dev ) ) ) <S2SV_ModStart> 1 ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_KEY ) ) <S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_REL ) ) <S2SV_ModStart> x ++ ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> ]. mapped_id )",0
447,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
448,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s, <S2SV_ModStart> & 1 ) vpx_lpf_vertical_4 <S2SV_ModEnd> ( s +",0
449,<S2SV_ModStart> krb5_error_code iakerb_alloc_context ( krb5_gss_ctx_t <S2SV_ModEnd> * pctx ) <S2SV_ModStart> pctx ) { krb5_gss_ctx_t <S2SV_ModEnd> ctx ; krb5_error_code,0
450,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> bitmapDC = CreateCompatibleDC",1
451,<S2SV_ModStart> ; while ( ( <S2SV_ModStart> )!= START_CODE_PREFIX ) && ( ps_stream -> u4_offset < ps_stream -> u4_max_offset ),1
452,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { ret = <S2SV_ModEnd> - EINVAL ; <S2SV_ModStart> - EINVAL ; goto out ; }",1
453,"<S2SV_ModStart>! imethod ) { mono_error ( ""failed <S2SV_blank> to <S2SV_blank> bind <S2SV_blank> generic <S2SV_blank> method <S2SV_blank> to <S2SV_blank> inflated <S2SV_blank> class: <S2SV_blank> %s"", mono_class_get_full_name ( klass ) ) ; mono_error ( ""failed <S2SV_blank> to <S2SV_blank> bind <S2SV_blank> generic <S2SV_blank> method <S2SV_blank> to <S2SV_blank> inflated <S2SV_blank> class: <S2SV_blank> %s"", mono_class_get_full_name ( klass ) ) ; mono_error ( ""failed <S2SV_blank> to <S2SV_blank> bind <S2SV_blank> generic <S2SV_blank> method <S2SV_blank> to <S2SV_blank> inflated <S2SV_blank> class: <S2SV_blank> %s"", mono_class_get_full_name ( klass ) ) ; mono_error ( ""failed <S2SV_blank> to <S2SV_blank> bind <S2SV_blank> generic <S2SV_blank> method <S2SV_blank> to <S2SV_blank> inflated <S2SV_blank> class: <S2SV_blank> %s"", mono_class_get_full_name ( klass ) ) ; mono_error ( ""failed <S2SV_blank> to <S2SV_blank> bind <S2SV_blank> generic <S2SV_blank> method <S2SV_blank> to <S2SV_blank> inflated <S2SV_blank> class: <S2SV_blank> %s"", mono_class_get_full_name ( klass ) ) ; mono_error ( ""failed <S2SV_blank> to <S2SV_blank> bind <S2SV_blank> generic <S2SV_blank> method <S2SV_blank> to <S2SV_blank> inflated <S2SV_blank> class: <S2SV_blank> %s""",0
454,<S2SV_ModStart> ) ] ; long <S2SV_ModEnd> tmp ; if,0
455,"<S2SV_ModStart> char * last_elem = NULL <S2SV_ModStart> size_t len ; const char * l_origin = NULL, * l_platform = NULL ; <S2SV_ModStart> ( ( ( strncmp ( & name [ 1 ], ""ORIGIN"", 6 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 1 ], ""PLATFORM"", 8 ) == 0 && ( len = 9 )!= 0 ) ) && ( name [ len ] == '\\0' || name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) || ( name [ 1 ] == '{' && ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 9 )!= 0 ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( len = 11 )!= 0 ) ) ) ) { repl = ( len == 7 || name [ 2 ] == 'O' )? ( __libc_enable_secure? NULL : l -> l_origin ) : _dl_platform ) ; if ( repl!= NULL && repl!= ( const char * ) - 1",0
456,"<S2SV_ModStart> ) ; } # ifdef H264DEC_TRACE sprintf ( pDecInst -> str, ""H264SwDecInit# <S2SV_blank> decInst <S2SV_blank> %p <S2SV_blank> noOutputReordering <S2SV_blank> %d"", ( void * ) decInst, noOutputReordering ) ; DEC_API_TRC ( pDecInst -> str ) ; # endif <S2SV_ModStart> ) H264SwDecMalloc ( sizeof ( decContainer_t ) ) ; if ( pDecCont == NULL ) { DEC_API_TRC ( ""H264SwDecInit# <S2SV_blank> ERROR: <S2SV_blank> Memory <S2SV_blank> allocation <S2SV_blank> failed"" ) ; return ( H264SWDEC_MEMFAIL ) ; } rv = h264bsdInit ( & pDecInst -> storage, noOutputReordering ) ; if ( rv!= HANTRO_OK ) { H264SwDecRelease ( pDecCont ) ; return ( H264SWDEC_MEMFAIL ) ; } pDecCont -> decStat = INITIALIZED ; pDecCont -> picNumber = 0 ; # ifdef H264DEC_TRACE sprintf ( pDecCont -> str, ""H264SwDecInit# <S2SV_blank> OK: <S2SV_blank> return <S2SV_blank> %p"", ( void * )",0
457,"<S2SV_ModStart> drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> srr ) ) { struct in_device * in_dev = __in_dev_get_rcu ( dev ) ; if ( in_dev &&! IN_DEV_SOURCE_ROUTE ( in_dev ) ) goto drop ; if ( ip_options_rcv_srr ( skb ) ) goto drop ; } return 0 ; inhdr_error : IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INHDRERRORS ) ; goto drop ; } <S2SV_ModStart> == 5 ) <S2SV_ModEnd> return 0 ; <S2SV_ModStart> return 0 ; <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
458,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
459,<S2SV_ModStart> goto errout ; _ogg_free ( info -> stagemasks ) ; _ogg_free ( info -> stagebooks ) ;,0
460,"<S2SV_ModStart> ; krb5_key_data * tmp_key_data ; krb5_key_data * <S2SV_ModStart> ; if (! key_data ) { err = ENOMEM ; <S2SV_ModEnd> goto cleanup ; <S2SV_ModStart> goto cleanup ; } tmp_key_data = ( krb5_key_data * ) k5malloc ( n_key_data * sizeof ( * tmp_key_data ), & err ) ; if (! tmp_key_data ) { k5free ( key_data ) ; goto cleanup ; } memcpy ( tmp_key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ; for ( i = 0 ; i < n_key_data ; i ++ ) if ( key_data [ i ]. key_data_ver == 1 ) { key_data [ i ]. key_data_ver = 2 ; key_data [ i ]. key_data_type [ 1 ] = KRB5_KDB_SALTTYPE_NORMAL ; key_data [ i ]. key_data_length [ 1 ] = 0 ; key_data [ i ]. key_data_contents",0
461,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
462,"<S2SV_ModStart> ] ) ; if ( nByte < 0 || nByte > FTS3TOK_MAX_INPUT ) { sqlite3_free ( pCsr -> zInput ) ; pCsr -> zInput = 0 ; } else if ( nByte > FTS3TOK_MAX_INPUT ) { sqlite3_free ( pCsr -> zInput ) ; pCsr -> zInput = 0 ; } if ( pCsr -> zInput == 0 ) { rc = SQLITE_NOMEM ; } else { memcpy ( pCsr -> zInput, zByte, nByte ) ; pCsr -> zInput [ nByte ] = 0 ; rc = pTab -> pMod -> xOpen ( pTab -> pTok, pCsr -> zInput, nByte, & pCsr -> pCsr ) ; if ( rc == SQLITE_OK ) { pCsr -> pCsr -> pTokenizer = pTab -> pTok ; } } } if ( rc!= SQLITE_OK ) return rc ;",0
463,<S2SV_ModStart> filp ) { struct socket_info * si = <S2SV_ModEnd> SOCKET_I ( inode <S2SV_ModStart> ( inode ) ; spin_lock_irq ( & si -> i_sock_lock ) ; list_del_init ( & si -> list ) ; spin_unlock_irq ( & si -> i_sock_lock,0
464,"<S2SV_ModStart> * orelse, string type_comment, <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. type_comment = type_comment",0
465,"<S2SV_ModStart> char * name, my_off_t * index_pos ) { reg2 uint key ; reg1 MI_KEYDEF * keyinfo ; File new_file ; my_off_t r_locks, w_locks ; MYISAM_SHARE * share = info -> s ; MI_STATE_INFO old_state ; DBUG_ENTER ( ""mi_sort_index"" ) ; for ( key = 0, keyinfo = & share -> keyinfo [ 0 ] ; key < share -> base. keys ; key ++, keyinfo ++ ) if ( keyinfo -> key_alg == HA_KEY_ALG_RTREE ) DBUG_RETURN ( 0 ) ; fn_format ( param -> temp_filename, name, """", MI_NAME_IEXT, 2 + 4 + 32 ) ; fn_format ( param -> temp_filename, param -> temp_filename, """", INDEX_TMP_EXT, 2 + 4 + 32 ) ; if ( ( new_file = mysql_file_create ( mi_key_file_datatmp, fn_format ( param -> temp_filename, param -> temp_filename, """", INDEX_TMP_EXT, 2",0
466,"<S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_BAD_REQUEST <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NGHTTP2",0
467,"<S2SV_ModStart> UINT error ; if (! <S2SV_ModStart>, eventId ) ||! <S2SV_ModEnd> Stream_Read_UINT32 ( s <S2SV_ModStart>, pduLength ) ) { return CHANNEL_RC_INVALID_DATA ; } <S2SV_ModEnd> # ifdef WITH_DEBUG_RDPEI",0
468,"<S2SV_ModStart>, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_setsockopt(IPPROTO_IPV4) <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"" <S2SV_ModEnd>, pData -> <S2SV_ModStart>, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_setsockopt(IPPROTO_IPV4) <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"" <S2SV_ModEnd>, pData -> <S2SV_ModStart>, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_setsockopt(IPPROTO_IPV4) <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"" <S2SV_ModEnd>, pData -> <S2SV_ModStart>, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_setsockopt(IPPROTO_IPV4) <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"" <S2SV_ModEnd>, pData -> <S2SV_ModStart>, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_setsockopt(IPPROTO_IPV4) <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"" <S2SV_ModEnd>, pData -> <S2SV_ModStart>, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> z",0
469,"<S2SV_ModStart> struct flowi6 fl6 ; struct ip6_options_rcu * opt <S2SV_ModStart> daddr ) ; opt = rcu_dereference ( np -> opt ) ; if (! opt ) { pr_debug ( ""%s: <S2SV_blank> skb:%p, <S2SV_blank> len:%d, <S2SV_blank> src:%pI6 <S2SV_blank> dst:%pI6\\n"", __func__, skb, skb -> len, & fl6, & fl6. saddr, & fl6. daddr ) ; SCTP_INC_STATS ( sock_net ( sk ), SCTP_MIB_OUTSCTPPACKS ) ; fl6. flowlabel = np -> flow_label ; IP6_ECN_flow_xmit ( sk, fl6. flowlabel ) ; if ( ipv6_addr_type ( & fl6. saddr ) & IPV6_ADDR_LINKLOCAL ) fl6. flowi6_oif = sk -> sk_bound_dev_if ; if ( np -> opt && np -> opt -> srcrt ) { struct rt0_hdr * rt0 = ( struct rt0_hdr * ) np -> opt -> srcrt ; fl",0
470,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
471,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> UINT32 failureCode ; if (! Stream_IsEmpty ( s ) ) { <S2SV_ModStart> = NEGO_STATE_FAIL ; },0
472,"<S2SV_ModStart> = 0 ; bn_t t ; bn_null ( t ) ; RLC_TRY { bn_new ( t ) ; switch ( operation ) { case RSA_ENC : bn_zero ( m ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, RSA_PUB ) ; * p_len = k_len - 3 - m_len ; for ( int i = 0 ; i < * p_len ; i ++ ) { bn_lsh ( m, m, 8 ) ; do { rand_bytes ( & pad, 1 ) ; bn_add_dig ( m, m, pad ) ; } bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, 0 ) ; bn_lsh ( m, m, m_len * 8 ) ; } bn_lsh ( m, m, m_len * 8 ) ; break ; case RSA_DEC : m_len = k_len - 1 ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; if ( pad!=",0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,"<S2SV_ModStart> 8 ) ; psf_init_files ( psf ) ; psf_log_printf ( psf, ""File <S2SV_blank> : <S2SV_blank> %s\\n"", path ) ; if ( copy_filename ( psf, path )!= 0 ) { sf_errno = psf -> error ; return NULL ; } ; psf -> file. mode = mode ; if ( strcmp ( path, ""-"" ) == 0 ) psf -> error = psf_set_stdio ( psf ) ; else psf -> error = psf_fopen ( psf ) ; return psf_open_file ( psf, sfinfo ) ;",0
475,"<S2SV_ModStart> VP9_COMMON * cm, int <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
476,"<S2SV_ModStart> & cpi -> td. <S2SV_ModStart> mi_cols ) ; <S2SV_ModEnd> vp9_setup_src_planes ( x <S2SV_ModStart> ( x, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vp9_setup_pre_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vp9_setup_dst_planes ( xd, get_frame_new_buffer ( cm ), 0, 0 ) ; vp9_setup_block_planes ( & x -> e_mbd, cm -> subsampling_x, cm -> subsampling_y ) ; x -> mi [ 0 ] -> mbmi. mode = DC_PRED ; xd -> mi [ 0 ] -> mbmi. uv_mode = DC_PRED ; vpx_memset ( xd -> above_context [ 0 ], 0, sizeof ( * xd -> above_context [ 0 ] ) * 2 * aligned_mi_cols * MAX_MB_PLANE ) ; vpx_memset ( xd -> above_seg_context, 0, sizeof ( * xd ->",0
477,"<S2SV_ModStart> hp ) ; if (! <S2SV_ModEnd> htc_request_check_host_hdr ( hp <S2SV_ModStart> ( hp ) ) { WSPR <S2SV_ModEnd> ( sp, <S2SV_ModStart> ( sp, SLT_HttpGarbage, htc -> rxbuf <S2SV_ModEnd> ) ; return <S2SV_ModStart> ) ; } retval = htc_request_check_url_hdr ( hp ) ; if ( retval!= 0 ) { WSP ( sp, SLT_Error, ""Duplicated <S2SV_blank> URL <S2SV_blank> header"" ) ; return ( retval ) ; } retval = http_splitline ( sp -> wrk, sp -> fd, hp, htc, HTTP_HDR_REQ, HTTP_HDR_URL, HTTP_HDR_PROTO ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } retval = htc_request_check_url_hdr ( hp ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_Error, ""Duplicated <S2SV_blank> URL <S2SV_blank> header"" ) ; return ( retval ) ; }",0
478,"<S2SV_ModStart> EOFOp 0x07 char * magick_buffer <S2SV_ModEnd> ; Image * <S2SV_ModStart> char * ) magick_buffer <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( count!= 3 ) || ( memcmp ( magick_buffer, ""\\122\\314"", 3 )!= 0 ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; do { image -> page. x = ReadBlobLSBShort ( image ) ; image -> page. y = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; flags = ( MagickStatusType ) ReadBlobByte ( image ) ; image -> matte = flags & 0x04 ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; flags = ( MagickStatusType ) ReadBlobByte ( image ) ; image -> matte = flags & 0x08 ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows",0
479,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> sizeof ( tETH_HDR ),1
480,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ps_cur_poc -> u2_frame_num <S2SV_ModStart> ps_cur_poc -> u2_frame_num && ps_cur_poc -> u2_frame_num <S2SV_ModStart> ; if ( <S2SV_ModEnd> ps_cur_poc -> u2_frame_num <S2SV_ModStart> ps_cur_poc -> u2_frame_num && ps_cur_poc -> u2_frame_num <S2SV_ModStart> ; if ( <S2SV_ModEnd> ps_cur_poc -> u2_frame_num <S2SV_ModStart> ps_cur_poc -> u2_frame_num && ps_cur_poc -> u2_frame_num <S2SV_ModStart> ; if ( <S2SV_ModEnd> ps_cur_poc -> u2_frame_num <S2SV_ModStart> ps_cur_poc -> u2_frame_num && ps_cur_poc -> u2_frame_num <S2SV_ModStart> ; if ( <S2SV_ModEnd> ps_cur_poc -> u2_frame_num <S2SV_ModStart> ps_cur_poc -> u2_frame_num && ps_cur_poc -> u2_frame_num <S2SV_ModStart> ps_cur_poc -> u2_frame_num && ps_cur_poc -> u2,0
481,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> * karg ; <S2SV_ModEnd> struct pci_dev * <S2SV_ModStart> pci_dev * pdev <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> ) ) ; kfree ( karg ) ; <S2SV_ModStart> karg ) ; } if ( mpt_verify_adapter ( karg -> hdr. iocnum, & ioc ) < 0 ) { printk ( MYIOC_s_ERR_FMT ""%s@%d::mptctl_getiocinfo <S2SV_blank> - <S2SV_blank> "" ""Structure <S2SV_blank> size <S2SV_blank> mismatch!\\n"", __FILE__, __LINE__, iocnum ) ; kfree ( karg ) ; return - ENODEV ; } if ( karg -> hdr. maxDataSize!= data_size ) { printk ( MYIOC_s_ERR_FMT ""%s@%d::mptctl_getiocinfo <S2SV_blank> - <S2SV_blank> "" ""Structure <S2SV_blank> size <S2SV_blank> mismatch!\\n"", __FILE__, __LINE__ ) ; kfree ( karg ) ; return - ENODEV ;",0
482,"<S2SV_ModStart> ; pixels = AcquireQuantumMemory ( image -> columns, 3 * sizeof ( * pixels ) ) ; if ( pixels == ( unsigned char * ) NULL ) ThrowReaderException ( ResourceLimitError, ""MemoryAllocationFailed"" ) ; length = ( size_t ) ( 3 * image -> columns ) ; for ( y = 0 ; y < ( ssize_t ) image -> rows ; y ++ ) { count = ReadBlob ( image, length, pixels ) ; if ( ( size_t ) count!= length ) ThrowReaderException ( CorruptImageError, ""UnableToReadImageData"" ) ; p = pixels ; q = QueueAuthenticPixels ( image, 0, y, image -> columns, 1, exception ) ; if ( q == ( PixelPacket * ) NULL ) break ; SetPixelRed ( q, ScaleCharToQuantum ( 4 * * p ++ ) ) ; SetPixelGreen ( q, ScaleCharToQuantum ( 4 * * p ++ ) ) ; SetPixelBlue ( q, ScaleCharToQuantum ( 4 * * p ++ ) ) ; q ++ ; } if ( SyncAuthenticPixels ( image, 0, y, image -> columns, 1, exception ) == MagickFalse )",0
483,"<S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv",0
484,"<S2SV_ModStart> ; if ( exif_get_long ( buf + datao, EXIF_BYTE_ORDER_INTEL ) < 0 ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> order = EXIF_BYTE_ORDER_INTEL ; datao += exif_get_long ( buf + datao + 8, EXIF_BYTE_ORDER_INTEL ) ; if ( exif_get_short ( buf + datao, EXIF_BYTE_ORDER_INTEL ) < 0 ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } c = exif_get_short ( buf + datao, EXIF_BYTE_ORDER_INTEL ) ; datao += 2 ; exif_mnote_data_fuji_clear ( n ) ; n -> entries = exif_mem_alloc ( en -> mem, sizeof ( MnoteFujiEntry )",0
485,"<S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> directory <S2SV_blank> %s\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> directory <S2SV_blank> %s\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> directory <S2SV_blank> %s\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> directory <S2SV_blank> %s\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> directory <S2SV_blank> %s\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> directory <S2SV_blank> %s\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> directory <S2SV_blank> %s\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> directory <S2SV_blank> %s\\n"" <S2SV_ModEnd>, proc",0
486,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> opt = service_options <S2SV_ModStart> service_options. next <S2SV_ModEnd> ; while ( <S2SV_ModStart> 0 ; } s_log ( LOG_DEBUG, ""Service <S2SV_blank> [%s] <S2SV_blank> closed"", opt -> servname ) ; <S2SV_ModStart> -> ctx ) { if (! <S2SV_ModStart> + 1 ) ) { SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; } else { SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; s_log ( LOG_DEBUG, ""Service <S2SV_blank> [%s] <S2SV_blank> closed"", opt -> servname ) ; } } } CRYPTO_THREAD_write_lock ( stunnel_locks [ LOCK_SECTIONS ] ) ; opt = service_options. next ; service_free ( & service_options ) ; while ( opt ) { unsigned i ; s_log ( LOG_DEBUG, ""Unbinding <S2SV_blank> service <S2SV_blank> [%s]"", opt -> servname ) ; for ( i = 0 ; i <",0
487,<S2SV_ModStart> void ) { if (! recovery_started ) return ;,0
488,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ;",0
489,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
490,"<S2SV_ModStart> ps_slice_hdr ) { dpb_mgr_t * ps_dpb_mgr = ( dpb_mgr_t * ) ps_codec -> pv_dpb_mgr ; buf_mgr_t * ps_mv_buf_mgr = ( buf_mgr_t * ) ps_codec -> pv_mv_buf_mgr ; <S2SV_ModStart> u4_num_total_curr ; WORD8 ai1_curr_delta_poc_msb_present_flag [ MAX_DPB_SIZE ], ai1_foll_delta_poc_msb_present_flag [ MAX_DPB_SIZE ], ai1_num_st_curr_before [ MAX_DPB_SIZE ], u4_num_st_curr_after [ MAX_DPB_SIZE ], u4_num_st_curr_before, u4_num_st_curr_after, u4_num_lt_curr, u4_num_lt_curr, u4_num_lt_foll, u4_num_total_curr, ai1_curr_delta_poc_msb_present_flag [ MAX",0
491,"<S2SV_ModStart> int depth, bool <S2SV_ModEnd> fmt ) { <S2SV_ModStart> = 0 ; if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! names = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) { cJSON_free ( entries ) ; return 0 ; } memset ( names, 0, sizeof ( char * ) * numentries ) ; child = item -> child ; ++ depth ; if ( fmt ) len += depth ; while ( child ) { names [ i ] = print_string_ptr ( child -> string ) ; entries [ i ++ ] = ret = print_value ( child, depth, fmt ) ; if ( str && ret ) len += strlen ( ret ) + 2 + ( fmt? 2 + depth : 0 ) ; else fail = 1 ; child = child -> next ; } if (! fail ) { out = ( char * ) cJSON_malloc ( len ) ; if (! out ) fail = 1 ; } if (! fail ) { for ( i = 0 ; i < numentries ; ++ i ) { if ( names [ i ] ) c",0
492,"<S2SV_ModStart> sk ) ; if ( writable ) { unix_state_lock ( sk ) ; other = unix_peer ( sk ) ; if ( other ) { sock_poll_wait ( file, & unix_sk ( other ) -> peer_wait, wait ) ; unix_state_unlock ( sk ) ; } unix_state_lock ( sk ) ; } <S2SV_ModStart> { if ( unix_peer ( sk )!= sk ) { sock_poll_wait ( file, & unix_sk ( sk ) -> peer_wait, wait ) ; unix_state_unlock ( sk ) ; } sock_put ( sk ) ; } if ( writable ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; if ( writable ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; if ( writable ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE",0
493,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; sprintf ( outputbuffer, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", x, y, w, h ) ;",0
494,<S2SV_ModStart> * minor_status = GSS_S_DEFECTIVE_TOKEN ; return GSS_S_DEFECTIVE_TOKEN ; } if ( token_wrapper_len > ( size_t ) <S2SV_ModEnd> header -> buffer <S2SV_ModStart> buffer. length ) { * minor_status = GSS_S_DEFECTIVE_TOKEN ; return GSS_S_DEFECTIVE_TOKEN ; } ptr = ( unsigned char * ) header -> buffer. value + token_wrapper_len ; signalg = ptr [ 0 ] ; signalg |= ptr [ 1 ] << 8 ; sealalg = ptr [ 2 ] ; sealalg |= ptr [ 3 ] << 8 ; if ( ptr [ 4 ]!= 0xFF || ptr [ 5 ]!= 0xFF ) { * minor_status = GSS_S_DEFECTIVE_TOKEN ; return GSS_S_DEFECTIVE_TOKEN ; } if ( toktype!= KG_TOK_WRAP_MSG && ptr [ 4 ]!= 0xFF ) { * minor_status = GSS_S_DEFECTIVE_TOKEN ; return GSS_S_DEFECTIVE_TOKEN ; } if ( ptr [ 4 ]!= 0xFF || ptr [ 5 ]!= 0xFF ) { * minor_status =,0
495,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { vpx_ref_frame_t <S2SV_ModEnd> * frame = <S2SV_ModStart> ( args, vpx_ref_frame_t <S2SV_ModEnd> * ) ; <S2SV_ModStart> * fb ; vpx_get_reference_enc <S2SV_ModEnd> ( ctx ->",0
496,<S2SV_ModStart> plug ) ; <S2SV_ModEnd> put_ioctx ( ctx,0
497,"<S2SV_ModStart> * name, my_bool <S2SV_ModEnd> rep_quick ) { <S2SV_ModStart> |= T_CALC_CHECKSUM ; if (! rep_quick && init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> read_buffer_length, READ_CACHE, share -> pack. header_length, 1, MYF ( MY_WME ) ) || init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, READ_CACHE, share -> pack. header_length, 1, MYF ( MY_WME ) ) || (! rep_quick && init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> read_buffer_length, READ_CACHE, share -> pack. header_length, 1, MYF ( MY_WME ) ) ) || (! rep_quick && init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> read_buffer_length, READ_CACHE, share -> pack. header_length, 1, MYF ( MY_WME )",0
498,"<S2SV_ModStart> s } ; uECC_word_t * p ; wordcount_t num_words = curve -> num_words ; wordcount_t num_n_words = BITS_TO_WORDS ( curve -> num_n_bits ) ; bitcount_t num_n_bits = curve -> num_n_bits ; if ( uECC_vli_isZero ( k, num_words ) || uECC_vli_cmp ( curve -> n, k, num_n_words )!= 1 ) { return 0 ; } carry = regularize_k ( k, tmp, s, curve ) ; EccPoint_mult ( p, curve -> G, k2 [! carry ], 0, num_n_bits + 1, curve ) ; if ( uECC_vli_isZero ( p, num_words ) ) { return 0 ; } if (! g_rng_function ) { uECC_vli_clear ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! uECC_generate_random_int ( tmp, curve -> n, num_n_words",0
499,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|dao-truncated]"" <S2SV_ModEnd> ) ) ;",0
500,<S2SV_ModStart> buf ; } <S2SV_ModEnd> uint32_t new_free_total = <S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
501,"<S2SV_ModStart> tp ; { if ( * cp == '\\\\' && cp [ 1 ] && index ( ""mM"", cp [ 1 ] ) && cp [ 2 ] ) { meta = 1 ; cp += 2 ; } if ( * cp == '\\\\' && cp [ 1 ] && index ( ""0123456789xXoO"", cp [ 1 ] ) && cp [ 2 ] ) { NEARDATA const char hex [ ] = ""00112233445566778899aAbBcCdDeEfF"" ; const char * dp ; int dcount = 0 ; if ( * cp == 'x' || * cp == 'X' ) for ( ++ cp ; * cp && ( dp = index ( hex, * cp ) ) && ( dcount ++ < 2 ) ; cp ++ ) cval = ( cval * 16 ) + ( ( int ) ( dp - hex ) / 2 ) ; else if ( * cp == 'o' || * cp == 'O' ) for ( ; * cp && ( index ( ""01234567"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 8 ) + ( * cp - '0' )",0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
503,"<S2SV_ModStart>, * pixg <S2SV_ModEnd> ; PIXCMAP * <S2SV_ModStart> ; if ( pixc == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; cmap = pixGetColormap ( pixc ) ; ncolors = pixcmapGetCount ( cmap ) ; cmapd = pixcmapCreate ( 8 ) ; lut = ( l_int32 * ) LEPT_CALLOC ( 256, sizeof ( l_int32 ) ) ; for ( i = 0 ; i < 256 ; i ++ ) lut [ i ] = - 1 ; lut = ( l_int32 * ) LEPT_CALLOC ( 256, sizeof ( l_int32 ) ) ; if ( lut == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; lut = ( l_int32 * ) LEPT_CALLOC ( 256, sizeof ( l_int32 ) ) ; for ( i = 0 ; i < 256 ; i ++ ) lut [ i ] = - 1 ; if ( <S2SV_ModStart> == NULL ) { pixDestroy ( pixc ) ; <S2SV_ModStart> NULL ) ; }",0
504,<S2SV_ModStart>. vf = vpx_mse16x16 <S2SV_ModEnd> ; xd ->,1
505,"<S2SV_ModStart> data ; int size = overhead ; if ( mongo_validate_ns ( conn, ns )!= MONGO_OK ) return MONGO_ERROR ; for ( i = 0 ; i < count ; i ++ ) { size += bson_size ( bsons [ i ] ) ; if ( mongo_bson_valid ( conn, bsons [ i ], 1 )!= MONGO_OK ) return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } mm = mongo_message_create ( size, 0, 0, MONGO_OP_INSERT ) ; data = & mm -> data ; if ( flags & MONGO_CONTINUE_ON_ERROR ) data = mongo_data_append32 ( data, & ONE ) ; else data = mongo_data_append32 ( data, & ZERO ) ; for ( i = 0 ; i < count ; i ++ ) { data = mongo_data_append ( data, bsons [ i ] -> data, bson_size ( bsons [ i",0
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NEGO_STATE_FAIL ; goto error <S2SV_ModEnd> ; } Stream_Read_UINT8 <S2SV_ModStart> = NEGO_STATE_FINAL ; return ; error : return ;,0
507,"<S2SV_ModStart> i, target_bits_per_mb ; const double correction_factor = get_rate_correction_factor ( cpi ) <S2SV_ModStart>, target_bits_per_mb ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; i = active_best_quality ; do { const int bits_per_mb_at_this_q = ( int ) vp9_rc_bits_per_mb ( cm -> frame_type, i, correction_factor ) ; if ( bits_per_mb_at_this_q <= target_bits_per_mb ) { if ( ( target_bits_per_mb - bits_per_mb_at_this_q ) <= last_error ) q = i ; else q = i - 1 ; break ; } else { last_error = bits_per_mb_at_this_q - target_bits_per_mb ; } } while ( ++ i <= active_worst_quality ) ; <S2SV_ModStart> i, correction_factor <S2SV_ModEnd> ) ; if",0
508,<S2SV_ModStart> ; value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1101WritePhyReg (,0
509,<S2SV_ModStart>! arg ) { asdl_seq_free ( posargs ) ; <S2SV_ModStart> return NULL ; } <S2SV_ModStart>! arg ) { asdl_seq_free ( posdefaults ) ; <S2SV_ModStart> return NULL ; } <S2SV_ModStart>! arg ) { asdl_seq_free ( kwonlyargs ) ; <S2SV_ModStart> return NULL ; } <S2SV_ModStart>! arg ) { asdl_seq_free ( posdefaults ) ; <S2SV_ModStart> return NULL ; } <S2SV_ModStart>! arg ) { asdl_seq_free ( kwdefaults ) ; <S2SV_ModStart> return NULL ; } <S2SV_ModStart>! arg ) { asdl_seq_free ( vararg ) ; <S2SV_ModStart> return NULL ; } <S2SV_ModStart>! arg ) { asdl_seq_free ( posdefaults ) ; <S2SV_ModStart> return NULL ; } <S2SV_ModStart>! arg ) { asdl_seq_free ( kwdefaults ) ; <S2SV_ModStart> return NULL ; } <S2SV_ModStart>! arg ) { asdl_seq_free ( posdefaults ) ; <S2SV_ModStart> return NULL ; } <S2SV_ModStart>! arg ) { asdl_seq_free ( kwdefaults ) ; <S2SV_ModStart> return NULL ; } <S2SV_ModStart>! arg ) { asdl_seq_free ( vararg ) ; <S2SV_ModStart> return NULL ; } <S2SV_ModStart>! arg ) { asdl_seq_free ( kwdefaults ) ; <S2SV_ModStart> return NULL ; },0
510,"<S2SV_ModStart> int dst_stride, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart> int i ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> uint8_t, left_col <S2SV_ModEnd> ) ; DECLARE_ALIGNED <S2SV_ModStart> plane ] ; <S2SV_ModEnd> if ( plane <S2SV_ModStart> + y ; memset <S2SV_ModEnd> ( left_col, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( right_col, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; mem",0
511,"<S2SV_ModStart> ++ ; } else if ( pattern [ end ] == \'""\' ) { end ++ ; while ( ( pattern [ end ]!= 0 ) && ( pattern [ end ]!= \'""\' ) ) end ++ ; }",0
512,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_completed_io_lock ) ;,1
513,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; write_profile ( cm -> profile, wb ) ; vp9_wb_write_bit ( wb, 0 ) ; vp9_wb_write_bit ( wb, cm -> frame_type ) ; vp9_wb_write_bit ( wb, cm -> show_frame ) ; vp9_wb_write_bit ( wb, cm -> error_resilient_mode ) ; if ( cm -> frame_type == KEY_FRAME ) { const COLOR_SPACE cs = UNKNOWN ; write_sync_code ( wb ) ; if ( cm -> profile > PROFILE_1 ) { assert ( cm -> bit_depth > BITS_8 ) ; vp9_wb_write_bit ( wb, cm -> bit_depth - BITS_10 ) ; } vp9_wb_write_literal ( wb, cs, 3 ) ; if ( cs!= SRGB ) { vp9_wb_write_bit ( wb, 0 ) ; if ( cm -> profile >= PROFILE_1 ) { vp9_wb_write_bit ( wb, cm -> subsampling_x ) ; vp",0
514,"<S2SV_ModStart> ; error : if ( parsetime_error!= NULL ) { fprintf ( stderr, ""Error <S2SV_blank> in <S2SV_blank> %s:%d: <S2SV_blank> %s\\n"", __FILE__, __LINE__, parsetime_error ) ; exit ( EXIT_FAILURE ) ; } <S2SV_ModStart> ; error : if ( parsetime_error!= NULL ) { fprintf ( stderr, ""Error <S2SV_blank> in <S2SV_blank> %s:%d: <S2SV_blank> %s\\n"", __FILE__, __LINE__, parsetime_error ) ; exit ( EXIT_FAILURE ) ; } <S2SV_ModStart> ; error : if ( parsetime_error!= NULL ) { fprintf ( stderr, ""Error <S2SV_blank> in <S2SV_blank> %s:%d: <S2SV_blank> %s\\n"", __FILE__, __LINE__, parsetime_error ) ; exit ( EXIT_FAILURE ) ; } <S2SV_ModStart> ; error : if ( parsetime_error!= NULL ) { fprintf ( stderr, ""Error <S2SV_blank> in <S2SV_blank> %s:%d: <S2SV_blank> %s\\n"", __FILE__, __LINE__, parsetime_error ) ; exit ( EXIT_FAILURE ) ; }",0
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { q = osStrchr <S2SV_ModEnd> ( p +,1
516,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
517,<S2SV_ModStart> KEY_FRAME ) { memcpy <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd ->,1
518,"<S2SV_ModStart> error_t error ; int16_t <S2SV_ModEnd> n ; uint32_t <S2SV_ModStart> ( interface, ENC624J600_ESTAT <S2SV_ModEnd> ) & ESTAT_PKTCNT <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( n, ENC624J600_MAX_FRAME_SIZE <S2SV_ModEnd> ) ; enc624j600ReadBuffer <S2SV_ModStart> ( n, ENC624J600_MAX_FRAME_SIZE <S2SV_ModEnd> ) ; enc624j600ReadBuffer <S2SV_ModStart> ( n, ENC624J600_MAX_FRAME_SIZE <S2SV_ModEnd> ) ; enc624j600ReadBuffer <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL <S2SV_ModEnd>, ENC624J600_RX_BUFFER_STOP ) <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL <S2SV_ModEnd>, ENC624J600_R",0
519,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv, VALUE klass, VALUE content ) { VALUE rb_schema ; VALUE errors = rb_ary_new ( ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; # ifdef HAVE_XMLSCHEMASETPARSERSTRUCTUREDERRORS xmlSchemaSetParserStructuredErrors ( ctx, Nokogiri_error_array_pusher, ( void * ) errors ) ; # endif schema = xmlSchemaParse ( ctx ) ; xmlSetStructuredErrorFunc ( NULL, NULL ) ; xmlSchemaFreeParserCtxt ( ctx ) ; if ( NULL == schema ) { xmlErrorPtr error = xmlGetLastError ( ) ; if ( error ) Nokogiri_error_raise ( NULL, error ) ; else rb_raise ( rb_eRuntimeError, ""Could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> document"" ) ; return Qnil ; } rb_schema = Data_Wrap_Struct ( klass, 0, dealloc, schema ) ; rb_iv_set ( rb_schema, ""@errors"", errors ) ; return rb_schema ; } rb_schema = Data_Wrap_Struct ( klass,",0
520,<S2SV_ModStart>!= CONF_RELOAD ) { <S2SV_ModStart> ( ) ; } <S2SV_ModStart>!= CONF_RELOAD ) { <S2SV_ModStart> ( ) ; } <S2SV_ModStart>!= CONF_RELOAD ) { <S2SV_ModStart> ( ) ; } <S2SV_ModStart>!= CONF_RELOAD ) { <S2SV_ModStart> ( ) ; } <S2SV_ModStart>!= CONF_RELOAD ) { <S2SV_ModStart> ( ) ; } <S2SV_ModStart>!= CONF_RELOAD ) { <S2SV_ModStart> ( ) ; } <S2SV_ModStart>!= CONF_RELOAD ) { <S2SV_ModStart> ( ) ; } <S2SV_ModStart>!= CONF_RELOAD ) { <S2SV_ModStart> ( ) ; } <S2SV_ModStart>!= CONF_RELOAD ) { <S2SV_ModStart> ( ) ; } <S2SV_ModStart>!= CONF_RELOAD ) { <S2SV_ModStart> ( ) ; } <S2SV_ModStart>!= CONF_RELOAD ) { <S2SV_ModStart> ( ) ; } <S2SV_ModStart>!= CONF_RELOAD ) { <S2SV_ModStart> ( ) ; } <S2SV_ModStart>!= CONF_RELOAD ) { <S2SV_ModStart> ( ) ; } <S2SV_ModStart>!= CONF_RELOAD ) { <S2SV_ModStart> ( ) ; } <S2SV_ModStart>!= CONF_RELOAD ) { <S2SV_ModStart> ( ) ; } <S2SV_ModStart>!= CONF_RELOAD ) { <S2SV_ModStart> ( ) ; } <S2SV_ModStart>!= CONF_RELOAD ) { <S2SV_ModStart> ( ) ; } <S2SV_ModStart>!= CONF_RELOAD ) { <S2SV_ModStart> ( ) ; } <S2SV_ModStart>!,0
521,<S2SV_ModStart> 2 ] ; } for ( x = 0 ; x < state -> xsize ; x ++ ) { out [ 0 ] = ptr [ x ] ; out [ 1 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; out [ 2 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; } for ( x = 0 ; x < state -> xsize ; x ++ ) { out [ 0 ] = ptr [ x + state -> xsize ] ; out [ 1 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; out [ 2 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; } for ( x = 0 ; x < state -> xsize ; x ++ ) { out [ 0 ] = ptr [ x + state -> xsize ] ; out [ 1 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; out [ 2 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ;,0
522,<S2SV_ModStart> err = - <S2SV_ModEnd> EALREADY ; if,0
523,<S2SV_ModStart> POLL_IN ) ; <S2SV_ModEnd> perf_event_wakeup ( handle,0
524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> utf8s_to_utf16s ( const <S2SV_ModStart> * s, unicode_t len, wchar_t * pwcs ) { u16 * op ; int size ; unicode_t u ; op = pwcs ; while ( * s && len > 0 ) { if ( * s & 0x80 ) { size = utf8_to_utf32 ( s, len, & u ) ; if ( size < 0 ) return - EINVAL ; if ( u >= PLANE_SIZE ) { u -= PLANE_SIZE ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( u & SURROGATE_BITS ) ) ; } else { * op ++ = ( wchar_t ) u ; } } else { * op ++ = ( wchar_t ) u ; } s +=",0
525,"<S2SV_ModStart> EPROTONOSUPPORT ) { if ( as_console ) { sleep ( 2 ) ; } <S2SV_ModStart> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" <S2SV_ModEnd> ) ; }",0
526,"<S2SV_ModStart> ( interface, KSZ8851_RXFHSR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXMR | KSZ8851_RXFHSR_RXFTL | KSZ8851_RXFHSR_RXRF | KSZ8851_RXFHSR_RXCE <S2SV_ModEnd> ) ) == <S2SV_ModStart> ( interface, KSZ8851_RXFDPR, KSZ8851_RXFDPR_RXFPAI <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851ReadFifo <S2SV_ModStart> ( interface, KSZ8851_RXFDPR, KSZ8851_RXFDPR_RXFPAI <S2SV_ModEnd> ) ; ksz8851ClearBit <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ancillary <S2SV_ModStart>",0
527,"<S2SV_ModStart> ast_for_funcdef_impl ( struct compiler * c, const node * n, asdl_seq * decorator_seq, int is_async ) { identifier name ; arguments_ty args ; asdl_seq * body ; expr_ty returns = NULL ; int name_i = 1 ; node * tc ; string type_comment = NULL ; if ( c -> c_feature_version < 5 ) { ast_error ( c, n, ""Async <S2SV_blank> functions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.5 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } REQ ( n, funcdef ) ; name = NEW_IDENTIFIER ( CHILD ( n, name_i ) ) ; if (! name ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i ), 0 ) ) return NULL ; args = ast_for_arguments ( c, CHILD ( n, name_i + 1 ) ) ; if (! args ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 2 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name",0
528,"<S2SV_ModStart> ( mm, 0xA00000 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( pgd, 0xA00000 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( pud, 0xA00000 <S2SV_ModEnd> ) ; split_huge_page_pmd <S2SV_ModStart>, pmd, 0xA00000 <S2SV_ModEnd>, & ptl <S2SV_ModStart> ; out : flush_tlb_mm_range ( mm, 0xA0000, 0xA0000 + 32 * sizeof ( * pgd ) <S2SV_ModEnd> ) ; }",0
529,"<S2SV_ModStart> dst_coap_msg_ptr -> token_len ) ; if ( 0!= ptr_check_result ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } ptr_check_result = sn_coap_protocol_malloc_copy ( handle, * packet_data_pptr, dst_coap_msg_ptr -> token_len <S2SV_ModStart> ; if ( 0!= ptr_check_result ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } ptr_check_result = sn_coap_protocol_malloc_copy ( handle, * packet_data_pptr, dst_coap_msg_ptr -> token_len ) ; if ( 0!= ptr_check_result ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } ptr_check_result = sn_coap_protocol_m",0
530,"<S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> ADB <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" <S2SV_ModEnd> ) ; print_usage <S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> ADB <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" <S2SV_ModEnd> ) ; print_usage <S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> ADB <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" <S2SV_ModEnd> ) ; print_usage <S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> ADB <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" <S2SV_ModEnd> ) ; print_usage <S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> ADB <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" <S2SV_ModEnd> ) ; print_usage <S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> ADB <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" <S2SV_ModEnd> ) ; print_usage <S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> ADB <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" <S2SV_ModEnd> ) ; print_usage <S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> ADB",0
531,"<S2SV_ModStart> ; row < raw_height <S2SV_ModEnd> ; row ++ <S2SV_ModStart> 4 ) ; } for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { if ( ( i = col % 14 ) == 0 ) pred [ 0 ] = nonz [ 0 ] = 0 ; if ( i % 3 == 2 ) sh = 4 >> ( 3 - pana_bits ( 2 ) ) ; if ( ( j = pana_bits ( 8 ) ) ) { if ( ( pred [ i & 1 ] -= 0x80 << sh ) < 0 || sh == 4 ) pred [ i & 1 ] &= ~ ( ( ~ 0u ) << sh ) ; pred [ i & 1 ] = j << sh ; } } else if ( ( nonz [ i & 1 ] = pana_bits ( 4 ) ) || i > 11 ) pred [ i & 1 ] = nonz [ i & 1 ] << 4 | pana_bits ( 4 ) ; if ( ( RAW ( row, col ) = pred [ col & 1 ] ) > 4098 && col <",0
532,"<S2SV_ModStart> ; if (! nl ) { param -> flags |= DM_BUFFER_FULL_FLAG ; goto out ; } param -> data_size = param -> data_start + needed ; nl -> dev = 0 ; for ( i = 0 ; i < NUM_BUCKETS ; i ++ ) { list_for_each_entry ( hc, _name_buckets + i, name_list ) { if ( old_nl ) old_nl -> next = ( uint32_t ) ( ( void * ) nl - ( void * ) orig_nl ) ; disk = dm_disk ( hc -> md ) ; nl -> dev = huge_encode_dev ( disk_devt ( disk ) ) ; nl -> next = 0 ; strcpy ( nl -> name, hc -> name ) ; old_nl = nl ; event_nr = align_ptr ( nl -> name + strlen ( hc -> name ) + 1 ) ; * event_nr = dm_get_event_nr ( hc -> md ) ; nl = align_ptr ( event_nr + 1 ) ; } } BUG_ON ( ( char * ) nl - ( char * ) orig_nl!= needed ) ; out : up_",0
533,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
534,<S2SV_ModStart> ( bfqq ) __bfq_idle_slice_timer_body <S2SV_ModEnd> ( bfqq ),0
535,<S2SV_ModStart> length += PRIMARY_DRAWING_ORDER_FIELD_BYTES [ orderType ] ; length += 1 ; length += 1 ; length += 1 ; length += 1 ; length += 1 ; length += 1 ; length += 1 ; length += 1 ; length += 1 ; length += 1 ; length += 1 ; length += 1 ; length += 1 ; length += 1 ; length += 1 ; length += 1 ; length += 1 ; length += 1 ; length += 1 ; length += 1 ; length += 1 ; length += 1 ; length += 1 ; length += 1 ; length += 1 ; length += 1 ; length += 1 ; length += 1 ; length += 1 ; length += 1 ; length += 1 ; length += 1 ; length += 1 ; length += 1 ; length += 1 ; length += 1 ; length += 1 ; length += 1 ; length += 1 ; length += 1 ; length += 1 ; length += 1 ; length += 1 ; length += 1 <S2SV_ModEnd> ; length +=,0
536,<S2SV_ModStart> -> d_inode ) { err = - EBUSY ; <S2SV_ModStart> goto out ; } <S2SV_ModStart> -> d_inode ) { err = - EBUSY ; <S2SV_ModStart> goto out ; } <S2SV_ModStart> d_inode ) ) { err = - EBUSY ; <S2SV_ModStart> goto out ; } <S2SV_ModStart> d_inode ) ) { err = - EBUSY ; <S2SV_ModStart> goto out ; } <S2SV_ModStart> d_inode ) ) { err = - EBUSY ; <S2SV_ModStart> goto out ; } <S2SV_ModStart> d_inode ) ) { err = - EBUSY ; <S2SV_ModStart> goto out ; } <S2SV_ModStart> d_inode ) ) { err = - EBUSY ; <S2SV_ModStart> goto out ; } <S2SV_ModStart> d_inode ) ) { err = - EBUSY ; <S2SV_ModStart> goto out ; } <S2SV_ModStart> d_inode ) ) { err = - EBUSY ; <S2SV_ModStart> goto out ; } <S2SV_ModStart> d_inode ) ) { err = - EBUSY ; <S2SV_ModStart> goto out ; } <S2SV_ModStart> d_inode ) ) { err = - EBUSY ; <S2SV_ModStart> goto out ; } <S2SV_ModStart> d_inode ) ) { err = - EBUSY ; <S2SV_ModStart> goto out ; },0
537,"<S2SV_ModStart> int plane ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) vp9_foreach_transformed_block_high_bitdepth_in_plane ( xd, bsize, visit, arg ) ; else # endif <S2SV_ModStart> plane ++ ) # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) vp9_foreach_transformed_block_high_bitdepth_in_plane ( xd, bsize, plane, visit, arg ) ; else # endif <S2SV_ModStart> arg ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) vp9_foreach_transformed_block_high_bitdepth_in_plane ( xd, bsize, plane, visit, arg ) ; else # endif # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) vp9_foreach_transformed_block_high_bitdepth_in_plane ( xd, b",0
538,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> nonrd_pick_sb_modes ( VP9_COMP <S2SV_ModStart> -> e_mbd ; if (! frame_is_intra_only ( cm ) ) { vp9_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } else { MB_PREDICTION_MODE intramode = DC_PRED ; set_mode_info ( & xd -> mi [ 0 ] -> mbmi, bsize, intramode ) ; } <S2SV_ModStart> bsize ) ; if (! frame_is_intra_only ( cm ) ) { vp9_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } else { MB_PREDICTION_MODE intramode = DC_PRED ; set_mode_info ( & xd -> mi [ 0 ] -> mbmi, bsize, intramode ) ; } duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize",0
539,"<S2SV_ModStart> = NULL ; if ( strcmp ( filename, ""-"" ) ) fclose ( reader. fhd ) ; <S2SV_ModStart> superblock ) ; <S2SV_ModEnd> hrtf = getHrtf",0
540,"<S2SV_ModStart> -> ranges = calloc ( 1, <S2SV_ModEnd> sizeof ( MappedRange",0
541,"<S2SV_ModStart> ; if ( flags & ( VP8_EFLAG_NO_UPD_LAST | VP8_EFLAG_NO_UPD_GF | VP8_EFLAG_NO_UPD_ARF ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( flags & ( VP8_EFLAG_FORCE_GF | VP8_EFLAG_FORCE_ARF ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_ALTR_FRAME ; vp8_use",0
542,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
543,<S2SV_ModStart> ; if ( WARN_ON_ONCE ( <S2SV_ModStart>! head ) ) <S2SV_ModEnd> return - EINVAL <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,1
544,"<S2SV_ModStart> * pptr, u_int <S2SV_ModEnd> len ) { <S2SV_ModStart> len ) { u_int advance ; u_int tlen ; const u_char * tptr ; char buf [ MAXHOSTNAMELEN + 100 ] ; int as_size ; tptr = pptr ; tlen = len ; switch ( atype ) { case BGPTYPE_AS4_PATH : ND_TCHECK ( * tptr ) ; ND_PRINT ( ( ndo, ""%s"", tok2str ( bgp_as4_path_values, ""?"", tptr [ 0 ] ) ) ) ; break ; case BGPTYPE_AS_PATH : if ( len % 2 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } if (! len ) { ND_PRINT ( ( ndo, ""empty"" ) ) ; break ; } as_size = bgp_attr_get_as_size ( ndo, atype, pptr, len ) ; while ( tptr < pptr + len ) { ND_TCHECK2 ( tptr [ 2 + i ], as_size ) ; ND_PRINT ( ( ndo, ""%s",0
545,"<S2SV_ModStart>, ""<th <S2SV_blank> width=\'40%%\'>Parameter</th>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""</tr>"" ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Stackfile</td><td>%s</td></tr>"", Run. stackfile ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Stackfile</td><td>%s</td></tr>"", Run. stackfile ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Stackfile</td><td>%s</td></tr>"", Run. stackfile ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Stackfile</td><td>%s</td></tr>"", Run. stackfile ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Stackfile</td><td>%s</td></tr>"", Run. stackfile ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Stackfile</td><td>%s</td></tr>"", Run. stackfile ) ; StringBuffer_append ( res -> output",0
546,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
547,"<S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr1, <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2, <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr1 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr1 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr1 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr1 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr1 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> ) ) ; snprintf <S2SV_ModEnd> ( constr2 + <S2SV_ModStart>",0
548,"<S2SV_ModStart> iad_num ++ ; if ( iad_num >= USB_MAXINTERFACES ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, nintf_orig, USB_MAXINTERFACES ) ; nintf = USB_MAXINTERFACES ; }",0
549,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
550,<S2SV_ModStart> ; distortion = vpx_variance16x16 <S2SV_ModEnd> ( * (,1
551,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_ECON2_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR0 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR0 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd>,",0
552,"<S2SV_ModStart> * start ; va_start ( argptr, format ) ; vsnprintf ( start, sizeof ( psf -> header ), format, argptr ) ; va_end ( argptr ) ; start [ sizeof ( psf -> header ) - 1 ] = 0 ; <S2SV_ModStart> header ) ; <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> headindex += <S2SV_ModEnd> strlen ( ( <S2SV_ModStart> header ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
553,<S2SV_ModStart> -> alg_priv ) { <S2SV_ModStart> alg_priv ) ; ctx -> priv -> alg_priv = NULL ; },0
554,"<S2SV_ModStart> { sf -> recode_loop = ( speed < 1 )? ALLOW_RECODE : ALLOW_RECODE_KFMAXBW ; sf -> allow_skip_recode = 1 ; if ( speed >= 1 ) { sf -> use_square_partition_only =! frame_is_intra_only ( cm ) ; sf -> less_rectangular_check = 1 ; sf -> tx_size_search_method = vp9_frame_is_boosted ( cpi )? USE_FULL_RD : USE_LARGESTALL ; if ( MIN ( cm -> width, cm -> height ) >= 720 ) sf -> disable_split_mask = cm -> show_frame? DISABLE_ALL_SPLIT : DISABLE_ALL_INTER_SPLIT ; else sf -> disable_split_mask = DISABLE_COMPOUND_SPLIT ; sf -> use_rd_breakout = 1 ; sf -> adaptive_motion_search = 1 ; sf -> auto_mv_step_size = 1 ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_y_mode",0
555,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
556,"<S2SV_ModStart> ) + 2 * EXTRA_STACK ; if ( goodsize > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else condmovestack ( L, { }, { } ) ; inuse = stackinuse ( L ) ; goodsize = inuse + ( inuse / 8 ) + 2 * EXTRA_STACK ; if ( goodsize > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else condmovestack ( L, { }, { } ) ; luaE_shrinkCI ( L ) ; goodsize = inuse + ( inuse / 8 ) + 2 * EXTRA_STACK ; if ( goodsize > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; if ( goodsize > LUAI_MAXSTACK ) goodsize = LU",0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,"<S2SV_ModStart>, * s ; int quote ; char * ch, s_kind [ 3 ] = { 0, 0, 0 } ; ch = s_kind ; raw = s ; while ( * raw && * raw!= '\\'' && * raw!= \'""\' ) { * ch ++ = * raw ++ ; } kind = PyUnicode_FromString ( s_kind ) ; if (! kind ) { return NULL ; } if (! str ) { # ifdef Py_USING_UNICODE if ( PyErr_ExceptionMatches ( PyExc_UnicodeError ) ) { PyObject * type, * value, * tback, * errstr ; PyErr_Fetch ( & type, & value, & tback ) ; errstr = PyObject_Str ( value ) ; if ( errstr ) { char * s = """" ; char buf [ 128 ] ; s = _PyUnicode_AsString ( errstr ) ; ast_error ( n, buf ) ; Py_DECREF ( errstr ) ; } else { ast_error ( n, buf ) ; Py_DECREF ( errstr ) ; } } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } Py_DECREF",0
559,"<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> break ; } input_string = strdup ( option_value ) ; option_name = strtok_r ( option_name, ""="", & input_ptr ) ; while ( option_name!= NULL ) { option_value = strtok_r ( NULL, "" <S2SV_blank> "", & input_ptr ) ; if ( option_value == NULL ) { svc_log ( svc_ctx, SVC_LOG_ERROR, ""option <S2SV_blank> missing <S2SV_blank> value: <S2SV_blank> %s\\n"", option_name ) ; res = VPX_CODEC_INVALID_PARAM ; break ; } if ( strcmp ( ""encoding-mode"", option_name ) == 0 ) { res = set_option_encoding_mode ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""layers"", option_name ) == 0 ) { svc_ctx -> spatial_layers = atoi ( option_value ) ; } else if ( strcmp ( ""scale-factors"", option_name ) == 0 ) { res = parse_scale",0
560,"<S2SV_ModStart> ) ; } fclose ( mvs ) ; mb_index = 0 ; fprintf ( mvs, ""Mb <S2SV_blank> mv <S2SV_blank> ref <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. ref_frame ) ; mb_index ++ ; fprintf ( mvs, ""\\n"" ) ; } fclose ( mvs ) ; mb_index = 0 ; fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. uv_mode ) ; mb_index ++ ; fprintf ( mvs, ""\\n"" ) ; } fclose ( mvs ) ; mb",0
561,<S2SV_ModStart> self ) { size_t <S2SV_ModEnd> i ; PyObject,1
562,,1
563,"<S2SV_ModStart> ( dbh, imp_dbh -> pmysql? mysql_error ( imp_dbh -> pmysql ) : mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; return FALSE ; } DBIc_ACTIVE_on ( imp_dbh ) ; DBIc_on ( imp_dbh, DBIcf_IMPSET ) ; return TRUE ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
564,"<S2SV_ModStart> || ( ioctl ( slot -> fd, FIONREAD, & size ) == 0 && size ) ) pthread_mutex_unlock ( & slot_lock ) ; BTA_JvRfcommWrite ( slot -> rfc_handle, slot -> id ) ; } else { LOG_ERROR ( ""%s <S2SV_blank> socket <S2SV_blank> signaled <S2SV_blank> for <S2SV_blank> read <S2SV_blank> while <S2SV_blank> disconnected, <S2SV_blank> slot: <S2SV_blank> %d, <S2SV_blank> channel: <S2SV_blank> %d"", __func__, slot -> id, slot -> scn ) ; need_close = true ; } } if ( flags & SOCK_THREAD_FD_WR ) { if (! slot -> f. connected ||! flush_incoming_que_on_wr_signal ( slot ) ) { LOG_ERROR ( ""%s <S2SV_blank> socket <S2SV_blank> signaled <S2SV_blank> for <S2SV_blank> write <S2SV_blank> while <S2SV_blank> disconnected <S2SV_blank> (or <S2SV_blank> write <S2SV_blank> failure), <S2SV_blank> slot: <S2SV_blank> %d, <S2SV_blank> channel: <S2SV_blank> %d"", __func__, slot -> id, slot -> scn ) ; need_close = true ; } } if ( flags & SOCK_THREAD_FD_WR ) { if (! slot -> f. connected ||! flush_incoming_que_on_",0
565,"<S2SV_ModStart> ; struct ieee_802_11_phdr * phdr ; struct ieee80211_hdr * phdr_hdr <S2SV_ModEnd> ; col_set_str ( <S2SV_ModStart> struct ieee_802_11_phdr phdr ; phdr_hdr = ( struct ieee80211_hdr * ) proto_item_get_data ( ti, pinfo, pinfo -> curr_layer_num ) <S2SV_ModStart> ; if ( phdr_hdr ) { phdr_hdr = ( struct ieee802_11_phdr * ) proto_item_get_data ( ti, pinfo, pinfo -> curr_layer_num ) ; phdr_hdr = ( struct ieee802_11_phdr * ) proto_item_get_data ( ti, pinfo, pinfo, pinfo -> curr_layer_num ) ; } else { phdr = ( struct ieee802_11_phdr * ) proto_item_get_data ( ti, pinfo, pinfo -> curr_layer_num ) ; phdr = ( struct ieee802_11_phdr * ) proto_item_get_data ( ti,",0
566,"<S2SV_ModStart> * fp ; size_t alloclen = <S2SV_ModEnd> hdrlen + initlen <S2SV_ModStart> initlen + 1 ; sh = s_malloc ( alloclen <S2SV_ModStart>, 0, alloclen ) ; s = ( char * ) sh + hdrlen ; fp = ( ( unsigned char * ) s ) - 1 ; switch ( type ) { case SDS_TYPE_5 : { * fp = type | ( initlen << SDS_TYPE_BITS ) ; break ; } case SDS_TYPE_16 : { SDS_HDR_VAR ( 16, s ) ; sh -> len = initlen ; sh -> alloc = initlen ; * fp = type ; break ; } case SDS_TYPE_32 : { SDS_HDR_VAR ( 32, s ) ; sh -> len = initlen ; sh -> alloc = initlen ; * fp = type ; break ; } case SDS_TYPE_64 : { SDS_HDR_VAR ( 64, s ) ; sh -> len = initlen ; sh -> alloc = initlen ; * fp = type ; break ; } } if ( initlen && init ) memcpy ( s, init, initlen ) ; s [ init",0
567,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> BYTE a_val ; if ( context == NULL || data == NULL || scanline == 0 ) { return FALSE ; } <S2SV_ModStart> -> ColorLossLevel ; if ( yplane == NULL || coplane == NULL || cgplane == NULL || aplane == NULL ) { return FALSE ; } <S2SV_ModStart> -> height ; y ++ ) { src = data + ( context -> height - 1 - y ) * scanline ; yplane = context -> priv -> PlaneBuffers [ 0 ] + y * rw ; coplane = context -> priv -> PlaneBuffers [ 1 ] + y * rw ; cgplane = context -> priv -> PlaneBuffers [ 2 ] + y * rw ; aplane = context -> priv -> PlaneBuffers [ 3 ] + y * context -> width ; for ( x = 0 ; x < context -> width ; x ++ ) { switch ( context -> format ) { case PIXEL_FORMAT_BGRX32 : b_val = * src ++ ; g_val = * src ++ ; r_val = * src ++,0
568,<S2SV_ModStart> > nr_parens ) { ret = - EINVAL ; goto out_free ; } <S2SV_ModEnd> * ( ++,1
569,"<S2SV_ModStart> cpi ) { int target ; if ( cpi -> common. current_video_frame == 0 ) { const int initial_boost = 32 ; int kf_boost = MAX ( initial_boost, ( int ) ( 2 * cpi -> output_framerate - 16 ) ) ; if ( rc -> frames_since_key < cpi -> output_framerate / 2 ) { kf_boost = ( int ) ( kf_boost * rc -> frames_since_key / ( cpi -> output_framerate / 2 ) ) ; } target = ( ( cpi -> oxcf. starting_buffer_level / 2 ) > INT_MAX )? INT_MAX : ( int ) ( cpi -> oxcf. starting_buffer_level / 2 ) ; } else { <S2SV_ModStart> -> rc ; int initial_boost = 32 ; int kf_boost = MAX ( initial_boost, ( int ) ( 2 * cpi -> output_framerate - 16 ) ) ; if ( rc -> frames_since_key < cpi -> output_framerate / 2 ) { kf_boost = ( int ) ( kf_boost * rc -> frames_since_key /",0
570,"<S2SV_ModStart> TX_MODE read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r )",1
571,"<S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd>",0
572,"<S2SV_ModStart> -> cpi ; MACROBLOCKD_BLOCK <S2SV_ModEnd> * xd = <S2SV_ModStart> & cpi -> mb. plane [ plane ] ; struct macroblockd_plane * pd = & xd -> plane [ plane ] ; MB_MODE_INFO * mbmi = & xd -> mi [ 0 ] -> mbmi ; int pt ; int c ; TOKENEXTRA * t = * tp ; int eob = p -> eobs [ block ] ; const PLANE_TYPE type = pd -> plane_type ; const int16_t * qcoeff = BLOCK_OFFSET ( p -> qcoeff, block ) ; const int segment_id = mbmi -> segment_id ; const int16_t * scan, * nb ; const scan_order * so ; const int ref = is_inter_block ( mbmi ) ; unsigned int ( * const counts ) [ COEFF_CONTEXTS ] [ ENTROPY_TOKENS ] = cpi -> coef_counts [ tx_size ] [ type ] [ ref ] ; vp9_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> <S2SV_ModStart> common. fc -> <S2SV_ModEnd> coef_probs [ tx",0
573,"<S2SV_ModStart>. pRename ; if ( pSelect -> pSrc == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; } for ( i = 0 ; i < pSelect -> pSrc -> nSrc ; i ++ ) { struct SrcList_item * pItem = & pSelect -> pSrc -> a [ i ] ; if ( pItem -> pTab == p -> pTab ) { renameTokenFind ( pWalker -> pParse, p, pItem -> zName ) ; } } renameWalkWith ( pWalker, pSelect ) ; <S2SV_ModStart> pSelect -> pSrc <S2SV_ModEnd> ; return WRC_Continue",0
574,"<S2SV_ModStart> users ) ; cb_info -> serv = serv = svc_create ( & nfs4_callback_program, NFS4_CALLBACK_BUFSIZE, sv_ops ) ; if (! serv ) { printk ( KERN_ERR ""nfs_callback_create_svc: <S2SV_blank> create <S2SV_blank> service <S2SV_blank> failed\\n"" ) ; return ERR_PTR ( - ENOMEM ) ; } cb_info -> serv = serv ; serv -> sv_maxconn = 1024 ; dprintk ( ""nfs_callback_create_svc: <S2SV_blank> service <S2SV_blank> created\\n"" ) ; <S2SV_ModStart> sv_ops ) ; <S2SV_ModEnd> return serv ;",0
575,"<S2SV_ModStart> * point, <S2SV_ModEnd> const CurveZZ_p * <S2SV_ModStart> curve ) { const int dbits = mpz_sizeinbase ( scalar, 2 ), i ; for ( i = dbits - 2 ; i >= 0 ; i -- ) { if ( mpz_tstbit ( scalar, i ) ) { mpz_set ( tmp. x, R0. x ) ; mpz_set ( tmp. y, R0. y ) ; pointZZ_pAdd ( & R0, & R1, & tmp, curve ) ; mpz_set ( tmp. x, R0. x ) ; mpz_set ( tmp. y, R0. y ) ; pointZZ_pDouble ( & R1, & tmp, curve ) ; } else { mpz_set ( tmp. x, R0. x ) ; mpz_set ( tmp. y, R0. y ) ; mpz_set ( tmp. x, R0. x ) ; mpz_set ( tmp. y, R0. y ) ; pointZZ_pAdd ( & R1, & R0, & tmp, curve ) ; mpz_set ( tmp. x,",0
576,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
577,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
578,"<S2SV_ModStart> { do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> s, 0 )",0
579,"<S2SV_ModStart> = crm_first_attr ( xml ) ; xIter!= NULL ; xIter = xIter -> next ) { const char * prop_name = ( const char * ) xIter -> name ; if ( strcmp ( prop_name, XML_ATTR_ID ) == 0 ) { continue ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else { char * path = xml_get_path ( xml ) ; crm_trace ( ""Cannot <S2SV_blank> add <S2SV_blank> new <S2SV_blank> node <S2SV_blank> %s <S2SV_blank> at <S2SV_blank> %s"", crm_element_name ( xml ), path ) ; if ( xml!= xmlDocGetRootElement ( xml -> doc ) ) { xmlUnlinkNode ( xml ) ; xmlFreeNode ( xml ) ; } free ( path ) ; return ; } } else { char * path = xml_get_path ( xml ) ; crm_trace ( ""Cannot <S2SV_blank> add <S2SV_blank> new <S2SV_blank> node <S2SV_blank> %s <S2SV_blank> at <S2SV_blank> %s",0
580,<S2SV_ModStart> <S2SV_null> static const SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> return ( const SvcInternal_t <S2SV_ModEnd> * ) svc_ctx,1
581,"<S2SV_ModStart> ; } } if ( hkey. type == HASH_KEY_IS_LONG ) { zend_hash_update ( params, hkey. str, sizeof ( ""arguments"" ), ( void * ) & tmp, sizeof ( zval * ), ( void * ) & args ) ; * current_param = args ; } else if ( hkey. type == HASH_KEY_IS_STRING ) { zend_hash_update ( params, hkey. str, sizeof ( ""arguments"" ), ( void * ) & tmp, sizeof ( zval * ), ( void * ) & args ) ; * current_args = args ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_hash_update ( params, hkey. num, sizeof ( ""arguments"" ), ( void * ) & args ) ; * current_param = args ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_hash_update ( params, hkey. num, ( void * ) & ptr, sizeof ( zval * ), ( void * ) & args ) ; * current_args = args ;",0
582,"<S2SV_ModStart> only_420 ) { <S2SV_ModEnd> int ret ; <S2SV_ModStart> = VPX_IMG_FMT_I420 ; if (! _y4m -> vpx_fmt ) { fprintf ( stderr, ""Error <S2SV_blank> parsing <S2SV_blank> video <S2SV_blank> format.\\n"" ) ; return - 1 ; } <S2SV_ModStart> = 12 ; if (! _y4m -> chroma_fmt ) { fprintf ( stderr, ""Error <S2SV_blank> parsing <S2SV_blank> chroma <S2SV_blank> format.\\n"" ) ; return - 1 ; } <S2SV_ModStart> = VPX_IMG_FMT_I420 ; if (! _y4m -> chroma_fmt ) { fprintf ( stderr, ""Error <S2SV_blank> parsing <S2SV_blank> chroma <S2SV_blank> format.\\n"" ) ; return - 1 ; } <S2SV_ModStart> = VPX_IMG_FMT_I420 ; if (! _y4m -> chroma_fmt ) { fprintf ( stderr, ""Error <S2SV_blank> parsing <S2SV_blank> chroma <S2SV_blank> format.\\n"" ) ; return - 1 ; } <S2SV_ModStart> = VPX_IMG_FMT_I420 ; if (! _y4m -> chroma_fmt ) { fprintf ( stderr, """,0
583,"<S2SV_ModStart> buf ; { if ( strlen ( buf ) >= 60 ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; }",0
584,<S2SV_ModStart> ( ) { <S2SV_ModEnd> if ( read_xattrs_from_disk <S2SV_ModStart> == 0 ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( read_uids_guids <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( parse_exports_table <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( read_fragment_table <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( read_inode_table <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( read_directory_table <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_,0
585,"<S2SV_ModStart> rule * rule, u_int options <S2SV_ModStart> count = 0 ; env -> options = options <S2SV_ModStart> ; } } if ( options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ]!= NULL ; i ++ ) { struct envnode * node ; const char * e, * eq ; size_t len ; char keybuf [ 1024 ] ; e = strchr ( e, '=' ) ; if ( ( eq = strchr ( e, '=' ) ) == NULL || eq == e ) continue ; memcpy ( keybuf, e + 1, len ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf, eq + 1 ) ; if ( RB_INSERT ( envtree, & env -> root, node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } }",0
586,"<S2SV_ModStart> -> seg ; <S2SV_ModEnd> if ( cm <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> -> base_qindex, cpi -> in_frame_q_adj_ratio <S2SV_ModEnd> [ segment ] <S2SV_ModStart> ; } } vpx_memset ( cpi -> segmentation_map, 0, cm -> mi_rows * cm -> mi_cols ) ; vpx_memset ( cpi -> complexity_map, 0, cm -> mi_rows * cm -> mi_cols ) ; vp9_enable_segmentation ( seg ) ; vp9_clearall_segfeatures ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vp9_disable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> frame_type, cm -> base_qindex, cm -> in_frame_q_adj_ratio [ segment ] ) ; vp9_enable_segfeature ( seg, segment, SEG_LVL_ALT_Q ) ; vp9",0
587,"<S2SV_ModStart> = make_type ( ""module"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""interactive"", mod_type, Interactive_fields, 1 ) ; if (! Interactive_type ) return 0 ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; Suite_type = make_type ( ""Suite"", mod_type, Suite_fields, 1 ) ; if (! Suite_type ) return 0 ; stmt_type = make_type ( ""stmt"", & AST_type, NULL, 0 ) ; if (! stmt_type ) return 0 ; if (! add_attributes ( stmt_type, stmt_attributes, 4 ) ) return 0 ; FunctionDef_type = make_type ( ""FunctionDef"", stmt_type, FunctionDef_fields, 5 ) ; if (! FunctionDef_type ) return 0 ; AsyncFunctionDef_type = make_type ( ""AsyncFunctionDef"", stmt_type, AsyncFunctionDef_fields, 5 ) ; if (! AsyncFunctionDef_type ) return 0 ; Return_type = make_",0
588,"<S2SV_ModStart>, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH ) ; if ( logfile_fd == INVALID_FD ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, log_path, strerror ( errno ) ) ; is_logging = false ; return ; } logfile_fd = open ( log_path, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH ) ; if ( logfile_fd == INVALID_FD ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, log_path, strerror ( errno ) ) ; is_logging = false ; return ; } write ( logfile_fd, ""btsnoop\\0\\0\\0\\1\\0\\0\\x3\\xea"", 16 ) ;",0
589,<S2SV_ModStart> ) ; } if ( m == B_PRED ) { unsigned int * const bct = is_key? b_modes : inter_b_modes ; int b = 0 ; do { ++ bct [ xd -> block [ b ]. bmi. mode ] ; } while ( ++ b < 16 ) ; } <S2SV_ModStart> ) ; } if ( m == B_PRED ) { unsigned int * const bct = is_key? b_modes : inter_b_modes ; int b = 0 ; do { ++ bct [ xd -> block [ b ]. bmi. mode ] ; } while ( ++ b < 16 ) ; } if ( m == B_PRED ) { unsigned int * const bct = is_key? b_modes : inter_b_modes ; int b = 0 ; do { ++ bct [ xd -> block [ b ]. bmi. mode ] ; } while ( ++ b < 16 ) ; } if ( m == B_PRED ) { unsigned int * const bct = is_key? b_modes : inter_b_modes ; int b = 0 ; do { ++ bct [ b ] ; } while ( ++ b <,0
590,"<S2SV_ModStart> cinput ) { char * s, * t, * StartClean ; double * argbuf = 0 ; SetDefaults ( ) ; s = cinput ; while ( * s!= '[' ) s ++ ; t ++ ; * t ++ = 0 ; while ( * t =='<S2SV_blank>'|| * t == '\\t' || * t == '\\n' ) t ++ ; outpos = outputbuffer ; outpos += sprintf ( outpos, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"", s, t, TERMCHAR ) ; if ( * s == '0' && s [ 1 ] == ']' ) { identification = 1 ; outpos += sprintf ( outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", VERSION, SUBVERSION ) ; fprintf ( outfile, ""%s"", outputbuffer ) ; return ( 0 ) ; } else { fprintf ( stderr, ""%s: <S2SV_blank> Illegal <S2SV_blank> request <S2SV_blank> in <S2SV_blank> identification <S2SV_blank> string <S2SV_blank> [0]: <S2SV_blank> %s\\n"", axohelp, nameobject ) ; if ( argbuf ) free ( argbuf ) ; return ( - 1",0
591,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lower, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { int res ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { lower = NULL ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_upper, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { int res ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { upper = NULL ; } if ( lookup_attr_id ( obj, & PyId_step, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { step = NULL ; } * out = Slice ( lower, upper,",0
592,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
593,"<S2SV_ModStart> int err ; tos_off = proto == htons ( ETH_P_IP )? 16 : 20 ; val = be32_to_cpu ( knode -> sel -> keys [ 0 ]. val ) >> tos_off & 0xff ; mask = be32_to_cpu ( knode -> sel -> keys [ 0 ]. mask ) >> tos_off & 0xff ; list_for_each_entry ( iter, & alink -> dscp_map, list ) { u32 cmask ; if ( iter -> handle == knode -> handle ) { match = iter ; continue ; } cmask = iter -> mask & mask ; if ( ( iter -> val & cmask ) == ( val & cmask ) && iter -> band!= knode -> res -> classid ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; } } if (! match ) { match = kzalloc ( sizeof ( * match ), GFP_KERNEL ) ; if (! match ) return - ENOMEM ; list_add ( & match -> list, & al",0
594,<S2SV_ModStart> ) ; } if ( stream -> config. cfg. g_pass == VPX_RC_ONE_PASS ) stream -> config. cfg. g_pass = VPX_RC_LAST_PASS ; else if ( stream -> config. cfg. g_pass == VPX_RC_FIRST_PASS ) stream -> config. cfg. g_pass = VPX_RC_FIRST_PASS ; else if ( stream -> config. cfg. g_pass == VPX_RC_LAST_PASS ) stream -> config. cfg. g_pass = VPX_RC_LAST_PASS ; else if ( stream -> config. cfg. g_pass == VPX_RC_FIRST_PASS ) stream -> config. cfg. g_pass = VPX_RC_FIRST_PASS ; else if ( stream -> config. cfg. g_pass == VPX_RC_ONE_PASS ) stream -> config. cfg. g_pass = VPX_RC_ONE_PASS ; <S2SV_ModStart> ( pass ) { <S2SV_ModStart> stats ) ; },0
595,"<S2SV_ModStart> ; if (! g_key_file_set_string ( keyfile, expected_dbus_name, name <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if (! g_key_file_set_string ( keyfile, expected_dbus_name, name <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if (! g_key_file_set_string ( keyfile, expected_dbus_name, name <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if (! g_key_file_set_string ( keyfile, expected_dbus_name, name <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if (! g_key_file_set_string ( keyfile, expected_dbus_name, name <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if (! g_key_file_set_string ( keyfile, expected_dbus_name, name <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if (! g_key_file_set_string ( keyfile, expected_dbus_name, name <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if (! g_key_file_set_string ( keyfile, expected_dbus_name, name <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if (! g_key_file_set_string ( keyfile, expected_dbus_",0
596,<S2SV_ModStart> data_end ) { const <S2SV_ModStart> end = NULL <S2SV_ModEnd> ; assert ( <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> aligned_cols ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) * aligned_cols <S2SV_ModEnd> ; for ( <S2SV_ModStart> int last_tile = tile_row == tile_rows - 1 && tile_col == tile_cols - 1 ; const int last_tile = tile_row == tile_rows - 1 && col == tile_cols - 1 ; const TileBuffer * const buf = & tile_buffers [ tile_row ] [ tile_col ] ; buf -> data = data ; buf -> size = size ; data += size ; } } for ( tile_row = 0 ; tile_row < tile_rows ; ++ tile_row ) { for ( tile_col = 0 ; tile_col < tile_cols ; ++ tile_col ) { const int col = cm -> inv_tile_order? tile_cols - tile_col - 1 : tile_col ; const int last_tile = tile_row == tile_rows - 1 && col == tile_cols - 1 ; const TileBuffer * const buf = & tile_buffers [ tile_row ] [ tile_col ] ; buf,0
597,"<S2SV_ModStart> * vp9_decoder_create ( <S2SV_ModEnd> VP9D_CONFIG * oxcf <S2SV_ModStart> ovcf ) { VP9Decoder * const pbi = vpx_memalign ( 32, sizeof ( * pbi ) ) ; VP9_COMMON * const cm = pbi? & pbi -> common : NULL ; if (! cm ) return NULL ; vp9_zero ( * pbi ) ; if ( setjmp ( cm -> error. jmp ) ) { cm -> error. setjmp = 0 ; vp9_decoder_remove ( pbi ) ; return NULL ; } cm -> error. setjmp = 1 ; vp9_initialize_dec ( ) ; vpx_memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_video_frame = 0 ; pbi -> oxcf = * oxcf ; pbi -> ready_for_new_data = 1 ; pbi -> decoded_key_frame = 0 ; vp9_init_dequantizer ( cm ) ; vp9_loop_filter_init ( cm ) ; cm -> error. setjmp = 0 ; vp",0
598,"<S2SV_ModStart>, GF_LOG_CONTAINER, <S2SV_ModEnd> ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) <S2SV_ModStart> GF_ISOM_BOX_TYPE_DREF ) ; if (! ( ( GF_DataInformationBox * ) s ) -> dref ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } else { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
599,<S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> || opt -> opt. <S2SV_ModStart> || opt -> opt.,0
600,"<S2SV_ModStart> tokens, const vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> do { const vpx_tree_index <S2SV_ModEnd> j = tree",1
601,"<S2SV_ModStart> = VPX_CODEC_OK ; pick_quickcompress_mode ( ctx, duration, deadline ) ; vpx_codec_pkt_list_init ( & ctx -> pkt_list ) ; if ( ( ( flags & VP8_EFLAG_NO_UPD_GF ) && ( flags & VP8_EFLAG_FORCE_GF ) ) || ( ( flags & VP8_EFLAG_NO_UPD_ARF ) && ( flags & VP8_EFLAG_FORCE_ARF ) ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_",0
602,"<S2SV_ModStart> 0 ) { if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } newseq = realloc ( seq, ( count + 1 ) * elemtype -> size ) ; if ( newseq == NULL ) { ret = ENOMEM ; goto error ; } seq = newseq ; elem = ( char * ) seq + count * elemtype -> size ; memset ( elem, 0, elemtype -> size ) ; ret = decode_atype ( & t, contents, clen, elemtype, elem ) ; if ( ret ) goto error ; count ++ ; } <S2SV_ModStart>, & len <S2SV_ModEnd> ) ; if",0
603,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> in ) { memset ( s, 0, 16 ) ; memset ( x, 0, 16 ) ; memset ( u, 0, 32 ) ; memset ( v, 0, 32 ) ; memset ( k__cospi_p01_p31, 0 ) ; memset ( k__cospi_p31_m01, 0 ) ; memset ( k__cospi_p27_p05_p27, 0 ) ; memset ( k__cospi_p27_m05, 0 ) ; memset ( k__cospi_p09_p23, 0 ) ; memset ( k__cospi_p23_m09, 0 ) ; memset ( k__cospi_p13_p19, 0 ) ; memset ( k__cospi_p13_p19_m13, 0 ) ; memset ( k__cospi_p17_p15, 0 ) ; memset ( k__cospi_p15_m17, 0 ) ; memset ( k__cospi_p15_",0
604,"<S2SV_ModStart> rc, const VP9EncoderConfig <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> { int64_t max_bits ; if ( rc -> av_per_frame_bandwidth < 0 ) max_bits = 0 ; else if ( rc -> av_per_frame_bandwidth > ( int64_t ) oxcf -> two_pass_vbrmax_section ) max_bits = ( int ) rc -> av_per_frame_bandwidth ; else if ( oxcf -> two_pass_vbrmax_section > ( int64_t ) oxcf -> two_pass_vbrmax_section ) max_bits = ( int ) oxcf -> two_pass_vbrmax_section ; else if ( rc -> av_per_frame_bandwidth > ( int64_t ) oxcf -> two_pass_vbrmax_section ) max_bits = rc -> av_per_frame_bandwidth ; else if ( oxcf -> two_pass_vbrmax_section > ( int64_t ) oxcf -> two_pass_vbrmax_section ) max_bits = oxcf -> two_pass_vbrmax_section",0
605,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
606,"<S2SV_ModStart> * cpi, <S2SV_ModEnd> int mi_row, <S2SV_ModStart> BLOCK_SIZE bsize ) { VP9_COMMON * const cm = & cpi -> common ; MACROBLOCK * const x = & cpi -> mb ; MACROBLOCKD * const xd = & x -> e_mbd ; MODE_INFO * * mi = mi_8x8 [ 0 ] ; MB_MODE_INFO * mbmi = & mi -> mbmi ; PICK_MODE_CONTEXT * ctx = get_block_context ( x, bsize ) ; unsigned int segment_id = mbmi -> segment_id ; const int mis = cm -> mi_stride ; const int mi_width = num_8x8_blocks_wide_lookup [ bsize ] ; const int mi_height = num_8x8_blocks_high_lookup [ bsize ] ; x -> skip_recode =! x -> select_txfm_size && mbmi -> sb_type >= BLOCK_8X8 && cpi -> oxcf. aq_mode!= COMPLEXITY_AQ && cpi -> sf. allow_skip_recode ; x -> skip_optimize = ctx -> is_",0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr,0
608,"<S2SV_ModStart> range_max ) { int32_t <S2SV_ModEnd> value ; int <S2SV_ModStart> position, zeroes <S2SV_ModEnd>, j ; <S2SV_ModStart> gbc ) ; if ( get_bits_left ( gbc ) < zeroes ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits1 ( gbc ) ) { bits [ i ++ ] = '1' ; break ; } else { bits [ i ++ ] = '0' ; ++ zeroes ; } } if ( zeroes >= 32 ) { value = MAX_UINT_BITS ( 32 ) ; } else { value = get_bits_long ( gbc, zeroes ) ; for ( j = 0 ; j < zeroes ; j ++ ) bits [ i ++ ] = ( value >> ( zeroes - j - 1 ) & 1 )? '1' : '0' ; value += ( 1 << zeroes ) - 1 ; } if ( ctx -> trace_enable ) { bits [ i ] = 0 ; ff_cbs_trace_syntax_",0
609,"<S2SV_ModStart> c ) || _strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> c ) || _strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> c ) || _strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> c ) || _strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> c ) || _strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> c ) || _strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> c ) || _strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> c ) || _strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> c ) || _strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> c ) || _strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> c ) || _strchr <S2SV_ModEnd> ( ""!#$%&\'",0
610,"<S2SV_ModStart>, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_origin. ptr = NULL, packet -> http_origin. ptr = NULL, packet -> http_x_session_type. ptr = NULL, packet -> http_x_session_type. len = 0, packet -> server_line. ptr = NULL, packet -> server_line. len = 0, packet -> http_num_headers = 0, packet -> <S2SV_ModStart> = 0, <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
611,"<S2SV_ModStart> { q = QueuePixelPacket <S2SV_ModEnd> ( image, <S2SV_ModStart> x ), Min ( 4, dds_info -> height - y ), exception ) ; if ( q == ( PixelPacket * ) NULL ) return MagickFalse ; c0 = ReadBlobLSBShort ( image ) ; c1 = ReadBlobLSBShort ( image ) ; bits = ReadBlobLSBLong ( image ) ; CalculateColors ( c0, c1, & colors, MagickFalse ) ; for ( j = 0 ; j < 4 ; j ++ ) { for ( i = 0 ; i < 4 ; i ++ ) { if ( ( x + i ) < ( ssize_t ) dds_info -> width && ( y + j ) < ( ssize_t ) dds_info -> height ) { code = ( unsigned char ) ( ( bits >> ( ( j * 4 + i ) * 2 ) ) & 0x3 ) ; SetPixelRed ( q, ScaleCharToQuantum ( colors. r [ code ] ) ) ; SetPixelGreen ( q, ScaleCharToQuantum ( colors. g [ code ] ) ) ; SetPixelBlue ( q, ScaleCharToQuantum ( colors. b",0
612,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL ) <S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL )",1
613,"<S2SV_ModStart> action ) { sprintf ( outputbuffer, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> %12.3f <S2SV_blank> c\\n"", - w, - w, h * BzK, h, w ) ; sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", <S2SV_ModStart> w ) ; sprintf ( outputbuffer, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> %12.3f <S2SV_blank> c\\n"", w, - h * BzK, w, h * BzK, w ) ; sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c <S2SV_blank> %s\\n"", <S2SV_ModStart> action ) ; sprintf ( outputbuffer, "" <S2SV_blank> %12.3f <S2SV_blank> %",0
614,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; fflush ( outputbuffer ) ;",0
615,"<S2SV_ModStart> return FALSE ; if ( Stream_GetRemainingLength ( s ) < 4 ) { <S2SV_ModStart> ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" ) ; Stream_Seek_UINT32 ( s, rdp -> autodetect -> bandwidthMeasureTimeDelta ) ; Stream_Seek_UINT32 ( s, rdp -> autodetect -> bandwidthMeasureByteCount ) ; Stream_Seek_UINT32 ( s, rdp -> autodetect -> bandwidthMeasureTimeDelta ) ; Stream_Seek_UINT32 ( s, rdp -> autodetect -> bandwidthMeasureByteCount ) ; if ( rdp -> autodetect -> bandwidthMeasureTimeDelta > 0 ) rdp -> autodetect -> netCharBandwidth = rdp -> autodetect -> bandwidthMeasureByteCount * 8 / rdp -> autodetect -> bandwidthMeasureTimeDelta ; else rdp -> autodetect -> netCharBandwidth = 0 ; IFCALLRET ( rdp -> autodetect -> BandwidthMeasureResults, success, rdp -> context, autodetectRspPdu -> sequenceNumber ) ; return success ; }",0
616,"<S2SV_ModStart> cm, recon_y_stride, cm -> yv12_fb [ dst_fb_idx ]. y_stride <S2SV_ModStart> cm, recon_uv_stride, cm -> yv12_fb [ dst_fb_idx ]. uv_stride <S2SV_ModStart> cm, recon_y_stride, cm -> yv12_fb [ dst_fb_idx ]. y_stride <S2SV_ModStart> cm, recon_uv_stride, cm -> yv12_fb [ dst_fb_idx ]. uv_stride <S2SV_ModStart> cm, recon_y_stride, cm -> yv12_fb [ dst_fb_idx ]. uv_stride <S2SV_ModStart> cm, recon_y_stride, cm -> yv12_fb [ dst_fb_idx ]. uv_stride <S2SV_ModStart> cm, recon_y_stride, cm -> yv12_fb [ dst_fb_idx ]. y_stride <S2SV_ModStart> cm, recon_uv_stride, cm -> yv12_fb [ dst_fb_idx ]. uv_stride <S2SV_ModStart> cm, recon_y_stride, cm -> yv12_fb [ dst_fb_idx ]. uv_stride",0
617,"<S2SV_ModStart> -> b_multithreaded_rd ) { # if CONFIG_VP8_HIGHBITDEPTH if ( pbi -> b_highbitdepth ) { # endif <S2SV_ModStart> mb_rows ) ; # if CONFIG_VP8_HIGHBITDEPTH if ( pbi -> b_highbitdepth ) { # endif vp8mt_de_alloc_temp_buffers ( pbi, pbi -> common. mb_rows ) ; # if CONFIG_VP8_HIGHBITDEPTH if ( pbi -> b_highbitdepth ) { # endif vp8mt_de_alloc_temp_buffers ( pbi, pbi -> common. mb_rows ) ; # endif vp8_decoder_remove_threads ( pbi ) ; # if CONFIG_VP8_HIGHBITDEPTH if ( pbi -> b_highbitdepth ) { # endif vp8mt_de_alloc_temp_buffers ( pbi, pbi -> common. mb_rows ) ; # if CONFIG_VP8_HIGHBITDEPTH if ( pbi -> b_highbitdepth ) { # endif vp8mt_de_alloc_temp_buffers ( pbi, pbi -> common. mb_rows ) ; # endif",0
618,<S2SV_ModStart> { if ( ( <S2SV_ModStart> xWantedSize > 0 ) && ( xWantedSize < xFreeBytesRemaining ) <S2SV_ModStart> portBYTE_ALIGNMENT_MASK ) ) ; } else { mtCOVERAGE_TEST_MARKER ( ) ; } if ( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) ) { pxPreviousBlock = & xStart ; pxBlock = xStart. pxNextFreeBlock ; while ( ( ( uint8_t * ) pxBlock -> xBlockSize < xWantedSize ) && ( pxBlock -> pxNextFreeBlock!= NULL ) ) { pxPreviousBlock = pxBlock ; pxBlock = pxBlock -> pxNextFreeBlock ; } if ( pxBlock!= pxEnd ) { pvReturn = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize ) ; pxBlock -> xBlockSize = xWantedSize ; prvInsertBlockIntoFreeList ( ( pxBlock ) ) ; } xFreeBytesRemaining -= pxBlock -> xBlockSize ; if ( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining ) { xMinimumEverFreeBytesRemaining = xFreeBytes,0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,"<S2SV_ModStart> s ) { uint32 <S2SV_ModEnd> num_updates ; uint16 <S2SV_ModStart> ( Protocol, Info <S2SV_ModEnd>, ""%s()"", <S2SV_ModStart> ++ ) { in_uint32_le ( s, left ) ; in_uint32_le ( s, top ) ; in_uint32_le ( s, right ) ; in_uint32_le ( s, bottom ) ; in_uint32_le ( s, width ) ; in_uint32_le ( s, bpp ) ; Bpp = ( bpp + 7 ) / 8 ; in_uint32_le ( s, compress ) ; in_uint32_le ( s, bufsize ) ; cx = right - left + 1 ; cy = bottom - top + 1 ; logger ( Graphics, Debug, ""process_bitmap_updates(), <S2SV_blank> [%d,%d,%d], <S2SV_blank> [%d,%d], <S2SV_blank> bpp=%d, <S2SV_blank> compression=%d"", left, top, right, bottom, width, height, Bpp, compress ) ; if (! compress ) { int y ; bmpdata = ( uint8 * ) xmalloc ( width * height * Bpp ) ; for ( y = 0 ; y < height ; y ++ )",0
621,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
622,"<S2SV_ModStart> tx_size, vp9_coeff_stats coef_stats <S2SV_ModEnd> ) { vp9_coeff_probs_model <S2SV_ModStart> vp9_coeff_probs_model * coef_probs ; vp9_coeff_count * coef_counts ; unsigned int ( * eob_branch_ct ) [ REF_TYPES ] [ COEF_BANDS ] [ COEFF_CONTEXTS ] = cpi -> common. counts. eob_branch [ tx_size ] ; int i, j, k, l, m ; for ( i = 0 ; i < PLANE_TYPES ; ++ i ) { for ( j = 0 ; j < PLANE_TYPES ; ++ j ) { for ( k = 0 ; k < REF_TYPES ; ++ k ) { for ( l = 0 ; l < BAND_COEFF_CONTEXTS ( k ) ; ++ l ) { vp9_tree_probs_from_distribution ( vp9_coef_tree, coef_branch_ct [ i ] [ j ] [ k ] [ l ], coef_counts [ i ] [ j ] [ k ] [ l ] ) ; coef_branch_ct [ i ] [ j ] [ k ] [",0
623,"<S2SV_ModStart> { } ; struct stat st ; <S2SV_ModStart> name ) ; if ( stat ( name, & st ) < 0 ) return log_warning_errno ( errno, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> term <S2SV_blank> processing <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; r = loop_write ( fd, utf8? ""\\033%G"" : ""\\033%@"", 3, false ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> UTF-8 <S2SV_blank> term <S2SV_blank> processing <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; r = tcgetattr ( fd, & tc ) ; if ( r >= 0 ) { SET_FLAG ( tc. c_iflag, IUTF8, utf8 ) ; r = tcsetattr ( fd, TCSANOW, & tc ) ; } if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ;",0
624,"<S2SV_ModStart> int su3000_frontend_attach ( struct dvb_usb_device * d, <S2SV_ModStart> ( dvb_usb_generic_rw ( & <S2SV_ModStart> ( dvb_usb_generic_rw ( & <S2SV_ModStart> ( dvb_usb_generic_rw ( & <S2SV_ModStart> ( dvb_usb_generic_rw ( & <S2SV_ModStart> ( dvb_usb_generic_rw ( & <S2SV_ModStart> ( dvb_usb_generic_rw ( & <S2SV_ModStart> ( dvb_usb_generic_rw ( & <S2SV_ModStart> ( dvb_usb_generic_rw ( & <S2SV_ModStart> ( dvb_usb_generic_rw ( & <S2SV_ModStart> ( dvb_usb_generic_rw ( & <S2SV_ModStart> ( dvb_usb_generic_rw ( & <S2SV_ModStart> ( dvb_usb_generic_rw ( & <S2SV_ModStart> ( dvb_usb_generic_rw ( & <S2SV_ModStart> ( dvb_usb_generic_rw ( & <S2SV_ModStart> ( dvb_usb_generic_rw ( & <S2SV_ModStart> ( dvb_usb_generic_rw ( & <S2SV_ModStart> ( dvb_usb_generic_rw ( & <S2SV_ModStart> ( dvb_usb_generic_rw ( & <S2SV_ModStart> ( dvb_usb_generic_rw ( & <S2SV_ModStart> ( dvb_usb",0
625,"<S2SV_ModStart> vpx_codec_enc_cfg_t * cfg <S2SV_ModEnd>, int ver <S2SV_ModStart> ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else { ctx -> iface = iface ; ctx -> name = iface -> name ; ctx -> priv = NULL ; ctx -> init_flags = flags ; ctx -> config. enc = cfg ; res = ctx -> iface -> init ( ctx, NULL ) ; if ( res ) { ctx -> err_detail = ctx -> priv? ctx -> priv -> err_detail : NULL ; vpx_",0
626,"<S2SV_ModStart>, int uv_block_size, int mv_row, int mv_col, struct scale_factors * scale, int x, int y ) { const int which_mv = 0 ; const MV mv = { mv_row, mv_col } ; const InterpKernel * const kernel = vp9_get_interp_kernel ( xd -> mi [ 0 ] -> mbmi. interp_filter ) ; enum mv_precision mv_precision_uv ; int uv_stride ; vp9_build_inter_predictor ( y_mb_ptr, stride, & pred [ 0 ], 16, & mv, scale, 16, 16, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vp9_build_inter_predictor ( u_mb_ptr, uv_stride, & pred [ 256 ], uv_block_size, & mv, scale, uv_block_size, uv_block_size, which_mv, kernel, mv_precision_uv, x, y ) ; vp9_build_inter_predictor ( v_mb_ptr, uv_stride, & pred [ 512 ], uv_block_size,",0
627,"<S2SV_ModStart> = TRUE ; if ( strchr ( origbuf,'<S2SV_blank>') ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; }",0
628,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> cJSON_CreateFloatArray ( double <S2SV_ModStart> ( ) ; if (! a ) return 0 ; <S2SV_ModStart> i ) { if (! ( <S2SV_ModStart> i ] ) ) ) return 0 <S2SV_ModStart> ; if ( <S2SV_ModEnd> i ) a,0
629,"<S2SV_ModStart> data_end ) { const <S2SV_ModStart> pbi -> common <S2SV_ModEnd> ; const int <S2SV_ModStart> tile_cols ) ; int n ; int final_worker = - 1 ; assert ( tile_cols <= ( 1 << 6 ) ) ; assert ( tile_rows == 1 ) ; ( void ) tile_rows ; if ( pbi -> num_tile_workers == 0 ) { const int num_threads = pbi -> oxcf. max_threads & ~ 1 ; int i ; CHECK_MEM_ERROR ( cm, pbi -> tile_workers, vpx_malloc ( num_threads * sizeof ( * pbi -> tile_workers ) ) ) ; for ( i = 0 ; i < num_threads ; ++ i ) { VP9Worker * const worker = & pbi -> tile_workers [ i ] ; ++ pbi -> num_tile_workers ; vp9_worker_init ( worker ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data2, vpx_malloc ( sizeof ( TileInfo ) ) ) ; if ( i < num",0
630,<S2SV_ModStart> = base + get4l <S2SV_ModEnd> ( ) + <S2SV_ModStart> ; len = get4l <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get4l <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get4l <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get4l <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get4l <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get4l <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get4l <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get4l <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get4l <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get4l <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get4l <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get4l <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get4l <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get4l <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get4l <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get4l <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get4l <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get4l <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get4l <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get4l <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get4l <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get4l <S2SV_ModEnd> ( ) ; <S2SV_ModStart>,0
631,"<S2SV_ModStart> -> common ; const double base_q = vp9_convert_qindex_to_q ( cm -> base_qindex ) ; const int base_rdmult = vp9_compute_rd_mult ( cpi, cm -> base_qindex + cm -> y_dc_delta_q ) ; int i ; if ( cpi -> frame_type == KEY_FRAME || cpi -> refresh_alt_ref_frame || ( cpi -> refresh_golden_frame &&! cpi -> rc. is_src_frame_alt_ref ) ) { vp9_enable_segmentation ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vp9_clear_system_state ( ) ; for ( i = ENERGY_MIN ; i <= ENERGY_MAX ; i ++ ) { int qindex_delta, segment_rdmult ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; } qindex_delta = vp9_compute_qdelta ( & cpi -> rc, base_q, base_q * Q_RATIO",0
632,"<S2SV_ModStart> -> error_code ) memcpy ( & <S2SV_ModStart> base. err_detail, <S2SV_ModEnd> error -> has_detail <S2SV_ModStart> error -> detail, sizeof ( ctx -> base. err_detail ) ) <S2SV_ModEnd> ; return error",0
633,"<S2SV_ModStart>, * ps_cur_poc ; ps_dec -> s_cab_dec_env. pv_codec_handle = ps_dec ; ps_dec -> ps_dpb_mgr -> pv_codec_handle = ps_dec ; ps_dec -> u4_num_fld_in_frm = 0 ; ps_dec -> ps_sei -> u1_is_valid = 0 ; ps_dec -> ps_cur_pps = NULL ; ps_dec -> ps_cur_sps = NULL ; ps_dec -> s_cab_dec_env. pv_codec_handle = ps_dec ; ps_dec -> ps_dpb_mgr -> pv_codec_handle = ps_dec ; ps_dec -> ps_dpb_mgr -> pv_codec_handle = ps_dec ; ps_dec -> s_cab_dec_env. pv_codec_handle = ps_dec ; ps_dec -> ps_dpb_mgr -> pv_codec_handle = ps_dec ; ps_dec -> s_cab_dec_env. pv_codec_handle = ps_dec ; ps_dec -> ps_",0
634,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet ),0
635,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int getnum (,0
636,"<S2SV_ModStart> GCSpropagate ) ; atomic ( L ) ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> survival = g -> allgc ; psurvival = sweepgen ( L, g, & g -> tobefnz, NULL ) ; finishgencycle ( L, g ) ;",0
637,<S2SV_ModStart> 0 ; else { ret = <S2SV_ModEnd> - EIO ; <S2SV_ModStart> - EIO ; goto err ; },0
638,"<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } <S2SV_ModEnd> memset ( buffer <S2SV_ModStart> buffer ) ; <S2SV_ModEnd> s_write ( c",0
639,"<S2SV_ModStart> * cib, remote_connection_dispatch_t dispatch, remote_connection_destroy_t destroy <S2SV_ModEnd> ) { int <S2SV_ModStart> -> variant_opaque ; <S2SV_ModEnd> int rc = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> int ret_ga ; <S2SV_ModStart> = NULL ; connection -> socket = 0 ; connection -> session = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } bzero ( & hints, sizeof ( struct addrinfo ) ) ; hints. ai_flags = AI_CANONNAME ; hints. ai_family = AF_INET ; hints. ai_socktype = SOCK_RAW ; if ( hints. ai_family == AF_INET6 ) { hints. ai_protocol = IPPROTO_ICMPV6 ; } else { hints. ai_protocol = IPPROTO_ICMP ; } crm_debug ( ""Looking <S2SV_blank> up <S2SV_blank> %s"", server ) ; ret_ga = getaddrinfo ( server, NULL, & hints, & res ) ; if ( ret_ga ) { crm_",0
640,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> ; cpi -> gf_overspend_bits = 0 ; cpi -> frames_till_gf_update_due = 0 ; cpi -> gf_overspend_bits = 0 ; cpi -> non_gf_bitrate_adjustment = 0 ; cpi -> prob_last_coded = 128 ; cpi -> prob_gf_coded = 128 ; cpi -> prob_intra_coded = 63 ; cpi -> recent_ref_frame_usage [ INTRA_FRAME ] = 1 ; cpi -> recent_ref_frame_usage [ LAST_FRAME ] = 1 ; cpi -> recent_ref_frame_usage [ GOLDEN_FRAME ] = 1 ; cpi -> common. ref_frame_sign_bias [ ALTREF_FRAME ] = 1 ; cpi -> common. ref_frame_sign_bias [ GOLDEN_FRAME ] = 1 ; cpi -> recent_ref_frame_usage [ INTRA_FRAME ] = 1 ; cpi -> recent_ref_frame_usage [ GOLDEN_FRAME ] = 1 ; cpi -> recent_ref_frame_usage",0
641,"<S2SV_ModStart> ) ) ; if ( len < 26 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> len <S2SV_blank> %d]"", len ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( len < 26 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> len <S2SV_blank> %d]"", len ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( len < 26 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> len <S2SV_blank> %d]"", len ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( len < 26 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> len <S2SV_blank> %d]"", len ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( len < 26 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> len <S2SV_blank> %d]"", len ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( len < 26 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> len <S2SV_blank> %d]"", len ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( len < 26 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> len",0
642,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command",0
643,"<S2SV_ModStart> ] ; Image <S2SV_ModEnd> status ; register <S2SV_ModStart> length, padding <S2SV_ModEnd>, version, <S2SV_ModStart> ) break ; image -> columns = width ; image -> rows = height ; image -> depth = 8 ; image -> storage_class = PseudoClass ; image -> colors = 2 ; version = 11 ; while ( ReadBlobString ( image, buffer )!= ( char * ) NULL ) if ( sscanf ( buffer, ""static <S2SV_blank> short <S2SV_blank> %32s <S2SV_blank> %u"", name, & width ) == 2 ) if ( ( strlen ( name ) >= 6 ) && ( LocaleCompare ( name + strlen ( name ) - 6, ""_width"" ) == 0 ) ) break ; image -> columns = width ; image -> rows = height ; image -> depth = 8 ; image -> colors = 2 ; version = 11 ; while ( ReadBlobString ( image, buffer )!= ( char * ) NULL ) if ( sscanf ( buffer, ""static <S2SV_blank> short <S2SV_blank> %32s <S2SV_blank> %u"", name, & height ) == 2 ) if ( ( strlen ( name ) >= 7 ) && ( LocaleCompare ( name + strlen ( name ) - 7, ""_height"" ) == 0 ) ) break ;",0
644,"<S2SV_ModStart> 1 ; } if (! jas_putms ( enc -> out, enc -> cstate, enc -> mrk ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC <S2SV_blank> marker\\n"" ) ; return - 1 ; } <S2SV_ModStart> 0 ) { if (! jas_putms ( enc -> out, enc -> cstate, enc -> mrk ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC <S2SV_blank> marker\\n"" ) ; return - 1 ; } <S2SV_ModStart> 0 ) { if (! jas_putms ( enc -> out, enc -> cstate, enc -> mrk ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC <S2SV_blank> marker\\n"" ) ; return - 1 ; } <S2SV_ModStart> 0 ) { if (! jas_putms ( enc -> out, enc -> cstate, enc -> mrk ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC <S2SV_blank> marker\\n"" ) ; return - 1 ; } <S2SV_ModStart> 0 ) { if (! jas_putms ( enc -> out, enc -> cstate, enc -> mrk ) ) { jas_eprintf ( ""cannot <S2SV_blank>",0
645,<S2SV_ModStart> = '\\0' ; if (! new_args ) { free ( new_modes ) ; free ( new_args ) ; return ; } <S2SV_ModStart> = '\\0' ; if (! str_temp ) { free ( new_modes ) ; free ( new_args ) ; return ; } <S2SV_ModStart> = '\\0' ; if (! str_temp ) { free ( new_modes ) ; free ( new_args ) ; return ; } <S2SV_ModStart> = '\\0' ; if (! str_temp ) { free ( new_modes ) ; free ( new_args ) ; return ; } <S2SV_ModStart> = '\\0' ; if (! str_temp ) { free ( new_modes ) ; free ( new_args ) ; free ( str_temp ) ; return ; } <S2SV_ModStart> = '\\0' ; if (! str_temp ) { free ( new_modes ) ; free ( new_args ) ; free ( str_temp ) ; return ; } <S2SV_ModStart> = '\\0' ; if (! str_temp ) { free ( new_modes ) ; free ( new_args ) ; free ( str_temp ) ; free ( str_temp ) ; return ; },0
646,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> - m + vpx_read_bit <S2SV_ModEnd> ( r )",1
647,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
648,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> REFERENCE_MODE mode = vpx_read <S2SV_ModEnd> ( r,",0
649,"<S2SV_ModStart>! stream ) { <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; } <S2SV_ModStart>! res ) { <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; } <S2SV_ModStart> ( res ) ) ; stream -> config. cfg. g_timebase. den = 1000 ; stream -> config. cfg. g_w = 0 ; stream -> config. cfg. g_h = 0 ; stream -> config. cfg. stereo_fmt = STEREO_FORMAT_MONO ; stream -> config. write_webm = 1 ; stream -> ebml. debug = global -> debug ; if ( global -> deadline == VPX_DL_REALTIME ) stream -> config. cfg. g_lag_in_frames = 0 ; } else { stream -> config. cfg. g_w = 0 ; stream -> config. cfg. g_h = 0 ; stream -> config. cfg. stereo_fmt = STEREO_FORMAT_MONO ; stream -> config. write_webm = 1 ; # if CONFIG_WEBM_IO stream -> ebml. last_pts_ms = - 1 ; # endif stream -> ebml. debug = global -> debug ; if ( global -> deadline",0
650,"<S2SV_ModStart> < 0 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u), <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""unknown"", op -> nd_opt_type ), op -> nd_opt_len << 3, op -> nd_opt_len ) ) ; <S2SV_ModStart> goto trunc ; } <S2SV_ModStart> < 0 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u), <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""unknown"", op -> nd_opt_type ), op -> nd_opt_len << 3, op -> nd_opt_len ) ) ) ; <S2SV_ModStart> goto trunc ; } <S2SV_ModStart> < 0 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u), <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""unknown"", op -> nd_opt_type ), op -> nd_opt_",0
651,<S2SV_ModStart> -> root_node = yr_malloc ( sizeof ( RE_AST ) ) ; if ( * re_ast -> root_node == NULL ) return ERROR_INSUFFICIENT_MEMORY ; ( * re_ast ) -> root_node -> next = yr_malloc ( sizeof ( RE_AST ) ) ; if ( ( * re_ast ) -> root_node == NULL ) return ERROR_INSUFFICIENT_MEMORY ; ( * re_ast ) -> root_node -> next = yr_malloc ( sizeof ( RE_AST ) ) ; if ( ( * re_ast ) -> root_node == NULL ) return ERROR_INSUFFICIENT_MEMORY ; ( * re_ast ) -> root_node -> next = yr_malloc ( sizeof ( RE_AST ) ) ; ( * re_ast ) -> root_node -> next -> prev = yr_malloc ( sizeof ( RE_AST ) ) ; if ( ( * re_ast ) -> root_node -> next == NULL ) return ERROR_INSUFFICIENT_MEMORY ; ( * re_ast ) -> root_node -> prev = yr_malloc ( sizeof ( RE,0
652,"<S2SV_ModStart> ) ) ; auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> = <S2SV_blank> %s"", str_c ( path ), key -> key -> key -> value ) ; <S2SV_ModStart> 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key -> key, error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> = <S2SV_blank> %s"", str_c ( path ), key -> value ) ; } else if ( ret < 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> lookup <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", str_c ( path ), error ) ;",0
653,<S2SV_ModStart> -> level = 1 <S2SV_ModEnd> ; tok ->,0
654,<S2SV_ModStart> av1 -> av1_config && av1 -> av1_config -> config,1
655,<S2SV_ModStart> dpbSize ) ; if ( picSizeInMbs == 0 || dpbSize == 0 ) { return ( MEMORY_ALLOCATION_ERROR ) ; },0
656,"<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> (! sock ||! addr <S2SV_ModStart> OE_EINVAL ) ; if ( addrlen_in > OE_SSIZE_MAX ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } <S2SV_ModStart> ( addrlen ) { <S2SV_ModStart> * addrlen ; addrlen_out = * addrlen ; } <S2SV_ModStart>, addrlen_in, & addrlen_out <S2SV_ModEnd> )!= OE_OK <S2SV_ModStart> ) ; } if ( addrlen_out > OE_SSIZE_MAX ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; }",0
657,,1
658,"<S2SV_ModStart> FALSE ; } if (! <S2SV_ModStart>, s ) ) return FALSE",1
659,"<S2SV_ModStart> ipv6_pinfo * np ; struct ipv6_txoptions * opt = NULL ; struct ip6_flowlabel * flowlabel = NULL ; struct dst_entry * dst = NULL ; struct flowi6 fl6 ; int addr_len = msg -> msg_namelen ; int hlimit = - 1 ; int tclass = - 1 ; int dontfrag = - 1 ; int transhdrlen = 4 ; int ulen = len + transhdrlen ; int err ; if ( addr_len >= sizeof ( struct sockaddr_in6 ) && lsa -> l2tp_flowinfo & IPV6_FLOWINFO_MASK ) { fl6. flowlabel = lsa -> l2tp_flowinfo & IPV6_FLOWINFO_MASK ; if ( fl6. flowlabel & IPV6_FLOWLABEL_MASK ) { flowlabel = fl6_sock_lookup ( sk, fl6. flowlabel ) ; if ( flowlabel == NULL ) return - EINVAL ; } } np <S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; if (",0
660,"<S2SV_ModStart> ; unsigned int <S2SV_ModEnd> found, upx_success <S2SV_ModStart> size_t fsize ; size_t <S2SV_ModEnd> valign, falign <S2SV_ModStart> j ; struct cli_exe_section * exe_sections ; char timestr [ 32 ] ; struct pe_image_data_dir * dirs ; struct cli_bc_ctx * bc_ctx ; fmap_t * map ; struct cli_pe_hook_data pedata ; # ifdef HAVE__INTERNAL__SHA_COLLECT int sha_collect = ctx -> sha_collect ; # endif const char * archtype = NULL ; # if HAVE__INTERNAL__SHA_COLLECT int sha_collect = ctx -> sha_collect ; # endif const char * subsystem = NULL ; uint32_t valign = 0 ; uint32_t hdr_size = 0 <S2SV_ModEnd> ; # ifdef",0
661,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; usleep <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPDRH <S2SV_ModEnd> ) << 8 <S2SV_ModStart> | dm9000ReadReg ( DM9000_EPDRL <S2SV_ModEnd> ) ; }",1
662,"<S2SV_ModStart> pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> callback. token, CRM_OP_REGISTER, NULL, NULL, NULL, 0, NULL ) ; crm_xml_add ( hello, F_CIB_CLIENTNAME, name ) ; <S2SV_ModStart> cib, & hello <S2SV_ModEnd> ) ; } <S2SV_ModStart> pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> command. token, CRM_OP_REGISTER, NULL, NULL, NULL, 0, NULL ) ; crm_send_remote_msg ( private -> command. session, hello, private -> command. encrypted ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { fprintf ( stderr, ""%s: <S2SV_blank> Opened <S2SV_blank> connection <S2SV_blank> to <S2SV_blank> %s:%d\\n"", name, private -> server, private -> port ) ; cib -> state = cib_connected_command ; cib -> type = cib_command ; } else { fprintf ( stderr, ""%s: <S2SV_blank> Connection <S2SV_blank> to <S2SV_blank> %s:%d <S2SV_blank> failed: <S2SV_blank> %s\\n"", name, private -> server,",0
663,"<S2SV_ModStart> ; msg. msg_namelen = sizeof ( address ) ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; err = sock_recvmsg ( sock, & msg, size, flags ) ; if ( err >= 0 && addr!= NULL ) { err2 = move_addr_to_user ( & address, msg. msg_namelen, addr, addr_len ) ; if ( err2 < 0 ) err = err2 ; } fput_light ( sock -> file, fput_needed ) ; msg. <S2SV_ModStart> & address ; <S2SV_ModEnd> err = sock_recvmsg",0
664,"<S2SV_ModStart> num00, tmp_err = 0, n = 0, sr = 0 ; int step_param = 3 ; int further_steps = ( MAX_MVSEARCH_STEPS - 1 ) - step_param ; const BLOCK_SIZE bsize = xd -> mi [ 0 ] -> mbmi. sb_type ; vp9_variance_fn_ptr_t v_fn_ptr = cpi -> fn_ptr [ bsize ] ; int new_mv_mode_penalty = 256 ; const int quart_frm = MIN ( cpi -> common. width, cpi -> common. height ) ; while ( sr < MAX_FULL_PEL_VAL ) ++ sr ; step_param += sr ; further_steps -= sr ; v_fn_ptr. vf = get_block_variance_fn ( bsize ) ; tmp_err = cpi -> diamond_search_sad ( x, & ref_mv_full, & tmp_mv, step_param, x -> sadperbit16, & num00, & v_fn_ptr, x -> nmvjointcost, x -> mvcost, ref_mv ) ; if (",0
665,"<S2SV_ModStart> ( EFAULT, ""%s: <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename, strerror ( errno ) <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( EFAULT, ""%s: <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename, strerror ( errno ) <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( EFAULT, ""%s: <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename, strerror ( errno ) <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( EFAULT, ""%s: <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename, strerror ( errno ) <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( EFAULT, ""%s: <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename, strerror ( errno ) <S2SV_ModEnd> ) ; goto",0
666,"<S2SV_ModStart> ; # endif # ifdef DEBUG_CONF ap_log_perror ( APLOG_MARK, APLOG_STARTUP | APLOG_NOERRNO, 0, mp, ""Merging <S2SV_blank> parent <S2SV_blank> %pp <S2SV_blank> child <S2SV_blank> %pp <S2SV_blank> RESULT <S2SV_blank> %pp"", _parent, _child, merged ) ; # endif",0
667,"<S2SV_ModStart>, one, <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart> == MagickFalse ) { <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; } <S2SV_ModStart> == MagickFalse ) { <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; } <S2SV_ModStart> == MagickFalse ) { <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; } <S2SV_ModStart> == MagickFalse ) { <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; } <S2SV_ModStart> == MagickFalse ) { <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; } <S2SV_ModStart> == MagickFalse ) { <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; } <S2SV_ModStart> == MagickFalse ) { <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; } <S2SV_ModStart> == MagickFalse ) { <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; } <S2SV_ModStart> == MagickFalse ) { <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; } <S2SV_ModStart> == MagickFalse ) { <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; } <S2SV_ModStart> == MagickFalse ) { <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; } <S2SV_ModStart> == MagickFalse ) { <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; } <S2SV_ModStart> == MagickFalse ) { <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; } <S2SV_ModStart> == MagickFalse ) { <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; } <S2SV_ModStart> == MagickFalse ) { <S2SV_ModStart> ""MemoryAllocationFailed"" ) ;",0
668,<S2SV_ModStart> ( r = <S2SV_ModEnd> sshbuf_put_cstring ( b,1
669,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
670,"<S2SV_ModStart> cib_client_t * client ; client = g_hash_table_lookup ( client_list, user_data ) ; if ( client == NULL ) { return ; } crm_trace ( ""Cleaning <S2SV_blank> up <S2SV_blank> after <S2SV_blank> client <S2SV_blank> disconnect: <S2SV_blank> %s/%s"", crm_str ( client -> name ), client -> id ) ; if ( client -> id!= NULL ) { if (! g_hash_table_remove ( client_list, client -> id ) ) { crm_err ( ""Client <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> the <S2SV_blank> hashtable"", client -> name ) ; } } crm_trace ( ""Destroying <S2SV_blank> %s <S2SV_blank> (%p)"", client -> name, user_data ) ; num_clients -- ; crm_trace ( ""Num <S2SV_blank> unfree\'d <S2SV_blank> clients: <S2SV_blank> %d"", num_clients ) ; free ( client -> name ) ; free ( client -> callback_id ) ; free ( client -> id ) ; free ( client -> user ) ; free ( client ) ; crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client"" ) ; if ( cib_shutdown_flag",0
671,"<S2SV_ModStart> * uv ; if (! iswhite ( thread ) ) { <S2SV_ModStart> -> twups ; } else { * p = thread -> twups ; thread -> twups = thread ; for ( uv = thread -> openupval ; uv!= NULL ; uv = uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> v ) ; } } <S2SV_ModStart> next ) { <S2SV_ModEnd> if (!",0
