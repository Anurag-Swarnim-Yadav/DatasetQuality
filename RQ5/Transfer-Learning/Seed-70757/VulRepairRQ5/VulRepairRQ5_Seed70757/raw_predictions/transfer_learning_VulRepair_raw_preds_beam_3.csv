,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
1,<S2SV_ModStart> ; if ( unlikely ( unfrag_ip6hlen < 0 ) ) return ERR_PTR ( unfrag_ip6hlen ) ; if (,0
2,<S2SV_ModStart> writer = ( TrackWriter <S2SV_ModEnd> * ) gf_list_get,0
3,<S2SV_ModStart> c = array? array -> child : NULL <S2SV_ModEnd> ; while ( <S2SV_ModStart> while ( c ) { if ( <S2SV_ModEnd> item > 0 <S2SV_ModStart> 0 ) { <S2SV_ModEnd> c = c <S2SV_ModStart> -> next ; },0
4,"<S2SV_ModStart> u64 nr, <S2SV_ModEnd> struct pt_regs * <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",1
5,"<S2SV_ModStart> EXT4_EXTENTS_FLAG ) { <S2SV_ModEnd> struct grub_ext4_extent_header * <S2SV_ModStart> leaf ) { <S2SV_ModEnd> return - 1 <S2SV_ModStart> if ( fileblock > <S2SV_ModEnd> grub_le_to_cpu16 ( ext <S2SV_ModStart> len ) ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; <S2SV_ModStart> return 0 ; } else { grub_disk_addr_t start ; start = grub_le_to_cpu16 ( ext [ i ]. start_hi ) ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext [ i ]. start ) ; return fileblock + start ; } } else { grub_disk_addr_t start ; start = grub_le_to_cpu16 ( ext [ i ]. start_hi ) ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext [ i ]. start ) ; return fileblock + start ; } } else { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; <S2SV_ModStart> 0 ; else <S2SV_ModEnd> { grub_disk_addr_t start",0
6,"<S2SV_ModStart> fdct16 ( const tran_low_t <S2SV_ModEnd> in [ 16 <S2SV_ModStart> 16 ], tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> ] ) { tran_high_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step2 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step3 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> input [ 8 <S2SV_ModStart> ] ; { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7 ; tran_high_t t0, t1, t2, t3 ; tran_high_t <S2SV_ModEnd> x0, x1",0
7,"<S2SV_ModStart> ( ) ; # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; # endif parse_ciff ( save + hlen, len - hlen, 0 ) ; } if ( parse_tiff ( save + 6 ) ) apply_tiff ( ) ; fseek ( ifp, save + len, SEEK_SET ) ; } return 1 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
8,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> search_filter_level ( const <S2SV_ModStart> search_filter_level ( const YV12_BUFFER_OUTPUT_CONFIG <S2SV_ModEnd> * sd, <S2SV_ModStart> * sd, VP9_COMMON * const <S2SV_ModEnd> cm, int <S2SV_ModStart> partial_frame ) { <S2SV_ModEnd> struct loopfilter * <S2SV_ModStart> cm -> lf ; int best_err ; int filt_best ; int filt_direction = 0 ; int filt_mid = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; int <S2SV_ModEnd> ss_err [ MAX_LOOP_FILTER <S2SV_ModStart> + 1 ] <S2SV_ModEnd> ; best_err = <S2SV_ModStart> min_filter_level ) ; int filt_err ; int <S2SV_ModEnd> bias = ( <S2SV_ModStart> * filter_step ; <S2SV_ModEnd> if ( cpi <S2SV_ModStart> 0 ) { int <S2SV_ModStart> partial_frame ) ; if ( ss_err [ filt_low ] < 0 ) { filt_err = ss_err [ filt_low ] ; } else { filt_err = try_filter_frame ( sd, cpi, filt_low, partial_frame ) ; } ss_err [ filt_low ] = filt_err ; } else { filt",0
9,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
10,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ++ i ) vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( usehp ) vpx_write <S2SV_ModEnd> ( w,",1
11,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } else { <S2SV_ModEnd> request -> rxBlockSzx <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; } <S2SV_ModStart> ( ) ) { <S2SV_ModStart> ( ) ; },1
12,"<S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; }",0
13,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> construct_get_dest_keyring ( struct <S2SV_ModStart> * authkey ; int ret = 0 ; <S2SV_ModStart> dest_keyring ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & authkey -> flags ) &&! test_bit ( KEY_FLAG_NEGATIVE, & authkey -> flags ) && key_is_negative ( dest_keyring ) ) { ret = - EPERM ; goto out ; } <S2SV_ModStart> ( dest_keyring ) { ret = 0 ; goto out ; } <S2SV_ModEnd> } case KEY_REQKEY_DEFL_THREAD_KEYRING <S2SV_ModStart> ) ; } out : return ret ;",0
14,<S2SV_ModStart> = create_spnego_ctx ( 0,0
15,<S2SV_ModStart> ; tm = localtime_r <S2SV_ModEnd> ( & t,0
16,<S2SV_ModStart> length ) ; if ( strlen ( password )!= 0 ) { <S2SV_ModStart> ) ) ; },0
17,<S2SV_ModStart> == p ) { * errnop = ERANGE ; <S2SV_ModStart> goto not_found ; },0
18,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",1
19,<S2SV_ModStart> = 0 ; if ( <S2SV_ModStart> & timeout ) == 0 ) { if ( errno == EINTR ) return false ; } <S2SV_ModEnd> return FD_ISSET (,0
20,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> detect_transition_to_still ( struct <S2SV_ModStart> last_decay_rate ) { bool trans_to_still = false <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( still_interval > MIN_STILL_INTERVAL <S2SV_ModEnd> && loop_decay_rate >= <S2SV_ModStart> int j ; <S2SV_ModEnd> FIRSTPASS_STATS tmp_next_frame ; <S2SV_ModStart> { if ( <S2SV_ModEnd> tmp_next_frame. pcnt_inter <S2SV_ModStart> tmp_next_frame. pcnt_motion <= <S2SV_ModEnd> 0.999 ) break <S2SV_ModStart> break ; } if (! trans_to_still ) { <S2SV_ModStart> position ) ; } <S2SV_ModStart> == still_interval ) { <S2SV_ModStart> 1 ; } },0
21,"<S2SV_ModStart> inode ) ) { if ( offset + size > i_size_read ( inode ) ) { printk ( KERN_EMERG ""%s: <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, ret, inode -> i_ino ) ; return ret ; } <S2SV_ModStart> size ) ; }",0
22,"<S2SV_ModStart> alg ) { <S2SV_ModEnd> if (! <S2SV_ModStart> CRYPTO_ALG_NEED_FALLBACK ) ) { request_module ( ""%s"", name ) ; <S2SV_ModStart> name ) ; }",0
23,"<S2SV_ModStart> = GIT_PKT_NG ; if ( len < 3 ) goto out_err ; <S2SV_ModStart> += 3 ; <S2SV_ModEnd> ptr = strchr <S2SV_ModStart>,'<S2SV_blank>') ; if (! ptr <S2SV_ModEnd> ) goto out_err <S2SV_ModStart> = '\\0' ; if ( len < 1 ) goto out_err ; <S2SV_ModStart> + 1 ; <S2SV_ModEnd> ptr = strchr <S2SV_ModStart>, '\\n' ) ; if (! ptr <S2SV_ModEnd> ) goto out_err",0
24,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> BYTE flags ; UINT32 <S2SV_ModEnd> length ; Stream_Read_UINT32,0
25,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; if (,0
26,"<S2SV_ModStart> mntent, path, rootfs",1
27,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } io -> io_cleanup = mem_cleanup ;,1
28,<S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> (,0
29,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return ret?,0
30,<S2SV_ModStart> vpx_codec_enc_cfg_map_t * map ; if ( ( iface -> caps & VPX_CODEC_CAP_ENCODER ) && ( iface -> enc. cfg_maps == NULL ) ) return VPX_CODEC_INCAPABLE <S2SV_ModStart> = VPX_CODEC_INVALID_PARAM ; if ( ( <S2SV_ModStart> enc. cfg_maps ) == NULL ) return VPX_CODEC_INVALID_PARAM,0
31,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
32,"<S2SV_ModStart> void show_progress ( uint64_t frame_out, <S2SV_ModStart> dx_time ) { if ( frame_out < 0 ) { fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> 0 <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_out, dx_time, ( double ) frame_out * 1000000.0 / ( double ) dx_time ) ; return ; }",0
33,"<S2SV_ModStart> NULL ) { PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> %s\\n"", fields [ i ]. name ) ;",0
34,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_ETXSTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXSTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXRTS <S2SV_ModEnd>, ECON1_TXRTS )",0
35,"<S2SV_ModStart> value ) ; if ( _PyObject_SetAttrId ( result, & PyId_description, value ) < 0 ) goto failed ; Py_DECREF ( value ) ;",0
36,<S2SV_ModStart> if ( page!= NULL <S2SV_ModStart> if ( page!= NULL <S2SV_ModStart> if ( page!= NULL <S2SV_ModStart> if ( page!= NULL <S2SV_ModStart> if ( page!= NULL <S2SV_ModStart> if ( page!= NULL <S2SV_ModStart> if ( page!= NULL,0
37,"<S2SV_ModStart> low_var_thresh, int mb_rows, int mb_cols <S2SV_ModEnd> ) { double <S2SV_ModStart>.5 ) ; <S2SV_ModEnd> unsigned char * <S2SV_ModStart> pp_limits_buffer ; ; <S2SV_ModEnd> ( void ) <S2SV_ModStart> ) flag ; memset <S2SV_ModEnd> ( limits, <S2SV_ModStart> 16 ) ; vp8_post_proc_down_and_across_mb_row <S2SV_ModEnd> ( source -> <S2SV_ModStart> 8 ) ; vp8_post_proc_down_and_across_mb_row <S2SV_ModEnd> ( source ->",0
38,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> h_hash ) ; mb2_cache_entry <S2SV_ModEnd> * ce ; <S2SV_ModStart> ; ce = mb2_cache_entry_alloc ( ext4_mb_cache, GFP_NOFS, hash <S2SV_ModEnd> ) ; if <S2SV_ModStart> } error = mb2_cache_entry_insert ( ext4_mb_cache, ce <S2SV_ModEnd>, bh -> <S2SV_ModStart> error ) { mb2_cache_entry_free ( ext4_mb_cache, ce ) ; <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> hash ) ; mb2_cache_entry_release ( ext4_mb_cache, <S2SV_ModEnd> ce ) ;",0
39,"<S2SV_ModStart> ) ) ; if (! <S2SV_ModEnd> r_socket_http_answer ( s <S2SV_ModStart>, rlen ) ) { free ( uri ) ; return NULL ; } return NULL",0
40,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( optlen && copy_from_user_rcu <S2SV_ModEnd> ( opt ->",0
41,"<S2SV_ModStart> ( ndo, ""[|truncated]"" <S2SV_ModEnd> ) ) ;",0
42,"<S2SV_ModStart> ) N_ ( ""E530: <S2SV_blank> Cannot <S2SV_blank> set <S2SV_blank> \'%s\' <S2SV_blank> to <S2SV_blank> a <S2SV_blank> non-empty <S2SV_blank> string"" <S2SV_ModEnd> ) ; else",0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode <S2SV_ModStart>, & new_mode, & acl ) ; if ( ret <S2SV_ModEnd> ) goto out",0
44,"<S2SV_ModStart> size_t size ; size_t cps ; <S2SV_ModStart> / 8 ; cps = ( depth + 7 ) / 8 ; <S2SV_ModStart> ( cmpt -> cps_, cmpt -> width_, <S2SV_ModEnd> & size ) <S2SV_ModStart> cmpt -> height_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ) { goto error ; } cmpt -> stream_ = ( inmem )? jas_stream_memopen2 ( 0, size ) : jas_stream_tmpfile ( ) ; if (! cmpt -> stream_ ) { goto error ; } if ( size > 0 ) { if ( size - 1 > LONG_MAX ) { goto error ; } if ( jas_stream_seek ( cmpt -> stream_, size - 1, SEEK_SET ) < 0 || jas_stream_putc ( cmpt -> stream_, '\\0' ) < 0 ) { goto error ; } if ( jas_stream_seek ( cmpt -> stream_, size - 1, SEEK_SET ) < 0 || jas_stream_putc ( cmpt -> stream_, '\\0' ) < 0",0
45,<S2SV_ModStart> dp == datalen || ( op & ASN1_OP__MATCHES_DATA && flags & FLAG_INDEFINITE_LENGTH ),0
46,"<S2SV_ModStart> * req, u32 <S2SV_ModEnd> * acl_len ) <S2SV_ModStart> acl_len ) { <S2SV_ModEnd> uint32_t attrlen, <S2SV_ModStart> int status ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> xdr, OP_GETATTR ) )!= 0 ) return - EIO ; if ( ( status = decode_op_hdr ( xdr, OP_GETACL <S2SV_ModStart>, & attrlen <S2SV_ModEnd> ) )!= <S2SV_ModStart> { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"" <S2SV_ModEnd>, attrlen, <S2SV_ModStart> attrlen ) ; <S2SV_ModEnd> } else status",0
47,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
48,"<S2SV_ModStart> ) ) { if ( snumber ( auth ) ) { <S2SV_ModStart> ; } } } if ( snumber ( tok ) ) { group = stok ( tok, "":"", & perms ) ; if ( group && * group ) { if ( snumber ( group ) ) { gid = ( int ) stoi ( group ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { gid = HTTP -> gid ; } else { gid = groupToID ( group ) ; } } if ( perms && snumber ( perms ) ) { mode = ( int ) stoiradix ( perms, - 1, NULL ) ; } else { mode = 0 ; } if ( gid < 0 || uid < 0 ) { return MPR_ERR_BAD_SYNTAX ; } } else { dirs = auth ; auth = 0 ; } tok = dirs ; for ( tok = sclone ( dirs ) ; ( dir = stok ( tok, "","", & tok ) )!= 0 ; ) { path = httpMakePath ( state -> route, state -> configDir, dir ) ; if ( mprGetPathInfo ( path, & info ) == 0 && info. isDir ) { continue ; }",0
49,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> addr = VPX_MALLOC_L <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; <S2SV_ModEnd> if ( addr,0
50,"<S2SV_ModStart> int res ; <S2SV_ModEnd> long long export_index_table <S2SV_ModStart> long export_index_table [ SQUASHFS_LOOKUP_BLOCKS ( sBlk. s. inodes ) <S2SV_ModEnd> ] ; res <S2SV_ModStart>. lookup_table_start, SQUASHFS_LOOKUP_BLOCKS <S2SV_ModEnd> ( sBlk.",0
51,<S2SV_ModStart> ; } else { <S2SV_ModStart> p1 ) ; },0
52,<S2SV_ModStart> ; if ( global -> codec == NULL ) { return - 1 ; } if ( <S2SV_ModStart> ; # endif <S2SV_ModEnd> for ( argi <S2SV_ModStart> } if ( global -> codec == NULL ) { return - 1 ; } if (,0
53,<S2SV_ModStart> } if ( c -> opt -> option. client || c -> opt -> protocol ) return 0 ; if ( c -> opt -> redirect_addr. names ) return 1 ; if ( <S2SV_ModStart> 1 ; } <S2SV_ModEnd> return 0 ; <S2SV_ModStart> return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
54,"<S2SV_ModStart> ; if ( crypto_memneq <S2SV_ModEnd> ( cmac,",0
55,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> const uint64_t bits_used <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
56,"<S2SV_ModStart> EOFOp 0x07 char * magick_buffer <S2SV_ModEnd> ; Image * <S2SV_ModStart> char * ) magick_buffer <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( count!= 3 ) || ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; <S2SV_ModStart>. x = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. y = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. columns = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. rows = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart> ( count!= 3 ) || ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; <S2SV_ModStart>. x = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. y = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. columns = ReadBlobLSBLong <S2SV_ModEnd>",0
57,"<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> altsetting [ 0 ]. desc. bNumEndpoints < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; error = - EINVAL ; goto err_free_urb ; }",1
58,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
59,"<S2SV_ModStart> * dir = ""/tmp"" <S2SV_ModEnd> ; if (",0
60,<S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_pic_done ) { ps_codec -> i4_pic_done = 1 ; return IHEVCD_INVALID_HEADER ; },0
61,"<S2SV_ModStart> n ] ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; }",0
62,"<S2SV_ModStart> void vp9_setup_dst_planes ( MACROBLOCKD_CONTEXT * xd_ctx <S2SV_ModEnd>, const YV12_BUFFER_CONFIG <S2SV_ModStart> const buffers [ MAX_MB_PLANE <S2SV_ModEnd> ] = { <S2SV_ModStart> const int strides [ MAX_MB_PLANE <S2SV_ModEnd> ] = { <S2SV_ModStart> i ) { MACROBLOCKD_PLANE <S2SV_ModEnd> * const pd <S2SV_ModStart> pd = & xd_ctx <S2SV_ModEnd> -> plane [",0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,<S2SV_ModStart> get_block = ocfs2_get_block <S2SV_ModEnd> ; return __blockdev_direct_IO,0
65,"<S2SV_ModStart> ( f, ""%79s <S2SV_blank> %100s\\n"" <S2SV_ModEnd>, def,",0
66,"<S2SV_ModStart> n ) { <S2SV_ModEnd> int kind ; <S2SV_ModStart> PyCompilerFlags cf ; expr_ty <S2SV_ModEnd> mod ; char <S2SV_ModStart> * str ; <S2SV_ModEnd> assert ( expr_end <S2SV_ModStart> expr_end == ':' ) ; mod = string_object_to_c_ast ( expr_start, expr_end, Py_eval_input, & cf, c -> c_feature_version, c -> c_arena ) ; if (! mod ) return NULL ; Py_ssize_t len = PyUnicode_GET_LENGTH ( o ) ; kind = PyUnicode_KIND ( o ) ; data = PyUnicode_DATA ( o ) ; for ( i = 0 ; i < len ; i ++ ) { if (! Py_UNICODE_ISSPACE ( PyUnicode_READ ( kind, data, i ) ) ) { all_whitespace = 0 ; break ; } } Py_DECREF ( o ) ; if ( all_whitespace ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ; } len = expr_end - expr_start ; str = PyMem_RawMalloc ( len + 3 ) ; if ( str == NULL )",0
67,"<S2SV_ModStart> string ) { return cJSON_FindString <S2SV_ModEnd> ( object -> <S2SV_ModStart> object -> child, string ) <S2SV_ModEnd> ; } <S2SV_null>",0
68,<S2SV_ModStart> size ) ; if ( px -> ft == NULL ) return FALSE ;,0
69,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart>",0
70,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
71,"<S2SV_ModStart> int i ; const <S2SV_ModStart> src -> y_buffer <S2SV_ModEnd>, src -> <S2SV_ModStart> src -> uv_buffer <S2SV_ModEnd>, src -> <S2SV_ModStart> src -> alpha_buffer <S2SV_ModEnd> } ; for",0
72,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; for (,1
73,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
74,<S2SV_ModStart> user ) { cleanup_srcu_struct ( & user -> release_barrier ) ; <S2SV_ModStart> _ipmi_destroy_user ( user <S2SV_ModEnd> ) ; kref_put,0
75,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> sl = strlen,1
76,"<S2SV_ModStart> * for_ch ; <S2SV_ModEnd> REQ ( n <S2SV_ModStart> comp_for ) ; is_async = <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> 0 ) ) == ASYNC ; <S2SV_ModEnd> for_ch = CHILD <S2SV_ModStart> 1 + is_async <S2SV_ModEnd> ; t = <S2SV_ModStart> ( n, 3 <S2SV_ModEnd> + is_async ) <S2SV_ModStart> ( n, 4 <S2SV_ModEnd> + is_async ) <S2SV_ModStart> ( n, 5 <S2SV_ModEnd> + is_async ) <S2SV_ModStart> ( n, 6 <S2SV_ModEnd> + is_async )",0
77,<S2SV_ModStart> NULL ; } if ( src -> curframe < 0 || src -> curframe > BPF_MAX_FUNC_FRAMES ) return - EINVAL ;,0
78,"<S2SV_ModStart> write_mb_modes_kf ( const VP9_COMMON * cm, const MACROBLOCKD * xd, const MODE_INFO * mi, vpx_writer * w ) { const <S2SV_ModStart> * cpi, <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> * mi_8x8, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> w ) { <S2SV_ModEnd> const struct segmentation <S2SV_ModStart> * const mi <S2SV_ModEnd> = mi_8x8 [ <S2SV_ModStart> 0 ] ; <S2SV_ModEnd> const MODE_INFO * <S2SV_ModStart> const above_mi = mi <S2SV_ModEnd> [ - xd <S2SV_ModStart> -> left_available? mi <S2SV_ModEnd> [ - 1 <S2SV_ModStart> segment_id ) ; <S2SV_ModEnd> if ( bsize <S2SV_ModStart> == TX_MODE_SELECT ) { const int num_4x4_w = num_4x4_blocks_wide_lookup [ bsize ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ bsize ] ; int idx, idy ; for ( idx = 0 ; idx < 2 ; idx += num_4x4_w ) { const int block = idy * 2 + idx ; write_intra_mode ( w, mi -> bmi [ block ]. as_mode,",0
79,"<S2SV_ModStart> maxn ) { <S2SV_ModEnd> # ifdef DEBUG <S2SV_ModStart> ; # endif if ( n > maxn ) SWF_error ( ""Action <S2SV_blank> overflow!!"" ) ;",0
80,<S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( & prep -> pp_n ) ;,0
81,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
82,<S2SV_ModStart> zArg ) { assert ( pTable -> nModuleArg >= 0 ) ; <S2SV_ModStart> * ) * <S2SV_ModEnd> 2 + pTable <S2SV_ModStart> pTable -> nModuleArg <S2SV_ModEnd> ; char *,0
83,<S2SV_ModStart> j ] ; if ( j >= ptr_hbe_txposer -> synth_size ) { j = 0 ; } <S2SV_ModStart> j ] ; if ( j >= ptr_hbe_txposer -> synth_size ) { j = 0 ; } <S2SV_ModStart> j ] ; if ( j >= ptr_hbe_txposer -> synth_size ) { j = 0 ; } <S2SV_ModStart> j ] ; if ( j >= ptr_hbe_txposer -> synth_size ) { j = 0 ; } <S2SV_ModStart> j ] ; if ( j >= ptr_hbe_txposer -> synth_size ) { j = 0 ; } <S2SV_ModStart> j ] ; if ( j >= ptr_hbe_txposer -> synth_size ) { j = 0 ; } <S2SV_ModStart> j ] ; if ( j >= ptr_hbe_txposer -> synth_size ) { j = 0 ; } <S2SV_ModStart> j ] ; if ( j >= ptr_hbe_txposer -> synth_size ) { j = 0 ; } <S2SV_ModStart> j ] ; if ( j >= ptr_hbe_txposer -> synth_size ) { j = 0 ; } <S2SV_ModStart> j ] ; if ( j >= ptr_h,0
84,<S2SV_ModStart> -> dmin ; if ( ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { <S2SV_ModStart> p ) ; },0
85,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> bfq_idle_slice_timer_body ( struct <S2SV_ModStart> bfqq -> bfqd <S2SV_ModEnd> ; spin_lock_irqsave ( <S2SV_ModStart> in_service_queue ) { <S2SV_ModEnd> return ; } <S2SV_ModStart> return ; } return false ;,0
86,,1
87,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
88,"<S2SV_ModStart> diffBlock + diffBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } memcpy ( newData + newpos, diffPtr, x ) ; diffPtr += x ; if ( diffPtr <S2SV_ModEnd> > diffBlock + <S2SV_ModStart> diffBlock + diffBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } extraPtr += y ; if ( extraPtr <S2SV_ModEnd> > extraBlock + <S2SV_ModStart> extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } memcpy ( newData + newpos, extraPtr, y ) ; extraPtr += y ; if ( extraPtr + z <S2SV_ModEnd> > extraBlock + <S2SV_ModStart> extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } memcpy ( newData + newpos",0
89,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> np -> tclass ) ; rcu_read_unlock (,0
90,"<S2SV_ModStart> ; if ( MagickMax ( number_pixels, number_data_bands ) < number_pixels ) { exception ( exception, ""Too <S2SV_blank> many <S2SV_blank> images <S2SV_blank> to <S2SV_blank> read"" ) ; return NULL ; } if (",0
91,<S2SV_ModStart> data ) { ( void ) data ;,0
92,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
93,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
94,<S2SV_ModStart> mb_offset ) ; if ( xd -> mbmi. mv_bias_bias!= 0 ) { <S2SV_ModStart> mbmi_offset ) ; },0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
97,<S2SV_ModStart> msicap msicap ; if ( msgnum < sizeof ( msicap ) ) return - EINVAL ;,0
98,"<S2SV_ModStart> -> ptr ; if ( cmd -> flags & REDIS_CMD_DENYPASS ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> authenticated <S2SV_blank> in <S2SV_blank> this <S2SV_blank> context"" ) ; return REDIS_OK ; }",0
99,"<S2SV_ModStart> ; if ( cfg -> g_w == 0 || cfg -> g_h == 0 ) { return VPX_CODEC_ERR_INVALID_ARGS ; } if ( <S2SV_ModStart> VPX_RC_ONE_PASS ) ) { <S2SV_ModStart> ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; return VPX_CODEC_ERR_INVALID_ARGS ; }",0
100,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> vp9_init_plane_quantizers ( cpi,0
101,<S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> info -> si_signo,0
102,"<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; ISOM_DECREASE_SIZE ( ptr, 1 ) <S2SV_ModStart> - 8 ; if ( tmp_strsize < 1 ) return GF_ISOM_INVALID_FILE ;",0
103,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
104,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> -> state == fmode <S2SV_ModEnd> ) return ; <S2SV_ModStart> if ( ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> )!= ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> { if ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> -> state = fmode <S2SV_ModEnd> ; } <S2SV_null>",0
105,"<S2SV_ModStart> read_info ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( ( Image * ) NULL ) ; }",0
106,<S2SV_ModStart> 0 ; } if ( len > UINT32_MAX - elem. in_sg [ 0 ]. iov_len ) { return 0 ; },0
107,"<S2SV_ModStart>, i, <S2SV_ModEnd> JPC_QCX_GETEXPN ( qcd <S2SV_ModStart> ] ), <S2SV_ModEnd> JPC_QCX_GETMANT ( qcd",0
108,<S2SV_ModStart> AV_PIX_FMT_PAL8 ; } else if ( c -> format == CHUNKY ) { avctx -> pix_fmt = AV_PIX_FMT_PAL10 ; },0
109,<S2SV_ModStart> length - 1 <S2SV_ModEnd> ) ; return,1
110,"<S2SV_ModStart> image_noffset ) { if ( noffset == - FDT_ERR_TRUNCATED || noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; }",0
111,"<S2SV_ModStart> ; if (! <S2SV_ModStart>, GFP_KERNEL ) ) { kfree ( state ) ; <S2SV_ModEnd> return - ENOMEM <S2SV_ModStart> - ENOMEM ; }",0
112,"<S2SV_ModStart>, vpx_codec_dec_cfg_t * dec_cfg <S2SV_ModEnd>, vpx_codec_flags_t flags <S2SV_ModStart> ( ( flags & ( VPX_CODEC_USE_XMA | VPX_CODEC_USE_POSTPROC | VPX_CODEC_USE_ERROR_CONCEALMENT ) ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_DECODER ) ) res = VPX_CODEC_INCAPABLE ; else { memset ( ctx, 0, sizeof ( * ctx ) ) ; ctx -> iface = iface ; ctx -> name = iface -> name ; ctx -> priv = NULL ; ctx -> init_flags = flags ; ctx -> config. dec = dec_cfg",0
113,<S2SV_ModStart> TJA1100_CONFIG1_MII_MODE ; value &= ~ TJA1100_CONFIG1_MII_MODE_RMII_25MHZ ; value <S2SV_ModStart> ; value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1100WritePhyReg (,0
114,<S2SV_ModStart> = tos ; ipc. tos = tos ;,0
115,<S2SV_ModStart> VPX_CODEC_CAP_XMA ) ) { <S2SV_ModStart> = VPX_CODEC_INCAPABLE ; } <S2SV_ModStart> VPX_CODEC_CAP_PSNR ) ) { <S2SV_ModStart> = VPX_CODEC_INCAPABLE ; } <S2SV_ModStart> VPX_CODEC_CAP_OUTPUT_PARTITION ) ) { <S2SV_ModStart> = VPX_CODEC_INCAPABLE ; } <S2SV_ModStart> VPX_CODEC_CAP_XMA ) ) { <S2SV_ModStart> = VPX_CODEC_INCAPABLE ; } } <S2SV_ModStart> VPX_CODEC_CAP_XMA ) ) { <S2SV_ModStart> = VPX_CODEC_INCAPABLE ; } },0
116,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
117,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; RESERVE_SPACE",1
118,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ) ; return 0 <S2SV_ModStart> break ; } return error <S2SV_ModEnd> ; } <S2SV_null>,1
119,"<S2SV_ModStart> ; if ( len < 1 ) { r_strbuf_append ( & op -> esil, ""\\0"" ) ; return - 1 ; } if (",0
120,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
121,<S2SV_ModStart> goto trunc ; if ( lshp -> ls_length < sizeof ( struct lsa6_hdr ) ) goto trunc ;,0
122,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { ret = - EFAULT ; break ; } <S2SV_ModEnd> * obuf =",0
123,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
124,<S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ),0
125,"<S2SV_ModStart> costs, vp9_tree * <S2SV_ModStart> ) { const vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> ) ; const vpx_tree_index <S2SV_ModEnd> ii = tree",0
126,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
127,<S2SV_ModStart> & 0xffff ; if (! synth_devs [ dev ] ) return - ENXIO ;,0
128,"<S2SV_ModStart> fadst16 ( const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t <S2SV_ModEnd> x0, s1 <S2SV_ModStart> int x0 = tran_low_t <S2SV_ModEnd> [ 15 ] <S2SV_ModStart> int x1 = tran_high_t <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> int x2 = tran_high_t <S2SV_ModEnd> [ 13 ] <S2SV_ModStart> int x3 = tran_high_t <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> int x4 = tran_high_t <S2SV_ModEnd> [ 4 ] <S2SV_ModStart> int x5 = tran_high_t <S2SV_ModEnd> [ 11 ] <S2SV_ModStart> int x6 = tran_high_t <S2SV_ModEnd> [ 6 ] <S2SV_ModStart> int x7 = tran_high_t <S2SV_ModEnd> [ 7 ] <S2SV_ModStart> int x8 = tran_high_t <S2SV_ModEnd> [ 8 ] <S2SV_ModStart> int x9 = tran_high_t <S2SV_ModEnd> [ 9 ] <S2SV_ModStart> int x10 = tran_low_t <S2SV_ModEnd> [ 5 ] <S2SV_ModStart> int x",0
129,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> flags |= HAS_EDSP <S2SV_ModStart> |= HAS_EDSP ; <S2SV_ModEnd> flags |= HAS_MEDIA <S2SV_ModStart> |= HAS_MEDIA ; <S2SV_ModEnd> flags |= HAS_NEON <S2SV_ModStart> flags |= HAS_NEON ; <S2SV_ModEnd> return flags &,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
131,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> count_segs_sb ( VP9_COMP <S2SV_ModStart> * cpi, TileDataEnc * tile_data <S2SV_ModEnd>, MODE_INFO * <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd>, int * <S2SV_ModStart> bsize ) { TileInfo * tile_info = & tile_data -> tile_info ; <S2SV_ModStart> cm = & tile_data <S2SV_ModEnd> -> common ; <S2SV_ModStart> ) return ; int bw, bh ; const int bs = num_8x8_blocks_wide_lookup [ bsize ], hbs = bs / 2 ; if ( mi_row >= cm -> mi_rows || mi_col >= cm -> mi_cols ) return ; bw = num_8x8_blocks_wide_lookup [ mi <S2SV_ModEnd> -> mbmi. <S2SV_ModStart> = num_8x8_blocks_high_lookup [ mi <S2SV_ModEnd> -> mbmi. <S2SV_ModStart>, tile, mi <S2SV_ModEnd>, no_pred_segcounts, <S2SV_ModStart>, tile, mi <S2SV_ModEnd>, no_pred_segcounts, <S2SV_ModStart>, tile, mi <S2SV_ModEnd> + hbs * <S2SV_ModStart>, tile, mi <S2SV_ModEnd>, no_pred_segcounts, <S2SV_ModStart>, tile, mi <S2SV_ModEnd> + hbs * <S2SV_ModStart>",0
132,<S2SV_ModStart> & CLIENT_CLOSE_AFTER_REPLY ) { if ( c -> flags & CLIENT_CLOSE_AFTER_REPLY ) break ; } <S2SV_ModEnd> if (!,0
133,<S2SV_ModStart> ; get_blocks_flags = ( mpd -> b_state & ( 1 << BH_Mapped ) )? EXT4_GET_BLOCKS_CREATE : 0 <S2SV_ModEnd> ; if (,0
134,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart>, handle, hints, <S2SV_ModStart> p -> ai_flags <S2SV_ModEnd>, & p <S2SV_ModStart> p -> ai_family <S2SV_ModEnd>, & p <S2SV_ModStart> p -> ai_socktype <S2SV_ModEnd>, p -> <S2SV_ModStart> -> ai_protocol, <S2SV_ModEnd> p -> ai_addrlen <S2SV_ModStart>, NULL, <S2SV_ModEnd> & canonnamelen, <S2SV_ModStart> } if (! p ) { ret = OE_EAI_MEMORY ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval == 1 ) break ; if ( retval!= - 1 || oe_errno!= OE_ENAMETOOLONG ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( oe_errno ) ; } if ( p -> ai_family == AF_INET || p -> ai_socktype == SOCK_STREAM ) { ret = OE_EAI_MEMORY ; goto done ; } if ( p -> ai_addrlen > sizeof ( struct oe_addrinfo ) ) { ret = OE_EAI_MEMORY ; goto done ; } if ( p -> ai_addrlen > sizeof ( struct oe_addrinfo )",0
135,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
136,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
137,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static void <S2SV_ModEnd> set_registers ( pegasus_t <S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return ; if (! buf ) return <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
138,"<S2SV_ModStart> asdl_seq * body, const char * name <S2SV_ModStart> = body ; p -> v. Module. name = name ;",0
139,"<S2SV_ModStart>, int64_t ts_end <S2SV_ModEnd> ) { struct <S2SV_ModStart> >> 4 ; <S2SV_ModEnd> if ( ctx <S2SV_ModStart> write_idx ) ; <S2SV_ModEnd> buf -> ts_start",0
140,"<S2SV_ModStart> method == LPF_PICK_FROM_Q || method == LPF_PICK_FROM_SUBIMAGE <S2SV_ModStart> int q = vp9_qindex_to_ac_quant <S2SV_ModEnd> ( cm -> <S2SV_ModStart> int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; if ( cm -> frame_type == KEY_FRAME ) filt_guess -= 4 ; lf -> filter_level = clamp ( filt_guess, min_filter_level, max_filter_level ) ; } else { search_filter_level ( sd, cpi, method == LPF_PICK_FROM_SUBIMAGE ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
141,<S2SV_ModStart> case BTA_DM_DISABLE_EVT : if ( p_data -> enable. status == BT_STATUS_SUCCESS ) { <S2SV_ModStart> status ) ; },0
142,"<S2SV_ModStart> int a = strtol <S2SV_ModEnd> ( fmt,",0
143,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
144,"<S2SV_ModStart> vpx_codec_err_t res ; vpx_alg_priv_t * priv ; <S2SV_ModStart> ; else { priv = ctx -> priv -> alg_priv ; <S2SV_ModStart>. decode ( <S2SV_ModEnd> priv, data",0
145,"<S2SV_ModStart> inode * inode, const struct iso_directory_record * directory ) { struct isofs_sb_info * sbi = ISOFS_SB ( inode -> i_sb ) ; unsigned long bufsize = ISOFS_BUFFER_SIZE ( inode ) ; unsigned long block ; int high_sierra = sbi -> s_high_sierra ; struct buffer_head * bh = NULL ; struct iso_directory_record * de ; struct iso_inode_info * ei = ISOFS_I ( inode ) ; int ret = - EIO ; block = ei -> i_iget5_block ; bh = ( struct buffer_head * ) ( inode -> i_sb, block ) ; if (! bh ) goto out_badread ; offset = ei -> i_iget5_offset ; de = ( struct iso_directory_record * ) ( inode -> i_sb -> b_data + offset ) ; de_len = * ( unsigned char * ) de ; if ( offset + de_len > bufsize ) { int frag1 = bufsize - offset ; tmpde = kmalloc ( de_len, GFP_KERNEL ) ; if ( tmp",0
146,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> ) ; } outpos += strlen ( outputbuffer ) ;",0
147,<S2SV_ModStart> self ) { if (! self ) { return ; },0
148,<S2SV_ModStart> ( ) ; if (! a ) return 0 ; <S2SV_ModStart> ] ) ; <S2SV_ModEnd> suffix_object ( p,0
149,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; Py_ssize_t i ; if ( _PyObject_HasAttrId ( obj, & PyId_type_ignores ) ) { int res ; Py_ssize_t len ; Py_ssize_t i <S2SV_ModStart> ++ ) { asdl_seq_ty value ; res = obj2ast_stmt ( PyList_GET_ITEM ( tmp, i ), & value, arena ) ; if ( res!= 0 ) goto failed ; if ( len!= PyList_GET_SIZE ( tmp ) ) { PyErr_SetString ( PyExc_RuntimeError, ""Module <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> changed <S2SV_blank> size <S2SV_blank> during <S2SV_blank> iteration"" ) ; goto failed ; } asdl_seq_SET ( body, i, value ) ; } Py_CLEAR ( tmp ) ; } else { int res ; Py_ssize_t len ; Py_ssize_t i ; tmp = _PyObject_GetAttrId ( obj, & PyId_body ) ; if ( tmp == NULL ) goto failed ; if (! PyList_Check ( tmp ) ) { PyErr_Format ( Py",0
150,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
151,<S2SV_ModStart> ; if ( msg_sys -> msg_name == NULL ) { err = - ENOMEM ; goto out_freeiov ; } if ( <S2SV_ModStart> ; if ( msg_sys -> msg_name == NULL ) { err = - ENOMEM ; goto out_freeiov ; } if (,0
152,"<S2SV_ModStart> buffer_head * dibh <S2SV_ModEnd> ; u64 bn <S2SV_ModStart> unsigned ptrs_per_blk ; int eob = 0 ; enum alloc_state state ; __be64 * ptr ; __be64 zero_bn = 0 ; BUG_ON ( sheight < 1 ) ; BUG_ON ( dibh == NULL ) ; gfs2_trans_add_bh ( ip -> i_gl, dibh, 1 ) ; if ( height == sheight ) { struct buffer_head * bh ; ptr = metapointer ( height - 1, mp ) ; bh = mp -> mp_bh [ height - 1 ] ; dblks = gfs2_extent_length ( bh -> b_data, bh -> b_size, ptr, maxlen, & eob ) ; BUG_ON ( dblks < 1 ) ; state = ALLOC_DATA ; } else { ptrs_per_blk = height > 1? sdp -> sd_inptrs : sdp -> sd_diptrs ; dblks = min ( maxlen, ptrs_per_blk - mp -> mp_list [ height - 1 ] ) ; if ( height == ip",0
153,"<S2SV_ModStart>, ""Codec: <S2SV_blank> %s\\n"", global -> codec? <S2SV_ModStart> interface ( ) ) : vpx_codec_iface_name ( global -> codec? global -> codec -> interface ( ) : NULL <S2SV_ModStart> -> use_i420? ""I420"" : ""YV12"" ) ; fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; fprintf ( stderr, ""Destination <S2SV_blank> file: <S2SV_blank> %s\\n"", stream -> config. out_fn ) ; fprintf ( stderr, ""Encoder <S2SV_blank> parameters:\\n"" ) ; SHOW ( g_usage ) ; SHOW ( g_threads ) ; SHOW ( g_profile ) ; SHOW ( g_w ) ; SHOW ( g_h ) ; SHOW ( g_timebase. num ) ; SHOW ( g_timebase. den ) ; SHOW ( g_error_resilient ) ; SHOW ( g_pass ) ; SHOW ( g_lag_in_frames ) ; SHOW ( rc_dropframe_thresh ) ; SHOW ( rc_resize_allowed",0
154,<S2SV_ModStart> -> psvi ; if ( target -> doc -> attributes == NULL ) { xmlFreeDocProp ( target -> doc -> attributes ) ; target -> doc -> attributes = NULL ; target -> properties = NULL ; },0
155,"<S2SV_ModStart> 0 ) { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } } else { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } } free ( fname ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> } else if <S2SV_ModStart> 0 ) { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } <S2SV_ModStart> 0 ) { FILE * fp = fopen ( fname, ""w"" )",0
156,<S2SV_ModStart> msix_tab_size ) { <S2SV_ModEnd> bzero ( msixcap,1
157,<S2SV_ModStart> ; if ( <S2SV_ModEnd> js_regexec ( re,0
158,"<S2SV_ModStart> case OFreshOID : Assert ( <S2SV_ModEnd> Int_val ( Field <S2SV_ModStart>, 1 ) == 0 ) ; <S2SV_ModEnd> caml_set_oo_id ( (",0
159,"<S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; ksz8851WriteReg <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( interface, KSZ8851_ISR ) ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } } if ( ( isr & ISR_TXIS )!= 0 ) { ksz8851WriteReg ( interface, KSZ8851_ISR, ISR_TXIS ) ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } } if ( ( isr & ISR_RXIS )!= 0 ) { ksz8851WriteReg ( interface, <S2SV_ModStart> ( interface, KSZ",0
160,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_quantization ( VP9_COMMON <S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
161,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> p_buf, msglen )",1
162,"<S2SV_ModStart> fp ) ; if ( fp == NULL ) { log_error ( ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s: <S2SV_blank> %s"", __func__, file, strerror ( errno ) ) ; goto sslerr ; }",0
163,"<S2SV_ModStart> ( ) ; strncat <S2SV_ModEnd> ( t1_buf_array, <S2SV_ModStart> t1_buf_array, t1_line_array, strlen ( t1_line_array )",0
164,"<S2SV_ModStart> int mi_col, MACROBLOCKD * xd, <S2SV_ModStart> int bsl = b_width_log2_lookup [ bsize ] <S2SV_ModEnd>, hbs = <S2SV_ModStart> ) / 4 <S2SV_ModEnd> ; assert ( <S2SV_ModStart> case PARTITION_NONE : <S2SV_ModEnd> if ( mi_row <S2SV_ModStart> case PARTITION_VERT : <S2SV_ModEnd> if ( mi_col <S2SV_ModStart> case PARTITION_VERT : <S2SV_ModEnd> if ( mi_col <S2SV_ModStart> case PARTITION_VERT : <S2SV_ModEnd> if ( mi_col <S2SV_ModStart> case PARTITION_HORZ : <S2SV_ModEnd> if ( xd <S2SV_ModStart> case PARTITION_NONE : <S2SV_ModEnd> if ( xd <S2SV_ModStart> case PARTITION_VERT : <S2SV_ModEnd> if ( xd <S2SV_ModStart> case PARTITION_HORZ : <S2SV_ModEnd> if ( xd <S2SV_ModStart> case PARTITION_NONE : <S2SV_ModEnd> if ( mi_row <S2SV_ModStart> case PARTITION_NONE : <S2SV_ModEnd> if ( xd <S2SV_ModStart> case PARTITION_NONE : <S2SV_ModEnd> if ( xd <S2SV_ModStart> case PARTITION_NONE : <S2SV_ModEnd> if ( xd <S2SV_ModStart> case PARTITION_NONE : <S2SV_ModEnd> if ( xd <S2SV_ModStart> case PARTITION_NONE : <S2SV_ModEnd> if ( xd <S2SV_ModStart> case PARTITION_NONE : <S2SV_ModEnd> if ( xd <S2SV_ModStart> case PARTITION_NONE : <S2SV_ModEnd> if ( xd <S2SV_ModStart> case PARTITION_NONE : <S2SV_ModEnd> if ( xd <S2SV_ModStart> case PARTITION_NONE : <S2SV_ModEnd> if (",0
165,"<S2SV_ModStart> key_ref ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) { ret = - ENOKEY ; goto error2 ; }",1
166,<S2SV_ModStart> ps_dec ) ; <S2SV_ModEnd> ps_dec -> u1_first_slice_is_aud <S2SV_ModStart> ps_dec ) ; <S2SV_ModEnd> ps_dec -> u1_first_slice_is_aud <S2SV_ModStart> ps_dec ) ; <S2SV_ModEnd> ps_dec -> u1_first_slice_is_aud <S2SV_ModStart> ps_dec ) ; <S2SV_ModEnd> ps_dec -> u1_first_slice_is_aud <S2SV_ModStart> ps_dec ) ; <S2SV_ModEnd> ps_dec -> u1_first_slice_is_aud <S2SV_ModStart> ps_dec ) ; <S2SV_ModEnd> ps_dec -> u1_first_slice_is_aud <S2SV_ModStart> ps_dec ) ; <S2SV_ModEnd> ps_dec -> u1_first_slice_is_aud <S2SV_ModStart> ps_dec ) ; <S2SV_ModEnd> ps_dec -> u1_first_slice_is_aud <S2SV_ModStart> ps_dec ) ; <S2SV_ModEnd> ps_dec -> u1_first_slice_is_aud <S2SV_ModStart> ps_dec ) ; <S2SV_ModEnd> ps_dec -> u1_first_slice_is_aud <S2SV_ModStart> ps_dec ) ; <S2SV_ModEnd> ps_dec -> u1_first_slice_is_aud <S2SV_ModStart> ps_dec ) ; <S2SV_ModEnd> ps_dec -> u1_first_slice_is_aud <S2SV_ModStart> ps,0
167,<S2SV_ModStart> var_off ) ; if (! src_known ||! dst_known ) return - EINVAL ; <S2SV_ModStart> var_off ) ; if (! src_known ||! dst_known ) return - EINVAL ;,0
168,<S2SV_ModStart> ; if (! pTcon ) { cifs_put_tcon ( pTcon ) ; rc = - ENOMEM ; goto lookup_out ; } if (,0
169,<S2SV_ModStart> -> opt. opt.,0
170,"<S2SV_ModStart> number_of_frames, number_of_keyframes <S2SV_ModEnd> ; int i <S2SV_ModStart> double y_scale ; SvcInternal_t <S2SV_ModEnd> * const si <S2SV_ModStart> svc_ctx ) ; <S2SV_ModEnd> if ( si <S2SV_ModStart> svc_ctx ) ; number_of_keyframes <S2SV_ModEnd> = si -> <S2SV_ModStart> = si -> number_of_keyframes <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( number_of_keyframes <S2SV_ModEnd> <= 0 ) <S2SV_ModStart> ""\\n"" ) ; <S2SV_ModEnd> for ( i <S2SV_ModStart> { number_of_frames = number_of_keyframes <S2SV_ModEnd> ; if (",0
171,<S2SV_ModStart> = new_cols ; <S2SV_ModEnd> screen -> sb_buffer,0
172,"<S2SV_ModStart> n ) { <S2SV_ModEnd> char * literal_start <S2SV_ModStart> * str ; for ( ; * str < end ; ( * str ) ++ ) { char ch = * * str ; if (! in_named_escape && ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 1 ; } else if ( in_named_escape && ch == '}' ) { in_named_escape = 0 ; } else if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } if ( ch == '{' || ch == '}' ) { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; return - 1 ; } } if ( ch == '}' ) { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; return - 1 ; } } break ; }",0
173,"<S2SV_ModStart> pd, g_settings_dump_location, pd -> dd_dirname",0
174,<S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ),0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
176,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mv_stride <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if",0
177,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> left_context ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> + mi_col ; const <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> cm -> mi_grid_visible <S2SV_ModEnd> ; MODE_INFO * <S2SV_ModStart> MODE_INFO * * prev <S2SV_ModEnd> = cm -> <S2SV_ModStart> cm -> prev_mi_grid_visible <S2SV_ModEnd> ; BLOCK_SIZE bsize <S2SV_ModStart> ; BLOCK_SIZE bsize <S2SV_ModEnd> ; cpi -> <S2SV_ModStart> = UINT_MAX ; <S2SV_ModEnd> switch ( cpi <S2SV_ModStart>, tile, mi <S2SV_ModEnd>, mi_col, <S2SV_ModStart>, mi_col, BLOCK_64X <S2SV_ModEnd>, & dummy_rate <S2SV_ModStart>, tile, mi <S2SV_ModEnd>, mi_col, <S2SV_ModStart>, tile, mi <S2SV_ModEnd>, mi_col, <S2SV_ModStart>, tile, mi <S2SV_ModEnd>, mi_col, <S2SV_ModStart>, tile, mi <S2SV_ModEnd>, mi_col, <S2SV_ModStart>, tile, mi <S2SV_ModEnd>, mi_col, <S2SV_ModStart>, tile, mi <S2SV_ModEnd>, mi_col, <S2SV_ModStart>, tile, mi <S2SV_ModEnd>, mi_col, <S2SV_ModStart>, tile, mi <S2SV_ModEnd>, mi_col",0
178,"<S2SV_ModStart> ; dh = skb_header_pointer_unaligned <S2SV_ModEnd> ( skb,",0
179,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static void <S2SV_ModEnd> ip_options_get_finish ( struct <S2SV_ModStart> ip_options_get_finish ( struct ip_options_rcu <S2SV_ModEnd> * net, <S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> * opt, u32 <S2SV_ModEnd> optlen ) { <S2SV_ModStart> & 3 ) rcu_assign_pointer ( <S2SV_ModStart> __data [ optlen <S2SV_ModEnd> ] = IPOPT_END <S2SV_ModStart> = IPOPT_END ; rcu_assign_pointer ( <S2SV_ModStart> = optlen ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
180,"<S2SV_ModStart> ; if ( strcmp ( connection, ""Upgrade"" ) == 0 ) { const char * ws_version = http_request_get_header ( info -> request, ""Sec-WebSocket-Version"" ) ; if ( ws_version == NULL || strcmp ( ws_version, ""13"" )!= 0 ) goto error ; const char * ws_upgrade = http_request_get_header ( info -> request, ""Sec-WebSocket-Upgrade"" ) ; if ( ws_upgrade == NULL || strcasecmp ( ws_upgrade, ""Upgrade"" ) == 0 ) { const char * ws_version = http_request_get_header ( info -> request, ""Sec-WebSocket-Version"" ) ; if ( ws_version == NULL || strcmp ( ws_version, ""13"" )!= 0 ) goto error ; const char * ws_upgrade = http_request_get_header ( info -> request, ""Sec-WebSocket-Upgrade"" ) ; if ( ws_upgrade == NULL || strcasecmp ( ws_upgrade, ""Upgrade"" ) == 0 ) { const char * ws_upgrade = http_request_get_header ( info -> request, ""Sec-WebSocket-Upgrade"" ) ; if ( ws_upgrade ==",0
181,"<S2SV_ModStart> * findalldevs_if ; uint32 nif = 0 ; if ( pcap_findalldevs ( & alldevs, errmsgbuf ) == - 1 ) goto error ; if ( alldevs == NULL ) { if ( rpcap_senderror ( pars -> sockctrl, ver, PCAP_ERR_NOREMOTEIF, ""No <S2SV_blank> interfaces <S2SV_blank> found! <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> libpcap/WinPcap <S2SV_blank> is <S2SV_blank> properly <S2SV_blank> installed"" "" <S2SV_blank> and <S2SV_blank> you <S2SV_blank> have <S2SV_blank> the <S2SV_blank> right <S2SV_blank> to <S2SV_blank> access <S2SV_blank> to <S2SV_blank> the <S2SV_blank> remote <S2SV_blank> device."", errbuf ) == - 1 ) { rpcapd_log ( LOGPRIO_ERROR, ""Send <S2SV_blank> to <S2SV_blank> client <S2SV_blank> failed: <S2SV_blank> %s"", errbuf ) ; return - 1 ; } return 0 ; } for ( d = alldevs ; d!= NULL ; d = d -> next ) { nif ++ ; if ( d -> description ) <S2SV_ModStart> d -> description <S2SV_ModEnd> ) ; if <S2SV_ModStart> d -> name <S2SV_ModEnd> ) ; plen <S2SV_ModStart> struct rpcap_findalldevs_if ) ; if ( sock_bufferize ( NULL, sizeof ( struct rpcap_header ), NULL, & sendbufidx",0
182,"<S2SV_ModStart> path, client_uid <S2SV_ModEnd> ) ; if",0
183,<S2SV_ModStart> 1 ) ; ++ x <S2SV_ModEnd> ) { index,0
184,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
185,"<S2SV_ModStart> image ) ; if ( image == DestroyImageList ( image ) ) ThrowReaderException ( CorruptImageError, ""MemoryAllocationFailed"" ) ;",0
186,"<S2SV_ModStart> in_cksum ( bp, len <S2SV_ModStart> in_cksum ( bp, len",0
187,"<S2SV_ModStart>! ptrace_has_cap ( task_cred ( task ) <S2SV_ModEnd> -> user_ns,",0
188,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
189,<S2SV_ModStart> -> s_sei_params. <S2SV_ModEnd> i1_sei_parameters_present_flag = 1,0
190,<S2SV_ModStart> ; sde = kzalloc <S2SV_ModEnd> ( num_engines * <S2SV_ModStart> ; sde = kzalloc <S2SV_ModEnd> ( num_engines * <S2SV_ModStart> ; sde = kzalloc <S2SV_ModEnd> ( num_engines * <S2SV_ModStart> ; sde = kzalloc <S2SV_ModEnd> ( num_engines * <S2SV_ModStart> ; sde = kzalloc <S2SV_ModEnd> ( num_engines * <S2SV_ModStart> ; sde = kzalloc <S2SV_ModEnd> ( num_engines * <S2SV_ModStart> ; sde = kzalloc <S2SV_ModEnd> ( num_engines * <S2SV_ModStart> ; sde = kzalloc <S2SV_ModEnd> ( num_engines * <S2SV_ModStart> ; sde = kzalloc <S2SV_ModEnd> ( num_engines * <S2SV_ModStart> ; sde = kzalloc <S2SV_ModEnd> ( num_engines * <S2SV_ModStart> ; sde = kzalloc <S2SV_ModEnd> ( num_engines * <S2SV_ModStart> ; sde = kzalloc <S2SV_ModEnd> ( num_engines * <S2SV_ModStart> ; sde = kzalloc <S2SV_ModEnd> ( num_engines * <S2SV_ModStart> ; sde = kzalloc <S2SV_ModEnd> ( num_engines * <S2SV_ModStart> ; sde = kzalloc <S2SV_ModEnd> ( num_engines * <S2SV_ModStart> ; sde = kzalloc <S2SV_ModEnd> ( num_engines * <S2SV_ModStart> ; sde = kzalloc <S2SV_ModEnd> ( num_engines,0
191,"<S2SV_ModStart> * name, my_bool <S2SV_ModEnd> rep_quick ) {",0
192,"<S2SV_ModStart> ) ; } if ( pcount > INT32_MAX / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", pcount, INT32_MAX ) ) ) ;",0
193,"<S2SV_ModStart> val ) ; if (! <S2SV_ModStart>, val ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> invalid <S2SV_blank> variable"", r -> name )",0
194,"<S2SV_ModStart> ) ) { if ( clen > sizeof ( c -> buf ) ) { return bad_request ( c, 400, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( clen > sizeof ( c -> buf ) ) { return bad_request ( c, 400, __LINE__ ) ; }",0
195,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_high_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> 256 ] ; tran_high_t <S2SV_ModEnd> * outptr = <S2SV_ModStart> & out [ 16 <S2SV_ModEnd> ] ; int",0
196,"<S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( new_data, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( new_data,",0
197,"<S2SV_ModStart> '\\0' ) ; size_t filename_len = <S2SV_ModEnd> strlen ( filename <S2SV_ModStart> ) + 5 ; char * temp_filename = osi_calloc ( filename_len <S2SV_ModStart> if (! filename_len <S2SV_ModEnd> ) { LOG_ERROR <S2SV_ModStart> node ) ; if ( strlen ( section -> name ) + 1 + strlen ( entry -> value ) > filename_len ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } <S2SV_ModStart> ename ) ; if ( strlen ( entry -> key ) + 1 + strlen ( entry -> value ) > filename_len ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } <S2SV_ModStart> sections ) ) { <S2SV_ModStart> fp ) ; } <S2SV_ModStart> fp ) ; <S2SV_ModEnd> if ( chmod",0
198,"<S2SV_ModStart> ( ndo, ""%s"", vtp_header_values [ tlv_value ] ) ) ; tptr += VTP_HEADER_LEN ; ND_TCHECK2 ( * tptr, len ) ; ND_PRINT ( ( ndo, ""%s"", vtp_header_values [ tlv_value ] ) ) ; tptr += len ; ND_TCHECK2 ( * tptr, len ) ; ND_PRINT ( ( ndo, ""%s"", vtp_header_values [ tlv_value ] ) ) ; tptr += len ; ND_TCHECK2 ( * tptr, len ) ; ND_TCHECK2 ( * tptr, len ) ; ND_PRINT ( ( ndo, ""%s"", vtp_header_values [ tlv_value ] ) ) ; tptr += len ; ND_TCHECK2 ( * tptr, len ) ; ND_PRINT ( ( ndo, ""%s"", vtp_header_values [ tlv_value ] ) ) ; tptr += len ; ND_TCHECK2 ( * tptr, len ) ; ND_PRINT",0
199,"<S2SV_ModStart> userData, target <S2SV_ModEnd> ) ; ctxt",0
200,"<S2SV_ModStart> ( ) ; size_t <S2SV_ModEnd> rv = Socket_print <S2SV_ModStart> ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %lu\\r\\n"" <S2SV_ModEnd> ""%s"" ""\\r\\n"" ""%s""",0
201,"<S2SV_ModStart> ) ; } if ( safe_chown ( dest, getuid ( ), getgid ( ) ) < 0 ) errExit ( ""safe_chown"" ) ; if ( safe_chmod ( dest, S_IRUSR | S_IWUSR ) < 0 ) errExit ( ""safe_chmod"" ) ; <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> unlink ( src",0
202,<S2SV_ModStart>!= BFA_STATUS_OK ) { kfree ( fcstats ) ; <S2SV_ModStart> return NULL ; },1
203,"<S2SV_ModStart> -> x = F_MIN ( <S2SV_ModEnd> value -> x <S2SV_ModStart> -> x ), 1.0f <S2SV_ModEnd> ) ; value <S2SV_ModStart> -> y = F_MIN ( <S2SV_ModEnd> value -> y <S2SV_ModStart> -> y ), 1.0f <S2SV_ModEnd> ) ; value <S2SV_ModStart> -> z = F_MIN ( <S2SV_ModEnd> value -> z <S2SV_ModStart> -> z = 1.0f <S2SV_ModEnd> ; } <S2SV_null>",0
204,<S2SV_ModStart> ; rec -> <S2SV_ModEnd> sasl_password = src,0
205,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
206,"<S2SV_ModStart> o, datao ; if ( exif_mnote_data_canon_check ( n ) ) return",0
207,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> testflag & T_DESCRIPT ) &&! ( param -> testflag & ( T_READONLY | T_READONLY ) ),0
208,"<S2SV_ModStart> olen ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> long hex ; <S2SV_ModEnd> if (! <S2SV_ModStart> hex ) ; if (! <S2SV_ModEnd> Curl_convert_from_network ( handle <S2SV_ModStart>, 1 ) <S2SV_ModEnd> ) { free",0
209,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
210,<S2SV_ModStart> ; def -> <S2SV_ModEnd> session_setup = usm_session_init,0
211,"<S2SV_ModStart> NULL ; return <S2SV_ModEnd> match ( prog <S2SV_ModStart> eflags, sub, 0",1
212,<S2SV_ModStart> idx ] ; <S2SV_ModEnd> switch ( action <S2SV_ModStart> ) ; } <S2SV_ModEnd> return SNMP_ERR_NOERROR ;,0
213,<S2SV_ModStart> pixels ++ ; if ( i >= ( ssize_t ) number_pixels ) return ( i ) ;,0
214,<S2SV_ModStart> timer ) ; spin_lock_irq ( & slave_active_lock ) ; <S2SV_ModStart> open_list ) { <S2SV_ModEnd> _snd_timer_stop ( slave <S2SV_ModStart> = NULL ; list_del_init ( & slave -> ack_list ) ; } spin_unlock <S2SV_ModEnd> ( & slave_active_lock <S2SV_ModStart> slave_active_lock ) ; <S2SV_ModEnd> mutex_unlock ( &,0
215,<S2SV_ModStart> -> u1_dpb_commands_read ) { <S2SV_ModStart> ps_dec ) ; } else { ps_dec -> u4_bitoffset = 0 ; },0
216,"<S2SV_ModStart> decode ) { uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > info -> rasterSize || widthOverflow > 0 || heightOverflow > 0 ) { void * tmpRasterBits = reallocarray ( info -> rasterBits, <S2SV_ModEnd> gifFilePtr -> Image <S2SV_ModStart> Image. Width * <S2SV_ModEnd> gifFilePtr -> Image <S2SV_ModStart> Image. Height, sizeof ( uint_fast32_t ) ) ; memset ( tmpRasterBits, 0, sizeof ( uint_fast32_t ) * newRasterSize ) <S2SV_ModEnd> ; if (",0
217,<S2SV_ModStart> validator -> user ) || cherokee_buffer_is_empty ( & conn -> validator -> passwd,0
218,<S2SV_ModStart> bus ] ; if ( bi == NULL ) return <S2SV_ModEnd> ; si =,0
219,"<S2SV_ModStart>, timeo ) <S2SV_ModEnd> ; if (",1
220,<S2SV_ModStart> += 9 ; ( <S2SV_ModStart> isspace ( * ( s + 9 ) <S2SV_ModEnd> ) ; s <S2SV_ModStart> * t && ( <S2SV_ModStart> isspace ( * ( t + 1 ) ) ||! isdigit ( * ( t + 1 ) ) <S2SV_ModEnd> ) ) t,0
221,"<S2SV_ModStart>. active_set ; if ( uipc_main. read_set == UINT_MAX ) { BTIF_TRACE_EVENT ( ""UIPC <S2SV_blank> READ <S2SV_blank> THREAD <S2SV_blank> EXITING"" ) ; uipc_main_cleanup ( ) ; uipc_main. tid = 0 ; BTIF_TRACE_EVENT ( ""UIPC <S2SV_blank> READ <S2SV_blank> THREAD <S2SV_blank> DONE"" ) ; break ; }",0
222,<S2SV_ModStart> msixcap msixcap ; if <S2SV_ModEnd> ( msgnum >= <S2SV_ModStart> msix_table_init ( dev <S2SV_ModEnd> ) ; assert,0
223,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",1
224,<S2SV_ModStart> == NULL ) return KRB5KDC_ERR_PREAUTH_FAILED <S2SV_ModEnd> ; status = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> X509_NAME_free ( is,0
225,<S2SV_ModStart> <S2SV_null> <S2SV_null> static MV_REFERENCE_FRAME <S2SV_ModEnd> select_tx_mode ( const <S2SV_ModStart> cpi ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; <S2SV_ModStart> lossless ) { frame_type = get_frame_type ( cpi ) ; <S2SV_ModStart> else if ( frame_type <S2SV_ModEnd> == 0 ) <S2SV_ModStart> else { if ( <S2SV_ModStart> == USE_LARGESTALL ) <S2SV_ModEnd> return ALLOW_32X32 ; <S2SV_ModStart> else if ( frame_type <S2SV_ModEnd> == USE_FULL_RD ),0
226,<S2SV_ModStart> ) ; } if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT,0
227,<S2SV_ModStart> buf1 -> size > <S2SV_ModEnd> buf2 -> size,0
228,<S2SV_ModStart> ) + size ; if ( unlikely (! sz ) ) return NULL,0
229,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,1
230,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs,",0
231,"<S2SV_ModStart> fd, EPOLLIN | EPOLLET",0
232,<S2SV_ModStart> ( ) ; errors += test_url_formatting ( ) ;,0
233,<S2SV_ModStart> -> lun ) sas_eh_finish_cmd <S2SV_ModEnd> ( cmd ),1
234,"<S2SV_ModStart>, end_col_offset ; if ( TYPE ( CHILD ( n, name_i + 1 ) ) == TYPE_COMMENT ) return NULL ; <S2SV_ModStart> 2 ; } if ( TYPE ( CHILD ( n, name_i + 2 ) ) == TYPE_COMMENT ) return NULL ; <S2SV_ModStart> ( is_async ) { if ( TYPE ( CHILD ( n, name_i + 4 ) ) == TYPE_COMMENT ) return NULL ; <S2SV_ModStart> returns, LINENO ( n0 ), n0 <S2SV_ModEnd> -> n_col_offset, <S2SV_ModStart> c_arena ) ; } else { if ( TYPE ( CHILD ( n, name_i + 4 ) ) == TYPE_COMMENT ) return NULL ; body = ast_for_comment ( c, CHILD ( n, name_i + 4 ) ) ; if (! body ) return NULL ; get_last_end_pos ( body, & end_lineno, & end_col_offset ) ; if ( TYPE ( CHILD ( n, name_i + 5 ) ) == TYPE_COMMENT ) return NULL ; body = ast_for_comment ( c, CHILD ( n, name_i + 5 ) ) ; if (! body ) return",0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,<S2SV_ModStart> ; if ( WPG_Palette. StartIndex >= WPG_Palette. NumOfEntries ) break ; if (,0
237,,1
238,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
239,"<S2SV_ModStart> if ( position >= <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> headend, 1, position - psf -> headend, psf ) ; psf -> headindex = position ; break ; case SEEK_CUR : if ( psf -> headindex + position < 0 ) break ; if ( psf -> headindex >= SIGNED_SIZEOF ( psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; if ( psf -> headindex + position <= psf -> headend ) { psf -> headindex = psf -> headend ; psf_fseek ( psf, position, SEEK_CUR ) ; break ; } ; if ( psf -> headindex + position <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> headend <S2SV_ModEnd>, 1, <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> headend <S2SV_ModEnd>, 1, <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> headend <S2SV_ModEnd>, 1, <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> headend <S2SV_ModEnd>, 1,",0
240,<S2SV_ModStart> u4_ofst ) ; ps_cabac -> u4_cab_index = 0 ;,0
241,<S2SV_ModStart> ; } } if ( off < ctx -> size && CH ( off )!= _T ( '\\0' ) ) { ret = 1 ; break ; },0
242,<S2SV_ModStart> perf_event_context * ctx <S2SV_ModEnd> ; struct task_struct <S2SV_ModStart> task_struct * task ; ctx = perf_event_ctx_lock ( event ) ; task = perf_event_ctx_get_task ( event ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> lock ) ; perf_event_ctx_unlock ( event ) <S2SV_ModEnd> ; } raw_spin_unlock_irq,0
243,<S2SV_ModStart> -> post_proc_flag = <S2SV_ModEnd> ( ctx -> <S2SV_ModStart>. noise_level ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
244,"<S2SV_ModStart> ( struct olsr_msg4 ) ) ; ND_TCHECK2 ( * tptr, sizeof ( struct olsr_msg6",0
245,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vpx_usec_timer_start ( & <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,1
246,"<S2SV_ModStart> ( stderr, ""Error: <S2SV_blank>.Xauthority <S2SV_blank> is <S2SV_blank> a <S2SV_blank> symlink <S2SV_blank> file\\n"" <S2SV_ModEnd> ) ; exit <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> copy_file ( src <S2SV_ModStart> dest ) ; <S2SV_ModEnd> fs_logger2 ( ""clone""",0
247,<S2SV_ModStart> ; sfb = <S2SV_ModEnd> ptr_hbe_txposer -> sfb_buf <S2SV_ModStart> ptr_hbe_txposer -> sfb_buf [ sfb ] <S2SV_ModEnd> ; sfb =,0
248,"<S2SV_ModStart> prov_spec = parsed_require_line ; const lua_authz_provider_args * args <S2SV_ModStart> r ) ; args = prov_spec -> args ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> args ) { <S2SV_ModStart> ( L, <S2SV_ModEnd> args -> nelts <S2SV_ModStart> ( APLOG_MARK, APLOG_ERR <S2SV_ModEnd>, 0, <S2SV_ModStart>, APLOGNO ( 02318 <S2SV_ModEnd> ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> \'%s\' <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> function)"", <S2SV_ModStart> ( APLOG_MARK, APLOG_ERR <S2SV_ModEnd>, 0, <S2SV_ModStart> ( APLOG_MARK, APLOG_CRIT <S2SV_ModEnd>, 0, <S2SV_ModStart> ( APLOG_MARK, APLOG_ERR <S2SV_ModEnd>, 0, <S2SV_ModStart> ( APLOG_MARK, APLOG_ERR <S2SV_ModEnd>, 0, <S2SV_ModStart> ( APLOG_MARK, APLOG_CRIT <S2SV_ModEnd>, 0, <S2SV_ModStart> ( APLOG_MARK, APLOG_ERR <S2SV_ModEnd>, 0, <S2SV_ModStart> ( APLOG_MARK, APLOG_CRIT <S2SV_ModEnd>, 0, <S2SV_ModStart> ( APLOG_MARK, APLOG_ERR <S2SV_ModEnd>, 0, <S2SV_ModStart> ( APLOG_MARK, APLOG_CRIT <S2SV_ModEnd>, 0, <S2SV_ModStart> ( APLOG_MARK",0
249,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
250,<S2SV_ModStart> (! proto_end || proto_end + 3 >= url,0
251,<S2SV_ModStart> end = path ; if ( end > path + path_len ) return - FDT_ERR_NOSPACE,0
252,<S2SV_ModStart> ; if ( <S2SV_ModEnd> server. maxidletime <S2SV_ModStart> server. maxidletime == - 1 ) { if ( <S2SV_ModEnd> server. bgrewritechildpid <S2SV_ModStart> server. bgrewritechildpid == - 1 ) { <S2SV_ModEnd> server. maxidletime <S2SV_ModStart> server. maxidletime = 0 ; } else if ( <S2SV_ModEnd> server. bgrewritechildpid <S2SV_ModStart> server. bgrewritechildpid == - 1 ) { if ( server. maxidletime <S2SV_ModStart> server. maxidletime == - 1 ) { if ( <S2SV_ModEnd> server. maxidletime <S2SV_ModStart> server. maxidletime == - 1 ) { if ( <S2SV_ModEnd> server. bgrewritechildpid <S2SV_ModStart> server. bgrewritechildpid == - 1 ) { <S2SV_ModEnd> server. maxidletime <S2SV_ModStart> server. maxidletime = 0 ; } else if ( <S2SV_ModEnd> server. bgrewritechildpid <S2SV_ModStart> server. bgrewritechildpid == - 1 ) { if ( server. maxidletime <S2SV_ModStart> server. maxidletime == - 1 ) { if ( <S2SV_ModEnd> server. maxidletime <S2SV_ModStart> server. maxidletime == - 1 ) { if ( <S2SV_ModEnd> server. bgrewritechildpid <S2SV_ModStart> server. bgrewritechildpid == - 1 ) { server. maxidletime,0
253,"<S2SV_ModStart> = g_timeout_add_seconds ( 10 <S2SV_ModEnd>, ( GSourceFunc",0
254,<S2SV_ModStart> book -> dim && i < n,1
255,<S2SV_ModStart> action ) { if ( r < 0.0 ) return ;,0
256,<S2SV_ModStart> this_h ) { int i ; <S2SV_ModStart> 16 ) { for ( i = 0 ; i < 2 ; i ++ ) { sf -> predict [ i ] [ i ] [ 0 ] = vp9_convolve8_copy ; sf -> predict [ i ] [ i ] [ 1 ] = vp9_convolve8_avg_vert ; sf -> predict [ i ] [ i ] [ 0 ] = vp9_convolve8_horiz ; sf -> predict [ i ] [ i ] [ 1 ] = vp9_convolve8_avg_horiz ; } <S2SV_ModStart> -> predict [ 1 ] [ 0 ] [ 0 ] = vp9_convolve8_copy ; sf -> predict [ 1 ] [ 0 ] [ 1 ] = vp9_convolve8_avg ; sf -> predict [ 1 ] [ 0 ] [ 1 ] = vp9_convolve8_avg_horiz ; } else { sf -> predict [ 0 ] [ 0 ] [ 0 ] = vp9_convolve8_vert ; sf -> predict [ 0 ] [ 1 ] [ 0 ] = vp9_convolve8_horiz ; sf -> predict [ 1 ] [ 0 ] [ 1 ] = vp9,0
257,<S2SV_ModStart> (! sock <S2SV_ModEnd> ) OE_RAISE_ERRNO (,0
258,<S2SV_ModStart> ; if ( msg. msg_namelen > sizeof ( src_info ) ) return - EINVAL ; if (,0
259,<S2SV_ModStart> ( ) ; sctp_sysctl_unregister ( ) ; <S2SV_ModStart> ( & sctp_net_ops <S2SV_ModEnd> ) ; free_pages,0
260,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void show_psnr (,0
261,<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen (,1
262,"<S2SV_ModStart> ( ) ; <S2SV_ModEnd> if ( ksz8851ReadReg <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ERROR_OUT_OF_MEMORY ; } memset ( context -> txBuffer, 0, ETH_MAX_FRAME_SIZE ) ; memset ( context -> rxBuffer, 0, ETH_MAX_FRAME_SIZE ) ; <S2SV_ModStart> ( interface, KSZ8851_MARH <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARM <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARM <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARL <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARL <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MTU <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MTU <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MTU <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MTU <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MTU <S2SV_ModEnd>",0
263,"<S2SV_ModStart> skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
264,"<S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; ret = <S2SV_ModEnd> fit_check_format ( fit <S2SV_ModStart>, IMAGE_SIZE_INVAL ) ; if ( ret < 0 <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; ret = <S2SV_ModEnd> - ENOEXEC ; <S2SV_ModStart> - ENOEXEC ; goto error ; <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; ret = <S2SV_ModEnd> - ENOEXEC ; <S2SV_ModStart> - ENOEXEC ; goto error ; <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; ret = <S2SV_ModEnd> - ENOEXEC ; <S2SV_ModStart> - ENOEXEC ; goto error ; <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT_OK ) ; ret = fit_check_format ( fit, IMAGE_SIZE_INVAL ) ; if ( ret < 0 ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; goto error ; <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT_OK ) ; ret = fit_check_format ( fit, IMAGE_SIZE_INVAL ) ; if ( ret < 0 ) goto error ; <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT_OK ) ; ret = fit_check_format ( fit",0
265,"<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> uinput_fd, UI_DEV_DESTROY )",1
266,<S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> = rc -> avg_frame_bandwidth <S2SV_ModEnd> ; # endif,1
267,"<S2SV_ModStart> i ], ""-u"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart>, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""-u"" <S2SV_ModEnd> ) ; argv",0
268,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
269,<S2SV_ModStart> ib ] ; dequant_ptr = d -> dequant ; coeff_ptr = b -> coeff ; qcoeff_ptr = b -> qcoeff ; dqcoeff_ptr = d -> dqcoeff ; i0 =! type ; eob = * d -> eob ; rdmult = mb -> rdmult * err_mult ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ; rddiv = mb -> rddiv ; best_mask [ 0 ] = best_mask [ 1 ] = 0 ; tokens [ 0 ] [ 0 ]. token = DCT_EOB_TOKEN ; tokens [ 0 ] [ 1 ]. qc = 0 ; * ( tokens [ 0 ] + 1 ) = * ( tokens [ 0 ] + 1 ) ; * ( tokens [ 0 ] + 2 ) = * ( tokens [ 0 ] + 2 ) ; * ( tokens [ 0 ] + 3 ) = * ( tokens [ 0 ] + 3 ) ; * ( tokens [ 0 ] + 4 ) = * ( tokens [ 0 ] + 4 ) ; * ( tokens [ 0 ] + 5 ) = * (,0
270,"<S2SV_ModStart> FN_REFLEN ] ; my_snprintf ( buff, sizeof ( buff ), ""%s"", opt_basedir <S2SV_ModEnd> ) ; #",0
271,<S2SV_ModStart> decrypt_cb ) { ptrdiff_t <S2SV_ModEnd> n = ( <S2SV_ModStart> n = ( ptrdiff_t <S2SV_ModEnd> ) ( data_end,0
272,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; <S2SV_ModEnd> exit_func : free_server_handle,0
273,"<S2SV_ModStart> int * returnintra, PREDICTION_MODE * mvp <S2SV_ModStart> # if CONFIG_TEMPORAL_DENOISING <S2SV_ModEnd> int zero_mv_sse = <S2SV_ModStart> int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # else unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # endif # endif mode_mv = mode_mv_sb [ sign_bias ] ; best_ref_mv. as_int = 0 ; best_mode. rd = INT_MAX ; best_mode. yrd = INT_MAX ; best_mode. intra_rd = INT_MAX ; # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # else unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # endif # if",0
274,"<S2SV_ModStart> goto error ; if ( stat ( h -> filename, & statbuf ) == - 1 ) goto error ;",0
275,"<S2SV_ModStart> ; UWORD8 u1_profile_idc = 0, u1_level_idc = 0, u1_seq_parameter_set_id = 0 <S2SV_ModEnd> ; UWORD16 i2_max_frm_num",0
276,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vpx_svc_parameters_t * ) <S2SV_ModEnd> ; cpi -> <S2SV_ModStart> ; cpi -> svc_params <S2SV_ModEnd>. spatial_layer_id = <S2SV_ModStart> = params -> svc_params <S2SV_ModEnd>. spatial_layer ; <S2SV_ModStart> ; cpi -> svc_params <S2SV_ModEnd>. temporal_layer_id = <S2SV_ModStart> = params -> svc_params <S2SV_ModEnd>. temporal_layer ; <S2SV_ModStart> ; cpi -> svc_params <S2SV_ModEnd>. lst_fb_idx = <S2SV_ModStart> ; cpi -> svc_params <S2SV_ModEnd>. gld_fb_idx = <S2SV_ModStart> ; cpi -> svc_params <S2SV_ModEnd>. alt_fb_idx =",0
277,"<S2SV_ModStart> out ) { uint32 bitspersample ; uint32 samplesperpixel ; uint16 input_compression ; uint16 input_photometric ; uint32 width, length ; struct cpTag * p ; uint32 width ; uint32 length <S2SV_ModEnd> ; CopyField ( <S2SV_ModStart> samplesperpixel ) ; TIFFGetFieldDefaulted ( in, TIFFTAG_IMAGEWIDTH, & width ) ; CopyField ( TIFFTAG_IMAGELENGTH, & length ) ; if ( width!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( TIFFTAG_BITSPERSAMPLE, bitspersample ) ; CopyField ( TIFFTAG_SAMPLESPERPIXEL, samplesperpixel ) ; if ( compression!= ( uint16 ) - 1 ) TIFFSetField ( out, TIFFTAG_COMPRESSION, compression ) ; else CopyField ( TIFFTAG_COMPRESSION, compression ) ; TIFFGetFieldDefaulted ( in, TIFFTAG_COMPRESSION, & input_compression ) ; TIFFGetFieldDefaulted ( in, TIFFTAG_PHOTOMETRIC, & input_photometric ) ; if ( input_compression == COMPRESSION_JPEG ) { TIFFSetField ( in, TIFFTAG",0
278,"<S2SV_ModStart> a ) { char * pn ; char c ; int r ; struct stat st ; pn = a -> name ; if ( archive_strlen ( & ( a -> path_safe ) ) > 0 ) { char * p = a -> path_safe. s ; while ( * p == * pn ) ++ p, ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '\\0' && * pn!= '/' ) ) ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '\\0' && * pn!= '/' ) ) ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '\\0' && * pn!= '/' ) ) ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '\\0' && * pn!= '\\0' ) ) { while ( * pn!= '\\0' && ( * pn!= '\\0' && * pn!= '/' ) ) ++ pn ; c = pn [ 0 ] ; pn [ 0 ] = '\\0' ; <S2SV_ModStart> if (",0
279,"<S2SV_ModStart> unsigned int link_count ; struct kernel_lb_addr loc ; struct indirectEntry * ie ; struct indirectEntry * ie ; ie = ( struct indirectEntry * ) ibh -> b_data <S2SV_ModStart> ibh ) { <S2SV_ModEnd> loc = lelb_to_cpu <S2SV_ModStart> extLocation ) ; <S2SV_ModEnd> nbh = udf_read_ptagged <S2SV_ModStart> -> i_sb, <S2SV_ModEnd> & loc, <S2SV_ModStart> & ident ) ; if ( nbh <S2SV_ModEnd> ) { if",0
280,"<S2SV_ModStart> tx_size_uv = get_uv_tx_size ( mbmi ) ; const int filter_level = get_filter_level ( lfi_n, mbmi ) ; uint64_t * const left_y = & lfm -> left_y [ tx_size_y ] ; uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const left_uv = & lfm -> left_uv [ tx_size_y ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_y ] ; uint16_t * const int_4x4_y = & lfm -> int_4x4_y ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv [ tx_size_y ] ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv ; int i ; if (! filter_level ) { return ; } else { const int w = num_8x8_blocks_wide",0
281,"<S2SV_ModStart> mq_ops ) { spin_lock_irqsave_nested <S2SV_ModEnd> ( & fq <S2SV_ModStart> mq_flush_lock, flags, SINGLE_DEPTH_NESTING",0
282,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
283,<S2SV_ModStart> ) ) { ovalue <S2SV_ModEnd> = stok (,0
284,<S2SV_ModStart> sizeof ( effect_param_t ) || * ( effect_param_t * ) pCmdData > * replySize || * ( effect_param_t * ) pReplyData > ( * replySize,0
285,<S2SV_ModStart> ; } } if ( num_versions == 0 ) { k5free ( key_data ) ; k5free ( ret ) ; return NULL ; },0
286,"<S2SV_ModStart> 0x02 ) ; if ( crgram_len > SC_MAX_APDU_BUFFER_SIZE - 1 ) { r = sc_transmit_apdu ( card, & apdu ) ; LOG_TEST_RET ( card -> ctx, r, ""APDU <S2SV_blank> transmit <S2SV_blank> failed"" ) ; } <S2SV_ModStart> crgram, crgram_len + 1",0
287,"<S2SV_ModStart> ; if ( ctxt. info. tc_mapping [ I40E_AQ_VSI_TC_QUE_OFFSET_SHIFT ] & ( 1 << I40E_AQ_VSI_TC_QUE_OFFSET_SHIFT ) ) { dev_err ( & pf -> pdev -> dev, ""invalid <S2SV_blank> TC <S2SV_blank> queue <S2SV_blank> mapping <S2SV_blank> 0x%x\\n"", ctxt. info. tc_mapping [ I40E_AQ_VSI_TC_QUE_OFFSET_SHIFT ] ) ; return - EINVAL ; } if (",0
288,<S2SV_ModStart> ; } } return - 1 ;,1
289,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
290,"<S2SV_ModStart> mb_row, recon_y_stride, recon_uv_stride <S2SV_ModStart> mb_row, recon_y_stride, recon_uv_stride <S2SV_ModStart> mb_row, recon_y_stride, recon_uv_stride",0
291,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
292,"<S2SV_ModStart> len ) { <S2SV_ModEnd> char * buf <S2SV_ModStart> char * p <S2SV_ModEnd> ; if ( <S2SV_ModStart> * s ++ <S2SV_ModEnd> ; } } <S2SV_ModStart> 10 ; } if ( p - buf > Py_SIZE ( u ) ) { Py_DECREF ( w ) ; return NULL ; } assert ( p - buf <= Py_SIZE ( u ) ) ; Py_DECREF ( w ) ; } else { * p ++ = * s ++ ; } } len = p - buf ; s = buf ; return PyUnicode_DecodeUnicodeEscape ( s, len, NULL ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
293,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> enum { YES <S2SV_ModStart> setimes, targisdir <S2SV_ModEnd> ; BUF * <S2SV_ModStart> ""Unexpected <S2SV_blank> off_t/time_t <S2SV_blank> size"" ) ; <S2SV_ModEnd> mask = umask <S2SV_ModStart> ; if ( lstat <S2SV_ModEnd> ( targ, <S2SV_ModStart> ; if ( lstat <S2SV_ModEnd> ( targ,",0
294,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
295,<S2SV_ModStart> 0 ) ; vp8_de_alloc_frame_buffers ( oci ) ; <S2SV_ModStart> 0 ) ; vp8_de_alloc_frame_buffers ( oci ) ;,0
296,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
297,<S2SV_ModStart> u1_num_mbsNby2 ) { if ( ps_cur_slice -> u1_num_mbs == 0 ) { ps_cur_slice -> u1_num_mbs = 1 ; ps_cur_slice -> u1_num_mbsNby2 = 1 ; ps_cur_slice -> u1_num_mbsNby2 = 1 ; ps_cur_slice -> u1_num_mbsNby2 = 1 ; ps_cur_slice -> u1_num_mbsNby2 = 1 ; ps_cur_slice -> u1_num_mbsNby2 = 1 ; ps_cur_slice -> u1_num_mbsNby2 = 1 ; ps_cur_slice -> u1_num_mbsNby2 = 1 ; ps_cur_slice -> u1_num_mbsNby2 = 1 ; ps_cur_slice -> u1_num_mbsNby2 = 1 ; ps_cur_slice -> u1_num_mbsNby2 = 1 ; ps_cur_slice -> u1_num_mbsNby2,0
298,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> vterm_allocator_free ( screen,1
299,"<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & delay )",1
300,"<S2SV_ModStart>, one, <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_planes ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( Cor",0
301,"<S2SV_ModStart> value ) { cchar * name = sclone ( value ) ; <S2SV_ModStart> -> host, name <S2SV_ModEnd>, "" <S2SV_blank> \\t,"", <S2SV_ModStart>, NULL ) ) ; free ( name",0
302,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
303,"<S2SV_ModStart> ) ) ; cg_wlock ( & pool -> data_lock ) ; <S2SV_ModStart> ntime ) { free ( pool -> swork. job_id ) ; pool -> swork. job_id = NULL ; free ( pool -> prev_hash ) ; pool -> swork. prev_hash = NULL ; pool -> swork. coinbase1 = NULL ; pool -> swork. coinbase2 = NULL ; pool -> swork. bbversion = NULL ; pool -> swork. nbit = NULL ; pool -> swork. ntime = NULL ; pool -> swork. clean = clean ; alloc_len = pool -> coinbase_len ; cb1 = NULL ; cb2 = NULL ; cb1_len = 0 ; cb2_len = 0 ; pool -> swork. clean = clean ; alloc_len = pool -> coinbase_len ; pool -> swork. alloc_len = 0 ; pool -> swork. clean = clean ; pool -> swork. clean = clean ; pool -> swork. alloc_len = pool -> coinbase_len ; pool -> swork. job_id = job_id ; snprintf ( pool -> prev_hash, 65, ""%s"", prev_hash ) ;",0
304,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
305,"<S2SV_ModStart> unused ) { <S2SV_ModEnd> _Py_IDENTIFIER ( __dict__ <S2SV_ModStart> * dict = lookup_attr_id <S2SV_ModEnd> ( self, <S2SV_ModStart> self, & PyId__dict <S2SV_ModEnd> ) ; if <S2SV_ModStart> dict ) { return <S2SV_ModEnd> Py_BuildValue ( ""O()O"" <S2SV_ModStart> dict ) ; <S2SV_ModEnd> } return Py_BuildValue",0
306,"<S2SV_ModStart> ) & desc, sizeof ( * desc )",1
307,"<S2SV_ModStart> perf_event * ) ; struct perf_event_context * ctx <S2SV_ModStart> case PERF_EVENT_IOC_PERIOD : ctx = perf_event_ctx_lock ( event ) ; if ( IS_ERR ( ctx ) ) return PTR_ERR ( ctx ) ; <S2SV_ModStart> perf_event_period ( event, ctx <S2SV_ModStart> ret ; } <S2SV_ModEnd> default : return",0
308,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> * r, PREDICTION_MODE <S2SV_ModEnd> y_mode ) { <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode",0
309,"<S2SV_ModStart> sha_zero ) ; if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) { ccp_dm_workarea_destroy ( & ctx ) ; return - EINVAL ; }",0
310,"<S2SV_ModStart> iv ) ; rb_ivar_set ( self, id_key, Qnil ) ;",0
311,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
312,<S2SV_ModStart> if (! nghttp2_buf_mark_avail <S2SV_ModEnd> ( & iframe <S2SV_ModStart> if (! nghttp2_buf_mark_avail <S2SV_ModEnd> ( & iframe,0
313,"<S2SV_ModStart> ( ) ; if (! x86_pmu. intel_cap. capabilities ) { pr_err ( ""%s: <S2SV_blank> intel_pmu <S2SV_blank> capabilities <S2SV_blank> not <S2SV_blank> set\\n"", __func__ ) ; x86_pmu. intel_cap. capabilities = PERF_CAP_NONE ; return - ENODEV ; }",0
314,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> tp, const vpx_TOKENEXTRA <S2SV_ModEnd> * stop ) <S2SV_ModStart> stop ) { vpx_writer <S2SV_ModEnd> * p = <S2SV_ModStart> ] ; const vpx_extra_bit <S2SV_ModEnd> * const b <S2SV_ModStart> b = & vpx_extra_bits <S2SV_ModEnd> [ t ] <S2SV_ModStart> & 1 ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ; } vpx_write_bit <S2SV_ModEnd> ( w,",0
315,"<S2SV_ModStart>, uncompressed_hdr_size ; vpx_write_bit_buffer <S2SV_ModEnd> wb = { <S2SV_ModStart> 0 } ; vpx_write_bit_buffer <S2SV_ModEnd> saved_wb ; write_uncompressed_header <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> += uncompressed_hdr_size ; vpx_compute_update_table <S2SV_ModEnd> ( ) ; <S2SV_ModStart> += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb",0
316,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct net_device * <S2SV_ModEnd> dev_get_valid_name ( struct,0
317,"<S2SV_ModStart> struct ikev2_id id ; ND_TCHECK ( * ep ) <S2SV_ModStart> * typedata ; if ( item_len < sizeof ( struct ikev2_id ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; goto trunc ; } <S2SV_ModStart> trunc ; } ND_TCHECK ( * ep ) ;",0
318,"<S2SV_ModStart> ) ) { jas_log ( jas_log_get_default ( ), ""mif_process_cmpt: <S2SV_blank> invalid <S2SV_blank> data <S2SV_blank> type <S2SV_blank> %d"", jas_taginfo_nonull ( jas_taginfos_lookup ( mif_tags, jas_mifparser_gettag ( tvp ) ) -> id ) ) ;",0
319,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
320,"<S2SV_ModStart> ; WORD32 xt0_0 = 0, yt0 = 0, yt1 = 0, yt2 = 0 <S2SV_ModEnd> ; WORD32 xh0_0 <S2SV_ModStart> ; WORD32 xh0_0 = 0, xh1 = 0, xh20_0 = 0, xh21_0 = 0, xl0 = 0, xl1 = 0, xl20_0 = 0, xl21_0 = 0 <S2SV_ModEnd> ; WORD32 x_0 <S2SV_ModStart> ; WORD32 x_0 = 0, x_1 = 0, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_h2_0 = 0, x_h2_1 ; WORD32 si10, si20, si30, co10, co20, co30 ; WORD64 mul_1, mul_2, mul_4, mul_5, mul_6 ; WORD64 mul_7, mul_8, mul_9, mul_10, mul_11, mul_12 ; WORD32 * x_l1 ; WORD32 * x_l2 ; WORD32 * x_h2",0
321,"<S2SV_ModStart> mntent -> mnt_dir, false",0
322,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
323,"<S2SV_ModStart> ( req ) ) ; rb_hash_aset ( env, client_id_val, req_client_id ( req )",0
324,<S2SV_ModStart> endif int col_type ; int <S2SV_ModEnd> prepare_retval ; MYSQL_BIND,0
325,"<S2SV_ModStart> int eol ; size_t <S2SV_ModEnd> need = 0 <S2SV_ModStart> screen, { if ( need > ( size_t ) INT_MAX / 4 ) { SysError ( ERROR_BMALLOC2 ) ; return ; }",0
326,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> ftoa_bounded_extra ( JsVarFloat <S2SV_ModStart> val ) ) strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> < 0 ) strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> ) ; else strcpy <S2SV_ModEnd> ( str,",0
327,<S2SV_ModStart> ( unlikely ( crng_ready ( ) <S2SV_ModEnd> == 0 ),0
328,"<S2SV_ModStart> LEX_ID ) { snprintf ( str, len, ""ID:%s"" <S2SV_ModEnd>, jslGetTokenValueAsString ( <S2SV_ModStart> jslGetTokenValueAsString ( ) <S2SV_ModEnd> ) ; } <S2SV_ModStart> LEX_STR ) { snprintf ( str, len, ""String:\'%s\'"" <S2SV_ModEnd>, jslGetTokenValueAsString ( <S2SV_ModStart> jslGetTokenValueAsString ( ) <S2SV_ModEnd> ) ; }",0
329,,1
330,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
331,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
332,"<S2SV_ModStart> ) { return memcmp <S2SV_ModEnd> ( s1,",0
333,"<S2SV_ModStart> { parse_global_option ( CMD_PRINT_VERSION, NULL, NULL ) ; parse_service_option ( CMD_PRINT_VERSION, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-version"" ) ) { parse_global_option ( <S2SV_ModStart> ) ) { parse_global_option ( CMD_PRINT_VERSION, NULL, NULL ) ; parse_service_option ( CMD_PRINT_VERSION, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-sockets"" ) ) { socket_options_print ( ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-options"" ) ) { print_ssl_options ( ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else # ifndef USE_WIN32 if (! strcasecmp ( arg1, ""-fd"" ) ) { if (! arg2 ) { s_log ( LOG_ERR, ""No <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> specified"" ) ; print",0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,<S2SV_ModStart> ; if (! new_iv_set ) { st -> st_v1_new_iv. len = 0 ; st -> st_v1_new_iv. len = 0 ; } if (,0
336,<S2SV_ModStart> } } } if ( 0 == ps_dec -> u4_num_bytes_consumed ) { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = 0 ; },0
337,<S2SV_ModStart> <S2SV_null> <S2SV_null> static const <S2SV_ModStart> item ) { if ( item == NULL ) return NULL ;,0
338,"<S2SV_ModStart>. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img, <S2SV_ModStart>. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img,",1
339,"<S2SV_ModStart> ) ; } else if ( arg1 == 3 ) { win_maximise ( - 2 ) ; win_set_chars ( rows0, cols0 ) ; }",0
340,<S2SV_ModStart> < cols + 8 <S2SV_ModEnd> ; i ++,0
341,"<S2SV_ModStart> -> log ) { if ( i -> parent -> log ) <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> -> log ) { if ( i -> parent -> log ) <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> -> log ) { if ( i -> parent -> log ) <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> -> log ) { if ( i -> parent -> log ) <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ;",0
342,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",0
343,<S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_pic_done ) { ps_codec -> i4_pic_done = 1 ; return IHEVCD_INVALID_HEADER ; },0
344,<S2SV_ModStart> ) ) { if ( c =='<S2SV_blank>') { count ++ ; continue ; },0
345,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
346,"<S2SV_ModStart> 0 ; } if ( copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; return 0 ; } <S2SV_ModStart> ( rv ) { <S2SV_ModStart> ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; return 0 ; } <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; return",0
347,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> BLOCK_8X8 : return vpx_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> BLOCK_16X8 : return vpx_mse16x8 <S2SV_ModEnd> ; case BLOCK_8X16 <S2SV_ModStart> BLOCK_8X16 : return vpx_mse8x16 <S2SV_ModEnd> ; default : <S2SV_ModStart> default : return vpx_mse16x16 <S2SV_ModEnd> ; } },1
348,<S2SV_ModStart> ; if ( encoded_key_pack == NULL ) { retval = KRB5_E_INVAL ; break ; } if (,0
349,"<S2SV_ModStart> flags ) ; if (! vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", input -> buf_cur_space_left, frame_len ) ; return ; } <S2SV_ModStart> vb. vb2_buf <S2SV_ModEnd> ) ; for",0
350,<S2SV_ModStart> size ) { if ( size + PREFIX_SIZE > SIZE_MAX ) { zmalloc_oom_handler ( size ) ; return NULL ; },0
351,<S2SV_ModStart> -> serviceId == EXTRACT_16BITS <S2SV_ModEnd> ( & rxh,1
352,"<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len > MWIFIEX_SSID_MAX_SSID_LEN ) { mwifiex_dbg ( adapter, ERROR, ""error: <S2SV_blank> ADHOC_S_CMD: <S2SV_blank> SSID <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d\\n"", MWIFIEX_SSID_MAX_SSID_LEN ) ; return - 1 ; }",0
353,<S2SV_ModStart> ; if (! sfe -> valuelen ) return 0 ; if (,0
354,"<S2SV_ModStart> struct l2cap_conf_rfc rfc <S2SV_ModEnd> ; void * <S2SV_ModStart> sk ) ; memset ( & rfc, 0, sizeof ( rfc ) ) ; <S2SV_ModStart> = L2CAP_MODE_ERTM ; memset ( & rfc, 0, sizeof ( rfc ) ) ; <S2SV_ModStart> = L2CAP_DEFAULT_TX_WINDOW ; memset ( & rfc, 0, sizeof ( rfc ) ) ; <S2SV_ModStart> = L2CAP_DEFAULT_MAX_RECEIVE ; memset ( & rfc, 0, sizeof ( rfc ) ) ; <S2SV_ModStart> L2CAP_DEFAULT_RETRANS_TO ) ; memset ( & rfc, 0, sizeof ( rfc ) ) ; <S2SV_ModStart> L2CAP_DEFAULT_MONITOR_TO ) ; memset ( & rfc, 0, sizeof ( rfc ) ) ;",0
355,"<S2SV_ModStart> { do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> r, MSG_WAITALL )",0
356,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ps_dec -> u1_nal_ref_idc <S2SV_ModStart> ps_dec -> u1_nal_ref_idc == IDR_SLICE_NAL ) { if ( ps_dec -> u1_pic_decode_done == 1 ) { i_status = ERROR_INCOMPLETE_FRAME ; } else { if ( ps_dec -> u1_pic_decode_done == 1 ) { i_status = ERROR_INCOMPLETE_FRAME ; } else { i_status = ERROR_INCOMPLETE_FRAME ; } } } else { if ( ps_dec -> u1_nal_ref_idc == IDR_SLICE_NAL ) { if ( ps_dec -> u1_pic_decode_done == 1 ) { i_status = ERROR_INCOMPLETE_FRAME ; } ps_dec -> u1_pic_decode_done = 1 ; } else { i_status = ERROR_INCOMPLETE_FRAME ; } } else { i_status = ERROR_INCOMPLETE_FRAME ; } } } else { if ( ps_dec -> u1_pic_decode_done == 1 ) { i_status,0
357,<S2SV_ModStart> while ( pair <S2SV_ModEnd> ) { mprAddItem,1
358,"<S2SV_ModStart> * delegation, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> = 0 ; fmode <S2SV_ModEnd> &= ( FMODE_READ <S2SV_ModStart> -> type & fmode )!= fmode <S2SV_ModEnd> ) goto no_delegation_unlock <S2SV_ModStart> -> stateid, fmode <S2SV_ModEnd> ) ; ret <S2SV_ModStart>, NULL, fmode <S2SV_ModEnd> ) ; ret",1
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,"<S2SV_ModStart> * xd, int64_t <S2SV_ModEnd> * out_rate_sum, <S2SV_ModStart> * out_dist_sum ) { int i ; int64_t rate_sum = 0 ; int64_t dist_sum = 0 ; const int ref = xd -> mi [ 0 ] -> mbmi. ref_frame [ 0 ] ; const BLOCK_SIZE bs = get_plane_block_size ( bsize, pd ) ; ( void ) cpi -> fn_ptr [ bs ]. vf ( p -> src. buf, p -> src. stride, pd -> dst. buf, pd -> dst. stride, & sse ) ; if ( i == 0 ) x -> pred_sse [ ref ] = sse ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblock_plane * const p = & xd -> plane [ i ] ; struct macroblockd_plane * const pd = & xd -> plane [ i ] ; const BLOCK_SIZE bs = get_plane_block_size ( bsize, pd ) ; ( void ) cpi -> fn_ptr [ bs ]. vf ( p -> src. buf, p -> src. stride, <S2SV_ModEnd> pd",0
361,<S2SV_ModStart> } if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
362,<S2SV_ModStart> { if ( index >= PAM_MAX_RESP_SIZE ) { return ( PAM_BUF_ERR ) ; } if ( <S2SV_ModStart> == NULL ) { free ( username ) ; <S2SV_ModStart> PAM_BUF_ERR ) ; },0
363,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> seg ) { vpx_read_tree <S2SV_ModEnd> ( r, <S2SV_ModStart> ( r, vpx_segment_tree <S2SV_ModEnd>, seg ->",0
364,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",1
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,"<S2SV_ModStart> depth ++ ; if ( depth == 0 ) { ND_PRINT ( ( ndo, ""Depth <S2SV_blank> reached\\n"" ) ) ; return ( buf ) ; }",0
367,"<S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851WriteFifo <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_TXQCR, KSZ8851_TXQCR_METFE <S2SV_ModEnd> ) ; n",0
368,<S2SV_ModStart> ) ; # else ( void ) unused ; #,0
369,"<S2SV_ModStart>, x_e, x_f ; WORD32 n10, n20, n30, n01, n11, n21, n31 ; WORD32 n12, n22, n32, n03, n13, n23, n33 ; WORD32 n0, j0 ; WORD32 * x2, * x0 ; WORD32 * y0, * y1, * y2, * y3 ; WORD32 x_8, x_9, x_a, x_b, x_c, x_d, x_e, x_f, n10, n20, n30, n01, n11, n21, n31 ; WORD32 n10, n10, n20, n30, n01, n11, n21, n31 ; WORD32 n02, n12, n22, n32, n03, n13, n23, n33 ; WORD32 n0, j0 ; x_8 = * x0 ++ ; x_9 = * x0 ++ ; x_a = * x0 ++ ; x_b = * x0 ++ ; x_c = * x0 ++ ; x_",0
370,<S2SV_ModStart> ; if ( <S2SV_ModEnd> pmd_none_or_clear_bad ( pmd,0
371,"<S2SV_ModStart> height, target_width = 0, target_height = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; usage ( <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; usage ( <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; usage ( <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; usage ( <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; usage ( <S2SV_ModEnd> ) ; return",0
372,"<S2SV_ModStart> i, result <S2SV_ModEnd> ; PyObject *",1
373,<S2SV_ModStart> ; struct vpx_codec_alg_priv <S2SV_ModEnd> priv ; vpx_codec_enc_cfg_t <S2SV_ModStart> sizeof ( struct vpx_codec_alg_priv <S2SV_ModEnd> ) ) ; <S2SV_ModStart> priv = & priv -> base ; ctx -> priv -> iface = ctx -> iface ; ctx -> priv -> alg_priv = priv ; ctx -> priv -> init_flags = ctx -> init_flags ; if ( ctx -> config. enc ) { ctx -> priv -> alg_priv -> cfg = * ctx -> config. enc ; ctx -> config. enc = & ctx -> priv -> alg_priv -> cfg ; } cfg = & ctx -> priv -> alg_priv -> cfg ; for ( i = 0 ; extracfg_map [ i ]. usage && extracfg_map [ i ]. usage!= cfg -> g_usage ; i ++ ) ; priv = & ctx -> priv -> alg_priv -> cfg ; } cfg = & ctx -> priv -> alg_priv -> cfg ; for ( i = 0 ; extracfg_map [ i ]. usage && extracfg_map [ i ]. usage!= cfg -> g_usage ; i ++ ) ; priv -> vp8_cfg = extracfg_,0
374,<S2SV_ModStart> ++ ; } pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; totfr += step ; if ( totfr > BOT ) { totfr = 0 ; for ( i = 0 ; i < 256 ; i ++ ) { unsigned nc = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] = nc ; totfr += nc ; } for ( i = 0 ; i < 16 ; i ++ ) { unsigned sum = 0 ; unsigned i16_17 = i << 4 ; for ( j = 0 ; j < 16 ; j ++ ) sum += i16_17 ; pixel -> lookup [ i ] = sum ; } } pixel -> total_freq = totfr ;,0
375,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx ->,0
376,"<S2SV_ModStart> ) ) { if ( iinfo -> i_location. iLength > UDF_I ( inode ) -> i_sb -> s_blocksize ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> inconsistent <S2SV_blank> file <S2SV_blank> entry <S2SV_blank> length\\n"", inode -> i_ino ) ; ret = - EIO ; goto out ; } <S2SV_ModStart> ) ) { if ( iinfo -> i_location. iLength > UDF_I ( inode ) -> i_sb -> s_blocksize ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> inconsistent <S2SV_blank> file <S2SV_blank> entry <S2SV_blank> length\\n"", inode -> i_ino ) ; ret = - EIO ; goto out ; } <S2SV_ModStart> ) ) { if ( iinfo -> i_location. iLength > UDF_I ( inode ) -> i_sb -> s_blocksize ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> inconsistent <S2SV_blank> file <S2SV_blank> entry <S2SV_blank> length\\n"", inode -> i_ino ) ; ret = - EIO ; goto out ; }",0
377,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0",1
378,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int bad_format_imginfo (,0
379,"<S2SV_ModStart> IPV6DefragSturgesNovakLast ) ; UtRegisterTest ( ""DefragIPv6NoDataTest"", DefragIPv6NoDataTest ) ;",0
380,<S2SV_ModStart> if ( object_data && object_length,0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,"<S2SV_ModStart> p_sys -> b_auto_field_coding && p_sys -> p_format -> interlaced ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""interlaced_coding"", p_sys -> p_format -> interlaced ) ; if ( p_sys -> b_auto_field_coding && p_sys -> p_format -> top_field_first ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""top_field_first"", p_sys -> p_format -> top_field_first ) ; if ( p_sys -> b_auto_field_coding && p_sys -> p_format -> interlaced ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""auto_field_coding"", p_sys -> p_format -> interlaced ) ; if ( p_sys -> b_auto_field_coding ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""auto_field_coding"", p_sys",0
384,"<S2SV_ModStart> bfname ) ; if ( bfname. len < 0 ) { mp_err ( log, ""invalid <S2SV_blank> filename\\n"" ) ; break ; }",0
385,<S2SV_ModStart> 4 ) ; size_t <S2SV_ModEnd> num_properties = GETINT32 <S2SV_ModStart> len ) ; if (! a -> names [ i ]. data ) return NULL ;,0
386,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
387,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { vpx_pbi_t * pbi = ctx -> pbi ; <S2SV_ModStart> * fb ; if (! pbi ) return VPX_CODEC_INVALID_PARAM ; <S2SV_ModStart> * fb ; if (! <S2SV_ModStart>, & fb ) ) return VPX_CODEC_INVALID_PARAM ; vp9_get_reference_dec ( pbi, data -> idx, & fb",0
388,"<S2SV_ModStart> if ( next_marker == JPEG_MARKER_EOI ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> first <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> EOI.\\n"", marker ) ; return AVERROR_INVALIDDATA ; } else if ( next_marker",0
389,"<S2SV_ModStart> expr_stmt ) ; REQ ( CHILD ( n, 0 ), testlist ) ;",0
390,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> vp8_denoiser_filter_c ( YV12_BUFFER_CONFIG <S2SV_ModStart> = 16 ; vpx_buffer_config <S2SV_ModEnd> * mc_running_avg, <S2SV_ModStart> * mc_running_avg = ( vpx_buffer_config * ) <S2SV_ModStart> -> y_stride ; vpx_buffer_config <S2SV_ModEnd> * running_avg = <S2SV_ModStart> * running_avg = ( vpx_buffer_config * ) <S2SV_ModStart> -> y_stride ; vpx_buffer_config <S2SV_ModEnd> * adj_val [ <S2SV_ModStart> MOTION_MAGNITUDE_THRESHOLD ) { vpx_buffer_config <S2SV_ModEnd> * adj_val [ <S2SV_ModStart> c ] ; vpx_buffer_config <S2SV_ModEnd> * sum_diff += <S2SV_ModStart> += diff ; vpx_buffer_config <S2SV_ModEnd> * sum_diff += <S2SV_ModStart> += adjustment ; vpx_buffer_config <S2SV_ModEnd> * sum_diff += <S2SV_ModStart> += adjustment ; vpx_buffer_config <S2SV_ModEnd> * sum_diff += <S2SV_ModStart> += adjustment ; vpx_buffer_config <S2SV_ModEnd> * sum_diff += <S2SV_ModStart> += adjustment ; vpx_buffer_config <S2SV_ModEnd> * sum_diff +=",0
391,<S2SV_ModStart> sockPtr ) ; if ( sockPtr -> keep ) { sockPtr -> keep = NS_TRUE ; },0
392,<S2SV_ModStart> ret = 0 ; xtregs -> cp0 &= ~ XTENSA_CP_MASK,0
393,<S2SV_ModStart> size ) ; if ( message -> length > 0 ) { <S2SV_ModStart> buffer ) ; },0
394,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" <S2SV_ModStart> cg_item ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
395,"<S2SV_ModStart> int error ; ext2_xattr_cache_insert ( inode, header ) ; <S2SV_ModEnd> new_bh = ext2_xattr_cache_find <S2SV_ModStart> new_bh ) ; <S2SV_ModEnd> } else {",0
396,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
397,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
398,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
399,"<S2SV_ModStart> * imsy, 2 <S2SV_ModEnd> ) ; if",0
400,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * data = ( vpx_ref_frame_t * ) <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; if ( frame -> frame_type == VPX_REFFRAME ) { <S2SV_ModStart> sd ) ; } else { return VPX_CODEC_INVALID_PARAM ; } <S2SV_ModStart> vp9_copy_reference_dec ( ctx <S2SV_ModEnd>, ( VP9_REFFRAME",0
401,<S2SV_ModStart> u1_num_mbsNby2 ) { if ( ps_cur_slice -> u1_num_mbs == 0 ) { ps_cur_slice -> u1_num_mbs = 1 ; ps_cur_slice -> u1_num_mbsNby2 = 1 ; ps_cur_slice -> u1_num_mbsNby2 = 1 ; ps_cur_slice -> u1_num_mbsNby2 = 1 ; ps_cur_slice -> u1_num_mbsNby2 = 1 ; ps_cur_slice -> u1_num_mbsNby2 = 1 ; ps_cur_slice -> u1_num_mbsNby2 = 1 ; ps_cur_slice -> u1_num_mbsNby2 = 1 ; ps_cur_slice -> u1_num_mbsNby2 = 1 ; ps_cur_slice -> u1_num_mbsNby2 = 1 ; ps_cur_slice -> u1_num_mbsNby2 = 1 ; ps_cur_slice -> u1_num_mbsNby2,0
402,<S2SV_ModStart> ; UWORD32 u4_x_dst_offset <S2SV_ModEnd> = 0 ; <S2SV_ModStart> == B_PIC ) { <S2SV_ModStart> ps_dec ) ; } else { <S2SV_ModEnd> impeg2d_dec_p_mb_params ( ps_dec <S2SV_ModStart> ps_dec ) ; },0
403,<S2SV_ModStart> VP9_LAST_FLAG ) { int frame = <S2SV_ModEnd> cm -> ref_frame_map <S2SV_ModStart> [ 0 ] ; YV12_BUFFER_CONFIG * const cfg = & cm -> frame_bufs [ frame,0
404,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
405,"<S2SV_ModStart> TX_SIZE tx_size = get_plane_tx_size ( pd, plane <S2SV_ModEnd> ) : mbmi <S2SV_ModStart> int i ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) { int r, c ; int max_blocks_wide = num_4x4_w ; int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> ( 5 + pd -> subsampling_y ) ) ; i = 0 ; for ( r = 0 ; r < num_4x4_h ; r += ( 1 << tx_size ) ) { for ( c = 0 ; c < num_4x4_w ; c += ( 1 << tx_size ) ) { if ( r < max_blocks_wide && c < max_blocks_wide ) visit (",0
406,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 4 ) ; <S2SV_ModEnd> src += src_stride",0
407,"<S2SV_ModStart> nrow ) { if ( row + img -> row_offset > h ) { TIFFErrorExt ( tif -> tif_clientdata, ""302"", ""%s"", ""gtStripSeparate"" ) ; return ( 0 ) ; } <S2SV_ModStart> -> row_offset ; <S2SV_ModEnd> if ( _TIFFReadEncodedStripAndAllocBuffer <S2SV_ModStart> 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""302"", ""%s"", ""gtStripSeparate"" ) ; return ( 0 ) ; } <S2SV_ModStart> 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""302"", ""%s"", ""gtStripSeparate"", ""gtStripSeparate"" ) ; <S2SV_ModStart> 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""302"", ""%s"", ""gtStripSeparate"" ) ; return ( 0 ) ; } <S2SV_ModStart> 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""302"", ""%s"", ""gtStripSeparate"" ) ; <S2SV_ModStart> 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""302"", ""gtStripSeparate",0
408,<S2SV_ModStart> ; } } Py_RETURN_NONE <S2SV_ModEnd> ; } <S2SV_null>,0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. size <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ; psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. size <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
410,<S2SV_ModStart> num & ( 1U << number <S2SV_ModEnd> ) ) return,0
411,"<S2SV_ModStart> ] ; const size_t <S2SV_ModEnd> w = vpx_img_plane_width <S2SV_ModStart>, 1, stride <S2SV_ModEnd>, file ) <S2SV_ModStart>, file ) == stride <S2SV_ModEnd> ) return 0",0
412,"<S2SV_ModStart> = NULL ; uint32_t attr_len ; uint32_t <S2SV_ModEnd> orig_attr_len ; uint16_t <S2SV_ModStart> 1 ; } if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } <S2SV_ModStart> md5_ctx ) ; if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; }",0
413,<S2SV_ModStart> case EVP_CTRL_AEAD_SET_IVLEN : if ( arg <= 0 || arg > CHACHA_CTR_SIZE ) return 0 ;,0
414,"<S2SV_ModStart>, 0, comm_event -> comm_size <S2SV_ModEnd> ) ; if",0
415,"<S2SV_ModStart>, sk ) ; if (! sk ) return - EINVAL",0
416,<S2SV_ModStart> MT_CPTYPE_PASSSALT ) { if ( cpkt. length > MT_PASSSALT_MAXLEN ) { return - 1 ; },0
417,"<S2SV_ModStart> MUTT_ABORT ) { imap_exec ( adata, ""STARTTLS"", IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc!= IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could <S2SV_blank> not <S2SV_blank> negotiate <S2SV_blank> TLS <S2SV_blank> connection"" ) ) ; imap_exec ( adata, ""CAPABILITY"", IMAP_CMD_NO_FLAGS ) ) goto bail ; } } } } } if ( C_SslForceTls && ( adata -> conn -> ssf == 0 ) ) { mutt_error ( _ ( ""Encrypted <S2SV_blank> connection <S2SV_blank> unavailable"" ) ) ; imap_exec ( adata, ""STARTTLS"", IMAP_CMD_SINGLE ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc!= IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ (",0
418,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
419,"<S2SV_ModStart> ) ) ; memset ( G. gps_loc, 0, sizeof ( float ) * 5 ) ;",0
420,"<S2SV_ModStart> remainder, & rlen ) ; if ( ret ) return ret <S2SV_ModEnd> ; if (",0
421,"<S2SV_ModStart> ; read_userfile ( ) ; syslog ( LOG_NOTICE, _ ( ""(%d) <S2SV_blank> Trying <S2SV_blank> to <S2SV_blank> login <S2SV_blank> by <S2SV_blank> %s."" ), curconn -> seskey, curconn -> username <S2SV_ModStart> state ) ; # if defined ( __linux__ ) && defined ( _POSIX_MEMLOCK_RANGE ) mlock ( md5data, sizeof ( md5data ) ) ; mlock ( md5sum, sizeof ( md5sum ) ) ; if ( user -> password!= NULL ) { strncpy ( md5data + 1, user -> password, 82 ) ; memcpy ( md5data + 1 + strlen ( user -> password ), curconn -> pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( user -> password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; # else <S2SV_ModStart> 17 ) ; # endif",0
422,"<S2SV_ModStart> ; if ( unicode_compare_with_ASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart> { if ( unicode_compare_with_ASCIIString <S2SV_ModEnd> ( name,",0
423,"<S2SV_ModStart> off } ; if ( off + sizeof ( buf ) > ut32_max ) { ut32 max = ut32_max ; if ( off + sizeof ( buf ) > ut32_max ) { return - 1 ; } if ( off + sizeof ( buf ) > ut32_max ) { ut32 max = ut32_max ; } if ( off + sizeof ( buf ) > ut32_max ) { ut32 max = ut32_max ; } if ( off + sizeof ( buf ) > ut32_max ) { ut32 max = ut32_max ; } if ( off + sizeof ( buf ) > ut32_max ) { ut32 max = ut32_max ; } if ( off + sizeof ( buf ) > ut32_max ) { ut32 max = ut32_max ; } if ( str [ i ] == '#' ) { i -- ; continue ; } buf [ i ] = tolower ( ( const ut8 ) str [ i ] ) ; } buf [ i ] = 0 ; arm_opcode_parse ( & aop, buf ) ; aop. off = off ; if ( thumb < 0 || thumb > 1 ) { return - 1 ; }",0
424,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
425,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
426,"<S2SV_ModStart> size_t s ; s = exif_get_long ( o, EXIF_BYTE_ORDER_INTEL ) ; if ( s > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } <S2SV_ModStart> s ) ; if ( s > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } <S2SV_ModStart> s ) ; if ( s > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } <S2SV_ModStart> s ) ; if ( s > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; }",0
427,<S2SV_ModStart> bd_addr ) { if ( bd_addr == NULL ) return BT_STATUS_NULL ;,0
428,"<S2SV_ModStart> int i ; size_t avail ; size_t <S2SV_ModEnd> expect ; txid <S2SV_ModStart> 4 ) ; expect = 8 + 8 + nxip * 8 ; if ( nxip < 0 || nxip > avail || expect > avail ) goto bad_format ; xmin = pq_getmsgint64 ( buf ) ; xmax = pq_getmsgint64 ( buf ) ; if ( xmin == 0 || xmin > xmax || xmax > MAX_TXID ) goto bad_format ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; snap -> nxip = nxip ; SET_VARSIZE ( snap, TXID_SNAPSHOT_SIZE ( nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last || cur < xmin || cur >= xmax ) goto bad_format ; snap -> xip [ i ] = cur ; last = cur ; } PG_RETURN_POINTER ( snap ) ; bad_format : elog ( ERROR, ""invalid <S2SV_blank> snapshot <S2SV_blank> data"" ) ; return ( Datum ) NULL <S2SV_ModEnd> ; } <S2SV_null>",0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr,0
430,<S2SV_ModStart> ( epoll_ ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) OE_RAISE_ERRNO ( OE_EINVAL ) ;,0
431,"<S2SV_ModStart> ( CMD_INITIALIZE, section_ptr <S2SV_ModEnd>, NULL )",0
432,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_SHARED_MAX : * ( size_t * ) val = ms -> elf_shared_max ; return 0 ;,0
433,<S2SV_ModStart> offset ) { struct address_space * mapping = page -> mapping ; journal_t * journal = EXT4_JOURNAL ( <S2SV_ModEnd> mapping -> host,0
434,<S2SV_ModStart> ++ ) { if (! ( <S2SV_ModStart> + 1 ) ) ) return GF_OUT_OF_MEM,0
435,<S2SV_ModStart> 17 ] ; size_t <S2SV_ModEnd> plen ; md5_state_t,0
436,<S2SV_ModStart> ; if ( _mibindex_max ) { int i ; for ( i = 0 ; i < _mibindex_max ; ++ i ) SNMP_FREE ( _mibindex_max [ i ] ) ; _mibindex_max = 0 ; _mibindex_max = NULL ; } if (,0
437,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
438,<S2SV_ModStart> ( ) ; g_hash_table_remove_all ( headers ) ;,0
439,"<S2SV_ModStart> -> y_buffer ; # if CONFIG_VP9_HIGHBITDEPTH if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { memcpy ( dst, src, src_ybc -> y_width ) ; return ; } # endif <S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst,",0
440,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_rd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart>,0
441,"<S2SV_ModStart>, obj_tlen ; u_int <S2SV_ModEnd> hexdump ; u_int <S2SV_ModStart> ) ) ; ND_TCHECK ( * obj_tptr ) ; obj_tlen = EXTRACT_16BITS ( lmp_obj_header -> length ) ; if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" )",0
442,"<S2SV_ModStart> mbmi, const MV <S2SV_ModEnd> mvs [ 2 <S2SV_ModStart> i ) { <S2SV_ModEnd> vp9_inc_mv ( &",0
443,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ),",0
444,<S2SV_ModStart> ; if ( skb_out == NULL ) goto free ; if (,0
445,<S2SV_ModStart> ) return ; if (! <S2SV_ModStart> netsnmp_mibindex_load ( ) ) { SNMP_FREE ( env_var ) ; return ; } <S2SV_ModEnd> DEBUGMSGTL ( (,0
446,"<S2SV_ModStart> { fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ], O_RDWR ) <S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> dev ) ) ) <S2SV_ModStart> 1 ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_KEY ) ) <S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_REL ) ) <S2SV_ModStart> x ++ ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> ]. mapped_id )",0
447,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
448,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s, <S2SV_ModStart> & 1 ) vpx_lpf_vertical_4 <S2SV_ModEnd> ( s +",0
449,<S2SV_ModStart> krb5_error_code iakerb_alloc_context ( krb5_auth_ctx_t * auth_ctx <S2SV_ModEnd> ) { iakerb_ctx_id_t <S2SV_ModStart> = 0 ; ctx -> auth_ctx = auth_ctx ;,0
450,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> bitmapDC = CreateCompatibleDC",1
451,<S2SV_ModStart> ; while ( ( <S2SV_ModStart> )!= START_CODE_PREFIX ) && ( ps_stream -> u4_offset < ps_stream -> u4_max_offset ),1
452,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { ret = <S2SV_ModEnd> - EINVAL ; <S2SV_ModStart> - EINVAL ; goto out ; }",1
453,"<S2SV_ModStart> ; if ( mono_generic_inst_is_hidden ( imethod ) ) { mono_error ( ""generic <S2SV_blank> inflated <S2SV_blank> method <S2SV_blank> is <S2SV_blank> hidden"" ) ; mono_reflection_method_inflate_generic_method ( imethod, & tmp_context ) ; return NULL ; } if (",0
454,<S2SV_ModStart> ) ] ; long <S2SV_ModEnd> tmp ; if,0
455,"<S2SV_ModStart> char * last_elem = NULL <S2SV_ModStart> size_t len ; const char * l_origin = NULL ; const char * l_platform = NULL ; <S2SV_ModStart> ( ( ( strncmp ( & name [ 1 ], ""ORIGIN}"", 6 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 1 ], ""PLATFORM}"", 8 ) == 0 && ( len = 9 )!= 0 ) ) && ( name [ len ] == '\\0' || name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) || ( name [ 1 ] == '{' && ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 9 )!= 0 ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( len = 11 )!= 0 ) ) ) ) { repl = ( len == 7 || name [ 2 ] == 'O' )? ( __libc_enable_secure? NULL : l -> l_origin ) : _dl_platform ) ; if ( repl!= NULL && repl!= ( const char * )",0
456,"<S2SV_ModStart> decContainer_t * ) H264SwDecCalloc ( 1, <S2SV_ModEnd> sizeof ( decContainer_t",0
457,<S2SV_ModStart> drop ; } opt = & ( IPCB ( skb ) -> opt ) ;,0
458,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
459,<S2SV_ModStart> errout ; return 0 <S2SV_ModEnd> ; } <S2SV_null>,0
460,<S2SV_ModStart> krb5_key_data * key_data = NULL <S2SV_ModStart> == NULL ) { k5free ( key_data ) ; <S2SV_ModStart> goto cleanup ; },0
461,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
462,<S2SV_ModStart> ] ) ; if ( nByte < 0 ) { rc = SQLITE_NOMEM ; } else { <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> memcpy ( pCsr,0
463,<S2SV_ModStart> filp ) { struct socket_info * si = <S2SV_ModEnd> SOCKET_I ( inode <S2SV_ModStart> ( inode ) ; if ( si -> i_sock ) sock_release ( si -> i_sock,0
464,"<S2SV_ModStart> * orelse, asdl_seq * orelse_type, <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. orelse_type = orelse_type",0
465,"<S2SV_ModStart> char * name, my_bool is_shared <S2SV_ModStart> ; if ( is_shared && <S2SV_ModStart> ; if ( is_shared &&",0
466,"<S2SV_ModStart> NGHTTP2_ERR_BAD_REQUEST_ID : return ""Bad <S2SV_blank> request <S2SV_blank> ID"" <S2SV_ModEnd> ; case NGHTTP2_ERR_BAD_REQUEST_ID",0
467,"<S2SV_ModStart> UINT error ; if (! <S2SV_ModStart>, eventId ) ||! Stream_Read_UINT32 ( s, pduLength ) ) return CHANNEL_RC_INVALID_DATA",0
468,"<S2SV_ModStart> ) ; } if ( pData -> socket == INVALID_SOCKET ) { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"", pData -> description, zmq_strerror ( errno ) ) ; ABORT_FINALIZE ( RS_RET_NO_ERRCODE ) ; }",0
469,"<S2SV_ModStart> struct flowi6 fl6 ; if ( transport -> param_flags & SPP_PMTUD_ENABLE ) skb -> local_df = 1 <S2SV_ModStart> daddr ) ; <S2SV_ModEnd> return ip6_xmit ( <S2SV_ModStart>, skb, <S2SV_ModEnd> fl6, np",0
470,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
471,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> UINT32 failureCode ; if (! Stream_IsEmpty ( s ) ) { <S2SV_ModStart> = NEGO_STATE_FAIL ; },0
472,"<S2SV_ModStart> = 0 ; bn_t t ; bn_null ( t ) ; RLC_TRY { bn_new ( t ) ; switch ( operation ) { case RSA_ENC : bn_zero ( m ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, RSA_PUB ) ; * p_len = k_len - 3 - m_len ; for ( int i = 0 ; i < * p_len ; i ++ ) { bn_lsh ( m, m, 8 ) ; do { rand_bytes ( & pad, 1 ) ; bn_add_dig ( m, m, pad ) ; } bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, 0 ) ; bn_lsh ( m, m, m_len * 8 ) ; } bn_lsh ( m, m, m_len * 8 ) ; bn_lsh ( m, m, m_len * 8 ) ; break ; case RSA_DEC : m_len = k_len - 1 ; bn_rsh ( t, m, 8 * m_len ) ; pad = (",0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
475,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fix_interp_filter ( VP9_COMMON <S2SV_ModStart> cm ) { int count [ SWITCHABLE_FILTERS ] ; int i, j, c = 0 ; for ( i = 0 ; i < SWITCHABLE_FILTERS ; ++ i ) { count [ i ] = 0 ; for ( j = 0 ; j < SWITCHABLE_FILTER_CONTEXTS ; ++ j ) { if ( cm -> counts. switchable_interp [ j ] [ i ] == 0 ) break ; count [ i ] += cm -> counts. switchable_interp [ j ] [ i ] ; } } if ( c == 1 ) { for ( i = 0 ; i < SWITCHABLE_FILTERS ; ++ i ) { if ( count [ i ] ) { cm -> interp_filter = i ; break ; } } } } if ( c == 1 ) { for ( i = 0 ; i < SWITCHABLE_FILTERS ; ++ i ) { if ( count [ i ] ) { cm -> interp_filter = i ; break ; } } } } if ( c == 1 ) { for ( i = 0 ; i",0
476,<S2SV_ModStart> & cpi -> td. <S2SV_ModStart> mi_cols ) ; <S2SV_ModEnd> vp9_setup_src_planes ( x <S2SV_ModStart> subsampling_y ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
477,"<S2SV_ModStart> hp ) ; if ( <S2SV_ModEnd> htc_request_check_host_hdr ( hp <S2SV_ModStart> htc_request_check_host_hdr ( hp, sp -> rxbuf ) <S2SV_ModEnd>!= 0 ) <S2SV_ModStart>, SLT_Error, ""Duplicated <S2SV_blank> HTTP <S2SV_blank> host <S2SV_blank> header"" <S2SV_ModEnd> ) ; return",0
478,"<S2SV_ModStart> EOFOp 0x07 char * magick_buffer <S2SV_ModEnd> ; Image * <S2SV_ModStart> char * ) magick_buffer <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( count!= 3 ) || ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; <S2SV_ModStart>. x = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. y = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. columns = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. rows = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart> ( count!= 3 ) || ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; <S2SV_ModStart>. x = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. y = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. columns = ReadBlobLSBLong <S2SV_ModEnd>",0
479,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> sizeof ( tETH_HDR ),1
480,<S2SV_ModStart> ps_cur_poc ) ; if (! ps_dec -> s_cur_slice -> u4_first_slice_in_pic_buffer ) { ps_dec -> s_cur_slice -> u4_first_slice_in_pic_buffer = 1 ; ps_dec -> s_cur_slice -> u4_first_slice_in_pic_buffer = 0 ; ps_dec -> s_cur_slice -> u4_first_slice_in_pic_buffer = 0 ; ps_dec -> s_cur_slice -> u4_first_slice_in_pic_buffer = 0 ; ps_dec -> s_cur_slice -> u4_first_slice_in_pic_buffer = 0 ; ps_dec -> s_cur_slice -> u4_first_slice_in_pic_buffer = 0 ; ps_dec -> s_cur_slice -> u4_first_slice_in_pic_buffer = 0 ; ps_dec -> s_cur_slice -> u4_first_slice_in_pic_buffer = 0 ; ps_dec -> s_cur_slice -> u4_first_slice_in,0
481,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> * karg ; <S2SV_ModEnd> struct pci_dev * <S2SV_ModStart> pci_dev * pdev <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> ) ) ; kfree ( karg ) ; <S2SV_ModStart> karg ) ; } if ( karg -> hdr. maxDataSize!= data_size ) { printk ( MYIOC_s_ERR_FMT ""%s@%d::mptctl_getiocinfo <S2SV_blank> - <S2SV_blank> "" ""Structure <S2SV_blank> size <S2SV_blank> mismatch <S2SV_blank> [%ld]\\n"", __FILE__, __LINE__, karg -> hdr. maxDataSize ) ; kfree ( karg ) ; return - ENODEV ; } if ( mpt_verify_adapter ( karg -> hdr. iocnum, & ioc ) < 0 ) { printk ( KERN_DEBUG MYNAM ""%s::mptctl_getiocinfo() <S2SV_blank> - <S2SV_blank> ioc%d <S2SV_blank> not <S2SV_blank> found!\\n"", __FILE__, __LINE__, iocnum ) ; kfree ( karg ) ; return - ENODEV ; } if ( karg -> hdr. maxDataSize!= data_",0
482,"<S2SV_ModStart> ( image -> rows <S2SV_ModEnd>, 3 *",0
483,"<S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv",0
484,"<S2SV_ModStart> -> offset ; n -> order = EXIF_BYTE_ORDER_INTEL ; datao += exif_get_long ( buf + datao + 8, EXIF_BYTE_ORDER_INTEL ) ; <S2SV_ModStart> EXIF_BYTE_ORDER_INTEL ) ; c = exif_get_short ( buf + datao, EXIF_BYTE_ORDER_INTEL ) ; datao += 2 ; exif_mnote_data_fuji_clear ( n ) ; n -> entries = exif_mem_alloc ( en -> mem, sizeof ( MnoteFujiEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( en -> log, ""ExifMnoteDataFuji"", sizeof ( MnoteFujiEntry ) * c ) ; return ; } tcount = 0 ; for ( i = c, o = datao ; i < c ; ++ i, o += 12 ) { size_t s ; if ( ( o + 12 < o ) || ( o + 12 < o ) || ( o + 2 < 2 ) || ( o + <S2SV_ModEnd> 2 > buf_size <S2SV_ModStart> += 2 ;",0
485,"<S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> %s\\n"" <S2SV_ModEnd>, procName,",0
486,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> opt = service_options <S2SV_ModStart> service_options. next <S2SV_ModEnd> ; while ( <S2SV_ModStart> 0 ; } <S2SV_ModEnd> s_log ( LOG_DEBUG <S2SV_ModStart> servname ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
487,<S2SV_ModStart> void ) { if (! recovery_started ) return ;,0
488,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ;",0
489,"<S2SV_ModStart> image ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
490,"<S2SV_ModStart> { WORD32 i <S2SV_ModEnd> ; WORD32 num_neg_pics <S2SV_ModStart> u4_num_st_curr_after, u4_num_lt_curr <S2SV_ModEnd> ; WORD8 ai1_curr_delta_poc_msb_present_flag <S2SV_ModStart> u4_num_st_curr_after, u4_num_lt_curr <S2SV_ModEnd> ; st_rps_idx =",0
491,"<S2SV_ModStart>, int fmt, int indent <S2SV_ModStart> child ) { if ( indent ) len += indent ; <S2SV_ModStart> = str = print_string <S2SV_ModEnd> ( child -> <S2SV_ModStart> child -> string, indent <S2SV_ModStart> = ret = print_value ( child, indent <S2SV_ModEnd> ) ; if <S2SV_ModStart> = 1 ; if ( indent ) len += indent ; <S2SV_ModStart> fail ) { if ( indent ) len += indent ; <S2SV_ModStart> + 1 ; <S2SV_ModEnd> * ptr ++ <S2SV_ModStart> = 0 ; if ( indent ) for ( j = 0 ; j < indent ; ++ j ) * ptr ++ = '\\t' ; strcpy ( ptr, names [ i ] ) ; if ( out ) out = ( char * ) cJSON_malloc ( len ) ; if (! out ) fail = 1 ; <S2SV_ModEnd> * out = <S2SV_ModStart> + 1 ; <S2SV_ModEnd> * out = <S2SV_ModStart> + 1 ; <S2SV_ModEnd> * out = <S2SV_ModStart> + 1 ; <S2SV_ModEnd> * out = <S2SV_ModStart> + 1 ; <S2SV_ModEnd> * out = <S2SV_ModStart> + 1 ; <S2SV_ModEnd> * out = <S2SV_ModStart> + 1 ; <S2SV_ModEnd> * out = <S2SV_ModStart> + 1 ; <S2SV_ModEnd> * out = <S2SV_ModStart> + 1 ; <S2SV_ModEnd> * out = <S2SV_ModStart> + 1 ; <S2SV_ModEnd> * out = <S2SV_ModStart> + 1 ; <S2SV_ModEnd> * out =",0
492,<S2SV_ModStart> sk ) ; if ( writable ) { unix_state_lock ( sk ) ; other = unix_peer ( sk ) ; if ( other && unix_peer ( <S2SV_ModEnd> other )!= <S2SV_ModStart> = 0 ; unix_state_unlock ( sk ) ; } <S2SV_ModEnd> } if (,0
493,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; sprintf ( outputbuffer, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", x, y, w, h ) ;",0
494,<S2SV_ModStart> ( OM_uint32 ) GSS_S_DEFECTIVE_TOKEN <S2SV_ModEnd> ; return GSS_S_DEFECTIVE_TOKEN,0
495,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { vpx_ref_frame_t <S2SV_ModEnd> * frame = <S2SV_ModStart> ( args, vpx_ref_frame_t <S2SV_ModEnd> * ) ; <S2SV_ModStart> * fb ; vpx_get_reference_enc <S2SV_ModEnd> ( ctx ->",0
496,<S2SV_ModStart> plug ) ; <S2SV_ModEnd> put_ioctx ( ctx,0
497,"<S2SV_ModStart> * name, my_bool <S2SV_ModEnd> rep_quick ) { <S2SV_ModStart> ) ) { <S2SV_ModEnd> DBUG_RETURN ( ""mi_repair_by_sort""",0
498,"<S2SV_ModStart> s } ; uECC_word_t * p ; wordcount_t num_words = curve -> num_words ; wordcount_t num_n_words = BITS_TO_WORDS ( curve -> num_n_bits ) ; bitcount_t num_n_bits = curve -> num_n_bits ; if ( uECC_vli_isZero ( k, num_words ) || uECC_vli_cmp ( curve -> n, k, num_n_words )!= 1 ) { return 0 ; } carry = regularize_k ( k, tmp, s, curve ) ; EccPoint_mult ( p, curve -> G, k2 [! carry ], 0, num_n_bits + 1, curve ) ; if ( uECC_vli_isZero ( p, num_words ) ) { return 0 ; } if (! g_rng_function ) { uECC_vli_clear ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! uECC_generate_random_int ( tmp, curve -> n, num_n_words",0
499,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|dao-truncated]"" <S2SV_ModEnd> ) ) ;",0
500,<S2SV_ModStart> ; } else if ( pool -> free_total > 0 ) <S2SV_ModStart> ) ; } pool -> free_total = new_free_total ;,0
501,"<S2SV_ModStart> tp ; { if ( * cp == '\\\\' && cp [ 1 ] && index ( ""mM"", cp [ 1 ] ) && cp [ 2 ] ) { meta = 1 ; cp += 2 ; } if ( * cp == '\\\\' && cp [ 1 ] && index ( ""0123456789xXoO"", cp [ 1 ] ) && cp [ 2 ] ) { NEARDATA const char hex [ ] = ""00112233445566778899aAbBcCdDeEfF"" ; const char * dp ; int dcount = 0 ; cp ++ ; if ( * cp == 'x' || * cp == 'X' ) for ( ++ cp ; * cp && ( dp = index ( hex, * cp ) ) && ( dcount ++ < 2 ) ; cp ++ ) cval = ( cval * 16 ) + ( ( int ) ( dp - hex ) / 2 ) ; else if ( * cp == 'o' || * cp == 'O' ) for ( ++ cp ; * cp && ( index ( ""01234567"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 8 ) + ( * cp",0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
503,"<S2SV_ModStart>, * pixg <S2SV_ModEnd> ; PIXCMAP * <S2SV_ModStart> == NULL ) { pixDestroy ( & pixc ) ; <S2SV_ModStart> NULL ) ; }",0
504,<S2SV_ModStart>. vf = vpx_mse16x16 <S2SV_ModEnd> ; xd ->,1
505,"<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> overhead = 16 <S2SV_ModStart> + 1 ; size_t size = overhead ; if ( flags & MONGO_CONTINUE_ON_ERROR ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } if ( overhead > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } mm = mongo_message_create ( size, 0, 0, MONGO_OP_INSERT ) ; data = & mm -> data ; if ( flags & MONGO_CONTINUE_ON_ERROR ) data = mongo_data_append32 ( data, & ONE ) ; else data = mongo_data_append32 ( data, & ZERO ) ; for ( i = 0 ; i < count ; i ++ ) { data = mongo_data_append ( data, bsons [ i ] -> data, bson_size ( bsons [ i ] ) ) ; } if ( write_concern ) { if ( mongo_message_send ( conn, mm ) == MONGO_ERROR ) { return MONG",0
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NEGO_STATE_FAIL ; goto error <S2SV_ModEnd> ; } Stream_Read_UINT8 <S2SV_ModStart> = NEGO_STATE_FINAL ; return ; error : return ;,0
507,"<S2SV_ModStart> i, target_bits_per_mb ; const double correction_factor = get_rate_correction_factor ( cpi ) <S2SV_ModStart> i, target_bits_per_mb <S2SV_ModEnd> ; target_bits_per_mb = <S2SV_ModStart> ( int ) vpx_rc_bits_per_mb <S2SV_ModEnd> ( cm ->",0
508,<S2SV_ModStart> TJA1101_CONFIG1_MII_MODE ; value &= ~ TJA1101_CONFIG1_MII_MODE_RMII_25MHZ ; value <S2SV_ModStart> ; value |= TJA1101_CONFIG1_MII_MODE_MII_25MHZ <S2SV_ModEnd> ; tja1101WritePhyReg (,0
509,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
510,"<S2SV_ModStart> int dst_stride, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart> int i ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> uint8_t, left_col <S2SV_ModEnd> ) ; DECLARE_ALIGNED <S2SV_ModStart> plane ] ; <S2SV_ModEnd> if ( plane <S2SV_ModStart> + y ; memset <S2SV_ModEnd> ( left_col, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( right_col, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; mem",0
511,"<S2SV_ModStart> ++ ; } else if ( pattern [ end ] == \'""\' ) { end ++ ; while ( ( pattern [ end ]!= 0 ) && ( pattern [ end ]!= \'""\' ) ) end ++ ; }",0
512,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_mmap_lock ) ;,0
513,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> show_frame ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> KEY_FRAME ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; } vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> SRGB ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
514,"<S2SV_ModStart> ; if ( optind < 1 ) { fprintf ( stderr, ""Error: <S2SV_blank> %s\\n"", strerror ( errno ) ) ; exit ( EXIT_FAILURE ) ; } if (",0
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { q = osStrchr <S2SV_ModEnd> ( p +,1
516,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
517,<S2SV_ModStart> KEY_FRAME ) { memcpy <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd ->,1
518,"<S2SV_ModStart> error_t error ; int16_t <S2SV_ModEnd> n ; uint32_t <S2SV_ModStart> ( interface, ENC624J600_ESTAT <S2SV_ModEnd> ) & ESTAT_PKTCNT <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( n, ENC624J600_MAX_FRAME_SIZE <S2SV_ModEnd> ) ; enc624j600ReadBuffer <S2SV_ModStart> ( n, ENC624J600_MAX_FRAME_SIZE <S2SV_ModEnd> ) ; enc624j600ReadBuffer <S2SV_ModStart> ( n, ENC624J600_MAX_FRAME_SIZE <S2SV_ModEnd> ) ; enc624j600ReadBuffer <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL <S2SV_ModEnd>, ENC624J600_RX_BUFFER_STOP ) <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL <S2SV_ModEnd>, ENC624J600_R",0
519,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv, VALUE klass ) { VALUE content ; VALUE rb_schema ; VALUE errors ; xmlSchemaPtr schema ; xmlSchemaParserCtxtPtr ctx ; VALUE rb_schema ; VALUE ctx ; if ( argc < 2 ) { rb_raise ( rb_eRuntimeError, ""Unexpected <S2SV_blank> argument <S2SV_blank> count <S2SV_blank> in <S2SV_blank> read_memory"" ) ; return Qnil ; } <S2SV_ModEnd> ctx = xmlSchemaNewMemParserCtxt <S2SV_ModStart> content ) ) ; if ( ctx == NULL ) { rb_raise ( rb_eRuntimeError, ""Unexpected <S2SV_blank> argument <S2SV_blank> count <S2SV_blank> in <S2SV_blank> read_memory"" ) ; return Qnil ; } <S2SV_ModEnd> errors = rb_ary_new <S2SV_ModStart> errors ) ; ctx = xmlSchemaNewMemParserCtxt ( ( const char * ) StringValuePtr ( content ), ( int ) RSTRING_LEN ( content ) ) ; rb_iv_set ( rb_schema, ""@content"", content ) ;",0
520,"<S2SV_ModStart> ) ; } if ( strlen ( config_arg ) > CONF_MAX_OPTION_LEN ) { s_log ( LOG_ERR, ""Maximum <S2SV_blank> length <S2SV_blank> of <S2SV_blank> option <S2SV_blank> string <S2SV_blank> exceeds <S2SV_blank> %d"", CONF_MAX_OPTION_LEN ) ; print_syntax ( ) ; return 1 ; }",0
521,<S2SV_ModStart> 2 ] ; if ( x >= state -> xsize ) return - 1 ; <S2SV_ModStart> 2 ] ; if ( x >= state -> xsize ) return - 1 ;,0
522,<S2SV_ModStart> err = - <S2SV_ModEnd> EALREADY ; if,0
523,<S2SV_ModStart> POLL_IN ) ; <S2SV_ModEnd> perf_event_wakeup ( handle,0
524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> u16 * <S2SV_ModEnd> utf8s_to_utf16s ( const <S2SV_ModStart> len, wchar_t * <S2SV_ModStart> = pwcs ; if ( len < 0 ) return NULL ; <S2SV_ModStart> if ( u > <S2SV_ModEnd> PLANE_SIZE ) { <S2SV_ModStart> PLANE_SIZE ) { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( u & SURROGATE_BITS ) ) ; } else { * op ++ = ( wchar_t ) u ; } s += size ; len -= size ; } else { * op ++ = * s ++ ; len -- ; } } return <S2SV_ModEnd> op - pwcs <S2SV_ModStart> pwcs ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
525,"<S2SV_ModStart> EPROTONOSUPPORT ) { if ( as_console ) { sleep ( 2 ) ; } <S2SV_ModStart> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" <S2SV_ModEnd> ) ; }",0
526,"<S2SV_ModStart> ( interface, KSZ8851_RXFHSR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXMR | KSZ8851_RXFHSR_RXFTL | KSZ8851_RXFHSR_RXRF | KSZ8851_RXFHSR_RXCE <S2SV_ModEnd> ) ) == <S2SV_ModStart> ( interface, KSZ8851_RXFDPR, KSZ8851_RXFDPR_RXFPAI <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851ReadFifo <S2SV_ModStart> ( interface, KSZ8851_RXFDPR, KSZ8851_RXFDPR_RXFPAI <S2SV_ModEnd> ) ; ksz8851ClearBit <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ancillary <S2SV_ModStart>",0
527,"<S2SV_ModStart> ast_for_funcdef_impl ( struct compiler * c, const node * n, asdl_seq * decorator_seq, int is_async ) { identifier name ; arguments_ty args ; asdl_seq * body ; expr_ty returns = NULL ; int name_i = 1 ; node * tc ; string type_comment = NULL ; if ( c -> c_feature_version < 5 ) { ast_error ( c, n, ""Async <S2SV_blank> functions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.5 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } REQ ( n, funcdef ) ; name = NEW_IDENTIFIER ( CHILD ( n, name_i ) ) ; if (! name ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i ), 0 ) ) return NULL ; args = ast_for_arguments ( c, CHILD ( n, name_i + 1 ) ) ; if (! args ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 2 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name",0
528,"<S2SV_ModStart> ( mm, 0xA00000 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( pgd, 0xA00000 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( pud, 0xA00000 <S2SV_ModEnd> ) ; split_huge_page_pmd <S2SV_ModStart>, pmd, 0xA00000 <S2SV_ModEnd>, & ptl <S2SV_ModStart> ; out : flush_tlb_mm_range ( mm, 0xA0000, 0xA0000 + 32 * sizeof ( * pgd ) <S2SV_ModEnd> ) ; }",0
529,"<S2SV_ModStart> token_len ) ; if ( 0!= ptr_check_result ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; }",0
530,"<S2SV_ModStart> ) ) { if (! is_valid ( argv [ 1 ] ) ) { printf ( ""Error: <S2SV_blank> invalid <S2SV_blank> arguments.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; }",0
531,"<S2SV_ModStart> 0 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif <S2SV_ModStart> row ++ ) <S2SV_ModEnd> for ( col <S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD <S2SV_ModStart> & 1 ] ; # else RAW ( row, col ) = pred [ col & 1 ] ; # endif <S2SV_ModEnd> } } }",0
532,<S2SV_ModStart> len < needed || len > param -> data_start,0
533,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
534,<S2SV_ModStart> ( bfqq ) __bfq_idle_slice_timer_body <S2SV_ModEnd> ( bfqq ),0
535,<S2SV_ModStart> ; length += sizeof ( PRIMARY_DRAWING_ORDER_FIELD ) <S2SV_ModEnd> ; length +=,0
536,<S2SV_ModStart> ; if ( d_is_dir ( old ) &&! new_is_dir ) { err = - ENOENT ; goto out ; } if (,0
537,"<S2SV_ModStart> int plane ; vp9_foreach_transformed_block_in_all_plans <S2SV_ModEnd> ( xd,",0
538,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> nonrd_pick_sb_modes ( VP9_COMP <S2SV_ModStart> -> e_mbd ; if (! frame_is_intra_only ( cm ) ) { vp9_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } else { MB_PREDICTION_MODE intramode = DC_PRED ; set_mode_info ( & xd -> mi [ 0 ] -> mbmi, bsize, intramode ) ; } <S2SV_ModStart> bsize ) ; <S2SV_ModEnd> duplicate_mode_info_in_sb ( cm",0
539,"<S2SV_ModStart> = NULL ; if ( <S2SV_ModEnd> superblockRead ( & <S2SV_ModStart>. superblock )!= 1 ) { log ( ""superblockRead <S2SV_blank> failed\\n"" ) ; <S2SV_ModEnd> hrtf = getHrtf",0
540,"<S2SV_ModStart> -> ranges = calloc ( 1, <S2SV_ModEnd> sizeof ( MappedRange",0
541,"<S2SV_ModStart> ; if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( flags & ( VP8_EFLAG_FORCE_GF | VP8_EFLAG_FORCE_ARF ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( flags & ( VP8_EFLAG_FORCE_GF | VP8_EFLAG_FORCE_ARF ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( flags & ( VP8_EFLAG_FORCE_GF | VP8_EFLAG_FORCE_ARF ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ;",0
542,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
543,<S2SV_ModStart>! head ) <S2SV_ModEnd> return - EINVAL <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
544,"<S2SV_ModStart> * pptr, u_int64 <S2SV_ModEnd> len ) { <S2SV_ModStart> advance ; u_int64 <S2SV_ModEnd> tlen ; const",0
545,"<S2SV_ModStart> -> outputbuffer, ""<tr><td>%s</td>"" <S2SV_ModEnd>, Run. <S2SV_ModStart> -> outputbuffer, ""<td>%s</td>"" <S2SV_ModEnd>, Run.",0
546,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
547,"<S2SV_ModStart> ) ) ; if ( strlen ( tokbuf ) > sizeof ( constr1 ) + strlen ( constr2 ) + 1 ) { fprintf ( stderr, ""invalid <S2SV_blank> amount <S2SV_blank> in <S2SV_blank> liquid <S2SV_blank> transaction: <S2SV_blank> %s\\n"", tokbuf ) ; return false ; }",0
548,"<S2SV_ModStart> iad_num ++ ; if ( iad_num >= USB_MAXINTERFACES ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, nintf_orig, USB_MAXINTERFACES ) ; nintf = USB_MAXINTERFACES ; }",0
549,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
550,<S2SV_ModStart> ; distortion = vpx_variance16x16 <S2SV_ModEnd> ( * (,1
551,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_ECON2_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR0 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR0 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd>,",0
552,<S2SV_ModStart> * start ; if ( psf -> header == NULL ) return ; <S2SV_ModStart> header ) ; if ( maxlen >= sizeof ( psf -> header ) ) return ; <S2SV_ModStart> + maxlen ; if ( maxlen >= sizeof ( psf -> header ) ) return ; <S2SV_ModStart> = 0 ; if ( strlen ( ( char * ) psf -> header ) >= sizeof ( psf -> header ) ) return ;,0
553,<S2SV_ModStart> -> alg_priv ) { <S2SV_ModStart> alg_priv ) ; ctx -> priv -> alg_priv = NULL ; },0
554,<S2SV_ModStart> { sf -> <S2SV_ModEnd> recode_loop = ( <S2SV_ModStart> ; sf -> <S2SV_ModEnd> less_rectangular_check = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> use_rd_breakout = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> auto_mv_step_size = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> intra_y_mode_mask [ TX_32X32 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> intra_uv_mode_mask [ TX_16X16 <S2SV_ModStart> ] = INTRA_DC_H_V <S2SV_ModEnd> ; } if <S2SV_ModStart> { sf -> <S2SV_ModEnd> recode_loop = ALLOW_RECODE_KFMAXBW,0
555,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
556,<S2SV_ModStart> int goodsize = ( <S2SV_ModStart> 2 * EXTRA_STACK ) % LUAI_MAXSTACK,0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,"<S2SV_ModStart>, * s <S2SV_ModEnd> ; int quote <S2SV_ModStart> errstr ) { <S2SV_ModEnd> char buf [ <S2SV_ModStart> 128 ] ; if (! _PyUnicode_AsString ( errstr ) ) { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } Py_DECREF ( type ) ; Py_DECREF ( value ) ; Py_XDECREF ( tback ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } Py_DECREF ( type ) ; Py_DECREF ( value ) ; Py_XDECREF ( tback ) ; } # endif return NULL ; } PyArena_AddPyObject ( c -> c_arena, str ) ; return Str ( str, kind, LINENO ( n ), n -> n_col_offset, c -> c_arena ) ; } case NUMBER : { PyObject * pynum = parsenumber ( c, STR ( ch ) ) ; if (! pynum ) { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } return Str ( str, kind, LINENO ( n )",0
559,"<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> break ; } input_string = strdup ( option_value ) ; option_name = strtok_r ( option_name, ""="", & input_ptr ) ; while ( option_name!= NULL ) { option_value = strtok_r ( NULL, "" <S2SV_blank> "", & input_ptr ) ; if ( option_value == NULL ) { svc_log ( svc_ctx, SVC_LOG_ERROR, ""option <S2SV_blank> missing <S2SV_blank> value: <S2SV_blank> %s\\n"", option_name ) ; res = VPX_CODEC_INVALID_PARAM ; break ; } <S2SV_ModStart> ( strcmp ( <S2SV_ModEnd> ""layers"", option_name <S2SV_ModStart> ( strcmp ( <S2SV_ModEnd> ""scale-factors"", option_name <S2SV_ModStart> ( strcmp ( <S2SV_ModEnd> ""quantizers"", option_name <S2SV_ModStart> ( strcmp ( <S2SV_ModEnd> ""quantizers-keyframe"", option_name <S2SV_ModStart> ( strcmp ( <S2SV_ModEnd> ""quantizers-keyframe"", option_name",0
560,<S2SV_ModStart> ) ; } <S2SV_ModEnd> mb_index = 0,0
561,<S2SV_ModStart> self ) { size_t <S2SV_ModEnd> i ; PyObject,1
562,,1
563,"<S2SV_ModStart> ( dbh, mysql_strerror <S2SV_ModEnd> ( imp_dbh ->",0
564,<S2SV_ModStart> ) || ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) ) <S2SV_ModStart> if ( need_close && TEMP_FAILURE_RETRY ( <S2SV_ModEnd> ioctl ( slot <S2SV_ModStart>! size ) ),0
565,"<S2SV_ModStart> ieee_802_11_phdr phdr ; if ( pinfo -> curr_layer_num < 1 ) { g_debug ( ""Invalid <S2SV_blank> frame <S2SV_blank> number <S2SV_blank> (%d)"", pinfo -> curr_layer_num ) ; return ; }",0
566,<S2SV_ModStart> ; sh = s_calloc <S2SV_ModEnd> ( hdrlen +,0
567,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> BYTE a_val ; if (! context ) return FALSE ; <S2SV_ModStart> -> ColorLossLevel ; if (! context -> priv -> PlaneBuffers ) return FALSE ; <S2SV_ModStart> ; } } return TRUE ;,0
568,<S2SV_ModStart> > nr_parens ) { ret = - EINVAL ; goto out_free ; } <S2SV_ModEnd> * ( ++,1
569,"<S2SV_ModStart> ) { const RATE_CONTROL_EXT <S2SV_ModEnd> * rc = <S2SV_ModStart> target = ( <S2SV_ModEnd> cpi -> oxcf <S2SV_ModStart> starting_buffer_level / 2 <S2SV_ModEnd> > INT_MAX ) <S2SV_ModStart> > INT_MAX )? INT_MAX : <S2SV_ModEnd> cpi -> oxcf <S2SV_ModStart> starting_buffer_level / 2 <S2SV_ModEnd> ; } else <S2SV_ModStart> int kf_boost = <S2SV_ModEnd> 2 * cpi <S2SV_ModStart> cpi -> output_framerate <S2SV_ModEnd> ; if ( <S2SV_ModStart> rc -> frames_since_key > <S2SV_ModEnd> cpi -> output_framerate <S2SV_ModStart> -> output_framerate / 2 ) { kf_boost = ( int ) ( kf_boost * rc -> frames_since_key / ( cpi -> output_framerate / 2 ) ) ; } target = ( ( 16 + kf_boost ) * rc -> av_per_frame_bandwidth ) >> 4 ; } return vp9_rc_clamp_iframe_target_size ( cpi, target ) <S2SV_ModEnd> ; } <S2SV_null>",0
570,"<S2SV_ModStart> TX_MODE read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r )",1
571,"<S2SV_ModStart> : # line 98 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> } # line 1046 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 98 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 1052 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 98 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 1058 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 98 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 1059 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 99 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 1063 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 100 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 1069 <S2SV_ModEnd> ""re_grammar.c"" break ;",0
572,"<S2SV_ModStart> -> cpi ; MACROBLOCK * const xd = args -> xd ; MACROBLOCKD_MODE * const mbmi = & cpi -> mb. plane [ plane ] ; <S2SV_ModStart> args -> tp <S2SV_ModEnd> ; struct macroblock_plane <S2SV_ModStart> plane_type ; const tran_low_t <S2SV_ModEnd> * qcoeff = <S2SV_ModStart> = cpi -> fc. coef_probs [ tx_size ] [ type ] [ ref ] ; vp9_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> <S2SV_ModEnd> counts. eob_branch <S2SV_ModStart> COEFF_CONTEXTS ] = get_tx_eob_branch ( cpi, segment_id, tx_size, ref ) <S2SV_ModEnd> ; const uint8_t <S2SV_ModStart> ; int aoff = 0, loff = 0 <S2SV_ModEnd> ; txfrm_block_to_raster_xy ( <S2SV_ModStart> ; int aoff = 0, loff = 0 <S2SV_ModEnd> ; txfrm_block_to_raster_xy ( <S2SV_ModStart> ; int aoff = 0, loff = 0 <S2SV_ModEnd> ; txfrm_block_to_raster_xy ( <S2SV_ModStart> ; int aoff = 0, loff = 0 <S2SV_ModEnd>",0
573,<S2SV_ModStart> pSelect -> pSrc ; if ( pSelect -> selFlags & SF_View ) return WRC_Abort,0
574,<S2SV_ModStart> ; serv = svc_create_pooled <S2SV_ModEnd> ( & nfs4_callback_program,1
575,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
576,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
577,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
578,"<S2SV_ModStart> { do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> s, 0 )",0
579,"<S2SV_ModStart> = NULL ; char * path = NULL ; <S2SV_ModStart> next ) { if ( strcmp ( prop_name, XML_ATTR_ID ) == 0 ) { continue ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else { <S2SV_ModStart> 0 ) { <S2SV_ModEnd> path = xml_get_path <S2SV_ModStart> ; } } }",0
580,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> SvcInternal * get_const_svc_internal <S2SV_ModStart> NULL ; return <S2SV_ModEnd> svc_ctx -> internal,0
581,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
582,"<S2SV_ModStart> only_420 ) { int i ; <S2SV_ModStart> char buffer [ 79 <S2SV_ModEnd> ] ; int <S2SV_ModStart> ; i < 79 <S2SV_ModEnd> ; i ++ <S2SV_ModStart> -> vpx_bps = 14 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_bps = 14 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_bps = 14 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_bps = 14 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_bps = 14 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_bps = 14 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_bps = 14 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_bps = 14 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I4",0
583,<S2SV_ModStart> buf ; { wizkit_addinv ( <S2SV_ModEnd> readobjnam ( buf <S2SV_ModStart> * ) 0 <S2SV_ModEnd> ) ; },0
584,<S2SV_ModStart> ( ) { <S2SV_ModEnd> if ( read_xattrs_from_disk <S2SV_ModStart> == 0 ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( read_uids_guids <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( parse_exports_table <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( read_fragment_table <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( read_inode_table <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( read_directory_table <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_,0
585,"<S2SV_ModStart> rule * rule, const char * * environ <S2SV_ModStart> count = 0 <S2SV_ModEnd> ; for ( <S2SV_ModStart> ; } } <S2SV_ModEnd> return env ;",0
586,"<S2SV_ModStart> -> seg ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> -> base_qindex, cpi -> in_frame_q_adj_ratio <S2SV_ModEnd> [ segment ] <S2SV_ModStart> ; } } vpx_memset ( cpi -> segmentation_map, 0, cm -> mi_rows * cm -> mi_cols ) ; vpx_memset ( cpi -> complexity_map, 0, cm -> mi_rows * cm -> mi_cols ) ; vp9_enable_segmentation ( seg ) ; vp9_clearall_segfeatures ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vp9_disable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> frame_type, cm -> base_qindex, cm -> in_frame_q_adj_ratio [ segment ] ) ; vp9_enable_segfeature ( seg, segment, SEG_LVL_ALT_Q )",0
587,"<S2SV_ModStart>, Module_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, mod_type, 0 <S2SV_ModEnd>, 1 ) <S2SV_ModStart>, mod_type, 0 <S2SV_ModEnd>, 1 ) <S2SV_ModStart>, mod_type, 0 <S2SV_ModEnd>, 1 ) <S2SV_ModStart>, mod_type, 0 <S2SV_ModEnd>, 1 ) <S2SV_ModStart>, mod_type, 0 <S2SV_ModEnd>, 1 ) <S2SV_ModStart>, stmt_type, 0 <S2SV_ModEnd>, 5 ) <S2SV_ModStart>, stmt_type, 0 <S2SV_ModEnd>, 5 ) <S2SV_ModStart>, stmt_type, 0 <S2SV_ModEnd>, 5 ) <S2SV_ModStart>, stmt_type, 0 <S2SV_ModEnd>, 5 ) <S2SV_ModStart>, stmt_type, 0 <S2SV_ModEnd>, 5 ) <S2SV_ModStart>, stmt_type, 0 <S2SV_ModEnd>, 5 ) <S2SV_ModStart>, stmt_type, 0 <S2SV_ModEnd>, 5 ) <S2SV_ModStart>, stmt_type, 0 <S2SV_ModEnd>, 5 ) <S2SV_ModStart>, stmt_type, 0 <S2SV_ModEnd>, 5 ) <S2SV_ModStart>, stmt_type, 0 <S2SV_ModEnd>, 5 ) <S2SV_ModStart>, stmt_type, 0 <S2SV_ModEnd>, 5 ) <S2SV_ModStart>, stmt_type, 0 <S2SV_ModEnd>, 5 ) <S2SV_ModStart>, stmt_type, 0 <S2SV_ModEnd>, 5 ) <S2SV_ModStart>, stmt_type, 0 <S2SV_ModEnd>, 5 ) <S2SV_ModStart>, stmt_type, 0 <S2SV_ModEnd>, 5 ) <S2SV_ModStart>, stmt_type, 0 <S2SV_ModEnd>, 5 ) <S2SV_ModStart>, stmt_type, 0 <S2SV_ModEnd>, 5 ) <S2SV_ModStart>",0
588,<S2SV_ModStart> } logfile_fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> S_IWGRP | S_IROTH ) <S2SV_ModStart> return ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart> 16 ) ; ),0
589,<S2SV_ModStart> ; } # else ( void ) cpi ; #,1
590,"<S2SV_ModStart> cinput ) { <S2SV_ModEnd> char * s <S2SV_ModStart>, * StartClean <S2SV_ModEnd> ; SetDefaults ( <S2SV_ModStart> t ++ ; sprintf ( outputbuffer <S2SV_ModEnd>, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"", <S2SV_ModStart> = outputbuffer ; sprintf ( outputbuffer <S2SV_ModEnd>, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"", <S2SV_ModStart> = 1 ; sprintf ( outputbuffer <S2SV_ModEnd>, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", <S2SV_ModStart> SUBVERSION ) ; fputs ( outputbuffer, stdout <S2SV_ModEnd> ) ; return <S2SV_ModStart> ) ) { <S2SV_ModEnd> ReadArray ( t <S2SV_ModStart>, & num2 <S2SV_ModEnd> ) ; if",0
591,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lower, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { int res ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { lower = NULL ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_upper, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { int res ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { upper = NULL ; } if ( lookup_attr_id ( obj, & PyId_step, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { step = NULL ; } * out = Slice ( lower, upper,",0
592,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
593,"<S2SV_ModStart> extack ) ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; return - EOPNOTSUPP ; } <S2SV_ModEnd> tos_off = proto <S2SV_ModStart> ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; return - EOPNOTSUPP <S2SV_ModEnd> ; } } <S2SV_ModStart>! match ) { err = <S2SV_ModEnd> - ENOMEM ; <S2SV_ModStart> - ENOMEM ; goto err_delete ; } <S2SV_ModStart> knode ) ; kfree ( match ) ;",0
594,<S2SV_ModStart> ) ; } if ( stream -> config. cfg. g_pass!= VPX_RC_ONE_PASS ) { <S2SV_ModStart> : VPX_RC_ONE_PASS ; } else { stream -> config. cfg. g_pass = VPX_RC_LAST_PASS ; } <S2SV_ModStart> ( pass ) { <S2SV_ModStart> stats ) ; },0
595,"<S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( new_data, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( new_data,",0
596,<S2SV_ModStart> data_end ) { const <S2SV_ModStart> end = NULL <S2SV_ModEnd> ; assert ( <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> aligned_cols ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> aligned_cols ) ; memset <S2SV_ModEnd> ( cm ->,0
597,"<S2SV_ModStart> * vp9_decoder_create ( <S2SV_ModEnd> VP9D_CONFIG * oxcf <S2SV_ModStart> ovcf ) { VP9Decoder * const pbi = vpx_calloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> pbi ) ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> = 1 ; vpx_memset ( & pbi -> ref_frame_map, - 1, sizeof ( pbi -> ref_frame_map ) ) ; pbi <S2SV_ModEnd> -> current_video_frame = <S2SV_ModStart> = 0 ; pbi <S2SV_ModEnd> -> oxcf = <S2SV_ModStart> = 1 ; pbi <S2SV_ModEnd> -> ready_for_new_data = <S2SV_ModStart> = 1 ; pbi <S2SV_ModEnd> -> decoded_key_frame = <S2SV_ModStart> = 0 ; vp9_init_dequantizer ( cm ) ; vp9_loop_filter_init ( cm ) ; cm -> error. setjmp = 0 ; vp9_worker_init ( & pbi -> lf_worker <S2SV_ModEnd> ) ; return",0
598,"<S2SV_ModStart> dref ) { GF_LOG_DEBUG <S2SV_ModEnd> ( GF_LOG_ERROR, <S2SV_ModStart> GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" <S2SV_ModEnd> ) ) ;",0
599,<S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> || opt -> opt. <S2SV_ModStart> || opt -> opt.,0
600,"<S2SV_ModStart> tokens, const vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> do { const vpx_tree_index <S2SV_ModEnd> j = tree",1
601,<S2SV_ModStart> ( img ) { <S2SV_ModStart> img ) ; if ( res!= VPX_CODEC_OK ) return res ; },0
602,"<S2SV_ModStart>, & len, 0",1
603,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> in ) { memset ( s, 0, 16 ) ; memset ( x, 0, 16 ) ; memset ( u, 0, 32 ) ; memset ( v, 0, 32 ) ;",0
604,"<S2SV_ModStart> rc, const VP9EncoderConfig <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> ) rc -> avg_frame_bandwidth <S2SV_ModEnd> * ( int64_t",1
605,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
606,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_superblock ( VP9_COMP <S2SV_ModStart> * cpi, <S2SV_ModEnd> int mi_row, <S2SV_ModStart> BLOCK_SIZE bsize ) { VP9_COMMON * const cm = & cpi -> common ; MACROBLOCK * const x = & cpi -> mb ; MACROBLOCKD * const xd = & x -> e_mbd ; MODE_INFO * * mi = mi_8x8 [ 0 ] ; MB_MODE_INFO * mbmi = & mi -> mbmi ; PICK_MODE_CONTEXT * ctx = get_block_context ( x, bsize ) ; unsigned int segment_id = mbmi -> segment_id ; const int mis = cm -> mi_stride ; const int mi_width = num_8x8_blocks_wide_lookup [ bsize ] ; const int mi_height = num_8x8_blocks_high_lookup [ bsize ] ; int skip_recode =! x -> select_txfm_size && mbmi -> sb_type >= BLOCK_8X8 && cpi -> oxcf. aq_mode!= COMPLEX",0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr,0
608,"<S2SV_ModStart> range_max ) { int64_t <S2SV_ModEnd> value ; int <S2SV_ModStart> position, zeroes <S2SV_ModEnd>, j ; <S2SV_ModStart> gbc ) ; if ( ctx -> trace_enable ) { value = get_bits_long ( gbc, get_bits_left ( gbc ) ) ; if ( value < range_min || value > range_max ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""%s <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range: <S2SV_blank> "" ""%"" PRIu64 "", <S2SV_blank> but <S2SV_blank> must <S2SV_blank> be <S2SV_blank> in <S2SV_blank> [%"" PRIu64 "",%"" PRIu64 ""].\\n"", name, value, range_min, range_max ) ; return AVERROR_INVALIDDATA ; } zeroes = i = 0 ; while ( get_bits_left ( gbc ) < value ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits1 ( gbc ) ) { bits [ i ++ ] = '1' ; break ; } else { bits [ i ++",0
609,"<S2SV_ModStart> || strchr ( ""!#$%&\'*+-.^_`|^"" <S2SV_ModEnd>, c ) <S2SV_ModStart> || strchr ( ""!#$%&\'*+-.^_`|^"" <S2SV_ModEnd>, c )",0
610,"<S2SV_ModStart>, packet -> <S2SV_ModEnd> http_cookie. ptr",0
611,<S2SV_ModStart> 4 ) { if ( ( x + 4 ) > ( ssize_t ) dds_info -> width || ( y + 4 ) > ( ssize_t ) dds_info -> height ) return MagickFalse ;,0
612,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL ) <S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL )",1
613,<S2SV_ModStart> action ) { if ( w < 0 || h < 0 ) { return ; },0
614,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; if ( outpos >= outputbuffer + strlen ( outputbuffer ) ) { perror ( ""Error <S2SV_blank> in <S2SV_blank> SetTransferMatrix"" ) ; exit ( EXIT_FAILURE ) ; }",0
615,"<S2SV_ModStart>, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" ) ; if ( Stream_GetRemainingLength ( s ) < 4 ) return FALSE",0
616,"<S2SV_ModStart> recon_y_stride, recon_uv_stride, cm -> yv12_fb [ dst_fb_idx ]. y_stride <S2SV_ModStart> recon_uv_stride, recon_y_stride, cm -> yv12_fb [ dst_fb_idx ]. uv_stride",0
617,<S2SV_ModStart> -> b_multithreaded_rd ) { <S2SV_ModStart> mb_rows ) ; },0
618,<S2SV_ModStart> { if ( ( <S2SV_ModStart> xWantedSize > 0 ) && ( xWantedSize + xHeapStructSize ) > xWantedSize <S2SV_ModStart> 0x00 ) { if ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) > xWantedSize ) { mtCOVERAGE_TEST_MARKER ( ) ; } <S2SV_ModStart> portBYTE_ALIGNMENT_MASK ) ) ; xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ),0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,"<S2SV_ModStart> s ) { uint32 num_updates ; uint32 left, top, right, bottom, width, height ; uint32 cx, cy, bpp, compress, bufsize, size ; uint8 * data, * bmpdata ; int i ; if (! s_check_rem ( s ) ) { <S2SV_ModEnd> logger ( Protocol <S2SV_ModStart>, Debug, ""process_bitmap_updates(), <S2SV_blank> stream <S2SV_blank> corrupted"" ) ; return ; } <S2SV_ModEnd> num_updates = in_uint16_le <S2SV_ModStart> ++ ) { if (! s_check_rem ( s ) ) { continue ; } <S2SV_ModStart> + 1 ; <S2SV_ModEnd> if (!",0
621,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
622,"<S2SV_ModStart> tx_size, vp9_coeff_stats coef_stats <S2SV_ModEnd> ) { vp9_coeff_probs_model <S2SV_ModStart> tx_size ] ; vpx_coeff_counts <S2SV_ModEnd> * coef_counts = <S2SV_ModStart> { vp9_tree_probs_from_distribution ( vp9_tree_probs <S2SV_ModEnd>, coef_branch_ct [",0
623,"<S2SV_ModStart> ( name ) ; if (! access_ok ( VERIFY_WRITE, fd, F_OK ) ) return - EACCES",0
624,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static void <S2SV_ModEnd> su3000_frontend_attach ( struct <S2SV_ModStart> dvb_usb_adapter * d, struct dvb_frontend_state * state <S2SV_ModStart> 0 } ; mutex_lock ( & d -> data_mutex ) ; <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; mutex_unlock ( & d -> data_mutex ) ; <S2SV_ModStart> = 1 ; mutex_unlock ( & d -> data_mutex ) ; <S2SV_ModStart> 300 ) ; mutex_lock ( & d -> data_mutex ) ; <S2SV_ModStart> = 0 ; mutex_unlock ( & d -> data_mutex ) ; <S2SV_ModStart> = 0 ; mutex_unlock ( & d -> data_mutex ) ; <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; mutex_unlock ( & d -> data_mutex ) ; <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; mutex_unlock ( & d -> data_mutex ) ; <S2SV_ModStart> ""command <S2SV_blank> 0x51 <S2SV_blank> transfer <S2SV_blank> failed."" ) ; mutex_lock ( & d -> data_mutex ) ; <S2SV_ModStart> dvb_attach ( ds3000_attach, & su3000_ds3000_",0
625,"<S2SV_ModStart>, vpx_codec_enc_cfg_t * enc_cfg <S2SV_ModEnd>, vpx_codec_flags_t flags <S2SV_ModStart> ( ( flags & ( VPX_CODEC_USE_XMA | VPX_CODEC_USE_PSNR | VPX_CODEC_USE_OUTPUT_PARTITION ) ) && ( enc_cfg <S2SV_ModEnd> -> caps & <S2SV_ModStart> ) &&! enc_cfg <S2SV_ModEnd> -> caps & <S2SV_ModStart> ) ; } <S2SV_ModEnd> } return SAVE_STATUS",0
626,"<S2SV_ModStart>, int uv_block_size, int mv_row, int mv_col, struct scale_factors * scale, int x, int y ) { const int which_mv = 0 ; const MV mv = { mv_row, mv_col } ; const InterpKernel * const kernel = vp9_get_interp_kernel ( xd -> mi [ 0 ] -> mbmi. interp_filter ) ; enum mv_precision mv_precision_uv ; int uv_stride ; vp9_build_inter_predictor ( y_mb_ptr, stride, & pred [ 0 ], 16, & mv, scale, 16, 16, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vp9_build_inter_predictor ( u_mb_ptr, uv_stride, & pred [ 256 ], uv_block_size, & mv, scale, uv_block_size, uv_block_size, which_mv, kernel, mv_precision_uv, x, y ) ; vp9_build_inter_predictor ( v_mb_ptr, uv_stride, & pred [ 512 ], uv_block_size,",0
627,"<S2SV_ModStart> = TRUE ; if ( strlen ( origbuf ) + 1 > BUFSZ ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> too <S2SV_blank> long <S2SV_blank> \\""%s\\"""", origbuf ) ; return FALSE ; }",0
628,"<S2SV_ModStart> * cJSON_CreateFloatArray ( const <S2SV_ModStart> * numbers, size_t <S2SV_ModEnd> count ) { <S2SV_ModStart> i ) { if (! ( <S2SV_ModStart> i ] ) ) ) return 0",0
629,"<S2SV_ModStart> data_end ) { const <S2SV_ModStart> pbi -> common ; const int max_threads = pbi -> oxcf. max_threads <S2SV_ModStart> = MIN ( <S2SV_ModEnd> max_threads & ~ <S2SV_ModStart> int num_workers = MIN ( <S2SV_ModEnd> max_threads & ~ <S2SV_ModStart> pbi -> oxcf -> max_threads, tile_cols ) ; TileBuffer tile_buffers [ 1 << 6 ] ; int n ; int final_worker = - 1 ; assert ( tile_cols <= ( 1 << 6 ) ) ; assert ( tile_rows == 1 ) ; ( void ) tile_rows ; if ( pbi -> num_tile_workers == 0 ) { const int num_threads = pbi -> oxcf -> max_threads & ~ 1 ; int i ; CHECK_MEM_ERROR ( cm, pbi -> tile_workers, vpx_malloc ( num_threads * sizeof ( * pbi -> tile_workers ) ) ) ; for ( i = 0 ; i < num_threads ; ++ i ) { VP9Worker * const worker = & pbi -> tile_workers [ i ] ; ++ pbi -> num_tile_workers ; vp9_worker_init ( worker ) ; CHECK_MEM",0
630,"<S2SV_ModStart> * 0x101 ; # ifdef LIBRAW_LIBRARY_BUILD if (! strncasecmp ( model, ""DSLR-A100"", 9 ) ) return ; # endif <S2SV_ModStart> ( ) ; # ifdef LIBRAW_LIBRARY_BUILD if (! strncasecmp ( model, ""DSLR-A100"", 9 ) ) return ; # endif <S2SV_ModStart> case 0x505244 : # ifdef LIBRAW_LIBRARY_BUILD if (! strncasecmp ( model, ""DSLR-A100"", 9 ) ) return ; # endif <S2SV_ModStart> case 0x524946 : # ifdef LIBRAW_LIBRARY_BUILD if (! strncasecmp ( model, ""DSLR-A100"", 9 ) ) return ; # endif",0
631,"<S2SV_ModStart> -> common ; vpx_clear_system_state ( ) ; <S2SV_ModStart> cm -> seg <S2SV_ModEnd> ; int i <S2SV_ModStart> = SEGMENT_DELTADATA ; <S2SV_ModEnd> for ( i <S2SV_ModStart> ++ ) { vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, qindex_delta ) ; vpx_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q ) ; } } vp9_enable_segmentation ( seg ) ; vp9_clearall_segfeatures ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vpx_clear_system_state ( ) ; for ( i = ENERGY_MIN ; i <= ENERGY_MAX ; i ++ ) { int qindex_delta, segment_rdmult ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; } qindex_delta = vp9_compute_qdelta ( & cpi -> rc, base_q, base_q * Q_RATIO ( i ) ) ; vpx",0
632,"<S2SV_ModStart> -> error_code ) memcpy ( & <S2SV_ModStart> ctx -> base, error, sizeof ( ctx -> base ) ) <S2SV_ModEnd> ; return error",0
633,"<S2SV_ModStart> pocstruct_t * ps_prev_poc = NULL <S2SV_ModStart>, * ps_cur_poc = NULL",0
634,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet ),0
635,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int getnum (,0
636,<S2SV_ModStart> g -> reallyold <S2SV_ModEnd> ) ; atomic,0
637,<S2SV_ModStart> 0 ; else { ret = <S2SV_ModEnd> - EIO ; <S2SV_ModStart> - EIO ; goto err ; },0
638,"<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } <S2SV_ModEnd> memset ( buffer <S2SV_ModStart> buffer ) ; <S2SV_ModEnd> s_write ( c",0
639,"<S2SV_ModStart> * cib, remote_connection_dispatch_t dispatch, remote_connection_destroy_t destroy <S2SV_ModEnd> ) { int <S2SV_ModStart> -> variant_opaque ; <S2SV_ModEnd> int rc = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> int ret_ga ; <S2SV_ModStart> static struct mainloop_fd_callbacks * cib_fd_callbacks = malloc ( sizeof ( * cib_fd_callbacks ) ) ; cib_fd_callbacks -> dispatch = dispatch ; cib_fd_callbacks -> destroy = destroy <S2SV_ModEnd> ; connection -> <S2SV_ModStart> = NULL ; connection -> socket = 0 ; connection -> session = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } bzero ( & hints, sizeof ( struct addrinfo ) ) ; hints. ai_flags = AI_CANONNAME ; hints. ai_family = AF_INET ; hints. ai_socktype = SOCK_RAW ; if ( hints. ai_family == AF_INET6 ) { hints. ai_protocol = IPPROTO_ICMPV6 ; } else { hints. ai",0
640,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi,",0
641,"<S2SV_ModStart> ) ) ; ND_TCHECK2 ( bp [ 26 ], sizeof ( struct icmp6_hdr ) ) ;",0
642,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command",0
643,"<S2SV_ModStart> ] ; Image <S2SV_ModEnd> status ; register <S2SV_ModStart>, length, <S2SV_ModEnd> value, version <S2SV_ModStart> length, padding <S2SV_ModEnd> ; assert ( <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows, image -> columns, image -> colors ) ; if ( status == MagickFalse ) { image = DestroyImageList ( image ) ; return ( ( Image * ) NULL ) ; }",0
644,"<S2SV_ModStart> ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> image <S2SV_blank> header\\n"" ) ; jas_ms_destroy ( enc -> mrk ) ; <S2SV_ModStart> ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> image <S2SV_blank> header\\n"" ) ; jas_ms_destroy ( enc -> mrk ) ; <S2SV_ModStart> ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> image <S2SV_blank> header\\n"" ) ; jas_ms_destroy ( enc -> mrk ) ; <S2SV_ModStart> ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> image <S2SV_blank> header\\n"" ) ; jas_ms_destroy ( enc -> mrk ) ; <S2SV_ModStart> ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> image <S2SV_blank> header\\n"" ) ; jas_ms_destroy ( enc -> mrk ) ; <S2SV_ModStart> ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> image <S2SV_blank> header\\n"" ) ; jas_ms_destroy ( enc -> mrk ) ; <S2SV_ModStart> ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> image <S2SV_blank> header\\n"" ) ; jas_ms_destroy ( enc -> mrk ) ;",0
645,<S2SV_ModStart> ; if (! chanmode_found ) { free ( new_modes ) ; free ( new_args ) ; return ; } if (,0
646,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> - m + vpx_read_bit <S2SV_ModEnd> ( r )",1
647,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
648,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> REFERENCE_MODE mode = vpx_read <S2SV_ModEnd> ( r,",0
649,"<S2SV_ModStart>! stream ) { <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; } <S2SV_ModStart> ( res ) { <S2SV_ModStart> ) ) ; } <S2SV_ModStart> stereo_fmt = STEREO_FORMAT_MONO <S2SV_ModEnd> ; # if",0
650,"<S2SV_ModStart> ) ) ; if ( op -> nd_opt_len < 4 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u), <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""unknown"", op -> nd_opt_type ), op -> nd_opt_len << 3, op -> nd_opt_len ) ) ; goto trunc ; }",0
651,<S2SV_ModStart> -> root_node = yr_malloc ( sizeof ( RE_AST ) ) ; if ( * re_ast -> root_node == NULL ) return ERROR_INSUFFICIENT_MEMORY ; ( * re_ast ) -> root_node -> next = yr_malloc ( sizeof ( RE_AST ) ) ; if ( ( * re_ast ) -> root_node == NULL ) return ERROR_INSUFFICIENT_MEMORY ; ( * re_ast ) -> root_node -> next = yr_malloc ( sizeof ( RE_AST ) ) ; if ( ( * re_ast ) -> root_node == NULL ) return ERROR_INSUFFICIENT_MEMORY ; ( * re_ast ) -> root_node -> next = yr_malloc ( sizeof ( RE_AST ) ) ; if ( ( * re_ast ) -> root_node -> next == NULL ) return ERROR_INSUFFICIENT_MEMORY ; ( * re_ast ) -> root_node -> next -> prev = yr_malloc ( sizeof ( RE_AST ) ) ; ( * re_ast ) -> root_node -> next -> prev = yr_malloc ( sizeof,0
652,"<S2SV_ModStart> ) ) ; if (! t_str_has_prefix ( error, key -> key -> key ) ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key -> key, error ) ; continue ; } <S2SV_ModStart> if ( ret < <S2SV_ModEnd> 0 ) { <S2SV_ModStart>, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; continue <S2SV_ModEnd> ; } ret <S2SV_ModStart> 0 ) { auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> = <S2SV_blank> %s"", str_c ( path ), key -> value ) ; } else if ( ret < 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> lookup <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", str_c ( path ), error ) ; continue ; } else if ( key -> key -> default_value!= NULL ) { auth_request_",0
653,<S2SV_ModStart> -> level = 1 <S2SV_ModEnd> ; tok ->,0
654,<S2SV_ModStart> av1 -> av1_config && av1 -> av1_config -> config,1
655,<S2SV_ModStart> dpbSize ) ; if ( picSizeInMbs == 0 || dpbSize == 0 ) { return ( MEMORY_ALLOCATION_ERROR ) ; },0
656,"<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> (! sock ||! addr <S2SV_ModStart> OE_EINVAL ) ; addrlen_out = * addrlen ; if ( addrlen_in > OE_SSIZE_MAX ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } <S2SV_ModStart> ( addrlen ) { <S2SV_ModStart> * addrlen ; } <S2SV_ModStart>, addrlen_in, & addrlen_out <S2SV_ModEnd> )!= OE_OK <S2SV_ModStart> ) ; } if ( addrlen_in > OE_SSIZE_MAX ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( addrlen_out > OE_SSIZE_MAX ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; * addrlen = addrlen_out ; }",0
657,,1
658,<S2SV_ModStart> FALSE ; } if (!,0
659,<S2SV_ModStart> ipv6_pinfo * np <S2SV_ModEnd> ; struct ipv6_txoptions <S2SV_ModStart> ) ; } np = inet6_sk ( sk ) ;,0
660,"<S2SV_ModStart> ; unsigned int <S2SV_ModEnd> found, upx_success <S2SV_ModStart> size_t fsize ; uint64_t valign ; uint32_t <S2SV_ModEnd> hdr_size, j <S2SV_ModStart> j ; struct cli_exe_section * exe_sections ; char timestr [ 32 ] ; struct pe_image_data_dir * dirs ; struct cli_bc_ctx * bc_ctx ; fmap_t * map ; struct cli_pe_hook_data pedata ; # ifdef HAVE__INTERNAL__SHA_COLLECT int sha_collect = ctx -> sha_collect ; # endif const char * archtype = NULL ; const char * subsystem = NULL ; uint32_t viruses_found = 0 ; # if HAVE_JSON int toval = 0 ; struct json_object * pe_json = NULL ; char jsonbuf [ 128 ] ; # endif # if HAVE_JSON int toval = 0 ; struct json_object * pe_json = NULL ; # endif # if HAVE_JSON int toval = 0 ; struct json_object * pe_json = NULL ; # endif # if HAVE_JSON int toval = 0 ; uint32_t <S2SV_ModEnd> valign, falign <S2SV_ModStart>, hdr",0
661,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR <S2SV_ModEnd> ) & EPCR_ERRE <S2SV_ModStart> } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; usleep <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPDRH <S2SV_ModEnd> ) << 8 <S2SV_ModStart> | dm9000ReadReg ( DM9000_EPDRL <S2SV_ModEnd> ) ; }",0
662,"<S2SV_ModStart> pcmk_ok ) { if (! cib_tls_signon ( cib, & ( private -> command ) ) ) { fprintf ( stderr, ""%s: <S2SV_blank> Connection <S2SV_blank> to <S2SV_blank> %s:%d <S2SV_blank> failed: <S2SV_blank> %s\\n"", name, private -> server, private -> port, pcmk_strerror ( - rc ) ) ; return rc ; } <S2SV_ModStart> pcmk_ok ) { if (! cib_tls_signon ( cib, & ( private -> callback ) ) ) { fprintf ( stderr, ""%s: <S2SV_blank> Connection <S2SV_blank> to <S2SV_blank> %s:%d <S2SV_blank> failed: <S2SV_blank> %s\\n"", name, private -> server, private -> port, pcmk_strerror ( - rc ) ) ; return rc ; } <S2SV_ModStart> pcmk_ok ) { if (! cib_tls_signon ( cib, & ( private -> callback ) ) ) { fprintf ( stderr, ""%s: <S2SV_blank> Connection <S2SV_blank> to <S2SV_blank> %s:%d <S2SV_blank> failed: <S2SV_blank> %s\\n"", name, private -> server, private -> port, pcmk_strerror ( - rc ) ) ; return rc ; }",0
663,"<S2SV_ModStart> ; msg. msg_namelen = sizeof ( address ) ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; err = sock_recvmsg ( sock, & msg, size, flags ) ; if ( err >= 0 && addr!= NULL ) { err2 = move_addr_to_user ( & address, msg. msg_namelen, addr, addr_len ) ; if ( err2 < 0 ) err = err2 ; } fput_light ( sock -> file, fput_needed ) ; msg. <S2SV_ModStart> & address ; <S2SV_ModEnd> err = sock_recvmsg",0
664,"<S2SV_ModStart> num00, tmp_err <S2SV_ModEnd>, sr = <S2SV_ModStart> bsize ] ; <S2SV_ModEnd> const int quart_frm <S2SV_ModStart> int quart_frm = MIN ( cpi -> common. width, cpi -> common. height ) ; vpx_variance_fn_ptr_t vpx_fn_ptr = cpi -> fn_ptr [ bsize ] ; vpx_fn_ptr. vf = get_block_variance_fn ( bsize ) ; tmp_err = cpi -> diamond_search_sad ( x, & ref_mv_full, & tmp_mv, step_param, x -> sadperbit16, & num00, & vpx_fn_ptr, x -> nmvjointcost, x -> mvcost, ref_mv ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & vpx_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX - new_mv_mode_penalty ) tmp_err += new_mv_mode_penalty ; if ( tmp_err <",0
665,<S2SV_ModStart> ; if ( h -> addr == MAP_FAILED ) goto error ; if (,0
666,<S2SV_ModStart> ; # endif if ( child -> of_limit_action == NOT_SET && parent -> of_limit_action == NOT_SET && child -> of_limit_action == NOT_SET && parent -> of_limit_action == NOT_SET && child -> of_limit_action == NOT_SET && child -> of_limit_action == NOT_SET && parent -> of_limit_action == NOT_SET && child -> of_limit_action == NOT_SET && parent -> of_limit_action == NOT_SET && child -> of_limit_action == NOT_SET && parent -> of_limit_action == NOT_SET && child -> of_limit_action == NOT_SET && parent -> of_limit_action == NOT_SET && child -> of_limit_action == NOT_SET && parent -> of_limit_action == NOT_SET && parent -> of_limit_action == NOT_SET && parent -> of_limit_action == NOT_SET && parent -> of_limit_action == NOT_SET && child -> of_limit_action == NOT_SET && parent -> of_limit_action == NOT_SET && parent -> of_limit_action ==,0
667,"<S2SV_ModStart>, one, <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_planes ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( Cor",0
668,<S2SV_ModStart> ( r = <S2SV_ModEnd> sshbuf_put_cstring ( b,1
669,<S2SV_ModStart> ) ) { ovalue = sclone ( <S2SV_ModEnd> stok ( option <S2SV_ModStart> & ovalue ) ),0
670,"<S2SV_ModStart> client = user_data ; crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client"" ) <S2SV_ModStart> user ) ; <S2SV_ModEnd> if ( cib_shutdown_flag",0
671,"<S2SV_ModStart> * uv ; if (! iswhite ( thread ) ) markvalue ( g, thread -> v ) ; <S2SV_ModStart> next ) { <S2SV_ModEnd> if (!",0
