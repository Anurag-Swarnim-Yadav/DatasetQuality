,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
1,"<S2SV_ModStart> skb ) ; unfrag_ip6hlen = min_t ( int, unfrag_ip6hlen, skb -> len - offset ) ;",0
2,<S2SV_ModStart> 0 ) ; if ( writer -> stco ),0
3,"<S2SV_ModStart> item ) { return cJSON_GetItemRecursive ( array, item, 0, 0 ) <S2SV_ModEnd> ; } <S2SV_null>",0
4,"<S2SV_ModStart> u64 nr, u64 <S2SV_ModEnd> regs, u64 <S2SV_ModStart>, nr, <S2SV_ModEnd> regs,",0
5,"<S2SV_ModStart> EXT4_EXTENTS_FLAG ) { <S2SV_ModEnd> struct grub_ext4_extent_header * <S2SV_ModStart> leaf ) { <S2SV_ModEnd> return - 1 <S2SV_ModStart> block ) ; return fileblock + <S2SV_ModEnd> ext [ i <S2SV_ModStart> ]. len <S2SV_ModEnd> ; } } <S2SV_ModStart> 0 ; else <S2SV_ModEnd> { grub_disk_addr_t start <S2SV_ModStart> start ) ; if ( start >= EXT2_BLOCK_SIZE ( data ) ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } <S2SV_ModEnd> } } else",0
6,"<S2SV_ModStart> fdct16 ( const tran_low_t <S2SV_ModEnd> in [ 16 <S2SV_ModStart> 16 ], tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> ] ) { tran_high_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step2 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step3 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> input [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> temp1, temp2 <S2SV_ModStart> ] ; { tran_low_t <S2SV_ModEnd> s0, s1 <S2SV_ModStart>, s7 ; tran_high_t <S2SV_ModEnd> t0, t1 <S2SV_ModStart>, t3 ; tran_high_t <S2SV_ModEnd> x0, x1 <S2SV_ModStart> x2, x3 ; int temp1, temp2 ; int temp3 ; int temp4 ; int temp5 ; int temp6 ; int temp7 ; int temp0 ; int temp1 ; int temp2 ; int temp4 ; int temp5 ; int temp6 ; int temp7 ; int temp0 ; int temp0 ; int temp1 ; int temp2 ; int temp3 ; int temp4 ; int temp5 ; int temp6 ; int temp7 ; int temp0 ; int temp0 ; int temp0",0
7,<S2SV_ModStart> ; if ( hlen < 0 || hlen > len ) return 0 ; if (,0
8,"<S2SV_ModStart> search_filter_level ( const YV12_COMMON * cm, struct loopfilter * lf, int filt_direction, int filt_high, int filt_low, int filt_err <S2SV_ModEnd>, int partial_frame <S2SV_ModStart> partial_frame ) { <S2SV_ModEnd> const int min_filter_level <S2SV_ModStart> ) ; int best_err ; int filt_best ; int filt_direction <S2SV_ModEnd> ; int filt_mid <S2SV_ModStart> / 4 ; <S2SV_ModEnd> while ( filter_step <S2SV_ModStart> min_filter_level ) ; <S2SV_ModEnd> int bias = <S2SV_ModStart> * filter_step ; <S2SV_ModEnd> if ( cpi <S2SV_ModStart> twopass. section_intra_rating > 0 ) { if ( ss_err [ filt_low ] < 0 ) { filt_err = try_filter_frame ( sd, cpi, filt_low, partial_frame ) ; ss_err [ filt_low ] = filt_err ; } else { filt_err = ss_err [ filt_low ] ; } } else { filt_err = try_filter_frame ( sd, cpi, filt_low, partial_frame ) ; } if ( filt_direction <= 0 && filt_low!= filt_mid ) { if ( ss_err [ filt_",0
9,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
10,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ++ i ) vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( usehp ) vpx_write <S2SV_ModEnd> ( w,",1
11,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } else { <S2SV_ModEnd> request -> rxBlockSzx <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; },0
12,"<S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ( length > 4 <S2SV_ModEnd> ) { ND_PRINT <S2SV_ModStart> ) ptr, 4 <S2SV_ModEnd> ) ; }",0
13,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> construct_get_dest_keyring ( struct <S2SV_ModStart> * authkey ; int ret = 0 ; <S2SV_ModStart> dest_keyring ) ; ret = key_permission ( make_key_ref ( dest_keyring, KEY_NEED_WRITE ), & key_type_keymap ) ; if ( ret ) return ret ; <S2SV_ModStart> ( dest_keyring ) { ret = - EPERM ; goto out ; } <S2SV_ModEnd> } case KEY_REQKEY_DEFL_THREAD_KEYRING <S2SV_ModStart> ) ; } out :",0
14,<S2SV_ModStart> = create_spnego_ctx ( 0,0
15,<S2SV_ModStart> int len ; # ifdef HAVE_LOCALTIME <S2SV_ModStart> t ) ; # else tm = localtime_r ( & t ) ; # endif,0
16,<S2SV_ModStart> length ) ; if ( strlen ( password ) > 0 ) { <S2SV_ModStart> ) ) ; },0
17,<S2SV_ModStart> e == p || e - p > HOST_NAME_MAX,0
18,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",1
19,<S2SV_ModStart> = 0 ; if ( <S2SV_ModStart> & timeout ) == 0 ) { if ( errno == EINTR ) return false ; } <S2SV_ModEnd> return FD_ISSET (,0
20,"<S2SV_ModStart> detect_transition_to_still ( struct twopass_data <S2SV_ModEnd> * twopass, <S2SV_ModStart> last_decay_rate ) { <S2SV_ModEnd> if ( frame_interval <S2SV_ModStart> ; if ( still_interval > MIN_STILL_INTERVAL <S2SV_ModEnd> && loop_decay_rate >= <S2SV_ModStart> * position = & <S2SV_ModStart> twopass -> stats_in [ 0 ] <S2SV_ModStart> { if (! <S2SV_ModEnd> input_stats ( twopass <S2SV_ModStart>, & tmp_next_frame, 0 <S2SV_ModStart> } reset_fpf_position ( & <S2SV_ModStart> j == still_interval &&! twopass -> is_in_progress <S2SV_ModStart> 1 ; } else { trans_to_still = 0 ; }",0
21,"<S2SV_ModStart> inode ) ) { if ( offset + size > i_size_read ( inode ) ) { printk ( KERN_EMERG ""%s: <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, ret, inode -> i_ino ) ; return ret ; } <S2SV_ModStart> size ) ; }",0
22,"<S2SV_ModStart> alg ) { if (! try_module_get ( name ) ) { if (! try_module_get ( name ) ) { <S2SV_ModEnd> if (! <S2SV_ModStart> CRYPTO_ALG_NEED_FALLBACK ) ) { if (! try_module_get ( name ) ) { if (! try_module_get ( name ) ) { request_module ( ""%s"", name ) ; } else { <S2SV_ModStart> name ) ; } } } }",0
23,<S2SV_ModStart> = GIT_PKT_NG ; if ( len < 3 ) goto out_err ; <S2SV_ModStart> += 3 ; len -= 3 ; <S2SV_ModStart>'<S2SV_blank>') ) || len < 1 <S2SV_ModStart> = '\\0' ; len -= 1 ; <S2SV_ModStart> + 1 ; len -= 1 ; <S2SV_ModStart> '\\n' ) ) || len < 1,0
24,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> BYTE flags ; UINT32 <S2SV_ModEnd> length ; Stream_Read_UINT32,0
25,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; if (,0
26,"<S2SV_ModStart> mntent, path, rootfs",1
27,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io,0
28,<S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> (,0
29,"<S2SV_ModStart> ) ) ; ret &= btif_config_set_int ( bdstr, ""BTIF_MAX_PINS"", ( int ) BTIF_MAX_PINS ) ;",0
30,<S2SV_ModStart> vpx_codec_enc_cfg_map_t * map ; unsigned int max_usage = ( unsigned int ) ( INT_MAX - 1 ) <S2SV_ModStart>. cfg_maps ; ( int ) <S2SV_ModStart> map -> usage > <S2SV_ModEnd> 0 ; map <S2SV_ModStart> 0 ; map = map -> next ) { if ( map -> usage == ( int ) usage ) { * cfg = map -> cfg ; cfg -> g_usage = usage ; res = VPX_CODEC_OK ; break ; } } max_usage = ( unsigned int ) ( ( int ) ( map -> usage + 1 ) ) ; if ( max_usage < ( unsigned int ) usage ) { res = VPX_CODEC_INVALID_PARAM ; } for ( map = iface -> enc. cfg_maps ; map -> usage >= 0 ; map ++ ) { if ( map -> usage == ( int ) usage ) { * cfg = map -> cfg ; cfg -> g_usage = usage ; res = VPX_CODEC_OK ; break ; } } } } if ( res == VPX_CODEC_INVALID_PARAM ) { res = VPX_CODEC_INVALID_PARAM ; } else { for ( map = iface,0
31,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
32,"<S2SV_ModStart> void show_progress ( uint64_t frame_in, uint64_t <S2SV_ModEnd> frame_out, uint64_t",0
33,"<S2SV_ModStart> ; if ( mysql_result_is_null ( imp_sth -> result ) ) { do_error ( sth, JW_ERR_INTERNAL, ""mysql_result <S2SV_blank> is <S2SV_blank> null"", NULL ) ; return Nullav ; } if (",0
34,"<S2SV_ModStart> NO_ERROR ; } if ( enc28j60GetReg ( interface, ENC28J60_ECON1 ) & ENC28J60_ECON1_TXRST ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_INVALID_LENGTH ; } <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF ) ; enc28j60SetReg ( interface, ENC28J60_ETXSTL, ENC28J60_ETXSTL_BITS ) ; enc28j60SetReg ( interface, ENC28J60_ETXSTH, ENC28J60_ETXSTH_BITS ) ; enc28j60SetReg ( interface, ENC28J60_EWRPTL, ENC28J60_ETXSTH_BITS ) ; enc28j60SetReg ( interface, ENC28J60_EWRPTH, ENC28J60_EWRPTH_BITS ) ; enc28j60WriteBuffer ( interface, buffer, offset ) ; enc28j60Set",0
35,<S2SV_ModStart> ; value = ast2obj_string <S2SV_ModEnd> ( o -> <S2SV_ModStart> ; value = ast2obj_string <S2SV_ModEnd> ( o ->,0
36,"<S2SV_ModStart> if ( page ) { if ( <S2SV_ModEnd> ( access ( <S2SV_ModStart> 0 ) ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } } else <S2SV_ModStart> ) ) { if ( <S2SV_ModEnd> ( unlink ( <S2SV_ModStart> 0 ) ) { if ( <S2SV_ModEnd> ( access ( <S2SV_ModStart> 0 ) ) { if ( <S2SV_ModEnd> ( access ( <S2SV_ModStart> 0 ) ) { if ( <S2SV_ModEnd> ( access ( <S2SV_ModStart> 0 ) ) { if ( <S2SV_ModEnd> ( access ( <S2SV_ModStart> 0 ) ) { if ( <S2SV_ModEnd> ( access ( <S2SV_ModStart> 0 ) ) { if ( <S2SV_ModEnd> ( access ( <S2SV_ModStart> 0 ) ) { if ( <S2SV_ModEnd> ( access ( <S2SV_ModStart> 0 ) ) { if ( <S2SV_ModEnd> ( access ( <S2SV_ModStart> 0 ) ) { if ( <S2SV_ModEnd> ( access ( <S2SV_ModStart> 0 ) ) { if ( <S2SV_ModEnd> ( access ( <S2SV_ModStart> 0 ) ) { if ( <S2SV_ModEnd> ( access ( <S2SV_ModStart> 0 ) ) { if ( <S2SV_ModEnd> ( access ( <S2SV_ModStart> 0 ) ) { if ( <S2SV_ModEnd> ( access ( <S2SV_ModStart> 0 ) ) { if ( <S2SV_ModEnd> ( access ( <S2SV_ModStart> 0 ) ) { if ( <S2SV_ModEnd> ( access ( <S2SV_ModStart> 0 ) ) { if ( <S2SV_ModEnd> ( access ( <S2SV_ModStart> 0 ) ) { if ( <S2SV_ModEnd> ( access ( <S2SV_ModStart> 0 ) ) { if",0
37,"<S2SV_ModStart> low_var_thresh, int mb_rows, int mb_cols, int flag, int * uv_out, int * uv_out_count <S2SV_ModEnd> ) { double <S2SV_ModStart>.5 ) ; <S2SV_ModEnd> unsigned char * <S2SV_ModStart> pp_limits_buffer ; ; <S2SV_ModEnd> ( void ) <S2SV_ModStart> ) flag ; memset <S2SV_ModEnd> ( limits, <S2SV_ModStart> 16 ) ; vp8_post_proc_down_and_across_mb_row_down <S2SV_ModEnd> ( source -> <S2SV_ModStart> 8 ) ; vp8_post_proc_down_and_across_mb_row_down <S2SV_ModEnd> ( source -> <S2SV_ModStart> 8 ) ; vp8_post_proc_down_and_across_mb_row_down <S2SV_ModEnd> ( source -> <S2SV_ModStart> ; } } }",0
38,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; error = mb2_cache_entry_alloc ( ext4_mb_cache, GFP_NOFS, hash, & ce ) ; if ( error ) <S2SV_ModEnd> return ; error <S2SV_ModStart> return ; } <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ( bh, ""inserting <S2SV_blank> [%x]"", ( int ) hash ) ; mb2_cache_entry_insert ( ext4_mb_cache, ce, <S2SV_ModEnd> hash ) ; <S2SV_ModStart> error ) { <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> hash ) ; <S2SV_ModEnd> } } <S2SV_null>",0
39,<S2SV_ModStart> ) ) ; * code = 200 ; * rlen = 0 ;,0
40,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> - ENOMEM ; opt = rcu_dereference_protected ( * optp, lockdep_is_held ( & ip_options_rcu_lock ) ) ; if (! opt ) { opt = ip_options_rcu_deref ( * optp ) ; if ( opt ) return - EFAULT ; }",0
41,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|truncated]"" <S2SV_ModEnd> ) ) ;",0
42,"<S2SV_ModStart> ) N_ ( ""E530: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'keybinding\' <S2SV_blank> in <S2SV_blank> a <S2SV_blank> non-interactive <S2SV_blank> mode"" <S2SV_ModEnd> ) ; else",0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode <S2SV_ModStart>, & new_mode, & acl ) ; if ( ret <S2SV_ModEnd> ) goto out",0
44,"<S2SV_ModStart> size_t size ; size_t cps ; <S2SV_ModStart> / 8 ; cps = ( depth + 7 ) / 8 ; <S2SV_ModStart> ( cmpt -> cps_, cps <S2SV_ModEnd>, & size",0
45,<S2SV_ModStart> dp == datalen || ( op & ASN1_OP__MATCHES_DPTR && flags & FLAG_MATCHED ) <S2SV_ModStart> ) || dp >= <S2SV_ModEnd> datalen ) {,0
46,"<S2SV_ModStart> * req, u32 <S2SV_ModEnd> * acl_len ) <S2SV_ModStart> acl_len ) { <S2SV_ModEnd> uint32_t attrlen, <S2SV_ModStart> int status ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> xdr, OP_GETATTR ) )!= 0 ) goto out ; if ( ( status = decode_op_hdr ( xdr, OP_ACL <S2SV_ModStart>, & attrlen <S2SV_ModEnd> ) )!= <S2SV_ModStart> { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"" <S2SV_ModEnd>, attrlen, <S2SV_ModStart> attrlen ) ; <S2SV_ModEnd> } else status",0
47,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
48,"<S2SV_ModStart> ) ) { if (! smatch ( auth, ""APPWEB"" ) ) { return MPR_ERR_BAD_SYNTAX ; } <S2SV_ModStart> ; } } if (! smatch ( tok, ""APPWEB"" ) ) { return MPR_ERR_BAD_SYNTAX ; }",0
49,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> addr = VPX_MALLOC_L <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; <S2SV_ModEnd> if ( addr,0
50,"<S2SV_ModStart> int res ; unsigned <S2SV_ModStart> inodes ) ; unsigned <S2SV_ModStart> long export_index_table [ SQUASHFS_LOOKUP_BLOCKS ( sBlk. s. inodes ) <S2SV_ModEnd> ] ; res <S2SV_ModStart> read_fs_bytes ( fd -> fd <S2SV_ModStart> ), export_index_table, indexes",0
51,<S2SV_ModStart> ; } else { <S2SV_ModStart> p1 ) ; },0
52,"<S2SV_ModStart> = 0 ; int is_vp8 = 0 ; int is_vp9 = 0 ; <S2SV_ModStart> vp9_arg_ctrl_map ; # else # if CONFIG_VP8_ENCODER } else if ( global -> codec -> name == NULL ) { is_vp8 = 1 ; is_vp9 = 0 ; } else if ( global -> codec -> name == NULL ) { is_vp9 = 1 ; is_vp9 = 0 ; } else if ( strcmp ( global -> codec -> name, ""vp9"" ) == 0 ) { ctrl_args = vp9_args ; ctrl_args_map = vp9_arg_ctrl_map ; # endif } else if ( is_vp8 ) { config -> out_fn = vp8_args [ 0 ] ; config -> stats_fn = vp9_args [ 0 ] ; } else if ( global -> codec -> name == NULL ) { is_vp8 = 1 ; is_vp9 = 1 ; } else if ( strcmp ( global -> codec -> name, ""vp8"" ) == 0 ) { config -> out_fn = vp8_args [ 0 ] ; config -> stats_fn = vp9_args [",0
53,<S2SV_ModStart> } if ( c -> opt -> option. client || c -> opt -> protocol ) return 0 ; if ( c -> opt -> redirect_addr. names ) return 1 ; if ( <S2SV_ModStart> 1 ; } <S2SV_ModEnd> return 0 ;,0
54,"<S2SV_ModStart> ; if ( crypto_memneq <S2SV_ModEnd> ( cmac,",0
55,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> const uint64_t bits_used <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
56,"<S2SV_ModStart> EOFOp 0x07 char * magick_buffer <S2SV_ModEnd> ; Image * <S2SV_ModStart> ) ) ; magick_buffer = ( char * ) MagickCalloc ( 12, sizeof ( char ) ) ; <S2SV_ModStart>, 2, magick_buffer <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart>. x = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. y = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. columns = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. rows = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> (",0
57,"<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> altsetting [ 0 ]. desc. bNumEndpoints < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; error = - EINVAL ; goto err_free_urb ; }",1
58,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
59,"<S2SV_ModStart> * dir = ""/tmp"" <S2SV_ModEnd> ; if (",0
60,<S2SV_ModStart> = value ; ps_pps -> i1_pic_type = value ;,0
61,"<S2SV_ModStart> ) ) { if ( n < 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; }",0
62,"<S2SV_ModStart> void vp9_setup_dst_planes ( MACROBLOCKD_CONTEXT * const xd_ctx, <S2SV_ModStart> mi_col ) { const <S2SV_ModStart> const buffers [ MAX_MB_PLANE <S2SV_ModEnd> ] = { <S2SV_ModStart> const int strides [ MAX_MB_PLANE <S2SV_ModEnd> ] = { <S2SV_ModStart> i ) { const <S2SV_ModStart> pd = & xd_ctx -> plane [ i ]. <S2SV_ModEnd> plane [ i",0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,<S2SV_ModStart> ) get_block = ocfs2_get_block_rmap <S2SV_ModEnd> ; else get_block <S2SV_ModStart> else get_block = ocfs2_dio_get_block_rmap <S2SV_ModEnd> ; return __blockdev_direct_IO,0
65,"<S2SV_ModStart> ; if ( fscanf_s ( f, <S2SV_ModEnd> ""%79s <S2SV_blank> %[^\\n]\\n"", def",0
66,"<S2SV_ModStart> n ) { <S2SV_ModEnd> int kind ; <S2SV_ModStart> ; mod_ty mod <S2SV_ModEnd> ; assert ( <S2SV_ModStart> ':' ) ; if (! fstring_decode_utf8 ( expr_start, expr_end, c, n ) ) return NULL ; expr_ty expr = expr_compile_expr_ex ( expr_start, expr_end, c, n ) ; if ( expr == NULL ) return NULL ; expr_ty expr_body = expr_compile_expr_body ( expr_start, expr_end, c, n ) ; if ( expr_ty. error!= NULL ) return expr_body ; return expr_body <S2SV_ModEnd> ; } <S2SV_null>",0
67,"<S2SV_ModStart> string ) { return cJSON_GetChild ( object, string, 0 ) <S2SV_ModEnd> ; } <S2SV_null>",0
68,<S2SV_ModStart> size ) ; if ( px -> ft == NULL ) { return FALSE ; },0
69,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart>",0
70,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
71,"<S2SV_ModStart> int i ; const <S2SV_ModStart> ] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> uv_stride, src -> alpha_stride, src -> y_stride, src -> uv_stride, src -> alpha_stride, src -> uv_stride, src -> alpha_stride, src -> y_stride, src -> uv_stride, src -> uv_stride, src -> alpha_stride, src -> y_stride, src -> uv_stride, src -> uv_stride, src -> alpha_stride, src -> y_stride, src -> uv_stride, src -> uv_stride, src -> alpha_stride, src -> y_stride, src -> uv_stride, src -> uv_stride, src ->",0
72,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; for (,1
73,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
74,<S2SV_ModStart> user ) { struct ipmi_dev * dev = user -> dev ; <S2SV_ModStart> _ipmi_destroy_user ( user ) ; put_device ( dev,0
75,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> sl = strlen,1
76,"<S2SV_ModStart> * for_ch ; const node * n_child ; <S2SV_ModStart> is_async = 0, is_async_expr = 0 ; if ( NCH ( n ) == 1 ) { is_async_expr = 1 ; } else { is_async_expr = 0 ; } if ( TYPE ( CHILD ( n, 0 ) ) == ASYNC_EXPRESSION ) { is_async_expr = 1 ; } else if ( c -> c_feature_version < 6 ) { ast_error ( c, n, ""Async <S2SV_blank> comprehension <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } for_ch = CHILD ( n, 1 + is_async_expr ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; expression = ast_for_expr ( c, CHILD ( n, 3 + is_async_expr ) ) ; if (! expression ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if ( NCH ( for_ch ) == 1 ) comp = compre",0
77,<S2SV_ModStart> NULL ; } if ( src -> curframe < 0 || src -> curframe > BPF_MAX_FUNC_FRAMES ) return - EINVAL ;,0
78,"<S2SV_ModStart> * cpi, const MODE_INFO_8x8 * mi_8x8, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> * above_mi = mi_8x8 -> above_mi <S2SV_ModEnd> ; const MODE_INFO <S2SV_ModStart> * left_mi = xd -> left_available? mi_8x8 -> left_mi <S2SV_ModEnd> : NULL ; <S2SV_ModStart> segment_id ) ; if ( seg -> update_map ) <S2SV_ModStart>, mi, xd -> skip_seg_id ) ; else write_skip ( cpi, mbmi -> segment_id, mi, xd -> skip_seg_id <S2SV_ModEnd> ) ; if <S2SV_ModStart> == TX_MODE_SELECT ) { if ( xd -> skip_seg_id!= - 1 ) { <S2SV_ModStart> w ) ; } else { write_skip ( cpi, mbmi -> segment_id, mi, xd -> skip_seg_id ) ; } }",0
79,<S2SV_ModStart> maxn ) { int i ; <S2SV_ModStart> ; # endif for ( i = 0 ; i < n ; i ++ ) { if ( actions [ i ]. SWF_ACTIONRECORD. ActionCode == SWF_ACTION_END ) { return 0 ; } },0
80,<S2SV_ModStart> ) ) ; ND_TCHECK ( len ) ;,0
81,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
82,<S2SV_ModStart> zArg ) { assert ( pTable -> nModuleArg >= 0 ) ; <S2SV_ModStart> * ) * <S2SV_ModEnd> 2 + pTable <S2SV_ModStart> pTable -> nModuleArg <S2SV_ModEnd> ; char *,0
83,<S2SV_ModStart> j ] ; if ( j < 0 ) { j = 0 ; },0
84,<S2SV_ModStart> -> dmin ; if ( ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { <S2SV_ModStart> p ) ; },0
85,"<S2SV_ModStart> bfq_idle_slice_timer_body ( struct bfq_sched_data * sched_data <S2SV_ModEnd> ) { struct <S2SV_ModStart> bfq_data * bfqd <S2SV_ModEnd> ; enum bfqq_expiration <S2SV_ModStart> long flags ; struct bfq_queue * bfqq = & sched_data -> bfqq ; <S2SV_ModStart> lock, flags ) ; BUG_ON ( bfq_bfqq_is_in_service_queue ( bfqq ) <S2SV_ModStart> in_service_queue ) { bfq_bfqq_clear_request ( bfqq ) ; <S2SV_ModStart> return ; } bfq_bfqq_expire ( bfqd, bfqq, true, reason ) ;",0
86,,1
87,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
88,"<S2SV_ModStart> diffBlock + diffBlockLength <S2SV_ModEnd> ) { PyMem_Free <S2SV_ModStart> extraBlock + extraBlockLength <S2SV_ModEnd> ) { PyErr_Free <S2SV_ModStart> newData + newpos + x <S2SV_ModStart> j ] ; if ( j >= diffBlockLength ) { PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; }",0
89,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> np -> tclass ) ; rcu_read_unlock (,0
90,"<S2SV_ModStart> ; if ( MagickMax ( number_pixels, number_data_bands ) < number_pixels ) { exception ( exception, ""Too <S2SV_blank> many <S2SV_blank> images <S2SV_blank> in <S2SV_blank> VIFF <S2SV_blank> file"" ) ; return NULL ; } if (",0
91,<S2SV_ModStart> data ) { ( void ) data ;,0
92,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
93,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
94,<S2SV_ModStart> ; if ( xd -> mbmi. mv_bias_bias!= 0 &&,0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
97,"<S2SV_ModStart> msicap msicap ; if ( <S2SV_ModStart>, 0 ) < 0 ) return - EINVAL",0
98,"<S2SV_ModStart> -> ptr ; if (! strcmp ( cmd -> name, ""list"" ) ) { addReplyError ( c, shared. badlist ) ; return REDIS_OK ; }",0
99,<S2SV_ModStart> vpx_codec_err_t res ; int i ; for ( i = 0 ; i < ctx -> num_channels ; i ++ ) { if ( cfg -> g_channels [ i ]. type == VPX_CODEC_CHANNEL_TYPE_H264 ) { if ( cfg -> g_channels [ i ]. mode == VPX_CODEC_MODE_H264 ) { if ( cfg -> g_channels [ i ]. mode == VPX_CODEC_MODE_H264 ) { if ( cfg -> g_channels [ i ]. mode == VPX_CODEC_MODE_H264 ) { if ( cfg -> g_channels [ i ]. mode == VPX_CODEC_MODE_H264 ) { if ( cfg -> g_channels [ i ]. mode == VPX_CODEC_MODE_H264 ) { if ( cfg -> g_channels [ i ]. mode == VPX_CODEC_MODE_H264 ) { if ( cfg -> g_channels [ i ]. mode == VPX_CODEC_MODE_H264 ) { if ( cfg -> g_channels [ i ]. mode,0
100,<S2SV_ModStart> { cpi -> mb. <S2SV_ModStart> & cpi -> mb. quantizers <S2SV_ModEnd> ) ; },0
101,<S2SV_ModStart> info -> si_code!= SI_QUEUE ) <S2SV_ModEnd> return - EPERM,0
102,<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; if ( ptr -> size > GF_MAX_ADOBE_BOOTLOADER_INFO_FILE_SIZE ) return GF_ISOM_INVALID_FILE ;,0
103,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
104,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> -> state == fmode <S2SV_ModEnd> ) return ; <S2SV_ModStart> ; if ( fmode & FMODE_READ <S2SV_ModEnd> )!= ( <S2SV_ModStart> -> state & fmode <S2SV_ModEnd> ) ) { <S2SV_ModStart> { if ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> -> state = fmode <S2SV_ModEnd> ; } <S2SV_null>",0
105,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( ( Image * ) NULL ) ; }",0
106,<S2SV_ModStart> 0 ; } if ( len > MAX_CONTROL_MSG_SIZE ) { return 0 ; },0
107,"<S2SV_ModStart>, i, <S2SV_ModEnd> JPC_QCX_GETEXPN ( qcd <S2SV_ModStart> ] ), <S2SV_ModEnd> JPC_QCX_GETMANT ( qcd",0
108,<S2SV_ModStart> = AV_PIX_FMT_PAL8 ; c -> pix_fmt_offset = 0 ;,0
109,"<S2SV_ModStart> ) ; } ND_TCHECK ( * p, '\\0' ) ;",0
110,"<S2SV_ModStart> image_noffset ) { if ( noffset == - FDT_ERR_TRUNCATED || noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; }",0
111,"<S2SV_ModStart> ; if (! <S2SV_ModStart>, GFP_KERNEL ) ) { kfree ( state ) ; <S2SV_ModEnd> return - ENOMEM <S2SV_ModStart> - ENOMEM ; }",0
112,"<S2SV_ModStart> * iface, vpx_codec_caps_t caps, <S2SV_ModStart> else if ( caps & VPX_CODEC_CAP_XMA ) { res = VPX_CODEC_ABI_MISMATCH ; } else if ( caps & VPX_CODEC_CAP_POSTPROC ) { res = VPX_CODEC_ABI_MISMATCH ; } else if ( caps & VPX_CODEC_CAP_ERROR_CONCEALMENT ) { res = VPX_CODEC_INCAPABLE ; } else if ( caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) { res = VPX_CODEC_ABI_MISMATCH ; } else if ( caps & VPX_CODEC_CAP_DECODER ) { res = VPX_CODEC_ABI_MISMATCH ; } else if ( <S2SV_ModStart> = cfg ; ctx -> config. dec -> caps = caps ; <S2SV_ModStart> = VPX_CODEC_OK ; <S2SV_ModEnd> } } else",0
113,<S2SV_ModStart> ; value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ ; value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1100WritePhyReg (,0
114,<S2SV_ModStart> = tos ; ipc. tos = tos ;,0
115,<S2SV_ModStart> VPX_CODEC_CAP_XMA ) ) { res = VPX_CODEC_INCAPABLE ; break ; } <S2SV_ModEnd> else if (,0
116,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
117,"<S2SV_ModStart> counter ) ; if ( arg -> open_flags & NFS_O_CREAT ) <S2SV_ModStart> arg -> open_flags, true",0
118,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ) ; return 0 <S2SV_ModStart> break ; } return error <S2SV_ModEnd> ; } <S2SV_null>,1
119,"<S2SV_ModStart> ; if ( len < 1 ) { r_strbuf_append ( & op -> esil, "" <S2SV_blank> (invalid)"" ) ; return - 1 ; } if (",0
120,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
121,<S2SV_ModStart> goto trunc ; ND_TCHECK_16BITS ( & lshp -> ls_length ) ;,0
122,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { ret = - EFAULT ; break ; } <S2SV_ModEnd> * obuf =",0
123,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
124,<S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ),0
125,"<S2SV_ModStart> costs, vp9_tree * <S2SV_ModStart> c ) { vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> ) ; const vpx_tree_index <S2SV_ModEnd> ii = tree",0
126,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> write_buffer_16x16 ( int16_t <S2SV_ModStart> * output, tran_low_t <S2SV_ModEnd> * in0, <S2SV_ModStart> * in0, tran_low_t <S2SV_ModEnd> * in1,",0
127,<S2SV_ModStart> & 0xffff ; if (! synth_devs [ dev ] ) return - ENXIO ;,0
128,"<S2SV_ModStart> fadst16 ( const tran_low_t * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t <S2SV_ModEnd> x0, s1 <S2SV_ModStart>, s0, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t <S2SV_ModEnd> x0 = input <S2SV_ModStart> 15 ] ; tran_high_t <S2SV_ModEnd> x1 = input <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> x2 = input <S2SV_ModStart> 13 ] ; tran_high_t <S2SV_ModEnd> x3 = input <S2SV_ModStart> 2 ] ; tran_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 4 ] ; tran_high_t <S2SV_ModEnd> x5 = input <S2SV_ModStart> 11 ] ; tran_high_t <S2SV_ModEnd> x6 = input <S2SV_ModStart> 9 ] ; tran_high_t <S2SV_ModEnd> x7 = input <S2SV_ModStart> 7 ] ; tran_high",0
129,<S2SV_ModStart> ; # if HAVE_LIBRETRO flags |= LIBRETRO_HAS_EDSP ; # endif # if <S2SV_ModStart> ; # endif <S2SV_ModEnd> return flags &,0
130,"<S2SV_ModStart> vp9_left_block_mode ( const PREDICTION_MODE * pre_mi <S2SV_ModEnd>, const MODE_INFO <S2SV_ModStart>, int b, int prev_block_idx <S2SV_ModStart> ) ) return PREDICTION_NONE <S2SV_ModEnd> ; return get_y_mode <S2SV_ModStart> ) ; return pre_mi <S2SV_ModEnd> -> bmi [",0
131,"<S2SV_ModStart> * cpi, TileDataEnc * tile_data <S2SV_ModEnd>, MODE_INFO * <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd>, int * <S2SV_ModStart> bsize ) { TileInfo * tile_info = & tile_data -> tile_info ; <S2SV_ModStart> & cpi -> tile_common <S2SV_ModEnd> ; const int <S2SV_ModStart> = num_8x8_blocks_wide_lookup [ mi <S2SV_ModEnd> -> mbmi. <S2SV_ModStart> = num_8x8_blocks_high_lookup [ mi <S2SV_ModEnd> -> mbmi. <S2SV_ModStart>, tile, mi <S2SV_ModEnd>, no_pred_segcounts, <S2SV_ModStart>, tile, mi <S2SV_ModEnd>, no_pred_segcounts, <S2SV_ModStart>, tile, mi <S2SV_ModEnd> + hbs * <S2SV_ModStart>, tile, mi <S2SV_ModEnd>, no_pred_segcounts, <S2SV_ModStart>, tile, mi <S2SV_ModEnd> + hbs * <S2SV_ModStart>, tile, mi <S2SV_ModEnd>, no_pred_segcounts, <S2SV_ModStart>, tile, mi <S2SV_ModEnd> + hbs * <S2SV_ModStart>, tile, mi <S2SV_ModEnd>, no_pred_segcounts, <S2SV_ModStart>, tile, mi <S2SV_ModEnd> + hbs * <S2SV_ModStart>, tile, mi <S2SV_ModEnd>, no_pred_segcounts,",0
132,<S2SV_ModStart> flags & CLIENT_CLOSE_AFTER_REPLY ) break ; if ( c -> flags & CLIENT_CLOSE_AFTER_REPLY_WITH_CLIENT,0
133,<S2SV_ModStart> ; get_blocks_flags = EXT4_GET_BLOCKS_READ |,0
134,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart>, handle, hints, <S2SV_ModStart> & retval, handle, <S2SV_ModStart> & p -> ai_family, <S2SV_ModEnd> & p -> <S2SV_ModStart> & p -> ai_socktype, <S2SV_ModEnd> & p -> <S2SV_ModStart> & p -> ai_protocol, <S2SV_ModEnd> p -> ai_addrlen <S2SV_ModStart>, NULL, <S2SV_ModEnd> & p -> <S2SV_ModStart> & p -> ai_addrlen <S2SV_ModEnd>, NULL, <S2SV_ModStart> } if (! p ) { ret = OE_EAI_MEMORY ; goto done ; } if ( <S2SV_ModStart> ) ; } if ( p -> ai_family == AF_INET ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } else { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; }",0
135,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
136,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
137,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static void <S2SV_ModEnd> set_registers ( pegasus_t <S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return ; if (! buf ) return <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
138,"<S2SV_ModStart> asdl_seq * body, asdl_seq * type_comment <S2SV_ModStart> = body ; p -> v. Module. type_comment = type_comment ;",0
139,"<S2SV_ModStart>, int64_t ts_end <S2SV_ModEnd> ) { struct <S2SV_ModStart> >> 4 ; <S2SV_ModEnd> if ( ctx <S2SV_ModStart> write_idx ) ; if (! buf ) return 1 ; <S2SV_ModStart> } else { vp9_copy_and_extend_frame_with_rect <S2SV_ModEnd> ( src, <S2SV_ModStart> img ) ; } # else vp9_copy_and_extend_frame ( src, & buf -> img ) ; <S2SV_ModEnd> buf -> ts_start",0
140,<S2SV_ModStart>. sharpness ; const int q = cpi -> q_index [ cm -> base_qindex ] ; <S2SV_ModStart> int q = vp9_ac_quant_with_base_qindex <S2SV_ModEnd> ( cm -> <S2SV_ModStart> int filt_guess = ROUND_POWER_OF_TWO_INT <S2SV_ModEnd> ( q *,0
141,<S2SV_ModStart> BTA_DmSetDeviceAddress ( bd_addr ) ; btif_storage_load_autopair_device_list (,0
142,"<S2SV_ModStart> int a = getint <S2SV_ModEnd> ( fmt,",0
143,"<S2SV_ModStart> ) NULL ) { <S2SV_ModStart> ""MemoryAllocationFailed"" ) ; }",0
144,"<S2SV_ModStart> vpx_codec_err_t res ; const vpx_alg_priv_t * priv ; <S2SV_ModStart> ; else { priv = ctx -> priv -> alg_priv ; <S2SV_ModStart>. decode ( <S2SV_ModEnd> priv, data",0
145,"<S2SV_ModStart> inode * inode, struct iso_directory_record * dirreclen <S2SV_ModStart> ; if ( dirreclen &&",0
146,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> ) ; } outpos += strlen ( outputbuffer ) ;",0
147,<S2SV_ModStart> self ) { if ( self -> dict ),0
148,<S2SV_ModStart> ( ) ; if (! a ) return 0 ; <S2SV_ModStart> i ) { if (! ( <S2SV_ModStart> ] ) ; <S2SV_ModEnd> suffix_object ( p,0
149,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; Py_ssize_t i ; if ( _PyObject_HasAttrId ( obj, & PyId_body ) ) { int res ; Py_ssize_t len <S2SV_ModStart> ++ ) { asdl_seq_ty <S2SV_ModEnd> value ; res <S2SV_ModStart> ; Py_ssize_t i ; value. type = PyType_GetRawType ( PyList_GET_ITEM ( tmp, i ) ) <S2SV_ModStart> ), & value <S2SV_ModEnd>, arena ) <S2SV_ModStart> } asdl_seq_SET ( type_ignores <S2SV_ModEnd>, i, <S2SV_ModStart> ; } else if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_type_ignores ) ) { int res ; Py_ssize_t len ; Py_ssize_t i ; tmp = _PyObject_GetAttrId ( obj, & PyId_type_ignores <S2SV_ModStart> ; } else if ( _PyObject_HasAttrId ( obj, & PyId_type_ignores ) ) { int res ; Py_ssize_t len ; Py_ssize_t i ; tmp = _PyObject_GetAttrId ( obj, & Py",0
150,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
151,<S2SV_ModStart> ; if ( msg_sys -> msg_name == NULL ) { err = - ENOMEM ; goto out_freeiov ; } if ( <S2SV_ModStart> ; if ( msg_sys -> msg_name == NULL ) { err = - ENOMEM ; goto out_freeiov ; } if (,0
152,<S2SV_ModStart> buffer_head * dibh <S2SV_ModEnd> ; u64 bn <S2SV_ModStart> unsigned ptrs_per_blk ; <S2SV_ModEnd> int eob = <S2SV_ModStart> = height - sheight <S2SV_ModEnd> ; int eob <S2SV_ModStart> ; if (! dibh ) return - ENOSPC ; if (,0
153,"<S2SV_ModStart>, vpx_codec_iface_name ( get_codec_interface ( global <S2SV_ModEnd> ) ) ) <S2SV_ModStart> -> filename, get_format ( input ) <S2SV_ModEnd> ) ; } <S2SV_ModStart> ; SHOW ( g_max_frame_size ) ; SHOW ( g_max_frame_size_intra_pct ) ; SHOW (",0
154,"<S2SV_ModStart> ; if ( ( <S2SV_ModStart> attr -> psvi ) && ( ( attr -> psvi == XSLT_NAMESPACE ) || ( attr -> psvi == XSLT_ATTRIBUTE ) ) ) { if ( ( attr -> psvi == XSLT_NAMESPACE ) && ( attr -> psvi == XSLT_ATTRIBUTE ) ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Attribute <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> value.\\n"", attr -> name ) ; goto error ; } } else if ( ( <S2SV_ModEnd> attr -> psvi <S2SV_ModStart> == XSLT_NAMESPACE ) && ( ( attr -> psvi == XSLT_NAMESPACE ) || ( attr -> psvi == XSLT_ATTRIBUTE ) ) ) { if ( ( attr -> psvi == XSLT_ATTRIBUTE ) && ( attr -> psvi == XSLT_ATTRIBUTE ) ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Attribute <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> value.\\n"", attr -> name ) ; goto error ; } } else if ( ( attr -> psvi == XSLT_ATTRIBUTE ) && ( attr -> psvi == XSLT_ATTRIBUTE ) ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Attribute <S2SV_blank> \'%s\' <S2SV_blank>",0
155,"<S2SV_ModStart> { if ( safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> { if ( safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> { if ( safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.cshrc"",",0
156,"<S2SV_ModStart> msix_tab_size ) { if <S2SV_ModEnd> ( msix_tab_size % <S2SV_ModStart> msix_tab_size % 4096!= 0 ) panic ( ""msix_tab_size <S2SV_blank> %4096 <S2SV_blank>!= <S2SV_blank> 0"", msix_tab_size <S2SV_ModEnd> ) ; bzero",0
157,<S2SV_ModStart> ; if ( <S2SV_ModEnd> js_regexec ( re,0
158,"<S2SV_ModStart> case OFreshOID : { value v ; <S2SV_ModStart> ( Int_val ( Val_hp ( v <S2SV_ModEnd>, 1 ) <S2SV_ModStart> >= 0 ) { <S2SV_ModStart> dest ) ; } else { v = ( value ) v ; } }",0
159,"<S2SV_ModStart> = FALSE ; if ( ( <S2SV_ModStart>, KSZ8851_REG_IER ) ) == 0 ) { <S2SV_ModEnd> ksz8851WriteReg ( interface <S2SV_ModStart>, KSZ8851_REG_IER, IER_LCIE ) ; } else { ier = ksz8851ReadReg ( interface, KSZ8851_REG_IER ) ; } isr = ksz8851ReadReg ( interface, KSZ8851_REG_ISR ) ; if ( ( isr & ISR_LCIS )!= 0 ) { ier |= IER_LCIE <S2SV_ModEnd> ; interface -> <S2SV_ModStart> ) ; } else { ier |= IER_TXIS ; } } if ( ( isr & ISR_TXIS )!= 0 ) { ier |= ISR_TXIS ; } else { ier |= ISR_RXIS ; } <S2SV_ModEnd> n = ksz8851ReadReg <S2SV_ModStart> ( interface, KSZ8851_IER, ier ) ; if ( ( isr & ISR_RXIS )!= 0 ) { ier |= IER_RXIE <S2SV_ModEnd> ; interface -> <S2SV_ModStart> ( interface, KSZ8851_IER",0
160,"<S2SV_ModStart> void encode_quantization ( VP9EncoderConfig * config <S2SV_ModEnd>, struct vp9_write_bit_buffer <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm -> base_qindex <S2SV_ModEnd> ) ; write_delta_q",0
161,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> p_buf, msglen )",1
162,<S2SV_ModStart> ; if ( fp == NULL ) goto sslerr ; if (,0
163,"<S2SV_ModStart> ( ) ; strncat <S2SV_ModEnd> ( t1_buf_array, <S2SV_ModStart> t1_buf_array, t1_line_array, strlen ( t1_line_array )",0
164,"<S2SV_ModStart> int mi_col, int subsize, int partition_idx <S2SV_ModEnd> ) { MACROBLOCKD <S2SV_ModStart> int bsl = b_width_log2_lookup [ partition_idx ], hbs = partition_lookup [ partition_idx ] [ subsize ] ; if ( bsize >= BLOCK_8X8 ) return ; if ( partition_idx < 0 ) return ; bsize = partition_idx ; bsl = b_width_log2 ( bsize ) ; bsl = b_width_log2 ( bsize ) ; hbs = ( 1 << bsl ) / 4 ; if ( partition_idx >= cm -> partition_lookup_rows || partition_idx >= cm -> partition_lookup_cols ) return ; if ( partition_idx < 0 ) return ; partition = partition_lookup [ partition_idx ] [ subsize ] ; assert ( bsize >= BLOCK_8X8 ) ; if ( mi_row >= cm -> mi_rows || mi_col >= cm -> mi_cols ) return ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, sub",0
165,"<S2SV_ModStart> key_ref ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) { ret = - ENOKEY ; goto error2 ; }",1
166,<S2SV_ModStart> ps_dec -> u1_first_slice_in_pic && ps_dec -> u1_first_slice_in_pic,0
167,"<S2SV_ModStart> var_off ) ; if (! src_known &&! dst_known ) { pr_err ( env, ""invalid <S2SV_blank> reg <S2SV_blank> %llu <S2SV_blank> for <S2SV_blank> insn <S2SV_blank> %llu <S2SV_blank> at <S2SV_blank> %p <S2SV_blank> of <S2SV_blank> %llu <S2SV_blank> (%s)\\n"", src_reg. var_off, src_reg. var_off, insn -> code, src_reg. var_off, dst_reg ) ; return - EINVAL ; }",0
168,<S2SV_ModStart> ; if (! pTcon -> fsync_mode ) { cifs_sb -> fsync_mode = 0 ; } if (,0
169,<S2SV_ModStart> -> opt. opt.,0
170,"<S2SV_ModStart> svc_ctx ) { <S2SV_ModEnd> int i, <S2SV_ModStart> svc_ctx ) ; SvcInternal_t <S2SV_ModEnd> * const si <S2SV_ModStart> svc_ctx ) ; <S2SV_ModEnd> if ( si <S2SV_ModStart> svc_ctx ) ; <S2SV_ModEnd> if ( si <S2SV_ModStart> ( si -> frame_count <S2SV_ModEnd> <= 0 ) <S2SV_ModStart> ""\\n"" ) ; int <S2SV_ModStart> = si -> frame_count <S2SV_ModEnd> / si -> <S2SV_ModStart> ; number_of_keyframes = si -> frame_count <S2SV_ModEnd> / si -> <S2SV_ModStart> i ) { int <S2SV_ModStart> = si -> frame_count <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; bytes_total += ( uint32_t ) <S2SV_ModStart> ; bytes_total += ( uint32_t ) <S2SV_ModStart> ; bytes_total += ( uint32_t ) <S2SV_ModStart> ; bytes_total += ( uint32_t ) <S2SV_ModStart> ; bytes_total += ( uint32_t ) <S2SV_ModStart> ; bytes_total += ( uint32_t ) <S2SV_ModStart> ; bytes_total += ( uint32_t ) <S2SV_ModStart> ; bytes_total += ( uint32_t ) <S2SV_ModStart> ; bytes_total += ( uint32_t ) <S2SV_ModStart> ; bytes_total += ( uint32_t ) <S2SV_ModStart> ; bytes_total += ( uint32_t ) <S2SV_ModStart> ; bytes_total += ( uint32_t )",0
171,<S2SV_ModStart> = new_cols ; <S2SV_ModEnd> screen -> sb_buffer,0
172,"<S2SV_ModStart> n ) { int literal_start_len = 0 ; <S2SV_ModStart> NULL ) ; if ( * str >= end ) { ast_error ( c, n, ""f-string: <S2SV_blank> too <S2SV_blank> many <S2SV_blank> quotes <S2SV_blank> in <S2SV_blank> fstring <S2SV_blank> string"" ) ; return - 1 ; } <S2SV_ModStart> ++ ) { const char * ch = * * str ; if (! in_named_escape && ch == '{' && ( * str ) - literal_start_len >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 1 ; } else if ( in_named_escape && ch == '}' ) { in_named_escape = 0 ; } else if ( ch == '{' || ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_start_len = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } if ( ch == '{' || ch == '}' ) { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed""",0
173,"<S2SV_ModStart> ( pd, g_settings_dump_dir_filename <S2SV_ModEnd> ) ; char",0
174,<S2SV_ModStart> ; if ( ( x + w ) > ( ptr -> width ) || ( x + w ) > ( ptr -> height ) || ( y + h ) > ( ptr -> height ) || ( y + h ) > ( ptr -> height ) ) { if ( <S2SV_ModStart> ) ; } },0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
176,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mv_stride <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if",0
177,"<S2SV_ModStart> * cpi, TileDataEnc * tile_data <S2SV_ModEnd>, int mi_row <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> + mi_col ; const MODE_INFO * const <S2SV_ModEnd> * mi_8x8 = <S2SV_ModStart> * mi_8x8 = tile_data -> mi_grid_visible + idx_str ; const MODE_INFO * const <S2SV_ModEnd> * prev_mi_8x8 = <S2SV_ModStart> * prev_mi_8x8 = tile_data -> prev_mi_grid_visible + idx_str ; BLOCK_SIZE bsize ; memset ( & xd -> left_seg_context, 0, sizeof ( xd -> left_seg_context ) ) ; for ( mi_col = tile -> mi_col_start ; mi_col < tile -> mi_col_end ; mi_col += MI_BLOCK_SIZE ) { int dummy_rate = 0 ; int64_t dummy_dist = 0 ; const int idx_str = cm -> mi_stride * mi_row + mi_col ; <S2SV_ModStart> MODE_INFO * * mi_ptr = tile_data -> mi_grid_visible + idx_",0
178,<S2SV_ModStart> u_int8_t state ; if ( nf_ct_is_ping ( ct ) ) return false ;,0
179,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> * opt, u32 <S2SV_ModEnd> optlen ) { <S2SV_ModStart> & 3 ) rcu_assign_pointer ( <S2SV_ModStart> __data [ optlen <S2SV_ModEnd> ] = IPOPT_END <S2SV_ModStart> = IPOPT_END ; rcu_assign_pointer ( <S2SV_ModStart> -> optlen = optlen ; if (! optlen ) return - EINVAL <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( <S2SV_ModEnd> ip_options_compile ( net <S2SV_ModStart> ( net, & opt -> opt <S2SV_ModEnd>, NULL ) <S2SV_ModStart>, NULL ) && opt -> optlen ) <S2SV_ModEnd> return - EINVAL <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> kfree ( *",0
180,"<S2SV_ModStart> ; if ( strcmp ( connection, ""Upgrade"" ) == 0 <S2SV_ModEnd> ) goto error",0
181,<S2SV_ModStart> * findalldevs_if ; uint32 nif = 0 ; uint32 len <S2SV_ModEnd> = 0 ; <S2SV_ModStart> 0 ; } len = sizeof ( struct rpcap_findalldevs_if ) ; <S2SV_ModStart> -> description ) { len <S2SV_ModEnd> += strlen ( <S2SV_ModStart> description ) ; len <S2SV_ModEnd> += strlen ( <S2SV_ModStart> name ) ; } <S2SV_ModStart> -> name ) { len <S2SV_ModEnd> += strlen ( <S2SV_ModStart> name ) ; len <S2SV_ModEnd> += sizeof ( <S2SV_ModStart> rpcap_findalldevs_if ) ; } <S2SV_ModStart> # endif plen = len <S2SV_ModEnd> + ( sizeof <S2SV_ModStart> * 4 ) + len <S2SV_ModStart> sendbuf ) ) { len <S2SV_ModEnd> += RPCAP_NETBUF_SIZE ; <S2SV_ModStart> sendbuf ) ) { len <S2SV_ModEnd> += RPCAP_NETBUF_SIZE ; <S2SV_ModStart> sendbuf ) ) { len <S2SV_ModEnd> += RPCAP_NETBUF_SIZE ; <S2SV_ModStart> sendbuf ) ) { len <S2SV_ModEnd> += RPCAP_NETBUF_SIZE ; <S2SV_ModStart> sendbuf ) ) { len <S2SV_ModEnd> += RPCAP_NETBUF_SIZE ; <S2SV_ModStart> sendbuf ) ) { len <S2SV_ModEnd> += RPCAP_NETBUF_SIZE ; len <S2SV_ModEnd> += sizeof ( <S2SV_ModStart> } } } } },0
182,"<S2SV_ModStart>, client_uid, DUMP_DIR_MODE_DEFAULT <S2SV_ModEnd> ) ; if",0
183,<S2SV_ModStart> -> columns - 2 <S2SV_ModEnd> ) ; x,0
184,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
185,"<S2SV_ModStart> ) NULL ) { if ( image -> bytes_read < 0 ) { ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; } image -> bytes_read = 0 ; } <S2SV_ModEnd> image -> bytes_read",0
186,"<S2SV_ModStart> ; if ( in_cksum <S2SV_ModEnd> ( ndo, <S2SV_ModStart> ; if ( in_cksum <S2SV_ModEnd> ( ndo,",0
187,"<S2SV_ModStart>! ptrace_has_cap ( task_cred ( task ) <S2SV_ModEnd> -> user_ns,",0
188,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
189,<S2SV_ModStart> ; if ( 0 == ps_parse -> s_sei_params. i1_sei_parameters_present_flag ) { ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; } if (,0
190,<S2SV_ModStart> ; sde -> <S2SV_ModEnd> max_descq = hfi1_get_max_descq <S2SV_ModStart> -> max_descq = hfi1_get_max_descq <S2SV_ModEnd> ( dd ),0
191,"<S2SV_ModStart> name, int * <S2SV_ModStart>, istep, * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( *",0
192,<S2SV_ModStart> } pairs = palloc0 <S2SV_ModEnd> ( pcount *,0
193,"<S2SV_ModStart> val ) ; if (! <S2SV_ModStart>, val ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> invalid <S2SV_blank> variable"", r -> name )",0
194,"<S2SV_ModStart> ) ) { if ( clen > sizeof ( c -> buf ) - 1 ) { return bad_request ( c, 433, __LINE__ ) ; }",0
195,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_high_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> 256 ] ; tran_high_t <S2SV_ModEnd> * outptr = <S2SV_ModStart> & out [ 16 <S2SV_ModEnd> ] ; int",0
196,"<S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( new_data,",0
197,"<S2SV_ModStart> char * temp_filename ; if ( strlen ( filename ) + 5 > 1024 ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } temp_filename <S2SV_ModStart> + 5 ) <S2SV_ModEnd> ; strcpy (",0
198,<S2SV_ModStart> case VTP_VLAN_INFO : if ( len < length ) goto trunc ;,0
199,"<S2SV_ModStart>, target, ctxt -> lineno,",0
200,"<S2SV_ModStart> ( ) ; char * _header = _getHeader ( ) ; <S2SV_ModStart> ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %lu\\r\\n"" <S2SV_ModEnd> ""%s"" ""\\r\\n"" ""%s"" <S2SV_ModStart> ""%s"" ""\\r\\n"" ""%s"", _header, request",0
201,"<S2SV_ModStart> ) ; } if ( copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> ( dest, <S2SV_ModEnd> cfg. homedir <S2SV_ModStart> cfg. homedir <S2SV_ModEnd> ) < 0 <S2SV_ModStart> ""chown"" ) ; <S2SV_ModEnd> unlink ( src",0
202,<S2SV_ModStart>!= BFA_STATUS_OK ) { kfree ( fcstats ) ; <S2SV_ModStart> return NULL ; },1
203,"<S2SV_ModStart> -> x = F_MIN ( <S2SV_ModEnd> value -> x <S2SV_ModStart> -> x ), 1.0f <S2SV_ModEnd> ) ; value <S2SV_ModStart> -> y = F_MIN ( <S2SV_ModEnd> value -> y <S2SV_ModStart> -> y ), 1.0f <S2SV_ModEnd> ) ; value <S2SV_ModStart> -> z = F_MIN ( <S2SV_ModEnd> value -> z <S2SV_ModStart> -> z = 1.0f <S2SV_ModEnd> ; } <S2SV_null>",0
204,<S2SV_ModStart> ; rec -> sasl_username_type = IRC_SASL_USERNAME_TYPE_UNKNOWN ; rec -> sasl_username <S2SV_ModEnd> = src -> <S2SV_ModStart> ; rec -> sasl_password_type = IRC_SASL_PASSWORD_TYPE_UNKNOWN <S2SV_ModEnd> ; * dest,0
205,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
206,"<S2SV_ModStart> o, datao ; size_t sz = 0 <S2SV_ModStart> 12 ) { if ( sz > buf_size ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; }",0
207,"<S2SV_ModStart> ; if (! <S2SV_ModStart>, llbuff ) ) { mi_freem ( datafile ) ; } <S2SV_ModEnd> DBUG_RETURN ( info",0
208,"<S2SV_ModStart> olen ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> hex ; CURLcode res ; int res_ok = 0 ; int res_ok = 0 ; char * ns = NULL ; if (! olen ) * olen = 0 ; if (! string ) return NULL ; if (! alloc ) return NULL ; if (! alloc ) { alloc = ( int ) strlen ( string ) ; alloc = ( int ) length ; } if (! alloc ) { alloc = ( int ) sizeof ( char ) ; } if (! ns ) return NULL ; alloc = ( int ) alloc ; res_ok = ( int ) Curl_convert_from_network ( handle, string, 1 ) ; if (! res_ok ) { free ( ns ) ; return NULL ; } string += 2 ; alloc -= 2 ; } ns [ strindex ++ ] = in ; string ++ ; } ns [ strindex ] = 0 ; if ( olen ) * olen = strindex ; if ( ns ) <S2SV_ModStart> alloc = ( int ) ( alloc - strindex ) <S2SV_ModEnd> ; while ( <S2SV_ModStart> ; while ( alloc > 0 ) { in = * string ; if ( '%' == in ) { char * ptr ; char * ptr ; ptr",0
209,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
210,<S2SV_ModStart> ; def -> <S2SV_ModEnd> session_setup = usm_session_init,0
211,<S2SV_ModStart> NULL ; return <S2SV_ModEnd> match ( prog,0
212,<S2SV_ModStart> idx ] ; <S2SV_ModEnd> switch ( action <S2SV_ModStart> ) ; } <S2SV_ModEnd> return SNMP_ERR_NOERROR ;,0
213,<S2SV_ModStart> pixels ++ ; if ( pixels == ( unsigned char * ) 0 ) return ( i ) ;,0
214,<S2SV_ModStart> timer ) ; spin_lock_irq ( & slave_active_lock ) ; spin_lock ( & timer -> lock ) ; <S2SV_ModStart> open_list ) { <S2SV_ModEnd> _snd_timer_stop ( slave <S2SV_ModStart> = NULL ; list_del_init ( & slave -> ack_list ) ; list_del_init ( & slave -> active_list ) ; spin_unlock ( & timer -> lock ) ; } spin_unlock ( & timeri -> slave_list_head ) ; <S2SV_ModEnd> mutex_unlock ( & <S2SV_ModStart> & register_mutex ) <S2SV_ModEnd> ; return 0,0
215,<S2SV_ModStart> -> u1_dpb_commands_read ) { <S2SV_ModStart> ps_dec ) ; } else { ps_dec -> u4_bitoffset = 0 ; },0
216,"<S2SV_ModStart> decode ) { uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > info -> rasterSize || widthOverflow > 0 || heightOverflow > 0 ) { void * tmpRasterBits = reallocarray ( info -> rasterBits, newRasterSize ) ; <S2SV_ModStart> -> originalHeight ; <S2SV_ModEnd> if ( newRasterSize <S2SV_ModStart> uint_fast32_t newRasterSize = ( uint_fast32_t ) <S2SV_ModStart> -> Image. Height * ( uint_fast32_t ) <S2SV_ModEnd> gifFilePtr -> Image <S2SV_ModStart> Image. Width <S2SV_ModEnd> ; if (",0
217,<S2SV_ModStart> validator -> user. buf,0
218,"<S2SV_ModStart> bus ] ; if ( bi == NULL ) { pr_err ( ""%s: <S2SV_blank> pci <S2SV_blank> [%s] <S2SV_blank> has <S2SV_blank> wrong <S2SV_blank> bus <S2SV_blank> %d <S2SV_blank> info\\n"", __func__, dev -> name, dev -> bus ) ; return ; } <S2SV_ModEnd> si = &",0
219,"<S2SV_ModStart>, timeo ) <S2SV_ModEnd> ; if (",1
220,<S2SV_ModStart> += 9 ; ( <S2SV_ModStart> isspace ( * ( s + 9 ) <S2SV_ModEnd> ) ; s <S2SV_ModStart> * t && ( <S2SV_ModStart> isspace ( * ( t + 1 ) ) ||! isdigit ( * ( t + 1 ) ) <S2SV_ModEnd> ) ) t,0
221,"<S2SV_ModStart>. active_set ; if ( uipc_main. read_set == UINT_MAX ) { BTIF_TRACE_EVENT ( ""UIPC <S2SV_blank> READ <S2SV_blank> THREAD <S2SV_blank> EXITING"" ) ; uipc_main_cleanup ( ) ; uipc_main. tid = 0 ; BTIF_TRACE_EVENT ( ""UIPC <S2SV_blank> READ <S2SV_blank> THREAD <S2SV_blank> DONE"" ) ; break ; }",0
222,"<S2SV_ModStart> msixcap msixcap ; if <S2SV_ModEnd> ( msgnum >= <S2SV_ModStart> msgnum <= MAX_MSIX_TABLE_ENTRIES ) { pr_err ( ""%s: <S2SV_blank> too <S2SV_blank> many <S2SV_blank> MSIX <S2SV_blank> table <S2SV_blank> entries <S2SV_blank> (%d) <S2SV_blank> requested\\n"", __func__, msgnum ) ; return - 1 ; } <S2SV_ModEnd> assert ( barnum",0
223,"<S2SV_ModStart> * rb, unsigned <S2SV_ModStart> max ) { return decode_unsigned_max_ext <S2SV_ModEnd> ( rb, <S2SV_ModStart> ( max ), max <S2SV_ModEnd> ) ; }",0
224,<S2SV_ModStart> == NULL ) { retval = KRB5KDC_ERR_PREAUTH_FAILED ; goto cleanup ; } <S2SV_ModEnd> status = X509_NAME_cmp <S2SV_ModStart> = 0 ; <S2SV_ModEnd> X509_NAME_free ( is,0
225,<S2SV_ModStart> <S2SV_null> <S2SV_null> static MV_REFERENCE_FRAME <S2SV_ModEnd> select_tx_mode ( const <S2SV_ModStart> cpi ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; <S2SV_ModStart> lossless ) { frame_type = get_frame_type ( cpi ) ; <S2SV_ModStart> else if ( frame_type <S2SV_ModEnd> == 0 ) <S2SV_ModStart> else { if ( <S2SV_ModStart> == USE_LARGESTALL ) <S2SV_ModEnd> return ALLOW_32X32 ; <S2SV_ModStart> else if ( frame_type <S2SV_ModEnd> == USE_FULL_RD ),0
226,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ]. cf == CF_AVERAGE ) { magfact = mag_calc ( im -> gdes [ i ]. data [ ii ], im -> gdes [ i ]. ds, im -> gdes [ i ]. step ) ; } else { magfact = mag_calc ( im -> gdes [ i ]. data [ ii ], im -> gdes [ i ]. ds, im -> gdes [ i ]. step ) ; } <S2SV_ModEnd> } break ;",0
227,<S2SV_ModStart> buf1 -> size > <S2SV_ModEnd> buf2 -> size,0
228,<S2SV_ModStart> ) + size ; if ( unlikely (! sz ) ) return NULL,0
229,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,1
230,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs,",0
231,"<S2SV_ModStart> ; r = safe_set_io_mask ( b -> manager -> event, b -> fd, EPOLLIN ) ; if ( r < 0 ) { log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> button <S2SV_blank> mask: <S2SV_blank> %m"" ) ; goto fail ; } r =",0
232,<S2SV_ModStart> ( ) ; errors += test_string_formatting_with_newline ( ) ;,0
233,<S2SV_ModStart> -> lun ) sas_eh_finish_cmd <S2SV_ModEnd> ( cmd ),1
234,"<S2SV_ModStart>, end_col_offset ; bool is_func_body = false ; <S2SV_ModStart> 2 ; } is_func_body = true ; <S2SV_ModStart> end_col_offset ) ; if ( TYPE ( CHILD ( n, name_i + 4 ) ) == FUNCTION ) { body = ast_for_funcbody ( c, CHILD ( n, name_i + 4 ) ) ; if (! body ) return NULL ; name_i += 4 ; } <S2SV_ModStart> ( is_async ) { <S2SV_ModStart> returns, LINENO ( n0 ), n0 <S2SV_ModEnd> -> n_col_offset, <S2SV_ModStart> c_arena ) ; } else { body = ast_for_suite ( c, CHILD ( n, name_i + 3 ) ) ; if (! body ) return NULL ; get_last_end_pos ( body, & end_lineno, & end_col_offset ) ; is_func_body = true ; } <S2SV_ModStart>, returns, is_func_body, <S2SV_ModStart>, returns, is_func_body,",0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,<S2SV_ModStart> ; if ( WPG_Palette. StartIndex >= WPG_Palette. NumOfEntries ) break ; if (,0
237,,1
238,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
239,"<S2SV_ModStart> : if ( psf -> header. size <S2SV_ModEnd> > SIGNED_SIZEOF ( <S2SV_ModStart> > psf -> header. size ) { if ( position > psf -> header. size ) { psf_fseek ( psf, position, whence ) ; return ; } ; if ( psf -> header. size <S2SV_ModEnd> > psf -> <S2SV_ModStart> -> headend ) { if ( position < psf -> header. size ) { <S2SV_ModStart> psf -> headend = position ; } else { psf -> headend = psf -> header. size ; } } <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> headindex = position ; if ( psf -> header. size <S2SV_ModStart> + position >= psf -> header. size ) { psf_fseek ( psf, position, whence ) ; return ; } ; if ( psf -> header. size <S2SV_ModEnd> + position <= <S2SV_ModStart> <= psf -> header. size ) { if ( position > psf -> header. size ) { psf -> headindex = psf -> header. size ; } ; if ( psf -> header. size <S2SV_ModEnd> + position > <S2SV_ModStart> psf -> header. size ) { psf -> headindex = psf -> header. size ; psf_fseek ( psf, position, SEEK_CUR ) ; break ; } ; if ( psf -> header",0
240,<S2SV_ModStart> u4_ofst ) ; ps_cabac -> u4_max_id = 0 ;,0
241,<S2SV_ModStart> ; } } if ( off < ctx -> size ) { <S2SV_ModStart> = off ; },0
242,<S2SV_ModStart> perf_event_context * ctx <S2SV_ModEnd> ; struct task_struct <S2SV_ModStart> task_struct * task ; ctx = perf_event_ctx_lock ( event ) ; task = ctx -> task ; task_mutex_lock ( & ctx -> lock ) <S2SV_ModStart> event ) ; perf_event_ctx_unlock ( event ) ;,0
243,<S2SV_ModStart> -> post_proc_flag = <S2SV_ModEnd> ( ctx -> <S2SV_ModStart>. noise_level ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
244,"<S2SV_ModStart> = 0 ; if ( msg_len < sizeof ( struct olsr_msg4 ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> invalid <S2SV_blank> msg_len <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6, msg_len ) ) ; goto trunc ; }",0
245,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> int64_t store_reg [ <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vpx_usec_timer_start ( & <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,0
246,"<S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file <S2SV_blank> %s\\n"", src <S2SV_ModEnd> ) ; exit <S2SV_ModStart> 0 ) ; copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> ( dest, dest, getuid ( ), getgid ( ) <S2SV_ModEnd> ) ; if",0
247,<S2SV_ModStart> = 0 ; if ( sfb > 0xffff ) { return IXHEAACD_ERROR_FRAME_SIZE ; },0
248,"<S2SV_ModStart> lua_module ) ; int result ; int nargs = 0 ; <S2SV_ModStart> prov_spec = parsed_require_line <S2SV_ModEnd> ; spec = <S2SV_ModStart> r ) ; <S2SV_ModEnd> result = lua_authz_provider_call <S2SV_ModStart> prov_spec -> args && prov_spec -> args -> nelts > 0 ) { int i ; if (! lua_checkstack ( L, prov_spec -> args <S2SV_ModStart> int i ; <S2SV_ModEnd> lua_pop ( L <S2SV_ModStart> prov_spec -> args ) ; } if ( result!= AUTHZ_OK <S2SV_ModEnd> ) { ap_log_rerror <S2SV_ModStart> APLOG_ERR, 0 <S2SV_ModEnd>, r,",0
249,"<S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
250,<S2SV_ModStart> (! proto_end || proto_end + 3 >= url,0
251,<S2SV_ModStart> end = path ; if ( end > path + path_len ) return - FDT_ERR_NOSPACE,0
252,<S2SV_ModStart> ( server. <S2SV_ModEnd> maxidletime &&!,0
253,"<S2SV_ModStart> -> protocol_timeout = g_timeout_add ( 10 <S2SV_ModEnd>, ( GSourceFunc",0
254,<S2SV_ModStart> book -> dim && i < n,1
255,<S2SV_ModStart> action ) { if ( r < 0.0 ) return ;,0
256,<S2SV_ModStart> this_h ) { int i ; <S2SV_ModStart> 16 ) { for ( i = 0 ; i < 2 ; i ++ ) { if ( sf -> predict [ i ] [ i ] [ 0 ] == vp9_convolve_copy ) { sf -> predict [ i ] [ i ] [ 0 ] = vp9_convolve_copy ; sf -> predict [ i ] [ i ] [ 1 ] = vp9_convolve8_avg ; sf -> predict [ i ] [ i ] [ 1 ] = vp9_convolve8_avg_horiz ; } else { sf -> predict [ i ] [ i ] [ 0 ] = vp9_convolve8_copy ; sf -> predict [ i ] [ i ] [ 1 ] = vp9_convolve8_avg ; sf -> predict [ i ] [ i ] [ 1 ] = vp9_convolve8_avg_horiz ; } } <S2SV_ModStart> } else { for ( i = 0 ; i < 2 ; i ++ ) { if ( sf -> predict [ i ] [ i ] [ 0 ] == vp9_convolve8_copy ) { sf -> predict [ i ] [ i ] [ 0 ] = vp9_convolve,0
257,<S2SV_ModStart> (! sock <S2SV_ModEnd> ) OE_RAISE_ERRNO (,0
258,<S2SV_ModStart> ; if ( msg. msg_namelen > sizeof ( src_info ) ) return - EINVAL ; if (,0
259,<S2SV_ModStart> ( ) ; unregister_net_subsys <S2SV_ModEnd> ( & sctp_net_ops <S2SV_ModStart> ( & sctp_net_ops <S2SV_ModEnd> ) ; sctp_v6_pf_exit,0
260,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> stream ) { int ret ; <S2SV_ModStart> index ) ; ret = sse_to_psnr ( ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total, & stream -> psnr_totals [ 0 ], & stream -> psnr_count ) ; if ( ret < 0 ) { fprintf ( stderr, "" <S2SV_blank> Error <S2SV_blank> in <S2SV_blank> PSNR <S2SV_blank> (Overall/Avg/Y/U/V)"" ) ; return ret ; } <S2SV_ModStart> ""\\n"" ) ; return 0 ;",0
261,<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen (,1
262,"<S2SV_ModStart> ( ) ; <S2SV_ModEnd> if ( ksz8851ReadReg <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ( interface, KSZ8851_MARH <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARM <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARL <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARD <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARD <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARD <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARD <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARD <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARD <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARD <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARD <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARD <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARD",0
263,"<S2SV_ModStart> skip } ; vp9_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
264,"<S2SV_ModStart> ; if ( fit_check_format_no_error <S2SV_ModEnd> ( fit, <S2SV_ModStart> { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format! <S2SV_blank> No <S2SV_blank> support <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> at <S2SV_blank> %08lx\\n"", prop_name, addr <S2SV_ModEnd> ) ; bootstage_error <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; goto error <S2SV_ModEnd> ; } bootstage_mark <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; goto error <S2SV_ModEnd> ; } bootstage_mark <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; goto error <S2SV_ModEnd> ; } boot_check_format_no_error <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; goto error <S2SV_ModEnd> ; } boot_check_format_no_error <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; goto error <S2SV_ModEnd> ; } boot_check_format_no_error <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; goto error <S2SV_ModEnd> ; } boot_check_format_no_error <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; goto error <S2SV_ModEnd> ; } boot_check_format_no_error <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; goto error <S2SV_ModEnd> ; } boot_check_format_no_error <S2SV_ModStart> BOOTSTAGE",0
265,"<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> uinput_fd, UI_DEV_DESTROY )",1
266,<S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> = rc -> avg_frame_bandwidth <S2SV_ModEnd> ; # else,0
267,"<S2SV_ModStart> i ], ""--allow-untrusted-credentials"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted-credentials"" ) ; if ( strcmp ( argv [ i ],",0
268,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
269,<S2SV_ModStart> ib ] ; dequant_ptr = d -> dequant ; coeff_ptr = b -> coeff ; qcoeff_ptr = b -> qcoeff ; dqcoeff_ptr = d -> dqcoeff ; i0 =! type ; eob = * d -> eob ; rdmult = mb -> rdmult * err_mult ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ; rddiv = mb -> rddiv ; best_mask [ 0 ] = best_mask [ 1 ] = 0 ; tokens [ 0 ] [ 0 ]. token = DCT_EOB_TOKEN ; tokens [ 0 ] [ 1 ]. qc = 0 ; * ( tokens [ 0 ] + 1 ) = * ( tokens [ 0 ] + 0 ) ; if ( type == VPX_DCT ) { <S2SV_ModStart> = 0 ; } else { tokens [ 0 ] [ 1 ]. token = DCT_EOB_TOKEN ; tokens [ 0 ] [ 1 ]. error = 0 ; tokens [ 0 ] [ 1 ]. qc = 0 ; * ( tokens [ 0 ] + 1 ) = *,0
270,"<S2SV_ModStart> FN_REFLEN ] ; my_snprintf ( buff, sizeof ( buff ), ""%s"", opt_basedir <S2SV_ModEnd> ) ; #",0
271,<S2SV_ModStart> decrypt_cb ) { ptrdiff_t <S2SV_ModEnd> n = ( <S2SV_ModStart> n = ( ptrdiff_t <S2SV_ModEnd> ) ( data_end,0
272,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; <S2SV_ModEnd> exit_func : free_server_handle,0
273,"<S2SV_ModStart>, int * returnintra_distortion <S2SV_ModEnd>, int * <S2SV_ModStart> int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # else unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # endif # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best_rd_sse = INT_MAX ; # endif <S2SV_ModEnd> # endif mode_mv",0
274,<S2SV_ModStart> goto error ; if ( statbuf. st_size > INT_MAX ) goto error ;,0
275,"<S2SV_ModStart> u1_level_idc, u1_seq_parameter_set_id, u1_frame_cropping_flag <S2SV_ModStart> ; if ( u1_frame_cropping_flag == 0 ) { if ( <S2SV_ModStart> u1_seq_parameter_set_id ) ; }",0
276,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * params = ( vpx_svc_parameters_t * ) <S2SV_ModStart> -> cpi ; int num_layers = ctx -> num_layers ; <S2SV_ModStart> -> svc. num_layers = num_layers ; cpi -> svc. <S2SV_ModStart> -> spatial_layer_id = ( int ) <S2SV_ModStart> -> temporal_layer_id = ( int ) <S2SV_ModStart> -> lst_fb_idx = ( int ) <S2SV_ModStart> -> gld_fb_idx = ( int ) <S2SV_ModStart> -> alt_fb_idx = ( int )",0
277,"<S2SV_ModStart> out ) { uint32 bitspersample ; uint32 samplesperpixel ; uint16 input_compression ; uint16 input_photometric ; uint32 width, length ; struct cpTag * p ; uint32 width ; uint32 length ; uint32 compression ; uint32 input_photometric <S2SV_ModEnd> ; CopyField ( <S2SV_ModStart> samplesperpixel ) ; if ( bitspersample > UINT32_MAX / samplesperpixel ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> too <S2SV_blank> big <S2SV_blank> bit <S2SV_blank> period <S2SV_blank> for <S2SV_blank> output <S2SV_blank> image.\\n"", TIFFFileName ( in ) ) ; return FALSE ; }",0
278,"<S2SV_ModStart> a ) { <S2SV_ModEnd> char * pn <S2SV_ModStart> = '\\0' ; if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else { <S2SV_ModStart> ) ; } } } else { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
279,"<S2SV_ModStart> unsigned int link_count ; struct kernel_lb_addr loc <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct indirectEntry * <S2SV_ModStart> extLength && ( bh <S2SV_ModEnd> = udf_read_ptagged ( <S2SV_ModStart> -> i_sb, <S2SV_ModEnd> & loc, <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct indirectEntry * <S2SV_ModStart> -> i_sb, <S2SV_ModEnd> & loc, <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct indirectICB * <S2SV_ModStart> -> i_sb, <S2SV_ModEnd> & loc, <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct indirectICB * <S2SV_ModStart> -> i_sb, <S2SV_ModEnd> & loc, <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct kernel_lb_addr loc <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct kernel_lb_addr loc <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct kernel_lb_addr loc <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct kernel_lb_addr loc <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct kernel_lb_addr loc <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct kernel_lb_addr loc <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct kernel_lb_addr loc <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct kernel_lb_addr loc <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct kernel_lb_addr loc <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct kernel_lb_addr loc <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct kernel_lb_addr",0
280,"<S2SV_ModStart> get_uv_tx_size ( mbmi ) ; const int filter_level = get_filter_level ( lfi_n, mbmi <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm",0
281,"<S2SV_ModStart> mq_ops ) { spin_lock <S2SV_ModEnd> ( & fq <S2SV_ModStart> mq_flush_lock, flags <S2SV_ModEnd> ) ; }",0
282,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
283,<S2SV_ModStart> ) ) { ovalue = NULL ;,0
284,"<S2SV_ModStart> sizeof ( effect_param_t ) || ( effect -> state!= EFFECT_STATE_ACTIVE ) || ( effect -> state!= EFFECT_STATE_RUNNING ) || ( effect -> state!= EFFECT_STATE_ACTIVE ) || ( effect -> state!= EFFECT_STATE_RUNNING ) || ( effect -> state!= EFFECT_STATE_RUNNING ) || ( effect -> state!= EFFECT_STATE_ACTIVE ) || ( effect -> state!= EFFECT_STATE_ACTIVE ) || ( effect -> state!= EFFECT_STATE_ACTIVE ) || ( effect -> state!= EFFECT_STATE_RUNNING ) || ( effect -> state!= EFFECT_STATE_ACTIVE ) || ( effect -> state!= EFFECT_STATE_RUNNING ) || ( effect -> state!= EFFECT_STATE_RUNNING ) || ( effect -> state!= EFFECT_STATE_RUNNING ) || ( effect -> state!= EFFECT_STATE_ACTIVE ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_STATE_ACTIVE <S2SV_blank> or <S2SV_blank> (effect->state <S2SV_blank> = <S2SV_blank> EFFECT_STATE_RUNNING)"" ) ; return - EINVAL ; } * ( effect_",0
285,<S2SV_ModStart> ; if ( j >= num_versions ) { k5free ( ret ) ; goto cleanup ; } if (,0
286,"<S2SV_ModStart> 0x02 ) ; if ( crgram_len > SC_MAX_APDU_BUFFER_SIZE - 1 ) { r = sc_transmit_apdu ( card, & apdu ) ; LOG_TEST_RET ( card -> ctx, r, ""APDU <S2SV_blank> transmit <S2SV_blank> failed"" ) ; } <S2SV_ModStart> crgram, crgram_len + 1",0
287,"<S2SV_ModStart> ; if ( ctxt. info. tc_mapping [ I40E_AQ_VSI_TC_QUE_OFFSET_SHIFT ] & ( 1 << I40E_AQ_VSI_TC_QUE_OFFSET_SHIFT ) ) { dev_warn ( & pf -> pdev -> dev, ""invalid <S2SV_blank> TC <S2SV_blank> mapping <S2SV_blank> for <S2SV_blank> VSI <S2SV_blank> entries\\n"" ) ; return - EINVAL ; } if (",0
288,<S2SV_ModStart> ; } } return - 1 ;,1
289,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
290,"<S2SV_ModStart> -> mb_rows ; if ( xd -> mb_rows > MAX_MB_ROWS ) { vpx_error ( ""Too <S2SV_blank> many <S2SV_blank> rows <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> frame\\n"" ) ; return ; }",0
291,<S2SV_ModStart> ) ; } if ( image -> columns == 0 ) { image = DestroyImageList ( image ) ; return ( ( Image * ) NULL ) ; },0
292,"<S2SV_ModStart> len ) { return decode_unicode_with_escapes_internal ( c, n, s, len, 0 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
293,"<S2SV_ModStart> BUF buffer ; off_t off ; <S2SV_ModStart>, targisdir, staterrno <S2SV_ModEnd> ; BUF * <S2SV_ModStart> ""Unexpected <S2SV_blank> off_t/time_t <S2SV_blank> size"" ) ; staterrno = 0 ; <S2SV_ModStart> ; if ( lstat <S2SV_ModEnd> ( targ, <S2SV_ModStart> ; if ( staterrno <S2SV_ModEnd> == 0 ) <S2SV_ModStart> ; if ( staterrno <S2SV_ModEnd> == 0 )",0
294,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w,",0
295,<S2SV_ModStart> ; vp8_de_alloc_frame_buffers ( <S2SV_ModEnd> ) ; return,0
296,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
297,<S2SV_ModStart> u1_num_mbsNby2 ) ; if ( ps_cur_slice -> u1_slice_type == SLICE_TYPE_SLICE_IDR ) { ps_dec -> u1_slice_type = SLICE_TYPE_SLICE_IDR ; ps_dec -> u1_slice_type = SLICE_TYPE_SLICE_IDR ; },0
298,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> vterm_allocator_free ( screen,1
299,"<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & delay )",1
300,"<S2SV_ModStart> one, offset <S2SV_ModEnd> ; ssize_t count <S2SV_ModStart> ) break ; <S2SV_ModEnd> pixel_info = ( <S2SV_ModStart> ) break ; <S2SV_ModEnd> pixel_info = ( <S2SV_ModStart> ) break ; <S2SV_ModEnd> pixel_info = ( <S2SV_ModStart> ) break ; <S2SV_ModEnd> pixel_info = ( <S2SV_ModStart> ) break ; <S2SV_ModEnd> pixel_info = ( <S2SV_ModStart> ) break ; <S2SV_ModEnd> pixel_info = ( <S2SV_ModStart> ) break ; <S2SV_ModEnd> pixel_info = ( <S2SV_ModStart> ) break ; <S2SV_ModEnd> pixel_info = ( <S2SV_ModStart> ) break ; <S2SV_ModEnd> pixel_info = ( <S2SV_ModStart> ) break ; <S2SV_ModEnd> pixel_info = ( <S2SV_ModStart> ) break ; <S2SV_ModEnd> pixel_info = ( <S2SV_ModStart> ) break ; <S2SV_ModEnd> pixel_info = ( <S2SV_ModStart> ) break ; <S2SV_ModEnd> pixel_info = ( <S2SV_ModStart> ) break ; <S2SV_ModEnd> pixel_info = ( <S2SV_ModStart> ) break ; <S2SV_ModEnd> pixel_info = ( <S2SV_ModStart> ) break ; <S2SV_ModEnd> pixel_info = ( <S2SV_ModStart> ) break ; <S2SV_ModEnd> pixel_info = ( <S2SV_ModStart> ) break ; <S2SV_ModEnd> pixel_info = ( <S2SV_ModStart> ) break ; <S2SV_ModEnd> pixel_info = ( <S2SV_ModStart> ) break ; <S2SV_ModEnd> pixel_info = ( <S2SV_ModStart> ) break ; <S2SV_ModEnd> pixel_info = ( <S2SV_ModStart> ) break ; <S2SV_ModEnd> pixel_info = ( <S2SV_ModStart> ) break ; <S2SV_ModEnd> pixel_info = ( <S2SV_ModStart> ) break ; <S2SV_ModEnd> pixel_info = ( <S2SV_ModStart> ) break",0
301,"<S2SV_ModStart> value ) { cchar * name = <S2SV_ModEnd> sclone ( value <S2SV_ModStart> ( value ) ; cchar * value2 = stok ( name <S2SV_ModStart>, NULL ) ; if (! name2 ||! value2 ) { cerror ( ""Invalid <S2SV_blank> virtual <S2SV_blank> host <S2SV_blank> directive"" ) ; return 0 ; } httpSetHostName ( state -> host, name",0
302,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
303,<S2SV_ModStart> ; if ( <S2SV_ModEnd> prev_hash ||! <S2SV_ModStart> { if ( <S2SV_ModEnd> coinbase1 ) free <S2SV_ModStart> ; if ( <S2SV_ModEnd> coinbase2 ) free,0
304,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
305,"<S2SV_ModStart> unused ) { _Py_IDENTIFIER ( __dict__ ) ; <S2SV_ModStart> PyObject * res <S2SV_ModEnd> ; PyObject * <S2SV_ModStart> dict ) { return build_type_reduce_from_dict ( self, dict, ""O()"" <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
306,"<S2SV_ModStart> ) & desc, sizeof ( * desc )",1
307,"<S2SV_ModStart> perf_event * ) ; struct perf_event_context * ctx <S2SV_ModStart> perf_event_period ( event, & ctx <S2SV_ModStart> ret ; } <S2SV_ModEnd> default : return",0
308,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> * r, PREDICTION_MODE <S2SV_ModEnd> y_mode ) { <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> if (! is_parallel_decoding_mode ( cm ) <S2SV_ModEnd> ) ++ cm",0
309,<S2SV_ModStart> ; if (! sha -> src_len ) return - EINVAL ; if (,0
310,"<S2SV_ModStart> iv ) ; if (! NIL_P ( self ) ) { rb_raise ( eTypeError, ""invalid <S2SV_blank> self"" ) ; }",0
311,"<S2SV_ModStart> s ) ; if ( <S2SV_ModStart>, s ) < 0 ) return - ENOMEM",0
312,<S2SV_ModStart> ; if (! session -> settings_ready ) { return NGHTTP2_ERR_BAD_SETTINGS ; } if (,0
313,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> x86_pmu. max_pebs_events,0
314,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * tp, vpx_TOKENEXTRA <S2SV_ModEnd> * stop ) <S2SV_ModStart> stop ) { vpx_writer <S2SV_ModEnd> * p = <S2SV_ModStart> ] ; const vpx_extra_bit <S2SV_ModEnd> * const b <S2SV_ModStart> b = & vpx_extra_bits <S2SV_ModEnd> [ t ] <S2SV_ModStart> & 1 ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ; } vpx_write_bit <S2SV_ModEnd> ( w,",0
315,"<S2SV_ModStart>, uncompressed_hdr_size ; vpx_write_bit_buffer <S2SV_ModEnd> wb = { <S2SV_ModStart> 0 } ; vpx_write_bit_buffer <S2SV_ModEnd> saved_wb ; write_uncompressed_header <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> += uncompressed_hdr_size ; vpx_compute_update_table <S2SV_ModEnd> ( ) ; <S2SV_ModStart> += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb",0
316,"<S2SV_ModStart> int dev_get_valid_name ( const char * name, <S2SV_ModStart> net * net <S2SV_ModEnd> ) { BUG_ON",0
317,"<S2SV_ModStart> struct ikev2_id id ; struct ikev2_id_ext id_ext <S2SV_ModStart> * typedata ; ND_TCHECK2 ( * ext, sizeof ( id ) ) ; <S2SV_ModStart> * ext ) ; id_ext = ext + sizeof ( id ) <S2SV_ModStart> * typedata ; memcpy <S2SV_ModEnd> ( & id <S2SV_ModStart> trunc ; } ND_TCHECK2 ( * ext, sizeof ( id ) ) ; <S2SV_ModStart> - sizeof ( id_ext <S2SV_ModEnd> ) ; switch <S2SV_ModStart> - sizeof ( id_ext <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> - sizeof ( id_ext <S2SV_ModEnd> ) ; switch <S2SV_ModStart> - sizeof ( id_ext <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> - sizeof ( id_ext <S2SV_ModEnd> ) ; switch",0
318,"<S2SV_ModStart> ; } } jas_log ( ""mif_process_cmpt <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %d\\n"", id, hdr -> id, hdr -> id, hdr -> id, cmpt -> width, cmpt -> height, cmpt -> prec, cmpt -> sgnd, cmpt -> data, cmpt -> tlx, cmpt -> tly, cmpt -> sampperx, cmpt -> samppery, cmpt -> width, cmpt -> height, cmpt -> prec, cmpt -> data, jas_taginfo_nonull ( jas_taginfos_lookup ( mif_tags, jas_tvparser_gettag ( tvp ) ) ) -> id, cmpt -> data, cmpt -> sgnd, cmpt -> data ) ;",0
319,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
320,"<S2SV_ModStart>, yt2_0 ; WORD64 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD64 x_h2_0, x_h2_1 ; <S2SV_ModStart>, xl21_0 ; <S2SV_ModEnd> WORD32 si10,",0
321,"<S2SV_ModStart> mntent -> mnt_dir, false",0
322,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
323,"<S2SV_ModStart> ( req ) ) ; rb_hash_aset ( env, proxy_uri_val, rb_const_get ( req, proxy_uri_key_name, Qnil )",0
324,<S2SV_ModStart> endif int col_type <S2SV_ModEnd> ; MYSQL_BIND * <S2SV_ModStart> ; # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID <S2SV_ModStart> ; # endif <S2SV_ModEnd> # if MYSQL_VERSION_ID,0
325,"<S2SV_ModStart> need = 0, max_rows = screen -> max_row ; int max_cols = screen -> max_col <S2SV_ModStart> screen, { max_rows = max_rows? max_rows : 1 ; <S2SV_ModStart> screen, { max_rows = max_rows? max_rows : 1 ;",0
326,<S2SV_ModStart> fractionalDigits ) { if ( len == 0 ) { * str = 0 ; return ; },0
327,<S2SV_ModStart> ( unlikely ( crng_ready ( ) <S2SV_ModEnd> == 0 ),0
328,"<S2SV_ModStart> LEX_ID ) { snprintf ( str, len, ""ID:%s"" <S2SV_ModEnd>, jslGetTokenValueAsString ( <S2SV_ModStart> jslGetTokenValueAsString ( ) <S2SV_ModEnd> ) ; } <S2SV_ModStart> LEX_STR ) { snprintf ( str, len, ""String:\'%s\'"" <S2SV_ModEnd>, jslGetTokenValueAsString ( <S2SV_ModStart> jslGetTokenValueAsString ( ) <S2SV_ModEnd> ) ; }",0
329,,1
330,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
331,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
332,"<S2SV_ModStart> ) { return memcmp <S2SV_ModEnd> ( s1,",0
333,"<S2SV_ModStart> ( CMD_PRINT_HELP, ""stunnel.conf"", <S2SV_ModStart> ( CMD_PRINT_DEFAULTS, ""stunnel.conf"",",0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,<S2SV_ModStart> ; if (! new_iv_set && <S2SV_ModStart> ; if (! new_iv_set &&,0
336,<S2SV_ModStart> } } } if ( 0 == ps_dec -> u4_num_bytes_consumed ) { return ; },0
337,<S2SV_ModStart> <S2SV_null> <S2SV_null> static const <S2SV_ModStart> item ) { if ( item == NULL ) return NULL ;,0
338,<S2SV_ModStart>. encode ( & <S2SV_ModStart>. encode ( & <S2SV_ModStart>. encode ( &,0
339,"<S2SV_ModStart> ) ; } else if ( arg1 == 3 ) { win_maximise ( - 2 ) ; win_set_chars ( rows0, cols0 ) ; }",0
340,<S2SV_ModStart> < cols + 8 <S2SV_ModEnd> ; i ++,0
341,<S2SV_ModStart> ; if ( <S2SV_ModEnd> i -> width <S2SV_ModStart> i -> width > <S2SV_ModEnd> i -> parent <S2SV_ModStart> i -> height <S2SV_ModEnd> ) { #,0
342,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",0
343,<S2SV_ModStart> = value ; ps_pps -> i1_pic_type = value ;,0
344,"<S2SV_ModStart> ) ) { if ( psf -> header_write ) { sf_log ( psf, SF_LOG_ERROR, ""Format <S2SV_blank> \'%c\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> sf_binheader_writef"", c ) ; return - 1 ; }",0
345,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
346,"<S2SV_ModStart> 0 ; } if ( copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; return 0 ; } <S2SV_ModStart> ( rv ) { <S2SV_ModStart> ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; return 0 ; } <S2SV_ModEnd> } _exit (",0
347,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> BLOCK_8X8 : return vpx_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> BLOCK_16X8 : return vpx_mse16x8 <S2SV_ModEnd> ; case BLOCK_8X16 <S2SV_ModStart> : return vpx_mse8x16 <S2SV_ModEnd> ; default : <S2SV_ModStart> default : return vpx_mse16x16 <S2SV_ModEnd> ; } },0
348,<S2SV_ModStart> ; if ( encoded_key_pack == NULL ) { retval = KRB5_E_INVAL ; goto done ; } if (,0
349,"<S2SV_ModStart> flags ) ; if (! vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } <S2SV_ModStart> vb. vb2_buf <S2SV_ModEnd> ) ; if",0
350,<S2SV_ModStart> size ) { if ( size > SIZE_MAX ) { zmalloc_oom_handler ( size ) ; return NULL ; },0
351,<S2SV_ModStart> & rxh -> serviceID <S2SV_ModEnd> ) && rxent,0
352,"<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len > MWIFIEX_MAX_SSID_LEN ) { mwifiex_dbg ( adapter, ERROR, ""Error <S2SV_blank> in <S2SV_blank> adhoc <S2SV_blank> start <S2SV_blank> request <S2SV_blank> ssid <S2SV_blank> length\\n"" ) ; return - 1 ; }",0
353,<S2SV_ModStart> ; if (! sfe -> valuelen ) return 0 ; if (,0
354,"<S2SV_ModStart> struct l2cap_conf_rfc rfc <S2SV_ModEnd> ; void * <S2SV_ModStart> sk ) ; rfc = { } ; <S2SV_ModStart> = L2CAP_MODE_ERTM ; memset ( & rfc, 0, sizeof ( rfc ) ) ; <S2SV_ModStart> = L2CAP_DEFAULT_MAX_RECEIVE ; memset ( & rfc, 0, sizeof ( rfc ) ) ;",0
355,"<S2SV_ModStart> { do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> r, MSG_WAITALL )",0
356,<S2SV_ModStart> ps_dec_in -> u4_nal_ref_idc && ( ps_dec -> u1_nal_ref_idc == IDR_SLICE_NAL ),0
357,<S2SV_ModStart> while ( pair && * pair,0
358,"<S2SV_ModStart> delegation, int fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> = 0 ; fmode <S2SV_ModEnd> &= ( FMODE_READ <S2SV_ModStart> -> type & fmode <S2SV_ModEnd> )!= open_flags <S2SV_ModStart> -> stateid, fmode <S2SV_ModEnd> ) ; ret <S2SV_ModStart>, NULL, fmode <S2SV_ModEnd> ) ; ret",0
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,"<S2SV_ModStart> * xd, int64_t <S2SV_ModEnd> * out_rate_sum, <S2SV_ModStart> * out_dist_sum ) { int64_t rate_sum = 0 ; int64_t dist_sum = 0 ; int64_t sse = 0 ; const int ref = xd -> mi [ 0 ] -> mbmi. ref_frame [ 0 ] ; const BLOCK_SIZE bs = get_plane_block_size ( bsize, pd ) ; ( void ) cpi -> fn_ptr [ bs ]. vf ( p -> src. buf, p -> src. stride, pd -> dst. buf, pd -> dst. stride, & sse ) ; if ( i == 0 ) x -> pred_sse [ ref ] = sse ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) <S2SV_ModStart> i == 0 && <S2SV_ModEnd> cpi -> speed <S2SV_ModStart> pd ) ; if ( i == 0 && <S2SV_ModEnd> cpi -> fn_ptr <S2SV_ModStart>. vf ( pd -> src. buf, pd -> src. stride, <S2SV_ModEnd> p -> dst <S2SV_ModStart>. stride, <S2SV_ModEnd> pd -> dst <S2SV_ModStart> sse ) ; <S2SV_ModEnd> if ( cpi <S2SV_ModStart> == 0 ) { int64_t rate ; int64_t",0
361,<S2SV_ModStart> } if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
362,<S2SV_ModStart> { if ( index >= PAM_MAX_RESP_SIZE ) { return ( PAM_BUF_ERR ) ; } if ( <S2SV_ModStart> == NULL ) { free ( username ) ; <S2SV_ModStart> PAM_BUF_ERR ) ; },0
363,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> seg ) { vpx_read_tree <S2SV_ModEnd> ( r, <S2SV_ModStart> ( r, vpx_segment_tree <S2SV_ModEnd>, seg ->",0
364,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",1
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,<S2SV_ModStart> depth ++ ; if ( depth > MAXDEPTH ) return ( NULL ) ;,0
367,"<S2SV_ModStart> ERROR_INVALID_LENGTH ; } if (! ( ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_FAILURE ; } <S2SV_ModStart> length ) ; if (! ( ksz8851GetBit ( interface, KSZ8851_RXQCR ) & RXQCR_SDA ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_FAILURE ; } <S2SV_ModStart> length ) ; if (! ( ksz8851GetBit ( interface, KSZ8851_RXQCR ) & RXQCR_SDA ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_FAILURE ; } <S2SV_ModStart> RXQCR_SDA ) ; if (! ( ksz8851GetBit ( interface, KSZ8851_TXQCR ) & TXQCR_METFE ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_FAILURE ; } <S2SV_ModStart> RXQCR_SDA ) ; if (! ( ksz8851GetBit ( interface",0
368,<S2SV_ModStart> ; # endif mono_gc_invoke_finalizers ( ) ;,0
369,"<S2SV_ModStart>, x_e, x_f, x_f_0, x_f_1, x_f_2, x_f_3, x_f_4, x_f_5, x_f_6, x_f_7 <S2SV_ModEnd> ; WORD32 n00 <S2SV_ModStart> x0 ++ ; x_f_0 = * x0 ++ ; x_f_1 = * x0 ++ ; x_f_2 = * x0 ++ ; x_f_3 = * x0 ++ ; x_f_4 = * x0 ++ ; x_f_5 = * x0 ++ ; x_f_6 = * x0 ++ ; x_f_7 = * x0 ++ ; <S2SV_ModStart> = x_0 + x_f_0 ; n01 = x_1 + x_2 ; n20 = x_0 + x_f_0 ; n21 = x_1 - x_f_0 ; n10 = x_4 + x_f_0 ; n11 = x_1 - x_f_0 ; n12 = x_2 + x_f_0 ; n22 = x_1 - x_f",0
370,<S2SV_ModStart> ; if ( pmd_none_or_clear_bad ( pmd ) ) continue ; if ( <S2SV_ModStart> ) ) ) <S2SV_ModEnd> ret = unuse_pte_range,0
371,"<S2SV_ModStart>, frames ; size_t <S2SV_ModEnd> width, height <S2SV_ModStart> ""Incorrect <S2SV_blank> parameters:\\n"" ) ; fprintf ( stderr, ""usage: <S2SV_blank> %s <S2SV_blank> <width> <S2SV_blank> <height> <S2SV_blank> <target_width> <S2SV_blank> <target_height>\\n"", argv [ 0 ] ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( argv [ 2 ], & width, & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; fprintf ( stderr, ""usage: <S2SV_blank> %s <S2SV_blank> <file <S2SV_blank> name> <S2SV_blank> <input <S2SV_blank> file <S2SV_blank> name>\\n"", argv [ 2 ] ) ; return 1 ; } if (! parse_dim ( argv [ 3 ], & width, & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; fprintf ( stderr, ""usage: <S2SV_blank> %s <S2SV_blank> <input <S2SV_blank> file <S2SV_blank> name> <S2SV_blank> <output <S2SV_blank> file <S2SV_blank> name>\\n"", argv [ 3 ] ) ; return 1 ; } if (! parse_dim ( argv [ 4 ], & target",0
372,"<S2SV_ModStart> num_fields ) { <S2SV_ModEnd> _Py_IDENTIFIER ( _attributes <S2SV_ModStart> i, result <S2SV_ModEnd> ; PyObject *",0
373,<S2SV_ModStart> VPX_CODEC_OK ; struct vpx_codec_enc_cfg_t * cfg ; struct <S2SV_ModStart> vpx_codec_alg_priv * priv <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> VPX_CODEC_MEM_ERROR ; } priv = ( struct vpx_codec_alg_priv * ) <S2SV_ModEnd> calloc ( 1 <S2SV_ModStart> sizeof ( struct vpx_codec_enc_priv ) ) ; if (! priv ) { return VPX_CODEC_MEM_ERROR ; } ctx -> priv = & priv -> base ; ctx -> priv -> sz = sizeof ( * ctx -> priv ) ; ctx -> priv -> iface = ctx -> iface ; ctx -> priv -> alg_priv = priv ; ctx -> priv -> init_flags = ctx -> init_flags ; if ( ctx -> config. enc ) { <S2SV_ModStart> config. enc <S2SV_ModEnd> = & ctx <S2SV_ModStart> ++ ) ; priv -> cfg = & ctx -> priv -> alg_priv -> cfg ; } cfg = & ctx -> priv -> alg_priv -> cfg ; for ( i = 0 ; extracfg_map [ i ]. usage && extracfg_map [ i ]. usage!= cfg -> g_usage ; i ++ ) ; priv -> vp8,0
374,"<S2SV_ModStart>, cnt_c, ( totfr - cnt_c ) <S2SV_ModEnd> ) ) <",0
375,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx ->,0
376,"<S2SV_ModStart> ) ) { if ( iinfo -> i_location. iLength > UDF_INODE_MAX_SIZE ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> inode <S2SV_blank> %ld <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large\\n"", inode -> i_ino, iinfo -> i_location. iLength ) ; goto out ; }",0
377,"<S2SV_ModStart> data ) { uint8_t data_l = ( data << 1 ) | ( data << 2 ) ; <S2SV_ModStart> ( interface, ENC28J60_MIREGADR, ( <S2SV_ModEnd> address & REG_ADDR_MASK <S2SV_ModStart> address & REG_ADDR_MASK ) | ENC28J60_MIREGADR_LSB ) ; enc28j60WriteReg ( interface, ENC28J60_MIWRL, ( LSB ) ( data_l ) ) ; enc28j60WriteReg ( interface, ENC28J60_MIWRH, ( MSB ) ( data ) ) ; while ( ( enc28j60ReadReg ( interface, ENC28J60_MISTAT ) & MISTAT_BUSY )!= 0 ) { } enc28j60WriteReg ( interface, ENC28J60_MIREGADR, ( <S2SV_ModEnd> ( data ) <S2SV_ModStart> ( data ) << ENC28J60_MIREGADR_H ) | ENC28J60_MIREGADR_L ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
378,<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline <S2SV_ModStart> int bad_format_imginfo ( const <S2SV_ModStart> char * ptr <S2SV_ModEnd> ; ptr = <S2SV_ModStart> 'S' ) { return ( n!= 3 ) ; } return ( 0 <S2SV_ModEnd> ) ; },0
379,<S2SV_ModStart> ; # endif DefragTest_t_id_t id = 0 ;,0
380,<S2SV_ModStart> ; if ( object_length > 0 &&,0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,"<S2SV_ModStart> p_sys -> b_auto_field_coding && p_sys -> p_format -> interlaced ) { schro_encoder_setting_set_double ( p_sys -> p_schro, ""interlaced_coding"",! p_sys -> p_format -> interlaced ) ; } if ( p_sys -> b_auto_field_coding",0
384,<S2SV_ModStart> ; if ( bfilename. len &&,0
385,"<S2SV_ModStart> 4 ) ; CHECKINT32 ( idx, len ) ;",0
386,<S2SV_ModStart> ; act = vp8_variance32x32 <S2SV_ModEnd> ( x ->,0
387,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; vpx_pbi_t * pbi = ctx -> pbi ; <S2SV_ModStart> * fb ; if (! pbi ) return VPX_CODEC_INVALID_PARAM ; <S2SV_ModStart> * fb ; if (! <S2SV_ModStart>, & fb ) ) return VPX_CODEC_INVALID_PARAM ; vp9_get_reference_dec ( pbi, data -> idx, & fb",0
388,<S2SV_ModStart> ; if ( <S2SV_ModEnd> j + length <S2SV_ModStart> + 1 < <S2SV_ModEnd> end ) {,0
389,"<S2SV_ModStart> expr_stmt ) ; REQ ( CHILD ( n, 0 ), testlist ) ;",0
390,"<S2SV_ModStart> int vp8_denoiser_filter_c ( <S2SV_ModEnd> MACROBLOCK * signal <S2SV_ModStart> * mc_running_avg, <S2SV_ModEnd> MACROBLOCK * signal <S2SV_ModStart> * running_avg, <S2SV_ModEnd> MACROBLOCK * signal <S2SV_ModStart> -> y_stride ; int r, c, i ; int sum_diff = 0 ; int adj_val [ 3 ] = { 3, 4, 6 } ; if ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) { for ( i = 0 ; i < 3 ; ++ i ) adj_val [ i ] += 1 ; } for ( r = 0 ; r < 16 ; ++ r ) { for ( c = 0 ; c < 16 ; ++ c ) { int diff = 0 ; int adjustment = 0 ; int absdiff = 0 ; diff = mc_running_avg_y [ c ] - sig [ c ] ; absdiff = abs ( diff ) ; if ( absdiff <= 3 ) { running_avg_y [ c ] = mc_running_avg_y [ c ] ; sum_diff += diff ; } else { if ( absdiff >= 4 && absdiff <= 7 ) adjustment = adj_val [ 0 ] ; else if ( abs",0
391,<S2SV_ModStart> ; } } if ( ( sockPtr -> flags & NS_CONN_ESTABLISHED )!= 0u ) { sockPtr -> flags |= NS_CONN_ESTABLISHED ; },0
392,<S2SV_ModStart> ret = 0 ; xtregs -> cp0 &= ~ XTENSA_CP_MASK,0
393,"<S2SV_ModStart> size ) ; if ( message -> length == 0 ) { osLog ( LOG_WARNING, ""Error <S2SV_blank> in <S2SV_blank> rawSocketReceiveIpPacket(), <S2SV_blank> message <S2SV_blank> length <S2SV_blank> %d"", message -> length ) ; error = ERROR_TIMEOUT ; }",0
394,"<S2SV_ModStart> se_device * remote_dev ; if (! xop -> src_dev ) return <S2SV_ModStart> == XCOL_SOURCE_RECV_OP ) <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" <S2SV_ModStart> cg_item ) ; if (! remote_dev ) return ;",0
395,<S2SV_ModStart> int error ; int insert = 0 ; <S2SV_ModStart> new_bh ) ; insert = <S2SV_ModStart> ( new_bh ) ; if ( insert ) unlock_buffer ( new_bh ) ; else error = - EIO,0
396,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
397,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
398,"<S2SV_ModStart>, 0, <S2SV_ModEnd> 0 ) ;",0
399,"<S2SV_ModStart> * imsy, 2 <S2SV_ModEnd> ) ; if",0
400,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vpx_ref_frame_t * ) ; VPxWorker * const worker = ctx -> frame_worker <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; if ( frame -> frame_type == VPX_FRAME_TYPE_VIDEO ) { <S2SV_ModStart> sd ) ; } else { return VPX_CODEC_INVALID_PARAM ; }",0
401,<S2SV_ModStart> u1_num_mbsNby2 ) ; if ( ps_cur_slice -> u1_slice_type == SLICE_TYPE_SLICE_IDR ) { ps_dec -> u1_slice_type = SLICE_TYPE_SLICE_IDR ; ps_dec -> u1_slice_type = SLICE_TYPE_SLICE_IDR ; },0
402,<S2SV_ModStart> ; UWORD32 u4_x_dst_offset <S2SV_ModEnd> = 0 ; <S2SV_ModStart> ) ; else { <S2SV_ModStart> ps_dec ) ; },0
403,<S2SV_ModStart> VP9_LAST_FLAG ) { int frame = <S2SV_ModEnd> cm -> ref_frame_map <S2SV_ModStart> [ 0 ] ; YV12_BUFFER_CONFIG * const cfg = & cm -> frame_bufs [ frame <S2SV_ModStart> ]. buf ; assert ( cfg -> num_samples > 0 ),0
404,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
405,"<S2SV_ModStart> TX_SIZE tx_size = get_plane_tx_size ( pd, plane <S2SV_ModEnd> ) : mbmi <S2SV_ModStart> int i ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) { int r, c ; int max_blocks_wide = num_4x4_w ; int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> ( 5 + pd -> subsampling_y ) ) ; i = 0 ; for ( r = 0 ; r < num_4x4_h ; r += ( 1 << tx_size ) ) { for ( c = 0 ; c < num_4x4_w ; c += ( 1 << tx_size ) ) { if ( r < max_blocks_wide && c < max_blocks_wide ) visit (",0
406,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 4 ) ; <S2SV_ModEnd> src += src_stride",0
407,<S2SV_ModStart> nrow ) { uint32 rowoffset = img -> row_offset ; <S2SV_ModStart> = rowsperstrip - rowoffset <S2SV_ModEnd> ; nrow = <S2SV_ModStart> -> row_offset = rowoffset <S2SV_ModEnd> ; if (,0
408,<S2SV_ModStart> ; } } <S2SV_ModEnd> return 0 ;,0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. size <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. size <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
410,<S2SV_ModStart> num & ( 1U << number <S2SV_ModEnd> ) ) return,0
411,<S2SV_ModStart> int w = img -> fmt -> columns [ plane ] [ 0 ] * img -> fmt -> columns [ plane ] [ 1 ] <S2SV_ModEnd> ; const int <S2SV_ModStart> int h = img -> fmt -> columns [ plane ] [ 1 ] * img -> fmt -> columns [ plane ] [ 1 ] <S2SV_ModEnd> ; int y,0
412,"<S2SV_ModStart> = NULL ; uint32_t attr_len ; uint32_t <S2SV_ModEnd> orig_attr_len ; uint16_t <S2SV_ModStart> 1 ; } if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } <S2SV_ModStart> md5_ctx ) ; if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; }",0
413,<S2SV_ModStart> case EVP_CTRL_AEAD_SET_IV : if ( arg < 0 || arg > CHACHA_CTR_SIZE ) return 0 ;,0
414,"<S2SV_ModStart>, 0, comm_event -> comm_size <S2SV_ModEnd> ) ; if",0
415,"<S2SV_ModStart>, sk ) ; if (! sock_flag ( sk, SOCK_ZAPPED ) ) return - EBADF",0
416,<S2SV_ModStart> MT_CPTYPE_PASSSALT ) { if ( cpkt. length > MT_PASSSALT_MAXLEN ) { return - 1 ; },0
417,<S2SV_ModStart> MUTT_ABORT ) { imap_cmd_step ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; imap_cmd_step ( adata ) ; return - 1 <S2SV_ModEnd> ; } else <S2SV_ModStart> ) ) ; imap_cmd_step ( adata ) ; return - 1 <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ) ; imap_cmd_step ( adata ) ; return - 1 <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ) ; imap_cmd_step ( adata ) ; return - 1 <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ) ; imap_cmd_step ( adata ) ; return - 1 <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ) ; imap_cmd_step ( adata ) ; return - 1 <S2SV_ModEnd> ; } else <S2SV_ModStart> ) ) ; imap_cmd_step ( adata ) ; return - 1 <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ) ; imap_cmd_step ( adata ) ; return - 1 <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ) ; imap_cmd_step ( adata ) ; return - 1 <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ) ; imap_cmd_step ( adata ) ; return - 1 <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ) ; imap_cmd_step ( adata ) ; return - 1 <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ) ; imap_cmd_step,0
418,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
419,"<S2SV_ModStart> ; if ( strncmp <S2SV_ModEnd> ( line, <S2SV_ModStart>, "" <S2SV_blank> "", 5 <S2SV_ModEnd> ) == 0",0
420,"<S2SV_ModStart> remainder, & rlen ) ; if ( ret ) return ret ; if ( rlen == 0 ) return ASN1_BAD_ID <S2SV_ModEnd> ; if (",0
421,"<S2SV_ModStart> * slavename ; if ( curconn -> username == NULL ) { syslog ( LOG_NOTICE, _ ( ""(%d) <S2SV_blank> Invalid <S2SV_blank> login <S2SV_blank> by <S2SV_blank> %s."" ), curconn -> seskey, curconn -> username ) ; abort_connection ( curconn, pkthdr, _ ( ""Login <S2SV_blank> failed, <S2SV_blank> incorrect <S2SV_blank> username <S2SV_blank> or <S2SV_blank> password\\r\\n"" ) ) ; return ; } <S2SV_ModStart> read_userfile ( ) ; if ( user == NULL ) { syslog ( LOG_NOTICE, _ ( ""(%d) <S2SV_blank> Invalid <S2SV_blank> login <S2SV_blank> by <S2SV_blank> %s."" ), curconn -> seskey, curconn -> username ) ; abort_connection ( curconn, pkthdr, _ ( ""Login <S2SV_blank> failed, <S2SV_blank> incorrect <S2SV_blank> username <S2SV_blank> or <S2SV_blank> password\\r\\n"" ) ) ; return ; } if ( user -> password == NULL ) { syslog ( LOG_NOTICE, _ ( ""(%d) <S2SV_blank> Invalid <S2SV_blank> login <S2SV_blank> by <S2SV_blank> %s."" ), curconn -> seskey, curconn -> username ) ; abort_connection ( curconn, pkthdr, _ ( ""Login <S2SV_blank> failed, <S2SV_blank> incorrect <S2SV_blank> username <S2SV_blank> or <S2SV_blank> password\\r\\",0
422,"<S2SV_ModStart> ; if ( unicode_compare_with_ASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart> { if ( unicode_compare_with_ASCIIString <S2SV_ModEnd> ( name,",0
423,"<S2SV_ModStart> off } ; if ( off > ut32_max ( sizeof ( buf ), UINT32_MAX - 1 ) ) { return - 1 ; }",0
424,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
425,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
426,"<S2SV_ModStart> size_t s ; size_t sz ; <S2SV_ModStart> return ; } sz = exif_get_long ( o, EXIF_BYTE_ORDER_INTEL ) ; if ( sz > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } <S2SV_ModStart>, s, sz <S2SV_ModEnd> ) ; if",0
427,<S2SV_ModStart> bd_addr ) { if ( bd_addr -> bd_type!= BT_BD_ADDR_TYPE_RANDOM ) return BT_STATUS_INVALID_ARGS ;,0
428,<S2SV_ModStart> int i ; size_t avail ; size_t <S2SV_ModEnd> expect ; txid <S2SV_ModStart> 4 ) ; if ( nxip < 0 || nxip > MAX_TXID ) goto bad_format ; <S2SV_ModStart> * 8 ; <S2SV_ModEnd> snap = palloc,0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. size <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
430,"<S2SV_ModStart> ( epoll_ ) ; size_t total = 0 <S2SV_ModStart>, count ) < 0 ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; total = ret ; } <S2SV_ModEnd> done : return",0
431,"<S2SV_ModStart> ( CMD_INITIALIZE, section_ptr <S2SV_ModEnd>, NULL )",0
432,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_PHNUM_MIN_SIZE : * ( size_t * ) val = ms -> elf_phnum_min_size ; return 0 ;,0
433,<S2SV_ModStart> offset ) { struct address_space * mapping = page -> mapping ; journal_t * journal = EXT4_JOURNAL ( <S2SV_ModEnd> mapping -> host,0
434,<S2SV_ModStart> ++ ) { if (! ( <S2SV_ModStart> + 1 ) ) ) return GF_OUT_OF_MEM,0
435,"<S2SV_ModStart> 17 ] ; size_t <S2SV_ModEnd> plen ; md5_state_t <S2SV_ModStart> = 0 ; strlcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> + 1, password, 82 ) ; md5data [ 82 <S2SV_ModEnd> ] = '\\0' <S2SV_ModStart> = '\\0' ; strlcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> + 1 + ( size_t ) <S2SV_ModStart> password ), pass_salt, 16 ) ; memset ( md5sum, 0, sizeof ( md5sum ) <S2SV_ModEnd> ) ; md5_init",0
436,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( Prefix,0
437,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
438,<S2SV_ModStart> ( ) ; g_hash_table_remove_all ( headers ) ;,0
439,"<S2SV_ModStart> -> y_buffer ; if ( src_ybc -> y_height > MAX_YHEIGHT ) { return ; } <S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst,",0
440,"<S2SV_ModStart> * cpi, TileDataEnc * tile_data <S2SV_ModEnd>, int mi_row <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> left_context ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( mi_col = <S2SV_ModStart> ; mi_col < tile_data <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> { int dummy_rate <S2SV_ModEnd> ; BLOCK_SIZE i <S2SV_ModStart> { int dummy_rate <S2SV_ModEnd> ; BLOCK_SIZE i <S2SV_ModStart> ; int64_t dummy_dist <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( is_smaller_than_smaller_than_smaller_than_smaller_than_smaller_than_smaller_than_smaller_than_smaller_than_smaller_than_smaller_than_smaller_than_smaller_than_smaller_than_smaller_than_smaller_than_smaller_than_smaller_than_smaller_than_smaller_than_smaller_than_smaller_than_smaller_than_smaller_than_smaller_than_smaller_than_smaller_than_smaller_than_smaller_than",0
441,"<S2SV_ModStart>, obj_tlen ; <S2SV_ModEnd> u_int offset ; <S2SV_ModStart> ) ) ; if ( tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } <S2SV_ModStart> ) ) ;",0
442,"<S2SV_ModStart> mbmi, const MV <S2SV_ModEnd> mvs [ 2 <S2SV_ModStart> i ) { <S2SV_ModEnd> vp9_inc_mv ( &",0
443,"<S2SV_ModStart> ) ; } res = vpx_codec_enc_config_default ( encoder -> interface ( ), & cfg, 0 ) ; if ( res ) die_codec ( & codec, & cfg ) ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if (!",0
444,<S2SV_ModStart> ; if ( skb_out == NULL ) goto free ; if (,0
445,<S2SV_ModStart> ) return ; if (! <S2SV_ModStart> netsnmp_mibindex_load ( ) ) { SNMP_FREE ( env_var ) ; return ; } <S2SV_ModEnd> DEBUGMSGTL ( (,0
446,"<S2SV_ModStart> { fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ], O_RDWR ) <S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> dev ) ) ) <S2SV_ModStart> 1 ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_KEY ) ) <S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_REL ) ) <S2SV_ModStart> x ++ ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> ]. mapped_id )",0
447,<S2SV_ModStart> i ++ ) vp9_free_frame_buffer_ext <S2SV_ModEnd> ( & ctx,0
448,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s, <S2SV_ModStart> & 1 ) vpx_lpf_vertical_4 <S2SV_ModEnd> ( s +",0
449,<S2SV_ModStart> krb5_error_code iakerb_alloc_context ( krb5_ctx_id_t * ctx_id <S2SV_ModEnd> ) { iakerb_ctx_id_t <S2SV_ModStart> = 0 ; * ctx_id = ctx ; <S2SV_ModStart> k5_gss_init_context ( & ( <S2SV_ModStart> ctx -> k5c ),0
450,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> bitmapDC = CreateCompatibleDC",1
451,<S2SV_ModStart> ; while ( ( <S2SV_ModStart> )!= START_CODE_PREFIX ) && ( ps_stream -> u4_offset < ps_stream -> u4_max_offset ),1
452,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { kfree ( string ) ; <S2SV_ModStart> - EINVAL ; }",0
453,"<S2SV_ModStart> ) ; } mono_reflection_error ( ""generic <S2SV_blank> inflated <S2SV_blank> method <S2SV_blank> %s <S2SV_blank> has <S2SV_blank> type <S2SV_blank> %s"", rmethod -> name, mono_type_to_string ( inflated -> type ) ) ;",0
454,<S2SV_ModStart> ) ] ; long <S2SV_ModEnd> tmp ; if,0
455,<S2SV_ModStart> char * last_elem = NULL <S2SV_ModStart> size_t len ; int enable_secure = 0 ; <S2SV_ModStart> ( ( ( strncasecmp <S2SV_ModEnd> ( & name <S2SV_ModStart> 'O' )? _dl_enable_secure <S2SV_ModEnd> : l -> <S2SV_ModStart> l -> l_origin <S2SV_ModEnd> ) ; if,0
456,"<S2SV_ModStart> ) ; } if ( decInst -> numSamples < 1 ) { DEC_API_TRC ( ""H264SwDecInit# <S2SV_blank> ERROR: <S2SV_blank> numSamples <S2SV_blank> < <S2SV_blank> 1"" ) ; return ( H264SWDEC_PARAM_ERR ) ; }",0
457,<S2SV_ModStart> drop ; } opt = & ( IPCB ( skb ) -> opt ) ;,0
458,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; break ; }",0
459,<S2SV_ModStart> goto errout ; if ( info -> stages > MAX_STAGES ) goto errout ;,0
460,<S2SV_ModStart> krb5_key_data * key_data ; int max_size = 0 <S2SV_ModStart> == NULL ) { max_size = 0 ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { max_size = 0 ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { max_size = 0 ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { max_size = 0 ; <S2SV_ModStart> goto cleanup ; },0
461,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
462,<S2SV_ModStart> ] ) ; if ( nByte < 0 ) { rc = SQLITE_NOMEM ; goto fail ; },0
463,"<S2SV_ModStart> filp ) { struct socket_info * si = <S2SV_ModEnd> SOCKET_I ( inode <S2SV_ModStart> ( inode ) ; struct sockaddr_storage addr ; struct sockaddr_storage * sp = & si -> addr ; struct sockaddr_storage * sp = & si -> sp ; struct sockaddr_storage * sp_addr = & si -> sp_addr ; int ret = - ENODEV ; if (! IS_ERR ( sp ) ) ret = sp -> sk_socklen ; else ret = - ENODEV ; spin_lock ( & si -> i_lock ) ; list_for_each_entry ( sp, & inode -> i_sock_list, list ) { ret = list_entry ( sp, struct sockaddr_storage, list ) ; if ( ret ) { struct sockaddr_storage * sp = & sp -> sp_addr ; spin_unlock ( & si -> i_lock ) ; sockaddr_put ( sp ) ; } } sock_release ( inode",0
464,"<S2SV_ModStart> * orelse, bool is_block, <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. is_block = is_block",0
465,"<S2SV_ModStart> char * name, my_bool * is_shared <S2SV_ModStart> ; if ( is_shared && ( <S2SV_ModStart> keyinfo -> key_alg!= HA_KEY_ALG_RTREE ) ) ) { if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; fn_format ( param -> temp_filename, param -> temp_filename, """", INDEX_TMP_EXT, 2 + 4 + 32 ) ; } else fn_format ( param -> temp_filename, param -> temp_filename, """", INDEX_TMP_EXT, 2 + 4 ) ; if ( param -> tmpfile_createflag ) { myf myf ; myf_init ( param -> tmpfile_createflag, MYF ( 0 ) ) ; myf_set_flags ( param -> tmpfile_createflag, MYF_NOCOPY ) ; myf_set_flags ( param -> tmpfile_createflag, MYF_NOCOPY ) ; } if ( filecopy ( param, new_file, share -> kfile, 0L, ( ulong ) share -> base. keystart, ""headerblock",0
466,"<S2SV_ModStart> return ""Invalid <S2SV_blank> frame <S2SV_blank> length <S2SV_blank> in <S2SV_blank> buffer"" ; case NGHTTP2_ERR_INVALID_FRAME_SIZE : return ""Invalid <S2SV_blank> frame <S2SV_blank> size <S2SV_blank> in <S2SV_blank> buffer"" ; case NGHTTP2_ERR_INVALID_FRAME_SIZE_EXCEEDED : return ""Invalid <S2SV_blank> frame <S2SV_blank> size <S2SV_blank> exceeded"" ; case NGHTTP2_ERR_INVALID_FRAME_SIZE_EXCEEDED : return ""Invalid <S2SV_blank> frame <S2SV_blank> size <S2SV_blank> exceeded"" ; case NGHTTP2_ERR_INVALID_FRAME_SIZE_EXCEEDED : return ""Invalid <S2SV_blank> frame <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> length"" ; case NGHTTP2_ERR_INVALID_FRAME_SIZE_EXCEEDED : return ""Invalid <S2SV_blank> frame <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> length"" ; case NGHTTP2_ERR_INVALID_FRAME_SIZE_EXCEEDED : return ""Invalid <S2SV_blank> frame <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> length"" ; case NGHTTP2_ERR_INVALID_FRAME_SIZE_EXCEEDED : return ""Invalid <S2SV_blank> frame <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> length"" ; case NG",0
467,"<S2SV_ModStart> UINT error ; if (! <S2SV_ModStart>, eventId ) ||! <S2SV_ModEnd> Stream_Read_UINT32 ( s <S2SV_ModStart>, pduLength ) ) { WLog_ERR ( TAG, ""Failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> event <S2SV_blank> id <S2SV_blank> %d <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d"", eventId, pduLength ) ; return ERROR_INVALID_DATA ; } <S2SV_ModEnd> # ifdef WITH_DEBUG_RDPEI",0
468,"<S2SV_ModStart> ) ; } if ( pData -> mqttTimeout > 0 ) { zsocket_setsockopt ( pData -> socket, ZMQ_LINGER, ( const char * ) pData -> linger, sizeof ( pData -> linger ) ) ; }",0
469,"<S2SV_ModStart> struct flowi6 fl6 ; struct ipv6_pinfo * opt <S2SV_ModStart> daddr ) ; opt = rcu_dereference ( np -> opt ) ; if (! opt ) return - EINVAL ; <S2SV_ModStart>, skb, <S2SV_ModEnd> & fl6, <S2SV_ModStart>, & fl6, opt <S2SV_ModStart>, skb, <S2SV_ModEnd> fl6, np",0
470,"<S2SV_ModStart> ; if ( ( <S2SV_ModStart>, ldblk ) ) == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModEnd> if ( quantum_info",0
471,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> UINT32 failureCode ; if (! Stream_IsEmpty ( s ) ) { <S2SV_ModStart> = NEGO_STATE_FAIL ; },0
472,<S2SV_ModStart> 0 ; int <S2SV_ModEnd> result = RLC_OK <S2SV_ModStart> 8 ) ; bn_free ( t ) ; <S2SV_ModStart> 8 ) ; bn_free ( t ) ; <S2SV_ModStart> 8 ) ; bn_free ( t ) ; <S2SV_ModStart> 8 ) ; bn_free ( t ) ; <S2SV_ModStart> 8 ) ; bn_free ( t ) ; <S2SV_ModStart> 8 ) ; bn_free ( t ) ; <S2SV_ModStart> 8 ) ; bn_free ( t ) ;,0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,<S2SV_ModStart> 8 ) ; psf = psf_allocate ( <S2SV_ModEnd> ) ; if,0
475,"<S2SV_ModStart> void fix_interp_filter ( VP9_COMMON_CONTEXT * ctx, <S2SV_ModStart> cm -> counts -> <S2SV_ModEnd> switchable_interp [ j <S2SV_ModStart> i ] += ctx -> counts -> <S2SV_ModEnd> switchable_interp [ i",0
476,<S2SV_ModStart> & cpi -> td. <S2SV_ModStart> mi_cols ) ; <S2SV_ModEnd> vp9_setup_src_planes ( x <S2SV_ModStart> subsampling_y ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
477,"<S2SV_ModStart> hp ) ; if (! <S2SV_ModEnd> htc_request_check_host_hdr ( hp <S2SV_ModStart> ( hp ) ) { WSPR <S2SV_ModEnd> ( sp, <S2SV_ModStart>, SLT_Error, ""Duplicated <S2SV_blank> HTTP <S2SV_blank> host <S2SV_blank> header"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> ) ; } }",0
478,"<S2SV_ModStart> EOFOp 0x07 char * magick_buffer <S2SV_ModEnd> ; Image * <S2SV_ModStart> char * ) magick_buffer <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( count!= 3 ) || ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart>. x = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. y = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. columns = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. rows = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ( memcmp",0
479,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> sizeof ( tETH_HDR ),1
480,<S2SV_ModStart> -> u4_cur_slice_offset = <S2SV_ModEnd> ps_cur_poc -> u4_cur_slice_offset,0
481,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> * karg ; <S2SV_ModEnd> struct pci_dev * <S2SV_ModStart> pci_dev * pdev <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> ) ) ; goto err_free_karg <S2SV_ModEnd> ; } if <S2SV_ModStart> karg ) ; goto err_free_karg <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; goto err_free_karg <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; goto err_free_karg <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; goto err_free_karg <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; goto err_free_karg <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; goto err_free_karg <S2SV_ModEnd> ; } ioc <S2SV_ModStart> karg ) ; err_free_karg : kfree ( karg ) ; err_free_karg : <S2SV_ModEnd> return PTR_ERR ( <S2SV_ModStart> ) ) ; err_free_karg : <S2SV_ModEnd> free_ioc ( ioc <S2SV_ModStart> ioc ) ; <S2SV_ModEnd> return PTR_ERR ( <S2SV_ModStart> ) ; } err_free_karg : kfree ( karg ) ;",0
482,<S2SV_ModStart> = 8 ; image -> rows = 256 ;,0
483,"<S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv",0
484,"<S2SV_ModStart> ; if ( exif_get_long ( buf + datao, EXIF_BYTE_ORDER_INTEL ) < 0 || exif_get_long ( buf + datao + 8, EXIF_BYTE_ORDER_INTEL ) > buf_size <S2SV_ModEnd> ) { exif_log <S2SV_ModStart> ; if ( exif_get_short ( buf + datao, EXIF_BYTE_ORDER_INTEL ) < 0 || exif_get_short ( buf + datao, EXIF_BYTE_ORDER_INTEL ) > buf_size <S2SV_ModEnd> ) { exif_log <S2SV_ModStart> ; if ( exif_get_long ( buf + o, EXIF_BYTE_ORDER_INTEL ) < 0 || exif_get_long ( buf + o + 2, EXIF_BYTE_ORDER_INTEL ) > buf_size <S2SV_ModEnd> ) { exif_log <S2SV_ModStart> ; if ( exif_get_long ( buf + o, EXIF_BYTE_ORDER_INTEL ) < 0 || exif_get_long ( o + 2, EXIF_BYTE_ORDER_INTEL ) > buf_size <S2SV_ModEnd> ) { exif_log <S2SV_ModStart> ; if ( exif_get_long (",0
485,"<S2SV_ModStart> ; if ( l_strlen ( viewfile ) > sizeof ( charbuf ) ) { L_ERROR ( ""viewfile <S2SV_blank> too <S2SV_blank> long\\n"", procName ) ; return 1 ; } if (",0
486,"<S2SV_ModStart> void unbind_ports ( int num_ports <S2SV_ModEnd> ) { SERVICE_OPTIONS <S2SV_ModStart> 1 ) ; if ( num_ports < 1 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> ports <S2SV_blank> [%d]"", num_ports ) ; return ; } <S2SV_ModStart>. next ; if ( num_ports > 1 ) { <S2SV_ModStart> service_options ) ; } <S2SV_ModStart> 0 ; } <S2SV_ModEnd> s_log ( LOG_DEBUG <S2SV_ModStart> servname ) ; <S2SV_ModEnd> CRYPTO_THREAD_unlock ( stunnel_locks",0
487,<S2SV_ModStart> void ) { if (! recovery_started ) return ;,0
488,<S2SV_ModStart> ; } } if ( hashTable [ 0 ] == ENC624J600_EHT_NONE ) { return ENC_EHT_ERR_INVALID_PARAMETER ; } <S2SV_ModStart> ] ) ; if ( hashTable [ 1 ] == ENC624J600_EHT_NONE ) { return ENC_EHT_ERR_INVALID_PARAMETER ; } <S2SV_ModStart> ] ) ; if ( hashTable [ 2 ] == ENC624J600_EHT_NONE ) { return ENC_EHT_ERR_INVALID_PARAMETER ; } <S2SV_ModStart> ] ) ; if ( hashTable [ 3 ] == ENC624J600_EHT_NONE ) { return ENC_EHT_ERR_INVALID_PARAMETER ; } <S2SV_ModStart> ) ) ; if ( hashTable [ 4 ] == ENC624J600_EHT_NONE ) { return ENC_EHT_ERR_INVALID_PARAMETER ; } <S2SV_ModStart> ] ) ; if ( hashTable [ 5 ] == ENC624J600_EHT_NONE ) { return ENC_EHT_ERR_INVALID_PARAMETER ; } <S2SV_ModStart> ] ) ; if ( hashTable [ 5 ] == ENC624J600_E,0
489,"<S2SV_ModStart> image ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
490,"<S2SV_ModStart> { WORD32 i, j <S2SV_ModStart> u4_num_total_curr ; } for ( j = 0 ; j < u4_num_total_curr ; j ++ ) { if ( ai4_num_st_curr_before [ j ] == 0 || ai4_num_st_curr_after [ j ] == 0 || ai4_num_lt_curr [ j ] == 0 || ai4_num_lt_curr [ j ] == 0 || ai4_num_lt_curr [ j ] == 0 || ai4_num_lt_curr [ j ] == 0 || ai4_num_lt_curr [ j ] == 0 || ai4_num_st_curr_after [ j ] == 0 || ai4_num_lt_curr [ j ] == 0 || ai4_num_lt_curr [ j ] == 0 || ai4_num_lt_curr [ j ] == 0 || ai4_num_lt_curr [ j ] == 0 || ai4_num_lt_curr [ j ] == 0 || ai4_num_lt_curr [ j ] == 0 || ai4_num_st_curr_after [",0
491,"<S2SV_ModStart>, int fmt, int * indent <S2SV_ModStart> child ) { if ( indent ) * indent ++ ='<S2SV_blank>'; <S2SV_ModStart> = str = print_string <S2SV_ModEnd> ( child -> <S2SV_ModStart> depth, fmt, indent <S2SV_ModStart> = ret = print_value ( child, depth, fmt, indent ) ; if ( str && ret ) len += strlen ( ret ) + strlen ( str ) + 2 + ( fmt? 2 + depth : 0 ) ; else fail = 1 ; child = child -> next ; } if (! fail ) { out = ( char * ) cJSON_malloc ( len ) ; if (! out ) fail = 1 ; } if (! fail ) { for ( i = 0 ; i < numentries ; ++ i ) { if ( names [ i ] ) cJSON_free ( names [ i ] ) ; if ( entries [ i ] ) cJSON_free ( entries [ i ] ) ; } cJSON_free ( entries ) ; return 0 ; } * out = '{' ; ptr = out + 1 ; if ( fmt ) * ptr ++ = '\\n' ; * ptr = 0 ; for ( i = 0 ; i < numentries ; ++ i ) { if (",0
492,<S2SV_ModStart> sk ) ; if ( writable ) { unix_state_lock ( sk ) ; other = unix_peer ( sk ) ; if ( other && unix_peer ( <S2SV_ModEnd> other )!= <S2SV_ModStart> = 0 ; unix_state_unlock ( sk ) ; } <S2SV_ModEnd> } if (,0
493,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; outpos += strlen ( outputbuffer ) ;",0
494,<S2SV_ModStart> ( OM_uint32 ) KRB5_BAD_IOV_SIZE <S2SV_ModEnd> ; return GSS_S_DEFECTIVE_TOKEN,0
495,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { vp9_ref_frame_t_t <S2SV_ModEnd> * frame = <S2SV_ModStart> ( args, vp9_ref_frame_t_t <S2SV_ModEnd> * ) ; <S2SV_ModStart> * fb ; if ( <S2SV_ModStart>, & fb )!= VPX_CODEC_OK ) return VPX_CODEC_ERR_INVALID_PARAM",0
496,<S2SV_ModStart> plug ) ; <S2SV_ModEnd> put_ioctx ( ctx,0
497,"<S2SV_ModStart> name, int rec_quick <S2SV_ModEnd> ) { int <S2SV_ModStart> ) ) { <S2SV_ModEnd> DBUG_RETURN ( ""mi_repair_by_sort""",0
498,"<S2SV_ModStart> s } ; uECC_word_t p [ uECC_MAX_WORDS * 2 ] ; <S2SV_ModStart> carry ], <S2SV_ModEnd> num_n_bits + 1",0
499,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|dao-truncated]"" <S2SV_ModEnd> ) ) ;",0
500,<S2SV_ModStart> ; } else if ( pool -> free_total == 0 ) { return ; } else <S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
501,"<S2SV_ModStart> tp ; { int i = 0 ; <S2SV_ModStart> ] ) { <S2SV_ModEnd> const char hex <S2SV_ModStart> const char hex [ ] = ""00112233445566778899aAbBcCdDeEfF"" ; int dcount = 0 ; for ( <S2SV_ModEnd> ; * cp <S2SV_ModStart> * dp ; <S2SV_ModEnd> if ( * <S2SV_ModStart> == 'X' ) { <S2SV_ModStart> 2 ) ; } <S2SV_ModStart> == 'O' ) { <S2SV_ModStart> 2 ) ; } <S2SV_ModStart> cp ; } i ++ ; } if ( meta ) cval = ( * cp & 0x1f ) ; if ( i == 0 ) cval = ( * cp & 0x1f ) ; if ( i == 0 ) cval = ( * cp & 0x1f ) ; if ( i == 0 ) cval = ( * cp & 0x1f ) ; if ( i == 0 ) cval = ( * cp & 0x1f ) ; if ( i == 0 ) cval = ( * cp & 0x1f ) ; if ( i == 0 ) cval = ( * cp & 0x1f ) ; if ( i == 0 ) cval = ( * cp & 0x1f ) ; if ( i == 0 ) c",0
502,<S2SV_ModStart> char detect [ 5 <S2SV_ModEnd> ] ) {,0
503,"<S2SV_ModStart>, * pixg <S2SV_ModEnd> ; PIXCMAP * <S2SV_ModStart> = 15 ; pixc = pixFewColorsOctcubeQuant1 ( pixs, level ) ; if ( pixc <S2SV_ModEnd> == NULL ) <S2SV_ModStart> == NULL ) { pixDestroy ( & pixc ) ; <S2SV_ModStart> NULL ) ; }",0
504,<S2SV_ModStart>. vf = vp8_mse16x16_ext <S2SV_ModEnd> ; xd ->,0
505,<S2SV_ModStart> int overhead = 32 <S2SV_ModEnd> + 4 + <S2SV_ModStart> int size = 32 <S2SV_ModEnd> ; if (,0
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NEGO_STATE_FAIL ; goto error <S2SV_ModEnd> ; } Stream_Read_UINT8 <S2SV_ModStart> = NEGO_STATE_FINAL ; return ; error : return ;,0
507,"<S2SV_ModStart> i, target_bits_per_mb ; int correction_factor ; int i <S2SV_ModStart> i, correction_factor <S2SV_ModEnd> ; target_bits_per_mb = <S2SV_ModStart> active_worst_quality ) ; correction_factor = get_rate_correction_factor ( cpi ) ; if ( correction_factor < 0.0 ) { return - 1 ; }",0
508,<S2SV_ModStart> ; value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ ; value |= TJA1101_CONFIG1_MII_MODE_MII_25MHZ <S2SV_ModEnd> ; tja1101WritePhyReg (,0
509,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
510,"<S2SV_ModStart> int dst_stride, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart>, left_col, 128 <S2SV_ModEnd> ) ; DECLARE_ALIGNED_ARRAY <S2SV_ModStart>, above_data, 128 <S2SV_ModEnd> + 16 ) <S2SV_ModStart> + y ; memset <S2SV_ModEnd> ( left_col, <S2SV_ModStart>, 129, 128 <S2SV_ModEnd> ) ; if <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_data, <S2SV_ModStart> + bs ; memset",0
511,"<S2SV_ModStart> ++ ; } else if ( pattern [ end ] == \'""\' ) { end ++ ; while ( ( pattern [ end ]!= 0 ) && ( pattern [ end ]!= \'""\' ) ) end ++ ; }",0
512,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_mmap_lock ) ;,0
513,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; write_profile_and_bit <S2SV_ModEnd> ( cm -> <S2SV_ModStart> wb ) ; write_bit_and_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; write_bit_and_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; write_bit_and_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> show_frame ) ; write_bit_and_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; write_bit_and_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> show_frame ) ; write_bit_and_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> COLOR_SPACE cs = get_key_frame_type ( cm ) ; write_frame_size ( cm, wb ) ; } else { if (! cm -> show_frame ) vp9_wb_write_bit ( wb, cm -> intra_only ) ; if (! cm -> error_resilient_mode ) vp9_wb_write_literal ( wb, cm -> reset_frame_context, 2 ) ; if ( cm -> intra_only ) { write_sync_code ( wb ) ; vp9_wb_write_literal ( wb,",0
514,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> strcmp ( im <S2SV_ModStart> == 0 ) { if (! rrd_graph_options_check ( im ) ) { fprintf ( stderr, ""Error: <S2SV_blank> %s\\n"", strerror ( errno ) ) ; exit ( EXIT_FAILURE ) ; } <S2SV_ModStart> ; } } }",0
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { q = osStrchr <S2SV_ModEnd> ( p +,1
516,<S2SV_ModStart> ; if ( i + 1 < NCH ( n ) &&,0
517,<S2SV_ModStart> KEY_FRAME ) { memcpy <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd ->,1
518,"<S2SV_ModStart> error_t error ; uint32_t status ; uint16_t nextPacket <S2SV_ModEnd> ; Enc624j600Context * <S2SV_ModStart> ( interface, ENC624J600_ESTAT <S2SV_ModEnd> ) & ESTAT_PKTCNT <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart>, sizeof ( uint32_t <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( status & ENC624J600_RSV_RECEIVED_OK <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( n, ENC624J600_MAX_FRAME_SIZE <S2SV_ModEnd> ) ; enc624j600ReadBuffer <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL <S2SV_ModEnd>, ENC624J600_RX_BUFFER_STOP ) <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J",0
519,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv, VALUE klass ) { VALUE content ; VALUE rb_schema ; VALUE errors ; xmlSchemaPtr schema ; xmlSchemaParserCtxtPtr ctx ; VALUE rb_schema ; VALUE errors ; VALUE klass_name ; xmlSchemaParserCtxtPtr ctx ; const char * const content_str ; int content_len ; const char * const parser_str ; const char * const parser_str ; const char * const parser_str ; const char * const * const parser_str ; const char * const parser_str ; const int content_len ; const char * const parser_str ; const int parse_len ; const char * const parser_str ; const char * const parser_str ; const char * const parser_str_str ; const char * const const * const const str_str_ptr ; const char * const const parser_str_ptr ; const char * const const parser_str_ptr ; const char * const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const const",0
520,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> strcmp ( config_opt <S2SV_ModStart> == 0 ) { <S2SV_ModStart> ""No <S2SV_blank> such <S2SV_blank> service <S2SV_blank> option <S2SV_blank> found"" ) ; }",0
521,<S2SV_ModStart> 2 ] ; if ( x + state -> xsize >= state -> xsize ) return - 1 ; <S2SV_ModStart> 2 ] ; if ( x + state -> xsize >= state -> xsize ) return - 1 ;,0
522,<S2SV_ModStart> err = - <S2SV_ModEnd> EALREADY ; if,0
523,<S2SV_ModStart> POLL_IN ) ; <S2SV_ModEnd> perf_event_wakeup ( handle,0
524,"<S2SV_ModStart> int len, u16 <S2SV_ModEnd> * pwcs ) <S2SV_ModStart> * s && ( len >= sizeof ( u16 ) ) <S2SV_ModEnd> ) { if <S2SV_ModStart> ; if ( len < size ) return - EINVAL ; <S2SV_ModEnd> * op ++ <S2SV_ModStart> * op ++ = ( u16 ) size <S2SV_ModEnd> ; } else <S2SV_ModStart> } else { if ( len < sizeof ( u16 ) ) { * op ++ = ( u16 ) size ; } else { <S2SV_ModStart> s ++ ; } <S2SV_ModEnd> } } return",0
525,"<S2SV_ModStart> EPROTONOSUPPORT ) { if ( as_console ) { sleep ( 2 ) ; } <S2SV_ModStart> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" <S2SV_ModEnd> ) ; }",0
526,"<S2SV_ModStart> ( interface, KSZ8851_RXFHSR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXMR | KSZ8851_RXFTL | KSZ8851_RXRF | KSZ8851_RXCE <S2SV_ModEnd> ) ) == <S2SV_ModStart> ( interface, KSZ8851_RXFDPR, KSZ8851_RXFDPR_RXFPAI <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851ReadFifo <S2SV_ModStart> ( interface, KSZ8851_RXFDPR, KSZ8851_RXFDPR_RXFPAI <S2SV_ModEnd> ) ; ksz8851ClearBit <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ancillary <S2SV_ModStart> } } } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
527,"<S2SV_ModStart> ast_for_funcdef_impl ( struct compiler <S2SV_ModEnd> * c, <S2SV_ModStart> * n, asdl_seq * decorator_seq, int is_async, const node * name, asdl_seq * body <S2SV_ModEnd> ) { identifier <S2SV_ModStart> returns, type_comment, name, body -> n_col_offset, body -> n_arena ) ; else if ( type_comment && NCH ( n ) > 1 ) { tc = CHILD ( n, NCH - 1 ) ; if ( TYPE ( tc ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( tc ) ; } <S2SV_ModEnd> else return FunctionDef",0
528,"<S2SV_ModStart> ( mm, 0xA00000 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( pgd, 0xA00000 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( pud, 0xA00000 <S2SV_ModEnd> ) ; split_huge_page_pmd <S2SV_ModStart>, pmd, 0xA00000 <S2SV_ModEnd>, & ptl <S2SV_ModStart> : flush_tlb ( ) ; mm_dec_nr_pmds ( mm",0
529,"<S2SV_ModStart> ; if ( 0!= message_left ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> message_left <S2SV_blank> overflow!"" ) ; return - 1 ; } if (",0
530,"<S2SV_ModStart> ) ) { if (! hal_set_mode ( callbacks_get_adapter_struct ( ), hal_MODE_READ_ONLY ) ) { printf ( ""Unable <S2SV_blank> to <S2SV_blank> set <S2SV_blank> mode <S2SV_blank> to <S2SV_blank> READ_ONLY.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; }",0
531,"<S2SV_ModStart> 0 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif <S2SV_ModStart> row ++ ) <S2SV_ModEnd> for ( col <S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD <S2SV_ModStart> & 1 ] ; # else RAW ( row, col ) = pred [ col & 1 ] ; # endif <S2SV_ModEnd> } } }",0
532,<S2SV_ModStart> len < needed || len > param -> data_start,0
533,"<S2SV_ModStart> ; if ( ( <S2SV_ModStart>, ldblk ) ) == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModEnd> if ( quantum_info",0
534,<S2SV_ModStart> ( bfqq ) bfq_idle_slice_timer <S2SV_ModEnd> ( bfqq ),0
535,<S2SV_ModStart> += 1 ; if ( orderInfo -> orderType == ORDER_TYPE_REFRESHING ) { length += 2 ; },0
536,<S2SV_ModStart> ; if (! new_create &&! new_is_dir ) { err = - EPERM ; if ( d_is_dir ( new ) &&! overwrite ) { err = - EPERM ; goto out ; } if ( <S2SV_ModStart> d_inode ) ; },0
537,"<S2SV_ModStart> int plane ; vp9_foreach_transformed_block_in_all_plans <S2SV_ModEnd> ( xd,",0
538,"<S2SV_ModStart> * cpi, TileDataEnc * tile_data <S2SV_ModEnd>, int mi_row <S2SV_ModStart> -> e_mbd ; const TileInfo * const tile_info = & tile_data -> tile_info ; <S2SV_ModStart> ( cpi, tile_data <S2SV_ModEnd>, mi_row, <S2SV_ModStart> ( cpi, tile_data <S2SV_ModEnd>, mi_row,",0
539,<S2SV_ModStart> = NULL ; reader. hrtf = NULL ;,0
540,<S2SV_ModStart> -> ranges = safe_calloc <S2SV_ModEnd> ( sizeof (,0
541,"<S2SV_ModStart> ; if ( flags & VP8_EFLAG_FORCE_GF ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( flags & VP8_EFLAG_NO_UPD_ARF ) { if ( ctx -> cpi -> flags & VP8_CPI_FLAG_NO_UPD_ARF ) { if ( ctx -> cpi -> flags & VP8_CPI_FLAG_NO_UPD_ARF ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags <S2SV_blank> (force <S2SV_blank> GF <S2SV_blank> flag <S2SV_blank> set)"" ; return VPX_CODEC_INVALID_PARAM ; } } else { if ( ctx -> cpi -> flags & VP8_CPI_FLAG_NO_UPD_ARF ) { if ( ctx -> cpi -> flags & VP8_CPI_FLAG_NO_UPD_ARF ) { if ( ctx -> cpi -> flags & VP8_CPI_FLAG_NO_UPD_ARF ) { if ( ctx -> cpi -> flags & VP",0
542,"<S2SV_ModStart> ; if ( ( <S2SV_ModStart>, ldblk ) ) == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModEnd> if ( quantum_info",0
543,<S2SV_ModStart>! head ) <S2SV_ModEnd> return - EINVAL <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
544,"<S2SV_ModStart> * pptr, u_int <S2SV_ModEnd> len ) { <S2SV_ModStart> advance ; u_int <S2SV_ModEnd> tlen ; const <S2SV_ModStart> case BGP_ATTR_TYPE_IPV4 : if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_ATTR_TYPE_IPV6 : if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; }",0
545,"<S2SV_ModStart>, ""<tr><td>Runtime <S2SV_blank> status</td><td>%s</td></tr>"", MonitStatus <S2SV_ModEnd> ) ; StringBuffer_append",0
546,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
547,"<S2SV_ModStart>, ""%s"", <S2SV_ModEnd> arStr ) ;",0
548,"<S2SV_ModStart> iad_num ++ ; if ( iad_num >= USB_MAXINTERFACES ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, nintf_orig, USB_MAXINTERFACES ) ; nintf = USB_MAXINTERFACES ; }",0
549,"<S2SV_ModStart>, 0, PERF_OUTPUT_MODE_READ <S2SV_ModEnd> ) ; if",0
550,<S2SV_ModStart> ; distortion = vpx_variance16x16 <S2SV_ModEnd> ( * (,1
551,"<S2SV_ModStart> interface ) ; <S2SV_ModEnd> if ( macCompAddr <S2SV_ModStart> ) ) { enc624j600WriteReg ( interface, ENC624J600_MAADR1, ENC624J600_MAADR1_DEFAULT ) ; <S2SV_ModStart> temp ) ; enc624j600WriteReg ( interface, ENC624J600_MAADR2, ENC624J600_MAADR2_DEFAULT ) ; <S2SV_ModStart> temp ) ; enc624j600WriteReg ( interface, ENC624J600_MAADR3, ENC624J600_MAADR3_DEFAULT ) ; <S2SV_ModStart> ] ) ; enc624j600WriteReg ( interface, ENC624J600_MAADR1, ENC624J600_MAADR1_DEFAULT ) ; <S2SV_ModStart> ] ) ; enc624j600WriteReg ( interface, ENC624J600_MAADR2, ENC624J600_MAADR2_DEFAULT ) ; <S2SV_ModStart> ] ) ; enc624j600WriteReg ( interface, ENC624J600_MAADR3, ENC624J600_MAADR3_DEFAULT",0
552,<S2SV_ModStart> * start ; if ( psf -> header == NULL ) return ; <S2SV_ModStart> header ) ; if ( maxlen >= sizeof ( psf -> header ) ) return ; <S2SV_ModStart> ; start = <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header <S2SV_ModEnd> ; maxlen = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> return ; },0
553,<S2SV_ModStart> -> alg_priv ) { <S2SV_ModStart> alg_priv ) ; ctx -> priv -> alg_priv = NULL ; },0
554,<S2SV_ModStart> { sf -> <S2SV_ModEnd> recode_loop = ( <S2SV_ModStart> ; sf -> <S2SV_ModEnd> less_rectangular_check = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> mode_skip_start = 10 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> recode_loop = ALLOW_RECODE_KFARFGF <S2SV_ModStart> = 1 ; <S2SV_ModEnd> } if ( <S2SV_ModStart> 2 ) { <S2SV_ModEnd> if ( cpi <S2SV_ModStart> ; sf -> <S2SV_ModEnd> recode_loop = ALLOW_RECODE_KFMAXBW <S2SV_ModStart> = 1 ; <S2SV_ModEnd> } if ( <S2SV_ModStart> 2 ) { <S2SV_ModEnd> if ( cpi <S2SV_ModStart> ; sf -> <S2SV_ModEnd> less_rectangular_check = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> mode_skip_start = 10 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> mode_skip_start = 10 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> recode_loop = ALLOW_RECODE_KFMAXBW <S2SV_ModStart> ; sf -> <S2SV_ModEnd> allow_skip_recode = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> use_rd_breakout = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> use_split_mask = DISABLE_COMPOUND_SPLIT <S2SV_ModStart> ; sf -> <S2SV_ModEnd> use_rd_breakout = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> use_pred_breakout = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> use_pred_breakout = 1 <S2SV_ModStart> ;,0
555,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ]. poll_count ),0
556,<S2SV_ModStart> int goodsize = ( <S2SV_ModStart> 2 * EXTRA_STACK ) <S2SV_ModStart> ; if ( goodsize < inuse <S2SV_ModEnd> && goodsize <,0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,<S2SV_ModStart> n ) ; if (! str ) { return NULL ; } <S2SV_ModStart> errstr ) { <S2SV_ModEnd> Py_DECREF ( type,0
559,"<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> } if ( strncmp <S2SV_ModEnd> ( ""encoding-mode"", <S2SV_ModStart> ""encoding-mode"", option_name, strlen ( ""encoding-mode"" ) <S2SV_ModStart> else if ( strncmp <S2SV_ModEnd> ( ""layers"", <S2SV_ModStart> ""layers"", option_name, strlen ( ""layers"" ) <S2SV_ModStart> else if ( strncmp <S2SV_ModEnd> ( ""scale-factors"", <S2SV_ModStart> ""scale-factors"", option_name, strlen ( ""scale-factors"" ) <S2SV_ModStart> else if ( strncmp <S2SV_ModEnd> ( ""quantizers"", <S2SV_ModStart> ""quantizers"", option_name, strlen ( ""quantizers"" ) <S2SV_ModStart> ; if ( svc_ctx -> quantizer_keyframe ) { svc_log ( svc_ctx, SVC_LOG_ERROR, ""keyframe <S2SV_blank> is <S2SV_blank> not <S2SV_blank> set\\n"" ) ; res = VPX_CODEC_INVALID_PARAM ; break ; } else if ( strncmp ( ""quantizers-keyframe"", option_name, strlen ( ""quantizers"" ) ) == 0 ) { res = parse_quantizer_values ( svc_ctx, option_value, 0 )",0
560,<S2SV_ModStart> ) ; } <S2SV_ModEnd> mb_index = 0,0
561,<S2SV_ModStart> self ) { size_t <S2SV_ModEnd> i ; PyObject,1
562,,1
563,"<S2SV_ModStart> ) ) { if ( mysql_errno ( imp_dbh -> pmysql ) == MYSQL_ERR_OK ) { <S2SV_ModStart> pmysql ) ) ; } else { do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; }",0
564,<S2SV_ModStart> ) || ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) ) <S2SV_ModStart> ( need_close || TEMP_FAILURE_RETRY ( <S2SV_ModStart> & size ) ),0
565,<S2SV_ModStart> struct ieee_802_11_phdr phdr ; gboolean mpdu_len_set = FALSE <S2SV_ModStart> ; if ( mpdu_len_set &&,0
566,<S2SV_ModStart> ; sh = sds_malloc <S2SV_ModEnd> ( hdrlen +,0
567,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> BYTE a_val ; BOOL success ; <S2SV_ModStart> -> ColorLossLevel ; success = nsc_encode_argb_to_aycocg_with_plane_buffers ( context, data, scanline, yplane, coplane, cgplane, aplane ) ; if (! success ) return success ; <S2SV_ModStart> ; } } return success ;",0
568,<S2SV_ModStart> ERR_PTR ( - ERANGE <S2SV_ModEnd> ) ; *,0
569,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> RATE_CONTROL * rc <S2SV_ModStart> rc = & cpi -> rc ; const int max_frame_level = cpi -> oxcf. starting_buffer_level ; const int max_frame_level_max = cpi -> oxcf. starting_buffer_level / 2 ; const int max_boost = ( int ) ( max_frame_level_max - cpi -> oxcf. starting_buffer_level ) ; <S2SV_ModStart> target = ( <S2SV_ModEnd> int ) ( <S2SV_ModStart> int ) ( max_frame_level_max - <S2SV_ModStart> int ) ( <S2SV_ModEnd> cpi -> output_framerate <S2SV_ModStart> cpi -> output_framerate <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ; if ( rc -> frames_since_key > cpi -> oxcf. starting_buffer_level ) { kf_boost = ( int ) ( kf_boost * rc -> frames_since_key / ( cpi -> oxcf. starting_buffer_level - 2 ) ) ; } else { kf_boost = ( int ) ( kf_boost * rc -> frames_since_key / ( cpi -> oxcf. starting_buffer_level - 2 ) ) ; } target = ( (,0
570,"<S2SV_ModStart> TX_MODE read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> == ALLOW_32X32 ) { TX_MODE bit = vpx_read_bit <S2SV_ModEnd> ( r ) <S2SV_ModStart> r ) ; if ( bit < 0 ) return TX_MODE_INVALID ; tx_mode += bit ; }",0
571,"<S2SV_ModStart> : # line 1046 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> } # line 1046 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 1051 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1057 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1080 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1081 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1081 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1081 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1081 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1081 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1081 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1081 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy",0
572,"<S2SV_ModStart> -> cpi ; MACROBLOCKD_EXT * const xd = args -> xd ; MACROBLOCKD_EXT * const fc = & cpi -> common. fc ; <S2SV_ModStart> & cpi -> <S2SV_ModEnd> plane [ plane <S2SV_ModStart> plane_type ; const tran_low_t <S2SV_ModEnd> * qcoeff = <S2SV_ModStart> = cpi -> fc. coef_probs <S2SV_ModEnd> [ tx_size ] <S2SV_ModStart> UNCONSTRAINED_NODES ] = fc -> <S2SV_ModEnd> coef_probs [ tx_size <S2SV_ModStart> = cpi -> counts <S2SV_ModEnd>. eob_branch [ <S2SV_ModStart> tx_size ) ; const int aoff, loff ; txfrm_block_to_raster_xy ( plane_bsize, tx_size, block, & aoff, & loff ) ; pt = get_entropy_context ( tx_size, pd -> above_context, segment_id, tx_size, aoff, loff ) ; c = get_entropy_context ( tx_size, pd -> above_context, segment_id, tx_size, eob, aoff, loff ) ; t = * tp ; int c ; int pt ; int c ; TOKENEXTRA * t = * tp ; int <S2SV_ModEnd> * scan,",0
573,<S2SV_ModStart> pSelect -> pSrc ; assert ( pSelect -> pTab -> selFlags & SF_View ),0
574,"<S2SV_ModStart> users ) ; if ( sv_ops -> set_timeout ) { int err ; err = svc_create ( & nfs4_callback_program, NFS4_CALLBACK_BUFSIZE, sv_ops ) ; if ( err ) return ERR_PTR ( err ) ; }",0
575,"<S2SV_ModStart> point, const double <S2SV_ModEnd> scalar, const",0
576,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
577,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_DONTWAIT ) )",0
578,"<S2SV_ModStart> s ) { if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) ) ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> retrying"", sock_fd, errno ) ; break ; } <S2SV_ModEnd> ret = send",0
579,"<S2SV_ModStart> = NULL ; char * path = NULL ; <S2SV_ModStart> next ) { if ( strcmp ( prop_name, XML_ATTR_ID ) == 0 ) { continue ; } else <S2SV_ModStart> ; if ( xmlDocGetRootElement ( xml -> doc ) ) { path = xml_get_path ( xml ) ; } else { path = xml_get_path ( xml ) ; } if ( <S2SV_ModStart> } else { <S2SV_ModEnd> crm_trace ( ""Cannot <S2SV_blank> add <S2SV_blank> new <S2SV_blank> node <S2SV_blank> %s <S2SV_blank> at <S2SV_blank> %s"" <S2SV_ModStart> ; } } <S2SV_ModEnd> while ( cIter",0
580,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> SvcInternal * get_const_svc_internal <S2SV_ModStart> NULL ; return <S2SV_ModEnd> svc_ctx -> internal,0
581,<S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( Z_TYPE_IS_STRING <S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( Z_TYPE_IS_LONG,0
582,"<S2SV_ModStart> only_420 ) { int i ; <S2SV_ModStart> char buffer [ 79 <S2SV_ModEnd> ] ; int <S2SV_ModStart> -> vpx_bps = 14 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_bps = 14 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_bps = 14 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_bps = 14 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_bps = 14 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_bps = 14 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_bps = 14 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_bps = 14 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chrom",0
583,"<S2SV_ModStart> buf ; { char * name = xstrdup ( buf ) ; <S2SV_ModStart> * otmp = safe_readobjnam <S2SV_ModEnd> ( buf, <S2SV_ModStart> ( buf, name <S2SV_ModEnd> ) ; if",0
584,<S2SV_ModStart> ( ) { <S2SV_ModEnd> if ( read_xattrs_from_disk <S2SV_ModStart> == 0 ) goto error <S2SV_ModEnd> ; if ( <S2SV_ModStart> == FALSE ) goto error <S2SV_ModEnd> ; if ( <S2SV_ModStart> == FALSE ) goto error <S2SV_ModEnd> ; if ( <S2SV_ModStart> == FALSE ) goto error <S2SV_ModEnd> ; if ( <S2SV_ModStart> read_fragment_table ( & sBlk. s. <S2SV_ModStart> == FALSE ) goto error <S2SV_ModEnd> ; if ( <S2SV_ModStart> == FALSE ) goto error <S2SV_ModEnd> ; if ( <S2SV_ModStart> == FALSE ) goto error <S2SV_ModEnd> ; if ( <S2SV_ModStart> return TRUE ; error : return FALSE ;,0
585,"<S2SV_ModStart> rule * rule, const char * * environ <S2SV_ModStart> count = 0 <S2SV_ModEnd> ; for ( <S2SV_ModStart> ; } } <S2SV_ModEnd> return env ;",0
586,"<S2SV_ModStart> -> seg ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> -> base_qindex, cpi -> in_frame_q_adj_ratio <S2SV_ModEnd> [ segment ] <S2SV_ModStart> ; } } memset ( cpi -> segmentation_map, 0, cm -> mi_rows * cm -> mi_cols ) ; memset ( cpi -> complexity_map, 0, cm -> mi_rows * cm -> mi_cols ) ;",0
587,"<S2SV_ModStart> = make_type ( ""module"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""interactive"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart>, mod_type, Interactive_fields, 1 ) ; if (! Interactive_type ) return 0 ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; Suite_type = make_type ( ""suite"", mod_type, Suite_fields, 1 ) ; if (! Suite_type ) return 0 ; stmt_type = make_type ( ""stmt"", & AST_type, NULL, 0 ) ; if (! stmt_type ) return 0 ; if (! add_attributes ( stmt_type, stmt_attributes, 4 ) ) return 0 ; FunctionDef_type = make_type ( ""FunctionDef"", stmt_type, FunctionDef_fields, 5 ) ; if (! FunctionDef_type ) return 0 ; AsyncFunctionDef_type = make_type ( ""AsyncFunctionDef"", stmt_type, AsyncFunctionDef_fields, 5 ) ; if (! AsyncFunctionDef_type ) return 0",0
588,"<S2SV_ModStart> ) ; } if (! access ( log_path, F_OK ) ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> access <S2SV_blank> log <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, log_path, strerror ( errno ) ) ; is_logging = false ; return ; }",0
589,<S2SV_ModStart> ) ; } if ( m == PREDICTION_B ) { unsigned int * const bct = is_key? b_modes : inter_b_modes ; int b = 0 ; do { ++ bct [ xd -> block [ b ]. bmi. mode ] ; } while ( ++ b < 16 ) ; },0
590,"<S2SV_ModStart> num1, num2, len <S2SV_ModStart>, * StartClean <S2SV_ModEnd> ; SetDefaults ( <S2SV_ModStart> t ++ ; len = strlen ( s ) ; outpos = outputbuffer ; len <S2SV_ModEnd> += sprintf ( <S2SV_ModStart> += sprintf ( len <S2SV_ModEnd>, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"", <S2SV_ModStart> = 1 ; len <S2SV_ModEnd> += sprintf ( <S2SV_ModStart> += sprintf ( len <S2SV_ModEnd>, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", <S2SV_ModStart> ; if ( len > 20 ) len = 20 ; outpos = outputbuffer ; len <S2SV_ModEnd> += sprintf ( <S2SV_ModStart> ; if ( len > 20 ) len = 20 ; outpos = outputbuffer ; len <S2SV_ModEnd> += sprintf ( <S2SV_ModStart> += sprintf ( len <S2SV_ModEnd>, ""%s"", <S2SV_ModStart> ; if ( len > 20 ) len = 20 ; outpos = outputbuffer ; len = sprintf ( outpos, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"", <S2SV_ModStart> ; if ( len > 20 ) len = 20 ; if ( <S2SV_ModStart> = outpos ; len = strlen ( outputbuffer ) ; outpos = outputbuffer ;",0
591,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lower, & tmp ) < 0 ) { return 1 ; } else <S2SV_ModEnd> { int res <S2SV_ModStart> int res ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { lower = NULL ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_upper, & tmp ) < 0 ) { return 1 ; } else { upper = NULL ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_step, & tmp ) < 0 ) { return 1 ; } else <S2SV_ModEnd> { int res <S2SV_ModStart> ; Py_ssize_t len <S2SV_ModEnd> ; tmp = <S2SV_ModStart> Py_ssize_t i ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { int res ; <S2SV_ModStart> len ; Py_ssize_t <S2SV_ModEnd> i ; dims <S2SV_ModStart> len ; Py_ssize_t <S2SV_ModEnd> i ; tmp <S2SV_ModStart> len ; Py_ssize_t <S2SV_ModEnd> i",0
592,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
593,"<S2SV_ModStart> int err ; u32 handle ; u32 band ; <S2SV_ModStart> ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; err = - EOPNOTSUPP ; goto err_delete ; } } if ( match ) { handle = knode -> handle ; band = knode -> res -> classid ; iter -> mask = mask ; iter -> val = val ; err = nfp_abm_update_band_map ( alink ) ; if ( err ) goto err_delete ; return 0 ; err_delete : nfp_abm_u32_knode_delete ( alink, knode ) ; return err <S2SV_ModEnd> ; } <S2SV_null>",0
594,<S2SV_ModStart> ) ; } if ( global -> passes == 2 ) <S2SV_ModStart> g_pass = global <S2SV_ModEnd>? pass? <S2SV_ModStart> : VPX_RC_ONE_PASS ; else stream -> config. cfg. g_pass = VPX_RC_ONE_PASS ; <S2SV_ModStart> ; stream -> <S2SV_ModEnd> nbytes = 0,0
595,"<S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( new_data,",0
596,<S2SV_ModStart> data_end ) { const <S2SV_ModStart> pbi -> common ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = 1 << cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; TileBuffer tile_buffers [ 4 ] [ 1 << 6 ] <S2SV_ModStart> = NULL ; <S2SV_ModEnd> assert ( tile_rows <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> aligned_cols ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> aligned_cols ) ; memset <S2SV_ModEnd> ( cm ->,0
597,"<S2SV_ModStart> * vp9_decoder_create ( <S2SV_ModEnd> VP9D_CONFIG * oxcf <S2SV_ModStart> ovcf ) { VP9Decoder * const pbi = vpx_calloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> pbi ) ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> = 1 ; vpx_memset ( & pbi -> ref_frame_map, - 1, sizeof ( pbi -> ref_frame_map ) ) ; pbi -> ref_frame_map = vpx_calloc ( 1, sizeof ( cm -> ref_frame_map ) ) ; pbi -> <S2SV_ModEnd> current_video_frame = 0 <S2SV_ModStart> = 0 ; pbi -> oxcf = * oxcf ; pbi -> ready_for_new_data = 1 ; pbi -> decoded_key_frame = 0 ; vp9_init_dequantizer ( cm ) ; vp9_loop_filter_init ( cm ) ; cm -> error. setjmp = 0 ; vp9_worker_init ( & pbi -> lf_worker ) ; pbi -> ref_frame_map = vpx_calloc ( 1, sizeof ( cm -> ref_frame_map ) ) ; pbi -> ref_frame_",0
598,"<S2SV_ModStart> dref ) { if ( bs -> bits_left < 8 ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> bitstream <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; return GF_EINVAL ; } <S2SV_ModStart> ) ) ; if (! <S2SV_ModStart> GF_ISOM_BOX_TYPE_DREF ) ; if (! ( ( GF_DataInformationBox * ) s ) -> dref ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> bitstream <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; return GF_EINVAL ; }",0
599,<S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> NULL || opt -> opt. <S2SV_ModEnd> cipso == 0,0
600,"<S2SV_ModStart> tokens, const vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> do { const vpx_tree_index <S2SV_ModEnd> j = tree",1
601,"<S2SV_ModStart> ( img ) { <S2SV_ModStart> img ) ; if ( res!= VPX_CODEC_OK ) { ctx -> base. err_detail = ""Invalid <S2SV_blank> image <S2SV_blank> data."" ; return res ; } }",0
602,"<S2SV_ModStart>, & len, 0",1
603,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> in ) { memset ( s, 0, 16 ) ; memset ( x, 0, 16 ) ; memset ( u, 0, 32 ) ; memset ( v, 0, 32 ) ; <S2SV_ModStart> ) ; } memcpy ( in, s, 16 ) ; memcpy ( in + 16, s + 16 ) ; memcpy ( in + 16, s + 16, 16 ) ; memcpy ( in + 16, v + 16, 16 ) ; memcpy ( in + 16, s + 16, 16 ) ; memcpy ( in + 16, s + 16, 16 ) ; memcpy ( in + 16, s + 16, 16 ) ; memcpy ( in + 16, v + 16, 16 ) ;",0
604,"<S2SV_ModStart> rc, const VP9EncoderConfig <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> ( int64_t ) oxcf <S2SV_ModEnd> -> av_per_frame_bandwidth *",0
605,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
606,"<S2SV_ModStart> * cpi, MACROBLOCK * const x, <S2SV_ModStart>, BLOCK_SIZE bsize, int skip_encode_frame <S2SV_ModStart> -> common ; <S2SV_ModEnd> MACROBLOCKD * const <S2SV_ModStart> -> mbmi ; <S2SV_ModEnd> const int mis <S2SV_ModStart> bsize ] ; <S2SV_ModEnd> x -> skip_recode <S2SV_ModStart> -> skip_recode = skip_encode_frame <S2SV_ModEnd> && mbmi -> <S2SV_ModStart>. allow_skip_recode ; <S2SV_ModEnd> x -> skip_optimize <S2SV_ModStart> ; if ( skip_encode_frame <S2SV_ModEnd> ) { if <S2SV_ModStart> } else { set_ref_ptrs_key <S2SV_ModEnd> ( cm,",0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr,0
608,"<S2SV_ModStart> range_max ) { int64_t value ; int64_t <S2SV_ModEnd> position, zeroes <S2SV_ModStart> position, zeroes <S2SV_ModEnd>, j ; <S2SV_ModStart> gbc ) ; if ( ctx -> trace_enable ) { value = get_bits_long ( gbc, 0 ) ; if ( value < range_min || value > range_max ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""%s <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range: <S2SV_blank> "" ""%"" PRIu64 "", <S2SV_blank> but <S2SV_blank> must <S2SV_blank> be <S2SV_blank> in <S2SV_blank> [%"" PRIu64 "",%"" PRIu64 ""].\\n"", name, value, range_min, range_max ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> 1 ) { value = get_bits_long ( gbc, 0 ) ; for ( j = 0 ; j < zeroes ; j ++ ) bits [ i ++ ] = ( value >> ( zeroes - j - 1 ) & 1 )? '1' : '0' ; value += ( 1 << zeroes ) - 1 ; bits [ i ] = value ; } if ( ctx -> trace_enable ) { bits [ i ] = 0 ; ff_cbs_trace_syntax",0
609,"<S2SV_ModStart> || strchr ( ""!#$%&\'*+-.^_`|^"" <S2SV_ModEnd>, c ) <S2SV_ModStart> || strchr ( ""!#$%&\'*+-.^_`|^"" <S2SV_ModEnd>, c )",0
610,"<S2SV_ModStart>, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_origin. ptr = NULL, packet -> http_origin. len = 0, packet -> http_x_session_type. ptr = NULL, packet -> http_x_session_type. len = 0, packet -> server_line. ptr = NULL, packet -> server_line. len = 0, packet -> <S2SV_ModStart> = 0, <S2SV_ModEnd> packet -> http_num_headers",0
611,"<S2SV_ModStart> { q = QueueAuthenticPixels_Internal <S2SV_ModEnd> ( image, <S2SV_ModStart> x ), Max <S2SV_ModEnd> ( 4, <S2SV_ModStart> y ), <S2SV_ModEnd> exception ) ;",0
612,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL ) <S2SV_ModStart> EINTR ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL )",0
613,<S2SV_ModStart> action ) { if ( w < 0 || h < 0 || w > 1 || h > 1 || h > 2 || w > 3 || h > 3 || w > 4 || w > 5 || h > 7 || h > 8 || w > 8 || h > 9 || w > 10 || h > 10 || w > 20 || h > 20 || h > 20 || h > 20 || h > 20 || w > 20 || h > 20 || w > 20 || h > 20 || h > 20 || h > 20 || w > 20 || h > 20 || w > 20 || h > 20 || w > 20 || h > 20 || h > 20 || h > 20 || h > 20 || w > 20 || w > 20 || h > 20 || h > 20 || h > 20 || h > 20 || w > 20 || w > 20 || h > 20 || w > 20 || h > 20 || w > 20 || h > 20 || w > 20 || h > 20 || w > 20 || h > 20 || w > 20 || h > 20 || w > 20 || w > 20 || w > 20 || h > 20 || h > 20 || h > 20 || h > 20 || h > 20 ||,0
614,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; if ( outpos >= outputbuffer ) { perror ( ""Error <S2SV_blank> in <S2SV_blank> SetTransferMatrix"" ) ; exit ( EXIT_FAILURE ) ; }",0
615,"<S2SV_ModStart> return FALSE ; if ( Stream_GetRemainingLength ( s ) < 4 ) { <S2SV_ModStart> ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" ) ; return FALSE ; }",0
616,<S2SV_ModStart> cm -> mb_cols && cm -> mb_cols > 1,0
617,<S2SV_ModStart> -> b_multithreaded_rd ) { <S2SV_ModStart> mb_rows ) ; },0
618,<S2SV_ModStart> 0 ) { xWantedSize = ( xWantedSize + portBYTE_ALIGNMENT ) & ~ portBYTE_ALIGNMENT_MASK ; <S2SV_ModStart> 0 ) { if ( xWantedSize > xFreeBytesRemaining ) { <S2SV_ModStart> ) ) ; } else { mtCOVERAGE_TEST_MARKER ( ) ; },0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,"<S2SV_ModStart> s ) { uint32 <S2SV_ModEnd> num_updates ; uint16 <S2SV_ModStart> ( Protocol, Info <S2SV_ModEnd>, ""%s()"", <S2SV_ModStart> ++ ) { in_uint32_le ( s, left ) ; in_uint32_le ( s, top ) ; in_uint32_le ( s, right ) ; in_uint32_le ( s, bottom ) ; in_uint32_le ( s, width ) ; in_uint32_le ( s, bpp ) ; Bpp = ( bpp + 7 ) / 8 ; in_uint32_le ( s, compress ) ; in_uint32_le ( s, bufsize ) ; cx = right - left + 1 ; cy = bottom - top + 1 ; logger ( Graphics, Debug, ""process_bitmap_updates(), <S2SV_blank> [%d,%d,%d], <S2SV_blank> [%d,%d], <S2SV_blank> bpp=%d, <S2SV_blank> compression=%d"", left, top, right, bottom, width, height, Bpp, compress ) ; if (! compress ) { int y ; bmpdata = ( uint8 * ) xmalloc ( width * height * Bpp ) ; for ( y = 0 ; y < height ; y ++ )",0
621,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
622,"<S2SV_ModStart> tx_size, vp9_coeff_stats coef_stats <S2SV_ModEnd> ) { vp9_coeff_probs_model <S2SV_ModStart> tx_size ] ; vpx_coeff_counts <S2SV_ModEnd> * coef_counts = <S2SV_ModStart> { vp9_tree_probs_from_distribution ( vp9_tree_probs <S2SV_ModEnd>, coef_branch_ct [",0
623,"<S2SV_ModStart> { } ; if (! access_ok ( VERIFY_WRITE, fd, ( const char * ) name, 0 ) ) return - EPERM <S2SV_ModEnd> ; r =",0
624,"<S2SV_ModStart> dvb_usb_adapter * d, struct dvb_usb_context * ctx <S2SV_ModStart> 0 } ; int ret = 0 ; <S2SV_ModStart>, 1, ctx <S2SV_ModEnd> ) < 0 <S2SV_ModStart> err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if (! d -> priv ) err ( ""failed <S2SV_blank> to <S2SV_blank> start <S2SV_blank> dvb_usb_generic_rw"" <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; ret = dvb_usb_generic_rw ( d -> dev, obuf, 3, ibuf, 1, ctx ) ; if ( ret <S2SV_ModEnd> < 0 ) <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; ret = dvb_usb_generic_rw ( d -> dev, obuf, 3, ibuf, 1, ctx ) ; if ( ret <S2SV_ModEnd> < 0 ) <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; ret = dvb_usb_generic_rw ( d -> dev, obuf, 3, ibuf, 1, ctx ) ; if ( ret <S2SV_ModEnd> < 0 ) <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; ret = dvb_usb_generic_rw",0
625,"<S2SV_ModStart> * iface, vpx_codec_enc_config_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps &",0
626,"<S2SV_ModStart> stride, int mv_row, int mv_col, int x, int y ) { const int which_mv = 0 ; const MV mv = { mv_row, mv_col } ; const InterpKernel * const kernel = <S2SV_ModEnd> xd -> mi <S2SV_ModStart> ] -> interp_filter <S2SV_ModEnd> ; enum mv_precision <S2SV_ModStart> MV_PRECISION_Q3 ; } vpx_build_inter_predictor <S2SV_ModEnd> ( y_mb_ptr, <S2SV_ModStart> y ) ; vpx_build_inter_predictor <S2SV_ModEnd> ( u_mb_ptr, <S2SV_ModStart>, uv_stride, mv, scale, uv_block_size, which_mv, kernel, mv_precision_uv, x, y ) ; vpx_build_inter_predictor <S2SV_ModEnd> ( v_mb_ptr, <S2SV_ModStart>, uv_stride, mv, scale, uv_block_size, which_mv, kernel, mv_precision_uv, x, y ) ; vpx_build_inter_predictor <S2SV_ModEnd> ( v_mb_ptr, <S2SV_ModStart>, uv_stride, mv, scale, uv_block_size, which_mv, kernel, mv_precision_uv, x, y ) ; vpx_build_inter",0
627,"<S2SV_ModStart> = TRUE ; if ( strlen ( origbuf ) + 1 > BUFSZ ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> too <S2SV_blank> long <S2SV_blank> \\""%s\\"""", origbuf ) ; return FALSE ; }",0
628,"<S2SV_ModStart> * numbers, size_t <S2SV_ModEnd> count ) { <S2SV_ModStart> ( ) ; if ( count < 0 ) return a ; <S2SV_ModStart> i ) { if (! ( <S2SV_ModStart> i ] ) ) ) return 0",0
629,"<S2SV_ModStart> data_end ) { const <S2SV_ModStart> pbi -> common <S2SV_ModEnd> ; const int <S2SV_ModStart> tile_cols ) ; const int num_workers = MIN ( pbi -> oxcf. max_threads, num_workers ) ; TileBuffer tile_buffers [ 1 << 6 ] ; int n ; int final_worker = - 1 ; assert ( tile_cols <= ( 1 << 6 ) ) ; assert ( tile_rows == 1 ) ; ( void ) tile_rows ; if ( pbi -> num_tile_workers == 0 ) { const int num_threads = pbi -> oxcf. max_threads & ~ 1 ; int i ; CHECK_MEM_ERROR ( cm, pbi -> tile_workers, vpx_malloc ( num_threads * sizeof ( * pbi -> tile_workers ) ) ) ; for ( i = 0 ; i < num_threads ; ++ i ) { VP9Worker * const worker = & pbi -> tile_workers [ i ] ; ++ pbi -> num_tile_workers ; vp9_worker_init ( worker ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData )",0
630,"<S2SV_ModStart> * 0x101 ; if ( order < 0 || order > 0xffff ) { printf ( ""Invalid <S2SV_blank> minolta <S2SV_blank> order <S2SV_blank> value <S2SV_blank> (%d)\\n"", order ) ; return ; }",0
631,"<S2SV_ModStart> -> common ; VP9EncoderConfig * rc_config = & cpi -> rc ; <S2SV_ModStart> = SEGMENT_DELTADATA ; seg -> num_seg = 0 ; <S2SV_ModStart> ++ ) { const int qindex_delta = 0, segment_rdmult ; <S2SV_ModStart> ( ) ; if ( cpi -> rc. is_src_frame_alt_ref ) { qindex_delta = vp9_compute_qdelta ( & rc_config, base_q, base_q * Q_RATIO ( i ) ) ; seg -> abs_delta = SEGMENT_DELTADATA ; } <S2SV_ModStart> ( i = ENERGY_MIN ; i <= ENERGY_MAX ; i ++ ) { const int <S2SV_ModEnd> qindex_delta, segment_rdmult <S2SV_ModStart> ; if ( rc_config -> num_seg_layers > 1 && <S2SV_ModStart> ) == 1 && rc_config -> num_seg_layers > 1 && rc_config -> num_seg_layers > 1 && rc_config -> num_seg_layers > 1 && <S2SV_ModEnd> Q_RATIO ( i <S2SV_ModStart> i ) ) { <S2SV_ModEnd> vp9_set_segdata ( seg <S2SV_ModStart> i ), SEG_LVL_ALT_REF",0
632,<S2SV_ModStart> -> error_code ) { <S2SV_ModStart> : NULL ; ctx -> base. err_detail_max = ctx -> base. err_detail ; },0
633,"<S2SV_ModStart>, * ps_cur_poc ; ps_dec -> u4_num_pic_params = 0 ; ps_dec -> u4_num_seq_params = 0",0
634,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet ),0
635,<S2SV_ModStart> <S2SV_null> <S2SV_null> static long <S2SV_ModEnd> getnum ( const <S2SV_ModStart> int getnum ( <S2SV_ModEnd> char * * <S2SV_ModStart> df ) { const char * p = * * fmt ; <S2SV_ModStart>! isdigit ( p <S2SV_ModEnd> ) ) return <S2SV_ModStart> = 0 ; if ( * * fmt == NULL ) return 0 ; <S2SV_ModStart> ( isdigit ( p <S2SV_ModEnd> ) ) ;,0
636,<S2SV_ModStart> GCSpropagate ) ; g -> gcstate = GCSdestroyed ;,0
637,<S2SV_ModStart> 0 ; else { kfree ( buf ) ; <S2SV_ModStart> - EIO ; },0
638,"<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } <S2SV_ModEnd> memset ( buffer <S2SV_ModStart> buffer ) ; <S2SV_ModEnd> s_write ( c",0
639,"<S2SV_ModStart> remote_connection_s * connection, int * socket_timeout <S2SV_ModStart> -> variant_opaque ; <S2SV_ModEnd> int rc = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> struct addrinfo * <S2SV_ModStart> = NULL ; * socket_timeout = - 1 ; <S2SV_ModStart> = NULL ; * socket_timeout = 0 ; <S2SV_ModStart> = SOCK_RAW ; * socket_timeout = - 1 ; <S2SV_ModStart> ) ) ; * socket_timeout = sock ; <S2SV_ModStart> ) ) ; * socket_timeout = sock ; <S2SV_ModStart> ) ) ; * socket_timeout = sock ; <S2SV_ModStart> ) ; } * socket_timeout = sock ;",0
640,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> ; cpi -> <S2SV_ModEnd> kf_bitrate_adjustment = 0",0
641,<S2SV_ModStart> ) ) ; if ( ndo -> ndo_vflag ) { ND_TCHECK ( bp [ 26 ] ) ; ND_TCHECK ( bp [ 26 ] ) ; },0
642,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command",0
643,"<S2SV_ModStart> Image * image, * tmp_image <S2SV_ModStart> length, padding <S2SV_ModEnd>, version, <S2SV_ModStart> ) break ; tmp_image = DestroyImageList ( image ) ; <S2SV_ModStart> ) break ; if ( tmp_image == NULL ) { image = DestroyImageList ( image ) ; return ( ( Image * ) NULL ) ; } <S2SV_ModStart> ) break ; if ( tmp_image == NULL ) { image = DestroyImageList ( image ) ; return ( ( Image * ) NULL ) ; }",0
644,"<S2SV_ModStart> ; if (! jas_stream_getrwcount ( enc -> out ) ) { jas_eprintf ( ""cannot <S2SV_blank> read <S2SV_blank> main <S2SV_blank> header\\n"" ) ; return - 1 ; } if (",0
645,<S2SV_ModStart> ; if (! chanmode_found ) { if ( <S2SV_ModStart> ) ; } },0
646,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> - m + vpx_read_bit <S2SV_ModEnd> ( r )",1
647,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
648,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> REFERENCE_MODE mode = vpx_read <S2SV_ModEnd> ( r,",0
649,"<S2SV_ModStart>! stream ) { <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; } <S2SV_ModStart> ; res = vpx_codec_enc_config_default_with_usage <S2SV_ModEnd> ( global -> <S2SV_ModStart> stereo_fmt = STEREO_FORMAT_MONO <S2SV_ModEnd> ; # if <S2SV_ModStart> # if CONFIG_WEBM_IO if ( stream -> config. write_webm ) { <S2SV_ModStart> - 1 ; } else { stream -> ebml. last_pts_ms = - 1 ; }",0
650,<S2SV_ModStart> ; if ( opp -> nd_opt_len < 4 ) goto trunc ; if (,0
651,<S2SV_ModStart> re_ast ) -> type_flags = 0 ; ( * re_ast ) ->,0
652,"<S2SV_ModStart> ) ) ; if (! iter -> var_expand_table ) { <S2SV_ModStart> 0 ) { auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found, <S2SV_blank> using <S2SV_blank> default <S2SV_blank> value <S2SV_blank> %s"", str_c ( path ), key -> key -> default_value ) ; key -> value = key -> key -> default_value ; } else { <S2SV_ModStart> error ) ; } }",0
653,<S2SV_ModStart> ; tok -> line_number = 0 ; tok ->,0
654,<S2SV_ModStart> maxBitrate ; } av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo = NULL ;,0
655,<S2SV_ModStart> dpbSize ) ; if ( picSizeInMbs < 32 || dpbSize < 4 ) { return ( MEMORY_ALLOCATION_ERROR ) ; },0
656,"<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> (! sock ||! addr <S2SV_ModStart> OE_EINVAL ) ; if ( addrlen ) { <S2SV_ModStart> * addrlen ; addrlen_out = * addrlen ; } <S2SV_ModStart>, addrlen_in, & addrlen_out <S2SV_ModEnd> )!= OE_OK <S2SV_ModStart> ) ; } if ( addrlen_out ) * addrlen = addrlen_out ;",0
657,,1
658,<S2SV_ModStart> FALSE ; } if (!,0
659,"<S2SV_ModStart> ipv6_pinfo * np <S2SV_ModEnd> ; struct ipv6_txoptions <S2SV_ModStart> ; if ( msg -> msg_name ) { np = inet6_sk ( sk ) ; opt = kmalloc ( sizeof ( * opt ), GFP_KERNEL ) ; if (! opt ) return - ENOMEM ; } if (",0
660,"<S2SV_ModStart> max = 0, opt_size <S2SV_ModStart>, hdr_size, opt_size ; uint32_t <S2SV_ModStart> ; if ( opt_size > sizeof ( struct pe_image_optional_hdr32 ) ) { cli_err ( ""cli_scanpe: <S2SV_blank> opt_size <S2SV_blank> > <S2SV_blank> %u\\n"", opt_size ) ; return CL_EINVAL ; } if ( <S2SV_ModStart> ; if ( opt_size > sizeof ( struct pe_image_optional_hdr32 ) ) { cli_err ( ""cli_scanpe: <S2SV_blank> opt_size <S2SV_blank> > <S2SV_blank> %u\\n"", opt_size ) ; return CL_EINVAL ; } if (",0
661,<S2SV_ModStart> address ) { uint16_t result = dm9000ReadReg ( DM9000_EPAR ) ; uint16_t epcr = dm9000ReadReg ( DM9000_EPCR ) ; uint16_t erre = dm9000ReadReg ( DM9000_EPCR ) & EPCR_ERRE ; if ( erre!= 0 ) { <S2SV_ModEnd> while ( ( <S2SV_ModStart> while ( ( erre & DM9000_ERRE )!= 0 ) { } <S2SV_ModEnd> usleep ( 5 <S2SV_ModStart> ; return ( result <S2SV_ModEnd> << 8 ) <S2SV_ModStart> 8 ) | result <S2SV_ModEnd> ; } <S2SV_null>,0
662,"<S2SV_ModStart> pcmk_ok ) { if (! cib_tls_signon ( cib, & ( private -> command ) ) ) { fprintf ( stderr, ""%s: <S2SV_blank> Connection <S2SV_blank> to <S2SV_blank> %s:%d <S2SV_blank> failed: <S2SV_blank> %s\\n"", name, private -> server, private -> port, pcmk_error_string ( pcmk_ok ) ) ; return - EINVAL ; } <S2SV_ModStart> pcmk_ok ) { if (! cib_tls_signon ( cib, & ( private -> callback ) ) ) { fprintf ( stderr, ""%s: <S2SV_blank> Connection <S2SV_blank> to <S2SV_blank> %s:%d <S2SV_blank> failed: <S2SV_blank> %s\\n"", name, private -> server, private -> port, pcmk_error_string ( pcmk_ok ) ) ; return - EINVAL ; } <S2SV_ModStart> ) ) ; }",0
663,"<S2SV_ModStart> ; msg. msg_namelen = sizeof ( address ) ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; err = sock_recvmsg ( sock, & msg, size, flags ) ; if ( err >= 0 && addr!= NULL ) { err2 = move_addr_to_user ( & address, msg. msg_namelen, addr, addr_len ) ; if ( err2 < 0 ) err = err2 ; } msg. <S2SV_ModStart> & address ; <S2SV_ModEnd> if ( sock <S2SV_ModStart> ( address ) <S2SV_ModEnd> ; err =",0
664,"<S2SV_ModStart> num00, tmp_err = 0 <S2SV_ModStart> bsize ] ; const int <S2SV_ModEnd> new_mv_mode_penalty = 256 <S2SV_ModStart> bsize ] ; const int sr = MIN ( cpi -> common. width, cpi -> common. height ) ; <S2SV_ModStart> int new_mv_mode_penalty = MIN ( cpi -> common. width, cpi -> common. height ) ; <S2SV_ModStart> = 256 ; if ( sr > MAX_FULL_PEL_VAL ) sr = MAX_FULL_PEL_VAL ; <S2SV_ModStart> bsize ) ; if ( v_fn_ptr. vf == VP9_NON_STANDARD_FUNC ) { tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX - new_mv_mode_penalty ) tmp_err += new_mv_mode_penalty ; if ( tmp_err",0
665,<S2SV_ModStart> ; if ( <S2SV_ModEnd> hivex_write ( h,0
666,<S2SV_ModStart> ; merged -> <S2SV_ModEnd> is_dir_config = (,0
667,"<S2SV_ModStart> one, offset <S2SV_ModEnd> ; ssize_t count <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( number_planes_filled <S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( number_planes_filled <S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( number_planes_filled <S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( number_planes_filled <S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( number_planes_filled <S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( number_planes_filled <S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( number_planes_filled <S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( number_planes_filled <S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( number_planes_filled <S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( number_planes_filled <S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( number_planes_filled <S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( number_planes_filled <S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( number_planes_filled <S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( number_planes_filled <S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( number_planes_filled <S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( number_planes",0
668,<S2SV_ModStart> ( r = <S2SV_ModEnd> sshbuf_put_string ( b,0
669,<S2SV_ModStart> ) ) { ovalue = sclone ( <S2SV_ModEnd> stok ( option <S2SV_ModStart> & ovalue ) ),0
670,<S2SV_ModStart> client = user_data ; gboolean shutdown_flag = FALSE <S2SV_ModStart> num_clients ) ; if ( client -> shutdown_flag ) { shutdown_flag = TRUE ; } <S2SV_ModStart> user ) ; if ( client -> shutdown_flag ) { shutdown_flag = FALSE ; },0
671,<S2SV_ModStart> * uv ; if ( thread -> twups!= NULL ) { <S2SV_ModStart> next ) { <S2SV_ModEnd> if (! <S2SV_ModStart> ; } } } },0
