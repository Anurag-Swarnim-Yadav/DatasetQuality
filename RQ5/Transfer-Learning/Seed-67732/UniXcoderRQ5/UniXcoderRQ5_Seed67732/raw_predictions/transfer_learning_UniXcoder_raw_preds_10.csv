,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
1,<S2SV_ModStart> ; if ( skb_tnl_header_len ( skb ) < tnl_hlen <S2SV_ModEnd> ) { if,0
2,<S2SV_ModStart> * writer = <S2SV_ModEnd> gf_list_get ( writers,0
3,"<S2SV_ModStart> item ) { return cJSON_GetArrayItem ( array, 0, item ) <S2SV_ModEnd> ; } <S2SV_null>",0
4,"<S2SV_ModStart> u64 nr, <S2SV_ModEnd> struct pt_regs * <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",1
5,,0
6,"<S2SV_ModStart> fdct16 ( const tran_low_t in [ 16 ], tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> ] ) { tran_low_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> 8 ] ; tran_low_t <S2SV_ModEnd> step2 [ 8 <S2SV_ModStart> 8 ] ; tran_low_t <S2SV_ModEnd> step3 [ 8 <S2SV_ModStart> 8 ] ; tran_low_t <S2SV_ModEnd> input [ 8 <S2SV_ModStart> ; { tran_low_t <S2SV_ModEnd> s0, s1 <S2SV_ModStart>, s7 ; tran_low_t <S2SV_ModEnd> t1, t2 <S2SV_ModStart>, t3 ; tran_low_t <S2SV_ModEnd> x0, x1 <S2SV_ModStart> + s2 ; tran_low_t <S2SV_ModEnd> x1, x2 <S2SV_ModStart> + s2 ; tran_low_t <S2SV_ModEnd> x2, x3",0
7,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> parse_ciff ( save,0
8,,0
9,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
10,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ++ i ) vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( usehp ) vpx_write <S2SV_ModEnd> ( w,",1
11,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } else { <S2SV_ModEnd> request -> rxBlockSzx <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; },0
12,"<S2SV_ModStart>, ""%04x, <S2SV_blank> "", EXTRACT_16BITS <S2SV_ModEnd> ( ptr ) <S2SV_ModStart>, ""%04x <S2SV_blank> "", EXTRACT_16BITS <S2SV_ModEnd> ( ptr ) <S2SV_ModStart> u_char * ) dat <S2SV_ModEnd> ) ) )",0
13,,0
14,<S2SV_ModStart> = create_spnego_ctx ( 0,0
15,<S2SV_ModStart> ; tm = localtime_safe <S2SV_ModEnd> ( & t,0
16,"<S2SV_ModStart> length ) ; memcpy <S2SV_ModEnd> ( hashed,",0
17,<S2SV_ModStart> e == p || e - p,0
18,"<S2SV_ModStart> ) &&! inode_capable <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! inode_capable <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! inode_capable <S2SV_ModEnd> ( inode,",0
19,<S2SV_ModStart> = 0 ; if (! <S2SV_ModStart> & timeout ) ) return false,0
20,<S2SV_ModStart> <S2SV_null> <S2SV_null> static void <S2SV_ModEnd> detect_transition_to_still ( struct <S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
21,<S2SV_ModStart> offset + size < <S2SV_ModEnd> i_size_read ( inode,0
22,"<S2SV_ModStart> alg ) { <S2SV_ModEnd> if (! <S2SV_ModStart> CRYPTO_ALG_NEED_FALLBACK ) ) request_module <S2SV_ModEnd> ( ""%s-all"",",0
23,<S2SV_ModStart> = GIT_PKT_NG ; ptr <S2SV_ModEnd> += 3 ; <S2SV_ModStart> ( ptr = ( char * ) <S2SV_ModStart> = '\\0' ; ptr <S2SV_ModEnd> = ptr + <S2SV_ModStart> = '\\0' ; ptr <S2SV_ModEnd> = ptr + <S2SV_ModStart> = '\\0' ; ptr <S2SV_ModEnd> = ptr +,0
24,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
25,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) return AVERROR_EOF ; if (,0
26,"<S2SV_ModStart> mntent, path, rootfs",1
27,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } io -> io_cleanup = mem_cleanup ;,1
28,<S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> pixel & ( ( <S2SV_ModStart> value + 0.5 ) ),0
29,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return ret?,0
30,<S2SV_ModStart> vpx_codec_enc_cfg_map_t * map ; ( void ) cfg,0
31,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
32,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
33,,0
34,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_EWRPTL <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRTS <S2SV_ModEnd> ) ; return",0
35,<S2SV_ModStart> ; value = ast2obj_int <S2SV_ModEnd> ( o -> <S2SV_ModStart> ; value = ast2obj_int <S2SV_ModEnd> ( o ->,0
36,"<S2SV_ModStart> page && ( file_access <S2SV_ModEnd> ( page, <S2SV_ModStart> page && ( file_access <S2SV_ModEnd> ( page, <S2SV_ModStart> ; if ( file_access <S2SV_ModEnd> ( page, <S2SV_ModStart> page && ( file_access <S2SV_ModEnd> ( page,",0
37,"<S2SV_ModStart> low_var_thresh, int mb_rows, int mb_cols, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> -> pp_limits_buffer ; <S2SV_ModEnd> for ( mbr",0
38,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache * ext4_mb_cache <S2SV_ModEnd>, struct buffer_head <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; error = mb2_cache_entry_insert ( ext4_mb_cache <S2SV_ModEnd>, bh -> <S2SV_ModStart> bh -> b_blocknr <S2SV_ModEnd> ) ; if <S2SV_ModStart> error ) { mb2_cache_entry_release ( ext4_mb_cache <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; mb2_cache_entry_release ( ext4_mb_cache <S2SV_ModEnd> ) ; }",0
39,<S2SV_ModStart> ) ) ; free ( uri ) ;,0
40,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> return ip_options_get_finish (,0
41,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
42,<S2SV_ModStart> ) ) { <S2SV_ModEnd> if (!,0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode",0
44,"<S2SV_ModStart> size_t size ; size_t res ; <S2SV_ModStart> = 0 ; res = jas_safe_size_mul ( & <S2SV_ModEnd> width, 0 <S2SV_ModStart> height, 0, & res ) ; if ( res < 0 ) { goto error ; } <S2SV_ModEnd> if (!",0
45,<S2SV_ModStart> || dp == ( unsigned char ),0
46,"<S2SV_ModStart>, size_t * acl_len <S2SV_ModEnd> ) { __be32 <S2SV_ModStart> { __be32 * <S2SV_ModEnd> bitmap [ 3 <S2SV_ModStart> int status ; <S2SV_ModEnd> if ( ( <S2SV_ModStart>!= 0 ) return - EOPNOTSUPP ; * acl_len = 0 ; * acl_len = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart>!= 0 ) return - EOPNOTSUPP <S2SV_ModEnd> ; if ( <S2SV_ModStart> u32 recvd ; <S2SV_ModEnd> recvd = req <S2SV_ModStart> attrlen ) ; <S2SV_ModEnd> } else status",0
47,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
48,"<S2SV_ModStart> { owner = ssplit <S2SV_ModEnd> ( auth, <S2SV_ModStart> } group = ssplit <S2SV_ModEnd> ( tok,",1
49,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( addr <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; <S2SV_ModEnd> if ( addr,0
50,"<S2SV_ModStart> int res ; res = read_fs_bytes ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES <S2SV_ModEnd> ( sBlk. <S2SV_ModStart> s. inodes <S2SV_ModEnd>, export_index_table )",0
51,<S2SV_ModStart> ; } else { <S2SV_ModStart> p1 ) ; },0
52,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> for ( argi <S2SV_ModStart> continue ; } <S2SV_ModEnd> } else if,0
53,<S2SV_ModStart> } if (! c -> opt ) return 1 ; if (,0
54,"<S2SV_ModStart> ; if ( memcmp <S2SV_ModEnd> ( cmac,",0
55,"<S2SV_ModStart> cpi ) { <S2SV_ModEnd> const uint64_t bits_left <S2SV_ModStart> 0 ) ; cpi -> twopass. bits_left -= bits_used ; cpi -> twopass. gf_group_bits -= bits_used ; cpi -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; <S2SV_ModStart> -= bits_used ; cpi -> twopass. gf_group_bits <S2SV_ModEnd> = MAX ( <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> cpi -> twopass",0
56,"<S2SV_ModStart> define EOFOp 0x07 const <S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) return ( DestroyImageExtent ( image ) ) ;",0
57,<S2SV_ModStart> err_free_buf ; } <S2SV_ModEnd> dev_dbg ( &,0
58,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
59,"<S2SV_ModStart> * dir = ""/etc"" <S2SV_ModEnd> ; if ( <S2SV_ModStart> & tmpname, ""/etc"" <S2SV_ModEnd> ) ) ==",0
60,<S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; },0
61,,0
62,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,<S2SV_ModStart> ) get_block = ocfs2_get_block_nolock <S2SV_ModEnd> ; else get_block <S2SV_ModStart> else get_block = ocfs2_dio_get_block_nolock <S2SV_ModEnd> ; return __blockdev_direct_IO,0
65,"<S2SV_ModStart> ( f, ""%79s <S2SV_blank> %[^\\n]"" <S2SV_ModEnd>, def,",0
66,"<S2SV_ModStart> n ) { return fstring_compile_expr <S2SV_ModEnd> ( expr_start, <S2SV_ModStart> expr_end - expr_start, c, n <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
67,<S2SV_ModStart> string ) { const,0
68,<S2SV_ModStart> size ) ; if ( px -> ft ) { <S2SV_ModStart> = px ; },0
69,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> ) ) ; <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> ) ) ; <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> ) ) ; <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> ) ) ; <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> ) ) ; <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> ) ) ; <S2SV_ModEnd> ND_PRINT ( (",0
70,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
71,<S2SV_ModStart> const buffers [ 3 <S2SV_ModEnd> ] = { <S2SV_ModStart> src -> v_buffer <S2SV_ModEnd> } ; const <S2SV_ModStart> int strides [ 3 <S2SV_ModEnd> ] = { <S2SV_ModStart> src -> uv_stride <S2SV_ModEnd> } ; for,0
72,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; for (,1
73,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
74,<S2SV_ModStart> _ipmi_destroy_user ( user ) ; kref_put ( & user -> release_barrier,0
75,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> sl = strlen,1
76,,0
77,<S2SV_ModStart> = NULL ; dst_state -> frame [ i ] = NULL ; <S2SV_ModStart> = NULL ; dst_state -> frame [ i ] = NULL ;,0
78,"<S2SV_ModStart> write_mb_modes_kf ( const VP9_COMMON * const cm <S2SV_ModEnd>, MODE_INFO * <S2SV_ModStart> * mi_8x8, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> = mi_8x8 [ 0 <S2SV_ModEnd> ] ; const <S2SV_ModStart> ; write_skip ( cm <S2SV_ModEnd>, mbmi -> <S2SV_ModStart> ) write_selected_tx_size ( cm <S2SV_ModEnd>, mbmi ->",0
79,"<S2SV_ModStart> maxn ) { <S2SV_ModEnd> # ifdef DEBUG <S2SV_ModStart> ; # endif if ( n > maxn ) SWF_error ( ""Action <S2SV_blank> overflow!!"" ) ;",0
80,<S2SV_ModStart> prep ) ) return ( - 1 ) ; <S2SV_ModEnd> n = EXTRACT_32BITS,0
81,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
82,"<S2SV_ModStart> * pTable, const",0
83,,0
84,<S2SV_ModStart> < q ) { <S2SV_ModStart> ) ; } },0
85,<S2SV_ModStart> bfqq -> bfqd <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> long flags ; <S2SV_ModEnd> if ( bfqq <S2SV_ModStart> return ; } <S2SV_ModEnd> bfq_bfqq_expire ( bfqq,0
86,,1
87,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
88,<S2SV_ModStart> + x > ( int ) <S2SV_ModStart> + y > ( int ),0
89,"<S2SV_ModStart>, np -> ipv6_opt <S2SV_ModEnd>, np ->",0
90,,0
91,<S2SV_ModStart> data ) { ( void ) data ;,0
92,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
93,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
94,<S2SV_ModStart> mv. as_int <S2SV_ModEnd> ; if (,0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
97,<S2SV_ModStart> msicap ; pci_populate_msicap <S2SV_ModEnd> ( & msicap,0
98,<S2SV_ModStart> return REDIS_OK ; <S2SV_ModEnd> } return REDIS_OK,0
99,<S2SV_ModStart> ; if ( <S2SV_ModEnd> cfg -> g_lag_in_frames <S2SV_ModStart> cfg -> g_pass == VPX_RC_ONE_PASS <S2SV_ModEnd> ) ERROR (,0
100,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> vp9_init_plane_quantizers ( cpi,0
101,<S2SV_ModStart> info -> si_code > 0 ) { <S2SV_ModEnd> return - EPERM <S2SV_ModStart> - EPERM ; },0
102,<S2SV_ModStart> ( u32 ) ( <S2SV_ModStart> size - 8 ),0
103,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
104,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> -> state == fmode <S2SV_ModEnd> ) return ; <S2SV_ModStart> -> state = fmode <S2SV_ModEnd> ; } <S2SV_null>",0
105,,0
106,<S2SV_ModStart> 0 ; } memcpy <S2SV_ModEnd> ( elem.,0
107,<S2SV_ModStart> ( unsigned ) JPC_QCX_GETMANT <S2SV_ModEnd> ( qcd ->,0
108,<S2SV_ModStart> == 8 ) && c -> format!= CHUNKY,1
109,"<S2SV_ModStart>, length - <S2SV_ModEnd> 1, caplen",0
110,"<S2SV_ModStart> * name = fit_get_name <S2SV_ModEnd> ( fit,",0
111,<S2SV_ModStart> ; if (! state ) return - ENOMEM ; if (,0
112,"<S2SV_ModStart> * iface, vpx_codec_dec_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> ; res = VPX_CODEC_OK <S2SV_ModEnd> ; if (",0
113,<S2SV_ModStart> ; value |= TJA1100_CONFIG1_MII_MODE_RMII_25 <S2SV_ModEnd> ; tja1100WritePhyReg (,0
114,<S2SV_ModStart> ; if ( icmp_param. <S2SV_ModEnd> error ) goto,0
115,<S2SV_ModStart> & VPX_CODEC_CAP_XMA ) && <S2SV_ModEnd> ( iface -> <S2SV_ModStart> flags & VPX_CODEC_CAP_XMA <S2SV_ModEnd> ) ) res,0
116,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
117,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; LRESERVE_SPACE",0
118,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ) ; return 0 <S2SV_ModStart> break ; } return error <S2SV_ModEnd> ; } <S2SV_null>,1
119,,0
120,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
121,<S2SV_ModStart> goto trunc ; ND_TCHECK <S2SV_ModEnd> ( lshp -> <S2SV_ModStart> ls_type ) ; ND_TCHECK <S2SV_ModEnd> ( lshp ->,0
122,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { ret = - EIO ; break ; } <S2SV_ModEnd> * obuf =",0
123,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
124,<S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ) <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ),1
125,"<S2SV_ModStart> * costs, vpx_tree <S2SV_ModEnd> tree, const <S2SV_ModStart> tree, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> ) { const vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> ) ; const vpx_tree_index <S2SV_ModEnd> ii = tree",1
126,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
127,"<S2SV_ModStart> c, 0, true",0
128,,0
129,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> return flags &,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
131,,0
132,<S2SV_ModStart> ; if ( server. current_client == NULL ) break ; if (,0
133,<S2SV_ModStart> get_blocks_flags = EXT4_GET_BLOCKS_CREATE <S2SV_ModEnd> ; blks =,0
134,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( oe_syscall_getaddrinfo_read_ocall <S2SV_ModStart>, handle, & p -> ai_flags, & p -> ai_family, & p -> ai_socktype, p -> ai_protocol, <S2SV_ModEnd> p -> ai_protocol <S2SV_ModStart> p -> ai_protocol <S2SV_ModEnd>, p -> <S2SV_ModStart> } if ( <S2SV_ModEnd>! ( p <S2SV_ModStart> p -> ai_addrlen <S2SV_ModEnd> ) { ret",0
135,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
136,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
137,"<S2SV_ModStart> __u16 size, const <S2SV_ModStart> { int ret ; memset ( data, 0, size )",0
138,"<S2SV_ModStart> * body, const",0
139,"<S2SV_ModStart> * src, <S2SV_ModEnd> unsigned int flags <S2SV_ModStart> >> 4 ; <S2SV_ModEnd> if ( ctx <S2SV_ModStart> write_idx ) ; memcpy <S2SV_ModEnd> ( src, <S2SV_ModStart> } else { memcpy <S2SV_ModEnd> ( src, <S2SV_ModStart> img ) ; <S2SV_ModEnd> buf -> ts_start",0
140,<S2SV_ModStart>. sharpness ; lf -> sharpness_level = cm -> oxcf. sharpness ;,0
141,"<S2SV_ModStart> NULL ) ; android_errorWriteLog ( 0x534e4554, ""534e4554"" ) ;",0
142,"<S2SV_ModStart> = getnum ( L,",1
143,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
144,<S2SV_ModStart> (! data <S2SV_ModEnd> ) ) res,0
145,"<S2SV_ModStart> inode * inode, struct super_block * sb ) { <S2SV_ModEnd> struct isofs_sb_info *",0
146,"<S2SV_ModStart> STROKING ) { send ( <S2SV_ModEnd> "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", c <S2SV_ModStart> } else { send ( <S2SV_ModEnd> "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", c <S2SV_ModStart> ) ; } send ( ) ;",0
147,<S2SV_ModStart> self ) { if ( self ),0
148,<S2SV_ModStart> && i < ( int ),0
149,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr",0
150,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
151,<S2SV_ModStart> & flags ) <S2SV_ModEnd> err = verify_compat_iovec <S2SV_ModStart> VERIFY_WRITE ) ; <S2SV_ModEnd> else err =,0
152,<S2SV_ModStart> ) ; struct buffer_head * dibh = mp -> mp_bh [ 0 ] ; struct <S2SV_ModStart> end_of_metadata = height <S2SV_ModEnd> ; int eob,0
153,<S2SV_ModStart> -> codec -> codec_interface <S2SV_ModEnd> ( ) ),0
154,,0
155,"<S2SV_ModStart> { if ( safe_copy <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> 0 ) { safe_copy <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> ) ; } safe_copy <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ) ; } safe_copy <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ) ; } safe_copy <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ) ; } safe_copy <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ) ; } safe_copy <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ) ; } safe_copy <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ) ; } safe_copy <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ) ; } safe_copy <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ) ; } safe_copy <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ) ; } safe_copy <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ) ; } safe_copy <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ) ; } safe_copy",0
156,<S2SV_ModStart> msix_tab_size ) { <S2SV_ModEnd> bzero ( msixcap,1
157,"<S2SV_ModStart>! js_regexec ( J,",0
158,<S2SV_ModStart> case OFreshOID : <S2SV_ModEnd> sp -- ;,0
159,"<S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; ksz8851WriteReg <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; isr <S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( isr & ISR_LCIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ier &= ~ IER_LCIE <S2SV_ModEnd> ; interface -> <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_TXIS <S2SV_ModEnd> ) ; n <S2SV_ModStart> ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, ier )",0
160,"<S2SV_ModStart> void encode_quantization ( const VP9_COMMON * const <S2SV_ModEnd> cm, struct <S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
161,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> ]. fd ),0
162,<S2SV_ModStart> ) ) { <S2SV_ModEnd> goto sslerr ;,0
163,"<S2SV_ModStart> ( ) ; strncpy <S2SV_ModEnd> ( t1_buf_array, <S2SV_ModStart> t1_buf_array, t1_line_array, sizeof ( t1_buf_array )",0
164,,0
165,"<S2SV_ModStart> key_ref ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) { ret = - ENOKEY ; goto error2 ; }",1
166,<S2SV_ModStart> -> u4_first_slice_in_pic = 1 <S2SV_ModEnd> ; ps_dec ->,0
167,<S2SV_ModStart> ( dst_reg -> var_off <S2SV_ModEnd> ) ; switch,0
168,<S2SV_ModStart> (! fileHandle <S2SV_ModEnd> ) { cFYI,0
169,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> ) ) ; rcu_read_unlock ( ) ;,0
170,"<S2SV_ModStart> svc_ctx ) { SvcInternal_t <S2SV_ModEnd> number_of_frames, number_of_keyframes <S2SV_ModStart> double y_scale ; SvcInternal_t <S2SV_ModEnd> * const si <S2SV_ModStart> svc_ctx ) ; <S2SV_ModEnd> svc_log ( svc_ctx <S2SV_ModStart> ""\\n"" ) ; <S2SV_ModEnd> if ( svc_ctx <S2SV_ModStart> i ) { <S2SV_ModEnd> if ( svc_ctx",0
171,<S2SV_ModStart> = new_cols ; <S2SV_ModEnd> if ( new_cols,0
172,"<S2SV_ModStart> * literal_start = str [ end ] <S2SV_ModEnd> ; const char <S2SV_ModStart> const char * literal_start = * str ; const char * literal_end = 0 ; for ( ; * str <S2SV_ModEnd> < end ; <S2SV_ModStart> < end ; ( * str ) ++ ) { char ch = * str ; if (! in_named_escape && ch == '{' && ( * str ) - literal_start >= 2 && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; result = 1 ; goto done ; } if ( ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * str + 1 ; * str += 2 ; result = 1 ; goto done ; } if ( ch == '}' ) { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; return - 1 ; } } else if ( ch == '}' ) { if ( recurse_lvl == 0 ) { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; return - 1 ; } } else if ( ch == '}' )",0
173,"<S2SV_ModStart> ( ) ; dump_dir_from_problem_data <S2SV_ModEnd> ( pd,",0
174,"<S2SV_ModStart> ) ) { rfbScaledScreenUpdateRect <S2SV_ModEnd> ( ptr,",0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
176,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if",1
177,,0
178,"<S2SV_ModStart> ), & _dh <S2SV_ModEnd> ) ; BUG_ON",1
179,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int ip_options_get_finish (,0
180,<S2SV_ModStart> connection == NULL || connection == NULL,0
181,<S2SV_ModStart> * findalldevs_if ; <S2SV_ModEnd> if ( rpcapd_discard <S2SV_ModStart> 0 ; } for ( d = alldevs ; d!= NULL ; d = d -> next ) { <S2SV_ModEnd> if ( d <S2SV_ModStart> next ) { <S2SV_ModEnd> if ( d <S2SV_ModStart> -> description ) { <S2SV_ModStart> name ) ; } <S2SV_ModStart> : # endif <S2SV_ModEnd> break ; default,0
182,"<S2SV_ModStart>, client_uid, DEFAULT_DUMP_DIR_MODE <S2SV_ModEnd> ) ; if",0
183,<S2SV_ModStart> -> columns - 3 <S2SV_ModEnd> ) ; x,0
184,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
185,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
186,"<S2SV_ModStart> ( vec, 2 <S2SV_ModEnd> ) ) ND_PRINT",0
187,"<S2SV_ModStart>! ptrace_has_cap ( task <S2SV_ModEnd> -> user_ns,",0
188,<S2SV_ModStart>  maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t,0
189,"<S2SV_ModStart> = 1 ; ihevcd_parse_user_data_registered_itu_t_t <S2SV_ModEnd> ( ps_codec,",0
190,<S2SV_ModStart> ) ) { ret = - ENOMEM ;,0
191,"<S2SV_ModStart> * name, my_off_t <S2SV_ModEnd> rep_quick ) {",0
192,<S2SV_ModStart> } pairs = palloc0 <S2SV_ModEnd> ( pcount *,0
193,"<S2SV_ModStart> val ) ; if (! <S2SV_ModStart>, val ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> command"", r -> name )",0
194,<S2SV_ModStart> hend ) ; <S2SV_ModEnd> hend = '\\0',0
195,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16",0
196,"<S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( tmpfile_name,",0
197,"<S2SV_ModStart> '\\0' ) ; <S2SV_ModEnd> temp_filename = osi_calloc <S2SV_ModStart> ; if (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } char * temp_filename = osi_calloc ( strlen ( filename ) + 5 ) ; if (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } for ( const list_node_t * enode = list_begin ( section -> entries ) ; enode = list_next ( enode ) ; fprintf ( fp, ""%s <S2SV_blank> = <S2SV_blank> %s\\n"", entry -> key, entry -> value ) ; } if ( list",0
198,"<S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ;",0
199,"<S2SV_ModStart> target, NULL ) ; xmlFree ( buf",0
200,"<S2SV_ModStart> ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModEnd> ""%s"" ""\\r\\n"",",0
201,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> ( src, <S2SV_ModEnd> dest, getuid <S2SV_ModStart> getgid ( ) <S2SV_ModEnd> ) < 0 <S2SV_ModStart> ""chown"" ) ; <S2SV_ModEnd> unlink ( src",0
202,<S2SV_ModStart>!= BFA_STATUS_OK ) { kfree ( fcstats ) ; <S2SV_ModStart> return NULL ; },1
203,<S2SV_ModStart> -> x = <S2SV_ModEnd> MaxF ( 0.0f <S2SV_ModStart> -> y = <S2SV_ModEnd> MaxF ( 0.0f <S2SV_ModStart> -> y = <S2SV_ModEnd> MaxF ( 0.0f <S2SV_ModStart> -> z = <S2SV_ModEnd> MaxF ( 0.0f,0
204,<S2SV_ModStart> ; rec -> sasl_username <S2SV_ModEnd> = src -> <S2SV_ModStart> ; rec -> sasl_password <S2SV_ModEnd> = src ->,0
205,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
206,"<S2SV_ModStart> o, datao ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteCanonEntry ) )",0
207,,0
208,<S2SV_ModStart> olen ) { <S2SV_ModEnd> unsigned char in <S2SV_ModStart> long hex ; <S2SV_ModEnd> while ( -- <S2SV_ModStart> hex ) ; return <S2SV_ModEnd> Curl_convert_from_network ( handle <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
209,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
210,<S2SV_ModStart> ; def -> <S2SV_ModEnd> session_setup = usm_session_init,0
211,"<S2SV_ModStart>! match ( sub,",0
212,<S2SV_ModStart> idx ] ; <S2SV_ModEnd> return SNMP_ERR_NOERROR ;,0
213,<S2SV_ModStart> ) ; } <S2SV_ModEnd> return ( packets,0
214,"<S2SV_ModStart> timer ) ; list_for_each_entry ( slave, tmp, & timeri -> slave_list_head, open_list ) { spin_lock_irq ( & slave_active_lock ) ; list_move_tail ( & timer -> open_list, & snd_timer_slave_list ) ; slave -> master = NULL ; spin_unlock_irq ( & slave_active_lock ) ; } <S2SV_ModStart> open_list ) { <S2SV_ModEnd> spin_unlock_irq ( & <S2SV_ModStart> slave_active_lock ) ; <S2SV_ModEnd> mutex_unlock ( &",0
215,<S2SV_ModStart> -> u4_bitoffset = ih264d_read_mmco_commands <S2SV_ModEnd> ( ps_dec ),0
216,<S2SV_ModStart> = gifFilePtr -> ImageCount <S2SV_ModEnd> ; int_fast32_t heightOverflow <S2SV_ModStart> = gifFilePtr -> ImageCount <S2SV_ModEnd> * gifFilePtr -> <S2SV_ModStart> = gifFilePtr -> ImageCount <S2SV_ModEnd> ; if (,0
217,<S2SV_ModStart> NULL ) ||! conn -> validator -> passwd. buf ||,0
218,<S2SV_ModStart> bus ] ; if ( bi == NULL ) return <S2SV_ModEnd> ; si =,0
219,"<S2SV_ModStart>, timeo ) <S2SV_ModEnd> ; if (",1
220,<S2SV_ModStart> ; isspace ( ( unsigned char ) <S2SV_ModStart>! isspace ( ( unsigned char ),1
221,"<S2SV_ModStart> ; result = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL, NULL,",0
222,"<S2SV_ModStart> msixcap msixcap ; <S2SV_ModEnd> tab_size = msgnum <S2SV_ModStart> dev, msgnum <S2SV_ModEnd> ) ; pci_populate_msixcap",0
223,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",1
224,<S2SV_ModStart> == NULL ) { ASN1_INTEGER_free ( is -> serial ) ; <S2SV_ModStart> goto cleanup ; },0
225,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> TX_MODE select_tx_mode ( <S2SV_ModStart> tx_mode ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
226,<S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1,0
227,<S2SV_ModStart> buf1 -> size > <S2SV_ModEnd> buf2 -> size,0
228,"<S2SV_ModStart> ) + size ; memset ( info, 0, sizeof ( * info ) )",0
229,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,1
230,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
231,<S2SV_ModStart> ; r = sd_event_add_io <S2SV_ModEnd> ( b ->,0
232,<S2SV_ModStart> ( ) ; errors += test_string_formatting ( ) ;,0
233,<S2SV_ModStart> -> lun ) scsi_eh_defer_cmd <S2SV_ModEnd> ( cmd ),0
234,"<S2SV_ModStart>, end_col_offset ; int ret ; <S2SV_ModStart> end_col_offset ) ; ret = AsyncFunctionDef ( name, args, body, decorator_seq, returns,LINENO ( n0 ), n0 -> n_col_offset, end_col_offset, c -> c_arena ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>",0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { break ; }",0
237,,1
238,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
239,"<S2SV_ModStart> : if ( <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> headend < psf -> headend ) { psf_fseek ( psf, position, whence ) ; return ; } <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> : if ( <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> headindex < <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> headend <S2SV_ModEnd> ) { psf <S2SV_ModStart> ; if ( <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> headindex < <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> headend <S2SV_ModEnd> ) { psf <S2SV_ModStart> psf -> headindex = <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> headend <S2SV_ModEnd> ; break ;",0
240,<S2SV_ModStart> ; return ( IHEVCD_SUCCESS <S2SV_ModEnd> ) ; },0
241,<S2SV_ModStart> ; } } if ( line -> type == MD_LINE_FENCEDCODE ) { <S2SV_ModStart> ) ; } },0
242,<S2SV_ModStart> perf_event_context * ctx <S2SV_ModEnd> ; if ( <S2SV_ModStart> = PERF_EVENT_STATE_OFF ; perf_event_disable ( event ) ;,0
243,<S2SV_ModStart> -> post_proc_flag = <S2SV_ModEnd> ctx -> postproc_cfg <S2SV_ModStart>. noise_level ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
244,<S2SV_ModStart> = 0 ; ND_TCHECK <S2SV_ModEnd> ( * tptr <S2SV_ModStart> = 0 ; ND_TCHECK <S2SV_ModEnd> ( * tptr,0
245,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vpx_usec_timer_start ( & <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,1
246,"<S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" <S2SV_ModEnd> ) ; exit",0
247,<S2SV_ModStart> ptr_hbe_txposer -> k_start <S2SV_ModEnd> ; ptr_hbe_txposer ->,0
248,<S2SV_ModStart> prov_spec = parsed_require_line <S2SV_ModEnd> ; spec =,0
249,<S2SV_ModStart> image_info ) ; <S2SV_ModEnd> return ( (,0
250,<S2SV_ModStart> (! proto_end ||! url,0
251,"<S2SV_ModStart> fdt ) ; struct fdt_name * name ; <S2SV_ModStart> = nextoffset ; name = fdt_get_name ( fdt, offset, & len ) ; if (! name ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart>, & len <S2SV_ModEnd> ) ; if",0
252,<S2SV_ModStart> ( server. shutdown_asap <S2SV_ModEnd> ) closeTimedoutClients (,0
253,<S2SV_ModStart> channel ) ; <S2SV_ModEnd> set_description ( client,1
254,<S2SV_ModStart> book -> dim && i < n,1
255,<S2SV_ModStart> action ) { ( void ) action ;,0
256,<S2SV_ModStart> this_h ) ) return ; <S2SV_ModEnd> sf -> x_scale_fp,0
257,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX,0
258,<S2SV_ModStart> ; msg. msg_namelen = 0 ; msg.,0
259,<S2SV_ModStart> unregister_pernet_subsys ( & sctp_net_ops <S2SV_ModEnd> ) ; sctp_v6_protosw_exit <S2SV_ModStart> ( ) ; sctp_v4_protosw_exit <S2SV_ModEnd> ( ) ;,0
260,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void show_psnr (,0
261,<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen (,1
262,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
263,"<S2SV_ModStart> skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
264,"<S2SV_ModStart>, IMAGE_SIZE_INVAL ) || fit == image_type",0
265,"<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> uinput_fd, UI_DEV_DESTROY )",1
266,<S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> = rc -> avg_frame_bandwidth <S2SV_ModEnd> ; # endif,1
267,<S2SV_ModStart> ) if ( strcmp <S2SV_ModEnd> ( argv [,0
268,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
269,<S2SV_ModStart> ib ] ; <S2SV_ModEnd> dequant_ptr = d,1
270,"<S2SV_ModStart> FN_REFLEN ] ; strncpy <S2SV_ModEnd> ( buff,",0
271,<S2SV_ModStart> int n = <S2SV_ModEnd> data_end - data <S2SV_ModStart> data_end - data <S2SV_ModEnd> ; pbi ->,0
272,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
273,"<S2SV_ModStart> int * returnintra, int zero_mv_sse, int zero_mv_sse <S2SV_ModStart> = INT_MAX, zero_mv_sse, best_sse, <S2SV_ModEnd> best_rd_sse = INT_MAX <S2SV_ModStart>, best_rd_sse = zero_mv_sse <S2SV_ModEnd> ; # endif",0
274,<S2SV_ModStart> -> size = TEMP_FAILURE_RETRY ( <S2SV_ModStart> statbuf. st_size ),0
275,"<S2SV_ModStart> ; UWORD8 u1_profile_idc = 0 ; UWORD8 <S2SV_ModEnd> u1_level_idc, u1_seq_parameter_set_id",0
276,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vp_svc_parameters_t * ) calloc ( 1, sizeof ( vpx_svc_parameters_t ) ) ; if ( params == NULL ) return VPX_CODEC_INVALID_PARAM <S2SV_ModStart> return VPX_CODEC_INVALID_PARAM ; <S2SV_ModEnd> cpi -> lst_fb_idx <S2SV_ModStart> params -> lst_fb_idx <S2SV_ModEnd> ; if (",0
277,"<S2SV_ModStart> { uint16 bitspersample = 0, samplesperpixel = 0 <S2SV_ModEnd> ; uint16 input_compression",0
278,"<S2SV_ModStart> a ) { char * pn ; char c ; int r ; struct stat st ; pn = a -> name ; r = lstat ( a -> name, & st ) ; if ( r!= 0 ) { if ( errno == ENOENT ) { break ; } else { return ( ARCHIVE_FAILED ) ; } } else if ( S_ISLNK ( st. st_mode ) ) { if ( unlink ( a -> name ) ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } a -> pst = NULL ; if (! S_ISLNK ( a -> mode ) ) { if ( unlink ( a -> mode ) ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; if (! S_ISLNK ( a -> mode ) ) { archive_set_error ( & a -> archive, 0, """,0
279,,0
280,"<S2SV_ModStart> get_uv_tx_size ( mbmi, 0",0
281,<S2SV_ModStart> mq_ops ) { <S2SV_ModEnd> flush_rq -> tag,0
282,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
283,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
284,<S2SV_ModStart> NULL || * replySize > <S2SV_ModEnd> ( int ),0
285,,0
286,<S2SV_ModStart> 0x02 ) ; memcpy <S2SV_ModEnd> ( sbuf +,0
287,,0
288,<S2SV_ModStart> ; } } return 0 ;,0
289,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
290,<S2SV_ModStart> -> corrupted ; memcpy <S2SV_ModEnd> ( pbi ->,0
291,<S2SV_ModStart> ) ; } quantum_info = ( QuantumInfo * ) NULL ;,0
292,"<S2SV_ModStart> len ) { return decode_unicode_escape ( c, n, s, len <S2SV_ModEnd>, NULL, <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
293,<S2SV_ModStart> struct stat stb <S2SV_ModEnd> ; BUF *,0
294,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
295,"<S2SV_ModStart> ; if ( vp8_yv12_alloc_frame_buffer ( & oci -> temp_scale_frame, width, height, VP8BORDERINPIXELS ) < 0 ) goto allocation_fail ; if (",0
296,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
297,<S2SV_ModStart> 0 ; } else { <S2SV_ModStart> 0 ; } },0
298,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> vterm_allocator_free ( screen,1
299,"<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & delay )",1
300,"<S2SV_ModStart>, one, offset = 0, offset = 0 <S2SV_ModEnd> ; ssize_t count",0
301,<S2SV_ModStart> value ) { <S2SV_ModEnd> httpSetRouteName ( state,0
302,"<S2SV_ModStart>. cmp = key_cmp ( type, type ) <S2SV_ModEnd>,. match_data",0
303,<S2SV_ModStart> ||! job_id ) { if ( job_id <S2SV_ModStart> ntime ) { free ( job_id ) ; if ( coinbase1 ) free ( coinbase1 ) ; if ( coinbase2 ) free ( coinbase2 ) ; goto out ; },0
304,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
305,<S2SV_ModStart> * res ; if ( self == NULL ) { return NULL ; },0
306,"<S2SV_ModStart> ) & desc, sizeof ( * desc )",1
307,"<S2SV_ModStart> perf_event * ) <S2SV_ModEnd> ; switch ( <S2SV_ModStart> ) ; case PERF_EVENT_IOC_PERIOD : return perf_event_period ( event, ( u64 __user * ) arg ) ; case <S2SV_ModStart> perf_event_period ( event <S2SV_ModEnd> ) ; case <S2SV_ModStart> ret ; } <S2SV_ModEnd> default : return",0
308,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> * r, PREDICTION_MODE <S2SV_ModEnd> y_mode ) { <S2SV_ModStart> ) { const PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode",0
309,<S2SV_ModStart> ; block_size = SHA256_BLOCK_SIZE ; block_size =,0
310,<S2SV_ModStart> iv ) ; rb_object_unref ( self ) ;,0
311,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
312,<S2SV_ModStart> ; if ( nghttp2_is_fatal ( rv ) ) { return rv ; } if (,0
313,"<S2SV_ModStart> { pr_cont ( ""Core <S2SV_blank> events, <S2SV_blank> "" <S2SV_ModEnd> ) ; break",0
314,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ] ; const vpx_extra_bit <S2SV_ModEnd> * const b <S2SV_ModStart> b = & vpx_extra_bits <S2SV_ModEnd> [ t ]",0
315,<S2SV_ModStart> struct vp9_write_bit_buffer wb <S2SV_ModEnd> ; struct vp9_write_bit_buffer <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> += uncompressed_hdr_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb,0
316,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
317,<S2SV_ModStart> struct ikev2_id id = { 0 },0
318,<S2SV_ModStart> -> data = jas_strdup <S2SV_ModEnd> ( cmpt ->,0
319,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
320,,0
321,"<S2SV_ModStart> mntent -> mnt_dir, NULL",1
322,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
323,"<S2SV_ModStart>, req_server_name ( req ) ) ; rb_hash_aset ( env,",0
324,"<S2SV_ModStart> endif int col_type = 0, prepare_retval = 0 <S2SV_ModEnd> ; MYSQL_BIND * <S2SV_ModStart>, prepare_retval ; <S2SV_ModEnd> D_imp_xxh ( sth",0
325,"<S2SV_ModStart> need = 0, need2 <S2SV_ModStart> screen, { need2 <S2SV_ModEnd> *= 4 ; <S2SV_ModStart> *= 4 ; need2 *= 4 ; } ) ; if ( need2 <S2SV_ModEnd> < 0 )",0
326,"<S2SV_ModStart> val ) ) strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> < 0 ) strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> ) ; else strncpy <S2SV_ModEnd> ( str,",0
327,<S2SV_ModStart> ( unlikely ( crng_init <S2SV_ModEnd> == 0 ),0
328,"<S2SV_ModStart> LEX_ID ) { strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> len ) ; strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> LEX_STR ) { strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> len ) ; strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> len ) ; strncpy <S2SV_ModEnd> ( str,",0
329,,1
330,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
331,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
332,"<S2SV_ModStart>, s2, ( int )",0
333,"<S2SV_ModStart> { parse_global_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL, <S2SV_ModStart> ; parse_service_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL, <S2SV_ModStart> { parse_global_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL, <S2SV_ModStart> ; parse_service_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL,",0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,<S2SV_ModStart> } else { <S2SV_ModEnd> if (!,0
336,<S2SV_ModStart> u4_num_bytes_consumed ; } else { ps_dec -> u4_num_bytes_consumed = 0 ; },0
337,<S2SV_ModStart> <S2SV_null> <S2SV_null> static const,0
338,"<S2SV_ModStart>. encode ( NULL <S2SV_ModEnd>, img, <S2SV_ModStart>. encode ( NULL <S2SV_ModEnd>, img,",0
339,<S2SV_ModStart> ) ; } <S2SV_ModEnd> when 10 : <S2SV_ModStart> ) ; } <S2SV_ModEnd> when 10 :,0
340,<S2SV_ModStart> ( i = 0 ; i < rows <S2SV_ModEnd> ; i ++,0
341,,0
342,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
343,<S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; },0
344,<S2SV_ModStart> ) ) { if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { psf -> rwf_endian = SF_TRUE ; break ; },0
345,<S2SV_ModStart> ) break ; if ( sun_info. type == RT_ENCODED ) break ;,0
346,"<S2SV_ModStart> 0 ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 0600 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; return",1
347,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> BLOCK_8X8 : return vpx_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> BLOCK_16X8 : return vpx_mse16x8 <S2SV_ModEnd> ; case BLOCK_8X16 <S2SV_ModStart> BLOCK_8X16 : return vpx_mse8x16 <S2SV_ModEnd> ; default : <S2SV_ModStart> default : return vpx_mse16x16 <S2SV_ModEnd> ; } },1
348,,0
349,<S2SV_ModStart> (! vb ||! vb -> vb. vb2_buf,0
350,<S2SV_ModStart> size ) { ASSERT_NO_SIZE_OVERFLOW ( size ) ;,1
351,<S2SV_ModStart> && rxent -> <S2SV_ModEnd> dport == sport,0
352,<S2SV_ModStart> = bss_desc ; <S2SV_ModEnd> mwifiex_dbg ( adapter,0
353,<S2SV_ModStart> ( error ) { kmem_free ( sbuf ) ; <S2SV_ModStart> return error ; },1
354,<S2SV_ModStart> struct l2cap_conf_rfc rfc <S2SV_ModEnd> ; void * <S2SV_ModStart> sk ) ; rfc. mode = L2CAP_MODE_BASIC ; <S2SV_ModStart> = L2CAP_MODE_ERTM ; rfc. txwin_size = L2CAP_DEFAULT_RX_WINDOW ; rfc. max_transmit = L2CAP_DEFAULT_MAX_RECEIVE ; rfc. retrans_timeout = L2CAP_DEFAULT_RETRANS_TO ; rfc. monitor_timeout = L2CAP_DEFAULT_MONITOR_TO ; <S2SV_ModStart> = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO <S2SV_ModEnd> ) ; rfc <S2SV_ModStart> = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU <S2SV_ModEnd> ) ; l2cap_add_conf_opt,0
355,"<S2SV_ModStart> do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> r, MSG_WAITALL )",1
356,<S2SV_ModStart> ps_dec -> u1_pic_decode_done == 1 && ( ps_dec -> u1_pic_decode_done == 1 ),0
357,<S2SV_ModStart> while ( pair && pair,0
358,"<S2SV_ModStart> * delegation, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> -> type & fmode <S2SV_ModEnd> )!= open_flags <S2SV_ModStart> -> stateid, fmode <S2SV_ModEnd> ) ; ret <S2SV_ModStart>, NULL, fmode <S2SV_ModEnd> ) ; ret",0
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,,0
361,<S2SV_ModStart> } if ( pmd_trans_huge <S2SV_ModEnd> ( pmd ),0
362,<S2SV_ModStart> { if ( ptr == NULL ) return ( PAM_BUF_ERR ) ; if (,0
363,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> ) { return vpx_read_tree <S2SV_ModEnd> ( r,",1
364,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",1
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,<S2SV_ModStart> depth ++ ; if ( buf >= maxbuf ) return ( NULL ) ;,0
367,"<S2SV_ModStart> ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n < ( length + 8 ) ) { return ERROR_FAILURE ; } n = ksz8851ReadReg ( interface, <S2SV_ModStart> ( interface, KSZ8851_RXQCR, RXQCR_SDA <S2SV_ModEnd> ) ; header <S2SV_ModStart> ( interface, KSZ8851_RXQCR, RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_TXQCR, TXQCR_METFE <S2SV_ModEnd> ) ; n",0
368,<S2SV_ModStart> ( ) ; mono_console_handle_async_ops ( ) ;,0
369,,0
370,<S2SV_ModStart> ( unlikely ( pmd_trans_huge_safe <S2SV_ModEnd> ( * pmd,0
371,"<S2SV_ModStart>, target_width, * <S2SV_ModStart> ] ) ; * <S2SV_ModStart> ] ) ; * <S2SV_ModStart> ] ) ; * <S2SV_ModStart> fin ) ; * <S2SV_ModStart> fout ) ; *",0
372,"<S2SV_ModStart> i, result <S2SV_ModEnd> ; PyObject *",1
373,<S2SV_ModStart> vpx_codec_alg_priv * priv <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> VPX_CODEC_MEM_ERROR ; } <S2SV_ModEnd> for ( i <S2SV_ModStart> ++ ) ; <S2SV_ModEnd> priv -> cx_data_sz,0
374,<S2SV_ModStart> ++ ; } <S2SV_ModEnd> pixel -> freq,0
375,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx ->,0
376,<S2SV_ModStart> goto out ; if (! UDF_I ( inode ) -> i_ino ) goto out ;,0
377,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0",1
378,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int bad_format_imginfo (,0
379,,0
380,<S2SV_ModStart> = object_length ; new_object. data = NULL ;,0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,<S2SV_ModStart> p_pic ) ; p_frame = NULL ;,0
384,"<S2SV_ModStart> mf, fname, mf",0
385,<S2SV_ModStart> 4 ) ; size_t <S2SV_ModEnd> num_properties = GETINT32,0
386,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
387,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
388,<S2SV_ModStart> i + j <S2SV_ModEnd> < frag -> <S2SV_ModStart> i + j <S2SV_ModEnd> ; j ++,0
389,,0
390,,0
391,,0
392,<S2SV_ModStart> ret = 0 ; ti -> xtregs_user = NULL,0
393,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
394,<S2SV_ModStart> se_device * remote_dev <S2SV_ModEnd> = xop -> <S2SV_ModStart> = xop -> src_dev <S2SV_ModEnd> ; pr_debug (,0
395,<S2SV_ModStart> ( header ) <S2SV_ModEnd> new_bh = ext2_xattr_cache_find <S2SV_ModStart> new_bh ) ; <S2SV_ModEnd> } else { <S2SV_ModStart> new_bh ) ; <S2SV_ModEnd> ext2_xattr_cache_insert ( new_bh <S2SV_ModStart> new_bh ) ; <S2SV_ModEnd> ext2_xattr_cache_insert ( new_bh,0
396,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
397,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
398,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
399,<S2SV_ModStart> ) AcquireQuantumMemory ( ( unsigned char * ),0
400,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vp_ref_frame_t * ) ; ( void ) args",0
401,,0
402,"<S2SV_ModStart>, u4_y_offset ; <S2SV_ModEnd> UWORD8 * pu1_out_p <S2SV_ModStart> ) ; else { <S2SV_ModStart> ps_dec ) ; }",0
403,<S2SV_ModStart> VP9_LAST_FLAG ) { <S2SV_ModEnd> YV12_BUFFER_CONFIG * const,0
404,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
405,,0
406,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 8 ) ; <S2SV_ModEnd> src += src_stride",1
407,<S2SV_ModStart> { rowstoread = ( row + img -> row_offset ) % rowsperstrip ; nrow = ( row + img -> row_offset ) % rowsperstrip <S2SV_ModEnd> ; nrow = <S2SV_ModStart> img -> row_offset <S2SV_ModEnd> ; if (,0
408,<S2SV_ModStart> ; } } <S2SV_ModEnd> return 0 ;,0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
410,<S2SV_ModStart> num & ( 1U <S2SV_ModEnd> << ( number,0
411,"<S2SV_ModStart> ( img, plane <S2SV_ModEnd> ) ; const <S2SV_ModStart> { if ( vpx_img_plane_width <S2SV_ModEnd> ( img, <S2SV_ModStart> ( buf, plane <S2SV_ModEnd>, w,",0
412,"<S2SV_ModStart> ; uint16_t attr_len = <S2SV_ModEnd> sizeof ( struct <S2SV_ModStart> struct l2tp_avp_t ) ; uint16_t <S2SV_ModEnd> bytes_left ; uint16_t <S2SV_ModStart> 1 ; } if ( avp -> length < sizeof ( struct l2tp_avp_t ) + 2 ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", avp -> length, avp -> length ) ; return - 1 ; } attr_len = avp -> length <S2SV_ModEnd> ; MD5_Init (",0
413,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> case EVP_CTRL_AEAD_SET_IVLEN :,0
414,"<S2SV_ModStart> header. size <S2SV_ModEnd>, 0 )",1
415,"<S2SV_ModStart> sock, sk ) ; memset ( sa, 0, sizeof ( * sa )",1
416,"<S2SV_ModStart> MT_CPTYPE_PASSSALT ) { strncpy <S2SV_ModEnd> ( pass_salt,",0
417,<S2SV_ModStart> MUTT_ABORT ) { mutt_socket_empty ( adata -> conn ) ; <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } },0
418,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
419,<S2SV_ModStart> return ; } temp = temp ;,0
420,"<S2SV_ModStart>, & rlen, 0",1
421,<S2SV_ModStart> * slavename ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> } # endif read_userfile ( ) ;,0
422,"<S2SV_ModStart> ; if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart> { if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name,",0
423,<S2SV_ModStart> ( buf ) <S2SV_ModEnd> && str [,0
424,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
425,<S2SV_ModStart> credssp ) ; ( void ) instance ;,0
426,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteEntry ) ) ;",0
427,<S2SV_ModStart> bd_addr ) { ( void ) bd_addr ;,0
428,<S2SV_ModStart> int i ; uint64 <S2SV_ModEnd> avail ; int <S2SV_ModStart> ; avail = ( uint64 ) <S2SV_ModStart> || nxip > ( uint64 ) <S2SV_ModStart> || expect > ( uint64 ),0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
430,<S2SV_ModStart> epoll_t * epoll <S2SV_ModEnd> ; oe_errno = <S2SV_ModStart> ; if ( oe_syscall_write_ocall <S2SV_ModEnd> ( & ret <S2SV_ModStart> OE_EINVAL ) ; epoll = _epoll ( epoll_ ) ;,0
431,"<S2SV_ModStart> parse_global_option ( CMD_INITIALIZE, new_global_options. option",0
432,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_NOTES_MAX : * ( size_t * ) val = ms -> elf_notes_max ; return 0 ;,1
433,<S2SV_ModStart> offset ) { <S2SV_ModEnd> if ( offset,0
434,<S2SV_ModStart> + 1 ) ; if (! trak ) goto exit,0
435,"<S2SV_ModStart> 17 ] ; <S2SV_ModEnd> md5_state_t state ; <S2SV_ModStart> = 0 ; strncpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> = '\\0' ; strncpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> ) md5data, sizeof ( md5data ) <S2SV_ModEnd> ) ; md5_finish",0
436,<S2SV_ModStart> ; if ( <S2SV_ModEnd> Prefix!= NULL,1
437,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
438,<S2SV_ModStart> ( ) ; g_hash_table_remove_all ( headers ) ;,0
439,"<S2SV_ModStart> -> y_buffer ; memcpy <S2SV_ModEnd> ( dst, <S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst,",0
440,,0
441,"<S2SV_ModStart> ; int hexdump = 0 <S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ;",0
442,"<S2SV_ModStart> mbmi, const MV <S2SV_ModEnd>  mvs [ <S2SV_ModStart> ) { const MV <S2SV_ModEnd> diff = {",0
443,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ),",0
444,"<S2SV_ModStart> 0, size <S2SV_ModEnd>, GFP_ATOMIC )",0
445,<S2SV_ModStart> ; netsnmp_mibindex_load ( ) ; SNMP_FREE ( env_var,0
446,"<S2SV_ModStart> ++ ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> ], O_RDWR ) <S2SV_ModStart> 1 ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_KEY ) ) <S2SV_ModStart> EV_REL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_SYN ) ) <S2SV_ModStart> x ++ ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> ]. mapped_id )",0
447,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
448,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s,",0
449,"<S2SV_ModStart> iakerb_ctx_id_t * pctx, iakerb_error_code code <S2SV_ModStart> = 0 ; <S2SV_ModEnd> * pctx =",0
450,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> bitmapDC = CreateCompatibleDC",1
451,<S2SV_ModStart> START_CODE_LEN ) ; <S2SV_ModEnd> u4_start_code = impeg2d_bit_stream_nxt,0
452,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { ret = <S2SV_ModEnd> - EINVAL ; <S2SV_ModStart> - EINVAL ; goto out ; }",1
453,,0
454,<S2SV_ModStart> ) ] ; size_t <S2SV_ModEnd> tmp ; if,0
455,,0
456,<S2SV_ModStart> decContainer_t * ) H264SwDecAlloc <S2SV_ModEnd> ( sizeof (,0
457,<S2SV_ModStart> drop ; } <S2SV_ModEnd> opt -> optlen,0
458,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
459,<S2SV_ModStart> goto errout ; if ( info -> groupbook >= ci -> books ) goto errout ;,0
460,"<S2SV_ModStart> krb5_key_data * key_data ; memset ( key_data, 0, sizeof ( * key_data ) )",0
461,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
462,<S2SV_ModStart> -> zInput = sqlite3_calloc <S2SV_ModEnd> ( nByte +,0
463,<S2SV_ModStart> filp ) { struct sock * sock = SOCKET_I ( inode ) ; <S2SV_ModStart> ( SOCKET_I ( sock <S2SV_ModEnd> ) ) ;,0
464,"<S2SV_ModStart> * orelse, string type_comment, int <S2SV_ModEnd> lineno, int <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. type_comment = type_comment",1
465,"<S2SV_ModStart> * info, my_bool <S2SV_ModEnd> * name )",0
466,,0
467,"<S2SV_ModStart> UINT error ; Stream_Read_UINT32 <S2SV_ModEnd> ( s, <S2SV_ModStart>, eventId ) ; Stream_Read_UINT32 <S2SV_ModEnd> ( s,",0
468,,0
469,"<S2SV_ModStart> struct flowi6 fl6 ; IP6_ECN_flow_xmit ( sk, fl6. flowlabel ) <S2SV_ModStart> daddr ) ; IP6_ECN_flow_xmit ( sk, fl6. flowlabel ) ; <S2SV_ModStart>, skb, <S2SV_ModEnd> & fl6, <S2SV_ModStart> np -> opt <S2SV_ModEnd> ) ; }",0
470,<S2SV_ModStart> ; END_OF_READING : DestroyQuantumInfo ( quantum_info ) ;,0
471,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nego_process_negotiation_failure ( rdpNego <S2SV_ModStart> UINT32 failureCode ; BOOL result ; <S2SV_ModStart> TAG, ""RDP_NEG_FAILURE"" ) ; result = Stream_Read_UINT8 ( s, flags ) ; Stream_Read_UINT32 ( s, length <S2SV_ModStart> = NEGO_STATE_FAIL ; return result ;",0
472,,0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
475,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void fix_interp_filter (,0
476,"<S2SV_ModStart> & cpi -> td. <S2SV_ModStart> mi_cols ) ; vpx_setup_src_planes <S2SV_ModEnd> ( x, <S2SV_ModStart>, cpi -> td. <S2SV_ModStart> = DC_PRED ; vpx_memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> MAX_MB_PLANE ) ; vpx_memset <S2SV_ModEnd> ( xd ->",0
477,"<S2SV_ModStart> htc_request_check_host_hdr ( hp, htc",0
478,"<S2SV_ModStart> define EOFOp 0x07 const <S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) return ( DestroyImageExtent ( image ) ) ;",0
479,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> sizeof ( tETH_HDR ),1
480,<S2SV_ModStart> ps_dec -> u1_pic_order_cnt_bottom <S2SV_ModEnd> ; ps_dec ->,0
481,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> * karg ; <S2SV_ModEnd> int iocnum ; <S2SV_ModStart> ( karg ) <S2SV_ModEnd> ; } if",0
482,<S2SV_ModStart> ) AcquireQuantumMemory ( ( unsigned char * ),0
483,"<S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv",0
484,"<S2SV_ModStart> ; if (! datao ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> order = EXIF_BYTE_ORDER_INTEL ; datao += exif_get_long ( buf + datao, EXIF_BYTE_ORDER_INTEL ) ; if (! datao ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> order = EXIF_BYTE_ORDER_INTEL ; datao += exif_get_long ( buf + datao, EXIF_BYTE_ORDER_INTEL ) ; if (! datao ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } c = exif_get_short ( buf + datao, EXIF_BYTE_ORDER_INTEL ) ; datao += 2 ; exif_mnote_data_fuji_clear (",0
485,"<S2SV_ModStart> charbuf ), ""%s"",",0
486,<S2SV_ModStart> void ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> 1 ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> [ LOCK_SECTIONS ] ) <S2SV_ModStart> 0 ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart> opt -> ctx ) <S2SV_ModStart> servname ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> [ LOCK_SECTIONS ] ),0
487,<S2SV_ModStart> void ) { recovery_started = false ;,0
488,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ;",0
489,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
490,,0
491,,0
492,<S2SV_ModStart> sk ) ; if ( writable && <S2SV_ModEnd> unix_peer ( other <S2SV_ModStart> ( other ) <S2SV_ModEnd> ) writable = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> sock_put ( other,0
493,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; sendClean ( outputbuffer ) ;",1
494,<S2SV_ModStart> ( OM_uint32 ) KRB5_BAD_MSIZE <S2SV_ModEnd> ; return GSS_S_DEFECTIVE_TOKEN,0
495,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> ( args, vpx_ref_frame_t <S2SV_ModEnd> * ) ;",0
496,<S2SV_ModStart> plug ) ; <S2SV_ModEnd> put_ioctx ( ctx,0
497,"<S2SV_ModStart> * name, myf <S2SV_ModEnd> rep_quick ) {",0
498,"<S2SV_ModStart> s } ; <S2SV_ModEnd> uECC_word_t carry ; <S2SV_ModStart> ; EccPoint_mult ( k2 <S2SV_ModEnd>, curve -> <S2SV_ModStart>! carry ] <S2SV_ModEnd>, curve )",0
499,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
500,<S2SV_ModStart> ; } else if ( pool -> free_total < pool -> free_total ) <S2SV_ModStart> ; } } else { free ( buf ) ; },0
501,,0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
503,"<S2SV_ModStart> ( pixc = pixFewColorsOctcubeQuantmixed <S2SV_ModEnd> ( pixs,",0
504,<S2SV_ModStart>. vf = vpx_mse16x16 <S2SV_ModEnd> ; xd ->,1
505,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> overhead = 16 <S2SV_ModStart> + 1 ; size_t <S2SV_ModEnd> size = overhead,1
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nego_process_negotiation_response ( rdpNego <S2SV_ModStart> NEGO_STATE_FAIL ; return FALSE <S2SV_ModStart> = NEGO_STATE_FINAL ; return TRUE ;,1
507,"<S2SV_ModStart> ; int i <S2SV_ModEnd> ; const double <S2SV_ModStart> do { const vpx_rc_bits_per_mb <S2SV_ModEnd> ( cm -> <S2SV_ModStart> i, correction_factor, cm -> rate_correction_factor <S2SV_ModStart> active_worst_quality ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
508,<S2SV_ModStart> ; value |= TJA1101_CONFIG1_MII_MODE_RMII_25 <S2SV_ModEnd> ; tja1101WritePhyReg (,0
509,<S2SV_ModStart> n ) && i < NCH ( n ) &&,0
510,"<S2SV_ModStart> int dst_stride, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart>, left_col, PREDICTION_MODE <S2SV_ModEnd> ) ; DECLARE_ALIGNED_ARRAY <S2SV_ModStart> + y ; memset <S2SV_ModEnd> ( left_col, <S2SV_ModStart>, 129, PREDICTION_MODE <S2SV_ModEnd> ) ; if",0
511,<S2SV_ModStart> ++ ; } <S2SV_ModEnd> } if (,0
512,<S2SV_ModStart> ; ei -> <S2SV_ModEnd> i_sync_tid = 0,0
513,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
514,<S2SV_ModStart> ) ; } free ( parsetime_error ) ;,0
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { q = osStrchr <S2SV_ModEnd> ( p +,1
516,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
517,<S2SV_ModStart> KEY_FRAME ) { memcpy <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd ->,1
518,"<S2SV_ModStart> error_t error ; <S2SV_ModEnd> uint32_t status ; <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModEnd> ) { enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModEnd> ) { enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL, ENC624J600_ERXTAIL_BUFFER_STOP <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL, ENC624J600_ERXTAIL_BUFFER_STOP <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL, ENC624J600_ERXTAIL_BUFFER_STOP <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL, ENC624J600_ERXTAIL_BUFFER_STOP <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_",0
519,"<S2SV_ModStart> VALUE read_memory ( <S2SV_ModEnd> VALUE content ) <S2SV_ModStart> xmlSchemaParserCtxtPtr ctx = xmlSchemaNewMemParserCtxt <S2SV_ModEnd> ( ( const <S2SV_ModStart> char * ) StringValue <S2SV_ModEnd> ( content ) <S2SV_ModStart> ( content ), RSTRING_LEN ( content )",0
520,,0
521,<S2SV_ModStart> ; out += 3 <S2SV_ModEnd> ; } state <S2SV_ModStart> ; out += 3 <S2SV_ModEnd> ; } state,1
522,<S2SV_ModStart> err = - <S2SV_ModEnd> EALREADY ; if,0
523,<S2SV_ModStart> -> nmi ) <S2SV_ModEnd> irq_work_queue ( & <S2SV_ModStart> pending ) ; <S2SV_ModEnd> else perf_event_wakeup (,0
524,,0
525,"<S2SV_ModStart> { print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" <S2SV_ModEnd> ) ; if",0
526,"<S2SV_ModStart> ( interface, KSZ8851_RXFHSR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_RXFHBCR ) & RXFHBCR_RXBC_MASK <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( interface, KSZ8851_RXQCR, RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851ReadFifo <S2SV_ModStart> ( interface, KSZ8851_RXQCR, RXQCR_SDA <S2SV_ModEnd> ) ; ancillary <S2SV_ModStart> ( interface, KSZ8851_RXQCR, RXQCR_RRXEF <S2SV_ModEnd> ) ; return",0
527,"<S2SV_ModStart> * n, string type_comment, <S2SV_ModStart> is_async ) { type_comment = NULL ; <S2SV_ModStart>, LINENO ( type_comment <S2SV_ModEnd> ), n",0
528,"<S2SV_ModStart> ( mm, 0xA0000 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; out : <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
529,<S2SV_ModStart> -> token_ptr ) { <S2SV_ModStart> - 1 ; },0
530,<S2SV_ModStart> bt_remote_bdaddr ) ; <S2SV_ModEnd> } return 0,0
531,<S2SV_ModStart> 0 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif <S2SV_ModStart> col < width && row < width,0
532,<S2SV_ModStart> len < needed || len > UINT32_MAX,0
533,"<S2SV_ModStart> ""MemoryAllocationFailed"" ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;",0
534,<S2SV_ModStart> bfqq ) bfq_idle_slice_timer_body <S2SV_ModEnd> ( bfqq ),0
535,<S2SV_ModStart> ; length += PRIMARY_DRAWING_ORDER_FIELD_BYTES <S2SV_ModEnd> [ orderInfo ->,0
536,"<S2SV_ModStart> ovl_dentry_is_dir ( old, new_type <S2SV_ModStart> ovl_dentry_is_dir ( old, new_type",0
537,"<S2SV_ModStart> int plane ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
538,"<S2SV_ModStart> * cpi, TileData * tile_data, <S2SV_ModStart> ( cpi, tile_data <S2SV_ModEnd>, mi_row, <S2SV_ModStart> ( cpi, tile_data <S2SV_ModEnd>, mi_row, <S2SV_ModStart>, x, tile_data <S2SV_ModEnd>, mi_col,",0
539,<S2SV_ModStart> * err = safe_ superblockRead <S2SV_ModEnd> ( & reader,0
540,<S2SV_ModStart> -> ranges = safeMalloc <S2SV_ModEnd> ( sizeof (,0
541,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flags & VP8_EFLAG_NO_UPD_GF <S2SV_ModStart> flags & VP8_EFLAG_FORCE_GF <S2SV_ModEnd> ) { ctx,0
542,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;",0
543,<S2SV_ModStart>! head ) <S2SV_ModEnd> return - EINVAL <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
544,"<S2SV_ModStart> * pptr, u_int <S2SV_ModEnd> len ) {",0
545,"<S2SV_ModStart> ""False"" ) ; res -> outputbuffer = NULL ;",0
546,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
547,"<S2SV_ModStart>, constr2, ""%s"", <S2SV_ModStart>, constr2, ""%s"",",0
548,,0
549,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",0
550,<S2SV_ModStart> ; distortion = vpx_variance16x16 <S2SV_ModEnd> ( * (,1
551,"<S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd>, ECON2_ETHEN | <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_ERXST <S2SV_ModEnd>, ENC624J600_ERXST )",0
552,<S2SV_ModStart> * start ; <S2SV_ModEnd> start = ( <S2SV_ModStart> ) + maxlen <S2SV_ModEnd> ; va_start ( <S2SV_ModStart> = 0 ; <S2SV_ModEnd> return ; },0
553,<S2SV_ModStart> ( ctx -> priv <S2SV_ModEnd> -> alg_priv ) <S2SV_ModStart> ( ctx -> priv <S2SV_ModEnd> -> alg_priv ),0
554,,0
555,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
556,<S2SV_ModStart> ( inuse / 10 <S2SV_ModEnd> ) + 2,0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,<S2SV_ModStart> * s = _PyUnicode_AsString <S2SV_ModEnd> ( CHILD (,0
559,<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> break ; } <S2SV_ModEnd> if ( strcmp <S2SV_ModStart> break ; } <S2SV_ModEnd> if ( strcmp <S2SV_ModStart> break ; } <S2SV_ModEnd> if ( strcmp <S2SV_ModStart> break ; } <S2SV_ModEnd> if ( strcmp <S2SV_ModStart> ) break ; <S2SV_ModEnd> } else if,0
560,"<S2SV_ModStart>  mvs, ""\\n"" ) ; mb_index = 0 ; fprintf ( mvs, ""Mbs <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame",0
561,<S2SV_ModStart> self ) { size_t <S2SV_ModEnd> i ; PyObject,1
562,,1
563,"<S2SV_ModStart> ( dbh, mysql_error ( imp_dbh -> pmysql ),",0
564,<S2SV_ModStart> ) || ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) == 0 ) <S2SV_ModStart> slot_lock ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> slot -> id ),0
565,<S2SV_ModStart> struct ieee_802_11_phdr phdr = { },0
566,<S2SV_ModStart> ; sh = s_calloc0 <S2SV_ModEnd> ( hdrlen +,0
567,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> ; UINT32 tempWidth ; if (! data ) return FALSE <S2SV_ModStart> -> ColorLossLevel ; if (! scanline ) return FALSE ; <S2SV_ModStart> context -> width ; if (! scanline ) return FALSE,0
568,<S2SV_ModStart> > nr_parens ) { ret = - EINVAL ; goto out_free ; } <S2SV_ModEnd> * ( ++,1
569,,0
570,"<S2SV_ModStart> TX_MODE read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r )",1
571,"<S2SV_ModStart> : # line 100 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> } # line 100 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 100 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 100 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 100 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 100 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy",0
572,,0
573,<S2SV_ModStart> -> pSrc ; if ( pSrc == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; },0
574,"<S2SV_ModStart> & nfs4_callback_program, NFS4_CALLBACK_BUFSIZE <S2SV_ModEnd>, sv_ops )",0
575,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
576,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
577,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
578,"<S2SV_ModStart> do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> s, 0 )",1
579,<S2SV_ModStart> ( xIter = crm_element_attr <S2SV_ModEnd> ( xml ) <S2SV_ModStart> ( xml ) <S2SV_ModEnd> ; xIter = <S2SV_ModStart> ; } } <S2SV_ModEnd> while ( cIter,0
580,<S2SV_ModStart> <S2SV_null> static const SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> return ( const SvcInternal_t <S2SV_ModEnd> * ) svc_ctx,1
581,<S2SV_ModStart> tmp ) ; <S2SV_ModEnd> zend_hash_update ( params,0
582,<S2SV_ModStart> char buffer [ 80 <S2SV_ModEnd> ] ; int <S2SV_ModStart> = 12 ; _y4m -> vpx_fmt = VPX_IMG_FMT_I420 ; _y4m -> vpx_bps = 12 ;,0
583,"<S2SV_ModStart> * otmp = safe_read <S2SV_ModEnd> ( buf,",0
584,"<S2SV_ModStart> long long directory_table_end = 0, table_start = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart>, table_start ; if ( read_xattrs_from_disk ( fd, & sBlk. s, no_xattrs, & table_start ) == 0 ) return FALSE ; if ( read_uids_guids ( & table_start ) == FALSE ) return FALSE ; if ( parse_exports_table ( & table_start ) == FALSE ) return FALSE ; if ( read_fragment_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( no_xattrs ) sBlk.",0
585,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> root ) ; <S2SV_ModEnd> if ( rule <S2SV_ModStart> ; } } <S2SV_ModEnd> return env ;,0
586,<S2SV_ModStart> -> seg ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
587,,0
588,"<S2SV_ModStart> | O_TRUNC, O_WRONLY | O_CREAT | O_TRUNC | <S2SV_ModStart> return ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 16 ) )",0
589,<S2SV_ModStart> ; } # else ( void ) cpi ; #,1
590,,0
591,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lower, & tmp ) < 0 ) { return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_upper, & tmp ) < 0 ) { return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_step, & tmp ) < 0 ) { return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_dims, & tmp ) < 0 ) { return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_dims, & tmp ) < 0 ) { return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_dims, & tmp ) < 0 ) { return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_dims, & tmp ) < 0 ) { return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_dims, & tmp ) < 0 ) { return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>",0
592,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
593,"<S2SV_ModStart> int err ; list_for_each_entry ( iter, & alink -> dscp_map, list ) { u32 cmask ; if ( iter -> band!= knode -> handle ) { match = iter ; continue ; } cmask = be32_to_cpu ( knode -> sel -> classid ) ; <S2SV_ModStart> goto err_delete ; } <S2SV_ModStart>! match ) { list_add ( & match -> list, & alink -> dscp_map ) ; } <S2SV_ModEnd> } match ->",0
594,<S2SV_ModStart> ) ; } <S2SV_ModEnd> stream -> config <S2SV_ModStart> ; stream -> <S2SV_ModEnd> cx_time = 0,0
595,"<S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( tmpfile_name,",0
596,<S2SV_ModStart> data_end ) { vpx_reader <S2SV_ModEnd> r ; assert <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> aligned_cols ) ; memset <S2SV_ModEnd> ( cm ->,0
597,<S2SV_ModStart> vp9_decoder_create ( const VP9EncoderConfig <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> ) ) ; const VP9EncoderConfig <S2SV_ModEnd> * const cm <S2SV_ModStart> cm = pbi <S2SV_ModEnd> ; if ( <S2SV_ModStart> = 1 ; vpx_init_dec <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ) ) ; vpx_init_dequantizer <S2SV_ModEnd> ( cm ),0
598,"<S2SV_ModStart> GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" <S2SV_ModEnd> ) ) ;",0
599,<S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> || opt -> opt. <S2SV_ModStart> || opt -> opt.,0
600,"<S2SV_ModStart> tokens, const vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> do { const vpx_tree_index <S2SV_ModEnd> j = tree",1
601,<S2SV_ModStart> ( img ) { <S2SV_ModStart> img ) ; },0
602,"<S2SV_ModStart>, & len, 0",1
603,,0
604,"<S2SV_ModStart> rc, const VP9EncoderConfig <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> ) rc -> avg_frame_bandwidth <S2SV_ModEnd> * ( int64_t",1
605,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
606,,0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
608,,0
609,<S2SV_ModStart> c ) || ( <S2SV_ModStart> c ) || ( <S2SV_ModStart> c ) || ( <S2SV_ModStart> c ) || ( <S2SV_ModStart> c ) || ( <S2SV_ModStart> c ) || ( <S2SV_ModStart> c ) || ( <S2SV_ModStart> c ) || ( <S2SV_ModStart> c >= 128 ),0
610,"<S2SV_ModStart>, packet -> http_headers. ptr = NULL, packet -> http_headers. ptr = NULL, packet ->",0
611,"<S2SV_ModStart>, y, MagickFalse, <S2SV_ModStart> dds_info, 8, MagickFalse",0
612,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL ) <S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL )",1
613,<S2SV_ModStart> action ) { ( void ) w ; ( void ) h ; ( void ) action ;,0
614,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; sendClean ( outputbuffer ) ;",1
615,"<S2SV_ModStart> ( AUTODETECT_TAG, ""received <S2SV_blank> bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" <S2SV_ModEnd> ) ; Stream_Read_UINT32",0
616,<S2SV_ModStart> # if ( <S2SV_ModEnd> CONFIG_ONTHEFLY_BITPACKING if (,0
617,<S2SV_ModStart> # if CONFIG_MULTITHREAD <S2SV_ModEnd> vp8_decoder_remove_threads ( pbi,1
618,<S2SV_ModStart> { if ( ( <S2SV_ModStart> xWantedSize > 0 ) && ( xWantedSize < xWantedSize ),0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,<S2SV_ModStart> s ) { uint32 <S2SV_ModEnd> num_updates ; uint16 <S2SV_ModStart> int i ; <S2SV_ModEnd> for ( i,0
621,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
622,"<S2SV_ModStart> TX_SIZE tx_size, vpx_coeff_probs_model <S2SV_ModEnd> * coef_branch_ct ) <S2SV_ModStart> tx_size ] ; vpx_coeff_count <S2SV_ModEnd> * coef_counts =",0
623,<S2SV_ModStart> ( name ) ; if (! utf8 ) return 0,0
624,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int su3000_frontend_attach ( <S2SV_ModStart> d ) { <S2SV_ModEnd> if ( dvb_usb_generic_rw <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; <S2SV_ModEnd> if ( dvb_usb_generic_rw <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; <S2SV_ModEnd> if ( dvb_usb_generic_rw <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; <S2SV_ModEnd> if ( dvb_usb_generic_rw <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; <S2SV_ModEnd> if ( dvb_usb_generic_rw <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; <S2SV_ModEnd> if ( dvb_usb_generic_rw <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; <S2SV_ModEnd> if ( dvb_usb_generic_rw <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; <S2SV_ModEnd> if ( dvb_usb_generic_rw <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; <S2SV_ModEnd> if ( dvb_usb_generic_rw <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank>",0
625,"<S2SV_ModStart> * iface, vpx_codec_enc_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> ( ctx -> iface <S2SV_ModEnd> ) ctx ->",0
626,"<S2SV_ModStart> stride, int <S2SV_ModEnd> mv_row, int <S2SV_ModStart> const kernel = vpx_get_interp_kernel <S2SV_ModEnd> ( xd -> <S2SV_ModStart> int uv_stride ; vpx_build_inter_predictor <S2SV_ModEnd> ( y_mb_ptr, <S2SV_ModStart>, uv_stride, <S2SV_ModEnd> pred [ 256 <S2SV_ModStart> 256 ], <S2SV_ModEnd> mv, scale <S2SV_ModStart> 512 ], <S2SV_ModEnd> mv, scale <S2SV_ModStart> 512 ], <S2SV_ModEnd> mv, scale",0
627,"<S2SV_ModStart> = TRUE ; if (! <S2SV_ModStart>, origbuf ) ) return FALSE",0
628,<S2SV_ModStart> * cJSON_CreateFloatArray ( const,0
629,,0
630,,0
631,,0
632,<S2SV_ModStart> -> error_code ) { <S2SV_ModStart> : NULL ; },0
633,<S2SV_ModStart> pocstruct_t * ps_cur_slice <S2SV_ModEnd> ; ih264d_free_dynamic_bufs (,0
634,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet ),0
635,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int getnum (,0
636,"<S2SV_ModStart>, g -> gcstate <S2SV_ModEnd> ) ; markold <S2SV_ModStart>, g -> gcstate <S2SV_ModEnd> ) ; g",0
637,<S2SV_ModStart> 0 ; else { ret = <S2SV_ModEnd> - EIO ; <S2SV_ModStart> - EIO ; goto err ; },0
638,<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart>!= PROTOCOL_EARLY ) { return NULL ; } <S2SV_ModEnd> memset ( buffer <S2SV_ModStart> buffer ) ; <S2SV_ModEnd> s_write ( c,0
639,,0
640,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi,",0
641,"<S2SV_ModStart> ( ndo, ""%s"", icmp6_tstr <S2SV_ModEnd> ) ) ;",0
642,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command",0
643,<S2SV_ModStart> Image * image <S2SV_ModEnd> ; assert (,0
644,"<S2SV_ModStart> ) ; } jas_eprintf ( ""length <S2SV_blank> %d\\n"", length ) ;",0
645,<S2SV_ModStart> ] ) { if (! channel -> modes ) return ;,0
646,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> - m + vpx_read_bit <S2SV_ModEnd> ( r )",1
647,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
648,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> ( REFERENCE_MODE ) vpx_read <S2SV_ModEnd> ( r,",0
649,"<S2SV_ModStart>! stream ) { <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; return NULL ; }",0
650,<S2SV_ModStart> op -> nd_opt_len <S2SV_ModEnd> ) ) goto,0
651,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return ERROR_SUCCESS ;,0
652,"<S2SV_ModStart> ; ret = var_expand <S2SV_ModEnd> ( path, <S2SV_ModStart> if ( ret < <S2SV_ModEnd> 0 ) {",0
653,<S2SV_ModStart> ; tok -> lineno = 0 ; tok ->,0
654,<S2SV_ModStart> ( av1 -> <S2SV_ModEnd> config ) ;,0
655,<S2SV_ModStart> ( dpbSize ) ; dpb -> dpbSize = maxRefFrames,0
656,<S2SV_ModStart> ; oe_errno = OE_EINVAL <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( addrlen ) { <S2SV_ModStart> * addrlen ; },0
657,,1
658,"<S2SV_ModStart> FALSE ; } if (! <S2SV_ModStart>, s ) ) return FALSE",1
659,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; struct ip6_flowlabel,0
660,"<S2SV_ModStart> falign, hdr_size = 0",0
661,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; us <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPDRH <S2SV_ModEnd> ) << 8 <S2SV_ModStart> | dm9000ReadReg ( DM9000_EPDRL <S2SV_ModEnd> ) ; }",0
662,"<S2SV_ModStart> -> command ), NULL <S2SV_ModStart> -> callback ), NULL",0
663,<S2SV_ModStart> = ubuf ; <S2SV_ModEnd> if ( sock,0
664,,0
665,<S2SV_ModStart> ; if ( h -> filename == NULL ||,0
666,<S2SV_ModStart> ; } else { <S2SV_ModStart> = NULL ; },0
667,"<S2SV_ModStart> one, offset = 0",0
668,"<S2SV_ModStart>, comp -> type <S2SV_ModEnd> ) )!=",0
669,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
670,"<S2SV_ModStart> client = user_data <S2SV_ModEnd> ; if ( <S2SV_ModStart> num_clients ) ; <S2SV_ModEnd> crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client""",0
671,<S2SV_ModStart> * uv ; thread -> openupval = 0 ;,0
