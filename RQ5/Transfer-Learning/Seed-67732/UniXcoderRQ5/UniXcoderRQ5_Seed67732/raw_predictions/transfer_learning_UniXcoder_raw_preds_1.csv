,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
1,<S2SV_ModStart> ; if ( skb_tnl_header_len ( skb ) < tnl_hlen <S2SV_ModEnd> ) { if,0
2,<S2SV_ModStart> * writer = <S2SV_ModEnd> gf_list_get ( writers,0
3,"<S2SV_ModStart> item ) { return cJSON_GetArrayItem ( array, item, 0, item ) <S2SV_ModEnd> ; } <S2SV_null>",0
4,"<S2SV_ModStart>, u64 nr <S2SV_ModEnd>, struct pt_regs <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",0
5,"<S2SV_ModStart> EXT4_EXTENTS_FLAG ) { char * buf ; buf = grub_malloc ( <S2SV_ModEnd> EXT2_BLOCK_SIZE ( data <S2SV_ModStart> ( data ) ) ; <S2SV_ModEnd> struct grub_ext4_extent_header * <S2SV_ModStart> ( data, buf <S2SV_ModEnd>, ( struct <S2SV_ModStart> ( data, buf <S2SV_ModEnd>, ( struct <S2SV_ModStart> ( fileblock >= buf <S2SV_ModEnd> ) ) return <S2SV_ModStart> ; else { if ( fileblock < grub_le_to_cpu16 ( ext [ i ]. len ) ) { grub_disk_addr_t start ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext [ i ]. start ) ; <S2SV_ModStart> start ) ; } <S2SV_ModStart> { grub_disk_addr_t start <S2SV_ModEnd> ; start = <S2SV_ModStart> start ) ; if ( start < <S2SV_ModEnd> ( start << <S2SV_ModStart> + start ; <S2SV_ModEnd> } else { <S2SV_ModStart> { grub_disk_addr_t start <S2SV_ModEnd> ; start = <S2SV_ModStart> start ) ; if ( start < <S2SV_ModEnd> ( start << <S2SV_ModStart> + start ; <S2SV_ModEnd> } } else <S2SV_ModStart> { grub_disk_addr_t start <S2SV_ModEnd> ; start = <S2SV_ModStart> start ) ; if ( start < <S2SV_ModEnd> ( start << <S2SV_ModStart> + start ; <S2SV_ModEnd> } } }",0
6,"<S2SV_ModStart> fdct16 ( const tran_low_t <S2SV_ModEnd> in [ 16 <S2SV_ModStart> 16 ], tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> ] ) { tran_low_t step1 [ 8 ] ; tran_low_t step2 [ 8 ] ; tran_low_t step3 [ 8 ] ; tran_low_t step3 [ 8 ] ; tran_low_t <S2SV_ModEnd> input [ 8 <S2SV_ModStart> 8 ] ; tran_low_t <S2SV_ModEnd> input [ 8 <S2SV_ModStart> ] ; int <S2SV_ModEnd> temp1, temp2 <S2SV_ModStart> ; { int <S2SV_ModEnd> s0, s1 <S2SV_ModStart>, s7 ; tran_low_t t1, t2, t3 ; tran_low_t t1, t2, t3 ; tran_low_t t1, t2, t3 ; tran_low_t t1, t2, t3 ; tran_low_t t1, t2, t3 ; tran_low_t x0, x1, x1, x2, x3 ; tran_low_t x1, x1, x2, x3 ; tran_low_t x1, x1, x1, x2 ; tran_low_t x1",0
7,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> parse_ciff ( save,0
8,"<S2SV_ModStart> * sd, const <S2SV_ModStart> partial_frame ) { const <S2SV_ModStart> -> common ; const <S2SV_ModStart> cpi ) ; const int min_filter_level = 0 ; const int max_filter_level = get_max_filter_level ( cpi ) ; <S2SV_ModStart> ; int best_err = try_filter_frame ( sd, cpi, filt_mid, partial_frame ) ; int filt_mid = MIN ( filt_mid + filter_step, max_filter_level ) ; int filt_low = MAX ( filt_mid - filter_step, min_filter_level ) ; int filt_low = MAX ( filt_mid - filter_step, min_filter_level ) ; int filt_err ; int filt_err ; int bias = ( best_err >> ( 8 - ( filt_mid / 8 ) ) ) * filter_step ; if ( cpi -> twopass. section_intra_rating < 20 )bias = ( best_err >> ( ( filt_mid / 8 ) ) ) * ( cpi -> twopass. section_intra_rating / 20 ) ; if ( cpi -> twopass. section_intra_rating < 20 )bias = ( best_err >> ( ( filt_",0
9,"<S2SV_ModStart>. left ; luaL_pushint <S2SV_ModEnd> ( L, <S2SV_ModStart> ( L, 1, <S2SV_ModStart> 1 : offset, 1",0
10,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ++ i ) vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ++ i ) vpx_write <S2SV_ModEnd> ( w,",0
11,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } else { <S2SV_ModEnd> request -> rxBlockSzx <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; },0
12,"<S2SV_ModStart>, ""%04x, <S2SV_blank> "", EXTRACT_16BITS <S2SV_ModEnd> ( ptr ) <S2SV_ModStart>, ""%04x <S2SV_blank> "", EXTRACT_16BITS <S2SV_ModEnd> ( ptr ) <S2SV_ModStart> u_char * ) dat <S2SV_ModEnd> ) ) )",0
13,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> construct_get_dest_keyring ( struct <S2SV_ModStart> * authkey ; int ret ; <S2SV_ModStart> dest_keyring ) ; ret = key_read ( dest_keyring, & dest_keyring ) ; if ( ret ) goto out ; <S2SV_ModEnd> switch ( cred <S2SV_ModStart> ( dest_keyring ) goto out ; } <S2SV_ModEnd> dest_keyring = key_get <S2SV_ModStart> ) ; return ret <S2SV_ModStart> ) ; return ret ; out : kfree ( dest_keyring ) ; return ret",0
14,<S2SV_ModStart> = create_spnego_ctx ( 0,0
15,<S2SV_ModStart> ; tm = g_localtime_safe <S2SV_ModEnd> ( & t,0
16,<S2SV_ModStart> length ) ; if ( length > AUTH_PASS_LEN ) { <S2SV_ModStart> ) ) ; },0
17,<S2SV_ModStart> e == p || e - p,0
18,"<S2SV_ModStart> ) &&! inode_capable <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! inode_capable <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! inode_capable <S2SV_ModEnd> ( inode,",0
19,<S2SV_ModStart> = 0 ; if ( reader -> bytes_available_fd + 1 > MAX_FILE_SIZE ) { return false ; },0
20,"<S2SV_ModStart> detect_transition_to_still ( struct twopass_rc <S2SV_ModEnd> * twopass, <S2SV_ModStart> ; if ( twopass -> stats_in <S2SV_ModEnd> > MIN_GF_INTERVAL && <S2SV_ModStart> ( frame_interval > MIN_GF_INTERVAL <S2SV_ModEnd> && loop_decay_rate >= <S2SV_ModStart> && loop_decay_rate >= MIN_GF_INTERVAL <S2SV_ModEnd> && last_decay_rate < <S2SV_ModStart> j ) { const FIRSTPASS_STATS tmp_next_frame = tmp_next_frame ; <S2SV_ModStart> tmp_next_frame ) ) { tmp_next_frame. pcnt_motion = 0 ; tmp_next_frame. pcnt_motion = 0 ; } reset_fpf_position ( twopass, position ) ; <S2SV_ModEnd> reset_fpf_position ( twopass <S2SV_ModStart> ( twopass, tmp_next_frame <S2SV_ModEnd> ) ; if",0
21,"<S2SV_ModStart> ; if ( ( offset + size > i_size_read ( inode ) ) || ( offset + size > inode -> i_size_read ( inode ) ) ) { ext4_debug ( ""ext4_end_io_nolock: <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", inode -> i_ino ) ; return ret ; } if (",0
22,"<S2SV_ModStart> alg ) { <S2SV_ModEnd> if (! <S2SV_ModStart> CRYPTO_ALG_NEED_FALLBACK ) ) request_module <S2SV_ModEnd> ( ""%s-all"",",0
23,<S2SV_ModStart> = GIT_PKT_NG ; if ( len < 4 ) return - 1 ; <S2SV_ModStart> += 3 ; if ( len < 4 ) return - 1 ; <S2SV_ModStart> = '\\0' ; if ( len < 4 ) return - 1 ; <S2SV_ModStart> = '\\0' ; if ( len < 4 ) return - 1 ; <S2SV_ModStart> = '\\0' ; if ( len < 4 ) return - 1 ;,0
24,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> BYTE flags ; if ( Stream_Get_Size ( s ) < 4 ) { WLog_ERR ( TAG, ""Invalid <S2SV_blank> length <S2SV_blank> of <S2SV_blank> stream <S2SV_blank> data"" ) ; return - 1 ; } <S2SV_ModStart> ; UINT16 length ; if ( Stream_Get_Size ( s, length ) < 4 ) { WLog_ERR ( TAG, ""Invalid <S2SV_blank> length <S2SV_blank> of <S2SV_blank> stream <S2SV_blank> data"" ) ; return - 1 ; } Stream_Read_UINT16 ( s, length ) <S2SV_ModStart> = NEGO_STATE_FINAL ; return 0 ;",0
25,"<S2SV_ModStart> ; } } if ( avio_feof ( pb ) ) { av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid\\n"", num ) ; return AVERROR_PATCHWELCOME ; }",0
26,"<S2SV_ModStart> mntent, path, true",0
27,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } io -> io_cleanup = mem_cleanup ;,1
28,<S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> pixel & ( ( <S2SV_ModStart> value + 0.5 ) ),0
29,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return ret?,0
30,<S2SV_ModStart> vpx_codec_enc_cfg_map_t * map ; vpx_codec_enc_cfg_map_t * map_map <S2SV_ModStart> ( map = ( vpx_codec_enc_cfg_map_t * ) map_map ; map_map = ( vpx_codec_enc_cfg_map_t * ) map_map ; for ( map = <S2SV_ModStart>. cfg_maps ; map_map <S2SV_ModEnd> -> usage >=,0
31,<S2SV_ModStart> ) ; } free_page ( new_page ) ;,0
32,"<S2SV_ModStart> void show_progress ( uint64_t <S2SV_ModEnd> frame_out, uint64_t <S2SV_ModStart> dx_time ) { ( void ) frame_in ; ( void ) frame_out ;",0
33,"<S2SV_ModStart> ; if ( mysql_error ( imp_dbh -> pmysql ) ) { do_error ( sth, JW_ERR_INTERNAL, ""error <S2SV_blank> while <S2SV_blank> mysql <S2SV_blank> error <S2SV_blank> on <S2SV_blank> mysql <S2SV_blank> error"" ) ; return Nullav ; } if (",0
34,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_EWRPTL <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRTS <S2SV_ModEnd> ) ; return",0
35,<S2SV_ModStart> ; value = ast2obj_int <S2SV_ModEnd> ( o -> <S2SV_ModStart> ; value = ast2obj_int <S2SV_ModEnd> ( o ->,0
36,<S2SV_ModStart> page && ( page == NULL ) && ( <S2SV_ModStart> == 0 ) && ( page == NULL ) && page == NULL <S2SV_ModStart> ) ) { page = <S2SV_ModStart> ; if ( page == NULL && page == NULL && page == NULL && page == NULL <S2SV_ModEnd> ) { http_response_printf <S2SV_ModStart> ; if ( page == NULL && page == NULL && page == NULL <S2SV_ModEnd> ) { http_response_printf <S2SV_ModStart> ; if ( page == NULL && page == NULL <S2SV_ModEnd> ) { http_response_printf,0
37,"<S2SV_ModStart> low_var_thresh, int limit, int limit, int limit, int limit, int limit, int limit, int limit, int limit, int limit, limit, limit <S2SV_ModEnd> ) { double <S2SV_ModStart>.5 ) ; <S2SV_ModEnd> int mb_rows = <S2SV_ModStart> int mb_rows = limit <S2SV_ModEnd> ; int mb_cols <S2SV_ModStart> int mb_cols = limit <S2SV_ModEnd> ; ( void <S2SV_ModStart> ) flag ; memset <S2SV_ModEnd> ( limits, <S2SV_ModStart> 16 * mb_cols, limit, limit <S2SV_ModStart>, source -> uv_width, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit, limit",0
38,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache * ext4_mb_cache <S2SV_ModEnd>, struct buffer_head <S2SV_ModStart> ) ; struct mb2_cache * ext4_mb_cache = EXT4_MB_CACHE ( ext4_mb_cache ) ; struct mb2_cache_entry * ce = mb2_cache_entry_new ( ext4_mb_cache <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; ce = mb2_cache_entry_alloc <S2SV_ModEnd> ( ext4_mb_cache, <S2SV_ModStart> ( ext4_mb_cache, GFP_NOFS <S2SV_ModEnd> ) ; if <S2SV_ModStart> error ) { mb2_cache_entry_free <S2SV_ModEnd> ( ce ) <S2SV_ModStart> hash ) ; mb2_cache_entry_release <S2SV_ModEnd> ( ce )",0
39,"<S2SV_ModStart> ) ) ; * code = r_socket_http_answer ( s, code, rlen ) ; return NULL <S2SV_ModEnd> ; } <S2SV_null>",0
40,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> return ip_options_get_finish (,0
41,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
42,"<S2SV_ModStart> ) ) { if (! has_varp_option ( opt_idx, opt_idx ) ) { <S2SV_ModStart> ) ; } } else { if (! has_varp_option ( opt_idx, opt_idx ) ) { errmsg = ( char_u * ) N_ ( ""E529: <S2SV_blank> No <S2SV_blank> variable <S2SV_blank> option <S2SV_blank> in <S2SV_blank> the <S2SV_blank> GUI"" ) ; } }",0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode <S2SV_ModStart>, & new_mode, & acl ) ; if ( ret <S2SV_ModEnd> ) goto out",0
44,"<S2SV_ModStart> size_t size ; size_t size_size ; <S2SV_ModStart> = 0 ; size_size = 0 ; <S2SV_ModStart>, 0 ) ||! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size_size ) ) { goto error ; } <S2SV_ModEnd> if (! <S2SV_ModStart> / 8 ; size = size ; <S2SV_ModStart> if (! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ) { goto error ; } cmpt -> stream_ = ( inmem )? jas_stream_tmpfile ( ) : jas_stream_tmpfile ( ) ; if (! cmpt -> stream_ ) { goto error ; } if ( size > 0 ) { if ( size > 0 ) { goto error ; } if ( size > 0 ) { if ( size - 1 > LONG_MAX ) { goto error ; } if ( size > 0 ) { goto error ; } if ( size > 0 ) { if ( size > 0 ) { goto error ; } if ( size > 0 ) { if ( size > 0 ) { goto error ;",0
45,<S2SV_ModStart> || dp == ( unsigned char ),0
46,"<S2SV_ModStart>, size_t * acl_len <S2SV_ModEnd> ) { __be32 <S2SV_ModStart> { __be32 * <S2SV_ModEnd> bitmap [ 3 <S2SV_ModStart> int status ; <S2SV_ModEnd> if ( ( <S2SV_ModStart>!= 0 ) return - EOPNOTSUPP <S2SV_ModEnd> ; if ( <S2SV_ModStart>!= 0 ) return - EOPNOTSUPP <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ; * acl_len = attrlen ; } else status = - EOPNOTSUPP ; out : * acl_len = 0 <S2SV_ModEnd> ; return status",0
47,"<S2SV_ModStart> * TICK_NSEC ; u64 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",0
48,"<S2SV_ModStart> { owner = ssplit <S2SV_ModEnd> ( auth, <S2SV_ModStart> ; } } group = ssplit <S2SV_ModEnd> ( tok,",0
49,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( addr <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; <S2SV_ModEnd> if ( addr,0
50,"<S2SV_ModStart> int res ; unsigned long export_index_table [ sizeof ( * sBlk ) - 1 ] ; long long export_index_table [ sizeof ( * sBlk ) - 1 ] ; res = read_fs_bytes ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES <S2SV_ModEnd> ( sBlk. <S2SV_ModStart> s. inodes ), export_index_table, sizeof ( * sBlk ) - 1 <S2SV_ModEnd> ) ; if",0
51,"<S2SV_ModStart> ; } else { apr_psprintf ( cmd -> pool, ""ModSecurity: <S2SV_blank> Invalid <S2SV_blank> value <S2SV_blank> for <S2SV_blank> SecRuleEngine: <S2SV_blank> %s"" <S2SV_ModEnd>, p1 ) <S2SV_ModStart> p1 ) ; }",0
52,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> for ( argi <S2SV_ModStart> continue ; } <S2SV_ModEnd> } else if,0
53,"<S2SV_ModStart> } if (! c -> opt -> option. verify_chain &&! c -> opt -> opt -> option. verify_chain ) { SSL_SET_ex_data_ex_data ( c -> ssl, index_session_authenticated, 0 ) ; return 1 ; } if (",0
54,"<S2SV_ModStart> ; if ( memcmp <S2SV_ModEnd> ( cmac,",0
55,"<S2SV_ModStart> cpi ) { <S2SV_ModEnd> const uint64_t bits_left <S2SV_ModStart> 0 ) ; cpi -> twopass. kf_group_bits += cpi -> twopass. gf_group_size ; <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> -= bits_used ; cpi -> twopass. gf_group_bits <S2SV_ModEnd> = MAX ( <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; } <S2SV_ModEnd> } cpi ->",0
56,"<S2SV_ModStart> define EOFOp 0x07 Image * image = ( ImageInfo * ) DestroyImage ( image ) ; <S2SV_ModStart> ( image, 1, image -> rows <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; do { image -> page. x = image -> page. x ; image -> page. y = image -> columns. y ; image -> columns = image -> rows <S2SV_ModEnd> ; flags =",0
57,"<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> altsetting [ 0 ]. desc. bNumEndpoints < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> endpoints\\n"" ) ; error = - ENODEV ; goto err_free_urb ; }",0
58,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
59,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> ( fd = pw_tmpfile ( <S2SV_ModEnd> ) ) ==,0
60,<S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; },0
61,<S2SV_ModStart> ( cmd + strlen ( arg ) <S2SV_ModEnd> == 0 ),0
62,"<S2SV_ModStart> void vp9_setup_dst_planes ( MACROBLOCKD * const xd, <S2SV_ModStart> const buffers [ 4 <S2SV_ModEnd> ] = { <S2SV_ModStart> src -> v_buffer <S2SV_ModEnd> } ; const <S2SV_ModStart> int strides [ 4 <S2SV_ModEnd> ] = { <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( & pd <S2SV_ModStart> pd -> plane, <S2SV_ModEnd> & pd ->",0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,<S2SV_ModStart> ) get_block = ocfs2_get_block_nolock <S2SV_ModEnd> ; else get_block <S2SV_ModStart> else get_block = ocfs2_dio_get_block_nolock <S2SV_ModEnd> ; return __blockdev_direct_IO,0
65,"<S2SV_ModStart> ( f, ""%79s <S2SV_blank> %[^\\n]\\n"" <S2SV_ModEnd>, def,",0
66,"<S2SV_ModStart> ) { int kind, <S2SV_ModStart> ; mod_ty mod <S2SV_ModEnd> ; Py_ssize_t len <S2SV_ModStart> ':' ) ; if ( expr_start > expr_start ) { return NULL ; } <S2SV_ModStart> = PyCF_ONLY_AST ; if ( expr_end - expr_start > expr_start ) { return NULL ; } <S2SV_ModStart> fstring_name ) ; if (! mod ) return NULL ;",0
67,"<S2SV_ModStart> string ) { return cJSON_GetObjectItem ( object, string, 0, string ) <S2SV_ModEnd> ; } <S2SV_null>",0
68,<S2SV_ModStart> size ) ; if ( px -> ft ) { <S2SV_ModStart> = px ; },0
69,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""CRCErr=%u <S2SV_blank> "", ( length < 2 )? 2 : 2 ) ) ; return ; } <S2SV_ModStart> ) ) ; ptr ++ ; length -- ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""CRCErr=%u <S2SV_blank> "", ( length < 2 )? 2 : 2 ) ) ; return ; } <S2SV_ModStart> ) ) ; ptr ++ ; length -- ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""HardOver=%u <S2SV_blank> "", ( length < 2 )? 2 : 2 ) ) ; return ; } ptr ++ ; length -- ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""Timeout=%u <S2SV_blank> "", ( length < 2 )? 2 : 2 ) ) ; return ; } ptr ++ ; length -- ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AlignErr=%u <S2SV_blank> "", ( length < 2 )? 2 : 2 ) ) ; return ; } ptr ++ ; length = 2 ; if ( length < 4 ) { ND_",0
70,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
71,<S2SV_ModStart> const buffers [ 4 <S2SV_ModEnd> ] = { <S2SV_ModStart> src -> v_buffer <S2SV_ModEnd> } ; const <S2SV_ModStart> int strides [ 4 <S2SV_ModEnd> ] = { <S2SV_ModStart> src -> uv_stride <S2SV_ModEnd> } ; for,0
72,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; for (,1
73,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
74,<S2SV_ModStart> ( user ) ; if ( user -> release_barrier ) return - EBUSY,0
75,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> sl = strlen <S2SV_ModStart> + 1 ; size_t <S2SV_ModEnd> limit = 0,0
76,"<S2SV_ModStart> * for_ch ; <S2SV_ModEnd> REQ ( n <S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == TYPE_ASYNC <S2SV_ModEnd> ) { is_async <S2SV_ModStart> = 1 ; } else { is_async = 1 ; } if ( TYPE ( CHILD ( n, 0 ) ) == TYPE_ASYNC ) { is_async = 1 ; } if ( TYPE ( CHILD ( n, 1 ) ) == TYPE_ASYNC ) { is_async = 1 ; } else { is_async = 1 ; } for_ch = CHILD ( n, 1 + is_async ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! expression ) return NULL ; if ( NCH ( n ) == ( 5 + is_async ) ) { int j, n_ifs ; asdl_seq * ifs ; n = CHILD ( n, 4 + is_async ) ; n_ifs = count_comp_ifs ( c, n_fors <S2SV_ModEnd> ) ; if",0
77,<S2SV_ModStart> = NULL ; dst_state -> frame [ i ] = NULL ; <S2SV_ModStart> = NULL ; dst_state -> frame [ i ] = NULL ;,0
78,"<S2SV_ModStart> write_mb_modes_kf ( const VP9_COMMON * const cm = & cpi -> common ; const MACROBLOCKD * const xd = & mi -> mb. e_mbd ; const MACROBLOCKD * const xd = & mi -> mb. e_mbd ; const MACROBLOCKD * const xd = & mi -> mb. e_mbd ; const MACROBLOCKD * const xd = & xd -> mb. e_mbd ; const struct segmentation * const left_mi = xd -> left_available? mi_8x8 [ - 1 ] : NULL ; const MB_MODE_INFO * const left_mi = xd -> left_available? mi_8x8 [ - 1 ] : NULL ; const MB_MODE_INFO * const mbmi = & mi -> mbmi ; const BLOCK_SIZE bsize = mbmi -> sb_type ; if ( seg -> update_map ) write_segment_id ( w, seg, mbmi -> segment_id, mi, w ) ; if ( seg -> update_map ) write_segment_id ( cpi, mi, segment_id, mi, w ) ; if ( bsize >= BLOCK_8X8 && cm",0
79,"<S2SV_ModStart> if ( n >= <S2SV_ModEnd> maxn ) SWF_error <S2SV_ModStart> SWF_error ( ""Action <S2SV_blank> overflow!!"" ) ; if ( n < 0 ) SWF_error ( ""Too <S2SV_blank> many <S2SV_blank> action <S2SV_blank> for <S2SV_blank> action <S2SV_blank> \'%s\'"", actions [ n ]. SWF_ACTIONRECORD. Offset",0
80,<S2SV_ModStart> prep ) ) return ( - 1 ) ; <S2SV_ModEnd> n = EXTRACT_32BITS,0
81,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
82,"<S2SV_ModStart> * pTable, const <S2SV_ModStart> zArg ) { const <S2SV_ModStart> nModuleArg ) ; const <S2SV_ModStart> * * azModuleArg ; if ( nBytes > sizeof ( char ) * 2 ) { nBytes = sizeof ( char ) * ( 2 + pTable -> nModuleArg ) ; } else { nBytes = sizeof ( char ) * ( 2 + pTable -> nModuleArg ) ; } * azModuleArg",0
83,<S2SV_ModStart> i ] ; ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ i ] = x [ i ] * ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] ; <S2SV_ModStart> i ] * ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ i ] ; ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ i ] = <S2SV_ModStart> i ] * ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ i ] ; ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ i ] = <S2SV_ModStart> i ] * ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ i ] ; ptr_hbe_txposer -> qmf_in,0
84,<S2SV_ModStart> ) p += ( int ) <S2SV_ModStart> ONIG_STR_BEGIN_LINE ) { if ( p - reg -> dmin < s ) { * low = ( int ) ( * low ) ; * low_prev = ( int ) ( * low ) ; * low_prev = ( int ) ( * low_prev ) ; } else { <S2SV_ModStart> ) ; } },0
85,<S2SV_ModStart> bfqq ) { <S2SV_ModEnd> unsigned long flags <S2SV_ModStart> long flags ; <S2SV_ModEnd> if ( bfqq <S2SV_ModStart> flags ) ; bfq_idle_slice_timer_body <S2SV_ModEnd> ( bfqq ) <S2SV_ModStart> ( bfqq ) <S2SV_ModEnd> ; else if,0
86,,1
87,"<S2SV_ModStart> PERF_COUNT_SW_ALIGNMENT_FAULTS, 1 <S2SV_ModEnd>, regs,",0
88,<S2SV_ModStart> > newDataLength || ( <S2SV_ModStart> + x > ( <S2SV_ModStart> + diffBlockLength || ( <S2SV_ModStart> + y > ( <S2SV_ModStart> extraBlock + extraBlockLength || ( newpos + x > ( int ) newLength || ( newpos + y > ( int ) newLength || ( newpos + y > ( int ) newLength || ( newpos + y > ( int ) newLength || ( newpos + y > ( int ) newLength || ( newpos + y > ( int ) newLength || ( newpos + y > ( int ) newLength || ( newpos + y > ( int ) newLength || ( newpos + y > ( int ) newLength || ( newpos + y > ( int ) newLength || ( newpos + y > ( int ) newLength || ( newpos + y > ( int ) newLength || ( newpos + y > ( int ) newLength || ( newpos + y > ( int ) newLength || ( newpos + y > ( int ) newLength || ( newpos + y > ( int ) newLength || ( newpos + y > ( int ) newLength || ( newpos + y > ( int ) newpos ) ) ) ) ),0
89,"<S2SV_ModStart>, np -> opt_opt <S2SV_ModEnd>, np ->",0
90,"<S2SV_ModStart> ) / 2 ) { if ( <S2SV_ModEnd> image -> number_pixels <S2SV_ModStart> image -> number_pixels > MagickMax ( number_pixels, number_pixels, number_data_bands ) ) { break ; } <S2SV_ModEnd> } if (",0
91,<S2SV_ModStart> data ) { ( void ) data ;,0
92,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
93,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
94,"<S2SV_ModStart> mv. as_int ; if ( xd -> mode_info_stride == INTRA_FRAME ) { vp8_mv_pred_bias ( xd, xd, xd, mv, mv, mv, mv_offset ) ; } else { vp8_mv_pred_bias ( xd, xd, mv, mv, mv, mv_offset <S2SV_ModStart> mv. as_int ; } if ( xd -> mode_info_stride == INTRA_FRAME ) { vp8_mv_pred_bias ( xd, xd, mv, mv, mv_offset ) ; } else { vp8_mv_pred_bias ( xd, xd, mv, mv, mv, mv_offset ) ; } if ( xd -> mode_info_stride == INTRA_FRAME ) { vp8_mv_pred_bias ( xd, xd, mv, mv, mv, mv_offset ) ; } else { vp8_mv_pred_bias ( xd, xd, mv, mv, mv, mv, mv_offset ) ; } if ( xd -> mode_info_stride == INTRA_FRAME ) { vp8_mv_pred_bias ( xd, xd, mv, mv, mv, mv",0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
97,<S2SV_ModStart> msicap ; pci_populate_msicap <S2SV_ModEnd> ( & msicap,0
98,<S2SV_ModStart> = server. server_mode <S2SV_ModEnd> ; return REDIS_OK,0
99,"<S2SV_ModStart> ; if ( cfg -> g_pass == VPX_RC_ONE_PASS ) { VPX_LOG ( ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ) ; return 0 ; } if ( <S2SV_ModStart> g_pass!= VPX_RC_ONE_PASS <S2SV_ModEnd> ) ) ERROR",0
100,"<S2SV_ModStart> cpi ) { <S2SV_ModEnd> vp9_init_plane_quantizers ( cpi <S2SV_ModStart> cpi, & cpi -> mb, & cpi -> mb <S2SV_ModEnd> ) ; }",0
101,<S2SV_ModStart> info -> si_code == TGID_0 ) { if ( info -> si_code == TGID_0 ) return - EPERM ; <S2SV_ModEnd> return - EPERM <S2SV_ModStart> - EPERM ; },0
102,<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; if ( ptr -> size < 8 ) return GF_ISOM_INVALID_FILE ;,0
103,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
104,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> -> state == fmode <S2SV_ModEnd> ) return ; <S2SV_ModStart> ; if ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> -> state = fmode <S2SV_ModEnd> ; } <S2SV_null>",0
105,<S2SV_ModStart> read_info ) ; <S2SV_ModEnd> if ( (,0
106,<S2SV_ModStart> 0 ; } if ( len > sizeof ( elem. in_sg ) ) { return 0 ; },0
107,"<S2SV_ModStart> ( unsigned ) JPC_QCX_GETEXPN <S2SV_ModEnd> ( qcd -> <S2SV_ModStart> i ] ), i, ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ]",0
108,<S2SV_ModStart> == 8 ) && c -> format!= CHUNKY,1
109,"<S2SV_ModStart> ) ; } if ( length > UINT_MAX / sizeof ( * p ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|isoi]"" ) ) ; return ( 1 ) ; }",0
110,"<S2SV_ModStart>, noffset, ""%s"",",0
111,"<S2SV_ModStart> ; if ( kfifo_alloc_nolock <S2SV_ModEnd> ( & state <S2SV_ModStart> - ENOMEM ; ret = v4l2_device_register_subdev ( & dev -> v4l2_dev, sd ) ; if ( ret ) { kfifo_free ( & state -> rx_kfifo ) ; kfifo_free ( & state -> rx_kfifo ) ; <S2SV_ModEnd> return ret ;",0
112,"<S2SV_ModStart> * iface, vpx_codec_dec_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> ( flags & VPX_CODEC_CAP_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & <S2SV_ModStart> ( flags & VPX_CODEC_CAP_DECODER ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & <S2SV_ModStart> ( flags & VPX_CODEC_CAP_DECODER <S2SV_ModEnd> ) ) res",0
113,<S2SV_ModStart> ; value |= TJA1100_CONFIG1_MII_MODE_RMII_25 <S2SV_ModEnd> ; tja1100WritePhyReg (,0
114,<S2SV_ModStart> ; if ( IPCB ( sk ) -> flags & IPSKB_CBR_SKB_CBR <S2SV_ModEnd> ) icmp_send (,0
115,<S2SV_ModStart> ( ( flags & VPX_CODEC_CAP_ENCODER_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_ENCODER_PSMA <S2SV_ModEnd> ) ) res,0
116,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
117,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; LRESERVE_SPACE",0
118,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ) ; return 0 <S2SV_ModStart> break ; } return error ; } return error <S2SV_ModEnd> ; } <S2SV_null>,0
119,<S2SV_ModStart> case 0x83 : if ( len < 2 ) { return - 1 ; } <S2SV_ModStart> case 0x83 : if ( len < 2 ) { return - 1 ; },0
120,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
121,<S2SV_ModStart> goto trunc ; ND_TCHECK <S2SV_ModEnd> ( lshp -> <S2SV_ModStart> ls_type ) ; ND_TCHECK <S2SV_ModEnd> ( lshp ->,0
122,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { ret = - EIO ; break ; } <S2SV_ModEnd> * obuf =",0
123,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
124,<S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ),0
125,"<S2SV_ModStart> * costs, vpx_tree <S2SV_ModEnd> tree, const <S2SV_ModStart> tree, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> ) { const vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> ) ; const vpx_tree_index <S2SV_ModEnd> ii = tree",1
126,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
127,"<S2SV_ModStart> c, 0, true",0
128,"<S2SV_ModStart> fadst16 ( const tran_low_t * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_low_t <S2SV_ModEnd> s0, s1 <S2SV_ModStart> 15 ] ; tran_low_t <S2SV_ModEnd> x1 = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x2 = input <S2SV_ModStart> 13 ] ; tran_low_t <S2SV_ModEnd> x3 = input <S2SV_ModStart> 2 ] ; tran_low_t <S2SV_ModEnd> x5 = input <S2SV_ModStart> 4 ] ; tran_low_t <S2SV_ModEnd> x6 = input <S2SV_ModStart> 9 ] ; tran_low_t <S2SV_ModEnd> x8 = input <S2SV_ModStart> 7 ] ; tran_low_t <S2SV_ModEnd> x9 = input <S2SV_ModStart> 8 ] ; tran_low_t <S2SV_ModEnd> x9 = input <S2SV_ModStart> 8 ] ; tran_low_t <S2SV_ModEnd> x9 = input <S2SV_ModStart> 8 ] ; tran_low_t <S2SV_ModEnd> x10 = input <S2SV_ModStart> 8 ] ; tran_low_t <S2SV_ModEnd> x12 = input <S2SV_ModStart> 12 ] ; tran_low_t <S2SV_ModEnd> x15 = input <S2SV_ModStart> 12 ] ; tran_low_t <S2SV_ModEnd> x15 = input <S2SV_ModStart> 1 ] ; tran_low_t <S2SV_ModEnd> x15 = input <S2SV_ModStart> 1 ] ; tran_low_t <S2SV_ModEnd> x15 = input <S2SV_ModStart> 1 ] ; tran",0
129,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> return flags &,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
131,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart> * const tile, ThreadData * td <S2SV_ModStart> ) { const TileData * const tile_data = & td -> tile_data ; const <S2SV_ModStart> ) { const TileData * const tile_data = & td -> tile_data ; const int bs = num_8x8_blocks_wide_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ] ; const int bs = num_8x8_blocks_wide_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ] ; const int bs = num_8x8_blocks_high_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ] ; bh = num_8x8_blocks_high_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ] ; if ( bh == bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, t_unpred_seg_counts, bs, hbs, mi_row + hbs, mi_col ) ; } else if ( bw == bs && bh <S2SV_ModEnd> == bs && <S2SV_ModStart> bs",0
132,<S2SV_ModStart> ; if ( sdslen ( c -> querybuf ) > CLIENT_MAX_QUERY_SIZE ) break ; if (,0
133,<S2SV_ModStart> get_blocks_flags = EXT4_GET_BLOCKS_CREATE | EXT4_GET_BLOCKS_DELALLOC_RESERVE ; new. b_blocknr = disksize ; new. b_blocknr = disksize ; new. b_blocknr = 0,0
134,"<S2SV_ModStart> = 0 ; int retval = OE_EINVAL ; <S2SV_ModStart>, handle, & retval <S2SV_ModEnd>, & p <S2SV_ModStart> p -> ai_flags, & retval <S2SV_ModStart> p -> ai_family, & retval <S2SV_ModStart> p -> ai_socktype, & retval <S2SV_ModStart> p -> ai_protocol, & retval <S2SV_ModStart> } if ( retval <S2SV_ModEnd> &&! ( <S2SV_ModStart> p -> ai_addrlen <S2SV_ModEnd> ) { ret <S2SV_ModStart> } if ( retval <S2SV_ModEnd> &&! ( <S2SV_ModStart> } if ( retval <S2SV_ModEnd> == 1 ) <S2SV_ModStart> } if ( retval <S2SV_ModEnd> == 1 || <S2SV_ModStart> } if ( retval <S2SV_ModEnd> == 1 || <S2SV_ModStart> } if ( retval <S2SV_ModEnd> == 1 || <S2SV_ModStart> } if ( retval <S2SV_ModEnd> == 1 || <S2SV_ModStart> } if ( retval <S2SV_ModEnd> == 1 || <S2SV_ModStart> } if ( retval <S2SV_ModEnd> == 1 || <S2SV_ModStart> } if ( retval <S2SV_ModEnd> == 1 || <S2SV_ModStart> } if ( retval <S2SV_ModEnd> == 1 || <S2SV_ModStart> } if ( retval <S2SV_ModEnd> == 1 || <S2SV_ModStart> } if ( retval <S2SV_ModEnd> == 1 || <S2SV_ModStart> } if ( retval <S2SV_ModEnd> == 1 || <S2SV_ModStart> } if ( retval <S2SV_ModEnd> == 1 || <S2SV_ModStart> } if ( retval <S2SV_ModEnd> == 1 ||",0
135,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
136,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
137,"<S2SV_ModStart> __u16 size, const <S2SV_ModStart> data ) { const struct buf * buf = data ; int ret ; buf = kmalloc ( size, GFP_KERNEL ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
138,"<S2SV_ModStart> * body, const asdl_seq * const <S2SV_ModEnd> arena ) { <S2SV_ModStart> = body ; p -> v. Module. type = asdl_type ;",0
139,"<S2SV_ModStart> * src, <S2SV_ModEnd> unsigned int flags <S2SV_ModStart> >> 4 ; <S2SV_ModEnd> if ( ctx <S2SV_ModStart> write_idx ) ; <S2SV_ModEnd> buf -> ts_start <S2SV_ModStart> buf -> ts_start <S2SV_ModEnd> ; buf -> <S2SV_ModStart> -> ts_end = 0 <S2SV_ModEnd> ; return 0",0
140,"<S2SV_ModStart> ; if ( cm -> frame_type == KEY_FRAME && <S2SV_ModStart> cpi ) ; const int q_filter_level = cm -> frame_type == KEY_FRAME? 0 : cpi -> oxcf. sharpness ; const <S2SV_ModStart> int q = get_q_filter_level ( cm, cm -> frame_type <S2SV_ModEnd> ) ; int <S2SV_ModStart> int filt_guess = ROUND_POWER_OF_TWO ( q_filter_level, cm -> frame_type <S2SV_ModEnd> ) ; if <S2SV_ModStart>, cpi, q_filter_level <S2SV_ModEnd> ) ; }",0
141,"<S2SV_ModStart> BLE_NAME_LEN ) ; if ( p_data -> bd_type == BT_STORAGE_TYPE_PERSISTENT ) { <S2SV_ModStart> ) ; } } else { android_errorWriteLog ( 0x534e4554, ""113755"" ) ; }",0
142,"<S2SV_ModStart> = getnum ( h -> endian,",0
143,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImage ( image ) ) ; }",0
144,<S2SV_ModStart> (! data <S2SV_ModEnd> ) ) res,0
145,"<S2SV_ModStart> inode * inode, struct super_block * sb, struct buffer_head * bh ) { <S2SV_ModEnd> struct isofs_sb_info * <S2SV_ModStart> inode ) ; <S2SV_ModEnd> inode -> i_mode",0
146,"<S2SV_ModStart> STROKING ) { send ( <S2SV_ModEnd> "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", c <S2SV_ModStart> } else { send ( <S2SV_ModEnd> "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", c <S2SV_ModStart> k ) ; send ( <S2SV_ModEnd> "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", c <S2SV_ModStart> k ) ; send ( <S2SV_ModEnd> "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", c <S2SV_ModStart> ) ; } send ( ) ;",0
147,<S2SV_ModStart> self ) { if ( self ),0
148,<S2SV_ModStart> 0 ; a && i < count && i <S2SV_ModStart> ; if ( i && i > 0 &&,0
149,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body, & tmp ) < 0 ) { return 1 ; } <S2SV_ModEnd> tmp = _PyObject_GetAttrId <S2SV_ModStart>, & value <S2SV_ModEnd> ) ; if <S2SV_ModStart>, i, tmp ) ; } Py_CLEAR ( tmp ) ; } else { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, i, tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, i, tmp ) < 0 ) { return 1 ; } if (",0
150,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
151,<S2SV_ModStart> msg ) ; err = msg_sys -> msg_control ; <S2SV_ModStart> VERIFY_WRITE ) ; if ( err < 0 ) goto out_freeiov ; total_len = err ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; <S2SV_ModStart> MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT <S2SV_ModEnd> ) ; if,0
152,"<S2SV_ModStart> ) ; struct buffer_head * dibh ; u64 bn, dblock = 0 ; unsigned n, blks = 0 ; unsigned n, blks = 0 ; unsigned n, blks = 0 ; unsigned n, blks = 0 ; enum alloc_state state ; __be64 zero_bn = 0 ; BUG_ON ( sheight < 1 ) ; gfs2_trans_add_bh ( ip -> i_gl, dibh, 1 ) ; if ( height == sheight ) { struct buffer_head * bh ; ptr = metapointer ( end_of_metadata, mp ) ; bh = mp -> mp_bh [ end_of_metadata ] ; bh = mp -> mp_bh [ end_of_metadata ] ; dblks = gfs2_extent_length ( bh -> b_data, bh -> b_size, ptr, maxlen, & eob ) ; BUG_ON ( dblks < 1 ) ; } else { ptrs_per_blk = 0 ; branch_start = metapointer ( end_of_metadata, mp ) ; iblks = min ( maxlen, ptrs_per_blk - <S2SV_ModEnd> sb, n <S2SV_ModStart> sb, n <S2SV_ModEnd> )",0
153,<S2SV_ModStart> -> codec -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ; SHOW ( rc_resize_allowed ) ; SHOW ( rc_resize_allowed ) ; SHOW ( rc_resize_allowed ) ; SHOW ( rc_resize_up_thresh ) ; SHOW ( rc_resize_down_thresh ) ; SHOW ( rc_resize_down_thresh ) ; SHOW ( rc_end_usage ) ; SHOW ( rc_target_bitrate ) ; SHOW ( rc_uncompress_max_bitrate ) ; SHOW ( rc_uncompress_max_bitrate ) ; SHOW ( rc_uncompress_max_bitrate ) ; SHOW ( rc_uncompress_max_bitrate ) ; SHOW ( rc_uncompress_max_bitrate ) ; SHOW ( rc_uncompress_max_bitrate ) ; SHOW ( rc_uncompress_max_bitrate ) ; SHOW ( rc_uncompress_max_bitrate ) ; SHOW ( rc_uncompress_max_bitrate ) ; SHOW ( rc_uncompress_max_bitrate ) ; SHOW ( rc_uncompress_max_bitrate ) ; SHOW ( rc_uncompress_max_bitrate ) ; SHOW ( rc_uncompress_max_bitrate ) ; SHOW ( rc_uncompress_,0
154,<S2SV_ModStart> ; } } if ( ( attr -> psvi == xsltXSLTAttrMarker ) && ( attr -> psvi == xsltXSLTAttrMarker ) && ( attr -> psvi == xsltXSLTAttrMarker ) && ( attr -> psvi == xsltXSLTAttrMarker ) && ( attr -> psvi == xsltXSLTAttrMarker ) && ( attr -> psvi == xsltXSLTAttrMarker ) && ( attr -> psvi == xsltXSLTAttrMarker ) && ( attr -> psvi == xsltXSLTAttrMarker ) && ( attr -> psvi == xsltXSLTAttrMarker ) && ( attr -> psvi == xsltXSLTAttrMarker ) && ( attr -> psvi == xsltXSLTAttrMarker ) && ( attr -> psvi == xsltXSLTAttrMarker ) && ( ( attr -> psvi == xsltXSLTAttrMarker ) && ( attr -> psvi == xsltXSLTAttrMarker ) && ( attr -> psvi == xsltXSLTAttrMarker ) && ( attr -> psvi == xsltXSLTAttrMarker ) && ( attr -> psvi == xsltXSLTAttrMarker ) && ( attr -> psvi == xsltXSLTAttrMarker ) && ( ( attr -> psvi == xsltXSLTAttrMarker ),0
155,"<S2SV_ModStart> { if ( safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> { if ( safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> { if ( safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ) ; } safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ) ; } safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ) ; } safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ) ; } safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ) ; } safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ) ; } safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ) ; } safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ) ; } safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ) ; } safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ) ; }",0
156,<S2SV_ModStart> ix_tab_size ) { <S2SV_ModEnd> bzero ( msixcap,0
157,"<S2SV_ModStart>! js_regexec ( J,",0
158,"<S2SV_ModStart> : if (! Int_val <S2SV_ModEnd> ( Field ( <S2SV_ModStart> value ) dest ) ) { if (! Int_val ( Field ( ( value ) dest, 1 ) ) ) { caml_set_oo_id ( ( value ) dest ) ; } sp -- ; break ; case OShift : * dest += sp -> arg ; sp -- ; break ; case OReadItems : sp -> dest ++ ; if ( -- ( sp -> arg ) == 0 ) sp -- ; break ; case OReadItems : sp -> dest ++ ; if ( -- ( sp -> arg ) == 0 ) sp -- ; break ; case OReadItems : if ( -- ( sp -> arg ) == 0 ) sp -- ; if ( -- ( sp -> arg ) == 0 ) sp -- ; code = read8u ( ) ; if ( code >= PREFIX_SMALL_BLOCK ) { if ( code >= PREFIX_SMALL_BLOCK ) { if ( code >= PREFIX_SMALL_BLOCK ) { if ( code >= PREFIX_SMALL_BLOCK ) { if ( code >= PREFIX_SMALL_BLOCK ) { if ( code >= PREFIX_SMALL_BLOCK ) { if ( code >= PREFIX_SMALL_BLOCK ) { if ( code >= PREFIX_SMALL_BLOCK",0
159,"<S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; ksz8851WriteReg <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; isr <S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( isr & ISR_LCIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ier &= ~ IER_LCIE <S2SV_ModEnd> ; interface -> <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_TXIS <S2SV_ModEnd> ) ; n <S2SV_ModStart> ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ier &= ~ IER_RXIE <S2SV_ModEnd> ; interface -> <S2SV_ModStart> ( interface, KSZ8851_IER, KSZ8851_IER <S2SV_ModEnd> ) ; return",0
160,"<S2SV_ModStart> void encode_quantization ( vpx_write_bit_buffer <S2SV_ModEnd> * cm, <S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
161,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> ]. fd ),0
162,<S2SV_ModStart> ; if ( <S2SV_ModEnd> data ) { <S2SV_ModStart> goto sslerr ; } if ( len == 0 ) { if ( <S2SV_ModEnd> data ) { <S2SV_ModStart> ) ) ; },0
163,<S2SV_ModStart> ( ) ; if ( t1_buf_array == NULL ) { t1_getline ( ) ; t1_getline ( ) ; },0
164,"<S2SV_ModStart> BLOCK_SIZE bsize, const <S2SV_ModStart> BLOCK_SIZE subsize ) { const int partition = partition_lookup [ bsl ] [ subsize ] ; const int partition = partition_lookup [ bsl ] [ subsize ] ; const int partition = partition [ bsl ] [ subsize ] ; const int partition = partition [ partition ] [ partition ] [ partition ] [ partition ] <S2SV_ModStart> int bsl = partition <S2SV_ModEnd> [ bsl ] <S2SV_ModStart> / 4 ; partition = partition [ bsl ] [ subsize ] ; assert ( partition ) { case PART_NONE : set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; partition = partition [ partition ] [ partition ] [ partition ] [ partition ] [ partition ] ; partition = partition [ partition ] [ partition ] [ partition ] [ partition ] [ partition ] [ partition ] <S2SV_ModEnd> ; switch ( <S2SV_ModStart> case PART_VERT : <S2SV_ModEnd> set_modeinfo_in_sb ( cm <S2SV_ModStart> mi_cols ) { <S2SV_ModEnd> set_modeinfo_in_sb ( cm <S2SV_ModStart> ) -> mic ; } else { * ( xd -> mi [ 0 ] = get_block_context ( x, subsize ) -> mic ; partition = partition [ partition ] [ partition ] [",0
165,"<S2SV_ModStart> ; ret = key_read_key <S2SV_ModEnd> ( key_ref,",0
166,"<S2SV_ModStart> ps_dec_op ) ; if ( ps_dec -> u1_slice_in_pic == 0 ) { ret = ih264d_check_pic ( ps_dec, u4_max_ofst, u4_length, & ps_dec_op ) ; if ( ret!= IVD_OK ) { return ret ; } }",0
167,<S2SV_ModStart> = tnum_is_const ( insn -> code == BPF_ALU64 <S2SV_ModEnd> ) ; switch,0
168,<S2SV_ModStart> = true ; <S2SV_ModEnd> cfile = filp <S2SV_ModStart> = fileHandle ; <S2SV_ModEnd> cfile = filp,0
169,<S2SV_ModStart> = sk ; rcu_read_lock ( ) ; <S2SV_ModStart> ) ) ; rcu_read_unlock ( ) ;,0
170,"<S2SV_ModStart> svc_ctx ) { SvcInternal_t <S2SV_ModEnd> number_of_frames, number_of_keyframes <S2SV_ModStart> double y_scale ; SvcInternal_t <S2SV_ModEnd> * const si <S2SV_ModStart> svc_ctx ) ; <S2SV_ModEnd> svc_log ( svc_ctx <S2SV_ModStart> ""\\n"" ) ; <S2SV_ModEnd> if ( svc_ctx <S2SV_ModStart> i ) { <S2SV_ModEnd> if ( svc_ctx <S2SV_ModStart> ; number_of_frames = get_n_frames_to_bytes ( si -> n_layers ) <S2SV_ModEnd> ; } svc_log",0
171,<S2SV_ModStart> = new_cols ; <S2SV_ModEnd> if ( new_cols,0
172,"<S2SV_ModStart> const char * literal_start, * literal_end, * * literal_end, * end_start, * end_start, * end_start, * end_start, * end_start, * end_start, * end_start, * end_start, * end_start, * end_start, * end_start, * end_start, * end_start, * end_start, * end_start, * end_start, * end_start, * end_start, * end_start, * end_start, * end_start, * end_start, * end_start, * end_start, * end_start, * end_start, * end_start, * end_start, * end_start, * end_start, * end_start, * end_start, * end_start, * end_start, * end_start, * end_start, * end_start, * end_start, * end_start, * end_start, * end_start, * end_start, * end_start, * end_start, * end_start, * end_start, * end_start,",0
173,"<S2SV_ModStart> ( ) ; <S2SV_ModEnd> dump_dir * dd <S2SV_ModStart> ( pd, g_settings_dump_location <S2SV_ModEnd> ) ; char",0
174,<S2SV_ModStart> ) ) { <S2SV_ModEnd> ptr -> frameBuffer <S2SV_ModStart> ) ) ; <S2SV_ModEnd> ptr -> frameBuffer <S2SV_ModStart> ) ) ; <S2SV_ModEnd> ptr -> frameBuffer <S2SV_ModStart> ) ) ; <S2SV_ModEnd> ptr -> frameBuffer <S2SV_ModStart> ) ) ; <S2SV_ModEnd> ptr -> frameBuffer <S2SV_ModStart> ) ) ; <S2SV_ModEnd> ptr -> frameBuffer <S2SV_ModStart> ) ) ; <S2SV_ModEnd> ptr -> frameBuffer <S2SV_ModStart> ) ) ; <S2SV_ModEnd> ptr -> frameBuffer <S2SV_ModStart> ) ) ; <S2SV_ModEnd> ptr -> frameBuffer <S2SV_ModStart> ) ) ; <S2SV_ModEnd> ptr -> frameBuffer <S2SV_ModStart> ) ) ; <S2SV_ModEnd> ptr -> frameBuffer <S2SV_ModStart> ) ) ; <S2SV_ModEnd> ptr -> frameBuffer <S2SV_ModStart> ) ) ; <S2SV_ModEnd> ptr -> frameBuffer <S2SV_ModStart> ) ) ; <S2SV_ModEnd> ptr -> frameBuffer <S2SV_ModStart> ) ) ; <S2SV_ModEnd> ptr -> frameBuffer <S2SV_ModStart> ) ) ; <S2SV_ModEnd> ptr -> frameBuffer <S2SV_ModStart> ) ) ; <S2SV_ModEnd> ptr -> frameBuffer <S2SV_ModStart> ) ) ; <S2SV_ModEnd> ptr -> frameBuffer <S2SV_ModStart> ) ) ; <S2SV_ModEnd> ptr -> frameBuffer,0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",0
176,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; this_mv",0
177,"<S2SV_ModStart> * cpi, TileDataEnc * tile_data, <S2SV_ModStart> * const tile_info, TileDataEnc * tile_data <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ( mi_col = tile_data -> mi_col_start <S2SV_ModEnd> ; mi_col < <S2SV_ModStart> ; mi_col < tile_data -> mi_col_end <S2SV_ModEnd> ; mi_col += <S2SV_ModStart> ; MODE_INFO * const <S2SV_ModStart> MODE_INFO * * const <S2SV_ModStart> ; BLOCK_SIZE bsize = cpi -> mb. pred_mv <S2SV_ModStart> case VAR_BASED_PARTITION : if ( cpi -> sf. partition_search_type!= VAR_BASED_PARTITION ) { <S2SV_ModStart> ( cpi, tile_data, mi_row, mi_col, BLOCK_64X64, 1, & dummy_rate, & dummy_dist ) ; } else { <S2SV_ModStart> ( cpi, tile_data, mi_row, mi_col, BLOCK_64X64, 1, & dummy_rate, & dummy_dist ) ; } <S2SV_ModEnd> break ; case <S2SV_ModStart> case VAR_BASED_PARTITION : if ( cpi -> sf. partition_search_type!= VAR_BASED_PARTITION ) { <S2SV_ModStart> ( cpi, tile_data, mi_row",0
178,"<S2SV_ModStart> u_int8_t state ; struct dccp_hdr * hdr ; <S2SV_ModStart> = 0 ; hdr = nf_ct_hdr_hdr ( ct, dh ) ; if ( hdr -> header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header. header",0
179,"<S2SV_ModStart> ip_options * opt, int flags <S2SV_ModStart> & 3 ) { <S2SV_ModStart> = IPOPT_END ; } <S2SV_ModStart> NULL ) ) { if ( flags & IPOPT_FLAG_SKIP ) { if (! ip_options_compile ( net, opt, NULL ) ) { kfree ( opt ) ; return - EINVAL ; } <S2SV_ModStart> EINVAL ; } }",0
180,"<S2SV_ModStart> ; if ( connection == NULL || strcmp ( connection, ""websocket"" ) == 0 ) { log_trace ( ""Connection <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> connection <S2SV_blank> or <S2SV_blank> the <S2SV_blank> connection <S2SV_blank> or <S2SV_blank> the <S2SV_blank> connection <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> or <S2SV_blank> the <S2SV_blank> connection"" ) ; ws_server_set_error ( svr, WS_CONNECTION_ERROR ) ; goto error ; } if (",0
181,"<S2SV_ModStart> * findalldevs_if ; int len = 0 ; <S2SV_ModStart> next ) { len <S2SV_ModEnd> ++ ; if <S2SV_ModStart> -> description ) len <S2SV_ModEnd> += strlen ( <S2SV_ModStart> -> name ) len <S2SV_ModEnd> += strlen ( <S2SV_ModStart> -> name ) len <S2SV_ModEnd> += sizeof ( <S2SV_ModStart> : # endif len <S2SV_ModEnd> += ( sizeof <S2SV_ModStart> ( struct rpcap_sockaddr * <S2SV_ModStart> ( sizeof ( struct rpcap_sockaddr <S2SV_ModEnd> ) * 4 <S2SV_ModStart> ; sendbufidx ++ ; len += sizeof ( struct rpcap_sockaddr ) <S2SV_ModStart> ; sendbufidx ++ ; len += sizeof ( struct rpcap_sockaddr ) <S2SV_ModStart> ; sendbufidx ++ ; len += sizeof ( struct rpcap_sockaddr ) <S2SV_ModStart> ; sendbufidx ++ ; len += sizeof ( struct rpcap_sockaddr ) <S2SV_ModStart> ; sendbufidx ++ ; len += sizeof ( struct rpcap_sockaddr ) <S2SV_ModStart> ; sendbufidx ++ ; len += sizeof ( struct rpcap_sockaddr ) <S2SV_ModStart> ; sendbufidx ++ ; len += sizeof ( struct rpcap_sockaddr ) ; if ( len + sizeof ( struct rpcap_sockaddr ) * 4 ) ; if ( len + sizeof ( struct rpcap_sockaddr ) > len ) { rpcapd_log ( LOGPRIO_ERROR, ""Send <S2SV_blank> to <S2SV_blank> client <S2SV_blank> failed: <S2SV_blank> %s""",0
182,"<S2SV_ModStart> ""basename"" ) ; <S2SV_ModEnd> dump_dir * dd <S2SV_ModStart> ( path, client_uid, DEFAULT_DUMP_DIR_MODE <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( path, client_uid <S2SV_ModEnd>, DEFAULT_DUMP_DIR_MODE )",0
183,<S2SV_ModStart> -> columns - 3 <S2SV_ModEnd> ) ; x <S2SV_ModStart> index ) ; q ++ ; p <S2SV_ModEnd> ++ ; },0
184,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
185,"<S2SV_ModStart> image ) ; if ( image -> num_images > 0 ) { ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; return ( DestroyImageList ( image ) ) ; }",0
186,"<S2SV_ModStart> ( vec, 2 <S2SV_ModEnd> ) ) ND_PRINT",0
187,"<S2SV_ModStart>! ptrace_has_cap ( task -> user_ns <S2SV_ModEnd>, mode )",0
188,<S2SV_ModStart>  maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t,0
189,"<S2SV_ModStart> = 1 ; ihevcd_parse_user_data_registered_itu_t_t <S2SV_ModEnd> ( ps_codec,",0
190,"<S2SV_ModStart> ; this_idx = sdma_get_first_id ( dd ) ; if ( this_idx < 0 ) { HFI1_CAP_CLEAR ( SDMA_AHG ) ; goto out ; } sdma_set_first_id ( dd, & sdma_first_id, <S2SV_ModEnd> dd -> sdma_first_id <S2SV_ModStart> dd -> sdma_first_id <S2SV_ModEnd> ) ; sdma_set_first_id",0
191,"<S2SV_ModStart> * name, my_off_t <S2SV_ModEnd> rep_quick ) { <S2SV_ModStart> { int got_error ; my_off_t i <S2SV_ModStart> { int got_error <S2SV_ModEnd> ; ulong rec_per_key_part <S2SV_ModStart> { if ( my_error <S2SV_ModEnd> ) { my_error <S2SV_ModStart> { if ( my_error <S2SV_ModEnd> ) { my_error <S2SV_ModStart> { my_error ( ""mi_repair_parallel: <S2SV_blank> cannot <S2SV_blank> verify <S2SV_blank> %s"", my_error <S2SV_ModEnd> ) ; }",0
192,<S2SV_ModStart> } pairs = palloc0 <S2SV_ModEnd> ( pcount *,0
193,"<S2SV_ModStart> val ) ; if (! <S2SV_ModStart>, val ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> command"", r -> name )",0
194,"<S2SV_ModStart> ) ; } if ( strlen ( qend ) > sizeof ( qend ) ) { return bad_request ( c, 400, __LINE__ ) ; }",0
195,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16 <S2SV_ModStart> ++ j ) out <S2SV_ModEnd> [ j *",0
196,<S2SV_ModStart> if (! flatpak_is_executable <S2SV_ModEnd> ( new_exec ) <S2SV_ModStart> if (! flatpak_is_executable <S2SV_ModEnd> ( new_exec ) <S2SV_ModStart> if (! flatpak_is_executable <S2SV_ModEnd> ( new_exec ) <S2SV_ModStart> if (! flatpak_is_executable <S2SV_ModEnd> ( new_exec ) <S2SV_ModStart> if (! flatpak_is_executable <S2SV_ModEnd> ( new_exec ) <S2SV_ModStart> if (! flatpak_is_executable <S2SV_ModEnd> ( new_exec ) <S2SV_ModStart> if (! flatpak_is_executable <S2SV_ModEnd> ( new_exec ) <S2SV_ModStart> if (! flatpak_is_executable <S2SV_ModEnd> ( new_exec ) <S2SV_ModStart> if (! flatpak_is_executable <S2SV_ModEnd> ( new_exec ) <S2SV_ModStart> if (! flatpak_is_executable <S2SV_ModEnd> ( new_exec ) <S2SV_ModStart> if (! flatpak_is_executable <S2SV_ModEnd> ( new_exec ) <S2SV_ModStart> if (! flatpak_is_executable <S2SV_ModEnd> ( new_exec ) <S2SV_ModStart> if (! flatpak_is_executable <S2SV_ModEnd> ( new_exec ) <S2SV_ModStart> if (! flatpak_is_executable <S2SV_ModEnd> ( new_exec ),0
197,"<S2SV_ModStart> '\\0' ) ; const <S2SV_ModStart> = osi_calloc ( strlen ( filename ) + 5 ) ; if (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } for ( const list_node_t * enode = list_begin ( section -> entries ) ; enode!= list_end ( section -> entries ) ; enode = list_next ( enode ) ) { const entry_t * entry = ( const entry_t * ) list_node ( enode ) ; fprintf ( fp, ""%s <S2SV_blank> = <S2SV_blank> %s\\n"", entry -> key, entry -> value ) ; } if ( list_next ( node )!= list_end ( config -> sections ) ) f",0
198,"<S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ;",0
199,"<S2SV_ModStart>, target, ctxt -> input <S2SV_ModEnd> ) ; ctxt",0
200,"<S2SV_ModStart> ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModEnd> ""%s"" ""\\r\\n"" ""\\r\\n"" ""%s""",0
201,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> ( src, <S2SV_ModEnd> dest, getuid <S2SV_ModStart> getgid ( ), getuid ( ), getgid ( ) <S2SV_ModStart> ; if ( safe_chown <S2SV_ModEnd> ( dest, <S2SV_ModStart> | S_IWUSR ) <S2SV_ModEnd> ) errExit (",0
202,<S2SV_ModStart> rc!= BFA_STATUS_OK && fcstats!= NULL,0
203,"<S2SV_ModStart> -> x = Max <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> y = Max <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> y = Max <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> z = Max <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> z = Max <S2SV_ModEnd> ( 1.0f,",0
204,<S2SV_ModStart> ; rec -> sasl_username <S2SV_ModEnd> = src -> <S2SV_ModStart> ; rec -> sasl_password <S2SV_ModEnd> = src ->,0
205,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
206,"<S2SV_ModStart> o, datao ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteCanonEntry ) )",0
207,"<S2SV_ModStart> ; if ( my_errno == EI_NOFOLLOW ) mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> an <S2SV_blank> invalid <S2SV_blank> index <S2SV_blank> definition. <S2SV_blank> No <S2SV_blank> file"", filename ) ; else if ( <S2SV_ModStart> ; if ( my_errno == EI_NOFOLLOW ) mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> an <S2SV_blank> invalid <S2SV_blank> index <S2SV_blank> definition. <S2SV_blank> No <S2SV_blank> file"", filename ) ; else if ( <S2SV_ModStart>, filename )!= 0 ) mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> an <S2SV_blank> invalid <S2SV_blank> index <S2SV_blank> definition. <S2SV_blank> No <S2SV_blank> file"", filename",0
208,<S2SV_ModStart> olen ) { size_t alloc = <S2SV_ModEnd> strlen ( string <S2SV_ModStart> string ) ) ; unsigned char in ; size_t alloc = <S2SV_ModEnd> ( length? <S2SV_ModStart> long hex ; <S2SV_ModEnd> while ( -- <S2SV_ModStart> hex ) ; alloc -= 2 ; } ns [ strindex ++ ] = in ; string ++ ; } ns [ strindex ++ ] = 0 ; } ns [ strindex ++ ] = 0 ; if (! ns [ strindex ] ) return NULL ; if (! ns [ strindex ] ) return NULL ; if (! ns [ strindex ] ) return NULL ; if (! ns [ strindex ] ) return NULL ; if (! ns [ strindex ] ) return NULL ; <S2SV_ModEnd> return ns ; <S2SV_ModStart> return ns ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
209,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
210,<S2SV_ModStart> ; def -> pdu_free_state_conf = usm_free_usmState_conf ; def ->,0
211,<S2SV_ModStart> NULL ; return sub -> nsub && sub -> sub [ 0 ]. ep == sub -> nsub && sub -> sub [ 0 ]. ep == sub -> nsub && sub -> sub [ 0 ]. ep == sub -> nsub && sub -> sub [ 0 ]. ep == sub -> nsub && sub -> sub [ 0 ]. ep == sub -> nsub && sub -> sub [ 0 ]. ep == sub -> nsub && sub -> sub [ 0 ]. ep == sub -> nsub && sub -> sub [ 0 ]. ep == sub -> nsub && sub -> sub [ 0 ]. ep == sub -> nsub && sub -> sub [ 0 ]. ep == sub -> nsub && sub -> sub [ 0 ]. ep == sub -> nsub && sub -> sub [ 0 ]. ep == sub -> nsub && sub -> sub [ 0 ]. ep == sub -> nsub && sub -> sub [ 0 ]. ep == sub -> nsub && sub -> sub [ 0 ]. ep == sub -> nsub && sub [ 0 ]. ep == sub -> nsub && sub [ 0 ]. ep == sub -> nsub && sub [ 0 ]. ep == sub -> nsub,0
212,"<S2SV_ModStart> idx ] ; if ( action == MODE_SET_RESERVE1 ) { if ( var_val_type == ASN_INTEGER ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> type <S2SV_blank>!= <S2SV_blank> int\\n"" ) ; return SNMP_ERR_WRONGTYPE ; } idx = * ( ( long * ) var_val ) ; if ( idx!= 1 ) { snmp_log ( LOG_ERR, ""No <S2SV_blank> command <S2SV_blank> to <S2SV_blank> run\\n"" ) ; return SNMP_ERR_GENERR ; } return SNMP_ERR_NOERROR ; case MODE_SET_RESERVE1 : if ( var_val_type!= ASN_INTEGER ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; } idx = * ( ( long * ) var_val ) ; if ( idx!= 1 ) { snmp_log ( LOG_ERR, ""No <S2SV_blank> command <S2SV_blank> to <S2SV_blank> run\\n"" ) ; return SNMP_ERR_GENERR ; } return SNMP_ERR_NOERROR ; case MODE_SET_RESERVE1 : if (! exten -> efix_entry ) { snmp_log ( LOG_ERR",0
213,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> ) > 0 ) && ( i < ( ssize_t ) number_pixels ),0
214,"<S2SV_ModStart> timer ) ; list_for_each_entry_safe ( slave, tmp, & timeri -> slave_list_head, open_list ) { spin_lock_irq ( & slave_active_lock ) ; list_move_tail ( & timer -> open_list, & snd_timer_slave_list ) ; slave -> master = NULL ; spin_unlock_irq ( & slave_active_lock ) ; } <S2SV_ModStart> open_list ) { <S2SV_ModEnd> spin_unlock_irq ( & <S2SV_ModStart> slave_active_lock ) ; <S2SV_ModEnd> mutex_unlock ( &",0
215,<S2SV_ModStart> -> u1_dpb_commands_read ) { <S2SV_ModStart> ( ps_dec ) ; } else { ps_dec -> u4_bitoffset = 0,0
216,<S2SV_ModStart> = gifFilePtr -> ImageCount <S2SV_ModEnd> ; int_fast32_t heightOverflow <S2SV_ModStart> = gifFilePtr -> ImageCount <S2SV_ModEnd> * gifFilePtr -> <S2SV_ModStart> = gifFilePtr -> ImageCount <S2SV_ModEnd> ; if (,0
217,<S2SV_ModStart> NULL ) ||! conn -> validator -> passwd. buf ) { ldap_msgfree ( message ) ; return ret_error ; } if ( <S2SV_ModStart> -> user ) || <S2SV_ModEnd> cherokee_buffer_cnt_cspn ( &,0
218,"<S2SV_ModStart> bus ] ; if ( bi == NULL ) { pr_err ( ""%s: <S2SV_blank> pci <S2SV_blank> [%s] <S2SV_blank> has <S2SV_blank> invalid <S2SV_blank> bus <S2SV_blank> [%d]\\n"", __func__, dev -> name, dev -> bus ) ; return ; } <S2SV_ModEnd> si = &",0
219,"<S2SV_ModStart>, timeo ) <S2SV_ModEnd> ; if (",1
220,<S2SV_ModStart> ( s += 9U <S2SV_ModEnd> ; isspace ( <S2SV_ModStart> ; isspace ( ( unsigned char ) <S2SV_ModStart>! isspace ( ( unsigned char ),0
221,"<S2SV_ModStart> ; result = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL, NULL ) ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> NULL ) ; }",0
222,"<S2SV_ModStart> msixcap msixcap ; if ( msgnum >= 1 || msgnum <= MAX_MSIX_TABLE_ENTRIES ) { pr_err ( ""%s: <S2SV_blank> No <S2SV_blank> MSIX <S2SV_blank> table <S2SV_blank> entries\\n"", __func__ ) ; return - EINVAL ; } <S2SV_ModEnd> tab_size = msgnum",0
223,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",1
224,<S2SV_ModStart> == NULL ) { ASN1_INTEGER_free ( is -> serial ) ; <S2SV_ModStart> goto cleanup ; },0
225,<S2SV_ModStart> <S2SV_null> <S2SV_null> static const VP9EncoderConfig * <S2SV_ModEnd> select_tx_mode ( const <S2SV_ModStart> oxcf. lossless || cpi -> oxcf. lossless || cpi -> oxcf. lossless || cpi -> oxcf. lossless || cpi -> oxcf. lossless || cpi -> oxcf. lossless || cpi -> oxcf. lossless || cpi -> oxcf. lossless || cpi -> oxcf. lossless || cpi -> oxcf. lossless || cpi -> oxcf. lossless || cpi -> oxcf. lossless || cpi -> oxcf. lossless || cpi -> oxcf. lossless || cpi -> oxcf. lossless || cpi -> oxcf. lossless || cpi -> oxcf. lossless || cpi -> oxcf. lossless || cpi -> oxcf. lossless || cpi -> oxcf. lossless || cpi -> oxcf. lossless || cpi -> oxcf. lossless || cpi -> oxcf. lossless || cpi -> oxcf. lossless || cpi -> oxcf. lossless || cpi -> oxcf. tx_size_search_method == USE_LARGESTALL || cpi -> tx_size_,0
226,<S2SV_ModStart> ) ) { if ( im -> gdes_c + i > im -> gdes_c + i ) { <S2SV_ModStart> ) ; } },0
227,<S2SV_ModStart> ; if ( buf2 -> size > buf2 -> size ) { return 0 ; } if (,0
228,<S2SV_ModStart> NULL ; size_t sz ; if ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; <S2SV_ModStart> + size ; <S2SV_ModEnd> if ( (,0
229,<S2SV_ModStart> ; if ( protocol < 0 || protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,0
230,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
231,<S2SV_ModStart> ; r = sd_event_add_io_event <S2SV_ModEnd> ( b ->,0
232,<S2SV_ModStart> ( ) ; errors += test_string_formatting ( ) ;,0
233,<S2SV_ModStart> -> lun ) sas_eh_defer_cmd <S2SV_ModEnd> ( cmd ),0
234,"<S2SV_ModStart>, end_col_offset ; int num_funcdef_body ; <S2SV_ModStart> 2 ; } num_funcdef_body = get_next_funcdef ( c, CHILD ( n, name_i ), & num_funcdef_body ) ; if (! num_funcdef_body ) return NULL ; <S2SV_ModStart> ( is_async ) { <S2SV_ModStart> ) ; } } else { num_funcdef_body = get_next_funcdef ( c, CHILD ( n, name_i ), num_funcdef_body ) ; }",0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,"<S2SV_ModStart> ) / 3 ) ThrowReaderException ( CorruptImageError, ""InvalidColormapIndex"" ) ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries",0
237,,1
238,<S2SV_ModStart> 0 ) ; if (! res ) return - ENOMEM ;,0
239,"<S2SV_ModStart> : if ( ( position > psf -> headend ) && ( position > psf -> headend ) && ( position > psf -> headend ) && ( position > psf -> headend ) && ( position > psf -> headend ) && ( position > psf -> headend ) && ( position > psf -> headend ) && ( position > psf -> headend ) ) { psf_fseek ( psf, position, whence ) ; return ; } <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> ; if ( ( position > psf -> headend ) && ( position > psf -> headend ) && ( position > psf -> headend ) ) { psf_fseek ( psf -> header + psf -> header + psf -> header + psf -> header + psf -> header + psf -> header + psf -> header + psf -> header + psf -> header + psf -> header + psf -> header + psf -> header + psf -> header + psf -> header + psf -> header + psf -> header + psf -> header + psf -> header + psf -> header + psf -> header + psf -> header + psf ->",0
240,<S2SV_ModStart> u4_ofst ) ; ps_cabac -> u4_ofst = 0 ;,0
241,<S2SV_ModStart> ; } } if ( line -> type == MD_LINE_FENCEDCODE && line -> type == MD_LINE_FENCEDCODE && line -> type == MD_LINE_FENCEDCODE && line -> type == MD_LINE_FENCEDCODE && line -> type == MD_LINE_FENCEDCODE && line -> type == MD_LINE_FENCEDCODE && line -> type == MD_LINE_FENCEDCODE && line -> type == MD_LINE_FENCEDCODE && line -> type == MD_LINE_FENCEDCODE && line -> type == MD_LINE_FENCEDCODE && line -> type == MD_LINE_FENCEDCODE && line -> type == MD_LINE_FENCEDCODE && line -> type == MD_LINE_FENCEDCODE && line -> type == MD_LINE_FENCEDCODE && line -> type == MD_LINE_FENCEDCODE && line -> type == MD_LINE_FENCEDCODE && line -> type == MD_LINE_FENCEDCODE && line -> type == MD_LINE_FENCEDCODE && line -> type == MD_LINE_FENCEDCODE && line -> type == MD_LINE_FENCEDCODE && line -> type == MD_LINE_,0
242,<S2SV_ModStart> perf_event_context * ctx ; struct task_struct * task ; struct task_struct * task ; if (! task ) return ; ctx <S2SV_ModStart> -> ctx ; task = task -> task ; <S2SV_ModStart>! task ) return ; task = task -> task ; task = task -> task ; goto retry ; } <S2SV_ModEnd> if ( event <S2SV_ModStart> event ) ; task = task ;,0
243,<S2SV_ModStart> -> post_proc_flag = <S2SV_ModEnd> ctx -> postproc_cfg <S2SV_ModStart>. noise_level ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
244,"<S2SV_ModStart> = 0 ; ND_TCHECK2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> msg4 = ( <S2SV_ModStart> ) ) ; ND_TCHECK2 ( * tptr, sizeof ( struct olsr_msg6 ) ) ;",0
245,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vpx_usec_timer_start ( & <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,1
246,"<S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" <S2SV_ModEnd> ) ; exit",0
247,<S2SV_ModStart> = ptr_hbe_txposer -> core_frame_length ; ptr_hbe_txposer -> <S2SV_ModStart> = ptr_hbe_txposer -> core_frame_length ; ptr_hbe_txposer -> <S2SV_ModStart> = ptr_hbe_txposer -> core_frame_length ; ptr_hbe_txposer -> <S2SV_ModStart> = ptr_hbe_txposer -> core_frame_length ; ptr_hbe_txposer -> <S2SV_ModStart> = ptr_hbe_txposer -> core_frame_length ; ptr_hbe_txposer -> <S2SV_ModStart> = ptr_hbe_txposer -> core_frame_length ; ptr_hbe_txposer -> <S2SV_ModStart> = ptr_hbe_txposer -> core_frame_length ; ptr_hbe_txposer -> <S2SV_ModStart> = ptr_hbe_txposer -> core_frame_length ; ptr_hbe_txposer -> <S2SV_ModStart> = ptr_hbe_txposer -> core_frame_length ; ptr_hbe_txposer -> <S2SV_ModStart> = ptr_hbe_txposer -> core_frame_length ; ptr_hbe_txposer -> <S2SV_ModStart> = ptr_hbe_txposer -> core_frame_,0
248,"<S2SV_ModStart> lua_module ) ; lua_provider_t * provider = lua_provider_new ( ) ; <S2SV_ModStart> prov_spec = parsed_require_line ; lua_setstack_depth ( L, provider ) <S2SV_ModStart> ; if ( provider && <S2SV_ModStart> ( L, provider <S2SV_ModEnd> -> nelts ) <S2SV_ModStart> ( L, provider <S2SV_ModEnd> -> nelts ) <S2SV_ModStart> ( L, provider <S2SV_ModEnd> -> nelts ) <S2SV_ModStart> ( L, provider <S2SV_ModEnd> -> nelts ) <S2SV_ModStart> ( L, provider <S2SV_ModEnd> -> nelts )",0
249,<S2SV_ModStart> image_info ) ; <S2SV_ModEnd> return ( (,0
250,<S2SV_ModStart> (! proto_end ||! url,0
251,"<S2SV_ModStart> fdt ) ; if (! fdt_off_dt_struct ( fdt ) ) return - FDT_ERR_BADSTRUCTURE ; <S2SV_ModStart> = nextoffset ; if (! fdt_off_dt_struct ( fdt ) ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart>, & len, path_len",0
252,<S2SV_ModStart> ( server. bgsavechildpid <S2SV_ModEnd> == - 1,0
253,"<S2SV_ModStart> = g_timeout_add_seconds ( 100 <S2SV_ModEnd>, ( GSourceFunc",0
254,<S2SV_ModStart> book -> dim && i < n,1
255,<S2SV_ModStart> action ) { ( void ) action ;,0
256,"<S2SV_ModStart> this_h ) { vp9_setup_scale_factors_for_frame ( sf, sf, sf, this_w, this_h, this_h, this_w, this_h, this_h, this_h, 0 <S2SV_ModEnd> ) ; } <S2SV_ModStart> 16 ) { vpx_setup_scale_factors_for_frame ( sf, sf, sf, sf, sf, sf_width, sf, sf_height, sf, sf_height, sf, sf_height, sf, sf_height, sf, sf_height, sf, sf_height, sf, sf_height, sf, sf_height, sf, sf_height, sf, sf_height, sf, sf_height, sf, sf_height, sf, sf_height, sf_height, sf_height, sf, sf_height, sf_height, sf_height, sf_height, sf_height, sf_height, sf_height, sf_height, sf_height, sf_height, sf_height, sf_height, sf_height, sf_height, sf_height, sf_height, sf_height, sf_height, sf_height, sf_",0
257,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX,0
258,<S2SV_ModStart> sk_protocol!= IPPROTO_UDP || sk -> sk_protocol!= IPPROTO_UDP,0
259,<S2SV_ModStart> unregister_pernet_subsys ( & sctp_net_ops <S2SV_ModEnd> ) ; sctp_v6_protosw_exit <S2SV_ModStart> ( ) ; sctp_v4_protosw_exit <S2SV_ModEnd> ( ) ;,0
260,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> index ) ; if ( stream -> psnr_total > MAX_PSNR_SAMPLE_SIZE ) { return - 1 ; },0
261,<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen (,1
262,"<S2SV_ModStart> ( ) ; <S2SV_ModEnd> ksz8851ReadReg ( interface <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_PHY1ILR <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_PHY1IHR <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851",0
263,"<S2SV_ModStart> skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
264,"<S2SV_ModStart> ; if ( fit_check_image_size <S2SV_ModEnd> ( fit, <S2SV_ModStart> ( fit, IMAGE_SIZE_INVAL <S2SV_ModEnd> ) ) { <S2SV_ModStart> { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> image <S2SV_blank> size!\\n"" <S2SV_ModEnd> ) ; bootstage_error",0
265,"<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> uinput_fd, UI_DEV_DESTROY )",1
266,<S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc ->,0
267,<S2SV_ModStart> ) if ( strcmp <S2SV_ModEnd> ( argv [ <S2SV_ModStart> ) if ( strcmp <S2SV_ModEnd> ( argv [,0
268,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
269,<S2SV_ModStart> ib ] ; <S2SV_ModEnd> dequant_ptr = d <S2SV_ModStart> ) ) ; <S2SV_ModEnd> dequant_ptr = d,0
270,"<S2SV_ModStart> FN_REFLEN ] ; my_snprintf <S2SV_ModEnd> ( buff, <S2SV_ModStart> ( buff ), sizeof ( buff ) - 1 ) ; buff [ sizeof ( buff ) - 1 ] = 0 ; my_free ( opt_basedir ) ; opt_basedir = my_strdup ( buff, MYF ( MY_FAE ) ) ; } if (! opt_no_defaults ) { printf ( ""# <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> basedir <S2SV_blank> = <S2SV_blank> %s\\n"", opt_basedir ) ; <S2SV_ModEnd> goto exit ;",0
271,"<S2SV_ModStart> decrypt_cb ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; return ( - 1 ) ; } if ( pbi -> dec_fb_ref [ INTRA_FRAME ] == 0 ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; return ( - 1 ) ; } if ( pbi -> dec_fb_ref [ INTRA_FRAME ] == 0 ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; return ( - 1 ) ; } if ( pbi -> dec_fb_ref [ INTRA_FRAME ] == 0 ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; return ( - 1 ) ; } if ( pbi -> dec_fb_ref [ INTRA_FRAME ] == 0 ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; return ( - 1 )",0
272,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
273,"<S2SV_ModStart> int * returnintra, int * skip_intra <S2SV_ModStart> = INT_MAX, * skip_intra = 0, <S2SV_ModStart>, best_rd_sse = 0, * skip_intra = 0 <S2SV_ModEnd> ; # endif <S2SV_ModStart> = INT_MAX ; memset <S2SV_ModEnd> ( mode_mv, <S2SV_ModStart> ; if ( unlikely (! skip_intra ) ) { if ( unlikely (! skip_intra ) ) { if (! skip_intra ) { memset ( mode_mv, 0, sizeof ( mode_mv ), 0, sizeof ( mode_mv ) ) ; } } if ( unlikely (! skip_intra ) ) { memset <S2SV_ModEnd> ( mode_mv, <S2SV_ModStart> ; if ( unlikely (! skip_intra ) ) { memset <S2SV_ModEnd> ( mode_mv, <S2SV_ModStart> ; if ( unlikely (! skip_intra ) ) { memset <S2SV_ModEnd> ( mode_mv, <S2SV_ModStart> ; if ( unlikely (! skip_intra ) ) { memset <S2SV_ModEnd> ( mode_mv, <S2SV_ModStart> ; if ( unlikely (! skip_intra ) ) { memset <S2SV_ModEnd> ( mode_mv, <S2SV_ModStart> ; if ( unlikely (! skip_intra ) ) { memset <S2SV_ModEnd> ( mode_mv, <S2SV_ModStart> ; if ( unlikely (! skip_intra ) ) { memset <S2SV_ModEnd> ( mode_mv,",0
274,<S2SV_ModStart> goto error ; if ( h -> size < 0 ) { h -> size = 0 ; goto error ; },0
275,"<S2SV_ModStart> ; UWORD8 u1_profile_idc = ih264d_get_bit_stream_id ( ps_dec, u1_level_idc ) ; UWORD16 <S2SV_ModEnd> i2_max_frm_num ; UWORD32",0
276,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vp_svc_parameters_t * ) <S2SV_ModEnd> ; cpi -> <S2SV_ModStart> ; cpi -> svc. spatial_layer_id <S2SV_ModEnd> = params -> <S2SV_ModStart> ; cpi -> svc. temporal_layer_id <S2SV_ModEnd> = params -> <S2SV_ModStart> ; cpi -> svc. temporal_layer_id <S2SV_ModEnd> = params -> <S2SV_ModStart> ; cpi -> lst_fb_idx <S2SV_ModEnd> = params -> <S2SV_ModStart> ; cpi -> gld_fb_idx <S2SV_ModEnd> = params -> <S2SV_ModStart> ; cpi -> gld_fb_idx <S2SV_ModEnd> = params -> <S2SV_ModStart> ; cpi -> alt_fb_idx <S2SV_ModEnd> = params -> <S2SV_ModStart> ; cpi -> alt_fb_idx <S2SV_ModEnd> = params -> <S2SV_ModStart> ; cpi -> alt_fb_idx <S2SV_ModEnd> = params -> <S2SV_ModStart> ; cpi -> alt_fb_idx <S2SV_ModEnd> = params -> <S2SV_ModStart> ; if ( vp9_set_size_literal <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> -> cpi, <S2SV_ModEnd> params -> width <S2SV_ModStart> params -> width, <S2SV_ModEnd> height )!=",0
277,"<S2SV_ModStart> { uint16 bitspersample = 0, samplesperpixel = 0 <S2SV_ModEnd> ; uint16 input_compression <S2SV_ModStart> ; uint16 input_compression = 0, input_photometric = 0 <S2SV_ModEnd> ; copyFunc cf <S2SV_ModStart> ; copyFunc cf = TIFF_BITSPERSAMPLE ; if ( samplesperpixel < 1 ) return FALSE <S2SV_ModStart> ; if ( samplesperpixel < 1 ) return FALSE ; if (",0
278,<S2SV_ModStart> a ) { char * pn ; char c ; int r ; struct stat st ; pn = a -> name ; if (! defined ( HAVE_LSTAT ) ) { <S2SV_ModStart> = '\\0' ; <S2SV_ModEnd> lstat ( a <S2SV_ModStart> ( r!= EACCES <S2SV_ModEnd> ) { if <S2SV_ModStart> ) ) { <S2SV_ModEnd> } else if <S2SV_ModStart> ) ) { <S2SV_ModEnd> pn [ 0 <S2SV_ModStart> ) ; } <S2SV_ModEnd> if (!,0
279,"<S2SV_ModStart> unsigned int link_count ; struct kernel_lb_addr loc ; struct indirectEntry * ie ; ie = ( struct indirectEntry * ) iinfo -> i_location ; if ( ie -> indirectICB. extLength && ( nbh = udf_read_ptagged ( inode -> i_sb, & loc, 0, & ident ) ) ) ) { if ( ident == TAG_IDENT_EFE ) { memcpy ( & iinfo -> i_location, & loc, sizeof ( struct kernel_lb_addr ) ) ; brelse ( bh ) ; make_bad_inode ( inode ) ; return ; } else if ( ident == TAG_IDENT_EFE ) { memcpy ( & iinfo -> i_location, & loc, sizeof ( struct kernel_lb_addr ) ) ; brelse ( bh ) ; brelse ( bh ) ; brelse ( bh ) ; brelse ( bh ) ; brelse ( bh ) ; } else { <S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ident <S2SV_ModStart> TAG_IDENT_EFE ) { <S2SV_ModEnd> memcpy ( & <S2SV_ModStart> i_ino ) ; <S2SV_ModEnd> free ( ei <S2SV_ModStart> i_ino ) ; <S2SV_ModEnd> free ( ei",0
280,"<S2SV_ModStart> get_uv_tx_size ( mbmi, block_size <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm <S2SV_ModStart> index ], <S2SV_ModEnd> filter_level, w",0
281,"<S2SV_ModStart> mq_ops ) { blk_queue_queue_wait ( q, flush_rq ) ; <S2SV_ModStart> flags ) ; <S2SV_ModEnd> } running =",0
282,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
283,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
284,<S2SV_ModStart> NULL || * replySize > sizeof ( effect_param_t ) || pReplyData == NULL || * replySize > <S2SV_ModEnd> ( int ),0
285,<S2SV_ModStart> ; cleanup : if ( ret [ j ] ) { k5free ( ret [ j ] ) ; goto cleanup ; },0
286,"<S2SV_ModStart> 0x02 ) ; if ( crgram_len > SC_MAX_APDU_BUFFER_SIZE ) { sc_log ( ctx, ""Invalid <S2SV_blank> length <S2SV_blank> of <S2SV_blank> bytes <S2SV_blank> for <S2SV_blank> app <S2SV_blank> decoder <S2SV_blank> data\\n"" ) ; return - EIO ; }",0
287,"<S2SV_ModStart> ) ) ; i40e_vsi_set_rss_size ( vsi, vsi -> back, vsi -> num_queue_pairs ) ; if ( ret ) { dev_err ( & pf -> pdev -> dev, ""Failed <S2SV_blank> to <S2SV_blank> setup <S2SV_blank> VLAN <S2SV_blank> buffer <S2SV_blank> for <S2SV_blank> macvlan <S2SV_blank> %d\\n"", vsi -> back ) ; return ret ; } ret = i40e_vsi_set_rss_size ( vsi, vsi -> back, vsi -> num_queue_pairs ) ; if ( ret ) { dev_err ( & pf -> pdev -> dev, ""Failed <S2SV_blank> to <S2SV_blank> setup <S2SV_blank> VLAN <S2SV_blank> buffer <S2SV_blank> for <S2SV_blank> macvlan <S2SV_blank> %d\\n"", vsi -> back ) ; return ret ; } ret = i40e_vsi_set_rss_size ( vsi, vsi -> back, vsi -> num_queue_pairs ) ; if ( ret ) { dev_err ( & pf -> pdev -> dev, ""Failed <S2SV_blank> to <S2SV_blank> setup <S2SV_blank> VLAN <S2SV_blank> buffer <S2SV_blank> for <S2SV_blank> macvlan <S2SV_blank> %d\\n"", vsi -> back ) ; return ret ; } ret = i40e_vsi_set_rss_",0
288,"<S2SV_ModStart> ; } } eprintf ( ""VCont;c;s"" ) ;",0
289,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
290,<S2SV_ModStart> -> corrupted ; if ( xd -> cur_frame_size < 4 ) { if ( xd -> cur_frame_size < 4 ) { if ( xd -> cur_frame_size < 4 ) { if ( xd -> cur_frame_size < 4 ) { if ( xd -> cur_frame_size < 4 ) { if ( xd -> cur_frame_size < 4 ) { if ( xd -> cur_frame_size < 4 ) { if ( xd -> cur_frame_size < 4 ) { if ( xd -> cur_frame_size < 4 ) { if ( xd -> cur_frame_size < 4 ) { if ( xd -> cur_frame_size < 4 ) { if ( xd -> cur_frame_size < 4 ) { if ( xd -> cur_frame_size < 4 ) { if ( xd -> cur_frame_size < 4 ) { if ( xd -> cur_frame_size < 4 ) { if ( xd -> cur_frame_size < 4 ) { if ( xd -> cur_frame_size < 4 ) { if ( xd -> cur_frame_size < 4 ) { if ( xd -> cur_frame_size < 4 ) { if ( xd,0
291,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { image = DestroyImageList ( image ) ; return ( DestroyImageList ( image ) ) ; }",0
292,"<S2SV_ModStart> len ) { <S2SV_ModEnd> if ( len <S2SV_ModStart> * end ; if ( len > SIZE_MAX / 6 ) { return NULL ; } <S2SV_ModStart> & 0x80 ) strcpy ( p, ""u005c"" ) ; <S2SV_ModEnd> } if ( <S2SV_ModStart> - buf <= ( size_t ) <S2SV_ModStart> 10 ; } <S2SV_ModEnd> Py_DECREF ( w",0
293,<S2SV_ModStart> struct stat stb <S2SV_ModEnd> ; BUF * <S2SV_ModStart> long ull ; <S2SV_ModEnd> BUFSIZE * bp <S2SV_ModStart> long ull ; <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if (!,0
294,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
295,"<S2SV_ModStart> ; if ( vp8_yv12_alloc_frame_buffer ( & oci -> temp_scale_frame, width, height, VP8BORDERINPIXELS ) < 0 ) goto alloc_fail ; if (",0
296,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
297,<S2SV_ModStart> 0 ; } if ( u1_is_idr_slice && ( u1_is_idr_slice && ( u1_is_idr_slice && ( u1_is_idr_slice && ( u1_is_idr_slice && ( u1_is_idr_slice ) ) ) ) ) { ih264d_err_pic_dispbuf_mgr ( ps_dec ) ; return 0 ; },0
298,<S2SV_ModStart> -> buffers [ 0 <S2SV_ModEnd> ] ) vterm_allocator_free,0
299,"<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & delay )",1
300,"<S2SV_ModStart>, one, offset, <S2SV_ModStart>, offset, pixel_info_length ; size_t offset ; size_t offset ; if ( image -> rows > MagickMax ( number_pixels, number_pixels ) ) { ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; } <S2SV_ModStart> -> rows * offset <S2SV_ModEnd> ; pixel_info =",0
301,<S2SV_ModStart> value ) { char * name = <S2SV_ModEnd> stok ( sclone <S2SV_ModStart> ( value ) ; if ( name ) { name = <S2SV_ModEnd> stok ( sclone <S2SV_ModStart> ) ) ; },0
302,"<S2SV_ModStart>. cmp = key_cmp ( type, type ) <S2SV_ModEnd>,. match_data",0
303,<S2SV_ModStart> ||! job_id ||! obj_id ||! obj_id ||! obj_id ||! obj_id ||! obj_id ||! obj_id ||! obj_id ||! obj_id ||! obj_id ||! obj_id ||! obj_id ||! obj_id ||! obj_id ||! obj_id ||! obj_id ||! obj_id ||! obj_id ||! obj_id ||! obj_id ||! obj_id ||! obj_id ||! obj_id ||! obj_id ||! obj_id ||! obj_id ||! obj_id ||! obj_id ||! obj_id ||! obj_id ||! obj_id ||! obj_id ||! obj_id ||! obj_id ||! obj_id ||! obj_id ||! obj_id ||! obj_id ||! obj_id ||! obj_id ||! obj_id ||! obj_id ||! obj_id ||! obj_id ||! obj_id ||! obj_id ||! obj_id ||! obj_id ||! obj_id ||! obj_id ||! obj,0
304,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
305,"<S2SV_ModStart> PyObject * res <S2SV_ModEnd> ; PyObject * <S2SV_ModStart>, & PyId___dict__ ) ; if (! dict ) return NULL ; res = _BuildValue ( ""O()O"", Py_TYPE ( self ), dict",0
306,"<S2SV_ModStart> ) & desc, sizeof ( * desc )",1
307,"<S2SV_ModStart> -> private_data ; u32 <S2SV_ModEnd> flags = arg <S2SV_ModStart> ; case PERF_EVENT_IOC_PERIOD : return perf_event_period ( event, ( u64 __user * ) arg ) ; case PERF_EVENT_IOC_SET_OUTPUT : return perf_event_set_output ( event, arg ) ; case PERF_EVENT_IOC_SET_FILTER : return perf_event_set_filter ( event, ( void __user * ) arg ) ; case PERF_EVENT_IOC_SET_FILTER : return perf_event_set_filter ( event, ( void __user * ) arg ) ; case PERF_EVENT_IOC_SET_FILTER : return perf_event_set_filter ( event, func ) ; default : return - ENOTTY ; } if ( flags & PERF_IOC_FLAG_GROUP ) perf_event_for_each ( event, func ) { perf_event_for_each ( event, func ) { perf_event_for_each ( event, func ) { perf_event_for_each ( event, func ) { perf_event_for_each ( event, func ) { } return - ENOTTY ; } return - ENOTTY ;",0
308,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> * r, PREDICTION_MODE <S2SV_ModEnd> y_mode ) { <S2SV_ModStart> ) { const PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode",0
309,<S2SV_ModStart> ; if ( <S2SV_ModEnd> sha -> msg_bits <S2SV_ModStart> - EINVAL ) { if ( block_size > SHA256_BLOCK_SIZE ) { block_size = SHA256_BLOCK_SIZE ; } else { block_size = SHA256_BLOCK_SIZE ; } <S2SV_ModEnd> break ; default,0
310,"<S2SV_ModStart> iv ) ; if (! rb_check_key ( key, EVP_MAX_IV_LEN ) ) ossl_raise ( eCipherError, ""Key <S2SV_blank> must <S2SV_blank> be <S2SV_blank> an <S2SV_blank> invalid <S2SV_blank> IV <S2SV_blank> length"" ) ;",0
311,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
312,"<S2SV_ModStart> ) ) { if ( iframe -> state == NGHTTP2_IB_READ_FIRST_SETTINGS ) { rv = nghttp2_session_set_error_callback ( session, nghttp2_session_error_callback, nghttp2_session_error_callback, nghttp2_session_error_callback, nghttp2_session_error_callback, nghttp2_session_error_callback, nghttp2_session_error_callback, nghttp2_session_error_callback, nghttp2_session_error_callback, nghttp2_session_error_callback, nghttp2_session_error_callback, nghttp2_session_error_callback, nghttp2_session_error_callback, nghttp2_session_error_callback, nghttp2_session_error_callback, nghttp2_session_error_callback, nghttp2_session_error_callback, nghttp2_session_error_callback, nghttp2_session_error_callback, nghttp2_session_error_callback, nghttp2_session_error_callback, nghttp2_session_error_callback, nghttp2_session",0
313,<S2SV_ModStart> ) ; } x86_pmu. num_counters = 0 ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> x86_add_quirk ( intel_ds_init,0
314,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ] ; const vpx_extra_bit <S2SV_ModEnd> * const b <S2SV_ModStart> b = & vpx_extra_bits <S2SV_ModEnd> [ t ]",0
315,<S2SV_ModStart> ; struct vp9_write_bit_buffer * wb = NULL ; struct vpx_write_bit_buffer <S2SV_ModStart> ; struct vp9_write_bit_buffer * <S2SV_ModStart> = wb ; memcpy <S2SV_ModEnd> ( & wb <S2SV_ModStart> += uncompressed_hdr_size ; memcpy <S2SV_ModEnd> ( & saved_wb,0
316,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> dev_get_valid_name ( struct,0
317,"<S2SV_ModStart> struct ikev2_id id, * tmp <S2SV_ModStart> * typedata ; ND_TCHECK ( * ext ) ; tmp = ext ; <S2SV_ModStart> ( * ext ) ; ND_TCHECK ( * tmp ) ; tmp = ext ; if (! tmp ) return NULL ; ND_TCHECK ( * tmp ) ; tmp = ext <S2SV_ModStart> ( * ext ) ; if (! tmp ) return NULL ; ND_TCHECK ( * tmp ) ; tmp = tmp -> data <S2SV_ModStart> ( * ext ) ; if (! tmp ) return NULL ; ND_TCHECK ( * tmp <S2SV_ModStart> ( * ext ) ) ; if (! tmp ) return NULL ; if (! tmp ) return NULL <S2SV_ModStart> ( * ext ) ; if (! tmp ) return NULL ; if (! tmp ) return NULL <S2SV_ModStart> ( * ext ) ; if (! tmp ) return NULL ; if (! tmp ) return NULL <S2SV_ModStart> case ID_ASN1_ASN1_ASN1 : if (! tmp ) return NULL ; <S2SV_ModStart> case ID_ASN4_ASN1_ASN1_ASN1 : if (! tmp ) return NULL ; <S2SV_ModStart> case ID_ASN4_ASN1_ASN1_ASN1 : if (! tmp ) return NULL ;",0
318,"<S2SV_ModStart> -> width ; if ( jas_taginfo_nonull ( jas_taginfo_getval ( mif_tags, jas_tvparser_gettag ( tvp ) ) -> id ) ) { goto error ; }",0
319,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
320,"<S2SV_ModStart> fft_jmp ; WORD32 xh1_0, xh20_0, xh21_0, xl1_0, xh21_0, xl1_0, x_l2_0 ; WORD32 x_h2_0, x_h2_1 ; WORD32 si10, si10, si20, si30, co10, co10, co30 ; WORD64 mul_1, mul_2, mul_4, mul_4, mul_4, mul_5, mul_5, mul_10, mul_10, mul_12 ; WORD32 * x_h2_0, x_h2_1 ; WORD32 si10, si10, si20, si30, co10, co10, co10, co30 ; WORD64 mul_1, mul_2, mul_4, mul_4, mul_4, mul_5, mul_10, mul_10, mul_10, mul_12 ; WORD32 * x_h2_0, x_h2_1 ; WORD32 si10, si10, si30, co10, co10, co30 ; WORD64 mul",0
321,"<S2SV_ModStart> mntent ) { struct mount_entry * p = <S2SV_ModEnd> mntent -> mnt_dir <S2SV_ModStart> mntent -> mnt_dir ; if (! p ) return - ENODEV ; return p -> mount_entry_on_generic ( mntent, p -> mnt_dir",0
322,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
323,"<S2SV_ModStart> ( env ) ) ; rb_hash_aset ( env, server_port_val, req_server_port ( req ) ) ; rb_hash_aset ( env, server_port_val, req_server_port ( req ) ) ; rb_hash_aset ( env,",0
324,<S2SV_ModStart> endif int col_type <S2SV_ModEnd> ; MYSQL_BIND * <S2SV_ModStart> ; if ( <S2SV_ModEnd> imp_sth -> is_async <S2SV_ModStart> imp_sth -> is_async &&! <S2SV_ModEnd> imp_sth -> is_async <S2SV_ModStart> imp_sth -> is_async &&! <S2SV_ModEnd> imp_sth -> is_async <S2SV_ModStart> imp_sth -> is_async &&! <S2SV_ModEnd> imp_sth -> is_async <S2SV_ModStart> imp_sth -> is_async &&! <S2SV_ModEnd> imp_sth -> is_async <S2SV_ModStart> imp_sth -> is_async &&! <S2SV_ModEnd> imp_sth -> is_async <S2SV_ModStart> imp_sth -> is_async &&! <S2SV_ModEnd> imp_sth -> is_async <S2SV_ModStart> imp_sth -> is_async &&! <S2SV_ModEnd> imp_sth -> is_async <S2SV_ModStart> imp_sth -> is_async &&! <S2SV_ModEnd> imp_sth -> is_async <S2SV_ModStart> imp_sth -> is_async &&! <S2SV_ModEnd> imp_sth -> is_async <S2SV_ModStart> imp_sth -> is_async &&! <S2SV_ModEnd> imp_sth -> is_async <S2SV_ModStart> -> is_async &&! <S2SV_ModEnd> imp_sth -> is_async <S2SV_ModStart> -> is_async &&! <S2SV_ModEnd> imp_sth -> is_async <S2SV_ModStart> -> is_async &&! <S2SV_ModEnd> imp_sth -> is_async <S2SV_ModStart> -> is_async,0
325,"<S2SV_ModStart> need = 0, max_row <S2SV_ModStart> screen, { max_col = <S2SV_ModEnd> 4 ; } <S2SV_ModStart>, { need = max_col <S2SV_ModStart>, { need = max_col <S2SV_ModStart>, { need = max_col <S2SV_ModStart>, { need = max_col <S2SV_ModStart>, { need = max_col <S2SV_ModStart>, { need = max_col <S2SV_ModStart>, { need = max_col <S2SV_ModStart>, { need = max_col <S2SV_ModStart>, { need = max_col <S2SV_ModStart>, { need = max_col <S2SV_ModStart>, } } }",0
326,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> JsVarFloat <S2SV_ModEnd> ftoa_bounded_extra ( JsVarFloat <S2SV_ModStart> val ) ) JsVarFloat <S2SV_ModEnd> ( str, <S2SV_ModStart> < 0 ) JsVarFloat <S2SV_ModEnd> ( str, <S2SV_ModStart> len ) ; JsVarFloat <S2SV_ModEnd> ( str,",0
327,<S2SV_ModStart> ( unlikely ( crng_init <S2SV_ModEnd> == 0 ),0
328,"<S2SV_ModStart> LEX_ID ) { strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> len ) ; strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> LEX_STR ) { strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> len ) ; strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> len ) ; strncpy <S2SV_ModEnd> ( str,",0
329,,1
330,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
331,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
332,"<S2SV_ModStart>, s2, ( int )",0
333,"<S2SV_ModStart> { parse_global_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL, <S2SV_ModStart> ; parse_service_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL, <S2SV_ModStart> { parse_global_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL, <S2SV_ModStart> ; parse_service_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL,",0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,"<S2SV_ModStart> md -> packet_pbs ) ; if (! st -> st_v1_new_iv ) { libreswan_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> in <S2SV_blank> the <S2SV_blank> MD <S2SV_blank> packet"" ) ; return ; } if (! st -> st_v1_new_iv ) { libreswan_log ( ""discarding <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> in <S2SV_blank> the <S2SV_blank> MD <S2SV_blank> packet""",0
336,<S2SV_ModStart> = 0 ; if ( ps_dec -> u4_num_bytes_consumed > 0 ) { ps_dec -> u4_num_bytes_consumed = 0 ; },0
337,<S2SV_ModStart> <S2SV_null> <S2SV_null> static const <S2SV_ModStart> ) { return print_string_ptr <S2SV_ModEnd> ( item ->,0
338,"<S2SV_ModStart>. encode ( NULL <S2SV_ModEnd>, img, <S2SV_ModStart>. encode ( NULL <S2SV_ModEnd>, img,",0
339,<S2SV_ModStart> ) ; } <S2SV_ModEnd> when 10 : <S2SV_ModStart> ) ; } <S2SV_ModEnd> when 10 :,0
340,<S2SV_ModStart> ( i = 0 ; i < 8 ; i ++ ) s [ i ] = s [ i ] ; for ( i =,0
341,<S2SV_ModStart> ; if ( <S2SV_ModEnd> i -> posX <S2SV_ModStart> -> width ; <S2SV_ModEnd> i -> posX <S2SV_ModStart> -> height ; <S2SV_ModEnd> i -> posX <S2SV_ModStart> -> width ; <S2SV_ModEnd> i -> posX <S2SV_ModStart> -> height ; <S2SV_ModEnd> i -> posX <S2SV_ModStart> -> width ; <S2SV_ModEnd> i -> posX <S2SV_ModStart> -> height ; <S2SV_ModEnd> i -> posX <S2SV_ModStart> -> height ; <S2SV_ModEnd> i -> posX <S2SV_ModStart> -> width ; <S2SV_ModEnd> i -> posX <S2SV_ModStart> -> height ; <S2SV_ModEnd> i -> posX <S2SV_ModStart> -> height ; <S2SV_ModEnd> i -> posX <S2SV_ModStart> -> height ; <S2SV_ModEnd> i -> posX <S2SV_ModStart> -> height ; <S2SV_ModEnd> i -> posX <S2SV_ModStart> -> height ; <S2SV_ModEnd> i -> posX <S2SV_ModStart> -> height ; <S2SV_ModEnd> i -> posX <S2SV_ModStart> -> height ; <S2SV_ModEnd> i -> posX <S2SV_ModStart> -> height ; <S2SV_ModEnd> i -> posX <S2SV_ModStart> -> height ; <S2SV_ModEnd> i -> posX <S2SV_ModStart> -> height ; <S2SV_ModEnd> i -> posX <S2SV_ModStart> -> height ; <S2SV_ModEnd> i -> posX <S2SV_ModStart> -> height ; <S2SV_ModEnd> i -> posX <S2SV_ModStart> -> height ; <S2SV_ModEnd> i -> posX <S2SV_ModStart> -> height ; <S2SV_ModEnd> i -> posX <S2SV_ModStart> -> height ; <S2SV_ModEnd> i -> posX <S2SV_ModStart> -> height ; <S2SV_ModEnd> i -> posX <S2SV_ModStart> -> height ; <S2SV_ModEnd> i -> posX <S2SV_ModStart> -> height ; <S2SV_ModEnd> i -> posX <S2SV_ModStart> -> height ; <S2SV_ModEnd> i -> posX <S2SV_ModStart> ->,0
342,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
343,<S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; },0
344,"<S2SV_ModStart> ) ) { if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { psf_log ( psf, ""ERROR: <S2SV_blank> Cannot <S2SV_blank> write <S2SV_blank> bin <S2SV_blank> header <S2SV_blank> to <S2SV_blank> the <S2SV_blank> buffer <S2SV_blank> size <S2SV_blank> %d\\n"", psf -> rwf_endian ) ; return - 1 ; }",0
345,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; <S2SV_ModEnd> if ( sun_info <S2SV_ModStart> ""ImproperImageHeader"" ) ; <S2SV_ModEnd> if ( sun_info <S2SV_ModStart> ""ImproperImageHeader"" ) ; <S2SV_ModEnd> if ( sun_info <S2SV_ModStart> ""ImproperImageHeader"" ) ; <S2SV_ModEnd> if ( sun_info <S2SV_ModStart> ""ImproperImageHeader"" ) ; <S2SV_ModEnd> if ( sun_info <S2SV_ModStart> ""ImproperImageHeader"" ) ; <S2SV_ModEnd> if ( sun_info <S2SV_ModStart> ""ImproperImageHeader"" ) ; <S2SV_ModEnd> if ( sun_info <S2SV_ModStart> ""ImproperImageHeader"" ) ; <S2SV_ModEnd> if ( sun_info <S2SV_ModStart> ""ImproperImageHeader"" ) ; <S2SV_ModEnd> if ( sun_info <S2SV_ModStart> ""ImproperImageHeader"" ) ; <S2SV_ModEnd> if ( sun_info <S2SV_ModStart> ""ImproperImageHeader"" ) ; <S2SV_ModEnd> if ( sun_info <S2SV_ModStart> ""ImproperImageHeader"" ) ; <S2SV_ModEnd> if ( sun_info <S2SV_ModStart> ""ImproperImageHeader"" ) ; <S2SV_ModEnd> if ( sun_info <S2SV_ModStart> ""ImproperImageHeader"" ) ; <S2SV_ModEnd> if ( sun_info <S2SV_ModStart> ""ImproperImageHeader"" ) ; <S2SV_ModEnd> if ( sun_info <S2SV_ModStart> ""ImproperImageHeader"" ) ; <S2SV_ModEnd> if ( sun",0
346,"<S2SV_ModStart> 0 ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 600 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; return",0
347,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> BLOCK_8X8 : return vpx_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> BLOCK_16X8 : return vpx_mse16x8 <S2SV_ModEnd> ; case BLOCK_8X16 <S2SV_ModStart> BLOCK_8X16 : return vpx_mse8x16 <S2SV_ModEnd> ; default : <S2SV_ModStart> default : return vpx_mse16x16 <S2SV_ModEnd> ; } },1
348,"<S2SV_ModStart> ; if ( reqp -> dh_pubkey == NULL ) { if ( <S2SV_ModStart>, client_key, padata -> key_len, <S2SV_ModStart>, client_key, padata -> key_len, <S2SV_ModStart>, client_key, padata -> key_len, <S2SV_ModStart>, client_key, padata -> key_len, <S2SV_ModStart>, client_key, padata -> key_len, <S2SV_ModStart>, client_key, padata -> key_len,",0
349,<S2SV_ModStart> (! vb ||! vb -> vb. vb2_buf,0
350,<S2SV_ModStart> size ) { ASSERT_NO_SIZE_OVERFLOW ( size ) ;,1
351,<S2SV_ModStart> && rxent -> service. s_addr == sip && rxent -> service. s_addr == sip && rxent -> service. s_addr == sip && rxent -> service. s_addr == sip && <S2SV_ModEnd> rxent -> dport,0
352,<S2SV_ModStart> = bss_desc ; <S2SV_ModEnd> mwifiex_dbg ( adapter,0
353,<S2SV_ModStart> ( error ) { kmem_free ( sbuf ) ; <S2SV_ModStart> return error ; },1
354,"<S2SV_ModStart> struct l2cap_conf_rfc rfc ; struct l2cap_conf_rfc rfc ; rfc. mode = L2CAP_MODE_BASIC } ; void * ptr = req -> data ; BT_DBG ( ""sk <S2SV_blank> %p"", sk ) ; struct l2cap_conf_rfc rfc ; rfc <S2SV_ModStart> = L2CAP_MODE_ERTM ; <S2SV_ModEnd> break ; case <S2SV_ModStart> = L2CAP_DEFAULT_MAX_RECEIVE ; <S2SV_ModEnd> break ; case <S2SV_ModStart> = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO <S2SV_ModEnd> ) ; rfc <S2SV_ModStart> = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO <S2SV_ModEnd> ) ; rfc",0
355,"<S2SV_ModStart> do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, r, sizeof ( struct sock_fd ) <S2SV_ModEnd> ) ; while",0
356,<S2SV_ModStart> ps_dec_op ) ; <S2SV_ModEnd> i_status = OK_SLICE_NAL <S2SV_ModStart> ; } } if ( ps_dec -> u1_pic_decode_done!= 1 ) { return ERROR_INCOMPLETE_FRAME ; },0
357,<S2SV_ModStart> pair!= 0 && app -> formData!= NULL,0
358,"<S2SV_ModStart> * delegation, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> -> type & fmode <S2SV_ModEnd> )!= open_flags <S2SV_ModStart> -> stateid, fmode <S2SV_ModEnd> ) ; ret <S2SV_ModStart> ( state, fmode, fmode <S2SV_ModEnd> ) ; ret <S2SV_ModStart> ( state, fmode, fmode <S2SV_ModEnd> ) ; ret",0
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,"<S2SV_ModStart> * xd, const <S2SV_ModStart> int sse ; const int ref_rate = x -> plane [ i ] -> mbmi. ref_frame [ 0 ] ; <S2SV_ModStart> i ) { const <S2SV_ModStart> pd ) ; if (! cpi -> fn_ptr [ bs ]. vf ) { <S2SV_ModStart> = sse ; } <S2SV_ModStart> } else { const int rate ; int64_t dist ; vp9_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ bs ] >> 3, & rate, & dist ) ; rate_sum += dist ; dist = ( square_error * quantizer ) >> 8 ; rate_sum += dist ; dist = ( square_error * quantizer ) >> 8 ; dist = ( square_error * quantizer ) >> 8 ; rate_sum += dist ; dist = ( square_error * quantizer ) >> 8 ; rate_sum += dist ; dist = ( square_error * quantizer ) >> 8 ; rate_sum += dist ; dist = ( square_error * quantizer ) >> 8 ; rate_sum += dist ; dist = ( square_error * quantizer ) >> 8 ; rate_sum += dist ; dist = ( <S2SV_ModEnd> rate",0
361,<S2SV_ModStart> } if ( pmd_trans_huge <S2SV_ModEnd> ( pmd ),0
362,"<S2SV_ModStart> { if ( ptr == NULL ) return ( PAM_BUF_ERR ) ; if ( <S2SV_ModStart> * ret_username = calloc ( index + 1, sizeof ( username ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( <S2SV_ModStart> * ret_username = calloc ( index + 1, sizeof ( username ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username == NULL ) || ( * ret_username <S2SV_ModEnd> == NULL ) <S2SV_ModStart> PAM_BUF_ERR ) ; <S2SV_ModEnd> strcpy ( *",0
363,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> ( r, vpx_segment_tree <S2SV_ModEnd>, seg ->",0
364,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",0
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,<S2SV_ModStart> depth ++ ; if (! ndo -> data ) return ( NULL ) ;,0
367,"<S2SV_ModStart> ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n < ( length + 8 ) ) { return ERROR_FAILURE ; } n = ksz8851ReadReg ( interface, <S2SV_ModStart> ( interface, KSZ8851_RXQCR, RXQCR_SDA <S2SV_ModEnd> ) ; header <S2SV_ModStart> ( interface, KSZ8851_RXQCR, RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_TXQCR, TXQCR_METFE <S2SV_ModEnd> ) ; n",0
368,<S2SV_ModStart> ( ) ; mono_console_handle_async_ops ( ) ;,0
369,"<S2SV_ModStart> x_7 ; WORD32 x_8, x_9, x_8, x_9, x_8, x_8, x_9, x_8, x_8, x_9, x_8, x_8, x_9, x_8, x_8, x_9, x_8, x_8, x_9, x_8, x_8, x_8, x_9, x_8, x_8, x_9, x_8, x_8, x_9, x_8, x_8, x_8, x_8, x_9, x_8, x_8, x_9, x_8, x_8, x_9, x_8, x_8, x_8, x_9, x_8, x_8, x_8, x_8, x_8, x_9, x_8, x_8, x_8, x_9, x_8, x_8, x_8, x_8, x_8, x_8, x_8, x_8",0
370,<S2SV_ModStart> ( unlikely ( pmd_trans_huge_safe <S2SV_ModEnd> ( * pmd,0
371,"<S2SV_ModStart>, target_width, target_height ; int num_frames = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ""Incorrect <S2SV_blank> parameters:\\n"" ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( argv [ 2 ], & width, & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; return 1 ; } if (! parse_dim ( argv [ 3 ], & width, & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; return 1 ; } if (! parse_dim ( argv [ 3 ], & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 <S2SV_ModEnd> ] ) ; <S2SV_ModStart> ] ) ; return 1 ; } if (! parse_dim ( argv [ 3 ], & target_width, & target_height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; return 1 ; } if (! parse_dim ( argv [ 3 ], & target_width, & target_height ) ) {",0
372,"<S2SV_ModStart> num_fields ) { return add_attributes_to_string <S2SV_ModEnd> ( ( PyObject <S2SV_ModStart>, l ) <S2SV_ModEnd> ; } <S2SV_null>",0
373,<S2SV_ModStart> vpx_codec_alg_priv * priv <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> VPX_CODEC_MEM_ERROR ; } <S2SV_ModEnd> for ( i <S2SV_ModStart> ++ ) ; <S2SV_ModEnd> priv -> cx_data_sz,0
374,"<S2SV_ModStart> ++ ; } <S2SV_ModEnd> ret = s <S2SV_ModStart>, totfr ) ; if ( ret < 0 ) return ret",0
375,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx ->,0
376,<S2SV_ModStart> ; if (! udf_inode_entry_has_inode ( inode ) ) goto out ; if (,0
377,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0",1
378,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> bad_format_imginfo ( char <S2SV_ModStart> char * ptr, int len <S2SV_ModStart> n = 0 ; len = 0 <S2SV_ModStart> 'l' ) return true ; ptr ++ ; } return true <S2SV_ModEnd> ; } <S2SV_null>",0
379,"<S2SV_ModStart> ; UtRegisterTest ( ""DefragReverseSimpleTest"", DEFRAG_MODE_TEST ) ; UtRegisterTest (",0
380,<S2SV_ModStart> = object_length ; new_object. data = NULL ;,0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,<S2SV_ModStart> p_pic ) ; p_block = p_pic -> b_pic ;,0
384,"<S2SV_ModStart> mf, fname, mf",0
385,<S2SV_ModStart> 4 ) ; size_t <S2SV_ModEnd> num_properties = GETINT32 <S2SV_ModStart> ; j < <S2SV_ModEnd> a -> names,0
386,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
387,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; vpx_ref_frame_t * frame = NULL ; <S2SV_ModStart> * fb ; frame = ( vpx_ref_frame_t * ) data ; <S2SV_ModStart> -> pbi, frame <S2SV_ModEnd> -> idx,",0
388,<S2SV_ModStart> i + j + 1 <S2SV_ModStart> i + j + 1 <S2SV_ModStart> i + j + 1 <S2SV_ModStart> i + j + 1 <S2SV_ModStart> i + j + 1 <S2SV_ModStart> i + j + 1 <S2SV_ModStart> i + j + 1 <S2SV_ModStart> i + j + 1 <S2SV_ModStart> i + j + 1 <S2SV_ModStart> i + j + 1 <S2SV_ModStart> i + j + 1 <S2SV_ModStart> i + j + 1 <S2SV_ModStart> i + j + 1 <S2SV_ModStart> i + j + 1 <S2SV_ModStart> i + j + 1 <S2SV_ModStart> i + j + 1 <S2SV_ModStart> i + j + 1 <S2SV_ModStart> i + j + 1 <S2SV_ModStart> i + j + 1 <S2SV_ModStart> i + j + 1 <S2SV_ModStart> i + j + 1 <S2SV_ModStart> i + j + 1 <S2SV_ModStart> i + j + 1 <S2SV_ModStart> i + j + 1 <S2SV_ModStart> i + j + 1 <S2SV_ModStart> i + j + 1 <S2SV_ModStart> i + j + 1 <S2SV_ModStart> i + j + 1 <S2SV_ModStart> i + j + 1 <S2SV_ModStart> i + j + 1 <S2SV_ModStart> i + j + 1 <S2SV_ModStart> i + j + 1 <S2SV_ModStart> i + j + 1 <S2SV_ModStart> i + j + 1 <S2SV_ModStart> i + j + 1 <S2SV_ModStart> i + j + 1 <S2SV_ModStart> i + j + 1 <S2SV_ModStart> i + j + 1 <S2SV_ModStart> i + j + 1 <S2SV_ModStart> i + j + 1 <S2SV_ModStart> i + j + 1 <S2SV_ModStart> i + j + 1 <S2SV_ModStart> i,0
389,"<S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 1 ) ) == type_comment ) { expr_ty expr1, expr2 ; operator_ty newoperator ; node * ch = CHILD ( n, 0 ) ; expr1 = ast_for_testlist ( c, CHILD ( n, 0 ) ) ; expr1 = ast_for_testlist ( c, CHILD ( n, 0 ) ) ; expr1 = ast_for_testlist ( c, CHILD ( n, 0 ) ) ; expr1 = ast_for_testlist ( c, CHILD ( n, 0 ) ) ; expr1 = ast_for_testlist ( c, CHILD ( n, 0 ) ) ; expr1 = ast_for_testlist ( c, CHILD ( n, 0 ) ) ; expr1 = ast_for_testlist ( c, CHILD ( n, 0 ) ) ; expr1 = ast_for_testlist ( c, CHILD ( n, 0 ) ) ; expr1 = ast_for_testlist ( c, CHILD ( n, 0 ) ) ; expr1 = ast_for_testlist ( c, CHILD ( n, 0",0
390,"<S2SV_ModStart> int vp8_denoiser_filter_c ( <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * mc_running_avg_y, <S2SV_ModEnd> int avg_y_stride = <S2SV_ModStart> -> y_stride ; <S2SV_ModEnd> int sum_diff = <S2SV_ModStart> 0 ; int r, c, i ; int sum_diff = 0 ; int r, c, i ; int sum_diff = 0 ; int r ; for ( r = 0 ; r < 16 ; ++ r ) { for ( c = 0 ; c < 4 ; ++ c ) { int diff = mc_running_avg_y [ c ] ; if ( absdiff <= 3 ) { diff = adj_val [ 0 ] ; else if ( absdiff >= 4 && absdiff <= 8 ) adjustment = adj_val [ 1 ] ; else adjustment = adj_val [ 2 ] ; } else adjustment = adj_val [ 2 ] ; if ( diff > 0 ) { if ( ( sig [ c ] + adjustment ) > 255 ) running_avg_y [ c ] = 255 ; else running_avg_y [ c ] = 255 ; } else { if ( ( sig [ c ] + adjustment ) > 255 ) running_avg_y [ c ] = 255",0
391,<S2SV_ModStart> = NS_FALSE ; <S2SV_ModEnd> } } },0
392,<S2SV_ModStart> ret = 0 ; if ( ti -> xtregs_user. user. nr_user_cpus > XTENSA_MAX_USER_cpus ) return - EFAULT,0
393,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
394,<S2SV_ModStart> se_device * remote_dev ; struct se_dev * dev <S2SV_ModStart> = xop -> dev ; dev = xop -> dev ; if ( dev -> dev_group. cg_item == NULL ) return ; dev = xop -> dev ; if ( dev -> dev_group. cg_item == NULL ) return ; dev -> dev_group. cg_item = dev -> dev_group. cg_item ; if ( dev -> dev_group. cg_item == NULL ) return ; dev -> dev_group. cg_item = NULL ; dev -> dev_group. cg_item = NULL ; dev -> dev_group. cg_item = NULL ; dev -> dev_group. cg_item = NULL ; dev_group. cg_item = NULL ; dev_group. cg_item = NULL ; dev_group. cg_item = NULL ; dev_group. cg_item = NULL ; dev_group. cg_item = NULL ; dev_group. cg_item = NULL ; dev_group. cg_item = NULL ; dev_group. cg_item = NULL ; target_undepend_item ( & dev_group. cg_item <S2SV_ModEnd> ) ; target_undepend,0
395,"<S2SV_ModStart> ; if ( header == HDR ( header ) ) { ext2_xattr_cache_insert ( new_bh ) ; } else { ext2_fsblk_t goal = ext2_group_first_block_no ( sb, EXT2_GROUP_FIRST_BLOCK_NO ( sb, EXT2_I ( inode ) -> i_block_group ) ) ; int block = ext2_new_block ( inode, goal, & error ) ; if ( unlikely (! block ) ) { ext2_xattr_cache_insert ( new_bh ) ; goto cleanup ; } lock_buffer ( new_bh ) ; memcpy ( new_bh -> b_data, header, new_bh -> b_size ) ; set_buffer_uptodate ( new_bh ) ; unlock_buffer ( new_bh ) ; ext2_xattr_cache_insert ( new_bh ) ; ext2_xattr_cache_insert ( new_bh ) ; } else { ext2_xattr_cache_insert ( new_bh ) ; } <S2SV_ModEnd> } else { <S2SV_ModStart> new_bh ) ; <S2SV_ModEnd> ext2_xattr_cache_insert ( new_bh <S2SV_ModStart> new_bh ) ; <S2SV_ModEnd> ext2",0
396,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> if (! vpx_set_active_map <S2SV_ModEnd> ( ctx ->",0
397,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
398,"<S2SV_ModStart> header. size <S2SV_ModEnd>, 0 )",0
399,<S2SV_ModStart> char * ) AcquireQuantumMemory64 <S2SV_ModEnd> ( imsx * <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( n <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( n <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( n <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( n <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( n <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( n <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( n <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( n <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
400,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vp_ref_frame_t * ) ; ( void ) args",0
401,<S2SV_ModStart> } } } if ( u1_num_mbs < 0 ) { return ERROR_CORRUPT_SLICE ; } <S2SV_ModStart> u2_total_mbs_coded ; } if ( u1_num_mbs < 0 ) { return ERROR_CORRUPT_SLICE ;,0
402,"<S2SV_ModStart>, u4_y_offset ; <S2SV_ModEnd> UWORD8 * pu1_out_p <S2SV_ModStart> ; if ( ( <S2SV_ModStart> u4_frm_offset )!= ( <S2SV_ModStart> u4_frm_offset )!= ( <S2SV_ModStart> u4_frm_offset )!= ( <S2SV_ModStart> u4_frm_offset )!= ( <S2SV_ModStart> u4_frm_offset )!= ( <S2SV_ModStart> u4_frm_offset )!= ( <S2SV_ModStart> u4_frm_offset )!= ( <S2SV_ModStart> u4_frm_offset )!= ( <S2SV_ModStart> u4_frm_offset )!= ( <S2SV_ModStart> u4_frm_offset )!= ( <S2SV_ModStart> u4_frm_offset )!= ( <S2SV_ModStart> u4_frm_offset )!= ( <S2SV_ModStart> u4_frm_offset )!= ( <S2SV_ModStart> u4_frm_offset )!= ( <S2SV_ModStart> u4_frm_offset )!= ( <S2SV_ModStart> u4_frm_offset )!= ( <S2SV_ModStart> u4_frm_offset )!= ( <S2SV_ModStart> u4_frm_offset )!= ( <S2SV_ModStart> u4_frm_offset )!= ( <S2SV_ModStart> u4_frm_offset )!= ( <S2SV_ModStart> u4_frm_offset )!= ( <S2SV_ModStart> u4_frm_offset )!= ( <S2SV_ModStart> u4_frm_offset )!=",0
403,"<S2SV_ModStart> VP9_LAST_FLAG ) { YV12_BUFFER_CONFIG * const cfg = cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ]. buf ; if (! cm -> frame_bufs ) { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Invalid <S2SV_blank> reference <S2SV_blank> frame <S2SV_blank> dimensions"" ) ; } else { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Invalid <S2SV_blank> reference <S2SV_blank> frame"" ) ; } return cm -> error. error_code <S2SV_ModEnd> ; } <S2SV_null>",0
404,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
405,"<S2SV_ModStart> tx_size = plane <S2SV_ModEnd>? get_uv_tx_size ( <S2SV_ModStart> get_uv_tx_size ( mbmi, plane, plane, plane, plane, plane, plane, <S2SV_ModEnd> xd -> mb_to_right_edge <S2SV_ModStart> get_uv_tx_size ( mbmi, plane, plane, <S2SV_ModEnd> xd -> mb_to_bottom_edge <S2SV_ModStart> xd -> mb_to_bottom_edge, plane, <S2SV_ModEnd> xd -> mb_to_bottom_edge <S2SV_ModStart> xd -> mb_to_bottom_edge, plane, <S2SV_ModEnd> xd -> mb_to_bottom_edge <S2SV_ModStart> xd -> mb_to_bottom_edge, plane, <S2SV_ModEnd> xd -> mb_to_bottom_edge <S2SV_ModStart> xd -> mb_to_bottom_edge, plane, <S2SV_ModEnd>, arg ) <S2SV_ModStart> step ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
406,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 4 ) ; <S2SV_ModEnd> src += src_stride",0
407,"<S2SV_ModStart> { rowstoread = ( row + img -> row_offset ) % rowsperstrip ; nrow = ( row + img -> row_offset ) <S2SV_ModEnd> % rowsperstrip ; <S2SV_ModStart> -> row_offset ; if ( offset_row > ( row + img -> row_offset ) ) { TIFFErrorExt ( tif -> tif_clientdata, ""gtStripSeparate"" ) ; return ( 0 ) ; } <S2SV_ModStart> buf == NULL && <S2SV_ModEnd> _TIFFReadEncodedStripAndAllocBuffer ( tif <S2SV_ModStart>, bufsize, <S2SV_ModEnd> ( row + <S2SV_ModStart> img -> row_offset ) % rowsperstrip <S2SV_ModEnd> ) ; }",0
408,<S2SV_ModStart> ; } } <S2SV_ModEnd> return 0 ;,0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
410,<S2SV_ModStart> num & ( SWFInput_BITS_8 <S2SV_ModEnd> << ( number,0
411,"<S2SV_ModStart>, plane ) * ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) <S2SV_ModStart> { if ( vpx_img_plane_read <S2SV_ModEnd> ( buf, <S2SV_ModStart> ( buf, stride, file )!= ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) <S2SV_ModEnd> ) return 0",0
412,"<S2SV_ModStart> ; uint16_t attr_len = 0 <S2SV_ModStart> ; uint16_t orig_attr_len = 0 <S2SV_ModStart> -> length ) ; if ( avp -> length < sizeof ( struct l2tp_avp_t ) + 2 ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", avp -> length, avp -> length ) ; return - 1 ; } attr_len = avp -> length <S2SV_ModStart> } attr_len = ( int ) <S2SV_ModStart> -> length - ( int ) <S2SV_ModStart> -> length - ( int ) <S2SV_ModStart> -> length - ( int ) <S2SV_ModStart> -> length - ( int ) <S2SV_ModStart> -> length - ( int ) <S2SV_ModStart> -> length - ( int ) <S2SV_ModStart> -> length - ( int ) <S2SV_ModStart> -> length - ( int ) <S2SV_ModStart> -> length - ( int ) <S2SV_ModStart> -> length - ( int ) <S2SV_ModStart> -> length - ( int ) <S2SV_ModStart> -> length - ( int ) <S2SV_ModStart> -> length - ( int ) <S2SV_ModStart> -> length - ( int ) <S2SV_ModStart> -> length - ( int ) <S2SV_ModStart> -> length - ( int )",0
413,"<S2SV_ModStart> ) ) ; if ( actx -> aead == NULL ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_INVALID_MAC_SIZE ) ; return 0 ; }",0
414,"<S2SV_ModStart> size, 0, false",0
415,"<S2SV_ModStart> sock, sk ) ; memset ( sa, 0, sizeof ( struct sockaddr_rc )",0
416,"<S2SV_ModStart> MT_CPTYPE_PASSSALT ) { memcpy_safe <S2SV_ModEnd> ( pass_salt,",0
417,<S2SV_ModStart> MTT_ABORT ) { mutt_socket_empty ( adata -> conn ) ; mutt_socket_empty ( adata -> conn ) ; <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; return - 1 <S2SV_ModEnd> ; } <S2SV_null>,0
418,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
419,<S2SV_ModStart> ) ) { <S2SV_ModEnd> if (!,0
420,"<S2SV_ModStart>, & rlen, 0",1
421,<S2SV_ModStart> * slavename ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> = 0 ; read_userfile ( ) ; <S2SV_ModStart> 2 ) ; md5data [ 0 ] = 0 ;,0
422,"<S2SV_ModStart> ; if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart> { if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name,",0
423,<S2SV_ModStart> ( buf ) <S2SV_ModEnd> && str [,0
424,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
425,<S2SV_ModStart> credssp ) ; ( void ) instance ;,0
426,"<S2SV_ModStart> size_t s ; n -> entries [ tcount ]. tag = exif_get_short ( buf + o, o, o + o + o <S2SV_ModEnd>, 12 ) <S2SV_ModStart>, 12 ) ; n -> entries [ tcount ]. tag = exif_get_short ( buf + o, o + o, o + o + o <S2SV_ModEnd>, 12 ) <S2SV_ModStart>, 12 ) ; n -> entries [ tcount ]. tag = exif_get_short ( buf + o, o + o, o + o + o <S2SV_ModEnd>, 12 ) <S2SV_ModStart>, 12 ) ; n -> entries [ tcount ]. tag = exif_get_short ( buf + o, o + o, o + o + o <S2SV_ModEnd>, 12 )",0
427,<S2SV_ModStart> bd_addr ) { ( void ) bd_addr ;,0
428,<S2SV_ModStart> int i ; uint64 <S2SV_ModEnd> avail ; int <S2SV_ModStart> 4 ) ; avail = ( uint64 ) <S2SV_ModEnd> buf -> len <S2SV_ModStart> buf -> cursor ; avail = ( uint64 ) <S2SV_ModEnd> buf -> len <S2SV_ModStart> buf -> len <S2SV_ModEnd> ; expect =,0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. ptr <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
430,"<S2SV_ModStart> epoll_t * epoll ; oe_errno = 0 ; if (! epoll ) return OE_EINVAL ; if (! <S2SV_ModEnd> oe_syscall_write_ocall ( & <S2SV_ModStart>, count ) <S2SV_ModEnd> ) OE_RAISE_ERRNO ( <S2SV_ModStart> OE_EINVAL ) ; if ( ret > count ) { ret = OE_EINVAL ; OE_RAISE_ERRNO ( OE_EINVAL ) ; }",0
431,"<S2SV_ModStart> { errstr = parse_global_options_global ( CMD_INITIALIZE <S2SV_ModEnd>, NULL, <S2SV_ModStart> & new_service_options ) { if (! errstr ) s_log ( LOG_ERR, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; } else { if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option_service_option_global ( CMD_INITIALIZE, section_ptr, NULL, NULL, NULL ) ; if ( errstr ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_ERR, ""Inetd <S2SV_blank> mode: <S2SV_blank> %s"", errstr ) ; else s_log ( LOG_ERR, ""Inetd <S2SV_blank> mode: <S2SV_blank> %s"", errstr ) ; else s_log (",0
432,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_HASH_MAX : * ( size_t * ) val = ms -> elf_archive_hash ; return 0 ;,0
433,<S2SV_ModStart> offset ) { <S2SV_ModEnd> if ( offset,0
434,<S2SV_ModStart> + 1 ) ; if (! trak ) goto exit,0
435,"<S2SV_ModStart> 17 ] ; <S2SV_ModEnd> md5_state_t state ; <S2SV_ModStart> = 0 ; strncpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> password, 82, sizeof ( md5data ) <S2SV_ModStart> = '\\0' ; md5data [ 83 ] = '\\0' ; <S2SV_ModStart> ) md5data, sizeof ( md5data ) <S2SV_ModEnd> ) ; md5_finish",0
436,<S2SV_ModStart> ; if ( _mib_indexes <S2SV_ModEnd> ) { int,0
437,<S2SV_ModStart> ; if ( i + 1 < NCH ( n ) &&,0
438,"<S2SV_ModStart> ( ) ; g_hash_table_remove_all ( headers ) ; g_hash_table_remove_all ( headers ) ; g_hash_table_insert ( headers, g_strdup ( ""Cookie"" ), g_strdup ( ""CockpitAuth=v=2;k=blah"" ) ) ; if ( cockpit_auth_check_cookie ( test -> auth, ""/cockpit"", headers ) ) g_assert_not_reached ( ) ;",0
439,"<S2SV_ModStart> -> y_buffer ; memcpy <S2SV_ModEnd> ( dst, <S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst,",0
440,"<S2SV_ModStart> * cpi, TileDataEnc * tile_data, <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> MI_BLOCK_SIZE ) { <S2SV_ModEnd> int64_t dummy_dist ; <S2SV_ModStart> ; BLOCK_SIZE i, dummy_dist <S2SV_ModStart> ; } } memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> -> partition_search_type == VAR_BASED_PARTITION || cpi -> partition_search_type == VAR_BASED_PARTITION || cpi -> partition_search_type == VAR_BASED_PARTITION || cpi -> partition_search_type == VAR_BASED_PARTITION || cpi -> partition_search_type == VAR_BASED_PARTITION || cpi -> partition_search_type == VAR_BASED_PARTITION || cpi -> partition_search_type == VAR_BASED_PARTITION || cpi -> partition_search_type == VAR_BASED_PARTITION || cpi -> partition_search_type == VAR_BASED_PARTITION || cpi -> partition_search_type == VAR_BASED_PARTITION || cpi -> partition_search_type == VAR_BASED_PARTITION || cpi -> partition_search_type == VAR_BASED_PARTITION || cpi -> partition_search_",0
441,"<S2SV_ModStart> ; int hexdump, len <S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ;",0
442,"<S2SV_ModStart> mbmi, const MV <S2SV_ModEnd>  mvs [ <S2SV_ModStart> ref = & mvs <S2SV_ModEnd> -> ref_mvs [",0
443,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ),",0
444,"<S2SV_ModStart> entry ) ; skb_pull_rcsum ( skb_out, hdr_size ) ; <S2SV_ModStart> skb_out ) ; <S2SV_ModEnd> hlist_for_each_entry ( entry",0
445,"<S2SV_ModStart> ; netsnmp_mibindex_load ( false <S2SV_ModStart> entry ) { if (! <S2SV_ModStart>, NULL, false ) ) { SNMP_FREE ( env_var ) ; } <S2SV_ModEnd> entry = strtok_r",0
446,"<S2SV_ModStart> ++ ) { if ( uinput_dev_path [ x ] == NULL ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> ERROR: <S2SV_blank> uinput <S2SV_blank> device <S2SV_blank> open <S2SV_blank> failed"", __FUNCTION__ ) ; close ( fd ) ; return - 1 ; } <S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, sizeof ( * <S2SV_ModStart> ( dev ) ) <S2SV_ModStart> 1 ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_KEY ) ) <S2SV_ModStart> EV_REL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_SYN ) ) <S2SV_ModStart> x ++ ) TEMP_FAILURE_RETRY ( <S2SV_ModStart>, key_map [ x ]. mapped_id ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL ) )",0
447,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
448,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s,",0
449,"<S2SV_ModStart> iakerb_ctx_id_t * pctx, iakerb_ctx_id_t * k5 <S2SV_ModStart> = 0 ; * pctx = k5alloc ( sizeof ( * ctx ), & k5c ) ; if ( k5_is_null ( k5c ) ) { <S2SV_ModStart> ctx -> k5c, k5_free ) ; } <S2SV_ModEnd> if ( code",0
450,<S2SV_ModStart> = DirectClass ; image = ( Image * ) NULL ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> bitmapDC = CreateCompatibleDC,0
451,<S2SV_ModStart> ; while ( ( <S2SV_ModStart>!= START_CODE_PREFIX ) && ( ps_stream -> u4_offset < ps_stream -> u4_offset ) ),0
452,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { ret = <S2SV_ModEnd> - EINVAL ; <S2SV_ModStart> - EINVAL ; goto out ; } <S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { ret = <S2SV_ModEnd> - EINVAL ; <S2SV_ModStart> - EINVAL ; goto out ; }",0
453,<S2SV_ModStart> -> size ; if ( mono_loader_is_valid ( mono_loader_mode ) ) { <S2SV_ModStart> image ) ; },0
454,<S2SV_ModStart> ; int tmp ; if (! count ) return - EINVAL,0
455,"<S2SV_ModStart> { char * origin ; char * <S2SV_ModStart> ( ( ( <S2SV_ModEnd> name [ 1 <S2SV_ModStart> 1 ], ""ORIGIN"", 6 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 1 ], <S2SV_ModStart> ) || ( <S2SV_ModEnd> strncmp ( & <S2SV_ModStart> 2 ], ""PLATFORM}"", 8 ) == 0 && ( len = 9 )!= 0 ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( len = 9 )!= 0 ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( len = 9 )!= 0 ) ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( len = 9 )!= 0 ) ) ) ) ) && ( name [ 1 ] == '{' && ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( len = 9 )!= 0 ) ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( len = 9 )!= 0 ) ) ) ) { repl = ( ( len ==",0
456,"<S2SV_ModStart> ) H264SwDecMalloc ( decInst,",0
457,<S2SV_ModStart> drop ; } <S2SV_ModEnd> opt -> optlen <S2SV_ModStart> iph -> ihl <S2SV_ModEnd> ) { struct <S2SV_ModStart> return 0 ; <S2SV_ModEnd> opt -> optlen,0
458,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
459,<S2SV_ModStart> goto errout ; if ( info -> groupbook >= ci -> books ) goto errout ;,0
460,<S2SV_ModStart> krb5_key_data * key_data ; int len <S2SV_ModStart> == NULL ) { len = sizeof ( * key_data ) ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> ; i < len <S2SV_ModEnd> ; i ++,0
461,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
462,<S2SV_ModStart> ] ) ; if ( nByte < 0 || nByte > 0 ) { rc = SQLITE_NOMEM ; } else { <S2SV_ModStart> 1 ) ; },0
463,<S2SV_ModStart> filp ) { struct sock * sock = SOCKET_I ( inode ) ; <S2SV_ModStart> ( SOCKET_I ( sock <S2SV_ModEnd> ) ) ;,0
464,"<S2SV_ModStart> * orelse, string type_comment, <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. type_comment = type_comment",0
465,"<S2SV_ModStart> * info, my_off_t <S2SV_ModEnd> name ) { <S2SV_ModStart> ; my_off_t index_pos ; myf_assert ( param -> temp_file_datatmp -> flags & MYF ( 0 ) ) <S2SV_ModStart> goto err ; if ( param -> temp_file_datatmp -> flags & MYF ( 0 ) ) { if ( param -> temp_file_datatmp -> flags & MYF ( 0 ) ) { if ( param -> temp_file_datatmp -> flags & MYF ( 0 ) ) { myf_assert ( param -> temp_file_datatmp -> flags & MYF ( 0 ) ) ; } } else { myf_assert ( param -> temp_file_datatmp -> flags & MYF ( 0 ) ) ; } }",0
466,"<S2SV_ModStart> ""The <S2SV_blank> user <S2SV_blank> callback <S2SV_blank> failed <S2SV_blank> due <S2SV_blank> to <S2SV_blank> the <S2SV_blank> service <S2SV_blank> error"" ; case NGHTTP2_ERR_INVALID_TYPE : return ""Invalid <S2SV_blank> type <S2SV_blank> of <S2SV_blank> the <S2SV_blank> user <S2SV_blank> callback <S2SV_blank> type <S2SV_blank> of <S2SV_blank> the <S2SV_blank> service"" ; case",0
467,"<S2SV_ModStart> UINT error ; if ( Stream_Read_UINT16 <S2SV_ModEnd> ( s, <S2SV_ModStart>, eventId )!= Stream_Read_UINT32 <S2SV_ModEnd> ( s,",0
468,"<S2SV_ModStart> ) ; } if ( zsocket_set_maxmsgsize ( pData -> socket, - 1 )!= - 1 ) { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> omzmq3: <S2SV_blank> maxmsgsize <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> the <S2SV_blank> message"" ) ; zsocket_set_maxmsgsize ( pData -> socket, - 1 ) ; }",0
469,"<S2SV_ModStart> struct flowi6 fl6 ; IP6_ECN_flow_xmit ( sk, fl6. flowlabel ) <S2SV_ModStart> daddr ) ; IP6_ECN_flow_xmit ( sk, fl6. flowlabel ) ; <S2SV_ModStart> = 1 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
470,<S2SV_ModStart> ; END_OF_READING : DestroyQuantumInfo ( quantum_info ) ;,0
471,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nego_process_negotiation_failure ( rdpNego <S2SV_ModStart> UINT32 failureCode ; if (! WLog_Validate ( s ) ) { WLog_WARN ( TAG, ""Error: <S2SV_blank> Invalid <S2SV_blank> length <S2SV_blank> of <S2SV_blank> rdpNego <S2SV_blank> packet"" ) ; return FALSE ; } <S2SV_ModStart> = NEGO_STATE_FAIL ; return TRUE ;",0
472,"<S2SV_ModStart> ; int len = 0 <S2SV_ModStart> 8 ) ; * p_len = m_len ; m_len -- ; bn_rsh ( t, m, 8 * m_len ) ; <S2SV_ModStart> ) ) { <S2SV_ModEnd> * p_len = <S2SV_ModStart> 0 ] ; <S2SV_ModEnd> do { m_len <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> break ; case",0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,"<S2SV_ModStart> ( psf = psf_calloc ( <S2SV_ModEnd>, sizeof (",0
475,"<S2SV_ModStart> void fix_interp_filter ( const VP9_COMMON * const cm, const char * interp_filter, <S2SV_ModStart> i ] += cm -> counts -> switchable_interp [ j ] [ i ] ; c += ( count [ i ] > 0 ) ; } if ( cm -> interp_filter == SWITCHABLE ) { for ( i = 0 ; i < SWITCHABLE_FILTER_CONTEXTS ; ++ i ) { if ( cm -> interp_filter == SWITCHABLE ) { for ( i = 0 ; i < SWITCHABLE_FILTER_CONTEXTS ; ++ i ) count [ i ] += cm -> counts -> switchable_interp [ j ] [ i ] ; } } else { for ( i = 0 ; i < SWITCHABLE_FILTER_CONTEXTS ; ++ i ) count [ i ] += cm -> counts -> switchable_interp [ j ] [ i ] ; c += ( count [ i ] > 0 ) ; } } } } } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
476,"<S2SV_ModStart> & cpi -> td. <S2SV_ModStart> mi_cols ) ; vpx_setup_src_planes <S2SV_ModEnd> ( x, <S2SV_ModStart> ( x, get_ref_frame_buffer <S2SV_ModEnd> ( cpi, <S2SV_ModStart>, LAST_FRAME ) <S2SV_ModEnd>, 0, <S2SV_ModStart> ; xd -> td. <S2SV_ModStart> MAX_MB_PLANE ) ; vpx_memset <S2SV_ModEnd> ( xd ->",0
477,<S2SV_ModStart> hp ) ; htc -> request_body_body_body_body = http_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body_body,0
478,"<S2SV_ModStart> define EOFOp 0x07 char * <S2SV_ModEnd> Magick [ 12 <S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) return ( DestroyImageExtent ( image ) ) ; <S2SV_ModStart> -> rows = GetImageExtent ( image, image -> rows ) ; if ( status == MagickFalse ) return ( DestroyImageExtent ( image ) ) ; count = <S2SV_ModStart> -> rows = GetImageExtent ( image, image -> rows ) ; if ( count!= 2 ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( count!= 2 ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( count!= 2 ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( count!= 2 ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( count!= 2 ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( count!= 2 ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ( image, count <S2SV_ModEnd>, """,0
479,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( tETH_HDR ) ),0
480,<S2SV_ModStart> -> u2_pic_order_cnt_bottom ; ps_dec -> u2_pic_order_cnt_bottom = 0 ;,0
481,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> * karg ; <S2SV_ModEnd> int iocnum ; <S2SV_ModStart> ) ) ; kfree ( karg ) ; <S2SV_ModStart> ) ) ; kfree ( karg ) ; <S2SV_ModStart> ) ) ; kfree ( karg ) ; <S2SV_ModStart> ) ) ; kfree ( karg ) ; <S2SV_ModStart> ) ) ; kfree ( karg ) ; <S2SV_ModStart> ) ) ; kfree ( karg ) ; <S2SV_ModStart> ) ) ; kfree ( karg ) ; <S2SV_ModStart> ) ) ; kfree ( karg ) ; <S2SV_ModStart> ) ) ; kfree ( karg ) ; <S2SV_ModStart> ) ) ; kfree ( karg ) ; <S2SV_ModStart> ) ) ; kfree ( karg ) ; <S2SV_ModStart> ) ) ; kfree ( karg ) ;",0
482,<S2SV_ModStart> ) AcquireQuantumMemory ( ( unsigned char * ),0
483,"<S2SV_ModStart> } else { if ( argv [ 0 ] [ 1 ] == '-' ) { load_symset ( ""DECGraphics"", PRIMARY ) ; load_symset ( ""DECGraphics"", ROGUESET ) ; switch_symbols ( TRUE ) ; } else { <S2SV_ModStart> } else { if ( argv [ 0 ] [ 1 ] == '-' ) { load_symset ( ""DECGraphics"", PRIMARY ) ; load_symset ( ""Rogueset"", ROGUESET ) ; switch_symbols ( TRUE ) ; } else { <S2SV_ModStart> argv ) ; }",0
484,"<S2SV_ModStart> ; if ( datao < buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> order = EXIF_BYTE_ORDER_INTEL ; datao += exif_get_long ( buf + datao, EXIF_BYTE_ORDER_INTEL ) ; if ( datao + 2 < datao ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> order = EXIF_BYTE_ORDER_INTEL ; datao += exif_get_short ( buf + datao, EXIF_BYTE_ORDER_INTEL ) ; datao += 2 ; exif_mnote_data_fuji_clear ( n ) ; n -> entries = exif_mem_alloc ( en -> mem, sizeof ( MnoteDataFujiEntry ) * c ) ; n -> entries = exif_mem_alloc ( en -> mem, sizeof ( MnoteDataFujiEntry ) * c <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; if",0
485,"<S2SV_ModStart> ) L_WARNING ( ""image <S2SV_blank> %s <S2SV_blank> too <S2SV_blank> small; <S2SV_blank> using <S2SV_blank> min <S2SV_blank> value\\n"" <S2SV_ModEnd>, procName )",0
486,"<S2SV_ModStart> void ) { if (! s_check_port ( opt ) ) { s_log ( LOG_ERROR, ""Unbinding <S2SV_blank> service <S2SV_blank> [%s]"", opt -> servname ) ; return ; } <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> while ( opt <S2SV_ModStart> 0 ; } <S2SV_ModEnd> s_log ( LOG_DEBUG <S2SV_ModStart> servname ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
487,<S2SV_ModStart> void ) { recovery_started = false ;,0
488,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ;",0
489,"<S2SV_ModStart> ) break ; if ( image -> columns > image -> rows ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
490,"<S2SV_ModStart> { WORD32 i, j <S2SV_ModStart> ; for ( j = 0 ; j < MAX_DPB_SIZE ; j ++ ) { if ( j < MAX_DPB_SIZE ) { j = MIN ( j, j ) ; } else { j = MIN ( j, j ) ; } if ( j < MAX_DPB_SIZE ) { j = MIN ( j, j ) ; } if ( j < MAX_DPB_SIZE ) { j = MIN ( j, j ) ; } if ( j < MAX_DPB_SIZE ) { j = MIN ( j, j ) ; } } if ( j < MAX_DPB_SIZE ) { j = MIN ( j, j ) ; } if ( j < MAX_DPB_SIZE ) { j = MIN ( j, j ) ; } if ( j < MAX_DPB_SIZE ) { j = MIN ( j, j ) ; } if ( j < MAX_DPB_SIZE ) { j = MIN ( j, j ) ; } if ( j < MAX_DPB_SIZE ) { j = MIN ( j, j ) ; } if ( j < MAX_DPB_SIZE ) { j = MIN",0
491,"<S2SV_ModStart>, int fmt, char * * * out <S2SV_ModStart> child ) { ++ numentries ; <S2SV_ModStart> child ) { ++ numentries ; <S2SV_ModStart> child ) { ++ numentries ; <S2SV_ModStart> child ) { ++ numentries ; <S2SV_ModStart> child ) { ++ numentries ; <S2SV_ModStart> child ) { ++ numentries ; <S2SV_ModStart> child ) { ++ numentries ; <S2SV_ModStart> child ) { ++ numentries ; <S2SV_ModStart> child ) { ++ numentries ; <S2SV_ModStart> child ) { ++ numentries ; <S2SV_ModStart> child ) { ++ numentries ; <S2SV_ModStart> child ) { ++ numentries ; <S2SV_ModStart> child ) { ++ numentries ; <S2SV_ModStart> child ) { ++ numentries ; <S2SV_ModStart> child ) { ++ numentries ; <S2SV_ModStart> = 0 ; ++ j ; <S2SV_ModStart> = '\\t' ; ++ j ; <S2SV_ModStart> = '\\t' ; ++ j ; <S2SV_ModStart> = '\\t' ; ++ j ; <S2SV_ModStart> = '\\t' ; ++ j ; <S2SV_ModStart> = '\\t' ; ++ j ; <S2SV_ModStart> = '\\t' ; ++ j ; <S2SV_ModStart> = '\\t' ; ++ j ; <S2SV_ModStart> = '\\t' ; ++ j ; <S2SV_ModStart> = '\\t' ; ++ j ; <S2SV_ModStart> = '\\t' ; ++ j ; <S2SV_ModStart> = '\\t' ; ++ j ; <S2SV_ModStart> = '\\",0
492,<S2SV_ModStart> sk ) ; if ( writable ) { <S2SV_ModStart> sk ) ; } else { unix_peer_wake_disconnect ( sk ) ; } <S2SV_ModStart> { if ( unix_peer_wake_disconnect ( sk ) ) { if ( <S2SV_ModStart> wait ) ; } else { writable = 0 ; } } <S2SV_ModEnd> } if (,0
493,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; sendClean ( outputbuffer ) ;",1
494,<S2SV_ModStart> * minor_status = GSS_S_DEFECTIVE_TOKEN <S2SV_ModEnd> ; return GSS_S_DEFECTIVE_TOKEN <S2SV_ModStart> } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } if (,0
495,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> ( args, vpx_ref_frame_t <S2SV_ModEnd> * ) ; <S2SV_ModStart> NULL ) { vpx_get_reference_enc <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> -> idx, <S2SV_ModEnd> fb ) ;",0
496,<S2SV_ModStart> plug ) ; kiocb_batch_free_all <S2SV_ModEnd> ( & batch,0
497,"<S2SV_ModStart>, int rep_quick, my_bool no_copy_key_block <S2SV_ModStart> { int got_error ; my_bool no_copy_key_block <S2SV_ModStart> ) ||! no_copy_key_block <S2SV_ModEnd> && init_io_cache (",0
498,"<S2SV_ModStart> s } ; <S2SV_ModEnd> uECC_word_t carry ; <S2SV_ModStart> ; EccPoint_mult ( k2 <S2SV_ModEnd>, curve -> <S2SV_ModStart>! carry ] <S2SV_ModEnd>, curve )",0
499,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
500,<S2SV_ModStart> ; } else if ( pool -> free_total < pool -> free_total ) <S2SV_ModStart> ; } } else { free ( buf ) ; },0
501,"<S2SV_ModStart> ( * cp && cp [ 1 ] <S2SV_ModStart> [ ] = ""00112233445566778899aAbBcCdDeEfF"" <S2SV_ModEnd> ; const char <S2SV_ModStart> * dp ; size_t <S2SV_ModEnd> dcount = 0 <S2SV_ModStart> = 0 ; if ( cp [ 2 ] && cp [ 3 ] ) { const char * cp = ""00112233445566778899aAbBcCdDeEfF"" ; const char * dp ; size_t <S2SV_ModEnd> dcount = 0 <S2SV_ModStart> = 0 ; cp ++ ; if ( cp [ 3 ] && cp [ 3 ] ) { const char * cp = ""00112233445566778899aAbBcCdDeEfF"" ; const char * dp ; size_t <S2SV_ModEnd> dcount = 0 <S2SV_ModStart> = 0 ; cp ++ ; if ( cp [ 3 ] && cp [ 3 ] ) { const char * cp = ""00112233445566778899aAbBcCdDeEfF"" ; const char * dp ; size_t <S2SV_ModEnd> dcount = 0 <S2SV_ModStart> = 0 ; cp ++ ; if ( cp [ 3 ] && cp [ 3 ] ) { const char * cp = cval * cp ; cp ++ ; cp ++ ; cp ++ ; } else",0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
503,"<S2SV_ModStart> ( pixc = pixFewColorsOctcubeQuantmixed <S2SV_ModEnd> ( pixs, <S2SV_ModStart> ( pixc = pixFewColorsOctcubeQuantmixed <S2SV_ModEnd> ( pixs,",0
504,<S2SV_ModStart> = 256 ; # if CONFIG_VP8_HIGHBITDEPTH if ( cpi -> oxcf. flags & YV12_FLAG_HIGHBITDEPTH ) { <S2SV_ModStart> vp8_mse16x16 ; } # endif,0
505,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> overhead = 16 <S2SV_ModStart> + 1 ; size_t <S2SV_ModEnd> size = overhead,1
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NEGO_STATE_FINAL ; return 0 ;,0
507,"<S2SV_ModStart> ; int i <S2SV_ModEnd> ; const double <S2SV_ModStart> do { const vpx_rc_bits_per_mb_r <S2SV_ModEnd> = ( int <S2SV_ModStart> i, correction_factor, cm -> rate_correction_factor <S2SV_ModStart> active_worst_quality ) ; if ( cpi -> rc_mode == VP9_RC_MODE_RC_MODE_VP9_RC ) { vp9_rc_bits_per_mb_r = ( int ) cm -> rate_correction_factor ; }",0
508,<S2SV_ModStart> ; value |= TJA1101_CONFIG1_MII_MODE_RMII_25 <S2SV_ModEnd> ; tja1101WritePhyReg (,0
509,<S2SV_ModStart> n ) && i < NCH ( n ) &&,0
510,"<S2SV_ModStart> int dst_stride, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart>, left_col, PREDICTION_MODE <S2SV_ModEnd> ) ; DECLARE_ALIGNED_ARRAY <S2SV_ModStart> + y ; memset <S2SV_ModEnd> ( left_col, <S2SV_ModStart> + y ; memset <S2SV_ModEnd> ( left_col, <S2SV_ModStart> + y ; memset <S2SV_ModEnd> ( left_col,",0
511,"<S2SV_ModStart> ++ ; } if ( end > end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> not <S2SV_blank> supported <S2SV_blank> for <S2SV_blank> pattern <S2SV_blank> \'%s\'\\n"", pattern ) ; goto error ; }",0
512,<S2SV_ModStart> ; ei -> i_sync_tid = 0 ; ei -> i_datasync_tid = 0 ; ei -> i_datasync_tid = 0 ; ei -> i_datasync_tid = 0 ; ei -> i_datasync_tid = 0 ; ei -> i_datasync_tid = 0 ; ei -> i_datasync_tid = 0 ; ei -> i_datasync_tid = 0 ; return & ei -> vfs_inode ; } spin_lock_init ( & ei -> i_block_reservation_lock ) ; spin_lock_init ( & ei -> i_block_reservation_lock ) ; spin_lock_init ( & ei -> i_block_reservation_lock ) ; ei -> i_reserved_data_blocks = 0 ; spin_unlock_init ( & ei -> i_block_reservation_lock ) ; ei -> i_reserved_data_blocks = 0 ; spin_lock_init ( & ei -> i_block_reservation_lock ) ; ei -> i_reserved_data_blocks = 0 ; spin_lock_init ( & ei -> i_block_reservation_lock ) ; ei -> i_datasync_tid = 0 ; return,0
513,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
514,<S2SV_ModStart> : if ( rrd_graph_options_empty ( im ) ) { <S2SV_ModEnd> return ; } <S2SV_ModStart> : if ( rrd_graph_options_empty ( im ) ) { <S2SV_ModEnd> return ; },0
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { q = osStrchr <S2SV_ModEnd> ( p +,1
516,<S2SV_ModStart> ; if ( i + 1 < NCH ( n ) &&,0
517,<S2SV_ModStart> KEY_FRAME ) { memset <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd ->,0
518,"<S2SV_ModStart> error_t error ; <S2SV_ModEnd> uint32_t status ; <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModEnd> ) { enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModEnd> ) { enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL <S2SV_ModEnd>, ENC624J600_RX_BUFFER_STOP ) <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface,",0
519,"<S2SV_ModStart> VALUE read_memory ( struct xmlSchema * xml, <S2SV_ModStart> xmlSchemaParserCtxtPtr ctx = xmlSchemaNewMemory <S2SV_ModEnd> ( ( const <S2SV_ModStart> char * ) xml -> StringValue <S2SV_ModEnd> ( content ) <S2SV_ModStart> ( content ), xml -> StringValuePtr <S2SV_ModStart> ( content ), xml -> StringValuePtr",0
520,"<S2SV_ModStart> } else { if ( config_arg == NULL ) { s_log ( LOG_WARNING, ""Cannot <S2SV_blank> open <S2SV_blank> configuration <S2SV_blank> file"" ) ; print_syntax ( ) ; return 1 ; } <S2SV_ModStart> } else { if ( config_arg == NULL ) { s_log ( LOG_WARNING, ""Cannot <S2SV_blank> open <S2SV_blank> configuration <S2SV_blank> file"" ) ; print_syntax ( ) ; return 1 ; } <S2SV_ModStart> } else { if ( config_arg == NULL ) { s_log ( LOG_WARNING, ""Cannot <S2SV_blank> open <S2SV_blank> configuration <S2SV_blank> file"" ) ; print_syntax ( ) ; return 1 ; } <S2SV_ModStart> } else { if ( config_arg == NULL ) { s_log ( LOG_WARNING, ""Cannot <S2SV_blank> open <S2SV_blank> configuration <S2SV_blank> file"" ) ; print_syntax ( ) ; return 1 ; } else { <S2SV_ModStart> } else { if ( config_arg == NULL ) { s_log ( LOG_WARNING, ""Cannot <S2SV_blank> open <S2SV_blank> configuration <S2SV_blank> file"" ) ; print_syntax ( ) ; return 1 ; } }",0
521,<S2SV_ModStart> ; out += 4 <S2SV_ModEnd> ; } state <S2SV_ModStart> ; out += 4 <S2SV_ModEnd> ; } state,0
522,<S2SV_ModStart> err = - <S2SV_ModEnd> EALREADY ; if,0
523,<S2SV_ModStart> handle -> nmi &&! perf_output_wakeup ( handle ),0
524,"<S2SV_ModStart> * s, u16 <S2SV_ModEnd> len, wchar_t <S2SV_ModStart> len > 0 && len < sizeof ( u16 ) <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> * op ++ <S2SV_ModStart> wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( u & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) u ; } else { * op ++ = ( wchar_t ) u ; } s += size ; len -= size ; } return op - pwcs <S2SV_ModEnd> ; } <S2SV_null>",0
525,"<S2SV_ModStart> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" ) ; crm_trace ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure""",0
526,"<S2SV_ModStart> ( interface, KSZ8851_RXFHSR ) ; if ( ( status & RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_RXFHBCR ) & RXFHBCR_RXBC_MASK <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( interface, KSZ8851_RXQCR, RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851ReadFifo <S2SV_ModStart> ( interface, KSZ8851_RXQCR, RXQCR_SDA <S2SV_ModEnd> ) ; cillary <S2SV_ModStart> ( interface, KSZ8851_RXQCR, RXQCR_SDA <S2SV_ModEnd> ) ; return",0
527,"<S2SV_ModStart> * n, string type_comment, <S2SV_ModStart> is_async ) { <S2SV_ModEnd> string type_comment = <S2SV_ModStart>, type_comment, type_comment, type_comment, <S2SV_ModStart>, LINENO ( type_comment <S2SV_ModEnd> ), n",0
528,"<S2SV_ModStart> int i ; struct page_struct * page ; page = mm_page_map ( mm, pmd ) ; if ( page ) { page = page_map ( mm, pmd ) ; if ( page ) goto out ; } <S2SV_ModStart> ; out : if ( page )",0
529,<S2SV_ModStart> -> token_ptr ) { <S2SV_ModStart> - 1 ; },0
530,<S2SV_ModStart> bt_remote_bdaddr ) ; <S2SV_ModEnd> } return 0,0
531,<S2SV_ModStart> 0 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif <S2SV_ModStart> col < width && row < width,0
532,<S2SV_ModStart> len < needed || len > UINT32_MAX,0
533,"<S2SV_ModStart> ) NULL ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; <S2SV_ModStart> ""ImproperImageHeader"" ) ; }",0
534,<S2SV_ModStart> bfqq ) bfq_idle_slice_timer_body <S2SV_ModEnd> ( bfqq ),0
535,<S2SV_ModStart> ; length += PRIMARY_DRAWING_ORDER_FIELD_BYTES <S2SV_ModEnd> [ orderInfo ->,0
536,<S2SV_ModStart> ovl_dentry_is_dir ( new ) ) goto out ; if ( ovl_dentry_is_dir ( new,0
537,"<S2SV_ModStart> int plane ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
538,"<S2SV_ModStart> * cpi, TileData * tile_data <S2SV_ModEnd>, int mi_row <S2SV_ModStart> -> e_mbd ; set_offsets_all_cols <S2SV_ModEnd> ( cpi, <S2SV_ModStart> ( cpi, tile_data <S2SV_ModEnd>, mi_row, <S2SV_ModStart>, x, tile_data <S2SV_ModEnd>, mi_col,",0
539,<S2SV_ModStart> * err = safe_ superblockRead <S2SV_ModEnd> ( & reader,0
540,<S2SV_ModStart> -> ranges = safeMalloc <S2SV_ModEnd> ( sizeof (,0
541,<S2SV_ModStart> ( flags & VP8_EFLAG_FORCE_ARF ) && ( flags & VP8_EFLAG_FORCE_ARF ) ) || ( ( flags & <S2SV_ModStart> & VP8_EFLAG_FORCE_ARF ) && ( flags & VP8_EFLAG_FORCE_ARF ) ) ) || ( ( flags & VP8_EFLAG_FORCE_ARF ) && ( flags & VP8_EFLAG_FORCE_ARF ) ),0
542,"<S2SV_ModStart> ""MemoryAllocationFailed"" ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;",0
543,<S2SV_ModStart> (! head ||! swhash -> online,0
544,"<S2SV_ModStart> * pptr, u_int <S2SV_ModEnd> len ) { <S2SV_ModStart> tlen ) { u_int <S2SV_ModEnd> i ; uint16_t <S2SV_ModStart> case BGP_AS_PATH : if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_AS_PATH : if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_AS_PATH : if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_AS_PATH : if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_AS_PATH : if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_AS_PATH : if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; }",0
545,"<S2SV_ModStart> ""False"" ) ; res -> outputbuffer = fopen ( ""bin"", ""w"" ) ; if ( res -> outputbuffer!= NULL ) { StringBuffer_append ( res -> outputbuffer, ""<tr><td>Environment <S2SV_blank> file</td>%s</td>"", Run. env. name ) ; }",0
546,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
547,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return true ;,0
548,"<S2SV_ModStart> ; if ( nintf_orig < size ) { dev_err ( ddev, ""invalid <S2SV_blank> interface <S2SV_blank> size <S2SV_blank> for <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d\\n"", nintf_orig ) ; break ; } if ( <S2SV_ModStart> ; if ( nalts [ 0 ] < size2 ) { dev_err ( ddev, ""invalid <S2SV_blank> interface <S2SV_blank> size <S2SV_blank> for <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d\\n"", nalts [ 0 ] ) ; break ; } if (",0
549,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",0
550,<S2SV_ModStart> ; distortion = vpx_variance16x16 <S2SV_ModEnd> ( * (,1
551,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_ECON2_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_MAADR1_ETHEN | ENC624J600_MAADR2_NONE <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MAADR2, ENC624J600_MAADR2_NONE <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2, ENC624J600_MAADR2_NONE <S2SV_ModEnd> ) ; temp <S2SV_ModStart> ( interface, ENC624J600_MAADR2, ENC624J600_MAADR2_NONE <S2SV_ModEnd> ) ; temp <S2SV_ModStart> ( interface, ENC624J600_MAADR2, ENC624J600_MAADR3_NONE <S2SV_ModEnd> ) ; temp <S2SV_ModStart> ( interface, ENC624J600_ERXST, ENC624J600_ERXST, ENC624J600_ERXST_NONE <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_ERXST, ENC624J600_ERXST, ENC624J600_ERXST_",0
552,"<S2SV_ModStart> * start ; if ( ( size_t ) psf -> header. len > psf -> header. len ) { psf_log ( ""too <S2SV_blank> short <S2SV_blank> header <S2SV_blank> length <S2SV_blank> (%d) <S2SV_blank> in <S2SV_blank> the <S2SV_blank> header <S2SV_blank> length <S2SV_blank> (%d)\\n"", ( size_t ) psf -> header. len, ( size_t ) psf -> header. len ) ; return ; } <S2SV_ModStart> header ) + ( size_t ) <S2SV_ModStart> = sizeof ( psf -> header. len - 1 ) <S2SV_ModEnd> ; va_start ( <S2SV_ModStart> -> headindex = ( size_t ) psf -> header. len <S2SV_ModEnd> ; return ;",0
553,<S2SV_ModStart> ( ctx -> priv -> alg_priv ) { VPX_CODEC_DESTROY <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> ( ctx -> priv -> alg_priv ) ; } else { if ( ctx -> priv -> alg_priv ) { vpx_codec_destroy ( ctx -> priv -> alg_priv ) ; } <S2SV_ModEnd> ctx -> iface,0
554,<S2SV_ModStart> { sf -> use_high_partition_only =! frame_is_boosted ( cm ) ; sf -> <S2SV_ModStart> { sf -> use_high_partition_only = 1 ; sf -> <S2SV_ModStart> ; sf -> use_high_partition_only = 1 ; sf -> <S2SV_ModStart> ; sf -> use_high_partition_only = 1 ; sf -> <S2SV_ModStart> ; sf -> use_high_partition_only = 1 ; sf -> <S2SV_ModStart> ; sf -> <S2SV_ModEnd> subpel_iters_per_step = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> mode_skip_start = 1,0
555,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ]. poll_count ),0
556,<S2SV_ModStart> inuse + ( ( inuse + 2 ) <S2SV_ModEnd> / 8 ) <S2SV_ModStart> 2 * EXTRA_STACK ; int goodsize = inuse + ( inuse + 2 ),0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,"<S2SV_ModStart> const char * const s = STR ( CHILD ( n, 0 ) ) ; const char * <S2SV_ModStart> * s = _PyUnicode_AsString ( errstr ) ; if (! s ) { return NULL ; } <S2SV_ModEnd> char buf [",0
559,<S2SV_ModStart> input_ptr ; int is_keyframe_qaunt_set = 0 ; int <S2SV_ModStart> break ; } is_keyframe_qaunt_set = 1 ; <S2SV_ModStart> break ; } is_keyframe_qaunt_set = 1 ; <S2SV_ModStart> break ; } is_keyframe_qaunt_set = 1 ; <S2SV_ModStart> break ; } is_keyframe_qaunt_set = 1 ; <S2SV_ModStart> ) break ; is_keyframe_qaunt_set = 1 ; <S2SV_ModStart> if (! is_keyframe_qaunt_set <S2SV_ModEnd> ) { SvcInternal,0
560,"<S2SV_ModStart> ) ; } mb_index = 0 ; fprintf ( mvs, ""Mbs <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_row ]. mbmi. mode ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; mb_index ++ ; } fprintf ( mvs, ""Mbs <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", b_col ) ; for ( mb_row = 0 ; mb_col < cols ; mb_col ++ ) { int b_col ; for ( b_col = 0 ; b_col < cols ; mb_col ++ ) { int b_col ; int b_col ; int b_col ; for ( b_col = 0 ; b_col < cols ; mb_col ++ ) { int b_col ; int b_col ; int b_col ; int b_col ; for ( b_col = 0 ; b_col < cols ; mb_",0
561,<S2SV_ModStart> self ) { <S2SV_ModEnd> PyObject * new_memo,0
562,,1
563,"<S2SV_ModStart> ( dbh, mysql_error ( imp_dbh -> pmysql ),",0
564,<S2SV_ModStart> ) || ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) == 0 ) <S2SV_ModStart> slot_lock ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> slot -> id ),0
565,"<S2SV_ModStart> struct ieee_802_11_phdr phdr ; guint length_of_phdr = 0 <S2SV_ModStart> ; if ( length_of_phdr <S2SV_ModEnd> ( tp -> <S2SV_ModStart> tp -> fragdu_len ) > length_of_phdr ( tp -> fragdu_len ) ) { length_of_phdr ( tp -> fragdu_len, tp -> fragdu_len, & length_of_phdr ( tp -> fragdu_len ), & length_of_phdr ( tp -> fragdu_len ), & length_of_phdr ( tp -> fragdu_len ), & length_of_phdr ( tp -> fragdu_len ), & length_of_phdr ( tp -> fragdu_len ), & length_of_phdr ( tp -> fragdu_len ), & length_of_phdr ( tp -> fragdu_len ), & length_of_phdr ( tp -> fragdu_len ), & length_of_phdr ( tp -> fragdu_len ), & length_of_phdr ( tp -> fragdu_len ), & length_of_phdr ( tp -> fragdu_len ), & length_of_phdr ( tp -> fragdu_",0
566,<S2SV_ModStart> ; sh = s_calloc0 <S2SV_ModEnd> ( hdrlen +,0
567,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> UINT32 a_val ; BOOL result = FALSE ; <S2SV_ModStart> ; y ++ ) { if (! context -> priv -> plane_buffers ) { result = FALSE ; } else { result = FALSE ; } } if (! result ) { return FALSE ; } if (! context -> priv -> plane_buffers ) { result = FALSE ; } if (! context -> priv -> plane_buffers ) { result = FALSE ; } if (! result ) { return FALSE ; } if (! context -> priv -> plane_buffers ) { result = FALSE ; } if (! context -> priv -> plane_buffers ) { result = FALSE ; } if (! context -> priv -> plane_buffers ) { result = FALSE ; } if (! context -> priv -> plane_buffers ) { result = FALSE ; } if (! context -> priv -> plane_buffers ) { result = FALSE ; } if (! context -> priv -> plane_buffers ) { result = FALSE ; } if (! context -> priv -> plane_buffers ) { result = FALSE ; } if (!,0
568,<S2SV_ModStart> > nr_parens ) { ret = - EINVAL ; goto out_free ; } <S2SV_ModEnd> * ( ++,1
569,<S2SV_ModStart> & cpi -> oxcf. <S2SV_ModStart> = ( ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> = ( ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> < cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> < cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> = ( ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> * rc -> <S2SV_ModStart> + kf_boost ) <S2SV_ModEnd> * rc -> <S2SV_ModStart> + kf_boost ) <S2SV_ModEnd> >> 4 ;,0
570,"<S2SV_ModStart> TX_MODE read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r )",1
571,"<S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> } # line 104 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy",0
572,"<S2SV_ModStart> -> cpi ; MACROBLOCK * const x = args -> x ; <S2SV_ModStart> & cpi -> <S2SV_ModEnd> plane [ plane <S2SV_ModStart> plane_type ; const uint16_t * qcoeff = BLOCK_OFFSET ( x -> qcoeff, block ) ; const <S2SV_ModStart> UNCONSTRAINED_NODES ] = x -> <S2SV_ModEnd> coeff_probs [ tx_size <S2SV_ModStart> COEFF_CONTEXTS ] = x -> <S2SV_ModEnd> counts [ tx_size <S2SV_ModStart> COEFF_CONTEXTS ] = x -> <S2SV_ModEnd> counts [ tx_size <S2SV_ModStart> coEFF_CONTEXTS ] = x -> <S2SV_ModEnd> counts [ tx_size <S2SV_ModStart> coEFF_CONTEXTS ] = x -> <S2SV_ModEnd> counts [ tx_size <S2SV_ModStart> coEFF_CONTEXTS ] = x -> <S2SV_ModEnd> counts [ tx_size <S2SV_ModStart> coEFF_CONTEXTS ] = x -> <S2SV_ModEnd> counts [ tx_size <S2SV_ModStart> coEFF_CONTEXTS ] = x -> <S2SV_ModEnd> counts [ tx_size <S2SV_ModStart> coEFF_CONTEXTS ] = x -> <S2SV_ModEnd> counts [ tx_size <S2SV_ModStart> coEFF_CONTEXTS ] = x -> <S2SV_ModEnd> counts [ tx_size <S2SV_ModStart> coEFF_CONTEXTS ] = x -> <S2SV_ModEnd> counts [ tx_size <S2SV_ModStart> coEFF_CONTEXTS ] = x -> <S2SV_ModEnd> counts [ tx_size <S2SV_ModStart> coEFF_CONTEXTS ] = x",0
573,<S2SV_ModStart> -> pSrc ; if ( pSelect -> pSrc. pSrc == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; },0
574,<S2SV_ModStart> ; serv = svc_create_svc <S2SV_ModEnd> ( & nfs4_callback_program,0
575,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
576,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
577,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
578,"<S2SV_ModStart> do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> s, 0 )",1
579,<S2SV_ModStart> ( xIter = xml_attr_next <S2SV_ModEnd> ( xml ) <S2SV_ModStart> ( xml ) <S2SV_ModEnd> ; xIter = <S2SV_ModStart> ; } } <S2SV_ModEnd> while ( cIter,0
580,<S2SV_ModStart> <S2SV_null> static const SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> return ( const SvcInternal_t <S2SV_ModEnd> * ) svc_ctx,1
581,<S2SV_ModStart> tmp ) ; <S2SV_ModEnd> } } else,0
582,"<S2SV_ModStart> char buffer [ 80 <S2SV_ModEnd> ] ; int <S2SV_ModStart> ; if ( ( <S2SV_ModStart>, ""420"" ) ) || ( <S2SV_ModEnd> strcmp ( _y4m <S2SV_ModStart>, ""420jpeg"" ) ) || ( <S2SV_ModEnd> strcmp ( _y4m <S2SV_ModStart>, ""420jpeg"" ) ) || ( <S2SV_ModEnd> strcmp ( _y4m <S2SV_ModStart>, ""420jpeg"" ) ) || ( <S2SV_ModEnd> strcmp ( _y4m <S2SV_ModStart>, ""420jpeg"" ) ) || ( <S2SV_ModEnd> strcmp ( _y4m <S2SV_ModStart>, ""420jpeg"" ) ) || ( <S2SV_ModEnd> strcmp ( _y4m <S2SV_ModStart>, ""420jpeg"" ) ) || ( <S2SV_ModEnd> strcmp ( _y4m <S2SV_ModStart>, ""420jpeg"" ) ) || ( <S2SV_ModEnd> strcmp ( _y4m <S2SV_ModStart>, ""420jpeg"" ) <S2SV_ModEnd> ) { _y4m",0
583,"<S2SV_ModStart> * otmp = readobj_nam <S2SV_ModEnd> ( buf,",0
584,"<S2SV_ModStart> long long directory_table_end <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( read_xattrs_from_disk ( sBlk. s. <S2SV_ModEnd> no_xattrs, & <S2SV_ModStart> ( read_uids_guids ( sBlk. s. <S2SV_ModEnd> table_start ) == <S2SV_ModStart> ( read_fragment_table ( sBlk. s. <S2SV_ModEnd> directory_table_end ) == <S2SV_ModStart> ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( no_xattrs ) sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return TRUE ; } return 0 <S2SV_ModEnd> ; } <S2SV_null>",0
585,"<S2SV_ModStart> rule * rule, const struct env * * env <S2SV_ModStart> root ) ; <S2SV_ModEnd> if ( rule <S2SV_ModStart> ; } } env -> count = 0 ;",0
586,"<S2SV_ModStart> -> seg ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ; } } memset ( cpi -> segmentation_map, 0, cm -> mi_cols ) ; memset ( cpi -> complexity_map, 0, cm -> mi_cols ) ;",0
587,"<S2SV_ModStart> module_type ) return 0 ; module_type = make_type ( ""Module"", module_fields, 1 ) ; if (! module_type ) return 0 ;Interactive_type = make_type ( ""Interactive"", mod_type, Interactive_fields, 1 ) ; if (! Interactive_type ) return 0 ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; <S2SV_ModStart> return 0 ; <S2SV_ModEnd> Expression_type = make_type <S2SV_ModStart>, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; <S2SV_ModStart>, Expression_fields, 5 ) ; if (! AsyncFunctionDef_type ) return 0 ; FunctionDef_type = make_type ( ""AsyncFunctionDef"", stmt_type, AsyncFunctionDef_fields, 5 ) ; if (! AsyncFunctionDef_type ) return 0 ; FunctionDef_type = make_type ( ""AsyncFunctionDef"", stmt_type, ClassDef_fields,",0
588,"<S2SV_ModStart> | O_TRUNC, S_IRUSR | S_IWUSR | S_IWUSR | S_IWUSR | S_IWUSR | S_IWGRP | S_IWGRP | S_IWGRP | S_IWOTH <S2SV_ModEnd> ) ; if",0
589,<S2SV_ModStart> ) ; } if ( xd -> block [ 0 ]. bmi. mode!= MODE_INVALID_FRAME && xd -> block [ 0 ]. bmi. mode!= MODE_INVALID_FRAME && xd -> block [ 0 ]. bmi. mode!= MODE_INVALID_FRAME && xd -> block [ 0 ]. bmi. mode!= MODE_INVALID_FRAME && xd -> block [ 0 ]. bmi. mode!= MODE_INVALID_FRAME && xd -> block [ 0 ]. bmi. mode!= MODE_INVALID_FRAME && xd -> block [ 0 ]. bmi. mode!= MODE_INVALID_FRAME && xd -> block [ 0 ]. bmi. mode!= MODE_INVALID_FRAME && xd -> block [ 0 ]. bmi. mode!= MODE_INVALID_FRAME && xd -> block [ 0 ]. bmi. mode!= MODE_INVALID_FRAME && xd -> block [ 0 ]. bmi. mode!= MODE_INVALID_FRAME && xd -> block [ 0 ]. bmi. mode!= MODE_INVALID_FRAME && xd -> block [ 0 ]. bmi. mode!= MODE_INVALID_FRAME && xd -> block [ 0 ]. bmi. mode!= MODE_,0
590,"<S2SV_ModStart> ) { int <S2SV_ModEnd> i, num1 <S2SV_ModStart>, * StartClean <S2SV_ModEnd> ;SetDefaults ( <S2SV_ModStart> t ++ ; <S2SV_ModEnd> sprintf ( outpos <S2SV_ModStart> ( outpos, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"" <S2SV_ModEnd>, s, <S2SV_ModStart> ; if ( <S2SV_ModEnd> s [ 1 <S2SV_ModStart> == '0' && * t == '\\n' <S2SV_ModEnd> ) { identification <S2SV_ModStart> = 1 ; <S2SV_ModEnd> fprintf ( outfile <S2SV_ModStart>, ""%s"", outputbuffer <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; if ( <S2SV_ModEnd> readArray ( t <S2SV_ModStart>, & num2, & num2 <S2SV_ModStart> ) ) { <S2SV_ModEnd> return ( - <S2SV_ModStart> ( - 1 <S2SV_ModEnd> ) ; }",0
591,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lower, & tmp ) < 0 ) { return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_upper, & tmp ) < 0 ) { return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_step, & tmp ) < 0 ) { return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_dims, & tmp ) < 0 ) { return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_dims, & tmp ) < 0 ) { return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_dims, & tmp ) < 0 ) { return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_dims, & tmp ) < 0 ) { return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_dims, & tmp ) < 0 ) { return 1 ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>",0
592,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",0
593,"<S2SV_ModStart> int err ; struct nfp_acl * acl = alink -> acl ; <S2SV_ModStart> ) goto err_delete ; acl = nfp_acl_acl_acl_add ( alink -> abm, alink -> acl, alink -> dscp_acl ) ; if ( acl ) return - EACCES <S2SV_ModStart>! match ) { list_add ( & alink -> dscp_map ) ; <S2SV_ModStart> - ENOMEM ; } <S2SV_ModStart> ; err_delete : nfp_acl_acl_del ( alink -> dscp_acl ) ;",0
594,<S2SV_ModStart> ) ; } # ifdef VPX_RC_ONE_PASS <S2SV_ModStart> : VPX_RC_ONE_PASS ; # else stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; # endif,0
595,<S2SV_ModStart> if (! flatpak_is_executable <S2SV_ModEnd> ( new_exec ) <S2SV_ModStart> if (! flatpak_is_executable <S2SV_ModEnd> ( new_exec ) <S2SV_ModStart> if (! flatpak_is_executable <S2SV_ModEnd> ( new_exec ) <S2SV_ModStart> if (! flatpak_is_executable <S2SV_ModEnd> ( new_exec ) <S2SV_ModStart> if (! flatpak_is_executable <S2SV_ModEnd> ( new_exec ) <S2SV_ModStart> if (! flatpak_is_executable <S2SV_ModEnd> ( new_exec ) <S2SV_ModStart> if (! flatpak_is_executable <S2SV_ModEnd> ( new_exec ) <S2SV_ModStart> if (! flatpak_is_executable <S2SV_ModEnd> ( new_exec ) <S2SV_ModStart> if (! flatpak_is_executable <S2SV_ModEnd> ( new_exec ) <S2SV_ModStart> if (! flatpak_is_executable <S2SV_ModEnd> ( new_exec ) <S2SV_ModStart> if (! flatpak_is_executable <S2SV_ModEnd> ( new_exec ) <S2SV_ModStart> if (! flatpak_is_executable <S2SV_ModEnd> ( new_exec ) <S2SV_ModStart> if (! flatpak_is_executable <S2SV_ModEnd> ( new_exec ) <S2SV_ModStart> if (! flatpak_is_executable <S2SV_ModEnd> ( new_exec ),0
596,"<S2SV_ModStart> data_end ) { vpx_reader <S2SV_ModEnd> r ; assert <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> aligned_cols ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) * aligned_cols, 0 <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm ->",0
597,<S2SV_ModStart> vp9_decoder_create ( const VP9EncoderConfig <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> ) ) ; const VP9DecoderConfig <S2SV_ModEnd> * const cm <S2SV_ModStart> = 1 ; vpx_initialize_dec <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ) ) ; vpx_rtcd <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ) ) ; vpx_init_dequantizer <S2SV_ModEnd> ( cm ),0
598,"<S2SV_ModStart>, GF_LOG_CONTAINER, ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" <S2SV_ModEnd> ) ) ;",0
599,<S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> || opt -> opt. <S2SV_ModStart> || opt -> opt.,0
600,"<S2SV_ModStart> tree2tok ( struct vpx_token <S2SV_ModEnd> * tokens, <S2SV_ModStart> tokens, const vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> do { const vpx_tree_index <S2SV_ModEnd> j = tree",0
601,"<S2SV_ModStart> = VPX_CODEC_OK ; assert ( ctx -> base. err_detail == ""encoder_encode"" ) ; <S2SV_ModStart> ctx, img <S2SV_ModEnd> ) ; vpx_codec_pkt_list_init",0
602,"<S2SV_ModStart> { ret = get_tag_or_zero <S2SV_ModEnd> ( asn1,",0
603,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = v [ k__cospi_p19_m01 ] ; const __m128i k__cospi_p01_p27 = pair_set_epi16 ( k__cospi_p01_p27, k__cospi_p01_p27 ) ; const __m128i k__cospi_p01_p27 = pair_set_epi16 ( k__cospi_p01_p27, k__cospi_p01_p27 ) ; const __m128i k__cospi_p01_p27 = pair_set_epi16 ( k__cospi_p01_p27, k__cospi_p01_p27 ) ; const __m128i k__cospi_p01_p27 = pair_set_epi16 ( k__cospi_p01_p27, k__cospi_p01_p27 ) ; const __m128i k__cospi_p01_p27 = pair_set_epi16 ( k__cospi_p01_",0
604,"<S2SV_ModStart> rc, const VP9EncoderConfig <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> ) rc -> avg_frame_bandwidth <S2SV_ModEnd> * ( int64_t",1
605,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
606,"<S2SV_ModStart> * cpi, MACROBLOCK * const x, <S2SV_ModStart> BLOCK_SIZE bsize ) { <S2SV_ModEnd> MACROBLOCK * const <S2SV_ModStart> x = & x -> mb ; MACROBLOCK * const x = & x -> e_mbd ; MACROBLOCK * const x = & x -> mb ; MACROBLOCK * const x = & x -> mb ; MACROBLOCKD * const xd = & x -> xd ; MODE_INFO * mbmi = & x -> mb ; PICK_MODE_CONTEXT * ctx = get_block_context ( x, bsize ) ; unsigned int segment_id = mi_width && mi_width && mi_width < BLOCK_8X8 && mi_height ; const int mi_width = mi_width ; const int mi_height = mi_height ; const int mi_height = mi_height ; const int mi_height = mi_height ; const int mi_height = mi_height ; const int mi_height = mi_height ; const int mi_width = mi_width ; const int mi_height = mi_height ; const int mi_height = mi_height ; const int mi_height = mi_width ; const int mi_height = mi_height ; const",0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. ptr <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
608,"<S2SV_ModStart> range_max ) { uint32_t <S2SV_ModEnd> value ; int <S2SV_ModStart> gbc ) ; if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> gbc ) ; if ( zeroes < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( zeroes < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( zeroes > 0 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name )",0
609,<S2SV_ModStart> c ) || ( <S2SV_ModStart> c ) || ( <S2SV_ModStart> c ) || ( <S2SV_ModStart> c ) || ( <S2SV_ModStart> c ) || ( <S2SV_ModStart> c ) || ( <S2SV_ModStart> c ) || ( <S2SV_ModStart> c ) || ( <S2SV_ModStart> c ) || ( <S2SV_ModStart> c ) || ( <S2SV_ModStart> c ) || ( <S2SV_ModStart> c >= 128 ),0
610,"<S2SV_ModStart>, packet -> http_content_headers. ptr = NULL, packet -> http_content_headers. ptr = NULL, packet -> http_content_headers. ptr = NULL, packet -> http_content_headers. ptr = NULL, packet -> http_content_headers. ptr = NULL, packet -> http_content_headers. ptr = NULL, packet -> http_content_headers. ptr = NULL, packet -> http_content_headers. len = 0, packet -> http_content_headers. ptr = NULL, packet -> http_content_headers. ptr = NULL, packet -> http_content_headers. ptr = NULL, packet -> http_content_headers. ptr = NULL, packet -> http_content_headers. ptr = NULL, packet -> http_content_headers. ptr = NULL, packet -> http_content_headers. ptr = NULL, packet -> http_content_headers. len = 0, packet -> http_content_headers. ptr = NULL, packet -> http_content_headers. ptr = NULL, packet -> http_content_headers. ptr = NULL, packet -> http_content_headers. ptr = NULL, packet -> http_content_headers. len = 0,",0
611,"<S2SV_ModStart>, y, Max ( 4, <S2SV_ModEnd> dds_info -> width <S2SV_ModStart> dds_info -> width <S2SV_ModEnd> ), Exception <S2SV_ModStart>, dds_info, 8 <S2SV_ModEnd> ) ; return",0
612,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL ) <S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL )",1
613,<S2SV_ModStart> action ) { ( void ) w ; ( void ) h ; ( void ) action ;,0
614,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; sendClean ( outputbuffer ) ;",1
615,"<S2SV_ModStart> return FALSE ; if ( rdp -> sequenceNumber < 0 ) { WLog_VRB ( AUTODETECT_TAG, ""received <S2SV_blank> bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" ) ; return FALSE ; }",0
616,<S2SV_ModStart> ; # endif vpx_write_segment_data <S2SV_ModEnd> ( & cpi <S2SV_ModStart> ; # endif vpx_write_segment_data <S2SV_ModEnd> ( & cpi <S2SV_ModStart> ; # endif vpx_write_segment_data <S2SV_ModEnd> ( & cpi,0
617,<S2SV_ModStart> ( pbi -> b_multithreaded_rd <S2SV_ModEnd> ) vp8mt_de_alloc_temp_buffers (,0
618,<S2SV_ModStart> { if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0x00 ) { xWantedSize = ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { mtCOVERAGE_TEST_MARKER ( ) ; } } else { mtCOVERAGE_TEST_MARKER ( ) ; } if ( ( xWantedSize > 0 ) && ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) ) { mtCOVERAGE_TEST_MARKER ( ) ; } else { mtCOVERAGE_TEST_MARKER ( ) ; } if ( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) ) { mtCOVERAGE_TEST_MARKER ( ) ; } else { mtCOVERAGE_TEST_MARKER ( ) ; } } else { mtCOVERAGE_TEST_MARKER ( ) ; } if ( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) ) { pxBlock -> xBlockSize = xWantedSize ; } else { mtCOVERAGE_TEST_MARKER ( ) ; } else { mtCOVERAGE_TEST_MARKER,0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,"<S2SV_ModStart> s ) { stream_bitmap_updates_t <S2SV_ModEnd> num_updates ; uint16 <S2SV_ModStart> int i ; stream_bitmap_updates_t <S2SV_ModEnd> num_updates ; for <S2SV_ModStart> ++ ) { stream_bitmap_updates_t <S2SV_ModEnd> ( s,",0
621,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
622,"<S2SV_ModStart> TX_SIZE tx_size, vpx_coeff_probs_model <S2SV_ModEnd> * coef_branch_ct ) <S2SV_ModStart> tx_size ] ; vpx_coeff_count * coef_counts = cpi -> coef_counts [ tx_size ] ; <S2SV_ModStart> tx_size ] ; <S2SV_ModEnd> unsigned int (",0
623,<S2SV_ModStart> { } ; if (! utf8 ) return 0 ; <S2SV_ModStart> name ) ; if (! utf8 ) return 0 ;,0
624,"<S2SV_ModStart> struct dvb_usb_adapter * d ) { u8 * obuf = d -> data ; u8 * obuf = NULL ; u8 * obuf = NULL ; u8 * obuf = NULL ; if ( d -> data_size < 3 || obuf == NULL ) { err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; obuf = calloc ( 3, sizeof ( * obuf ) ) ; } <S2SV_ModEnd> if ( dvb_usb_generic_rw <S2SV_ModStart> ( d -> data, obuf <S2SV_ModEnd>, 3, <S2SV_ModStart> ( d -> data, obuf <S2SV_ModEnd>, 3, <S2SV_ModStart> ( d -> data, obuf <S2SV_ModEnd>, 3, <S2SV_ModStart> ( d -> data, obuf <S2SV_ModEnd>, 3, <S2SV_ModStart> ( d -> data, obuf <S2SV_ModEnd>, 3, <S2SV_ModStart> ( d -> data, obuf <S2SV_ModEnd>, 3, <S2SV_ModStart> ( d -> data, obuf <S2SV_ModEnd>, 1, <S2SV_ModStart> ( d -> data, obuf <S2SV_ModEnd>, 1, <S2SV_ModStart> ( d -> data, obuf <S2SV_ModEnd>, 1, <S2SV_ModStart> ( d -> data, obuf <S2SV_ModEnd>, 1, <S2SV_ModStart> ( d -> data, obuf <S2SV_ModEnd>, 1, <S2SV_ModStart> ( d -> data, obuf <S2SV_ModEnd>, 1, <S2SV_ModStart> ( d -> data,",0
625,"<S2SV_ModStart> * iface, vpx_codec_enc_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> ( ctx -> iface -> type == VPX_CODEC_CAP_TYPE_XMA <S2SV_ModEnd> ) ctx ->",0
626,"<S2SV_ModStart> stride, int <S2SV_ModEnd> mv_row, int <S2SV_ModStart> const kernel = vpx_get_interp_kernel <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ; if ( vpx_get_interp_kernel ( y_mb_ptr, stride, & pred [ 0 ], 16, & mv, scale, uv_block_size, uv_block_size, which_mv, kernel, mv_precision_uv, x, y ) ; vpx_build_inter_predictor ( v_mb_ptr, uv_stride, & pred [ 512 ], uv_block_size, & mv, scale, uv_block_size, uv_block_size, which_mv, kernel, mv_precision_uv, x, y ) ; vpx_build_inter_predictor ( v_mb_ptr, uv_stride, & pred [ 512 ], uv_block_size, & mv, scale, uv_block_size, uv_block_size, which_mv, kernel, mv_precision_uv, x, y ) ; vpx_build_inter_predictor ( v_mb_ptr, uv_stride, & pred [ 512 ], & mv, scale, uv_block_size, <S2SV_ModEnd> which_mv",0
627,"<S2SV_ModStart> = TRUE ; if ( len < 2 ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } <S2SV_ModStart> ( bufp ) ) ; if ( len < 2 ) return FALSE",0
628,<S2SV_ModStart> * cJSON_CreateFloatArray ( const <S2SV_ModStart> 0 ; a && i < count && i <S2SV_ModStart> { n = cJSON_CreateNumber <S2SV_ModEnd> ( numbers [,0
629,"<S2SV_ModStart> data_end ) { VP9Worker * const worker = & pbi -> tile_worker ; <S2SV_ModStart> & ~ 1 <S2SV_ModEnd> ; TileBuffer tile_buffers <S2SV_ModStart> tile_cols ) ; <S2SV_ModEnd> int n ; <S2SV_ModStart> 0 ) { <S2SV_ModEnd> CHECK_MEM_ERROR ( cm <S2SV_ModStart> -> tile_workers, vpx_malloc ( num_threads * sizeof ( TileInfo ) ) ) ; for ( i = 0 ; i < num_threads ; ++ i ) { VP9Worker * const worker = & pbi -> tile_workers [ i ] ; ++ pbi -> num_tile_workers ; vpx_worker_init ( worker ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_malloc ( sizeof ( TileInfo ) ) ) ; if ( i < num_threads - 1 &&! vp9_worker_reset ( worker ) ) { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Tile <S2SV_blank> decoder <S2SV_blank> thread <S2SV_blank> creation <S2SV_blank> failed"" ) ; } } for ( n = 0 ; n < num_workers ; ++ n ) { <S2SV_ModStart> -> num_tile_workers ; vpx_worker_init ( worker ) ; if ( i < num_workers - 1 &&! vp",0
630,"<S2SV_ModStart> * 0x101 ; # ifdef LIBRAW_LIBRARY_BUILD imgdata. makernotes. sony. prd_ImageHeight = get2 ( ) ; imgdata. makernotes. sony. prd_ImageWidth = get2 ( ) ; fseek ( ifp, 1L, SEEK_CUR ) ; imgdata. makernotes. sony. prd_ImageWidth = get2 ( ) ; fseek ( ifp, 1L, SEEK_CUR ) ; imgdata. makernotes. sony. prd_ImageWidth = get2 ( ) ; fseek ( ifp, 1L, SEEK_CUR ) ; imgdata. makernotes. sony. prd_ImageWidth = get2 ( ) ; fseek ( ifp, 1L, SEEK_CUR ) ; imgdata. makernotes. sony. prd_ImageWidth = get2 ( ) ; fseek ( ifp, 1L, SEEK_CUR ) ; imgdata. makernotes. sony. prd_ImageWidth = get2 ( ) ; fseek ( ifp, 1L, SEEK_CUR ) ; imgdata. makernotes. sony. prd_ImageWidth = get2 ( ) ; fseek ( ifp, 1L, SEEK",0
631,"<S2SV_ModStart> cm -> seg ; struct seg_info * info = & cpi -> seg_info <S2SV_ModStart> = SEGMENT_DELTADATA ; seg_info = & info -> seg_info ; <S2SV_ModStart> ++ ) { int64_t qindex_delta ; int64_t segment_rdmult ; <S2SV_ModStart> ++ ) { int64_t <S2SV_ModEnd> segment_rdmult ; if <S2SV_ModStart> continue ; } qindex_delta = vp9_compute_qdelta ( & cpi -> rc, base_q, <S2SV_ModEnd> Q_RATIO ( i <S2SV_ModStart> ( i ) ) ; if ( qindex_delta > Q_RATIO ( i ) ) { RDMULT_RATIO ( i ) = ( double ) segment_rdmult ; } <S2SV_ModEnd> vp9_enable_segfeature ( seg",0
632,<S2SV_ModStart> -> error_code ) { if ( ctx -> base. err_detail ) { <S2SV_ModStart> : NULL ; } else { ctx -> base. err_detail = 0 ; },0
633,<S2SV_ModStart> pocstruct_t * ps_cur_slice <S2SV_ModEnd> ; ih264d_free_dynamic_bufs ( <S2SV_ModStart> = IVD_SKIP_NONE ; <S2SV_ModEnd> ps_dec -> u4_num_cores,0
634,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ),0
635,<S2SV_ModStart> <S2SV_null> <S2SV_null> static long <S2SV_ModEnd> getnum ( const <S2SV_ModStart> df ) { long a ; long a ; long a ; long a ; long a ; long a ; do { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } while ( a > a ) <S2SV_ModEnd> { a = <S2SV_ModStart> '0' ; } <S2SV_ModEnd> return a ;,0
636,"<S2SV_ModStart>, g -> gcstate <S2SV_ModEnd> ) ; markold <S2SV_ModStart>, g -> gcstate <S2SV_ModEnd> ) ; g",0
637,<S2SV_ModStart> 0 ; else { ret = <S2SV_ModEnd> - EIO ; <S2SV_ModStart> - EIO ; goto err ; },0
638,"<S2SV_ModStart> 'S' } ; struct sockaddr * sin ; <S2SV_ModStart> return NULL ; sin = s_calloc ( sizeof ( * sin ), sizeof ( * sin ) ) ; if ( sin_addr_is_null ( sin ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } <S2SV_ModStart> ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" <S2SV_ModEnd> ) ; throw_exception",0
639,"<S2SV_ModStart> remote_connection_s * connection, int * socket <S2SV_ModStart> struct sockaddr_in addr, * * socket <S2SV_ModStart> = 0 ; <S2SV_ModEnd> int ret_ga ; <S2SV_ModStart> * server = socket <S2SV_ModEnd> ; int ret_ga <S2SV_ModStart> = NULL ; struct sockaddr_in addr ; int ret_ga ; struct addrinfo * res ; struct addrinfo * res ; struct addrinfo hints ; xmlNode * login = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } crm_debug ( ""Looking <S2SV_blank> up <S2SV_blank> %s"", server ) ; ret_ga = getaddrinfo ( NULL, & hints, & res ) ; if ( ret_ga ) { crm_debug ( ""Getaddrinfo <S2SV_blank> failed"" ) ; close ( sock ) ; } crm_debug ( ""Got <S2SV_blank> address <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> %s"", server, private -> server ) ; crm_debug ( ""got <S2SV_blank> address <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> %s"", server, private -> server ) ; close ( sock ) ; return - 1 ; } crm",0
640,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> ; cpi -> gf_overspend_bits <S2SV_ModEnd> = 0 ;",0
641,<S2SV_ModStart> ndo_tsrcs ) ; ND_TCHECK ( bp [ 8 ] ) ;,0
642,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command <S2SV_ModStart> = mptctl_do_mpt_command ( <S2SV_ModEnd> & uarg ->",0
643,"<S2SV_ModStart> Image * image = NULL <S2SV_ModStart> length, padding = NULL <S2SV_ModStart> ; padding = ( Image * )",0
644,"<S2SV_ModStart> ) ) { jas_eprintf ( ""cannot <S2SV_blank> encode <S2SV_blank> bandinfo\\n"" ) ; <S2SV_ModStart> 1 ; } jas_eprintf ( ""bitrate <S2SV_blank> %d\\n"", bitrate_number ) ;",0
645,<S2SV_ModStart> ] ) { if (! channel -> modes ) return ;,0
646,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> - m + vpx_read_bit <S2SV_ModEnd> ( r )",1
647,"<S2SV_ModStart> * costs, vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",0
648,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> ( REFERENCE_MODE ) vpx_read <S2SV_ModEnd> ( r,",0
649,"<S2SV_ModStart>! stream ) { <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; stream -> config. cfg. g_timebase. den = 1000 ; stream -> config. cfg. g_w = 0 ; stream -> config. g_h = 0 ; } <S2SV_ModStart> = vpx_codec_enc_config_default ( <S2SV_ModEnd> stream -> codec <S2SV_ModStart> -> codec -> codec_interface <S2SV_ModEnd> ( ),",0
650,<S2SV_ModStart> op -> nd_opt_len <S2SV_ModEnd> ) ) goto,0
651,<S2SV_ModStart> -> root_node = yr_re_root_node_create ( ) <S2SV_ModEnd> ; return ERROR_SUCCESS,0
652,"<S2SV_ModStart> ; ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret < 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> lookup <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", str_c ( path ), key -> value <S2SV_ModEnd>, error ) <S2SV_ModStart> if ( ret < <S2SV_ModEnd> 0 ) { <S2SV_ModStart> 1 ; } <S2SV_ModEnd> if ( ret",0
653,<S2SV_ModStart> ; tok -> altwarning = 1 ; tok -> alterror = 1 ; tok -> alterror = 1 ; tok -> alterror = 1 ; tok -> alterror = 1 ; tok -> alterror = 1 ; tok -> alterror = 1 ; tok -> alterror = 1 ; tok -> alterror = 1 ; tok -> alterror = 1 ; tok -> alterror = 1 ; tok -> alterror = 1 ; tok -> alterror = 1 ; tok -> alterror = 1 ; tok -> alterror = 1 ; tok -> alterror = 1 ; tok -> alterror = 1 ; tok -> alterror = 1 ; tok -> alterror = 1 ; tok -> alterror = 1 ; tok -> alterror = 1 ; tok -> alterror = 1 ; tok -> alterror = 1 ; tok -> alterror = 1 ; tok -> alterror = 1 ; tok -> alterror = 1 ; tok -> alterror = 1 ; tok -> alterror = 1 ; tok -> alterror = 1 ; tok -> alterror = 1 ; tok -> alterror = 1 ; tok -> alterror = 1 ; tok -> alterror = 0 ; tok -> alterror = 0 ; tok -> alterror = 0 ; tok -> alterror = 0 ;,0
654,<S2SV_ModStart> ( av1 -> av1_config_no = GF_AV1_DEFAULT_CONFIG ; av1 ->,0
655,<S2SV_ModStart> ( dpbSize ) ; dpb -> dpbSize = maxRefFrames,0
656,"<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_in = 0 ; <S2SV_ModStart> (! sock ||! addr ||! addrlen_in <S2SV_ModStart> ( addrlen ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } <S2SV_ModEnd> if ( oe_syscall_getpeername_ocall <S2SV_ModStart>, addrlen_in, & addrlen_in <S2SV_ModEnd> )!= OE_OK <S2SV_ModStart> ) ; } <S2SV_ModEnd> return ret ;",0
657,,1
658,"<S2SV_ModStart> FALSE ; } if ( Stream_GetRemainingLength ( s ) > sizeof ( rdpNego_negotiation_request ) ) { WLog_ERR ( TAG, ""Unexpected <S2SV_blank> negotiation <S2SV_blank> request <S2SV_blank> type <S2SV_blank> %"" PRIu8 "" <S2SV_blank> length <S2SV_blank> %u"", type, Stream_GetRemainingLength ( s ) ) ; return FALSE ; }",0
659,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; struct ip6_flowlabel <S2SV_ModStart> flowlabel ) ; <S2SV_ModEnd> return err ;,0
660,"<S2SV_ModStart> uint32_t falign, falign_size, <S2SV_ModStart> hdr_size, j, falign_size <S2SV_ModStart> ; if ( <S2SV_ModEnd>! ctx -> <S2SV_ModStart>! ctx -> cli_scanpe_safe <S2SV_ModEnd> ) { if <S2SV_ModStart>! ctx -> cli_scanpe_safe <S2SV_ModEnd> ) { cli_errmsg <S2SV_ModStart>! ctx -> cli_scanpe_safe <S2SV_ModEnd> ) { cli_errmsg <S2SV_ModStart>! ctx -> cli_scanpe_safe <S2SV_ModEnd> ) { cli_errmsg <S2SV_ModStart>! ctx -> cli_scanpe_safe <S2SV_ModEnd> ) { cli_errmsg <S2SV_ModStart>! ctx -> cli_scanpe_safe <S2SV_ModEnd> ) { cli_errmsg <S2SV_ModStart>! ctx -> cli_scanpe_safe <S2SV_ModEnd> ) { cli_errmsg <S2SV_ModStart>! ctx -> cli_scanpe_safe <S2SV_ModEnd> ) { cli_errmsg <S2SV_ModStart>! ctx -> cli_scanpe_safe <S2SV_ModEnd> ) { cli_errmsg <S2SV_ModStart>! ctx -> cli_scanpe_safe <S2SV_ModEnd> ) { cli_errmsg <S2SV_ModStart>! ctx -> cli_scanpe_safe <S2SV_ModEnd> ) { cli_errmsg <S2SV_ModStart>! ctx -> cli_scanpe_safe <S2SV_ModEnd> ) { cli_errmsg <S2SV_ModStart>! ctx -> cli_scanpe_safe <S2SV_ModEnd> ) { cli_errmsg <S2SV_ModStart>! ctx -> cli_scanpe_safe <S2SV_ModEnd> ) { cli_errmsg",0
661,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; us <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPDRH <S2SV_ModEnd> ) << 8 <S2SV_ModStart> | dm9000ReadReg ( DM9000_EPDRL <S2SV_ModEnd> ) ; }",0
662,"<S2SV_ModStart> -> command ), false <S2SV_ModStart> -> callback ), false",0
663,<S2SV_ModStart> = ubuf ; iov. iov_len = size ; <S2SV_ModStart> = sizeof ( iov <S2SV_ModEnd> ) ; if,0
664,"<S2SV_ModStart> 3 } ; MV ref_mv_full_size = xd -> mi [ 0 ] -> mbmi. sb_type ; <S2SV_ModStart> int num00, tmp_mv_mode_penalty ; int step_param ; int more_two_cost = ( cpi -> common. width * cpi -> common. height ) >> 3 ; int more_two_cost = ( cpi -> common. height * cpi -> common. height ) >> 3 ; int more_two_cost = ( cpi -> common. height * cpi -> common. height ) >> 3 ; int more_two_cost = ( cpi -> common. width * cpi -> common. height * cpi -> common. height ) >> 3 ; int more_two_cost = ( cpi -> common. height * cpi -> common. height * cpi -> common. height ) >> 3 ; int more_two_cost = ( cpi -> common. width * cpi -> common. height * cpi -> common. height ) >> 3 ; int more_two_cost = ( cpi -> common. height * cpi -> common. height * cpi -> common. height * cpi -> common. height * cpi -> common. height * cpi -> common. height * cpi -> common. height * cpi -> common",0
665,<S2SV_ModStart> ; if ( h -> filename == NULL ) { h -> filename = NULL ; goto error ; } if (,0
666,<S2SV_ModStart> ; merged -> uri_cache = ( child -> uri_cache == NOT_SET? parent -> uri_cache : child -> uri_cache ) ; merged ->,0
667,"<S2SV_ModStart>, one, offset, <S2SV_ModStart>, offset, <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart> ( number_pixels * 2 <S2SV_ModEnd> ) pixels )",0
668,"<S2SV_ModStart>, comp -> type <S2SV_ModEnd> ) )!=",0
669,"<S2SV_ModStart> ( option, "" <S2SV_blank> =\\t"" <S2SV_ModEnd>, & ovalue",0
670,<S2SV_ModStart> client = user_data ; g_hash_table_destroy ( client -> callback_id ) <S2SV_ModStart> num_clients ) ; g_hash_table_destroy ( client -> id ) ; g_hash_table_destroy ( client -> id ) ; g_hash_table_destroy ( client -> user ) ;,0
671,<S2SV_ModStart> * uv ; thread -> openupval = 0 ;,0
