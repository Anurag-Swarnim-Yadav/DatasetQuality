,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
1,<S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;,0
2,<S2SV_ModStart> writer = ( TrackWriter <S2SV_ModEnd> * ) gf_list_get,0
3,<S2SV_ModStart> -> child ; if ( item > 0 ) { <S2SV_ModStart> -> next ; },0
4,"<S2SV_ModStart> u64 nr, <S2SV_ModEnd> struct pt_regs * <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",1
5,<S2SV_ModStart> EXT4_EXTENTS_FLAG ) { <S2SV_ModEnd> char * buf <S2SV_ModStart> char * buf = grub_malloc ( EXT2_BLOCK_SIZE ( data ) ) ; <S2SV_ModEnd> struct grub_ext4_extent_header * <S2SV_ModStart> ( fileblock >= ( int ),0
6,"<S2SV_ModStart> fdct16 ( const tran_low_t <S2SV_ModEnd> in [ 16 <S2SV_ModStart> ] ) { tran_low_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> ] ) { tran_low_t <S2SV_ModEnd> step2 [ 8 <S2SV_ModStart> 8 ] ; tran_low_t <S2SV_ModEnd> input [ 8 <S2SV_ModStart> ] ; { tran_low_t <S2SV_ModEnd> s0, s1 <S2SV_ModStart>, s7 ; tran_low_t <S2SV_ModEnd> x0, x1 <S2SV_ModStart> x0, x1, x2, x2, x3 ; tran_low_t <S2SV_ModEnd> x2, x3",0
7,<S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { # <S2SV_ModStart> # ifdef LIBRAW_LIBRARY_BUILD <S2SV_ModEnd> imgdata. lens,0
8,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> search_filter_level ( const <S2SV_ModStart> cm = & cpi <S2SV_ModEnd> -> common ; <S2SV_ModStart> cm = & cpi <S2SV_ModEnd> -> common ; <S2SV_ModStart> cm = & cpi <S2SV_ModEnd> -> common ; <S2SV_ModStart> cm = & cpi <S2SV_ModEnd> -> common ; <S2SV_ModStart> cm = & cpi <S2SV_ModEnd> -> common ; <S2SV_ModStart> cm = & cpi <S2SV_ModEnd> -> common ; <S2SV_ModStart> cm = & cpi <S2SV_ModEnd> -> common ; <S2SV_ModStart> cm = & cpi <S2SV_ModEnd> -> common ; <S2SV_ModStart> cm = & cpi <S2SV_ModEnd> -> common ;,0
9,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
10,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ++ i ) vpx_write <S2SV_ModEnd> ( w,",0
11,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; },0
12,<S2SV_ModStart> ) dat ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ) ; ND_TCHECK_16BITS ( ptr <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> length > 5 || length > 5,0
13,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> construct_get_dest_keyring ( struct <S2SV_ModStart> * authkey ; int ret = 0 ; <S2SV_ModStart> dest_keyring ) ; ret = - 1 ; <S2SV_ModStart> ( dest_keyring ) { ret = - 1 ; break ; } <S2SV_ModEnd> } case KEY_REQKEY_DEFL_THREAD_KEYRING,0
14,,0
15,<S2SV_ModStart> int len ; struct tm * tm ; <S2SV_ModStart> localtime ( & tm <S2SV_ModEnd> ) ; str,0
16,<S2SV_ModStart> length ) ; if ( password!= NULL ) { <S2SV_ModStart> ) ) ; },0
17,<S2SV_ModStart> e == p || e == p,0
18,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",1
19,"<S2SV_ModStart> = 0 ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & timeout )",0
20,"<S2SV_ModStart> detect_transition_to_still ( struct twopass_rc <S2SV_ModEnd> * twopass, <S2SV_ModStart> last_decay_rate ) { <S2SV_ModEnd> if ( frame_interval <S2SV_ModStart> frame_interval > MIN_GF_INTERVAL <S2SV_ModEnd> && loop_decay_rate >= <S2SV_ModStart> j ) { const FIRSTPASS_STATS * position = twopass -> stats_in ; FIRSTPASS_STATS tmp_next_frame ; <S2SV_ModStart> ( EOF == <S2SV_ModEnd> input_stats ( twopass <S2SV_ModStart> & tmp_next_frame ) || tmp_next_frame. pcnt_motion < 0.999 <S2SV_ModStart> } reset_fpf_position ( <S2SV_ModEnd> position ) ;",0
21,<S2SV_ModStart> offset + size < <S2SV_ModEnd> i_size_read ( inode,0
22,"<S2SV_ModStart> alg ) { request_module <S2SV_ModEnd> ( ""%s"", <S2SV_ModStart> CRYPTO_ALG_NEED_FALLBACK ) ) request_module <S2SV_ModEnd> ( ""%s-all"",",0
23,"<S2SV_ModStart> = GIT_PKT_NG ; len = ptr - line ; <S2SV_ModStart> line += 3 <S2SV_ModEnd> ; GITERR_CHECK_ALLOC_ADD ( <S2SV_ModStart> = '\\0' ; <S2SV_ModEnd> if (! <S2SV_ModStart> line, '\\n' <S2SV_ModEnd> ) ) goto",0
24,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
25,<S2SV_ModStart> ; } } if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ;,0
26,"<S2SV_ModStart> mntent, path, rootfs",1
27,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } io -> io_cleanup = mem_cleanup ;,1
28,<S2SV_ModStart> ( value + 0.5 <S2SV_ModEnd> ) ) ;,0
29,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return ret?,0
30,<S2SV_ModStart> vpx_codec_enc_cfg_map_t * map ; ( void ) cfg,0
31,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
32,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
33,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> length < 1 ) || ( <S2SV_ModEnd> ( length > <S2SV_ModStart> length < 1 ) || ( <S2SV_ModEnd> ( length > <S2SV_ModStart> length - 1 ) ),0
34,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_ETXSTL <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXSTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDL <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ET",0
35,<S2SV_ModStart> ; value = ast2obj_string <S2SV_ModEnd> ( o ->,0
36,<S2SV_ModStart> ; if ( <S2SV_ModEnd> access ( page <S2SV_ModStart> ; if ( <S2SV_ModEnd> unlink ( page <S2SV_ModStart> ; if ( <S2SV_ModEnd> unlink ( page,0
37,"<S2SV_ModStart> low_var_thresh, int mb_cols <S2SV_ModEnd> ) { double <S2SV_ModStart> -> pp_limits_buffer ; <S2SV_ModEnd> ( void ) <S2SV_ModStart> ) flag ; memset <S2SV_ModEnd> ( limits,",0
38,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> ext4_xattr_cache_insert ( struct <S2SV_ModStart> struct mb_cache * ext4_mb_cache <S2SV_ModEnd>, struct buffer_head <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> = mb_cache_entry_alloc ( ext4_mb_cache <S2SV_ModEnd>, GFP_NOFS ) <S2SV_ModStart> = mb_cache_entry_insert ( ext4_mb_cache <S2SV_ModEnd>, bh -> <S2SV_ModStart> error ) { <S2SV_ModEnd> if ( error <S2SV_ModStart> hash ) ; <S2SV_ModEnd> } } <S2SV_null>",0
39,<S2SV_ModStart> ) ) ; * rlen = 0 ;,0
40,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp",0
41,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
42,"<S2SV_ModStart> p_bkc ) { const char_u * new_value_alloced = new_value_alloced ; if ( new_value_alloced == NULL ) { errmsg = ( char_u * ) N_ ( ""Cannot <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> value <S2SV_blank> for <S2SV_blank> new <S2SV_blank> string"" ) ; } else { <S2SV_ModStart> ( ) ; }",0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode",0
44,"<S2SV_ModStart> size_t size ; jas_safe_intfast32_add <S2SV_ModEnd> ( tlx, <S2SV_ModStart> ) ||! jas_safe_intfast32_add <S2SV_ModEnd> ( tly, <S2SV_ModStart> ) ||! jas_safe_intfast32_add <S2SV_ModEnd> ( tly,",0
45,<S2SV_ModStart> dp == datalen || dp == datalen,0
46,"<S2SV_ModStart>, size_t * acl_len <S2SV_ModEnd> ) { __be32 <S2SV_ModStart> acl_len ) { <S2SV_ModEnd> uint32_t attrlen, <S2SV_ModStart> int status ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> u32 recvd ; return decode_attr_bitmap ( xdr, bitmap ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
47,"<S2SV_ModStart> * TICK_NSEC ; u64 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",0
48,"<S2SV_ModStart> { owner = ssplit <S2SV_ModEnd> ( auth, <S2SV_ModStart> } group = ssplit <S2SV_ModEnd> ( tok,",1
49,<S2SV_ModStart> ; # if CONFIG_MEM_MANAGER <S2SV_ModEnd> int number_aau ;,0
50,<S2SV_ModStart> = SQUASHFS_LOOKUP_BLOCKS ( long <S2SV_ModEnd> s. inodes <S2SV_ModStart> = SQUASHFS_LOOKUP_BLOCKS ( long <S2SV_ModEnd> s. inodes <S2SV_ModStart> = read_fs_bytes ( long <S2SV_ModEnd> s. lookup_table_start,0
51,<S2SV_ModStart> HASH_DISABLED ; } <S2SV_ModEnd> return NULL ;,0
52,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> # if CONFIG_VP9_ENCODER <S2SV_ModStart> ; # endif <S2SV_ModEnd> for ( argi <S2SV_ModStart> } if ( <S2SV_ModEnd> arg_match ( & <S2SV_ModStart> arg, & use_ivf <S2SV_ModEnd>, argi ) <S2SV_ModStart> } if ( arg_match ( & arg, & use_ivf <S2SV_ModEnd>, argi ) <S2SV_ModStart> else if ( arg_match ( & arg, & use_ivf <S2SV_ModEnd>, argi ) <S2SV_ModStart> else if ( arg_match ( & arg, & use_ivf <S2SV_ModEnd>, argi ) <S2SV_ModStart> else if ( arg_match ( & arg, & use_ivf <S2SV_ModEnd>, argi ) <S2SV_ModStart> else if ( arg_match ( & arg, & use_ivf <S2SV_ModEnd>, argi ) <S2SV_ModStart> else if ( arg_match ( & arg, & use_ivf <S2SV_ModEnd>, argi ) <S2SV_ModStart> else if ( arg_match ( & arg, & use_ivf <S2SV_ModEnd>, argi ) <S2SV_ModStart> else if ( arg_match ( & arg, & use_ivf <S2SV_ModEnd>, argi ) <S2SV_ModStart> else if ( arg_match ( & arg, & use_ivf <S2SV_ModEnd>, argi ) <S2SV_ModStart> else if ( arg_match ( & arg, & profile, argi ) )",0
53,<S2SV_ModStart> } if ( c -> opt -> option. client || c -> opt -> protocol ) return 0 ; if ( <S2SV_ModStart> 1 ; } <S2SV_ModEnd> return 0 ;,0
54,<S2SV_ModStart> ; if ( cmac == NULL ||,0
55,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> const uint64_t bits_used <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
56,"<S2SV_ModStart> define EOFOp 0x07 <S2SV_ModEnd> char magick [ <S2SV_ModStart> ; do { memset ( magick, 0, sizeof ( magick ) ) ;",0
57,"<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> altsetting [ 0 ]. desc. bNumEndpoints < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; error = - EINVAL ; goto err_free_urb ; }",1
58,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
59,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> & tmpname, lockfd <S2SV_ModEnd> ) ) ==",0
60,<S2SV_ModStart> ; ret = IHEVCD_SUCCESS <S2SV_ModEnd> ; } else,0
61,"<S2SV_ModStart> ; if ( n >= cmdsize ) { addreply_noformat ( 500, ""?"" ) ; continue ; } if (",0
62,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> vp9_setup_dstplanes ( MACROBLOCKD <S2SV_ModStart> mi_col ) { const <S2SV_ModStart> mi_col ) { const <S2SV_ModStart> alpha_buffer } ; const <S2SV_ModStart> i ) { const <S2SV_ModStart> -> dst, <S2SV_ModEnd> dst, buffers",0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,<S2SV_ModStart> ) get_block = i_size_read ( inode ) <S2SV_ModEnd> ; else get_block <S2SV_ModStart> else get_block = i_size_read ( inode ) <S2SV_ModEnd> ; return __blockdev_direct_IO,0
65,"<S2SV_ModStart> ( f, ""%79s <S2SV_blank> %[^\\n]\\n"" <S2SV_ModEnd>, def,",0
66,<S2SV_ModStart> int all_whitespace = 0 <S2SV_ModEnd> ; int kind <S2SV_ModStart> PyCompilerFlags cf ; char * str ; Py_ssize_t len ; Py_ssize_t len ; Py_ssize_t len ; Py_ssize_t len ; Py_ssize_t i ; Py_ssize_t len ; Py_ssize_t len ; Py_ssize_t len ; Py_ssize_t len ; Py_ssize_t len ; Py_ssize_t len ; Py_ssize_t len ; Py_ssize_t len ; Py_ssize_t len ; Py_ssize_t len ; Py_ssize_t len ; Py_ssize_t len ; Py_ssize_t len ; Py_ssize_t len ; Py_ssize_t len ; Py_ssize_t len ; Py_ssize_t len ; Py_ssize_t len ; Py_ssize_t len ; Py_ssize_t len ; Py_ssize_t len ; Py_ssize_t len ; Py_ssize_t len ; Py_ssize_t <S2SV_ModStart> *,0
67,<S2SV_ModStart> string ) { if ( string == NULL ) return NULL ;,0
68,<S2SV_ModStart> size ) ; if (! px -> ft ) { return FALSE ; },1
69,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; length = 0 ; <S2SV_ModStart> ) ) ; length = 0 ; <S2SV_ModStart> ) ) ; length = 0 ; <S2SV_ModStart> ) ) ; length = 0 ; <S2SV_ModStart> ) ) ; length = 0 ; <S2SV_ModStart> ) ) ; length = 0 ; <S2SV_ModStart> ) ) ; length = 0 ; <S2SV_ModStart> ) ) ; length = 0 ;",0
70,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
71,<S2SV_ModStart> int i ; uint16_t <S2SV_ModEnd> * const buffers <S2SV_ModStart> int strides [ 3 <S2SV_ModEnd> ] = {,0
72,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; for (,1
73,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
74,<S2SV_ModStart> _ipmi_destroy_user ( user <S2SV_ModEnd> ) ; cleanup_srcu_struct,0
75,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> sl = strlen,1
76,"<S2SV_ModStart> * for_ch ; <S2SV_ModEnd> REQ ( n <S2SV_ModStart>, comp_for ) ; if ( TYPE ( CHILD ( n, 0 ) ) == ASYNC ) { is_async = 1 ; } if ( TYPE ( CHILD ( n, 0 ) ) == ASYNC ) { is_async = 1 ; } if ( TYPE ( CHILD ( n, 0 ) ) == ASYNC ) { is_async = 1 ; } if ( TYPE ( CHILD ( n, 0 ) ) == ASYNC ) { is_async = 1 ; } if ( is_async && c -> c_feature_version < 6 ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } for_ch = CHILD ( n, 1 + is_async ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; expression = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; expression = ast_",0
77,<S2SV_ModStart> = NULL ; return 0 ;,0
78,"<S2SV_ModStart> write_mb_modes_kf ( const MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd, MACROBLOCKD * xd",0
79,"<S2SV_ModStart> > maxn ) { <S2SV_ModStart> ""Action <S2SV_blank> overflow!!"" ) ; return 0 ; }",0
80,<S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( & prep -> p_n ) ; <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> n = EXTRACT_32BITS,0
81,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
82,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void addModuleArgument ( <S2SV_ModStart> * pTable, sqlite3_int <S2SV_ModEnd> * zArg ) <S2SV_ModStart> zArg ) { sqlite3_int <S2SV_ModEnd> nBytes = sizeof",0
83,<S2SV_ModStart> ; } } if ( interp_window_coeff == NULL ) return - 1 ;,0
84,<S2SV_ModStart> ) p += ( UChar * ),0
85,,0
86,,1
87,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
88,<S2SV_ModStart> + x > diffBlockLength || diffPtr + diffBlockLength || extraPtr + y > extraBlockLength || extraPtr + extraBlockLength || extraPtr + extraBlockLength || extraPtr + extraBlockLength || extraPtr + extraBlockLength || <S2SV_ModEnd> extraPtr + extraBlockLength,0
89,<S2SV_ModStart> np -> opt <S2SV_ModEnd> ) ; err,0
90,<S2SV_ModStart> ; if ( number_pixels < 0 || number_pixels > ( UINT_MAX / number_data_bands ) ) { status = ERROR_INVALIDDATA ; break ; } if (,0
91,<S2SV_ModStart> data ) { ( void ) ctx ; ( void ) data ;,0
92,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
93,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
94,<S2SV_ModStart>. as_int ; if ( near_sadidx [ vcnt ]. as_int == 0 ) return ;,0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
97,<S2SV_ModStart> msicap msicap ; int ret ; <S2SV_ModStart> 0 ) ; ret = <S2SV_ModEnd> pci_emul_add_capability ( dev,0
98,<S2SV_ModStart> ) ; } if ( cmd -> flags & REDIS_REPL_CONNECTED ) return REDIS_ERR ;,0
99,"<S2SV_ModStart> vpx_codec_err_t res ; vpx_codec_err_t ret ; <S2SV_ModStart> g_pass!= VPX_RC_ONE_PASS && ( ctx -> cfg. g_pass!= VPX_RC_ONE_PASS ) <S2SV_ModStart> ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; ret = vpx_set_config ( ctx, cfg, ctx -> cfg, ctx -> cfg ) ; if ( ret < 0 ) { ctx -> cfg = * cfg ; set_vp8e_config ( & ctx -> oxcf, ctx -> cfg, NULL ) ; return ret ; }",0
100,<S2SV_ModStart> { cpi -> zbin_mode_boost <S2SV_ModEnd> = 0 ;,0
101,<S2SV_ModStart> info -> si_code > <S2SV_ModEnd> 0 ) return <S2SV_ModStart> return - EPERM <S2SV_ModEnd> ; return do_send_specific,0
102,<S2SV_ModStart> ; tmp_strsize = <S2SV_ModEnd> ptr -> size <S2SV_ModStart> size - 8 <S2SV_ModEnd> ; tmp_str =,0
103,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
104,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> -> state == fmode <S2SV_ModEnd> ) return ; <S2SV_ModStart> -> state = fmode <S2SV_ModEnd> ; } state",0
105,<S2SV_ModStart> read_info ) ; <S2SV_ModEnd> if ( EOFBlob,1
106,<S2SV_ModStart> 0 ; } memcpy <S2SV_ModEnd> ( elem.,0
107,"<S2SV_ModStart>, i, <S2SV_ModEnd> JPC_QCX_GETEXPN ( qcd <S2SV_ModStart>, i, <S2SV_ModEnd> JPC_QCX_GETMANT ( qcd",0
108,<S2SV_ModStart> ; if (! c -> video_size ) return AVERROR_INVALIDDATA ; if (,0
109,"<S2SV_ModStart> 1, caplen <S2SV_ModEnd> ) ; return",0
110,"<S2SV_ModStart> * name = fit_get_name_safe <S2SV_ModEnd> ( fit,",0
111,<S2SV_ModStart> ; if ( kfifo_safe_alloc <S2SV_ModEnd> ( & state,0
112,"<S2SV_ModStart> * iface, vpx_codec_dec_cfg_t <S2SV_ModEnd> * cfg,",0
113,<S2SV_ModStart> ; value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1100WritePhyReg (,0
114,<S2SV_ModStart> ; ipc. ipc_hdr = ipc. ipc_hdr ; ipc.,0
115,<S2SV_ModStart> else if ( <S2SV_ModEnd> flags & VPX_CODEC_USE_XMA <S2SV_ModStart> flags & VPX_CODEC_USE_XMA <S2SV_ModEnd> ) res =,0
116,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
117,"<S2SV_ModStart> counter ) ; nfs_open_access <S2SV_ModEnd> ( xdr,",0
118,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ) ; return 0 <S2SV_ModStart> break ; } return 1 ;,0
119,<S2SV_ModStart> len ) ; r_strbuf_release ( & op -> esil ) ;,0
120,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
121,<S2SV_ModStart> goto trunc ; ND_TCHECK_16BITS ( & lshp -> ls_type ) ;,0
122,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { if ( ret == 0 ) ret = - EFAULT ; break ; } <S2SV_ModEnd> * obuf =",1
123,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
124,<S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ) <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ),1
125,"<S2SV_ModStart> * costs, vpx_tree <S2SV_ModEnd> tree, const <S2SV_ModStart> tree, const vpx_tree <S2SV_ModEnd> * probs, <S2SV_ModStart> ) { const vpx_tree <S2SV_ModEnd> probs [ i <S2SV_ModStart> ) ; const vpx_tree_index <S2SV_ModEnd> ii = tree",0
126,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
127,"<S2SV_ModStart>, c, count <S2SV_ModEnd> ) ; if",0
128,"<S2SV_ModStart> fadst16 ( const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> output ) { tran_low_t <S2SV_ModEnd> s0, s1 <S2SV_ModStart> input, int16_t <S2SV_ModEnd> output ) { <S2SV_ModStart> input, int16_t <S2SV_ModEnd> output ) { <S2SV_ModStart> input ) { tran_low_t <S2SV_ModEnd> x0 = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 9 ] ; tran_low_t <S2SV_ModEnd> x6 = input <S2SV_ModStart> 9 ] ; tran_low_t <S2SV_ModEnd> x7 = input <S2SV_ModStart> 9 ] ; tran_low_t <S2SV_ModEnd> x7 = input <S2SV_ModStart> 9 ] ; tran_low_t <S2SV_ModEnd> x7 = input <S2SV_ModStart> 9 ] ; tran_low_t <S2SV_ModEnd> x9 = input <S2SV_ModStart> 9 ] ; tran_low_t <S2SV_ModEnd> x9 = input <S2SV_ModStart> 5 ] ; tran_low_t <S2SV_ModEnd> x12 = input <S2SV_ModStart> 12 ] ; tran_low_t <S2SV_ModEnd> x14 = input <S2SV_ModStart> 12 ] ; tran_low_t <S2SV_ModEnd> x15 = input <S2SV_ModStart> 12 ] ; tran_low_t <S2SV_ModEnd> x15 = input",0
129,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> flags |= HAS_EDSP <S2SV_ModStart> ; # endif <S2SV_ModEnd> return flags &,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
131,"<S2SV_ModStart> void count_segs_sb ( <S2SV_ModEnd> const TileInfo * <S2SV_ModStart> * const tile <S2SV_ModEnd>, int * <S2SV_ModStart> ) { const VP9_COMMON * const cm = & cpi -> common ; const <S2SV_ModStart> cm = & cm <S2SV_ModEnd> -> mi_stride ; <S2SV_ModStart> cm = & cm <S2SV_ModEnd> -> mi_stride ; <S2SV_ModStart> cm = & cm <S2SV_ModEnd> -> mi_stride ; <S2SV_ModStart> cm = & cm <S2SV_ModEnd> -> mi_stride ; <S2SV_ModStart> cm = & cm <S2SV_ModEnd> -> mi_stride ; <S2SV_ModStart> cm = & cm <S2SV_ModEnd> -> mi_stride ; <S2SV_ModStart> cm = & cm <S2SV_ModEnd> -> mi_stride ; <S2SV_ModStart> cm = & cm <S2SV_ModEnd> -> mi_stride ; <S2SV_ModStart> cm = & cm <S2SV_ModEnd> -> mi_stride ; <S2SV_ModStart> cm = & cm <S2SV_ModEnd> -> mi_stride ; <S2SV_ModStart> cm = & cm <S2SV_ModEnd> -> mi_stride ; <S2SV_ModStart> cm = & cm <S2SV_ModEnd> -> mi_stride ; <S2SV_ModStart> cm = & cm <S2SV_ModEnd> -> mi_stride ; <S2SV_ModStart> cm = & cm <S2SV_ModEnd> -> mi_stride ; <S2SV_ModStart> cm = & cm <S2SV_ModEnd> -> mi_stride ; <S2SV_ModStart> cm = & cm <S2SV_ModEnd> -> mi_stride ; <S2SV_ModStart> cm = & cm <S2SV_ModEnd> -> mi_stride ; <S2SV_ModStart> cm = & cm <S2SV_ModEnd> -> mi",0
132,<S2SV_ModStart> ) break ; <S2SV_ModEnd> if (!,0
133,<S2SV_ModStart> get_blocks_flags = EXT4_GET_BLOCKS_CREATE | EXT4_GET_BLOCKS_DELALLOC_RESERVE,0
134,"<S2SV_ModStart> ; size_t canonnamelen = 0 ; size_t addrlen <S2SV_ModStart>, handle, <S2SV_ModEnd> p -> ai_flags <S2SV_ModStart> -> ai_flags, <S2SV_ModEnd> p -> ai_family <S2SV_ModStart> -> ai_family, <S2SV_ModEnd> p -> ai_protocol <S2SV_ModStart> p -> ai_protocol, <S2SV_ModEnd> p -> ai_protocol <S2SV_ModStart> p -> ai_protocol, <S2SV_ModEnd> p -> ai_addrlen <S2SV_ModStart> p -> ai_addrlen, <S2SV_ModEnd> p -> ai_addrlen <S2SV_ModStart> p -> ai_addrlen, <S2SV_ModEnd> p -> ai_addrlen <S2SV_ModStart> p -> ai_addrlen <S2SV_ModEnd> )!= OE_OK",0
135,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
136,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
137,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int set_registers (,0
138,"<S2SV_ModStart> mod_ty Module ( asdl_seq <S2SV_ModEnd> * body,",0
139,<S2SV_ModStart> >> 4 ; <S2SV_ModEnd> if ( ctx <S2SV_ModStart> write_idx ) ; <S2SV_ModEnd> if ( ctx <S2SV_ModStart> ) ; } <S2SV_ModEnd> buf -> ts_start,0
140,<S2SV_ModStart> ( method == LPF_PICK_FROM_Q <S2SV_ModEnd> ) { const <S2SV_ModStart> int q = vpx_ac_quant <S2SV_ModEnd> ( cm -> <S2SV_ModStart> cm -> base_qindex <S2SV_ModEnd> ) ; int,0
141,<S2SV_ModStart> ) ) ; btif_enable_bonded_devices ( ) ;,0
142,"<S2SV_ModStart> int a = luaL_getnum <S2SV_ModEnd> ( fmt,",0
143,"<S2SV_ModStart> image ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
144,"<S2SV_ModStart> (! ctx <S2SV_ModEnd> ) res = <S2SV_ModStart>. decode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, data,",0
145,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int isofs_read_inode (,0
146,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> ) ; } sendClean ( outputbuffer ) ;",1
147,<S2SV_ModStart> self ) { Py_CLEAR ( self ) ;,0
148,<S2SV_ModStart> < count ; i ++ <S2SV_ModEnd> ) { n,0
149,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_Format ( PyExc_TypeError, ""Module <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> must <S2SV_blank> be <S2SV_blank> a <S2SV_blank> list, <S2SV_blank> not <S2SV_blank> a <S2SV_blank> %.200s"", tmp -> ob_type -> tp_name, tmp -> ob_type -> tp_name ) ; goto failed ; } tmp = _PyObject_GetAttrId ( obj, & tmp ) ; if ( tmp == NULL ) goto failed ; if (! PyList_Check ( tmp ) ) { int res ; res = obj2ast_stmt ( PyExc_RuntimeError, ""Module <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> must <S2SV_blank> be <S2SV_blank> a <S2SV_blank> list, <S2SV_blank> not <S2SV_blank> a <S2SV_blank> %.200s"", tmp -> ob_type -> tp_name ) ; goto failed ; } asdl_seq_SET ( body, i, value ) ; } else { int res ; res = obj2ast_stmt ( PyExc_RuntimeError, ""Module <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank>",0
150,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
151,<S2SV_ModStart> ; if ( msg_sys -> msg_control ) msg_sys -> msg_control = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; if ( <S2SV_ModStart> ; } else { <S2SV_ModStart> VERIFY_WRITE ) ; },0
152,<S2SV_ModStart> buffer_head * dibh <S2SV_ModEnd> ; u64 bn <S2SV_ModStart> end_of_metadata = height <S2SV_ModEnd> ; int eob,0
153,"<S2SV_ModStart> ( ) ) ) ; fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12""",0
154,"<S2SV_ModStart> } else { if ( value == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> create <S2SV_blank> attribute <S2SV_blank> \'{%s}%s\'.\\n"", attr -> name, value ) ; goto error ; }",0
155,"<S2SV_ModStart> { if ( safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> { if ( safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> { if ( safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> { if ( safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.cshrc"",",0
156,<S2SV_ModStart> msix_tab_size ) { <S2SV_ModEnd> bzero ( msixcap,1
157,<S2SV_ModStart> ; if ( <S2SV_ModEnd> js_regexec ( re,0
158,<S2SV_ModStart> : if ( Long_val <S2SV_ModEnd> ( Field (,1
159,"<S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; ksz8851WriteReg <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( isr & KSZ8851_ISR_LCIE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_ISR_TXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR_TXIS <S2SV_ModEnd> ) ; n <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK",0
160,"<S2SV_ModStart> VP9_COMMON * cm <S2SV_ModEnd> ) { vpx_wb_write_literal <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
161,"<S2SV_ModStart> ( ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, msglen ) ) ; <S2SV_ModEnd> UIPC_UNLOCK ( )",0
162,<S2SV_ModStart> ; if ( <S2SV_ModEnd> peerec ) {,0
163,"<S2SV_ModStart> ( ) ; strncpy <S2SV_ModEnd> ( t1_buf_array,",0
164,"<S2SV_ModStart>, BLOCK_SIZE subsize, MACROBLOCKD * xd <S2SV_ModStart> int bsl = b_width_log2_lookup [ bsize ] <S2SV_ModEnd>, hbs = <S2SV_ModStart> / 4 ; if ( bsize < BLOCK_8X8 ) { set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = 0 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col, bsize ) ; return ; } <S2SV_ModStart> case PARTITION_NONE : if ( bsize < BLOCK_8X8 ) { set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = 0 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = 0 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col + hbs ) ; * ( xd -> mi [ 0 ] ) = 1 ; set_modeinfo_",0
165,"<S2SV_ModStart> key_ref ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) { ret = - ENOKEY ; goto error2 ; }",1
166,<S2SV_ModStart> ; } } if ( 0 == ps_dec -> u1_cur_slice_size ) { return IV_FAIL ; },0
167,<S2SV_ModStart> var_off ) ; if (! src_known ) return 0 ;,0
168,<S2SV_ModStart> pTcon ) ; rc = - EINVAL ;,0
169,<S2SV_ModStart> -> opt ; rcu_read_lock ( ) ; <S2SV_ModStart> th -> opt ) ; rcu_read_unlock (,0
170,"<S2SV_ModStart> ) { int <S2SV_ModEnd> number_of_keyframes, encode_frame_count <S2SV_ModStart> svc_ctx ) ; <S2SV_ModEnd> svc_log ( svc_ctx <S2SV_ModStart> ; number_of_keyframes = si -> encode_frame_count / <S2SV_ModEnd> si -> kf_dist <S2SV_ModStart> si -> kf_dist <S2SV_ModEnd> ; for ( <S2SV_ModStart> i ) { <S2SV_ModEnd> if ( svc_ctx",0
171,<S2SV_ModStart> = new_cols ; screen -> buffers [ 1 ] = NULL ;,0
172,<S2SV_ModStart> n ) { int in_named_escape = 0 ; <S2SV_ModStart> NULL ) ; if (! in_named_escape ) { in_named_escape = 1 ; } else if ( in_named_escape ) { in_named_escape = 1 ; } else if ( in_named_escape ) { in_named_escape = 1 ; } else if ( in_named_escape ) { in_named_escape = 1 ; } else if ( in_named_escape ) { in_named_escape = 1 ; } else if ( in_named_escape ) { in_named_escape = 1 ; } else if ( in_named_escape ) { in_named_escape = 1 ; } else if ( in_named_escape ) { in_named_escape = 1 ; } else if ( in_named_escape ) { in_named_escape = 1 ; } else if ( in_named_escape ) { in_named_escape = 1 ; } else if ( in_named_escape ) { in_named_escape = 1 ; } else if ( in_named_escape ) { in_named_escape = 1 ; } else if ( in_named_escape ),0
173,"<S2SV_ModStart> ( pd, <S2SV_ModEnd> g_settings_dump_location ) ;",0
174,"<S2SV_ModStart> ""rfbScaledScreenUpdateRect"" ) ; <S2SV_ModEnd> if ( screen",0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AUTH <S2SV_blank> ID <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",0
176,"<S2SV_ModStart> in_what_stride, in_what_stride <S2SV_ModEnd> ) + in_what_stride",0
177,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> = tile -> mi_col_start <S2SV_ModEnd> ; mi_col < <S2SV_ModStart> ; mi_col < td -> mi_col_end <S2SV_ModEnd> ; mi_col += <S2SV_ModStart> ; mi_col < td -> mi_col_end <S2SV_ModEnd> ; mi_col += <S2SV_ModStart> ; mi_col < td -> mi_col_end <S2SV_ModEnd> ; mi_col += <S2SV_ModStart> ; mi_col < td -> mi_col_end <S2SV_ModEnd> ; mi_col += <S2SV_ModStart> ; mi_col < td -> mi_col_end <S2SV_ModEnd> ; mi_col += <S2SV_ModStart> ; mi_col < td -> mi_col_end <S2SV_ModEnd> ; mi_col += <S2SV_ModStart> ; mi_col < td -> mi_col_end <S2SV_ModEnd> ; mi_col += <S2SV_ModStart> ; mi_col < td -> mi_col_end <S2SV_ModEnd> ; mi_col += <S2SV_ModStart> ; mi_col < td -> mi_col_end <S2SV_ModEnd> ; mi_col += <S2SV_ModStart> ; mi_col < td -> mi_col_end <S2SV_ModEnd> ; mi_col += <S2SV_ModStart> ; mi_col < td -> mi_col_end <S2SV_ModEnd> ; mi_col += <S2SV_ModStart> ; mi_col < td",0
178,"<S2SV_ModStart> ; dh = nf_ct_dccp_header_pointer <S2SV_ModEnd> ( skb,",0
179,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> * optp, const <S2SV_ModStart> & 3 ) { <S2SV_ModStart> = IPOPT_END ; }",0
180,<S2SV_ModStart> ; if (! connection <S2SV_ModEnd> ) goto error,0
181,<S2SV_ModStart> * findalldevs_if ; size_t <S2SV_ModEnd> nif = 0 <S2SV_ModStart> 0 ; } if ( plen < sizeof ( struct rpcap_findalldevs_if ) ) { return - 1 ; } <S2SV_ModStart> next ) { if ( plen < sizeof ( struct rpcap_findalldevs_if ) ) { return - 1 ; },0
182,"<S2SV_ModStart> client_uid, DEFAULT_DUMP_DIR_MODE, NULL",0
183,<S2SV_ModStart> ; x += 4 <S2SV_ModEnd> ) { index,1
184,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
185,"<S2SV_ModStart> 0 ) { if ( num_images > 1 ) ThrowReaderException ( CorruptImageError, ""UncompressedImageError"" ) ;",0
186,<S2SV_ModStart> len ) ; ND_TCHECK ( bp [ 4 ] ) ; <S2SV_ModStart> len ) ; ND_TCHECK ( bp [ 4 ] ) ;,0
187,<S2SV_ModStart> ; if ( <S2SV_ModEnd>! ptrace_has_cap (,0
188,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
189,<S2SV_ModStart> ; default : if ( NULL == ps_codec -> ps_codec_id ) { <S2SV_ModStart> return ; } },0
190,<S2SV_ModStart> curr_head ) ; dd -> per_sdma = NULL ;,0
191,"<S2SV_ModStart>, int rep_quick, ulong rec_length, ulong rec_length, ulong rec_length, ulong rec_length, ulong rec_length, ulong rec_length, ulong rec_length <S2SV_ModEnd> ) { int <S2SV_ModStart> ) ) ; if ( rec_length < 0 ) { rec_length = MY_MUTEX_INIT_FAST ; } else { rec_length = MY_MUTEX_INIT_FAST ; }",0
192,<S2SV_ModStart> } pairs = palloc0 <S2SV_ModEnd> ( pcount *,0
193,<S2SV_ModStart> val ) ; <S2SV_ModEnd> if ( strcmp,0
194,"<S2SV_ModStart> { agoo_log_cat ( & p <S2SV_ModEnd>, ""%s"",",0
195,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> 256 ] ; tran_low_t <S2SV_ModEnd> * outptr = <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16",0
196,"<S2SV_ModStart> goto out ; if ( g_str_has_prefix ( app, ""prefix"" ) || g_str_has_prefix ( app, ""prefix"" ) || g_str_has_prefix ( app, ""prefix"" ) || g_str_has_prefix ( app, ""prefix"" ) || g_str_has_prefix ( app, ""prefix"" ) || g_str_has_prefix ( app, ""prefix"" ) || g_str_has_prefix ( app, ""prefix"" ) || g_str_has_prefix ( app, ""prefix"" ) || g_str_has_prefix ( app, ""prefix"" ) || g_str_has_prefix ( app, ""prefix"" ) || g_str_has_prefix ( app, ""prefix"" ) || g_str_has_prefix ( app, ""prefix"" ) || g_str_has_prefix ( app, ""prefix"" ) || g_str_has_prefix ( app, ""prefix"" ) || g_str_has_prefix ( app, ""prefix"" ) || g_str_has_prefix ( app, ""prefix"" ) || g_str_has_prefix",0
197,"<S2SV_ModStart> * temp_filename = osi_calloc ( strlen ( filename ) + 5, <S2SV_ModEnd> strlen ( filename <S2SV_ModStart> ( filename ) <S2SV_ModEnd> ) ; if <S2SV_ModStart> node ) ; <S2SV_ModEnd> FILE * fp <S2SV_ModStart> enode ) ; <S2SV_ModEnd> } if ( <S2SV_ModStart> sections ) ) { <S2SV_ModStart> fp ) ; } <S2SV_ModStart> fp ) ; free ( temp_filename ) ;",0
198,<S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( tptr ) ;,0
199,"<S2SV_ModStart>, NULL ) <S2SV_ModEnd> ; return ;",0
200,"<S2SV_ModStart> ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" <S2SV_ModEnd> ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModStart> ""Content-Length: <S2SV_blank> %d\\r\\n"" ""%s"" ""\\r\\n"" ""%s"" <S2SV_ModEnd>, request,",0
201,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 0 ) ; copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> src, dest <S2SV_ModEnd> ) ; unlink",0
202,<S2SV_ModStart>!= BFA_STATUS_OK ) { kfree ( fcstats ) ; <S2SV_ModStart> return NULL ; },1
203,"<S2SV_ModStart> -> x = MinF <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> y = MinF <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> z = MinF <S2SV_ModEnd> ( 1.0f,",0
204,<S2SV_ModStart> ; rec -> <S2SV_ModEnd> sasl_password = src,0
205,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
206,"<S2SV_ModStart> o, datao ; exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" )",0
207,<S2SV_ModStart> ) ; } if ( my_errno!= EINVAL ) { <S2SV_ModStart> ) ) ; },0
208,"<S2SV_ModStart> olen ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> ; CURLcode res ; size_t alloc_len <S2SV_ModStart> hex ; CURLcode res ; size_t alloc_len <S2SV_ModStart> hex ; CURLcode res <S2SV_ModEnd> ; if ( <S2SV_ModStart> hex ) ; res = Curl_convert_from_network ( handle, & in, 1 ) ; if ( res ) { free ( ns ) ; return NULL ; } <S2SV_ModStart> hex ) ; res = Curl_convert_from_network ( handle, & in, 1 ) ; if ( res <S2SV_ModEnd> ) { free",0
209,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
210,<S2SV_ModStart> ; def -> <S2SV_ModEnd> session_setup = usm_session_init,0
211,"<S2SV_ModStart>! match ( eflags <S2SV_ModEnd>, sp,",0
212,<S2SV_ModStart> idx ] ; <S2SV_ModEnd> switch ( action,0
213,<S2SV_ModStart> break ; } if ( packets == 0 ) return ( i ) ;,0
214,<S2SV_ModStart> open_list ) { list_del ( & slave -> active_list ) ; <S2SV_ModStart> slave_active_lock ) ; list_del ( & slave -> active_list ) ;,0
215,<S2SV_ModStart> -> u4_bitoffset = ih264d_read_mmco_commands <S2SV_ModEnd> ( ps_dec ),0
216,<S2SV_ModStart> int_fast32_t widthOverflow = ( <S2SV_ModStart> info -> originalWidth ) <S2SV_ModStart> int_fast32_t heightOverflow = ( <S2SV_ModStart> info -> originalHeight ) <S2SV_ModStart> int_fast32_t newRasterSize = ( <S2SV_ModStart> info -> rasterSize ),0
217,"<S2SV_ModStart> validator -> user, false",0
218,<S2SV_ModStart> bus ] ; <S2SV_ModEnd> si = &,0
219,"<S2SV_ModStart>, timeo ) <S2SV_ModEnd> ; while (",0
220,<S2SV_ModStart> += 9 ; if ( * s == '/' ) { const char * t = ++ s ; while ( * t &&! * t ) t ++ ; while ( * t &&! * t ) t ++ ; t ++ ; } else { <S2SV_ModStart> t ++ ; },0
221,"<S2SV_ModStart> ; result = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL ) )",1
222,<S2SV_ModStart> msixcap msixcap ; if <S2SV_ModEnd> ( msgnum >= <S2SV_ModStart> >= MAX_MSIX_TABLE_ENTRIES ) return - ENODEV ; <S2SV_ModEnd> tab_size = msgnum,0
223,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",1
224,<S2SV_ModStart> == NULL ) return KRB5KDC_ERR_PREAUTH_FAILED <S2SV_ModEnd> ; status = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> X509_NAME_free ( is,0
225,<S2SV_ModStart> cpi ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; <S2SV_ModStart> else if ( frame_type <S2SV_ModEnd> == 0 ) <S2SV_ModStart> else if ( frame_type <S2SV_ModEnd> == USE_LARGESTALL ) <S2SV_ModStart> else if ( frame_type <S2SV_ModEnd> == USE_FULL_RD ),0
226,<S2SV_ModStart> break ; } if ( im -> gdes [ i ]. end - im -> gdes [ i ]. end - im -> gdes [ i ]. end - im -> gdes [ i ]. end - im -> gdes [ i ]. end - im -> gdes [ i ]. end - im -> gdes [ i ]. end - im -> gdes [ i ]. end - im -> gdes [ i ]. end - im -> gdes [ i ]. end - im -> gdes [ i ]. end - im -> gdes [ i ]. end - im -> gdes [ i ]. end - im -> gdes [ i ]. end - im -> gdes [ i ]. end - im -> gdes [ i ]. end - im -> gdes [ i ]. end - im -> gdes [ i ]. end - im -> gdes [ i ]. end - im -> gdes [ i ]. end - im -> gdes [ i ]. end - im -> gdes [ i ]. end - im -> gdes [ i ]. end - im -> gdes [ i ]. end - im -> gdes [ i ].,0
227,,0
228,<S2SV_ModStart> = sizeof ( * info <S2SV_ModEnd> ) + size,0
229,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,1
230,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
231,"<S2SV_ModStart> b ) ; log_info ( ""Watching <S2SV_blank> system <S2SV_blank> buttons <S2SV_blank> on <S2SV_blank> /dev/input/%s <S2SV_blank> (%s)"", b -> name, name ) ;",0
232,,0
233,<S2SV_ModStart> -> lun ) sas_eh_defer_cmd <S2SV_ModEnd> ( cmd ),0
234,,0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,<S2SV_ModStart> ; if ( Rec. RecordLength > 0 ) Rec. RecordLength = 0 ; if (,0
237,,1
238,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
239,"<S2SV_ModStart> case SEEK_SET : <S2SV_ModEnd> if ( position <S2SV_ModStart> > psf -> header_end ) { psf_fseek ( psf, position, whence ) ; return ; } ; if ( position > psf -> header_end ) { psf_fseek ( psf, position, whence ) ; return ; } ; } ; if ( position > psf -> header_end ) { psf_fseek ( psf, position, whence ) ; return ; } <S2SV_ModEnd> if ( psf <S2SV_ModStart> < 0 ) { psf_fseek ( psf, position, whence ) ; return ; } <S2SV_ModEnd> if ( psf <S2SV_ModStart> < 0 ) { psf_fseek ( psf, position, whence ) ; return ; } <S2SV_ModEnd> if ( psf <S2SV_ModStart> < 0 ) { psf_fseek ( psf, position, SEEK_CUR ) ; return ; } <S2SV_ModEnd> if ( psf <S2SV_ModStart> + position <= psf -> header_end ) { psf_fseek ( psf, position, SEEK_CUR ) ; return ; } <S2SV_ModEnd> if ( psf <S2SV_ModStart> + position <= psf -> header_end ) { psf_fseek ( psf, position, SEEK_",0
240,<S2SV_ModStart> u4_ofst ) ; if ( ps_cabac -> u4_ofst ),0
241,<S2SV_ModStart> ; if ( c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>' ) && c -> ch!= _T ( '>',0
242,<S2SV_ModStart> perf_event_context * ctx <S2SV_ModEnd> ; struct task_struct <S2SV_ModStart> event ) ; ctx <S2SV_ModEnd> -> state =,0
243,<S2SV_ModStart> -> post_proc_flag = <S2SV_ModEnd> ctx -> dbg_color_ref_frame_flag <S2SV_ModStart>. noise_level ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
244,<S2SV_ModStart> = 0 ; if ( length < sizeof ( struct olsr_msg4 ) ) { goto trunc ; } <S2SV_ModStart> ) ) ; if ( length < sizeof ( struct olsr_msg4 ) ) { goto trunc ; },0
245,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vpx_usec_timer_start ( & <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,1
246,"<S2SV_ModStart> ) ) { <S2SV_ModEnd> exit ( 1 <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone""",0
247,<S2SV_ModStart> -> synth_size ; if ( ptr_hbe_txposer -> num_planes > 1 ) { ptr_hbe_txposer -> num_planes = 1 ; },0
248,"<S2SV_ModStart> lua_module ) ; <S2SV_ModEnd> int result ; <S2SV_ModStart> ; if ( lua_checkstack ( L, prov_spec -> args -> nelts ) ) { ap_log_rerror ( APLOG_MARK, APLOG_ERR, 0, r, APLOGNO ( 02314 ) ""Unable <S2SV_blank> to <S2SV_blank> compile <S2SV_blank> VM <S2SV_blank> for <S2SV_blank> authz <S2SV_blank> provider <S2SV_blank> %s"", prov_spec -> name ) ; return AUTHZ_GENERAL_ERROR ; } if (",0
249,<S2SV_ModStart> ; if ( quantum_info &&,0
250,<S2SV_ModStart> (! proto_end ||! url,0
251,<S2SV_ModStart> end = path <S2SV_ModEnd> ; do {,0
252,<S2SV_ModStart> ; if ( server. shutdown_asap &&,0
253,<S2SV_ModStart> channel ) ; <S2SV_ModEnd> set_description ( client,1
254,<S2SV_ModStart> book -> dim && i < n,1
255,,0
256,"<S2SV_ModStart> if (! vpx_check_scale_factors <S2SV_ModEnd> ( other_w,",0
257,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
258,"<S2SV_ModStart> -> pktoptions ; memset ( & sk, 0, sizeof ( sk ) ) ;",0
259,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> sctp_v6_protosw_exit ( ) <S2SV_ModStart> ( ) ; <S2SV_ModEnd> sctp_v4_pf_exit ( ),0
260,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void show_psnr (,0
261,<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen (,1
262,"<S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID",0
263,"<S2SV_ModStart> skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
264,"<S2SV_ModStart> ( fit, IMAGE_SIZE_INVALID <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( fit, IMAGE_SIZE_INVALID <S2SV_ModEnd> ) ) {",0
265,"<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> uinput_fd, UI_DEV_DESTROY )",1
266,<S2SV_ModStart> ( rc -> avg_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_bandwidth <S2SV_ModEnd> * rc ->,0
267,<S2SV_ModStart> ) if ( safe_strcmp <S2SV_ModEnd> ( argv [,0
268,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
269,<S2SV_ModStart> ib ] ; <S2SV_ModEnd> dequant_ptr = d,1
270,<S2SV_ModStart> FN_REFLEN ] ; my_free ( buff ) ;,0
271,<S2SV_ModStart> decrypt_cb ) { size_t <S2SV_ModEnd> n = ( <S2SV_ModStart> n = ( size_t <S2SV_ModEnd> ) ( data_end,0
272,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
273,"<S2SV_ModStart> int * returnintra, int max_mv_sse <S2SV_ModStart>, best_sse = max_mv_sse <S2SV_ModEnd>, best_rd_sse = <S2SV_ModStart>, best_rd_sse = max_mv_sse <S2SV_ModEnd> ; # endif",0
274,<S2SV_ModStart> -> size = ( int ),0
275,"<S2SV_ModStart> ; UWORD8 u1_level_idc = 0, u1_seq_parameter_set_id = 0 <S2SV_ModEnd> ; UWORD16 i2_max_frm_num",0
276,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vpx_svc_parameters_t * ) <S2SV_ModEnd> ; ctx ->",0
277,"<S2SV_ModStart> { uint16 bitspersample ; uint16 input_compression ; uint32 input_photometric ; uint32 input_photometric ; uint32 input_photometric ; uint32 width, length ; uint32 input_photometric ; uint32 input_photometric ; uint32 input_photometric ; uint32 width, length ; uint32 input_photometric ; uint32 input_photometric ; uint32 input_photometric ; uint32 input_photometric ; uint32 input_photometric ; uint32 input_photometric ; uint32 input_photometric ; uint32 input_photometric ; uint32 input_photometric ; uint32 input_photometric ; uint32 input_photometric <S2SV_ModEnd> ; copyFunc cf <S2SV_ModStart> ; if ( input_photometric == COMPRESSION_YCBCR ) { TIFFSetField ( out, TIFFTAG_SAMPLESPERPIXEL, input_photometric <S2SV_ModEnd> ) ; return",0
278,<S2SV_ModStart> a ) { <S2SV_ModEnd> char * pn <S2SV_ModStart> ; r = safe_lstat <S2SV_ModEnd> ( a ->,0
279,<S2SV_ModStart> i_sb ) ; <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> struct buffer_head * bh <S2SV_ModEnd> = NULL ; <S2SV_ModStart> ; if ( bh <S2SV_ModEnd> = udf_read_ptagged ( <S2SV_ModStart> ; if ( bh <S2SV_ModEnd> ) { if,0
280,<S2SV_ModStart> TX_SIZE tx_size_uv = vpx_memset <S2SV_ModEnd> ( mbmi ),0
281,"<S2SV_ModStart> mq_ops ) { spin_lock <S2SV_ModEnd> ( & fq <S2SV_ModStart> mq_flush_lock, flags <S2SV_ModEnd> ) ; flush_rq",0
282,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
283,"<S2SV_ModStart> { option = safeStrchr <S2SV_ModEnd> ( option,",0
284,<S2SV_ModStart> ) sizeof ( effect_param_t <S2SV_ModEnd> ) ) {,0
285,<S2SV_ModStart> ++ ) { if ( key_data [ i ]. key_data_length [ j ] == NULL ) { err = ENOMEM ; goto cleanup ; },0
286,<S2SV_ModStart> 0x02 ) ; if ( sbuf [ 1 ] > SC_MAX_APDU_BUFFER_SIZE ) { <S2SV_ModStart> crgram_len ) ; },0
287,<S2SV_ModStart> ) ) ; ret = - EINVAL ;,0
288,<S2SV_ModStart> ; } } return - 1 ;,1
289,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
290,<S2SV_ModStart> ; # if CONFIG_VP8_HIGHBITDEPTH <S2SV_ModEnd> if (!,0
291,<S2SV_ModStart> NULL ) ; goto END_OF_READING ; <S2SV_ModStart> NULL ) ; goto END_OF_READING ;,0
292,"<S2SV_ModStart> len ) { char * buf ; char * buf ; char * buf ; char * end ; <S2SV_ModStart> char * end <S2SV_ModEnd> ; if ( <S2SV_ModStart> s ++ ; buf = PyBytes_AsString ( u ) ; end = s + len ; while ( s < end ) { if ( * s == '\\\\' ) { * s ++ = * s ++ ; if ( * s == '\\\\' ) { * p ++ = * s ++ ; if ( * s == '\\\\' ) { * p ++ = * s ++ ; if ( * s == '\\\\' ) { strcpy ( p, ""u005c"" ) ; p += 5 ; } } } if ( * s == '\\\\' ) { * p ++ = * s ++ ; if ( * s == '\\\\' ) { strcpy ( p, ""u005c"" ) ; p += 5 ; } } if ( * s == '\\\\' ) { strcpy ( p, ""u005c"" ) ; p += 5 ; } if ( * s == '\\\\' ) { strcpy ( p, ""u005c"" ) ; p += 5 ; } } if ( * s == '\\\\' ) {",0
293,"<S2SV_ModStart> struct stat stb <S2SV_ModEnd> ; BUF * <S2SV_ModStart> long ull ; size_t <S2SV_ModEnd> wrerrno = 0 <S2SV_ModStart> ; if ( ( size_t ) <S2SV_ModStart>, buf, ( size_t ) <S2SV_ModStart>, buf, ( size_t )",0
294,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
295,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
296,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
297,<S2SV_ModStart> ps_cur_poc ) ; if (! ps_cur_poc ) { i2_cur_mb_skip_run = 1 ; return 0 ; },0
298,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> vterm_allocator_free ( screen,1
299,"<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & delay )",1
300,"<S2SV_ModStart> one, offset = 0",0
301,"<S2SV_ModStart> value ) { if ( strchr <S2SV_ModEnd> ( sclone ( <S2SV_ModStart> ( value ),'<S2SV_blank>') ) { <S2SV_ModEnd> httpSetRouteName ( state <S2SV_ModStart> ) ) ; }",0
302,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
303,<S2SV_ModStart> ||! ntime ||! nbit,0
304,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
305,<S2SV_ModStart> unused ) { return _Py_IDENTIFIER ( __dict__ ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
306,"<S2SV_ModStart> ) & desc, true",0
307,<S2SV_ModStart> -> private_data ; struct perf_event_context * ctx = event -> ctx ; <S2SV_ModStart> case PERF_EVENT_IOC_REFRESH : ctx -> ioc_periOD = ctx -> ioc_periOD ; <S2SV_ModStart> case PERF_EVENT_IOC_PERIOD : ctx -> ioc_periOD = ctx -> ioc_periOD ; <S2SV_ModStart> case PERF_EVENT_IOC_SET_OUTPUT : ctx -> ioc_periOD = ctx -> ioc_periOD ;,0
308,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> * r, PREDICTION_MODE <S2SV_ModEnd> y_mode ) { <S2SV_ModStart> ) { const PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode",0
309,<S2SV_ModStart> = block_size ; if ( block_size > CCP_MAX_BLOCK_SIZE ) return - EINVAL ;,0
310,"<S2SV_ModStart> iv ) ; if (! self ) ossl_raise ( eCipherError, NULL ) ;",0
311,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
312,<S2SV_ModStart> len ; } if ( len < 0 ) { return rv ; },0
313,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> return 0 ;,0
314,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ] ; const vpx_extra_bit <S2SV_ModEnd> * const b <S2SV_ModStart> b = & vpx_extra_bits <S2SV_ModEnd> [ t ]",0
315,"<S2SV_ModStart> struct vp9_write_bit_buffer wb <S2SV_ModEnd> ; struct vp9_write_bit_buffer <S2SV_ModStart> } ; struct vpx_write_bit_buffer saved_wb ; memset ( & wb, 0, sizeof ( wb ) ) <S2SV_ModEnd> ; write_uncompressed_header ( <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> += uncompressed_hdr_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb",0
316,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
317,<S2SV_ModStart> struct ikev2_id id = { 0 },0
318,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return - 1,0
319,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
320,"<S2SV_ModStart> ; WORD32 xt0_0, xt1_0, xt1_0, xt1_0, xt1_0, xt1_0, xt2_0, xt2_0, xt2_0 ; WORD32 x_0, x_l1_0, xl1_0, xl1_0, xt2_0 ; WORD32 x_0, x_l1_0, xl1_0, xl1_0 ; WORD32 x_0, x_l1_0, xl1_0, xl1_0, xl1_0 ; WORD32 x_0, x_l1_0, xl1_0, xl1_0 ; WORD32 x_0, x_l1_0, xl1_0, xl1_0 ; WORD32 x_0, x_l1_0, xl1_0, xl1_0 ; WORD32 x_0, x_l1_0, xl1_0, xl1_0 ; W",0
321,<S2SV_ModStart> mntent ) { <S2SV_ModEnd> mount_entry_on_generic ( mntent <S2SV_ModStart> mnt_dir ) ; return 0 ;,0
322,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
323,"<S2SV_ModStart> ( env, server_name_val, req_server_name_val <S2SV_ModEnd> ) ; rb_hash_aset",0
324,<S2SV_ModStart> endif int col_type = 0 <S2SV_ModStart> ; int prepare_retval = 0 <S2SV_ModStart> ; imp_sth_phb_t * fbind = NULL ; imp_sth_phb_t *,0
325,<S2SV_ModStart> need = 0 <S2SV_ModEnd> ; CELL first,0
326,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> JsVarFloat <S2SV_ModEnd> ftoa_bounded_extra ( JsVarFloat <S2SV_ModStart> val ) ) strlcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> < 0 ) strlcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> len ) ; else strlcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> len ) ; <S2SV_ModEnd> } else {",0
327,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( fast_pool ->,0
328,"<S2SV_ModStart> LEX_ID ) { memcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> len ) ; memcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> len ) ; memcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> len ) ; memcpy <S2SV_ModEnd> ( str,",0
329,,1
330,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
331,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
332,,0
333,"<S2SV_ModStart> { parse_global_option ( CMD_PRINT_HELP <S2SV_ModEnd>, NULL, <S2SV_ModStart> { parse_global_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL, <S2SV_ModStart> ; parse_service_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL, <S2SV_ModStart> ; parse_service_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL,",0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,<S2SV_ModStart> len ) ; <S2SV_ModEnd> if (!,0
336,<S2SV_ModStart> = e_error ; ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = 0 ;,0
337,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char * print_string,0
338,"<S2SV_ModStart>. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img, <S2SV_ModStart>. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img,",1
339,<S2SV_ModStart> ; if ( * cfg. suppress_win &&,0
340,<S2SV_ModStart> i < cols <S2SV_ModEnd> ; i ++,0
341,"<S2SV_ModStart> 0 ) { if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas.\\n"" ) ; <S2SV_ModStart> 0 ) { if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas.\\n"" ) ; <S2SV_ModStart> 0 ) { if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas.\\n"" ) ; <S2SV_ModStart> 0 ) { if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas.\\n"" ) ; <S2SV_ModStart> 0 ) { if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas.\\n"" ) ; <S2SV_ModStart> 0 ) { if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than",0
342,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
343,<S2SV_ModStart> ; ret = IHEVCD_SUCCESS <S2SV_ModEnd> ; if (,0
344,<S2SV_ModStart> ) ) { if ( strptr == NULL ) return - 1 ;,0
345,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( sun_info. type == RT_ENCODED ) { <S2SV_ModStart> ""ImproperImageHeader"" ) ; }",0
346,"<S2SV_ModStart> 0 ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 0600 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; return",1
347,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> BLOCK_8X8 : return vpx_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> BLOCK_16X8 : return vpx_mse16x8 <S2SV_ModEnd> ; case BLOCK_8X16 <S2SV_ModStart> BLOCK_8X16 : return vpx_mse8x16 <S2SV_ModEnd> ; default : <S2SV_ModStart> default : return vpx_mse16x16 <S2SV_ModEnd> ; } },1
348,<S2SV_ModStart> return return_pkinit_server_return_pkinit_server_return_pk ; if ( padata -> pa_type!= KRB5_PADATA_PKINIT_KX ) { return return return_pkinit_server_return_pk ; },0
349,"<S2SV_ModStart> flags ) ; memset ( vb, 0, sizeof ( vb ) ) ;",0
350,<S2SV_ModStart> size ) { if ( size == 0 ) return NULL ;,0
351,<S2SV_ModStart> -> serviceId == EXTRACT_32BITS <S2SV_ModEnd> && rxent ->,0
352,"<S2SV_ModStart> = bss_desc ; <S2SV_ModEnd> memcpy ( adhoc_start <S2SV_ModStart> req_ssid -> ssid_len ) ; memcpy ( adhoc_start -> ssid, req_ssid -> ssid_len",0
353,<S2SV_ModStart> ; if ( <S2SV_ModEnd>! sbuf ),0
354,"<S2SV_ModStart> struct l2cap_conf_rfc rfc ; memset ( & rfc, 0, sizeof ( rfc ) ) <S2SV_ModEnd> ; void * <S2SV_ModStart> sk ) ; rfc. mode = L2CAP_MODE_BASIC ; rfc. txwin_size = L2CAP_DEFAULT_RX_WINDOW ; rfc. max_transmit = L2CAP_DEFAULT_MAX_RECEIVE ; rfc. max_transmit = L2CAP_DEFAULT_MAX_RETRANS_TO ; rfc. monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; rfc. monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; rfc. monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; l2cap_add_conf_opt ( & ptr, L2CAP_CONF_RFC",0
355,"<S2SV_ModStart> { do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> r, MSG_WAITALL )",0
356,<S2SV_ModStart> u1_nal_unit_type ) ; if (! ps_dec -> u1_pic_decode_done ) { return ERROR_INCOMPLETE_FRAME ; },0
357,<S2SV_ModStart> ( pair!= NULL <S2SV_ModEnd> ) { mprAddItem,0
358,"<S2SV_ModStart> * delegation, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> -> type & fmode <S2SV_ModEnd> )!= open_flags <S2SV_ModStart> ( state, fmode <S2SV_ModEnd>, & deleg_cur <S2SV_ModStart>, NULL, fmode <S2SV_ModEnd> ) ; ret",0
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,"<S2SV_ModStart> * xd, uint64_t <S2SV_ModEnd> * out_rate_sum, <S2SV_ModStart> pd ) ; const int64_t <S2SV_ModEnd> * pred_sse ; <S2SV_ModStart> pd ) ; if ( cpi -> fn_ptr [ bs ]. vf ( p -> src. buf, p -> dst. buf, pd -> dst. stride, & sse ) ) { x -> pred_sse [ ref ] = sse ; } else { int64_t dist ; int64_t dist ; int64_t square_error = sse ; int64_t square_error = sse ; int64_t square_error = sse ; int64_t square_error = sse ; int64_t square_error = sse ; int64_t square_error = sse ; int64_t square_error = sse ; int64_t square_error = sse ; int64_t square_error = sse ; int64_t square_error = sse ; int64_t square_error = sse ; int64_t square_error = sse ; int64_t square_error = sse ; int64_t dist",0
361,<S2SV_ModStart> ; } } <S2SV_ModEnd> mincore_unmapped_range ( vma,0
362,<S2SV_ModStart> { if ( strlen ( username ) >= PAM_MAX_RESP_SIZE ) { return ( PAM_BUF_ERR ) ; } if (,0
363,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> ) { return vpx_read_tree <S2SV_ModEnd> ( r,",1
364,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",0
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,<S2SV_ModStart> depth ++ ; if ( buf2 == NULL ) return ( NULL ) ;,0
367,"<S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> length ) ; osSetEvent ( & interface -> nicTxEvent ) ; <S2SV_ModStart> length ) ; osSetEvent ( & interface -> nicTxEvent ) ;",0
368,<S2SV_ModStart> ; # endif mono_gc_invoke_finalizers ( ) ;,0
369,"<S2SV_ModStart> x_8, x_9 <S2SV_ModEnd> ; WORD32 n00 <S2SV_ModStart> x_0 + x_2 ; n01 = x_1 + x_3 ; n12 = x_1 + x_3 ; n12 = x_1 + x_3 ; n12 = x_1 + x_3 ; n12 = x_1 + x_3 ; n12 = x_1 + x_3 ; n12 = x_1 + x_3 ; n12 = x_1 - x_3 ; n12 = x_1 - x_3 ; n12 = x_1 - x_3 ; n12 = x_1 - x_3 ; n12 = x_1 - x_3 ; n12 = x_1 - x_3 ; n12 = x_1 - x_3 ; n12 = x_1 - x_3 ; n12 = x_1 - x_3 ; n12 = x_1 - x_3 ; n12 = x_1 - x_3 ; n12 = x_1 - x_3 ; n12 = x_1 - x_3 ; n12 = x_1 - x_3",0
370,<S2SV_ModStart> ; if ( <S2SV_ModEnd> pmd_none_or_clear_bad ( pmd,0
371,"<S2SV_ModStart> ""Incorrect <S2SV_blank> parameters:\\n"" ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> ] ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> ] ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> fout ) ; <S2SV_ModEnd> return 1 ;",0
372,"<S2SV_ModStart> i, result <S2SV_ModEnd> ; PyObject *",1
373,<S2SV_ModStart> vpx_codec_alg_priv * priv <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> VPX_CODEC_MEM_ERROR ; } vpx_codec_alg_priv_t * priv ; <S2SV_ModStart> VPX_CODEC_MEM_ERROR ; } priv = ctx -> priv ; <S2SV_ModStart> enc ) { priv <S2SV_ModEnd> -> cfg = <S2SV_ModStart> enc = & priv <S2SV_ModEnd> -> cfg ;,0
374,<S2SV_ModStart> ++ ; } <S2SV_ModEnd> pixel -> freq,0
375,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx ->,0
376,<S2SV_ModStart> out ; } if ( unlikely (! link_count ) ) goto out ;,0
377,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB (",0
378,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int bad_format_imginfo (,0
379,"<S2SV_ModStart> ; UtRegisterTest ( ""IPV6DefragGetOrderSimpleTest"", IPV6DefragGetOrderSimpleTest ) ; UtRegisterTest (",0
380,<S2SV_ModStart> = object_length ; <S2SV_ModEnd> r = coolkey_add_object_to_list,0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,<S2SV_ModStart> p_sys ) ; <S2SV_ModEnd> if ( p_sys,0
384,<S2SV_ModStart> exit_mf ; } <S2SV_ModEnd> if (!,0
385,<S2SV_ModStart> 4 ) ; size_t <S2SV_ModEnd> num_properties = GETINT32,0
386,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
387,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
388,"<S2SV_ModStart> ++ ) { if ( data_size < 0 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> data <S2SV_blank> size <S2SV_blank> is <S2SV_blank> %d.\\n"", data_size ) ; return AVERROR_INVALIDDATA ; }",0
389,<S2SV_ModStart> ; if (! NCH ( n ) ) return NULL ; if (,0
390,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> * mc_running_avg_y = ( YV12_BUFFER_CONFIG * mc_running_avg_y ) <S2SV_ModStart> * mc_running_avg_y = ( YV12_BUFFER_CONFIG * running_avg ) <S2SV_ModStart> * running_avg_y = ( YV12_BUFFER_CONFIG * running_avg ) <S2SV_ModStart> * running_avg_y = ( YV12_BUFFER_CONFIG * running_avg ) <S2SV_ModStart> * running_avg_y = ( YV12_BUFFER_CONFIG * running_avg ) <S2SV_ModStart> c ] ; <S2SV_ModEnd> } else { <S2SV_ModStart> c ] ; <S2SV_ModEnd> } else { <S2SV_ModStart> + adjustment ; <S2SV_ModEnd> } else { <S2SV_ModStart> + adjustment ; <S2SV_ModEnd> } else { <S2SV_ModStart> + adjustment ; <S2SV_ModEnd> } else { <S2SV_ModStart> + adjustment ; <S2SV_ModEnd> } } },0
391,<S2SV_ModStart> ; if ( result == SOCK_OK ) { return SOCK_MORE ; } if (,0
392,<S2SV_ModStart> = uregs ; <S2SV_ModEnd> # if XTENSA_HAVE_COPROCESS,0
393,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
394,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> if ( xop <S2SV_ModStart> == XCOL_SOURCE_RECV_OP ) return ; <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for""",0
395,"<S2SV_ModStart> if ( header && header == HDR ( new_bh ) <S2SV_ModStart> ext2_xattr_cache_insert ( new_bh ) ; ea_bdebug ( new_bh, ""using <S2SV_blank> block""",0
396,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
397,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; <S2SV_ModEnd> if ( (",0
398,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
399,<S2SV_ModStart> imsx * imsy <S2SV_ModEnd> ) ; if,0
400,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> Vpx_ref_frame_t * ) ; ( void ) ctx ; ( void ) ctr_id",0
401,<S2SV_ModStart> ps_cur_poc ) ; if (! ps_cur_poc ) { i2_cur_mb_skip_run = 1 ; return 0 ; },0
402,"<S2SV_ModStart>, u4_y_offset ; UWORD32 u4_x_dst_offset = 0 ; <S2SV_ModStart>, u4_y_offset ; u4_y_dst_offset = 0 ; <S2SV_ModStart>, u4_y_offset ; u4_y_dst_offset = 0 ; <S2SV_ModStart>, u4_y_offset ; u4_y_dst_offset = 0 ; <S2SV_ModStart>, u4_y_offset, u4_y_dst_offset, u4_y_dst_offset, u4_y_dst_offset, u4_y_dst_offset, u4_y_dst_offset, u4_y_dst_offset, u4_y_dst_offset, u4_y_dst_offset, u4_pred_strd, u4_pred_strd, u4_pred_strd, u4_pred_strd, u4_pred_strd, u4_pred_strd, u4_pred_strd, u4_pred_strd, u4_pred_strd, u4_pred_str",0
403,<S2SV_ModStart> ) { const VP9EncoderConfig <S2SV_ModEnd> * const cfg,0
404,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
405,<S2SV_ModStart> tx_size = plane? <S2SV_ModEnd> get_uv_tx_size ( mbmi <S2SV_ModStart> get_uv_tx_size ( mbmi ) : mbmi -> tx_size <S2SV_ModEnd> ; const BLOCK_SIZE,0
406,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 4 ) ; <S2SV_ModEnd> src += src_stride",0
407,<S2SV_ModStart> nrow ) { if ( row + img -> row_offset < rowsperstrip ) { return 0 ; },0
408,<S2SV_ModStart> ; } } <S2SV_ModEnd> return 0 ;,0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
410,<S2SV_ModStart> num & ( 1U << <S2SV_ModEnd> ( number -,0
411,"<S2SV_ModStart> ] ; const size_t <S2SV_ModEnd> w = vpx_img_plane_width <S2SV_ModStart> ( buf, stride <S2SV_ModEnd>, w,",0
412,"<S2SV_ModStart> ; uint16_t attr_len ; uint16_t <S2SV_ModEnd> orig_attr_len ; uint16_t <S2SV_ModStart> ; uint16_t last_block_len ; uint16_t bytes_left ; uint16_t bytes_left ; uint16_t bytes_left ; uint16_t bytes_left ; uint16_t bytes_left ; uint16_t bytes_left ; uint16_t bytes_left ; if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", avp -> length, avp -> length ) ; return - 1 ; } attr_len = avp -> length - sizeof ( struct l2tp_avp_t ) ; if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small",0
413,<S2SV_ModStart> case EVP_CTRL_SET_IVLEN : if ( arg > CHACHA_MAX_IVLEN ) return 0 ;,0
414,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0 ) ;",0
415,"<S2SV_ModStart> ; BT_DBG ( ""sock <S2SV_blank> %p, <S2SV_blank> sk <S2SV_blank> %pK"" <S2SV_ModEnd>, sock,",0
416,"<S2SV_ModStart> MT_CPTYPE_PASSSALT ) { memcpy <S2SV_ModEnd> ( pass_salt,",0
417,<S2SV_ModStart> ) { goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } else <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } else <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } else <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } else <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } else <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } else <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } else <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } mutt_socket_close ( adata -> conn ) ; bail : mutt_socket_close ( adata -> conn ) ; <S2SV_ModEnd> return - 1,0
418,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
419,<S2SV_ModStart> 0 ) { close ( gpsd_sock ) ; <S2SV_ModStart> gpsd_sock ) ; close ( gpsd_sock ) ;,0
420,"<S2SV_ModStart>, & rlen, 0",1
421,"<S2SV_ModStart> * slavename ; int ret = 0 ; <S2SV_ModStart> } # endif ret = <S2SV_ModStart> 82 ) ; if ( ret < 0 ) { syslog ( LOG_ERROR, _ ( ""(%d) <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> userfile <S2SV_blank> (%s)"", curconn -> username, ret ) ) ; goto error ; } <S2SV_ModStart> 16 ) ; ret = <S2SV_ModStart> state ) ; if ( ret < 0 ) { syslog ( LOG_ERROR, _ ( ""(%d) <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> userfile <S2SV_blank> (%s)"", curconn -> password, ret ) ) ; goto error ; }",0
422,<S2SV_ModStart> ; if ( name &&,0
423,<S2SV_ModStart> off } ; if ( strlen ( str ) > sizeof ( buf ) ) { return - 1 ; },0
424,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
425,<S2SV_ModStart> credssp ) ; free ( transport -> credssp ) ;,0
426,"<S2SV_ModStart>, buf_size, sizeof ( MnoteFujiEntry ) <S2SV_ModEnd> ) ) {",0
427,<S2SV_ModStart> bd_addr ) { btif_dm_remove_bond ( bd_addr ) ;,0
428,<S2SV_ModStart> i ; int <S2SV_ModEnd> expect ; txid <S2SV_ModStart> buf -> cursor <S2SV_ModEnd> ; xmin =,0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
430,<S2SV_ModStart> * epoll = TEMP_FAILURE_RETRY ( <S2SV_ModStart> _cast_epoll ( epoll_ ),0
431,"<S2SV_ModStart> = parse_global_option ( CMD_INITIALIZE <S2SV_ModEnd>, NULL,",0
432,,0
433,"<S2SV_ModStart> offset ) { unsigned long flags ; <S2SV_ModStart> = EXT4_JOURNAL ( page -> mapping -> host ) ; spin_lock_irqsave ( & page -> lock, flags <S2SV_ModEnd> ) ; if",0
434,<S2SV_ModStart> ++ ) { if (! writer ) return GF_OUT_OF_MEM ;,0
435,<S2SV_ModStart> ; int plen = 0 <S2SV_ModStart> ; # endif if ( password!= NULL ) { <S2SV_ModStart> = 0 ; },0
436,<S2SV_ModStart> ; if ( <S2SV_ModEnd> Prefix!= NULL,1
437,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
438,<S2SV_ModStart> ( ) ; g_hash_table_remove_all ( headers ) ;,0
439,"<S2SV_ModStart> -> y_buffer ; memcpy <S2SV_ModEnd> ( dst, <S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst,",0
440,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ( mi_col = td <S2SV_ModEnd> -> left_context ; <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> -> mi_col_end ;",0
441,<S2SV_ModStart> ; int hexdump = 0,0
442,"<S2SV_ModStart> mbmi, const MV <S2SV_ModEnd> mvs [ 2",0
443,<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ),0
444,"<S2SV_ModStart> ; if ( skb_expand_head_safe <S2SV_ModEnd> ( skb_out,",0
445,<S2SV_ModStart> ) return ; <S2SV_ModEnd> DEBUGMSGTL ( (,0
446,"<S2SV_ModStart> { fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, O_RDWR ) ) <S2SV_ModStart> 1 ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_KEY ) ) <S2SV_ModStart> EV_REL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_REL ) ) <S2SV_ModStart> x ++ ) TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_SYN ) )",0
447,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
448,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s,",0
449,"<S2SV_ModStart> iakerb_ctx_id_t * pctx, iakerb_ctx_id_t * ctx <S2SV_ModStart> = 0 ; <S2SV_ModEnd> ctx = ctx",0
450,"<S2SV_ModStart> ; status = SetImageExtent <S2SV_ModEnd> ( screen,",0
451,<S2SV_ModStart> ; while ( ( <S2SV_ModStart> )!= START_CODE_PREFIX ),0
452,<S2SV_ModStart> return - EINVAL <S2SV_ModEnd> ; if (,0
453,<S2SV_ModStart> ; if ( mono_class_inflate_generic_method <S2SV_ModEnd> ( klass ),0
454,<S2SV_ModStart> ; int tmp ; if ( count > sizeof ( buf ) ) return - EINVAL,0
455,"<S2SV_ModStart>, * wp <S2SV_ModEnd> ; do { <S2SV_ModStart> size_t len ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> == 'O' ) <S2SV_ModEnd> { repl =",0
456,<S2SV_ModStart> decContainer_t * ) H264SwDecMalloc0 <S2SV_ModEnd> ( sizeof (,0
457,<S2SV_ModStart> drop ; } <S2SV_ModEnd> opt -> optlen,0
458,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
459,<S2SV_ModStart> goto errout ; if ( info -> stagebook >= ci -> books ) goto errout ;,0
460,<S2SV_ModStart> krb5_key_data * key_data = NULL <S2SV_ModStart> err ) ; <S2SV_ModEnd> memcpy ( key_data,0
461,"<S2SV_ModStart> * self, Py_ssize_t <S2SV_ModEnd> idx, PyObject",0
462,<S2SV_ModStart> ] ) ; if ( nByte > 0 ) { <S2SV_ModStart> 1 ) ; },0
463,<S2SV_ModStart> filp ) { __sock_release <S2SV_ModEnd> ( SOCKET_I (,0
464,"<S2SV_ModStart> * orelse, string type_comment, <S2SV_ModStart> nlse = orelse ; p -> v. AsyncFor. type_comment = type_comment",0
465,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> my_bool <S2SV_ModEnd> mi_sort_index ( MI_CHECK <S2SV_ModStart> * param, my_bool <S2SV_ModEnd> * name )",0
466,,0
467,"<S2SV_ModStart> UINT error ; UINT16 <S2SV_ModEnd> ( s,",0
468,"<S2SV_ModStart> -> socket, ""%s"",",0
469,"<S2SV_ModStart> struct flowi6 fl6 ; memset ( & fl6, 0, sizeof ( fl6 ) )",0
470,<S2SV_ModStart> ; MATLAB_KO : <S2SV_ModEnd> image = DestroyImageList,0
471,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
472,"<S2SV_ModStart> 0 ; int <S2SV_ModEnd> result = RLC_OK <S2SV_ModStart> 8 ) ; * p_len = m_len ; m_len -- ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; if ( pad!= RSA_PUB ) { * p_len -= ( m_len - 1 ) ; * p_len -= ( m_len - 1 ) ; * p_len -= ( m_len - 1 ) ; bn_mod_2b ( m, m, ( k_len - * p_len ) * 8 ) ; bn_mod_2b ( m, m, ( k_len - * p_len ) * 8 ) ; bn_mod_2b ( m, m, ( k_len - * p_len ) * 8 ) ; * p_len -= ( m_len - 1 ) ; bn_mod_2b ( m, m, ( k_len - * p_len ) * 8 ) ; bn_mod_2b ( m, m, ( k_len - * p_len ) * 8 ) ;",0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,"<S2SV_ModStart> ( psf = _calloc <S2SV_ModEnd> ( 1,",0
475,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fix_interp_filter ( VP9_COMMON <S2SV_ModStart> cm -> counts -> <S2SV_ModEnd> switchable_interp [ j <S2SV_ModStart> i ] ; if ( c == 1 ) return 0 ; <S2SV_ModStart> } } } return 0 ;,0
476,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> VP9_COMMON * const <S2SV_ModStart> mi_cols ) ; <S2SV_ModEnd> vp9_setup_src_planes ( x <S2SV_ModStart> subsampling_y ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
477,<S2SV_ModStart> hp ) ; if ( retval!= 0 ) { <S2SV_ModStart> ) ; } },0
478,"<S2SV_ModStart> define EOFOp 0x07 <S2SV_ModEnd> char magick [ <S2SV_ModStart> ) ) ; if ( count!= 2 ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
479,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> sizeof ( tETH_HDR ),1
480,<S2SV_ModStart> ; ps_dec -> u2_cur_slice_num = 0 ; ps_dec ->,0
481,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> * karg ; <S2SV_ModEnd> int iocnum ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } return 0",0
482,"<S2SV_ModStart> -> columns, <S2SV_ModEnd> sizeof ( *",0
483,"<S2SV_ModStart> } else { fprintf ( stderr, <S2SV_ModEnd> ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", * <S2SV_ModStart> } else { fprintf ( stderr, <S2SV_ModEnd> ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", * <S2SV_ModStart> } else { fprintf ( stderr, <S2SV_ModEnd> ""Player <S2SV_blank> name <S2SV_blank> expected <S2SV_blank> after <S2SV_blank> -u"" ) ;",0
484,"<S2SV_ModStart> ; if ( buf_size < 2 ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if (",0
485,"<S2SV_ModStart> charbuf ), ""%s"",",0
486,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> unbind_ports ( void <S2SV_ModStart> void ) { int ret = 0 ; <S2SV_ModStart> ] ) ; ret = <S2SV_ModStart> ] ) ; if ( ret < 0 ) { CRYPTO_THREAD_unlock ( stunnel_locks [ LOCK_SECTIONS ] ) ; return ret ; } <S2SV_ModStart> -> ctx ) ret = <S2SV_ModStart> servname ) ; return ret ;,0
487,<S2SV_ModStart> void ) { if (! mnemonic ) return ;,0
488,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> )",0
489,"<S2SV_ModStart> image ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
490,<S2SV_ModStart> ps_slice_hdr ) { <S2SV_ModEnd> WORD32 st_rps_idx ;,0
491,"<S2SV_ModStart>, int fmt, int depth <S2SV_ModStart> child ) { if ( depth > depth ) depth = depth ; <S2SV_ModStart> child -> string, depth <S2SV_ModStart> child, depth <S2SV_ModEnd> ) ; if",0
492,<S2SV_ModStart> ; other = unix_peer <S2SV_ModEnd> ( sk ) <S2SV_ModStart> { if ( unix_peer <S2SV_ModEnd> ( other ) <S2SV_ModStart> } if ( unix_recvq_full <S2SV_ModEnd> ( other ),0
493,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; sendClean ( outputbuffer ) ;",1
494,<S2SV_ModStart> ( OM_uint32 ) KRB5_BAD_MSIZE <S2SV_ModEnd> ; return GSS_S_DEFECTIVE_TOKEN,0
495,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> ( args, vpx_ref_frame_t <S2SV_ModEnd> * ) ;",0
496,<S2SV_ModStart> plug ) ; <S2SV_ModEnd> put_ioctx ( ctx,0
497,"<S2SV_ModStart>, int rep_quick, my_bool no_key_block <S2SV_ModStart> ) ) { if ( no_key_block ) { <S2SV_ModStart> key_map ) ; }",0
498,,0
499,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
500,<S2SV_ModStart> = buf ; pool -> free_total ++ ; <S2SV_ModStart> ; } } pool -> free_total -- ;,0
501,<S2SV_ModStart> ( * cp && cp [ 1 ] <S2SV_ModStart> cp ++ ; cp ++ ; <S2SV_ModStart> cp ; } cp ++ ; <S2SV_ModStart> cp ; } cp ++ ; <S2SV_ModStart> cp ; } cp ++ ;,0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
503,"<S2SV_ModStart> PIX * pixc <S2SV_ModEnd>, * pixd <S2SV_ModStart> == NULL ) { pixc = pixFewColorsOctcubeQuant1 ( pixs, level ) ; <S2SV_ModStart> NULL ) ; }",0
504,"<S2SV_ModStart> = 256 ; memset ( xd, 0, sizeof ( xd ) ) ;",0
505,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> overhead = 16 <S2SV_ModStart> * data ; size_t <S2SV_ModEnd> size = overhead,0
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
507,"<S2SV_ModStart> ; int i ; const int target_bits_per_mb = ( ( uint64_t ) vp9_rc_bits_per_mb ( cpi ) << BPER_MB_NORMBITS ) / cm -> MBs ; const int target_bits_per_mb = ( ( uint64_t ) vp9_rc_bits_per_mb ( cpi ) << BPER_MB_NORMBITS ) / cm -> MBs ; const int bits_per_mb = ( int ) vp9_rc_bits_per_mb ( cm -> frame_type, i, correction_factor ) ; if ( bits_per_mb_at_this_q <= target_bits_per_mb ) { if ( ( target_bits_per_mb - bits_per_mb - bits_per_mb ) <= last_error ) q = i - 1 ; else q = i - 1 ; break ; } else if ( bits_per_mb_at_this_q <= target_bits_per_mb ) { if ( ( target_bits_per_mb - bits_per_mb ) <= last_error ) q = i -",0
508,<S2SV_ModStart> ~ TJA1101_CONFIG1_MII_MODE ; <S2SV_ModEnd> tja1101WritePhyReg ( interface,0
509,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
510,"<S2SV_ModStart> int dst_stride, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart> plane ] ; memset <S2SV_ModEnd> ( left_col, <S2SV_ModStart> + y ; memset <S2SV_ModEnd> ( left_col,",0
511,<S2SV_ModStart> ++ ; } <S2SV_ModEnd> } if (,0
512,<S2SV_ModStart> i_completed_io_list ) ; <S2SV_ModEnd> ei -> i_sync_tid,0
513,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_",0
514,"<S2SV_ModStart> } else { if ( bad_format ( argc, argv ) ) return ;",0
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { q = osStrchr <S2SV_ModEnd> ( p +,1
516,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
517,"<S2SV_ModStart> KEY_FRAME ) { memcpy <S2SV_ModEnd> ( pc -> <S2SV_ModStart>. mvc, <S2SV_ModEnd> sizeof ( vp8_default_mv_context <S2SV_ModStart> sizeof ( vp8_default_mv_context <S2SV_ModEnd> ) ) ; <S2SV_ModStart> = SEGMENT_DELTADATA ; memcpy <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( xd ->",0
518,"<S2SV_ModStart> error ; uint16_t length <S2SV_ModEnd> ; uint32_t status <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModEnd> ) { enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT, length <S2SV_ModEnd> ) ; enc624j600ReadBuffer <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA, length <S2SV_ModEnd> ) ; enc624j600ReadBuffer <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA, length <S2SV_ModEnd> ) ; enc624j600ReadBuffer <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA, length <S2SV_ModEnd> ) ; enc624j600ReadBuffer <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA, length <S2SV_ModEnd> ) ; error <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL, ENC624J600_ERXTAIL, ENC624J600_ERXTAIL, ENC624J600_ERXTAIL <S2SV_ModEnd> ) ; error <S2SV_ModStart> ( interface, ENC624",0
519,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> VALUE read_memory ( <S2SV_ModStart> VALUE read_memory ( <S2SV_ModEnd> VALUE content ) <S2SV_ModStart> xmlSchemaParserCtxtPtr ctx ; <S2SV_ModEnd> VALUE errors =,0
520,"<S2SV_ModStart> ( LOG_ERR, ""Cannot <S2SV_blank> open <S2SV_blank> configuration <S2SV_blank> file"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( LOG_ERR, ""Cannot <S2SV_blank> open <S2SV_blank> configuration <S2SV_blank> file"" <S2SV_ModEnd> ) ; return",0
521,<S2SV_ModStart> ; out += 3 <S2SV_ModEnd> ; } state <S2SV_ModStart> ; out += 3 <S2SV_ModEnd> ; } state,1
522,<S2SV_ModStart> err = - <S2SV_ModEnd> EALREADY ; if,0
523,<S2SV_ModStart> POLL_IN ) ; <S2SV_ModEnd> handle -> event <S2SV_ModStart> pending ) ; <S2SV_ModEnd> perf_event_wakeup ( handle,0
524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> u16 <S2SV_ModEnd> utf8s_to_utf16s ( const <S2SV_ModStart> * s, u16 <S2SV_ModEnd> len, wchar_t <S2SV_ModStart> - EINVAL ; u16 <S2SV_ModEnd> u -= PLANE_SIZE <S2SV_ModStart> PLANE_SIZE ) { u16 <S2SV_ModEnd> u -= PLANE_SIZE <S2SV_ModStart> -= PLANE_SIZE ; u16 <S2SV_ModEnd> op ++ = <S2SV_ModStart> } else { u16 <S2SV_ModEnd> op ++ = <S2SV_ModStart> * op ++ = u16 <S2SV_ModEnd> ; len --",0
525,"<S2SV_ModStart> { print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" <S2SV_ModEnd> ) ; if",0
526,"<S2SV_ModStart> ( interface, KSZ8851_RXFHSR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & KSZ8851_RXFHSR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXMR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_RXFDPR <S2SV_ModEnd> ) & RXFHBCR_RXBC_MASK <S2SV_ModStart> ( interface, KSZ8851_RXFDPR <S2SV_ModEnd>, RXFDPR_RXFPAI ) <S2SV_ModStart> ( interface, KSZ8851_RXFDPR <S2SV_ModEnd>, RXFDPR_RXFPAI ) <S2SV_ModStart> ( interface, KSZ8851_RXFDPR <S2SV_ModEnd>, RXQCR_SDA ) <S2SV_ModStart> ( interface, KSZ8851_RXQCR <S2SV_ModEnd>, RXQCR_SDA ) <S2SV_ModStart> ( interface, KSZ8851_RXQCR <S2SV_ModEnd>, RXQCR_SDA )",0
527,"<S2SV_ModStart> * c, string type_comment, <S2SV_ModStart>, int is_async, string type_comment <S2SV_ModStart>, type_comment, type_comment,",0
528,<S2SV_ModStart> int i ; struct mm_struct * mm = mm ; <S2SV_ModStart> ; out : mm = & mm -> mm ;,0
529,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ptr_check_result ) {,0
530,<S2SV_ModStart> 1 ; } if ( test_name ) { <S2SV_ModStart> 1 ; } },0
531,<S2SV_ModStart> 0 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif <S2SV_ModStart> 4 ) ; <S2SV_ModEnd> } } <S2SV_null>,0
532,<S2SV_ModStart> len < needed ||! nl,0
533,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; clone_info = DestroyImageInfo ( clone_info ) ;",0
534,<S2SV_ModStart> ( bfqq ) __bfq_idle_slice_timer_body <S2SV_ModEnd> ( bfqq ),0
535,<S2SV_ModStart> ; length += <S2SV_ModEnd> update_prepare_bounds ( context,0
536,<S2SV_ModStart> out ; } if ( flags & RENAME_EXCHANGE ) { err = - ENOENT ; goto out ; },0
537,"<S2SV_ModStart> int plane ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
538,"<S2SV_ModStart> * cpi, MACROBLOCK * x, MACROBLOCK * x, <S2SV_ModStart> ( cpi, x, x, x <S2SV_ModEnd>, mi_row, <S2SV_ModStart> ( cpi, x, x, x <S2SV_ModEnd>, mi_row,",0
539,<S2SV_ModStart> * err = safe_superblockRead <S2SV_ModEnd> ( & reader,0
540,<S2SV_ModStart> -> ranges = safe_calloc <S2SV_ModEnd> ( sizeof (,0
541,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flags & VP8_EFLAG_NO_UPD_GF <S2SV_ModStart> flags & VP8_EFLAG_FORCE_GF <S2SV_ModEnd> ) { ctx,0
542,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; clone_info = DestroyImageList ( clone_info ) ;",0
543,<S2SV_ModStart>! head ) <S2SV_ModEnd> return - EINVAL <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
544,"<S2SV_ModStart> * pptr, u_int length <S2SV_ModEnd> ) { int <S2SV_ModStart> * pptr, length <S2SV_ModEnd> ) { ND_PRINT <S2SV_ModStart>, pptr, length <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart>, pptr, length <S2SV_ModEnd> ) ; if",0
545,<S2SV_ModStart> ; if ( strlen ( Run. name ) + strlen ( Run. name ) + strlen ( Run. name ) + strlen ( Run. name ) + strlen ( Run. name ) + strlen ( Run. name ) + strlen ( Run. name ) + strlen ( Run. name ) + strlen ( Run. name ) + strlen ( Run. name ) + strlen ( Run. name ) + strlen ( Run. name ) ) ; if (,0
546,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
547,"<S2SV_ModStart>, sizeof ( constr1 <S2SV_ModEnd> ) ) ;",0
548,<S2SV_ModStart> ; if (! buffer0 ) return - EINVAL ; if (,0
549,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0 ) ;",0
550,<S2SV_ModStart> ; distortion = vpx_variance16x16 <S2SV_ModEnd> ( * (,1
551,"<S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd>, ECON2_ETHEN | <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; temp <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; temp <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; temp <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; temp <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; temp <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; temp <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; temp <S2SV_ModStart> ( interface,",0
552,<S2SV_ModStart> * start ; if ( psf -> header_len < sizeof ( psf -> header ) ) return ; <S2SV_ModStart> = 0 ; if ( psf -> header_len < sizeof ( psf -> header ) ) return ;,0
553,<S2SV_ModStart> { if ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ctx -> <S2SV_ModStart> -> destroy ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; ctx,0
554,<S2SV_ModStart> speed ) { const VP9EncoderConfig * cfg = & cpi -> cfg ; <S2SV_ModStart> -> use_square_partition_only = cpi -> use_square_partition_only <S2SV_ModEnd> ; sf -> <S2SV_ModStart> -> use_square_partition_only = cpi -> use_square_partition_only <S2SV_ModEnd> ; sf -> <S2SV_ModStart> -> tx_size_search_method = vpx_frame_is_boosted <S2SV_ModEnd> ( cpi ) <S2SV_ModStart> ; sf -> <S2SV_ModEnd> auto_mv_step_size = 1 <S2SV_ModStart> ; sf -> adaptive_rd_thresh = 2 ; sf -> adaptive_rd_thresh = 2 ; sf -> adaptive_rd_thresh = 2 ; sf -> adaptive_rd_thresh = 2 ; sf -> adaptive_rd_thresh = 2 ; sf -> adaptive_rd_thresh = 2 ; sf -> adaptive_rd_thresh = 2 ; sf -> adaptive_rd_thresh = 2 ; sf -> adaptive_rd_thresh = 2 ; sf -> adaptive_rd_thresh = 2 ; sf -> <S2SV_ModStart> = 1 ; <S2SV_ModEnd> sf -> adaptive_rd_thresh_,0
555,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
556,<S2SV_ModStart> 2 * EXTRA_STACK + 1,0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,"<S2SV_ModStart>, 0 ) <S2SV_ModEnd> ) ; char",0
559,<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> break ; } <S2SV_ModEnd> if ( strcmp <S2SV_ModStart> break ; } <S2SV_ModEnd> if ( strcmp <S2SV_ModStart> break ; } <S2SV_ModEnd> if ( strcmp <S2SV_ModStart> break ; } <S2SV_ModEnd> if (!,0
560,<S2SV_ModStart> ) ; } fclose ( mvs ) ;,0
561,<S2SV_ModStart> self ) { size_t <S2SV_ModEnd> i ; PyObject,1
562,,1
563,"<S2SV_ModStart> ( dbh, mysql_error <S2SV_ModEnd> ( imp_dbh ->",0
564,"<S2SV_ModStart> = 0 ; BTA_JvRfcommWrite ( slot -> rfc_handle, slot -> id ) ; <S2SV_ModStart> ( & slot_lock <S2SV_ModEnd> ) ; }",0
565,<S2SV_ModStart> struct ieee_802_11_phdr phdr = { 0 },0
566,<S2SV_ModStart> ; sh = safe_calloc <S2SV_ModEnd> ( hdrlen +,0
567,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void nsc_encode_argb_to_aycocg (,0
568,<S2SV_ModStart> > nr_parens ) { kfree ( op_stack ) ; <S2SV_ModStart> EINVAL ) ; },0
569,<S2SV_ModStart> ) { const RATE_CONTROL <S2SV_ModEnd> * rc = <S2SV_ModStart> = ( ( cpi <S2SV_ModEnd> -> oxcf. <S2SV_ModStart> int ) ( cpi <S2SV_ModEnd> -> oxcf. <S2SV_ModStart> ; if ( cpi <S2SV_ModEnd> -> frames_since_key < <S2SV_ModStart> -> frames_since_key < cpi <S2SV_ModEnd> -> output_framerate / <S2SV_ModStart> -> output_framerate / cpi <S2SV_ModEnd> -> output_framerate / <S2SV_ModStart> -> output_framerate / cpi <S2SV_ModEnd> -> output_framerate / <S2SV_ModStart> -> output_framerate / cpi <S2SV_ModEnd> -> output_framerate /,0
570,"<S2SV_ModStart> TX_MODE read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r )",1
571,<S2SV_ModStart> case 6 : <S2SV_ModEnd> { yr_free ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> case 26 : <S2SV_ModStart> case 26 : <S2SV_ModEnd> { yr_re_node_destroy ( <S2SV_ModStart> case 27 : <S2SV_ModEnd> { yr_re_node_destroy ( <S2SV_ModStart> case 27 : <S2SV_ModEnd> { yr_re_node_destroy ( <S2SV_ModStart> case 29 : <S2SV_ModEnd> { yr_re_node_destroy ( <S2SV_ModStart> case 29 : <S2SV_ModEnd> { yr_re_node_destroy ( <S2SV_ModStart> case 29 : <S2SV_ModEnd> { yr_re_node_destroy ( <S2SV_ModStart> case 29 : <S2SV_ModEnd> { yr_re_node_destroy ( <S2SV_ModStart> case 29 : <S2SV_ModEnd> { yr_re_node_destroy ( <S2SV_ModStart> case 29 : <S2SV_ModEnd> { yr_re_node_destroy ( <S2SV_ModStart> case 29 : <S2SV_ModEnd> { yr_re_node_destroy ( <S2SV_ModStart> case 29 : <S2SV_ModEnd> { yr_re_node_destroy (,0
572,"<S2SV_ModStart> * xd = args -> xd <S2SV_ModEnd> ; TOKENEXTRA * <S2SV_ModStart> 32 ] ; const int16_t * qcoeff = BLOCK_OFFSET ( p -> qcoeff, block ) ; vpx_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ ENTROPY_TOKENS ] = cpi -> common. fc. coef_probs [ tx_size ] [ ref ] ; vpx_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] = cpi -> common. fc. coef_probs [ tx_size ] [ ref ] ; vpx_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ ENTROPY_TOKENS ] = cpi -> common. fc. coef_probs [ tx_size ] [ ref ] ; vpx_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ ENTROPY_TOKENS ] = cpi -> common. fc. coef_probs [ tx_size ] [ ref ]",0
573,<S2SV_ModStart> pSelect -> pSrc ; assert ( pWalker -> pParse -> db -> mallocFailed ),0
574,<S2SV_ModStart> ; serv = svc_create_pool <S2SV_ModEnd> ( & nfs4_callback_program,0
575,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
576,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
577,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
578,"<S2SV_ModStart> do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> s, 0 )",1
579,"<S2SV_ModStart> next ) { if ( strcmp ( xml, XML_ATTR_ID ) == 0 ) { continue ; }",0
580,<S2SV_ModStart> <S2SV_null> static const SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> return ( const SvcInternal_t <S2SV_ModEnd> * ) svc_ctx,1
581,<S2SV_ModStart> * current_param ; if ( * current_param == NULL ) { return ; },0
582,<S2SV_ModStart> [ 80 ] = { 0 },0
583,"<S2SV_ModStart> * otmp = safe_readobj <S2SV_ModEnd> ( buf,",0
584,"<S2SV_ModStart> ( ) { int <S2SV_ModEnd> directory_table_end, table_start <S2SV_ModStart> == 0 ) { <S2SV_ModStart> return FALSE ; } <S2SV_ModStart> == FALSE ) { <S2SV_ModStart> return FALSE ; } <S2SV_ModStart> == FALSE ) { <S2SV_ModStart> return FALSE ; } <S2SV_ModStart> == FALSE ) { <S2SV_ModStart> return FALSE ; }",0
585,"<S2SV_ModStart> rule * rule, const struct tree * tree <S2SV_ModStart> count = 0 ; env -> tree = tree",0
586,<S2SV_ModStart> -> seg ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
587,"<S2SV_ModStart>, Module_fields, sizeof ( Module_type ) <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Module_fields, sizeof ( Module_type ) <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Module_fields, sizeof ( Module_type ) <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Module_fields, sizeof ( Module_type ) <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, sizeof ( Module_type ) <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, sizeof ( Module_type ) <S2SV_ModEnd> ) ; if <S2SV_ModStart>, ModuleFunctionDef_fields, sizeof ( Module_type ) <S2SV_ModEnd> ) ; if <S2SV_ModStart>, ModuleFunctionDef_fields, sizeof ( Module_type ) <S2SV_ModEnd> ) ; if <S2SV_ModStart>, ModuleDef_fields, sizeof ( Module_type ) <S2SV_ModEnd> ) ; if <S2SV_ModStart>, ModuleFunctionDef_fields, sizeof ( Module_type ) <S2SV_ModEnd> ) ; if <S2SV_ModStart>, ModuleDef_fields, sizeof ( Module_type ) <S2SV_ModEnd> ) ; if <S2SV_ModStart>, ModuleDef_fields, sizeof ( Module_type ) <S2SV_ModEnd> ) ; if <S2SV_ModStart>, ModuleDef_fields, sizeof ( Module_type ) <S2SV_ModEnd> ) ; if <S2SV_ModStart>, ModuleDef_fields, sizeof ( Module_type ) <S2SV_ModEnd> ) ; if <S2SV_ModStart>, ModuleDef_fields, sizeof ( Module_type ) <S2SV_ModEnd> ) ; if",0
588,"<S2SV_ModStart> } logfile_fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> log_path, O_WRONLY ) <S2SV_ModStart> return ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 16 ) )",0
589,<S2SV_ModStart> ; } # else ( void ) cpi ; #,1
590,"<S2SV_ModStart> cinput ) { char * s, * t, * t, * t, * StartClean ; double * argbuf = 0 ; double * argbuf = 0 ; setDefaults ( ) ; s = cinput ; while ( * s!= '[' ) s ++ ; t ++ ; t ++ ; t ++ ; t = s <S2SV_ModEnd> ; setDefaults ( <S2SV_ModStart> t ++ ; <S2SV_ModEnd> s = cinput <S2SV_ModStart> t ++ ; <S2SV_ModEnd> s = cinput <S2SV_ModStart> ( outpos, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"" <S2SV_ModEnd>, s, <S2SV_ModStart> TERMCHAR ) ; <S2SV_ModEnd> if ( strcmp <S2SV_ModStart> SUBVERSION ) ; <S2SV_ModEnd> return ( 0 <S2SV_ModStart> nameobject ) ; <S2SV_ModEnd> } StartClean =",0
591,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = lookup_attr_id <S2SV_ModEnd> ( obj,",0
592,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
593,<S2SV_ModStart> int err ; mutex_lock ( & alink -> dscp_lock ) ; <S2SV_ModStart> ) ) goto err_delete_dscp <S2SV_ModEnd> ; tos_off = <S2SV_ModStart>! match ) goto err_delete_dscp <S2SV_ModEnd> ; list_add ( <S2SV_ModStart> return 0 ; err_delete_dscp : mutex_unlock ( & alink -> dscp_lock ) ;,0
594,<S2SV_ModStart> ) ; } if ( stream -> config. cfg. rc_twopass_stats_in ) stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; else,0
595,"<S2SV_ModStart> goto out ; if ( g_str_has_prefix ( app, ""prefix"" ) || g_str_has_prefix ( app, ""prefix"" ) || g_str_has_prefix ( app, ""prefix"" ) || g_str_has_prefix ( app, ""prefix"" ) || g_str_has_prefix ( app, ""prefix"" ) || g_str_has_prefix ( app, ""prefix"" ) || g_str_has_prefix ( app, ""prefix"" ) || g_str_has_prefix ( app, ""prefix"" ) || g_str_has_prefix ( app, ""prefix"" ) || g_str_has_prefix ( app, ""prefix"" ) || g_str_has_prefix ( app, ""prefix"" ) || g_str_has_prefix ( app, ""prefix"" ) || g_str_has_prefix ( app, ""prefix"" ) || g_str_has_prefix ( app, ""prefix"" ) || g_str_has_prefix ( app, ""prefix"" ) || g_str_has_prefix ( app, ""prefix"" ) || g_str_has_prefix",0
596,"<S2SV_ModStart> data_end ) { vpx_reader <S2SV_ModEnd> * const cm <S2SV_ModStart>, tile_col ; vpx_reader <S2SV_ModEnd> r ; assert <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> aligned_cols ) ; memset <S2SV_ModEnd> ( cm ->",0
597,<S2SV_ModStart> vp9_decoder_create ( const VP9_CONFIG <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> ) ) ; const VP9_COMMON * const cm = pbi? & pbi -> common : NULL ; <S2SV_ModStart> = 1 ; <S2SV_ModEnd> vp9_rtcd ( ) <S2SV_ModStart> current_video_frame = 0 <S2SV_ModEnd> ; pbi -> <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vp9_init_dequantizer ( cm,0
598,"<S2SV_ModStart>, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dinf <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n""",0
599,<S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> == NULL || opt. <S2SV_ModEnd> cipso == 0,0
600,"<S2SV_ModStart> tok ( struct vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> do { const vpx_tree_index <S2SV_ModEnd> j = tree",0
601,"<S2SV_ModStart> = VPX_CODEC_OK ; ( void ) pts ; <S2SV_ModStart>, img ) ; ( void ) deadline",0
602,"<S2SV_ModStart>, & len, 0",1
603,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
604,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int frame_max_bits (,0
605,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
606,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> encode_superblock ( VP9_COMP <S2SV_ModStart> * cpi, MACROBLOCK * const x, MACROBLOCK * const x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x = & x -> mb ; MACROBLOCKD * x = & x -> mb ; MACROBLOCKD * x = & x -> mb ; MACROBLOCKD * x = & x -> mb ; MAC",0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
608,"<S2SV_ModStart> range_max ) { uint32_t <S2SV_ModEnd> value ; int <S2SV_ModStart> gbc ) ; uint32_t i, j ; char bits [ 65 ] ; bits [ 65 ] ; bits [ 65 ] = i = 0 ; while ( 1 ) { if ( get_bits_left ( gbc ) < zeroes + 1 ) { if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR",0
609,"<S2SV_ModStart> c ) || strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> c ) || strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> c ) || strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"",",0
610,"<S2SV_ModStart>, packet -> <S2SV_ModEnd> http_contentlen. ptr",0
611,"<S2SV_ModStart>, y, MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> x ), MagickMin <S2SV_ModEnd> ( 4,",0
612,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL )",0
613,,0
614,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; sendClean ( outputbuffer ) ;",1
615,"<S2SV_ModStart> return FALSE ; if ( rdp -> autodetect -> bandwidthMeasureTimeDelta > 0 ) { <S2SV_ModStart> ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" ) ; }",0
616,<S2SV_ModStart> ; # else ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ; ( void ) cm ;,0
617,<S2SV_ModStart> # if CONFIG_MULTITHREAD <S2SV_ModEnd> vp8_decoder_remove_threads ( pbi,1
618,<S2SV_ModStart> xWantedSize > 0 && ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 <S2SV_ModStart> { xWantedSize += <S2SV_ModEnd> portBYTE_ALIGNMENT - (,0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,"<S2SV_ModStart> s ) { int <S2SV_ModEnd> num_updates ; uint16 <S2SV_ModStart>, __func__ ) ; in_uint16_le ( s, left ) ; in_uint16_le ( s, left ) ; in_uint16_le ( s, left ) ; in_uint16_le ( s, left ) ; in_uint16_le ( s, left ) ; in_uint16_le ( s, left ) ; in_uint16_le ( s, bottom ) ; in_uint16_le ( s, height ) ; Bpp = ( bpp + 7 ) / 8 ; logger ( Graphics, Debug, ""process_bitmap_updates(), <S2SV_blank> [%d,%d,%d], <S2SV_blank> [%d,%d], <S2SV_blank> bpp=%d, <S2SV_blank> compression=%d"", left, top, top, right, bottom, width, height, bpp, compress ) ; in_uint16_le ( s, bufsize ) ; in_uint16_le ( s, bufsize <S2SV_ModEnd> ) ; cx",0
621,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
622,"<S2SV_ModStart> tx_size, vpx_coeff_stats <S2SV_ModEnd> coef_branch_ct ) { <S2SV_ModStart> tx_size ] ; vpx_coeff_probs_model <S2SV_ModEnd> * coef_counts =",0
623,<S2SV_ModStart> { } ; if (! name ) return - ENOENT ;,0
624,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int su3000_frontend_attach ( <S2SV_ModStart> ud3000_frontend_attach ( struct dvb_usb_adapter * d ) { <S2SV_ModEnd> struct dvb_usb_adapter * <S2SV_ModStart> d ) { <S2SV_ModEnd> struct dvb_usb_generic_rw ( <S2SV_ModStart> 0 ] = 0xe ; <S2SV_ModEnd> struct dvb_usb_generic_rw ( <S2SV_ModStart> 1 ] = 0x02 ; <S2SV_ModEnd> struct dvb_usb_generic_rw ( <S2SV_ModStart> 1 ] = 0x02 ; <S2SV_ModEnd> struct dvb_usb_generic_rw ( <S2SV_ModStart> 1 ] = 0x83 ; <S2SV_ModEnd> struct dvb_usb_generic_rw ( <S2SV_ModStart> 1 ] = 0x83 ; <S2SV_ModEnd> struct dvb_usb_generic_rw ( <S2SV_ModStart> 1 ] = 0x83 ; <S2SV_ModEnd> struct dvb_usb_generic_rw ( <S2SV_ModStart> 2 ] = 0x83 ; <S2SV_ModEnd> struct ds3000_attach (,0
625,"<S2SV_ModStart> * iface, vpx_codec_enc_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> else if ( <S2SV_ModEnd> flags & VPX_CODEC_USE_XMA <S2SV_ModStart> caps & VPX_CODEC_USE_PSNR <S2SV_ModEnd> ) res =",0
626,"<S2SV_ModStart> int stride, <S2SV_ModEnd> int mv_row, <S2SV_ModStart> const kernel = vpx_get_interp_kernel <S2SV_ModEnd> ( xd -> <S2SV_ModStart> const kernel = vpx_get_interp_kernel <S2SV_ModEnd> ( xd -> <S2SV_ModStart> const kernel = vpx_get_interp_kernel <S2SV_ModEnd> ( xd -> <S2SV_ModStart> const kernel = vpx_get_interp_kernel <S2SV_ModEnd> ( xd -> <S2SV_ModStart> const kernel = vpx_get_interp_kernel <S2SV_ModEnd> ( y_mb_ptr, <S2SV_ModStart>, stride, <S2SV_ModEnd> 16, & <S2SV_ModStart> 256 ], <S2SV_ModEnd> & mv, <S2SV_ModStart> 256 ], <S2SV_ModEnd> & mv, <S2SV_ModStart> 512 ], <S2SV_ModEnd> & mv,",0
627,"<S2SV_ModStart> ; mungspaces ( strncpy <S2SV_ModEnd> ( buf,",0
628,"<S2SV_ModStart> * cJSON_CreateFloatArray ( double <S2SV_ModEnd> * numbers,",0
629,"<S2SV_ModStart> data_end ) { const VP9Worker * const worker = & pbi -> tile_workers ; <S2SV_ModStart> int num_workers = MIN ( <S2SV_ModEnd> pbi -> oxcf <S2SV_ModStart> oxcf. max_threads, tile_cols ) ; TileBuffer tile_buffers [ 1 << 6 ] ; TileBuffer tile_buffers [ 1 << 6 ] ; int n ; int n ; int final_worker = - 1 ; assert ( tile_cols <= ( 1 << 6 ) ) ; assert ( tile_cols <= ( 1 << 6 ) ) ; assert ( tile_cols <= ( 1 << 6 ) ) ; assert ( tile_cols <= ( 1 << 6 ) ) ; assert ( tile_cols <= ( 1 << 6 ) ) ; assert ( tile_cols <= ( 1 << 6 ) ) ; if ( tile_cols <= ( 1 << 6 ) ) { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Tile <S2SV_blank> decoder <S2SV_blank> thread <S2SV_blank> creation <S2SV_blank> failed"" ) ; } else { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Tile <S2SV_blank> decoder <S2SV_blank> thread",0
630,"<S2SV_ModStart> * 0x101 ; # ifdef LIBRAW_LIBRARY_BUILD <S2SV_ModStart> + 8 ; # else offset = base + get4 ( ) + 8 ; while ( ( save = ftell ( ifp ) ) < offset ) { for ( tag = i ; tag << 8 | fgetc ( ifp ) ; tag << 8 | fgetc ( ifp ) ; tag = tag << 8 | fgetc ( ifp ) ; switch ( tag ) { case 0x505244 : fseek ( ifp, 8, SEEK_CUR ) ; high = get2 ( ) ; wide = get2 ( ) ; break ; case 0x524946 : fseek ( ifp, 8, SEEK_CUR ) ; high = get2 ( ) ; width = get2 ( ) ; width = get2 ( ) ; width = get2 ( ) ; width = get2 ( ) ; width = get2 ( ) ; width = get2 ( ) ; width = get2 ( ) ; width = get2 ( ) ; width = get2 ( ) ; width = get2 ( ) ; width = get2 ( ) ; width = get2 ( ) ; height = get2",0
631,"<S2SV_ModStart> -> common ; <S2SV_ModEnd> const double base_q <S2SV_ModStart> = SEGMENT_DELTADATA ; vpx_clear_segfeatures ( seg ) ; <S2SV_ModStart> = SEGMENT_DELTADATA ; vpx_clear_system_state ( ) ; for ( i = ENERGY_MIN ; i <= ENERGY_MAX ; i ++ ) { int qindex_delta, segment_rdmult ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; } qindex_delta = vp9_compute_qdelta ( & cpi -> rc, base_q, base_q * Q_RATIO ( i ) ) ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; } qindex_delta = vp9_compute_qdelta ( & cpi -> rc, base_q, base_q * Q_RATIO ( i ) ) ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RAT",0
632,"<S2SV_ModStart>. err_detail = get_detail ( ctx, error ) <S2SV_ModEnd> ; return error",0
633,<S2SV_ModStart> * ps_cur_slice ; <S2SV_ModEnd> ih264d_free_dynamic_bufs ( ps_dec,0
634,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet ),0
635,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int getnum (,0
636,<S2SV_ModStart> GCSpropagate ) ; <S2SV_ModEnd> g -> old,0
637,<S2SV_ModStart> 0 ; else { kfree ( buf ) ; <S2SV_ModStart> - EIO ; },0
638,"<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } <S2SV_ModEnd> memset ( buffer <S2SV_ModStart> buffer ) ; <S2SV_ModEnd> s_write ( c",0
639,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> struct sockaddr_in addr <S2SV_ModEnd> ; int ret_ga <S2SV_ModStart> struct mainloop_fd_callbacks cib_fd_callbacks = { 0 } <S2SV_ModStart> struct mainloop_fd_callbacks cib_fd_callbacks = { 0 } <S2SV_ModEnd> ; struct mainloop_fd_callbacks <S2SV_ModStart> struct mainloop_fd_callbacks cib_fd_callbacks = { 0 } ; cib_fd_callbacks <S2SV_ModStart> struct mainloop_fd_callbacks cib_fd_callbacks = { 0 } <S2SV_ModEnd> ; connection -> <S2SV_ModStart> close = cib_remote_connection_destroy <S2SV_ModEnd> ; connection -> <S2SV_ModStart> close = cib_remote_connection_destroy <S2SV_ModEnd> ; connection ->,0
640,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi,",0
641,"<S2SV_ModStart> ( ndo, ""%s"", icp -> icmp6_name <S2SV_ModEnd> ) ) ;",0
642,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> return rc ;",0
643,"<S2SV_ModStart> Image * image <S2SV_ModEnd> ; MagickBooleanType status <S2SV_ModStart> length, padding <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> ; if ( <S2SV_ModEnd> byte < 0 <S2SV_ModStart> byte < 0 || <S2SV_ModEnd> byte < 0 <S2SV_ModStart> byte < 0 || <S2SV_ModEnd> byte < 0 <S2SV_ModStart> byte < 0 || <S2SV_ModEnd> byte < 0 <S2SV_ModStart> < 0 || <S2SV_ModEnd> byte < 0 <S2SV_ModStart> < 0 || <S2SV_ModEnd> byte < 0 <S2SV_ModStart> < 0 || <S2SV_ModEnd> byte < 0 <S2SV_ModStart> < 0 || <S2SV_ModEnd> byte < 0 <S2SV_ModStart> < 0 || <S2SV_ModEnd> byte < 0 <S2SV_ModStart> < 0 || <S2SV_ModEnd> byte < 0 <S2SV_ModStart> < 0 || <S2SV_ModEnd> byte < 0 <S2SV_ModStart> < 0 || <S2SV_ModEnd> byte < 0 <S2SV_ModStart> < 0 || <S2SV_ModEnd> byte < 0 <S2SV_ModStart> < 0 || <S2SV_ModEnd> byte < 0 <S2SV_ModStart> < 0 || <S2SV_ModEnd> byte < 0 <S2SV_ModStart> < 0 || <S2SV_ModEnd> byte < 0 <S2SV_ModStart> < 0 || <S2SV_ModEnd> byte < 0 <S2SV_ModStart> < 0 || <S2SV_ModEnd> byte < 0",0
644,"<S2SV_ModStart> ; jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC <S2SV_blank> marker\\n"" ) ; jas_eprintf (",0
645,<S2SV_ModStart> ; if (! channel -> modes ) return ; if (,0
646,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r,",0
647,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
648,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> ( REFERENCE_MODE ) vpx_read <S2SV_ModEnd> ( r,",0
649,"<S2SV_ModStart>! stream ) { <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; return NULL ; }",0
650,<S2SV_ModStart> nd_opt_len ) ; ND_TCHECK ( op -> nd_opt_len ) ;,0
651,<S2SV_ModStart> re_ast ) -> parent = NULL ; ( * re_ast ) ->,0
652,"<S2SV_ModStart> ; ret = dict_lookup ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", <S2SV_ModEnd> key -> key <S2SV_ModStart> key -> key <S2SV_ModEnd> ) ; return",0
653,<S2SV_ModStart> ; tok -> <S2SV_ModEnd> altwarning = 1,0
654,<S2SV_ModStart> maxBitrate ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
655,<S2SV_ModStart> ( dpbSize ) <S2SV_ModEnd> ; dpb ->,0
656,<S2SV_ModStart> = 0 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; <S2SV_ModStart> (! sock ||! addrlen <S2SV_ModStart> ( addrlen ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } <S2SV_ModEnd> if ( oe_syscall_getpeername_ocall,0
657,,1
658,"<S2SV_ModStart> FALSE ; } if (! <S2SV_ModStart>, s ) ) return FALSE",1
659,<S2SV_ModStart> ipv6_pinfo * np ; struct ipv6_txoptions * opt ; struct ipv6_txoptions * opt ; struct ipv6_txoptions * opt ; struct ipv6_txoptions * opt ; struct ipv6_txoptions * opt ; struct ipv6_txoptions * opt ; struct ipv6_txoptions * opt ; struct ipv6_txoptions * opt ; struct ipv6_txoptions * opt ; struct ipv6_txoptions * opt ; struct ipv6_txoptions * opt ; opt = NULL ; struct ipv6_txoptions * opt = NULL ; struct ipv6_txoptions * opt = NULL ; struct ipv6_txoptions * opt = NULL ; struct ipv6_txoptions * opt = NULL ; struct ipv6_txoptions * opt = NULL ; struct ipv6_txoptions * opt = NULL ; struct ipv6_txoptions * opt = NULL ; struct ipv6_txoptions * opt = NULL ; struct ipv6_txoptions * opt = NULL ; struct ipv6_txoptions * opt = NULL ; struct ipv6_txoptions * opt =,0
660,"<S2SV_ModStart> ; uint32_t valign = 0 <S2SV_ModStart> hdr_size, j = 0",0
661,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPOS | DM9000_EPOS <S2SV_ModEnd> | EPCR_ERPRR ) <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPOS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> } dm9000WriteReg ( DM9000_EPCR, DM9000_EPOS <S2SV_ModEnd> ) ; return",0
662,<S2SV_ModStart> pcmk_ok ) { if (! private -> command ) { rc = - ENOMEM ; break ; } <S2SV_ModStart> pcmk_ok ) { if (! private -> command ) { rc = - ENOMEM ; break ; },0
663,"<S2SV_ModStart> = ubuf ; memset ( & address, 0, sizeof ( address ) ) ;",0
664,"<S2SV_ModStart> } ; int <S2SV_ModEnd> new_mv_mode_penalty = 256 <S2SV_ModStart> bsize ) ; int new_mv_mode_penalty = 256 ; <S2SV_ModStart>, step_param, x -> sadperbit16 <S2SV_ModEnd>, & num00 <S2SV_ModStart>, & num00 <S2SV_ModEnd> ) ; if",0
665,<S2SV_ModStart> = 0 ; if ( h -> addr ),0
666,,0
667,"<S2SV_ModStart> one, offset = 0",0
668,<S2SV_ModStart> ( r = <S2SV_ModEnd> sshbuf_put_cstring ( b,1
669,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
670,"<S2SV_ModStart> client = user_data ; memset ( client, 0, sizeof ( client ) )",0
671,<S2SV_ModStart> * uv ; thread -> twups = thread ; <S2SV_ModStart> next ) { <S2SV_ModEnd> if (!,0
