,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
1,<S2SV_ModStart> ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ; if <S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;,0
2,"<S2SV_ModStart>, 0 ) ; if ( writer -> stco ) gf_isom_box_del ( writer -> stco ) ; if ( writer -> stsc ) gf_isom_box_del ( writer -> stsc )",0
3,<S2SV_ModStart> c = array? array -> child : NULL <S2SV_ModEnd> ; while ( <S2SV_ModStart> while ( c ) { if ( <S2SV_ModEnd> item > 0 <S2SV_ModStart> > 0 ) return c ; <S2SV_ModEnd> c = c <S2SV_ModStart> -> next ; <S2SV_ModEnd> return c ;,0
4,"<S2SV_ModStart> u64 nr, <S2SV_ModEnd> struct pt_regs * <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",1
5,"<S2SV_ModStart> EXT4_EXTENTS_FLAG ) { struct grub_ext4_extent_header leaf ; struct grub_ext4_extent * ext ; int i ; leaf = grub_ext4_find_leaf ( data, ( struct grub_ext4_extent_header * ) inode -> blocks. dir_blocks, fileblock ) ; if (! leaf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) ( leaf + 1 ) ; for ( i = 0 ; i < grub_le_to_cpu16 ( leaf -> entries ) ; i ++ ) { if ( fileblock < grub_le_to_cpu32 ( ext [ i ]. block ) ) break ; } if ( fileblock >= grub_le_to_cpu16 ( ext [ i ]. len ) ) return 0 ; else { grub_disk_addr_t start ; start = grub_le_to_cpu16 ( ext [ i ]. start_hi ) ; start = ( start << 32 ) + grub_le_to",0
6,"<S2SV_ModStart> fdct16 ( const tran_low_t <S2SV_ModEnd> in [ 16 <S2SV_ModStart> 16 ], tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> ] ) { tran_high_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step2 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step3 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t input [ 8 ] ; tran_high_t <S2SV_ModEnd> temp1, temp2 <S2SV_ModStart> ] ; { tran_low_t <S2SV_ModEnd> s0, s1 <S2SV_ModStart>, s7 ; tran_high_t <S2SV_ModEnd> t0, t1 <S2SV_ModStart>, t3 ; tran_high_t <S2SV_ModEnd> x0, x1",0
7,"<S2SV_ModStart> ( ) ; # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; # endif parse_ciff ( save + hlen, len - hlen, 0 ) ; } if ( parse_tiff ( save + 6 ) ) apply_tiff ( ) ; fseek ( ifp, save + len, SEEK_SET ) ; } return 1 <S2SV_ModEnd> ; } <S2SV_null>",0
8,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int search_filter_level ( YV12_BUFFER_CONFIG * sd, VP9_COMMON * cm, struct loopfilter * lf, int min_filter_level, int max_filter_level ) { <S2SV_ModEnd> VP9_COMMON * const <S2SV_ModStart> partial_frame ) { <S2SV_ModEnd> const int min_filter_level <S2SV_ModStart> ) ; int best_err ; int filt_best ; int filt_direction <S2SV_ModEnd> ; int filt_mid <S2SV_ModStart> / 4 ; <S2SV_ModEnd> while ( filter_step <S2SV_ModStart> min_filter_level ) ; <S2SV_ModEnd> int bias = <S2SV_ModStart> * filter_step ; int filt_err ; if ( cpi -> twopass. section_intra_rating < 20 ) bias = ( best_err >> ( 15 - ( filt_mid / 8 ) ) ) * filter_step ; if ( cm -> tx_mode!= ONLY_4X4 ) bias >>= 1 ; if ( filt_direction <= 0 && filt_low!= filt_mid ) { if ( ss_err [ filt_low ] < 0 ) { filt_err = try_filter_frame ( sd, cpi, filt_low, partial_frame",0
9,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
10,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ++ i ) vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( usehp ) vpx_write <S2SV_ModEnd> ( w,",1
11,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } else { <S2SV_ModEnd> request -> rxBlockSzx <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; } <S2SV_ModStart> ( ) ) { <S2SV_ModStart> ( ) ; },1
12,"<S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; }",0
13,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> construct_get_dest_keyring ( struct <S2SV_ModStart> * authkey ; int ret ; <S2SV_ModStart> dest_keyring ) ; ret = key_permission ( make_key_ref ( key_type_keyring ( KEY_TYPE_KEY ), & dest_keyring ) ) ; if ( ret < 0 ) { key_put ( dest_keyring ) ; return ret ; } <S2SV_ModStart> ( dest_keyring ) ret = key_permission ( make_key_ref ( KEY_TYPE_KEY ), & dest_keyring ) ; if ( ret < 0 ) { key_put ( dest_keyring ) ; return ret ; } <S2SV_ModEnd> } case KEY_REQKEY_DEFL_THREAD_KEYRING <S2SV_ModStart> ) ; } ret = key_permission ( make_key_ref ( KEY_TYPE_KEY ), & dest_keyring ) ; if ( ret < 0 ) { key_put ( dest_keyring ) ; return ret ; } <S2SV_ModStart> ) ; } return 0 ;",0
14,"<S2SV_ModStart> = create_spnego_ctx ( ) ; if ( sc == NULL ) return GSS_S_FAILURE ; ret = get_negotiable_mechs ( minor_status, spcred, GSS_C_INITIATE, & sc -> mech_set ) ; if ( ret!= GSS_S_COMPLETE ) goto cleanup ; sc -> internal_mech = & sc -> mech_set -> elements [ 0 ] ; if ( put_mech_set ( sc -> mech_set, & sc -> DER_mechTypes ) < 0 ) { ret = GSS_S_FAILURE ; goto cleanup ; } sc -> ctx_handle = GSS_C_NO_CONTEXT ; * ctx = ( gss_ctx_id_t ) sc ; sc = NULL ; * tokflag = INIT_TOKEN_SEND ; ret = GSS_S_CONTINUE_NEEDED ; cleanup : release_spnego_ctx ( & sc ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>",0
15,<S2SV_ModStart> ; tm = g_localtime <S2SV_ModEnd> ( & t,0
16,<S2SV_ModStart> length ) ; if ( strlen ( password )!= 0 ) { <S2SV_ModStart> ) ) ; },0
17,<S2SV_ModStart> == p ) { * errnop = ERANGE ; <S2SV_ModStart> goto not_found ; },0
18,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",1
19,<S2SV_ModStart> = 0 ; if (! <S2SV_ModStart> & timeout ) ) return false,0
20,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> detect_transition_to_still ( struct <S2SV_ModStart> last_decay_rate ) { bool trans_to_still = false <S2SV_ModEnd> ; if ( <S2SV_ModStart> frame_interval > MIN_GF_INTERVAL <S2SV_ModEnd> ) { int <S2SV_ModStart> j ; const TWO_PASS <S2SV_ModEnd> * position = <S2SV_ModStart> * position = TWO_PASS <S2SV_ModEnd> -> stats_in ; <S2SV_ModStart> == input_stats ( TWO_PASS <S2SV_ModEnd>, & tmp_next_frame <S2SV_ModStart> } reset_fpf_position ( TWO_PASS <S2SV_ModEnd>, position ) <S2SV_ModStart> == still_interval ) { <S2SV_ModStart> ; } return true ; } return false <S2SV_ModEnd> ; } <S2SV_null>",0
21,"<S2SV_ModStart> inode ) ) { if ( offset + size > i_size_read ( inode ) ) { printk ( KERN_EMERG ""%s: <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, ret, inode -> i_ino ) ; return ret ; } <S2SV_ModStart> size ) ; }",0
22,<S2SV_ModStart> alg ) { <S2SV_ModEnd> if (! <S2SV_ModStart> CRYPTO_ALG_NEED_FALLBACK ) ) <S2SV_ModEnd> alg = crypto_alg_lookup,0
23,"<S2SV_ModStart> = GIT_PKT_NG ; if ( len < 3 ) goto out_err ; <S2SV_ModStart> += 3 ; <S2SV_ModEnd> ptr = strchr <S2SV_ModStart>,'<S2SV_blank>') ; if (! ptr ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> ref = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> ref ) ; memcpy ( pkt -> ref, line, len ) ; pkt -> ref [ len ] = '\\0' ; line = ptr + 3 <S2SV_ModEnd> ; if ( <S2SV_ModStart> + 1 ; <S2SV_ModEnd> ptr = strchr <S2SV_ModStart>, '\\n' ) ; if (! ptr ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> msg = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> msg ) ; memcpy ( pkt -> msg, line, len ) ; pkt -> msg [ len ] = '\\0' ; <S2SV_ModEnd> * out =",0
24,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> BYTE flags ; UINT32 <S2SV_ModEnd> length ; Stream_Read_UINT32,0
25,<S2SV_ModStart> ; if ( avio_feof ( pb ) <S2SV_ModEnd> ) return AVERROR_PATCHWELCOME <S2SV_ModStart> ; if ( avio_feof ( pb ) <S2SV_ModEnd> ) return AVERROR_PATCHWELCOME <S2SV_ModStart> ; if ( avio_feof ( pb ) <S2SV_ModEnd> ) return AVERROR_PATCHWELCOME <S2SV_ModStart> ; if ( avio_feof ( pb ) <S2SV_ModEnd> ) return AVERROR_PATCHWELCOME <S2SV_ModStart> ; if ( avio_feof ( pb ) <S2SV_ModEnd> ) return AVERROR_PATCHWELCOME <S2SV_ModStart> ; if ( avio_feof ( pb ) <S2SV_ModEnd> ) return AVERROR_PATCHWELCOME <S2SV_ModStart> ; if ( avio_feof ( pb ) <S2SV_ModEnd> ) return AVERROR_PATCHWELCOME <S2SV_ModStart> ; if ( avio_feof ( pb ) <S2SV_ModEnd> ) return AVERROR_PATCHWELCOME <S2SV_ModStart> ; if ( avio_feof ( pb ) <S2SV_ModEnd> ) return AVERROR_PATCHWELCOME <S2SV_ModStart> ; if ( avio_feof ( pb ) <S2SV_ModEnd> ) return AVERROR_PATCHWELCOME,0
26,"<S2SV_ModStart> 1 ; } ret = <S2SV_ModEnd> mount_entry_on_generic ( mntent <S2SV_ModStart> path ) ; if ( ret < 0 ) { ERROR ( ""mount_entry_on_relative_rootfs <S2SV_blank> failed"" ) ; return - 1 ; } return ret ;",0
27,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } io -> io_cleanup = mem_cleanup ;,1
28,<S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> (,0
29,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return ret?,0
30,<S2SV_ModStart> vpx_codec_enc_cfg_map_t * map ; if ( ( iface -> caps & VPX_CODEC_CAP_ENCODER ) && ( iface -> enc. cfg_maps == NULL ) ) return VPX_CODEC_INCAPABLE <S2SV_ModStart> ( map = ( vpx_codec_enc_cfg_map_t * ),0
31,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
32,"<S2SV_ModStart> void show_progress ( <S2SV_ModEnd> uint64_t dx_time ) <S2SV_ModStart> dx_time ) { if ( dx_time > 100 ) { fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out, dx_time, ( double ) frame_out * 1000000.0 / ( double ) dx_time ) ; return ; }",0
33,"<S2SV_ModStart> NULL ) { PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> %s\\n"", fields [ i ]. name ) ; <S2SV_ModStart> NULL ) { PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> %s\\n"", fields [ i ]. name ) ; <S2SV_ModStart> NULL ) { PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> %s\\n"", fields [ i ]. name ) ; <S2SV_ModStart> NULL ) { PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> %s\\n"", fields [ i ]. name ) ; <S2SV_ModStart> NULL ) { PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> %s\\n"", fields [ i ]. name ) ;",0
34,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF ) ; enc28j60WriteReg ( interface, ENC28J60_ETXSTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXSTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRTS",1
35,"<S2SV_ModStart> value ) ; if ( _PyObject_SetAttrId ( result, & PyId_annotation_type, value ) == - 1 ) goto failed ; Py_DECREF ( value ) ; <S2SV_ModStart> value ) ; if ( _PyObject_SetAttrId ( result, & PyId_line_offset, value ) == - 1 ) goto failed ; Py_DECREF ( value ) ; <S2SV_ModStart> value ) ; if ( _PyObject_SetAttrId ( result, & PyId_col_offset, value ) == - 1 ) goto failed ; Py_DECREF ( value ) ; <S2SV_ModStart> value ) ; if ( _PyObject_SetAttrId ( result, & PyId_end_lineno, value ) == - 1 ) goto failed ; Py_DECREF ( value ) ; if ( _PyObject_SetAttrId ( result, & PyId_end_col_offset, value ) == - 1 ) goto failed ; Py_DECREF ( value ) ;",0
36,"<S2SV_ModStart> ( page && access ( page, R_OK ) == 0 ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } } else if (! strcmp ( func, ""page/set"" ) ) { char * wikitext = NULL, * page = NULL ; if ( ( ( wikitext = http_request_param_get ( req, ""text"" ) )!= NULL ) && ( ( page = http_request_param_get ( req, ""page"" ) )!= NULL ) ) { file_write ( page, wikitext ) ; http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } } else if (! strcmp ( func, ""page/delete"" ) ) { char * page = http_request_param_get ( req, ""page"" ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( unlink ( page ) > 0 ) { http_response_printf ( res, ""success"" ) ; http_response_send (",0
37,"<S2SV_ModStart> low_var_thresh, int mb_rows, int mb_cols, <S2SV_ModEnd> double level = <S2SV_ModStart>.5 ) ; unsigned char * limits = cm -> pp_limits_buffer ; ; int mbr, mbc ; ( void ) post ; ( void ) low_var_thresh ; ( void ) flag ; vpx_memset ( limits, ( unsigned char ) ppl, 16 * mb_rows ) ; for ( mbr = 0 ; mbr < mb_rows ; mbr ++ ) { vp8_post_proc_down_and_across_mb_row ( source -> y_buffer + 16 * mbr * source -> y_stride, source -> y_buffer + 16 * mbr * source -> y_stride, source -> y_stride, source -> y_width, limits, 16 ) ; vp8_post_proc_down_and_across_mb_row ( source -> u_buffer + 8 * mbr * source -> uv_stride, source -> u_buffer + 8 * mbr * source -> uv_stride, source -> uv_stride, source -> uv_width, limits, 8 ) ; vp8_post_proc_down_",0
38,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> ) ; struct mb2_cache_entry <S2SV_ModEnd> * ce ; <S2SV_ModStart> int error ; error = mb2_cache_entry_alloc ( ext4_mb_cache, GFP_NOFS, & ce ) ; if ( error ) { ea_bdebug ( bh, ""out <S2SV_blank> of <S2SV_blank> memory"" ) ; return ; } <S2SV_ModStart> = mb_cache_entry_insert ( ext4_mb_cache, ce, <S2SV_ModEnd> bh -> b_bdev <S2SV_ModStart> bh -> b_blocknr <S2SV_ModEnd> ) ; if <S2SV_ModStart> error ) { mb2_cache_entry_free <S2SV_ModEnd> ( ce ) <S2SV_ModStart> hash ) ; mb2_cache_entry_release <S2SV_ModEnd> ( ce )",0
39,"<S2SV_ModStart> ) ) ; if (! <S2SV_ModEnd> r_socket_http_answer ( s <S2SV_ModStart>, rlen ) ) { free ( uri ) ; return NULL ; } return NULL",0
40,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct ip_options_rcu <S2SV_ModEnd> * ip_options_get_from_user ( <S2SV_ModStart> ip_options_get_from_user ( struct ip_options_rcu <S2SV_ModEnd> * net, <S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * optp, <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> return ip_options_get_finish (",0
41,"<S2SV_ModStart> ( ndo, ""[|truncated]"" <S2SV_ModEnd> ) ) ;",0
42,"<S2SV_ModStart> } else { # ifdef FEAT_GUI if ( gui. in_use ) errmsg = ( char_u * ) N_ ( ""E531: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; # endif else",0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode <S2SV_ModStart>, & new_mode, & acl ) ; if ( ret <S2SV_ModEnd> ) goto out",0
44,"<S2SV_ModStart> size_t size ; if ( width < 0 || height < 0 ) { goto error ; } if (! jas_safe_intfast32_add ( tlx, width, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ) { goto error ; } if (! ( cmpt = jas_malloc ( sizeof ( jas_image_cmpt_t ) ) ) ) { goto error ; } cmpt -> type_ = JAS_IMAGE_CT_UNKNOWN ; cmpt -> tlx_ = tlx ; cmpt -> tly_ = tly ; cmpt -> hstep_ = hstep ; cmpt -> vstep_ = vstep ; cmpt -> prec_ = depth ; cmpt -> sgnd_ = sgnd ; cmpt -> stream_ = 0 ; cmpt -> cps_ = ( depth + 7 ) / 8 ; if (! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ) { goto error ;",0
45,<S2SV_ModStart> dp == datalen || datalen == 0,0
46,"<S2SV_ModStart> * req, u32 <S2SV_ModEnd> acl_len ) { <S2SV_ModStart> acl_len ) { <S2SV_ModEnd> uint32_t attrlen, <S2SV_ModStart> int status ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> xdr, OP_GETATTR <S2SV_ModEnd> ) )!= <S2SV_ModStart>, & attrlen <S2SV_ModEnd> ) )!= <S2SV_ModStart> { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"" <S2SV_ModEnd>, attrlen, <S2SV_ModStart> attrlen ) ; <S2SV_ModEnd> } else status",0
47,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
48,"<S2SV_ModStart> ) ) { if ( smatch ( auth, ""APPWEB"" ) ) { return MPR_ERR_BAD_SYNTAX ; } <S2SV_ModStart> ; } } if ( smatch ( tok, ""APPWEB"" ) ) { if ( snumber ( owner ) ) { uid = ( int ) stoi ( owner ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { uid = HTTP -> uid ; } else { uid = 0 ; } } if ( perms && snumber ( perms ) ) { mode = ( int ) stoiradix ( perms, - 1, NULL ) ; } else { mode = 0 ; } } else { dirs = auth ; auth = 0 ; } tok = dirs ; for ( tok = sclone ( dirs ) ; ( dir = stok ( tok, "","", & tok ) )!= 0 ; ) { path = httpMakePath ( state -> route, state -> configDir, dir ) ; if ( mprGetPathInfo ( path, & info ) == 0 && info. isDir ) { continue ; } if ( mprMakeDir ( path, mode, uid, gid, 1 ) < 0 ) { return MPR_ERR_BAD_SYNTAX ;",0
49,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> addr = VPX_MALLOC_L <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; <S2SV_ModEnd> if ( addr,0
50,"<S2SV_ModStart> int res ; size_t <S2SV_ModEnd> indexes = SQUASHFS_LOOKUP_BLOCKS <S2SV_ModStart> long long export_index_table [ indexes ] ; memset ( export_index_table, 0, sizeof ( long long ) * indexes ) <S2SV_ModEnd> ; res = <S2SV_ModStart> read_fs_bytes ( fd -> fd <S2SV_ModStart> FALSE ; } res = read_fs_bytes ( fd -> fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } SQUASHFS_INSWAP_LOOKUP_BLOCKS ( export_index_table, indexes ) ; * table_start = export_index_table [ 0 ] ;",0
51,<S2SV_ModStart> ; } else { <S2SV_ModStart> p1 ) ; },0
52,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> # if CONFIG_VP8_ENCODER <S2SV_ModStart> # endif } for ( argi = argj = argv ; ( * argj = * argi ) ; argi += arg. argv_step ) { arg. argv_step = 1 ; if ( eos_mark_found ) { argj ++ ; continue ; } else if (! strcmp ( * argj, ""--"" ) ) { eos_mark_found = 1 ; continue ; } else if (! strcmp ( * argj, ""--"" ) ) { eos_mark_found = 1 ; continue ; } else if (! strcmp ( * argj, ""--"" ) ) { eos_mark_found = 1 ; continue ; } else <S2SV_ModStart> } if ( <S2SV_ModEnd> arg_match ( &",0
53,<S2SV_ModStart> } if ( c -> opt -> option. client || c -> opt -> protocol ) return 0 ; if ( c -> opt -> redirect_addr. names ) return 1 ; if ( <S2SV_ModStart> 1 ; } <S2SV_ModEnd> return 0 ; <S2SV_ModStart> return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
54,"<S2SV_ModStart> ; if ( crypto_memneq <S2SV_ModEnd> ( cmac,",0
55,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> const uint64_t bits_used <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
56,"<S2SV_ModStart> EOFOp 0x07 char * magick ; Image * image ; int opcode, operand, status ; MagickStatusType flags ; MagickSizeType number_pixels ; MemoryInfo * pixel_info ; Quantum index ; unsigned char background_color [ 256 ], * colormap, plane, * pixels ; assert ( exception -> signature == MagickCoreSignature ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; count = ReadBlob ( image, 2, ( unsigned char * ) magick ) ; if ( ( count!= 2 ) || ( memcmp ( magick, ""\\122\\314"", 2 )!= 0 ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; do { <S2SV_ModStart>. x = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. y = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart> -> columns = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart> -> rows = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart> -> columns = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart> -> rows = ReadBlobLSBLong <S2SV_ModEnd>",0
57,"<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> altsetting [ 0 ]. desc. bNumEndpoints < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; error = - EINVAL ; goto err_free_urb ; }",1
58,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
59,"<S2SV_ModStart> * dir = ""/tmp"" <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( fd = safe_mkstemp <S2SV_ModEnd> ( & tmpname",0
60,<S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_pic_done ) { ps_codec -> i4_pic_done = 1 ; return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_pic_done ) { ps_codec -> i4_pic_done = 1 ; return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_pic_done ) { ps_codec -> i4_pic_done = 1 ; return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_pic_done ) { ps_codec -> i4_pic_done = 1 ; return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_pic_done ) { ps_codec -> i4_pic_done = 1 ; return IHEVCD_INVALID_HEADER ; },0
61,"<S2SV_ModStart> ) ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; }",0
62,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> vp9_setup_dst_planes ( MACROBLOCKD <S2SV_ModStart> mi_col ) { int i ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y ) ; } for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y ) ; } for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { <S2SV_ModStart> i ) { <S2SV_ModEnd> setup_pred_plane ( &",0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,<S2SV_ModStart> get_block = ocfs2_get_block <S2SV_ModEnd> ; return __blockdev_direct_IO,0
65,"<S2SV_ModStart>, ""%79s <S2SV_blank> %[^\\n]\\n"", def, strparm ) == 2 ) { if ( strparm [ 0 ] == \'""\' ) { isstring = true ; len = strlen ( strparm ) ; newstring = ( char * ) malloc ( len ) ; strparm [ len - 1 ] = 0 ; strcpy ( newstring, strparm + 1 ) ; } else if ( strparm [ 0 ] == '0' && strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else sscanf ( strparm, ""%i"", & parm ) ; for ( i = 0 ; i < numdefaults ; i ++ ) if (! strcmp ( def, defaults [ i ]. name ) ) { if (! isstring ) * defaults [ i ]. location = parm ; else * defaults [ i ]. location = ( int ) newstring ; break ; } } } fclose ( f ) ; } for ( i = 0 ; i < numdefaults ; i ++ ) { if ( defaults [ i ]. scantranslate ) { parm = * defaults",0
66,"<S2SV_ModStart> n ) { <S2SV_ModEnd> PyCompilerFlags cf ; <S2SV_ModStart> ; mod_ty mod <S2SV_ModEnd> ; assert ( <S2SV_ModStart> expr_end == ':' <S2SV_ModEnd> ) ; if <S2SV_ModStart> = PyCF_ONLY_AST ; mod = string_object_to_c_ast ( str, PyUnicode_FromString ( ""<fstring>"" ), Py_eval_input, & cf, c -> c_feature_version, c -> c_arena ) ; PyMem_RawFree ( str ) ; if (! mod ) return NULL ; return mod -> v. Expression. body <S2SV_ModEnd> ; } <S2SV_null>",0
67,"<S2SV_ModStart> string ) { return cJSON_FindString <S2SV_ModEnd> ( object -> <S2SV_ModStart> object -> child, string ) <S2SV_ModEnd> ; } <S2SV_null>",0
68,<S2SV_ModStart> size ) ; if ( px -> ft == NULL ) { return FALSE ; },0
69,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ;",0
70,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
71,"<S2SV_ModStart> int i ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> uv_stride, src -> alpha_stride } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ], buffers [ i ], strides [ i ], mi_row, mi_col, sf, pd -> subsampling_x, pd -> subsampling_y ) ; } for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ], strides [ i ], mi_row, mi_col, sf, pd -> subsampling_x, pd -> subsampling_y ) ; } } for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre",0
72,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ; <S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; for (,0
73,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
74,<S2SV_ModStart> user ) { cleanup_srcu_struct ( & user -> release_barrier ) ; <S2SV_ModStart> _ipmi_destroy_user ( user <S2SV_ModEnd> ) ; kref_put,0
75,"<S2SV_ModStart> int sl = 0 ; int limit = 0 ; mongo_message * mm ; if ( cursor -> limit > 0 ) limit = cursor -> limit - cursor -> seen ; mm = mongo_message_create ( 16 + 4 + sl + 4 + 8, 0, 0, MONGO_OP_GET_MORE ) ; data = & mm -> data ; data = mongo_data_append32 ( data, & ZERO ) ; data = mongo_data_append ( data, cursor -> ns, sl ) ; data = mongo_data_append32 ( data, & limit ) ; mongo_data_append64 ( data, & cursor -> reply -> fields. cursorID ) ; bson_free ( cursor -> reply ) ; res = mongo_message_send ( cursor -> conn, mm ) ; if ( res!= MONGO_OK ) { mongo_cursor_destroy ( cursor ) ; return MONGO_ERROR ; } res = mongo_read_response ( cursor -> conn, & ( cursor -> reply ) ) ; if ( res!= MONGO_OK ) { mongo_cursor_destroy ( cursor ) ; return MONGO_ERROR ; }",0
76,"<S2SV_ModStart> * for_ch ; <S2SV_ModEnd> REQ ( n <S2SV_ModStart> comp_for ) ; <S2SV_ModEnd> for_ch = CHILD <S2SV_ModStart> 1 + is_async ) ; if ( TYPE ( CHILD ( n, 0 ) ) == ASYNC ) { is_async = 1 ; } if ( is_async && c -> c_feature_version < 6 ) { ast_error ( c, n, ""Async <S2SV_blank> comprehension <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } if ( is_async && c -> c_feature_version < 7 ) { ast_error ( c, n, ""Async <S2SV_blank> comprehension <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.7 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } if ( NCH ( n ) == ( 5 + is_async ) ) { int j, n_ifs ; asdl_seq * ifs ; n = CHILD ( n, 4 + is_async ) ; n_ifs = count_comp_ifs ( c, n ) ; if ( n_ifs == - 1 ) { ast_error ( c, n, ""Async <S2SV_blank> com",0
77,<S2SV_ModStart> NULL ; } rcu_read_lock ( ) ; <S2SV_ModStart> dst ; } rcu_read_unlock ( ) ;,0
78,"<S2SV_ModStart> * cpi, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> w ) { const VP9_COMMON * const cm = & cpi -> common ; const MACROBLOCKD * const xd = & cpi -> mb. e_mbd ; const struct segmentation * const seg = & cm -> seg ; const MODE_INFO * mi = mi_8x8 [ 0 ] ; const MODE_INFO * above_mi = mi_8x8 [ - xd -> mi_stride ] ; const MODE_INFO * left_mi = xd -> left_available? mi_8x8 [ - 1 ] : NULL ; const MB_MODE_INFO * const mbmi = & mi -> mbmi ; const BLOCK_SIZE bsize = mbmi -> sb_type ; if ( seg -> update_map ) write_segment_id ( w, seg, mbmi -> segment_id ) ; write_skip ( cpi, mbmi -> segment_id, mi, w ) ; if ( bsize >= BLOCK_8X8 && cm -> tx_mode == TX_MODE_SELECT ) write_selected_tx_size ( cpi, mbmi -> tx_size, bsize, w )",0
79,"<S2SV_ModStart> maxn ) { <S2SV_ModEnd> # ifdef DEBUG <S2SV_ModStart> ; # endif if ( n > maxn ) SWF_error ( ""Action <S2SV_blank> overflow!!"" ) ;",0
80,<S2SV_ModStart> ; if ( EXTRACT_32BITS ( & prep -> pp_n ) <S2SV_ModEnd> < sizeof ( <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> n = EXTRACT_32BITS,0
81,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
82,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> addModuleArgument ( sqlite3 <S2SV_ModStart> zArg ) { sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof <S2SV_ModStart> = sizeof ( sqlite3_int64 <S2SV_ModEnd> ) * ( <S2SV_ModStart> nModuleArg ) ; sqlite3_int64 <S2SV_ModEnd> * * azModuleArg <S2SV_ModStart> } else { sqlite3_int64 <S2SV_ModEnd> i = pTable,0
83,<S2SV_ModStart> ) ; } for ( i = anal_size - 1 ; i >= 0 ; i -- ) { u_in [ i ] = x [ i - anal_size ] ; } for ( i = anal_size - 1 ; i >= 0 ; i -- ) { u_out [ i ] = x [ i - anal_size ] ; } for ( i = anal_size - 1 ; i >= 0 ; i -- ) { u_in [ i ] = x [ i - anal_size ] ; } for ( i = anal_size - 1 ; i >= 0 ; i -- ) { u_out [ i ] = x [ i - anal_size ] ; } for ( i = anal_size - 1 ; i >= 0 ; i -- ) { u_in [ i ] = x [ i - anal_size ] ; } for ( i = anal_size - 1 ; i >= 0 ; i -- ) { u_in [ i ] = x [ i - anal_size ] ; } for ( i = anal_size - 1 ; i >= 0 ; i -- ) { u_in [ i ] = x [,0
84,<S2SV_ModStart> -> dmin ; if ( ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { <S2SV_ModStart> p ) ; } <S2SV_ModStart> ONIGENC_IS_SINGLEBYTE ( reg <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_SINGLEBYTE ( reg <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_SINGLEBYTE ( reg <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_SINGLEBYTE ( reg <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_SINGLEBYTE ( reg <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_SINGLEBYTE ( reg <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_SINGLEBYTE ( reg <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_SINGLEBYTE ( reg <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_SINGLEBYTE ( reg <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_SINGLEBYTE ( reg <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_SINGLEBYTE ( reg <S2SV_ModEnd> ) ) {,0
85,"<S2SV_ModStart> bfq_idle_slice_timer_body ( struct bfq_sched_data * sched_data <S2SV_ModEnd> ) { struct <S2SV_ModStart> bfq_data * bfqd <S2SV_ModEnd> ; enum bfqq_expiration <S2SV_ModStart> long flags ; struct bfq_queue * bfqq ; <S2SV_ModStart> flags ) ; bfq_clear_bfqq_wait_request_sched <S2SV_ModEnd> ( bfqq ) <S2SV_ModStart> return ; } bfq_bfqq_expire ( bfqd, bfqq, true, reason ) ; <S2SV_ModStart> flags ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
86,,1
87,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
88,"<S2SV_ModStart> diffBlock + diffBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } memcpy ( newData + newpos, diffPtr, x ) ; diffPtr += x ; if ( diffPtr <S2SV_ModEnd> > diffBlock + <S2SV_ModStart> diffBlock + diffBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } memcpy ( newData + newpos, extraPtr, y ) ; extraPtr += y ; if ( extraPtr <S2SV_ModEnd> > extraBlock + <S2SV_ModStart> extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } memcpy ( newData + newpos, extraPtr, z ) ; extraPtr += z ; if ( diffPtr + z > diffBlock + diffBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL",0
89,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> np -> tclass ) ; rcu_read_unlock (,0
90,"<S2SV_ModStart> image ) { if ( image -> bytes_per_pixel > MagickMax ( number_pixels, max_packets ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> ) ) { if ( image -> bytes_per_pixel > MagickMax ( number_pixels, max_packets ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> ) ) { if ( image -> bytes_per_pixel > MagickMax ( number_pixels, max_packets ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> ) ) { if ( image -> bytes_per_pixel > MagickMax ( number_pixels, max_packets ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> ) ) { if ( image -> bytes_per_pixel > MagickMax ( number_pixels, max_packets ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> ) ) { if ( image -> bytes_per_pixel > MagickMax ( number_pixels, max_",0
91,<S2SV_ModStart> data ) { ( void ) data ;,0
92,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
93,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
94,"<S2SV_ModStart> mb_offset ) ; memcpy <S2SV_ModEnd> ( mvx, <S2SV_ModStart> ] ) ; memcpy <S2SV_ModEnd> ( mvy, <S2SV_ModStart> ] ) ; memcpy <S2SV_ModEnd> ( mvx, <S2SV_ModStart> ] ) ; memcpy <S2SV_ModEnd> ( mvy, <S2SV_ModStart> ] ) ; memcpy <S2SV_ModEnd> ( mvp [ <S2SV_ModStart> ] ) ; memcpy <S2SV_ModEnd> ( mvp [ <S2SV_ModStart> ] ) ; memcpy <S2SV_ModEnd> ( mvp [ <S2SV_ModStart> ] ) ; memcpy <S2SV_ModEnd> ( mvp [ <S2SV_ModStart> ] ) ; memcpy <S2SV_ModEnd> ( mvp [ <S2SV_ModStart> ] ) ; memcpy <S2SV_ModEnd> ( mvp [ <S2SV_ModStart> ] ) ; memcpy <S2SV_ModEnd> ( mvp [ <S2SV_ModStart> ] ) ; memcpy <S2SV_ModEnd> ( mvy, <S2SV_ModStart> ] ) ; memcpy <S2SV_ModEnd> ( mvp [ <S2SV_ModStart> ] ) ; memcpy <S2SV_ModEnd> ( mvp [ <S2SV_ModStart> ] ) ; memcpy <S2SV_ModEnd> ( mvp [ <S2SV_ModStart> ] ) ; memcpy <S2SV_ModEnd> ( mvp [ <S2SV_ModStart> ] ) ; memcpy <S2SV_ModEnd> ( mvp [ <S2SV_ModStart> ] ) ; memcpy <S2SV_ModEnd> ( mvp [ <S2SV_ModStart> ] ) ; memcpy <S2SV_ModEnd> ( mvp [ <S2SV_ModStart> ] ) ; memcpy <S2SV_ModEnd> ( mvp [ <S2SV_ModStart> ] ) ; memcpy <S2SV_ModEnd> ( mvp [",0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
97,"<S2SV_ModStart> msicap msicap ; if ( <S2SV_ModStart> msicap, msgnum ) < 0 ) return - EINVAL <S2SV_ModEnd> ; return pci_emul_add_capability",0
98,"<S2SV_ModStart> return REDIS_OK ; } if ( cmd -> proc == quitCommand ) { addReplyError ( c, shared. ok ) ; c -> flags |= REDIS_CLOSE_AFTER_REPLY ; return REDIS_OK ; }",0
99,<S2SV_ModStart> ; if ( cfg -> g_w == 0 || cfg -> g_h == 0 ) return VPX_CODEC_ERR_INVALID_ARGS ; if ( <S2SV_ModStart> VPX_RC_ONE_PASS ) ) return VPX_CODEC_ERR_INVALID_ARGS ; if <S2SV_ModEnd> ( cfg -> <S2SV_ModStart> cfg -> g_lag_in_frames == 0 ) return VPX_CODEC_ERR_INVALID_ARGS ; if <S2SV_ModEnd> ( cfg -> <S2SV_ModStart> cfg -> g_lag_in_frames == 1 ) return VPX_CODEC_ERR_INVALID_ARGS ; if <S2SV_ModEnd> ( cfg -> <S2SV_ModStart> cfg -> g_pass == VPX_RC_ONE_PASS ) return VPX_CODEC_ERR_INVALID_ARGS ; if <S2SV_ModEnd> ( cfg -> <S2SV_ModStart> g_lag_in_frames > 1 ) return VPX_CODEC_ERR_INVALID_ARGS ; if <S2SV_ModEnd> ( cfg -> <S2SV_ModStart> cfg -> g_pass == VPX_RC_ONE_PASS ) return VPX_CODEC_ERR_INVALID_ARGS ; if ( cfg -> g_pass == VPX_RC_ONE_PASS ) return VPX_CODEC_ERR,0
100,<S2SV_ModStart> { cpi -> mb. <S2SV_ModStart> zbin_mode_boost = 0 <S2SV_ModEnd> ; } <S2SV_null>,0
101,<S2SV_ModStart> info -> si_code!= SI_QUEUE ) <S2SV_ModEnd> return - EPERM <S2SV_ModStart> return - EPERM <S2SV_ModEnd> ; return do_send_specific,0
102,"<S2SV_ModStart> ptr -> size ; ISOM_DECREASE_SIZE ( ptr, 1 ) tmp_strsize -= <S2SV_ModEnd> 8 ; tmp_str <S2SV_ModStart> ptr -> size ; ISOM_DECREASE_SIZE ( ptr, 1 ) tmp_strsize -= <S2SV_ModEnd> 8 ; ptr <S2SV_ModStart> ptr -> size ; ISOM_DECREASE_SIZE ( ptr, 1 ) tmp_strsize -= <S2SV_ModEnd> 8 ; ptr <S2SV_ModStart> ptr -> size ; ISOM_DECREASE_SIZE ( ptr, 1 ) tmp_strsize -= <S2SV_ModEnd> 8 ; ptr <S2SV_ModStart> ptr -> size ; ISOM_DECREASE_SIZE ( ptr, 1 ) tmp_strsize -= <S2SV_ModEnd> 8 ; ptr <S2SV_ModStart> ptr -> size ; ISOM_DECREASE_SIZE ( ptr, 1 ) tmp_strsize -= <S2SV_ModEnd> 8 ; ptr <S2SV_ModStart> ptr -> size ; ISOM_DECREASE_SIZE ( ptr, 1 ) tmp_strsize -= <S2SV_ModEnd> 8 ; ptr <S2SV_ModStart> ptr -> size ; ISOM_DECREASE_SIZE ( ptr, 1 ) tmp_strsize -= <S2SV_ModEnd> 8 ; ptr <S2SV_ModStart> ptr -> size ; ISOM_DECREASE_SIZE ( ptr, 1 ) tmp_strsize -= <S2SV_ModEnd> 8 ; ptr <S2SV_ModStart> ptr -> size ; ISOM_DE",0
103,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
104,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> -> state == fmode <S2SV_ModEnd> ) return ; <S2SV_ModStart> if ( ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> )!= ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> { if ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> -> state = fmode <S2SV_ModEnd> ; } <S2SV_null>",0
105,"<S2SV_ModStart> ) break ; status = SetImageExtent ( read_info, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( ( Image * ) NULL ) ; }",0
106,<S2SV_ModStart> 0 ; } if ( len > SIZE_MAX - elem. in_sg [ 0 ]. iov_len ) { return 0 ; },0
107,<S2SV_ModStart> unsigned ) JPC_QCX_GETEXPN <S2SV_ModEnd> ( qcd -> <S2SV_ModStart> unsigned ) JPC_QCX_GETMANT <S2SV_ModEnd> ( qcd ->,0
108,"<S2SV_ModStart> = AV_PIX_FMT_PAL8 ; avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; <S2SV_ModStart> = AV_PIX_FMT_PAL8 ; avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; <S2SV_ModStart> = AV_PIX_FMT_PAL8 ; avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; <S2SV_ModStart> = AV_PIX_FMT_PAL8 ; avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; <S2SV_ModStart> = AV_PIX_FMT_PAL8 ; avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; <S2SV_ModStart> = AV_PIX_FMT_PAL8 ; avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ;",0
109,"<S2SV_ModStart> ) ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } <S2SV_ModStart> - 1 ) ; if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } if ( caplen > 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } if ( caplen > 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } if ( caplen > 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } } if ( caplen > 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } if ( caplen > 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; } if ( caplen > 2 ) { N",0
110,"<S2SV_ModStart> * name = fdt_get_name <S2SV_ModEnd> ( fit, <S2SV_ModStart>, err_msg, fdt_get_name <S2SV_ModEnd> ( fit, <S2SV_ModStart>, err_msg, fdt_get_name <S2SV_ModEnd> ( fit,",0
111,"<S2SV_ModStart> rx_kfifo_lock ) ; state -> dev = dev ; sd = & state -> sd ; v4l2_subdev_init ( & state -> sd, & cx23888_ir_controller_ops ) ; v4l2_set_subdevdata ( sd, state ) ; snprintf ( sd -> name, sizeof ( sd -> name ), ""%s/888-ir"", dev -> name ) ; sd -> grp_id = CX23885_HW_888_IR ; ret = v4l2_device_register_subdev ( & dev -> v4l2_dev, sd ) ; if ( ret == 0 ) { cx23888_ir_write4 ( dev, CX23888_IR_IRQEN_REG, 0 ) ; mutex_init ( & state -> rx_params_lock ) ; default_params = default_rx_params ; v4l2_subdev_call ( sd, ir, rx_s_parameters, & default_params ) ; mutex_init ( & state -> tx_params_lock ) ; default_params = default_tx_params ; v4",0
112,"<S2SV_ModStart> * iface, <S2SV_ModEnd> vpx_codec_flags_t flags, <S2SV_ModStart> ( ( flags & ( VPX_CODEC_USE_XMA | VPX_CODEC_USE_POSTPROC | VPX_CODEC_USE_ERROR_CONCEALMENT | VPX_CODEC_USE_INPUT_FRAGMENTS ) ) &&! ( iface -> caps & VPX_CODEC_CAP_DECODER ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_POSTPROC ) &&! ( iface -> caps & VPX_CODEC_CAP_POSTPROC ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_ERROR_CONCEALMENT ) &&! ( iface -> caps & VPX_CODEC_CAP_",0
113,<S2SV_ModStart> ; value |= TJA1100_CONFIG1_MII_MODE_RMII_50MHZ <S2SV_ModEnd> ; tja1100WritePhyReg (,0
114,<S2SV_ModStart> = tos ; ipc. tos = tos ;,0
115,<S2SV_ModStart> ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & <S2SV_ModStart> VPX_CODEC_XMA ) ) <S2SV_ModEnd> ) res =,0
116,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
117,"<S2SV_ModStart> counter ) ; if ( xdr_stream_encode_share_access ( xdr, arg -> open_flags ) < 0 ) return ; <S2SV_ModStart> arg -> open_flags ) ; if ( xdr_stream_encode_share_access ( xdr, arg -> open_fmode ) < 0 ) return ; if ( xdr_stream_encode_fmode ( xdr, arg -> fmode ) < 0 ) return ; if ( xdr_stream_encode_fmode ( xdr, arg -> fmode ) < 0 ) return ; if ( xdr_stream_encode_fmode ( xdr, arg -> fmode ) < 0 ) return ; if ( xdr_stream_encode_fmode ( xdr, arg -> fmode ) < 0 ) return ; if ( xdr_stream_encode_fmode ( xdr, arg -> fmode ) < 0 ) return ; if ( xdr_stream_encode_fmode ( xdr, arg -> fmode ) < 0 ) return ; if ( xdr_stream_encode_fmode ( xdr, arg -> fmode ) < 0 ) return",0
118,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ) ; return 0 <S2SV_ModStart> break ; } return error <S2SV_ModEnd> ; } <S2SV_null>,1
119,"<S2SV_ModStart> len ) ; if ( len < 1 ) { r_strbuf_append_c ( & op -> esil,'<S2SV_blank>') ; return - 1 ; } <S2SV_ModStart> len ) ; if ( len < 1 ) { r_strbuf_append_c ( & op -> esil,'<S2SV_blank>') ; return - 1 ; } <S2SV_ModStart> len ) ; if ( len < 1 ) { r_strbuf_append_c ( & op -> esil,'<S2SV_blank>') ; return - 1 ; } <S2SV_ModStart> len ) ; if ( len < 1 ) { r_strbuf_append_c ( & op -> esil,'<S2SV_blank>') ; return - 1 ; } <S2SV_ModStart> len ) ; if ( len < 1 ) { r_strbuf_append_c ( & op -> esil,'<S2SV_blank>') ; return - 1 ; } <S2SV_ModStart> len ) ; if ( len < 1 ) { r_strbuf_append_c ( & op -> esil,'<S2SV_blank>') ; return - 1 ; } <S2SV_ModStart> len ) ; if ( len < 1 ) { r_strbuf_append_c ( & op -> esil,'<S2SV_blank>') ; return - 1 ; }",0
120,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
121,<S2SV_ModStart> goto trunc ; if ( lshp -> ls_length < sizeof ( struct lsa6_hdr ) ) goto trunc ;,0
122,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { ret = - EFAULT ; break ; } <S2SV_ModEnd> * obuf =",0
123,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
124,"<S2SV_ModStart> 0 ) { if ( ( <S2SV_ModStart> | O_CLOEXEC ) ) < 0 ) { APPL_TRACE_ERROR ( ""%s: <S2SV_blank> Error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank> err:%d"", __FUNCTION__, errno ) ; break ; } <S2SV_ModEnd> } p_dev -> <S2SV_ModStart> 0 ) { if ( ( <S2SV_ModStart> | O_CLOEXEC ) ) < 0 ) { APPL_TRACE_ERROR ( ""%s: <S2SV_blank> Error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank> err:%d"", __FUNCTION__, errno ) ; break ; } <S2SV_ModEnd> } p_dev -> <S2SV_ModStart> 0 ) { if ( ( <S2SV_ModStart> | O_CLOEXEC ) ) < 0 ) { APPL_TRACE_ERROR ( ""%s: <S2SV_blank> Error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank> err:%d"", __FUNCTION__, errno ) ; break ; } <S2SV_ModEnd> } p_dev -> <S2SV_ModStart> 0 ) { if ( ( <S2SV_ModStart> | O_CLOEXEC ) ) < 0 ) { APPL_TRACE_ERROR ( ""%s: <S2SV_blank> Error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank> err:%d"", __FUNCTION__, errno ) ; break ; }",0
125,"<S2SV_ModStart> costs, vp9_tree * <S2SV_ModStart> c ) { vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> ) ; const vpx_tree_index <S2SV_ModEnd> ii = tree",0
126,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
127,<S2SV_ModStart> & 0xffff ; if (! synth_devs [ dev ] ||! synth_devs [ dev ] -> load_patch ) return - ENXIO ;,0
128,"<S2SV_ModStart> fadst16 ( const tran_low_t * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t <S2SV_ModEnd> x0 = input <S2SV_ModStart> 15 ] ; tran_high_t <S2SV_ModEnd> x1 = input <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> x2 = input <S2SV_ModStart> 13 ] ; tran_high_t <S2SV_ModEnd> x3 = input <S2SV_ModStart> 2 ] ; tran_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 4 ] ; tran_high_t <S2SV_ModEnd> x5 = input <S2SV_ModStart> 9 ] ; tran_high_t <S2SV_ModEnd> x7 = input <S2SV_ModStart> 7 ] ; tran_high_t <S2SV_ModEnd> x9 = input <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> x10 = input <S2SV_ModStart> 5 ] ; tran_high_t <S2SV_ModEnd> x11 = input <S2SV_ModStart> 10 ] ; tran_high_t <S2SV_ModEnd> x12 = input <S2SV_ModStart> 12 ] ; tran_high_t <S2SV_ModEnd> x15 = input <S2SV_ModStart> 14 ] ; tran_high_t",0
129,<S2SV_ModStart> ; # if HAVE_LIBEDSP <S2SV_ModEnd> flags |= HAS_EDSP <S2SV_ModStart> endif # if HAVE_MEDIA <S2SV_ModEnd> flags |= HAS_MEDIA <S2SV_ModStart> endif # if HAVE_NEON <S2SV_ModEnd> flags |= HAS_NEON,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
131,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> count_segs_sb ( VP9_COMP <S2SV_ModStart> * cpi, <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * mi, int * no_pred_segcounts, int ( * temporal_predictor_count ) [ 2 ], int mi_row, int mi_col, BLOCK_SIZE bsize ) { <S2SV_ModStart> & cpi -> cm <S2SV_ModEnd> ; const int <S2SV_ModStart> ) return ; int bw = num_8x8_blocks_wide_lookup [ mi [ 0 ] -> mbmi. sb_type ] ; int bh = num_8x8_blocks_high_lookup [ mi [ 0 ] -> mbmi. sb_type ] ; if ( bw == bs && bh == bs ) { count_segs ( cpi, tile, mi, mi_8x8, no_pred_segcounts, temporal_predictor_count, bs, bs, mi_row, mi_col ) ; } else if ( bw == bs && bh < bs ) { count_segs ( cpi, tile, mi, mi_8x8 + hbs * mis, no_pred",0
132,<S2SV_ModStart> & CLIENT_CLOSE_AFTER_REPLY ) { if ( c -> flags & CLIENT_CLOSE_AFTER_REPLY ) break ; } <S2SV_ModEnd> if (!,0
133,<S2SV_ModStart> get_blocks_flags = EXT4_GET_BLOCKS_CREATE | EXT4_GET_BLOCKS_NO_RESERVE <S2SV_ModStart> get_blocks_flags |= EXT4_GET_BLOCKS_DELALLOC_RESERVE ; if ( get_blocks_flags & EXT4_GET_BLOCKS_NO_RESERVE ) get_blocks_flags |= EXT4_GET_BLOCKS_NO_RESERVE,0
134,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart>, handle, <S2SV_ModEnd> p -> ai_flags <S2SV_ModStart> p -> ai_flags, <S2SV_ModEnd> p -> ai_family <S2SV_ModStart> p -> ai_family, <S2SV_ModEnd> p -> ai_socktype <S2SV_ModStart> p -> ai_socktype <S2SV_ModEnd>, p -> <S2SV_ModStart>, NULL, <S2SV_ModEnd> p -> ai_addrlen <S2SV_ModStart>, NULL, <S2SV_ModEnd> p -> ai_addrlen <S2SV_ModStart> p -> ai_addrlen <S2SV_ModEnd>, NULL ) <S2SV_ModStart> } if ( <S2SV_ModEnd> p -> ai_family <S2SV_ModStart> p -> ai_family == AF_INET || <S2SV_ModEnd> p -> ai_socktype <S2SV_ModStart> p -> ai_socktype == SOCK_STREAM || <S2SV_ModEnd> p -> ai_protocol <S2SV_ModStart> p -> ai_protocol == SOCK_STREAM ) { ret = OE_EAI_MEMORY ; goto done ; } if ( retval == 1 ) break ; if ( retval!= - 1 || oe_errno!= OE_ENAMETOOLONG ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( oe_errno ) ; } if ( p -> ai_family == AF_INET || <S2SV_ModEnd> p -> ai_socktype <S2SV_ModStart> p -> ai_protocol == SOCK_STREAM ) { ret = OE",0
135,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
136,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
137,"<S2SV_ModStart> __u16 size, const <S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmemdup ( data, size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; kfree ( buf ) ;",1
138,"<S2SV_ModStart> asdl_seq * body, asdl_seq * type_comment <S2SV_ModStart> = body ; p -> v. Module. type_comment = type_comment ;",0
139,"<S2SV_ModStart>, int64_t ts_end <S2SV_ModEnd> ) { struct <S2SV_ModStart> 4 ; # else ( void ) src ; ( void ) ts_start ; ( void ) ts_end ; unsigned int flags ; # <S2SV_ModStart> write_idx ) ; <S2SV_ModEnd> if ( ctx <S2SV_ModStart> # if USE_PARTIAL_COPY <S2SV_ModEnd> vp9_copy_and_extend_frame ( src <S2SV_ModStart> img ) ; <S2SV_ModEnd> # else vp9_copy_and_extend_frame <S2SV_ModStart> img ) ; <S2SV_ModEnd> buf -> ts_start",0
140,"<S2SV_ModStart> method == LPF_PICK_FROM_Q || method == LPF_PICK_FROM_SUBIMAGE <S2SV_ModStart> int q = vpx_ac_quant <S2SV_ModEnd> ( cm -> <S2SV_ModStart> int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; if ( cm -> frame_type == KEY_FRAME ) filt_guess -= 4 ; lf -> filter_level = clamp ( filt_guess, min_filter_level, max_filter_level ) ; } else { search_filter_level ( sd, cpi, method == LPF_PICK_FROM_SUBIMAGE ) ; } if ( method == LPF_PICK_FROM_Q ) { const int min_filter_level = 0 ; const int max_filter_level = get_max_filter_level ( cpi ) ; filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; if ( cm -> frame_type == KEY_FRAME ) filt_guess -= 4 ; lf -> filter_level = clamp ( filt_guess, min_filter_level, max_filter_level )",0
141,<S2SV_ModStart> = BOND_TYPE_PERSISTENT ; btif_storage_load_bonded_devices ( ) ; <S2SV_ModStart> = BOND_TYPE_PERSISTENT ; <S2SV_ModEnd> btif_storage_load_autopair_device_list ( ) <S2SV_ModStart> = BOND_TYPE_PERSISTENT ; <S2SV_ModEnd> btif_storage_load_autopair_device_list ( ) <S2SV_ModStart> = BOND_TYPE_PERSISTENT ; <S2SV_ModEnd> btif_storage_load_autopair_device_list ( ) <S2SV_ModStart> = BOND_TYPE_PERSISTENT ; <S2SV_ModEnd> btif_storage_load_autopair_device_list ( ) <S2SV_ModStart> = BOND_TYPE_PERSISTENT ; <S2SV_ModEnd> btif_storage_load_autopair_device_list ( ) <S2SV_ModStart> = BOND_TYPE_PERSISTENT ; <S2SV_ModEnd> btif_storage_load_autopair_device_list ( ) <S2SV_ModStart> = BOND_TYPE_PERSISTENT ; <S2SV_ModEnd> btif_storage_load_autopair_device_list ( ) <S2SV_ModStart> = BOND_TYPE_PERSISTENT ; <S2SV_ModEnd> btif_storage_load_autopair_device_list ( ) <S2SV_ModStart> = BOND,0
142,"<S2SV_ModStart> { int a ; if (! isp2 ( <S2SV_ModEnd> getnum ( fmt <S2SV_ModStart>, MAXALIGN ) ) ) luaL_error ( L, ""alignment <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> power <S2SV_blank> of <S2SV_blank> 2"", getnum ( fmt, MAXALIGN ) ) ; h -> align = a ; return ; } default : { const char * msg = lua_pushfstring ( L, ""invalid <S2SV_blank> format <S2SV_blank> option <S2SV_blank> \'%c\'"", opt ) ; luaL_argerror ( L, 1, msg ) ; } } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
143,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
144,"<S2SV_ModStart> vpx_codec_err_t res ; vpx_alg_priv_t * priv ; <S2SV_ModStart> ; else { priv = ctx -> priv -> alg_priv ; <S2SV_ModStart>. decode ( <S2SV_ModEnd> priv, data",0
145,"<S2SV_ModStart> inode * inode, struct buffer_head * bh ) { struct isofs_sb_info * sbi = ISOFS_SB ( inode -> i_sb ) ; unsigned long bufsize = ISOFS_BUFFER_SIZE ( inode ) ; unsigned long block ; int high_sierra = sbi -> s_high_sierra ; struct iso_inode_info * ei = ISOFS_I ( inode ) ; int ret = - EIO ; block = ei -> i_iget5_block ; offset = ei -> i_iget5_offset ; de = ( struct iso_directory_record * ) ( bh -> b_data + offset ) ; de_len = * ( unsigned char * ) de ; if ( offset + de_len > bufsize ) { int frag1 = bufsize - offset ; tmpde = kmalloc ( de_len, GFP_KERNEL ) ; if ( tmpde == NULL ) { printk ( KERN_INFO ""%s: <S2SV_blank> out <S2SV_blank> of <S2SV_blank> memory\\n"", __func__ ) ; ret = - ENOMEM ; goto fail ; } memcpy ( tmpde, bh -> b_data + offset",0
146,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> ; } } }",0
147,<S2SV_ModStart> self ) { PyObject_GC_UnTrack ( self ) ;,1
148,<S2SV_ModStart> ( ) ; if (! a ) return 0 ; <S2SV_ModStart> ] ) ; <S2SV_ModEnd> suffix_object ( p,0
149,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_Format ( PyExc_TypeError, ""Module <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> must <S2SV_blank> be <S2SV_blank> a <S2SV_blank> list, <S2SV_blank> not <S2SV_blank> a <S2SV_blank> %.200s"", tmp -> ob_type -> tp_name ) ; goto failed ; } len = PyList_GET_SIZE ( tmp ) ; body = _Ta3_asdl_seq_new ( len, arena ) ; if ( body == NULL ) goto failed ; for ( i = 0 ; i < len ; i ++ ) { stmt_ty value ; res = obj2ast_stmt ( PyList_GET_ITEM ( tmp, i ), & value, arena ) ; if ( res!= 0 ) goto failed ; if ( len!= PyList_GET_SIZE ( tmp ) ) { PyErr_SetString ( PyExc_RuntimeError, ""Module <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> changed <S2SV_blank> size <S2SV_blank> during <S2SV_blank> iteration"" ) ; goto failed ; } asdl_seq_SET ( body, i, value ) ; }",0
150,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
151,"<S2SV_ModStart> & flags ) <S2SV_ModEnd> err = verify_compat_iovec <S2SV_ModStart> VERIFY_WRITE ) ; else err = verify_iovec ( msg_sys, iov, & addr, VERIFY_READ ) ; if ( err < 0 ) goto out_freeiov ; total_len = err ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; err = ( nosec? sock_recvmsg_nosec : sock_recvmsg ) ( sock, msg, cmsg_ptr ) ; if ( err < 0 ) goto out_freeiov ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; err = ( nosec? sock_recvmsg_nosec",0
152,"<S2SV_ModStart> buffer_head * dibh <S2SV_ModEnd> ; u64 bn <S2SV_ModStart> unsigned ptrs_per_blk ; unsigned int end_of_metadata = height - 1 ; int eob = 0 ; enum alloc_state state ; __be64 * ptr ; __be64 zero_bn = 0 ; BUG_ON ( sheight < 1 ) ; BUG_ON ( dibh == NULL ) ; gfs2_trans_add_bh ( ip -> i_gl, dibh, 1 ) ; if ( height == sheight ) { struct buffer_head * bh ; ptr = metapointer ( end_of_metadata, mp ) ; bh = mp -> mp_bh [ end_of_metadata ] ; dblks = gfs2_extent_length ( bh -> b_data, bh -> b_size, ptr, maxlen, & eob ) ; BUG_ON ( dblks < 1 ) ; state = ALLOC_DATA ; } else { ptrs_per_blk = height > 1? sdp -> sd_inptrs : sdp -> sd_diptrs ; dblks = min ( maxlen, ptrs_per_blk - mp",0
153,"<S2SV_ModStart>, vpx_codec_iface_name ( global <S2SV_ModEnd> -> codec -> <S2SV_ModStart> -> use_i420? ""I420"" : ""YV12"" ) ; fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> index ) ; fprintf ( stderr, ""Destination <S2SV_blank> file: <S2SV_blank> %s\\n"", stream -> config. out_fn ) ; fprintf ( stderr, ""Encoder <S2SV_blank> parameters:\\n"" ) ; SHOW ( g_usage ) ; SHOW ( g_threads ) ; SHOW ( g_profile ) ; SHOW ( g_w ) ; SHOW ( g_h ) ; SHOW ( g_timebase. num ) ; SHOW ( g_timebase. den ) ; SHOW ( g_error_resilient ) ; SHOW ( g_pass ) ; SHOW ( g_lag_in_frames ) ; SHOW ( rc_dropframe_thresh ) ; SHOW",0
154,<S2SV_ModStart> -> psvi!= XSLT_NS_DEFAULT <S2SV_ModEnd> ) { xsltTransformError <S2SV_ModStart> -> psvi!= XSLT_NS_DEFAULT <S2SV_ModEnd> ) { xsltTransformError <S2SV_ModStart> -> psvi!= XSLT_NS_DEFAULT <S2SV_ModEnd> ) { xsltTransformError <S2SV_ModStart> -> psvi!= XSLT_NS_DEFAULT <S2SV_ModEnd> ) { xsltTransformError <S2SV_ModStart> -> psvi!= XSLT_NS_DEFAULT <S2SV_ModEnd> ) { xsltTransformError <S2SV_ModStart> -> psvi!= XSLT_NS_DEFAULT <S2SV_ModEnd> ) { xsltTransformError <S2SV_ModStart> -> psvi!= XSLT_NS_DEFAULT <S2SV_ModEnd> ) { xsltTransformError <S2SV_ModStart> -> psvi!= XSLT_NS_DEFAULT <S2SV_ModEnd> ) { xsltTransformError <S2SV_ModStart> -> psvi!= XSLT_NS_DEFAULT <S2SV_ModEnd> ) { xsltTransformError <S2SV_ModStart> -> psvi!= XSLT_NS_DEFAULT <S2SV_ModEnd> ) { xsltTransformError <S2SV_ModStart> -> psvi!= XSLT_NS_DEFAULT <S2SV_ModEnd> ) { xsltTransformError <S2SV_ModStart> -> psvi!= XSLT_NS_DEFAULT <S2SV_ModEnd> ) { xsltTransformError <S2SV_ModStart> -> psvi!= XSLT_NS_DEFAULT <S2SV_ModEnd> ) { xsltTransformError <S2SV_ModStart> -> psvi!= XSLT_NS_DEFAULT <S2SV_ModEnd> ) { xsltTransformError <S2SV_ModStart> -> psvi!= XSLT_NS_DEFAULT <S2SV_ModEnd> ) { xsltTransformError <S2SV_ModStart> -> psvi!= XSLT_NS_DEFAULT <S2SV_ModEnd> ) { xslt,0
155,"<S2SV_ModStart> 0 ) { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } } else { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } } free ( fname ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> } else if <S2SV_ModStart> 0 ) { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } } else { FILE * fp = fopen ( fname, ""w"" ) ;",0
156,<S2SV_ModStart> msix_tab_size ) { <S2SV_ModEnd> bzero ( msixcap,1
157,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> js_regexec ( re <S2SV_ModStart> 0 ) ) { if ( js_isundefined ( J, m. sub [ 0 ]. sp ) ) js_pushnumber ( J, js_utfptrtoidx ( text, m. sub [ 0 ]. sp ) ) ; else <S2SV_ModStart> ) ) ; } else { if ( js_isundefined ( J, m. sub [ 0 ]. sp ) ) js_pushnumber ( J, js_utfptrtoidx ( text, m. sub [ 0 ]. sp ) ) ; else js_pushnumber ( J, - 1 ) ; }",0
158,<S2SV_ModStart> case OFreshOID : sp -- ; <S2SV_ModStart> >= 0 ) { if ( intern_obj_table!= NULL ) intern_obj_table [ obj_counter ++ ] = NULL ; <S2SV_ModStart> dest ) ; } <S2SV_ModStart> < 0 ) { if ( intern_obj_table!= NULL ) intern_obj_table [ obj_counter ++ ] = NULL ; <S2SV_ModStart> dest ) ; } <S2SV_ModStart> < 0 ) { if ( intern_obj_table!= NULL ) intern_obj_table [ obj_counter ++ ] = NULL ; <S2SV_ModStart> dest ) ; } <S2SV_ModStart> >= 0 ) { if ( intern_obj_table!= NULL ) intern_obj_table [ obj_counter ++ ] = NULL ; <S2SV_ModStart> = NULL ; } <S2SV_ModStart> < 0 ) { if ( intern_obj_table!= NULL ) intern_obj_table [ obj_counter ++ ] = NULL ; <S2SV_ModStart> = NULL ; } <S2SV_ModStart> < 0 ) { if ( intern_obj_table!= NULL ) intern_obj_table [ obj_counter ++ ] = NULL ; <S2SV_ModStart> = NULL ; } <S2SV_ModStart> < 0 ) { if ( intern_obj_table!= NULL ) intern_obj_table [ obj_counter ++ ] = NULL ; <S2SV_ModStart> = NULL ; },0
159,"<S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; ksz8851WriteReg <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( interface, KSZ8851_ISR ) ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } if ( ( isr & ISR_TXIS )!= 0 ) { ksz8851WriteReg ( interface, KSZ8851_ISR, ISR_TXIS ) ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } } if ( ( isr & ISR_RXIS )!= 0 ) { ksz8851WriteReg ( interface, <S2SV_ModStart> ( interface, KSZ88",0
160,"<S2SV_ModStart> void encode_quantization ( struct vpx_write_bit_buffer <S2SV_ModEnd> * cm, <S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
161,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> p_buf, msglen )",1
162,"<S2SV_ModStart> fp ) ; if ( fp == NULL ) { log_error ( ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> %s: <S2SV_blank> %s"", __func__, file, strerror ( errno ) ) ; goto sslerr ; } <S2SV_ModStart> fp ) ; if ( fp == NULL ) { log_error ( ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> %s: <S2SV_blank> %s"", __func__, file, strerror ( errno ) ) ; goto sslerr ; } <S2SV_ModStart> fp ) ; if ( fp == NULL ) { log_error ( ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> %s: <S2SV_blank> %s"", __func__, file, strerror ( errno ) ) ; goto sslerr ; } <S2SV_ModStart> fp ) ; if ( fp == NULL ) { log_error ( ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> %s: <S2SV_blank> %s"", __func__, file, strerror ( errno ) ) ; goto sslerr ; } <S2SV_ModStart> fp ) ; if ( fp == NULL ) { log_error ( ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> %s: <S2SV_blank> %s"", __func__, file, strerror ( errno ) ) ; goto sslerr ;",0
163,"<S2SV_ModStart> ( ) ; strncat <S2SV_ModEnd> ( t1_buf_array, <S2SV_ModStart> t1_buf_array, t1_line_array, strlen ( t1_line_array ) - 1",0
164,"<S2SV_ModStart> int mi_col, MACROBLOCKD * xd, <S2SV_ModStart> int bsl = b_width_log2_lookup [ bsize ], <S2SV_ModEnd> hbs = ( <S2SV_ModStart> / 4 ; <S2SV_ModEnd> assert ( bsize <S2SV_ModStart> case PARTITION_NONE : set_modeinfo_offsets_sb <S2SV_ModEnd> ( cm, <S2SV_ModStart> mi_col ) ; xd -> mi [ 0 ] = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb <S2SV_ModEnd> ( cm, <S2SV_ModStart> case PARTITION_VERT : set_modeinfo_offsets_sb <S2SV_ModEnd> ( cm, <S2SV_ModStart> mi_col ) ; xd -> mi [ 0 ] = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb <S2SV_ModEnd> ( cm, <S2SV_ModStart> mi_cols ) { set_modeinfo_offsets_sb <S2SV_ModEnd> ( cm, <S2SV_ModStart> mi_col ) ; xd -> mi [ 0 ] = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb <S2SV_ModEnd> ( cm, <S2SV_ModStart> case PARTITION_HORZ : set_modeinfo_offsets_sb <S2SV_ModEnd> ( cm, <S2SV_ModStart> mi_col ) ; xd -> mi",0
165,"<S2SV_ModStart> key_ref ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) { ret = - ENOKEY ; goto error2 ; }",1
166,<S2SV_ModStart> u4_first_slice_is_aud ) { if ( ps_dec -> u4_first_slice_is_aud == 1 ) { ps_dec -> u1_first_slice_is_aud = 0 ; ps_dec -> u1_first_slice_is_aud = 0 ; ps_dec -> u1_first_slice_is_aud = 0 ; } <S2SV_ModStart> } else { if ( ps_dec -> u1_first_slice_is_aud == 1 ) { ps_dec -> u1_first_slice_is_aud = 0 ; ps_dec -> u1_first_slice_is_aud = 0 ; } <S2SV_ModStart> } else { if ( ps_dec -> u1_first_slice_is_aud == 1 ) { ps_dec -> u1_first_slice_is_aud = 0 ; ps_dec -> u1_first_slice_is_aud = 0 ; } <S2SV_ModStart> } else { if ( ps_dec -> u1_first_slice_is_aud == 1 ) { ps_dec -> u1_first_slice_is_aud = 0 ; ps_dec -> u1_first_slice,0
167,<S2SV_ModStart> var_off ) ; if (! src_known ||! dst_known ) { return - EINVAL ; } <S2SV_ModStart> var_off ) ; if (! src_known ||! dst_known ) { return - EINVAL ; },0
168,<S2SV_ModStart>! posix_open ) { if ( direntry -> d_name. len > PATH_MAX - direntry -> d_name. name ) { rc = - ENAMETOOLONG ; goto lookup_out ; } <S2SV_ModStart> full_path ) ; },0
169,"<S2SV_ModStart> -> sk_bound_dev_if ; RCU_INIT_POINTER ( rt -> rt_opt, <S2SV_ModEnd> tcp_v4_save_options ( skb <S2SV_ModStart> tcp_v4_save_options ( skb )",0
170,"<S2SV_ModStart> { int number_of_frames = 0, number_of_keyframes = 0, encode_frame_count = 0 <S2SV_ModEnd> ; SvcInternal * <S2SV_ModStart> svc_ctx ) ; if ( <S2SV_ModEnd> si -> encode_frame_count <S2SV_ModStart> si -> encode_frame_count <= 0 ) return vpx_svc_get_message ( svc_ctx ) ; svc_log ( svc_ctx, SVC_LOG_INFO, ""\\n"" ) ; number_of_keyframes = encode_frame_count / si -> kf_dist + 1 ; for ( i = 0 ; i < si -> layers ; ++ i ) { if ( svc_ctx -> encoding_mode == ALT_INTER_LAYER_PREDICTION_IP && ( i == 1 || i == 3 ) ) { number_of_frames -= number_of_keyframes ; } svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f], <S2SV_blank> Bytes=[%u]\\n"", i, ( double ) si -> psnr_sum [ i ] [ 0 ] /",0
171,"<S2SV_ModStart> -> sb_buffer ) { <S2SV_ModStart> sb_buffer ) ; screen -> sb_buffer = NULL ; } <S2SV_ModStart> = new_cols ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; if ( new_cols > old_cols ) { VTermRect rect ; rect. start_row = 0 ; rect. end_row = old_rows ; rect. start_col = old_cols ; rect. end_col = new_cols ; scrollrect ( rect, first_blank_row - new_rows, 0, user ) ; vterm_screen_flush_damage ( screen ) ; delta -> row -= first_blank_row - new_rows ; }",0
172,"<S2SV_ModStart> n ) { if ( * str == end ) { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; return - 1 ; } <S2SV_ModStart> NULL ) ; if ( * str == end ) { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; return - 1 ; } <S2SV_ModStart> ++ ) { const char * ch = * str ; if (! in_named_escape && ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( ch == '{' || ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } if ( ch == '}' ) { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; return",0
173,<S2SV_ModStart> ) ; struct dump_dir_data <S2SV_ModEnd> dd = create_dump_dir_from_problem_data,0
174,<S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ),0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
176,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mv_stride <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, check_here <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, check_here <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, check_here <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, check_here <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, check_here <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, check_here <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, check_here <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, check_here <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, check_here <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here,",0
177,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; const MODE_INFO * * mi_8x8 = cm -> mi_grid_visible ; const MODE_INFO * * prev_mi_8x8 = cm -> prev_mi_grid_visible ; <S2SV_ModStart> int mi_col ; <S2SV_ModEnd> for ( mi_col <S2SV_ModStart> mi_col += MI_BLOCK_SIZE ) { int dummy_rate = 0 ; int64_t dummy_dist = 0 ; const int idx_str = cm -> mi_stride * mi_row + mi_col ; MODE_INFO * * mi_8x8 = cm -> mi_grid_visible + idx_str ; BLOCK_SIZE bsize ; cpi -> mb. source_variance = UINT_MAX ; vp9_zero ( cpi -> mb. pred_mv ) ; switch ( cpi -> sf. partition_search_type ) { case VAR_BASED_PARTITION : choose_partitioning ( cpi, tile, mi_row, mi_col ) ; nonrd_use_partition ( cpi, tile,",0
178,"<S2SV_ModStart> u_int8_t state ; memset ( & _dh, 0, sizeof ( _dh ) ) ;",0
179,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static void <S2SV_ModEnd> ip_options_get_finish ( struct <S2SV_ModStart> ip_options_get_finish ( struct ip_options_rcu <S2SV_ModEnd> * net, <S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * opt, <S2SV_ModStart> * opt, u32 <S2SV_ModEnd> optlen ) { <S2SV_ModStart> & 3 ) rcu_assign_pointer ( <S2SV_ModStart> __data [ optlen <S2SV_ModEnd> ] = IPOPT_END <S2SV_ModStart> = IPOPT_END ; rcu_assign_pointer ( <S2SV_ModStart> = optlen ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
180,"<S2SV_ModStart> ""Connection"" ) ; const char * ws_version = http_request_get_header ( info -> request, ""Sec-WebSocket-Version"" ) ; if ( ws_version == NULL || strcmp ( ws_version, ""13"" )!= 0 ) goto error ; const char * ws_upgrade = http_request_get_header ( info -> request, ""Upgrade"" ) ; if ( ws_upgrade == NULL || strcasecmp ( ws_upgrade, ""Upgrade"" ) == 0 ) goto error ; <S2SV_ModStart> == NULL ) { const char * ws_version = http_request_get_header ( info -> request, ""Sec-WebSocket-Version"" ) ; if ( ws_version == NULL || strcmp ( ws_version, ""13"" )!= 0 ) goto error ; const char * ws_upgrade = http_request_get_header ( info -> request, ""Sec-WebSocket-Upgrade"" ) ; if ( ws_upgrade == NULL || strcasecmp ( ws_upgrade, ""Upgrade"" ) == 0 ) { const char * ws_version = http_request_get_header ( info -> request, ""Sec-WebSocket-Version"" ) ; if ( ws_version == NULL || strcmp ( ws_version",0
181,"<S2SV_ModStart> * findalldevs_if ; uint32 nif = 0 ; if ( rpcapd_discard ( pars -> sockctrl, plen ) == - 1 ) { return - 1 ; } if ( pcap_findalldevs ( & alldevs, errmsgbuf ) == - 1 ) goto error ; if ( alldevs == NULL ) { if ( rpcap_senderror ( pars -> sockctrl, ver, PCAP_ERR_NOREMOTEIF, ""No <S2SV_blank> interfaces <S2SV_blank> found! <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> libpcap/WinPcap <S2SV_blank> is <S2SV_blank> properly <S2SV_blank> installed"" "" <S2SV_blank> and <S2SV_blank> you <S2SV_blank> have <S2SV_blank> the <S2SV_blank> right <S2SV_blank> to <S2SV_blank> access <S2SV_blank> to <S2SV_blank> the <S2SV_blank> remote <S2SV_blank> device."", errbuf ) == - 1 ) { rpcapd_log ( LOGPRIO_ERROR, ""Send <S2SV_blank> to <S2SV_blank> client <S2SV_blank> failed: <S2SV_blank> %s"", errbuf ) ; return - 1 ; } return 0 ; } if ( rpcap_senderror ( pars -> sockctrl, ver, PCAP_ERR_NOREMOTEIF, ""No <S2SV_blank> remote <S2SV_blank> interfaces <S2SV_blank> found! <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> libpcap/WinPcap <S2SV_blank> is <S2SV_blank> properly <S2SV_blank> installed"" "" <S2SV_blank> and <S2SV_blank> you",0
182,"<S2SV_ModStart> path, client_uid <S2SV_ModEnd> ) ; if",0
183,<S2SV_ModStart> -> columns - 2 <S2SV_ModEnd> ) ; x,0
184,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
185,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; }",0
186,"<S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> ) ) goto <S2SV_ModStart> ; if ( in_cksum ( bp, len <S2SV_ModEnd> )",0
187,"<S2SV_ModStart>! ptrace_has_cap ( task_cred ( task ) <S2SV_ModEnd> -> user_ns,",0
188,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
189,<S2SV_ModStart> SEI_USER_DATA_REGISTERED_ITU_T_T36 : case SEI_USER_DATA_REGISTERED_ITU_T_T37 : ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; ihevcd_parse_user_data_registered_ITU_t_37_sei ( ps_codec ) ; break ; case SEI_USER_DATA_REGISTERED_ITU_T_37 : ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; ihevcd_parse_user_data_registered_ITU_T_37_sei ( ps_codec ) ; break ; case SEI_USER_DATA_REGISTERED_ITU_T_38 : ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; ihevcd_parse_user_data_registered_ITU_T_38_sei ( ps_codec ) ; break ; case SEI_USER_DATA_REGISTERED_ITU_T_39 : ps_parse -> s,0
190,"<S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ), GFP_KERNEL <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ), GFP_KERNEL <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ), GFP_KERNEL <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ), GFP_KERNEL <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ), GFP_KERNEL <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ), GFP_KERNEL <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ), GFP_KERNEL <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ), GFP_KERNEL <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ), GFP_KERNEL <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> size",0
191,"<S2SV_ModStart> * name, my_bool <S2SV_ModEnd> rep_quick ) { <S2SV_ModStart> T_SILENT ) { <S2SV_ModEnd> DBUG_PRINT ( ""info"" <S2SV_ModStart> ( ""is <S2SV_blank> quick <S2SV_blank> repair: <S2SV_blank> %d"", info -> s -> options & ( HA_OPTION_COMPRESS_RECORD | HA_OPTION_COMPRESS_RECORD ) ) ; if ( info -> s -> options & MY_MUTEX_INIT_FAST ) mysql_mutex_init ( mi_key_mutex_MI_SORT_INFO_mutex, & sort_info. mutex, MY_MUTEX_INIT_FAST ) ; mysql_cond_init ( mi_key_cond_MI_SORT_INFO_cond, & sort_info. cond, MY_MUTEX_INIT_FAST ) ; if ( info -> s -> options & MY_MUTEX_INIT_FAST ) mysql_mutex_init ( mi_key_mutex_MI_SORT_INFO_mutex, & sort_info. mutex, MY_MUTEX_INIT_FAST ) ; mysql_cond_init ( mi_key_cond_MI_SORT_INFO_cond, & sort_info. cond",0
192,"<S2SV_ModStart> ) ; } if ( pcount > MaxAllocSize / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", pcount, ( int ) ( MaxAllocSize / sizeof ( Pairs ) ) ) ) ) ;",0
193,"<S2SV_ModStart> val ) ; if (! <S2SV_ModStart>, val ) ) continue",0
194,"<S2SV_ModStart> ) ) { if ( clen < 4 ) { return bad_request ( c, 400, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( clen < 4 ) { return bad_request ( c, 400, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( clen < 4 ) { return bad_request ( c, 400, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( clen < 4 ) { return bad_request ( c, 400, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( clen < 4 ) { return bad_request ( c, 400, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( clen < 4 ) { return bad_request ( c, 400, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( clen < 4 ) { return bad_request ( c, 400, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( clen < 4 ) { return bad_request ( c, 400, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( clen < 4 ) { return bad_request ( c, 400, __LINE__ ) ; } <S2SV_ModStart> ) ) { if ( clen < 4 ) { return bad_request ( c, 400,",0
195,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> 256 ] ; tran_low_t <S2SV_ModEnd> * outptr = <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16",0
196,<S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args,0
197,"<S2SV_ModStart> '\\0' ) ; size_t len = <S2SV_ModEnd> strlen ( filename <S2SV_ModStart> ) + 5 ; char * temp_filename = osi_calloc ( len <S2SV_ModStart> if (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } for ( const list_node_t * node = list_begin ( config -> sections ) ; node!= list_end ( config -> sections ) ; node = list_next ( node ) ) { const section_t * section = ( const section_t * ) list_node ( node ) ; fprintf ( fp, ""[%s]\\n"", section -> name ) ; for ( const entry_t * entry = ( const entry_t *",0
198,<S2SV_ModStart> ; ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_32BITS ( tptr <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ; ND_TCHECK_32BITS ( tptr <S2SV_ModEnd>,0
199,"<S2SV_ModStart> userData, target <S2SV_ModEnd> ) ; ctxt <S2SV_ModStart> ) ) { if ( ctxt -> userData == NULL ) { xmlFatalErrMsg ( ctxt, XML_ERR_ENTITY_BOUNDARY, ""ParsePI: <S2SV_blank> PI <S2SV_blank> declaration <S2SV_blank> doesn\'t <S2SV_blank> start <S2SV_blank> and <S2SV_blank> stop <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> entity\\n"" ) ; } <S2SV_ModStart> ) ) { if ( ctxt -> userData == NULL ) { xmlFatalErrMsg ( ctxt, XML_ERR_ENTITY_BOUNDARY, ""ParsePI: <S2SV_blank> PI <S2SV_blank> declaration <S2SV_blank> doesn\'t <S2SV_blank> start <S2SV_blank> and <S2SV_blank> stop <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> entity\\n"" ) ; } <S2SV_ModStart> ) ) { if ( ctxt -> userData == NULL ) { xmlFatalErrMsg ( ctxt, XML_ERR_ENTITY_BOUNDARY, ""ParsePI: <S2SV_blank> PI <S2SV_blank> declaration <S2SV_blank> doesn\'t <S2SV_blank> start <S2SV_blank> and <S2SV_blank> stop <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> entity\\n"" ) ; } <S2SV_ModStart> ) ) { if ( ctxt -> userData == NULL ) { xmlFatalErrMsg ( ctxt, XML_ERR_ENTITY_BOUNDARY, ""ParsePI: <S2SV_blank> PI <S2SV_blank> declaration <S2SV_blank> doesn\'t <S2SV_blank> start <S2SV_blank> and <S2SV_blank> stop <S2SV_blank> in <S2SV_blank> the <S2SV_blank> same <S2SV_blank> entity\\n""",0
200,"<S2SV_ModStart> ( ) ; size_t <S2SV_ModEnd> rv = Socket_print <S2SV_ModStart> ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.1\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %zu\\r\\n"" <S2SV_ModEnd> ""%s"" ""\\r\\n"" ""%s""",0
201,"<S2SV_ModStart> ) ; } if ( safe_chown ( dest, getuid ( ), getgid ( ) ) < 0 ) errExit ( ""safe_chown"" ) ; if ( safe_chmod ( dest, S_IRUSR | S_IWUSR ) < 0 ) errExit ( ""safe_chmod"" ) ; unlink ( src ) ; <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
202,<S2SV_ModStart>!= BFA_STATUS_OK ) { kfree ( fcstats ) ; <S2SV_ModStart> return NULL ; },1
203,"<S2SV_ModStart> -> x = F_MIN ( <S2SV_ModEnd> value -> x <S2SV_ModStart> -> x ), 1.0f <S2SV_ModEnd> ) ; value <S2SV_ModStart> -> y = F_MIN ( <S2SV_ModEnd> value -> y <S2SV_ModStart> -> y ), 1.0f <S2SV_ModEnd> ) ; value <S2SV_ModStart> -> z = F_MIN ( <S2SV_ModEnd> value -> z <S2SV_ModStart> -> z = 1.0f <S2SV_ModEnd> ; } <S2SV_null>",0
204,"<S2SV_ModStart> -> sasl_mechanism ; if ( g_str_has_prefix ( src -> sasl_username, ""sasl://"" ) ) { <S2SV_ModStart> -> sasl_password = g_strdup ( <S2SV_ModStart> src -> sasl_password ) ; } else if ( g_str_has_prefix ( src -> sasl_password, ""sasl://"" ) ) { rec -> sasl_password = g_strdup ( """" ) ; } else if ( g_str_has_prefix ( src -> sasl_password, ""sasl://"" ) ) { rec -> sasl_password = g_strdup ( """" ) ; } else if ( g_str_has_prefix ( src -> sasl_password, ""sasl://"" ) ) { rec -> sasl_password = g_strdup ( """" ) ; } else if ( g_str_has_prefix ( src -> sasl_password, ""sasl://"" ) ) { rec -> sasl_password = g_strdup ( src -> sasl_password ) ; } else { rec -> sasl_password = g_strdup ( """" ) ; } } <S2SV_ModEnd> * dest =",0
205,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
206,"<S2SV_ModStart> o, datao ; if ( exif_mnote_data_canon_check ( n ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( exif_mnote_data_canon_check ( buf, buf_size ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( exif_mnote_data_canon_check ( buf, buf_size ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( exif_mnote_data_canon_check ( buf, buf_size ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; }",0
207,"<S2SV_ModStart>, llbuff, sizeof ( llbuff ) <S2SV_ModEnd> ) ; if <S2SV_ModStart>, llbuff2, sizeof ( llbuff2 ) <S2SV_ModEnd> ) ; if <S2SV_ModStart>, llbuff, sizeof ( llbuff ) <S2SV_ModEnd> ) ; if <S2SV_ModStart>, llbuff, sizeof ( llbuff ) <S2SV_ModEnd> ) ; if <S2SV_ModStart>, llbuff, sizeof ( llbuff ) <S2SV_ModEnd> ) ; if <S2SV_ModStart>, llbuff, sizeof ( llbuff ) <S2SV_ModEnd> ) ; if <S2SV_ModStart>, llbuff, sizeof ( llbuff ) <S2SV_ModEnd> ) ; if <S2SV_ModStart>, llbuff2, sizeof ( llbuff2 ) <S2SV_ModEnd> ) ; if <S2SV_ModStart>, llbuff, sizeof ( llbuff2 ) <S2SV_ModEnd> ) ; if <S2SV_ModStart>, llbuff, sizeof ( llbuff ) <S2SV_ModEnd> ) ; if <S2SV_ModStart>, llbuff, sizeof ( llbuff ) <S2SV_ModEnd> ) ; if <S2SV_ModStart>, llbuff, sizeof ( llbuff ) <S2SV_ModEnd> ) ; if <S2SV_ModStart>, llbuff, sizeof ( llbuff ) <S2SV_ModEnd> ) ; if <S2SV_ModStart>, llbuff, sizeof ( llbuff ) <S2SV_ModEnd> ) ; if <S2SV_ModStart>, llbuff, sizeof ( llbuff ) <S2SV_ModEnd> ) ; if <S2SV_ModStart>, llbuff, sizeof ( llbuff2 ) <S2SV_ModEnd> ) ; if <S2SV_ModStart>, llbuff, sizeof ( llbuff2 ) <S2SV_ModEnd> ) ; }",0
208,"<S2SV_ModStart> olen ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> long hex ; <S2SV_ModEnd> if (! <S2SV_ModStart> hex ) ; if (! <S2SV_ModEnd> Curl_convert_from_network ( handle <S2SV_ModStart> in, 1, & alloc ) <S2SV_ModEnd> ) { free <S2SV_ModStart> ( olen ) { <S2SV_ModStart> = strindex ; }",0
209,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
210,<S2SV_ModStart> ; def -> <S2SV_ModEnd> session_setup = usm_session_init,0
211,<S2SV_ModStart> NULL ; return <S2SV_ModEnd> match ( prog,0
212,<S2SV_ModStart> idx ] ; <S2SV_ModEnd> switch ( action <S2SV_ModStart> ) ; } <S2SV_ModEnd> return SNMP_ERR_NOERROR ;,0
213,<S2SV_ModStart> ; break ; case 3 : { CheckNumberPixels ( 8 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 6 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 4 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 2 ) & 0x03 ) ; break ; } case 4 : { CheckNumberPixels ( 8 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 7 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 5 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 4 ) & 0x03 ) ; break ; } case 5 : { CheckNumberPixels ( 8 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 6 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 4 ) & 0x03 ) ; break ; } case 6 : { CheckNumberPixels ( 8 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 6 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >>,0
214,<S2SV_ModStart> timer ) ; spin_lock_irq ( & slave_active_lock ) ; <S2SV_ModStart> open_list ) { <S2SV_ModEnd> _snd_timer_stop ( slave <S2SV_ModStart> = NULL ; list_del_init ( & slave -> ack_list ) ;,0
215,<S2SV_ModStart> -> u1_dpb_commands_read ) { <S2SV_ModStart> ps_dec ) ; } else { ps_dec -> u4_bitoffset = 0 ; },0
216,"<S2SV_ModStart> decode ) { uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > info -> rasterSize || widthOverflow > 0 || heightOverflow > 0 ) { void * tmpRasterBits = reallocarray ( info -> rasterBits, newRasterSize * sizeof ( uint_fast32_t ) ) ; <S2SV_ModStart> -> originalHeight ; <S2SV_ModEnd> if ( newRasterSize",0
217,<S2SV_ModStart> validator -> user ) || cherokee_buffer_is_empty ( & conn -> validator -> passwd,0
218,<S2SV_ModStart> bus ] ; if ( bi == NULL ) return <S2SV_ModEnd> ; si =,0
219,"<S2SV_ModStart>, timeo ) <S2SV_ModEnd> ; if (",1
220,<S2SV_ModStart> += 9 ; ( <S2SV_ModStart> isspace ( * ( s + 9 ) <S2SV_ModEnd> ) ; s <S2SV_ModStart> * t && <S2SV_ModEnd> isspace ( * <S2SV_ModStart> isspace ( * ( t + 1 ) <S2SV_ModEnd> ) ) t,0
221,"<S2SV_ModStart>. active_set ; UIPC_LOCK ( ) ; uipc_check_interrupt_locked ( ) ; uipc_check_task_flags_locked ( ) ; uipc_check_fd_locked ( UIPC_CH_ID_AV_AUDIO ) ; for ( ch_id = 0 ; ch_id < UIPC_CH_NUM ; ch_id ++ ) { if ( ch_id!= UIPC_CH_ID_AV_AUDIO ) uipc_check_fd_locked ( ch_id ) ; } UIPC_UNLOCK ( ) ; <S2SV_ModStart> NULL, NULL <S2SV_ModEnd> ) ; if",0
222,<S2SV_ModStart> msixcap msixcap ; if <S2SV_ModEnd> ( msgnum >= <S2SV_ModStart> msix_table_init ( dev <S2SV_ModEnd> ) ; pci_populate_msixcap,0
223,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",1
224,<S2SV_ModStart> == NULL ) return KRB5KDC_ERR_PREAUTH_FAILED <S2SV_ModEnd> ; status = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> X509_NAME_free ( is,0
225,<S2SV_ModStart> <S2SV_null> <S2SV_null> static MV_REFERENCE_FRAME <S2SV_ModEnd> select_tx_mode ( const <S2SV_ModStart> cpi ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; <S2SV_ModStart> lossless ) { frame_type = get_frame_type ( cpi ) ; <S2SV_ModStart> else if ( <S2SV_ModEnd> frame_type == USE_LARGESTALL <S2SV_ModStart> USE_LARGESTALL ) { frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ frame_type ] > cpi -> rd_tx_select_threshes [ frame_type ] [ TX_MODE_SELECT ]? ALLOW_32X32 : TX_MODE_SELECT ; } else { unsigned int total = 0 ; int i ; for ( i = 0 ; i < TX_SIZES ; ++ i ) total += cpi -> tx_stepdown_count [ i ] ; if ( total ) { const double fraction = ( double ) cpi -> tx_stepdown_count [ 0 ] / total ; return fraction > 0.90? ALLOW_32X32 : TX,0
226,<S2SV_ModStart> if ( magfact < <S2SV_ModEnd> 0.0 ) magfact <S2SV_ModStart> 0.0 ) magfact = <S2SV_ModEnd> 0.0 ; if <S2SV_ModStart> 0.0 ) magfact = <S2SV_ModEnd> 0.0 ; if <S2SV_ModStart> 0.0 ) magfact = <S2SV_ModEnd> 0.0 ; if <S2SV_ModStart> 0.0 ) magfact = <S2SV_ModEnd> 0.0 ; if <S2SV_ModStart> 0.0 ) magfact = <S2SV_ModEnd> 0.0 ; if <S2SV_ModStart> 0.0 ) magfact = <S2SV_ModEnd> 0.0 ; if <S2SV_ModStart> 0.0 ) magfact = <S2SV_ModEnd> 0.0 ; if <S2SV_ModStart> 0.0 ) magfact = <S2SV_ModEnd> 0.0 ; if <S2SV_ModStart> 0.0 ) magfact = <S2SV_ModEnd> 0.0 ; if <S2SV_ModStart> 0.0 ) magfact = <S2SV_ModEnd> 0.0 ; if <S2SV_ModStart> 0.0 ) magfact = <S2SV_ModEnd> 0.0 ; if <S2SV_ModStart> 0.0 ) magfact = <S2SV_ModEnd> 0.0 ; if <S2SV_ModStart> 0.0 ) magfact = <S2SV_ModEnd> 0.0 ; if <S2SV_ModStart> 0.0 ) magfact = <S2SV_ModEnd> 0.0 ; if <S2SV_ModStart> 0.0 ) magfact = <S2SV_ModEnd> 0.0 ; if <S2SV_ModStart> 0.0 ) magfact = <S2SV_ModEnd> 0.0 ; if <S2SV_ModStart> 0.0 ) magfact = <S2SV_ModEnd> 0.0 ; if <S2SV_ModStart> 0.,0
227,<S2SV_ModStart> ( buf1 -> tile_size <S2SV_ModEnd> < buf2 -> <S2SV_ModStart> < buf2 -> tile_size <S2SV_ModEnd> ) { return <S2SV_ModStart> ( buf1 -> tile_size <S2SV_ModEnd> == buf2 -> <S2SV_ModStart> == buf2 -> tile_size <S2SV_ModEnd> ) { return,0
228,"<S2SV_ModStart> ) + size ; if ( unlikely ( sz > ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) ) return NULL <S2SV_ModStart> __GFP_NORETRY ) ; else { info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) { info = vmalloc ( sz ) ; if (! info ) return NULL ; } memset ( info, 0, sizeof ( * info ) ) ; info -> size = size ; return info ; }",0
229,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,1
230,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs,",0
231,"<S2SV_ModStart> ; r = safe_open ( ""/dev/input/"", O_RDONLY ) ; if ( r < 0 ) return log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> /dev/input/"" ) ; r = open ( ""/dev/input/"", O_RDONLY ) ; if ( r < 0 ) return log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> /dev/input/"" ) ; r = open ( ""/dev/input/"", O_RDONLY ) ; if ( r < 0 ) return log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> /dev/input/"" ) ; r = open ( ""/dev/input/"", O_RDONLY ) ; if ( r < 0 ) return log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> /dev/input/"" ) ; r = open ( ""/dev/input/"", O_RDONLY ) ; r = open ( ""/dev/input/"", O_RDONLY ) ; if ( r < 0 ) return log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> /dev/input/"" ) ; r = open ( ""/dev/input/""",0
232,<S2SV_ModStart> ; if (! errors ) { errors = 0 ; } <S2SV_ModEnd> return TEST_ERR_MAJOR_BAD ; <S2SV_ModStart> return TEST_ERR_MAJOR_BAD ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
233,<S2SV_ModStart> -> lun ) sas_eh_finish_cmd <S2SV_ModEnd> ( cmd ),1
234,"<S2SV_ModStart>, end_col_offset ; string type_comment ; <S2SV_ModStart> 2 ; } type_comment = NEW_STRING ( CHILD ( n, name_i + 3 ) ) ; if (! type_comment ) return NULL ; <S2SV_ModStart> ( is_async ) { <S2SV_ModStart>, returns, type_comment, <S2SV_ModStart> c_arena ) ; } else { type_comment = NEW_STRING ( CHILD ( n, name_i + 4 ) ) ; if (! type_comment ) return NULL ; type_comment = NEW_STRING ( CHILD ( n, name_i + 4 ) ) ; if (! type_comment ) return NULL ; type_comment = NEW_STRING ( CHILD ( n, name_i + 5 ) ) ; if (! type_comment ) return NULL ; type_comment = NEW_STRING ( CHILD ( n, name_i + 6 ) ) ; if (! type_comment ) return NULL ; type_comment = NEW_STRING ( CHILD ( n, name_i + 7 ) ) ; if (! type_comment ) return NULL ; type_comment = NEW_STRING ( CHILD ( n, name_i + 7 ) ) ; if (! type_",0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,"<S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > WPGRecord. RecordLength ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
237,,1
238,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
239,"<S2SV_ModStart> if ( position >= <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> headend, 1, position - psf -> headend, psf ) ; psf -> headindex = position ; break ; case SEEK_CUR : if ( psf -> headindex + position < 0 ) break ; if ( psf -> headindex >= SIGNED_SIZEOF ( psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; if ( psf -> headindex + position <= psf -> headend ) { psf -> headindex += position ; break ; } ; if ( psf -> headindex + position <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> headend, 1, position - psf -> headend, psf ) ; psf -> headindex = <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> headend <S2SV_ModEnd> ; break ;",0
240,<S2SV_ModStart> u4_ofst ) ; if ( ps_cabac -> u4_ofst > ps_cabac -> u4_range ) { IHEVCD_ERROR_T ps_error = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_PARAMETER ; ps_cabac -> u4_ofst = 0 ; ps_cabac -> au1_ctxt_models [ 0 ] = 0 ; ps_cabac -> au1_ctxt_models [ 1 ] = 0 ; ps_cabac -> au1_ctxt_models [ 2 ] = 0 ; ps_cabac -> au1_ctxt_models [ 3 ] = 0 ; ps_cabac -> au1_ctxt_models [ 4 ] = 0 ; ps_cabac -> au1_ctxt_models [ 5 ] = 0 ; ps_cabac -> au1_ctxt_models [ 6 ] = 0 ; ps_cabac -> au1_ctxt_models [ 7 ] = 0 ; ps_cabac -> au1_ctxt_models [ 8 ] = 0 ; ps_cabac -> au1_ctxt_models [,0
241,<S2SV_ModStart> ; } } if ( off < ctx -> size ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = 1 ; } <S2SV_ModStart> ; } } if ( off < ctx -> size ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = 1 ; },0
242,"<S2SV_ModStart> event ) { __perf_event_disable ( event, false <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
243,<S2SV_ModStart> -> post_proc_flag = <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> noise_level ; # ifdef CONFIG_POSTPROC_VISUALIZER flags -> display_ref_frame_flag = ctx -> dbg_color_ref_frame_flag ; flags -> display_mb_modes_flag = ctx -> dbg_color_mb_modes_flag ; flags -> display_b_modes_flag = ctx -> dbg_color_b_modes_flag ; flags -> display_mv_flag = ctx -> dbg_display_mv_flag ; # else <S2SV_ModEnd> flags -> display_ref_frame_flag <S2SV_ModStart> -> dbg_display_mv_flag ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
244,"<S2SV_ModStart> = 0 ; if ( msg_len < sizeof ( struct olsr_msg4 ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> too <S2SV_blank> short <S2SV_blank> msg_len <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6, msg_len ) ) ; goto trunc ; } <S2SV_ModStart> ) ) ; if ( msg_len < sizeof ( struct olsr_msg6 ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> too <S2SV_blank> short <S2SV_blank> msg_len <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6, msg_len ) ) ; goto trunc ; } <S2SV_ModStart> ) ) ; if ( msg_len < sizeof ( struct olsr_msg4 ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> too <S2SV_blank> short <S2SV_blank> msg_len <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6, msg_len ) ) ; goto trunc ; } <S2SV_ModStart> ) ) ; if ( msg_len < sizeof ( struct olsr_msg4 ) ) { ND_PRINT ( ( ndo, """,0
245,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> int64_t store_reg [ <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vpx_usec_timer_start ( & <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,0
246,"<S2SV_ModStart> ) ) { fs_logger2 ( ""clone"", dest ) ; <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> copy_file ( src <S2SV_ModStart> dest ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return 1 ;",0
247,<S2SV_ModStart> = 0 ; sfb = 0 ; <S2SV_ModStart> = 0 ; sfb = <S2SV_ModStart> = 0 ; sfb = <S2SV_ModStart> = 0 ; sfb = <S2SV_ModStart> = 0 ; sfb = <S2SV_ModStart> = 0 ; sfb = <S2SV_ModStart> = 0 ; sfb = <S2SV_ModStart> = 0 ; sfb = <S2SV_ModStart> = 0 ; sfb = <S2SV_ModStart> = 0 ; sfb = <S2SV_ModStart> = 0 ; sfb = <S2SV_ModStart> = 0 ; sfb = <S2SV_ModStart> = 0 ; sfb = <S2SV_ModStart> = 0 ; sfb = <S2SV_ModStart> = 0 ; sfb = <S2SV_ModStart> = 0 ; sfb = <S2SV_ModStart> = 0 ; sfb = <S2SV_ModStart> = 0 ; sfb = <S2SV_ModStart> = 0 ; sfb = <S2SV_ModStart> = 0 ; sfb = <S2SV_ModStart> = 0 ; sfb = <S2SV_ModStart> = 0 ; sfb = <S2SV_ModStart> = 0 ; sfb = <S2SV_ModStart> = 0 ; sfb = <S2SV_ModStart> = 0 ; sfb = <S2SV_ModStart> = 0 ; sfb = <S2SV_ModStart> = 0 ; sfb = <S2SV_ModStart> = 0 ; sfb = <S2SV_ModStart> = 0 ; sfb = <S2SV_ModStart> = 0 ; sfb = <S2SV_ModStart> = 0 ; sfb = <S2SV_ModStart> = 0 ; sfb = <S2SV_ModStart> = 0 ; sfb =,0
248,"<S2SV_ModStart> prov_spec = parsed_require_line <S2SV_ModEnd> ; spec = <S2SV_ModStart> ; if (! prov_spec -> args ) { ap_log_rerror ( APLOG_MARK, APLOG_ERR, 0, r, APLOGNO ( 02318 ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> \'%s\' <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> function)"", prov_spec -> function_name, prov_spec -> file_name ) ; ap_lua_release_state ( L, spec, r ) ; return AUTHZ_GENERAL_ERROR ; } ap_lua_run_lua_request ( L, r ) ; if ( <S2SV_ModStart> args -> nelts <S2SV_ModEnd> ) { ap_log_rerror <S2SV_ModStart>, APLOG_ERR, 0, r, APLOGNO ( 02318 ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> \'%s\' <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> function)"", prov_spec -> function_name, prov_spec -> file_name ) ; ap_lua_release_state ( L, spec, r ) ; return AUTHZ_GENERAL_ERROR",0
249,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> rows, image -> cols ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
250,<S2SV_ModStart> ; if ( proto_end == NULL <S2SV_ModEnd> ) return 0,0
251,<S2SV_ModStart> end = path ; if ( end > path_len ) return - FDT_ERR_NOSPACE <S2SV_ModStart> - FDT_ERR_BADSTRUCTURE ; if ( end > path + path_len - 2 ) return - FDT_ERR_NOSPACE ;,0
252,"<S2SV_ModStart> ( server. bgsavechildpid == - 1 && server. bgrewritechildpid == - 1 ) { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ), zmalloc_used_memory ( ) ) ; } else if ( server. bgsavechildpid == - 1 && server. bgrewritechildpid == - 1 ) { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ), zmalloc_used_memory ( ) ) ; } else if ( server. bgsavechildpid == - 1 || server. bgrewritechildpid == - 1 ) { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ), zmalloc_used_memory ( )",0
253,<S2SV_ModStart> channel ) ; <S2SV_ModEnd> set_description ( client,1
254,<S2SV_ModStart> book -> dim && i < n,1
255,<S2SV_ModStart> action ) { if ( r < 0.0 ) r = 0.0 ; if ( r > 1.0 ) r = 1.0 ; if ( r > 1.0 ) r = 1.0 ; if ( r > 1.0 ) r = 1.0 ; if ( r > 1.0 ) r = 1.0 ; if ( r > 1.0 ) r = 1.0 ; if ( r > 1.0 ) r = 1.0 ; if ( r > 1.0 ) r = 1.0 ; if ( r > 1.0 ) r = 1.0 ; if ( r > 1.0 ) r = 1.0 ; if ( r > 1.0 ) r = 1.0 ; if ( r > 1.0 ) r = 1.0 ; if ( r > 1.0 ) r = 1.0 ; if ( r > 1.0 ) r = 1.0 ; if ( r > 1.0 ) r = 1.0 ; if ( r > 1.0 ) r = 1.0 ; if ( r > 1.0 ) r = 1.0 ; if ( r > 1.0 ) r = 1.,0
256,<S2SV_ModStart> this_h ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; <S2SV_ModStart> ) ) { <S2SV_ModEnd> return ; } <S2SV_ModStart> 16 ) { if ( sf -> predict ) { <S2SV_ModStart> vp9_convolve8_avg_horiz ; } } <S2SV_ModStart> } else { if ( sf -> predict ) { <S2SV_ModStart> vp9_convolve8_avg_horiz ; } } <S2SV_ModStart> 16 ) { if ( sf -> predict ) { <S2SV_ModStart> vp9_convolve8_avg_horiz ; } } <S2SV_ModStart> 16 ) { if ( sf -> predict ) { <S2SV_ModStart> vp9_convolve8_avg_horiz ; } } <S2SV_ModStart> 16 ) { if ( sf -> predict ) { <S2SV_ModStart> vp9_convolve8_avg_horiz ; } } <S2SV_ModStart> 16 ) { if ( sf -> predict ) { <S2SV_ModStart> vp9_convolve8_avg_horiz ; } } <S2SV_ModStart> 16 ) { if ( sf -> predict ) { <S2SV_ModStart> vp9_convolve8_avg_horiz ; } } <S2SV_ModStart> 16 ) { if ( sf -> predict ) { <S2SV_ModStart> vp9_convolve8_avg_horiz ; } },0
257,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
258,<S2SV_ModStart> ; if ( msg. msg_namelen < sizeof ( src_info ) ) return - EINVAL ; if (,0
259,<S2SV_ModStart> ( ) ; unregister_net_subsys ( & sctp_net_ops ) ; sctp_v6_protosw_exit ( ) ; sctp_v4_protosw_exit ( ) ; sctp_v6_pf_exit ( ) ; sctp_sysctl_unregister ( ) ; <S2SV_ModStart> ( & sctp_net_ops <S2SV_ModEnd> ) ; free_pages,0
260,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> index ) ; if ( stream -> psnr_sse_total > 0.0 ) { <S2SV_ModStart> = sse_to_psnr ( <S2SV_ModEnd> stream -> psnr_samples_total <S2SV_ModStart> -> psnr_sse_total ) ; } else { ovpsnr = sse_to_psnr ( 255.0, 255.0, 255.0 ) ; } fprintf ( stderr, "" <S2SV_blank> %.3f"", ovpsnr",0
261,<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen (,1
262,"<S2SV_ModStart> ( ""CIDER=0x%04"" PRIX16 <S2SV_ModEnd> ""\\r\\n"", ksz8851ReadReg <S2SV_ModStart> ( interface, KSZ8851_CIDER ) ) ; TRACE_DEBUG ( ""PHY1ILR=0x%04"" PRIX16 <S2SV_ModEnd> ""\\r\\n"", ksz8851ReadReg <S2SV_ModStart> ( interface, KSZ8851_PHY1ILR ) ) ; TRACE_DEBUG ( ""PHY1IHR=0x%04"" PRIX16 <S2SV_ModEnd> ""\\r\\n"", ksz8851ReadReg <S2SV_ModStart>, KSZ8851_REG_PHY1IHR ) ) ; if ( ksz8851ReadReg ( interface, KSZ8851_CIDER )!= KSZ8851_REV_A3_ID ) { return ERROR_WRONG_IDENTIFIER ; } ksz8851DumpReg ( interface ) ; context -> frameId = 0 ; context -> txBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; context -> rxBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; if ( context -> txBuffer == NULL || context -> rxBuffer ==",0
263,"<S2SV_ModStart> skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
264,"<S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; <S2SV_ModEnd> fit_check_format ( fit <S2SV_ModStart>, IMAGE_SIZE_INVAL ) ; <S2SV_ModEnd> bootstage_mark ( bootstage_id <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; if ( fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; } boot_mark ( bootstage_id + BOOTSTAGE_SUB_FORMAT_OK ) ; if ( fit_uname ) { bootstage_mark ( bootstage_id + BOOTSTAGE_SUB_UNIT_NAME ) ; noffset = fit_image_get_node ( fit, fit_uname ) ; } else { bootstage_mark ( bootstage_id + BOOTSTAGE_SUB_NO_NODE ) ; noffset = fit_image_get_node ( fit, fit_base_uname_config ) ; } } else { bootstage_error ( bootstage_id + BOOTSTAGE_",0
265,"<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> uinput_fd, UI_DEV_DESTROY )",1
266,<S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> = rc -> avg_frame_bandwidth <S2SV_ModEnd> ; # endif,1
267,"<S2SV_ModStart> i ], ""-u"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart>, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""-u"" <S2SV_ModEnd> ) ; argv",0
268,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
269,<S2SV_ModStart> ib ] ; dequant_ptr = d -> dequant ; coeff_ptr = b -> coeff ; qcoeff_ptr = d -> qcoeff ; dqcoeff_ptr = d -> dqcoeff ; i0 =! type ; eob = * d -> eob ; rdmult = mb -> rdmult * err_mult ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ; rddiv = mb -> rddiv ; best_mask [ 0 ] = best_mask [ 1 ] = 0 ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ; rddiv = mb -> rddiv ; best_mask [ 0 ] = best_mask [ 1 ] = 0 ; tokens [ eob ] [ 0 ]. token = DCT_EOB_TOKEN ; tokens,0
270,"<S2SV_ModStart> FN_REFLEN ] ; # ifdef __WIN__ strncat ( buff, ""/"", sizeof ( buff ) - 1 ) ; # else strncat ( buff, FN_DIRSEP, sizeof ( buff ) - 1 ) ; # endif buff [ sizeof ( buff ) - 1 ] = 0 ; my_free ( opt_basedir ) ; opt_basedir = my_strdup ( buff, MYF ( MY_FAE ) ) ; } } if (! opt_no_defaults && ( error = get_default_values ( ) ) ) ) { error = - 1 ; goto exit ; } strcpy ( operation, """" ) ; if ( ( error = check_options ( argc, argv, operation ) ) ) { goto exit ; } if ( opt_verbose ) { printf ( ""# <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> basedir <S2SV_blank> = <S2SV_blank> %s\\n"", opt_basedir ) ; printf ( ""# <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> datadir <S2SV_blank> = <S2SV_blank> %s\\n"", opt_datadir ) ; printf ( ""# <S2SV_blank> <S2SV_blank> <S2SV_blank> plugin_ini <S2SV_blank> = <S2SV_blank> %s\\n"", opt_plugin_ini ) ; } exit : <S2SV_ModEnd> return error ;",0
271,<S2SV_ModStart> decrypt_cb ) { ptrdiff_t <S2SV_ModEnd> n = ( <S2SV_ModStart> n = ( ptrdiff_t <S2SV_ModEnd> ) ( data_end,0
272,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; <S2SV_ModEnd> exit_func : free_server_handle,0
273,"<S2SV_ModStart> * returnrate, RATE_DISTORTION <S2SV_ModEnd> * returndistortion, <S2SV_ModStart> int zero_mv_sse = INT_MAX ; int best_sse = INT_MAX ; int best_rd_sse = INT_MAX ; # endif mode_mv = mode_mv_sb [ sign_bias ] ; best_ref_mv. as_int = 0 ; best_mode. rd = INT_MAX ; best_mode. yrd = INT_MAX ; best_mode. intra_rd = INT_MAX ; <S2SV_ModEnd> # if CONFIG_TEMPORAL_DENOISING <S2SV_ModStart> int zero_mv_sse = INT_MAX ; int best_sse = INT_MAX ; int best_rd_sse = INT_MAX ; # endif # if CONFIG_TEMPORAL_DENOISING <S2SV_ModEnd> zero_mv_sse = INT_MAX <S2SV_ModStart> zero_mv_sse = INT_MAX ; best_sse = INT_MAX ; best_rd_sse = INT_MAX ; # if CONFIG_TEMPORAL_DENOISING <S2SV_ModEnd> best_rd_sse = INT_MAX <S2SV_ModStart> best_rd_sse = INT_",0
274,<S2SV_ModStart> goto error ; if ( <S2SV_ModEnd> statbuf. st_size <S2SV_ModStart> statbuf. st_size < 0 ) goto error ; h -> size = statbuf. st_size,0
275,"<S2SV_ModStart> ; UWORD8 u1_profile_idc = 0, u1_level_idc = 0, u1_seq_parameter_set_id = 0 <S2SV_ModEnd> ; UWORD16 i2_max_frm_num <S2SV_ModStart> ; WORD32 i4_pic_height_in_map_units_minus1 = 0 ; WORD32 u2_pic_wd = 0 ; WORD32 u2_pic_ht = 0 ; WORD32 u2_frm_wd_y = 0 ; WORD32 u2_frm_ht_y = 0 ; WORD32 u2_frm_wd_uv = 0 ; WORD32 u2_frm_ht_uv = 0 ; WORD32 u4_crop_offset_y = 0 ; UWORD32 u2_crop_offset_uv = 0 ; WORD32 u4_num_reorder_frames = 0 ; WORD32 i4_i ; UWORD8 u1_frame_cropping_flag, u1_frame_cropping_flag, u1_frame_cropping_rect_left_ofst, u1_frame_cropping_rect_right_ofst, u1",0
276,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * params = ( vpx_svc_parameters_t * ) <S2SV_ModStart>. spatial_layer_id = ( int16_t ) <S2SV_ModStart>. temporal_layer_id = ( int16_t ) <S2SV_ModStart> -> lst_fb_idx = ( int16_t ) <S2SV_ModStart> -> gld_fb_idx = ( int16_t ) <S2SV_ModStart> -> alt_fb_idx = ( int16_t )",0
277,"<S2SV_ModStart> out ) { uint32 bitspersample, samplesperpixel ; uint32 input_compression, input_photometric ; uint32 width, length ; struct cpTag * p ; uint32 width <S2SV_ModEnd> ; CopyField ( <S2SV_ModStart> samplesperpixel ) ; TIFFGetFieldDefaulted ( in, TIFFTAG_IMAGEWIDTH, & width ) ; CopyField ( TIFFTAG_IMAGELENGTH, & length ) ; if ( width!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_WIDTH, width ) ; CopyField ( TIFFTAG_BITSPERSAMPLE, bitspersample ) ; CopyField ( TIFFTAG_SAMPLESPERPIXEL, samplesperpixel ) ; if ( compression!= ( uint16 ) - 1 ) TIFFSetField ( out, TIFFTAG_COMPRESSION, compression ) ; else if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_JPEGCOLORMODE, JPEGCOLORMODE_RGB ) ; } else if ( input_compression == COMPRESSION_YCBCR ) { uint16 subsamplinghor, subsamplingver ; TIFFGetFieldDefaulted ( in, TIFFTAG_YCBCRSUBSAMPLING, & subsamplinghor,",0
278,"<S2SV_ModStart> a ) { <S2SV_ModEnd> char * pn <S2SV_ModStart> = '\\0' ; if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else if (! S_ISLNK ( a -> mode ) ) { archive_set_error ( & a -> archive, 0, ""Removing <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; } pn [ 0 ] = c ; return ( 0 ) ; } else if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else { archive_set_error ( & a ->",0
279,"<S2SV_ModStart> unsigned int link_count ; struct kernel_lb_addr loc ; struct indirectEntry * ie ; ie = ( struct indirectEntry * ) ibh -> b_data <S2SV_ModStart> ibh ) { <S2SV_ModEnd> loc = lelb_to_cpu <S2SV_ModStart> -> i_sb, <S2SV_ModEnd> ibh -> b_data <S2SV_ModStart> ibh -> b_data <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> i_sb, <S2SV_ModEnd> ibh -> b_data <S2SV_ModStart> ibh -> b_data <S2SV_ModEnd>, 0, <S2SV_ModStart> -> i_sb, <S2SV_ModEnd> ibh -> b_data <S2SV_ModStart> ibh -> b_data <S2SV_ModEnd>, 0, <S2SV_ModStart> -> i_sb, <S2SV_ModEnd> ibh -> b_data <S2SV_ModStart> ibh -> b_data <S2SV_ModEnd>, 0, <S2SV_ModStart> -> i_sb, <S2SV_ModEnd> ibh -> b_data <S2SV_ModStart> ibh -> b_data <S2SV_ModEnd>, 0, <S2SV_ModStart> -> i_sb, <S2SV_ModEnd> ibh -> b_data <S2SV_ModStart> ibh -> b_data <S2SV_ModEnd>, 0, <S2SV_ModStart> -> i_sb, <S2SV_ModEnd> ibh -> b_data <S2SV_ModStart> ibh -> b_data <S2SV_ModEnd>, 0, <S2SV_ModStart> -> i_sb, <S2SV_ModEnd> ibh -> b_data <S2SV_ModStart> ibh -> b_data <S2SV_ModEnd>, 0, <S2SV_ModStart> -> i_sb, <S2SV_ModEnd> ibh -> b_",0
280,"<S2SV_ModStart> tx_size_uv = get_uv_tx_size ( mbmi ) ; const int filter_level = get_filter_level ( lfi_n, mbmi ) ; uint64_t * const left_y = & lfm -> left_y [ tx_size_y ] ; uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const left_uv = & lfm -> left_uv [ tx_size_uv ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv ; int i ; if (! filter_level ) { return ; } else { const int w = num_8x8_blocks_wide_lookup [ block_size ] ; const int h = num_8x8_blocks_high_lookup [ block_size ] ; int index = shift_y ; for ( i = 0 ; i < h ; i ++ ) { vpx_memset <S2SV_ModStart> w ) ;",0
281,"<S2SV_ModStart> mq_ops ) { spin_lock_irqsave_nested <S2SV_ModEnd> ( & fq <S2SV_ModStart> mq_flush_lock, flags, SINGLE_DEPTH_NESTING",0
282,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
283,"<S2SV_ModStart> ) ) { ovalue = strim ( option, ""\\""\'"", MPR_TRIM_BOTH ) ; if (! ovalue || * ovalue == '\\0' ) continue ; <S2SV_ModStart>, & ovalue <S2SV_ModEnd> ) ; if",0
284,"<S2SV_ModStart> sizeof ( effect_param_t ) || * ( effect_param_t * ) pCmdData > * replySize || effect -> state!= EFFECT_STATE_ACTIVE ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( * ( effect_param_t * ) pCmdData > * replySize || effect -> state!= EFFECT_STATE_ACTIVE ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_SET_CONFIG <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( * ( effect_param_t * ) pCmdData > * replySize || effect -> state!= EFFECT_STATE_ACTIVE ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_SET_CONFIG <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( * ( effect_param_t * ) pReplyData > * replySize ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_SET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if",0
285,<S2SV_ModStart> ; cleanup : if ( key_data!= NULL ) k5free ( key_data ) ; if ( key_data_in!= NULL ) k5free ( key_data ) ;,0
286,"<S2SV_ModStart> 0x02 ) ; if ( crgram_len > SC_MAX_APDU_BUFFER_SIZE - 1 ) { r = sc_transmit_apdu ( card, & apdu ) ; LOG_TEST_RET ( card -> ctx, r, ""APDU <S2SV_blank> transmit <S2SV_blank> failed"" ) ; } <S2SV_ModStart> 0x02 ) ; if ( crgram_len > SC_MAX_APDU_BUFFER_SIZE - 1 ) { r = sc_transmit_apdu ( card, & apdu ) ; LOG_TEST_RET ( card -> ctx, r, ""APDU <S2SV_blank> transmit <S2SV_blank> failed"" ) ; }",0
287,"<S2SV_ModStart> ( ret ) goto err_config_rss ; if ( macvlan_cnt > I40E_VSI_MAIN_MAX_MACVLANS ) { dev_err ( & pf -> pdev -> dev, ""Too <S2SV_blank> many <S2SV_blank> MACVLANs\\n"" ) ; return - EINVAL ; } if ( qcnt > I40E_VSI_MAIN_MAX_MACVLANS ) { dev_err ( & pf -> pdev -> dev, ""Too <S2SV_blank> many <S2SV_blank> MACVLANs\\n"" ) ; return - EINVAL ; } if ( qcnt > I40E_VSI_MAIN_MAX_MACVLANS ) { dev_err ( & pf -> pdev -> dev, ""Too <S2SV_blank> many <S2SV_blank> MACVLANs\\n"" ) ; return - EINVAL ; } if ( macvlan_cnt > I40E_VSI_MAIN_MAX_MACVLANS ) { dev_err ( & pf -> pdev -> dev, ""Too <S2SV_blank> many <S2SV_blank> MACVLANs\\n"" ) ; return - EINVAL ; } if ( qcnt > I40E_VSI_MAIN_MAX_MACVLAN",0
288,<S2SV_ModStart> ; } } return - 1 ;,1
289,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
290,"<S2SV_ModStart> mb_row, recon_uv_offset, mb_row <S2SV_ModStart> mb_row, recon_uv_offset, mb_col <S2SV_ModStart> mb_row, recon_uv_offset, mb_row <S2SV_ModStart> mb_row, recon_uv_offset, mb_col <S2SV_ModStart> mb_row, recon_uv_offset, mb_row <S2SV_ModStart> mb_row, recon_uv_offset, mb_col <S2SV_ModStart> mb_row, recon_uv_offset, mb_row <S2SV_ModStart> mb_row, recon_uv_offset, mb_col <S2SV_ModStart> mb_row, recon_uv_offset, mb_row <S2SV_ModStart> mb_row, recon_uv_offset, mb_col <S2SV_ModStart> mb_row, recon_uv_offset, mb_row <S2SV_ModStart> mb_row, recon_uv_offset, mb_col <S2SV_ModStart> mb_row, recon_uv_offset, mb_row <S2SV_ModStart> mb_row, recon_uv_offset, mb_col <S2SV_ModStart> mb_row, recon_uv_offset, mb_col <S2SV_ModStart> mb_row, recon_uv_offset, mb_col <S2SV_ModStart> mb_row, recon_uv_offset, mb_col <S2SV_ModStart> mb_row, recon_uv_offset, mb_col <S2SV_ModStart> mb",0
291,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
292,"<S2SV_ModStart> len ) { <S2SV_ModEnd> char * buf <S2SV_ModStart> char * p <S2SV_ModEnd> ; if ( <S2SV_ModStart> len > SIZE_MAX / 6 ) return NULL ; if ( len > SIZE_MAX / 6 ) return NULL ; u = PyBytes_FromStringAndSize ( ( char * ) NULL, len * 6 ) ; if ( u == NULL ) return NULL ; p = buf = PyBytes_AsString ( u ) ; end = s + len ; while ( s < end ) { if ( * s == '\\\\' ) { * p ++ = * s ++ ; if ( * s & 0x80 ) { strcpy ( p, ""u005c"" ) ; p += 5 ; } } if ( * s & 0x80 ) { PyObject * w ; int kind ; void * data ; Py_ssize_t len, i ; w = decode_utf8 ( c, & s, end ) ; if ( w == NULL ) { Py_DECREF ( u ) ; return NULL ; } kind = PyUnicode_KIND ( w ) ; data = PyUnicode_DATA ( w ) ; len = PyUnicode_GET_LENGTH ( w ) ; for ( i = 0 ; i < len ; i ++ ) {",0
293,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> enum { YES <S2SV_ModStart> setimes, targisdir <S2SV_ModEnd> ; BUF * <S2SV_ModStart> ""Unexpected <S2SV_blank> off_t/time_t <S2SV_blank> size"" ) ; <S2SV_ModEnd> mask = umask <S2SV_ModStart> ; if ( lstat <S2SV_ModEnd> ( targ, <S2SV_ModStart> ; if ( lstat <S2SV_ModEnd> ( targ, <S2SV_ModStart> ; if ( lstat <S2SV_ModEnd> ( targ,",0
294,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
295,<S2SV_ModStart> 0 ) { vpx_free ( oci -> mip ) ; vpx_free ( oci -> above_context ) ; vp8_de_alloc_frame_buffers ( oci ) ; <S2SV_ModStart> 0 ) { vpx_free ( oci -> mip ) ; vpx_free ( oci ) ; vp8_de_alloc_frame_buffers ( oci ) ; vp8_de_alloc_frame_buffers ( oci ) ; vp8_de_alloc_frame_buffers ( oci ) ; vp8_de_alloc_frame_buffers ( oci ) ; vp8_de_alloc_frame_buffers ( oci ) ; vp8_de_alloc_frame_buffers ( oci ) ; <S2SV_ModStart> 0 ) { vpx_free ( oci -> mip ) ; vpx_free ( oci -> above_context ) ; vp8_de_alloc_frame_buffers ( oci ) ; vp8_de_alloc_frame_buffers ( oci ) ; vp8_de_alloc_frame_buffers ( oci ) ; vp8_de_alloc_frame_buffers ( oci ) ; vp8_de_alloc_frame_buffers ( oci ) ; vp8_de_alloc_frame_,0
296,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
297,<S2SV_ModStart> u2_total_mbs_coded ) ; if ( ps_dec -> ps_dec_err_status -> u1_err_flag & REJECT_CUR_PIC ) { ps_dec -> ps_dec_err_status -> u1_err_flag &= ~ REJECT_CUR_PIC ; ps_dec -> ps_dec_err_status -> u1_err_flag |= REJECT_CUR_SLICE ; ps_dec -> ps_dec_err_status -> u1_err_flag |= REJECT_CUR_SLICE ; ps_dec -> ps_dec_err_status -> u1_err_flag &= ( REJECT_CUR_PIC | REJECT_CUR_SLICE ) ; ps_dec -> ps_dec_err_status -> u1_err_flag &= ( REJECT_CUR_PIC | REJECT_CUR_SLICE ) ; ps_dec -> ps_dec_err_status -> u1_err_flag |= REJECT_CUR_SLICE ; ps_dec -> ps_dec_err_status -> u1_err_flag &= ( REJECT_CUR_PIC | RE,0
298,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> vterm_allocator_free ( screen,1
299,"<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & delay )",1
300,"<S2SV_ModStart> one, offset <S2SV_ModEnd> ; ssize_t count <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) Throw",0
301,"<S2SV_ModStart> value ) { cchar * name = sclone ( value ) ; <S2SV_ModStart>, stok ( name <S2SV_ModEnd>, "" <S2SV_blank> \\t,"", <S2SV_ModStart> -> endpoints = name <S2SV_ModEnd> ; } }",0
302,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
303,"<S2SV_ModStart> ) ) ; cg_wlock ( & pool -> data_lock ) ; <S2SV_ModStart> ntime ) { free ( pool -> swork. job_id ) ; pool -> swork. job_id = NULL ; free ( prev_hash ) ; pool -> swork. prev_hash = NULL ; pool -> swork. coinbase1 = NULL ; pool -> swork. coinbase2 = NULL ; pool -> swork. bbversion = NULL ; pool -> swork. nbit = NULL ; pool -> swork. ntime = NULL ; pool -> swork. clean = clean ; alloc_len = strlen ( coinbase1 ) / 2 ; cb1_len = strlen ( coinbase1 ) / 2 ; cb2_len = strlen ( coinbase2 ) / 2 ; snprintf ( pool -> bbversion, 9, ""%s"", bbversion ) ; snprintf ( pool -> nbit, 9, ""%s"", nbit ) ; snprintf ( pool -> ntime, 9, ""%s"", ntime ) ; pool -> swork. clean = clean ; alloc_len = strlen ( bbversion ) / 2 ; snprintf ( pool -> nbit, 9, ""%s"", nbit ) ; sn",0
304,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
305,"<S2SV_ModStart> unused ) { _Py_IDENTIFIER ( __dict__ ) ; PyObject * dict = _PyObject_GetAttrId ( self, & PyId___dict__ ) ; if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( _PyObject_GetAttrId ( self, & PyId___dict__ ) == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( _PyObject_GetAttrId ( self, & PyId__dict__ ) == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( _PyObject_GetAttrId ( self, & PyId___dict__ ) == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( _PyObject_GetAttrId ( self, & PyId___dict__ ) == NULL ) { if ( PyErr_ExceptionMatches ( PyExc",0
306,"<S2SV_ModStart> ) & desc, sizeof ( * desc )",1
307,"<S2SV_ModStart> perf_event * ) <S2SV_ModEnd> ; switch ( <S2SV_ModStart> case PERF_EVENT_IOC_PERIOD : return perf_event_period ( event, ( u64 __user * ) arg ) ; case PERF_EVENT_IOC_ID : { u64 id = primary_event_id ( event ) ; if ( copy_to_user ( ( void __user * ) arg, & id, sizeof ( id ) ) ) return - EFAULT ; return 0 ; } case PERF_EVENT_IOC_SET_OUTPUT : { int ret ; if ( arg!= - 1 ) { struct perf_event * output_event ; struct fd output ; ret = perf_fget_light ( arg, & output ) ; if ( ret ) return ret ; ret = perf_event_set_output ( event, output_event ) ; fdput ( output ) ; } else { ret = perf_event_set_output ( event, NULL ) ; } return ret ; } case PERF_EVENT_IOC_SET_FILTER : return perf_event_set_filter ( event, ( void __user * ) arg ) ; default : return - ENOTTY ; } if ( flags & PERF_",0
308,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> * r, PREDICTION_MODE <S2SV_ModEnd> y_mode ) { <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode",0
309,"<S2SV_ModStart> - EINVAL ; if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) { unsigned int digest_len ; const u8 * sha_zero ; if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) return - EINVAL ; digest_len = SHA512_DIGEST_SIZE ; } else if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) { unsigned int digest_len ; const u8 * sha_zero ; if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) return - EINVAL ; digest_len = SHA512_DIGEST_SIZE ; } else if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) { unsigned int digest_len ; const u8 * sha_zero ; if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) return - EINVAL ; digest_len = SHA512_DIGEST_SIZE ; }",0
310,"<S2SV_ModStart> iv ) ; if (! NIL_P ( key ) ) rb_raise ( eCipherError, ""key <S2SV_blank> must <S2SV_blank> be <S2SV_blank> a <S2SV_blank> non-zero <S2SV_blank> byte <S2SV_blank> string"" ) ; if (! NIL_P ( iv ) ) rb_raise ( eCipherError, ""iv <S2SV_blank> must <S2SV_blank> be <S2SV_blank> a <S2SV_blank> non-zero <S2SV_blank> byte <S2SV_blank> string"" ) ;",0
311,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
312,<S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail ( & <S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail ( & <S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail ( & <S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail ( & <S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail ( & <S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail ( & <S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail ( & <S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail ( & <S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail ( & <S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail ( & <S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail ( & <S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail ( & <S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail ( & <S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail ( & <S2SV_ModStart> ; if ( <S2SV_ModEnd> nghttp2_buf_mark_avail (,0
313,"<S2SV_ModStart> intel_arch_events ) ; if ( version > 1 ) x86_pmu. max_pebs_events = min_t ( unsigned, MAX_PEBS_EVENTS, x86_pmu. num_counters ) ;",0
314,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> tp, const vpx_TOKENEXTRA <S2SV_ModEnd> * stop ) <S2SV_ModStart> stop ) { vpx_writer <S2SV_ModEnd> * p = <S2SV_ModStart> ] ; const vpx_extra_bit <S2SV_ModEnd> * const b <S2SV_ModStart> b = & vpx_extra_bits <S2SV_ModEnd> [ t ] <S2SV_ModStart> & 1 ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ; } vpx_write_bit <S2SV_ModEnd> ( w,",0
315,"<S2SV_ModStart>, uncompressed_hdr_size ; vpx_write_bit_buffer <S2SV_ModEnd> wb = { <S2SV_ModStart> 0 } ; vpx_write_bit_buffer <S2SV_ModEnd> saved_wb ; write_uncompressed_header <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> += uncompressed_hdr_size ; vpx_compute_update_table <S2SV_ModEnd> ( ) ; <S2SV_ModStart> += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb",0
316,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct net_device * <S2SV_ModEnd> dev_get_valid_name ( struct <S2SV_ModStart> net * net <S2SV_ModEnd>, const char <S2SV_ModStart> name ) { struct net_device * dev ; <S2SV_ModStart> '%' ) ) { dev = <S2SV_ModEnd> dev_alloc_name_ns ( net <S2SV_ModStart> name ) ; if ( IS_ERR ( dev ) ) return PTR_ERR ( dev ) ; } <S2SV_ModStart> name ) ) { dev = <S2SV_ModEnd> __dev_get_by_name ( net <S2SV_ModStart> name ) ; if ( IS_ERR ( dev ) ) return PTR_ERR ( dev ) ; }",0
317,"<S2SV_ModStart> struct ikev2_id id = { 0 } <S2SV_ModStart> * typedata ; if ( item_len < sizeof ( struct ikev2_id ) ) { ND_TCHECK ( * ext ) ; goto trunc ; } <S2SV_ModStart> * typedata ; if ( item_len < sizeof ( struct ikev2_id ) ) { ND_TCHECK ( * ext ) ; goto trunc ; } <S2SV_ModStart> trunc ; } if ( ND_TCHECK ( * ext ) ) { ND_MEMCPY ( & id, ext, sizeof ( id ) ) ; ikev2_pay_print ( ndo, NPSTR ( tpay ), id. h. critical ) ; id_len = ntohs ( id. h. len ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> len=%d"", id_len ) ) ; if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) goto trunc ;",0
318,"<S2SV_ModStart> ) ) { jas_log ( NULL, JAS_LOG_ERROR, ""Invalid <S2SV_blank> MIF_DATA <S2SV_blank> value"" ) ; <S2SV_ModStart> ) ) { jas_log ( NULL, JAS_LOG_ERROR, ""Invalid <S2SV_blank> MIF_DATA <S2SV_blank> value"" ) ; <S2SV_ModStart> ) ) { jas_log ( NULL, JAS_LOG_ERROR, ""Invalid <S2SV_blank> MIF_DATA <S2SV_blank> value"" ) ; <S2SV_ModStart> ) ) { jas_log ( NULL, JAS_LOG_ERROR, ""Invalid <S2SV_blank> MIF_DATA <S2SV_blank> value"" ) ; <S2SV_ModStart> ) ) { jas_log ( NULL, JAS_LOG_ERROR, ""Invalid <S2SV_blank> MIF_DATA <S2SV_blank> value"" ) ; <S2SV_ModStart> ) ) { jas_log ( NULL, JAS_LOG_ERROR, ""Invalid <S2SV_blank> MIF_DATA <S2SV_blank> value"" ) ; <S2SV_ModStart> ) ) { jas_log ( NULL, JAS_LOG_ERROR, ""Invalid <S2SV_blank> MIF_DATA <S2SV_blank> value"" ) ; <S2SV_ModStart> ) ) { jas_log ( NULL, ""Invalid <S2SV_blank> MIF_DATA <S2SV_blank> value"" ) ; <S2SV_ModStart> ) ) { jas_log ( NULL, JAS_LOG_ERROR, ""Invalid <S2SV_blank>",0
319,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
320,"<S2SV_ModStart> ; WORD32 xt0_0 = 0, yt0_0 = 0, yt1_0 = 0, yt2_0 = 0 <S2SV_ModEnd> ; WORD32 xh0_0 <S2SV_ModStart> ; WORD32 xh0_0 = 0, xh1_0 = 0, xh20_0 = 0, xh21_0 = 0, xl0_0 = 0, xl1_0 = 0, xl20_0 = 0, xl21_0 = 0 ; WORD32 x_0 = 0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_h2_0 = 0, x_h2_1 ; WORD32 si10, si20, si30, co10, co20, co30 ; WORD64 mul_1, mul_2, mul_4, mul_5, mul_6 ; WORD64 mul_7, mul_8, mul_9, mul_10, mul_11, mul_12 ; WORD32 * x_l1 ; WORD32 * x_l2 ; WORD32 * x_",0
321,"<S2SV_ModStart> mntent -> mnt_dir, false",0
322,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
323,"<S2SV_ModStart> ( req ) ) ; rb_hash_aset ( env, server_port_val, req_server_port ( req )",0
324,"<S2SV_ModStart> endif # endif # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION int col_type, prepare_retval ; MYSQL_BIND * bind, * bind_end ; imp_sth_phb_t * fbind ; # endif # endif D_imp_xxh ( sth ) ; D_imp_dbh_from_sth ; if ( DBIc_TRACE_LEVEL ( imp_xxh ) >= 2 ) PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t-> <S2SV_blank> dbd_st_prepare <S2SV_blank> MYSQL_VERSION_ID <S2SV_blank> %d, <S2SV_blank> SQL <S2SV_blank> statement: <S2SV_blank> %s\\n"", MYSQL_VERSION_ID, statement ) ; # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION if ( DBIc_TRACE_LEVEL ( imp_xxh ) >= 2 ) PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t-> <S2SV_blank> dbd_st_prepare <S2SV_blank> MYSQL_VERSION_ID <S2SV_blank> %d, <S2SV_blank> SQL <S2SV_blank> statement: <S2SV_blank> %s\\n"", MYSQL_VERSION_ID, statement ) ; # if MYSQL_VERSION_",0
325,"<S2SV_ModStart> int eol ; size_t <S2SV_ModEnd> need = 0 <S2SV_ModStart> screen, { if ( need > ( size_t ) MAX_WIDE_CHARS ) { SysError ( ERROR_BMALLOC2 ) ; } <S2SV_ModStart> screen, { if ( need > ( size_t ) MAX_WIDE_CHARS ) { SysError ( ERROR_BMALLOC2 ) ; } <S2SV_ModStart> screen, { if ( need > ( size_t ) MAX_WIDE_CHARS ) { SysError ( ERROR_BMALLOC2 ) ; } <S2SV_ModStart> screen, { if ( need > ( size_t ) MAX_WIDE_CHARS ) { SysError ( ERROR_BMALLOC2 ) ; } <S2SV_ModStart> screen, { if ( need > ( size_t ) MAX_WIDE_CHARS ) { SysError ( ERROR_BMALLOC2 ) ; } <S2SV_ModStart> screen, { if ( need > ( size_t ) MAX_WIDE_CHARS ) { SysError ( ERROR_BMALLOC2 ) ; } <S2SV_ModStart> screen, { if ( need > ( size_t ) MAX_WIDE_CHARS ) { SysError ( ERROR_BMALLOC2 ) ; }",0
326,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> val ) ) strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> < 0 ) strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> ) ; else strcpy <S2SV_ModEnd> ( str,",0
327,<S2SV_ModStart> ( unlikely ( crng_ready ( ) <S2SV_ModEnd> ) ) {,0
328,"<S2SV_ModStart> LEX_ID ) { snprintf ( str, len, ""ID:%s"" <S2SV_ModEnd>, jslGetTokenValueAsString ( <S2SV_ModStart> jslGetTokenValueAsString ( ) <S2SV_ModEnd> ) ; } <S2SV_ModStart> LEX_STR ) { snprintf ( str, len, ""String:\'%s\'"" <S2SV_ModEnd>, jslGetTokenValueAsString ( <S2SV_ModStart> jslGetTokenValueAsString ( ) <S2SV_ModEnd> ) ; }",0
329,,1
330,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
331,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
332,"<S2SV_ModStart> ) { return memcmp <S2SV_ModEnd> ( s1,",0
333,"<S2SV_ModStart> ( CMD_PRINT_HELP, NULL, NULL ) ; parse_service_option ( CMD_PRINT_HELP, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-version"" ) ) { parse_global_option ( CMD_PRINT_DEFAULTS, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-sockets"" ) ) { socket_options_print ( ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-options"" ) ) { print_ssl_options ( ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else # ifndef USE_WIN32 if (! strcasecmp ( arg1, ""-fd"" ) ) { if (! arg2 ) { s_log ( LOG_ERR, ""No <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> specified"" ) ; print_syntax ( ) ; return 1 ; } name = arg2 ; type =",0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,"<S2SV_ModStart> ) ) { if ( st -> st_oakley. ta_decrypt == NULL ) { loglog ( RC_LOG_SERIOUS, ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; return ; } <S2SV_ModStart> ) ) { if ( st -> st_oakley. ta_decrypt == NULL ) { loglog ( RC_LOG_SERIOUS, ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; return ; } <S2SV_ModStart> ) ) { if ( st -> st_oakley. ta_decrypt == NULL ) { loglog ( RC_LOG_SERIOUS, ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; return ; } <S2SV_ModStart> ) ) { if ( st -> st_oakley. ta_decrypt == NULL ) { loglog ( RC_LOG_SERIOUS, ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material",0
336,<S2SV_ModStart> ; } } if ( 0 == ps_dec -> u4_num_bytes_consumed ) { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; },0
337,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char * print_string,0
338,"<S2SV_ModStart>. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img, <S2SV_ModStart>. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img,",1
339,<S2SV_ModStart> ; } } case 10 : if ( term. csi_argc!= 2 ) return ; if ( arg1 == 2 ) win_maximise ( - 2 ) ; if ( arg1 == 3 ) win_maximise ( - 1 ) ;,0
340,<S2SV_ModStart> i < cols <S2SV_ModEnd> ; i ++,0
341,"<S2SV_ModStart> -> log ) { <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> -> log ) { <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> -> log ) { <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> -> log ) { <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> -> log ) { <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> -> log ) { <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> -> log ) { <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> -> log ) { <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> b",0
342,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
343,<S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_pic_done ) { ps_codec -> i4_pic_done = 1 ; return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_pic_done ) { ps_codec -> i4_pic_done = 1 ; return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_pic_done ) { ps_codec -> i4_pic_done = 1 ; return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_pic_done ) { ps_codec -> i4_pic_done = 1 ; return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_pic_done ) { ps_codec -> i4_pic_done = 1 ; return IHEVCD_INVALID_HEADER ; },0
344,"<S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_start ( argptr, strptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr )",0
345,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
346,"<S2SV_ModStart> 0 ; } fs_logger2 ( ""clone"", dest ) ; int rv = copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { <S2SV_ModStart> ; else { <S2SV_ModEnd> } _exit (",0
347,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> BLOCK_8X8 : return vpx_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> BLOCK_16X8 : return vpx_mse16x8 <S2SV_ModEnd> ; case BLOCK_8X16 <S2SV_ModStart> BLOCK_8X16 : return vpx_mse8x16 <S2SV_ModEnd> ; default : <S2SV_ModStart> default : return vpx_mse16x16 <S2SV_ModEnd> ; } },1
348,"<S2SV_ModStart> ; if ( padata -> pa_type == KRB5_PADATA_PKINIT_KX || padata -> pa_type == KRB5_PADATA_PKINIT_KX9 ) { return return_pkinit_kx ( context, request, reply, encrypting_key, send_pa ) ; } if (",0
349,"<S2SV_ModStart> flags ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> if (! v4l2_buf ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", input -> buf_cur_space_left, frame_len ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d.",0
350,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> size_t <S2SV_ModEnd> zcalloc ( size_t <S2SV_ModStart> size ) { size_t res ; <S2SV_ModStart> # ifdef HAVE_MALLOC_SIZE res = zmalloc_size ( ptr ) ; if ( res < 0 ) { free ( ptr ) ; zmalloc_oom_handler ( size ) ; return - 1 ; } <S2SV_ModStart> ; # else res <S2SV_ModEnd> = size ; <S2SV_ModStart> PREFIX_SIZE ) ; if ( res < 0 ) { free ( ptr ) ; zmalloc_oom_handler ( size ) ; return - 1 ; },0
351,<S2SV_ModStart> -> serviceId == EXTRACT_16BITS <S2SV_ModEnd> ( & rxh,1
352,"<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len > MWIFIEX_MAX_SSID_LEN ) { mwifiex_dbg ( adapter, ERROR, ""Invalid <S2SV_blank> SSID <S2SV_blank> length\\n"" ) ; return - EINVAL ; }",0
353,"<S2SV_ModStart> ; if (! sfe -> valuelen ) { error = context -> put_listent ( context, NULL, 0, 0, 0 ) ; if ( context -> seen_error ) return error ; sfe = XFS_ATTR_SF_NEXTENTRY ( sfe ) ; } if ( <S2SV_ModStart> ; if (! sfe -> valuelen ) { error = context -> put_listent ( context, NULL, 0, 0, 0 ) ; if ( context -> seen_error ) return error ; sfe = XFS_ATTR_SF_NEXTENTRY ( sfe ) ; } if ( <S2SV_ModStart> ; if (! sfe -> valuelen ) { error = context -> put_listent ( context, NULL, 0, 0, 0, 0 ) ; if ( context -> seen_error ) return error ; sfe = XFS_ATTR_SF_NEXTENTRY ( sfe ) ; } if (",0
354,"<S2SV_ModStart> struct l2cap_conf_rfc rfc <S2SV_ModEnd> ; void * <S2SV_ModStart> sk ) ; rfc. txwin_size = L2CAP_DEFAULT_RX_WINDOW ; rfc. max_transmit = L2CAP_DEFAULT_MAX_RECEIVE ; rfc. retrans_timeout = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO ) ; rfc. monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; l2cap_add_conf_opt ( & ptr, L2CAP_CONF_RFC, sizeof ( rfc ), ( unsigned long ) & rfc ) ; <S2SV_ModStart> = L2CAP_MODE_ERTM ; <S2SV_ModEnd> break ; }",0
355,"<S2SV_ModStart> { do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> r, MSG_WAITALL )",0
356,<S2SV_ModStart> u1_nal_ref_idc ) ; if ( ps_dec -> u1_nal_ref_idc == 0 ) { ps_dec -> u1_nal_ref_idc = IDR_SLICE_NAL ; ps_dec -> u1_pic_decode_done = 1 ; },0
357,<S2SV_ModStart> while ( pair <S2SV_ModEnd> ) { mprAddItem,1
358,"<S2SV_ModStart> * delegation, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> = 0 ; fmode <S2SV_ModEnd> &= ( FMODE_READ <S2SV_ModStart> -> type & fmode )!= fmode <S2SV_ModEnd> ) goto no_delegation_unlock <S2SV_ModStart> -> stateid, fmode <S2SV_ModEnd> ) ; ret <S2SV_ModStart>, NULL, fmode <S2SV_ModEnd> ) ; ret",1
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,"<S2SV_ModStart> int * out_rate_sum ) { int i ; int64_t rate_sum = 0 ; int64_t dist_sum = 0 ; const int ref = xd -> mi [ 0 ] -> mbmi. ref_frame [ 0 ] ; unsigned int sse ; const BLOCK_SIZE bs = get_plane_block_size ( bsize, pd ) ; ( void ) cpi -> fn_ptr [ bs ]. vf ( p -> src. buf, p -> src. stride, pd -> dst. buf, pd -> dst. stride, & sse ) ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblock_plane * const p = & xd -> plane [ i ] ; struct macroblockd_plane * const pd = & xd -> plane [ i ] ; const BLOCK_SIZE bs = get_plane_block_size ( bsize, pd ) ; ( void ) cpi -> fn_ptr [ bs ]. vf ( p -> src. buf, p -> src. stride, pd -> dst. buf, pd -> dst. stride, & sse ) ; if ( i == 0 ) x -> pred_sse [ ref ]",0
361,<S2SV_ModStart> } if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
362,<S2SV_ModStart> { if ( index >= PAM_MAX_RESP_SIZE ) { return ( PAM_BUF_ERR ) ; } if ( <S2SV_ModStart> ; } } <S2SV_ModEnd> * ret_username = <S2SV_ModStart> + 1 ) ; if ( * ret_username <S2SV_ModEnd> == NULL ) <S2SV_ModStart> PAM_BUF_ERR ) ; strncpy <S2SV_ModEnd> ( * ret_username,0
363,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> seg ) { vpx_read_tree <S2SV_ModEnd> ( r, <S2SV_ModStart> ( r, vpx_segment_tree <S2SV_ModEnd>, seg ->",0
364,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",1
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,"<S2SV_ModStart> depth ++ ; if ( depth == 0 ) goto trunc ; <S2SV_ModStart> depth -- ; if ( depth == 0 ) goto trunc ; if ( buf2 == buf ) return ( buf ) ; buf = buf2 ; } return ( buf ) ; case '|' : fmt ++ ; if ( buf >= maxbuf ) return ( buf ) ; break ; case '%' : fmt ++ ; buf = maxbuf ; break ; case '#' : fmt ++ ; buf = maxbuf ; break ; case '[' : fmt ++ ; if ( buf >= maxbuf ) return ( buf ) ; memset ( s, 0, sizeof ( s ) ) ; p = strchr ( fmt, ']' ) ; if ( ( size_t ) ( p - fmt + 1 ) > sizeof ( s ) ) { return ( buf ) ; } strncpy ( s, fmt, p - fmt ) ; s [ p - fmt ] = '\\0' ; fmt = p + 1 ; buf = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( buf == NULL ) return ( NULL ) ;",0
367,"<S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851WriteFifo <S2SV_ModStart> ( interface, KSZ8851_TXQCR, KSZ8851_TXQCR_METFE <S2SV_ModEnd> ) ; n <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK",0
368,<S2SV_ModStart> ( ) ; mono_attach_maybe_stop ( ) ;,0
369,"<S2SV_ModStart>, x_8, x_9, x_a, x_b, x_c, x_d, x_e, x_f ; WORD32 n10, n20, n30, n01, n11, n21, n31 ; WORD32 n12, n22, n32, n03, n13, n23, n33 ; WORD32 * x2, * y0 ; WORD32 * y1, * y2, * y3 ; x0 = ptr_x ; x2 = ptr_y + ( WORD32 ) npoints ; y1 = y2 + ( WORD32 ) npoints ; x3 = ptr_x + ( WORD32 ) npoints ; x_4 = * x0 ++ ; x_5 = * x0 ++ ; x_6 = * x0 ++ ; x_7 = * x0 ++ ; x_8 = * x0 ++ ; x_9 = * x0 ++ ; n00 = x_0 + x_2 ; n01 = x_1 + x_3 ; n20 = x_0 - x_2 ; n21 = x_1 - x_3 ; n",0
370,"<S2SV_ModStart> ; if ( pmd_none_or_clear_bad ( pmd ) ) continue ; ret = unuse_pte_range ( vma, pmd, addr, next, entry, page ) ; if ( ret ) return ret ; if ( <S2SV_ModStart> ) ) ) <S2SV_ModEnd> return ret ;",0
371,"<S2SV_ModStart> height, target_width = 0, target_height = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( argv [ 2 ], & width ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } if (! parse_dim ( argv [ 3 ], & target_width, & target_height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpin = fopen ( fin, ""rb"" ) ; if ( fpin == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> read\\n"", fin ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpout = fopen ( fout, ""wb"" ) ; if ( fpout == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> write\\n",0
372,"<S2SV_ModStart> num_fields ) { _Py_IDENTIFIER ( _attributes ) ; PyObject * s, * l = PyTuple_New ( num_fields ) ; if (! l ) return 0 ; for ( int i = 0 ; i < num_fields ; i ++ ) { s = PyUnicode_FromString ( attrs [ i ] ) ; if (! s ) { Py_DECREF ( l ) ; return 0 ; } PyTuple_SET_ITEM ( l, i, s ) ; } result = _PyObject_SetAttrId ( ( PyObject * ) type, & PyId__attributes, l ) >= 0 ; Py_DECREF ( l ) ; return result <S2SV_ModEnd> ; } <S2SV_null>",0
373,<S2SV_ModStart> = VPX_CODEC_OK ; vpx_codec_alg_priv_t <S2SV_ModEnd> * priv ; <S2SV_ModStart> sizeof ( struct vpx_codec_alg_priv_t <S2SV_ModEnd> ) ) ; <S2SV_ModStart> priv = & priv -> base ; ctx -> priv -> sz = sizeof ( * ctx -> priv ) ; ctx -> priv -> iface = ctx -> iface ; ctx -> priv -> init_flags = ctx -> init_flags ; if ( ctx -> config. enc ) { ctx -> priv -> alg_priv -> cfg = * ctx -> config. enc ; ctx -> config. enc = & ctx -> priv -> alg_priv -> cfg ; } cfg = & ctx -> priv -> alg_priv -> cfg ; for ( i = 0 ; extracfg_map [ i ]. usage && extracfg_map [ i ]. usage!= cfg -> g_usage ; i ++ ) ; priv = & ctx -> priv -> alg_priv -> cfg ; } cfg = & ctx -> priv -> alg_priv -> cfg ; for ( i = 0 ; extracfg_map [ i ]. usage && extracfg_map [ i ]. usage!= cfg -> g_usage ; i ++ ) ; priv -> vp8,0
374,<S2SV_ModStart> ++ ; } pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; totfr += step ; if ( totfr > BOT ) { totfr = 0 ; for ( i = 0 ; i < 256 ; i ++ ) { unsigned nc = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] = nc ; totfr += nc ; } for ( i = 0 ; i < 256 ; i ++ ) { unsigned sum = 0 ; unsigned i16_17 = i << 4 ; for ( j = 0 ; j < 16 ; j ++ ) sum += i16_17 ; pixel -> lookup [ i ] = sum ; } } pixel -> total_freq = totfr ;,0
375,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx ->,0
376,<S2SV_ModStart> efe ) ; iinfo -> i_location = lelb_to_cpu ( efe -> icbTag. extLocation ) ; <S2SV_ModStart> efe ) ; iinfo -> i_location = lelb_to_cpu ( efe -> icbTag. extLength ) ; <S2SV_ModStart> efe ) ; iinfo -> i_location = lelb_to_cpu ( efe -> icbTag. extLocation ) ;,0
377,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0",1
378,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int bad_format_imginfo ( <S2SV_ModStart> int bad_format_imginfo ( const <S2SV_ModStart> char * ptr <S2SV_ModEnd> ; ptr = <S2SV_ModStart> 'S' ) { return 1 <S2SV_ModEnd> ; } else <S2SV_ModStart> } } return 0 <S2SV_ModEnd> ; } <S2SV_null>,0
379,"<S2SV_ModStart> IPV6DefragSturgesNovakLastTest ) ; UtRegisterTest ( ""DefragIPv6NoDataTest"", DefragIPv6NoDataTest ) ;",0
380,<S2SV_ModStart> if ( object_data && object_length,0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,"<S2SV_ModStart> p_sys -> b_auto_field_coding && p_sys -> p_format -> interlaced ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""interlaced_coding"", p_sys -> p_format -> interlaced ) ; if ( p_sys -> b_auto_field_coding && p_sys -> p_format -> top_field_first ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""top_field_first"", p_sys -> p_format -> top_field_first ) ; if ( p_sys -> b_auto_field_coding ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""auto_field_coding"", p_sys -> p_format -> interlaced ) ; if ( p_sys -> b_auto_field_coding ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""auto_field_coding"", p_sys -> p_format -> interlaced ) ; if (",0
384,"<S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> regular <S2SV_blank> file\\n"" <S2SV_ModEnd>, fname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> regular <S2SV_blank> file\\n"" <S2SV_ModEnd>, fname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> regular <S2SV_blank> file\\n"" <S2SV_ModEnd>, fname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> regular <S2SV_blank> file\\n"" <S2SV_ModEnd>, fname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> regular <S2SV_blank> file\\n"" <S2SV_ModEnd>, fname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> regular <S2SV_blank> file\\n"" <S2SV_ModEnd>, fname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> regular <S2SV_blank> file\\n"" <S2SV_ModEnd>, fname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> regular <S2SV_blank> file\\n"" <S2SV_ModEnd>, fname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> regular <S2SV_blank> file\\n"" <S2SV_ModEnd>, fname. <S2SV_ModStart> (",0
385,<S2SV_ModStart> 4 ) ; size_t <S2SV_ModEnd> num_properties = GETINT32 <S2SV_ModStart> len ) ; if (! a -> names [ i ]. data ) return NULL ;,0
386,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
387,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * fb ; vpx_get_reference_dec <S2SV_ModEnd> ( ctx ->",0
388,"<S2SV_ModStart> JPEG_MARKER_EOI ) { if ( i + 1 < frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> last <S2SV_blank> marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> EOI.\\n"", marker ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> JPEG_MARKER_SOS ) { if ( i + 1 < frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> last <S2SV_blank> marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> SOS.\\n"", marker ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> JPEG_MARKER_EOI ) { if ( i + 1 < frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> last <S2SV_blank> marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> EOI.\\n"", marker ) ; return AVERROR_INVALIDDATA ; }",0
389,"<S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == testlist ) { node * ch = CHILD ( n, 0 ) ; expr_ty e = ast_for_testlist ( c, ch ) ; if (! e ) return NULL ; return Expr ( e, LINENO ( n ), n -> n_col_offset, n -> n_end_lineno, n -> n_end_col_offset, c -> c_arena ) ; } else if (",0
390,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void vp8_denoiser_filter_c ( YV12_BUFFER_CONFIG * mc_running_avg, YV12_BUFFER_CONFIG * running_avg, MACROBLOCK * signal, unsigned int motion_magnitude, int y_offset, int uv_offset ) { unsigned char * mc_running_avg_y = mc_running_avg -> y_buffer + y_offset ; int mc_avg_y_stride = mc_running_avg -> y_stride ; unsigned char * running_avg_y = running_avg -> y_buffer + y_offset ; int avg_y_stride = running_avg -> y_stride ; int r, c, i ; int sum_diff = 0 ; int adj_val [ 3 ] = { 3, 4, 6 } ; if ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) { for ( i = 0 ; i < 3 ; i ++ ) adj_val [ i ] += 1 ; } for ( r = 0 ; r < 16 ; ++ r ) { int diff = 0 ; int",0
391,<S2SV_ModStart> sockPtr ) ; if ( sockPtr -> keep ) { sockPtr -> keep = NS_TRUE ; } <S2SV_ModStart> sockPtr ) ; if ( sockPtr -> keep ) { sockPtr -> keep = NS_TRUE ; },0
392,"<S2SV_ModStart> = uregs ; xtregs_coprocessor_t cp0 ; <S2SV_ModStart> ret = 0 ; memset ( & cp0, 0, sizeof ( cp0 ) ) <S2SV_ModStart> ti ) ; <S2SV_ModEnd> ret |= __copy_from_user <S2SV_ModStart> ) ) ; <S2SV_ModEnd> ret |= __copy_from_user <S2SV_ModStart> ) ) ; # if XTENSA_HAVE_COPROCESSORS coprocessor_flush_all ( ti ) ; coprocessor_release_all ( ti ) ; ret |= __copy_from_user ( & ti -> xtregs_cp, & xtregs -> cp0, sizeof ( xtregs_coprocessor_t ) ) ; # endif",0
393,<S2SV_ModStart> size ) ; if ( message -> length > 0 ) { <S2SV_ModStart> ; # endif },0
394,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" <S2SV_ModStart> cg_item ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
395,"<S2SV_ModStart> int error ; new_bh = ext2_xattr_cache_find ( inode, header ) ; if ( new_bh ) { if ( new_bh == old_bh ) { error = dquot_alloc_block ( inode, 1 ) ; if ( error ) { unlock_buffer ( new_bh ) ; goto cleanup ; } le32_add_cpu ( & HDR ( new_bh ) -> h_refcount, 1 ) ; ea_bdebug ( new_bh, ""refcount <S2SV_blank> now=%d"", le32_to_cpu ( HDR ( new_bh ) -> h_refcount ) ) ; } unlock_buffer ( new_bh ) ; } else if ( old_bh && header == HDR ( old_bh ) ) { new_bh = old_bh ; get_bh ( new_bh ) ; <S2SV_ModStart> new_bh ) ; <S2SV_ModEnd> } else {",0
396,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> map ) { # if CONFIG_VP9_HIGHBITDEPTH if (! vp9_highbitdepth_set_active_map ( ctx -> cpi, map -> active_map, map -> rows, map -> cols ) ) return VPX_CODEC_OK ; else return VPX_CODEC_INVALID_PARAM ; # else if (! vp9_set_active_map ( ctx -> cpi, map -> active_map, map -> rows, map -> cols ) ) return VPX_CODEC_OK ; else return VPX_CODEC_INVALID_PARAM ; # endif } else { # if CONFIG_VP9_HIGHBITDEPTH if (! vp9_set_active_map ( ctx -> cpi, map -> active_map, map -> rows, map -> cols ) ) return VPX_CODEC_OK ; else return VPX_CODEC_INVALID_PARAM ; # else if (! vp9_set_active_map ( ctx -> cpi, map -> active_map, map -> rows, map -> cols ) ) return VPX_CODEC_OK ;",0
397,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
398,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
399,"<S2SV_ModStart>, 1 ) ; if ( imbuf == NULL ) { return ( MagickFalse ) ; } for ( n = 0 ; n < 16 ; n ++ ) { sixel_palet [ n ] = sixel_default_color_table [ n ] ; } for ( r = 0 ; r < 6 ; r ++ ) { for ( g = 0 ; g < 6 ; g ++ ) { for ( b = 0 ; b < 6 ; b ++ ) { sixel_palet [ n ++ ] = SIXEL_RGB ( r * 51, g * 51, b * 51 ) ; } } } for ( ; n < SIXEL_PALETTE_MAX ; n ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 255, 255, 255 ) ; } for ( ; n < SIXEL_PALETTE_MAX ; n ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 255, 255, 255 ) ; } for ( ; n < SIXEL_PALETTE_MAX ; n ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 255, 255, 255",0
400,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vpx_ref_frame_t * ) ; YV12_BUFFER_CONFIG sd <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; vpx_image2yuvconfig <S2SV_ModEnd> ( & frame <S2SV_ModStart> sd ) ; if ( vp9_copy_reference_dec ( ctx -> pbi, ( VP9_REFFRAME ) frame -> frame_type, & sd ) ) { return VPX_CODEC_INVALID_PARAM ; } else { return VPX_CODEC_INVALID_PARAM ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
401,<S2SV_ModStart> u2_total_mbs_coded ) ; if ( ps_dec -> ps_dec_err_status -> u1_err_flag & REJECT_CUR_PIC ) { ps_dec -> ps_dec_err_status -> u1_err_flag &= ~ REJECT_CUR_PIC ; ps_dec -> ps_dec_err_status -> u1_err_flag |= REJECT_CUR_SLICE ; ps_dec -> ps_dec_err_status -> u1_err_flag |= REJECT_CUR_SLICE ; ps_dec -> ps_dec_err_status -> u1_err_flag &= ( REJECT_CUR_PIC | REJECT_CUR_SLICE ) ; ps_dec -> ps_dec_err_status -> u1_err_flag &= ( REJECT_CUR_PIC | REJECT_CUR_SLICE ) ; ps_dec -> ps_dec_err_status -> u1_err_flag |= REJECT_CUR_SLICE ; ps_dec -> ps_dec_err_status -> u1_err_flag &= ( REJECT_CUR_PIC | RE,0
402,<S2SV_ModStart> ; UWORD32 u4_x_dst_offset <S2SV_ModEnd> = 0 ; <S2SV_ModStart> == B_PIC ) { <S2SV_ModStart> ps_dec ) ; } else { <S2SV_ModEnd> impeg2d_dec_p_mb_params ( ps_dec <S2SV_ModStart> ps_dec ) ; } <S2SV_ModStart> == B_PIC ) { <S2SV_ModStart> ps_dec ) ; } else { <S2SV_ModEnd> impeg2d_dec_pnb_mb_params ( ps_dec <S2SV_ModStart> ps_dec ) ; } <S2SV_ModStart> == B_PIC ) { <S2SV_ModStart> ps_dec ) ; } else { <S2SV_ModEnd> impeg2d_dec_p_mb_params ( ps_dec <S2SV_ModStart> ps_dec ) ; } <S2SV_ModStart> == B_PIC ) { <S2SV_ModStart> ps_dec ) ; } else { <S2SV_ModEnd> impeg2d_dec_pnb_mb_params ( ps_dec <S2SV_ModStart> ps_dec ) ; } <S2SV_ModStart> == B_PIC ) { <S2SV_ModStart> ps_dec ) ; } else { <S2SV_ModEnd> impeg2d_dec_pnb_mb_params ( ps_dec <S2SV_ModStart> ps_dec ) ; },0
403,"<S2SV_ModStart> VP9_LAST_FLAG ) { if ( cm -> ref_frame_map [ 0 ] >= MAX_FRAMES ) { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Invalid <S2SV_blank> reference <S2SV_blank> frame"" ) ; return VPX_CODEC_ERROR ; } <S2SV_ModStart> * const cfg ; if ( cm -> ref_frame_map [ 0 ] >= MAX_FRAMES ) { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Invalid <S2SV_blank> reference <S2SV_blank> frame <S2SV_blank> map"" ) ; return VPX_CODEC_ERROR ; } cfg",0
404,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
405,"<S2SV_ModStart> TX_SIZE tx_size = <S2SV_ModEnd> get_uv_tx_size ( mbmi <S2SV_ModStart> int i ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) { int r, c ; int max_blocks_wide = num_4x4_w ; int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> ( 5 + pd -> subsampling_y ) ) ; i = 0 ; for ( r = 0 ; r < num_4x4_h ; r += ( 1 << tx_size ) ) { for ( c = 0 ; c < num_4x4_w ; c += ( 1 << tx_size ) ) { if ( r < max_blocks_wide && c < max_blocks_wide ) visit ( plane, i, plane",0
406,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 4 ) ; <S2SV_ModEnd> src += src_stride",0
407,<S2SV_ModStart> { rowstoread = ( row + img -> row_offset ) % rowsperstrip ; nrow = ( row + rowstoread > h? h - row : rowstoread ) <S2SV_ModEnd> ; offset_row = <S2SV_ModStart> { rowstoread = ( row + img -> row_offset ) % rowsperstrip ; nrow = ( row + rowstoread > h? h - row : rowstoread ) <S2SV_ModEnd> ; p0 = <S2SV_ModStart> { rowstoread = ( row + img -> row_offset ) % rowsperstrip <S2SV_ModEnd> ; p1 = <S2SV_ModStart> { rowstoread = ( row + rowstoread > h? h - row : rowstoread ) <S2SV_ModEnd> ; p2 = <S2SV_ModStart> { rowstoread = ( row + rowstoread > h? h - row : rowstoread ) <S2SV_ModEnd> ; p2 = <S2SV_ModStart> { rowstoread = ( row + rowstoread > h? h - row : rowstoread ) <S2SV_ModEnd> ; p1 = <S2SV_ModStart> { rowstoread = ( row + img -> row_offset ) % rowsperstrip <S2SV_ModEnd> ; p2 = <S2SV_ModStart> { rowstoread = ( row + rowstoread > h? h - row : rowstoread ) <S2SV_ModEnd> ; p2,0
408,<S2SV_ModStart> ; } } <S2SV_ModEnd> return 0 ;,0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> psf -> header. <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> psf -> header. <S2SV_ModEnd> header [ psf <S2SV_ModStart> psf -> header. <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
410,<S2SV_ModStart> num & ( 1U << number <S2SV_ModEnd> ) ) return <S2SV_ModStart> num - ( 1U <S2SV_ModEnd> << number ),0
411,"<S2SV_ModStart> = vpx_img_plane_width ( <S2SV_ModEnd> plane ) ; <S2SV_ModStart> = vpx_img_plane_height ( <S2SV_ModEnd> plane ) ; <S2SV_ModStart> ( buf, stride <S2SV_ModEnd>, w,",0
412,"<S2SV_ModStart> ; uint16_t attr_len = 0 <S2SV_ModStart> ; uint16_t orig_attr_len = 0 <S2SV_ModStart> 1 ; } if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } <S2SV_ModStart> struct l2tp_avp_t ) ; if ( avp -> length < attr_len ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } attr_len = avp -> length - sizeof ( struct l2tp_avp_t ) ; MD5_Init ( & md5_ctx ) ; MD5_Update ( & md5_ctx, & avp ->",0
413,<S2SV_ModStart> 1 ; case EVP_CTRL_AEAD_SET_IV : if ( arg <= 0 || arg > CHACHA_CTR_SIZE ) return 0 ; actx -> nonce [ 0 ] = actx -> key. counter [ 1 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr ) ; actx -> nonce [ 1 ] = actx -> key. counter [ 2 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 4 ) ; return 1 ; case EVP_CTRL_AEAD_SET_IVLEN : if ( arg <= 0 || arg > CHACHA_CTR_SIZE ) return 0 ; actx -> nonce_len = arg ; return 1 ; case EVP_CTRL_AEAD_SET_IV_FIXED : if ( arg!= 12 ) return 0 ; actx -> nonce [ 0 ] = actx -> key. counter [ 1 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 4 ) ; actx -> nonce [ 1 ] = actx -> key. counter [ 2 ] = CHACHA_U8TOU32 ( ( unsigned char *,0
414,"<S2SV_ModStart>, 0, comm_event -> comm_size <S2SV_ModEnd> ) ; if",0
415,"<S2SV_ModStart>, sk ) ; if (! sk ) return - EINVAL",0
416,<S2SV_ModStart> MT_CPTYPE_PASSSALT ) { if ( cpkt. length > MT_PASS_SALT_MAX_LEN ) { return - 1 ; },0
417,<S2SV_ModStart> MUTT_ABORT ) { imap_cmd_step ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; imap_cmd_step ( adata ) ; return - 1 <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ) { imap_cmd_step ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { imap_cmd_step ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { imap_cmd_step ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { imap_cmd_step ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { imap_cmd_step ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { imap_cmd_step ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { imap_cmd_step ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { imap_cmd_step ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { imap_cmd_step ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { imap_cmd_step ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { imap_cmd_step,0
418,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
419,"<S2SV_ModStart> ) ) ; if ( <S2SV_ModStart>, 0 ) < 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModEnd> strcpy ( line <S2SV_ModStart> ) ) ; if ( <S2SV_ModStart>, 0 ) < 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModEnd> strcpy ( line <S2SV_ModStart> ) ) ; if ( <S2SV_ModStart>, 0 ) < 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModEnd> strcpy ( line <S2SV_ModStart> ) ) ; if ( <S2SV_ModStart>, 0 ) < 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModEnd> strcpy ( line <S2SV_ModStart> ) ) ; if ( <S2SV_ModStart>, 0 ) < 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModEnd> strcpy ( line <S2SV_ModStart> ) ) ; if ( <S2SV_ModStart>, 0 ) < 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModEnd> strcpy ( line <S2SV_ModStart> ) ) ; if ( <S2SV_ModStart>, 0 ) < 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModEnd> strcpy ( line <S2SV_ModStart> ) ) ; if ( <S2SV_ModStart>, 0 ) < 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModEnd> strcpy ( line <S2SV_ModStart> ) ) ; if (",0
420,"<S2SV_ModStart> remainder, & rlen ) ; if ( ret ) return ret ; if (! check_atype_tag ( a, & t ) ) return ASN1_BAD_ID ; if ( decode_atype_to_ptr ( & t, contents, clen, a, retrep ) ; return ASN1_OK <S2SV_ModEnd> ; } <S2SV_null>",0
421,"<S2SV_ModStart> * slavename ; user = find_user ( curconn -> username ) ; if ( user == NULL ) { md5_state_t state ; # if defined ( __linux__ ) && defined ( _POSIX_MEMLOCK_RANGE ) mlock ( md5data, sizeof ( md5data ) ) ; mlock ( md5sum, sizeof ( md5sum ) ) ; if ( user -> password!= NULL ) { mlock ( user -> password, strlen ( user -> password ) ) ; } # endif md5data [ 0 ] = 0 ; strncpy ( md5data + 1, user -> password, 82 ) ; memcpy ( md5data + 1 + strlen ( user -> password ), curconn -> pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( user -> password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; md5sum [ 0 ] = 0 ; init_packet ( & pdata, MT_PTYPE_DATA, pk",0
422,"<S2SV_ModStart> ; if ( _PyUnicodeCompareWithASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart> { if ( _PyUnicodeCompareWithASCIIString <S2SV_ModEnd> ( name,",0
423,<S2SV_ModStart> off } ; if (! str ) { return - 1 ; },0
424,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
425,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
426,"<S2SV_ModStart> size_t s ; s = exif_get_long ( o, EXIF_BYTE_ORDER_INTEL ) ; if ( s > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } <S2SV_ModStart> ; if ( s > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } if ( <S2SV_ModStart> ; if ( s > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } if ( <S2SV_ModStart> ; if ( s > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } if (",0
427,<S2SV_ModStart> bd_addr ) { int ret ; <S2SV_ModStart> return BT_STATUS_NOT_READY ; ret = <S2SV_ModEnd> btif_dm_remove_bond ( bd_addr <S2SV_ModStart> bd_addr ) ; return ret ;,0
428,"<S2SV_ModStart> int i ; size_t avail ; size_t <S2SV_ModEnd> expect ; txid <S2SV_ModStart> 4 ) ; expect = 8 + 8 + nxip * 8 ; if ( nxip < 0 || nxip > avail || expect > avail ) goto bad_format ; xmin = pq_getmsgint64 ( buf ) ; xmax = pq_getmsgint64 ( buf ) ; if ( xmin == 0 || xmin > xmax || xmax > MAX_TXID ) goto bad_format ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; snap -> nxip = nxip ; SET_VARSIZE ( snap, TXID_SNAPSHOT_SIZE ( nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last || cur < xmin || cur >= xmax ) goto bad_format ; snap -> xip [ i ] = cur ; last = cur ; } PG_RETURN_POINTER ( snap ) ; bad_format : elog ( ERROR, ""invalid <S2SV_blank> snapshot <S2SV_blank> data"" ) ; return ( Datum ) NULL <S2SV_ModEnd> ; } <S2SV_null>",0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
430,<S2SV_ModStart> ( epoll_ ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
431,"<S2SV_ModStart> ( CMD_INITIALIZE, & new_global_options. option <S2SV_ModEnd>, NULL ) <S2SV_ModStart> ( CMD_INITIALIZE, & new_service_options. option <S2SV_ModEnd>, NULL )",0
432,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_PHNUM_MIN : * ( size_t * ) val = ms -> elf_phnum_min ; return 0 ; case MAGIC_PARAM_ELF_SHNUM_MIN : * ( size_t * ) val = ms -> elf_shnum_min ; return 0 ;,0
433,<S2SV_ModStart> offset ) { struct file * file = page_file_mapping ( page ) ; <S2SV_ModStart> = EXT4_JOURNAL ( file <S2SV_ModEnd> -> mapping ->,0
434,"<S2SV_ModStart> i + 1 ) ; if (! trak ) continue ; GF_SAFEALLOC ( writer, TrackWriter ) ; if (! writer ) goto exit ; writer -> sampleNumber = 1 ; writer -> mdia = trak -> Media ; writer -> stbl = trak -> Media -> information -> sampleTable ; writer -> timeScale = trak -> Media -> mediaHeader -> timeScale ; writer -> all_dref_mode = Media_SelfContainedType ( writer -> mdia ) ; if ( trak -> sample_encryption ) writer -> prevent_dispatch = GF_TRUE ; writer -> isDone = 0 ; writer -> DTSprev = 0 ; writer -> chunkDur = 0 ; writer -> chunkSize = 0 ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STSC ) ; if (! writer -> stsc ) return GF_OUT_OF_MEM ; if ( writer -> stsc -> ChunkOffset -> type == GF_ISOM_BOX_TYPE_STSC ) return GF_OUT_OF_MEM ; if ( writer -> stsc -> ChunkOffset",0
435,"<S2SV_ModStart> 17 ] ; size_t <S2SV_ModEnd> plen ; md5_state_t <S2SV_ModStart> = 0 ; strlcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> password, 82, sizeof ( md5data ) <S2SV_ModStart> = '\\0' ; strlcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> password ), pass_salt, sizeof ( md5sum ) <S2SV_ModEnd> ) ; md5_init",0
436,<S2SV_ModStart> ; if ( _mibkeys ) { int i ; for ( i = 0 ; i < _mibkeys [ 0 ] ; ++ i ) SNMP_FREE ( _mibkeys [ i ] ) ; _mibkeys [ 0 ] = 0 ; _mibkeys [ 1 ] = 0 ; _mibkeys [ 2 ] = 0 ; _mibkeys [ 3 ] = 0 ; _mibkeys [ 4 ] = 0 ; _mibkeys [ 5 ] = 0 ; _mibkeys [ 6 ] = 0 ; _mibkeys [ 7 ] = 0 ; _mibkeys [ 8 ] = 0 ; _mibkeys [ 9 ] = 0 ; _mibkeys [ 10 ] = 0 ; _mibkeys [ 11 ] = 0 ; _mibkeys [ 12 ] = 0 ; _mibkeys [ 13 ] = 0 ; _mibkeys [ 14 ] = 0 ; _mibkeys [ 15 ] = 0 ; _mibkeys [ 15 ] = 0 ; _mibkeys [ 15 ] = 0 ; _mibkeys [ 15 ] = 0 ; _m,0
437,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
438,<S2SV_ModStart> ( ) ; g_hash_table_remove_all ( headers ) ;,0
439,"<S2SV_ModStart> -> y_buffer ; # if CONFIG_VP9_HIGHBITDEPTH if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { for ( row = 0 ; row < src_ybc -> y_height ; ++ row ) { memcpy ( dst, src, src_ybc -> y_width ) ; src += src_ybc -> y_stride ; dst += dst_ybc -> y_stride ; } # else <S2SV_ModStart> y_width ) ; # endif <S2SV_ModStart> y_stride ; } # if CONFIG_VP9_HIGHBITDEPTH if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { for ( row = 0 ; row < src_ybc -> y_height ; ++ row ) { memcpy ( dst, src, src_ybc -> y_width ) ; src += src_ybc -> y_stride ; dst += dst_ybc -> y_stride ; } } # else for ( row = 0 ; row < src_ybc -> y_height ; ++ row ) { memcpy ( dst, src, src_ybc -> y_width ) ; dst += src_ybc",0
440,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_rd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> mi_col += MI_BLOCK_SIZE, 0 <S2SV_ModStart> ) { int <S2SV_ModEnd> i ; MACROBLOCK <S2SV_ModStart> adaptive_pred_interp_filter ) { <S2SV_ModEnd> if ( ( <S2SV_ModStart> ; if ( <S2SV_ModEnd> sf -> partition_search_type <S2SV_ModStart> == SEARCH_PARTITION && <S2SV_ModEnd> sf -> use_lastframe_partitioning <S2SV_ModStart> == FIXED_PARTITION ) { int dummy_rate ; int64_t dummy_dist ; BLOCK_SIZE i ; for ( i = BLOCK_4X4 ; i < BLOCK_8X8 ; ++ i ) { const int num_4x4_w = num_4x4_blocks_wide_lookup [ i ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ i ] ; for ( x -> sb_index = 0 ; x -> sb_index < 4 ; ++ x -> sb_index ) for ( x -> b_index = 0 ; x ->",0
441,"<S2SV_ModStart>, obj_tlen ; u_int offset ; u_int link_type ; union { float f ; uint32_t i ; } bw ; tptr = pptr ; lmp_obj_header = ( const struct lmp_object_header * ) lmp_obj_header ; ND_TCHECK ( * lmp_obj_header ) ; if ( len < sizeof ( struct lmp_common_header ) ) { ND_PRINT ( ( ndo, ""LMP <S2SV_blank> packet <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } ND_TCHECK ( * lmp_obj_header ) ; tlen = EXTRACT_16BITS ( lmp_com_header -> length ) ; ND_PRINT ( ( ndo, ""\\n\\tLMPv%u, <S2SV_blank> msg-type: <S2SV_blank> %s, <S2SV_blank> Flags: <S2SV_blank> [%s], <S2SV_blank> length: <S2SV_blank> %u"", LMP_EXTRACT_VERSION ( lmp_com_header -> version_res [ 0 ] ), tok2str ( lmp_msg_type_values, ""unknown, <S2SV_blank> type: <S2SV_blank> %u"", lmp_obj_ctype, lmp_obj",0
442,"<S2SV_ModStart> mbmi, const MV <S2SV_ModEnd> mvs [ 2 <S2SV_ModStart> * ref = <S2SV_ModEnd> mbmi -> ref_mvs",0
443,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ),",0
444,"<S2SV_ModStart> ; if ( skb_out -> len < size ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; } skb_pull_rcsum ( skb_out, hdr_size ) ; memmove ( skb_out -> data - ETH_HLEN, skb_mac_header ( skb_out ), ETH_HLEN ) ; skb_set_mac_header ( skb_out, - ETH_HLEN ) ; skb_reset_network_header ( skb_out ) ; skb_reset_transport_header ( skb_out ) ; hlist_for_each_entry ( entry, chain, list ) { size = entry -> skb -> len - hdr_size ; memcpy ( skb_put ( skb_out, size ), entry -> skb -> data + hdr_size, size ) ; } free : batadv_frag_clear_chain ( chain ) ; return skb_out <S2SV_ModEnd> ; } <S2SV_null>",0
445,<S2SV_ModStart> ) return ; if (! <S2SV_ModStart> netsnmp_mibindex_load ( ) ) { SNMP_FREE ( env_var ) ; return ; } <S2SV_ModEnd> DEBUGMSGTL ( (,0
446,"<S2SV_ModStart> { fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ], O_RDWR ) <S2SV_ModStart> 1 ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_KEY ) ) <S2SV_ModStart> EV_REL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_SYN ) ) <S2SV_ModStart> x ++ ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> ]. mapped_id )",0
447,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
448,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s, <S2SV_ModStart> & 1 ) vpx_lpf_vertical_4 <S2SV_ModEnd> ( s +",0
449,<S2SV_ModStart> krb5_error_code iakerb_alloc_context ( krb5_secure_ctx_id_t <S2SV_ModEnd> * pctx ) <S2SV_ModStart> pctx ) { krb5_secure_ctx_id_t <S2SV_ModEnd> ctx ; krb5_error_code <S2SV_ModStart> ; code = krb5_secure_gss_init_context <S2SV_ModEnd> ( & ctx,0
450,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> bitmapDC = CreateCompatibleDC",1
451,<S2SV_ModStart> ; while ( ( <S2SV_ModStart> )!= START_CODE_PREFIX ) && ( ps_stream -> u4_offset < ps_stream -> u4_max_offset ),1
452,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { ret = <S2SV_ModEnd> - EINVAL ; <S2SV_ModStart> - EINVAL ; goto out ; }",1
453,<S2SV_ModStart> ) ; } mono_assert_not_reached <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ) ; } mono_assert_not_reached <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ) ; } mono_assert_not_reached <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ) ; } mono_assert_not_reached <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ) ; } mono_assert_not_reached <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ) ; } mono_assert_not_reached <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ) ; } mono_assert_not_reached <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ) ; } mono_assert_not_reached <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ) ; } mono_assert_not_reached <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ) ; } mono_assert_not_reached <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ) ; } mono_assert_not_reached <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ) ; } mono_assert_not_reached <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ) ; } mono_assert_not_reached <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ) ; } mono_assert_not_reached <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ) ; } mono_assert_not_reached <S2SV_ModEnd> ( ),0
454,<S2SV_ModStart> ) ] ; long <S2SV_ModEnd> tmp ; if <S2SV_ModStart> count ) ) { uml_exitcode = tmp ; return count ; } <S2SV_ModEnd> tmp = simple_strtol,0
455,"<S2SV_ModStart> is_path ) { <S2SV_ModEnd> do { if <S2SV_ModStart> size_t len ; char * last_elem, * wp ; last_elem = wp = result ; <S2SV_ModStart> if ( ( name [ 1 ] == '{' && ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 9 )!= 0 ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( len = 11 )!= 0 ) ) ) { repl = ( ( len == 7 || name [ 2 ] == 'O' )? ( __libc_enable_secure? NULL : l -> l_origin ) : _dl_platform ) ; if ( repl!= NULL && repl!= ( const char * ) - 1 ) { wp = __stpcpy ( wp, repl ) ; name += len ; } else { wp = last_elem ; name += len ; while ( * name!= '\\0' && (! is_path || * name!= ':' ) ) ++ name ; } } else { wp = last_elem ; name += len ; while ( * name!= '\\0' && (! is_path || * name!= ':' ) )",0
456,"<S2SV_ModStart> ) ; } # ifdef H264DEC_TRACE sprintf ( decInst -> str, ""H264SwDecInit# <S2SV_blank> decInst <S2SV_blank> %p <S2SV_blank> noOutputReordering <S2SV_blank> %d"", ( void * ) decInst, noOutputReordering ) ; DEC_API_TRC ( decInst -> str ) ; # endif <S2SV_ModStart> ) H264SwDecMalloc ( sizeof ( decContainer_t ) ) ; if ( pDecCont == NULL ) { DEC_API_TRC ( ""H264SwDecInit# <S2SV_blank> ERROR: <S2SV_blank> Memory <S2SV_blank> allocation <S2SV_blank> failed"" ) ; return ( H264SWDEC_MEMFAIL ) ; } rv = h264bsdInit ( & pDecInst -> storage, noOutputReordering ) ; if ( rv!= HANTRO_OK ) { H264SwDecRelease ( pDecCont ) ; return ( H264SWDEC_MEMFAIL ) ; } pDecCont -> decStat = INITIALIZED ; pDecCont -> picNumber = 0 ; # ifdef H264DEC_TRACE sprintf ( pDecCont -> str, ""H264SwDecInit# <S2SV_blank> OK: <S2SV_blank> return <S2SV_blank> %p"", ( void * ) pDec",0
457,"<S2SV_ModStart> drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> srr ) ) { struct in_device * in_dev = __in_dev_get_rcu ( dev ) ; if ( in_dev &&! IN_DEV_SOURCE_ROUTE ( in_dev ) ) goto drop ; if ( ip_options_rcv_srr ( skb ) ) goto drop ; } return 0 ; inhdr_error : IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INHDRERRORS ) ; <S2SV_ModEnd> return 0 ; <S2SV_ModStart> 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
458,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
459,<S2SV_ModStart> errout ; return 1 <S2SV_ModEnd> ; } <S2SV_null>,0
460,<S2SV_ModStart> krb5_key_data * key_data = NULL <S2SV_ModStart> == NULL ) { k5free ( key_data ) ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { k5free ( key_data ) ; <S2SV_ModStart> goto cleanup ; },0
461,"<S2SV_ModStart> Py_ssize_t idx, __attribute__ ( ( unused ) ) <S2SV_ModStart> PyObject * value, __attribute__ ( ( unused ) ) Py_ssize_t old_idx <S2SV_ModStart> ) ; } if ( old_idx >= self -> memo_len ) { if ( _Unpickler_ResizeMemoList ( self, old_idx * 2 ) < 0 ) return - 1 ; assert ( old_idx < self -> memo_len ) ; } Py_INCREF ( value ) ; old_item = self -> memo [ idx ] ; self -> memo [ idx ] = value ; if ( old_item!= NULL ) { Py_DECREF ( old_item ) ; } else { self -> memo_len ++ ; } return 0 <S2SV_ModEnd> ; } <S2SV_null>",0
462,<S2SV_ModStart> ] ) ; if ( nByte < 0 ) { rc = SQLITE_NOMEM ; } else { <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> memcpy ( pCsr,0
463,<S2SV_ModStart> filp ) { struct socket_info * si = <S2SV_ModEnd> SOCKET_I ( inode <S2SV_ModStart> ( inode ) ; mutex_lock ( & si -> i_mmap_mutex ) ; list_del_init ( & si -> i_mmap_entry ) ; mutex_unlock ( & si -> i_mmap_mutex,0
464,"<S2SV_ModStart> * orelse, string type_comment, <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. type_comment = type_comment",0
465,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> my_bool <S2SV_ModEnd> mi_sort_index ( MI_CHECK <S2SV_ModStart> char * name, my_off_t * index_pos ) { reg2 uint key ; reg1 MI_KEYDEF * keyinfo ; File new_file ; my_off_t r_locks, w_locks ; MYISAM_SHARE * share = info -> s ; MI_STATE_INFO old_state ; DBUG_ENTER ( ""mi_sort_index"" ) ; for ( key = 0, keyinfo = & share -> keyinfo [ 0 ] ; key < share -> base. keys ; key ++, keyinfo ++ ) if ( keyinfo -> key_alg == HA_KEY_ALG_RTREE ) DBUG_RETURN ( 0 ) ; fn_format ( param -> temp_filename, name, """", MI_NAME_IEXT, 2 + 4 + 32 ) ; fn_format ( param -> temp_filename, param -> temp_filename, """", INDEX_TMP_EXT, 2 + 4 ) ; if ( ( new_file = mysql_file_create ( mi_",0
466,"<S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NG",0
467,"<S2SV_ModStart> UINT error ; if (! <S2SV_ModStart>, eventId ) ||! <S2SV_ModEnd> Stream_Read_UINT32 ( s <S2SV_ModStart>, pduLength ) ) { return CHANNEL_RC_INVALID_DATA ; } <S2SV_ModEnd> # ifdef WITH_DEBUG_RDPEI",0
468,"<S2SV_ModStart> ) ; } if ( pData -> socket == INVALID_SOCKET ) { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"", pData -> description, zmq_strerror ( errno ) ) ; ABORT_FINALIZE ( RS_RET_NO_ERRCODE ) ; }",0
469,"<S2SV_ModStart> struct flowi6 fl6 ; if ( transport -> param_flags & SPP_PMTUD_ENABLE ) skb -> local_df = 1 <S2SV_ModStart> daddr ) ; <S2SV_ModEnd> return ip6_xmit ( <S2SV_ModStart>, skb, <S2SV_ModEnd> fl6, np",0
470,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
471,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
472,"<S2SV_ModStart> = 0 ; bn_t t ; bn_null ( t ) ; RLC_TRY { bn_new ( t ) ; bn_zero ( m ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, RSA_PUB ) ; * p_len = k_len - 3 - m_len ; for ( int i = 0 ; i < * p_len ; i ++ ) { bn_lsh ( m, m, 8 ) ; do { rand_bytes ( & pad, 1 ) ; bn_add_dig ( m, m, pad ) ; } bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, 0 ) ; bn_lsh ( m, m, m_len * 8 ) ; } bn_lsh ( m, m, m_len * 8 ) ; break ; case RSA_DEC : m_len = k_len - 1 ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; if ( pad!= RSA_PUB ) { result = RLC_",0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,<S2SV_ModStart> 8 ) ; <S2SV_ModEnd> psf = calloc <S2SV_ModStart> SF_PRIVATE ) ) ; if ( psf <S2SV_ModEnd> == NULL ),0
475,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fix_interp_filter ( VP9_COMMON <S2SV_ModStart> cm ) { int count [ SWITCHABLE_FILTERS ] ; int i, j, c = 0 ; for ( i = 0 ; i < SWITCHABLE_FILTERS ; ++ i ) { count [ i ] = 0 ; for ( j = 0 ; j < SWITCHABLE_FILTER_CONTEXTS ; ++ j ) count [ i ] += cm -> counts. switchable_interp [ j ] [ i ] ; c += ( count [ i ] > 0 ) ; } if ( c == 1 ) { for ( i = 0 ; i < SWITCHABLE_FILTERS ; ++ i ) { if ( count [ i ] ) { cm -> interp_filter = i ; break ; } } } } } if ( c == 1 ) { for ( i = 0 ; i < SWITCHABLE_FILTERS ; ++ i ) { if ( count [ i ] ) { cm -> interp_filter = i ; break ; } } } } return c ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
476,"<S2SV_ModStart> & cpi -> encode_frame <S2SV_ModEnd> ; VP9_COMMON * <S2SV_ModStart> mi_cols ) ; <S2SV_ModEnd> vp9_setup_src_planes ( x <S2SV_ModStart> ( x, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vpx_setup_pre_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vpx_setup_dst_planes ( xd, get_frame_new_buffer ( cm ), 0, 0 ) ; vpx_setup_block_planes ( & x -> e_mbd, cm -> subsampling_x, cm -> subsampling_y ) ; xd -> mi [ 0 ] -> mbmi. mode = DC_PRED ; xd -> mi [ 0 ] -> mbmi. uv_mode = DC_PRED ; vpx_memset ( xd -> above_context [ 0 ], 0, sizeof ( * xd -> above_context [ 0 ] ) * 2 * aligned_mi_cols * MAX_MB_PLANE ) ; vpx_memset ( xd -> above_seg",0
477,"<S2SV_ModStart> hp ) ; if (! <S2SV_ModEnd> htc_request_check_host_hdr ( hp <S2SV_ModStart> ( hp ) <S2SV_ModEnd> ) { WSPR <S2SV_ModStart>, SLT_Error, ""Duplicated <S2SV_blank> Host <S2SV_blank> header\\n"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> ) ; } retval = htc_request_check_url_hdr ( hp ) ; if ( retval!= 0 ) { WSP ( sp, SLT_Error, ""Duplicated <S2SV_blank> URL <S2SV_blank> header\\n"" ) ; return ( retval ) ; }",0
478,"<S2SV_ModStart> EOFOp 0x07 char * magick ; Image * image ; IndexPacket index ; int opcode, operand, status ; MagickStatusType flags ; MagickSizeType number_pixels ; MemoryInfo * pixel_info ; IndexPacket index ; int opcode, operand, status ; MagickSizeType flags ; MagickSizeType number_pixels ; MemoryInfo * pixel_info ; int number_colormaps, number_planes_filled, one, pixel_info_length ; ssize_t count, offset, y ; unsigned char background_color [ 256 ], * colormap, plane, * pixels ; assert ( image_info -> debug!= MagickFalse ) ( void ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image_info -> filename ) ; assert ( exception -> signature == MagickSignature ) ; status = OpenBlob ( image, image, ReadBinaryBlobMode, exception ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; count = ReadBlob ( image, 2, ( unsigned char * ) magick ) ; if ( ( count!= 2 ) || ( memcmp ( <S2SV_ModEnd> magick, ""\\122\\3",0
479,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> sizeof ( tETH_HDR ),1
480,<S2SV_ModStart> ; ps_dec -> ps_cur_slice = NULL ; ps_dec ->,0
481,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> * karg ; <S2SV_ModEnd> struct pci_dev * <S2SV_ModStart> pci_dev * pdev <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> karg ) ; } if ( mpt_verify_adapter ( karg -> hdr. iocnum, & ioc ) < 0 ) { printk ( KERN_DEBUG MYNAM ""%s::mptctl_getiocinfo() <S2SV_blank> - <S2SV_blank> ioc%d <S2SV_blank> not <S2SV_blank> found!\\n"", __FILE__, __LINE__, iocnum ) ; kfree ( karg ) ; return - ENODEV ; } if ( karg -> hdr. maxDataSize!= data_size ) { printk ( MYIOC_s_ERR_FMT ""%s@%d::mptctl_getiocinfo <S2SV_blank> - <S2SV_blank> "" ""Structure <S2SV_blank> size <S2SV_blank> mismatch!\\n"", __FILE__, __LINE__ ) ; kfree ( karg ) ; return - ENODEV ; } if ( karg -> hdr. maxDataSize!= data_size ) { printk ( MYIOC_s_ERR_FMT ""%s@%d::",0
482,"<S2SV_ModStart> ; pixels = AcquireQuantumMemory ( image -> columns, 3 * sizeof ( * pixels ) ) ; if ( pixels == ( unsigned char * ) NULL ) ThrowReaderException ( ResourceLimitError, ""MemoryAllocationFailed"" ) ; length = ( size_t ) ( 3 * image -> columns ) ; for ( y = 0 ; y < ( ssize_t ) image -> rows ; y ++ ) { count = ReadBlob ( image, length, pixels ) ; if ( ( size_t ) count!= length ) ThrowReaderException ( CorruptImageError, ""UnableToReadImageData"" ) ; p = pixels ; q = QueueAuthenticPixels ( image, 0, y, image -> columns, 1, exception ) ; if ( q == ( PixelPacket * ) NULL ) break ; SetPixelRed ( q, ScaleCharToQuantum ( 4 * * p ++ ) ) ; SetPixelGreen ( q, ScaleCharToQuantum ( 4 * * p ++ ) ) ; SetPixelBlue ( q, ScaleCharToQuantum ( 4 * * p ++ ) ) ; q ++ ; } if ( SyncAuthenticPixels ( image, 0, y, image -> columns, 1, exception ) == MagickFalse )",0
483,"<S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %.*s"", l <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %.*s"", l <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %.*s"", l <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %.*s"", l <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %.*s"", l <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %.*s"", l <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %.*s"", l <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %.*s"", l <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %.*s"", l <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %.*s"", l <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %.*s"", l <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank>",0
484,"<S2SV_ModStart> ; if ( datao + 8 > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> order = EXIF_BYTE_ORDER_INTEL ; datao += exif_get_long ( buf + datao + 8, EXIF_BYTE_ORDER_INTEL ) ; if ( <S2SV_ModStart> ; if ( datao > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } c = exif_get_short ( buf + datao, EXIF_BYTE_ORDER_INTEL ) ; datao += 2 ; exif_mnote_data_fuji_clear ( n ) ; n -> entries = exif_mem_alloc ( en -> mem, sizeof ( MnoteFujiEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( en -> log, ""Exif",0
485,"<S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> %s\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> %s\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> %s\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> %s\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> %s\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> %s\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> %s\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> %s\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> file <S2SV_blank> %s <S2SV_blank>",0
486,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> opt = service_options <S2SV_ModStart> service_options. next <S2SV_ModEnd> ; while ( <S2SV_ModStart> 0 ; } <S2SV_ModEnd> s_log ( LOG_DEBUG <S2SV_ModStart> servname ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
487,<S2SV_ModStart> void ) { if (! recovery_started ) { recovery_started = 1 ; return ; },0
488,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ;",0
489,"<S2SV_ModStart> image ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
490,"<S2SV_ModStart> { WORD32 i <S2SV_ModEnd> ; WORD32 num_neg_pics <S2SV_ModStart> u4_num_lt_curr, u4_num_total_curr <S2SV_ModEnd> ; WORD8 ai1_curr_delta_poc_msb_present_flag <S2SV_ModStart> u4_num_st_curr_after, u4_num_lt_curr <S2SV_ModEnd> ; ai1_curr_delta_poc_msb_present_flag [ <S2SV_ModStart> u4_num_lt_curr, u4_num_lt_curr <S2SV_ModEnd> ; st_rps_idx = <S2SV_ModStart> u4_num_st_curr_after, u4_num_lt_curr <S2SV_ModEnd> ; st_rps_idx = <S2SV_ModStart> u4_num_lt_curr, u4_num_lt_curr <S2SV_ModEnd> ; st_rps_idx = <S2SV_ModStart> u4_num_lt_curr, u4_num_lt_curr <S2SV_ModEnd> ; st_rps_idx = <S2SV_ModStart> u4_num_lt_curr, u4_num_lt_curr <S2SV_ModEnd> ; st_rps_idx = <S2SV_ModStart> u4_num_lt_curr, u4_num_lt_curr <S2SV_ModEnd> ; st_rps_",0
491,"<S2SV_ModStart> int depth, bool <S2SV_ModEnd> fmt ) { <S2SV_ModStart> child ) { if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( names = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) { cJSON_free ( entries ) ; return 0 ; } memset ( names, 0, sizeof ( char * ) * numentries ) ; child = item -> child ; ++ depth ; if ( fmt ) len += depth ; while ( child ) { if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) { cJSON_free ( entries ) ; return 0 ; } memset ( names, 0, sizeof ( char * ) * numentries ) ; child = child -> next ; } if (! fail ) { out = ( char * ) cJSON_malloc ( len ) ; if (! out ) fail = 1 ; } if ( fail ) { for ( i = 0 ; i < numentries ; ++ i ) { if ( names [ i ] ) cJSON_free ( names [",0
492,"<S2SV_ModStart> sk ) ; if ( writable ) { unix_state_lock ( sk ) ; other = unix_peer ( sk ) ; if ( other && unix_peer ( other )!= sk ) { sock_poll_wait ( file, & unix_sk ( other ) -> peer_wait, wait ) ; if ( unix_recvq_full ( other ) ) writable = 0 ; } unix_state_unlock ( sk ) ; } if ( writable ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; <S2SV_ModStart> { if ( <S2SV_ModEnd> unix_peer ( other <S2SV_ModStart> ( other ) <S2SV_ModEnd> ) writable = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> sock_put ( other",0
493,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; outpos += strlen ( outputbuffer ) ;",0
494,<S2SV_ModStart> * minor_status = GSS_S_DEFECTIVE_TOKEN ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len ) { * minor_status = GSS_S_DEFECTIVE_TOKEN ; return GSS_S_DEFECTIVE_TOKEN ; } ptr = ( unsigned char * ) header -> buffer. value + token_wrapper_len ; signalg = ptr [ 0 ] ; signalg |= ptr [ 1 ] << 8 ; sealalg = ptr [ 2 ] ; sealalg |= ptr [ 3 ] << 8 ; if ( ptr [ 4 ]!= 0xFF || ptr [ 5 ]!= 0xFF ) { * minor_status = GSS_S_DEFECTIVE_TOKEN ; return GSS_S_DEFECTIVE_TOKEN ; } if ( toktype!= KG_TOK_WRAP_MSG && ptr [ 4 ]!= 0xFF ) { * minor_status = GSS_S_DEFECTIVE_TOKEN ; return GSS_S_DEFECTIVE_TOKEN ; } if ( toktype!= KG_TOK_WRAP_MSG && ptr [ 4 ]!= 0xFF ) { * minor_status = GSS_S,0
495,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vp9_ref_frame_t * ) ; YV12_BUFFER_CONFIG * fb <S2SV_ModStart> NULL ) { <S2SV_ModEnd> vp9_get_reference_enc ( ctx",0
496,<S2SV_ModStart> plug ) ; <S2SV_ModEnd> put_ioctx ( ctx,0
497,"<S2SV_ModStart> * name, my_bool <S2SV_ModEnd> rep_quick ) { <S2SV_ModStart> ) ) || init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> read_buffer_length, WRITE_CACHE, share -> pack. header_length, 1, MYF ( MY_WME ) ) ||",0
498,"<S2SV_ModStart> s } ; uECC_word_t carry ; wordcount_t num_words = curve -> num_words ; wordcount_t num_n_words = BITS_TO_WORDS ( curve -> num_n_bits ) ; bitcount_t num_n_bits = curve -> num_n_bits ; if ( uECC_vli_isZero ( k, num_words ) || uECC_vli_cmp ( curve -> n, k, num_n_words )!= 1 ) { return 0 ; } carry = regularize_k ( k, tmp, s, curve ) ; EccPoint_mult ( p, curve -> G, k2 [! carry ], 0, num_n_bits + 1, curve ) ; if ( uECC_vli_isZero ( p, num_words ) ) { return 0 ; } if (! g_rng_function ) { uECC_vli_clear ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! uECC_generate_random_int ( tmp, curve -> n, num_n_words )",0
499,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|dao-truncated]"" <S2SV_ModEnd> ) ) ;",0
500,<S2SV_ModStart> buf ; } <S2SV_ModEnd> uint32_t new_free_total = <S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
501,"<S2SV_ModStart> tp ; { if ( * cp == '\\\\' && cp [ 1 ] && index ( ""mM"", cp [ 1 ] ) && cp [ 2 ] ) { meta = 1 ; cp += 2 ; } if ( * cp == '\\\\' && cp [ 1 ] && index ( ""0123456789xXoO"", cp [ 1 ] ) && cp [ 2 ] ) { NEARDATA const char hex [ ] = ""00112233445566778899aAbBcCdDeEfF"" ; const char * dp ; int dcount = 0 ; if ( * cp == 'x' || * cp == 'X' ) for ( ++ cp ; * cp && ( dp = index ( hex, * cp ) ) && ( dcount ++ < 2 ) ; cp ++ ) cval = ( cval * 16 ) + ( ( int ) ( dp - hex ) / 2 ) ; else if ( * cp == 'o' || * cp == 'O' ) for ( ++ cp ; * cp && ( index ( ""01234567"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 8 ) + ( * cp - '0",0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
503,"<S2SV_ModStart>, * pixg <S2SV_ModEnd> ; PIXCMAP * <S2SV_ModStart> == NULL ) { pixDestroy ( & pixc ) ; <S2SV_ModStart> NULL ) ; }",0
504,<S2SV_ModStart>. vf = vpx_mse16x16 <S2SV_ModEnd> ; xd ->,1
505,"<S2SV_ModStart> data ; int size = overhead ; if ( mongo_validate_ns ( conn, ns )!= MONGO_OK ) return MONGO_ERROR ; for ( i = 0 ; i < count ; i ++ ) { size += bson_size ( bsons [ i ] ) ; if ( mongo_bson_valid ( conn, bsons [ i ], 1 )!= MONGO_OK ) return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } mm = mongo_message_create ( size, 0, 0, MONGO_OP_INSERT ) ; data = & mm -> data ; if ( flags & MONGO_CONTINUE_ON_ERROR ) data = mongo_data_append32 ( data, & ONE ) ; else data = mongo_data_append32 ( data, & ZERO ) ; for ( i = 0 ; i < count ; i ++ ) { data = mongo_data_append ( data, bsons [ i ] -> data, bson_size ( bsons [ i",0
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NEGO_STATE_FAIL ; goto error <S2SV_ModEnd> ; } Stream_Read_UINT8 <S2SV_ModStart> = NEGO_STATE_FINAL ; return ; error : return ;,0
507,"<S2SV_ModStart> i, target_bits_per_mb <S2SV_ModEnd> ; target_bits_per_mb = <S2SV_ModStart> int bits_per_mb_at_this_q = <S2SV_ModEnd> vp9_rc_bits_per_mb ( cm <S2SV_ModStart> i, correction_factor <S2SV_ModEnd> ; if (",0
508,<S2SV_ModStart> ; value |= TJA1101_CONFIG1_MII_MODE_RMII_50MHZ <S2SV_ModEnd> ; tja1101WritePhyReg (,0
509,"<S2SV_ModStart> return NULL ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) { i ++ ; } if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) { i ++ ; } if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) { i ++ ; } if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) { i ++ ; } if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) { i ++ ; } if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) { i ++ ; } if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) { i ++ ; } if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) { i ++ ; } if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) { i ++",0
510,"<S2SV_ModStart> int dst_stride, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart> int i ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> uint8_t, left_col <S2SV_ModEnd> ) ; DECLARE_ALIGNED <S2SV_ModStart> plane ] ; <S2SV_ModEnd> if ( plane <S2SV_ModStart> + y ; memset <S2SV_ModEnd> ( left_col, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( right_col, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( right_col, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; mem",0
511,"<S2SV_ModStart> ++ ; } else if ( pattern [ end ] == \'""\' ) { end ++ ; while ( ( pattern [ end ]!= 0 ) && ( pattern [ end ]!= \'""\' ) ) end ++ ; }",0
512,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_completed_io_lock ) ;,1
513,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> show_frame ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> KEY_FRAME ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; } vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
514,"<S2SV_ModStart> }, { ""no-graph"", no_argument, 0, 'M' }, { <S2SV_ModStart> }, { ""no-graph"", no_argument, 0, 'M' }, { <S2SV_ModStart> }, { ""no-graph"" <S2SV_ModEnd>, no_argument, <S2SV_ModStart> }, { ""no-graph"" <S2SV_ModEnd>, no_argument, <S2SV_ModStart> }, { ""no-graph"" <S2SV_ModEnd>, no_argument, <S2SV_ModStart> }, { ""only-graph"" <S2SV_ModEnd>, no_argument, <S2SV_ModStart> }, { ""only-graph"" <S2SV_ModEnd>, no_argument, <S2SV_ModStart> }, { ""only-graph"" <S2SV_ModEnd>, no_argument, <S2SV_ModStart> }, { ""only-graph"" <S2SV_ModEnd>, no_argument, <S2SV_ModStart> }, { ""only-graph"" <S2SV_ModEnd>, no_argument, <S2SV_ModStart> }, { ""only-graph-min"" <S2SV_ModEnd>, no_argument, <S2SV_ModStart> }, { ""only-graph-max"" <S2SV_ModEnd>, no_argument, <S2SV_ModStart> }, { ""only-graph-min"" <S2SV_ModEnd>, no_argument, <S2SV_ModStart> }, { ""only-graph-max"" <S2SV_ModEnd>, no_argument, <S2SV_ModStart> }, { ""only-graph"" <S2SV_ModEnd>, no_argument, <S2SV_ModStart> }, { ""only-",0
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { q = osStrchr <S2SV_ModEnd> ( p +,1
516,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
517,<S2SV_ModStart> KEY_FRAME ) { memcpy <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd ->,1
518,"<S2SV_ModStart> error_t error ; int16_t <S2SV_ModEnd> n ; uint32_t <S2SV_ModStart> ( interface, ENC624J600_ESTAT <S2SV_ModEnd> ) & ESTAT_PKTCNT <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( n, ENC624J600_MAX_FRAME_SIZE <S2SV_ModEnd> ) ; enc624j600ReadBuffer <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL <S2SV_ModEnd>, ENC624J600_RX_BUFFER_STOP ) <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, ENC624J600_RX_BUFFER_STOP ) <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, ENC624J",0
519,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv <S2SV_ModEnd> ) { xmlSchemaPtr <S2SV_ModStart> xmlSchemaPtr schema ; VALUE rb_schema ; VALUE errors = rb_ary_new ( ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; # ifdef HAVE_XMLSCHEMASETPARSERSTRUCTUREDERRORS xmlSchemaSetParserStructuredErrors ( ctx, Nokogiri_error_array_pusher, ( void * ) errors ) ; # endif schema = xmlSchemaParse ( ctx ) ; xmlSetStructuredErrorFunc ( NULL, NULL ) ; xmlSchemaFreeParserCtxt ( ctx ) ; if ( NULL == schema ) { xmlErrorPtr error = xmlGetLastError ( ) ; if ( error ) Nokogiri_error_raise ( NULL, error ) ; else rb_raise ( rb_eRuntimeError, ""Could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> document"" ) ; return Qnil ; } rb_schema = Data_Wrap_Struct ( klass, 0, dealloc, schema ) ; rb_iv_set ( rb_schema, ""@errors"", errors ) ; <S2SV_ModStart> content ) ) <S2SV_ModEnd> ; return rb_schema",0
520,"<S2SV_ModStart> ; } } if ( strlen ( line_text ) > CONFLINELEN ) { s_log ( LOG_ERR, ""Configuration <S2SV_blank> line <S2SV_blank> too <S2SV_blank> long: <S2SV_blank> %s"", line_text ) ; print_syntax ( ) ; return 1 ; }",0
521,<S2SV_ModStart> 2 ] ; if ( state -> y >= state -> ysize ) return - 1 ; <S2SV_ModStart> 2 ] ; if ( state -> y >= state -> ysize ) return - 1 ;,0
522,<S2SV_ModStart> err = - <S2SV_ModEnd> EALREADY ; if,0
523,<S2SV_ModStart> POLL_IN ) ; <S2SV_ModEnd> perf_event_wakeup ( handle,0
524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> u16 <S2SV_ModEnd> utf8s_to_utf16s ( const <S2SV_ModStart> len, wchar_t <S2SV_ModEnd> pwcs ) { <S2SV_ModStart> = pwcs ; if ( len < 0 ) return - EINVAL ; <S2SV_ModStart> PLANE_SIZE ) { <S2SV_ModEnd> * op ++ <S2SV_ModStart> ) ) ; } else { * op ++ = ( wchar_t ) u ; } s += size ; len -= size ; } else { * op ++ = * s ++ ; len -- ; } } return <S2SV_ModEnd> op - pwcs <S2SV_ModStart> pwcs ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
525,"<S2SV_ModStart> EPROTONOSUPPORT ) { if ( as_console ) { sleep ( 2 ) ; } <S2SV_ModStart> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" <S2SV_ModEnd> ) ; }",0
526,"<S2SV_ModStart> ( interface, KSZ8851_RXFHSR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXMR | KSZ8851_RXFTL | KSZ8851_RXRF | KSZ8851_RXCE <S2SV_ModEnd> ) ) == <S2SV_ModStart> ( interface, KSZ8851_RXFDPR, KSZ8851_RXFDPR_RXFPAI <S2SV_ModEnd> ) ; ksz8851ReadFifo <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ancillary <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_RRXEF <S2SV_ModEnd> ) ; return",0
527,"<S2SV_ModStart> ast_for_funcdef_impl ( struct compiler * compiler, const node * n, asdl_seq * decorator_seq, int is_async ) { identifier name ; arguments_ty args ; asdl_seq * body ; expr_ty returns = NULL ; int name_i = 1 ; node * tc ; string type_comment = NULL ; if ( c -> c_feature_version < 5 ) { ast_error ( c, n, ""Async <S2SV_blank> functions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.5 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } REQ ( n, funcdef ) ; name = NEW_IDENTIFIER ( CHILD ( n, name_i ) ) ; if (! name ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i ), 0 ) ) return NULL ; args = ast_for_arguments ( c, CHILD ( n, name_i + 1 ) ) ; if (! args ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 2 ) ) == TYPE_COMMENT ) { type_comment = NEW_TYPE_COMMENT ( CHILD ( n,",0
528,"<S2SV_ModStart> ( mm, 0xA00000 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( pgd, 0xA00000 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( pud, 0xA00000 <S2SV_ModEnd> ) ; split_huge_page_pmd <S2SV_ModStart>, pmd, 0xA00000 <S2SV_ModEnd>, & ptl <S2SV_ModStart> : flush_tlb ( ) ; mm_dec_nr_pmds ( mm",0
529,"<S2SV_ModStart> packet_len ) ; if ( 0!= message_left ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> message_left <S2SV_blank> overflow!"" ) ; ret_status = - 1 ; } <S2SV_ModStart> packet_len ) ; if ( 0!= message_left ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> message_left <S2SV_blank> overflow!"" ) ; ret_status = - 1 ; } <S2SV_ModStart> token_len ) ; if ( 0!= ptr_check_result ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> packet_data_pptr <S2SV_blank> overflow!"" ) ; ret_status = - 1 ; } <S2SV_ModStart> packet_len ) ; if ( 0!= ptr_check_result ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> packet_data_pptr <S2SV_blank> overflow!"" ) ; ret_status = - 1 ; } <S2SV_ModStart> packet_len ) ; if ( 0!= ptr_check_result ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> packet_data_pptr <S2SV_blank> overflow!"" ) ; ret_",0
530,"<S2SV_ModStart> ) ) { if (! is_valid_test_name ( test_name ) ) { printf ( ""Error: <S2SV_blank> invalid <S2SV_blank> test <S2SV_blank> name.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; } <S2SV_ModStart> ) ) { if (! is_valid_test_name ( test_name ) ) { <S2SV_ModStart> ) ) { if (! is_valid_test_name ( test_name ) ) { <S2SV_ModStart> ) ) { if (! is_valid_test_name ( test_name ) ) { <S2SV_ModStart> ) ) { if (! is_valid_test_name ( test_name ) ) { <S2SV_ModStart> ) ) { if (! is_valid_test_name ( test_name ) ) { <S2SV_ModStart> ) ) { if (! is_valid_test_name ( test_name ) ) { <S2SV_ModStart> ) ) { if (! is_valid_test_name ( test_name ) ) { <S2SV_ModStart> ) ) { if (! is_valid_test_name ( test_name ) ) { <S2SV_ModStart> ) ) { if (! is_valid_test_name ( test_name ) ) { <S2SV_ModStart> ) ) { if (! is_valid_test",0
531,"<S2SV_ModStart> ; row < raw_height <S2SV_ModEnd> ; row ++ <S2SV_ModStart> 4 ) ; } for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { if ( ( i = col % 14 ) == 0 ) pred [ 0 ] = nonz [ 0 ] = 0 ; if ( i % 3 == 2 ) sh = 4 >> ( 3 - pana_bits ( 2 ) ) ; if ( ( j = pana_bits ( 8 ) ) ) { if ( ( pred [ i & 1 ] -= 0x80 << sh ) < 0 || sh == 4 ) pred [ i & 1 ] &= ~ ( ( ~ 0u ) << sh ) ; pred [ i & 1 ] += j << sh ; } } else if ( ( nonz [ i & 1 ] = pana_bits ( 4 ) ) || i > 11 ) pred [ i & 1 ] = nonz [ i & 1 ] << 4 | pana_bits ( 4 ) ; if ( ( RAW ( row, col ) = pred [ col & 1 ] ) > 4098 && col <",0
532,"<S2SV_ModStart> ; if (! nl ) { param -> flags |= DM_BUFFER_FULL_FLAG ; goto out ; } param -> data_size = param -> data_start + needed ; nl -> dev = 0 ; for ( i = 0 ; i < NUM_BUCKETS ; i ++ ) { list_for_each_entry ( hc, _name_buckets + i, name_list ) { if ( old_nl ) old_nl -> next = ( uint32_t ) ( ( void * ) nl - ( void * ) old_nl ) ; disk = dm_disk ( hc -> md ) ; nl -> dev = huge_encode_dev ( disk_devt ( disk ) ) ; strcpy ( nl -> name, hc -> name ) ; old_nl = nl ; event_nr = align_ptr ( nl -> name + strlen ( hc -> name ) + 1 ) ; * event_nr = dm_get_event_nr ( hc -> md ) ; nl = align_ptr ( event_nr + 1 ) ; } } BUG_ON ( ( char * ) nl - ( char * ) orig_nl!= needed ) ; out : up_write ( & _hash_",0
533,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList",0
534,<S2SV_ModStart> ( bfqq ) bfq_idle_slice_timer <S2SV_ModEnd> ( bfqq ),0
535,"<S2SV_ModStart> ; length += get_primary_drawing_order_field_bytes ( <S2SV_ModEnd> orderInfo -> orderType <S2SV_ModStart> orderInfo -> orderType, NULL ) <S2SV_ModEnd> ; length +=",1
536,<S2SV_ModStart> goto out ; if (! d_is_dir ( old ) &&! d_is_dir ( new ) ) { err = - ENOENT ; goto out ; },0
537,<S2SV_ModStart> < MAX_MB_PLANE ; ++ plane <S2SV_ModEnd> ) vp9_foreach_transformed_block_in_plane (,1
538,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> nonrd_pick_sb_modes ( VP9_COMP <S2SV_ModStart> -> e_mbd ; if ( xd -> mi [ 0 ] -> mbmi. sb_type!= BLOCK_NONE ) { <S2SV_ModStart> bsize ) ; } else { MB_PREDICTION_MODE intramode = DC_PRED ; set_mode_info ( & xd -> mi [ 0 ] -> mbmi, bsize, intramode ) ; } duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; return 0 <S2SV_ModEnd> ; } <S2SV_null>",0
539,"<S2SV_ModStart> = NULL ; if ( strcmp ( filename, ""-"" ) ) fclose ( reader. fhd ) ; <S2SV_ModStart> superblock ) ; <S2SV_ModEnd> hrtf = getHrtf",0
540,"<S2SV_ModStart> -> ranges = calloc ( 1, <S2SV_ModEnd> sizeof ( MappedRange",0
541,"<S2SV_ModStart> ; if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_ALTR_FRAME ; vp8_use_as_reference ( ctx -> cpi, ref ) ; } if (",0
542,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList",0
543,<S2SV_ModStart> ; if ( WARN_ON_ONCE ( <S2SV_ModStart>! head ) ) <S2SV_ModEnd> return - EINVAL <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,1
544,"<S2SV_ModStart> * pptr, u_int <S2SV_ModEnd> len ) { <S2SV_ModStart> len ) { u_int i ; uint16_t af ; uint8_t safi, snpa, nhlen ; union { float f ; uint32_t i ; } bw ; int advance ; u_int tlen ; const u_char * tptr ; char buf [ MAXHOSTNAMELEN + 100 ] ; int as_size ; tptr = pptr ; tlen = len ; switch ( atype ) { case BGPTYPE_ORIGIN : if ( tlen!= 1 ) ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; else { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } case BGPTYPE_AS4_PATH : case BGPTYPE_AS_PATH : if ( len % 2 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } if (! len ) { ND_PRINT ( ( ndo, ""empty"" ) ) ; break ; } as_size = bgp_attr_get_as_size ( ndo, atype, pptr, len ) ; while ( t",0
545,"<S2SV_ModStart> -> outputbuffer, ""<tr><td>Stackfile</td><td>%s</td></tr>"" <S2SV_ModEnd>, Run. <S2SV_ModStart> -> outputbuffer, ""<tr><td>Stackfile</td><td>%s</td></tr>"" <S2SV_ModEnd>, Run. <S2SV_ModStart> -> outputbuffer, ""<tr><td>Stackfile</td><td>%s</td></tr>"" <S2SV_ModEnd>, Run. <S2SV_ModStart> -> outputbuffer, ""<tr><td>Stackfile</td><td>%s</td></tr>"" <S2SV_ModEnd>, Run. <S2SV_ModStart> -> outputbuffer, ""<tr><td>Stackfile</td><td>%s</td></tr>"" <S2SV_ModEnd>, Run. <S2SV_ModStart> -> outputbuffer, ""<tr><td>Stackfile</td><td>%s</td></tr>"" <S2SV_ModEnd>, Run. <S2SV_ModStart> -> outputbuffer, ""<tr><td>Stackfile</td><td>%s</td></tr>"" <S2SV_ModEnd>, Run. <S2SV_ModStart> -> outputbuffer, ""<tr><td>Stackfile</td><td>%s</td></tr>"" <S2SV_ModEnd>, Run. <S2SV_ModStart> -> outputbuffer, ""<tr><td>Stackfile</td><td>%s</td></tr>"" <S2SV_ModEnd>, Run.",0
546,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
547,<S2SV_ModStart> ) ) ; if ( strlen ( constr1 ) > 40 || strlen ( constr2 ) > 40 || strlen ( constr3 ) > 40 || strlen ( constr4 ) > 40 || strlen ( constr5 ) > 40 || strlen ( constr6 ) > 40 || strlen ( constr7 ) > 40 || strlen ( constr8 ) > 40 || strlen ( constr9 ) > 40 || strlen ( constr10 ) > 40 || strlen ( constr11 ) > 40 || strlen ( constr12 ) > 40 || strlen ( constr12 ) > 40 || strlen ( constr13 ) > 40 || strlen ( constr14 ) > 40 || strlen ( constr14 ) > 40 || strlen ( constr15 ) > 40 || strlen ( constr15 ) > 40 || strlen ( constr15 ) > 40 || strlen ( constr15 ) > 40 || strlen ( constr15 ) > 40 || strlen ( constr15 ) > 40 ) { return false ; },0
548,"<S2SV_ModStart> iad_num ++ ; if ( iad_num > USB_MAXINTERFACES ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, nintf_orig, USB_MAXINTERFACES ) ; nintf = USB_MAXINTERFACES ; }",0
549,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
550,<S2SV_ModStart> ; distortion = vpx_variance16x16 <S2SV_ModEnd> ( * (,1
551,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_ECON2_STRCH ) ; if ( macCompAddr ( & interface -> macAddr, & MAC_UNSPECIFIED_ADDR ) ) { temp = enc624j600ReadReg ( interface, ENC624J600_MAADR1 ) ; interface -> macAddr. w [ 0 ] = letoh16 ( temp ) ; temp = enc624j600ReadReg ( interface, ENC624J600_MAADR2 ) ; interface -> macAddr. w [ 1 ] = letoh16 ( temp ) ; temp = enc624j600ReadReg ( interface, ENC624J600_MAADR3 ) ; interface -> macAddr. w [ 2 ] = letoh16 ( temp ) ; macAddrToEui64 ( & interface -> macAddr, & interface -> eui64 ) ; } else { temp = htole16 ( interface -> macAddr. w [ 0 ] ) ; enc624j600WriteReg ( interface, ENC624J600_MAAD",0
552,<S2SV_ModStart> * start ; <S2SV_ModEnd> start = ( <S2SV_ModStart> ; start = <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header <S2SV_ModEnd> + maxlen ; <S2SV_ModStart> ; maxlen = <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header <S2SV_ModEnd> - maxlen ; <S2SV_ModStart> -> headindex = <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header <S2SV_ModEnd> ; return ;,0
553,<S2SV_ModStart> -> alg_priv ) { <S2SV_ModStart> alg_priv ) ; ctx -> priv -> alg_priv = NULL ; },0
554,"<S2SV_ModStart> { sf -> <S2SV_ModEnd> recode_loop = ( <S2SV_ModStart>! frame_is_intra_only ( cpi <S2SV_ModEnd> ) ; sf <S2SV_ModStart> ; sf -> <S2SV_ModEnd> tx_size_search_method = vp9_frame_is_boosted <S2SV_ModStart> cm )? USE_FULL_RD : USE_LARGESTALL ; if ( MIN ( cm -> width, cm -> height ) >= 720 ) sf -> disable_split_mask = cm -> show_frame? DISABLE_ALL_SPLIT : DISABLE_ALL_INTER_SPLIT ; else sf -> disable_split_mask = DISABLE_COMPOUND_SPLIT ; sf -> use_rd_breakout = 1 ; sf -> adaptive_motion_search = 1 ; sf -> auto_mv_step_size = 1 ; sf -> adaptive_rd_thresh = 2 ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_y_mode_mask [ TX_16X32 ] = INTRA_DC_H_V ; sf -> intra_uv_mode_mask [ TX_16X16 ] = INTRA_DC_",0
555,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
556,"<S2SV_ModStart> ) + 2 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else condmovestack ( L, { }, { } ) ; luaE_shrinkCI ( L ) ; inuse = stackinuse ( L ) ; goodsize = inuse + ( inuse / 8 ) + 2 * EXTRA_STACK ; if ( goodsize > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else condmovestack ( L, { }, { } ) ; luaE_shrinkCI ( L ) ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else condmovestack ( L, { }, { } ) ; luaE_shrinkCI (",0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,"<S2SV_ModStart>, * s <S2SV_ModEnd> ; int quote <S2SV_ModStart> errstr ) { <S2SV_ModEnd> char buf [ <S2SV_ModStart> 128 ] ; if (! _PyUnicode_AsString ( errstr ) ) { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } Py_DECREF ( errstr ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } Py_DECREF ( type ) ; Py_DECREF ( value ) ; Py_XDECREF ( tback ) ; } # endif return NULL ; } PyArena_AddPyObject ( c -> c_arena, str ) ; return Str ( str, kind, LINENO ( n ), n -> n_col_offset, c -> c_arena ) ; } case INTEGER : { PyObject * pynum = parsinteger ( c, STR ( ch ) ) ; if (! pynum ) { return NULL ; }",0
559,"<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> } if ( strncmp <S2SV_ModEnd> ( ""encoding-mode"", <S2SV_ModStart> ""encoding-mode"", option_name, strlen ( ""encoding-mode"" ) ) == 0 ) { res = set_option_encoding_mode ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""layers"", option_name ) == 0 ) { svc_ctx -> spatial_layers = atoi ( option_value ) ; } else if ( strncmp ( ""scale-factors"", option_name, strlen ( ""scale-factors"" ) ) == 0 ) { res = parse_scale_factors ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strncmp ( ""quantizers"", option_name, strlen ( ""quantizers"" ) ) == 0 ) { res = parse_quantizer_values ( svc_ctx, option_value, 0 ) ; if ( res!= VPX_CODEC_OK ) break ; } else if",0
560,<S2SV_ModStart> ) ; } <S2SV_ModEnd> mb_index = 0 <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_col <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_col <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_col <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_col <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_col <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_col <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; } <S2SV_ModEnd> for ( mb_row <S2SV_ModStart> ) ; },0
561,<S2SV_ModStart> self ) { size_t <S2SV_ModEnd> i ; PyObject,1
562,,1
563,"<S2SV_ModStart> ( dbh, ""%s"", mysql_error ( imp_dbh -> pmysql ) ) ; do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; return FALSE ; } if ( mysql_errno ( imp_dbh -> pmysql )!= 0 ) { do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; return FALSE ; } DBIc_ACTIVE_on ( imp_dbh ) ; DBIc_on ( imp_dbh, DBIcf_IMPSET ) ; if ( mysql_errno ( imp_dbh -> pmysql )!= 0 ) { do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; return FALSE ; }",0
564,<S2SV_ModStart> ) || ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> & size ) ) <S2SV_ModStart> ( need_close || TEMP_FAILURE_RETRY ( <S2SV_ModStart> & size ) ),0
565,<S2SV_ModStart> ; struct ieee_802_11_phdr * phdr = NULL <S2SV_ModEnd> ; col_set_str ( <S2SV_ModStart> struct ieee_802_11_phdr ) { phdr = ( struct ieee_802_11_phdr * ) malloc ( sizeof ( struct ieee_802_11_phdr ) ) ; if (! phdr ) return ; } <S2SV_ModEnd> len_remain = phdr <S2SV_ModStart> struct ieee_802_11_phdr ) { phdr = ( struct ieee_802_11_phdr * ) malloc ( sizeof ( struct ieee_802_11_phdr ) ) ; if (! phdr ) return ; } <S2SV_ModEnd> len_remain = phdr <S2SV_ModStart> struct ieee_802_11_phdr ) { phdr = ( struct ieee_802_11_phdr * ) malloc ( sizeof ( struct ieee_802_11_phdr ) ) ; if (! phdr ) return ; } <S2SV_ModEnd> len_remain = phdr <S2SV_ModStart> struct ieee_802_11_phdr ) { phdr = ( struct ieee_802_11_,0
566,<S2SV_ModStart> ; sh = sds_malloc <S2SV_ModEnd> ( hdrlen +,0
567,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> BYTE a_val ; if (! context ) return FALSE ; <S2SV_ModStart> -> ColorLossLevel ; if (! context -> priv -> PlaneBuffers ) return FALSE ; <S2SV_ModStart> ; } } return TRUE ;,0
568,<S2SV_ModStart> > nr_parens ) { ret = - EINVAL ; goto out_free ; } <S2SV_ModEnd> * ( ++,1
569,<S2SV_ModStart> ) { const VP9EncoderConfig * oxcf = & cpi -> oxcf ; const <S2SV_ModStart> target = ( oxcf -> starting_buffer_level <S2SV_ModEnd> > INT_MAX ) <S2SV_ModStart> > INT_MAX )? INT_MAX : oxcf -> starting_buffer_level <S2SV_ModEnd> ; } else <S2SV_ModStart> int kf_boost = <S2SV_ModEnd> 2 * cpi <S2SV_ModStart> cpi -> output_framerate <S2SV_ModEnd> ; if ( <S2SV_ModStart> rc -> frames_since_key > <S2SV_ModEnd> cpi -> output_framerate <S2SV_ModStart> cpi -> output_framerate <S2SV_ModEnd> ) { kf_boost <S2SV_ModStart> { kf_boost = <S2SV_ModEnd> rc -> frames_since_key <S2SV_ModStart> rc -> frames_since_key <S2SV_ModEnd> ; } target,0
570,"<S2SV_ModStart> TX_MODE read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r )",1
571,"<S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd>",0
572,"<S2SV_ModStart> -> cpi ; MACROBLOCKD_EXT * xd_ext = args -> xd_ext ; <S2SV_ModStart> struct macroblock_plane * p = & xd_ext -> mb. plane [ plane ] ; struct macroblockd_plane * pd = & xd -> plane [ plane ] ; MB_MODE_INFO * mbmi = & xd -> mi [ 0 ] -> mbmi ; int pt ; int c ; TOKENEXTRA * t = * tp ; int eob = p -> eobs [ block ] ; const PLANE_TYPE type = pd -> plane_type ; const int16_t * qcoeff = BLOCK_OFFSET ( p -> qcoeff, block ) ; const int segment_id = mbmi -> segment_id ; const int16_t * scan, * nb ; const scan_order * so ; const int ref = is_inter_block ( mbmi ) ; unsigned int ( * const counts ) [ COEFF_CONTEXTS ] [ ENTROPY_TOKENS ] = cpi -> coef_counts [ tx_size ] [ type ] [ ref ] ; vp9_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES",0
573,<S2SV_ModStart>. pRename ; if ( pSelect -> selFlags & SF_View ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; } <S2SV_ModStart> -> pSrc ; if ( pSelect -> selFlags & SF_View ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; },0
574,"<S2SV_ModStart> users ) ; if ( cb_info -> serv ) { printk ( KERN_ERR ""nfs_callback_create_svc: <S2SV_blank> create <S2SV_blank> service <S2SV_blank> failed\\n"" ) ; return ERR_PTR ( - ENOMEM ) ; } cb_info -> serv = serv ; serv -> sv_maxconn = 1024 ; dprintk ( ""nfs_callback_create_svc: <S2SV_blank> service <S2SV_blank> created\\n"" ) ; serv = svc_create ( & nfs4_callback_program, NFS4_CALLBACK_BUFSIZE, sv_ops ) ; if (! serv ) { printk ( KERN_ERR ""nfs_callback_create_svc: <S2SV_blank> create <S2SV_blank> service <S2SV_blank> failed\\n"" ) ; return ERR_PTR ( - ENOMEM ) ; } <S2SV_ModStart> & nfs4_callback_program, NFS4_CALLBACK_BUFSIZE <S2SV_ModEnd>, sv_ops )",0
575,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
576,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
577,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
578,"<S2SV_ModStart> s ) { if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> s, 0 ) ) ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> retrying"", sock_fd, errno, ret ) ; break ; } ret = TEMP_FAILURE_RETRY ( <S2SV_ModEnd> send ( sock_fd <S2SV_ModStart> 0 ) ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModEnd> errno == EINTR <S2SV_ModStart> == EINTR ) ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> retrying"", sock_fd, errno, ret ) ; break ; } <S2SV_ModEnd> if ( ret",0
579,"<S2SV_ModStart> = crm_first_attr ( xml ) ; xIter!= NULL ; xIter = xIter -> next ) { const char * prop_name = ( const char * ) xIter -> name ; if ( strcmp ( prop_name, XML_ATTR_ID ) == 0 ) { continue ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else { char * path = xml_get_path ( xml ) ; crm_trace ( ""Cannot <S2SV_blank> add <S2SV_blank> new <S2SV_blank> node <S2SV_blank> %s <S2SV_blank> at <S2SV_blank> %s"", crm_element_name ( xml ), path ) ; if ( xml!= xmlDocGetRootElement ( xml -> doc ) ) { xmlUnlinkNode ( xml ) ; xmlFreeNode ( xml ) ; } free ( path ) ; return ; } } } for ( xIter = crm_first_attr ( xml ) ; xIter!= NULL ; xIter = xIter -> next ) { const char * prop_name",0
580,<S2SV_ModStart> <S2SV_null> static const SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> return ( const SvcInternal_t <S2SV_ModEnd> * ) svc_ctx,1
581,<S2SV_ModStart> ptr ) ; MAKE_STD_ZVAL ( * zdata_ptr ) ; <S2SV_ModStart> ptr ) ; MAKE_STD_ZVAL ( * zdata_ptr ) ; <S2SV_ModStart> ptr ) ; MAKE_STD_ZVAL ( * zdata_ptr ) ; <S2SV_ModStart> ptr ) ; MAKE_STD_ZVAL ( * zdata_ptr ) ; <S2SV_ModStart> ptr ) ; MAKE_STD_ZVAL ( * zdata_ptr ) ; <S2SV_ModStart> ptr ) ; MAKE_STD_ZVAL ( * zdata_ptr ) ; <S2SV_ModStart> ptr ) ; MAKE_STD_ZVAL ( * zdata_ptr ) ; <S2SV_ModStart> ptr ) ; MAKE_STD_ZVAL ( * zdata_ptr ) ; <S2SV_ModStart> ptr ) ; MAKE_STD_ZVAL ( * zdata_ptr ) ; <S2SV_ModStart> ptr ) ; MAKE_STD_ZVAL ( * zdata_ptr ) ; <S2SV_ModStart> ptr ) ; MAKE_STD_ZVAL ( * zdata_ptr ) ; <S2SV_ModStart> ptr ) ; MAKE_STD_ZVAL ( * zdata_ptr ) ; <S2SV_ModStart> ptr ) ; MAKE_STD_ZVAL ( *,0
582,<S2SV_ModStart> only_420 ) { _y4m -> chroma_fmt = VPX_IMG_FMT_I420 ; _y4m -> chroma_bps = 12 ; <S2SV_ModStart> = VPX_IMG_FMT_I420 ; <S2SV_ModEnd> if ( strcmp <S2SV_ModStart> = VPX_IMG_FMT_I420 ; <S2SV_ModEnd> if ( memcmp <S2SV_ModStart> = VPX_IMG_FMT_I420 ; <S2SV_ModEnd> if ( memcmp <S2SV_ModStart> = VPX_IMG_FMT_I420 ; <S2SV_ModEnd> if ( memcmp <S2SV_ModStart> = VPX_IMG_FMT_I420 ; <S2SV_ModEnd> if ( memcmp <S2SV_ModStart> = VPX_IMG_FMT_I420 ; <S2SV_ModEnd> if ( memcmp <S2SV_ModStart> = VPX_IMG_FMT_I420 ; <S2SV_ModEnd> if ( memcmp <S2SV_ModStart> = VPX_IMG_FMT_I420 ; <S2SV_ModEnd> if ( memcmp <S2SV_ModStart> = VPX_IMG_FMT_I420 ; <S2SV_ModEnd> if ( memcmp <S2SV_ModStart> = VPX_IMG_FMT_I420 ; <S2SV_ModEnd> if ( memcmp <S2SV_ModStart>,0
583,"<S2SV_ModStart> buf ; { if ( strlen ( buf ) >= 60 ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; }",0
584,<S2SV_ModStart> ( ) { <S2SV_ModEnd> if ( read_xattrs_from_disk <S2SV_ModStart> == 0 ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( read_uids_guids <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( parse_exports_table <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( read_fragment_table <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( read_inode_table <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; return FALSE ; } <S2SV_ModEnd> if ( read_directory_table <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_,0
585,"<S2SV_ModStart> rule * rule, u_int flags <S2SV_ModStart> count = 0 ; env -> flags = flags <S2SV_ModStart> ; } } if ( flags & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ]!= NULL ; i ++ ) { struct envnode * node ; const char * e, * eq ; size_t len ; char keybuf [ 1024 ] ; e = strchr ( e, '=' ) ; if ( ( eq = strchr ( e, '=' ) ) == NULL || eq == e ) continue ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf, e + 1, len ) ; node = createnode ( keybuf, eq + 1 ) ; if ( RB_INSERT ( envtree, & env -> root, node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } }",0
586,"<S2SV_ModStart> -> seg ; vpx_memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> mi_cols ) ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ; } } vpx_memset ( cpi -> segmentation_map, 0, cm -> mi_rows * cm -> mi_cols ) ; vpx_memset ( cpi -> complexity_map, 0, cm -> mi_rows * cm -> mi_cols ) ; vp9_enable_segmentation ( seg ) ; vp9_clearall_segfeatures ( seg ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> frame_type, cm -> base_qindex, in_frame_q_adj_ratio [ segment ] ) ; vp9_enable_segfeature ( seg, segment, SEG_LVL_ALT_Q ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> frame_type",0
587,"<S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""mod"" <S2SV_ModEnd>, stmt_type",0
588,<S2SV_ModStart> } logfile_fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> S_IWGRP | S_IROTH ) <S2SV_ModStart> return ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart> 16 ) ; ),0
589,<S2SV_ModStart> ; } # else ( void ) cpi ; #,1
590,"<S2SV_ModStart> cinput ) { <S2SV_ModEnd> char * s <S2SV_ModStart>, * StartClean <S2SV_ModEnd> ; SetDefaults ( <S2SV_ModStart> t ++ ; sprintf ( outputbuffer <S2SV_ModEnd>, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"", <S2SV_ModStart> = outputbuffer ; fprintf ( outfile <S2SV_ModEnd>, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"", <S2SV_ModStart> = 1 ; sprintf ( outputbuffer <S2SV_ModEnd>, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", <S2SV_ModStart> SUBVERSION ) ; return ( 0 ) ; } } StartClean = outputbuffer ; nameobject = t ; while ( * t!='<S2SV_blank>'&& * t!= '\\t' || * t == '\\n' ) t ++ ; * t ++ = 0 ; while ( * t =='<S2SV_blank>'|| * t == '\\t' || * t == '\\n' ) t ++ ; if ( * s == '0' && s [ 1 ] == ']' ) { identification = 1 ; sprintf ( outputbuffer <S2SV_ModEnd>, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", <S2SV_ModStart> ; if ( <S2SV_ModEnd> ReadArray (",0
591,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lower, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { int res ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { lower = NULL ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_upper, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { int res ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { upper = NULL ; } if ( lookup_attr_id ( obj, & PyId_step, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { step = NULL ; } * out = Slice ( lower, upper,",0
592,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
593,"<S2SV_ModStart> extack ) ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; return - EOPNOTSUPP ; } <S2SV_ModEnd> tos_off = proto <S2SV_ModStart> ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; return <S2SV_ModEnd> - ENOMEM ; <S2SV_ModStart> - ENOMEM ; } list_for_each_entry ( iter, & alink -> dscp_map, list ) { u32 cmask ; if ( iter -> handle == knode -> handle ) { match = iter ; continue ; } cmask = iter -> mask & mask ; if ( ( iter -> val & cmask ) == ( val & cmask ) && iter -> band!= knode -> res -> classid ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; return - EOPNOTSUPP ; <S2SV_ModStart> knode ) ; kfree ( match ) ;",0
594,<S2SV_ModStart> ) ; } if ( stream -> config. cfg. g_pass!= VPX_RC_ONE_PASS ) { <S2SV_ModStart> : VPX_RC_ONE_PASS ; } else { stream -> config. cfg. g_pass = VPX_RC_LAST_PASS ; } <S2SV_ModStart> ( pass ) { <S2SV_ModStart> stats ) ; },0
595,<S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args,0
596,<S2SV_ModStart> data_end ) { const <S2SV_ModStart> end = NULL <S2SV_ModEnd> ; assert ( <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> aligned_cols ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> aligned_cols ) ; memset <S2SV_ModEnd> ( cm ->,0
597,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> * vp9_decoder_create ( <S2SV_ModEnd> VP9D_CONFIG * oxcf <S2SV_ModStart> ovcf ) { VP9Decoder * const pbi = vpx_memalign ( 32, sizeof ( * pbi ) ) ; VP9_COMMON * const cm = pbi? & pbi -> common : NULL ; if (! cm ) return NULL ; vp9_zero ( * pbi ) ; if ( setjmp ( cm -> error. jmp ) ) { cm -> error. setjmp = 0 ; vp9_decoder_remove ( pbi ) ; return NULL ; } cm -> error. setjmp = 1 ; vp9_initialize_dec ( ) ; vpx_memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_video_frame = 0 ; pbi -> oxcf = * oxcf ; pbi -> ready_for_new_data = 1 ; pbi -> decoded_key_frame = 0 ; vp9_init_dequantizer ( cm )",0
598,"<S2SV_ModStart>, GF_LOG_CONTAINER, <S2SV_ModEnd> ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) <S2SV_ModStart> GF_ISOM_BOX_TYPE_DREF ) ; if (! ( ( GF_DataInformationBox * ) s ) -> dref ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
599,<S2SV_ModStart> req ) { <S2SV_ModEnd> struct inet_request_sock * <S2SV_ModStart> -> opt ; <S2SV_ModEnd> cipso_v4_delopt ( &,0
600,"<S2SV_ModStart> tokens, const vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> do { const vpx_tree_index <S2SV_ModEnd> j = tree",1
601,"<S2SV_ModStart> ( img ) { <S2SV_ModStart> img ) ; if ( res!= VPX_CODEC_OK ) { ctx -> base. err_detail = ""Invalid <S2SV_blank> image."" ; return res ; } } <S2SV_ModStart> VPX_CODEC_INVALID_PARAM ; } vpx_codec_pkt_list_init ( & ctx -> pkt_list ) ; <S2SV_ModStart> VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_GOLD_FLAG ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP9_ALT_FLAG ; vp9_use_as_reference ( ctx -> cpi, ref ) ; } if ( flags & ( VP8_EFLAG_NO_UPD_LAST | VP8_EFLAG_NO_UPD_GF | VP8_EFLAG_NO_UPD_ARF | VP8_EFLAG_FORCE_GF | VP8_EFLAG_",0
602,"<S2SV_ModStart> { ret = check_atype_tag ( elemtype, & t ) ; if ( ret ) goto error ; if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } newseq = realloc ( seq, ( count + 1 ) * elemtype -> size ) ; if ( newseq == NULL ) { ret = ENOMEM ; goto error ; } seq = newseq ; elem = ( char * ) seq + count * elemtype -> size ; memset ( elem, 0, elemtype -> size ) ; ret = decode_atype ( & t, contents, clen, elemtype, elem ) ; if ( ret ) goto error ; count ++ ; } ret = <S2SV_ModStart>, & len <S2SV_ModEnd> ) ; if",0
603,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> in ) { memset ( s, 0, 16 ) ; memset ( x, 0, 16 ) ; memset ( u, 0, 32 ) ; memset ( v, 0, 32 ) ; memset ( k__cospi_p01_p31, 0 ) ; k__cospi_p31_m01 = pair_set_epi16 ( cospi_31_64, - cospi_1_64 ) ; k__cospi_p05_p27 = pair_set_epi16 ( cospi_27_64, - cospi_5_64 ) ; k__cospi_p09_p23 = pair_set_epi16 ( cospi_9_64, - cospi_23_64 ) ; k__cospi_p13_p19 = pair_set_epi16 ( cospi_13_64, - cospi_19_64 ) ; k__cospi_p15_p15 = pair_set_epi16 ( cospi_15_64, - cospi_17_64 ) ;",0
604,"<S2SV_ModStart> rc, const VP9EncoderConfig <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> ) rc -> avg_frame_bandwidth <S2SV_ModEnd> * ( int64_t",1
605,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
606,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_superblock ( VP9_COMP <S2SV_ModStart> * cpi, <S2SV_ModEnd> int mi_row, <S2SV_ModStart> BLOCK_SIZE bsize ) { VP9_COMMON * const cm = & cpi -> common ; MACROBLOCK * const x = & cpi -> mb ; MACROBLOCKD * const xd = & x -> e_mbd ; MODE_INFO * * mi_8x8 = xd -> mi ; MB_MODE_INFO * mbmi = & mi -> mbmi ; PICK_MODE_CONTEXT * ctx = get_block_context ( x, bsize ) ; unsigned int segment_id = mbmi -> segment_id ; const int mis = cm -> mi_stride ; const int mi_width = num_8x8_blocks_wide_lookup [ bsize ] ; const int mi_height = num_8x8_blocks_high_lookup [ bsize ] ; x -> skip_recode =! x -> select_txfm_size && mbmi -> sb_type >= BLOCK_8X8 && cpi -> oxcf. allow_skip_recode ;",0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
608,"<S2SV_ModStart> range_max ) { int64_t <S2SV_ModEnd> value ; int <S2SV_ModStart> position, zeroes <S2SV_ModEnd> ; char bits <S2SV_ModStart> gbc ) ; if ( get_bits_left ( gbc ) < 32 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits1 ( gbc ) ) { bits [ i ++ ] = '1' ; break ; } else { bits [ i ++ ] = '0' ; ++ zeroes ; } } if ( zeroes >= 32 ) { value = MAX_UINT_BITS ( 32 ) ; } else { value = get_bits_long ( gbc, zeroes ) ; for ( j = 0 ; j < zeroes ; j ++ ) bits [ i ++ ] = ( value >> ( zeroes - j - 1 ) & 1 )? '1' : '0' ; value += ( 1 << zeroes ) - 1 ; } if ( ctx -> trace_enable ) { bits [ i ] = 0 ; ff_cbs_trace_syntax_element",0
609,"<S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!$%&\'*+-.^_`|~"" <S2SV_ModStart>",0
610,"<S2SV_ModStart>, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_origin. ptr = NULL, packet -> http_origin. len = 0, packet -> http_x_session_type. ptr = NULL, packet -> http_x_session_type. len = 0, packet -> server_line. ptr = NULL, packet -> server_line. len = 0, packet -> http_num_headers = 0, packet -> <S2SV_ModStart> = 0, <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
611,"<S2SV_ModStart> { q = QueueAuthenticPixels2 <S2SV_ModEnd> ( image, <S2SV_ModStart> x ), Min ( 4, dds_info -> height - y ), exception ) ; if ( q == ( PixelPacket * ) NULL ) return MagickFalse ; c0 = ReadBlobLSBShort ( image ) ; c1 = ReadBlobLSBShort ( image ) ; bits = ReadBlobLSBLong ( image ) ; CalculateColors ( c0, c1, & colors, MagickFalse ) ; for ( j = 0 ; j < 4 ; j ++ ) { for ( i = 0 ; i < 4 ; i ++ ) { if ( ( x + i ) < ( ssize_t ) dds_info -> width && ( y + j ) < ( ssize_t ) dds_info -> height ) { code = ( unsigned char ) ( ( bits >> ( ( j * 4 + i ) * 2 ) ) & 0x3 ) ; SetPixelRed ( q, ScaleCharToQuantum ( colors. r [ code ] ) ) ; SetPixelGreen ( q, ScaleCharToQuantum ( colors. g [ code ] ) ) ; SetPixelBlue ( q, ScaleCharToQuantum ( colors",0
612,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL ) <S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL )",1
613,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> %12.3f <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; outpos += sprintf ( outputbuffer, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", w, - h * BzK, w, h * BzK, w ) ; outpos += sprintf ( outputbuffer, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", w, - h * BzK, w ) ; outpos += sprintf ( outputbuffer, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", w, - h * BzK, w ) ; outpos += sprintf ( outputbuffer, "" <S2SV_blank> %12.3f <S2SV_blank> %12",0
614,"<S2SV_ModStart> ) ) { printf ( <S2SV_ModEnd> ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", x11 <S2SV_ModStart> y ) ; printf ( ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", x11, x12, x21, x22, x, y ) ;",0
615,"<S2SV_ModStart> ( AUTODETECT_TAG, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU\\n"" <S2SV_ModEnd> ) ; Stream_Read_UINT32",0
616,"<S2SV_ModStart> recon_uv_stride, recon_y_stride, recon_uv_stride <S2SV_ModStart> recon_y_stride, recon_y_stride, recon_uv_stride <S2SV_ModStart> recon_uv_stride, recon_uv_stride, recon_y_stride <S2SV_ModStart> recon_uv_stride, recon_uv_stride, recon_uv_stride <S2SV_ModStart> recon_y_stride, recon_y_stride, recon_uv_stride <S2SV_ModStart> recon_uv_stride, recon_uv_stride, recon_uv_stride <S2SV_ModStart> recon_y_stride, recon_y_stride, recon_uv_stride <S2SV_ModStart> recon_y_stride, recon_uv_stride, recon_uv_stride, recon_y_stride <S2SV_ModStart> recon_uv_stride, recon_uv_stride, recon_uv_stride <S2SV_ModStart> recon_uv_stride, recon_uv_stride, recon_uv_stride, recon_y_stride, recon_uv_stride <S2SV_ModStart> recon_y_stride, recon_uv_stride, recon_y_stride, recon_uv_stride <S2SV_ModStart> recon_uv_stride, recon_uv_stride, recon_uv_stride, recon",0
617,<S2SV_ModStart> -> b_multithreaded_rd ) { <S2SV_ModStart> mb_rows ) ; },0
618,<S2SV_ModStart> { if ( ( <S2SV_ModStart> xWantedSize > 0 ) && ( xWantedSize + xHeapStructSize <= xFreeBytesRemaining ) <S2SV_ModStart> portBYTE_ALIGNMENT_MASK ) ) ; } else { mtCOVERAGE_TEST_MARKER ( ) ; } } else { mtCOVERAGE_TEST_MARKER ( ) ; } if ( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) ) { pxPreviousBlock = & xStart ; pxBlock = xStart. pxNextFreeBlock ; while ( ( pxBlock -> xBlockSize < xWantedSize ) && ( pxBlock -> pxNextFreeBlock!= NULL ) ) { pxPreviousBlock = pxBlock ; pxBlock = pxBlock -> pxNextFreeBlock ; } if ( pxBlock!= pxEnd ) { pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock -> pxNextFreeBlock ) + xHeapStructSize ) ; pxPreviousBlock -> pxNextFreeBlock = pxBlock -> pxNextFreeBlock ; if ( ( pxBlock -> xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE ) { pxNewBlockLink =,0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,"<S2SV_ModStart> s ) { uint32 <S2SV_ModEnd> num_updates ; uint16 <S2SV_ModStart>, Debug, ""%s()\\n"" <S2SV_ModEnd>, __func__ ) <S2SV_ModStart> ++ ) { in_uint32_le ( s, left ) ; in_uint32_le ( s, top ) ; in_uint32_le ( s, right ) ; in_uint32_le ( s, bottom ) ; in_uint32_le ( s, width ) ; in_uint32_le ( s, bpp ) ; Bpp = ( bpp + 7 ) / 8 ; in_uint32_le ( s, compress ) ; in_uint32_le ( s, bufsize ) ; cx = right - left + 1 ; cy = bottom - top + 1 ; logger ( Graphics, Debug, ""process_bitmap_updates(), <S2SV_blank> [%d,%d,%d], <S2SV_blank> [%d,%d], <S2SV_blank> bpp=%d, <S2SV_blank> compression=%d"", left, top, right, bottom, width, height, Bpp, compress ) ; if (! compress ) { int y ; bmpdata = ( uint8 * ) xmalloc ( width * height * Bpp ) ; for ( y = 0 ; y <",0
621,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
622,"<S2SV_ModStart> TX_SIZE tx_size, vpx_coeff_stats <S2SV_ModEnd> * coef_branch_ct ) <S2SV_ModStart> coef_branch_ct ) { vpx_coeff_probs_model <S2SV_ModEnd> * coef_probs = <S2SV_ModStart> tx_size ] ; vpx_coeff_count <S2SV_ModEnd> * coef_counts =",0
623,<S2SV_ModStart> ( name ) ; ( void ) utf8,0
624,"<S2SV_ModStart> struct dvb_usb_adapter * adap <S2SV_ModEnd> ) { u8 <S2SV_ModStart> ( dvb_usb_generic_rw ( adap <S2SV_ModEnd> -> dev, <S2SV_ModStart> ( dvb_usb_generic_rw ( adap <S2SV_ModEnd> -> dev, <S2SV_ModStart> = 0xe ; adap <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> = 0x02 ; adap <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> ( dvb_usb_generic_rw ( adap <S2SV_ModEnd> -> dev, <S2SV_ModStart> ( dvb_usb_generic_rw ( adap <S2SV_ModEnd> -> dev, <S2SV_ModStart> 300 ) ; adap <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; adap <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> = 0x83 ; adap <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> ( dvb_usb_generic_rw ( adap <S2SV_ModEnd> -> dev, <S2SV_ModStart> ( dvb_usb_generic_rw ( adap <S2SV_ModEnd> -> dev, <S2SV_ModStart> = 0 ; adap <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> ( dvb_usb_generic_rw ( adap <S2SV_ModEnd> -> dev, <S2SV_ModStart> ( dvb_usb_generic_rw ( adap <S2SV_ModEnd> -> dev, <S2SV_ModStart> ( ds3000_attach, adap <S2SV_ModEnd> -> fe_adap [ <S2SV_ModStart> ( ts2020_attach, adap <S2SV_ModEnd> -> fe_adap [",0
625,"<S2SV_ModStart> vpx_codec_enc_cfg_t * cfg <S2SV_ModEnd> ) { vpx_codec_err_t <S2SV_ModStart> ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else { ctx -> priv = NULL ; ctx -> init_flags = flags ; ctx -> config. enc = cfg ; res = ctx -> iface -> init ( ctx, NULL ) ; if ( res ) { ctx -> err_detail = ctx -> priv? ctx -> priv -> err_detail : NULL ; vpx_codec_destroy ( ctx ) ;",0
626,"<S2SV_ModStart> stride, int mv_row, int mv_col, struct scale_factors * scale, int x, int y ) { const int which_mv = 0 ; const MV mv = { mv_row, mv_col } ; const InterpKernel * const kernel = vp9_get_interp_kernel ( xd -> mi [ 0 ] -> mbmi. interp_filter ) ; enum mv_precision mv_precision_uv ; int uv_stride ; vp9_build_inter_predictor ( y_mb_ptr, stride, & pred [ 0 ], 16, & mv, scale, 16, 16, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vp9_build_inter_predictor ( u_mb_ptr, uv_stride, & pred [ 256 ], uv_block_size, & mv, scale, uv_block_size, uv_block_size, which_mv, kernel, mv_precision_uv, x, y ) ; vp9_build_inter_predictor ( v_mb_ptr, uv_stride, & pred [ 512 ], uv_block_size, & mv, scale, uv",0
627,"<S2SV_ModStart> = TRUE ; if ( strlen ( origbuf ) >= sizeof ( buf ) ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> too <S2SV_blank> long <S2SV_blank> \\""%s\\"""", origbuf ) ; return FALSE ; }",0
628,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> cJSON_CreateFloatArray ( double <S2SV_ModStart> * numbers, size_t <S2SV_ModEnd> count ) { <S2SV_ModStart> count ) { size_t <S2SV_ModEnd> i ; cJSON <S2SV_ModStart> 0 ; a <S2SV_ModEnd> ; ++ i <S2SV_ModStart> i ) { if (! i ) a -> child = n ; else { <S2SV_ModStart> ] ) ; <S2SV_ModEnd> suffix_object ( p <S2SV_ModStart> n ; } }",0
629,"<S2SV_ModStart> data_end ) { const <S2SV_ModStart> pbi -> common <S2SV_ModEnd> ; const int <S2SV_ModStart> tile_cols ) ; <S2SV_ModEnd> int n ; <S2SV_ModStart> 0 ) { const int num_workers = MIN ( pbi -> oxcf. max_threads, tile_cols ) ; TileBuffer tile_buffers [ 1 << 6 ] ; int i ; CHECK_MEM_ERROR ( cm, pbi -> tile_workers, vpx_malloc ( num_workers * sizeof ( * pbi -> tile_workers ) ) ) ; for ( i = 0 ; i < num_workers ; ++ i ) { VP9Worker * const worker = & pbi -> tile_workers [ i ] ; ++ pbi -> num_tile_workers ; vp9_worker_init ( worker ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data2, vpx_malloc ( sizeof ( TileInfo ) ) ) ; if ( i < num_threads - 1 &&! vp9_worker_reset ( worker ) ) { vpx_internal_error ( & cm -> error, VP",0
630,<S2SV_ModStart> = base + get3 <S2SV_ModEnd> ( ) + <S2SV_ModStart> ; len = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c =,0
631,"<S2SV_ModStart> cm -> seg ; vpx_clear_system_state ( ) <S2SV_ModStart> = SEGMENT_DELTADATA ; <S2SV_ModEnd> for ( i <S2SV_ModStart> ++ ) { vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, qindex_delta ) ; vpx_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q ) ; <S2SV_ModStart> ) ) ; vpx_set_segdata <S2SV_ModEnd> ( seg, <S2SV_ModStart> qindex_delta ) ; vpx_enable_segfeature <S2SV_ModEnd> ( seg, <S2SV_ModStart> ), SEG_LVL_ALT_Q <S2SV_ModEnd> ) ; RDMULT_RATIO",0
632,"<S2SV_ModStart> -> error_code ) memcpy ( & <S2SV_ModStart> base. err_detail, <S2SV_ModEnd> error -> has_detail <S2SV_ModStart> error -> detail, sizeof ( ctx -> base. err_detail ) ) <S2SV_ModEnd> ; return error",0
633,"<S2SV_ModStart>, * ps_cur_poc <S2SV_ModEnd> ; ps_cur_slice = <S2SV_ModStart> ps_cur_slice ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
634,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet ),0
635,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int getnum ( <S2SV_ModStart> int getnum ( <S2SV_ModEnd> char * * <S2SV_ModStart> int df ) <S2SV_ModEnd> { int a <S2SV_ModStart> = 0 ; if (! isdigit ( * * fmt ) ) return df ; else,0
636,"<S2SV_ModStart> GCSpropagate ) ; markold_recursive <S2SV_ModEnd> ( g, <S2SV_ModStart> reallyold ) ; markold_recursive <S2SV_ModEnd> ( g,",0
637,<S2SV_ModStart> 0 ; else { kfree ( buf ) ; <S2SV_ModStart> - EIO ; },0
638,"<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } <S2SV_ModEnd> memset ( buffer <S2SV_ModStart> buffer ) ; <S2SV_ModEnd> s_write ( c",0
639,"<S2SV_ModStart> int cib_tls_signon ( cib_remote_opaque_t <S2SV_ModEnd> * private = <S2SV_ModStart> struct sockaddr_in addr <S2SV_ModEnd> ; char * <S2SV_ModStart> = 0 ; <S2SV_ModEnd> struct addrinfo * <S2SV_ModStart> mainloop_fd_callbacks cib_fd_callbacks = <S2SV_ModEnd> {. dispatch <S2SV_ModStart> dispatch = cib_remote_dispatch <S2SV_ModEnd> ; connection -> <S2SV_ModStart> ; sock = TEMP_FAILURE_RETRY ( <S2SV_ModStart> SOCK_RAW, IPPROTO_ICMP ) <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_",0
640,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> ; cpi -> <S2SV_ModEnd> non_gf_bitrate_adjustment = 0",0
641,"<S2SV_ModStart> ) ) ; if ( len < 26 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> len <S2SV_blank> %d]"", len ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( len < 26 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> len <S2SV_blank> %d]"", len ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( len < 26 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> len <S2SV_blank> %d]"", len ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( len < 26 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> len <S2SV_blank> %d]"", len ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( len < 26 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> len <S2SV_blank> %d]"", len ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( len < 26 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> len <S2SV_blank> %d]"", len ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( len < 26 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> len",0
642,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command",0
643,"<S2SV_ModStart> Image * image <S2SV_ModEnd> ; register IndexPacket <S2SV_ModStart> length, padding <S2SV_ModEnd>, version, <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { image = DestroyImageList ( image ) ; return ( ( Image * ) NULL ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { image = DestroyImageList ( image ) ; return ( ( Image * ) NULL ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { image = DestroyImageList ( image ) ; return ( ( Image * ) NULL ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { image = DestroyImageList ( image ) ; return ( ( Image * ) NULL ) ; }",0
644,"<S2SV_ModStart> numbands ) { jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands\\n"" ) ; return - 1 <S2SV_ModEnd> ; } bandinfos <S2SV_ModStart> numbands ) { jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands\\n"" ) ; return - 1 <S2SV_ModEnd> ; } bandinfos <S2SV_ModStart> numbands ) { jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands\\n"" ) ; return - 1 <S2SV_ModEnd> ; } tccp <S2SV_ModStart> numbands ) { jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands\\n"" ) ; return - 1 <S2SV_ModEnd> ; } bandinfos <S2SV_ModStart> numbands ) { jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands\\n"" ) ; return - 1 <S2SV_ModEnd> ; } tccp <S2SV_ModStart> numbands ) { jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands\\n"" ) ; return - 1 <S2SV_ModEnd> ; } bandinfos <S2SV_ModStart> numbands ) { jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands\\n"" ) ; return - 1 <S2SV_ModEnd> ; } tccp <S2SV_ModStart> numbands ) { jas_eprintf ( ""too <S2SV_blank> many <S2SV_blank> bands\\n"" ) ; return - 1 <S2SV_ModEnd> ; } tccp <S2SV_ModStart> numbands ) { jas_eprintf",0
645,<S2SV_ModStart> = '\\0' ; <S2SV_ModEnd> } else if <S2SV_ModStart> = '\\0' ; <S2SV_ModEnd> } else if <S2SV_ModStart> = '\\0' ; <S2SV_ModEnd> } else if <S2SV_ModStart> = '\\0' ; <S2SV_ModEnd> } else if <S2SV_ModStart> = '\\0' ; <S2SV_ModEnd> } else if <S2SV_ModStart> = '\\0' ; <S2SV_ModEnd> } else if <S2SV_ModStart> = '\\0' ; <S2SV_ModEnd> } else if <S2SV_ModStart> = '\\0' ; <S2SV_ModEnd> } else if <S2SV_ModStart> = '\\0' ; <S2SV_ModEnd> } else if <S2SV_ModStart> = '\\0' ; <S2SV_ModEnd> } else if <S2SV_ModStart> = '\\0' ; <S2SV_ModEnd> } else if <S2SV_ModStart> = '\\0' ; <S2SV_ModEnd> } else if <S2SV_ModStart> = '\\0' ; <S2SV_ModEnd> } else if <S2SV_ModStart> = '\\0' ; <S2SV_ModEnd> } else if <S2SV_ModStart> = '\\0' ; <S2SV_ModEnd> } else if <S2SV_ModStart> = '\\0' ; <S2SV_ModEnd> } else if <S2SV_ModStart> = '\\0' ; <S2SV_ModEnd> } else if <S2SV_ModStart> = '\\0' ; <S2SV_ModEnd> } else if <S2SV_ModStart> = '\\0' ; <S2SV_ModEnd> } else if <S2SV_ModStart> = '\\0' ; <S2SV_ModEnd> } else if <S2SV_ModStart> = '\\0' ; <S2SV_ModEnd> } else if <S2SV_ModStart> = '\\0' ; <S2SV_ModEnd> } else if <S2SV_ModStart> = '\\0' ; <S2SV_ModEnd> } else if <S2SV_ModStart> = '\\0' ; <S2SV_ModEnd> } else if <S2SV_ModStart> = '\\0' ; <S2SV_ModEnd> } else if <S2SV_ModStart> = '\\0,0
646,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> - m + vpx_read_bit <S2SV_ModEnd> ( r )",1
647,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
648,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> REFERENCE_MODE mode = vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> comp_inter_prob [ ctx <S2SV_ModStart> ( REFERENCE_MODE ) vpx_read <S2SV_ModEnd> ( r,",0
649,"<S2SV_ModStart>! stream ) { <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; } <S2SV_ModStart> ( res ) { <S2SV_ModStart> ) ) ; } <S2SV_ModStart> stereo_fmt = STEREO_FORMAT_MONO <S2SV_ModEnd> ; # if <S2SV_ModStart> CONFIG_WEBM_IO stream -> <S2SV_ModEnd> debug = global",0
650,<S2SV_ModStart> ; if ( * cp!= '\\0' <S2SV_ModEnd> ) goto trunc <S2SV_ModStart> ; if ( * cp!= '\\0' <S2SV_ModEnd> ) goto trunc <S2SV_ModStart> ; if ( * cp!= '\\0' <S2SV_ModEnd> ) goto trunc <S2SV_ModStart> ; if ( * cp!= '\\0' <S2SV_ModEnd> ) goto trunc <S2SV_ModStart> ; if ( * cp!= '\\0' <S2SV_ModEnd> ) goto trunc <S2SV_ModStart> ; if ( * cp!= '\\0' <S2SV_ModEnd> ) goto trunc <S2SV_ModStart> ; if ( * cp!= '\\0' <S2SV_ModEnd> ) goto trunc <S2SV_ModStart> ; if ( * cp!= '\\0' <S2SV_ModEnd> ) goto trunc <S2SV_ModStart> ; if ( * cp!= '\\0' <S2SV_ModEnd> ) goto trunc <S2SV_ModStart> ; if ( * cp!= '\\0' <S2SV_ModEnd> ) goto trunc <S2SV_ModStart> ; if ( * cp!= '\\0' <S2SV_ModEnd> ) goto trunc <S2SV_ModStart> ; if ( * cp!= '\\0' <S2SV_ModEnd> ) goto trunc <S2SV_ModStart> ; if ( * cp!= '\\0' <S2SV_ModEnd> ) goto trunc <S2SV_ModStart> ; if ( * cp!= '\\0' <S2SV_ModEnd> ) goto trunc <S2SV_ModStart> ; if ( * cp!= '\\0' <S2SV_ModEnd> ) goto trunc <S2SV_ModStart> ; if ( * cp!= '\\0' <S2SV_ModEnd> ) goto trunc <S2SV_ModStart> ; if ( * cp!= '\\0' <S2SV_ModEnd> ) goto trunc <S2SV_ModStart> ; if ( * cp!= '\\0' <S2SV_ModEnd> ) goto trunc,0
651,<S2SV_ModStart> -> root_node = ( yr_re_ast_root_node * ) yr_malloc ( sizeof ( yr_re_ast_root_node ) ) ; if ( ( * re_ast ) -> root_node == NULL ) { yr_free ( * re_ast ) ; return ERROR_INSUFFICIENT_MEMORY ; } ( * re_ast ) -> root_node -> next = yr_re_ast_root_node_next ; ( * re_ast ) -> root_node -> prev = yr_malloc ( sizeof ( yr_re_ast_root_node ) ) ; if ( ( * re_ast ) -> root_node == NULL ) { yr_free ( * re_ast ) ; return ERROR_INSUFFICIENT_MEMORY ; } ( * re_ast ) -> root_node -> next = yr_malloc ( sizeof ( yr_re_ast_root_next ) ) ; if ( ( * re_ast ) -> root_node == NULL ) { yr_free ( * re_ast ) ; return ERROR_INSUFFICIENT_MEMORY ; } ( * re_ast ) -> root_node ->,0
652,"<S2SV_ModStart> ) ) ; auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> = <S2SV_blank> %s"", str_c ( path ), key -> key -> value ) ; <S2SV_ModStart> 0 ) { auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found, <S2SV_blank> using <S2SV_blank> default <S2SV_blank> value <S2SV_blank> %s"", str_c ( path ), key -> key -> default_value ) ; key -> value = key -> key -> default_value ; } else if ( key -> key -> default_value!= NULL ) { auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found, <S2SV_blank> using <S2SV_blank> default <S2SV_blank> value <S2SV_blank> %s"", str_c ( path ), key -> key -> default_value ) ; key -> value = key -> key -> default_value ; } else { return 0 ; } } <S2SV_ModStart> 1 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
653,<S2SV_ModStart> level = 0 ; tok -> type_comment = 0,0
654,<S2SV_ModStart> av1 -> av1_config && av1 -> av1_config -> config,1
655,"<S2SV_ModStart> ASSERT ( dpbSize ) ; memset ( dpb, 0, sizeof ( dpbStorage_t )",0
656,"<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> (! sock ||! addr <S2SV_ModStart> ( addrlen ) { <S2SV_ModStart> * addrlen ; addrlen_out = * addrlen ; } <S2SV_ModStart>, addrlen_in, & addrlen_out <S2SV_ModEnd> )!= OE_OK <S2SV_ModStart> ) ; } if ( addrlen ) * addrlen = addrlen_out ;",0
657,,1
658,"<S2SV_ModStart> FALSE ; } if (! <S2SV_ModStart>, s ) ) return FALSE",1
659,<S2SV_ModStart> ipv6_pinfo * np ; struct ipv6_txoptions * opt = NULL ; struct ip6_flowlabel * flowlabel = NULL ; struct dst_entry * dst = NULL ; struct flowi6 fl6 ; int addr_len = msg -> msg_namelen ; int hlimit = - 1 ; int tclass = - 1 ; int dontfrag = - 1 ; int transhdrlen = 4 ; int ulen = len + transhdrlen ; int err ; if ( addr_len < SIN6_LEN_RFC2133 ) return - EINVAL ; np <S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; flowlabel =,0
660,"<S2SV_ModStart> fsize ; uint32_t <S2SV_ModEnd> hdr_size, j <S2SV_ModStart> j ; struct cli_exe_section * exe_sections ; char timestr [ 32 ] ; struct pe_image_data_dir * dirs ; struct cli_bc_ctx * bc_ctx ; fmap_t * map ; struct cli_pe_hook_data pedata ; # ifdef HAVE__INTERNAL__SHA_COLLECT int sha_collect = ctx -> sha_collect ; # endif # if HAVE__INTERNAL__SHA_COLLECT int sha_collect = ctx -> sha_collect ; # endif const char * archtype = NULL, * subsystem = NULL ; uint32_t viruses_found = 0 ; # if HAVE_JSON int toval = 0 ; struct json_object * pe_json = NULL ; char jsonbuf [ 128 ] ; # endif # if HAVE_JSON if ( cli_json_timeout_cycle_check ( ctx, & toval )!= 0 ) { cli_errmsg ( ""cli_scanpe: <S2SV_blank> json <S2SV_blank> timeout <S2SV_blank> check\\n"" ) ; return CL_ENULLARG ; } # if HAVE_JSON if ( cli_json_timeout_cycle_check",0
661,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; usleep <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPDRH <S2SV_ModEnd> ) << 8 <S2SV_ModStart> | dm9000ReadReg ( DM9000_EPDRL <S2SV_ModEnd> ) ; }",1
662,"<S2SV_ModStart> pcmk_ok ) { cib -> state = cib_connected_command ; cib -> type = cib_command ; <S2SV_ModStart> pcmk_ok ) { cib -> state = cib_connected_callback ; cib -> type = cib_command ; <S2SV_ModStart> callback ) ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> callback. token, CRM_OP_REGISTER, NULL, NULL, NULL, 0, NULL ) ; crm_send_remote_msg ( private -> command. session, hello, private -> command. encrypted ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { fprintf ( stderr, ""%s: <S2SV_blank> Opened <S2SV_blank> connection <S2SV_blank> to <S2SV_blank> %s:%d\\n"", name, private -> server, private -> port ) ; cib -> state = cib_connected_command ; cib -> type = cib_command ; } else { fprintf ( stderr, ""%s: <S2SV_blank> Connection <S2SV_blank> to <S2SV_blank> %s:%d <S2SV_blank> failed: <S2SV_blank> %s\\n"", name, private -> server, private -> port, pcmk_ok",0
663,"<S2SV_ModStart> ; msg. msg_namelen = sizeof ( address ) ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; err = sock_recvmsg ( sock, & msg, size, flags ) ; if ( err >= 0 && addr!= NULL ) { err2 = move_addr_to_user ( & address, msg. msg_namelen, addr, addr_len ) ; if ( err2 < 0 ) err = err2 ; } fput_light ( sock -> file, fput_needed ) ; err = sock_recvmsg ( sock, & msg, size, flags ) ; if ( err >= 0 && addr!= NULL ) { err2 = move_addr_to_user ( addr, msg. msg_namelen, addr, addr_len ) ; if ( err2 < 0 ) err = err2 ; } msg. <S2SV_ModStart> & address ; <S2SV_ModEnd> fput_light ( sock",0
664,"<S2SV_ModStart> ; int num00 = 0, tmp_err = 0, n = 0, sr = 0 ; int step_param = 3 ; int further_steps = ( MAX_MVSEARCH_STEPS - 1 ) - step_param ; const BLOCK_SIZE bsize = xd -> mi [ 0 ] -> mbmi. sb_type ; vp9_variance_fn_ptr_t v_fn_ptr = cpi -> fn_ptr [ bsize ] ; int new_mv_mode_penalty = 256 ; const int quart_frm = MIN ( cpi -> common. width, cpi -> common. height ) ; while ( sr < MAX_FULL_PEL_VAL ) ++ sr ; step_param += sr ; further_steps -= sr ; v_fn_ptr. vf = get_block_variance_fn ( bsize ) ; num00 = cpi -> diamond_search_sad ( x, & ref_mv_full, & tmp_mv, step_param, x -> sadperbit16, & num00, & v_fn_ptr, x -> nmvjointcost, x -> mvcost, ref_mv )",0
665,"<S2SV_ModStart> ( EFAULT, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"" <S2SV_ModEnd>, filename ) <S2SV_ModStart> ( EFAULT, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"" <S2SV_ModEnd>, filename ) <S2SV_ModStart> ( EFAULT, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"" <S2SV_ModEnd>, filename )",0
666,"<S2SV_ModStart> ; # endif # ifdef DEBUG_CONF ap_log_perror ( APLOG_MARK, APLOG_STARTUP | APLOG_NOERRNO, 0, mp, ""Merge <S2SV_blank> parent <S2SV_blank> %pp <S2SV_blank> child <S2SV_blank> %pp"", _parent, _child ) ; # endif",0
667,"<S2SV_ModStart> one, offset <S2SV_ModEnd> ; ssize_t count <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) Throw",0
668,<S2SV_ModStart> ( r = <S2SV_ModEnd> sshbuf_put_cstring ( b,1
669,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
670,"<S2SV_ModStart> client = user_data ; crm_trace ( ""Cleaning <S2SV_blank> up <S2SV_blank> after <S2SV_blank> client <S2SV_blank> disconnect: <S2SV_blank> %s/%s"", crm_str ( client -> name ), client -> id ) ; if ( client -> id!= NULL ) { if (! g_hash_table_remove ( client_list, client -> id ) ) { crm_err ( ""Client <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> the <S2SV_blank> hashtable"", client -> name ) ; } } crm_trace ( ""Destroying <S2SV_blank> %s <S2SV_blank> (%p)"", client -> name, user_data ) ; num_clients -- ; crm_trace ( ""Num <S2SV_blank> unfree\'d <S2SV_blank> clients: <S2SV_blank> %d"", num_clients ) <S2SV_ModStart> client -> name <S2SV_ModEnd> ) ; free <S2SV_ModStart> user ) ; <S2SV_ModEnd> crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client""",0
671,"<S2SV_ModStart> * uv ; if (! iswhite ( thread ) ) markvalue ( g, thread -> v ) ; <S2SV_ModStart> next ) { <S2SV_ModEnd> if (!",0
