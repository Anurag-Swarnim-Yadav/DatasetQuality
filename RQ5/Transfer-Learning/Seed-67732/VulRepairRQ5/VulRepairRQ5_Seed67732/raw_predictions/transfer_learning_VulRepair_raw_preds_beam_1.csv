,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
1,<S2SV_ModStart> ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ; if (,0
2,<S2SV_ModStart> writer = ( TrackWriter <S2SV_ModEnd> ) gf_list_get (,0
3,"<S2SV_ModStart> item ) { return cJSON_GetItemRecursive ( array, item, 0, 0, 0 ) <S2SV_ModEnd> ; } <S2SV_null>",0
4,"<S2SV_ModStart> u64 nr, <S2SV_ModEnd> struct pt_regs * <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",1
5,"<S2SV_ModStart> EXT4_EXTENTS_FLAG ) { <S2SV_ModEnd> struct grub_ext4_extent_header * <S2SV_ModStart> leaf ) { <S2SV_ModEnd> return - 1 <S2SV_ModStart> len ) ) { <S2SV_ModStart> return 0 ; } <S2SV_ModStart> start ) ; } } else { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; <S2SV_ModEnd> } return - <S2SV_ModStart> - 1 ; <S2SV_ModEnd> } return - <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
6,"<S2SV_ModStart> fdct16 ( const tran_low_t * in, tran_low_t * out <S2SV_ModEnd> ) { int <S2SV_ModStart> ] ) { tran_high_t step1 [ 16 ] ; tran_high_t step2 [ 16 ] ; tran_high_t step3 [ 16 ] ; tran_high_t input [ 16 ] ; tran_high_t <S2SV_ModEnd> temp1, temp2 <S2SV_ModStart> temp1, temp2 ; memset ( step1, 0, sizeof ( step1 ) ) ; memset ( step2, 0, sizeof ( step2 ) ) ; memset ( step3, 0, sizeof ( step3 ) ) <S2SV_ModStart> ] ; { tran_high_t <S2SV_ModEnd> s0, s1 <S2SV_ModStart>, s7 ; tran_high_t <S2SV_ModEnd> t0, t1 <S2SV_ModStart>, t3 ; tran_high_t <S2SV_ModEnd> x0, x1 <S2SV_ModStart> x2, x3 ; tran_high_t x1, x2, x3 ; tran_high_t x3 ; memset ( x0, 0, sizeof ( x0 ) ) ; tran_high_t x2 ; tran_low_t x3 ; memset ( x1, 0, sizeof ( x1 )",0
7,<S2SV_ModStart> ; if ( hlen > 0 &&,0
8,"<S2SV_ModStart> void search_filter_level ( VP9_COMMON * cm, struct loopfilter * lf, int min_filter_level, int max_filter_level ) { <S2SV_ModStart> partial_frame ) { <S2SV_ModEnd> const YV12_BUFFER_CONFIG * <S2SV_ModStart> * sd, YV12_CONTEXT * const cmi = & cm -> sd ; <S2SV_ModStart> partial_frame ) { <S2SV_ModEnd> const int min_filter_level <S2SV_ModStart> ) ; int filt_best ; int filt_direction <S2SV_ModEnd> = 0 ; <S2SV_ModStart> / 4 ; <S2SV_ModEnd> while ( filter_step <S2SV_ModStart> min_filter_level ) ; <S2SV_ModEnd> int bias = <S2SV_ModStart> * filter_step ; <S2SV_ModEnd> if ( cpi <S2SV_ModStart> twopass. section_intra_rating > 0 ) { int filt_err ; <S2SV_ModEnd> bias = ( <S2SV_ModStart> = bias * ( <S2SV_ModStart> twopass. section_intra_rating * 20 ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ) { int <S2SV_ModStart> partial_frame ) ; if ( filt_err < 0 ) { filt_err = try_filter_frame ( sd, cpi, filt_low, partial_frame ) ; ss_err [ filt_low ] = filt_err ; } else { filt_err = filt_err ; } } }",0
9,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 2, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",0
10,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ++ i ) vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( usehp ) vpx_write <S2SV_ModEnd> ( w,",1
11,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } else { <S2SV_ModEnd> request -> rxBlockSzx <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; },0
12,"<S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; }",0
13,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int construct_get_dest_keyring ( struct key * key, struct key_subsystem * subsystem, bool is_security <S2SV_ModEnd> ) { struct <S2SV_ModStart> * authkey ; int ret ; <S2SV_ModStart> dest_keyring ) ; ret = key_permission ( key, & subsystem -> security ) ; if ( ret ) { key_put ( key ) ; return ret ; } <S2SV_ModStart> ( dest_keyring ) ret = key_permission ( key, & subsystem -> security ) ; if ( ret ) { key_put ( key ) ; return ret ; } <S2SV_ModEnd> } case KEY_REQKEY_DEFL_THREAD_KEYRING <S2SV_ModStart> ) ; } ret = key_permission ( key, & subsystem -> security ) ; if ( ret ) { key_put ( key ) ; return ret ; }",0
14,<S2SV_ModStart> = create_spnego_ctx ( 0,0
15,<S2SV_ModStart> int len ; # ifdef HAVE_LOCALTIME <S2SV_ModStart> t ) ; # else tm = localtime_r ( & t ) ; # endif,0
16,<S2SV_ModStart> length ) ; if ( strlen ( password ) > 0 ) { <S2SV_ModStart> ) ) ; },0
17,<S2SV_ModStart> e == p || e - p > HOST_NAME_MAX,0
18,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",1
19,<S2SV_ModStart> = 0 ; if ( <S2SV_ModStart> & timeout )!= 1 ) { assert ( 0 ) ; return false ; } <S2SV_ModEnd> return FD_ISSET (,0
20,"<S2SV_ModStart> detect_transition_to_still ( struct twopass_stats * stats <S2SV_ModEnd>, int frame_interval <S2SV_ModStart> last_decay_rate ) { <S2SV_ModEnd> if ( frame_interval <S2SV_ModStart> ; if ( stats -> <S2SV_ModStart> j ; const TWO_PASS <S2SV_ModEnd> * position = <S2SV_ModStart> * position = stats <S2SV_ModEnd> -> stats_in ; <S2SV_ModStart> == input_stats ( stats <S2SV_ModEnd>, & tmp_next_frame <S2SV_ModStart> } reset_fpf_position ( stats <S2SV_ModEnd>, position ) <S2SV_ModStart> j == still_interval &&! ( twopass -> stats_in -> pcnt_inter && twopass -> stats_in -> pcnt_motion > 0.999 ) ) { <S2SV_ModEnd> trans_to_still = 1 <S2SV_ModStart> = 1 ; }",0
21,<S2SV_ModStart> inode ) ) { if ( io -> flag == EXT4_IO_UNWRITTEN ) { <S2SV_ModStart> size ) ; } else { ret = 0 ; } },0
22,"<S2SV_ModStart> alg ) { <S2SV_ModEnd> if (! <S2SV_ModStart> CRYPTO_ALG_NEED_FALLBACK ) ) { <S2SV_ModStart> name ) ; if (! try_module_get ( name ) ) { pr_err ( ""failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> module <S2SV_blank> %s: <S2SV_blank> %d\\n"", name, - EBUSY ) ; return ERR_PTR ( - EBUSY ) ; } }",0
23,<S2SV_ModStart> = GIT_PKT_NG ; if ( len < 3 ) goto out_err ; <S2SV_ModStart> += 3 ; len -= 3 ; <S2SV_ModStart>'<S2SV_blank>') ) || len > GIT_PKT_NG_MAX_LEN <S2SV_ModStart> + 1 ; len -= 1 ; <S2SV_ModStart> '\\n' ) ) || len > GIT_PKT_NG_MAX_LEN,0
24,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> BYTE flags ; UINT32 <S2SV_ModEnd> length ; Stream_Read_UINT32 <S2SV_ModStart> = NEGO_STATE_FINAL ; if ( Stream_GetRemainingLength ( s ) < length ) { WLog_ERR ( TAG, ""RDP_NEG_REQ: <S2SV_blank> RemainingLength: <S2SV_blank> %u"", Stream_GetRemainingLength ( s ) ) ; }",0
25,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; if (,0
26,"<S2SV_ModStart> mntent, path, false",0
27,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } io -> io_cleanup = mem_cleanup ;,1
28,<S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ) pixel & <S2SV_ModEnd> value + 0.5 <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ) pixel << <S2SV_ModEnd> value + 0.5,0
29,"<S2SV_ModStart> ) ) ; ret &= btif_config_set_int ( bdstr, ""BTIF_MAX_PINS"", ( int ) BTIF_MAX_PINS ) ;",0
30,<S2SV_ModStart> vpx_codec_enc_cfg_map_t * map ; ( void ) usage,0
31,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
32,"<S2SV_ModStart> void show_progress ( uint64_t frame_in, uint64_t <S2SV_ModEnd> frame_out, uint64_t",0
33,"<S2SV_ModStart> ; if ( mysql_vdb_error ( imp_sth -> result ) ) { do_error ( sth, JW_ERR_INTERNAL, ""MySQL <S2SV_blank> error <S2SV_blank> in <S2SV_blank> sth <S2SV_blank> statement"", NULL ) ; return Nullav ; } if (",0
34,"<S2SV_ModStart> NO_ERROR ; } if ( interface -> txState == ENC28J60_STATE_IDLE ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_TX_STATE_CHANGE ; } <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_ETXSTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXSTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ECON1",0
35,<S2SV_ModStart> ; value = ast2obj_string <S2SV_ModEnd> ( o -> <S2SV_ModStart> ; value = ast2obj_string <S2SV_ModEnd> ( o -> <S2SV_ModStart> ; value = ast2obj_string <S2SV_ModEnd> ( o ->,0
36,"<S2SV_ModStart> if ( page ) { if ( <S2SV_ModEnd> ( access ( <S2SV_ModStart> == 0 ) && ( unlink ( page ) > 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } } else if ( page && ( access ( page, R_OK ) == 0 ) <S2SV_ModStart> ) ) { if ( <S2SV_ModEnd> ( unlink ( <S2SV_ModStart> > 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } } else if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } else if ( unlink ( page ) > 0 ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } else if ( access ( page, R_OK ) == 0 ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } else if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response",0
37,"<S2SV_ModStart> low_var_thresh, int mb_rows, int mb_cols, int uv_rows, int uv_cols <S2SV_ModEnd> ) { double <S2SV_ModStart>.5 ) ; <S2SV_ModEnd> unsigned char * <S2SV_ModStart> pp_limits_buffer ; ; <S2SV_ModEnd> ( void ) <S2SV_ModStart> ) flag ; vpx_memset_down_and_across <S2SV_ModEnd> ( limits, <S2SV_ModStart> 16 ) ; vpx_post_proc_down_and_across <S2SV_ModEnd> ( limits, <S2SV_ModStart> 8 ) ; vpx_post_proc_down_and_across <S2SV_ModEnd> ( limits,",0
38,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; error = mb2_cache_entry_alloc ( ext4_mb_cache, GFP_NOFS, bh -> b_blocknr, hash, & ce ) ; if ( error ) return <S2SV_ModEnd> ; if ( <S2SV_ModStart> return ; } <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ( bh, ""inserting <S2SV_blank> [%x]"", ( int ) hash ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
39,<S2SV_ModStart> ) ) ; * code = 200 ; * rlen = 0 ;,0
40,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> = ip_options_get_alloc ( <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; if (! optlen ) return - ENOMEM ; <S2SV_ModEnd> copy_from_user ( opt <S2SV_ModStart> ( opt -> opt. <S2SV_ModStart>, opt, optlen ) ; <S2SV_ModEnd> return ip_options_get_finish (",0
41,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|truncated]"" <S2SV_ModEnd> ) ) ;",0
42,"<S2SV_ModStart> ) N_ ( ""E530: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'window\' <S2SV_blank> in <S2SV_blank> a <S2SV_blank> non-interactive <S2SV_blank> mode"" <S2SV_ModEnd> ) ; else",0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode <S2SV_ModStart>, & new_mode, & acl ) ; if ( ret <S2SV_ModEnd> ) goto out",0
44,"<S2SV_ModStart> size_t size ; size_t cps ; <S2SV_ModStart> / 8 ; cps = cmpt -> cps_ ; <S2SV_ModStart> ( cmpt -> cps_, cmpt -> width_, <S2SV_ModEnd> & size ) <S2SV_ModStart> cmpt -> cps_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ) { goto error ; } if ( size > ( size_t ) JAS_MAX ) { goto error ; } if ( cmpt -> stream_ == 0 ) { jas_stream_close2 ( cmpt -> stream_, size ) ; jas_image_cmpt_destroy ( cmpt ) ; } if ( size > 0 ) { if ( size - 1 > LONG_MAX ) { goto error ; } if ( jas_stream_seek ( cmpt -> stream_, size - 1, SEEK_SET ) < 0 || jas_stream_putc ( cmpt -> stream_, '\\0' ) < 0 || jas_stream_putc ( cmpt -> stream_, '\\0' ) < 0 ) { goto error ; } if ( jas_stream_seek ( cmpt ->",0
45,<S2SV_ModStart> dp == datalen || ( op & ASN1_OP__MATCHES_DPTR && flags & FLAG_MATCHED ) <S2SV_ModStart> ) || datalen >= ( size_t ) <S2SV_ModEnd> asn1_op_lengths [ op <S2SV_ModStart> ) || datalen >= ( size_t ) <S2SV_ModEnd> asn1_op_lengths [ op <S2SV_ModStart> ) || datalen >= ( size_t ) <S2SV_ModEnd> asn1_op_lengths [ op <S2SV_ModStart> ) || datalen >= ( size_t ) <S2SV_ModEnd> asn1_op_lengths [ op <S2SV_ModStart> ) || datalen >= ( size_t ) <S2SV_ModEnd> asn1_op_lengths [ op <S2SV_ModStart> ) || datalen >= ( size_t ) <S2SV_ModEnd> asn1_op_lengths [ op <S2SV_ModStart> ) || datalen >= ( size_t ) <S2SV_ModEnd> asn1_op_lengths [ op <S2SV_ModStart> ) || datalen >= ( size_t ) <S2SV_ModEnd> asn1_op_lengths [ op <S2SV_ModStart> ) || datalen >= ( size_t ) <S2SV_ModEnd> asn1_op_lengths [ op <S2SV_ModStart> ) || datalen >= ( size_t ) <S2SV_ModEnd> asn1_op_lengths [ op <S2SV_ModStart> ) || datalen >= ( size_t ) <S2SV_ModEnd> asn1_op_lengths [ op,0
46,"<S2SV_ModStart> * req, u32 acl_len, <S2SV_ModStart> size_t * acl_len, u32 * hdr_len <S2SV_ModStart> int status ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> xdr, OP_GETATTR, hdr_len <S2SV_ModStart>, & attrlen, hdr_len <S2SV_ModStart> recvd ) { * hdr_len = hdrlen ; <S2SV_ModStart> attrlen ) ; if ( acl_len )",0
47,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
48,"<S2SV_ModStart> ) ) { if ( smatch ( auth, ""APPWEB"" ) ) { uid = HTTP -> uid ; } else { uid = 0 ; } if ( snumber ( auth ) ) { if ( smatch ( auth, ""APPWEB"" ) ) { if ( HTTP -> uid == 0 ) { uid = HTTP -> uid ; } else { uid = HTTP -> gid ; } } if ( snumber ( auth ) ) { if ( HTTP -> uid == 0 ) { gid = HTTP -> gid ; } else { gid = userToID ( auth ) ; } } if ( snumber ( auth ) ) { if ( HTTP -> uid == 0 ) { gid = HTTP -> uid ; } else { gid = HTTP -> gid ; } } if ( smatch ( auth, ""APPWEB"" ) ) { if ( HTTP -> gid == 0 ) { gid = HTTP -> gid ; } else { gid = HTTP -> gid ; } } if ( mode == 0 ) { mode = 0 ; } } else { mode = 0 ; } } } else { dirs = auth ; auth = 0 ; } tok = dirs ; for ( tok = sclone ( dirs ) ; ( dir = stok ( tok, "","", & tok )",0
49,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> addr = VPX_MALLOC_L <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; <S2SV_ModEnd> if ( addr,0
50,"<S2SV_ModStart> int res ; unsigned <S2SV_ModStart> inodes ) ; unsigned <S2SV_ModStart> indexes ] ; if ( indexes > MAX_EXPORT_TABLE_SIZE ) { ERROR ( ""parse_exports_table: <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u) <S2SV_blank> for <S2SV_blank> export <S2SV_blank> table\\n"", MAX_EXPORT_TABLE_SIZE ) ; return FALSE ; }",0
51,<S2SV_ModStart> ; } else { <S2SV_ModStart> p1 ) ; },0
52,<S2SV_ModStart> = 0 ; int is_vp8_encoder = 0 ; int is_vp9_encoder = 0 ; <S2SV_ModStart> ; # endif is_vp8_encoder = 1 ; <S2SV_ModStart> } if ( is_vp8_encoder ) { config -> cfg. g_out_fn = NULL ; } else if ( <S2SV_ModStart> } if ( is_vp9_encoder ) { config -> cfg. g_out_fn = NULL ; } else if (,0
53,"<S2SV_ModStart> preverify_ok, callback_ctx, c -> opt -> option. client || c -> opt -> protocol <S2SV_ModStart> 1 ; } <S2SV_ModEnd> return 0 ;",0
54,"<S2SV_ModStart> ; if ( crypto_memneq <S2SV_ModEnd> ( cmac,",0
55,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> const uint64_t bits_used <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
56,"<S2SV_ModStart> EOFOp 0x07 char * magick ; size_t count <S2SV_ModEnd> ; Image * <S2SV_ModStart> ) ) ; <S2SV_ModEnd> magick = ReadBlob <S2SV_ModStart> * ) magick <S2SV_ModEnd> ) ; if <S2SV_ModStart>. x = ReadBlobSIZedShort <S2SV_ModEnd> ( image ) <S2SV_ModStart>. y = ReadBlobSIZedShort <S2SV_ModEnd> ( image ) <S2SV_ModStart>. columns = ReadBlobSIZedShort <S2SV_ModEnd> ( image ) <S2SV_ModStart>. rows = ReadBlobSIZedShort <S2SV_ModEnd> ( image ) <S2SV_ModStart> ( image, count <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( image, count <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( image, count <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( image, count <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( image, count <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( image, count <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( image, count <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( image, count <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( image, count <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( image, count <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( image, count <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( image, count <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( image, count <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( image, count <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( image, count <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( image, count <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( image, count <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( image, count",0
57,"<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> altsetting [ 0 ]. desc. bNumEndpoints < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; error = - EINVAL ; goto err_free_urb ; }",1
58,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
59,"<S2SV_ModStart> dir = ""/etc"" ; if ( access ( dir, F_OK ) == - 1 ) dir = ""/tmp""",0
60,<S2SV_ModStart> = value ; ps_pps -> i1_pic_type = value ;,0
61,"<S2SV_ModStart> ) ) { if ( n < 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; }",0
62,"<S2SV_ModStart> void vp9_setup_dst_planes ( struct vpx_encoder_state * bs, <S2SV_ModStart> mi_col ) { const <S2SV_ModStart> src -> alpha_buffer, bs -> alpha <S2SV_ModStart> src -> y_stride, bs -> alpha <S2SV_ModStart> src -> uv_stride, bs -> alpha <S2SV_ModStart> i ) { const <S2SV_ModStart> pd = & bs <S2SV_ModEnd> -> plane [",0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,<S2SV_ModStart> get_block = ocfs2_get_block <S2SV_ModEnd> ; return __blockdev_direct_IO,0
65,<S2SV_ModStart> ; if ( fgetc ( f )!= '\\n' ) { if ( <S2SV_ModStart> ; } } },0
66,"<S2SV_ModStart> n ) { <S2SV_ModEnd> char * str <S2SV_ModStart> * str ; <S2SV_ModEnd> char * str <S2SV_ModStart> * str ; <S2SV_ModEnd> char * str <S2SV_ModStart> * str ; <S2SV_ModEnd> assert ( expr_end <S2SV_ModStart> expr_end == ':' ) ; if (! fstring_parse_expr ( expr_start, expr_end, c, n ) ) return NULL ; return fstring_compile_expr_ex ( str, expr_start, expr_end, c, n <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
67,"<S2SV_ModStart> string ) { return cJSON_GetChild ( object, string, 0 ) <S2SV_ModEnd> ; } <S2SV_null>",0
68,<S2SV_ModStart> size ) ; if ( px -> ft == NULL ) { return FALSE ; },0
69,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2",0
70,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
71,"<S2SV_ModStart> int i ; const <S2SV_ModStart> src -> alpha_buffer, src -> uv_buffer, src -> uv_buffer <S2SV_ModStart> src -> alpha_stride, src -> alpha_stride, src -> uv_buffer",0
72,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; for ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> unlock : sock_put,0
73,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
74,<S2SV_ModStart> user ) { struct ipmi_dev * dev = user -> dev ; <S2SV_ModStart> _ipmi_destroy_user ( user ) ; put_device ( dev,0
75,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> sl = strlen,1
76,"<S2SV_ModStart> * for_ch ; <S2SV_ModEnd> REQ ( n <S2SV_ModStart> comp_for ) ; for ( ; ; ) { <S2SV_ModEnd> if ( TYPE <S2SV_ModStart> == ASYNC ) <S2SV_ModEnd> is_async = 1 <S2SV_ModStart> = 1 ; <S2SV_ModEnd> for_ch = CHILD <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) ; <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) ) <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) ) <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) ) <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) ) <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) ) <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) ) <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) ) <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) ) <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) ) <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) ) <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) ) <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) ) <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) ) <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) ) <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) ) <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) ) <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) ) <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) ) <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) ) <S2SV_ModStart> ( n, <S2SV_ModEnd> is",0
77,<S2SV_ModStart> NULL ; } if ( src -> curframe >= BPF_MAX_FUNC_ARGS ) return - EINVAL ;,0
78,"<S2SV_ModStart> * cpi, vpx_writer * w, <S2SV_ModStart> * mi_8x8, int mi_stride, int left_stride <S2SV_ModEnd> ) { const <S2SV_ModStart> = mi_8x8 [ <S2SV_ModEnd> mi_stride ] ; <S2SV_ModStart> = mi_8x8 [ <S2SV_ModEnd> left_mi ] ; <S2SV_ModStart> -> left_available? mi <S2SV_ModEnd> [ - 1 <S2SV_ModStart> segment_id ) ; if ( left_stride > 0 ) { <S2SV_ModStart> w ) ; } <S2SV_ModStart> == TX_MODE_SELECT ) { <S2SV_ModStart> w ) ; } <S2SV_ModStart> } } } if ( left_stride > 0 ) { <S2SV_ModStart> w ) ; }",0
79,"<S2SV_ModStart> maxn ) { int i ; <S2SV_ModStart> ""Action <S2SV_blank> overflow!!"" ) ; for ( i = 0 ; i < n ; i ++ ) { if ( actions [ i ]. SWF_ACTIONRECORD. ActionCode == SWF_ACTION_END ) { return 0 ; } } <S2SV_ModStart> ; # endif if ( n >= maxn ) { SWF_error ( ""Action <S2SV_blank> overflow!!"" ) ; return 0 ; }",0
80,<S2SV_ModStart> ) ) ; ND_TCHECK ( len ) ;,0
81,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
82,<S2SV_ModStart> zArg ) { assert ( pTable -> nModuleArg >= 0 ) ; <S2SV_ModStart> * ) * <S2SV_ModEnd> 2 + pTable <S2SV_ModStart> pTable -> nModuleArg <S2SV_ModEnd> ; char * <S2SV_ModStart> * * azModuleArg ; assert ( nBytes <= MAX_MODULE_ARG ),0
83,<S2SV_ModStart> j ] ; if ( j < 0 ) { j = 0 ; },0
84,<S2SV_ModStart> -> dmin ; if ( ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { <S2SV_ModStart> p ) ; },0
85,"<S2SV_ModStart> bfq_idle_slice_timer_body ( struct bfq_slice_data * sdata <S2SV_ModEnd> ) { struct <S2SV_ModStart> bfq_data * bfqd <S2SV_ModEnd> ; enum bfqq_expiration <S2SV_ModStart> long flags ; struct bfq_queue * bfqq ; <S2SV_ModStart> flags ) ; bfq_clear_bfqq_wait_request_from_sts <S2SV_ModEnd> ( bfqq ) <S2SV_ModStart> return ; } bfq_bfqq_expire ( bfqd, bfqq, sdata -> sts_id, reason ) ;",0
86,,1
87,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
88,"<S2SV_ModStart> diffBlock + diffBlockLength <S2SV_ModEnd> ) { PyMem_Free <S2SV_ModStart> newData + newpos + x <S2SV_ModStart> diffPtr, x + 1 <S2SV_ModStart> extraPtr, y + 1 <S2SV_ModStart> newData + newpos + y <S2SV_ModStart> newData + newpos + x <S2SV_ModStart> newData + newpos + x <S2SV_ModStart> newData + newpos + y <S2SV_ModStart> diffPtr, z + 1 <S2SV_ModStart> newData + newpos + z <S2SV_ModStart> newData + newpos + z <S2SV_ModStart> newData + newpos + z <S2SV_ModStart> newData + newpos + z <S2SV_ModStart> newData + newpos + z <S2SV_ModStart> newData + newpos + z <S2SV_ModStart> extraPtr, z + 1 <S2SV_ModStart> newData + newpos + z <S2SV_ModStart> newData + newpos + z <S2SV_ModStart> newData + newpos + z <S2SV_ModStart> newData + newpos + z <S2SV_ModStart> newData + newpos + z <S2SV_ModStart> diffPtr, z + 1 <S2SV_ModStart> newData + newpos + z <S2SV_ModStart> newData + newpos + z <S2SV_ModStart> newData + newpos + z <S2SV_ModStart> newData + newpos + z <S2SV_ModStart> newData + newpos + z <S2SV_ModStart> newData + newpos + z <S2SV_ModStart> newData + newpos + z <S2SV_ModStart> newData + newpos + z <S2SV_ModStart> newData + newpos + z <S2SV_ModStart> newData + new",0
89,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> np -> tclass ) ; rcu_read_unlock (,0
90,"<S2SV_ModStart> ; if ( image -> number_pixels > MAX_IMAGES ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if (",0
91,<S2SV_ModStart> data ) { ( void ) data ;,0
92,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
93,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
94,<S2SV_ModStart> ; } } if ( xd -> mbmi. mv_bias_offset!= - 1 ) { <S2SV_ModStart> mbmi_offset ; } },0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
97,<S2SV_ModStart> msicap msicap ; if ( msgnum < sizeof ( msicap ) ) return - EINVAL ;,0
98,"<S2SV_ModStart> -> ptr ; if ( cmd -> flags & REDIS_CMD_DENYPASS ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> authenticated"" ) ; return REDIS_OK ; }",0
99,<S2SV_ModStart> vpx_codec_err_t res ; int i ; for ( i = 0 ; i < ctx -> cfg. g_num_channels ; i ++ ) { if ( cfg -> g_channels [ i ] == 0 ) { cfg -> g_pass = VPX_RC_ONE_PASS ; } else { cfg -> g_pass = VPX_RC_ONE_PASS ; } } <S2SV_ModStart> ( ( ( ctx -> cfg. <S2SV_ModEnd> g_w!= ctx <S2SV_ModStart> ) || ( ctx -> cfg. <S2SV_ModEnd> g_h!= ctx <S2SV_ModStart> ) && ( ctx -> cfg. <S2SV_ModEnd> g_lag_in_frames > 1 <S2SV_ModStart> ; if ( cfg -> g_pass!= VPX_RC_ONE_PASS ) { if ( cfg -> g_channels [ i ] == 0 ) { cfg -> g_pass = VPX_RC_ONE_PASS ; } else { cfg -> g_pass = VPX_RC_ONE_PASS ; } } <S2SV_ModEnd> res = validate_config,0
100,<S2SV_ModStart> { cpi -> mb. <S2SV_ModStart> & cpi -> zbin_mode_boost <S2SV_ModEnd> ) ; },0
101,<S2SV_ModStart> info -> si_code!= SI_QUEUE ) <S2SV_ModEnd> return - EPERM <S2SV_ModStart> return - EPERM <S2SV_ModEnd> ; return do_send_specific,0
102,<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; if ( ptr -> size > GF_MAX_ADOBE_BOOTLOADER_INFO_FILE_SIZE ) return GF_ISOM_INVALID_FILE ;,0
103,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
104,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> -> state == fmode <S2SV_ModEnd> ) return ; <S2SV_ModStart> ; if ( fmode & FMODE_WRITE <S2SV_ModEnd> ) { if <S2SV_ModStart> { if ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> -> state = fmode <S2SV_ModEnd> ; } <S2SV_null>",0
105,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( ( Image * ) NULL ) ; }",0
106,<S2SV_ModStart> 0 ; } if ( len > SIZE_MAX - elem. in_sg [ 0 ]. iov_len ) { return 0 ; },0
107,<S2SV_ModStart> ( unsigned ) JPC_QCX_EXPN <S2SV_ModEnd> ( qcd -> <S2SV_ModStart> ( unsigned ) JPC_QCX_GETMANT <S2SV_ModEnd> ( qcd ->,0
108,<S2SV_ModStart> = AV_PIX_FMT_PAL8 ; c -> padded_bits = 0 ;,0
109,<S2SV_ModStart> ) ; } ND_TCHECK ( length - 1 ) ;,0
110,"<S2SV_ModStart> image_noffset ) { if ( noffset == - FDT_ERR_TRUNCATED || noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; } <S2SV_ModStart>, NULL ) ; if ( name == NULL ) continue",0
111,<S2SV_ModStart> rx_kfifo_lock ) ; ret = <S2SV_ModEnd> kfifo_alloc ( & <S2SV_ModStart> GFP_KERNEL ) ; if ( ret ) { kfree ( state ) ; <S2SV_ModEnd> return - ENOMEM <S2SV_ModStart> - ENOMEM ; },0
112,"<S2SV_ModStart> * iface, vpx_codec_dec_config_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> = cfg ; ctx -> config. dec -> flags = flags ; <S2SV_ModStart> = VPX_CODEC_OK ; <S2SV_ModEnd> } return res",0
113,<S2SV_ModStart> ; value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ ; value |= TJA1100_CONFIG1_MII_MODE_MII_10MHZ <S2SV_ModEnd> ; tja1100WritePhyReg (,0
114,"<S2SV_ModStart> ; if ( icmp_route_output <S2SV_ModEnd> ( net, <S2SV_ModStart> ( net, rt,",0
115,"<S2SV_ModStart> VPX_CODEC_CAP_XMA ) && ( num_enc > 1 ) ) { res = VPX_CODEC_INCAPABLE ; } else if ( ( flags & VPX_CODEC_USE_PSNR ) && ( num_enc > 1 ) ) { res = VPX_CODEC_INCAPABLE ; } else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( num_enc > 1 ) ) { res = VPX_CODEC_INCAPABLE ; } else { int i ; void * mem_loc = NULL ; if (! ( res = iface -> enc. mr_get_mem_loc ( cfg, & mem_loc ) ) ) { int i ; void * mem_loc = NULL ; if (! ( res = iface -> enc. mr_get_mem_loc ( cfg, & mem_loc ) ) ) { int i ; void * mem_loc = NULL ; if (! ( res = iface -> enc. mr_get_mem_loc ( cfg, & mem_loc ) ) ) { int i ; int i ; for ( i = 0 ;",0
116,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
117,"<S2SV_ModStart> counter ) ; if ( arg -> open_flags & NFS_O_CREAT ) <S2SV_ModStart> arg -> open_flags ) ; else if ( arg -> open_flags & NFS_O_CREAT ) encode_zero_copy ( xdr, sizeof ( * arg )",0
118,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ) ; return 0 <S2SV_ModStart> break ; } return error <S2SV_ModEnd> ; } <S2SV_null>,1
119,<S2SV_ModStart> ; if ( len < 1 ) return 0 ; if (,0
120,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
121,<S2SV_ModStart> goto trunc ; if ( lshp -> ls_length < sizeof ( struct lsa6_hdr ) ) goto trunc ;,0
122,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { ret = - EFAULT ; break ; } <S2SV_ModEnd> * obuf =",0
123,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
124,<S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ),0
125,"<S2SV_ModStart> costs, vp9_tree * <S2SV_ModStart> c ) { vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> ) ; const vpx_tree_index <S2SV_ModEnd> ii = tree",0
126,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
127,<S2SV_ModStart> & 0xffff ; if ( fmt >= EV_SZ || fmt > MAX_EVENT_SIZE ) return - EINVAL ;,0
128,"<S2SV_ModStart> fadst16 ( const tran_low_t * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t <S2SV_ModEnd> x0 = input <S2SV_ModStart> 15 ] ; tran_high_t <S2SV_ModEnd> x1 = input <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> x2 = input <S2SV_ModStart> 13 ] ; tran_high_t <S2SV_ModEnd> x3 = input <S2SV_ModStart> 2 ] ; tran_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 4 ] ; tran_high_t <S2SV_ModEnd> x5 = input <S2SV_ModStart> 9 ] ; tran_high_t <S2SV_ModEnd> x7 = input <S2SV_ModStart> 7 ] ; tran_high_t <S2SV_ModEnd> x9 = input <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> x10 = input <S2SV_ModStart> 5 ] ; tran_high_t <S2SV_ModEnd> x11 = input <S2SV_ModStart> 10 ] ; tran_high_t <S2SV_ModEnd> x12 = input <S2SV_ModStart> 12 ] ; tran_high_t <S2SV_ModEnd> x15 = input <S2SV_ModStart> 14 ] ; tran_high_t",0
129,<S2SV_ModStart> ; # if HAVE_LIBRETRO flags |= HAS_LIBRETRO ; # endif # if <S2SV_ModStart> ; # endif <S2SV_ModEnd> return flags &,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
131,"<S2SV_ModStart> * cpi, TileDataEnc * tile_data <S2SV_ModEnd>, MODE_INFO * <S2SV_ModStart> MODE_INFO * * mi_info <S2SV_ModEnd>, int * <S2SV_ModStart> bsize ) { TileInfo * tile = & tile_data -> tile_info ; <S2SV_ModStart> cm = & tile_data <S2SV_ModEnd> -> common ; <S2SV_ModStart> = num_8x8_blocks_wide_lookup [ mi_info <S2SV_ModEnd> -> mbmi. <S2SV_ModStart> = num_8x8_blocks_high_lookup [ mi_info <S2SV_ModEnd> -> mbmi. <S2SV_ModStart> ( cpi, tile_data <S2SV_ModEnd>, mi_8x8, <S2SV_ModStart> ( cpi, tile_data <S2SV_ModEnd>, mi_8x8, <S2SV_ModStart> ( cpi, tile_data <S2SV_ModEnd>, mi_8x8 + <S2SV_ModStart> ( cpi, tile_data <S2SV_ModEnd>, mi_8x8 + <S2SV_ModStart> ( cpi, tile_data <S2SV_ModEnd>, mi_8x8 +",0
132,<S2SV_ModStart> flags & CLIENT_CLOSE_AFTER_REPLY ) break ; if ( c -> flags & CLIENT_CLOSE_AFTER_REPLY_WITH_MESSAGE,0
133,<S2SV_ModStart> get_blocks_flags = EXT4_GET_BLOCKS_CREATE | EXT4_GET_BLOCKS_UNMAPPED,0
134,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart>, handle, hints, <S2SV_ModStart> & retval, <S2SV_ModEnd> p -> ai_flags <S2SV_ModStart> p -> ai_flags <S2SV_ModEnd>, & p <S2SV_ModStart> p -> ai_family <S2SV_ModEnd>, & p <S2SV_ModStart> p -> ai_socktype <S2SV_ModEnd>, p -> <S2SV_ModStart>, NULL, <S2SV_ModEnd> p -> ai_addrlen <S2SV_ModStart> p -> ai_addrlen <S2SV_ModEnd>, NULL ) <S2SV_ModStart> } if (! p ) { ret = OE_EAI_MEMORY ; goto done ; } if ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( p <S2SV_ModStart> ) ; } if ( p -> ai_family == AF_INET ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( p -> ai_addrlen > sizeof ( struct oe_addrinfo ) ) { ret = OE_EAI_MEMORY ; goto done ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( p <S2SV_ModStart> ) ; } } if ( head ) { <S2SV_ModStart> ) ; } }",0
135,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
136,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
137,"<S2SV_ModStart> __u16 size, const <S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
138,"<S2SV_ModStart> asdl_seq * body, asdl_seq * type_comment <S2SV_ModStart> = body ; p -> v. Module. type_comment = type_comment ;",0
139,"<S2SV_ModStart>, int64_t ts_end <S2SV_ModEnd> ) { struct <S2SV_ModStart> 4 ; # else int64_t ts_start, int64_t ts_end ; # <S2SV_ModStart> write_idx ) ; <S2SV_ModEnd> buf -> ts_start <S2SV_ModStart> } else { vpx_copy_and_extend_frame <S2SV_ModEnd> ( src, <S2SV_ModStart> ) ; } <S2SV_ModEnd> return 0 ;",0
140,"<S2SV_ModStart> method == LPF_PICK_FROM_Q && cpi -> oxcf. sharpness_level == 0 <S2SV_ModStart> int q = cpi -> oxcf. q_index <S2SV_ModEnd> ; int filt_guess <S2SV_ModStart> int filt_guess = ROUND_POWER_OF_TWO_INT <S2SV_ModEnd> ( q * <S2SV_ModStart> + 1015158, 16 <S2SV_ModEnd> ) ; if <S2SV_ModStart> } else { if ( cpi -> oxcf. sharpness_level == 0 ) { lf -> filter_level = 0 ; } else { <S2SV_ModStart> ) ; } }",0
141,<S2SV_ModStart> BTA_DmSetBdAddr ( bd_addr ) ; btif_storage_load_autopair_device_list (,0
142,"<S2SV_ModStart> int a = getint <S2SV_ModEnd> ( fmt,",0
143,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
144,"<S2SV_ModStart> vpx_codec_err_t res ; vpx_alg_priv_t * priv ; <S2SV_ModStart> ; else { priv = ctx -> priv -> alg_priv ; <S2SV_ModStart>. decode ( <S2SV_ModEnd> priv, data",0
145,"<S2SV_ModStart> inode * inode, struct directory_record * dir ) { struct isofs_sb_info * sbi = ISOFS_SB ( inode -> i_sb ) ; struct isofs_inode_info * ei = ISOFS_I ( inode ) ; <S2SV_ModEnd> struct super_block * <S2SV_ModStart> = isofs_get_ino ( dir -> block, dir -> offset <S2SV_ModEnd>, ISOFS_BUFFER_BITS (",0
146,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> ) ; } printf ( ""SetColor <S2SV_blank> %d <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", par, c, m, y, k ) ;",0
147,<S2SV_ModStart> self ) { if ( self -> dict ),0
148,<S2SV_ModStart> ( ) ; if (! a ) return 0 ; <S2SV_ModStart> i ) { if (! ( <S2SV_ModStart> ] ) ; <S2SV_ModEnd> suffix_object ( p,0
149,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_Format ( PyExc_TypeError, ""Module <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> must <S2SV_blank> be <S2SV_blank> a <S2SV_blank> list, <S2SV_blank> not <S2SV_blank> a <S2SV_blank> %.200s"", tmp -> ob_type -> tp_name ) ; goto failed ; } len = PyList_GET_SIZE ( tmp ) ; body = _Ta3_asdl_seq_new ( len, arena ) ; if ( body == NULL ) goto failed ; for ( i = 0 ; i < len ; i ++ ) { stmt_ty <S2SV_ModEnd> value ; res <S2SV_ModStart> ; res = obj2ast_stmt_no_flags <S2SV_ModEnd> ( PyList_GET_ITEM ( <S2SV_ModStart>, i ) <S2SV_ModEnd>, arena ) <S2SV_ModStart>, i, & <S2SV_ModStart> } else { int res ; Py_ssize_t len ; Py_ssize_t i ; tmp = _PyObject_GetAttrId ( obj, & PyId_type_ignores, & tmp ) ; if ( tmp == NULL ) { PyErr_SetString ( PyExc_",0
150,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
151,<S2SV_ModStart> ; if ( msg_sys -> msg_name == NULL ) { err = - ENOMEM ; goto out_freeiov ; } if ( <S2SV_ModStart> ; if ( msg_sys -> msg_control == NULL ) { err = - ENOMEM ; goto out_freeiov ; } if (,0
152,<S2SV_ModStart> buffer_head * dibh <S2SV_ModEnd> ; u64 bn <S2SV_ModStart> unsigned ptrs_per_blk ; <S2SV_ModEnd> unsigned end_of_metadata = <S2SV_ModStart> height - 1 <S2SV_ModEnd> ; enum alloc_state <S2SV_ModStart> ; if (! dibh ) return - EIO ; if (,0
153,"<S2SV_ModStart>, vpx_codec_iface_name ( get_codec_interface ( global <S2SV_ModEnd> ) ) ) <S2SV_ModStart> -> filename, get_codec_interface ( global ) <S2SV_ModEnd> ) ; } <S2SV_ModStart> ; SHOW ( g_max_frame_size ) ; SHOW (",0
154,"<S2SV_ModStart> ) ) { if ( ctxt -> parse -> error ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> the <S2SV_blank> value <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node.\\n"" ) ; }",0
155,"<S2SV_ModStart> { if ( safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> { if ( safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> { if ( safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.zshrc"",",0
156,<S2SV_ModStart> msix_tab_size ) { <S2SV_ModEnd> bzero ( msixcap,1
157,<S2SV_ModStart> ; if ( <S2SV_ModEnd> js_regexec ( re,0
158,"<S2SV_ModStart> case OFreshOID : { value * p ; p = Field ( ( value ) dest, 1 ) ; <S2SV_ModStart> ( Int_val ( p ) >= 0 ) caml_set_oo_id ( p ) ; } <S2SV_ModEnd> sp -- ;",0
159,"<S2SV_ModStart> = FALSE ; <S2SV_ModEnd> isr = ksz8851ReadReg <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( isr & KSZ8851_ISR_LCIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_ISR_TXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_ISR_RXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_RXMA_MASK <S2SV_ModStart> ( isr & KSZ8851_ISR_RXIE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, ier )",0
160,"<S2SV_ModStart> void encode_quantization ( struct vpx_write_bit_buffer <S2SV_ModEnd> * cm, <S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
161,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> p_buf, msglen )",1
162,<S2SV_ModStart> ; if ( fp == NULL ) goto sslerr ; if (,0
163,<S2SV_ModStart> ( ) ; if ( strlen ( t1_buf_array ) + strlen ( t1_line_array ) + 1 > T1_MAX_BUF_SIZE ) { t1_getline ( ) ; return ; },0
164,"<S2SV_ModStart> int mi_col, int subsize, int partition_idx <S2SV_ModEnd> ) { MACROBLOCKD <S2SV_ModStart> int bsl = b_width_log2_lookup [ partition_idx ] <S2SV_ModEnd>, hbs = <S2SV_ModStart> / 4 ; if ( bsize == BLOCK_8X8 ) { bsize = MIN ( bsize, MIN ( bsize, MIN ( bsize, MAX ( bsize, MIN ( bsize, MIN ( bsize, BLOCK_8X8 ) ) ) ) ) ] ; } <S2SV_ModEnd> assert ( bsize <S2SV_ModStart> case PARTITION_NONE : set_modeinfo_offsets_impl <S2SV_ModEnd> ( cm, <S2SV_ModStart> mi_col ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> case PARTITION_VERT : set_modeinfo_offsets_impl <S2SV_ModEnd> ( cm, <S2SV_ModStart> mi_col ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> case PARTITION_HORZ : set_modeinfo_offsets_impl <S2SV_ModEnd> ( cm, <S2SV_ModStart> mi_col ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> case PARTITION_HORD : set_modeinfo_offsets_impl <S2SV_ModEnd> ( cm, <S2SV_ModStart> mi_col ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> case PARTITION_HORD_HORD : set_modeinfo_offsets_impl <S2SV_ModEnd> (",0
165,"<S2SV_ModStart> key_ref ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) { ret = - ENOKEY ; goto error2 ; }",1
166,<S2SV_ModStart> ; if ( 0!= ps_dec -> u1_first_slice_in_pic ) { if ( <S2SV_ModStart> ps_dec ) ; },0
167,<S2SV_ModStart> var_off ) ; if (! src_known ||! dst_known ) { return - EINVAL ; },0
168,<S2SV_ModStart> cfile ) ; if (! posix_open ) { <S2SV_ModStart> filp ) ; },0
169,<S2SV_ModStart> ; if ( <S2SV_ModEnd> tcp_select_options ( sk <S2SV_ModStart> ; if ( <S2SV_ModEnd> tcp_select_options ( sk,0
170,"<S2SV_ModStart> svc_ctx ) { SvcInternal_t <S2SV_ModEnd> * const si <S2SV_ModStart> svc_ctx ) ; if ( si -> encode_frame_count <= 0 ) return vpx_svc_get_message ( svc_ctx ) ; svc_log ( svc_ctx, SVC_LOG_INFO, ""\\n"" ) ; int number_of_frames = 0, number_of_keyframes = 0 ; int i = 0 ; <S2SV_ModStart> svc_ctx ) ; <S2SV_ModEnd> if ( si <S2SV_ModStart> ""\\n"" ) ; <S2SV_ModEnd> for ( i <S2SV_ModStart> ++ i ) number_of_frames += <S2SV_ModEnd> encode_frame_count / si <S2SV_ModStart> + 1 ; <S2SV_ModEnd> svc_log ( svc_ctx <S2SV_ModStart> ""\\n"" ) ; <S2SV_ModEnd> for ( j <S2SV_ModStart> i ) { if ( i == 0 ) break ; <S2SV_ModStart> number_of_frames = encode_frame_count ; if ( i == 1 || i == 2 ) break ; number_of_frames += number_of_keyframes <S2SV_ModStart> number_of_frames = encode_frame_count <S2SV_ModEnd> ; } svc_log <S2SV_ModStart> ""\\n"" ) ; <S2SV_ModEnd> for ( j <S2SV_ModStart> ""\\n"" ) ; <S2SV_ModEnd> for ( j <S2SV_ModStart> ""\\n"" ) ; <S2SV_ModEnd> for ( j <S2SV_ModStart>",0
171,<S2SV_ModStart> = new_cols ; screen -> state -> pos = * delta ; <S2SV_ModStart> = new_cols ; <S2SV_ModEnd> return 0 ;,0
172,"<S2SV_ModStart> n ) { int literal_start = * str ; int literal_end = 0 ; int in_named_escape = 0 ; int result = 0 ; assert ( * literal == NULL ) ; for ( <S2SV_ModEnd> ; * str <S2SV_ModStart> ; for ( <S2SV_ModEnd> ; * str <S2SV_ModStart> ; } } literal_start = * str ; <S2SV_ModStart> ; } } <S2SV_ModEnd> literal_end = * <S2SV_ModStart> ; } } <S2SV_ModEnd> if ( literal_start <S2SV_ModStart> : if ( * str!= end ) { if ( raw ) * literal = PyUnicode_DecodeUTF8Stateful ( literal_start, literal_end - literal_start, NULL, NULL ) ; else * literal = decode_unicode_with_escapes ( c, n, literal_start, literal_end - literal_start ) ; if (! * literal ) return - 1 ; } return literal_start <S2SV_ModEnd> ; } <S2SV_null>",0
173,"<S2SV_ModStart> ( pd, g_settings_dump_location_default <S2SV_ModEnd> ) ; char",0
174,<S2SV_ModStart> ; if ( ( x + w ) > ( ptr -> width ) || ( x + w ) > ( ptr -> height ) || ( y + h ) > ( ptr -> height ) || ( y + h ) > ( ptr -> height ) ) { if ( <S2SV_ModStart> ) ; } },0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
176,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mv_stride <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, check_here <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_",0
177,"<S2SV_ModStart> * cpi, MACROBLOCKD * xd, <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> -> left_context ) <S2SV_ModEnd> ) ; for <S2SV_ModStart> + mi_col ; const <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> cm -> mi_grid_visible ; const MODE_INFO * * prev <S2SV_ModEnd> = cm -> <S2SV_ModStart> cm -> prev_mi_grid_visible ; const int mi_stride = cm -> mi_stride * mi_row + mi_col ; const MODE_INFO * * prev_mi = cm -> prev_mi_grid_visible ; int bsize ; cpi -> mb. source_variance = UINT_MAX ; vp9_zero ( cpi -> mb. pred_mv ) ; switch ( cpi -> sf. partition_search_type ) { case VAR_BASED_PARTITION : choose_partitioning ( cpi, tile, mi_row, mi_col ) ; nonrd_use_partition ( cpi, tile, mi_row, mi_col, mi, BLOCK_64X64, & dummy_rate, & dummy_dist ) ; break ; case SOURCE_VAR_BASED_PARTITION : set_offsets ( cp",0
178,<S2SV_ModStart> u_int8_t state ; if ( nf_ct_is_ping ( ct ) ) return false ;,0
179,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * opt, <S2SV_ModStart> * opt, u32 <S2SV_ModEnd> optlen ) { <S2SV_ModStart> & 3 ) rcu_assign_pointer ( <S2SV_ModStart> __data [ optlen <S2SV_ModEnd> ] = IPOPT_END <S2SV_ModStart> = IPOPT_END ; rcu_assign_pointer ( <S2SV_ModStart> optlen = optlen ; opt -> optlen = optlen ; if ( opt -> optlen > IP_OPTIONS_MAX ) return - EINVAL",0
180,"<S2SV_ModStart> ; if ( strcmp ( connection, ""Upgrade"" ) == 0 <S2SV_ModEnd> ) goto error <S2SV_ModStart> ; if ( strcmp ( ws_version, ""13"" ) == 0 <S2SV_ModEnd> ) goto error <S2SV_ModStart> ; if ( strcmp ( ws_version, ""14"" ) == 0 <S2SV_ModEnd> ) goto error <S2SV_ModStart> ; if ( strcmp ( ws_version, ""15"" ) == 0 <S2SV_ModEnd> ) goto error",0
181,"<S2SV_ModStart> nif = 0 ; struct rpcap_sockaddr * addr <S2SV_ModStart> -> description ) { <S2SV_ModStart> description ) ; addr = d -> name ; } <S2SV_ModStart> -> name ) { <S2SV_ModStart> name ) ; addr = d -> addresses ; } <S2SV_ModStart> : # endif if ( sock_bufferize ( NULL, sizeof ( struct rpcap_header ), NULL, & sendbufidx, RPCAP_NETBUF_SIZE, SOCK_DGRAM, sendbuf + RPCAP_NETBUF_SIZE - 1, nif + 1, sizeof ( struct rpcap_findalldevs_if ), addr ) == - 1 ) { rpcapd_log ( LOGPRIO_ERROR, ""Send <S2SV_blank> to <S2SV_blank> client <S2SV_blank> failed: <S2SV_blank> %s"", sendbuf ) ; return - 1 ; } <S2SV_ModStart> ) * 4 ) ; addr = address -> addr ; if ( addr -> sa_family!= AF_INET ) { if ( sock_bufferize ( NULL, sizeof ( struct rpcap_sockaddr ), NULL, & sendbufidx, RPCAP_NETBUF_SIZE, SOCK_DGRAM, sendbuf + RPCAP_NETBUF_SIZE, SOCK_DGRAM, nif + 1, sizeof ( struct",0
182,"<S2SV_ModStart>, client_uid, DUMP_DIR_MODE_DEFAULT <S2SV_ModEnd> ) ; if",0
183,<S2SV_ModStart> -> columns - 2 <S2SV_ModEnd> ) ; x,0
184,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
185,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns ) ; if ( status == MagickFalse ) { ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; }",0
186,<S2SV_ModStart> ; if ( len < 4 ) goto trunc ; if (,0
187,"<S2SV_ModStart>! ptrace_has_cap ( task_cred ( task ) <S2SV_ModEnd> -> user_ns,",0
188,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
189,<S2SV_ModStart> SEI_USER_DATA_REGISTERED_ITU_T_T35_CONFIG_SEI ) { if ( u4_payload_size < 4 ) { ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 0 ; ps_parse -> s_sei_params. i4_sei_user_data_registered_ITU_T_CONFIG_sei = 1 ; } else { <S2SV_ModStart> = 1 ; },0
190,<S2SV_ModStart> ; sde -> <S2SV_ModEnd> max_descq_cnt = SDMA_MAX_DESCQ_SIZE <S2SV_ModStart> -> max_descq_cnt = <S2SV_ModEnd> num_engines ; sde <S2SV_ModStart> -> max_descq_cnt = <S2SV_ModEnd> num_engines ; sde,0
191,"<S2SV_ModStart> name, int is_quick <S2SV_ModEnd> ) { int <S2SV_ModStart> ; if ( is_quick <S2SV_ModEnd> ) { my_off_t <S2SV_ModStart> ; if ( is_quick <S2SV_ModEnd> ) { my_off_t",0
192,<S2SV_ModStart> } pairs = palloc0 <S2SV_ModEnd> ( pcount *,0
193,"<S2SV_ModStart> val ) ; if (! <S2SV_ModStart>, val ) ) continue",0
194,"<S2SV_ModStart> ) ) { if ( clen < sizeof ( path. url ) ) { return bad_request ( c, 400, __LINE__ ) ; }",0
195,"<S2SV_ModStart> vp9_fht16x16_c ( const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> 256 ] ; tran_low_t <S2SV_ModEnd> * outptr = <S2SV_ModStart> & out [ 16 <S2SV_ModEnd> ] ; int <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16 <S2SV_ModStart> ++ j ) out <S2SV_ModEnd> [ j *",0
196,"<S2SV_ModStart> ; if ( flatpak_check_export_version ( new_data, new_data_len, cancellable, error ) ) goto out ; if (",0
197,"<S2SV_ModStart> char * temp_filename ; if ( strlen ( filename ) + 5 > 1024 ) { LOG_ERROR ( ""%s <S2SV_blank> invalid <S2SV_blank> filename <S2SV_blank> length <S2SV_blank> for <S2SV_blank> config <S2SV_blank> save."", __func__ ) ; return false ; } temp_filename <S2SV_ModStart> 5 ) ; <S2SV_ModEnd> strcpy ( temp_filename <S2SV_ModStart> node ) ; if ( strlen ( section -> name ) + 5 > 1024 ) { LOG_ERROR ( ""%s <S2SV_blank> invalid <S2SV_blank> filename <S2SV_blank> length <S2SV_blank> for <S2SV_blank> config <S2SV_blank> save."", __func__ ) ; return false ; } <S2SV_ModStart> ename ) ; if ( strlen ( entry -> key ) + 5 > 1024 ) { LOG_ERROR ( ""%s <S2SV_blank> invalid <S2SV_blank> entry <S2SV_blank> name <S2SV_blank> for <S2SV_blank> config <S2SV_blank> save."", __func__ ) ; return false ; } <S2SV_ModStart> sections ) ) { <S2SV_ModStart> fp ) ; } <S2SV_ModStart> fp ) ; if ( chmod ( temp_filename, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP ) == - 1 ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> change <S2SV_blank> file <S2SV_blank> permissions <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, filename, strerror ( errno ) ) ; goto error ; } if (",0
198,"<S2SV_ModStart> tptr, len ) ; ND_TCHECK2 ( * tptr, len <S2SV_ModStart> tptr, len ) ; ND_TCHECK2 ( * tptr, len <S2SV_ModStart> tptr, len ) ; ND_TCHECK2 ( * tptr, len <S2SV_ModStart> tptr, len ) ; ND_TCHECK2 ( * tptr, len <S2SV_ModStart> tptr, len ) ; ND_TCHECK2 ( * tptr, len <S2SV_ModStart> tptr, len ) ; ND_TCHECK2 ( * tptr, len <S2SV_ModStart> tptr, len ) ; ND_TCHECK2 ( * tptr, len <S2SV_ModStart> tptr, len ) ; ND_TCHECK2 ( * tptr, len <S2SV_ModStart> tptr, len ) ; ND_TCHECK2 ( * tptr, len <S2SV_ModStart> tptr, len ) ; ND_TCHECK2 ( * tptr, len <S2SV_ModStart> tptr, len ) ; ND_TCHECK2 ( * tptr, len <S2SV_ModStart> tptr, len ) ; ND_TCHECK2 ( * tptr, len <S2SV_ModStart> tptr, len ) ; ND_TCHECK2 ( * tptr, len <S2SV_ModStart> tptr, len ) ;",0
199,"<S2SV_ModStart>, target, ctxt -> lineNo <S2SV_ModEnd> ) ; ctxt <S2SV_ModStart>, target, ctxt -> lineNo <S2SV_ModEnd> ) ; if",0
200,"<S2SV_ModStart> ( ) ; char * _header = _getHeader ( ) ; <S2SV_ModStart> ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %lu\\r\\n"" <S2SV_ModEnd> ""%s"" ""\\r\\n"" ""%s"" <S2SV_ModStart> ""%s"" ""\\r\\n"" ""%s"", _header",0
201,"<S2SV_ModStart> ) ; } if ( copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> ( src, <S2SV_ModEnd> dest, getuid <S2SV_ModStart> getgid ( ), 0 <S2SV_ModEnd> ) < 0 <S2SV_ModStart> ; if ( copy_file_as_user <S2SV_ModEnd> ( dest, <S2SV_ModStart> | S_IWUSR ) <S2SV_ModEnd> < 0 )",0
202,<S2SV_ModStart>!= BFA_STATUS_OK ) { kfree ( fcstats ) ; <S2SV_ModStart> return NULL ; },1
203,"<S2SV_ModStart> -> x = Max ( 1.0f, <S2SV_ModStart> value -> x <S2SV_ModEnd> ) ) ; <S2SV_ModStart> -> y = Max ( 1.0f, <S2SV_ModStart> value -> y <S2SV_ModEnd> ) ) ; <S2SV_ModStart> -> z = Max ( 1.0f, <S2SV_ModStart> value -> z <S2SV_ModEnd> ) ) ;",0
204,<S2SV_ModStart> ; rec -> sasl_username_type = IRC_SASL_USERNAME_TYPE_UNKNOWN ; rec -> sasl_username_default <S2SV_ModEnd> = src -> <S2SV_ModStart> ; rec -> sasl_password_type = IRC_SASL_PASSWORD_TYPE_UNKNOWN <S2SV_ModEnd> ; * dest,0
205,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
206,"<S2SV_ModStart> o, datao ; if ( exif_mnote_data_canon_check ( n ) ) return",0
207,<S2SV_ModStart> ; if (! ( info -> mode & O_CREAT ) ) { error = 1 ; break ; } if (,0
208,"<S2SV_ModStart> olen ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> hex ; CURLcode res ; int res_alloc = 0 ; int res_convert = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> hex ) ; if (! ( <S2SV_ModStart>, 1 ) ) ) res_alloc = 1 <S2SV_ModStart> if ( res || res_alloc <S2SV_ModStart> olen = strindex + 1 ; else * olen = strindex + 1",0
209,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
210,<S2SV_ModStart> ; def -> <S2SV_ModEnd> session_setup = usm_session_init,0
211,<S2SV_ModStart> NULL ; return <S2SV_ModEnd> match ( prog,0
212,<S2SV_ModStart> idx ] ; <S2SV_ModEnd> switch ( action <S2SV_ModStart> ) ; } <S2SV_ModEnd> return SNMP_ERR_NOERROR ;,0
213,<S2SV_ModStart> pixels ++ ; if ( pixels < ( ( ssize_t ) number_pixels ) ) return ( - 1 ) ;,0
214,<S2SV_ModStart> timer ) ; spin_lock ( & timeri -> timer -> lock ) ; <S2SV_ModStart> open_list ) { <S2SV_ModEnd> list_move_tail ( & <S2SV_ModStart> = NULL ; list_del_init ( & slave -> ack_list ) ; } spin_unlock ( & timeri -> timer -> lock ) ; <S2SV_ModEnd> } mutex_unlock ( <S2SV_ModStart> register_mutex ) ; return 0 ;,0
215,<S2SV_ModStart> -> u1_dpb_commands_read ) { <S2SV_ModStart> ps_dec ) ; } else { ps_dec -> u4_bitoffset = 0 ; },0
216,"<S2SV_ModStart> decode ) { uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > info -> rasterSize || widthOverflow > 0 || heightOverflow > 0 ) { void * tmpRasterBits = reallocarray ( info -> rasterBits, newRasterSize ) ; <S2SV_ModStart> -> originalHeight ; <S2SV_ModEnd> if ( newRasterSize <S2SV_ModStart> 0 ) { free ( tmpRasterBits ) ; <S2SV_ModStart> } } } } <S2SV_ModStart> ) ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ; } free ( tmpRasterBits ) ;",0
217,<S2SV_ModStart> validator -> user ) || cherokee_buffer_is_empty ( & conn -> validator -> passwd,0
218,"<S2SV_ModStart> bus ] ; if ( bi == NULL ) { pr_err ( ""%s: <S2SV_blank> pci <S2SV_blank> [%s] <S2SV_blank> has <S2SV_blank> wrong <S2SV_blank> bus <S2SV_blank> %d <S2SV_blank> info\\n"", __func__, dev -> name, dev -> bus ) ; return ; } <S2SV_ModEnd> si = &",0
219,"<S2SV_ModStart>, timeo ) <S2SV_ModEnd> ; if (",1
220,<S2SV_ModStart> += 9 ; isalpha <S2SV_ModEnd> ( * s <S2SV_ModStart> &&! isspace ( * t ) && isalpha,0
221,"<S2SV_ModStart>. active_set ; if ( uipc_main. read_set == UINT_MAX ) { BTIF_TRACE_EVENT ( ""UIPC <S2SV_blank> READ <S2SV_blank> THREAD <S2SV_blank> EXITING"" ) ; uipc_main_cleanup ( ) ; uipc_main. tid = 0 ; BTIF_TRACE_EVENT ( ""UIPC <S2SV_blank> READ <S2SV_blank> THREAD <S2SV_blank> DONE"" ) ; break ; } <S2SV_ModStart> NULL, NULL <S2SV_ModEnd> ) ; if",0
222,<S2SV_ModStart> msixcap msixcap ; if <S2SV_ModEnd> ( msgnum >= <S2SV_ModStart> msix_table_init ( dev <S2SV_ModEnd> ) ; pci_populate_msixcap,0
223,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> max ) { return vpx_rb_read_literal <S2SV_ModEnd> ( rb,",0
224,<S2SV_ModStart> == NULL ) { retval = KRB5KDC_ERR_INVALID_DATA ; <S2SV_ModStart> goto cleanup ; },0
225,"<S2SV_ModStart> select_tx_mode ( const VP9_COMMON * cm, const VP9EncoderConfig * oxcf, const MV_REFERENCE_FRAME * frame_type <S2SV_ModEnd> ) { if <S2SV_ModStart> { if ( <S2SV_ModEnd> current_video_frame == 0 <S2SV_ModStart> else if ( <S2SV_ModEnd> sf. tx_size_search_method <S2SV_ModStart> else if ( <S2SV_ModEnd> sf. tx_size_search_method <S2SV_ModStart> tx_mode ; } <S2SV_ModEnd> } } <S2SV_null>",0
226,<S2SV_ModStart> ; if ( <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ]. ds_cnt > 0 ) { <S2SV_ModEnd> if ( magfact <S2SV_ModStart> ) ; } },0
227,<S2SV_ModStart> ; if ( buf2 <S2SV_ModEnd> -> size < <S2SV_ModStart> -> size < buf1 <S2SV_ModEnd> -> size ),0
228,<S2SV_ModStart> ) + size ; if ( unlikely (! sz ) ) return NULL,0
229,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,1
230,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
231,"<S2SV_ModStart> ; r = safe_set_nonblock ( & b -> state ) ; if ( r < 0 ) { log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> state: <S2SV_blank> %m"" ) ; goto fail ; } r =",0
232,<S2SV_ModStart> ( ) ; errors += test_curl_off_t_formatting ( ) ;,0
233,<S2SV_ModStart> -> lun ) { list_del ( & cmd -> eh_entry ) ; <S2SV_ModStart> cmd ) ; return ; },0
234,"<S2SV_ModStart>, end_col_offset ; bool is_func_body = false ; <S2SV_ModStart> 2 ; } is_func_body = true ; <S2SV_ModStart> ( is_async ) { <S2SV_ModStart> c_arena ) ; } else { is_func_body = false ; } <S2SV_ModStart>, returns, is_func_body,",0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,"<S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > WPGRecord. RecordLength ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
237,,1
238,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
239,"<S2SV_ModStart> if ( position >= <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> headend, 1, position - psf -> headend, psf ) ; psf -> headindex = position ; break ; case SEEK_CUR : if ( psf -> headindex + position < 0 ) break ; if ( psf -> headindex >= SIGNED_SIZEOF ( psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; if ( psf -> headindex + position <= psf -> headend ) { psf -> headindex += position ; break ; } ; if ( psf -> headindex + position <S2SV_ModStart> psf -> headend <S2SV_ModEnd> += psf_fread ( <S2SV_ModStart> -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> headend <S2SV_ModEnd>, 1, <S2SV_ModStart> psf -> headindex <S2SV_ModEnd> ) ; break <S2SV_ModStart> psf -> headindex <S2SV_ModEnd> = psf -> <S2SV_ModStart> psf -> headend <S2SV_ModEnd> ; break ;",0
240,<S2SV_ModStart> u4_ofst ) ; ps_cabac -> u4_ofst = 0 ;,0
241,<S2SV_ModStart> ; } } if ( off < ctx -> size ) { <S2SV_ModStart> ; } } },0
242,"<S2SV_ModStart> event ) { perf_event_disable_group ( event, false <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
243,<S2SV_ModStart> -> post_proc_flag = <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> noise_level ; # if CONFIG_VP9_DEBUG_VISUALIZER <S2SV_ModEnd> flags -> display_ref_frame_flag,0
244,"<S2SV_ModStart> = 0 ; if ( msg_len < sizeof ( struct olsr_msg4 ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> invalid <S2SV_blank> msg_len <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6, msg_len ) ) ; goto trunc ; }",0
245,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> int64_t store_reg [ <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vpx_usec_timer_start ( & <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,0
246,"<S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file <S2SV_blank> %s\\n"", src <S2SV_ModEnd> ) ; exit <S2SV_ModStart> 0 ) ; copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> ( dest, <S2SV_ModEnd> dest, 0600",0
247,<S2SV_ModStart> = 0 ; if ( sfb > 0x7FFF ) { return IXHEAACD_ERROR_FRAME_SIZE ; },0
248,<S2SV_ModStart> prov_spec = parsed_require_line <S2SV_ModEnd> ; spec = <S2SV_ModStart> r ) ; <S2SV_ModEnd> return lua_authz_provider_check_args ( <S2SV_ModStart> r ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
249,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> rows, image -> cols ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
250,<S2SV_ModStart> (! proto_end || proto_end - url < 3,0
251,<S2SV_ModStart> end = path ; if ( end > path_len ) return - FDT_ERR_NOSPACE,0
252,<S2SV_ModStart> ( server. <S2SV_ModEnd> bgrewritechildpid == - <S2SV_ModStart> ) ) { if ( server. maxidletime && server. maxidletime > 0 ) { <S2SV_ModStart> ) ) ; },0
253,"<S2SV_ModStart> -> protocol_timeout = g_timeout_add_millis <S2SV_ModEnd> ( 5,",0
254,<S2SV_ModStart> book -> dim && i < n,1
255,<S2SV_ModStart> action ) { if ( r < 0.0 ) { return ; },0
256,<S2SV_ModStart> this_h ) { int i ; <S2SV_ModStart> 16 ) { for ( i = 0 ; i < 2 ; i ++ ) { if ( sf -> predict [ i ] [ i ] == vp9_convolve8_copy ) { <S2SV_ModStart> -> predict [ i ] [ i ] [ 0 ] = vp9_convolve8_copy ; sf -> predict [ i ] [ i ] [ 1 ] = vp9_convolve8_avg ; sf -> predict [ i ] [ 2 ] [ 0 ] = vp9_convolve8_horiz ; sf -> predict [ i ] [ 2 ] [ 1 ] = vp9_convolve8_avg_horiz ; } else { sf -> predict [ i ] [ i ] [ 0 ] = vp9_convolve8_copy ; sf -> predict [ i ] [ i ] [ 1 ] = vp9_convolve8_avg ; sf -> predict [ i ] [ 2 ] [ 1 ] = vp9_convolve8_avg_horiz ; } } } else { sf -> predict [ i ] [ i ] [ 0 ] = vp9_convolve8_vert ; sf -> predict [ i ] [ 2 ] [ 1 ] = vp,0
257,<S2SV_ModStart> (! sock <S2SV_ModEnd> ) OE_RAISE_ERRNO ( <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
258,<S2SV_ModStart> ) ) { struct ipv6_pinfo * np ; <S2SV_ModStart> ) ) { np = ipv6_dereference ( <S2SV_ModStart> np -> opt ) ; if ( np ) { <S2SV_ModStart> ) ) ; },0
259,<S2SV_ModStart> ( ) ; unregister_net_subsys ( & sctp_net_ops ) ; sctp_v6_protosw_exit ( ) ; sctp_v4_protosw_exit ( ) ; sctp_v6_pf_exit ( ) ; sctp_sysctl_unregister ( ) ; <S2SV_ModStart> ( & sctp_net_ops <S2SV_ModEnd> ) ; free_pages,0
260,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> stream ) { int psnr_count ; <S2SV_ModStart> index ) ; psnr_count = ( stream -> psnr_count > 4 )? 4 : stream -> psnr_count ; <S2SV_ModStart> = sse_to_psnr ( psnr_count, <S2SV_ModStart> -> psnr_samples_total, <S2SV_ModEnd> 255.0, ( <S2SV_ModStart> ) stream -> psnr_sse_total, 255.0, stream -> psnr_samples_total <S2SV_ModEnd> ) ; fprintf",0
261,<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen (,1
262,"<S2SV_ModStart> ( ) ; <S2SV_ModEnd> if ( context <S2SV_ModStart> ERROR_OUT_OF_MEMORY ; } memset ( context -> txBuffer, 0, ETH_MAX_FRAME_SIZE ) ; memset ( context -> rxBuffer, 0, ETH_MAX_FRAME_SIZE ) ; <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ( interface, KSZ8851_MARH <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARM <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARL <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARL <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARL <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARL <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARL <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARL <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARL <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARL <S2SV_ModEnd>, htons (",0
263,"<S2SV_ModStart> skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
264,"<S2SV_ModStart> ; if ( fit_check_format_error <S2SV_ModEnd> ( fit, <S2SV_ModStart> { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> image <S2SV_blank> format <S2SV_blank> %s!\\n"" <S2SV_ModEnd>, prop_name ) <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; goto error <S2SV_ModEnd> ; } bootstage_mark <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; goto error <S2SV_ModEnd> ; } boot_mark <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; goto error <S2SV_ModEnd> ; } boot_mark <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> BOOTSTAGE_SUB_NO_SIZE ) ; goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> BOOTSTAGE_SUB_NO_SIZE ) ; goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> BOOTSTAGE_SUB_NO_SIZE ) ; goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> BOOTSTAGE_SUB_NO_SIZE ) ; goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; goto error <S2SV_ModEnd> ; } if <S2SV_ModStart> BOOTSTAGE_SUB",0
265,"<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> uinput_fd, UI_DEV_DESTROY )",1
266,<S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> = rc -> avg_frame_bandwidth <S2SV_ModEnd> ; # endif,1
267,"<S2SV_ModStart> i ], ""--allow-untrusted-credentials"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted-credentials"" ) ; if ( strcmp ( argv [ i ],",0
268,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
269,<S2SV_ModStart> ib ] ; dequant_ptr = d -> dequant ; coeff_ptr = b -> coeff ; qcoeff_ptr = d -> qcoeff ; dqcoeff_ptr = d -> dqcoeff ; i0 =! type ; eob = * d -> eob ; rdmult = mb -> rdmult * err_mult ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ; rddiv = mb -> rddiv ; best_mask [ 0 ] = best_mask [ 1 ] = 0 ; tokens [ eob ] [ 0 ]. token = DCT_EOB_TOKEN ; tokens [ eob ] [ 0 ]. qc = 0 ; * ( tokens [ eob ] + 1 ) = * ( tokens [ eob ] + 0 ) ; final_eob = eob ; <S2SV_ModStart> ; # if CONFIG_VP8_HIGHBITDEPTH <S2SV_ModEnd> if ( rc <S2SV_ModStart> ; # if CONFIG_VP8_HIGHBITDEPTH <S2SV_ModEnd> if ( rc <S2SV_ModStart> ; # if CONFIG_VP8_HIGHBITDEPTH <S2SV_ModEnd> if ( rc <S2SV_ModStart> ; # if CONFIG_VP8_HIGHBITDEPTH,0
270,<S2SV_ModStart> FN_REFLEN ] ; if ( strlen ( opt_basedir ) + 1 > sizeof ( buff ) - 1 ) { error = - 1 ; goto exit ; },0
271,"<S2SV_ModStart> decrypt_cb ) { ptrdiff_t <S2SV_ModEnd> n = ( <S2SV_ModStart> n = ( ptrdiff_t <S2SV_ModEnd> ) ( data_end <S2SV_ModStart> clear_buffer, n ) ; if ( n < 0 ) return - 1 ; if ( n > 10 ) n = 10 ; pbi -> decrypt_cb ( pbi -> decrypt_state, data, clear_buffer, n",0
272,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; <S2SV_ModEnd> exit_func : free_server_handle,0
273,"<S2SV_ModStart>, int * returnintra_y, int * returnintra_uv, int * returnintra_y, int * returnintra_distortion, int * returnintra_y <S2SV_ModEnd> ) { BLOCK <S2SV_ModStart> int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # else unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # endif # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX ; # endif <S2SV_ModEnd> # endif mode_mv <S2SV_ModStart>. intra_rd = INT_MAX ; best_mode. intra_y = INT_MAX ; best_mode. intra_uv = INT_MAX ; best_mode. intra_y = INT_MAX ; best_mode. intra_uv = INT_MAX ; best_mode. intra_y = INT_MAX ; best_mode. intra_uv_rd = INT_MAX ; best_mode. in",0
274,<S2SV_ModStart> goto error ; if ( <S2SV_ModEnd> statbuf. st_size <S2SV_ModStart> statbuf. st_size < 0 ) goto error ; h -> size = statbuf. st_size,0
275,"<S2SV_ModStart> u1_level_idc, u1_seq_parameter_set_id, u1_bit_depth_flag <S2SV_ModStart> ; if ( u1_bit_depth_flag <S2SV_ModEnd> ) { ps_seq <S2SV_ModStart> ; if ( u1_bit_depth_flag <S2SV_ModEnd> ) { ps_seq <S2SV_ModStart> ; if ( u1_bit_depth_flag <S2SV_ModEnd> ) { ps_seq <S2SV_ModStart> ; if ( u1_bit_depth_flag <S2SV_ModEnd> ) { ps_seq <S2SV_ModStart> ; if ( u1_bit_depth_flag <S2SV_ModEnd> ) { ps_seq <S2SV_ModStart> ; if ( u1_bit_depth_flag <S2SV_ModEnd> ) { ps_seq <S2SV_ModStart> ; if ( u1_bit_depth_flag <S2SV_ModEnd> ) { ps_seq <S2SV_ModStart> ; if ( u1_bit_depth_flag <S2SV_ModEnd> ) { ps_seq <S2SV_ModStart> ; if ( u1_bit_depth_flag <S2SV_ModEnd> ) { ps_seq <S2SV_ModStart> ; if ( u1_bit_depth_flag <S2SV_ModEnd> ) { ps_seq <S2SV_ModStart> ; if ( u1_bit_depth_flag <S2SV_ModEnd> ) { ps_seq <S2SV_ModStart> ; if ( u1_bit_depth_flag <S2SV_ModEnd> ) { ps_seq <S2SV_ModStart> ; if ( u1_bit_depth",0
276,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * params = ( vpx_svc_parameters_t * ) <S2SV_ModStart> -> cpi ; int i ; <S2SV_ModStart> return VPX_CODEC_INVALID_PARAM ; for ( i = 0 ; i < ctx -> num_frame_layers ; ++ i ) { if ( ctx -> frame_layers [ i ]. spatial_layer_id == params -> spatial_layer ) { cpi -> svc. spatial_layer_id = params -> spatial_layer ; } else { <S2SV_ModStart> -> svc. temporal_layer_id = params -> temporal_layer ; } } <S2SV_ModStart> -> svc. frame_buffer_idx <S2SV_ModEnd> = params -> <S2SV_ModStart> = params -> frame_buffer_idx <S2SV_ModEnd> ; cpi -> <S2SV_ModStart> = params -> frame_buffer_idx <S2SV_ModEnd> ; if (",0
277,"<S2SV_ModStart> out ) { uint32 bitspersample ; uint32 samplesperpixel ; uint16 input_compression, input_photometric ; uint32 width, length ; struct cpTag * p ; uint32 width <S2SV_ModEnd> ; CopyField ( <S2SV_ModStart> samplesperpixel ) ; TIFFGetFieldDefaulted ( in, TIFFTAG_IMAGEWIDTH, & width ) ; CopyField ( TIFFTAG_IMAGELENGTH, & length ) ; if ( width!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( TIFFTAG_BITSPERSAMPLE, bitspersample ) ; CopyField ( TIFFTAG_SAMPLESPERPIXEL, samplesperpixel ) ; if ( compression!= ( uint16 ) - 1 ) TIFFSetField ( out, TIFFTAG_COMPRESSION, compression ) ; else if ( compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_JPEGCOLORMODE, JPEGCOLORMODE_RGB ) ; } else if ( input_compression == COMPRESSION_YCBCR ) { uint16 subsamplinghor, subsamplingver ; TIFFGetFieldDefaulted ( in, TIFFTAG_YCBCRSUBSAMPLING, & subsampling",0
278,"<S2SV_ModStart> a ) { <S2SV_ModEnd> char * pn <S2SV_ModStart> = '\\0' ; if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else { <S2SV_ModStart> ) ; } <S2SV_ModEnd> } else if <S2SV_ModStart> ) ) { if ( <S2SV_ModStart> ARCHIVE_FAILED ) ; } <S2SV_ModEnd> } else { <S2SV_ModStart> ) ) { if ( <S2SV_ModStart> ARCHIVE_FAILED ) ; } <S2SV_ModEnd> } else { <S2SV_ModStart> ) ) { if ( <S2SV_ModStart> ARCHIVE_FAILED ) ; } <S2SV_ModEnd> } else { <S2SV_ModStart> ) ) { if ( <S2SV_ModStart> ARCHIVE_FAILED ) ; } } } } } return ( check_symlinks_unlink ( a ) <S2SV_ModEnd> ) ; }",0
279,"<S2SV_ModStart> unsigned int link_count ; struct kernel_lb_addr loc <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct indirectEntry * <S2SV_ModStart> extLength && ( ibh <S2SV_ModEnd> = udf_read_ptagged ( <S2SV_ModStart> -> i_sb, <S2SV_ModEnd> loc, 0 <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct indirectEntry * <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct indirectEntry * <S2SV_ModStart> -> i_sb, <S2SV_ModEnd> loc, 0 <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct kernel_lb_addr nbh <S2SV_ModStart> -> i_sb, <S2SV_ModEnd> loc, 0 <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct kernel_lb_addr nbh <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct kernel_lb_addr nbh <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct kernel_lb_addr nbh <S2SV_ModStart> -> i_sb, <S2SV_ModEnd> loc, 0 <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct kernel_lb_addr nbh <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct kernel_lb_addr nbh <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct kernel_lb_addr nbh <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct kernel_lb_addr nbh <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct kernel_lb_addr nbh <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct kernel_lb_addr nbh <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct kernel_lb_addr nb",0
280,"<S2SV_ModStart> get_uv_tx_size ( mbmi ) ; const int filter_level = get_filter_level ( lfi_n, mbmi <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm",0
281,"<S2SV_ModStart> mq_ops ) { struct blk_mq_hw_ctx * hctx ; <S2SV_ModStart> mq_flush_lock, flags ) ; hctx = q -> mq_ops -> hw_ctx_from_rq ( flush_rq <S2SV_ModStart> mq_ops ) ; if ( hctx ) { blk_mq_hw_put_ctx ( hctx ) ; }",0
282,<S2SV_ModStart> uint8_t val ; if ( addr > ( vdev -> config_len - sizeof ( val ) ) ) return ( uint32_t ) - 1 ; <S2SV_ModStart> vdev -> config + addr <S2SV_ModStart> ; if ( <S2SV_ModEnd> ldub_p ( vdev <S2SV_ModStart> addr ) ; if ( val == ( uint8_t ) - 1 ) return ( uint32_t ) - 1 ;,0
283,<S2SV_ModStart> ) ) { ovalue = NULL ;,0
284,<S2SV_ModStart> ( effect_param_t ) || * ( effect_param_t * ) pCmdData > * replySize,0
285,<S2SV_ModStart> ; } } if ( j + 1 < num_versions ) { <S2SV_ModStart> j ] ; },0
286,<S2SV_ModStart> 0x02 ) ; if ( crgram_len > 255 ) { <S2SV_ModStart> crgram_len ) ; },0
287,"<S2SV_ModStart> ) ) { if (! macvlan_cnt ) { dev_warn ( & pf -> pdev -> dev, ""macvlan <S2SV_blank> count <S2SV_blank> is <S2SV_blank> zero\\n"" ) ; return - EINVAL ; }",0
288,"<S2SV_ModStart> ; } } return send_msg ( g, ""E02"" ) ;",0
289,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
290,"<S2SV_ModStart> -> mb_row_offset ; if ( xd -> mb_row_offset < 0 ) { vpx_error ( ""decode_mb_rows(): <S2SV_blank> mb_row <S2SV_blank> offset <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds\\n"" ) ; return ; } <S2SV_ModStart> -> mb_row_offset ; if ( xd -> mb_row_offset < 0 ) { vpx_error ( ""decode_mb_rows(): <S2SV_blank> mb_row <S2SV_blank> offset <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds\\n"" ) ; return ; } <S2SV_ModStart> -> mb_row_offset ; if ( xd -> mb_row_offset < 0 ) { vpx_error ( ""decode_mb_rows(): <S2SV_blank> mb_row <S2SV_blank> offset <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds\\n"" ) ; return ; } <S2SV_ModStart> -> mb_row_offset ; if ( xd -> mb_row_offset < 0 ) { vpx_error ( ""decode_mb_rows(): <S2SV_blank> mb_row <S2SV_blank> offset <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds\\n"" ) ; return ; } <S2SV_ModStart> -> mb_row_offset ; if ( xd -> mb_row_offset < 0 ) { vpx_error ( ""decode_mb_rows(): <S2SV_blank> mb_row <S2SV_blank> offset <S2SV_blank> out <S2SV_blank>",0
291,"<S2SV_ModStart> ) ; } quantum_info = CloneImageInfo ( image_info ) ; if ( quantum_info == ( ImageInfo * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageInfo ( image ) ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( ReadBlob",0
292,"<S2SV_ModStart> len ) { return decode_unicode_with_escapes_internal ( c, n, s, len, 0 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
293,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> enum { YES <S2SV_ModStart>, targisdir, <S2SV_ModEnd> wrerrno = 0 <S2SV_ModStart> ""Unexpected <S2SV_blank> off_t/time_t <S2SV_blank> size"" ) ; <S2SV_ModEnd> mask = umask <S2SV_ModStart> ; if ( lstat <S2SV_ModEnd> ( targ, <S2SV_ModStart> ; if ( lstat <S2SV_ModEnd> ( targ, <S2SV_ModStart> ; if ( lstat <S2SV_ModEnd> ( targ,",0
294,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
295,<S2SV_ModStart> ; vp8_de_alloc_frame_buffers ( <S2SV_ModEnd> ) ; return,0
296,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
297,<S2SV_ModStart> u1_num_mbs ) { if ( ps_dec -> u2_cur_slice_idx >= ps_dec -> u2_cur_slice_idx_max ) { return ERROR_SLICE_SKIP_IN_SLICE ; },0
298,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> vterm_allocator_free ( screen,1
299,"<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & delay )",1
300,"<S2SV_ModStart> one, offset <S2SV_ModEnd> ; ssize_t count <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) Throw",0
301,"<S2SV_ModStart> value ) { cchar * name = sclone ( value ) ; <S2SV_ModStart> -> host, name <S2SV_ModEnd> ) ; httpSetRouteName",0
302,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
303,<S2SV_ModStart> ; if ( <S2SV_ModEnd> prev_hash ||! <S2SV_ModStart> ntime ) { <S2SV_ModEnd> free ( job_id,0
304,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
305,"<S2SV_ModStart> unused ) { _Py_IDENTIFIER ( __dict__ ) ; <S2SV_ModStart> PyObject * res <S2SV_ModEnd> ; PyObject * <S2SV_ModStart> dict ) { return build_type_reduce_impl <S2SV_ModEnd> ( ""O()O"", <S2SV_ModStart> self ), _PyObject_GetAttrId ( self, & PyId___dict__ ), dict <S2SV_ModEnd> ) ; } <S2SV_ModStart> } return res <S2SV_ModEnd> ; } <S2SV_null>",0
306,"<S2SV_ModStart> ) & desc, sizeof ( * desc )",1
307,"<S2SV_ModStart> perf_event * ) ; struct perf_event_context * ctx <S2SV_ModStart> case PERF_EVENT_IOC_PERIOD : ctx = perf_event_ctx_lock ( event ) ; <S2SV_ModStart> perf_event_period ( event, ctx <S2SV_ModStart> ret ; } <S2SV_ModEnd> default : return",0
308,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> * r, PREDICTION_MODE <S2SV_ModEnd> y_mode ) { <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode",0
309,<S2SV_ModStart> ; if (! cmd -> u. sha. src_len ) return 0 ; if (,0
310,"<S2SV_ModStart> iv ) ; if (! NIL_P ( viter ) ) { VALUE vpass_tmp ; rb_scan_args ( argc, argv, ""13"", & vpass_tmp, & viter_tmp ) ; rb_raise ( eCipherError, ""iter <S2SV_blank> must <S2SV_blank> be <S2SV_blank> an <S2SV_blank> integer"" ) ; } rb_check_args ( vpass_tmp, ""13"" ) ;",0
311,<S2SV_ModStart> s ) ; if (! s -> nic ) { device_destroy ( dev ) ; return - ENOMEM ; },0
312,<S2SV_ModStart> ; if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) ) { return NGHTTP2_ERR_BUSY ; } if (,0
313,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> x86_pmu. max_pebs_events <S2SV_ModStart> max_pebs_events ) ; <S2SV_ModEnd> return 0 ;,0
314,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * tp, <S2SV_ModEnd> TOKENEXTRA * stop <S2SV_ModStart> TOKENEXTRA * stop, vpx_writer * w2 <S2SV_ModStart> ] ; const vpx_extra_bit <S2SV_ModEnd> * const b <S2SV_ModStart> b = & vpx_extra_bits <S2SV_ModEnd> [ t ] <S2SV_ModStart> & 1 ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ; } vpx_write_bit <S2SV_ModEnd> ( w,",0
315,"<S2SV_ModStart>, uncompressed_hdr_size ; vpx_write_bit_buffer <S2SV_ModEnd> wb = { <S2SV_ModStart> 0 } ; vpx_write_bit_buffer <S2SV_ModEnd> saved_wb ; write_uncompressed_header <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> += uncompressed_hdr_size ; vpx_compute_update_table <S2SV_ModEnd> ( ) ; <S2SV_ModStart> += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb",0
316,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct net_device * <S2SV_ModEnd> dev_get_valid_name ( struct <S2SV_ModStart> net * net <S2SV_ModEnd>, const char <S2SV_ModStart> name ) { struct net_device * dev ; <S2SV_ModStart> '%' ) ) { dev = <S2SV_ModEnd> dev_alloc_name_ns ( net <S2SV_ModStart> name ) ; if ( IS_ERR ( dev ) ) return PTR_ERR ( dev ) ; } <S2SV_ModStart>!= name ) { dev = dev_get_by_name ( net, name ) ; if ( IS_ERR ( dev ) ) return PTR_ERR ( dev ) ; }",0
317,<S2SV_ModStart> struct ikev2_id id ; struct ikev2_id_ext id_ext <S2SV_ModStart> * typedata ; if ( item_len < sizeof ( struct ikev2_id_ext ) ) goto trunc ; <S2SV_ModStart> * typedata ; if ( item_len < sizeof ( struct ikev2_id_ext ) ) goto trunc ; <S2SV_ModStart> trunc ; } if ( id_len < sizeof ( struct ikev2_id_ext ) ) goto trunc ; <S2SV_ModStart> ) ) ; if ( id_len < sizeof ( struct ikev2_id_ext ) ) goto trunc ; <S2SV_ModStart> dumphex ) ; if ( id_len < sizeof ( struct ikev2_id_ext ) ) goto trunc ; <S2SV_ModStart> ) ) ; if ( id_len < sizeof ( struct ikev2_id_ext ) ) goto trunc ;,0
318,"<S2SV_ModStart> ) ) { jas_log ( ""Invalid <S2SV_blank> MIF_DATA <S2SV_blank> value <S2SV_blank> in <S2SV_blank> packet"" ) ;",0
319,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
320,"<S2SV_ModStart>, yt0_0, yt1_0, yt2_0, yt0_0, <S2SV_ModStart> ; WORD32 xh0_0, xh1_0, xh20_0, xh21_0, xl0_0, xl1_0, xl20_0, xl21_0 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 si10, si20, si30, co10, co20, co30 ; WORD64 mul_1, mul_2, mul_3, mul_4, mul_5, mul_6 ; WORD64 mul_7, mul_8, mul_9, mul_10, mul_11, mul_12 ; WORD32 * x_l1 ; WORD32 * x_l2 ; WORD32 * x_l2 ; WORD32 * x_h2 ; WORD32 * x_h2_1 ; WORD32 * x_l3 ; WORD32 * x",0
321,"<S2SV_ModStart> mntent -> mnt_dir, false",0
322,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
323,"<S2SV_ModStart> ( req ) ) ; rb_hash_aset ( env, server_port_val, req_server_port ( req )",0
324,<S2SV_ModStart> endif int col_type <S2SV_ModEnd> ; MYSQL_BIND * <S2SV_ModStart> ; # endif <S2SV_ModEnd> # endif D_imp_xxh <S2SV_ModStart> ; # endif <S2SV_ModEnd> imp_sth -> col_type <S2SV_ModStart> -> col_type = <S2SV_ModEnd> MYSQL_TYPE_INTO ; if <S2SV_ModStart> MYSQL_TYPE_INTO ; } <S2SV_ModEnd> # if MYSQL_VERSION_ID <S2SV_ModStart> -> col_type = <S2SV_ModEnd> MYSQL_TYPE_INTO ; if <S2SV_ModStart> MYSQL_TYPE_INTO ; } <S2SV_ModEnd> # endif if <S2SV_ModStart> -> col_type = <S2SV_ModEnd> MYSQL_TYPE_INTO ; if <S2SV_ModStart> MYSQL_TYPE_INTO ; } <S2SV_ModEnd> # endif if <S2SV_ModStart> -> col_type = <S2SV_ModEnd> MYSQL_TYPE_INTO ; if <S2SV_ModStart> MYSQL_TYPE_INTO ; } <S2SV_ModEnd> # if MYSQL_VERSION_ID <S2SV_ModStart> MYSQL_TYPE_INTO ; } <S2SV_ModEnd> # if MYSQL_VERSION_ID <S2SV_ModStart> MYSQL_TYPE_INTO ; } <S2SV_ModEnd> # if MYSQL_VERSION_ID <S2SV_ModStart> MYSQL_TYPE_INTO ; } <S2SV_ModEnd> # endif if <S2SV_ModStart> MYSQL_TYPE_INTO ; } <S2SV_ModEnd> # if MYSQL_VERSION_ID <S2SV_ModStart> MYSQL_TYPE_INTO ; } <S2SV_ModEnd> # endif if <S2SV_ModStart> MYSQL_TYPE_,0
325,"<S2SV_ModStart> need = 0 ; int max_row ; int max_col <S2SV_ModStart> screen, { max_row = screen -> max_row ; <S2SV_ModStart> need *= 4, max_col = screen -> max_col <S2SV_ModStart> screen, { max_row = screen -> max_row ;",0
326,"<S2SV_ModStart> fractionalDigits ) { if ( len == 0 ) { * str = 0 ; return ; } <S2SV_ModStart> val ) ) strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> < 0 ) strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> ) ; else strcpy <S2SV_ModEnd> ( str,",0
327,<S2SV_ModStart> ( unlikely ( crng_ready ( ) <S2SV_ModEnd> ) ) {,0
328,"<S2SV_ModStart> LEX_ID ) { snprintf ( str, len, ""%s"" <S2SV_ModEnd>, ""ID:"", <S2SV_ModStart> len ) ; strcat <S2SV_ModEnd> ( str, <S2SV_ModStart> ( ), ""%s"" <S2SV_ModEnd>, jslGetTokenValueAsString ( <S2SV_ModStart> LEX_STR ) { snprintf ( str, len, ""%s"" <S2SV_ModEnd>, ""String:\'"", <S2SV_ModStart> len ) ; strcat <S2SV_ModEnd> ( str, <S2SV_ModStart> jslGetTokenValueAsString ( ) <S2SV_ModEnd>, len ) <S2SV_ModStart> len ) ; strcat <S2SV_ModEnd> ( str,",0
329,,1
330,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si <S2SV_ModStart> = get_svc_internal ( ( SvcInternal_t * ),0
331,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
332,"<S2SV_ModStart> ) { return memcmp <S2SV_ModEnd> ( s1,",0
333,"<S2SV_ModStart> ( CMD_PRINT_HELP, ""help"", <S2SV_ModStart> ( CMD_PRINT_HELP, ""help"", <S2SV_ModStart> ( CMD_PRINT_DEFAULTS, ""default"",",0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,<S2SV_ModStart> ; if (! new_iv_set && <S2SV_ModStart> ; if (! new_iv_set &&,0
336,<S2SV_ModStart> ; } } if ( 0 == ps_dec -> u4_num_bytes_consumed ) { ps_dec -> u4_num_bytes_consumed = 1 ; },0
337,<S2SV_ModStart> <S2SV_null> <S2SV_null> static const <S2SV_ModStart> item ) { if ( item == NULL ) return NULL ;,0
338,<S2SV_ModStart>. encode ( & <S2SV_ModStart>. encode ( & <S2SV_ModStart>. encode ( &,0
339,"<S2SV_ModStart> ) ; } else if ( arg1 == - 1 ) { win_maximise ( - 1 ) ; win_set_chars ( rows0, cols0 ) ; }",0
340,<S2SV_ModStart> i < cols <S2SV_ModEnd> ; i ++,0
341,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> i -> width ) || ( <S2SV_ModEnd> i -> height <S2SV_ModStart> i -> height ) || ( <S2SV_ModEnd> context. curY <S2SV_ModStart> context. curY ),0
342,"<S2SV_ModStart> encode_term_subexp ( vp9_writer <S2SV_ModEnd> w, int <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",0
343,<S2SV_ModStart> = value ; ps_pps -> i1_pic_type = value ;,0
344,<S2SV_ModStart> ) ) { if (! format ) { va_end ( argptr ) ; return - 1 ; },0
345,"<S2SV_ModStart> ) break ; if ( sun_info. length > image -> columns * image -> rows ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
346,"<S2SV_ModStart> 0 ; } if ( copy_file_as_user ( src, dest, getuid ( ), getgid ( ), 0600 ) == - 1 ) { fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> copy <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; return 0 ; } <S2SV_ModStart> ; else { <S2SV_ModEnd> } _exit (",0
347,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> BLOCK_8X8 : return vpx_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> BLOCK_16X8 : return vpx_mse16x8 <S2SV_ModEnd> ; case BLOCK_8X16 <S2SV_ModStart> BLOCK_8X16 : return vpx_mse8x16 <S2SV_ModEnd> ; default : <S2SV_ModStart> default : return vpx_mse16x16 <S2SV_ModEnd> ; } },1
348,<S2SV_ModStart> ; if ( encoded_key_pack == NULL ) { retval = KRB5_E_INVAL ; goto done ; } if (,0
349,"<S2SV_ModStart> flags ) ; if ( vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } <S2SV_ModStart> vb. vb2_buf <S2SV_ModEnd> ) ; if",0
350,<S2SV_ModStart> size ) { if ( size > SIZE_MAX ) { zmalloc_oom_handler ( size ) ; return NULL ; },0
351,<S2SV_ModStart> & rxh -> serviceID <S2SV_ModEnd> ) && rxent,0
352,"<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len > MWIFIEX_MAX_SSID_LEN ) { mwifiex_dbg ( adapter, ERROR, ""Error: <S2SV_blank> Invalid <S2SV_blank> SSID <S2SV_blank> length <S2SV_blank> %d\\n"", req_ssid -> ssid_len ) ; return - EINVAL ; }",0
353,<S2SV_ModStart> ; if (! sfe -> valuelen ) return 0 ; if (,0
354,"<S2SV_ModStart> struct l2cap_conf_rfc rfc <S2SV_ModEnd> ; void * <S2SV_ModStart> sk ) ; rfc = { } ; <S2SV_ModStart> = L2CAP_MODE_ERTM ; if ( pi -> txwin_size > L2CAP_DEFAULT_TX_WINDOW ) { l2cap_add_conf_opt ( & ptr, L2CAP_CONF_TXWINDOW, 2, L2CAP_DEFAULT_TX_WINDOW ) ; } <S2SV_ModStart> = L2CAP_DEFAULT_MAX_RECEIVE ; if ( pi -> monitor_timeout > L2CAP_DEFAULT_MONITOR_TO ) { l2cap_add_conf_opt ( & ptr, L2CAP_CONF_MONITOR_TIMEOUT, 2, L2CAP_DEFAULT_MONITOR_TO ) ; } <S2SV_ModStart> = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO <S2SV_ModEnd> ) ; rfc <S2SV_ModStart> = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO <S2SV_ModEnd> ) ; rfc",0
355,"<S2SV_ModStart> { do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> r, MSG_WAITALL )",0
356,<S2SV_ModStart> ) ) { if ( ps_dec -> u4_nal_ref_idc == IDR_SLICE_NAL ) { <S2SV_ModStart> u4_length ) ; },0
357,<S2SV_ModStart> while ( pair <S2SV_ModEnd> ) { mprAddItem,1
358,"<S2SV_ModStart> delegation, int fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> = 0 ; fmode <S2SV_ModEnd> &= ( FMODE_READ <S2SV_ModStart> -> type & fmode <S2SV_ModEnd> )!= open_flags <S2SV_ModStart> -> stateid, fmode <S2SV_ModEnd> ) ; ret <S2SV_ModStart>, NULL, fmode <S2SV_ModEnd> ) ; ret",0
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,"<S2SV_ModStart> * xd, int64_t <S2SV_ModEnd> * out_rate_sum, <S2SV_ModStart> * out_dist_sum ) { int i ; int64_t rate_sum = 0 ; int64_t dist_sum = 0 ; const int ref = xd -> mi [ 0 ] -> mbmi. ref_frame [ 0 ] ; unsigned int sse ; const BLOCK_SIZE bs = get_plane_block_size ( bsize, pd ) ; if ( cpi -> speed > 4 ) { int64_t rate ; int64_t dist ; int64_t square_error = sse ; int quantizer = ( pd -> dequant [ 1 ] >> 3 ) ; if ( quantizer < 120 ) rate = ( square_error * ( 280 - quantizer ) ) >> 8 ; else rate = 0 ; dist = ( square_error * quantizer ) >> 8 ; rate_sum += rate ; dist_sum += dist ; } else <S2SV_ModStart> i == 0 && <S2SV_ModEnd> cpi -> speed <S2SV_ModStart> pd ) ; sse = <S2SV_ModEnd> cpi -> fn_ptr <S2SV_ModStart>. vf ( pd -> src. buf, <S2SV_ModStart>. stride, <S2SV_ModEnd> & sse ) <S2SV_ModStart> == 0 ) { <S2SV_ModStart> ] = sse <S2SV_ModEnd> ; if ( <S2SV_ModStart> 4",0
361,<S2SV_ModStart> } if ( pmd_trans_unstable <S2SV_ModEnd> ( pmd ),0
362,<S2SV_ModStart> { if ( index >= PAM_MAX_RESP_SIZE ) { return ( PAM_BUF_ERR ) ; } if ( <S2SV_ModStart> == NULL ) { free ( username ) ; <S2SV_ModStart> PAM_BUF_ERR ) ; },0
363,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> seg ) { vpx_read_tree <S2SV_ModEnd> ( r, <S2SV_ModStart> ( r, vpx_segment_tree <S2SV_ModEnd>, seg ->",0
364,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",1
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,"<S2SV_ModStart> depth ++ ; if ( depth == 0 ) { ND_PRINT ( ( ndo, ""Depth <S2SV_blank> reached\\n"" ) ) ; return ( buf ) ; }",0
367,<S2SV_ModStart> ERROR_INVALID_LENGTH ; } if ( length + 8 > netBufferGetLength ( buffer ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_INVALID_LENGTH ; } <S2SV_ModStart> length ) ; if ( length + 8 > netBufferGetLength ( context -> txBuffer ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_INVALID_LENGTH ; } <S2SV_ModStart> length ) ; if ( length + 8 > netBufferGetLength ( context -> txBuffer ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_INVALID_LENGTH ; } <S2SV_ModStart> RXQCR_SDA ) ; if ( length + 8 > netBufferGetLength ( context -> txBuffer ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_INVALID_LENGTH ; } <S2SV_ModStart> TXQCR_METFE ) ; if ( length + 8 > netBufferGetLength ( buffer ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_INVALID_LENGTH ; },0
368,<S2SV_ModStart> ; # endif mono_attach_maybe_stop ( ) ;,0
369,"<S2SV_ModStart>, x_e, x_f, x_9, x_a, x_b, x_c, x_d, x_e, x_f, x_g, x_h, x_i, x_j <S2SV_ModEnd> ; WORD32 n00 <S2SV_ModStart> x0 ++ ; x_g = * x0 ++ ; <S2SV_ModStart> + x_2 ; x_h = * x0 ++ ; <S2SV_ModStart> + x_3 ; x_h = * x0 ++ ; <S2SV_ModStart> + x_7 ; x_g = * x0 ++ ; <S2SV_ModStart> + x_8 ; x_h = * x0 ++ ; <S2SV_ModStart> + x_8 ; x_h = * x0 ++ ; <S2SV_ModStart> + x_8 ; x_h = * x0 ++ ; <S2SV_ModStart> + x_8 ; x_g = * x0 ++ ; <S2SV_ModStart> + x_8 ; x_h = * x0 ++ ; <S2SV_ModStart> + x_8 ; x_h = * x0 ++ ; <S2SV_ModStart> + x_8 ; x_h = * x0 ++ ; <S2SV_ModStart> + x_8 ; x_h = * x0 ++ ; <S2SV_ModStart> + x_8 ; x_h = * x0 ++ ; <S2SV_ModStart>",0
370,<S2SV_ModStart> ; if ( pmd_none_or_clear_bad ( pmd ) ) continue ; if ( <S2SV_ModStart> ) ) ) <S2SV_ModEnd> ret = unuse_pte_range,0
371,"<S2SV_ModStart>, frames ; <S2SV_ModEnd> if ( argc <S2SV_ModStart> ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage_usage ( ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( argv [ 2 ], & width, & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; usage_usage ( ) ; return 1 ; } if (! parse_dim ( argv [ 3 ], & target_width, & target_height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; usage_usage ( ) ; return 1 ; } fpin = fopen ( fin, ""rb"" ) ; if ( fpin == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> read\\n"", fin ) ; usage_usage ( ) ; return 1 ; } fpout = fopen ( fout, ""wb"" ) ; if ( fpout == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> write\\n"", fout ) ; usage_usage ( <S2SV_ModEnd> ) ; return <S2SV_ModStart>",0
372,"<S2SV_ModStart> num_fields ) { <S2SV_ModEnd> _Py_IDENTIFIER ( _attributes <S2SV_ModStart> i, result <S2SV_ModEnd> ; PyObject * <S2SV_ModStart> ) ; } return <S2SV_ModEnd> _PyObject_SetAttrId ( ( <S2SV_ModStart>, l ) <S2SV_ModEnd> ; } <S2SV_null>",0
373,<S2SV_ModStart> = VPX_CODEC_OK ; vpx_codec_alg_priv_t <S2SV_ModEnd> * priv ; <S2SV_ModStart> priv ) { vpx_codec_alg_priv_t * priv = vpx_calloc ( <S2SV_ModEnd> sizeof ( struct <S2SV_ModStart> sizeof ( struct vpx_codec_alg_priv_t <S2SV_ModEnd> ) ) ; <S2SV_ModStart> -> priv = vpx_calloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> enc ) { priv <S2SV_ModEnd> -> cfg = <S2SV_ModStart> enc = & priv <S2SV_ModEnd> -> cfg ; <S2SV_ModStart> ++ ) ; priv <S2SV_ModEnd> = extracfg_map [ <S2SV_ModStart> ]. cfg ; priv -> cfg = priv <S2SV_ModStart> ; priv -> <S2SV_ModEnd> pkt_list = & <S2SV_ModStart> = validate_config ( priv <S2SV_ModEnd> ) ; if <S2SV_ModStart> = validate_config ( priv <S2SV_ModEnd> ) ; if <S2SV_ModStart> = validate_config ( priv <S2SV_ModEnd> ) ; if <S2SV_ModStart> = validate_config ( priv <S2SV_ModEnd> ) ; if <S2SV_ModStart> = validate_config ( priv <S2SV_ModEnd> ) ; if <S2SV_ModStart> = validate_config ( priv <S2SV_ModEnd> ) ; if <S2SV_ModStart> = validate_config ( priv <S2SV_ModEnd> ) ; if <S2SV_ModStart> = validate_config ( priv <S2SV_ModEnd> ) ; if <S2SV_ModStart> = validate_config ( priv <S2SV_ModEnd> ) ; if <S2SV_ModStart> = validate_config ( priv <S2SV_ModEnd> ) ; if <S2SV_ModStart> = validate_config,0
374,"<S2SV_ModStart>, cnt_c, x <S2SV_ModEnd> ) ) <",0
375,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx ->,0
376,"<S2SV_ModStart> ) ) { if ( udf_is_valid_inode_link ( inode, indirections ) ) { <S2SV_ModStart> ibh ) ; }",0
377,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> ) & MISTAT_BUSY",0
378,<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline <S2SV_ModStart> fmt ) { const <S2SV_ModStart> * ptr ; const <S2SV_ModStart> = 0 ; if (! fmt ) return 1 ;,0
379,<S2SV_ModStart> DefragIPv6TooLargeTest ) ; # if CONFIG_IPV6_DEFAGS_TLS_VERSION >= 0x10100000L <S2SV_ModStart> DefragIPv6TooLargeTest ) ; # endif,0
380,<S2SV_ModStart> ; if ( object_length > 0 <S2SV_ModEnd> ) { new_object,0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,<S2SV_ModStart> p_sys -> b_eos_pulled || p_enc -> p_enc_state!= ENCODER_STATE_IDLE,0
384,<S2SV_ModStart> ; if ( bfilename. len &&,0
385,<S2SV_ModStart> 4 ) ; if ( len < 4 ) return NULL ;,0
386,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
387,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * fb ; if ( ctx -> pbi -> num_channels > MAX_CHANNELS ) { return VPX_CODEC_INVALID_PARAM ; } <S2SV_ModStart> * fb ; if ( <S2SV_ModStart>, & fb )!= VPX_OK ) { return VPX_CODEC_ERR_INVALID_PARAM ; } <S2SV_ModEnd> yuvconfig2image ( &",0
388,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> unit >= 4 <S2SV_ModStart> + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> skipping <S2SV_blank> frame <S2SV_blank> %d <S2SV_blank> bytes <S2SV_blank> "" ""(expected <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> found <S2SV_blank> %d).\\n"", unit, 4, frag -> data_size ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModEnd> if ( next_marker <S2SV_ModStart> ; if ( <S2SV_ModEnd> unit >= 4 <S2SV_ModStart> + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> skipping <S2SV_blank> frame <S2SV_blank> %d <S2SV_blank> bytes <S2SV_blank> "" ""(expected <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> got <S2SV_blank> %d).\\n"", unit, 4, frag -> data_size ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModEnd> if ( next_start <S2SV_ModStart> ; if ( <S2SV_ModEnd> unit >= 4 <S2SV_ModStart> + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> skipping <S2SV_blank> frame <S2SV_blank> %d <S2SV_blank> bytes <S2SV_blank> "" ""(expected <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> got <S2SV_blank> %d).\\n"", unit, 4,",0
389,"<S2SV_ModStart> expr_stmt ) ; REQ ( CHILD ( n, 0 ), testlist_ty ) ; <S2SV_ModStart> 1 ) { node * testlist = CHILD ( n, 0 ) ; <S2SV_ModStart> ( e, testlist -> kind == testlist? LINENO ( testlist ) : <S2SV_ModStart>, expr3, testlist -> kind == testlist? LINENO ( testlist ) :",0
390,"<S2SV_ModStart> int vp8_denoiser_filter_c ( <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * mc_running_avg, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * running_avg, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * mc_avg, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * mc_avg_y, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * running_avg, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * avg, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * avg, unsigned int motion_magnitude, int y_offset, int uv_offset ) { unsigned int r, c, i ; int sum_diff = 0 ; int adj_val [ 3 ] = { 3, 4, 6 } ; if ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) { for ( i = 0 ; i < 3 ; ++ i ) adj_val [ i ] += 1 ; } for ( r = 0 ; r < 16 ; ++ r ) { for ( c = 0 ; c < 16 ; ++ c ) { int diff = 0 ; int adjustment = 0 ; int absdiff = 0 ; diff = mc_avg_y [ c ] - sig [ c ] ; absdiff = abs ( diff ) ;",0
391,"<S2SV_ModStart> ) ) { if ( <S2SV_ModStart>, s ) < 0 ) { sockPtr -> keep = TRUE ; } <S2SV_ModEnd> } else { <S2SV_ModStart> ) ) { if ( <S2SV_ModStart>, s ) < 0 ) { sockPtr -> keep = TRUE ; } <S2SV_ModEnd> } else { <S2SV_ModStart> ) ) { if ( <S2SV_ModStart>, s ) < 0 ) { sockPtr -> keep = TRUE ; } <S2SV_ModEnd> } else { <S2SV_ModStart> ) ) { if ( <S2SV_ModStart>, s ) < 0 ) { sockPtr -> keep = TRUE ; } <S2SV_ModEnd> } else { <S2SV_ModStart> ) ) { if ( <S2SV_ModStart>, s ) < 0 ) { sockPtr -> keep = TRUE ; } <S2SV_ModEnd> } else { <S2SV_ModStart> ) ) { if ( <S2SV_ModStart>, s ) < 0 ) { sockPtr -> keep = TRUE ; } <S2SV_ModEnd> } else { <S2SV_ModStart> ) ) { if ( <S2SV_ModStart>, s ) < 0 ) { sockPtr -> keep = TRUE ; } <S2SV_ModEnd> } else { <S2SV_ModStart> ) ) { if ( <S2SV_ModStart>, s ) < 0 ) { sockPtr -> keep = TRUE ; } <S2SV_ModEnd> } else { <S2SV_ModStart> ) ) { if ( <S2SV_ModStart>, s ) < 0 ) { sockPtr -> keep = TRUE ; } <S2SV_ModEnd> } else {",0
392,<S2SV_ModStart> ret = 0 ; xtregs -> cp0 &= ~ XTENSA_CP_MASK,0
393,"<S2SV_ModStart> size ) ; if ( message -> length == 0 ) { osLog ( LOG_WARNING, ""Error <S2SV_blank> reading <S2SV_blank> from <S2SV_blank> IP <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> queue: <S2SV_blank> %s"", queueItem -> name ) ; error = SOCKET_ERROR_INVALID_DATA ; }",0
394,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" <S2SV_ModStart> cg_item ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
395,<S2SV_ModStart> int error ; int old_block = EXT2_I ( inode ) -> i_block_group ; <S2SV_ModStart> new_bh ) ; new_block = <S2SV_ModStart> new_bh ) ; if ( new_block ),0
396,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> map ) { vpx_active_map_t * const active_map = NULL ; <S2SV_ModStart> if (! vp9_set_active_map_from_scratch <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> -> cpi, <S2SV_ModEnd> active_map, map",0
397,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
398,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
399,"<S2SV_ModStart> * imsy, 3 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) ; } for ( n = 0 ; n < 16 ; n ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 0, 0, 0 ) ; } for ( i = 0 ; i < 24 ; i ++ ) { sixel_palet [ n ++ ] = SIXEL_RGB ( 0, 0, 0 ) ; } for ( ; n < SIXEL_PALETTE_MAX ; n ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 0, 0, 0 ) ; } for ( ; n < SIXEL_PALETTE_MAX ; n ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 0, 0, 0 ) ; } for ( ; n < SIXEL_PALETTE_MAX ; n ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 0, 0, 0 ) ; } for ( ; n < SIXEL_PALETTE_MAX ; n ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 0, 0, 0",0
400,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vpx_ref_frame_t * ) ; YV12_BUFFER_CONFIG sd <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; if ( frame -> frame_type == VPX_FRAME_TYPE_VP9 ) { <S2SV_ModStart> sd ) ; } else { return VPX_CODEC_INVALID_PARAM ; }",0
401,<S2SV_ModStart> u1_num_mbs ) { if ( ps_dec -> u2_cur_slice_idx >= ps_dec -> u2_cur_slice_idx_max ) { return ERROR_SLICE_SKIP_IN_SLICE ; },0
402,<S2SV_ModStart> ; UWORD32 u4_x_dst_offset <S2SV_ModEnd> = 0 ; <S2SV_ModStart> ) ; else { <S2SV_ModStart> ps_dec ) ; },0
403,"<S2SV_ModStart> VP9_LAST_FLAG ) { int i ; <S2SV_ModStart> const YV12_BUFFER_CONFIG * const cfg ; for ( i = 0 ; i < cm -> num_frame_bufs ; i ++ ) { YV12_BUFFER * const frame = <S2SV_ModEnd> cm -> frame_bufs <S2SV_ModStart> [ cm -> frame_bufs_map <S2SV_ModEnd> [ i ] <S2SV_ModStart> [ i ] <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ; else vpx_yv12_copy_frame_from_buf <S2SV_ModEnd> ( cfg, <S2SV_ModStart> ) ; } }",0
404,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
405,"<S2SV_ModStart> TX_SIZE tx_size = get_plane_tx_size ( bsize, pd ) <S2SV_ModEnd> ; const BLOCK_SIZE <S2SV_ModStart> int i ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) { int r, c ; int max_blocks_wide = num_4x4_w ; int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> ( 5 + pd -> subsampling_y ) ) ; i = 0 ; for ( r = 0 ; r < num_4x4_h ; r += ( 1 << tx_size ) ) { for ( c = 0 ; c < num_4x4_w ; c += ( 1 << tx_size ) ) { if ( r < max_blocks_wide && c < max_blocks_wide",0
406,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 4 ) ; <S2SV_ModEnd> src += src_stride",0
407,"<S2SV_ModStart> nrow ) { uint32 rowoffset = img -> row_offset ; <S2SV_ModStart> = rowsperstrip - rowoffset <S2SV_ModEnd> ; nrow = <S2SV_ModStart> -> row_offset ; offset_row = row + rowoffset ; <S2SV_ModStart> buf == NULL || offset_row >= h <S2SV_ModStart> { if ( rowoffset > h ) { TIFFErrorExt ( tif, ""GTStripSeparate"", ""Negative <S2SV_blank> rowoffset <S2SV_blank> (%u) <S2SV_blank> > <S2SV_blank> %u"", row, h ) ; return ( 0 ) ; } if ( <S2SV_ModStart> } if ( rowoffset > h ) { TIFFErrorExt ( tif, ""GTStripSeparate"", ""Negative <S2SV_blank> rowoffset <S2SV_blank> (%u) <S2SV_blank> > <S2SV_blank> %u"", row, h ) ; return ( 0 ) ; } if (",0
408,<S2SV_ModStart> ; } } <S2SV_ModEnd> return 0 ;,0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. size <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. size <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
410,<S2SV_ModStart> num & ( 1U << number <S2SV_ModEnd> ) ) return <S2SV_ModStart> num - ( 1U <S2SV_ModEnd> << number ),0
411,"<S2SV_ModStart> int w = img -> fmt [ plane ]. width <S2SV_ModEnd> ; const int <S2SV_ModStart> int h = img -> fmt [ plane ]. height <S2SV_ModEnd> ; int y <S2SV_ModStart> { if ( read <S2SV_ModEnd> ( buf, <S2SV_ModStart>, file ) == w ) return 0 ; if ( read ( buf, 1, w, file )",0
412,"<S2SV_ModStart> = NULL ; uint8_t * avp_buf = NULL ; <S2SV_ModStart> uint16_t last_block_len ; int ret = 0 ; <S2SV_ModStart> 1 ; } avp_buf = & avp -> buf ; <S2SV_ModStart> md5_ctx ) ; ret = check_avp_len ( avp, p1, attr_len ) ; if ( ret!= 0 ) { log_warn ( ""l2tp: <S2SV_blank> AVP <S2SV_blank> received <S2SV_blank> with <S2SV_blank> wrong <S2SV_blank> length <S2SV_blank> %d\\n"", ret ) ; return ret ; }",0
413,<S2SV_ModStart> EVP_CTRL_AEAD_SET_IV_FIXED : { int i ; <S2SV_ModStart> return 0 ; for ( i = 0 ; i < 3 ; i ++ ) { if ( actx -> iv [ i ]!= 0 ) break ; },0
414,"<S2SV_ModStart> 0, 0, 0",0
415,"<S2SV_ModStart>, sk ) ; if (! sk ) return - EINVAL",0
416,<S2SV_ModStart> MT_CPTYPE_PASSSALT ) { if ( cpkt. length > MT_PASS_SALT_MAX_LEN ) { return - 1 ; },0
417,<S2SV_ModStart> MUTT_ABORT ) { imap_cmd_step ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto imap_cmd_step ( adata ) ; <S2SV_ModEnd> } } } <S2SV_ModStart> ) ) { imap_cmd_step ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto imap_cmd_step ( adata ) <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ; goto imap_cmd_step ( adata ) <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto imap_cmd_step ( adata ) <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto imap_cmd_step ( adata ) <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto imap_cmd_step ( adata ) <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto imap_cmd_step ( adata ) <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto imap_cmd_step ( adata ) <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto imap_cmd_step ( adata ) <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto imap_cmd_step ( adata ) <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto imap_cmd_step ( adata ) <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto imap_cmd_step ( adata ) <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto imap_cmd_step ( adata ) <S2SV_ModEnd> ; } },0
418,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
419,"<S2SV_ModStart> ) ) ; if ( <S2SV_ModStart>, 0 ) < 0 ) return ; memset ( line, 0, sizeof ( line ) ) ; if ( send ( gpsd_sock, line, 22, 0 ) <S2SV_ModStart> 0 ) return ; memset ( line, 0, sizeof ( line ) ) <S2SV_ModStart> 0 ) return ; memset ( line, 0, sizeof ( line ) ) <S2SV_ModStart> 0 ) return ; memset ( line, 0, sizeof ( line ) )",0
420,"<S2SV_ModStart> remainder, & rlen ) ; if ( ret ) return ret ; if ( rlen == 0 <S2SV_ModEnd> ) return ASN1_BAD_ID",0
421,"<S2SV_ModStart> * slavename ; char * password_copy ; <S2SV_ModStart> } # endif password_copy = malloc ( strlen ( user -> password ) + 1 ) ; if (! password_copy ) { syslog ( LOG_ERR, _ ( ""login <S2SV_blank> failed, <S2SV_blank> incorrect <S2SV_blank> username <S2SV_blank> or <S2SV_blank> password\\r\\n"" ) ) ; abort_connection ( curconn, pkthdr, _ ( ""Login <S2SV_blank> failed, <S2SV_blank> incorrect <S2SV_blank> username <S2SV_blank> or <S2SV_blank> password\\r\\n"" ) ) ; return ; } <S2SV_ModStart> = 0 ; strncpy ( password_copy <S2SV_ModEnd> + 1, <S2SV_ModStart> ; memcpy ( password_copy <S2SV_ModEnd> + 1 + <S2SV_ModStart> state ) ; if ( strlen ( user -> password ) + 17 > 100 ) { syslog ( LOG_ERR, _ ( ""login <S2SV_blank> failed, <S2SV_blank> incorrect <S2SV_blank> username <S2SV_blank> or <S2SV_blank> password\\r\\n"" ) ) ; abort_connection ( curconn, pkthdr, _ ( ""Login <S2SV_blank> failed, <S2SV_blank> incorrect <S2SV_blank> username <S2SV_blank> or <S2SV_blank> password\\r\\n"" ) ) ; return ; } <S2SV_ModStart> ) md5data, password_copy <S2SV_ModEnd> + 17 ) <S2SV_ModStart> ) md5sum + 1 ) ; free ( password_copy <S2SV_ModEnd> ) ; if",0
422,"<S2SV_ModStart> ; if ( unicode_compare_with_ascii_string <S2SV_ModEnd> ( name, <S2SV_ModStart> { if ( unicode_compare_with_ASCII_string <S2SV_ModEnd> ( name,",0
423,<S2SV_ModStart> off } ; if ( str == NULL ) { return - 1 ; },0
424,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
425,<S2SV_ModStart> ) ; return TRUE <S2SV_ModEnd> ; } credssp_free,0
426,"<S2SV_ModStart> size_t s ; size_t r ; <S2SV_ModStart> ) ) { if ( tcount >= MAX_FUJI_ENTRIES ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Too <S2SV_blank> many <S2SV_blank> entries <S2SV_blank> in <S2SV_blank> the <S2SV_blank> file"" ) ; break ; }",0
427,<S2SV_ModStart> bd_addr ) { if ( bd_addr -> bd_type!= BT_BD_ADDR_TYPE_RANDOM ) return BT_STATUS_INVALID_ARGS ;,0
428,"<S2SV_ModStart> int i ; size_t avail ; size_t <S2SV_ModEnd> expect ; txid <S2SV_ModStart> 4 ) ; expect = 8 + 8 + nxip * 8 ; if ( nxip < 0 || nxip > avail || expect > avail ) goto bad_format ; xmin = pq_getmsgint64 ( buf ) ; xmax = pq_getmsgint64 ( buf ) ; if ( xmin == 0 || xmin > xmax || xmax > MAX_TXID ) goto bad_format ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; snap -> nxip = nxip ; SET_VARSIZE ( snap, TXID_SNAPSHOT_SIZE ( nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last || cur < xmin || cur >= xmax ) goto bad_format ; snap -> xip [ i ] = cur ; last = cur ; } PG_RETURN_POINTER ( snap ) ; bad_format : elog ( ERROR, ""invalid <S2SV_blank> snapshot <S2SV_blank> data"" ) ; return ( Datum ) NULL <S2SV_ModEnd> ; } <S2SV_null>",0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. size <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
430,<S2SV_ModStart> ( epoll_ ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> OE_EINVAL ) ; epoll -> running = 1 ;,0
431,"<S2SV_ModStart> ( CMD_INITIALIZE, section_ptr <S2SV_ModEnd>, NULL ) <S2SV_ModStart> ( CMD_INITIALIZE, section_ptr <S2SV_ModEnd>, NULL )",0
432,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_PHNUM_MIN : * ( size_t * ) val = ms -> elf_phnum_min ; return 0 ;,0
433,"<S2SV_ModStart> offset ) { struct file * file = page_file_mapping ( page ) ; <S2SV_ModStart> EXT4_JOURNAL ( page <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; if ( file ) { if ( try_to_free_page ( file, page ) ) { unlock_page ( file ) ; put_page ( page ) ; return ; } } if (",0
434,<S2SV_ModStart> ++ ) { if ( i + 1 >= movie -> moov -> trackList -> nb_entries ) return GF_OUT_OF_MEM ; <S2SV_ModStart> + 1 ) ; if (! trak ) continue <S2SV_ModStart> ) ; } if ( i + 1 >= movie -> moov -> trackList -> nb_entries ) return GF_OUT_OF_MEM ;,0
435,"<S2SV_ModStart> 17 ] ; unsigned <S2SV_ModStart> = 0 ; strlcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> password, 82, sizeof ( md5data ) <S2SV_ModStart> = '\\0' ; strlcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> password ), pass_salt, sizeof ( md5sum ) <S2SV_ModEnd> ) ; md5_init",0
436,<S2SV_ModStart> ; if ( _mibindex_max > 0 <S2SV_ModEnd> ) { int <S2SV_ModStart> { int i ; if ( _mibindex_max > 0 ) SNMP_FREE ( _mibindex_max ),0
437,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
438,<S2SV_ModStart> ( ) ; g_hash_table_remove_all ( headers ) ;,0
439,"<S2SV_ModStart> -> y_buffer ; if ( src_ybc -> y_height > MAX_Y_HEIGHT ) { return ; } <S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst,",0
440,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> left_context ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( &",0
441,"<S2SV_ModStart>, obj_tlen ; u_int <S2SV_ModEnd> offset ; u_int <S2SV_ModStart> ; if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""LMP <S2SV_blank> object <S2SV_blank> header <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if (",0
442,"<S2SV_ModStart> mbmi, const MV_VAL <S2SV_ModEnd> mvs [ 2 <S2SV_ModStart> i ) { <S2SV_ModEnd> MV * ref <S2SV_ModStart> * ref = <S2SV_ModEnd> mbmi -> ref_mvs",0
443,"<S2SV_ModStart> ) ; } res = vpx_codec_enc_config_default ( encoder -> interface ( ), & cfg, 0 ) ; if ( res ) die_codec ( & codec, & cfg ) ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> ) ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ; } if (! vpx_image_write_to_stream ( & raw, & codec, & writer, 1 ) ) { die ( ""Failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> image."" ) ; }",0
444,<S2SV_ModStart> ; if ( skb_out == NULL ) goto free ; if (,0
445,<S2SV_ModStart> ) return ; if (! <S2SV_ModStart> netsnmp_mibindex_load ( ) ) { SNMP_FREE ( env_var ) ; return ; } <S2SV_ModEnd> DEBUGMSGTL ( (,0
446,"<S2SV_ModStart> { fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ], O_RDWR ) <S2SV_ModStart> 1 ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_KEY ) ) <S2SV_ModStart> EV_REL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_SYN ) ) <S2SV_ModStart> x ++ ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> ]. mapped_id )",0
447,<S2SV_ModStart> i ++ ) vp9_free_frame_buffer_ext <S2SV_ModEnd> ( & ctx,0
448,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s, <S2SV_ModStart> & 1 ) vpx_lpf_vertical_4 <S2SV_ModEnd> ( s +",0
449,"<S2SV_ModStart> krb5_error_code iakerb_alloc_context ( krb5_auth_ctx_t * auth_ctx, <S2SV_ModStart> = 0 ; ctx -> auth_ctx = auth_ctx ;",0
450,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> bitmapDC = CreateCompatibleDC",1
451,<S2SV_ModStart> ; while ( ( <S2SV_ModStart> )!= START_CODE_PREFIX ) && ( ps_stream -> u4_offset < ps_stream -> u4_max_offset ),1
452,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { kfree ( string ) ; <S2SV_ModStart> - EINVAL ; }",0
453,<S2SV_ModStart> ) ) { MonoClass * klass = ( MonoClass * ) imethod -> object. vtable -> klass ; <S2SV_ModStart> ) ) { MonoClass * klass = ( MonoClass * ) imethod -> object. vtable -> klass ; <S2SV_ModStart> ) ) { MonoClass * klass = ( MonoClass * ) imethod -> object. vtable -> klass ; <S2SV_ModStart> ) ) { MonoClass * klass = ( MonoClass * ) imethod -> object. vtable -> klass ; <S2SV_ModStart> ) ) { klass = ( MonoClass * ) imethod -> object. vtable -> klass ; <S2SV_ModStart> ) ) { klass = ( MonoClass * ) imethod -> object. vtable -> klass ; <S2SV_ModStart> ) ) { klass = ( MonoClass * ) imethod -> object. vtable -> klass ; <S2SV_ModStart> ) ) { klass = ( MonoClass * ) imethod -> object. vtable -> klass ; <S2SV_ModStart> ) ) { klass = ( MonoClass * ) imethod -> object. vtable -> klass ; <S2SV_ModStart> ) ) { klass = ( MonoClass * ) imethod -> object. vtable -> klass ;,0
454,<S2SV_ModStart> ) ] ; long <S2SV_ModEnd> tmp ; if <S2SV_ModStart> count ) ) { uml_exitcode = tmp ; <S2SV_ModStart> - EFAULT ; },0
455,<S2SV_ModStart> char * last_elem = NULL <S2SV_ModStart> size_t len ; const char * l_origin = NULL ; <S2SV_ModStart> ( ( ( strncasecmp <S2SV_ModEnd> ( & name <S2SV_ModStart> ) || ( strncasecmp <S2SV_ModEnd> ( & name <S2SV_ModStart> 'O' )? l_origin <S2SV_ModEnd> : l ->,0
456,"<S2SV_ModStart> ) ; } if ( decInst -> numSamples < 1 ) { DEC_API_TRC ( ""H264SwDecInit# <S2SV_blank> ERROR: <S2SV_blank> numSamples <S2SV_blank> <= <S2SV_blank> 1"" ) ; return ( H264SWDEC_PARAM_ERR ) ; }",0
457,<S2SV_ModStart> drop ; } <S2SV_ModEnd> opt -> optlen,0
458,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; break ; }",0
459,<S2SV_ModStart> errout ; return 1 <S2SV_ModEnd> ; } <S2SV_null>,0
460,<S2SV_ModStart> krb5_key_data * key_data ; int max_size = 0 <S2SV_ModStart> == NULL ) { max_size = 0 ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { max_size = 0 ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { max_size = 0 ; <S2SV_ModStart> goto cleanup ; },0
461,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject <S2SV_ModStart> PyObject * value, Py_ssize_t len <S2SV_ModStart> * old_item ; if ( len > self -> memo_len ) { return - 1 ; }",0
462,<S2SV_ModStart> ] ) ; if ( nByte < 0 ) { rc = SQLITE_NOMEM ; goto pCsr ; } <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> memcpy ( pCsr,0
463,"<S2SV_ModStart> filp ) { struct sock_inode * si = <S2SV_ModEnd> SOCKET_I ( inode <S2SV_ModStart> ( inode ) ; struct sockaddr_storage addr ; struct sockaddr_storage * ss ; int ret ; si = & si -> si_addr ; ret = inet_sock_id ( inode -> i_sb, & addr ) ; if ( ret ) { printk ( KERN_ERR ""inet_sock_id <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s\\n"", inet_ntoa ( addr ) ) ; return ret ; } sock_release ( SOCKET_I ( inode ) ) ; sock_put ( inode",0
464,"<S2SV_ModStart> * orelse, bool is_block, <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. is_block = is_block",0
465,"<S2SV_ModStart> char * name, my_bool is_header <S2SV_ModStart> ; if ( is_header ) { if ( <S2SV_ModStart> ) ; } }",0
466,"<S2SV_ModStart> return ""Invalid <S2SV_blank> request <S2SV_blank> ID"" ; case NGHTTP2_ERR_INVALID_REQUEST_ID : return ""Invalid <S2SV_blank> request <S2SV_blank> ID"" ;",0
467,"<S2SV_ModStart> UINT error ; if (! <S2SV_ModStart>, eventId ) ||! <S2SV_ModEnd> Stream_Read_UINT32 ( s <S2SV_ModStart>, pduLength ) ) { WLog_ERR ( TAG, ""Failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> eventId <S2SV_blank> %u <S2SV_blank> or <S2SV_blank> pduLength <S2SV_blank> %u"", eventId, pduLength ) ; return error ; } <S2SV_ModEnd> # ifdef WITH_DEBUG_RDPEI",0
468,"<S2SV_ModStart> -> socket, ZMQ_MAX_RECV_SIZE <S2SV_ModEnd> ) ; if",0
469,"<S2SV_ModStart> struct flowi6 fl6 ; int ret <S2SV_ModStart> daddr ) ; ret = ip6_xmit ( sk, skb, & fl6, np -> opt, np -> tclass ) ; <S2SV_ModStart> = 1 ; if ( ret < 0 ) return ret ; <S2SV_ModStart>, & fl6 <S2SV_ModEnd> ) ; }",0
470,<S2SV_ModStart> ) break ; if ( quantum_info -> quantum_type == QuantumTypeNone ),0
471,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> UINT32 failureCode ; if (! Stream_IsEmpty ( s ) ) { <S2SV_ModStart> = NEGO_STATE_FAIL ; },0
472,"<S2SV_ModStart> 0 ; int <S2SV_ModEnd> result = RLC_OK <S2SV_ModStart> = RLC_OK ; int i, <S2SV_ModStart> 8 ) ; for ( i = 0 ; i < 8 ; i ++ ) { bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, RSA_PUB ) ; * p_len = m_len ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; } <S2SV_ModStart> if ( pad == <S2SV_ModEnd> RSA_PUB ) { <S2SV_ModStart> RSA_PUB ) { * p_len = m_len ; bn_rsh ( t, m, 8 * m_len ) ; <S2SV_ModStart> 8 ) ; for ( i = 0 ; i < 8 ; i ++ ) { bn_lsh ( m, m, 8 ) ; do { rand_bytes ( & pad, 1 ) ; bn_add_dig ( m, m, pad ) ; } bn_lsh ( m, m, m_len * 8 ) ; bn_add_dig ( m, m, 0 ) ; bn_lsh ( m, m, m_len * 8 ) ; bn_lsh",0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,<S2SV_ModStart> 8 ) ; psf = psf_allocate ( <S2SV_ModEnd> ) ; if,0
475,"<S2SV_ModStart> void fix_interp_filter ( VP9_COMMON_CONTEXT * ctx, <S2SV_ModStart> cm -> counts -> <S2SV_ModEnd> switchable_interp [ j <S2SV_ModStart> += cm -> counts -> <S2SV_ModEnd> switchable_interp [ i",0
476,<S2SV_ModStart> & cpi -> td. <S2SV_ModStart> mi_cols ) ; <S2SV_ModEnd> vp9_setup_src_planes ( x <S2SV_ModStart> subsampling_y ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
477,"<S2SV_ModStart> hp ) ; if (! <S2SV_ModEnd> htc_request_check_host_hdr ( hp <S2SV_ModStart> ( hp ) ) { WSPR <S2SV_ModEnd> ( sp, <S2SV_ModStart> ( sp, SLT_HttpGarbage, htc -> rxbuf <S2SV_ModEnd> ) ; return <S2SV_ModStart> ) ; } }",0
478,"<S2SV_ModStart> EOFOp 0x07 char * magick ; Image * image ; IndexPacket index ; int opcode, operand, status ; MagickStatusType flags ; MagickSizeType number_pixels ; MemoryInfo * pixel_info ; IndexPacket * indexes ; int number_pixels ; MemoryInfo * pixel_info ; int number_colormaps ; int number_planes_filled ; int one, pixel_info_length ; unsigned char background_color [ 256 ], plane, pixels ; count = ReadBlob ( image, 2, ( unsigned char * ) magick ) ; if ( ( count!= 2 ) || ( memcmp ( <S2SV_ModEnd> magick, ""\\122\\314"" <S2SV_ModStart> ) ) ; <S2SV_ModEnd> do { image <S2SV_ModStart>. x = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. y = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. columns = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. rows = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart> -> rows = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart> -> colormaps = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart> -> colormaps = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart> -> rows = ReadBlobLSB",0
479,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( tETH_HDR ) ),0
480,<S2SV_ModStart> ; ps_dec -> <S2SV_ModEnd> u4_last_slice_pic_in_slice = 0,0
481,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> * karg ; <S2SV_ModEnd> struct pci_dev * <S2SV_ModStart> pci_dev * pdev <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> ( ( ( <S2SV_ModEnd> pdev = mpt_verify_adapter <S2SV_ModStart>, & pdev <S2SV_ModEnd> ) < 0 <S2SV_ModStart> printk ( MYIOC_s_ERR_FMT ""%s@%d::mptctl_getiocinfo <S2SV_blank> - <S2SV_blank> "" ""Structure <S2SV_blank> size <S2SV_blank> of <S2SV_blank> ioc <S2SV_blank> is <S2SV_blank> different <S2SV_blank> from <S2SV_blank> pci_dev <S2SV_blank> %p <S2SV_blank> and <S2SV_blank> pci_dev <S2SV_blank> %p\\n"" <S2SV_ModEnd>, __FILE__, <S2SV_ModStart>, __LINE__, pdev <S2SV_ModEnd>, pdev -> <S2SV_ModStart>, __LINE__, pdev <S2SV_ModEnd> ) ; kfree",0
482,<S2SV_ModStart> = 8 ; image -> rows_max = 255 ;,0
483,"<S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv",0
484,"<S2SV_ModStart> ; if ( datao + 8 > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> order = EXIF_BYTE_ORDER_INTEL ; datao += exif_get_long ( buf + datao + 8, EXIF_BYTE_ORDER_INTEL ) ; if ( <S2SV_ModStart> ; if ( datao + 2 > datao ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } c = exif_get_short ( buf + datao, EXIF_BYTE_ORDER_INTEL ) ; datao += 2 ; exif_mnote_data_fuji_clear ( n ) ; n -> entries = exif_mem_alloc ( en -> mem, sizeof ( MnoteFujiEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( en -> log, ""Ex",0
485,"<S2SV_ModStart> ; if (! viewfile ) { L_ERROR ( ""viewfile <S2SV_blank> not <S2SV_blank> found"", procName ) ; return 1 ; } if (",0
486,"<S2SV_ModStart> void unbind_ports ( int num_ports <S2SV_ModEnd> ) { SERVICE_OPTIONS <S2SV_ModStart> 1 ) ; if ( num_ports > MAX_PORTS ) { s_log ( LOG_ERR, ""Number <S2SV_blank> of <S2SV_blank> ports <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", num_ports, MAX_PORTS ) ; return ; } <S2SV_ModStart>. next ; if ( num_ports > MAX_PORTS ) { s_log ( LOG_ERR, ""Number <S2SV_blank> of <S2SV_blank> ports <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", num_ports, MAX_PORTS ) ; return ; } <S2SV_ModStart> service_options ) ; if (! opt ) { s_log ( LOG_ERR, ""No <S2SV_blank> service <S2SV_blank> options <S2SV_blank> in <S2SV_blank> list"" ) ; return ; } <S2SV_ModStart> -> ctx ) { <S2SV_ModStart> 1 ) ; } <S2SV_ModStart> servname ) ; if ( num_ports > MAX_PORTS ) { s_log ( LOG_ERR, ""Number <S2SV_blank> of <S2SV_blank> ports <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", num_ports, MAX_PORTS ) ; return ; }",0
487,<S2SV_ModStart> void ) { if (! recovery_started ) { recovery_started = 1 ; return ; },0
488,"<S2SV_ModStart> ; } } if ( interface -> config. enable_enc624j600_filter ) { <S2SV_ModStart> ] ) ; } <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ;",0
489,<S2SV_ModStart> image ) ; image -> size = img_offset ;,0
490,"<S2SV_ModStart> { WORD32 i, u4_num_st_curr_before, u4_num_st_curr_after, u4_num_lt_curr, u4_num_lt_curr, u4_num_total_curr <S2SV_ModStart> u4_num_lt_curr ) ; u4_num_st_curr_before = 0 ; u4_num_st_curr_after = 0 ; u4_num_lt_curr = 0 ; u4_num_total_curr = 0 ; <S2SV_ModStart> u4_num_lt_curr ) ; u4_num_total_curr = 0 ;",0
491,"<S2SV_ModStart> depth, int no_indent, int <S2SV_ModStart> child ) { if ( no_indent ) len += 2 ; <S2SV_ModStart> = str = print_string <S2SV_ModEnd> ( child -> <S2SV_ModStart> child -> string, no_indent <S2SV_ModStart> depth, fmt, no_indent <S2SV_ModStart> = ret = print_value ( child, no_indent, <S2SV_ModStart> depth, fmt, no_indent <S2SV_ModStart> fail ) { if ( no_indent ) len += 2 ; <S2SV_ModStart> + 1 ; <S2SV_ModEnd> * ptr ++ <S2SV_ModStart> = 0 ; len = 7 ; for ( i = 0 ; i < numentries ; ++ i ) { if ( names [ i ] ) cJSON_free ( names [ i ] ) ; if ( entries [ i ] ) cJSON_free ( entries [ i ] ) ; } <S2SV_ModStart> i ) { <S2SV_ModEnd> for ( j <S2SV_ModStart> = '\\t' ; if (! str ) break ; <S2SV_ModStart> ptr, str ) ; } if (! str ) break ; ptr ++ ; } if (! out ) out = ( char * ) cJSON_malloc ( len ) ; if (! out ) fail = 1 ; <S2SV_ModEnd> * out = <S2SV_ModStart> + 1 ; <S2SV_ModEnd> * out = <S2SV_ModStart> + 1 ; <S2SV_ModEnd> * out = <S2SV_ModStart> + 1 ; <S2SV_ModEnd> * out = <S2SV_ModStart> + 1 ;",0
492,"<S2SV_ModStart> sk ) ; if ( writable ) { unix_state_lock ( sk ) ; other = unix_peer ( sk ) ; if ( other && unix_peer ( <S2SV_ModEnd> other )!= <S2SV_ModStart> { if ( unix_peer ( <S2SV_ModEnd> other )!= <S2SV_ModStart> wait ) ; unix_state_unlock ( sk ) ; } if ( <S2SV_ModStart> ( unix_recvq_full ( sk ) ) writable = 0 ; } sock_put ( sk ) ; } if ( writable ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; if (! capable ( CAP_SYS_RAW ) ) { struct unix_sock * peer = unix_peer ( sk ) ; unix_state_unlock ( sk ) ; } <S2SV_ModEnd> return mask ;",0
493,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; outpos += strlen ( outputbuffer ) ;",0
494,<S2SV_ModStart> ( OM_uint32 ) KRB5_BAD_IOV <S2SV_ModEnd> ; return GSS_S_DEFECTIVE_TOKEN <S2SV_ModStart> buffer. length > <S2SV_ModEnd> token_wrapper_len + 14,0
495,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { vpx_ref_frame_t <S2SV_ModEnd> * frame = <S2SV_ModStart> * frame = ( vpx_ref_frame_t * ) <S2SV_ModStart> NULL ) { vpx_get_reference_enc <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> -> cpi, & frame -> ref_enc <S2SV_ModEnd> ) ; yuvconfig2image",0
496,<S2SV_ModStart> plug ) ; <S2SV_ModEnd> put_ioctx ( ctx,0
497,"<S2SV_ModStart> name, int rec_quick <S2SV_ModEnd> ) { int <S2SV_ModStart> ) ) { <S2SV_ModEnd> DBUG_RETURN ( ""mi_repair_by_sort"" <S2SV_ModStart> ) ) { <S2SV_ModEnd> DBUG_RETURN ( ""mi_repair_by_sort"" <S2SV_ModStart> ) ) { <S2SV_ModEnd> DBUG_RETURN ( ""mi_repair_by_sort""",0
498,"<S2SV_ModStart> s } ; uECC_word_t p [ uECC_MAX_WORDS * 2 ] ; <S2SV_ModStart> carry ], <S2SV_ModEnd> num_n_bits + 1",0
499,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|dao-truncated]"" <S2SV_ModEnd> ) ) ;",0
500,<S2SV_ModStart> ; } else if ( buf -> data. size > 0 ) <S2SV_ModStart> ) ; } pool -> free_total = 0 ;,0
501,"<S2SV_ModStart> tp ; { int cval = 0, meta = 0 ; <S2SV_ModStart> ] ) { <S2SV_ModEnd> if ( * <S2SV_ModStart> == 'X' ) { <S2SV_ModStart> 2 ) ; } <S2SV_ModStart> == 'O' ) { <S2SV_ModStart> '0' ) ; } <S2SV_ModStart> cp ; } <S2SV_ModEnd> } else if <S2SV_ModStart> ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
502,"<S2SV_ModStart> char detect [ 5 <S2SV_ModEnd> ] ) { <S2SV_ModStart> ] ) { if ( memcmp ( detect, ""YUV4"", 5 ) == 0 ) { return 1 ; }",0
503,"<S2SV_ModStart>, * pixd, * pixu <S2SV_ModStart> == NULL ) { pixu = pixc ; <S2SV_ModStart> NULL ) ; } <S2SV_ModStart> == NULL ) { pixu = pixc ; <S2SV_ModStart> NULL ) ; } <S2SV_ModStart> == NULL ) { pixu = pixc ; <S2SV_ModStart> NULL ) ; }",0
504,<S2SV_ModStart>. vf = vpx_mse16x16 <S2SV_ModEnd> ; xd ->,1
505,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> overhead = 16 <S2SV_ModStart> int size = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> } if ( size <S2SV_ModEnd> > conn ->,0
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NEGO_STATE_FAIL ; goto fail <S2SV_ModEnd> ; } Stream_Read_UINT8 <S2SV_ModStart> = NEGO_STATE_FINAL ; return ; fail : return ;,0
507,"<S2SV_ModStart> i, target_bits_per_mb ; int rc_bits_per_mb = 0 <S2SV_ModStart> ( int ) rc_bits_per_mb <S2SV_ModEnd> ( cm -> <S2SV_ModStart> i, correction_factor, & rc_bits_per_mb",0
508,<S2SV_ModStart> ; value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ ; value &= ~ TJA1101_CONFIG1_MII_MODE_AUTO_OP <S2SV_ModEnd> ; tja1101WritePhyReg (,0
509,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
510,"<S2SV_ModStart> int dst_stride, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart>, left_col, 128 <S2SV_ModEnd> ) ; DECLARE_ALIGNED_ARRAY <S2SV_ModStart>, above_data, 128 <S2SV_ModEnd> + 16 ) <S2SV_ModStart> + y ; memset <S2SV_ModEnd> ( left_col, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( right_col, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( right_col, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( right_col, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ;",0
511,"<S2SV_ModStart> ++ ; } else if ( pattern [ end ] == \'""\' ) { end ++ ; while ( ( pattern [ end ]!= 0 ) && ( pattern [ end ]!= \'""\' ) ) end ++ ; }",0
512,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_mmap_lock ) ;,0
513,"<S2SV_ModStart> * cpi, vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; write_profile_ext <S2SV_ModEnd> ( cm -> <S2SV_ModStart> wb ) ; write_frame_type_ext <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm -> frame_type <S2SV_ModEnd> ) ; if <S2SV_ModStart> KEY_FRAME ) { write_key_frame_ext ( wb <S2SV_ModEnd> ) ; } <S2SV_ModStart> } else { write_key_frame_ext ( wb <S2SV_ModEnd> ) ; }",0
514,<S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 1 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 1 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 1 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 1 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 1 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 1 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 1 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 1 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 1 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 1 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 1 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 1 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 1 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 1 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 1 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 1 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 1 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 1 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 1 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 1 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 1 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 1 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 1 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 1 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 1 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 1 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 1 <S2SV_ModStart> ; if ( <S2SV_ModEnd> argc > 1 <S2SV_ModStart> ;,0
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { q = osStrchr <S2SV_ModEnd> ( p +,1
516,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
517,<S2SV_ModStart> KEY_FRAME ) { memset <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd ->,0
518,"<S2SV_ModStart> error_t error ; int16_t <S2SV_ModEnd> n ; uint32_t <S2SV_ModStart> ; Enc624j600Context * context ; uint16_t nextPacket <S2SV_ModEnd> ; Enc624j600Context * <S2SV_ModStart> -> nicContext ; nextPacket = enc624j600GetReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT ) ; if ( nextPacket <S2SV_ModEnd> & ESTAT_PKTCNT ) <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA, <S2SV_ModEnd> & n, <S2SV_ModStart> ( n, ENC624J600_MAX_FRAME_SIZE <S2SV_ModEnd> ) ; enc624j600ReadBuffer <S2SV_ModStart> ( n, ENC624J600_MAX_FRAME_SIZE <S2SV_ModEnd> ) ; enc624j600ReadBuffer <S2SV_ModStart> ( n, ENC624J600_MAX_FRAME_SIZE <S2SV_ModEnd> ) ; enc624j600ReadBuffer <S2SV_ModStart> ( n, ENC624J600_MAX_FRAME_SIZE <S2SV_ModEnd> ) ; error <S2SV_ModStart> ( context -> rxBuffer <S2SV_ModEnd> == ENC624J600_RX_BUFFER_START ) <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface",0
519,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv, VALUE klass ) { VALUE content ; xmlSchemaPtr schema ; xmlSchemaParserCtxtPtr ctx ; VALUE rb_schema ; VALUE errors ; xmlErrorPtr error ; xmlSchemaParserCtxtPtr ctx ; if ( argc < 2 ) { rb_raise ( rb_eRuntimeError, ""Invalid <S2SV_blank> argument <S2SV_blank> for <S2SV_blank> read_memory"" ) ; return Qnil ; } <S2SV_ModEnd> ctx = xmlSchemaNewMemParserCtxt <S2SV_ModStart> content ) ) <S2SV_ModEnd> ; errors = <S2SV_ModStart> errors ) ; if ( argc == 2 ) { rb_raise ( rb_eRuntimeError, ""Invalid <S2SV_blank> argument <S2SV_blank> for <S2SV_blank> read_memory"" ) ; return Qnil ; } else { xmlSetStructuredErrorFunc ( NULL, NULL ) ; xmlSchemaFreeParserCtxt ( ctx ) ; if ( NULL == schema ) { xmlErrorPtr error = xmlGetLastError ( ) ; if ( error ) Nokogiri_error_raise ( NULL, error ) ; else rb_raise ( rb_eRuntimeError, ""Could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> document"" ) ; return Qnil ; } } rb_iv_set ( rb_schema, ""@content"", content ) ;",0
520,<S2SV_ModStart> ) ; } if ( strlen ( config_arg ) > 0 ) { <S2SV_ModStart> = config_arg ; },0
521,<S2SV_ModStart> 2 ] ; if ( x + 4 > state -> xsize ) return - 1 ; <S2SV_ModStart> 2 ] ; if ( x + 5 > state -> xsize ) return - 1 ;,0
522,<S2SV_ModStart> err = - <S2SV_ModEnd> EALREADY ; if,0
523,<S2SV_ModStart> POLL_IN ) ; <S2SV_ModEnd> perf_event_wakeup ( handle,0
524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> len, wchar_t * <S2SV_ModStart> * s && ( len > 0 ) <S2SV_ModEnd> ) { u16 <S2SV_ModStart> ; if ( len > 0 ) { if ( <S2SV_ModStart> PLANE_SIZE ) { if ( u > PLANE_SIZE ) { return - EINVAL ; } <S2SV_ModStart> ( wchar_t ) <S2SV_ModEnd> ( ( u <S2SV_ModStart> ( wchar_t ) <S2SV_ModEnd> ( u & <S2SV_ModStart> } else { if ( len > 0 ) { <S2SV_ModStart> * s ++ ; } <S2SV_ModEnd> len -- ; <S2SV_ModStart> len -- ; }",0
525,"<S2SV_ModStart> EPROTONOSUPPORT ) { if ( as_console ) { sleep ( 2 ) ; } <S2SV_ModStart> ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" ) ; <S2SV_ModEnd> rc = pcmk_ok",0
526,"<S2SV_ModStart> ( interface, KSZ8851_RXFHSR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXMR | KSZ8851_RXFTL | KSZ8851_RXRF | KSZ8851_RXCE <S2SV_ModEnd> ) ) == <S2SV_ModStart> ( interface, KSZ8851_RXFDPR, KSZ8851_RXFDPR_RXFPAI <S2SV_ModEnd> ) ; ksz8851ReadFifo <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ancillary <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_RRXEF <S2SV_ModEnd> ) ; return",0
527,"<S2SV_ModStart> ast_for_funcdef_impl ( struct compiler * c, const node * n, asdl_seq * decorator_seq, int is_async ) { identifier name ; arguments_ty args ; asdl_seq * body ; expr_ty returns = NULL ; int name_i = 1 ; node * tc ; string type_comment = NULL ; if ( c -> c_feature_version < 5 ) { ast_error ( c, n, ""Async <S2SV_blank> functions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.5 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } REQ ( n, funcdef ) ; name = NEW_IDENTIFIER ( CHILD ( n, name_i ) ) ; if (! name ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i ), 0 ) ) return NULL ; args = ast_for_arguments ( c, CHILD ( n, name_i + 1 ) ) ; if (! args ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 2 ) ) == TYPE_COMMENT ) { type_comment = NEW_TYPE_COMMENT ( CHILD ( n,",0
528,"<S2SV_ModStart> ( mm, 0xA000000 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( pgd, 0xA000000 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( pud, 0xA000000 <S2SV_ModEnd> ) ; split_huge_page_pmd <S2SV_ModStart>, pmd, 0xA000000 <S2SV_ModEnd>, & ptl <S2SV_ModStart> : flush_tlb ( ) ; mm_dec_nr_pmds ( mm",0
529,"<S2SV_ModStart> ; } } if ( 0!= ( * packet_data_pptr ) [ 1 ] ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> packet <S2SV_blank> data <S2SV_blank> pptr <S2SV_blank> is <S2SV_blank> not <S2SV_blank> valid!"" ) ; return - 1 ; }",0
530,"<S2SV_ModStart> ) ) { if (! is_valid_address ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> invalid <S2SV_blank> address <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; }",0
531,"<S2SV_ModStart> 0 ) ; if ( ( RAW ( row, col ) = pred [ col & 1 ] ) > 4098 && col < width ) derror ( ) ; <S2SV_ModStart> 4 ) ; <S2SV_ModEnd> } } <S2SV_null>",0
532,<S2SV_ModStart> len < needed || len > param -> data_start,0
533,"<S2SV_ModStart> ) break ; if ( quantum_info -> quantum_type == QuantumTypeNone ) { clone_info = DestroyImageInfo ( clone_info ) ; ThrowReaderException ( CorruptImageError, ""UnexpectedPixelPacket"" ) ; }",0
534,<S2SV_ModStart> ( bfqq ) bfq_idle_slice_timer <S2SV_ModEnd> ( bfqq ),0
535,<S2SV_ModStart> ; length += sizeof ( PRIMARY_DRAWING_ORDER_FIELD ) <S2SV_ModEnd> ; length +=,0
536,<S2SV_ModStart> ; if (! new_create &&! new_is_dir ) { err = - EPERM ; goto out ; } if (,0
537,"<S2SV_ModStart> plane ++ ) { if ( xd -> plane [ plane ]. plane_type == VP9_PLANE_VP9 ) { <S2SV_ModStart> ) ; } else { vpx_foreach_transformed_block_in_plane ( xd, bsize, plane, visit, arg ) ; } } }",0
538,"<S2SV_ModStart> * cpi, TileDataEnc * tile_data, <S2SV_ModStart> -> e_mbd ; TileDataEnc * tile_info = & tile_data -> tile_info ; <S2SV_ModStart> ( cpi, tile_data <S2SV_ModEnd>, mi_row, <S2SV_ModStart> ( cpi, tile_data <S2SV_ModEnd>, mi_row, <S2SV_ModStart> x, tile, tile_info",0
539,<S2SV_ModStart> = NULL ; reader. gcol = gcolGet ( reader. gcol ) ;,0
540,<S2SV_ModStart> -> ranges = safe_calloc <S2SV_ModEnd> ( sizeof (,0
541,<S2SV_ModStart> pkt_list ) ; vpx_codec_pkt_list_init ( & ctx -> pkt_list_unaligned ) ;,0
542,<S2SV_ModStart> ) break ; if ( quantum_info -> quantum_type == QuantumTypeNone ) { clone_info = DestroyImageInfo ( clone_info ) ; return ( ( Image * ) NULL ) ; },0
543,<S2SV_ModStart> event ) ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
544,"<S2SV_ModStart> * pptr, u_int <S2SV_ModEnd> len ) { <S2SV_ModStart> * tptr ; u_int advance ; u_int tlen ; const u_char * tptr ; char buf [ MAXHOSTNAMELEN + 100 ] ; int as_size ; tptr = pptr ; tlen = len ; switch ( atype ) { case BGPTYPE_AS4_PATH : case BGPTYPE_AS_PATH : ND_TCHECK ( * tptr ) ; ND_PRINT ( ( ndo, ""%s"", tok2str ( bgp_as4_path_values, ""?"", tptr [ 0 ] ) ) ) ; break ; case BGPTYPE_AS_PATH : ND_TCHECK ( * tptr ) ; ND_PRINT ( ( ndo, ""%s"", tok2str ( bgp_as4_path_values, ""?"", tptr [ 0 ] ) ) ) ; break ; case BGPTYPE_AS4_VPN : if ( len % 2 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } ND_TCHECK ( * tptr ) ; ND_PRINT ( ( ndo,",0
545,"<S2SV_ModStart>, ""<tr><td>Runtime <S2SV_blank> status <S2SV_blank> value</td>"", Monit. status <S2SV_ModEnd> ) ; StringBuffer_append",0
546,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
547,"<S2SV_ModStart>, ""%s"", <S2SV_ModEnd> arStr ) ;",0
548,"<S2SV_ModStart> iad_num ++ ; if ( iad_num >= nintf ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> no <S2SV_blank> interfaces: <S2SV_blank> %d\\n"", cfgno, nintf_orig ) ; return - EINVAL ; }",0
549,"<S2SV_ModStart>, 0, <S2SV_ModEnd> 0 ) ;",0
550,<S2SV_ModStart> ; distortion = vpx_variance16x16 <S2SV_ModEnd> ( * (,1
551,"<S2SV_ModStart> interface ) ; <S2SV_ModEnd> if ( macCompAddr <S2SV_ModStart> ) ) { enc624j600WriteReg ( interface, ENC624J600_MAADR1, ENC624J600_MAADR1_DEFAULT ) ; <S2SV_ModStart> temp ) ; enc624j600WriteReg ( interface, ENC624J600_MAADR2, ENC624J600_MAADR2_DEFAULT ) ; <S2SV_ModStart> temp ) ; enc624j600WriteReg ( interface, ENC624J600_MAADR3, ENC624J600_MAADR3_DEFAULT ) ; <S2SV_ModStart> ] ) ; enc624j600WriteReg ( interface, ENC624J600_MAADR1, ENC624J600_MAADR1_DEFAULT ) ; <S2SV_ModStart> ] ) ; enc624j600WriteReg ( interface, ENC624J600_MAADR2, ENC624J600_MAADR2_DEFAULT ) ; <S2SV_ModStart> ] ) ; enc624j600WriteReg ( interface, ENC624J600_MAADR3 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ] ) ; enc624j600Write",0
552,<S2SV_ModStart> * start ; if (! psf -> header ) return ; <S2SV_ModStart> header ) ; if ( maxlen > sizeof ( psf -> header ) ) return ; <S2SV_ModStart> header ) + 1 <S2SV_ModEnd> ; maxlen = <S2SV_ModStart> = 0 ; if (! psf -> headindex ) { <S2SV_ModStart> header ) ; },0
553,<S2SV_ModStart> ; else { <S2SV_ModEnd> ctx -> iface <S2SV_ModStart> -> priv -> destroy <S2SV_ModEnd> ( ctx ->,0
554,<S2SV_ModStart> { sf -> <S2SV_ModEnd> recode_loop = ( <S2SV_ModStart> 1 ) { if (! cm -> show_frame ) { <S2SV_ModStart> cm ) ; } else { sf -> use_square_partition_only = 0 ; } <S2SV_ModStart> ; sf -> <S2SV_ModEnd> tx_size_search_method = vp9_frame_is_boosted <S2SV_ModStart> ; sf -> <S2SV_ModEnd> mode_skip_start = 10 <S2SV_ModStart> 2 ) { if (! cm -> show_frame ) { <S2SV_ModStart> : USE_LARGESTALL ; } else { sf -> tx_size_search_method = USE_FULL_RD ; } <S2SV_ModStart> = 1 ; } <S2SV_ModStart> = 1 ; <S2SV_ModEnd> } if ( <S2SV_ModStart> 2 ) { if (! cm -> show_frame ) { sf -> use_square_partition_only = 0 ; sf -> less_rectangular_check = 1 ; } else { <S2SV_ModStart> = 1 ; } <S2SV_ModStart> = 1 ; <S2SV_ModEnd> if ( speed <S2SV_ModStart> = 1 ; <S2SV_ModEnd> } if ( <S2SV_ModStart> 2 ) { if (! cm -> show_frame ) { sf -> use_square_partition_only = 0 ; sf -> less_rectangular_check = 0 ; } else { <S2SV_ModStart> = 1 ; } <S2SV_ModStart> = 1 ; <S2SV_ModEnd> } if ( <S2SV_ModStart> 1 ) { if,0
555,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ]. poll_count ),0
556,<S2SV_ModStart> int goodsize = ( <S2SV_ModStart> 2 * EXTRA_STACK ) <S2SV_ModStart> ; if ( goodsize < inuse <S2SV_ModEnd> && goodsize <,0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,<S2SV_ModStart> n ) ; if (! str ) { return NULL ; } <S2SV_ModStart> errstr ) { <S2SV_ModEnd> Py_DECREF ( errstr,0
559,<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> ) break ; svc_ctx -> spatial_layers = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> scale_factors = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> quantizers = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> quantizers_keyframe = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> spatial_layers = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> scale_factors = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> quantizers_keyframe = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> spatial_layers = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> scale_factors = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> quantizers = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> scale_factors = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> quantizers = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> scale_factors = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> quantizers = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> scale_factors = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> scale_factors = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> scale_factors = 0,0
560,<S2SV_ModStart> ) ; } <S2SV_ModEnd> mb_index = 0 <S2SV_ModStart> ) ; } <S2SV_ModEnd> mb_index = 0,0
561,<S2SV_ModStart> self ) { size_t <S2SV_ModEnd> i ; PyObject,1
562,,1
563,"<S2SV_ModStart> ( dbh, mysql_error_string <S2SV_ModEnd> ( imp_dbh ->",0
564,<S2SV_ModStart> ) || ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) ) <S2SV_ModStart> ( need_close || TEMP_FAILURE_RETRY ( <S2SV_ModStart> & size ) ) <S2SV_ModEnd> ) cleanup_rfc_slot (,0
565,<S2SV_ModStart> struct ieee_802_11_phdr phdr ; gboolean mpdu_len_remain = 0 <S2SV_ModStart> ; if ( mpdu_len > IEEE80211_MAX_MPDU_LEN ) { mpdu_len = IEEE80211_MAX_MPDU_LEN ; } if (,0
566,"<S2SV_ModStart> * fp ; if ( hdrlen + initlen + 1 > SDS_MAX_SIZE ) { sdsError ( ""sdsnewlen() <S2SV_blank> called <S2SV_blank> with <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> exceeding <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%zu)"", initlen, SDS_MAX_SIZE ) ; return NULL ; }",0
567,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> BYTE a_val ; if ( context -> priv -> NumOfBuffers < 2 ) { return FALSE ; } <S2SV_ModStart> -> ColorLossLevel ; if ( context -> priv -> NumOfBuffers < 4 ) { return FALSE ; } <S2SV_ModStart> ; } } return TRUE ;,0
568,"<S2SV_ModStart> > nr_parens ) { parse_error ( pe, FILT_ERR_NO_PARENT_FILTERS, ptr - str ) ; <S2SV_ModStart> EINVAL ) ; }",0
569,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> RATE_CONTROL * rc <S2SV_ModStart> rc = & cpi -> rc_one_pass <S2SV_ModEnd> ; int target <S2SV_ModStart> target = ( <S2SV_ModEnd> cpi -> oxcf <S2SV_ModStart> starting_buffer_level / 2 <S2SV_ModEnd> ; } else <S2SV_ModStart> = 32 ; const <S2SV_ModStart> int kf_boost = <S2SV_ModEnd> 2 * cpi <S2SV_ModStart> cpi -> output_framerate ; int avg_boost = <S2SV_ModEnd> rc -> frames_since_key <S2SV_ModStart> rc -> frames_since_key ; if ( avg_boost > 0 ) { kf_boost = ( int ) ( avg_boost * rc -> frames_since_key / ( cpi -> output_framerate / 2 ) ) ; } else { kf_boost = ( int ) ( kf_boost * rc -> frames_since_key <S2SV_ModStart> ) ; } },0
570,"<S2SV_ModStart> TX_MODE read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> == ALLOW_32X32 ) return ALLOW_32X32 <S2SV_ModEnd> ; return tx_mode",0
571,"<S2SV_ModStart> : # line 1046 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 1047 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1048 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1049 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1055 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1055 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1061 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1062 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1065 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1076 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1076 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1076 <S2SV_ModEnd> ""re_grammar.y"" { yr",0
572,<S2SV_ModStart> -> cpi ; MACROBLOCKD_EXT * xd_ext = args -> xd_ext ; <S2SV_ModStart> & cpi -> td. <S2SV_ModStart> plane_type ; const MACROBLOCKD_EXT <S2SV_ModEnd> * qcoeff = <S2SV_ModStart> = cpi -> td. fc. <S2SV_ModEnd> coef_probs [ tx_size <S2SV_ModStart> UNCONSTRAINED_NODES ] = xd_ext -> <S2SV_ModEnd> fc. coef_probs <S2SV_ModStart> = cpi -> td. counts <S2SV_ModEnd>. eob_branch [ <S2SV_ModStart> = cpi -> td. counts <S2SV_ModEnd>. eob_branch [ <S2SV_ModStart> = cpi -> td. counts <S2SV_ModEnd>. eob_branch [ <S2SV_ModStart> = cpi -> td. counts <S2SV_ModEnd>. eob_branch [ <S2SV_ModStart> = cpi -> td. counts <S2SV_ModEnd>. segment_id ; <S2SV_ModStart> = cpi -> td. fc. <S2SV_ModEnd> scan_probs [ segment_id <S2SV_ModStart> = cpi -> td. fc. <S2SV_ModEnd> scan_probs [ segment_id <S2SV_ModStart> = cpi -> td. counts <S2SV_ModEnd>. eob_branch [ <S2SV_ModStart> = cpi -> td. counts <S2SV_ModEnd>. eob_branch [ <S2SV_ModStart> = cpi -> td. counts <S2SV_ModEnd>. scan_probs [ <S2SV_ModStart> = cpi -> td. counts <S2SV_ModEnd>. scan_probs [ <S2SV_ModStart> = cpi,0
573,<S2SV_ModStart> pSelect -> pSrc ; assert ( pSelect -> selFlags & SF_View ),0
574,"<S2SV_ModStart> users ) ; if ( sv_ops -> set_timeout ) { int timeout = sv_ops -> set_timeout ( cb_info, NFS4_CALLBACK_BUFSIZE, NFS4_CALLBACK_TIMEOUT ) ; if ( timeout < 0 ) { printk ( KERN_ERR ""nfs_callback_create_svc: <S2SV_blank> set <S2SV_blank> timeout <S2SV_blank> failed\\n"" ) ; return ERR_PTR ( - EINVAL ) ; } cb_info -> serv = serv ; serv -> sv_maxconn = 1024 ; dprintk ( ""nfs_callback_create_svc: <S2SV_blank> service <S2SV_blank> created\\n"" ) ; return serv ; }",0
575,"<S2SV_ModStart> point, const double <S2SV_ModEnd> scalar, const <S2SV_ModStart> curve ) { if ( pointZZ_pIsInfinity ( point ) ) { return ; }",0
576,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
577,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
578,"<S2SV_ModStart> s ) { if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) ) ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> retrying"", sock_fd, errno ) ; break ; } <S2SV_ModEnd> ret = send",0
579,"<S2SV_ModStart> = NULL ; int i = 0 ; <S2SV_ModStart> -> name ; int rc = 0 ; <S2SV_ModStart> } else { if ( strcmp ( prop_name, XML_ATTR_ID ) == 0 ) { continue ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else { <S2SV_ModStart> * path = xml_get_path_internal <S2SV_ModEnd> ( xml ) <S2SV_ModStart> ; } } }",0
580,<S2SV_ModStart> <S2SV_null> <S2SV_null> static SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> NULL ; return <S2SV_ModEnd> svc_ctx -> internal,0
581,<S2SV_ModStart> ) ) { if ( Z_TYPE_IS_STRING ( * zdata_ptr ) ) { <S2SV_ModStart> ) ) ; },0
582,"<S2SV_ModStart> only_420 ) { int i ; <S2SV_ModStart> char buffer [ 79 <S2SV_ModEnd> ] ; int <S2SV_ModStart> -> vpx_bps = 24 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_bps = 24 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_bps = 24 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_bps = 24 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_bps = 24 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_bps = 24 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_bps = 24 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt == ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_bps = 24 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt == ""I420"" <S2SV_ModEnd> ) { _y4m",0
583,"<S2SV_ModStart> buf ; { wizkit_addinv ( <S2SV_ModEnd> readobjnam ( buf <S2SV_ModStart> * ) 0, NULL ) ) ; <S2SV_ModEnd> return TRUE ;",0
584,"<S2SV_ModStart> ( ) { <S2SV_ModEnd> long long directory_table_end <S2SV_ModStart>, table_start ; if ( read_uids_guids ( & table_start ) == FALSE ) return FALSE ; if ( parse_exports_table ( & table_start ) == FALSE ) return FALSE ; if ( read_fragment_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( no_xattrs ) sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; <S2SV_ModStart> == 0 ) { <S2SV_ModStart> return FALSE ; } <S2SV_ModEnd> return TRUE ;",0
585,"<S2SV_ModStart> rule * rule, u_int flags <S2SV_ModStart> count = 0 ; env -> flags = flags <S2SV_ModStart> ; } } if ( flags & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ]!= NULL ; i ++ ) { struct envnode * node ; const char * e ; size_t len ; char keybuf [ 1024 ] ; e = strchr ( e, '=' ) ; if ( ( eq = strchr ( e, '=' ) ) == NULL || eq == e ) continue ; len = strlen ( e ) ; keybuf [ len ] = '\\0' ; node = createnode ( keybuf, eq + 1 ) ; if ( RB_INSERT ( envtree, & env -> root, node ) ) { freenode ( node ) ; } } }",0
586,"<S2SV_ModStart> -> seg ; vpx_memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> mi_cols ) ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ; } } vpx_memset ( cpi -> segmentation_map, 0, cm -> mi_rows * cm -> mi_cols ) ; vpx_memset ( cpi -> complexity_map, 0, cm -> mi_rows * cm -> mi_cols ) ;",0
587,"<S2SV_ModStart> = make_type ( ""module"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""interactive"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""expression"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""suite"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""functiondef"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""asyncfunctiondef"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""classdef"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""return"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""delete"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""assign"" <S2SV_ModEnd>, stmt_type,",0
588,"<S2SV_ModStart> ) ; } if (! access ( log_path, F_OK ) ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> access <S2SV_blank> log <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, log_path, strerror ( errno ) ) ; is_logging = false ; return ; } <S2SV_ModStart> return ; } if ( <S2SV_ModStart>, 16 )!= 16 ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> to <S2SV_blank> log <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, log_path, strerror ( errno ) ) ; is_logging = false ; return ; } <S2SV_ModEnd> } else {",0
589,<S2SV_ModStart> ) ; } if ( cpi -> common. frame_type == KEY_FRAME ) { ++ ( is_key? b_modes : inter_b_modes ) [ uvm ] ; },0
590,"<S2SV_ModStart> num1, num2, len <S2SV_ModStart>, * StartClean <S2SV_ModEnd> ; SetDefaults ( <S2SV_ModStart> t ++ ; len = strlen ( s ) ; outpos = outputbuffer ; len <S2SV_ModEnd> += sprintf ( <S2SV_ModStart> = outputbuffer ; len <S2SV_ModEnd> += sprintf ( <S2SV_ModStart> = 1 ; len <S2SV_ModEnd> += sprintf ( <S2SV_ModStart> ( outfile, ""%s%s"", outputbuffer, s <S2SV_ModEnd> ) ; return <S2SV_ModStart> ) ) { len = strlen ( t ) ; <S2SV_ModStart> = ReadArray ( len <S2SV_ModEnd>, & num1 <S2SV_ModStart> ; if ( len <S2SV_ModEnd> == 0 ) <S2SV_ModStart> ( stderr, ""%s: <S2SV_blank> Command <S2SV_blank> %s <S2SV_blank> should <S2SV_blank> have <S2SV_blank> no <S2SV_blank> arguments\\n"" <S2SV_ModEnd>, axohelp, <S2SV_ModStart> ; if ( len <S2SV_ModEnd> - 1!= <S2SV_ModStart> ( outpos, ""%s%s%s"" <S2SV_ModEnd>, axohelp, <S2SV_ModStart>, outbuffer, t, t <S2SV_ModEnd> ) ; return <S2SV_ModStart> ) ) { len = strlen ( t ) ; <S2SV_ModStart> ( outpos, ""%s%s"" <S2SV_ModEnd>, axohelp, <S2SV_ModStart>, outbuffer, t <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; if ( len <S2SV_ModEnd> - 1!= <S2SV_ModStart> ; if ( len <S2SV_ModEnd> - 1!= <S2SV_ModStart> ; if ( len <S2SV_ModEnd> - 1!= <S2SV_ModStart> ; if ( len <S2SV_ModEnd> - 1!= <S2SV_ModStart> ;",0
591,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lower, & tmp ) < 0 ) { return 1 ; } else <S2SV_ModEnd> { int res <S2SV_ModStart> int res ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { lower = NULL ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_upper, & tmp ) < 0 ) { return 1 ; } else { upper = NULL ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_step, & tmp ) < 0 ) { return 1 ; } else <S2SV_ModEnd> { int res <S2SV_ModStart> len ; Py_ssize_t <S2SV_ModEnd> i ; tmp <S2SV_ModStart> int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { int res ; <S2SV_ModStart> len ; Py_ssize_t <S2SV_ModEnd> i ; dims <S2SV_ModStart> int res ; res = obj2ast_expr ( tmp, & dims, arena ) ; if ( res!= 0 ) goto failed",0
592,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs ) <S2SV_ModStart> probs ) { vpx_write_token <S2SV_ModEnd> ( w,",0
593,"<S2SV_ModStart> int err ; u32 handle ; u32 band ; <S2SV_ModStart> ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; err = - EOPNOTSUPP ; goto err_delete ; } } if ( match ) { handle = knode -> handle ; band = knode -> res -> classid ; iter -> mask = mask ; iter -> val = val ; err = nfp_abm_update_band_map ( alink ) ; if ( err ) goto err_delete ; return 0 ; err_delete : nfp_abm_u32_knode_delete ( alink, knode ) ; return err <S2SV_ModEnd> ; } <S2SV_null>",0
594,<S2SV_ModStart> ) ; } if (! global -> pass_mode ) { <S2SV_ModStart> : VPX_RC_ONE_PASS ; } <S2SV_ModStart> ( pass ) { <S2SV_ModStart> stats ) ; },0
595,"<S2SV_ModStart> ; if ( flatpak_check_export_version ( new_data, new_data_len, cancellable, error ) ) goto out ; if (",0
596,<S2SV_ModStart> data_end ) { const <S2SV_ModStart> end = NULL <S2SV_ModEnd> ; assert ( <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> aligned_cols ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> aligned_cols ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> aligned_cols ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> aligned_cols ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart>,0
597,"<S2SV_ModStart> * vp9_decoder_create ( VP9DecoderConfig <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> * pbi = vpx_memalign0 <S2SV_ModEnd> ( 32, <S2SV_ModStart> const cm = ( pbi && pbi -> common ) <S2SV_ModEnd>? & pbi <S2SV_ModStart> = 1 ; vpx_memset0 <S2SV_ModEnd> ( & cm <S2SV_ModStart> ) ) ; vpx_memset1 <S2SV_ModEnd> ( & cm <S2SV_ModStart> current_video_frame = 0 ; pbi -> oxcf = * oxcf <S2SV_ModStart> = 1 ; <S2SV_ModEnd> return pbi ;",0
598,"<S2SV_ModStart> dref ) { if ( bs -> bits_left < 8 ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf <S2SV_blank> in <S2SV_blank> bitstream\\n"" ) ) ; return GF_EINVAL ; } <S2SV_ModStart> ) ) ; if ( bs -> bits_left < 8 ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> in <S2SV_blank> bitstream\\n"" ) ) ; return GF_EINVAL ; }",0
599,<S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> NULL || opt -> opt. <S2SV_ModEnd> cipso == 0 <S2SV_ModStart> cipso == 0 || opt -> opt. opt_family!= AF_INET,0
600,"<S2SV_ModStart> tokens, const vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> do { const vpx_tree_index <S2SV_ModEnd> j = tree",1
601,"<S2SV_ModStart> ( img ) { <S2SV_ModStart> img ) ; if ( res!= VPX_CODEC_OK ) { ctx -> base. err_detail = ""Invalid <S2SV_blank> image <S2SV_blank> flags."" ; return res ; } } <S2SV_ModStart> VPX_CODEC_INVALID_PARAM ; } <S2SV_ModEnd> res = encode_frame <S2SV_ModStart> VPX_CODEC_OK ; } <S2SV_ModEnd> res = encode_frame <S2SV_ModStart> VPX_CODEC_OK ; } <S2SV_ModEnd> res = encode_frame <S2SV_ModStart> VPX_CODEC_OK ; } <S2SV_ModEnd> return res ;",0
602,"<S2SV_ModStart>, & len, 0",1
603,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> in ) { memset ( s, 0, 16 ) ; memset ( x, 0, 16 ) ; memset ( u, 0, 32 ) ; memset ( v, 0, 32 ) ; <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( in, <S2SV_ModStart> in, s, sizeof s ) ; memcpy <S2SV_ModEnd> ( in + <S2SV_ModStart> in + u, sizeof v <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( in + <S2SV_ModStart> in + u, sizeof v ) ; memcpy <S2SV_ModEnd> ( in + <S2SV_ModStart> in + v, sizeof s <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( in + <S2SV_ModStart> in + v, sizeof s <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( in + <S2SV_ModStart> in + v, sizeof s <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( in + <S2SV_ModStart> in + v, sizeof s ) ; memcpy <S2SV_ModEnd> ( in + <S2SV_ModStart> in + u, sizeof v <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( in + <S2SV_ModStart> in + u, sizeof v ) ; memcpy <S2SV_ModEnd> ( in + <S2SV_ModStart> in + v, sizeof s <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( in + <S2SV_ModStart> in + v",0
604,"<S2SV_ModStart> rc, const VP9EncoderConfig <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> ( int64_t ) oxcf <S2SV_ModEnd> -> av_per_frame_bandwidth * <S2SV_ModStart> -> av_per_frame_bandwidth * rc <S2SV_ModEnd> -> two_pass_vbrmax_section )",0
605,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
606,"<S2SV_ModStart> * cpi, int mi_row, int mi_col, BLOCK_SIZE bsize, int skip_encode, int skip_optimize <S2SV_ModEnd> ) { VP9_COMMON <S2SV_ModStart> -> common ; const <S2SV_ModStart> x = & xd -> x ; <S2SV_ModStart> -> mbmi ; <S2SV_ModEnd> unsigned int segment_id <S2SV_ModStart>. allow_skip_recode ; <S2SV_ModEnd> x -> skip_encode <S2SV_ModStart> ) return ; <S2SV_ModEnd> set_ref_ptrs ( cm <S2SV_ModStart> } else { if ( skip_encode ) { x -> skip_encode = 1 ; } else { <S2SV_ModStart> ) ; } <S2SV_ModEnd> } } <S2SV_null>",0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr,0
608,"<S2SV_ModStart> range_max ) { int64_t <S2SV_ModEnd> value ; int <S2SV_ModStart> position, zeroes <S2SV_ModEnd> ; char bits <S2SV_ModStart> gbc ) ; if ( ctx -> trace_enable ) { <S2SV_ModStart> = 0 ; } <S2SV_ModStart> gbc ) < ( int64_t ) <S2SV_ModStart> = '1' ; } else { bits [ i ++ ] = '0' ; ++ zeroes ; } } if ( zeroes >= 32 ) { value = MAX_UINT_BITS ( 32 ) ; } else { value = get_bits_long ( gbc, zeroes ) ; for ( j = 0 ; j < zeroes ; j ++ ) bits [ i ++ ] = ( value >> ( zeroes - j <S2SV_ModEnd> & 1 ) <S2SV_ModStart> : '0' ; } if ( ctx -> trace_enable ) { bits [ i ] = 0 ; ff_cbs_trace_syntax_element ( ctx, position, name, NULL, bits, value ) ; } if ( value < range_min || value > range_max ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""%s <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range: <S2SV_blank> "" ""%"" PRIu32 "", <S2SV_blank> but <S2SV_blank> must <S2SV_blank> be <S2SV_blank> in <S2SV_blank> [%"" PRI",0
609,<S2SV_ModStart> || c >= 126 <S2SV_ModEnd> ) { param <S2SV_ModStart> || c >= 126 <S2SV_ModEnd> ) { },0
610,"<S2SV_ModStart>, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_origin. ptr = NULL, packet -> http_origin. len = 0, packet -> http_x_session_type. ptr = NULL, packet -> http_x_session_type. len = 0, packet -> server_line. ptr = NULL, packet -> server_line. len = 0, packet -> http_num_headers = 0, packet -> <S2SV_ModStart> = 0, <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
611,"<S2SV_ModStart> { q = QueueAuthenticPixels2 <S2SV_ModEnd> ( image, <S2SV_ModStart> x ), Max <S2SV_ModEnd> ( 4, <S2SV_ModStart> y ), <S2SV_ModEnd> exception ) ;",0
612,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL ) <S2SV_ModStart> EINTR ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL )",0
613,<S2SV_ModStart> action ) { if ( w < 0 || w > 1 || h < 0 || h > 1 ) { return ; },0
614,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; if ( outpos >= outputbuffer + strlen ( outputbuffer ) ) { perror ( ""Error <S2SV_blank> in <S2SV_blank> SetTransferMatrix"" ) ; exit ( EXIT_FAILURE ) ; }",0
615,"<S2SV_ModStart> ( AUTODETECT_TAG, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU <S2SV_blank> 0x%x"", autodetectRspPdu -> sequenceNumber <S2SV_ModEnd> ) ; Stream_Read_UINT32",0
616,<S2SV_ModStart> cm -> mb_cols && cm -> mb_cols > 1,0
617,<S2SV_ModStart> pbi -> b_multithreaded_rd && pbi -> common. mb_rows > 0,0
618,<S2SV_ModStart> { if ( ( <S2SV_ModStart> xWantedSize > 0 ) && ( xWantedSize + xHeapStructSize <= xFreeBytesRemaining ) <S2SV_ModStart> 0x00 ) { if ( xWantedSize + <S2SV_ModEnd> ( portBYTE_ALIGNMENT - <S2SV_ModStart> portBYTE_ALIGNMENT_MASK ) ) > xFreeBytesRemaining ) { xWantedSize = 0 ; } <S2SV_ModEnd> } else {,0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,"<S2SV_ModStart> s ) { uint32 <S2SV_ModEnd> num_updates ; uint16 <S2SV_ModStart>, Debug, ""%s()\\n"" <S2SV_ModEnd>, __func__ ) <S2SV_ModStart> ++ ) { in_uint32_le ( s, left ) ; in_uint32_le ( s, top ) ; in_uint32_le ( s, right ) ; in_uint32_le ( s, bottom ) ; in_uint32_le ( s, width ) ; in_uint32_le ( s, bpp ) ; Bpp = ( bpp + 7 ) / 8 ; in_uint32_le ( s, compress ) ; in_uint32_le ( s, bufsize ) ; cx = right - left + 1 ; cy = bottom - top + 1 ; logger ( Graphics, Debug, ""process_bitmap_updates(), <S2SV_blank> [%d,%d,%d], <S2SV_blank> [%d,%d], <S2SV_blank> bpp=%d, <S2SV_blank> compression=%d"", left, top, right, bottom, width, height, Bpp, compress ) ; if (! compress ) { int y ; bmpdata = ( uint8 * ) xmalloc ( width * height * Bpp ) ; for ( y = 0 ; y <",0
621,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
622,"<S2SV_ModStart> tx_size, vp9_coeff_stats coef_stats <S2SV_ModEnd> ) { vp9_coeff_probs_model <S2SV_ModStart> tx_size ] ; vpx_coeff_count <S2SV_ModEnd> * coef_counts = <S2SV_ModStart> l ) { vpx_tree_probs_from_distribution <S2SV_ModEnd> ( vp9_coef_tree, <S2SV_ModStart> m ) coef_probs [ i ] [ j ] [ k ] [ l ] [ m ] = get_binary_prob ( coef_branch_ct [ i ] [ j ] [ k ] [ l ] [ 0 ], coef_branch_ct [ i ] [ j ] [ k ] [ l ] [ 1 ] ) ; } } } } for ( i = 0 ; i < PLANE_TYPES ; ++ i ) { for ( j = 0 ; j < REF_TYPES ; ++ j ) { for ( k = 0 ; k < BAND_COEFF_CONTEXTS ( k ) ; ++ k ) coef_probs [ i ] [ j ] [ k ] [ l ] [ 0 ] [ 1 ] = eob_branch_ct [ i ] [ j ] [ k ] [ l ] - coef_branch_ct [ i ] [ j ] [ k ] [",0
623,"<S2SV_ModStart> ( name ) ; if (! access_ok ( VERIFY_WRITE, fd, F_OK ) ) return - EBADF",0
624,"<S2SV_ModStart> int su3000_frontend_attach ( struct dvb_usb_device * d, <S2SV_ModStart> ( dvb_usb_generic_rw ( <S2SV_ModEnd> d -> dev <S2SV_ModStart> ( dvb_usb_generic_rw ( <S2SV_ModEnd> d -> dev <S2SV_ModStart> = 0xe ; ibuf <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> = 0x02 ; ibuf <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> ( dvb_usb_generic_rw ( <S2SV_ModEnd> d -> dev <S2SV_ModStart> ( dvb_usb_generic_rw ( <S2SV_ModEnd> d -> dev <S2SV_ModStart> 300 ) ; ibuf <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> = 0xe ; ibuf <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> = 0x83 ; ibuf <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> ( dvb_usb_generic_rw ( <S2SV_ModEnd> d -> dev <S2SV_ModStart> ( dvb_usb_generic_rw ( <S2SV_ModEnd> d -> dev <S2SV_ModStart> = 0 ; ibuf <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> ( dvb_usb_generic_rw ( <S2SV_ModEnd> d -> dev <S2SV_ModStart> ( dvb_usb_generic_rw ( <S2SV_ModEnd> d -> dev <S2SV_ModStart> ( ds3000_attach, <S2SV_ModEnd> d -> fe_adap <S2SV_ModStart> ( ts2020_attach, <S2SV_ModEnd> d -> fe_adap <S2SV_ModStart> ( dw3000_attach, <S2SV_ModEnd> d -> fe_adap",0
625,"<S2SV_ModStart> * iface, vpx_codec_enc_config_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA <S2SV_ModEnd> ) &&! <S2SV_ModStart> ( ctx -> init_flags & VPX_CODEC_USE_XMA <S2SV_ModEnd> ) ctx -> <S2SV_ModStart> ( ctx -> init_flags & VPX_CODEC_USE_PSNR <S2SV_ModEnd> ) ctx ->",0
626,"<S2SV_ModStart> stride, int uv_stride, int mv_row, int mv_col, struct scale_factors * scale, int x, int y ) { const int which_mv = 0 ; const MV mv = { mv_row, mv_col } ; const InterpKernel * const kernel = <S2SV_ModEnd> xd -> mi <S2SV_ModStart> mbmi. interp_filter <S2SV_ModEnd> ; enum mv_precision <S2SV_ModStart> mv_precision_uv ; int uv_stride ; vpx_build_inter_predictor <S2SV_ModEnd> ( y_mb_ptr, <S2SV_ModStart> y ) ; vpx_build_inter_predictor <S2SV_ModEnd> ( u_mb_ptr, <S2SV_ModStart> uv_stride, & mv_row, scale, 16, 16, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vpx_build_inter_predictor <S2SV_ModEnd> ( v_mb_ptr, <S2SV_ModStart> uv_stride, & mv_row, scale, 16, 16, which_mv, kernel, MV_PRECISION_UV, x, y ) ; vpx_build_inter_predictor <S2SV_ModEnd> ( v_mb_ptr, <S2SV_ModStart> y ) ; vpx_build_inter_predictor <S2SV_ModEnd> ( v_mb_ptr,",0
627,"<S2SV_ModStart> = TRUE ; if ( strlen ( origbuf ) >= BUFSZ ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> too <S2SV_blank> long <S2SV_blank> \\""%s\\"""", origbuf ) ; return FALSE ; }",0
628,"<S2SV_ModStart> * numbers, size_t <S2SV_ModEnd> count ) { <S2SV_ModStart> ( ) ; if ( count > INT_MAX / count ) { fprintf ( stderr, ""too <S2SV_blank> many <S2SV_blank> arguments <S2SV_blank> for <S2SV_blank> cJSON_CreateFloatArray\\n"" ) ; return 0 ; } <S2SV_ModStart> i ) { if ( numbers [ i ] == 0 ) { fprintf ( stderr, ""too <S2SV_blank> many <S2SV_blank> arguments <S2SV_blank> for <S2SV_blank> cJSON_CreateFloatArray\\n"" ) ; return 0 ; } <S2SV_ModStart> ] ) ; }",0
629,"<S2SV_ModStart> data_end ) { const <S2SV_ModStart> pbi -> common <S2SV_ModEnd> ; const int <S2SV_ModStart> tile_cols ) ; const <S2SV_ModStart> tile_rows ) ; const <S2SV_ModStart> 0 ) { int i ; CHECK_MEM_ERROR ( cm, pbi -> tile_workers, vpx_malloc ( num_threads * sizeof ( * pbi -> tile_workers ) ) ) ; for ( i = 0 ; i < num_threads ; ++ i ) { VP9Worker <S2SV_ModEnd> * const worker <S2SV_ModStart> worker = & pbi <S2SV_ModEnd> -> tile_workers [ <S2SV_ModStart> pbi -> num_tile_workers <S2SV_ModEnd> ; if ( <S2SV_ModStart> n ) { const TileWorkerHook * worker_hook = & <S2SV_ModStart> pbi -> num_tile_workers ; worker_hook -> <S2SV_ModEnd> hook = ( <S2SV_ModStart> n ) { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Tile <S2SV_blank> decoder <S2SV_blank> thread <S2SV_blank> creation <S2SV_blank> failed"" ) ; } } } for ( n = 0 ; n < num_workers ; ++ n ) { pbi -> tile_workers [ n ]. hook = ( VP9WorkerHook ) tile_worker_init <S2SV_ModEnd> ( worker ) <S2SV_ModStart> pbi -> num_tile_workers <S2SV_ModEnd> ; } }",0
630,"<S2SV_ModStart> * 0x101 ; if ( order < 0 || order > 0xffff ) { printf ( ""Invalid <S2SV_blank> minolta <S2SV_blank> order <S2SV_blank> value\\n"" ) ; return ; } <S2SV_ModStart> ( ) + 1 ; if ( offset < save ) { printf ( ""Invalid <S2SV_blank> minolta <S2SV_blank> offset <S2SV_blank> value\\n"" ) ; return ; } <S2SV_ModEnd> while ( ( <S2SV_ModStart> ( ) ; if ( len < 1 || len > 0xffff ) { printf ( ""Invalid <S2SV_blank> minolta <S2SV_blank> len <S2SV_blank> value\\n"" ) ; return ; } <S2SV_ModStart> case 0x505244 : if ( len < 1 || len > 32767 ) { printf ( ""Invalid <S2SV_blank> minolta <S2SV_blank> tag <S2SV_blank> value\\n"" ) ; return ; } <S2SV_ModStart> case 0x524946 : if ( len < 1 || len > 32767 ) { printf ( ""Invalid <S2SV_blank> minolta <S2SV_blank> len <S2SV_blank> value\\n"" ) ; return ; } <S2SV_ModStart> case 0x524950 : if ( len < 1 || len > 32767 ) { printf ( ""Invalid <S2SV_blank> minolta <S2SV_blank> len <S2SV_blank> value\\n"" ) ; return ; }",0
631,"<S2SV_ModStart> cm -> seg ; struct segment_data * seg_data <S2SV_ModStart> = SEGMENT_DELTADATA ; seg_data = seg ; <S2SV_ModStart> ( ) ; seg_data -> abs_delta = SEGMENT_DELTADATA ; <S2SV_ModStart> ++ ) { const int qindex_delta = 0, segment_rdmult = 0 ; <S2SV_ModStart> i ) == 0 <S2SV_ModEnd> ) { RDMULT_RATIO <S2SV_ModStart> continue ; } if ( Q_RATIO ( i ) == 0 ) { qindex_delta = 0 ; continue ; } <S2SV_ModStart> ) ) ; seg_data -> <S2SV_ModEnd> seg_id = SEGMENT_ID <S2SV_ModStart> i ), seg_data -> seg_id <S2SV_ModEnd>, qindex_delta ) <S2SV_ModStart> i ), seg_data -> seg_feature <S2SV_ModEnd> ) ; segment_rdmult",0
632,<S2SV_ModStart> -> error_code ) { <S2SV_ModStart> : NULL ; ctx -> base. err_detail_max = ctx -> base. err_detail_max ; },0
633,"<S2SV_ModStart>, * ps_cur_poc ; ps_dec -> u4_num_slices = 0 ; ps_dec -> u4_num_pic_params = 0 ; ps_dec -> u4_pic_skip_mode = IVD_SKIP_NONE ; ps_dec -> i4_degrade_type = 0 ; ps_dec -> i4_degrade_pics = 0 ; ps_dec -> i4_app_skip_mode = IVD_SKIP_NONE <S2SV_ModStart> = IVD_SKIP_NONE ; <S2SV_ModEnd> ps_dec -> s_cab_dec_env <S2SV_ModStart> ps_cur_slice ) ; <S2SV_ModEnd> ps_dec -> u4_num_pic_params <S2SV_ModStart> ps_cur_slice ) ; <S2SV_ModEnd> ps_dec -> u4_num_slices <S2SV_ModStart> ps_cur_slice ) ; <S2SV_ModEnd> ps_dec -> u4_pic_ht <S2SV_ModStart> ps_cur_slice ) ; <S2SV_ModEnd> ps_dec -> u4_num_pic_params <S2SV_ModStart> ps_cur_slice ) ; <S2SV_ModEnd> ps_dec -> s_cab_dec_env <S2SV_ModStart> ps_cur_slice ) ; <S2SV_ModEnd> ps_dec -> u4_num_pic_params <S2SV_ModStart> ps",0
634,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet ),0
635,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static long <S2SV_ModEnd> getnum ( const <S2SV_ModStart> int getnum ( <S2SV_ModEnd> char * * <S2SV_ModStart>, int df, int * a ) { if (! a ) return 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart>! isdigit ( <S2SV_ModEnd> * * fmt <S2SV_ModStart> * fmt ) <S2SV_ModEnd> ) { int <S2SV_ModStart> = 0 ; while ( isdigit ( * * fmt ) ) <S2SV_ModEnd> { a = <S2SV_ModStart> '0' ; } <S2SV_ModEnd> return a ;",0
636,<S2SV_ModStart> GCSpropagate ) ; g -> gcstate = GCSdestroyed ;,0
637,<S2SV_ModStart> 0 ; else { kfree ( buf ) ; <S2SV_ModStart> - EIO ; },0
638,"<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } <S2SV_ModEnd> memset ( buffer <S2SV_ModStart> buffer ) ; <S2SV_ModEnd> s_write ( c",0
639,"<S2SV_ModStart> remote_connection_s * connection, int * socket_timeout <S2SV_ModStart> -> variant_opaque ; <S2SV_ModEnd> int rc = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> struct addrinfo * <S2SV_ModStart> = NULL ; * socket_timeout = - 1 ; <S2SV_ModStart> = NULL ; * socket_timeout = - 1 ; <S2SV_ModStart> = SOCK_RAW ; if (! * socket_timeout ) { * socket_timeout = sock ; <S2SV_ModStart> ) ) ; } <S2SV_ModStart> ) ; } if (! * socket_timeout ) { * socket_timeout = sock ; } <S2SV_ModStart> ) ; } * socket_timeout = sock ;",0
640,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> ; cpi -> <S2SV_ModEnd> non_gf_bitrate_adjustment = 0",0
641,"<S2SV_ModStart> ) ) ; if ( len < 26 ) { ND_PRINT ( ( ndo, ""[seq <S2SV_blank> number <S2SV_blank> %u]"", i ) ) ; return ; }",0
642,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command",0
643,"<S2SV_ModStart> Image * image <S2SV_ModEnd> ; register IndexPacket <S2SV_ModStart> length, padding <S2SV_ModEnd>, version, <S2SV_ModStart> ) break ; if ( length > MaxTextExtent - 4 ) { image -> columns = 0 ; image -> rows = 0 ; } <S2SV_ModStart> ) break ; if ( length > MaxTextExtent - 4 ) { image -> columns = 0 ; image -> rows = 0 ; } <S2SV_ModStart> ) break ; if ( length > MaxTextExtent - 4 ) { image -> columns = 0 ; image -> rows = 0 ; }",0
644,"<S2SV_ModStart> ) ) { if (! ( qcd = jpc_enc_decode ( enc, qcd ) ) ) { jas_eprintf ( ""cannot <S2SV_blank> decode <S2SV_blank> packet\\n"" ) ; return - 1 ; }",0
645,<S2SV_ModStart> ; if (! chanmode_found ) { if ( <S2SV_ModStart> ) ; } },0
646,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> v : ( vpx <S2SV_ModEnd> << 1 ) <S2SV_ModStart> + vp9_read_bit ( &",0
647,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
648,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> REFERENCE_MODE mode = vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> comp_inter_prob [ ctx <S2SV_ModStart> REFERENCE_MODE mode = vpx_read <S2SV_ModEnd> ( r,",0
649,"<S2SV_ModStart>! stream ) { <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; } <S2SV_ModStart> ( res ) { <S2SV_ModStart> ) ) ; } <S2SV_ModStart> stereo_fmt = STEREO_FORMAT_MONO <S2SV_ModEnd> ; # if <S2SV_ModStart> ; # if CONFIG_WEBM_IO <S2SV_ModEnd> stream -> ebml <S2SV_ModStart> = - 1 ; stream -> ebml. last_pts_ms = - 1",0
650,<S2SV_ModStart> ; if ( * cp == '\\0' ) break ; if (,0
651,<S2SV_ModStart> -> root_node = ( yr_re_node * ),0
652,"<S2SV_ModStart> ) ) ; if ( iter -> conn -> dict -> auth_mode!= DB_DISCARD_ONLY ) { <S2SV_ModStart> 0 ) { auth_request_log_debug <S2SV_ModEnd> ( iter -> <S2SV_ModStart>, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> = <S2SV_blank> %s"" <S2SV_ModEnd>, str_c ( <S2SV_ModStart> 0 ) { auth_request_log_debug <S2SV_ModEnd> ( iter ->",0
653,<S2SV_ModStart> ; tok -> line_type = 0 ; tok ->,0
654,<S2SV_ModStart> maxBitrate ; } av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo = NULL ;,0
655,<S2SV_ModStart> ( dpbSize ) ; dpb -> picSizeInMbs = picSizeInMbs ; dpb -> dpbSize = dpbSize,0
656,"<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart> (! sock ||! addr <S2SV_ModStart> OE_EINVAL ) ; addrlen_out = * addrlen ; if ( addrlen_out > OE_SSIZE_MAX ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } <S2SV_ModStart> ( addrlen ) { <S2SV_ModStart> * addrlen ; } <S2SV_ModStart>, addrlen_in, addrlen_out <S2SV_ModEnd> )!= OE_OK <S2SV_ModStart> ) ; } if ( addrlen_out > OE_SSIZE_MAX ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; }",0
657,,1
658,<S2SV_ModStart> FALSE ; } if (!,0
659,<S2SV_ModStart> ipv6_pinfo * np <S2SV_ModEnd> ; struct ipv6_txoptions <S2SV_ModStart> ( sk ) ; struct ipv6_txoptions * opt = NULL <S2SV_ModStart> -> flowlabel ; np = inet6_sk ( sk ) ; <S2SV_ModStart> -> flowlabel ; np = inet6_sk ( sk ) ; <S2SV_ModStart> -> flowlabel ; np = inet6_sk ( sk ) ; <S2SV_ModStart> -> flowlabel ; np = inet6_sk ( sk ) ; <S2SV_ModStart> -> flowlabel ; np = inet6_sk ( sk ) ; <S2SV_ModStart> -> flowlabel ; np = inet6_sk ( sk ) ; <S2SV_ModStart> -> flowlabel ; np = inet6_sk ( sk ) ;,0
660,"<S2SV_ModStart>, err, <S2SV_ModEnd> overlays = 0 <S2SV_ModStart>, hdr_size, j ; uint32_t opt_size = 0 <S2SV_ModStart> size_t fsize ; <S2SV_ModEnd> struct cli_exe_section * <S2SV_ModStart> j ) ; if ( j >= sizeof ( exe_sections ) ) { cli_err ( ""cli_scanpe: <S2SV_blank> cli_exe_sections <S2SV_blank> == <S2SV_blank> %zu\\n"", j ) ; return CL_EINVAL ; } <S2SV_ModStart> j ) ; if ( j >= sizeof ( exe_sections ) ) { cli_err ( ""cli_scanpe: <S2SV_blank> cli_exe_sections <S2SV_blank> == <S2SV_blank> %zu\\n"", j ) ; return CL_EINVAL ; } <S2SV_ModStart> j ) ; if ( j >= sizeof ( exe_sections ) ) { cli_err ( ""cli_scanpe: <S2SV_blank> cli_exe_sections <S2SV_blank> == <S2SV_blank> %zu\\n"", j ) ; return CL_EINVAL ; }",0
661,"<S2SV_ModStart> address ) { uint16_t result = 0 ; <S2SV_ModStart> address ) ; result |= <S2SV_ModStart> ; while ( <S2SV_ModEnd> dm9000ReadReg ( DM9000_EPCR <S2SV_ModStart> dm9000ReadReg ( DM9000_EPCR <S2SV_ModEnd> ) & EPCR_ERRE <S2SV_ModStart> ) { } result |= <S2SV_ModStart> DM9000_EPCR, EPCR_EPOS <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; return ( result << 8 ) | result <S2SV_ModEnd> ; } <S2SV_null>",0
662,"<S2SV_ModStart> pcmk_ok ) { int rc2 ; <S2SV_ModStart> cib, & rc2 ) ; } if ( rc == pcmk_ok ) { int rc2 ; <S2SV_ModStart> pcmk_ok ) { int rc2 ; <S2SV_ModStart> cib, & rc2 ) ; } if ( rc == pcmk_ok ) { int rc2 ; <S2SV_ModStart> ) ) ; } if ( rc == pcmk_ok ) { int rc2 ; <S2SV_ModStart> pcmk_ok ) { int rc2 ; <S2SV_ModStart> callback ) ) ; } if ( rc2 == - 1 ) { rc = - EINVAL ; }",0
663,"<S2SV_ModStart> = ubuf ; memset ( & address, 0, sizeof ( address ) ) ;",0
664,"<S2SV_ModStart> num00, tmp_err = 0 <S2SV_ModStart> int new_mv_mode_penalty = 64 <S2SV_ModEnd> ; const int <S2SV_ModStart> bsize ] ; <S2SV_ModEnd> v_fn_ptr. vf <S2SV_ModStart> bsize ) ; if ( x -> diamond_search_sad ) { <S2SV_ModStart> = cpi -> diamond_search_sad_v16 <S2SV_ModEnd> ( x, <S2SV_ModStart>, & tmp_mv <S2SV_ModEnd>, & num00 <S2SV_ModStart> = tmp_err ; }",0
665,<S2SV_ModStart> ; if ( <S2SV_ModEnd> hivex_write ( h,0
666,<S2SV_ModStart> ; merged -> <S2SV_ModEnd> is_dir_config_in_progress = ( <S2SV_ModStart> child -> is_dir_config_in_progress <S2SV_ModEnd> ; merged ->,0
667,"<S2SV_ModStart>, one, <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize (",0
668,<S2SV_ModStart> ( r = <S2SV_ModEnd> sshbuf_put_cstring ( b,1
669,"<S2SV_ModStart> ) ) { ovalue = sclone ( sclone ( value ) ) ; <S2SV_ModStart>, & ovalue ) ; if (! ovalue ) return 0 <S2SV_ModEnd> ; ovalue =",0
670,<S2SV_ModStart> client = user_data ; gboolean shutdown_flag = FALSE <S2SV_ModStart> num_clients ) ; if ( client -> shutdown_flag ) { shutdown_flag = TRUE ; } <S2SV_ModStart> user ) ; if ( client -> shutdown_flag ) { shutdown_flag = FALSE ; },0
671,<S2SV_ModStart> * uv ; if ( thread -> twups!= NULL ) { <S2SV_ModStart> next ) { <S2SV_ModEnd> if (! <S2SV_ModStart> ; } } } },0
