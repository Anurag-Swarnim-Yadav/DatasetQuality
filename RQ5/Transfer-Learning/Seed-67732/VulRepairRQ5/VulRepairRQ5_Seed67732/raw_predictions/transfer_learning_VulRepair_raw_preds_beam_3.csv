,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
1,<S2SV_ModStart> ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ; if <S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;,0
2,"<S2SV_ModStart>, 0 ) ; if ( writer -> stco ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_TAG, ""Deleting <S2SV_blank> stco <S2SV_blank> from <S2SV_blank> writer\\n"" ) ; } if ( writer -> stsc ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_TAG, ""Deleting <S2SV_blank> stsc <S2SV_blank> from <S2SV_blank> writer\\n"" ) ; } if ( writer -> stco ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_TAG, ""Deleting <S2SV_blank> stco <S2SV_blank> from <S2SV_blank> writer\\n"" ) ; } if ( writer -> stsc ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_TAG, ""Deleting <S2SV_blank> stsc <S2SV_blank> from <S2SV_blank> writer\\n"" ) ; } if ( writer -> stco ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_TAG, ""Deleting <S2SV_blank> stco <S2SV_blank> from <S2SV_blank> writer\\n"" ) ; } if ( writer -> stsc ) { GF_LOG ( GF_LOG_TAG, GF_LOG_TAG, ""Deleting <S2SV_blank> stsc <S2SV_blank> from <S2SV_blank> writer\\n""",0
3,<S2SV_ModStart> item ) { if ( item < 0 ) { return NULL ; } <S2SV_ModStart> -> child ; if (! c ) { return NULL ; } <S2SV_ModStart> while ( c ) { <S2SV_ModEnd> c = c <S2SV_ModStart> -> next ; <S2SV_ModEnd> } return c,0
4,"<S2SV_ModStart> u64 nr, <S2SV_ModEnd> struct pt_regs * <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",1
5,<S2SV_ModStart> EXT4_EXTENTS_FLAG ) { <S2SV_ModEnd> struct grub_ext4_extent_header * <S2SV_ModStart> leaf ) { <S2SV_ModEnd> return - 1 <S2SV_ModStart> len ) ) { <S2SV_ModStart> return 0 ; } else { grub_disk_addr_t start ; start = grub_le_to_cpu16 ( ext [ i ]. start_hi ) ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext [ i ]. start ) ; return fileblock + start ; } } else { grub_disk_addr_t start ; start = grub_le_to_cpu16 ( ext [ i ]. start_hi ) ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext [ i ]. start ) ; return fileblock + start ; } } else { grub_disk_addr_t start ; start = grub_le_to_cpu16 ( ext [ i ]. start_hi ) ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext [ i ]. start ) ; return fileblock + start ; } } else { grub_error ( GRUB,0
6,"<S2SV_ModStart> fdct16 ( const tran_low_t <S2SV_ModEnd> in [ 16 <S2SV_ModStart> 16 ], tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> ] ) { tran_high_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step2 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step3 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t input [ 8 ] ; tran_high_t <S2SV_ModEnd> temp1, temp2 <S2SV_ModStart> ] ; { tran_low_t <S2SV_ModEnd> s0, s1 <S2SV_ModStart>, s7 ; tran_high_t <S2SV_ModEnd> t0, t1 <S2SV_ModStart>, t3 ; tran_high_t <S2SV_ModEnd> x0, x1",0
7,"<S2SV_ModStart> ( ) ; # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; # endif parse_ciff ( save + hlen, len - hlen, 0 ) ; } if ( parse_tiff ( save + 6 ) ) apply_tiff ( ) ; fseek ( ifp, save + len, SEEK_SET ) ; } return 1 <S2SV_ModEnd> ; } <S2SV_null>",0
8,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> search_filter_level ( const <S2SV_ModStart> * sd, VP9EncoderConfig <S2SV_ModEnd> * cpi, <S2SV_ModStart> partial_frame ) { YV12_COMMON <S2SV_ModEnd> * const cm <S2SV_ModStart> cm = & sd <S2SV_ModEnd> -> common ; <S2SV_ModStart> ) ; int best_err ; int filt_best ; int filt_direction = 0 ; int filt_mid = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; int ss_err [ MAX_LOOP_FILTER + 1 ] ; vpx_yv12_copy_y ( cm -> frame_to_show, & cpi -> last_frame_uf ) ; best_err = try_filter_frame ( sd, cpi, filt_mid, partial_frame ) ; filt_best = filt_mid ; ss_err [ filt_mid ] = best_err ; while ( filter_step > 0 ) { const int filt_high = MIN ( filt_mid + filter_step, max_filter_level ) ; const int filt_low = MAX ( filt_mid - filter_step, min_filter_level ) ;",0
9,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
10,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ++ i ) vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( usehp ) vpx_write <S2SV_ModEnd> ( w,",1
11,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } else { <S2SV_ModEnd> request -> rxBlockSzx <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; },0
12,"<S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ( l2tp_cc_direction2str, EXTRACT_16BITS ( ptr ) ) ) ) ; ptr ++ ; if ( length < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; print_string ( ndo, ( const u_char * ) ptr, length - 4 ) ; return ; } <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
13,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> construct_get_dest_keyring ( struct <S2SV_ModStart> * authkey ; int ret ; <S2SV_ModStart> dest_keyring ) ; ret = key_permission ( make_key_ref ( key_type_keyring ( KEY_TYPE_KEY ), & dest_keyring ) ) ; if ( ret < 0 ) { key_put ( dest_keyring ) ; return ret ; } <S2SV_ModStart> ( dest_keyring ) ret = key_permission ( make_key_ref ( KEY_TYPE_KEY ), & dest_keyring ) ; if ( ret < 0 ) { key_put ( dest_keyring ) ; return ret ; } <S2SV_ModEnd> } case KEY_REQKEY_DEFL_THREAD_KEYRING <S2SV_ModStart> ) ; } ret = key_permission ( make_key_ref ( KEY_TYPE_KEY ), & dest_keyring ) ; if ( ret < 0 ) { key_put ( dest_keyring ) ; return ret ; } <S2SV_ModStart> ) ; } return 0 ;",0
14,"<S2SV_ModStart> = create_spnego_ctx ( ) ; if ( sc == NULL ) return GSS_S_FAILURE ; ret = get_negotiable_mechs ( minor_status, spcred, GSS_C_INITIATE, & sc -> mech_set ) ; if ( ret!= GSS_S_COMPLETE ) goto cleanup ; sc -> internal_mech = & sc -> mech_set -> elements [ 0 ] ; if ( put_mech_set ( sc -> mech_set, & sc -> DER_mechTypes ) < 0 ) { ret = GSS_S_FAILURE ; goto cleanup ; } sc -> ctx_handle = GSS_C_NO_CONTEXT ; * ctx = ( gss_ctx_id_t ) sc ; sc = NULL ; * tokflag = INIT_TOKEN_SEND ; ret = GSS_S_CONTINUE_NEEDED ; cleanup : release_spnego_ctx ( & sc ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>",0
15,<S2SV_ModStart> ; tm = g_localtime <S2SV_ModEnd> ( & t,0
16,<S2SV_ModStart> length ) ; if ( strlen ( password )!= 0 ) { <S2SV_ModStart> ) ) ; },0
17,<S2SV_ModStart> == p ) { * errnop = ERANGE ; <S2SV_ModStart> goto not_found ; },0
18,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",1
19,<S2SV_ModStart> = 0 ; if (! <S2SV_ModStart> & timeout ) ) return false,0
20,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> detect_transition_to_still ( struct <S2SV_ModStart> last_decay_rate ) { bool trans_to_still = false <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( still_interval > MIN_STILL_INTERVAL <S2SV_ModEnd> && loop_decay_rate >= <S2SV_ModStart> j ; const TWO_PASS <S2SV_ModEnd> * position = <S2SV_ModStart> * position = TWO_PASS <S2SV_ModEnd> -> stats_in ; <S2SV_ModStart> == input_stats ( TWO_PASS <S2SV_ModEnd>, & tmp_next_frame <S2SV_ModStart> } reset_fpf_position ( TWO_PASS <S2SV_ModEnd>, position ) <S2SV_ModStart> j == still_interval &&! trans_to_still ) { <S2SV_ModEnd> trans_to_still = 1 <S2SV_ModStart> ; } return true ; } return false <S2SV_ModEnd> ; } <S2SV_null>",0
21,<S2SV_ModStart> inode ) ) { <S2SV_ModStart> size ) ; if (! ret ) io -> flag = EXT4_IO_UNWRITTEN ; },0
22,<S2SV_ModStart> alg ) { <S2SV_ModEnd> if (! <S2SV_ModStart> CRYPTO_ALG_NEED_FALLBACK ) ) <S2SV_ModEnd> alg = crypto_alg_lookup,0
23,"<S2SV_ModStart> = GIT_PKT_NG ; if ( len < 3 ) goto out_err ; <S2SV_ModStart> += 3 ; <S2SV_ModEnd> ptr = strchr <S2SV_ModStart>,'<S2SV_blank>') ; if (! ptr ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> ref = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> ref ) ; memcpy ( pkt -> ref, line, len ) ; pkt -> ref [ len ] = '\\0' ; line = ptr + 3 <S2SV_ModEnd> ; if ( <S2SV_ModStart> + 1 ; <S2SV_ModEnd> ptr = strchr <S2SV_ModStart>, '\\n' ) ; if (! ptr ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> msg = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> msg ) ; memcpy ( pkt -> msg, line, len ) ; pkt -> msg [ len ] = '\\0' ; <S2SV_ModEnd> * out =",0
24,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> BYTE flags ; UINT32 <S2SV_ModEnd> length ; Stream_Read_UINT32,0
25,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; if (,0
26,"<S2SV_ModStart> mntent, path, false",0
27,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } io -> io_cleanup = mem_cleanup ;,1
28,<S2SV_ModStart> & ( size_t ) ( value + 0.5 ) ) ; break ; } case RightShiftEvaluateOperator : { result = ( MagickRealType ) ( ( size_t ) pixel << ( size_t,0
29,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return ret?,0
30,<S2SV_ModStart> vpx_codec_enc_cfg_map_t * map ; if ( iface -> enc. cfg_maps == NULL ) return VPX_CODEC_INCAPABLE <S2SV_ModStart> ( map = ( vpx_codec_enc_cfg_map_t * ),0
31,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
32,"<S2SV_ModStart> void show_progress ( <S2SV_ModEnd> uint64_t dx_time ) <S2SV_ModStart> dx_time ) { if ( dx_time > 0 ) <S2SV_ModStart> dx_time ) ; else fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out, dx_time, ( double ) frame_out * 1000000.0 / ( double ) dx_time ) ;",0
33,"<S2SV_ModStart> NULL ) { PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> %s\\n"", fields [ i ]. name ) ;",0
34,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_ETXSTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXSTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TX",0
35,<S2SV_ModStart> ; value = ast2obj_string <S2SV_ModEnd> ( o -> <S2SV_ModStart> ; value = ast2obj_string <S2SV_ModEnd> ( o -> <S2SV_ModStart> ; value = ast2obj_string <S2SV_ModEnd> ( o ->,0
36,"<S2SV_ModStart> if ( page ) { if ( <S2SV_ModEnd> ( access ( <S2SV_ModStart> 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } } else <S2SV_ModStart> if ( page ) { if <S2SV_ModEnd> ( unlink ( <S2SV_ModStart> 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } } else <S2SV_ModStart> if ( page ) { if <S2SV_ModEnd> ( access ( <S2SV_ModStart> 0 ) ) { if ( <S2SV_ModEnd> unlink ( page <S2SV_ModStart> 0 ) ) { if ( <S2SV_ModEnd> unlink ( page <S2SV_ModStart> 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } } else <S2SV_ModStart> if ( page ) { if <S2SV_ModEnd> ( access ( <S2SV_ModStart> 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } } else <S2SV_ModStart> if ( page ) { if <S2SV_ModEnd> ( unlink ( <S2SV_ModStart> 0 ) ) { if ( <S2SV_ModEnd> unlink ( page <S2SV_ModStart> 0 ) ) { if ( <S2SV_ModEnd> unlink ( page <S2SV_ModStart> 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_",0
37,"<S2SV_ModStart> low_var_thresh, int mb_rows, int mb_cols, <S2SV_ModEnd> double level = <S2SV_ModStart>.5 ) ; unsigned char * limits = cm -> pp_limits_buffer ; ; int mbr, mbc ; ( void ) post ; ( void ) low_var_thresh ; ( void ) flag ; vpx_memset ( limits, ( unsigned char ) ppl, 16 * mb_rows ) ; for ( mbr = 0 ; mbr < mb_rows ; mbr ++ ) { vp8_post_proc_down_and_across_mb_row ( source -> y_buffer + 16 * mbr * source -> y_stride, source -> y_buffer + 16 * mbr * source -> y_stride, source -> y_stride, source -> y_width, limits, 16 ) ; vp8_post_proc_down_and_across_mb_row ( source -> u_buffer + 8 * mbr * source -> uv_stride, source -> u_buffer + 8 * mbr * source -> uv_stride, source -> uv_stride, source -> uv_width, limits, 8 ) ; vp8_post_proc_down_",0
38,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; error = mb2_cache_entry_alloc ( ext4_mb_cache, GFP_NOFS ) ; if ( error ) { ea_bdebug ( bh, ""out <S2SV_blank> of <S2SV_blank> memory"" ) ; return ; } <S2SV_ModStart> = mb_cache_entry_insert ( ext4_mb_cache, <S2SV_ModEnd> bh -> b_bdev <S2SV_ModStart> error ) { mb2_cache_entry_free <S2SV_ModEnd> ( ce ) <S2SV_ModStart> hash ) ; <S2SV_ModEnd> } } <S2SV_null>",0
39,"<S2SV_ModStart> ) ) ; if (! <S2SV_ModEnd> r_socket_http_answer ( s <S2SV_ModStart>, rlen ) ) { free ( uri ) ; return NULL ; } return NULL",0
40,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> - ENOMEM ; opt = rcu_dereference_protected ( * optp, lockdep_is_held ( & ip_options_rcu_lock ) ) ; if (! opt ) { opt = ip_options_get_alloc ( optlen ) ; if (! opt ) return - ENOMEM ; if ( copy_from_user ( opt -> __data, data, optlen ) ) { kfree ( opt ) ; return - EFAULT ; } return ip_options_get_finish ( net, optp, opt, optlen ) ; }",0
41,"<S2SV_ModStart> ( ndo, ""[|truncated]"" <S2SV_ModEnd> ) ) ;",0
42,"<S2SV_ModStart> ) N_ ( ""E536: <S2SV_blank> Cannot <S2SV_blank> set <S2SV_blank> \'%s\' <S2SV_blank> to <S2SV_blank> a <S2SV_blank> string"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) N_ ( ""E537: <S2SV_blank> Cannot <S2SV_blank> set <S2SV_blank> \'%s\' <S2SV_blank> to <S2SV_blank> a <S2SV_blank> string"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) N_ ( ""E538: <S2SV_blank> Cannot <S2SV_blank> set <S2SV_blank> \'%s\' <S2SV_blank> to <S2SV_blank> a <S2SV_blank> string"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) N_ ( ""E539: <S2SV_blank> Cannot <S2SV_blank> set <S2SV_blank> \'%s\' <S2SV_blank> to <S2SV_blank> a <S2SV_blank> string"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) N_ ( ""E538: <S2SV_blank> Cannot <S2SV_blank> set <S2SV_blank> \'%s\' <S2SV_blank> to <S2SV_blank> a <S2SV_blank> string"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) N_ ( ""E539: <S2SV_blank> Cannot <S2SV_blank> set <S2SV_blank> \'%s\' <S2SV_blank> to <S2SV_blank> a <S2SV_blank> string"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) N_ ( ""E539: <S2SV_blank> Cannot <S2SV_blank> set <S2SV_blank> \'%s\' <S2SV_blank> to <S2SV_blank> a <S2SV_blank> string"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) N_ ( ""E539: <S2SV_blank> Cannot <S2SV_blank> set <S2SV_blank> \'%s\' <S2SV_blank> to <S2SV_blank> a <S2SV_blank> string"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) N_ ( ""E539: <S2SV_blank> Cannot <S2SV_blank> set",0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode <S2SV_ModStart>, & new_mode, & acl ) ; if ( ret <S2SV_ModEnd> ) goto out",0
44,"<S2SV_ModStart> size_t size ; size_t res ; <S2SV_ModStart> / 8 ; res = jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ; if ( res < 0 || size > JAS_IMG_MAXSIZE ) { goto error ; } <S2SV_ModStart> if (! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ) { goto error ; } cmpt -> stream_ = ( inmem )? jas_stream_memopen2 ( 0, size ) : jas_stream_tmpfile ( ) ; if (! cmpt -> stream_ ) { goto error ; } if ( size > 0 ) { if ( size - 1 > LONG_MAX ) { goto error ; } if ( jas_stream_seek ( cmpt -> stream_, size - 1, SEEK_SET ) < 0 || jas_stream_putc ( cmpt -> stream_, '\\0' ) < 0 || jas_stream_putc ( cmpt -> stream_, '\\",0
45,<S2SV_ModStart> dp == datalen || datalen == 0,0
46,"<S2SV_ModStart> req, size_t acl_len, u32 * hdr_len <S2SV_ModEnd> ) { __be32 <S2SV_ModStart> { __be32 * hdr <S2SV_ModEnd> ; uint32_t attrlen <S2SV_ModStart> int status ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> xdr, OP_GETATTR, hdr_len <S2SV_ModStart> attrlen, & hdr_len <S2SV_ModEnd> ) )!= <S2SV_ModStart> recvd ) { * hdr_len = hdrlen ; <S2SV_ModStart> attrlen ) ; <S2SV_ModEnd> } else status",0
47,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
48,"<S2SV_ModStart> ) ) { if ( smatch ( auth, ""APPWEB"" ) ) { return MPR_ERR_BAD_SYNTAX ; } <S2SV_ModStart> ; } } if ( smatch ( tok, ""APPWEB"" ) ) { if ( snumber ( owner ) ) { uid = ( int ) stoi ( owner ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { uid = HTTP -> uid ; } else { uid = 0 ; } } if ( perms && snumber ( perms ) ) { mode = ( int ) stoiradix ( perms, - 1, NULL ) ; } else { mode = 0 ; } } else { dirs = auth ; auth = 0 ; } tok = dirs ; for ( tok = sclone ( dirs ) ; ( dir = stok ( tok, "","", & tok ) )!= 0 ; ) { path = httpMakePath ( state -> route, state -> configDir, dir ) ; if ( mprGetPathInfo ( path, & info ) == 0 && info. isDir ) { continue ; } if ( mprMakeDir ( path, mode, uid, gid, 1 ) < 0 ) { return MPR_ERR_BAD_SYNTAX ;",0
49,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> addr = VPX_MALLOC_L <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; <S2SV_ModEnd> if ( addr,0
50,"<S2SV_ModStart> int res ; size_t <S2SV_ModEnd> indexes = SQUASHFS_LOOKUP_BLOCKS <S2SV_ModStart> ; long long * export_index_table = calloc ( indexes, sizeof ( long long ) ) <S2SV_ModEnd> ; res = <S2SV_ModStart> = read_fs_bytes ( sBlk. s. fs_fd <S2SV_ModEnd>, sBlk. <S2SV_ModStart> FALSE ; } free ( export_index_table ) ;",0
51,<S2SV_ModStart> ; } else { <S2SV_ModStart> p1 ) ; },0
52,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> # if CONFIG_VP8_ENCODER <S2SV_ModStart> # endif } for ( argi = argj = argv ; ( * argj = * argi ) ; argi += arg. argv_step ) { arg. argv_step = 1 ; if ( eos_mark_found ) { argj ++ ; continue ; } else if (! strcmp ( * argj, ""--"" ) ) { eos_mark_found = 1 ; continue ; } else if (! strcmp ( * argj, ""--"" ) ) { eos_mark_found = 1 ; continue ; } else if (! strcmp ( * argj, ""--"" ) ) { eos_mark_found = 1 ; continue ; } else <S2SV_ModStart> } if ( <S2SV_ModEnd> arg_match ( &",0
53,<S2SV_ModStart> } if ( c -> opt -> option. client || c -> opt -> protocol ) return 0 ; if ( c -> opt -> redirect_addr. names ) return 1 ; if ( <S2SV_ModStart> 1 ; } <S2SV_ModEnd> return 0 ; <S2SV_ModStart> return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
54,"<S2SV_ModStart> ; if ( crypto_memneq <S2SV_ModEnd> ( cmac,",0
55,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> const uint64_t bits_used <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
56,"<S2SV_ModStart> EOFOp 0x07 char * magick ; Image * image ; int opcode, operand, status ; MagickStatusType flags ; MagickSizeType number_pixels ; MemoryInfo * pixel_info ; Quantum index ; MemoryInfo * pixel_info ; Quantum * p ; size_t bits_per_pixel ; size_t number_colormaps ; size_t number_planes_filled ; unsigned char background_color [ 256 ], plane, pixels ; count = ReadBlob ( image, 2, ( unsigned char * ) magick ) ; if ( ( count!= 2 ) || ( memcmp ( magick, ""\\122\\314"", 2 )!= 0 ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> do { image <S2SV_ModStart>. x = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. y = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart> -> columns = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart> -> rows = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart> -> columns = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart> -> rows = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>",0
57,"<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> altsetting [ 0 ]. desc. bNumEndpoints < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; error = - EINVAL ; goto err_free_urb ; }",1
58,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
59,"<S2SV_ModStart> * dir = ""/tmp"" <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( fd = safe_mkstemp <S2SV_ModEnd> ( & tmpname",0
60,<S2SV_ModStart> = value ; if ( 0 == ps_codec -> i4_pps_done ) { ps_codec -> i4_pps_done = 1 ; return IHEVCD_INVALID_HEADER ; },0
61,"<S2SV_ModStart> n ] ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; }",0
62,"<S2SV_ModStart> void vp9_setup_dst_planes ( MACROBLOCKD_CONTEXT * xd_ctx <S2SV_ModEnd>, const YV12_BUFFER_CONFIG <S2SV_ModStart> mi_col ) { const MACROBLOCKD_BUFFER * const src = & xd_ctx -> plane [ mi_row * MAX_MB_PLANE + mi_col ] ; <S2SV_ModStart> uint8_t * const <S2SV_ModEnd> buffers [ 4 <S2SV_ModStart> int strides [ MAX_MB_PLANE <S2SV_ModEnd> ] = { <S2SV_ModStart> i ) { const MACROBLOCKD_PLANE <S2SV_ModEnd> * pd = <S2SV_ModStart> pd = & xd_ctx <S2SV_ModEnd> -> plane [",0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,<S2SV_ModStart> get_block = ocfs2_get_block <S2SV_ModEnd> ; return __blockdev_direct_IO,0
65,"<S2SV_ModStart> ( f, ""%79s <S2SV_blank> %100s\\n"" <S2SV_ModEnd>, def,",0
66,"<S2SV_ModStart> n ) { <S2SV_ModEnd> char * str <S2SV_ModStart> char * str <S2SV_ModEnd> ; assert ( <S2SV_ModStart> ':' ) ; return fstring_compile_expr_ex ( expr_start, expr_end, c, n, ""f-string"" <S2SV_ModEnd>, str, <S2SV_ModStart>, str, NULL <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
67,"<S2SV_ModStart> string ) { return cJSON_FindString <S2SV_ModEnd> ( object -> <S2SV_ModStart> object -> child, string ) <S2SV_ModEnd> ; } <S2SV_null>",0
68,<S2SV_ModStart> size ) ; if ( px -> ft == NULL ) { return FALSE ; },0
69,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ; <S2SV_ModStart> ptr ++ ; length -= 2 ;",0
70,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
71,<S2SV_ModStart> int i ; const <S2SV_ModStart> src -> v_buffer <S2SV_ModEnd> } ; const <S2SV_ModStart> src -> uv_stride <S2SV_ModEnd> } ; for,0
72,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; for ( <S2SV_ModStart> sk ) ; <S2SV_ModEnd> } return copied,0
73,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
74,<S2SV_ModStart> user ) { <S2SV_ModEnd> cleanup_srcu_struct ( &,0
75,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> sl = strlen,1
76,"<S2SV_ModStart> * for_ch ; <S2SV_ModEnd> REQ ( n <S2SV_ModStart>, comp_for ) ; is_async = 0 <S2SV_ModStart> == ASYNC ) <S2SV_ModEnd> is_async = 1 <S2SV_ModStart> = 1 ; <S2SV_ModEnd> for_ch = CHILD <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) ; <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) ) <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) ) <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) ) <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) ) <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) ) <S2SV_ModStart> ( n, <S2SV_ModEnd> is_async ) )",0
77,<S2SV_ModStart> NULL ; } if ( src -> curframe > BPF_MAX_FUNC_FRAMES ) return - EINVAL ;,0
78,"<S2SV_ModStart> write_mb_modes_kf ( const VP9_COMMON * cm, const MACROBLOCKD * xd, const MODE_INFO * mi, vpx_writer * w ) { const <S2SV_ModStart> * cpi, <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * above_mi = xd -> above_mi <S2SV_ModEnd> ; const MODE_INFO <S2SV_ModStart> MODE_INFO * const <S2SV_ModEnd> left_mi = xd <S2SV_ModStart> left_available? mi <S2SV_ModEnd> [ - 1 <S2SV_ModStart> segment_id ) ; <S2SV_ModEnd> if ( bsize <S2SV_ModStart> == TX_MODE_SELECT ) { if ( xd -> left_available ) { <S2SV_ModStart> w ) ; } else { write_skip ( cpi, mbmi -> segment_id, mi, w ) ; } } else { write_skip ( cpi, mbmi -> segment_id, mi, w ) ; }",0
79,"<S2SV_ModStart> if ( n >= <S2SV_ModEnd> maxn ) SWF_error <S2SV_ModStart> ""Action <S2SV_blank> overflow!!"" ) ; if ( actions [ n ]. SWF_ACTIONRECORD. Offset >= maxn ) { SWF_error ( ""Action <S2SV_blank> overflow!!"" ) ; return - 1 ; }",0
80,<S2SV_ModStart> ; if ( EXTRACT_32BITS ( & prep -> pp_n ) <S2SV_ModEnd> < sizeof ( <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> n = EXTRACT_32BITS,0
81,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
82,<S2SV_ModStart> zArg ) { assert ( pTable -> nModuleArg >= 0 ) ; <S2SV_ModStart> * ) * <S2SV_ModEnd> 2 + pTable <S2SV_ModStart> pTable -> nModuleArg <S2SV_ModEnd> ; char *,0
83,<S2SV_ModStart> j ] ; if ( j < 0 ) { j = 0 ; } <S2SV_ModStart> j ] ; if ( j < 0 ) { j = 0 ; } <S2SV_ModStart> j ] ; if ( j < 0 ) { j = 0 ; } <S2SV_ModStart> j ] ; if ( j < 0 ) { j = 0 ; } <S2SV_ModStart> j ] ; if ( j < 0 ) { j = 0 ; } <S2SV_ModStart> j ] ; if ( j < 0 ) { j = 0 ; } <S2SV_ModStart> j ] ; if ( j < 0 ) { j = 0 ; } <S2SV_ModStart> j ] ; if ( j < 0 ) { j = 0 ; },0
84,<S2SV_ModStart> -> dmin ; if ( ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { <S2SV_ModStart> p ) ; } <S2SV_ModStart> ONIGENC_IS_SINGLEBYTE ( reg <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_SINGLEBYTE ( reg <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_SINGLEBYTE ( reg <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_SINGLEBYTE ( reg <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_SINGLEBYTE ( reg <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_SINGLEBYTE ( reg <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_SINGLEBYTE ( reg <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_SINGLEBYTE ( reg <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_SINGLEBYTE ( reg <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_SINGLEBYTE ( reg <S2SV_ModEnd> ) ) { <S2SV_ModStart> ONIGENC_IS_SINGLEBYTE ( reg <S2SV_ModEnd> ) ) {,0
85,"<S2SV_ModStart> bfq_idle_slice_timer_body ( struct bfq_sched_data * sched_data <S2SV_ModEnd> ) { struct <S2SV_ModStart> bfq_data * bfqd <S2SV_ModEnd> ; enum bfqq_expiration <S2SV_ModStart> long flags ; struct bfq_queue * bfqq ; <S2SV_ModStart> flags ) ; bfq_clear_bfqq_wait_request_sched ( bfqq, sched_data <S2SV_ModEnd> ) ; if <S2SV_ModStart> return ; } bfq_bfqq_expire ( bfqd, bfqq, true, reason ) ; <S2SV_ModStart> flags ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
86,,1
87,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
88,"<S2SV_ModStart> diffBlock + diffBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } memcpy ( newData + newpos, diffPtr, x ) ; diffPtr += x ; if ( diffPtr <S2SV_ModEnd> + y > <S2SV_ModStart> extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } memcpy ( newData + newpos, extraPtr, y ) ; extraPtr += y ; if ( extraPtr + z <S2SV_ModEnd> > extraBlock + <S2SV_ModStart> NULL ; } <S2SV_ModEnd> } results =",0
89,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> np -> tclass ) ; rcu_read_unlock (,0
90,"<S2SV_ModStart> image ) ; if ( image == NULL ) { image = ( Image * ) malloc ( sizeof ( Image ) ) ; if ( image == NULL ) { exception ( exception, ""MemoryAllocationFailed"" ) ; return NULL ; } }",0
91,<S2SV_ModStart> data ) { ( void ) data ;,0
92,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
93,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
94,"<S2SV_ModStart> mb_offset ) ; memcpy <S2SV_ModEnd> ( mvx, <S2SV_ModStart> mb_offset ) ; memcpy <S2SV_ModEnd> ( mvy, <S2SV_ModStart> mb_offset ) ; memcpy <S2SV_ModEnd> ( mvx, <S2SV_ModStart> mb_offset ) ; memcpy <S2SV_ModEnd> ( mvy, <S2SV_ModStart> mb_offset ) ; memcpy <S2SV_ModEnd> ( mvx, <S2SV_ModStart> mb_offset ) ; memcpy <S2SV_ModEnd> ( mvy, <S2SV_ModStart> mb_offset ) ; memcpy <S2SV_ModEnd> ( mvx, <S2SV_ModStart> mb_offset ) ; memcpy <S2SV_ModEnd> ( mvy, <S2SV_ModStart> mb_offset ) ; memcpy <S2SV_ModEnd> ( mvx, <S2SV_ModStart> mb_offset ) ; memcpy <S2SV_ModEnd> ( mvy, <S2SV_ModStart> mb_offset ) ; memcpy <S2SV_ModEnd> ( mvx, <S2SV_ModStart> mb_offset ) ; memcpy <S2SV_ModEnd> ( mvy, <S2SV_ModStart> mb_offset ) ; memcpy <S2SV_ModEnd> ( mvx, <S2SV_ModStart> mb_offset ) ; memcpy <S2SV_ModEnd> ( mvy, <S2SV_ModStart> mb_offset ) ; memcpy <S2SV_ModEnd> ( mvy, <S2SV_ModStart> mb_offset ) ; memcpy <S2SV_ModEnd> ( mvx, <S2SV_ModStart> mb_offset ) ; memcpy <S2SV_ModEnd> ( mvy, <S2SV_ModStart> mb_offset ) ; memcpy <S2SV_ModEnd> ( mvx, <S2SV_ModStart> mb",0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
97,<S2SV_ModStart> msicap msicap ; if ( msgnum < sizeof ( msicap ) ) return - EINVAL ;,0
98,"<S2SV_ModStart> -> ptr ; if ( cmd -> flags & REDIS_CMD_DENYPASS ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> authenticated"" ) ; return REDIS_OK ; }",0
99,"<S2SV_ModStart> ; if ( cfg -> g_w == 0 || cfg -> g_h == 0 ) { return VPX_CODEC_ERR_INVALID_ARGS ; } if ( <S2SV_ModStart> VPX_RC_ONE_PASS ) ) { <S2SV_ModStart> ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; return VPX_CODEC_ERR_INVALID_ARGS ; }",0
100,"<S2SV_ModStart> cpi ) { <S2SV_ModEnd> vp9_init_plane_quantizers ( cpi <S2SV_ModStart> cpi, & cpi -> quantizers <S2SV_ModEnd> ) ; }",0
101,<S2SV_ModStart> info -> si_code!= SI_QUEUE ) <S2SV_ModEnd> return - EPERM <S2SV_ModStart> return - EPERM <S2SV_ModEnd> ; return do_send_specific,0
102,"<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; ISOM_DECREASE_SIZE ( ptr, 1 ) <S2SV_ModStart> ptr -> size ; if ( tmp_strsize < 8 ) return GF_ISOM_INVALID_FILE <S2SV_ModEnd> ; tmp_str =",0
103,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
104,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> -> state == fmode <S2SV_ModEnd> ) return ; <S2SV_ModStart> if ( ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> )!= ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> { if ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> -> state = fmode <S2SV_ModEnd> ; } <S2SV_null>",0
105,"<S2SV_ModStart> ) break ; status = SetImageExtent ( read_info, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( ( Image * ) NULL ) ; }",0
106,<S2SV_ModStart> 0 ; } if ( len > SIZE_MAX - elem. in_sg [ 0 ]. iov_len ) { return 0 ; },0
107,<S2SV_ModStart> unsigned ) JPC_QCX_GETEXPN <S2SV_ModEnd> ( qcd -> <S2SV_ModStart> unsigned ) JPC_QCX_GETMANT <S2SV_ModEnd> ( qcd ->,0
108,<S2SV_ModStart> = AV_PIX_FMT_PAL8 ; c -> padded_bits = 0 ;,0
109,<S2SV_ModStart> length - 1 <S2SV_ModEnd> ) ; return,1
110,"<S2SV_ModStart> * name = fdt_get_name <S2SV_ModEnd> ( fit, <S2SV_ModStart>, err_msg, fdt_get_name <S2SV_ModEnd> ( fit, <S2SV_ModStart>, err_msg, fdt_get_name <S2SV_ModEnd> ( fit,",0
111,"<S2SV_ModStart> ; if (! <S2SV_ModStart>, GFP_KERNEL ) ) { kfree ( state ) ; <S2SV_ModEnd> return - ENOMEM <S2SV_ModStart> - ENOMEM ; }",0
112,<S2SV_ModStart> vpx_codec_dec_cfg_t * cfg <S2SV_ModEnd> ) { vpx_codec_err_t <S2SV_ModStart> ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_POSTPROC ) &&! ( iface -> caps & VPX_CODEC_CAP_POSTPROC ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_ERROR_CONCEALMENT ) &&! ( iface -> caps & VPX_CODEC_CAP_ERROR_CONCEALMENT ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODE,0
113,<S2SV_ModStart> value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ | TJA1100_CONFIG1_MII_MODE_AUTO_OP,0
114,<S2SV_ModStart> = tos ; ipc. tos = tos ;,0
115,<S2SV_ModStart> VPX_CODEC_USE_XMA ) && ( <S2SV_ModStart> & VPX_CODEC_XMA ) ) <S2SV_ModStart> VPX_CODEC_USE_PSNR ) && ( <S2SV_ModStart> & VPX_CODEC_PSNR ) ) <S2SV_ModStart> VPX_CODEC_USE_OUTPUT_PARTITION ) && ( <S2SV_ModStart> & VPX_CODEC_OUTPUT_PARTITION ) ),0
116,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
117,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; RESERVE_SPACE",1
118,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ) ; return 0 <S2SV_ModStart> break ; } return error <S2SV_ModEnd> ; } <S2SV_null>,1
119,<S2SV_ModStart> ; if ( len < 1 ) return - 1 ; if (,0
120,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
121,<S2SV_ModStart> goto trunc ; if ( lshp -> ls_length < sizeof ( struct lsa6_hdr ) ) goto trunc ;,0
122,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { ret = - EFAULT ; break ; } <S2SV_ModEnd> * obuf =",0
123,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
124,<S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ) <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ),1
125,"<S2SV_ModStart> costs, vp9_tree * <S2SV_ModStart> c ) { vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> ) ; const vpx_tree_index <S2SV_ModEnd> ii = tree",0
126,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
127,<S2SV_ModStart> & 0xffff ; if ( p + 4 + c > sizeof ( event_rec ) ) return - EINVAL ;,0
128,"<S2SV_ModStart> fadst16 ( const tran_low_t * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t <S2SV_ModEnd> x0 = input <S2SV_ModStart> 15 ] ; tran_high_t <S2SV_ModEnd> x1 = input <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> x2 = input <S2SV_ModStart> 13 ] ; tran_high_t <S2SV_ModEnd> x3 = input <S2SV_ModStart> 2 ] ; tran_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 4 ] ; tran_high_t <S2SV_ModEnd> x5 = input <S2SV_ModStart> 9 ] ; tran_high_t <S2SV_ModEnd> x7 = input <S2SV_ModStart> 7 ] ; tran_high_t <S2SV_ModEnd> x9 = input <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> x10 = input <S2SV_ModStart> 5 ] ; tran_high_t <S2SV_ModEnd> x11 = input <S2SV_ModStart> 10 ] ; tran_high_t <S2SV_ModEnd> x12 = input <S2SV_ModStart> 12 ] ; tran_high_t <S2SV_ModEnd> x15 = input <S2SV_ModStart> 14 ] ; tran_high_t",0
129,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> flags |= HAS_EDSP <S2SV_ModStart> |= HAS_EDSP ; <S2SV_ModEnd> flags |= HAS_MEDIA <S2SV_ModStart> |= HAS_MEDIA ; <S2SV_ModEnd> flags |= HAS_NEON <S2SV_ModStart> flags |= HAS_NEON ; <S2SV_ModEnd> return flags &,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
131,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> count_segs_sb ( VP9_COMP <S2SV_ModStart> * const tile <S2SV_ModEnd>, int * <S2SV_ModStart> ) { const TileInfo * tile_info = & cpi -> tile_info ; const MODE_INFO * const mi_8x8 = & tile_info -> mi_8x8 ; <S2SV_ModEnd> const VP9_COMMON * <S2SV_ModStart> cm = & tile_info <S2SV_ModEnd> -> common ; <S2SV_ModStart> ) return ; int bw ; int bh ; if ( mi_row >= cm -> mi_rows || mi_col >= cm -> mi_cols ) return ; bw = num_8x8_blocks_wide_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ] ; bh = num_8x8_blocks_high_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ] ; if ( bw == bs && bh == bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, bs, bs, mi_row, mi_col ) ; } else if (",0
132,<S2SV_ModStart> flags & CLIENT_CLOSE_AFTER_REPLY ) break ; if ( c -> flags & CLIENT_CLOSE_AFTER_REQUEST,0
133,<S2SV_ModStart> get_blocks_flags = EXT4_GET_BLOCKS_CREATE | EXT4_GET_BLOCKS_NO_RESERVE <S2SV_ModStart> get_blocks_flags |= EXT4_GET_BLOCKS_DELALLOC_RESERVE ; if ( get_blocks_flags & EXT4_GET_BLOCKS_NO_RESERVE ) get_blocks_flags |= EXT4_GET_BLOCKS_NO_RESERVE,0
134,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart>, handle, hints, <S2SV_ModStart> p -> ai_flags <S2SV_ModEnd>, & p <S2SV_ModStart> p -> ai_family <S2SV_ModEnd>, & p <S2SV_ModStart> p -> ai_socktype <S2SV_ModEnd>, p -> <S2SV_ModStart> p -> ai_protocol <S2SV_ModEnd>, p -> <S2SV_ModStart>, NULL, <S2SV_ModEnd> & canonnamelen, <S2SV_ModStart> } if (! p ) { ret = OE_EAI_MEMORY ; goto done ; } if ( retval == 1 ) break ; if ( retval!= - 1 || oe_errno!= OE_ENAMETOOLONG ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( oe_errno ) ; } if ( p -> ai_addrlen > sizeof ( struct oe_addrinfo ) ) { ret = OE_EAI_MEMORY ; goto done ; } if ( oe_syscall_getaddrinfo_read_ocall ( & retval, handle, & p -> ai_flags, & p -> ai_family, & p -> ai_socktype, & p -> ai_protocol, p -> ai_addrlen, NULL, canonnamelen, & canonnamelen, NULL )",0
135,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
136,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
137,"<S2SV_ModStart> __u16 size, const <S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmemdup ( data, size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; kfree ( buf ) ;",1
138,"<S2SV_ModStart> asdl_seq * body, asdl_seq * type_comment <S2SV_ModStart> = body ; p -> v. Module. type_comment = type_comment ;",0
139,"<S2SV_ModStart>, int64_t ts_end <S2SV_ModEnd> ) { struct <S2SV_ModStart> 4 ; # else ( void ) src ; ( void ) ts_start ; ( void ) ts_end ; # <S2SV_ModStart> write_idx ) ; <S2SV_ModEnd> buf -> ts_start <S2SV_ModStart> } else { vpx_copy_and_extend_frame <S2SV_ModEnd> ( src, <S2SV_ModStart> ) ; } <S2SV_ModEnd> return 0 ;",0
140,"<S2SV_ModStart> method == LPF_PICK_FROM_Q || method == LPF_PICK_FROM_SUBIMAGE <S2SV_ModStart> int q = cpi -> oxcf. qindex <S2SV_ModEnd> ; int filt_guess <S2SV_ModStart> int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; if ( cm -> frame_type == KEY_FRAME ) filt_guess -= 4 ; lf -> filter_level = clamp ( filt_guess, min_filter_level, max_filter_level ) ; } else { search_filter_level ( sd, cpi, method == LPF_PICK_FROM_SUBIMAGE ) ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
141,"<S2SV_ModStart> BTA_DM_DISABLE_EVT : { if ( p_data -> enable. status ) { <S2SV_ModStart> status ) ; } else { BTIF_TRACE_ERROR ( ""btif_dm_upstreams_cback <S2SV_blank> <S2SV_blank> ev: <S2SV_blank> disabling <S2SV_blank> device"" ) ; }",0
142,"<S2SV_ModStart> int a = getint <S2SV_ModEnd> ( fmt,",0
143,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
144,"<S2SV_ModStart> vpx_codec_err_t res ; vpx_alg_priv_t * priv ; <S2SV_ModStart> ; else { priv = ctx -> priv -> alg_priv ; <S2SV_ModStart>. decode ( <S2SV_ModEnd> priv, data",0
145,"<S2SV_ModStart> inode * inode, struct buffer_head * bh ) { struct isofs_sb_info * sbi = ISOFS_SB ( inode -> i_sb ) ; unsigned long bufsize = ISOFS_BUFFER_SIZE ( inode ) ; unsigned long block ; int high_sierra = sbi -> s_high_sierra ; struct iso_inode_info * ei = ISOFS_I ( inode ) ; int ret = - EIO ; block = ei -> i_iget5_block ; offset = ei -> i_iget5_offset ; de = ( struct iso_directory_record * ) ( bh -> b_data + offset ) ; de_len = * ( unsigned char * ) de ; if ( offset + de_len > bufsize ) { int frag1 = bufsize - offset ; tmpde = kmalloc ( de_len, GFP_KERNEL ) ; if ( tmpde == NULL ) { printk ( KERN_INFO ""%s: <S2SV_blank> out <S2SV_blank> of <S2SV_blank> memory\\n"", __func__ ) ; ret = - ENOMEM ; goto fail ; } memcpy ( tmpde, bh -> b_data + offset",0
146,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> ; } } }",0
147,<S2SV_ModStart> self ) { if (! self ) { return ; },0
148,<S2SV_ModStart> ( ) ; if (! a ) return 0 ; <S2SV_ModStart> ] ) ; <S2SV_ModEnd> suffix_object ( p,0
149,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_Format ( PyExc_TypeError, ""Module <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> must <S2SV_blank> be <S2SV_blank> a <S2SV_blank> list, <S2SV_blank> not <S2SV_blank> a <S2SV_blank> %.200s"", tmp -> ob_type -> tp_name ) ; goto failed ; } len = PyList_GET_SIZE ( tmp ) ; body = _Ta3_asdl_seq_new ( len, arena ) ; if ( body == NULL ) goto failed ; for ( i = 0 ; i < len ; i ++ ) { stmt_ty <S2SV_ModEnd> value ; res <S2SV_ModStart> ; res = obj2ast_stmt <S2SV_ModEnd> ( PyList_GET_ITEM ( <S2SV_ModStart>, & value <S2SV_ModEnd>, arena ) <S2SV_ModStart> ) ; } Py_CLEAR <S2SV_ModEnd> ( tmp ) <S2SV_ModStart> } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_",0
150,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
151,<S2SV_ModStart> ; if ( msg_sys -> msg_name == NULL || uaddr_len == NULL ) { err = - ENOMEM ; goto out_freeiov ; } if ( <S2SV_ModStart> ; if ( msg_sys -> msg_control == NULL ) { err = - ENOMEM ; goto out_freeiov ; } if (,0
152,"<S2SV_ModStart> buffer_head * dibh <S2SV_ModEnd> ; u64 bn <S2SV_ModStart> unsigned ptrs_per_blk ; unsigned int end_of_metadata ; int eob = 0 ; enum alloc_state state ; __be64 * ptr ; __be64 zero_bn = 0 ; BUG_ON ( sheight < 1 ) ; BUG_ON ( dibh == NULL ) ; gfs2_trans_add_bh ( ip -> i_gl, dibh, 1 ) ; if ( height == sheight ) { struct buffer_head * bh ; ptr = metapointer ( end_of_metadata, mp ) ; bh = mp -> mp_bh [ end_of_metadata ] ; dblks = gfs2_extent_length ( bh -> b_data, bh -> b_size, ptr, maxlen, & eob ) ; BUG_ON ( dblks < 1 ) ; state = ALLOC_DATA ; } else { ptrs_per_blk = height > 1? sdp -> sd_inptrs : sdp -> sd_diptrs ; dblks = min ( maxlen, ptrs_per_blk - mp -> mp_list",0
153,"<S2SV_ModStart>, vpx_codec_iface_name ( global <S2SV_ModEnd> -> codec -> <S2SV_ModStart> -> use_i420? ""I420"" : ""YV12"" ) ; fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> index ) ; fprintf ( stderr, ""Destination <S2SV_blank> file: <S2SV_blank> %s\\n"", stream -> config. out_fn ) ; SHOW ( g_usage ) ; SHOW ( g_threads ) ; SHOW ( g_profile ) ; SHOW ( g_w ) ; SHOW ( g_h ) ; SHOW ( g_timebase. num ) ; SHOW ( g_timebase. den ) ; SHOW ( g_error_resilient ) ; SHOW ( g_pass ) ; SHOW ( g_lag_in_frames ) ; SHOW ( rc_dropframe_thresh ) ; SHOW ( rc_resize_allowed ) ; SHOW ( rc_resize_",0
154,<S2SV_ModStart> -> psvi ; if ( ctxt -> curOp == XSLT_OPAQUE ) { copy -> psvi = XSLT_SUBSTITUTE ; },0
155,"<S2SV_ModStart> { if ( safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> { if ( safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> { if ( safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.cshrc"",",0
156,<S2SV_ModStart> msix_tab_size ) { <S2SV_ModEnd> bzero ( msixcap,1
157,<S2SV_ModStart> ; if ( <S2SV_ModEnd> js_regexec ( re,0
158,<S2SV_ModStart> case OFreshOID : assert ( dest!= NULL ) ; <S2SV_ModStart> case OFreshOID : assert ( dest!= NULL ) ;,0
159,"<S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; ksz8851WriteReg <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( interface, KSZ8851_ISR ) ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } if ( ( isr & ISR_TXIS )!= 0 ) { ksz8851WriteReg ( interface, KSZ8851_ISR, ISR_TXIS ) ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } } if ( ( isr & ISR_RXIS )!= 0 ) { ksz8851WriteReg ( interface, <S2SV_ModStart> ( interface, KSZ88",0
160,"<S2SV_ModStart> void encode_quantization ( struct vpx_write_bit_buffer <S2SV_ModEnd> * cm, <S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
161,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> p_buf, msglen )",1
162,"<S2SV_ModStart> fp ) ; if ( fp == NULL ) { log_error ( ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s"", __func__, file ) ; goto sslerr ; }",0
163,"<S2SV_ModStart> ( ) ; strncat <S2SV_ModEnd> ( t1_buf_array, <S2SV_ModStart> t1_buf_array, t1_line_array, strlen ( t1_line_array ) - 1",0
164,"<S2SV_ModStart> int mi_col, MACROBLOCKD * xd, <S2SV_ModStart> int bsl = b_width_log2_lookup [ bsize ], <S2SV_ModEnd> hbs = ( <S2SV_ModStart> / 4 ; <S2SV_ModEnd> assert ( bsize <S2SV_ModStart> case PARTITION_NONE : set_modeinfo_offsets_sb <S2SV_ModEnd> ( cm, <S2SV_ModStart> mi_col ) ; xd -> mi [ 0 ] = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb <S2SV_ModEnd> ( cm, <S2SV_ModStart> case PARTITION_VERT : xd -> mi [ 0 ] = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb <S2SV_ModEnd> ( cm, <S2SV_ModStart> mi_cols ) { xd -> mi [ 0 ] = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb <S2SV_ModEnd> ( cm, <S2SV_ModStart> case PARTITION_HORZ : xd -> mi [ 0 ] = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb <S2SV_ModEnd> ( cm, <S2SV_ModStart> mi_cols ) { xd -> mi [ 0 ] = get_block_context ( x, sub",0
165,"<S2SV_ModStart> key_ref ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) { ret = - ENOKEY ; goto error2 ; }",1
166,<S2SV_ModStart> ; } } if ( 0 == ps_dec -> u1_first_slice_in_pic ) { ps_dec -> u1_first_slice_in_pic = 1 ; ps_dec -> u1_first_slice_in_pic = 0 ; ps_dec -> u1_first_slice_in_pic = 0 ; ps_dec -> u1_first_slice_in_pic = 0 ; },0
167,<S2SV_ModStart> var_off ) ; if (! src_known ||! dst_known ) { return - EINVAL ; } <S2SV_ModStart> var_off ) ; if (! src_known ||! dst_known ) { return - EINVAL ; },0
168,<S2SV_ModStart> ; if (! posix_open ) { if ( <S2SV_ModStart> cfile ) ; },0
169,"<S2SV_ModStart> -> sk_bound_dev_if ; RCU_INIT_POINTER ( rt -> rt_opt, <S2SV_ModEnd> tcp_v4_save_options ( skb <S2SV_ModStart> tcp_v4_save_options ( skb )",0
170,"<S2SV_ModStart> number_of_frames, number_of_keyframes <S2SV_ModEnd> ; SvcInternal * <S2SV_ModStart> svc_ctx ) ; if ( <S2SV_ModEnd> si -> encode_frame_count <S2SV_ModStart> si -> encode_frame_count <S2SV_ModEnd> <= 0 ) <S2SV_ModStart> ""\\n"" ) ; <S2SV_ModEnd> for ( i <S2SV_ModStart> i ) { SvcInternal * const si = get_svc_internal ( svc_ctx ) ; if ( svc_ctx == NULL || si == NULL ) return NULL ; svc_log_reset ( svc_ctx ) ; encode_frame_count = si -> encode_frame_count ; if ( si -> encode_frame_count <= 0 ) return vpx_svc_get_message ( svc_ctx ) ; svc_log ( svc_ctx, SVC_LOG_INFO, ""\\n"" ) ; number_of_keyframes = encode_frame_count / si -> kf_dist + 1 ; svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f], <S2SV_blank> Bytes=[%u]\\n"", i, ( double ) si -> ps",0
171,<S2SV_ModStart> -> sb_buffer ) { <S2SV_ModStart> sb_buffer ) ; screen -> sb_buffer = NULL ; },0
172,"<S2SV_ModStart> n ) { <S2SV_ModEnd> char * literal_start <S2SV_ModStart> NULL ) ; literal_start = * str ; const char * literal_end ; int in_named_escape = 0 ; int result = 0 ; assert ( * literal == NULL ) ; for ( ; * str < end ; ( * str ) ++ ) { char ch = * * str ; if (! in_named_escape && ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 1 ; } else if ( in_named_escape && ch == '}' ) { in_named_escape = 0 ; } else if ( ch == '{' || ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } if ( ch == '}' ) { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; return - 1 ; } }",0
173,"<S2SV_ModStart> pd, g_settings_dump_location, pd -> dd_dirname",0
174,<S2SV_ModStart> ; if ( ( x + w ) > ( ptr -> width ) || ( x + w ) > ( ptr -> height ) || ( y + h ) > ( ptr -> height ) || ( y + h ) > ( ptr -> height ) ) { if ( x + w > ( ptr -> width ) || ( y + h > ( ptr -> height ) ) ) { if ( x + w > ( ptr -> width ) ) { if ( y + h > ( ptr -> height ) ) { if ( x + h > ( ptr -> width ) ) { if ( x + h > ( ptr -> width ) ) { if ( y + h > ( ptr -> height ) ) { if ( y + h > ( ptr -> height ) ) { if ( y + h > ( ptr -> height ) ) { if ( y + h > ( ptr -> height ) ) { if ( y + h > ( ptr -> height ) ) { if ( y + h > ( ptr -> height ) ) { if ( y + h > ( ptr -> height ) ) { if ( y + h > ( ptr -> height ) ) { if ( y + h > ( ptr -> height ) ) { if ( y + h > (,0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
176,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mv_stride <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, check_here <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, check_here <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, check_here <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, check_here <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, check_here <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, check_here <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, check_here <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, check_here <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_",0
177,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; const MODE_INFO * * mi_8x8 = cm -> mi_grid_visible ; const MODE_INFO * * prev_mi_8x8 = cm -> prev_mi_grid_visible ; <S2SV_ModStart> int mi_col ; <S2SV_ModEnd> for ( mi_col <S2SV_ModStart> mi_col += MI_BLOCK_SIZE ) { int dummy_rate = 0 ; int64_t dummy_dist = 0 ; const int idx_str = cm -> mi_stride * mi_row + mi_col ; MODE_INFO * * mi_8x8 = cm -> mi_grid_visible + idx_str ; BLOCK_SIZE bsize ; cpi -> mb. source_variance = UINT_MAX ; vp9_zero ( cpi -> mb. pred_mv ) ; switch ( cpi -> sf. partition_search_type ) { case VAR_BASED_PARTITION : choose_partitioning ( cpi, tile, mi_row, mi_col ) ; nonrd_use_partition ( cpi, tile,",0
178,<S2SV_ModStart> u_int8_t state ; struct nf_conn_priv * priv ; <S2SV_ModStart> & dh ) ; priv = rtnl_dereference ( ct -> proto. dccp. net ) ; if (! priv ) goto out_invalid,0
179,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static void <S2SV_ModEnd> ip_options_get_finish ( struct <S2SV_ModStart> ip_options_get_finish ( struct ip_options_rcu <S2SV_ModEnd> * net, <S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * opt, <S2SV_ModStart> * opt, u32 <S2SV_ModEnd> optlen ) { <S2SV_ModStart> & 3 ) rcu_assign_pointer ( <S2SV_ModStart> __data [ optlen <S2SV_ModEnd> ] = IPOPT_END <S2SV_ModStart> = IPOPT_END ; rcu_assign_pointer ( <S2SV_ModStart> = optlen ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
180,"<S2SV_ModStart> ; if ( strcmp ( connection, """" ) == 0 <S2SV_ModEnd> ) goto error",0
181,"<S2SV_ModStart> * findalldevs_if ; uint32 nif = 0 ; if ( rpcapd_discard ( pars -> sockctrl, plen ) == - 1 ) { return - 1 ; } if ( pcap_findalldevs ( & alldevs, errmsgbuf ) == - 1 ) goto error ; if ( alldevs == NULL ) { if ( rpcap_senderror ( pars -> sockctrl, ver, PCAP_ERR_NOREMOTEIF, ""No <S2SV_blank> interfaces <S2SV_blank> found! <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> libpcap/WinPcap <S2SV_blank> is <S2SV_blank> properly <S2SV_blank> installed"" "" <S2SV_blank> and <S2SV_blank> you <S2SV_blank> have <S2SV_blank> the <S2SV_blank> right <S2SV_blank> to <S2SV_blank> access <S2SV_blank> to <S2SV_blank> the <S2SV_blank> remote <S2SV_blank> device."", errbuf ) == - 1 ) { rpcapd_log ( LOGPRIO_ERROR, ""Send <S2SV_blank> to <S2SV_blank> client <S2SV_blank> failed: <S2SV_blank> %s"", errbuf ) ; return - 1 ; } return 0 ; } return 0 ; } for ( d = alldevs ; d!= NULL ; d = d -> next ) { nif ++ ; if ( d -> description ) <S2SV_ModStart> d -> description <S2SV_ModEnd> ) ; if <S2SV_ModStart> d -> name <S2SV_ModEnd> ) ; findalldevs_if",0
182,"<S2SV_ModStart> path, client_uid <S2SV_ModEnd> ) ; if",0
183,<S2SV_ModStart> -> columns - 2 <S2SV_ModEnd> ) ; x,0
184,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
185,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; }",0
186,"<S2SV_ModStart> in_cksum ( bp, len <S2SV_ModStart> in_cksum ( bp, len",0
187,"<S2SV_ModStart>! ptrace_has_cap ( task_cred ( task ) <S2SV_ModEnd> -> user_ns,",0
188,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
189,<S2SV_ModStart> SEI_USER_DATA_REGISTERED_ITU_T_T36 : case SEI_USER_DATA_REGISTERED_ITU_T_T37 : case SEI_USER_DATA_REGISTERED_ITU_T372 : ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; ihevcd_parse_user_data_registered_ITU_t372_sei ( ps_codec ) ; break ; case SEI_USER_DATA_REGISTERED_ITU_T_36 : ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; ihevcd_parse_user_data_registered_ITU_t362_sei ( ps_codec ) ; break ; case SEI_USER_DATA_REGISTERED_ITU_T363 : ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; ihevcd_parse_user_data_registered_ITU_t363_sei ( ps_codec ) ; break ; case SEI_USER,0
190,"<S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ), GFP_KERNEL <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ), GFP_KERNEL <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ), GFP_KERNEL <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ), GFP_KERNEL <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ), GFP_KERNEL <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ), GFP_KERNEL <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ), GFP_KERNEL <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ), GFP_KERNEL <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ), GFP_KERNEL <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> size",0
191,"<S2SV_ModStart> * name, my_bool <S2SV_ModEnd> rep_quick ) { <S2SV_ModStart> ) ) { my_bool <S2SV_ModEnd> got_error ; uint <S2SV_ModStart> ) ) { my_bool <S2SV_ModEnd> got_error = 1 <S2SV_ModStart> ) ) { my_bool <S2SV_ModEnd> got_error = 1 <S2SV_ModStart> ) ) { my_bool <S2SV_ModEnd> got_error = 1 <S2SV_ModStart> ) ) { my_bool <S2SV_ModEnd> got_error = 1 <S2SV_ModStart> ) ) { my_bool <S2SV_ModEnd> got_error = 1 <S2SV_ModStart> ) ) { my_bool <S2SV_ModEnd> got_error = 1 <S2SV_ModStart> ) ) { my_bool <S2SV_ModEnd> got_error = 1 <S2SV_ModStart> ) ) { my_bool <S2SV_ModEnd> got_error = 1 <S2SV_ModStart> ) ) { my_bool <S2SV_ModEnd> got_error = 1 <S2SV_ModStart> ) ) { my_bool <S2SV_ModEnd> got_error = 1 <S2SV_ModStart> ) ) { my_bool <S2SV_ModEnd> got_error = 1 <S2SV_ModStart> ) ) { my_bool <S2SV_ModEnd> got_error = 1 <S2SV_ModStart> ) ) { my_bool <S2SV_ModEnd> got_error = 1 <S2SV_ModStart> ) ) { my_bool <S2SV_ModEnd> got_error = 1 <S2SV_ModStart> ) ) { my_bool <S2SV_ModEnd> got_error = 1 <S2SV_ModStart> ) ) { my_bool <S2SV_ModEnd> got_error = 1 <S2SV_ModStart> ) ) { my_bool <S2SV_ModEnd> got_error = 1 <S2SV_ModStart> ) ) { my_bool",0
192,"<S2SV_ModStart> ) ; } if ( pcount > MaxAllocSize / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", pcount, ( int ) ( MaxAllocSize / sizeof ( Pairs ) ) ) ) ) ;",0
193,"<S2SV_ModStart> val ) ; if (! <S2SV_ModStart>, val ) ) continue",0
194,"<S2SV_ModStart> ) ) { if ( clen > sizeof ( c -> buf ) - 1 ) { return bad_request ( c, 400, __LINE__ ) ; }",0
195,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> 256 ] ; tran_low_t <S2SV_ModEnd> * outptr = <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16",0
196,<S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args,0
197,"<S2SV_ModStart> '\\0' ) ; size_t len = <S2SV_ModEnd> strlen ( filename <S2SV_ModStart> ) + 5 ; char * temp_filename = osi_calloc ( len <S2SV_ModStart> ; if ( temp_filename == NULL <S2SV_ModEnd> ) { LOG_ERROR <S2SV_ModStart> false ; } memset ( temp_filename, 0, len ) ; strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } for ( const list_node_t * node = list_begin ( config -> sections ) ; node!= list_end ( config -> sections ) ; node = list_next ( node ) ) { const section_t * section = ( const section_t * ) list_node ( node ) ; fprintf ( fp, ""[%s]\\n"", section -> name ) ; for ( const entry_t * entry = ( const entry_t * ) list_node ( enode",0
198,"<S2SV_ModStart> tptr ) ; ND_TCHECK2 ( * tptr, len ) ;",0
199,"<S2SV_ModStart> userData, target <S2SV_ModEnd> ) ; ctxt",0
200,"<S2SV_ModStart> ( ) ; size_t <S2SV_ModEnd> rv = Socket_print <S2SV_ModStart> ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.1\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %zu\\r\\n"" <S2SV_ModEnd> ""%s"" ""\\r\\n"" ""%s""",0
201,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> ( src, <S2SV_ModEnd> dest, getuid <S2SV_ModStart> getgid ( ) <S2SV_ModEnd> ) ; unlink",0
202,<S2SV_ModStart>!= BFA_STATUS_OK ) { kfree ( fcstats ) ; <S2SV_ModStart> return NULL ; },1
203,"<S2SV_ModStart> -> x = F_MIN ( <S2SV_ModEnd> value -> x <S2SV_ModStart> -> x ), 1.0f <S2SV_ModEnd> ) ; value <S2SV_ModStart> -> y = F_MIN ( <S2SV_ModEnd> value -> y <S2SV_ModStart> -> y ), 1.0f <S2SV_ModEnd> ) ; value <S2SV_ModStart> -> z = F_MIN ( <S2SV_ModEnd> value -> z <S2SV_ModStart> -> z = 1.0f <S2SV_ModEnd> ; } <S2SV_null>",0
204,<S2SV_ModStart> ; rec -> <S2SV_ModEnd> sasl_password = src,0
205,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
206,"<S2SV_ModStart> o, datao ; if ( exif_mnote_data_canon_check ( n ) ) return",0
207,"<S2SV_ModStart>, llbuff, sizeof ( llbuff ) <S2SV_ModEnd> ) ; if",0
208,"<S2SV_ModStart> olen ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> long hex ; <S2SV_ModEnd> if (! <S2SV_ModStart> hex ) ; if (! <S2SV_ModEnd> Curl_convert_from_network ( handle <S2SV_ModStart> in, 1, & alloc ) <S2SV_ModEnd> ) { free <S2SV_ModStart> ( olen ) { <S2SV_ModStart> = strindex ; }",0
209,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
210,<S2SV_ModStart> ; def -> <S2SV_ModEnd> session_setup = usm_session_init,0
211,<S2SV_ModStart> NULL ; return <S2SV_ModEnd> match ( prog,0
212,<S2SV_ModStart> idx ] ; <S2SV_ModEnd> switch ( action <S2SV_ModStart> ) ; } <S2SV_ModEnd> return SNMP_ERR_NOERROR ;,0
213,<S2SV_ModStart> 255U ; } if ( pixels == ( unsigned char * ) NULL ) return ( - 1 ) ; <S2SV_ModStart> 255U ; } if ( pixels == ( unsigned char * ) NULL ) return ( - 1 ) ; <S2SV_ModStart> 255U ; } if ( pixels == ( unsigned char * ) NULL ) return ( - 1 ) ; <S2SV_ModStart> 255U ; } if ( pixels == ( unsigned char * ) NULL ) return ( - 1 ) ; <S2SV_ModStart> 255U ; } if ( pixels == ( unsigned char * ) NULL ) return ( - 1 ) ; <S2SV_ModStart> 255U ; } if ( pixels == ( unsigned char * ) NULL ) return ( - 1 ) ; <S2SV_ModStart> 255U ; } if ( pixels == ( unsigned char * ) NULL ) return ( - 1 ) ; <S2SV_ModStart> 255U ; } if ( pixels == ( unsigned char * ) NULL ) return ( - 1 ) ; <S2SV_ModStart> 255U ; } if ( pixels == ( unsigned char * ) NULL ) return ( - 1 ) ; <S2SV_ModStart> 255U ; } if ( pixels == ( unsigned char * ) NULL ) return ( - 1 ) ; <S2SV_ModStart> 255U ; } if ( pixels == ( unsigned char * ) NULL ) return ( - 1 ) ;,0
214,<S2SV_ModStart> timer ) ; spin_lock_irq ( & slave_active_lock ) ; <S2SV_ModStart> open_list ) { <S2SV_ModEnd> _snd_timer_stop ( slave <S2SV_ModStart> = NULL ; list_del_init ( & slave -> ack_list ) ;,0
215,<S2SV_ModStart> -> u1_dpb_commands_read ) { <S2SV_ModStart> ps_dec ) ; } else { ps_dec -> u4_bitoffset = 0 ; },0
216,"<S2SV_ModStart> decode ) { uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > info -> rasterSize || widthOverflow > 0 || heightOverflow > 0 ) { void * tmpRasterBits = reallocarray ( info -> rasterBits, newRasterSize * sizeof ( uint_fast32_t ) ) ; <S2SV_ModStart> -> originalHeight ; <S2SV_ModEnd> if ( newRasterSize",0
217,<S2SV_ModStart> validator -> user ) || cherokee_buffer_is_empty ( & conn -> validator -> passwd,0
218,<S2SV_ModStart> bus ] ; if ( bi == NULL ) return <S2SV_ModEnd> ; si =,0
219,"<S2SV_ModStart>, timeo ) <S2SV_ModEnd> ; if (",1
220,<S2SV_ModStart> += 9 ; ( <S2SV_ModStart> isspace ( * ( s + 9 ) <S2SV_ModEnd> ) ; s <S2SV_ModStart> * t && ( <S2SV_ModStart> isspace ( * ( t + 1 ) <S2SV_ModEnd> ) ) t,0
221,"<S2SV_ModStart> ; result = TEMP_FAILURE_RETRY ( <S2SV_ModStart> NULL, NULL )",0
222,<S2SV_ModStart> msixcap msixcap ; if <S2SV_ModEnd> ( msgnum >= <S2SV_ModStart> msix_table_init ( dev <S2SV_ModEnd> ) ; pci_populate_msixcap,0
223,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",1
224,<S2SV_ModStart> == NULL ) return KRB5KDC_ERR_PREAUTH_FAILED <S2SV_ModEnd> ; status = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> X509_NAME_free ( is,0
225,<S2SV_ModStart> <S2SV_null> <S2SV_null> static MV_REFERENCE_FRAME <S2SV_ModEnd> select_tx_mode ( const <S2SV_ModStart> cpi ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; <S2SV_ModStart> lossless ) { frame_type = get_frame_type ( cpi ) ; <S2SV_ModStart> else if ( frame_type <S2SV_ModEnd> == 0 ) <S2SV_ModStart> else { if ( <S2SV_ModStart> == USE_LARGESTALL ) <S2SV_ModEnd> return ALLOW_32X32 ; <S2SV_ModStart> else if ( frame_type <S2SV_ModEnd> == USE_FULL_RD ),0
226,"<S2SV_ModStart> ) ; } if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. gf == GF_VDEF ) { localtime_r ( & im -> gdes [ i ]. vf. when, & tmvdef ) ; } else { localtime_r ( & im -> gdes [ i ]. vf. when, & tmvdef ) ; } }",0
227,<S2SV_ModStart> ( buf1 -> tile_size <S2SV_ModEnd> < buf2 -> <S2SV_ModStart> < buf2 -> tile_size <S2SV_ModEnd> ) { return <S2SV_ModStart> ( buf1 -> tile_size <S2SV_ModEnd> == buf2 -> <S2SV_ModStart> == buf2 -> tile_size <S2SV_ModEnd> ) { return,0
228,<S2SV_ModStart> ) + size ; if ( unlikely (! sz ) ) return NULL,0
229,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,1
230,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs,",0
231,"<S2SV_ModStart> ; r = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, b ) )",0
232,<S2SV_ModStart> ( ) ; errors += test_url_formatting ( ) ;,0
233,<S2SV_ModStart> -> lun ) sas_eh_finish_cmd <S2SV_ModEnd> ( cmd ),1
234,"<S2SV_ModStart>, end_col_offset ; if ( TYPE ( n )!= FUNCTION ) return NULL ; <S2SV_ModStart> 2 ; } if ( TYPE ( CHILD ( n, name_i + 4 ) ) == FUNCTION ) { <S2SV_ModStart> end_col_offset ) ; } <S2SV_ModStart> ( is_async ) { if ( TYPE ( CHILD ( n, name_i + 4 ) )!= FUNCTION ) <S2SV_ModStart> returns, LINENO ( n0 ), n0 <S2SV_ModEnd> -> n_col_offset, <S2SV_ModStart> c_arena ) ; } else { if ( TYPE ( CHILD ( n ) )!= FUNCTION ) return NULL ; get_last_end_pos ( body, & end_lineno, & end_col_offset ) ; if ( TYPE ( CHILD ( n, name_i + 5 ) )!= FUNCTION ) return NULL ; get_last_end_pos ( body, & end_lineno, & end_col_offset ) ; }",0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,"<S2SV_ModStart> Rec. RecordLength ) ; if ( Rec. RecordLength > WPGRecord. RecordLength ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
237,,1
238,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
239,"<S2SV_ModStart> if ( position >= <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> headend, 1, position - psf -> headend, psf ) ; psf -> headindex = position ; break ; case SEEK_CUR : if ( psf -> headindex + position < 0 ) break ; if ( psf -> headindex >= SIGNED_SIZEOF ( psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; if ( psf -> headindex + position <= psf -> headend ) { psf -> headindex += position ; break ; } ; if ( psf -> headindex + position <S2SV_ModStart> psf -> header + <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> headend, 1, position - psf -> headend, psf ) ; psf -> headindex = <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> headend <S2SV_ModEnd> ; break ;",0
240,<S2SV_ModStart> u4_ofst ) ; if ( ps_cabac -> u4_ofst > ps_cabac -> u4_range ) { IHEVCD_ERROR_T ps_err = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_PARAMETER ; ps_cabac -> u4_ofst = 0 ; ps_err = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_PARAMETER ; return ( ( IHEVCD_ERROR_T ) IHEVCD_INVALID_PARAMETER ) ; },0
241,<S2SV_ModStart> ; } } if ( off < ctx -> size || CH ( off ) == _T ( '\\n' ) ) { line -> type = MD_LINE_BLANK ; line -> beg = off ; },0
242,<S2SV_ModStart> perf_event_context * ctx <S2SV_ModEnd> ; struct task_struct <S2SV_ModStart> -> ctx ; raw_spin_lock_irq ( & event -> ctx -> lock ) ; ctx = perf_event_ctx_lock ( event ) ; if (! ctx ) { perf_event_ctx_unlock ( event ) ; return ; } task = ctx -> task ; raw_spin_unlock_irq ( & event -> ctx -> lock ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> event ) ; perf_event_ctx_unlock ( event ) <S2SV_ModEnd> ; } raw_spin_unlock_irq,0
243,<S2SV_ModStart> -> post_proc_flag = <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> noise_level ; # if CONFIG_POSTPROC_VISUALIZER flags -> display_ref_frame_flag = ctx -> dbg_color_ref_frame_flag ; flags -> display_mb_modes_flag = ctx -> dbg_color_mb_modes_flag ; flags -> display_b_modes_flag = ctx -> dbg_color_b_modes_flag ; flags -> display_mv_flag = ctx -> dbg_display_mv_flag ; # else <S2SV_ModEnd> flags -> display_ref_frame_flag <S2SV_ModStart> -> dbg_display_mv_flag ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
244,"<S2SV_ModStart> = 0 ; if ( msg_len < sizeof ( struct olsr_msg4 ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> too <S2SV_blank> short <S2SV_blank> msg_len <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6, msg_len ) ) ; goto trunc ; }",0
245,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vpx_usec_timer_start ( & <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,1
246,"<S2SV_ModStart> ) ) { fs_logger2 ( ""clone"", dest ) ; <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> copy_file ( src <S2SV_ModStart> dest ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return 1 ;",0
247,<S2SV_ModStart> ) ) ; if ( sfb > IXHEAACD_MAX_FRAME_PATCH ) sfb = IXHEAACD_MAX_FRAME_PATCH ; <S2SV_ModStart> ) ) ; if ( sfb > IXHEAACD_MAX_FRAME_PATCH ) sfb = IXHEAACD_MAX_FRAME_PATCH ; <S2SV_ModStart> ) ) ; if ( sfb > IXHEAACD_MAX_FRAME_PATCH ) sfb = IXHEAACD_MAX_FRAME_PATCH ; <S2SV_ModStart> ) ) ; if ( sfb > IXHEAACD_MAX_FRAME_PATCH ) sfb = IXHEAACD_MAX_FRAME_PATCH ; <S2SV_ModStart> ) ) ; if ( sfb > IXHEAACD_MAX_FRAME_PATCH ) sfb = IXHEAACD_MAX_FRAME_PATCH ; <S2SV_ModStart> ) ) ; if ( sfb > IXHEAACD_MAX_FRAME_PATCH ) sfb = IXHEAACD_MAX_FRAME_PATCH ; <S2SV_ModStart> ) ) ; if ( sfb > IXHEAACD_MAX_FRAME_PATCH ) sfb = I,0
248,"<S2SV_ModStart> prov_spec = parsed_require_line <S2SV_ModEnd> ; spec = <S2SV_ModStart> r ) ; lua_pushlightuserdata <S2SV_ModEnd> ( L, <S2SV_ModStart> prov_spec -> args, r ) ; <S2SV_ModEnd> } return result",0
249,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> rows, image -> cols ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
250,<S2SV_ModStart> ; if ( proto_end == NULL <S2SV_ModEnd> ) return 0,0
251,<S2SV_ModStart> end = path ; if ( end >= path_len ) return - FDT_ERR_NOSPACE,0
252,<S2SV_ModStart> ) ) { if ( server. maxidletime && server. bgrewritechildpid!= - 1 ) closeTimedoutClients ( ) ;,0
253,"<S2SV_ModStart> = g_timeout_add_seconds ( 10 <S2SV_ModEnd>, ( GSourceFunc",0
254,<S2SV_ModStart> book -> dim && i < n,1
255,<S2SV_ModStart> action ) { if ( r < 0.0 ) r = 0.0 ; <S2SV_ModStart> action ) ; if ( r < 0.0 ) r = 0.0 ;,0
256,<S2SV_ModStart> this_h ) { int i ; <S2SV_ModStart> 16 ) { for ( i = 0 ; i < 2 ; i ++ ) { sf -> predict [ i ] [ i ] = vp9_convolve8_copy ; sf -> predict [ i ] [ 0 ] [ 1 ] = vp9_convolve8_avg ; sf -> predict [ i ] [ 1 ] [ 0 ] = vp9_convolve8_horiz ; } <S2SV_ModStart> } else { for ( i = 0 ; i < 2 ; i ++ ) { sf -> predict [ i ] [ i ] = vp9_convolve8_vert ; sf -> predict [ i ] [ 1 ] [ 0 ] = vp9_convolve8_horiz ; sf -> predict [ i ] [ 1 ] [ 0 ] = vp9_convolve8_avg_vert ; sf -> predict [ i ] [ 1 ] [ 1 ] = vp9_convolve8_avg_horiz ; } } } } else { for ( i = 0 ; i < 2 ; i ++ ) { sf -> predict [ i ] [ i ] = vp9_convolve8_copy ; sf -> predict [ i ] [ 1 ] [ 0 ] = vp,0
257,<S2SV_ModStart> (! sock <S2SV_ModEnd> ) OE_RAISE_ERRNO ( <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
258,<S2SV_ModStart> ; if ( msg. msg_namelen < sizeof ( src_info ) ) return - EINVAL ; if (,0
259,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> sctp_v6_protosw_exit ( ) <S2SV_ModStart> ( ) ; unregister_pernet_subsys ( & sctp_net_ops ) ;,0
260,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> index ) ; if ( stream -> psnr_sse_total > 0.0 ) { <S2SV_ModStart> = sse_to_psnr ( <S2SV_ModEnd> stream -> psnr_samples_total <S2SV_ModStart> -> psnr_sse_total ) ; } else { ovpsnr = sse_to_psnr ( 255.0, 255.0, 255.0 ) ; } fprintf ( stderr, "" <S2SV_blank> %.3f"", ovpsnr",0
261,<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen (,1
262,"<S2SV_ModStart> ; TRACE_DEBUG ( ""CIDER=0x%04x"" <S2SV_ModEnd> PRIX16 ""\\r\\n"", <S2SV_ModStart> ; TRACE_DEBUG ( ""PHY1ILR=0x%04x"" <S2SV_ModEnd> PRIX16 ""\\r\\n"", <S2SV_ModStart> ; TRACE_DEBUG ( ""PHY1IHR=0x%04x"" <S2SV_ModEnd> PRIX16 ""\\r\\n"", <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ERROR_OUT_OF_MEMORY ; } memset ( context -> txBuffer, 0, ETH_MAX_FRAME_SIZE ) ; memset ( context -> rxBuffer, 0, ETH_MAX_FRAME_SIZE ) ; <S2SV_ModStart> ( interface, KSZ8851_MARH <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARM <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARM <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARL <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARL <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_",0
263,"<S2SV_ModStart> skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
264,<S2SV_ModStart> ; if ( fit == NULL ) { bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - EINVAL ; } if (,0
265,"<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> uinput_fd, UI_DEV_DESTROY )",1
266,<S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> = rc -> avg_frame_bandwidth <S2SV_ModEnd> ; # endif,1
267,"<S2SV_ModStart> i ], ""-u"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart>, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""-u"" <S2SV_ModEnd> ) ; argv",0
268,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
269,"<S2SV_ModStart> ib ] ; dequant_ptr = d -> dequant ; coeff_ptr = b -> coeff ; qcoeff_ptr = d -> qcoeff ; dqcoeff_ptr = d -> dqcoeff ; i0 =! type ; eob = * d -> eob ; rdmult = mb -> rdmult * err_mult ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ; rddiv = mb -> rddiv ; best_mask [ 0 ] = best_mask [ 1 ] = 0 ; tokens [ eob ] [ 0 ]. token = DCT_EOB_TOKEN ; tokens [ eob ] [ 0 ]. error = 0 ; tokens [ eob ] [ 0 ]. qc = 0 ; * ( tokens [ eob ] + 1 ) = * ( tokens [ eob ] + 0 ) ; final_eob = eob ; for ( i = eob ; i -- > i0 ; ) { int dx ; int d2 ; rc = vp8_default_zig_zag1_b ( b, dx ) ; rc = vp8",0
270,<S2SV_ModStart> FN_REFLEN ] ; if ( strlen ( opt_basedir ) + 1 > sizeof ( buff ) - 1 ) { error = - 1 ; goto exit ; },0
271,<S2SV_ModStart> decrypt_cb ) { ptrdiff_t <S2SV_ModEnd> n = ( <S2SV_ModStart> n = ( ptrdiff_t <S2SV_ModEnd> ) ( data_end,0
272,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; <S2SV_ModEnd> exit_func : free_server_handle,0
273,"<S2SV_ModStart> * returnrate, RATE_DISTORTION <S2SV_ModEnd> * returndistortion, <S2SV_ModStart> int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # else unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # endif # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # endif # endif mode_mv = mode_mv_sb [ sign_bias ] ; best_ref_mv. as_int = 0 ; best_mode. rd = INT_MAX ; best_mode. yrd = INT_MAX ; best_mode. intra_rd = INT_MAX ; # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # endif # endif # if CONFIG_TEMPORAL",0
274,<S2SV_ModStart> goto error ; if ( <S2SV_ModEnd> statbuf. st_size <S2SV_ModStart> statbuf. st_size < 0 ) goto error ; h -> size = statbuf. st_size,0
275,"<S2SV_ModStart> u1_level_idc, u1_seq_parameter_set_id <S2SV_ModEnd> ; UWORD32 * <S2SV_ModStart> ; WORD32 u4_num_reorder_frames <S2SV_ModEnd> ; WORD32 i4_i",0
276,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * params = ( vpx_svc_parameters_t * ) <S2SV_ModStart> return VPX_CODEC_INVALID_PARAM ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 <S2SV_ModEnd> ) return VPX_CODEC_INVALID_PARAM <S2SV_ModStart> ; cpi -> <S2SV_ModEnd> gld_fb_idx = params <S2SV_ModStart> = params -> <S2SV_ModEnd> gld_fb_idx ; cpi <S2SV_ModStart> ; cpi -> <S2SV_ModEnd> alt_fb_idx = params <S2SV_ModStart> params -> alt_fb_idx <S2SV_ModEnd> ; ctx ->",0
277,"<S2SV_ModStart> out ) { uint32 bitspersample ; uint32 samplesperpixel ; uint16 input_compression, input_photometric ; uint32 width, length ; struct cpTag * p ; uint32 width <S2SV_ModEnd> ; CopyField ( <S2SV_ModStart> samplesperpixel ) ; TIFFGetFieldDefaulted ( in, TIFFTAG_IMAGEWIDTH, & width ) ; CopyField ( TIFFTAG_IMAGELENGTH, & length ) ; if ( width!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( TIFFTAG_BITSPERSAMPLE, bitspersample ) ; CopyField ( TIFFTAG_SAMPLESPERPIXEL, samplesperpixel ) ; if ( compression!= ( uint16 ) - 1 ) TIFFSetField ( out, TIFFTAG_COMPRESSION, compression ) ; TIFFGetFieldDefaulted ( in, TIFFTAG_COMPRESSION, & input_compression ) ; TIFFGetFieldDefaulted ( in, TIFFTAG_PHOTOMETRIC, & input_photometric ) ; if ( input_compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_JPEGCOLORMODE, JPEGCOLORMODE_RGB ) ; } else if ( input",0
278,<S2SV_ModStart> a ) { char * pn ; char c ; int r ; struct stat st ; pn = a -> name ; if ( archive_strlen ( & ( a -> path_safe ) ) > 0 ) { char * p = a -> path_safe. s ; while ( * p == '/' ) p ++ ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '\\0' && ( * pn!= '/' ) ) ) ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '/' ) ) ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '\\0' && ( * pn!= '/' ) ) ) ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '\\0' && ( * pn!= '/' ) ) ) ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '\\0' && ( * pn!= '/' ) ) ) ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ],0
279,"<S2SV_ModStart> unsigned int link_count ; struct kernel_lb_addr loc ; struct indirectEntry * ie ; ie = ( struct indirectEntry * ) ibh -> b_data ; loc = lelb_to_cpu ( ie -> indirectICB. extLocation ) <S2SV_ModStart> ibh ) { <S2SV_ModEnd> if ( ie <S2SV_ModStart>. extLength && <S2SV_ModEnd> udf_read_ptagged ( inode <S2SV_ModStart> -> i_sb, <S2SV_ModEnd> loc, 0 <S2SV_ModStart> ident ) ) <S2SV_ModEnd> { if ( <S2SV_ModStart> ibh ) { <S2SV_ModEnd> if ( ie <S2SV_ModStart>. extLength && <S2SV_ModEnd> udf_read_ptagged ( inode <S2SV_ModStart> -> i_sb, <S2SV_ModEnd> loc, 0 <S2SV_ModStart> -> i_sb, <S2SV_ModEnd> loc, 0 <S2SV_ModStart> -> i_sb, <S2SV_ModEnd> loc, 0 <S2SV_ModStart> -> i_sb, <S2SV_ModEnd> loc, 0 <S2SV_ModStart> -> i_sb, <S2SV_ModEnd> loc, 0 <S2SV_ModStart> -> i_sb, <S2SV_ModEnd> loc, 0 <S2SV_ModStart> -> i_sb, <S2SV_ModEnd> loc, 0 <S2SV_ModStart> -> i_sb, <S2SV_ModEnd> loc, 0 <S2SV_ModStart> -> i_sb, <S2SV_ModEnd> loc, 0 <S2SV_ModStart> -> i_sb, <S2SV_ModEnd> loc, 0 <S2SV_ModStart> -> i_sb, <S2SV_ModEnd> loc, 0 <S2SV_ModStart> -> i_sb, <S2SV_ModEnd> loc, 0 <S2SV_ModStart> -> i_sb, <S2SV_ModEnd> loc, 0 <S2SV_ModStart>",0
280,"<S2SV_ModStart> get_uv_tx_size ( mbmi ) ; memset ( & lfm -> lfl_y [ index ], 0, sizeof ( lfm -> lfl_y ) <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm <S2SV_ModStart> ++ ) { mem",0
281,"<S2SV_ModStart> mq_ops ) { spin_lock_irqsave_nested <S2SV_ModEnd> ( & fq <S2SV_ModStart> mq_flush_lock, flags, SINGLE_DEPTH_NESTING",0
282,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
283,"<S2SV_ModStart> ) ) { ovalue = strim ( option, ""\\""\'"", MPR_TRIM_BOTH ) ; if (! ovalue || * ovalue == '\\0' ) continue ; <S2SV_ModStart>, & ovalue <S2SV_ModEnd> ) ; if",0
284,<S2SV_ModStart> ( effect_param_t ) || * ( effect_param_t * ) pCmdData > * replySize,0
285,<S2SV_ModStart> ; } } if ( num_versions == 0 ) { err = EINVAL ; goto cleanup ; },0
286,<S2SV_ModStart> 0x02 ) ; if ( crgram_len > SC_MAX_APDU_BUFFER_SIZE - 1 ),0
287,<S2SV_ModStart> ; if ( ctxt. info. tc_mapping [ I40E_AQ_VSI_TC_QUE_OFFSET_SHIFT ] & ( I40E_AQ_VSI_TC_QUE_NUMBER_MASK - 1 ) ) return - EINVAL ; if (,0
288,<S2SV_ModStart> ; } } return - 1 ;,1
289,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
290,"<S2SV_ModStart> mb_row, recon_uvoffset, recon_y_stride <S2SV_ModStart> mb_row, recon_uvoffset, recon_uv_stride <S2SV_ModStart> mb_row, recon_y_stride, recon_uv_stride",0
291,"<S2SV_ModStart> ) ; } quantum_info = CloneImageInfo ( image_info ) ; if ( quantum_info == ( ImageInfo * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( quantum_info ) ) ; }",0
292,"<S2SV_ModStart> len ) { return decode_unicode_with_escapes2 ( c, n, s, len, 0 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
293,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> enum { YES <S2SV_ModStart> setimes, targisdir <S2SV_ModEnd> ; BUF * <S2SV_ModStart> ""Unexpected <S2SV_blank> off_t/time_t <S2SV_blank> size"" ) ; <S2SV_ModEnd> mask = umask <S2SV_ModStart> ; if ( lstat <S2SV_ModEnd> ( targ, <S2SV_ModStart> ; if ( lstat <S2SV_ModEnd> ( targ, <S2SV_ModStart> ; if ( lstat <S2SV_ModEnd> ( targ,",0
294,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
295,<S2SV_ModStart> 0 ) { vpx_free ( oci -> mip ) ; vpx_free ( oci -> above_context ) ; vp8_de_alloc_frame_buffers ( oci ) ; <S2SV_ModStart> 0 ) { vpx_free ( oci -> mip ) ; vpx_free ( oci ) ; vp8_de_alloc_frame_buffers ( oci ) ; vp8_de_alloc_frame_buffers ( oci ) ; vp8_de_alloc_frame_buffers ( oci ) ; vp8_de_alloc_frame_buffers ( oci ) ; vp8_de_alloc_frame_buffers ( oci ) ; vp8_de_alloc_frame_buffers ( oci ) ; <S2SV_ModStart> 0 ) { vpx_free ( oci -> mip ) ; vpx_free ( oci -> above_context ) ; vp8_de_alloc_frame_buffers ( oci ) ; vp8_de_alloc_frame_buffers ( oci ) ; vp8_de_alloc_frame_buffers ( oci ) ; vp8_de_alloc_frame_buffers ( oci ) ; vp8_de_alloc_frame_buffers ( oci ) ; vp8_de_alloc_frame_,0
296,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
297,<S2SV_ModStart> u1_num_mbsNby2 ) { if ( ps_dec -> ps_dec_err_status -> u1_err_flag & REJECT_CUR_PIC ) { ps_dec -> ps_dec_err_status -> u1_err_flag &= ~ REJECT_CUR_PIC ; ps_dec -> ps_dec_err_status -> u1_err_flag |= REJECT_CUR_SLICE ; ps_dec -> ps_dec_err_status -> u1_err_flag &= ~ REJECT_CUR_SLICE ; ps_dec -> ps_dec_err_status -> u1_err_flag &= ~ REJECT_CUR_PIC ; ps_dec -> ps_dec_err_status -> u1_err_flag |= REJECT_CUR_SLICE ; ps_dec -> ps_dec_err_status -> u1_err_flag |= REJECT_CUR_SLICE ; ps_dec -> ps_dec_err_status -> u1_err_flag &= ~ REJECT_CUR_SLICE ; ps_dec -> ps_dec_err_status -> u1_err,0
298,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> vterm_allocator_free ( screen,1
299,"<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & delay )",1
300,"<S2SV_ModStart>, one, <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize (",0
301,"<S2SV_ModStart> value ) { cchar * name = sclone ( value ) ; <S2SV_ModStart>, stok ( name <S2SV_ModEnd>, "" <S2SV_blank> \\t,"", <S2SV_ModStart> -> endpoints = name <S2SV_ModEnd> ; } }",0
302,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
303,<S2SV_ModStart> ) ) ; cg_wlock ( & pool -> data_lock ) ; <S2SV_ModStart> ntime ) { free ( <S2SV_ModEnd> prev_hash ) ; <S2SV_ModStart> prev_hash ) ; if ( job_id ) free ( job_id ) ; if ( coinbase1 ) free ( coinbase1 ) ; if ( coinbase2 ) free ( coinbase2 ) ;,0
304,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
305,"<S2SV_ModStart> unused ) { <S2SV_ModEnd> _Py_IDENTIFIER ( __dict__ <S2SV_ModStart> __dict__ ) ; return ast_type_reduce_ex <S2SV_ModEnd> ( self, <S2SV_ModStart> ( self, NULL <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
306,"<S2SV_ModStart> ) & desc, sizeof ( * desc )",1
307,"<S2SV_ModStart> perf_event * ) ; struct perf_event_context * ctx <S2SV_ModStart> case PERF_EVENT_IOC_PERIOD : ctx = perf_event_ctx_lock ( event ) ; <S2SV_ModStart> perf_event_period ( event, ctx <S2SV_ModStart> ret ; } <S2SV_ModEnd> default : return",0
308,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> * r, PREDICTION_MODE <S2SV_ModEnd> y_mode ) { <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode",0
309,"<S2SV_ModStart> sha_zero ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) return - EINVAL ; <S2SV_ModStart> sha_zero ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) return - EINVAL ; <S2SV_ModStart> sha_zero ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) return - EINVAL ; <S2SV_ModStart> sha_zero ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) return - EINVAL ; <S2SV_ModStart> sha_zero ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) return - EINVAL ; <S2SV_ModStart> sha_zero ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) return - EINVAL ; <S2SV_ModStart> sha_zero ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) return - EINVAL ;",0
310,"<S2SV_ModStart> iv ) ; if (! NIL_P ( key ) ) rb_raise ( eCipherError, ""key <S2SV_blank> must <S2SV_blank> be <S2SV_blank> a <S2SV_blank> non-empty <S2SV_blank> string"" ) ; if (! NIL_P ( iv ) ) rb_raise ( eCipherError, ""iv <S2SV_blank> must <S2SV_blank> be <S2SV_blank> a <S2SV_blank> non-empty <S2SV_blank> string"" ) ;",0
311,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
312,<S2SV_ModStart> ; if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) ) { return in - first ; } if (,0
313,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> x86_pmu. max_pebs_events <S2SV_ModStart> max_pebs_events ) ; <S2SV_ModEnd> return 0 ;,0
314,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> tp, const vpx_TOKENEXTRA <S2SV_ModEnd> * stop ) <S2SV_ModStart> stop ) { vpx_writer <S2SV_ModEnd> * p = <S2SV_ModStart> ] ; const vpx_extra_bit <S2SV_ModEnd> * const b <S2SV_ModStart> b = & vpx_extra_bits <S2SV_ModEnd> [ t ] <S2SV_ModStart> & 1 ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ; } vpx_write_bit <S2SV_ModEnd> ( w,",0
315,"<S2SV_ModStart>, uncompressed_hdr_size ; vpx_write_bit_buffer <S2SV_ModEnd> wb = { <S2SV_ModStart> 0 } ; vpx_write_bit_buffer <S2SV_ModEnd> saved_wb ; write_uncompressed_header <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> += uncompressed_hdr_size ; vpx_compute_update_table <S2SV_ModEnd> ( ) ; <S2SV_ModStart> += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb",0
316,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct net_device * <S2SV_ModEnd> dev_get_valid_name ( struct <S2SV_ModStart> net * net <S2SV_ModEnd>, const char <S2SV_ModStart> name ) { struct net_device * dev ; <S2SV_ModStart> '%' ) ) { dev = <S2SV_ModEnd> dev_alloc_name_ns ( net <S2SV_ModStart> name ) ; if ( IS_ERR ( dev ) ) return PTR_ERR ( dev ) ; } <S2SV_ModStart> name ) ) { dev = <S2SV_ModEnd> __dev_get_by_name ( net <S2SV_ModStart> name ) ; if ( IS_ERR ( dev ) ) return PTR_ERR ( dev ) ; }",0
317,<S2SV_ModStart> struct ikev2_id id <S2SV_ModEnd> ; ND_TCHECK ( <S2SV_ModStart> * typedata ; if ( item_len < sizeof ( struct ikev2_id ) ) { ND_TCHECK ( * ext ) ; return NULL ; } <S2SV_ModStart> * typedata ; if ( item_len < sizeof ( struct ikev2_id ) ) { ND_TCHECK ( * ext ) ; return NULL ; } <S2SV_ModStart> trunc ; } ND_TCHECK ( * ext ) ;,0
318,"<S2SV_ModStart> ) ) { jas_log ( jas_log_get_stream ( ), ""mif_process_cmpt: <S2SV_blank> invalid <S2SV_blank> data <S2SV_blank> value <S2SV_blank> %d"", id ) ;",0
319,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
320,"<S2SV_ModStart> xt0_0, yt0_0 <S2SV_ModEnd> ; WORD32 xh0_0 <S2SV_ModStart> ; WORD32 xl0_0 <S2SV_ModEnd> ; WORD32 x_1",0
321,"<S2SV_ModStart> mntent -> mnt_dir, false",0
322,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
323,"<S2SV_ModStart> ( req ) ) ; rb_hash_aset ( env, server_port_val, req_server_port ( req )",0
324,<S2SV_ModStart> endif int col_type ; int <S2SV_ModEnd> prepare_retval ; MYSQL_BIND <S2SV_ModStart> endif # endif <S2SV_ModEnd> # endif D_imp_xxh,0
325,"<S2SV_ModStart> need = 0 <S2SV_ModEnd> ; CELL first <S2SV_ModStart> screen, { if ( need > MAX_WIDE_CHARS ) { SysError ( ERROR_BMALLOC2 ) ; return ; }",0
326,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> val ) ) strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> < 0 ) strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> ) ; else strcpy <S2SV_ModEnd> ( str,",0
327,<S2SV_ModStart> ( unlikely ( crng_ready ( ) <S2SV_ModEnd> ) ) {,0
328,"<S2SV_ModStart> LEX_ID ) { strlcat <S2SV_ModEnd> ( str, <S2SV_ModStart> len ) ; strlcat <S2SV_ModEnd> ( str, <S2SV_ModStart> jslGetTokenValueAsString ( ) <S2SV_ModEnd> ) ; } <S2SV_ModStart> LEX_STR ) { strlcat <S2SV_ModEnd> ( str, <S2SV_ModStart> len ) ; strlcat <S2SV_ModEnd> ( str, <S2SV_ModStart> jslGetTokenValueAsString ( ) <S2SV_ModEnd> ) ; }",0
329,,1
330,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
331,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
332,"<S2SV_ModStart> ) { return memcmp <S2SV_ModEnd> ( s1,",0
333,"<S2SV_ModStart> ( CMD_PRINT_HELP, """", <S2SV_ModStart> ( CMD_PRINT_HELP, """", <S2SV_ModStart> ( CMD_PRINT_DEFAULTS, """",",0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,<S2SV_ModStart> ) ; } if ( st -> st_oakley. ta_encrypt_state == STATE_UNKNOWN ) { st -> st_oakley. ta_encrypt_state = STATE_UNKNOWN ; },0
336,<S2SV_ModStart> ; } } if ( 0 == ps_dec -> u4_num_bytes_consumed ) { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = 0 ; },0
337,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char * print_string,0
338,"<S2SV_ModStart> == 1 ) { <S2SV_ModStart> deadline ) ; } else { int i ; ctx += num_enc - 1 ; if ( img ) img += num_enc - 1 ; for ( i = num_enc - 1 ; i >= 0 ; i -- ) { if ( ( res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ) ) break ; ctx -- ; if ( img ) img -- ; } ctx ++ ; } for ( i = 0 ; i < num_enc ; i ++ ) { if ( ( res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ) ) break ; ctx -- ; if ( img ) img -- ; } ctx ++ ; }",0
339,"<S2SV_ModStart> ) ; } else if ( arg1 == 3 ) { win_maximise ( - 2 ) ; win_set_chars ( rows0, cols0 ) ; }",0
340,<S2SV_ModStart> i < cols <S2SV_ModEnd> ; i ++,0
341,"<S2SV_ModStart> -> log ) { if ( i -> parent -> log ) <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> -> log ) { if ( i -> parent -> log ) <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> -> log ) { if ( i -> parent -> log ) <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> -> log ) { if ( i -> parent -> log ) <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; } <S2SV_ModStart> ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ;",0
342,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",0
343,<S2SV_ModStart> = value ; if ( 0 == ps_codec -> i4_pps_done ) { ps_codec -> i4_pps_done = 1 ; return IHEVCD_INVALID_HEADER ; },0
344,<S2SV_ModStart> ) ) { if ( c =='<S2SV_blank>') { count ++ ; continue ; },0
345,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
346,"<S2SV_ModStart> 0 ; } if ( copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; return 0 ; } <S2SV_ModStart> ( rv ) { <S2SV_ModStart> ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; return 0 ; } <S2SV_ModEnd> } _exit (",0
347,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> BLOCK_8X8 : return vpx_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> BLOCK_16X8 : return vpx_mse16x8 <S2SV_ModEnd> ; case BLOCK_8X16 <S2SV_ModStart> BLOCK_8X16 : return vpx_mse8x16 <S2SV_ModEnd> ; default : <S2SV_ModStart> default : return vpx_mse16x16 <S2SV_ModEnd> ; } },1
348,<S2SV_ModStart> ; if ( encoded_key_pack == NULL ) { retval = KRB5_E_INVAL ; break ; } if (,0
349,"<S2SV_ModStart> flags ) ; if (! vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } <S2SV_ModStart> vb. vb2_buf <S2SV_ModEnd> ) ; if",0
350,<S2SV_ModStart> size ) { if ( size > SIZE_MAX ) { zmalloc_oom_handler ( size ) ; return NULL ; },0
351,<S2SV_ModStart> -> serviceId == EXTRACT_16BITS <S2SV_ModEnd> ( & rxh,1
352,"<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len > MWIFIEX_MAX_SSID_LEN ) { mwifiex_dbg ( adapter, ERROR, ""Invalid <S2SV_blank> SSID <S2SV_blank> length\\n"" ) ; return - EINVAL ; }",0
353,<S2SV_ModStart> ; if (! sfe -> valuelen ) return 0 ; if (,0
354,"<S2SV_ModStart> struct l2cap_conf_rfc rfc <S2SV_ModEnd> ; void * <S2SV_ModStart> sk ) ; rfc = { } ; <S2SV_ModStart> = L2CAP_MODE_ERTM ; if ( pi -> txwin_size > L2CAP_DEFAULT_TX_WINDOW ) { l2cap_add_conf_opt ( & ptr, L2CAP_CONF_TX_WINDOW, 2, L2CAP_DEFAULT_TX_WINDOW ) ; } <S2SV_ModStart> = L2CAP_DEFAULT_MAX_RECEIVE ; if ( pi -> retrans_timeout > L2CAP_DEFAULT_RETRANS_TO ) { l2cap_add_conf_opt ( & ptr, L2CAP_CONF_RETRANS_TIMEOUT, 2, L2CAP_DEFAULT_RETRANS_TO ) ; } <S2SV_ModStart> = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO <S2SV_ModEnd> ) ; rfc <S2SV_ModStart> = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; if ( pi -> monitor_timeout > L2CAP_DEFAULT_MONITOR_TO ) { l2cap_add_conf_opt ( & ptr, L2CAP_CONF_MONITOR_TIMEOUT",0
355,"<S2SV_ModStart> { do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> r, MSG_WAITALL )",0
356,<S2SV_ModStart> u1_nal_ref_idc ) ; if ( ps_dec -> u1_nal_ref_idc == 0 ) { ps_dec -> u1_nal_ref_idc = IDR_SLICE_NAL ; ps_dec -> u1_pic_decode_done = 1 ; },0
357,<S2SV_ModStart> while ( pair <S2SV_ModEnd> ) { mprAddItem,1
358,"<S2SV_ModStart> * delegation, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> = 0 ; fmode <S2SV_ModEnd> &= ( FMODE_READ <S2SV_ModStart> -> type & fmode <S2SV_ModEnd> )!= open_flags <S2SV_ModStart> -> stateid, fmode <S2SV_ModEnd> ) ; ret <S2SV_ModStart>, NULL, fmode <S2SV_ModEnd> ) ; ret",0
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,"<S2SV_ModStart> * xd, int64_t <S2SV_ModEnd> * out_rate_sum, <S2SV_ModStart> * out_dist_sum ) { int i ; int64_t rate_sum = 0 ; int64_t dist_sum = 0 ; const int ref = xd -> mi [ 0 ] -> mbmi. ref_frame [ 0 ] ; unsigned int sse ; const BLOCK_SIZE bs = get_plane_block_size ( bsize, pd ) ; if ( cpi -> speed > 4 ) { int64_t rate ; int64_t dist ; int64_t square_error = sse ; int quantizer = ( pd -> dequant [ 1 ] >> 3 ) ; if ( quantizer < 120 ) rate = ( square_error * ( 280 - quantizer ) ) >> 8 ; else rate = 0 ; dist = ( square_error * quantizer ) >> 8 ; rate_sum += rate ; dist_sum += dist ; } else { int rate ; int64_t dist ; vp9_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ bs ], pd -> dequant [ 1 ] >> 3, & rate, &",0
361,<S2SV_ModStart> } if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
362,<S2SV_ModStart> { if ( index >= PAM_MAX_RESP_SIZE ) { return ( PAM_BUF_ERR ) ; } if ( <S2SV_ModStart> == NULL ) { free ( * ret_username ) ; <S2SV_ModStart> PAM_BUF_ERR ) ; },0
363,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> seg ) { vpx_read_tree <S2SV_ModEnd> ( r, <S2SV_ModStart> ( r, vpx_segment_tree <S2SV_ModEnd>, seg ->",0
364,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",1
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,"<S2SV_ModStart> depth ++ ; if ( depth == 0 ) { ND_PRINT ( ( ndo, ""Depth <S2SV_blank> reached\\n"" ) ) ; return ( buf ) ; }",0
367,"<S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851WriteFifo <S2SV_ModStart> ( interface, KSZ8851_TXQCR, KSZ8851_TXQCR_METFE <S2SV_ModEnd> ) ; n <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK",0
368,<S2SV_ModStart> ( ) ; mono_attach_maybe_stop ( ) ;,0
369,"<S2SV_ModStart>, x_e, x_f ; WORD32 n10, n20, n30, n01, n11, n21, n31 ; WORD32 n12, n22, n32, n03, n13, n23, n33 ; WORD32 n0, j0 ; WORD32 * x2, * x0 ; WORD32 * y0, * y1, * y2, * y3 ; x0 = ptr_x ; x2 = ptr_x + ( WORD32 ) npoints ; y1 = ptr_y + ( WORD32 ) npoints ; y2 = ptr_y + ( WORD32 ) npoints ; y3 = ptr_y + ( WORD32 ) npoints ; x0 = ptr_x + ( WORD32 ) npoints ; x_4 = * x0 ++ ; x_5 = * x0 ++ ; x_6 = * x0 ++ ; x_7 = * x0 ++ ; <S2SV_ModStart> x0 ++ ; <S2SV_ModEnd> n00 = x_0 <S2SV_ModStart> + x_2 ; n01 = x_1 + x_3 ; n20 = x_0 - x_2 ; n21 = x",0
370,"<S2SV_ModStart> ; if ( pmd_none_or_clear_bad ( pmd ) ) continue ; ret = unuse_pte_range ( vma, pmd, addr, next, entry, page ) ; if ( ret ) return ret ; if ( <S2SV_ModStart> ) ) ) <S2SV_ModEnd> return ret ;",0
371,"<S2SV_ModStart> height, target_width = 0, target_height = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( argv [ 2 ], & width ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } if (! parse_dim ( argv [ 3 ], & target_width, & target_height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpin = fopen ( fin, ""rb"" ) ; if ( fpin == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> read\\n"", fin ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpout = fopen ( fout, ""wb"" ) ; if ( fpout == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> write\\n",0
372,"<S2SV_ModStart> num_fields ) { <S2SV_ModEnd> _Py_IDENTIFIER ( _attributes <S2SV_ModStart> i, result <S2SV_ModEnd> ; PyObject * <S2SV_ModStart> ) ; } return <S2SV_ModEnd> _PyObject_SetAttrId ( ( <S2SV_ModStart>, l ) <S2SV_ModEnd> ; } <S2SV_null>",0
373,<S2SV_ModStart> = VPX_CODEC_OK ; vpx_codec_alg_priv_t <S2SV_ModEnd> * priv ; <S2SV_ModStart> struct vpx_codec_alg_priv * priv_priv <S2SV_ModEnd> ; vpx_codec_enc_cfg_t * <S2SV_ModStart> priv ) { priv_priv <S2SV_ModEnd> = calloc ( <S2SV_ModStart> sizeof ( struct vpx_codec_alg_priv_t <S2SV_ModEnd> ) ) ; <S2SV_ModStart> priv = & priv_priv <S2SV_ModEnd> -> base ; <S2SV_ModStart> enc ) { priv_priv <S2SV_ModEnd> -> cfg = <S2SV_ModStart> enc = & priv_priv <S2SV_ModEnd> -> cfg ; <S2SV_ModStart> ++ ) ; priv_priv <S2SV_ModEnd> -> vp8_cfg = <S2SV_ModStart> ]. cfg ; priv_priv <S2SV_ModEnd> -> vp8_cfg.,0
374,<S2SV_ModStart> ++ ; } pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; totfr += step ; if ( totfr > BOT ) { totfr = 0 ; for ( i = 0 ; i < 256 ; i ++ ) { unsigned nc = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] = nc ; totfr += nc ; } for ( i = 0 ; i < 256 ; i ++ ) { unsigned sum = 0 ; unsigned i16_17 = i << 4 ; for ( j = 0 ; j < 16 ; j ++ ) sum += i16_17 ; pixel -> lookup [ i ] = sum ; } } pixel -> total_freq = totfr ;,0
375,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx ->,0
376,"<S2SV_ModStart> ) ; } if ( udf_is_valid_inode_link ( inode -> i_sb, iloc -> logicalBlockNum, iloc -> partitionReferenceNum ) ) { ret = udf_read_inode_link ( inode, iloc ) ; if ( ret < 0 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> inode <S2SV_blank> link\\n"", inode -> i_ino ) ; goto out ; } ret = udf_read_inode_link ( inode, iloc ) ; if ( ret < 0 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> inode <S2SV_blank> link\\n"", inode -> i_ino ) ; goto out ; } ret = udf_read_inode_link ( inode, iloc ) ; if ( ret < 0 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> inode <S2SV_blank> link\\n"", inode -> i_ino ) ; goto out ; } }",0
377,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0",1
378,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> bad_format_imginfo ( char <S2SV_ModStart> fmt ) { const <S2SV_ModStart> * ptr ; bool <S2SV_ModEnd> n = 0,0
379,"<S2SV_ModStart> IPV6DefragSturgesNovakLastTest ) ; UtRegisterTest ( ""DefragIPv6NoDataTest"", DefragIPv6NoDataTest ) ;",0
380,<S2SV_ModStart> if ( object_data && object_length,0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,<S2SV_ModStart> p_sys -> b_eos_pulled ||! p_block,0
384,<S2SV_ModStart> bfname. len && bfname. len,0
385,<S2SV_ModStart> 4 ) ; size_t <S2SV_ModEnd> num_properties = GETINT32 <S2SV_ModStart> len ) ; if (! a -> names [ i ]. data ) return NULL ;,0
386,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
387,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * fb ; vpx_get_reference_dec <S2SV_ModEnd> ( ctx ->",0
388,"<S2SV_ModStart> if ( next_marker == JPEG_MARKER_EOI ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> first <S2SV_blank> SOI <S2SV_blank> marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> EOI.\\n"", next_marker ) ; return AVERROR_INVALIDDATA ; } else if ( next_marker",0
389,"<S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == testlist ) { node * ch = CHILD ( n, 0 ) ; expr_ty e = ast_for_testlist ( c, ch ) ; if (! e ) return NULL ; return Expr ( e, LINENO ( n ), n -> n_col_offset, n -> n_end_lineno, n -> n_end_col_offset, c -> c_arena ) ; } else if (",0
390,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> vp8_denoiser_filter_c ( YV12_BUFFER_CONFIG <S2SV_ModStart> = 16 ; vpx_buffer_config <S2SV_ModEnd> * mc_running_avg_y = <S2SV_ModStart> -> y_stride ; vpx_buffer_config <S2SV_ModEnd> * running_avg_y = <S2SV_ModStart> -> y_stride ; vpx_buffer_config <S2SV_ModEnd> * avg_y_stride = <S2SV_ModStart> = 0 ; vpx_buffer_config <S2SV_ModEnd> adj_val [ 3 <S2SV_ModStart> MOTION_MAGNITUDE_THRESHOLD ) { vpx_buffer_config <S2SV_ModEnd> adj_val [ i <S2SV_ModStart> c ] ; vpx_buffer_config <S2SV_ModEnd> [ c ] <S2SV_ModStart> += diff ; vpx_buffer_config <S2SV_ModEnd> [ c ] <S2SV_ModStart> += adjustment ; vpx_buffer_config <S2SV_ModEnd> [ c ] <S2SV_ModStart> += adjustment ; vpx_buffer_config <S2SV_ModEnd> [ c ] <S2SV_ModStart> += adjustment ; vpx_buffer_config <S2SV_ModEnd> [ c ] <S2SV_ModStart> += adjustment ; vpx_buffer_config <S2SV_ModEnd> [ c ] <S2SV_ModStart> += adjustment ; vpx_buffer_config <S2SV_ModEnd> [ c ] <S2SV_ModStart> += adjustment ; vpx,0
391,<S2SV_ModStart> ; } } if ( sockPtr -> keep ) { sockPtr -> keep = NS_TRUE ; },0
392,"<S2SV_ModStart> = uregs ; xtregs_coprocessor_t cp0 ; <S2SV_ModStart> ret = 0 ; memset ( & cp0, 0, sizeof ( cp0 ) ) <S2SV_ModStart> ti ) ; <S2SV_ModEnd> ret |= __copy_from_user <S2SV_ModStart> ) ) ; <S2SV_ModEnd> ret |= __copy_from_user",0
393,<S2SV_ModStart> size ) ; if ( message -> length > 0 ) { <S2SV_ModStart> buffer ) ; },0
394,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" <S2SV_ModStart> cg_item ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
395,<S2SV_ModStart> ; if (! header ) return 0 ; <S2SV_ModEnd> new_bh = ext2_xattr_cache_find <S2SV_ModStart> new_bh ) ; error = <S2SV_ModStart> ( new_bh ) ; if ( error ) goto cleanup,0
396,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
397,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
398,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
399,"<S2SV_ModStart> * imsy, 3 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) ; } for ( n = 0 ; n < 16 ; n ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 0, 0, 0 ) ; } for ( ; n < SIXEL_PALETTE_MAX ; n ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 0, 0, 0 ) ; } for ( ; n < SIXEL_PALETTE_MAX ; n ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 0, 0, 0 ) ; } for ( ; n < SIXEL_PALETTE_MAX ; n ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 0, 0, 0 ) ; } for ( ; n < SIXEL_PALETTE_MAX ; n ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 0, 0, 0 ) ; } for ( ; n < SIXEL_PALETTE_MAX ; n ++ ) { sixel_palet [ n ] = SIXEL_RGB ( 0",0
400,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vpx_ref_frame_t * ) ; YV12_BUFFER_CONFIG sd <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; vpx_image2yuvconfig <S2SV_ModEnd> ( & frame <S2SV_ModStart> sd ) ; if ( vp9_copy_reference_dec ( ctx -> pbi, ( VP9_REFFRAME ) frame -> frame_type, & sd )!= VPX_CODEC_OK ) { return VPX_CODEC_INVALID_PARAM ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
401,<S2SV_ModStart> u1_num_mbsNby2 ) { if ( ps_dec -> ps_dec_err_status -> u1_err_flag & REJECT_CUR_PIC ) { ps_dec -> ps_dec_err_status -> u1_err_flag &= ~ REJECT_CUR_PIC ; ps_dec -> ps_dec_err_status -> u1_err_flag |= REJECT_CUR_SLICE ; ps_dec -> ps_dec_err_status -> u1_err_flag &= ~ REJECT_CUR_SLICE ; ps_dec -> ps_dec_err_status -> u1_err_flag &= ~ REJECT_CUR_PIC ; ps_dec -> ps_dec_err_status -> u1_err_flag |= REJECT_CUR_SLICE ; ps_dec -> ps_dec_err_status -> u1_err_flag |= REJECT_CUR_SLICE ; ps_dec -> ps_dec_err_status -> u1_err_flag &= ~ REJECT_CUR_SLICE ; ps_dec -> ps_dec_err_status -> u1_err,0
402,<S2SV_ModStart> ; UWORD32 u4_x_dst_offset = 0 ; UWORD32 u4_y_dst_offset <S2SV_ModStart> == B_PIC ) { <S2SV_ModStart> ps_dec ) ; } else { ps_dec_dec_pnb_mb_params ( ps_dec ) ; } <S2SV_ModStart> == B_PIC ) { <S2SV_ModStart> ps_dec ) ; } else { ps_dec_dec_p_mb_params ( ps_dec ) ; },0
403,"<S2SV_ModStart> VP9_LAST_FLAG ) { if ( cm -> ref_frame_map [ 0 ] >= MAX_FRAMES ) { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Invalid <S2SV_blank> reference <S2SV_blank> frame"" ) ; return VPX_CODEC_ERROR ; } <S2SV_ModStart> -> frame_bufs [ <S2SV_ModEnd> cm -> ref_frame_map",0
404,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
405,<S2SV_ModStart> TX_SIZE tx_size = <S2SV_ModEnd> get_uv_tx_size ( mbmi <S2SV_ModStart> ( mbmi ) <S2SV_ModEnd> ; const BLOCK_SIZE <S2SV_ModStart> ( xd -> mb_to_left_edge <S2SV_ModEnd> < 0 || <S2SV_ModStart> || xd -> mb_to_top_edge <S2SV_ModEnd> < 0 ) <S2SV_ModStart> ( xd -> mb_to_left_edge <S2SV_ModEnd> < 0 ) <S2SV_ModStart> ( xd -> mb_to_top_edge <S2SV_ModEnd> < 0 ) <S2SV_ModStart> ( xd -> mb_to_right_edge <S2SV_ModEnd> >> ( 5 <S2SV_ModStart> ( xd -> mb_to_bottom_edge <S2SV_ModEnd> >> ( 5 <S2SV_ModStart> ( xd -> mb_to_top_edge <S2SV_ModEnd> < 0 ) <S2SV_ModStart> ( xd -> mb_to_right_edge <S2SV_ModEnd> >> ( 5 <S2SV_ModStart> ( xd -> mb_to_bottom_edge <S2SV_ModEnd> >> ( 5 <S2SV_ModStart> ( xd -> mb_to_left_edge <S2SV_ModEnd> < 0 ) <S2SV_ModStart> ( xd -> mb_to_top_edge <S2SV_ModEnd> >> ( 5 <S2SV_ModStart> ( xd -> mb_to_right_edge <S2SV_ModEnd> >> ( 5 <S2SV_ModStart> ( xd -> mb_to_bottom_edge <S2SV_ModEnd> >> ( 5 <S2SV_ModStart> ( xd -> mb_to_top_edge <S2SV_ModEnd> < 0 ) <S2SV_ModStart> ( xd -> mb_to_bottom_edge <S2SV_ModEnd> >> (,0
406,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 4 ) ; <S2SV_ModEnd> src += src_stride",0
407,"<S2SV_ModStart> nrow ) { if ( row + img -> row_offset > h ) { return ( 0 ) ; } <S2SV_ModStart> -> row_offset ; <S2SV_ModEnd> if ( _TIFFReadEncodedStripAndAllocBuffer <S2SV_ModStart> ) ; } if ( buf == NULL ) { if ( _TIFFReadEncodedStripAndAllocBuffer ( tif, bufsize, & p0, & p1, & p2, & pa ) < 0 ) { return ( 0 ) ; } if ( _TIFFReadEncodedStripAndAllocBuffer ( tif, bufsize, & p0, & p1, & pa ) < 0 ) { return ( 0 ) ; } if ( _TIFFReadEncodedStripAndAllocBuffer ( tif, bufsize, & p2, & pa, & pos ) < 0 ) { return ( 0 ) ; } if ( p0 == NULL ) { return ( 0 ) ; } if ( p1 == NULL ) { return ( 0 ) ; } if ( p2 == NULL ) { return ( 0 ) ; } if ( p2 == NULL ) { return ( 0 ) ; }",0
408,<S2SV_ModStart> ; } } <S2SV_ModEnd> return 0 ;,0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> psf -> header. <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> psf -> header. <S2SV_ModEnd> header [ psf <S2SV_ModStart> psf -> header. <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
410,<S2SV_ModStart> num & ( 1U << number <S2SV_ModEnd> ) ) return <S2SV_ModStart> num - ( 1U <S2SV_ModEnd> << number ),0
411,"<S2SV_ModStart> ] ; const size_t <S2SV_ModEnd> w = vpx_img_plane_width <S2SV_ModStart> y ) { int bytes_read = <S2SV_ModEnd> fread ( buf <S2SV_ModStart>, file ) ; if ( bytes_read <S2SV_ModStart>!= w ) { fclose ( file ) ; <S2SV_ModStart> return 0 ; }",0
412,"<S2SV_ModStart> ; uint16_t attr_len = 0 <S2SV_ModStart> ; uint16_t orig_attr_len = 0 <S2SV_ModStart> 1 ; } if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } <S2SV_ModStart> struct l2tp_avp_t ) ; if ( avp -> length < attr_len ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } attr_len = avp -> length - sizeof ( struct l2tp_avp_t ) ; MD5_Init ( & md5_ctx ) ; MD5_Update ( & md5_ctx, & avp ->",0
413,<S2SV_ModStart> case EVP_CTRL_AEAD_SET_IVLEN : if ( arg <= 0 || arg > CHACHA_CTR_SIZE ) return 0 ; <S2SV_ModStart> case EVP_CTRL_AEAD_SET_IV_FIXED : if ( arg <= 0 || arg > CHACHA_CTR_SIZE ) return 0 ;,0
414,"<S2SV_ModStart>, 0, comm_event -> comm_size <S2SV_ModEnd> ) ; if",0
415,"<S2SV_ModStart>, sk ) ; if (! sk ) return - EINVAL",0
416,<S2SV_ModStart> MT_CPTYPE_PASSSALT ) { if ( cpkt. length > MT_PASS_SALT_MAX_LEN ) { return - 1 ; } <S2SV_ModStart> MT_CPTYPE_END_AUTH ) { if ( cpkt. length > MT_PASS_SALT_MAX_LEN ) { return - 1 ; },0
417,<S2SV_ModStart> MUTT_ABORT ) { imap_cmd_step ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; imap_cmd_step ( adata ) ; return - 1 <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ) { imap_cmd_step ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { imap_cmd_step ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { imap_cmd_step ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { imap_cmd_step ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { imap_cmd_step ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { imap_cmd_step ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { imap_cmd_step ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { imap_cmd_step ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { imap_cmd_step ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { imap_cmd_step ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) { imap_cmd_step,0
418,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
419,"<S2SV_ModStart> ) ) ; if ( <S2SV_ModStart>, 0 ) < 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModEnd> if ( strncmp",0
420,"<S2SV_ModStart> remainder, & rlen ) ; if ( ret ) return ret <S2SV_ModEnd> ; if (",0
421,"<S2SV_ModStart> ; read_userfile ( ) ; memset ( md5sum, 0, sizeof ( md5sum ) <S2SV_ModStart> = 0 ; strlcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> 82 ) ; strlcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> state ) ; memcpy <S2SV_ModEnd> ( & state <S2SV_ModStart> state, ( <S2SV_ModEnd> md5_byte_t * )",0
422,"<S2SV_ModStart> ; if ( unicode_compare_with_ASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart> { if ( unicode_compare_with_ASCIIString <S2SV_ModEnd> ( name,",0
423,<S2SV_ModStart> off } ; if ( str == NULL ) { return - 1 ; },0
424,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
425,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
426,"<S2SV_ModStart> size_t s ; s = exif_get_long ( o, EXIF_BYTE_ORDER_INTEL ) ; if ( s > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } <S2SV_ModStart> 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } <S2SV_ModEnd> tcount ++ ;",0
427,<S2SV_ModStart> bd_addr ) { if ( bd_addr == NULL ) return BT_STATUS_NULL ;,0
428,"<S2SV_ModStart> int i ; size_t avail ; size_t <S2SV_ModEnd> expect ; txid <S2SV_ModStart> 4 ) ; expect = 8 + 8 + nxip * 8 ; if ( nxip < 0 || nxip > avail || expect > avail ) goto bad_format ; xmin = pq_getmsgint64 ( buf ) ; xmax = pq_getmsgint64 ( buf ) ; if ( xmin == 0 || xmin > xmax || xmax > MAX_TXID ) goto bad_format ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; snap -> nxip = nxip ; SET_VARSIZE ( snap, TXID_SNAPSHOT_SIZE ( nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last || cur < xmin || cur >= xmax ) goto bad_format ; snap -> xip [ i ] = cur ; last = cur ; } PG_RETURN_POINTER ( snap ) ; bad_format : elog ( ERROR, ""invalid <S2SV_blank> snapshot <S2SV_blank> data"" ) ; return ( Datum ) NULL <S2SV_ModEnd> ; } <S2SV_null>",0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
430,<S2SV_ModStart> ( epoll_ ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
431,"<S2SV_ModStart>, NULL, & new_global_options. option <S2SV_ModEnd> ) ; if <S2SV_ModStart>, section_ptr, & new_service_options. option <S2SV_ModEnd> ) ; if",0
432,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_PHNUM_MIN : * ( size_t * ) val = ms -> elf_phnum_min ; return 0 ; case MAGIC_PARAM_ELF_SHNUM_MIN : * ( size_t * ) val = ms -> elf_shnum_min ; return 0 ;,0
433,<S2SV_ModStart> offset ) { struct address_space * mapping = page -> mapping ; journal_t * journal = EXT4_JOURNAL ( <S2SV_ModEnd> mapping -> host <S2SV_ModStart> -> host ) <S2SV_ModEnd> ; if (,0
434,<S2SV_ModStart> ++ ) { if ( i + 1 >= movie -> moov -> trackList -> nb_entries ) return GF_OUT_OF_MEM ; <S2SV_ModStart> + 1 ) ; if (! trak ) continue,0
435,"<S2SV_ModStart> 17 ] ; size_t <S2SV_ModEnd> plen ; md5_state_t <S2SV_ModStart> = 0 ; strlcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> password, 82, sizeof ( md5data ) <S2SV_ModStart> = '\\0' ; strlcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> password ), pass_salt, sizeof ( md5sum ) <S2SV_ModEnd> ) ; md5_init",0
436,<S2SV_ModStart> ; if ( _mibindex_max ) { int i ; for ( i = 0 ; i < _mibindex_max ; ++ i ) SNMP_FREE ( _mibindexes [ i ] ) ; _mibindex_max = 0 ; _mibindexes = NULL ; } if (,0
437,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
438,<S2SV_ModStart> ( ) ; g_hash_table_remove_all ( headers ) ;,0
439,"<S2SV_ModStart> -> y_buffer ; # if CONFIG_VP9_HIGHBITDEPTH if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { memcpy ( dst, src, src_ybc -> y_width ) ; src += src_ybc -> y_stride ; dst += dst_ybc -> y_stride ; } # endif <S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst,",0
440,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_rd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> mi_col += MI_BLOCK_SIZE, 0 <S2SV_ModStart> ) { int <S2SV_ModEnd> i ; MACROBLOCK <S2SV_ModStart> pred_mv ) ; return 0 ;",0
441,"<S2SV_ModStart>, obj_tlen ; u_int <S2SV_ModEnd> offset ; u_int <S2SV_ModStart> ) ) ; if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (too <S2SV_blank> short)"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( lmp_obj_",0
442,"<S2SV_ModStart> * mbmi, nmv_context_counts * counts, <S2SV_ModStart> [ 2 ] <S2SV_ModEnd> ) { int <S2SV_ModStart> i ) { nmv_context_counts_inc_mv ( counts, <S2SV_ModEnd> & mbmi -> <S2SV_ModStart> [ 0 ] <S2SV_ModEnd> ) ; }",0
443,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ),",0
444,"<S2SV_ModStart> ; if ( skb_out -> len < size ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; } skb_pull_rcsum ( skb_out, hdr_size ) ; memmove ( skb_out -> data - ETH_HLEN, skb_mac_header ( skb_out ), ETH_HLEN ) ; skb_set_mac_header ( skb_out, - ETH_HLEN ) ; skb_reset_network_header ( skb_out ) ; skb_reset_transport_header ( skb_out ) ; hlist_for_each_entry ( entry, chain, list ) { size = entry -> skb -> len - hdr_size ; memcpy ( skb_put ( skb_out, size ), entry -> skb -> data + hdr_size, size ) ; } free : batadv_frag_clear_chain ( chain ) ; return skb_out <S2SV_ModEnd> ; } <S2SV_null>",0
445,<S2SV_ModStart> ) return ; if (! <S2SV_ModStart> netsnmp_mibindex_load ( ) ) { SNMP_FREE ( env_var ) ; return ; } <S2SV_ModEnd> DEBUGMSGTL ( (,0
446,"<S2SV_ModStart> { fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ], O_RDWR ) <S2SV_ModStart> 1 ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_KEY ) ) <S2SV_ModStart> EV_REL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_SYN ) ) <S2SV_ModStart> x ++ ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> ]. mapped_id )",0
447,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
448,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s, <S2SV_ModStart> & 1 ) vpx_lpf_vertical_4 <S2SV_ModEnd> ( s +",0
449,"<S2SV_ModStart> krb5_error_code iakerb_alloc_context ( gss_session_t * s, <S2SV_ModStart> ; code = krb5_gss_init_session_context <S2SV_ModEnd> ( & ctx <S2SV_ModStart> & ctx -> s <S2SV_ModEnd> ) ; if",0
450,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> bitmapDC = CreateCompatibleDC",1
451,<S2SV_ModStart> ; while ( ( <S2SV_ModStart> )!= START_CODE_PREFIX ) && ( ps_stream -> u4_offset < ps_stream -> u4_max_offset ),1
452,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { ret = <S2SV_ModEnd> - EINVAL ; <S2SV_ModStart> - EINVAL ; goto out ; }",1
453,<S2SV_ModStart> ) ) { MonoClass * klass = ( MonoClass * ) imethod -> object. vtable -> klass ; <S2SV_ModStart> ) ) { MonoClass * klass = ( MonoClass * ) imethod -> object. vtable -> klass ; <S2SV_ModStart> ) ) { MonoClass * klass = ( MonoClass * ) imethod -> object. vtable -> klass ; <S2SV_ModStart> ) ) { MonoClass * klass = ( MonoClass * ) imethod -> object. vtable -> klass ; <S2SV_ModStart> ) ) { klass = ( MonoClass * ) imethod -> object. vtable -> klass ; <S2SV_ModStart> ) ) { klass = ( MonoClass * ) imethod -> object. vtable -> klass ; <S2SV_ModStart> ) ) { klass = ( MonoClass * ) imethod -> object. vtable -> klass ; <S2SV_ModStart> ) ) { klass = ( MonoClass * ) imethod -> object. vtable -> klass ; <S2SV_ModStart> ) ) { klass = ( MonoClass * ) imethod -> object. vtable -> klass ; <S2SV_ModStart> ) ) { klass = ( MonoClass * ) imethod -> object. vtable -> klass ; <S2SV_ModStart> ) ) { klass = ( MonoClass * ) imethod -> object. v,0
454,<S2SV_ModStart> ) ] ; long <S2SV_ModEnd> tmp ; if <S2SV_ModStart> count ) ) { uml_exitcode = tmp ; return count ; } <S2SV_ModEnd> tmp = simple_strtol,0
455,<S2SV_ModStart> char * last_elem = NULL <S2SV_ModStart> size_t len ; const char * l_origin = l -> l_origin ; <S2SV_ModStart> ( ( ( strncasecmp <S2SV_ModEnd> ( & name <S2SV_ModStart> ) || ( strncasecmp <S2SV_ModEnd> ( & name <S2SV_ModStart> 'O' )? l_origin <S2SV_ModEnd> : _dl_platform ),0
456,"<S2SV_ModStart> ) ; } # ifdef H264DEC_TRACE sprintf ( decInst -> str, ""H264SwDecInit# <S2SV_blank> decInst <S2SV_blank> %p <S2SV_blank> noOutputReordering <S2SV_blank> %d"", ( void * ) decInst, noOutputReordering ) ; DEC_API_TRC ( decInst -> str ) ; # endif <S2SV_ModStart> decContainer_t ) ) ; if ( pDecCont == NULL ) return ( H264SWDEC_MEMFAIL )",0
457,<S2SV_ModStart> drop ; } opt = & ( IPCB ( skb ) -> opt ) ; <S2SV_ModStart> 5 ) { <S2SV_ModEnd> return 0 ;,0
458,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
459,<S2SV_ModStart> errout ; return 1 <S2SV_ModEnd> ; } <S2SV_null>,0
460,<S2SV_ModStart> krb5_key_data * key_data = NULL <S2SV_ModStart> == NULL ) { err = ENOMEM ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { err = ENOMEM ; <S2SV_ModStart> goto cleanup ; },0
461,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
462,<S2SV_ModStart> ] ) ; if ( nByte < 0 ) { rc = SQLITE_NOMEM ; } else { <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> memcpy ( pCsr,0
463,<S2SV_ModStart> filp ) { struct sock_inode * si = <S2SV_ModEnd> SOCKET_I ( inode <S2SV_ModStart> ( inode ) ; struct sockaddr_storage sa ; struct sockaddr_storage sa_data ; si. si_family = AF_INET ; si. si_addr. s_addr = NULL ; si. si_addr. s_addr. s_addr. s_addr. s_addr. s_addr. s_addr. s_addr. s_addr. s_addr. s_addr. s_addr. s_addr. s_addr. s_addr. s_addr. s_addr. s_addr. s_addr. s_addr. s_addr. s_addr. s_addr. s_addr. s_addr. s_addr. s_addr. s_addr. s_addr. s_addr. s_addr. s_addr. s_addr. s_addr. s_addr. s_addr. s_addr. s_addr. s_addr. s_addr. s_addr. s_addr. s_addr. s_addr. s_addr. s_addr. s_addr. s_,0
464,"<S2SV_ModStart> * orelse, asdl_seq * params, <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. params = params",0
465,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> my_bool <S2SV_ModEnd> mi_sort_index ( MI_CHECK <S2SV_ModStart> char * name, my_off_t * index_pos ) { reg2 uint key ; reg1 MI_KEYDEF * keyinfo ; File new_file ; my_off_t r_locks, w_locks ; MYISAM_SHARE * share = info -> s ; MI_STATE_INFO old_state ; DBUG_ENTER ( ""mi_sort_index"" ) ; for ( key = 0, keyinfo = & share -> keyinfo [ 0 ] ; key < share -> base. keys ; key ++, keyinfo ++ ) if ( keyinfo -> key_alg == HA_KEY_ALG_RTREE ) DBUG_RETURN ( 0 ) ; fn_format ( param -> temp_filename, name, """", MI_NAME_IEXT, 2 + 4 + 32 ) ; fn_format ( param -> temp_filename, param -> temp_filename, """", INDEX_TMP_EXT, 2 + 4 ) ; if ( ( new_file = mysql_file_create ( mi_",0
466,"<S2SV_ModStart> NGHTTP2_ERR_UNSUPPORTED_PROTOCOL : return ""Unsupported <S2SV_blank> protocol"" <S2SV_ModEnd> ; case NGHTTP2_ERR_UNSUPPORTED_PROTOCOL_VERSION <S2SV_ModStart> NGHTTP2_ERR_UNSUPPORTED_PROTOCOL_VERSION : return ""Unsupported <S2SV_blank> protocol <S2SV_blank> version"" <S2SV_ModEnd> ; case NGHTTP2_ERR_UNSUPPORTED_PROTOCOL_VERSION_LIMIT <S2SV_ModStart> NGHTTP2_ERR_UNSUPPORTED_PROTOCOL_VERSION_LIMIT : return ""Unsupported <S2SV_blank> protocol <S2SV_blank> version <S2SV_blank> limit"" <S2SV_ModEnd> ; case NGHTTP2_ERR_UNSUPPORTED_PROTOCOL_VERSION_LIMIT <S2SV_ModStart> NGHTTP2_ERR_UNSUPPORTED_PROTOCOL_VERSION_LIMIT : return ""Unsupported <S2SV_blank> protocol <S2SV_blank> version <S2SV_blank> limit"" <S2SV_ModEnd> ; case NGHTTP2_ERR_UNSUPPORTED_PROTOCOL_VERSION_LIMIT <S2SV_ModStart> NGHTTP2_ERR_UNSUPPORTED_PROTOCOL_VERSION_LIMIT : return ""Unsupported <S2SV_blank> protocol <S2SV_blank> version <S2SV_blank> limit"" <S2SV_ModEnd> ; case NGHTTP2_ERR_UNSUPPORTED_PROTOCOL_VERSION_LIMIT <S2SV_ModStart> NGHTTP2_ERR_UNSUPPORTED_PROTOCOL_VERSION_LIMIT : return ""Unsupported <S2SV_blank> protocol <S2SV_blank> version <S2SV_blank> limit"" <S2SV_ModEnd> ; case NGHTTP2_ERR_UNSUPPORTED_PROTOCOL_VERSION_LIMIT",0
467,"<S2SV_ModStart> UINT error ; if (! <S2SV_ModStart>, eventId ) ||! <S2SV_ModEnd> Stream_Read_UINT32 ( s <S2SV_ModStart>, pduLength ) ) return CHANNEL_RC_DATA",0
468,"<S2SV_ModStart> ) ; } if ( pData -> mqttTimeout > - 1 ) zsocket_set_mqtttimeout ( pData -> socket, pData -> mqttTimeout ) ;",0
469,"<S2SV_ModStart> struct flowi6 fl6 ; if ( transport -> param_flags & SPP_PMTUD_ENABLE ) skb -> local_df = 1 <S2SV_ModStart> daddr ) ; <S2SV_ModEnd> return ip6_xmit ( <S2SV_ModStart>, skb, <S2SV_ModEnd> fl6, np",0
470,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
471,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
472,"<S2SV_ModStart> = 0 ; bn_t t ; bn_null ( t ) ; RLC_TRY { bn_new ( t ) ; bn_zero ( m ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, RSA_PUB ) ; * p_len = k_len - 3 - m_len ; for ( int i = 0 ; i < * p_len ; i ++ ) { bn_lsh ( m, m, 8 ) ; do { rand_bytes ( & pad, 1 ) ; bn_add_dig ( m, m, pad ) ; } bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, 0 ) ; bn_lsh ( m, m, m_len * 8 ) ; } bn_lsh ( m, m, m_len * 8 ) ; break ; case RSA_DEC : m_len = k_len - 1 ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; if ( pad!= RSA_PUB ) { result = RLC_",0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,<S2SV_ModStart> 8 ) ; <S2SV_ModEnd> psf = calloc <S2SV_ModStart> SF_PRIVATE ) ) ; if ( psf <S2SV_ModEnd> == NULL ),0
475,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fix_interp_filter ( VP9_COMMON <S2SV_ModStart> cm ) { int count [ SWITCHABLE_FILTERS ] ; int i, j, c = 0 ; for ( i = 0 ; i < SWITCHABLE_FILTERS ; ++ i ) { count [ i ] = 0 ; for ( j = 0 ; j < SWITCHABLE_FILTER_CONTEXTS ; ++ j ) count [ i ] += cm -> counts. switchable_interp [ j ] [ i ] ; c += ( count [ i ] > 0 ) ; } if ( c == 1 ) { for ( i = 0 ; i < SWITCHABLE_FILTERS ; ++ i ) { if ( count [ i ] ) { cm -> interp_filter = i ; break ; } } } } } if ( c == 1 ) { for ( i = 0 ; i < SWITCHABLE_FILTERS ; ++ i ) { if ( count [ i ] ) { cm -> interp_filter = i ; break ; } } } } return c ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
476,"<S2SV_ModStart> & cpi -> encode_frame <S2SV_ModEnd> ; VP9_COMMON * <S2SV_ModStart> mi_cols ) ; <S2SV_ModEnd> vp9_setup_src_planes ( x <S2SV_ModStart> 0, 0 <S2SV_ModEnd> ) ; vp9_setup_pre_planes <S2SV_ModStart> subsampling_y ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
477,"<S2SV_ModStart> hp ) ; if ( <S2SV_ModEnd> htc_request_check_host_hdr ( hp <S2SV_ModStart> ( hp ) <S2SV_ModEnd>!= 0 ) <S2SV_ModStart>, SLT_Error, ""Duplicated <S2SV_blank> HTTP <S2SV_blank> Host <S2SV_blank> header"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> ) ; } retval = htc_request_check_url_hdr ( hp ) ; if ( retval!= 0 ) { WSP ( sp, SLT_Error, ""Duplicated <S2SV_blank> HTTP <S2SV_blank> URL <S2SV_blank> header"" ) ; return ( retval ) ; }",0
478,"<S2SV_ModStart> EOFOp 0x07 char * magick ; Image * image ; IndexPacket index ; int opcode, operand, status ; MagickStatusType flags ; MagickSizeType number_pixels ; MemoryInfo * pixel_info ; IndexPacket index ; int opcode, operand, status ; MagickSizeType flags ; MagickSizeType number_pixels ; MemoryInfo * pixel_info ; register IndexPacket * indexes ; register MagickSizeType number_pixels_filled ; unsigned char background_color [ 256 ], plane, * pixels ; assert ( exception -> signature == MagickSignature ) ; assert ( image_info -> debug!= MagickFalse ) ( void ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image_info -> filename ) ; assert ( image -> signature == MagickSignature ) ; status = OpenBlob ( image_info, image, ReadBinaryBlobMode, exception ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> magick = ( <S2SV_ModStart> * ) magick ) ; if ( ( count!= 2 ) || ( memcmp ( magick, ""\\122\\314"", 2 )!= 0 )",0
479,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> sizeof ( tETH_HDR ),1
480,<S2SV_ModStart> = 0 ; ps_dec -> u4_first_slice_in_pic = 0 ;,0
481,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> * karg ; <S2SV_ModEnd> struct pci_dev * <S2SV_ModStart> pci_dev * pdev <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> } if ( <S2SV_ModEnd> karg -> hdr <S2SV_ModStart> hdr. iocnum <S2SV_ModEnd> < 0 ) <S2SV_ModStart> 0 ) || <S2SV_ModEnd> ioc == NULL <S2SV_ModStart> == NULL ) <S2SV_ModEnd> { printk ( <S2SV_ModStart> printk ( MYIOC_s_ERR_FMT ""%s@%d::mptctl_getiocinfo <S2SV_blank> - <S2SV_blank> "" ""Structure <S2SV_blank> size <S2SV_blank> mismatch\\n"" <S2SV_ModEnd>, __FILE__,",0
482,"<S2SV_ModStart> char * ) AcquireQuantumSize <S2SV_ModEnd> ( image -> <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
483,"<S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv",0
484,"<S2SV_ModStart> ; if ( datao + 8 > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> order = EXIF_BYTE_ORDER_INTEL ; datao += exif_get_long ( buf + datao + 8, EXIF_BYTE_ORDER_INTEL ) ; if ( <S2SV_ModStart> ; if ( <S2SV_ModEnd> datao + 2 <S2SV_ModStart> ; if ( <S2SV_ModEnd> o + 12 <S2SV_ModStart> o + 12 > o ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( <S2SV_ModEnd> o + 2 <S2SV_ModStart> o + 2 > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } s = exif_get_short ( buf + o, EXIF_BYTE_ORDER_INTEL ) ; data",0
485,"<S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large\\n"" <S2SV_ModEnd>, procName,",0
486,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> opt = service_options <S2SV_ModStart> service_options. next <S2SV_ModEnd> ; while ( <S2SV_ModStart> 0 ; } <S2SV_ModEnd> s_log ( LOG_DEBUG <S2SV_ModStart> servname ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
487,<S2SV_ModStart> void ) { if (! recovery_started ) { recovery_started = 1 ; return ; },0
488,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ;",0
489,"<S2SV_ModStart> image ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
490,<S2SV_ModStart> { WORD32 i <S2SV_ModEnd> ; WORD32 num_neg_pics <S2SV_ModStart> u4_num_st_curr_after ) ; if ( u4_num_st_curr_before < u4_num_lt_curr [ u4_num_lt_curr ] || u4_num_st_curr_after < u4_num_lt_curr [ u4_num_lt_curr ] ) { ps_mv_buf_mgr -> pv_mv_buf_mgr = ( mv_buf_mgr_t * ) ps_codec -> pv_mv_buf_mgr ; } else { ps_mv_buf_mgr -> pv_mv_buf_mgr = ( mv_buf_mgr_t * ) ps_codec -> pv_mv_buf_mgr ; },0
491,"<S2SV_ModStart>, int fmt, int indent <S2SV_ModStart> child ) { if ( indent ) len += indent ; <S2SV_ModStart> = str = print_string <S2SV_ModEnd> ( child -> <S2SV_ModStart> child -> string, indent <S2SV_ModStart> depth, fmt, indent <S2SV_ModStart> = ret = print_value <S2SV_ModEnd> ( child, <S2SV_ModStart> depth, fmt, indent <S2SV_ModStart> fail ) { if ( indent ) len += indent ; <S2SV_ModStart> + 1 ; <S2SV_ModEnd> * ptr ++ <S2SV_ModStart> = 0 ; if ( indent ) len += indent ; <S2SV_ModStart> i ) { if ( indent ) len += indent ; <S2SV_ModStart> = '\\t' ; if ( str && ret ) len += strlen ( ret ) + strlen ( str ) + 2 + ( fmt? 2 + depth : 0 ) ; else fail = 1 ; child = child -> next ; } if (! fail ) { out = ( char * ) cJSON_malloc ( len ) ; if (! out ) fail = 1 ; } if ( fail ) { for ( i = 0 ; i < numentries ; ++ i ) { if ( names [ i ] ) cJSON_free ( names [ i ] ) ; if ( entries [ i ] ) cJSON_free ( entries [ i ] ) ; } cJSON_free ( names ) ; cJSON_free ( entries )",0
492,<S2SV_ModStart> sk ) ; if ( writable ) { unix_state_lock ( sk ) ; other = unix_peer ( sk ) ; if ( other && unix_peer ( <S2SV_ModEnd> other )!= <S2SV_ModStart> = 0 ; unix_state_unlock ( sk ) ; } <S2SV_ModEnd> } if (,0
493,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; outpos += strlen ( outputbuffer ) ;",0
494,<S2SV_ModStart> * minor_status = GSS_S_DEFECTIVE_TOKEN ; return GSS_S_DEFECTIVE_TOKEN ; } if ( header -> buffer. length < token_wrapper_len + 14 ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } ptr = ( unsigned char * ) header -> buffer. value + token_wrapper_len ; signalg = ptr [ 0 ] ; signalg |= ptr [ 1 ] << 8 ; sealalg = ptr [ 2 ] ; sealalg |= ptr [ 3 ] << 8 ; if ( ptr [ 4 ]!= 0xFF || ptr [ 5 ]!= 0xFF ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } if ( toktype!= KG_TOK_WRAP_MSG && trailer -> buffer. length < trailer -> buffer. length ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < trailer -> buffer. length ) { * minor_status = <S2SV_ModStart> ) KRB5_BAD_MSIZE ; return GSS_S_DEF,0
495,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vp9_ref_frame_t * ) ; YV12_BUFFER_CONFIG * fb <S2SV_ModStart> NULL ) { <S2SV_ModEnd> vp9_get_reference_enc ( ctx",0
496,<S2SV_ModStart> plug ) ; <S2SV_ModEnd> put_ioctx ( ctx,0
497,"<S2SV_ModStart> * name, my_bool <S2SV_ModEnd> rep_quick ) { <S2SV_ModStart> ) ) || init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> read_buffer_length, WRITE_CACHE, share -> pack. header_length, 1, MYF ( MY_WME ) ) ||",0
498,"<S2SV_ModStart> s } ; <S2SV_ModEnd> uECC_word_t carry ; <S2SV_ModStart> curve ) ; if (! <S2SV_ModStart>, curve ) ) { return 0 ; } <S2SV_ModEnd> if ( uECC_vli_isZero",0
499,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|dao-truncated]"" <S2SV_ModEnd> ) ) ;",0
500,<S2SV_ModStart> ; } else if ( pool -> free_total > 0 ) <S2SV_ModStart> ) ; } pool -> free_total = 0 ;,0
501,"<S2SV_ModStart> { while ( cp && <S2SV_ModStart> ] ) { <S2SV_ModEnd> int cval = <S2SV_ModStart> = 0 ; if ( * cp == '\\\\' && cp [ 1 ] && index ( ""mM"", cp [ 1 ] ) && cp [ 2 ] ) { meta = 1 ; cp += 2 ; } if ( * cp == '\\\\' && cp [ 1 ] && index ( ""0123456789xXoO"", cp [ 1 ] ) && cp [ 2 ] ) { NEARDATA const char hex [ ] = ""00112233445566778899aAbBcCdDeEfF"" ; const char * dp ; int dcount = 0 ; if ( * cp == 'x' || * cp == 'X' ) for ( ++ cp ; * cp && ( dp = index ( hex, * cp ) ) && ( dcount ++ < 2 ) ; cp ++ ) cval = ( cval * 16 ) + ( ( int ) ( dp - hex ) / 2 ) ; else if ( * cp == 'o' || * cp == 'O' ) for ( ++ cp ; * cp && ( index ( ""01234567"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) c",0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
503,"<S2SV_ModStart>, * pixg <S2SV_ModEnd> ; PIXCMAP * <S2SV_ModStart> == NULL ) { pixDestroy ( & pixc ) ; <S2SV_ModStart> NULL ) ; }",0
504,<S2SV_ModStart>. vf = vpx_mse16x16 <S2SV_ModEnd> ; xd ->,1
505,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> overhead = 16 <S2SV_ModStart> + 1 ; size_t <S2SV_ModEnd> size = overhead,1
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NEGO_STATE_FAIL ; goto error <S2SV_ModEnd> ; } Stream_Read_UINT8 <S2SV_ModStart> = NEGO_STATE_FINAL ; return ; error : return ;,0
507,"<S2SV_ModStart> INT_MAX ; int bits_per_mb_at_this_q <S2SV_ModEnd> ; const double <S2SV_ModStart> i, target_bits_per_mb <S2SV_ModEnd> ; target_bits_per_mb = <S2SV_ModStart> ; do { bits_per_mb_at_this_q = <S2SV_ModEnd> vp9_rc_bits_per_mb ( cm <S2SV_ModStart> cm -> frame_type <S2SV_ModEnd>, correction_factor ) <S2SV_ModStart> active_worst_quality ) ; if ( bits_per_mb_at_this_q <= target_bits_per_mb ) { if ( ( target_bits_per_mb - bits_per_mb_at_this_q ) <= last_error ) q = i ; else q = i - 1 ; break ; } else { last_error = bits_per_mb_at_this_q - target_bits_per_mb ; } } while ( ++ i <= active_worst_quality ) ;",0
508,<S2SV_ModStart> TJA1101_CONFIG1_MII_MODE ; value &= ~ TJA1101_CONFIG1_MII_MODE_RMII_25MHZ ; value <S2SV_ModStart> value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; value =,0
509,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
510,"<S2SV_ModStart> int dst_stride, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart>, left_col, 128 <S2SV_ModEnd> ) ; DECLARE_ALIGNED_ARRAY <S2SV_ModStart>, above_data, 128 <S2SV_ModEnd> + 16 ) <S2SV_ModStart> + y ; memset <S2SV_ModEnd> ( left_col, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( right_col, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( right_col, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( right_col, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ;",0
511,"<S2SV_ModStart> ++ ; } else if ( pattern [ end ] == \'""\' ) { end ++ ; while ( ( pattern [ end ]!= 0 ) && ( pattern [ end ]!= \'""\' ) ) end ++ ; }",0
512,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_mmap_lock ) ;,0
513,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> show_frame ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> KEY_FRAME ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; } vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
514,"<S2SV_ModStart> }, { ""no-graph"", no_argument, 0, 'p' }, { <S2SV_ModStart> ; if ( optind > 0 && <S2SV_ModStart> ; if ( optind > 0 && <S2SV_ModStart> ; if ( optind > 0 && <S2SV_ModStart> ; if ( optind > 0 && <S2SV_ModStart> ; if ( optind > 0 && <S2SV_ModStart> ; if ( optind > 0 && <S2SV_ModStart> ; if ( optind > 0 && <S2SV_ModStart> ; if ( optind > 0 && <S2SV_ModStart> ; if ( optind > 0 && <S2SV_ModStart> ; if ( optind > 0 && <S2SV_ModStart> ; if ( optind > 0 && <S2SV_ModStart> ; if ( optind > 0 && <S2SV_ModStart> ; if ( optind > 0 && <S2SV_ModStart> ; if ( optind > 0 && <S2SV_ModStart> ; if ( optind > 0 && <S2SV_ModStart> ; if ( optind > 0 && <S2SV_ModStart> ; if ( optind > 0 && <S2SV_ModStart> ; if ( optind > 0 && <S2SV_ModStart> ; if ( optind > 0 && <S2SV_ModStart> ; if ( optind > 0 && <S2SV_ModStart> ; if ( optind > 0 && <S2SV_ModStart> ; if ( optind > 0 && <S2SV_ModStart> ; if ( optind > 0 && <S2SV_ModStart> ; if ( optind > 0 && <S2SV_ModStart> ; if ( optind > 0 &&",0
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { q = osStrchr <S2SV_ModEnd> ( p +,1
516,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
517,<S2SV_ModStart> KEY_FRAME ) { memcpy <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd ->,1
518,"<S2SV_ModStart> error_t error ; int16_t <S2SV_ModEnd> n ; uint32_t <S2SV_ModStart> ( interface, ENC624J600_ESTAT <S2SV_ModEnd> ) & ESTAT_PKTCNT <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( n, ENC624J600_MAX_FRAME_SIZE <S2SV_ModEnd> ) ; enc624j600ReadBuffer <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL <S2SV_ModEnd>, ENC624J600_RX_BUFFER_STOP ) <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_ECON1 <S2SV_ModEnd>, ENC624J600_ECON1_STOP ) <S2SV_ModStart> ( interface, ENC624J600_ECON1 <S2SV_ModEnd>, ENC624J600_E",0
519,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv, VALUE klass ) { VALUE content ; xmlSchemaPtr schema ; xmlSchemaParserCtxtPtr ctx ; VALUE rb_schema ; VALUE errors ; xmlErrorPtr error = xmlGetLastError ( ) ; if ( error ) Nokogiri_error_raise ( NULL, error ) ; ctx = xmlSchemaNewMemParserCtxt ( ( const char * ) StringValuePtr ( content ), ( int ) RSTRING_LEN ( content ) ) ; rb_iv_set ( rb_schema, ""@content"", content ) ; errors = rb_ary_new ( ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; # ifdef HAVE_XMLSCHEMASETPARSERSTRUCTUREDERRORS xmlSchemaSetParserStructuredErrors ( ctx, Nokogiri_error_array_pusher, ( void * ) errors ) ; # endif schema = xmlSchemaParse ( ctx ) ; xmlSetStructuredErrorFunc ( NULL, NULL ) ; xmlSchemaFreeParserCtxt ( ctx ) ; if ( NULL == schema ) { xmlErrorPtr error = xmlGetLastError ( ) ; if ( error ) Nokog",0
520,"<S2SV_ModStart> ) ; } if ( strlen ( config_arg ) > CONF_MAX_OPTION_LEN ) { s_log ( LOG_ERR, ""Maximum <S2SV_blank> length <S2SV_blank> of <S2SV_blank> option <S2SV_blank> string <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", CONF_MAX_OPTION_LEN ) ; print_syntax ( ) ; return 1 ; }",0
521,<S2SV_ModStart> 2 ] ; if ( state -> y >= state -> ysize ) return - 1 ; <S2SV_ModStart> 2 ] ; if ( state -> y >= state -> ysize ) return - 1 ;,0
522,<S2SV_ModStart> err = - <S2SV_ModEnd> EALREADY ; if,0
523,<S2SV_ModStart> POLL_IN ) ; <S2SV_ModEnd> perf_event_wakeup ( handle,0
524,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
525,"<S2SV_ModStart> EPROTONOSUPPORT ) { if ( as_console ) { sleep ( 2 ) ; } <S2SV_ModStart> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" <S2SV_ModEnd> ) ; }",0
526,"<S2SV_ModStart> ( interface, KSZ8851_RXFHSR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXMR | KSZ8851_RXFTL | KSZ8851_RXRF | KSZ8851_RXCE <S2SV_ModEnd> ) ) == <S2SV_ModStart> ( interface, KSZ8851_RXFDPR, KSZ8851_RXFDPR_RXFPAI <S2SV_ModEnd> ) ; ksz8851ReadFifo <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ancillary <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_RRXEF <S2SV_ModEnd> ) ; return",0
527,"<S2SV_ModStart> ast_for_funcdef_impl ( struct compiler * compiler, const node * n, asdl_seq * decorator_seq, int is_async ) { identifier name ; arguments_ty args ; asdl_seq * body ; expr_ty returns = NULL ; int name_i = 1 ; node * tc ; string type_comment = NULL ; if ( c -> c_feature_version < 5 ) { ast_error ( c, n, ""Async <S2SV_blank> functions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.5 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } REQ ( n, funcdef ) ; name = NEW_IDENTIFIER ( CHILD ( n, name_i ) ) ; if (! name ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i ), 0 ) ) return NULL ; args = ast_for_arguments ( c, CHILD ( n, name_i + 1 ) ) ; if (! args ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 2 ) ) == TYPE_COMMENT ) { type_comment = NEW_TYPE_COMMENT ( CHILD ( n,",0
528,"<S2SV_ModStart> ( mm, 0xA00000 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( pgd, 0xA00000 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( pud, 0xA00000 <S2SV_ModEnd> ) ; split_huge_page_pmd <S2SV_ModStart>, pmd, 0xA00000 <S2SV_ModEnd>, & ptl <S2SV_ModStart> : flush_tlb ( ) ; mm_dec_nr_pmds ( mm",0
529,"<S2SV_ModStart> token_len ) { if ( 0!= ( * packet_data_pptr + dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; }",0
530,"<S2SV_ModStart> ) ) { if (! is_valid_test_name ( test_name ) ) { printf ( ""Error: <S2SV_blank> invalid <S2SV_blank> test <S2SV_blank> name.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; } <S2SV_ModStart> ) ) { if (! is_valid_test_name ( test_name ) ) { <S2SV_ModStart> ) ) { if (! is_valid_test_name ( test_name ) ) { <S2SV_ModStart> ) ) { if (! is_valid_test_name ( test_name ) ) { <S2SV_ModStart> ) ) { if (! is_valid_test_name ( test_name ) ) { <S2SV_ModStart> ) ) { if (! is_valid_test_name ( test_name ) ) { <S2SV_ModStart> ) ) { if (! is_valid_test_name ( test_name ) ) { <S2SV_ModStart> ) ) { if (! is_valid_test_name ( test_name ) ) { <S2SV_ModStart> ) ) { if (! is_valid_test_name ( test_name ) ) { <S2SV_ModStart> ) ) { if (! is_valid_test_name ( test_name ) ) { <S2SV_ModStart> ) ) { if (! is_valid_test",0
531,"<S2SV_ModStart> 0 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif <S2SV_ModStart> row ++ ) <S2SV_ModEnd> for ( col <S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD if ( ( RAW ( row, col ) = pred [ col & 1 ] ) > 4098 && col < width ) derror ( ) ; # else <S2SV_ModStart> ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
532,"<S2SV_ModStart> ; if (! nl ) { param -> flags |= DM_BUFFER_FULL_FLAG ; goto out ; } param -> data_size = param -> data_start + needed ; nl -> dev = 0 ; for ( i = 0 ; i < NUM_BUCKETS ; i ++ ) { list_for_each_entry ( hc, _name_buckets + i, name_list ) { if ( old_nl ) old_nl -> next = ( uint32_t ) ( ( void * ) old_nl - ( void * ) orig_nl ) ; disk = dm_disk ( hc -> md ) ; nl -> dev = huge_encode_dev ( disk_devt ( disk ) ) ; nl -> next = 0 ; strcpy ( nl -> name, hc -> name ) ; old_nl = nl ; event_nr = align_ptr ( hc -> name + 1 ) ; * event_nr = dm_get_event_nr ( hc -> md ) ; nl = align_ptr ( event_nr + 1 ) ; } } BUG_ON ( ( char * ) nl - ( char * ) orig_nl!= needed ) ; out : up_write ( & _hash",0
533,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
534,<S2SV_ModStart> ( bfqq ) bfq_idle_slice_timer <S2SV_ModEnd> ( bfqq ),0
535,<S2SV_ModStart> ; length += sizeof ( PRIMARY_DRAWING_ORDER_FIELD ) <S2SV_ModEnd> ; length +=,0
536,<S2SV_ModStart> d_inode ) ; if ( newdentry -> d_inode -> i_nlink == 0 && newdentry -> d_inode -> i_nlink == 1 ) { err = - EBUSY ; goto out ; },0
537,"<S2SV_ModStart> int plane ; vp9_foreach_transformed_block_in_all_plans <S2SV_ModEnd> ( xd,",0
538,"<S2SV_ModStart> * cpi, TileDataEnc * tile_data <S2SV_ModEnd>, int mi_row <S2SV_ModStart> -> e_mbd ; TileInfo * const tile_info = & tile_data -> tile_info ; <S2SV_ModStart> ( cpi, tile_data <S2SV_ModEnd>, mi_row, <S2SV_ModStart> ( cpi, tile_data <S2SV_ModEnd>, mi_row, <S2SV_ModStart> ( cpi, tile_data <S2SV_ModEnd>, mi_row,",0
539,"<S2SV_ModStart> = NULL ; if ( <S2SV_ModEnd> superblockRead ( & <S2SV_ModStart>. superblock )!= 1 ) { hrtf = getHrtf ( & reader, err ) ; } else <S2SV_ModEnd> { hrtf =",0
540,"<S2SV_ModStart> -> ranges = calloc ( 1, <S2SV_ModEnd> sizeof ( MappedRange",0
541,"<S2SV_ModStart> ; if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_ALTR_FRAME ; vp8_use_as_reference ( ctx -> cpi, ref ) ; } if (",0
542,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
543,<S2SV_ModStart>! head ) <S2SV_ModEnd> return - EINVAL <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
544,"<S2SV_ModStart> * pptr, u_int <S2SV_ModEnd> len ) { <S2SV_ModStart> len ) { u_int advance ; u_int tlen ; const u_char * tptr ; char buf [ MAXHOSTNAMELEN + 100 ] ; int as_size ; tptr = pptr ; tlen = len ; switch ( atype ) { case BGPTYPE_AS4_PATH : if ( len % 2 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } ND_TCHECK ( * tptr ) ; ND_PRINT ( ( ndo, ""%s"", tok2str ( bgp_as4_path_values, ""?"", tptr [ 0 ] ) ) ) ; break ; case BGPTYPE_AS_PATH : if ( len % 2 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } if (! len ) { ND_PRINT ( ( ndo, ""empty"" ) ) ; break ; } as_size = bgp_attr_get_as_size ( ndo, atype, pptr, len ) ; while ( tptr < pptr + len ) { ND_T",0
545,"<S2SV_ModStart> ( res, ""Content-Type: <S2SV_blank> text/html; <S2SV_blank> charset=utf-8"" <S2SV_ModEnd>, ""utf-8"" ) <S2SV_ModStart> ( res, ""Content-Length: <S2SV_blank> %d"" <S2SV_ModEnd>, strlen ( <S2SV_ModStart> ( res, ""Content-Length: <S2SV_blank> %d"" <S2SV_ModEnd>, strlen ( <S2SV_ModStart> ( res, ""Content-Length: <S2SV_blank> %d"" <S2SV_ModEnd>, strlen ( <S2SV_ModStart> ( res, ""Content-Type: <S2SV_blank> text/html; <S2SV_blank> charset=utf-8"" <S2SV_ModEnd>, strlen ( <S2SV_ModStart> ( res, ""Content-Length: <S2SV_blank> %d"" <S2SV_ModEnd>, strlen ( <S2SV_ModStart> ( res, ""Content-Type: <S2SV_blank> text/html; <S2SV_blank> charset=utf-8"" <S2SV_ModEnd>, strlen ( <S2SV_ModStart> ( res, ""Content-Length: <S2SV_blank> %d"" <S2SV_ModEnd>, strlen ( <S2SV_ModStart> ( res, ""Content-Length: <S2SV_blank> %d"" <S2SV_ModEnd>, strlen ( <S2SV_ModStart> ( res, ""Content-Length: <S2SV_blank> %d"" <S2SV_ModEnd>, strlen ( <S2SV_ModStart> ( res, ""Content-Length: <S2SV_blank> %d"" <S2SV_ModEnd>, strlen ( <S2SV_ModStart> ( res, ""Content-Length: <S2SV_blank> %d"" <S2SV_ModEnd>, strlen ( <S2SV_ModStart> ( res, ""Content-Type: <S2SV_blank> text/html; <S2SV_blank> charset=utf-8"" <S2SV_ModEnd>",0
546,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
547,"<S2SV_ModStart> ) ) ; if ( strlen ( constr1 ) > sizeof ( constr2 ) ) { fprintf ( stderr, ""Error: <S2SV_blank> %s\\n"", constr1 ) ; exit ( EXIT_FAILURE ) ; } <S2SV_ModStart> ) ) ; if ( strlen ( constr2 ) > sizeof ( constr1 ) ) { fprintf ( stderr, ""Error: <S2SV_blank> %s\\n"", constr2 ) ; exit ( EXIT_FAILURE ) ; }",0
548,"<S2SV_ModStart> iad_num ++ ; if ( iad_num > USB_MAXINTERFACES ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, nintf_orig, USB_MAXINTERFACES ) ; nintf = USB_MAXINTERFACES ; }",0
549,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
550,<S2SV_ModStart> ; distortion = vpx_variance16x16 <S2SV_ModEnd> ( * (,1
551,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_ECON2_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR0 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR0 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd>,",0
552,<S2SV_ModStart> * start ; <S2SV_ModEnd> start = ( <S2SV_ModStart> header ) + strlen ( ( char * ) psf -> header ) <S2SV_ModEnd> ; maxlen = <S2SV_ModStart> ; maxlen = strlen ( ( char * ) psf -> header ) - strlen ( ( char * ) psf -> header ) <S2SV_ModEnd> ; va_start ( <S2SV_ModStart> = 0 ; <S2SV_ModEnd> return ; },0
553,<S2SV_ModStart> -> alg_priv ) { <S2SV_ModStart> alg_priv ) ; ctx -> priv -> alg_priv = NULL ; },0
554,<S2SV_ModStart> { sf -> <S2SV_ModEnd> recode_loop = ( <S2SV_ModStart> ; sf -> <S2SV_ModEnd> less_rectangular_check = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> use_rd_breakout = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> auto_mv_step_size = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> subpel_iters_per_step = 1 <S2SV_ModStart> = INTRA_DC_H_V ; <S2SV_ModEnd> } if ( <S2SV_ModStart> { sf -> <S2SV_ModEnd> use_rd_breakout = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> recode_loop = ALLOW_RECODE_KFARFGF <S2SV_ModStart> = 1 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
555,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
556,<S2SV_ModStart> inuse + ( ( <S2SV_ModStart> 2 * EXTRA_STACK ) % LUAI_MAXSTACK,0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,"<S2SV_ModStart>, * s <S2SV_ModEnd> ; int quote <S2SV_ModStart> errstr ) { <S2SV_ModEnd> char buf [ <S2SV_ModStart> 128 ] ; if (! _PyUnicode_AsString ( errstr ) ) { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } Py_DECREF ( errstr ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" <S2SV_ModEnd> ) ; }",0
559,"<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> ) break ; svc_ctx -> spatial_layers = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> scale_factors = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> quantizers = 0 ; <S2SV_ModStart> ) break ; svc_ctx -> quantizers_keyframe = 0 ; } else if ( strcmp ( ""quantizers-keyframe"", option_name ) == 0 ) { res = parse_quantizer_values ( svc_ctx, option_value, 0 ) ; if ( res!= VPX_CODEC_OK ) break ; <S2SV_ModStart> ) break ; <S2SV_ModEnd> } else if <S2SV_ModStart> ) break ; svc_ctx -> spatial_layers = 0 ; } else if ( strcmp ( ""layers"", option_name ) == 0 ) { res = set_option_layers ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; svc_ctx -> spatial_layers = atoi ( option_value ) ; } else if ( res == VPX_CODEC_OK ) { svc_log ( svc_ctx, SVC_LOG_ERROR, ""option <S2SV_blank> missing",0
560,<S2SV_ModStart> ) ; } <S2SV_ModEnd> mb_index = 0,0
561,<S2SV_ModStart> self ) { size_t <S2SV_ModEnd> i ; PyObject,1
562,,1
563,"<S2SV_ModStart> ( dbh, mysql_error_string <S2SV_ModEnd> ( imp_dbh ->",0
564,<S2SV_ModStart> ) || ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) ) <S2SV_ModStart> ( need_close || TEMP_FAILURE_RETRY ( <S2SV_ModStart> & size ) ) <S2SV_ModEnd> ) cleanup_rfc_slot (,0
565,<S2SV_ModStart> struct ieee_802_11_phdr phdr <S2SV_ModEnd> ; mpdu_count = <S2SV_ModStart> ; if ( mpdu_count > 0 &&,0
566,<S2SV_ModStart> ; sh = sds_malloc <S2SV_ModEnd> ( hdrlen +,0
567,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> BYTE a_val ; <S2SV_ModEnd> for ( y <S2SV_ModStart> -> ColorLossLevel ; if ( y > context -> height ) return FALSE ; <S2SV_ModStart> ; } } return TRUE ;,0
568,<S2SV_ModStart> > nr_parens ) { ret = - EINVAL ; goto out_free ; } <S2SV_ModEnd> * ( ++,1
569,<S2SV_ModStart> ) { const RATE_CONTROL_EXT <S2SV_ModEnd> * rc = <S2SV_ModStart> target = ( <S2SV_ModEnd> rc -> frames_since_key <S2SV_ModStart> rc -> frames_since_key > <S2SV_ModEnd> cpi -> output_framerate <S2SV_ModStart> cpi -> output_framerate? rc -> frames_since_key : <S2SV_ModEnd> rc -> frames_since_key <S2SV_ModStart> rc -> frames_since_key <S2SV_ModEnd> ; } target,0
570,"<S2SV_ModStart> TX_MODE read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r )",1
571,"<S2SV_ModStart> : # line 98 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> } # line 1044 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 98 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 98 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 98 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 99 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 100 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 102 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.",0
572,<S2SV_ModStart> args -> xd <S2SV_ModEnd> ; uint8_t token_cache <S2SV_ModStart> plane_type ; const MACROBLOCKD_EXT <S2SV_ModEnd> * qcoeff = <S2SV_ModStart> = cpi -> fc <S2SV_ModEnd>. coef_probs [ <S2SV_ModStart> = cpi -> counts <S2SV_ModEnd>. coef_probs [ <S2SV_ModStart> = cpi -> counts <S2SV_ModEnd>. eob_branch [ <S2SV_ModStart> = cpi -> counts <S2SV_ModEnd>. eob_branch [,0
573,<S2SV_ModStart> pSelect -> pSrc ; assert ( pWalker -> pParse -> db -> mallocFailed ),0
574,<S2SV_ModStart> ; serv = svc_create_pooled <S2SV_ModEnd> ( & nfs4_callback_program,1
575,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
576,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
577,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
578,"<S2SV_ModStart> { do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> s, 0 )",0
579,"<S2SV_ModStart> ( xIter = xml_first_attr <S2SV_ModEnd> ( xml ) <S2SV_ModStart> -> name ; if ( strcmp ( prop_name, XML_ATTR_ID ) == 0 ) { continue ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else { char * path = xml_get_path ( xml ) ; crm_trace ( ""Cannot <S2SV_blank> add <S2SV_blank> new <S2SV_blank> node <S2SV_blank> %s <S2SV_blank> at <S2SV_blank> %s"", crm_element_name ( xml ), path ) ; if ( xml!= xmlDocGetRootElement ( xml -> doc ) ) { xmlUnlinkNode ( xml ) ; xmlFreeNode ( xml ) ; } free ( path ) ; return ; } } else { <S2SV_ModStart> ; } } <S2SV_ModEnd> while ( cIter",0
580,<S2SV_ModStart> <S2SV_null> <S2SV_null> static SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> NULL ; return <S2SV_ModEnd> svc_ctx -> internal,0
581,<S2SV_ModStart> ptr ) ; MAKE_STD_ZVAL ( zdata_ptr ) ; <S2SV_ModStart> ptr ) ; MAKE_STD_ZVAL ( zdata_ptr ) ; <S2SV_ModStart> ptr ) ; MAKE_STD_ZVAL ( zdata_ptr ) ; <S2SV_ModStart> ptr ) ; MAKE_STD_ZVAL ( zdata_ptr ) ; <S2SV_ModStart> ptr ) ; MAKE_STD_ZVAL ( zdata_ptr ) ; <S2SV_ModStart> ptr ) ; MAKE_STD_ZVAL ( zdata_ptr ) ; <S2SV_ModStart> ptr ) ; MAKE_STD_ZVAL ( zdata_ptr ) ; <S2SV_ModStart> ptr ) ; MAKE_STD_ZVAL ( zdata_ptr ) ; <S2SV_ModStart> ptr ) ; MAKE_STD_ZVAL ( zdata_ptr ) ; <S2SV_ModStart> ptr ) ; MAKE_STD_ZVAL ( zdata_ptr ) ; <S2SV_ModStart> ptr ) ; MAKE_STD_ZVAL ( zdata_ptr ) ; <S2SV_ModStart> ptr ) ; MAKE_STD_ZVAL ( zdata_ptr ) ; <S2SV_ModStart> ptr ) ; MAKE_STD_ZVAL ( zdata_ptr ) ;,0
582,<S2SV_ModStart> only_420 ) { <S2SV_ModEnd> int ret ; <S2SV_ModStart> vpx_bps = 12 <S2SV_ModEnd> ; _y4m -> <S2SV_ModStart> = VPX_IMG_FMT_I420 ; <S2SV_ModEnd> return 0 ;,0
583,"<S2SV_ModStart> buf ; { wizkit_addinv <S2SV_ModEnd> ( buf, <S2SV_ModStart> ( buf, & zeroobj <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
584,<S2SV_ModStart> ( ) { <S2SV_ModEnd> if ( read_xattrs_from_disk <S2SV_ModStart> == 0 ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; <S2SV_ModStart> return FALSE ; } <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; <S2SV_ModStart> return FALSE ; } <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; <S2SV_ModStart> return FALSE ; } <S2SV_ModStart> == FALSE ) { sBlk. s. xattr_id_table_start = SQUASHFS_INVALID_BLK ; <S2SV_ModStart> return FALSE ; },0
585,"<S2SV_ModStart> rule * rule, u_int flags <S2SV_ModStart> count = 0 ; env -> flags = flags <S2SV_ModStart> ; } } if ( flags & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ]!= NULL ; i ++ ) { struct envnode * node ; const char * e, * eq ; size_t len ; char keybuf [ 1024 ] ; e = strchr ( e, '=' ) ; if ( ( eq = strchr ( e, '=' ) ) == NULL || eq == e ) continue ; memcpy ( keybuf, e + 1, len ) ; node = createnode ( keybuf, eq + 1 ) ; if ( RB_INSERT ( envtree, & env -> root, node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } }",0
586,"<S2SV_ModStart> -> seg ; vpx_memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> mi_cols ) ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ; } } vpx_memset ( cpi -> segmentation_map, 0, cm -> mi_rows * cm -> mi_cols ) ; vpx_memset ( cpi -> complexity_map, 0, cm -> mi_rows * cm -> mi_cols ) ; vpx_memset ( cpi -> segmentation_map, 0, cm -> mi_rows * cm -> mi_cols ) ;",0
587,"<S2SV_ModStart> = make_type ( ""module"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""interactive"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart>, mod_type, Interactive_fields, 1 ) ; if (! Interactive_type ) return 0 ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; Suite_type = make_type ( ""suite"", mod_type, Suite_fields, 1 ) ; if (! Suite_type ) return 0 ; stmt_type = make_type ( ""stmt"", & AST_type, NULL, 0 ) ; if (! stmt_type ) return 0 ; if (! add_attributes ( stmt_type, stmt_attributes, 4 ) ) return 0 ; FunctionDef_type = make_type ( ""FunctionDef"", stmt_type, FunctionDef_fields, 5 ) ; if (! FunctionDef_type ) return 0 ; AsyncFunctionDef_type = make_type ( ""AsyncFunctionDef"", stmt_type, AsyncFunctionDef_fields, 5 ) ; if (! AsyncFunctionDef_type ) return 0",0
588,<S2SV_ModStart> } logfile_fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> S_IWGRP | S_IROTH ) <S2SV_ModStart> return ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart> 16 ) ; ),0
589,<S2SV_ModStart> ; } # else ( void ) cpi ; #,1
590,"<S2SV_ModStart> cinput ) { <S2SV_ModEnd> char * s <S2SV_ModStart>, * StartClean <S2SV_ModEnd> ; SetDefaults ( <S2SV_ModStart> t ++ ; sprintf ( outputbuffer <S2SV_ModEnd>, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"", <S2SV_ModStart> = outputbuffer ; fprintf ( outfile <S2SV_ModEnd>, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"", <S2SV_ModStart> = 1 ; sprintf ( outputbuffer <S2SV_ModEnd>, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", <S2SV_ModStart> SUBVERSION ) ; <S2SV_ModEnd> return ( 0 <S2SV_ModStart> ) ) { <S2SV_ModEnd> ReadArray ( t <S2SV_ModStart>, & num2 <S2SV_ModEnd> ) ; if <S2SV_ModStart> == 0 ) { fprintf ( stderr, ""%s: <S2SV_blank> Command <S2SV_blank> %s <S2SV_blank> should <S2SV_blank> have <S2SV_blank> no <S2SV_blank> arguments\\n"", axohelp, nameobject ) ; return ( - 1 ) ; } if ( num1 - 1!= 0 ) { fprintf ( stderr, ""%s: <S2SV_blank> Command <S2SV_blank> %s <S2SV_blank> should <S2SV_blank> have <S2SV_blank> no <S2SV_blank> arguments\\n"", axohelp, nameobject ) ; return ( - 1 ) ; } if ( num2 - 1!= 0 ) { fprintf (",0
591,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lower, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { int res ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { lower = NULL ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_upper, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { int res ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { upper = NULL ; } if ( lookup_attr_id ( obj, & PyId_step, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { step = NULL ; } * out = Slice ( lower, upper,",0
592,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
593,"<S2SV_ModStart> extack ) ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; return - EOPNOTSUPP ; } <S2SV_ModEnd> tos_off = proto <S2SV_ModStart> ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; return <S2SV_ModEnd> - ENOMEM ; <S2SV_ModStart> - ENOMEM ; } list_for_each_entry ( iter, & alink -> dscp_map, list ) { u32 cmask ; if ( iter -> handle == knode -> handle ) { match = iter ; continue ; } cmask = iter -> mask & mask ; if ( ( iter -> val & cmask ) == ( val & cmask ) && iter -> band!= knode -> res -> classid ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; return - EOPNOTSUPP ; <S2SV_ModStart> knode ) ; kfree ( match ) ;",0
594,<S2SV_ModStart> ) ; } if ( stream -> config. cfg. g_pass!= VPX_RC_ONE_PASS ) { <S2SV_ModStart> : VPX_RC_ONE_PASS ; } <S2SV_ModStart> ( pass ) { <S2SV_ModStart> stats ) ; },0
595,<S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( exec_args,0
596,<S2SV_ModStart> data_end ) { const <S2SV_ModStart> end = NULL <S2SV_ModEnd> ; assert ( <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> aligned_cols ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> aligned_cols ) ; memset <S2SV_ModEnd> ( cm ->,0
597,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> * vp9_decoder_create ( <S2SV_ModEnd> VP9D_CONFIG * oxcf <S2SV_ModStart> ovcf ) { VP9Decoder * const pbi = vpx_memalign ( 32, sizeof ( * pbi ) ) ; VP9_COMMON * const cm = pbi? & pbi -> common : NULL ; if (! cm ) return NULL ; vp9_zero ( * pbi ) ; if ( setjmp ( cm -> error. jmp ) ) { cm -> error. setjmp = 0 ; vp9_decoder_remove ( pbi ) ; return NULL ; } cm -> error. setjmp = 1 ; vpx_memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_video_frame = 0 ; pbi -> oxcf = * oxcf ; pbi -> ready_for_new_data = 1 ; pbi -> decoded_key_frame = 0 ; vpx_init_dequantizer ( cm ) ; vp9_loop_filter_init",0
598,"<S2SV_ModStart> GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf <S2SV_blank> [%s]\\n"", GF_ISOM_BOX_TYPE_STR <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_UNKNOWN <S2SV_ModEnd> ) ; }",0
599,<S2SV_ModStart> req ) { <S2SV_ModEnd> struct inet_request_sock * <S2SV_ModStart> -> opt ; <S2SV_ModEnd> cipso_v4_delopt ( &,0
600,"<S2SV_ModStart> tokens, const vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> do { const vpx_tree_index <S2SV_ModEnd> j = tree",1
601,"<S2SV_ModStart> ( img ) { <S2SV_ModStart> img ) ; if ( res!= VPX_CODEC_OK ) { ctx -> base. err_detail = ""Invalid <S2SV_blank> image."" ; return res ; } } <S2SV_ModStart> VPX_CODEC_INVALID_PARAM ; } res = validate_img ( ctx, img ) ; pick_quickcompress_mode ( ctx, duration, deadline ) ; vpx_codec_pkt_list_init ( & ctx -> pkt_list ) ; if ( ( ( flags & VP8_EFLAG_NO_UPD_GF ) && ( flags & VP8_EFLAG_FORCE_GF ) ) || ( ( flags & VP8_EFLAG_NO_UPD_ARF ) && ( flags & VP8_EFLAG_FORCE_ARF ) ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; }",0
602,"<S2SV_ModStart> { ret = get_tag_ext <S2SV_ModEnd> ( asn1, <S2SV_ModStart>, & len, & t",0
603,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> in ) { memset ( s, 0, 16 ) ; memset ( x, 0, 16 ) ; memset ( u, 0, 32 ) ; memset ( v, 0, 32 ) ; memset ( s, 0, 16 ) ; memset ( s + 1, 0, 16 ) ; memset ( s + 2, 0, 16 ) ; memset ( s + 3, 0, 16 ) ; memset ( s + 4, 0, 16 ) ; memset ( s + 5, 0, 16 ) ; memset ( s + 6, 0, 16 ) ; memset ( s + 7, 0, 16 ) ; memset ( s + 8, 0, 16 ) ; memset ( s + 9, 0, 16 ) ; memset ( s + 10, 0, 16 ) ; memset ( s + 11, 0, 16 ) ; memset ( s + 12, 0, 16 ) ; memset ( s + 13, 0, 16 ) ; memset ( s + 14, 0, 16 ) ; memset ( s + 15, 0,",0
604,"<S2SV_ModStart> rc, const VP9EncoderConfig <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> ( int64_t ) oxcf <S2SV_ModEnd> -> av_per_frame_bandwidth * <S2SV_ModStart> ( int64_t ) rc <S2SV_ModEnd> -> two_pass_vbrmax_section )",0
605,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
606,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_superblock ( VP9_COMP <S2SV_ModStart> * cpi, <S2SV_ModEnd> int mi_row, <S2SV_ModStart> BLOCK_SIZE bsize ) { VP9_COMMON * const cm = & cpi -> common ; MACROBLOCK * const x = & cpi -> mb ; MACROBLOCKD * const xd = & x -> e_mbd ; MODE_INFO * * mi_8x8 = xd -> mi ; MB_MODE_INFO * mbmi = & mi -> mbmi ; PICK_MODE_CONTEXT * ctx = get_block_context ( x, bsize ) ; unsigned int segment_id = mbmi -> segment_id ; const int mis = cm -> mi_stride ; const int mi_width = num_8x8_blocks_wide_lookup [ bsize ] ; const int mi_height = num_8x8_blocks_high_lookup [ bsize ] ; int skip_recode =! x -> select_txfm_size && mbmi -> sb_type >= BLOCK_8X8 && cpi -> sf. allow_skip_recode ; x -> skip",0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> psf -> header -> <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
608,"<S2SV_ModStart> range_max ) { int64_t <S2SV_ModEnd> value ; int <S2SV_ModStart> position, zeroes <S2SV_ModEnd> ; char bits <S2SV_ModStart> gbc ) ; if ( ctx -> trace_enable ) { bits [ 65 ] = 0 ; ff_cbs_trace_syntax_element ( ctx, position, name, NULL, bits, value ) ; } <S2SV_ModStart> 1 ) { value = get_bits_long ( gbc, zeroes ) ; for ( j = 0 ; j < zeroes ; j ++ ) bits [ i ++ ] = ( value >> ( zeroes - j - 1 ) & 1 )? '1' : '0' ; value += ( 1 << zeroes ) - 1 ; } if ( ctx -> trace_enable ) { bits [ i ] = 0 ; ff_cbs_trace_syntax_element ( ctx, position, name, NULL, bits, value ) ; } if ( value < range_min || value > range_max ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""%s <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range: <S2SV_blank> "" ""%"" PRIu32 "", <S2SV_blank> but <S2SV_blank> must <S2SV_blank> be <S2SV_blank> in <S2SV_blank> [%"" PRIu32 "",%"" PRIu32 ""].\\n""",0
609,"<S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!$%&\'*+-.^_`|~"" <S2SV_ModStart>",0
610,"<S2SV_ModStart>, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_origin. ptr = NULL, packet -> http_origin. len = 0, packet -> http_x_session_type. ptr = NULL, packet -> http_x_session_type. len = 0, packet -> server_line. ptr = NULL, packet -> server_line. len = 0, packet -> http_num_headers = 0, packet -> <S2SV_ModStart> = 0, <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
611,"<S2SV_ModStart> { q = QueueAuthenticPixels2 <S2SV_ModEnd> ( image, <S2SV_ModStart> x ), Min ( 4, dds_info -> height - y ), exception ) ; if ( q == ( PixelPacket * ) NULL ) return MagickFalse ; c0 = ReadBlobLSBShort ( image ) ; c1 = ReadBlobLSBShort ( image ) ; bits = ReadBlobLSBLong ( image ) ; CalculateColors ( c0, c1, & colors, MagickFalse ) ; for ( j = 0 ; j < 4 ; j ++ ) { for ( i = 0 ; i < 4 ; i ++ ) { if ( ( x + i ) < ( ssize_t ) dds_info -> width && ( y + j ) < ( ssize_t ) dds_info -> height ) { code = ( unsigned char ) ( ( bits >> ( ( j * 4 + i ) * 2 ) ) & 0x3 ) ; SetPixelRed ( q, ScaleCharToQuantum ( colors. r [ code ] ) ) ; SetPixelGreen ( q, ScaleCharToQuantum ( colors. g [ code ] ) ) ; SetPixelBlue ( q, ScaleCharToQuantum ( colors",0
612,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL ) <S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL )",1
613,<S2SV_ModStart> action ) { if ( w < 0 || w > 1 || h < 0 || h > 1 ) { return ; },0
614,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; printf ( outputbuffer ) ;",0
615,"<S2SV_ModStart> ( AUTODETECT_TAG, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU\\n"" <S2SV_ModEnd> ) ; Stream_Read_UINT32",0
616,<S2SV_ModStart> recon_uv_stride ; } # if CONFIG_REALTIME_ONLY & CONFIG_ONTHEFLY_BITPACKING if ( cpi -> b_multi_threaded == 0 ) cm -> mb_cols = 16 ; # endif,0
617,<S2SV_ModStart> -> b_multithreaded_rd ) { <S2SV_ModStart> mb_rows ) ; },0
618,<S2SV_ModStart> { if ( ( <S2SV_ModStart> xWantedSize > 0 ) && ( xWantedSize + xHeapStructSize <= xFreeBytesRemaining ) <S2SV_ModStart> portBYTE_ALIGNMENT_MASK ) ) ; } else { mtCOVERAGE_TEST_MARKER ( ) ; } } else { mtCOVERAGE_TEST_MARKER ( ) ; } if ( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) ) { pxPreviousBlock = & xStart ; pxBlock = xStart. pxNextFreeBlock ; while ( ( pxBlock -> xBlockSize < xWantedSize ) && ( pxBlock -> pxNextFreeBlock!= NULL ) ) { pxPreviousBlock = pxBlock ; pxBlock = pxBlock -> pxNextFreeBlock ; } if ( pxBlock!= pxEnd ) { pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock -> pxNextFreeBlock ) + xHeapStructSize ) ; pxPreviousBlock -> pxNextFreeBlock = pxBlock -> pxNextFreeBlock ; if ( ( pxBlock -> xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE ) { pxNewBlockLink =,0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,"<S2SV_ModStart> s ) { uint32 <S2SV_ModEnd> num_updates ; uint16 <S2SV_ModStart>, Debug, ""%s()\\n"" <S2SV_ModEnd>, __func__ ) <S2SV_ModStart> ++ ) { in_uint32_le ( s, left ) ; in_uint32_le ( s, top ) ; in_uint32_le ( s, right ) ; in_uint32_le ( s, bottom ) ; in_uint32_le ( s, width ) ; in_uint32_le ( s, bpp ) ; Bpp = ( bpp + 7 ) / 8 ; in_uint32_le ( s, compress ) ; in_uint32_le ( s, bufsize ) ; cx = right - left + 1 ; cy = bottom - top + 1 ; logger ( Graphics, Debug, ""process_bitmap_updates(), <S2SV_blank> [%d,%d,%d], <S2SV_blank> [%d,%d], <S2SV_blank> bpp=%d, <S2SV_blank> compression=%d"", left, top, right, bottom, width, height, Bpp, compress ) ; if (! compress ) { int y ; bmpdata = ( uint8 * ) xmalloc ( width * height * Bpp ) ; for ( y = 0 ; y <",0
621,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
622,"<S2SV_ModStart> TX_SIZE tx_size, vpx_coeff_stats <S2SV_ModEnd> * coef_branch_ct ) <S2SV_ModStart> coef_branch_ct ) { vpx_coeff_probs_model <S2SV_ModEnd> * coef_probs = <S2SV_ModStart> tx_size ] ; vpx_coeff_count <S2SV_ModEnd> * coef_counts =",0
623,<S2SV_ModStart> ( name ) ; ( void ) utf8,0
624,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static void <S2SV_ModEnd> su3000_frontend_attach ( struct <S2SV_ModStart> dvb_usb_adapter * d, struct dvb_usb_loop_ctrl * ctrl <S2SV_ModStart> 0 } ; struct dvb_usb_control * ctrl = & ctrl -> control ; <S2SV_ModStart> ( dvb_usb_generic_rw ( ctrl <S2SV_ModEnd> -> dev, <S2SV_ModStart> = 0xe ; ctrl <S2SV_ModEnd> -> 1 ] <S2SV_ModStart> = 0x02 ; ctrl <S2SV_ModEnd> -> 2 ] <S2SV_ModStart> = 1 ; ctrl <S2SV_ModEnd> -> 1 = <S2SV_ModStart> = 0 ; ctrl <S2SV_ModEnd> -> 2 = <S2SV_ModStart> ( dvb_usb_generic_rw ( ctrl <S2SV_ModEnd> -> dev, <S2SV_ModStart> 300 ) ; ctrl <S2SV_ModEnd> -> 0 ] <S2SV_ModStart> = 0xe ; ctrl <S2SV_ModEnd> -> 1 ] <S2SV_ModStart> = 0x83 ; ctrl <S2SV_ModEnd> -> 2 = <S2SV_ModStart> ( dvb_usb_generic_rw ( ctrl <S2SV_ModEnd> -> dev, <S2SV_ModStart> = 1 ; ctrl <S2SV_ModEnd> -> 1 = <S2SV_ModStart> ( dvb_usb_generic_rw ( ctrl <S2SV_ModEnd> -> dev, <S2SV_ModStart> = 0 ; ctrl <S2SV_ModEnd> -> 1 = <S2SV_ModStart> ( dvb_usb_generic_rw ( ctrl <S2SV_ModEnd> -> dev, <S2SV_ModStart> = 0x51 ; ctrl <S2SV_ModEnd> -> 1 = <S2SV_ModStart> ( ds3000_attach, ctrl",0
625,<S2SV_ModStart> vpx_codec_enc_cfg_t * cfg <S2SV_ModEnd> ) { vpx_codec_err_t <S2SV_ModStart> ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&,0
626,"<S2SV_ModStart> stride, int mv_row, int mv_col, struct scale_factors * scale, int x, int y ) { const int which_mv = 0 ; const MV mv = { mv_row, mv_col } ; const InterpKernel * const kernel = vp9_get_interp_kernel ( xd -> mi [ 0 ] -> mbmi. interp_filter ) ; enum mv_precision mv_precision_uv ; int uv_stride ; vp9_build_inter_predictor ( y_mb_ptr, stride, & pred [ 0 ], 16, & mv, scale, 16, 16, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vp9_build_inter_predictor ( u_mb_ptr, uv_stride, & pred [ 256 ], uv_block_size, & mv, scale, uv_block_size, uv_block_size, which_mv, kernel, mv_precision_uv, x, y ) ; vp9_build_inter_predictor ( v_mb_ptr, uv_stride, & pred [ 512 ], uv_block_size, & mv, scale, uv",0
627,"<S2SV_ModStart> = TRUE ; if ( strlen ( origbuf ) >= sizeof ( buf ) ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> too <S2SV_blank> long <S2SV_blank> \\""%s\\"""", origbuf ) ; return FALSE ; }",0
628,"<S2SV_ModStart> * cJSON_CreateFloatArray ( const <S2SV_ModStart> * numbers, size_t <S2SV_ModEnd> count ) { <S2SV_ModStart> i ) { if (! ( <S2SV_ModStart> i ] ) ) ) { cJSON_Delete ( a ) ; return 0 ; } <S2SV_ModEnd> if (!",0
629,"<S2SV_ModStart> data_end ) { const <S2SV_ModStart> pbi -> common <S2SV_ModEnd> ; const int <S2SV_ModStart> tile_cols ) ; <S2SV_ModEnd> int n ; <S2SV_ModStart> 0 ) { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Tile <S2SV_blank> decoder <S2SV_blank> thread <S2SV_blank> creation <S2SV_blank> failed"" ) ; } for ( int i = 0 ; i < pbi -> num_tile_workers ; ++ i ) { VP9Worker * const worker = & pbi -> tile_workers [ i ] ; ++ pbi -> num_tile_workers ; vpx_worker_init ( worker ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data2, vpx_malloc ( sizeof ( TileInfo ) ) ) ; if ( i < num_threads - 1 &&! vp9_worker_reset ( worker ) ) { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Tile <S2SV_blank> decoder <S2SV_blank> thread <S2SV_blank> creation <S2SV_blank> failed"" ) ; } } } for ( int n = 0 ; n < num_workers",0
630,<S2SV_ModStart> * 0x101 ; if (! ( <S2SV_ModStart> get4 ( ) ) ) return <S2SV_ModEnd> ; while ( <S2SV_ModStart> ( ) ; if (! ( <S2SV_ModStart> get4 ( ) ) ) return <S2SV_ModEnd> ; switch ( <S2SV_ModStart> case 0x505244 : if (! ( <S2SV_ModStart> get2 ( ) ) ) return <S2SV_ModEnd> ; high = <S2SV_ModStart> case 0x505245 : if (! ( <S2SV_ModStart> get2 ( ) ) ) return <S2SV_ModEnd> ; wide = <S2SV_ModStart> case 0x524946 : if (! ( <S2SV_ModStart> get4 ( ) ) ) return <S2SV_ModEnd> ; c = <S2SV_ModStart> case 0x524950 : if (! ( <S2SV_ModStart> get4 ( ) ) ) return <S2SV_ModEnd> ; c = <S2SV_ModStart> get4 ( ) ) ) return <S2SV_ModEnd> ; high = <S2SV_ModStart> get4 ( ) ) ) return <S2SV_ModEnd> ; wide = <S2SV_ModStart> get4 ( ) ) ) return <S2SV_ModEnd> ; c = <S2SV_ModStart> get4 ( ) ) ) return <S2SV_ModEnd> ; c = <S2SV_ModStart> get4 ( ) ) ) return <S2SV_ModEnd> ; c = <S2SV_ModStart> get4 ( ) ) ) return <S2SV_ModEnd> ; if ( <S2SV_ModStart> get4 ( ) ) return <S2SV_ModEnd> ; c = <S2SV_ModStart> get4 ( ) ) ) return <S2SV_ModEnd> ; if ( <S2SV_ModStart> get4 ( ) ) return <S2SV_ModEnd> ; c = <S2SV_ModStart> get4 ( ) ),0
631,"<S2SV_ModStart> cm -> seg ; vpx_clear_system_state ( ) <S2SV_ModStart> = SEGMENT_DELTADATA ; <S2SV_ModEnd> for ( i <S2SV_ModStart> ++ ) { vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, SEGMENT_DELTADATA ) ; vpx_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q ) ; <S2SV_ModStart> ) ) ; vpx_set_segdata <S2SV_ModEnd> ( seg, <S2SV_ModStart> qindex_delta ) ; vpx_enable_segfeature <S2SV_ModEnd> ( seg, <S2SV_ModStart> ), SEG_LVL_ALT_Q <S2SV_ModEnd> ) ; RDMULT_RATIO",0
632,"<S2SV_ModStart> -> error_code ) memcpy ( & <S2SV_ModStart> base. err_detail, <S2SV_ModEnd> error -> has_detail <S2SV_ModStart> error -> detail, sizeof ( ctx -> base. err_detail ) ) <S2SV_ModEnd> ; return error",0
633,"<S2SV_ModStart>, * ps_cur_poc ; if ( ps_dec -> u4_num_slices > MAX_NUM_SLICES ) { fprintf ( stderr, ""Error: <S2SV_blank> num_slices <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", MAX_NUM_SLICES ) ; return ; } if ( ps_dec -> u4_num_slices > MAX_NUM_SLICES ) { fprintf ( stderr, ""Error: <S2SV_blank> num_slices <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", MAX_NUM_SLICES ) ; return ; } if ( ps_dec -> u4_num_slices > MAX_NUM_SLICES ) { fprintf ( stderr, ""Error: <S2SV_blank> num_slices <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", MAX_NUM_SLICES ) ; return ; } if ( ps_dec -> u4_num_slices > MAX_NUM_SLICES ) { fprintf ( stderr, ""Error: <S2SV_blank> num_slices <S2SV_blank> exceed",0
634,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet ),0
635,<S2SV_ModStart> <S2SV_null> <S2SV_null> static long <S2SV_ModEnd> getnum ( const <S2SV_ModStart> int getnum ( <S2SV_ModEnd> char * * <S2SV_ModStart> int df ) <S2SV_ModEnd> { int a <S2SV_ModStart> = 0 ; if (! isdigit ( * * fmt ) ) return df ; else,0
636,<S2SV_ModStart> GCSpropagate ) ; g -> gcstate = GCSdestroyed ;,0
637,<S2SV_ModStart> 0 ; else { kfree ( buf ) ; <S2SV_ModStart> - EIO ; },0
638,"<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } <S2SV_ModEnd> memset ( buffer <S2SV_ModStart> buffer ) ; <S2SV_ModEnd> s_write ( c",0
639,"<S2SV_ModStart> struct remote_connection_s * remote_connection <S2SV_ModEnd> ) { int <S2SV_ModStart> -> variant_opaque ; <S2SV_ModEnd> int rc = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> struct addrinfo * <S2SV_ModStart> = NULL ; remote_connection <S2SV_ModEnd> -> socket = <S2SV_ModStart> = NULL ; remote_connection <S2SV_ModEnd> -> session = <S2SV_ModStart> = NULL ; <S2SV_ModEnd> crm_debug ( ""Looking <S2SV_blank> up <S2SV_blank> %s"" <S2SV_ModStart> = getaddrinfo ( remote_connection <S2SV_ModEnd> -> server, <S2SV_ModStart>, server, remote_connection <S2SV_ModEnd> -> server )",0
640,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> ; cpi -> <S2SV_ModEnd> non_gf_bitrate_adjustment = 0",0
641,"<S2SV_ModStart> ) ) ; ND_TCHECK2 ( bp [ 26 ], sizeof ( struct icmp6_hdr ) ) ;",0
642,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command",0
643,"<S2SV_ModStart> Image * image <S2SV_ModEnd> ; register IndexPacket <S2SV_ModStart> length, padding <S2SV_ModEnd>, version, <S2SV_ModStart> version, width ; MagickBooleanType status <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { image = DestroyImageList ( image ) ; return ( ( Image * ) NULL ) ; }",0
644,"<S2SV_ModStart> 1 ; } if (! ( qcd = jpc_enc_getc ( enc ) ) ) { jas_eprintf ( ""cannot <S2SV_blank> get <S2SV_blank> cstate\\n"" ) ; return - 1 ; } <S2SV_ModStart> 1 ; } if (! ( qcd = jpc_enc_getc ( enc ) ) ) { jas_eprintf ( ""cannot <S2SV_blank> get <S2SV_blank> cstate\\n"" ) ; return - 1 ; } <S2SV_ModStart> 1 ; } if (! ( qcd = jpc_enc_getc ( enc ) ) ) { jas_eprintf ( ""cannot <S2SV_blank> get <S2SV_blank> cstate\\n"" ) ; return - 1 ; }",0
645,"<S2SV_ModStart> = '\\0' ; if ( strlen ( str_mode ) + 1 + strlen ( argument ) > INT_MAX ) { irc_server_log ( server, LOG_ERROR, ""Invalid <S2SV_blank> channel <S2SV_blank> mode <S2SV_blank> argument: <S2SV_blank> %s\\n"", str_mode ) ; free ( new_modes ) ; free ( new_args ) ; return ; } <S2SV_ModStart> = '\\0' ; if ( strlen ( str_temp ) + 1 + strlen ( argument ) > INT_MAX ) { irc_server_log ( server, LOG_ERROR, ""Invalid <S2SV_blank> channel <S2SV_blank> argument: <S2SV_blank> %s\\n"", str_temp ) ; free ( new_modes ) ; free ( new_args ) ; return ; }",0
646,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> - m + vpx_read_bit <S2SV_ModEnd> ( r )",1
647,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
648,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> REFERENCE_MODE mode = vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> comp_inter_prob [ ctx <S2SV_ModStart> ( REFERENCE_MODE ) vpx_read <S2SV_ModEnd> ( r,",0
649,"<S2SV_ModStart>! stream ) { <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; } <S2SV_ModStart> ( res ) { <S2SV_ModStart> ) ) ; } <S2SV_ModStart> stereo_fmt = STEREO_FORMAT_MONO <S2SV_ModEnd> ; # if <S2SV_ModStart> CONFIG_WEBM_IO stream -> <S2SV_ModEnd> debug = global",0
650,<S2SV_ModStart> nd_opt_len << 3 <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> nd_opt_len << 3 <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> nd_opt_len << 3 <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> nd_opt_len << 3 <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> nd_opt_len << 3 <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> nd_opt_len << 3 <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> nd_opt_len << 3 <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> nd_opt_len << 3 <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> nd_opt_len << 3 <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> nd_opt_len << 3 <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> nd_opt_len << 3 <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> nd_opt_len << 3 <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> nd_opt_len << 3 <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> nd_opt_len << 3 <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> nd_opt_len << 3 <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> nd_opt_len << 3 <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> nd_opt_len << 3 <S2SV_ModEnd> ) ; ND_,0
651,<S2SV_ModStart> -> root_node = ( yr_re_node * ),0
652,"<S2SV_ModStart> ) ) ; if (! iter -> conn -> dict ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> lookup <S2SV_blank> key <S2SV_blank> %s"", str_c ( path ) ) ; return - 1 ; } <S2SV_ModStart> if ( ret < <S2SV_ModEnd> 0 ) { <S2SV_ModStart> 0 ) { auth_request_log_debug <S2SV_ModEnd> ( iter -> <S2SV_ModStart>, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found, <S2SV_blank> using <S2SV_blank> default <S2SV_blank> value <S2SV_blank> %s"", str_c ( path ), key -> key -> default_value ) ; key -> value = key -> key -> default_value ; } else { return 0 ; } } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> = <S2SV_blank> %s"", str_c ( path ), key -> value ) ; } else if ( ret < 0 ) { auth_request_log_error (",0
653,<S2SV_ModStart> level = 0 ; tok -> type_comment = 0,0
654,<S2SV_ModStart> maxBitrate ; } av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo = NULL ;,0
655,"<S2SV_ModStart> ASSERT ( dpbSize ) ; memset ( dpb, 0, sizeof ( dpbStorage_t )",0
656,"<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> (! sock ||! addr <S2SV_ModStart> ( addrlen ) { <S2SV_ModStart> * addrlen ; addrlen_out = * addrlen ; } <S2SV_ModStart>, addrlen_in, & addrlen_out <S2SV_ModEnd> )!= OE_OK <S2SV_ModStart> ) ; } if ( addrlen ) * addrlen = addrlen_out ;",0
657,,1
658,"<S2SV_ModStart> FALSE ; } if (! <S2SV_ModStart>, s ) ) return FALSE",1
659,<S2SV_ModStart> ipv6_pinfo * np <S2SV_ModEnd> ; struct ipv6_txoptions <S2SV_ModStart> ; if ( msg -> msg_name ) { np = inet6_sk ( sk ) ; opt = msg -> msg_name ; } if (,0
660,"<S2SV_ModStart> ; unsigned int <S2SV_ModEnd> found, upx_success <S2SV_ModStart> size_t fsize ; size_t <S2SV_ModEnd> valign, falign <S2SV_ModStart>, hdr_size, <S2SV_ModEnd> j ; struct <S2SV_ModStart> j ) ; if ( j >= sizeof ( exe_sections ) ) { cli_err ( ""cli_scanpe: <S2SV_blank> cli_exe_sections <S2SV_blank> == <S2SV_blank> too <S2SV_blank> large\\n"" ) ; return CL_ENOMEM ; }",0
661,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR <S2SV_ModEnd> ) & EPCR_ERRE <S2SV_ModStart> } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; usleep <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPDRH <S2SV_ModEnd> ) << 8 <S2SV_ModStart> | dm9000ReadReg ( DM9000_EPDRL <S2SV_ModEnd> ) ; }",0
662,"<S2SV_ModStart> cib, & <S2SV_ModEnd> private -> command <S2SV_ModStart> private -> command <S2SV_ModEnd> ) ; } <S2SV_ModStart> cib, & <S2SV_ModEnd> private -> callback <S2SV_ModStart> private -> callback <S2SV_ModEnd> ) ; }",0
663,"<S2SV_ModStart> = ubuf ; memset ( & address, 0, sizeof ( address ) ) ;",0
664,"<S2SV_ModStart> num00, tmp_err <S2SV_ModEnd>, sr = <S2SV_ModStart> bsize ] ; <S2SV_ModEnd> const int quart_frm <S2SV_ModStart> int quart_frm = MIN ( cpi -> common. width, cpi -> common. height ) ; vpx_variance_fn_ptr_t vpx_fn_ptr = cpi -> fn_ptr [ bsize ] ; vpx_fn_ptr. vf = get_block_variance_fn ( bsize ) ; tmp_err = cpi -> diamond_search_sad ( x, & ref_mv_full, & tmp_mv, step_param, x -> sadperbit16, & num00, & vpx_fn_ptr, x -> nmvjointcost, x -> mvcost, ref_mv ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & vpx_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX - new_mv_mode_penalty ) tmp_err += new_mv_mode_penalty ; if ( tmp_err <",0
665,<S2SV_ModStart> ; if ( <S2SV_ModEnd> hivex_check_ntreg_header ( filename <S2SV_ModStart> ; if ( <S2SV_ModEnd> hivex_check_ntreg_header ( filename <S2SV_ModStart> ; if ( <S2SV_ModEnd> hivex_check_ntreg_header ( filename <S2SV_ModStart> ; if ( <S2SV_ModEnd> hivex_check_ntreg_header ( filename <S2SV_ModStart> ; if ( <S2SV_ModEnd> hivex_check_ntreg_header ( filename <S2SV_ModStart> ; if ( <S2SV_ModEnd> hivex_check_ntreg_header ( filename <S2SV_ModStart> ; if ( <S2SV_ModEnd> hivex_check_ntreg_header ( filename <S2SV_ModStart> ; if ( <S2SV_ModEnd> hivex_check_ntreg_header ( filename <S2SV_ModStart> ; if ( <S2SV_ModEnd> hivex_check_ntreg_header ( filename <S2SV_ModStart> ; if ( <S2SV_ModEnd> hivex_check_ntreg_header ( filename <S2SV_ModStart> ; if ( <S2SV_ModEnd> hivex_check_ntreg_header ( filename <S2SV_ModStart> ; if ( <S2SV_ModEnd> hivex_check_ntreg_header ( filename <S2SV_ModStart> ; if ( <S2SV_ModEnd> hivex_check_ntreg_header ( filename <S2SV_ModStart> ; if ( <S2SV_ModEnd> hivex_check_ntreg_header ( filename <S2SV_ModStart> ; if ( <S2SV_ModEnd> hivex_check_ntreg_header (,0
666,<S2SV_ModStart> child -> of_limit_action ) ; if ( child -> of_limit_action == NOT_SET && parent -> of_limit_action == NOT_SET && merged -> of_limit_action == NOT_SET && merged -> of_limit_action == NOT_SET && merged -> of_limit_action == NOT_SET && merged -> of_limit_action == NOT_SET && merged -> of_limit_action == NOT_SET && merged -> of_limit_action == NOT_SET && merged -> of_limit_action == NOT_SET && merged -> of_limit_action == NOT_SET && parent -> of_limit_action == NOT_SET && merged -> of_limit_action == NOT_SET && merged -> of_limit_action == NOT_SET && merged -> of_limit_action == NOT_SET && merged -> of_limit_action == NOT_SET && merged -> of_limit_action == NOT_SET && merged -> of_limit_action == NOT_SET && merged -> of_limit_action == NOT_SET && merged -> of_limit_action == NOT_SET && parent -> of_limit_action == NOT_SET && merged ->,0
667,"<S2SV_ModStart>, one, <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize (",0
668,<S2SV_ModStart> ( r = <S2SV_ModEnd> sshbuf_put_cstring ( b,1
669,"<S2SV_ModStart> ) ) { ovalue = sclone ( sclone ( value ) ) ; <S2SV_ModStart>, & ovalue <S2SV_ModEnd> ) ; if",0
670,"<S2SV_ModStart> client = user_data ; crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client"" ) <S2SV_ModStart> user ) ; <S2SV_ModEnd> crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client""",0
671,"<S2SV_ModStart> * uv ; <S2SV_ModEnd> thread -> twups <S2SV_ModStart> next ) { if (! iswhite ( uv ) ) markvalue ( g, uv -> v ) ; <S2SV_ModStart> work ++ ; <S2SV_ModEnd> } } }",0
