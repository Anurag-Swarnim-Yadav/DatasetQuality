,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
1,"<S2SV_ModStart> ; if ( skb_headroom ( skb ) < tnl_hlen <S2SV_ModEnd> ) { if <S2SV_ModStart> skb, tnl_hlen <S2SV_ModEnd> ) ) goto",0
2,"<S2SV_ModStart> * writer = gf_list_get_safe <S2SV_ModEnd> ( writers,",0
3,"<S2SV_ModStart> item ) { return cJSON_GetArrayItem ( array, item, 0 ) <S2SV_ModEnd> ; } <S2SV_null>",0
4,"<S2SV_ModStart>, u64 nr <S2SV_ModEnd>, struct pt_regs <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",0
5,"<S2SV_ModStart> EXT4_EXTENTS_FLAG ) { char * buf ; <S2SV_ModEnd> struct grub_ext4_extent_header * <S2SV_ModStart> int i ; buf = grub_malloc ( <S2SV_ModEnd> ( struct grub_ext4_extent_header <S2SV_ModStart>. len ) ; if ( buf == NULL ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } else if ( fileblock < 0 ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } else { grub_disk_addr_t start ; start = grub_le_to_cpu16 ( ext [ i ]. start_hi ) ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext [ i ]. start ) ; return fileblock + start ; } } else { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } } else { grub_disk_addr_t start ; start = grub_le_to_cpu16 ( ext [ i ]. start_hi ) ; start",0
6,"<S2SV_ModStart> fdct16 ( const tran_low_t in [ 16 ], tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> ] ) { tran_low_t step1 [ 8 ] ; tran_low_t step2 [ 8 ] ; tran_low_t step3 [ 8 ] ; tran_low_t step3 [ 8 ] ; tran_low_t step3 [ 8 ] ; tran_low_t input [ 8 ] ; tran_low_t input [ 8 ] ; tran_low_t input [ 8 ] ; tran_low_t input [ 8 ] ; tran_low_t input [ 8 ] ; tran_low_t <S2SV_ModEnd> temp1, temp2 <S2SV_ModStart> ] ; { tran_low_t s0, s1, s2, s3, s4, s5, s6, s7 ; tran_low_t t0, t1, t2, t3 ; tran_low_t t0, t1, t2, t3 ; tran_low_t <S2SV_ModEnd> x0, x1 <S2SV_ModStart> x1, x2 <S2SV_ModEnd> ; s0 = <S2SV_ModStart> x1, x2 <S2SV_ModEnd> ; s0 =",0
7,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> parse_ciff ( save,0
8,"<S2SV_ModStart> * sd, const <S2SV_ModStart> * cpi, const <S2SV_ModStart> partial_frame ) { const <S2SV_ModStart> const lf = cpi -> lf ; const int min_filter_level = 0 ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int filt_mid = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; int filt_direction = 0 ; int filt_mid = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; int filt_direction = 0 ; int filt_mid = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; int filt_direction = 0 ; int filt_mid = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; int filt_direction = 0 ; int filt_mid = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; int filt_err ; int filt_err ; int filt_err ; int filt_err ; int bias ; int bias ; if ( cpi -> twopass. section_intra_rating < 20",0
9,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> push <S2SV_blank> in <S2SV_blank> function <S2SV_blank> push"" ) ; <S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> push <S2SV_blank> in <S2SV_blank> function <S2SV_blank> push"" ) ;",0
10,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ++ i ) vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ++ i ) vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( usehp ) vpx_write <S2SV_ModEnd> ( w,",0
11,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } else { <S2SV_ModEnd> request -> rxBlockSzx <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; } <S2SV_ModStart> ( ) ) { <S2SV_ModStart> ( ) ; },1
12,"<S2SV_ModStart> ) dat ; if ( length < 5 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ) ) ; <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> ) ) ; ptr ++ ; <S2SV_ModStart> length > 5 && length < 5",0
13,"<S2SV_ModStart> key * * dest_keyring, const struct key_keyring * * * dest_keyring ) { struct key_keyring * dest_keyring = * dest_keyring ; <S2SV_ModEnd> struct key * <S2SV_ModStart> * authkey ; <S2SV_ModEnd> if ( dest_keyring <S2SV_ModStart> dest_keyring ) ; * dest_keyring = NULL ; } else { <S2SV_ModEnd> switch ( cred <S2SV_ModStart> ( dest_keyring ) { * dest_keyring = NULL ; break ; } <S2SV_ModEnd> } case KEY_REQKEY_DEFL_THREAD_KEYRING <S2SV_ModStart> ) ; } * dest_keyring = dest_keyring ; * dest_keyring = NULL ; } * _dest_keyring = NULL ; * _dest_keyring = NULL ; * _dest_keyring = NULL ; * _dest_keyring = NULL ; * _dest_keyring = NULL ; return <S2SV_ModEnd> ; } <S2SV_null>",0
14,"<S2SV_ModStart> = NULL ; gss_gss_ctx_t * sctx = NULL ; <S2SV_ModStart> = create_spnego_ctx ( ) ; if ( sctx == NULL ) goto cleanup ; sctx = gss_create_spnego_ctx ( sctx -> sctx, sctx -> se_ctx -> se_ctx -> se_ctx_id",0
15,<S2SV_ModStart> ; tm = g_localtime_safe <S2SV_ModEnd> ( & t,0
16,<S2SV_ModStart> length ) ; if ( length > 256 ) { <S2SV_ModStart> ) ) ; },0
17,<S2SV_ModStart> e == p || e - p > MAX_NAME_LEN,0
18,"<S2SV_ModStart> ) &&! fchown_uid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! fchown_uid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! fchown_uid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! fchown_uid <S2SV_ModEnd> ( inode,",0
19,<S2SV_ModStart> = 0 ; if (! <S2SV_ModStart> & timeout ) ) return false,0
20,"<S2SV_ModStart> detect_transition_to_still ( struct twopass_stats * stats <S2SV_ModEnd>, int frame_interval <S2SV_ModStart> ; if ( stats -> stats_in <S2SV_ModEnd> > MIN_GF_INTERVAL && <S2SV_ModStart> ; if ( stats -> stats_in <S2SV_ModEnd> > MIN_GF_INTERVAL && <S2SV_ModStart> ( twopass, stats -> stats_in <S2SV_ModEnd> ) ) break <S2SV_ModStart> ; if ( stats -> pcnt_inter - stats -> pcnt_motion < 0.999 <S2SV_ModEnd> ) break ; <S2SV_ModStart> pcf_inter - tmp_next_frame -> <S2SV_ModEnd> pcnt_motion < 0.999 <S2SV_ModStart> pcf_motion < 0.999 && stats -> pcnt_motion < 0.999 <S2SV_ModStart> pcf_position ( twopass, stats -> stats_in <S2SV_ModStart> pcf_position ( twopass, stats -> stats_in <S2SV_ModStart> pcf_position ( twopass, stats -> stats_in <S2SV_ModStart> pcf_position ( twopass, stats -> stats_in <S2SV_ModStart> pcf_position ( twopass, stats -> stats_in <S2SV_ModStart> pcf_inter - tmp_next_frame -> <S2SV_ModEnd> pcnt_motion < 0.999 <S2SV_ModStart> pcf_motion < 0.999 && stats -> <S2SV_ModEnd> pcnt_motion < 0.",0
21,<S2SV_ModStart> ; if ( ( offset + size > i_size_read ( inode ) ) || ( offset + size > i_size_read ( inode ) ) <S2SV_ModEnd> ) ret =,0
22,"<S2SV_ModStart> alg ) { <S2SV_ModEnd> if (! <S2SV_ModStart> CRYPTO_ALG_NEED_FALLBACK ) ) request_module_module <S2SV_ModEnd> ( ""%s-all"",",0
23,<S2SV_ModStart> = GIT_PKT_NG ; if ( len < 3 ) goto out_err ; <S2SV_ModStart> += 3 ; len = len ; <S2SV_ModStart> = '\\0' ; len = len ; <S2SV_ModStart> = '\\0' ; len = len ; <S2SV_ModStart> = '\\0' ; len = len ;,0
24,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> BYTE flags ; if ( Stream_Read_UINT8 ( s, flags )!= Stream_MAX_LENGTH ) { WLog_ERR ( TAG, ""RDP_NEG_REQ: <S2SV_blank> RequestedProtocol: <S2SV_blank> 0x%08"" PRIX32 """", nego -> RequestedProtocols ) ; return NEGO_STATE_FINAL ; } Stream_Read_UINT32 <S2SV_ModEnd> ( s, <S2SV_ModStart> = NEGO_STATE_FINAL ; return NEGO_STATE_FINAL ;",0
25,<S2SV_ModStart> ; } } avio_feof ( pb ) ; return AVERROR_EOF ;,0
26,"<S2SV_ModStart> mntent, path, true",0
27,<S2SV_ModStart> io_cleanup = mem_cleanup ; io -> io_size = 0,0
28,<S2SV_ModStart> MagickRealType ) ( QuantumRange * ( <S2SV_ModStart> pixel & ( <S2SV_ModEnd> value + 0.5 <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> pixel << ( <S2SV_ModEnd> value + 0.5,0
29,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return ret?,0
30,"<S2SV_ModStart> vpx_codec_enc_cfg_map_t * map ; int i <S2SV_ModStart>. cfg_maps ; i ++, map -> usage > 0 ; map ++ ) { for ( i <S2SV_ModEnd> = iface -> <S2SV_ModStart> enc. cfg_maps ; i <S2SV_ModEnd> >= 0 ;",0
31,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
32,"<S2SV_ModStart> void show_progress ( uint64_t <S2SV_ModEnd> frame_in, int <S2SV_ModStart> dx_time ) { const int64_t dx_time = ( int64_t ) ( frame_in * 1000000.0 / ( double ) frame_out ) ; const int64_t dx_time = ( int64_t ) dx_time ; const int64_t dx_time = ( int64_t ) ( dx_time * ( ( double ) dx_time ) ) ; const int64_t dx_time = ( int64_t ) dx_time ; const int64_t dx_time = ( int64_t ) dx_time ; const int64_t dx_time = ( int64_t ) dx_time ; const int64_t dx_time = ( int64_t ) dx_time ; const int64_t dx_time = ( dx_time * dx_time ) ; const int64_t dx_time = ( int64_t ) dx_time ; const int64_t dx_time = ( dx_time * dx_time ) ; const int64_t dx_time = ( dx_time * dx_time )",0
33,"<S2SV_ModStart> ; if (! mysql_check_row ( imp_dbh -> pmysql ) ) { do_error ( sth, JW_ERR_INTERNAL, ""no <S2SV_blank> valid <S2SV_blank> column <S2SV_blank> in <S2SV_blank> mysql <S2SV_blank> table"", NULL ) ; return Nullav ; } if (",0
34,"<S2SV_ModStart> NO_ERROR ; } osSetEvent ( & interface -> nicTxEvent ) ; <S2SV_ModStart> NO_ERROR ; } osSetEvent ( & interface -> nicTxEvent ) ; <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST ) ; enc28j60ClearBit ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST ) ; enc28j60ClearBit ( interface, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF ) ; enc28j60WriteReg ( interface, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF ) ; enc28j60WriteReg ( interface, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF ) ; enc28j60WriteReg ( interface, ENC28J60_EIR_EIR_TXL, LSB ( ENC28J60_ENC28J60_ENC28J60_ENC28J60_ENC28J60_ENC28J60_EIR_TXRST ) ; enc28j",0
35,<S2SV_ModStart> ; value = ast2obj_int <S2SV_ModEnd> ( o -> <S2SV_ModStart> ; value = ast2obj_int <S2SV_ModEnd> ( o ->,0
36,"<S2SV_ModStart> page && ( unlink ( page ) == 0 ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } } else if (! strcmp ( func, ""page/set"" ) ) { char * page = http_request_param_get ( req, ""page"" ) ; if ( page && ( page && ( page && ( page <S2SV_ModEnd> ( access ( <S2SV_ModStart> == 0 ) ) ) ) { file_write ( page, wikitext ) ; http_response_send ( res ) ; return ; } } else if (! strcmp ( func, ""page/delete"" ) ) { char * page = http_request_param_get ( req, ""page"" ) ; if ( page && ( unlink ( page ) > 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } } else if (! strcmp ( func, ""page/exists"" ) ) { char * page = http_request_param_get ( req, ""page"" ) ; if ( page && ( unlink ( page ) > 0 ) ) { http_response",0
37,"<S2SV_ModStart> low_var_thresh, int mb_rows, int mb_cols, int mmb_cols, int mbr <S2SV_ModEnd> ) { double <S2SV_ModStart>.5 ) ; <S2SV_ModEnd> unsigned char * <S2SV_ModStart> -> pp_limits_buffer ; <S2SV_ModEnd> for ( mbr <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( source -> <S2SV_ModStart> + 8 * mbr * source -> y_stride, source -> y_buffer + 16 * mbr * source -> y_stride, source -> y_buffer + 8 * mbr * source -> y_stride, source -> y_width, limits, <S2SV_ModEnd> 8 ) ; <S2SV_ModStart> + 8 * mbr * source -> y_stride, source -> y_stride, source -> y_width, limits, <S2SV_ModEnd> 8 ) ; <S2SV_ModStart> + 8 * mbr * source -> y_stride, source -> y_stride, source -> y_width, limits, <S2SV_ModEnd> 8 ) ; <S2SV_ModStart> + 8 * mbr * source -> y_stride, source -> y_stride, source -> y_width, limits, <S2SV_ModEnd> 8 ) ; <S2SV_ModStart> + 8 * mbr * source -> y_stride, source -> y_stride, source -> y_stride, source -> y_width, limits, <S2SV_ModEnd> 8 ) ; <S2SV_ModStart>, source ->",0
38,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache * ext4_mb2_cache <S2SV_ModEnd>, struct buffer_head <S2SV_ModStart> ) ; struct mb2_cache * ext4_mb2_cache = ext4_mb2_cache -> ext4_mb2_cache ; struct mb2_cache * ext4_mb2_cache = ext4_mb2_cache -> ext4_mb2_cache ; struct <S2SV_ModStart> int error ; error = mb2_cache_entry_insert <S2SV_ModEnd> ( ext4_mb_cache, <S2SV_ModStart> ( ext4_mb_cache, <S2SV_ModEnd> hash ) ; <S2SV_ModStart> error ) { mb2_cache_entry_free ( ext4_mb2_cache <S2SV_ModEnd> ) ; if <S2SV_ModStart> hash ) ; mb2_cache_entry_release ( ext4_mb2_cache <S2SV_ModEnd> ) ; }",0
39,<S2SV_ModStart> ) ) ; * code = <S2SV_ModEnd> r_socket_http_answer ( s <S2SV_ModStart> rlen ) ; free ( uri ) ;,0
40,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> - ENOMEM ; if (! opt -> __data ) return - EFAULT ; <S2SV_ModStart> data, optlen ) ) { kfree ( opt ) ; kfree ( opt ) ; return - EFAULT ; } kfree ( opt",0
41,"<S2SV_ModStart>, "" <S2SV_blank> [|truncated]"" ) ) ; ND_TCHECK_16BITS ( & dio -> rpl_dip_len",0
42,<S2SV_ModStart> ) ) { char * p ; <S2SV_ModStart> ) ) { p = * p ; p = * p ; p = p ; p = p ; p = p ; } else { p = * p ; p = p ; p = p ; } <S2SV_ModEnd> } else if,0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode <S2SV_ModStart>, & new_mode, & acl ) ; if ( ret <S2SV_ModEnd> ) goto out",0
44,"<S2SV_ModStart> size_t size ; size_t size_size ; <S2SV_ModStart> = 0 ; size_size = 0 ; <S2SV_ModStart> / 8 ; size_size = <S2SV_ModEnd> cmpt -> cps_ <S2SV_ModStart> cmpt -> cps_ ; if ( size_size > 0 ) { if ( size_size > 0 ) { jas_eprintf ( ""too <S2SV_blank> large <S2SV_blank> size <S2SV_blank> for <S2SV_blank> cmpt <S2SV_blank> %u <S2SV_blank> (%u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank> %u <S2SV_blank>",0
45,<S2SV_ModStart> || dp == ( unsigned char ),0
46,"<S2SV_ModStart> * req, u32 len, <S2SV_ModStart> size_t * acl_len, u32 len <S2SV_ModStart> __be32 * savep = NULL <S2SV_ModStart> int status ; <S2SV_ModEnd> if ( ( <S2SV_ModStart>!= 0 ) goto out ; len = len ; <S2SV_ModEnd> if ( ( <S2SV_ModStart>!= 0 ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart>!= 0 ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> u32 recvd ; len = len ; <S2SV_ModStart> attrlen ) ; <S2SV_ModEnd> } else status",0
47,"<S2SV_ModStart> * TICK_NSEC ; u64 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",0
48,"<S2SV_ModStart> { owner = sstrdup <S2SV_ModEnd> ( auth, <S2SV_ModStart> ; } } group = sstrdup <S2SV_ModEnd> ( tok,",0
49,<S2SV_ModStart> ; # if CONFIG_VPX_MEM_MANAGER <S2SV_ModEnd> int number_aau ; <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; <S2SV_ModEnd> if ( addr,0
50,"<S2SV_ModStart> int res ; unsigned long long export_index_table [ sizeof ( long long ) <S2SV_ModEnd> ] ; res <S2SV_ModStart> ( fd, sizeof ( long long ) <S2SV_ModEnd>, sBlk. <S2SV_ModStart> s. inodes ), export_index_table [ sizeof ( long long ) <S2SV_ModEnd> ] ; res",0
51,"<S2SV_ModStart> ; } else { apr_prprintf ( cmd -> pool, ""ModSecurity: <S2SV_blank> Invalid <S2SV_blank> value <S2SV_blank> for <S2SV_blank> SecRuleEngine: <S2SV_blank> %s"", p1 ) ; return apr_psprintf ( cmd -> pool, ""ModSecurity: <S2SV_blank> Invalid <S2SV_blank> value <S2SV_blank> for <S2SV_blank> SecRuleEngine: <S2SV_blank> %s"", p1 ) ; } <S2SV_ModEnd> return NULL ;",0
52,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> # if CONFIG_VP8_ENCODER <S2SV_ModStart> ; # endif <S2SV_ModEnd> for ( argi <S2SV_ModStart> continue ; } <S2SV_ModEnd> } else if,0
53,"<S2SV_ModStart> } if (! c -> opt -> option. client ||! c -> opt -> opt -> redirect_addr. names ) { s_log ( LOG_INFO, ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } if (",0
54,"<S2SV_ModStart> ; if ( memcmp <S2SV_ModEnd> ( cmac,",0
55,"<S2SV_ModStart> cpi ) { <S2SV_ModEnd> const uint64_t bits_used <S2SV_ModStart> 0 ) ; cpi -> twopass. gf_group_bits += <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> -= bits_used ; cpi -> twopass. gf_group_bits <S2SV_ModEnd> = MAX ( <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> 0 ) ; cpi -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; } else { cpi -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; }",0
56,"<S2SV_ModStart> define EOFOp 0x07 const <S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; <S2SV_ModStart>. x = ( unsigned char * ) <S2SV_ModStart>. y = ( unsigned char * )",0
57,"<S2SV_ModStart> err_free_buf ; } usbinterface -> altsetting [ 0 ]. desc. bNumEndpoints = 1 ; dev_dbg ( & usbinterface -> dev, ""gtco <S2SV_blank> # <S2SV_blank> interfaces: <S2SV_blank> %d\\n"", usbinterface -> num_endpoints ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""endpoint: <S2SV_blank> attribute:0x%x <S2SV_blank> type:0x%x\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints, usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""endpoint: <S2SV_blank> attribute:0x%x <S2SV_blank> type:0x%x\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints, usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""endpoint: <S2SV_blank> attribute:0x%x <S2SV_blank> type:0x%x\\n"", usbinterface -> cur_altsetting -> desc",0
58,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
59,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> ( fd = xfmkstemp ( <S2SV_ModEnd> tmpname, dir <S2SV_ModStart> ( fd = xfmkstemp ( <S2SV_ModEnd> tmpname, dir",0
60,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } return IHEVCD_INVALID_HEADER,0
61,<S2SV_ModStart> ( cmd + strlen ( arg ) + <S2SV_ModStart> ( cmd + strlen ( arg ) + <S2SV_ModStart> ( cmd + strlen ( arg ) + <S2SV_ModStart> ( cmd + strlen ( arg ) + <S2SV_ModStart> ( cmd + strlen ( arg ) + <S2SV_ModStart> ( cmd + strlen ( arg ) + <S2SV_ModStart> ( cmd + strlen ( arg ) + <S2SV_ModStart> ( cmd + strlen ( arg ) + <S2SV_ModStart> ( cmd + strlen ( arg ) + <S2SV_ModStart> ( cmd + strlen ( arg ) + <S2SV_ModStart> ( cmd + strlen ( arg ) + <S2SV_ModStart> ( cmd + strlen ( arg ) + <S2SV_ModStart> ( cmd + strlen ( arg ) + <S2SV_ModStart> ( cmd + strlen ( arg ) + <S2SV_ModStart> ( cmd + strlen ( arg ) + <S2SV_ModStart> ( cmd + strlen ( arg ) + <S2SV_ModStart> ( cmd + strlen ( arg ) + strlen ( arg ) + <S2SV_ModStart> ( cmd + strlen ( arg ) + strlen ( arg ) + <S2SV_ModStart> ( cmd + strlen ( arg ) + strlen ( arg ) + <S2SV_ModStart> ( cmd + strlen ( arg ) + strlen ( arg ) + strlen ( arg ) + strlen ( arg ) + strlen ( arg ) + strlen ( arg ) + strlen ( arg ) + strlen ( arg ) + strlen ( arg ) + strlen ( arg ) + strlen ( arg ) + strlen ( arg ) + strlen ( arg ),0
62,"<S2SV_ModStart> void vp9_setup_dst_planes ( MACROBLOCKD * xd, <S2SV_ModStart> const buffers [ 4 <S2SV_ModEnd> ] = { <S2SV_ModStart> src -> v_buffer <S2SV_ModEnd> } ; const <S2SV_ModStart> int strides [ 4 <S2SV_ModEnd> ] = { <S2SV_ModStart> i ) { memcpy ( & xd -> plane [ i ], <S2SV_ModEnd> src -> plane <S2SV_ModStart> src -> dst <S2SV_ModEnd>, mi_row,",0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,<S2SV_ModStart> ) get_block = ocfs2_get_block_nolock <S2SV_ModEnd> ; else get_block <S2SV_ModStart> else get_block = ocfs2_dio_get_block_nolock <S2SV_ModEnd> ; return __blockdev_direct_IO,0
65,"<S2SV_ModStart> ( f, ""%79s <S2SV_blank> %[^\\n]\\n"" <S2SV_ModEnd>, def,",0
66,"<S2SV_ModStart> n ) { return fstring_compile_expr_internal ( expr_start, expr_start, expr_end, c, c, c, c, c, c -> c_feature_version, c -> c_arena ) <S2SV_ModEnd> ; } <S2SV_null>",0
67,"<S2SV_ModStart> string ) { return cJSON_GetObjectItem ( object, string, 0 ) <S2SV_ModEnd> ; } <S2SV_null>",0
68,"<S2SV_ModStart> size ) ; if (! imcb_file_send_stop ( ic, ( char * ) who, xfer -> filename, xfer -> size ) ) return FALSE ;",0
69,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( ptr ) ;",0
70,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
71,<S2SV_ModStart> const buffers [ 3 <S2SV_ModEnd> ] = { <S2SV_ModStart> src -> v_buffer <S2SV_ModEnd> } ; const <S2SV_ModStart> int strides [ 3 <S2SV_ModEnd> ] = { <S2SV_ModStart> src -> uv_stride <S2SV_ModEnd> } ; for,0
72,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; for (,1
73,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
74,<S2SV_ModStart> user ) { struct ipmi_user * user = user ; struct ipmi_user * user = NULL ; <S2SV_ModStart> ( user ) ; if (! user ) return - EBUSY,0
75,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> sl = strlen,1
76,"<S2SV_ModStart> * for_ch ; <S2SV_ModEnd> REQ ( n <S2SV_ModStart> comp_for ) ; if ( TYPE ( CHILD ( n, 0 ) ) == ASYNC ) { is_async = 1 ; } if ( TYPE ( CHILD ( n, 0 ) ) == ASYNC ) { is_async = 1 ; } if ( TYPE ( CHILD ( n, 1 + is_async ) <S2SV_ModEnd> && c -> <S2SV_ModStart> n, 1 <S2SV_ModEnd> ) ; if <S2SV_ModStart> n, 3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart>, 4 + is_async <S2SV_ModEnd> ) ; n_ifs",0
77,<S2SV_ModStart> NULL ; } dst_state -> curframe = src -> curframe ;,0
78,"<S2SV_ModStart> write_mb_modes_kf ( const MACROBLOCKD * const xd, const MACROBLOCKD * const xd, const MODE_INFO * const xd, const MODE_INFO * const xd, const MODE_INFO * const left_mi, const MB_MODE_INFO * const mbmi = & mi -> mbmi ; const BLOCK_SIZE bsize = mbmi -> sb_type ; if ( seg -> update_map ) write_segment_id ( w, seg, mbmi -> segment_id ) ; write_skip ( cpi, mbmi -> segment_id, mi, w ) ; if ( bsize >= BLOCK_8X8 && cm -> tx_mode == TX_MODE_SELECT ) write_selected_tx_size ( cpi, mbmi -> tx_size, bsize, w ) ; if ( bsize >= BLOCK_8X8 && cm -> tx_mode == TX_MODE_SELECT ) write_intra_mode ( cpi, mi, left_mi, left_mi, 0 ) ; else { <S2SV_ModEnd> write_intra_mode ( w <S2SV_ModStart> w ) ; } <S2SV_ModStart> ( cpi, xd -> <S2SV_ModStart> ( cpi, xd -> <S2SV_ModStart> ( cpi, xd -> <S2SV_ModStart> ( cpi, xd -> <S2SV_ModStart>",0
79,"<S2SV_ModStart> if ( n >= <S2SV_ModEnd> maxn ) SWF_error <S2SV_ModStart> ; # endif if ( n >= maxn ) SWF_error ( ""Action <S2SV_blank> overflow!!"" ) ;",0
80,<S2SV_ModStart> prep ) ) return ( - 1 ) ; <S2SV_ModEnd> n = EXTRACT_32BITS <S2SV_ModStart> ) ) { ND_TTEST ( * ps ) ;,0
81,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
82,"<S2SV_ModStart> * pTable, const <S2SV_ModStart> * * azModuleArg ; int i <S2SV_ModStart> nModuleArg ++ ; if ( i >= 2 ) { sqlite3_free ( db, zArg ) ; return ; }",0
83,<S2SV_ModStart> i ] = ptr_hbe_txposer -> analy_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ <S2SV_ModStart> i ] = ptr_hbe_txposer -> analy_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ <S2SV_ModStart> i ] = ptr_hbe_txposer -> analy_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ <S2SV_ModStart> i ] = ptr_hbe_txposer -> analy_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ <S2SV_ModStart> i ] = ptr_hbe_txposer -> analy_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ <S2SV_ModStart> i ] = ptr_hbe_txposer -> analy_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ <S2SV_ModStart> i ] = ptr_hbe_txposer -> analy_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ <S2SV_ModStart> i ] = ptr_hbe_txposer -> analy_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ <S2SV_ModStart> i ] = ptr_hbe_txposer -> analy_,0
84,<S2SV_ModStart> ) p += ( int ) <S2SV_ModStart> ONIG_STR_BEGIN_LINE ) { if ( p - reg -> dmin < s ) { <S2SV_ModStart> ; } } },0
85,"<S2SV_ModStart> bfq_queue * bfqq, struct bfq_bfqq_timer * timer <S2SV_ModStart> long flags ; if (! timer ) { spin_lock_irqsave ( & bfqd -> lock, flags ) ; if (! bfqd -> in_service_queue ) { spin_unlock_irqrestore ( & bfqd -> lock, flags ) ; return ; } spin_unlock_irqrestore ( & bfqd -> lock, flags ) ; if (! bfqd -> in_service_queue ) { spin_unlock_irqrestore ( & bfqd -> lock, flags ) ; return ; } } <S2SV_ModStart> flags ) ; <S2SV_ModEnd> if ( bfqd",0
86,,1
87,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
88,"<S2SV_ModStart> newDataLength || diffPtr + x > <S2SV_ModEnd> diffBlock + diffBlockLength <S2SV_ModStart> NULL ; } if ( diffPtr + x > diffBlock + diffBlockLength || extraPtr + y > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; }",0
89,"<S2SV_ModStart>, np -> ipv6_opt <S2SV_ModEnd>, np ->",0
90,<S2SV_ModStart> ) ) { MagickBooleanType <S2SV_ModEnd> * status ; <S2SV_ModStart> ) ) { MagickBooleanType <S2SV_ModEnd> * status ; <S2SV_ModStart> ) ) { MagickBooleanType <S2SV_ModEnd> * status ; <S2SV_ModStart> ) ) { MagickBooleanType <S2SV_ModEnd> * status ;,0
91,<S2SV_ModStart> data ) { ( void ) data ;,0
92,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
93,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
94,<S2SV_ModStart> ; if ( mb_offset < 0 || mb_offset < 0 || mb_offset < 0 || mb_offset < 0 || mb_offset < 0 || mb_offset < 0 || mb_offset < 0 || mb_offset < 0 || mb_offset < 0 || mb_offset < 0 || mb_offset < 0 || mb_offset < 0 || mb_offset < 0 || mb_offset < 0 || mb_offset < 0 || mb_offset < 0 || mb_offset < 0 || mb_offset < 0 || mb_offset < 0 || mb_offset < 0 || mb_offset < 0 || mb_offset < 0 || mb_offset < 0 || mb_offset < 0 || mb_offset < 0 || mb_offset < 0 || mb_offset < 0 || mb_offset < 0 || mb_offset < 0 || mb_offset < 0 || mb_offset < 0 || mb_offset < 0 || mb_offset < 0 || mb_offset < 0 || mb_offset < 0 || mb_offset < 0 || mb_offset < 0 || mb_offset < 0 || mb_offset < 0 || mb_offset < 0 || mb_offset < 0 || mb_offset <,0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
97,"<S2SV_ModStart> msicap ; pci_populate_msicap ( dev, msgnum, 0, & msicap, sizeof ( msicap ) <S2SV_ModEnd> ) ; return",0
98,<S2SV_ModStart> -> flags & ( REDIS_NO_PASS | REDIS_NO_PASS ) <S2SV_ModEnd> ) && server,0
99,"<S2SV_ModStart> vpx_rc_t res ; int rc ; if <S2SV_ModEnd> ( cfg -> <S2SV_ModStart> g_lag_in_frames > 1 ) { rc = <S2SV_ModEnd> cfg -> g_pass <S2SV_ModStart> cfg -> g_pass ; if ( rc!= VPX_RC_ONE_PASS ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; } else { rc = VPX_RC_ONE_PASS ; } <S2SV_ModEnd> if ( (",0
100,"<S2SV_ModStart> cpi ) { <S2SV_ModEnd> vp9_init_plane_quantizers ( cpi <S2SV_ModStart> ( cpi, cpi <S2SV_ModEnd> ) ; }",0
101,<S2SV_ModStart> info -> si_code == SIG_ERR ) { <S2SV_ModEnd> return - EPERM <S2SV_ModStart> - EPERM ; },0
102,<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; if ( ptr -> size < 8 ) return GF_ISOM_INVALID_FILE ;,0
103,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
104,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> -> state == fmode <S2SV_ModEnd> ) return ; <S2SV_ModStart> ; if ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> -> state = fmode <S2SV_ModEnd> ; } <S2SV_null>",0
105,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> c == EOF ) && ( <S2SV_ModEnd> c == EOF <S2SV_ModStart> c == EOF ) && ( <S2SV_ModEnd> c == EOF <S2SV_ModStart> c == EOF ) && ( <S2SV_ModEnd> c == EOF <S2SV_ModStart> c == EOF ) && ( <S2SV_ModEnd> c == EOF <S2SV_ModStart> c == EOF ) && ( <S2SV_ModEnd> c == EOF <S2SV_ModStart> c == EOF ) && ( <S2SV_ModEnd> c == EOF <S2SV_ModStart> c == EOF ) && ( <S2SV_ModEnd> c == EOF <S2SV_ModStart> c == EOF ) && ( <S2SV_ModEnd> c == EOF <S2SV_ModStart> c == EOF ) && ( <S2SV_ModEnd> c == EOF <S2SV_ModStart> c == EOF ) && ( <S2SV_ModEnd> c == EOF <S2SV_ModStart> c == EOF ) && ( <S2SV_ModEnd> c == EOF <S2SV_ModStart> c == EOF ) && ( <S2SV_ModEnd> c == EOF <S2SV_ModStart> c == EOF ) && ( <S2SV_ModEnd> c == EOF <S2SV_ModStart> c == EOF ) && ( <S2SV_ModEnd> c == EOF <S2SV_ModStart> c == EOF ) && ( <S2SV_ModEnd> c == EOF <S2SV_ModStart> c == EOF ) && ( <S2SV_ModEnd> c == EOF <S2SV_ModStart> c == EOF ) && ( <S2SV_ModEnd> c == EOF <S2SV_ModStart> c == EOF ) && ( <S2SV_ModEnd> c == EOF <S2SV_ModStart> c == EOF ) && ( <S2SV_ModEnd> c == EOF <S2SV_ModStart> c == EOF ) && ( <S2SV_ModEnd> c == EOF <S2SV_ModStart> c == EOF ) && ( <S2SV_ModEnd> c == EOF <S2SV_ModStart> c == EOF ) && ( <S2SV_ModEnd> c == EOF <S2SV_ModStart> c == EOF ) && (,0
106,<S2SV_ModStart> 0 ; } if ( len > sizeof ( elem. in_sg [ 0 ]. iov_base ) ) { return 0 ; },0
107,"<S2SV_ModStart>, i, <S2SV_ModEnd> JPC_QCX_GETEXPN ( qcd <S2SV_ModStart> i ] ), jpc_qcd_quantum ( ms, i, qcd -> compparms. numguard, qcd -> compparms. numguard, qcd -> compparms. numguard, qcd -> compparms. numguard, qcd -> compparms. numguard, qcd -> compparms. numguard, qcd -> compparms. numguard, qcd -> compparms. numguard, qcd -> compparms. numguard, qcd -> compparms. numguard, qcd -> compparms. numguard, qcd -> compparms. numguard, qcd -> compparms. numguard, qcd -> compparms. numguard, qcd -> compparms. numguard, qcd -> compparms. numguard, qcd -> compparms. numguard, qcd -> compparms. numguard, qcd -> compparms. numguard, qcd -> compparms. numguard, qcd -> compparms. numguard, qcd -> compparms. numguard",0
108,<S2SV_ModStart> else if ( c -> format == CHUNKY ) { avctx -> pix_fmt = AV_PIX_FMT_PAL8 ; } else if ( <S2SV_ModStart> == 8 ) && c -> format == CHUNKY <S2SV_ModStart> -> format == CHUNKY ) && c -> format == CHUNKY <S2SV_ModEnd> ) { avpriv_request_sample,0
109,"<S2SV_ModStart> ) ; } ND_TCHECK_ISO ( ndo, length <S2SV_ModEnd> ) ; return",0
110,"<S2SV_ModStart> image_noffset ) { if ( sig_offset < sizeof ( FIT_SIG_NODENAME ) ) { err_msg = ""Invalid <S2SV_blank> name <S2SV_blank> size <S2SV_blank> for <S2SV_blank> \'%s\'"" ; goto error ; } <S2SV_ModStart> ; } } if ( sig_offset < sizeof ( FIT_SIG_NODENAME ) ) { err_msg = ""Invalid <S2SV_blank> name <S2SV_blank> size <S2SV_blank> for <S2SV_blank> \'%s\'"" ; goto error ; }",0
111,"<S2SV_ModStart> ; if ( kfifo_alloc_zero <S2SV_ModEnd> ( & state <S2SV_ModStart> - ENOMEM ; state -> dev = dev ; sd = & state -> sd ; v4l2_subdev_init ( sd, & cx23888_ir_controller_ops ) ; v4l2_set_subdevdata ( sd, state ) ; snprintf ( sd -> name, sizeof ( sd -> name ), ""%s/888-ir"", dev -> name ) ; sd -> grp_id = CX23885_HW_888_IR ; ret = v4l2_device_register_subdev ( & dev -> v4l2_dev, sd ) ; if ( ret == 0 ) { cx23888_ir_write4 ( dev, CX23888_IR_IRQEN_REG, 0 ) ; mutex_init ( & state -> tx_params_lock ) ; default_params = default_rx_params ; v4l2_subdev_call ( sd, ir, tx_s_parameters, & default_params ) ; mutex_init ( & state -> tx_params_lock ) ; default_params = default_tx_params ; v4l2_subdev_call ( sd, ir, tx_",0
112,"<S2SV_ModStart> * cfg, vpx_codec_dec_cfg_t * cfg_cfg, <S2SV_ModStart> ; res = VPX_CODEC_OK <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ; } ctx -> cfg_id = cfg_cfg ;",0
113,<S2SV_ModStart> ; value |= TJA1100_CONFIG1_MII_MODE_RMII_25 <S2SV_ModEnd> ; tja1100WritePhyReg (,0
114,<S2SV_ModStart> ; if ( icmp_param. len < sizeof ( struct ipcm_cookie ) ) goto out ; if (,0
115,<S2SV_ModStart> ( ( flags & <S2SV_ModEnd> VPX_CODEC_USE_XMA ) && <S2SV_ModStart> ( flags & <S2SV_ModEnd> VPX_CODEC_USE_PSNR ) &&,0
116,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
117,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; LRESERVE_SPACE",0
118,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ) ; return 0 <S2SV_ModStart> break ; } return error <S2SV_ModEnd> ; } <S2SV_null>,1
119,<S2SV_ModStart> len ) ; if ( len < 2 ) { return - 1 ; },0
120,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
121,<S2SV_ModStart> goto trunc ; ND_TCHECK_32BITS <S2SV_ModEnd> ( lshp -> <S2SV_ModStart> ls_type ) ; ND_TCHECK_16BITS <S2SV_ModEnd> ( lshp ->,0
122,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { ret = - EIO ; break ; } <S2SV_ModEnd> * obuf =",0
123,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
124,<S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ),0
125,"<S2SV_ModStart> * costs, vpx_tree <S2SV_ModEnd> tree, const <S2SV_ModStart> tree, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> ) { const vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> ) ; const vpx_tree_index <S2SV_ModEnd> ii = tree",1
126,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> void write_buffer_16x16 (,0
127,"<S2SV_ModStart> c, 0, true",0
128,"<S2SV_ModStart> fadst16 ( const tran_low_t * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_low_t <S2SV_ModEnd> s0, s1 <S2SV_ModStart> 15 ] ; tran_low_t <S2SV_ModEnd> x1 = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x2 = input <S2SV_ModStart> 13 ] ; tran_low_t <S2SV_ModEnd> x3 = input <S2SV_ModStart> 13 ] ; tran_low_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 13 ] ; tran_low_t <S2SV_ModEnd> x5 = input <S2SV_ModStart> 11 ] ; tran_low_t <S2SV_ModEnd> x5 = input <S2SV_ModStart> 11 ] ; tran_low_t <S2SV_ModEnd> x7 = input <S2SV_ModStart> 4 ] ; tran_low_t <S2SV_ModEnd> x7 = input <S2SV_ModStart> 7 ] ; tran_low_t <S2SV_ModEnd> x8 = input <S2SV_ModStart> 7 ] ; tran_low_t <S2SV_ModEnd> x9 = input <S2SV_ModStart> 7 ] ; tran_low_t <S2SV_ModEnd> x9 = input <S2SV_ModStart> 7 ] ; tran_low_t <S2SV_ModEnd> x9 = input <S2SV_ModStart> 7 ] ; tran_low_t <S2SV_ModEnd> x9 = input <S2SV_ModStart> 7 ] ; tran_low_t <S2SV_ModEnd> x9 = input <S2SV_ModStart> 7 ] ; tran_low_t <S2SV_ModEnd> x9 = input <S2SV_ModStart> 7 ] ; tran",0
129,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> return flags &,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
131,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd>, int * <S2SV_ModStart> ) { const VP9_COMMON * const cm = & td -> common ; const int mis = cm -> mi_stride ; const int bs = num_8x8_blocks_wide_lookup [ mi <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> [ 0 ] -> mbmi. sb_type ] ; bh = num_8x8_blocks_high_lookup [ mi <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> [ 0 ] -> mbmi. sb_type ] ; if ( bh == bs && bh == bs ) { count_segs ( cpi, tile, mi <S2SV_ModEnd>, mi_8x8, <S2SV_ModStart>, tile, mi <S2SV_ModEnd>, no_pred_segcounts, <S2SV_ModStart>, tile, mi <S2SV_ModEnd>, no_pred_segcounts, <S2SV_ModStart>, tile, mi <S2SV_ModEnd>, no_pred_segcounts, <S2SV_ModStart>, tile, mi <S2SV_ModEnd>, no_pred_segcounts, <S2SV_ModStart>, tile, mi <S2SV_ModEnd> + hbs * <S2SV_ModStart>, tile, mi <S2SV_ModEnd> + hbs * <S2SV_ModStart>, tile, mi <S2SV_ModEnd> + hbs, <S2SV_ModStart>, tile, mi <S2SV_ModEnd> + hbs, <S2SV_ModStart>, tile, mi <S2SV_ModEnd> + hbs, <S2SV_ModStart>, tile, mi <S2SV_ModEnd> +",0
132,<S2SV_ModStart> ; if ( sdslen ( c -> querybuf ) > MAX_QUERY_LEN <S2SV_ModEnd> ) break ;,0
133,<S2SV_ModStart> = 0 ; new. b_size = disksize ;,0
134,"<S2SV_ModStart> = 0 ; int rc ; <S2SV_ModStart>, handle, & rc, <S2SV_ModEnd> & p -> <S2SV_ModStart> -> ai_flags, & rc, <S2SV_ModEnd> & p -> <S2SV_ModStart> -> ai_socktype, & rc, <S2SV_ModEnd> & p -> <S2SV_ModStart> -> ai_protocol, & rc, <S2SV_ModEnd> & p -> <S2SV_ModStart> -> ai_addrlen, & rc, <S2SV_ModEnd> & canonnamelen, <S2SV_ModStart> } if ( rc <S2SV_ModEnd> &&! ( <S2SV_ModStart> -> ai_addrlen && rc <S2SV_ModEnd> &&! ( <S2SV_ModStart> -> ai_addrlen ) rc <S2SV_ModEnd> ) { ret <S2SV_ModStart> } if ( rc <S2SV_ModEnd> && retval!= <S2SV_ModStart> } if ( rc <S2SV_ModEnd> && retval!= <S2SV_ModStart> } if ( rc <S2SV_ModEnd> && retval!= <S2SV_ModStart> } if ( rc <S2SV_ModEnd> && retval!= <S2SV_ModStart> } if ( rc <S2SV_ModEnd> && retval!= <S2SV_ModStart> } if ( rc <S2SV_ModEnd> && retval!= <S2SV_ModStart> } if ( rc <S2SV_ModEnd> && retval!= <S2SV_ModStart> } if ( rc <S2SV_ModEnd> && retval!= <S2SV_ModStart> } if ( rc <S2SV_ModEnd> && retval!= <S2SV_ModStart> } if ( rc <S2SV_ModEnd> && retval!= <S2SV_ModStart> } if ( rc <S2SV_ModEnd> && retval!= <S2SV_ModStart> } if ( rc <S2SV_ModEnd> && retval!= <S2SV_ModStart> } if ( rc <S2SV_ModEnd> && retval!= <S2SV_ModStart> } if ( rc <S2SV_ModEnd> && retval!= <S2SV_ModStart> -> ai_addrlen ) rc <S2SV_ModEnd> ) { ret = <S2SV_ModStart> } if ( rc <S2SV_ModEnd> && retval!= <S2SV_ModStart> -> ai",0
135,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token,",0
136,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
137,"<S2SV_ModStart> __u16 size, const <S2SV_ModStart> data ) { const int * buf ; int ret ; buf = kmalloc ( size, GFP_KERNEL ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
138,"<S2SV_ModStart> * body, const",0
139,"<S2SV_ModStart> * src, <S2SV_ModEnd> unsigned int flags <S2SV_ModStart> >> 4 ; <S2SV_ModEnd> if ( ctx <S2SV_ModStart> write_idx ) ; <S2SV_ModEnd> buf -> ts_start <S2SV_ModStart> -> ts_start = ts_start ; buf -> ts_end = ts_end ; buf -> ts_start = ts_start ; buf -> ts_end = ts_end ; buf -> ts_end = ts_end ; <S2SV_ModEnd> return 0 ;",0
140,"<S2SV_ModStart>. sharpness ; const int q_max_filter_level = cm -> frame_type == KEY_FRAME? 0 : cpi -> oxcf. sharpness ; <S2SV_ModStart> cpi ) ; <S2SV_ModEnd> int filt_guess = <S2SV_ModStart> int filt_guess = ROUND_POWER_OF_TWO_TWO_LONG <S2SV_ModEnd> ( q * <S2SV_ModStart> + 1015158, 18 ) ; if ( filt_guess < MIN_FILTER_LEVEL ) { vp9_set_filter_level ( sd, cpi, cpi -> oxcf. sharpness_level, MIN_FILTER_LEVEL ) ; } else { vp9_set_filter_level ( sd, cpi -> oxcf. sharpness_level, MIN_FILTER_LEVEL ) ; } else { vp9_set_filter_level ( sd, cpi -> oxcf. sharpness_level, MIN_FILTER_LEVEL ) ; } else { vp9_set_filter_level ( sd, cpi -> oxcf. sharpness_level, MIN_FILTER_LEVEL ) ; vp9_set_filter_level ( sd, cpi -> oxcf. sharpness_level, MIN_FILTER_LEVEL ) ; vp9_set_filter_level",0
141,<S2SV_ModStart> NULL ) ; <S2SV_ModEnd> btif_storage_load_autopair_device_list ( ),0
142,<S2SV_ModStart> = getnum ( *,0
143,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
144,"<S2SV_ModStart> vpx_codec_err_t res ; int ret ; <S2SV_ModStart>. decode ( & ret <S2SV_ModEnd>, data,",0
145,"<S2SV_ModStart> inode * inode, struct super_block * sb, struct buffer_head * de_buf <S2SV_ModStart> inode ) ; <S2SV_ModEnd> de_buf = ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> inode -> i_mode",0
146,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> k ) ; sendBuffer ( outputbuffer ) ;",0
147,<S2SV_ModStart> self ) { if ( self -> type == AST_TYPE_NONE ) return ;,0
148,<S2SV_ModStart> ( ) ; if (! a ) return NULL ; <S2SV_ModStart> (! i && n ) return NULL ; <S2SV_ModEnd> n = suffix_object,0
149,"<S2SV_ModStart> ; if ( _PyObject_HasAttrId <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; Py_ssize_t i <S2SV_ModEnd> ; if ( <S2SV_ModStart> ++ ) { const <S2SV_ModStart>, i, _PyObject_GetAttrId <S2SV_ModEnd> ( tmp, <S2SV_ModStart>, i, _PyObject_GetAttrId <S2SV_ModEnd> ( tmp, <S2SV_ModStart>, i, _PyObject_GetAttrId <S2SV_ModEnd> ( tmp, <S2SV_ModStart>, i, _PyObject_GetAttrId <S2SV_ModEnd> ( tmp, <S2SV_ModStart>, i, _PyObject_GetAttrId <S2SV_ModEnd> ( tmp, <S2SV_ModStart>, i, _PyObject_GetAttrId <S2SV_ModEnd> ( tmp, <S2SV_ModStart>, i, _PyObject_GetAttrId <S2SV_ModEnd> ( tmp, <S2SV_ModStart>, i, _PyObject_GetAttrId <S2SV_ModEnd> ( tmp, <S2SV_ModStart>, i, _PyObject_GetAttrId <S2SV_ModEnd> ( tmp, <S2SV_ModStart>, i, _PyObject_GetAttrId <S2SV_ModEnd> ( tmp, <S2SV_ModStart>, i, _PyObject_GetAttrId <S2SV_ModEnd> ( tmp, <S2SV_ModStart>, i, _PyObject_GetAttrId <S2SV_ModEnd> ( tmp, <S2SV_ModStart>, i, _PyObject_GetAttrId <S2SV_ModEnd> ( tmp, <S2SV_ModStart>, i, _PyObject_GetAttrId <S2SV_ModEnd> ( tmp, <S2SV_ModStart>, i, _PyObject_GetAttrId <S2SV_ModEnd> ( tmp, <S2SV_ModStart>, i, _PyObject_GetAttrId <S2SV_ModEnd> ( tmp",0
150,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
151,"<S2SV_ModStart> msg ) ; err = verify_compat_iovec ( msg_sys, iov, & addr, VERIFY_WRITE ) ; if ( err < 0 ) goto out_freeiov ; total_len = err ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; <S2SV_ModStart> msg_control ; msg_sys -> msg_control <S2SV_ModEnd> = flags & <S2SV_ModStart> msg_control ; msg_sys -> msg_control <S2SV_ModEnd> = flags & <S2SV_ModStart> msg_control ; msg_sys -> msg_control <S2SV_ModEnd> = flags & <S2SV_ModStart> msg_control ; msg_sys -> msg_control <S2SV_ModEnd> = flags & <S2SV_ModStart> msg_control ; msg_sys -> msg_control <S2SV_ModEnd> = flags & <S2SV_ModStart> msg_control ; msg_sys -> msg_control <S2SV_ModEnd> = flags &",0
152,<S2SV_ModStart> * dibh = gfs2_sb_bh ( inode ) <S2SV_ModEnd> ; u64 bn <S2SV_ModStart> end_of_metadata = height <S2SV_ModEnd> ; int eob,0
153,"<S2SV_ModStart>, ""Codec: <S2SV_blank> %s\\n"", vpx_codec_interface_name <S2SV_ModEnd> ( global -> <S2SV_ModStart> -> codec -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ""I420"" : ""YV12"" ) ; } if ( stream -> next || stream -> index ) fprintf ( stderr, ""Destination <S2SV_blank> file: <S2SV_blank> %s\\n"", stream -> config. out_fn ) ; fprintf ( stderr, ""Encoder <S2SV_blank> parameters:\\n"" ) ; SHOW ( rc_resize_allowed ) ; SHOW ( rc_resize_up_thresh ) ; SHOW ( rc_resize_down_thresh ) ; SHOW ( rc_end_usage ) ; } else { SHOW ( rc_resize_allowed ) ; SHOW ( rc_resize_allowed ) ; SHOW ( rc_resize_allowed ) ; SHOW ( rc_resize_up_thresh ) ; SHOW ( rc_resize_up_thresh ) ; SHOW ( rc_resize_down_thresh ) ; SHOW ( rc_end_usage ) ; } # ifdef CONFIG_VP9_HIGHBITDEPTH if ( global -> config. use_i420 ) { # endif # ifdef CONFIG_VP9_HIGHBITDEPTH if ( global -> config. use_i420 ) # endif",0
154,"<S2SV_ModStart> ) ; } if ( ctxt -> insert ) { xmlFreeDoc ( ctxt, attr ) ; ctxt -> insert = NULL ; }",0
155,"<S2SV_ModStart> 0 ) { copy_file_safe <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> g, 0644, & tmp_umask ) ; } else { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } } free ( fname ) ; } else { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } } free ( fname ) ; } else { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch",0
156,<S2SV_ModStart> msix_tab_size ) { <S2SV_ModEnd> bzero ( msixcap,1
157,<S2SV_ModStart> ; if ( <S2SV_ModEnd> js_regexec ( re,0
158,<S2SV_ModStart> : if ( ( size > sizeof ( value ) ) || ( <S2SV_ModStart> value ) dest ) ) <S2SV_ModEnd> ; break ;,0
159,"<S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; ksz8851WriteReg <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; ksz8851WriteReg <S2SV_ModStart> ( interface, KSZ8851_ISR ) ; if ( ( isr & ISR_LCIS )!= 0 ) { ier &= ~ IER_LCIE <S2SV_ModEnd> ; interface -> <S2SV_ModStart> ( interface, KSZ8851_ISR, ISR_TXIS ) ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } } if ( ( isr & ISR_RXIS )!= 0 ) { ier &= ~ IER_RXIE <S2SV_ModEnd> ; interface -> <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd>, ier )",0
160,"<S2SV_ModStart> void encode_quantization ( vpx_write_bit_buffer <S2SV_ModEnd> * cm, <S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
161,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> ]. fd ),0
162,"<S2SV_ModStart> ( env, ""ca_validate_pubkey"" <S2SV_ModEnd> ) ) ;",0
163,<S2SV_ModStart> ( ) ; if (! t1_line_ptr ) { t1_getline ( ) ; t1_getline ( ) ; },0
164,"<S2SV_ModStart>, BLOCK_SIZE subsize, int * pb <S2SV_ModStart> int bsl = b_width_log2_max <S2SV_ModEnd> ( bsize ) <S2SV_ModStart> / 4 ; const int partition_id = mi_row + subsize ; const int partition_id = mi_row + subsize ; const int partition_id = mi_col + hbs ; const int partition_id = mi_col + hbs ; const int partition_id = mi_col + hbs ; const int partition_id = mi_col + hbs ; const int partition_id = mi_col + hbs ; const int partition_id = mi_col + hbs ; const int partition_id = mi_col + hbs ; const int partition_id = mi_col + hbs ; const int partition_id = mi_col + hbs ; const int partition_id = mi_col + hbs ; const int partition_id = mi_col + hbs ; const int partition_id = mi_col + partition_id ; const int partition_id = mi_col + partition_id ; const int partition_id = mi_col + partition_id <S2SV_ModEnd> ; if ( <S2SV_ModStart> case PARTITION_NONE : if",0
165,<S2SV_ModStart> key_ref ) ; if ( key -> type -> read ) { down_read ( & key -> sem ) ; ret = key_validate ( key ) ; up_read ( & key -> sem ) ; ret = key_validate ( key ) ; up_read ( & key -> sem ) ; },0
166,<S2SV_ModStart> -> u4_first_slice_in_pic = 1 <S2SV_ModEnd> ; ps_dec ->,0
167,<S2SV_ModStart> var_off ) ; if (! insn_bitness ) { <S2SV_ModStart> var_off ) ; } else { u64 tmp_reg_off = tnum_is_const ( insn -> code ) ; tmp_reg_off = tnum_is_const ( tmp_reg_off ) ; tmp_reg_off = tnum_is_const ( tmp_reg_off ) ; },0
168,"<S2SV_ModStart> ( 1, ""file <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> file <S2SV_blank> name"" <S2SV_ModEnd> ) ; goto",0
169,<S2SV_ModStart> = cookie ; <S2SV_ModEnd> req -> rmt_options <S2SV_ModStart> = cookie ; <S2SV_ModEnd> req -> rmt_options <S2SV_ModStart> = cookie ; <S2SV_ModEnd> req -> rmt_options <S2SV_ModStart> = cookie ; <S2SV_ModEnd> req -> rmt_options <S2SV_ModStart> = cookie ; <S2SV_ModEnd> req -> rcu_options <S2SV_ModStart> = cookie ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
170,"<S2SV_ModStart> ) { int i, j ; uint32_t number_of_frames ; SvcInternal_t <S2SV_ModEnd> * const si <S2SV_ModStart> svc_ctx ) ; if ( svc_ctx -> decode_frame_count > MAX_ENC_FRAME_COUNT ) { svc_log_reset ( svc_ctx ) ; return NULL ; } <S2SV_ModStart> <= 0 ) { svc_ctx -> decode_frame_count = MAX_ENC_FRAME_COUNT ; svc_log_reset ( svc_ctx ) ; } <S2SV_ModEnd> svc_log ( svc_ctx <S2SV_ModStart> ""\\n"" ) ; <S2SV_ModEnd> number_of_keyframes = encode_frame_count <S2SV_ModStart> i ) { if ( svc_ctx -> encoding_mode == ALT_INTER_LAYER_PREDICTION_IP ) { svc_ctx -> decode_frame_count = MAX_ENC_FRAME_COUNT ; svc_log_reset ( svc_ctx ) ; } else { svc_ctx -> decode_frame_count = MAX_ENC_FRAME_COUNT ; svc_log_reset ( svc_ctx ) ; } svc_log_reset ( svc_ctx ) ; <S2SV_ModStart> number_of_keyframes = encode_frame_count <S2SV_ModEnd> ; for ( <S2SV_ModStart> i ) { if ( svc_",0
171,<S2SV_ModStart> = new_cols ; <S2SV_ModEnd> screen -> sb_buffer,0
172,"<S2SV_ModStart> n ) { int literal_start = * str ; int literal_end = 0 ; int in_named_escape = 0 ; int result = 0 ; int result = 0 ; for ( ; * str < end ; ( * str ) ++ ) { char ch = * str ; if (! in_named_escape && ch == '{' && ( * str ) - literal_start >= 2 && * ( * str + 1 ) == 'N' ) { in_named_escape = 1 ; } else if ( in_named_escape && ch == '}' ) { in_named_escape = 1 ; } else if ( in_named_escape && ch == '}' ) { in_named_escape = 0 ; } else if ( * str + 1 < end && * ( * str + 1 ) == ch ) {literal_end = * str + 1 ; result = 1 ; goto done ; } if ( * str == end ) { ast_error ( c, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; return - 1 ; } } <S2SV_ModStart> str < end && * str == end <S2SV_ModStart> * str + 1 <S2SV_ModEnd> && * ( <S2SV_ModStart> * str + 1 <S2SV_ModEnd> )",0
173,<S2SV_ModStart> ( ) ; const char * dd_filename = create_dump_dir_from_problem_data_from_problem_data ( pd ) ; if ( dd_filename!= NULL ) { <S2SV_ModStart> g_settings_dump_location ) ; },0
174,<S2SV_ModStart> ) ; } <S2SV_ModEnd> ptr -> frameCount <S2SV_ModStart> ) ; } <S2SV_ModEnd> ptr -> frameCount,0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",0
176,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if",0
177,"<S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> MI_BLOCK_SIZE ) { <S2SV_ModEnd> int dummy_rate = <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> + idx_str ; <S2SV_ModEnd> cpi -> mb <S2SV_ModStart> = UINT_MAX ; cpi -> mb. source_variance = UINT_MAX ; vp9_zero ( cpi -> mb. pred_mv ) ; switch ( cpi -> sf. partition_search_type ) { case VAR_BASED_PARTITION : choose_partitioning ( cpi, tile, mi_row, mi_col ) ; if ( cpi -> sf. partition_search_type ) choose_partitioning ( cpi, tile, mi_row, mi_col, BLOCK_64X64, 1, & dummy_dist ) ; break ; case SOURCE_VAR_BASED_PARTITION : set_offsets ( cpi, tile, mi_row, mi_col, BLOCK_64X64, 1, & dummy_dist ) ; break ; case SOURCE_VAR_BASED_",0
178,"<S2SV_ModStart> u_int8_t state ; struct dccp_hdr _dh ; struct dccp_hdr _dh ; <S2SV_ModStart>, & dh <S2SV_ModEnd> ) ; state",0
179,"<S2SV_ModStart> ip_options * * optp <S2SV_ModEnd>, struct ip_options <S2SV_ModStart> & 3 ) optp <S2SV_ModEnd> -> __data [ <S2SV_ModStart> = IPOPT_END ; optp <S2SV_ModEnd> -> optlen = <S2SV_ModStart> ; if ( optp <S2SV_ModEnd> && ip_options_compile (",0
180,"<S2SV_ModStart> ; if ( connection == NULL || strcmp ( connection, ""Connection"" ) == 0 <S2SV_ModEnd> ) goto error <S2SV_ModStart> ; if ( connection == NULL || strcmp ( connection, ""Connection"" ) == 0 <S2SV_ModEnd> ) goto error",0
181,<S2SV_ModStart> * findalldevs_if ; int <S2SV_ModEnd> nif = 0 <S2SV_ModStart> 0 ; } if ( plen > sizeof ( struct rpcap_sockaddr ) ) { return - 1 ; } <S2SV_ModStart> next ) { int <S2SV_ModEnd> if ( d <S2SV_ModStart> -> description ) { int <S2SV_ModEnd> if ( d <S2SV_ModStart> -> name ) { int <S2SV_ModEnd> if ( d <S2SV_ModStart> -> name ) { int <S2SV_ModEnd> if ( d <S2SV_ModStart> -> name ) { int <S2SV_ModEnd> if ( d <S2SV_ModStart> -> name ) { int <S2SV_ModEnd> if ( d <S2SV_ModStart> -> name ) { int <S2SV_ModEnd> if ( d <S2SV_ModStart> -> name ) { int <S2SV_ModEnd> if ( d <S2SV_ModStart> -> name ) { int <S2SV_ModEnd> if ( d <S2SV_ModStart> -> len ) { int <S2SV_ModEnd> if ( d <S2SV_ModStart> -> len ; } } } } } <S2SV_ModEnd> for ( address,0
182,"<S2SV_ModStart> ""basename"" ) ; const gchar * path_file = g_hash_table_lookup ( problem_info, ""file"" ) ; <S2SV_ModStart> client_uid, DEFAULT_DUMP_DIR_MODE, path_file",0
183,<S2SV_ModStart> -> columns - 3 <S2SV_ModEnd> ) ; x <S2SV_ModStart> -> columns % 3 <S2SV_ModEnd> ) ; bit <S2SV_ModStart> -> columns % 3 <S2SV_ModEnd> ) ; bit <S2SV_ModStart> -> columns % 3 <S2SV_ModEnd> ) ; bit <S2SV_ModStart> -> columns % 3 <S2SV_ModEnd> ) ; bit <S2SV_ModStart> -> columns % 3 <S2SV_ModEnd> ) ; bit <S2SV_ModStart> -> columns % 3 <S2SV_ModEnd> ) ; bit <S2SV_ModStart> -> columns % 3 <S2SV_ModEnd> ) ; bit <S2SV_ModStart> -> columns % 3 <S2SV_ModEnd> ) ; bit <S2SV_ModStart> -> columns % 3 <S2SV_ModEnd> ) ; bit <S2SV_ModStart> -> columns % 3 <S2SV_ModEnd> ) ; bit <S2SV_ModStart> -> columns % 3 <S2SV_ModEnd> ) ; bit <S2SV_ModStart> -> columns % 3 <S2SV_ModEnd> ) ; bit <S2SV_ModStart> -> columns % 3 <S2SV_ModEnd> ) ; bit <S2SV_ModStart> -> columns % 3 <S2SV_ModEnd> ) ; bit <S2SV_ModStart> -> columns % 3 <S2SV_ModEnd> ) ; bit <S2SV_ModStart> -> columns % 3 <S2SV_ModEnd> ) ; bit <S2SV_ModStart> -> columns % 3 <S2SV_ModEnd> ) ; bit <S2SV_ModStart> -> columns % 3 <S2SV_ModEnd> ) ; bit <S2SV_ModStart> -> columns % 3 <S2SV_ModEnd> ) ; bit <S2SV_ModStart> -> columns % 3 <S2SV_ModEnd> ) ; bit <S2SV_ModStart> -> columns % 3 <S2SV_ModEnd> ) ; bit <S2SV_ModStart> -> columns % 3 <S2SV_ModEnd> ) ; bit <S2SV_ModStart> -> columns % 3 <S2SV_ModEnd> ) ; bit <S2SV_ModStart> -> columns % 3 <S2SV_ModEnd> ) ; bit <S2SV_ModStart> -> columns % 3 <S2SV_ModEnd> ) ; bit <S2SV_ModStart> -> columns % 3 <S2SV_ModEnd> ) ; bit <S2SV_ModStart> -> columns % 3 <S2SV_ModEnd> ) ; bit <S2SV_ModStart> ->,0
184,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
185,<S2SV_ModStart> ( num_images > 1 <S2SV_ModEnd> ) { ThrowReaderException,0
186,"<S2SV_ModStart> ( vec, 0 <S2SV_ModEnd> ) ) ND_PRINT",0
187,"<S2SV_ModStart>! ptrace_has_cap ( task <S2SV_ModEnd> -> user_ns,",0
188,<S2SV_ModStart>  maxval ) { jas_matind_t i ; jas_matind_t j ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,0
189,<S2SV_ModStart> = 1 ; ihevcd_parse_user_data_registered_itu_t_t_t <S2SV_ModEnd> ( ps_codec ),0
190,<S2SV_ModStart> ; if ( <S2SV_ModEnd> hFI1_CAP_IS_KSET ( SDMA <S2SV_ModStart> ) ) { <S2SV_ModEnd> ret = sdma_set_pr_key <S2SV_ModStart> ; if ( <S2SV_ModEnd> ret ) {,0
191,"<S2SV_ModStart>, int rep_quick, my_off_t no_data_size <S2SV_ModStart> { int got_error <S2SV_ModEnd> ; ulong rec_length <S2SV_ModStart> - 1 ; if ( no_data_size > MAX_DATA_SIZE ) { my_error = MY_ERROR_INVALID_DATA_SIZE ; }",0
192,<S2SV_ModStart> } pairs = palloc0 <S2SV_ModEnd> ( pcount *,0
193,"<S2SV_ModStart> val ) ; if (! <S2SV_ModStart>, val ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> command"", r -> name )",0
194,"<S2SV_ModStart> ; } } if ( strlen ( qend ) > MAX_PATHLEN ) { return bad_request ( c, 400, __LINE__ ) ; }",0
195,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> 256 ] ; tran_low_t <S2SV_ModEnd> * outptr = <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16 <S2SV_ModStart> ++ j ) out <S2SV_ModEnd> [ j *",0
196,"<S2SV_ModStart> = g_strconcat ( ""application-escape <S2SV_blank> \'%s\' <S2SV_blank> \'%s\' <S2SV_blank> \'%s\' <S2SV_blank> \'%s\' <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, app, <S2SV_ModStart> = g_strconcat ( ""application-escape <S2SV_blank> \'%s\' <S2SV_blank> \'%s\' <S2SV_blank> \'%s\' <S2SV_blank> \'%s\' <S2SV_blank> \'%s\' <S2SV_blank> \'%s"" <S2SV_ModEnd>, app,",0
197,"<S2SV_ModStart> '\\0' ) ; const char * temp_filename = osi_calloc ( strlen ( filename ) + 5 ) ; if (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } for ( const list_node_t * enode = list_begin ( section -> entries ) ; enode!= list_end ( section -> entries ) ; enode = list_next ( enode ) ) { const entry_t * entry = ( const entry_t * ) list_node ( enode ) ; const entry_t * entry = ( const entry_t * ) list_node ( enode ) ; const entry_t * entry = ( const entry_t * ) list_node ( entry -> value ) ; } if ( list_next ( node )!= list_end ( config -> sections ) ) fputc ( '\\n', fp ) ; } if ( list_next ( node )!= list_end ( config -> sections ) ) fputc ( '\\n', fp ) ; } if ( chmod ( temp_filename, S_IRUSR | S_IWUSR | S_",0
198,"<S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ;",0
199,"<S2SV_ModStart> -> userData, NULL, <S2SV_ModStart> -> userData, NULL,",0
200,"<S2SV_ModStart> ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %u\\r\\n"" <S2SV_ModEnd> ""%s"" ""\\r\\n"" ""%s"",",0
201,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> copy_file ( src <S2SV_ModStart> ( src, <S2SV_ModEnd> getuid ( ) <S2SV_ModStart> getgid ( ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> S_IRUSR | S_IWUSR <S2SV_ModEnd> ) < 0",0
202,<S2SV_ModStart>!= BFA_STATUS_OK ) { kfree ( fcstats ) ; <S2SV_ModStart> return NULL ; },1
203,"<S2SV_ModStart> -> x = Max <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> y = Max <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> z = Max <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> z = Max <S2SV_ModEnd> ( 1.0f,",0
204,<S2SV_ModStart> ; rec -> sasl_username <S2SV_ModEnd> = src -> <S2SV_ModStart> ; rec -> sasl_password <S2SV_ModEnd> = src ->,0
205,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
206,"<S2SV_ModStart> o, datao ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteCanonEntry ) )",0
207,<S2SV_ModStart> ; } } if ( info -> file_name ) { <S2SV_ModStart> filename ) ; },0
208,"<S2SV_ModStart> olen ) { size_t alloc ; size_t alloc ; size_t alloc ; size_t alloc <S2SV_ModEnd> ; char * <S2SV_ModStart> long hex ; <S2SV_ModEnd> if (! <S2SV_ModStart> hex ) ; alloc = <S2SV_ModEnd> Curl_convert_from_network ( handle <S2SV_ModStart> ( handle, & in, 1, & alloc <S2SV_ModEnd> ) ; if <S2SV_ModStart> if ( res && alloc > 0 ) { free ( ns ) ; return NULL ; } <S2SV_ModEnd> free ( ns <S2SV_ModStart> * olen = alloc <S2SV_ModEnd> ; return ns",0
209,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
210,<S2SV_ModStart> ; def -> pdu_free_state_ref <S2SV_ModEnd> = usm_free_usmStateReference ;,0
211,"<S2SV_ModStart> NULL ; return <S2SV_ModEnd> match ( prog <S2SV_ModStart> | eflags, sub, prog -> nsub <S2SV_ModEnd> ) ; }",0
212,"<S2SV_ModStart> idx ] ; if ( var_val_type == ASN_INTEGER ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> type <S2SV_blank>!= <S2SV_blank> int\\n"" ) ; return SNMP_ERR_WRONGTYPE ; } <S2SV_ModStart> NETSNMP_NO_WRITE_SUPPORT switch ( <S2SV_ModEnd> action ) { <S2SV_ModStart> case MODE_SET_RESERVE1 : if ( var_val_type == ASN_INTEGER ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> type <S2SV_blank>!= <S2SV_blank> int\\n"" ) ; return SNMP_ERR_WRONGVALUE ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> return SNMP_ERR_NOERROR ;",0
213,<S2SV_ModStart> ) ; } if ( i + count > number_pixels ) return ( i ) ;,0
214,"<S2SV_ModStart> timer ) ; list_for_each_entry_safe_safe <S2SV_ModEnd> ( slave, <S2SV_ModStart> open_list ) { spin_lock_irq ( & slave_active_lock ) ; _snd_timer_stop ( slave, 1, SNDRV_TIMER_EVENT_RESOLUTION ) ; list_move_tail ( & slave -> open_list, & snd_timer_slave_list ) ; slave -> master = NULL ; spin_unlock_irq ( & slave_active_lock ) ; <S2SV_ModStart> = NULL ; } spin_unlock_irq ( & slave_active_lock ) ; <S2SV_ModEnd> mutex_unlock ( &",0
215,<S2SV_ModStart> -> u1_dpb_commands_read ) { <S2SV_ModStart> ( ps_dec ) ; ps_dec -> u4_ofst += ps_dec -> u4_bitoffset ; } else { ps_dec -> u4_bitoffset = 0,0
216,<S2SV_ModStart> = gifFilePtr -> ImageCount <S2SV_ModEnd> ; int_fast32_t heightOverflow <S2SV_ModStart> = gifFilePtr -> ImageCount <S2SV_ModEnd> * gifFilePtr -> <S2SV_ModStart> = gifFilePtr -> ImageCount <S2SV_ModEnd> * gifFilePtr -> <S2SV_ModStart> = gifFilePtr -> ImageCount <S2SV_ModEnd> * gifFilePtr -> <S2SV_ModStart> = gifFilePtr -> ImageCount <S2SV_ModEnd> * gifFilePtr -> <S2SV_ModStart> = gifFilePtr -> ImageCount <S2SV_ModEnd> * gifFilePtr -> <S2SV_ModStart> = gifFilePtr -> ImageCount <S2SV_ModEnd> * gifFilePtr -> <S2SV_ModStart> = gifFilePtr -> ImageCount <S2SV_ModEnd> * gifFilePtr -> <S2SV_ModStart> = gifFilePtr -> ImageCount <S2SV_ModEnd> * gifFilePtr -> <S2SV_ModStart> = gifFilePtr -> ImageCount <S2SV_ModEnd> * gifFilePtr -> <S2SV_ModStart> = gifFilePtr -> ImageCount <S2SV_ModEnd> * gifFilePtr ->,0
217,<S2SV_ModStart> NULL ) || conn -> validator -> passwd. buf == NULL ||,0
218,"<S2SV_ModStart> bus ] ; if ( bi == NULL ) { pr_err ( ""%s: <S2SV_blank> pci <S2SV_blank> [%s] <S2SV_blank> has <S2SV_blank> invalid <S2SV_blank> bus <S2SV_blank> [%d]\\n"", __func__, dev -> bus, dev -> bus ) ; return ; } <S2SV_ModEnd> si = &",0
219,"<S2SV_ModStart>, timeo ) <S2SV_ModEnd> ; if (",1
220,<S2SV_ModStart> += 9 ; t1mac_isspace <S2SV_ModEnd> ( * s <S2SV_ModStart>! isspace ( t1mac_isspace ( * t ) && <S2SV_ModStart> t ) ) { <S2SV_ModStart> t ++ ; },0
221,"<S2SV_ModStart> ; result = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL, NULL ) ) ; if ( result == - ETIMEDOUT <S2SV_ModEnd> ) { BTIF_TRACE_EVENT",0
222,"<S2SV_ModStart> msicap msixcap ; if <S2SV_ModEnd> ( msgnum >= <S2SV_ModStart> MAX_MSIX_TABLE_ENTRIES ) ; if <S2SV_ModEnd> ( barnum >= <S2SV_ModStart> dev, msgnum ) return - ENODEV ; pci_msix_table_init ( dev, msgnum",0
223,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> * rb, vpx_read_bit_buffer <S2SV_ModEnd> max ) { <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb, <S2SV_ModStart> get_unsigned_bits ( max, data",0
224,<S2SV_ModStart> == NULL ) { ASN1_INTEGER_free ( is -> serial ) ; <S2SV_ModStart> goto cleanup ; },0
225,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> select_tx_mode ( const <S2SV_ModStart> cpi ) { const int rc = TX_MODE_SELECT ; if ( rc!= TX_MODE_SELECT ) rc = TX_MODE_SELECT ; <S2SV_ModStart> lossless ) { rc = ONLY_4X4 ; } else rc = TX_MODE_SELECT ; } else rc = TX_MODE_SELECT ; } else rc = TX_MODE_SELECT ; <S2SV_ModEnd> if ( cpi <S2SV_ModStart> else if ( rc <S2SV_ModEnd> == USE_LARGESTALL ) <S2SV_ModStart> USE_FULL_RD ) { rc = <S2SV_ModEnd> cpi -> tx_select_threshes <S2SV_ModStart> ; } } return rc ;,0
226,<S2SV_ModStart> ) ) { if ( im -> prline_cnt > MAX_PRINT_SIZE ) { <S2SV_ModStart> ) ; } },0
227,<S2SV_ModStart> ; if ( buf2 -> size > MAX_SIZE_PER_BLOCK ) { return 0 ; } if (,0
228,<S2SV_ModStart> NULL ; size_t sz ; if ( size > MAX_SIZE_PAGES ) return NULL ; <S2SV_ModStart> + size ; if ( size > MAX_SIZE_PAGES ) return NULL ;,0
229,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,1
230,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
231,<S2SV_ModStart> ; r = sd_event_add_io_event <S2SV_ModEnd> ( b ->,0
232,<S2SV_ModStart> ( ) ; errors += test_curl_off_formatting ( ) ;,0
233,<S2SV_ModStart> -> lun ) sas_eh_defer_cmd <S2SV_ModEnd> ( cmd ),0
234,"<S2SV_ModStart>, end_col_offset ; int num_funcdef_ops ; <S2SV_ModStart> end_col_offset ) ; num_funcdef_ops = <S2SV_ModEnd> AsyncFunctionDef ( name <S2SV_ModStart>, line, num_funcdef_ops, & num_funcdef_ops <S2SV_ModEnd> ) ; else <S2SV_ModStart> return FunctionDef ( num_funcdef_ops <S2SV_ModEnd>, args, <S2SV_ModStart>, line, num_funcdef_ops, & num_funcdef_ops <S2SV_ModEnd> ) ; }",0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,<S2SV_ModStart> ; if ( WPG_Palette. NumOfEntries > WPG_Palette. NumOfEntries ) { if ( <S2SV_ModStart> ) break ; } <S2SV_ModStart> ) break ; if ( WPG_Palette. NumOfEntries > WPG_Palette. NumOfEntries ) { <S2SV_ModStart> ) break ; },0
237,,1
238,<S2SV_ModStart> 0 ) ; if (! res ) return - ENOMEM ;,0
239,<S2SV_ModStart> : if ( ( size_t ) <S2SV_ModStart> ; if ( ( size_t ) <S2SV_ModStart> : if ( ( size_t ) <S2SV_ModStart> ; if ( ( size_t ) <S2SV_ModStart> ; if ( ( size_t ) <S2SV_ModStart> ; if ( ( size_t ) <S2SV_ModStart> ; if ( ( size_t ) <S2SV_ModStart> ; if ( ( size_t ) <S2SV_ModStart> ; if ( ( size_t ) <S2SV_ModStart> ; if ( ( size_t ) <S2SV_ModStart> ; if ( ( size_t ) <S2SV_ModStart> ; if ( ( size_t ) <S2SV_ModStart> ; if ( ( size_t ) <S2SV_ModStart> ; if ( ( size_t ),0
240,<S2SV_ModStart> u4_ofst ) ; if ( ps_cabac -> u4_ofst == NULL ) return ( ( IHEVCD_ERROR_T ) IHEVCD_SUCCESS ) ;,0
241,<S2SV_ModStart> ) ) { if ( line -> type == MD_LINE_BLANK ) { <S2SV_ModStart> ) ; } },0
242,<S2SV_ModStart> perf_event_context * ctx ; struct perf_event_ctx * ctx ; ctx = event -> ctx ; ctx = ctx -> task ; if (! ctx ) return ; ctx <S2SV_ModStart> event ) ; ctx = ctx -> task ;,0
243,<S2SV_ModStart> -> post_proc_flag = <S2SV_ModEnd> ( ctx -> <S2SV_ModStart>. noise_level ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
244,<S2SV_ModStart> = 0 ; ND_TCHECK_16BITS ( msg4 -> msg_len ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( msg4 -> msg_len ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( msg4 -> msg_len ) ;,0
245,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> = 0 ; vpx_usec_timer_start ( & timer ) ; if ( cpi -> active_map_enabled ) { vp8_pop_neon ( store_reg ) ; } <S2SV_ModEnd> v8_push_neon ( store_reg <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,0
246,"<S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" <S2SV_ModEnd> ) ; exit <S2SV_ModStart> int rv = copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> ( src, <S2SV_ModEnd> dest ) ;",0
247,<S2SV_ModStart> = 0 ; ptr_hbe_txposer -> num_samples = 0 ; ptr_hbe_txposer -> num_samples = 0 ;,0
248,<S2SV_ModStart> prov_spec = parsed_require_line ; lua_setstack_depth ( L ) <S2SV_ModStart> ) ) { lua_setstack_depth ( L ) ; <S2SV_ModStart> ) ) { lua_setstack_depth ( L ) ; <S2SV_ModStart> ) ) { lua_setstack_depth ( L ) ;,0
249,<S2SV_ModStart> ; if ( <S2SV_ModEnd> dpx. file_size <S2SV_ModStart> ) break ; if ( <S2SV_ModEnd> dpx. file_size <S2SV_ModStart> ) break ; if ( <S2SV_ModEnd> dpx. file_size <S2SV_ModStart> ) break ; if ( <S2SV_ModEnd> dpx. file_size <S2SV_ModStart> ) break ; if ( <S2SV_ModEnd> dpx. file_size <S2SV_ModStart> ) break ; if ( <S2SV_ModEnd> dpx. file_size <S2SV_ModStart> ) break ; if ( <S2SV_ModEnd> dpx. file_size <S2SV_ModStart> ) break ; if ( <S2SV_ModEnd> dpx. file_size <S2SV_ModStart> ) break ; if ( <S2SV_ModEnd> dpx. file_size <S2SV_ModStart> ) break ; if ( <S2SV_ModEnd> dpx. file_size <S2SV_ModStart> ) break ; if ( <S2SV_ModEnd> dpx. file_size <S2SV_ModStart> ) break ; if ( <S2SV_ModEnd> dpx. file_size <S2SV_ModStart> ) break ; if ( <S2SV_ModEnd> dpx. file_size <S2SV_ModStart> ) break ; if ( <S2SV_ModEnd> dpx. file_size <S2SV_ModStart> ) break ; if ( <S2SV_ModEnd> dpx. file_size <S2SV_ModStart> ) break ; if ( <S2SV_ModEnd> dpx. file_size <S2SV_ModStart> ) break ; if ( <S2SV_ModEnd> dpx. file_size <S2SV_ModStart> ) break ; if ( <S2SV_ModEnd> dpx. file_size <S2SV_ModStart> ) break ; if ( <S2SV_ModEnd> dpx. file_size <S2SV_ModStart> ) break ; if ( <S2SV_ModEnd> dpx,0
250,<S2SV_ModStart> (! proto_end ||! url,0
251,<S2SV_ModStart> fdt ) ; if ( offset < 0 || offset < 0 || offset < 0 || offset > fdt_off_dt_struct ( fdt ) ) return - FDT_ERR_BADSTRUCTURE ; <S2SV_ModStart> = nextoffset ; if ( offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset < 0 || offset,0
252,<S2SV_ModStart> ( server. shutdown_asap ) closeTimedoutClients ( ) ; if ( server. <S2SV_ModStart> ( server. shutdown_asap ) closeTimedoutClients ( ) ; if ( server. <S2SV_ModStart> ( server. shutdown_asap ) closeTimedoutClients ( ) ; if ( server. <S2SV_ModStart> ( server. shutdown_asap ) closeTimedoutClients ( ) ; if ( server. <S2SV_ModStart> ( server. shutdown_asap ) closeTimedoutClients ( ) ; if ( server. <S2SV_ModStart> ( server. shutdown_asap ) closeTimedoutClients ( ) ; if ( server. <S2SV_ModStart> ( server. shutdown_asap ) closeTimedoutClients ( ) ; if ( server. <S2SV_ModStart> ( server. shutdown_asap ) closeTimedoutClients ( ) ; if ( server. <S2SV_ModStart> ( server. shutdown_asap ) closeTimedoutClients ( ) ; if ( server. <S2SV_ModStart> ( server. shutdown_asap ) closeTimedoutClients ( ) ; if ( server. <S2SV_ModStart> ( server. shutdown_asap ) closeTimedoutClients ( ) ; if ( server. <S2SV_ModStart> ( server. shutdown_asap ) closeTimedoutClients ( ) ; if ( server. <S2SV_ModStart> ( server. shutdown_asap ) closeTimedoutClients (,0
253,<S2SV_ModStart> channel ) ; g_object_unref ( client -> priv -> ice_connection ) ;,0
254,<S2SV_ModStart> book -> dim && i < n,1
255,"<S2SV_ModStart> action ) { if ( r > 4 ) { fprintf ( stderr, ""Error <S2SV_blank> in <S2SV_blank> square <S2SV_blank> pointing\\n"" ) ; exit ( 1 ) ; }",0
256,"<S2SV_ModStart> this_h ) { vp9_setup_scale_factors_for_frame ( sf, sf, other_w, other_h, this_h, 0 <S2SV_ModEnd> ) ; } <S2SV_ModStart> 16 ) { vp9_setup_scale_factors_for_frame ( sf, sf, other_w, other_h, 0 <S2SV_ModEnd> ) ; } <S2SV_ModStart> } else { vp9_setup_scale_factors_for_frame ( sf, sf, other_h, this_h, 0 <S2SV_ModEnd> ) ; } <S2SV_ModStart> } else { vp9_setup_scale_factors_for_frame ( sf, sf, other_h, this_h, 0 <S2SV_ModEnd> ) ; } <S2SV_ModStart> } else { vp9_setup_scale_factors_for_frame ( sf, sf, other_h, this_h, 0 <S2SV_ModEnd> ) ; } <S2SV_ModStart> } else { vp9_setup_scale_factors_for_frame ( sf, sf, other_h, this_h, 0 <S2SV_ModEnd> ) ; } <S2SV_ModStart> } else { vp9_setup_scale_factors_for_frame ( sf, sf, other_h, this_h, 0 <S2SV_ModEnd> ) ; }",0
257,<S2SV_ModStart> = 0 ; size_t count = 0 ; <S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX - count <S2SV_ModStart> OE_EINVAL ) ; count = count ;,0
258,<S2SV_ModStart> sk_protocol == IP6_IPPROTO && sk -> sk_protocol == IPPROTO_UDP,0
259,<S2SV_ModStart> ( & sctp_net_ops ) ; unregister_pernet_subsys ( & sctp_net_ops,0
260,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> index ) ; if ( stream -> psnr_total > MAX_PSNR_COUNT ) { return - 1 ; },0
261,<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen (,1
262,"<S2SV_ModStart> ( ) ; <S2SV_ModEnd> TRACE_DEBUG ( ""CIDER=0x%04"" <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_PHY1ILR <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ( interface, KSZ",0
263,"<S2SV_ModStart> skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
264,"<S2SV_ModStart> ; if ( fit_check_image_size <S2SV_ModEnd> ( fit, <S2SV_ModStart> { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> image <S2SV_blank> size <S2SV_blank> (%u <S2SV_blank> has <S2SV_blank> invalid <S2SV_blank> size <S2SV_blank> (%u <S2SV_blank> has <S2SV_blank> %u)\\n"", prop_name, size, image_type <S2SV_ModEnd> ) ; bootstage_error <S2SV_ModStart> ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; } bootstage_mark ( bootstage_id + BOOTSTAGE_SUB_FORMAT_OK ) ; if ( fit_uname ) { bootstage_mark ( bootstage_id + BOOTSTAGE_SUB_UNIT_NAME ) ; noffset = fit_image_get_node ( fit, fit_uname ) ; noffset = fit_image_get_node ( fit, fit_uname ) ; } else { size = fit_image_get_node ( fit, fit_uname ) ; noffset = fit_image_get_node ( fit, fit_uname ) ; noffset = fit_image_get_node ( fit, fit_uname ) ; } if ( size > image_type <S2SV_ModEnd> ) { printf <S2SV_ModStart> { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> image <S2SV_blank>",0
265,"<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> uinput_fd, UI_DEV_DESTROY )",1
266,<S2SV_ModStart> )? ( cpi <S2SV_ModEnd> -> av_per_frame_bandwidth * <S2SV_ModStart> ) : ( cpi <S2SV_ModEnd> -> av_per_frame_bandwidth * <S2SV_ModStart> = rc -> cpi <S2SV_ModEnd> ; # endif,0
267,"<S2SV_ModStart> ) if ( strlen <S2SV_ModEnd> ( argv [ <S2SV_ModStart> i ], ""allow-untrusted"" )!= 0 && strlen ( argv [ i ] )!= <S2SV_ModStart>, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", argv [ i ] <S2SV_ModEnd> ) ; argv",0
268,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
269,<S2SV_ModStart> ib ] ; <S2SV_ModEnd> dequant_ptr = d <S2SV_ModStart> i ] ; <S2SV_ModEnd> if ( mb,0
270,"<S2SV_ModStart> FN_REFLEN ] ; strncpy <S2SV_ModEnd> ( buff,",0
271,<S2SV_ModStart> decrypt_cb ) { vpx_debug_assert <S2SV_ModEnd> ( data_end - <S2SV_ModStart> data ) ; if ( data + data > data_end - data ) { vpx_debug_assert <S2SV_ModEnd> ( data + <S2SV_ModStart> data + data > <S2SV_ModEnd> 10 ) ; <S2SV_ModStart> 10 ) ; } else { vpx_debug_assert <S2SV_ModEnd> ( data + <S2SV_ModStart> data + data > <S2SV_ModEnd> 10 ) ; <S2SV_ModStart> 10 ) ; },0
272,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
273,"<S2SV_ModStart> int * returnintra, int * best_sse, int * best_sse_cost <S2SV_ModStart> # if CONFIG_TEMPORAL_DENOISING const int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # else const int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # endif # if CONFIG_TEMPORAL_DENOISING const int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # else const int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # endif <S2SV_ModEnd> # endif mode_mv <S2SV_ModStart>. rd = INT_MAX, best_rd_sse = INT_MAX, best_rd_sse = INT_MAX ; # else const int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # endif <S2SV_ModEnd> # endif rate_distortion <S2SV_ModStart> = INT_MAX ; memset",0
274,<S2SV_ModStart> goto error ; if ( statbuf. st_size < 0 || statbuf. st_size > MAX_SIZE ) goto error ;,0
275,"<S2SV_ModStart> ; UWORD8 u1_profile_idc = 0 ; UWORD16 u1_level_idc = 0 ; UWORD16 <S2SV_ModEnd> u1_seq_parameter_set_id ; UWORD16 <S2SV_ModStart> u4_num_reorder_frames ; } if (! ih264d_check_sps_in_pic_dec ( ps_dec, ps_dec, ps_dec, ps_dec, ps_dec, ps_dec, ps_dec, ps_dec, ps_dec, ps_dec, ps_dec, ps_dec, ps_dec, ps_dec, ps_dec, ps_dec, ps_dec, ps_dec, ps_dec, ps_dec, ps_dec, ps_dec, ps_dec, ps_dec, ps_dec, ps_dec, ps_dec, ps_dec, ps_dec, ps_dec, ps_dec, ps_dec, ps_dec, ps_dec, ps_dec, ps_dec, ps_dec, ps_dec, ps_dec, ps_dec, ps_dec, ps_dec, ps_dec, ps_dec, ps_dec, ps_",0
276,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; if ( params == NULL ) return VPX_CODEC_INVALID_PARAM ; <S2SV_ModStart> -> spatial_layer_id = get_ spatial_layer_id ( params ) ; if ( params == NULL ) return VPX_CODEC_INVALID_PARAM ; cpi -> svc. spatial_layer_id = get_temporal_layer_id ( params ) ; cpi -> svc. temporal_layer_id = get_temporal_layer_id ( params ) ; cpi -> lst_fb_idx = get_temporal_layer_id ( params ) ; cpi -> lst_fb_idx = get_temporal_layer_id ( params ) ; cpi -> lst_fb_idx = get_temporal_layer_id ( params ) ; cpi -> gld_gld_fb_idx = get_gt_layer_id ( params ) ; cpi -> gld_gld_fb_idx = get_gt_layer_id ( params ) ; cpi -> gld_gld_fb_idx = get_gt_layer_id ( params ) ; cpi -> gld_gld_fb_idx = get_gt_layer_id ( params",0
277,"<S2SV_ModStart> { uint16 bitspersample = 0, samplesperpixel = 0 <S2SV_ModEnd> ; uint16 input_compression <S2SV_ModStart> ; uint16 input_compression = 0, input_photometric = 0 <S2SV_ModEnd> ; copyFunc cf <S2SV_ModStart> ; uint32 width = 0 ; uint32 input_compression = 0 ; copyFunc cf = 0 <S2SV_ModEnd> ; CopyField (",0
278,"<S2SV_ModStart> a ) { char * pn ; char c ; int r ; struct stat st ; pn = a -> name ; while ( c == '\\0' ) { if ( unlink ( a -> name ) ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } a -> pst = NULL ; if (! S_ISLNK ( a -> mode ) ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } a -> pst = NULL ; if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a",0
279,"<S2SV_ModStart> unsigned int link_count ; struct kernel_lb_addr loc ; struct indirectEntry * ie ; ie = ( struct indirectEntry * ) ibh -> b_data ; loc = lelb_to_cpu ( ie -> indirectICB. extLocation ) ; if ( loc == lelb_to_cpu ( ie -> indirectICB. extLength ) ) { struct kernel_lb_addr loc ; struct indirectEntry * ie ; loc = lelb_to_cpu ( ie -> indirectICB. extLocation ) ; if ( loc == lelb_to_cpu ( ie -> indirectICB. extLength ) ) { if ( ident == TAG_IDENT_EFE ) { memcpy ( & iinfo -> i_location, & loc, sizeof ( struct kernel_lb_addr ) ) ; brelse ( bh ) ; make_bad_inode ( inode ) ; make_bad_inode ( inode ) ; make_bad_inode ( inode ) ; make_bad_inode ( inode ) ; return ; } } if ( loc == lelb_to_cpu ( ie -> indirectICB. extLength ) ) { memcpy ( & iinfo -> i_location, & loc, sizeof ( struct kernel_lb_addr ) )",0
280,"<S2SV_ModStart> get_uv_tx_size ( mbmi ) ; memset ( lfm -> lfl_y [ index ], filter_level, w",0
281,<S2SV_ModStart> mq_ops ) { blk_queue_queue_lock ( q ) ; <S2SV_ModStart> flags ) ; blk_queue_unlock ( q ) ;,0
282,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
283,"<S2SV_ModStart> { option = scaseless <S2SV_ModEnd> ( option,",0
284,<S2SV_ModStart> NULL || * replySize > <S2SV_ModEnd> ( int ),0
285,<S2SV_ModStart> code ) ; if ( code == NULL ) { err = KRB5_ERR_INVALID_CODE ; goto cleanup ; },0
286,"<S2SV_ModStart> 0x02 ) ; if ( crgram_len > SC_MAX_APDU_BUFFER_SIZE ) { sc_log ( ctx, ""Invalid <S2SV_blank> size <S2SV_blank> of <S2SV_blank> data <S2SV_blank> size <S2SV_blank> %u\\n"", ( unsigned int ) apdu. resplen ) ; return - 1 ; } <S2SV_ModStart> + 1, apdu. resplen <S2SV_ModEnd>, crgram_len )",0
287,"<S2SV_ModStart> ) ) ; i40e_set_rss_size ( vsi, <S2SV_ModEnd> & ctxt )",0
288,"<S2SV_ModStart> ; } } eprintf ( ""server_handle_vCont\\n"" ) ;",0
289,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
290,<S2SV_ModStart> -> cur_uv_offset ; if ( pc -> cur_uv_offset < pc -> cur_uv_offset ) { <S2SV_ModStart> = 0 ; },0
291,<S2SV_ModStart> ) ; } image -> num_planes = 0 ;,0
292,"<S2SV_ModStart> len ) { Py_ssize_t len ; <S2SV_ModStart> * u ; <S2SV_ModEnd> if ( len <S2SV_ModStart> & 0x80 ) strncpy <S2SV_ModEnd> ( p, <S2SV_ModStart> ""u005c"" ) ; len = 5 ; } } if ( len > SIZE_MAX / 6 ) { strncpy ( p, ""u005c"", len ) ; len = 5 ; } } if ( len > SIZE_MAX / 6 ) { strncpy ( p, ""u005c"", len ) ; len = 5 ; } if ( len > SIZE_MAX / 6 ) { strncpy ( p, ""u005c"", len ) ; len = 5 ; } } if ( len > SIZE_MAX / 6 ) { strncpy ( p, ""u005c"", len ) ; len = 5 ; len = 10 ; } if ( len > SIZE_MAX / 6 ) { strncpy ( p, ""u005c"", len ) ; len = 5 ; } else { len = <S2SV_ModEnd> p - buf <S2SV_ModStart> 10 ; } } <S2SV_ModStart> = buf ; len = p - buf ; s = * s ++ ; } len = p - buf ; s = * s ++ ; s = * s ++ ; <S2SV_ModEnd> return PyUnicode_DecodeUnicodeEscape ( <S2SV_ModStart> len",0
293,<S2SV_ModStart> struct stat stb <S2SV_ModEnd> ; BUF * <S2SV_ModStart> long ull ; <S2SV_ModEnd> BUFSIZE * bp <S2SV_ModStart> long ull ; <S2SV_ModEnd> if (!,0
294,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
295,"<S2SV_ModStart> ; if ( vp8_yv12_alloc_frame_buffer ( & oci -> frame_buffer_buffer, width, 16, VP8BORDERINPIXELS ) < 0 ) goto allocation_fail ; if (",0
296,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
297,<S2SV_ModStart> 0 ; } if ( u1_num_mbs > 0 ) { <S2SV_ModStart> 0 ; } } else { ps_dec -> ps_cur_slice -> u1_num_mbs_coded = 0 ; ps_dec -> ps_cur_slice -> u1_num_mbs_coded = 0 ; ps_dec -> ps_cur_slice -> u1_num_mbs_coded = 0 ; ps_dec -> ps_cur_slice -> u1_num_mbs_coded = 0 ; ps_dec -> ps_cur_slice -> u1_num_mbs_coded = 0 ; ps_dec -> ps_cur_slice -> u1_num_mbs_coded = 0 ; ps_dec -> ps_cur_slice -> u1_num_mbs_coded = 0 ; ps_dec -> ps_cur_slice -> u1_num_mbs_coded = 0 ; ps_dec -> ps_cur_slice -> u1_num_mbs_coded = 0 ; ps_dec -> ps_cur_slice -> u1_num_mbs_coded = 0 ; ps_dec -> ps_cur_slice -> u1_num_mbs_coded = 0 ; ps_,0
298,<S2SV_ModStart> -> buffers [ 0 <S2SV_ModEnd> ] ) vterm_allocator_free <S2SV_ModStart> -> buffers [ 0 <S2SV_ModEnd> ] ) ;,0
299,<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart> & delay ) ),0
300,"<S2SV_ModStart>, one, offset, offset ; size_t <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( number_pixels > 64 ) { ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; return ( DestroyImageList ( image ) ) ; }",0
301,<S2SV_ModStart> value ) { char * host = <S2SV_ModEnd> stok ( sclone <S2SV_ModStart> NULL ) ) ; if ( host ) { host = <S2SV_ModEnd> stclone ( value <S2SV_ModStart> ) ) ; },0
302,"<S2SV_ModStart>. cmp = key_cmp_cmp_type ( type ) <S2SV_ModEnd>,. match_data",0
303,"<S2SV_ModStart> ) ) ; free ( job_id ) ; free ( coinbase1 ) ; free ( coinbase2 ) ; <S2SV_ModStart> ntime ) { free ( coinbase2 ) ; free ( coinbase2 ) ; <S2SV_ModStart> pool -> data_lock ) ; free ( pool -> swork. job_id = job_id ; pool -> swork. job_id = job_id ; snprintf ( pool -> nhash, 9, ""%s"", bbversion ) ; snprintf ( pool -> nbit, 9, ""%s"", bbversion ) ; snprintf ( pool -> nbit, 9, ""%s"", nbit ) ; snprintf ( pool -> ntime, 9, ""%s"", ntime ) ; pool -> ntime = cb2 ; alloc_len = cb2 ; alloc_len = cb2_len ; alloc_len = cb2_len ; alloc_len = cb2_len ; alloc_len = cb2_len ; alloc_len = cb2_len ; alloc_len = cb2_len ; alloc_len = cb2_len ; alloc_len = cb2_len ; alloc_len = cb2_len ; alloc_len = cb2_len ; alloc",0
304,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
305,"<S2SV_ModStart> * res ; if ( _Py_IDENTIFIER ( __dict__ )!= NULL ) { return NULL ; } <S2SV_ModStart>, & PyId___dict__ ) ; _Py_IDENTIFIER ( dict <S2SV_ModStart> dict ) { Py_INCREF ( dict ) ; <S2SV_ModStart> = Py_BuildValue ( ""O()O"" <S2SV_ModEnd>, Py_TYPE ( <S2SV_ModStart> dict ) ; Py_DECREF ( dict ) ; return NULL <S2SV_ModEnd> ; } return <S2SV_ModStart> return Py_BuildValue ( ""O()"" <S2SV_ModEnd>, Py_TYPE (",0
306,"<S2SV_ModStart> ) & desc ) ; if ( err ) return 0 ; err = __usb_get_extra_descriptor ( udev -> rawdescriptors [ 0 ], le16_to_cpu ( udev -> config [ 0 ]. desc. wTotalLength ), USB_DT_OTG, ( void * * ) & desc",0
307,<S2SV_ModStart> -> private_data ; u32 flags = arg ; <S2SV_ModStart> case PERF_EVENT_IOC_PERIOD : if ( arg > PERF_EVENT_IOC_PERIOD ) return - EFAULT ; <S2SV_ModStart> ) arg ) ; case PERF_EVENT_IOC_SET_OUTPUT : if ( arg > PERF_EVENT_IOC_SET_FILTER ) return - EFAULT <S2SV_ModStart> ret ; } <S2SV_ModEnd> default : return,0
308,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> * r, PREDICTION_MODE <S2SV_ModEnd> y_mode ) { <S2SV_ModStart> ) { const PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode",0
309,<S2SV_ModStart> ; if ( <S2SV_ModEnd> sha -> src_len <S2SV_ModStart> -> src_len ; if ( block_size > SHA256_BLOCK_SIZE ) { block_size = SHA256_BLOCK_SIZE ; },0
310,"<S2SV_ModStart> iv ) ; if (! rb_check_key_length ( key ) ) ossl_raise ( eCipherError, ""Key <S2SV_blank> length <S2SV_blank> must <S2SV_blank> be <S2SV_blank> an <S2SV_blank> 8-octet <S2SV_blank> string"" ) ;",0
311,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
312,"<S2SV_ModStart> ; if ( nghttp2_is_fatal ( rv ) ) { rv = nghttp2_session_set_error_msg ( session, NGHTTP2_ERR_BAD_SETTINGS, ""recv: <S2SV_blank> [IB_READ_FIRST_SETTINGS]\\n"" ) ; if ( nghttp2_is_fatal ( rv ) ) { return rv ; } } if (",0
313,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> x86_pmu. event_id <S2SV_ModStart> event_id ) ; <S2SV_ModEnd> if (!,0
314,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ] ; const vpx_extra_bit <S2SV_ModEnd> * const b <S2SV_ModStart> ] ; const vpx_extra_bit <S2SV_ModEnd> * const b <S2SV_ModStart> ] ; int <S2SV_ModEnd> v = a <S2SV_ModStart> & 1 ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> & 1 ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ; } vpx_write <S2SV_ModEnd> ( w,",0
315,<S2SV_ModStart> struct vp9_write_bit_buffer wb <S2SV_ModEnd> ; struct vp9_write_bit_buffer <S2SV_ModStart> = wb ; memcpy <S2SV_ModEnd> ( & wb <S2SV_ModStart> = wb ; memcpy <S2SV_ModEnd> ( & wb <S2SV_ModStart> += uncompressed_hdr_size ; memcpy <S2SV_ModEnd> ( & saved_wb,0
316,<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> dev_get_valid_name ( struct,0
317,"<S2SV_ModStart> struct ikev2_id id = { 0 } <S2SV_ModStart> * typedata ; ND_TCHECK_EXT ( * ext ) ; ND_TCHECK_EXT ( * ext ) ; ND_TCHECK_EXT ( * ext, sizeof ( id ) <S2SV_ModEnd> ) ; ikev2_pay_print <S2SV_ModStart> ( ndo, "" <S2SV_blank> len=%u"", id_len ) ; ND_TCHECK_EXT ( * ext ) ; ND_TCHECK_EXT ( * ext ) ; ND_TCHECK_EXT ( * ext ) ; ND_TCHECK_EXT ( * ext ) ; ND_TCHECK_EXT ( * ext ) ; ND_TCHECK_EXT ( * ext ) ; ND_TCHECK_EXT ( * ext ) ; ND_TCHECK_EXT ( * ext ) ; ND_TCHECK_EXT ( * ext ) ; ND_TCHECK_EXT ( * ext ) ; ND_TCHECK_EXT ( * ext ) ; ND_TCHECK_EXT ( * ext ) ; ND_TCHECK_EXT ( * ext ) ; ND_TCHECK_EXT ( * ext ) ; ND_TCHECK_EXT ( * ext ) ; ND_TCHECK_EXT (",0
318,<S2SV_ModStart> -> data ; jas_snprintf <S2SV_ModEnd> ( cmpt ->,0
319,<S2SV_ModStart> urb ) ; usb_free_urb_to_pipe :,0
320,"<S2SV_ModStart> fft_jmp ; WORD32 xh1_0, xh20_0, xh21_0, xh21_0, xl1_0, xh21_0, xh21_0, xh21_0, xh21_0, xh21_0, xh21_0, xh21_0, xh21_0 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 si10, si10, si30, co10, co10, co20, co30 ; WORD64 mul_1, mul_2, mul_4, mul_4, mul_5, mul_6 ; WORD64 mul_7, mul_8, mul_8, mul_10, mul_10, mul_10, mul_11, mul_12 ; WORD32 * x_h2 ; WORD32 * x_h2 ; WORD32 * x_h2 ; WORD32 * x_h2 ; WORD32 * x_h2 ; WORD32",0
321,"<S2SV_ModStart> mntent ) { struct mount_entry * mnt ; mnt = <S2SV_ModEnd> mntent -> mnt_dir <S2SV_ModStart> mntent -> mnt_dir ; if ( mnt -> mnt_dir -> mnt_flags & MFS_MOUNT_MOUNTING ) mnt -> mnt_flags |= MFS_MOUNT_MOUNTING ; return mnt -> mnt_flags & MFS_MOUNTING? mount_entry_on_generic ( mntent, mnt -> mnt_dir -> mnt_mounts, mnt -> mnt_mounts, mnt -> mnt_mounts, mnt -> mnt_mounts, mnt -> mnt_mounts, mnt -> mnt_mounts, mnt -> mnt_mounts, mnt -> mnt_mounts, mnt -> mnt_mounts, mnt -> mnt_mounts, mnt -> mnt_mounts, mnt -> mnt_mounts, mnt -> mnt_mounts, mnt -> mnt_mounts, mnt -> mnt_mounts, mnt -> mnt_mounts, mnt -> mnt_mounts, mnt -> mnt_mounts, mnt -> mnt_mounts, mnt -> mnt_mounts, mnt -> mnt_mounts, mnt -> mnt_mounts, mnt -> mnt_mounts, mnt -> mnt_mounts, mnt_mounts, mnt -> mnt_mounts, mnt -> mnt_mounts, mnt_mounts",0
322,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
323,"<S2SV_ModStart> ( env, server_name_val, req_server_name_val <S2SV_ModEnd> ( req )",0
324,<S2SV_ModStart> endif int col_type <S2SV_ModEnd> ; MYSQL_BIND * <S2SV_ModStart> ) ) { int col_type ; int prepare_retval ; <S2SV_ModStart> -> mysql_stmt_type ; col_type = mysql_stmt_type ( imp_dbh -> mysql_stmt_type ) ; if ( <S2SV_ModEnd> ( sqlite3_stmt_type ( <S2SV_ModStart> -> mysql_stmt_type ) == 0 ) || ( sqlite3_stmt_type ( imp_dbh -> mysql_stmt_type ) == 0 ) ) { if ( sqlite3_stmt_type ( imp_dbh -> mysql_stmt_type ) == 0 ) { if ( sqlite3_stmt_type ( imp_dbh -> mysql_stmt_type ) == 0 ) { if ( sqlite3_stmt_type ( imp_dbh -> mysql_stmt_type ) == 0 ) { if ( sqlite3_stmt_type ( imp_dbh -> mysql_stmt_type ) == 0 ) { if ( sqlite3_stmt_type ( imp_dbh -> mysql_stmt_type ) == 0 ) { if ( sqlite3_stmt_type ( imp_dbh -> mysql_stmt_type ) == 0 ) { if ( sqlite3_stmt_type ( imp_dbh -> mysql_,0
325,"<S2SV_ModStart> need = 0, max_col <S2SV_ModStart> screen, { max_col = ( max_col + 1 ) * 4 ; max_col = ( max_col + 1 ) * max_col <S2SV_ModEnd> ; } ) <S2SV_ModStart>, { need = max_col <S2SV_ModStart> need *= 4 ; max_col = ( max_col + 1 ) * max_col <S2SV_ModStart> ) ) ; if ( need > max_col ) { need = max_col ; }",0
326,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = 0.0000001 ; if ( len > MAX_MAX_INFINITY_LEN ) return ; <S2SV_ModStart> val ) ) str [ len ] = ""NaN"" ; else str [ len ] = ""Infinity"" ; } else { if ( len > MAX_MAX_INFINITY_LEN ) return ; <S2SV_ModEnd> strncpy ( str <S2SV_ModStart> len ) ; str [ len ] = ""Infinity"" ; } else { if ( len > MAX_MAX_INFINITY_LEN ) return ; <S2SV_ModEnd> strncpy ( str <S2SV_ModStart> len ) ; str [ len ] = ""Infinity"" ; } else { if ( len > MAX_MAX_INFINITY_LEN ) return ; } * str = 0 ; return ; } * str = 0 ; return ; <S2SV_ModEnd> * ( str",0
327,<S2SV_ModStart> cycles ) ; <S2SV_ModEnd> r = &,0
328,"<S2SV_ModStart> LEX_ID ) { strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> len ) ; strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> LEX_STR ) { strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> len ) ; strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> len ) ; strncpy <S2SV_ModEnd> ( str,",0
329,,1
330,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
331,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
332,"<S2SV_ModStart>, s2, ( int )",0
333,"<S2SV_ModStart> { parse_global_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL, <S2SV_ModStart> { parse_global_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL, <S2SV_ModStart> { parse_global_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL, <S2SV_ModStart> ; parse_service_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL,",0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,"<S2SV_ModStart> md ) ; if (! self_delete ) { libreswan_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> for <S2SV_blank> an <S2SV_blank> unknown <S2SV_blank> ISAKMP <S2SV_blank> SA"" ) ; return ; } <S2SV_ModStart> md ) ; <S2SV_ModEnd> } } if",0
336,<S2SV_ModStart> u4_num_bytes_consumed ; } ps_dec -> u4_num_bytes_consumed = 0 ;,0
337,<S2SV_ModStart> <S2SV_null> <S2SV_null> static const,0
338,"<S2SV_ModStart>. encode ( NULL <S2SV_ModEnd>, img, <S2SV_ModStart>. encode ( NULL <S2SV_ModEnd>, img,",0
339,<S2SV_ModStart> ; } } <S2SV_ModEnd> when 10 : <S2SV_ModStart> ; } } },0
340,<S2SV_ModStart> ( i = - 8 ; i < <S2SV_ModStart> ; i < ( cols - 8 ) <S2SV_ModEnd> ; i ++,0
341,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> i -> parent <S2SV_ModStart> -> log ) { <S2SV_ModStart> -> log ) { <S2SV_ModStart> -> log ) { <S2SV_ModStart> -> log ) { <S2SV_ModStart> -> log ) { <S2SV_ModStart> -> log ) { <S2SV_ModStart> -> log ) { <S2SV_ModStart> -> log ) { <S2SV_ModStart> -> log ) { <S2SV_ModStart> -> log ) { <S2SV_ModStart> -> log ) { <S2SV_ModStart> -> log ) { <S2SV_ModStart> -> log ) { <S2SV_ModStart> -> log ) { <S2SV_ModStart> -> log ) { <S2SV_ModStart> -> log ) } } } } } <S2SV_ModEnd> i -> parent <S2SV_ModStart> -> log ) { <S2SV_ModStart> -> log ) { <S2SV_ModStart> -> log ) { <S2SV_ModStart> -> log ) { <S2SV_ModStart> -> log ) { <S2SV_ModStart> -> log ) { <S2SV_ModStart> -> log ) { <S2SV_ModStart> -> log ) { <S2SV_ModStart> -> log ) ; } } } } } <S2SV_ModEnd> i -> parent <S2SV_ModStart> -> log ) { <S2SV_ModStart> -> log ) { <S2SV_ModStart> -> log ) { <S2SV_ModStart> -> log ) { <S2SV_ModStart> -> log ) { <S2SV_ModStart> -> log ) { <S2SV_ModStart> -> log ) { <S2SV_ModStart> -> log ) { <S2SV_ModStart> -> log ) { <S2SV_ModStart> -> log ) { <S2SV_ModStart> -> log ) { <S2SV_ModStart> -> log, <S2SV_ModEnd> -> log ) ; } } } } } <S2SV_ModEnd> i -> parent <S2SV_ModStart> -> log ) { <S2SV_ModStart> -> log ) { <S2SV_ModStart> -> log ) { <S2SV_ModStart> -> log ) { <S2SV_ModStart> -> log ) { <S2SV_ModStart> -> log ) { <S2SV_ModStart>",0
342,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",0
343,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } return IHEVCD_INVALID_HEADER,0
344,"<S2SV_ModStart> ) ) { if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_be_4 ( psf, data ) ; count += 1 ; break ; } <S2SV_ModStart> case'm' : data = va_arg ( argptr, unsigned int ) ; header_put_be_3byte ( psf, data ) ; count += 2 ; break ; case '8' : data = va_arg ( argptr, unsigned int ) ; header_put_le_4 ( psf, data ) ; count += 4 ; break ; case '8' : data = va_arg ( argptr, unsigned int ) ; header_put_le_4 ( psf, data ) ; count += 4 ; break ; case '8' : data = va_arg ( argptr, unsigned int ) ; header_put_le_4 ( psf, data ) ; count += 4 ; break ; case '8' : data = va_arg ( argptr, unsigned int ) ; header_put_le_4 ( psf, data ) ; count += 4 ; break ; case '8' : data = va_arg ( argptr, unsigned int ) ; header_",0
345,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( sun_data == NULL ) { ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; return ( DestroyImageList ( image ) ) ; }",0
346,"<S2SV_ModStart> 0 ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 0700 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; return",0
347,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> BLOCK_8X8 : return vpx_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> BLOCK_16X8 : return vpx_mse16x8 <S2SV_ModEnd> ; case BLOCK_8X16 <S2SV_ModStart> BLOCK_8X16 : return vpx_mse8x16 <S2SV_ModEnd> ; default : <S2SV_ModStart> default : return vpx_mse16x16 <S2SV_ModEnd> ; } },1
348,"<S2SV_ModStart> ; if ( reqp -> client_key_len > server_key_len ) { if ( reqp -> client_key_len > server_key_len ) { pkiDebug ( context, ""client <S2SV_blank> key <S2SV_blank> len <S2SV_blank> too <S2SV_blank> short <S2SV_blank> for <S2SV_blank> client <S2SV_blank> key <S2SV_blank> length <S2SV_blank> %u"", server_key_len ) ; retval = 0 ; } else if ( reqp -> client_key_len > server_key_len ) { pkiDebug ( context, ""client <S2SV_blank> key <S2SV_blank> len <S2SV_blank> too <S2SV_blank> short <S2SV_blank> for <S2SV_blank> client <S2SV_blank> key <S2SV_blank> length <S2SV_blank> %u"", server_key_len ) ; retval = 0 ; } } if (",0
349,"<S2SV_ModStart> flags ) ; if ( frame_len > MAX_VLCBUF_BYTES ) { dev_err ( & dev -> pci -> dev, ""invalid <S2SV_blank> frame <S2SV_blank> size <S2SV_blank> %d\\n"", ( unsigned long ) frame_len ) ; return ; } <S2SV_ModStart> (! vb || frame_len > MAX_VLCBUF_BYTES",0
350,<S2SV_ModStart> size ) { ASSERT_NO_SIZE_OVERFLOW ( size ) ;,1
351,<S2SV_ModStart> && rxent -> serviceId <S2SV_ModEnd> == EXTRACT_32BITS (,0
352,<S2SV_ModStart> = bss_desc ; memset <S2SV_ModEnd> ( adhoc_start -> <S2SV_ModStart> = bss_desc ; memset <S2SV_ModEnd> ( bss_desc ->,0
353,<S2SV_ModStart> ( error ) { kmem_free ( sbuf ) ; <S2SV_ModStart> return error ; },1
354,"<S2SV_ModStart> struct l2cap_conf_rfc rfc ; void * ptr = req -> data ; BT_DBG ( ""sk <S2SV_blank> %p"", sk ) ; struct l2cap_conf_rfc rfc <S2SV_ModEnd> ; void * <S2SV_ModStart> sk ) ; rfc. mode = L2CAP_MODE_BASIC ; rfc. txwin_size = L2CAP_DEFAULT_RX_WINDOW ; rfc. max_transmit = L2CAP_DEFAULT_MAX_RECEIVE ; rfc. retrans_timeout = L2CAP_DEFAULT_RETRANS_TO ; rfc. monitor_timeout = L2CAP_DEFAULT_MONITOR_TO ; rfc. monitor_timeout = L2CAP_DEFAULT_MONITOR_TO ; rfc. monitor_timeout = L2CAP_DEFAULT_MONITOR_TO ; rfc. max_pdu_size = L2CAP_DEFAULT_MAX_RX_APDU ; rfc. max_pdu_size = L2CAP_DEFAULT_MAX_RX_APDU ; l2cap_add_conf_opt ( & ptr, L2CAP_CONF_RFC, sizeof ( rfc ), ( unsigned long ) & rfc ) ; return ptr - data <S2SV_ModEnd> ; } <S2SV_null>",0
355,"<S2SV_ModStart> do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> r, MSG_WAITALL )",1
356,<S2SV_ModStart> ) ) ; if ( ps_dec -> u4_pic_decode_done!= 1 ) { ps_dec -> u4_pic_decode_done = 1 ; ps_dec -> u4_pic_decode_done = 1 ; },0
357,<S2SV_ModStart> pair!= 0 && app -> formData -> size < app -> formData -> size,0
358,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd>, nfs4_stateid * <S2SV_ModStart> = 0 ; fmode_t fmode = fmode <S2SV_ModEnd> & ( FMODE_READ <S2SV_ModStart> -> type & fmode )!= fmode <S2SV_ModEnd> ) goto no_delegation_unlock <S2SV_ModStart> deleg_cur ) ; fmode = fmode ; <S2SV_ModStart> -> stateid, fmode <S2SV_ModEnd> ) ; ret <S2SV_ModStart> NULL ) { fmode = fmode <S2SV_ModEnd> ; ret =",0
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,"<S2SV_ModStart> * xd, const <S2SV_ModStart> int sse ; const int ref_size = xd -> mi [ 0 ] -> mbmi. ref_frame [ 0 ] ; <S2SV_ModStart> i ) { const int ref_size = xd -> mi [ 0 ] -> mbmi. ref_frame [ 0 ] ; <S2SV_ModStart> i == 0 && <S2SV_ModEnd> cpi -> speed <S2SV_ModStart> int rate ; const int sse_offset = xd -> mi [ 0 ] -> mbmi. ref_frame [ 0 ] ; <S2SV_ModStart> int64_t dist ; const int sse_offset = xd -> mi [ 0 ] -> mbmi. ref_frame [ 0 ] ; <S2SV_ModStart> int rate ; const int sse_offset = xd -> mi [ 0 ] -> mbmi. ref_frame [ 0 ] ; <S2SV_ModStart> int rate ; const int sse_offset = xd -> mi [ 0 ] -> mbmi. ref_frame [ 0 ] ; <S2SV_ModStart> int rate ; const int sse_offset = sse_offset * sse_offset ; <S2SV_ModStart> int rate ; const int sse_offset = sse_offset * sse_offset ; <S2SV_ModStart> int rate ; const int sse_offset = sse_offset * sse_offset ; <S2SV_ModStart> int rate ; const int sse_offset = sse_offset ; <S2SV_ModStart> int64_t dist ; int64",0
361,<S2SV_ModStart> } if ( pmd_none_or_unmapped <S2SV_ModEnd> ( pmd ),0
362,"<S2SV_ModStart> { if ( * ptr == '\\0' ) { return ( PAM_BUF_ERR ) ; } if ( <S2SV_ModStart> * ret_username = calloc ( index + 1, sizeof ( username ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( <S2SV_ModStart> * ret_username = calloc ( index + 1, sizeof ( username ) <S2SV_ModEnd> ) ) == <S2SV_ModStart> PAM_BUF_ERR ) ; if ( * ret_username == NULL ) { return ( PAM_BUF_ERR ) ; }",0
363,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> seg ) { vpx_read_tree <S2SV_ModEnd> ( r, <S2SV_ModStart> ( r, vpx_segment_tree <S2SV_ModEnd>, seg ->",0
364,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr2,",0
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,"<S2SV_ModStart> depth ++ ; ND_TCHECK_VERSION ( 3, 6, 0 ) ;",0
367,"<S2SV_ModStart> = htole16 ( TX_CTRL_TXMI_TXIC <S2SV_ModEnd> | ( context <S2SV_ModStart> ( interface, KSZ8851_TXIC_RXQCR, RXQCR_SDA <S2SV_ModEnd> ) ; header <S2SV_ModStart> ( interface, KSZ8851_RXQCR_RXQCR, RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_RXQCR_RXQCR, RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_TXMIR_TXMIR_TXMIR <S2SV_ModEnd> ) ; if",0
368,<S2SV_ModStart> ; # endif mono_console_handle_async_ops ( ) ;,0
369,"<S2SV_ModStart> x_7 ; WORD32 x_9, x_a, x_b, x_c, x_d, x_d, x_f ; WORD32 n00, n10, n20, n30, n01, n11, n21, n31, n12, n22, n22, n22, n22, n22, n22, n22, n22, n22, n22, n22, n22, n22, n33, n03, n23, n33 ; WORD32 n0, j0 ; WORD32 * x2, * x2, * x0 ; WORD32 * y1, * y1, * y2, * y2, * y3 ; n21 = ptr_x ; n21 = ptr_x ; n21 = ptr_x ; n21 = ptr_x ; n21 = ptr_0 - x_2 ; n21 = ptr_0 ; n21 = ptr_0 - x_2 ; n21 = ptr_0 ; n21 = ptr_0 - x_2 ; n21 = ptr_0 - x_2 ; n21 = ptr_0 - x_",0
370,<S2SV_ModStart> ( unlikely ( pmd_trans_huge_large <S2SV_ModEnd> ( * pmd,0
371,"<S2SV_ModStart>, height, target_width, target_height ; int width, height, target_width, target_height ; if ( argc < 5 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( argv [ 2 ], & width, & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; return 1 ; } fin = argv [ 4 ] ; if (! parse_dim ( argv [ 3 ], & width, & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; return 1 ; } if (! parse_dim ( argv [ 3 ], & width, & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; return 1 ; } if (! parse_dim ( argv [ 3 ], & width, & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; return 1 ; } if (! parse_dim ( argv [ 3",0
372,"<S2SV_ModStart> i, result <S2SV_ModEnd> ; PyObject *",1
373,"<S2SV_ModStart> vpx_CODEC_OK ; struct vpx_alg_priv * priv ; struct <S2SV_ModStart> priv ) { priv = calloc ( 1, sizeof ( struct vpx_alg_priv ) ) ; if (! priv ) { return VPX_CODEC_MEM_ERROR ; } priv -> sz = sizeof ( * priv ) ; priv -> iface = ctx -> iface ; priv -> init_flags = ctx -> init_flags ; if ( priv -> cfg. enc ) { priv -> cfg = * ctx -> config. enc ; } cfg = & priv -> cfg ; for ( i = 0 ; extracfg_map [ i ]. usage!= cfg -> g_usage ; i ++ ) ; priv -> vp8_cfg = extracfg_map [ i ]. cfg ; priv -> vp8_cfg = malloc ( priv -> cx_data_sz ) ; priv -> cx_data = malloc ( priv -> cx_data_sz ) ; if (! priv -> cx_data ) { return VPX_CODEC_MEM_ERROR ; } <S2SV_ModStart> priv ) { <S2SV_ModEnd> priv -> cfg <S2SV_ModStart> cfg = * priv <S2SV_ModEnd> -> cfg ; <S2SV_ModStart> cfg ; } <S2SV_ModEnd> priv -> vp8_cfg <S2SV_ModStart> ++ ) ; priv -> vp8_cfg =",0
374,"<S2SV_ModStart> ++ ; } <S2SV_ModEnd> ret = s <S2SV_ModStart>, totfr ) ; if ( ret <S2SV_ModEnd> < 0 )",0
375,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx ->,0
376,<S2SV_ModStart> ) ; } if ( iinfo -> i_size > sizeof ( * ei ) ) { ret = - EIO ; goto out ; },0
377,"<S2SV_ModStart> data ) { uint16_t mi ; uint16_t mi ; uint16_t mi ; mi = ( address & ~ ENC28J60_MIREGADR_MASK ) ; mi |= ENC28J60_MIWRL_IMM_IMM_MASK ; mi |= ENC28J60_MIWRL_IMM_IMM_MASK ; mi |= ENC28J60_MIWRH_IMM_IMM_MASK ; mi |= ENC28J60_MIWRH_IMM_MASK ; mi |= ENC28J60_MIWRH_IMM_IMM_MASK ; mi |= ENC28J60_MIWRH_IMM_MASK ; mi |= ENC28J60_MIWRH_IMM_MASK ; mi |= ENC28J60_MIWRH_IMM_MASK ; mi |= ENC28J60_MIWRH_IMM_MASK ; mi |= ENC28J60_MISTAT_BUSY ; <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & mi <S2SV_ModEnd> )!= 0",0
378,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool bad_format_imginfo ( const char * fmt, const char * * ptr ) { const char * ptr ; const char * ptr ; const <S2SV_ModEnd> int n = <S2SV_ModStart> * ptr ; const char * ptr ; int n = 0 ; ptr = fmt ; while ( * ptr!= '\\0' ) if ( * ptr == '%' ) { n = 1 ; ptr ++ ; } else if ( * ptr == '%' ) { n = 1 ; ptr ++ ; } else if ( * ptr == '%' ) { n = 1 ; ptr ++ ; } else if ( * ptr =='s' || * ptr == 'S' ) { n = 1 ; ptr ++ ; } } } return false <S2SV_ModEnd> ; } <S2SV_null>",0
379,"<S2SV_ModStart> ; UtRegisterTest ( ""IPv6DefragSturakPolarisTest"", IPV6DefragSturakPolarisTest ) ; UtRegisterTest (",0
380,<S2SV_ModStart> = object_length ; new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { return SC_ERROR_OUT_OF_MEMORY ; } <S2SV_ModStart> object_data ) { <S2SV_ModEnd> if ( add_v1_record,0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,<S2SV_ModStart> p_pic ) ; p_frame = p_pic ;,0
384,"<S2SV_ModStart> mf -> nr_of_files ; if ( mf -> nr_of_files > 0 ) { mp_err ( log, ""invalid <S2SV_blank> file <S2SV_blank> length: <S2SV_blank> %d\\n"", mf -> nr_of_files ) ; goto exit_mf ; } if ( mf -> nr_of_files > 0",0
385,<S2SV_ModStart> 4 ) ; size_t <S2SV_ModEnd> num_properties = GETINT32 <S2SV_ModStart> len ) ; if ( a -> type & TYPE_MASK ) { a -> type |= TYPE_MASK ; idx += 2 ; } <S2SV_ModStart> len ) ; if ( a -> type & TYPE_MASK ) { a -> type |= TYPE_MASK ; idx += 2 ; },0
386,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
387,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; vpx_get_reference_dec <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> -> pbi, <S2SV_ModEnd> & fb )",0
388,"<S2SV_ModStart> += length ; if ( length > MAX_JPEG_FORMAT_SIZE ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> "" ""no <S2SV_blank> JPEG <S2SV_blank> format <S2SV_blank> size <S2SV_blank> in <S2SV_blank> JPEG <S2SV_blank> format <S2SV_blank> size.\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
389,"<S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 1 ) ) == TYPE_COMMENT ) { ast_error ( c, CHILD ( n, 1 ), n -> n_col_offset, n -> n_col_offset, n -> n_end_col_offset, n -> n_end_col_offset, c -> c_c_arena ) ; } else if (",0
390,"<S2SV_ModStart> int vp8_denoiser_filter_c ( <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * running_avg_y, int mc_avg_y_stride, unsigned int avg_y_stride, int sum_diff, int delta_y_stride, int delta_y_stride, int delta_y_stride, int delta_y_stride, int delta_y_stride, int delta_y_stride, int delta_y_stride, int delta_y_stride, int delta_y_stride, int delta_y_stride, int delta_y_stride, int delta_y_stride, int delta_y_stride, int delta_y_stride, int delta_y_stride, int delta_y_stride, int delta_y_stride, int delta_y_stride, int delta_y_stride, int delta_y_stride, int delta_y_stride, int delta_y_stride, int delta_y_stride, int delta_y_stride, int delta_y_stride, int delta_y_stride, int delta_y_stride, int delta_y_stride, int delta_y_stride, int delta",0
391,"<S2SV_ModStart> = NULL ; Ns_Log ( Ns_LogRequestDebug, ""request <S2SV_blank> line <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long <S2SV_blank> (%u <S2SV_blank> bytes)"", ( int ) ( reqPtr -> coff ) ) ; <S2SV_ModStart> = NULL ; Ns_Log ( Ns_LogRequestDebug, ""request <S2SV_blank> line <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long <S2SV_blank> (%u <S2SV_blank> bytes)"", ( int ) ( reqPtr -> coff ) ) ;",0
392,<S2SV_ModStart> ret = 0 ; if ( ti -> xtregs_opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt. opt.,0
393,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
394,"<S2SV_ModStart> se_device * remote_dev <S2SV_ModEnd> = xop -> <S2SV_ModStart> dst_dev ; else remote_dev = xop -> src_dev ; else remote_dev = xop -> src_dev ; if ( remote_dev ) { <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for""",0
395,<S2SV_ModStart> if ( header && header -> bh_flags & EXT2_ET_CACHE_NOCACHE ) { struct ext2_xattr_cache * old_bh = NULL ; struct ext2_xattr_cache * new_bh = NULL ; struct ext2_xattr_cache * new_bh = NULL ; <S2SV_ModEnd> new_bh = ext2_xattr_cache_find <S2SV_ModStart> new_bh ) ; new_bh = old_bh ; } else { ext2_xattr_cache_insert ( new_bh ) ; new_bh = old_bh ; } <S2SV_ModEnd> } else { <S2SV_ModStart> new_bh ) ; new_bh = old_bh ; } else { ext2_xattr_cache_insert ( new_bh ) ; new_bh = old_bh ; } <S2SV_ModEnd> ext2_xattr_cache_insert ( new_bh <S2SV_ModStart> new_bh ) ; <S2SV_ModEnd> ext2_xattr_cache_insert ( new_bh <S2SV_ModStart> new_bh ) ; <S2SV_ModEnd> ext2_xattr_cache_insert ( new_bh <S2SV_ModStart> new_bh ) ; <S2SV_ModEnd> ext2_xattr_cache_insert ( new_bh <S2SV_ModStart> new_bh ) ; <S2SV_ModEnd> ext2_xattr_cache_insert ( new_bh <S2SV_ModStart> new_bh ) ;,0
396,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> if (! vp9_set_active_map <S2SV_ModEnd> ( ctx ->",0
397,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
398,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
399,"<S2SV_ModStart> char * ) AcquireQuantumMemory <S2SV_ModEnd> ( imbuf, <S2SV_ModStart> ) ; } for ( n = 0 ; n < SIXEL_PALETTE_MAX ; n ++ ) { sixel_palet [ n ++ ] = SIXEL_RGB ( 255, 255, 255, 255 ) ; } for ( n = 0 ; n < SIXEL_PALETTE_MAX ; n ++ ) { sixel_palet [ n ++ ] = SIXEL_RGB ( 255, 255, 255 ) ; } for ( i = 0 ; i < 24 ; i ++ ) { sixel_palet [ n ++ ] = SIXEL_RGB ( 255, 255, 255, 255 ) ; } for ( ; n < SIXEL_PALETTE_MAX ; n ++ ) { sixel_palet [ n ++ ] = SIXEL_RGB ( 255, 255, 255, 255 ) ; } for ( ; n < SIXEL_PALETTE_MAX ; n ++ ) { sixel_palet [ n ++ ] = SIXEL_RGB ( 255, 255, 255, 255 ) ; } for ( ; n < SIXEL_PALETTE_MAX ; n ++ ) { sixel_pal",0
400,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vpx_ref_frame_t * ) ; if ( ctx -> frame_type == VPX_CODEC_FRAME_TYPE_VP9 ) return VPX_CODEC_INVALID_PARAM",0
401,<S2SV_ModStart> ) ; } if ( u1_num_mbs < 0 ) { ps_dec -> ps_cur_slice -> u1_cur_slice -> u1_cur_slice -> u1_slice_num = 0 ; ps_dec -> ps_cur_slice -> u1_cur_slice -> u1_slice_num = 0 ; },0
402,"<S2SV_ModStart>, u4_y_offset ; <S2SV_ModEnd> UWORD8 * pu1_out_p <S2SV_ModStart> ) impeg2d_dec_pnb_mb_params ( ps_dec ) ; else if ( ps_dec -> u2_first_mb ) { ps_dec -> u2_first_mb = 0 ; ps_dec -> u2_prev_intra_mb = 0 ; ps_dec -> u2_prev_intra_mb = 0 ; ps_dec -> u2_prev_intra_mb = 0 ; ps_dec -> u2_prev_intra_mb = 0 ; ps_dec -> u2_prev_intra_mb = 0 ; ps_dec -> u2_prev_intra_mb = 0 ; ps_dec -> u2_prev_intra_mb = 0 ; ps_dec -> u2_prev_intra_mb = 0 ; ps_dec -> u2_prev_intra_mb = 0 ; ps_dec -> u2_prev_intra_mb = 0 ; ps_dec -> u2_prev_intra_mb = 0 ; ps_dec -> u2_prev_intra_mb = 0 ; ps_dec -> u",0
403,<S2SV_ModStart> VP9_LAST_FLAG ) { <S2SV_ModEnd> YV12_BUFFER_CONFIG * const <S2SV_ModStart> cfg = & cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ] <S2SV_ModEnd> ; if (,0
404,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
405,<S2SV_ModStart> mbmi ; const int step = 1 << ( tx_size << 1 ) ; const <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> int i ; <S2SV_ModStart> int i ; <S2SV_ModEnd> max_blocks_wide = num_4x4_w <S2SV_ModStart> ) ) ; <S2SV_ModEnd> max_blocks_high = num_4x4_h <S2SV_ModStart> ) ) ; <S2SV_ModEnd> for ( r <S2SV_ModStart> ) ) ; <S2SV_ModEnd> for ( r <S2SV_ModStart> step ; } <S2SV_ModEnd> } else { <S2SV_ModStart> step ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
406,<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( ( uint32_t <S2SV_ModStart> 7 ] ; <S2SV_ModEnd> src += src_stride,0
407,"<S2SV_ModStart> { rowstoread = ( row + img -> row_offset ) <S2SV_ModEnd> % rowsperstrip ; <S2SV_ModStart> -> row_offset ; if ( offset_row > ( ( row + img -> row_offset ) % rowsperstrip ) ) { continue ; } <S2SV_ModStart> buf == NULL && ( row + img -> row_offset ) > ( ( row + img -> row_offset ) % rowsperstrip ) <S2SV_ModStart>, bufsize, ( ( row + img -> row_offset ) % rowsperstrip ) <S2SV_ModEnd>, ( ( <S2SV_ModStart>, bufsize, ( ( row + img -> row_offset ) % rowsperstrip ) <S2SV_ModEnd>, ( ( <S2SV_ModStart>, bufsize, ( ( row + img -> row_offset ) % rowsperstrip ) <S2SV_ModEnd>, ( ( <S2SV_ModStart>, bufsize, ( ( row + img -> row_offset ) % rowsperstrip ) <S2SV_ModEnd>, ( ( <S2SV_ModStart>, bufsize, ( ( row + img -> row_offset ) % rowsperstrip ) <S2SV_ModEnd> ) ; }",0
408,<S2SV_ModStart> ; } } <S2SV_ModEnd> return 0 ;,0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
410,<S2SV_ModStart> num & ( SWFInput_MAXBITS - 1 <S2SV_ModEnd> << ( number <S2SV_ModStart> num - ( SWFInput_MAXBITS - 1 <S2SV_ModEnd> << number ),0
411,"<S2SV_ModStart> plane ] ; int width, height ; int height ; int height ; int y ; width = ( img -> width == 0 && img -> width == 0 && img -> width == 0 && img -> width == 0 && img -> width == 0 && img -> width == 0 && img -> width == 0 && img -> width == 0 && img -> width == 0 && img -> width == 0 && img -> height == 0 && img -> width == 0 && img -> width == 0 && img -> width == 0 && img -> height == 0 && img -> width == 0 && img -> height == 0 && img -> height == 0 && img -> width == 0 && img -> height == 0 && img -> height == 0 && img -> width == 0 && img -> height == 0 && img -> height == 0 && img -> height == 0 && img -> height == 0 && img -> width == 0 && img -> height == 0 && img -> height == 0 && img -> height == 0 && img -> height == 0 && img -> height == 0 && img -> height == 0 && img -> height == 0 && img -> height == 0 && img -> height == 0 && img -> height == 0 && img -> height == 0 && img -> height == 0",0
412,<S2SV_ModStart> ; uint16_t attr_len = 0 <S2SV_ModStart> + 2 ) <S2SV_ModEnd> return - 1 <S2SV_ModStart> } attr_len = ( uint16_t ) <S2SV_ModStart> avp -> length ; if ( attr_len > sizeof ( struct l2tp_avp_t ) ) return - 1 ; <S2SV_ModEnd> memxor ( p1,0
413,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 0 ;,0
414,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",0
415,"<S2SV_ModStart> sock, sk ) ; memset ( sa, 0, sizeof ( struct sockaddr_rc )",0
416,"<S2SV_ModStart> MT_CPTYPE_PASSSALT ) { memcpy_safe <S2SV_ModEnd> ( pass_salt,",0
417,"<S2SV_ModStart> MUTT_ABORT ) { mutt_error ( _ ( ""Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> TLS <S2SV_blank> connection"" ) ) ; <S2SV_ModStart> ) ; goto err_close_conn <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto err_close_conn <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ; goto err_close_conn <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ; goto err_close_conn <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ; goto err_close_conn <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto err_close_conn <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto err_close_conn <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto err_close_conn <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto err_close_conn <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto err_close_conn <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto err_close_conn <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto err_close_conn <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto err_close_conn <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto err_close_conn <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto err_close_conn <S2SV_ModEnd> ; } } <S2SV_ModStart> ) ; goto err_close_conn <S2SV_ModEnd> ; } } }",0
418,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
419,<S2SV_ModStart> ) ) { if ( strlen ( line ) > 1 ) { <S2SV_ModStart> return ; } },0
420,"<S2SV_ModStart>, & rlen, 0",1
421,"<S2SV_ModStart> * slavename ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> } # endif read_userfile ( ) ; <S2SV_ModStart> = 0 ; md5data [ 0 ] = 0 ; strncpy ( md5data + 1, user -> password, 82 ) ; memcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> user -> password <S2SV_ModEnd>, curconn -> <S2SV_ModStart> ) md5data, <S2SV_ModEnd> 17 ) ;",0
422,"<S2SV_ModStart> ; if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart>, * p, 0",0
423,<S2SV_ModStart> ( buf ) <S2SV_ModEnd> && str [,0
424,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
425,<S2SV_ModStart> credssp ) ; free ( instance ) ; instance = NULL ;,0
426,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteFujiEntry ) ) ;",1
427,<S2SV_ModStart> bd_addr ) { bt_bdaddr_t * bd_addr = NULL ; <S2SV_ModStart> BT_STATUS_NOT_READY ; return btif_dm_remove_bond_from_link <S2SV_ModEnd> ( bd_addr ),0
428,<S2SV_ModStart> int i ; <S2SV_ModEnd> int expect ; <S2SV_ModStart> 4 ) ; if ( <S2SV_ModEnd> buf -> len <S2SV_ModStart> buf -> cursor > <S2SV_ModEnd> buf -> len <S2SV_ModStart> buf -> cursor ) goto bad_format ; if ( avail > buf -> len ) goto bad_format ; avail = buf -> len - buf -> cursor <S2SV_ModStart> 0 || nxip >= <S2SV_ModEnd> avail || expect,0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
430,"<S2SV_ModStart> epoll_t * epoll ; size_t host_size ; if ( count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; <S2SV_ModStart> epoll_ ) ; host_size = count ; if (! oe_syscall_write_ocall ( & ret, <S2SV_ModEnd> epoll -> host_ <S2SV_ModStart>, count ) <S2SV_ModEnd> ) OE_RAISE_ERRNO ( <S2SV_ModStart> OE_EINVAL ) ; if ( ret > host_size ) { ret = - EE_EINVAL ; OE_RAISE_ERRNO ( OE_EINVAL ) ; }",0
431,"<S2SV_ModStart> ( CMD_INITIALIZE, new_global_options. option. log_stderr <S2SV_ModEnd>, NULL ) <S2SV_ModStart> ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ( CMD_INITIALIZE, new_global_options. option. log_stderr <S2SV_ModEnd>, NULL,",0
432,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_HASH_MAX : * ( size_t * ) val = ms -> elf_hash_max ; return 0 ; case MAGIC_PARAM_ELF_HASH_MAX : * ( size_t * ) val = ms -> elf_hash_max ; return 0 ;,0
433,<S2SV_ModStart> offset ) { <S2SV_ModEnd> if ( offset,0
434,"<S2SV_ModStart> ++ ) { if (! gf_isom_check_track ( movie -> moov, i + 1 ) ) continue ; <S2SV_ModStart> writer, TrackWriter ) ; if (! gf_isom_check_track ( movie -> moov, i + 1 ) ) continue ; writer -> sampleNumber = 1 ; writer -> mdia = trak -> Media -> information -> sampleTable ; writer -> stbl = trak -> Media -> information -> sampleTable ; writer -> timeScale = trak -> Media -> mediaHeader -> timeScale ; writer -> all_dref_mode = Media_SelfContainedType ( writer -> mdia ) ; if ( trak -> sample_encryption ) writer -> prevent_dispatch = GF_TRUE ; writer -> isDone = 0 ; writer -> sample_encryption = 0 ; writer -> sample_encryption = 0 ; writer -> sample_encryption = 0 ; writer -> sample_encryption = 0 ; writer -> sample_encryption = 0 ; writer -> sample_encryption = 0 ; writer -> sample_encryption = 0 ; writer -> sample_encryption = 0 ; writer -> sample_encryption = 0 ; writer -> sample_encryption = 0 ; writer -> sample_encryption = 0 ; writer -> sample_encryption = 0",0
435,"<S2SV_ModStart> 17 ] ; <S2SV_ModEnd> md5_state_t state ; <S2SV_ModStart> = 0 ; strncpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> password, 82, sizeof ( md5data ) <S2SV_ModStart> = '\\0' ; md5data [ 83 ] = '\\0' ; memcpy ( md5data + 1 + strlen ( password ), pass_salt, 16 ) ; md5data [ 83 ] = '\\0' ; memcpy ( md5data + 1 + strlen ( password ), pass_salt, 16 ) ; md5data [ 83 ] = '\\0' ; memcpy ( md5data + 1 + strlen ( password ), pass_salt, 16 ) ; md5data [ 83 ] = '\\0' ; <S2SV_ModStart> ) md5data, strlen ( password ) <S2SV_ModEnd> + 17 )",0
436,<S2SV_ModStart> ; if ( <S2SV_ModEnd> Prefix!= NULL,1
437,<S2SV_ModStart> += 1 ; <S2SV_ModEnd> break ; case,0
438,"<S2SV_ModStart> ( ) ; g_hash_table_remove_all ( headers ) ; g_hash_table_insert ( headers, g_strdup_2, g_strdup ( ""Cookie"" ), g_strdup ( ""CockpitAuth=v=2;k=blah"" ) ) ; if ( cockpit_auth_check_cookie ( test -> auth, ""/cockpit"", headers ) ) g_assert_not_reached ( ) ;",0
439,"<S2SV_ModStart> -> y_buffer ; memcpy <S2SV_ModEnd> ( dst, <S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst,",0
440,"<S2SV_ModStart> * cpi, TileData * tile_data, <S2SV_ModStart> * const tile_info, TileData * tile_data <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> mi_col < tile_data -> <S2SV_ModEnd> mi_col_end ; mi_col <S2SV_ModStart> MI_BLOCK_SIZE ) { <S2SV_ModEnd> int64_t dummy_dist ; <S2SV_ModStart> ; BLOCK_SIZE i ; int64_t dummy_dist <S2SV_ModStart> pred_mv ) ; vp9_zero ( cpi -> mb. e_mbd_min_idx ) ; vp9_zero ( cpi -> mb. e_mbd_min_idx ) ; vp9_zero ( cpi -> mb. e_mbd_min_idx ) ; vp9_zero ( cpi -> mb. e_mbd_min_idx ) ; vp9_zero ( cpi -> mb. e_mbd_min_idx ) ; vp9_zero ( cpi -> mb. e_mbd_min_idx ) ; vp9_zero ( cpi -> mb. e_mbd_min_idx ) ; vp9_zero ( cpi -> mb. e_mbd_min_idx ) ; vp9",0
441,"<S2SV_ModStart> ; int hexdump = 0 <S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( ndo, ""%s",0
442,"<S2SV_ModStart> mbmi, const MV <S2SV_ModEnd>  mvs [ 2 <S2SV_ModStart> ) { const MV <S2SV_ModEnd> diff = {",0
443,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ),",0
444,"<S2SV_ModStart> ; if ( skb_expand_head_skb <S2SV_ModEnd> ( skb_out,",0
445,<S2SV_ModStart> ; netsnmp_mibindex_load ( ) ; SNMP_FREE ( env_var <S2SV_ModStart> entry ) { <S2SV_ModEnd> entry = strtok_r <S2SV_ModStart> entry ) { <S2SV_ModEnd> entry = strtok_r <S2SV_ModStart> entry ) { <S2SV_ModEnd> entry = strtok_r <S2SV_ModStart> ) ) { <S2SV_ModEnd> entry = ( <S2SV_ModStart> ) ) { <S2SV_ModEnd> entry = ( <S2SV_ModStart> ) ) { <S2SV_ModEnd> entry = ( <S2SV_ModStart> ) ) { <S2SV_ModEnd> entry = ( <S2SV_ModStart> ) ) { <S2SV_ModEnd> entry = ( <S2SV_ModStart> ) ) { <S2SV_ModEnd> entry = ( <S2SV_ModStart> ) ) { <S2SV_ModEnd> entry = ( <S2SV_ModStart> ) ) { <S2SV_ModEnd> entry = ( <S2SV_ModStart> ) ) { <S2SV_ModEnd> entry = ( <S2SV_ModStart> ) ) { <S2SV_ModEnd> entry = ( <S2SV_ModStart> ) ) { <S2SV_ModEnd> entry = ( <S2SV_ModStart> ) ) { <S2SV_ModEnd> entry = ( <S2SV_ModStart> ) ) { <S2SV_ModEnd> entry = ( <S2SV_ModStart> ) ) { <S2SV_ModEnd> entry = ( <S2SV_ModStart> ) ) { <S2SV_ModEnd> entry = ( <S2SV_ModStart> ) ) { <S2SV_ModEnd> entry = ( <S2SV_ModStart> ) ) { <S2SV_ModEnd> entry = ( <S2SV_ModStart> ) ) { <S2SV_ModEnd> entry = ( <S2SV_ModStart> ) ) { <S2SV_ModEnd> entry = ( <S2SV_ModStart> ) ) { <S2SV_ModEnd> entry = ( <S2SV_ModStart> ) ) { <S2SV_ModEnd> entry = ( <S2SV_ModStart> ) ) { <S2SV_ModEnd> entry = (,0
446,"<S2SV_ModStart> ++ ) { if ( ioctl ( fd, UI_SET_EVBIT, EV_KEY )!= 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> device <S2SV_blank> information"", __FUNCTION__ ) ; close ( fd ) ; return - 1 ; } <S2SV_ModStart> = 0x0000 ; <S2SV_ModEnd> ioctl ( fd <S2SV_ModStart> EV_KEY ) ; if ( ioctl ( fd, UI_SET_EVBIT, EV_REL )!= 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> device <S2SV_blank> information"", __FUNCTION__ ) ; close ( fd ) ; return - 1 ; } <S2SV_ModStart> EV_REL ) ; if ( ioctl ( fd, UI_SET_EVBIT, EV_SYN )!= 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> key <S2SV_blank> map <S2SV_blank> key <S2SV_blank> map <S2SV_blank> map <S2SV_blank> for <S2SV_blank> %s"", __FUNCTION__, key_map [ x ]. mapped_id ) ; return - 1 ; } <S2SV_ModStart> ev_REL ) ; if ( ioctl ( fd, UI_SET_EVBIT, EV_SYN )!= 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> create",0
447,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
448,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s,",0
449,"<S2SV_ModStart> iakerb_ctx_id_t * pctx, iakerb_ctx_id_t * ctx_k5c <S2SV_ModStart> ctx -> k5c, ctx_k5c",0
450,"<S2SV_ModStart> = DirectClass ; if ( screen -> columns > MAX_COLUMN_SIZE ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
451,"<S2SV_ModStart> START_CODE_LEN ) ; if <S2SV_ModEnd> ( impeg2d_bit_stream_nxt ( <S2SV_ModStart>!= START_CODE_PREFIX ) <S2SV_ModEnd> impeg2d_bit_stream_flush ( ps_stream <S2SV_ModStart> ps_stream, 8 ) ; <S2SV_ModEnd> u4_start_code = impeg2d_bit_stream_nxt",0
452,<S2SV_ModStart> return - EINVAL ; if ( dentry -> d_name. name == NULL ) return - EINVAL,0
453,<S2SV_ModStart> -> interlace ; if ( mono_loader_is_valid ( ) ) { MonoClass * class_inst = mono_loader_get_class_from_mono_class ( method -> klass -> generic_class ) ; if ( class_inst ) class_inst = mono_loader_get_class_from_mono_class ( method -> klass -> generic_class ) ; },0
454,<S2SV_ModStart> ) ] ; size_t <S2SV_ModEnd> tmp ; if,0
455,"<S2SV_ModStart>, * wp, * origin_orig <S2SV_ModStart> ( ( ( name [ 1 ] == '$' ) && ( <S2SV_ModStart> ) || ( name [ 1 ] == '/' || <S2SV_ModStart> ) || ( name [ 1 ] == '{' ) && ( <S2SV_ModStart> )? ( name [ 2 ] == ':' ) && ( <S2SV_ModStart> l -> l_origin ) ; if ( l -> l_origin_orig!= NULL && l -> l_origin_orig!= NULL && l -> l_origin_orig!= NULL && l -> l_origin_orig!= NULL && l -> l_origin_orig!= NULL && l -> l_origin_orig!= NULL && l -> l_origin_orig!= NULL && l -> l_origin_orig!= NULL && l -> l_origin_orig!= NULL && l -> l_origin_orig!= NULL && l -> l_origin_orig!= NULL && l -> l_origin_orig!= NULL && l -> l_origin_orig!= NULL && l -> l_origin_orig!= NULL && l -> l_origin_orig!= NULL && l -> l_origin_orig!= NULL && l -> l_origin_orig!= NULL && l -> l_origin_orig!= NULL && l -> l_origin",0
456,<S2SV_ModStart> ) ; } decInst = H264SWDEC_INITFAIL ;,0
457,<S2SV_ModStart> drop ; } <S2SV_ModEnd> opt -> optlen <S2SV_ModStart> iph -> ihl <S2SV_ModEnd> ) { struct,0
458,"<S2SV_ModStart> ) break ; if ( ( size_t ) 4 * image -> rows > ( size_t ) image -> rows ) ThrowReaderException ( CorruptImageError, ""MemoryAllocationFailed"" ) ; <S2SV_ModStart> ) break ; if ( ( size_t ) image -> columns > ( size_t ) image -> rows ) ThrowReaderException ( CorruptImageError, ""MemoryAllocationFailed"" ) ;",0
459,<S2SV_ModStart> goto errout ; if ( info -> partitions > 0 ) { int num = ( int ) ( info -> partitions * 8 ) ; int num = ( int ) ( num * 8 ) ; int num = ( int ) ( num * 8 ) ; int num = ( int ) ( num * 8 ) ; int num = ( int ) ( num * 8 ) ; int num = ( int ) ( num * 8 ) ; int num = ( int ) ( num * 8 ) ; int num = ( int ) ( num * 8 ) ; int num = ( int ) ( num * 8 ) ; int num = num * 8 ; int num = num * 8 ; int num = num * 8 ; int num = num * 8 ; int num = num * 8 ; int num = num ; int num = num ; int num = num ; int num = num ; int num = num ; int num = num ; int num = num ; int num = num ; int num = num ; int num = num ; int num = num ; int num = num ; int num = num ; int num = num ; int num = num ; int num = num ; int num = num ; int num = num ; int num = num ; if,0
460,<S2SV_ModStart> krb5_key_data * key_data ; int len <S2SV_ModStart> == NULL ) { len = sizeof ( * key_data ) ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> ; } } len = sizeof ( * key_data ) ; if ( len < len ) { err = ENOMEM ; goto cleanup ; },0
461,"<S2SV_ModStart> * self, Py_ssize_t <S2SV_ModEnd> idx, PyObject",0
462,<S2SV_ModStart> ] ) ; if ( nByte < 0 || nByte > SQLITE_MAX_SIZE ) { rc = SQLITE_NOMEM ; } else { <S2SV_ModStart> 1 ) ; },0
463,<S2SV_ModStart> filp ) { struct sock * sock = SOCKET_I ( inode ) ; struct sock * sock = NULL ; sock_release ( sock ) ; sock_release ( sock <S2SV_ModEnd> ) ; return,0
464,"<S2SV_ModStart> expr_ty iter, const <S2SV_ModStart>. orelse = ( stmt_ty ) PyArena_Malloc ( arena, sizeof ( stmt_ty ) ) <S2SV_ModEnd> ; p ->",0
465,"<S2SV_ModStart> * info, const <S2SV_ModStart> char * name, const char * const name_param <S2SV_ModStart> ; my_off_t index_pos ; const char * const name_param <S2SV_ModStart> goto err ; if ( param -> temp_file_pos + param -> temp_file_pos + param -> temp_file_pos + param -> temp_file_pos + param -> temp_file_pos + param -> temp_file_pos + param -> temp_file_pos + param -> temp_file_pos + param -> temp_file_pos + param -> temp_file_pos + param -> temp_file_pos + param -> temp_file_pos + param -> temp_file_pos + param -> temp_file_pos + param -> temp_file_pos + param -> temp_file_pos + param -> temp_file_pos + param -> temp_file_pos + param -> temp_file_pos + param -> temp_file_pos + param -> temp_file_pos + param -> temp_file_pos + param -> temp_file_pos + param -> temp_file_pos + param -> temp_file_pos + param -> temp_file_pos + param -> temp_file",0
466,"<S2SV_ModStart> ""Invalid <S2SV_blank> data <S2SV_blank> file <S2SV_blank> to <S2SV_blank> the <S2SV_blank> user <S2SV_blank> callback <S2SV_blank> failed <S2SV_blank> due <S2SV_blank> to <S2SV_blank> the <S2SV_blank> service <S2SV_blank> error"" ; case NGHTTP2_ERR_INVALID_DATA_BLOCK : return ""Invalid <S2SV_blank> data <S2SV_blank> block <S2SV_blank> data <S2SV_blank> block <S2SV_blank> data"" ; case NGHTTP2_ERR_INVALID_DATA_BLOCK : return ""Invalid <S2SV_blank> data <S2SV_blank> block <S2SV_blank> data <S2SV_blank> block <S2SV_blank> data"" ; case NGHTTP2_ERR_INVALID_DATA_BLOCK : return ""Invalid <S2SV_blank> data <S2SV_blank> block <S2SV_blank> data <S2SV_blank> block <S2SV_blank> data"" ; case NGHTTP2_ERR_INVALID_DATA_BLOCK : return ""Invalid <S2SV_blank> data <S2SV_blank> block <S2SV_blank> data <S2SV_blank> block <S2SV_blank> data"" ; case NGHTTP2_ERR_INVALID_DATA_BLOCK : return ""Invalid <S2SV_blank> data <S2SV_blank> block <S2SV_blank> data"" ; case NGHTTP2_ERR_INVALID_DATA_BLOCK : return ""Invalid <S2SV_blank> data <S2SV_blank> block <S2SV_blank> data"" ; case NGHTTP2_ERR_INVALID_DATA_BLOCK : return ""Invalid <S2SV_blank> data <S2SV_blank> block <S2SV_blank> data"" ; case NGHTTP2_ERR_INVALID_DATA_BLOCK : return ""Invalid <S2SV_blank> data <S2SV_blank> block <S2SV_blank> data"" ; case NGHTTP2_ERR_INVALID_DATA_BLOCK : return ""Invalid <S2SV_blank>",0
467,"<S2SV_ModStart> UINT error ; if ( Stream_Read_UINT16 <S2SV_ModEnd> ( s, <S2SV_ModStart>, eventId )!= Stream_Read_UINT32 ( s, pduLength ) ) return ERROR_INVALID_PARAMETER ; if ( Stream_Read_UINT32 <S2SV_ModEnd> ( s,",0
468,<S2SV_ModStart> ) ; } if ( ZMQ_TYPE_STREAM == ZMQ_TYPE_STREAM ) { int i ; for ( i = 0 ; i < ZMQ_MAX_STREAMS ; i ++ ) { int j ; for ( j = 0 ; j < ZMQ_MAX_STREAMS ; j ++ ) { int j ; for ( j = 0 ; j < ZMQ_MAX_STREAMS ; j ++ ) { int j = ZMQ_MAX_STREAMS [ j ] ; for ( j = 0 ; j < ZMQ_MAX_STREAMS ; j ++ ) { int j = ZMQ_MAX_STREAMS [ j ] ; for ( j = 0 ; j < ZMQ_MAX_STREAMS ; j ++ ) { int j = ZMQ_MAX_STREAMS [ j ] ; for ( j = 0 ; j < ZMQ_MAX_STREAMS ; j ++ ) { int j = ZMQ_MAX_STREAMS [ j ] ; for ( j = 0 ; j < ZMQ_MAX_STREAMS ; j ++ ) { int j = ZMQ_MAX_STREAMS [ j ] ; for ( j = 0 ; j < ZMQ_MAX_STREAM,0
469,"<S2SV_ModStart> struct flowi6 fl6 ; IP6_ECN_flow_xmit ( sk, transport -> ipaddr. v6. sin6_addr, transport -> saddr. v6. sin6_addr ) ; IP6_ECN_flow_xmit ( sk, fl6. flowlabel ) ; IP6_ECN_flow_xmit ( sk, fl6. flowlabel ) ; IP6_ECN_flow_xmit ( sk, fl6. flowlabel ) ; IP6_ECN_flow_xmit ( sk, fl6. flowlabel ) ; IP6_ECN_flow_xmit ( sk, fl6. flowlabel ) ; IP6_ECN_flow_xmit ( sk, fl6. flowlabel ) ; IP6_ECN_flow_xmit ( sk, fl6. flowlabel ) ; IP6_ECN_flow_xmit ( sk, fl6. flowlabel ) ; IP6_ECN_flow_xmit ( sk, fl6. flowlabel ) ; IP6_ECN_flow_xmit ( sk, fl6. flowlabel ) ; IP6_ECN_flow_xmit ( sk, & fl6, np ->",0
470,"<S2SV_ModStart> ; END_OF_READING : if ( clone_info -> signature == MagickSignature ) { InheritException ( CorruptImageError, ""ImproperImageHeader"" ) ; break ; }",0
471,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> UINT32 failureCode ; if (! WLog_Check ( TAG, ""rdp_NEG_FAILURE"" ) ) { WLog_WARN ( TAG, ""rdp_NEG_FAILURE"" ) ; return NEGO_STATE_FAIL ; } <S2SV_ModStart> = NEGO_STATE_FAIL ; return NEGO_STATE_FAIL ;",0
472,"<S2SV_ModStart> ; int len <S2SV_ModEnd> ; bn_t t <S2SV_ModStart> 8 ) ; * p_len = m_len ; m_len -- ; m_len -- ; bn_rsh ( t, m, 8 * m_len ) ; <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> * p_len = <S2SV_ModStart> 0 ] ; <S2SV_ModEnd> do { m_len <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> case RSA_SIG : bn_zero ( m ) ; bn_lsh ( m, m, 8 * m_len ) ; bn_mod_2b ( m, m, ( k_len - * p_len ) * p_len ) ; <S2SV_ModStart> len ) ; bn_zero ( m ) ; bn_lsh ( m, m, 8 * m_len ) ; <S2SV_ModStart> len ) ; bn_zero ( m ) ; bn_lsh ( m, m, 8 * m_len ) ; <S2SV_ModStart> len ) ; bn_zero ( m ) ; bn_lsh ( m, m, 8 * m_len ) ; bn_add_dig ( m, m_len ) ; <S2SV_ModStart> len ) ; bn_zero ( m ) ; bn_lsh ( m, m, 8 * m_len ) ; <S2SV_ModStart> len",0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,<S2SV_ModStart> ( psf = psf_calloc ( <S2SV_ModEnd> sizeof ( SF_PRIVATE,0
475,"<S2SV_ModStart> void fix_interp_filter ( VP9_COMMON * cm, <S2SV_ModStart> i ] += cm -> counts -> switchable_interp [ j ] [ i ] ; c += ( count [ i ] > 0 ) ; } if ( cm -> interp_filter == SWITCHABLE ) { for ( i = 0 ; i < SWITCHABLE_FILTER_CONTEXTS ; ++ i ) count [ i ] += <S2SV_ModStart> i ] += cm -> counts -> switchable_interp [ j ] [ i ] ; c += ( count [ i ] > 0 ) ; } if ( cm -> interp_filter == SWITCHABLE ) { for ( i = 0 ; i < SWITCHABLE_FILTERS ; ++ i ) count [ i ] = <S2SV_ModStart> i ] += cm -> counts -> switchable_interp [ j ] [ i ] ; c += ( count [ i ] > 0 ) ; } else { for ( i = 0 ; i < SWITCHABLE_FILTERS ; ++ i ) count [ i ] = 0 ; } <S2SV_ModEnd> cm -> interp_filter",0
476,"<S2SV_ModStart> & cpi -> td. <S2SV_ModStart> mi_cols ) ; memset <S2SV_ModEnd> ( x, <S2SV_ModStart> ( x, 0, sizeof ( x ) ) ; memset <S2SV_ModEnd> ( xd, <S2SV_ModStart> ( xd, 0, sizeof ( x ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> MAX_MB_PLANE ) ; memset <S2SV_ModEnd> ( xd ->",0
477,"<S2SV_ModStart> hp ) ; if ( htc -> hct_version >= HTTP_HCT_VERSION ) { WSPR ( sp, SLT_HttpError, ""Host <S2SV_blank> header <S2SV_blank> has <S2SV_blank> too <S2SV_blank> long"" ) ; return retval ; }",0
478,"<S2SV_ModStart> define EOFOp 0x07 const <S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; <S2SV_ModStart>. x = ( unsigned char ) <S2SV_ModStart>. y = ( unsigned char ) <S2SV_ModStart>. rows = ( unsigned char ) <S2SV_ModStart>. x = ( unsigned char ) <S2SV_ModStart>. x = ( unsigned char ) <S2SV_ModStart>. y = ( unsigned char ) <S2SV_ModStart>. y = ( unsigned char )",0
479,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> sizeof ( tETH_HDR ),1
480,<S2SV_ModStart> -> u2_bottom_field_flag ; ps_dec -> u2_bottom_field_flag = 0 ; ps_dec -> u2_bottom_field_flag = 0 ; ps_dec -> u2_bottom_field_flag = 0 ; ps_dec -> u2_bottom_field_flag = 0 ; ps_dec -> u2_bottom_field_flag = 0 ; ps_dec -> u2_bottom_field_flag = 0 ; ps_dec -> u2_bottom_field_flag = 0 ; ps_dec -> u2_bottom_field_flag = 0 ; ps_dec -> u2_bottom_field_flag = 0 ; ps_dec -> u2_bottom_field_flag = 0 ; ps_dec -> u2_bottom_field_flag = 0 ; ps_dec -> u2_bottom_field_flag = 0 ; ps_dec -> u2_bottom_field_flag = 0 ; ps_dec -> u2_bottom_field_flag = 0 ; ps_dec -> u2_bottom_field_flag = 0 ; ps_dec -> u2_bottom_field_flag = 0 ; ps_dec,0
481,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> * karg ; <S2SV_ModEnd> int iocnum ; <S2SV_ModStart> ) ) ; kfree ( karg ) ; <S2SV_ModStart> ) ) ; kfree ( karg ) ; <S2SV_ModStart> ) ) ; kfree ( karg ) ; <S2SV_ModStart> ) ) ; kfree ( karg ) ; <S2SV_ModStart> ) ) ; kfree ( karg ) ; <S2SV_ModStart> ) ) ; kfree ( karg ) ; <S2SV_ModStart> ) ) ; kfree ( karg ) ; <S2SV_ModStart> ) ) ; kfree ( karg ) ; <S2SV_ModStart> ) ) ; kfree ( karg ) ; <S2SV_ModStart> ) ) ; kfree ( karg ) ; <S2SV_ModStart> ) ) ; kfree ( karg ) ; <S2SV_ModStart> ) ) ; kfree ( karg ) ; <S2SV_ModStart> ) ) ; kfree ( karg ) ; <S2SV_ModStart> ) ) ; kfree ( karg ) ; <S2SV_ModStart> ) ) ; kfree ( karg ) ; <S2SV_ModStart> ) ) ; kfree ( karg ) ; <S2SV_ModStart> ) ) ; kfree ( karg ) ; <S2SV_ModStart> ) ; return <S2SV_ModEnd> PTR_ERR ( karg <S2SV_ModStart> ) ) ; kfree ( karg ) ; <S2SV_ModStart> ) ; return <S2SV_ModEnd> PTR_ERR ( karg <S2SV_ModStart> ) ) ; kfree ( karg",0
482,<S2SV_ModStart> ) AcquireQuantumMemory ( ( unsigned char * ),0
483,<S2SV_ModStart> } else { if ( argc > 1 ) <S2SV_ModStart> } else { if ( argc > 1 ) <S2SV_ModStart> } else { if ( argc > 1 ) <S2SV_ModStart> } else { if ( argc > 1 ) <S2SV_ModStart> } else { if ( argc > 1 ) <S2SV_ModStart> } else { if ( argc > 1 ) <S2SV_ModStart> } else { if ( argc > 1 ) <S2SV_ModStart> } else { if ( argc > 1 ) <S2SV_ModStart> } else { if ( argc > 1 ) <S2SV_ModStart> } else { if ( argc > 1 ) <S2SV_ModStart> } else { if ( argc > 1 ) <S2SV_ModStart> } else { if ( argc > 1 ) <S2SV_ModStart> } else { if ( argc > 1 ) <S2SV_ModStart> } else { if ( argc > 1 ) <S2SV_ModStart> } else { if ( argc > 1 ) <S2SV_ModStart> } else { if ( argc > 1 ) <S2SV_ModStart> } else { if ( argc > 1 ) <S2SV_ModStart> } else { if ( argc > 1 ) <S2SV_ModStart> } else { if ( argc > 1 ) <S2SV_ModStart> } else { if ( argc > 1 ) <S2SV_ModStart> } else { if ( argc > 1 ) <S2SV_ModStart> } else { if ( argc > 1 ) <S2SV_ModStart> } else { if ( argc > 1 ) <S2SV_ModStart> } else { if ( argc > 1 ) <S2SV_ModStart> } else { if ( argc > 1 ) <S2SV_ModStart> } else {,0
484,"<S2SV_ModStart> ; if ( datao < 0 || datao > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> order = EXIF_BYTE_ORDER_INTEL ; datao += exif_get_long ( buf + datao, EXIF_BYTE_ORDER_INTEL ) ; if ( <S2SV_ModStart> ; if ( datao < 0 || <S2SV_ModStart> ; if ( datao < 0 || <S2SV_ModStart> ; if ( datao < 0 || <S2SV_ModStart> ; if ( datao < 0 || <S2SV_ModStart> ; if ( datao < 0 || <S2SV_ModStart> ; if ( datao < 0 || <S2SV_ModStart> ; if ( datao < 0 || <S2SV_ModStart> ; if ( datao < 0 || <S2SV_ModStart> ; if ( datao < 0 || <S2SV_ModStart> ; if ( datao < 0 || <S2SV_ModStart> ; if ( datao < 0 || <S2SV_ModStart> ; if ( datao < 0 || <S2SV_ModStart> ; if ( datao < 0 || <S2SV_ModStart> ; if ( datao < 0 || <S2SV_ModStart> ; if ( datao < 0 || datao < 0 || datao +",0
485,"<S2SV_ModStart> charbuf ) ; L_WARNING ( ""snprintf <S2SV_blank> %s <S2SV_blank> too <S2SV_blank> small; <S2SV_blank> using <S2SV_blank> min <S2SV_blank> value\\n"", procName ) ; <S2SV_ModStart> ) ) ; L_WARNING ( ""snprintf <S2SV_blank> %s <S2SV_blank> too <S2SV_blank> small; <S2SV_blank> using <S2SV_blank> min <S2SV_blank> value\\n"", procName, 1 ) ; <S2SV_ModStart> ) ) ; L_WARNING ( ""snprintf <S2SV_blank> %s <S2SV_blank> too <S2SV_blank> small; <S2SV_blank> using <S2SV_blank> min <S2SV_blank> value\\n"", procName ) ; <S2SV_ModStart> ) ) ; L_WARNING ( ""snprintf <S2SV_blank> %s <S2SV_blank> too <S2SV_blank> small; <S2SV_blank> using <S2SV_blank> min <S2SV_blank> value\\n"", procName ) ; <S2SV_ModStart> ) ) ; L_WARNING ( ""snprintf <S2SV_blank> %s <S2SV_blank> too <S2SV_blank> small; <S2SV_blank> using <S2SV_blank> min <S2SV_blank> value\\n"", procName ) ; <S2SV_ModStart> ) ) ; L_WARNING ( ""snprintf <S2SV_blank> %s <S2SV_blank> too <S2SV_blank> small; <S2SV_blank> using <S2SV_blank> min <S2SV_blank> value\\n"", procName ) ; <S2SV_ModStart> ) ) ; L_WARNING ( ""snprintf <S2SV_blank> %s <S2SV_blank> too <S2SV_blank> small; <S2SV_blank> using <S2SV_blank> min <S2SV_blank> value\\n"", procName ) ; <S2SV_ModStart> ) ) ; L_WARNING ( ""snprintf <S2SV_blank> %s <S2SV_blank> too <S2SV_blank> small; <S2SV_blank> using <S2SV_blank> min <S2SV_blank> value\\n""",0
486,"<S2SV_ModStart> void ) { if (! s_check_valid_ports ( ) ) return ; <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> opt = service_options <S2SV_ModStart>. next ; service_options. next = NULL ; service_free ( & service_options ) ; while ( opt ) { unsigned i ; s_log ( LOG_DEBUG, ""Unbinding <S2SV_blank> service <S2SV_blank> [%s]"", opt -> servname ) ; for ( i = 0 ; i < opt -> local_addr. num ; ++ i ) unbind_port ( opt, i ) ; if ( opt -> ctx ) SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; s_log ( LOG_DEBUG, ""Service <S2SV_blank> [%s] <S2SV_blank> closed"", opt -> servname ) ; <S2SV_ModStart>. next ; service_free ( & service_options ) ; <S2SV_ModEnd> } if ( <S2SV_ModStart> servname ) ; <S2SV_ModEnd> } CRYPTO_THREAD_unlock (",0
487,<S2SV_ModStart> void ) { if (! recovery_started ) return ;,0
488,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ; TRACE_DEBUG <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ;",0
489,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( image -> num_planes > 1 ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
490,<S2SV_ModStart> { WORD32 i <S2SV_ModEnd> ; WORD32 num_neg_pics <S2SV_ModStart> ; } } <S2SV_ModEnd> ihevcd_ref_list_init ( ps_codec,0
491,"<S2SV_ModStart>, int fmt, char * * * out, int * * out, int * len <S2SV_ModStart> child ) { int len = 7, j ; <S2SV_ModStart> child ) { len = 7 ; i = 0 ; j = 0 ; <S2SV_ModStart> child ) { len = 7 ; j = 0 ; <S2SV_ModStart> string ) ; len = 7 ; j = 0 ; <S2SV_ModStart> depth, fmt, & len <S2SV_ModStart> = 1 ; len = 7 ; <S2SV_ModStart> = 1 ; len = 7 ; <S2SV_ModStart> = 1 ; len = 7 ; <S2SV_ModStart> = 1 ; len = 7 ; <S2SV_ModStart> = 0 ; len = 7 ; <S2SV_ModStart> = 0 ; len = 7 ; <S2SV_ModStart> = 0 ; len = 7 ; <S2SV_ModStart> = 0 ; len = 7 ; <S2SV_ModStart> = 0 ; len = 7 ; <S2SV_ModStart> = 0 ; len = 7 ; <S2SV_ModStart> = 0 ; len = 7 ; <S2SV_ModStart> = 0 ; len = 7 ; j = 0 ; j < depth ; j ++ ) { if ( fmt ) for ( j = 0 ; j = 0 ; j < depth ; ++ j ) { if ( fmt ) for ( j = 0 ; j = 0 ; j < depth ; ++ j ) * ptr = '\\t' ; strcpy ( ptr, names [ j ] ) ; } } else { <S2SV_ModStart> = '\\t'",0
492,<S2SV_ModStart> sk ) ; unix_peer_wake_lock ( sk ) ; <S2SV_ModStart> { if ( unix_peer_wake_lock ( sk ) ) { if ( <S2SV_ModStart> = 0 ; unix_peer_wake_lock ( sk ) ; } } else { writable = unix_peer ( other ) ; } } <S2SV_ModEnd> } if (,0
493,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; send ( outputbuffer ) ;",0
494,<S2SV_ModStart> * minor_status = <S2SV_ModEnd> KRB5_BAD_MSIZE ; return,0
495,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vp9_ref_frame_t * frame <S2SV_ModEnd> ; if ( <S2SV_ModStart> NULL ) { vpx_get_reference_enc <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> -> cpi, ctx -> ctr_id <S2SV_ModEnd>, & fb",0
496,<S2SV_ModStart> plug ) ; kiocb_batch_free_all <S2SV_ModEnd> ( & batch,0
497,"<S2SV_ModStart>, int rep_quick, my_off_t sort_param <S2SV_ModStart> ) || ( sort_param. <S2SV_ModStart> ) || ( sort_param. <S2SV_ModStart> ) || ( sort_param. <S2SV_ModStart> ) || ( sort_param. <S2SV_ModStart> ) || ( sort_param. <S2SV_ModStart> ) || ( sort_param. <S2SV_ModStart> ) || ( sort_param. <S2SV_ModStart> ) || ( sort_param. <S2SV_ModStart> ) || ( sort_param. <S2SV_ModStart> ) || ( sort_param. <S2SV_ModStart> ) || ( sort_param. <S2SV_ModStart> ) || ( sort_param. <S2SV_ModStart> ) || ( sort_param. <S2SV_ModStart> ) || ( sort_param. <S2SV_ModStart> ) || ( sort_param. <S2SV_ModStart> ) || ( sort_param. <S2SV_ModStart> ) || ( sort_param. <S2SV_ModStart> ) || ( sort_param. <S2SV_ModStart> ) || ( sort_param. <S2SV_ModStart> ) || ( sort_param. <S2SV_ModStart> ) || ( sort_param. <S2SV_ModStart> ) || ( sort_param. <S2SV_ModStart> ) || ( sort_param. <S2SV_ModStart> ) || ( sort_param. <S2SV_ModStart> ) || ( sort_param. <S2SV_ModStart> ) || ( sort_param. <S2SV_ModStart> ) || ( sort_param. <S2SV_ModStart> ) || ( sort_param. <S2SV_ModStart> ) || ( sort_param. <S2SV_ModStart> ) || ( sort_param",0
498,"<S2SV_ModStart> s } ; <S2SV_ModEnd> uECC_word_t carry ; <S2SV_ModStart> ; EccPoint_mult ( curve -> G, k2 [! carry ], 0, num_n_bits + 1, curve ) ; if ( uECC_vli_isZero ( p, num_n_bits ) ) { return 0 ; } if ( uECC_generate_random_int ( tmp, curve -> n, num_n_words ) ) { return 0 ; } uECC_vli_modMult ( k, curve -> n, curve -> n, num_n_bits ) ; uECC_vli_modInv ( k, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, curve -> n, num_n_words ) ; uECC_vli_modInv ( k, curve -> n, num_n_words",0
499,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
500,<S2SV_ModStart> ; } else if ( pool -> free_total > pool -> free_total ) <S2SV_ModStart> ; } } else { free ( buf ) ; },0
501,"<S2SV_ModStart> ( * cp && cp [ 1 ] <S2SV_ModStart> [ ] = ""00112233445566778899aAbBcCdDeEfF"" <S2SV_ModEnd> ; const char <S2SV_ModStart> * dp ; const int dcount = 0 ; cp ++ ; if ( cp [ 1 ] && cp [ 2 ] ) cval = ( cval * 16 ) + ( ( int ) ( dp - hex ) / 2 ) ; else if ( cp [ 1 ] && cp [ 2 ] ) cval = ( cval * 16 ) + ( ( int ) ( dp - hex ) / 2 ) ; else if ( cp [ 1 ] && cp [ 2 ] ) cval = ( cval * 8 ) + ( * cp - '0' ) ; else for ( ; * cp && ( index ( ""0123456789"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 8 ) + ( * cp - '0' ) ; else if ( cp [ 1 ] && cp [ 2 ] ) cval = ( cval * 10 ) + ( * cp ; } cp ++ ; } else if ( cp == '\\\\' && cp [ 1 ] ) { switch ( cp [ 1 ] )",0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
503,"<S2SV_ModStart>, * pixg ; pixc = pixFewColorsOctcubeQuant1 ( pixs, level ) ; if (! pixc <S2SV_ModEnd> ) return ( <S2SV_ModStart>, NULL ) ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; if ( pixc <S2SV_ModEnd> == NULL ) <S2SV_ModStart> == NULL ) { pixc = pixFewColorsOctcubeQuantmixed ( pixs, level ) ; if ( pixc == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; } <S2SV_ModEnd> cmap = pixGetColormap <S2SV_ModStart> ; } } <S2SV_ModEnd> for ( i <S2SV_ModStart> i ] ; <S2SV_ModEnd> i < wplm <S2SV_ModStart> i ] ; <S2SV_ModEnd> i ++ ) <S2SV_ModStart> i ] ; <S2SV_ModEnd> i ++ ) <S2SV_ModStart> i ] ; <S2SV_ModEnd> i ++ ) <S2SV_ModStart> i ] ; <S2SV_ModEnd> i ++ ) <S2SV_ModStart> i ] ; <S2SV_ModEnd> i ++ ) <S2SV_ModStart> i ] ; <S2SV_ModEnd> i ++ ) <S2SV_ModStart> i ] ; <S2SV_ModEnd> i ++ ) <S2SV_ModStart> i ] ; <S2SV_ModEnd> i ++ ) <S2SV_ModStart> i ] ; <S2SV_ModEnd> i ++ ) <S2SV_ModStart> i ] ; <S2SV_ModEnd> i ++ ) <S2SV_ModStart> i ] ; <S2SV_ModEnd> i ++ ) <S2SV_ModStart> i ] ; <S2SV_ModEnd> i ++ ) <S2SV_ModStart> i ] ; <S2SV_ModEnd> i ++ ) <S2SV_ModStart> i",0
504,<S2SV_ModStart>. vf = vp8_mse16x16 <S2SV_ModEnd> ; xd ->,0
505,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> overhead = 16 <S2SV_ModStart> + 1 ; size_t <S2SV_ModEnd> size = overhead,1
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NEGO_STATE_FINAL ; return NEGO_STATE_FINAL ;,0
507,"<S2SV_ModStart> i, target_bits_per_mb, correction_factor <S2SV_ModStart> i, correction_factor, cm -> rate_correction_factor <S2SV_ModStart> active_worst_quality ) ; cm -> rate_correction_factor = cm -> rate_correction_factor ;",0
508,<S2SV_ModStart> ; value |= TJA1101_CONFIG1_MII_MODE_RMII_25 <S2SV_ModEnd> ; tja1101WritePhyReg (,0
509,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD,0
510,"<S2SV_ModStart> int dst_stride, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart> mode, TX_SIZE <S2SV_ModEnd> ) ; DECLARE_ALIGNED_ARRAY <S2SV_ModStart> + y ; memset <S2SV_ModEnd> ( left_col, <S2SV_ModStart> + y ; memset <S2SV_ModEnd> ( left_col,",0
511,"<S2SV_ModStart> ++ ; } if ( end < 0 ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> NULL <S2SV_blank> pattern\\n"" ) ; goto error ; } <S2SV_ModStart> end ++ ; if ( end < 0 ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> NULL <S2SV_blank> pattern\\n"" ) ; goto error ; }",0
512,<S2SV_ModStart> ; ei -> i_io_cache = 0 ; ei ->,0
513,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm -> frame_type <S2SV_ModEnd> ) ; vp9_wb_write_bit <S2SV_ModStart> cm -> show_frame <S2SV_ModEnd> ) ; if <S2SV_ModStart> KEY_FRAME ) { const COLOR_SPACE cs = UNKNOWN ; vp9_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { const COLOR_SPACE cs = UNKNOWN ; vp9_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { const COLOR_SPACE cs = UNKNOWN ; vp9_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb ) ; vp9_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb",0
514,"<S2SV_ModStart> : if ( rrd_graph_options_valid ( argc, argv ) ) { <S2SV_ModEnd> return ; } <S2SV_ModStart> : if ( rrd_graph_options_valid ( argc, argv ) ) { <S2SV_ModEnd> return ; } <S2SV_ModStart> : if ( rrd_graph_options_valid ( argc, argv ) ) { <S2SV_ModEnd> return ; } <S2SV_ModStart> : if ( rrd_graph_options_valid ( argc, argv ) ) { <S2SV_ModEnd> return ; } <S2SV_ModStart> : if ( rrd_graph_options_valid ( argc, argv ) ) { <S2SV_ModEnd> return ; } <S2SV_ModStart> : if ( rrd_graph_options_valid ( argc, argv ) ) { <S2SV_ModEnd> return ; } <S2SV_ModStart> : if ( rrd_graph_options_valid ( argc, argv ) ) { <S2SV_ModEnd> return ; } <S2SV_ModStart> : if ( rrd_graph_options_valid ( argc, argv ) ) { <S2SV_ModEnd> return ; } <S2SV_ModStart> : if ( rrd_graph_options_valid ( argc, argv ) ) { <S2SV_ModEnd> return ; } <S2SV_ModStart> : if ( rrd_graph_options_valid ( argc, argv ) ) { <S2SV_ModEnd> return ; } <S2SV_ModStart> : if ( rrd_graph_options_valid ( argc, argv ) ) { <S2SV_ModEnd> return ; }",0
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { q = osStrchr <S2SV_ModEnd> ( p +,1
516,"<S2SV_ModStart> ; if ( TYPE_COMMENT ( CHILD ( n, i ) ) == TYPE_COMMENT ) { arg -> type_comment = NEW_TYPE_COMMENT ( CHILD ( n, i ) ) ; if (! arg -> type_comment ) goto error ; i += 1 ; } else if (",0
517,<S2SV_ModStart> KEY_FRAME ) { memset <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd ->,0
518,"<S2SV_ModStart> error_t error ; <S2SV_ModEnd> uint32_t status ; <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT ) { if ( enc624j600ReadReg ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT ) { enc624j600WriteReg ( interface, ENC624J600_ERXRDPT, context -> nextPacket ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & status, sizeof ( uint16_t ) ) ; status = letoh16 ( status ) ; if ( status & ENC624J600_RRX_BUFFER_START ) { enc624j600WriteReg ( interface, ENC624J600_ERXTAIL, ENC624J600_RX_BUFFER_STOP ) ; } else { error = ERROR_INVALID_PACKET ; } if ( context -> nextPacket == ENC624J600_RX_BUFFER_START ) { enc624j600WriteReg ( interface, ENC624J600_ERXTAIL, ENC624J600_RX_BUFFER_STOP ) ; } else { error =",0
519,"<S2SV_ModStart> VALUE read_memory ( VALUE klass, VALUE content_type, VALUE * content_type <S2SV_ModEnd> ) { xmlSchemaPtr <S2SV_ModStart> xmlSchemaPtr schema ; VALUE rb_schema ; VALUE errors ; VALUE errors ; VALUE errors ; VALUE errors ; VALUE errors ; VALUE errors ; VALUE errors ; VALUE errors ; VALUE errors ; VALUE errors ; VALUE errors ; VALUE errors ; VALUE errors ; VALUE errors ; VALUE errors ; VALUE errors ; VALUE errors ; VALUE errors ; VALUE errors ; VALUE errors ; VALUE errors ; VALUE errors ; VALUE errors ; VALUE errors ; VALUE errors ; VALUE errors ; VALUE errors ; VALUE errors ; VALUE errors ; VALUE errors ; VALUE errors ; VALUE errors ; VALUE errors ; VALUE errors ; VALUE errors ; VALUE errors ; VALUE errors ; VALUE errors ; VALUE errors ; rb_schema ; VALUE errors ; rb_schema ; VALUE errors ; rb_schema ; rb_iv_set ( rb_schema, ""@schema"", errors ) ; rb_iv_set ( rb_schema, ""@schema"", errors ) ; <S2SV_ModEnd> rb_schema = Data_Wrap_Struct <S2SV_ModStart> ( rb_schema, <S2SV_ModEnd> schema ) ; <S2SV_ModStart> errors ) ; <S2SV_ModEnd> return rb_schema ;",0
520,"<S2SV_ModStart> ( LOG_ERR, ""Unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> configuration <S2SV_blank> file"" <S2SV_ModEnd> ) ; print_syntax",0
521,<S2SV_ModStart> ; out += 4 <S2SV_ModEnd> ; } state <S2SV_ModStart> ; out += 4 <S2SV_ModEnd> ; } state,0
522,<S2SV_ModStart> err = - <S2SV_ModEnd> EALREADY ; if,0
523,<S2SV_ModStart> POLL_IN ) ; <S2SV_ModEnd> handle -> event <S2SV_ModStart> pending ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
524,"<S2SV_ModStart> * s, u16 <S2SV_ModEnd> len, wchar_t <S2SV_ModStart> * s && ( unsigned char ) len <S2SV_ModEnd> > 0 ) <S2SV_ModStart> if ( u > PLANE_SIZE ) { u -= PLANE_SIZE ; <S2SV_ModEnd> * op ++ <S2SV_ModStart> * op ++ = <S2SV_ModEnd> ( wchar_t ) <S2SV_ModStart> ) ) ; } else { * op ++ = ( wchar_t ) u ; } s += size ; len -= size ; } <S2SV_ModStart> } else { <S2SV_ModEnd> * op ++ <S2SV_ModStart> op ++ = <S2SV_ModEnd> s ++ ; <S2SV_ModStart> } } return <S2SV_ModEnd> pwcs ; }",0
525,"<S2SV_ModStart> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" ) ; crm_trace ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" ) ; rc = pcmk_ok ; } } if ( rc == pcmk_ok ) { crm_trace ( ""Setting <S2SV_blank> up <S2SV_blank> stonith <S2SV_blank> callbacks"" ) ; crm_trace ( ""Setting <S2SV_blank> up <S2SV_blank> stonith <S2SV_blank> callbacks"" ) ; rc = pcmk_ok ; } crm_trace ( ""Setting <S2SV_blank> up <S2SV_blank> stonith <S2SV_blank> callbacks"" ) ; rc = pcmk_ok ; crm_trace ( ""Setting <S2SV_blank> up <S2SV_blank> stonith <S2SV_blank> callbacks"" ) ; rc = pcmk_ok ; crm_trace ( ""Setting <S2SV_blank> up <S2SV_blank> stonith <S2SV_blank> callbacks"" ) ; rc = pcmk_ok ; crm_trace ( ""Setting <S2SV_blank> up <S2SV_blank> stonith <S2SV_blank> callbacks"" ) ; rc = pcmk_ok ; crm_trace ( ""Setting <S2SV_blank> up <S2SV_blank> stonith <S2SV_blank> callbacks"" ) ; rc = pcmk_ok ; crm",0
526,"<S2SV_ModStart> ( interface, KSZ8851_RXFHSR ) ; if ( ( status & RXFHSR_RXFV )!= 0 ) { if ( ( status & RXFHSR_RXFM ) <S2SV_ModEnd> ) { if <S2SV_ModStart> ( interface, KSZ8851_RXFHBCR ) & RXFHBCR_RXBC_MASK ; if ( n > 0 && n <= ETH_MAX_FRAME_SIZE ) { ksz8851WriteReg ( interface, KSZ8851_RXFDPR, RXFDPR_RXFPAI ) ; ksz8851SetBit ( interface, KSZ8851_RXQCR, RXQCR_SDA ) ; ksz8851ClearBit ( interface, KSZ8851_RXQCR, RXQCR_SDA ) ; ksz8851ClearBit ( interface, KSZ8851_RXQCR, RXQCR_SDA ) ; ksz8851SetBit ( interface, KSZ8851_RXQCR, RXQCR_SDA ) ; ksz8851SetBit ( interface, KSZ8851_RXQCR, RXQCR_SDA ) ; ksz8851SetBit ( interface, KSZ8851_",0
527,"<S2SV_ModStart> * c, const node * n, asdl_seq * funcdef, <S2SV_ModStart> int is_async ) <S2SV_ModEnd> return NULL ; <S2SV_ModStart>, LINENO ( funcdef <S2SV_ModEnd> ), n <S2SV_ModStart>, LINENO ( funcdef <S2SV_ModEnd> ), n",0
528,<S2SV_ModStart> int i ; if (! mm_enabled ( mm ) ) return ;,0
529,<S2SV_ModStart> -> data_length ; sn_coap_protocol_free_header ( handle ) ; <S2SV_ModStart> -> data_length ; sn_coap_protocol_free_header ( handle ) ;,0
530,<S2SV_ModStart> 1 ; } <S2SV_ModEnd> config_free ( config,0
531,<S2SV_ModStart> 0 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif <S2SV_ModStart> col ) = ( int ) <S2SV_ModStart> > 4098 && ( int ),0
532,<S2SV_ModStart> len ) ; BUG_ON ( len < needed ) ;,0
533,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;",0
534,<S2SV_ModStart> ( bfqq ) bfq_idle_slice_timer_body <S2SV_ModEnd> ( bfqq ),0
535,<S2SV_ModStart> ; length += PRIMARY_DRAWING_ORDER_FIELD_BYTES <S2SV_ModEnd> [ orderInfo ->,0
536,<S2SV_ModStart> ; if ( ovl_dentry_is_dir ( new ) ) { if ( ovl_dentry_is_dir ( new ) ) { if ( ovl_dentry_is_dir ( new ) ) { err = ovl_dentry_is_dir ( new ) ; goto out ; } } if ( <S2SV_ModStart> ; if ( ovl_dentry_is_dir ( new ) ) { if ( <S2SV_ModStart> old_upperdir ) ; } if ( ovl_dentry_is_dir ( new ) ) { if ( ovl_dentry_is_dir ( new ) ) { if ( ovl_dentry_is_dir ( new ) ) { if ( ovl_dentry_is_dir ( new ) ) { if ( ovl_dentry_is_dir ( new ) ) { if ( ovl_dentry_is_dir ( new ) ) { if ( ovl_dentry_is_dir ( new ) ) { if ( ovl_dentry_is_dir ( new ) ) { if ( ovl_dentry_is_dir ( new ) ) { if ( ovl_dentry_is_dir ( new ) ) { if ( ovl_dentry_is_dir ( new ) ) { if ( ovl_dentry_is_dir ( void ),0
537,"<S2SV_ModStart> int plane ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
538,"<S2SV_ModStart> * cpi, TileData * tile_data <S2SV_ModEnd>, int mi_row <S2SV_ModStart> -> e_mbd ; memset ( tile_data, 0, sizeof ( tile_data ) ) ; <S2SV_ModStart> ( cpi, tile_data <S2SV_ModEnd>, mi_row, <S2SV_ModStart> bsize ) ; memset ( xd -> mi [ 0 ] -> mbmi. sb_type, 0, sizeof ( xd -> mi [ 0 ] -> mbmi. sb_type ) ; xd -> mi [ 0 ] -> mbmi. sb_type = bsize ; <S2SV_ModStart>, x, tile_data <S2SV_ModEnd>, mi_row,",0
539,<S2SV_ModStart> * err = safe_ superblockRead <S2SV_ModEnd> ( & reader,0
540,<S2SV_ModStart> -> ranges = safeMalloc <S2SV_ModEnd> ( sizeof (,0
541,<S2SV_ModStart> & VP8_EFLAG_NO_UPD_GF ) ) || ( <S2SV_ModEnd> flags & VP8_EFLAG_FORCE_GF <S2SV_ModStart> & VP8_EFLAG_FORCE_GF ) ) || ( <S2SV_ModEnd> flags & VP8_EFLAG_NO_UPD_ARF <S2SV_ModStart> & VP8_EFLAG_FORCE_ARF ) ) || ( <S2SV_ModEnd> flags & VP8_EFLAG_FORCE_ARF <S2SV_ModStart> & VP8_EFLAG_FORCE_ARF ) ) || ( <S2SV_ModEnd> flags & VP8_EFLAG_FORCE_ARF <S2SV_ModStart> & VP8_EFLAG_FORCE_ARF ) ) || ( <S2SV_ModEnd> flags & VP8_EFLAG_FORCE_ARF <S2SV_ModStart> & VP8_EFLAG_FORCE_ARF ) ) || ( <S2SV_ModEnd> flags & VP8_EFLAG_FORCE_ARF <S2SV_ModStart> & VP8_EFLAG_FORCE_ARF ) ) || ( <S2SV_ModEnd> flags & VP8_EFLAG_FORCE_ARF <S2SV_ModStart> & VP8_EFLAG_FORCE_ARF ) ) || ( <S2SV_ModEnd> flags & VP8_EFLAG_FORCE_ARF <S2SV_ModStart> & VP8_EFLAG_FORCE_ARF ) ) || ( <S2SV_ModEnd> flags & VP8,0
542,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;",0
543,<S2SV_ModStart> (! head ||! atomic_read ( & event -> hlist_entry ) <S2SV_ModStart> EINVAL ; } if (! atomic_read ( & event -> hlist_entry ) ) { <S2SV_ModStart> head ) ; },0
544,"<S2SV_ModStart> * pptr, u_int <S2SV_ModEnd> len ) { <S2SV_ModStart> len ) { ND_TCHECK_16BITS ( len ) ; <S2SV_ModStart> len ) ; ND_TCHECK_16BITS ( len ) ;",0
545,"<S2SV_ModStart> ""False"" ) ; if ( res -> outputbuffer == NULL ) { StringBuffer_append ( res -> outputbuffer, ""<tr><td>Process <S2SV_blank> failed"" ) ; }",0
546,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
547,"<S2SV_ModStart> ) ) ; if ( len < sizeof ( * constr ) ) { arStr = ""invalid <S2SV_blank> length <S2SV_blank> of <S2SV_blank> %u"" ; arStr = ""invalid <S2SV_blank> length <S2SV_blank> of <S2SV_blank> %u"" ; return false ; }",0
548,"<S2SV_ModStart> ; if ( nintf_orig < 0 || nintf_orig < 0 ) { dev_err ( ddev, ""invalid <S2SV_blank> interface <S2SV_blank> size <S2SV_blank> %d\\n"", nintf_orig ) ; break ; } if (",0
549,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",0
550,<S2SV_ModStart> ; distortion = vpx_variance16x16 <S2SV_ModEnd> ( * (,1
551,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN_ETHEN_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN_STRCH <S2SV_ModEnd> ) ; macAddrToEui64 <S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN_STRCH <S2SV_ModEnd> ) ; macAddrToEui64 <S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN_STRCH <S2SV_ModEnd> ) ; macAddrToEui64 <S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_E",0
552,<S2SV_ModStart> * start ; size_t header_len = sizeof ( psf -> header ) ; <S2SV_ModStart> = strlen ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header ) ; start = ( ( char * ) psf -> header <S2SV_ModStart> + maxlen ; if ( header_len < sizeof ( psf -> header ) ) { <S2SV_ModStart> = 0 ; },0
553,<S2SV_ModStart> -> alg_priv ) { <S2SV_ModStart> alg_priv ) ; },0
554,<S2SV_ModStart> speed ) { const VP9EncoderConfig * cfg = cpi -> cfg ; <S2SV_ModStart> 1 ) { const VP9EncoderConfig * cfg = cpi -> cfg ; <S2SV_ModStart> ; sf -> <S2SV_ModEnd> tx_size_search_method = vp9_frame_is_boosted <S2SV_ModStart> ; sf -> <S2SV_ModEnd> tx_size_search_method = vp9_frame_is_boosted <S2SV_ModStart> ; sf -> <S2SV_ModEnd> adaptive_motion_search = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> adaptive_rd_breakout = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> subpel_iters_per_step = 1 <S2SV_ModStart> ; sf -> adaptive_pred_interp_filter = 1 ; sf -> <S2SV_ModStart> 2 ) { cfg <S2SV_ModEnd> -> adaptive_pred_interp_filter = <S2SV_ModStart> ; sf -> <S2SV_ModEnd> mode_skip_start = 10 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> mode_skip_start = 10 <S2SV_ModStart> ; sf -> adaptive_pred_interp_filter = 1 ; sf -> <S2SV_ModStart> 2 ) { cfg <S2SV_ModEnd> -> adaptive_pred_interp_filter = <S2SV_ModStart> ; sf -> <S2SV_ModEnd> mode_skip_start = 10 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> mode_skip_start = 10 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> mode_skip_start = 10 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> mode_skip_start,0
555,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ]. poll_count ),0
556,<S2SV_ModStart> int goodsize = ( inuse + 2 ) <S2SV_ModEnd> + 2 *,0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,<S2SV_ModStart> n ) ; char buf [ 128 ] ; <S2SV_ModStart> const char * <S2SV_ModEnd> s = STR <S2SV_ModStart> cstr ) { <S2SV_ModEnd> s = _PyUnicode_AsString,0
559,<S2SV_ModStart> input_ptr ; int num_layers = 0 ; int <S2SV_ModStart> break ; } num_layers = atoi ( option_name ) ; <S2SV_ModStart> break ; } num_layers ++ ; <S2SV_ModStart> break ; } num_layers ++ ; <S2SV_ModStart> break ; } num_layers ++ ; <S2SV_ModStart> break ; } num_layers ++ ; <S2SV_ModStart> ) break ; num_layers ++ ; <S2SV_ModStart> ) break ; num_layers ++ ; <S2SV_ModStart> ) break ; num_layers ++ ; <S2SV_ModStart> ) break ; num_layers ++ ; <S2SV_ModStart> ) break ; num_layers ++ ; <S2SV_ModStart> ) break ; num_layers ++ ; <S2SV_ModStart> ) break ; num_layers ++ ; <S2SV_ModStart> ) break ; num_layers ++ ; <S2SV_ModStart> ) break ; num_layers ++ ; <S2SV_ModStart> ) break ; num_layers ++ ; <S2SV_ModStart> ) break ; num_layers ++ ; <S2SV_ModStart> ) break ; num_layers ++ ; <S2SV_ModStart> ) break ; num_layers ++ ; <S2SV_ModStart> ) break ; num_layers ++ ; <S2SV_ModStart> ) break ; num_layers ++ ; <S2SV_ModStart> ) break ; num_layers ++ ; <S2SV_ModStart> ) break ; num_layers ++ ; <S2SV_ModStart> ) break ; num_layers ++ ; <S2SV_ModStart> ) break ; num_layers ++ ; <S2SV_ModStart> ) break ; num_layers ++ ; <S2SV_ModStart> ) break ; num_layers ++ ; <S2SV_ModStart>,0
560,"<S2SV_ModStart> ) ; } mb_index = 0 ; fprintf ( mvs, ""Mbs <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < 4 * rows ; mb_row ++ ) { int b_col ; int b_col ; int b_col ; for ( b_col = 0 ; b_col < 4 * rows ; mb_col ++ ) { int b_col ; int b_col ; int b_col ; int b_col ; for ( b_col = 0 ; b_col < 4 * rows ; mb_col ++ ) { int b_col ; int b_col ; int b_col ; int b_col ; int b_col ; for ( b_col ; b_col = 0 ; b_col < 4 * rows ; mb_col ++ ) { int b_col ; int b_col ; int b_col ; int b_col ; int b_col ; int b_col ; int b_col ; for ( b_col ; b_col = 0 ; b_col < cols ; mb_col ++ ) { int b_col ; int b_col ; int b",0
561,<S2SV_ModStart> self ) { <S2SV_ModEnd> PyObject * new_memo,0
562,,1
563,"<S2SV_ModStart> ( dbh, mysql_error ( imp_dbh -> pmysql ),",0
564,<S2SV_ModStart> ) || ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) == 0 ) <S2SV_ModStart> slot_lock ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> slot -> id ),0
565,"<S2SV_ModStart> struct ieee_802_11_phdr phdr ; guint64 data_len <S2SV_ModStart> mpdu_id ) ; data_len = tvb_get_letohl ( tvb, offset ) ; <S2SV_ModStart> mpdu_tree, ppi_tree, data_len, data_len, data_len, data_len, data_len, data_len, data_len, data_len, data_len, data_len, data_len, data_len, data_len, data_len, data_len, data_len, data_len, data_len, data_len, data_len, data_len, data_len, data_len, data_len, data_len, data_len, data_len, data_len, data_len, data_len, data_len, data_len, data_len, data_len, data_len, data_len, data_len, data_len, data_len, data_len, data_len, data_len, data_len, data_len, data_len, data_len, data_len, data_len, data_len, data_len,",0
566,<S2SV_ModStart> ; sh = s_calloc_safe <S2SV_ModEnd> ( hdrlen +,0
567,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> ; UINT32 tempWidth ; if (! data ) return FALSE <S2SV_ModStart> -> ColorLossLevel ; if ( scanline > context -> width ) return FALSE ; <S2SV_ModStart> context -> width ; if ( scanline > context -> height ) return FALSE <S2SV_ModStart> ; x < ( int ) <S2SV_ModStart> context -> width ; if ( scanline > context -> height ) return FALSE,0
568,"<S2SV_ModStart> > nr_parens ) { ret = - EINVAL ; parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } <S2SV_ModEnd> * ( ++",0
569,<S2SV_ModStart> & cpi -> oxcf. <S2SV_ModStart> = ( ( cpi -> oxcf. <S2SV_ModStart> int ) ( cpi -> oxcf. <S2SV_ModStart> int ) ( cpi -> oxcf. <S2SV_ModStart> int ) ( cpi -> oxcf. <S2SV_ModStart> int ) ( cpi -> oxcf. <S2SV_ModStart> int ) ( cpi -> oxcf. <S2SV_ModStart> int ) ( cpi -> oxcf. <S2SV_ModStart> int ) ( cpi -> oxcf. <S2SV_ModStart> int ) ( cpi -> oxcf. <S2SV_ModStart> int ) ( cpi -> oxcf. <S2SV_ModStart> int ) ( cpi -> oxcf. <S2SV_ModStart> int ) ( cpi -> oxcf. <S2SV_ModStart> int ) ( cpi -> oxcf. <S2SV_ModStart> int ) ( cpi -> oxcf. <S2SV_ModStart> int ) ( cpi -> oxcf. <S2SV_ModStart> int ) ( cpi -> oxcf. <S2SV_ModStart> int ) ( cpi -> oxcf. <S2SV_ModStart> int ) ( cpi -> oxcf. <S2SV_ModStart> int ) ( cpi -> oxcf. <S2SV_ModStart> int ) ( cpi -> oxcf. <S2SV_ModStart> int ) ( cpi -> oxcf. <S2SV_ModStart> int ) ( cpi -> oxcf. <S2SV_ModStart> int ) ( cpi -> oxcf. <S2SV_ModStart> int ) ( cpi -> oxcf. <S2SV_ModStart> int ) ( cpi -> oxcf. <S2SV_ModStart> int ) ( cpi -> oxcf. <S2SV_ModStart> int ) ( cpi -> oxcf. <S2SV_ModStart> int ) (,0
570,"<S2SV_ModStart> TX_MODE read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r )",1
571,"<S2SV_ModStart> : # line 96 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> } # line 96 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 96 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 96 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 96 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 96 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 96 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 96 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 96 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 96 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 96 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy",0
572,"<S2SV_ModStart> -> cpi ; MACROBLOCKD * xd = args -> xd ; <S2SV_ModStart> * p = xd -> xd ; TOKENEXTRA * * tp = args -> tp ; uint8_t * p = & xd -> plane [ plane ] ; MB_MODE_INFO * mbmi = & xd -> plane [ plane ] ; MB_MODE_INFO * mbmi = & pd -> plane [ plane ] ; MB_MODE_INFO * mbmi = & pd -> plane [ plane ] ; MB_MODE_INFO * mbmi = & pd -> plane [ plane ] ; MB_MODE_INFO * mbmi = & pd -> plane [ plane ] ; const int seg_eob = get_tx_eob ( & cpi -> common. seg, segment_id, tx_size ) ; const int seg_eob = get_tx_eob ( & cpi -> common. seg, segment_id, tx_size ) ; const int seg_eob = get_tx_eob ( & cpi -> common. seg, segment_id, tx_size ) ; int aoff, loff ; txfrm_block_to_raster_xy ( plane_size, tx_size, block, & aoff,",0
573,<S2SV_ModStart> -> pSrc ; if ( pSrc -> nSrc > MAX_SELECT_COUNT ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; },0
574,<S2SV_ModStart> ; serv = svc_create_svc_create <S2SV_ModEnd> ( & nfs4_callback_program,0
575,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
576,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
577,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
578,"<S2SV_ModStart> do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> s, 0 )",1
579,<S2SV_ModStart> = NULL ; int len = 0 ; <S2SV_ModStart> -> name ; len = strlen ( xml ) ; <S2SV_ModStart> } else { const char * path = xml_get_path ( xml ) ; if ( xml!= xmlGetRootElement ( xml -> doc ) ) { xmlUnlinkNode ( xml ) ; xmlFreeNode ( xml ) ; xmlFreeNode ( xml ) ; xmlFreeNode ( xml ) ; xmlFreeNode ( xml ) ; xmlFreeNode ( xml ) ; xmlFreeNode ( xml ) ; xmlFreeNode ( xml ) ; xmlFreeNode ( xml ) ; xmlFreeNode ( xml ) ; xmlFreeNode ( xml ) ; xmlFreeNode ( xml ) ; xmlFreeNode ( xml ) ; xmlFreeNode ( xml ) ; xmlFreeNode ( xml ) ; xmlFreeNode ( xml ) ; xmlFreeNode ( xml ) ; xmlFreeNode ( xml ) ; xmlFreeNode ( xml ) ; xmlFreeNode ( xml ) ; } } } } } <S2SV_ModEnd> while ( cIter,0
580,<S2SV_ModStart> <S2SV_null> static const SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> return ( const SvcInternal_t <S2SV_ModEnd> * ) svc_ctx,1
581,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } } },0
582,"<S2SV_ModStart> char buffer [ 80 <S2SV_ModEnd> ] ; int <S2SV_ModStart> ; if ( ( <S2SV_ModStart>, ""420"" ) ) || ( <S2SV_ModEnd> strcmp ( _y4m <S2SV_ModStart>, ""420jpeg"" ) ) || ( <S2SV_ModEnd> strcmp ( _y4m <S2SV_ModStart>, ""420jpeg"" ) ) || ( <S2SV_ModEnd> strcmp ( _y4m <S2SV_ModStart>, ""420jpeg"" ) ) || ( <S2SV_ModEnd> strcmp ( _y4m <S2SV_ModStart>, ""420jpeg"" ) ) || ( <S2SV_ModEnd> strcmp ( _y4m <S2SV_ModStart>, ""420jpeg"" ) ) || ( <S2SV_ModEnd> strcmp ( _y4m <S2SV_ModStart>, ""420jpeg"" ) ) ) || ( <S2SV_ModEnd> strcmp ( _y4m <S2SV_ModStart>, ""420jpeg"" ) ) ) || ( <S2SV_ModEnd> strcmp ( _y4m <S2SV_ModStart>, ""420jpeg"" ) ) || ( <S2SV_ModEnd> strcmp ( _y4m <S2SV_ModStart>, ""420jpeg"" ) ) ) || ( <S2SV_ModEnd> strcmp ( _y4m <S2SV_ModStart>, ""420jpeg"" ) ) ) { _y4m -> vpx_fmt = VPX_IMG_FMT_I420 ; _y4m -> vpx_fmt = VPX_IMG_FMT_I420 ; _y4m -> vpx_bps = 12 ; <S2SV_ModEnd> } if (",0
583,"<S2SV_ModStart> * otmp = readobjnam_safe <S2SV_ModEnd> ( buf,",0
584,"<S2SV_ModStart> directory_table_end, table_start ; int count = 0 <S2SV_ModStart> == 0 ) { count ++ ; count ++ ; } <S2SV_ModEnd> if ( read_xattrs_from_disk <S2SV_ModStart> == FALSE ) { count ++ ; } <S2SV_ModEnd> if ( parse_exports_table <S2SV_ModStart> == FALSE ) { count ++ ; } <S2SV_ModEnd> if ( read_fragment_table <S2SV_ModStart> == FALSE ) { count ++ ; } <S2SV_ModEnd> if ( read_inode_table <S2SV_ModStart> == FALSE ) { count ++ ; } <S2SV_ModEnd> if ( read_directory_table <S2SV_ModStart> return TRUE ; count ++ ; }",0
585,"<S2SV_ModStart> rule * rule, struct env * * env <S2SV_ModStart> count = 0 ; env -> count = env -> count = 0 <S2SV_ModStart> ; } } env -> count ++ ;",0
586,"<S2SV_ModStart> -> seg ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ; } } memset ( cpi -> segmentation_map, 0, cm -> mi_cols * cm -> mi_cols ) ; memset ( cpi -> complexity_map, 0, cm -> mi_cols * cm -> mi_cols ) ; memset ( cpi -> complexity_map, 0, cm -> mi_cols * cm -> mi_cols ) ; memset ( cpi -> complexity_map, 0, cm -> mi_cols * cm -> mi_cols ) ; vp9_enable_segmentation ( seg ) ; vp9_enable_segfeature ( seg ) ; vp9_enable_segfeature ( seg, segment, SEG_LVL_ALT_Q ) ; vp9_set_segdata ( seg, segment, SEG_LVL_ALT_Q, qindex_delta ) ; }",0
587,"<S2SV_ModStart> return 0 ; module_type = make_type ( ""Module"", mod_type, Module_fields, 1 ) ; if (! module_type ) return 0 ; <S2SV_ModStart> return 0 ; if (! module_type ) return 0 ; <S2SV_ModStart>, mod_type, Interactive_fields, 1 ) ; if (! Interactive_type ) return 0 ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; <S2SV_ModStart>, mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; if (! Expression_type ) return 0 ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; <S2SV_ModStart>, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; if (! Expression_type ) return 0 ; if (! Expression_type ) return 0 ; if (! Expression_type ) return 0 ; if (! Expression_type ) return 0 ; <S2SV_ModStart>, stmt_type, 1 ) ; if (! Function_type ) return 0 ; if",0
588,"<S2SV_ModStart>, S_IRUSR | S_IWUSR | S_IWUSR | S_IWUSR | S_IWGRP | S_IWUSR <S2SV_ModEnd> ) ; if <S2SV_ModStart>, ""btsnoop\\0\\0\\1\\0\\0\\x3\\xea"", ( int )",0
589,<S2SV_ModStart> ) ; } if ( xd -> cur_uv_mode == MODE_HIGHBIT ) { int max_uv_mode = xd -> cur_uv_mode ; int max_uv_mode = xd -> cur_uv_mode ; int max_uv_mode = xd -> cur_uv_mode ; int max_uv_mode = xd -> cur_uv_mode ; int max_uv_mode = xd -> cur_uv_mode ; int max_uv_mode = xd -> cur_uv_mode ; int max_uv_mode = xd -> cur_uv_mode ; int max_uv_mode = xd -> cur_uv_mode ; int max_uv_mode = xd -> cur_uv_mode ; int max_uv_mode = xd -> cur_uv_mode ; int max_uv_mode = xd -> cur_uv_mode ; int max_uv_mode = xd -> cur_uv_mode ; int max_uv_mode = xd -> cur_uv_mode ; int max_uv_mode = xd -> cur_uv_mode ; int max_uv_mode = xd -> cur_uv_mode ; int max_uv_mode = xd ->,0
590,"<S2SV_ModStart> cinput ) { long <S2SV_ModEnd> num, i <S2SV_ModStart>, * StartClean <S2SV_ModEnd> ; SET ( <S2SV_ModStart> t ++ ; char * s = cinput ; long * StartClean ; long * argbuf ; long * argbuf ; long * argbuf ; long * argbuf ; long * argbuf ; long * argbuf ; long * argbuf ; long * argbuf ; long * argbuf ; long * argbuf ; long * argbuf ; long * argbuf ; long * argbuf ; long * argbuf ; long * argbuf ; long * argbuf ; long * argbuf ; long * argbuf ; long * argbuf ; long * argbuf ; long * argbuf ; long * argbuf ; long * argbuf ; long * argbuf ; long * argbuf ; long * argbuf ; long * argbuf ; long * argbuf ; long * argbuf ; long * argbuf ; long * argbuf ; long * argbuf ; long * argbuf ; long * argbuf ; long * argbuf ; long * argbuf ; long * argbuf ; long * argbuf ; long * argbuf ; long * argbuf ; long * argbuf ; long * argbuf ; long * argbuf ; long * argbuf",0
591,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lower, & tmp ) < 0 ) goto failed ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else <S2SV_ModEnd> { int res <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( exists_not_none <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( exists_not_none <S2SV_ModStart> ) ; } * out = Slice ( lower, upper, upper, step, arena ) ; if ( * out == NULL ) goto failed ; return 0 ; } else <S2SV_ModEnd> { int res <S2SV_ModStart> ) ; } * out = Slice ( lower, upper, upper, step, arena ) ; if ( * out == NULL ) goto failed ; return 0 ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> * out = <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
592,"<S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",0
593,"<S2SV_ModStart> int err ; struct nfp_dscp_map * dscp_map = kzalloc ( sizeof ( * dscp_map ), GFP_KERNEL ) ; if (! dscp_map ) return - ENOMEM ; <S2SV_ModStart> goto err_delete ; dscp_map = kzalloc ( sizeof ( * dscp_map ), GFP_KERNEL ) ; if (! dscp_map ) return - ENOMEM ; <S2SV_ModStart>! match ) { dscp_map = kzalloc ( sizeof ( * dscp_map ), GFP_KERNEL ) ; if (! dscp_map ) return - ENOMEM ; <S2SV_ModStart> - ENOMEM ; } <S2SV_ModStart> list, & dscp_map ) ; } match -> handle = knode -> handle ; match -> band = knode -> res -> classid ; match -> mask = mask ; match -> val = val ; err = nfp_abm_update_band_map ( alink ) ; if ( err ) goto err_delete ; return 0 ; err_delete : nfp_abm_u32_knode_delete ( alink, knode ) ; return <S2SV_ModEnd> - EOPNOTSUPP ;",0
594,<S2SV_ModStart> ) ; } # if CONFIG_VPX_HIGHBITDEPTH stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; # else <S2SV_ModStart> stats ) ; # endif,0
595,"<S2SV_ModStart> = g_strconcat ( ""application-escape <S2SV_blank> \'%s\' <S2SV_blank> \'%s\' <S2SV_blank> \'%s\' <S2SV_blank> \'%s\' <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, app, <S2SV_ModStart> = g_strconcat ( ""application-escape <S2SV_blank> \'%s\' <S2SV_blank> \'%s\' <S2SV_blank> \'%s\' <S2SV_blank> \'%s\' <S2SV_blank> \'%s\' <S2SV_blank> \'%s"" <S2SV_ModEnd>, app,",0
596,"<S2SV_ModStart> data_end ) { VP9_COMMON * const cm = & pbi -> common ; const int aligned_cols = mi_cols_aligned_to_sb ( cm -> mi_cols ) ; const int tile_rows = mi_cols_aligned_to_sb ( cm -> mi_cols ) ; const int tile_cols = mi_cols_aligned_to_sb ( cm -> mi_cols ) ; const int tile_cols = 1 << cm -> log2_tile_cols ; <S2SV_ModStart>, tile_col ; vpx_reader r ; assert ( tile_rows <= 4 ) ; assert ( tile_cols <= ( 1 << 6 ) ) ; assert ( tile_cols <= ( 1 << 6 ) ) ; assert ( tile_cols <= ( 1 << 6 ) ) ; assert ( tile_cols <= ( 1 << 6 ) ) ; assert ( tile_cols <= ( 1 << 6 ) ) ; assert ( tile_cols <= ( 1 << 6 ) ) ; assert ( tile_cols <= ( 1 << 6 ) ) ; assert ( tile_cols <= ( 1 << 6 ) ) ; memset ( cm -> above_context, 0, sizeof ( * cm -> above_seg_context ) * aligned_",0
597,<S2SV_ModStart> vp9_decoder_create ( const VP9EncoderConfig <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> ) ) ; if ( oxcf -> ref_frame_map == 0 ) { vpx_free ( cm ) ; cm = NULL ; } else { <S2SV_ModStart> = 1 ; vpx_free ( cm ) ; cm = NULL ; } <S2SV_ModStart> ) ) ; vpx_init_dequantizer <S2SV_ModEnd> ( cm ) <S2SV_ModStart> cm ) ; cm -> error. setjmp = 0 ;,0
598,<S2SV_ModStart> ) ) ; if (! ( ( GF_DataInformationBox * ) s ) -> dref ) { <S2SV_ModStart> ) ; } },0
599,<S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> || opt -> opt. <S2SV_ModStart> || opt -> opt.,0
600,"<S2SV_ModStart> tree2tok ( struct vpx_token <S2SV_ModEnd> * tokens, <S2SV_ModStart> tokens, const vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> do { const vpx_tree_index <S2SV_ModEnd> j = tree",0
601,"<S2SV_ModStart> = VPX_CODEC_OK ; int ref_flags = 0 ; <S2SV_ModStart> ctx, img ) ; ref_flags &= ~ VP9_LAST_FLAG ; if ( flags & VP9_EFLAG_NO_REF_LAST ) ref_flags |= VP9_LAST_FLAG ; if ( flags & VP9_EFLAG_FORCE_ARF ) ref_flags |= VP9_LAST_FLAG ; if ( flags & VP9_EFLAG_FORCE_ARF ) ref_flags |= VP9_LAST_FLAG ; if ( flags & VP9_EFLAG_FORCE_ARF ) ref_flags |= VP9_ALT_FLAG ; if ( flags & VP9_EFLAG_FORCE_ARF ) ref_flags |= VP9_ALT_FLAG ; if ( flags & VP9_EFLAG_FORCE_ARF ) ref_flags |= VP9_ALT_FLAG ; if ( flags & VP9_EFLAG_FORCE_ARF ) ref_flags |= VP9_ALT_FLAG ; if ( flags & VP9_EFLAG_FORCE_ARF ) ref_flags |= VP9_ALT_FLAG ; if ( flags & VP9_EFLAG_FORCE",0
602,"<S2SV_ModStart> { ret = get_tag_or_zero <S2SV_ModEnd> ( asn1,",0
603,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) ; } const __m128i s [ 16 ] = { 0 } ; const __m128i s [ 16 ] = { 0 } ; const __m128i s [ 16 ] = { 0 } ; const __m128i s [ 16 ] = { 0 } ; const __m128i s [ 16 ] = { 0 } ; <S2SV_ModStart> - 1 ; s [ 16 ] = { 0 } ; s [ 16 ] = { 0 } ; s [ 16 ] = { 0 } ; s [ 16 ] = { 0 } ; s [ 16 ] = { 0 } ; s [ 16 ] = { 0 } ; s [ 16 ] = { 0 } ; s [ 16 ] = { 0 } ; s [ 16 ] = { 0 } ; s [ 16 ] = { 0 } ; s [ 16 ] = { 0 } ; s [ 16 ] = { 0 } ; s [ 16 ] = { 0 } ; s [ 16 ] = { 0 } ; s [ 16 ] = { 0 } ; s [ 16 ] = 0 ; s [ 16 ] = 0 ; s [ 16 ],0
604,"<S2SV_ModStart> int frame_max_bits ( VP9EncoderConfig <S2SV_ModEnd> * rc, <S2SV_ModStart> ) rc -> av_per_frame_bandwidth * <S2SV_ModEnd> ( int64_t )",0
605,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
606,"<S2SV_ModStart> * cpi, MACROBLOCK * const x, MACROBLOCK * const x, MACROBLOCK * const xd, MACROBLOCK * const xd, MACROBLOCK * const xd, MACROBLOCK * const xd, MACROBLOCK * const xd, MACROBLOCK * const xd, MACROBLOCK * const xd, MACROBLOCK * const xd, MACROBLOCKD * const xd, MACROBLOCKD * const xd, MACROBLOCKD * const xd, MACROBLOCKD * const xd, MACROBLOCKD * const xd, MACROBLOCKD * const xd, MACROBLOCKD * const xd, MACROBLOCKD * const xd, MACROBLOCKD * const xd, MACROBLOCKD * const xd, MACROBLOCKD * const xd, MACROBLOCKD * const xd, MACROBLOCKD * const xd, MACROBLOCKD * const xd, MACROBLOCKD * const xd, MACROBLOCKD * const xd, MACROBLOCKD * const xd, MACROBLOCKD * const xd, MACROBLOCKD * const xd, MACROBLOCKD * const xd, MACROBLOCKD * const xd, MACROBLOCKD * const xd, MACROBLOCKD",0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
608,"<S2SV_ModStart> range_max ) { uint64_t <S2SV_ModEnd> value ; int <S2SV_ModStart> gbc ) ; if ( i < zeroes ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> gbc ) ; if ( i < zeroes ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( zeroes >= 32 ) { value = MAX_UINT_BITS ( 32 ) ; } else { value = get_bits_long ( gbc, zeroes ) ; for ( j = 0 ; j < zeroes ; j ++ ) bits [ i ++ ] = ( value >> ( zeroes - j - 1 ) & 1 )? '1' : '0' ; value += ( 1 << zeroes ) - 1 ; } if ( value < 0 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank>",0
609,<S2SV_ModStart> else if ( c == '\\0' || <S2SV_ModStart> else if ( c == '\\0' || <S2SV_ModStart> else if ( c == '\\0' || <S2SV_ModStart> else if ( c == '\\0' || <S2SV_ModStart> else if ( c == '\\0' || <S2SV_ModStart> else if ( c == '\\0' || <S2SV_ModStart> else if ( c == '\\0' || <S2SV_ModStart> else if ( c == '\\0' || <S2SV_ModStart> else if ( c == '\\0' || <S2SV_ModStart> else if ( c == '\\0' || <S2SV_ModStart> else if ( c == '\\0' || <S2SV_ModStart> else if ( c == '\\0' || <S2SV_ModStart> else if ( c == '\\0' || <S2SV_ModStart> else if ( c == '\\0' || <S2SV_ModStart> else if ( c == '\\0' || <S2SV_ModStart> else if ( c == '\\0' || <S2SV_ModStart> else if ( c == '\\0' || <S2SV_ModStart> else if ( c == '\\0' || <S2SV_ModStart> else if ( c == '\\0' || <S2SV_ModStart> else if ( c == '\\0' || <S2SV_ModStart> else if ( c == '\\0' || <S2SV_ModStart> else if ( c == '\\0' || <S2SV_ModStart> else if ( c == '\\0' || <S2SV_ModStart> else if ( c == '\\0' || <S2SV_ModStart> else if ( c == '\\0' || <S2SV_ModStart> else if (,0
610,"<S2SV_ModStart>, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_cookie. len = 0, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_cookie. len = 0, packet -> http_cookie. ptr = NULL, packet ->",0
611,"<S2SV_ModStart>, y, Max <S2SV_ModEnd> ( 4, <S2SV_ModStart>, y, Max <S2SV_ModEnd> ( 4, <S2SV_ModStart> dds_info, 8, exception",0
612,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL ) <S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL )",1
613,<S2SV_ModStart> action ) { if ( w > h ) return ;,0
614,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; send ( outputbuffer ) ;",0
615,"<S2SV_ModStart> ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" ) ; if ( rdp -> autodetect -> bandwidthMeasureTimeDelta > 0 ) { WLog_VRB ( AUTODETECT_TAG, ""received <S2SV_blank> bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" ) ; return FALSE ; }",0
616,<S2SV_ModStart> # if ( <S2SV_ModEnd> CONFIG_ONTHEFLY_BITPACKING <S2SV_ModStart> # if ( <S2SV_ModEnd> CONFIG_ONTHEFLY_BITPACKING int16_t ) <S2SV_ModStart> # if ( <S2SV_ModEnd> CONFIG_ONTHEFLY_BITPACKING int16_t ) <S2SV_ModStart> # if ( <S2SV_ModEnd> CONFIG_ONTHEFLY_BITPACKING int16_t ) <S2SV_ModStart> # if ( <S2SV_ModEnd> CONFIG_ONTHEFLY_BITPACKING int16_t ) <S2SV_ModStart> # if ( <S2SV_ModEnd> CONFIG_ONTHEFLY_BITPACKING int16_t ) <S2SV_ModStart> # if ( <S2SV_ModEnd> CONFIG_ONTHEFLY_BITPACKING int16_t ) <S2SV_ModStart> # if ( <S2SV_ModEnd> CONFIG_ONTHEFLY_BITPACKING int16_t ) <S2SV_ModStart> # if ( <S2SV_ModEnd> CONFIG_ONTHEFLY_BITPACKING int16_t ) <S2SV_ModStart> # if ( <S2SV_ModEnd> CONFIG_ONTHEFLY_BITPACKING int16_t ) <S2SV_ModStart> # if ( <S2SV_ModEnd> CONFIG_ONTHEFLY_BITPACKING int16_t ; <S2SV_ModStart> # if ( <S2SV_ModEnd> CONFIG_ONTHEFLY_BITPACKING int16_t ; # <S2SV_ModStart> # if ( <S2SV_ModEnd> CONFIG_ONTHEFLY_BITPACKING int16_,0
617,<S2SV_ModStart> # if CONFIG_MULTITHREAD <S2SV_ModEnd> vp8_decoder_remove_threads ( pbi,1
618,<S2SV_ModStart> { if ( ( xWantedSize & xWantedSize ) == 0 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } if (,0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,"<S2SV_ModStart> s ) { int num_updates ; int <S2SV_ModEnd> left, top <S2SV_ModStart> int i ; int num_updates ; int num_updates ; int num_updates ; int num_updates ; int num_updates ; int num_updates ; int num_updates ; <S2SV_ModStart>, __func__ ) ; num_updates = 0 <S2SV_ModStart> ++ ) { if ( num_updates > INT_MAX / sizeof ( uint8 ) ) { num_updates = INT_MAX / sizeof ( uint8 ) ; } else { <S2SV_ModStart> ) ; } }",0
621,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
622,"<S2SV_ModStart> TX_SIZE tx_size, vpx_coeff_probs_model <S2SV_ModEnd> * coef_branch_ct ) <S2SV_ModStart> coef_branch_ct ) { vpx_coeff_probs_model <S2SV_ModEnd> * coef_probs = <S2SV_ModStart> tx_size ] ; vpx_coeff_count_model <S2SV_ModEnd> * coef_counts =",0
623,"<S2SV_ModStart> { } ; if (! utf8 ) return log_warning_errno ( errno, ""Failed <S2SV_blank> to <S2SV_blank> toggle_utf8 <S2SV_blank> command <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; <S2SV_ModStart> name ) ; <S2SV_ModEnd> r = ioctl",0
624,"<S2SV_ModStart> struct dvb_usb_adapter * d ) { struct dvb_usb_adapter * d = d -> data ; <S2SV_ModEnd> u8 obuf [ <S2SV_ModStart> 0 } ; if ( d -> data <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; d -> data <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> 1 ] = 0x02 ; d -> data <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; d -> data <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> 1 ] = 0x83 ; d -> data <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> 2 ] = 0x83 ; d -> data <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; d -> data <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> 1 ] = 0x83 ; d -> data <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> 2 ] = 0x83 ; d -> data <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; d -> data <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; d -> data <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> 1 ] = 0x83 ; d -> data <S2SV_ModEnd> [ 2 ] <S2SV_ModStart> 2 ] = 0x83 ; d -> data",0
625,"<S2SV_ModStart> * cfg, vpx_codec_enc_cfg_t * cfg, <S2SV_ModStart> if ( ctx && cfg -> use_xma ) { if ( cfg -> use_psnr ) { if ( cfg -> use_psnr ) res = VPX_CODEC_INCAPABLE ; else if ( cfg -> use_psnr ) res = VPX_CODEC_INCAPABLE ; else if ( cfg -> use_psNR ) res = VPX_CODEC_INCAPABLE ; else if ( cfg -> use_psNR ) res = VPX_CODEC_INCAPABLE ; else if ( cfg -> use_psNR ) res = VPX_CODEC_INCAPABLE ; else if ( cfg -> use_psNR ) res = VPX_CODEC_INCAPABLE ; else if ( cfg -> use_output_partition ) { if ( cfg -> use_flags & VPX_CODEC_CAP_OUTPUT_PARTITION ) res = VPX_CODEC_INCAPABLE ; else if ( cfg -> use_flags & VPX_CODEC_CAP_OUTPUT_PARTITION ) res = VPX_CODEC_INCAPABLE ; else if ( cfg -> use_flags & VPX_CODEC_CAP_OUTPUT",0
626,"<S2SV_ModStart> stride, int mv_row, int mv_col, const MV mv_row, int mv_col, const MV mv_row, int mv_col, const MV mv_row, const MV mv_col, const MV mv_row * const mv_col, const InterpKernel * const <S2SV_ModEnd> const kernel = <S2SV_ModStart> const kernel = vpx_get_interp_kernel <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ; if ( mv_stride == MV_PRECISION_Q3 ) mv_stride = ( stride + 1 ) >> 1 ; else mv_stride = ( stride + 1 ) >> 1 ; mv_precision_uv = MV_PRECISION_Q3 ; else mv_stride = ( stride + 1 ) >> 1 ; mv_precision_uv = MV_PRECISION_Q3 ; else mv_stride = ( stride + 1 ) >> 1 ; mv_precision_uv = MV_PRECISION_Q3 ; } vp9_build_inter_predictor ( u_mb_ptr, uv_stride, & pred [ 512 ], uv_stride, & mv, scale, uv_block_size, uv_block_size, <S2SV_ModEnd> which_mv, kernel <S2SV_ModStart>, uv_stride, <S2SV_ModEnd> mv, scale <S2SV_ModStart>, uv",0
627,"<S2SV_ModStart> = TRUE ; if ( len < 4 ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } <S2SV_ModStart> origbuf ) ) ; len = 4 * BUFSZ <S2SV_ModStart> * BUFSZ ; len = 4 * BUFSZ ; <S2SV_ModStart> * BUFSZ ; len = 4 * BUFSZ ; len = 4 * BUFSZ ; len = 4 * BUFSZ ; len = 4 * BUFSZ ; len = 4 * BUFSZ ; len = 4 * BUFSZ ; len = 4 * BUFSZ ; len = 4 * BUFSZ ; len = 4 * BUFSZ ; len = 4 * BUFSZ ; len = 4 * BUFSZ ; len = 4 * BUFSZ ; len = 4 * BUFSZ ; len = 4 * BUFSZ ; len = 4 * BUFSZ ; len = 4 * BUFSZ ; len = 4 * BUFSZ ; len = 4 * BUFSZ ; len = 4 * BUFSZ ; len = 4 * BUFSZ ; len = 4 * BUFSZ ; len = 4 * BUFSZ ; len = 4 * BUFSZ",0
628,"<S2SV_ModStart> * cJSON_CreateFloatArray ( const <S2SV_ModStart> = 0 ; i < count && <S2SV_ModStart> i ) { if ( i >= count ) { cJSON_SetNumber ( numbers [ i ], count ) ; }",0
629,"<S2SV_ModStart> data_end ) { const <S2SV_ModStart> & ~ 1 ; const int num_threads = <S2SV_ModEnd> pbi -> oxcf <S2SV_ModStart> & ~ 1 ; const int num_threads = <S2SV_ModEnd> pbi -> oxcf <S2SV_ModStart> -> oxcf. num_threads * sizeof ( TileBuffer ) ; const int num_threads = pbi -> oxcf. max_threads * sizeof ( TileBufferData ) ; const int num_threads = pbi -> oxcf. num_threads * sizeof ( TileInfo ) ; const int num_threads = pbi -> oxcf. num_threads * sizeof ( TileInfo ) ; const int num_threads = pbi -> oxcf. num_threads * sizeof ( TileInfo ) ; assert ( num_threads > num_threads * sizeof ( TileInfo ) ) ; for ( i = 0 ; i < num_threads ; ++ i ) { VPxWorker * const worker = & pbi -> tile_workers [ i ] ; ++ pbi -> num_tile_workers ; vpx_worker_init ( worker ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_malloc ( sizeof ( TileInfo ) ) ) ; if ( i < num_threads - 1 &&! vp9_worker_",0
630,<S2SV_ModStart> * 0x101 ; # ifdef LIBRAW_LIBRARY_BUILD imgdata. makernotes. sony. prd_ImageHeight = get2 ( ) ; imgdata. makernotes. sony. prd_ImageWidth = ( ushort ) fgetc ( ifp ) ; # endif <S2SV_ModStart> ( ) ; # ifdef LIBRAW_LIBRARY_BUILD imgdata. makernotes. sony. prd_ImageWidth = ( ushort ) fgetc ( ifp ) ; imgdata. makernotes. sony. prd_ImageWidth = ( ushort ) fgetc ( ifp ) ; # endif <S2SV_ModStart> case 0x524946 : # ifdef LIBRAW_LIBRARY_BUILD case 0x52446 : <S2SV_ModStart> case 0x52446 : # endif,0
631,"<S2SV_ModStart> cm -> seg ; const int qindex_delta = cm -> rc. num_qindex ; const int qindex_delta = cm -> rc. num_qindex <S2SV_ModStart> = SEGMENT_DELTADATA ; <S2SV_ModEnd> for ( i <S2SV_ModStart> ++ ) { <S2SV_ModEnd> if ( Q_RATIO <S2SV_ModStart> continue ; } vp9_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q ) ; vp9_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q ) ; vp9_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q ) ; vp9_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q ) ; vp9_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q ) ; segment_rdmult = vp9_compute_rd_mult ( cpi, cm -> base_qindex + qindex_delta + cm -> y_dc_delta_q ) ; <S2SV_ModStart> i ), SEG_LVL_ALT_Q <S2SV_ModEnd> ) ; vp9_enable_segfeature <S2SV_ModStart>",0
632,<S2SV_ModStart> -> error_code ) { if ( ctx -> base. error_code ) { <S2SV_ModStart> NULL ; } } else { ctx -> base. err_detail = NULL ; } },0
633,"<S2SV_ModStart>, * ps_cur_poc ; ih264d_free_dynamic_bufs ( ps_dec ) <S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
634,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModEnd> ret ) { <S2SV_ModStart> ret ) { TEMP_FAILURE_RETRY ( <S2SV_ModEnd> ret ) ; <S2SV_ModStart> ret ) { TEMP_FAILURE_RETRY ( <S2SV_ModEnd> ret ) ; <S2SV_ModStart> ret ) { TEMP_FAILURE_RETRY ( <S2SV_ModEnd> ret ) ; <S2SV_ModStart> ret ) { TEMP_FAILURE_RETRY ( <S2SV_ModEnd> ret ) ; <S2SV_ModStart> ret ) { TEMP_FAILURE_RETRY ( <S2SV_ModEnd> ret ) ; <S2SV_ModStart> ret ) { TEMP_FAILURE_RETRY ( <S2SV_ModEnd> ret ) ; <S2SV_ModStart> ret ) { TEMP_FAILURE_RETRY ( <S2SV_ModEnd> ret ) ; <S2SV_ModStart> ret ) { TEMP_FAILURE_RETRY ( <S2SV_ModEnd> ret ) ; <S2SV_ModStart> ret ) { TEMP_FAILURE_RETRY ( <S2SV_ModEnd> ret ) ; <S2SV_ModStart> ret ) { TEMP_FAILURE_RETRY ( <S2SV_ModEnd> ret ) ; <S2SV_ModStart> ret ) { TEMP_FAILURE_RETRY ( <S2SV_ModEnd> ret ) ; <S2SV_ModStart> ret ) { TEMP_FAILURE_RETRY ( <S2SV_ModEnd> ret ) ; <S2SV_ModStart> ret ) { TEMP_FAILURE_RETRY ( <S2SV_ModEnd> ret ) ; <S2SV_ModStart> ret ) { TEMP_FAILURE_RETRY ( <S2SV_ModEnd> ret ) ; <S2SV_ModStart> ret ) ; TEMP_FAILURE_RETRY ( <S2SV_ModEnd> ret ) ; <S2SV_ModStart> ret ) ; TEMP_FAILURE_,0
635,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int64_t <S2SV_ModEnd> getnum ( const <S2SV_ModStart> df ) { int64_t num ; <S2SV_ModStart> = 0 ; num = a * 10 + * ( * fmt ) ; while ( num > 0 ) { num -- ; } <S2SV_ModStart> '0' ; } return num <S2SV_ModEnd> ; } <S2SV_null>,0
636,<S2SV_ModStart> CSpropagate ) ; gcstate -> gcstate = GCCSpropagate ; gcstate -> gcstate = GCCSpropagate ; gcstate -> gcstate = GCCSpropagate ; gcstate -> gcstate = GCCSpropagate ; gcstate -> gcstate = GCCSpropagate ; gcstate -> gcstate = GCCSpropagate ; gcstate -> gcstate = GCCSpropagate ; gcstate -> gcstate = GCCSpropagate ; gcstate -> gcstate = GCCSpropagate ; gcstate -> gcstate = GCCSpropagate ; gcstate -> gcstate = GCCSpropagate ; gcstate -> gcstate = GCCSpropagate ; gcstate -> gcstate = GCCSpropagate ; gcstate -> gcstate = GCCSpropagate ; gcstate -> gcstate = GCCSpropagate ; gcstate -> gcstate = GCCSpropagate ; gcstate -> gcstate = GCCSpropagate ; gcstate -> gcstate = GCCSpropagate ; gcstate -> gcstate = GCCSpropagate ; gcstate -> gcstate = GCCSpropagate ; gcstate -> gcstate = GCCSpropagate ; gcstate -> gcstate = GCCSpropagate ; gcstate -> gcstate = GCCSpropagate ; gcstate -> gcstate = GCCSpropagate ; gcstate -> gcstate = GCCSpropagate,0
637,<S2SV_ModStart> 0 ; else { kfree ( buf ) ; <S2SV_ModStart> - EIO ; },0
638,"<S2SV_ModStart> 'S' } ; const char * pgsql_server = ( const char * ) opt ; <S2SV_ModStart> return NULL ; if (! pgsql_server_ready ( c ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } <S2SV_ModStart> buffer ) ; s_read_socket <S2SV_ModEnd> ( c, <S2SV_ModStart> ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" <S2SV_ModEnd> ) ; throw_exception <S2SV_ModStart> ) ; } s_write_socket <S2SV_ModEnd> ( c,",0
639,"<S2SV_ModStart> * cib, const <S2SV_ModStart> struct sockaddr_in addr, struct sockaddr_in * remote_connection_s <S2SV_ModStart> = 0 ; const <S2SV_ModStart> * server = remote_connection_s <S2SV_ModEnd> ; int ret_ga <S2SV_ModStart> destroy = cib_remote_connection_destroy,. remote_connection_s = NULL <S2SV_ModStart> = NULL ; remote_connection_s = remote_connection_s ; <S2SV_ModStart> ( ""Looking <S2SV_blank> up <S2SV_blank> %s"", remote_connection_s <S2SV_ModEnd> ) ; ret_ga",0
640,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> ; cpi -> gf_overspend_bits <S2SV_ModEnd> = 0 ;",0
641,"<S2SV_ModStart> ( ndo, ""%s"", __func__ <S2SV_ModEnd> ) ) ;",0
642,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command",0
643,"<S2SV_ModStart> ; Image Image Image * image_data = NULL ; Image <S2SV_ModStart> length, padding, value, version, width ; image_data = DestroyImageData ( image ) ; if ( image_data == NULL ) return ( DestroyImageList ( image ) ) ; image = DestroyImageList ( image_info ) ; return ( ( Image * ) NULL ) <S2SV_ModEnd> ; } width <S2SV_ModStart> height ) ; image_data = DestroyImageData ( image ) ; if ( image_data == NULL ) return ( DestroyImageList ( image ) ) ;",0
644,"<S2SV_ModStart> jas_eprintf ( ""cannot <S2SV_blank> encode <S2SV_blank> ID <S2SV_blank> marker\\n"" ) ; jas_eprintf ( ""size <S2SV_blank> of <S2SV_blank> ID <S2SV_blank> band <S2SV_blank> info\\n"" ) ; jas_eprintf ( ""size <S2SV_blank> of <S2SV_blank> ID <S2SV_blank> band <S2SV_blank> info\\n"" ) ; jas_eprintf ( ""size <S2SV_blank> of <S2SV_blank> ID <S2SV_blank> band <S2SV_blank> info\\n"" ) ; jas_eprintf ( ""size <S2SV_blank> of <S2SV_blank> ID <S2SV_blank> band <S2SV_blank> info\\n"" ) ; jas_eprintf ( ""size <S2SV_blank> of <S2SV_blank> ID <S2SV_blank> band <S2SV_blank> info\\n"" ) ; jas_eprintf ( ""size <S2SV_blank> of <S2SV_blank> ID <S2SV_blank> band <S2SV_blank> info\\n"" ) ; jas_eprintf ( ""size <S2SV_blank> of <S2SV_blank> ID <S2SV_blank> band <S2SV_blank> info\\n"" ) ; jas_eprintf ( ""size <S2SV_blank> of <S2SV_blank> ID <S2SV_blank> band <S2SV_blank> info\\n"" ) ; jas_eprintf ( ""size <S2SV_blank> of <S2SV_blank> ID <S2SV_blank> band <S2SV_blank> info\\n"" ) ; jas_eprintf ( ""size <S2SV_blank> of <S2SV_blank> ID <S2SV_blank> band <S2SV_blank> info\\n"" ) ; jas_eprintf ( ""size <S2SV_blank> of <S2SV_blank> ID <S2SV_blank> band <S2SV_blank> info\\n"" ) ; jas_",0
645,<S2SV_ModStart> ] ) ; if (! channel -> modes ) { weechat_free ( channel -> modes ) ; return ; },0
646,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> - m + vpx_read_bit <S2SV_ModEnd> ( r )",1
647,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
648,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> ( REFERENCE_MODE ) vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> comp_inter_prob [ ctx",0
649,"<S2SV_ModStart> (! stream ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; if ( stream == NULL <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; <S2SV_ModEnd> memcpy ( stream <S2SV_ModStart> = vpx_codec_enc_config_default ( <S2SV_ModEnd> & stream -> <S2SV_ModStart> write_webm = 1 ; stream -> config. cfg. g_max_max_pts_ms = 0",0
650,<S2SV_ModStart> case ND_OPT_ROUTE_INFO : ND_TCHECK_BITS ( op -> nd_opt_len ) ; <S2SV_ModStart> case ND_OPT_ROUTE_INFO : ND_TCHECK_BITS ( op -> nd_opt_len ) ; <S2SV_ModStart> case ND_OPT_ROUTE_INFO : ND_TCHECK_BITS ( op -> nd_opt_len ) ; <S2SV_ModStart> case ND_OPT_ROUTE_INFO : ND_TCHECK_BITS ( op -> nd_opt_len ) ; <S2SV_ModStart> case ND_OPT_ROUTE_INFO : ND_TCHECK_BITS ( op -> nd_opt_len ) ; <S2SV_ModStart> case ND_OPT_ROUTE_INFO : ND_TCHECK_BITS ( op -> nd_opt_len ) ;,0
651,<S2SV_ModStart> -> root_node = yr_re_root_node_create ( ) <S2SV_ModEnd> ; return ERROR_SUCCESS,0
652,"<S2SV_ModStart> ; ret = var_expand_key <S2SV_ModEnd> ( path, <S2SV_ModStart> if ( ret < <S2SV_ModEnd> 0 ) { <S2SV_ModStart>, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return ret <S2SV_ModEnd> ; } ret",0
653,<S2SV_ModStart> ; tok -> lineno = 0 ; tok ->,0
654,<S2SV_ModStart> ( av1 -> av1_config_count <S2SV_ModEnd> ) { GF_AV1Config,0
655,<S2SV_ModStart> dpbSize ) ; if ( picSizeInMbs > UINT32_MAX / 384 ) { return ( MEMORY_ALLOCATION_ERROR ) ; },0
656,"<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_in = 0 ; <S2SV_ModStart> (! sock ||! addr ||! addrlen <S2SV_ModStart> OE_EINVAL ) ; addrlen_in = * addrlen ; <S2SV_ModStart> if ( addrlen && addrlen_in > OE_SSIZE_MAX ) addrlen_in = * addrlen ; else <S2SV_ModEnd> addrlen_in = * <S2SV_ModStart> * addrlen ; ret = <S2SV_ModEnd> oe_syscall_getpeername_ocall ( & <S2SV_ModStart>, addrlen_in, & addrlen_in ) ; if ( ret <S2SV_ModEnd>!= OE_OK ) <S2SV_ModStart> ) ; } if ( addrlen_in ) addrlen_in = * addrlen ;",0
657,,1
658,"<S2SV_ModStart> FALSE ; } if (! <S2SV_ModStart>, s ) ) return FALSE",1
659,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; struct ip6_flowlabel <S2SV_ModStart> flowlabel ) ; <S2SV_ModEnd> return err ;,0
660,<S2SV_ModStart> fsize ; uint32_t <S2SV_ModEnd> j ; struct <S2SV_ModStart> size_t fsize ; int <S2SV_ModEnd> j ; struct <S2SV_ModStart> size_t falign ; int <S2SV_ModEnd> j ; struct <S2SV_ModStart> size_t falign ; int <S2SV_ModEnd> j ; struct <S2SV_ModStart> size_t falign ; int <S2SV_ModEnd> j ; struct <S2SV_ModStart> size_t falign ; int <S2SV_ModEnd> j ; struct <S2SV_ModStart> size_t falign ; int <S2SV_ModEnd> j ; struct <S2SV_ModStart> size_t falign ; int <S2SV_ModEnd> j ; struct <S2SV_ModStart> size_t falign ; int <S2SV_ModEnd> j ; struct <S2SV_ModStart> size_t falign ; int <S2SV_ModEnd> j ; struct <S2SV_ModStart> size_t falign ; int <S2SV_ModEnd> j ; struct <S2SV_ModStart> size_t falign ; int <S2SV_ModEnd> j ; struct <S2SV_ModStart> size_t falign ; int <S2SV_ModEnd> j ; struct <S2SV_ModStart> size_t falign ; int <S2SV_ModEnd> j ; struct <S2SV_ModStart> size_t falign ; int <S2SV_ModEnd> j ; struct <S2SV_ModStart> size_t falign ; int <S2SV_ModEnd> j ; struct <S2SV_ModStart> size_t falign ; int <S2SV_ModEnd> j ; struct <S2SV_ModStart> size_t falign ; int <S2SV_ModEnd> j ; struct <S2SV_ModStart> size_t falign ; int <S2SV_ModEnd> j ; struct <S2SV_ModStart> size_t falign ; int <S2SV_ModEnd> j ; struct <S2SV_ModStart> size_t falign ; int <S2SV_ModEnd> j ; struct <S2SV_ModStart> size_,0
661,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; usleep <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPDRH <S2SV_ModEnd> ) << 8 <S2SV_ModStart> | dm9000ReadReg ( DM9000_EPDRL <S2SV_ModEnd> ) ; }",1
662,"<S2SV_ModStart> { rc = cib_tls_signon_tls <S2SV_ModEnd> ( cib, <S2SV_ModStart> -> command ), cib -> callback. token, cib -> callback. token, NULL, 0, NULL ) ; } if ( rc == pcmk_ok ) { rc = <S2SV_ModStart> ) ) ; }",0
663,"<S2SV_ModStart> = ubuf ; memset ( & msg, 0, sizeof ( msg ) ) ;",0
664,"<S2SV_ModStart> 3 } ; MV ref_mv_full_idx = 0 ; <S2SV_ModStart> ] ; int step_param = 3 ; int <S2SV_ModStart> bsize ) ; if ( sr > MAX_FULL_PEL_VAL ) { tmp_err = cpi -> diamond_search_sad ( x, & ref_mv_full, & tmp_mv, step_param, x -> sadperbit16, & num00, & v_fn_ptr, x -> nmvjointcost, ref_mv ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err += tmp_err ; } else { tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err += tmp_err ; } if ( tmp_err < INT_MAX ) tmp_err += tmp_err ; if (",0
665,<S2SV_ModStart> ; if ( h -> fd >= 0 ) { if ( <S2SV_ModStart> goto error ; },0
666,<S2SV_ModStart> ; merged -> uri_cache = ( child -> uri_cache == NOT_SET? parent -> uri_cache : child -> uri_cache ) ; merged ->,0
667,"<S2SV_ModStart>, one, offset ; size_t <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart> ""ImproperImageHeader"" ) ; if ( number_pixels == 0 ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
668,"<S2SV_ModStart>, comp -> name <S2SV_ModEnd> ) )!=",0
669,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
670,"<S2SV_ModStart> client = user_data ; crm_trace ( ""Cleaning <S2SV_blank> up <S2SV_blank> after <S2SV_blank> client <S2SV_blank> disconnect: <S2SV_blank> %s/%s"", crm_str ( client -> name ), client -> id ) <S2SV_ModStart> num_clients ) ; <S2SV_ModEnd> crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client""",0
671,<S2SV_ModStart> * uv ; thread -> twups = thread ; <S2SV_ModStart> thread -> twups <S2SV_ModEnd> ; for ( <S2SV_ModStart> next ) { <S2SV_ModEnd> if (!,0
