,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; goto out <S2SV_ModEnd> ; } mutex_unlock,0
1,<S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;,0
2,<S2SV_ModStart> writer = ( TrackWriter <S2SV_ModEnd> * ) gf_list_get,0
3,<S2SV_ModStart> -> child ; if ( item > 0 ) { <S2SV_ModStart> -> next ; },0
4,"<S2SV_ModStart> u64 nr, <S2SV_ModEnd> struct pt_regs * <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",1
5,<S2SV_ModStart> EXT4_EXTENTS_FLAG ) { <S2SV_ModEnd> char * buf <S2SV_ModStart> ( data ) ; <S2SV_ModEnd> struct grub_ext4_extent_header *,0
6,"<S2SV_ModStart> fdct16 ( const tran_low_t <S2SV_ModEnd> in [ 16 <S2SV_ModStart> ] ) { tran_low_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> 8 ] ; tran_low_t <S2SV_ModEnd> step3 [ 8 <S2SV_ModStart> 8 ] ; tran_low_t <S2SV_ModEnd> input [ 8 <S2SV_ModStart> ] ; { tran_low_t <S2SV_ModEnd> s0, s1 <S2SV_ModStart> ] ; } tran_low_t <S2SV_ModEnd> s0, s1 <S2SV_ModStart> ] ; } tran_low_t <S2SV_ModEnd> s0, s1 <S2SV_ModStart> ] ; } tran_low_t <S2SV_ModEnd> x0, x1",0
7,<S2SV_ModStart> ( ) == 0x48454250 <S2SV_ModEnd> ) { # <S2SV_ModStart> # ifdef LIBRAW_LIBRARY_BUILD <S2SV_ModEnd> imgdata. lens,0
8,,0
9,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
10,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ++ i ) vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( usehp ) vpx_write <S2SV_ModEnd> ( w,",1
11,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; },0
12,"<S2SV_ModStart> ) dat ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ""Direction-#%u"", * <S2SV_ModEnd> ( ( const <S2SV_ModStart> ) ptr ++ <S2SV_ModEnd> ) ) ) <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( ptr ) ;",0
13,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void construct_get_dest_keyring ( <S2SV_ModStart> * authkey ; <S2SV_ModEnd> if ( dest_keyring <S2SV_ModStart> dest_keyring ) ; <S2SV_ModEnd> switch ( cred <S2SV_ModStart> ( dest_keyring ) { break ; } <S2SV_ModEnd> } case KEY_REQKEY_DEFL_THREAD_KEYRING,0
14,<S2SV_ModStart> = NULL ; sc = NULL ;,0
15,<S2SV_ModStart> & t ) ; if (! tm ) return NULL,0
16,<S2SV_ModStart> length ) ; if ( length > AUTH_VECTOR_LEN ) { <S2SV_ModStart> ) ) ; },0
17,<S2SV_ModStart> (! e <S2SV_ModEnd> ) goto not_found,0
18,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",1
19,<S2SV_ModStart> = 0 ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> & timeout ) ),1
20,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> detect_transition_to_still ( struct <S2SV_ModStart> last_decay_rate ) { <S2SV_ModEnd> if ( frame_interval <S2SV_ModStart> ( frame_interval > MAX_GF_INTERVAL <S2SV_ModEnd> && loop_decay_rate >= <S2SV_ModStart> ) break ; <S2SV_ModEnd> reset_fpf_position ( twopass,0
21,<S2SV_ModStart> offset + size < <S2SV_ModEnd> i_size_read ( inode,0
22,<S2SV_ModStart> alg ) { <S2SV_ModEnd> if (!,0
23,<S2SV_ModStart> = GIT_PKT_NG ; <S2SV_ModEnd> if (! <S2SV_ModStart> line += 3 ; line += 3 <S2SV_ModStart> line = ptr <S2SV_ModEnd> ; if (,0
24,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
25,<S2SV_ModStart> ; } } if ( avio_feof ( pb ) ) return AVERROR_EOF ;,0
26,"<S2SV_ModStart> mntent, path, rootfs",1
27,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } io -> io_cleanup = mem_cleanup ;,1
28,<S2SV_ModStart> ( value + 0.5 <S2SV_ModEnd> ) ) ;,0
29,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return ret?,0
30,<S2SV_ModStart> vpx_codec_enc_cfg_map_t * map ; ( void ) cfg,0
31,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
32,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
33,<S2SV_ModStart> imp_sth ) ; imp_dbh -> is_null = 0 ;,0
34,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ECON1_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_ETXSTL, MSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_ETXSTH, MSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_ETXSTH, MSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_ETXSTH, MSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_ETXSTH, MSB ( ENC28J60_TX_BU",0
35,<S2SV_ModStart> ; value = ast2obj_string <S2SV_ModEnd> ( o ->,0
36,<S2SV_ModStart> if ( page <S2SV_ModEnd> ) { http_response_printf <S2SV_ModStart> if ( page <S2SV_ModEnd> ) { http_response_printf <S2SV_ModStart> if ( page <S2SV_ModEnd> ) { http_response_printf,0
37,"<S2SV_ModStart> int low_var_thresh, <S2SV_ModEnd> unsigned char * <S2SV_ModStart> -> pp_limits_buffer ; <S2SV_ModEnd> ( void ) <S2SV_ModStart> ) flag ; vpx_memset <S2SV_ModEnd> ( limits,",0
38,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; <S2SV_ModEnd> error = mb_cache_entry_insert <S2SV_ModStart> error ) { <S2SV_ModEnd> if ( error <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> } else { <S2SV_ModStart> hash ) ; <S2SV_ModEnd> } } <S2SV_null>",0
39,<S2SV_ModStart> ) ) ; * rlen = 0 ;,0
40,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp",0
41,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|truncated]"" <S2SV_ModEnd> ) ) ;",0
42,,0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode <S2SV_ModStart>, & new_mode, & acl ) ; if ( ret <S2SV_ModEnd> ) goto out",0
44,"<S2SV_ModStart> size_t size ; jas_safe_intfast32_add ( tlx, height, 0 ) ; <S2SV_ModStart> ) ||! jas_safe_intfast32_add <S2SV_ModEnd> ( tly, <S2SV_ModStart> ; if ( jas_safe_size_mul <S2SV_ModEnd> ( cmpt ->",0
45,<S2SV_ModStart> dp == datalen || dp == datalen,0
46,"<S2SV_ModStart> req, size_t <S2SV_ModEnd> acl_len ) { <S2SV_ModStart> acl_len ) { <S2SV_ModEnd> uint32_t attrlen, <S2SV_ModStart> int status ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> ; hdrlen = <S2SV_ModEnd> xdr -> p <S2SV_ModStart> iov -> iov_base <S2SV_ModEnd> ; recvd =",0
47,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
48,"<S2SV_ModStart> { owner = ssplit <S2SV_ModEnd> ( auth,",0
49,<S2SV_ModStart> ; # if CONFIG_MEM_MANAGER <S2SV_ModEnd> int number_aau ;,0
50,"<S2SV_ModStart> = SQUASHFS_LOOKUP_BLOCKS ( fd <S2SV_ModEnd>. inodes ) <S2SV_ModStart> = read_fs_bytes ( fd <S2SV_ModEnd>, sBlk.",0
51,<S2SV_ModStart> } else return apr_psprintf <S2SV_ModEnd> ( cmd ->,0
52,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> # if CONFIG_VP9_ENCODER <S2SV_ModStart> # endif } <S2SV_ModEnd> for ( argi <S2SV_ModStart> } if ( <S2SV_ModEnd> arg_match ( & <S2SV_ModStart> & use_ivf, argi ) ) <S2SV_ModEnd> { config ->",0
53,<S2SV_ModStart> } if (! c -> opt -> redirect_addr. names ) return 0 ; if (,0
54,<S2SV_ModStart> ; if ( cmac &&,0
55,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> const uint64_t bits_used <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> -> twopass. kf_group_bits = <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> rc. this_frame_target <S2SV_ModEnd> ; } <S2SV_null>,0
56,"<S2SV_ModStart> define EOFOp 0x07 <S2SV_ModEnd> char magick [ <S2SV_ModStart> ; do { if ( ( count!= 2 ) || ( memcmp ( magick, ""\\122\\354"", 2 )!= 0 ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
57,"<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> altsetting [ 0 ]. desc. bNumEndpoints < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; error = - EINVAL ; goto err_free_urb ; }",1
58,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
59,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> fd = xfmkstemp <S2SV_ModStart> & tmpname, NULL <S2SV_ModEnd> ) ) ==",0
60,<S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_pps_valid ) { return IHEVCD_INVALID_HEADER ; },0
61,"<S2SV_ModStart> ( narg, ""%s"",",0
62,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> MACROBLOCKD * <S2SV_ModEnd> vp9_setup_dst_planes ( MACROBLOCKD <S2SV_ModStart> mi_col ) { const <S2SV_ModStart> mi_col ) { const <S2SV_ModStart> int strides [ 3 <S2SV_ModEnd> ] = { <S2SV_ModStart> src -> uv_stride <S2SV_ModEnd> } ; int,0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,<S2SV_ModStart> == READ ) { <S2SV_ModStart> = ocfs2_dio_get_block ; } else { <S2SV_ModEnd> get_block = ocfs2_dio_get_block <S2SV_ModStart> = ocfs2_dio_get_block ; },0
65,"<S2SV_ModStart> ( f, ""%79s <S2SV_blank> %[^\\n]\\n"" <S2SV_ModEnd>, def,",0
66,,0
67,<S2SV_ModStart> string ) { if ( string == NULL ) return NULL ;,0
68,<S2SV_ModStart> size ) ; if (! px -> ft ) { return FALSE ; },1
69,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; length = 0 ; <S2SV_ModStart> ) ) ; length = 0 ; <S2SV_ModStart> ) ) ; length = 0 ; <S2SV_ModStart> ) ) ; length = 0 ; <S2SV_ModStart> ) ) ; length = 0 ; <S2SV_ModStart> ) ) ; length = 0 ; <S2SV_ModStart> ) ) ; length = 0 ; <S2SV_ModStart> ) ) ; length = 0 ;",0
70,<S2SV_ModStart> void ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
71,<S2SV_ModStart> const buffers [ 3 <S2SV_ModEnd> ] = { <S2SV_ModStart> int strides [ 3 <S2SV_ModEnd> ] = {,0
72,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; for (,1
73,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
74,"<S2SV_ModStart> _ipmi_destroy_user ( user, NULL",0
75,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> sl = strlen,1
76,"<S2SV_ModStart> * for_ch ; <S2SV_ModEnd> REQ ( n <S2SV_ModStart>, comp_for ) ; if ( TYPE ( CHILD ( n, 0 ) ) == ASYNC ) { is_async = 1 ; } if ( TYPE ( CHILD ( n, 0 ) ) == ASYNC ) { is_async = 1 ; } if ( is_async && c -> c_feature_version < 6 ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL <S2SV_ModStart> = 1 ; } for_ch = CHILD ( n, 0 ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; expression = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; expression = ast_for_expr ( c, CHILD ( n, 3 + is_async ) ) ; if (! expression ) return NULL ; expression = ast_for_expr ( c, CHILD ( n, 3 + is_async ) ) ; if (",0
77,<S2SV_ModStart> NULL ; } dst_state -> curframe = src -> curframe ;,0
78,,0
79,"<S2SV_ModStart> > maxn ) { <S2SV_ModStart> ""Action <S2SV_blank> overflow!!"" ) ; }",0
80,<S2SV_ModStart> ( len < ep <S2SV_ModEnd> ) { return,0
81,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
82,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void addModuleArgument (,0
83,<S2SV_ModStart> ; } } if ( interp_window_coeff == NULL ) return - 1 ;,0
84,"<S2SV_ModStart>, p ) ; * low = 0",0
85,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> bfq_idle_slice_timer_body ( struct <S2SV_ModStart> bfqq -> bfqd <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> long flags ; if (! bfqd -> in_service_queue ) { spin_unlock_irqrestore ( & bfqd -> lock, flags ) ; return false ; } <S2SV_ModStart> long flags ; <S2SV_ModEnd> spin_unlock_irqrestore ( & <S2SV_ModStart> return ; } return true ;",0
86,,1
87,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
88,<S2SV_ModStart> + x > ( int ) <S2SV_ModStart> + diffBlockLength || ( int ),0
89,<S2SV_ModStart> np -> opt <S2SV_ModEnd> ) ; err,0
90,<S2SV_ModStart> == VFF_TYP_DOUBLE && ( <S2SV_ModStart> == VFF_TYP_DOUBLE ) ),0
91,<S2SV_ModStart> data ) { ( void ) ctx ; ( void ) data ;,0
92,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
93,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
94,<S2SV_ModStart> mv. as_int <S2SV_ModEnd> ; mv.,0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
97,<S2SV_ModStart> msicap msicap ; int ret ; <S2SV_ModStart> 0 ) ; ret = <S2SV_ModEnd> pci_emul_add_capability ( dev,0
98,"<S2SV_ModStart> ( c, ""%s"",",0
99,<S2SV_ModStart> ; if ( <S2SV_ModEnd> cfg -> g_lag_in_frames <S2SV_ModStart> cfg -> g_lag_in_frames >= VPX_RC_ONE_PASS <S2SV_ModEnd> ) ERROR (,0
100,<S2SV_ModStart> { cpi -> zbin_mode_boost <S2SV_ModEnd> = 0 ;,0
101,<S2SV_ModStart> info -> si_code > <S2SV_ModEnd> 0 ) return,0
102,<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; if ( ptr -> size < 8 ) return GF_ISOM_INVALID_FILE ;,0
103,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
104,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> -> state == fmode <S2SV_ModEnd> ) return ; <S2SV_ModStart> -> state = fmode <S2SV_ModEnd> ; } state",0
105,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; ( void ) CloseBlob ( image, sizeof ( * image ) ) ;",0
106,<S2SV_ModStart> 0 ; } memcpy <S2SV_ModEnd> ( elem.,0
107,"<S2SV_ModStart>, i, <S2SV_ModEnd> JPC_QCX_GETEXPN ( qcd <S2SV_ModStart>, i, <S2SV_ModEnd> JPC_QCX_GETMANT ( qcd",0
108,<S2SV_ModStart> ; if ( c -> format == CHUNKY ) return AVERROR_PATCHWELCOME ; if (,0
109,<S2SV_ModStart> length - 1 <S2SV_ModEnd> ) ; return,1
110,"<S2SV_ModStart> * name = fit_get_name_safe <S2SV_ModEnd> ( fit,",0
111,"<S2SV_ModStart>, CX23888_IR_RX_KFIFO_SIZE, 0 <S2SV_ModEnd> ) ) return",0
112,"<S2SV_ModStart> * iface, vpx_codec_dec_cfg_t <S2SV_ModEnd> * cfg,",0
113,<S2SV_ModStart> ; value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1100WritePhyReg (,0
114,<S2SV_ModStart> ; ipc. hdr. <S2SV_ModStart> icmp_param. hdr <S2SV_ModEnd> ; ipc.,0
115,<S2SV_ModStart> else if ( <S2SV_ModEnd> flags & VPX_CODEC_USE_XMA <S2SV_ModStart> flags & VPX_CODEC_USE_XMA <S2SV_ModEnd> ) res =,0
116,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
117,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; RESERVE_SPACE",1
118,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ) ; return 0 <S2SV_ModStart> break ; } return 0 ;,0
119,<S2SV_ModStart> len ) ; r_strbuf_reset ( & op -> esil ) ;,0
120,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
121,<S2SV_ModStart> goto trunc ; ND_TCHECK_16BITS ( & lshp -> ls_length ) ;,0
122,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { ret = - EFAULT ; break ; } <S2SV_ModEnd> * obuf =",0
123,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
124,<S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ) <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ),1
125,"<S2SV_ModStart> * costs, vpx_tree <S2SV_ModEnd> tree, const <S2SV_ModStart> tree, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> ) { const vpx_tree <S2SV_ModEnd> probs [ i <S2SV_ModStart> ) ; const vpx_tree_index <S2SV_ModEnd> ii = tree",0
126,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
127,"<S2SV_ModStart>, c, 1 <S2SV_ModEnd> ) ; if",0
128,"<S2SV_ModStart> fadst16 ( const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> output ) { tran_low_t <S2SV_ModEnd> s0, s1 <S2SV_ModStart> input, int16_t <S2SV_ModEnd> output ) { <S2SV_ModStart> output ) { tran_low_t <S2SV_ModEnd> s0, s1 <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x1 = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x2 = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x3 = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x5 = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x6 = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x7 = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x7 = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x7 = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x9 = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x9 = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x9 =",0
129,<S2SV_ModStart> ; # if <S2SV_ModEnd> HAVE_MEDIA flags |= <S2SV_ModStart> ; # endif <S2SV_ModEnd> return flags &,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
131,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> count_segs_sb ( VP9_COMP <S2SV_ModStart> * const tile <S2SV_ModEnd>, int * <S2SV_ModStart> ) { const VP9_COMMON * const cm = & cpi -> common <S2SV_ModEnd> ; const int <S2SV_ModStart> cm = & cpi -> common <S2SV_ModEnd> ; const int <S2SV_ModStart> ) return ; if ( mi_row >= cm -> mi_rows || mi_col >= cm -> mi_rows || mi_col >= cm -> mi_cols || mi_col >= cm -> mi_cols || mi_col >= cm -> mi_cols || mi_col >= cm -> mi_cols || mi_col >= cm -> mi_cols || mi_col >= cm -> mi_cols || mi_col >= cm -> mi_cols || mi_col >= cm -> mi_cols || mi_col >= cm -> mi_cols || mi_col >= cm -> mi_cols || mi_col >= cm -> mi_cols || mi_col >= cm -> mi_cols || mi_col >= cm -> mi_cols || mi_col >= cm -> mi_cols ||",0
132,<S2SV_ModStart> ) break ; <S2SV_ModEnd> if (!,0
133,<S2SV_ModStart> get_blocks_flags = EXT4_GET_BLOCKS_CREATE | EXT4_GET_BLOCKS_DELALLOC_RESERVE,0
134,"<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> canonnamelen = 0 <S2SV_ModStart>, handle, p, <S2SV_ModStart>, handle, p, <S2SV_ModStart>, handle, p, <S2SV_ModStart>, handle, p, <S2SV_ModStart>, handle, p, <S2SV_ModStart>, handle, p,",0
135,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
136,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
137,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int set_registers ( <S2SV_ModStart> { int ret ; if (! data ) return - EINVAL,0
138,"<S2SV_ModStart> mod_ty Module ( asdl_seq <S2SV_ModEnd> * body,",0
139,"<S2SV_ModStart> * src, <S2SV_ModEnd> int64_t ts_start, <S2SV_ModStart> >> 4 ; <S2SV_ModEnd> if ( ctx <S2SV_ModStart> write_idx ) ; <S2SV_ModEnd> if ( ctx <S2SV_ModStart> } else { vpx_copy_and_extend_frame <S2SV_ModEnd> ( src,",0
140,<S2SV_ModStart>. sharpness ; const int q ; <S2SV_ModStart> cm -> base_qindex <S2SV_ModEnd> ) ; int,0
141,<S2SV_ModStart> ) ) ; btif_in_execute_service_request ( ) ;,0
142,<S2SV_ModStart> '!' : { long <S2SV_ModEnd> a = getnum,0
143,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
144,<S2SV_ModStart> (! ctx <S2SV_ModEnd> ) ) res,0
145,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int isofs_read_inode (,0
146,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> ) ; } sendClean ( outputbuffer ) ;",1
147,<S2SV_ModStart> self ) { if ( self -> name ),0
148,<S2SV_ModStart> < count ; i ++ <S2SV_ModEnd> ) { n,0
149,,0
150,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
151,<S2SV_ModStart> & flags ) <S2SV_ModEnd> err = verify_compat_iovec <S2SV_ModStart> ; } else <S2SV_ModEnd> err = verify_iovec <S2SV_ModStart> ; out_freeiov : <S2SV_ModEnd> err = -,0
152,<S2SV_ModStart> * dibh = GFS2_I ( inode ) <S2SV_ModEnd> -> mp_bh [,0
153,<S2SV_ModStart> ( ) ) <S2SV_ModEnd> ) ; },0
154,<S2SV_ModStart> } else { if ( value == NULL ) { ctxt -> dict = NULL ; },0
155,"<S2SV_ModStart> { if ( copy_file_exists <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> { if ( copy_file_exists <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> { if ( copy_file_exists <S2SV_ModEnd> ( ""/etc/skel/.cshrc"",",0
156,<S2SV_ModStart> msix_tab_size ) { <S2SV_ModEnd> bzero ( msixcap,1
157,<S2SV_ModStart> ; if ( <S2SV_ModEnd> js_regexec ( re,0
158,<S2SV_ModStart> : if ( Long_val <S2SV_ModEnd> ( Field (,1
159,"<S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; ksz8851WriteReg <S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( isr & KSZ8851_ISR_LCIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_ISR_TXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_TXMIR <S2SV_ModEnd> ) ; n <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_RXIS <S2SV_ModEnd>, ier )",0
160,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
161,"<S2SV_ModStart> ( write ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> ch_id ]. fd ) <S2SV_ModEnd>, p_buf,",0
162,<S2SV_ModStart> peerec ) ; <S2SV_ModEnd> if ( (,0
163,"<S2SV_ModStart> ( ) ; strncpy <S2SV_ModEnd> ( t1_buf_array,",0
164,"<S2SV_ModStart> BLOCK_SIZE subsize ) { ( void ) bsize ; <S2SV_ModEnd> MACROBLOCKD * xd <S2SV_ModStart> -> e_mbd ; <S2SV_ModEnd> PARTITION_TYPE partition = <S2SV_ModStart> ] ) = get_block_context <S2SV_ModEnd> ( x, <S2SV_ModStart> case PARTITION_NONE : <S2SV_ModEnd> duplicate_mode_info_in_sb ( cm <S2SV_ModStart> case PARTITION_VERT : <S2SV_ModEnd> duplicate_mode_info_in_sb ( cm <S2SV_ModStart> ] ) = get_block_context <S2SV_ModEnd> ( xd, <S2SV_ModStart> mi_cols ) { <S2SV_ModEnd> duplicate_mode_info_in_sb ( cm <S2SV_ModStart> case PARTITION_HORZ : <S2SV_ModEnd> duplicate_mode_info_in_sb ( cm <S2SV_ModStart> case PARTITION_HORZ : <S2SV_ModEnd> duplicate_mode_info_in_sb ( cm",0
165,"<S2SV_ModStart> key_ref ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) { ret = - ENOKEY ; goto error2 ; }",1
166,<S2SV_ModStart> u4_first_slice_is_nonref ; } <S2SV_ModEnd> ps_dec -> u4_first_slice_is_nonref,0
167,<S2SV_ModStart> var_off ) ; if ( src_known ) { <S2SV_ModStart> var_off ) ; },0
168,<S2SV_ModStart> goto lookup_out ; if (! ( cifs_sb -> mnt_cifs_flags & CIFS_MOUNT_POSIX_PATHS ) ) { rc = - EINVAL ; goto lookup_out ; },0
169,<S2SV_ModStart> ; opt -> opt = opt ; opt ->,0
170,<S2SV_ModStart> svc_ctx ) { SvcInternal_t <S2SV_ModEnd> * const si <S2SV_ModStart> svc_ctx ) ; <S2SV_ModEnd> svc_log ( svc_ctx <S2SV_ModStart> ; number_of_keyframes = ( SvcInternal_t ) <S2SV_ModStart> ; number_of_frames = ( SvcInternal_t ),0
171,<S2SV_ModStart> = new_cols ; <S2SV_ModEnd> vterm_allocator_free ( screen,1
172,"<S2SV_ModStart> n ) { int in_named_escape ; int in_named_escape ; int in_named_escape ; int in_named_escape <S2SV_ModEnd> ; assert ( <S2SV_ModStart> NULL ) ; in_named_escape = 0 ; in_named_escape = 0 ; <S2SV_ModStart> NULL ) ; in_named_escape = 0 ; <S2SV_ModStart> in_named_escape = 0 <S2SV_ModEnd> ; } else <S2SV_ModStart> '}' ) { in_named_escape = 1 ; <S2SV_ModStart> '}' ) { in_named_escape = 1 ; in_named_escape = 0 ; } else if ( in_named_escape ) { <S2SV_ModStart>, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; } } in_named_escape = 0 ; <S2SV_ModStart> ; } } in_named_escape = 0 ; <S2SV_ModStart>, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; } } in_named_escape = 0 ; in_named_escape = 0 ; in_named_escape = 0 ; <S2SV_ModStart>, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" <S2SV_ModEnd> )",0
173,"<S2SV_ModStart> pd, g_settings_dump_location, NULL",0
174,"<S2SV_ModStart> ""rfbScaledScreenUpdateRect"" ) ; memcpy <S2SV_ModEnd> ( srcptr2,",0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AUTH <S2SV_blank> ID <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",0
176,"<S2SV_ModStart> in_what_stride, in_what_stride <S2SV_ModEnd> ) ; check_here",0
177,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; vpx_memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; vpx_memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> mi_col < tile <S2SV_ModEnd>,0
178,"<S2SV_ModStart> ; dh = skb_header_pointer <S2SV_ModEnd> ( skb,",0
179,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> * optp, const <S2SV_ModStart> & 3 ) { <S2SV_ModStart> = IPOPT_END ; }",0
180,<S2SV_ModStart> connection == NULL || connection == NULL,0
181,<S2SV_ModStart> * findalldevs_if ; size_t <S2SV_ModEnd> nif = 0 <S2SV_ModStart> 0 ; } if ( plen < sizeof ( struct rpcap_findalldevs_if ) ) { return - 1 ; } <S2SV_ModStart> -> next ) { if ( plen < sizeof ( struct rpcap_findalldevs_if ) ) { return - 1 ; } <S2SV_ModEnd> if ( d <S2SV_ModStart> -> description ) { if ( plen < sizeof ( struct rpcap_findalldevs_if ) ) { return - 1 ; } <S2SV_ModEnd> if ( d <S2SV_ModStart> -> name ) { if ( plen < sizeof ( struct rpcap_findalldevs_if ) ) { return - 1 ; } <S2SV_ModEnd> for ( address,0
182,"<S2SV_ModStart> client_uid, DEFAULT_DUMP_DIR_MODE, NULL",0
183,<S2SV_ModStart> ; x += 3 <S2SV_ModEnd> ) { index,0
184,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
185,<S2SV_ModStart> ( num_images > ( int ),0
186,"<S2SV_ModStart> ( ndo, ""%s"", <S2SV_ModStart> ( ndo, ""%s"",",0
187,"<S2SV_ModStart>! ptrace_has_cap ( task,",0
188,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
189,<S2SV_ModStart> ; } } ps_parse -> s_sei_params. i4_sei_parameters_present_flags = 0 ;,0
190,<S2SV_ModStart> ) ) ; dd -> per_sdma = NULL ;,0
191,,0
192,<S2SV_ModStart> } pairs = pq_dup ( <S2SV_ModEnd> ) ; for,0
193,<S2SV_ModStart> val ) ; <S2SV_ModEnd> if ( strcmp,0
194,"<S2SV_ModStart> vlen ) ; if ( NULL == v ) { return bad_request ( c, 400, __LINE__ ) ; }",0
195,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> 256 ] ; tran_low_t <S2SV_ModEnd> * outptr = <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16",0
196,"<S2SV_ModStart> goto out ; g_autofree gchar * dbus_name = g_strdup_printf ( ""export-desktop-XXXXXX"" ) ; if ( g_str_has_prefix ( dbus_name ) ) { g_autofree gchar * dbus_name = g_strdup_printf ( ""export-desktop-XXXXXX"" ) ; g_string_append ( dbus_name, ""export-desktop-XXXXXX"" ) ; g_string_append ( dbus_name, ""export-desktop-XXXXXX"" ) ; g_string_append ( dbus_name, ""export-desktop-XXXXXX"" ) ; g_string_append ( dbus_name, ""export-desktop-XXXXXX"" ) ; g_string_append ( dbus_name, ""export-desktop-XXXXXX"" ) ; g_string_append ( dbus_name, ""export-desktop-XXXXXX"" ) ; g_string_append ( dbus_name, ""export-desktop-XXXXXX"" ) ; g_string_append ( dbus_name, ""export-desktop-XXXXXX"" ) ; g_",0
197,<S2SV_ModStart> * temp_filename = osi_calloc <S2SV_ModEnd> ( strlen ( <S2SV_ModStart> node ) ; <S2SV_ModEnd> strcpy ( temp_filename <S2SV_ModStart> enode ) ; <S2SV_ModEnd> } if ( <S2SV_ModStart> sections ) ) { <S2SV_ModStart> fp ) ; },0
198,<S2SV_ModStart> case VTP_SUMMARY_ADV : ND_TCHECK_32BITS ( tptr ) ;,0
199,"<S2SV_ModStart>, NULL ) <S2SV_ModEnd> ; return ;",0
200,"<S2SV_ModStart> ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" <S2SV_ModEnd> ""Content-Length: <S2SV_blank> %d\\r\\n"" ""%s"" ""\\r\\n""",0
201,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> src, dest <S2SV_ModEnd> ) ; unlink",0
202,<S2SV_ModStart>!= BFA_STATUS_OK ) { kfree ( fcstats ) ; <S2SV_ModStart> return NULL ; },1
203,"<S2SV_ModStart> -> x = MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> y = MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> z = MagickMax <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> z = MagickMax <S2SV_ModEnd> ( 1.0f,",0
204,<S2SV_ModStart> ; rec -> <S2SV_ModEnd> sasl_password = src,0
205,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
206,"<S2SV_ModStart> o, datao ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteCanonEntry ) )",0
207,<S2SV_ModStart> ) ; } if ( my_errno!= EINVAL ) { <S2SV_ModStart> ) ) ; },0
208,"<S2SV_ModStart> int alloc = <S2SV_ModEnd> strlen ( string <S2SV_ModStart> ( string ) <S2SV_ModEnd> ; char * <S2SV_ModStart> hex ; CURLcode res <S2SV_ModEnd> ; if ( <S2SV_ModStart> hex ) ; res = Curl_convert_from_network ( handle, & in, 1 ) ; if ( res <S2SV_ModEnd> ) { free",0
209,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
210,<S2SV_ModStart> ; def -> <S2SV_ModEnd> session_setup = usm_session_init,0
211,<S2SV_ModStart> NULL ; return <S2SV_ModEnd> match ( prog,0
212,<S2SV_ModStart> idx ] ; <S2SV_ModEnd> switch ( action <S2SV_ModStart> ) ; } <S2SV_ModEnd> return SNMP_ERR_NOERROR ;,0
213,<S2SV_ModStart> packets ++ ; if ( packets > 1 ),0
214,"<S2SV_ModStart> -> slave_list_head, NULL <S2SV_ModEnd> ) { spin_lock_irq <S2SV_ModStart> -> slave_list_head, NULL <S2SV_ModEnd> ) ; list_move_tail",0
215,<S2SV_ModStart> -> u1_dpb_commands_read ) { <S2SV_ModStart> ps_dec ) ; },0
216,<S2SV_ModStart> int_fast32_t widthOverflow = ( <S2SV_ModStart> info -> originalWidth ) <S2SV_ModStart> int_fast32_t heightOverflow = ( <S2SV_ModStart> info -> originalHeight ) <S2SV_ModStart> int_fast32_t newRasterSize = ( <S2SV_ModStart> info -> rasterSize ),0
217,"<S2SV_ModStart> validator -> user, 0",0
218,<S2SV_ModStart> bus ] ; <S2SV_ModEnd> si = &,0
219,"<S2SV_ModStart>, timeo ) <S2SV_ModEnd> ; while (",0
220,<S2SV_ModStart> ; isspace ( ( unsigned char ),0
221,"<S2SV_ModStart>. active_set ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> read_set, NULL )",0
222,<S2SV_ModStart> msixcap msixcap ; if <S2SV_ModEnd> ( msgnum >= <S2SV_ModStart> msgnum <= MAX_MSIX_TABLE_ENTRIES <S2SV_ModEnd> ) ; tab_size,0
223,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",1
224,<S2SV_ModStart> == NULL ) return KRB5KDC_ERR_PREAUTH_FAILED <S2SV_ModEnd> ; status = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> X509_NAME_free ( is,0
225,,0
226,,0
227,<S2SV_ModStart> buf1 -> size <= <S2SV_ModEnd> buf2 -> size,0
228,<S2SV_ModStart> ) + size ; if (! info ) return NULL,0
229,"<S2SV_ModStart>, & init_net, kern",0
230,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
231,"<S2SV_ModStart> b ) ; log_info ( ""Watching <S2SV_blank> system <S2SV_blank> buttons <S2SV_blank> on <S2SV_blank> /dev/input/%s <S2SV_blank> (%s)"", b -> name, name ) ;",0
232,,0
233,<S2SV_ModStart> -> lun ) sas_eh_defer_cmd <S2SV_ModEnd> ( cmd ),0
234,"<S2SV_ModStart>, end_col_offset ; string type_comment ; string type_comment ; string type_comment ; string type_comment ; string type_comment ; string type_comment ; string type_comment ; type_comment = CHILD ( n, name_i ) ; type_comment = CHILD ( n, name_i + 3 ) ; type_comment = CHILD ( n, name_i + 3 ) ; type_comment = CHILD ( n, name_i + 3 ) ; type_comment = CHILD ( n, name_i + 3 ) ; type_comment = CHILD ( n, name_i + 3 ) ; type_comment = CHILD ( n, name_i + 3 ) ; type_comment = CHILD ( n, name_i + 3 ) ; type_comment = CHILD ( n, name_i + 3 ) ; type_comment = CHILD ( n, name_i + 3 ) ; type_comment = CHILD ( n, name_i + 3 ) ; type_comment = CHILD ( n, name_i + 3 ) ; type_comment = CHILD ( n, type_comment ) ; type_comment = CHILD (",0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,<S2SV_ModStart> Rec. RecordLength <S2SV_ModEnd> ) ; if,0
237,,1
238,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
239,"<S2SV_ModStart> case SEEK_SET : psf_fseek ( psf, position, whence ) ; <S2SV_ModStart> ( position > <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header + <S2SV_ModEnd> psf -> header <S2SV_ModStart> -> header + <S2SV_ModEnd> psf -> header",0
240,<S2SV_ModStart> u4_ofst ) ; ps_cabac -> u4_ofst = ps_cabac -> u4_ofst ;,0
241,<S2SV_ModStart> prev_line_has_list_loosening_effect ) { if ( c -> ch!= _T ( '>' ) && ctx -> code_indent_offset < ctx -> n_containers ) { line -> indent = ctx -> n_containers ; line -> indent = ctx -> n_containers ; line -> indent = ctx -> n_containers ; line -> indent = ctx -> n_containers ; line -> indent = ctx -> n_containers ; line -> indent = ctx -> n_containers ; line -> indent = ctx -> n_containers ; line -> indent = ctx -> n_containers ; line -> indent = ctx -> n_containers ; line -> indent = ctx -> n_containers ; line -> indent = ctx -> n_containers ; line -> indent = ctx -> n_containers ; line -> indent = ctx -> n_containers ; line -> indent = ctx -> n_containers ; line -> indent = ctx -> n_containers ; line -> indent = ctx -> n_containers ; line -> indent = ctx -> n_containers ; line,0
242,<S2SV_ModStart> perf_event_context * ctx <S2SV_ModEnd> ; struct task_struct <S2SV_ModStart> event ) ; ctx <S2SV_ModEnd> -> state =,0
243,<S2SV_ModStart> -> post_proc_flag = <S2SV_ModEnd> ctx -> postproc_cfg <S2SV_ModStart>. noise_level ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
244,<S2SV_ModStart> struct olsr_msg4 ) ) ; ND_TCHECK_16BITS ( ptr. common -> packet_len,0
245,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vpx_usec_timer_start ( & <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,1
246,"<S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" <S2SV_ModEnd> ) ; exit <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> _exit ( 0",0
247,<S2SV_ModStart> synth_size ) ; if ( ptr_hbe_txposer -> num_planes > 1 ) { ptr_hbe_txposer -> num_planes = 1 ; },0
248,"<S2SV_ModStart> lua_module ) ; ap_lua_run_lua_request ( L, r ) ; ap_lua_run_lua_request ( L, r ) ; ap_lua_release_state ( L, r ) ; return AUTHZ_GENERAL_ERROR <S2SV_ModEnd> ; } <S2SV_null>",0
249,"<S2SV_ModStart> ) ) ; ( void ) ResetMagickMemory ( & dpx, 0, sizeof ( dpx ) ) ;",0
250,<S2SV_ModStart> (! proto_end ||! url,0
251,<S2SV_ModStart> end = path <S2SV_ModEnd> ; do {,0
252,<S2SV_ModStart> ; if ( server. bgsavechildpid == - 1 &&,0
253,<S2SV_ModStart> channel ) ; <S2SV_ModEnd> set_description ( client,1
254,<S2SV_ModStart> book -> dim && i < n,1
255,,0
256,<S2SV_ModStart> { if ( <S2SV_ModEnd> check_scale_factors ( other_w,0
257,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
258,"<S2SV_ModStart> -> pktoptions ; memset ( & skb, 0, sizeof ( skb ) ) ;",0
259,<S2SV_ModStart> ( & sctp_net_ops ) ; sctp_v4_protosw_exit (,0
260,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void show_psnr (,0
261,<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen (,1
262,"<S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_PHY1ILR <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_PHY1ILR <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ( interface, KSZ8851_MARM <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ( interface, KSZ8851_MARM <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID",0
263,"<S2SV_ModStart> skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
264,"<S2SV_ModStart> ( fit, IMAGE_SIZE_INVALID <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( fit, IMAGE_SIZE_INVALID <S2SV_ModEnd> ) ) {",0
265,"<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> uinput_fd, UI_DEV_DESTROY )",1
266,<S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc ->,0
267,<S2SV_ModStart> ) if ( strchr <S2SV_ModEnd> ( argv [,0
268,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
269,<S2SV_ModStart> ib ] ; <S2SV_ModEnd> dequant_ptr = d,1
270,<S2SV_ModStart> FN_REFLEN ] ; my_free ( opt_basedir ) ;,0
271,<S2SV_ModStart> decrypt_cb ) { size_t <S2SV_ModEnd> n = ( <S2SV_ModStart> n = ( size_t <S2SV_ModEnd> ) ( data_end,0
272,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
273,"<S2SV_ModStart> int * returnintra, int * returndistortion <S2SV_ModStart> # if CONFIG_TEMPORAL_DENOISING <S2SV_ModEnd> # endif mode_mv",0
274,<S2SV_ModStart> -> size = ( int ),0
275,"<S2SV_ModStart> UWORD8 u1_profile_idc, u1_seq_parameter_set_id <S2SV_ModEnd> ; UWORD16 i2_max_frm_num <S2SV_ModStart> u1_frame_cropping_flag, uc_constraint_set1_flag <S2SV_ModEnd> ; COPYTHECONTEXT (",0
276,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vpx_svc_parameters_t * ) <S2SV_ModEnd> ; ctx ->",0
277,"<S2SV_ModStart> out ) { uint16 <S2SV_ModEnd> bitspersample, samplesperpixel <S2SV_ModStart>, input_photometric ; uint16 input_photometric ; uint32 <S2SV_ModEnd> width, length",0
278,<S2SV_ModStart> a ) { <S2SV_ModEnd> char * pn <S2SV_ModStart> ; r = safe_lstat <S2SV_ModEnd> ( a ->,0
279,<S2SV_ModStart> i_sb ) ; uint16_t <S2SV_ModEnd> link_count ; bh,0
280,"<S2SV_ModStart> tx_size_uv = get_uv_tx_size ( mbmi, tx_size_y <S2SV_ModEnd> ) ; const <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm",0
281,"<S2SV_ModStart> mq_ops ) { spin_lock <S2SV_ModEnd> ( & fq <S2SV_ModStart> mq_flush_lock, flags <S2SV_ModEnd> ) ; flush_rq",0
282,<S2SV_ModStart> uint8_t val ; if ( addr < ( vdev -> config_len - sizeof ( val ) ) ) return ( uint32_t ) - 1 ;,0
283,"<S2SV_ModStart> ( option, "" <S2SV_blank> =\\t"" <S2SV_ModEnd>, & ovalue",0
284,<S2SV_ModStart> ) sizeof ( effect_param_t <S2SV_ModEnd> ) ) {,0
285,<S2SV_ModStart> ++ ) { if ( i == n_key_data - 1 || j == n_key_data - 1 ) { err = ENOMEM ; goto cleanup ; },0
286,"<S2SV_ModStart> ; memcpy ( sbuf <S2SV_ModEnd>, crgram,",0
287,<S2SV_ModStart> ) ) ; ret = - EINVAL ;,0
288,<S2SV_ModStart> ; } } return - 1 ;,1
289,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
290,<S2SV_ModStart> 1 ) ; memcpy <S2SV_ModEnd> ( & pbi <S2SV_ModStart> 1 ) ; memcpy <S2SV_ModEnd> ( & pbi,0
291,<S2SV_ModStart> NULL ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
292,<S2SV_ModStart> len ) { <S2SV_ModEnd> char * buf <S2SV_ModStart> char * buf <S2SV_ModEnd> ; if ( <S2SV_ModStart> s ++ ; <S2SV_ModEnd> } if ( <S2SV_ModStart> 10 ; } <S2SV_ModEnd> Py_DECREF ( w,0
293,<S2SV_ModStart> struct stat stb <S2SV_ModEnd> ; BUF *,0
294,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
295,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
296,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
297,<S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> u1_num_mbsNby2 ++ ;,0
298,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> vterm_allocator_free ( screen,1
299,"<S2SV_ModStart>, & delay, NULL",0
300,"<S2SV_ModStart> one, offset <S2SV_ModEnd> ; ssize_t count <S2SV_ModStart> ) break ; if ( number_planes_filled < 1 ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
301,"<S2SV_ModStart> value ) { char * name = ssplit ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ; <S2SV_ModStart>, stok ( name <S2SV_ModEnd>, "" <S2SV_blank> \\t,"",",0
302,"<S2SV_ModStart>. cmp = & ctx <S2SV_ModEnd>,. match_data",0
303,<S2SV_ModStart> ||! ntime ||! nbit,0
304,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
305,"<S2SV_ModStart> unused ) { <S2SV_ModEnd> _Py_IDENTIFIER ( __dict__ <S2SV_ModStart> __dict__ ) ; return <S2SV_ModEnd> Py_BuildValue ( ""O()O"" <S2SV_ModStart> Py_TYPE ( self <S2SV_ModEnd> ) ; }",0
306,"<S2SV_ModStart> ) & desc, sizeof ( * desc )",1
307,<S2SV_ModStart> -> private_data ; struct perf_event_context * ctx ; <S2SV_ModStart> case PERF_EVENT_IOC_PERIOD : ctx = perf_event_ctx_lock ( event ) ; <S2SV_ModStart> case PERF_EVENT_IOC_ID : ctx = perf_event_ctx_unlock ( event ) ; <S2SV_ModStart> ret ; } ctx = perf_event_ctx_unlock ( event ) ;,0
308,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> * r, PREDICTION_MODE <S2SV_ModEnd> y_mode ) { <S2SV_ModStart> ) { const PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode",0
309,<S2SV_ModStart> = block_size ; if ( sha -> ctx_len < block_size ) return - EINVAL ;,0
310,,0
311,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
312,<S2SV_ModStart> ; if ( <S2SV_ModEnd> NGHTTP2_IS_Fatal ( rv,0
313,<S2SV_ModStart> ; x86_add_queries ( <S2SV_ModEnd> ) ; return,0
314,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ] ; const vpx_extra_bit <S2SV_ModEnd> * const b <S2SV_ModStart> b = & vpx_extra_bits <S2SV_ModEnd> [ t ]",0
315,"<S2SV_ModStart> struct vp9_write_bit_buffer wb <S2SV_ModEnd> ; struct vp9_write_bit_buffer <S2SV_ModStart> struct vp9_write_bit_buffer saved_wb ; memset ( & wb, 0, sizeof ( wb ) ) <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> += uncompressed_hdr_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> += uncompressed_hdr_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb",0
316,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
317,<S2SV_ModStart> struct ikev2_id id = { 0 },0
318,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return - 1,0
319,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
320,,0
321,<S2SV_ModStart> mntent ) { int err ; err = <S2SV_ModEnd> mount_entry_on_generic ( mntent <S2SV_ModStart> mnt_dir ) ; if ( err ) return err ;,0
322,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
323,"<S2SV_ModStart> ( env, server_name_val, req_server_name_val ) ; rb_hash_aset ( env,",0
324,<S2SV_ModStart> endif int col_type <S2SV_ModEnd> ; MYSQL_BIND *,0
325,<S2SV_ModStart> need = 0 <S2SV_ModEnd> ; CELL first,0
326,,0
327,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( fast_pool ->,0
328,"<S2SV_ModStart> LEX_ID ) { strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> ( str, ""ID:"" <S2SV_ModEnd> ) ; } <S2SV_ModStart> LEX_STR ) { strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> ( str, ""String:\'"" <S2SV_ModEnd> ) ; }",0
329,,1
330,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
331,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
332,<S2SV_ModStart> ( s1 ) <S2SV_ModEnd> ) ; },0
333,"<S2SV_ModStart> { parse_global_option ( CMD_PRINT_HELP <S2SV_ModEnd>, NULL, <S2SV_ModStart> ; parse_service_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL, <S2SV_ModStart> ; parse_service_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL,",0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,<S2SV_ModStart> len < e -> enc_blocksize - 1,0
336,<S2SV_ModStart> u4_size ) ; ps_dec -> pu1_input_buffer [ u4_size ] = 0 ;,0
337,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char * print_string,0
338,"<S2SV_ModStart>. encode ( get_alg_priv ( img ) <S2SV_ModEnd>, img, <S2SV_ModStart>. encode ( get_alg_priv ( img ) <S2SV_ModEnd>, pts,",0
339,<S2SV_ModStart> ; } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
340,<S2SV_ModStart> i < cols <S2SV_ModEnd> ; i ++,0
341,<S2SV_ModStart> ; if ( ( i -> posX + i -> height ) > i -> parent -> width || ( i -> posY + i -> height ) > i -> parent -> height ) return - 1 ; if (,0
342,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
343,<S2SV_ModStart> ps_bitstrm ) ; if ( 0 == ps_codec -> i4_pps_valid ) { return IHEVCD_INVALID_HEADER ; },0
344,<S2SV_ModStart> ) ) { if ( psf -> rwf_endian == SF_ENDIAN_BIG ) break ;,0
345,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; <S2SV_ModEnd> ( void )",0
346,"<S2SV_ModStart> 0 ; } <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; return",0
347,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> BLOCK_8X8 : return vpx_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> BLOCK_16X8 : return vpx_mse16x8 <S2SV_ModEnd> ; case BLOCK_8X16 <S2SV_ModStart> BLOCK_8X16 : return vpx_mse8x16 <S2SV_ModEnd> ; default : <S2SV_ModStart> default : return vpx_mse16x16 <S2SV_ModEnd> ; } },1
348,,0
349,"<S2SV_ModStart> flags ) ; memset ( vb, 0, sizeof ( vb ) ) ;",0
350,<S2SV_ModStart> size ) { if ( size == 0 ) return NULL ;,0
351,<S2SV_ModStart> -> serviceId == EXTRACT_16BITS <S2SV_ModEnd> ( & rxh,1
352,"<S2SV_ModStart> = bss_desc ; memset ( adhoc_start -> ssid, 0, IEEE80211_MAX_SSID_LEN ) ;",0
353,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> == 0 ) && <S2SV_ModEnd> ( sf ->,0
354,<S2SV_ModStart> struct l2cap_conf_rfc rfc <S2SV_ModEnd> ; void * <S2SV_ModStart> sk ) ; <S2SV_ModEnd> break ; },0
355,"<S2SV_ModStart>, r, TEMP_FAILURE_RETRY ( <S2SV_ModStart> r, MSG_WAITALL )",0
356,<S2SV_ModStart> u4_length ) ; ps_dec -> u4_pic_decode_done = 0 ;,0
357,<S2SV_ModStart> ( pair!= NULL <S2SV_ModEnd> ) { mprAddItem,0
358,"<S2SV_ModStart> * delegation, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> -> type & fmode <S2SV_ModEnd> )!= open_flags <S2SV_ModStart> ( state, fmode <S2SV_ModEnd>, & deleg_cur <S2SV_ModStart> -> stateid, fmode <S2SV_ModEnd> ) ; ret",0
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,"<S2SV_ModStart> * xd, <S2SV_ModEnd> int * out_rate_sum <S2SV_ModStart> int sse ; int64_t rate_sum = 0 ; <S2SV_ModStart> pd ) ; if ( cpi -> fn_ptr [ bs ]. vf == xd -> mi [ 0 ] -> mbmi. ref_frame [ 0 ] && cpi -> fn_ptr [ bs ]. vf == xd -> mi [ 0 ] -> mbmi. ref_frame [ 1 ] && cpi -> fn_ptr [ bs ]. vf == xd -> mi [ 0 ] -> mbmi. ref_frame [ 2 ] && cpi -> fn_ptr [ bs ]. vf == xd -> mi [ 0 ] -> mbmi. ref_frame [ 3 ] && cpi -> fn_ptr [ bs ]. vf == xd -> mi [ 0 ] -> mbmi. ref_frame [ 3 ] && cpi -> fn_ptr [ bs ]. vf == xd -> mi [ 0 ] -> mbmi. ref_frame [ 3 ] && cpi -> fn_ptr [ bs ]. vf == xd -> mi [ 0 ] ->",0
361,<S2SV_ModStart> } if ( pmd_none <S2SV_ModEnd> ( pmd ),0
362,<S2SV_ModStart> { if ( <S2SV_ModEnd> * ptr == <S2SV_ModStart> * ret_username = safe_calloc <S2SV_ModEnd> ( index +,0
363,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> ) { return vpx_read_tree <S2SV_ModEnd> ( r,",1
364,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr1,",0
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,<S2SV_ModStart> depth ++ ; ND_TCHECK ( buf2 ) ;,0
367,"<S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_RXQCR, RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_RXQCR, RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_RXQCR, TXQCR_SDA <S2SV_ModEnd> ) ; n <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK",0
368,<S2SV_ModStart> ; # endif mono_finalizer_unlock ( ) ;,0
369,"<S2SV_ModStart> x_7 ; WORD32 <S2SV_ModEnd> x_8, x_9 <S2SV_ModStart> x0 ++ ; x_0 <S2SV_ModEnd> = x_0 + <S2SV_ModStart> x0 ++ ; x_0 <S2SV_ModEnd> = x_1 + <S2SV_ModStart> x0 ++ ; x_0 <S2SV_ModEnd> = x_1 + <S2SV_ModStart> x0 ++ ; x_0 <S2SV_ModEnd> = x_1 + <S2SV_ModStart> x0 ++ ; x_0 <S2SV_ModEnd> = x_1 + <S2SV_ModStart> x0 ++ ; x_0 <S2SV_ModEnd> = x_1 + <S2SV_ModStart> x0 ++ ; x_0 <S2SV_ModEnd> = x_1 + <S2SV_ModStart> x0 ++ ; x_0 <S2SV_ModEnd> = x_1 + <S2SV_ModStart> x0 ++ ; x_0 <S2SV_ModEnd> = x_1 + <S2SV_ModStart> x0 ++ ; x_0 <S2SV_ModEnd> = x_1 + <S2SV_ModStart> x0 ++ ; x_0 <S2SV_ModEnd> = x_1 + <S2SV_ModStart> x0 ++ ; x_0 <S2SV_ModEnd> = x_1 + <S2SV_ModStart> x0 ++ ; x_0 <S2SV_ModEnd> = x_1 + <S2SV_ModStart> x0 ++ ; x_0 <S2SV_ModEnd> = x_1 + <S2SV_ModStart> x0 ++ ; x_0 <S2SV_ModEnd> = x_1 + <S2SV_ModStart> x0 ++ ; x_0 <S2SV_ModEnd> = x_1 + <S2SV_ModStart> x0 ++ ; x_0 <S2SV_ModEnd> = y2 + <S2SV_ModStart>",0
370,<S2SV_ModStart> ( unlikely (! pmd_trans_huge ( <S2SV_ModEnd> * pmd ),0
371,"<S2SV_ModStart> ""Incorrect <S2SV_blank> parameters:\\n"" ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> ] ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> ] ) ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> fout ) ; <S2SV_ModEnd> return 1 ;",0
372,"<S2SV_ModStart> i, result <S2SV_ModEnd> ; PyObject *",1
373,<S2SV_ModStart> vpx_codec_alg_priv * priv <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> = calloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> VPX_CODEC_MEM_ERROR ; } <S2SV_ModEnd> ctx -> priv <S2SV_ModStart> enc ) { <S2SV_ModEnd> ctx -> priv <S2SV_ModStart> enc = & ctx <S2SV_ModEnd> -> cfg ; <S2SV_ModStart> ++ ) ; <S2SV_ModEnd> if ( priv,0
374,<S2SV_ModStart> ++ ; } <S2SV_ModEnd> pixel -> freq,0
375,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx ->,0
376,<S2SV_ModStart> out ; } down_write ( & iinfo -> i_mmap_sem ) ;,0
377,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB (",0
378,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int bad_format_imginfo (,0
379,"<S2SV_ModStart> ; UtRegisterTest ( ""DefragAllowedTest"", DefragAllowedTest ) ; UtRegisterTest (",0
380,<S2SV_ModStart> = object_length ; new_object. length = 0 ;,0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,"<S2SV_ModStart> p_sys, p_sys <S2SV_ModEnd> ) ; }",0
384,<S2SV_ModStart> ; exit_mf : <S2SV_ModEnd> free_stream ( s,0
385,<S2SV_ModStart> buf + idx ) ; assert ( num_properties > 0,0
386,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
387,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
388,,0
389,<S2SV_ModStart> ; if (! NCH ( n ) ) return NULL ; if (,0
390,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> unsigned char * <S2SV_ModEnd> vp8_denoiser_filter_c ( YV12_BUFFER_CONFIG <S2SV_ModStart> = 16 ; unsigned char * mc_running_avg_y = mc_running_avg_y ; unsigned char * running_avg_y = mc_running_avg_y <S2SV_ModEnd> ; unsigned char <S2SV_ModStart> unsigned char * running_avg_y <S2SV_ModEnd> = mc_running_avg_y = <S2SV_ModStart> = mc_running_avg_y = mc_running_avg_y <S2SV_ModEnd> + y_offset ; <S2SV_ModStart> c, i <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( absdiff <= 3 ) { running_avg_y <S2SV_ModEnd> [ c ] <S2SV_ModStart> c ] ; else running_avg_y [ c ] = mc_running_avg_y [ c ] ; else running_avg_y [ c ] = mc_running_avg_y [ c ] ; else running_avg_y [ c ] = mc_running_avg_y [ c ] ; else running_avg_y [ c ] = sig [",0
391,"<S2SV_ModStart> SOCK_MORE ; } if ( result == SOCK_CONTINUE ) { Ns_Log ( Ns_LogRequestDebug, ""SockParse: <S2SV_blank> SockParse <S2SV_blank> has <S2SV_blank> no <S2SV_blank> response <S2SV_blank> for <S2SV_blank> request"" ) ; return SOCK_CONTINUE ; }",0
392,<S2SV_ModStart> ret = 0 ; WARN_ON (! ti -> xtregs_opt ),0
393,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
394,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> if ( xop <S2SV_ModStart> == XCOL_SOURCE_RECV_OP ) return ; <S2SV_ModEnd> remote_dev = xop <S2SV_ModStart> -> src_dev ; <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for""",0
395,<S2SV_ModStart> ( header ) <S2SV_ModEnd> new_bh = ext2_xattr_cache_find <S2SV_ModStart> new_bh ) ; <S2SV_ModEnd> } else {,0
396,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
397,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; <S2SV_ModEnd> ( void )",0
398,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
399,"<S2SV_ModStart> AcquireQuantumMemory ( imsx, imsy <S2SV_ModEnd> ) ; if",0
400,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> Vpx_ref_frame_t * ) ; ( void ) ctr_id",0
401,<S2SV_ModStart> u1_num_mbs ++ ; <S2SV_ModEnd> u1_num_mbsNby2 ++ ;,0
402,"<S2SV_ModStart>, u4_y_offset ; UWORD32 u4_x_dst_offset = 0 ; UWORD32 u4_y_dst_offset <S2SV_ModEnd> ; UWORD8 u4_x_dst_offset <S2SV_ModStart>, u4_y_offset ; <S2SV_ModEnd> IMEG2D_TRACE_MB_START ( ps_dec <S2SV_ModStart>, u4_x_offset, u4_x_dst_offset <S2SV_ModEnd> ) ; ps_dec_mb_params <S2SV_ModStart>, u4_y_offset, u4_x_dst_offset <S2SV_ModEnd> ) ; ps_dec_mb_params <S2SV_ModStart>, u4_x_offset, u4_x_dst_offset <S2SV_ModEnd> ) ; ps_dec_mb_params <S2SV_ModStart>, u4_y_offset, u4_x_dst_offset <S2SV_ModEnd> ) ; ps_dec_mb_params <S2SV_ModStart>, u4_x_offset, u4_x_dst_offset <S2SV_ModEnd> ) ; ps_dec_mb_params <S2SV_ModStart>, u4_x_offset, u4_x_dst_offset <S2SV_ModEnd> ) ; ps_dec_mb_params <S2SV_ModStart>, u4_y_offset, u",0
403,<S2SV_ModStart> const cfg = <S2SV_ModEnd> cm -> frame_bufs,0
404,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
405,<S2SV_ModStart> tx_size = plane? <S2SV_ModEnd> get_uv_tx_size ( mbmi <S2SV_ModStart> get_uv_tx_size ( mbmi ) : mbmi -> tx_size <S2SV_ModEnd> ; const BLOCK_SIZE,0
406,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 4 ) ; <S2SV_ModEnd> src += src_stride",0
407,"<S2SV_ModStart> nrow ) { TIFFSetFieldDefaulted ( tif, TIFFTAG_ROWSPERSTRIP, & rowsperstrip ) ; <S2SV_ModStart> % rowsperstrip ; if ( row + rowstoread > h ) { return 0 ; }",0
408,<S2SV_ModStart> ; } } <S2SV_ModEnd> return 0 ;,0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
410,<S2SV_ModStart> num & ( 1U << <S2SV_ModEnd> ( number -,0
411,"<S2SV_ModStart> int w = vpx_img_plane_width <S2SV_ModEnd> ( img,",0
412,"<S2SV_ModStart> ; uint16_t attr_len <S2SV_ModEnd> ; uint16_t orig_attr_len <S2SV_ModStart> ; uint16_t last_block_len <S2SV_ModEnd> ; uint16_t orig_attr_len <S2SV_ModStart> ; if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", avp -> length, avp -> length ) ; return - 1 ; } attr_len = avp -> length - sizeof ( struct l2tp_avp_t ) ; if ( <S2SV_ModStart> 1 ; } <S2SV_ModEnd> MD5_Init ( &",0
413,<S2SV_ModStart> len ) ; OPENSSL_free ( actx ) ;,0
414,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0 ) ;",0
415,"<S2SV_ModStart> ; BT_DBG ( ""sock <S2SV_blank> %p, <S2SV_blank> sk <S2SV_blank> %pK"" <S2SV_ModEnd>, sock,",0
416,"<S2SV_ModStart> MT_CPTYPE_PASSSALT ) { memcpy <S2SV_ModEnd> ( pass_salt,",0
417,<S2SV_ModStart> ) { goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } else <S2SV_ModStart> ) ; goto bail <S2SV_ModEnd> ; } },0
418,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
419,<S2SV_ModStart> ) ) ; close ( gpsd_sock ) ;,0
420,"<S2SV_ModStart>, & rlen, 0",1
421,"<S2SV_ModStart> * slavename ; ( void ) strlcpy ( <S2SV_ModEnd> user -> password <S2SV_ModStart> user -> password, sizeof ( md5data ) <S2SV_ModStart> ; memcpy ( <S2SV_ModEnd> user -> password <S2SV_ModStart> user -> password, sizeof ( md5data ) <S2SV_ModStart>, 16 ) <S2SV_ModEnd> ; init_packet (",0
422,<S2SV_ModStart> ; if ( name &&,0
423,<S2SV_ModStart> off } ; if (! str ) { return - 1 ; },0
424,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
425,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
426,"<S2SV_ModStart> size_t s ; memset ( & n -> entries, 0, sizeof ( MnoteFujiEntry ) ) ;",0
427,<S2SV_ModStart> bd_addr ) { if ( bd_addr == NULL ) return BT_STATUS_NOT_READY ;,0
428,<S2SV_ModStart> i ; int <S2SV_ModEnd> expect ; txid <S2SV_ModStart> buf -> cursor <S2SV_ModEnd> ; xmin =,0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
430,<S2SV_ModStart> ( epoll_ ) ; if ( count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ),0
431,"<S2SV_ModStart> = parse_global_option ( CMD_INITIALIZE <S2SV_ModEnd>, NULL,",0
432,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_LONG_MAX : * ( size_t * ) val = ms -> elf_long_max ; return 0 ;,0
433,<S2SV_ModStart> offset ) { <S2SV_ModEnd> if ( offset,0
434,<S2SV_ModStart> {trak = gf_isom_get_track <S2SV_ModEnd> ( movie ->,0
435,"<S2SV_ModStart> 17 ] ; unsigned <S2SV_ModStart> ; # endif memcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> password, 82, sizeof ( md5data ) <S2SV_ModStart> = '\\0' ; memcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> ) md5data, pass_salt <S2SV_ModEnd> ) ; md5_finish",0
436,<S2SV_ModStart> ; if ( <S2SV_ModEnd> Prefix!= NULL,1
437,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
438,<S2SV_ModStart> ( ) ; g_free ( headers ) ;,0
439,"<S2SV_ModStart> src_ybc -> y_height - 1 <S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst,",0
440,"<S2SV_ModStart> * cpi, MACROBLOCKD * xd, <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ; <S2SV_ModStart> mi_col < tile <S2SV_ModEnd> -> mi_col_end ;",0
441,"<S2SV_ModStart>, obj_tlen ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_int offset ; u_",0
442,"<S2SV_ModStart> mbmi, const MV <S2SV_ModEnd> mvs [ 2",0
443,<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ),0
444,"<S2SV_ModStart>, 0, hdr_size <S2SV_ModEnd>, GFP_ATOMIC )",0
445,<S2SV_ModStart> ) return ; <S2SV_ModEnd> DEBUGMSGTL ( (,0
446,"<S2SV_ModStart> ++ ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart>, O_RDWR ) ) <S2SV_ModStart> 1 ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_KEY ) ) <S2SV_ModStart> EV_REL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_REL ) ) <S2SV_ModStart> x ++ ) TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_SYN ) )",0
447,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
448,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s,",0
449,"<S2SV_ModStart> iakerb_ctx_id_t * pctx, krb5_error_code code ) { <S2SV_ModEnd> ctx = krb5_gss_init_context",0
450,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> bitmapDC = CreateCompatibleDC",1
451,<S2SV_ModStart> ; while ( ( <S2SV_ModStart> )!= START_CODE_PREFIX ),0
452,<S2SV_ModStart> return - EINVAL <S2SV_ModEnd> ; if (,0
453,<S2SV_ModStart> type_argv ) ; g_assert ( mono_class_has_error ( klass ) ) ;,0
454,<S2SV_ModStart> ; int tmp ; if (! count ) return - EINVAL,0
455,"<S2SV_ModStart> char * last_elem <S2SV_ModEnd> ; last_elem = <S2SV_ModStart> size_t len ; if ( ( ( strncmp ( name [ 1 ], ""ORIGIN"", 6 ) == 0 ) || ( strncmp ( name [ 1 ], ""PLATFORM"", 7 ) == 0 ) ) && ( name [ len ] == '/' || ( is_path && name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) && ( name [ len ] == '/' || ( is_path && name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) && ( name [ len ] == '/' || ( is_path && name [ len ] == '/' || ( is_path && name [ len ] == '/' || ( is_path && name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) ) || ( name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) || ( name [ len ] == '/' || ( is_path && name [ len ] == '",0
456,<S2SV_ModStart> decContainer_t * ) H264SwDecMalloc <S2SV_ModEnd> ( sizeof (,0
457,<S2SV_ModStart> drop ; } <S2SV_ModEnd> opt -> optlen,0
458,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
459,"<S2SV_ModStart> goto errout ; memset ( info -> stages, 0, sizeof ( * info -> stages ) ) ;",0
460,<S2SV_ModStart> krb5_key_data * key_data = NULL <S2SV_ModStart> err ) ; <S2SV_ModEnd> memcpy ( key_data,0
461,"<S2SV_ModStart> Py_ssize_t idx, Py_ssize_t <S2SV_ModEnd> * value )",0
462,<S2SV_ModStart> -> zInput = sqlite3_malloc <S2SV_ModEnd> ( nByte +,0
463,<S2SV_ModStart> filp ) { __sock_release <S2SV_ModEnd> ( SOCKET_I (,0
464,"<S2SV_ModStart> * orelse, string type_comment, <S2SV_ModStart> ; p -> v. AsyncFor. type_comment = type_comment ; p ->",0
465,"<S2SV_ModStart> * param, my_bool <S2SV_ModEnd> * name )",0
466,,0
467,"<S2SV_ModStart> UINT error ; UINT16 <S2SV_ModEnd> ( s,",0
468,"<S2SV_ModStart> -> socket, ""%s"", <S2SV_ModStart> -> socket, ""%s"",",1
469,<S2SV_ModStart> struct flowi6 fl6 = { },0
470,<S2SV_ModStart> ; MATLAB_KO : MATLAB_KO :,0
471,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
472,"<S2SV_ModStart> ; int len <S2SV_ModEnd> ; bn_t t <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> * p_len = <S2SV_ModStart> 0 ] ; <S2SV_ModEnd> do { m_len <S2SV_ModStart> 8 ) ; * p_len -= ( m_len - 1 ) ; * p_len -= ( m_len - 1 ) ; bn_mod_2b ( m, m, ( k_len - * p_len ) * 8 ) ; bn_mod_2b ( m, m, ( k_len - * p_len ) * 8 ) ; bn_mod_2b ( m, m, ( k_len - * p_len ) * 8 ) ; <S2SV_ModStart> 8 ) ; <S2SV_ModEnd> return 1 ;",0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
475,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void fix_interp_filter (,0
476,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> VP9_COMMON * const <S2SV_ModStart> mi_cols ) ; <S2SV_ModEnd> vp9_setup_src_planes ( xd <S2SV_ModStart> subsampling_y ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
477,<S2SV_ModStart> hp ) ; <S2SV_ModEnd> return ( retval,0
478,<S2SV_ModStart> define EOFOp 0x07 <S2SV_ModEnd> char magick [ <S2SV_ModStart> = ReadBlobLSBShort ( ( unsigned char * ) <S2SV_ModStart> = ReadBlobLSBShort ( ( unsigned char * ) <S2SV_ModStart> = ReadBlobLSBShort ( ( unsigned char * ),0
479,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> sizeof ( tETH_HDR ),1
480,<S2SV_ModStart> ; ps_dec -> u2_pic_order_cnt_msb = 0 ; ps_dec ->,0
481,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> * karg ; <S2SV_ModEnd> int iocnum ; <S2SV_ModStart> ) ) ; kfree ( karg ) ; <S2SV_ModStart> karg ) ; kfree ( karg ) ;",0
482,"<S2SV_ModStart> -> columns, 3 <S2SV_ModEnd> * sizeof (",0
483,"<S2SV_ModStart> } else { ERROR ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { ERROR ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { ERROR ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv",0
484,"<S2SV_ModStart> ; if ( buf_size < 2 ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if (",0
485,"<S2SV_ModStart> charbuf ), ""%s"",",0
486,<S2SV_ModStart> void ) { CRYPTO_THREAD_unlock ( stunnel_locks [ LOCK_SECTIONS ] ) ; <S2SV_ModStart> ] ) ; <S2SV_ModEnd> while ( opt,0
487,<S2SV_ModStart> void ) { if (! recovery_started ) return ;,0
488,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> )",0
489,"<S2SV_ModStart> image ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
490,<S2SV_ModStart> ps_slice_hdr ) { <S2SV_ModEnd> WORD32 st_rps_idx ;,0
491,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char * print_object,0
492,<S2SV_ModStart> ; other = unix_peer <S2SV_ModEnd> ( sk ) <S2SV_ModStart> { if ( unix_peer <S2SV_ModEnd> ( other ) <S2SV_ModStart> = 0 ; <S2SV_ModEnd> sock_put ( other,0
493,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; sendClean ( outputbuffer ) ;",1
494,<S2SV_ModStart> ( OM_uint32 ) KRB5_BAD_MSIZE <S2SV_ModEnd> ; return GSS_S_DEFECTIVE_TOKEN,0
495,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> ( args, vpx_ref_frame_t <S2SV_ModEnd> * ) ;",0
496,<S2SV_ModStart> plug ) ; <S2SV_ModEnd> put_ioctx ( ctx,0
497,,0
498,"<S2SV_ModStart> s } ; uECC_word_t carry ; wordcount_t num_words = curve -> num_words ; if ( uECC_vli_isZero ( p, num_n_bits ) ) { return 0 ; } <S2SV_ModStart> curve ) ; <S2SV_ModEnd> if ( uECC_vli_isZero",0
499,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|dao-truncated]"" <S2SV_ModEnd> ) ) ;",0
500,<S2SV_ModStart> = buf ; pool -> free_total ++ ; <S2SV_ModStart> ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
501,"<S2SV_ModStart> tp ; { <S2SV_ModEnd> const char hex <S2SV_ModStart> ] = ""00112233445566778899aAbBcCdDeEfF"" <S2SV_ModEnd> ; const char <S2SV_ModStart> cp ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
503,"<S2SV_ModStart>, * pixc <S2SV_ModEnd> ; PIXCMAP * <S2SV_ModStart> == NULL ) { pixc = pixGetDepth ( pixs ) ; <S2SV_ModStart> NULL ) ; }",0
504,"<S2SV_ModStart> = 256 ; memset ( xd, 0, sizeof ( xd ) ) ;",0
505,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> overhead = 16,0
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
507,"<S2SV_ModStart> ; int i <S2SV_ModEnd> ; const double <S2SV_ModStart>, i, active_worst_quality <S2SV_ModEnd> ) ; if",0
508,<S2SV_ModStart> ; value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1101WritePhyReg (,0
509,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
510,"<S2SV_ModStart> int dst_stride, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart> plane ] ; memset <S2SV_ModEnd> ( left_col,",0
511,<S2SV_ModStart> ++ ; } <S2SV_ModEnd> } if (,0
512,<S2SV_ModStart> ; ei -> i_completed_io_list = 0 ; ei ->,0
513,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> show_frame ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; vpx_wb_",0
514,"<S2SV_ModStart> ) ; } if ( strchr ( argv [ 1 ], '\\0' ) == NULL ) { perror ( ""rrd_graph_options"" ) ; return ; }",0
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { q = osStrchr <S2SV_ModEnd> ( p +,1
516,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
517,<S2SV_ModStart> KEY_FRAME ) { memcpy <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memcpy <S2SV_ModEnd> ( xd ->,0
518,,0
519,<S2SV_ModStart> VALUE read_memory ( <S2SV_ModEnd> VALUE content ) <S2SV_ModStart> xmlSchemaPtr schema ; <S2SV_ModEnd> VALUE errors =,0
520,"<S2SV_ModStart> if (! strcmp ( line_text, CONFLINELEN ) <S2SV_ModEnd> && strcmp (",0
521,<S2SV_ModStart> ; out += 3 <S2SV_ModEnd> ; } state <S2SV_ModStart> ; out += 3 <S2SV_ModEnd> ; } state,1
522,<S2SV_ModStart> err = - <S2SV_ModEnd> EALREADY ; if,0
523,<S2SV_ModStart> ( handle -> <S2SV_ModEnd> nmi ) {,0
524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> u16 <S2SV_ModEnd> utf8s_to_utf16s ( const <S2SV_ModStart> * s, u16 <S2SV_ModEnd> len, wchar_t <S2SV_ModStart> ( u >= PLANE_SIZE ) { u16 <S2SV_ModEnd> u -= PLANE_SIZE <S2SV_ModStart> PLANE_SIZE ) { u16 <S2SV_ModEnd> op ++ = <S2SV_ModStart> } else { u16 <S2SV_ModEnd> op ++ = <S2SV_ModStart> ++ = ( u16 <S2SV_ModEnd> ) u ;",0
525,"<S2SV_ModStart> { print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" <S2SV_ModEnd> ) ; if",0
526,"<S2SV_ModStart> ( interface, KSZ8851_RXFHSR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & KSZ8851_RXFHSR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> status & ( KSZ8851_RXFHBCR <S2SV_ModEnd> ) & RXFHBCR_RXBC_MASK <S2SV_ModStart> ( interface, KSZ8851_RXFDPR <S2SV_ModEnd> ) ; kz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_RXFDPR <S2SV_ModEnd> ) ; kz8851ReadFifo <S2SV_ModStart> ( interface, KSZ8851_RXQCR <S2SV_ModEnd> ) ; kz8851ReadFifo <S2SV_ModStart> ( interface, KSZ8851_RXQCR <S2SV_ModEnd> ) ;ancillary",0
527,"<S2SV_ModStart> * n, string type_comment, <S2SV_ModStart>, int is_async, string type_comment <S2SV_ModStart>, LINENO ( type_comment <S2SV_ModEnd> ), n",0
528,"<S2SV_ModStart> mm, 0xA0000 ) ; flush_tlb ( mm",0
529,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ptr_check_result ) {,0
530,<S2SV_ModStart> ; config_free ( config ) ; config_free (,0
531,<S2SV_ModStart> row < height && row < raw_width,0
532,<S2SV_ModStart> len < needed ||! nl,0
533,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;",0
534,<S2SV_ModStart> ( bfqq ) return <S2SV_ModStart> ( bfqq ) <S2SV_ModEnd> ; return HRTIMER_NORESTART,0
535,<S2SV_ModStart> ; length += <S2SV_ModEnd> update_prepare_bounds ( context,0
536,<S2SV_ModStart> out ; } if ( flags & RENAME_EXCHANGE ) { err = - ENOENT ; goto out ; },0
537,"<S2SV_ModStart> int plane ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
538,"<S2SV_ModStart> * cpi, <S2SV_ModEnd> int mi_row, <S2SV_ModStart> ( cpi, x <S2SV_ModEnd>, mi_row, <S2SV_ModStart> ( cpi, x <S2SV_ModEnd>, mi_row,",0
539,"<S2SV_ModStart> reader. superblock, false",0
540,<S2SV_ModStart> -> ranges = safe_calloc <S2SV_ModEnd> ( sizeof (,0
541,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flags & VP8_EFLAG_NO_UPD_GF <S2SV_ModStart> flags & VP8_EFLAG_FORCE_GF <S2SV_ModEnd> ) { ctx,0
542,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;",0
543,<S2SV_ModStart>! head ) <S2SV_ModEnd> return - EINVAL <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
544,"<S2SV_ModStart> * pptr, u_int <S2SV_ModEnd> len ) { <S2SV_ModStart> * pptr, u_int <S2SV_ModEnd> len ) {",0
545,"<S2SV_ModStart> ) ) ; StringBuffer_append ( res -> outputbuffer, """" ) ;",0
546,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
547,"<S2SV_ModStart>, sizeof ( *",0
548,"<S2SV_ModStart> bLength ) ; if (! buffer0 ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> no <S2SV_blank> interfaces\\n"", cfgno ) ; return - EINVAL ; }",0
549,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0 ) ;",0
550,<S2SV_ModStart> ; distortion = vpx_variance16x16 <S2SV_ModEnd> ( * (,1
551,"<S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd>, ECON2_ETHEN | <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; macAddrToEui64 <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; temp <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; temp <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; temp <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; temp <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; temp",0
552,<S2SV_ModStart> ; maxlen = psf_strlen <S2SV_ModEnd> ( ( char <S2SV_ModStart> ; start = psf_strlen <S2SV_ModEnd> ( ( char <S2SV_ModStart> ; maxlen = psf_strlen <S2SV_ModEnd> ( ( char,0
553,<S2SV_ModStart> { if ( ctx -> priv &&,0
554,,0
555,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
556,<S2SV_ModStart> ) + 2 <S2SV_ModEnd> ; if (,0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,"<S2SV_ModStart>, * s ; char * s <S2SV_ModStart> errstr ) { <S2SV_ModEnd> s = _PyUnicode_AsString",0
559,<S2SV_ModStart> ; int is_keyframe_qaunt_set <S2SV_ModEnd> ; vpx_codec_err_t res <S2SV_ModStart> break ; } <S2SV_ModEnd> if ( strcmp <S2SV_ModStart> break ; } <S2SV_ModEnd> if ( strcmp <S2SV_ModStart> ; if ( <S2SV_ModEnd> is_keyframe_qaunt_set ) {,0
560,<S2SV_ModStart> ) ; } fclose ( mvs ) ;,0
561,<S2SV_ModStart> self ) { <S2SV_ModEnd> PyObject * new_memo,0
562,,1
563,"<S2SV_ModStart> ( dbh, mysql_error <S2SV_ModEnd> ( imp_dbh ->",0
564,"<S2SV_ModStart> ) || ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & size ) <S2SV_ModStart> ( need_close || TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & size )",0
565,<S2SV_ModStart> struct ieee_802_11_phdr phdr = { 0 },0
566,<S2SV_ModStart> ; sh = safe_calloc <S2SV_ModEnd> ( hdrlen +,0
567,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void nsc_encode_argb_to_aycocg (,0
568,<S2SV_ModStart> > nr_parens ) { kfree ( op_stack ) ; <S2SV_ModStart> EINVAL ) ; },0
569,<S2SV_ModStart> ) { const RATE_CONTROL <S2SV_ModEnd> * rc = <S2SV_ModStart> = ( ( cpi <S2SV_ModEnd> -> oxcf. <S2SV_ModStart>. starting_buffer_level / 2 <S2SV_ModEnd> ) > INT_MAX <S2SV_ModStart> = ( ( cpi <S2SV_ModEnd> -> oxcf. <S2SV_ModStart> ; if ( cpi <S2SV_ModEnd> -> frames_since_key < <S2SV_ModStart> -> frames_since_key < cpi <S2SV_ModEnd> -> output_framerate /,0
570,"<S2SV_ModStart> TX_MODE read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r,",0
571,"<S2SV_ModStart> : # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> } # line 101 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 101 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy",0
572,,0
573,<S2SV_ModStart> pSelect -> pSrc ; assert ( pWalker -> pParse -> db -> mallocFailed ),0
574,<S2SV_ModStart> ; serv = svc_create_pool <S2SV_ModEnd> ( & nfs4_callback_program,0
575,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
576,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
577,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
578,"<S2SV_ModStart> { do ret ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
579,<S2SV_ModStart> ( xIter = xmlDocGetRootElement ( xml -> doc ) <S2SV_ModEnd> ; xIter!=,0
580,<S2SV_ModStart> <S2SV_null> static const SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> return ( const SvcInternal_t <S2SV_ModEnd> * ) svc_ctx,1
581,"<S2SV_ModStart> * args ; zend_hash_get_current_data ( Z_ARRVAL_P ( zdata ), ( void * ) & args ) ;",0
582,<S2SV_ModStart> [ 80 ] = { 0 },0
583,"<S2SV_ModStart> ( buf, <S2SV_ModEnd> 0 ) ;",0
584,"<S2SV_ModStart> ( ) { int <S2SV_ModEnd> directory_table_end, table_start <S2SV_ModStart> ) == 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> parse_exports_table ( & <S2SV_ModEnd> directory_table_end ) == <S2SV_ModStart> ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( <S2SV_ModStart> ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE <S2SV_ModEnd> ; if (",0
585,<S2SV_ModStart> * createenv ( <S2SV_ModEnd> struct rule * <S2SV_ModStart> count = 0 <S2SV_ModEnd> ; if (,0
586,<S2SV_ModStart> -> seg ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
587,"<S2SV_ModStart>, Module_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Interactive_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Expression_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Stmt_attributes, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Stmt_attributes, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Stmt_attributes, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Stmt_attributes, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Stmt_attributes, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Stmt_attributes, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Stmt_attributes, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Stmt_attributes, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Stmt_attributes, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Stmt_attributes, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Stmt_attributes, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Stmt_attributes, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Stmt_attributes, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Stmt_attributes, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Stmt_attributes, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>,",0
588,"<S2SV_ModStart>, O_CREAT | O_TRUNC <S2SV_ModEnd>, S_IRUSR |",0
589,<S2SV_ModStart> ) ; } ++ x -> ymode_count [ m ] ; <S2SV_ModStart> } # endif <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
590,"<S2SV_ModStart> cinput ) { <S2SV_ModEnd> char * s <S2SV_ModStart>, * t <S2SV_ModEnd> ; setDefaults ( <S2SV_ModStart> t ++ ; <S2SV_ModEnd> s = cinput <S2SV_ModStart> ( outpos, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"" <S2SV_ModEnd>, s, <S2SV_ModStart> TERMCHAR ) ; if ( strcmp ( nameobject, ""AxodrawWantsPDF"" ) == 0 ) { identification = 1 ; outpos += sprintf ( outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", VERSION, SUBVERSION ) ; fprintf ( outfile, ""%s"" <S2SV_ModEnd>, outputbuffer ) <S2SV_ModStart> ; if ( <S2SV_ModEnd> ( strcmp ( <S2SV_ModStart> ( outfile, ""%s"" <S2SV_ModEnd>, outputbuffer )",0
591,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj,",0
592,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
593,"<S2SV_ModStart>! nfp_abm_u32_check_knode ( alink <S2SV_ModEnd>, knode, <S2SV_ModStart> ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; return - EOPNOTSUPP <S2SV_ModEnd> ; } } <S2SV_ModStart>! match ) goto err_delete <S2SV_ModEnd> ; list_add (",0
594,<S2SV_ModStart> ) ; } <S2SV_ModEnd> stream -> config <S2SV_ModStart> stats ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
595,"<S2SV_ModStart> goto out ; g_autofree gchar * dbus_name = g_strdup_printf ( ""export-desktop-XXXXXX"" ) ; if ( g_str_has_prefix ( dbus_name ) ) { g_autofree gchar * dbus_name = g_strdup_printf ( ""export-desktop-XXXXXX"" ) ; g_string_append ( dbus_name, ""export-desktop-XXXXXX"" ) ; g_string_append ( dbus_name, ""export-desktop-XXXXXX"" ) ; g_string_append ( dbus_name, ""export-desktop-XXXXXX"" ) ; g_string_append ( dbus_name, ""export-desktop-XXXXXX"" ) ; g_string_append ( dbus_name, ""export-desktop-XXXXXX"" ) ; g_string_append ( dbus_name, ""export-desktop-XXXXXX"" ) ; g_string_append ( dbus_name, ""export-desktop-XXXXXX"" ) ; g_string_append ( dbus_name, ""export-desktop-XXXXXX"" ) ; g_",0
596,"<S2SV_ModStart> data_end ) { vpx_reader <S2SV_ModEnd> * const cm <S2SV_ModStart>, tile_col ; vpx_reader <S2SV_ModEnd> r ; assert <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> aligned_cols ) ; memset <S2SV_ModEnd> ( cm ->",0
597,<S2SV_ModStart> vp9_decoder_create ( const VP9D_CONFIG <S2SV_ModEnd> * oxcf ) <S2SV_ModStart>  oxcf ) { <S2SV_ModEnd> VP9_COMMON * const <S2SV_ModStart> = 1 ; <S2SV_ModEnd> pbi -> current_video_frame <S2SV_ModStart> = 1 ; <S2SV_ModEnd> vp9_init_dequantizer ( cm,0
598,"<S2SV_ModStart> dref ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ;",0
599,<S2SV_ModStart> req ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
600,"<S2SV_ModStart> * tokens, <S2SV_ModEnd> * tree, <S2SV_ModStart> do { const vpx_tree_index <S2SV_ModEnd> j = tree",0
601,"<S2SV_ModStart> ( img ) { <S2SV_ModStart> ctx, img, 0 <S2SV_ModStart> VPX_CODEC_INVALID_PARAM ; } }",0
602,"<S2SV_ModStart>, & len, 0",1
603,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ; } } return 0 ;,0
604,"<S2SV_ModStart> rc, const VP9EncoderConfig <S2SV_ModEnd> * oxcf )",0
605,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
606,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_superblock ( VP9_COMP <S2SV_ModStart> * t, MACROBLOCK * const x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, MACROBLOCKD * x, <S2SV_ModStart> BLOCK_SIZE bsize ) { <S2SV_ModEnd> MACROBLOCKD * const <S2SV_ModStart> -> mbmi ; <S2SV_ModEnd> unsigned int segment_id <S2SV_ModStart> bsize ] ; <S2SV_ModEnd> x -> skip_recode <S2SV_ModStart> ; x -> skip_recode =! x -> select_txfm_size && mbmi -> sb_type >= BLOCK_8X8 && cpi -> oxcf. aq_mode!= CYCLIC_REFRESH_AQ && cpi -> oxcf. aq_mode!= CYCLIC_REFRESH_AQ && cpi -> oxcf. aq_mode!= CYCLIC_REFRESH_AQ && cpi -> oxcf. aq_mode!= CYCLIC_REFRESH_AQ && cpi -> oxcf. a",0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. ptr <S2SV_ModStart> [ psf -> header. ptr <S2SV_ModStart> [ psf -> header. ptr <S2SV_ModStart> [ psf -> header. ptr <S2SV_ModStart> [ psf -> header. ptr <S2SV_ModStart> [ psf -> header. ptr,0
608,,0
609,"<S2SV_ModStart> c ) || strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> c ) || strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"",",0
610,<S2SV_ModStart> packet -> http_contentlen <S2SV_ModEnd>. len =,0
611,"<S2SV_ModStart>, y, MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> x ), MagickMin <S2SV_ModEnd> ( 4,",0
612,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL ) <S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL )",1
613,<S2SV_ModStart> action ) { ( void ) w ;,0
614,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; sendClean ( outputbuffer ) ;",1
615,"<S2SV_ModStart> ( AUTODETECT_TAG, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" <S2SV_ModEnd> ) ; Stream_Read_UINT32",0
616,"<S2SV_ModStart> # if ( CONFIG_VP8_COMMON <S2SV_ModEnd> ( cpi,",0
617,<S2SV_ModStart> # if CONFIG_MULTITHREAD <S2SV_ModEnd> vp8_decoder_remove_threads ( pbi,1
618,<S2SV_ModStart> 0 ) { mtCOVERAGE_TEST_MARKER ( ) ; <S2SV_ModStart> 0x00 ) { <S2SV_ModEnd> if ( ( <S2SV_ModStart> 0x00 ) { <S2SV_ModEnd> } else {,0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,,0
621,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
622,"<S2SV_ModStart> TX_SIZE tx_size, vpx_coeff_probs_model <S2SV_ModEnd> * coef_probs =",0
623,<S2SV_ModStart> { } ; if (! name ) return - ENOMEM ;,0
624,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int su3000_frontend_attach ( <S2SV_ModStart> ud3000_frontend_attach ( struct dvb_usb_adapter * d, struct dvb_usb_adapter <S2SV_ModEnd> * d ) <S2SV_ModStart> d ) { struct dvb_usb_adapter * d = d -> usb_adapter ; struct dvb_usb_adapter * d = d -> usb_adapter ; <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; d -> usb_adapter = d ; <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; d -> usb_adapter = d ; <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; d -> usb_adapter = d ; d -> usb_adapter = d ; d -> usb_adapter = d ; d -> usb_adapter = d ; d -> usb_adapter = d ; d -> usb_adapter = d ; d -> usb_adapter = d ; d -> usb_adapter = d ; d -> usb_adapter = d",0
625,"<S2SV_ModStart> * iface, vpx_codec_enc_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> else if ( cfg &&",0
626,"<S2SV_ModStart> int stride, <S2SV_ModEnd> int mv_row, <S2SV_ModStart> const kernel = vpx_get_interp_kernel <S2SV_ModEnd> ( xd -> <S2SV_ModStart> const kernel = vpx_get_interp_kernel <S2SV_ModEnd> ( xd ->",0
627,"<S2SV_ModStart> ; mungspaces ( strncpy <S2SV_ModEnd> ( buf,",0
628,<S2SV_ModStart> * cJSON_CreateFloatArray ( const,0
629,"<S2SV_ModStart> data_end ) { const VP9Worker * const worker = & pbi -> tile_workers ; <S2SV_ModStart> int num_workers = MIN ( <S2SV_ModEnd> pbi -> common <S2SV_ModStart> mxcf. max_threads, tile_cols ) ; TileBuffer tile_buffers [ 1 << 6 ] ; int n ; int final_worker = - 1 ; assert ( tile_cols <= ( 1 << 6 ) ) ; assert ( tile_cols <= ( 1 << 6 ) ) ; assert ( tile_cols <= ( 1 << 6 ) ) ; ( void ) tile_rows ; if ( tile_cols <= ( 1 << 6 ) ) { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Tile <S2SV_blank> decoder <S2SV_blank> thread <S2SV_blank> creation <S2SV_blank> failed"" ) ; } } for ( i = 0 ; i < num_threads ; ++ i ) { VP9Worker * const worker = & pbi -> tile_workers [ i ] ; ++ pbi -> num_tile_workers ; vpx_worker_init ( worker ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_malloc ( sizeof ( Tile",0
630,<S2SV_ModStart> ; offset = ( int ) <S2SV_ModStart> ; offset = ( int ),0
631,"<S2SV_ModStart> -> common ; <S2SV_ModEnd> const double base_q <S2SV_ModStart> = SEGMENT_DELTADATA ; vpx_clear_system_state ( ) ; for ( i = ENERGY_MIN ; i <= ENERGY_MAX ; i ++ ) { int qindex_delta, segment_rdmult ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; } qindex_delta = vp9_compute_qdelta ( & cpi -> rc, base_q, base_q * Q_RATIO ( i ) ) ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; } qindex_delta = vp9_compute_qdelta ( & cpi -> rc, base_q, base_q * Q_RATIO ( i ) ) ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; } qindex_delta = vp9_compute_qd",0
632,<S2SV_ModStart> -> error_code ) return <S2SV_ModEnd> error -> has_detail <S2SV_ModStart> error -> has_detail <S2SV_ModEnd> ; return error,0
633,"<S2SV_ModStart>, * ps_cur_poc <S2SV_ModEnd> ; ps_dec ->",0
634,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet ),0
635,<S2SV_ModStart> int getnum ( <S2SV_ModEnd> char * *,0
636,<S2SV_ModStart> GCSpropagate ) ; <S2SV_ModEnd> atomic ( L,0
637,<S2SV_ModStart> 0 ; else * cold = 0 ;,0
638,"<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_INFO, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } <S2SV_ModEnd> memset ( buffer <S2SV_ModStart> buffer ) ; <S2SV_ModEnd> s_write ( c",0
639,,0
640,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi,",0
641,"<S2SV_ModStart> ( ndo, ""%s"" <S2SV_ModEnd>, icp ->",0
642,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> return rc ;",0
643,"<S2SV_ModStart> Image * image = ( ImageInfo * ) NULL <S2SV_ModStart>, length, <S2SV_ModEnd> version, width <S2SV_ModStart>, length, <S2SV_ModEnd> version, width",0
644,"<S2SV_ModStart> jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> SOC <S2SV_blank> marker\\n"" <S2SV_ModEnd> ) ; }",0
645,<S2SV_ModStart> ; if (! str_modes ) return ; if (,0
646,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r,",0
647,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
648,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> ( REFERENCE_MODE ) vpx_read <S2SV_ModEnd> ( r,",0
649,"<S2SV_ModStart>! stream ) { <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; return NULL ; }",0
650,<S2SV_ModStart> nd_opt_len ) ; ND_TCHECK ( op -> nd_opt_len ) ;,0
651,<S2SV_ModStart> re_ast ) -> parent = NULL ; ( * re_ast ) ->,0
652,"<S2SV_ModStart> ) ) ; auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", <S2SV_ModEnd> key -> key <S2SV_ModStart> key -> key <S2SV_ModEnd> ) ; return",0
653,<S2SV_ModStart> ; tok -> <S2SV_ModEnd> altwarning = 1,0
654,<S2SV_ModStart> maxBitrate ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
655,<S2SV_ModStart> dpbSize ) ; if ( maxFrameNum > MAX_NUM_REF_PICS ) { return ( MEMORY_ALLOCATION_ERROR ) ; },0
656,<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_in = 0 ; <S2SV_ModStart> (! sock || addrlen_in >= OE_SSIZE_MAX <S2SV_ModStart> ( addrlen ) { <S2SV_ModStart> ) ; } },0
657,,1
658,<S2SV_ModStart> FALSE ; } if (! Stream_GetRemainingLength ( s ) ) return FALSE ;,0
659,<S2SV_ModStart> ipv6_sk ( sk ) ; struct ipv6_txoptions * opt = NULL ; struct ipv6_txoptions * opt = NULL ; struct ipv6_txoptions * opt = NULL ; struct ipv6_txoptions * opt = NULL ; struct ipv6_txoptions * opt = NULL ; struct ipv6_txoptions * opt = NULL ; struct ipv6_txoptions * opt = NULL ; struct ipv6_txoptions * opt = NULL ; struct ipv6_txoptions * opt = NULL ; struct ipv6_txoptions * opt = NULL ; struct ipv6_txoptions * opt = NULL ; struct ipv6_txoptions * opt = NULL ; struct ipv6_txoptions * opt = NULL ; struct ipv6_txoptions * opt = NULL ; struct ipv6_txoptions * opt = NULL ; struct ipv6_txoptions * opt ; opt = NULL ; opt = NULL ; opt = NULL ; opt = NULL ; opt = NULL ; opt = NULL ; opt = NULL ; opt = NULL ; opt = NULL ; opt = NULL ; opt = NULL ; opt = NULL ; opt = NULL ; opt =,0
660,"<S2SV_ModStart> ; uint32_t valign = 0 <S2SV_ModStart> hdr_size, j = 0 <S2SV_ModStart> cli_pe_hook_data pedata ; uint32_t vp = 0 <S2SV_ModStart> cli_pe_hook_data pedata ; vp = 0 <S2SV_ModStart> cli_pe_hook_data pedata ; vp = 0 <S2SV_ModStart> cli_pe_hook_data pedata ; vp = 0 <S2SV_ModStart> cli_pe_hook_data pedata ; vp = 0 <S2SV_ModStart> cli_pe_hook_data pedata ; vp = 0 <S2SV_ModStart> cli_pe_hook_data pedata ; vp = 0 <S2SV_ModStart> cli_pe_hook_data pedata ; vp = 0 <S2SV_ModStart> cli_pe_hook_data pedata ; vp = 0 <S2SV_ModStart> cli_pe_hook_data pedata ; vp = 0 <S2SV_ModStart> cli_pe_hook_data pedata ; vp = 0 <S2SV_ModStart> cli_pe_hook_data pedata ; vp = 0 <S2SV_ModStart> cli_pe_hook_data pedata ; vp = 0 <S2SV_ModStart> cli_pe_hook_data pedata ; vp = 0 <S2SV_ModStart> cli_pe_hook",0
661,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPOS | DM9000_EPOS <S2SV_ModEnd> | EPCR_ERPRR ) <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPOS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> } dm9000WriteReg ( DM9000_EPCR, DM9000_EPOS <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPDRH <S2SV_ModEnd> ) << 8",0
662,"<S2SV_ModStart> pcmk_ok ) { rc = <S2SV_ModStart> -> command ) ) ; } if ( rc == pcmk_ok ) { fprintf ( stderr, ""%s: <S2SV_blank> Opened <S2SV_blank> connection <S2SV_blank> to <S2SV_blank> %s:%d\\n"", name, name, private -> server ) ; free_xml ( hello ) ; return rc ; } <S2SV_ModEnd> } if (",0
663,"<S2SV_ModStart> = ubuf ; memset ( & address, 0, sizeof ( address ) ) ;",0
664,"<S2SV_ModStart> } ; int <S2SV_ModEnd> n, sr <S2SV_ModStart> ] ; int <S2SV_ModEnd> new_mv_mode_penalty = 256 <S2SV_ModStart>, step_param, x -> sadperbit16 <S2SV_ModEnd>, & num00 <S2SV_ModStart>, & num00 <S2SV_ModEnd> ) ; if",0
665,<S2SV_ModStart> addr ) ; if ( h -> addr == NULL ) goto error ;,0
666,<S2SV_ModStart> = ( child <S2SV_ModEnd>!= child ->,0
667,"<S2SV_ModStart> one, offset <S2SV_ModEnd> ; ssize_t count <S2SV_ModStart> ""ImproperImageHeader"" ) ; <S2SV_ModEnd> if ( (",0
668,"<S2SV_ModStart> ( b, comp <S2SV_ModEnd> ) )!=",0
669,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
670,"<S2SV_ModStart> client = user_data ; memset ( client, 0, sizeof ( client ) )",0
671,<S2SV_ModStart> * uv ; thread -> twups = thread ; <S2SV_ModStart> next ) { <S2SV_ModEnd> if (!,0
