,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
1,"<S2SV_ModStart> skb ) ; unfrag_ip6hlen = min_t ( int, unfrag_ip6hlen, skb -> len - offset ) ;",0
2,<S2SV_ModStart> writer = ( TrackWriter <S2SV_ModEnd> * ) gf_list_get,0
3,"<S2SV_ModStart> item ) { return cJSON_Get ( array, 0, item ) <S2SV_ModEnd> ; } <S2SV_null>",0
4,"<S2SV_ModStart> u64 nr, u64 <S2SV_ModEnd> nmi, struct <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",0
5,<S2SV_ModStart> EXT4_EXTENTS_FLAG ) { <S2SV_ModEnd> struct grub_ext4_extent_header * <S2SV_ModStart> leaf ) { <S2SV_ModEnd> return - 1 <S2SV_ModStart> block ) ; return fileblock - <S2SV_ModEnd> ext [ i <S2SV_ModStart> ]. len <S2SV_ModEnd> ; } } <S2SV_ModStart> 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
6,"<S2SV_ModStart> fdct16 ( const tran_low_t * in, tran_low_t * out <S2SV_ModEnd> ) { int <S2SV_ModStart> ) { int input [ 8 ] ; int step1 [ 8 ] ; int step2 [ 8 ] ; int step3 [ 8 ] ; int input [ 8 ] ; int temp1, temp2 ; input [ 0 ] = in [ 0 ] + in [ 15 ] ; input [ 1 ] = in [ 1 ] + in [ 14 ] ; input [ 2 ] = in [ 2 ] + in [ 13 ] ; input [ 3 ] = in [ 3 ] + in [ 10 ] ; input [ 4 ] = in [ 4 ] + in [ 11 ] ; input [ 5 ] = in [ 5 ] + in [ 12 ] ; input [ 6 ] = in [ 6 ] - in [ 9 ] ; input [ 7 ] = in [ 7 ] - in [ 8 ] ; step1 [ 0 ] = in [ 7 ] - in [ 8 ] ; step1 [ 1 ] = in [ 7 ] - in [ 10 ] ; step1 [ 2 ] = in [ 2 ] - in [ 11 ] ; step1 [ 3 ] = in [ 3 ] - in [ 12 ] ; step1",0
7,<S2SV_ModStart> ; if ( hlen < 0 ) hlen = 0 ; if (,0
8,"<S2SV_ModStart> void search_filter_level ( VP9_COMMON * const cm, struct loopfilter * lf, int min_filter_level, int max_filter_level, int filt_direction, YV12_BUFFER_CONFIG * sd, VP9_COMP * cpi, YV12_BUFFER_DATA * frame_to_show <S2SV_ModEnd>, int partial_frame <S2SV_ModStart> partial_frame ) { <S2SV_ModEnd> struct YV12_BUFFER_CONFIG * <S2SV_ModStart> YV12_BUFFER_CONFIG * sd = & cpi -> sd ; YV12_COMMON_DATA * const cm_data = & cm -> common_data ; YV12_COMMON_DATA * const cm_data = & cpi -> common_data ; YV12_BUFFER_DATA * const sd_data = & frame_to_show <S2SV_ModEnd> ; int best_err <S2SV_ModStart> int best_err ; YV12_BUFFER_DATA * const sd_data = & frame_to_show <S2SV_ModEnd> ; int filt_mid <S2SV_ModStart> / 4 ; YV12_BITMAP <S2SV_ModEnd> ss_err [ MAX_LOOP_FILTER <S2SV_ModStart> * filter_step ; int filt_err ; int bias ; <S2SV_ModStart> * filter_step ; <S2SV_ModEnd>",0
9,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
10,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ++ i ) vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( usehp ) vpx_write <S2SV_ModEnd> ( w,",1
11,<S2SV_ModStart> -> rxBlockSzx = COAP_CLIENT_DEFAULT_RX_BLOCK_SIZE <S2SV_ModEnd> ; else if <S2SV_ModStart> -> rxBlockSzx = COAP_CLIENT_DEFAULT_RX_BLOCK_SIZE <S2SV_ModEnd> ; else if <S2SV_ModStart> -> rxBlockSzx = COAP_CLIENT_DEFAULT_RX_BLOCK_SIZE <S2SV_ModEnd> ; else if <S2SV_ModStart> -> rxBlockSzx = COAP_CLIENT_DEFAULT_RX_BLOCK_SIZE <S2SV_ModEnd> ; else if <S2SV_ModStart> -> rxBlockSzx = COAP_CLIENT_DEFAULT_RX_BLOCK_SIZE <S2SV_ModEnd> ; else if <S2SV_ModStart> -> rxBlockSzx = COAP_CLIENT_DEFAULT_RX_BLOCK_SIZE <S2SV_ModEnd> ; else if <S2SV_ModStart> -> rxBlockSzx = COAP_CLIENT_DEFAULT_RX_BLOCK_SIZE <S2SV_ModEnd> ; else if <S2SV_ModStart> -> rxBlockSzx = COAP_CLIENT_DEFAULT_RX_BLOCK_SIZE <S2SV_ModEnd> ; else if <S2SV_ModStart> -> rxBlockSzx = COAP_CLIENT_DEFAULT_RX_BLOCK_SIZE <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> rxBlockSzx > COAP_CLIENT_MAX_BLOCK_SIZE ) request -> rxBlockSzx = COAP,0
12,"<S2SV_ModStart> ) dat ; u_int i ; for ( i = 0 ; i < 2 ; i ++ ) { if ( EXTRACT_16BITS ( ptr ) < 2 ) break ; ND_PRINT ( ( ndo, ""%04x <S2SV_blank> "", EXTRACT_16BITS ( ptr ) ) ) ; ptr ++ ; } ND_TCHECK ( * ptr ) ; ptr ++ ; ND_TCHECK ( * ptr ) ; ptr ++ ; ND_TCHECK ( * ptr ) <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> ( ndo, ""%04x"" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ptr ++ ; ND_TCHECK ( * ptr ) <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> ( l2tp_cc_direction2str, ""Direction-#%u"" <S2SV_ModEnd>, * ( <S2SV_ModStart> ) ) ; ND_TCHECK ( * ptr ) ; ptr ++ ; ND_TCHECK ( * ptr ) ; ptr ++ ; if ( length > 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; print_string ( ndo, ( const u_char * ) ptr, length - 4 <S2SV_ModEnd> ) ; }",0
13,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int construct_get_dest_keyring ( struct key * key, struct key * * dest_keyring, bool force ) { <S2SV_ModEnd> const struct cred <S2SV_ModStart> * authkey ; int ret ; <S2SV_ModStart> dest_keyring ) ; ret = key_is_negative ( dest_keyring ) ; if ( ret ) { * dest_keyring = key_get ( key ) ; if (! dest_keyring ) * dest_keyring = ERR_PTR ( - EKEYREVOKED ) ; } else { * dest_keyring = key_ref_keyring ( key_get_type ( key ) ) ; } <S2SV_ModStart> ( dest_keyring ) { * dest_keyring = ERR_PTR ( - EKEYREVOKED ) ; return ret ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
14,<S2SV_ModStart> = create_spnego_ctx ( 0,0
15,<S2SV_ModStart> int len ; # ifdef HAVE_LOCALTIME <S2SV_ModStart> t ) ; # else tm = localtime_r ( & t ) ; # endif,0
16,"<S2SV_ModStart> length ) ; if ( strlen ( password ) > 256 ) { fprintf ( stderr, ""Password <S2SV_blank> too <S2SV_blank> long\\n"" ) ; exit ( EXIT_FAILURE ) ; }",0
17,<S2SV_ModStart> e == p || e - p > HOST_NAME_MAX,0
18,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",1
19,"<S2SV_ModStart> = 0 ; if ( <S2SV_ModStart> & timeout )!= 1 ) { fprintf ( stderr, ""select() <S2SV_blank> failed <S2SV_blank> on <S2SV_blank> %s\\n"", strerror ( errno ) ) ; return false ; } <S2SV_ModEnd> return FD_ISSET (",0
20,"<S2SV_ModStart> detect_transition_to_still ( struct twopass_priv * priv <S2SV_ModEnd>, int frame_interval <S2SV_ModStart> last_decay_rate ) { struct twopass_rc * twopass = priv -> twopass <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( priv -> <S2SV_ModStart> j ; const FIRSTPASS_STATS_T <S2SV_ModEnd> * position = <S2SV_ModStart> * position = priv <S2SV_ModEnd> -> stats_in ; <S2SV_ModStart> { if (! <S2SV_ModStart>, & tmp_next_frame, priv -> stats_in <S2SV_ModStart> } reset_fpf_position ( priv <S2SV_ModEnd>, position ) <S2SV_ModStart> == still_interval ) { <S2SV_ModStart> 1 ; } }",0
21,"<S2SV_ModStart> inode ) ) { if ( io -> offset + size > i_size_read ( inode ) ) { printk ( KERN_EMERG ""%s: <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, inode -> i_ino ) ; return ret ; } <S2SV_ModStart> size ) ; }",0
22,"<S2SV_ModStart> alg ) { <S2SV_ModEnd> if (! <S2SV_ModStart> CRYPTO_ALG_NEED_FALLBACK ) ) { if (! try_module_get ( name ) ) { pr_err ( ""No <S2SV_blank> module <S2SV_blank> for <S2SV_blank> %s, <S2SV_blank> ignoring\\n"", name ) ; return ERR_PTR ( - EBUSY ) ; } <S2SV_ModStart> name ) ; }",0
23,<S2SV_ModStart> = GIT_PKT_NG ; if ( len < 3 ) goto out_err ; <S2SV_ModStart> += 3 ; len -= 3 ; <S2SV_ModStart>'<S2SV_blank>') ) || len < 1 <S2SV_ModStart> = '\\0' ; len -= 1 ; <S2SV_ModStart> + 1 ; len -= 1 ; <S2SV_ModStart> '\\n' ) ) || len < 1,0
24,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> BYTE flags ; UINT32 <S2SV_ModEnd> length ; Stream_Read_UINT32,0
25,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; if (,0
26,"<S2SV_ModStart> mntent, path, false",0
27,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io,0
28,<S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( ( size_t ) ( <S2SV_ModStart> ( size_t,0
29,"<S2SV_ModStart> ) ) ; ret &= btif_config_set_int ( bdstr, ""BLEND_MODE"", BLEND_MODE_OFF ) ;",0
30,<S2SV_ModStart> vpx_codec_enc_cfg_map_t * map ; unsigned int max_usage = 0 <S2SV_ModStart>. cfg_maps ; ( max_usage = map -> max_usage ) && <S2SV_ModStart> map -> usage > <S2SV_ModEnd> 0 ; map,0
31,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
32,"<S2SV_ModStart> void show_progress ( uint64_t frame_in, uint64_t <S2SV_ModEnd> frame_out, uint64_t",0
33,<S2SV_ModStart> ; if ( imp_dbh -> pmysql -> malloc_errors ) return Nullav ; if (,0
34,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_ETXSTH, ENC28J60_ETXSTL_SIZE <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_EWRPTL, ENC28J60_ETXSTH_SIZE <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_EWRPTH, ENC28J60_EWRPTH_SIZE <S2SV_ModEnd> ) ; enc28j60WriteBuffer <S2SV_ModStart> ( interface, ENC28J60_ETXNDH, ENC28J60_ETXNDH_SIZE <S2SV_ModEnd> ) ; enc28",0
35,<S2SV_ModStart> ; value = ast2obj_text <S2SV_ModEnd> ( o -> <S2SV_ModStart> ; value = ast2obj_text <S2SV_ModEnd> ( o -> <S2SV_ModStart> ; value = ast2obj_text <S2SV_ModEnd> ( o ->,0
36,<S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if ( * <S2SV_ModStart> ; if (,0
37,"<S2SV_ModStart> low_var_thresh, int uv_stride, int uv_width, int uv_height <S2SV_ModEnd> ) { double <S2SV_ModStart>.5 ) ; unsigned <S2SV_ModStart> int mb_rows = ( <S2SV_ModStart> y_width >> 4 ) + uv_width <S2SV_ModStart> int mb_cols = ( <S2SV_ModStart> y_height >> 4 ) + uv_height <S2SV_ModStart> ; int mbr <S2SV_ModEnd> ; ( void <S2SV_ModStart> ) flag ; memset <S2SV_ModEnd> ( limits, <S2SV_ModStart> 16 ) ; vpx_post_proc_down_and_across_mb_row <S2SV_ModEnd> ( source -> <S2SV_ModStart> 8 ) ; vpx_post_proc_down_and_across_mb_row <S2SV_ModEnd> ( source ->",0
38,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> h_hash ) ; mb2_cache_entry <S2SV_ModEnd> * ce ; <S2SV_ModStart> int error ; error = mb2_cache_entry_alloc ( ext4_mb_cache, GFP_NOFS, & ce ) ; if ( error ) return ; <S2SV_ModEnd> error = mb_cache_entry_insert <S2SV_ModStart> error ) { mb2_cache_entry_free ( ext4_mb_cache, ce ) ; <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> hash ) ; mb2_cache_entry_release ( ext4_mb_cache, <S2SV_ModEnd> ce ) ;",0
39,<S2SV_ModStart> ) ) ; * code = 200 ; * rlen = 0 ;,0
40,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> - ENOMEM ; opt = rcu_dereference_protected ( * optp, lockdep_is_held ( & ip_options_rcu_lock ) ) ; if (! opt ) return - EFAULT ; <S2SV_ModStart> ( optlen && copy_from_user ( & opt -> opt <S2SV_ModEnd>, data, <S2SV_ModStart> ) ) { rcu_dereference ( * optp ) ;",0
41,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|truncated]"" <S2SV_ModEnd> ) ) ;",0
42,"<S2SV_ModStart> ) N_ ( ""E530: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'escape\' <S2SV_blank> in <S2SV_blank> string <S2SV_blank> option"" <S2SV_ModEnd> ) ; else",0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode <S2SV_ModStart>, & new_mode, & acl ) ; if ( ret <S2SV_ModEnd> ) goto out",0
44,"<S2SV_ModStart> size_t size ; size_t cps ; <S2SV_ModStart> / 8 ; cps = cmpt -> cps_ ; <S2SV_ModStart> ( cmpt -> cps_, cps <S2SV_ModEnd>, & size",0
45,<S2SV_ModStart> dp == datalen || ( datalen == 0 && op == ASN1_OP__MATCHES_TAG ),0
46,"<S2SV_ModStart> * req, u32 <S2SV_ModEnd> * acl_len ) <S2SV_ModStart> acl_len ) { <S2SV_ModEnd> uint32_t attrlen, <S2SV_ModStart> int status ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> xdr, OP_GETATTR <S2SV_ModEnd> ) )!= <S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> recvd ) { <S2SV_ModEnd> return - EINVAL <S2SV_ModStart> attrlen ) ; <S2SV_ModEnd> } else status",0
47,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
48,<S2SV_ModStart> ) ) { if (! auth ) { return MPR_ERR_BAD_SYNTAX ; },0
49,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> addr = VPX_MALLOC_L <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; <S2SV_ModEnd> if ( addr,0
50,"<S2SV_ModStart> int res ; unsigned <S2SV_ModStart> inodes ) ; unsigned <S2SV_ModStart> long export_index_table [ SQUASHFS_LOOKUP_BLOCKS ( sBlk. s. inodes ) <S2SV_ModEnd> ] ; res <S2SV_ModStart> read_fs_bytes ( fd -> fd <S2SV_ModStart>. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ) * sizeof ( long long ), & <S2SV_ModEnd> export_index_table ) ;",0
51,<S2SV_ModStart> ; } else { <S2SV_ModStart> p1 ) ; },0
52,<S2SV_ModStart> = 0 ; int is_vp8_decoder = 0 ; int is_vp9_decoder = 0 ; <S2SV_ModStart> vp9_arg_ctrl_map ; # else # if CONFIG_VP8_ENCODER is_vp8_decoder = 1 ; # endif # if CONFIG_VP9_ENCODER is_vp9_decoder = 1 ; # endif # if CONFIG_VP10_ENCODER is_vp10_decoder = 1 ; # <S2SV_ModStart> } if ( is_vp8_decoder ) { } else if (,0
53,"<S2SV_ModStart> preverify_ok, callback_ctx, c -> opt -> option. client <S2SV_ModStart> 1 ; } <S2SV_ModEnd> return 0 ;",0
54,"<S2SV_ModStart> ; if ( crypto_memneq <S2SV_ModEnd> ( cmac,",0
55,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> const uint64_t bits_used <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
56,"<S2SV_ModStart> EOFOp 0x07 char * magick_buffer <S2SV_ModEnd> ; Image * <S2SV_ModStart> ) ) ; magick_buffer = ( char * ) malloc ( 12 ) ; <S2SV_ModStart>, 2, magick_buffer <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart>. x = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. y = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. columns = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. rows = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart> ( bytes_to_read < ( size_t ) ( <S2SV_ModStart> bytes_to_read - 2 ) <S2SV_ModStart>. pixels = ReadBlobBytes <S2SV_ModEnd> ( image ) <S2SV_ModStart>. pixels = ReadBlobBytes <S2SV_ModEnd> ( image ) <S2SV_ModStart>. pixels = ReadBlobBytes <S2SV_ModEnd> ( image ) <S2SV_ModStart>. pixels = ReadBlobBytes <S2SV_ModEnd> ( image ) <S2SV_ModStart>. pixels = ReadBlobBytes <S2SV_ModEnd> ( image ) <S2SV_ModStart>. pixels = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. pixels = ReadBlobBytes <S2SV_ModEnd> ( image ) <S2SV_ModStart>. pixels = ReadBlobBytes <S2SV_ModEnd> ( image ) <S2SV_ModStart>. pixels = ReadBlobBytes <S2SV_ModEnd> ( image ) <S2SV_ModStart>. pixels = ReadBlobBytes <S2SV_ModEnd> ( image )",0
57,"<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> altsetting [ 0 ]. desc. bNumEndpoints < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; error = - EINVAL ; goto err_free_urb ; }",1
58,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
59,"<S2SV_ModStart> * dir = ""/tmp"" <S2SV_ModEnd> ; if (",0
60,<S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; },0
61,<S2SV_ModStart> ) ) { if ( narg == NULL ) { narg = cmd ; },0
62,"<S2SV_ModStart> void vp9_setup_dst_planes ( struct vpx_encoder_state * bs, <S2SV_ModStart> mi_col ) { const <S2SV_ModStart> const buffers [ 8 <S2SV_ModEnd> ] = { <S2SV_ModStart> src -> y_buffer + bs -> y_offset <S2SV_ModStart> src -> u_buffer + bs -> u_offset <S2SV_ModStart> src -> v_buffer + bs -> v_offset <S2SV_ModStart> const int strides [ 8 <S2SV_ModEnd> ] = { <S2SV_ModStart> src -> y_stride + bs -> y_offset <S2SV_ModStart> src -> uv_stride + bs -> uv_offset <S2SV_ModStart> i ) { const <S2SV_ModStart> pd = & bs <S2SV_ModEnd> -> plane [",0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,<S2SV_ModStart> get_block = ocfs2_get_block ; else if ( iov_iter_rw ( iter ) == WRITE ) get_block = ocfs2_ocfs2_ocfs2_get_ocfs2_block,0
65,"<S2SV_ModStart> ; if ( fgetc ( f ) == '\\n' ) { if ( <S2SV_ModStart> == 2 ) { if ( strparm [ 0 ] == '\\0' ) { isstring = true ; len = strlen ( strparm ) ; newstring = ( char * ) malloc ( len ) ; strparm [ len - 1 ] = 0 ; strcpy ( newstring, strparm + 1 ) ; } else if ( strparm [ 0 ] == '0' && strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else sscanf ( strparm, ""%i"", & parm ) ; for ( i = 0 ; i < numdefaults ; i ++ ) if (! strcmp ( def, defaults [ i ]. name ) ) { if (! isstring ) * defaults [ i ]. location = parm ; else * defaults [ i ]. location = ( int ) newstring ; break ; } } } else",0
66,"<S2SV_ModStart> n ) { <S2SV_ModEnd> char * str <S2SV_ModStart> * str ; <S2SV_ModEnd> char * str <S2SV_ModStart> * str ; <S2SV_ModEnd> assert ( expr_end <S2SV_ModStart> ':' ) ; return fstring_compile_expr_ex ( expr_start, expr_end, c, n, NULL, NULL, NULL, NULL, NULL, NULL, NULL <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
67,"<S2SV_ModStart> string ) { return cJSON_GetChild ( object, string, 0 ) <S2SV_ModEnd> ; } <S2SV_null>",0
68,<S2SV_ModStart> size ) ; if ( px -> ft == NULL ) { return FALSE ; },0
69,"<S2SV_ModStart> u_char * dat, u_int len <S2SV_ModStart>, val_l ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr ) ;",0
70,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
71,<S2SV_ModStart> int i ; const <S2SV_ModStart> const buffers [ 8 <S2SV_ModEnd> ] = { <S2SV_ModStart> src -> v_buffer <S2SV_ModEnd> } ; const <S2SV_ModStart> src -> y_stride <S2SV_ModEnd> } ; for,0
72,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; for ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> msg -> msg_namelen,0
73,<S2SV_ModStart> ) ) ; if ( cpi -> mb_activity_map == NULL ) return ;,0
74,<S2SV_ModStart> user ) { struct ipmi_dev * dev = user -> dev ; <S2SV_ModStart> _ipmi_destroy_user ( user ) ; mutex_lock ( & dev -> data_mutex,0
75,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> sl = strlen,1
76,"<S2SV_ModStart> * for_ch ; <S2SV_ModEnd> REQ ( n <S2SV_ModStart> comp_for ) ; for ( ; ; ) { if ( NCH ( CHILD ( n, 0 ) ) == ASYNC ) { is_async = 1 ; break ; } for_ch = CHILD ( n, 1 + is_async ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; expression = ast_for_expr ( c, CHILD ( n, 3 + is_async ) ) ; if (! expression ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if ( NCH ( for_ch ) == 1 ) comp = comprehension ( Tuple ( t, Store, first -> lineno, first -> col_offset, c -> c_arena ), expression, NULL, is_async, c -> c_arena ) ; if (! comp ) return NULL ; if ( NCH ( n ) == ( 5 + is_async ) ) { int j, n_ifs ; asdl_seq * ifs ; n = CHILD ( n, 4 + is_async ) ;",0
77,<S2SV_ModStart> NULL ; } if ( src -> curframe < 0 ) return - EINVAL ;,0
78,"<S2SV_ModStart> * cpi, const MODE_INFO * const mi, vpx_writer * w, const MODE_INFO * const above_mi, const MODE_INFO * const left_mi ) { <S2SV_ModEnd> const VP9_COMMON * <S2SV_ModStart> * mi_8x8 = xd -> above_mi <S2SV_ModEnd> ; const MODE_INFO <S2SV_ModStart> * const above_mi <S2SV_ModEnd> ; const MODE_INFO <S2SV_ModStart> * const left_mi <S2SV_ModEnd> ; const MB_MODE_INFO <S2SV_ModStart> segment_id ) ; if ( xd -> left_available ) { if ( mi -> left_available ) { if ( xd -> left_available ) { if ( xd -> above_mi == mi ) xd -> above_mi = mi ; else xd -> left_mi = mi ; } else xd -> left_mi = NULL ; } } <S2SV_ModStart>, mi, xd -> above_mi, left_mi <S2SV_ModEnd> ) ; if <S2SV_ModStart>, bsize, xd -> left_mi,",0
79,"<S2SV_ModStart> maxn ) { int i ; <S2SV_ModStart> ""Action <S2SV_blank> overflow!!"" ) ; for ( i = 0 ; i < n ; i ++ ) { if ( actions [ i ]. ID == 0 ) { break ; } }",0
80,<S2SV_ModStart> ) ) ; ND_TCHECK ( len ) ;,0
81,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
82,<S2SV_ModStart> zArg ) { assert ( pTable -> nModuleArg >= 0 ) ; <S2SV_ModStart> * * azModuleArg ; assert ( nBytes >= sizeof ( char * ) * 2 ),0
83,"<S2SV_ModStart> j ] ; if ( j >= ( TWICE_QMF_SYNTH_CHANNELS_NUM * sizeof ( FLOAT32 ) ) ) { IXHEAACD_PRINT ( ""ixheaacd_complex_anal_filt: <S2SV_blank> j <S2SV_blank> = <S2SV_blank> %d, <S2SV_blank> k <S2SV_blank> = <S2SV_blank> %d, <S2SV_blank> k <S2SV_blank> = <S2SV_blank> %d\\n"", j, k, N ) ; return - 1 ; }",0
84,<S2SV_ModStart> -> dmin ; if ( ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { <S2SV_ModStart> p ) ; },0
85,"<S2SV_ModStart> bfq_idle_slice_timer_body ( struct bfq_sched_data * sched, struct <S2SV_ModStart> bfq_data * bfqd <S2SV_ModEnd> ) { enum <S2SV_ModStart> long flags ; struct bfq_queue * bfq = sched_data -> active ; <S2SV_ModStart> flags ) ; if (! bfq_bfqq_in_service_queue ( bfqq ) ) { spin_unlock_irqrestore ( & bfqd -> lock, flags ) ; return ; } <S2SV_ModStart> in_service_queue ) { bfq_put_async_queue ( bfq, bfqq ) ; <S2SV_ModStart> return ; } bfq_put_async_queue ( bfqd, bfqq ) ;",0
86,,1
87,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
88,"<S2SV_ModStart> diffBlock + diffBlockLength || diffPtr + y > diffBlock + diffBlockLength || extraPtr + z <S2SV_ModEnd> > extraBlock + <S2SV_ModStart> NULL ; } if ( x + y > newDataLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; }",0
89,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> np -> tclass ) ; rcu_read_unlock (,0
90,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> == VFF_TYP_BIT ) && ( count < number_pixels ) ),0
91,<S2SV_ModStart> data ) { ( void ) data ;,0
92,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
93,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
94,<S2SV_ModStart> ; if ( xd -> mbmi. mv_bias_mode == VP8_MV_BIAS_HIGH && xd -> mbmi. mv_bias_mode == VP8_MV_BIAS_LOW && xd -> mbmi. mv_bias_mode == VP8_MV_BIAS_HIGH && xd -> mbmi. mv_bias_mode == VP8_MV_BIAS_HIGH && xd -> mbmi. mv_bias_mode == VP8_MV_BIAS_HIGH && xd -> mbmi. mv_bias_mode == VP8_MV_BIAS_HIGH && xd -> mbmi. mv_bias_mode == VP8_MV_BIAS_HIGH && xd -> mbmi. mv_bias_mode == VP8_MV_BIAS_HIGH && xd -> mbmi. mv_bias_mode == VP8_MV_BIAS_HIGH && xd -> mbmi. mv_bias_mode == VP8_MV_BIAS_MODE_HIGH && xd -> mbmi. mv_bias_mode == VP8_MV_,0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
97,"<S2SV_ModStart> msicap msicap ; int rc ; rc = <S2SV_ModStart> msicap, msgnum <S2SV_ModEnd> ) ; return <S2SV_ModStart> ) ; return rc <S2SV_ModEnd> ; } <S2SV_null>",0
98,"<S2SV_ModStart> -> ptr ; if ( cmd -> flags & REDIS_CMD_DENYPASS ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> permitted <S2SV_blank> when <S2SV_blank> authenticated"" ) ; return REDIS_OK ; }",0
99,"<S2SV_ModStart> vpx_codec_err_t res ; int i ; for ( i = 0 ; i < ctx -> num_frames ; i ++ ) { if ( cfg -> g_frames [ i ]. g_w == 0 || cfg -> g_frames [ i ]. g_h == 0 ) { ERROR ( ""Invalid <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> value <S2SV_blank> for <S2SV_blank> frame <S2SV_blank> %d"", i ) ; return VPX_CODEC_ERR_INVALID_SIZE ; } } if ( <S2SV_ModEnd> ( cfg -> <S2SV_ModStart> g_h ) ) { if ( cfg -> g_lag_in_frames > 1 ) { ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; return VPX_CODEC_ERR_INVALID_SIZE ; } } if ( <S2SV_ModEnd> ( cfg -> <S2SV_ModStart> VPX_RC_ONE_PASS ) ) { ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; return VPX_CODEC_ERR_INVALID_SIZE ; } <S2SV_ModEnd> res = validate_config",0
100,<S2SV_ModStart> { cpi -> mb. <S2SV_ModStart> & cpi -> mb.,0
101,<S2SV_ModStart> info -> si_code!= SIGSEGV <S2SV_ModEnd> ) return -,0
102,<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; if ( ptr -> movie_identifier ) { <S2SV_ModStart> - 8 ; } else { tmp_strsize = ( u32 ) ptr -> size ; },0
103,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
104,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> -> state == fmode <S2SV_ModEnd> ) return ; <S2SV_ModStart> ; if ( fmode & FMODE_WRITE <S2SV_ModEnd> ) { if <S2SV_ModStart> { if ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> -> state = fmode <S2SV_ModEnd> ; } <S2SV_null>",0
105,<S2SV_ModStart> ) break ; if ( feof ( file ) ) break ;,0
106,<S2SV_ModStart> 0 ; } if ( len > SIZE_MAX - elem. in_sg [ 0 ]. iov_len ) { return 0 ; },0
107,"<S2SV_ModStart> unsigned ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ), i, ( unsigned ) JPC_QCX_GETMANT <S2SV_ModStart> i ] ) <S2SV_ModEnd> ) ; }",0
108,<S2SV_ModStart> = AV_PIX_FMT_PAL8 ; c -> video_size = c -> video_size / 8 ;,0
109,<S2SV_ModStart> ) ; } ND_TCHECK ( length ) ;,0
110,"<S2SV_ModStart> image_noffset ) { if ( noffset == - FDT_ERR_TRUNCATED || noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; }",0
111,<S2SV_ModStart> rx_kfifo_lock ) ; mutex_init ( & state -> tx_kfifo_lock ) ; <S2SV_ModStart> GFP_KERNEL ) ) { kfree ( state ) ; <S2SV_ModStart> - ENOMEM ; } <S2SV_ModStart> } else { mutex_destroy ( & state -> tx_kfifo_lock ) ;,0
112,"<S2SV_ModStart> * iface, vpx_codec_dec_config_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> = cfg ; ctx -> config. dec -> flags = flags ; <S2SV_ModStart> = VPX_CODEC_OK ; <S2SV_ModEnd> } return res",0
113,<S2SV_ModStart> ; value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1100WritePhyReg (,0
114,<S2SV_ModStart> = code ; ipc. tos = tos ;,0
115,<S2SV_ModStart> else if (! ( flags & VPX_CODEC_USE_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if (,0
116,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
117,"<S2SV_ModStart> counter ) ; if ( arg -> open_flags & NFS_O_CREAT ) xdr_set_word ( xdr, NFS_O_CREAT ) ;",0
118,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ) ; return 0 <S2SV_ModStart> break ; } return error <S2SV_ModEnd> ; } <S2SV_null>,1
119,<S2SV_ModStart> ; if ( len < 1 ) return 0 ; if (,0
120,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
121,<S2SV_ModStart> goto trunc ; ND_TCHECK_16BITS ( & lshp -> ls_length ) ; <S2SV_ModStart> ls_seq ) ; if ( lshp -> ls_length < sizeof ( struct lsa6_hdr ) ) goto trunc ;,0
122,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { ret = - EFAULT ; break ; } <S2SV_ModEnd> * obuf =",0
123,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
124,<S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ),0
125,"<S2SV_ModStart> costs, vp9_tree * <S2SV_ModStart> c ) { vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> ) ; const vpx_tree_index <S2SV_ModEnd> ii = tree",0
126,"<S2SV_ModStart> * output, tran_low_t <S2SV_ModEnd> * in0, <S2SV_ModStart> * in0, tran_low_t <S2SV_ModEnd> * in1,",0
127,"<S2SV_ModStart> c, 0, NULL",0
128,"<S2SV_ModStart> fadst16 ( const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t <S2SV_ModEnd> x0, s1 <S2SV_ModStart> int x0, x1, x2, x3, x4, x5, x6, x7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t <S2SV_ModEnd> x0 = input <S2SV_ModStart> 15 ] ; tran_high_t <S2SV_ModEnd> x1 = input <S2SV_ModStart> 0 ] ; tran_high_t <S2SV_ModEnd> x2 = input <S2SV_ModStart> 2 ] ; tran_high_t <S2SV_ModEnd> x3 = input <S2SV_ModStart> 11 ] ; tran_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 4 ] ; tran_high_t <S2SV_ModEnd> x5 = input <S2SV_ModStart> 9 ] ; tran_high_t <S2SV_ModEnd> x7 = input <S2SV_ModStart> 7 ] ; tran_high_t <S2SV_ModEnd> x8 =",0
129,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> flags |= HAS_EDSP <S2SV_ModStart> |= HAS_EDSP ; <S2SV_ModEnd> flags |= HAS_MEDIA <S2SV_ModStart> |= HAS_MEDIA ; <S2SV_ModEnd> flags |= HAS_NEON <S2SV_ModStart> flags |= HAS_NEON ; <S2SV_ModEnd> return flags &,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
131,"<S2SV_ModStart> * cpi, <S2SV_ModEnd> MODE_INFO * * <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd>, int * <S2SV_ModStart> bsize ) { <S2SV_ModEnd> const int mis <S2SV_ModStart> int bs = mi <S2SV_ModEnd> -> mbmi. <S2SV_ModStart> = num_8x8_blocks_wide_lookup [ mi <S2SV_ModEnd> -> mbmi. <S2SV_ModStart> = num_8x8_blocks_high_lookup [ mi <S2SV_ModEnd> -> mbmi. <S2SV_ModStart>, tile, mi <S2SV_ModEnd>, no_pred_segcounts, <S2SV_ModStart>, tile, mi <S2SV_ModEnd>, no_pred_segcounts, <S2SV_ModStart>, tile, mi <S2SV_ModEnd> + hbs * <S2SV_ModStart>, tile, mi <S2SV_ModEnd>, no_pred_segcounts, <S2SV_ModStart>, tile, mi <S2SV_ModEnd>, no_pred_segcounts, <S2SV_ModStart>, tile, mi <S2SV_ModEnd>, no_pred_segcounts,",0
132,<S2SV_ModStart> flags & CLIENT_CLOSE_AFTER_REPLY ) break ; if ( c -> flags & CLIENT_CLOSE_AFTER_REPLY_WITHOUT_RESPONSE,0
133,<S2SV_ModStart> ; get_blocks_flags = EXT4_GET_BLOCKS_READ | <S2SV_ModStart> get_blocks_flags |= EXT4_GET_BLOCKS_DELALLOC_RESERVE | EXT4_GET_BLOCKS_RESERVE_NO_RESERVE,0
134,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart>, handle, hints, <S2SV_ModStart> & retval, <S2SV_ModEnd> p -> ai_flags <S2SV_ModStart> p -> ai_flags <S2SV_ModEnd>, & p <S2SV_ModStart> p -> ai_family <S2SV_ModEnd>, & p <S2SV_ModStart> p -> ai_socktype <S2SV_ModEnd>, p -> <S2SV_ModStart>, NULL, <S2SV_ModEnd> p -> ai_addrlen <S2SV_ModStart> p -> ai_addrlen <S2SV_ModEnd>, NULL ) <S2SV_ModStart> } if (! p ) { ret = OE_EAI_MEMORY ; goto done ; } if ( <S2SV_ModStart> ) ; } if ( p -> ai_family == AF_INET ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } else { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; }",0
135,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
136,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
137,"<S2SV_ModStart> * indx, u8 <S2SV_ModEnd> size, void <S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
138,"<S2SV_ModStart> asdl_seq * body, asdl_seq * type_decl <S2SV_ModStart> = body ; p -> v. Module. type_decl = type_decl ;",0
139,"<S2SV_ModStart>, int64_t ts_end <S2SV_ModEnd> ) { struct <S2SV_ModStart> >> 4 ; <S2SV_ModEnd> if ( ctx <S2SV_ModStart> write_idx ) ; <S2SV_ModEnd> buf -> ts_start",0
140,"<S2SV_ModStart> method == LPF_PICK_FROM_Q && cpi -> oxcf. q_index!= - 1 <S2SV_ModStart> int q = cpi -> oxcf. q_index <S2SV_ModEnd> ; int filt_guess <S2SV_ModStart> int filt_guess = ROUND_POWER_OF_TWO_LONG <S2SV_ModEnd> ( q * <S2SV_ModStart> + 1015158, 16 <S2SV_ModEnd> ) ; if",0
141,"<S2SV_ModStart> BTA_DM_DISABLE_EVT : { if ( p_data -> enable. status == BT_STATE_DETECTED ) { BTIF_TRACE_ERROR ( ""BT_DISABLE_EVT <S2SV_blank> is <S2SV_blank> not <S2SV_blank> enabled"" ) ; break ; }",0
142,"<S2SV_ModStart> int a = getint <S2SV_ModEnd> ( fmt,",0
143,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
144,"<S2SV_ModStart> vpx_codec_err_t res ; vpx_alg_priv_t * priv = NULL ; <S2SV_ModStart> data_sz ) ) { <S2SV_ModStart> = VPX_CODEC_INVALID_PARAM ; } <S2SV_ModStart> ; else { priv = ctx -> priv -> alg_priv ; <S2SV_ModStart>. decode ( <S2SV_ModEnd> priv, data",0
145,"<S2SV_ModStart> inode * inode, struct buffer_head * * directory_bh <S2SV_ModStart> inode ) ; * directory_bh = NULL ; <S2SV_ModStart> ; if ( * directory_bh ) { if ( <S2SV_ModStart> ) ; } }",0
146,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> ) ; } printf ( ""color <S2SV_blank> set <S2SV_blank> to <S2SV_blank> %f\\n"", outputbuffer [ 0 ] ) ;",0
147,<S2SV_ModStart> self ) { if ( self -> dict ),0
148,<S2SV_ModStart> ( ) ; if (! a ) return 0 ; <S2SV_ModStart> i ) { if (! ( <S2SV_ModStart> ] ) ; <S2SV_ModEnd> suffix_object ( p,0
149,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; Py_ssize_t i ; if ( _PyObject_HasAttrId ( obj, & PyId_type_ignores ) ) { int res <S2SV_ModStart> ++ ) { asdl_seq * type_ignores ; asdl_seq * body ; asdl_seq * type_ignores_tmp ; type_ignores = _PyObject_GetAttrId ( obj, & PyId_type_ignores ) ; if ( type_ignores_tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } type_ignores = _PyObject_GetAttrId ( obj, & PyId_type_ignores ) ; if ( type_ignores == NULL ) { PyErr_SetString ( PyExc_RuntimeError, ""Module <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> changed <S2SV_blank> size <S2SV_blank> during <S2SV_blank> iteration"" ) ; goto failed ; } body = _Ta3_asdl_seq_new ( len, arena ) ; if ( body == NULL ) goto",0
150,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
151,"<S2SV_ModStart> ; if ( msg_sys -> msg_name == NULL ) { err = - EFAULT ; goto out_freeiov ; } if ( <S2SV_ModStart> VERIFY_WRITE ) ; if ( err < 0 ) goto out_freeiov ; <S2SV_ModStart> -> msg_control ; if ( msg_sys -> msg_name ) { memcpy ( & addr, uaddr, sizeof ( addr ) ) ; } else { memcpy ( & addr, uaddr, sizeof ( addr ) ) ; }",0
152,<S2SV_ModStart> buffer_head * dibh <S2SV_ModEnd> ; u64 bn <S2SV_ModStart> unsigned ptrs_per_blk ; <S2SV_ModEnd> int eob = <S2SV_ModStart> unsigned end_of_metadata = 0 <S2SV_ModEnd> ; int eob <S2SV_ModStart> height - 1 <S2SV_ModEnd> ; enum alloc_state <S2SV_ModStart> ; if (! dibh ) return - EIO ; if (,0
153,"<S2SV_ModStart>, vpx_codec_iface_name ( stream <S2SV_ModEnd> -> codec -> <S2SV_ModStart> -> codec -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> -> filename, stream <S2SV_ModEnd> -> use_i420? <S2SV_ModStart> ; SHOW ( g_max_frame_size ) ; SHOW (",0
154,<S2SV_ModStart> ) ) { if ( ctxt -> ctxtFlags & XSLT_PROCESS_NON_DEFAULT ) { <S2SV_ModStart> ) ) ; },0
155,"<S2SV_ModStart> 0 ) { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } } else { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } } free ( fname ) ; } else { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } } free ( fname ) ; } else { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp",0
156,<S2SV_ModStart> msix_tab_size ) { <S2SV_ModEnd> bzero ( msixcap,1
157,<S2SV_ModStart> ; if ( re ) { if ( <S2SV_ModStart> ) ) ; },0
158,"<S2SV_ModStart> case OFreshOID : { value * p = Field ( ( value ) dest, 1 ) ; if ( p == NULL ) { caml_set_oo_id ( ( value ) dest ) ; return ; } <S2SV_ModStart> ( Int_val ( p <S2SV_ModEnd> ) >= 0 <S2SV_ModStart> >= 0 ) { <S2SV_ModStart> dest ) ; } }",0
159,"<S2SV_ModStart> = FALSE ; if ( ( interface -> flags & NETIF_FLAG_TX_EVENT ) == 0 ) { <S2SV_ModStart> 0 ) ; } <S2SV_ModStart> 0 ) { <S2SV_ModEnd> interface -> nicEvent <S2SV_ModStart> ) ; } ier = ksz8851ReadReg ( interface, KSZ8851_IER ) ; if ( ( ier & KSZ8851_IER_LCIE )!= 0 ) { ier |= KSZ8851_IER_LCIE ; } <S2SV_ModStart> 0 ) { <S2SV_ModEnd> interface -> nicEvent <S2SV_ModStart> ) ; } isr = ksz8851ReadReg ( interface, KSZ8851_ISR ) ; if ( ( isr & ISR_TXIS )!= 0 ) { ier |= KSZ8851_IER_TXIS ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } } if ( ( isr & ISR_RXIS )!= 0 ) { ier |= KSZ",0
160,"<S2SV_ModStart> void encode_quantization ( VP9_OUTPUT * out <S2SV_ModEnd>, struct vp9_write_bit_buffer <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm -> base_qindex <S2SV_ModEnd> ) ; write_delta_q",0
161,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> p_buf, msglen )",1
162,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> PEER_KEY_set1_EC ( peerec ),0
163,"<S2SV_ModStart> ( ) ; if ( strlen ( t1_buf_array ) + strlen ( t1_line_array ) + 1 > MAX_BUF_LEN ) { t1_log_error ( ""t1_check_unusual_charstring"" ) ; return ; }",0
164,"<S2SV_ModStart> int mi_col, int subsize, int partition_idx <S2SV_ModEnd> ) { MACROBLOCKD <S2SV_ModStart> int bsl = b_width_log2_subsize ( partition_idx ) ; int <S2SV_ModEnd> hbs = ( <S2SV_ModStart> / 4 ; if ( bsize == 0 ) { bsize = BLOCK_8X8 ; } <S2SV_ModStart> [ subsize ] <S2SV_ModEnd> ; if ( <S2SV_ModStart> case PARTITION_NONE : if ( partition_idx == 0 ) { <S2SV_ModStart> mi_col ) ; } else { * xd -> mi [ 0 ] = get_block_context ( x, subsize ) -> mic ; } <S2SV_ModStart> case PARTITION_VERT : if ( partition_idx == 0 ) { <S2SV_ModStart> mi_col ) ; } else { * xd -> mi [ 0 ] = get_block_context ( x, subsize ) -> mic ; } <S2SV_ModStart> case PARTITION_HORZ : if ( partition_idx == 0 ) { <S2SV_ModStart> mi_col ) ; } else { * xd -> mi [ 0 ] = get_block_context ( x, subsize ) -> mic ; }",0
165,"<S2SV_ModStart> key_ref ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) { ret = - ENOKEY ; goto error2 ; }",1
166,<S2SV_ModStart> ; if ( 0 == ( ps_dec -> u1_first_slice_in_pic || ps_dec -> u1_first_slice_in_pic ) ) { if ( <S2SV_ModStart> ) ; } },0
167,<S2SV_ModStart> var_off ) ; if (! src_known &&! dst_known ) return - EINVAL ; <S2SV_ModStart> var_off ) ; if (! src_known &&! dst_known ) return - EINVAL ;,0
168,<S2SV_ModStart> cfile ) ; if (! file_is_dir ( filp ) ) { rc = - EISDIR ; goto lookup_out ; },0
169,<S2SV_ModStart> -> opt_fcs_opt ; treq -> opt_fcs_ok =!! opt -> fcs_ok ;,0
170,"<S2SV_ModStart> svc_ctx ) { uint32_t number_of_frames = 0, number_of_keyframes = 0, encode_frame_count = 0 <S2SV_ModEnd> ; SvcInternal * <S2SV_ModStart> const si = get_svc_internal_internal ( svc_ctx ) ; if ( si == NULL ) return NULL ; svc_log_reset ( svc_ctx ) ; encode_frame_count = si -> encode_frame_count ; if ( encode_frame_count <= 0 ) return vpx_svc_get_message ( svc_ctx ) ; svc_log ( svc_ctx, SVC_LOG_INFO, ""\\n"" ) ; number_of_keyframes = encode_frame_count / si -> kf_dist + 1 ; for ( i = 0 ; i < si -> layers ; ++ i ) { if ( svc_ctx -> encoding_mode == ALT_INTER_LAYER_PREDICTION_IP && ( i == 1 || i == 3 ) ) { number_of_frames -= number_of_keyframes ; } svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank>",0
171,<S2SV_ModStart> = new_cols ; screen -> state -> pos = * delta ; <S2SV_ModStart> = new_cols ; <S2SV_ModEnd> return 0 ;,0
172,"<S2SV_ModStart> n ) { <S2SV_ModEnd> char * literal_start <S2SV_ModStart> * str ; char * literal_end ; int in_named_escape = 0 ; int result = 0 ; for ( ; * str < end ; ( * str ) ++ ) { char ch = * * str ; if (! in_named_escape && ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 1 ; } else if ( in_named_escape && ch == '}' ) { in_named_escape = 0 ; } else if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } if ( ch == '{' ) { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; return - 1 ; } } if ( ch == '}' ) { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is",0
173,"<S2SV_ModStart> ( pd, g_settings_dump_dir_filename <S2SV_ModEnd> ) ; char",0
174,<S2SV_ModStart> ; if ( ( x + w ) > ( ptr -> width ) || ( x + w ) > ( ptr -> height ) || ( y + h ) > ( ptr -> height ) || ( y + h ) > ( ptr -> height ) ) { if ( x + w > ( ptr -> width ) || ( y + h > ( ptr -> height ) ) ) { if ( x + w > ( ptr -> width ) ) { if ( x + h > ( ptr -> width ) ) { if ( x + h > ( ptr -> width ) ) { if ( x + h > ( ptr -> width ) ) { if ( y + h > ( ptr -> height ) ) { if ( y + h > ( ptr -> height ) ) { if ( y + h > ( ptr -> height ) ) { if ( y + h > ( ptr -> height ) ) { if ( y + h > ( ptr -> height ) ) { if ( y + h > ( ptr -> height ) ) { if ( y + h > ( ptr -> height ) ) { if ( y + h > ( ptr -> height ) ) { if ( y + h > ( ptr -> height ) ) { if ( y + h > (,0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""Invalid <S2SV_blank> length <S2SV_blank> %u"", length ) ) ; return ; }",0
176,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mv_stride <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if",0
177,"<S2SV_ModStart> * cpi, TileDataEnc * tile_data <S2SV_ModEnd>, int mi_row <S2SV_ModStart> int mi_col ; MODE_INFO * * mi_8x8 = NULL ; MODE_INFO * * prev_mi_8x8 = NULL ; BLOCK_SIZE bsize ; <S2SV_ModStart> int mi_col ; memset ( xd -> left_context, 0, sizeof ( xd -> left_context ) ) ; memset ( xd -> left_seg_context <S2SV_ModEnd>, 0, <S2SV_ModStart> mi_col ; MODE_INFO <S2SV_ModEnd> * * mi_8x8 <S2SV_ModStart> + mi_col ; memset ( <S2SV_ModEnd> mi_8x8 = cm <S2SV_ModStart> + idx_str ; <S2SV_ModEnd> prev_mi_8x8 = cm <S2SV_ModStart> cm -> prev_mi_grid_visible <S2SV_ModEnd> ; cpi -> <S2SV_ModStart> = UINT_MAX ; <S2SV_ModEnd> switch ( cpi <S2SV_ModStart> ( cpi, tile_data, mi_row, mi_col, & mi_8x8, & prev_mi_8x8, & bsize <S2SV_ModEnd> ) ; nonrd_use_partition <S2SV_ModStart> ( cpi, tile_data, mi_row, mi_col, BLOCK_64X64, & dummy_rate, & dummy_dist, cm ->",0
178,"<S2SV_ModStart> u_int8_t state ; struct nf_conn * conn = nf_ct_protonum ( ct ) ; <S2SV_ModStart>, & dh ) ; if (! conn ) return false ; nf_conn_update_pmt ( conn",0
179,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * opt, <S2SV_ModStart> * opt, u32 <S2SV_ModEnd> optlen ) { <S2SV_ModStart> & 3 ) rcu_assign_pointer ( <S2SV_ModStart> __data [ optlen <S2SV_ModEnd> ] = IPOPT_END <S2SV_ModStart> = IPOPT_END ; rcu_assign_pointer ( <S2SV_ModStart> -> optlen = optlen ; if ( opt -> optlen > IP_OPT_MAX ) return - EINVAL <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( optlen && __ip_options_compile <S2SV_ModEnd> ( net, <S2SV_ModStart>, opt, optlen <S2SV_ModEnd> ) ) {",0
180,"<S2SV_ModStart> ; if ( strcmp ( connection, ""Upgrade"" ) == 0 <S2SV_ModEnd> ) goto error",0
181,"<S2SV_ModStart> nif = 0 ; struct pcap_sockaddr * addr <S2SV_ModStart> 0 ; } addr = d -> addresses ; <S2SV_ModStart> -> description ) { if ( strlen ( d -> description ) > RPCAP_NETBUF_SIZE - 1 ) { rpcapd_log ( LOGPRIO_ERROR, ""No <S2SV_blank> interfaces <S2SV_blank> found! <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> libpcap/WinPcap <S2SV_blank> is <S2SV_blank> properly <S2SV_blank> installed"" "" <S2SV_blank> and <S2SV_blank> you <S2SV_blank> have <S2SV_blank> the <S2SV_blank> right <S2SV_blank> to <S2SV_blank> access <S2SV_blank> to <S2SV_blank> the <S2SV_blank> remote <S2SV_blank> device."" ) ; return - 1 ; } <S2SV_ModStart> -> name ) { if ( strlen ( d -> name ) > RPCAP_NETBUF_SIZE - 1 ) { rpcapd_log ( LOGPRIO_ERROR, ""No <S2SV_blank> name <S2SV_blank> found! <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> libpcap/WinPcap <S2SV_blank> is <S2SV_blank> properly <S2SV_blank> installed"" "" <S2SV_blank> and <S2SV_blank> you <S2SV_blank> have <S2SV_blank> the <S2SV_blank> right <S2SV_blank> to <S2SV_blank> access <S2SV_blank> to <S2SV_blank> the <S2SV_blank> remote <S2SV_blank> device."" ) ; return - 1 ; } <S2SV_ModStart> name ) ; } <S2SV_ModStart> struct rpcap_findalldevs_if ) ; if ( address -> addr. sa_family == AF_INET ) { if ( sock_bufferize (",0
182,"<S2SV_ModStart>, client_uid, DUMP_DIR_MODE_DEFAULT <S2SV_ModEnd> ) ; if",0
183,<S2SV_ModStart> ; x += 4 <S2SV_ModEnd> ) { index,1
184,<S2SV_ModStart> a ) { const BN_ULONG * t1 = a ; const BN_ULONG * <S2SV_ModEnd> t2 = a,0
185,<S2SV_ModStart> ) ; } if ( image -> format == ImageFormatBMP ) { image -> format = ImageFormatBMP ; },0
186,"<S2SV_ModStart> ; if ( in_cksum_vector <S2SV_ModEnd> ( ndo, <S2SV_ModStart> ; if ( in_cksum_vector <S2SV_ModEnd> ( ndo,",0
187,"<S2SV_ModStart>! ptrace_has_cap ( task_cred ( task ) <S2SV_ModEnd> -> user_ns,",0
188,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
189,<S2SV_ModStart> ; if ( 0 == payload_bits_remaining ) { ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; } else if (,0
190,<S2SV_ModStart> ; sde -> sdma_descq_cnt = 0 ; sde ->,0
191,"<S2SV_ModStart>, int rep_quick, my_bool * is_big_endian <S2SV_ModStart> ) ) ; if (! is_big_endian ) { * is_big_endian = 1 ; }",0
192,<S2SV_ModStart> } pairs = pallocarray <S2SV_ModEnd> ( pcount *,0
193,"<S2SV_ModStart> val ) ; if (! <S2SV_ModStart>, val ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> invalid <S2SV_blank> variable"", r -> name )",0
194,"<S2SV_ModStart> ) ) { if ( 0 == strncmp ( v, ""Connection"", 5 ) ) { return bad_request ( c, 400, __LINE__ ) ; }",0
195,"<S2SV_ModStart> vp9_fht16x16_c ( const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> 256 ] ; tran_low_t <S2SV_ModEnd> * outptr = <S2SV_ModStart> & out [ 16 <S2SV_ModEnd> ] ; int",0
196,"<S2SV_ModStart> ; if (! flatpak_check_export_executable ( new_data, new_data_len, cancellable, error ) ) goto out ; if (",0
197,"<S2SV_ModStart> '\\0' ) ; size_t len = <S2SV_ModEnd> strlen ( filename <S2SV_ModStart> ) + 5 ; char * temp_filename = osi_calloc ( len <S2SV_ModStart> ; if ( temp_filename == NULL <S2SV_ModEnd> ) { LOG_ERROR <S2SV_ModStart> false ; } memset ( temp_filename, 0, len ) ; strncpy <S2SV_ModEnd> ( temp_filename, <S2SV_ModStart> section -> name, len ) ; temp_filename [ len - 1 ] = 0 <S2SV_ModEnd> ; FILE * <S2SV_ModStart> sections ) ) { <S2SV_ModStart> fp ) ; }",0
198,<S2SV_ModStart> case VTP_VLAN_INFO : if ( len < length ) goto trunc ; <S2SV_ModStart> case VTP_VLAN_INFO_EXT : if ( len < length ) goto trunc ;,0
199,"<S2SV_ModStart>, target, ctxt -> lineNo <S2SV_ModEnd> ) ; ctxt",0
200,"<S2SV_ModStart> ( ) ; char * _header = _getHeader ( ) ; <S2SV_ModStart> ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %zu\\r\\n"" <S2SV_ModEnd> ""%s"" ""\\r\\n"" ""%s"" <S2SV_ModStart> ""%s"" ""\\r\\n"" ""%s"", _header? _header : request, _length <S2SV_ModEnd>, _auth?",0
201,"<S2SV_ModStart> ) ; } if ( copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> ( src, dest, 0 <S2SV_ModEnd> ) < 0 <S2SV_ModStart> ""chown"" ) ; <S2SV_ModEnd> unlink ( src",0
202,<S2SV_ModStart>!= BFA_STATUS_OK ) { kfree ( fcstats ) ; <S2SV_ModStart> return NULL ; },1
203,"<S2SV_ModStart> -> x = clampf ( 1.0f, <S2SV_ModEnd> value -> x <S2SV_ModStart> -> x ), 0.0f <S2SV_ModStart> -> y = clampf ( 1.0f, <S2SV_ModEnd> value -> y <S2SV_ModStart> -> y ), 0.0f <S2SV_ModStart> -> z = clampf ( 1.0f, <S2SV_ModEnd> value -> z <S2SV_ModStart> -> z = 0.0f <S2SV_ModEnd> ; } <S2SV_null>",0
204,<S2SV_ModStart> ; rec -> sasl_username_type = IRC_SASL_USERNAME_TYPE_UNKNOWN ; rec -> sasl_username_default = IRC_SASL_USERNAME_DEFAULT ; rec -> sasl_password_type = IRC_SASL_PASSWORD_TYPE_UNKNOWN ; rec -> sasl_password <S2SV_ModEnd> = src -> <S2SV_ModStart> = src -> sasl_password ; rec -> sasl_password = g_strdup ( src -> sasl_password ) <S2SV_ModEnd> ; * dest,0
205,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
206,"<S2SV_ModStart> o, datao ; size_t sz = 0 <S2SV_ModStart> 12 ) { if ( sz > buf_size ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; }",0
207,"<S2SV_ModStart> ; if (! ( info -> mode & O_CREAT ) ) { if ( <S2SV_ModStart> ) ) ; } else { if ( ( info -> mode & O_TRUNC ) == O_WRONLY ) { my_errno = mi_fchown ( info, filename, 0 ) ; if ( my_errno!= my_errno ) { my_errno = mi_fchown ( info, filename, 0 ) ; if ( my_errno!= my_errno ) { my_errno = mi_errno ; my_errno = mi_fchown ( info, filename, 0 ) ; } } } }",0
208,"<S2SV_ModStart> olen ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> hex ; CURLcode res ; if (! string ) return NULL ; if (! olen ) * olen = 0 <S2SV_ModEnd> ; while ( <S2SV_ModStart> hex ) ; if (! <S2SV_ModEnd> Curl_convert_from_network ( handle <S2SV_ModStart>, 1 ) <S2SV_ModEnd> ) { free <S2SV_ModStart> ( olen ) { if ( strindex > ( int ) strlen ( ns ) ) <S2SV_ModStart> = strindex ; }",0
209,<S2SV_ModStart> 4 ) ; int i = 0 ; <S2SV_ModStart> RAnalOp next_op ; if ( len < op -> size ) { r_strbuf_fini ( & next_op. esil ) ; return ; } <S2SV_ModStart> cpu ) ; for ( i = 0 ; i < next_op. size ; i ++ ) { if ( next_op. esil [ i ]. esil == NULL ) { r_strbuf_fini ( & next_op. esil [ i ]. esil ) ; return ; } },0
210,<S2SV_ModStart> ; def -> <S2SV_ModEnd> session_setup = usm_session_init,0
211,<S2SV_ModStart> NULL ; return <S2SV_ModEnd> match ( prog,0
212,<S2SV_ModStart> idx ] ; <S2SV_ModEnd> switch ( action <S2SV_ModStart> ) ; } <S2SV_ModEnd> return SNMP_ERR_NOERROR ;,0
213,<S2SV_ModStart> ; } } if ( pixels < ( ( ssize_t ) number_pixels ) ) return ( - 1 ) ;,0
214,<S2SV_ModStart> timer ) ; spin_lock_irq ( & timer -> lock ) ; <S2SV_ModStart> open_list ) { <S2SV_ModEnd> list_move_tail ( & <S2SV_ModStart> = NULL ; list_del_init ( & slave -> ack_list ) ; } spin_unlock ( & timer -> lock ) ; <S2SV_ModEnd> } mutex_unlock ( <S2SV_ModStart> register_mutex ) ; return 0 ; out : spin_lock_irq ( & timer -> lock ) ; <S2SV_ModStart> = NULL ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
215,<S2SV_ModStart> -> u1_dpb_commands_read ) { <S2SV_ModStart> ps_dec ) ; if ( ps_dec -> u4_bitoffset < 0 ) return ERROR_INV_SLICE_HDR_T ; },0
216,"<S2SV_ModStart> decode ) { uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > info -> rasterSize || widthOverflow > 0 || heightOverflow > 0 ) { void * tmpRasterBits = reallocarray ( info -> rasterBits, newRasterSize ) ; <S2SV_ModStart> -> originalHeight ; <S2SV_ModEnd> if ( newRasterSize <S2SV_ModStart> 0 ) { <S2SV_ModEnd> uint_fast32_t newRasterIndex = <S2SV_ModStart> 0 ) { free ( tmpRasterBits ) ; <S2SV_ModStart> 0 ) { free ( tmpRasterBits ) ; <S2SV_ModStart> 0 ) { free ( tmpRasterBits ) ; <S2SV_ModStart> 0 ) { free ( tmpRasterBits ) ; <S2SV_ModStart> 0 ) { free ( tmpRasterBits ) ; <S2SV_ModStart> 0 ) { free ( tmpRasterBits ) ; <S2SV_ModStart> 0 ) { free ( tmpRasterBits ) ; <S2SV_ModStart> 0 ) { free ( tmpRasterBits ) ; <S2SV_ModStart> 0 ) { free ( tmpRasterBits ) ; <S2SV_ModStart> 0 ) { free ( tmpRasterBits ) ; <S2SV_ModStart> 0 ) { free ( tmpRasterBits ) ; <S2SV_ModStart> 0 ) { free ( tmpRasterBits ) ; free ( tmpRasterBits ) ;",0
217,<S2SV_ModStart> validator -> user. buf,0
218,<S2SV_ModStart> bus ] ; if ( bi == NULL ) return <S2SV_ModEnd> ; si =,0
219,"<S2SV_ModStart>, timeo ) <S2SV_ModEnd> ; if (",1
220,<S2SV_ModStart> += 9 ; * s && <S2SV_ModStart> * t && * t &&,0
221,"<S2SV_ModStart>. active_set ; if ( uipc_main. read_set == UINT_MAX ) { BTIF_TRACE_EVENT ( ""UIPC <S2SV_blank> READ <S2SV_blank> THREAD <S2SV_blank> EXITING"" ) ; uipc_main_cleanup ( ) ; uipc_main. tid = 0 ; BTIF_TRACE_EVENT ( ""UIPC <S2SV_blank> READ <S2SV_blank> THREAD <S2SV_blank> DONE"" ) ; break ; }",0
222,"<S2SV_ModStart> msixcap msixcap ; if <S2SV_ModEnd> ( msgnum >= <S2SV_ModStart> msix <= MAX_MSIX_TABLE_ENTRIES ) { pr_err ( ""%s: <S2SV_blank> too <S2SV_blank> many <S2SV_blank> msix <S2SV_blank> table <S2SV_blank> entries <S2SV_blank> (%d)\\n"", __func__, msgnum ) ; return - EINVAL ; } <S2SV_ModEnd> assert ( barnum",0
223,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> max ) { return vpx_rb_read_literal <S2SV_ModEnd> ( rb,",0
224,<S2SV_ModStart> == NULL ) { retval = KRB5KDC_ERR_INVALID_DATA ; <S2SV_ModStart> goto cleanup ; },0
225,<S2SV_ModStart> <S2SV_null> <S2SV_null> static MV_REFERENCE_FRAME <S2SV_ModEnd> select_tx_mode ( const <S2SV_ModStart> cpi ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; <S2SV_ModStart> lossless ) { frame_type = get_frame_type ( cpi ) ; <S2SV_ModStart> else if ( frame_type == VP9_FRAME_4X4 ) { return cpi -> common. tx_mode ; } else if ( <S2SV_ModStart> else if ( frame_type == VP9_FRAME_8X8 ) { return cpi -> common. tx_mode ; } else if ( <S2SV_ModStart> else { return cpi -> common. tx_mode ; } } return frame_type ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
226,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> im -> gdes <S2SV_ModStart> ]. cf == CF_AVERAGE ) { magfact = mag_calc ( im -> gdes [ i ]. data [ ii ], im -> gdes [ i ]. step ) ; } else if ( im -> gdes [ i ]. cf <S2SV_ModStart> ]. cf == CF_AVERAGE ) { magfact = mag_calc ( im -> gdes [ i ]. data [ ii ], im -> gdes [ i ]. step ) ; } else if ( im -> gdes [ i ]. cf <S2SV_ModStart> ]. cf == CF_AVERAGE ) { magfact = mag_calc ( im -> gdes [ i ]. data [ ii ], im -> gdes [ i ]. step ) ; } else { magfact = mag_calc ( im -> gdes [ i ]. data [ ii ], im -> gdes [ i ]. step ) ; } <S2SV_ModEnd> } break ;",0
227,<S2SV_ModStart> buf1 -> size > <S2SV_ModEnd> buf2 -> size,0
228,<S2SV_ModStart> ) + size ; if ( unlikely (! sz ) ) return NULL,0
229,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,1
230,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
231,"<S2SV_ModStart> ; r = safe_set_nonblock ( & b -> flags ) ; if ( r < 0 ) { log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> non-blocking <S2SV_blank> bit <S2SV_blank> mask: <S2SV_blank> %m"" ) ; goto fail ; } r =",0
232,<S2SV_ModStart> ( ) ; errors += test_curl_off_t_formatting ( ) ; errors += test_curl_off_t_formatting_with_newline ( ) ;,0
233,<S2SV_ModStart> -> lun ) sas_eh_finish_cmd <S2SV_ModEnd> ( cmd ),1
234,"<S2SV_ModStart>, end_col_offset ; bool is_func_body = false ; <S2SV_ModStart> 2 ; } is_func_body = TYPE ( CHILD ( n, name_i + 3 ) ) == FUNCTION_TYPE_BODY ; <S2SV_ModStart> ( is_async ) { if ( TYPE ( CHILD ( n, name_i + 4 ) ) == FUNCTION_TYPE_BODY ) is_func_body = true ; <S2SV_ModStart>, returns, is_func_body, <S2SV_ModStart> c_arena ) ; }",0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,<S2SV_ModStart> ) break ; if ( Rec. RecordLength > WPGRecord. RecordLength ) break ;,0
237,,1
238,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
239,"<S2SV_ModStart> case SEEK_SET : psf_log_printf ( psf, ""header_seek(): <S2SV_blank> position <S2SV_blank> %d\\n"", position ) ; <S2SV_ModStart> psf -> header. size <S2SV_ModStart> psf -> header. size <S2SV_ModStart> psf -> header. size <S2SV_ModStart> psf -> header. size <S2SV_ModStart> psf -> header. size <S2SV_ModStart> psf -> header. size <S2SV_ModStart> psf -> header. size <S2SV_ModStart> psf -> header. size <S2SV_ModStart> psf -> header. size <S2SV_ModStart> psf -> header. size <S2SV_ModStart> psf -> header. size <S2SV_ModStart> psf -> header. size <S2SV_ModStart> psf -> header. size <S2SV_ModStart> psf -> header. size <S2SV_ModStart> psf -> header. size <S2SV_ModStart> psf -> header. size <S2SV_ModStart> psf -> header. size <S2SV_ModStart> psf -> header. size <S2SV_ModStart> psf -> header. size <S2SV_ModStart> psf -> header. size <S2SV_ModStart> psf -> header. size <S2SV_ModStart> psf -> header. size <S2SV_ModStart> psf -> header. size <S2SV_ModStart> psf -> header. size <S2SV_ModStart> psf -> header. size <S2SV_ModStart> psf -> header. size <S2SV_ModStart> psf -> header. size <S2SV_ModStart> psf -> header. size <S2SV_ModStart> psf -> header. size <S2SV_ModStart> psf -> header. size <S2SV_ModStart> psf -> header. size <S2SV_ModStart> psf -> header.",0
240,<S2SV_ModStart> u4_ofst ) ; ps_cabac -> u4_ofst = 0 ;,0
241,"<S2SV_ModStart> ; } } if ( off < ctx -> size ) { ret = md_analyze_fence_comment ( ctx, CH ( off ), p_end, line ) ; if ( ret ) return ret ; }",0
242,"<S2SV_ModStart> perf_event_context * ctx <S2SV_ModEnd> ; struct task_struct <S2SV_ModStart> task_struct * task ; ctx = perf_event_ctx_lock ( event ) ; task = perf_event_ctx_get_task ( event ) ; perf_event_ctx_put ( ctx ) ; perf_event_ctx_unlock ( event ) <S2SV_ModStart> event ) ; perf_event_ctx_set_state ( event, PERF_EVENT_STATE_OFF ) <S2SV_ModEnd> ; } <S2SV_null>",0
243,<S2SV_ModStart> -> post_proc_flag = <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> noise_level ; # if CONFIG_VP9_DEBUG_VISUALIZER flags -> display_ref_frame_flag = ctx -> dbg_color_ref_frame_flag ; flags -> display_mb_modes_flag = ctx -> dbg_color_mb_modes_flag ; flags -> display_b_modes_flag = ctx -> dbg_color_b_modes_flag ; flags -> display_mv_flag = ctx -> dbg_display_mv_flag ; # else <S2SV_ModEnd> flags -> display_ref_frame_flag,0
244,"<S2SV_ModStart> = 0 ; if ( msg_len < sizeof ( struct olsr_msg4 ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> too <S2SV_blank> short <S2SV_blank> msg_len <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6, msg_len ) ) ; goto trunc ; } <S2SV_ModStart> ) ) ; if ( msg_len < sizeof ( struct olsr_msg6 ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> too <S2SV_blank> short <S2SV_blank> msg_len <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6, msg_len ) ) ; goto trunc ; } <S2SV_ModStart> ) ) ; if ( msg_len < sizeof ( struct olsr_msg4 ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> too <S2SV_blank> short <S2SV_blank> msg4 <S2SV_blank> len <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6, msg_len ) ) ; goto trunc ; } <S2SV_ModStart> ) ) ; if ( msg_len < sizeof ( struct olsr_msg4 ) ) { ND_PRINT ( ( ndo,",0
245,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> int64_t store_reg [ <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vpx_usec_timer_start ( & <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,0
246,"<S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file <S2SV_blank> %s\\n"", src <S2SV_ModEnd> ) ; exit <S2SV_ModStart> 0 ) ; copy_file_with_flags <S2SV_ModEnd> ( src, <S2SV_ModStart> ( dest, 0600, 0600 <S2SV_ModEnd> ) ; return",0
247,<S2SV_ModStart> = 0 ; if ( sfb > 0x7FFF ) sfb = 0x7FFF ;,0
248,"<S2SV_ModStart> prov_spec = parsed_require_line ; const lua_authz_provider_spec_t * prov_spec_orig <S2SV_ModStart> r ) ; prov_spec_orig = prov_spec ; <S2SV_ModStart> int i ; lua_pushlightuserdata ( L, prov_spec_orig -> user_data ) ; <S2SV_ModStart> -> args -> nelts, prov_spec_orig -> user_data <S2SV_ModEnd> -> nelts ) <S2SV_ModStart> -> args -> nelts, prov_spec_orig -> user_data <S2SV_ModEnd> -> nelts ) <S2SV_ModStart> -> args -> nelts, prov_spec_orig -> user_data <S2SV_ModEnd> -> nelts ) <S2SV_ModStart> -> args -> nelts, prov_spec_orig -> user_data <S2SV_ModEnd> -> nelts ) <S2SV_ModStart> -> args -> nelts, prov_spec_orig -> user_data <S2SV_ModEnd> -> nelts ) <S2SV_ModStart> -> args -> nelts, prov_spec_orig -> user_data <S2SV_ModEnd> -> nelts ) <S2SV_ModStart> -> args -> nelts, prov_spec_orig -> user_data <S2SV_ModEnd> -> nelts ) <S2SV_ModStart> -> args -> nelts, prov_spec_orig -> user_data <S2SV_ModEnd> -> nelts )",0
249,"<S2SV_ModStart> ) ) { if ( offset + 4 > image -> columns ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
250,<S2SV_ModStart> (! proto_end || proto_end + 3 >= url,0
251,"<S2SV_ModStart> end = path ; if ( end > path_len ) return - FDT_ERR_NOSPACE <S2SV_ModStart> tag ) { case FDT_END : if ( depth == FDT_MAX_DEPTH ) return - FDT_ERR_BADSTRUCTURE ; break ; <S2SV_ModStart> - FDT_ERR_BADSTRUCTURE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end!= path + 1 ) * end ++ = '/' ; strcpy ( end, name ) ; end += len ; stack [ depth ] = want ; if ( want == 1 ) stop_at = offset ; if ( str_in_list ( path, inc, inc_count ) ) want = 2 ; else if ( str_in_list ( path, inc, inc_count ) ) want = 2 ; if ( count >= max_regions ) return - FDT_ERR_NOSPACE ; if ( count > max_regions ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart> - FDT_ERR_BADSTRUCTURE ; <S2SV_ModEnd> if ( end",0
252,"<S2SV_ModStart> ) ) { if ( server. bgsavechildpid == - 1 && server. bgrewritechildpid == - 1 ) { redisLog ( REDIS_WARNING, ""Server <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> a <S2SV_blank> background <S2SV_blank> rewrite <S2SV_blank> process, <S2SV_blank> closing <S2SV_blank> all <S2SV_blank> clients"" ) ; closeTimedoutClients ( ) ; return 0 ; }",0
253,"<S2SV_ModStart> -> protocol_timeout = g_timeout_add ( 5 * G_TIME_USEC_PER_SEC <S2SV_ModEnd>, ( GSourceFunc",0
254,<S2SV_ModStart> book -> dim && i < n,1
255,<S2SV_ModStart> action ) { if ( r < 0.0 ) return ;,0
256,<S2SV_ModStart> this_h ) { int i ; <S2SV_ModStart> 16 ) { for ( i = 0 ; i < 2 ; i ++ ) { if ( sf -> predict [ i ] [ i ] [ 0 ] == vp9_convolve_copy ) { sf -> predict [ i ] [ i ] [ 1 ] = vp9_convolve8_copy ; sf -> predict [ i ] [ i ] [ 2 ] = vp9_convolve8_avg ; sf -> predict [ i ] [ 0 ] [ 2 ] = vp9_convolve8_horiz ; sf -> predict [ i ] [ 1 ] = vp9_convolve8_avg_horiz ; } else { sf -> predict [ i ] [ i ] [ 0 ] = vp9_convolve8_copy ; sf -> predict [ i ] [ 1 ] [ 0 ] = vp9_convolve8_horiz ; sf -> predict [ i ] [ 1 ] [ 1 ] = vp9_convolve8_avg_horiz ; } } } else { <S2SV_ModStart> } else { for ( i = 0 ; i < 2 ; i ++ ) { sf -> predict [ i ] [ i ] [ 0 ] = vp9_convolve,0
257,<S2SV_ModStart> (! sock <S2SV_ModEnd> ) OE_RAISE_ERRNO (,0
258,<S2SV_ModStart> ; if ( msg. msg_namelen < sizeof ( src_info ) ) return - EINVAL ; if (,0
259,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> sctp_v6_protosw_exit ( ) <S2SV_ModStart> ( ) ; unregister_pernet_subsys ( & sctp_net_ops ) ;,0
260,"<S2SV_ModStart> stream_state * stream, double psnr_samples_total, double psnr_sse_total <S2SV_ModStart> -> psnr_samples_total, psnr_samples_total <S2SV_ModEnd>, ( double",0
261,<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen (,1
262,"<S2SV_ModStart> ( ) ; <S2SV_ModEnd> if ( context <S2SV_ModStart> ERROR_OUT_OF_MEMORY ; } memset ( context -> txBuffer, 0, ETH_MAX_FRAME_SIZE ) ; memset ( context -> rxBuffer, 0, ETH_MAX_FRAME_SIZE ) ; <S2SV_ModStart> ( interface, KSZ8851_REG_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ( interface, KSZ8851_REG_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ( interface, KSZ8851_REG_MARH <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_REG_MARM <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_REG_MARL <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_REG_MOR <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_REG_MOR <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_REG_MOR <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_REG_MOR <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ88",0
263,"<S2SV_ModStart> skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
264,"<S2SV_ModStart> ; if (! <S2SV_ModStart>, IMAGE_SIZE_INVAL ) ||! fit_check_format ( fit, IMAGE_SIZE_IN_HIGHBITDEPTH ) <S2SV_ModStart> ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - EINVAL <S2SV_ModEnd> ; } bootstage_mark",0
265,"<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart>, UI_DEV_DESTROY ) )",0
266,<S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> = rc -> avg_frame_bandwidth <S2SV_ModEnd> ; # else,0
267,"<S2SV_ModStart> i ], ""--allow-untrusted-mode"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted-mode"" ) ; if ( strcmp ( argv [ i ],",0
268,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
269,<S2SV_ModStart> ib ] ; dequant_ptr = d -> dequant ; coeff_ptr = b -> coeff ; qcoeff_ptr = b -> qcoeff ; dqcoeff_ptr = d -> dqcoeff ; i0 =! type ; eob = * d -> eob ; rdmult = mb -> rdmult * err_mult ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ; rddiv = mb -> rddiv ; best_mask [ 0 ] = best_mask [ 1 ] = 0 ; tokens [ 0 ] [ 0 ]. token = DCT_EOB_TOKEN ; tokens [ 0 ] [ 1 ]. error = 0 ; tokens [ 0 ] [ 1 ]. qc = 0 ; * ( tokens [ 0 ] + 1 ) = * ( tokens [ 0 ] + 1 ) ; * ( tokens [ 0 ] + 2 ) = * ( tokens [ 0 ] + 3 ) ; * ( tokens [ 0 ] + 4 ) = * ( tokens [ 0 ] + 4 ) ; if ( type == VPX_MODE ) { <S2SV_ModStart> = 1 ; },0
270,"<S2SV_ModStart> FN_REFLEN ] ; my_snprintf ( buff, sizeof ( buff ), ""%s"", opt_basedir ) ; # ifdef __WIN__ strncat ( buff, ""/"", sizeof ( buff ) - 1 ) ; # else strncat ( buff, FN_DIRSEP, sizeof ( buff ) - 1 ) ; # endif buff [ sizeof ( buff ) - 1 ] = 0 ; my_free ( opt_basedir ) ; opt_basedir = my_strdup ( buff, MYF ( MY_FAE ) ) ; } } if (! opt_no_defaults && ( ( error = get_default_values ( ) ) ) ) { error = - 1 ; goto exit ; } strcpy ( operation, """" ) ; if ( ( error = check_options ( argc, argv, operation ) ) ) { goto exit ; } if ( opt_verbose ) { printf ( ""# <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> basedir <S2SV_blank> = <S2SV_blank> %s\\n"", opt_basedir ) ; printf ( ""# <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> datadir <S2SV_blank> = <S2SV_blank> %s\\n"", opt_datadir ) ; printf ( ""# <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> plugin_ini <S2SV_blank> = <S2SV_blank> %s\\n",0
271,<S2SV_ModStart> decrypt_cb ) { ptrdiff_t <S2SV_ModEnd> n = ( <S2SV_ModStart> n = ( ptrdiff_t <S2SV_ModEnd> ) ( data_end,0
272,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; <S2SV_ModEnd> exit_func : free_server_handle,0
273,"<S2SV_ModStart> int * returnintra, int * return_y_distortion, int * return_y_intra <S2SV_ModStart> int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # else unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # endif # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best_rd_sse = INT_MAX ; # endif # if CONFIG_TEMPORAL_DENOISING <S2SV_ModEnd> best_rd_sse = INT_MAX <S2SV_ModStart> best_rd_sse = INT_MAX ; # else best_sse = INT_MAX ; best_sse = INT_MAX ; best_rd_sse = INT_MAX ; # endif <S2SV_ModEnd> # endif mode_mv",0
274,<S2SV_ModStart> goto error ; if ( S_ISLNK ( statbuf. st_mode ) ) { h -> fd = - 1 ; goto error ; },0
275,"<S2SV_ModStart> u1_level_idc, u1_seq_parameter_set_id, u1_frame_cropping_flag <S2SV_ModStart> ; if ( u1_frame_cropping_flag == 0 ) { if ( <S2SV_ModStart> u1_seq_parameter_set_id ) ; } else { if ( u1_level_idc == 0 ) { if ( u1_level_idc == 0 ) { if ( u1_frame_cropping_flag == 0 ) { if ( u1_frame_cropping_flag == 0 ) { if ( u1_frame_cropping_flag == 0 ) { if ( u1_frame_cropping_flag == 0 ) { u1_frame_cropping_flag = 1 ; } else { u1_frame_cropping_flag = 0 ; } } else { u1_frame_cropping_flag = 0 ; } } } } else { if ( u1_level_idc == 0 ) { if ( u1_frame_cropping_flag == 0 ) { if ( u1_frame_cropping_flag == 0 ) { if ( u1_frame_cropping_flag ==",0
276,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vpx_svc_parameters_t * ) { VPxEncoderConfig * cfg = & ctx -> cfg <S2SV_ModStart> -> cpi ; const VPxSVCParameters <S2SV_ModEnd> * const params <S2SV_ModStart> -> svc. spatial_layer_id = params -> spatial_layer ; cpi -> svc. temporal_layer_id = params -> temporal_layer ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; if ( cfg -> frame_mode!= VPX_FRAME_MODE_NONE ) { if ( vp9_set_frame_mode ( ctx -> cpi, params -> frame_mode )!= 0 ) return VPX_CODEC_INVALID_FRAME ; } else { if ( vp9_set_frame_mode ( ctx -> cpi, params -> frame_mode )!= 0 ) return VPX_CODEC_INVALID_FRAME ; } <S2SV_ModEnd> ctx -> cfg",0
277,"<S2SV_ModStart> out ) { uint32 bitspersample ; uint32 samplesperpixel ; uint16 input_compression, input_photometric ; uint32 width, length ; struct cpTag * p ; uint32 compression ; uint32 width ; uint32 length ; uint32 * ptr ; uint32 * ptr_end ; uint32 * ptr_start ; uint32 * ptr_end ; uint32 * ptr_start ; uint32 * ptr_end ; uint32 * ptr_end ; if ( bitspersample > UINT32_MAX / samplesperpixel ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Invalid <S2SV_blank> bit <S2SV_blank> period <S2SV_blank> value.\\n"", TIFFFileName ( in ) ) ; return FALSE ; } bitspersample = * ptr ; samplesperpixel = * ptr_end - bitsample ; ptr_start = ptr_end ; ptr_end = ptr_start + length ; if ( bitspersample > UINT32_MAX / samplesperpixel ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Invalid <S2SV_blank> bit <S2SV_blank> period <S2SV_blank> value.\\n"", TIFFFileName ( in ) ) ; return FALSE ; } ptr_start = ptr_start ; ptr_",0
278,"<S2SV_ModStart> a ) { <S2SV_ModEnd> char * pn <S2SV_ModStart> = '\\0' ; if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else { archive_set_error ( & a -> archive, 0, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } <S2SV_ModStart> ) ) { archive_set_errno <S2SV_ModEnd> ( & a <S2SV_ModStart>, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; if (! S_ISLNK ( a -> mode ) ) { archive_set_error ( & a -> archive, 0, ""Removing <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; } pn [ 0 ] = c ; return (",0
279,"<S2SV_ModStart> unsigned int link_count ; struct kernel_lb_addr loc <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct indirectEntry * <S2SV_ModStart> extLength && ( bh <S2SV_ModEnd> = udf_read_ptagged ( <S2SV_ModStart> -> i_sb, <S2SV_ModEnd> loc, 0 <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct kernel_lb_addr loc <S2SV_ModStart> -> i_sb, <S2SV_ModEnd> loc, 0 <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct kernel_lb_addr loc <S2SV_ModStart> -> i_sb, <S2SV_ModEnd> loc, 0 <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct kernel_lb_addr nbh <S2SV_ModStart> -> i_sb, <S2SV_ModEnd> loc, 0 <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct kernel_lb_addr nbh <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct kernel_lb_addr nbh <S2SV_ModStart> -> i_sb, <S2SV_ModEnd> loc, 0 <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct kernel_lb_addr nbh <S2SV_ModStart> -> i_sb, <S2SV_ModEnd> loc, 0 <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct kernel_lb_addr nbh <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct kernel_lb_addr nbh_addr ; <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct kernel_lb_addr nbh_addr ; <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct kernel_lb_addr nbh_addr ; <S2SV_ModStart> ibh ) { <S2SV_ModEnd> struct",0
280,"<S2SV_ModStart> get_uv_tx_size ( mbmi ) ; const TX_SIZE tx_size_uv_aligned = get_tx_size_uv ( mbmi <S2SV_ModStart>, filter_level, tx_size_uv_aligned <S2SV_ModEnd> ) ; index",0
281,"<S2SV_ModStart> mq_ops ) { spin_lock <S2SV_ModEnd> ( & fq <S2SV_ModStart> mq_flush_lock, flags <S2SV_ModEnd> ) ; }",0
282,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
283,<S2SV_ModStart> ) ) { ovalue = strim ( <S2SV_ModEnd> stok ( option,0
284,<S2SV_ModStart> sizeof ( effect_param_t ) || ( effect -> state!= EFFECT_STATE_ACTIVE ) || ( effect -> state!= EFFECT_STATE_ACTIVE ) || ( effect -> state!= EFFECT_STATE_ACTIVE ) || ( effect -> state!= EFFECT_STATE_ACTIVE ) || ( effect -> state!= EFFECT_STATE_ACTIVE ) || ( effect -> state!= EFFECT_STATE_ACTIVE ) || ( effect -> state!= EFFECT_STATE_ACTIVE ) || ( effect -> state!= EFFECT_STATE_ACTIVE ) || ( effect -> state!= EFFECT_STATE_ACTIVE ) || ( effect -> state!= EFFECT_STATE_ACTIVE ) || ( effect -> state!= EFFECT_STATE_ACTIVE ) || ( effect -> state!= EFFECT_STATE_ACTIVE && ( effect -> state!= EFFECT_STATE_ACTIVE && ( effect -> state!= EFFECT_STATE_ACTIVE && ( effect -> state!= EFFECT_STATE_ACTIVE && ( effect -> state!= EFFECT_STATE_ACTIVE && ( effect -> state!= EFFECT_STATE_ACTIVE ) || ( effect -> state!= EFFECT_STATE,0
285,<S2SV_ModStart> ; } } if ( j == num_versions ) { k5free ( ret ) ; ret = NULL ; goto cleanup ; },0
286,<S2SV_ModStart> 0x02 ) ; if ( crgram_len > SC_MAX_APDU_BUFFER_SIZE - 1 ) { r = - 1 ; goto cleanup ; } <S2SV_ModStart> 0x02 ) ; if ( crgram_len > SC_MAX_APDU_BUFFER_SIZE - 1 ) { r = - 1 ; goto cleanup ; } <S2SV_ModStart> 0x02 ) ; if ( crgram_len > SC_MAX_APDU_BUFFER_SIZE - 1 ) { r = - 1 ; goto cleanup ; } <S2SV_ModStart> 0x02 ) ; if ( crgram_len > SC_MAX_APDU_BUFFER_SIZE - 1 ) { r = - 1 ; goto cleanup ; },0
287,"<S2SV_ModStart> ) ) { if (! macvlan_cnt ) { dev_warn ( & pf -> pdev -> dev, ""macvlan <S2SV_blank> count <S2SV_blank> is <S2SV_blank> zero\\n"" ) ; return - EINVAL ; }",0
288,"<S2SV_ModStart> ; } } return send_msg ( g, ""E01"" ) ;",0
289,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
290,"<S2SV_ModStart> -> mb_row_offset ; if ( xd -> mb_row_offset < 0 ) { vpx_error ( ""decode_mb_rows(): <S2SV_blank> mb_row <S2SV_blank> is <S2SV_blank> negative <S2SV_blank> (%d)"", xd -> mb_row_offset ) ; return ; }",0
291,<S2SV_ModStart> ) ; } if ( image -> format == ImageFormatMPEG4 ) { image -> format = ImageFormatMPEG4 ; },0
292,"<S2SV_ModStart> len ) { return decode_unicode_with_escapes_internal ( c, n, s, len, 0 <S2SV_ModEnd>, NULL ) <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
293,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> enum { YES <S2SV_ModStart> int setimes, targisfile <S2SV_ModEnd>, wrerrno = <S2SV_ModStart> ; if ( lstat <S2SV_ModEnd> ( targ, <S2SV_ModStart> ; if ( lstat <S2SV_ModEnd> ( targ, <S2SV_ModStart> ; if ( lstat <S2SV_ModEnd> ( targ,",0
294,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
295,<S2SV_ModStart> ; # endif vp8_de_alloc_frame_buffers ( oci ) ;,0
296,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
297,<S2SV_ModStart> u1_num_mbs ) { if ( u1_num_mbs > 0 ) { <S2SV_ModStart> u1_num_mbs ) ; },0
298,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> vterm_allocator_free ( screen,1
299,<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart> & delay ) ),0
300,"<S2SV_ModStart> one, offset <S2SV_ModEnd> ; ssize_t count <S2SV_ModStart> ) break ; if ( number_planes_filled > MagickMax ( number_colormaps, number_planes_filled ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( number_planes_filled <S2SV_ModStart> ) break ; if ( number_planes_filled > MagickMax ( number_pixels, number_colormaps ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
301,"<S2SV_ModStart> value ) { cchar * name = sclone ( value ) ; <S2SV_ModStart> -> host, name <S2SV_ModEnd>, NULL )",0
302,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
303,<S2SV_ModStart> ntime ) { if ( merkles < 8 ) { ret = true ; goto out ; },0
304,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
305,"<S2SV_ModStart> unused ) { _Py_IDENTIFIER ( __dict__ ) ; PyObject * dict = _PyObject_GetAttrId ( self, & PyId___dict__ ) ; if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( _PyObject_GetAttrId ( self, & PyId___dict__ ) == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( _PyObject_GetAttrId ( self, & PyId___dict__ ) == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( _PyObject_GetAttrId ( self, & PyId___dict__ ) == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( _PyObject_GetAttrId ( self, & PyId___dict__ ) == NULL ) { if ( PyErr_ExceptionMatches ( PyExc",0
306,"<S2SV_ModStart> ) & desc, sizeof ( * desc )",1
307,<S2SV_ModStart> perf_event * ) ; struct perf_event_context * ctx <S2SV_ModStart> case PERF_EVENT_IOC_PERIOD : ctx = perf_event_ctx_lock ( event ) ; if (! ctx ) return - EINVAL ; <S2SV_ModStart> ret ; } <S2SV_ModEnd> default : return,0
308,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> * r, PREDICTION_MODE <S2SV_ModEnd> y_mode ) { <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode",0
309,<S2SV_ModStart> ; if (! init ) return - EINVAL ; if (,0
310,"<S2SV_ModStart> iv ) ; if (! NIL_P ( viter ) ) rb_raise ( eTypeError, ""iter <S2SV_blank> must <S2SV_blank> be <S2SV_blank> an <S2SV_blank> integer"" ) ;",0
311,"<S2SV_ModStart> s ) ; if (! s -> nic ) { dev_err ( dev, ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> stellaris_enet <S2SV_blank> device\\n"" ) ; return - ENOMEM ; }",0
312,<S2SV_ModStart> ; if (! session -> settings_ready ) { return NGHTTP2_ERR_BAD_SETTINGS ; } if (,0
313,"<S2SV_ModStart> ( ) ; <S2SV_ModEnd> x86_pmu. max_events <S2SV_ModStart> = max ( <S2SV_ModEnd> x86_pmu. max_events <S2SV_ModStart> x86_pmu. max_events, ARCH_PERFMON_EVENTS_COUNT ) ; if ( version > 1 ) x86_pmu. max_events = min ( x86_pmu. max_events, ARCH_PERFMON_EVENTS_COUNT ) ; if ( version > 1 ) x86_pmu. max_events = max ( x86_pmu. max_events, ARCH_PERFMON_EVENTS_COUNT ) ; if ( version > 1 ) x86_pmu. max_events = ARCH_PERFMON_EVENTS_COUNT ; <S2SV_ModEnd> x86_pmu. max_counters_fixed",0
314,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * tp, vpx_TOKENEXTRA <S2SV_ModEnd> * stop ) <S2SV_ModStart> stop ) { vpx_writer <S2SV_ModEnd> * p = <S2SV_ModStart> ] ; const vpx_extra_bit <S2SV_ModEnd> * const b <S2SV_ModStart> b = & vpx_extra_bits <S2SV_ModEnd> [ t ] <S2SV_ModStart> & 1 ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ; } vpx_write_bit <S2SV_ModEnd> ( w,",0
315,"<S2SV_ModStart>, uncompressed_hdr_size ; vpx_write_bit_buffer <S2SV_ModEnd> wb = { <S2SV_ModStart> 0 } ; vpx_write_bit_buffer <S2SV_ModEnd> saved_wb ; write_uncompressed_header <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> += uncompressed_hdr_size ; vpx_compute_update_table <S2SV_ModEnd> ( ) ; <S2SV_ModStart> += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb",0
316,"<S2SV_ModStart> int dev_get_valid_name ( const struct net * net, struct net_device * dev ) { <S2SV_ModEnd> BUG_ON (!",0
317,"<S2SV_ModStart> struct ikev2_id id ; struct ikev2_id_ext id_ext <S2SV_ModStart> * typedata ; ND_TCHECK_EXT ( ext ) ; memset ( & id_ext, 0, sizeof ( id_ext ) ) ; memcpy ( & id_ext <S2SV_ModEnd>, ext, <S2SV_ModStart> ) ) ; ND_TCHECK_ID ( id. type ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_ID ( id. ext ) ; <S2SV_ModStart> - 4 ) ) ; ND_TCHECK_ID ( id. ext <S2SV_ModStart> trunc ; } ND_TCHECK_ID ( id. ext ) ; <S2SV_ModStart> * ) ( ext + sizeof ( id_ext ) <S2SV_ModEnd> ) ; switch <S2SV_ModStart> * ) ( ext + sizeof ( id_ext ) <S2SV_ModEnd> ) ; switch <S2SV_ModStart> * ) ( ext + sizeof ( id_ext ) <S2SV_ModEnd> ) ; switch <S2SV_ModStart> * ) ( ext + sizeof ( id_ext ) <S2SV_ModEnd> ) ; switch <S2SV_ModStart> * ) ( ext + sizeof ( id_ext ) <S2SV_ModEnd> ) ; ND_TCHECK_ID <S2SV_ModStart> * ) ( ext + sizeof ( id_ext ) <S2SV_ModEnd> ) ; ND_TCHECK_ID <S2SV_ModStart> * ) ( ext + sizeof ( id_",0
318,"<S2SV_ModStart> ; } } jas_log ( LL_ERROR, ""mif_process_cmpt(): <S2SV_blank> Received <S2SV_blank> MIF_DATA <S2SV_blank> tag <S2SV_blank> %d"", id ) ;",0
319,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
320,"<S2SV_ModStart>, yt0_0, yt1_0_0, yt2_0_0, <S2SV_ModStart> ; WORD32 xh0_0, xh1_0_0, xh20_0, xh21_0, xl0_0, xl1_0_0, xl20_0, xl21_0 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD64 mul_1, mul_2, mul_3, mul_4, mul_5, mul_6 ; WORD64 mul_7, mul_8, mul_9, mul_10, mul_11, mul_12 ; WORD64 * x_l1 ; WORD32 * x_l2 ; WORD32 * x_l2 ; WORD32 * x_h2 ; WORD64 * x_l3 ; WORD64 * x_l4 ; WORD64 * x_l5 ; WORD64 * x_l6 ; WORD64 * x_h7 ;",0
321,"<S2SV_ModStart> mntent -> mnt_dir, false",0
322,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
323,"<S2SV_ModStart> ( req ) ) ; rb_hash_aset ( env, proxy_host_val, req_proxy_host ( req )",0
324,<S2SV_ModStart> endif int col_type = 0 <S2SV_ModStart> endif # endif # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION if ( imp_dbh -> use_server_side_prepare ) { col_type = MYSQL_TYPE_INTO ; } # endif <S2SV_ModStart> ; # endif # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION if ( imp_dbh -> use_server_side_prepare ) { if ( imp_sth -> bind_type == MYSQL_BIND_INTO_QUERY ) { imp_sth -> bind_type = MYSQL_BIND_INTO_QUERY ; } else { imp_sth -> bind_type = MYSQL_BIND_INTO_QUERY ; } } # endif,0
325,"<S2SV_ModStart> need = 0, max_rows = 0 <S2SV_ModStart> screen, { max_rows = MAX ( screen -> max_rows, MAX_SELECTIONS - 1 ) ; <S2SV_ModStart> need *= 4, max_cols = MAX ( screen -> max_cols, MAX_SELECTIONS - 1 ) <S2SV_ModStart> screen, { max_rows = MAX ( screen -> max_rows, MAX_SELECTIONS - 1 ) ;",0
326,<S2SV_ModStart> fractionalDigits ) { const JsVarInt sign = 0 ; <S2SV_ModStart> val ) ) { <S2SV_ModStart> len ) ; } <S2SV_ModStart> < 0 ) { <S2SV_ModStart> len ) ; } else { <S2SV_ModEnd> strncpy ( str <S2SV_ModStart> len ) ; },0
327,<S2SV_ModStart> ( unlikely ( crng_ready ( ) <S2SV_ModEnd> ) ) {,0
328,"<S2SV_ModStart> LEX_ID ) { snprintf ( str, len, ""ID:%s"" <S2SV_ModEnd>, jslGetTokenValueAsString ( <S2SV_ModStart> jslGetTokenValueAsString ( ) <S2SV_ModEnd> ) ; } <S2SV_ModStart> LEX_STR ) { snprintf ( str, len, ""String:\'%s\'"" <S2SV_ModEnd>, jslGetTokenValueAsString ( <S2SV_ModStart> jslGetTokenValueAsString ( ) <S2SV_ModEnd> ) ; }",0
329,,1
330,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
331,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
332,"<S2SV_ModStart> ) { return memcmp <S2SV_ModEnd> ( s1,",0
333,"<S2SV_ModStart> ( CMD_PRINT_HELP, ""stunnel.conf"", <S2SV_ModStart> ( CMD_PRINT_HELP, ""stunnel.conf"", <S2SV_ModStart> ( CMD_PRINT_DEFAULTS, ""stunnel.conf"",",0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,<S2SV_ModStart> ; if (! new_iv_set ) { if ( <S2SV_ModStart> ) ) ; },0
336,<S2SV_ModStart> } } } if ( 0 == u4_size ) { return ; },0
337,<S2SV_ModStart> * print_string ( const struct cJSON_object * obj ) { const char * str = obj -> valuestring ; <S2SV_ModEnd> return print_string_ptr ( <S2SV_ModStart> return print_string_ptr ( str <S2SV_ModEnd> ) ; },0
338,<S2SV_ModStart> -> iface -> codec <S2SV_ModEnd>. encode ( <S2SV_ModStart> -> iface -> codec <S2SV_ModEnd>. encode ( <S2SV_ModStart> -> iface -> codec <S2SV_ModEnd>. encode (,0
339,"<S2SV_ModStart> ) ; } else if ( arg1 == - 1 ) { win_maximise ( - 1 ) ; win_set_chars ( 0, 0 ) ; }",0
340,<S2SV_ModStart> i < cols <S2SV_ModEnd> ; i ++,0
341,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> i -> width <S2SV_ModStart> i -> width > <S2SV_ModEnd> i -> parent <S2SV_ModStart> i -> parent -> width || <S2SV_ModEnd> i -> height <S2SV_ModStart> i -> height > <S2SV_ModEnd> i -> parent <S2SV_ModStart> i -> parent -> <S2SV_ModEnd> height ) { <S2SV_ModStart> -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; } if ( context. curX + ( i -> width * i -> parent -> width ) > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; } if ( context. curX + ( i -> width * i -> parent -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!",0
342,"<S2SV_ModStart> encode_term_subexp ( vp9_writer * w1 <S2SV_ModEnd>, int word <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",0
343,<S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; },0
344,"<S2SV_ModStart> ) ) { if ( psf -> header_size > psf -> header_max_size ) { psf_printf ( psf, ""Format <S2SV_blank> string <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", psf -> header_size ) ; return - 1 ; }",0
345,"<S2SV_ModStart> ) break ; if ( sun_info. length > image -> columns ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
346,"<S2SV_ModStart> 0 ; } if ( copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) == - 1 ) { fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> copy <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; return 0 ; } <S2SV_ModStart> ( rv ) { <S2SV_ModStart> ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; return 0 ; } <S2SV_ModEnd> } _exit (",0
347,"<S2SV_ModStart> <S2SV_null> static vp9_variance_fn_t vpx_get_block_variance_fn ( const VP9_COMP * ctx, <S2SV_ModEnd> BLOCK_SIZE bsize ) <S2SV_ModStart> BLOCK_8X8 : return vpx_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> BLOCK_16X8 : return vpx_mse16x8 <S2SV_ModEnd> ; case BLOCK_8X16 <S2SV_ModStart> default : return vpx_mse8x16 <S2SV_ModEnd> ; } }",0
348,<S2SV_ModStart> ; if ( encoded_key_pack == NULL ) { retval = KRB5_E_KEY_PACK_EMPTY ; goto done ; } if (,0
349,"<S2SV_ModStart> flags ) ; if (! vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } <S2SV_ModStart> vb. vb2_buf <S2SV_ModEnd> ) ; if",0
350,<S2SV_ModStart> size ) { if ( size < PREFIX_SIZE ) return NULL ;,0
351,<S2SV_ModStart> & rxh -> serviceID <S2SV_ModEnd> ) && rxent,0
352,"<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len > MWIFIEX_MAX_SSID_LEN ) { mwifiex_dbg ( adapter, ERROR, ""Invalid <S2SV_blank> SSID <S2SV_blank> length <S2SV_blank> %d\\n"", req_ssid -> ssid_len ) ; return - EINVAL ; }",0
353,<S2SV_ModStart> ; if (! sbuf ) { kmem_free ( sbuf ) ; return 0 ; } if (,0
354,"<S2SV_ModStart> struct l2cap_conf_rfc rfc <S2SV_ModEnd> ; void * <S2SV_ModStart> sk ) ; memset ( & rfc, 0, sizeof ( rfc ) ) ; <S2SV_ModStart> = L2CAP_MODE_ERTM ; <S2SV_ModEnd> l2cap_add_conf_opt ( & <S2SV_ModStart> = L2CAP_DEFAULT_MAX_RECEIVE ; <S2SV_ModEnd> l2cap_add_conf_opt ( &",0
355,"<S2SV_ModStart> r ) { if (! TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_WAITALL ) ) ) { <S2SV_ModEnd> ret = recv <S2SV_ModStart> MSG_WAITALL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> == EINTR ) ) ; } <S2SV_ModEnd> if ( ret",0
356,"<S2SV_ModStart> ) ) { if ( u1_nal_ref_idc > IDR_SLICE_NAL ) { H264_DEC_DEBUG_PRINT ( ""\\nInvalid <S2SV_blank> ref <S2SV_blank> idc <S2SV_blank> in <S2SV_blank> Nal <S2SV_blank> Unit, <S2SV_blank> Let\'s <S2SV_blank> try\\n"" ) ; i_status = ERROR_INVALID_REF_IDC ; }",0
357,<S2SV_ModStart> while ( pair <S2SV_ModEnd> ) { mprAddItem,1
358,"<S2SV_ModStart> * delegation, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> = 0 ; fmode <S2SV_ModEnd> &= ( FMODE_READ <S2SV_ModStart> -> type & fmode <S2SV_ModEnd> )!= open_flags <S2SV_ModStart> -> stateid, fmode <S2SV_ModEnd> ) ; ret <S2SV_ModStart>, NULL, fmode <S2SV_ModEnd> ) ; ret",0
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,"<S2SV_ModStart> * xd, const struct vpx_comp * const cp, const struct vpx_plane_info * const plane ) { const BLOCK_SIZE bs = get_plane_block_size ( bsize, plane ) ; <S2SV_ModStart> int sse ; int num_pels = get_num_pels_lookup ( cp, plane ) ; <S2SV_ModStart> pd ) ; const int num_pels_lookup = cp -> num_pels_lookup [ bs ] ; <S2SV_ModStart>. vf ( plane -> src. buf, plane -> src. stride, plane -> dst. buf, plane -> <S2SV_ModEnd> stride, & <S2SV_ModStart> == 0 ) { <S2SV_ModStart> = sse ; } <S2SV_ModStart> == 0 ) { <S2SV_ModStart> = sse ; } <S2SV_ModStart> 4 ) { const <S2SV_ModStart> } else { const <S2SV_ModStart> dist ; } } <S2SV_ModStart> * out_rate_sum = <S2SV_ModEnd> rate_sum ; *",0
361,<S2SV_ModStart> } if ( pmd_trans_unstable <S2SV_ModEnd> ( pmd ),0
362,<S2SV_ModStart> { if ( index >= PAM_MAX_RESP_SIZE ) { return ( PAM_BUF_ERR ) ; } if <S2SV_ModStart> == NULL ) { free ( * ret_username ) ; <S2SV_ModStart> PAM_BUF_ERR ) ; },0
363,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> seg ) { vpx_read_tree <S2SV_ModEnd> ( r, <S2SV_ModStart> ( r, vpx_segment_tree <S2SV_ModEnd>, seg ->",0
364,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",1
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,<S2SV_ModStart> depth ++ ; if ( depth > MAXDEPTH ) return ( buf ) ;,0
367,<S2SV_ModStart> ERROR_INVALID_LENGTH ; } if ( length < 8 ) { return ERROR_FAILURE ; } <S2SV_ModStart> length ) ; if ( length < sizeof ( Ksz8851TxHeader ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_FAILURE ; } <S2SV_ModStart> length ) ; if ( length < sizeof ( Ksz8851TxHeader ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_FAILURE ; } <S2SV_ModStart> length ) ; if ( length < sizeof ( Ksz8851TxHeader ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_FAILURE ; } <S2SV_ModStart> RXQCR_SDA ) ; if ( length < sizeof ( Ksz8851TxHeader ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_FAILURE ; } <S2SV_ModStart> RXQCR_SDA ) ; if ( length < sizeof ( Ksz8851TxHeader ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_FAILURE ; } <S2SV_ModStart> TXQCR_METFE ) ; if ( length < sizeof ( Ksz8851TxHeader ) ) { osSetEvent ( & interface -> nicTxEvent ) ;,0
368,<S2SV_ModStart> ( ) ; mono_attach_maybe_stop ( ) ;,0
369,"<S2SV_ModStart>, x_e, x_f, x_f2, x_f3, x_f4, x_f5, x_f6, x_f7, x_f8, x_f9, x_f10, x_f11, x_f12, x_f11, x_f12, x_f13, x_f13, x_f13, x_f13, x_f14, x_f14, x_f14, x_f14, x_f15, x_f15, x_f15 <S2SV_ModEnd> ; WORD32 n00 <S2SV_ModStart> x0 ++ ; x_8 = * x0 ++ ; x_9 = * x0 ++ ; x_f0 = * x0 ++ ; x_f1 = * x0 ++ ; x_f2 = * x0 ++ ; x_f3 = * x0 ++ ; x_f4 = * x0 ++ ; x_f5 = * x0 ++ ; x_f6 = * x0 ++ ; x_f7 = * x0 ++ ; <S2SV_ModStart> x0 ++ ; x_8 = * x0 ++ ; x_",0
370,<S2SV_ModStart> ; if ( <S2SV_ModEnd> pmd_none_or_clear_bad ( pmd,0
371,"<S2SV_ModStart>, frames ; <S2SV_ModEnd> if ( argc <S2SV_ModStart> ""Incorrect <S2SV_blank> parameters:\\n"" ) ; fprintf ( stderr, ""usage: <S2SV_blank> %s <S2SV_blank> <file> <S2SV_blank> <output <S2SV_blank> file>\\n"", argv [ 0 ] ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( argv [ 2 ], & width, & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; fprintf ( stderr, ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; return 1 ; } if (! parse_dim ( argv [ 3 ], & target_width, & target_height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; fprintf ( stderr, ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; return 1 ; } fpin = fopen ( fin, ""rb"" ) ; if ( fpin == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> read\\n"", fin ) ; fprintf ( stderr",0
372,"<S2SV_ModStart> num_fields ) { <S2SV_ModEnd> _Py_IDENTIFIER ( _attributes <S2SV_ModStart> _attributes ) ; return add_attributes_with_id <S2SV_ModEnd> ( ( PyObject <S2SV_ModStart>, l ) <S2SV_ModEnd> ; } <S2SV_null>",0
373,"<S2SV_ModStart> struct vpx_codec_alg_priv * * <S2SV_ModStart> priv ) { struct vpx_codec_alg_priv * <S2SV_ModStart> VPX_CODEC_MEM_ERROR ; } priv = calloc ( 1, sizeof ( * priv ) ) ; if (! priv ) { return VPX_CODEC_MEM_ERROR ; } ctx -> priv = priv ; ctx -> priv -> iface = ctx -> iface ; ctx -> priv -> init_flags = ctx -> init_flags ; if ( ctx -> config. enc ) { <S2SV_ModStart> enc ) { <S2SV_ModEnd> cfg = * <S2SV_ModStart> config. enc ; } ctx -> config. enc = & priv -> cfg ; } cfg = & ctx -> priv -> alg_priv -> cfg ; for ( i = 0 ; extracfg_map [ i ]. usage && extracfg_map [ i ]. usage!= cfg -> g_usage ; i ++ ) ; priv = & ctx -> priv -> alg_priv -> cfg ; for ( i = 0 ; extracfg_map [ i ]. usage && extracfg_map [ i ]. usage!= cfg -> g_usage ; i ++ ) ; priv -> vp8_cfg = extracfg_map [ i ].",0
374,<S2SV_ModStart> ++ ; } pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; totfr += step ; if ( totfr > BOT ) { totfr = 0 ; for ( i = 0 ; i < 256 ; i ++ ) { unsigned nc = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] = nc ; totfr += nc ; } for ( i = 0 ; i < 256 ; i ++ ) { unsigned sum = 0 ; unsigned i16_17 = i << 4 ; for ( j = 0 ; j < 16 ; j ++ ) sum += pixel -> freq [ i16_17 + j ] ; pixel -> lookup [ i ] = sum ; } } pixel -> total_freq = totfr ;,0
375,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx ->,0
376,"<S2SV_ModStart> ) ) { if ( iinfo -> i_location. i_len > UDF_MAX_ENTRY_SIZE ) { udf_err ( inode -> i_sb, ""inode <S2SV_blank> %ld <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large\\n"", inode -> i_ino ) ; goto out ; }",0
377,"<S2SV_ModStart> data ) { uint8_t data_reg = ENC28J60_MIREGADR_PHY_DATA ; <S2SV_ModStart> ( interface, data_reg <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, data_reg <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, data_reg <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, data_reg <S2SV_ModEnd> ) & MISTAT_BUSY",0
378,<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline <S2SV_ModStart> fmt ) { const <S2SV_ModStart> * ptr ; const <S2SV_ModStart> = 0 ; if (! fmt ) return 1 ;,0
379,<S2SV_ModStart> DefragSturgesNovakLastTest ) ; # ifdef CONFIG_IPV6_DEFINE_IPV6_DEFINE_IPV6_DEFINE_IPV6_DEFINE_IPV6_DEFINE_IPV6_DEFINE_IPV6_DEFINE_IPV6_DEFINE_IPV6_DEFINE_IPV6_DEFINE_IPV6_DEFINE_IPV6_DEFINE_IPV6_DEFINE_IPV6_DEFINE_IPV6_DEFINE_IPV6_DEFINE_IPV6_DEFINE_IPV6_DEFINE_IPV6_DEFINE_IPV6_DEFINE_IPV6_DEFINE_IPV6_DEFINE_IPV6_DEFINE_IPV6_DEFINE_IPV6_DEFINE_IPV6_DEFINE_IPV6_DEFINE_IPV6_DEFINE_IPV6_DEFINE_IPV6_DEFINE_IPV6_DEFINE_IPV6_DEFINE_IPV6_DEFINE_IPV6_DEFINE_IPV6_DEFINE_IPV6_DEFINE_IPV6_DEFINE_IPV6_DEFINE_,0
380,<S2SV_ModStart> ; if ( object_length > 0 <S2SV_ModEnd> ) { new_object,0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,<S2SV_ModStart> p_sys -> b_eos_pulled || p_sys -> b_eos_finished,0
384,<S2SV_ModStart> ; if ( bfname. len &&,0
385,<S2SV_ModStart> 4 ) ; if ( len < 4 ) return NULL ; <S2SV_ModStart> len ) ; if (! a -> names [ i ]. data ) return NULL ;,0
386,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
387,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * fb ; if ( ctx -> pbi -> num_channels < 2 ) { return VPX_CODEC_INVALID_PARAM ; } <S2SV_ModStart> * fb ; if ( ctx -> pbi -> num_channels < 2 ) { return VPX_CODEC_INVALID_PARAM ; } if ( <S2SV_ModStart>, & fb ) < 0 ) { return VPX_CODEC_INVALID_PARAM ; } vpx_codec_err_t ret = vpx_get_reference_dec ( ctx -> pbi, data -> idx, & fb ) ; if ( ret!= VPX_CODEC_OK ) { return ret ; } yuvconfig2image ( & data -> img, fb, NULL",0
388,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> j + length <S2SV_ModStart> + length > <S2SV_ModEnd> frag -> data_size <S2SV_ModStart> + length ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> "" ""invalid <S2SV_blank> image <S2SV_blank> content <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( j + length >",0
389,"<S2SV_ModStart> expr_stmt ) ; REQ ( CHILD ( n, 0 ), testlist ) ; <S2SV_ModStart> == 1 ) return ast_for_testlist ( c, CHILD ( n, 0 ) ) ; else if ( TYPE ( CHILD ( n, 0 ) ) == testlist ) return ast_for_testlist ( c, CHILD ( n, 0 ) ) ; else if ( TYPE ( CHILD ( n, 0 ) ) == testlist ) return ast_for_testlist ( c, CHILD ( n, 0 ) ) ; else if ( TYPE ( CHILD ( n, 0 ) ) == testlist ) return ast_for_testlist ( c, CHILD ( n, 0 ) ) ; else if ( TYPE ( CHILD ( n, 0 ) ) == testlist ) return ast_for_testlist ( c, CHILD ( n, 0 ) ) ; else if ( TYPE ( CHILD ( n, 0 ) ) == testlist ) return ast_for_testlist ( c, CHILD ( n, 0 ) ) ; else if ( TYPE ( CHILD ( n, 0 ) ) == testlist ) return ast_for_testlist ( c, CHILD (",0
390,"<S2SV_ModStart> int vp8_denoiser_filter_c ( YV12_BUFFER_CONFIG * mc_running_avg, YV12_BUFFER_CONFIG * running_avg, MACROBLOCK * signal, unsigned int motion_magnitude, int y_offset, int uv_offset ) { unsigned char * sig = signal -> thismb ; int sig_stride = 16 ; unsigned char * mc_running_avg_y = mc_running_avg -> y_buffer + y_offset ; int mc_avg_y_stride = mc_running_avg -> y_stride ; unsigned char * running_avg_y = running_avg -> y_buffer + y_offset ; int avg_y_stride = running_avg -> y_stride ; int r, c, i ; int sum_diff = 0 ; int adj_val [ 3 ] = { 3, 4, 6 } ; if ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) { for ( i = 0 ; i < 3 ; i ++ ) adj_val [ i ] += 1 ; } for ( r = 0 ; r < 16 ; ++ r ) { for ( c = 0 ; c < 16 ;",0
391,<S2SV_ModStart> ) ) { if ( ( sockPtr -> flags & NS_CONN_ESTABLISHED ) == 0u ) { sockPtr -> flags |= NS_CONN_ESTABLISHED ; },0
392,<S2SV_ModStart> ret = 0 ; xtregs -> cp0 &= ~ XTENSA_CP_MASK,0
393,"<S2SV_ModStart> size ) ; if ( message -> length < 0 ) { osLog ( LOG_WARNING, ""Error <S2SV_blank> reading <S2SV_blank> from <S2SV_blank> IP <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> queue <S2SV_blank> item <S2SV_blank> of <S2SV_blank> type <S2SV_blank> %d"", queueItem -> type ) ; error = ERROR_TIMEOUT ; goto out ; }",0
394,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" <S2SV_ModStart> cg_item ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
395,<S2SV_ModStart> int error ; int old_block = EXT2_I ( inode ) -> i_block_group ; <S2SV_ModStart> new_bh ) ; error = <S2SV_ModStart> ( new_bh ) ; if ( error ) goto cleanup ; if ( old_block ) ext2_xattr_cache_unlock ( inode ) ; return error,0
396,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
397,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
398,"<S2SV_ModStart>, 0, PERF_OUTPUT_DEFAULT_FLAGS <S2SV_ModEnd> ) ; if",0
399,<S2SV_ModStart> char * ) MagickAllocateQuantumMemory <S2SV_ModEnd> ( imsx * <S2SV_ModStart> ) ; } if ( imbuf == NULL ) { return ( MagickFalse ) ; },0
400,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vpx_ref_frame_t * ) ; VPxWindow * window = ctx -> window <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; if ( frame -> frame_type == VPX_FRAME_TYPE_VP9 ) { return VPX_CODEC_INVALID_PARAM ; } <S2SV_ModStart> sd ) ; if ( frame -> frame_type == VPX_FRAME_TYPE_VP9 ) { return VPX_CODEC_INVALID_PARAM ; } <S2SV_ModStart> vp9_copy_reference_dec ( ctx <S2SV_ModEnd>, ( VP9_REFFRAME",0
401,<S2SV_ModStart> u1_num_mbs ) { if ( u1_num_mbs > 0 ) { <S2SV_ModStart> u1_num_mbs ) ; },0
402,<S2SV_ModStart> ; UWORD32 u4_x_dst_offset <S2SV_ModEnd> = 0 ; <S2SV_ModStart> ) ; else { <S2SV_ModStart> ps_dec ) ; },0
403,<S2SV_ModStart> VP9_LAST_FLAG ) { int i ; for ( i = 0 ; i < cm -> num_frame_bufs ; i ++ ) { YV12_BUFFER_CONFIG * const frame_buf = <S2SV_ModEnd> cm -> frame_bufs <S2SV_ModStart> -> frame_bufs [ i <S2SV_ModEnd> ]. buf <S2SV_ModStart> ]. buf ; if (! is_valid_frame_config ( frame_buf ) ) break,0
404,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
405,"<S2SV_ModStart> TX_SIZE tx_size = get_plane_tx_size ( pd, plane <S2SV_ModEnd> ) : mbmi <S2SV_ModStart> int i ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) { int r, c ; int max_blocks_wide = num_4x4_w ; int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> ( 5 + pd -> subsampling_y ) ) ; i = 0 ; for ( r = 0 ; r < num_4x4_h ; r += ( 1 << tx_size ) ) { for ( c = 0 ; c < num_4x4_w ; c += ( 1 << tx_size ) ) { if ( r < max_blocks_wide && c < max_blocks_wide ) visit (",0
406,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 4 ) ; <S2SV_ModEnd> src += src_stride",0
407,"<S2SV_ModStart> nrow ) { if ( row + img -> row_offset > h ) { return ( 0 ) ; } <S2SV_ModStart> -> row_offset ; <S2SV_ModEnd> if ( _TIFFReadEncodedStripAndAllocBuffer <S2SV_ModStart> ) ; } if ( buf == NULL ) { if ( _TIFFReadEncodedStripAndAllocBuffer ( tif, buf, bufsize, & p0, & p1, & p2 ) < 0 ) { return ( 0 ) ; } if ( _TIFFReadEncodedStripAndAllocBuffer ( tif, buf, bufsize, & p2, & pa, & pos ) < 0 ) { return ( 0 ) ; } }",0
408,<S2SV_ModStart> ; } } <S2SV_ModEnd> return 0 ;,0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. be <S2SV_ModEnd> [ psf -> <S2SV_ModStart> [ psf -> header. be <S2SV_ModEnd> ++ ] = <S2SV_ModStart> [ psf -> header. be <S2SV_ModEnd> ++ ] = <S2SV_ModStart> = x ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
410,<S2SV_ModStart> num & ( 1U << number <S2SV_ModEnd> ) ) return <S2SV_ModStart> num - ( 1U <S2SV_ModEnd> << number ),0
411,<S2SV_ModStart> int w = img -> rows * <S2SV_ModStart> int h = img -> cols *,0
412,"<S2SV_ModStart> = NULL ; uint32_t attr_len ; uint32_t <S2SV_ModEnd> orig_attr_len ; uint16_t <S2SV_ModStart> 1 ; } if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } <S2SV_ModStart> md5_ctx ) ; if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; }",0
413,<S2SV_ModStart> case EVP_CTRL_AEAD_SET_IV_LEN : if ( arg < 0 || arg > CHACHA_CTR_SIZE ) return 0 ;,0
414,"<S2SV_ModStart>, 0, comm_event -> comm_size <S2SV_ModEnd> ) ; if",0
415,"<S2SV_ModStart>, sk ) ; if (! sk ) return - EINVAL",0
416,<S2SV_ModStart> MT_CPTYPE_PASSSALT ) { if ( cpkt. length > MT_PASS_SALT_MAX_LEN ) { return - 1 ; },0
417,<S2SV_ModStart> MUTT_ABORT ) { mutt_socket_close ( adata -> conn ) ; <S2SV_ModStart> ) ) ; imap_close_connection ( adata ) ; <S2SV_ModStart> ) ) ; imap_close_connection ( adata ) ;,0
418,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
419,"<S2SV_ModStart> ) ) ; if ( <S2SV_ModStart>, 0 ) < 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModEnd> if ( strncmp",0
420,"<S2SV_ModStart> remainder, & rlen ) ; if ( ret ) return ret ; if ( rlen == 0 ) return ASN1_BAD_ID <S2SV_ModEnd> ; if (",0
421,"<S2SV_ModStart> * slavename ; char * password ; <S2SV_ModStart> } # endif password = malloc ( strlen ( user -> password ) + 1 ) ; if (! password ) { syslog ( LOG_ERR, _ ( ""login <S2SV_blank> failed, <S2SV_blank> incorrect <S2SV_blank> username <S2SV_blank> or <S2SV_blank> password\\r\\n"" ) ) ; abort_connection ( curconn, pkthdr, _ ( ""Login <S2SV_blank> failed, <S2SV_blank> incorrect <S2SV_blank> username <S2SV_blank> or <S2SV_blank> password\\r\\n"" ) ) ; return ; } <S2SV_ModStart> = 0 ; strlcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> -> password, strlen ( user -> password ) ) ; memcpy ( password <S2SV_ModEnd> + 1 + <S2SV_ModStart> + 1 + strlen ( user -> password ), curconn -> pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) password <S2SV_ModEnd>, strlen ( <S2SV_ModStart> -> password ) ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; md5sum [ 0 ] = 0 ; init_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr ->",0
422,"<S2SV_ModStart> ; if ( unicode_compare_with_ascii_string <S2SV_ModEnd> ( name, <S2SV_ModStart> { if ( unicode_compare_with_ASCII_string <S2SV_ModEnd> ( name,",0
423,<S2SV_ModStart> off } ; if ( str == NULL ) { return - 1 ; },0
424,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
425,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
426,"<S2SV_ModStart> size_t s ; size_t sz ; <S2SV_ModStart> 12 ) ) continue ; sz = exif_get_long ( o, EXIF_BYTE_ORDER_INTEL ) ; if ( sz < 0 <S2SV_ModStart>, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" <S2SV_ModEnd> ) ; break <S2SV_ModStart>, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" <S2SV_ModEnd> ) ; break <S2SV_ModStart>, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" <S2SV_ModEnd> ) ; break <S2SV_ModStart>, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" <S2SV_ModEnd> ) ; break <S2SV_ModStart>, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" <S2SV_ModEnd> ) ; break <S2SV_ModStart>, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" <S2SV_ModEnd> ) ; break <S2SV_ModStart>, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" <S2SV_ModEnd> ) ; break <S2SV_ModStart>, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" <S2SV_ModEnd> ) ; break <S2SV_ModStart>, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" <S2SV_ModEnd> ) ; break <S2SV_ModStart>, """,0
427,<S2SV_ModStart> bd_addr ) { if ( bd_addr -> bd_type!= BT_BD_ADDR_TYPE_RANDOM ) return BT_STATUS_INVALID_ARGS ;,0
428,"<S2SV_ModStart> int i ; size_t avail ; size_t <S2SV_ModEnd> expect ; txid <S2SV_ModStart> 4 ) ; expect = 8 + 8 + nxip * 8 ; if ( nxip < 0 || nxip > avail || expect > avail ) goto bad_format ; xmin = pq_getmsgint64 ( buf ) ; xmax = pq_getmsgint64 ( buf ) ; if ( xmin == 0 || xmin > xmax || xmax > MAX_TXID ) goto bad_format ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; snap -> nxip = nxip ; SET_VARSIZE ( snap, TXID_SNAPSHOT_SIZE ( nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last || cur < xmin || cur >= xmax ) goto bad_format ; snap -> xip [ i ] = cur ; last = cur ; } PG_RETURN_POINTER ( snap ) ; bad_format : elog ( ERROR, ""invalid <S2SV_blank> snapshot <S2SV_blank> data"" ) ; return ( Datum ) NULL <S2SV_ModEnd> ; } <S2SV_null>",0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. size <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr,0
430,"<S2SV_ModStart> ( epoll_ ) ; size_t len <S2SV_ModStart>, count ) < 0 <S2SV_ModEnd> ) OE_RAISE_ERRNO ( <S2SV_ModStart> OE_EINVAL ) ; len = min ( ret, len ) ;",0
431,"<S2SV_ModStart> ( CMD_INITIALIZE, & new_global_options. option <S2SV_ModEnd>, NULL ) <S2SV_ModStart> ( CMD_INITIALIZE, & new_service_options. option <S2SV_ModEnd>, NULL )",0
432,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_PHNUM_MIN : * ( size_t * ) val = ms -> elf_phnum_min ; return 0 ;,0
433,<S2SV_ModStart> offset ) { struct file * file = page -> mapping -> host ; <S2SV_ModStart> * journal = ext4_journal ( file <S2SV_ModEnd> ) ; if,0
434,<S2SV_ModStart> ++ ) { if (! ( <S2SV_ModStart> + 1 ) ) ) continue <S2SV_ModStart> ; exit : if ( trak ) { <S2SV_ModStart> ) ; } },0
435,"<S2SV_ModStart> 17 ] ; size_t <S2SV_ModEnd> plen ; md5_state_t <S2SV_ModStart> = 0 ; strlcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> password, 82, sizeof ( md5data ) <S2SV_ModStart> = '\\0' ; strlcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> password ), pass_salt, sizeof ( md5sum ) <S2SV_ModEnd> ) ; md5_init",0
436,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( Prefix,0
437,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
438,<S2SV_ModStart> ( ) ; g_hash_table_remove_all ( headers ) ;,0
439,"<S2SV_ModStart> -> y_buffer ; if ( src_ybc -> y_height > MAX_Y_HEIGHT ) { return ; } <S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst,",0
440,"<S2SV_ModStart> * cpi, TileDataEnc * tile_data <S2SV_ModEnd>, int mi_row <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> left_context ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( mi_col = <S2SV_ModStart> mi_col < tile_data -> mi_col_start + tile_data -> mi_col_end ; mi_col += MI_BLOCK_SIZE ) { for ( int i = 0 ; i < BLOCK_4X4 ; ++ i ) { for ( int j = 0 ; j < BLOCK_8X8 ; ++ j ) { get_block_context ( x, i ) -> pred_interp_filter = SWITCHABLE ; } } vp9_zero ( cpi -> mb. pred_mv ) ; if ( ( sf -> partition_search_type == SEARCH_PARTITION && sf -> use_lastframe_partitioning ) || sf -> partition_search_type == FIXED_PARTITION ) { if ( cpi -> mb. mb_index < 4 ) { vp9_zero ( cpi -> mb. mb_index ) ; cpi -> mb. mb_index = 0 ; } else { vp9_",0
441,"<S2SV_ModStart> ; int hexdump <S2SV_ModEnd> ; u_int link_type <S2SV_ModStart> ) ) ; if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, ""LMP <S2SV_blank> object <S2SV_blank> header <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, ""LMP <S2SV_blank> object <S2SV_blank> header <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, ""LMP <S2SV_blank> object <S2SV_blank> header <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, ""LMP <S2SV_blank> object <S2SV_blank> header <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, ""LMP <S2SV_blank> object <S2SV_blank> header <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, """,0
442,"<S2SV_ModStart> mbmi, const MV_MODE_INFO * const ref <S2SV_ModEnd>, nmv_context_counts * <S2SV_ModStart> i ) { <S2SV_ModEnd> const MV * <S2SV_ModStart> * ref = <S2SV_ModEnd> ref [ 0",0
443,"<S2SV_ModStart> ) ; } res = vpx_codec_enc_config_default ( encoder -> interface ( ), & cfg, 0 ) ; if ( res ) die_codec ( & codec, & cfg ) ; <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if (!",0
444,<S2SV_ModStart> ; if ( skb_out -> len < size ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; } if (,0
445,<S2SV_ModStart> ) return ; if (! <S2SV_ModStart> netsnmp_mibindex_load ( ) ) { SNMP_FREE ( env_var ) ; return ; } <S2SV_ModEnd> DEBUGMSGTL ( (,0
446,"<S2SV_ModStart> { fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ], O_RDWR ) <S2SV_ModStart> 1 ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_KEY ) ) <S2SV_ModStart> EV_REL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_SYN ) ) <S2SV_ModStart> x ++ ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> ]. mapped_id )",0
447,<S2SV_ModStart> i ++ ) vp9_free_frame_buffer_ext <S2SV_ModEnd> ( & ctx,0
448,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s, <S2SV_ModStart> & 1 ) vpx_lpf_vertical_4 <S2SV_ModEnd> ( s +",0
449,"<S2SV_ModStart> krb5_error_code iakerb_alloc_context ( krb5_ctx_id_t * ctx_id <S2SV_ModEnd> ) { iakerb_ctx_id_t <S2SV_ModStart> pctx ) { krb5_ctx_id_t ctx ; krb5_error_code code ; * ctx_id = NULL <S2SV_ModEnd> ; ctx = <S2SV_ModStart> = 0 ; ctx -> k5c. error = 0 ; code = krb5_gss_init_context ( & ctx -> k5c ) ; if ( code!= 0 ) goto cleanup ; code = krb5_gss_set_default_context ( & ctx -> k5c, ctx_id ) ; if ( code!= 0 ) goto cleanup ; <S2SV_ModStart> & ctx -> <S2SV_ModEnd> k5c ) ;",0
450,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> bitmapDC = CreateCompatibleDC",1
451,"<S2SV_ModStart> ; while ( ( u4_start_code = <S2SV_ModStart>, START_CODE_PREFIX_LEN ) )",0
452,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { kfree ( string ) ; <S2SV_ModStart> - EINVAL ; }",0
453,"<S2SV_ModStart> ) ; } mono_class_set_generic_method_inflated <S2SV_ModEnd> ( imethod,",0
454,<S2SV_ModStart> ) ] ; long <S2SV_ModEnd> tmp ; if <S2SV_ModStart> count ) ) { uml_exitcode = tmp ; <S2SV_ModStart> - EFAULT ; },0
455,"<S2SV_ModStart> char * last_elem = NULL <S2SV_ModStart>, * wp = NULL <S2SV_ModStart> ( ( ( strncasecmp <S2SV_ModEnd> ( & name <S2SV_ModStart> len = 7 <S2SV_ModEnd> ) ) && <S2SV_ModStart> 'O' )? <S2SV_ModEnd> l -> l_origin <S2SV_ModStart> l -> l_origin : NULL",0
456,"<S2SV_ModStart> ) ; } if ( decInst -> numSamples < 1 ) { DEC_API_TRC ( ""H264SwDecInit# <S2SV_blank> ERROR: <S2SV_blank> numSamples <S2SV_blank> <= <S2SV_blank> 1"" ) ; return ( H264SWDEC_PARAM_ERR ) ; }",0
457,<S2SV_ModStart> drop ; } <S2SV_ModEnd> opt -> optlen,0
458,"<S2SV_ModStart> ) break ; if ( image -> columns > ( size_t ) image -> rows ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
459,<S2SV_ModStart> goto errout ; if ( info -> stages > MAX_STAGES ) goto errout ;,0
460,<S2SV_ModStart> krb5_key_data * key_data ; int max_size = 0 <S2SV_ModStart> == NULL ) { max_size = 0 ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { max_size = 0 ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { max_size = 0 ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { max_size = 0 ; <S2SV_ModStart> goto cleanup ; },0
461,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
462,<S2SV_ModStart> ] ) ; if ( nByte < 0 ) { rc = SQLITE_CORRUPT_BKPT ; goto fail ; } <S2SV_ModStart> 1 ) ; fail :,0
463,<S2SV_ModStart> filp ) { struct sockaddr_storage addr ; struct sockaddr * sk_sockaddr ; struct sockaddr_storage * sk_sockaddr ; struct sockaddr_storage * sk_sockaddr_storage ; struct sockaddr_storage * sk_sockaddr_storage ; struct sockaddr_storage * sk_sockaddr_storage ; struct sockaddr_storage * sk_sockaddr_storage ; struct sockaddr_storage * sk_sockaddr_storage ; sk_sockaddr_storage = & addr ; sk_sockaddr_storage = & sk_sockaddr_storage -> addr ; sk_sockaddr_storage -> port = 0 ; sk_sockaddr_storage -> family = AF_INET ; sk_sockaddr_storage -> proto = IPPROTO_TCP ; sk_sockaddr_storage -> proto = IPPROTO_RAW ; sk_sockaddr_storage -> proto_protocol = IPPROTO_RAW ; sk_sockaddr_storage -> proto_protocol = IPPROTO_RAW ; sk_sockaddr_storage -> proto_protocol ; sk_sockaddr_storage -> proto_protocol_protocol_protocol_protocol_protocol_protocol_protocol_protocol_protocol_protocol_protocol_protocol_protocol_,0
464,"<S2SV_ModStart> * orelse, bool is_block, <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. is_block = is_block",0
465,"<S2SV_ModStart> char * name, my_bool * is_shared <S2SV_ModStart> ; if ( is_shared && ( <S2SV_ModStart> keyinfo -> key_alg!= HA_KEY_ALG_RTREE ) ) { if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; fn_format ( param -> temp_filename, name, """", MI_NAME_IEXT, 2 + 4 + 32 ) ; fn_format ( param -> temp_filename, param -> temp_filename, """", INDEX_TMP_EXT, 2 + 4 ) ; } else { fn_format ( param -> temp_filename, name, """", MI_NAME_IEXT, 2 + 4 + 32 ) ; } if ( ( new_file = mysql_file_create ( mi_key_file_datatmp, fn_format ( param -> temp_filename, param -> temp_filename, """", INDEX_TMP_EXT, 2 + 4 ), 0, param -> tmpfile_createflag, MYF ( 0 ) ) ) <= 0 ) { mi_check_print_error ( param, ""Can",0
466,"<S2SV_ModStart> ""Invalid <S2SV_blank> request <S2SV_blank> ID"" ; case NGHTTP2_ERR_INVALID_REQUEST_ID : return ""Invalid <S2SV_blank> request <S2SV_blank> ID"" ; case",0
467,"<S2SV_ModStart> UINT error ; if (! <S2SV_ModStart>, eventId ) ||! Stream_Read_UINT32 ( s, pduLength ) ) return CHANNEL_RC_INVALID_DATA",0
468,"<S2SV_ModStart> ) ; } if ( pData -> mqtt_timeout > 0 ) { zsocket_setsockopt ( pData -> socket, ZMQ_NODELAY, & pData -> mqtt_timeout, sizeof ( pData -> mqtt_timeout ) ) ; }",0
469,"<S2SV_ModStart> struct flowi6 fl6 ; int ret <S2SV_ModStart> daddr ) ; ret = ip6_xmit ( sk, skb, & fl6, np -> opt, np -> tclass ) ; if ( ret < 0 ) return ret ; <S2SV_ModStart> = 1 ; if (! ( transport -> param_flags & SPP_PMTUD_ENABLE ) ) skb -> local_df = 1 ; <S2SV_ModStart>, & fl6 <S2SV_ModEnd> ) ; return",0
470,"<S2SV_ModStart> ; if ( ( <S2SV_ModStart>, size ) ) == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModEnd> if ( quantum_info",0
471,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> UINT32 failureCode ; if (! s ) { WLog_ERR ( TAG, ""Invalid <S2SV_blank> negotiation <S2SV_blank> failure <S2SV_blank> stream"" ) ; return ; }",0
472,"<S2SV_ModStart> 0 ; int <S2SV_ModEnd> result = RLC_OK <S2SV_ModStart> 8 ) ; if ( bn_is_zero ( t ) ) { bn_zero ( m ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, RSA_PUB ) ; * p_len = k_len - 3 - m_len ; for ( int i = 0 ; i < * p_len ; i ++ ) { bn_lsh ( m, m, 8 ) ; do { rand_bytes ( & pad, 1 ) ; bn_add_dig ( m, m, pad ) ; } bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, 0 ) ; bn_lsh ( m, m, m_len * 8 ) ; } bn_lsh ( m, m, m_len * 8 ) ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> pad!= RSA_PUB <S2SV_ModStart>!= RSA_PUB ) <S2SV_ModEnd> { result = <S2SV_ModStart> 8 ) ; if ( bn_is_zero ( t ) ) { result = RLC_ERR ; } * p_len = m_len ; m_len -- ; bn_rsh (",0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,"<S2SV_ModStart> 8 ) ; psf = psf_calloc ( 1, sizeof ( SF_PRIVATE ) ) ; if ( psf <S2SV_ModEnd> == NULL )",0
475,"<S2SV_ModStart> void fix_interp_filter ( VP9_COMMON_CONTEXT * ctx, <S2SV_ModStart> += cm -> counts_switchable <S2SV_ModEnd> [ j ]",0
476,"<S2SV_ModStart> & cpi -> encode_frame <S2SV_ModEnd> ; VP9_COMMON * <S2SV_ModStart> mi_cols ) ; <S2SV_ModEnd> vp9_setup_src_planes ( x <S2SV_ModStart> ( x, cpi -> encode_frame <S2SV_ModEnd>, 0, <S2SV_ModStart> subsampling_y ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
477,"<S2SV_ModStart> hp ) ; if ( htc_request_check_url_hdr ( hp )!= 0 ) { WSPR ( sp, SLT_Error, ""Duplicated <S2SV_blank> URL <S2SV_blank> header"" ) ; return ( retval ) ; } <S2SV_ModStart>, SLT_Error, ""Duplicated <S2SV_blank> Host <S2SV_blank> header"" <S2SV_ModEnd> ) ; return",0
478,"<S2SV_ModStart> EOFOp 0x07 char * magick_buffer <S2SV_ModEnd> ; Image * <S2SV_ModStart> ) ) ; magick_buffer = ( char * ) malloc ( 12 ) ; <S2SV_ModStart>, 2, magick_buffer <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( count!= 12 ) || ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart>. x = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. y = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. columns = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. rows = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. background_color = ( char * ) malloc ( sizeof ( background_color ) ) ; memcpy ( background_color, ( char * ) p, sizeof ( background_color ) ) ; if (! background_color ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; image -> background_color = background_color ; image -> background_color_length = ( size_t ) ( ( size_t ) ( ( size_t ) pixels - ( size_t ) pixels ) ) ; image -> background_color_length = ( size_t ) ( ( size",0
479,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> sizeof ( tETH_HDR ),1
480,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ps_dec -> s_cur_slice <S2SV_ModStart> -> u4_first_slice_pic_in_slice_flag ) { if (! ps_dec -> s_cur_slice_pic_in_slice_flag ) { <S2SV_ModStart> = 0 ; } else { ps_dec -> s_cur_slice_pic_in_slice_flag = 1 ; } },0
481,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> * karg ; <S2SV_ModEnd> struct pci_dev * <S2SV_ModStart> pci_dev * pdev <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> ; int iocnum <S2SV_ModEnd> ; int cim_rev <S2SV_ModStart> ) ) ; goto err_free_karg <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; goto err_free_karg <S2SV_ModEnd> ; } if <S2SV_ModStart> karg ) ; goto err_free_karg <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; goto err_free_karg <S2SV_ModEnd> ; } sdev <S2SV_ModStart> ) ) ; goto err_free_karg <S2SV_ModEnd> ; } sdev <S2SV_ModStart> ) ) ; goto err_free_karg <S2SV_ModEnd> ; } sdev <S2SV_ModStart> ) ) ; goto err_free_karg <S2SV_ModEnd> ; } sdev <S2SV_ModStart> ) ) ; goto err_free_karg <S2SV_ModEnd> ; } sdev <S2SV_ModStart> ) ) ; goto err_free_karg <S2SV_ModEnd> ; } sdev <S2SV_ModStart> ) ) ; goto err_free_karg <S2SV_ModEnd> ; } sdev <S2SV_ModStart> ) ) ; goto err_free_karg <S2SV_ModEnd> ; } sdev <S2SV_ModStart> ) ) ; goto err_free_karg <S2SV_ModEnd> ; } sdev <S2SV_ModStart> ) ) ; goto err_",0
482,<S2SV_ModStart> = 8 ; image -> rows_max = 256 ;,0
483,"<S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv",0
484,"<S2SV_ModStart> ; if ( datao + 8 > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> order = EXIF_BYTE_ORDER_INTEL ; datao += exif_get_long ( buf + datao + 8, EXIF_BYTE_ORDER_INTEL ) ; if ( <S2SV_ModStart> ( datao + <S2SV_ModEnd> 2 < datao <S2SV_ModStart> ( datao + <S2SV_ModEnd> 2 < 2 <S2SV_ModStart> ( o + <S2SV_ModEnd> 12 < o <S2SV_ModStart> ( o + <S2SV_ModEnd> 12 < o <S2SV_ModStart> ( o + <S2SV_ModEnd> 2 > buf_size",0
485,"<S2SV_ModStart> ; if (! viewfile ) { L_ERROR ( ""viewfile <S2SV_blank> not <S2SV_blank> found"", procName ) ; return 1 ; } if (",0
486,"<S2SV_ModStart> void unbind_ports ( int num_ports <S2SV_ModEnd> ) { SERVICE_OPTIONS <S2SV_ModStart> 1 ) ; if ( num_ports < 1 ) return ; <S2SV_ModStart>. next ; if ( num_ports > MAX_SERVICE_PORTS ) { s_log ( LOG_ERR, ""Too <S2SV_blank> many <S2SV_blank> ports <S2SV_blank> to <S2SV_blank> unbind"" ) ; return ; } <S2SV_ModStart> 0 ; } <S2SV_ModEnd> s_log ( LOG_DEBUG <S2SV_ModStart> servname ) ; <S2SV_ModEnd> CRYPTO_THREAD_unlock ( stunnel_locks",0
487,<S2SV_ModStart> void ) { if (! recovery_started ) return ;,0
488,"<S2SV_ModStart> ; } } if ( hashTable [ 0 ] == ENC624J600_EHT_NONE ) { return E_NOT_SUPPORTED ; } <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ;",0
489,"<S2SV_ModStart> image ) ; if ( image -> header. image_size > image -> header. image_size ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
490,"<S2SV_ModStart> { WORD32 i, j <S2SV_ModStart> ) ; } for ( j = 0 ; j < u4_num_total_curr ; j ++ ) { if ( ai4_num_st_curr_before [ j ] == 0 ) continue ; if ( ai4_num_st_curr_after [ j ] == 0 ) continue ; if ( ai4_num_st_curr_after [ j ] == 0 ) continue ; if ( ai4_num_st_curr_before [ j ] == 0 ) continue ; if ( ai4_num_st_curr_after [ j ] == 0 ) continue ; if ( ai4_num_lt_curr [ j ] == 0 ) continue ; if ( ai4_num_lt_curr [ j ] == 0 ) continue ; if ( ai4_num_lt_curr [ j ] == 0 ) continue ; if ( ai4_num_lt_curr [ j ] == 0 ) continue ; if ( ai4_num_lt_curr [ j ] == 0 ) continue ; if ( ai4_num_lt_curr [ j ] == 0 ) continue ; if ( ai4_num_lt_curr [ j ] ==",0
491,"<S2SV_ModStart>, int fmt, int * indent <S2SV_ModStart> child ) { if ( indent ) * indent ++ ='<S2SV_blank>'; <S2SV_ModStart> = print_string_ptr ( indent <S2SV_ModEnd> ) ; entries <S2SV_ModStart> child ) { if ( indent ) * indent ++ ='<S2SV_blank>'; <S2SV_ModStart> = ret = print_value_ptr ( indent <S2SV_ModEnd>, fmt ) <S2SV_ModStart> = 1 ; if (! out ) fail = 1 ; <S2SV_ModStart> next ; } * indent = 0 ; <S2SV_ModStart> fail ) { * indent ++ = 0 ; <S2SV_ModStart> + 1 ; * indent ++ = '\\n' ; * indent ++ = 0 ; for ( i = 0 ; i < numentries ; ++ i ) { if ( names [ i ] ) cJSON_free ( names [ i ] ) ; if ( entries [ i ] ) cJSON_free ( entries [ i ] ) ; } cJSON_free ( entries ) ; return 0 ; } * out = '{' ; ptr = out + 1 ; if ( fmt ) * ptr ++ = '\\t' ; * ptr = 0 ; for ( i = 0 ; i < numentries ; ++ i ) { if ( fmt ) for ( j = 0 ; j < depth ; ++ j ) * ptr ++ = '\\t' ; strcpy (",0
492,<S2SV_ModStart> sk ) ; if ( writable ) { unix_state_lock ( sk ) ; other = unix_peer ( sk ) ; if ( other && unix_peer ( other ) == sk ) unix_state_unlock ( sk ) ; } <S2SV_ModStart> ; if ( unix_dgram_peer ( sk )!= sk ) { unix_state_unlock ( sk ) ; <S2SV_ModEnd> sock_poll_wait ( file <S2SV_ModStart> = 0 ; <S2SV_ModEnd> sock_put ( other,0
493,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; outpos += strlen ( outputbuffer ) ;",0
494,<S2SV_ModStart> ( OM_uint32 ) KRB5_BAD_IOV <S2SV_ModEnd> ; return GSS_S_DEFECTIVE_TOKEN,0
495,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vp9_ref_frame_t * ) ; YV12_BUFFER_CONFIG * fb <S2SV_ModStart> NULL ) { <S2SV_ModEnd> vp9_get_reference_enc ( ctx",0
496,<S2SV_ModStart> plug ) ; <S2SV_ModEnd> put_ioctx ( ctx,0
497,"<S2SV_ModStart> name, int rec_quick <S2SV_ModEnd> ) { int <S2SV_ModStart> ) ) { <S2SV_ModEnd> DBUG_RETURN ( ""mi_repair_by_sort"" <S2SV_ModStart> ) ) { <S2SV_ModEnd> DBUG_RETURN ( ""mi_repair_by_sort_by_key""",0
498,"<S2SV_ModStart> s } ; <S2SV_ModEnd> uECC_word_t carry ; <S2SV_ModStart> curve ) ; if (! <S2SV_ModStart>, curve ) ) { return 0 ; } <S2SV_ModEnd> if ( uECC_vli_isZero",0
499,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|dao-truncated]"" <S2SV_ModEnd> ) ) ;",0
500,<S2SV_ModStart> ; } else if ( buf -> data == NULL ) { free ( buf ) ; return ; } else <S2SV_ModStart> ) ; } return ;,0
501,"<S2SV_ModStart> tp ; { int i = 0 ; <S2SV_ModStart> ] ) { <S2SV_ModEnd> const char hex <S2SV_ModStart> const char hex [ ] = ""00112233445566778899aAbBcCdDeEfF"" ; const char * dp ; int dcount = 0 ; for ( <S2SV_ModEnd> ; * cp <S2SV_ModStart> * dp ; for ( <S2SV_ModEnd> ; * cp <S2SV_ModStart> == 'X' ) { for ( <S2SV_ModEnd> ; * cp <S2SV_ModStart> 2 ) ; } <S2SV_ModStart> == 'O' ) { for ( <S2SV_ModEnd> ; * cp <S2SV_ModStart> cp ; } } else if ( * cp == '^' && cp [ 1 ] ) { cval = ( * ++ cp & 0x1f ) ; cp ++ ; } else if ( meta ) cval = * cp ++ ; if ( cval == '\\0' ) cval = * cp ++ ; if ( meta ) cval = * cp ++ ; if ( cval == '\\0' ) cval = '\\0' ; if ( cp [ 1 ] ) cval = ( * cp & 0x1f ) ; cp ++ ; } else if ( * cp == '^' && cp [ 1 ] ) { cval = ( * ++ cp & 0x1f ) ; cp ++ ; } else cval",0
502,"<S2SV_ModStart> char detect [ 5 <S2SV_ModEnd> ] ) { <S2SV_ModStart> ( detect, ""YUV5"" <S2SV_ModEnd>, 4 )",0
503,"<S2SV_ModStart>, * pixd, * pixc_tmp <S2SV_ModStart> == NULL ) { pixc_tmp = pixc ; <S2SV_ModStart> NULL ) ; } <S2SV_ModStart> == NULL ) { pixc_tmp = pixc ; <S2SV_ModStart> NULL ) ; } <S2SV_ModStart> == NULL ) { pixc_tmp = pixc ; <S2SV_ModStart> NULL ) ; } <S2SV_ModStart> == NULL ) { pixc_tmp = pixc ; <S2SV_ModStart> NULL ) ; } <S2SV_ModStart> == NULL ) { pixc_tmp = pixc ; <S2SV_ModStart> NULL ) ; }",0
504,<S2SV_ModStart>. vf = vpx_mse16x16 <S2SV_ModEnd> ; xd ->,1
505,<S2SV_ModStart> int overhead = 15 <S2SV_ModEnd> + 4 + <S2SV_ModStart> int size = 15 <S2SV_ModEnd> ; if (,0
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NEGO_STATE_FAIL ; goto fail <S2SV_ModEnd> ; } Stream_Read_UINT8 <S2SV_ModStart> = NEGO_STATE_FINAL ; fail : return ;,0
507,"<S2SV_ModStart> i, target_bits_per_mb ; const int correction_factor = get_rate_correction_factor ( cpi ) <S2SV_ModStart> i, target_bits_per_mb <S2SV_ModEnd> ; target_bits_per_mb = <S2SV_ModStart>, i, <S2SV_ModEnd> correction_factor ) ;",0
508,<S2SV_ModStart> ; value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1101WritePhyReg (,0
509,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
510,"<S2SV_ModStart> int dst_stride, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart> int i ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> uint8_t, left_col [ 64 ] <S2SV_ModStart> uint8_t, above_data [ 128 ] <S2SV_ModStart> plane ] ; <S2SV_ModEnd> if ( plane <S2SV_ModStart> + y ; memset <S2SV_ModEnd> ( left_col, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( right_col, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( right_col, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row",0
511,"<S2SV_ModStart> ++ ; } else if ( pattern [ end ] == \'""\' ) { end ++ ; while ( ( pattern [ end ]!= 0 ) && ( pattern [ end ]!= \'""\' ) ) end ++ ; }",0
512,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_mmap_lock ) ;,0
513,"<S2SV_ModStart> * cpi, VP9_COMMON * cm, <S2SV_ModStart> -> common ; write_profile ( <S2SV_ModEnd> cm -> profile <S2SV_ModStart> wb ) ; write_bit ( wb, 0 ) ; write_bit ( wb, <S2SV_ModEnd> cm -> frame_type <S2SV_ModStart> cm -> frame_type <S2SV_ModEnd> ) ; if <S2SV_ModStart> KEY_FRAME ) { write_bit ( wb, 0 ) ; write_bit ( wb, cm -> show_frame ) ; write_bit ( wb, cm -> error_resilient_mode ) ; <S2SV_ModStart> COLOR_SPACE cs = <S2SV_ModEnd> cm -> profile <S2SV_ModStart> profile > PROFILE_1? UNKNOWN : <S2SV_ModEnd> cm -> bit_depth <S2SV_ModStart> cm -> bit_depth ; <S2SV_ModEnd> write_sync_code ( wb <S2SV_ModStart> ; if ( <S2SV_ModEnd> cs!= SRGB <S2SV_ModStart> } else { write_bit ( wb, 0 ) ; } write_frame_size ( cm, wb ) ; } else { if (! cm -> show_frame ) vp9_wb_write_bit ( wb, cm -> intra_only ) ; if (! cm -> error_resilient_mode ) vp9_wb_write_literal ( wb, cm -> reset_frame_context, 2 ) ; if (! cm -> intra",0
514,"<S2SV_ModStart> ; if ( optind < 1 ) { fprintf ( stderr, ""Error: <S2SV_blank> %s\\n"", strerror ( errno ) ) ; return ; } if (",0
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { q = osStrchr <S2SV_ModEnd> ( p +,1
516,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
517,<S2SV_ModStart> KEY_FRAME ) { memcpy <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd ->,1
518,"<S2SV_ModStart> error_t error ; int16_t <S2SV_ModEnd> n ; uint32_t <S2SV_ModStart> ; uint32_t status ; uint8_t * data ; uint16_t nextPacket <S2SV_ModStart> -> nicContext ; data = ( uint8_t * ) interface -> data ; <S2SV_ModStart> ( interface, ENC624J600_ESTAT <S2SV_ModEnd> ) & ESTAT_PKTCNT <S2SV_ModStart> ( interface, ENC624J600_CMD_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL <S2SV_ModEnd>, ENC624J600_RX_BUFFER_STOP ) <S2SV_ModStart> ( interface, ENC624J600_ERXT",0
519,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv, VALUE klass, VALUE content, VALUE * * stack, VALUE * stack_ptr <S2SV_ModEnd> ) { xmlSchemaPtr <S2SV_ModStart> xmlSchemaPtr schema ; VALUE rb_schema ; VALUE errors ; VALUE error ; <S2SV_ModStart> content ) ) <S2SV_ModEnd> ; VALUE errors <S2SV_ModStart> errors ) ; * stack_ptr = rb_ary_new ( ) ; xmlSetStructuredErrorFunc ( NULL, NULL ) ; xmlSetParserStructuredErrors ( ctx, NULL, NULL ) ; error = xmlGetLastError ( ) ; if ( error ) Nokogiri_error_raise ( NULL, error ) ; else rb_raise ( rb_eRuntimeError, ""Could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> document"" ) ; return Qnil ;",0
520,<S2SV_ModStart> ) ; } if ( strlen ( config_arg ) > 0 ) { <S2SV_ModStart> = config_arg ; },0
521,<S2SV_ModStart> 2 ] ; if ( x + 4 > state -> xsize ) return - 1 ; <S2SV_ModStart> 2 ] ; if ( x + 5 > state -> xsize ) return - 1 ;,0
522,<S2SV_ModStart> err = - <S2SV_ModEnd> EALREADY ; if,0
523,<S2SV_ModStart> POLL_IN ) ; <S2SV_ModEnd> perf_event_wakeup ( handle,0
524,"<S2SV_ModStart> int len, u16 <S2SV_ModEnd> * pwcs ) <S2SV_ModStart> * s && ( len >= 2 ) <S2SV_ModEnd> ) { if <S2SV_ModStart> ; if ( len < size ) return - EINVAL ; if ( <S2SV_ModStart> PLANE_SIZE ) { if ( u < PLANE_SIZE ) { return - EINVAL ; } <S2SV_ModStart> ( u & ( PLANE_BITS - 1 ) <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( wchar_t ) <S2SV_ModEnd> u ; } <S2SV_ModStart> } else { if ( len < size ) return - EINVAL ; <S2SV_ModStart> * s ++ ; len -- <S2SV_ModStart> } } return ( u16 * )",0
525,"<S2SV_ModStart> EPROTONOSUPPORT ) { crm_trace ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" ) ; if ( as_console ) { sleep ( 2 ) ; } rc = pcmk_ok ; } } if ( rc == pcmk_ok ) { cib -> cmds -> del_notify_callback ( cib, T_CIB_DIFF_NOTIFY, crm_diff_update ) ; if ( as_console ) { sleep ( 2 ) ; } rc = pcmk_ok ; } } if ( rc == pcmk_ok ) { cib -> cmds -> del_notify_callback ( cib, T_CIB_DIFF_NOTIFY, crm_diff_update ) ; if ( as_console ) { sleep ( 2 ) ; } rc = pcmk_ok ; } } if ( rc == pcmk_ok ) { <S2SV_ModStart> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" <S2SV_ModEnd> ) ; if",0
526,"<S2SV_ModStart> -> nicContext ; if ( ( context -> rxBufferSize < ETH_MAX_FRAME_SIZE ) || ( context -> rxBufferSize > MAX_PACKET_SIZE ) ) { return ERROR_INVALID_PACKET ; } <S2SV_ModStart> ( interface, KSZ8851_RXFHSR ) ; if ( ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXMR <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( interface, KSZ8851_RXFDPR, KSZ8851_RXFDPR_RXFPAI <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851ReadFifo <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ancillary <S2SV_ModStart> ( interface, KSZ8851_RXQCR, K",0
527,"<S2SV_ModStart> ast_for_funcdef_impl ( struct compiler * c, const node * n, asdl_seq * decorator_seq, int is_async ) { identifier name ; arguments_ty args ; asdl_seq * body ; expr_ty returns = NULL ; int name_i = 1 ; node * tc ; string type_comment = NULL ; if ( c -> c_feature_version < 5 ) { ast_error ( c, n, ""Async <S2SV_blank> functions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.5 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } REQ ( n, funcdef ) ; name = NEW_IDENTIFIER ( CHILD ( n, name_i ) ) ; if (! name ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i ), 0 ) ) return NULL ; args = ast_for_arguments ( c, CHILD ( n, name_i + 1 ) ) ; if (! args ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 2 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name",0
528,"<S2SV_ModStart> int i ; if ( mm_is_pmd_cache_coherent ( mm ) ) return ; <S2SV_ModStart> mm, 0xA0000 ) ; if ( pgd_none_or_clear_bad ( pgd ) ) goto out ; pud = pud_offset ( pgd, 0xA0000",0
529,"<S2SV_ModStart> ; } } if ( 0!= ( * packet_data_pptr ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> packet_data_pptr <S2SV_blank> is <S2SV_blank> NULL!"" ) ; return - 1 ; }",0
530,"<S2SV_ModStart> ) ) { if (! is_valid_address ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> invalid <S2SV_blank> address <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; }",0
531,<S2SV_ModStart> 0 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif <S2SV_ModStart> row ++ ) <S2SV_ModEnd> for ( col <S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif,0
532,<S2SV_ModStart> len < needed || len > param -> data_start,0
533,"<S2SV_ModStart> ; if ( ( <S2SV_ModStart>, filepos ) ) == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModEnd> if ( quantum_info",0
534,<S2SV_ModStart> ( bfqq ) bfq_queue_body_or_abort <S2SV_ModEnd> ( bfqq ),0
535,<S2SV_ModStart> ; length += sizeof ( PRIMARY_DRAWING_ORDER_FIELD ) <S2SV_ModEnd> ; length +=,0
536,<S2SV_ModStart> d_inode ) { if (! new_create ) { <S2SV_ModStart> goto out ; },0
537,"<S2SV_ModStart> int plane ; if ( xd -> plane_count > MAX_MB_PLANE ) { vpx_foreach_transformed_block_in_plane ( xd, bsize, visit, arg ) ; return ; }",0
538,"<S2SV_ModStart> * cpi, TileDataEnc * tile_data <S2SV_ModEnd>, int mi_row <S2SV_ModStart> -> e_mbd ; TileInfo * tile_info = & tile_data -> tile_info ; <S2SV_ModStart> ( cpi, tile_data <S2SV_ModEnd>, mi_row, <S2SV_ModStart> ( cpi, tile_data <S2SV_ModEnd>, mi_row, <S2SV_ModStart> ( cpi, tile_data <S2SV_ModEnd>, mi_row,",0
539,"<S2SV_ModStart> = NULL ; reader. gcol = gcolGet ( reader. gcol ) ; if (! reader. gcol ) { log ( ""cannot <S2SV_blank> get <S2SV_blank> gcol <S2SV_blank> from <S2SV_blank> %s\\n"", filename ) ; * err = EINVAL ; return NULL ; }",0
540,"<S2SV_ModStart> -> ranges = calloc ( 1, <S2SV_ModEnd> sizeof ( MappedRange",0
541,<S2SV_ModStart> pkt_list ) ; ctx -> last_frame_id = 0 ;,0
542,"<S2SV_ModStart> ; if ( ( <S2SV_ModStart>, size ) ) == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModEnd> if ( quantum_info",0
543,<S2SV_ModStart> event ) ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
544,"<S2SV_ModStart> * pptr, u_int64 <S2SV_ModEnd> len ) { <S2SV_ModStart> advance ) { u_int64 <S2SV_ModEnd> i ; uint16_t",0
545,"<S2SV_ModStart>, ""<tr><td>Runtime <S2SV_blank> time</td><td>%s</td></tr>"", Monit. time <S2SV_ModEnd> ) ; StringBuffer_append",0
546,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
547,"<S2SV_ModStart>, ""%s"", <S2SV_ModEnd> arStr ) ;",0
548,<S2SV_ModStart> j < n && j < nalts [ j ],0
549,"<S2SV_ModStart>, 0, PERF_OUTPUT_MODE_READ <S2SV_ModEnd> ) ; if",0
550,<S2SV_ModStart> ; distortion = vpx_variance16x16 <S2SV_ModEnd> ( * (,1
551,<S2SV_ModStart> interface ) ; <S2SV_ModEnd> if ( macCompAddr <S2SV_ModStart> ) ) { <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> temp ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart> ] ) ; <S2SV_ModEnd> interface -> macAddr <S2SV_ModStart>,0
552,<S2SV_ModStart> * start ; if ( psf -> header == NULL ) return ; <S2SV_ModStart> header ) ; if ( maxlen > sizeof ( psf -> header ) ) return ; <S2SV_ModStart> ; start = psf -> header + strlen ( <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header ) ; if ( start > psf -> header + sizeof ( psf -> header ) ) return <S2SV_ModEnd> ; maxlen = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> return ; },0
553,<S2SV_ModStart> ; else { vpx_codec_alg_priv_destroy ( ctx <S2SV_ModEnd> ) ; ctx,0
554,<S2SV_ModStart> { sf -> <S2SV_ModEnd> recode_loop = ( <S2SV_ModStart> 1 ) { if (! frame_is_intra_only ( cm ) ) { sf -> use_square_partition_only = 1 ; } else { <S2SV_ModStart> cm ) ; } <S2SV_ModStart> ; sf -> <S2SV_ModEnd> tx_size_search_method = vp9_frame_is_boosted <S2SV_ModStart> ; sf -> <S2SV_ModEnd> mode_skip_start = 10 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> recode_loop = ALLOW_RECODE_KFARFGF <S2SV_ModStart> = 1 ; <S2SV_ModEnd> } if ( <S2SV_ModStart> 2 ) { if (! frame_is_intra_only ( cm ) ) { sf -> use_square_partition_only = 1 ; sf -> less_rectangular_check = 1 ; } else { <S2SV_ModStart> = USE_LARGESTALL ; } <S2SV_ModStart> = 1 ; if (! frame_is_intra_only ( cm ) ) { sf -> use_square_partition_only = 1 ; } else { sf -> use_square_partition_only = 0 ; } <S2SV_ModStart> = 1 ; if (! frame_is_intra_only ( cm ) ) { sf -> use_square_partition_only = 1 ; } else { <S2SV_ModStart>,0
555,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ]. poll_count ),0
556,<S2SV_ModStart> int goodsize = ( int ) ( <S2SV_ModStart> 2 * EXTRA_STACK ),0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,<S2SV_ModStart> n ) ; if (! str ) { return NULL ; } <S2SV_ModStart> errstr ) { <S2SV_ModEnd> Py_DECREF ( type,0
559,"<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> break ; } input_string = strdup ( option_value ) ; option_name = strtok_r ( option_name, ""="", & input_ptr ) ; while ( option_name!= NULL ) { option_value = strtok_r ( NULL, "" <S2SV_blank> "", & input_ptr ) ; if ( option_value == NULL ) { svc_log ( svc_ctx, SVC_LOG_ERROR, ""option <S2SV_blank> missing <S2SV_blank> value: <S2SV_blank> %s\\n"", option_name ) ; res = VPX_CODEC_INVALID_PARAM ; break ; } <S2SV_ModStart> ( strcmp ( <S2SV_ModEnd> ""layers"", option_name <S2SV_ModStart> ) break ; svc_ctx -> spatial_layers = atoi ( option_value ) ; } else if ( strcmp ( ""scale-factors"", option_name ) == 0 ) { res = parse_scale_factors ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers"", option_name ) == 0 ) { res = parse_quantizer_values",0
560,<S2SV_ModStart> ) ; } fclose ( mvs ) ; fclose ( <S2SV_ModEnd> mvs ) ;,0
561,<S2SV_ModStart> self ) { size_t <S2SV_ModEnd> i ; PyObject,1
562,,1
563,"<S2SV_ModStart> ) ) { if ( mysql_errno ( imp_dbh -> pmysql ) == MYSQL_ERROR_OK ) { PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""mysql_errno <S2SV_blank> = <S2SV_blank> %d\\n"", mysql_errno ( imp_dbh -> pmysql ) ) ; } else { <S2SV_ModStart> ) ) ; }",0
564,<S2SV_ModStart> size ) ) { <S2SV_ModStart> slot_lock ) ; return ; },0
565,<S2SV_ModStart> struct ieee_802_11_phdr phdr ; gboolean mpdu_len_set = FALSE <S2SV_ModStart> ; if ( mpdu_len > 0 && <S2SV_ModStart> ) ; } mpdu_len_set = TRUE ;,0
566,<S2SV_ModStart> ; sh = sds_malloc <S2SV_ModEnd> ( hdrlen +,0
567,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> BYTE a_val ; BOOL is_bit_depth_valid = FALSE ; <S2SV_ModStart> -> ColorLossLevel ; is_bit_depth_valid = ( context -> priv -> Flags & NSC_FLAG_BIT_DEPTH_VALID )!= 0 ; <S2SV_ModStart> ; } } return is_bit_depth_valid ;,0
568,<S2SV_ModStart> > nr_parens ) { ret = <S2SV_ModEnd> - EINVAL ; <S2SV_ModStart> - EINVAL ; goto out_free ; },0
569,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> RATE_CONTROL * rc <S2SV_ModStart> rc = & ( <S2SV_ModStart> cpi -> rc ) <S2SV_ModStart> target = ( <S2SV_ModEnd> rc -> frames_since_key <S2SV_ModStart> rc -> frames_since_key > 0? rc -> frames_since_key : <S2SV_ModEnd> rc -> frames_since_key <S2SV_ModStart> rc -> frames_since_key <S2SV_ModEnd> ; } target,0
570,"<S2SV_ModStart> TX_MODE read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> == ALLOW_32X32 ) return ALLOW_32X32 <S2SV_ModEnd> ; return tx_mode",0
571,"<S2SV_ModStart> : # line 1046 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> } # line 1046 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 1051 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1057 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1066 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1066 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 1059 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 1061 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1072 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1080 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 1072 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> } # line 1072 <S2SV_ModEnd> ""re_grammar.c"" break ;",0
572,"<S2SV_ModStart> -> cpi ; MACROBLOCKD_EXT * const xd = args -> xd ; MACROBLOCKD_EXT * const fc = & cpi -> fc ; <S2SV_ModStart> p = & fc -> <S2SV_ModEnd> plane [ plane <S2SV_ModStart> plane_type ; const TX_SIZE tx_size = fc -> tx_size ; const <S2SV_ModStart> = BLOCK_OFFSET ( fc <S2SV_ModEnd> -> qcoeff, <S2SV_ModStart> UNCONSTRAINED_NODES ] = fc -> <S2SV_ModEnd> fc. coef_probs <S2SV_ModStart> = cpi -> counts <S2SV_ModEnd>. eob_branch [ <S2SV_ModStart> = cpi -> counts <S2SV_ModEnd>. eob_branch [",0
573,"<S2SV_ModStart>. pRename ; Select_t * pSelectCopy = pSelect ; <S2SV_ModStart> -> pSrc ; if ( pSelectCopy -> selFlags & SF_SelectCopy_NoDuplicate ) { renameWalkWith ( pWalker, pSelectCopy ) ; return WRC_Continue ; }",0
574,<S2SV_ModStart> users ) ; if ( sv_ops -> set_auth_buf ) { struct nfs4_callback_program program ; program. ops = sv_ops ; program. set_auth_buf = nfs4_cb_set_auth_buf ; },0
575,"<S2SV_ModStart> * rop, <S2SV_ModEnd> PointZZ_p * point <S2SV_ModStart> curve ) { const mpz_t scalar_base = pointZZ_sizeinbase ( scalar, 2 ) ; const mpz_t curve_base = curveZZ_sizeinbase ( curve, 2 ) ; <S2SV_ModStart>. x, point_base <S2SV_ModEnd> -> x ) <S2SV_ModStart>. y, point_base <S2SV_ModEnd> -> y ) <S2SV_ModStart> ( i = dbits - 2 ; i >= 0 ; i -- ) { if ( mpz_tstbit ( scalar, i ) ) { mpz_set ( tmp. x, R0. x ) ; mpz_set ( tmp. y, R0. y ) ; pointZZ_pAdd ( & R0, & R1, & tmp, curve ) ; mpz_set ( tmp. x, R0. x ) ; mpz_set ( tmp. y, R0. y ) ; pointZZ_pDouble ( & R1, & tmp, curve ) ; } else { mpz_set ( tmp. x, R0. x ) ; mpz_set ( tmp. y, R0. y ) ; pointZZ_pAdd ( & R1, & R0",0
576,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
577,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
578,"<S2SV_ModStart> s ) { if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) ) ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> retrying"", sock_fd, errno ) ; break ; } <S2SV_ModEnd> ret = send",0
579,"<S2SV_ModStart> = NULL ; int i = 0 ; <S2SV_ModStart> next ) { if ( strcmp ( prop_name, XML_ATTR_ID ) == 0 ) { continue ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else { char * path = xml_get_path ( xml ) ; crm_trace ( ""Cannot <S2SV_blank> add <S2SV_blank> new <S2SV_blank> node <S2SV_blank> %s <S2SV_blank> at <S2SV_blank> %s"", crm_element_name ( xml ), path ) ; if ( xml!= xmlDocGetRootElement ( xml -> doc ) ) { xmlUnlinkNode ( xml ) ; xmlFreeNode ( xml ) ; } free ( path ) ; return ; } } else { <S2SV_ModStart> ; } } <S2SV_ModEnd> while ( cIter",0
580,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> SvcInternal * get_const_svc_internal <S2SV_ModStart> NULL ; return <S2SV_ModEnd> svc_ctx -> internal,0
581,<S2SV_ModStart> ) ) { zval * zval = * * current_param ; <S2SV_ModStart> ) ) { zval = * * current_args ; <S2SV_ModStart> ) ) { zval = * * current_param ; <S2SV_ModStart> ) ) { zval = * * current_param ; <S2SV_ModStart> ) ) { zval = * * current_args ; <S2SV_ModStart> ) ) { zval = * * current_param ; <S2SV_ModStart> ) ) { zval = * * current_param ; <S2SV_ModStart> ) ) { zval = * * current_param ; <S2SV_ModStart> ) ) { zval = * * current_param ; <S2SV_ModStart> ) ) { zval = * * current_args ; <S2SV_ModStart> ) ) { zval = * * current_param ; <S2SV_ModStart> ) ) { zval = * * current_param ; <S2SV_ModStart> ) ) { zval = * * current_args ; <S2SV_ModStart> ) ) { zval = * * current_param ; <S2SV_ModStart> ) ) { zval = * * current_param ; <S2SV_ModStart> ) ) { zval = * * current_param ; <S2SV_ModStart> ) ) { zval = * * current_param ; <S2SV_ModStart> ) ) { zval = * * current_args ;,0
582,"<S2SV_ModStart> only_420 ) { int i ; <S2SV_ModStart> char buffer [ 80 <S2SV_ModEnd> ] ; int <S2SV_ModStart> -> vpx_bps = 24 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_bps = 24 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_bps = 24 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_bps = 24 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_bps = 24 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_bps = 24 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_bps = 24 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_bps = 24 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chrom",0
583,"<S2SV_ModStart> buf ; { char * name = strdup ( buf ) ; <S2SV_ModStart> * otmp = read_objnam <S2SV_ModEnd> ( buf, <S2SV_ModStart> ( buf, name <S2SV_ModEnd> ) ; if",0
584,<S2SV_ModStart> ( ) { <S2SV_ModEnd> if ( read_xattrs_from_disk <S2SV_ModStart> 0 ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> FALSE ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> FALSE ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> FALSE ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> read_fragment_table ( & sBlk. s. <S2SV_ModStart> FALSE ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> FALSE ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> FALSE ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == FALSE ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == FALSE ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == FALSE ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == FALSE ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == FALSE ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> return TRUE ; return 1 ;,0
585,"<S2SV_ModStart> rule * rule, u_int flags <S2SV_ModStart> count = 0 ; env -> flags = flags <S2SV_ModStart> ; } } if ( flags & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ]!= NULL ; i ++ ) { struct envnode * node ; const char * e, * eq ; size_t len ; char keybuf [ 1024 ] ; e = strchr ( e, '=' ) ; if ( ( eq = strchr ( e, '=' ) ) == NULL || eq == e ) continue ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf, e + 1, len ) ; node = createnode ( keybuf, eq + 1 ) ; if ( RB_INSERT ( envtree, & env -> root, node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } }",0
586,"<S2SV_ModStart> -> seg ; vpx_memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> int segment ; vpx_memset_safe <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> -> base_qindex, & cpi -> in_frame_q_adj <S2SV_ModEnd> [ segment ]",0
587,"<S2SV_ModStart> = make_type ( ""module"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""module"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""interactive"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""expression"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""suite"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""functiondef"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""asyncfunctiondef"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""classdef"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""return"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""delete"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""assign"" <S2SV_ModEnd>, stmt_type,",0
588,"<S2SV_ModStart> ) ; } if (! access ( log_path, F_OK ) ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> access <S2SV_blank> log <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, log_path, strerror ( errno ) ) ; is_logging = false ; return ; }",0
589,<S2SV_ModStart> ) ; } if ( cpi -> common. frame_type == KEY_FRAME ) { unsigned int * const bct = is_key? b_modes : inter_b_modes ; int b = 0 ; do { ++ bct [ xd -> block [ b ]. bmi. mode ] ; } while ( ++ b < 16 ) ; },0
590,"<S2SV_ModStart> num1, num2, len <S2SV_ModStart>, * StartClean <S2SV_ModEnd> ; SetDefaults ( <S2SV_ModStart> t ++ ; len = strlen ( s ) ; outpos = outputbuffer ; len <S2SV_ModEnd> += sprintf ( <S2SV_ModStart> += sprintf ( len <S2SV_ModEnd>, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"", <S2SV_ModStart> = 1 ; len <S2SV_ModEnd> += sprintf ( <S2SV_ModStart> += sprintf ( len <S2SV_ModEnd>, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", <S2SV_ModStart> ; if ( len > 20 ) len = 20 ; outpos = outputbuffer ; len <S2SV_ModEnd> += sprintf ( <S2SV_ModStart> ; if ( len > 20 ) len = 20 ; outpos = outputbuffer ; len <S2SV_ModEnd> += sprintf ( <S2SV_ModStart> += sprintf ( len <S2SV_ModEnd>, ""%s"", <S2SV_ModStart> ; if ( len > 20 ) len = 20 ; if ( <S2SV_ModStart> = ReadArray ( len <S2SV_ModEnd>, & num1 <S2SV_ModStart> ) return ( len <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; if ( len > 20 <S2SV_ModEnd> ) return ( <S2SV_ModStart> ; if ( len > 20 <S2SV_ModEnd> ) return ( <S2SV_ModStart> ; if ( len > 20 <S2SV_ModEnd> ) return ( <S2SV_ModStart> ; if ( len > 20 <S2SV_ModEnd> ) return ( <S2SV_ModStart> ; if ( len",0
591,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lower, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { int res ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { lower = NULL ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_upper, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { int res ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { upper = NULL ; } if ( lookup_attr_id ( obj, & PyId_step, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { step = NULL ; } * out = Slice ( lower, upper,",0
592,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs ) <S2SV_ModStart> probs ) { vpx_write_token <S2SV_ModEnd> ( w,",0
593,"<S2SV_ModStart> int err ; u32 classid ; <S2SV_ModStart> ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; classid = iter -> band ; <S2SV_ModStart> return - ENOMEM ; match -> band = knode -> res -> classid <S2SV_ModStart> match -> list, & alink -> dscp_map ) ; } if ( match -> band!= classid ) { NL_SET_ERR_MSG_MOD ( extack, ""duplicate <S2SV_blank> filter <S2SV_blank> band <S2SV_blank> %d"", match -> band ) ; err = - EINVAL ; goto err_delete ; } } if (! match -> val ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; err = - EINVAL ; goto err_delete ; } cmask = iter -> mask & mask ; if ( ( iter -> val & cmask ) == ( val & cmask ) && iter -> band!= knode -> res -> classid ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; err = - EINVAL ; goto err_delete ; } cmask = iter -> val & mask ;",0
594,<S2SV_ModStart> ) ; } if ( global -> pass_mode == VPX_ENC_PASS_MODE_TWO ) stream -> config. cfg. g_pass = VPX_RC_ONE_PASS ; else <S2SV_ModStart> : VPX_RC_ONE_PASS ; <S2SV_ModEnd> stream -> config,0
595,"<S2SV_ModStart> ; if (! flatpak_check_export_executable ( new_data, new_data_len, cancellable, error ) ) goto out ; if (",0
596,<S2SV_ModStart> data_end ) { const <S2SV_ModStart> end = NULL <S2SV_ModEnd> ; assert ( <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> aligned_cols ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) * aligned_cols <S2SV_ModEnd> ; for ( <S2SV_ModStart> tile_col ) { memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm ->,0
597,"<S2SV_ModStart> * vp9_decoder_create ( VP9_COMMON * const cm, <S2SV_ModStart> pbi ) ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> = 1 ; vpx_init_dec <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ) ) ; vpx_memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_video_frame = 0 ; vpx_init_dequantizer ( cm ) ; vp9_loop_filter_init ( cm ) ; cm -> error. setjmp = 0 ; vp9_worker_init ( & pbi -> lf_worker ) ; <S2SV_ModStart> current_video_frame = 0 <S2SV_ModEnd> ; return pbi",0
598,"<S2SV_ModStart> dref ) { GF_LOG_DEBUG <S2SV_ModEnd> ( GF_LOG_ERROR, <S2SV_ModStart> GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf <S2SV_blank> %p\\n"", s <S2SV_ModEnd> ) ) ;",0
599,"<S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> -> opt ; rcu_read_lock ( ) ; opt = rcu_dereference_protected ( req_inet -> opt, lockdep_is_held ( & req -> sk_sk -> sk_sk -> sk_sk -> sk_sk_prot ) ) ; if ( opt ) { <S2SV_ModStart> ) return ; } rcu_read_unlock ( ) ;",0
600,"<S2SV_ModStart> tokens, const vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> do { const vpx_tree_index <S2SV_ModEnd> j = tree",1
601,"<S2SV_ModStart> ( img ) { <S2SV_ModStart> img ) ; if ( res!= VPX_CODEC_OK ) { ctx -> base. err_detail = ""Invalid <S2SV_blank> image."" ; return res ; } }",0
602,"<S2SV_ModStart>, & len, 0",1
603,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> in ) { memset ( in, 0, sizeof ( __m128i ) ) ;",0
604,"<S2SV_ModStart> rc, const VP9EncoderConfig <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> ( int64_t ) oxcf -> bandwidth_per_frame <S2SV_ModEnd> * ( int64_t",0
605,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
606,"<S2SV_ModStart> * cpi, MACROBLOCK * const x, <S2SV_ModStart> int mi_col, BLOCK_SIZE bsize, int skip_encode, int skip_optimize, int skip_ref_ptrs <S2SV_ModEnd> ) { VP9_COMMON <S2SV_ModStart> -> common ; <S2SV_ModEnd> MACROBLOCKD * const <S2SV_ModStart> -> mbmi ; <S2SV_ModEnd> const int mis <S2SV_ModStart> bsize ] ; <S2SV_ModEnd> x -> skip_recode <S2SV_ModStart> -> skip_recode = skip_encode <S2SV_ModEnd> ; x -> <S2SV_ModStart> ; if ( skip_encode <S2SV_ModEnd> ) return ; <S2SV_ModStart> } else { if ( x -> skip_recode ) { set_ref_ptrs ( cm, xd, mi -> ref_frame [ 0 ], mbmi -> ref_block [ 1 ] ) ; } else { set_ref_ptrs ( cm, xd, mi -> ref_frame [ 0 ], mbmi -> ref_block [ 1 ] ) ; } } if ( <S2SV_ModStart> -> skip_recode && skip_encode <S2SV_ModEnd> ) { set_ref_ptrs <S2SV_ModStart> -> skip_recode && skip_ref_ptrs <S2SV_ModEnd> ) { set_ref_ptrs <S2SV_ModStart> -> skip_recode && skip_ref_ptrs <S2SV_ModEnd> ) { set_ref_ptrs <S2SV_ModStart>",0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be,0
608,"<S2SV_ModStart> range_max ) { int bits_left, bits_left ; <S2SV_ModStart> position, zeroes <S2SV_ModEnd> ; char bits <S2SV_ModStart> gbc ) ; bits_left = 0 ; bits_left = 0 ; bits_left = 0 ; <S2SV_ModStart> gbc ) < bits_left <S2SV_ModEnd> + 1 ) <S2SV_ModStart> AVERROR_INVALIDDATA ; } bits_left ++ ; <S2SV_ModStart> } if ( bits_left <S2SV_ModEnd> ) { bits <S2SV_ModStart> j ++ ) { if ( bits_left > 64 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } bits [ i ++ ] = '1' ; bits_left ++ ; } else { bits [ i ++ ] = '0' ; bits_left ++ ; } } if ( bits_left <S2SV_ModEnd> >= 32 ) <S2SV_ModStart> : '0' ; bits_left += ( 1 << bits_left ) - 1 ; value += bits_left <S2SV_ModEnd> ; } if",0
609,"<S2SV_ModStart> || strchr ( ""!#$%&\'*+-.^_`|^"" <S2SV_ModEnd>, c ) <S2SV_ModStart> || strchr ( ""!#$%&\'*+-.^_`|^"" <S2SV_ModEnd>, c ) <S2SV_ModStart> || strchr ( ""!#$%&\'*+-.^_`|^"" <S2SV_ModEnd>, c )",0
610,"<S2SV_ModStart>, packet -> http_headers. ptr = NULL, packet -> http_headers. len = 0, packet ->",0
611,"<S2SV_ModStart> { q = QueueAuthenticPixels_internal <S2SV_ModEnd> ( image, <S2SV_ModStart> x ), Max <S2SV_ModEnd> ( 4, <S2SV_ModStart> y ), ( ExceptionInfo * )",0
612,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL ) <S2SV_ModStart> EINTR ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL )",0
613,<S2SV_ModStart> action ) { if ( w < 0 || h < 0 || w > 1 || h > 1 || h > 2 || w > 3 || w > 3 || h > 4 || w > 8 || h > 8 || w > 16 || h > 16 || h > 32 || w > 32 || h > 32 || w > 32 || h > 32 || h > 32 || w > 32 || h > 32 || h > 32 || w > 32 || h > 32 || h > 32 || h > 32 || h > 32 || h > 32 || w > 32 || h > 32 || w > 32 || h > 32 || h > 32 || w > 32 || h > 32 || w > 32 || h > 32 || h > 32 || w > 32 || h > 32 || h > 32 || h > 32 || w > 32 || h > 32 || w > 32 || h > 32 || h > 32 || w > 32 || h > 32 || h > 32 || h > 32 || h > 32 || h > 32 || w > 32 || h > 32 || w > 32 || h > 32 || h > 32 || h > 32 || h > 32 || h > 32 || h > 32 || h > 32 ||,0
614,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; SetMatrix_Internal ( outputbuffer ) ;",0
615,"<S2SV_ModStart> return FALSE ; if ( Stream_GetRemainingLength ( s ) < 4 ) { <S2SV_ModStart> ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" ) ; return FALSE ; }",0
616,<S2SV_ModStart> -> cur_frame_num ; if ( cm -> mb_cols > MAX_COL_PER_ROW ) { vp8_writer_destroy ( & cpi -> tok ) ; return ; },0
617,<S2SV_ModStart> -> b_multithreaded_rd ) { <S2SV_ModStart> mb_rows ) ; },0
618,<S2SV_ModStart> 0 ) { xWantedSize = ( xWantedSize + xHeapStructSize ) & ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; <S2SV_ModStart> 0 ) { if ( xWantedSize > xFreeBytesRemaining ) { <S2SV_ModStart> ) ) ; } else { mtCOVERAGE_TEST_MARKER ( ) ; },0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,"<S2SV_ModStart> s ) { uint32 <S2SV_ModEnd> num_updates ; uint16 <S2SV_ModStart>, Debug, ""%s()\\n"" <S2SV_ModEnd>, __func__ ) <S2SV_ModStart> ++ ) { in_uint32_le ( s, left ) ; in_uint32_le ( s, top ) ; in_uint32_le ( s, right ) ; in_uint32_le ( s, bottom ) ; in_uint32_le ( s, width ) ; in_uint32_le ( s, bpp ) ; Bpp = ( bpp + 7 ) / 8 ; in_uint32_le ( s, compress ) ; in_uint32_le ( s, bufsize ) ; cx = right - left + 1 ; cy = bottom - top + 1 ; logger ( Graphics, Debug, ""process_bitmap_updates(), <S2SV_blank> [%d,%d,%d], <S2SV_blank> [%d,%d], <S2SV_blank> bpp=%d, <S2SV_blank> compression=%d"", left, top, right, bottom, width, height, Bpp, compress ) ; if (! compress ) { int y ; bmpdata = ( uint8 * ) xmalloc ( width * height * Bpp ) ; for ( y = 0 ; y <",0
621,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
622,"<S2SV_ModStart> tx_size, vp9_coeff_stats coef_stats <S2SV_ModEnd> ) { vp9_coeff_probs_model <S2SV_ModStart> tx_size ] ; vpx_coeff_count <S2SV_ModEnd> * coef_counts = <S2SV_ModStart> l ) { vpx_tree_probs_from_distribution <S2SV_ModEnd> ( vp9_coef_tree, <S2SV_ModStart> m ) coef_probs [ i ] [ j ] [ k ] [ l ] [ 0 ] [ 1 ] = get_binary_prob ( coef_branch_ct [ i ] [ j ] [ k ] [ l ] [ m ], coef_counts [ i ] [ j ] [ k ] [ 0 ] [ 1 ] ) ; } } } } for ( i = 0 ; i < PLANE_TYPES ; ++ i ) { for ( j = 0 ; j < REF_TYPES ; ++ j ) { for ( k = 0 ; k < BAND_COEFF_CONTEXTS ( k ) ; ++ k ) { for ( m = 0 ; m < UNCONSTRAINED_NODES ; ++ m ) coef_probs [ i ] [ j ] [ k ] [ l ] [ m ] = get_binary_prob ( coef_branch_ct [ i ] [",0
623,"<S2SV_ModStart> { } ; if (! access_ok ( VERIFY_READ, fd, F_OK ) ) return - EBADF <S2SV_ModEnd> ; r =",0
624,"<S2SV_ModStart> dvb_usb_adapter * d, struct dvb_frontend_state * state <S2SV_ModStart> 0 } ; int ret ; ret = dvb_usb_generic_rw_all <S2SV_ModEnd> ( d -> <S2SV_ModStart>, 1, state, & ibuf [ 0 ] ) ; if ( ret <S2SV_ModEnd> < 0 ) <S2SV_ModStart> < 0 ) goto err ; ret = dvb_usb_generic_rw_all ( d -> dev, ibuf, 3, state, & ibuf [ 1 ] ) ; if ( ret <S2SV_ModEnd> < 0 ) <S2SV_ModStart> < 0 ) goto err ; ret = dvb_usb_generic_rw_all ( d -> dev, ibuf, 3, state, & ibuf [ 2 ] ) ; if ( ret <S2SV_ModEnd> < 0 ) <S2SV_ModStart> < 0 ) goto err ; ret = dvb_usb_generic_rw_all ( d -> dev, ibuf, 3, state, & ibuf [ 1 ] ) ; if ( ret <S2SV_ModEnd> < 0 ) <S2SV_ModStart> < 0 ) goto err ; ret = dvb_usb_generic_rw_all ( d -> dev, ibuf, 3, state, & ibuf [ 2 ] ) ; if ( ret <S2SV_ModEnd> < 0 ) <S2SV_ModStart> < 0 ) goto err ;",0
625,"<S2SV_ModStart> * iface, vpx_codec_enc_config_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & V",0
626,"<S2SV_ModStart> stride, int row_stride, int col_stride, int <S2SV_ModStart>. interp_filter ) ; const MV_PRECISION_Q4 * const mv_q4 = ( mv_row + 1 ) >> 1 ; const MV_PRECISION_Q3 * const mv_q3 = ( mv_col + 1 ) >> 1 <S2SV_ModStart> int uv_stride ; # if CONFIG_VP9_HIGHBITDEPTH if ( x_stride > ( row_stride + col_stride ) ) { x_mb_ptr = ( uint8_t * ) ( ( ( row_stride + col_stride ) + 1 ) << 3 ) ; y_mb_ptr = ( uint8_t * ) ( ( ( row_stride + 1 ) << 3 ) + ( col_stride + col_stride ) ) ; } # else # error ""unhandled <S2SV_blank> stride <S2SV_blank> in <S2SV_blank> temporal_filter_predictors_mb_c"" ) ; # endif <S2SV_ModStart> MV_PRECISION_Q3 ; } # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> flags & YV12_FLAG_HIGHBITDEPTH ) { vp9_build_inter_predictor ( y_mb_ptr,",0
627,"<S2SV_ModStart> = TRUE ; if ( strlen ( origbuf ) >= 4 ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; }",0
628,"<S2SV_ModStart> * numbers, size_t <S2SV_ModEnd> count ) { <S2SV_ModStart> count ) { size_t <S2SV_ModEnd> i ; cJSON <S2SV_ModStart> ( ) ; if (! numbers ) return a ; <S2SV_ModStart> i ) { if (! ( <S2SV_ModStart> i ] ) ) ) return a",0
629,"<S2SV_ModStart> data_end ) { const <S2SV_ModStart> int num_workers = vpx_min <S2SV_ModEnd> ( pbi -> <S2SV_ModStart> tile_cols ) ; const <S2SV_ModStart> int i ; if ( pbi -> tile_workers ) { <S2SV_ModStart> ) ) ; } else { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Tile <S2SV_blank> decoder <S2SV_blank> thread <S2SV_blank> creation <S2SV_blank> failed"" ) ; } <S2SV_ModStart> -> num_tile_workers ; vpx_worker_init ( worker ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data2, vpx_malloc ( sizeof ( TileInfo ) ) ) ; if ( i < num_threads - 1 &&! vp9_worker_reset ( worker ) ) { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Tile <S2SV_blank> decoder <S2SV_blank> thread <S2SV_blank> creation <S2SV_blank> failed"" ) ; } } } for ( i = 0 ; i < num_threads ; ++ i ) { <S2SV_ModStart> worker ) ; <S2SV_ModEnd> } } for <S2SV_ModStart> n ) { vpx_internal_error (",0
630,"<S2SV_ModStart> * 0x101 ; if ( order < 0 || order > 0x101 ) { printf ( ""Invalid <S2SV_blank> minolta <S2SV_blank> order <S2SV_blank> value\\n"" ) ; return ; } <S2SV_ModStart> ( ) + 4 ; if ( offset < 0 ) { printf ( ""Invalid <S2SV_blank> minolta <S2SV_blank> offset <S2SV_blank> value\\n"" ) ; return ; } <S2SV_ModEnd> while ( ( <S2SV_ModStart> ( ) ; if ( len < 0 || len > 0x101 ) { printf ( ""Invalid <S2SV_blank> minolta <S2SV_blank> length <S2SV_blank> value\\n"" ) ; return ; } <S2SV_ModStart> case 0x524946 : if (! strncasecmp ( model, ""DSLR-A100"", 9 ) ) { printf ( ""Invalid <S2SV_blank> minolta <S2SV_blank> type <S2SV_blank> value\\n"" ) ; return ; } <S2SV_ModStart> case 0x524948 : if (! strncasecmp ( model, ""DSLR-A100"", 9 ) ) { printf ( ""Invalid <S2SV_blank> minolta <S2SV_blank> type <S2SV_blank> value\\n"" ) ; return ; } <S2SV_ModStart> case 0x524948 : if (! strncasecmp ( model, ""DSLR-A100"", 9 ) ) { printf ( ""Invalid <S2SV_blank> minolta <S2SV_blank> type <S2SV_blank>",0
631,"<S2SV_ModStart> -> common ; VP9_COMP * rc = & cpi -> rc ; <S2SV_ModStart> = SEGMENT_DELTADATA ; seg -> flags &= ~ VP9_SEG_FLAG_HIGHBITDEPTH ; <S2SV_ModStart> ++ ) { const int qindex_delta = 0, segment_rdmult = 0 ; const int qindex_delta_q = 0 ; const int qindex_delta_r = 0 ; const int qindex_r = 0 ; <S2SV_ModStart> ( ) ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; } <S2SV_ModStart> ++ ) { <S2SV_ModEnd> if ( Q_RATIO <S2SV_ModStart> continue ; } qindex_delta_q = vp9_compute_qdelta ( & rc, base_q, base_q * Q_RATIO ( i ) ) ; <S2SV_ModStart> ( i = ENERGY_MIN ; i <= ENERGY_MAX ; i ++ ) { <S2SV_ModStart> ) ) ; if ( qindex_delta < 0 ) { continue ; } <S2SV_ModStart> SEG_LVL_ALT_Q, qindex_delta ) ; segment_rdmult = vp9_compute_rd_mult ( cp",0
632,<S2SV_ModStart> -> error_code ) { <S2SV_ModStart> : NULL ; ctx -> base. err_detail_set = 1 ; },0
633,"<S2SV_ModStart>, * ps_cur_poc ; if (! ps_dec -> s_cab_dec_env. pv_codec_handle ) return",0
634,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet ),0
635,<S2SV_ModStart> <S2SV_null> <S2SV_null> static unsigned <S2SV_ModStart> int getnum ( <S2SV_ModEnd> char * * <S2SV_ModStart> int df ) <S2SV_ModEnd> { int a <S2SV_ModStart> = 0 ; if (! isdigit ( * * fmt ) ) return 0 ; else,0
636,<S2SV_ModStart> GCSpropagate ) ; g -> gcstate = GCSclean ;,0
637,<S2SV_ModStart> 0 ; else { ret = <S2SV_ModEnd> - EIO ; <S2SV_ModStart> - EIO ; goto err ; },0
638,"<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } <S2SV_ModEnd> memset ( buffer <S2SV_ModStart> buffer ) ; <S2SV_ModEnd> s_write ( c",0
639,"<S2SV_ModStart> remote_connection_s * connection, const char * server ) { <S2SV_ModEnd> int rc = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> int ret_ga ; <S2SV_ModStart> = NULL ; connection -> server = strdup ( server ) ; <S2SV_ModStart> = NULL ; <S2SV_ModEnd> ret_ga = getaddrinfo <S2SV_ModStart> = getaddrinfo ( private -> server <S2SV_ModEnd>, NULL,",0
640,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> ; cpi -> <S2SV_ModEnd> non_gf_bitrate_adjustment = 0",0
641,<S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( bp + 26 ) ; <S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( bp + 26 ) ;,0
642,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command",0
643,"<S2SV_ModStart> Image * image, * tmp_image <S2SV_ModStart> length, padding <S2SV_ModEnd>, version, <S2SV_ModStart> version, width ; const MagickString * const string = ""unknown"" <S2SV_ModStart> ) break ; tmp_image = ( const MagickString * ) malloc ( sizeof ( * tmp_image ) ) ; strncpy ( tmp_image, buffer, sizeof ( * tmp_image ) ) ; strncpy ( tmp_image, buffer, sizeof ( * tmp_image ) ) ; if ( tmp_image == NULL ) { LogError ( ""MemoryAllocationFailed"" ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; tmp_image = ( Image * ) malloc ( sizeof ( * tmp_image ) ) ; strncpy ( tmp_image, buffer, sizeof ( * tmp_image ) ) ; strncpy ( tmp_image, buffer, sizeof ( * tmp_image ) ) ; <S2SV_ModStart> ) break ; tmp_image = ( Image * ) malloc ( sizeof ( * tmp_image ) ) ; strncpy ( tmp_image -> name, name, sizeof ( name ) ) ; strncpy ( tmp_image -> name, buffer, sizeof ( name ) ) ; strncpy (",0
644,"<S2SV_ModStart> ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> packet <S2SV_blank> header\\n"" ) ; return - 1 <S2SV_ModEnd> ; } if",0
645,<S2SV_ModStart> ; if (! chanmode_found ) { if ( <S2SV_ModStart> ) ; } },0
646,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> - m + vpx_read_bit <S2SV_ModEnd> ( r )",1
647,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
648,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> REFERENCE_MODE mode = vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> comp_inter_prob [ ctx <S2SV_ModStart> ( REFERENCE_MODE ) vpx_read <S2SV_ModEnd> ( r,",0
649,"<S2SV_ModStart>! stream ) { <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; } <S2SV_ModStart> ( res ) { <S2SV_ModStart> ) ) ; } <S2SV_ModStart> stereo_fmt = STEREO_FORMAT_MONO ; stream -> config. cfg. g_bit_depth = 0 <S2SV_ModStart> write_webm = 1 ; stream -> config. cfg. g_bit_depth = 0",0
650,<S2SV_ModStart> ; if ( opp -> nd_opt_len < 4 ) goto trunc ; if (,0
651,<S2SV_ModStart> re_ast ) -> type_flags = 0 ; ( * re_ast ) ->,0
652,"<S2SV_ModStart> ) ) ; if (! iter -> var_expand_table ) { <S2SV_ModStart>, & error, AUTH_SUBSYS_DB <S2SV_ModStart> 0 ) { auth_request_log_debug <S2SV_ModEnd> ( iter -> <S2SV_ModStart>, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"" <S2SV_ModEnd>, key -> <S2SV_ModStart> error ) ; } else { ret = var_expand ( path, key -> key -> key, iter -> var_expand_table, & error ) ; if ( ret <= 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; } return - 1 ; } } else { ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> = <S2SV_blank> %s"", str_c ( path ), key -> value ) ; } else",0
653,<S2SV_ModStart> ; tok -> line_number = 0 ; tok -> <S2SV_ModStart> ; tok -> line_number_newline = 0 ; tok ->,0
654,<S2SV_ModStart> maxBitrate ; } av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo = NULL ;,0
655,<S2SV_ModStart> ( dpbSize ) ; dpb -> picSizeInMbs = picSizeInMbs ; dpb -> picSizeMax = picSizeInMbs,0
656,"<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> (! sock ||! addr ||! addrlen ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen ) addrlen_in = * addrlen ; if ( addrlen_in > OE_SSIZE_MAX ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } <S2SV_ModEnd> if ( addrlen_in <S2SV_ModStart> ( addrlen ) { <S2SV_ModStart> * addrlen ; } <S2SV_ModStart> ) ; } if ( addrlen_in > OE_SSIZE_MAX ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; addrlen_in = * addrlen ; } if ( oe_syscall_getpeername_ocall ( & ret, sock -> host_fd, ( struct oe_sockaddr * ) addr, addrlen_in, addrlen )!= OE_OK ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; }",0
657,,1
658,<S2SV_ModStart> FALSE ; } if (!,0
659,"<S2SV_ModStart> ipv6_pinfo * np <S2SV_ModEnd> ; struct ipv6_txoptions <S2SV_ModStart> ; if ( msg -> msg_name ) { np = inet6_sk ( sk ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if ( opt ) opt -> opt_flags |= IPSTATS_MIB_OUTDISCARDS ; } if (",0
660,"<S2SV_ModStart>, err, <S2SV_ModEnd> overlays = 0 <S2SV_ModStart>, j ; if (! ctx ) { cli_errmsg ( ""cli_scanpe: <S2SV_blank> ctx <S2SV_blank> == <S2SV_blank> NULL\\n"" ) ; return CL_ENULLARG ; } <S2SV_ModStart> size_t fsize ; <S2SV_ModEnd> j = 0 <S2SV_ModStart> j = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> } if ( cli_ctx_get_section_size ( ctx, & j )!= j ) { cli_errmsg ( ""cli_scanpe: <S2SV_blank> ctx_get_section_size() <S2SV_blank> == <S2SV_blank> %d\\n"", cli_ctx_get_section_size ( ctx, & j ) ) ; return CL_ENULLARG ; } if ( <S2SV_ModStart> ; if ( <S2SV_ModEnd> cli_ctx_get_section_size ( ctx <S2SV_ModStart> ( ctx, & j, & <S2SV_ModStart> } if ( j <S2SV_ModEnd> > 0 ) <S2SV_ModStart> { if ( cli_ctx_get_section_size ( ctx, & j, & j )!= j ) { cli_errmsg ( ""cli_scanpe: <S2SV_blank> ctx_get_section_size() <S2SV_blank> == <S2SV_blank> %d\\n"", cli_ctx_get_section_size ( ctx, & j ) ) ; return CL_ENULL",0
661,"<S2SV_ModStart> address ) { uint16_t result = 0 ; <S2SV_ModStart> address ) ; result |= DM9000_EPAR_EPOS | DM9000_EPRR_ERPRR <S2SV_ModEnd> ; while ( <S2SV_ModStart> while ( ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> } dm9000WriteReg ( DM9000_EPCR, DM9000_EPOS <S2SV_ModEnd> ) ; usleep <S2SV_ModStart> ; return ( result <S2SV_ModEnd> << 8 ) <S2SV_ModStart> 8 ) | result <S2SV_ModEnd> ; } <S2SV_null>",0
662,"<S2SV_ModStart> pcmk_ok ) { if (! cib_tls_signon ( cib, & ( private -> command ) ) ) { fprintf ( stderr, ""Connection <S2SV_blank> to <S2SV_blank> %s:%d <S2SV_blank> failed: <S2SV_blank> %s\\n"", name, private -> server, pcmk_error_string ( - EINVAL ) ) ; return - EINVAL ; } <S2SV_ModStart> pcmk_ok ) { if (! cib_tls_signon ( cib, & ( private -> callback ) ) ) { fprintf ( stderr, ""Connection <S2SV_blank> to <S2SV_blank> %s:%d <S2SV_blank> failed: <S2SV_blank> %s\\n"", name, pcmk_error_string ( - EINVAL ) ) ; return - EINVAL ; } <S2SV_ModStart> pcmk_ok ) { if (! cib_tls_signon ( cib, & ( private -> callback ) ) ) { fprintf ( stderr, ""Connection <S2SV_blank> to <S2SV_blank> %s:%d <S2SV_blank> failed: <S2SV_blank> %s\\n"", name, pcmk_error_string ( - EINVAL ) ) ; return - EINVAL ; }",0
663,"<S2SV_ModStart> = ubuf ; memset ( & address, 0, sizeof ( address ) ) ;",0
664,"<S2SV_ModStart> num00, tmp_err = 0, n = 0, sr = 0 ; int step_param = 3 ; int further_steps = ( MAX_MVSEARCH_STEPS - 1 ) - step_param ; const BLOCK_SIZE bsize = xd -> mi [ 0 ] -> mbmi. sb_type ; vp9_variance_fn_ptr_t v_fn_ptr = cpi -> fn_ptr [ bsize ] ; int new_mv_mode_penalty = 256 ; const int quart_frm = MIN ( cpi -> common. width, cpi -> common. height ) ; int num00_min = MIN ( cpi -> common. width, cpi -> common. height ) ; int num00_max = MIN ( cpi -> common. width, cpi -> common. height ) ; int new_mv_mode_penalty = MIN ( cpi -> common. width, cpi -> common. height ) ; int num00_min = MIN ( cpi -> common. width, cpi -> common. height ) ; int num00_max = MIN ( cpi -> common. width, cpi -> common. height ) ; int num",0
665,"<S2SV_ModStart> ; if ( hivex_check_checksum ( filename, h ) ) goto error ; if (",0
666,<S2SV_ModStart> ; merged -> is_symlink = ( child -> is_symlink == NOT_SET? parent -> is_symlink == NOT_SET : child -> is_symlink == NOT_SET ) ; merged ->,0
667,"<S2SV_ModStart> one, offset <S2SV_ModEnd> ; ssize_t count <S2SV_ModStart> ) break ; if ( number_planes_filled > ( size_t ) image -> rows ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > ( size_t ) image -> columns ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > ( size_t ) image -> rows ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > ( size_t ) image -> rows ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > ( size_t ) image -> columns ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > ( size_t ) image -> rows ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
668,"<S2SV_ModStart> ( r = sshbuf_put_string ( b, comp -> name ) )!= 0 || ( r =",0
669,<S2SV_ModStart> ) ) { if (! option ) continue ;,0
670,<S2SV_ModStart> client = user_data ; gboolean shutdown_flag = FALSE <S2SV_ModStart> num_clients ) ; if ( client -> shutdown_flag ) { shutdown_flag = TRUE ; } <S2SV_ModStart> user ) ; if ( client -> shutdown_flag ) { shutdown_flag = FALSE ; },0
671,<S2SV_ModStart> * uv ; if (! iswhite ( thread ) ) { <S2SV_ModStart> work ++ ; <S2SV_ModEnd> markvalue ( g,0
