,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
1,"<S2SV_ModStart> skb ) ; unfrag_ip6hlen = min_t ( int, unfrag_ip6hlen, skb -> len - offset ) ;",0
2,"<S2SV_ModStart>, 0 ) ; if ( writer -> stco ) gf_isom_box_del ( writer -> stco ) ; if ( writer -> stsc ) gf_isom_box_del ( writer -> stsc )",0
3,"<S2SV_ModStart> item ) { return cJSON_Get ( array, 0, item ) <S2SV_ModEnd> ; } <S2SV_null>",0
4,"<S2SV_ModStart> u64 nr, u64 <S2SV_ModEnd> nmi, struct <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",0
5,"<S2SV_ModStart> EXT4_EXTENTS_FLAG ) { struct grub_ext4_extent_header leaf ; struct grub_ext4_extent * ext ; int i ; leaf = grub_ext4_find_leaf ( data, ( struct grub_ext4_extent_header * ) inode -> blocks. dir_blocks, fileblock ) ; if (! leaf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) ( leaf + 1 ) ; for ( i = 0 ; i < grub_le_to_cpu16 ( leaf -> entries ) ; i ++ ) { if ( fileblock < grub_le_to_cpu32 ( ext [ i ]. block ) ) break ; } if ( -- i >= 0 ) { fileblock -= grub_le_to_cpu32 ( ext [ i ]. block ) ; if ( fileblock >= grub_le_to_cpu16 ( ext [ i ]. len ) ) return 0 ; else { grub_disk_addr_t start ; start = grub_le_",0
6,"<S2SV_ModStart> fdct16 ( const tran_low_t <S2SV_ModEnd> * in [ <S2SV_ModStart> 16 ], tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> ] ) { tran_high_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step2 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step3 [ 8 <S2SV_ModStart> 8 ] ; tran_low_t input [ 8 ] ; tran_high_t <S2SV_ModEnd> temp1, temp2 <S2SV_ModStart> ] ; { tran_low_t <S2SV_ModEnd> s0, s1 <S2SV_ModStart>, s7 ; tran_high_t <S2SV_ModEnd> t0, t1 <S2SV_ModStart>, t2, t3 ; tran_high_t <S2SV_ModEnd> x0, x1 <S2SV_ModStart> x2, x3 ; tran_high_t temp1, temp2 ; temp1 = ( tran_low_t ) ( ( ( int16_t * ) out ) [ 0 ] ) ; temp2 = ( tran_low_t ) ( ( ( int16_t * ) out ) [ 1 ] ) ; temp3 = ( tran_low_t ) ( ( ( int16_t * ) out ) [ 2 ] ) ; temp4 = ( tran_low_t ) ( ( int",0
7,"<S2SV_ModStart> ( ) ; # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; # endif parse_ciff ( save + hlen, len - hlen, 0 ) ; } if ( parse_tiff ( save + 6 ) ) apply_tiff ( ) ; fseek ( ifp, save + len, SEEK_SET ) ; } return 1 <S2SV_ModEnd> ; } <S2SV_null>",0
8,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> search_filter_level ( const <S2SV_ModStart> partial_frame ) { YV12_BUFFER_CONFIG <S2SV_ModEnd> * sd = <S2SV_ModStart> * sd, VP9_COMMON_CONTEXT * const cm = & cpi -> common ; VP9_COMP_CONTEXT * const cm_ctx = & cpi -> ctx <S2SV_ModEnd> ; struct loopfilter <S2SV_ModStart> lf = & cm_ctx <S2SV_ModEnd> -> lf ; <S2SV_ModStart> / 4 ; int best_err ; int filt_best ; int filt_direction = 0 ; int filt_low ; int bias ; int filt_err ; <S2SV_ModStart> / 4 ; <S2SV_ModEnd> while ( filter_step <S2SV_ModStart> min_filter_level ) ; <S2SV_ModEnd> bias = ( <S2SV_ModStart> * filter_step ; <S2SV_ModEnd> bias = ( <S2SV_ModStart> * filter_step ; <S2SV_ModEnd> if ( cm <S2SV_ModStart> 0 ) { if ( cpi -> twopass. section_intra_rating < 20 ) bias = bias * cpi -> twopass. section_intra_rating / 20 ; <S2SV_ModStart> = try_filter_frame ( cm_ctx, sd, cpi, filt_low, partial_frame ) ; ss_err [ filt_low ] = best_err",0
9,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
10,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ++ i ) vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( usehp ) vpx_write <S2SV_ModEnd> ( w,",1
11,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } else { <S2SV_ModEnd> request -> rxBlockSzx <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; },0
12,"<S2SV_ModStart> ( ndo, ""%04x <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS (",0
13,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> construct_get_dest_keyring ( struct <S2SV_ModStart> * authkey ; int ret ; <S2SV_ModStart> dest_keyring ) ; ret = key_permission ( make_key_ref ( dest_keyring, KEY_NEED_WRITE ) ) ; if ( ret < 0 ) { key_put ( dest_keyring ) ; return ret ; } <S2SV_ModStart> ( dest_keyring ) { ret = key_permission ( make_key_ref ( dest_keyring, KEY_NEED_READ ) ) ; if ( ret < 0 ) { key_put ( dest_keyring ) ; return ret ; } <S2SV_ModStart> ) ; } ret = key_permission ( make_key_ref ( dest_keyring, KEY_NEED_WRITE ) ) ; if ( ret < 0 ) { key_put ( dest_keyring ) ; return ret ; } } <S2SV_ModStart> ) ; } return 0 ;",0
14,<S2SV_ModStart> = create_spnego_ctx ( 0,0
15,<S2SV_ModStart> ; tm = localtime_r <S2SV_ModEnd> ( & t,0
16,<S2SV_ModStart> length ) ; if ( strlen ( password )!= 0 ) { <S2SV_ModStart> ) ) ; },0
17,<S2SV_ModStart> == p ) { * errnop = ERANGE ; return NSS_STATUS_TRYAGAIN ; } <S2SV_ModEnd> r = parse_uid,0
18,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",1
19,<S2SV_ModStart> = 0 ; if (! <S2SV_ModStart> & timeout ) ) return false,0
20,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> detect_transition_to_still ( struct <S2SV_ModStart> last_decay_rate ) { bool trans_to_still = false <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( still_interval > MIN_GF_INTERVAL <S2SV_ModEnd> ) { int <S2SV_ModStart> j ; const TWO_PASS <S2SV_ModEnd> * position = <S2SV_ModStart> * position = & <S2SV_ModStart> { if ( <S2SV_ModEnd> input_stats ( twopass <S2SV_ModStart> tmp_next_frame ) ) { trans_to_still = true ; break ; } <S2SV_ModEnd> if ( tmp_next_frame <S2SV_ModStart> pcnt_motion < 0.999 <S2SV_ModEnd> ; } reset_fpf_position <S2SV_ModStart> twopass, position, 0 <S2SV_ModStart> j == still_interval &&! trans_to_still ) { <S2SV_ModEnd> trans_to_still = 1 <S2SV_ModStart> = 1 ; }",0
21,"<S2SV_ModStart> inode ) ) { if ( offset + size > i_size_read ( inode ) ) { printk ( KERN_EMERG ""%s: <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, inode -> i_ino ) ; return ret ; } <S2SV_ModStart> size ) ; }",0
22,<S2SV_ModStart> alg ) { <S2SV_ModEnd> if (! <S2SV_ModStart> CRYPTO_ALG_NEED_FALLBACK ) ) <S2SV_ModEnd> alg = crypto_alg_lookup,0
23,"<S2SV_ModStart> = GIT_PKT_NG ; if ( len < 3 ) goto out_err ; <S2SV_ModStart> += 3 ; <S2SV_ModEnd> ptr = strchr <S2SV_ModStart>,'<S2SV_blank>') ; if (! ptr ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> ref = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> ref ) ; memcpy ( pkt -> ref, line, len ) ; pkt -> ref [ len ] = '\\0' ; line = ptr + 3 ; <S2SV_ModEnd> ptr = strchr <S2SV_ModStart>, '\\n' ) ; if (! ptr ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> msg = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> msg ) ; memcpy ( pkt -> msg, line, len ) ; pkt -> msg [ len ] = '\\0' ; <S2SV_ModEnd> * out =",0
24,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> BYTE flags ; UINT32 <S2SV_ModEnd> length ; Stream_Read_UINT32,0
25,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) return AVERROR_PATCHWELCOME ; if (,0
26,"<S2SV_ModStart> mntent, path, rootfs",1
27,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } io -> io_cleanup = mem_cleanup ;,1
28,<S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t ) ( ( size_t ) ( <S2SV_ModStart> ( size_t ) ( <S2SV_ModStart> ( size_t,0
29,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return ret?,0
30,<S2SV_ModStart> vpx_codec_enc_cfg_map_t * map ; ( void ) iface,0
31,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
32,"<S2SV_ModStart> void show_progress ( uint64_t frame_in, uint64_t <S2SV_ModEnd> frame_out, uint64_t",0
33,"<S2SV_ModStart> ) ) { PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> %s\\n"", fields [ i ]. name ) ;",0
34,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_ETXSTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRTS <S2SV_ModEnd> ) ; return",0
35,<S2SV_ModStart> ; value = ast2obj_text <S2SV_ModEnd> ( o -> <S2SV_ModStart> ; value = ast2obj_text <S2SV_ModEnd> ( o -> <S2SV_ModStart> ; value = ast2obj_text <S2SV_ModEnd> ( o ->,0
36,"<S2SV_ModStart> ( page && access ( page, R_OK ) == 0 ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } } else if (! strcmp ( func, ""page/set"" ) ) { char * wikitext = NULL, * page = NULL ; if ( ( ( wikitext = http_request_param_get ( req, ""text"" ) )!= NULL ) && ( ( page = http_request_param_get ( req, ""page"" ) )!= NULL ) ) { file_write ( page, wikitext ) ; http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } } else if (! strcmp ( func, ""page/delete"" ) ) { char * page = http_request_param_get ( req, ""page"" ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( unlink ( page ) > 0 ) { http_response_printf ( res, ""success"" ) ; http_response_send (",0
37,"<S2SV_ModStart> low_var_thresh, int mb_rows, int mb_cols <S2SV_ModEnd> ) { double <S2SV_ModStart>.5 ) <S2SV_ModEnd> ; unsigned char <S2SV_ModStart> pp_limits_buffer ; ; <S2SV_ModEnd> ( void ) <S2SV_ModStart> ) flag ; memset <S2SV_ModEnd> ( limits, <S2SV_ModStart> 16 ) ; vpx_post_proc_down_and_across_mb_row <S2SV_ModEnd> ( source -> <S2SV_ModStart> 8 ) ; vpx_post_proc_down_and_across_mb_row <S2SV_ModEnd> ( source ->",0
38,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> h_hash ) ; mb2_cache_entry <S2SV_ModEnd> * ce ; <S2SV_ModStart> int error ; error = mb2_cache_entry_alloc ( ext4_mb_cache, GFP_NOFS, & ce ) ; if ( error ) return ; <S2SV_ModEnd> error = mb_cache_entry_insert <S2SV_ModStart> error ) { mb2_cache_entry_free ( ext4_mb_cache, ce ) ; <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> hash ) ; mb2_cache_entry_release ( ext4_mb_cache, <S2SV_ModEnd> ce ) ;",0
39,<S2SV_ModStart> ) ) ; * code = 200 ; * rlen = 0 ;,0
40,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> - ENOMEM ; opt = rcu_dereference_protected ( * optp, lockdep_is_held ( & ip_options_rcu_lock ) ) ; if (! opt ) return - EFAULT ; <S2SV_ModStart> ( optlen && copy_from_user ( opt, data, optlen ) ) return - EFAULT ; <S2SV_ModEnd> return ip_options_get_finish (",0
41,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|truncated]"" <S2SV_ModEnd> ) ) ;",0
42,"<S2SV_ModStart> ) N_ ( ""E530: <S2SV_blank> Cannot <S2SV_blank> set <S2SV_blank> \'%s\' <S2SV_blank> to <S2SV_blank> an <S2SV_blank> empty <S2SV_blank> string"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) N_ ( ""E531: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) N_ ( ""E532: <S2SV_blank> Cannot <S2SV_blank> set <S2SV_blank> \'%s\' <S2SV_blank> to <S2SV_blank> an <S2SV_blank> empty <S2SV_blank> string"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) N_ ( ""E535: <S2SV_blank> Cannot <S2SV_blank> set <S2SV_blank> \'%s\' <S2SV_blank> to <S2SV_blank> an <S2SV_blank> empty <S2SV_blank> string"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) N_ ( ""E536: <S2SV_blank> Cannot <S2SV_blank> set <S2SV_blank> \'%s\' <S2SV_blank> to <S2SV_blank> an <S2SV_blank> empty <S2SV_blank> string"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) N_ ( ""E537: <S2SV_blank> Cannot <S2SV_blank> set <S2SV_blank> \'%s\' <S2SV_blank> to <S2SV_blank> an <S2SV_blank> empty <S2SV_blank> string"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) N_ ( ""E538: <S2SV_blank> Cannot <S2SV_blank> set <S2SV_blank> \'%s\' <S2SV_blank> to <S2SV_blank> an <S2SV_blank> empty <S2SV_blank> string"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) N_ ( ""E539: <S2SV_blank> Cannot <S2SV_blank> set <S2SV_blank> \'%s\' <S2SV_blank> to <S2SV_blank> an <S2SV_blank> empty <S2SV_blank> string"" <S2SV_ModEnd> ) ;",0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode <S2SV_ModStart>, & new_mode, & acl ) ; if ( ret <S2SV_ModEnd> ) goto out",0
44,"<S2SV_ModStart> size_t size ; size_t cps ; <S2SV_ModStart> / 8 ; cps = cmpt -> cps_ ; <S2SV_ModStart> ( cmpt -> cps_, cps <S2SV_ModEnd>, & size",0
45,<S2SV_ModStart> dp == datalen || datalen == 0,0
46,"<S2SV_ModStart> * req, u32 <S2SV_ModEnd> * acl_len ) <S2SV_ModStart> acl_len ) { <S2SV_ModEnd> uint32_t attrlen, <S2SV_ModStart> int status ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> xdr, OP_GETATTR ) )!= 0 ) goto out ; * acl_len = 0 ; if ( ( status = decode_op_hdr ( xdr, OP_GETTAG ) )!= 0 ) goto out ; if ( ( status = decode_attr_bitmap ( xdr, bitmap ) )!= 0 ) goto out ; if ( ( status = decode_attr_length ( xdr, & attrlen, & savep ) )!= 0 ) goto out ; if ( unlikely ( bitmap [ 0 ] & FATTR4_WORD0_ACL ) ) { size_t hdrlen ; u32 recvd ; hdrlen = ( u8 * ) xdr -> p - ( u8 * ) iov -> iov_base ; recvd = req -> rq_rcv_buf. len - hdrlen ; if ( attrlen > recvd ) { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u",0
47,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
48,<S2SV_ModStart> ) ) { if (! auth ) { return MPR_ERR_BAD_SYNTAX ; } <S2SV_ModStart> ; } } if (! tok ) { return MPR_ERR_BAD_SYNTAX ; },0
49,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> addr = VPX_MALLOC_L <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; <S2SV_ModEnd> if ( addr,0
50,"<S2SV_ModStart> int res ; size_t <S2SV_ModEnd> indexes = SQUASHFS_LOOKUP_BLOCKS <S2SV_ModStart> long long export_index_table ; memset ( export_index_table, 0, sizeof ( long long ) * indexes ) ; res = read_fs_bytes ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } SQUASHFS_INSWAP_LOOKUP_BLOCKS ( export_index_table, indexes ) ; export_index_table <S2SV_ModStart> indexes ] ; <S2SV_ModEnd> * table_start =",0
51,<S2SV_ModStart> ; } else { <S2SV_ModStart> p1 ) ; },0
52,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> # if CONFIG_VP8_ENCODER <S2SV_ModStart> ; # endif <S2SV_ModEnd> for ( argi <S2SV_ModStart> } if ( <S2SV_ModEnd> arg_match ( &,0
53,"<S2SV_ModStart> preverify_ok, callback_ctx, c -> ssl <S2SV_ModStart> 1 ; } <S2SV_ModEnd> return 0 ; <S2SV_ModStart> return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
54,"<S2SV_ModStart> ; if ( crypto_memneq <S2SV_ModEnd> ( cmac,",0
55,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> const uint64_t bits_used <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
56,"<S2SV_ModStart> EOFOp 0x07 char * magick_buffer <S2SV_ModEnd> ; Image * <S2SV_ModStart> char * ) magick_buffer <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( count!= 3 ) || ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart>. x = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. y = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. columns = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. rows = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ( memcmp",0
57,"<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> altsetting [ 0 ]. desc. bNumEndpoints < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; error = - EINVAL ; goto err_free_urb ; }",1
58,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
59,"<S2SV_ModStart> * dir = ""/tmp"" <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( fd = safe_mkstemp <S2SV_ModEnd> ( & tmpname",0
60,<S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; },0
61,"<S2SV_ModStart> n ] ; if ( narg == NULL ) { addreply_noformat ( 500, ""?"" ) ; continue ; }",0
62,"<S2SV_ModStart> void vp9_setup_dst_planes ( VP9_COMP * const cpi <S2SV_ModEnd>, const YV12_BUFFER_CONFIG <S2SV_ModStart> mi_col ) { const <S2SV_ModStart> const buffers [ 8 <S2SV_ModEnd> ] = { <S2SV_ModStart> const int strides [ 8 <S2SV_ModEnd> ] = { <S2SV_ModStart> i ) { const <S2SV_ModStart> pd = & cpi <S2SV_ModEnd> -> plane [",0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,<S2SV_ModStart> get_block = ocfs2_get_block <S2SV_ModEnd> ; else get_block <S2SV_ModStart> get_block = ocfs2_dio_get_block <S2SV_ModEnd> ; return __blockdev_direct_IO,0
65,"<S2SV_ModStart> ( f, ""%79s <S2SV_blank> %100[^\\n]\\n"" <S2SV_ModEnd>, def,",0
66,"<S2SV_ModStart> n ) { <S2SV_ModEnd> char * str <S2SV_ModStart> ; mod_ty mod <S2SV_ModEnd> ; assert ( <S2SV_ModStart> ':' ) ; return fstring_compile_expr_ex ( expr_start, expr_end, c, n, NULL, NULL <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
67,"<S2SV_ModStart> string ) { return cJSON_GetChild ( object, string, 0 ) <S2SV_ModEnd> ; } <S2SV_null>",0
68,<S2SV_ModStart> size ) ; if ( px -> ft == NULL ) return FALSE ;,0
69,"<S2SV_ModStart> u_char * dat, u_int len <S2SV_ModStart>, val_l ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_",0
70,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
71,<S2SV_ModStart> int i ; const uint32_t <S2SV_ModEnd> * const buffers <S2SV_ModStart> } ; const uint32_t <S2SV_ModEnd> strides [ 4,0
72,"<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ; for ( iov = msg -> msg_iov, iovlen = msg -> msg_iovlen ; iovlen > 0 ; iov ++ ) { unsigned long seglen = iov -> iov_len ; char __user * from = iov -> iov_base ; if (! access_ok ( VERIFY_READ, from, iov -> iov_len ) ) return - EFAULT ; if (! access_ok ( VERIFY_WRITE, from, iov -> iov_len ) ) return - EFAULT ; } <S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; for (",0
73,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
74,<S2SV_ModStart> user ) { cleanup_srcu_struct ( & user -> release_barrier ) ; <S2SV_ModStart> _ipmi_destroy_user ( user <S2SV_ModEnd> ) ; kref_put,0
75,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> sl = strlen,1
76,"<S2SV_ModStart> * for_ch ; <S2SV_ModEnd> REQ ( n <S2SV_ModStart> comp_for ) ; <S2SV_ModEnd> for_ch = CHILD <S2SV_ModStart> 1 + is_async ) ; if ( TYPE ( CHILD ( n, 0 ) ) == ASYNC ) { is_async = 1 ; } if ( is_async && c -> c_feature_version < 6 ) { ast_error ( c, n, ""Async <S2SV_blank> comprehension <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" <S2SV_ModStart> return NULL ; <S2SV_ModEnd> expression = ast_for_expr <S2SV_ModStart> ( n, 2 <S2SV_ModEnd> + is_async ) <S2SV_ModStart> ( n, 4 <S2SV_ModEnd> + is_async ) <S2SV_ModStart> ( n, 5 <S2SV_ModEnd> + is_async ) <S2SV_ModStart> ( n, 6 <S2SV_ModEnd> + is_async )",0
77,<S2SV_ModStart> = NULL ; dst_state -> frames [ i ] = NULL ; <S2SV_ModStart> = dst ; dst_state -> frames [ i ] = NULL ;,0
78,"<S2SV_ModStart> write_mb_modes_kf ( const VP9_COMMON * cm, const MACROBLOCKD * xd, const MODE_INFO * mi <S2SV_ModEnd>, vpx_writer * <S2SV_ModStart> w ) { const MODE_INFO * const above_mi = xd -> above_mi [ 0 ] ; const MODE_INFO * const left_mi = xd -> left_mi [ 0 ] ; const MB_MODE_INFO * const mbmi = & mi -> mbmi ; const BLOCK_SIZE bsize = mbmi -> sb_type ; if ( seg -> update_map ) write_segment_id ( w, seg, mbmi -> segment_id ) ; write_skip ( cpi, mbmi -> segment_id, mi, w ) ; if ( bsize >= BLOCK_8X8 && cm -> tx_mode == TX_MODE_SELECT ) write_selected_tx_size ( cpi, mbmi -> tx_size, bsize, w ) ; if ( bsize >= BLOCK_8X8 && cm -> tx_mode == TX_MODE_SELECT ) write_selected_tx_size ( cpi, mbmi -> tx_size, bsize, w ) ; if",0
79,"<S2SV_ModStart> maxn ) { <S2SV_ModEnd> # ifdef DEBUG <S2SV_ModStart> ; # endif if ( n > maxn ) SWF_error ( ""Action <S2SV_blank> overflow!!"" ) ;",0
80,<S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( & prep -> pp_n ) ; <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> } n =,0
81,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
82,"<S2SV_ModStart> zArg ) { assert ( pTable -> nModuleArg >= 0 ) ; if ( zArg == 0 ) { sqlite3DbFree ( db, zArg ) ; return ; } <S2SV_ModStart> * ) * <S2SV_ModEnd> 2 + pTable <S2SV_ModStart> pTable -> nModuleArg <S2SV_ModEnd> ; char * <S2SV_ModStart> * * azModuleArg ; assert ( nBytes >= sizeof ( char * ) * 2 )",0
83,<S2SV_ModStart> ) ; } for ( i = 0 ; i < anal_size ; i ++ ) { for ( j = 0 ; j < anal_size ; j ++ ) { for ( k = 0 ; k < anal_size ; k ++ ) { for ( l = 0 ; l < anal_size ; l ++ ) { for ( j = 0 ; j < anal_size ; j ++ ) { for ( l = 0 ; l < anal_size ; j ++ ) { u_out [ j ] = u_in [ j ] * u_out [ j ] ; } } } } } },0
84,<S2SV_ModStart> -> dmin ; if ( ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { <S2SV_ModStart> p ) ; },0
85,"<S2SV_ModStart> bfq_idle_slice_timer_body ( struct bfq_sched_data * sched <S2SV_ModEnd> ) { struct <S2SV_ModStart> bfq_data * bfqd <S2SV_ModEnd> ; unsigned long <S2SV_ModStart> long flags ; struct bfq_queue * bfqq ; <S2SV_ModStart> flags ) ; bfq_clear_bfqq <S2SV_ModEnd> ( bfqq ) <S2SV_ModStart> return ; } bfq_bfqq_expire ( bfqd, bfqq, true, reason ) ; spin_lock_irqsave ( & bfqd -> lock, flags ) ; if (! bfq_bfqq_in_service_queue ( bfqq ) ) { spin_unlock_irqrestore ( & bfqd -> lock, flags ) ; return ; } spin_unlock_irqrestore ( & bfqd -> lock, flags ) ; bfq_schedule_dispatch ( bfqd ) ; return <S2SV_ModEnd> ; } <S2SV_null>",0
86,,1
87,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
88,"<S2SV_ModStart> newDataLength || diffPtr > diffBlock + diffBlockLength || extraPtr > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } memcpy ( newData + newpos, diffPtr, x ) ; diffPtr += x ; memcpy ( newData + newpos, extraPtr, y ) ; extraPtr += y ; if ( z > z <S2SV_ModEnd> ) { PyMem_Free",0
89,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> np -> tclass ) ; rcu_read_unlock (,0
90,"<S2SV_ModStart> ) ) { if ( MagickMax ( number_pixels, 1 ) < bytes_per_pixel ) { if ( MagickMax ( number_pixels, 1 ) < bytes_per_pixel ) { if ( MagickMax ( number_pixels, 1 ) < bytes_per_pixel ) { if ( MagickMax ( number_pixels, 1 ) < bytes_per_pixel ) { if ( MagickMax ( number_pixels, 1 ) < bytes_per_pixel ) { if ( MagickMax ( number_pixels, 1 ) < bytes_per_pixel ) { if ( MagickMax ( number_pixels, 1 ) < bytes_per_pixel ) { if ( MagickMax ( number_pixels, 1 ) < bytes_per_pixel ) { if ( MagickMax ( number_pixels, 1 ) < bytes_per_pixel ) { if ( MagickMax ( number_pixels, 1 ) < bytes_per_pixel ) { if ( MagickMax ( number_pixels, 1 ) < bytes_per_pixel ) { if ( MagickMax ( number_pixels, 1 ) < bytes_per_pixel ) { if ( MagickMax ( number_pixels,",0
91,<S2SV_ModStart> data ) { ( void ) data ;,0
92,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
93,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
94,"<S2SV_ModStart> mb_offset ) ; memcpy <S2SV_ModEnd> ( mvx, <S2SV_ModStart> mb_offset ) ; memcpy <S2SV_ModEnd> ( mvy, <S2SV_ModStart> mb_offset ) ; memcpy <S2SV_ModEnd> ( mvx, <S2SV_ModStart> mb_offset ) ; memcpy <S2SV_ModEnd> ( mvy, <S2SV_ModStart> mb_offset ) ; memcpy <S2SV_ModEnd> ( mvx, <S2SV_ModStart> mb_offset ) ; memcpy <S2SV_ModEnd> ( mvy, <S2SV_ModStart> mb_offset ) ; memcpy <S2SV_ModEnd> ( mvx, <S2SV_ModStart> mb_offset ) ; memcpy <S2SV_ModEnd> ( mvy, <S2SV_ModStart> mb_offset ) ; memcpy <S2SV_ModEnd> ( mvx, <S2SV_ModStart> mb_offset ) ; memcpy <S2SV_ModEnd> ( mvy, <S2SV_ModStart> mb_offset ) ; memcpy <S2SV_ModEnd> ( mvx, <S2SV_ModStart> mb_offset ) ; memcpy <S2SV_ModEnd> ( mvy, <S2SV_ModStart> mb_offset ) ; memcpy <S2SV_ModEnd> ( mvx, <S2SV_ModStart> mb_offset ) ; memcpy <S2SV_ModEnd> ( mvy, <S2SV_ModStart> mb_offset ) ; memcpy <S2SV_ModEnd> ( mvy, <S2SV_ModStart> mb_offset ) ; memcpy <S2SV_ModEnd> ( mvx, <S2SV_ModStart> mb_offset ) ; memcpy <S2SV_ModEnd> ( mvy, <S2SV_ModStart> mb_offset ) ; memcpy <S2SV_ModEnd> ( mvy, <S2SV_ModStart> mb",0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
97,"<S2SV_ModStart> msicap msicap ; int rc ; rc = <S2SV_ModStart> msicap, msgnum <S2SV_ModEnd> ) ; return <S2SV_ModStart> ) ; return rc <S2SV_ModEnd> ; } <S2SV_null>",0
98,"<S2SV_ModStart> -> ptr ; if ( cmd -> flags & REDIS_CMD_DENYPASS ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> permitted <S2SV_blank> when <S2SV_blank> authenticated"" ) ; return REDIS_OK ; }",0
99,<S2SV_ModStart> ; if ( cfg -> g_w == 0 || cfg -> g_h == 0 ) return VPX_CODEC_ERR_INVALID_ARGS ; if ( cfg -> g_w == 0 || cfg -> g_h == 0 ) return VPX_CODEC_ERR_INVALID_ARGS ; if ( cfg -> g_w == 0 || cfg -> g_h == 0 ) return VPX_CODEC_ERR_INVALID_ARGS ; if ( <S2SV_ModStart> VPX_RC_ONE_PASS ) ) return VPX_CODEC_ERR_INVALID_ARGS ; if <S2SV_ModEnd> ( cfg -> <S2SV_ModStart> g_lag_in_frames > 1 ) return VPX_CODEC_ERR_INVALID_ARGS ; if <S2SV_ModEnd> ( cfg -> <S2SV_ModStart> cfg -> g_pass == VPX_RC_ONE_PASS ) return VPX_CODEC_ERR_INVALID_ARGS ; if ( cfg -> g_pass == VPX_RC_ONE_PASS ) return VPX_CODEC_ERR_INVALID_ARGS ; if ( cfg -> g_pass == VPX_RC_ONE_PASS ) return VPX_CODEC_ERR_INVALID_ARGS,0
100,<S2SV_ModStart> { cpi -> mb. <S2SV_ModStart> & cpi -> zbin_mode_boost <S2SV_ModEnd> ) ; },0
101,<S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> info -> si_signo,0
102,"<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; if (! ptr -> movie_identifier ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_LEVEL_ERROR, GF_LOG_LEVEL_ERROR, ""%s: <S2SV_blank> Box <S2SV_blank> %p <S2SV_blank> has <S2SV_blank> no <S2SV_blank> movie <S2SV_blank> identifier"", __func__, ptr ) ; return GF_ISOM_INVALID_FILE ; }",0
103,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
104,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> -> state == fmode <S2SV_ModEnd> ) return ; <S2SV_ModStart> if ( ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> )!= ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> { if ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> -> state = fmode <S2SV_ModEnd> ; } <S2SV_null>",0
105,"<S2SV_ModStart> read_info ) ; status = SetImageExtent ( image, image -> rows, image -> cols ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
106,<S2SV_ModStart> 0 ; } if ( len > SIZE_MAX - elem. in_sg [ 0 ]. iov_len ) { return 0 ; },0
107,<S2SV_ModStart> unsigned ) JPC_QCX_GETEXPN <S2SV_ModEnd> ( qcd -> <S2SV_ModStart> unsigned ) JPC_QCX_GETMANT <S2SV_ModEnd> ( qcd ->,0
108,<S2SV_ModStart> = AV_PIX_FMT_PAL8 ; return 0 ;,0
109,<S2SV_ModStart> length - 1 <S2SV_ModEnd> ) ; return,1
110,"<S2SV_ModStart> image_noffset ) { if ( noffset == - FDT_ERR_TRUNCATED || noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; }",0
111,<S2SV_ModStart> rx_kfifo_lock ) ; mutex_init ( & state -> tx_kfifo_lock ) ; <S2SV_ModStart> GFP_KERNEL ) ) { kfree ( state ) ; <S2SV_ModStart> - ENOMEM ; } <S2SV_ModStart> } else { mutex_destroy ( & state -> tx_kfifo_lock ) ;,0
112,"<S2SV_ModStart> vpx_codec_dec_cfg_t * cfg, vpx_codec_flags_t flags <S2SV_ModStart> = cfg ; if (! cfg ) { res = VPX_CODEC_INCAPABLE ; } else { <S2SV_ModStart> = VPX_CODEC_OK ; }",0
113,<S2SV_ModStart> ; value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1100WritePhyReg (,0
114,<S2SV_ModStart> = code ; ipc. tos = tos ;,0
115,<S2SV_ModStart> ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & <S2SV_ModStart> VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT,0
116,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
117,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; RESERVE_SPACE",1
118,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ) ; return 0 <S2SV_ModStart> break ; } return error <S2SV_ModEnd> ; } <S2SV_null>,1
119,"<S2SV_ModStart> len ) ; if ( len < 1 ) { r_strbuf_append ( & op -> esil, ""\\0"" ) ; return - 1 ; }",0
120,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
121,<S2SV_ModStart> goto trunc ; if ( lshp -> ls_length < sizeof ( struct lsa6_hdr ) ) goto trunc ;,0
122,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { ret = - EFAULT ; break ; } <S2SV_ModEnd> * obuf =",0
123,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
124,<S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ) <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ),1
125,"<S2SV_ModStart> costs, vp9_tree * <S2SV_ModStart> ) { const vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> ) ; const vpx_tree_index <S2SV_ModEnd> ii = tree",0
126,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
127,<S2SV_ModStart> & 0xffff ; if (! synth_devs [ dev ] ) return - ENXIO ;,0
128,"<S2SV_ModStart> fadst16 ( const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t <S2SV_ModEnd> x0, s1 <S2SV_ModStart> int x0, x1, x2, x3, x4, x5, x6, x7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t <S2SV_ModEnd> x0 = input <S2SV_ModStart> 15 ] ; tran_high_t <S2SV_ModEnd> x2 = input <S2SV_ModStart> 2 ] ; tran_high_t <S2SV_ModEnd> x3 = input <S2SV_ModStart> 11 ] ; tran_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 4 ] ; tran_high_t <S2SV_ModEnd> x5 = input <S2SV_ModStart> 9 ] ; tran_high_t <S2SV_ModEnd> x7 = input <S2SV_ModStart> 7 ] ; tran_high_t <S2SV_ModEnd> x8 = input <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> x9 =",0
129,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> flags |= HAS_EDSP <S2SV_ModStart> |= HAS_EDSP ; <S2SV_ModEnd> flags |= HAS_MEDIA <S2SV_ModStart> |= HAS_MEDIA ; <S2SV_ModEnd> flags |= HAS_NEON <S2SV_ModStart> flags |= HAS_NEON ; <S2SV_ModEnd> return flags &,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
131,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> count_segs_sb ( VP9_COMP <S2SV_ModStart> const tile, MODE_INFO_PTR * const mi <S2SV_ModEnd>, int * <S2SV_ModStart> ) { const TileInfo * tile_info = & tile -> tile_info ; const <S2SV_ModStart> cm = & mi <S2SV_ModEnd> -> common ; <S2SV_ModStart> bsize ) { TileInfo * tile = & tile_info -> tile_info ; <S2SV_ModStart> ) return ; int bw, bh ; const int bs = num_8x8_blocks_wide_lookup [ mi [ 0 ] -> mbmi. sb_type ] ; int hbs = bs / 2 ; if ( mi_row >= cm -> mi_rows || mi_col >= cm -> mi_cols ) return ; bw = num_8x8_blocks_wide_lookup [ mi [ 0 ] -> mbmi. sb_type ] ; bh = num_8x8_blocks_high_lookup [ mi [ 0 ] -> mbmi. sb_type ] ; if ( bw == bs && bh == bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_",0
132,<S2SV_ModStart> flags & CLIENT_CLOSE_AFTER_REPLY ) break ; if ( c -> flags & CLIENT_DISCONNECTING,0
133,<S2SV_ModStart> get_blocks_flags = EXT4_GET_BLOCKS_CREATE | EXT4_GET_BLOCKS_DELALLOC_RESERVE <S2SV_ModStart> get_blocks_flags |= EXT4_GET_BLOCKS_CREATE <S2SV_ModEnd> ; blks =,0
134,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart>, handle, hints, <S2SV_ModStart> p -> ai_flags <S2SV_ModEnd>, & p <S2SV_ModStart> p -> ai_family <S2SV_ModEnd>, & p <S2SV_ModStart> p -> ai_socktype <S2SV_ModEnd>, & p <S2SV_ModStart> p -> ai_protocol <S2SV_ModEnd>, p -> <S2SV_ModStart>, NULL, <S2SV_ModEnd> NULL )!= <S2SV_ModStart> } if (! p ) { ret = OE_EAI_MEMORY ; goto done ; } if ( retval == 1 ) break ; if ( retval!= - 1 || oe_errno!= OE_ENAMETOOLONG ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( oe_errno ) ; } if ( p -> ai_family == AF_INET || p -> ai_socktype == SOCK_STREAM ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( oe_errno ) ; goto done ; } if ( retval == 1 ) break ; if ( retval!= - 1 || oe_errno!= OE_errno ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( oe_errno ) ; } if ( p -> ai_add",0
135,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
136,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
137,"<S2SV_ModStart> * indx, u8 <S2SV_ModEnd> size, void <S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmemdup ( data, size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
138,"<S2SV_ModStart> asdl_seq * body, const char * name <S2SV_ModStart> = body ; p -> v. Module. name = name ;",0
139,"<S2SV_ModStart> * src, vpx_time_t ts_start, vpx_time_t <S2SV_ModEnd> ts_end, unsigned <S2SV_ModStart> >> 4 ; vpx_copy_and_extend_frame <S2SV_ModEnd> ( src, <S2SV_ModStart> buf -> img, ts_start, ts_end <S2SV_ModStart> } else { vpx_copy_and_extend_frame <S2SV_ModEnd> ( src, <S2SV_ModStart> } # else vpx_copy_and_extend_frame <S2SV_ModEnd> ( src,",0
140,"<S2SV_ModStart> method == LPF_PICK_FROM_Q || method == LPF_PICK_TO_Q <S2SV_ModStart> int q = cpi -> base_qindex? <S2SV_ModStart> cm -> base_qindex, 0 ) : vp9_ac_quant ( cm -> base_qindex, 0 ) ; int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; if ( cm -> frame_type == KEY_FRAME ) filt_guess -= 4 ; else filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; lf -> filter_level = clamp ( filt_guess, min_filter_level, max_filter_level ) ; } else { search_filter_level ( sd, cpi, method == LPF_PICK_FROM_SUBIMAGE ) ; } if ( method == LPF_PICK_TO_Q ) { const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; if ( cm -> frame_type",0
141,"<S2SV_ModStart> case BTA_DM_DISABLE_EVT : if ( p_data -> enable. status == BT_STATUS_SUCCESS ) { BTIF_TRACE_EVENT ( ""btif_dm_upstreams_cback <S2SV_blank> <S2SV_blank> disabling <S2SV_blank> device"" ) ; btif_disable_device ( ) ; } <S2SV_ModStart> case BTA_DM_DISABLE_EVT : if ( p_data -> enable. status == BT_STATUS_SUCCESS ) { BTIF_TRACE_EVENT ( ""btif_dm_upstreams_cback <S2SV_blank> <S2SV_blank> disabling <S2SV_blank> device"" ) ; btif_disable_device ( ) ; }",0
142,"<S2SV_ModStart> int a = getint <S2SV_ModEnd> ( fmt,",0
143,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
144,"<S2SV_ModStart> vpx_codec_err_t res ; vpx_alg_priv_t * priv = NULL ; <S2SV_ModStart> data_sz ) ) { <S2SV_ModStart> = VPX_CODEC_INVALID_PARAM ; } <S2SV_ModStart> ; else { priv = ctx -> priv -> alg_priv ; <S2SV_ModStart>. decode ( <S2SV_ModEnd> priv, data",0
145,"<S2SV_ModStart> inode * inode, struct buffer_head * * directory_bh <S2SV_ModStart> inode ) ; * directory_bh = NULL ; <S2SV_ModStart> ) ; } * directory_bh = bh ;",0
146,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> ) ; } sprintf ( outputbuffer, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", c, m, y, k ) ;",0
147,<S2SV_ModStart> self ) { if (! self ) { return ; },0
148,<S2SV_ModStart> ( ) ; if (! a ) return 0 ; <S2SV_ModStart> i ) { if (! ( <S2SV_ModStart> ] ) ) ) return 0 ; <S2SV_ModEnd> suffix_object ( p,0
149,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_Format ( PyExc_TypeError, ""Module <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> must <S2SV_blank> be <S2SV_blank> a <S2SV_blank> list, <S2SV_blank> not <S2SV_blank> a <S2SV_blank> %.200s"", tmp -> ob_type -> tp_name ) ; goto failed ; } len = PyList_GET_SIZE ( tmp ) ; body = _Ta3_asdl_seq_new ( len, arena ) ; if ( body == NULL ) goto failed ; for ( i = 0 ; i < len ; i ++ ) { stmt_ty <S2SV_ModEnd> value ; res <S2SV_ModStart> = obj2ast_stmt ( tmp <S2SV_ModEnd>, & value <S2SV_ModStart>, i, & <S2SV_ModStart> ) ; } Py_CLEAR <S2SV_ModEnd> ( tmp ) <S2SV_ModStart> } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_type_ignores, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module",0
150,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
151,<S2SV_ModStart> ; if ( msg_sys -> msg_name == NULL || uaddr_len == NULL ) { err = - EFAULT ; goto out_freeiov ; } if (,0
152,"<S2SV_ModStart> buffer_head * dibh <S2SV_ModEnd> ; u64 bn <S2SV_ModStart> unsigned ptrs_per_blk ; int eob = 0 ; enum alloc_state state ; __be64 * ptr ; __be64 zero_bn = 0 ; BUG_ON ( sheight < 1 ) ; BUG_ON ( dibh == NULL ) ; gfs2_trans_add_bh ( ip -> i_gl, dibh, 1 ) ; if ( height == sheight ) { struct buffer_head * bh ; ptr = metapointer ( height - 1, mp ) ; bh = mp -> mp_bh [ height - 1 ] ; dblks = gfs2_extent_length ( bh -> b_data, bh -> b_size, ptr, maxlen, & eob ) ; BUG_ON ( dblks < 1 ) ; state = ALLOC_DATA ; } else { ptrs_per_blk = height > 1? sdp -> sd_inptrs : sdp -> sd_diptrs ; dblks = min ( maxlen, ptrs_per_blk - mp -> mp_list [ height - 1 ] ) ; if ( height == ip",0
153,"<S2SV_ModStart>, vpx_codec_iface_name ( stream <S2SV_ModEnd> -> codec -> <S2SV_ModStart> -> codec -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> -> use_i420? ""I420"" : ""YV12"" ) ; fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", stream -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> index ) ; fprintf ( stderr, ""Destination <S2SV_blank> file: <S2SV_blank> %s\\n"", stream -> config. out_fn ) ; fprintf ( stderr, ""Encoder <S2SV_blank> parameters:\\n"" ) ; SHOW ( g_usage ) ; SHOW ( g_threads ) ; SHOW ( g_profile ) ; SHOW ( g_w ) ; SHOW ( g_h ) ; SHOW ( g_timebase. num ) ; SHOW ( g_timebase. den ) ; SHOW ( g_error_resilient ) ; SHOW ( g_pass ) ; SHOW ( g_lag_in_frames ) ;",0
154,<S2SV_ModStart> ) ) { if ( ctxt -> namespaces!= NULL ) { xmlNsFree ( ctxt -> namespaces ) ; ctxt -> namespaces = NULL ; } <S2SV_ModStart> ) ) { if ( ctxt -> namespaces!= NULL ) { xmlNsFree ( ctxt -> namespaces ) ; ctxt -> namespaces = NULL ; } <S2SV_ModStart> ) ) { if ( ctxt -> namespaces!= NULL ) { xmlNsFree ( ctxt -> namespaces ) ; ctxt -> namespaces = NULL ; },0
155,"<S2SV_ModStart> { if ( safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> { if ( safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> { if ( safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> { if ( safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.cshrc"",",0
156,<S2SV_ModStart> msix_tab_size ) { <S2SV_ModEnd> bzero ( msixcap,1
157,<S2SV_ModStart> ; if ( <S2SV_ModEnd> js_regexec ( re,0
158,"<S2SV_ModStart> case OFreshOID : <S2SV_ModEnd> sp -- ; <S2SV_ModStart> case OReadItems : if ( Int_val ( Field ( ( value ) dest, 1 ) ) >= 0 ) caml_set_oo_id ( ( value ) dest ) ;",0
159,"<S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; ksz8851WriteReg <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_TXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_RXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_RXIE <S2SV_ModEnd>, ier )",0
160,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_quantization ( VP9_COMMON <S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { return vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
161,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> p_buf, msglen )",1
162,"<S2SV_ModStart> fp ) ; if ( fp == NULL ) { log_debug ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s"", __func__, file ) ; goto sslerr ; }",0
163,"<S2SV_ModStart> ( ) ; strncat <S2SV_ModEnd> ( t1_buf_array, <S2SV_ModStart> t1_buf_array, t1_line_array, strlen ( t1_line_array )",0
164,"<S2SV_ModStart> int mi_col, MACROBLOCK_CONTEXT * ctx, <S2SV_ModStart> int bsl = b_width_log2_subsize <S2SV_ModEnd> ( bsize ) <S2SV_ModStart>, hbs = b_width_log2_subsize <S2SV_ModEnd> ( bsize ) <S2SV_ModStart> partition_lookup [ bsl <S2SV_ModEnd> ] ; assert <S2SV_ModStart> case PARTITION_NONE : set_modeinfo_offsets_from_context <S2SV_ModEnd> ( cm, <S2SV_ModStart> mi_col ) ; set_modeinfo_offsets_from_context <S2SV_ModEnd> ( cm, <S2SV_ModStart> case PARTITION_VERT : set_modeinfo_offsets_from_context <S2SV_ModEnd> ( cm, <S2SV_ModStart> mi_col ) ; set_modeinfo_offsets_from_context <S2SV_ModEnd> ( cm, <S2SV_ModStart> mi_cols ) { set_modeinfo_offsets_from_context <S2SV_ModEnd> ( cm, <S2SV_ModStart> case PARTITION_HORZ : set_modeinfo_offsets_from_context <S2SV_ModEnd> ( cm, <S2SV_ModStart> break ; } set_modeinfo_offsets_from_context <S2SV_ModEnd> ( cm, <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
165,"<S2SV_ModStart> key_ref ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) { ret = - ENOKEY ; goto error2 ; }",1
166,<S2SV_ModStart> ; } } if ( 0 == ps_dec -> u1_first_slice_found ) { ps_dec -> u1_first_slice_found = 1 ; },0
167,<S2SV_ModStart> var_off ) ; if (! src_known &&! dst_known ) return - EINVAL ; <S2SV_ModStart> var_off ) ; if (! src_known &&! dst_known ) return - EINVAL ;,0
168,<S2SV_ModStart> cfile ) ; if (! file_is_dir ( filp ) ) { rc = - EISDIR ; goto lookup_out ; },0
169,<S2SV_ModStart> ; treq -> loc_wscale = rcv_wscale ; treq ->,0
170,"<S2SV_ModStart> number_of_frames, number_of_keyframes <S2SV_ModEnd> ; SvcInternal * <S2SV_ModStart> double y_scale ; SvcInternal_t <S2SV_ModEnd> * const si <S2SV_ModStart> svc_ctx ) ; <S2SV_ModEnd> if ( si <S2SV_ModStart> svc_ctx ) ; <S2SV_ModEnd> number_of_keyframes = encode_frame_count <S2SV_ModStart> = encode_frame_count / ( double ) <S2SV_ModStart> + 1 ; if ( number_of_keyframes > INT32_MAX / si -> kf_dist ) return vpx_svc_get_message ( svc_ctx ) ; svc_log ( svc_ctx, SVC_LOG_INFO, ""\\n"" ) ; for ( i = 0 ; i < si -> layers ; ++ i ) { svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f], <S2SV_blank> Bytes=[%u]\\n"", i, ( double ) si -> psnr_sum [ i ] [ 0 ] / number_of_frames, ( double ) si -> psnr_sum [ i ] [ 1 ] / number_of_frames, si ->",0
171,<S2SV_ModStart> -> sb_buffer ) { <S2SV_ModStart> sb_buffer ) ; },0
172,"<S2SV_ModStart> n ) { <S2SV_ModEnd> char * literal_start <S2SV_ModStart> * str ; for ( ; * str < end ; ( * str ) ++ ) { char ch = * * str ; if (! in_named_escape && ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 1 ; } else if ( ch == '{' || ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } if ( ch == '{' || ch == '}' ) { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; return - 1 ; } } if ( ch == '}' ) { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; return - 1 ; } } break ; } } literal_start = * str ; const char * literal",0
173,"<S2SV_ModStart> pd, g_settings_dump_location, pd -> dd_dirname",0
174,<S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ) <S2SV_ModStart> ; pixel_value = ( unsigned long ),0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""%u"", 0 ) ) ; return ; }",0
176,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mv_stride",0
177,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; const MODE_INFO * * mi_8x8 = cm -> mi_grid_visible ; const MODE_INFO * * prev_mi_8x8 = cm -> prev_mi_grid_visible ; const BLOCK_SIZE bsize ; <S2SV_ModStart> int mi_col ; for ( mi_col = tile -> mi_col_start ; mi_col < tile -> mi_col_end ; mi_col += MI_BLOCK_SIZE ) { int dummy_rate = 0 ; int64_t dummy_dist = 0 ; const int idx_str = cm -> mi_stride * mi_row + mi_col ; for ( mi_col = tile -> mi_col_start ; mi_col < tile -> mi_col_end ; mi_col += MI_BLOCK_SIZE ) { int idx_str = cm -> mi_stride * mi_row + mi_col ; MODE_INFO * * mi_8x8 = cm -> mi_grid_visible + idx_str ; MODE_INFO * * prev,0
178,<S2SV_ModStart> u_int8_t state ; struct nf_conn_priv * priv = nf_ct_priv ( ct ) ; <S2SV_ModStart> & dh ) ; if (! dh ) return false,0
179,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static void <S2SV_ModEnd> ip_options_get_finish ( struct <S2SV_ModStart> ip_options_get_finish ( struct ip_options_rcu <S2SV_ModEnd> * net, <S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> * opt, u32 <S2SV_ModEnd> optlen ) { <S2SV_ModStart> & 3 ) rcu_assign_pointer ( <S2SV_ModStart> __data [ optlen ], IPOPT_END ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( <S2SV_ModEnd> ip_options_compile ( net <S2SV_ModStart> ( net, & opt -> opt <S2SV_ModEnd>, NULL ) <S2SV_ModStart> NULL ) ) <S2SV_ModEnd> return - EINVAL <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> kfree ( *",0
180,"<S2SV_ModStart> ; if ( strcmp ( connection, ""Upgrade"" ) == 0 ) { const char * ws_version = http_request_get_header ( info -> request, ""Sec-WebSocket-Version"" ) ; if ( ws_version == NULL || strcmp ( ws_version, ""13"" )!= 0 ) goto error ; const char * ws_upgrade = http_request_get_header ( info -> request, ""Sec-WebSocket-Upgrade"" ) ; if ( ws_upgrade == NULL || strcasecmp ( ws_upgrade, ""Upgrade"" ) == 0 ) { const char * ws_version = http_request_get_header ( info -> request, ""Sec-WebSocket-Version"" ) ; if ( ws_version == NULL || strcmp ( ws_version, ""13"" )!= 0 ) goto error ; const char * ws_upgrade = http_request_get_header ( info -> request, ""Sec-WebSocket-Upgrade"" ) ; if ( ws_upgrade == NULL || strcasecmp ( ws_upgrade, ""Upgrade"" ) == 0 ) { const char * ws_upgrade = http_request_get_header ( info -> request, ""Sec-WebSocket-Upgrade"" ) ; if ( ws_upgrade ==",0
181,"<S2SV_ModStart> * findalldevs_if ; uint32 nif = 0 ; if ( pcap_findalldevs ( & alldevs, errmsgbuf ) == - 1 ) goto error ; if ( alldevs == NULL ) { if ( rpcap_senderror ( pars -> sockctrl, ver, PCAP_ERR_NOREMOTEIF, ""No <S2SV_blank> interfaces <S2SV_blank> found! <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> libpcap/WinPcap <S2SV_blank> is <S2SV_blank> properly <S2SV_blank> installed"" "" <S2SV_blank> and <S2SV_blank> you <S2SV_blank> have <S2SV_blank> the <S2SV_blank> right <S2SV_blank> to <S2SV_blank> access <S2SV_blank> to <S2SV_blank> the <S2SV_blank> remote <S2SV_blank> device."", errbuf ) == - 1 ) { rpcapd_log ( LOGPRIO_ERROR, ""Send <S2SV_blank> to <S2SV_blank> client <S2SV_blank> failed: <S2SV_blank> %s"", errbuf ) ; return - 1 ; } return 0 ; } for ( d = alldevs ; d!= NULL ; d = d -> next ) { nif ++ ; if ( d -> description ) plen <S2SV_ModEnd> += strlen ( <S2SV_ModStart> -> description ) ; if ( d -> name ) plen <S2SV_ModEnd> += strlen ( <S2SV_ModStart> -> name ) ; if ( plen < sizeof ( struct rpcap_sockaddr ) ) { plen = sizeof ( struct rpcap",0
182,"<S2SV_ModStart>, client_uid, DUMP_DIR_MODE_DEFAULT <S2SV_ModEnd> ) ; if",0
183,<S2SV_ModStart> ; x += 4 <S2SV_ModEnd> ) { index,1
184,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
185,"<S2SV_ModStart> ) ; } if ( image -> format == ImageFormatMagick ) { ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; }",0
186,"<S2SV_ModStart> in_cksum ( bp, len",0
187,"<S2SV_ModStart>! ptrace_has_cap ( task_cred ( task ) <S2SV_ModEnd> -> user_ns,",0
188,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
189,<S2SV_ModStart> ; if ( 0 == payload_bits_remaining ) { ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 0 ; ps_parse -> s_sei_params. i4_sei_user_data_registered_ITU_T_T35 = 0 ; ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 0 ; } if (,0
190,"<S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ), GFP_KERNEL <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ), GFP_KERNEL <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ), GFP_KERNEL <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ), GFP_KERNEL <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ), GFP_KERNEL <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ), GFP_KERNEL <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ), GFP_KERNEL <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ), GFP_KERNEL <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ), GFP_KERNEL <S2SV_ModEnd> ) ; if <S2SV_ModStart> ; sde = kzalloc ( <S2SV_ModEnd> size",0
191,"<S2SV_ModStart> * name, my_bool <S2SV_ModEnd> rep_quick ) { <S2SV_ModStart> ; if (! rep_quick && <S2SV_ModStart> ; if (! rep_quick && <S2SV_ModStart> ; if (! rep_quick && <S2SV_ModStart> ; if (! rep_quick &&",0
192,<S2SV_ModStart> } pairs = palloc0 <S2SV_ModEnd> ( pcount *,0
193,"<S2SV_ModStart> val ) ; if (! <S2SV_ModStart>, val ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> invalid <S2SV_blank> variable"", r -> name )",0
194,"<S2SV_ModStart> ) ) { if ( 0 == strncmp ( v, ""Host: <S2SV_blank> "", 3 ) ) { return bad_request ( c, 400, __LINE__ ) ; }",0
195,"<S2SV_ModStart> vp9_fht16x16_c ( const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> 256 ] ; tran_low_t <S2SV_ModEnd> * outptr = <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16",0
196,"<S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( old_exec, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( new_exec, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( old_exec, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( new_exec,",0
197,"<S2SV_ModStart> '\\0' ) ; size_t len = <S2SV_ModEnd> strlen ( filename <S2SV_ModStart> ) + 5 ; char * temp_filename = osi_calloc ( len <S2SV_ModStart> ; if ( temp_filename == NULL <S2SV_ModEnd> ) { LOG_ERROR <S2SV_ModStart> false ; } memset ( temp_filename, 0, len ) ; strncpy <S2SV_ModEnd> ( temp_filename, <S2SV_ModStart> section -> name, len ) ; temp_filename [ len - 1 ] = '\\0' <S2SV_ModEnd> ; FILE * <S2SV_ModStart> sections ) ) { <S2SV_ModStart> fp ) ; }",0
198,<S2SV_ModStart> tptr ) ; ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> tptr ) ; ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> tptr ) ; ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> tptr ) ; ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> tptr ) ; ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> tptr ) ; ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> tptr ) ; ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> tptr ) ; ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> tptr ) ; ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> tptr ) ; ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> tptr ) ; ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> tptr ) ; ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> tptr ) ; ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> tptr ) ; ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> t,0
199,"<S2SV_ModStart> userData, target <S2SV_ModEnd> ) ; ctxt",0
200,"<S2SV_ModStart> ( ) ; size_t <S2SV_ModEnd> rv = Socket_print <S2SV_ModStart> ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.1\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %zu\\r\\n"" <S2SV_ModEnd> ""%s"" ""\\r\\n"" ""%s""",0
201,"<S2SV_ModStart> ) ; } if ( safe_chown ( dest, getuid ( ), getgid ( ) ) < 0 ) errExit ( ""safe_chown"" ) ; if ( safe_chmod ( dest, S_IRUSR | S_IWUSR ) < 0 ) errExit ( ""safe_chmod"" ) ; unlink ( src ) ; <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
202,<S2SV_ModStart>!= BFA_STATUS_OK ) { kfree ( fcstats ) ; <S2SV_ModStart> return NULL ; },1
203,"<S2SV_ModStart> -> x = clampf ( 1.0f, <S2SV_ModEnd> value -> x <S2SV_ModStart> -> x ), 0.0f <S2SV_ModStart> -> y = clampf ( 1.0f, <S2SV_ModEnd> value -> y <S2SV_ModStart> -> y ), 0.0f <S2SV_ModStart> -> z = clampf ( 1.0f, <S2SV_ModEnd> value -> z <S2SV_ModStart> -> z = 0.0f <S2SV_ModEnd> ; } <S2SV_null>",0
204,<S2SV_ModStart> -> sasl_mechanism ; if ( IS_SAL_MECHANISM ( rec -> sasl_mechanism ) ) { g_free ( rec -> sasl_mechanism ) ; rec -> sasl_mechanism = NULL ; } <S2SV_ModStart> -> sasl_username ; if ( IS_SAL_PASSWORD ( rec -> sasl_password ) ) { g_free ( rec -> sasl_password ) ; rec -> sasl_password = NULL ; } <S2SV_ModEnd> * dest =,0
205,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
206,"<S2SV_ModStart> i, tcount <S2SV_ModEnd> ; if ( <S2SV_ModStart> return ; } exif_log ( ne -> log, EXIF_LOG_CODE_DEBUG, ""ExifMnoteCanon"", ""Loading <S2SV_blank> MnoteCanon <S2SV_blank> entries"" ) ;",0
207,"<S2SV_ModStart>, llbuff, sizeof ( llbuff ) <S2SV_ModEnd> ) ; if",0
208,"<S2SV_ModStart> olen ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> long hex ; <S2SV_ModEnd> if (! <S2SV_ModStart> hex ) ; if (! <S2SV_ModEnd> Curl_convert_from_network ( handle <S2SV_ModStart>, 1 ) <S2SV_ModEnd> ) { free",0
209,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
210,<S2SV_ModStart> ; def -> <S2SV_ModEnd> session_setup = usm_session_init,0
211,<S2SV_ModStart> NULL ; return <S2SV_ModEnd> match ( prog,0
212,<S2SV_ModStart> idx ] ; <S2SV_ModEnd> switch ( action <S2SV_ModStart> ) ; } <S2SV_ModEnd> return SNMP_ERR_NOERROR ;,0
213,<S2SV_ModStart> 255U ; } if ( pixels > ( ( ssize_t ) number_pixels - 1 ) / sizeof ( unsigned char ) ) return ( - 1 ) ;,0
214,<S2SV_ModStart> timer ) ; spin_lock_irq ( & slave_active_lock ) ; spin_lock ( & timer -> lock ) ; <S2SV_ModStart> open_list ) { <S2SV_ModEnd> list_move_tail ( & <S2SV_ModStart> = NULL ; list_del_init ( & slave -> ack_list ) ; list_del_init ( & slave -> active_list ) ; } spin_unlock ( & timer -> lock ) ; <S2SV_ModEnd> } mutex_unlock (,0
215,<S2SV_ModStart> -> u1_dpb_commands_read ) { <S2SV_ModStart> ps_dec ) ; } else { ps_dec -> u4_bitoffset = 0 ; },0
216,"<S2SV_ModStart> decode ) { uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > info -> rasterSize || widthOverflow > 0 || heightOverflow > 0 ) { void * tmpRasterBits = reallocarray ( info -> rasterBits, newRasterSize * sizeof ( uint_fast32_t ) ) ; <S2SV_ModStart> -> originalHeight ; <S2SV_ModEnd> if ( newRasterSize",0
217,<S2SV_ModStart> validator -> user. buf,0
218,<S2SV_ModStart> bus ] ; if ( bi == NULL ) return <S2SV_ModEnd> ; si =,0
219,"<S2SV_ModStart>, timeo ) <S2SV_ModEnd> ; if (",1
220,<S2SV_ModStart> += 9 ; * s && <S2SV_ModStart> * t && <S2SV_ModEnd> isspace ( *,0
221,"<S2SV_ModStart> ; result = TEMP_FAILURE_RETRY ( <S2SV_ModStart> NULL, NULL )",0
222,"<S2SV_ModStart> msixcap msixcap ; if ( msgnum < 1 || msgnum > MAX_MSIX_TABLE_ENTRIES ) return - EINVAL ; if ( barnum < 0 || barnum >= PCIR_MAX_BAR_0 ) return - EINVAL <S2SV_ModEnd> ; tab_size = <S2SV_ModStart> msix ) ; if (! <S2SV_ModStart>, msgnum ) ) return - EINVAL",0
223,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",1
224,<S2SV_ModStart> == NULL ) return KRB5KDC_ERR_PREAUTH_FAILED <S2SV_ModEnd> ; status = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> X509_NAME_free ( is,0
225,<S2SV_ModStart> <S2SV_null> <S2SV_null> static MV_REFERENCE_FRAME <S2SV_ModEnd> select_tx_mode ( const <S2SV_ModStart> cpi ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; <S2SV_ModStart> lossless ) { frame_type = get_frame_type ( cpi ) ; <S2SV_ModStart> else if ( frame_type <S2SV_ModEnd> == 0 ) <S2SV_ModStart> else { if ( <S2SV_ModStart> == USE_LARGESTALL ) <S2SV_ModEnd> return ALLOW_32X32 ; <S2SV_ModStart> return ALLOW_32X32 ; <S2SV_ModEnd> else if ( <S2SV_ModStart> else if ( frame_type <S2SV_ModEnd> == USE_FULL_RD ) <S2SV_ModStart> tx_mode ; } return frame_type ;,0
226,<S2SV_ModStart> ) ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT ) { if ( im -> gdes [ i ]. cf == CF_MHWPREDICT,0
227,<S2SV_ModStart> ( buf1 -> tile_size <S2SV_ModEnd> < buf2 -> <S2SV_ModStart> < buf2 -> tile_size <S2SV_ModEnd> ) { return <S2SV_ModStart> ( buf1 -> tile_size <S2SV_ModEnd> == buf2 -> <S2SV_ModStart> == buf2 -> tile_size <S2SV_ModEnd> ) { return,0
228,<S2SV_ModStart> ) + size ; if ( unlikely (! sz ) ) return NULL,0
229,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,1
230,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs,",0
231,"<S2SV_ModStart> fd, EPOLLIN | EPOLLET",0
232,<S2SV_ModStart> ( ) ; errors += test_url_formatting ( ) ;,0
233,<S2SV_ModStart> -> lun ) sas_eh_finish_cmd <S2SV_ModEnd> ( cmd ),1
234,"<S2SV_ModStart>, end_col_offset ; if ( TYPE ( CHILD ( n, name_i ) ) == FUNCTION ) { return NULL ; } <S2SV_ModStart> 2 ; } if ( TYPE ( CHILD ( n, name_i + 4 ) ) == FUNCTION ) { body = ast_for_funcdef_body ( c, CHILD ( n, name_i + 4 ) ) ; if (! body ) return NULL ; name_i += 4 ; } <S2SV_ModStart> ( is_async ) { if ( TYPE ( CHILD ( n, name_i + 5 ) ) == FUNCTION ) { body = ast_for_funcdef_body ( c, CHILD ( n, name_i + 5 ) ) ; if (! body ) return NULL ; <S2SV_ModStart> returns, LINENO ( n0 ), n0 -> n_col_offset, end_lineno, end_col_offset, c -> c_arena ) ; } else { return AsyncFunctionDef ( name, args, body, decorator_seq, returns, LINENO ( n ), n -> n_col_offset, end_lineno, end_col_offset, c -> c_arena ) ; } } else { return",0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) break ;",0
237,,1
238,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
239,"<S2SV_ModStart> case SEEK_SET : psf_log_printf ( psf, ""header_seek()\\n"" ) ; <S2SV_ModStart> case SEEK_CUR : psf_log_printf ( psf, ""header_seek()\\n"" ) ; <S2SV_ModStart> psf -> headend && position > psf -> headend ) { <S2SV_ModEnd> psf -> headend <S2SV_ModStart> psf -> headend = position ; <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> headindex = position ; break ; } ; if ( psf -> headindex + position >= psf -> headend ) { psf_fseek ( psf, position, whence ) ; return ; } ; if ( psf -> headindex + position <= psf -> headend ) { psf -> headindex += position ; break ; } ; if ( psf -> headindex + position > psf -> headend ) { psf -> headindex = psf -> headend ; psf_fseek ( psf, position, SEEK_CUR ) ; break ; } ; if ( psf -> headindex + position > psf -> headend ) { psf -> headindex = psf -> headend ; psf_fseek ( psf, position, SEEK_CUR ) ; break ; } ; psf -> headend += psf_fread ( psf -> header +",0
240,<S2SV_ModStart> u4_ofst ) ; ps_cabac -> u4_ofst = 0 ;,0
241,<S2SV_ModStart> ; } } if ( off < ctx -> size && CH ( off )!= _T ( '\\0' ) ) { line -> type = MD_LINE_BLANK ; break ; },0
242,<S2SV_ModStart> perf_event_context * ctx <S2SV_ModEnd> ; struct task_struct <S2SV_ModStart> task_struct * task ; ctx = perf_event_ctx_lock ( event ) ; if (! ctx ) return ; task = ctx -> task <S2SV_ModStart> event ) ; perf_event_ctx_unlock ( event ) <S2SV_ModEnd> ; } <S2SV_null>,0
243,<S2SV_ModStart> -> post_proc_flag = <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> noise_level ; # if CONFIG_VP9_DEBUG_VISUALIZER flags -> display_ref_frame_flag = ctx -> dbg_color_ref_frame_flag ; flags -> display_mb_modes_flag = ctx -> dbg_color_mb_modes_flag ; flags -> display_b_modes_flag = ctx -> dbg_color_b_modes_flag ; flags -> display_mv_flag = ctx -> dbg_display_mv_flag ; # else <S2SV_ModEnd> flags -> display_ref_frame_flag <S2SV_ModStart> -> dbg_display_mv_flag ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
244,"<S2SV_ModStart> = 0 ; if ( msg_len < sizeof ( struct olsr_msg4 ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> too <S2SV_blank> short <S2SV_blank> msg_len <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6, msg_len ) ) ; goto trunc ; } <S2SV_ModStart> ) ) ; if ( msg_len < sizeof ( struct olsr_msg6 ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> too <S2SV_blank> short <S2SV_blank> msg_len <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6, msg_len ) ) ; goto trunc ; }",0
245,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vpx_usec_timer_start ( & <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,1
246,"<S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file <S2SV_blank> %s\\n"", src <S2SV_ModEnd> ) ; exit <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> copy_file ( src <S2SV_ModStart> dest ) ; <S2SV_ModEnd> fs_logger2 ( ""clone""",0
247,<S2SV_ModStart> ) ) ; if ( sfb > IXHEAACD_MAX_PATCH ) sfb = IXHEAACD_MAX_PATCH ; <S2SV_ModStart> ) ) ; if ( sfb > IXHEAACD_MAX_PATCH ) sfb = IXHEAACD_MAX_PATCH ; <S2SV_ModStart> ) ) ; if ( sfb > IXHEAACD_MAX_PATCH ) sfb = IXHEAACD_MAX_PATCH ; <S2SV_ModStart> ) ) ; if ( sfb > IXHEAACD_MAX_PATCH ) sfb = IXHEAACD_MAX_PATCH ; <S2SV_ModStart> ) ) ; if ( sfb > IXHEAACD_MAX_PATCH ) sfb = IXHEAACD_MAX_PATCH ; <S2SV_ModStart> ) ) ; if ( sfb > IXHEAACD_MAX_PATCH ) sfb = IXHEAACD_MAX_PATCH ; <S2SV_ModStart> ) ) ; if ( sfb > IXHEAACD_MAX_PATCH ) sfb = IXHEAACD_MAX_PATCH ;,0
248,<S2SV_ModStart> prov_spec = parsed_require_line <S2SV_ModEnd> ; spec = <S2SV_ModStart> r ) ; <S2SV_ModEnd> return AUTHZ_OK ;,0
249,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> rows, image -> cols ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
250,<S2SV_ModStart> (! proto_end ||! * proto_end,0
251,<S2SV_ModStart> end = path ; if ( end >= path_len ) return - FDT_ERR_NOSPACE,0
252,<S2SV_ModStart> ) ) { if ( server. bgsavechildpid == - 1 && server. bgrewritechildpid == - 1 ) { closeTimedoutClients ( ) ; exit ( 0 ) ; } <S2SV_ModStart> ) ) { if ( server. bgsavechildpid == - 1 && server. bgrewritechildpid == - 1 ) { closeTimedoutClients ( ) ; exit ( 0 ) ; } <S2SV_ModStart> ) ) { if ( server. bgsavechildpid == - 1 ) { closeTimedoutClients ( ) ; exit ( 0 ) ; } <S2SV_ModStart> ) ) { if ( server. bgsavechildpid == - 1 && server. bgrewritechildpid == - 1 ) { closeTimedoutClients ( ) ; exit ( 0 ) ; } <S2SV_ModStart> ) ) { if ( server. bgsavechildpid == - 1 && server. bgrewritechildpid == - 1 ) { closeTimedoutClients ( ) ; exit ( 0 ) ; } <S2SV_ModStart> ) ) { if ( server. bgsavechildpid == - 1 ) { closeTimedoutClients ( ) ; exit ( 0 ) ; } <S2SV_ModStart> ) ) { if ( server. bgsavechildpid == - 1 && server. bgrewritechildpid == - 1 ) {,0
253,"<S2SV_ModStart> = g_timeout_add_seconds ( 10 <S2SV_ModEnd>, ( GSourceFunc",0
254,<S2SV_ModStart> book -> dim && i < n,1
255,<S2SV_ModStart> action ) { if ( r < 0.0 ) { return ; },0
256,<S2SV_ModStart> this_h ) { int i ; <S2SV_ModStart> 16 ) { for ( i = 0 ; i < 2 ; i ++ ) { if ( sf -> predict [ i ] [ i ] == vp9_convolve_copy ) { sf -> predict [ i ] [ i ] [ 0 ] = vp9_convolve8_copy ; sf -> predict [ i ] [ i ] [ 1 ] = vp9_convolve8_avg ; sf -> predict [ i ] [ 0 ] [ 1 ] = vp9_convolve8_horiz ; } else { sf -> predict [ i ] [ i ] [ 0 ] = vp9_convolve8_copy ; sf -> predict [ i ] [ 0 ] [ 1 ] = vp9_convolve8_avg ; sf -> predict [ i ] [ 1 ] [ 0 ] = vp9_convolve8_horiz ; sf -> predict [ i ] [ 1 ] [ 0 ] = vp9_convolve8_avg_horiz ; } } } else { <S2SV_ModStart> 0 ] = vp9_convolve8_copy ; sf -> predict [ 0 ] [ 0 ] [ 1 ] = vp9_convolve8_avg ; sf -> predict [,0
257,"<S2SV_ModStart> (! sock ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( buf ) { if ( oe_memset_s ( buf, count, 0, count )!= OE_OK ) OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( oe_syscall_recv_ocall ( & ret, sock -> host_fd, buf, count, flags )!= OE_OK ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( ret < 0 <S2SV_ModStart> ; done : if ( buf ) { if ( oe_memset_s ( buf, count, 0, count )!= OE_OK ) OE_RAISE_ERRNO ( OE_EINVAL ) ; }",0
258,<S2SV_ModStart> ; if ( msg. msg_namelen < sizeof ( src_info ) ) return - EINVAL ; if (,0
259,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> sctp_v6_protosw_exit ( ) <S2SV_ModStart> ( ) ; unregister_pernet_subsys ( & sctp_net_ops ) ;,0
260,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void show_psnr (,0
261,<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen (,1
262,"<S2SV_ModStart> ( ) ; <S2SV_ModEnd> if ( context <S2SV_ModStart> ERROR_OUT_OF_MEMORY ; } memset ( context -> txBuffer, 0, ETH_MAX_FRAME_SIZE ) ; memset ( context -> rxBuffer, 0, ETH_MAX_FRAME_SIZE ) ; memset ( context -> txBuffer, 0, ETH_MAX_FRAME_SIZE ) ; memset ( context -> rxBuffer, 0, ETH_MAX_FRAME_SIZE ) ; <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_PHY1ILR <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_PHY1IHR <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_MARH <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARM <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARL <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MARL <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MAC_ADDRESS <S2SV_ModEnd>, htons ( <S2SV_ModStart> ( interface, KSZ8851_MAC_ADDRESS <S2SV_ModEnd>, htons ( <S2SV_ModStart>",0
263,"<S2SV_ModStart> skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
264,"<S2SV_ModStart> ; if (! <S2SV_ModStart>, IMAGE_SIZE_INVAL ) ||! fit_check_format ( fit, IMAGE_SIZE_VALID ) <S2SV_ModStart> ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - EINVAL <S2SV_ModEnd> ; } bootstage_mark",0
265,"<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> uinput_fd, UI_DEV_DESTROY )",1
266,<S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> = rc -> avg_frame_bandwidth <S2SV_ModEnd> ; # endif,1
267,"<S2SV_ModStart> i ], ""-u"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart>, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""-u"" <S2SV_ModEnd> ) ; argv",0
268,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
269,<S2SV_ModStart> ib ] ; dequant_ptr = d -> dequant ; coeff_ptr = b -> coeff ; qcoeff_ptr = b -> qcoeff ; dqcoeff_ptr = d -> dqcoeff ; i0 =! type ; eob = * d -> eob ; rdmult = mb -> rdmult * err_mult ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ; rddiv = mb -> rddiv ; best_mask [ 0 ] = best_mask [ 1 ] = 0 ; tokens [ 0 ] [ 0 ]. token = DCT_EOB_TOKEN ; tokens [ 0 ] [ 1 ]. error = 0 ; tokens [ 0 ] [ 1 ]. qc = 0 ; * ( tokens [ 0 ] + 1 ) = * ( tokens [ 0 ] + 1 ) ; * ( tokens [ 0 ] + 2 ) = * ( tokens [ 0 ] + 3 ) ; * ( tokens [ 0 ] + 4 ) = 0 ; * ( tokens [ 0 ] + 5 ) = 0 ; * ( tokens [ 0 ] + 6 ) = * ( tokens [ 0 ],0
270,"<S2SV_ModStart> FN_REFLEN ] ; strlcpy <S2SV_ModEnd> ( buff,",0
271,<S2SV_ModStart> decrypt_cb ) { ptrdiff_t <S2SV_ModEnd> n = ( <S2SV_ModStart> n = ( ptrdiff_t <S2SV_ModEnd> ) ( data_end,0
272,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
273,"<S2SV_ModStart> int * returnintra, int skip_intra <S2SV_ModStart> # if CONFIG_TEMPORAL_DENOISING <S2SV_ModEnd> int zero_mv_sse = <S2SV_ModStart> int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # else unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # endif # endif mode_mv = mode_mv_sb [ sign_bias ] ; best_ref_mv. as_int = 0 ; best_mode. rd = INT_MAX ; best_mode. yrd = INT_MAX ; best_mode. intra_rd = INT_MAX ; # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX ; best_rd_sse = INT_MAX ; # endif # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best_s",0
274,"<S2SV_ModStart> goto error ; if ( stat ( h -> filename, & statbuf ) == - 1 ) goto error ;",0
275,"<S2SV_ModStart> ; UWORD8 u1_profile_idc = 0, u1_level_idc = 0, u1_seq_parameter_set_id = 0 <S2SV_ModEnd> ; UWORD16 i2_max_frm_num",0
276,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * params = ( vpx_svc_parameters_t * ) <S2SV_ModStart> -> cpi ; if ( params -> spatial_layer == 0 || params -> temporal_layer == 0 <S2SV_ModEnd> ) return VPX_CODEC_INVALID_PARAM <S2SV_ModStart> return VPX_CODEC_INVALID_PARAM ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = params -> min_quantizer ; set_encoder_config ( & ctx -> oxcf, & ctx -> cfg, & ctx -> extra_cfg ) ; vp9_change_config ( ctx -> cpi, & ctx -> oxcf ) ; return VPX_CODEC_OK <S2SV_ModEnd> ; } <S2SV_null>",0
277,"<S2SV_ModStart> out ) { uint32 <S2SV_ModEnd> bitspersample, samplesperpixel <S2SV_ModStart>, samplesperpixel ; uint32 <S2SV_ModEnd> input_compression, input_photometric <S2SV_ModStart> input_compression, input_photometric <S2SV_ModEnd> ; CopyField ( <S2SV_ModStart> compression ) ; if ( width!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_IMAGEWIDTH, width ) ; CopyField ( TIFFTAG_IMAGELENGTH, length ) ; if ( bitspersample!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_BITSPERSAMPLE, bitspersample ) ; if ( samplesperpixel!= ( uint32 ) - 1 ) TIFFSetField ( out, TIFFTAG_SAMPLESPERPIXEL, samplesperpixel ) ; if ( compression!= ( uint16 ) - 1 ) TIFFSetField ( out, TIFFTAG_COMPRESSION, compression ) ; TIFFGetFieldDefaulted ( in, TIFFTAG_COMPRESSION, & input_compression ) ; TIFFGetFieldDefaulted ( in, TIFFTAG_PHOTOMETRIC, & input_photometric ) ; if ( input_compression == COMPRESSION_JPEG ) { TIFFSetField ( out, TIFFTAG_JPEGCOLORMODE, JPEGCOLORM",0
278,"<S2SV_ModStart> a ) { char * pn ; char c ; int r ; struct stat st ; pn = a -> name ; if ( archive_strlen ( & ( a -> path_safe ) ) > 0 ) { char * p = a -> path_safe. s ; while ( * pn!= '\\0' && ( * p == * pn ) ) ++ p, ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '/' ) ) ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '/' ) ) ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '/' ) ) ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '/' ) ) ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '/' ) ) ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '\\0' ) ) ++ pn ; c = pn [ 0 ]",0
279,<S2SV_ModStart> unsigned int link_count = 0 <S2SV_ModStart> ibh ) { <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> ibh ) { <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> ibh ) { <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> ibh ) { <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> ibh ) { <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> ibh ) { <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> ibh ) { <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> ibh ) { <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> ibh ) { <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> ibh ) { <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> ibh ) { <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> ibh ) { <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> ibh ) { <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> ibh ) { <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> ibh ) { <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> ibh ) { <S2SV_ModEnd>,0
280,"<S2SV_ModStart> tx_size_uv = get_uv_tx_size ( mbmi ) ; const int filter_level = get_filter_level ( lfi_n, mbmi ) ; uint64_t * const left_y = & lfm -> left_y [ tx_size_y ] ; uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const left_uv = & lfm -> left_uv [ tx_size_uv ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_y = & lfm -> int_4x4_y ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv ; int i ; if (! filter_level ) { return ; } else { const int w = num_8x8_blocks_wide_lookup [ block_size ] ; const int h = num_8x8_blocks_high_lookup [ block_size ] ; int index = shift",0
281,"<S2SV_ModStart> mq_ops ) { spin_lock_irqsave_nested <S2SV_ModEnd> ( & fq <S2SV_ModStart> mq_flush_lock, flags, SINGLE_DEPTH_NESTING",0
282,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
283,<S2SV_ModStart> ) ) { ovalue <S2SV_ModEnd> = stok (,0
284,<S2SV_ModStart> sizeof ( effect_param_t ) || * ( effect_param_t * ) pCmdData < sizeof ( effect_param_t,0
285,<S2SV_ModStart> ; } } if ( j < num_versions ) { k5free ( ret ) ; ret = NULL ; goto cleanup ; },0
286,"<S2SV_ModStart> 0x02 ) ; if ( crgram_len > SC_MAX_APDU_BUFFER_SIZE - 1 ) { r = sc_transmit_apdu ( card, & apdu ) ; LOG_TEST_RET ( card -> ctx, r, ""APDU <S2SV_blank> transmit <S2SV_blank> failed"" ) ; } <S2SV_ModStart> crgram_len ) ; if ( r!= SC_SUCCESS ) { return r ; }",0
287,"<S2SV_ModStart> ) ; } if ( macvlan_cnt > I40E_VSI_MAX_MACVLANS ) { dev_err ( & pf -> pdev -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> MACVLANs <S2SV_blank> (%d)\\n"", macvlan_cnt ) ; return - EINVAL ; }",0
288,<S2SV_ModStart> ; } } return - 1 ;,1
289,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
290,"<S2SV_ModStart> mb_row, recon_y_stride, recon_uv_stride <S2SV_ModStart> mb_row, recon_y_stride, recon_uv_stride <S2SV_ModStart> mb_row, recon_y_stride, recon_uv_stride <S2SV_ModStart> mb_row, recon_uv_stride, recon_y_stride",0
291,"<S2SV_ModStart> ) ; } if ( image == ( Image * ) DestroyImageList ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
292,"<S2SV_ModStart> len ) { <S2SV_ModEnd> char * buf <S2SV_ModStart> char * p <S2SV_ModEnd> ; if ( <S2SV_ModStart> len > SIZE_MAX <S2SV_ModEnd> ) return NULL <S2SV_ModStart> s ++ ; <S2SV_ModEnd> } if ( <S2SV_ModStart> 10 ; } if ( p - buf > Py_SIZE ( u ) ) { Py_DECREF ( w ) ; return NULL ; } assert ( p - buf <= Py_SIZE ( u ) ) ; Py_DECREF ( w ) ; } else { * p ++ = * s ++ ; } } len = p - buf ; s = buf ; return PyUnicode_DecodeUnicodeEscape ( s, len, NULL ) ; } <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
293,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> enum { YES <S2SV_ModStart> setimes, targisdir <S2SV_ModEnd> ; BUF * <S2SV_ModStart> ; if ( lstat <S2SV_ModEnd> ( targ, <S2SV_ModStart> ; if ( lstat <S2SV_ModEnd> ( targ, <S2SV_ModStart> ; if ( lstat <S2SV_ModEnd> ( targ,",0
294,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
295,<S2SV_ModStart> 0 ) { vpx_de_free_frame_buffers ( oci ) ; <S2SV_ModStart> 0 ) { vpx_de_free_frame_buffers ( oci ) ; <S2SV_ModStart> 0 ) { vpx_de_free_frame_buffers ( oci ) ; <S2SV_ModStart> 0 ) { vpx_de_free_frame_buffers ( oci ) ;,0
296,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
297,<S2SV_ModStart> u1_num_mbs ++ ; if ( u1_num_mbs > MAX_NUM_MBS_IN_SLICE ) { return 0 ; },0
298,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> vterm_allocator_free ( screen,1
299,"<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & delay )",1
300,"<S2SV_ModStart>, one, <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_planes ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( Cor",0
301,"<S2SV_ModStart> value ) { cchar * name = sclone ( value ) ; <S2SV_ModStart> -> host, name <S2SV_ModEnd> ) ; httpSetRouteName",0
302,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
303,"<S2SV_ModStart> ntime ) { cg_wlock ( & pool -> data_lock ) ; free ( pool -> swork. job_id ) ; pool -> swork. job_id = job_id ; snprintf ( pool -> prev_hash, 65, ""%s"", prev_hash ) ; cb1_len = strlen ( pool -> prev_hash ) / 2 ; cb2_len = strlen ( pool -> bbversion ) / 2 ; snprintf ( pool -> nbit, 9, ""%s"", nbit ) ; snprintf ( pool -> ntime, 9, ""%s"", ntime ) ; pool -> swork. clean = clean ; pool -> swork. alloc_len = pool -> coinbase_len ; pool -> swork. alloc_len = pool -> coinbase_len ; pool -> swork. clean = clean ; alloc_len = pool -> coinbase_len ; pool -> swork. job_id = job_id ; pool -> swork. prev_hash = strdup ( pool -> prev_hash ) ; pool -> swork. bbversion = strdup ( pool -> bbversion ) ; pool -> swork. clean = clean ; pool -> swork. clean = clean",0
304,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
305,"<S2SV_ModStart> unused ) { <S2SV_ModEnd> _Py_IDENTIFIER ( __dict__ <S2SV_ModStart> __dict__ ) ; return type_reduce_impl <S2SV_ModEnd> ( self, <S2SV_ModStart> ( self, unused <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
306,"<S2SV_ModStart> ) & desc, sizeof ( * desc )",1
307,"<S2SV_ModStart> perf_event * ) ; struct perf_event_context * ctx <S2SV_ModStart> case PERF_EVENT_IOC_PERIOD : ctx = perf_event_ctx_lock ( event ) ; if ( IS_ERR ( ctx ) ) return PTR_ERR ( ctx ) ; <S2SV_ModStart> perf_event_period ( event, ctx <S2SV_ModStart> ret ; } <S2SV_ModEnd> default : return",0
308,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> * r, PREDICTION_MODE <S2SV_ModEnd> y_mode ) { <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode",0
309,"<S2SV_ModStart> ; } } if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) ) { memset ( & ctx, 0, sizeof ( ctx ) ) ; memset ( & src, 0, sizeof ( src ) ) ; }",0
310,"<S2SV_ModStart> iv ) ; if (! NIL_P ( iv ) ) rb_raise ( eCipherError, ""iv <S2SV_blank> must <S2SV_blank> be <S2SV_blank> an <S2SV_blank> 8-octet <S2SV_blank> string"" ) ;",0
311,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
312,<S2SV_ModStart> if (! session_inbound_frame_buf_valid ( session ) ) { return NGHTTP2_ERR_INVALID_DATA ; } if ( iframe -> sbuf. pos [ 3 ]!= NGHTTP2_SETTINGS ) { return NGHTTP2_ERR_INVALID_SETTINGS ; } if ( iframe -> sbuf. pos [ 4 ]!= NGHTTP2_VIDEO ) { return NGHTTP2_ERR_INVALID_VIDEO ; } if ( iframe -> sbuf. pos [ 5 ]!= NGHTTP2_VIDEO ) { return NGHTTP2_ERR_INVALID_VIDEO ; } if ( iframe -> sbuf. pos [ 6 ]!= NGHTTP2_VIDEO ) { return NGHTTP2_ERR_INVALID_VIDEO ; } if ( iframe -> sbuf. pos [ 7 ]!= NGHTTP2_VIDEO ) { return NGHTTP2_ERR_INVALID_VIDEO ; } if ( iframe -> sbuf. pos [ 8 ]!= NGHTTP2_VIDEO ) { return NGHTTP2_ERR_INVALID_VIDEO ; } if ( iframe -> sbuf. pos [ 9 ]!= NG,0
313,<S2SV_ModStart> ( ) ; if (! x86_pmu. max_pebs_events ) { x86_pmu. max_pebs_events = 4 ; x86_pmu. max_counters_fixed = 4 ; },0
314,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * tp, vpx_TOKENEXTRA <S2SV_ModEnd> * stop ) <S2SV_ModStart> stop ) { vpx_writer <S2SV_ModEnd> * p = <S2SV_ModStart> ] ; const vpx_extra_bit <S2SV_ModEnd> * const b <S2SV_ModStart> b = & vpx_extra_bits <S2SV_ModEnd> [ t ] <S2SV_ModStart> & 1 ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ; } vpx_write_bit <S2SV_ModEnd> ( w,",0
315,"<S2SV_ModStart>, uncompressed_hdr_size ; vpx_write_bit_buffer <S2SV_ModEnd> wb = { <S2SV_ModStart> 0 } ; vpx_write_bit_buffer <S2SV_ModEnd> saved_wb ; write_uncompressed_header <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> += uncompressed_hdr_size ; vpx_compute_update_table <S2SV_ModEnd> ( ) ; <S2SV_ModStart> += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb",0
316,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct net_device * <S2SV_ModEnd> dev_get_valid_name ( struct <S2SV_ModStart> int dev_get_valid_name ( <S2SV_ModEnd> struct net_device * <S2SV_ModStart> name ) { <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) return ERR_PTR ( - EINVAL ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) return ERR_PTR ( - EINVAL ) <S2SV_ModEnd> ; else if <S2SV_ModStart> ) ) return ERR_PTR ( - EEXIST ) <S2SV_ModEnd> ; else if,0
317,<S2SV_ModStart> struct ikev2_id id = { 0 } <S2SV_ModStart> * typedata ; if ( item_len < sizeof ( struct ikev2_id ) ) goto trunc ; <S2SV_ModStart> * typedata ; if ( item_len < sizeof ( struct ikev2_id ) ) goto trunc ; <S2SV_ModStart> trunc ; } ND_TCHECK ( * ext ) ;,0
318,"<S2SV_ModStart> ) ) { jas_log ( LL_ERROR, ""mif_process_cmpt: <S2SV_blank> invalid <S2SV_blank> data <S2SV_blank> type <S2SV_blank> %d"", id ) ; <S2SV_ModStart> ) ) { jas_log ( LL_ERROR, ""mif_process_cmpt: <S2SV_blank> invalid <S2SV_blank> data <S2SV_blank> type <S2SV_blank> %d"", id ) ; <S2SV_ModStart> ) ) { jas_log ( LL_ERROR, ""mif_process_cmpt: <S2SV_blank> invalid <S2SV_blank> data <S2SV_blank> type <S2SV_blank> %d"", id ) ; <S2SV_ModStart> ) ) { jas_log ( LL_ERROR, ""mif_process_cmpt: <S2SV_blank> invalid <S2SV_blank> data <S2SV_blank> type <S2SV_blank> %d"", id ) ; <S2SV_ModStart> ) ) { jas_log ( LL_ERROR, ""mif_process_cmpt: <S2SV_blank> invalid <S2SV_blank> data <S2SV_blank> type <S2SV_blank> %d"", id ) ; <S2SV_ModStart> ) ) { jas_log ( LL_ERROR, ""mif_process_cmpt: <S2SV_blank> invalid <S2SV_blank> data <S2SV_blank> type <S2SV_blank> %d"", id ) ; <S2SV_ModStart> ) ) { jas_log ( LL_ERROR, ""mif_process_cmpt: <S2SV_blank> invalid <S2SV_blank> data <S2SV_blank> type <S2SV_blank> %d"", id ) ;",0
319,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
320,"<S2SV_ModStart> ; WORD32 xt0_0 = 0, yt0 = 0, xt1 = 0, yt1 = 0, yt2 = 0, xl0 = 0, xl1 = 0, xl20 = 0, xl21 = 0 ; WORD32 x_0 = 0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 si10, si20, si30, co10, co20, co30 ; WORD64 mul_1, mul_2, mul_3, mul_4, mul_5, mul_6 ; WORD64 mul_7, mul_8, mul_9, mul_10, mul_11, mul_12 ; WORD32 * x_l1 ; WORD32 * x_l2 ; WORD32 * x_l2 ; WORD32 * x_h2 ; WORD32 * x_l3 ; WORD32 * x_l4 ; WORD32 * x_l5 ; WORD32 * x_l6 ; WORD32 * x_h3 ;",0
321,"<S2SV_ModStart> mntent -> mnt_dir, false",0
322,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
323,"<S2SV_ModStart> ( req ) ) ; rb_hash_aset ( env, client_name_val, req_client_name ( req )",0
324,<S2SV_ModStart> endif int col_type <S2SV_ModEnd> ; MYSQL_BIND * <S2SV_ModStart> endif # endif <S2SV_ModEnd> # endif D_imp_xxh,0
325,"<S2SV_ModStart> need = 0 <S2SV_ModEnd> ; CELL first <S2SV_ModStart> screen, { if ( need > MAX_WIDE_CHARS * 4 ) { if ( ( line = ( Char * ) malloc ( ( size_t ) need + 1 ) ) == 0 ) SysError ( ERROR_BMALLOC2 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = line ; scp -> data_limit = ( size_t ) need + 1 ; } else { line = ( Char * ) malloc ( ( size_t ) need + 1 ) ) ; if ( line == 0 ) SysError ( ERROR_BMALLOC2 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = line ; scp -> data_limit = ( size_t ) need ; } } ) ; if ( need < 0 ) return ; if ( scp -> data_limit <= ( unsigned ) need ) { if ( ( line = ( Char * ) malloc ( ( size_t ) need + 1 ) ) == 0 ) SysError ( ERROR_BMALLOC2 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = line ; scp -> data_buffer = line",0
326,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> val ) ) strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> < 0 ) strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> ) ; else strcpy <S2SV_ModEnd> ( str,",0
327,<S2SV_ModStart> ( unlikely ( crng_ready ( ) <S2SV_ModEnd> ) ) {,0
328,"<S2SV_ModStart> LEX_ID ) { snprintf ( str, len <S2SV_ModEnd>, ""ID:"", <S2SV_ModStart>, ""ID:"", jslGetTokenValueAsString ( ) <S2SV_ModEnd> ) ; } <S2SV_ModStart> LEX_STR ) { snprintf ( str, len <S2SV_ModEnd>, ""String:\'"", <S2SV_ModStart>, ""String:\'"", jslGetTokenValueAsString ( ) <S2SV_ModEnd> ) ; }",0
329,,1
330,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
331,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
332,"<S2SV_ModStart> ) { return memcmp <S2SV_ModEnd> ( s1,",0
333,"<S2SV_ModStart> ( CMD_PRINT_HELP, ""stunnel.conf"", <S2SV_ModStart> ( CMD_PRINT_HELP, ""stunnel.conf"", <S2SV_ModStart> ( CMD_PRINT_DEFAULTS, ""stunnel.conf"",",0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,"<S2SV_ModStart> ) ; } if ( st -> st_oakley. ta_decrypt ) { if ( st -> st_oakley. ta_decrypt -> enc_blocksize!= 0 ) { loglog ( RC_LOG_SERIOUS, ""malformed <S2SV_blank> message: <S2SV_blank> not <S2SV_blank> a <S2SV_blank> multiple <S2SV_blank> of <S2SV_blank> encryption <S2SV_blank> blocksize"" ) ; return ; } if ( st -> st_oakley. ta_decrypt -> enc_blocksize!= e -> enc_blocksize ) { loglog ( RC_LOG_SERIOUS, ""malformed <S2SV_blank> message: <S2SV_blank> not <S2SV_blank> a <S2SV_blank> multiple <S2SV_blank> of <S2SV_blank> encryption <S2SV_blank> blocksize"" ) ; return ; } } <S2SV_ModStart>. ta_decrypt ; if ( st -> st_oakley. ta_decrypt -> enc_blocksize!= e -> enc_blocksize ) { loglog ( RC_LOG_SERIOUS, ""malformed <S2SV_blank> message: <S2SV_blank> not <S2SV_blank> a <S2SV_blank> multiple <S2SV_blank> of <S2SV_blank> encryption <S2SV_blank> blocksize"" ) ; return ; } if ( st -> st_oakley. ta_decrypt -> enc_blocksize!= e -> enc_blocksize ) { loglog ( RC_LOG_SERIOUS, ""malformed <S2SV_blank> message:",0
336,<S2SV_ModStart> } } } if ( 0 == u4_size ) { return ; },0
337,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char * print_string,0
338,<S2SV_ModStart> -> iface -> codec <S2SV_ModEnd>. encode ( <S2SV_ModStart> -> iface -> codec <S2SV_ModEnd>. encode ( <S2SV_ModStart> -> iface -> codec <S2SV_ModEnd>. encode (,0
339,"<S2SV_ModStart> ) ; } else if ( arg1 == - 1 ) { win_maximise ( - 1 ) ; win_set_chars ( 0, 0 ) ; }",0
340,<S2SV_ModStart> < cols + 8 <S2SV_ModEnd> ; i ++,0
341,"<S2SV_ModStart> = NGIFLIB_NO_FILE ; if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ;",0
342,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",0
343,<S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; },0
344,"<S2SV_ModStart> ) ) { if ( psf -> psf_debug ) { fprintf ( stderr, ""Format <S2SV_blank> \'%c\' <S2SV_blank> not <S2SV_blank> recognized\\n"", c ) ; }",0
345,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
346,"<S2SV_ModStart> 0 ; } if ( copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) == - 1 ) { fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> copy <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; return 0 ; } <S2SV_ModStart> ( rv ) { <S2SV_ModStart> ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> dest ) ; } } else { fs_logger2 ( ""clone"", dest ) ;",0
347,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> BLOCK_8X8 : return vpx_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> BLOCK_16X8 : return vpx_mse16x8 <S2SV_ModEnd> ; case BLOCK_8X16 <S2SV_ModStart> default : return vpx_mse8x16 <S2SV_ModEnd> ; } },0
348,"<S2SV_ModStart> ; if (! subjectPublicKey ||! server_key ||! dh_pubkey ||! dh_pubkey_len ) { k5_log ( context, KRB5_LOG_ERROR, ""SubjectPublicKey <S2SV_blank> is <S2SV_blank> NULL\\n"" ) ; retval = KRB5_E_INVAL ; goto done ; } if (",0
349,"<S2SV_ModStart> flags ) ; if (! vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } <S2SV_ModStart> vb2_buf ) ; <S2SV_ModEnd> if ( input",1
350,<S2SV_ModStart> size ) { if ( size < PREFIX_SIZE ) { zmalloc_oom_handler ( size ) ; return NULL ; },0
351,<S2SV_ModStart> -> serviceId == EXTRACT_16BITS <S2SV_ModEnd> ( & rxh,1
352,"<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len > MWIFIEX_MAX_SSID_LEN ) { mwifiex_dbg ( adapter, ERROR, ""Invalid <S2SV_blank> SSID <S2SV_blank> length <S2SV_blank> %d\\n"", req_ssid -> ssid_len ) ; return - EINVAL ; }",0
353,"<S2SV_ModStart> -> valuelen ; xfs_attr_sf_remove ( dp, & sf -> hdr ) ;",0
354,"<S2SV_ModStart> struct l2cap_conf_rfc rfc <S2SV_ModEnd> ; void * <S2SV_ModStart> sk ) ; memset ( & rfc, 0, sizeof ( rfc ) ) ; <S2SV_ModStart> = L2CAP_MODE_ERTM ; memset ( & rfc, 0, sizeof ( rfc ) ) ; <S2SV_ModStart> L2CAP_DEFAULT_MAX_RECEIVE ; rfc -> <S2SV_ModEnd> retrans_timeout = cpu_to_le16 <S2SV_ModStart> L2CAP_DEFAULT_RETRANS_TO ) ; rfc -> <S2SV_ModEnd> monitor_timeout = cpu_to_le16 <S2SV_ModStart> L2CAP_DEFAULT_MONITOR_TO ) ; l2cap_add_conf_opt ( & ptr, L2CAP_CONF_RFC, sizeof ( rfc ), ( unsigned long ) & rfc ) ;",0
355,"<S2SV_ModStart> { do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> r, MSG_WAITALL )",0
356,<S2SV_ModStart> u1_nal_ref_idc ) ; if ( u1_nal_ref_idc == 0 ) { return ERROR_INCOMPLETE_FRAME ; },0
357,<S2SV_ModStart> while ( pair <S2SV_ModEnd> ) { mprAddItem,1
358,"<S2SV_ModStart> * delegation, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> = 0 ; fmode <S2SV_ModEnd> &= ( FMODE_READ <S2SV_ModStart> -> type & fmode )!= fmode <S2SV_ModEnd> ) goto no_delegation_unlock <S2SV_ModStart> -> stateid, fmode <S2SV_ModEnd> ) ; ret <S2SV_ModStart>, NULL, fmode <S2SV_ModEnd> ) ; ret",1
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,"<S2SV_ModStart> int * out_rate_sum ) { int i ; int64_t rate_sum = 0 ; int64_t dist_sum = 0 ; const int ref = xd -> mi [ 0 ] -> mbmi. ref_frame [ 0 ] ; unsigned int sse ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblock_plane * const p = & xd -> plane [ i ] ; struct macroblockd_plane * const pd = & xd -> plane [ i ] ; const BLOCK_SIZE bs = get_plane_block_size ( bsize, pd ) ; ( void ) <S2SV_ModEnd> cpi -> fn_ptr <S2SV_ModStart>. vf ( <S2SV_ModEnd> p -> src <S2SV_ModStart>. stride, <S2SV_ModEnd> pd -> dst <S2SV_ModStart>. stride, <S2SV_ModEnd> sse ) ; <S2SV_ModStart> sse ) ; <S2SV_ModEnd> x -> pred_sse <S2SV_ModStart> ref ] = <S2SV_ModEnd> sse ; if <S2SV_ModStart> i == 0 && <S2SV_ModEnd> cpi -> speed <S2SV_ModStart> -> speed > 8 ) { int64_t rate ; int64_t dist ; int64_t square_error = sse ; int quantizer = ( pd -> dequant [ 1 ] >> 3 ) ; if ( quantizer < 120 ) rate = (",0
361,<S2SV_ModStart> } if ( pmd_trans_unstable <S2SV_ModEnd> ( pmd ),0
362,<S2SV_ModStart> { if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if <S2SV_ModStart> == NULL ) { free ( * ret_username ) ; <S2SV_ModStart> PAM_BUF_ERR ) ; },0
363,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> seg ) { vpx_read_tree <S2SV_ModEnd> ( r, <S2SV_ModStart> ( r, vpx_segment_tree <S2SV_ModEnd>, seg ->",0
364,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",1
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,<S2SV_ModStart> depth ++ ; ND_TCHECK ( fmt [ 0 ] ) ; <S2SV_ModStart> depth -- ; ND_TCHECK ( fmt [ 1 ] ) ;,0
367,"<S2SV_ModStart> ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n < ( length + 8 ) ) { return ERROR_FAILURE ; } netBufferRead ( context -> txBuffer, buffer, offset, length ) ; header. controlWord = htole16 ( TX_CTRL_TXIC | ( context -> frameId ++ & TX_CTRL_TXFID ) ) ; header. byteCount = htole16 ( length ) ; ksz8851SetBit ( interface, KSZ8851_RXQCR, RXQCR_SDA ) ; ksz8851WriteFifo ( interface, ( uint8_t * ) & header, sizeof ( Ksz8851TxHeader ) ) ; ksz8851WriteFifo ( interface, context -> txBuffer, length ) ; ksz8851ClearBit ( interface, KSZ8851_TXQCR, TXQCR_METFE ) ; n = ksz8851ReadReg ( interface, <S2SV_ModStart> ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8",0
368,<S2SV_ModStart> ( ) ; mono_attach_maybe_stop ( ) ;,0
369,"<S2SV_ModStart>, x_e, x_f ; WORD32 n10, n20, n30, n01, n11, n21, n31 ; WORD32 n12, n22, n32, n03, n13, n23, n33 ; WORD32 n0, j0 ; WORD32 * x2, * x0, * y0, * y1, * y2, * y3 ; WORD32 * y0, * y1, * y2, * y3 ; x_0 = ptr_x ; x_1 = ptr_y ; x_2 = ptr_x + ( WORD32 ) npoints ; x_3 = ptr_x + ( WORD32 ) npoints ; x_4 = ptr_x + ( WORD32 ) npoints ; x_5 = ptr_x + ( WORD32 ) npoints ; x_6 = ptr_x + ( WORD32 ) npoints ; x_7 = ptr_x + ( WORD32 ) npoints ; x_8 = * x0 ++ ; x_9 = * x0 ++ ; n10 = x_0 + x_2 ; n01 = x_",0
370,<S2SV_ModStart> ; if ( <S2SV_ModEnd> pmd_none_or_clear_bad ( pmd,0
371,"<S2SV_ModStart> height, target_width = 0, target_height = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( argv [ 2 ], & width ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } if (! parse_dim ( argv [ 3 ], & target_width, & target_height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpin = fopen ( fin, ""rb"" ) ; if ( fpin == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> read\\n"", fin ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpout = fopen ( fout, ""wb"" ) ; if ( fpout == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> write\\n",0
372,"<S2SV_ModStart> num_fields ) { <S2SV_ModEnd> _Py_IDENTIFIER ( _attributes <S2SV_ModStart> i, result <S2SV_ModEnd> ; PyObject * <S2SV_ModStart> ) ; } return <S2SV_ModEnd> _PyObject_SetAttrId ( (",0
373,<S2SV_ModStart> = VPX_CODEC_OK ; vpx_codec_alg_priv_t <S2SV_ModEnd> * priv ; <S2SV_ModStart> sizeof ( struct vpx_codec_alg_priv_t <S2SV_ModEnd> ) ) ; <S2SV_ModStart> priv = & priv -> base ; ctx -> priv -> iface = ctx -> iface ; ctx -> priv -> alg_priv = priv ; ctx -> priv -> init_flags = ctx -> init_flags ; if ( ctx -> config. enc ) { ctx -> priv -> alg_priv -> cfg = * ctx -> config. enc ; } cfg = & ctx -> priv -> alg_priv -> cfg ; for ( i = 0 ; extracfg_map [ i ]. usage && extracfg_map [ i ]. usage!= cfg -> g_usage ; i ++ ) ; priv = & ctx -> priv -> alg_priv -> cfg ; } cfg = & ctx -> priv -> alg_priv -> cfg ; for ( i = 0 ; extracfg_map [ i ]. usage && extracfg_map [ i ]. usage!= cfg -> g_usage ; i ++ ) ; priv -> vp8_cfg = extracfg_map [ i ]. cfg ; priv -> vp8_cfg.,0
374,<S2SV_ModStart> ++ ; } pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; totfr += step ; if ( totfr > BOT ) { totfr = 0 ; for ( i = 0 ; i < 256 ; i ++ ) { unsigned nc = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] = nc ; totfr += nc ; } for ( i = 0 ; i < 256 ; i ++ ) { unsigned sum = 0 ; unsigned i16_17 = i << 4 ; for ( j = 0 ; j < 16 ; j ++ ) sum += pixel -> freq [ i16_17 + j ] ; pixel -> lookup [ i ] = sum ; } } pixel -> total_freq = totfr ;,0
375,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx ->,0
376,"<S2SV_ModStart> ) ) { if ( iinfo -> i_location. length > UDF_I ( inode ) -> i_sb -> s_blocksize ) { udf_err ( inode -> i_sb, ""inode <S2SV_blank> %ld <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large\\n"", inode -> i_ino ) ; ret = - EIO ; goto out ; }",0
377,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0",1
378,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int bad_format_imginfo (,0
379,"<S2SV_ModStart> IPV6DefragSturgesNovakLastTest ) ; UtRegisterTest ( ""DefragIPv6NoDataTest"", DefragIPv6NoDataTest ) ;",0
380,<S2SV_ModStart> if ( object_data && object_length,0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,"<S2SV_ModStart> p_sys -> b_auto_field_coding && p_sys -> b_auto_field_coding!= p_sys -> p_format -> interlaced <S2SV_ModStart> p_sys -> b_auto_field_coding && p_sys -> b_auto_field_coding!= p_sys -> p_format -> interlaced <S2SV_ModStart> p_sys -> b_auto_field_coding && p_sys -> b_auto_field_coding!= p_sys -> p_format -> interlaced ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""auto_field_coding"", p_sys -> b_auto_field_coding ) ; if ( p_sys -> b_auto_field_coding!= p_sys -> p_format -> interlaced ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""auto_field_coding"", p_sys -> p_format -> interlaced ) ; if ( p_sys -> b_auto_field_coding ) schro_encoder_setting_set_double ( p_sys -> p_sch",0
384,"<S2SV_ModStart> bfname ) ; if ( bfname. len < 0 ) { mp_err ( log, ""invalid <S2SV_blank> filename\\n"" ) ; goto exit_mf ; }",0
385,<S2SV_ModStart> 4 ) ; size_t <S2SV_ModEnd> num_properties = GETINT32 <S2SV_ModStart> len ) ; if (! a -> names [ i ]. data ) return NULL ;,0
386,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
387,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; vpx_pbi_t * pbi = ctx -> pbi ; <S2SV_ModStart> * fb ; if (! pbi ) { return VPX_CODEC_INVALID_PARAM ; } <S2SV_ModStart> * fb ; if (! <S2SV_ModStart>, & fb ) ) { return VPX_CODEC_INVALID_PARAM ; } yuvconfig2image ( & data -> img, fb, NULL",0
388,"<S2SV_ModStart> + 1 ; if ( length < 4 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> "" ""no <S2SV_blank> image <S2SV_blank> content <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> + 1 ; if ( length < 4 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> "" ""no <S2SV_blank> image <S2SV_blank> content <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> + 1 ; if ( length < 4 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> "" ""no <S2SV_blank> image <S2SV_blank> content <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
389,"<S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == testlist ) { node * ch = CHILD ( n, 0 ) ; if (! ch ) return NULL ; ch = CHILD ( n, 1 ) ; if ( TYPE ( ch ) == testlist ) { node * ch2 = CHILD ( CHILD ( n, 1 ), 0 ) ; if (! ch2 ) return NULL ; ch2 = ast_for_testlist ( c, CHILD ( n, 0 ), ch2 ) ; if (! ch2 ) return NULL ; return Expr ( ch2, LINENO ( n ), n -> n_col_offset, n -> n_end_lineno, n -> n_end_col_offset, c -> c_arena ) ; } else { node * ch = CHILD ( n, 0 ) ; if ( TYPE ( CHILD ( ch, 0 ) ) == testlist ) ch2 = ast_for_testlist ( c, ch2 ) ; else ch2 = ast_for_expr ( c, ch2 ) ; if (! ch ) return NULL ; return AugAssign ( expr1, newoperator, ch2,",0
390,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> vp8_denoiser_filter_c ( YV12_BUFFER_CONFIG <S2SV_ModStart> * mc_running_avg_y = ( unsigned char * ) <S2SV_ModStart> * running_avg_y = ( unsigned char * ) <S2SV_ModStart> -> y_stride ; <S2SV_ModEnd> int avg_y_stride = <S2SV_ModStart> int avg_y_stride = ( unsigned char * ) <S2SV_ModStart> 6 } ; int r, c ; int sum_diff = 0 ; int adj_val [ 3 ] = { 3, 4, 6 } ; for ( r = 0 ; r < 16 ; ++ r ) { for ( c = 0 ; c < 16 ; ++ c ) { int diff = 0 ; int adjustment = 0 ; int absdiff = 0 ; diff = mc_running_avg_y [ c ] - sig [ c ] ; absdiff = abs ( diff ) ; if ( absdiff <= 3 ) { running_avg_y [ c ] = mc_running_avg_y [ c ] ; sum_diff += diff ; } else { if ( absdiff >= 4 && absdiff <= 7 ) adjustment = adj_val [",0
391,<S2SV_ModStart> ; } } if ( ( sockPtr -> flags & ( NS_CONN_ESTABLISHED | NS_CONN_SHARING ) ) == 0u ) { sockPtr -> flags |= NS_CONN_SHARING ; },0
392,"<S2SV_ModStart> = uregs ; xtregs_coprocessor_t cp ; <S2SV_ModStart> ret = 0 ; memset ( & cp, 0, sizeof ( cp ) ) <S2SV_ModStart> ti ) ; <S2SV_ModEnd> ret |= __copy_from_user <S2SV_ModStart> ) ) ; <S2SV_ModEnd> ret |= __copy_from_user",0
393,<S2SV_ModStart> size ) ; if ( message -> length > 0 ) { <S2SV_ModStart> buffer ) ; queueItem -> buffer = NULL ; },0
394,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" <S2SV_ModStart> cg_item ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
395,"<S2SV_ModStart> int error ; ext2_lock_xattr_cache ( ) ; <S2SV_ModStart> new_bh ) ; error = <S2SV_ModStart> ext2_xattr_cache_insert ( new_bh, inode ) ; if ( error ) goto cleanup ; ext2_unlock_xattr_cache (",0
396,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
397,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
398,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
399,<S2SV_ModStart> = 2048 ; if ( pwidth == NULL || pheight == NULL ) { return ( MagickFalse ) ; } <S2SV_ModStart> ) ; } if ( pwidth == NULL || pheight == NULL ) { return ( MagickFalse ) ; },0
400,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vpx_ref_frame_t * ) ; YV12_BUFFER_CONFIG sd <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; vpx_image2yuvconfig <S2SV_ModEnd> ( & frame <S2SV_ModStart> sd ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( frame -> frame_type == VPX_REFFRAME_HIGHBITDEPTH ) { return VPX_CODEC_INVALID_PARAM ; } # endif return vp9_copy_reference_dec ( ctx -> pbi, ( VP9_REFFRAME ) frame -> frame_type, & sd ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( frame -> frame_type == VPX_REFFRAME_HIGHBITDEPTH ) { return VPX_CODEC_INVALID_PARAM ; } # endif } else { return VPX_CODEC_INVALID_PARAM ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
401,<S2SV_ModStart> u1_num_mbs ++ ; if ( u1_num_mbs > MAX_NUM_MBS_IN_SLICE ) { return 0 ; },0
402,<S2SV_ModStart> ; UWORD32 u4_x_dst_offset <S2SV_ModEnd> = 0 ; <S2SV_ModStart> ) ; else { <S2SV_ModStart> ps_dec ) ; },0
403,<S2SV_ModStart> VP9_LAST_FLAG ) { VP9_FRAME * const frame = <S2SV_ModEnd> cm -> ref_frame_map <S2SV_ModStart> [ 0 ] ; const YV12_BUFFER_CONFIG * const cfg = & frame -> <S2SV_ModEnd> buf ; if,0
404,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
405,"<S2SV_ModStart> TX_SIZE tx_size = get_plane_tx_size ( pd, plane <S2SV_ModEnd> ) : mbmi <S2SV_ModStart> int i ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) { int r, c ; int max_blocks_wide = num_4x4_w ; int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> ( 5 + pd -> subsampling_y ) ) ; i = 0 ; for ( r = 0 ; r < num_4x4_h ; r += ( 1 << tx_size ) ) { for ( c = 0 ; c < num_4x4_w ; c += ( 1 << tx_size ) ) { if ( r < max_blocks_wide && c < max_blocks_wide ) visit (",0
406,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 4 ) ; <S2SV_ModEnd> src += src_stride",0
407,<S2SV_ModStart> nrow ) { if ( row + img -> row_offset > h ) { return ( 0 ) ; } <S2SV_ModStart> -> row_offset ; <S2SV_ModEnd> if ( _TIFFReadEncodedStripAndAllocBuffer <S2SV_ModStart> 0 ) { if ( row + img -> row_offset > h ) { return ( 0 ) ; } <S2SV_ModStart> 0 ) { if ( row + img -> row_offset > h ) { return ( 0 ) ; } <S2SV_ModStart> 0 ) { if ( row + img -> row_offset > h ) { return ( 0 ) ; } <S2SV_ModStart> 0 ) { if ( row + img -> row_offset > h ) { return ( 0 ) ; } <S2SV_ModStart> 0 ) { if ( row + img -> row_offset > h ) { return ( 0 ) ; } <S2SV_ModStart> 0 ) { if ( row + img -> row_offset > h ) { return ( 0 ) ; } <S2SV_ModStart> 0 ) { if ( row + img -> row_offset > h ) { return ( 0 ) ; } <S2SV_ModStart> 0 ) { if ( row + img -> row_offset > h ) { return ( 0 ) ; } <S2SV_ModStart> 0 ) { if ( row + img -> row_offset > h ) { return ( 0 ) ; },0
408,<S2SV_ModStart> ; } } Py_RETURN_NONE <S2SV_ModEnd> ; } <S2SV_null>,0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. bytes <S2SV_ModStart> psf -> header. bytes <S2SV_ModStart> psf -> header. bytes <S2SV_ModStart> psf -> header. bytes <S2SV_ModStart> psf -> header. bytes <S2SV_ModStart> psf -> header. bytes <S2SV_ModStart> psf -> header. bytes <S2SV_ModStart> psf -> header. bytes <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
410,<S2SV_ModStart> num & ( 1U << number <S2SV_ModEnd> ) ) return <S2SV_ModStart> num - ( 1U <S2SV_ModEnd> << number ),0
411,"<S2SV_ModStart> ] ; const size_t <S2SV_ModEnd> w = vpx_img_plane_width <S2SV_ModStart>, 1, stride <S2SV_ModEnd>, file ) <S2SV_ModStart>, file ) == stride <S2SV_ModEnd> ) return 0",0
412,"<S2SV_ModStart> ; uint16_t attr_len = 0 <S2SV_ModStart> ; uint16_t orig_attr_len = 0 <S2SV_ModStart> 1 ; } if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } <S2SV_ModStart> struct l2tp_avp_t ) ; if ( attr_len < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; }",0
413,<S2SV_ModStart> case EVP_CTRL_AEAD_SET_IVLEN : if ( arg <= 0 || arg > CHACHA_CTR_SIZE ) return 0 ; <S2SV_ModStart> case EVP_CTRL_AEAD_SET_IV_FIXED : if ( arg <= 0 || arg > CHACHA_CTR_SIZE ) return 0 ;,0
414,"<S2SV_ModStart>, 0, comm_event -> comm_size <S2SV_ModEnd> ) ; if",0
415,"<S2SV_ModStart>, sk ) ; if (! sk ) return - EINVAL",0
416,<S2SV_ModStart> MT_CPTYPE_PASSSALT ) { if ( cpkt. length < MT_PASS_SALT_MIN_LEN ) { return - 1 ; } <S2SV_ModStart> length ) ; if ( cpkt. length < MT_PASS_SALT_MIN_LEN ) { return - 1 ; },0
417,<S2SV_ModStart> MUTT_ABORT ) { mutt_socket_close ( adata -> conn ) ; imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } if <S2SV_ModStart> ) ) ; imap_socket_close ( adata -> conn ) ; imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } else <S2SV_ModStart> ) ) ; imap_socket_close ( adata -> conn ) ; imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ) ; imap_socket_close ( adata -> conn ) ; imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ) ; imap_socket_close ( adata -> conn ) ; imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ) ; imap_socket_close ( adata -> conn ) ; imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ) ; imap_socket_close ( adata -> conn ) ; imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } # <S2SV_ModStart> ) ) ; imap_socket_close ( adata -> conn ) ; imap_close_connection ( adata ) ; return - 1 <S2SV_ModEnd> ; } #,0
418,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
419,"<S2SV_ModStart> ) ) ; if ( <S2SV_ModStart>, 0 ) < 0 ) { close ( gpsd_sock ) ; return ; } <S2SV_ModEnd> if ( strncmp",0
420,"<S2SV_ModStart> remainder, & rlen ) ; if ( ret ) return ret ; if (! check_atype_tag ( a, & t ) ) return ASN1_BAD_ID ; if (! decode_atype_to_ptr ( & t, contents, clen, a, retrep ) ) return ASN1_OK <S2SV_ModEnd> ; if (",0
421,"<S2SV_ModStart> ; read_userfile ( ) ; memset ( md5sum, 0, sizeof ( md5sum ) <S2SV_ModStart> = 0 ; strlcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> -> password, sizeof ( md5data ) - 1 ) ; memcpy ( md5data + 1 + strlen ( user -> password ), curconn -> pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( user -> password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; md5sum [ 0 ] = 0 ; init_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr, pkthdr -> seskey, curconn -> outcounter ) ; curconn -> outcounter += add_control_packet ( & pdata, MT_CPTYPE_END_AUTH, NULL, 0 ) ; send_udp ( curconn, & pdata ) ; if ( user == NULL || memcmp ( md5sum, curconn -> trypassword,",0
422,"<S2SV_ModStart> ; if ( unicode_compare_with_ascii_string <S2SV_ModEnd> ( name, <S2SV_ModStart> { if ( unicode_compare_with_ASCII_string <S2SV_ModEnd> ( name,",0
423,<S2SV_ModStart> off } ; if (! str ) { return - 1 ; },0
424,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
425,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
426,"<S2SV_ModStart> size_t s ; size_t sz ; <S2SV_ModStart> return ; } sz = exif_get_long ( o, EXIF_BYTE_ORDER_INTEL ) ; if ( sz > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } <S2SV_ModStart> s ) ; exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Long <S2SV_blank> MakerNote"" ) ;",0
427,<S2SV_ModStart> bd_addr ) { if ( bd_addr == NULL ) return BT_STATUS_NULL ;,0
428,"<S2SV_ModStart> int i ; size_t avail ; size_t <S2SV_ModEnd> expect ; txid <S2SV_ModStart> 4 ) ; expect = 8 + 8 + nxip * 8 ; if ( nxip < 0 || nxip > avail || expect > avail ) goto bad_format ; xmin = pq_getmsgint64 ( buf ) ; xmax = pq_getmsgint64 ( buf ) ; if ( xmin == 0 || xmin > xmax || xmax > MAX_TXID ) goto bad_format ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; snap -> nxip = nxip ; SET_VARSIZE ( snap, TXID_SNAPSHOT_SIZE ( nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last || cur < xmin || cur >= xmax ) goto bad_format ; snap -> xip [ i ] = cur ; last = cur ; } PG_RETURN_POINTER ( snap ) ; bad_format : elog ( ERROR, ""invalid <S2SV_blank> snapshot <S2SV_blank> data"" ) ; return ( Datum ) NULL <S2SV_ModEnd> ; } <S2SV_null>",0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le,0
430,<S2SV_ModStart> ( epoll_ ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> count )!= OE_SSIZE_T <S2SV_ModEnd> ) OE_RAISE_ERRNO ( <S2SV_ModStart> OE_EINVAL ) ; <S2SV_ModEnd> return ret ;,0
431,"<S2SV_ModStart> ( CMD_INITIALIZE, & new_global_options. option <S2SV_ModEnd>, NULL ) <S2SV_ModStart> ( CMD_INITIALIZE, & new_service_options. option <S2SV_ModEnd>, NULL )",0
432,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_PHNUM_MIN : * ( size_t * ) val = ms -> elf_phnum_min ; return 0 ; case MAGIC_PARAM_ELF_SHNUM_MIN : * ( size_t * ) val = ms -> elf_shnum_min ; return 0 ;,0
433,<S2SV_ModStart> offset ) { struct file * file = page_file_mapping ( page ) ; <S2SV_ModStart> = EXT4_JOURNAL ( file <S2SV_ModEnd> -> mapping ->,0
434,<S2SV_ModStart> ++ ) { if (! ( <S2SV_ModStart> + 1 ) ) ) return GF_OK <S2SV_ModStart>! writer ) return GF_OUT_OF_MEM <S2SV_ModEnd> ; writer ->,0
435,"<S2SV_ModStart> 17 ] ; size_t <S2SV_ModEnd> plen ; md5_state_t <S2SV_ModStart> = 0 ; strlcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> password, 82, sizeof ( md5data ) <S2SV_ModStart> = '\\0' ; strlcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> password ), pass_salt, sizeof ( md5sum ) <S2SV_ModEnd> ) ; md5_init",0
436,<S2SV_ModStart> ; if ( _mibindex_max ) { int i ; for ( i = 0 ; i < _mibindex_max ; ++ i ) SNMP_FREE ( _mibindex_max [ i ] ) ; _mibindex_max = 0 ; _mibindex = NULL ; } if (,0
437,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
438,<S2SV_ModStart> ( ) ; g_hash_table_remove_all ( headers ) ;,0
439,"<S2SV_ModStart> -> y_buffer ; # if CONFIG_VP9_HIGHBITDEPTH if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { memcpy ( dst, src, src_ybc -> y_width ) ; } else { memcpy ( dst, src, src_ybc -> y_width ) ; } # else <S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst, <S2SV_ModStart> y_stride ; } # endif",0
440,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_rd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> int dummy_rate ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) { int <S2SV_ModEnd> i ; MACROBLOCK <S2SV_ModStart> ) { int <S2SV_ModEnd> num_4x4_w = num_4x4_blocks_wide_lookup <S2SV_ModStart> i ) { int num_4x4_w = num_4x4_blocks_wide_lookup <S2SV_ModStart> i ) { int num_4x4_h = num_4x4_blocks_high_lookup [ i ] ; int num_4x4_blk = MAX ( 4, num_4x4_w * num_4x4_h ) ; for ( x -> sb_index = 0 ; x -> sb_index < 4 ; ++ x -> sb_index ) for ( x -> b",0
441,"<S2SV_ModStart> ; int hexdump <S2SV_ModEnd> ; u_int link_type <S2SV_ModStart> ) ) ; if ( lmp_obj_len > len ) { ND_PRINT ( ( ndo, ""LMP <S2SV_blank> object <S2SV_blank> length <S2SV_blank> (%u) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", lmp_obj_len, len ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( lmp_obj_len > len ) { ND_PRINT ( ( ndo, ""LMP <S2SV_blank> object <S2SV_blank> length <S2SV_blank> (%u) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", lmp_obj_len, len ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( lmp_obj_len > len ) { ND_PRINT ( ( ndo, ""LMP <S2SV_blank> object <S2SV_blank> length <S2SV_blank> (%u) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", lmp_obj_len, len ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( lmp_obj_len > len ) { ND_PRINT ( ( ndo, ""LMP <S2SV_blank> object <S2SV_blank> length <S2SV_blank> (%u) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed",0
442,"<S2SV_ModStart> * mbmi, nmv_context_counts * counts, <S2SV_ModStart> [ 2 ] <S2SV_ModEnd> ) { int <S2SV_ModStart> i ) { nmv_inc_mv ( counts, <S2SV_ModEnd> & mbmi -> <S2SV_ModStart> [ 0 ] <S2SV_ModEnd> ) ; }",0
443,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ),",0
444,"<S2SV_ModStart> ; if ( skb_out -> len < size ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; } skb_pull_rcsum ( skb_out, hdr_size ) ; memmove ( skb_out -> data - ETH_HLEN, skb_mac_header ( skb_out ), ETH_HLEN ) ; skb_set_mac_header ( skb_out, - ETH_HLEN ) ; skb_reset_network_header ( skb_out ) ; skb_reset_transport_header ( skb_out ) ; hlist_for_each_entry ( entry, chain, list ) { size = entry -> skb -> len - hdr_size ; memcpy ( skb_put ( skb_out, size ), entry -> skb -> data + hdr_size ) ; } free : batadv_frag_clear_chain ( chain ) ; return skb_out ; } <S2SV_null> <S2SV_null> <S2SV_null>",0
445,<S2SV_ModStart> ) return ; if (! <S2SV_ModStart> netsnmp_mibindex_load ( ) ) { SNMP_FREE ( env_var ) ; return ; } <S2SV_ModEnd> DEBUGMSGTL ( (,0
446,"<S2SV_ModStart> { fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ], O_RDWR ) <S2SV_ModStart> 1 ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_KEY ) ) <S2SV_ModStart> EV_REL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_SYN ) ) <S2SV_ModStart> x ++ ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> ]. mapped_id )",0
447,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
448,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s, <S2SV_ModStart> & 1 ) vpx_lpf_vertical_4 <S2SV_ModEnd> ( s +",0
449,<S2SV_ModStart> krb5_error_code iakerb_alloc_context ( krb5_ctx_id <S2SV_ModEnd> * pctx ) <S2SV_ModStart> pctx ) { krb5_ctx_id <S2SV_ModEnd> ctx ; krb5_error_code,0
450,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> bitmapDC = CreateCompatibleDC",1
451,"<S2SV_ModStart>, START_CODE_PREFIX_LEN ) == <S2SV_ModEnd> START_CODE_PREFIX ) {",0
452,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { ret = <S2SV_ModEnd> - EINVAL ; <S2SV_ModStart> - EINVAL ; goto out ; }",1
453,"<S2SV_ModStart> ) ; } mono_class_inflate_generic_method ( imethod, & tmp_context ) ;",0
454,<S2SV_ModStart> ) ] ; long <S2SV_ModEnd> tmp ; if <S2SV_ModStart> ; if ( count >= sizeof ( buf ) ) return - EINVAL ; if (,0
455,<S2SV_ModStart> char * last_elem = NULL <S2SV_ModStart> size_t len ; const char * l_origin = NULL ; const char * l_platform = NULL ; <S2SV_ModStart> ( ( ( strncasecmp <S2SV_ModEnd> ( & name <S2SV_ModStart> ) || ( strncasecmp <S2SV_ModEnd> ( & name <S2SV_ModStart> 'O' )? l_origin <S2SV_ModEnd> : l -> <S2SV_ModStart> l -> l_origin <S2SV_ModEnd> : _dl_platform ),0
456,"<S2SV_ModStart> decContainer_t * ) H264SwDecCalloc ( 1, <S2SV_ModEnd> sizeof ( decContainer_t",0
457,"<S2SV_ModStart> drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> srr ) ) { struct in_device * in_dev = __in_dev_get_rcu ( dev ) ; if ( in_dev &&! IN_DEV_SOURCE_ROUTE ( in_dev ) ) goto drop ; if ( ip_options_rcv_srr ( skb ) ) goto drop ; } return 0 ; inhdr_error : IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INHDRERRORS ) ; <S2SV_ModEnd> return 0 ; <S2SV_ModStart> return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
458,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
459,<S2SV_ModStart> errout ; return 0 <S2SV_ModEnd> ; } <S2SV_null>,0
460,<S2SV_ModStart> krb5_key_data * key_data = NULL <S2SV_ModStart> == NULL ) { err = ENOMEM ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { err = ENOMEM ; <S2SV_ModStart> goto cleanup ; },0
461,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
462,<S2SV_ModStart> ] ) ; if ( nByte < 0 ) { rc = SQLITE_CORRUPT_BKPT ; } else { <S2SV_ModStart> 1 ) ; },0
463,<S2SV_ModStart> filp ) { struct socket_info * si = <S2SV_ModEnd> SOCKET_I ( inode <S2SV_ModStart> ( inode ) ; if ( si -> i_state & I_CLOSED ) return - EBADF ; sock_release ( si,0
464,"<S2SV_ModStart> expr_ty iter, asdl_stmt <S2SV_ModEnd> * body, <S2SV_ModStart> * orelse, asdl_stmt <S2SV_ModEnd> * orelse, <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. type_hint = NULL",0
465,"<S2SV_ModStart> char * name, my_off_t * index_pos <S2SV_ModStart> ; uint r_locks <S2SV_ModEnd> ; MI_STATE_INFO old_lock <S2SV_ModStart> ; err : * index_pos = 0 ; r_locks = 0 ; w_locks = 0 ; DBUG_LEAVE ( ""mi_sort_index"" ) ; <S2SV_ModStart> ; err : * index_pos = 0 ; DBUG_LEAVE ( ""mi_sort_index"" ) ;",0
466,<S2SV_ModStart> case NGHTTP2_ERR_UNSUPPORTED_PROTOCOL : case NGHTTP2_ERR_UNSUPPORTED_PROTOCOL_VERSION : <S2SV_ModStart> case NGHTTP2_ERR_UNSUPPORTED_PROTOCOL_VERSION : case NGHTTP2_ERR_UNSUPPORTED_PROTOCOL_VERSION : <S2SV_ModStart> case NGHTTP2_ERR_UNSUPPORTED_PROTOCOL_VERSION : case NGHTTP2_ERR_UNSUPPORTED_PROTOCOL_VERSION : <S2SV_ModStart> case NGHTTP2_ERR_UNSUPPORTED_PROTOCOL_VERSION : case NGHTTP2_ERR_UNSUPPORTED_PROTOCOL_VERSION :,0
467,"<S2SV_ModStart> UINT error ; if (! <S2SV_ModStart>, eventId ) ||! Stream_Read_UINT32 ( s, pduLength ) ) return CHANNEL_RC_INVALID_DATA",0
468,"<S2SV_ModStart> ) ; } if ( pData -> socket == INVALID_SOCKET ) { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"", pData -> description, zmq_strerror ( errno ) ) ; ABORT_FINALIZE ( RS_RET_NO_ERRCODE ) ; }",0
469,"<S2SV_ModStart> struct flowi6 fl6 ; int ret <S2SV_ModStart> daddr ) ; ret = ip6_xmit ( sk, skb, & fl6, np -> opt, np -> tclass ) ; if ( ret < 0 ) goto out ; <S2SV_ModStart> = 1 ; out : <S2SV_ModStart> ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>",0
470,"<S2SV_ModStart> ) break ; if ( quantum_info -> quantum_type == QuantumTypeNone ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; goto MATLAB_KO ; }",0
471,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
472,"<S2SV_ModStart> = 0 ; bn_t t ; bn_null ( t ) ; RLC_TRY { bn_new ( t ) ; bn_zero ( m ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, RSA_PUB ) ; * p_len = k_len - 3 - m_len ; for ( int i = 0 ; i < * p_len ; i ++ ) { bn_lsh ( m, m, 8 ) ; do { rand_bytes ( & pad, 1 ) ; bn_add_dig ( m, m, pad ) ; } bn_lsh ( m, m, 0 ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, 0 ) ; bn_lsh ( m, m, m_len * 8 ) ; } bn_lsh ( m, m, 0 ) ; bn_lsh ( m, m, m_len * 8 ) ; bn_lsh ( m, m, 0 ) ; bn_lsh ( m, m, m_len * 8 ) ; bn_lsh ( m, m, m_",0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,<S2SV_ModStart> 8 ) ; <S2SV_ModEnd> psf = calloc <S2SV_ModStart> SF_PRIVATE ) ) ; if ( psf <S2SV_ModEnd> == NULL ),0
475,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fix_interp_filter ( VP9_COMMON <S2SV_ModStart> cm ) { int count [ SWITCHABLE_FILTERS ] ; int i, j, c = 0 ; for ( i = 0 ; i < SWITCHABLE_FILTERS ; ++ i ) { count [ i ] = 0 ; for ( j = 0 ; j < SWITCHABLE_FILTER_CONTEXTS ; ++ j ) { if ( cm -> counts. switchable_interp [ j ] [ i ] > 0 ) { c += ( count [ i ] > 0 ) ; } } } if ( c == 1 ) { for ( i = 0 ; i < SWITCHABLE_FILTERS ; ++ i ) { if ( count [ i ] ) { cm -> interp_filter = i ; break ; } } } } if ( c == 1 ) { for ( i = 0 ; i < SWITCHABLE_FILTERS ; ++ i ) { if ( count [ i ] ) { cm -> interp_filter = i ; break ; } } } } if ( c == 1 ) { for ( i = 0 ; i < SWITCHABLE_FILTERS ; ++",0
476,"<S2SV_ModStart> & cpi -> encode_frame <S2SV_ModEnd> ; VP9_COMMON * <S2SV_ModStart> mi_cols ) ; <S2SV_ModEnd> vp9_setup_src_planes ( x <S2SV_ModStart> 0, 0 <S2SV_ModEnd> ) ; vp9_setup_pre_planes <S2SV_ModStart> subsampling_y ) ; vpx_memset ( xd -> above_context [ 0 ], 0, sizeof ( * xd -> above_context [ 0 ] ) * 2 * aligned_mi_cols * MAX_MB_PLANE ) ; vpx_memset ( xd -> above_seg_context, 0, sizeof ( * xd -> above_seg_context ) * aligned_mi_cols ) ; <S2SV_ModStart> MAX_MB_PLANE ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
477,"<S2SV_ModStart> hp ) ; if ( <S2SV_ModEnd> htc_request_check_host_hdr ( hp <S2SV_ModStart> ( hp ) <S2SV_ModEnd>!= 0 ) <S2SV_ModStart>, SLT_Error, ""Duplicated <S2SV_blank> HTTP <S2SV_blank> host <S2SV_blank> header"" <S2SV_ModEnd> ) ; return",0
478,"<S2SV_ModStart> EOFOp 0x07 char * magick_buffer <S2SV_ModEnd> ; Image * <S2SV_ModStart> char * ) magick_buffer <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( count!= 12 ) || ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart>. x = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. y = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. columns = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. rows = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart> ( count!= 12 ) || ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ( count!= 12 ) || ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ( count!= 12 ) || ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ( count!= 12 <S2SV_ModEnd> ) ) ThrowReaderException <S2SV_ModStart> ( CorruptImageError, ""ImproperImageHeader"" ) ; count = ReadBlob ( image, 12, ( unsigned char * ) magick_buffer ) ; if ( ( count!= 12 ) || ( memcmp ( magick, ""\\122\\314"", 12 )!= 0 ) ) ThrowReader",0
479,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> sizeof ( tETH_HDR ),1
480,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ps_dec -> s_cur_slice <S2SV_ModStart> ps_dec -> s_cur_slice == 0 ) { ps_dec -> s_cur_slice = 1 ; } if ( <S2SV_ModEnd> ps_dec -> s_cur_slice <S2SV_ModStart> ps_dec -> s_cur_slice == 1 <S2SV_ModEnd> ) { ps_dec <S2SV_ModStart> ; if ( <S2SV_ModEnd> ps_dec -> s_cur_slice <S2SV_ModStart> ps_dec -> s_cur_slice == 2 <S2SV_ModEnd> ) { ps_dec <S2SV_ModStart> ; if ( <S2SV_ModEnd> ps_dec -> s_cur_slice <S2SV_ModStart> ps_dec -> s_cur_slice == 3 <S2SV_ModEnd> ) { ps_dec <S2SV_ModStart> ; if ( <S2SV_ModEnd> ps_dec -> s_cur_slice <S2SV_ModStart> ps_dec -> s_cur_slice == 4 <S2SV_ModEnd> ) { ps_dec <S2SV_ModStart> ; if ( <S2SV_ModEnd> ps_dec -> s_cur_slice <S2SV_ModStart> ps_dec -> s_cur_slice == 2 <S2SV_ModEnd> ) { ps_dec <S2SV_ModStart> ; if ( <S2SV_ModEnd> ps_dec -> s_cur_slice <S2SV_ModStart> ps_dec -> s_cur_slice == 3 <S2SV_ModEnd> ) { ps_dec <S2SV_ModStart> ; if ( <S2SV_ModEnd> ps_dec -> s_cur_slice <S2SV_ModStart> ps_dec -> s_cur_,0
481,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> * karg ; <S2SV_ModEnd> struct pci_dev * <S2SV_ModStart> pci_dev * pdev <S2SV_ModEnd> ; int cim_rev <S2SV_ModStart> ) ) ; kfree ( karg ) ; <S2SV_ModStart> ( karg ) ; } if ( mpt_verify_adapter ( karg -> hdr. iocnum, & ioc ) < 0 ) { printk ( KERN_DEBUG MYNAM ""%s::mptctl_getiocinfo() <S2SV_blank> - <S2SV_blank> "" ""ioc%d <S2SV_blank> not <S2SV_blank> found!\\n"", __FILE__, __LINE__, iocnum ) ; kfree ( karg ) ; return - ENODEV ; } if ( karg -> hdr. maxDataSize!= data_size ) { printk ( MYIOC_s_ERR_FMT ""%s@%d::mptctl_getiocinfo <S2SV_blank> - <S2SV_blank> "" ""Structure <S2SV_blank> size <S2SV_blank> mismatch!\\n"", __FILE__, __LINE__ ) ; kfree ( karg ) ; return - ENODEV ; } if ( karg -> hdr. maxDataSize!= data_size ) { printk",0
482,"<S2SV_ModStart> -> columns, 3LL <S2SV_ModEnd> * sizeof (",0
483,"<S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv",0
484,"<S2SV_ModStart> ; if ( datao + 8 > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> order = EXIF_BYTE_ORDER_INTEL ; datao += exif_get_long ( buf + datao + 8, EXIF_BYTE_ORDER_INTEL ) ; if ( <S2SV_ModStart> ( datao + <S2SV_ModEnd> 2 < datao <S2SV_ModStart> + 2 < <S2SV_ModEnd> 2 ) || <S2SV_ModStart> ( datao + <S2SV_ModEnd> 2 > buf_size",0
485,"<S2SV_ModStart> ; } } if (! strcmp ( viewfile, viewfile ) ) { L_ERROR ( ""viewfile <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> regular <S2SV_blank> file\\n"", procName, viewfile ) ; return 1 ; } if ( strcmp ( viewfile, thumbfile ) == 0 ) { L_ERROR ( ""thumbfile <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> regular <S2SV_blank> file\\n"", procName, thumbfile ) ; return 1 ; }",0
486,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> opt = service_options <S2SV_ModStart> service_options. next <S2SV_ModEnd> ; while ( <S2SV_ModStart> 0 ; } <S2SV_ModEnd> s_log ( LOG_DEBUG <S2SV_ModStart> servname ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
487,<S2SV_ModStart> void ) { if (! recovery_started ) return ;,0
488,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ;",0
489,"<S2SV_ModStart> image ) ; ( void ) SetImageExtent ( image, image -> columns ) ;",0
490,<S2SV_ModStart> { WORD32 i <S2SV_ModEnd> ; WORD32 num_neg_pics <S2SV_ModStart> u4_num_total_curr ; } <S2SV_ModEnd> if ( u4_num_st_curr_before <S2SV_ModStart> u4_num_st_curr_after ) ; <S2SV_ModEnd> if ( u4_num_lt_curr <S2SV_ModStart> u4_num_lt_curr ) ; <S2SV_ModEnd> if ( u4_num_st_curr_before <S2SV_ModStart> u4_num_st_curr_after ) ; <S2SV_ModEnd> if ( u4_num_lt_curr <S2SV_ModStart> u4_num_lt_curr ) ; <S2SV_ModEnd> if ( u4_num_lt_curr <S2SV_ModStart> u4_num_lt_curr ) ; <S2SV_ModEnd> if ( u4_num_lt_curr <S2SV_ModStart> u4_num_lt_curr ) ; <S2SV_ModEnd> if ( u4_num_st_curr_before <S2SV_ModStart> u4_num_st_curr_after ) ; <S2SV_ModEnd> if ( u4_num_lt_curr <S2SV_ModStart> u4_num_lt_curr ) ; <S2SV_ModEnd> if ( u4_num_lt_curr <S2SV_ModStart> u4_num_lt_curr ) ; <S2SV_ModEnd> if ( u4_num_lt_curr <S2SV_ModStart> u4_num_lt,0
491,"<S2SV_ModStart> cJSON * item, const char * name <S2SV_ModStart> child ) { if (! name ) { cJSON_free ( entries ) ; return 0 ; } <S2SV_ModStart> = print_string_ptr ( name <S2SV_ModEnd> ) ; entries <S2SV_ModStart> = ret = print_value ( child, depth, fmt ) ; if ( str && ret ) len += strlen ( ret ) + 2 + ( fmt? 2 + depth : 0 ) ; else fail = 1 ; child = child -> next ; } if (! fail ) { out = ( char * ) cJSON_malloc ( len ) ; if (! out ) fail = 1 ; } for ( i = 0 ; i < numentries ; ++ i ) { if ( names [ i ] ) cJSON_free ( names [ i ] ) ; if ( entries [ i ] ) cJSON_free ( entries [ i ] ) ; } cJSON_free ( entries ) ; return 0 ; } * out = '{' ; ptr = out + 1 ; if ( fmt ) * ptr ++ = '\\n' ; * ptr = 0 ; for ( i = 0 ; i < numentries ; ++ i ) { if ( fmt ) for ( j = 0 ; j < depth ; ++ j ) * ptr",0
492,<S2SV_ModStart> sk ) ; if ( writable ) { unix_state_lock ( sk ) ; other = unix_peer ( sk ) ; if ( other && unix_peer ( <S2SV_ModEnd> other )!= <S2SV_ModStart> ( unix_recvq_full ( <S2SV_ModEnd> other ) ) <S2SV_ModStart> = 0 ; unix_state_unlock ( sk ) ; } <S2SV_ModEnd> } if (,0
493,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; sprintf ( outputbuffer, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", x, y, w, h ) ;",0
494,<S2SV_ModStart> ( OM_uint32 ) GSS_S_DEFECTIVE_TOKEN <S2SV_ModEnd> ; return GSS_S_DEFECTIVE_TOKEN,0
495,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vp9_ref_frame_t * ) ; YV12_BUFFER_CONFIG * fb <S2SV_ModStart> NULL ) { <S2SV_ModEnd> vp9_get_reference_enc ( ctx",0
496,<S2SV_ModStart> plug ) ; <S2SV_ModEnd> put_ioctx ( ctx,0
497,"<S2SV_ModStart> * name, my_bool <S2SV_ModEnd> rep_quick ) { <S2SV_ModStart> ) ) { if (! rep_quick && init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> read_buffer_length, READ_CACHE, share -> pack. header_length, MYF ( MY_WME ) ) ) { DBUG_RETURN ( 0 ) ; } <S2SV_ModStart> ) ) { if (! rep_quick && init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, READ_CACHE, share -> pack. header_length, MYF ( MY_WME ) ) ) { DBUG_RETURN ( 0 ) ; } <S2SV_ModStart> ) ) { if (! rep_quick && init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, READ_CACHE, share -> pack. header_length, MYF ( MY_WME ) ) ) { DBUG_RETURN ( 0 ) ; }",0
498,"<S2SV_ModStart> s } ; uECC_word_t * p ; wordcount_t num_words = curve -> num_words ; wordcount_t num_n_words = BITS_TO_WORDS ( curve -> num_n_bits ) ; bitcount_t num_n_bits = curve -> num_n_bits ; if ( uECC_vli_isZero ( k, num_words ) || uECC_vli_cmp ( curve -> n, k, num_n_words )!= 1 ) { return 0 ; } carry = regularize_k ( k, tmp, s, curve ) ; EccPoint_mult ( p, curve -> G, k2 [! carry ], 0, num_n_bits + 1, curve ) ; if ( uECC_vli_isZero ( p, num_words ) ) { return 0 ; } if (! g_rng_function ) { uECC_vli_clear ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! uECC_generate_random_int ( tmp, curve -> n, num_n_words",0
499,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|dao-truncated]"" <S2SV_ModEnd> ) ) ;",0
500,<S2SV_ModStart> ; } else if ( buf -> data == NULL ) { free ( buf ) ; return ; } else <S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
501,"<S2SV_ModStart> ( * cp && * cp <S2SV_ModStart> ] ) { <S2SV_ModEnd> const char hex <S2SV_ModStart> const char hex [ ] = ""00112233445566778899aAbBcCdDeEfF"" ; int dcount = 0 ; for ( cp ++ ; * cp && ( dp = index ( hex, * cp ) ) && ( dcount ++ < 2 ) ; cp ++ ) cval = ( cval * 16 ) + ( ( int ) ( dp - hex ) / 2 ) ; else if ( * cp == 'o' || * cp == 'O' ) for ( cp ++ ; * cp && ( index ( ""01234567"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 8 ) + ( * cp - '0' ) ; else for ( ; * cp && ( index ( ""0123456789"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 10 ) + ( * cp - '0' ) ; } else if ( * cp == '\\\\' && cp [ 1 ] ) { switch ( * ++ cp ) { case '\\\\' : cval = '\\\\' ; break ; case '",0
502,"<S2SV_ModStart> char detect [ 5 <S2SV_ModEnd> ] ) { <S2SV_ModStart>, ""YUV4"", 5 <S2SV_ModEnd> ) == 0",0
503,"<S2SV_ModStart>, * pixg <S2SV_ModEnd> ; PIXCMAP * <S2SV_ModStart> = 15 ; <S2SV_ModEnd> pixc = pixFewColorsOctcubeQuant1 <S2SV_ModStart>, level ) ; if ( pixc <S2SV_ModEnd> == NULL ) <S2SV_ModStart> == NULL ) { pixDestroy ( & pixc ) ; <S2SV_ModStart> NULL ) ; }",0
504,<S2SV_ModStart>. vf = vpx_mse16x16 <S2SV_ModEnd> ; xd ->,1
505,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> overhead = 16 <S2SV_ModStart> + 1 ; size_t <S2SV_ModEnd> size = overhead,1
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NEGO_STATE_FAIL ; goto fail <S2SV_ModEnd> ; } Stream_Read_UINT8 <S2SV_ModStart> = NEGO_STATE_FINAL ; fail : return ;,0
507,"<S2SV_ModStart> i, target_bits_per_mb <S2SV_ModEnd> ; target_bits_per_mb = <S2SV_ModStart> int bits_per_mb_at_this_q = <S2SV_ModEnd> vp9_rc_bits_per_mb ( cm <S2SV_ModStart> i, correction_factor <S2SV_ModEnd> ; if (",0
508,<S2SV_ModStart> ; value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1101WritePhyReg (,0
509,<S2SV_ModStart> ; if ( i >= NCH ( n ) ) { _Py_asdl_seq_free ( posargs ) ; _Py_asdl_seq_free ( kwonlyargs ) ; _Py_asdl_seq_free ( posdefaults ) ; return NULL ; } if (,0
510,"<S2SV_ModStart> int dst_stride, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart> int i ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> uint8_t, left_col <S2SV_ModEnd> ) ; DECLARE_ALIGNED <S2SV_ModStart> plane ] ; <S2SV_ModEnd> if ( plane <S2SV_ModStart> + y ; memset <S2SV_ModEnd> ( left_col, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( right_col, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( right_col, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; mem",0
511,"<S2SV_ModStart> ++ ; } else if ( pattern [ end ] == \'""\' ) { end ++ ; while ( ( pattern [ end ]!= 0 ) && ( pattern [ end ]!= \'""\' ) ) end ++ ; }",0
512,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_completed_io_lock ) ;,1
513,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> show_frame ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> KEY_FRAME ) { vpx_wb_write_bit ( wb, 0 ) ; vpx_wb_write_bit ( wb, 1 ) ; vpx_wb_write_bit ( wb, 2 ) ; vpx_wb_write_bit ( wb, 3 ) ; vpx_wb_write_bit ( wb, 0 ) ; } else { assert ( cm -> profile == PROFILE_1 ) ; vpx_wb_write_bit ( wb, 0 ) ; } write_frame_size ( cm, wb ) ; } else { if (! cm -> show_frame ) vp9_wb_write_bit ( wb, cm -> intra_only ) ; if (! cm ->",0
514,"<S2SV_ModStart> ; if ( optind < 1 ) { fprintf ( stderr, ""Error: <S2SV_blank> %s\\n"", strerror ( errno ) ) ; exit ( EXIT_FAILURE ) ; } if (",0
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { q = osStrchr <S2SV_ModEnd> ( p +,1
516,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
517,<S2SV_ModStart> KEY_FRAME ) { memcpy <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd ->,1
518,"<S2SV_ModStart> error_t error ; int16_t <S2SV_ModEnd> n ; uint32_t <S2SV_ModStart> ; uint32_t status <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( enc624j600GetReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, ENC624J600_ESTAT <S2SV_ModEnd> ) & ESTAT_PKTCNT <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL <S2SV_ModEnd>, ENC624J600_RX_BUFFER_STOP ) <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600",0
519,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv, VALUE klass ) { VALUE content ; VALUE rb_schema ; VALUE errors ; xmlSchemaPtr schema ; xmlSchemaParserCtxtPtr ctx ; if ( argc < 2 ) return Qnil ; <S2SV_ModEnd> ctx = xmlSchemaNewMemParserCtxt <S2SV_ModStart> content ) ) ; if ( ctx == NULL ) return Qnil <S2SV_ModStart> errors ) ; rb_iv_set ( rb_schema, ""@content"", content ) ; errors = rb_ary_new ( ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; # ifdef HAVE_XMLSCHEMASETPARSERSTRUCTUREDERRORS xmlSchemaSetParserStructuredErrors ( ctx, Nokogiri_error_array_pusher, ( void * ) errors ) ; # endif schema = xmlSchemaParse ( ctx ) ; xmlSetStructuredErrorFunc ( NULL, NULL ) ; xmlSchemaFreeParserCtxt ( ctx ) ; if ( NULL == schema ) { xmlErrorPtr error = xmlGetLastError ( ) ; if ( error ) Nokogiri_error_raise ( NULL, error ) ; else rb_raise ( rb_eRuntimeError, ""Could",0
520,"<S2SV_ModStart> ) ; } if ( strlen ( config_arg ) == 0 ) { s_log ( LOG_ERR, ""Empty <S2SV_blank> configuration <S2SV_blank> argument"" ) ; print_syntax ( ) ; return 1 ; }",0
521,<S2SV_ModStart> 2 ] ; if ( out [ 3 ]!= ptr [ ( x + 4 * state -> xsize ) / 2 ] || out [ 3 ]!= ptr [ ( x + 5 * state -> xsize ) / 2 ] ) return - 1 ; <S2SV_ModStart> 2 ] ; if ( out [ 3 ]!= ptr [ ( x + 4 * state -> xsize ) / 2 ] || out [ 3 ]!= ptr [ ( x + 5 * state -> xsize ) / 2 ] ) return - 1 ; <S2SV_ModStart> 2 ] ; if ( out [ 3 ]!= ptr [ ( x + 4 * state -> xsize ) / 2 ] || out [ 3 ]!= ptr [ ( x + 5 * state -> xsize ) / 2 ] ) return - 1 ;,0
522,<S2SV_ModStart> err = - <S2SV_ModEnd> EALREADY ; if,0
523,<S2SV_ModStart> POLL_IN ) ; <S2SV_ModEnd> perf_event_wakeup ( handle,0
524,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
525,"<S2SV_ModStart> EPROTONOSUPPORT ) { if ( as_console ) { sleep ( 2 ) ; } <S2SV_ModStart> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" <S2SV_ModEnd> ) ; }",0
526,"<S2SV_ModStart> ( interface, KSZ8851_RXFHSR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( interface, KSZ8851_RXFDPR, KSZ8851_RXFDPR_RXFPAI <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851ReadFifo <S2SV_ModStart> ( interface, KSZ8851_RXFDPR, KSZ8851_RXFDPR_RXFPAI <S2SV_ModEnd> ) ; ancillary <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ancillary <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_RRXEF <S2SV_ModEnd> ) ; return",0
527,"<S2SV_ModStart> ast_for_funcdef_impl ( struct compiler * c, const node * n, asdl_seq * decorator_seq, int is_async ) { identifier name ; arguments_ty args ; asdl_seq * body ; expr_ty returns = NULL ; int name_i = 1 ; node * tc ; string type_comment = NULL ; if ( c -> c_feature_version < 5 ) { ast_error ( c, n, ""Async <S2SV_blank> functions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.5 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } REQ ( n, funcdef ) ; name = NEW_IDENTIFIER ( CHILD ( n, name_i ) ) ; if (! name ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i ), 0 ) ) return NULL ; args = ast_for_arguments ( c, CHILD ( n, name_i + 1 ) ) ; if (! args ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 2 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name",0
528,"<S2SV_ModStart> ( mm, 0xA0000U <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( pgd, 0xA0000U <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( pud, 0xA0000U <S2SV_ModEnd> ) ; split_huge_page_pmd <S2SV_ModStart>, pmd, 0xA0000U <S2SV_ModEnd>, & ptl <S2SV_ModStart> : flush_tlb ( mm",0
529,"<S2SV_ModStart> packet_len ) ; if ( packet_len < 4 ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> packet_len <S2SV_blank> too <S2SV_blank> short!"" ) ; return - 1 ; }",0
530,"<S2SV_ModStart> ) ) { if (! is_valid_test_name ( test_name ) ) { printf ( ""Error: <S2SV_blank> invalid <S2SV_blank> test <S2SV_blank> name.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; } <S2SV_ModStart> ) ) { if (! is_valid_test_name ( test_name ) ) { printf ( ""Error: <S2SV_blank> invalid <S2SV_blank> test <S2SV_blank> name.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; } <S2SV_ModStart> ) ) { if (! is_valid_test_name ( test_name ) ) { printf ( ""Error: <S2SV_blank> invalid <S2SV_blank> test <S2SV_blank> name.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; } <S2SV_ModStart> ) ) { if (! is_valid_test_name ( test_name ) ) { printf ( ""Error: <S2SV_blank> invalid <S2SV_blank> test <S2SV_blank> name.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; } <S2SV_ModStart> ) ) { if (! is_valid_test_name ( test_name ) ) { printf ( ""Error: <S2SV_blank> invalid <S2SV_blank> test <S2SV_blank> name.\\n"" ) ; print_usage (",0
531,<S2SV_ModStart> 0 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif <S2SV_ModStart> row ++ ) <S2SV_ModEnd> for ( col <S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif,0
532,<S2SV_ModStart> len < needed || len > SIZE_MAX - param -> data_start,0
533,"<S2SV_ModStart> ) break ; if ( quantum_info -> quantum_type == QuantumTypeNone ) { quantum_info = DestroyQuantumInfo ( quantum_info ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; }",0
534,<S2SV_ModStart> ( bfqq ) __bfq_idle_slice_timer_body <S2SV_ModEnd> ( bfqq ),0
535,<S2SV_ModStart> ; length += sizeof ( PRIMARY_DRAWING_ORDER_FIELD ) <S2SV_ModEnd> ; length +=,0
536,<S2SV_ModStart> d_inode ) { if (! d_is_dir ( old ) &&! d_is_dir ( new ) ) { err = - EISDIR ; goto out ; },0
537,"<S2SV_ModStart> int plane ; vp9_foreach_transformed_block_in_all_plans <S2SV_ModEnd> ( xd,",0
538,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> nonrd_pick_sb_modes ( VP9_COMP <S2SV_ModStart> -> e_mbd ; if ( xd -> mi [ 0 ] -> mbmi. sb_type!= BLOCK_NONE ) { <S2SV_ModStart> bsize ) ; } else { MB_PREDICTION_MODE intramode = DC_PRED ; set_mode_info ( & xd -> mi [ 0 ] -> mbmi, bsize, intramode ) ; } <S2SV_ModStart> ) ) { return <S2SV_ModStart> bsize ) ; <S2SV_ModEnd> } duplicate_mode_info_in_sb (",0
539,"<S2SV_ModStart> = NULL ; if ( strcmp ( filename, ""-"" ) ) fclose ( reader. fhd ) ; <S2SV_ModStart> superblock ) ; <S2SV_ModEnd> hrtf = getHrtf",0
540,"<S2SV_ModStart> -> ranges = calloc ( 1, <S2SV_ModEnd> sizeof ( MappedRange",0
541,"<S2SV_ModStart> ; if ( flags & VP8_EFLAG_NO_REF_LAST ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_ALTR_FRAME ; vp8_use_as_reference ( ctx -> cpi, ref ) ; } if (",0
542,"<S2SV_ModStart> ) break ; if ( quantum_info -> NumQuantums > MaxQuantums ) ThrowReaderException ( CorruptImageError, ""TooManyQuantums"" ) ;",0
543,<S2SV_ModStart>! head ) <S2SV_ModEnd> return - EINVAL <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
544,"<S2SV_ModStart> * pptr, u_int64 <S2SV_ModEnd> len ) { <S2SV_ModStart> advance ; u_int64 <S2SV_ModEnd> tlen ; const <S2SV_ModStart> ; if ( tlen < 2 ) goto trunc ; ND_TCHECK ( tptr [ 0 ] ) ; ND_PRINT ( ( ndo, ""%s"", tptr ) ) ; if ( tlen < 2 ) goto trunc ; ND_TCHECK2 ( tptr [ 1 ], as_size ) ; ND_PRINT ( ( ndo, ""%s <S2SV_blank> "", as_printf ( ndo, astostr, sizeof ( astostr ), tptr [ 1 ] ) ) ) ; if ( tlen < 2 ) goto trunc ; if (",0
545,"<S2SV_ModStart> ( res, ""HTTP/1.1 <S2SV_blank> 200 <S2SV_blank> OK\\r\\n\\r\\n"" <S2SV_ModEnd>, 200 )",0
546,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
547,"<S2SV_ModStart>, ""%s <S2SV_blank> %s <S2SV_blank> %s <S2SV_blank> %s <S2SV_blank> %s <S2SV_blank> %s <S2SV_blank> %s <S2SV_blank> %s <S2SV_blank> %s <S2SV_blank> %s <S2SV_blank> %s <S2SV_blank> %s <S2SV_blank> %s <S2SV_blank> %s <S2SV_blank> %s <S2SV_blank> %s <S2SV_blank> %s <S2SV_blank> %s <S2SV_blank> %s <S2SV_blank> %s <S2SV_blank> %s <S2SV_blank> %s <S2SV_blank> %s <S2SV_blank> %s <S2SV_blank> %s <S2SV_blank> %s <S2SV_blank> %s <S2SV_blank> %s <S2SV_blank> %s <S2SV_blank> %s <S2SV_blank> %s <S2SV_blank> %s <S2SV_blank> %s"", constr1, constr1, constr1, constr2, tokenMinAmount, tokenMinAmount, <S2SV_ModEnd> msg -> chain_id",0
548,"<S2SV_ModStart> iad_num ++ ; if ( iad_num > USB_MAXINTERFACES ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, nintf_orig, USB_MAXINTERFACES ) ; nintf = USB_MAXINTERFACES ; }",0
549,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
550,<S2SV_ModStart> ; distortion = vpx_variance16x16 <S2SV_ModEnd> ( * (,1
551,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_ECON2_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_STRCH <S2SV_ModEnd> ) ; }",0
552,<S2SV_ModStart> * start ; if ( psf -> header ) { <S2SV_ModStart> header ) ; } else { start = psf -> header ; } <S2SV_ModStart> ; maxlen = strlen ( psf -> header ) <S2SV_ModEnd> ; va_start ( <S2SV_ModStart> = 0 ; if ( psf -> header ) { <S2SV_ModStart> header ) ; },0
553,<S2SV_ModStart> -> alg_priv ) { <S2SV_ModStart> alg_priv ) ; ctx -> priv -> alg_priv = NULL ; },0
554,<S2SV_ModStart> { sf -> <S2SV_ModEnd> recode_loop = ( <S2SV_ModStart> ; sf -> <S2SV_ModEnd> less_rectangular_check = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> mode_skip_start = 10 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> recode_loop = ALLOW_RECODE_KFARFGF <S2SV_ModStart> ; sf -> <S2SV_ModEnd> intra_y_mode_mask [ TX_32X32 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> intra_uv_mode_mask [ TX_16X16 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> mode_skip_start = 10 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> recode_loop = ALLOW_RECODE_KFARFGF <S2SV_ModStart> ; sf -> <S2SV_ModEnd> mode_skip_start = 10 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> recode_loop = ALLOW_RECODE_KFARFGF <S2SV_ModStart> ; sf -> <S2SV_ModEnd> intra_y_mode_mask [ TX_32X32 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> intra_uv_mode_mask [ TX_32X32 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> intra_y_mode_mask [ TX_16X32 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> intra_uv_mode_mask [ TX_16X16 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> mode_skip_start = 10 <S2SV_ModStart> ; sf -> <S2SV_ModEnd>,0
555,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
556,<S2SV_ModStart> inuse + ( ( int ) ( <S2SV_ModStart> 2 * EXTRA_STACK ),0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,"<S2SV_ModStart> n ) ; if (! str ) { PyArena_AddPyObject ( c -> c_arena, str ) ; return Str ( str, kind, LINENO ( n ), n -> n_col_offset, c -> c_arena ) ; } <S2SV_ModStart> ) ) ; <S2SV_ModEnd> char * ch <S2SV_ModStart> errstr ) { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } Py_DECREF ( type ) ; Py_DECREF ( value ) ; Py_XDECREF ( tback ) ; } # endif return NULL ; } PyArena_AddPyObject ( c -> c_arena, str ) ; return Str ( str, kind, LINENO ( n ), n -> n_col_offset, c -> c_arena ) ; } case IDENTIFIER : { PyObject * identifier = NEW_IDENTIFIER ( ch ) ; if (! identifier ) { ast_error ( n, ""(unicode <S2SV_blank> identifier) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } return Str ( str, kind, LINENO ( n ), n -> n_col_offset, c -> c_arena ) ; } case",0
559,"<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> break ; } input_string = strdup ( option_value ) ; option_name = strtok_r ( option_name, ""="", & input_ptr ) ; while ( option_name!= NULL ) { option_value = strtok_r ( NULL, "" <S2SV_blank> "", & input_ptr ) ; if ( option_value == NULL ) { svc_log ( svc_ctx, SVC_LOG_ERROR, ""option <S2SV_blank> missing <S2SV_blank> value: <S2SV_blank> %s\\n"", option_name ) ; res = VPX_CODEC_INVALID_PARAM ; break ; } if ( strcmp ( ""encoding-mode"", option_name ) == 0 ) { res = set_option_encoding_mode ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""layers"", option_name ) == 0 ) { svc_ctx -> spatial_layers = atoi ( option_value ) ; } else if ( strcmp ( ""scale-factors"", option_name ) == 0 ) { res = parse_scale",0
560,<S2SV_ModStart> ) ; } <S2SV_ModEnd> mb_index = 0,0
561,<S2SV_ModStart> self ) { size_t <S2SV_ModEnd> i ; PyObject,1
562,,1
563,"<S2SV_ModStart> ) ) { if ( mysql_errno ( imp_dbh -> pmysql )!= 0 ) { PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""mysql_errno(%d) <S2SV_blank> = <S2SV_blank> %s <S2SV_blank> (%s)\\n"", mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ) ) ; } else { PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""mysql_errno(%d) <S2SV_blank> = <S2SV_blank> %s <S2SV_blank> (%s)\\n"", mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ) ) ; }",0
564,<S2SV_ModStart> size ) ) { <S2SV_ModStart> slot_lock ) ; return ; } <S2SV_ModStart>! size ) { <S2SV_ModStart> slot ) ; return ; },0
565,<S2SV_ModStart> ; struct ieee_802_11_phdr * phdr = NULL <S2SV_ModEnd> ; col_set_str ( <S2SV_ModStart> ; if ( phdr ) { phdr = & phdr -> phdr ; } if (,0
566,<S2SV_ModStart> ; sh = sds_malloc <S2SV_ModEnd> ( hdrlen +,0
567,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> BYTE a_val ; if (! context ) return FALSE ; <S2SV_ModStart> -> ColorLossLevel ; if (! context -> priv -> PlaneBuffers ) return FALSE ; <S2SV_ModStart> ; } } return TRUE ;,0
568,<S2SV_ModStart> > nr_parens ) { ret = <S2SV_ModEnd> - EINVAL ; <S2SV_ModStart> - EINVAL ; goto out_free ; },0
569,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> RATE_CONTROL * rc <S2SV_ModStart> rc = & ( <S2SV_ModStart> cpi -> rc ) <S2SV_ModStart> target = ( <S2SV_ModEnd> rc -> frames_since_key <S2SV_ModStart> rc -> frames_since_key <S2SV_ModEnd> > INT_MAX ) <S2SV_ModStart> > INT_MAX )? INT_MAX : <S2SV_ModEnd> rc -> frames_since_key <S2SV_ModStart> rc -> frames_since_key <S2SV_ModEnd> ; } target,0
570,"<S2SV_ModStart> TX_MODE read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r )",1
571,"<S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> } # line 1046 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.",0
572,"<S2SV_ModStart> -> cpi ; MACROBLOCK_INFO * const mbmi = & cpi -> mb. plane [ plane ] ; <S2SV_ModStart> args -> tp <S2SV_ModEnd> ; struct macroblock_plane <S2SV_ModStart> & cpi -> <S2SV_ModEnd> plane [ plane <S2SV_ModStart> plane_type ; const TX_SIZE tx_size = p -> tx_size ; const <S2SV_ModStart> = BLOCK_OFFSET ( mbmi <S2SV_ModEnd> -> qcoeff, <S2SV_ModStart> UNCONSTRAINED_NODES ] = cpi <S2SV_ModEnd> -> fc. <S2SV_ModStart>. counts. eob_branch [ tx_size ] [ type ] [ ref ] ; const uint8_t * const band = get_band_translate ( tx_size ) ; const int seg_eob = get_tx_eob ( & cpi -> common. seg, segment_id, tx_size ) ; const int aoff, loff ; txfrm_block_to_raster_xy ( plane_bsize, tx_size, block, & aoff, & loff ) ; pt = get_entropy_context ( tx_size, pd -> above_context, segment_id, tx_size, seg_eob ) ; seg_eob = get_tx_eob ( & cpi",0
573,<S2SV_ModStart> pSelect -> pSrc ; assert ( pWalker -> pParse -> db -> mallocFailed ),0
574,<S2SV_ModStart> users ) ; mutex_lock ( & cb_info -> callback_mutex ) ; <S2SV_ModStart> sv_ops ) ; mutex_unlock ( & cb_info -> callback_mutex ) ;,0
575,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
576,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
577,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
578,"<S2SV_ModStart> { do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> s, 0 )",0
579,"<S2SV_ModStart> ( xIter = xml_first_attr_iter <S2SV_ModEnd> ( xml ) <S2SV_ModStart> ( prop_name, ID_ATTR_NAME <S2SV_ModEnd> ) == 0 <S2SV_ModStart> } else { <S2SV_ModEnd> crm_trace ( ""Cannot <S2SV_blank> add <S2SV_blank> new <S2SV_blank> node <S2SV_blank> %s <S2SV_blank> at <S2SV_blank> %s"" <S2SV_ModStart> ; } } <S2SV_ModEnd> while ( cIter",0
580,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> SvcInternal * get_const_svc_internal <S2SV_ModStart> NULL ; return <S2SV_ModEnd> svc_ctx -> internal,0
581,<S2SV_ModStart> ptr ) ; if ( Z_TYPE_IS_STRING ( * zdata_ptr ) ) { <S2SV_ModStart> ptr ) ; } else { ZVAL_DEREF ( * zdata_ptr ) ; },0
582,"<S2SV_ModStart> only_420 ) { <S2SV_ModEnd> int ret ; <S2SV_ModStart> -> vpx_bps = 24 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt, ""I420"" <S2SV_ModEnd> ) == 0 <S2SV_ModStart> -> chroma_fmt = ""I420"" <S2SV_ModEnd> ; } else <S2SV_ModStart> -> chroma_fmt = ""I420"" <S2SV_ModEnd> ; } else <S2SV_ModStart> -> chroma_fmt = ""I420"" <S2SV_ModEnd> ; } else <S2SV_ModStart> -> chroma_fmt = ""I420"" <S2SV_ModEnd> ; } else <S2SV_ModStart> -> chroma_fmt = ""I420"" <S2SV_ModEnd> ; } else <S2SV_ModStart> -> chroma_fmt = ""I420"" <S2SV_ModEnd> ; } else <S2SV_ModStart> -> chroma_fmt = ""I420"" <S2SV_ModEnd> ; } else <S2SV_ModStart> -> chroma_fmt = ""I420"" <S2SV_ModEnd> ; } else <S2SV_ModStart> -> chroma_fmt = ""I420"" <S2SV_ModEnd> ; } else <S2SV_ModStart> -> chroma_fmt = ""I420"" <S2SV_ModEnd> ; } else <S2SV_ModStart> -> chroma_fmt = ""I420"" <S2SV_ModEnd> ; } else <S2SV_ModStart> -> chroma_fmt = ""I420"" <S2SV_ModEnd> ; } else <S2SV_ModStart> -> chroma_fmt = ""I420"" <S2SV_ModEnd> ; } else <S2SV_ModStart> -> chroma_fmt",0
583,<S2SV_ModStart> buf ; { wizkit_addinv ( <S2SV_ModEnd> readobjnam ( buf <S2SV_ModStart> * ) 0 <S2SV_ModEnd> ) ; },0
584,<S2SV_ModStart> ( ) { <S2SV_ModEnd> if ( read_xattrs_from_disk <S2SV_ModStart> 0 ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> FALSE ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> FALSE ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == FALSE ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == FALSE ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == FALSE ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == FALSE ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == FALSE ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == FALSE ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == FALSE ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == TRUE ; return 1 ;,0
585,"<S2SV_ModStart> rule * rule, u_int flags <S2SV_ModStart> count = 0 ; env -> flags = flags <S2SV_ModStart> ; } } if ( flags & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ]!= NULL ; i ++ ) { struct envnode * node ; const char * e, * eq ; size_t len ; char keybuf [ 1024 ] ; e = strchr ( e, '=' ) ; if ( ( eq = strchr ( e, '=' ) ) == NULL || eq == e ) continue ; if ( len > sizeof ( keybuf ) - 1 ) continue ; memcpy ( keybuf, e + 1, len ) ; node = createnode ( keybuf, eq + 1 ) ; if ( RB_INSERT ( envtree, & env -> root, node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } }",0
586,"<S2SV_ModStart> -> seg ; vpx_clear_system_state <S2SV_ModEnd> ( ) ; <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> -> base_qindex, cpi -> in_frame_q_adj_ratio <S2SV_ModEnd> [ segment ] <S2SV_ModStart> ; } } vpx_memset ( cpi -> segmentation_map, 0, cm -> mi_rows * cm -> mi_cols ) ; vpx_memset ( cpi -> complexity_map, 0, cm -> mi_rows * cm -> mi_cols ) ; vp9_enable_segmentation ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vp9_disable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> frame_type, cm -> base_qindex, cm -> in_frame_q_adj_ratio [ segment ] ) ; vp9_enable_segfeature ( seg, segment, SEG_LVL_ALT_Q ) ; vp9_set_seg",0
587,"<S2SV_ModStart> = make_type ( ""module"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""module"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""interactive"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""expression"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""suite"" <S2SV_ModEnd>, mod_type, <S2SV_ModStart> = make_type ( ""functiondef"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""asyncfunctiondef"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""classdef"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""return"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""delete"" <S2SV_ModEnd>, stmt_type, <S2SV_ModStart> = make_type ( ""assign"" <S2SV_ModEnd>, stmt_type,",0
588,<S2SV_ModStart> } logfile_fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> S_IWGRP | S_IROTH ) <S2SV_ModStart> return ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart> 16 ) ) ),0
589,<S2SV_ModStart> ; } # else ( void ) cpi ; #,1
590,"<S2SV_ModStart> cinput ) { <S2SV_ModEnd> char * s <S2SV_ModStart>, * StartClean <S2SV_ModEnd> ; SetDefaults ( <S2SV_ModStart> t ++ ; <S2SV_ModEnd> if ( * <S2SV_ModStart> = 1 ; <S2SV_ModEnd> fprintf ( outfile <S2SV_ModStart> ( outfile, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.\\n"" <S2SV_ModEnd>, VERSION, <S2SV_ModStart> SUBVERSION ) ; <S2SV_ModEnd> return ( 0 <S2SV_ModStart> ) ) { <S2SV_ModEnd> ReadArray ( t <S2SV_ModStart> & num2 ) ; <S2SV_ModEnd> fprintf ( stderr <S2SV_ModStart> ( stderr, ""%s: <S2SV_blank> Command <S2SV_blank> %s <S2SV_blank> should <S2SV_blank> have <S2SV_blank> no <S2SV_blank> arguments\\n"", axohelp, nameobject <S2SV_ModEnd> ) ; return <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
591,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lower, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) goto failed ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { lower = NULL ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_upper, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) goto failed ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { upper = NULL ; } if ( lookup_attr_id ( obj, & PyId_step, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) goto failed ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { step = NULL ; } * out = Slice ( lower, upper, step, are",0
592,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
593,"<S2SV_ModStart> extack ) ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; return - EOPNOTSUPP ; } <S2SV_ModEnd> tos_off = proto <S2SV_ModStart> ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; return - EOPNOTSUPP <S2SV_ModEnd> ; } } <S2SV_ModStart>! match ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; return - EOPNOTSUPP ; } <S2SV_ModEnd> list_add ( & <S2SV_ModStart> knode ) ; kfree ( match ) ;",0
594,<S2SV_ModStart> ) ; } if ( stream -> config. cfg. g_pass!= VPX_RC_ONE_PASS ) { <S2SV_ModStart> : VPX_RC_ONE_PASS ; } else { stream -> config. cfg. g_pass = VPX_RC_LAST_PASS ; } <S2SV_ModStart> ( pass ) { <S2SV_ModStart> stats ) ; },0
595,"<S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( old_exec, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( new_exec, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( old_exec, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( new_exec,",0
596,<S2SV_ModStart> data_end ) { const <S2SV_ModStart> end = NULL <S2SV_ModEnd> ; assert ( <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> aligned_cols ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> aligned_cols ) ; memset <S2SV_ModEnd> ( cm ->,0
597,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> * vp9_decoder_create ( <S2SV_ModEnd> VP9D_CONFIG * oxcf <S2SV_ModStart> ovcf ) { VP9Decoder * const pbi = vpx_memalign ( 32, sizeof ( * pbi ) ) ; VP9_COMMON * const cm = pbi? & pbi -> common : NULL ; if (! cm ) return NULL ; vpx_zero ( * pbi ) ; if ( setjmp ( cm -> error. jmp ) ) { cm -> error. setjmp = 0 ; vp9_decoder_remove ( pbi ) ; return NULL ; } cm -> error. setjmp = 1 ; vpx_initialize_dec ( ) ; vpx_rtcd ( ) ; vpx_memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_video_frame = 0 ; pbi -> oxcf = * oxcf ; pbi -> ready_for_new_data = 1 ; pbi -> decoded_key_frame = 0 ; vp9_",0
598,"<S2SV_ModStart>, GF_LOG_CONTAINER, <S2SV_ModEnd> ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) <S2SV_ModStart> GF_ISOM_BOX_TYPE_DREF ) ; if (! ( ( GF_DataInformationBox * ) s ) -> dref ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
599,<S2SV_ModStart> req ) { <S2SV_ModEnd> struct inet_request_sock * <S2SV_ModStart> req ) ; <S2SV_ModEnd> cipso_v4_delopt ( &,0
600,"<S2SV_ModStart> tokens, const vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> do { const vpx_tree_index <S2SV_ModEnd> j = tree",1
601,"<S2SV_ModStart> ( img ) { <S2SV_ModStart> img ) ; if ( res!= VPX_CODEC_OK ) { ctx -> base. err_detail = ""Invalid <S2SV_blank> image."" ; return res ; } }",0
602,"<S2SV_ModStart> { ret = get_tag_ext <S2SV_ModEnd> ( asn1, <S2SV_ModStart>, & len, & t, & contents, & clen",0
603,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
604,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int64_t <S2SV_ModEnd> frame_max_bits ( const <S2SV_ModStart> ovcf ) { int64_t <S2SV_ModEnd> max_bits = ( <S2SV_ModStart> max_bits = ( <S2SV_ModEnd> rc -> av_per_frame_bandwidth,0
605,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
606,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_superblock ( VP9_COMP <S2SV_ModStart>, BLOCK_SIZE bsize, PICK_MODE_CONTEXT * ctx <S2SV_ModStart> x = & ctx <S2SV_ModEnd> -> mb ; <S2SV_ModStart> -> mbmi ; <S2SV_ModEnd> const int mis <S2SV_ModStart>. allow_skip_recode ; <S2SV_ModEnd> x -> skip_encode <S2SV_ModStart> ) return ; set_ref_ptrs ( cm, xd, mbmi -> ref_frame [ 0 ], mbmi -> ref_frame [ 1 ], mbmi -> ref_frame [ 2 ] ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be <S2SV_ModStart> psf -> header. be,0
608,"<S2SV_ModStart> range_max ) { int bits_left, bits_left ; <S2SV_ModStart> position, zeroes <S2SV_ModEnd> ; char bits <S2SV_ModStart> gbc ) ; bits_left = 0 ; bits_left = <S2SV_ModEnd> get_bits_left ( gbc <S2SV_ModStart> ( gbc ) ; if ( bits_left < 0 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( bits_left < bits_left <S2SV_ModEnd> ) { av_log <S2SV_ModStart> } if ( bits_left < bits_left ) bits_left = bits_left ; if ( bits_left < bits_left + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( bits_left < bits_left + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%",0
609,"<S2SV_ModStart> || strchr ( ""!#$%&\'*+-.^_`|^"" <S2SV_ModEnd>, c ) <S2SV_ModStart> || strchr ( ""!#$%&\'*+-.^_`|^"" <S2SV_ModEnd>, c ) <S2SV_ModStart> || strchr ( ""!#$%&\'*+-.^_`|^"" <S2SV_ModEnd>, c )",0
610,"<S2SV_ModStart>, packet -> http_headers. ptr = NULL, packet -> http_headers. len = 0, packet ->",0
611,"<S2SV_ModStart> { q = QueueAuthenticPixels_internal <S2SV_ModEnd> ( image, <S2SV_ModStart> x ), Max <S2SV_ModEnd> ( 4, <S2SV_ModStart> y ), 0, <S2SV_ModStart> ; } } SkipDXTMipmaps_internal <S2SV_ModEnd> ( image,",0
612,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL ) <S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL )",1
613,<S2SV_ModStart> action ) { if ( w < 0 ) w = 0 ; if ( h < 0 ) h = 0 ; if ( w > 1 ) w = 1 ; if ( h > 1 ) h = 1 ; if ( w < 0 ) w = 0 ; if ( h < 0 ) h = 0 ; if ( w > 1 ) w = 1 ; if ( h > 1 ) h = 1 ; if ( w > 1 ) w = 0 ; if ( h > 1 ) h = 1 ; if ( w > 0 ) w = 0 ; if ( h > 0 ) h = 0 ; if ( w > 1 ) w = 1 ; if ( h > 1 ) h = 1 ; if ( w > 0 ) w = 0 ; if ( h > 0 ) h = 0 ; if ( h > 1 ) h = 1 ; if ( w > 1 ) w = 0 ; if ( h > 1 ) h = 0 ; if ( w > 1 ) w = 0 ; if ( h > 0 ) w = 0 ; if ( h > 0 ) w = 0 ; if ( h > 0 ) h = 0 ; if ( w > 1 ) w = 0 ; if ( h > 0 ) w = 0 ;,0
614,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; printf ( outputbuffer ) ;",0
615,"<S2SV_ModStart> ( AUTODETECT_TAG, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU\\n"" <S2SV_ModEnd> ) ; Stream_Read_UINT32",0
616,<S2SV_ModStart> ; # endif # if CONFIG_REALTIME_ONLY & CONFIG_ONTHEFLY_BITPACKING ) if ( cpi -> b_multi_threaded == 0 ) cm -> mb_cols = cpi -> common. mb_cols ; # endif,0
617,<S2SV_ModStart> -> b_multithreaded_rd ) { <S2SV_ModStart> mb_rows ) ; },0
618,<S2SV_ModStart> { if ( ( <S2SV_ModStart> xWantedSize > 0 ) && ( ( xWantedSize + xHeapStructSize ) > xFreeBytesRemaining ) <S2SV_ModStart> portBYTE_ALIGNMENT_MASK ) ) ; } else { mtCOVERAGE_TEST_MARKER ( ) ; } } else { mtCOVERAGE_TEST_MARKER ( ) ; } if ( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) ) { pxPreviousBlock = & xStart ; pxBlock = xStart. pxNextFreeBlock ; while ( ( pxBlock -> xBlockSize < xWantedSize ) && ( pxBlock -> pxNextFreeBlock!= NULL ) ) { pxPreviousBlock = pxBlock ; pxBlock = pxBlock -> pxNextFreeBlock ; } if ( pxBlock!= pxEnd ) { pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock -> pxNextFreeBlock ) + xHeapStructSize ) ; pxPreviousBlock -> pxNextFreeBlock = pxBlock -> pxNextFreeBlock ; if ( ( pxBlock -> xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE ) { pxNewBlock,0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,"<S2SV_ModStart> s ) { <S2SV_ModEnd> uint16 left, <S2SV_ModStart>, Debug, ""%s()\\n"" <S2SV_ModEnd>, __func__ ) <S2SV_ModStart> ++ ) { in_uint8s ( s, 2 ) ; in_uint16_le ( s, size ) ; ui_paint_bitmap ( left, top, cx, cy, width, height, bmpdata ) ; xfree ( bmpdata ) ; continue ; } if ( compress & 0x400 ) { size = bufsize ; } else { size = bufsize ; } ui_paint_bitmap ( left, top, cx, cy, width, height, bmpdata ) ; xfree ( bmpdata ) ; continue ; } if ( compress & 0x400 ) { size = bufsize ; } else { size = size ; } if ( compress & 0x400 ) { size = bufsize ; } else { size = size ; } ui_paint_bitmap ( left, top, cx, cy, width, height, bmpdata ) ; xfree ( bmpdata ) ; xfree ( bmpdata ) ; continue ; } if ( compress & 0x400 ) { size = bufsize ; } else { size =",0
621,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
622,"<S2SV_ModStart> TX_SIZE tx_size, vpx_coeff_stats <S2SV_ModEnd> * coef_branch_ct ) <S2SV_ModStart> coef_branch_ct ) { vpx_coeff_probs_model <S2SV_ModEnd> * coef_probs = <S2SV_ModStart> tx_size ] ; vpx_coeff_count <S2SV_ModEnd> * coef_counts =",0
623,"<S2SV_ModStart> { } ; if (! access_ok ( VERIFY_READ, fd, F_OK ) ) return - EBADF <S2SV_ModEnd> ; r =",0
624,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static void <S2SV_ModEnd> su3000_frontend_attach ( struct <S2SV_ModStart> dvb_usb_adapter * d, struct dvb_frontend_state * state <S2SV_ModStart> 0 } ; int ret ; ret = dvb_usb_generic_rw ( d -> dev, obuf, 3, ibuf, 1, 0 ) ; if ( ret <S2SV_ModEnd> < 0 ) <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; ret = dvb_usb_generic_rw ( d -> dev, obuf, 3, ibuf, 1, 0 ) ; if ( ret <S2SV_ModEnd> < 0 ) <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; ret = dvb_usb_generic_rw ( d -> dev, obuf, 3, ibuf, 1, 0 ) ; if ( ret <S2SV_ModEnd> < 0 ) <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; ret = dvb_usb_generic_rw ( d -> dev, obuf, 3, ibuf, 1, 0 ) ; if ( ret <S2SV_ModEnd> < 0 ) <S2SV_ModStart> ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; ret",0
625,"<S2SV_ModStart>, vpx_codec_enc_cfg_t * enc_cfg <S2SV_ModEnd>, vpx_codec_flags_t flags <S2SV_ModStart> ( ( flags & ( VPX_CODEC_USE_XMA | VPX_CODEC_USE_PSNR | VPX_CODEC_USE_OUTPUT_PARTITION ) ) &&! enc_cfg ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( enc_cfg <S2SV_ModEnd> -> caps & <S2SV_ModStart> -> priv ) enc_cfg <S2SV_ModEnd> -> iface =",0
626,"<S2SV_ModStart> int stride, vpx_bit_depth_t bit_depth <S2SV_ModEnd>, int mv_row <S2SV_ModStart> const kernel = vpx_get_interp_kernel <S2SV_ModEnd> ( xd -> <S2SV_ModStart> MV_PRECISION_Q3 ; } vpx_build_inter_predictor <S2SV_ModEnd> ( y_mb_ptr, <S2SV_ModStart> y ) ; vpx_build_inter_predictor <S2SV_ModEnd> ( u_mb_ptr, <S2SV_ModStart> y ) ; vpx_build_inter_predictor <S2SV_ModEnd> ( v_mb_ptr, <S2SV_ModStart> y ) ; vpx_build_inter_predictor <S2SV_ModEnd> ( v_mb_ptr,",0
627,"<S2SV_ModStart> = TRUE ; if ( strlen ( origbuf ) >= 4 ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; }",0
628,"<S2SV_ModStart> * numbers, size_t <S2SV_ModEnd> count ) { <S2SV_ModStart> count ) { size_t <S2SV_ModEnd> i ; cJSON <S2SV_ModStart> 0 ; a <S2SV_ModEnd> ; ++ i <S2SV_ModStart> i ) { if ( numbers [ i ] == 0.0 ) { cJSON_Delete ( a ) ; return 0 ; }",0
629,"<S2SV_ModStart> data_end ) { const <S2SV_ModStart> int num_workers = vpx_min <S2SV_ModEnd> ( pbi -> <S2SV_ModStart> pbi -> common. max_threads, tile_cols ) ; const TileBuffer tile_buffers [ 1 << 6 ] ; int n ; int final_worker = - 1 ; assert ( tile_cols <= ( 1 << 6 ) ) ; assert ( tile_rows == 1 ) ; ( void ) tile_rows ; if ( pbi -> num_tile_workers == 0 ) { const int num_threads = pbi -> oxcf. max_threads & ~ 1 ; int i ; CHECK_MEM_ERROR ( cm, pbi -> tile_workers, vpx_malloc ( num_threads * sizeof ( * pbi -> tile_workers ) ) ) ; for ( i = 0 ; i < num_threads ; ++ i ) { VP9Worker * const worker = & pbi -> tile_workers [ i ] ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data2, vpx_malloc ( sizeof ( TileInfo ) )",0
630,"<S2SV_ModStart> = base + ( int ) <S2SV_ModStart> ( ) + ( int ) <S2SV_ModStart> case 0x505244 : if (! strncasecmp ( model, ""DSLR-A100"", 9 ) ) { fseek ( ifp, 8, SEEK_CUR ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 0 ] = get2 ( ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 2 ] = get2 ( ) ; } <S2SV_ModStart> case 0x524946 : if (! strncasecmp ( model, ""DSLR-A100"", 9 ) ) { fseek ( ifp, 8, SEEK_CUR ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 0 ] = get2 ( ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 1 ] = get2 ( ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 2 ] =",0
631,"<S2SV_ModStart> -> common ; VP9_COMP * rc = & cpi -> rc ; <S2SV_ModStart> = SEGMENT_DELTADATA ; vpx_clear_system_state <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ++ ) { vpx_set_segdata <S2SV_ModEnd> ( seg, <S2SV_ModStart> i ), SEGMENT_ID_ALT_Q <S2SV_ModEnd>, qindex_delta ) <S2SV_ModStart> i ), SEGMENT_ID_ALT_Q <S2SV_ModEnd> ) ; vpx_enable_segfeature <S2SV_ModStart> i ), SEGMENT_ID_ALT_Q <S2SV_ModEnd> ) ; RDMULT_RATIO",0
632,"<S2SV_ModStart> -> error_code ) memcpy ( & <S2SV_ModStart> ctx -> base, error, sizeof ( ctx -> base ) ) <S2SV_ModEnd> ; return error",0
633,"<S2SV_ModStart>, * ps_cur_poc ; if (! ps_dec -> s_cab_dec_env. pv_codec_handle ) return",0
634,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet ),0
635,<S2SV_ModStart> <S2SV_null> <S2SV_null> static long <S2SV_ModEnd> getnum ( const <S2SV_ModStart> int getnum ( <S2SV_ModEnd> char * * <S2SV_ModStart> int df ) <S2SV_ModEnd> { int a <S2SV_ModStart> = 0 ; while ( isdigit ( * * fmt ) ) <S2SV_ModEnd> { a = <S2SV_ModStart> '0' ; } <S2SV_ModEnd> return a ;,0
636,<S2SV_ModStart> GCSpropagate ) ; g -> gcstate = GCSdestroyed ;,0
637,<S2SV_ModStart> 0 ; else { ret = <S2SV_ModEnd> - EIO ; <S2SV_ModStart> - EIO ; goto err ; },0
638,"<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } <S2SV_ModEnd> memset ( buffer <S2SV_ModStart> buffer ) ; <S2SV_ModEnd> s_write ( c",0
639,"<S2SV_ModStart> remote_connection_s * connection, const char * server ) { <S2SV_ModEnd> int rc = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> int ret_ga ; <S2SV_ModStart> = NULL ; connection -> socket = 0 ; connection -> session = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } bzero ( & hints, sizeof ( struct addrinfo ) ) ; hints. ai_flags = AI_CANONNAME ; hints. ai_family = AF_INET ; hints. ai_socktype = SOCK_RAW ; if ( hints. ai_family == AF_INET6 ) { hints. ai_protocol = IPPROTO_ICMPV6 ; } else { hints. ai_protocol = IPPROTO_ICMP ; } crm_debug ( ""Looking <S2SV_blank> up <S2SV_blank> %s"", server ) ; ret_ga = getaddrinfo ( server, NULL, & hints, & res ) ; if ( ret_ga ) { crm_err ( ""getaddrinfo: <S2SV_blank> %s"", gai_strerror (",0
640,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi ->",0
641,"<S2SV_ModStart> ) ) ; if ( ndo -> ndo_vflag ) { ND_TCHECK ( bp [ 26 ] ) ; ND_TCHECK2 ( bp [ 26 ], sizeof ( struct icmp6_hdr ) ) ; ND_TCHECK ( icp -> icmp6_data8 [ 0 ] ) ; ND_TCHECK ( icp -> icmp6_data8 [ 1 ] ) ; ND_TCHECK ( icp -> icmp6_data8 [ 2 ] ) ; ND_TCHECK ( icp -> icmp6_data8 [ 3 ] ) ; ND_TCHECK ( icp -> icmp6_data8 [ 4 ] ) ; ND_TCHECK ( icp -> icmp6_data8 [ 5 ] ) ; ND_TCHECK ( icp -> icmp6_data8 [ 6 ] ) ; ND_TCHECK ( icp -> icmp6_data8 [ 7 ] ) ; ND_TCHECK ( icp -> icmp6_data8 [ 8 ] ) ; ND_TCHECK ( icp -> icmp6_data8 [ 9 ] ) ;",0
642,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command",0
643,"<S2SV_ModStart> Image * image <S2SV_ModEnd> ; register IndexPacket <S2SV_ModStart> length, padding <S2SV_ModEnd>, version, <S2SV_ModStart> version, width ; size_t data_size <S2SV_ModStart> ) break ; data_size = 0 ; <S2SV_ModStart> ) break ; data_size = 0 ; <S2SV_ModStart> ) break ; data_size += bytes_per_line ; <S2SV_ModStart> ) break ; data_size += bytes_per_line ; <S2SV_ModStart> ) break ; data_size += bytes_per_line ; <S2SV_ModStart> ) break ; data_size += bytes_per_line ; <S2SV_ModStart> ) break ; data_size += bytes_per_line ; <S2SV_ModStart> ) break ; data_size += bytes_per_line ; <S2SV_ModStart> ) break ; data_size += bytes_per_line ; <S2SV_ModStart> ) break ; data_size += bytes_per_line ; <S2SV_ModStart> ) break ; data_size += bytes_per_line ; <S2SV_ModStart> ) break ; data_size += bytes_per_line ; <S2SV_ModStart> ) break ; data_size += bytes_per_line ; <S2SV_ModStart> ) break ; data_size += bytes_per_line ; <S2SV_ModStart> ) break ; data_size += bytes_per_line ; <S2SV_ModStart> ) break ; data_size += bytes_per_line ; <S2SV_ModStart> ) break ; data_size += bytes_",0
644,"<S2SV_ModStart> ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> packet <S2SV_blank> header\\n"" ) ; return - 1 ; } if (! ( qcc = jpc_enc_qcc_create ( qcc ) ) ) { jas_eprintf ( ""cannot <S2SV_blank> create <S2SV_blank> qcc\\n"" ) ; return - 1 ; } if (! ( qcd = jpc_enc_qcd_create ( qcc ) ) ) { jas_eprintf ( ""cannot <S2SV_blank> create <S2SV_blank> qcd\\n"" ) ; return - 1 ; } if (! ( qcd = jpc_enc_qcd_create ( qcc ) ) ) { jas_eprintf ( ""cannot <S2SV_blank> create <S2SV_blank> qcd\\n"" ) ; return - 1 ; } if (! ( qcd = jpc_enc_qcd_create ( qcc ) ) ) { jas_eprintf ( ""cannot <S2SV_blank> create <S2SV_blank> qcd\\n"" ) ; return - 1 ; } if (! ( qcd = jpc_enc_qcd_create ( qcc ) ) ) { jas_eprintf ( ""cannot <S2SV_blank> create <S2SV_blank> qcd\\n"" ) ; return",0
645,<S2SV_ModStart> ) ; } if (! new_modes ||! new_args ) { free ( str_modes ) ; free ( new_args ) ; return ; },0
646,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> - m + vpx_read_bit <S2SV_ModEnd> ( r )",1
647,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
648,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> REFERENCE_MODE mode = vpx_read <S2SV_ModEnd> ( r,",0
649,"<S2SV_ModStart>! stream ) { <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; } <S2SV_ModStart> stereo_fmt = STEREO_FORMAT_MONO <S2SV_ModEnd> ; # if",0
650,"<S2SV_ModStart> nd_opt_len ) ; if ( op -> nd_opt_len < 4 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u), <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""unknown"", op -> nd_opt_type ), op -> nd_opt_len, 4 ) ) ; goto trunc ; }",0
651,<S2SV_ModStart> -> root_node = ( yr_re_node * ),0
652,"<S2SV_ModStart> ) ) ; if (! iter -> var_expand_table ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s"", key -> key -> key -> key ) ; return - 1 ; } <S2SV_ModStart> if ( ret < <S2SV_ModEnd> 0 ) { <S2SV_ModStart>, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key -> key, error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> = <S2SV_blank> %s"", str_c ( path ), key -> value ) ; } else if ( ret < 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> lookup <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", str_c ( path ),",0
653,<S2SV_ModStart> -> level = 1 <S2SV_ModEnd> ; tok ->,0
654,<S2SV_ModStart> maxBitrate ; } av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo = NULL ;,0
655,"<S2SV_ModStart> ASSERT ( dpbSize ) ; memset ( dpb, 0, sizeof ( dpbStorage_t )",0
656,"<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> (! sock ||! addr <S2SV_ModStart> ( addrlen ) { <S2SV_ModStart> * addrlen ; addrlen_out = * addrlen ; } <S2SV_ModStart>, addrlen_in, & addrlen_out <S2SV_ModEnd> )!= OE_OK <S2SV_ModStart> ) ; } * addrlen = addrlen_out ;",0
657,,1
658,"<S2SV_ModStart> FALSE ; } if (! <S2SV_ModStart>, s ) ) return FALSE",1
659,<S2SV_ModStart> ipv6_pinfo * np <S2SV_ModEnd> ; struct ipv6_txoptions <S2SV_ModStart> flowi6_mark ; } np = inet6_sk ( sk ) ;,0
660,"<S2SV_ModStart> ; unsigned int <S2SV_ModEnd> found, upx_success <S2SV_ModStart> size_t fsize ; size_t <S2SV_ModEnd> valign, falign <S2SV_ModStart>, j ; size_t <S2SV_ModEnd> ssize = 0 <S2SV_ModStart> size_t hdr_size ; size_t <S2SV_ModEnd> j ; struct <S2SV_ModStart> j ) ; if ( j > sizeof ( struct cli_exe_section ) ) { cli_err ( ""cli_scanpe: <S2SV_blank> size <S2SV_blank> of <S2SV_blank> exe_sections <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large\\n"" ) ; return CL_ENULLARG ; }",0
661,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR <S2SV_ModEnd>, EPCR_EPOS | <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR <S2SV_ModEnd> ) & EPCR_ERRE <S2SV_ModStart> } dm9000WriteReg ( DM9000_EPCR <S2SV_ModEnd>, EPCR_EPOS ) <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPDRH <S2SV_ModEnd> ) << 8 <S2SV_ModStart> | dm9000ReadReg ( DM9000_EPDRL <S2SV_ModEnd> ) ; }",0
662,"<S2SV_ModStart> cib, & <S2SV_ModEnd> private -> command <S2SV_ModStart> private -> command <S2SV_ModEnd> ) ; } <S2SV_ModStart> cib, & <S2SV_ModEnd> private -> callback <S2SV_ModStart> private -> callback <S2SV_ModEnd> ) ; } <S2SV_ModStart> pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> callback. token, CRM_OP_REGISTER, NULL, NULL, NULL, 0, NULL ) ; crm_xml_add ( hello, F_CIB_CLIENTNAME, name ) ; crm_send_remote_msg ( private -> command. session, hello, private -> command. encrypted ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { fprintf ( stderr, ""%s: <S2SV_blank> Opened <S2SV_blank> connection <S2SV_blank> to <S2SV_blank> %s:%d\\n"", name, private -> server, private -> port ) ; cib -> state = cib_connected_command ; cib -> type = cib_command ; } else { fprintf ( stderr, ""%s: <S2SV_blank> Connection <S2SV_blank> to <S2SV_blank> %s:%d <S2SV_blank> failed: <S2SV_blank> %s\\n"", name, private -> server, private -> port, pcmk_ok ) ; } if ( rc == pcmk_ok ) {",0
663,"<S2SV_ModStart> = ubuf ; memset ( & address, 0, sizeof ( address ) ) ;",0
664,"<S2SV_ModStart> num00, tmp_err = 0, n = 0, sr = 0 ; int step_param = 3 ; int further_steps = ( MAX_MVSEARCH_STEPS - 1 ) - step_param ; const BLOCK_SIZE bsize = xd -> mi [ 0 ] -> mbmi. sb_type ; vp9_variance_fn_ptr_t v_fn_ptr = cpi -> fn_ptr [ bsize ] ; int new_mv_mode_penalty = MIN ( cpi -> common. width, cpi -> common. height ) <S2SV_ModEnd> ; const int <S2SV_ModStart> int quart_frm = <S2SV_ModEnd> cpi -> common <S2SV_ModStart> common. height <S2SV_ModEnd> ; while ( <S2SV_ModStart> bsize ) ; if ( v_fn_ptr. vf!= get_block_variance_fn ( bsize ) ) { tmp_err = cpi -> diamond_search_sad ( x, & ref_mv_full, & tmp_mv, step_param, x -> sadperbit16, & num00, & v_fn_ptr, x -> nmvjointcost, x -> mvcost, ref_mv ) ; if ( tmp_err < INT_",0
665,<S2SV_ModStart> ) ) ; if ( h -> addr == MAP_FAILED ) { free ( h ) ; goto error ; },0
666,<S2SV_ModStart> ) ; } if ( child -> is_default_dir == NOT_SET ) { if ( parent -> is_default_dir == NOT_SET ) { if ( parent -> is_default_dir == NOT_SET ) { if ( parent -> is_default_dir == NOT_SET ) { if ( parent -> is_default_dir == NOT_SET ) { if ( parent -> is_default_dir == NOT_SET ) { if ( parent -> is_default_dir == NOT_SET ) { if ( parent -> is_default_dir == NOT_SET ) { if ( parent -> is_default_dir == NOT_SET ) { if ( parent -> is_default_dir == NOT_SET ) { if ( parent -> is_default_dir == NOT_SET ) { if ( parent -> is_default_dir == NOT_SET ) { if ( parent -> is_default_dir == NOT_SET ) { if ( parent -> is_default_dir == NOT_SET ) { if ( parent -> is_default_dir == NOT_SET ) { if ( parent -> is_default_dir == NOT_SET ) { if ( parent -> is_default_dir ==,0
667,"<S2SV_ModStart>, one, <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_planes ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
668,<S2SV_ModStart> ( r = <S2SV_ModEnd> sshbuf_put_cstring ( b,1
669,"<S2SV_ModStart>, & ovalue ) ; if (! option ) continue ; if (! ovalue ) continue ; if (! ovalue ) continue ; if (! ovalue [ 0 ] ) continue ; if (! ovalue [ 1 ] ) continue ; if (! ovalue [ 0 ] ) continue ; if (! ovalue [ 1 ] ) continue ; if (! ovalue [ 2 ] ) continue ; if (! ovalue [ 3 ] ) continue ; if (! ovalue [ 3 ] ) continue ; if (! ovalue [ 3 ] ) continue ; if (! ovalue [ 2 ] ) continue ; if (! ovalue [ 3 ] ) continue ; if (! ovalue [ 3 ] ) continue ; if (! ovalue [ 3 ] ) continue ; if (! ovalue [ 3 ] ) continue ; if (! ovalue [ 3 ] ) continue",0
670,"<S2SV_ModStart> cib_client_t * client ; client = ( cib_client_t * ) user_data ; crm_trace ( ""Cleaning <S2SV_blank> up <S2SV_blank> after <S2SV_blank> client <S2SV_blank> disconnect: <S2SV_blank> %s/%s"", crm_str ( client -> name ), client -> id ) ; if ( client -> id!= NULL ) { if (! g_hash_table_remove ( client_list, client -> id ) ) { crm_err ( ""Client <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> the <S2SV_blank> hashtable"", client -> name ) ; } } crm_trace ( ""Destroying <S2SV_blank> %s <S2SV_blank> (%p)"", client -> name, user_data ) ; num_clients -- ; crm_trace ( ""Num <S2SV_blank> unfree\'d <S2SV_blank> clients: <S2SV_blank> %d"", num_clients ) ; free ( client -> name ) ; free ( client -> callback_id ) ; free ( client -> id ) ; free ( client -> user ) ; free ( client ) ; crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client"" ) ; if ( cib_shutdown_flag ) { cib_shutdown ( 0 ) ; } return ; }",0
671,"<S2SV_ModStart> * uv ; if ( iswhite ( thread ) ) markvalue ( g, thread -> v ) ; <S2SV_ModStart> next ) { <S2SV_ModEnd> if (!",0
