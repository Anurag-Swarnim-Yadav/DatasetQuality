,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
1,"<S2SV_ModStart> skb ) ; unfrag_ip6hlen = min_t ( int, unfrag_ip6hlen, skb -> len - offset ) ;",0
2,"<S2SV_ModStart>, 0 ) ; if ( writer -> stco ) gf_isom_box_del ( writer -> stco ) ; if ( writer -> stsc ) gf_isom_box_del ( writer -> stsc )",0
3,<S2SV_ModStart> c = array? array -> child : NULL <S2SV_ModEnd> ; while ( <S2SV_ModStart> while ( c ) { if ( <S2SV_ModEnd> item > 0 <S2SV_ModStart> > 0 ) return c ; <S2SV_ModEnd> c = c <S2SV_ModStart> -> next ; <S2SV_ModEnd> return c ;,0
4,"<S2SV_ModStart> u64 nr, <S2SV_ModEnd> struct pt_regs * <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",1
5,"<S2SV_ModStart> EXT4_EXTENTS_FLAG ) { struct grub_ext4_extent_header leaf ; struct grub_ext4_extent * ext ; int i ; leaf = grub_ext4_find_leaf ( data, inode -> blocks. dir_blocks, fileblock ) ; if (! leaf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) ( leaf + 1 ) ; for ( i = 0 ; i < grub_le_to_cpu16 ( leaf -> entries ) ; i ++ ) { if ( fileblock < grub_le_to_cpu32 ( ext [ i ]. block ) ) break ; } if ( -- i >= 0 ) { fileblock -= grub_le_to_cpu32 ( ext [ i ]. block ) ; if ( fileblock >= grub_le_to_cpu16 ( ext [ i ]. len ) ) return 0 ; else { grub_disk_addr_t start ; start = grub_le_to_cpu16 ( ext [ i ]. start_hi",0
6,"<S2SV_ModStart> fdct16 ( const tran_low_t <S2SV_ModEnd> * in [ <S2SV_ModStart> 16 ], tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> ] ) { tran_high_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step2 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step3 [ 8 <S2SV_ModStart> 8 ] ; tran_low_t input [ 8 ] ; tran_high_t <S2SV_ModEnd> temp1, temp2 <S2SV_ModStart> ] ; { tran_low_t <S2SV_ModEnd> s0, s1 <S2SV_ModStart>, s7 ; tran_high_t <S2SV_ModEnd> t0, t1 <S2SV_ModStart>, t2, t3 ; tran_high_t <S2SV_ModEnd> x0, x1",0
7,"<S2SV_ModStart> ( ) ; # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; # endif parse_ciff ( save + hlen, len - hlen, 0 ) ; } if ( parse_tiff ( save + 6 ) ) apply_tiff ( ) ; fseek ( ifp, save + len, SEEK_SET ) ; } return 1 <S2SV_ModEnd> ; } <S2SV_null>",0
8,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> search_filter_level ( const <S2SV_ModStart> void search_filter_level ( VP9_COMMON * const cm, struct loopfilter * lf, YV12_BUFFER_CONFIG * sd <S2SV_ModEnd>, int partial_frame <S2SV_ModStart> partial_frame ) { <S2SV_ModEnd> const int min_filter_level <S2SV_ModStart> ) ; int best_err ; int filt_best ; int filt_direction <S2SV_ModEnd> ; int filt_mid <S2SV_ModStart> / 4 ; <S2SV_ModEnd> while ( filter_step <S2SV_ModStart> min_filter_level ) ; <S2SV_ModEnd> int bias = <S2SV_ModStart> * filter_step ; int filt_err ; if ( cpi -> twopass. section_intra_rating < 20 ) bias = ( best_err >> ( 15 - ( filt_mid / 8 ) ) ) * filter_step ; if ( cm -> tx_mode!= ONLY_4X4 ) bias >>= 1 ; if ( filt_direction <= 0 && filt_low!= filt_mid ) { if ( ss_err [ filt_low ] < 0 ) { filt_err = try_filter_frame ( sd, cpi, filt_low, partial_frame ) ; ss_err [ filt",0
9,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
10,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ++ i ) vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( usehp ) vpx_write <S2SV_ModEnd> ( w,",1
11,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } else { <S2SV_ModEnd> request -> rxBlockSzx <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; },0
12,"<S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( length < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; }",0
13,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> construct_get_dest_keyring ( struct <S2SV_ModStart> * authkey ; int ret ; <S2SV_ModStart> dest_keyring ) ; ret = key_read_state ( dest_keyring, & dest_keyring -> state ) ; if ( ret < 0 ) { key_put ( dest_keyring ) ; * _dest_keyring = NULL ; return ret ; } <S2SV_ModStart> ( dest_keyring ) { ret = key_read_state ( dest_keyring, & dest_keyring -> state ) ; if ( ret < 0 ) { key_put ( dest_keyring ) ; * _dest_keyring = NULL ; return ret ; } break ; } <S2SV_ModEnd> } case KEY_REQKEY_DEFL_THREAD_KEYRING <S2SV_ModStart> ( dest_keyring ) { ret = key_read_state ( dest_keyring, & dest_keyring -> state ) ; if ( ret < 0 ) { key_put ( dest_keyring ) ; return ret ; } break ; } <S2SV_ModEnd> case KEY_REQKEY_DEFL_PROCESS_KEYRING : <S2SV_ModStart> ) ; } * _dest_keyring",0
14,"<S2SV_ModStart> = create_spnego_ctx ( ) ; if ( sc == NULL ) return GSS_S_FAILURE ; ret = get_negotiable_mechs ( minor_status, spcred, GSS_C_INITIATE, & sc -> mech_set ) ; if ( ret!= GSS_S_COMPLETE ) goto cleanup ; sc -> internal_mech = & sc -> mech_set -> elements [ 0 ] ; if ( put_mech_set ( sc -> mech_set, & sc -> DER_mechTypes ) < 0 ) { ret = GSS_S_FAILURE ; goto cleanup ; } sc -> ctx_handle = GSS_C_NO_CONTEXT ; * ctx = ( gss_ctx_id_t ) sc ; sc = NULL ; * tokflag = INIT_TOKEN_SEND ; ret = GSS_S_CONTINUE_NEEDED ; cleanup : release_spnego_ctx ( & sc",0
15,<S2SV_ModStart> ; tm = localtime_r <S2SV_ModEnd> ( & t,0
16,<S2SV_ModStart> length ) ; if ( strlen ( password )!= 0 ) { <S2SV_ModStart> ) ) ; },0
17,<S2SV_ModStart> == p ) { * errnop = ERANGE ; return NSS_STATUS_TRYAGAIN ; } <S2SV_ModEnd> r = parse_uid,0
18,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",1
19,<S2SV_ModStart> = 0 ; if (! <S2SV_ModStart> & timeout ) ) return false,0
20,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> detect_transition_to_still ( struct <S2SV_ModStart> int detect_transition_to_still ( TWO_PASS <S2SV_ModEnd> * twopass, <S2SV_ModStart> last_decay_rate ) { bool trans_to_still = false <S2SV_ModEnd> ; if ( <S2SV_ModStart> frame_interval > MIN_GF_INTERVAL <S2SV_ModEnd> ) { int <S2SV_ModStart> j ; const TWO_PASS <S2SV_ModEnd> * position = <S2SV_ModStart> * position = TWO_PASS <S2SV_ModEnd> -> stats_in ; <S2SV_ModStart> == input_stats ( TWO_PASS <S2SV_ModEnd>, & tmp_next_frame <S2SV_ModStart> tmp_next_frame ) ) { trans_to_still = true ; break ; } <S2SV_ModEnd> if ( tmp_next_frame <S2SV_ModStart> pcnt_motion < 0.999 <S2SV_ModEnd> ) break ; <S2SV_ModStart> } reset_fpf_position ( TWO_PASS <S2SV_ModEnd>, position ) <S2SV_ModStart> j == still_interval &&! trans_to_still <S2SV_ModStart> ; } return true <S2SV_ModEnd> ; } <S2SV_null>",0
21,<S2SV_ModStart> inode ) ) { spin_lock ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModStart> size ) ; spin_unlock ( & EXT4_I ( inode ) -> i_mmap_sem ) ; },0
22,<S2SV_ModStart> alg ) { <S2SV_ModEnd> if (! <S2SV_ModStart> CRYPTO_ALG_NEED_FALLBACK ) ) <S2SV_ModEnd> alg = crypto_alg_lookup,0
23,"<S2SV_ModStart> = GIT_PKT_NG ; if ( len < 3 ) goto out_err ; <S2SV_ModStart> += 3 ; <S2SV_ModEnd> ptr = strchr <S2SV_ModStart>,'<S2SV_blank>') ; if (! ptr ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> ref = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> ref ) ; memcpy ( pkt -> ref, line, len ) ; pkt -> ref [ len ] = '\\0' ; line = ptr + 3 ; <S2SV_ModEnd> ptr = strchr <S2SV_ModStart>, '\\n' ) ; if (! ptr ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> msg = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> msg ) ; memcpy ( pkt -> msg, line, len ) ; pkt -> msg [ len ] = '\\0' ; <S2SV_ModEnd> * out =",0
24,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> BYTE flags ; UINT32 <S2SV_ModEnd> length ; Stream_Read_UINT32,0
25,<S2SV_ModStart> ; if ( avio_feof ( pb ) <S2SV_ModEnd> ) return AVERROR_PATCHWELCOME <S2SV_ModStart> ; if ( avio_feof ( pb ) <S2SV_ModEnd> ) return AVERROR_PATCHWELCOME <S2SV_ModStart> ; if ( avio_feof ( pb ) <S2SV_ModEnd> ) return AVERROR_PATCHWELCOME <S2SV_ModStart> ; if ( avio_feof ( pb ) <S2SV_ModEnd> ) return AVERROR_PATCHWELCOME <S2SV_ModStart> ; if ( avio_feof ( pb ) <S2SV_ModEnd> ) return AVERROR_PATCHWELCOME <S2SV_ModStart> ; if ( avio_feof ( pb ) <S2SV_ModEnd> ) return AVERROR_PATCHWELCOME <S2SV_ModStart> ; if ( avio_feof ( pb ) <S2SV_ModEnd> ) return AVERROR_PATCHWELCOME <S2SV_ModStart> ; if ( avio_feof ( pb ) <S2SV_ModEnd> ) return AVERROR_PATCHWELCOME <S2SV_ModStart> ; if ( avio_feof ( pb ) <S2SV_ModEnd> ) return AVERROR_PATCHWELCOME <S2SV_ModStart> ; if ( avio_feof ( pb ) <S2SV_ModEnd> ) return AVERROR_PATCHWELCOME,0
26,"<S2SV_ModStart> 1 ; } ret = <S2SV_ModEnd> mount_entry_on_generic ( mntent <S2SV_ModStart> path ) ; if ( ret < 0 ) { ERROR ( ""mount_entry_on_relative_rootfs <S2SV_blank> failed"" ) ; return - 1 ; } return ret ;",0
27,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } io -> io_cleanup = mem_cleanup ;,1
28,<S2SV_ModStart> & ( size_t ) ( value + 0.5 ) ) ; break ; } case RightShiftEvaluateOperator : { result = ( MagickRealType ) ( ( size_t ) pixel << ( size_t,0
29,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return ret?,0
30,<S2SV_ModStart> vpx_codec_enc_cfg_map_t * map ; ( void ) iface,0
31,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
32,"<S2SV_ModStart> void show_progress ( <S2SV_ModEnd> uint64_t dx_time ) <S2SV_ModStart> dx_time ) { if ( dx_time == 0 ) { fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/0 <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out, dx_time, ( double ) frame_out * 1000000.0 / ( double ) dx_time ) ; } else { fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out, dx_time, ( double ) frame_out * 1000000.0 / ( double ) dx_time ) ; }",0
33,"<S2SV_ModStart> ) ) { PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> %s\\n"", fields [ i ]. name ) ; <S2SV_ModStart> ) ) { PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> %s\\n"", fields [ i ]. name ) ; <S2SV_ModStart> ) ) { PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> %s\\n"", fields [ i ]. name ) ; <S2SV_ModStart> ) ) { PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> %s\\n"", fields [ i ]. name ) ; <S2SV_ModStart> ) ) { PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t\\tdbd_st_fetch <S2SV_blank> for <S2SV_blank> %s\\n"", fields [ i ]. name ) ;",0
34,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_ETXSTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRTS <S2SV_ModEnd> ) ; return",0
35,"<S2SV_ModStart> value ) ; if ( _PyObject_SetAttrId ( result, & PyId_annotation, value ) == - 1 ) goto failed ; Py_DECREF ( value ) ; <S2SV_ModStart> value ) ; if ( _PyObject_SetAttrId ( result, & PyId_end_lineno, value ) == - 1 ) goto failed ; Py_DECREF ( value ) ; if ( _PyObject_SetAttrId ( result, & PyId_end_col_offset, value ) == - 1 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ;",0
36,"<S2SV_ModStart> ( page && access ( page, R_OK ) == 0 ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } } else if (! strcmp ( func, ""page/set"" ) ) { char * wikitext = NULL, * page = NULL ; if ( ( ( wikitext = http_request_param_get ( req, ""text"" ) )!= NULL ) && ( ( page = http_request_param_get ( req, ""page"" ) )!= NULL ) ) { file_write ( page, wikitext ) ; http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } } else if (! strcmp ( func, ""page/delete"" ) ) { char * page = http_request_param_get ( req, ""page"" ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( unlink ( page ) > 0 ) { http_response_printf ( res, ""success"" ) ; http_response_send (",0
37,"<S2SV_ModStart> low_var_thresh, int mb_rows, int mb_cols <S2SV_ModEnd> ) { double <S2SV_ModStart>.5 ) <S2SV_ModEnd> ; unsigned char <S2SV_ModStart> pp_limits_buffer ; ; <S2SV_ModEnd> ( void ) <S2SV_ModStart> ) flag ; memset <S2SV_ModEnd> ( limits, <S2SV_ModStart> 16 ) ; vpx_post_proc_down_and_across_mb_row <S2SV_ModEnd> ( source -> <S2SV_ModStart> 8 ) ; vpx_post_proc_down_and_across_mb_row <S2SV_ModEnd> ( source ->",0
38,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> h_hash ) ; mb2_cache_entry <S2SV_ModEnd> * ce ; <S2SV_ModStart> int error ; error = mb2_cache_entry_alloc ( ext4_mb_cache, GFP_NOFS, & ce ) ; if ( error ) return ; <S2SV_ModEnd> error = mb_cache_entry_insert <S2SV_ModStart> error ) { mb2_cache_entry_free ( ext4_mb_cache, ce ) ; <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> hash ) ; mb2_cache_entry_release ( ext4_mb_cache, <S2SV_ModEnd> ce ) ;",0
39,"<S2SV_ModStart> ) ) ; if (! <S2SV_ModEnd> r_socket_http_answer ( s <S2SV_ModStart>, rlen ) ) { free ( uri ) ; return NULL ; } return NULL",0
40,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct ip_options_rcu <S2SV_ModEnd> * ip_options_get_from_user ( <S2SV_ModStart> ip_options_get_from_user ( struct ip_options_rcu <S2SV_ModEnd> * net, <S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * optp <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> return ip_options_get_finish (",0
41,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|truncated]"" <S2SV_ModEnd> ) ) ;",0
42,"<S2SV_ModStart> } else { # ifdef FEAT_GUI if ( gui. in_use ) errmsg = ( char_u * ) N_ ( ""E531: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; # endif",0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode <S2SV_ModStart>, & new_mode, & acl ) ; if ( ret <S2SV_ModEnd> ) goto out",0
44,"<S2SV_ModStart> size_t size ; if ( width < 0 || height < 0 ) { goto error ; } if (! jas_safe_intfast32_add ( tlx, width, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ) { goto error ; } if (! ( cmpt = jas_malloc ( sizeof ( jas_image_cmpt_t ) ) ) ) { goto error ; } cmpt -> type_ = JAS_IMAGE_CT_UNKNOWN ; cmpt -> tlx_ = tlx ; cmpt -> tly_ = tly ; cmpt -> hstep_ = hstep ; cmpt -> vstep_ = vstep ; cmpt -> prec_ = depth ; cmpt -> sgnd_ = sgnd ; cmpt -> stream_ = 0 ; cmpt -> cps_ = ( depth + 7 ) / 8 ; if (! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ) { goto error ;",0
45,<S2SV_ModStart> == datalen ) goto machine_overrun_error ; <S2SV_ModEnd> flags = 0 <S2SV_ModStart> ) ) goto machine_overrun_error <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) goto machine_overrun_error <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) goto machine_overrun_error <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) goto machine_overrun_error <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) goto machine_overrun_error <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) goto machine_overrun_error <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) goto machine_overrun_error <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) goto machine_overrun_error <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) goto machine_overrun_error <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) goto machine_overrun_error <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) goto machine_overrun_error <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) goto machine_overrun_error <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) goto machine_overrun_error <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) goto machine_overrun_error <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) goto machine_overrun_error <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) goto machine_overrun_error,0
46,"<S2SV_ModStart> * req, u32 <S2SV_ModEnd> * acl_len ) <S2SV_ModStart> acl_len ) { <S2SV_ModEnd> uint32_t attrlen, <S2SV_ModStart> int status ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> xdr, OP_GETATTR <S2SV_ModEnd> ) )!= <S2SV_ModStart>, & attrlen <S2SV_ModEnd> ) )!= <S2SV_ModStart> { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"" <S2SV_ModEnd>, attrlen, <S2SV_ModStart> attrlen ) ; <S2SV_ModEnd> } else status",0
47,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
48,"<S2SV_ModStart> ) ) { if ( snumber ( auth ) ) { <S2SV_ModStart> ; } } } if ( snumber ( tok ) ) { group = stok ( tok, "":"", & perms ) ; if ( group && * group ) { if ( snumber ( group ) ) { gid = ( int ) stoi ( group ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { gid = HTTP -> gid ; } else { gid = groupToID ( group ) ; } } if ( perms && snumber ( perms ) ) { mode = ( int ) stoiradix ( perms, - 1, NULL ) ; } else { mode = 0 ; } } else { mode = 0 ; } } else { dirs = auth ; auth = 0 ; } tok = dirs ; for ( tok = sclone ( dirs ) ; ( dir = stok ( tok, "","", & tok ) )!= 0 ; ) { path = httpMakePath ( state -> route, state -> configDir, dir ) ; if ( mprGetPathInfo ( path, & info ) == 0 && info. isDir ) { continue ; } if ( mprMakeDir ( path, mode, uid, gid, 1 )",0
49,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> addr = VPX_MALLOC_L <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; <S2SV_ModEnd> if ( addr,0
50,"<S2SV_ModStart> int res ; size_t <S2SV_ModEnd> indexes = SQUASHFS_LOOKUP_BLOCKS <S2SV_ModStart> long long export_index_table ; memset ( export_index_table, 0, sizeof ( long long ) * indexes ) ; res = read_fs_bytes ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } SQUASHFS_INSWAP_LOOKUP_BLOCKS ( export_index_table, indexes ) ; res = read_fs_bytes ( fd, sBlk. s. lookup_table_start, indexes, export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } SQUASHFS_INSWAP_LOOKUP_BLOCKS ( export_index_table, indexes ) ; *",0
51,<S2SV_ModStart> ; } else { <S2SV_ModStart> p1 ) ; },0
52,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> # if CONFIG_VP8_ENCODER <S2SV_ModStart> # endif } for ( argi = argj = argv ; ( * argj = * argi ) ; argi += arg. argv_step ) { arg. argv_step = 1 ; if ( eos_mark_found ) { argj ++ ; continue ; } else if (! strcmp ( * argj, ""--"" ) ) { eos_mark_found = 1 ; continue ; } else if (! strcmp ( * argj, ""--"" ) ) { eos_mark_found = 1 ; continue ; } if ( 0 ) { } else if ( arg_match ( & arg, & outputfile, argi ) ) { config -> out_fn = arg. val ; } else if ( arg_match ( & fpf_name, argi ) ) { config -> stats_fn = arg. val ; } else if ( arg_match ( & arg, & use_ivf, argi ) ) { config -> write_webm = 0 ; } else if ( arg_match ( & arg, & threads, argi ) ) { config -> cfg. g_threads = arg_parse_uint (",0
53,"<S2SV_ModStart> preverify_ok, callback_ctx, SSL_get1_session ( c -> ssl ) <S2SV_ModStart>, index_session_authenticated, NULL <S2SV_ModEnd> ) ; SSL_SESSION_free <S2SV_ModStart> } if ( preverify_ok ) { SSL_SESSION * sess = SSL_get1_session ( c -> ssl ) ; if ( sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, NULL ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } } return 1 ; } if ( <S2SV_ModStart> -> protocol ) { SSL_SESSION * sess = SSL_get1_session ( c -> ssl ) ; if ( sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, NULL ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } } return 1 ; } if ( c -> opt -> redirect_addr. names ) { SSL_SESSION * sess = SSL_get1_session",0
54,"<S2SV_ModStart> ; if ( crypto_memneq <S2SV_ModEnd> ( cmac,",0
55,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> const uint64_t bits_used <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
56,"<S2SV_ModStart> EOFOp 0x07 char * magick_buffer <S2SV_ModEnd> ; Image * <S2SV_ModStart> ) ) ; magick_buffer = ( char * ) MagickCalloc ( 12, sizeof ( char ) ) ; if (! magick_buffer ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart>, 2, magick_buffer <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart>. x = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. y = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. columns = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. rows = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122",0
57,"<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> altsetting [ 0 ]. desc. bNumEndpoints < 1 ) { dev_err ( & usbinterface -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; error = - EINVAL ; goto err_free_urb ; }",1
58,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
59,"<S2SV_ModStart> * dir = ""/tmp"" <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( fd = safe_mkstemp <S2SV_ModEnd> ( & tmpname",0
60,<S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; },0
61,"<S2SV_ModStart> narg ) ; if ( narg == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> narg ) ; if ( narg == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> narg ) ; if ( narg == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; }",0
62,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> vp9_setup_dst_planes ( MACROBLOCKD <S2SV_ModStart> mi_col ) { int i ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, src -> y_stride, src -> uv_stride, src -> alpha_stride, mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y ) ; } for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, src -> y_stride, src -> uv_stride, src -> alpha_stride, mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y ) ; } for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { <S2SV_ModStart>",0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,<S2SV_ModStart> ) get_block = ocfs2_do_get_block <S2SV_ModEnd> ; else get_block <S2SV_ModStart> else get_block = ocfs2_do_dio <S2SV_ModEnd> ; return __blockdev_direct_IO,0
65,"<S2SV_ModStart>, ""%79s <S2SV_blank> %[^\\n]\\n"", def, strparm ) == 2 ) { if ( strparm [ 0 ] == \'""\' ) { isstring = true ; len = strlen ( strparm ) ; newstring = ( char * ) malloc ( len ) ; strparm [ len - 1 ] = 0 ; strcpy ( newstring, strparm + 1 ) ; } else if ( strparm [ 0 ] == '0' && strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else sscanf ( strparm, ""%i"", & parm ) ; for ( i = 0 ; i < numdefaults ; i ++ ) if (! strcmp ( def, defaults [ i ]. name ) ) { if (! isstring ) * defaults [ i ]. location = parm ; else * defaults [ i ]. location = ( int ) newstring ; break ; } } } fclose ( f ) ; } for ( i = 0 ; i < numdefaults ; i ++ ) if (! strcmp ( def, defaults [ i ]. name ) ) {",0
66,"<S2SV_ModStart> n ) { <S2SV_ModEnd> PyCompilerFlags cf ; <S2SV_ModStart> ; mod_ty mod <S2SV_ModEnd> ; assert ( <S2SV_ModStart> ':' ) ; <S2SV_ModEnd> str = PyMem_RawMalloc <S2SV_ModStart> == NULL ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ; } <S2SV_ModEnd> str [ 0 <S2SV_ModStart> = PyCF_ONLY_AST ; mod = string_object_to_c_ast ( str, PyUnicode_FromString ( ""<fstring>"" ), Py_eval_input, & cf, c -> c_feature_version, c -> c_arena ) ; Py_DECREF ( fstring_name ) ; PyMem_RawFree ( str ) ; if (! mod ) <S2SV_ModStart> = PyCF_ONLY_AST ; <S2SV_ModEnd> mod = string_object_to_c_ast <S2SV_ModStart> ( str, PyUnicode_FromString ( ""<fstring>"" ), Py_eval_input, & cf, c -> c_feature_version, c -> c_arena ) ; Py_DECREF ( str ) ; PyMem_RawFree ( str ) ; return mod -> v. Expression. body <S2SV_ModEnd> ; } <S2SV_null>",0
67,"<S2SV_ModStart> string ) { return _cJSON_GetItem <S2SV_ModEnd> ( object -> <S2SV_ModStart> object -> child, string ) <S2SV_ModEnd> ; } <S2SV_null>",0
68,<S2SV_ModStart> size ) ; if ( px -> ft == NULL ) return FALSE ;,0
69,"<S2SV_ModStart> u_char * dat, u_int len <S2SV_ModStart>, val_l ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_TCHECK_16BITS ( ptr, len ) ; <S2SV_ModStart> ptr ++ ; ND_",0
70,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
71,<S2SV_ModStart> int i ; const uint32_t <S2SV_ModEnd> * const buffers <S2SV_ModStart> } ; const uint32_t <S2SV_ModEnd> strides [ 4,0
72,"<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ; for ( iov = msg -> msg_iov, iovlen = msg -> msg_iovlen ; iovlen > 0 ; iov ++ ) { unsigned long seglen = iov -> iov_len ; char __user * from = iov -> iov_base ; struct skcipher_sg_list * tsgl = list_first_entry ( & ctx -> tsgl, struct skcipher_sg_list, list ) ; sg = sgl -> sg ; while (! sg -> length ) sg ++ ; used = min_t ( unsigned long, used, seglen ) ; if (! ctx -> more || used < ctx -> used ) used -= used % bs ; err = - EINVAL ; if (! ctx -> used ) goto free ; ablkcipher_request_set_crypt ( & ctx -> req, sg, ctx -> rsgl. sg, used, ctx -> iv ) ; err = af_alg_wait_for_completion ( ctx -> enc? crypto_ablkcipher_encrypt ( & ctx -> req ) : crypto_ablkcipher_decrypt ( & ctx ->",0
73,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
74,<S2SV_ModStart> user ) { cleanup_srcu_struct ( & user -> release_barrier ) ; <S2SV_ModStart> _ipmi_destroy_user ( user <S2SV_ModEnd> ) ; kref_put,0
75,"<S2SV_ModStart> int sl = 0 ; int limit = 0 ; mongo_message * mm ; if ( cursor -> limit > 0 ) limit = cursor -> limit - cursor -> seen ; mm = mongo_message_create ( 16 + 4 + sl + 4 + 8, 0, 0, MONGO_OP_GET_MORE ) ; data = & mm -> data ; data = mongo_data_append32 ( data, & ZERO ) ; data = mongo_data_append ( data, cursor -> ns, sl ) ; data = mongo_data_append32 ( data, & limit ) ; mongo_data_append64 ( data, & cursor -> reply -> fields. cursorID ) ; bson_free ( cursor -> reply ) ; res = mongo_message_send ( cursor -> conn, mm ) ; if ( res!= MONGO_OK ) { mongo_cursor_destroy ( cursor ) ; return MONGO_ERROR ; } res = mongo_read_response ( cursor -> conn, & ( cursor -> reply ) ) ; if ( res!= MONGO_OK ) { mongo_cursor_destroy ( cursor ) ; return MONGO_ERROR ; } cursor -> current. data = NULL ; cursor -> seen +=",0
76,"<S2SV_ModStart> * for_ch ; <S2SV_ModEnd> REQ ( n <S2SV_ModStart> comp_for ) ; <S2SV_ModEnd> for_ch = CHILD <S2SV_ModStart> 1 + is_async ) ; t = ast_for_exprlist ( c, for_ch, Store <S2SV_ModStart> return NULL ; expression = ast_for_expr ( c, CHILD ( n, 3 + is_async ) ) ; if (! expression ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if ( NCH ( for_ch ) == 1 ) comp = comprehension ( first, expression, NULL, is_async, c -> c_arena ) ; else comp = comprehension ( Tuple ( t, Store, first -> lineno, first -> col_offset, c -> c_arena ), expression, NULL, is_async, c -> c_arena ) ; if (! comp ) return NULL ; if ( NCH ( n ) == ( 5 + is_async ) ) { int j, n_ifs ; asdl_seq * ifs ; n = CHILD ( n, 4 + is_async ) ; n_ifs = count_comp_ifs ( c, n )",0
77,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> dst_state -> curframe <S2SV_ModStart> dst_state -> curframe -- ; } for ( i = 0 ; i <= src -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) return - ENOMEM ; dst_state -> frame [ i ] = dst ; } err = copy_func_state ( dst, src -> frame [ i ] ) ; if ( err ) return err ; } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) return - ENOMEM ; dst_state -> frame [ i ] = dst ; } err = copy_func_state ( dst, src -> frame [ i ] ) ; if ( err ) return err ; }",0
78,"<S2SV_ModStart> * cpi, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> w ) { const VP9_COMP * const cm = & cpi -> common ; const MACROBLOCKD * const xd = & cpi -> mb. e_mbd ; const struct segmentation * const seg = & cm -> seg ; const MODE_INFO * const mi = mi_8x8 [ 0 ] ; const MODE_INFO * const above_mi = mi_8x8 [ - xd -> mi_stride ] ; const MODE_INFO * const left_mi = xd -> left_available? mi_8x8 [ - 1 ] : NULL ; const MB_MODE_INFO * const mbmi = & mi -> mbmi ; const BLOCK_SIZE bsize = mbmi -> sb_type ; if ( seg -> update_map ) write_segment_id ( w, seg, mbmi -> segment_id ) ; write_skip ( cpi, mbmi -> segment_id, mi, w ) ; if ( bsize >= BLOCK_8X8 && cm -> tx_mode == TX_MODE_SELECT ) write_selected_tx_size ( cpi, mbmi -> tx_size, bsize,",0
79,"<S2SV_ModStart> maxn ) { switch ( actions [ n ]. SWF_ACTIONRECORD. ActionCode ) { case SWFACTION_END : return 0 ; case SWFACTION_CONSTANTPOOL : decompileCONSTANTPOOL ( & actions [ n ] ) ; return 0 ; case SWFACTION_GOTOLABEL : decompileGOTOFRAME ( n, actions, maxn, 1 ) ; case SWFACTION_GOTOFRAME : decompileGOTOFRAME ( n, actions, maxn, 0 ) ; case SWFACTION_GETURL2 : decompileGETURL2 ( & actions [ n ] ) ; return 0 ; case SWFACTION_PUSH : decompilePUSH ( & actions [ n ] ) ; return 0 ; case SWFACTION_PUSHDUP : decompilePUSHDUP ( & actions [ n ] ) ; return 0 ; case SWFACTION_STACKSWAP : decompileSTACKSWAP ( & actions [ n ] ) ; return 0 ; case SWFACTION_GETPROPERTY : decompileGETPROPERTY ( & actions [ n ] ) ; return 0 ; case SWFACTION_GETTIME : decompileGETTIME ( & actions [ n ] ) ; return 0 ;",0
80,"<S2SV_ModStart> ) ) ; n = EXTRACT_32BITS ( & prep -> pp_n ) ; if ( n < 0 || ND_TTEST ( * prep ) ) { return ( - 1 ) ; } <S2SV_ModStart> ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %u/%s:%u"", EXTRACT_32BITS ( & prep -> slot ), ipaddr_string ( ndo, & prep -> page. p_sid ), EXTRACT_32BITS ( & prep -> page. p_uid ) ) ) ; ps = ( const struct pgstate * ) ( prep + 1 ) ; while ( -- n >= 0 && ND_TTEST ( * ps ) ) { const struct id_off * io, * ie ; char c = '<' ; ND_PRINT ( ( ndo, "" <S2SV_blank> %u/%s:%u"", EXTRACT_32BITS ( & ps -> slot ), ipaddr_string ( ndo, & ps -> page. p_sid ) ) ) ; io = ( const struct id_off * ) ( ps + 1 ) ; for ( ie = io + ps -> nid ; io < ie && ND_TTEST ( * io )",0
81,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
82,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> addModuleArgument ( sqlite3 <S2SV_ModStart> zArg ) { sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof <S2SV_ModStart> = sizeof ( sqlite3_int64 <S2SV_ModEnd> ) * ( <S2SV_ModStart> nModuleArg ) ; sqlite3_int64 <S2SV_ModEnd> * * azModuleArg,0
83,<S2SV_ModStart> ++ ) { for ( j = 0 ; j < TWICE_QMF_SYNTH_CHANNELS_NUM ; j ++ ) { for ( k = 0 ; k < TWICE_QMF_SYNTH_CHANNELS_NUM ; k ++ ) { for ( j = 0 ; j < TWICE_QMF_SYNTH_CHANNELS_NUM ; j ++ ) { for ( k = 0 ; k < TWICE_QMF_SYNTH_CHANNELS_NUM ; k ++ ) { for ( j = 0 ; j < TWICE_QMF_SYNTH_CHANNELS_NUM ; j ++ ) { for ( k = 0 ; k < TWICE_QMF_SYNTH_CHANNELS_NUM ; k ++ ) { for ( j = 0 ; j < TWICE_QMF_SYNTH_CHANNELS_NUM ; j ++ ) { for ( j = 0 ; j < TWICE_QMF_SYNTH_CHANNELS_NUM ; j ++ ) { for ( j = 0 ; j < TWICE_QMF_SYNTH_CHANNELS_NUM ; j ++ ) { for ( j = 0 ; j,0
84,<S2SV_ModStart> < q ) { <S2SV_ModStart> p ) ; if ( ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS_SINGLEBYTE ( reg -> enc ) && ONIGENC_IS,0
85,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static bool <S2SV_ModEnd> bfq_idle_slice_timer_body ( struct <S2SV_ModStart> bfqq -> bfqd <S2SV_ModEnd> ; spin_lock_irqsave ( <S2SV_ModStart> flags ) ; if (! bfq_bfqq_in_service_queue ( bfqq ) ) { spin_unlock_irqrestore ( & bfqd -> lock, flags ) ; return false ; } <S2SV_ModStart> in_service_queue ) { bfq_bfqq_expire ( bfqd, bfqq, true, reason ) ; spin_unlock_irqrestore ( & bfqd -> lock <S2SV_ModEnd>, flags ) <S2SV_ModStart> flags ) ; return true ; } return false <S2SV_ModEnd> ; } <S2SV_null>",0
86,,1
87,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
88,"<S2SV_ModStart> diffBlock + diffBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } if ( diffPtr + x > diffBlock + diffBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } if ( extraPtr + y > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } memcpy ( newData + newpos, diffPtr, x ) ; diffPtr += x ; if ( <S2SV_ModEnd> extraPtr + y <S2SV_ModStart> extraPtr + y > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } memcpy ( newData + newpos, extraPtr, y ) ; extraPtr += y <S2SV_ModEnd> ; } }",0
89,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> np -> tclass ) ; rcu_read_unlock (,0
90,"<S2SV_ModStart> ) break ; if ( bytes_per_pixel > MagickSizeMax ( number_pixels, bytes_per_pixel ) ) { ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; }",0
91,<S2SV_ModStart> data ) { ( void ) data ;,0
92,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
93,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
94,"<S2SV_ModStart> mb_offset ) ; memcpy <S2SV_ModEnd> ( mvx, <S2SV_ModStart> ] ) ; memcpy <S2SV_ModEnd> ( mvy, <S2SV_ModStart> ] ) ; memcpy <S2SV_ModEnd> ( mvx, <S2SV_ModStart> ] ) ; memcpy <S2SV_ModEnd> ( mvy, <S2SV_ModStart> ] ) ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ] ) ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ] ) ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ] ) ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ] ) ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ] ) ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ] ) ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ] ) ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ] ) ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ] ) ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ] ) ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ] ) ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ] ) ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ] ) ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ] ) ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ] ) ; memcpy <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ] ) ; memcpy <S2SV_ModEnd> ( cpi ->",0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
97,"<S2SV_ModStart> msicap msicap ; memset ( ( void * ) & msicap, 0, sizeof ( msicap ) ) ;",0
98,"<S2SV_ModStart> return REDIS_OK ; } if ( cmd -> proc == quitCommand ) { addReplyError ( c, shared. ok ) ; c -> flags |= REDIS_CLOSE_AFTER_REPLY ; return REDIS_OK ;",0
99,"<S2SV_ModStart> ; if ( cfg -> g_w == 0 || cfg -> g_h == 0 ) return VPX_CODEC_ERR_INVALID_PARAM ; if ( cfg -> g_w == 0 || cfg -> g_h == 0 ) return VPX_CODEC_ERR_INVALID_PARAM ; if ( cfg -> g_w > ctx -> cfg. g_w ) return VPX_CODEC_ERR_INVALID_PARAM ; if ( cfg -> g_h > ctx -> cfg. g_h ) return VPX_CODEC_ERR_INVALID_PARAM ; if ( <S2SV_ModEnd> ( cfg -> <S2SV_ModStart> VPX_RC_ONE_PASS ) ) return VPX_CODEC_ERR_INVALID_PARAM <S2SV_ModEnd> ; if ( <S2SV_ModStart> ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; res = validate_config ( ctx, cfg, & ctx -> vp8_cfg, 0 ) ; if (! res ) { ctx -> cfg = * cfg ; set_vp8e_config ( & ctx -> oxcf, ctx -> cfg, ctx -> vp8_cfg, NULL ) ; vp8_change_config ( ctx -> cpi,",0
100,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> vp9_init_plane_quantizers ( cpi,0
101,<S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> info -> si_signo,0
102,<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; if ( ptr -> movie_identifier ) { g_free ( ptr -> movie_identifier ) ; ptr -> movie_identifier = NULL ; return GF_ISOM_INVALID_FILE ; },0
103,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
104,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> -> state == fmode <S2SV_ModEnd> ) return ; <S2SV_ModStart> if ( ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> )!= ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> { if ( fmode <S2SV_ModEnd> & FMODE_WRITE ) <S2SV_ModStart> -> state = fmode <S2SV_ModEnd> ; } <S2SV_null>",0
105,"<S2SV_ModStart> read_info ) ; status = SetImageExtent ( image, image -> rows, image -> cols ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
106,<S2SV_ModStart> 0 ; } if ( len > SIZE_MAX - elem. in_sg [ 0 ]. iov_len ) { return 0 ; },0
107,<S2SV_ModStart> unsigned ) JPC_QCX_GETEXPN <S2SV_ModEnd> ( qcd -> <S2SV_ModStart> unsigned ) JPC_QCX_GETMANT <S2SV_ModEnd> ( qcd ->,0
108,<S2SV_ModStart> = AV_PIX_FMT_PAL8 ; return AVERROR_PATCHWELCOME ;,0
109,<S2SV_ModStart> length - 1 <S2SV_ModEnd> ) ; return,1
110,"<S2SV_ModStart> image_noffset ) { if ( noffset == - FDT_ERR_TRUNCATED || noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; }",0
111,"<S2SV_ModStart> -> rx_kfifo, CX23888_IR_TX_KFIFO_SIZE <S2SV_ModEnd>, GFP_KERNEL ) <S2SV_ModStart> - ENOMEM ; mutex_init ( & state -> rx_params_lock ) ; default_params = default_rx_params ; v4l2_subdev_call ( sd, ir, rx_s_parameters, & default_params ) ; mutex_init ( & state -> tx_params_lock ) ; default_params = default_tx_params ; v4l2_subdev_call ( sd, ir, tx_s_parameters, & default_params ) ; ret = cx23888_ir_write4 ( dev, CX23888_IR_TXEN_REG, 0 ) ; mutex_init ( & state -> tx_params_lock ) ; default_params = default_tx_params ; v4l2_subdev_call ( sd, ir, tx_s_parameters, & default_params ) ; ret = cx23888_ir_write4 ( dev, CX23888_IR_TXEN_REG, 0 ) ; mutex_init ( & state ->",0
112,"<S2SV_ModStart>, vpx_codec_dec_cfg_t * dec_cfg <S2SV_ModEnd>, vpx_codec_flags_t flags <S2SV_ModStart> ( ( flags & VPX_CODEC_USE_XMA ) &&! ( dec_cfg -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_POSTPROC ) &&! ( dec_cfg -> caps & VPX_CODEC_CAP_POSTPROC ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_ERROR_CONCEALMENT ) &&! ( iface -> caps & VPX_CODEC_CAP_ERROR_CONCEALMENT ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( (",0
113,<S2SV_ModStart> ; value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1100WritePhyReg (,0
114,"<S2SV_ModStart> ( unlikely ( IPCB ( skb_in ) -> opt. optlen <S2SV_ModEnd> >= IP_MAXPLEN ) <S2SV_ModStart> > IP_MAXPLEN ) { kfree_skb ( skb_in ) ; kfree_skb ( skb_in ) ; kfree_skb ( skb_in ) ; kfree_skb ( skb_in ) ; kfree_rcu ( rt, rcu_head ) ; goto out ; } if ( iph -> ihl << 2 > IPCB ( skb_in ) -> optlen ) { kfree_skb ( skb_in ) ; kfree_skb ( skb_in ) ; kfree_rcu ( iph, rcu_head ) ; kfree_skb ( skb_in ) ; kfree_skb ( skb_in ) ; kfree_rcu ( rt, rcu_head ) ; } ipc. code = code ; ipc. tos = info ; ipc. optlen = iph -> optlen ; ipc. optlen = iph -> optlen ; ipc. optlen = iph -> optlen ; ip",0
115,<S2SV_ModStart> ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & <S2SV_ModStart> VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT,0
116,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
117,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; RESERVE_SPACE",1
118,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ) ; return 0 <S2SV_ModStart> break ; } return error <S2SV_ModEnd> ; } <S2SV_null>,1
119,"<S2SV_ModStart> ; if ( len < 1 ) { r_strbuf_append ( & op -> esil, ""\\0"" ) ; break ; } if (",0
120,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
121,"<S2SV_ModStart> goto trunc ; ND_TCHECK_16BITS ( & lshp -> ls_length ) ; ND_TCHECK_32BITS ( & lshp -> ls_age ) ; ND_TCHECK_16BITS ( & lshp -> ls_seq ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %us, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_router ), EXTRACT_32BITS ( & lshp -> ls_seq ), EXTRACT_16BITS ( & lshp -> ls_age ), EXTRACT_16BITS ( & lshp -> ls_length ) - ( u_int ) sizeof ( struct lsa6_hdr ) ) ) ; ospf6_print_ls_type ( ndo, EXTRACT_16BITS ( & lshp -> ls_type ), & lshp -> ls_stateid ) ; <S2SV_ModStart> lshp -> ls_seq <S2SV_ModEnd> ) ; ospf6_print_ls_type",0
122,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) { ret = - EFAULT ; break ; } <S2SV_ModEnd> * obuf =",0
123,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
124,"<S2SV_ModStart> 0 ) { if ( ( <S2SV_ModStart> | O_CLOEXEC ) ) < 0 ) { APPL_TRACE_ERROR ( ""%s: <S2SV_blank> Error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank> err:%d"", __FUNCTION__, errno ) ; break ; } <S2SV_ModEnd> p_dev -> fd <S2SV_ModStart> 0 ) { if ( ( <S2SV_ModStart> | O_CLOEXEC ) ) < 0 ) { APPL_TRACE_ERROR ( ""%s: <S2SV_blank> Error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank> err:%d"", __FUNCTION__, errno ) ; break ; } <S2SV_ModEnd> p_dev -> fd <S2SV_ModStart> 0 ) { if ( ( <S2SV_ModStart> | O_CLOEXEC ) ) < 0 ) { APPL_TRACE_ERROR ( ""%s: <S2SV_blank> Error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank> err:%d"", __FUNCTION__, errno ) ; break ; } <S2SV_ModEnd> p_dev -> fd <S2SV_ModStart> 0 ) { if ( ( <S2SV_ModStart> | O_CLOEXEC ) ) < 0 ) { APPL_TRACE_ERROR ( ""%s: <S2SV_blank> Error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank> err:%d"", __FUNCTION__, errno ) ; break ; }",0
125,"<S2SV_ModStart> costs, vp9_tree * <S2SV_ModStart> ) { const vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> ) ; const vpx_tree_index <S2SV_ModEnd> ii = tree",0
126,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
127,"<S2SV_ModStart> & 0xffff ; if (! synth_devs [ dev ] ) return - ENXIO ; <S2SV_ModStart> c, 0 ) ; if ( err < 0 ) return err ; return err ; } if ( ev_code >= 128 ) { if ( seq_mode == SEQ_2 && ev_code == SEQ_EXTENDED ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> Invalid <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> event <S2SV_blank> %x\\n"", ev_code ) ; return - EINVAL ; } ev_size = 8 ; if ( c < ev_size ) { if (! seq_playing ) seq_startplay ( ) ; return count - c ; } if ( copy_from_user ( ( char * ) & event_rec [ 4 ], & ( buf ) [ p + 4 ], 4 ) ) return - EINVAL ; return count - c ; } if ( c < ev_size ) { if (! seq_playing ) seq_startplay ( ) ; return count - c ; } if ( copy_from_user ( ( char * ) & event_rec [ 4 ], & ( buf ) [ p + 4 ],",0
128,"<S2SV_ModStart> fadst16 ( const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t <S2SV_ModEnd> x0 = input <S2SV_ModStart> 15 ] ; tran_high_t x2 = input [ 0 ] ; tran_high_t <S2SV_ModEnd> x3 = input <S2SV_ModStart> 2 ] ; tran_high_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 4 ] ; tran_high_t <S2SV_ModEnd> x5 = input <S2SV_ModStart> 11 ] ; tran_high_t <S2SV_ModEnd> x6 = input <S2SV_ModStart> 9 ] ; tran_high_t <S2SV_ModEnd> x7 = input <S2SV_ModStart> 7 ] ; tran_high_t <S2SV_ModEnd> x8 = input <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> x9 = input <S2SV_ModStart> 9 ] ; tran_high_t <S2SV_ModEnd> x10 = input <S2SV_ModStart> 5 ] ; tran_high_t <S2SV_ModEnd> x11 = input <S2SV_ModStart> 10 ] ; tran_high_t <S2SV_ModEnd> x12 = input <S2SV_ModStart> 12 ] ; tran",0
129,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> flags |= HAS_EDSP <S2SV_ModStart> |= HAS_EDSP ; <S2SV_ModEnd> flags |= HAS_MEDIA <S2SV_ModStart> |= HAS_MEDIA ; <S2SV_ModEnd> flags |= HAS_NEON <S2SV_ModStart> flags |= HAS_NEON ; <S2SV_ModEnd> return flags &,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
131,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> count_segs_sb ( VP9_COMP <S2SV_ModStart> * const tile <S2SV_ModEnd>, int * <S2SV_ModStart> bsize ) { TileInfo * tile_info = & cpi -> tile_info ; <S2SV_ModStart> cm = & tile_info <S2SV_ModEnd> -> common ; <S2SV_ModStart> ) return ; MODE_INFO * * mi_8x8 = & tile_info -> mi_8x8 ; int bw, bh ; const int bs = num_8x8_blocks_wide_lookup [ bsize ], hbs = bs / 2 ; if ( mi_row >= cm -> mi_rows || mi_col >= cm -> mi_cols ) return ; bw = num_8x8_blocks_wide_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ] ; bh = num_8x8_blocks_high_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ] ; if ( bw == bs && bh == bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count,",0
132,<S2SV_ModStart> flags & CLIENT_CLOSE_AFTER_REPLY ) break ; if ( c -> flags & CLIENT_SHUTDOWN,0
133,<S2SV_ModStart> get_blocks_flags = EXT4_GET_BLOCKS_CREATE | EXT4_GET_BLOCKS_DELALLOC_RESERVE <S2SV_ModStart> get_blocks_flags |= EXT4_GET_BLOCKS_CREATE <S2SV_ModEnd> ; blks =,0
134,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart>, handle, hints, <S2SV_ModStart> & retval, <S2SV_ModEnd> p -> ai_flags <S2SV_ModStart> p -> ai_flags, <S2SV_ModEnd> p -> ai_family <S2SV_ModStart> p -> ai_family, <S2SV_ModEnd> p -> ai_socktype <S2SV_ModStart> p -> ai_socktype <S2SV_ModEnd>, p -> <S2SV_ModStart>, NULL, <S2SV_ModEnd> p -> ai_addrlen <S2SV_ModStart>, NULL, <S2SV_ModEnd> p -> ai_addrlen <S2SV_ModStart> p -> ai_addrlen <S2SV_ModEnd>, NULL ) <S2SV_ModStart> } if (! p ) { ret = OE_EAI_MEMORY ; goto done ; } if ( retval == 1 ) break ; if ( retval!= - 1 || oe_errno!= OE_ENAMETOOLONG ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( oe_errno ) ; } if ( p -> ai_family!= AF_INET ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( oe_errno ) ; } if ( p -> ai_family!= AF_INET ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( oe_errno ) ;",0
135,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
136,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
137,"<S2SV_ModStart> __u16 size, const <S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmemdup ( data, size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart> ret ) ; kfree ( buf ) ;",1
138,"<S2SV_ModStart> asdl_seq * body, const char * name <S2SV_ModStart> = body ; p -> v. Module. name = name ;",0
139,"<S2SV_ModStart>, int64_t ts_end <S2SV_ModEnd> ) { struct <S2SV_ModStart> >> 4 ; <S2SV_ModEnd> if ( ctx <S2SV_ModStart> write_idx ) ; vp9_copy_and_extend_frame ( src, & buf -> img ) ; <S2SV_ModStart> } else { # if USE_PARTIAL_COPY if ( ctx -> max_sz == 1 && active_map &&! flags ) { for ( row = 0 ; row < mb_rows ; ++ row ) { col = 0 ; while ( 1 ) { for ( ; col < mb_cols ; ++ col ) { if ( active_map [ col ] ) break ; } vp9_copy_and_extend_frame_with_rect ( src, & buf -> img, row << 4, col << 4, 16, ( active_end - col ) << 4 ) ; col = active_end ; } } else { vp9_copy_and_extend_frame_with_rect ( src, & buf -> img, row << 4, col << 4, 16, ( active_end - col ) << 4 ) ; } } else { vp9_copy_and_extend_frame ( src, & buf -> img ) ; } # else <S2SV_ModStart> img ) ; # endif",0
140,"<S2SV_ModStart> method == LPF_PICK_FROM_Q || method == LPF_PICK_TO_Q <S2SV_ModStart> int q = vpx_ac_quant <S2SV_ModEnd> ( cm -> <S2SV_ModStart> int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; if ( cm -> frame_type == KEY_FRAME ) filt_guess -= 4 ; lf -> filter_level = clamp ( filt_guess, min_filter_level, max_filter_level ) ; } else if ( method == LPF_PICK_TO_Q ) { const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; if ( cm -> frame_type == KEY_FRAME ) filt_guess -= 4 ; lf -> filter_level = clamp ( filt_guess, min_filter_level, max_filter_level ) ; } else { search_filter_level ( sd, cpi, method == L",0
141,<S2SV_ModStart> BTA_DM_DISABLE_EVT : { # if ( defined ( BLE_INCLUDED ) && ( BLE_INCLUDED == TRUE ) ) BTA_DmBleConfigLocalPrivacy ( BLE_LOCAL_PRIVACY_DISABLED ) ; # endif <S2SV_ModStart> ) ) { # if ( defined ( BLE_INCLUDED ) && ( BLE_INCLUDED == TRUE ) ) BTA_DmBleConfigLocalPrivacy ( BLE_REMOTE_PRIVACY_DISABLED ) ; # endif <S2SV_ModStart> ) ) { # if ( defined ( BLE_INCLUDED ) && ( BLE_INCLUDED == TRUE ) ) BTA_DmBleConfigLocalPrivacy ( BLE_REMOTE_PRIVACY_DISABLED ) ; # endif <S2SV_ModStart> ) ) { # if ( defined ( BLE_INCLUDED ) && ( BLE_INCLUDED == TRUE ) ) BTA_DmBleConfigLocalPrivacy ( BLE_REMOTE_PRIVACY_DISABLED ) ; # endif <S2SV_ModStart> ) ) { # if ( defined ( BLE_INCLUDED ) && ( BLE_INCLUDED ==,0
142,"<S2SV_ModStart> int a = strtol <S2SV_ModEnd> ( fmt,",0
143,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
144,"<S2SV_ModStart> vpx_codec_err_t res ; vpx_alg_priv_t * priv ; <S2SV_ModStart> data_sz ) ) { <S2SV_ModStart> = VPX_CODEC_INVALID_PARAM ; } else { priv = ctx -> priv -> alg_priv ; } <S2SV_ModStart>. decode ( <S2SV_ModEnd> priv, data",0
145,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static sector_t <S2SV_ModEnd> isofs_read_inode ( struct <S2SV_ModStart> inode ) { struct super_block * sb = inode -> i_sb ; struct isofs_sb_info * sbi = ISOFS_SB ( inode -> i_sb ) ; unsigned long bufsize = ISOFS_BUFFER_SIZE ( inode ) ; unsigned long block ; int high_sierra = sbi -> s_high_sierra ; int ret = - EIO ; block = ei -> i_iget5_block ; bh = ( struct buffer_head * ) ( bh -> b_data + offset ) ; de_len = * ( unsigned char * ) de ; if ( offset + de_len > bufsize ) { int frag1 = bufsize - offset ; tmpde = kmalloc ( de_len, GFP_KERNEL ) ; if ( tmpde == NULL ) { printk ( KERN_INFO ""%s: <S2SV_blank> out <S2SV_blank> of <S2SV_blank> memory\\n"", __func__ ) ; ret = - ENOMEM ; goto fail ; } memcpy ( tmpde, bh -> b_data",0
146,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> ) ; } sprintf ( outputbuffer, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", c, m, y, k ) ;",0
147,<S2SV_ModStart> self ) { PyObject_GC_UnTrack ( self ) ;,1
148,<S2SV_ModStart> ( ) ; if (! a ) return 0 ; <S2SV_ModStart> ] ) ; <S2SV_ModEnd> suffix_object ( p,0
149,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body, & tmp ) < 0 ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( tmp == NULL ) { PyErr_Format ( PyExc_TypeError, ""Module <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> must <S2SV_blank> be <S2SV_blank> a <S2SV_blank> list, <S2SV_blank> not <S2SV_blank> a <S2SV_blank> %.200s"", PyList_GET_TYPE ( tmp ) -> tp_name ) ; goto failed ; } len = PyList_GET_SIZE ( tmp ) ; body = _Ta3_asdl_seq_new ( len, arena ) ; if ( body == NULL ) goto failed ; for ( i = 0 ; i < len ; i ++ ) { stmt_ty value ; res = obj2ast_stmt ( PyList_GET_ITEM ( tmp, i ), & value, arena ) ; if ( res!= 0 ) goto failed ; if ( len!= PyList_GET_SIZE ( tmp ) ) { PyErr_SetString ( PyExc_RuntimeError, ""Module <S2SV_blank> field <S2SV_blank> \\""body",0
150,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
151,"<S2SV_ModStart> & flags ) <S2SV_ModEnd> err = verify_compat_iovec <S2SV_ModStart> VERIFY_WRITE ) ; else err = verify_iovec ( msg_sys, iov, & addr, VERIFY_READ ) ; if ( err < 0 ) goto out_freeiov ; total_len = err ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; err = ( nosec? sock_recvmsg_nosec : sock_recvmsg ) ( sock, msg_sys, cmsg_ptr, uaddr, uaddr_len ) ; if ( err < 0 ) goto out_freeiov ; err = ( nosec? sock_recvmsg_nosec : sock_recvmsg ) ( sock, msg_sys, cmsg_ptr, uaddr, uaddr_len ) ; if ( err < 0 ) goto out_freeiov ; err = ( nosec? sock_recvmsg_nosec : sock_recv",0
152,"<S2SV_ModStart> buffer_head * dibh <S2SV_ModEnd> ; u64 bn <S2SV_ModStart> unsigned ptrs_per_blk ; int eob = 0 ; enum alloc_state state ; __be64 * ptr ; __be64 zero_bn = 0 ; BUG_ON ( sheight < 1 ) ; BUG_ON ( dibh == NULL ) ; gfs2_trans_add_bh ( ip -> i_gl, dibh, 1 ) ; if ( height == sheight ) { struct buffer_head * bh ; ptr = metapointer ( height - 1, mp ) ; bh = mp -> mp_bh [ height - 1 ] ; dblks = gfs2_extent_length ( bh -> b_data, bh -> b_size, ptr, maxlen, & eob ) ; BUG_ON ( dblks < 1 ) ; state = ALLOC_DATA ; } else { ptrs_per_blk = height > 1? sdp -> sd_inptrs : sdp -> sd_diptrs ; dblks = min ( maxlen, ptrs_per_blk - mp -> mp_list [ height - 1 ] ) ; if ( height == ip",0
153,"<S2SV_ModStart>, vpx_codec_iface_name ( stream <S2SV_ModEnd> -> codec -> <S2SV_ModStart> -> codec -> codec_interface ( ) ) ) ; fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> index ) ; fprintf ( stderr, ""Destination <S2SV_blank> file: <S2SV_blank> %s\\n"", stream -> config. out_fn ) ; fprintf ( stderr, ""Encoder <S2SV_blank> parameters:\\n"" ) ; SHOW ( g_usage ) ; SHOW ( g_threads ) ; SHOW ( g_profile ) ; SHOW ( g_w ) ; SHOW ( g_h ) ; SHOW ( g_timebase. num ) ; SHOW ( g_timebase. den ) ; SHOW ( g_error_resilient ) ; SHOW ( g_pass ) ; SHOW ( g_lag_in_frames ) ; SHOW ( rc_dropframe_thresh ) ; SHOW ( rc_resize_allowed ) ; SHOW",0
154,"<S2SV_ModStart> ) ; } if ( copyNs == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> Attribute <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> namespace.\\n"", attr -> name ) ; goto error ; }",0
155,"<S2SV_ModStart> 0 ) { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } } else { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } } free ( fname ) ; <S2SV_ModStart> 0 ) { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } } else { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf (",0
156,<S2SV_ModStart> msix_tab_size ) { <S2SV_ModEnd> bzero ( msixcap,1
157,<S2SV_ModStart> ; if ( <S2SV_ModEnd> js_regexec ( re,0
158,"<S2SV_ModStart> case OFreshOID : <S2SV_ModEnd> sp -- ; <S2SV_ModStart> case OReadItems : if ( Int_val ( Field ( ( value ) dest, 1 ) ) >= 0 ) caml_set_oo_id ( ( value ) dest ) ;",0
159,"<S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; ksz8851WriteReg <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( interface, KSZ8851_ISR ) ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } } if ( ( isr & ISR_TXIS )!= 0 ) { ksz8851WriteReg ( interface, KSZ8851_ISR, ISR_TXIS ) ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } } if ( ( isr & ISR_RXIS )!= 0 ) { ksz8851WriteReg ( interface, <S2SV_ModStart> ( interface, KSZ",0
160,"<S2SV_ModStart> * cm, vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
161,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> p_buf, msglen )",1
162,<S2SV_ModStart> ; sslerr : if ( fp ) fclose ( fp ) ; if ( rawcert ) BIO_free ( rawcert ) ; if ( peerrsa ) RSA_free ( peerrsa ) ; if ( peerec ) EC_free ( peerec ) ; if ( localkey ) EVP_PKEY_free ( localkey ) ; if ( rawcert ) BIO_free ( peerec ) ; if ( fp ) fclose ( fp ) ; if ( rawcert ) BIO_free ( rawcert ) ; if ( fp ) fclose ( fp ) ; if ( peerec ) <S2SV_ModStart> peerec ) ; if ( rawcert ) BIO_free ( rawcert ) ; if ( fp ) fclose ( fp ) ; if ( peerec ) <S2SV_ModStart> peerec ) ; if ( rawcert ) BIO_free ( rawcert ) ; if ( fp ) fclose ( fp ) ; if ( peerec ) BIO_free ( peerec ) ; if ( peerec ) BIO_free ( peerec ) ; if ( fp ) fclose ( fp ) ; if ( peerec ) BIO_free ( peerec ) ; if ( fp ) fclose ( fp ) ;,0
163,"<S2SV_ModStart> ( ) ; strncat <S2SV_ModEnd> ( t1_buf_array, <S2SV_ModStart> t1_buf_array, t1_line_array, strlen ( t1_line_array )",0
164,"<S2SV_ModStart> int mi_col, <S2SV_ModEnd> BLOCK_SIZE subsize ) <S2SV_ModStart> int bsl = b_width_log2_subsize <S2SV_ModEnd> ( bsize ) <S2SV_ModStart> int hbs = b_width_log2_subsize <S2SV_ModEnd> ( bsize ) <S2SV_ModStart> partition_lookup [ bsl <S2SV_ModEnd> ] ; assert <S2SV_ModStart> case PARTITION_NONE : set_modeinfo_offsets_sb <S2SV_ModEnd> ( cm, <S2SV_ModStart> mi_col ) ; set_modeinfo_offsets_sb <S2SV_ModEnd> ( cm, <S2SV_ModStart> case PARTITION_VERT : set_modeinfo_offsets_sb <S2SV_ModEnd> ( cm, <S2SV_ModStart> mi_col ) ; set_modeinfo_offsets_sb <S2SV_ModEnd> ( cm, <S2SV_ModStart> mi_cols ) { set_modeinfo_offsets_sb <S2SV_ModEnd> ( cm, <S2SV_ModStart> case PARTITION_HORZ : set_modeinfo_offsets_sb <S2SV_ModEnd> ( cm, <S2SV_ModStart> case PARTITION_MID : set_modeinfo_offsets_sb <S2SV_ModEnd> ( cm, <S2SV_ModStart> case PARTITION_MID : set_modeinfo_offsets_sb <S2SV_ModEnd> ( cm, <S2SV_ModStart> case PARTITION_MID : set_modeinfo_offsets_sb <S2SV_ModEnd> ( cm, <S2SV_ModStart> case PARTITION_MID : set_modeinfo_offsets_sb <S2SV_ModEnd> ( cm",0
165,"<S2SV_ModStart> key_ref ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) { ret = - ENOKEY ; goto error2 ; }",1
166,<S2SV_ModStart> u4_first_slice_is_aud ) { if ( 0 == ps_dec -> u1_first_slice_found ) { if ( 0 == ( ps_dec -> u1_first_slice_found = 1 ) ) { ps_dec -> u1_first_slice_found = 0 ; } if ( 0 == ( ps_dec -> u1_first_slice_found = 0 ) ) { if ( 0 == ( ps_dec -> u1_first_slice_found = 0 ) ) { if ( 0 == ( ps_dec -> u1_first_slice_found = 0 ) ) { if ( 0 == ( ps_dec -> u1_first_slice_found = 1 ) ) { ps_dec -> u1_first_slice_found = 0 ; } if ( 0 == ( ps_dec -> u1_first_slice_found = 0 ) ) { if ( 0 == ( ps_dec -> u1_first_slice_found = 0 ) ) { if ( 0 == ( ps_dec -> u1_first_slice_found = 0 ) ) { if ( 0 == ( ps_dec -> u1_first_slice,0
167,<S2SV_ModStart> var_off ) ; if (! src_known &&! dst_known ) return - EINVAL ; <S2SV_ModStart> var_off ) ; if (! src_known &&! dst_known ) return - EINVAL ;,0
168,"<S2SV_ModStart> = 0 ; if ( direntry -> d_name. len > PATH_MAX ) { cifs_dbg ( FYI, ""Path <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long"" ) ; rc = - ENAMETOOLONG ; goto lookup_out ; }",0
169,"<S2SV_ModStart> -> sk_bound_dev_if ; RCU_INIT_POINTER ( rt -> rt_opt, <S2SV_ModEnd> tcp_v4_save_options ( skb <S2SV_ModStart> tcp_v4_save_options ( skb )",0
170,"<S2SV_ModStart> { int number_of_frames = 0, number_of_keyframes = 0, encode_frame_count = 0 <S2SV_ModEnd> ; SvcInternal * <S2SV_ModStart> const si = get_svc_internal_internal ( svc_ctx ) ; if ( si == NULL ) return NULL ; svc_log_reset ( svc_ctx ) ; encode_frame_count = si -> encode_frame_count ; if ( encode_frame_count <= 0 ) return vpx_svc_get_message ( svc_ctx ) ; svc_log ( svc_ctx, SVC_LOG_INFO, ""\\n"" ) ; number_of_keyframes = encode_frame_count / si -> kf_dist + 1 ; for ( i = 0 ; i < si -> layers ; ++ i ) { if ( svc_ctx -> encoding_mode == ALT_INTER_LAYER_PREDICTION_IP && ( i == 1 || i == 3 ) ) { number_of_frames -= number_of_keyframes ; } svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.3f, <S2SV_blank>",0
171,"<S2SV_ModStart> -> sb_buffer ) { <S2SV_ModStart> sb_buffer ) ; } if ( new_cols > old_cols ) { VTermRect rect ; rect. start_row = 0 ; rect. end_row = old_rows ; rect. start_col = old_cols ; rect. end_col = new_cols ; scrollrect ( rect, first_blank_row - new_rows, 0, user ) ; vterm_screen_flush_damage ( screen ) ; delta -> row -= first_blank_row - new_rows ; } else { VTermRect rect ; rect. start_row = 0 ; rect. end_row = old_rows ; rect. start_col = old_cols ; rect. end_col = new_cols ; scrollrect ( rect, first_blank_row - new_rows, 0, user ) ; vterm_screen_flush_damage ( screen ) ; scrollrect ( rect, first_blank_row - new_rows, 0, user ) ; vterm_screen_flush_damage ( screen ) ; }",0
172,"<S2SV_ModStart> n ) { <S2SV_ModEnd> char * literal_start <S2SV_ModStart> * str ; for ( ; * str < end ; ( * str ) ++ ) { char ch = * * str ; if (! in_named_escape && ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 1 ; } else if ( ch == '{' || ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } if ( ch == '{' ) { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; return - 1 ; } } if ( ch == '}' ) { ast_error ( c, n, ""f-string: <S2SV_blank> single <S2SV_blank> \'}\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; return - 1 ; } } if ( ch == '}' ) { ast_error ( c, n, ""f-string",0
173,"<S2SV_ModStart>, g_settings_dump_location ) ; if (! dd ) dd = create_dump_dir_from_problem_data ( pd, g_settings_default_dump_location )",0
174,"<S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( dstptr, <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( dstptr + <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( dstptr + <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( dstptr + <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( dstptr + <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( dstptr + <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( dstptr + <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( dstptr + <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( dstptr + <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( dstptr + <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( dstptr + <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( dstptr + <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( dstptr + <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( dstptr + <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( dstptr + <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( dstptr + <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( dstptr + <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( dstptr + <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( dstptr + <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( dstptr + <S2SV_ModStart> ) ; } memcpy <S2SV_ModEnd> ( dstptr + <S2SV_ModStart> )",0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""%u"", 0 ) ) ; return ; }",0
176,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mv_stride <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart>",0
177,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> -> left_context ) ) ; memset ( xd -> left_seg_context, 0, sizeof ( xd -> left_seg_context ) ) ; for ( mi_col = tile -> mi_col_start ; mi_col < tile -> mi_col_end ; mi_col += MI_BLOCK_SIZE ) { MODE_INFO * * mi_8x8 = cm -> mi_grid_visible + idx_str ; MODE_INFO * * prev_mi_8x8 = cm -> prev_mi_grid_visible + idx_str ; BLOCK_SIZE bsize ; cpi -> mb. source_variance = UINT_MAX ; vp9_zero ( cpi -> mb. pred_mv ) ; for ( mi_col = tile -> mi_col_start ; mi_col < tile -> mi_col_end ; mi_col += MI_BLOCK_SIZE ) { int dummy_rate = 0 ; int64_t dummy_dist = 0 ; const int",0
178,"<S2SV_ModStart> u_int8_t state ; memset ( & _dh, 0, sizeof ( _dh ) ) ;",0
179,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static void <S2SV_ModEnd> ip_options_get_finish ( struct <S2SV_ModStart> ip_options_get_finish ( struct ip_options_rcu <S2SV_ModEnd> * net, <S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * opt, <S2SV_ModStart> * opt, u32 <S2SV_ModEnd> optlen ) { <S2SV_ModStart> & 3 ) rcu_assign_pointer ( <S2SV_ModStart> __data [ optlen <S2SV_ModEnd> ] = IPOPT_END <S2SV_ModStart> = IPOPT_END ; rcu_assign_pointer ( <S2SV_ModStart> = optlen ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
180,"<S2SV_ModStart> ; if ( strcmp ( connection, ""Upgrade"" ) == 0 ) { const char * ws_version = http_request_get_header ( info -> request, ""Sec-WebSocket-Version"" ) ; if ( ws_version == NULL || strcmp ( ws_version, ""13"" )!= 0 ) goto error ; const char * ws_upgrade = http_request_get_header ( info -> request, ""Sec-WebSocket-Upgrade"" ) ; if ( ws_upgrade == NULL || strcasecmp ( ws_upgrade, ""Upgrade"" ) == 0 ) { const char * ws_version = http_request_get_header ( info -> request, ""Sec-WebSocket-Version"" ) ; if ( ws_version == NULL || strcmp ( ws_version, ""13"" )!= 0 ) goto error ; const char * ws_upgrade = http_request_get_header ( info -> request, ""Sec-WebSocket-Upgrade"" ) ; if ( ws_upgrade == NULL || strcasecmp ( ws_upgrade, ""Upgrade"" ) == 0 ) { const char * ws_upgrade = http_request_get_header ( info -> request, ""Sec-WebSocket-Upgrade"" ) ; if ( ws_upgrade ==",0
181,"<S2SV_ModStart> * findalldevs_if ; uint32 nif = 0 ; if ( pcap_findalldevs ( & alldevs, errmsgbuf ) == - 1 ) goto error ; if ( alldevs == NULL ) { if ( rpcap_senderror ( pars -> sockctrl, ver, PCAP_ERR_NOREMOTEIF, ""No <S2SV_blank> interfaces <S2SV_blank> found! <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> libpcap/WinPcap <S2SV_blank> is <S2SV_blank> properly <S2SV_blank> installed"" "" <S2SV_blank> and <S2SV_blank> you <S2SV_blank> have <S2SV_blank> the <S2SV_blank> right <S2SV_blank> to <S2SV_blank> access <S2SV_blank> to <S2SV_blank> the <S2SV_blank> remote <S2SV_blank> device."", errbuf ) == - 1 ) { rpcapd_log ( LOGPRIO_ERROR, ""Send <S2SV_blank> to <S2SV_blank> client <S2SV_blank> failed: <S2SV_blank> %s"", errbuf ) ; return - 1 ; } return 0 ; } for ( d = alldevs ; d!= NULL ; d = d -> next ) { nif ++ ; if ( d -> description ) plen += strlen ( d -> description ) ; if ( d -> name ) plen += strlen ( d -> name ) ; plen += sizeof ( struct rpcap_findalldevs_if ) ; for ( address = d -> addresses ; address!= NULL",0
182,"<S2SV_ModStart>, client_uid, DUMP_DIR_MODE_DEFAULT <S2SV_ModEnd> ) ; if",0
183,"<S2SV_ModStart> x += 2 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 8 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x + bit, index ) ; q ++ ; } p ++ ; } if ( ( image -> columns % 8 )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 8 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x + bit, index ) ; q ++ ; } p ++ ; } if ( ( image -> columns % 8 )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 8 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x + bit, index ) ; q ++ ; } p ++ ; } if (! SyncAuthentic",0
184,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
185,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; }",0
186,"<S2SV_ModStart> ; if ( ND_TTEST2 ( bp [ 0 ], len ) <S2SV_ModEnd> ) { ND_PRINT <S2SV_ModStart> ; if ( ND_TTEST2 ( bp [ 0 ], len ) <S2SV_ModEnd> ) { ND_PRINT <S2SV_ModStart> ; if ( ND_TTEST2 ( bp [ 0 ], len ) <S2SV_ModEnd> ) { ND_PRINT <S2SV_ModStart> ; if ( ND_TTEST2 ( bp [ 0 ], len ) <S2SV_ModEnd> ) { ND_PRINT <S2SV_ModStart> ; if ( ND_TTEST2 ( bp [ 0 ], len ) <S2SV_ModEnd> ) { ND_PRINT <S2SV_ModStart> ; if ( ND_TTEST2 ( bp [ 0 ], len ) <S2SV_ModEnd> ) { ND_PRINT <S2SV_ModStart> ; if ( ND_TTEST2 ( bp [ 0 ], len ) <S2SV_ModEnd> ) { ND_PRINT <S2SV_ModStart> ; if ( ND_TTEST2 ( bp [ 0 ], len ) <S2SV_ModEnd> ) { ND_PRINT <S2SV_ModStart> ; if ( ND_TTEST2 ( bp [ 0 ], len ) <S2SV_ModEnd> ) { ND_PRINT <S2SV_ModStart> ; if ( ND_TTEST2 ( bp [ 0 ], len ) <S2SV_ModEnd> ) { ND_PRINT <S2SV_ModStart> ; if (",0
187,"<S2SV_ModStart>! ptrace_has_cap ( task_cred ( task ) <S2SV_ModEnd> -> user_ns,",0
188,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
189,<S2SV_ModStart> ; if ( 0 == payload_bits_remaining ) { ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 0 ; ps_parse -> s_sei_params. i4_sei_user_data_registered_ITU_T_T35 = 0 ; ps_parse -> s_sei_params. i4_sei_user_data_registered_ITU_T_T36 = 0 ; ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ; } if (,0
190,"<S2SV_ModStart> ; sde = kzalloc_node ( num_engines, GFP_KERNEL, dd -> node ) ; if (! sde ) { ret = - ENOMEM ; <S2SV_ModEnd> goto err_free_rhashtable ; <S2SV_ModStart> goto err_free_rhashtable ; } <S2SV_ModStart> ; sde = kzalloc_node ( num_engines, GFP_KERNEL, dd -> node ) ; if (! sde ) { ret = - ENOMEM ; goto err_free_rhashtable ; } <S2SV_ModStart> ; sde = kzalloc_node ( num_engines, GFP_KERNEL, dd -> node ) ; if (! sde ) goto err_free_rhashtable ; sde = kzalloc_node ( num_engines, GFP_KERNEL, dd -> node ) ; if (! sde ) goto err_free_rhashtable ; if (! sde ) { ret = - ENOMEM ; goto err_free_rhashtable ; }",0
191,"<S2SV_ModStart> * name, my_bool <S2SV_ModEnd> rep_quick ) { <S2SV_ModStart> ) ; } if (! ( param -> testflag & T_SILENT ) ) { DBUG_PRINT ( ""info"", ( ""repairing <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ) ; mysql_mutex_destroy ( mi_key_mutex_MI_SORT_INFO_mutex, MY_MUTEX_DESTROY_FAST ) ; mysql_cond_destroy ( mi_key_cond_MI_SORT_INFO_cond, MY_MUTEX_DESTROY_FAST ) ; } <S2SV_ModStart> ) ) ; if (! ( param -> testflag & T_SILENT ) ) { DBUG_PRINT ( ""repairing <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; mysql_mutex_destroy ( mi_key_mutex_MI_SORT_INFO_mutex, MY_MUTEX_DESTROY_FAST ) ; mysql_cond_destroy ( mi_key_cond_MI_SORT_INFO_cond, MY_",0
192,"<S2SV_ModStart> ) ; } buflen = pq_getmsglen ( buf, 4 ) ; if ( buflen < 0 ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""hstore_recv"" ) ) ) ; <S2SV_ModStart> Pairs ) ) ; if ( buflen < 0 ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""hstore_recv"" ) ) )",0
193,"<S2SV_ModStart> val ) ; if (! <S2SV_ModStart>, val ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> invalid <S2SV_blank> variable"", r -> name )",0
194,"<S2SV_ModStart> } if ( strlen ( c -> buf ) > sizeof ( query ) ) { return bad_request ( c, 400, __LINE__ ) ; } if (",0
195,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> 256 ] ; tran_low_t <S2SV_ModEnd> * outptr = <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16",0
196,"<S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( old_exec, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( new_exec, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( groups [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( groups [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( groups [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( groups [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( groups [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( groups [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( groups [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( groups [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( groups [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( groups [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( groups [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( groups [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( groups [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( groups [ <S2SV_ModStart> ; if ( g_str_has_",0
197,"<S2SV_ModStart> '\\0' ) ; size_t len = <S2SV_ModEnd> strlen ( filename <S2SV_ModStart> ) + 5 ; char * temp_filename = osi_calloc ( len <S2SV_ModStart> if (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } strncpy ( temp_filename, filename, len ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } for ( const list_node_t * node = list_begin ( config -> sections ) ; node!= list_end ( config -> sections ) ; node = list_next ( node ) ) { const section_t * section = ( const section_t * ) list_node ( node ) ; fprintf ( fp, ""[%s]\\n"", section -> name ) ; for ( const entry_t * entry = ( const entry_",0
198,<S2SV_ModStart> tptr ) ; ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> tptr ) ; ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> tptr ) ; ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> tptr ) ; ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> tptr ) ; ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> tptr ) ; ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> tptr ) ; ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> tptr ) ; ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> tptr ) ; ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> tptr ) ; ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> tptr ) ; ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> tptr ) ; ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> tptr ) ; ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> tptr ) ; ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> t,0
199,"<S2SV_ModStart> userData, target <S2SV_ModEnd> ) ; ctxt",0
200,"<S2SV_ModStart> ( ) ; size_t <S2SV_ModEnd> rv = Socket_print <S2SV_ModStart> ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.1\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %zu\\r\\n"" <S2SV_ModEnd> ""%s"" ""\\r\\n"" ""%s""",0
201,"<S2SV_ModStart> ) ; } if ( safe_chown ( dest, getuid ( ), getgid ( ) ) < 0 ) errExit ( ""safe_chown"" ) ; if ( safe_chmod ( dest, S_IRUSR | S_IWUSR ) < 0 ) errExit ( ""safe_chmod"" ) ; unlink ( src ) ; <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
202,<S2SV_ModStart>!= BFA_STATUS_OK ) { kfree ( fcstats ) ; <S2SV_ModStart> return NULL ; },1
203,"<S2SV_ModStart> -> x = clampf ( 1.0f, <S2SV_ModEnd> value -> x <S2SV_ModStart> -> x ), 0.0f <S2SV_ModStart> -> y = clampf ( 1.0f, <S2SV_ModEnd> value -> y <S2SV_ModStart> -> y ), 0.0f <S2SV_ModStart> -> z = clampf ( 1.0f, <S2SV_ModEnd> value -> z <S2SV_ModStart> -> z = 0.0f <S2SV_ModEnd> ; } <S2SV_null>",0
204,<S2SV_ModStart> -> sasl_mechanism ; if ( rec -> sasl_mechanism ) g_free ( rec -> sasl_mechanism ) ; <S2SV_ModStart> -> sasl_username ; if ( rec -> sasl_username ) g_free ( rec -> sasl_username ) ; <S2SV_ModStart> -> sasl_password ; if ( rec -> sasl_password ) g_free ( rec -> sasl_password ),0
205,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
206,"<S2SV_ModStart> c ; size_t <S2SV_ModEnd> tcount, o <S2SV_ModStart>, datao ; if ( buf_size < 6 ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; }",0
207,"<S2SV_ModStart> ""myisamchk"" ) ; if (! ( info = mi_open ( filename, ( param -> testflag & ( T_DESCRIPT | T_READONLY ) )? O_RDONLY : O_RDWR, 0 ) ) ) { param -> error_printed = 1 ; mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> MyISAM-table"", filename ) ; } else if (! ( info = mi_open ( filename, ( param -> testflag & ( T_DESCRIPT | T_READONLY ) )? O_RDONLY : O_RDWR ) ) ) ) { param -> error_printed = 1 ; mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> MyISAM-table"", filename ) ; } else if (! ( info = mi_open ( filename, ( param -> testflag & ( T_DESCRIPT | T_READONLY ) ) ) ) ) { param -> error_printed = 1 ; mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> MyISAM",0
208,"<S2SV_ModStart> olen ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> long hex ; <S2SV_ModEnd> if (! <S2SV_ModStart> hex ) ; if (! <S2SV_ModEnd> Curl_convert_from_network ( handle <S2SV_ModStart>, 1 ) <S2SV_ModEnd> ) { free",0
209,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
210,<S2SV_ModStart> ; def -> <S2SV_ModEnd> session_setup = usm_session_init,0
211,<S2SV_ModStart> NULL ; return <S2SV_ModEnd> match ( prog,0
212,<S2SV_ModStart> idx ] ; <S2SV_ModEnd> switch ( action <S2SV_ModStart> ) ; } <S2SV_ModEnd> return SNMP_ERR_NOERROR ;,0
213,<S2SV_ModStart> ; break ; case 3 : { CheckNumberPixels ( 8 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 6 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 4 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 2 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 1 ) & 0x03 ) ; break ; } case 4 : { CheckNumberPixels ( 8 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 3 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 1 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; break ; },0
214,<S2SV_ModStart> timer ) ; spin_lock_irq ( & slave_active_lock ) ; spin_lock ( & timer -> lock ) ; <S2SV_ModStart> open_list ) { <S2SV_ModEnd> list_move_tail ( & <S2SV_ModStart> = NULL ; list_del_init ( & slave -> ack_list ) ; <S2SV_ModStart> slave_active_lock ) ; spin_unlock ( & timer -> lock ) ;,0
215,<S2SV_ModStart> -> u1_dpb_commands_read ) { <S2SV_ModStart> ps_dec ) ; } else { ps_dec -> u4_bitoffset = 0 ; },0
216,"<S2SV_ModStart> decode ) { uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > info -> rasterSize || widthOverflow > 0 || heightOverflow > 0 ) { void * tmpRasterBits = reallocarray ( info -> rasterBits, newRasterSize ) ; <S2SV_ModStart> -> originalHeight ; <S2SV_ModEnd> if ( newRasterSize",0
217,"<S2SV_ModStart> validator -> user ) ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> passwd, 0, ""*()"" ) ; if ( size!= conn -> validator -> passwd. len ) return ret_error ; ret = init_filter ( ldap, props, conn ) ; if ( ret!= ret_ok ) return ret ; re = ldap_search_s ( ldap -> conn, props -> basedn. buf, LDAP_SCOPE_SUBTREE, props -> passwd. buf, attrs, 0, & message ) ; if ( re!= LDAP_SUCCESS ) { LOG_ERROR ( CHEROKEE_ERROR_VALIDATOR_LDAP_SEARCH, props -> passwd. buf ) ; return ret_error ; } TRACE ( ENTRIES, ""subtree <S2SV_blank> search <S2SV_blank> (%s): <S2SV_blank> done\\n"", props -> passwd. buf ) ; re = ldap_count_entries ( ldap -> conn, message ) ; if ( re!= 1 ) { ldap_msgfree ( message ) ; return ret_not_found ; } first = ldap_first_entry ( ldap -> conn, message ) ; if ( first == NULL ) { ldap_msgfree ( message ) ;",0
218,<S2SV_ModStart> bus ] ; if ( bi == NULL ) return <S2SV_ModEnd> ; si =,0
219,"<S2SV_ModStart>, timeo ) <S2SV_ModEnd> ; if (",1
220,<S2SV_ModStart> += 9 ; ( <S2SV_ModStart> isspace ( * ( s + 9 ) <S2SV_ModEnd> ) ; s <S2SV_ModStart> t &&! ( <S2SV_ModStart> isspace ( * ( t + 1 ) <S2SV_ModEnd> ) ) t,0
221,"<S2SV_ModStart>. active_set ; UIPC_LOCK ( ) ; uipc_check_interrupt_locked ( ) ; uipc_check_task_flags_locked ( ) ; uipc_check_fd_locked ( UIPC_CH_ID_AV_AUDIO ) ; for ( ch_id = 0 ; ch_id < UIPC_CH_NUM ; ch_id ++ ) { if ( ch_id!= UIPC_CH_ID_AV_AUDIO ) uipc_check_fd_locked ( ch_id ) ; } UIPC_UNLOCK ( ) ; <S2SV_ModStart> NULL, NULL <S2SV_ModEnd> ) ; if",0
222,"<S2SV_ModStart> msixcap msixcap ; if ( msgnum < 1 || msgnum > MAX_MSIX_TABLE_ENTRIES ) return - EINVAL ; if ( barnum < 0 || barnum >= PCIR_MAX_BAR_0 ) return - EINVAL <S2SV_ModEnd> ; tab_size = <S2SV_ModStart> msix ) ; if (! <S2SV_ModStart>, msgnum ) ) return - EINVAL",0
223,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",1
224,<S2SV_ModStart> == NULL ) return KRB5KDC_ERR_PREAUTH_FAILED <S2SV_ModEnd> ; status = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> X509_NAME_free ( is,0
225,<S2SV_ModStart> <S2SV_null> <S2SV_null> static MV_REFERENCE_FRAME <S2SV_ModEnd> select_tx_mode ( const <S2SV_ModStart> cpi ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; <S2SV_ModStart> lossless ) { frame_type = get_frame_type ( cpi ) ; <S2SV_ModStart> else if ( frame_type <S2SV_ModEnd> == 0 ) <S2SV_ModStart> else if ( frame_type <S2SV_ModEnd> == USE_LARGESTALL ) <S2SV_ModStart> USE_LARGESTALL ) { frame_type = get_frame_type ( cpi ) ; <S2SV_ModStart> USE_FULL_RD ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ frame_type ] > cpi -> rd_tx_select_threshes [ frame_type ] [ TX_MODE_SELECT ]? ALLOW_32X32 : TX_MODE_SELECT ; } else { unsigned int total = 0 ; int i ; for ( i = 0 ; i < TX_SIZES ; ++ i ) total += cpi -> tx_stepdown_count [ i ] ; if,0
226,"<S2SV_ModStart> ) ; } if ( im -> gdes [ i ]. gf == GF_VDEF ) { localtime_r ( & im -> gdes [ i ]. vf. when, & tmvdef ) ; } else if ( im -> gdes [ i ]. gf == GF_HWPREDICT ) { localtime_r ( & im -> gdes [ i ]. vf. when, & tmvdef ) ; } else if ( im -> gdes [ i ]. gf == GF_MHWPREDICT ) { localtime_r ( & im -> gdes [ i ]. vf. when, & tmvdef ) ; } else if ( im -> gdes [ i ]. gf == GF_MHWPREDICT ) { localtime_r ( & im -> gdes [ i ]. vf. when, & tmvdef ) ; } else if ( im -> gdes [ i ]. gf == GF_MHWPREDICT ) { localtime_r ( & im -> gdes [ i ]. vf. when, & tmvdef ) ; } else if ( im -> gdes [ i ]. gf == GF",0
227,<S2SV_ModStart> ( buf1 -> tile_size <S2SV_ModEnd> < buf2 -> <S2SV_ModStart> < buf2 -> tile_size <S2SV_ModEnd> ) { return <S2SV_ModStart> ( buf1 -> tile_size <S2SV_ModEnd> == buf2 -> <S2SV_ModStart> == buf2 -> tile_size <S2SV_ModEnd> ) { return,0
228,<S2SV_ModStart> ) + size ; if ( unlikely (! sz ) ) return NULL,0
229,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,1
230,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs,",0
231,"<S2SV_ModStart> ; r = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, button_dispatch, & b -> manager -> event_lock ) ; if ( r < 0 ) { log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } r = sd_event_add_io ( b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r < 0 ) { log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } r = sd_event_add_io ( b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r < 0 ) { log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } log_info ( ""Watching <S2SV_blank> system <S2SV_blank> buttons <S2SV_blank> on <S2SV_blank> /dev/input/%s <S2SV_blank> (%s)"", b -> name, name ) ; return 0 ; fail : b -> fd",0
232,<S2SV_ModStart> ( ) ; errors += test_curl_off_t_formatting ( ) ; errors += test_curl_off_t_formatting2 ( ) ; errors += test_curl_off_t_formatting3 ( ) ; errors += test_curl_off_t_formatting4 ( ) ; errors += test_string_formatting5 ( ) ; errors += test_string_formatting6 ( ) ; errors += test_string_formatting7 ( ) ; errors += test_string_formatting7 ( ) ; errors += test_string_formatting8 ( ) ; errors += test_string_formatting9 ( ) ;,0
233,<S2SV_ModStart> -> lun ) sas_eh_finish_cmd <S2SV_ModEnd> ( cmd ),1
234,"<S2SV_ModStart>, end_col_offset ; if ( TYPE ( CHILD ( n, funcdef ) )!= FUNCTION ) return NULL ; <S2SV_ModStart> 2 ; } if ( TYPE ( CHILD ( n, name_i + 4 ) ) == FUNCTION ) { body = ast_for_funcdef ( c, CHILD ( n, name_i + 4 ) ) ; if (! body ) return NULL ; name_i += 4 ; } <S2SV_ModStart> ( is_async ) { if ( TYPE ( CHILD ( n, name_i + 5 ) ) == FUNCTION ) { body = ast_for_funcdef ( c, CHILD ( n, name_i + 5 ) ) ; if (! body ) return NULL ; <S2SV_ModStart> returns, LINENO ( n0 ), n0 -> n_col_offset, end_lineno, end_col_offset, c -> c_arena ) ; } else { body = ast_for_funcdef ( c, CHILD ( n, name_i + 5 ) ) ; } } else { body = ast_for_suite ( c, CHILD ( n, name_i + 5 ) ) ; if (! body ) return NULL ; get_last_",0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns ) ; if ( status == MagickFalse ) { SetImageExtent ( image, image -> rows ) ; SetImageExtent ( image, image -> cols ) ; SetImageExtent ( image, image -> rows ) ; SetImageExtent ( image, image -> rows ) ; status = SetImageExtent ( image, image -> columns ) ; if ( status == MagickFalse ) { SetImageExtent ( image, image -> rows ) ; SetImageExtent ( image, image -> rows ) ; SetImageExtent ( image, image -> columns ) ; } else { SetImageExtent ( image, image -> rows ) ; status = SetImageExtent ( image, image ) ; if ( status == MagickFalse ) { SetImageExtent ( image, image ) ; return NULL ; } } }",0
237,,1
238,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
239,"<S2SV_ModStart> case SEEK_SET : <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> headindex = position ; break ; case SEEK_CUR : if ( psf -> headindex + position < 0 ) break ; if ( psf -> headindex >= SIGNED_SIZEOF ( psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; if ( psf -> headindex + position <= psf -> headend ) { psf -> headindex += position ; break ; } ; if ( psf -> headindex + position > psf -> headend ) { psf -> headindex = psf -> headend ; psf_fseek ( psf, position, SEEK_CUR ) ; break ; } ; if ( psf -> headindex + position >= psf -> headend ) { psf -> headindex = psf -> headend ; psf_fseek ( psf, position, SEEK_CUR ) ; break ; } ; if ( psf -> headindex + position <= psf -> headend ) { psf -> headindex = psf -> headend ; psf_fseek ( psf, position, SEEK_CUR ) ; break ; } ; if ( psf -> headindex + position > psf -> headend ) { psf -> headindex = psf -> head",0
240,"<S2SV_ModStart> u4_ofst ) ; memset ( ps_cabac -> au1_ctxt_models, 0, sizeof ( ps_cabac -> au1_ctxt_models ) ) ;",0
241,<S2SV_ModStart> ; } } if ( off < ctx -> size && CH ( off )!= _T ( '\\n' ) && CH ( off )!= _T ( '\\r' ) && CH ( off )!= _T ( '\\n' ) && CH ( off )!= _T ( '\\t' ) && CH ( off )!= _T ( '\\n' ) && CH ( CH ( off ) )!= _T ( '\\r' ) && CH ( CH ( off ) )!= _T ( '\\n' ) && CH ( CH ( off ) )!= _T ( '\\n' ) && CH ( CH ( off ) )!= _T ( '\\r' ) && CH ( CH ( off ) )!= _T ( '\\n' ) && CH ( CH ( off ) )!= _T ( '\\t' ) && CH ( CH ( off ) )!= _T ( '\\n' ) && CH ( CH ( off ) )!= _T ( '\\r' ) && CH ( CH ( off ) )!= _T ( '\\0' ) ) { line -> type = MD_LINE_BLANK ; break ; },0
242,<S2SV_ModStart> perf_event_context * ctx <S2SV_ModEnd> ; struct task_struct <S2SV_ModStart> task_struct * task ; ctx = perf_event_ctx_lock ( event ) <S2SV_ModStart> event ) ; perf_event_ctx_unlock ( event ) <S2SV_ModEnd> ; } <S2SV_null>,0
243,<S2SV_ModStart> -> post_proc_flag = <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> noise_level ; # ifdef CONFIG_POSTPROC_VISUALIZER flags -> display_ref_frame_flag = ctx -> dbg_color_ref_frame_flag ; flags -> display_mb_modes_flag = ctx -> dbg_color_mb_modes_flag ; flags -> display_b_modes_flag = ctx -> dbg_color_b_modes_flag ; flags -> display_mv_flag = ctx -> dbg_display_mv_flag ; # else <S2SV_ModEnd> flags -> display_ref_frame_flag <S2SV_ModStart> -> dbg_display_mv_flag ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
244,"<S2SV_ModStart> = 0 ; if ( msg_len < sizeof ( struct olsr_msg4 ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> too <S2SV_blank> short <S2SV_blank> msg_len <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6, msg_len ) ) ; goto trunc ; } <S2SV_ModStart> ) ) ; if ( msg_len < sizeof ( struct olsr_msg6 ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> too <S2SV_blank> short <S2SV_blank> msg_len <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6, msg_len ) ) ; goto trunc ; } <S2SV_ModStart> ) ) ; if ( msg_len < sizeof ( struct olsr_msg4 ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> too <S2SV_blank> short <S2SV_blank> msg4 <S2SV_blank> len <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6, msg_len ) ) ; goto trunc ; } <S2SV_ModStart> ) ) ; if ( msg_len < sizeof ( struct olsr_msg4 ) ) { ND_PRINT ( ( ndo,",0
245,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> int64_t store_reg [ <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vpx_usec_timer_start ( & <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,0
246,"<S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file <S2SV_blank> %s\\n"", src <S2SV_ModEnd> ) ; exit <S2SV_ModStart> ( rv ) { <S2SV_ModStart> ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; } else { fs_logger2 ( ""clone"", dest ) ; } _exit ( 0 ) ; } waitpid ( child, NULL, 0 ) ; if ( chown ( dest, getuid ( ), getgid ( ) ) == - 1 ) errExit ( ""fchown"" ) ; if ( chmod ( dest, 0600 ) == - 1 ) errExit ( ""fchmod"" ) ; return 1 ; } return 0 <S2SV_ModEnd> ; } <S2SV_null>",0
247,<S2SV_ModStart> ) ) ; if ( sfb > IXHEAACD_MAX_PATCH ) sfb = IXHEAACD_MAX_PATCH ; <S2SV_ModStart> ) ) ; if ( sfb > IXHEAACD_MAX_PATCH ) sfb = IXHEAACD_MAX_PATCH ; <S2SV_ModStart> ) ) ; if ( sfb > IXHEAACD_MAX_PATCH ) sfb = IXHEAACD_MAX_PATCH ; <S2SV_ModStart> ) ) ; if ( sfb > IXHEAACD_MAX_PATCH ) sfb = IXHEAACD_MAX_PATCH ; <S2SV_ModStart> ) ) ; if ( sfb > IXHEAACD_MAX_PATCH ) sfb = IXHEAACD_MAX_PATCH ; <S2SV_ModStart> ) ) ; if ( sfb > IXHEAACD_MAX_PATCH ) sfb = IXHEAACD_MAX_PATCH ; <S2SV_ModStart> ) ) ; if ( sfb > IXHEAACD_MAX_PATCH ) sfb = IXHEAACD_MAX_PATCH ;,0
248,"<S2SV_ModStart> prov_spec = parsed_require_line <S2SV_ModEnd> ; spec = <S2SV_ModStart> ; if (! lua_checkstack ( L, prov_spec -> args -> nelts ) ) { ap_log_rerror ( APLOG_MARK, APLOG_ERR, 0, r, APLOGNO ( 02318 ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> \'%s\' <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> function)"", prov_spec -> function_name, prov_spec -> file_name ) ; ap_lua_release_state ( L, spec, r ) ; return AUTHZ_GENERAL_ERROR ; } if (",0
249,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> rows, image -> cols ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
250,<S2SV_ModStart> (! proto_end ||! * proto_end,0
251,"<S2SV_ModStart> end = path ; if ( end >= path_len ) return - FDT_ERR_NOSPACE <S2SV_ModStart> tag ) { case FDT_END : if ( depth == FDT_MAX_DEPTH ) return - FDT_ERR_BADSTRUCTURE ; break ; <S2SV_ModStart> - FDT_ERR_BADSTRUCTURE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end!= path + 1 ) * end ++ = '/' ; strcpy ( end, name ) ; end += len ; stack [ depth ] = want ; if ( want == 1 ) stop_at = offset ; if ( str_in_list ( path, inc, inc_count ) ) want = 2 ; break ; case FDT_BEGIN_NODE : depth ++ ; if ( depth == FDT_MAX_DEPTH ) return - FDT_ERR_BADSTRUCTURE ; if ( end!= path + 1 ) * end ++ = '/' ; strcpy ( end, name ) ; end += len ; stack [ depth ] = want ; if ( want == 1 ) stop_at = offset ; if ( str_in_list ( path, inc, inc_count",0
252,"<S2SV_ModStart> ( server. bgsavechildpid == - 1 && server. bgrewritechildpid == - 1 ) { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ), zmalloc_used_memory ( ) ) ; } else if ( server. bgsavechildpid == - 1 && server. bgrewritechildpid == - 1 ) { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ), zmalloc_used_memory ( ) ) ; } else if ( server. bgsavechildpid == - 1 && server. bgrewritechildpid == - 1 ) { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ), zmalloc_used_memory ( )",0
253,<S2SV_ModStart> channel ) ; <S2SV_ModEnd> set_description ( client,1
254,<S2SV_ModStart> book -> dim && i < n,1
255,"<S2SV_ModStart> action ) { if ( r < 0.0 ) return ; <S2SV_ModStart> action ) ; outpos += sprintf ( outpos, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c <S2SV_blank> %s\\n"", - r, r * BzK, - r, action ) ;",0
256,<S2SV_ModStart> { if ( other_w < 0 || other_h < 0 || this_w < 0 || this_h < 0 ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } if ( <S2SV_ModStart> ) ) { return ; } if ( sf -> x_scale_fp == REF_INVALID_SCALE || sf -> y_scale_fp == REF_INVALID_SCALE ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } if ( sf -> x_scale_fp == REF_INVALID_SCALE ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } if ( sf -> y_scale_fp == REF_INVALID_SCALE ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } if ( sf -> x_step_q4 == 16 ) { if ( sf -> y_step_q4 == 16 ),0
257,"<S2SV_ModStart> (! sock ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( buf ) { if ( oe_memset_s ( buf, count, 0, count )!= OE_OK ) OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( oe_syscall_recv_ocall ( & ret, sock -> host_fd, buf, count, flags )!= OE_OK ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( buf ) { if ( oe_memset_s ( buf, count, 0, count )!= OE_OK ) OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( oe_syscall_recv_ocall ( & ret, sock -> host_fd, buf, count, flags )!= OE_OK ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if",0
258,<S2SV_ModStart> ; if ( msg. msg_namelen < sizeof ( src_info ) ) return - EINVAL ; if (,0
259,"<S2SV_ModStart> ( ) ; <S2SV_ModEnd> sctp_v6_protosw_exit ( ) <S2SV_ModStart> ( ) ; unregister_pernet_subsys ( & sctp_net_ops ) ; sctp_v4_protosw_exit ( ) ; sctp_v6_pf_exit ( ) ; sctp_v4_pf_exit ( ) ; sctp_sysctl_unregister ( ) ; free_pages ( ( unsigned long ) sctp_assoc_hashtable, get_order ( sctp_assoc_hashsize * sizeof ( struct sctp_hashbucket ) ) ) ; kfree ( sctp_ep_hashtable ) ; free_pages ( ( unsigned long ) sctp_port_hashtable, get_order ( sctp_port_hashsize * sizeof ( struct sctp_bind_hashbucket ) ) ) ; percpu_counter_destroy ( & sctp_sockets_allocated ) ; rcu_barrier ( ) ; kmem_cache_destroy ( sctp_chunk_cachep ) ; kmem_cache_destroy ( sctp_bucket_cachep ) ;",0
260,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void show_psnr (,0
261,<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen (,1
262,"<S2SV_ModStart> ; TRACE_DEBUG ( ""CIDER=0x%04x"" <S2SV_ModEnd> PRIX16 ""\\r\\n"", <S2SV_ModStart>, KSZ8851_REG_CIDER ) ) ; TRACE_DEBUG ( ""PHY1ILR=0x%04x"" <S2SV_ModEnd> PRIX16 ""\\r\\n"", <S2SV_ModStart>, KSZ8851_REG_PHY1ILR ) ) ; TRACE_DEBUG ( ""PHY1IHR=0x%04x"" <S2SV_ModEnd> PRIX16 ""\\r\\n"", <S2SV_ModStart>, KSZ8851_REG_PHY1IHR ) ) ; if ( ksz8851ReadReg ( interface, KSZ8851_REG_CIDER )!= KSZ8851_REV_A3_ID ) { return ERROR_WRONG_IDENTIFIER ; } ksz8851DumpReg ( interface ) ; context -> frameId = 0 ; context -> txBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; context -> rxBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; if ( context -> txBuffer == NULL || context -> rxBuffer == NULL ) { memPoolFree ( context -> txBuffer )",0
263,"<S2SV_ModStart> skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
264,"<S2SV_ModStart> IMAGE_SIZE_INVAL ) ) <S2SV_ModEnd> return - ENOEXEC <S2SV_ModStart> - ENOEXEC ; <S2SV_ModEnd> bootstage_mark ( bootstage_id <S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; if ( fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; } if ( fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; } bootstage_mark ( bootstage_id + BOOTSTAGE_SUB_FORMAT_OK ) ; if ( fit_uname ) { bootstage_mark ( bootstage_id + BOOTSTAGE_SUB_UNIT_NAME ) ; noffset = fit_image_get_node ( fit, fit_uname ) ; } else { bootstage_",0
265,"<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> uinput_fd, UI_DEV_DESTROY )",1
266,<S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> = rc -> avg_frame_bandwidth <S2SV_ModEnd> ; # else,0
267,"<S2SV_ModStart> i ], ""-u"" ) == 0 ) if ( strcmp ( argv [ i ], ""-u"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""-u"" ) ; argv [ 0 ] = path ; setuid ( 0 ) ; setgid ( 0 ) ; execv ( path, ( char * const * ) argv ) ; perror ( path ) ; return 1 ; } for ( i = 1 ; i < argc ; i ++ ) if ( strcmp ( argv [ i ],",0
268,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
269,"<S2SV_ModStart> ib ] ; dequant_ptr = d -> dequant ; coeff_ptr = b -> coeff ; qcoeff_ptr = b -> qcoeff ; dqcoeff_ptr = d -> dqcoeff ; i0 =! type ; eob = * d -> eob ; rdmult = mb -> rdmult * err_mult ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ; rddiv = mb -> rddiv ; best_mask [ 0 ] = best_mask [ 1 ] = 0 ; tokens [ eob ] [ 0 ]. token = DCT_EOB_TOKEN ; tokens [ eob ] [ 0 ]. error = 0 ; tokens [ eob ] [ 0 ]. qc = 0 ; * ( tokens [ eob ] + 1 ) = * ( tokens [ eob ] + 0 ) ; next = eob ; for ( i = eob ; i -- > i0 ; ) { int dx ; int dx2 ; rc = vp8_default_zig_zag1 ( dx, dx ) ; rc = vp8_default_zig",0
270,"<S2SV_ModStart> FN_REFLEN ] ; my_snprintf ( buff, sizeof ( buff ), ""%s"", opt_basedir ) ; # ifdef __WIN__ strncat ( buff, ""/"", sizeof ( buff ) - 1 ) ; # else strncat ( buff, FN_DIRSEP, sizeof ( buff ) - 1 ) ; # endif buff [ sizeof ( buff ) - 1 ] = 0 ; my_free ( opt_basedir ) ; opt_basedir = my_strdup ( buff, MYF ( MY_FAE ) ) ; } } if (! opt_no_defaults && ( ( error = get_default_values ( ) ) ) ) { error = - 1 ; goto exit ; } strcpy ( operation, """" ) ; if ( ( error = check_options ( argc, argv, operation ) ) ) { goto exit ; } if ( opt_verbose ) { printf ( ""# <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> basedir <S2SV_blank> = <S2SV_blank> %s\\n"", opt_basedir ) ; printf ( ""# <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> datadir <S2SV_blank> = <S2SV_blank> %s\\n"", opt_datadir ) ; printf ( ""# <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> plugin_ini <S2SV_blank> = <S2SV_blank> %s\\n",0
271,<S2SV_ModStart> decrypt_cb ) { ptrdiff_t <S2SV_ModEnd> n = ( <S2SV_ModStart> n = ( ptrdiff_t <S2SV_ModEnd> ) ( data_end,0
272,"<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
273,"<S2SV_ModStart> * returnrate, RATE_DISTORTION <S2SV_ModEnd> * returndistortion, <S2SV_ModStart> int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # else unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # endif # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best_rd_sse = INT_MAX ; # endif # endif mode_mv = mode_mv_sb [ sign_bias ] ; best_ref_mv. as_int = 0 ; best_mode. rd = INT_MAX ; best_mode. yrd = INT_MAX ; best_mode. intra_rd = INT_MAX ; # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX ; best_rd_sse = INT_MAX ; # endif # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_",0
274,"<S2SV_ModStart> goto error ; if ( stat ( h -> filename, & statbuf ) == - 1 ) goto error ;",0
275,"<S2SV_ModStart> ; UWORD8 u1_profile_idc = 0, u1_level_idc = 0, u1_seq_parameter_set_id = 0 <S2SV_ModEnd> ; UWORD16 i2_max_frm_num",0
276,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * params = ( vpx_svc_parameters_t * ) <S2SV_ModStart> -> cpi ; <S2SV_ModEnd> if ( params <S2SV_ModStart> return VPX_CODEC_INVALID_PARAM ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = params -> min_quantizer ; set_encoder_config ( & ctx -> oxcf, & ctx -> cfg, & ctx -> extra_cfg ) ; vp9_change_config ( ctx -> cpi, & ctx -> oxcf <S2SV_ModEnd> ) ; return",0
277,"<S2SV_ModStart> out ) { uint32 <S2SV_ModEnd> bitspersample, samplesperpixel <S2SV_ModStart> ; uint16 input_compression = 0, input_photometric = 0 <S2SV_ModEnd> ; copyFunc cf",0
278,"<S2SV_ModStart> a ) { char * pn ; char c ; int r ; struct stat st ; pn = a -> name ; if ( archive_strlen ( & ( a -> path_safe ) ) > 0 ) { char * p = a -> path_safe. s ; while ( * pn!= '\\0' && ( * p == * pn ) ) ++ p, ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '/' ) ) ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '/' ) ) ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '/' ) ) ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '\\0' ) ) ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '/' ) ) ++ pn ; c = pn [ 0 ] ; while ( pn [ 0 ]!= '\\0' && ( * pn!= '/' ) ) ++ pn ; c = pn [ 0 ]",0
279,<S2SV_ModStart> unsigned int link_count = 0 <S2SV_ModStart> ibh ) { <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> ibh ) { <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> ibh ) { <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> ibh ) { <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> ibh ) { <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> ibh ) { <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> ibh ) { <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> ibh ) { <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> ibh ) { <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> ibh ) { <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> ibh ) { <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> ibh ) { <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> ibh ) { <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> ibh ) { <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> ibh ) { <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> ibh ) { <S2SV_ModEnd>,0
280,"<S2SV_ModStart> tx_size_uv = get_uv_tx_size ( mbmi ) ; const int filter_level = get_filter_level ( lfi_n, mbmi ) ; uint64_t * const left_y = & lfm -> left_y [ tx_size_y ] ; uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const left_uv = & lfm -> left_uv [ tx_size_uv ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_y = & lfm -> int_4x4_y ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv ; int i ; if (! filter_level ) { return ; } else { const int w = num_8x8_blocks_wide_lookup [ block_size ] ; const int h = num_8x8_blocks_high_lookup [ block_size ] ; int index = shift",0
281,"<S2SV_ModStart> mq_ops ) { spin_lock_irqsave_nested <S2SV_ModEnd> ( & fq <S2SV_ModStart> mq_flush_lock, flags, SINGLE_DEPTH_NESTING",0
282,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
283,"<S2SV_ModStart> ) ) { if (! <S2SV_ModEnd> stok ( option <S2SV_ModStart> & ovalue ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; } <S2SV_ModEnd> ovalue = strim",0
284,"<S2SV_ModStart> ( int ) sizeof ( effect_param_t ) || * ( effect_param_t * ) pCmdData < sizeof ( effect_param_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } effect_param_t * p = ( effect_param_t * ) pCmdData ; if ( * ( int * ) pReplyData!= 0 ) break ; if ( effect -> state!= EFFECT_STATE_ACTIVE ) * ( int * ) pReplyData = effect_set_state ( effect, EFFECT_STATE_CONFIG ) ; } break ; case EFFECT_CMD_SET_STATE : { if ( pReplyData == NULL || * replySize!= sizeof ( effect_state_t ) ) { ALOGV ( ""fx_command() <S2SV_blank> EFFECT_CMD_SET_STATE <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( effect -> state!= EFFECT_STATE_ACTIVE ) * ( int * ) pReplyData = effect_set_state ( effect, EFFECT_STATE_ACTIVE ) ; } break",0
285,<S2SV_ModStart> ; cleanup : if ( key_data!= NULL ) k5free ( key_data ) ; if ( key_data_in!= NULL ) k5free ( key_data ) ;,0
286,"<S2SV_ModStart> 0x02 ) ; if ( crgram_len > SC_MAX_APDU_BUFFER_SIZE - 1 ) { r = sc_transmit_apdu ( card, & apdu ) ; LOG_TEST_RET ( card -> ctx, r, ""APDU <S2SV_blank> transmit <S2SV_blank> failed"" ) ; } <S2SV_ModStart> 0x02 ) ; if ( crgram_len > SC_MAX_APDU_BUFFER_SIZE - 1 ) { r = sc_transmit_apdu ( card, & apdu ) ; LOG_TEST_RET ( card -> ctx, r, ""APDU <S2SV_blank> transmit <S2SV_blank> failed"" ) ; }",0
287,"<S2SV_ModStart> macvlan_cnt ) ; if ( macvlan_cnt > I40E_MAX_VLAN_COUNT ) { dev_err ( & pf -> pdev -> dev, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> VLANs <S2SV_blank> (%d)\\n"", macvlan_cnt ) ; return - EINVAL ; }",0
288,<S2SV_ModStart> ; } } return - 1 ;,1
289,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
290,<S2SV_ModStart> num_part ) { memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> num_part ) { memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> num_part ) { memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> num_part ) { memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> num_part ) { memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> num_part ) { memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> num_part ) { memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> num_part ) { memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> num_part ) { memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> num_part ) { memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> num_part ) { memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> num_part ) { memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> num_part ) { memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> num_part ) { memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> num_part ) { memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> num_part ) { memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> num_part ) { memcpy <S2SV_ModEnd> ( lf_mic,0
291,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
292,"<S2SV_ModStart> len ) { <S2SV_ModEnd> char * buf <S2SV_ModStart> char * p <S2SV_ModEnd> ; if ( <S2SV_ModStart> s ++ ; <S2SV_ModEnd> } if ( <S2SV_ModStart> 10 ; } if ( p - buf > Py_SIZE ( u ) ) { Py_DECREF ( w ) ; return NULL ; } assert ( p - buf <= Py_SIZE ( u ) ) ; Py_DECREF ( w ) ; } else { * p ++ = * s ++ ; } } len = p - buf ; s = buf ; return PyUnicode_DecodeUnicodeEscape ( s, len, NULL ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
293,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> enum { YES <S2SV_ModStart> setimes, targisdir <S2SV_ModEnd> ; BUF * <S2SV_ModStart> ""Unexpected <S2SV_blank> off_t/time_t <S2SV_blank> size"" ) ; <S2SV_ModEnd> mask = umask <S2SV_ModStart> ; if ( lstat <S2SV_ModEnd> ( targ, <S2SV_ModStart> ; if ( lstat <S2SV_ModEnd> ( targ, <S2SV_ModStart> ; if ( lstat <S2SV_ModEnd> ( targ,",0
294,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
295,<S2SV_ModStart> 0 ) { vpx_free ( oci -> above_context ) ; vpx_de_free_frame_buffers ( oci ) ; <S2SV_ModStart> 0 ) { vpx_free ( oci -> mip ) ; vpx_de_free_frame_buffers ( oci ) ; vpx_de_free_frame_buffers ( oci ) ; <S2SV_ModStart> 0 ) { vpx_free ( oci -> above_context ) ; vpx_de_free_frame_buffers ( oci ) ; vpx_de_free_frame_buffers ( oci ) ; vpx_de_free_frame_buffers ( oci ) ; <S2SV_ModStart> 0 ) { vpx_free ( oci -> mip ) ; vpx_de_free_frame_buffers ( oci ) ; vpx_de_free_frame_buffers ( oci ) ; <S2SV_ModStart> 0 ) { vpx_free ( oci -> mip ) ; vpx_de_free_frame_buffers ( oci ) ; vpx_de_free_frame_buffers ( oci ) ; vpx_de_free_frame_buffers ( oci ) ; vpx_de_free_frame_buffers ( oci ) ; vpx_de_free_frame_,0
296,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
297,<S2SV_ModStart> u1_num_mbs ++ ; if ( u1_num_mbs == 0 ) { ps_dec -> u1_slice_start = 0 ; ps_dec -> u1_slice_end = 0 ; ps_dec -> u1_slice_start_offset = 0 ; ps_dec -> u1_slice_end = 0 ; ps_dec -> u1_slice_end_offset = 0 ; ps_dec -> u1_slice_start_offset = 0 ; ps_dec -> u1_slice_start_offset = 0 ; ps_dec -> u1_slice_end_offset = 0 ; ps_dec -> u1_slice_start_offset = 0 ; ps_dec -> u1_slice_end_offset = 0 ; ps_dec -> u1_slice_start_offset = 0 ; ps_dec -> u1_slice_end_offset = 0 ; ps_dec -> u1_slice_start_offset = 0 ; ps_dec -> u1_slice_end_offset = 0 ; ps_dec -> u1_slice_start_offset = 0 ; ps_dec -> u1_slice_start_offset,0
298,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> vterm_allocator_free ( screen,1
299,"<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & delay )",1
300,"<S2SV_ModStart>, one, <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_planes ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_planes ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( Corrupt",0
301,"<S2SV_ModStart> -> host, <S2SV_ModEnd> sclone ( value <S2SV_ModStart> sclone ( value <S2SV_ModEnd> ), "" <S2SV_blank> \\t,"" <S2SV_ModStart> "" <S2SV_blank> \\t,"", NULL <S2SV_ModEnd> ) ; httpSetRouteName",0
302,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
303,"<S2SV_ModStart> ntime ) { goto out ; } cg_wlock ( & pool -> data_lock ) ; free ( pool -> swork. job_id ) ; pool -> swork. job_id = job_id ; snprintf ( pool -> prev_hash, 65, ""%s"", prev_hash ) ; cb1_len = strlen ( coinbase1 ) / 2 ; cb2_len = strlen ( coinbase2 ) / 2 ; snprintf ( pool -> bbversion, 9, ""%s"", bbversion ) ; snprintf ( pool -> nbit, 9, ""%s"", nbit ) ; snprintf ( pool -> ntime, 9, ""%s"", ntime ) ; pool -> swork. clean = clean ; alloc_len = pool -> coinbase_len ; pool -> swork. alloc_len = pool -> coinbase_len ; pool -> swork. clean = clean ; alloc_len = pool -> coinbase_len ; pool -> swork. clean = clean ; cb1_len = pool -> coinbase_len ; pool -> swork. clean = clean ; cb2_len = pool -> coinbase_len ; pool -> swork. clean = clean ; pool -> swork.",0
304,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
305,"<S2SV_ModStart> unused ) { _Py_IDENTIFIER ( __dict__ ) ; PyObject * dict = _PyObject_GetAttrId ( self, & PyId___dict__ ) ; if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( _PyObject_GetAttrId ( self, & PyId___dict__ ) == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( _PyObject_GetAttrId ( self, & PyId___dict__ ) == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( _PyObject_GetAttrId ( self, & PyId___dict__ ) == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( _PyObject_GetAttrId ( self, & PyId___dict__ ) == NULL ) { if ( PyErr_ExceptionMatches ( PyExc",0
306,"<S2SV_ModStart> ) & desc, sizeof ( * desc )",1
307,"<S2SV_ModStart> perf_event * ) <S2SV_ModEnd> ; switch ( <S2SV_ModStart> case PERF_EVENT_IOC_PERIOD : return perf_event_period ( event, ( u64 __user * ) arg ) ; case PERF_EVENT_IOC_ID : { u64 id = primary_event_id ( event ) ; if ( copy_to_user ( ( void __user * ) arg, & id, sizeof ( id ) ) ) return - EFAULT ; return 0 ; } case PERF_EVENT_IOC_SET_OUTPUT : { int ret ; if ( arg!= - 1 ) { struct perf_event * output_event ; struct fd output ; ret = perf_fget_light ( arg, & output ) ; if ( ret ) return ret ; ret = perf_event_set_output ( event, output_event ) ; fdput ( output ) ; } return ret ; } case PERF_EVENT_IOC_SET_FILTER : return perf_event_set_filter ( event, ( void __user * ) arg ) ; default : return - ENOTTY ; } if ( flags & PERF_IOC_FLAG_GROUP ) perf_event_for_each ( event, func",0
308,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> * r, PREDICTION_MODE <S2SV_ModEnd> y_mode ) { <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode",0
309,"<S2SV_ModStart> - EINVAL ; memset ( & ctx, 0, sizeof ( ctx ) ) ;",0
310,"<S2SV_ModStart> iv ) ; if (! NIL_P ( key ) ) rb_raise ( eCipherError, ""key <S2SV_blank> must <S2SV_blank> be <S2SV_blank> an <S2SV_blank> unsigned <S2SV_blank> char"" ) ; if (! NIL_P ( iv ) ) rb_raise ( eCipherError, ""iv <S2SV_blank> must <S2SV_blank> be <S2SV_blank> an <S2SV_blank> unsigned <S2SV_blank> char"" ) ;",0
311,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
312,"<S2SV_ModStart> case NGHTTP2_IB_READ_SETTINGS : if ( iframe -> sbuf. pos [ 0 ]!= NGHTTP2_SETTINGS ) { DEBUGF ( ""recv: <S2SV_blank> [IB_READ_SETTINGS]\\n"" ) ; readlen = nghttp2_min ( inlen, iframe -> sbuf. pos ) ; in += readlen ; if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) ) { return in - first ; } iframe -> state = NGHTTP2_IB_READ_CLIENT_SETTINGS ; } break ; case NGHTTP2_IB_READ_LAST_SETTINGS : DEBUGF ( ""recv: <S2SV_blank> [IB_READ_LAST_SETTINGS]\\n"" ) ; readlen = nghttp2_min ( inlen, iframe -> sbuf. pos ) ; in += readlen ; if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) ) { return in - first ; } iframe -> state = NGHTTP2_IB_READ_CLIENT_SETTINGS ; } break ; case NGHTTP2_IB_READ_CLIENT_SETTINGS : DEBUGF ( ""recv: <S2SV_blank> [IB",0
313,"<S2SV_ModStart> ( x86_pmu. max_pebs_events > X86_MAX_PEBS_EVENTS ) x86_pmu. max_pebs_events = X86_MAX_PEBS_EVENTS ; if ( version > 1 ) x86_pmu. max_counters_fixed = MIN ( x86_pmu. max_counters_fixed, X86_MAX_PEBS_EVENTS ) ; if ( x86_pmu. max_counters_fixed > X86_MAX_PEBS_EVENTS ) x86_pmu. max_counters_fixed = X86_MAX_PEBS_EVENTS ; if ( x86_pmu. max_counters_fixed > X86_MAX_PEBS_EVENTS ) x86_pmu. max_counters_fixed = X86_MAX_PEBS_EVENTS ; if ( x86_pmu. max_counters_fixed > X86_MAX_COUNTER_EVENTS ) x86_pmu. max_counters_fixed = X86_MAX_COUNTER_EVENTS ; if ( x86_pmu. max_counters_fixed > X86_MAX_COUNTER_EVENTS ) x",0
314,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * tp, vpx_TOKENEXTRA <S2SV_ModEnd> * stop ) <S2SV_ModStart> stop ) { vpx_writer <S2SV_ModEnd> * p = <S2SV_ModStart> ] ; const vpx_extra_bit <S2SV_ModEnd> * const b <S2SV_ModStart> b = & vpx_extra_bits <S2SV_ModEnd> [ t ] <S2SV_ModStart> & 1 ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ; } vpx_write_bit <S2SV_ModEnd> ( w,",0
315,"<S2SV_ModStart>, uncompressed_hdr_size ; vpx_write_bit_buffer <S2SV_ModEnd> wb = { <S2SV_ModStart> 0 } ; vpx_write_bit_buffer <S2SV_ModEnd> saved_wb ; write_uncompressed_header <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> += uncompressed_hdr_size ; vpx_compute_update_table <S2SV_ModEnd> ( ) ; <S2SV_ModStart> += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb",0
316,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
317,<S2SV_ModStart> struct ikev2_id id <S2SV_ModEnd> ; ND_TCHECK ( <S2SV_ModStart> * typedata ; if ( item_len < sizeof ( struct ikev2_id ) ) goto trunc ; <S2SV_ModStart> trunc ; } ND_TCHECK ( * ext ) ;,0
318,"<S2SV_ModStart> } if ( jas_taginfo_nonull ( jas_taginfos_lookup ( mif_tags, jas_jas_taginfo_gettag ( jas_jas_taginfo_gettag ( jas_jas_taginfo_gettag ( jas_jas_taginfo_gettag ( jas_jas_taginfo_gettag ( jas_jas_taginfo_gettag ( jas_jas_taginfo_lookup ( mif_tags, jas_jas_taginfo_gettag ( jas_jas_taginfo_gettag ( jas_jas_taginfo_gettag ( jas_jas_taginfo_gettag ( jas_jas_taginfo_gettag ( jas_jas_taginfo_gettag ( jas_jas_taginfo_gettag ( jas_taginfo_gettag ( jas_taginfo_lookup ( mif_tags, jas_jas_taginfo_gettag ( jas_taginfo_gettag ( jas_taginfo_gettag ( jas_tag",0
319,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
320,"<S2SV_ModStart> ; WORD32 xt0_0 = 0, yt0 = 0, xt1 = 0, yt1 = 0, xt2 = 0, yt2 = 0 <S2SV_ModEnd> ; WORD32 xh0_0 <S2SV_ModStart> ; WORD32 xh0_0 = 0, xh1 = 0, xh20_0 = 0, xh21_0 = 0, xl0 = 0, xl1 = 0, xl20_0 = 0, xl21_0 = 0 <S2SV_ModEnd> ; WORD32 x_0 <S2SV_ModStart> ; WORD32 x_0 = 0, x_1 = 0, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_h2_0 = 0, x_h2_1 ; WORD32 si10, si20, si30, co10, co20, co30 ; WORD64 mul_1, mul_2, mul_3, mul_4, mul_5, mul_6 ; WORD64 mul_7, mul_8, mul_9, mul_10, mul_11, mul_12 ; WORD64 mul_10, mul_11",0
321,"<S2SV_ModStart> mntent -> mnt_dir, false",0
322,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
323,"<S2SV_ModStart> ( req ) ) ; rb_hash_aset ( env, client_name_val, req_client_name ( req )",0
324,"<S2SV_ModStart> endif int col_type = 0 <S2SV_ModStart> endif # endif # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION # if MYSQL_VERSION_ID < CALL_PLACEHOLDER_VERSION # if MYSQL_VERSION_ID < LIMIT_PLACEHOLDER_VERSION # endif # endif # endif <S2SV_ModStart> endif # endif # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION # if MYSQL_VERSION_ID >= LIMIT_PLACEHOLDER_VERSION # if MYSQL_VERSION_ID >= CALL_PLACEHOLDER_VERSION # if MYSQL_VERSION_ID >= LIMIT_PLACEHOLDER_VERSION # endif # endif int prepare_retval ; MYSQL_BIND * bind, * bind_end ; imp_sth_phb_t * fbind ; # endif D_imp_sthh ( sth ) ; D_imp_dbh_from_sth ; if ( DBIc_TRACE_LEVEL ( imp_xxh ) >= 2 ) PerlIO_printf ( DBIc_LOGPIO ( imp_xxh ), ""\\t-> <S2SV_blank> dbd_st_prepare <S2SV_blank> MYSQL_VERSION_ID <S2SV_blank> %d, <S2SV_blank> SQL <S2SV_blank> statement: <S2SV_blank> %s\\n"", MYSQL_VERSION_ID,",0
325,"<S2SV_ModStart> need = 0 <S2SV_ModEnd> ; CELL first <S2SV_ModStart> screen, { <S2SV_ModEnd> } ) ; <S2SV_ModStart> screen, { <S2SV_ModEnd> } ) ;",0
326,"<S2SV_ModStart> char * str <S2SV_ModEnd>, int radix <S2SV_ModStart> val ) ) strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""NaN"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> < 0 ) strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""-Infinity"" <S2SV_ModEnd> ) ; else <S2SV_ModStart> ) ; else strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str, ""Infinity"" <S2SV_ModEnd> ) ; }",0
327,"<S2SV_ModStart> cycles ) ; crng_load ( fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ; if ( ( fast_pool -> count < 64 ) &&! time_after ( now, fast_pool -> last + HZ ) ) return ; r = & input_pool ; if (! spin_trylock ( & r -> lock ) ) return ; fast_pool -> last = now ; __mix_pool_bytes ( r, & fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ; if ( arch_get_random_seed_long ( & seed ) ) { __mix_pool_bytes ( r, & seed, sizeof ( seed ) ) ; credit = 1 ; } spin_unlock ( & r -> lock ) ;",0
328,"<S2SV_ModStart> LEX_ID ) { snprintf ( str, len, ""ID:%s"" <S2SV_ModEnd>, jslGetTokenValueAsString ( <S2SV_ModStart> jslGetTokenValueAsString ( ) <S2SV_ModEnd> ) ; } <S2SV_ModStart> LEX_STR ) { snprintf ( str, len, ""String:\'%s\'"" <S2SV_ModEnd>, jslGetTokenValueAsString ( <S2SV_ModStart> jslGetTokenValueAsString ( ) <S2SV_ModEnd> ) ; }",0
329,,1
330,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
331,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
332,"<S2SV_ModStart> ) { return memcmp <S2SV_ModEnd> ( s1,",0
333,"<S2SV_ModStart> ( CMD_PRINT_HELP, NULL, NULL ) ; parse_service_option ( CMD_PRINT_HELP, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-version"" ) ) { parse_global_option ( CMD_PRINT_DEFAULTS, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-sockets"" ) ) { socket_options_print ( ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-options"" ) ) { print_ssl_options ( ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else # ifndef USE_WIN32 if (! strcasecmp ( arg1, ""-fd"" ) ) { if (! arg2 ) { s_log ( LOG_ERR, ""No <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> specified"" ) ; print_syntax ( ) ; return 1 ; } name = arg2 ; type =",0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,"<S2SV_ModStart> ; } } if ( md -> hdr. isa_flags & ISAKMP_FLAGS_v1_DECRYPT ) { DBG_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; return ; } <S2SV_ModStart> ; } } if ( md -> hdr. isa_flags & ISAKMP_FLAGS_v1_DECRYPT ) { DBG_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; return ; } <S2SV_ModStart> ; } } if ( md -> hdr. isa_flags & ISAKMP_FLAGS_v1_DECRYPT ) { DBG_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; return ; } <S2SV_ModStart> ; } } if ( md -> hdr. isa_flags & ISAKMP_FLAGS_v1_DECRYPT ) { DBG_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank>",0
336,<S2SV_ModStart> } } } if ( 0 == u4_size ) { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = 0 ; ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = 0 ; },0
337,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char * print_string,0
338,"<S2SV_ModStart> == 1 ) { if ( ( <S2SV_ModStart>, deadline ) )!= VPX_CODEC_OK ) res = VPX_CODEC_ERROR ; } <S2SV_ModEnd> else { int <S2SV_ModStart> -- ) { res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ; if ( res!= VPX_CODEC_OK ) break ; ctx -- ; if ( img ) img -- ; } ctx ++ ; } for ( i = 0 ; i < num_enc ; i ++ ) { if ( ( res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) )!= VPX_CODEC_OK ) break ; ctx -- ; if ( img ) img -- ; } ctx ++ ; } <S2SV_ModEnd> FLOATING_POINT_RESTORE ( )",0
339,"<S2SV_ModStart> ) ; } else if ( arg1 == 3 ) { win_maximise ( - 1 ) ; win_set_geom ( 0, - 1, 0, - 1 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 4 ) { win_maximise ( 1 ) ; win_set_geom ( 0, - 1, 0, - 1 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 5 ) { win_maximise ( - 1 ) ; win_set_geom ( 0, - 1, 0, - 1 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 6 ) { win_maximise ( 1 ) ; win_set_geom ( 0, - 1, - 1, 0 ) ; term. rows0 = rows0 ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 7 ) { win_maximise ( - 1 ) ; win_set_geom ( 0, - 1, 0,",0
340,<S2SV_ModStart> < cols + 8 ; i ++ ) s [ i ] = s [ cols - 1 ] ; for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; d [ i + 8 ] = 0 ; } for ( c = 0 ; c < cols + 8 ; c ++ ) { int x = s [ c + 7 ] - s [ c - 8 ] ; int y = s [ c + 7 ] + s [ c - 8 ] ; sum += x ; sumsq += x * y ; d [ c & 15 ] = s [ c ] ; if ( sumsq * 15 - sum * sum < flimit ) { d [ c & 15 ] = ( 8 + sum + s [ c ] ) >> 4 ; } s [ c - 8 ] = d [ ( c - 8 ) & 15 ] ; } s += pitch ;,0
341,<S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) <S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) <S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) <S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) <S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) <S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) <S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) <S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) <S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) <S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) <S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) <S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) <S2SV_ModStart> ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ),0
342,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",0
343,<S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; },0
344,"<S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_start ( argptr, strptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr ) ; <S2SV_ModStart> ) ) { va_end ( argptr )",0
345,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
346,"<S2SV_ModStart> 0 ; } if ( copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; return 0 ; } <S2SV_ModStart> ( rv ) { <S2SV_ModStart> ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; return 0 ; } <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; return",0
347,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> BLOCK_8X8 : return vpx_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> BLOCK_16X8 : return vpx_mse16x8 <S2SV_ModEnd> ; case BLOCK_8X16 <S2SV_ModStart> BLOCK_8X16 : return vpx_mse8x16 <S2SV_ModEnd> ; default : <S2SV_ModStart> default : return vpx_mse16x16 <S2SV_ModEnd> ; } },1
348,"<S2SV_ModStart> = encoded_key_pack ; memset ( & plgctx, 0, sizeof ( plgctx ) ) ;",0
349,"<S2SV_ModStart> flags ) ; if (! vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } <S2SV_ModStart> vb2_buf ) ; <S2SV_ModEnd> if ( input",1
350,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> size_t <S2SV_ModEnd> zcalloc ( size_t <S2SV_ModStart> size ) { size_t new_size = size + PREFIX_SIZE ; <S2SV_ModStart> ( 1, new_size <S2SV_ModEnd> ) ; if <S2SV_ModStart> HAVE_MALLOC_SIZE update_zmalloc_stat_alloc ( new_size <S2SV_ModEnd> ) ; return",0
351,<S2SV_ModStart> -> serviceId == EXTRACT_16BITS <S2SV_ModEnd> ( & rxh,1
352,"<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len > MWIFIEX_MAX_SSID_LEN ) { mwifiex_dbg ( adapter, ERROR, ""Invalid <S2SV_blank> SSID <S2SV_blank> length <S2SV_blank> %d\\n"", req_ssid -> ssid_len ) ; return - EINVAL ; }",0
353,"<S2SV_ModStart>!= 0 ) { error = context -> put_listent ( context, NULL, 0, 0, 0 ) ; if ( context -> seen_error ) break ; <S2SV_ModStart> return error ; } <S2SV_ModStart>!= 0 ) { error = context -> put_listent ( context, NULL, 0, 0, 0 ) ; if ( context -> seen_error ) break ; <S2SV_ModStart> return error ; } <S2SV_ModStart>!= 0 ) { error = context -> put_listent ( context, NULL, 0, 0, 0 ) ; if ( context -> seen_error ) break ; } <S2SV_ModStart>!= 0 ) { error = context -> put_listent ( context, NULL, 0, 0, 0 ) ; if ( context -> seen_error ) break ; } <S2SV_ModStart>!= 0 ) { error = context -> put_listent ( context, NULL, 0, 0, 0 ) ; if ( context -> seen_error ) break ; } <S2SV_ModStart>!= 0 ) { error = context -> put_listent ( context, NULL, 0, 0, 0 ) ; if ( context -> seen_error ) break ; } <S2SV_ModStart>!= 0 ) { error = context -> put_listent ( context, NULL, 0, 0, 0",0
354,"<S2SV_ModStart> struct l2cap_conf_rfc rfc <S2SV_ModEnd> ; void * <S2SV_ModStart> sk ) ; memset ( & rfc, 0, sizeof ( rfc ) ) ; <S2SV_ModStart> = L2CAP_MODE_ERTM ; memset ( & rfc, 0, sizeof ( rfc ) ) ; <S2SV_ModStart> L2CAP_DEFAULT_MAX_RECEIVE ; rfc -> <S2SV_ModEnd> retrans_timeout = cpu_to_le16 <S2SV_ModStart> L2CAP_DEFAULT_RETRANS_TO ) ; rfc -> <S2SV_ModEnd> monitor_timeout = cpu_to_le16 <S2SV_ModStart> L2CAP_DEFAULT_MONITOR_TO ) ; l2cap_add_conf_opt ( & ptr, L2CAP_CONF_RFC, sizeof ( rfc ), ( unsigned long ) & rfc ) ;",0
355,"<S2SV_ModStart> { do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> r, MSG_WAITALL )",0
356,"<S2SV_ModStart> u1_nal_ref_idc ) { if ( u1_nal_ref_idc > IDR_SLICE_NAL ) { H264_DEC_DEBUG_PRINT ( ""\\nInvalid <S2SV_blank> ref <S2SV_blank> idc <S2SV_blank> in <S2SV_blank> Nal <S2SV_blank> Unit, <S2SV_blank> Let\'s <S2SV_blank> try\\n"" ) ; return ERROR_INCOMPLETE_FRAME ; }",0
357,<S2SV_ModStart> while ( pair <S2SV_ModEnd> ) { mprAddItem,1
358,"<S2SV_ModStart> * delegation, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> = 0 ; fmode <S2SV_ModEnd> &= ( FMODE_READ <S2SV_ModStart> -> type & fmode )!= fmode <S2SV_ModEnd> ) goto no_delegation_unlock <S2SV_ModStart> -> stateid, fmode <S2SV_ModEnd> ) ; ret <S2SV_ModStart>, NULL, fmode <S2SV_ModEnd> ) ; ret",1
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,"<S2SV_ModStart> int * out_rate_sum ) { int i ; int64_t rate_sum = 0 ; int64_t dist_sum = 0 ; const int ref = xd -> mi [ 0 ] -> mbmi. ref_frame [ 0 ] ; unsigned int sse ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblock_plane * const p = & xd -> plane [ i ] ; struct macroblockd_plane * const pd = & xd -> plane [ i ] ; const BLOCK_SIZE bs = get_plane_block_size ( bsize, pd ) ; ( void ) cpi -> fn_ptr [ bs ]. vf ( p -> src. buf, p -> src. stride, pd -> dst. buf, pd -> dst. stride, & sse ) ; if ( i == 0 ) x -> pred_sse [ ref ] = sse ; if ( cpi -> speed > 4 ) { int64_t rate ; int64_t dist ; int64_t square_error = sse ; int quantizer = ( pd -> dequant [ 1 ] >> 3 ) ; if ( quantizer < 120 ) rate = ( square_",0
361,<S2SV_ModStart> } if ( pmd_trans_unstable <S2SV_ModEnd> ( pmd ),0
362,<S2SV_ModStart> { if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if <S2SV_ModStart> == NULL ) { free ( * ret_username ) ; <S2SV_ModStart> PAM_BUF_ERR ) ; },0
363,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> ) { return vpx_read_tree <S2SV_ModEnd> ( r,",1
364,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",1
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,"<S2SV_ModStart>, fmt, maxbuf, unicodestr ) ; if ( buf2 == NULL ) return ( NULL ) ; if ( buf2 == buf ) return ( buf ) ; buf = buf2 ; } return ( buf ) ; case '|' : fmt ++ ; if ( buf >= maxbuf ) return ( buf ) ; break ; case '#' : fmt ++ ; buf = maxbuf ; break ; case '[' : fmt ++ ; if ( buf >= maxbuf ) return ( buf ) ; memset ( s, 0, sizeof ( s ) ) ; p = strchr ( fmt, ']' ) ; if ( ( size_t ) ( p - fmt + 1 ) > sizeof ( s ) ) { return ( buf ) ; } strncpy ( s, fmt, p - fmt ) ; s [ p - fmt ] = '\\0' ; fmt = p + 1 ; buf = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( buf == NULL ) return ( NULL ) ; break ; default : ND_PRINT ( ( ndo, ""%c"", * fmt ) ) ;",0
367,"<S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851WriteFifo <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_TXQCR, KSZ8851_TXQCR_METFE <S2SV_ModEnd> ) ; n <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK",0
368,<S2SV_ModStart> ( ) ; mono_attach_maybe_stop ( ) ;,0
369,"<S2SV_ModStart>, x_8, x_9, x_a, x_b, x_c, x_d, x_e, x_f ; WORD32 n00, n10, n20, n30, n01, n11, n21, n31 ; WORD32 n02, n12, n22, n32, n03, n13, n23, n33 ; WORD32 * x2, * y0, * y1, * y2, * y3 ; x_0 = ptr_x ; x_1 = ptr_y ; x_2 = ptr_x + ( WORD32 ) npoints ; x_3 = ptr_x + ( WORD32 ) npoints ; x_4 = ptr_x + ( WORD32 ) npoints ; x_5 = ptr_x + ( WORD32 ) npoints ; x_6 = ptr_x + ( WORD32 ) npoints ; x_7 = ptr_x + ( WORD32 ) npoints ; x_8 = * x0 ++ ; x_9 = * x0 ++ ; x_a = * x0 ++ ; x_b = * x0",0
370,<S2SV_ModStart> ; if ( <S2SV_ModEnd> pmd_none_or_clear_bad ( pmd,0
371,"<S2SV_ModStart> height, target_width = 0, target_height = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( argv [ 2 ], & width ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } if (! parse_dim ( argv [ 3 ], & target_width, & target_height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpin = fopen ( fin, ""rb"" ) ; if ( fpin == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> read\\n"", fin ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpout = fopen ( fout, ""wb"" ) ; if ( fpout == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> write\\n",0
372,"<S2SV_ModStart> num_fields ) { _Py_IDENTIFIER ( _attributes ) ; PyObject * s, * l = PyTuple_New ( num_fields ) ; if (! l ) return 0 ; for ( int i = 0 ; i < num_fields ; i ++ ) { s = PyUnicode_FromString ( attrs [ i ] ) ; if (! s ) { Py_DECREF ( l ) ; return 0 ; } PyTuple_SET_ITEM ( l, i, s ) ; } result = _PyObject_SetAttrId ( ( PyObject * ) type, & PyId__attributes, l ) >= 0 ; Py_DECREF ( l ) ; return result <S2SV_ModEnd> ; } <S2SV_null>",0
373,<S2SV_ModStart> struct vpx_codec_alg_priv * alg_priv <S2SV_ModEnd> ; vpx_codec_enc_cfg_t * <S2SV_ModStart> priv ) { alg_priv <S2SV_ModEnd> = calloc ( <S2SV_ModStart> sizeof ( struct vpx_codec_alg_priv ) ) ; if (! alg_priv ) { return VPX_CODEC_MEM_ERROR ; } ctx -> priv = & alg_priv -> base ; ctx -> priv -> sz = sizeof ( * ctx -> priv ) ; ctx -> priv -> iface = ctx -> iface ; ctx -> priv -> init_flags = ctx -> init_flags ; if ( ctx -> config. enc ) { ctx -> priv -> alg_priv -> cfg = * ctx -> config. enc ; ctx -> config. enc = & alg_priv -> cfg ; } cfg = & ctx -> priv -> alg_priv -> cfg ; } cfg = & ctx -> priv -> alg_priv -> cfg ; for ( i = 0 ; extracfg_map [ i ]. usage && extracfg_map [ i ]. usage!= cfg -> g_usage ; i ++ ) { priv -> vp8_cfg = extracfg_map [ i ]. cfg ; priv -> vp8_cfg,0
374,<S2SV_ModStart> ++ ; } pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; totfr += step ; if ( totfr > BOT ) { totfr = 0 ; for ( i = 0 ; i < 256 ; i ++ ) { unsigned nc = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] = nc ; totfr += nc ; } for ( i = 0 ; i < 256 ; i ++ ) { unsigned sum = 0 ; unsigned i16_17 = i << 4 ; for ( j = 0 ; j < 16 ; j ++ ) sum += pixel -> freq [ i16_17 + j ] ; pixel -> lookup [ i ] = sum ; } } pixel -> total_freq = totfr ;,0
375,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx ->,0
376,"<S2SV_ModStart> efe ) ; if ( efe -> icbTag. strategyType!= cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> efe->icbTag.strategyType=%d\\n"", inode -> i_ino, efe -> icbTag. strategyType ) ; goto out ; } <S2SV_ModStart> efe ) ; if ( efe -> icbTag. strategyType!= cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> efe->icbTag.strategyType=%d\\n"", inode -> i_ino, efe -> icbTag. strategyType ) ; goto out ; }",0
377,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0",1
378,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int bad_format_imginfo (,0
379,"<S2SV_ModStart> IPV6DefragSturgesNovakLastTest ) ; UtRegisterTest ( ""DefragIPv6NoDataTest"", DefragIPv6NoDataTest ) ;",0
380,<S2SV_ModStart> = object_length ; <S2SV_ModEnd> new_object. data <S2SV_ModStart> object_length ) ; <S2SV_ModEnd> r = coolkey_add_object_to_list,0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,"<S2SV_ModStart> p_sys -> b_auto_field_coding && p_sys -> p_format -> top_field_first ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""top_field_first"", p_sys -> p_format -> interlaced ) ; if ( p_sys -> b_auto_field_coding ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""auto_field_coding"", p_sys -> p_format -> interlaced ) ; if ( p_sys -> b_auto_field_coding ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""auto_field_coding"", p_sys -> p_format -> interlaced ) ; if ( p_sys -> b_auto_field_coding ) schro_encoder_setting_set_double ( p_sys -> p_schro, ""auto_field_coding"", p_sys -> p_format -> interlaced ) ; if ( p_sys -> b_auto_field_coding ) schro_",0
384,"<S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> regular <S2SV_blank> file\\n"" <S2SV_ModEnd>, bfname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> regular <S2SV_blank> file\\n"" <S2SV_ModEnd>, bfname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> regular <S2SV_blank> file\\n"" <S2SV_ModEnd>, bfname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> regular <S2SV_blank> file\\n"" <S2SV_ModEnd>, bfname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> a <S2SV_blank> regular <S2SV_blank> file\\n"" <S2SV_ModEnd>, bfname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> regular <S2SV_blank> file\\n"" <S2SV_ModEnd>, bfname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> regular <S2SV_blank> file\\n"" <S2SV_ModEnd>, bfname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> regular <S2SV_blank> file\\n"" <S2SV_ModEnd>, bfname. <S2SV_ModStart> ( log, ""file <S2SV_blank> \'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> regular <S2SV_blank> file\\n""",0
385,<S2SV_ModStart> 4 ) ; size_t <S2SV_ModEnd> num_properties = GETINT32 <S2SV_ModStart> len ) ; if (! a -> names [ i ]. data ) return NULL ;,0
386,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
387,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * fb ; vpx_get_reference_dec <S2SV_ModEnd> ( ctx ->",0
388,"<S2SV_ModStart> JPEG_MARKER_EOI ) { if ( i + 1 < frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> first <S2SV_blank> "" ""marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> EOI.\\n"", marker ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> JPEG_MARKER_SOS ) { if ( i + 1 < frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> first <S2SV_blank> "" ""marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> SOS.\\n"", marker ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> JPEG_MARKER_EOI ) { if ( i + 1 < frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> first <S2SV_blank> "" ""marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> EOI.\\n"", marker ) ; return AVERROR_INVALIDDATA ; }",0
389,"<S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == testlist ) { node * ch = CHILD ( n, 0 ) ; if (! ch ) return NULL ; ch = CHILD ( n, 1 ) ; if ( TYPE ( ch ) == testlist ) ch = ast_for_testlist ( c, ch ) ; else ch = ast_for_expr ( c, ch ) ; if (! ch ) return NULL ; return Expr ( ch, LINENO ( n ), n -> n_col_offset, n -> n_end_lineno, n -> n_end_col_offset, c -> c_arena ) ; } else if ( <S2SV_ModStart> == 1 ) return Expr ( CHILD ( n, 0 ), LINENO ( n ), n -> n_col_offset, n -> n_end_lineno, n -> n_end_col_offset, c -> c_arena ) ; else return Expr ( CHILD ( n, 0 ), LINENO ( n ), n -> n_col_offset, n -> n_end_lineno, n -> n_end_col_offset, c -> c_are",0
390,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void vp8_denoiser_filter_c ( YV12_BUFFER_CONFIG * mc_running_avg, YV12_BUFFER_CONFIG * running_avg, MACROBLOCK * signal, unsigned int motion_magnitude, int y_offset, int uv_offset ) { unsigned char * mc_running_avg_y = mc_running_avg -> y_buffer + y_offset ; int mc_avg_y_stride = mc_running_avg -> y_stride ; unsigned char * running_avg_y = running_avg -> y_buffer + y_offset ; int avg_y_stride = running_avg -> y_stride ; int r, c, i ; int sum_diff = 0 ; int adj_val [ 3 ] = { 3, 4, 6 } ; if ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) { for ( i = 0 ; i < 3 ; i ++ ) adj_val [ i ] += 1 ; } for ( r = 0 ; r < 16 ; ++ r ) { for ( c = 0 ;",0
391,<S2SV_ModStart> ; } } if ( ( sockPtr -> flags & ( NS_CONN_ESTABLISHED | NS_CONN_SHARING ) ) == 0u ) { sockPtr -> flags &= ~ ( NS_CONN_ESTABLISHED | NS_CONN_SHARING ) ; if ( ( sockPtr -> flags & ( NS_CONN_SHARING | NS_CONN_SHARING ) ) == 0u ) { sockPtr -> flags |= ( NS_CONN_SHARING | NS_CONN_SHARING ) ; if ( ( sockPtr -> flags & ( NS_CONN_SHARING | NS_CONN_SHARING ) ) == 0u ) { sockPtr -> flags |= ( NS_CONN_SHARING | NS_CONN_SHARING ) ; if ( ( sockPtr -> flags & ( NS_CONN_SHARING | NS_CONN_SHARING ) ) == 0u ) { sockPtr -> flags |= ( NS_CONN_SHARING | NS_CONN_SHARING ) ; if ( ( sockPtr -> flags & ( NS_CONN_SHARING | NS_CONN_SHARING ) ) == 0u ) {,0
392,"<S2SV_ModStart> = uregs ; xtregs_coprocessor_t cp0 ; <S2SV_ModStart> ret = 0 ; memset ( & cp0, 0, sizeof ( cp0 ) ) <S2SV_ModStart> ti ) ; <S2SV_ModEnd> ret |= __copy_from_user <S2SV_ModStart> ) ) ; ret |= __copy_from_user ( & ti -> xtregs_cp, & cp0, sizeof ( cp0 ) ) ;",0
393,"<S2SV_ModStart> size ) ; if ( message -> length < 0 ) { error = ERROR_BUFFER_TOO_SMALL ; osReleaseEvent ( & socket -> event ) ; osReleaseMutex ( & socket -> event ) ; osWaitForEvent ( & socket -> event, socket -> timeout ) ; osReleaseMutex ( & socket -> event ) ; osReleaseMutex ( & netMutex ) ; osWaitForEvent ( & socket -> event, socket -> timeout ) ; osReleaseMutex ( & socket -> event ) ; osReleaseMutex ( & netMutex ) ; return error ; }",0
394,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" <S2SV_ModStart> cg_item ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
395,<S2SV_ModStart> int error ; <S2SV_ModEnd> new_bh = ext2_xattr_cache_find <S2SV_ModStart> new_bh ) ; error = <S2SV_ModStart> ( new_bh ) ; if ( error ) goto cleanup,0
396,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
397,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
398,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
399,<S2SV_ModStart> = 2048 ; if ( pwidth == NULL || pheight == NULL ) { return ( MagickFalse ) ; } <S2SV_ModStart> ) AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> ) ResetQuantumMemory ( ( size_t ) <S2SV_ModStart> ) AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> ) AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> ) AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> ) AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> ) AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> ) AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> ) AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> ) AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> ) AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> ) AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> ) AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> ) AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> ) AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> ) AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> ) AcquireQuantumMemory ( ( size_t ),0
400,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vpx_ref_frame_t * data <S2SV_ModEnd> ; if ( <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; vpx_image2yuvconfig <S2SV_ModEnd> ( & frame <S2SV_ModStart> sd ) ; # if CONFIG_VP9_HIGHBITDEPTH return vp9_highbitdepth_copy_reference_dec ( ctx -> pbi, ( VP9_REFFRAME ) frame -> frame_type, & sd ) ; # else return vp9_copy_reference_dec ( ctx -> pbi, ( VP9_REFFRAME ) frame -> frame_type, & sd ) ; # endif <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
401,<S2SV_ModStart> u1_num_mbs ++ ; if ( u1_num_mbs == 0 ) { ps_dec -> u1_slice_start = 0 ; ps_dec -> u1_slice_end = 0 ; ps_dec -> u1_slice_start_offset = 0 ; ps_dec -> u1_slice_end = 0 ; ps_dec -> u1_slice_end_offset = 0 ; ps_dec -> u1_slice_start_offset = 0 ; ps_dec -> u1_slice_start_offset = 0 ; ps_dec -> u1_slice_end_offset = 0 ; ps_dec -> u1_slice_start_offset = 0 ; ps_dec -> u1_slice_end_offset = 0 ; ps_dec -> u1_slice_start_offset = 0 ; ps_dec -> u1_slice_end_offset = 0 ; ps_dec -> u1_slice_start_offset = 0 ; ps_dec -> u1_slice_end_offset = 0 ; ps_dec -> u1_slice_start_offset = 0 ; ps_dec -> u1_slice_start_offset,0
402,<S2SV_ModStart> ; UWORD32 u4_x_dst_offset <S2SV_ModEnd> = 0 ; <S2SV_ModStart> == B_PIC ) { <S2SV_ModStart> ps_dec ) ; } else { <S2SV_ModEnd> impeg2d_dec_p_mb_params ( ps_dec <S2SV_ModStart> ps_dec ) ; } <S2SV_ModStart> == B_PIC ) { <S2SV_ModStart> ps_dec ) ; } else { <S2SV_ModEnd> impeg2d_dec_pnb_mb_params ( ps_dec <S2SV_ModStart> ps_dec ) ; } <S2SV_ModStart> == B_PIC ) { <S2SV_ModStart> ps_dec ) ; } else { <S2SV_ModEnd> impeg2d_dec_p_mb_params ( ps_dec <S2SV_ModStart> ps_dec ) ; } <S2SV_ModStart> == B_PIC ) { <S2SV_ModStart> ps_dec ) ; } else { <S2SV_ModEnd> impeg2d_dec_pnb_mb_params ( ps_dec <S2SV_ModStart> ps_dec ) ; } <S2SV_ModStart> == B_PIC ) { <S2SV_ModStart> ps_dec ) ; } else { <S2SV_ModEnd> impeg2d_dec_pnb_mb_params ( ps_dec <S2SV_ModStart> ps_dec ) ; },0
403,<S2SV_ModStart> VP9_LAST_FLAG ) { int frame = <S2SV_ModEnd> cm -> ref_frame_map <S2SV_ModStart> [ 0 ] ; YV12_BUFFER_CONFIG * const cfg = & cm -> frame_bufs [ frame,0
404,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
405,"<S2SV_ModStart> TX_SIZE tx_size = <S2SV_ModEnd> get_uv_tx_size ( mbmi <S2SV_ModStart> get_uv_tx_size ( mbmi, pd <S2SV_ModStart> ( xd -> mb_to_left_edge <S2SV_ModEnd> < 0 || <S2SV_ModStart> || xd -> mb_to_top_edge <S2SV_ModEnd> < 0 ) <S2SV_ModStart> ( xd -> mb_to_left_edge <S2SV_ModEnd> < 0 ) <S2SV_ModStart> ( xd -> mb_to_top_edge <S2SV_ModEnd> < 0 ) <S2SV_ModStart> ( xd -> mb_to_right_edge <S2SV_ModEnd> < 0 ) <S2SV_ModStart> ( xd -> mb_to_bottom_edge <S2SV_ModEnd> < 0 ) <S2SV_ModStart> ( xd -> mb_to_top_edge <S2SV_ModEnd> >> ( 5 <S2SV_ModStart> ( xd -> mb_to_bottom_edge <S2SV_ModEnd> < 0 ) <S2SV_ModStart> ( xd -> mb_to_top_edge <S2SV_ModEnd> >> ( 5 <S2SV_ModStart> ( xd -> mb_to_left_edge <S2SV_ModEnd> < 0 ) <S2SV_ModStart> ( xd -> mb_to_top_edge <S2SV_ModEnd> < 0 ) <S2SV_ModStart> ( xd -> mb_to_right_edge <S2SV_ModEnd> < 0 ) <S2SV_ModStart> ( xd -> mb_to_bottom_edge <S2SV_ModEnd> < 0 ) <S2SV_ModStart> ( xd -> mb_to_top_edge <S2SV_ModEnd> >> ( 5 <S2SV_ModStart> ( xd -> mb_to_bottom_edge <S2SV_ModEnd>",0
406,"<S2SV_ModStart> ++ ) { memcpy ( dst, src, 4 ) ; <S2SV_ModEnd> src += src_stride",0
407,<S2SV_ModStart> { rowstoread = ( row + img -> row_offset ) % rowsperstrip ; nrow = ( row + img -> row_offset > h? h - row : rowstoread ) ; offset_row = row + <S2SV_ModEnd> img -> row_offset <S2SV_ModStart> img -> row_offset <S2SV_ModEnd> ; if (,0
408,<S2SV_ModStart> ; } } Py_RETURN_NONE <S2SV_ModEnd> ; } <S2SV_null>,0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. <S2SV_ModEnd> headindex < SIGNED_SIZEOF <S2SV_ModStart> psf -> header. <S2SV_ModEnd> header [ psf <S2SV_ModStart> psf -> header. <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> psf -> header. <S2SV_ModEnd> header [ psf <S2SV_ModStart> psf -> header. <S2SV_ModEnd> headindex ++ ] <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
410,<S2SV_ModStart> num & ( 1U << number <S2SV_ModEnd> ) ) return <S2SV_ModStart> num - ( 1U <S2SV_ModEnd> << number ),0
411,"<S2SV_ModStart> int w = img -> width [ plane ] ; const int h = img -> height [ plane ] ; int y ; for ( y = 0 ; y < h ; ++ y ) { if ( fread ( buf, 1, w, file )!= w ) return 0 ; buf += stride ; } } for ( y = 0 ; y < h ; ++ y ) { if ( fread ( buf, 1, w, file )!= w ) return 0 ; buf += stride ; } for ( y = 0 ; y < h ; ++ y ) { if ( fread ( buf, 1, w, file )!= w ) return 0 ; buf += stride ; } } return 1 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
412,"<S2SV_ModStart> ; uint16_t attr_len <S2SV_ModEnd> ; uint16_t bytes_left <S2SV_ModStart> 1 ; } <S2SV_ModEnd> MD5_Init ( & <S2SV_ModStart> md5_ctx ) ; if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } attr_len = avp -> length - sizeof ( struct l2tp_avp_t ) ; if ( attr_len <= MD5_DIGEST_LENGTH ) { memxor ( avp -> val, p1, attr_len ) ; return 0 ; } memxor ( p1, avp -> val, MD5_DIGEST_LENGTH ) ; orig_attr_len = ntohs ( * ( uint16_t * ) p1 ) ; if ( orig_attr_len <= MD5_DIGEST_LENGTH - 2 ) { memcpy ( avp -> val, p1,",0
413,<S2SV_ModStart> 1 ; case EVP_CTRL_AEAD_SET_IV : if ( arg <= 0 || arg > CHACHA_CTR_SIZE ) return 0 ; actx -> nonce [ 0 ] = actx -> key. counter [ 1 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr ) ; actx -> nonce [ 1 ] = actx -> key. counter [ 2 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 4 ) ; return 1 ; case EVP_CTRL_AEAD_SET_IV : if ( arg <= 0 || arg > CHACHA_CTR_SIZE ) return 0 ; actx -> nonce [ 0 ] = actx -> key. counter [ 1 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr ) ; actx -> nonce [ 1 ] = actx -> key. counter [ 2 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 4 ) ; return 1 ; case EVP_CTRL_AEAD_SET_IV : if ( arg <= 0 || arg > CHACHA_CTR_SIZE ) return,0
414,"<S2SV_ModStart>, 0, comm_event -> comm_size <S2SV_ModEnd> ) ; if",0
415,"<S2SV_ModStart>, sk ) ; if (! sk ) return - EINVAL",0
416,"<S2SV_ModStart> MT_CPTYPE_PASSSALT ) { snprintf ( pass_salt, sizeof ( pass_salt ), ""%.*s"", cpkt. length, cpkt. data ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PLAINDATA ) { fwrite ( ( const void * ) cpkt. data, 1, cpkt. length, stdout ) ; } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 1 ; if ( is_a_tty ) { raw_term ( ) ; setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch ) ; } } success = parse_control_packet ( NULL, 0, & cpkt ) ; } else if ( cpkt. cptype == MT_PTYPE_END_AUTH ) { terminal_mode = 1 ; if ( is_a_tty ) { raw_term ( ) ; setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_",0
417,<S2SV_ModStart> MUTT_ABORT ) { mutt_socket_close ( adata -> conn ) ; <S2SV_ModStart> ) ) ; mutt_socket_close ( adata -> conn ) ; <S2SV_ModStart> ) ) ; mutt_socket_close ( adata -> conn ) ; <S2SV_ModStart> ) ) ; mutt_socket_close ( adata -> conn ) ; <S2SV_ModStart> ) ) ; mutt_socket_close ( adata -> conn ) ;,0
418,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
419,"<S2SV_ModStart> ) ) ; if ( <S2SV_ModStart>, 0 ) < 0 ) return ; memset ( line, 0, sizeof ( line ) ) ; strcpy ( line, ""?WATCH={\\""json\\"":true};\\n"" ) ; if ( send ( gpsd_sock, line, 22, 0 )!= 22 ) return ; memset ( line, 0, sizeof ( line ) ) ; if ( send ( gpsd_sock, line, 22, 0 ) <S2SV_ModStart> 0 ) return ; memset ( line, 0, sizeof ( line ) ) ; strcpy ( line, ""?WATCH={\\""json\\"":true};\\n"" ) ; if ( send ( gpsd_sock, line, 22, 0 )!= 22 ) return ; memset ( line, 0, sizeof ( line ) ) ; strcpy ( line, ""?WATCH={\\""json\\"":true};\\n"" ) ; if ( send ( gpsd_sock, line, 22, 0 )!= 22 ) return ; memset ( line, 0, sizeof ( line ) ) ; strcpy ( line, ""?WATCH={\\""json\\"":true};\\n"" ) ; if ( send ( gpsd_sock, line",0
420,"<S2SV_ModStart> remainder, & rlen ) ; if ( ret ) return ret ; if (! check_atype_tag ( a, & t ) ) return ASN1_BAD_ID ; if (! decode_atype_to_ptr ( & t, contents, clen, a, retrep ) ; return ASN1_OK <S2SV_ModEnd> ; } <S2SV_null>",0
421,"<S2SV_ModStart> * slavename ; user = find_user ( curconn -> username ) ; if ( user == NULL ) { md5_state_t state ; # if defined ( __linux__ ) && defined ( _POSIX_MEMLOCK_RANGE ) mlock ( md5data, sizeof ( md5data ) ) ; mlock ( md5sum, sizeof ( md5sum ) ) ; if ( user -> password!= NULL ) { mlock ( user -> password, strlen ( user -> password ) ) ; } # endif md5data [ 0 ] = 0 ; strncpy ( md5data + 1, user -> password, 82 ) ; memcpy ( md5data + 1 + strlen ( user -> password ), curconn -> pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( user -> password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; md5sum [ 0 ] = 0 ; init_packet ( & pdata, MT_PTYPE_DATA, pk",0
422,"<S2SV_ModStart> ; if ( _PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart> { if ( _PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name,",0
423,<S2SV_ModStart> off } ; if (! str ) { return - 1 ; },0
424,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
425,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
426,"<S2SV_ModStart> size_t s ; s = exif_get_long ( o, EXIF_BYTE_ORDER_INTEL ) ; if ( s > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } <S2SV_ModStart> 12 ) ) <S2SV_ModEnd> { exif_log ( <S2SV_ModStart> ; if ( s > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } if ( <S2SV_ModStart> ; if ( s > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } if ( <S2SV_ModStart> ; if ( s > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break",0
427,<S2SV_ModStart> bd_addr ) { int ret ; <S2SV_ModStart> return BT_STATUS_NOT_READY ; ret = <S2SV_ModEnd> btif_dm_remove_bond ( bd_addr <S2SV_ModStart> bd_addr ) ; return ret ;,0
428,"<S2SV_ModStart> int i ; size_t avail ; size_t <S2SV_ModEnd> expect ; txid <S2SV_ModStart> 4 ) ; expect = 8 + 8 + nxip * 8 ; if ( nxip < 0 || nxip > avail || expect > avail ) goto bad_format ; xmin = pq_getmsgint64 ( buf ) ; xmax = pq_getmsgint64 ( buf ) ; if ( xmin == 0 || xmin > xmax || xmax > MAX_TXID ) goto bad_format ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; snap -> nxip = nxip ; SET_VARSIZE ( snap, TXID_SNAPSHOT_SIZE ( nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last || cur < xmin || cur >= xmax ) goto bad_format ; snap -> xip [ i ] = cur ; last = cur ; } PG_RETURN_POINTER ( snap ) ; bad_format : elog ( ERROR, ""invalid <S2SV_blank> snapshot <S2SV_blank> data"" ) ; return ( Datum ) NULL <S2SV_ModEnd> ; } <S2SV_null>",0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le <S2SV_ModStart> psf -> header. le,0
430,<S2SV_ModStart> ( epoll_ ) ; if (! epoll ) goto done <S2SV_ModStart> OE_EINVAL ) ; <S2SV_ModEnd> return ret ; <S2SV_ModStart> ret ; } <S2SV_null> <S2SV_null>,0
431,"<S2SV_ModStart> ( CMD_INITIALIZE, & new_global_options. option <S2SV_ModEnd>, NULL ) <S2SV_ModStart> ( CMD_INITIALIZE, & new_service_options. option <S2SV_ModEnd>, NULL )",0
432,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_PHNUM_MIN : * ( size_t * ) val = ms -> elf_phnum_min ; return 0 ; case MAGIC_PARAM_ELF_SHNUM_MIN : * ( size_t * ) val = ms -> elf_shnum_min ; return 0 ;,0
433,<S2SV_ModStart> offset ) { struct file * file = page -> mapping -> host ; <S2SV_ModStart> = EXT4_JOURNAL ( file <S2SV_ModEnd> ) ; if,0
434,"<S2SV_ModStart> i + 1 ) ; if (! trak ) continue ; GF_SAFEALLOC ( writer, TrackWriter ) ; if (! writer ) goto exit ; writer -> sampleNumber = 1 ; writer -> mdia = trak -> Media ; writer -> stbl = trak -> Media -> information -> sampleTable ; writer -> timeScale = trak -> Media -> mediaHeader -> timeScale ; writer -> all_dref_mode = Media_SelfContainedType ( writer -> mdia ) ; if ( trak -> sample_encryption ) writer -> prevent_dispatch = GF_TRUE ; writer -> isDone = 0 ; writer -> DTSprev = 0 ; writer -> chunkDur = 0 ; writer -> chunkSize = 0 ; writer -> constant_size = writer -> constant_dur = 0 ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STSC ) ; if (! writer -> stsc ) return GF_OUT_OF_MEM ; if ( writer -> stsc -> ChunkOffset -> type == GF_ISOM_BOX_TYPE_STSC ) return GF_OUT_",0
435,"<S2SV_ModStart> 17 ] ; size_t <S2SV_ModEnd> plen ; md5_state_t <S2SV_ModStart> = 0 ; strlcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> password, 82, sizeof ( md5data ) <S2SV_ModStart> = '\\0' ; strlcpy <S2SV_ModEnd> ( md5data + <S2SV_ModStart> password ), pass_salt, sizeof ( md5sum ) <S2SV_ModEnd> ) ; md5_init",0
436,<S2SV_ModStart> ; if ( <S2SV_ModEnd> Prefix!= NULL,1
437,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
438,<S2SV_ModStart> ( ) ; g_hash_table_remove_all ( headers ) ;,0
439,"<S2SV_ModStart> -> y_buffer ; # if CONFIG_VP9_HIGHBITDEPTH if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { memcpy ( dst, src, src_ybc -> y_width ) ; } else if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { memcpy ( dst, src, src_ybc -> y_width ) ; } else if ( src_ybc -> flags & YV12_FLAG_HIGHBITDEPTH ) { memcpy ( dst, src, src_ybc -> y_width ) ; } else { memcpy ( dst, src, src_ybc -> y_width ) ; } # else <S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst, <S2SV_ModStart> y_stride ; } # endif",0
440,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_rd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> int dummy_rate ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) { int <S2SV_ModEnd> i ; MACROBLOCK <S2SV_ModStart> ) { int <S2SV_ModEnd> num_4x4_w = num_4x4_blocks_wide_lookup <S2SV_ModStart> i ) { int num_4x4_w = num_4x4_blocks_wide_lookup <S2SV_ModStart> i ) { int num_4x4_h = num_4x4_blocks_high_lookup [ i ] ; int num_4x4_blk = MAX ( 4, num_4x4_w * num_4x4_h ) ; for ( x -> sb_index = 0 ; x -> sb_index < 4 ; ++ x -> sb_index ) for ( x -> b",0
441,"<S2SV_ModStart>, obj_tlen ; u_int offset ; u_int link_type ; union { float f ; uint32_t i ; } bw ; ND_TCHECK ( * pptr ) ; tptr = pptr ; lmp_com_header = ( const struct lmp_common_header * ) pptr ; ND_TCHECK ( * lmp_com_header ) ; if ( LMP_EXTRACT_VERSION ( lmp_com_header -> version_res [ 0 ] )!= LMP_VERSION ) { ND_PRINT ( ( ndo, ""LMP <S2SV_blank> version <S2SV_blank> %u <S2SV_blank> packet <S2SV_blank> not <S2SV_blank> supported"", LMP_EXTRACT_VERSION ( lmp_com_header -> version_res [ 0 ] ) ) ) ; return ; } if ( ndo -> ndo_vflag < 1 ) { ND_PRINT ( ( ndo, ""LMPv%u <S2SV_blank> %s <S2SV_blank> Message, <S2SV_blank> length: <S2SV_blank> %u"", LMP_EXTRACT_VERSION ( lmp_com_header -> version_res [ 0 ] ), tok2str ( lmp_msg_type_values, ""unknown"", lmp",0
442,"<S2SV_ModStart> * mbmi, nmv_context_counts * counts, <S2SV_ModStart> [ 2 ] <S2SV_ModEnd> ) { int <S2SV_ModStart> i ) { nmv_inc_mv ( counts, <S2SV_ModEnd> & mbmi -> <S2SV_ModStart> 0 ]. <S2SV_ModEnd> row - ref <S2SV_ModStart> row - ref -> row, mvs [ i ]. <S2SV_ModEnd> col - ref <S2SV_ModStart> col - ref -> col <S2SV_ModEnd> ) ; }",0
443,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ),",0
444,"<S2SV_ModStart> ; if ( skb_out -> len < size ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; } skb_pull_rcsum ( skb_out, hdr_size ) ; memmove ( skb_out -> data - ETH_HLEN, skb_mac_header ( skb_out ), ETH_HLEN ) ; skb_set_mac_header ( skb_out, - ETH_HLEN ) ; skb_reset_network_header ( skb_out ) ; skb_reset_transport_header ( skb_out ) ; hlist_for_each_entry ( entry, chain, list ) { size = entry -> skb -> len - hdr_size ; memcpy ( skb_put ( skb_out, size ), entry -> skb -> data + hdr_size ) ; } free : batadv_frag_clear_chain ( chain ) ; return skb_out ; } <S2SV_null> <S2SV_null> <S2SV_null>",0
445,"<S2SV_ModStart> ) return ; DEBUGMSGTL ( ( ""init_mib"", ""Seen <S2SV_blank> MIBDIRS: <S2SV_blank> Looking <S2SV_blank> in <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> mib <S2SV_blank> dirs <S2SV_blank>...\\n"", env_var ) ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibdir ( entry ) ; entry = strtok_r ( NULL, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = netsnmp_getenv ( ""MIBFILES"" ) ; if ( env_var == NULL ) { if ( confmibs!= NULL ) env_var = strdup ( confmibs ) ; else env_var = strdup ( NETSNMP_DEFAULT_MIBS ) ; } else { if ( confmibs!= NULL ) env_var = strdup ( confmibs ) ; else env_var = strdup ( NETSNMP_DEFAULT_MIBS ) ; } if ( entry ) { add_mibfile ( entry, NULL, NULL ) ; entry = strtok_r ( NULL, ENV_",0
446,"<S2SV_ModStart> { fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ], O_RDWR ) <S2SV_ModStart> 1 ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_KEY ) ) <S2SV_ModStart> EV_REL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EV_SYN ) ) <S2SV_ModStart> x ++ ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> ]. mapped_id )",0
447,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
448,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s, <S2SV_ModStart> & 1 ) vpx_lpf_vertical_4 <S2SV_ModEnd> ( s +",0
449,<S2SV_ModStart> krb5_error_code iakerb_alloc_context ( krb5_secure_ctx_id_t <S2SV_ModEnd> * pctx ) <S2SV_ModStart> pctx ) { krb5_secure_ctx_id_t <S2SV_ModEnd> ctx ; krb5_error_code,0
450,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> bitmapDC = CreateCompatibleDC",1
451,"<S2SV_ModStart>, START_CODE_PREFIX_LEN ) == <S2SV_ModEnd> START_CODE_PREFIX ) {",0
452,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { ret = <S2SV_ModEnd> - EINVAL ; <S2SV_ModStart> - EINVAL ; goto out ; }",1
453,"<S2SV_ModStart> imethod ) ; mono_class_inflate_generic_method ( imethod, & tmp_context. class_inst ) ; mono_class_inflate_generic_method ( imethod, & tmp_context. method_inst ) ; mono_class_inflate_generic_method ( imethod, & tmp_context. class_inst ) ; mono_class_inflate_generic_method ( imethod, & tmp_context. method_inst ) ; mono_class_inflate_generic_method ( imethod, & tmp_context. class_inst ) ; mono_class_inflate_generic_method ( imethod, & tmp_context. method_inst ) ; mono_class_inflate_generic_method ( imethod, & tmp_context. class_inst ) ; mono_class_inflate_generic_method ( imethod, & tmp_context. method_inst ) ; mono_class_inflate_generic_method ( imethod, & tmp_context. class_inst ) ; mono_class_inflate_generic_method ( imethod",0
454,<S2SV_ModStart> ; int tmp ; mutex_lock ( & exitcode_mutex ) <S2SV_ModStart> count ) ) { uml_exitcode = - EFAULT ; goto out ; } <S2SV_ModEnd> tmp = simple_strtol <S2SV_ModStart> end ) ) { uml_exitcode = - EINVAL ; goto out ; } uml_exitcode = tmp ; out : mutex_unlock ( & exitcode_mutex ) <S2SV_ModEnd> ; return count,0
455,"<S2SV_ModStart> is_path ) { <S2SV_ModEnd> do { if <S2SV_ModStart> size_t len ; char * last_elem, * wp ; last_elem = wp = result ; if ( * name == '$' ) { const char * repl ; size_t len ; if ( ( ( strncmp ( & name [ 1 ], ""ORIGIN"", 6 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 1 ], ""PLATFORM"", 8 ) == 0 && ( len = 9 )!= 0 ) ) && ( name [ len ] == '\\0' || name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) { repl = ( ( len == 7 || name [ 2 ] == 'O' )? ( __libc_enable_secure? NULL : l -> l_origin ) : _dl_platform ) ; if ( repl!= NULL && repl!= ( const char * ) - 1 ) { wp = __stpcpy ( wp, repl ) ; name += len ; } else { wp = last_elem ; name += len ; while ( * name!= '\\0' && (! is_path || * name!= ':'",0
456,"<S2SV_ModStart> ) ; } # ifdef H264DEC_TRACE sprintf ( decInst -> str, ""H264SwDecInit# <S2SV_blank> decInst <S2SV_blank> %p <S2SV_blank> noOutputReordering <S2SV_blank> %d"", ( void * ) decInst, noOutputReordering ) ; DEC_API_TRC ( decInst -> str ) ; # endif <S2SV_ModStart> ) H264SwDecMalloc ( sizeof ( decContainer_t ) ) ; if ( pDecCont == NULL ) { DEC_API_TRC ( ""H264SwDecInit# <S2SV_blank> ERROR: <S2SV_blank> Memory <S2SV_blank> allocation <S2SV_blank> failed"" ) ; return ( H264SWDEC_MEMFAIL ) ; } rv = h264bsdInit ( & pDecInst -> storage, noOutputReordering ) ; if ( rv!= HANTRO_OK ) { H264SwDecRelease ( pDecCont ) ; return ( H264SWDEC_MEMFAIL ) ; } pDecCont -> decStat = INITIALIZED ; pDecCont -> picNumber = 0 ; # ifdef H264DEC_TRACE sprintf ( pDecCont -> str, ""H264SwDecInit# <S2SV_blank> OK: <S2SV_blank> return <S2SV_blank> %p"", ( void * ) pDec",0
457,"<S2SV_ModStart> drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt -> srr ) ) { struct in_device * in_dev = __in_dev_get_rcu ( dev ) ; if ( in_dev &&! IN_DEV_SOURCE_ROUTE ( in_dev ) ) goto drop ; if ( ip_options_rcv_srr ( skb ) ) goto drop ; } return 0 ; inhdr_error : IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INHDRERRORS ) ; <S2SV_ModEnd> return 0 ; <S2SV_ModStart> return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
458,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
459,<S2SV_ModStart> goto errout ; _ogg_free ( info -> stagemasks ) ; _ogg_free ( info -> stagebooks ) ;,0
460,<S2SV_ModStart> krb5_key_data * key_data = NULL <S2SV_ModStart> == NULL ) { k5free ( key_data ) ; <S2SV_ModStart> goto cleanup ; } <S2SV_ModStart> == NULL ) { k5free ( key_data ) ; <S2SV_ModStart> goto cleanup ; },0
461,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
462,<S2SV_ModStart> ] ) ; if ( nByte < 0 ) { rc = SQLITE_CORRUPT_BKPT ; } else { <S2SV_ModStart> 1 ) ; },0
463,<S2SV_ModStart> filp ) { struct socket_info * si = <S2SV_ModEnd> SOCKET_I ( inode <S2SV_ModStart> ( inode ) ; mutex_lock ( & si -> i_mmap_mutex ) ; list_del_init ( & si -> i_mmap_entry ) ; mutex_unlock ( & si -> i_mmap_mutex,0
464,"<S2SV_ModStart> * orelse, bool is_block, <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. is_block = is_block",0
465,"<S2SV_ModStart> char * name, my_off_t * index_pos ) { reg2 uint key ; reg1 MI_KEYDEF * keyinfo ; File new_file ; my_off_t index_pos [ HA_MAX_POSSIBLE_KEY ] ; uint r_locks, w_locks ; MYISAM_SHARE * share = info -> s ; MI_STATE_INFO old_state ; DBUG_ENTER ( ""mi_sort_index"" ) ; for ( key = 0, keyinfo = & share -> keyinfo [ 0 ] ; key < share -> base. keys ; key ++, keyinfo ++ ) if ( keyinfo -> key_alg == HA_KEY_ALG_RTREE ) { DBUG_RETURN ( 0 ) ; } fn_format ( param -> temp_filename, name, """", MI_NAME_IEXT, 2 + 4 + 32 ) ; fn_format ( param -> temp_filename, param -> temp_filename, """", INDEX_TMP_EXT, 2 + 4 ) ; if ( ( new_file = mysql_file_create ( mi_key_file_datatmp, fn_format ( param -> temp_",0
466,"<S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" <S2SV_ModEnd> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR <S2SV_ModStart> NG",0
467,"<S2SV_ModStart> UINT error ; if (! <S2SV_ModStart>, eventId ) ||! <S2SV_ModEnd> Stream_Read_UINT32 ( s <S2SV_ModStart>, pduLength ) ) { return CHANNEL_RC_INVALID_DATA ; } <S2SV_ModEnd> # ifdef WITH_DEBUG_RDPEI",0
468,"<S2SV_ModStart> ) ; } if ( pData -> socket == INVALID_SOCKET ) { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"", pData -> description, zmq_strerror ( errno ) ) ; ABORT_FINALIZE ( RS_RET_NO_ERRCODE ) ; }",0
469,"<S2SV_ModStart> struct flowi6 fl6 ; int ret <S2SV_ModStart> daddr ) ; ret = ip6_xmit ( sk, skb, & fl6, np -> opt, np -> tclass ) ; if ( ret < 0 ) return ret ; <S2SV_ModStart> = 1 ; SCTP_INC_STATS ( sock_net ( sk ), SCTP_MIB_OUTSCTPPACKS ) ; if (! ( transport -> param_flags & SPP_PMTUD_ENABLE ) ) skb -> local_df = 1 ; <S2SV_ModStart>, skb, <S2SV_ModEnd> fl6, np",0
470,"<S2SV_ModStart> ; END_OF_READING : if ( clone_info == ( ImageInfo * ) NULL ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
471,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
472,"<S2SV_ModStart> = 0 ; bn_t t ; bn_null ( t ) ; RLC_TRY { bn_new ( t ) ; bn_zero ( m ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, RSA_PUB ) ; * p_len = k_len - 3 - m_len ; for ( int i = 0 ; i < * p_len ; i ++ ) { bn_lsh ( m, m, 8 ) ; do { rand_bytes ( & pad, 1 ) ; bn_add_dig ( m, m, pad ) ; } bn_lsh ( m, m, 0 ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, 0 ) ; bn_lsh ( m, m, m_len * 8 ) ; bn_lsh ( m, m, 0 ) ; bn_lsh ( m, m, m_len * 8 ) ; } bn_lsh ( m, m, m_len * 8 ) ; bn_add_dig ( m, m, 0 ) ; bn_lsh ( m, m, m",0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,"<S2SV_ModStart> 8 ) ; psf_init_files ( psf ) ; psf_log_printf ( psf, ""File <S2SV_blank> : <S2SV_blank> %s\\n"", path ) ; if ( copy_filename ( psf, path )!= 0 ) { sf_errno = psf -> error ; return NULL ; } ; psf -> file. mode = mode ; if ( strcmp ( path, ""-"" ) == 0 ) psf -> error = psf_set_stdio ( psf ) ; else psf -> error = psf_fopen ( psf ) ;",0
475,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fix_interp_filter ( VP9_COMMON <S2SV_ModStart> cm ) { int count [ SWITCHABLE_FILTERS ] ; int i, j, c = 0 ; for ( i = 0 ; i < SWITCHABLE_FILTERS ; ++ i ) { count [ i ] = 0 ; for ( j = 0 ; j < SWITCHABLE_FILTER_CONTEXTS ; ++ j ) { if ( cm -> counts. switchable_interp [ j ] [ i ] == 0 ) break ; } } for ( j = 0 ; j < SWITCHABLE_FILTER_CONTEXTS ; ++ j ) { count [ i ] += cm -> counts. switchable_interp [ j ] [ i ] ; c += ( count [ i ] > 0 ) ; } if ( c == 1 ) { for ( i = 0 ; i < SWITCHABLE_FILTERS ; ++ i ) { if ( count [ i ] ) { cm -> interp_filter = i ; break ; } } } } if ( c == 1 ) { for ( i = 0 ; i < SWITCHABLE_FILTERS ; ++ i ) { if ( count",0
476,"<S2SV_ModStart> & cpi -> encode_frame <S2SV_ModEnd> ; VP9_COMMON * <S2SV_ModStart> mi_cols ) ; <S2SV_ModEnd> vp9_setup_src_planes ( x <S2SV_ModStart> 0, 0 <S2SV_ModEnd> ) ; vp9_setup_pre_planes <S2SV_ModStart> subsampling_y ) ; vpx_memset ( xd -> above_context [ 0 ], 0, sizeof ( * xd -> above_context [ 0 ] ) * 2 * aligned_mi_cols * MAX_MB_PLANE ) ; vpx_memset ( xd -> above_seg_context, 0, sizeof ( * xd -> above_seg_context ) * aligned_mi_cols ) ; x -> act_zbin_adj = 0 ; vpx_setup_src_planes ( x, cpi -> Source, 0, 0 ) ; vp9_setup_pre_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vpx_setup_dst_planes ( xd, get_frame_new_buffer ( cm ), 0, 0 ) ; vpx_setup_block_planes ( & x -> e_mb",0
477,"<S2SV_ModStart> hp ) ; if ( <S2SV_ModEnd> htc_request_check_host_hdr ( hp <S2SV_ModStart> ( hp ) <S2SV_ModEnd>!= 0 ) <S2SV_ModStart>, SLT_Error, ""Duplicated <S2SV_blank> HTTP <S2SV_blank> host <S2SV_blank> header"" <S2SV_ModEnd> ) ; return",0
478,"<S2SV_ModStart> EOFOp 0x07 char * magick_buffer <S2SV_ModEnd> ; Image * <S2SV_ModStart> ) ) ; magick_buffer = ( char * ) malloc ( 12 ) ; if (! magick_buffer ) ThrowReaderException ( CorruptImageError, ""MemoryAllocationFailed"" ) ; <S2SV_ModStart> ( image, 12, magick_buffer <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( memcmp ( magick_buffer <S2SV_ModEnd>, ""\\122\\314"", <S2SV_ModStart>. x = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart>. y = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart> -> columns = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart> -> rows = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart> -> colormaps = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart> -> rows = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart> -> colormaps = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart> -> colormaps = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart> -> rows = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart> -> colormaps = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart> -> colormaps = ReadBlobLSBLong <S2SV_ModEnd> ( image ) <S2SV_ModStart> -> rows = ReadBlobLSB",0
479,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> sizeof ( tETH_HDR ),1
480,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> ps_dec -> s_cur_slice <S2SV_ModStart> ps_dec -> s_cur_slice == 0 ) { ret = ih264d_start_of_slice ( ps_dec, i4_poc, u2_frame_num, ps_pps ) ; if ( ret < 0 ) { H264_MUTEX_UNLOCK ( & ps_dec -> process_disp_mutex ) ; return ret ; } ret = ih264d_start_of_slice ( ps_dec, i4_poc, u2_frame_num, ps_pps ) ; if ( ret < 0 ) { H264_MUTEX_UNLOCK ( & ps_dec -> process_disp_mutex ) ; return ret ; } ret = ih264d_start_of_slice ( ps_dec, i4_poc, u2_frame_num, ps_pps ) ; if ( ret < 0 ) { H264_MUTEX_UNLOCK ( & ps_dec -> process_disp_mutex ) ; return ret ; } ret = ih264d_start_of_slice ( ps_dec, i4_poc,",0
481,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> * karg ; <S2SV_ModEnd> struct pci_dev * <S2SV_ModStart> pci_dev * pdev <S2SV_ModEnd> ; unsigned int <S2SV_ModStart> karg ) ; } if ( mpt_verify_adapter ( karg -> hdr. iocnum, & ioc ) < 0 ) { printk ( KERN_DEBUG MYNAM ""%s::mptctl_getiocinfo() <S2SV_blank> - <S2SV_blank> ioc%d <S2SV_blank> not <S2SV_blank> found!\\n"", __FILE__, __LINE__, iocnum ) ; kfree ( karg ) ; return - ENODEV ; } if ( karg -> hdr. maxDataSize!= data_size ) { printk ( MYIOC_s_ERR_FMT ""%s@%d::mptctl_getiocinfo <S2SV_blank> - <S2SV_blank> "" ""Structure <S2SV_blank> size <S2SV_blank> mismatch!\\n"", __FILE__, __LINE__ ) ; kfree ( karg ) ; return - ENODEV ; } if ( karg -> hdr. maxDataSize!= data_size ) { printk ( MYIOC_s_ERR_FMT ""%s@%d::",0
482,"<S2SV_ModStart> ; pixels = AcquireQuantumMemory ( image -> rows, 3 * sizeof ( * pixels ) ) ; if ( pixels == ( unsigned char * ) NULL ) ThrowReaderException ( ResourceLimitError, ""MemoryAllocationFailed"" ) ; length = ( size_t ) ( 3 * image -> columns ) ; for ( y = 0 ; y < ( ssize_t ) image -> rows ; y ++ ) { count = ReadBlob ( image, length, pixels ) ; if ( ( size_t ) count!= length ) ThrowReaderException ( CorruptImageError, ""UnableToReadImageData"" ) ; p = pixels ; q = QueueAuthenticPixels ( image, 0, y, image -> columns, 1, exception ) ; if ( q == ( PixelPacket * ) NULL ) break ; SetPixelRed ( q, ScaleCharToQuantum ( 4 * * p ++ ) ) ; SetPixelGreen ( q, ScaleCharToQuantum ( 4 * * p ++ ) ) ; SetPixelBlue ( q, ScaleCharToQuantum ( 4 * * p ++ ) ) ; q ++ ; } if ( SyncAuthenticPixels ( image, 0, image -> rows, 1, exception ) == ( PixelPacket * ) NULL",0
483,"<S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv <S2SV_ModStart> { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, * argv",0
484,"<S2SV_ModStart> -> offset ; n -> order = EXIF_BYTE_ORDER_INTEL ; datao += exif_get_long ( buf + datao + 8, EXIF_BYTE_ORDER_INTEL ) ; <S2SV_ModStart> ( datao + 2 < datao ) || ( datao + 2 < 2 ) || ( datao + 2 > buf_size ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } c = exif_get_short ( buf + datao, EXIF_BYTE_ORDER_INTEL ) ; datao += 2 ; exif_mnote_data_fuji_clear ( n ) ; n -> entries = exif_mem_alloc ( en -> mem, sizeof ( MnoteFujiEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( en -> log, ""ExifMnoteDataFuji"", sizeof ( MnoteFujiEntry ) * c ) ; return ; } tcount = 0 ; for ( i = 0 ;",0
485,"<S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> %s\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> %s\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> %s\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> %s\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> %s\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> %s\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> %s\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> %s\\n"" <S2SV_ModEnd>, procName, <S2SV_ModStart> { L_ERROR ( ""output <S2SV_blank> file <S2SV_blank> %s <S2SV_blank>",0
486,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> opt = service_options <S2SV_ModStart> service_options. next <S2SV_ModEnd> ; while ( <S2SV_ModStart> 0 ; } <S2SV_ModEnd> s_log ( LOG_DEBUG <S2SV_ModStart> servname ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
487,<S2SV_ModStart> void ) { if (! recovery_started ) { recovery_started = 1 ; return ; },0
488,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ;",0
489,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
490,<S2SV_ModStart> { WORD32 i <S2SV_ModEnd> ; WORD32 num_neg_pics <S2SV_ModStart> u4_num_st_curr_after [ u4_num_st_curr_before + 1 <S2SV_ModStart> u4_num_lt_curr [ u4_num_lt_curr + 1 <S2SV_ModStart> u4_num_st_curr_after [ u4_num_lt_curr + 1 <S2SV_ModStart> u4_num_lt_curr [ u4_num_lt_curr + 1 <S2SV_ModStart> u4_num_lt_curr [ u4_num_lt_curr + 1 <S2SV_ModStart> u4_num_st_curr_after [ u4_num_st_curr_before + 1 <S2SV_ModStart> u4_num_lt_curr [ u4_num_lt_curr + 1 <S2SV_ModStart> u4_num_st_curr_after [ u4_num_lt_curr + 1 <S2SV_ModStart> u4_num_lt_curr [ u4_num_lt_curr + 1 <S2SV_ModStart> u4_num_lt_curr [ u4_num_lt_curr + 1 <S2SV_ModStart> u4_num_st_curr_after [ u4_num_st_curr_before + 1 <S2SV_ModStart> u4,0
491,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> print_object ( cJSON <S2SV_ModStart> child ) { if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( names = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) { cJSON_free ( entries ) ; return 0 ; } memset ( entries, 0, sizeof ( char * ) * numentries ) ; child = item -> child ; ++ depth ; if ( fmt ) len += depth ; while ( child ) { if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) { cJSON_free ( entries ) ; return 0 ; } memset ( names, 0, sizeof ( char * ) * numentries ) ; child = child -> child ; ++ depth ; if ( fmt ) len += depth ; while ( child ) { <S2SV_ModStart> = print_string_ptr ( <S2SV_ModEnd> child -> string <S2SV_ModStart> child -> string ) ; entries [ i ++ ] = ret = print_value ( child, depth, fmt",0
492,"<S2SV_ModStart> sk ) ; if ( writable ) { unix_state_lock ( sk ) ; other = unix_peer ( sk ) ; if ( other && <S2SV_ModEnd> unix_peer ( other <S2SV_ModStart> ( other ) && <S2SV_ModEnd> unix_recvq_full ( other <S2SV_ModStart> ( other ) && unix_dgram_peer_wake_me ( sk, other ) <S2SV_ModStart> = 0 ; unix_state_unlock ( sk ) ; } <S2SV_ModEnd> } if (",0
493,"<S2SV_ModStart> h ) { sprintf ( outbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; sprintf ( outbuffer, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", x, y, w, h ) ;",0
494,<S2SV_ModStart> ( OM_uint32 ) GSS_S_DEFECTIVE_TOKEN <S2SV_ModEnd> ; return GSS_S_DEFECTIVE_TOKEN <S2SV_ModStart> buffer. length > token_wrapper_len ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } ptr = ( unsigned char * ) header -> buffer. value + token_wrapper_len ; signalg = ptr [ 0 ] ; signalg |= ptr [ 1 ] << 8 ; sealalg = ptr [ 2 ] ; sealalg |= ptr [ 3 ] << 8 ; if ( ptr [ 4 ]!= 0xFF || ptr [ 5 ]!= 0xFF ) { * minor_status = 0 ; <S2SV_ModEnd> return GSS_S_DEFECTIVE_TOKEN ;,0
495,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vp9_ref_frame_t * ) ; YV12_BUFFER_CONFIG * fb <S2SV_ModStart> NULL ) { <S2SV_ModEnd> vp9_get_reference_enc ( ctx",0
496,<S2SV_ModStart> plug ) ; <S2SV_ModEnd> put_ioctx ( ctx,0
497,"<S2SV_ModStart> * name, my_bool <S2SV_ModEnd> rep_quick ) { <S2SV_ModStart> ) ) { if (! rep_quick && init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> read_buffer_length, READ_CACHE, share -> pack. header_length, MYF ( MY_WME ) ) ) { DBUG_RETURN ( 0 ) ; } <S2SV_ModStart> ) ) { if (! rep_quick && init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, READ_CACHE, share -> pack. header_length, MYF ( MY_WME ) ) ) { DBUG_RETURN ( 0 ) ; } <S2SV_ModStart> ) ) { if (! rep_quick && init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, READ_CACHE, share -> pack. header_length, MYF ( MY_WME ) ) ) { DBUG_RETURN ( 0 ) ; }",0
498,"<S2SV_ModStart> s } ; uECC_word_t p [ uECC_MAX_WORDS * 2 ] ; wordcount_t num_words = curve -> num_words ; wordcount_t num_n_words = BITS_TO_WORDS ( curve -> num_n_bits ) ; bitcount_t num_n_bits = curve -> num_n_bits ; if ( uECC_vli_isZero ( k, num_words ) || uECC_vli_cmp ( curve -> n, k, num_words )!= 1 ) { return 0 ; } carry = regularize_k ( k, tmp, s, curve ) ; EccPoint_mult ( p, curve -> G, k2 [! carry ], 0, num_n_bits + 1, curve ) ; if (! g_rng_function ) { uECC_vli_clear ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! uECC_generate_random_int ( tmp, curve -> n, num_n_words ) ) { return 0 ; } uECC_vli_modMult",0
499,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|dao-truncated]"" <S2SV_ModEnd> ) ) ;",0
500,<S2SV_ModStart> buf ; } <S2SV_ModEnd> uint32_t new_free_total = <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
501,"<S2SV_ModStart> tp ; { if ( * cp == '\\\\' && cp [ 1 ] && index ( ""mM"", cp [ 1 ] ) && cp [ 2 ] ) { meta = 1 ; cp += 2 ; } if ( * cp == '\\\\' && cp [ 1 ] && index ( ""0123456789xXoO"", cp [ 1 ] ) && cp [ 2 ] ) { NEARDATA const char hex [ ] = ""00112233445566778899aAbBcCdDeEfF"" ; const char * dp ; int dcount = 0 ; if ( * cp == 'x' || * cp == 'X' ) for ( ++ cp ; * cp && ( dp = index ( hex, * cp ) ) && ( dcount ++ < 2 ) ; cp ++ ) cval = ( cval * 16 ) + ( ( int ) ( dp - hex ) / 2 ) ; else if ( * cp == 'o' || * cp == 'O' ) for ( ++ cp ; * cp && ( index ( ""01234567"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 8 ) + ( * cp - '0",0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
503,"<S2SV_ModStart>, * pixg <S2SV_ModEnd> ; PIXCMAP * <S2SV_ModStart> = 15 ; <S2SV_ModEnd> pixc = pixFewColorsOctcubeQuant1 <S2SV_ModStart>, level ) ; if ( pixc <S2SV_ModEnd> == NULL ) <S2SV_ModStart> == NULL ) { pixDestroy ( & pixc ) ; <S2SV_ModStart> NULL ) ; }",0
504,<S2SV_ModStart>. vf = vpx_mse16x16 <S2SV_ModEnd> ; xd ->,1
505,"<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> overhead = 16 <S2SV_ModStart> + 1 ; size_t size = overhead ; if ( ( flags & MONGO_CONTINUE_ON_ERROR ) && ( size > conn -> max_bson_size ) ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } mm = mongo_message_create ( size, 0, 0, MONGO_OP_INSERT ) ; data = & mm -> data ; if ( flags & MONGO_CONTINUE_ON_ERROR ) data = mongo_data_append32 ( data, & ONE ) ; else data = mongo_data_append32 ( data, & ZERO ) ; for ( i = 0 ; i < count ; i ++ ) { data = mongo_data_append ( data, bsons [ i ] -> data, bson_size ( bsons [ i ] ) ) ; } if ( write_concern ) { if ( mongo_message_send ( conn, mm ) == MONGO_ERROR ) { return MONGO_ERROR ; } return mongo_check_last_error ( conn, ns, write_concern ) ; }",0
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NEGO_STATE_FAIL ; goto fail <S2SV_ModEnd> ; } Stream_Read_UINT8 <S2SV_ModStart> = NEGO_STATE_FINAL ; fail : return ;,0
507,"<S2SV_ModStart> i, target_bits_per_mb <S2SV_ModEnd> ; target_bits_per_mb = <S2SV_ModStart> int bits_per_mb_at_this_q = <S2SV_ModEnd> vp9_rc_bits_per_mb ( cm <S2SV_ModStart> i, correction_factor <S2SV_ModEnd> ; if (",0
508,<S2SV_ModStart> ; value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1101WritePhyReg (,0
509,<S2SV_ModStart>! arg ) { asdl_seq_free ( posargs ) ; <S2SV_ModStart> return NULL ; } <S2SV_ModStart>! arg ) { asdl_seq_free ( posdefaults ) ; <S2SV_ModStart> return NULL ; } <S2SV_ModStart>! arg ) { asdl_seq_free ( kwonlyargs ) ; <S2SV_ModStart> return NULL ; } <S2SV_ModStart>! arg ) { asdl_seq_free ( posdefaults ) ; <S2SV_ModStart> return NULL ; } <S2SV_ModStart>! arg ) { asdl_seq_free ( posdefaults ) ; <S2SV_ModStart> return NULL ; } <S2SV_ModStart>! arg ) { asdl_seq_free ( kwdefaults ) ; <S2SV_ModStart> return NULL ; } <S2SV_ModStart>! arg ) { asdl_seq_free ( posdefaults ) ; <S2SV_ModStart> return NULL ; } <S2SV_ModStart>! arg ) { asdl_seq_free ( posdefaults ) ; <S2SV_ModStart> return NULL ; } <S2SV_ModStart>! arg ) { asdl_seq_free ( kwdefaults ) ; <S2SV_ModStart> return NULL ; } <S2SV_ModStart>! arg ) { asdl_seq_free ( posdefaults ) ; <S2SV_ModStart> return NULL ; } <S2SV_ModStart>! arg ) { asdl_seq_free ( kwdefaults ) ; <S2SV_ModStart> return NULL ; } <S2SV_ModStart>! arg ) { asdl_seq_free ( posdefaults ) ; <S2SV_ModStart> return NULL ; },0
510,"<S2SV_ModStart> int dst_stride, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart> int i ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> uint8_t, left_col <S2SV_ModEnd> ) ; DECLARE_ALIGNED <S2SV_ModStart> plane ] ; <S2SV_ModEnd> if ( plane <S2SV_ModStart> + y ; memset <S2SV_ModEnd> ( left_col, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( right_col, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( right_col, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( above_row, <S2SV_ModStart> + bs ; mem",0
511,"<S2SV_ModStart> ++ ; } else if ( pattern [ end ] == \'""\' ) { end ++ ; while ( ( pattern [ end ]!= 0 ) && ( pattern [ end ]!= \'""\' ) ) end ++ ; } <S2SV_ModStart> ++ ; } else if ( pattern [ end ] == \'""\' ) { end ++ ; while ( ( pattern [ end ]!= 0 ) && ( pattern [ end ]!= \'""\' ) ) end ++ ; }",0
512,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_completed_io_lock ) ;,1
513,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 2 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> wb ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> frame_type ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> show_frame ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> KEY_FRAME ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; } vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
514,"<S2SV_ModStart> ( stderr, ""Error <S2SV_blank> in <S2SV_blank> %s:%d: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, __FILE__, <S2SV_ModStart> ( stderr, ""Error <S2SV_blank> in <S2SV_blank> %s:%d: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, __FILE__, <S2SV_ModStart> ( stderr, ""Error <S2SV_blank> in <S2SV_blank> %s:%d: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, __FILE__, <S2SV_ModStart> ( stderr, ""Error <S2SV_blank> in <S2SV_blank> %s:%d: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, __FILE__, <S2SV_ModStart> ( stderr, ""Error <S2SV_blank> in <S2SV_blank> %s:%d: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, __FILE__, <S2SV_ModStart> ( stderr, ""Error <S2SV_blank> in <S2SV_blank> %s:%d: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, __FILE__, <S2SV_ModStart> ( stderr, ""Error <S2SV_blank> in <S2SV_blank> %s:%d: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, __FILE__, <S2SV_ModStart> ( stderr, ""Error <S2SV_blank> in <S2SV_blank> %s:%d: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, __FILE__, <S2SV_ModStart> ( stderr, ""Error <S2SV_blank> in <S2SV_blank> %s:%d: <S2SV_blank> %s\\n"" <S2SV_ModEnd>, __FILE__, <S2SV_ModStart> ( stderr, ""Error <S2SV_blank> in <S2SV_blank> %s:%d: <S2SV_blank> %s\\n""",0
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { q = osStrchr <S2SV_ModEnd> ( p +,1
516,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
517,<S2SV_ModStart> KEY_FRAME ) { memcpy <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd ->,1
518,"<S2SV_ModStart> error_t error ; int16_t <S2SV_ModEnd> n ; uint32_t <S2SV_ModStart> ( interface, ENC624J600_ESTAT <S2SV_ModEnd> ) & ESTAT_PKTCNT <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL <S2SV_ModEnd>, ENC624J600_RX_BUFFER_STOP ) <S2SV_ModStart> ( interface, ENC624J600_ERXTAIL <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_ECON",0
519,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv, VALUE klass <S2SV_ModEnd> ) { xmlSchemaPtr <S2SV_ModStart> ; xmlSchemaParserCtxtPtr ctx ; VALUE rb_schema ; VALUE errors = rb_ary_new ( ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; # ifdef HAVE_XMLSCHEMASETPARSERSTRUCTUREDERRORS xmlSchemaSetParserStructuredErrors ( ctx, Nokogiri_error_array_pusher, ( void * ) errors ) ; # endif schema = xmlSchemaParse ( ctx ) ; xmlSetStructuredErrorFunc ( NULL, NULL ) ; xmlSchemaFreeParserCtxt ( ctx ) ; if ( NULL == schema ) { xmlErrorPtr error = xmlGetLastError ( ) ; if ( error ) Nokogiri_error_raise ( NULL, error ) ; else rb_raise ( rb_eRuntimeError, ""Could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> document"" ) ; return Qnil ; } rb_schema = Data_Wrap_Struct ( klass, 0, dealloc, schema ) ; rb_iv_set ( rb_schema, ""@errors"", errors ) ; return rb_schema ; } ctx <S2SV_ModStart>",0
520,"<S2SV_ModStart> ; } } if ( strlen ( line_text ) > CONFLINELEN ) { s_log ( LOG_ERR, ""Configuration <S2SV_blank> line <S2SV_blank> too <S2SV_blank> long: <S2SV_blank> %s"", line_text ) ; print_syntax ( ) ; return 1 ; }",0
521,<S2SV_ModStart> 2 ] ; } for ( x = 0 ; x < state -> xsize ; x ++ ) { out [ 0 ] = ptr [ x ] ; out [ 1 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; out [ 2 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; } for ( x = 0 ; x < state -> xsize ; x ++ ) { out [ 0 ] = ptr [ x + state -> xsize ] ; out [ 1 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; out [ 2 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; } for ( x = 0 ; x < state -> xsize ; x ++ ) { out [ 0 ] = ptr [ x + state -> xsize ] ; out [ 1 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; out [ 2 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ;,0
522,<S2SV_ModStart> err = - <S2SV_ModEnd> EALREADY ; if <S2SV_ModStart> - EINVAL ; spin_lock ( & po -> bind_lock ) ; if ( po -> running && <S2SV_ModEnd> match -> type <S2SV_ModStart> ; } } spin_unlock ( & po -> bind_lock ) ; if ( err &&! refcount_read ( & match -> sk_ref ) ) { list_del ( & match -> list ) ; kfree ( match ) ; },1
523,<S2SV_ModStart> POLL_IN ) ; <S2SV_ModEnd> perf_event_wakeup ( handle,0
524,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int utf8s_to_utf16s ( <S2SV_ModEnd> u8 * s <S2SV_ModStart> * s, unicode_t <S2SV_ModEnd> len, wchar_t <S2SV_ModStart> = pwcs ; if ( len < 0 ) return - EINVAL ; while ( * s && len > 0 ) { if ( * s & 0x80 ) { size = utf8_to_utf32 ( s, len, & u ) ; if ( size < 0 ) return - EINVAL ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( u & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( u & SURROGATE_BITS ) ) ; } else { * op ++ = ( wchar_t ) u ;",0
525,"<S2SV_ModStart> EPROTONOSUPPORT ) { if ( as_console ) { sleep ( 2 ) ; } <S2SV_ModStart> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" <S2SV_ModEnd> ) ; }",0
526,"<S2SV_ModStart> ( interface, KSZ8851_RXFHSR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> ) == 0 <S2SV_ModStart> ( interface, KSZ8851_RXFDPR, KSZ8851_RXFDPR_RXFPAI <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851ReadFifo <S2SV_ModStart> ( interface, KSZ8851_RXFDPR, KSZ8851_RXFDPR_RXFPAI <S2SV_ModEnd> ) ; ancillary <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ancillary <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_RRXEF <S2SV_ModEnd> ) ; return",0
527,"<S2SV_ModStart> ast_for_funcdef_impl ( struct compiler * c, const node * n, asdl_seq * decorator_seq, int is_async ) { identifier name ; arguments_ty args ; asdl_seq * body ; expr_ty returns = NULL ; int name_i = 1 ; node * tc ; string type_comment = NULL ; if ( c -> c_feature_version < 5 ) { ast_error ( c, n, ""Async <S2SV_blank> functions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.5 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } REQ ( n, funcdef ) ; name = NEW_IDENTIFIER ( CHILD ( n, name_i ) ) ; if (! name ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i ), 0 ) ) return NULL ; args = ast_for_arguments ( c, CHILD ( n, name_i + 1 ) ) ; if (! args ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 2 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name",0
528,"<S2SV_ModStart> ( mm, 0xA00000 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( pgd, 0xA00000 <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( pud, 0xA00000 <S2SV_ModEnd> ) ; split_huge_page_pmd <S2SV_ModStart>, pmd, 0xA00000 <S2SV_ModEnd>, & ptl <S2SV_ModStart> : flush_tlb ( ) ; mm_dec_nr_pmds ( mm",0
529,"<S2SV_ModStart> { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> packet_data_start_ptr <S2SV_blank> = <S2SV_blank> 0x%x <S2SV_blank> packet_len <S2SV_blank> = <S2SV_blank> 0x%x <S2SV_blank> packet_data_start_ptr <S2SV_blank> = <S2SV_blank> 0x%x <S2SV_blank> packet_data_start_ptr <S2SV_blank> = <S2SV_blank> 0x%x <S2SV_blank> packet_data_start_ptr <S2SV_blank> = <S2SV_blank> 0x%x <S2SV_blank> packet_data_start_ptr <S2SV_blank> = <S2SV_blank> 0x%x <S2SV_blank> packet_data_start_ptr <S2SV_blank> = <S2SV_blank> 0x%x <S2SV_blank> packet_data_start_ptr <S2SV_blank> = <S2SV_blank> 0x%x <S2SV_blank> packet_data_start_ptr <S2SV_blank> = <S2SV_blank> 0x%x <S2SV_blank> packet_data_start_ptr <S2SV_blank> = <S2SV_blank> 0x%x <S2SV_blank> packet_data_start_ptr <S2SV_blank> = <S2SV_blank> 0x%x <S2SV_blank> packet_data_start_ptr <S2SV_blank> = <S2SV_blank> 0x%x <S2SV_blank> packet_data_start_ptr <S2SV_blank> = <S2SV_blank> 0x%x <S2SV_blank> packet_data_start_ptr <S2SV_blank> = <S2SV_blank> 0x%x <S2SV_blank> packet_data_start_ptr <S2SV_blank> = <S2SV_blank> 0x%x <S2SV_blank> packet_data_start_ptr <S2SV_blank> = <S2SV_blank> 0x%",0
530,"<S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> ADB <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" <S2SV_ModEnd> ) ; print_usage <S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> ADB <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" <S2SV_ModEnd> ) ; print_usage <S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> ADB <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" <S2SV_ModEnd> ) ; print_usage <S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> ADB <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" <S2SV_ModEnd> ) ; print_usage <S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> ADB <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" <S2SV_ModEnd> ) ; print_usage <S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> ADB <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" <S2SV_ModEnd> ) ; print_usage <S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> ADB <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" <S2SV_ModEnd> ) ; print_usage <S2SV_ModStart> { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> ADB",0
531,"<S2SV_ModStart> 0 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif <S2SV_ModStart> row ++ ) <S2SV_ModEnd> for ( col <S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD if ( ( RAW ( row, col ) = pred [ col & 1 ] ) > 4098 && col < width ) derror ( ) ; # endif } for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { if ( ( i = col % 14 ) == 0 ) { if ( ( j = pana_bits ( 8 ) ) ) { if ( ( pred [ i & 1 ] -= 0x80 << sh ) < 0 || sh == 4 ) pred [ i & 1 ] &= ~ ( ( ~ 0u ) << sh ) ; pred [ i & 1 ] += j << sh ; } } else if ( ( nonz [ i & 1 ] = pana_bits ( 4 ) ) || i > 11 ) pred [ i & 1 ] = nonz [ i & 1 ] << 4 | pana_bits ( 4 )",0
532,<S2SV_ModStart> ; if (! nl ) { up_write ( & _hash_lock ) ; return - ENOMEM ; } if (,0
533,"<S2SV_ModStart> ; if ( quantum_info == ( ImageInfo * ) NULL ) { clone_info = DestroyImageInfo ( clone_info ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; } if (",0
534,<S2SV_ModStart> ( bfqq ) __bfq_idle_slice_timer_body <S2SV_ModEnd> ( bfqq ),0
535,<S2SV_ModStart> ; length += sizeof ( PRIMARY_DRAWING_ORDER_FIELD ) <S2SV_ModEnd> ; length +=,0
536,<S2SV_ModStart> goto out ; if ( d_is_dentry ( old ) && d_is_dentry ( old ) ) { err = - EBUSY ; goto out ; } if ( d_is_dentry ( new ) && d_is_dentry ( new ) ) { err = - EBUSY ; goto out ; },0
537,"<S2SV_ModStart> plane ++ ) { vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd, <S2SV_ModStart> ) ; } }",0
538,"<S2SV_ModStart> * cpi, TileDataEnc * tile_data <S2SV_ModEnd>, int mi_row <S2SV_ModStart> -> e_mbd ; TileInfo * tile_info = & tile_data -> tile_info ; <S2SV_ModStart> ( cpi, tile_data <S2SV_ModEnd>, mi_row, <S2SV_ModStart> ( cpi, tile_data <S2SV_ModEnd>, mi_row, <S2SV_ModStart> ( cpi, tile_data <S2SV_ModEnd>, mi_row,",0
539,"<S2SV_ModStart> = NULL ; if ( strcmp ( filename, ""-"" ) ) fclose ( reader. fhd ) ; <S2SV_ModStart> superblock ) ; <S2SV_ModEnd> hrtf = getHrtf",0
540,"<S2SV_ModStart> -> ranges = calloc ( 1, <S2SV_ModEnd> sizeof ( MappedRange",0
541,"<S2SV_ModStart> ; if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_ALTR_FRAME ; vp8_use_as_reference ( ctx -> cpi, ref ) ; } if ( flags & ( VP8_EFLAG_NO_UPD_LAST | VP8_EFLAG_NO_UPD_GF | VP8_EFLAG_NO_UPD_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_UPD_ARF ) ref ^= VP8_ALTR_FRAME ; vp8_use_as_reference ( ctx",0
542,"<S2SV_ModStart> ; if ( BImgBuff == ( unsigned char * ) NULL ) { clone_info = DestroyImageInfo ( clone_info ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; } else { quantum_info = ( QuantumInfo * ) malloc ( sizeof ( QuantumInfo ) ) ; if ( quantum_info == ( QuantumInfo * ) NULL ) { ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; } quantum_info = ( QuantumInfo * ) malloc ( sizeof ( QuantumInfo ) ) ; if ( quantum_info == ( QuantumInfo * ) NULL ) { quantum_info = ( QuantumInfo * ) malloc ( sizeof ( QuantumInfo ) ) ; if ( quantum_info == ( QuantumInfo * ) NULL ) { ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; } quantum_info = ( QuantumInfo * ) malloc ( sizeof ( QuantumInfo ) ) ; if ( quantum_info == ( QuantumInfo * ) NULL ) { ThrowReaderException ( Cor",0
543,<S2SV_ModStart>! head ) <S2SV_ModEnd> return - EINVAL <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
544,"<S2SV_ModStart> * pptr, u_int64 <S2SV_ModEnd> len ) { <S2SV_ModStart> advance ; u_int64 <S2SV_ModEnd> tlen ; const <S2SV_ModStart> ) ) ; ND_TCHECK2 ( tptr [ 2 ], as_size ) ; ND_PRINT ( ( ndo, ""%s <S2SV_blank> "", as_printf ( ndo, astostr, sizeof ( astostr ), tptr [ 2 ] ) ) ) ; <S2SV_ModStart> ) ) ; ND_TCHECK2 ( tptr [ 3 ], nhlen ) ; ND_PRINT ( ( ndo, ""%s <S2SV_blank> "", as_printf ( ndo, astostr, sizeof ( astostr ), nhlen ) ) ) ;",0
545,"<S2SV_ModStart> -> outputbuffer, ""<tr><td>Stack <S2SV_blank> file</td><td>%s</td></tr>"" <S2SV_ModEnd>, Run. <S2SV_ModStart>. stack ) StringBuffer_append ( res -> outputbuffer, ""<tr><td>Stack <S2SV_blank> file</td><td>%s</td></tr>"", Run. stack ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Stack <S2SV_blank> file</td><td>%s</td></tr>"", Run. stack ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Stack <S2SV_blank> file</td><td>%s</td></tr>"", Run. stack ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Stack <S2SV_blank> file</td><td>%s</td></tr>"", Run. stack ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Stack <S2SV_blank> file</td><td>%s</td></tr>"", Run. stack ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Stack <S2SV_blank> file</td><td>%s</td></tr>"", Run. stack ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Stack <S2SV_blank> file</",0
546,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
547,"<S2SV_ModStart> ) ) { snprintf <S2SV_ModEnd> ( constr1, <S2SV_ModStart> ) ) { snprintf <S2SV_ModEnd> ( constr2, <S2SV_ModStart> ) ) { snprintf <S2SV_ModEnd> ( constr1, <S2SV_ModStart> ) ) { snprintf <S2SV_ModEnd> ( constr2, <S2SV_ModStart> ) ) { snprintf <S2SV_ModEnd> ( constr1, <S2SV_ModStart> ) ) { snprintf <S2SV_ModEnd> ( constr2, <S2SV_ModStart> ) ) { snprintf <S2SV_ModEnd> ( constr1, <S2SV_ModStart> ) ) { snprintf <S2SV_ModEnd> ( constr2, <S2SV_ModStart> ) ) { snprintf <S2SV_ModEnd> ( constr1, <S2SV_ModStart> ) ) { snprintf <S2SV_ModEnd> ( constr2, <S2SV_ModStart> ) ) { snprintf <S2SV_ModEnd> ( constr1, <S2SV_ModStart> ) ) { snprintf <S2SV_ModEnd> ( constr2, <S2SV_ModStart> ) ) { snprintf <S2SV_ModEnd> ( constr1, <S2SV_ModStart> ) ) { snprintf <S2SV_ModEnd> ( constr2, <S2SV_ModStart> ) ) { snprintf <S2SV_ModEnd> ( constr1, <S2SV_ModStart> ) ) { snprintf <S2SV_ModEnd> ( constr2, <S2SV_ModStart> ) ) { snprintf <S2SV_ModEnd> ( constr1, <S2SV_ModStart> ) ) { snprintf <S2SV_ModEnd> ( constr2, <S2SV_ModStart> ) ) { snprintf <S2SV_ModEnd> ( constr1, <S2SV_ModStart> ) ) { snprintf <S2SV_ModEnd> ( constr2, <S2SV_ModStart> ) ) { snprintf <S2SV_ModEnd> ( constr2, <S2SV_ModStart> ) ) { snprintf <S2SV_ModEnd> ( constr2, <S2SV_ModStart> ) ) { snprintf <S2SV_ModEnd> ( constr1, <S2SV_ModStart>",0
548,"<S2SV_ModStart> iad_num ++ ; if ( iad_num > USB_MAXINTERFACES ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, nintf_orig, USB_MAXINTERFACES ) ; nintf = USB_MAXINTERFACES ; }",0
549,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
550,<S2SV_ModStart> ; distortion = vpx_variance16x16 <S2SV_ModEnd> ( * (,1
551,"<S2SV_ModStart> interface ) ; <S2SV_ModEnd> if ( macCompAddr <S2SV_ModStart> ) ) { temp = enc624j600ReadReg ( interface, ENC624J600_MAADR1 ) ; interface -> macAddr. w [ 0 ] = letoh16 ( temp ) ; temp = enc624j600ReadReg ( interface, ENC624J600_MAADR2 ) ; interface -> macAddr. w [ 1 ] = letoh16 ( temp ) ; temp = enc624j600ReadReg ( interface, ENC624J600_MAADR3 ) ; interface -> macAddr. w [ 2 ] = letoh16 ( temp ) ; } else { temp = htole16 ( interface -> macAddr. w [ 0 ] ) ; enc624j600WriteReg ( interface, ENC624J600_MAADR1, temp ) ; temp = htole16 ( interface -> macAddr. w [ 1 ] ) ; enc624j600WriteReg ( interface, ENC624J600_MAADR2, temp ) ; temp = htole16 ( interface -> macAddr. w [ 2 ] ) ; enc624j600WriteReg ( interface,",0
552,"<S2SV_ModStart> * start ; va_start ( argptr, format ) ; vsnprintf ( psf -> header, sizeof ( psf -> header ), format, argptr ) ; va_end ( argptr ) ; <S2SV_ModStart> header ) ; <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> headindex += <S2SV_ModEnd> strlen ( ( <S2SV_ModStart> header ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
553,<S2SV_ModStart> -> alg_priv ) { <S2SV_ModStart> alg_priv ) ; ctx -> priv -> alg_priv = NULL ; },0
554,<S2SV_ModStart> { sf -> <S2SV_ModEnd> recode_loop = ( <S2SV_ModStart>! frame_is_intra_only ( cpi <S2SV_ModEnd> ) ; sf <S2SV_ModStart> ; sf -> <S2SV_ModEnd> tx_size_search_method = vp9_frame_is_boosted <S2SV_ModStart> ; sf -> <S2SV_ModEnd> mode_skip_start = 10 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> recode_loop = ALLOW_RECODE_KFARFGF <S2SV_ModStart> ; sf -> <S2SV_ModEnd> intra_y_mode_mask [ TX_32X32 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> intra_uv_mode_mask [ TX_16X16 <S2SV_ModStart> = INTRA_DC_H_V ; <S2SV_ModEnd> } if ( <S2SV_ModStart> { sf -> <S2SV_ModEnd> tx_size_search_method = vp9_frame_is_boosted <S2SV_ModStart> ; sf -> <S2SV_ModEnd> mode_skip_start = 10 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> recode_loop = ALLOW_RECODE_KFARFGF <S2SV_ModStart> ; sf -> <S2SV_ModEnd> intra_y_mode_mask [ TX_32X32 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> intra_y_mode_mask [ TX_16X32 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> intra_uv_mode_mask [ TX_16X16 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> mode,0
555,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
556,"<S2SV_ModStart> ) + 2 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else condmovestack ( L, { }, { } ) ; luaE_shrinkCI ( L ) ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else condmovestack ( L, { }, { } ) ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else condmovestack ( L, { }, { } ) ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 ) ; else condmovestack ( L, { }, { } ) ; luaE_shrinkCI ( L ) ;",0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,"<S2SV_ModStart>, * s <S2SV_ModEnd> ; int quote <S2SV_ModStart> errstr ) { <S2SV_ModEnd> char buf [ <S2SV_ModStart> 128 ] ; if (! _PyUnicode_AsString ( errstr ) ) { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } Py_DECREF ( errstr ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } Py_DECREF ( type ) ; Py_DECREF ( value ) ; Py_XDECREF ( tback ) ; } # endif return Str ( str, kind, LINENO ( n ), n -> n_col_offset, c -> c_arena ) ; } # ifdef Py_USING_UNICODE if ( PyErr_ExceptionMatches ( PyExc_UnicodeError ) ) { PyObject * type, * value, * tback, * errstr ; PyErr_Fetch ( & type, & value, & tback ) ; errstr = PyObject_Str ( value ) ; if ( errstr ) { char * s = """" ; PyOS_snprintf ( buf, sizeof ( buf ), ""(unicode <S2SV_blank> error) <S2SV_blank> %s"", s ) ; ast_error",0
559,"<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> break ; } input_string = strdup ( options ) ; option_name = strtok_r ( option_name, ""="", & input_ptr ) ; while ( option_name!= NULL ) { option_value = strtok_r ( NULL, "" <S2SV_blank> "", & input_ptr ) ; if ( option_value == NULL ) { svc_log ( svc_ctx, SVC_LOG_ERROR, ""option <S2SV_blank> missing <S2SV_blank> value: <S2SV_blank> %s\\n"", option_name ) ; res = VPX_CODEC_INVALID_PARAM ; break ; } if ( strcmp ( ""encoding-mode"", option_name ) == 0 ) { res = set_option_encoding_mode ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""layers"", option_name ) == 0 ) { svc_ctx -> spatial_layers = atoi ( option_value ) ; } else if ( strcmp ( ""scale-factors"", option_name ) == 0 ) { res = parse_scale_factors",0
560,<S2SV_ModStart> ) ; } <S2SV_ModEnd> mb_index = 0,0
561,<S2SV_ModStart> self ) { size_t <S2SV_ModEnd> i ; PyObject,1
562,,1
563,"<S2SV_ModStart> ( dbh, ""%s"", mysql_error ( imp_dbh -> pmysql ) ) ; do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; return FALSE ; } if ( mysql_errno ( imp_dbh -> pmysql )!= 0 ) { do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ) ) ; do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql ) ) ; return FALSE ; } DBIc_ACTIVE_on ( imp_dbh ) ; DBIc_on ( imp_dbh, DBIcf_IMPSET ) ; return TRUE ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
564,<S2SV_ModStart> size ) ) { <S2SV_ModStart> slot_lock ) ; return ; } <S2SV_ModStart>! size ) { <S2SV_ModStart> slot ) ; return ; },0
565,"<S2SV_ModStart> ; struct ieee_802_11_phdr * phdr = NULL <S2SV_ModEnd> ; col_set_str ( <S2SV_ModStart> struct ieee_802_11_phdr phdr = NULL <S2SV_ModStart> ; if ( phdr ) { phdr = ( struct ieee_802_11_phdr * ) malloc ( sizeof ( * phdr ) ) ; if (! phdr ) { proto_tree_add_item ( ppi_flags_tree, hf_ppi_flags_tree, tvb, offset, 1, ENC_LITTLE_ENDIAN ) ; return ; } } else { phdr = ( struct ieee_802_11_phdr * ) malloc ( sizeof ( * phdr ) ) ; if (! phdr ) { proto_tree_add_item ( ppi_flags_tree, hf_ppi_flags_tree, tvb, offset, 1, ENC_LITTLE_ENDIAN ) ; return ; } } if (",0
566,<S2SV_ModStart> ; sh = sds_malloc <S2SV_ModEnd> ( hdrlen +,0
567,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void nsc_encode_argb_to_aycocg (,0
568,<S2SV_ModStart> > nr_parens ) { ret = - EINVAL ; goto out_free ; } <S2SV_ModEnd> * ( ++,1
569,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> RATE_CONTROL * rc <S2SV_ModStart> rc = & ( <S2SV_ModStart> cpi -> rc ) <S2SV_ModStart> target = ( <S2SV_ModEnd> rc -> frames_since_key <S2SV_ModStart> rc -> frames_since_key <S2SV_ModEnd> > INT_MAX ) <S2SV_ModStart> > INT_MAX )? INT_MAX : <S2SV_ModEnd> rc -> frames_since_key <S2SV_ModStart> rc -> frames_since_key <S2SV_ModEnd> ; } target,0
570,"<S2SV_ModStart> TX_MODE read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r )",1
571,"<S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> } # line 1046 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 104 <S2SV_ModEnd> ""re_grammar.",0
572,"<S2SV_ModStart> -> cpi ; VP9_COMMON * const cm = & cpi -> common ; <S2SV_ModStart> macroblock_plane * p ; struct macroblockd_plane * pd = & xd -> plane [ plane ] ; MB_MODE_INFO * mbmi = & xd -> mi [ 0 ] -> mbmi ; int pt ; int c ; TOKENEXTRA * t = * tp ; int eob = p -> eobs [ block ] ; const PLANE_TYPE type = pd -> plane_type ; const int16_t * qcoeff = BLOCK_OFFSET ( p -> qcoeff, block ) ; const int segment_id = mbmi -> segment_id ; const int16_t * scan, * nb ; const scan_order * so ; const int ref = is_inter_block ( mbmi ) ; unsigned int ( * const counts ) [ COEFF_CONTEXTS ] [ ENTROPY_TOKENS ] = cpi -> coef_counts [ tx_size ] [ type ] [ ref ] ; vp9_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> <S2SV_ModEnd> fc. coef_probs <S2SV_ModStart> -> common",0
573,"<S2SV_ModStart> pSelect -> pSrc ; assert ( pWalker -> pParse -> db -> mallocFailed ) <S2SV_ModStart> WRC_Abort ; } for ( i = 0 ; i < pSrc -> nSrc ; i ++ ) { struct SrcList_item * pItem = & pSrc -> a [ i ] ; if ( pItem -> pTab == p -> pTab ) { renameTokenFind ( pWalker -> pParse, p, pItem -> zName ) ; } }",0
574,<S2SV_ModStart> ; serv = svc_create_pooled <S2SV_ModEnd> ( & nfs4_callback_program,1
575,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
576,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
577,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
578,"<S2SV_ModStart> s ) { if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> s, 0 ) ) < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> timed <S2SV_blank> out"", sock_fd, errno ) ; return - 1 ; } ret = TEMP_FAILURE_RETRY ( <S2SV_ModEnd> send ( sock_fd <S2SV_ModStart> 0 ) ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModEnd> errno == EINTR <S2SV_ModStart> == EINTR ) ) < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> timed <S2SV_blank> out"", sock_fd, errno ) ; return - 1 ; } <S2SV_ModEnd> if ( ret",0
579,"<S2SV_ModStart> = NULL ; if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else { char * path = xml_get_path ( xml ) ; crm_trace ( ""Cannot <S2SV_blank> add <S2SV_blank> new <S2SV_blank> node <S2SV_blank> %s <S2SV_blank> at <S2SV_blank> %s"", crm_element_name ( xml ), path ) ; if ( xml!= xmlDocGetRootElement ( xml -> doc ) ) { xmlUnlinkNode ( xml ) ; xmlFreeNode ( xml ) ; } free ( path ) ; return ; } for ( xIter = crm_first_attr ( xml ) ; xIter!= NULL ; xIter = xIter -> next ) { const char * prop_name = ( const char * ) xIter -> name ; <S2SV_ModStart> == 0 ) <S2SV_ModEnd> continue ; } <S2SV_ModStart> } else { <S2SV_ModEnd> crm_trace ( ""Cannot <S2SV_blank> add <S2SV_blank> new <S2SV_blank> node <S2SV_blank> %s <S2SV_blank> at <S2SV_blank> %s"" <S2SV_ModStart> ; } } <S2SV_ModEnd> while ( cIter",0
580,<S2SV_ModStart> <S2SV_null> static const SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> return ( const SvcInternal_t <S2SV_ModEnd> * ) svc_ctx,1
581,"<S2SV_ModStart> ) ; } if ( hkey. type == HASH_KEY_IS_LONG ) { zend_hash_update ( params, hkey. num, ( void * ) & tmp, sizeof ( zval * ), ( void * ) & arg, sizeof ( zval * ), ( void * ) & args ) ; * current_param = args ; } else if ( hkey. type == HASH_KEY_IS_STRING ) { zend_hash_update ( params, hkey. str, hkey. len, ( void * ) & ptr, sizeof ( zval * ), ( void * ) & tmp, sizeof ( zval * ), ( void * ) & args ) ; * current_param = args ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_hash_update ( params, hkey. num, ( void * ) & ptr, sizeof ( zval * ), ( void * ) & ptr, sizeof ( zval * ), ( void * ) & args ) ; * current_args = args ; }",0
582,<S2SV_ModStart> only_420 ) { <S2SV_ModEnd> int ret ; <S2SV_ModStart> vpx_bps = 12 ; _y4m -> chroma_fmt = VPX_IMG_FMT_I420 <S2SV_ModStart> = VPX_IMG_FMT_I420 ; if ( _y4m -> chroma_fmt == VPX_IMG_FMT_I420 ) _y4m -> chroma_fmt = VPX_IMG_FMT_I420 ; else if ( _y4m -> chroma_fmt == VPX_IMG_FMT_I420 ) _y4m -> chroma_fmt = VPX_IMG_FMT_I420 ; else if ( _y4m -> chroma_fmt == VPX_IMG_FMT_I420 ) _y4m -> chroma_fmt = VPX_IMG_FMT_I420 ; else if ( _y4m -> chroma_fmt == VPX_IMG_FMT_I420 ) _y4m -> chroma_fmt = VPX_IMG,0
583,"<S2SV_ModStart> buf ; { if ( strlen ( buf ) >= 60 ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; }",0
584,<S2SV_ModStart> ( ) { <S2SV_ModEnd> if ( read_xattrs_from_disk <S2SV_ModStart> 0 ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> FALSE ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> FALSE ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == FALSE ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == FALSE ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == FALSE ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == FALSE ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == FALSE ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == FALSE ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == FALSE ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> == TRUE ; return 1 ;,0
585,"<S2SV_ModStart> rule * rule, const char * * environ <S2SV_ModStart> count = 0 <S2SV_ModEnd> ; for ( <S2SV_ModStart> ; } } <S2SV_ModEnd> return env ;",0
586,"<S2SV_ModStart> ; vp9_clear_system_state ( ) ; vpx_memset ( cpi -> segmentation_map, 0, cm -> mi_rows * cm -> mi_cols ) ; vpx_memset ( cpi -> complexity_map, 0, cm -> mi_rows * cm -> mi_cols <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ) ; } vpx_memset ( cpi -> segmentation_map, 0, cm -> mi_rows * cm -> mi_cols ) ; vpx_memset ( cpi -> complexity_map, 0, cm -> mi_rows * cm -> mi_cols ) ; vp9_enable_segmentation ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vp9_disable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> frame_type, cm -> base_qindex, in_frame_q_adj_ratio [ segment ] ) ; vp9_",0
587,"<S2SV_ModStart> = make_type ( ""module"", & AST_type <S2SV_ModEnd>, Module_fields, <S2SV_ModStart> = make_type ( ""module"", & AST_type <S2SV_ModEnd>, Module_fields, <S2SV_ModStart> = make_type ( ""interactive"", & AST_type <S2SV_ModEnd>, Interactive_fields, <S2SV_ModStart> = make_type ( ""expression"", & AST_type <S2SV_ModEnd>, Expression_fields, <S2SV_ModStart> = make_type ( ""suite"", & AST_type <S2SV_ModEnd>, Suite_fields, <S2SV_ModStart> = make_type ( ""function"", & AST_type <S2SV_ModEnd>, FunctionDef_fields, <S2SV_ModStart> = make_type ( ""asyncfunctiondef"", & AST_type <S2SV_ModEnd>, AsyncFunctionDef_fields, <S2SV_ModStart> = make_type ( ""classdef"", & AST_type <S2SV_ModEnd>, ClassDef_fields, <S2SV_ModStart> = make_type ( ""delete"", & AST_type <S2SV_ModEnd>, Delete_fields, <S2SV_ModStart> = make_type ( ""assign"", & AST_type <S2SV_ModEnd>, Assign_fields,",0
588,"<S2SV_ModStart> S_IROTH ) ; if ( logfile_fd < 0 ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, log_path, strerror ( errno ) ) ; is_logging = false ; return ; }",0
589,<S2SV_ModStart> ; } # else ( void ) cpi ; #,1
590,"<S2SV_ModStart> cinput ) { <S2SV_ModEnd> char * s <S2SV_ModStart>, * StartClean <S2SV_ModEnd> ; SetDefaults ( <S2SV_ModStart> t ++ ; char * outpos = outputbuffer ; outpos += sprintf ( outpos, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"", s, t, TERMCHAR ) ; if ( * s == '0' && s [ 1 ] == ']' ) { if ( strcmp ( nameobject, ""AxodrawWantsPDF"" ) == 0 ) { identification = 1 ; outpos += sprintf ( outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", VERSION, SUBVERSION ) ; fprintf ( outfile, ""%s"", outputbuffer ) ; return ( 0 ) ; } else { fprintf ( stderr, ""%s: <S2SV_blank> Illegal <S2SV_blank> request <S2SV_blank> in <S2SV_blank> identification <S2SV_blank> string <S2SV_blank> [0]: <S2SV_blank> %s\\n"", axohelp, nameobject ) ; if ( argbuf ) free ( argbuf ) ; return ( - 1 ) ; } } else { fprintf ( stderr, ""%s: <S2SV_blank> Illegal <S2SV_blank> request <S2SV_blank> in <S2SV_blank> identification <S2SV_blank> string <S2SV_blank> [0]: <S2SV_blank> %s\\",0
591,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lower, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { int res ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { lower = NULL ; } if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_upper, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { int res ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { upper = NULL ; } if ( lookup_attr_id ( obj, & PyId_step, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { step = NULL ; } * out = Slice ( lower, upper,",0
592,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
593,"<S2SV_ModStart> extack ) ) return - EOPNOTSUPP <S2SV_ModEnd> ; tos_off = <S2SV_ModStart> ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; return <S2SV_ModEnd> - ENOMEM ; <S2SV_ModStart> - ENOMEM ; } list_for_each_entry ( iter, & alink -> dscp_map, list ) { u32 cmask ; if ( iter -> handle == knode -> handle ) { match = iter ; continue ; } cmask = iter -> mask & mask ; if ( ( iter -> val & cmask ) == ( val & cmask ) && iter -> band!= knode -> res -> classid ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; return - EOPNOTSUPP ; } } if (! match ) { match = kzalloc ( sizeof ( * match ), GFP_KERNEL ) ; if (! match ) return - ENOMEM ; list_add ( & match -> list, & alink -> dscp_map ) ; } match -> handle = knode -> handle ; match -> band = knode -> res -> classid ; match -> mask = mask ; match ->",0
594,<S2SV_ModStart> ) ; } if ( stream -> config. cfg. g_pass == VPX_RC_ONE_PASS ) stream -> config. cfg. g_pass = VPX_RC_LAST_PASS ; else if ( stream -> config. cfg. g_pass == VPX_RC_LAST_PASS ) stream -> config. cfg. g_pass = VPX_RC_FIRST_PASS ; else if ( stream -> config. cfg. g_pass == VPX_RC_ONE_PASS ) stream -> config. cfg. g_pass = VPX_RC_LAST_PASS ; else if ( stream -> config. cfg. g_pass == VPX_RC_FIRST_PASS ) stream -> config. cfg. g_pass = VPX_RC_FIRST_PASS ; else if ( stream -> config. cfg. g_pass == VPX_RC_LAST_PASS ) stream -> config. cfg. g_pass = VPX_RC_LAST_PASS ; else if ( stream -> config. cfg. g_pass == VPX_RC_FIRST_PASS ) stream -> config. cfg. g_pass = VPX,0
595,"<S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( old_exec, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( new_exec, <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( groups [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( groups [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( groups [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( groups [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( groups [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( groups [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( groups [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( groups [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( groups [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( groups [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( groups [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( groups [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( groups [ <S2SV_ModStart> ; if ( g_str_has_prefix <S2SV_ModEnd> ( groups [ <S2SV_ModStart> ; if ( g_str_has_",0
596,<S2SV_ModStart> data_end ) { const <S2SV_ModStart> end = NULL <S2SV_ModEnd> ; assert ( <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> aligned_cols ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) * aligned_cols <S2SV_ModEnd> ; for ( <S2SV_ModStart> int last_tile = tile_row == tile_rows - 1 && tile_col == tile_cols - 1 ; const int last_tile = tile_row == tile_rows - 1 && col == tile_cols - 1 ; const TileBuffer * const buf = & tile_buffers [ tile_row ] [ tile_col ] ; buf -> data = data ; buf -> size = size ; data += size ; } } for ( tile_row = 0 ; tile_row < tile_rows ; ++ tile_row ) { for ( tile_col = 0 ; tile_col < tile_cols ; ++ tile_col ) { const int col = pbi -> oxcf. inv_tile_order? tile_cols - tile_row - 1 : tile_col ; const int last_tile = tile_row == tile_rows - 1 && col == tile_cols - 1 ; const TileBuffer * const buf = & tile_buffers [ tile_row ] [ tile,0
597,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> * vp9_decoder_create ( <S2SV_ModEnd> VP9D_CONFIG * oxcf <S2SV_ModStart> ovcf ) { VP9Decoder * const pbi = vpx_memalign ( 32, sizeof ( * pbi ) ) ; VP9_COMMON * const cm = pbi? & pbi -> common : NULL ; if (! cm ) return NULL ; vpx_zero ( * pbi ) ; if ( setjmp ( cm -> error. jmp ) ) { cm -> error. setjmp = 0 ; vp9_decoder_remove ( pbi ) ; return NULL ; } cm -> error. setjmp = 1 ; vpx_initialize_dec ( ) ; vpx_rtcd ( ) ; vpx_memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_video_frame = 0 ; pbi -> oxcf = * oxcf ; pbi -> ready_for_new_data = 1 ; pbi -> decoded_key_frame = 0 ; vp9_",0
598,"<S2SV_ModStart>, GF_LOG_CONTAINER, <S2SV_ModEnd> ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) <S2SV_ModStart> GF_ISOM_BOX_TYPE_DREF ) ; if (! ( ( GF_DataInformationBox * ) s ) -> dref ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
599,<S2SV_ModStart> req ) { <S2SV_ModEnd> struct inet_request_sock * <S2SV_ModStart> req ) ; <S2SV_ModEnd> cipso_v4_delopt ( &,0
600,"<S2SV_ModStart> tokens, const vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> do { const vpx_tree_index <S2SV_ModEnd> j = tree",1
601,"<S2SV_ModStart> = VPX_CODEC_OK ; pick_quickcompress_mode ( ctx, duration, deadline ) ; vpx_codec_pkt_list_init ( & ctx -> pkt_list ) ; if ( ( ( flags & VP8_EFLAG_NO_REF_LAST ) && ( flags & VP8_EFLAG_NO_REF_GF ) && ( flags & VP8_EFLAG_FORCE_GF ) ) || ( ( flags & VP8_EFLAG_NO_REF_ARF ) && ( flags & VP8_EFLAG_FORCE_ARF ) ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_E",0
602,"<S2SV_ModStart> 0 ) { if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } newseq = realloc ( seq, ( count + 1 ) * elemtype -> size ) ; if ( newseq == NULL ) { ret = ENOMEM ; goto error ; } seq = newseq ; elem = ( char * ) seq + count * elemtype -> size ; memset ( elem, 0, elemtype -> size ) ; ret = decode_atype ( & t, contents, clen, elemtype, elem ) ; if ( ret ) goto error ; count ++ ; } <S2SV_ModStart>, & len <S2SV_ModEnd> ) ; if",0
603,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
604,"<S2SV_ModStart> rc, const VP9EncoderConfig <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> ( int64_t ) oxcf <S2SV_ModEnd> -> av_per_frame_bandwidth * <S2SV_ModStart> -> av_per_frame_bandwidth * rc <S2SV_ModEnd> -> two_pass_vbrmax_section )",0
605,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
606,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_superblock ( VP9_COMP <S2SV_ModStart> * cpi, <S2SV_ModEnd> BLOCK_SIZE bsize ) <S2SV_ModStart> BLOCK_SIZE bsize ) { VP9_COMMON * const cm = & cpi -> common ; MACROBLOCKD * const xd = & x -> e_mbd ; MODE_INFO * * mi_8x8 = xd -> mi ; MB_MODE_INFO * mbmi = & mi -> mbmi ; PICK_MODE_CONTEXT * ctx = get_block_context ( x, bsize ) ; unsigned int segment_id = mbmi -> segment_id ; const int mis = cm -> mi_stride ; const int mi_width = num_8x8_blocks_wide_lookup [ bsize ] ; const int mi_height = num_8x8_blocks_high_lookup [ bsize ] ; x -> skip_recode =! x -> select_txfm_size && mbmi -> sb_type >= BLOCK_8X8 && cpi -> oxcf. aq_mode!= COMPLEXITY_AQ && cpi -> sf. allow_",0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. data <S2SV_ModStart> psf -> header. data <S2SV_ModStart> psf -> header. data <S2SV_ModStart> psf -> header. data <S2SV_ModStart> psf -> header. data <S2SV_ModStart> psf -> header. data <S2SV_ModStart> psf -> header. data <S2SV_ModStart> psf -> header. data <S2SV_ModStart> psf -> header. data <S2SV_ModStart> psf -> header. data <S2SV_ModStart> psf -> header. data <S2SV_ModStart> psf -> header. data <S2SV_ModStart> psf -> header. data <S2SV_ModStart> psf -> header. data <S2SV_ModStart> psf -> header. data <S2SV_ModStart> psf -> header. data <S2SV_ModStart> psf -> header. data <S2SV_ModStart> psf -> header. data <S2SV_ModStart> psf -> header. data <S2SV_ModStart> psf -> header. data <S2SV_ModStart> psf -> header. data <S2SV_ModStart> psf -> header. data <S2SV_ModStart> psf -> header. data <S2SV_ModStart> psf -> header. data <S2SV_ModStart> psf -> header. data <S2SV_ModStart> psf -> header. data <S2SV_ModStart> psf -> header. data <S2SV_ModStart> psf -> header. data <S2SV_ModStart> psf -> header. data <S2SV_ModStart> psf -> header. data <S2SV_ModStart> psf -> header. data,0
608,"<S2SV_ModStart> range_max ) { int bits_left, bits_left <S2SV_ModEnd> ; int position <S2SV_ModStart> position, zeroes <S2SV_ModEnd> ; char bits <S2SV_ModStart> gbc ) ; bits_left <S2SV_ModEnd> = 0 ; <S2SV_ModStart> 1 ) { bits_left = get_bits_left ( gbc ) ; if ( bits_left < 0 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> gbc ) < bits_left <S2SV_ModEnd> ) { av_log <S2SV_ModStart> = '1' ; bits_left <S2SV_ModEnd> ++ ; } <S2SV_ModStart> } if ( bits_left <S2SV_ModEnd> >= 32 ) <S2SV_ModStart> j ++ ) { if ( bits_left < 0 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } bits [ i ++ ] = '0' ; } value = get_bits_long ( gbc, bits_left ) ; for ( j = 0 ;",0
609,"<S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> c >= 128 <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!#$%&\'*+-.^_`|~"" <S2SV_ModStart> ( c ) && <S2SV_ModEnd> strchr ( ""!$%&\'*",0
610,"<S2SV_ModStart>, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_origin. ptr = NULL, packet -> http_origin. len = 0, packet -> http_x_session_type. ptr = NULL, packet -> http_x_session_type. len = 0, packet -> server_line. ptr = NULL, packet -> server_line. len = 0, packet -> http_num_headers = 0, packet -> <S2SV_ModStart> = 0, <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
611,"<S2SV_ModStart> { q = QueueAuthenticPixels2 <S2SV_ModEnd> ( image, <S2SV_ModStart> x ), Min ( 4, dds_info -> height - y ), exception ) ; if ( q == ( PixelPacket * ) NULL ) return MagickFalse ; c0 = ReadBlobLSBShort ( image ) ; c1 = ReadBlobLSBShort ( image ) ; bits = ReadBlobLSBLong ( image ) ; CalculateColors ( c0, c1, & colors, MagickFalse ) ; for ( j = 0 ; j < 4 ; j ++ ) { for ( i = 0 ; i < 4 ; i ++ ) { if ( ( x + i ) < ( ssize_t ) dds_info -> width && ( y + j ) < ( ssize_t ) dds_info -> height ) { code = ( unsigned char ) ( ( bits >> ( ( j * 4 + i ) * 2 ) ) & 0x3 ) ; SetPixelRed ( q, ScaleCharToQuantum ( colors. r [ code ] ) ) ; SetPixelGreen ( q, ScaleCharToQuantum ( colors. g [ code ] ) ) ; SetPixelBlue ( q, ScaleCharToQuantum ( colors",0
612,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL ) <S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL )",1
613,<S2SV_ModStart> action ) { if ( w < 0.0 ) w = 0.0 ; if ( h < 0.0 ) h = 0.0 ; if ( w > 1.0 ) w = 1.0 ; if ( h > 1.0 ) h = 1.0 ; if ( w > 1.0 ) w = 1.0 ; if ( h > 1.0 ) h = 1.0 ; if ( w > 1.0 ) w = 1.0 ; if ( h > 1.0 ) h = 1.0 ; if ( w > 1.0 ) w = 1.0 ; if ( h > 1.0 ) h = 1.0 ; if ( w > 1.0 ) w = 1.0 ; if ( h > 1.0 ) h = 1.0 ; if ( w > 1.0 ) w = 1.0 ; if ( h > 1.0 ) h = 1.0 ; if ( w > 1.0 ) w = 1.0 ; if ( h > 1.0 ) h = 1.0 ; if ( w > 1.0 ) w = 1.0 ; if ( h > 1.0 ) h = 1.,0
614,"<S2SV_ModStart> ) ) { printf ( <S2SV_ModEnd> ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", x11 <S2SV_ModStart> y ) ; printf ( ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", x11, x12, x21, x22, x, y ) ;",0
615,"<S2SV_ModStart> ( AUTODETECT_TAG, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU\\n"" <S2SV_ModEnd> ) ; Stream_Read_UINT32",0
616,"<S2SV_ModStart> recon_y_stride, recon_uv_stride, cm -> yv12_fb [ ref_fb_idx ]. y_stride <S2SV_ModStart> recon_uv_stride, recon_y_stride, cm -> yv12_fb [ ref_fb_idx ]. uv_stride <S2SV_ModStart> recon_y_stride, recon_uv_stride, cm -> yv12_fb [ ref_fb_idx ]. y_stride <S2SV_ModStart> recon_uv_stride, recon_uv_stride, cm -> yv12_fb [ ref_fb_idx ]. uv_stride <S2SV_ModStart> recon_y_stride, recon_uv_stride, cm -> yv12_fb [ ref_fb_idx ]. uv_stride",0
617,<S2SV_ModStart> -> b_multithreaded_rd ) { <S2SV_ModStart> mb_rows ) ; },0
618,<S2SV_ModStart> { if ( ( <S2SV_ModStart> xWantedSize > 0 ) && ( ( xWantedSize + xHeapStructSize ) > xFreeBytesRemaining ) <S2SV_ModStart> portBYTE_ALIGNMENT_MASK ) ) ; } else { mtCOVERAGE_TEST_MARKER ( ) ; } if ( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) ) { pxPreviousBlock = & xStart ; pxBlock = xStart. pxNextFreeBlock ; while ( ( pxBlock -> xBlockSize < xWantedSize ) && ( pxBlock -> pxNextFreeBlock!= NULL ) ) { pxPreviousBlock = pxBlock ; pxBlock = pxBlock -> pxNextFreeBlock ; } if ( pxBlock!= pxEnd ) { pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock -> pxNextFreeBlock ) + xHeapStructSize ) ; pxPreviousBlock -> pxNextFreeBlock = pxBlock -> pxNextFreeBlock ; if ( ( pxBlock -> xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE ) { pxNewBlockLink = ( void * ) ( ( ( uint8_t * ),0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,"<S2SV_ModStart> s ) { uint32 <S2SV_ModEnd> num_updates ; uint16 <S2SV_ModStart>, Debug, ""%s()\\n"" <S2SV_ModEnd>, __func__ ) <S2SV_ModStart> ++ ) { in_uint32_le ( s, left ) ; in_uint32_le ( s, top ) ; in_uint32_le ( s, right ) ; in_uint32_le ( s, bottom ) ; in_uint32_le ( s, width ) ; in_uint32_le ( s, bpp ) ; Bpp = ( bpp + 7 ) / 8 ; in_uint32_le ( s, compress ) ; in_uint32_le ( s, bufsize ) ; cx = right - left + 1 ; cy = bottom - top + 1 ; logger ( Graphics, Debug, ""process_bitmap_updates(), <S2SV_blank> [%d,%d,%d], <S2SV_blank> [%d,%d], <S2SV_blank> bpp=%d, <S2SV_blank> compression=%d"", left, top, right, bottom, width, height, Bpp, compress ) ; if (! compress ) { int y ; bmpdata = ( uint8 * ) xmalloc ( width * height * Bpp ) ; for ( y = 0 ; y <",0
621,"<S2SV_ModStart> } else { ovalue = strim ( option, ""\\""\'"", MPR_TRIM_BOTH ) ; if ( smatch ( option, ""size"" ) ) { size = ( ssize ) getnum ( ovalue ) ; } else if ( smatch ( option, ""level"" ) ) { level = atoi ( ovalue ) ; } else if ( smatch ( option, ""backup"" ) ) { backup = atoi ( ovalue ) ; } else if ( smatch ( option, ""anew"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""stamp"" ) ) { stamp = httpGetTicks ( ovalue ) ; } else { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> ErrorLog <S2SV_blank> option <S2SV_blank> %s"", option ) ; } } } if ( size < ( 10 * 1000 ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Size <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small. <S2SV_blank> Must <S2SV_blank> be <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> 10K"" ) ; return MPR_ERR_BAD_SYNTAX ; } if ( path == 0",0
622,"<S2SV_ModStart> TX_SIZE tx_size, vpx_coeff_stats <S2SV_ModEnd> * coef_branch_ct ) <S2SV_ModStart> coef_branch_ct ) { vpx_coeff_probs_model <S2SV_ModEnd> * coef_probs = <S2SV_ModStart> tx_size ] ; vpx_coeff_count <S2SV_ModEnd> * coef_counts =",0
623,"<S2SV_ModStart> { } ; if (! access_ok ( VERIFY_READ, fd, F_OK ) ) return - EBADF <S2SV_ModEnd> ; r =",0
624,"<S2SV_ModStart> int su3000_frontend_attach ( struct dvb_dev * dev, <S2SV_ModStart> ( dvb_usb_generic_rw ( <S2SV_ModEnd> dev, obuf <S2SV_ModStart> ( dvb_usb_generic_rw ( <S2SV_ModEnd> dev, obuf <S2SV_ModStart> ( dvb_usb_generic_rw ( <S2SV_ModEnd> dev, obuf <S2SV_ModStart> ( dvb_usb_generic_rw ( <S2SV_ModEnd> dev, obuf <S2SV_ModStart> ( dvb_usb_generic_rw ( <S2SV_ModEnd> dev, obuf <S2SV_ModStart> ( dvb_usb_generic_rw ( <S2SV_ModEnd> dev, obuf <S2SV_ModStart> ( dvb_usb_generic_rw ( <S2SV_ModEnd> dev, obuf <S2SV_ModStart> ( dvb_usb_generic_rw ( <S2SV_ModEnd> dev, obuf <S2SV_ModStart> ( dvb_usb_generic_rw ( <S2SV_ModEnd> dev, obuf <S2SV_ModStart> ( dvb_usb_generic_rw ( <S2SV_ModEnd> dev, obuf <S2SV_ModStart> ( dvb_usb_generic_rw ( <S2SV_ModEnd> dev, obuf <S2SV_ModStart> ( dvb_usb_generic_rw ( <S2SV_ModEnd> dev, obuf <S2SV_ModStart> ( dvb_usb_generic_rw ( <S2SV_ModEnd> dev, obuf <S2SV_ModStart> ( dvb_usb_generic_rw ( <S2SV_ModEnd> dev, obuf <S2SV_ModStart> ( dvb_usb_generic_rw ( <S2SV_ModEnd>",0
625,"<S2SV_ModStart>, vpx_codec_enc_cfg_t * enc_cfg <S2SV_ModEnd>, vpx_codec_flags_t flags <S2SV_ModStart> ( flags & ( VPX_CODEC_USE_XMA | VPX_CODEC_USE_PSNR | VPX_CODEC_USE_OUTPUT_PARTITION ) <S2SV_ModEnd> ) &&! <S2SV_ModStart> ( flags & ( VPX_CODEC_USE_XMA | VPX_CODEC_USE_OUTPUT_PARTITION ) <S2SV_ModEnd> ) ) res <S2SV_ModStart> ( flags & ( VPX_CODEC_USE_XMA | VPX_CODEC_USE_PSNR | VPX_CODEC_USE_OUTPUT_PARTITION ) <S2SV_ModEnd> ) &&! <S2SV_ModStart> ( flags & ( VPX_CODEC_USE_OUTPUT_PARTITION | VPX_CODEC_USE_XMA ) ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE",0
626,"<S2SV_ModStart> int stride, vpx_bit_depth_t bit_depth <S2SV_ModEnd>, int mv_row <S2SV_ModStart> const kernel = vpx_get_interp_kernel <S2SV_ModEnd> ( xd -> <S2SV_ModStart> MV_PRECISION_Q3 ; } vpx_build_inter_predictor <S2SV_ModEnd> ( y_mb_ptr, <S2SV_ModStart> y ) ; vpx_build_inter_predictor <S2SV_ModEnd> ( u_mb_ptr, <S2SV_ModStart> 256 ], bit_depth, & mv, scale, bit_depth, which_mv, kernel, mv_precision_uv, x, y ) ; vpx_build_inter_predictor <S2SV_ModEnd> ( v_mb_ptr, <S2SV_ModStart> 512 ], bit_depth, & mv, scale, bit_depth, which_mv, kernel, mv_precision_uv, x, y ) ; vpx_build_inter_predictor ( y_mb_ptr, stride, & pred [ 0 ], 16, & mv, scale, 16, 16, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vpx_build_inter_predictor ( u_mb_ptr, uv_stride, & pred [ 256 ], bit_depth",0
627,"<S2SV_ModStart> = TRUE ; if ( strlen ( origbuf ) < 4 ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; }",0
628,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> cJSON_CreateFloatArray ( double <S2SV_ModStart> * numbers, size_t <S2SV_ModEnd> count ) { <S2SV_ModStart> count ) { size_t <S2SV_ModEnd> i ; cJSON <S2SV_ModStart> ( ) ; if (! a ) return - 1 ; <S2SV_ModStart> i ) { if (! numbers [ i ] ) return - 1 ; <S2SV_ModStart> ] ) ; <S2SV_ModEnd> suffix_object ( p",0
629,"<S2SV_ModStart> data_end ) { const <S2SV_ModStart> int num_workers = vpx_min <S2SV_ModEnd> ( pbi -> <S2SV_ModStart> pbi -> common. max_threads, tile_cols ) ; const TileBuffer tile_buffers [ 1 << 6 ] ; int n ; int final_worker = - 1 ; assert ( tile_cols <= ( 1 << 6 ) ) ; assert ( tile_rows == 1 ) ; ( void ) tile_rows ; if ( pbi -> num_tile_workers == 0 ) { const int num_threads = pbi -> oxcf. max_threads & ~ 1 ; int i ; CHECK_MEM_ERROR ( cm, pbi -> tile_workers, vpx_malloc ( num_threads * sizeof ( * pbi -> tile_workers ) ) ) ; for ( i = 0 ; i < num_threads ; ++ i ) { VP9Worker * const worker = & pbi -> tile_workers [ i ] ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data2, vpx_malloc ( sizeof ( TileInfo ) )",0
630,<S2SV_ModStart> = base + get3 <S2SV_ModEnd> ( ) + <S2SV_ModStart> ; len = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c = get3 <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ; c =,0
631,"<S2SV_ModStart> cm -> seg ; vpx_clear_system_state ( ) <S2SV_ModStart> = SEGMENT_DELTADATA ; <S2SV_ModEnd> for ( i <S2SV_ModStart> ++ ) { vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, qindex_delta ) ; vpx_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q ) ; vpx_clear_system_state ( ) ; for ( i = ENERGY_MIN ; i <= ENERGY_MAX ; i ++ ) { int qindex_delta, segment_rdmult ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; } qindex_delta = vp9_compute_qdelta ( & cpi -> rc, base_q, base_q * Q_RATIO ( i ) ) ; vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, qindex_delta ) ; vpx_enable_segfeature ( seg, SEGMENT_ID",0
632,"<S2SV_ModStart> -> error_code ) memcpy ( & <S2SV_ModStart> ctx -> base, error, sizeof ( ctx -> base ) ) <S2SV_ModEnd> ; return error",0
633,"<S2SV_ModStart> pocstruct_t * ps_prev_poc = NULL <S2SV_ModStart>, * ps_cur_poc = NULL <S2SV_ModStart> = 0 ; if (! ps_dec -> s_cab_dec_env. pv_codec_handle ) { ps_dec -> s_cab_dec_env. pv_codec_handle = NULL ; } <S2SV_ModStart> = 0 ; if (! ps_dec -> s_cab_dec_env. pv_codec_handle ) { ps_dec -> s_cab_dec_env. pv_codec_handle = NULL ; } if (! ps_dec -> ps_dpb_mgr -> pv_codec_handle ) { ps_dec -> s_cab_dec_env. pv_codec_handle = NULL ; } if (! ps_dec -> ps_dpb_mgr -> pv_codec_handle ) { ps_dec -> s_cab_dec_env. pv_codec_handle = NULL ; ps_dec -> ps_dpb_mgr -> pv_codec_handle = NULL ; } if (! ps_dec -> ps_dpb_mgr -> pv_codec_handle ) { ps_dec ->",0
634,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet ),0
635,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int getnum (,0
636,<S2SV_ModStart> GCSpropagate ) ; <S2SV_ModEnd> atomic ( L,0
637,<S2SV_ModStart> 0 ; else { ret = <S2SV_ModEnd> - EIO ; <S2SV_ModStart> - EIO ; goto err ; },0
638,"<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } <S2SV_ModEnd> memset ( buffer <S2SV_ModStart> buffer ) ; <S2SV_ModEnd> s_write ( c",0
639,"<S2SV_ModStart> int cib_tls_signon ( cib_remote_opaque_t <S2SV_ModEnd> * private, <S2SV_ModStart> -> variant_opaque ; <S2SV_ModEnd> int rc = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> static struct mainloop_fd_callbacks <S2SV_ModStart> mainloop_fd_callbacks cib_fd_callbacks = <S2SV_ModEnd> {. dispatch <S2SV_ModStart> dispatch = cib_remote_dispatch <S2SV_ModEnd> ; connection -> <S2SV_ModStart> session = NULL <S2SV_ModEnd> ; ret_ga = <S2SV_ModStart> = getaddrinfo ( private -> <S2SV_ModStart> 1 memcpy ( private -> server, res -> ai_addr, res -> ai_addrlen ) ; if (! res -> ai_addr ) { fprintf ( stderr, ""getaddrinfo <S2SV_blank> failed"" ) ; crm_exit ( 1 ) ; } crm_debug ( ""Got <S2SV_blank> address <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> %s"", private -> server, private -> server ) ; if (! res -> ai_addr ) { fprintf ( stderr, ""getaddrinfo <S2SV_blank> failed"" ) ; crm_exit ( 1 ) ; } # if 1 memcpy ( & addr, res -> ai_addr, res -> ai_addrlen ) ; # else memset ( & addr, 0, sizeof ( addr )",0
640,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> ; cpi -> <S2SV_ModEnd> non_gf_bitrate_adjustment = 0",0
641,"<S2SV_ModStart> ) ) ; if ( len < 26 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> len <S2SV_blank> %d]"", len ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( len < 26 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> len <S2SV_blank> %d]"", len ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( len < 26 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> len <S2SV_blank> %d]"", len ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( len < 26 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> len <S2SV_blank> %d]"", len ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( len < 26 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> len <S2SV_blank> %d]"", len ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( len < 26 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> len <S2SV_blank> %d]"", len ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( len < 26 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> len",0
642,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command",0
643,"<S2SV_ModStart> Image * image <S2SV_ModEnd> ; register IndexPacket <S2SV_ModStart>, length, padding, value, version, width ; MagickBooleanType status <S2SV_ModEnd> ; assert ( <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { DestroyImageList ( image ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { DestroyImageList ( image ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { DestroyImageList ( image ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { DestroyImageList ( image ) ; return ( DestroyImageList ( image ) ) ; return ( DestroyImageList ( image ) ) ; }",0
644,"<S2SV_ModStart> ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> TCP <S2SV_blank> marker\\n"" ) ; jpc_ms_destroy ( enc -> mrk ) ; <S2SV_ModStart> ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> TCP <S2SV_blank> marker\\n"" ) ; jpc_ms_destroy ( enc -> mrk ) ; <S2SV_ModStart> ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> TCP <S2SV_blank> marker\\n"" ) ; jpc_ms_destroy ( enc -> mrk ) ; <S2SV_ModStart> ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> TCP <S2SV_blank> marker\\n"" ) ; jpc_ms_destroy ( enc -> mrk ) ; <S2SV_ModStart> ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> TCP <S2SV_blank> marker\\n"" ) ; jpc_ms_destroy ( enc -> mrk ) ; <S2SV_ModStart> ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> TCP <S2SV_blank> marker\\n"" ) ; jpc_ms_destroy ( enc -> mrk ) ; <S2SV_ModStart> ) ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> TCP <S2SV_blank> marker\\n"" ) ; jpc_ms_destroy ( enc -> mrk ) ;",0
645,<S2SV_ModStart> ) ; } free ( str_modes ) ; free ( str_args ) ; if ( new_modes ) free ( new_modes ) ; if ( new_args ) free ( new_args ) ;,0
646,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> - m + vpx_read_bit <S2SV_ModEnd> ( r )",1
647,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
648,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> REFERENCE_MODE mode = vpx_read <S2SV_ModEnd> ( r,",0
649,"<S2SV_ModStart>! stream ) { <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; } <S2SV_ModStart>! res ) { <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; } <S2SV_ModStart> ( res ) ) ; stream -> config. cfg. g_timebase. den = 1000 ; stream -> config. cfg. g_w = 0 ; stream -> config. cfg. g_h = 0 ; stream -> config. cfg. stereo_fmt = STEREO_FORMAT_MONO ; stream -> config. write_webm = 1 ; stream -> ebml. debug = global -> debug ; if ( global -> deadline == VPX_DL_REALTIME ) stream -> config. cfg. g_lag_in_frames = 0 ; } else { stream -> config. cfg. g_w = 0 ; stream -> config. cfg. g_h = 0 ; stream -> config. cfg. stereo_fmt = STEREO_FORMAT_MONO ; stream -> config. write_webm = 1 ; # if CONFIG_WEBM_IO stream -> ebml. last_pts_ms = - 1 ; # endif stream -> ebml. debug = global -> debug ; if ( global -> deadline",0
650,"<S2SV_ModStart> -> ndo_snapend ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u), <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""unknown"", opp -> nd_opt_type ), opp -> nd_opt_len << 3, opp -> nd_opt_len ) ) ; <S2SV_ModStart> ndo_snapend ; } ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u), <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> (%u): <S2SV_blank> "", tok2str ( icmp6_opt_values, ""unknown"", opp -> nd_opt_type ), opp -> nd_opt_len << 3, opp -> nd_opt_len ) ) ;",0
651,<S2SV_ModStart> -> root_node = ( yr_re_ast_root_node * ) yr_malloc ( sizeof ( yr_re_ast_root_node ) ) ; if ( * re_ast -> root_node == NULL ) return ERROR_INSUFFICIENT_MEMORY ; ( * re_ast ) -> root_node -> next = yr_malloc ( sizeof ( yr_re_ast_root_node ) ) ; if ( * re_ast -> root_node == NULL ) return ERROR_INSUFFICIENT_MEMORY ; ( * re_ast ) -> root_node -> prev = yr_malloc ( sizeof ( yr_re_ast_root_node ) ) ; ( * re_ast ) -> root_node -> next = yr_malloc ( sizeof ( yr_re_ast_root_node ) ) ; if ( * re_ast -> root_node -> prev == NULL ) return ERROR_INSUFFICIENT_MEMORY ; ( * re_ast ) -> root_node -> prev -> next = yr_malloc ( sizeof ( yr_re_ast_root_node ) ) ; if ( * re_ast -> root_node,0
652,"<S2SV_ModStart> ) ) ; auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> = <S2SV_blank> %s"", str_c ( path ), key -> key -> value ) ; <S2SV_ModStart> 0 ) { auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found, <S2SV_blank> using <S2SV_blank> default <S2SV_blank> value <S2SV_blank> %s"", str_c ( path ), key -> key -> default_value ) ; key -> value = key -> key -> default_value ; } else if ( key -> key -> default_value!= NULL ) { auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found, <S2SV_blank> using <S2SV_blank> default <S2SV_blank> value <S2SV_blank> %s"", str_c ( path ), key -> key -> default_value ) ; key -> value = key -> key -> default_value ; } else { return 0 ; } } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if",0
653,<S2SV_ModStart> -> level = 1 <S2SV_ModEnd> ; tok ->,0
654,<S2SV_ModStart> av1 -> av1_config && av1 -> av1_config -> config,1
655,"<S2SV_ModStart> ASSERT ( dpbSize ) ; memset ( dpb, 0, sizeof ( dpbStorage_t )",0
656,"<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> (! sock ||! addr <S2SV_ModStart> ( addrlen ) { <S2SV_ModStart> * addrlen ; addrlen_out = * addrlen ; } <S2SV_ModStart>, addrlen_in, & addrlen_out <S2SV_ModEnd> )!= OE_OK <S2SV_ModStart> ) ; } * addrlen = addrlen_out ;",0
657,,1
658,"<S2SV_ModStart> FALSE ; } if (! <S2SV_ModStart>, s ) ) return FALSE",1
659,<S2SV_ModStart> ipv6_pinfo * np <S2SV_ModEnd> ; struct ipv6_txoptions <S2SV_ModStart> flowi6_mark ; } np = inet6_sk ( sk ) ;,0
660,"<S2SV_ModStart> ; unsigned int <S2SV_ModEnd> found, upx_success <S2SV_ModStart> size_t fsize ; size_t <S2SV_ModEnd> valign, falign <S2SV_ModStart> j ; struct cli_exe_section * exe_sections ; char timestr [ 32 ] ; struct pe_image_data_dir * dirs ; struct cli_bc_ctx * bc_ctx ; fmap_t * map ; struct cli_pe_hook_data pedata ; # ifdef HAVE__INTERNAL__SHA_COLLECT int sha_collect = ctx -> sha_collect ; # endif const char * archtype = NULL, * subsystem = NULL ; uint32_t viruses_found = 0 ; # if HAVE_JSON int toval = 0 ; struct json_object * pe_json = NULL ; char jsonbuf [ 128 ] ; # endif if (! ctx ) { cli_errmsg ( ""cli_scanpe: <S2SV_blank> ctx <S2SV_blank> == <S2SV_blank> NULL\\n"" ) ; return CL_ENULLARG ; } # if HAVE_JSON if ( cli_json_timeout_cycle_check ( ctx, & toval )!= 0 ) { cli_errmsg ( ""cli_scanpe: <S2SV_blank> json <S2SV_blank> timeout <S2SV_blank> check\\n"" ) ; return",0
661,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; usleep <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPDRH <S2SV_ModEnd> ) << 8 <S2SV_ModStart> | dm9000ReadReg ( DM9000_EPDRL <S2SV_ModEnd> ) ; }",1
662,"<S2SV_ModStart> cib, & private -> command <S2SV_ModEnd> ) ; } <S2SV_ModStart> cib, & private -> callback <S2SV_ModEnd> ) ; } <S2SV_ModStart> pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> callback. token, CRM_OP_REGISTER, NULL, NULL, NULL, 0, NULL ) ; crm_xml_add ( hello, F_CIB_CLIENTNAME, name ) ; crm_send_remote_msg ( private -> command. session, hello, private -> command. encrypted ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { fprintf ( stderr, ""%s: <S2SV_blank> Opened <S2SV_blank> connection <S2SV_blank> to <S2SV_blank> %s:%d\\n"", name, private -> server, private -> port ) ; cib -> state = cib_connected_command ; cib -> type = cib_command ; } else { fprintf ( stderr, ""%s: <S2SV_blank> Connection <S2SV_blank> to <S2SV_blank> %s:%d <S2SV_blank> failed: <S2SV_blank> %s\\n"", name, private -> server, private -> port, pcmk_ok ) ; cib -> state = cib_connected_command ; cib -> type = cib_command",0
663,"<S2SV_ModStart> = ubuf ; memset ( & address, 0, sizeof ( address ) ) ;",0
664,"<S2SV_ModStart> ; int num00 = 0, tmp_err = 0, n = 0, sr = 0 ; int step_param = 3 ; int further_steps = ( MAX_MVSEARCH_STEPS - 1 ) - step_param ; const BLOCK_SIZE bsize = xd -> mi [ 0 ] -> mbmi. sb_type ; vp9_variance_fn_ptr_t v_fn_ptr = cpi -> fn_ptr [ bsize ] ; int new_mv_mode_penalty = 256 ; const int quart_frm = MIN ( cpi -> common. width, cpi -> common. height ) ; while ( sr < MAX_FULL_PEL_VAL ) ++ sr ; step_param += sr ; further_steps -= sr ; v_fn_ptr. vf = get_block_variance_fn ( bsize ) ; num00 = cpi -> diamond_search_sad ( x, & ref_mv_full, & tmp_mv, step_param, x -> sadperbit16, & num00, & v_fn_ptr, x -> nmvjointcost, x -> mvcost, ref_mv )",0
665,"<S2SV_ModStart> ( EFAULT, ""%s: <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename, strerror ( errno ) <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( EFAULT, ""%s: <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename, strerror ( errno ) <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( EFAULT, ""%s: <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename, strerror ( errno ) <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( EFAULT, ""%s: <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename, strerror ( errno ) <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( EFAULT, ""%s: <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename, strerror ( errno ) <S2SV_ModEnd> ) ; goto",0
666,"<S2SV_ModStart> ; # endif # ifdef DEBUG_CONF ap_log_perror ( APLOG_MARK, APLOG_STARTUP | APLOG_NOERRNO, 0, mp, ""Merge <S2SV_blank> parent <S2SV_blank> %pp <S2SV_blank> child <S2SV_blank> %pp"", _parent, _child ) ; # endif",0
667,"<S2SV_ModStart>, one, <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_planes ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_planes ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > number_colormaps ) ThrowReaderException ( Corrupt",0
668,<S2SV_ModStart> ( r = <S2SV_ModEnd> sshbuf_put_cstring ( b,1
669,"<S2SV_ModStart> ) ) { ovalue = strim ( <S2SV_ModEnd> stok ( option <S2SV_ModStart> & ovalue ), ""\\""\'"", MPR_TRIM_BOTH ) ; if (! ovalue ) continue",0
670,"<S2SV_ModStart> cib_client_t * client ; client = g_hash_table_lookup ( client_list, user_data ) ; if ( client == NULL ) { return ; } crm_trace ( ""Cleaning <S2SV_blank> up <S2SV_blank> after <S2SV_blank> client <S2SV_blank> disconnect: <S2SV_blank> %s/%s"", crm_str ( client -> name ), client -> id ) ; if ( client -> id!= NULL ) { if (! g_hash_table_remove ( client_list, client -> id ) ) { crm_err ( ""Client <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> the <S2SV_blank> hashtable"", client -> name ) ; } } crm_trace ( ""Destroying <S2SV_blank> %s <S2SV_blank> (%p)"", client -> name, user_data ) ; num_clients -- ; crm_trace ( ""Num <S2SV_blank> unfree\'d <S2SV_blank> clients: <S2SV_blank> %d"", num_clients ) ; free ( client -> name ) ; free ( client -> callback_id ) ; free ( client -> id ) ; free ( client -> user ) ; free ( client ) ; crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client"" ) ; if ( cib_shutdown_flag",0
671,"<S2SV_ModStart> * uv ; if ( iswhite ( thread ) ) markvalue ( g, thread -> v ) ; <S2SV_ModStart> next ) { <S2SV_ModEnd> if (!",0
