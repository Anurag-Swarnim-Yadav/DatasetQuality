,raw_predictions,correctly_predicted
0,<S2SV_ModStart> op_mutex ) ; ret = <S2SV_ModEnd> - ETIMEDOUT ; <S2SV_ModStart> - ETIMEDOUT ; goto out ;,0
1,<S2SV_ModStart> prevhdr ) ; if ( unfrag_ip6hlen < 0 ) return ERR_PTR ( unfrag_ip6hlen ) ;,0
2,<S2SV_ModStart> * writer = <S2SV_ModEnd> gf_list_get ( writers,0
3,<S2SV_ModStart> -> child ; if <S2SV_ModEnd> ( c && <S2SV_ModStart> > 0 ) <S2SV_ModEnd> c = c <S2SV_ModStart> -> next ; <S2SV_ModEnd> return c ;,0
4,"<S2SV_ModStart> u64 nr, <S2SV_ModEnd> struct pt_regs * <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",1
5,<S2SV_ModStart> { # ifndef _MSC_VER <S2SV_ModEnd> char buf [,0
6,,0
7,<S2SV_ModStart> ( ) == 0x48454150 <S2SV_ModEnd> ) { #,0
8,,0
9,<S2SV_ModStart>. left ; if ( c. left == 0 ) { <S2SV_ModStart> 2 ) ; },0
10,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ++ i ) vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( usehp ) vpx_write <S2SV_ModEnd> ( w,",1
11,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } <S2SV_ModStart> ( ) ) { <S2SV_ModStart> ( ) ; },0
12,"<S2SV_ModStart> ( ndo, ""%04x, <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> EXTRACT_16BITS ( ptr <S2SV_ModEnd> ) ) ) <S2SV_ModStart> ( ndo, ""%04x <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> EXTRACT_16BITS ( ptr <S2SV_ModEnd> ) ) ) <S2SV_ModStart> ( l2tp_cc_direction2str, ""Direction-#%u"" <S2SV_ModEnd>, * ( <S2SV_ModStart> u_char * ) ptr <S2SV_ModEnd> ) ) ) <S2SV_ModStart> ( ndo, <S2SV_ModEnd> ptr, length <S2SV_ModStart> ptr, length <S2SV_ModEnd> ) ; }",0
13,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> construct_get_dest_keyring ( struct <S2SV_ModStart> * authkey ; int ret = 0 ; <S2SV_ModStart> ( dest_keyring ) { ret = - 1 ; break ; } <S2SV_ModEnd> } case KEY_REQKEY_DEFL_THREAD_KEYRING,0
14,<S2SV_ModStart> = NULL ; if ( spcred == NULL || spcred == NULL ) return GSS_S_FAILURE ;,0
15,<S2SV_ModStart> ; tm = safe_calloc <S2SV_ModEnd> ( & t,0
16,<S2SV_ModStart> ( password ) - 1,0
17,<S2SV_ModStart> e == p || e == p,0
18,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode,",1
19,<S2SV_ModStart> = 0 ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> & timeout ) ),1
20,,0
21,<S2SV_ModStart> + size <= i_size_read <S2SV_ModEnd> ( inode ),0
22,<S2SV_ModStart> alg ) { <S2SV_ModEnd> if (! <S2SV_ModStart> CRYPTO_ALG_NEED_FALLBACK ) ) <S2SV_ModEnd> alg = crypto_alg_lookup,0
23,"<S2SV_ModStart> = GIT_PKT_NG ; <S2SV_ModEnd> if (! <S2SV_ModStart> ( ptr = strchr <S2SV_ModEnd> ( line, <S2SV_ModStart> ( ptr = strchr <S2SV_ModEnd> ( line, <S2SV_ModStart> ( ptr = strchr <S2SV_ModEnd> ( line,",0
24,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
25,<S2SV_ModStart> ; if ( avio_feof ( pb ) ) return AVERROR_EOF ; if (,0
26,"<S2SV_ModStart> mntent, path, rootfs",1
27,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } io -> io_cleanup = mem_cleanup ;,1
28,<S2SV_ModStart> ( size_t ) value <S2SV_ModEnd> ; break ;,0
29,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return ret?,0
30,<S2SV_ModStart> vpx_codec_err_t res ; vpx_codec_enc_cfg_map_t <S2SV_ModEnd> * map ;,0
31,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
32,"<S2SV_ModStart> int frame_out, double <S2SV_ModEnd> dx_time ) {",0
33,,0
34,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60WriteBuffer <S2SV_ModStart> ( interface, E",0
35,<S2SV_ModStart> ; value = ast2obj_expr <S2SV_ModEnd> ( o -> <S2SV_ModStart> ; value = ast2obj_expr <S2SV_ModEnd> ( o -> <S2SV_ModStart> ; value = ast2obj_expr <S2SV_ModEnd> ( o -> <S2SV_ModStart> ; value = ast2obj_expr <S2SV_ModEnd> ( o ->,0
36,"<S2SV_ModStart> page && ( ( <S2SV_ModStart>, R_OK ) ) <S2SV_ModStart> page && ( ( <S2SV_ModStart> ) > 0 )",0
37,"<S2SV_ModStart> int low_var_thresh, VP8_COMMON * const cm, <S2SV_ModStart>.5 ) ; <S2SV_ModEnd> unsigned char * <S2SV_ModStart> pp_limits_buffer ; ; ; <S2SV_ModEnd> ( void ) <S2SV_ModStart> ) flag ; memset <S2SV_ModEnd> ( limits, <S2SV_ModStart> 16 * mb_cols, 16 * mb_cols",0
38,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> ) ; struct mb2_cache * ext4_cache = ext4_cache_entry_alloc ( ext4_cache, GFP_NOFS ) ; struct mb2_cache <S2SV_ModEnd> * ce ; <S2SV_ModStart> ; ce = mb2_cache_entry_alloc ( ext4_cache <S2SV_ModEnd>, GFP_NOFS ) <S2SV_ModStart> error ) { mb2_cache_entry_free <S2SV_ModEnd> ( ce ) <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; mb2_cache_entry_release ( ext4_cache <S2SV_ModEnd> ) ; error <S2SV_ModStart> hash ) ; mb2_cache_entry_release ( ext4_cache <S2SV_ModEnd> ) ; }",0
39,<S2SV_ModStart> ) ) ; free ( uri ) ;,0
40,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
41,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> [|truncated]"" <S2SV_ModEnd> ) ) ;",0
42,,0
43,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode <S2SV_ModStart>, & new_mode, & acl ) ; if ( ret <S2SV_ModEnd> ) goto out",0
44,,0
45,<S2SV_ModStart> FLAG_MATCHED ) || ( <S2SV_ModStart> dp == datalen ||! datalen ),0
46,"<S2SV_ModStart> size_t * acl_len, struct kvec * iov <S2SV_ModStart> int status ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> attrlen ) ; <S2SV_ModEnd> } else status",0
47,<S2SV_ModStart> * TICK_NSEC ; u64 <S2SV_ModEnd> rem ; value,0
48,"<S2SV_ModStart> { owner = ssplit <S2SV_ModEnd> ( auth, <S2SV_ModStart> } group = ssplit <S2SV_ModEnd> ( tok,",1
49,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> addr = VPX_MALLOC_L <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; <S2SV_ModEnd> if ( addr,0
50,<S2SV_ModStart> int res ; long <S2SV_ModEnd> export_index_table [ indexes,0
51,<S2SV_ModStart> } else return apr_strdup <S2SV_ModEnd> ( cmd ->,0
52,<S2SV_ModStart> ; if ( 1 <S2SV_ModEnd> ) { # <S2SV_ModStart> } if ( 1 <S2SV_ModEnd> ) { },0
53,,0
54,"<S2SV_ModStart> ; if ( memcmp <S2SV_ModEnd> ( cmac,",0
55,"<S2SV_ModStart> cpi ) { <S2SV_ModEnd> const uint64_t bits_used <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> cpi -> twopass <S2SV_ModStart> -> twopass. gf_group_bits = MAX <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> -> twopass. gf_group_bits <S2SV_ModEnd>, 0 ) <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
56,,0
57,<S2SV_ModStart> err_free_buf ; } usb_free_urb ( usbinterface ) ;,0
58,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
59,"<S2SV_ModStart> * dir = ""/etc/tmp"" <S2SV_ModEnd> ; if (",0
60,<S2SV_ModStart> 1 ) ; if ( 0 == ps_codec -> i4_sps_valid ) { return IHEVCD_INVALID_HEADER ; },0
61,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
62,,0
63,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
64,<S2SV_ModStart> ) get_block = ocfs2_get_block_block <S2SV_ModEnd> ; else get_block <S2SV_ModStart> else get_block = ocfs2_get_block_block <S2SV_ModEnd> ; return __blockdev_direct_IO,0
65,"<S2SV_ModStart> ; if ( fscanf <S2SV_ModEnd> ( f,",0
66,,0
67,<S2SV_ModStart> string ) { if (! object ) return NULL ;,0
68,<S2SV_ModStart> size ) ; if ( px -> ft ),0
69,,0
70,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
71,"<S2SV_ModStart> const buffers [ 4 <S2SV_ModEnd> ] = { <S2SV_ModStart> src -> u_buffer <S2SV_ModEnd>, src -> <S2SV_ModStart> src -> uv_stride <S2SV_ModEnd> } ; for",0
72,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; for (,1
73,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
74,<S2SV_ModStart> _ipmi_destroy_user ( user ) ; free_user ( & user,0
75,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> sl = strlen,1
76,,0
77,<S2SV_ModStart> = NULL ; dst_state -> curframe = src -> curframe ;,0
78,,0
79,"<S2SV_ModStart> maxn ) { <S2SV_ModEnd> # ifdef DEBUG <S2SV_ModStart> ; # endif if ( n > maxn ) SWF_error ( ""Action <S2SV_blank> overflow!"" ) ;",0
80,<S2SV_ModStart> if ( len > <S2SV_ModEnd> sizeof ( *,0
81,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
82,,0
83,,0
84,<S2SV_ModStart> ) p += ( UChar * ),0
85,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> void bfq_idle_slice_timer_body ( <S2SV_ModStart> bfq_data * bfqd <S2SV_ModEnd> ; enum bfqq_expiration <S2SV_ModStart> long flags ; if ( bfqd -> in_service_queue ) { spin_unlock_irqrestore ( & bfqd -> lock, flags ) ; return ; } <S2SV_ModStart> flags ) ; <S2SV_ModEnd> if ( bfq_bfqq_budget_timeout",0
86,,1
87,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
88,<S2SV_ModStart> diffPtr + x >= <S2SV_ModEnd> diffBlock + diffBlockLength <S2SV_ModStart> diffPtr + x >= <S2SV_ModEnd> diffBlock + diffBlockLength <S2SV_ModStart> extraPtr + y >= <S2SV_ModEnd> extraBlock ) {,0
89,"<S2SV_ModStart>, fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
90,<S2SV_ModStart> ) break ; if ( number_pixels == 0 ) break ;,0
91,"<S2SV_ModStart> encoder_common_init ( ctx, 0",0
92,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
93,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
94,,0
95,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
96,<S2SV_ModStart> exit ; } <S2SV_ModEnd> timeout = sock_rcvtimeo,1
97,"<S2SV_ModStart> msicap, msgnum <S2SV_ModEnd> ) ; return",0
98,<S2SV_ModStart> } if ( server. masterhost &&,0
99,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> cfg -> g_pass <S2SV_ModStart> g_pass!= VPX_RC_ONE_PASS <S2SV_ModEnd> ) ) ERROR <S2SV_ModStart> ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" <S2SV_ModEnd> ) ; if",0
100,<S2SV_ModStart> cpi ) { <S2SV_ModEnd> vp9_init_plane_quantizers ( cpi,0
101,<S2SV_ModStart> info -> si_code <S2SV_ModEnd> ) return -,0
102,<S2SV_ModStart> ptr -> size <S2SV_ModEnd> ; tmp_str =,1
103,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
104,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> -> state == fmode <S2SV_ModEnd> ) return ; <S2SV_ModStart> ( mode & fmode <S2SV_ModEnd> )!= ( <S2SV_ModStart> -> state = fmode <S2SV_ModEnd> ; } <S2SV_null>",0
105,<S2SV_ModStart> read_info -> filename <S2SV_ModEnd> ) ; if,0
106,<S2SV_ModStart> 0 ; } memset <S2SV_ModEnd> ( elem.,0
107,"<S2SV_ModStart>, i, <S2SV_ModEnd> JPC_QCX_GETEXPN ( qcd <S2SV_ModStart>, i, <S2SV_ModEnd> JPC_QCX_GETMANT ( qcd",0
108,<S2SV_ModStart> avctx -> height <S2SV_ModEnd> ; if (,0
109,<S2SV_ModStart> length - 1 <S2SV_ModEnd> ) ; return,1
110,"<S2SV_ModStart> noffset, NULL, 0",0
111,"<S2SV_ModStart> -> rx_kfifo, CX23888_IR_RX_KFIFO_SIZE <S2SV_ModEnd>, GFP_KERNEL )",0
112,<S2SV_ModStart> vpx_codec_dec_cfg_t * cfg __attribute__ ( ( unused ) ),0
113,<S2SV_ModStart> ; value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1100WritePhyReg (,0
114,,0
115,<S2SV_ModStart> else if ( <S2SV_ModEnd> flags & VPX_CODEC_USE_XMA <S2SV_ModStart> flags & VPX_CODEC_USE_PSNR <S2SV_ModEnd> ) res =,0
116,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
117,"<S2SV_ModStart>, arg -> fmode <S2SV_ModEnd> ) ; RESERVE_SPACE",1
118,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ) ; return 0 <S2SV_ModStart> break ; } return 0 ;,0
119,<S2SV_ModStart> len ) ; if ( len < 8 ) { return - 1 ; },0
120,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
121,<S2SV_ModStart> goto trunc ; ND_TCHECK_16BITS ( & lshp -> ls_type ) ;,0
122,"<S2SV_ModStart> } else { if (! <S2SV_ModStart>, ibuf ) ) return - EINVAL",0
123,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
124,<S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> | O_CLOEXEC ) ),0
125,"<S2SV_ModStart> * costs, vpx_tree <S2SV_ModEnd> tree, const <S2SV_ModStart> tree, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> ) { const vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> ) ; const vpx_tree_index ii <S2SV_ModEnd> = tree [",0
126,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
127,"<S2SV_ModStart> 4, c <S2SV_ModEnd> ) ; if",0
128,,0
129,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> return flags &,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
131,"<S2SV_ModStart> * cpi, ThreadData * td <S2SV_ModEnd>, MODE_INFO * <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd>, int * <S2SV_ModStart> = & cpi <S2SV_ModEnd> -> common ; <S2SV_ModStart> = num_8x8_blocks_wide_lookup [ td <S2SV_ModEnd> -> mbmi. <S2SV_ModStart> = num_8x8_blocks_high_lookup [ td <S2SV_ModEnd> -> mbmi. <S2SV_ModStart> ( cpi, td <S2SV_ModEnd>, mi_8x8, <S2SV_ModStart> ( cpi, td <S2SV_ModEnd>, mi_8x8, <S2SV_ModStart> ( cpi, td <S2SV_ModEnd>, mi_8x8, <S2SV_ModStart> ( cpi, td <S2SV_ModEnd>, mi_8x8 + <S2SV_ModStart> ( cpi, td <S2SV_ModEnd>, mi_8x8 + <S2SV_ModStart> ( cpi, td <S2SV_ModEnd>, mi_8x8 +",0
132,<S2SV_ModStart> -> flags & CLIENT_CLOSE_AFTER_REPLY <S2SV_ModEnd> ) break ;,0
133,<S2SV_ModStart> get_blocks_flags = EXT4_GET_BLOCKS_CREATE <S2SV_ModEnd> ; blks =,0
134,"<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart>, handle, NULL <S2SV_ModEnd>, & p <S2SV_ModStart> & p -> ai_addrlen <S2SV_ModEnd>, & p <S2SV_ModStart> & p -> ai_addrlen <S2SV_ModEnd>, NULL, <S2SV_ModStart> & p -> ai_addrlen <S2SV_ModEnd>, NULL, <S2SV_ModStart> & p -> ai_addrlen <S2SV_ModEnd>, NULL )",0
135,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
136,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
137,"<S2SV_ModStart> __u16 size, const <S2SV_ModStart> { int ret ; if (! data ) return - EINVAL",0
138,"<S2SV_ModStart> mod_ty Module ( asdl_seq <S2SV_ModEnd> * body,",0
139,"<S2SV_ModStart>, int64_t ts_end ) { <S2SV_ModEnd> if ( ctx <S2SV_ModStart> write_idx ) ; <S2SV_ModEnd> if ( ctx <S2SV_ModStart> write_idx ) ; <S2SV_ModEnd> } else { <S2SV_ModStart> } else { vpx_copy_and_extend_frame <S2SV_ModEnd> ( src, <S2SV_ModStart> img ) ; <S2SV_ModEnd> } buf ->",0
140,<S2SV_ModStart> ( method == LPF_PICK_FROM_Q <S2SV_ModEnd> ) { const <S2SV_ModStart> int q = vpx_ac_quant <S2SV_ModEnd> ( cm -> <S2SV_ModStart> int filt_guess = ROUND_POWER_OF_TWO <S2SV_ModEnd> ( q *,0
141,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
142,"<S2SV_ModStart> int a = safe_calloc <S2SV_ModEnd> ( fmt,",0
143,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
144,"<S2SV_ModStart> (! data <S2SV_ModEnd> ) ) res <S2SV_ModStart>. decode ( <S2SV_ModEnd> data, data",0
145,,0
146,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> k ) ; sendClean ( outputbuffer ) ;",0
147,<S2SV_ModStart> self ) { if ( self -> dict ),0
148,<S2SV_ModStart> 0 ; a && <S2SV_ModEnd> i < count,0
149,,0
150,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
151,<S2SV_ModStart> ; if ( msg_compat && msg_compat -> msg_control ) { err = - EINVAL ; goto out_freeiov ; } if (,0
152,,0
153,<S2SV_ModStart> ( ) ) <S2SV_ModEnd> ; } if,0
154,"<S2SV_ModStart> { xsltTransformError ( ctxt,",0
155,"<S2SV_ModStart> { if ( safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.zshrc"", <S2SV_ModStart> ) ; } safe_copy_file ( ""/etc/skel/.zshrc"", fname, u, g, 0644 ) ; <S2SV_ModStart> ) ; } safe_copy_file ( ""/etc/skel/.cshrc"", fname, u, g, 0644 ) ; <S2SV_ModStart> { if ( safe_copy_file <S2SV_ModEnd> ( ""/etc/skel/.cshrc"", <S2SV_ModStart> ) ; } safe_copy_file ( ""/etc/skel/.cshrc"", fname, u, g, 0644 ) ;",0
156,<S2SV_ModStart> msix_tab_size ) { <S2SV_ModEnd> bzero ( msixcap,1
157,<S2SV_ModStart> ; if ( <S2SV_ModEnd> js_regexec ( re,0
158,<S2SV_ModStart> : if ( Long_val <S2SV_ModEnd> ( Field (,1
159,"<S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; ksz8851WriteReg <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( isr & KSZ8851_ISR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_ISR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( isr & KSZ8851_ISR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> ) ; n <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, ier )",0
160,"<S2SV_ModStart> void encode_quantization ( VP9_COMMON <S2SV_ModEnd> * cm, <S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
161,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> p_buf, msglen )",1
162,"<S2SV_ModStart> ( fp, out,",0
163,"<S2SV_ModStart> ( ) ; memset ( t1_buf_array, 0, sizeof ( t1_buf_array ) ) ;",0
164,,0
165,<S2SV_ModStart> key_ref ) ; if ( buflen < 0 ) goto error2 ;,0
166,<S2SV_ModStart> ps_dec -> u4_first_slice_in_pic || ps_dec -> u4_first_slice_in_pic,0
167,<S2SV_ModStart> = tnum_is_const ( src_known <S2SV_ModEnd> ) ; switch,0
168,<S2SV_ModStart> ; if ( rc == - EINVAL ) goto lookup_out ; if (,0
169,"<S2SV_ModStart> ) ) { RCU_INIT_POINTER ( ireq -> ireq_opt, rt ) ;",0
170,,0
171,<S2SV_ModStart> = new_cols ; <S2SV_ModEnd> vterm_allocator_free ( screen,1
172,,0
173,<S2SV_ModStart> ) ; struct dump_dir <S2SV_ModEnd> * dd =,0
174,,0
175,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
176,"<S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; thissad <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; this_mv",0
177,,0
178,"<S2SV_ModStart> ; dh = skb_header_pointer <S2SV_ModEnd> ( skb,",0
179,"<S2SV_ModStart> net, struct ip_options_rcu <S2SV_ModEnd> * * opt <S2SV_ModStart> & 3 ) { <S2SV_ModStart> = IPOPT_END ; } <S2SV_ModStart> ( optlen && ip_options_compile <S2SV_ModEnd> ( net,",0
180,"<S2SV_ModStart> connection == NULL || strcasecmp ( connection, ""Connection"" ) == 0",0
181,,0
182,"<S2SV_ModStart>, client_uid, DEFAULT_DUMP_DIR_MODE <S2SV_ModEnd> ) ; if",0
183,,0
184,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
185,<S2SV_ModStart> ; if ( EOFBlob ( image )!= MagickFalse &&,0
186,"<S2SV_ModStart> ( ndo, ""%s"", bp [ 3 ] <S2SV_ModEnd> ) ) ;",0
187,<S2SV_ModStart>! dumpable && <S2SV_ModEnd>! ptrace_has_cap (,0
188,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
189,<S2SV_ModStart> i1_nal_type ) ; ps_parse -> s_sei_params. i1_sei_parameters_present_flag = 1 ;,0
190,<S2SV_ModStart> ) ; } dd -> sdma_unfreeze_wq = NULL ;,0
191,,0
192,<S2SV_ModStart> } pairs = palloc64 <S2SV_ModEnd> ( pcount *,0
193,"<S2SV_ModStart> val ) ; ruleadd <S2SV_ModEnd> ( r,",0
194,"<S2SV_ModStart> ) ) { if ( clen < c -> bcnt ) { return bad_request ( c, 431, __LINE__ ) ; }",0
195,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> 256 ] ; tran_low_t <S2SV_ModEnd> * outptr = <S2SV_ModStart>, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16",0
196,"<S2SV_ModStart> = g_strdup_printf ( ""%s"",",0
197,,0
198,<S2SV_ModStart> len ) ; ND_TCHECK_16BITS ( tptr ) ;,0
199,"<S2SV_ModStart> target, NULL, 0",0
200,"<S2SV_ModStart> S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %ld\\r\\n"" <S2SV_ModEnd> ""%s"", request",0
201,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 0 ) ; copy_file_as_user <S2SV_ModEnd> ( dest, <S2SV_ModStart> ""chown"" ) ; <S2SV_ModEnd> unlink ( src",0
202,<S2SV_ModStart>!= BFA_STATUS_OK ) { kfree ( fcstats ) ; <S2SV_ModStart> return NULL ; },1
203,"<S2SV_ModStart> -> x = min <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> y = min <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> y = min <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> -> z = min <S2SV_ModEnd> ( 1.0f,",0
204,<S2SV_ModStart> ; rec -> sasl_username <S2SV_ModEnd> = src -> <S2SV_ModStart> ; rec -> sasl_password <S2SV_ModEnd> = src ->,0
205,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
206,"<S2SV_ModStart> c ; size_t <S2SV_ModEnd> o, datao",0
207,<S2SV_ModStart> ) ) ; if ( info == NULL ) return - 1 ;,0
208,"<S2SV_ModStart> olen ) { size_t alloc ; char * ns ; int alloc ; char * ns ; int strindex ; char * ns ; int strindex ; char * ns ; int strindex ; char * ns ; int strindex ; char * ns ; int strindex = 0 ; char * ns ; int strindex = 0 ; char * ns ; int strindex = 0 ; char * ns ; int strindex = 0 ; char * ns ; int strindex = 0 ; char * ns ; int strindex = 0 ; char * ns ; int strindex = 0 ; char * ns ; int strindex = 0 ; char * ns ; int strindex = 0 ; char * ns ; int strindex = 0 ; char * ns ; int strindex = 0 ; char * ns ; int strindex = 0 ; char * ns ; int strindex = 0 ; char * ns ; int strindex = 0 ; char * ns ; int strindex = 0 ; char * ns ; int strindex = 0 ; while ( -- alloc > 0 ) { char * ns = malloc ( alloc ) ; res = Curl_convert_from_network ( handle, & in, 1 ) ; if ( res ) { free (",0
209,<S2SV_ModStart> ; RAnalOp next_op = { 0 },1
210,<S2SV_ModStart> ; def -> <S2SV_ModEnd> session_setup = usm_session_init,0
211,"<S2SV_ModStart>, sp, sub,",0
212,<S2SV_ModStart> idx ] ; <S2SV_ModEnd> switch ( action,0
213,<S2SV_ModStart> 8 ) ; * pixels ++ = 0 ;,0
214,<S2SV_ModStart> timer ) ; spin_lock_irq ( & slave_active_lock ) ; <S2SV_ModStart> open_list ) { <S2SV_ModEnd> list_move_tail ( &,0
215,<S2SV_ModStart> -> u4_bitoffset = ih264d_read_mmco_commands <S2SV_ModEnd> ( ps_dec ),0
216,,0
217,<S2SV_ModStart> || cherokee_buffer_is_empty ( <S2SV_ModEnd> conn -> validator,0
218,<S2SV_ModStart> bus ] ; <S2SV_ModEnd> si = &,0
219,"<S2SV_ModStart>, timeo ) <S2SV_ModEnd> ; if (",1
220,<S2SV_ModStart> ; isspace ( ( unsigned char ) <S2SV_ModStart> * t && ( unsigned char ),0
221,<S2SV_ModStart> ; result = TEMP_FAILURE_RETRY ( <S2SV_ModStart> uipc_main. read_set ),0
222,<S2SV_ModStart> msixcap msixcap ; <S2SV_ModEnd> pci_msix_table_init ( dev,0
223,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",1
224,<S2SV_ModStart> == NULL ) return retval ; <S2SV_ModEnd> status = X509_NAME_cmp <S2SV_ModStart> = 0 ; <S2SV_ModEnd> X509_NAME_free ( is,0
225,,0
226,,0
227,<S2SV_ModStart> ; if ( buf2 <S2SV_ModEnd> -> size <,0
228,<S2SV_ModStart> ) + size <S2SV_ModEnd> ; if (,0
229,<S2SV_ModStart> ; if ( protocol < 0 || protocol > SK_PROTOCOL_MAX ) return - EINVAL ; if (,1
230,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
231,"<S2SV_ModStart> -> fd, EPOLLIN <S2SV_ModEnd>, button_dispatch,",0
232,<S2SV_ModStart> ( ) ; errors += test_string_formatting ( ) ;,0
233,<S2SV_ModStart> -> lun ) sas_eh_defer_cmd <S2SV_ModEnd> ( cmd ),0
234,"<S2SV_ModStart>, end_col_offset ; string type_comment ; <S2SV_ModStart> 2 ; } type_comment = CHILD ( n, name_i + 3 ) ; if (! type_comment ) type_comment = NEW_IDENTIFIER ( CHILD ( n, name_i + 3 ) ) ; if (! type_comment ) type_comment = NEW_IDENTIFIER ( CHILD ( n, name_i + 3 ) ) ; if (! type_comment ) type_comment = NEW_IDENTIFIER ( CHILD ( n, name_i + 3 ) ) ; if (! type_comment ) type_comment = NEW_IDENTIFIER ( CHILD ( n, name_i + 3 ) ) ; if (! type_comment ) type_comment = NEW_IDENTIFIER ( CHILD ( n, name_i + 3 ) ) ; if (! type_comment ) type_comment = NEW_IDENTIFIER ( CHILD ( n, name_i + 3 ) ) ; if (! type_comment ) type_comment = NEW_IDENTIFIER ( CHILD ( n, name_i + 3 ) ) ; if (! type_comment ) type_comment =",0
235,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
236,<S2SV_ModStart> Bitmap2Header1. NumOfEntries || Bitmap2Header1. NumOfEntries,0
237,,1
238,<S2SV_ModStart> 0 ) ; if (! res ) return - EINVAL ;,1
239,<S2SV_ModStart> ( position > psf -> header <S2SV_ModEnd> ) psf -> <S2SV_ModStart> ( position > psf -> header <S2SV_ModEnd> ) psf_fread ( <S2SV_ModStart> ( psf -> header <S2SV_ModEnd> ) psf_fread ( <S2SV_ModStart> ( psf -> header <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( psf -> header <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( psf -> header <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( psf -> header <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( psf -> header <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( psf -> header <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( psf -> header <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( psf -> header <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( psf -> header <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( psf -> header <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( psf -> header <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( psf -> header <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( psf -> header <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( psf -> header <S2SV_ModEnd> + psf -> <S2SV_ModStart> ( psf -> header <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( psf -> header <S2SV_ModEnd> + psf -> <S2SV_ModStart> ( psf -> header <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( psf -> header <S2SV_ModEnd> + psf -> <S2SV_ModStart> ( psf -> header <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( psf -> header <S2SV_ModEnd> + psf ->,0
240,"<S2SV_ModStart> u4_ofst ) ; memset ( ps_cabac -> u4_ofst, 0, sizeof ( ps_cabac -> u4_ofst ) ) ;",0
241,<S2SV_ModStart> ; if ( n_children < 0 || n_children > 0 ) break ; if (,0
242,<S2SV_ModStart> perf_event_context * ctx <S2SV_ModEnd> ; if ( <S2SV_ModStart> event ) ; <S2SV_ModEnd> } raw_spin_unlock_irq (,0
243,<S2SV_ModStart> -> post_proc_flag = <S2SV_ModEnd> ( ctx -> <S2SV_ModStart>. noise_level ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
244,<S2SV_ModStart> sizeof ( struct olsr_common <S2SV_ModEnd> ) ) ;,0
245,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vpx_usec_timer_start ( & <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,1
246,"<S2SV_ModStart> ( stderr, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" <S2SV_ModEnd> ) ; exit",0
247,<S2SV_ModStart> ; if ( ptr_hbe_txposer -> core_frame_length > 1024 ) ptr_hbe_txposer -> core_frame_length = 1024 ; if (,0
248,,0
249,<S2SV_ModStart> image ) ; quantum_info = DestroyImageList ( image ) ;,0
250,<S2SV_ModStart> (! proto_end ||! proto_end,0
251,<S2SV_ModStart> fdt ) ; if (! path ) return - EINVAL ;,0
252,<S2SV_ModStart> ; if ( server. bgrewritechildpid &&,0
253,<S2SV_ModStart> channel ) ; <S2SV_ModEnd> set_description ( client,1
254,<S2SV_ModStart> book -> dim && i < n,1
255,<S2SV_ModStart> action ) { ( void ) action ;,0
256,"<S2SV_ModStart> this_h ) { vpx_setup_scale_factors <S2SV_ModEnd> ( other_w, <S2SV_ModStart> } else { vpx_setup_scale_factors <S2SV_ModEnd> ( sf )",0
257,<S2SV_ModStart> (! buf || count > count,0
258,<S2SV_ModStart> skb ) ; <S2SV_ModEnd> lock_sock ( sk,0
259,<S2SV_ModStart> ( & sctp_net_ops ) ; unregister_pernet_subsys ( & sctp_net_ops,0
260,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> index ) ; return 0 ;,0
261,<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen (,1
262,"<S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_PHY1ILR <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> )!= KSZ8851_REV_A3_ID <S2SV_ModStart> ( interface, KSZ8851_CIDER <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_MARM <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_MARM <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_MARM <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_MARM <S2SV_ModEnd> ) ) ;",0
263,"<S2SV_ModStart> skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
264,"<S2SV_ModStart> BOOTSTAGE_SUB_FORMAT ) ; ret = fit_check_format ( fit, IMAGE_SIZE_INVAL ) ; if ( ret <S2SV_ModEnd> ) { printf <S2SV_ModStart> ) ; return ret <S2SV_ModEnd> ; } bootstage_mark",0
265,"<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> uinput_fd, UI_DEV_DESTROY )",1
266,<S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc ->,0
267,<S2SV_ModStart> ) if ( safe_strcmp <S2SV_ModEnd> ( argv [,0
268,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
269,<S2SV_ModStart> ib ] ; <S2SV_ModEnd> dequant_ptr = d,1
270,<S2SV_ModStart> ( buff ) <S2SV_ModEnd> ) ; # <S2SV_ModStart> ( buff ) <S2SV_ModEnd> ) ; # <S2SV_ModStart> ( buff ) <S2SV_ModEnd> ) ; #,0
271,<S2SV_ModStart> decrypt_cb ) { size_t <S2SV_ModEnd> n = (,0
272,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; <S2SV_ModEnd> exit_func : free_server_handle,0
273,,0
274,<S2SV_ModStart> goto error ; if ( statbuf. st_size < h -> size ) goto error ;,0
275,"<S2SV_ModStart> u1_level_idc, u1_seq_parameter_set_id = 0",0
276,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> ; vpx_svc_parameters_t * const <S2SV_ModStart> ; vpx_svc_parameters_t * const <S2SV_ModStart> ; vpx_svc_parameters_t * const <S2SV_ModStart> ; vpx_svc_parameters_t * const <S2SV_ModStart> ; vpx_svc_parameters_t * const <S2SV_ModStart> ; vpx_svc_parameters_t * const <S2SV_ModStart> ; vpx_svc_parameters_t * const <S2SV_ModStart> ; vpx_svc_parameters_t * const <S2SV_ModStart> ; vpx_svc_parameters_t * const <S2SV_ModStart> ; vpx_svc_parameters_t * const <S2SV_ModStart> ; vpx_svc_parameters_t * const <S2SV_ModStart> ; vpx_svc_parameters_t * const <S2SV_ModStart> ; vpx_svc_parameters_t * const <S2SV_ModStart> ; vpx_svc_parameters_t * const <S2SV_ModStart> ; vpx_svc_parameters_t * const <S2SV_ModStart> ; vpx_svc_parameters_t * const <S2SV_ModStart> ; vpx_svc_parameters_t * const <S2SV_ModStart> ; vpx_",0
277,"<S2SV_ModStart> out ) { int64 <S2SV_ModEnd> bitspersample, samplesperpixel <S2SV_ModStart>, samplesperpixel ; int64 <S2SV_ModEnd> input_photometric ; uint32",0
278,,0
279,<S2SV_ModStart> i_sb ) ; <S2SV_ModEnd> bh = udf_read_ptagged <S2SV_ModStart> indicB. extLength <S2SV_ModEnd> ) { if,0
280,<S2SV_ModStart> ( mbmi ) ; memset <S2SV_ModEnd> ( & lfm <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm,0
281,"<S2SV_ModStart> mq_ops ) { spin_lock_irqsave <S2SV_ModEnd> ( & fq <S2SV_ModStart> mq_flush_lock, flags <S2SV_ModEnd> ) ; }",0
282,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
283,"<S2SV_ModStart> { option = sscan <S2SV_ModEnd> ( option,",0
284,<S2SV_ModStart> || * replySize > <S2SV_ModEnd> sizeof ( effect_param_t,0
285,"<S2SV_ModStart> ) calloc ( num_versions + 1 <S2SV_ModEnd>, sizeof (",0
286,<S2SV_ModStart> 0x02 ) ; memcpy <S2SV_ModEnd> ( sbuf +,0
287,,0
288,<S2SV_ModStart> ; } } return - 1 ;,1
289,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
290,,0
291,<S2SV_ModStart> ) ; } quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
292,"<S2SV_ModStart> len ) { return decode_unicode_with_escapes_with_escapes <S2SV_ModEnd> ( c, <S2SV_ModStart> len ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
293,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> enum { YES <S2SV_ModStart> ; int setimes <S2SV_ModEnd> ; char ch <S2SV_ModStart> ""Unexpected <S2SV_blank> off_t/time_t <S2SV_blank> size"" ) ; setimes = 0 <S2SV_ModEnd> ; mask =",0
294,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
295,"<S2SV_ModStart> -> mip = vpx_calloc <S2SV_ModEnd> ( width,",0
296,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
297,,0
298,<S2SV_ModStart> ] ) ; <S2SV_ModEnd> vterm_allocator_free ( screen,1
299,"<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & delay )",1
300,"<S2SV_ModStart> one, offset <S2SV_ModEnd> ; ssize_t count <S2SV_ModStart> ) break ; if ( number_planes_filled > number_planes_filled ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
301,"<S2SV_ModStart> -> host, ssplit <S2SV_ModEnd> ( sclone (",1
302,"<S2SV_ModStart>. cmp = key_cmp <S2SV_ModEnd>,. match_data",0
303,<S2SV_ModStart>! ntime ) <S2SV_ModEnd> goto out ; <S2SV_ModStart> goto out ; <S2SV_ModEnd> cg_wlock ( &,0
304,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
305,"<S2SV_ModStart> { PyObject * <S2SV_ModEnd> dict = _PyObject_GetAttrId <S2SV_ModStart> = Py_BuildValue ( ""O()O"" <S2SV_ModEnd>, Py_TYPE (",0
306,"<S2SV_ModStart> ) & desc, sizeof ( * desc )",1
307,<S2SV_ModStart> -> private_data ; <S2SV_ModEnd> switch ( cmd <S2SV_ModStart> case PERF_EVENT_IOC_PERIOD : mutex_lock ( & event -> ioc_lock ) ; <S2SV_ModStart> ret ; } mutex_unlock ( & event -> ioc_lock ) ;,0
308,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> * r, vpx_reader <S2SV_ModEnd> y_mode ) { <S2SV_ModStart> y_mode ) { <S2SV_ModEnd> uv_mode = read_intra_mode",0
309,<S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> if (!,0
310,"<S2SV_ModStart> iv ) ; if (! self ) ossl_raise ( eCipherError, ""Invalid <S2SV_blank> key <S2SV_blank> parameter"" ) ;",0
311,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
312,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ngttp2_is_fatal ( rv,0
313,,0
314,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> t ] ; <S2SV_ModEnd> while ( p <S2SV_ModStart> & 1 ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ; } vpx_write_bit <S2SV_ModEnd> ( w,",0
315,<S2SV_ModStart> ; struct vpx_write_bit_buffer * wb <S2SV_ModEnd> ; struct vpx_write_bit_buffer <S2SV_ModStart> ; struct vpx_write_bit_buffer * <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> += uncompressed_hdr_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb,0
316,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
317,<S2SV_ModStart> _U_ ) { ND_TCHECK ( * ext ) ; <S2SV_ModStart> * typedata ; <S2SV_ModEnd> UNALIGNED_MEMCPY ( &,0
318,<S2SV_ModStart> cmpt -> data ; cmpt -> data = 0,0
319,<S2SV_ModStart> urb ) ; usb_free_urb ( urb ) ;,1
320,,0
321,<S2SV_ModStart> return mount_entry_on_generic ( <S2SV_ModEnd> mntent -> mnt_dir,0
322,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
323,"<S2SV_ModStart> ( env, server_name_val, req_server_name_val <S2SV_ModEnd> ( req )",0
324,<S2SV_ModStart> endif int col_type <S2SV_ModEnd> ; MYSQL_BIND *,0
325,<S2SV_ModStart> need = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> need *= 4 <S2SV_ModEnd> ; } ),0
326,"<S2SV_ModStart> char * str <S2SV_ModEnd>, int radix <S2SV_ModStart> val ) ) strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> < 0 ) strcpy <S2SV_ModEnd> ( str, <S2SV_ModStart> ) ; else strcpy <S2SV_ModEnd> ( str,",0
327,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( fast_pool ->,0
328,"<S2SV_ModStart> LEX_ID ) { snprintf <S2SV_ModEnd> ( str, <S2SV_ModStart> ( str, sizeof ( str ), <S2SV_ModStart> ( str, sizeof ( str ) <S2SV_ModEnd> ) ; } <S2SV_ModStart> LEX_STR ) { snprintf <S2SV_ModEnd> ( str, <S2SV_ModStart> ( str, sizeof ( str ), <S2SV_ModStart> jslGetTokenValueAsString ( ) <S2SV_ModEnd> ) ; }",0
329,,1
330,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
331,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
332,<S2SV_ModStart> ( s1 ) <S2SV_ModEnd> ) ; },0
333,"<S2SV_ModStart> { parse_global_option ( CMD_PRINT_HELP <S2SV_ModEnd>, NULL, <S2SV_ModStart> { parse_global_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL,",0
334,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
335,,0
336,<S2SV_ModStart> = e_error ; ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = 0 ;,0
337,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> char * print_string <S2SV_ModStart> ) { return <S2SV_ModEnd> print_string_ptr ( item,0
338,"<S2SV_ModStart>. encode ( vpx_encoder_alg_priv <S2SV_ModEnd>, img, <S2SV_ModStart>. encode ( vpx_encoder_alg_priv <S2SV_ModEnd>, img,",0
339,,0
340,<S2SV_ModStart> < cols + 17 <S2SV_ModEnd> ; i ++,0
341,<S2SV_ModStart> ; i -> width = i -> width ; i -> height = i -> height ; i -> height = i -> height ; i ->,0
342,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
343,<S2SV_ModStart> 1 ) ; if ( ps_codec -> i4_sps_valid ) { return IHEVCD_INVALID_HEADER ; },0
344,<S2SV_ModStart> ) ) { va_end ( argptr ) ;,0
345,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; sun_info. width = sun_info. height ; sun_info. height = sun_info. height ;",0
346,"<S2SV_ModStart> 0 ; } copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> 0600 ) ; <S2SV_ModEnd> fs_logger2 ( ""clone"" <S2SV_ModStart> ""clone"", dest <S2SV_ModEnd> ) ; return",1
347,<S2SV_ModStart> BLOCK_8X8 : return vpx_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> BLOCK_16X8 : return vpx_mse16x8 <S2SV_ModEnd> ; case BLOCK_8X8 <S2SV_ModStart> BLOCK_8X8 : return vpx_mse16x8 <S2SV_ModEnd> ; case BLOCK_8X16 <S2SV_ModStart> BLOCK_8X16 : return vpx_mse8x16 <S2SV_ModEnd> ; default : <S2SV_ModStart> default : return vpx_mse16x16 <S2SV_ModEnd> ; } },0
348,<S2SV_ModStart> retval ) ; if ( retval == 0 ) return retval ;,0
349,<S2SV_ModStart> = to_vb2_v4l2_buffer ( <S2SV_ModEnd> vb -> vb2_buf <S2SV_ModStart> vb. vb2_buf <S2SV_ModEnd> ) ; if,0
350,<S2SV_ModStart> size ) { assert ( size <= 0 ) ;,0
351,<S2SV_ModStart> -> serviceId == EXTRACT_16BITS <S2SV_ModEnd> ( & rxh,1
352,<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len > sizeof ( struct host_cmd_ds_802_11_ad_hoc_start ) ) return - EINVAL ;,0
353,<S2SV_ModStart> ) ; } if ( nsbuf < nsbuf ) return error ;,0
354,,0
355,"<S2SV_ModStart> do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> r, MSG_WAITALL )",1
356,<S2SV_ModStart> -> u1_pic_decode_done = 1 <S2SV_ModEnd> ; ps_dec ->,0
357,<S2SV_ModStart> ( pair!= NULL <S2SV_ModEnd> ) { mprAddItem,0
358,"<S2SV_ModStart> * delegation, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> -> type & fmode <S2SV_ModEnd> )!= open_flags <S2SV_ModStart> -> stateid, fmode <S2SV_ModEnd> ) ; ret <S2SV_ModStart> ( state, fmode <S2SV_ModEnd>, NULL, <S2SV_ModStart> ( state, fmode <S2SV_ModEnd>, NULL,",0
359,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
360,,0
361,"<S2SV_ModStart> ( pmd_none_or_clear_bad ( pmd,",0
362,<S2SV_ModStart> ( ( * ptr <S2SV_ModEnd> =='<S2SV_blank>') <S2SV_ModStart> ( ( * ptr <S2SV_ModEnd> = malloc ( <S2SV_ModStart> ( void ) memcpy <S2SV_ModEnd> ( * ret_username,0
363,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> ) { return vpx_read_tree <S2SV_ModEnd> ( r,",1
364,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",1
365,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
366,<S2SV_ModStart> depth ++ ; if ( buf2 == NULL ) return ( NULL ) ;,0
367,"<S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_RXQCR <S2SV_ModEnd> ) ; header <S2SV_ModStart> ( interface, KSZ8851_RXQCR <S2SV_ModEnd>, RXQCR_SDA ) <S2SV_ModStart> ( interface, KSZ8851_RXQCR <S2SV_ModEnd>, RXQCR_SDA ) <S2SV_ModStart> ( interface, KSZ8851_RXQCR <S2SV_ModEnd>, TXQCR_SDA ) <S2SV_ModStart> ( interface, KSZ8851_RXQCR <S2SV_ModEnd>, TXQCR_METFE ) <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK",0
368,<S2SV_ModStart> ( ) ; mono_gc_invoke_finalizers ( ) ;,0
369,,0
370,<S2SV_ModStart> ( unlikely ( pmd_trans_huge <S2SV_ModEnd> ( * pmd,0
371,<S2SV_ModStart> ; int width = 0 ; int height = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; usage ( <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; usage ( <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; usage ( <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; usage ( <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; usage ( <S2SV_ModEnd> ) ; return,0
372,"<S2SV_ModStart> i, result <S2SV_ModEnd> ; PyObject *",1
373,,0
374,<S2SV_ModStart> } if ( c < 256 ) return 0 ; if (,0
375,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx ->,0
376,,0
377,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0",1
378,<S2SV_ModStart> int bad_format_imginfo ( const <S2SV_ModStart> char * ptr <S2SV_ModEnd> ; ptr =,0
379,"<S2SV_ModStart> ; UtRegisterTest ( ""DefragReverseTest"", DefragReverseTest ) ; UtRegisterTest (",0
380,<S2SV_ModStart> = object_length ; new_object. length = object_length ;,0
381,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
382,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
383,,0
384,"<S2SV_ModStart> ( log, ""%s"", filename <S2SV_ModEnd> ) ; }",0
385,<S2SV_ModStart> 4 ) ; size_t <S2SV_ModEnd> num_properties = GETINT32 <S2SV_ModStart> ; j < <S2SV_ModEnd> num_properties ; j,0
386,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
387,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; <S2SV_ModEnd> return VPX_CODEC_OK ;",0
388,<S2SV_ModStart> data_size < 4 || data_size < 4,0
389,"<S2SV_ModStart> ; if ( CHILD ( n, 1 ) == 0 ) { return NULL ; } if (",0
390,,0
391,<S2SV_ModStart> -> flags = NS_FALSE <S2SV_ModEnd> ; } },0
392,<S2SV_ModStart> int ret = - EFAULT <S2SV_ModEnd> ; # if,0
393,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
394,<S2SV_ModStart> se_device * remote_dev = NULL <S2SV_ModStart> == XCOL_SOURCE_RECV_OP ) { <S2SV_ModStart> -> dst_dev ; } else { <S2SV_ModEnd> remote_dev = xop <S2SV_ModStart> -> src_dev ; },0
395,<S2SV_ModStart> if ( header && header,0
396,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
397,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; <S2SV_ModEnd> if ( (",0
398,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
399,<S2SV_ModStart> ) AcquireQuantumMemory ( ( unsigned char * ),0
400,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vpx_ref_frame_t * ) ; ( void ) ctx",0
401,,0
402,,0
403,<S2SV_ModStart> VP9_LAST_FLAG ) { <S2SV_ModEnd> if (!,0
404,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
405,,0
406,<S2SV_ModStart> ++ ) { <S2SV_ModEnd> src += src_stride,0
407,<S2SV_ModStart> { rowstoread = ( <S2SV_ModStart> ) % rowsperstrip ) <S2SV_ModStart> { rowstoread = ( <S2SV_ModStart> ) % rowsperstrip ),0
408,<S2SV_ModStart> ; } } <S2SV_ModEnd> return 0 ;,0
409,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> x ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
410,<S2SV_ModStart> number ) ; <S2SV_ModEnd> return num ;,0
411,"<S2SV_ModStart> int w = vpx_img_plane_width <S2SV_ModEnd> ( img, <S2SV_ModStart> ( buf, 1 <S2SV_ModEnd>, w,",0
412,,0
413,<S2SV_ModStart> return 0 ; case EVP_CTRL_AEAD_SET_IV_FIXED : return 0 ;,0
414,"<S2SV_ModStart> 0, 0 <S2SV_ModEnd> ) ; if",0
415,"<S2SV_ModStart> sock, sk ) ; memset ( sa, 0, sizeof ( * sa )",1
416,"<S2SV_ModStart> cpkt. length, cpkt. length",0
417,,0
418,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
419,<S2SV_ModStart> 0 ) { close ( gpsd_sock ) ; return ;,0
420,"<S2SV_ModStart>, & rlen, 0",1
421,"<S2SV_ModStart> * slavename ; memset ( & md5data, 0, sizeof ( md5data ) ) ;",0
422,"<S2SV_ModStart> ; if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart> { if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name,",0
423,<S2SV_ModStart> ( buf ) <S2SV_ModEnd> && str [,0
424,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
425,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
426,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( MnoteFujiEntry ) ) ;",1
427,<S2SV_ModStart> bd_addr ) { if ( bd_addr == NULL ) return BT_STATUS_NOT_READY ;,0
428,,0
429,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> [ psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
430,<S2SV_ModStart> epoll_ ) ; if ( count > OE_SSIZE_MAX ) { ret = - EINVAL ; OE_RAISE_ERRNO ( OE_EINVAL ) ; return ret ; },0
431,"<S2SV_ModStart> = parse_global_option ( CMD_INITIALIZE <S2SV_ModEnd>, NULL,",0
432,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_NOTES_MAX : * ( size_t * ) val = ms -> elf_notes_max ; return 0 ;,1
433,<S2SV_ModStart> * journal = jbd2_journal_invalidatepage <S2SV_ModEnd> ( page ),0
434,<S2SV_ModStart> 1 ) ; if (! trak ) goto exit ;,0
435,"<S2SV_ModStart> 17 ] ; size_t <S2SV_ModEnd> plen ; md5_state_t <S2SV_ModStart> ; # endif memset <S2SV_ModEnd> ( md5data + <S2SV_ModStart>, password, sizeof ( md5data ) <S2SV_ModEnd> ) ; md5data <S2SV_ModStart> = '\\0' ; memset <S2SV_ModEnd> ( md5data + <S2SV_ModStart> state ) ; memset <S2SV_ModEnd> ( & state",0
436,<S2SV_ModStart> ; if ( <S2SV_ModEnd> Prefix!= NULL,1
437,<S2SV_ModStart> ; if ( i + 1 < NCH ( n ) &&,0
438,<S2SV_ModStart> ( ) ; g_hash_table_remove_all ( headers ) ;,0
439,"<S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst,",0
440,,0
441,"<S2SV_ModStart>, obj_tlen ; u_int <S2SV_ModEnd> hexdump ; u_int <S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ;",0
442,"<S2SV_ModStart> mbmi, const MV <S2SV_ModEnd> * mvs [",0
443,<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ),0
444,"<S2SV_ModStart> ; if ( skb_expand_head <S2SV_ModEnd> ( skb_out,",0
445,"<S2SV_ModStart> ) return ; <S2SV_ModEnd> DEBUGMSGTL ( ( <S2SV_ModStart> NULL, NULL <S2SV_ModEnd> ) ; }",0
446,"<S2SV_ModStart> { fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> ], O_RDWR ) <S2SV_ModStart> ( fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd, TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( fd, T",0
447,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
448,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s,",0
449,<S2SV_ModStart> krb5_error_code iakerb_alloc_context ( iakerb_ctx_id_t <S2SV_ModEnd> * pctx ) <S2SV_ModStart> pctx ) { iakerb_ctx_id_t <S2SV_ModEnd> ctx ; krb5_error_code,0
450,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> bitmapDC = CreateCompatibleDC",1
451,<S2SV_ModStart> )!= START_CODE_PREFIX && ps_stream -> u4_offset < ps_stream -> u4_max_offset,0
452,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) { ret = <S2SV_ModEnd> - EINVAL ; <S2SV_ModStart> - EINVAL ; goto out ; }",1
453,,0
454,<S2SV_ModStart> ) ] ; size_t <S2SV_ModEnd> tmp ; if,0
455,,0
456,<S2SV_ModStart> decContainer_t * ) H264SwDecCalloc <S2SV_ModEnd> ( sizeof (,0
457,<S2SV_ModStart> drop ; } <S2SV_ModEnd> opt -> optlen,0
458,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
459,"<S2SV_ModStart> goto errout ; memset ( info, 0, sizeof ( * info ) ) ;",0
460,<S2SV_ModStart> krb5_key_data * key_data <S2SV_ModEnd> ; memcpy ( <S2SV_ModStart> == NULL ) { free ( key_data_in ) ; <S2SV_ModStart> goto cleanup ; },0
461,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
462,<S2SV_ModStart> ] ) ; if ( nByte > 0 ) { <S2SV_ModStart> 1 ) ; },0
463,<S2SV_ModStart> filp ) { <S2SV_ModEnd> return 0 ;,0
464,"<S2SV_ModStart> * orelse, string type_comment, <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. type_comment = type_comment",0
465,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> MYISAM_EXPORTED,0
466,,0
467,,0
468,"<S2SV_ModStart> -> socket, ""%s"", <S2SV_ModStart> -> socket, ""%s"",",1
469,"<S2SV_ModStart> struct flowi6 fl6 ; memset ( & fl6, 0, sizeof ( fl6 ) ) <S2SV_ModStart> -> len, <S2SV_ModEnd> fl6. saddr <S2SV_ModStart> fl6. saddr <S2SV_ModEnd> ) ; if <S2SV_ModStart> = 1 ; IP6_ECN_flow_xmit ( sk, fl6. daddr ) ;",0
470,<S2SV_ModStart> ; MATLAB_KO : if ( clone_info!= ( Image * ) NULL ),0
471,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
472,,0
473,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
474,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
475,<S2SV_ModStart> void fix_interp_filter ( const VP9_COMMON * const <S2SV_ModEnd> cm ) {,0
476,"<S2SV_ModStart> ) { MACROBLOCK <S2SV_ModEnd> const x = <S2SV_ModStart> = 0 ; vpx_setup_src_planes <S2SV_ModEnd> ( x, <S2SV_ModStart> subsampling_y ) ; <S2SV_ModEnd> vpx_memset ( xd",0
477,"<S2SV_ModStart> htc_request_check_host_hdr ( hp, 0",0
478,,0
479,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> sizeof ( tETH_HDR ),1
480,<S2SV_ModStart> ; ps_dec -> u4_slice_num = 0 ; ps_dec ->,0
481,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> * karg ; <S2SV_ModEnd> struct pci_dev * <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( (",0
482,<S2SV_ModStart> char * ) AcquireQuantumMemory <S2SV_ModEnd> ( image ->,0
483,"<S2SV_ModStart> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", <S2SV_ModEnd> argv ) ; <S2SV_ModStart> ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"", <S2SV_ModEnd> argv ) ;",0
484,<S2SV_ModStart> ; if ( <S2SV_ModEnd> datao + 12 <S2SV_ModStart> 12 < datao <S2SV_ModEnd> ) { exif_log <S2SV_ModStart> ; if ( <S2SV_ModEnd> datao + 2 <S2SV_ModStart> 2 < datao <S2SV_ModEnd> ) { exif_log,0
485,"<S2SV_ModStart> 1 ) ; if ( pix == NULL ) return ERROR_INT ( ""pixHtmlViewer"", procName, 1 ) ;",0
486,<S2SV_ModStart> void ) { SSL_CTX_lock ( stunnel_locks [ LOCK_SECTIONS ] ) ; <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> while ( opt <S2SV_ModStart> 0 ; } <S2SV_ModEnd> s_log ( LOG_DEBUG <S2SV_ModStart> servname ) ; <S2SV_ModEnd> } CRYPTO_THREAD_unlock (,0
487,<S2SV_ModStart> void ) { recovery_delete_character ( ) ;,0
488,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> )",0
489,"<S2SV_ModStart> image ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
490,,0
491,,0
492,<S2SV_ModStart> sk ) ; if ( writable ) { <S2SV_ModStart> ( other ) <S2SV_ModEnd>!= sk ) <S2SV_ModStart> wait ) ; <S2SV_ModEnd> } sock_put (,0
493,"<S2SV_ModStart> ( outpos, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"" <S2SV_ModEnd>, x,",0
494,<S2SV_ModStart> ( OM_uint32 ) KRB5_BAD_MSIZE <S2SV_ModEnd> ; return GSS_S_DEFECTIVE_TOKEN,0
495,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> vp9_ref_frame_t * ) ; ( void ) ctx",0
496,<S2SV_ModStart> plug ) ; <S2SV_ModEnd> put_ioctx ( ctx,0
497,"<S2SV_ModStart> char * name <S2SV_ModEnd> ) { int <S2SV_ModStart> ( ""- <S2SV_blank> recovering <S2SV_blank> (with <S2SV_blank> sort) <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name <S2SV_ModEnd> ) ; printf",0
498,<S2SV_ModStart> s } ; <S2SV_ModEnd> uECC_word_t * p <S2SV_ModStart> curve ) ; if ( uECC_vli_isZero ( p ) ) { return 0 ; },0
499,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
500,<S2SV_ModStart> ; } else if ( pool -> free < pool -> free_total ) <S2SV_ModStart> ; } } else { free ( buf ) ; },0
501,,0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
503,"<S2SV_ModStart>, * pixc <S2SV_ModEnd> ; PIXCMAP * <S2SV_ModStart> == NULL ) { pixc = pixc ; <S2SV_ModStart> NULL ) ; }",0
504,<S2SV_ModStart>. vf = vpx_mse16x16 <S2SV_ModEnd> ; xd ->,1
505,<S2SV_ModStart> + 1 ; size_t <S2SV_ModEnd> size = overhead,0
506,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NEGO_STATE_FAIL ; return FALSE ;,0
507,,0
508,<S2SV_ModStart> ; value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1101WritePhyReg (,0
509,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
510,"<S2SV_ModStart> int dst_stride, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart> int i ; PREDICTION_MODE <S2SV_ModEnd> ( init_intra_pred_fn_ptrs ) <S2SV_ModStart> + y ; PREDICTION_MODE <S2SV_ModEnd> ( left_col,",0
511,"<S2SV_ModStart> } end ++ ; } if ( current == end ) { xsltTransformError ( NULL, NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> NULL <S2SV_blank> pattern\\n"" )",0
512,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_completed_io_list ) ;,0
513,,0
514,,0
515,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart> { q = osStrchr <S2SV_ModEnd> ( p +,1
516,<S2SV_ModStart> ; if ( i < NCH ( n ) &&,1
517,<S2SV_ModStart> KEY_FRAME ) { memcpy <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd ->,1
518,,0
519,"<S2SV_ModStart> VALUE read_memory ( VALUE klass, VALUE <S2SV_ModEnd> content ) { <S2SV_ModStart> xmlSchemaPtr schema ; <S2SV_ModEnd> VALUE rb_schema ; <S2SV_ModStart> errors ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
520,"<S2SV_ModStart> ( LOG_ERR, ""Invalid <S2SV_blank> options <S2SV_blank> file"" <S2SV_ModEnd> ) ; return",0
521,<S2SV_ModStart> 2 ] ; <S2SV_ModEnd> } state -> <S2SV_ModStart> 2 ] ; <S2SV_ModEnd> } state ->,0
522,<S2SV_ModStart> err = - EINVAL <S2SV_ModEnd> ; if (,0
523,<S2SV_ModStart> POLL_IN ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
524,,0
525,"<S2SV_ModStart> { print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" <S2SV_ModEnd> ) ; if",0
526,"<S2SV_ModStart> ( interface, KSZ8851_RXFHSR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( status & KSZ8851_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_RXFDPR <S2SV_ModEnd> ) & RXFHBCR_RXBC_MASK <S2SV_ModStart> ( interface, KSZ8851_RXFDPR <S2SV_ModEnd> ) ; kz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_RXFDPR <S2SV_ModEnd> ) ; kz8851ReadFifo <S2SV_ModStart> ( interface, KSZ8851_RXQCR <S2SV_ModEnd> ) ;ancillary <S2SV_ModStart> } } } <S2SV_ModEnd> return ERROR_INVALID_PACKET ;",0
527,"<S2SV_ModStart> node * n, const char * type_comment <S2SV_ModStart> is_async ) { <S2SV_ModEnd> int name_i = <S2SV_ModStart>, LINENO ( type_comment <S2SV_ModEnd> ), n",0
528,<S2SV_ModStart> int i ; flush_tlb <S2SV_ModEnd> ( ) ;,0
529,,0
530,<S2SV_ModStart> test_name ) ; free ( test_name ) ;,0
531,<S2SV_ModStart> row < height && row < raw_width,0
532,<S2SV_ModStart> len ) ; <S2SV_ModEnd> param -> data_size,0
533,<S2SV_ModStart> ) ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
534,<S2SV_ModStart> ( bfqq ) bfq_idle_slice_timer_body <S2SV_ModEnd> ( bfqq ),0
535,<S2SV_ModStart> ; length += <S2SV_ModEnd> update_prepare_bounds ( context,0
536,<S2SV_ModStart> ; if ( <S2SV_ModEnd>! overwrite ),0
537,"<S2SV_ModStart> int plane ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
538,,0
539,<S2SV_ModStart> * err = safe_subblockRead <S2SV_ModEnd> ( & reader,0
540,<S2SV_ModStart> -> ranges = safe_calloc <S2SV_ModEnd> ( sizeof (,0
541,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flags & VP8_EFLAG_NO_UPD_GF <S2SV_ModStart> flags & VP8_EFLAG_FORCE_GF <S2SV_ModEnd> ) { ctx,0
542,<S2SV_ModStart> ; } } if ( quantum_info!= ( QuantumInfo * ) NULL ),0
543,<S2SV_ModStart>! head ) <S2SV_ModEnd> return - EINVAL <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
544,<S2SV_ModStart> u_char * pptr <S2SV_ModEnd> ) { int <S2SV_ModStart> u_char * pptr <S2SV_ModEnd> ) { int <S2SV_ModStart> advance ; u_int tlen <S2SV_ModEnd> ; const u_char,0
545,<S2SV_ModStart> outputbuffer ) ; <S2SV_ModEnd> res -> outputbuffer,0
546,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
547,<S2SV_ModStart> uint64_t ) tokenAmount <S2SV_ModEnd> ) ; if,0
548,,0
549,"<S2SV_ModStart> 0, 0 <S2SV_ModEnd> ) ; if",0
550,<S2SV_ModStart> ; distortion = vpx_variance16x16 <S2SV_ModEnd> ( * (,1
551,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN <S2SV_ModEnd> | ECON2_STRCH ) <S2SV_ModStart> ( interface, ENC624J600_MAADR1 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR3 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_MAADR2 <S2SV_ModEnd>, temp ) <S2SV_ModStart> ( interface, ENC624",0
552,<S2SV_ModStart> ; maxlen = ( int ) <S2SV_ModStart> ; start = ( int ) <S2SV_ModStart> ; maxlen = ( int ) <S2SV_ModStart> -> headindex = ( int ),0
553,<S2SV_ModStart> -> priv -> alg_priv <S2SV_ModEnd> ) ctx -> <S2SV_ModStart> -> priv -> alg_priv <S2SV_ModEnd> ) ; ctx,0
554,<S2SV_ModStart> { sf -> <S2SV_ModEnd> recode_loop = ( <S2SV_ModStart> { sf -> <S2SV_ModEnd> tx_size_search_method = vp9_frame_is_boosted <S2SV_ModStart> ; sf -> <S2SV_ModEnd> mode_skip_start = 10 <S2SV_ModStart> { sf -> <S2SV_ModEnd> mode_skip_start = 10 <S2SV_ModStart> { sf -> <S2SV_ModEnd> mode_skip_start = 10,0
555,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
556,<S2SV_ModStart> + 2 * L -> stacksize <S2SV_ModEnd> ; if (,0
557,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
558,"<S2SV_ModStart>, * s <S2SV_ModEnd> ; int quote <S2SV_ModStart> errstr ) { <S2SV_ModEnd> ast_error ( n",0
559,<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> break ; } <S2SV_ModEnd> if ( strcmp <S2SV_ModStart> ) break ; <S2SV_ModEnd> SvcInternal * const,0
560,<S2SV_ModStart> ) ; } fclose ( mvs ) ;,0
561,<S2SV_ModStart> self ) { size_t <S2SV_ModEnd> i ; PyObject,1
562,,1
563,"<S2SV_ModStart> ( dbh, mysql_error <S2SV_ModEnd> ( imp_dbh -> <S2SV_ModStart> pmysql ), mysql_error <S2SV_ModEnd> ( imp_dbh ->",0
564,"<S2SV_ModStart> ) || ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & size ) <S2SV_ModStart> ( need_close || TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & size )",0
565,,0
566,<S2SV_ModStart> ; sh = safe_calloc <S2SV_ModEnd> ( hdrlen +,0
567,,0
568,<S2SV_ModStart> ( - EINVAL ) ; kfree ( inverts,0
569,,0
570,"<S2SV_ModStart> TX_MODE read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r )",1
571,,0
572,,0
573,<S2SV_ModStart> pSelect -> pSrc ; assert ( pSelect -> nSrc > 0 ),0
574,<S2SV_ModStart> ; serv = svc_create <S2SV_ModEnd> ( & nfs4_callback_program,0
575,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
576,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
577,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
578,"<S2SV_ModStart> do ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> s, 0 )",1
579,,0
580,<S2SV_ModStart> <S2SV_null> static const SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> return ( const SvcInternal_t <S2SV_ModEnd> * ) svc_ctx,1
581,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
582,<S2SV_ModStart> char buffer [ 80 <S2SV_ModEnd> ] ; int,0
583,<S2SV_ModStart> buf ; { <S2SV_ModEnd> return TRUE ;,0
584,"<S2SV_ModStart>, table_start ; if ( read_xattrs_from_disk ( fd, & sBlk. s, no_xattrs, & table_start ) == 0 ) return FALSE ; <S2SV_ModStart> == 0 ) { <S2SV_ModStart> return FALSE ; } <S2SV_ModStart> == 0 ) { <S2SV_ModStart> return FALSE ; } <S2SV_ModStart> == FALSE ) { <S2SV_ModStart> return FALSE ; } <S2SV_ModStart> == FALSE ) { <S2SV_ModStart> return FALSE ; } <S2SV_ModStart> == FALSE ) { <S2SV_ModStart> return FALSE ; }",0
585,"<S2SV_ModStart> rule * rule, u_int flags <S2SV_ModStart> count = 0 ; env -> flags &= ~ KEEPENV <S2SV_ModStart> ; } } env -> flags &= ~ KEEPENV ;",0
586,<S2SV_ModStart> -> seg ; <S2SV_ModEnd> if ( cm <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> mi_cols ) ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ; } } vpx_clear_system_state ( ) ;,0
587,"<S2SV_ModStart>, Module_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Module_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, Expression_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_fields, 0 <S2SV_ModEnd> ) ; if <S2SV_ModStart>, FunctionDef_",0
588,"<S2SV_ModStart> S_IWGRP | S_IROTH, S_IRUSR | S_IWUSR | S_IWUSR | S_IWUSR | S_IWUSR | S_IWUSR | S_IROTH",0
589,<S2SV_ModStart> ) ; } <S2SV_ModEnd> ++ x ->,0
590,,0
591,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = _PyObject_GetAttrId <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = _PyObject_GetAttrId <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = _PyObject_GetAttrId <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = _PyObject_GetAttrId <S2SV_ModEnd> ( obj, <S2SV_ModStart> ; tmp = _PyObject_GetAttrId <S2SV_ModEnd> ( obj,",0
592,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
593,"<S2SV_ModStart>! nfp_abm_u32_check_knode ( alink <S2SV_ModEnd>, knode, <S2SV_ModStart> ) goto err_delete <S2SV_ModEnd> ; tos_off = <S2SV_ModStart>! match ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; <S2SV_ModStart> - ENOMEM ; } <S2SV_ModStart> alink -> dscp_map ) ; kfree ( iter",0
594,<S2SV_ModStart>. g_pass = <S2SV_ModEnd> pass? VPX_RC_LAST_PASS <S2SV_ModStart>? VPX_RC_LAST_PASS : VPX_RC_FIRST_PASS <S2SV_ModEnd> ; if (,0
595,"<S2SV_ModStart> = g_strdup_printf ( ""%s"",",0
596,<S2SV_ModStart> data_end ) { <S2SV_ModEnd> assert ( tile_rows <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> aligned_cols ) ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> ) * aligned_cols <S2SV_ModEnd> ; for (,0
597,<S2SV_ModStart> vp9_decoder_create ( const VP9D_CONFIG <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> vp9_decoder_create ( const VP9D_CONFIG <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> vp9_decoder_create ( const VP9D_CONFIG <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> = 1 ; vpx_initialize_dec <S2SV_ModEnd> ( ) ; <S2SV_ModStart> ) ) ; vpx_rtcd <S2SV_ModEnd> ( ) ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> pbi -> ready_for_new_data <S2SV_ModStart> = 1 ; <S2SV_ModEnd> vp9_init_dequantizer ( cm,0
598,"<S2SV_ModStart>, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" <S2SV_ModEnd> ) ) ;",0
599,<S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> || opt -> rcu <S2SV_ModEnd> == 0 ),0
600,"<S2SV_ModStart> tree2tok ( struct vpx_token <S2SV_ModEnd> * tokens, <S2SV_ModStart> tokens, const vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> do { const vpx_tree_index <S2SV_ModEnd> j = tree",0
601,"<S2SV_ModStart> = VPX_CODEC_OK ; <S2SV_ModEnd> res = validate_img <S2SV_ModStart> vpx_cODEC_INVALID_PARAM ; } if ( img ) res = validate_img ( ctx, img ) ;",0
602,"<S2SV_ModStart>, & len, 0",1
603,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
604,<S2SV_ModStart> int frame_max_bits ( <S2SV_ModEnd> RATE_CONTROL * rc <S2SV_ModStart> oxcf ) { int64_t <S2SV_ModEnd> max_bits = (,0
605,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
606,,0
607,<S2SV_ModStart> x ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
608,,0
609,"<S2SV_ModStart> else if ( strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> else if ( strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"",",0
610,"<S2SV_ModStart>, packet -> http_content_type. ptr = NULL, packet ->",0
611,"<S2SV_ModStart> { q = QueueAuthenticPixels <S2SV_ModEnd> ( image,",0
612,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL ) <S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, MSG_NOSIGNAL )",1
613,<S2SV_ModStart> action ) { ( void ) action ;,0
614,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; sendClean ( outputbuffer ) ;",1
615,"<S2SV_ModStart> return FALSE ; if (! <S2SV_ModStart>, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" ) ) return FALSE",0
616,<S2SV_ModStart> -> above_context = <S2SV_ModEnd> cm -> above_context <S2SV_ModStart> -> above_context = <S2SV_ModEnd> cm -> above_context,0
617,<S2SV_ModStart> # if CONFIG_MULTITHREAD <S2SV_ModEnd> vp8_decoder_remove_threads ( pbi,1
618,,0
619,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
620,"<S2SV_ModStart> s ) { <S2SV_ModEnd> uint16 left, <S2SV_ModStart> ++ ) { in_uint16_le <S2SV_ModEnd> ( s, <S2SV_ModStart> ++ ) { in_uint16_le <S2SV_ModEnd> ( s,",0
621,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
622,"<S2SV_ModStart> tx_size, vpx_coeff_stats <S2SV_ModEnd> coef_branch_ct ) { <S2SV_ModStart> coef_branch_ct ) { vpx_coeff_probs_model <S2SV_ModEnd> * coef_probs =",0
623,<S2SV_ModStart> ( name ) ; if (! name ) return - EINVAL,0
624,,0
625,"<S2SV_ModStart> vpx_codec_enc_cfg_t * cfg, vpx_codec_flags_t flags <S2SV_ModStart> VPX_CODEC_USE_XMA ) && <S2SV_ModEnd> flags & VPX_CODEC_USE_PSNR <S2SV_ModStart> flags & VPX_CODEC_USE_PSNR <S2SV_ModEnd> ) ) res",0
626,,0
627,<S2SV_ModStart> = TRUE ; <S2SV_ModEnd> bufp = find_optparam,0
628,"<S2SV_ModStart> * cJSON_CreateFloatArray ( double <S2SV_ModEnd> * numbers, <S2SV_ModStart> && i < ( int )",0
629,,0
630,<S2SV_ModStart> ; offset = get4 <S2SV_ModEnd> ( ) + <S2SV_ModStart> ; len = get4 <S2SV_ModEnd> ( ) ;,0
631,,0
632,<S2SV_ModStart> -> error_code ) { <S2SV_ModStart> detail : NULL ; },0
633,<S2SV_ModStart> pocstruct_t * ps_prev_poc <S2SV_ModEnd> ; ih264d_free_dynamic_bufs (,0
634,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> btpan_cb. congest_packet ),0
635,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int getnum (,0
636,<S2SV_ModStart> GCSpropagate ) ; <S2SV_ModEnd> psurvival = sweepgen,0
637,<S2SV_ModStart> 0 ; else { kfree ( buf ) ; <S2SV_ModStart> - EIO ; },0
638,<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart>! PROTOCOL_EARLY ) { return NULL ; } <S2SV_ModEnd> memset ( buffer <S2SV_ModStart> buffer ) ; <S2SV_ModEnd> s_write ( c,0
639,,0
640,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi,",0
641,"<S2SV_ModStart> ( ndo, ""%s"", icp -> icmp6_tstr <S2SV_ModEnd> ) ) ;",0
642,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command",0
643,<S2SV_ModStart> Image * image <S2SV_ModEnd> ; assert (,0
644,,0
645,,0
646,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> - m + vpx_read_bit <S2SV_ModEnd> ( r )",1
647,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
648,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> ( REFERENCE_MODE ) vpx_read <S2SV_ModEnd> ( r,",0
649,"<S2SV_ModStart>! stream ) { <S2SV_ModStart> ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; return NULL ; }",0
650,"<S2SV_ModStart> ( ndo, op -> nd_opt_len <S2SV_ModEnd> ) ; if",0
651,<S2SV_ModStart> re_ast ) -> root_node = NULL ; ( * re_ast ) ->,0
652,"<S2SV_ModStart> ( path, <S2SV_ModEnd> iter -> var_expand_table <S2SV_ModStart> ( path, <S2SV_ModEnd> iter -> var_expand_table <S2SV_ModStart> ; if ( <S2SV_ModEnd> dict_lookup ( iter",0
653,<S2SV_ModStart> ; tok -> type_comment = 0 ; tok ->,0
654,<S2SV_ModStart> maxBitrate ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
655,<S2SV_ModStart> ( dpbSize ) <S2SV_ModEnd> ; dpb ->,0
656,,0
657,,1
658,"<S2SV_ModStart> FALSE ; } if (! <S2SV_ModStart>, s ) ) return FALSE",1
659,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; struct ipv6_txoptions <S2SV_ModStart> flowlabel ) ; <S2SV_ModEnd> if ( fl6,0
660,,0
661,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERPRR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; usleep <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR <S2SV_ModEnd> ) << 8 <S2SV_ModStart> | dm9000ReadReg ( DM9000_EPDRH <S2SV_ModEnd> ) ; }",0
662,<S2SV_ModStart> pcmk_ok ) { free ( private ) ; <S2SV_ModStart> pcmk_ok ) { free ( private ) ; <S2SV_ModStart> pcmk_ok ) { free ( private ) ;,0
663,<S2SV_ModStart> ; msg. msg_namelen = sizeof ( struct sockaddr_storage <S2SV_ModEnd> ) ; if,0
664,,0
665,<S2SV_ModStart> -> size ; if ( h -> size < 0 ) goto error ;,0
666,,0
667,"<S2SV_ModStart> one, offset <S2SV_ModEnd> ; ssize_t count <S2SV_ModStart> ) break ; if ( number_planes_filled > number_planes_filled ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
668,"<S2SV_ModStart> ( b, enc -> type <S2SV_ModEnd> ) )!=",0
669,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
670,"<S2SV_ModStart> client = user_data <S2SV_ModEnd> ; num_clients -- <S2SV_ModStart> num_clients ) ; <S2SV_ModEnd> crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client""",0
671,<S2SV_ModStart> * uv ; <S2SV_ModEnd> for ( uv <S2SV_ModStart> next ) { * p = thread -> twups ;,0
