,raw_predictions,correctly_predicted
0,<S2SV_ModStart> ; if ( n2size < 1 ) <S2SV_ModEnd> { applog (,0
1,<S2SV_ModStart> ( tlen ) ; ND_TCHECK_16BITS ( tptr ) ;,0
2,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
3,<S2SV_ModStart> ; err = kmalloc <S2SV_ModEnd> ; if (,0
4,<S2SV_ModStart> ; if (,0
5,"<S2SV_ModStart>, j ; if (! bytes_count ) return AVERROR_INVALIDDATA ; if (",0
6,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> if ( tp,0
7,,0
8,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
9,<S2SV_ModStart> src ) ; <S2SV_ModEnd> void ) {,0
10,<S2SV_ModStart> c ) { <S2SV_ModEnd> return 0 ;,0
11,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
12,<S2SV_ModStart> skb ) ; if (!,0
13,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, regs",0
14,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_block ( <S2SV_ModStart> ) return 0 ; <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { return ret <S2SV_ModEnd> ; if (,0
15,"<S2SV_ModStart> int input, tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> 4 ] ; tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> 4 ] ; tran_low_t <S2SV_ModEnd> out [ 4 <S2SV_ModStart> 4 ] ; tran_low_t <S2SV_ModEnd> out [ 4 <S2SV_ModStart> 4 ] = input [ 4 ] ; tran_low_t <S2SV_ModEnd> [ 4 ] <S2SV_ModStart> 4 ] = input [ 4 ] ; tran_low_t <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> 0 ] = input [ 4 ] ; tran_low_t <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> 4 ] = input [ 4 ] ; tran_t <S2SV_ModEnd> out [ 4 ] <S2SV_ModStart> 4 ] = input [ 4 ] ; tran_low_t <S2SV_ModEnd> [ 1 ] [ 4 ] <S2SV_ModStart> 4 ] = input [ 4 ] [ 4 ] ; tran_low_t <S2SV_ModEnd> [ 1 ] <S2SV_ModStart> 4 ] = ( tran_t ) <S2SV_ModStart> 4 ] = input [ 4 ] [ 4 ] [ 4 ] [ 4 ] [ 4 ] [ 4 ] [ 4 ] = input ] [ 4 ] [ 4 ] [ 4 ] [ 4 ] [ 4 ] [ 4 ] [ 4 ] ; tran_t ] = ( tran_t ] [ 4 ] [ 4 ]",0
16,<S2SV_ModStart> dev ) ; <S2SV_ModEnd> return - EINVAL,0
17,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
18,"<S2SV_ModStart> ; if ( cgc -> sense_buffer <S2SV_ModEnd> ( cgc, <S2SV_ModStart> cgc -> sense_buffer, cgc -> sense_buffer, cgc -> sense_buffer <S2SV_ModEnd> ) ; if",0
19,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
20,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> intra_frame_frame ( VP9_COMMON * const <S2SV_ModStart> intra_frame_level ) { const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const int layer = & cpi -> common ; MACROBLOCKD * const MACROBLOCKD * const int segment_id = & cpi -> sf ; int layer_id = & cpi -> td. avg_frame ; int layer_frame = & cpi -> last_frame ; int layer_frame = & cpi -> sf_frame_best_frame ; if ( cm -> frame_frame == KEY_FRAME ) { if ( cpi -> oxcf == KEY_FRAME ) { VP9_FRAME ( cpi -> oxcf. avg_frame_frame_frame == KEY_FRAME ) { VP9_FRAME ; return VP9_FRAME ; } # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if (,0
21,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
22,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_write_tree <S2SV_ModEnd> ( w, <S2SV_ModStart> int mv_tree, vpx_read_tree <S2SV_ModEnd> ( w, <S2SV_ModStart> int mv_tree, vpx_tree <S2SV_ModEnd> ( w,",0
23,,0
24,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return - EINVAL,0
25,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> == 0 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_SIZE_64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_SIZE_256 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_SIZE_64 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_SIZE_64 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_SIZE_64 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_BLOCK_SIZE_SIZE_SIZE_256 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_SIZE_256 ; } <S2SV_ModStart> = COAP_BLOCK_SIZE_SIZE_256 ; },0
26,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
27,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",0
28,"<S2SV_ModStart> u_char * dat, length <S2SV_ModStart> ) ) ; if ( length < 2 ) { ND_PRINT ( ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",0
29,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> int alt_null> <S2SV_null>,0
30,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> case 0 : if ( void * p ) return 0 ; <S2SV_ModStart> const char * p = & p <S2SV_ModEnd> ; if (,0
31,,0
32,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
33,<S2SV_ModStart> dev ) ; <S2SV_ModEnd> return - EINVAL,0
34,<S2SV_ModStart> 0 ) { if ( vdaux < 1 ) { goto out_error ; },0
35,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
36,<S2SV_ModStart> = 0 ;,0
37,<S2SV_ModStart> ; if (! sock_flag ( sk ) ) return - EINVAL ; if (,0
38,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
39,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
40,,0
41,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
42,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null> <S2SV_null> static int <S2SV_ModEnd> d_null> <S2SV_null>,0
43,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> sock_sock ( sk ) <S2SV_ModStart> sk ) ; if ( sk ) goto err ; <S2SV_ModStart> sk ) ; if ( <S2SV_ModEnd> sock_safe_sock ( sk <S2SV_ModStart> sk ) ) { <S2SV_ModEnd> sock ( sk <S2SV_ModStart> sk ) ; if ( sk ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> sk ) ; if ( <S2SV_ModEnd> sk ) goto out ; <S2SV_ModStart> sk ) ; err = <S2SV_ModEnd> ; if ( <S2SV_ModStart> sk ) ; if ( <S2SV_ModEnd> sock_unlock_sock ( sk ) <S2SV_ModStart> sk ) ; if ( <S2SV_ModEnd> sk ) goto out ; <S2SV_ModStart> sk ) ; if ( <S2SV_ModEnd> sk ) goto out ;,0
44,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
45,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
46,,0
47,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
48,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
49,"<S2SV_ModStart>, p - p",0
50,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct,0
51,"<S2SV_ModStart> ( ndo, ""%s"",",0
52,"<S2SV_ModStart> ( inode, inode ) <S2SV_ModEnd> ; if (",0
53,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
54,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
55,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> double stats_frame_frame ( const TWO_PASS <S2SV_ModEnd> * const TWO_PASS <S2SV_ModEnd> * twopass, <S2SV_ModStart> ; const TWO_PASS_PASS_PASS_PASS <S2SV_ModEnd> * const FIRSTPASS_STATS <S2SV_ModStart> frame ) { const FIRSTPASS_STATS * const FIRSTPASS_STATS * const FIRSTPASS_STATS * const FIRSTPASS_STATS * const FIRSTPASS_STATS * const FIRSTPASS <S2SV_ModEnd> = 0 ; <S2SV_ModStart> two_frame_stats ( twopass, twopass, twopass, twopass, stats_frame_frame, <S2SV_ModEnd> ) ; return <S2SV_ModStart> frame_frame_stats ( twopass, stats_frame ) ; } <S2SV_ModEnd> if ( twopass <S2SV_ModStart> } else { const double <S2SV_ModEnd> if ( twopass",0
56,<S2SV_ModStart> handle ) { <S2SV_ModEnd> return 0 ;,0
57,<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> size = 0,0
58,<S2SV_ModStart> ( args -> rmtvaluelen <S2SV_ModEnd> ) ; if,0
59,"<S2SV_ModStart> ) ) ; strncpy <S2SV_ModEnd> ( name,",0
60,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
61,,0
62,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
63,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
64,"<S2SV_ModStart> -> procfd ; int procfd = procfd ; int procfd <S2SV_ModEnd> ; int procfd <S2SV_ModStart> ; int procfd = <S2SV_ModEnd> ; int procfd <S2SV_ModStart> exec ; } procfd = procfd -> procfd = procfd ; if ( procfd -> procfd ) { procfd = procfd ; } procfd = procfd -> procfd = procfd ; } procfd = open ( procfd, procfd, procfd, procfd ) ; if ( procfd!= NULL ) { procfd = procfd = - 1 ; } procfd = procfd -> procfd = NULL ; } procfd = procf -> procfd = procfd = procfd ; } procfd = procfd -> procfd = NULL ;",0
65,<S2SV_ModStart> len = 0 <S2SV_ModEnd> ; if (,0
66,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
67,<S2SV_ModStart> dev ) ; sas_destruct_devices ( port ) ;,0
68,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
69,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
70,<S2SV_ModStart> return err ; if (! err ) return - ENODEV ;,0
71,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
72,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
73,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
74,,0
75,<S2SV_ModStart> ) ) ; if ( avio_feof ( pb ) ) return AVERROR_INVALIDDATA ;,0
76,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
77,"<S2SV_ModStart> ; if ( safe_mount <S2SV_ModEnd> ( mnt,",0
78,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
79,<S2SV_ModStart> case 0 : ND_TCHECK2 ( p [ 0 ] ) ;,0
80,,0
81,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
82,"<S2SV_ModStart> ; if (! io_cleanup <S2SV_ModEnd> ( io,",0
83,<S2SV_ModStart> ( value ) { <S2SV_ModEnd> return 0 ;,0
84,<S2SV_ModStart> ret = - EINVAL <S2SV_ModEnd> ; ret =,0
85,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
86,,0
87,<S2SV_ModStart> skb_dev ) ; kfree_skb ( skb ) ;,0
88,"<S2SV_ModStart> * object, <S2SV_ModEnd> const char *",0
89,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
90,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
91,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct <S2SV_ModStart> atomic_set_set_set ( & err ) ; <S2SV_ModEnd> if ( & <S2SV_ModStart> atomic_set ( & <S2SV_ModEnd> rollover ) { <S2SV_ModStart> atomic_long_set ( & <S2SV_ModStart> err ) ; } <S2SV_ModEnd> if ( & <S2SV_ModStart> atomic_set ) { <S2SV_ModEnd> if ( & <S2SV_ModStart> atomic_long_long_set ( & <S2SV_ModStart> atomic_set ) ; rollover = NULL ; rollover = NULL ; } <S2SV_ModEnd> if ( & <S2SV_ModStart> atomic_set ( & <S2SV_ModEnd> rollover -> rollover ) <S2SV_ModStart> atomic_set ( & <S2SV_ModStart> atomic_set ) ; } <S2SV_ModEnd> rollover = NULL <S2SV_ModStart> atomic_set ( &,0
92,<S2SV_ModStart> ( sk ) ; atomic_set ( & skb ) ;,0
93,<S2SV_ModStart> ; if (! free ( page ) ) return NULL ;,0
94,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
95,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
96,"<S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd>, interface, ENC28J60_ECON1 ) <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd>, ENC28J60_ECON1, ENC28J60_ECON1 <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd>, ENC28J60_ECON1, ENC28J60_ECON1 <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_TXQ <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_TXQ <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_TXQ ( interface, ENC28J60_ECON1 <S2SV_ModEnd> ) ) <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_TXQ <S2SV_ModEnd> ) ) ; enc28J60WriteReg ( <S2SV_ModStart> ( interface, ENC28J60WriteReg ( interface, ENC28J60",0
97,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,0
98,<S2SV_ModStart> ) ) { <S2SV_ModEnd> return 0 ;,0
99,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> 0,0
100,<S2SV_ModStart> len ; } ND_TCHECK_16BITS ( p ) ;,0
101,,0
102,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mb_stride ) { vp8x_stride_stride_stride_stride <S2SV_ModEnd> ( mb, <S2SV_ModStart> -> y_stride ) ; memset <S2SV_ModEnd> ( mb, <S2SV_ModStart> -> y_stride ) ; memset <S2SV_ModEnd> ( mb,",0
103,<S2SV_ModStart> return NULL ; <S2SV_ModEnd> return NULL ;,0
104,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> if ( new,0
105,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; struct mb2_cache_cache_cache ( mb2_cache, mb2_cache ( mb2_cache, hash ) ; <S2SV_ModStart> int mb2_cache ( mb2_cache, mb2_cache, mb2_cache, hash <S2SV_ModEnd> ) ; if <S2SV_ModStart> int error ) { <S2SV_ModEnd> if ( error <S2SV_ModStart> ( bh -> bh -> bh -> bh -> b_cache_cache, mb_cache_cache_cache_cache, bh -> b_cache_cache_cache, bh -> b_cache_cache_cache, bh -> b_cache_cache_cache_cache, bh -> b_cache_cache_cache_cache_cache_cache_cache_cache ( bh ) ) ; if ( error == NULL ) { error = NULL ; } else { error ( mb2_cache, ""error"" ) ; return 0 ; } if ( mb2_cache_cache_cache_cache ( mb2_cache, cache ) ) ) {",0
106,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
107,,0
108,<S2SV_ModStart> ; if ( protocol >= IPPROTO_MAX ) return - EINVAL ; if (,0
109,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> skb ) { struct ip_options_rcu <S2SV_ModEnd> * opt =,0
110,,0
111,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
112,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> uint8_tptr ) { if ( pdup_tptr ) { ND_PRINT ( ( ( p ) ) ) { ND_PRINT ( ( ( ( ( ndo, "")"" ) ) ) ; return ; } <S2SV_ModStart> ) ) { ND_PRINT ( ( ( ( ndo, "" <S2SV_blank> %u"" ) ) ) ; return ; } <S2SV_ModStart> ; ND_PRINT ( ( ( ( ( ( ( ndo, "")"" ) ) ) ) ; } <S2SV_ModStart> ) ) { ND_PRINT ( ( ( ( ( ( ( ndo, "")"" ) ) ) ) ) ; return ; }",0
113,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
114,"<S2SV_ModStart> addr_len, 0",0
115,<S2SV_ModStart> char * p ; char * p = p ; char * p ; if ( p == NULL ) return NULL ;,0
116,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & a",0
117,<S2SV_ModStart> return - EINVAL <S2SV_ModEnd> ; if (,0
118,<S2SV_ModStart> length + 1 <S2SV_ModEnd> ) ; if,0
119,,0
120,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
121,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
122,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
123,<S2SV_ModStart> return rc ; <S2SV_ModEnd> if (!,0
124,<S2SV_ModStart> ) ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
125,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
126,<S2SV_ModStart> ; if ( (,0
127,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; if (,0
128,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
129,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
131,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
132,<S2SV_ModStart> == 0 ) ;,0
133,<S2SV_ModStart> file ) ; <S2SV_ModEnd> if ( file,0
134,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 0 ;,0
135,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
136,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> rv_null> <S2SV_null>,0
137,<S2SV_ModStart> ; if (,0
138,,0
139,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
140,<S2SV_ModStart> [ plane ] && in -> linesize [ plane ],1
141,<S2SV_ModStart> ; if (,0
142,<S2SV_ModStart> = 0 ; if ( <S2SV_ModEnd> id == 0,0
143,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> if ( q,0
144,<S2SV_ModStart> ; inet_opt <S2SV_ModEnd> ; if (,0
145,,0
146,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
147,<S2SV_ModStart> = addr ; <S2SV_ModEnd> if ( addr,0
148,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> Site3S2SV_null> static int <S2SV_ModEnd> read_table_table ( struct,0
149,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> if (!,0
150,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
151,,0
152,"<S2SV_ModStart> & fl6, rcu_dereference (",0
153,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
154,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
155,"<S2SV_ModStart> ( packet = NULL,",0
156,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
157,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
158,<S2SV_ModStart> sec ) ; <S2SV_ModEnd> return 0 ;,0
159,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> 0,0
160,<S2SV_ModStart> ) ) { <S2SV_ModEnd> return 0 ;,0
161,<S2SV_ModStart> return - ENOMEM <S2SV_ModEnd> ; if (,0
162,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
163,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
164,"<S2SV_ModStart> CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> CVAR_LATCH ) ; if ( COM_CompareExtension ( s_alDriver -> string, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", s_alDriver -> string ) ; return qfalse ; }",1
165,<S2SV_ModStart> ; hdr = 0 <S2SV_ModEnd> ; hdr ->,0
166,<S2SV_ModStart> -> peer. auth_capable = new -> peer. auth_capable ;,0
167,<S2SV_ModStart> ( msg ) <S2SV_ModEnd> ; if (,0
168,<S2SV_ModStart> = 0 ; int fd = - 1 ; <S2SV_ModStart> = '\\0' ; if ( ret == - 1 ) { <S2SV_ModEnd> return - 1 ; <S2SV_ModStart> = 0 ; if ( ret == - 1 ) { <S2SV_ModStart> = - 1 ; } <S2SV_ModEnd> return - 1 ;,0
169,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
170,"<S2SV_ModStart> ( event, <S2SV_ModEnd> regs, regs",0
171,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = cpi -> twopass ; int <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; int <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; if ( cpi -> oxcf. gf_level > 0 ) { <S2SV_ModStart> = 0 ; } <S2SV_ModEnd> } <S2SV_null>,0
172,"<S2SV_ModStart> ) ) { memset ( p, 0, 0, sizeof ( * num ) ) ;",0
173,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct <S2SV_ModStart> * ext4_xattr_cache ( struct mb2_cache * mb2_cache * ext4_mb_cache <S2SV_ModEnd> ; struct mb2_cache <S2SV_ModStart> ) ) { struct mb2_cache * ext4_xattr_cache = <S2SV_ModStart> ) ) { struct mb2_cache * ext4_mb_cache_cache ; struct mb2_cache * ext4_mb_cache = NULL ; struct mb2_cache * ext4_mb_cache_cache_cache = NULL ; struct mb2_cache_cache * ext2_cache_cache_cache ( inode ) ; mb2_cache_cache ( inode ) ; mb2_cache ( inode ) ; mb2_cache ( inode ) ; mb2_cache = mb2_cache ( inode -> i_sb ) ; mb2_cache_cache_cache_cache ( inode -> i_sb ) ; if (! inode -> i_sb ) { mb2_cache_sb ( inode ),0
174,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_chunk_t <S2SV_ModStart> err ) { int ret <S2SV_ModStart> err ; return ERROR_INFO_INFO_INFO * err <S2SV_ModEnd> ; if (,0
175,,0
176,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
177,,0
178,<S2SV_ModStart> ; if ( <S2SV_ModEnd> err < 0,0
179,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> int jas_matind_t <S2SV_ModStart> hdr ) { jas_matind_t <S2SV_ModEnd> hdr ; <S2SV_ModStart> hdr ) { jas_buf [ jas_matind_t <S2SV_ModEnd> j ; jas_matind_t <S2SV_ModStart> hdr ) ; jas_matrix_size = 0 ; if ( jas_size < 2 ) { jas_matind_t <S2SV_ModEnd> buf [ jas_matind_t <S2SV_ModStart> hdr ) { jas_matind_t <S2SV_ModEnd> buf [ jas_matind_t <S2SV_ModStart> ( jas_t ) ; jas_matrix_t <S2SV_ModEnd> ; if (,0
180,"<S2SV_ModStart>, height, sun_info. depth <S2SV_ModEnd> ) ; if",0
181,"<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, number_filled, number_filled ) <S2SV_ModEnd> ; number_filled = <S2SV_ModStart> -> rows * number_filled <S2SV_ModEnd> ; number_filled =",0
182,,0
183,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
184,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> if ( pid,0
185,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
186,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) ; int",0
187,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
188,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> if ( q,0
189,"<S2SV_ModStart> ( ) ; # if CONFIG_VP9_COMMON * dir_init ( LOG_DEBUG, ""init"" ) ; # endif",0
190,<S2SV_ModStart> dir ) { <S2SV_ModEnd> char * dir,0
191,<S2SV_ModStart> mnt ) ; <S2SV_ModEnd> if ( m,0
192,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> if (!,0
193,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return NULL ;,0
194,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
195,,0
196,"<S2SV_ModStart> ( fmode, ""\\n"" <S2SV_ModEnd> ) ) ; if",0
197,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
198,<S2SV_ModStart> hdr ) ; <S2SV_ModEnd> if ( hdr,0
199,,0
200,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_VP9_HIGHBITDEPTH <S2SV_ModEnd> * const <S2SV_ModStart> src_buf_stride ) { const uint8_t <S2SV_ModEnd> const int <S2SV_ModStart> const vp9_buffer <S2SV_ModEnd> ( src, <S2SV_ModStart> src -> vp9_highbd_buffer, vp9_highbd_stride, vp9_highbd_stride <S2SV_ModEnd> ( src,",0
201,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
202,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
203,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
204,<S2SV_ModStart> ; if ( offset < 0 ) {,0
205,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
206,<S2SV_ModStart> ; msg -> msg_namelen = 0 ;,0
207,,0
208,"<S2SV_ModStart> val, regs <S2SV_ModEnd> ) ; }",0
209,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
210,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ; if ( _PyObject * <S2SV_ModEnd> ( c ) <S2SV_ModStart> ; if (! strlen ( c ) ) return NULL ; <S2SV_ModStart> ; if ( c == NULL ) { PyExc_TypeError, ""inode"" ) ; } if ( c == NULL ) { PyExc_TypeError ( c ) ; return NULL ; } if ( c == NULL ) { Py_CLEAR ( c ) ; if ( * ) return NULL ; } if ( c == NULL ) { Py_CLEAR ( c == NULL ) return NULL ; } if ( <S2SV_ModStart> * ) { PyErr ) { PyExc_TypeError, ""invalid <S2SV_blank> from <S2SV_blank> name"" ) ; return NULL ; } if (! c ) return NULL ; } if ( c == NULL ) { PyExc_TypeError ( c ) ; } <S2SV_ModEnd> if (",0
211,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
212,,0
213,"<S2SV_ModStart> ; if ( key_is_key <S2SV_ModEnd> ( key,",0
214,<S2SV_ModStart> len += 1 <S2SV_ModEnd> ; if (,0
215,,0
216,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
217,<S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( sun_info,0
218,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
219,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ;,0
220,<S2SV_ModStart> } if ( <S2SV_ModEnd> udp_specified && settings,1
221,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
222,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
223,<S2SV_ModStart> data ) ; <S2SV_ModEnd> return NULL ;,0
224,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_event",0
225,<S2SV_ModStart> ( net -> uid <S2SV_ModEnd> ) ) return,0
226,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
227,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> size ; int <S2SV_ModStart> 0 ) { ret = - EINVAL ; goto err ; } <S2SV_ModEnd> if ( * <S2SV_ModStart> 0 ) ; if ( ret == 0 ) { ret = - 1 ; goto err ; } <S2SV_ModEnd> if ( <S2SV_ModStart> 1 ] = - 1 ; if ( ret!= 0 ) { ret = - ENOMEM ; goto err ; } ret = - EIO ; goto err ; } <S2SV_ModEnd> if (,0
228,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) ) { ND_PRINT ( ( 2 ) ) ; ND_PRINT ( ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 2 ) { ND_PRINT ( ( ( ndo, ""AVP <S2SV_blank> short"" ) ) ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } ND_PRINT ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModEnd> ND_16BITS ( <S2SV_ModStart> ) ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> short"" ) ; return ; }",0
229,<S2SV_ModStart> goto done ; <S2SV_ModEnd> if (!,0
230,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
231,<S2SV_ModStart> endif #,0
232,<S2SV_ModStart> ) ) ; if ( ext4_mb_get_block ( inode ) ) { ext4_mb_write ( inode ) ; },0
233,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
234,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
235,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
236,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
237,<S2SV_ModStart> skb ) ; if (!,0
238,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
239,<S2SV_ModStart> len ) ; <S2SV_ModEnd> return 0 ;,0
240,<S2SV_ModStart> sk ) ; <S2SV_ModEnd> return 0 ;,0
241,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } while,1
242,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> const int,0
243,"<S2SV_ModStart> ; buf = NULL <S2SV_ModEnd> ; if ( <S2SV_ModStart>, buf ) ) <S2SV_ModEnd> ; if (",0
244,<S2SV_ModStart> out_free ; } else if ( kvm ) goto out ;,0
245,"<S2SV_ModStart>, err, false",0
246,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
247,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( jas_memc ) ; if ( len < 0 ) { if ( len < 0 ) { ND_PRINT ( ( ( ndo, ""\\n"" ) ) ) ; if ( len < 0 ) { if ( len < 0 ) { ND_PRINT ( ( ( ( ndo, ""\\n"" ) ) ) ; return 0 ; } if ( ( len < 0 ) ) { ND_PRINT ( ( ( ndo, ""\\n"" ) ) ) ; if ( len < 0 ) { ND_PRINT ( ( ( ndo, ""\\n"" ) ) ) ; if ( len < 0 ) { ND_PRINT ( ( ( ndo, "" <S2SV_blank> %u <S2SV_blank> %d\\n"", "" <S2SV_blank> %u <S2SV_blank> %u\\n"", len ) ) ; return 0 ; } if ( len < 0 ) ) { if ( len < 0 ) { if ( len < 0 ) { if ( len < 0 ) { ND_PRINT ( ndo, ""\\n"" ) ) ; } <S2SV_ModEnd> == 0 ) { <S2SV_ModStart>",0
248,,0
249,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi ->,0
250,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
251,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
252,,0
253,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
254,<S2SV_ModStart> length ) { <S2SV_ModEnd> return 0 ;,0
255,<S2SV_ModStart> size ) { size_t <S2SV_ModEnd> size = 0,0
256,,0
257,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ; if ( CHILD ( CHILD ( CHILD ( CHILD ( n ) == 0 ) == 0 ) { CHILD ( n, CHILD ( n, CHILD ( n, 1 ) ) ) ; assert ( CHILD ( n, 0 ) == 0 ) ; if ( CHILD ( CHILD ( CHILD ( n ) == 0 ) == 0 ) { assert ( CHILD ( n, 0 ) == 0 ) ; } if ( CHILD ( CHILD ( CHILD ( n, CHILD ( n, CHILD ( n ) == 0 ) ) == CHILD ( CHILD ( n, 0 ) ) == CHILD ( CHILD ( n, 1 ) ) ) == CHILD ( CHILD ( n, 0 ) ) == CHILD ( n, 1 ) ) ) == CHILD ( CHILD ( CHILD ( n, 0 ) == CHILD ( n, 0 ) ) == 0 ) return NULL ; if ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( n, 1 ) == CHILD ( n, 0 ) == 0 ) ==",0
258,,0
259,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static VP9_COMMON * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const xd = & xd -> mbmi ; MACROBLOCKD * const xd = & xd -> mbmi. mbmi ; const int xd -> mbmi. mbmi. mbmi. mbmi. mbmi_ext = xd -> mbmi. mbmi. mbmi. mbmi. mb_ext ; const int xd -> mbmi_ext = xd -> mbmi_ext ; const int bsize = x -> mbmi_ext ; const int bsize = xd -> mbmi_ext ; const int xd -> mbmi. segment_mode == BLOCK_SIZE ( cm -> mbmi ) ; const int bsize = xd -> mbmi_mode = xd,0
260,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
261,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
262,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
263,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
264,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> break ; },0
265,<S2SV_ModStart> ; } } if (,0
266,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
267,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
268,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> dev ) { int ret = kmalloc ( GFP_KERNEL ) ; return - ENOMEM <S2SV_ModEnd> ; } <S2SV_null>,0
269,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
270,<S2SV_ModStart> buf + 2 <S2SV_ModEnd> ) ; if,0
271,<S2SV_ModStart> FALSE ) ; if (! ctx -> ctx. pS2SV_null>,0
272,<S2SV_ModStart> length ) { if ( rlen < 0 ) return ;,0
273,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
274,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> if (!,0
275,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
276,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
277,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
278,<S2SV_ModStart> net ) ; <S2SV_ModEnd> if ( netb,0
279,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
280,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
281,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> p_tx_tx_tx_tx ( struct <S2SV_ModStart> idx ) { uint32_t * tx_t <S2SV_ModEnd> ; uint32_t <S2SV_ModStart>, tx_idx ) ; if ( pending_idx == 0 ) { <S2SV_ModStart> == 0 ) { if ( pending_idx == 0 ) { if ( pending_idx >= pending_idx ) { net_tx_idx ) { net_tx_idx = get_id ( net_idx ) ; net_idx, pending_idx, pending_idx ) ; } <S2SV_ModStart> == 0 ) { net_idx ) { if ( pending_idx ) { net_idx >= pending_id_tx_idx ) { net_idx ) { net_id = req ; } <S2SV_ModEnd> ( netidx, <S2SV_ModStart> ctx -> tx_id ) ; if ( pending_idx >= pending ) { net_idx >= pending_idx ) { net_idx ) { <S2SV_ModStart> ( net_id ) ; } <S2SV_ModEnd> p_idx,",0
282,,1
283,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
284,<S2SV_ModStart> = 0 ; struct sockaddr_t * addr_p = 0 ; <S2SV_ModStart> ; if ( len < 0 ) { err = - 1 ; goto err ; },0
285,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
286,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
287,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
288,"<S2SV_ModStart>, flen, flen <S2SV_ModEnd> ) ; if",0
289,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
290,"<S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
291,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if (,0
292,<S2SV_ModStart> * fc ; <S2SV_ModEnd> if (!,0
293,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
294,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
295,<S2SV_ModStart> = MagickFalse ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( image ->,0
296,<S2SV_ModStart> 0 ) ; if ( avio_feof ( s -> pb ) ) { ret = AVERROR_INVALIDDATA ; goto end ; },1
297,<S2SV_ModStart> return - EIO ; if ( ret < 0 ) return - EINVAL ;,0
298,,0
299,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, NULL )",0
300,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return 0 ;,0
301,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> if (!,0
302,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
303,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
304,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
305,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> int len ; <S2SV_ModStart> offset ) { struct ipv6_hdr <S2SV_ModEnd> * ipv6_hdr <S2SV_ModStart> ; unsigned int len = ipv6_hdr <S2SV_ModStart> offset ; unsigned int len <S2SV_ModEnd> offset ; unsigned <S2SV_ModStart> offset ) ; if ( len < sizeof ( * ipv6_to_hdr ) ) return 0 ; <S2SV_ModStart> ; if ( len < sizeof ( * ipv6_hdr ) ) return - EINVAL ; } if ( len < sizeof ( * ipv6_hdr ) ) return - EINVAL ; * ipv6_len = sizeof ( ipv6_to_hdr ) ; * ipv6_len = ipv6_len ; * ipv6_len = ipv6_len = sizeof ( ipv6_hdr ) ; * ipv6_len = ipv6_hdr ; * ipv6_len = sizeof ( ipv6_hdr ) ; * ipv6_hdr = sizeof ( ipv6_hdr ) ; * ipv6_get_hdr,0
306,"<S2SV_ModStart> vp9_write_literal ( wb, vpx_write_literal <S2SV_ModEnd> ( wb,",0
307,"<S2SV_ModStart>, mv, int mv",0
308,<S2SV_ModStart> 0 ; } <S2SV_ModEnd> return 0 ;,0
309,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
310,,0
311,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
312,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> asconf_chunk_t <S2SV_ModEnd> hdr ) { struct sctp_addip_chunk <S2SV_ModStart> asconf ) { struct sctp_addip_chunk_addip_chunk_t * addip = sctp_chunk_t * addip_chunk_t * addip_params ( sctp_chunk_t ) ; sctp_params ( sctp_addip_chunk_t ) ; if ( param == SCTP_ADDRESS || param. addip_params. addip_param_params. params. addip_params. addip_code == SCTP_ADDRESS ) { if ( err_code == SCTP_PARAM_ADDRESS || param. params. addip_code == SCTP_PARAM_ADDRESS ) return err_ADDRESS ; } if ( err_code == SCTP_PARAM_ADDRESS ) { if ( param. addip_param_param_code == SCTP_,0
313,,0
314,<S2SV_ModStart> exit ; } m -> msg_namelen = 0 ;,0
315,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> switch ( kvm,0
316,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
317,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
318,<S2SV_ModStart> dev ) { mutex_lock ( & mutex_lock <S2SV_ModEnd> ) ; mutex_lock,0
319,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return NULL ;,0
320,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> sock ( struct,0
321,<S2SV_ModStart> ; if (,0
322,"<S2SV_ModStart> data ) { u8 * buf ; int ret = kmalloc ( size, GFP_KERNEL ) ; if (! data ) return - ENOMEM <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>",0
323,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return NULL ;,0
324,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
325,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct,0
326,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, cfg ->",0
327,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
328,<S2SV_ModStart> ; if ( unlikely ( hdr ) ) { ret = - ENOMEM ; goto out_unlock ; },0
329,<S2SV_ModStart> keyring ) { <S2SV_ModEnd> return 0,0
330,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
331,<S2SV_ModStart> * mrb1 ; <S2SV_ModEnd> if ( mrb <S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( mrb2,0
332,,0
333,"<S2SV_ModStart> cpi, vpx_writer <S2SV_ModEnd> * cpi ->",0
334,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
335,"<S2SV_ModStart> ctxt ) { struct x86_emulate_ops * ops = cpl ( cpl, VCPU_SREG_CS ) ; if ( rc!= X86EMUL_CONTINUE ) { rc = X86EMUL_CONTINUE ; rc = X86EMUL_CONTINUE ; rc = X86EMUL_CONTINUE ; rc = X86EMUL_CONTINUE ; rc = cpl ( ctxt, VCPU_CS ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; rc = X86EMUL_CONTINUE ; rc = X86EMUL_CONTINUE ; rc = assign_far ( ctxt, VCPU_SREG_CONTINUE ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; rc = X86EMUL_CONTINUE ; rc = X86EMUL_CONTINUE <S2SV_ModEnd> ; rc",0
336,"<S2SV_ModStart> 0 ) { if ( comp -> comps!= 0 ) { av_log ( comp -> comps -> comps, comps -> comps ) ; return ERROR ; }",0
337,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) return ;",0
338,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
339,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) ) )",0
340,"<S2SV_ModStart> p_image, p_image_t p_size, p_t <S2SV_ModEnd>, p_image, <S2SV_ModStart> p_size, p_t <S2SV_ModEnd> ) ; if",0
341,"<S2SV_ModStart> char * fname, char * fname <S2SV_ModEnd>, char * <S2SV_ModStart> ( fname, fname <S2SV_ModEnd>, strlen ( <S2SV_ModStart> ( fname, <S2SV_ModEnd>, '/' )",0
342,<S2SV_ModStart> ; if ( zval_hash_hash ( zval ) == NULL ) { Z_DVALID_DVALID_DATA ( ZVAL ) ; zval = Z_DVAL_DVALID_HASH ( * ) ; zval = ZVALID_DVAL ( zval ) ; zval ; zval_hash = 0 ; zval_hash = 0 ; zval_hash_t <S2SV_ModEnd> ; if (,0
343,<S2SV_ModStart> -> private_data ; <S2SV_ModEnd> return err ;,0
344,"<S2SV_ModStart> ) ) { GF_ISOM_ISOM_INVALID_SIZE ( ptr, 1 )",0
345,<S2SV_ModStart>. get_alg_priv ( ctx ),0
346,<S2SV_ModStart> )!= NULL <S2SV_ModEnd> ) { int,0
347,<S2SV_ModStart> ; if ( <S2SV_ModEnd> p -> p,0
348,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> int cr ; int <S2SV_ModStart> int x ; int <S2SV_ModEnd> maxh ; int <S2SV_ModStart> max ) ; size_t <S2SV_ModEnd> maxw = 0 ; int <S2SV_ModStart> max ) ; size_t <S2SV_ModEnd> maxw = 0 ; int <S2SV_ModStart> max ) ; size_t <S2SV_ModEnd> maxw = 0 ; <S2SV_ModStart> max ) ; size_t <S2SV_ModEnd> maxw = img -> comps [ 0 ] ; <S2SV_ModStart> max ) ; if ( comps [ 0 ] == 0 ) { img -> comps [ 0 ] = img -> comps [ 0 ] = ( int ) ; img -> comps [ 0 ] = ( int ) ; img -> comps [ 0 ] = img -> comps [ 0 ] = img -> comps [ 0 ] ; img -> comps [ 0 ] = ( int ) ; img -> comps [ 0 ] = ( int ) ; img -> comps [ 0 ] = ( int ) ; img -> comps [ 0 ] = ( int ) ; img -> comps [ 0 ] = img -> comps [ 0 ] = img -> comps [ 0 ]. b ; img -> comps [ 0 ],0
349,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> * state, fmode ) { if ( fmode == fmode ) { fmode = open ( fmode, fmode ) ; }",0
350,<S2SV_ModStart> ; if (,0
351,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static assert_assert_rule ( ""import <S2SV_blank> import <S2SV_blank> import <S2SV_blank> import <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> import <S2SV_blank> <S2SV_blank> <S2SV_blank> tests: <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> tests: <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> constants.constants.constants.constants.constants.constants.constants.constants.constants.constants.constants_constants.constants.constants_rule ( ""import <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> tests: <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> tests: <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> tests <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> constants.constants.constants.constants.constants.constants.constants.constants.constants.constants.constants.constants.constants_constants.constants_constants_constants_constants_true_rule ( ""import <S2SV_blank> constants.constants, <S2SV_blank> import <S2SV_blank> import <S2SV_blank>",0
352,<S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( c,0
353,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
354,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = 0 ; int ret <S2SV_ModEnd> ; dev_set ( <S2SV_ModStart> dev ) ; if (! dev ) return - ENOMEM <S2SV_ModEnd> ; dev <S2SV_ModStart> = 0 ; return ret <S2SV_ModEnd> ; } <S2SV_null>,0
355,,0
356,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
357,"<S2SV_ModStart>, e -> e ->",0
358,<S2SV_ModStart> 1 ) { if ( c -> height <= 8 ) return AVERROR_INVALIDDATA ;,0
359,"<S2SV_ModStart> p, length <S2SV_ModEnd> ) ; if",0
360,,0
361,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> inode ( page,0
362,<S2SV_ModStart> NULL ) ; <S2SV_ModEnd> if (!,0
363,<S2SV_ModStart> char * name <S2SV_ModEnd> ; if (,0
364,<S2SV_ModStart> == 0 ) <S2SV_ModEnd> ; xdr ->,0
365,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
366,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <SV_null> <S2SV_null>,0
367,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
368,<S2SV_ModStart> ; vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> ; if (,0
369,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
370,"<S2SV_ModStart> ( interface, TEMP_FAILURE_RETRY <S2SV_ModEnd>, &",0
371,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> if (!,0
372,<S2SV_ModStart> len ; } ND_TCHECK_16BITS ( p ) ;,0
373,<S2SV_ModStart> ; } } if (,0
374,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
375,<S2SV_ModStart> return - EINVAL ; <S2SV_ModEnd> if ( bp,0
376,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
377,<S2SV_ModStart> ; dlen -= 3 <S2SV_ModEnd> ; if (,0
378,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
379,<S2SV_ModStart> ( r = 0 <S2SV_ModEnd> ; if (,0
380,<S2SV_ModStart> goto out ; <S2SV_ModEnd> if ( sk,0
381,<S2SV_ModStart> skb -> len <S2SV_ModEnd> ; if (,0
382,"<S2SV_ModStart>, arg -> <S2SV_ModEnd> ) ; }",0
383,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
384,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int tile_buffsize ; tile_buffsize = 0 ; tile_buffsize = 0 ; tile_buffsize = 0 ; tile_buffsize = 0 ; tile_buffsize = 0 ; tile_buffsize = 0 ; tile_buffsize = 0 ; tile_buffsize = 0 ; tile_buffsize = 0 ; tile_buffsize = 0 ; tilebuf [ tile_buffsize ] = 0 ; tilebuf [ tile_buffsize ] = 0 ; tilebuf [ tile_buffsize ] = 0 ; tilebuf [ tile_buffsize ] = 0 ; tilebuf [ tile_buffsize ] = 0 ] = 0 ; if ( tile_buffsize < 0 ) { TIFFError ( tilebuf [ tile_buffsize + 1 ] = 0 ; tile_buffsize = 0 ; tilebuf [ tilebuf [ tile_buffsize ] = 0 ; tilebuf [ tile_buffsize ] = 0 ; tilebuf [ tilebuf [ tile_buffsize ] = 0 ; tilebuf [ tile_buffsize ] = 0 ; tilebuf [ tilebuf [ tile_buffsize,0
385,<S2SV_ModStart> ; if ( is_mode == NULL ) { break ; },0
386,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
387,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> node -> c2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
388,<S2SV_ModStart> ( fp <S2SV_ModEnd> ) ) {,0
389,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
390,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> sock_sock ( sk ) <S2SV_ModEnd> skb_set_net ( sk ) <S2SV_ModStart> sk ) ; if ( sk ) goto err ; <S2SV_ModStart> sk ) ; if ( <S2SV_ModEnd> sock_sock_sock ( sk ) <S2SV_ModStart> sk ) { <S2SV_ModEnd> sk ) { <S2SV_ModStart> sk ) ; },0
391,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
392,"<S2SV_ModStart>, fmode, fc <S2SV_ModEnd> ) ; if",0
393,"<S2SV_ModStart> ( ndo, ""%s"", tlen <S2SV_ModEnd> ) ) ; if",0
394,"<S2SV_ModStart> int n, jas_ulonglong <S2SV_ModEnd> val ) {",1
395,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0 ;,0
396,<S2SV_ModStart> inode ) ; if ( ret < 0 ) { ret = - EINVAL ; ret = - EINVAL ; ret = - 1 ; ret = - EFAULT ; ret = - EFAULT ; },0
397,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
398,<S2SV_ModStart> -> privs_u32 <S2SV_ModEnd> ) ) { <S2SV_ModStart> return 0 ; } <S2SV_ModEnd> if ( r,0
399,"<S2SV_ModStart>, NULL, NULL <S2SV_ModEnd> ) ; default",0
400,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ND_PRINT (,0
401,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
402,,0
403,<S2SV_ModStart> { return NULL <S2SV_ModEnd> ; if (,0
404,<S2SV_ModStart> ( image ) { <S2SV_ModEnd> return 0 ;,0
405,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
406,<S2SV_ModStart> ; if ( <S2SV_ModEnd> pc -> desc.,0
407,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> d_null> struct <S2SV_ModStart> dev ) { mutex_unlock ( & d -> dev -> dev -> dev <S2SV_ModStart> dev, & d -> int <S2SV_ModEnd> dev -> int <S2SV_ModStart> dev ) ; if (! d -> int ) return - ENODEV ; dev -> dev -> d_err ( & dev -> dev -> int ) ; if (! d -> dev -> dev -> dev ) return - ENODEV ; return - ENODEV ; dev -> dv [ 1 ] = - ENODEV ; if (! dev -> dev -> dev -> dev -> flags &= NULL ) return - ENODEV ; } <S2SV_ModEnd> ; dev ->",0
408,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static if ( JAS_CAST ( JAS_CAST ( JAS_CAST ( JAS_CAST ( JAS_CAST ( JAS_CAST ( JAS_CAST ( JAS_CAST ( JAS_CAST ( uint_fast32_fast32_fast32_t, JAS_CAST ( JAS_CAST ( JAS_CAST ( JAS_CAST ( JAS_CAST ( JAS_CAST ( uint_fast32_fast32_fast32_fast32_fast32_fast32_t, 1 ) ) ) ) ; if ( JAS_CAST ( JAS_CAST ( JAS_CAST ( JAS_CAST ( JAS_CAST ( JAS_CAST ( JAS_CAST ( uint_fast32_fast32_fast32_fast32_fast32_fast32_fast32_t, 1 ) ) ) ) % ( JAS_CAST ( JAS_CAST ( JAS_CAST ( JAS_CAST ( uint_fast32_fast32_fast32_fast32_fast32_fast32_fast32_fast32_fast32_",0
409,"<S2SV_ModStart>, cip, true",0
410,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> x2S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart>, image ) ; if ( x <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null> static <S2SV_ModStart> null> <S2SV_null> static <S2SV_ModEnd> 2S2SV_null> <S2SV_null>",0
411,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct,0
412,<S2SV_ModStart> ctxt ) ; rc = X86EMUL_CONTINUE ; <S2SV_ModStart> == 0x ) rcx <S2SV_ModEnd> ; rcx = <S2SV_ModStart> ; rcx ) rcx = <S2SV_ModStart> ; rcx ) rcx = <S2SV_ModStart> ; rcx ) ; rdx = <S2SV_ModEnd> ; rcx = <S2SV_ModStart> ; rcx ) return rcx <S2SV_ModEnd> ; rcx,0
413,"<S2SV_ModStart> ( dev, ""%s"" <S2SV_ModEnd> ) ; return",0
414,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> out = 0,0
415,"<S2SV_ModStart>, NULL, NULL <S2SV_ModEnd> ) ; }",0
416,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
417,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( rc,0
418,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct,0
419,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
420,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
421,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct <S2SV_ModStart> inode ) { if ( unlikely ( unlikely ( page ) ) { ret = - ENODEV ; <S2SV_ModStart> page ) ; if ( unlikely ( page ) ) { ret = - EINVAL ; goto out_put_page ( page ) ; } <S2SV_ModStart> page ) ; if ( page ) return - EINVAL ; },0
422,"<S2SV_ModStart> ( ndo, ""%s"",",0
423,,0
424,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 2S2SV_null> <S2SV_null> static tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> = input, tran_low_t <S2SV_ModEnd> x0 ] ; tran_t <S2SV_ModEnd> x0 ] ; tran_low_t <S2SV_ModStart> 0 ] ; tran_t <S2SV_ModEnd> x5 ] ; tran_low_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 4 ] ; tran_t <S2SV_ModEnd> x4 ] ; tran_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 4 ] ; tran_low_t <S2SV_ModEnd> x4 = input <S2SV_ModStart> 4 ] ; tran_low_t <S2SV_ModEnd> x4 ] = input <S2SV_ModStart> 4 ] ; tran_t <S2SV_ModEnd> x4 ] ; tran_low_t <S2SV_ModEnd> output ( tran_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) <S2SV_ModStart> 4 ] = ( tran_low_t ) ; tran_t )",0
425,<S2SV_ModStart> ; # endif # ifdef CONFIG_VP9_HIGHBITDEPTH_HIGHBITDEPTH if ( flags &= ~ ( flags &= ~ ( flags &= ~ 0 ) ) ;,0
426,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
427,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
428,"<S2SV_ModStart> tot_len ) ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
429,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( p,0
430,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
431,<S2SV_ModStart> mnt_flags |= MNT_NODEV ; if ( mnt -> mnt. mnt_flags & MNT_NOEXEC ) mnt -> mnt. mnt. mnt_flags |= MNT_NOEXEC ; if ( mnt -> mnt. mnt_flags & MNT_NOSUID ) mnt -> mnt. mnt_flags |= MNT_LOCK_NODEV ; if ( mnt -> mnt. mnt_flags & MNT_NODEV ) mnt_flags |= MNT_NOSUID ; if ( mnt -> mnt. mnt_flags & MNT_NOEXEC ) mnt_flags |= MNT_NOEXEC ; if ( mnt -> mnt -> mnt. mnt_flags & MNT_NOEXEC ) mnt_flags |= MNT_NOEXEC ; if ( mnt_flags & MNT_NOEXEC ) { if ( mnt -> mnt. mnt_flags & MNT_NOEXEC ) mnt_flags |= MNT_NOEXEC |= MNT_NOEXEC,0
432,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
433,<S2SV_ModStart> * rsize >= 31 <S2SV_ModEnd> && rdesc [,0
434,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
435,,0
436,"<S2SV_ModStart> ( ndo, ""%s"" <S2SV_ModEnd> ) ) ; if",0
437,<S2SV_ModStart> uint16_t *,0
438,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mi_colsse ( MACROBLOCKD * xd, MACROBLOCKD * xd, <S2SV_ModEnd> int mi_cols, <S2SV_ModStart> ; MACROBLOCKD * xd = xd ->",0
439,,0
440,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( mb,0
441,<S2SV_ModStart> return 0 ; if ( derlen < 0 ) { OPENSSL_S2SV_null> <S2SV_null>,0
442,"<S2SV_ModStart> NULL, rv, NULL <S2SV_ModEnd> ) ; }",0
443,<S2SV_ModStart> bmp ) ; <S2SV_ModEnd> return NULL ;,0
444,<S2SV_ModStart> ; u32 oe_socklen = 0 ; struct oe_sockaddr * p <S2SV_ModEnd> ; struct oe_sockaddr * <S2SV_ModStart> ; struct oe_sockaddr * p ; if ( p -> oe_sockaddr_socklen ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if (,0
445,"<S2SV_ModStart> { if ( osStrchr <S2SV_ModEnd> ( token,",0
446,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
447,"<S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> coef_probsize,",0
448,"<S2SV_ModStart> data ) { u8 * data ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! data ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, buf, GFP_NOIO ) ; <S2SV_ModEnd> return 0 ;",0
449,<S2SV_ModStart> * p ; <S2SV_ModEnd> return NULL ;,0
450,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
451,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int i ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( ctx -> flags & ctx -> flags & ctx -> flags & ctx -> flags & YV12_FLAG_HIGHBITDEPTH ) { return 0 ; } <S2S2SV_null> <S2SV_null> <S2SV_null>,0
452,<S2SV_ModStart> ) ; } <S2SV_ModEnd> return rc ;,0
453,<S2SV_ModStart> ( code ) <S2SV_ModEnd> ; if (,0
454,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
455,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> if ( s,0
456,<S2SV_ModStart> ; if ( len < 0 ) return ;,0
457,<S2SV_ModStart> data ) { <S2SV_ModEnd> return 0 ;,0
458,<S2SV_ModStart> ; if ( key_is_key <S2SV_ModEnd> ( key ),0
459,<S2SV_ModStart> ; if (,0
460,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
461,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> uint32_t h,0
462,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return - EINVAL ;,0
463,<S2SV_ModStart> ; if (,0
464,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return 0 ;,0
465,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
466,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> cpi ) { const VP9_COMP_COMMON * const VP9_COMMON * const MACROBLOCKD * const cm = cpi -> common ; const VP9_COMMON * const VP9_COMMON * const int cpi -> common ; const int cpi -> oxcf = cpi -> oxcf. bit_depth ; const int bit_depth = ( cm -> bit_depth, cm -> bit_depth ) ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. bit_depth ) { const int bit_depth = cm -> bit_depth ; return ; } else if ( cm -> bit_depth, cm -> bit_depth, cm -> bit_depth, cm -> bit_depth, cm -> bit_depth, cm -> bit_depth ) ; const int bit_depth = cm -> bit_depth <S2SV_ModStart> cm -> bit_depth ; const int bit_depth <S2SV_ModEnd> cm -> bit_depth <S2SV_ModStart>",0
467,<S2SV_ModStart> ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ),0
468,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
469,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
470,<S2SV_ModStart> void usage_exit ( void,1
471,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
472,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
473,<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> ; if (,0
474,,0
475,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct,0
476,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) return ;",0
477,"<S2SV_ModStart> ( ndo, ""%s"",",0
478,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
479,<S2SV_ModStart> ( r ) <S2SV_ModEnd> ; if (,0
480,<S2SV_ModStart> 0 ) { zval = * zval ; zval = Z_FALSE ; zval_DVAL ( zval ) ; zval = Z_DVAL ( zval ) ; zval = Z_DVAL ( zval ) ; zval = Z_DVAL ( zval ) ; zval ; zval = & zval ; zval ; zval = zval ; zval ( Z_FALSE ; zval ) ; zval = Z_FALSE ; zval ( & zval ) ; zval ) ; zval = Z_DVAL ( zval ) ; zval = Z_DVAL ( zval ) ; zval ) ; zval = Z_DVAL ( zval ) ; zval ) ; zval = Z_FALSE ; zval ( zval ) ; zval ) ; zval = Z_DVAL ( zval ) ; zval ) ; zval = Z_FALSE ; zval ( zval ) ; zval ) ; zval = Z_FALSE ; zval = Z_FALSE ; zval ( & zval ) ; zval ) ; zval = Z_DVAL ( zval ) ;,0
481,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
482,<S2SV_ModStart> ; if ( SIZE_TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ) ) { if ( SIZE_LIMIT_LIMIT ) == 0 ) { SIZE_E ( SIZE_STRING ) ; },0
483,<S2SV_ModStart> ret = - 1,0
484,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) return ( ( void <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) return ( ( void <S2SV_ModStart> ) ) ; if ( ( strlen ( void ) printf ( void ) <S2SV_ModStart> ) ) return - 1 <S2SV_ModEnd> ; if (,0
485,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
486,<S2SV_ModStart> ctx ) ; <S2SV_ModEnd> return err ;,0
487,"<S2SV_ModStart> len, len <S2SV_ModEnd> ) ; return",0
488,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> sb2SV_null> <S2SV_null> static int <S2SV_ModEnd> s_null>,0
489,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
490,,0
491,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( c,0
492,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
493,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
494,,0
495,,0
496,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
497,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_id, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\"" ) ; return 1 ; } if ( tmp == NULL ) { PyId_SetString ( tmp ) ; return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> field <S2SV_blank> field <S2SV_blank> from <S2SV_blank> from <S2SV_blank> field <S2SV_blank> from <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> from <S2SV_blank> from <S2SV_blank> from <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> from <S2SV_blank> from <S2SV_blank> from <S2SV_blank> from <S2SV_blank> missing <S2SV_blank> missing <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> from <S2SV_blank> from <S2SV_blank> from <S2SV_blank> from <S2SV_blank> from <S2SV_blank> from <S2SV_blank> from <S2SV_blank> %s"" ) ; return 1 ; } if ( lookup_seq_id ( tmp ) < 0 ) { PyId_id ( tmp ) ; return 1 ; } if ( tmp == NULL ) { Py_CLEAR ( tmp == NULL ) { Py_CLEAR ( tmp ) ; } if ( tmp == NULL ) { Py_CLEAR ( tmp ) { Py_CLEAR ( tmp",0
498,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> hdr ; int,0
499,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
500,,0
501,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) ) { if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; if ( <S2SV_ModEnd> == NULL ) { <S2SV_ModStart> ) ) { kfree ( <S2SV_ModEnd> ) ; return <S2SV_ModStart> ) ; },0
503,<S2SV_ModStart> ; if ( mnt_flags & MNT_LOCK_NODEV ) { return - EPERM ; } if ( mnt -> mnt_flags & MNT_MASK ) { return - EPERM ; } if ( mnt_flags & MNT_MASK ) return - EPERM ; } if (,0
504,<S2SV_ModStart> 0 ; } <S2SV_ModEnd> return 0 ;,0
505,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
506,<S2SV_ModStart> port ) { <S2SV_ModEnd> return 0 ;,0
507,"<S2SV_ModStart> & ds64_chunk, sizeof ( CS64Chunk, sizeof ( CS64Chunk, sizeof ( CS64Chunk ) ) ) ) { CS64ChunkSize = sizeof ( CS64ChunkSize * sizeof ( CS64Chunk ), CS64Chunk ) ) ; cs64ChunkSize = sizeof ( CS64ChunkSize * sizeof ( CS64ChunkSize * sizeof ( CS64Chunk ), sizeof ( CS64Chunk ) ) ) ) ; cs64_length = sizeof ( CS64ChunkSize * sizeof ( CS64Chunk ) ) ) ; cs64_chunkSize ( CS64ChunkSize * sizeof ( CS64Chunk ) ) ) ; if ( cs64_chunkSize!= sizeof ( cs64_chunk ) ) ) { CS64ChunkSize = cs64_chunkSize ( CS64ChunkSize / sizeof ( CS64ChunkSize * sizeof ( cs64_chunk ), CS64ChunkSize * sizeof ( CS64Chunk ) ) ) ; cs64_data_length = sizeof ( CS64ChunkSize * sizeof ( CS64Chunk ) ) ) ; cs64_bytes_chunk",0
508,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> -> msg_name ; if ( msg_name, msg_name, msg_name, msg_name, msg_name, msg_name, <S2SV_ModEnd> ) ; if",0
509,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null> static int <S2SV_ModEnd> inode_block ( struct <S2SV_ModStart> goto out_block ) ; int bh = 0 ; int <S2SV_ModEnd> ; int,0
510,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 0 ;,0
511,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
512,,0
513,"<S2SV_ModStart> * fname, NULL <S2SV_ModEnd> ) ; if <S2SV_ModStart> } if ( fname, fname ) { <S2SV_ModEnd> return 0 ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( f",0
514,<S2SV_ModStart> ; if ( <S2SV_ModEnd> f -> sf,0
515,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
516,<S2SV_ModStart> num ) ; <S2SV_ModEnd> if ( n,0
517,"<S2SV_ModStart> if (! js_doregexec ( J, <S2SV_ModEnd> re -> prog",1
518,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
519,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> chunkencode_t <S2SV_ModStart>, struct ext4_data, <S2SV_ModStart>, struct ext4_type, strlen, encoder_t <S2SV_ModEnd>, struct stream <S2SV_ModStart>, hdr ) ; if ( strlen == 0 ) { printf ( ""%s: <S2SV_blank> %s\\n"", strlen ) ; goto out ; } if ( strlen == '\\n"" ) { if ( strlen == '\\n"" ) { printf ( ""Not <S2SV_blank> packet"" ) ; return - EINVAL ; } if ( encoder -> data_len == '\\n"" ) { goto out ; } if ( strlen == '\\n"" ) { printf ( ""%s\\n"", ""%s\\n"", ""%s\\n"" ) ; goto out ; } if ( strlen == '\\n"" ) { if ( strlen == '\\n"" ) goto out ; } if ( strlen == '\\n"" ) { goto out ; } if ( strlen == '\\n"" ) { printf ( ""%s\\n"", ""%s\\n"",",0
520,"<S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC28J60_ISR1 <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_EIE <S2SV_ModEnd> ) ) ; if <S2SV_ModStart> ( interface, ENC28J60_EIE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_EIE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_EIE <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC28J60_EIE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR1 ) ; if",0
521,"<S2SV_ModStart> * cm, vpx_writer <S2SV_ModEnd> * wb,",0
522,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
523,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
524,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
525,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> event_null> <S2S2SV_null>,0
526,,0
527,<S2SV_ModStart> ; if ( r = - EINVAL ; if (,0
528,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return 0 ;,0
529,,0
530,<S2SV_ModStart> keylen = 0 <S2SV_ModEnd> ; if (,0
531,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
532,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MODE_MODE_INFO ( MACROBLOCKD * xd, MACROBLOCKD * xd, int mi_row, int mi_row, int mi_row, int mi_row, int mi_row, int mi_row, mi_row, xd ) ; <S2SV_ModStart> { if (! xd -> mi_col ) { if (! xd -> mi_row &&! xd -> mi_row && xd -> mi_row >= 0 ) return 0 ; } <S2SV_ModStart> MODE_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_row, mi_col, x, x, mi_col, mi_col, mi_col, mi_row, mi_col, mi_col, mi_row, mi_col, mi_col, mi_col ) ; if ( xd -> mi_col ) { return 0 ; } <S2SV_ModStart> ( xd ) ; } <S2SV_ModEnd> return 0 ;",0
533,<S2SV_ModStart> data ) ; <S2SV_ModEnd> return 0 ;,0
534,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
535,"<S2SV_ModStart> * obj, <S2SV_ModEnd> j ; if",0
536,<S2SV_ModStart> skb ) ; memset ( skb ) ;,0
537,<S2SV_ModStart> ) ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_matind_t,0
538,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> } if (,0
539,<S2SV_ModStart> ; if ( key_is_key <S2SV_ModEnd> ( key ),0
540,,0
541,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
542,<S2SV_ModStart> ; if (,0
543,<S2SV_ModStart> ; int err <S2SV_ModEnd> ; if (,0
544,,0
545,<S2SV_ModStart> -> filesize = UINT64_MAX <S2SV_ModEnd> ; s ->,1
546,"<S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
547,<S2SV_ModStart> len ) { if ( len == olen ) return olen ; <S2SV_ModStart> len ) { if ( len == olen ) return len ;,0
548,<S2SV_ModStart> ret ; } <S2SV_ModEnd> return NULL ;,0
549,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
550,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
551,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_frame_frame ( VP9_COMMON <S2SV_ModStart> ) { const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_CODEC_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const VP9_COMMON * const uint8_COMMON * const VP9_COMMON * const cm = & cpi -> svc ; svc = & cpi -> svc. number_frame_count ; svc = & cpi -> svc. number_ctx -> svc. number_ctx -> svc. number_layers ; for ( i ) i ; i = 0 ; i ; i ++ i ; i ; i ++ i ++ i ++ i ) { svc_ctx -> svc_ctx -> svc. layer_frame_context [ i ] ; i ] = 0 ;,0
552,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
553,<S2SV_ModStart> buffer ) ; if ( screen == NULL ) return NULL,0
554,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> char * str <S2SV_ModStart> = '\\0' ; if ( strlen ( str ) == '\\0' || * strlen ( str ) == '\\0' || strlen ( str ) == '\\0' ) { if ( str == '\\0' ) { return 0 ; } else { char * strlen ( str, '\\0' ) ; if ( str == '\\0' || * str == '\\0' ) { return 0 ; } else { if ( * str == '\\0' || * str == '\\0' ) { return NULL ; } else { char * str = '\\0' ; } if ( * str == '\\0' ) { if ( * str == '\\0' ) { if ( str == '\\0' ) { return NULL ; } else { int == '\\0' ; } else { char * str = '\\0' ; } else { if ( str == '\\0' ) { if ( str == '\\0' ) == '0' ) { return 0 ; } else {",0
555,"<S2SV_ModStart> * bufsize, sizeof ( * ) ) <S2SV_ModEnd> ; if (",0
556,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
557,<S2SV_ModStart> == NULL ||!,0
558,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
559,,0
560,"<S2SV_ModStart>, image ) ; <S2SV_ModEnd> if ( count",0
561,<S2SV_ModStart> ) ) ; ND_TCHECK ( skb ) ;,0
562,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
563,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
564,"<S2SV_ModStart>, int ret <S2SV_ModEnd> ; if (",0
565,"<S2SV_ModStart> bestaddress, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if",1
566,<S2SV_ModStart> opj_calloc ( ( size_t ),0
567,"<S2SV_ModStart> name ), name <S2SV_ModEnd>, name,",0
568,"<S2SV_ModStart> ( kvm, 0",0
569,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mi_row ) { VP9_COMMON * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const xd = & cpi -> common ; MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const xd ; MACROBLOCKD * const xd = & cpi -> mb ; MACROBLOCKD * const int mi_row, int mi_row, int mi_row, mi_row, int mi_row, mi_row, mi_row, mi_row, mi_row, mi_col, mi_col, mi_col, mi_col, mi_col, mi_row, mi_col, mi_col, mi_row, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col, mi_col ) ;",0
570,<S2SV_ModStart> opuf ) ; if ( op1 == 0 ) { ret = - EFAULT ; break ; },0
571,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
572,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
573,<S2SV_ModStart> dir ) { <S2SV_ModEnd> char * dir,0
574,<S2SV_ModStart> goto ) ; <S2SV_ModEnd> break ; },0
575,"<S2SV_ModStart> avctx ) { av_error ( avctx, AVERROR_INVALIDDATA, avctx ) ;",0
576,<S2SV_ModStart> ; if ( krb5_key == NULL ) return NULL ;,0
577,,0
578,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
579,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct ip_options_rcu ( struct ip_options_rcu <S2SV_ModEnd> * optlen <S2SV_ModStart> * optlen ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart>! opt -> optlen ) return 0 <S2SV_ModEnd> ; optlen =,0
580,<S2SV_ModStart> args -> rmtvaluelen <S2SV_ModEnd> ; args ->,0
581,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
582,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
583,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> pcappcap_t <S2SV_ModStart> ; struct pcap_memcpy <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( len < 0 ) return - 1 <S2SV_ModEnd> ; if (,0
584,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int,0
585,<S2SV_ModStart> -> columns - 1 <S2SV_ModEnd> ) ; x,0
586,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
587,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
588,"<S2SV_ModStart>!= MagickFalse ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
589,<S2SV_ModStart> ) ) ; ND_TCHECK ( bp [ 0 ] ) ;,0
590,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
591,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
592,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
593,<S2SV_ModStart> dev ) ; <S2SV_ModEnd> return 0 ;,0
594,<S2SV_ModStart> data ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_matind_t,0
595,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
596,<S2SV_ModStart> dev ) ; <S2SV_ModEnd> if (!,0
597,<S2SV_ModStart> = 0 ; dev -> priv_flags &= 0 ;,0
598,<S2SV_ModStart> -> dev ; kfree ( dev ) ;,0
599,"<S2SV_ModStart>, int ret <S2SV_ModEnd> ; if (",0
600,<S2SV_ModStart> size_t <S2SV_ModEnd> size_t p,0
601,<S2SV_ModStart> ; if ( <S2SV_ModEnd> goto out,0
602,,0
603,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
604,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return 0 ;,0
605,<S2SV_ModStart> buf [ len <S2SV_ModEnd> ] + 1 <S2SV_ModStart> len - 1 <S2SV_ModEnd> ) ; },0
606,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
607,"<S2SV_ModStart> ( arg, ""%s"" <S2SV_ModEnd> ) ; else",0
608,<S2SV_ModStart> inode ) ; error = fh_lock ( inode ) ; <S2SV_ModStart> goto out_drop_lock ; fh_lock ( inode ) ; if ( error ) return error ; <S2SV_ModStart> goto out_drop_lock ( inode ) ; fh_lock ( inode ) ; fh_posix_lock ( inode ) ; if ( fh ) return error ;,0
609,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return NULL ;,0
610,"<S2SV_ModStart> * filename, fmode_t fmode <S2SV_ModEnd> ) ; int",0
611,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
612,"<S2SV_ModStart> ( ndo, ""%s"" <S2SV_ModEnd> ) ) ;",0
613,<S2SV_ModStart> ) ) { ND_TCHECK_16BITS ( tptr ) ;,0
614,,0
615,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sk,",0
616,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) ) { ND_TCHECK ( pptr, pptr ) ; <S2SV_ModStart> ; if ( pptr == pptr ) { ND_TCHECK ( pptr ) ; goto trunc ; } if (",0
617,"<S2SV_ModStart> uint8_t length ; struct stream packet = * s ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""consume <S2SV_blank> consume <S2SV_blank> consume <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> return False ; } if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""consume <S2SV_blank> consume <S2SV_blank> consume <S2SV_blank> consume <S2SV_blank> consume <S2SV_blank> consume <S2SV_blank> consume <S2SV_blank> consume <S2SV_blank> consume <S2SV_blank> consume <S2SV_blank> consume <S2SV_blank> consume <S2SV_blank> consume <S2SV_blank> consume <S2SV_blank> from <S2SV_blank> would <S2SV_blank> would <S2SV_blank> would <S2SV_blank> would <S2SV_blank> would <S2SV_blank> overrun"", length ) ; }",0
618,"<S2SV_ModStart>, * p <S2SV_ModEnd> ; if (",0
619,<S2SV_ModStart> args -> rmtvaluelen <S2SV_ModEnd> ; args ->,0
620,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
621,"<S2SV_ModStart> ) ; } copy_as_user <S2SV_ModEnd> ( src,",0
622,"<S2SV_ModStart> ( fc -> fc_context ) ; fcpy ( fc -> fcred, fc ) ;",0
623,"<S2SV_ModStart> -> y = MagickMin <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, MagickMin <S2SV_ModEnd> ( 1.0f,",0
624,<S2SV_ModStart> len = 0 <S2SV_ModEnd> ; if (,0
625,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
626,,0
627,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct,0
628,"<S2SV_ModStart> ( ndo, ""%s"" <S2SV_ModEnd> ) ) ;",0
629,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
630,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi ->,0
631,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> const char *,0
632,"<S2SV_ModStart> size_t s ; memset ( & n -> entries [ tcount ], 0, sizeof ( tcount ) ) ;",0
633,<S2SV_ModStart> ; if ( ctx -> terminated ||,1
634,,0
635,"<S2SV_ModStart>, int ret <S2SV_ModEnd> ; if (",0
636,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static char * strlen ( char * ) strlen ( strlen ( strlen ) ) ; if ( strlen ( len ) ) { len = ( ( len ) ) ) ; return NULL ; } if (! strlen ( strlen ( strlen ) ) ) { len = ( strlen ( strlen ) ) ) ; if (! strlen ( len ) ) { len = ( strlen ( strlen ) ) ; } if (! strlen ( strlen ) ) { len = ( strlen ( len ) ) ) ; if (! strlen ( len ) ) ) { err = ( sizeof ( str ) ) ) ; if (! strlen ( strlen ) ) ) return NULL ; } else { err = 1 ; } if (! strlen ( strlen ( strlen ) ) ) { err = strlen ( buf + 1 ) ) ; if (! strlen ( len ) ) ) ) { err = strlen ( strlen ( strlen ( buf + 1 ) ; } else { len - 1 ) ; } else { err = strlen ( strlen (,0
637,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
638,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
639,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
640,<S2SV_ModStart> ; u8 <S2SV_ModEnd> ; if (,0
641,,0
642,<S2SV_ModStart> ; if (! str ) return 0 ;,0
643,"<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( c,",0
644,<S2SV_ModStart> q ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
645,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } if (,0
646,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
647,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
648,"<S2SV_ModStart> len ; } ND_TCHECK_16BITS ( p, p ) ; <S2SV_ModStart> len ; } ND_TCHECK_16BITS ( p + 2 ) ; ND_16BITS ( p + 2 ) ; ND_PRINT ( p + 2 ) ; <S2SV_ModStart> 0 ; } ND_TCHECK_16BITS ( p + 2 <S2SV_ModEnd> 2 ) ;",0
649,"<S2SV_ModStart>, r ) ; <S2SV_ModEnd> if ( r",0
650,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
651,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
652,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> pkt_encode ( struct <S2SV_ModStart> packet ) { int64_t <S2SV_ModEnd> packet_len ; <S2SV_ModStart>, wkt_len, pkt_len, pkt_len, pkt_len, wkt_len <S2SV_ModEnd> size, wkt -> <S2SV_ModStart>, wkt_len, pkt_len, pkt_len, pkt_len <S2SV_ModEnd> ) ; } if",0
653,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
654,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
655,<S2SV_ModStart> keyring ) { int ret = - EINVAL ; <S2SV_ModStart> key ) ; key_put ( keyring <S2SV_ModEnd> ) ; ret <S2SV_ModStart> ; ret = <S2SV_ModEnd> ; if (,0
656,<S2SV_ModStart>!= NULL <S2SV_ModEnd> ; if (,0
657,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( length",0
658,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; jas_ulonglong,0
659,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
660,<S2SV_ModStart> 0 ] ; <S2SV_ModEnd> return 0 ;,0
661,<S2SV_ModStart> ) ) ; msg -> msg_namelen = 0,0
662,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return 0 ;,0
663,<S2SV_ModStart> ; if ( <S2SV_ModEnd> ( s <,0
664,"<S2SV_ModStart> cache, NULL <S2SV_ModEnd> ) ; }",0
665,"<S2SV_ModStart>, NULL, NULL <S2SV_ModEnd> ) ; return",0
666,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
667,<S2SV_ModStart> ; if ( sk ) goto err ;,0
668,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
669,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
670,<S2SV_ModStart> char * p <S2SV_ModEnd> ; if (,0
671,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
672,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
673,,0
674,"<S2SV_ModStart>, * err <S2SV_ModEnd> ; int p",0
675,<S2SV_ModStart> ) ) { memcpy <S2SV_ModEnd> ( & s ->,0
676,,0
677,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference (",0
678,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> cpi ) { const VP9_COMMON * const VP9_COMMON * cpi <S2SV_ModEnd> = cpi -> <S2SV_ModStart> cpi ] ; if ( cpi -> oxcf. tx_mode == VP9_COMMON * cpi -> oxcf. tx_mode == 0 ) { cpi -> oxcf. tx_mode = cpi -> common. tx_mode ; return rc = cpi -> frame_mode ; } else if ( cpi -> oxcf. tx_mode == 0 ) { cpi -> sf_mode = cpi -> frame_mode ; } else if ( cpi -> oxcf. tx_mode == INT_MAX ) { cpi -> frame_mode = cpi -> frame_mode = cpi -> frame_mode ; } else if ( cpi -> oxcf. tx_mode == 0 ) { cpi -> oxcf. tx_mode = cpi -> frame_mode ; } else { cpi -> oxcf. tx_mode = & cpi -> frame_mode ; } else if ( cpi -> oxcf.,0
679,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
680,<S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1,0
681,"<S2SV_ModStart>, vnaux, vnaux <S2SV_ModEnd> ; if (",0
682,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
683,<S2SV_ModStart> info ) ; <S2SV_ModEnd> if ( c,0
684,<S2SV_ModStart> info = NULL <S2SV_ModEnd> ; if (,0
685,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
686,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
687,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
688,<S2SV_ModStart> ctxt ) { if ( rc!= X86EMUL_CONTINUE ) return rc ;,0
689,"<S2SV_ModStart> list. name, true",1
690,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
691,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> int err ;,0
692,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
693,<S2SV_ModStart> return - 1 <S2SV_ModEnd> ; if (,0
694,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
695,,0
696,<S2SV_ModStart> == NULL ) { <S2SV_ModEnd> return NULL ;,0
697,<S2SV_ModStart> ( cmd ) <S2SV_ModEnd> ; if (,0
698,"<S2SV_ModStart>, type_comment, string type_comment, <S2SV_ModStart>, type_comment,",0
699,<S2SV_ModStart> return - EINVAL <S2SV_ModEnd> ; if (,0
700,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
701,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ;,1
702,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
703,,0
704,<S2SV_ModStart> ctxt ) { int rc = X86EMUL_CONTINUE ; <S2SV_ModStart> ) ) ; return rc <S2SV_ModEnd> ; } <S2SV_null>,0
705,,1
706,<S2SV_ModStart> dev ) ; <S2SV_ModEnd> return ret ;,0
707,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> psf -> header. indx = psf -> header. ptr <S2SV_ModEnd> ; psf -> <S2SV_ModStart> ( psf -> header. indx, <S2SV_ModStart> ( psf -> header. indx <S2SV_ModEnd>, psf -> <S2SV_ModStart> ( psf -> header. indx <S2SV_ModEnd>, psf -> <S2SV_ModStart>, psf -> header. indx <S2SV_ModEnd>, psf -> header. <S2SV_ModStart> ( psf -> header. indx <S2SV_ModEnd>, psf ->",0
708,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> 0,0
709,<S2SV_ModStart> uint32_t ret ; uint32_t tmp_start = 0 ; <S2SV_ModStart> uint32 ) { if (! test_data_data_data ) { return NULL ; },0
710,"<S2SV_ModStart> val, val, sk -> u32",0
711,<S2SV_ModStart> ; int i <S2SV_ModEnd> ; int i,0
712,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static jas_eprintf ( ""jas_eprintf"" ) { jas_eprintf ( ""long"" ) ; goto error <S2SV_ModEnd> ; } JAS_DBGLOG ( <S2SV_ModStart> ) ) ; goto error <S2SV_ModEnd> ; } jas_eprintf",0
713,<S2SV_ModStart> struct va_format vaf <S2SV_ModEnd> ; va_start (,0
714,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
715,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
716,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
717,<S2SV_ModStart> ; if (,0
718,"<S2SV_ModStart>, height, sun_info. sun_info. sun_info. data_size <S2SV_ModEnd> ) ; if",0
719,"<S2SV_ModStart> NULL, EINVAL <S2SV_ModEnd> ; if (",0
720,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
721,<S2SV_ModStart> ; newinet -> inet_opt <S2SV_ModEnd> ; inet_opt =,0
722,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
723,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = 0 ; memset ( & csum, 0, 0, 0, sizeof ( * ) ) ) ;",0
724,"<S2SV_ModStart> gfn, page_size >> PAGE_SHIFT",0
725,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
726,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, ctx ->",0
727,<S2SV_ModStart> unsigned short ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> ; return (,0
728,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = 0 ; if ( unlikely ( unlikely ( nr ) ) { int ret = - ENOMEM ; goto err ; } <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> return 0 ;,0
729,<S2SV_ModStart> = ctx -> <S2SV_ModEnd> ; ctx ->,0
730,<S2SV_ModStart> dev ) ; <S2SV_ModEnd> if ( netdev,0
731,<S2SV_ModStart> ) ) ; hdr -> sadb_msg_id = 0 ;,0
732,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return 0 ;,0
733,"<S2SV_ModStart> size, L, <S2SV_ModEnd> sizeof ( L, <S2SV_ModStart>, 1, <S2SV_ModEnd> sizeof ( L, <S2SV_ModStart>, 1, <S2SV_ModEnd> sizeof ( L",0
734,"<S2SV_ModStart> ( ndo, ""%s"", tlen ) ;",0
735,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
736,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
737,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 0 ;,0
738,<S2SV_ModStart> case 0 : if (!,0
739,<S2SV_ModStart> return res ; <S2SV_ModEnd> return 0 ;,1
740,<S2SV_ModStart> = 0 ; size_t ext_size = 0 ;,0
741,<S2SV_ModStart> ) ) ; if ( addr_to_size >= 0 ) return NULL ;,0
742,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
743,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if (,0
744,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
745,<S2SV_ModStart> return 0 ;,0
746,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
747,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
748,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & a",0
749,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> int error_flags <S2SV_ModStart> int error_flags |= NULL ; if ( (! ( int ) ) ) return - EPERM ) <S2SV_ModEnd> ; if (,0
750,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; break ; }",0
751,,0
752,<S2SV_ModStart> ; if (,0
753,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
754,<S2SV_ModStart> io_data ) ; <S2SV_ModEnd> return 0 ;,0
755,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
756,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 0 ;,0
757,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
758,,0
759,"<S2SV_ModStart> skb ) ; memset ( skb, 0, sizeof ( * skb ) ) ;",0
760,<S2SV_ModStart> out_free ; } else if ( kvm ) goto out ;,0
761,<S2SV_ModStart> -> in_addr ; <S2SV_ModEnd> if ( new,0
762,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
763,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void,0
764,<S2SV_ModStart> data ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
765,,0
766,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
767,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
768,<S2SV_ModStart> client -> client <S2SV_ModEnd> ; client ->,0
769,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
770,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
771,"<S2SV_ModStart> NULL, root, true",0
772,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> unlock ) ; spin_lock ( & unix_lock ) ; <S2SV_ModStart> unlock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
773,,0
774,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
775,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
776,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
777,<S2SV_ModStart> if ( ( ( e <S2SV_ModEnd> )!= 0,0
778,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
779,<S2SV_ModStart> ; if ( count > OE_SSIZE_MAX <S2SV_ModEnd> ) { size_t,0
780,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> opt ( opt <S2SV_ModStart> ) ) { atomic_dec ( opt -> tot_len, & txopt -> tot_len ) ; txopt_len = 0 ; txopt_put ( opt ) ; }",0
781,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
782,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0 ;,0
783,,0
784,"<S2SV_ModStart> - ENOMEM ; memset ( 0, 0 ) ;",0
785,<S2SV_ModStart> dev ) { <S2SV_ModEnd> if ( info <S2SV_ModStart> dev ) ; <S2SV_ModEnd> return 0 ;,0
786,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
787,,0
788,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
789,<S2SV_ModStart> task ) { <S2SV_ModEnd> del_timer ( & <S2SV_ModStart> -> timer ) <S2SV_ModEnd> ; complete (,1
790,,0
791,"<S2SV_ModStart> ( uint8_t ) ; if ( addr_str_length < 0 ) { log_warn ( ""too <S2SV_blank> large"" ) ; goto trunc ; }",0
792,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
793,"<S2SV_ModStart> ( interface, KSZ8851_RX <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, KSZ8851_R1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, KSZ8851_P <S2SV_ModEnd> ) ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR1 <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_P1 <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( interface, KSZ8851_R1 <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, KSZ8851_P1 <S2SV_ModEnd> ) ) ;",0
794,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
795,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null> static int ret <S2SV_ModStart> ret ) { ret = - EINVAL ; if ( ret == - EINVAL ) { ret = - EINVAL ; goto out ; } <S2SV_ModStart> ret ) ; if ( ret == - ENOMEM ) { ret = - EINVAL ; goto out ; } ret = - EINVAL ; if ( ret == - EINVAL ) { ret = - EINVAL ; goto out ; } if ( ret == - EINVAL ) { ret = - ENOMEM ; goto out_put ( ret ) ; } <S2SV_ModStart> ret ) { ret = - ENOMEM ; if ( ret == - 1 ) { ret = - ENOMEM ; goto out_put ( ret ) ; } if ( ret == 0 ) { ret = - ENOMEM ) { ret = - ENOMEM ; goto out ; goto out ; } if ( ret == - 1 ) { ret = - 1 ; goto out_put_lock ( ret ) ; } else { ret = - 1 ; goto out ; } ret = - ENODE_,0
796,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
797,,0
798,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
799,<S2SV_ModStart> ret = - 1 <S2SV_ModEnd> ; if (,0
800,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2S2SV_null> <S2S2SV_null> <S2SV_null> <S2S2SV_null> <S2SV_ModEnd> 2S2SV_null>,0
801,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) ) { int ret <S2SV_ModEnd> ; if ( <S2SV_ModStart> - EINVAL ; goto bail <S2SV_ModEnd> ; if ( <S2SV_ModStart> - EINVAL ; if ( <S2SV_ModStart> ) ) ; goto bail <S2SV_ModEnd> ; } if <S2SV_ModStart> - EINVAL ; if ( <S2SV_ModEnd> break ; if <S2SV_ModStart> ) ) ; goto done <S2SV_ModEnd> ; } if,0
802,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
803,<S2SV_ModStart> ) ) ; if (! vpx_bit_bit_bitmap ( ) ) { <S2SV_ModEnd> return 0 ;,0
804,<S2SV_ModStart> 0 ) { if ( vdaux < 1 ) { goto out_error ; },0
805,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
806,<S2SV_ModStart> = rc -> avg_bandwidth <S2SV_ModEnd> ; if (,0
807,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
808,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
809,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
810,<S2SV_ModStart> ; if ( <S2SV_ModEnd> p -> p,0
811,"<S2SV_ModStart> : # line 2478 <S2SV_ModEnd> ""grammar.y""grammar.c""grammar.y"" { <S2SV_ModStart> : # line 954 <S2SV_ModEnd> ""grammar.c""grammar.y""grammar.c""grammar.y""grammar.y""grammar.y"" ) ; <S2SV_ModStart> : # line 954 <S2SV_ModEnd> ""grammar.c""grammar.y""grammar.c""grammar.y""grammar.c""grammar.c"" <S2SV_ModEnd> ""grammar.c""grammar.y""grammar.y"" <S2SV_ModStart> : # line 9 <S2SV_ModEnd> ""grammar.y""grammar.y""grammar.c""grammar.y""grammar.c""grammar.c""grammar.y""grammar.y""grammar.y"" ) ; <S2SV_ModStart> : # line 10 <S2SV_ModEnd> ""grammar.y""grammar.y""grammar.y""grammar.c""grammar.y""grammar.c""grammar.c""grammar.y""grammar.c""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y",0
812,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int,0
813,<S2SV_ModStart> ; # endif ifdef CONFIG_VP9_HIGHBITDEPTH if (,0
814,,0
815,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; if (,0
816,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
817,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,0
818,<S2SV_ModStart> -> peer. auth_capable = new -> peer. auth_capable ; asoc -> peer.,1
819,"<S2SV_ModStart> rbi, false",0
820,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
821,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> sock_sock ( struct <S2SV_ModEnd> sk ) { struct <S2SV_ModStart> sk ) ; if ( <S2SV_ModEnd> sock_chunk <S2SV_ModStart> sk ) { if ( <S2SV_ModEnd> sk ) { <S2SV_ModStart> sk ) ; <S2SV_ModEnd> sock_release ( & <S2SV_ModStart> sk ) ; if ( sk ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> sk ) ; err = <S2SV_ModEnd> ; if ( <S2SV_ModStart> sk ) { if ( <S2SV_ModEnd> sk ) goto out ;,0
822,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
823,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> intra_mv <S2SV_ModStart> intra_mv ; MACROBLOCKD * const PREDICTION_MODE <S2SV_ModStart>, MACROBLOCKD * cpi, PREDICTION_MODE <S2SV_ModEnd>, MACROBLOCKD <S2SV_ModStart> ; # if CONFIG_VP9_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( cpi <S2SV_ModEnd> ) { int <S2SV_ModStart> ; # if CONFIG_VP9_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_VP9_HIGHBITDEPTH vp9_cost_cost_cost_cost_rdp9_cost ( cpi, best_rd, best_rd, best_rd, best_rd, best_rd ) ; # if CONFIG_VP9_VP9_HIGHBITDEPTH # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_VP9_HIGHBITDEPTH",0
824,"<S2SV_ModStart> svm, AC_VECTOR",0
825,<S2SV_ModStart> ; h = safe_calloc ( <S2SV_ModEnd> h -> h,0
826,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
827,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> UINT32 <S2SV_ModEnd> ; u2SV_null> <S2SV_null>,0
828,<S2SV_ModStart> length ) { if (! le32 ) return - EINVAL ;,0
829,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args <S2SV_ModStart>, vpx_codec_alg_t * ctx <S2SV_ModEnd>, va_list args <S2SV_ModStart> ; if ( ctx -> frame_idx == NULL ) { VPX_CODEC_ERROR ; return VPX_CODEC_ERROR ; }",0
830,<S2SV_ModStart> ; if ( <S2SV_ModEnd> hdrlen < 0,0
831,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
832,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 2S2SV_null> <S2SV_null>,0
833,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
834,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> inode ( struct,0
835,"<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( lfm,",0
836,"<S2SV_ModStart> size_t data_size ; size_t data_size ; size_t data_size = 0 ; if ( data_size < sizeof ( data_size ) data_size ) { data_size = data_size ; if ( data_size > data_size ) return - 1 ; } <S2SV_ModStart>, data_size, data_size, data_size, data_size, data_size, data_size, data_size, data_size, data_size, data_size ) ; if ( data_size < data_size ) return AVERROR_INVALIDDATA ; if (! data_size ) return - 1 ; if ( data_size > data_size ) return - 1 ; if ( data_size - 1 ; if ( data_size > data_size ) return - 1 ; if ( data_size > data_size - 1 ) { if ( data_size > data_size ) return - 1 ; } if ( data_size < data_size ) { if ( data_size ) return AVERROR_INVALIDDATA ; if ( data_length ) goto out ; } if ( data_size < data_size ) { if ( data_",0
837,"<S2SV_ModStart> mq_ops ) ; blk_queue ( q, q ) ;",0
838,<S2SV_ModStart> uint32_t val ; if ( addr + sizeof ( val ) > val ) { return ( val ) ; },0
839,<S2SV_ModStart> ; if (! str ) return 0 ;,0
840,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
841,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
842,"<S2SV_ModStart> ; struct ip_options_rcu <S2SV_ModEnd> ; struct inet_opt <S2SV_ModStart> 0 ; inet_opt = rcu_dereference ( inet -> inet_opt, inet -> inet_opt ) ; if (! inet_opt && inet_opt -> inet_opt && inet_opt -> inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) rcu_dereference <S2SV_ModStart> ; if ( inet_opt && inet_opt -> inet_opt -> opt. <S2SV_ModEnd> srr ) rt",0
843,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
844,<S2SV_ModStart> ; if ( <S2SV_ModEnd> h_set ( cm,0
845,<S2SV_ModStart> == NULL ) return - EINVAL,0
846,"<S2SV_ModStart> = extent ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ;",0
847,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0 ;,0
848,<S2SV_ModStart> key_data ) ; if (! key_data_len ) return NULL ;,0
849,"<S2SV_ModStart>, j, <S2SV_ModEnd> j, j",0
850,<S2SV_ModStart> { if ( o_element_count && 0!= * o_count && 0!= * o_row_count ) { * o_row_column * o_count ; * o_count = 0 ; } else { if ( * o_column_count!= * o_count ) { * o_count ; } else { * o_count = * o_column_count ; * o_count ; * o_count = * o_count ; } else { * o_count ; * o_column_count ; * o_count = * o_count ; * o_count ; } else { * o_count = * o_column_count ; * o_count ; * o_count = * o_count ; * o_count ; } else { * o_column_count ; } else { * o_count = * o_count ; } else { if ( * o_count!= * o_count )!= * o_column_count ) { * o_count ; * o_count = 0 ; } else { if ( * o_mode!= 0!= 0 ) { if ( * o_mode!= NULL ) { return NULL ; } else { if,0
851,"<S2SV_ModStart>, len, 0, <S2SV_ModEnd> ) ; if",0
852,"<S2SV_ModStart> uint8 * s ; struct stream packet ; packet = * s ; struct s_check_rem ( s, sizeof ( s ) ) ) ; if (! s_check_rem ( s ) ) { rdp_protocol_error ( ""consume <S2SV_blank> consume <S2SV_blank> consume <S2SV_blank> consume <S2SV_blank> consume <S2SV_blank> consume <S2SV_blank> consume <S2SV_blank> consume <S2SV_blank> consume <S2SV_blank> overrun"", & packet ) ; }",0
853,<S2SV_ModStart> == NULL ) <S2SV_ModEnd> ; if (,0
854,<S2SV_ModStart> == 0 && (,0
855,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
856,<S2SV_ModStart> * rsize >= 31 <S2SV_ModEnd> && rdesc [,0
857,<S2SV_ModStart> ret = - 1 <S2SV_ModEnd> ; ret =,0
858,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return 0 ;,0
859,<S2SV_ModStart> ; if ( <S2SV_ModEnd> r -> msg_name,0
860,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
861,<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( cm ->,0
862,<S2SV_ModStart> ; addr -> <S2SV_ModEnd> ; if (,0
863,<S2SV_ModStart> out_free ; } if ( unlikely ( kvm ) ) goto out ;,0
864,<S2SV_ModStart> ) ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
865,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
866,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> char * <S2SV_ModStart> * p ; if ( * p <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> p_null> <S2S2SV_null>,0
867,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return NULL ;,0
868,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void,0
869,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void,0
870,"<S2SV_ModStart> ) ; } memset ( & timer, 0 ) ;",0
871,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> chr ( void <S2SV_ModStart> = 0 ; int <S2SV_ModEnd> ; int <S2SV_ModStart> ; if ( cp == '\\0' || <S2SV_ModEnd> strcmp ( cp <S2SV_ModStart> )!= 0 ) { UINT64 <S2SV_ModEnd> ) ; },0
872,<S2SV_ModStart> == 0 ) { <S2SV_ModEnd> if (!,0
873,<S2SV_ModStart> goto out <S2SV_ModEnd> ; if (,0
874,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
875,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; if ( <S2SV_ModStart> == NULL ) return KRB5_KERNELEN <S2SV_ModEnd> ; if (,0
876,"<S2SV_ModStart> void vpx_write_literal <S2SV_ModEnd> ( w,",0
877,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & a",0
878,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
879,<S2SV_ModStart> ; if ( p -> mnt_ns == NULL ) return - EINVAL ; if (,0
880,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
881,<S2SV_ModStart> NULL ; } if (,0
882,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
883,"<S2SV_ModStart> ( ndo, ""%s"", icmp_tstr <S2SV_ModEnd> ) ) ;",0
884,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char *",1
885,<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> size = 0,0
886,<S2SV_ModStart> buffer ) { int ret = <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null>,0
887,"<S2SV_ModStart> * data, size_t",0
888,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
889,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
890,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
891,<S2SV_ModStart> len = 0 <S2SV_ModEnd> ; if (,0
892,<S2SV_ModStart> ( inode ) { <S2SV_ModEnd> return 0 ;,0
893,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
894,<S2SV_ModStart> in -> data [ plane ] && in -> linesize,0
895,<S2SV_ModStart> buffer ) ; <S2SV_ModEnd> } if,0
896,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
897,,0
898,"<S2SV_ModStart>, name, true",0
899,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
900,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( skb,0
901,"<S2SV_ModStart>, number_planes_filled, number_filled",0
902,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
903,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
904,,0
905,,0
906,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
907,"<S2SV_ModStart> ) ) { applog ( LOG_WARNING, ""%s: <S2SV_blank> %s: <S2SV_blank> %s"", __func__, __func__, pool ) ; if (! buf ) { applog ( LOG_WARNING, ""%s: <S2SV_blank> %s"", __func__, pool ) ; return NULL ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> return 0 ;",0
908,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
909,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
910,<S2SV_ModStart> ioc ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
911,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> if ( PyId ( <S2SV_ModStart> ) return NULL <S2SV_ModEnd> ; if (,0
912,<S2SV_ModStart> dev ) ; <S2SV_ModEnd> if (!,0
913,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct perf_event_event_event_event_event_event_event * arg <S2SV_ModEnd>, struct perf_event_event",0
914,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
915,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> intra_mode_mode ( VP9_COMMON <S2SV_ModStart> * const PREDICTION_MODE <S2SV_ModEnd> * xd, <S2SV_ModStart> intra_mode ) { PREDICTION_MODE <S2SV_ModEnd> const PREDICTION_MODE <S2SV_ModEnd> * r, <S2SV_ModStart> intra_mode = vpx_read_mode <S2SV_ModEnd> ( r, <S2SV_ModStart> * r, counts ) <S2SV_ModEnd> y_mode = vp9_decode_mode <S2SV_ModEnd> ( r, <S2SV_ModStart> ) ) { if ( counts -> <S2SV_ModEnd> y_mode == PREDICTION_MODE ) { PREDICTION_MODE <S2SV_ModEnd> y_mode = vp9_mode <S2SV_ModStart> * r, counts -> <S2SV_ModEnd> y_mode_intra_mode = vp9_mode_intra_intra_mode <S2SV_ModEnd> ( r,",0
916,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
917,<S2SV_ModStart> return - EINVAL ; if (,0
918,"<S2SV_ModStart> c -> height, 16",0
919,<S2SV_ModStart> NULL ) ; if (! VALUE ) return 0 ;,0
920,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
921,<S2SV_ModStart> dev ) ; <S2SV_ModEnd> return &,0
922,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
923,<S2SV_ModStart> } if (,0
924,"<S2SV_ModStart> sk ) ; memset ( sk, 0, sizeof ( sk ) ) ;",0
925,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
926,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
927,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
928,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
929,<S2SV_ModStart> return - ENOMEM <S2SV_ModEnd> ; if (,0
930,"<S2SV_ModStart> = 0 ; atomic_set ( & opt2 -> refcnt, 0 ) ;",0
931,,0
932,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
933,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
934,<S2SV_ModStart> info -> flags &= 0 ;,0
935,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int vpx_tree_tree_tree_tree ( const v, vpx_tree_tree_tree <S2SV_ModEnd>, int <S2SV_ModStart> p9_tree ) { vpx_tree_tree_tree_tree <S2SV_ModEnd> ( w, <S2SV_ModStart> p9_tree ) { vpx_tree_tree <S2SV_ModEnd> ( w, <S2SV_ModStart> p9_tree ) ; vt <S2SV_ModEnd> return 0 ;",0
936,"<S2SV_ModStart> * data, vpx_write_bit_buffer <S2SV_ModEnd> * wb ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) { vpx_write_bit <S2SV_ModEnd> ( wb,",0
937,"<S2SV_ModStart>, name, name <S2SV_ModEnd> ) ; if",0
938,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> int rdesc_decode ( <S2SV_ModStart> int rdesc. desc, int64_t <S2SV_ModEnd> size, int64_t <S2SV_ModStart> ; int64_t desc <S2SV_ModStart> ; int64_t desc. desc. length <S2SV_ModEnd> size ; int",0
939,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
940,<S2SV_ModStart> ) exit_io_context ( tsk,0
941,"<S2SV_ModStart> * name, <S2SV_ModEnd> const char *",0
942,<S2SV_ModStart> ; if ( <S2SV_ModEnd> cmpts,0
943,,0
944,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
945,<S2SV_ModStart> ; if ( len < 0 ) return - 1 ;,0
946,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if (!,0
947,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
948,<S2SV_ModStart> ret = - 1 <S2SV_ModEnd> ; if (,0
949,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
950,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static struct vpx_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm ) { vpx_write_bit <S2SV_ModEnd> ( wb,",0
951,<S2SV_ModStart> data ) ; <S2SV_ModEnd> return 0 ;,0
952,"<S2SV_ModStart> ( req, ""S2SV_null>"",SV_null> <S2SV_null>",0
953,<S2SV_ModStart> ( args -> rmtvaluelen <S2SV_ModEnd> ) ) ; if,0
954,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
955,<S2SV_ModStart> key ) ; <S2SV_ModEnd> if ( key,0
956,"<S2SV_ModStart> num ) ; if ( num!= 0 ) { errmsg ( ERROR, errmsg ) ; }",0
957,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
958,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
959,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
960,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
961,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
962,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
963,"<S2SV_ModStart> str ) { if ( strlen ( str ) == 0 ) { strlen ( strlen ( str, ""%s"", len ), len ) ; return ; } <S2SV_ModStart> ( str, len <S2SV_ModEnd> ) ; }",0
964,,0
965,,1
966,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
967,"<S2SV_ModStart> ( si, SvcInternal_t <S2SV_ModEnd> * si )",0
968,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
969,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
970,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
971,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
972,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
973,<S2SV_ModStart> ( opt.,0
974,"<S2SV_ModStart> ; if ( LOG_INFO <S2SV_ModEnd> ( LOG_INFO,",0
975,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; if (,0
976,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
977,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
978,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
979,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
980,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
981,<S2SV_ModStart> string ) { <S2SV_ModEnd> return 0 ;,0
982,<S2SV_ModStart>. col = 0 <S2SV_ModEnd> ; if (,0
983,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; L_BUFSIZE <S2SV_ModStart> ( buf, L_BUFSIZE <S2SV_ModEnd>, ""%s"", <S2SV_ModStart> ( buf, L_BUFSIZE <S2SV_ModEnd>, buf,",0
984,<S2SV_ModStart> len = 0 <S2SV_ModEnd> ; if (,0
985,<S2SV_ModStart> return - EINVAL <S2SV_ModEnd> ; if (,0
986,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return NULL ;,0
987,<S2SV_ModStart> 0 ) ; if (! avctx -> profile ) return AVERROR_INVALIDDATA ;,0
988,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
989,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
990,<S2SV_ModStart> len ) ; <S2SV_ModEnd> } if (,0
991,,0
992,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> if ( q,0
993,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
994,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> strdup ( str <S2SV_ModStart>, strlen ( str, len <S2SV_ModEnd> ) ; strlen ( strlen ( str, strlen ( strlen <S2SV_ModStart>, len, len <S2SV_ModEnd> ) ; strlen ( strlen ( str, ""%s"", len <S2SV_ModEnd> ) ; return <S2SV_ModStart> + 1 ) ; if ( strlen ( str, strlen ( strlen ( str ) ) ) == 0 ) { return 0 ; } else { if ( strlen ( strlen ( str ) ) == '\\n"" ) ; return 0 ; } else { return FALSE ; } else { return 0 ; } <S2SV_ModEnd> ; } else { <S2SV_ModStart> ( strlcpy <S2SV_ModEnd>, ""%s"",",0
995,<S2SV_ModStart> mnt_flags |= MNT_LOCK_NONE <S2SV_ModEnd> ; if (,0
996,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> write_literal <S2SV_ModEnd> ( w,",0
997,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
998,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> inode_data_data ( struct <S2SV_ModStart> inode ) ; if ( page_data_data_size ( page ) ) { error = - EINVAL ; goto out_data ; <S2SV_ModStart> inode ) ; <S2SV_ModEnd> if ( page <S2SV_ModStart> ) ; } <S2SV_ModEnd> return 0 ;,0
999,,0
1000,<S2SV_ModStart> if ( ent == NULL ) { st = KRB5_NOENTRY ; goto cleanup ; },0
1001,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1002,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1003,<S2SV_ModStart> ( d ) <S2SV_ModEnd> return 0 ;,0
1004,,0
1005,<S2SV_ModStart> ) break ; <S2SV_ModEnd> if ( sun_info,0
1006,<S2SV_ModStart> ) ; } <S2SV_ModEnd> return 0 ;,0
1007,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> pkt_len ; <S2SV_ModStart> int pkt_len, pkt_len, pkt_len, pkt_len <S2SV_ModStart> ( pkt_len, pkt_len, pkt_len <S2SV_ModEnd> ) ; if",0
1008,<S2SV_ModStart> ; msg -> msg_namelen = 0 ;,0
1009,<S2SV_ModStart> data ) ; <S2SV_ModEnd> return NULL ;,0
1010,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1011,<S2SV_ModStart> err ; } if (! op1 ) { ret = - EINVAL ; ret = - EFAULT ; goto out ; } if (,0
1012,,0
1013,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1014,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
1015,"<S2SV_ModStart>, s -> codec_interface <S2SV_ModEnd> ) ; } if",0
1016,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1017,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1018,"<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( count,",1
1019,"<S2SV_ModStart> return false ; if (! strlen ( sizeof ( url ) ) ) { applog ( LOG_WARNING, ""%s: <S2SV_blank> string: <S2SV_blank> %s"", __func__, __func__ ) ; return NULL ; }",0
1020,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1021,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1022,<S2SV_ModStart> return - EINVAL <S2SV_ModEnd> ; if (,0
1023,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1024,<S2SV_ModStart> size ) { ASSERT_NO_SIZE_OVERFLOW ( size ) ;,1
1025,,0
1026,,0
1027,<S2SV_ModStart> ; if ( len < 0 ) return - EINVAL ;,0
1028,,0
1029,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1030,"<S2SV_ModStart> 0 ) ; memset ( & timr, 0, 0 ) ;",0
1031,<S2SV_ModStart> <S2SV_null> <S2S2SV_null> <S2SV_null> <S2S2SV_null> <S2SV_null>,0
1032,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, 0 )",0
1033,<S2SV_ModStart> ; if (,0
1034,,0
1035,,0
1036,,0
1037,<S2SV_ModStart> new -> count <S2SV_ModEnd> ; if (,0
1038,<S2SV_ModStart> -> msg_namelen = 0 ;,0
1039,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1040,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1041,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1042,"<S2SV_ModStart> -> fmode, fmode, fmode <S2SV_ModEnd> ) ; int",0
1043,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( index",0
1044,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
1045,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1046,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int64_t * const MACROBLOCKD * const MACROBLOCKD * xd, int64_t * xd, int64_t * xd, int64_t * mbmi, int64_t <S2SV_ModEnd>, int64_t <S2SV_ModStart> -> mbmi ; int64_t * mbmi = ctx -> mbmi ; int64_t <S2SV_ModEnd> ; int64_t <S2SV_ModStart> = 0 ; int64_t * mbmi ; int64_t mbmi = ctx -> mbmi. mbmi. mbmi. sse = ctx -> mbmi. mbmi. mbmi. tx_size ; const int64_t = ctx -> mbmi. sse = ctx -> mbmi. tx_size ; const int64_t = 0 ; if ( ctx -> oxcf. tx_mode == INT_MAX ) return 0 ; * const int64_t * const int64_t * const int64_t <S2SV_ModEnd> ; const uint8_t <S2SV_ModStart>",0
1047,,0
1048,"<S2SV_ModStart> ( ndo, ""%s"",",0
1049,<S2SV_ModStart> char * name <S2SV_ModEnd> ; if (,0
1050,<S2SV_ModStart> void vpx_reader <S2SV_ModEnd> * r ),0
1051,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return res ;,0
1052,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> if ( struct <S2SV_ModStart> return - EINVAL ; <S2SV_ModEnd> if (! <S2SV_ModStart> ) return - EINVAL <S2SV_ModEnd> ; if (,0
1053,"<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ptr1,",0
1054,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct,0
1055,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
1056,,0
1057,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1058,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1059,"<S2SV_ModStart> ( interface, KSZ8851_ISRX <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( ( ( ( KSZ8851_R, KSZ8851_R, KSZ8851_R, KSZ8851_ISR ) ) ; if ( ( ( ( ( ( KSZ8851_R, KSZ8851_ISR, KSZ8851_TXR, KSZ8851_ISR ) ) )!= 0 ) { if ( ( ( ( ( ( KSZ8851_ISR, KSZ8851_R, KSZ8851_R, KSZ8851_R ) ) )!= 0 ) ; if ( ( ( ( ( ( ( ( KSZ8851_TXR, KSZ8851_ISR, KSZ8851_TXR, KSZ8851_TXR, KSZ8851_ISR ) ) ) )!= ( ( ( ( KSZ8851_TXR, KSZ8851_ISR, KSZ8851_TXRXRXR ) ) ) ; if ( ( ( ( ( ( KSZ8851_TXR, KSZ8851_TXR, KSZ8851_",0
1060,"<S2SV_ModStart> val ) ; rb_set ( self, id_set ) ;",0
1061,,0
1062,<S2SV_ModStart>. udpport = 0 <S2SV_ModEnd> ; settings.,1
1063,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1064,"<S2SV_ModStart> x0, tran_low_t <S2SV_ModEnd> * x0, <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> x0 ; tran_t",0
1065,<S2SV_ModStart> ; if ( num_clips == NULL ) return - EINVAL ;,0
1066,,0
1067,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1068,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1069,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> log2SV_null> static <S2SV_ModStart> outbufs ; if ( outputbuffer <S2SV_ModEnd> ( outputbuffer, <S2SV_ModStart>, ""invalid <S2SV_blank> size <S2SV_blank> %s\\n"", outputbuffer <S2SV_ModEnd> ) ; return",0
1070,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1071,<S2SV_ModStart> u8 ) { if ( op -> op_name ) { u32,0
1072,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1073,<S2SV_ModStart> ) - 1 <S2SV_ModEnd> ) ; if,0
1074,,0
1075,<S2SV_ModStart> vpx_codec_alg_priv_t * priv <S2SV_ModEnd> ; if ( <S2SV_ModStart> vpx_codec_alg_priv_t * priv <S2SV_ModEnd> ) { priv <S2SV_ModStart> -> cfg ; priv = vpx_codec_alg_priv_t * priv <S2SV_ModEnd> ; if (,0
1076,,0
1077,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1078,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1079,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( ctx ->,0
1080,<S2SV_ModStart> = v ; if (! IS_ERR ( vma ) ),1
1081,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1082,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if (!,0
1083,<S2SV_ModStart> ; if ( <S2SV_ModEnd> i_len ( inode,0
1084,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, ENC28J60_MICMD <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( interface, ENC28J60_MICMD <S2SV_ModEnd> ) ; }",0
1085,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1086,<S2SV_ModStart> sk_queue ) ; <S2SV_ModEnd> return 0 ;,0
1087,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null> static <S2SV_ModStart> return 0 ; if ( len <S2SV_null> <S2SV_null>,0
1088,,0
1089,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1090,,0
1091,"<S2SV_ModStart>, vdaux, vdaux <S2SV_ModEnd> ; if (",0
1092,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
1093,<S2SV_ModStart> ) + 1 <S2SV_ModEnd> ; if (,0
1094,<S2SV_ModStart> uint8 * tmp <S2SV_ModEnd> ; if (,0
1095,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1096,"<S2SV_ModStart> * buf, size_t <S2SV_ModEnd> len ) {",0
1097,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1098,<S2SV_ModStart> ret = - 1 <S2SV_ModEnd> ; if (,0
1099,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1100,"<S2SV_ModStart> ( p_stride, p_stride <S2SV_ModEnd> ) ; if",0
1101,,0
1102,"<S2SV_ModStart> ( ndo, ""%s"", length <S2SV_ModEnd> ) ) ; if",0
1103,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1104,<S2SV_ModStart> ; if ( <S2SV_ModEnd> i_len ( inode,0
1105,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
1106,<S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( & cpi,0
1107,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1108,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
1109,"<S2SV_ModStart> ctxt ) ; u32 msr_data <S2SV_ModEnd> ( ctxt, <S2SV_ModStart> ) ; if ( rc!= X86EMUL_CONTINUE ) return rc",0
1110,,0
1111,"<S2SV_ModStart> ch, ch, true",0
1112,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> int motion_denoiser_avg_denoiser_avg_avg ( int motion_avg_avg_y, int motion_mv_denoiser, int motion_mv_denoiser, int motion_magnitude, int motion_denoiser_denoising ) ; const int motion_denoiser = 0 ; int motion_denoiser_denoiser = 0 ; int motion_denoiser_denoiser_magnitude = 0 ; int motion_denoiser_mv_denoiser_mv_denoiser_denoiser = 0 ; # if CONFIG_VP9_THRESHIGHBITS2 <SV_null> <S2SV_null> <SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> dec_null> <S2SV_null> <S2S2SV_null> <SV_null>",0
1113,<S2SV_ModStart> ( sz + 1 <S2SV_ModEnd> ) ; if,0
1114,"<S2SV_ModStart>, regs, <S2SV_ModEnd> regs, &",0
1115,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
1116,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1117,<S2SV_ModStart> ( err ) <S2SV_ModEnd> ; if (,0
1118,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> S2S2SV_null> <S2SV_null>,0
1119,<S2SV_ModStart> crypto_report_comp ; strncpy <S2SV_ModEnd> ( rcomp.,0
1120,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
1121,,0
1122,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1123,"<S2SV_ModStart> ( event, <S2SV_ModEnd> size, &",0
1124,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1125,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1126,,0
1127,"<S2SV_ModStart> AcquireQuantumMemory ( dmsx, size_t <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsx <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsx <S2SV_ModEnd> ) ; if",0
1128,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
1129,<S2SV_ModStart> { return NULL <S2SV_ModEnd> ; } <S2SV_null>,0
1130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1131,<S2SV_ModStart> S2SV_null> <S2SV_null> <S2SV_null> static,0
1132,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1133,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> IMPEG2D_DECODE_ERR_ERR_ERR_DECODE_ERR ; if ( ps_dec -> u2_num_mbs_mbs_mbs_mbs_mbs_mbs_mbs_mbs_mbs_mbs_mbs_dec -> u2_num_mbs_mbs_mbs_mbs_mbs_mbs_mbs_mbs_mbs_mbs_mbs_mbs ; ps_dec -> u2_mbs_mbs_dec -> u2_num_mbs_mbs_mbs_mbs_mbs_mbs ;,0
1134,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1135,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t,0
1136,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> MACROBLOCKD * const <S2SV_ModEnd> MACROBLOCKD * const <S2SV_ModStart> MACROBLOCKD * x = xd -> <S2SV_ModEnd> ; const <S2SV_ModStart> int xd = xd -> <S2SV_ModEnd> ; MACROBLOCKD <S2SV_ModEnd> ; const int <S2SV_ModStart> = xd -> <S2SV_ModEnd> ; const <S2SV_ModStart> = xd -> <S2SV_ModEnd> ; const xd -> <S2SV_ModStart> = xd -> <S2SV_ModEnd> ; const xd -> <S2SV_ModStart> = xd -> <S2SV_ModEnd> ; xd -> <S2SV_ModStart> = xd ; tran_low_t <S2SV_ModEnd> ; xd ->,0
1137,,0
1138,"<S2SV_ModStart> src ) { memset <S2SV_ModEnd> ( src,",0
1139,"<S2SV_ModStart> = getnum ( L,",0
1140,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1141,<S2SV_ModStart> ; if ( n < 1 ) return 0 ;,0
1142,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header,0
1143,,0
1144,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
1145,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1146,"<S2SV_ModStart>, plane, vpx_reader <S2SV_ModEnd> ( w,",0
1147,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1148,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1149,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1150,"<S2SV_ModStart> ) ) ; strncpy <S2SV_ModEnd> ( name,",0
1151,,0
1152,<S2SV_ModStart> fp ) ; unlink ( RUN_LIB_FILE ) ;,1
1153,"<S2SV_ModStart> sk ) ; memset ( sk, 0, sizeof ( sk ) ) ;",0
1154,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1155,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1156,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1157,,0
1158,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1159,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1160,,0
1161,"<S2SV_ModStart>, & rlen, 0",1
1162,<S2SV_ModStart> * buf ; <S2SV_ModEnd> if (!,0
1163,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1164,"<S2SV_ModStart> * name, name, true",0
1165,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1166,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1167,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1168,,0
1169,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
1170,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1171,<S2SV_ModStart> pdev ) ; <S2SV_ModEnd> return 0 ;,0
1172,<S2SV_ModStart> credssp ) ; return NULL ;,0
1173,<S2SV_ModStart> ) return 1 <S2SV_ModEnd> ; if (,0
1174,<S2SV_ModStart> case '\\0' : if ( r == '\\0' ) { <S2SV_ModStart> r ) ; },0
1175,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1176,<S2SV_ModStart> NULL ) ; if (! VALUE ) return 0 ;,0
1177,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return 0 ;,0
1178,<S2SV_ModStart> task ) { <S2SV_ModEnd> struct p,0
1179,"<S2SV_ModStart> obj ) { jas_uchar <S2SV_ModEnd> ( buf,",0
1180,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1181,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void,0
1182,<S2SV_ModStart> = 0 ; if (! sx_check_ssegment ( ctx ) ) ) { if (! sx_check_s ( s ) ) ) { OPENSSL_LEN ; },0
1183,"<S2SV_ModStart>, code ) <S2SV_ModEnd> ; if (",0
1184,"<S2SV_ModStart> ; if ( CHECKOVERFLOW ( o, buf_size, 8 ) ) { exif_log ( CHECKOVERFLOW ( CHECKOVERFLOW, ""Short"" ) ) ; return ; } if ( CHECKOVERFLOW ( o, buf_size, buf_size, n -> order ) ) { exif_log ( CHECKOVERFLOW ( CHECKOVERFLOW, ""ExifMnoteData"" ) ) ; break ; }",0
1185,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1186,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1187,<S2SV_ModStart> ; if (,0
1188,<S2SV_ModStart> num ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_matind_t,0
1189,<S2SV_ModStart> ; if ( <S2SV_ModEnd> hdrlen < 0,0
1190,"<S2SV_ModStart> req, req <S2SV_ModEnd> ) ; if",0
1191,"<S2SV_ModStart> * buf ; size_t <S2SV_ModEnd> len ; size_t <S2SV_ModStart> ; if ( len < 4 ) { ND_TCHECK ( ndo, ""error: <S2SV_blank> of <S2SV_blank> %d\\n"", len ) ; return - 1 ; }",0
1192,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null> <S2SV_null>,0
1193,<S2SV_ModStart> ( ret ||! cm_id -> device ||,1
1194,"<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( & cb,",0
1195,<S2SV_ModStart> ( count ) ; if ( count > OE_SSIZE_MAX ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
1196,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> dentry_inode ( struct <S2SV_ModStart> dir_inode ( dir ) ; if ( dir_inode ( dir ) -> i_inode ( dir ) ) -> i_inode ( inode ) ) { <S2SV_ModEnd> return 0 ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> return 0 ;,0
1197,<S2SV_ModStart> } else { struct s_options_options * s_options = NULL ; if (! new_options ) goto fail ; } if (,0
1198,,0
1199,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1200,,0
1201,<S2SV_ModStart> return 0 ;,0
1202,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1203,,1
1204,<S2SV_ModStart> ( page ) <S2SV_ModEnd> ; if (,0
1205,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1206,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1207,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = 0 ; int ret <S2SV_ModEnd> ; if ( <S2SV_ModStart> - 1 ; if (! data ) ) return - ENOMEM ; <S2SV_ModStart> ) ) ; if (! data ) return - ENOMEM ;,0
1208,"<S2SV_ModStart> * name, NULL <S2SV_ModEnd> ) ; if",0
1209,<S2SV_ModStart> return NULL ;,0
1210,<S2SV_ModStart> ( j ) \\\n{ <S2SV_ModEnd> if ( j,0
1211,"<S2SV_ModStart>, annotation, NULL,",0
1212,,0
1213,<S2SV_ModStart> char * p <S2SV_ModEnd> ; char * <S2SV_ModStart> char * p <S2SV_ModEnd> ; if (,0
1214,"<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst_ybc,",0
1215,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1216,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1217,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mi_row ) { MACROBLOCKD * const MACROBLOCKD * const MACROBLOCK * x = & xd -> mb ; MACROBLOCKD * xd ; MACROBLOCKD * const int mi_row = & x -> mbmi_row <S2SV_ModEnd> ; MACROBLOCKD * <S2SV_ModStart> int mi_row ) { int mi_row = x -> mbmi_col ; const int mi_row = x -> mbmi_row ; int mi_row = ( x -> mbmi_row, mi_row, mi_row, mi_row, mi_col ) ; if ( x -> mbmi_col ) { if ( x -> mbmi_col ) { vp9_row = x -> mbmi_col ; } # if CONFIG_VP9_VP9_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH vp9_VP9_HIGHBITDEPTH if (",0
1218,"<S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) ; if",0
1219,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1220,<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ),0
1221,<S2SV_ModStart> skb_check ( hdr ) ) ; if (,0
1222,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> spin_lock ( &,0
1223,,0
1224,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1225,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1226,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return NULL ;,0
1227,"<S2SV_ModStart> assoc ) { sctp_rfree_frag <S2SV_ModEnd> ( sctp_frag <S2SV_ModStart> skb ) ; sctp_set_rfree_frag <S2SV_ModEnd> ( skb, <S2SV_ModStart> skb ) ; sctp_frag <S2SV_ModEnd> ( sctp_frag",0
1228,"<S2SV_ModStart> int fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) ) <S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) ) )",0
1229,"<S2SV_ModStart>, & desc, <S2SV_ModEnd> struct desc <S2SV_ModStart> return 0 ; if (!",0
1230,<S2SV_ModStart> ctx ) { vpx_free ( ctx ) ;,0
1231,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1232,<S2SV_ModStart> group = group <S2SV_ModEnd> ; if (,0
1233,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1234,"<S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image, image -> columns, screen ) ; if ( status == MagickFalse ) { InheritException ( & image ) ; return ( & image ) ; }",0
1235,,0
1236,<S2SV_ModStart> ; if ( size_t <S2SV_ModEnd> sizeof (,0
1237,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1238,<S2SV_ModStart> * buf = <S2SV_ModEnd> ; if (,0
1239,"<S2SV_ModStart>, 1,",0
1240,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1241,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1242,,0
1243,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1244,<S2SV_ModStart> ; struct ip_options_rcu <S2SV_ModEnd> ; if (,0
1245,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode",0
1246,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1247,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1248,"<S2SV_ModStart> = 0 ; memset ( p, 0, sizeof ( * 8 ) ) ;",0
1249,"<S2SV_ModStart> if (! js_doregexec ( J, <S2SV_ModEnd> re -> prog",1
1250,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if (,0
1251,"<S2SV_ModStart> key_data ) { if ( KEY_KEY_DATA == NULL ) { krb_data_data_data_data_data_data = NULL ; return NULL ; } <S2SV_ModEnd> key_data_data <S2SV_ModStart> key_data ) ; if ( key_data == NULL ) { krb_data_data_data_data_data_data_size ( key_data, & key_data, key_size ) ; return NULL ; } <S2SV_ModEnd> ; if ( <S2SV_ModStart> KEY_DATA ; if ( key_data -> len < 0 ) return NULL ; if ( key_data_data_size ) { krb8_data_data_data_data_data_data_data_data_size ( key_data, & key_data, key_data, & key_data ) ) ; if ( key_data == NULL ) { return NULL ; } <S2SV_ModEnd> ; }",0
1252,,0
1253,,0
1254,<S2SV_ModStart> ) ; } <S2SV_ModEnd> return 0 ;,0
1255,,0
1256,"<S2SV_ModStart>, int ret <S2SV_ModEnd> ; if (",0
1257,<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * * ),1
1258,"<S2SV_ModStart>, 1, <S2SV_ModEnd> ) ; if",0
1259,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1260,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1261,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return 0 ;,0
1262,<S2SV_ModStart> ; if ( kvm_vma_vma ) { ret = - 1 ; return - 1 ; } <S2SV_ModStart> ) ) ; } if ( ret <S2SV_null>,0
1263,"<S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
1264,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1265,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
1266,<S2SV_ModStart> ) ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
1267,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1268,<S2SV_ModStart> ; KADM5_MEM ; mutex_lock ( & KADM5_M5_K ) ; mutex_lock ( & KADMEM ) ; mutex_unlock ( & KADM5_K ) ;,0
1269,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> m_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1270,<S2SV_ModStart> ++ ) { if ( r1 == YR_OBJECT_OBJECT * obj_arena ) { yr_arena = r1 ; break ; } <S2SV_ModStart> r1 ) ; },0
1271,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
1272,<S2SV_ModStart> { rq = <S2SV_ModEnd> hctx -> tags,0
1273,<S2SV_ModStart> ( psf = psf_allocate ( <S2SV_ModEnd> ) ) ==,1
1274,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1275,,0
1276,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) { memset <S2SV_ModEnd> ( xd,",0
1277,<S2SV_ModStart> ) ) { <S2SV_ModEnd> hdr -> h,0
1278,"<S2SV_ModStart> -> rows = MagickMax ( number_planes_filled, number_filled ) <S2SV_ModEnd> ; number_filled =",0
1279,"<S2SV_ModStart> idx, - 1",0
1280,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1281,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & packet ) )",0
1282,<S2SV_ModStart> = 0 ; ps_dec -> pu4_ofsts_mat = 0 ;,0
1283,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> if (!,0
1284,<S2SV_ModStart> args ) ; <S2SV_ModEnd> return 0 ;,0
1285,"<S2SV_ModStart> int mptctl_iocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mptctl_ioctl_info ( MPT_ADAPTER * ioc, <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } dctlprintk",0
1286,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1287,<S2SV_ModStart> mnt. mnt_flags |= MNT_LOCK_NODEV ; if ( mnt -> mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt.,0
1288,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1289,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int i ; uint8_t * <S2SV_ModEnd> sizeof ( uint8_t,0
1290,"<S2SV_ModStart>, fmode, fd <S2SV_ModEnd> ) ; if",0
1291,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_encode ( struct <S2SV_ModStart> char buf_len ) { int err = - 1 ; char * pkt_len = * pkt_len ; <S2SV_ModStart> return err ; } if (,0
1292,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1293,<S2SV_ModStart> ) ; } <S2SV_ModEnd> return 0 ;,0
1294,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static struct <S2SV_ModStart> msg ) { struct rcu_data * rd_data ; struct rcu_data * rd_read_data ; <S2SV_ModStart>, & rcu_read ) ; if ( <S2SV_ModEnd> ( & <S2SV_ModStart>, sizeof ( ) ) ) return - EINVAL ; <S2SV_ModStart> return - EINVAL ;",0
1295,,0
1296,"<S2SV_ModStart> ; if ( CHECKOVERFLOW ( data, buf_size, 8 ) ) { if ( CHECKOVERFLOW ( CHECKOVERFLOW, EXIF_LOG_CODE_DATA, EXIF_CORRUPT_DATA, ""ExifMnoteData"" ) ) { exif_log ( o, EXIF_LOG_DEBUG, ""ExifMnoteData"" ) ; return ; }",0
1297,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> break ; },0
1298,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1299,<S2SV_ModStart> * dir ; <S2SV_ModEnd> spin_lock ( &,0
1300,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> S2SV_null> <S2SV_null> static int <S2SV_ModEnd> options_null> <S2SV_null> static int,0
1301,<S2SV_ModStart> ] + 1 <S2SV_ModEnd> ) ; if,0
1302,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1303,"<S2SV_ModStart> = 0 ; memset ( req, sizeof ( * ) ) ;",0
1304,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1305,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( data <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [",0
1306,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1307,"<S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ;",0
1308,<S2SV_ModStart> = MagickFalse ; break <S2SV_ModEnd> ; } image,0
1309,"<S2SV_ModStart> error ; } memset ( req, 0, sizeof ( req ) ) ;",0
1310,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1311,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return - 1,0
1312,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1313,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> sizeof ( int <S2SV_ModStart> = 0 ; if ( strlen ( p ) ) { cJSON_malloc ( p ) cJSON_malloc ( p, ""malloc"" ) ; return 0 ; } if ( len == 0 ) { cJSON_malloc ( char * ) cJSON_malloc ( p ) ; if ( cJSON_malloc ( p ) == 0 ) { cJSON_malloc ( p, ""malloc"" ) ; return 0 ; } if ( * ptr == 0 ) { cJSON_malloc ( * ) cJSON_malloc ( * ) ; if ( len == 0 ) { cJSON_malloc ( * ) ; cJSON_malloc ( p ) ; if (! cJSON_malloc ( p ) ) { cJSON_malloc ( p, ""malloc"" ) ; return 0 ; } else { cJSON_malloc ( * ) ; if (! out ) return 0 ; } cJSON_malloc ( p ) ; ptr ) { cJSON_malloc ( cJSON_malloc ( p,",0
1314,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1315,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1316,<S2SV_ModStart> unsigned short ) <S2SV_ModEnd> buffer [ 0,0
1317,<S2SV_ModStart> y3 ) { sprintf ( outputbuffer <S2SV_ModEnd> ) ; },0
1318,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct struct <S2SV_ModStart> -> io_context * task <S2SV_ModEnd> ; struct <S2SV_ModStart> -> io_lock ( <S2SV_ModEnd> ) ; struct <S2SV_ModStart> -> io_context ) ; if ( task <S2SV_ModEnd> ) { <S2SV_ModStart> -> io_context ) ; task_unlock ( task <S2SV_ModEnd> ) ; },0
1319,"<S2SV_ModStart>, regs, <S2SV_ModEnd> regs, &",0
1320,"<S2SV_ModStart> size, 0, 0",0
1321,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> int i ; <S2SV_ModStart> unsigned char * data ; int ret = <S2SV_ModEnd> ; if ( <S2SV_ModStart> dev -> data == 0 ) return - 1 <S2SV_ModEnd> ; } if (,0
1322,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> ; if ( ctx -> frame_parallel_decode ) { vp9_decode ( ctx, ctx, ctx, ctx -> frame_parallel_decode ) ; return VPX_CODEC_INCAPABLE ; }",0
1323,,0
1324,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1325,<S2SV_ModStart> req ) ; <S2SV_ModEnd> if ( req,0
1326,"<S2SV_ModStart> ; # line 23 <S2SV_ModEnd> ""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y"" ) ; <S2SV_ModStart> : # line 9 <S2SV_ModEnd> ""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y"" ) ; <S2SV_ModStart> } # line 954 <S2SV_ModEnd> ""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y"" ) ; <S2SV_ModStart> } # line 8 <S2SV_ModEnd> ""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y"" ) ; <S2SV_ModStart> } # line 954 <S2SV_ModEnd> ""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y""grammar.y"" break ;",0
1327,"<S2SV_ModStart> s, port",0
1328,"<S2SV_ModStart>, int ret <S2SV_ModEnd> ; if (",0
1329,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1330,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
1331,<S2SV_ModStart> <S2SV_null> <S2SV_null> struct,0
1332,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1333,<S2SV_ModStart> ; } } free ( free ) ;,0
1334,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1335,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = 0 ; char * const char * cp = 0 ; int <S2SV_ModEnd> ; char * <S2SV_ModStart> ; if ( * cp == '\\0' ) { if ( <S2SV_ModEnd> == '\\0' <S2SV_ModStart> == '\\0' ) ) { <S2SV_ModEnd> = '\\0' ; <S2SV_ModStart> = '\\0' ; } <S2SV_ModEnd> if ( cp <S2SV_ModStart> == '\\0' ) { <S2SV_ModEnd> if ( cp ++ ; <S2SV_ModStart> = '\\0' ; } else { if ( * cp == '\\0' ) { <S2SV_ModEnd> = '\\0' ; <S2SV_ModStart> == '\\0' ) { <S2SV_ModEnd> = '\\0' ; <S2SV_ModStart> = '\\0' ; } else { <S2SV_ModEnd> if ( cp ++ ; <S2SV_ModStart> == '\\0' ) { if ( cp == '\\0' ) { <S2SV_ModEnd> = '\\0' ; <S2SV_ModStart> = '\\0' ; } else { const char * cp ++ ; <S2SV_ModEnd> = '\\0' ; <S2SV_ModStart> = '\\0' ; if ( cp == '\\0' ) { <S2SV_ModEnd> = '\\0' ; <S2SV_ModStart> = '\\0' ; } else { if ( * cp ++ ;,0
1336,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1337,<S2SV_ModStart>!= NULL <S2SV_ModEnd> ; if (,0
1338,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1339,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1340,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1341,,0
1342,,0
1343,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1344,"<S2SV_ModStart> -> id ; memset ( & id, 0, sizeof ( id ) ) ;",0
1345,<S2SV_ModStart> dev ) ; <S2SV_ModEnd> return 0 ;,0
1346,"<S2SV_ModStart> * data, size_t <S2SV_ModEnd> len, int",0
1347,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1348,<S2SV_ModStart> = 0 ; if ( len < 0 ) return - 1 ;,0
1349,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode",0
1350,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1351,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1352,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1353,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1354,"<S2SV_ModStart> ) return ; if <S2SV_ModEnd> ( interface,",0
1355,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
1356,,0
1357,"<S2SV_ModStart> ; if ( CHILD ( n, 1 ) == NULL ) return NULL ; if (",0
1358,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> MACROBLOCKD * const <S2SV_ModStart> intra_stride ) { const MACROBLOCKD * const MACROBLOCKD * const int xd = <S2SV_ModEnd> ; MACROBLOCKD *,0
1359,,0
1360,,0
1361,,0
1362,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
1363,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int ion_null> <S2SV_null>,0
1364,"<S2SV_ModStart> * cm, vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> cm ) { vpx_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm ) { vpx_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_write_literal <S2SV_ModEnd> ( wb,",0
1365,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1366,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context ->,0
1367,"<S2SV_ModStart>, annotation, NULL,",0
1368,<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( x ->,0
1369,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( interface, ENC624J600_TX_TX_SIZE <S2SV_ModEnd>, interface, <S2SV_ModStart> ( interface, ENC624J600_ERR, ENC624J600_ST <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC624J600_R, ENC624J600_T <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_ST <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_TIF <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_ST <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_ST <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_ST <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_ERR, ENC624J600_ST <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_ST <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_ECON1 ) ; status & ENC624J600_ST <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface",0
1370,,0
1371,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
1372,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int parse_options ; VALUE parse_options ( rb_schema, parse_options ) ; VALUE parse_options ( parse_options, rb_intern ( ""ParseOptions"" ) ) ; if ( parse_options ) == 0 ) { VALUE parse_options ( rb_options ) ; rb_intern ( rb_intern ( ""ParseOptions"", & rb_intern ( rb_options ) ) ) ; if ( rb_get ( rb_intern ( rb_intern ( ) ) ) ) == 0 ) { ERROR ( ""ParseOptions"", ""ParseOptions"" ) ; return NULL ; } if ( rb_intern ( rb_intern ( rb_args ) ) == 0 ) { rb_get ( rb_intern ( ""ParseOptions"", ""ParseOptions"" ) ) ; rb_const_const_get ( rb_options ) ; rb_const_const_get ( rb_options ) ; rb_get ( rb_intern ( """,0
1373,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> vma ; uint8_t <S2SV_ModStart> uint8_t fgoff ; uint8_t fgoff = vma -> vm_start <S2SV_ModEnd> ; uint8_t <S2SV_ModStart>, vma -> vm_start, vma -> vm_start, vma -> <S2SV_ModStart> mm_start ) >> PAGE_SHIFT ; if (! vma -> vm_start ) return - ENOMEM <S2SV_ModEnd> ; memset (",0
1374,,0
1375,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1376,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
1377,<S2SV_ModStart> ; if ( <S2SV_ModEnd> arg >= cdi,1
1378,<S2SV_ModStart> out_free ; } err = - EINVAL ; if (,0
1379,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1380,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int len ; if ( len <S2SV_null> <S2SV_null>,0
1381,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1382,<S2SV_ModStart> cm ) ; <S2SV_ModEnd> return rc ;,0
1383,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( daddr,0
1384,"<S2SV_ModStart> ( interface, KSZ8851_ISRX <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR1 <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_RX1 ) ; if ( ( ( status & KSZ8851_R, KSZ8851_R, KSZ8851_R, KSZ8851_R ) )!= 0 ) { if ( ( ( ( ( KSZ8851_R, KSZ8851_R, KSZ8851_R, KSZ8851_R, KSZ8851_R, KSZ8851_R, KSZ8851_ISR, KSZ8851_R, KSZ8851_R, KSZ8851_R ) ) ; if ( ( ( ( ( ( interface, KSZ8851_R, KSZ8851_ISR, KSZ8851_ISR, KSZ8851_R, KSZ8851_ISR, KSZ8851_R, KSZ8851_R ) ) ; if ( ( ( ( ( interface, KSZ8851_R, KSZ8851_R, KSZ8851_",0
1385,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1386,<S2SV_ModStart> pkt ) ; if (! pd_set ( ptl ) ) goto out ;,0
1387,"<S2SV_ModStart>, arg, <S2SV_ModEnd> ) ; }",0
1388,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1389,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return - 1,0
1390,"<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( xd,",0
1391,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> v_null> <S2SV_null>,0
1392,<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( index,0
1393,<S2SV_ModStart> ) ) ; kfree ( sk ) ;,0
1394,<S2SV_ModStart> ) ; } <S2SV_ModEnd> return 0 ;,0
1395,"<S2SV_ModStart> ) ; } if ( optlen > sizeof ( opts ) ) { printf ( ""error"" ) ; goto error ; }",0
1396,<S2SV_ModStart> ( LOG_DEBUG <S2SV_ModEnd> ) ; },0
1397,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1398,<S2SV_ModStart> ) ) ; if ( len < 0 ) continue ;,0
1399,<S2SV_ModStart> 2 ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,1
1400,<S2SV_ModStart> 0 ; } <S2SV_ModEnd> lock_irq ( &,0
1401,,0
1402,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
1403,<S2SV_ModStart> (! handle ||! SecIsValidHandle ( handle ),1
1404,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1405,<S2SV_ModStart> old_dentry ) ; mutex_lock ( & new_lock ) ;,0
1406,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1407,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1408,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0,0
1409,,0
1410,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mb2SV_null> <S2SV_null> static PREDICTION_MODE_INFO ( MACROBLOCKD * cpi, MACROBLOCKD * xd, int mi_row, int mi_row, int mi_row, xd -> mi_row, mi_row, xd -> mbmi_row, xd -> mbmi_col ) ; if ( cpi -> mi_row == 0 ) { vp9_row_row_row = 0 ; }",0
1411,<S2SV_ModStart> priv_flags &= ~ ( netdev ) <S2SV_ModEnd> ; dev ->,0
1412,<S2SV_ModStart> NULL ; } <S2SV_ModEnd> if (!,0
1413,"<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 ) <S2SV_ModEnd> ; pixels =",0
1414,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( p,0
1415,"<S2SV_ModStart>, xfs_dinode_fork ( dip, <S2SV_ModEnd> ) ; if",0
1416,,0
1417,<S2SV_ModStart> ) ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
1418,<S2SV_ModStart> event ) ; <S2SV_ModEnd> event_unlock ( event,0
1419,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ] ) ; ND_TCHECK ( tptr + 1 ) ; ND_TCHECK ( tptr + 1 ) ;,0
1420,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1421,,0
1422,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0 ;,0
1423,,0
1424,<S2SV_ModStart> r ) ; <S2SV_ModEnd> if ( rb,0
1425,"<S2SV_ModStart> ptr ) { if ( strncmp ( ptr, ""r <S2SV_blank> "", ptr, strncmp <S2SV_ModEnd> ( ptr,",0
1426,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1427,"<S2SV_ModStart> = 0 ; memset ( & info -> data, 0, sizeof ( info -> data ) ) ; if ( info -> count ) return - ENOMEM ;",0
1428,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0 ;,0
1429,<S2SV_ModStart> ctxt ) ; <S2SV_ModEnd> if (!,0
1430,"<S2SV_ModStart> size, NULL <S2SV_ModEnd> ) ; }",0
1431,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; dev ->,0
1432,,0
1433,"<S2SV_ModStart> ( interface, ENC624J600_EIR <S2SV_ModEnd>, interface -> <S2SV_ModStart> ( interface, ENC624J600_ECON2 ) <S2SV_ModEnd> ; interface -> <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd>, interface, ENC624J600_ECON2 ) <S2SV_ModStart> ( interface, ENC624J600_MAH <S2SV_ModEnd> ) ) ; if <S2SV_ModStart> ( interface, ENC624J600_EIR_MAH <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd> ) ; if",0
1434,<S2SV_ModStart> ( psf -> header. len <S2SV_ModEnd> sizeof ( psf,0
1435,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1436,<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> ; if (,0
1437,<S2SV_ModStart>!= 1 <S2SV_ModEnd> ; if (,0
1438,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null> <S2SV_null> SV_null> <S2SV_null> S2S2SV_null> <S2SV_null> static PREDICTION_frame = ( VP9_COMP2S2SV_null> <S2S2SV_null> <S2S2SV_null>,0
1439,<S2SV_ModStart> ) ; } <S2SV_ModEnd> if ( c,0
1440,<S2SV_ModStart> = 0 ; },0
1441,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1442,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1443,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
1444,<S2SV_ModStart> char * name <S2SV_ModEnd> ; if (,0
1445,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> } else { const vpx_codec_ctx_t <S2SV_ModEnd> ( svc_ctx, <S2SV_ModStart> ) ) { const char * svc_t <S2SV_ModEnd> = get_params ( <S2SV_ModStart> ) ; } else { if ( svc_ctx -> svc_type == VPX_CODEC_INVALID_PARAM_TYPE ) { return 1 ; } else <S2SV_ModEnd> } else <S2SV_ModStart> } else { <S2SV_ModEnd> return res ;",0
1446,<S2SV_ModStart> event ) ; <S2SV_ModEnd> event_unlock ( event,0
1447,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> KADM5_data_data_data_data_data_data_data <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return KADM5_POLICM5_POLICY <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( mask & KADM5_BADM5_POLIC ) return KADM5_POLICY <S2SV_ModEnd> ; if (,0
1448,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> plane < 0,0
1449,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1450,,0
1451,,1
1452,<S2SV_ModStart> rc ; },0
1453,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> NULL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1454,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1455,<S2SV_ModStart> size ) ; if ( len < 0 ) return - 1 ;,0
1456,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1457,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1458,<S2SV_ModStart> out_free ; } if (,0
1459,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = cpi -> rc ; if ( cpi -> oxcf. rc_mode == VP9EncoderConfig ) { const int rc = ( cpi -> oxcf. avg_frame_frame_bandwidth, cpi -> oxcf. bit_depth ) ; if ( cpi -> oxcf. bit_depth > ( cpi -> oxcf. bit_depth ) ) { int rc -> oxcf. bit_depth = ( cpi -> oxcf. bit_depth ) ; # else if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH ) return ( cpi -> oxcf. bit_depth ) ; } # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> oxcf. bit_level >= MIN ( cpi -> oxcf. bit_depth ) ) return - 1 ; } <S2SV_ModEnd> ; } <S2SV_ModStart> = ( rc -> avg_frame_frame_bandwidth <S2SV_ModEnd> rc -> <S2SV_ModStart> = ( cpi -> rc -> rc -> rc -> avg_frame_frame_frame_frame_frame_frame_frame",0
1460,,0
1461,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_read_bit ( vpx_read_bit <S2SV_ModEnd> * r ) <S2SV_ModStart> int r ) { vpx_read_literal <S2SV_ModEnd> ( r,",0
1462,"<S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( ndo, 2 ) ; <S2SV_ModStart> ) ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; ND_PRINT ( ndo, "" <S2SV_blank> TCHECK_32BITS ( ndo, "" <S2SV_blank> %u"" ) ) ; ND_PRINT ( ndo, EXTRACT_32BITS ( ndo, "")"" ) ) ; return ; }",0
1463,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1464,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1465,"<S2SV_ModStart> ; # line 10 <S2SV_ModEnd> ""grammar.y""grammar.c""grammar.y"" { yr_node_node_node_grammar.y""grammar.y"" { yr_node_grammar.y"" { yr_node_grammar.y"" { yr_node_grammar.y"" { yr_node_grammar.y"" { yr_node_node_grammar.y"" { yr_node_grammar.y"" { yr_node_node_grammar.y"" { yr_node_node_grammar.y"" { yr_node_grammar.y"" { yr_node_node_grammar.y"" { yr_node_node_grammar.y"" { yr_node_node_node_node_node_node_node_grammar.yvalue ( ( ( * yyvaluep ) ) ) ; } # line 1064_node_node_node_node_grammar.y""hex_grammar.y"" { yr_node_node_node_node_node_node_node_node_node_node_node_node_node ) ; } # line",0
1466,,0
1467,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const MACROBLOCKD * const xd = & td -> mb ; MACROBLOCKD * const MACROBLOCKD * const xd = & td -> mb ; MACROBLOCKD * const vp9_coeff = & td -> mb ; MACROBLOCKD * const vp9_coeff = x -> mb ; MACROBLOCKD * const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * const mb ; const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * const mb ; const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t,0
1468,,0
1469,<S2SV_ModStart> ; if ( <S2SV_ModEnd> shm_perm,0
1470,"<S2SV_ModStart> * ctx, fmode_t fmode,",0
1471,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return 0 ;,0
1472,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
1473,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1474,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> size = 0,0
1475,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, 0 )",0
1476,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1477,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1478,"<S2SV_ModStart> mq_ops ) ; blk_queue ( q, q ) ;",0
1479,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1480,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return NULL ;,0
1481,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1482,<S2SV_ModStart> buf + 1 <S2SV_ModEnd> ) { buf,0
1483,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> read_set_table ( struct <S2SV_ModStart> = NULL ; if (! ( s_table_table_table ( & s_table_end ) ) ) return NULL <S2SV_ModEnd> ; if (,0
1484,<S2SV_ModStart> new ) { <S2SV_ModEnd> const char *,0
1485,<S2SV_ModStart> cm ) { memset <S2SV_ModEnd> ( cm ->,0
1486,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> module_type_type ) { if ( type_type == NULL ) { <S2SV_ModStart> return 0 ; } if ( type_type == NULL ) { <S2SV_ModStart> return 0 ; } <S2SV_ModEnd> return 0 ; <S2SV_ModStart> return 0 ; } if ( type_type == TYPE_TYPE_COMMENT ) { if ( cpi -> type_type == NULL ) return 0 ; <S2SV_ModStart> return 0 ; } if ( is_type == NULL ) { assert ( cpi -> type_type == NULL ) { assert ( cpi -> type_type == NULL ) ; if ( is_type == NULL ) return NULL ; } <S2SV_ModStart> return 0 ; } if ( has_type == NULL ) { if ( is_type == NULL ) { if ( cpi -> type_type == NULL ) { assert ( is_type == NULL ) ; } else { assert ( is_type == NULL ) ; if (! type_type == NULL ) return NULL ) { <S2SV_ModStart> return 0 ; } if ( is_type == NULL ) { if ( is_type == NULL ) return false ; } else { if ( type_type == NULL ),0
1487,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1488,<S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; },0
1489,"<S2SV_ModStart> * cpi, <S2SV_ModEnd> ) { #",0
1490,<S2SV_ModStart> ) ) ; if ( srb_unlock_inode ( sr ) ) { rb_error ( smb ) ; },0
1491,<S2SV_ModStart> ; if ( cp == 0 ||,0
1492,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> const char * <S2SV_ModStart> char * s = strbuf [ 0 ] ; int <S2SV_ModEnd> ; int <S2SV_ModStart> = '\\0' ; if ( strlen ( strlen ( str ) ) == '\\"" ) { return 1 ; } <S2SV_ModEnd> return 0 ; <S2SV_ModStart> = '\\0' ; if (! strlen ( str ) ) { if ( strlen ( str, ""\\"" ) ) { if ( strlen ( str ) ) ; return 0 ; } <S2SV_ModEnd> return 0 ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> return 0 ; <S2SV_ModStart> ) ) { if (! strlen ( s, '\\n"" ) { if (! strlen ( str ) ) ) { return 1 ; } <S2SV_ModEnd> return 0 ; <S2SV_ModStart> ) ; } if (! strlen ( strlen ( * ) ) { if (! strlen ( str ) ) ) { return 1 ; } <S2SV_ModEnd> return 0 ; <S2SV_ModStart> 0 ; <S2SV_ModStart> ) ) { if (! strlen ( strlen ( strcmp ( ""Invalid <S2SV_blank> code == '\\n"" ) ) ; return 1 ; } if ( strcmp (",0
1493,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> ip_random_bytes ( struct <S2SV_ModStart> ip_id_random_bytes ( & net -> ipv4. ip_id_key <S2SV_ModEnd>, sizeof ( <S2SV_ModStart>, hash <S2SV_ModEnd>, sizeof (",0
1494,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj,",0
1495,"<S2SV_ModStart> void write_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_prob <S2SV_ModEnd> * w,",0
1496,,0
1497,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1498,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> err = - ENO,0
1499,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1500,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1501,"<S2SV_ModStart> ( arg, ""%s"" <S2SV_ModEnd> ) ; else",0
1502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> const int <S2SV_ModStart> void * tile_col ) { VP9_COMMON * tile_cols = & cpi -> tile_cols ; int tile_cols = & cpi -> tile_cols [ tile_col ] ; int tile_row * tile_row * tile_row = & cpi -> tile_cols [ tile_row ] ; int tile_row * tile_row * tile_row * tile_col = & cpi -> tile_cols [ tile_row ]. tile_row ] ; int tile_row * tile_col = vpx_bc <S2SV_ModEnd> ; int <S2SV_ModStart> ; vpx_read <S2SV_ModEnd> ( & <S2SV_ModStart> ) ) { vpx_bc <S2SV_ModEnd> ; vpx_read_bc <S2SV_ModStart> ; vpx_bc <S2SV_ModEnd> ( & <S2SV_ModStart> ) ) { vpx_bc <S2SV_ModEnd> ( & <S2SV_ModStart> { vpx_bc <S2SV_ModEnd> ( & cpi -> <S2SV_ModStart> ) ) ; } # if CONFIG_VP9_HIGHBITDEPTH,0
1503,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> p9_loop_frame ( VP9_COMMON <S2SV_ModStart> * pbi, pbi -> frame_parallel_decode ) { VP9_COMMON * const cm = & pbi -> common ; MACROBLOCKD * const pbi -> frame_worker = & pbi -> common ; MACROBLOCKD * const cm -> frame_worker = & pbi -> pbi -> frame_data ; if ( pbi -> frame_worker == NULL ) { vp9_get_context ( pbi, pbi, pbi, pbi, pbi, pbi, pbi -> common ) ; vpx_get_context ( pbi, pbi, pbi, pbi, pbi, pbi -> common ) ; if ( pbi -> common ) { vpx_free ( pbi -> common ) ; vpx_free ( pbi -> frame_worker ) ; vpx_clear ( pbi, pbi, pbi -> common ) ; }",0
1504,<S2SV_ModStart> ( s ) <S2SV_ModEnd> ; if (,0
1505,,0
1506,<S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ; if ( opt -> opt.,0
1507,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1508,<S2SV_ModStart> ; vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( ctx -> flags & ctx -> flags & VPX_CODEC_OK ) { if ( ( ctx -> flags & VPX_CODEC_OK ) ) { return VPX_CODEC_OK ; } <S2SV_ModEnd> if ( ctx <S2SV_ModStart> ; if ( ctx -> flags & ctx -> flags & VPX_CODEC_OK ) { goto fail ; } if ( ctx -> flags & VPX_CODEC_OK ) { if ( ctx -> flags & VPX_IMG_F_FMT_HIGHBITDEPTH ) { if ( ctx -> flags & ( ctx -> flags & VPX_CODEC_OK ) ) { goto fail ; } if ( ctx -> flags & VPX_CODEC_OK ) { if ( ctx -> flags & VPX_CODEC_OK ) goto fail ; } else { if ( ctx -> flags & VPX_CODEC_OK ) { goto fail ; },0
1509,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> if ( ctx,0
1510,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct <S2SV_ModStart> int mnt_ns ) { struct mnt_ns * mnt_ns * mnt_ns ; struct mnt_ns = mnt_ns ; struct mnt_ns * mnt_ns = mnt_ns ( struct mnt_ns ) ; if (! mnt_ns ) { return - ENOMEM ; } <S2SV_ModStart> ( m ) ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ) ) { goto out ; } if (! mnt_ns -> mnt_ns -> mnt_ns ) { if ( path_ns -> mnt_ns ) { goto out ; } if (! target ) { goto out ; } if ( p -> mnt_ns ) { if ( parent -> mnt_ns -> mnt_ns -> mnt_ns -> mnt_ns ) { goto out ; } } } if (! target ) { goto out ; } if (! target ) { goto out ; } if (! target ) { goto out ; } <S2SV_ModEnd> ; },0
1511,"<S2SV_ModStart>, & len, 0",1
1512,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1513,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1514,<S2SV_ModStart> { jas_uchar <S2SV_ModEnd> ; if (,0
1515,"<S2SV_ModStart> int fout, int",0
1516,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static VP9_COMMON * const MACROBLOCKD * const MACROBLOCKD * xd = xd -> mb ; MACROBLOCKD * const MACROBLOCKD * const x = & td -> mb ; MACROBLOCKD * const xd = & td -> mb ; MACROBLOCKD * const x -> mb_mode = & x -> mbmi. mbmi. mbmi. mb ; const int xd = & cpi -> td. mbmi. mbmi. mbmi. mb_ext = & td -> mbmi. mb_ext ; const int bsize = x -> mbmi_ext = x -> mbmi_ext ; const int bsize = x -> mbmi_ext ; const int bsize = x -> mbmi_ext ; const int x -> mbmi. segment_id = & cpi -> oxcf -> mb_mode == BLOCK_MODE_MODE_MODE_MODE_8X8X8X8,0
1517,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> skb2SV_null> static int rc ; int rc ; int rc = 0 ; int rc = - EINVAL ; <S2SV_ModStart> ) ) ; if (! ctx -> tfm ) return - EINVAL ; <S2SV_ModStart> ; rc = <S2SV_ModEnd> ; rc = <S2SV_ModStart> ; if ( <S2SV_ModEnd> ) ) { rc = <S2SV_ModStart> - EINVAL ; goto out_encrypted <S2SV_ModEnd> ; } if ( <S2SV_ModStart> ) ) ; goto out_set <S2SV_ModEnd> ; if,0
1518,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModEnd> ; } <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1519,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = AVERROR_INVALIDDATA ; if ( AVERROR_INVALIDDATA ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> = AVERROR_INVALIDDATA ; if ( x >= 0 ) return AVERROR_INVALIDDATA ;,0
1520,,0
1521,,0
1522,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1523,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } < 0,0
1524,<S2SV_ModStart> path ) ; <S2SV_ModEnd> out : return,1
1525,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null,0
1526,"<S2SV_ModStart>, y, MagickMin <S2SV_ModEnd> ( 4,",0
1527,<S2SV_ModStart> ; struct ip_options_rcu <S2SV_ModEnd> ; if (,0
1528,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1529,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1530,"<S2SV_ModStart> file ) { fclose ( fd, O_CREAT | O_CREAT | O_NOFOLLOW | O_CREAT | O_NOFOLLOW | O_NOFOLLOW | O_CREAT | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_CREAT | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_CREAT | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_CREAT | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_CL ) ; if ( fd!= NULL ) { fclose ( fd ) ; if ( fd!= - 1 ) { fclose ( fd ) ; if ( fclose ( fd ) == - 1 ) { fclose ( fd ) ; } if ( fclose ( fd ) == - 1 ) { fd = - 1 ; fclose ( fd ) ; fclose ( file ) ; fclose ( file ) ;",0
1531,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1532,<S2SV_ModStart> y2 ) { sprintf ( outputbuffer <S2SV_ModEnd> ) ; },0
1533,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1534,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1535,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; if (,0
1536,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1537,"<S2SV_ModStart> pbi ) { memset <S2SV_ModEnd> ( pbi,",0
1538,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1539,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1540,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
1541,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1542,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1543,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1544,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1545,<S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> coef_probs [ tx_size,0
1546,"<S2SV_ModStart> return ; } memset <S2SV_ModEnd> ( r,",0
1547,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null> <S2SV_null> static if ( d -> data ) { state = 0 ; state -> data ; state -> data [ 0 ] = 0x0 ; state -> data [ 0 ] = 0x0 ; state -> data [ 0 ] = 0x0 ; state -> data [ 0 ] = 0x0 ; state -> data [ 0 ] = 0xe ; state -> data [ 0 ] = 0x0 ; state -> data [ 0 ] = 0x0 ; state -> data [ 1 ] = 0xe ; state -> data [ 0 ] = 0 ] = 0x0 ; state -> data [ 1 ] = 0x0 ; state -> data [ 1 ] = 0xe ; state -> data [ 1 ] = 0 ] = 0x0 ; state -> data [ 1 ] = 0xe ; state -> data [ 1 ] = 0xe ; state -> data [ 0 ] = 0 ] ; state -> data [ 1 ] ; state -> data [ 0 ] = 0xe ; state -> data [ 1 ] = 0 ] = 0xe ;,0
1548,<S2SV_ModStart> ; vpx_codec_alg_priv_t * ctx <S2SV_ModEnd> ; if (,0
1549,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mv_stride ) { vp9_variance8x8x8_pixel_variance8 ( vp9_variance8x16, vp9_variance8x16, vp9_variance8_vari_vari_variance8x8x16, <S2SV_ModEnd>, xd_variance8, <S2SV_ModStart> 0 ) ; if ( mv_variance8_type == 0 ) { vp9_variance8_variance8_variance8_variance8 ( vp9_variance8_variance8x16, vp9_variance8_stride, vp9_variance8, vp9_variance8x8x8_variance8x8, vp9_variance8, vp9_variance8_vari_vari_variance8, vp9_variance8 ) ; return ; }",0
1550,<S2SV_ModStart> return NULL ; if ( buf [ 0 ] == '\\0' ) { return NULL ; },0
1551,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 2S2SV_null> static int <S2SV_ModEnd> mV_null> static <S2SV_ModStart> = cJSON_CreateNumber ( cJSON, <S2SV_ModEnd> malloc ( c",0
1552,<S2SV_ModStart> task ) ; if ( task -> tk_rebind ) goto exit ;,0
1553,"<S2SV_ModStart>, n ) ; if ( w == NULL ) return 0",1
1554,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1555,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> struct vpx_ctx * <S2SV_ModStart> NULL ) { VP9_COMMON * const VP9_COMMON * const MACROBLOCKD * const MACROBLOCKD * const <S2SV_ModEnd> = 0 ; <S2SV_ModStart> int i ; vpx_free ( pbi, pbi, <S2SV_ModEnd> ) ; const int <S2SV_ModStart> = 0 ; vpx_free ( pbi, pbi, pbi -> mb ) ; if ( pbi -> num_tile_data == NULL ) { VP9_COMMON * const uint8_t * const uint8_t * const uint8_t = & pbi -> num_t ) ; const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t ; const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * ) ; const uint8_t * const uint8_t * const uint8_t",0
1556,<S2SV_ModStart> ; if ( len < 8 ) continue ;,0
1557,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_mode_mode_mode ( seg, VP9_COMMON <S2SV_ModStart> ) ) { vp9_get_rd ( cm, cm, cm, cm -> segid, xd ) ; if ( segfeature_active_active_active ( seg, cm -> seg, cm -> seg, cm -> segid, cm -> seg, xd ) ) { if ( segfeature_active_mode == KEY_FRAME ) { vp9_FRAME_FRAME_FRAME ( cm -> seg, cm -> segid, segment_id, cm -> segid, cm -> seg, cm -> seg_id, cm -> segid, cm -> segid ) ; if (! seg_active_active_active ( cm -> seg, cm -> segid ) { if (! seg -> seg_active_active ( cm -> seg, cm -> segid, cm -> seg, cm -> seg, cm -> seg, cm ->",0
1558,<S2SV_ModStart> if ( outputbuffer <S2SV_ModEnd> ) { int,0
1559,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1560,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1561,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1562,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1563,<S2SV_ModStart> -> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock,0
1564,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1565,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1566,,0
1567,"<S2SV_ModStart>, & buf_size, 0",0
1568,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> sock_socket_read_write ( & ctx -> s_socket, NULL <S2SV_ModEnd> ) ; int <S2SV_ModStart> NULL ) { if (! ctx -> s_read_socket ( c ) ) return NULL ; }",0
1569,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> struct struct sockaddr * ctx = NULL <S2SV_ModEnd> ; struct sockaddr * <S2SV_ModStart> ; struct sockaddr * <S2SV_ModStart> ; int ret = <S2SV_ModEnd> ; struct sockaddr * <S2SV_ModStart> ; int ret = <S2SV_ModEnd> ; int <S2SV_ModStart> ; int ret = <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ) { int ret = <S2SV_ModEnd> ; if (,0
1570,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( & cpi ->,0
1571,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
1572,"<S2SV_ModStart> ( ndo, ""%s"", len <S2SV_ModEnd> ) ) ;",0
1573,<S2SV_ModStart> == 0 ) <S2SV_ModEnd> ; if (,0
1574,"<S2SV_ModStart> ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1575,"<S2SV_ModStart> int mptctl_ioctl_read ( MPT_ADAPTER * ioc, <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } dctlprintk",0
1576,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) ) { CorruptImageError ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( data == 0 ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( c ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; ThrowReaderException ( CorruptImageDataInFile"" ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageDataInFile"" ) ; if ( unsigned char ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( unsigned char * )!= 0 ) ThrowReaderException ( CorruptImageError, ""ImproperImageDataInFile"" ) ; ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( unsigned char )!= ( unsigned char ) ThrowReaderException ( CorruptImageError, ""ImproperImageDataInFile"" ) ; if ( unsigned char ) ThrowReaderException ( unsigned char * ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ;",0
1577,<S2SV_ModStart> = jas_uchar <S2SV_ModEnd> ; if (,0
1578,,0
1579,<S2SV_ModStart> int vpx_reader <S2SV_ModEnd> const char *,0
1580,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1581,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1582,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_mode ( vpx_reader <S2SV_ModStart> * r, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> cm -> fc = vpx_reader <S2SV_ModEnd> ( r, <S2SV_ModStart> cm -> <S2SV_ModEnd> cm -> fc ->",0
1583,<S2SV_ModStart> vpx_codec_alg_priv_t * c ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( CONFIG_HIGHBITDEPTH ) { # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( CONFIG_HIGHBITDEPTH ) { CONFIG_VP9_HIGHBITDEPTH if ( & stream -> cfg. cfg. bit_depth ) ; # endif # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if (! cfg -> config. cfg. cfg. cfg. config. config. bit_depth ) ; # endif # endif # endif # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if (! cfg -> config. cfg. config. config. config. config.,0
1584,<S2SV_ModStart> case 2 : ND_TCHECK_32BITS ( p ) ;,0
1585,<S2SV_ModStart> * ) ; <S2SV_ModEnd> return NULL ;,0
1586,<S2SV_ModStart> str ) ; <S2SV_ModEnd> return 0 ;,0
1587,<S2SV_ModStart> skb -> len <S2SV_ModEnd> ; if (,0
1588,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( image",0
1589,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1590,"<S2SV_ModStart> -> cac_id, serial -> len <S2SV_ModEnd> ) ; SC_FUNC_RETURN",1
1591,<S2SV_ModStart> = 0 ; # endif,0
1592,,0
1593,<S2SV_ModStart> ( s ) <S2SV_ModEnd> ; if (,0
1594,<S2SV_ModStart> ; buf = 0 <S2SV_ModEnd> ; if (,0
1595,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1596,<S2SV_ModStart> = 0 ; if ( addrlen > OE_SSIZE_MAX ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; OE_RAISE_ERRNO ( OE_ERRNO ( OE_E_EINVAL ) ; },0
1597,,1
1598,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1599,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1600,"<S2SV_ModStart> ; uint32_t ext4_x = 0 ; <S2SV_ModStart> - 1 ; # ifdef CONFIG_VP9_HDR_HDR_HIGHBITDEPTH if ( x >= 0 ) { pr_error ( ""x"" ) ; goto out ; } # ifdef CONFIG_VP9_HIGHBITS ( xdelta_HIGHBITDEPTH ) ; # ifdef CONFIG_VP9_HDR_HDR_HIGHBITDEPTH if ( x >= 0 ) { pr_error ( ""error: <S2SV_blank> of <S2SV_blank> of <S2SV_blank> of <S2SV_blank> of <S2SV_blank> packet.\\n"" ) ; goto done ; } # endif <S2SV_ModStart> ; # endif <S2SV_ModEnd> ; # ifdef CONFIG_VP9_HIGHBITS ( <S2SV_ModStart> VP9_HDR_HDR_HIGHBITDEPTH ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( tmp == 0 ) { ext4x = 0 ; # endif <S2SV_ModStart> ; # if ( x >= 0 ) goto trunc ; <S2SV_ModEnd> ; # ifdef CONFIG_VP9_VP_HDR_HIGHBITDEPTH if ( <S2SV_ModStart> 0 ) ; # if ( x >= 0x >= 0 ) goto trunc ; } # endif <S2SV_ModStart>",0
1601,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> m9000WriteReg ( <S2SV_ModStart> ; dm9000WriteReg ( DM9000_ERR, DM9000_EPCR <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; dm9000WriteReg ( DM9000_PT ) <S2SV_ModEnd> ; dm9000WriteReg ( <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_PT ) <S2SV_ModEnd> ; dm9000WriteReg ( <S2SV_ModStart> ; dm9000WriteReg ( DM9000_PT ) <S2SV_ModEnd> ; dm9000WriteReg ( <S2SV_ModStart> ; dm9000WriteReg ( DM9000_PT ) <S2SV_ModEnd> ; dm9000WriteReg ( <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR, DM9000_EPCR <S2SV_ModEnd> ) ; } <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR ) <S2SV_ModEnd> ) ; return <S2SV_ModStart> ; dm9000WriteReg ( DM9000WriteReg ( DM9000_EPCR, DM9000",0
1602,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1603,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1604,<S2SV_ModStart> return rc ; <S2SV_ModEnd> return rc ;,0
1605,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> size = 0,0
1606,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> s2SV_null> <S2SV_null> <S2SV_null>,0
1607,<S2SV_ModStart> ; if ( <S2SV_ModEnd> h -> h,0
1608,<S2SV_ModStart> == 0 ) { <S2SV_ModStart> return - EINVAL ; },0
1609,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1610,"<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, number_filled, number_filled ) <S2SV_ModEnd> ; number_planes_filled =",0
1611,<S2SV_ModStart> return 0 ; if (!,0
1612,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1613,<S2SV_ModStart> client ) ; <S2SV_ModEnd> client -> client,0
1614,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
