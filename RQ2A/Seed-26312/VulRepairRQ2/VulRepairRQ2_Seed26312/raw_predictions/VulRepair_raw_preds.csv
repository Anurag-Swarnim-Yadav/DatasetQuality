,raw_predictions,correctly_predicted
0,"<S2SV_ModStart> ; if ( n2size < 0 ) { applog ( LOG_INFO, ""Invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> tokens <S2SV_blank> in <S2SV_blank> initiate_stratum"" ) ; goto out ; }",0
1,"<S2SV_ModStart> case EAP_FRAME_TYPE_PACKET : if ( tlen < 2 ) { ND_PRINT ( ( ndo, ""%s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 2 ) ) ) ; break ; } <S2SV_ModStart> 2 ) { if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""%s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ) ) ; break ; } <S2SV_ModStart> case EAP_TYPE_MULTI_PACKET : if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""%s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ) ) ; break ; } <S2SV_ModStart> case EAP_TYPE_MULTI_PACKET : if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""%s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ) ) ; break ; } <S2SV_ModStart> case EAP_TYPE",0
2,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
3,"<S2SV_ModStart> ; if ( copy_from_user ( & ym -> cfg, ifr -> ifr_data, sizeof ( struct yamdrv_ioctl_cfg ) ) ) return - EFAULT ;",0
4,<S2SV_ModStart> frag_hdr_sz ) ; if ( unlikely ( unfrag_ip6hlen + frag_hdr_sz > skb -> len ) ) { kfree_skb ( segs ) ; segs = ERR_PTR ( - EINVAL ) ; goto out ; } <S2SV_ModStart> frag_hdr_sz ) ; if ( unlikely ( unfrag_ip6hlen + frag_hdr_sz > skb -> len ) { kfree_skb ( segs ) ; segs = ERR_PTR ( - EINVAL ) ; goto out ; },0
5,"<S2SV_ModStart> ; int64_t time, offset ; if ( version == 1 ) { time = avio_rb64 ( f ) ; offset = avio_rb64 ( f ) ; } else if ( version == 2 ) { time = avio_rb64 ( f ) ; offset = avio_rb64 ( f ) ; }",0
6,"<S2SV_ModStart> * tpg ; kstrtoul ( name + 5, 10, & tpgt ) <S2SV_ModEnd> ; int ret <S2SV_ModStart> EINVAL ) ; tpg = kzalloc ( sizeof ( struct vhost_scsi_tpg ), GFP_KERNEL ) ; if (! tpg ) { pr_err ( ""Unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> struct <S2SV_blank> vhost_scsi_tpg"" ) ; return ERR_PTR ( - ENOMEM ) ; } mutex_lock ( & vhost_scsi_mutex ) ; mutex_unlock ( & vhost_scsi_mutex ) ; tpg = kzalloc ( sizeof ( struct vhost_scsi_tpg ), GFP_KERNEL ) ; if (! tpg ) { pr_err ( ""Unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> struct <S2SV_blank> vhost_scsi_tpg"" ) ; return ERR_PTR ( - ENOMEM ) ; } mutex_unlock ( & vhost_scsi_mutex ) ; tpg = kzalloc ( sizeof ( struct vhost_scsi_tpg ), GFP_KERNEL ) ; tpg = kzalloc ( sizeof ( struct vhost_scsi_tpg )",0
7,<S2SV_ModStart> writer = ( TrackWriter <S2SV_ModEnd> ) gf_list_get (,0
8,"<S2SV_ModStart> ) { u32 <S2SV_ModEnd> data ; void <S2SV_ModStart> ) return ; if (! test_bit ( KVM_APIC_CHECK_VAPIC, & vcpu -> arch. apic_attention ) ) return ; kmap_atomic ( vcpu -> arch. apic -> vapic_page ) ; data = * ( u32 * ) ( vcpu -> arch. apic + offset_in_page ( vcpu -> arch. apic -> vapic_addr ) ) ; kunmap_atomic ( vapic",0
9,<S2SV_ModStart> src ) ; clear_task_ebb ( dst ) ;,0
10,<S2SV_ModStart> item ) { if ( item < 0 ) { return NULL ; } <S2SV_ModEnd> while ( c <S2SV_ModStart> -> next ; <S2SV_ModEnd> return c ;,0
11,"<S2SV_ModStart> ',' ) { if ( sb_block >= EXT3_SB_BLOCKS_PER_BLOCK ( sb ) ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; sb_block = EXT3_SB_BLOCKS_PER_BLOCK ( sb ) ; } else { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; sb_block = EXT3_SB_BLOCKS_PER_BLOCK ( sb ) ; } } if ( sb_block >= EXT3_SB_BLOCKS_PER_BLOCK ( sb ) ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %",0
12,<S2SV_ModStart> ; if ( unlikely ( unfrag_len > skb -> len - frag_hdr_sz ) ) { kfree_skb ( skb ) ; segs = ERR_PTR ( - EINVAL ) ; goto out ; },0
13,"<S2SV_ModStart> u64 nr, <S2SV_ModEnd> struct pt_regs * <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",1
14,"<S2SV_ModStart> EXT4_EXTENTS_FLAG ) { char * buf = grub_malloc2 ( EXT2_BLOCK_SIZE ( data ) ) ; if (! buf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } <S2SV_ModEnd> leaf = ( <S2SV_ModStart> leaf ) { <S2SV_ModEnd> grub_error ( GRUB_ERR_BAD_FS <S2SV_ModStart> ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) ( leaf + 1 ) ; for ( i = 0 ; i < grub_le_to_cpu16 ( leaf -> entries ) ; i ++ ) { if ( fileblock < grub_le_to_cpu32 ( ext [ i ]. block ) ) break ; } if ( -- i >= 0 ) { fileblock -= grub_le_to_cpu32 ( ext [ i ]. block ) ; if ( fileblock >= grub_le_to_cpu16 ( ext [ i ]. len ) ) return 0 ; else { grub_disk_addr_t start ; start = grub_le_to_cpu32 ( ext [ i",0
15,"<S2SV_ModStart> fdct16 ( const tran_low_t * in, tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> 16 ] ) { tran_high_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step2 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> step3 [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> input [ 8 <S2SV_ModStart> 8 ] ; tran_high_t <S2SV_ModEnd> temp1, temp2 <S2SV_ModStart> { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7 ; tran_high_t x0, x1, x2, x3 ; tran_high_t t0, t1, t2, t3 ; tran_high_t t1, t2, t3 ; tran_high_t t2, t3 ; tran_high_t t0, t1, t2, t3 ; tran_high_t",0
16,<S2SV_ModStart> skip_full_check : mutex_unlock ( & bpf_verifier_lock ) ; if ( env -> prog -> aux -> offload ) { ret = replace_map_fd_with_map_ptr ( env ) ; if ( ret < 0 ||! env -> prog -> aux -> offload ) { ret = replace_map_fd_with_map_ptr ( env ) ; if ( ret < 0 ) { ret = replace_map_fd_with_map_ptr ( env ) ; if ( ret < 0 ) { ret = replace_map_fd_with_map_ptr ( env ) ; if ( ret < 0 ) { ret = replace_map_fd_with_map_ptr ( env ) ; if ( ret < 0 ) goto err_unlock ; } else { ret = replace_map_fd_with_map_ptr ( env ) ; if ( ret < 0 ) { ret = replace_map_fd_with_map_ptr ( env ) ; if ( ret < 0 ) { ret = replace_map_fd_with_map_ptr ( env ) ; if ( ret < 0 ) { ret = replace_map_fd_with_map_ptr,0
17,"<S2SV_ModStart> -> num_channels ; # ifdef ENABLE_DSD wpc -> dsd_multiplier = 1 ; flags = DSD_FLAG ; for ( i = 14 ; i >= 0 ; -- i ) if ( ( config -> sample_rate % sample_rates [ i ] ) == 0 ) { config -> sample_rate /= sample_rates [ i ] ; } else if ( ( config -> sample_rate % sample_rates [ i ] ) == 0 ) { config -> sample_rate /= sample_rates [ i ] ; } else { int divisor = config -> sample_rate / sample_rates [ i ] ; if ( divisor && ( divisor & ( divisor - 1 ) ) == 0 ) { config -> sample_rate /= divisor ; wpc -> dsd_multiplier = divisor ; } } if ( config -> flags & CONFIG_HIGH_FLAG ) { strcpy ( wpc -> error_message, ""high <S2SV_blank> mode <S2SV_blank> not <S2SV_blank> configured <S2SV_blank> for <S2SV_blank> DSD!"" ) ; return FALSE ; } config -> flags &= ( CONFIG_HIGH_FLAG | CONFIG_MD5_CHECKSUM | CONFIG_PAIR_UNDEF_CHANS ) ; config -> float_norm_exp = config -> x",0
18,"<S2SV_ModStart> = 0 ; if (! scsi_block_when_processing_errors ( SDev ) ) { err = - ENODEV ; goto out ; } <S2SV_ModStart> cgc -> sense, & sshdr, cgc -> timeout, IOCTL_RETRIES, 0, 0, NULL ) ; if ( driver_byte ( result )!= 0 ) { switch ( sshdr. sense_key ) { case UNIT_ATTENTION : if (! cgc -> quiet ) sr_printk ( KERN_INFO, cd, ""disc <S2SV_blank> change <S2SV_blank> detected.\\n"" ) ; err = - ENOMEDIUM ; break ; } if (! cgc -> quiet ) sr_printk ( KERN_INFO, cd, ""CDROM <S2SV_blank> not <S2SV_blank> ready. <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> there <S2SV_blank> is <S2SV_blank> a <S2SV_blank> disc <S2SV_blank> in <S2SV_blank> the <S2SV_blank> drive.\\n"" ) ; err = - ENOMEDIUM ; break ; } if (! cgc -> quiet ) sr_printk ( KERN_INFO, cd, ""CDROM <S2SV_blank> not <S2SV_blank> ready. <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> there <S2SV_blank> is <S2SV_blank> a <S2SV_blank> disc <S2SV_blank> in <S2SV_blank> the <S2SV_blank> drive.\\n",0
19,"<S2SV_ModStart> ( ) == 0x48454150 ) { # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; # endif <S2SV_ModStart> ( ) == 0x48454150 ) { # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; # endif <S2SV_ModStart> ( ) == 0x48454150 ) { # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; # endif parse_ciff ( save + hlen, len - hlen, 0 ) ; }",0
20,"<S2SV_ModStart> void search_filter_level ( const YV12_BUFFER_CONFIG * sd, VP9EncoderConfig <S2SV_ModEnd> * cpi, <S2SV_ModStart> partial_frame ) { <S2SV_ModEnd> VP9_COMMON * const <S2SV_ModStart> common ; struct loopfilter <S2SV_ModEnd> * const lf <S2SV_ModStart> ; int best_err <S2SV_ModEnd> ; int filt_best <S2SV_ModStart> ; int filt_direction <S2SV_ModEnd> ; int filt_mid <S2SV_ModStart> / 4 ; if ( cpi -> twopass. section_intra_rating < 20 ) bias = bias * cpi -> twopass. section_intra_rating / 20 ; if ( cpi -> twopass. section_intra_rating < 20 ) bias = bias * cpi -> twopass. section_intra_rating / 20 ; if ( cpi -> twopass. section_intra_rating < 20 ) bias = bias * cpi -> twopass. section_intra_rating / 20 ; if ( cpi -> twopass. section_intra_rating < 20 ) bias = bias * cpi -> twopass. section_intra_rating / 20 ; if ( cpi -> twopass. section_intra_rating < 20 ) bias = bias",0
21,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
22,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( w, mv_class == MV_CLASS_0? mvcomp -> class0_fp : mvcomp -> fp ) ; } vpx_write_token ( w, vp9_mv_class_tree, mvcomp -> classes, & mv_class_encodings [ mv_class ] ) ; if ( mv_class == MV_CLASS_0 ) { vpx_write ( w, mvcomp -> class0_fp, & mvcomp -> class0_hp ) ; } else { int i ; const int n = mv_class + CLASS0_BITS - 1 ; for ( i = 0 ; i < n ; ++ i ) vpx_write ( w, ( d >> i ) & 1, mvcomp -> bits [ i ] ) ; } vpx_write_token ( w, vp9_mv_fp_tree, mvcomp -> class0_fp [ d ] : mvcomp -> fp, & mv_fp_encodings [ fr ] ) ; if ( usehp ) vpx_write <S2SV_ModEnd> ( w,",0
23,<S2SV_ModStart> cra_rng. rng_make_random && <S2SV_ModEnd> rng -> seedsize,0
24,"<S2SV_ModStart> ; if (! lookup_chan_dst ( sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. sin_addr. s_addr ) ) return - EINVAL ; if (! lookup_chan_dst ( sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. sin_addr. s_addr ) ) goto end ; if (! lookup_chan_dst ( sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. call_id ) ) goto end ; if (! lookup_chan_dst ( sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. call",0
25,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; },0
26,"<S2SV_ModStart> int verbose ; jas_image_t <S2SV_ModEnd> * image ; <S2SV_ModStart> ; while ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { switch ( id ) { case OPT_VERBOSE : verbose = 1 ; break ; case OPT_VERSION : printf ( ""%s\\n"", JAS_VERSION ) ; exit ( EXIT_SUCCESS ) ; break ; case OPT_INFILE : infile = jas_optarg ; break ; case OPT_HELP : default : usage ( ) ; break ; } } if ( ( instream = jas_stream_fopen ( 0, ""rb"" ) ) ) { fprintf ( stderr, ""cannot <S2SV_blank> open <S2SV_blank> standard <S2SV_blank> input <S2SV_blank> file <S2SV_blank> %s\\n"", infile ) ; exit ( EXIT_FAILURE ) ; } if ( ( fmtid = jas_image_getfmt ( instream ) ) < 0 ) { fprintf ( stderr, ""unknown <S2SV_blank> image <S2SV_blank> format\\n"" ) ; } if (! ( image = jas_image_decode ( instream, fmtid, 0 ) ) ) { fprintf ( stderr, ""cannot <S2SV_blank> load <S2SV_blank> image\\n"" ) ; return EXIT_FAILURE ;",0
27,"<S2SV_ModStart> esr ) { <S2SV_ModEnd> console_verbose ( ) <S2SV_ModStart> ( ""Oops <S2SV_blank> - <S2SV_blank> bad <S2SV_blank> mode"", <S2SV_ModEnd> regs, 0 <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
28,"<S2SV_ModStart> ) dat ; if ( length < 6 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length < 6 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ( ndo, ""%s"", tok2str ( l2tp_cc_direction2str, ptr <S2SV_ModEnd> ) ) ) <S2SV_ModStart> ) ) ; if ( length < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
29,"<S2SV_ModStart> intf ) { struct usb_host_interface * intf_intf = to_usb_interface ( intf ) ; struct usb_host_interface * intf_intf = to_usb_interface ( intf ) ; struct usb_host_interface * intf_intf = to_usb_interface ( intf ) ; if ( intf_intf -> altsetting [ alt ]. desc. bNumInterfaces < 1 ) return - ENODEV ; alt = intf_intf -> altsetting [ alt ]. desc. bNumInterfaces - 1 ; if ( intf_intf -> altsetting [ 0 ]. desc. bNumInterfaces < 1 ) return - ENODEV ; if ( intf_intf -> altsetting [ 0 ]. desc. bNumInterfaces < 1 ) return - ENODEV ; if ( intf_intf -> altsetting [ 0 ]. desc. bNumInterfaces < 1 ) return - ENODEV ; return usb_set_interface ( udev, intf_intf -> altsetting [ 0 ]. desc. bInterfaceNumber, intf_intf -> altsetting [ 0 ]. desc. bNumInterfaces ) ; if ( intf_intf -> altsetting [ 0 ]. desc. bNumInterfaces < 1 ) return - EN",0
30,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> udf_pc_to_char ( struct <S2SV_ModStart> * from, size_t <S2SV_ModEnd> fromlen, unsigned <S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> elen = 0 <S2SV_ModStart> case 2 : memcpy <S2SV_ModEnd> ( p, <S2SV_ModStart> += 3 ; memcpy <S2SV_ModEnd> ( p, <S2SV_ModStart> += 2 ; memcpy <S2SV_ModEnd> ( p, <S2SV_ModStart> += 2 ; memcpy <S2SV_ModEnd> ( p, <S2SV_ModStart> += 2 ; memcpy <S2SV_ModEnd> ( p, <S2SV_ModStart> += 2 ; memcpy <S2SV_ModEnd> ( p, <S2SV_ModStart> += 2 ; memcpy <S2SV_ModEnd> ( p, <S2SV_ModStart> += 2 ; memcpy <S2SV_ModEnd> ( p, <S2SV_ModStart> += 2 ; memcpy <S2SV_ModEnd> ( p, <S2SV_ModStart> += 2 ; memcpy <S2SV_ModEnd> ( p, <S2SV_ModStart> += 2 ; memcpy <S2SV_ModEnd> ( p, <S2SV_ModStart> += 2 ; memcpy <S2SV_ModEnd> ( p, <S2SV_ModStart> += 2 ; memcpy <S2SV_ModEnd> ( p, <S2SV_ModStart> += 2 ; memcpy <S2SV_ModEnd> ( p, <S2SV_ModStart> += 2 ; memcpy <S2SV_ModEnd> ( p, <S2SV_ModStart> += 2 ; memcpy <S2SV_ModEnd> ( p, <S2SV_ModStart> += udf_get_filename ( sb,",0
31,"<S2SV_ModStart> loaderr ; } if ( server. slaveof_linenum < 0 || server. slaveof_linenum >= totlines ) { err = ""Invalid <S2SV_blank> slaveof <S2SV_blank> line"" ; goto loaderr ; }",0
32,"<S2SV_ModStart> connection_id ) ; spin_lock_irqsave ( & tgtport -> lock, flags ) ;",0
33,"<S2SV_ModStart> = 0 ; if ( iface_desc -> desc. bNumEndpoints < 1 ) { dev_err ( idev, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; retval = - ENODEV ; goto exit ; } if ( iface_desc -> desc. bNumEndpoints < 1 ) { dev_err ( idev, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; retval = - ENODEV ; goto exit ; } if ( iface_desc -> desc. bNumEndpoints < 1 ) { dev_err ( idev, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; retval = - ENODEV ; goto exit ; } if ( iface_desc -> desc. bNumEndpoints < 1 || iface_desc -> desc. bNumEndpoints < 2 ) { dev_err ( idev, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; retval = - ENODEV ; goto exit ; } if ( iface_desc -> desc. bNumEndpoints < 1 ) { dev_err ( idev, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints\\n"" ) ; retval = - ENODEV ; goto exit ; } if ( iface_desc -> desc.",0
34,<S2SV_ModStart> 0 ) ; if ( link_shdr && link_shdr -> sh_name < bin -> shstrtab_size && link_shdr -> sh_name < bin -> shstrtab_size && <S2SV_ModStart> link_shdr -> sh_name < bin -> shstrtab_size && <S2SV_ModStart> link_shdr -> sh_name < bin -> shstrtab_size && <S2SV_ModStart> link_shdr -> sh_name < bin -> shstrtab_size && link_shdr -> sh_name < bin -> shstrtab_size && link_shdr -> sh_name < bin -> shstrtab_size && link_shdr -> sh_name < bin -> shstrtab_size && <S2SV_ModStart> link_shdr -> sh_name < bin -> shstrtab_size && <S2SV_ModStart> link_shdr -> sh_name && link_shdr -> sh_name < bin -> shstrtab_size && <S2SV_ModStart> link_shdr -> sh_name < bin -> shstrtab_size && link_shdr -> sh_name < bin -> shstrtab_size && link_shdr -> sh_name < bin -> shstrtab_size,0
35,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> construct_get_dest_keyring ( struct <S2SV_ModStart> * authkey ; if ( dest_keyring ) { <S2SV_ModStart> ) ; } else { switch ( cred -> jit_keyring ) { case KEY_REQKEY_DEFL_DEFAULT : case KEY_REQKEY_DEFL_REQUESTOR_KEYRING : dest_keyring = key_get ( cred -> request_keyring ) ; if ( dest_keyring ) break ; case KEY_REQKEY_DEFL_THREAD_KEYRING : dest_keyring = key_get ( cred -> thread_keyring ) ; if ( dest_keyring ) break ; case KEY_REQKEY_DEFL_PROCESS_KEYRING : dest_keyring = key_get ( cred -> process_keyring ) ; if ( dest_keyring ) break ; case KEY_REQKEY_DEFL_USER_SESSION_KEYRING : dest_keyring = key_get ( cred -> user_session_keyring ) ; if ( dest_keyring ) break ; case KEY_REQKEY_DEFL_GROUP_KEYRING : dest,0
36,<S2SV_ModStart> ; sc = NULL ; if ( sc == NULL ) { ret = GSS_S_FAILURE ; goto cleanup ; },0
37,<S2SV_ModStart> ; if ( <S2SV_ModEnd> addr_len < sizeof <S2SV_ModStart> ; if ( <S2SV_ModEnd> addr -> l2tp_family <S2SV_ModStart> ; if ( <S2SV_ModEnd> addr -> l2tp_family <S2SV_ModStart> ; if ( <S2SV_ModEnd> addr -> l2tp_family <S2SV_ModStart> ; if ( <S2SV_ModEnd> addr -> l2tp_family <S2SV_ModStart> ; if ( <S2SV_ModEnd> addr -> l2tp_family <S2SV_ModStart> ; if ( <S2SV_ModEnd> addr -> l2tp_family <S2SV_ModStart> ; if ( <S2SV_ModEnd> addr -> l2tp_family <S2SV_ModStart> -> l2tp_family!= AF_INET ) goto out_in_use ; ret = - EADDRINUSE ; read_unlock_bh ( & l2tp_ip_lock,0
38,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> stack_maxrandom_size ( void <S2SV_ModStart> ) { unsigned int <S2SV_ModEnd> max = 0 <S2SV_ModStart> ) ) { max = ( ( - 1U ) & STACK_RND_MASK ) << PAGE_SHIFT ; } else { max = ( ( - 1U ) & STACK_RND_MASK ) << PAGE_SHIFT <S2SV_ModEnd> ; } return,0
39,"<S2SV_ModStart> ( ""_Launch <S2SV_blank> Anyway"" ), G_T_STRING <S2SV_ModEnd> ), RESPONSE_RUN <S2SV_ModStart> ( ""_Mark <S2SV_blank> as <S2SV_blank> trusted"" ), G_T_STRING <S2SV_ModEnd> ), RESPONSE_MARK_TRUSTED <S2SV_ModStart> ( dialog ), G_T_STRING <S2SV_ModEnd> ), RESPONSE_MARK_TRUSTED <S2SV_ModStart> ( dialog ), G_T_STRING <S2SV_ModEnd> ), RESPONSE_RUN <S2SV_ModStart> ( dialog ), G_T_STRING <S2SV_ModEnd> ), RESPONSE_RUN <S2SV_ModStart> ), G_T_STRING <S2SV_ModEnd> ), RESPONSE_RUN <S2SV_ModStart> ( dialog ), G_T_STRING <S2SV_ModEnd> ), RESPONSE_RUN <S2SV_ModStart> ( dialog ), G_T_STRING <S2SV_ModEnd> ), RESPONSE_CANCEL",0
40,<S2SV_ModStart> tm = localtime <S2SV_ModEnd> ( & t,0
41,"<S2SV_ModStart> strlen ( password ) ) ; md5_init ( & md5_secret ) ; MD5Update ( & md5_secret, ( unsigned char * ) password, strlen ( password ) ) ; my_md5 = md5_secret ; MD5Final ( misc, & my_md5 ) ; xor ( hashed [ ( length >> 4 ) * AUTH_PASS_LEN ], misc, AUTH_PASS_LEN ) ; for ( i = 1 ; i < length >> 4 ; i ++ ) { my_md5 = md5_secret ; MD5Update ( & my_md5, & hashed [ ( i - 1 ) * AUTH_PASS_LEN ], AUTH_PASS_LEN ) ; xor ( hashed [ ( i - 1 ) * AUTH_PASS_LEN ], misc, AUTH_PASS_LEN ) ; xor ( hashed [ ( i - 1 ) * AUTH_PASS_LEN ], misc, AUTH_PASS_LEN ) ; for ( i = 1 ; i < length >> 4 ; i ++ ) { my_md5 = md5_secret ; MD5Update ( & my_md5, & hashed [ ( i - 1 ) * AUTH_PASS_LEN ],",0
42,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> m88rs2000_frontend_attach ( struct <S2SV_ModStart> ; if ( m88rs2000_dvb_generic_rw <S2SV_ModEnd> ( d -> <S2SV_ModStart>, obuf, 1, ibuf, 1, 0 ) < 0 ) { err ( ""command <S2SV_blank> 0x51 <S2SV_blank> transfer <S2SV_blank> failed."" ) ; d -> fe_adap [ 0 ]. fe = dvb_attach ( m88rs2000_attach, & s421_m88rs2000_config, <S2SV_ModEnd> & d -> <S2SV_ModStart> -> i2c_adap ) ; if ( d -> fe_adap [ 0 ]. fe == NULL ) return - EIO ; if ( dvb_attach ( ts2020_attach, d -> fe_adap [ 0 ]. fe, & dw2104_ts2020_config, <S2SV_ModEnd> & d -> <S2SV_ModStart> -> i2c_adap ) ) { info ( ""Attached <S2SV_blank> RS2000/TS2020!"" ) ; return 0 ; } info ( ""Failed <S2SV_blank> to <S2SV_blank> attach <S2SV_blank> RS2000/TS2020!"" ) ; return - EIO ; } <S2SV_ModEnd> info ( ""Failed <S2SV_blank> to <S2SV_blank> attach",0
43,"<S2SV_ModStart> ; struct sock * sk = transport -> asoc -> base. sk ; <S2SV_ModStart>. sk ) ; spin_lock_bh ( & sock_owned_by_user ( sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"", __func__ ) ; sctp_transport_put ( transport ) ; goto out_unlock ; } <S2SV_ModEnd> if ( sock_owned_by_user <S2SV_ModStart>. sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> owned_by_user ( sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"", __func__ ) ; if (! mod_timer ( & transport -> hb_timer, jiffies + ( HZ / 20 ) ) ) sctp_transport_hold ( transport ) ; goto out_unlock ; } if ( transport -> dead ) goto out_unlock ; error = sctp_do_sm ( net, SCTP_EVENT_T_TIMEOUT, SCTP_ST_TIMEOUT ( SCTP_EVENT_TIMEOUT_HEARTBEAT ), asoc -> state, asoc -> ep, asoc, transport",0
44,<S2SV_ModStart> ; if ( last_timestamp_in_data > MAX_TIMESTAMP_IN_DATA ) last_timestamp_in_data = MAX_TIMESTAMP_IN_DATA ; <S2SV_ModStart> ; if ( last_timestamp_in_data > MAX_TIMESTAMP_IN_DATA ) last_timestamp_in_data = MAX_TIMESTAMP_IN_DATA ; <S2SV_ModStart> ; if ( last_timestamp_in_data > MAX_TIMESTAMP_IN_DATA ) last_timestamp_in_data = MAX_TIMESTAMP_IN_DATA ; <S2SV_ModStart> ; if ( last_timestamp_in_data > MAX_TIMESTAMP_IN_DATA ) last_timestamp_in_data = MAX_TIMESTAMP_IN_DATA ; if ( last_timestamp_in_data > MAX_TIMESTAMP_IN_DATA ) last_timestamp_in_data = MAX_TIMESTAMP_IN_DATA ; if ( last_timestamp_in_data > MAX_TIMESTAMP_IN_DATA ) last_timestamp_in_data = MAX_TIMESTAMP_IN_DATA ; if ( last_timestamp_in_data > MAX_TIMESTAMP_IN_DATA ) last_timestamp_in_data = MAX_TIMESTAMP_IN_DATA ;,0
45,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> ) cp0 ; return,0
46,"<S2SV_ModStart> tsample_t s ; if ( scanlinesizein > TIFF_MAX_SCANLINE_SIZE || scanlinesizeout > TIFF_MAX_SCANLINE_SIZE ) { TIFFError ( TIFFFileName ( in ), ""Error, <S2SV_blank> too <S2SV_blank> large <S2SV_blank> scanlinesizein <S2SV_blank> (%lu)"", ( unsigned long ) scanlinesizein ) ; goto bad ; }",0
47,"<S2SV_ModStart> ) ; struct address_space <S2SV_ModEnd> * mapping ; <S2SV_ModStart> hugetlb_lock ) ; <S2SV_ModEnd> hugetlb_put_quota ( mapping <S2SV_ModStart> hugetlb_lock ) ; __dec_zone_state ( page_zone ( page ) -> hugepage_state, NR_SHMEM ) ; __dec_zone_state ( page_zone ( page ) -> hugepage_state, NR_SHMEM <S2SV_ModStart> hugetlb_lock ) ; __dec_zone_state ( page_zone ( page ) -> hugepage_state ( page_zone ( page ) -> hugepage_state, NR_SHMEM ) ; __dec_zone_state ( page_zone ( page ) -> hugepage_state, NR_SHMEM ) ; __dec_zone_state ( page_zone ( page ) -> hugepage_state, NR_SHMEM ) ; __dec_zone_state ( page_zone ( page ) -> hugepage_state, NR_SHMEM ) ; __dec_zone_state ( page_zone ( page ) -> hugepage_state, NR_SHMEM ) ; __dec_zone_",0
48,"<S2SV_ModStart> pts_flag ) { if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; }",0
49,"<S2SV_ModStart> ; if (! e ) goto not_found ; r = parse_uid ( e + 1, & uid ) ; if ( r < 0 ) goto not_found ; machine = strndupa ( p, e - p ) ; if (! machine_name_is_valid ( machine ) ) { if ( sd_bus_error_has_name ( & error, BUS_ERROR_NO_SUCH_USER_MAPPING ) ) goto not_found ; goto fail ; } r = sd_bus_message_read ( reply, ""su"", & mapped ) ; if ( r < 0 ) { if ( sd_bus_error_has_name ( & error, BUS_ERROR_NO_SUCH_USER_MAPPING ) ) goto not_found ; goto fail ; } r = sd_bus_call_method ( bus, ""org.freedesktop.machine1"", ""/org/freedesktop/machine1"", ""Manager"", ""MapFromMachineUser"", & error, & reply, ""su"", machine ) ; if ( r < 0 ) { if ( sd_bus_error_has_name ( & error, BUS_",0
50,"<S2SV_ModStart> void generic_pipe_buf_get ( struct pipe_inode_info * pipe, struct pipe_buffer * buf ) { get_page ( buf -> page ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
51,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> #%u <S2SV_blank> size=%u <S2SV_blank> "" <S2SV_ModEnd>, tcount, <S2SV_ModStart> ( ndo, "" <S2SV_blank> #%u <S2SV_blank> size=%u <S2SV_blank> "" <S2SV_ModEnd>, tcount, <S2SV_ModStart> ( ndo, "" <S2SV_blank> #%u <S2SV_blank> size=%u <S2SV_blank> "" <S2SV_ModEnd>, tcount, <S2SV_ModStart> ( ndo, "" <S2SV_blank> #%u <S2SV_blank> size=%u <S2SV_blank> "" <S2SV_ModEnd>, tcount, <S2SV_ModStart> ( ndo, "" <S2SV_blank> #%u <S2SV_blank> size=%u <S2SV_blank> "" <S2SV_ModEnd>, tcount, <S2SV_ModStart> ( ndo, "" <S2SV_blank> #%u <S2SV_blank> "" <S2SV_ModEnd>, tcount, <S2SV_ModStart> ( ndo, "" <S2SV_blank> #%u <S2SV_blank> size=%u <S2SV_blank> "" <S2SV_ModEnd>, tcount, <S2SV_ModStart> ( ndo, "" <S2SV_blank> #%u <S2SV_blank> size=%u <S2SV_blank> "" <S2SV_ModEnd>, tcount, <S2SV_ModStart> ( ndo, "" <S2SV_blank> #%u <S2SV_blank> size=%u <S2SV_blank> "" <S2SV_ModEnd>, tcount,",0
52,"<S2SV_ModStart> &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> & ATTR_UID ) && capable_wrt_inode_gidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> & ATTR_GID ) && capable_wrt_inode_gidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> & ATTR_MODE ) && capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> & ATTR_MODE ) && capable_wrt_inode_gidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> & CAP_FSETID ) ) attr -> ia_mode &= ~ S_ISGID ; } if ( ia_valid & ATTR_MTIME_SET ) ) { if (! inode_owner_or_capable ( inode ) ) return - EPERM ; attr -> ia_mode &= ~ S_ISGID ; } if ( ia_valid & ATTR_ATIME_SET ) ) { if (! inode_owner_or_capable ( inode ) ) return - EPERM ; } if ( ia_valid & ATTR_TIMES_SET ) { if (! inode_owner_or_capable ( inode ) ) return - EPERM ; } if ( ia_valid & ATTR_",0
53,"<S2SV_ModStart> reader -> bytes_available_fd <S2SV_ModEnd>, NULL,",0
54,"<S2SV_ModStart> wp -> config -> max_requests ; if ( 0 > wp -> config -> pm_max_requests ) { zlog ( ZLOG_ERROR, ""[pool <S2SV_blank> %s] <S2SV_blank> max <S2SV_blank> requests <S2SV_blank> exceeded"", wp -> config -> name ) ; exit ( FPM_EXIT_SOFTWARE ) ; }",0
55,"<S2SV_ModStart> int detect_transition_to_still ( TWO_PASS <S2SV_ModEnd> * twopass, <S2SV_ModStart> last_decay_rate ) { TWO_PASS <S2SV_ModEnd> * twopass = <S2SV_ModStart> ; if ( frame_interval < MIN_GF_INTERVAL && loop_decay_rate >= 0.999 && last_decay_rate < 0.9 ) { int trans_to_still = 0 ; const FIRSTPASS_STATS * position = twopass -> stats_in ; for ( j = 0 ; j < still_interval ; ++ j ) { if ( EOF == input_stats ( twopass, & tmp_next_frame ) ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 ) break ; } reset_fpf_position ( twopass, position ) ; if ( j == still_interval ) trans_to_still = 1 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
56,<S2SV_ModStart> } if ( IS_ERR ( handle -> h_transaction ) ) { handle -> h_transaction = NULL ; return 0 ; } <S2SV_ModEnd> err = jbd2_journal_stop <S2SV_ModStart> handle ) ; if ( IS_ERR ( handle -> h_transaction ) ) { err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_error ) ; handle -> h_transaction -> t_journal -> j_error = err ; return handle -> h_err ; } sb = handle -> h_transaction -> t_journal -> j_private ; err = handle -> h_err ; rc = jbd2_journal_stop ( handle <S2SV_ModEnd> ) ; if,0
57,"<S2SV_ModStart> ; if ( unlikely ( offset + size > EXT4_I ( inode ) -> i_sb -> s_mb_max ) ) { ret = ext4_convert_unwritten_extents_nolock ( inode, offset, size ) ; if ( ret < 0 ) { printk ( KERN_EMERG ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> unwritten <S2SV_blank> extents, <S2SV_blank> error <S2SV_blank> is <S2SV_blank> %d"" "" <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, ret, inode -> i_ino ) ; return ret ; }",0
58,"<S2SV_ModStart> valuelen ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_rmt, tmp + sizeof ( * name_rmt ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp + sizeof ( * name_loc ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_rmt, tmp + sizeof ( * name_rmt ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE",0
59,"<S2SV_ModStart> alg ) { if (! try_module_get <S2SV_ModEnd> ( ""%s"", <S2SV_ModStart> ) ) { if (! try_module_get <S2SV_ModEnd> ( ""%s-all"", <S2SV_ModStart> ) ) { if (! try_module_get <S2SV_ModEnd> ( ""%s-all"", <S2SV_ModStart> ) ) { if (! try_module_get <S2SV_ModEnd> ( ""%s-all"", <S2SV_ModStart> ) ) { if (! try_module_get <S2SV_ModEnd> ( ""%s-all"", <S2SV_ModStart> ) ) { if (! try_module_get <S2SV_ModEnd> ( ""%s-all"", <S2SV_ModStart> ) ) { if (! try_module_get <S2SV_ModEnd> ( ""%s-all"", <S2SV_ModStart> ) ) { if (! try_module_get <S2SV_ModEnd> ( ""%s-all"", <S2SV_ModStart> ) ) { if (! try_module_get <S2SV_ModEnd> ( ""%s-all"",",0
60,"<S2SV_ModStart> 2 ) { ND_TCHECK_16BITS ( tptr ) ; <S2SV_ModStart> stlv_len ) ) ; if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc <S2SV_ModEnd> ; ND_TCHECK2 ( <S2SV_ModStart> ISIS_SUBTLV_SPB_INSTANCE : if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc <S2SV_ModEnd> ; ND_TCHECK_16BITS ( <S2SV_ModStart> ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) ; if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc <S2SV_ModEnd> ; ND_TCHECK2 ( <S2SV_ModStart>, ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) ; if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc <S2SV_ModEnd> ; ND_PRINT ( <S2SV_ModStart> case ISIS_SUBTLV_SPB_INSTANCE : if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc <S2SV_ModEnd> ; ND",0
61,"<S2SV_ModStart> { return reply_msg <S2SV_ModEnd> ( c, <S2SV_ModStart> MSG_JOB_TOO_BIG ) ; } if ( end_buf [ 0 ]!= '\\0' ) { twarnx ( ""server <S2SV_blank> error: <S2SV_blank> "" MSG_OUT_OF_MEMORY ) ; return skip ( c, body_size + 2, MSG_OUT_OF_MEMORY ) ; return skip ( c, body_size + 2, MSG_OUT_OF_MEMORY ) ; }",0
62,"<S2SV_ModStart> flags ) ; memset ( & ddi, 0, sizeof ( ddi ) ) ;",1
63,"<S2SV_ModStart> return 0 ; ND_TCHECK_64BITS ( mpc -> sender_key ) ; if ( mpc -> receiver_key ) { ND_PRINT ( ( ndo, "" <S2SV_blank> {0x%"" PRIx64, EXTRACT_64BITS ( mpc -> sender_key ) ) ) ; ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> receiver_key ) ) ) ; } else { ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> sender_key ) ) ) ; if ( opt_len == 12 ) { ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> receiver_key ) ) ) ; ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> receiver_key ) ) ) ; } else { ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> receiver_key ) ) ) ; }",0
64,"<S2SV_ModStart> -> ipc_socket ; <S2SV_ModEnd> int procfd = <S2SV_ModStart> ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (0)"" ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ; } status = - 1 ; ret = lxc_read_nointr_expect ( ipc_socket, & status, sizeof ( status ), & expected ) ; if ( ret <= 0 ) { ERROR ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (0)"" ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ; } if (! ( options -> namespaces & CLONE_NEWNS ) && ( options -> attach_flags & LXC_ATTACH_REMOUNT_PROC_SYS ) ) { ret = lxc_attach_remount_sys_proc ( ) ; if ( ret < 0 ) { SYSERROR ( ""could <S2SV_blank> not <S2SV_blank> ensure <S2SV_blank> correct <S2SV_blank> architecture"" ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ;",0
65,"<S2SV_ModStart> = GIT_PKT_NG ; if ( strlen ( line ) < 3 ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; return - 1 ; } <S2SV_ModStart> += 3 ; if ( strlen ( line ) < 3 ) { giterr_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; return - 1 ; } <S2SV_ModEnd> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
66,<S2SV_ModStart> -> biSize >= 12U <S2SV_ModEnd> ) { header <S2SV_ModStart> -> biCompression = ( OPJ_UINT32 ) getc ( IN ) ; header -> biCompression |= ( OPJ_UINT32 ) getc ( IN ) << 16 ; header -> biCompression |= ( OPJ_UINT32 ) getc ( IN ) << 24 ; header -> biHeight = ( OPJ_UINT32 ) getc ( IN ) ; header -> biWidth |= ( OPJ_UINT32 ) getc ( IN ) << 8 ; header -> biHeight |= ( OPJ_UINT32 ) getc ( IN ) << 16 ; header -> biWidth |= ( OPJ_UINT32 ) getc ( IN ) << 24 ; header -> biHeight |= ( OPJ_UINT32 ) getc ( IN ) << 24 ; header -> biPlanes = ( OPJ_UINT16 ) getc ( IN ) ; header -> biPlanes |= ( OPJ_UINT16 ) ( ( OPJ_UINT32 ) getc ( IN ) << 8 ) ; header -> biBitCount |= ( OPJ_UINT16 ) ( ( OPJ_UINT32 ) getc ( IN,0
67,<S2SV_ModStart> NULL ; } sas_destruct_devices ( port ) ;,0
68,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
69,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
70,"<S2SV_ModStart> - ENOBUFS ; } else { line. clock_type = get_status ( port ) -> clocking ; line. clock_rate = 0 ; line. loopback = 0 ; if ( copy_to_user ( & line, ifr -> ifr_settings. ifs_ifsu. sync, size ) ) return - EFAULT ; if ( copy_from_user ( & line, ifr -> ifr_settings. ifs_ifsu. sync, size ) ) return - EFAULT ; if ( copy_to_user ( & line, ifr -> ifr_settings. ifs_ifsu. sync, size ) ) return - EFAULT ; if ( copy_from_user ( & line, ifr -> ifr_settings. ifs_ifsu. sync, size ) ) return - EFAULT ; if ( copy_from_user ( & line, ifr -> ifr_settings. ifs_ifsu. sync, size ) ) return - EFAULT ;",0
71,"<S2SV_ModStart> arg ) { if (! capable ( CAP_SYS_RAWIO ) ||! capable ( CAP_SYS_RAWIO ) ) { return - EACCES ; } return scsi_cmd_ioctl ( bd -> bd_disk -> queue, bd -> bd_disk, mode, cmd, arg ) ; }",0
72,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nego_process_negotiation_request ( rdpNego <S2SV_ModStart> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nego_process_negotiation_request ( rdpNego <S2SV_ModStart> = NEGO_STATE_FINAL ; return TRUE ;,0
73,"<S2SV_ModStart> * ureq ; size_t <S2SV_ModEnd> req_len ; struct <S2SV_ModStart> ) ) ) { QETH_CARD_TEXT ( card, 2, ""snmpnome"" ) ; return - EFAULT ; } <S2SV_ModEnd> ureq = memdup_user <S2SV_ModStart> sizeof ( struct qeth_snmp_ureq_hdr ) ) ; if (! qeth_adp_supported ( card, IPA_SETADP_SET_SNMP_CONTROL ) ) { QETH_CARD_TEXT ( card, 2, ""snmpnome"" ) ; return - EOPNOTSUPP ; } qinfo. udata = kzalloc ( qinfo. udata_len, GFP_KERNEL ) ; if (! qinfo. udata ) { kfree ( qinfo. udata ) ; kfree ( qinfo. udata ) ; return - ENOMEM ; } qinfo. udata_offset = sizeof ( struct qeth_snmp_ureq_hdr ) ; qinfo. udata = kzalloc ( qinfo. udata_len, GFP_KERNEL ) ; if (! qinfo. udata ) { kfree ( qinfo. udata",0
74,"<S2SV_ModStart> int m ; if ( n < 0 ) { jas_deprecated ( ""negative <S2SV_blank> count <S2SV_blank> for <S2SV_blank> jas_stream_pad"" ) ; }",1
75,<S2SV_ModStart> num ) { if ( avio_feof ( pb ) ) return AVERROR_EOF ; <S2SV_ModStart> num ) { if ( avio_feof ( pb ) ) return AVERROR_EOF ; <S2SV_ModStart> num ) { if ( avio_feof ( pb ) ) return AVERROR_EOF ; <S2SV_ModStart> num ) { if ( avio_feof ( pb ) ) return AVERROR_EOF ; <S2SV_ModStart> num ) { if ( avio_feof ( pb ) ) return AVERROR_EOF ; },0
76,"<S2SV_ModStart> ; if ( j >= mxf -> metadata_sets_count ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""invalid <S2SV_blank> metadata <S2SV_blank> sets <S2SV_blank> count\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( j >= mxf -> metadata_sets_count ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""invalid <S2SV_blank> metadata <S2SV_blank> sets <S2SV_blank> count\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( j >= mxf -> metadata_sets_count ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""invalid <S2SV_blank> metadata <S2SV_blank> sets <S2SV_blank> count\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( j >= mxf -> metadata_sets_count ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""invalid <S2SV_blank> metadata <S2SV_blank> sets <S2SV_blank> count\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( j >= mxf -> metadata_sets_count ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""invalid <S2SV_blank> metadata <S2SV_blank> sets <S2SV_blank> count\\n"" ) ; return AVERROR_INVALID",0
77,"<S2SV_ModStart> 1 ; } ret = mount_entry_on_generic_nolock <S2SV_ModEnd> ( mntent, <S2SV_ModStart> path ) ; if ( ret < 0 ) { ERROR ( ""mount_entry_on_generic_nolock <S2SV_blank> failed"" ) ; return - 1 ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""mount_entry_on_generic_nolock <S2SV_blank> failed"" ) ; return - 1 ; } ret = mount_entry_on_generic ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""mount_entry_on_generic_nolock <S2SV_blank> failed"" ) ; return - 1 ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""mount_entry_on_generic_nolock <S2SV_blank> failed"" ) ; return - 1 ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""mount_entry_on_generic_nolock <S2SV_blank> failed",0
78,"<S2SV_ModStart> + 10 ; psf_log_printf ( psf, ""ID3 <S2SV_blank> offset <S2SV_blank> : <S2SV_blank> %d\\n--------------------\\n"", psf -> fileoffset ) ; <S2SV_ModStart> return 1 ; } else { psf_log_printf ( psf, ""ID3 <S2SV_blank> offset <S2SV_blank> : <S2SV_blank> %d\\n--------------------\\n"", psf -> fileoffset ) ; return 0 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
79,"<S2SV_ModStart> += jnx_ext_len ; if ( ndo -> ndo_eflag ) ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ; <S2SV_ModStart> += jnx_ext_len ; if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ; <S2SV_ModStart> += jnx_ext_len ; if ( ndo -> ndo_eflag ) ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ;",0
80,<S2SV_ModStart> return NF_STOLEN ; kfree_skb ( skb ) ;,0
81,"<S2SV_ModStart> * up ; struct xfrm_replay_state_esn_len xfrm_replay_state_esn_len ; <S2SV_ModStart> rta ) ; xfrm_replay_state_esn_len = nla_len ( rta ) ; <S2SV_ModStart> - ENOMEM ; xfrm_replay_state_esn_init ( p, xfrm_replay_state_esn_len ) ; if ( xfrm_replay_state_esn_len ( up ) > xfrm_replay_state_esn_len ( up ) ) { kfree ( p ) ; return - ENOMEM ; } pp = kmemdup ( up, xfrm_replay_state_esn_len ( up ), GFP_KERNEL ) ; if (! pp ) { kfree ( p ) ; return - ENOMEM ; } * replay_esn = p ; * preplay_esn = pp ; return 0 ; }",0
82,<S2SV_ModStart> - ENODEV ; spin_lock_init ( & io -> lock ) ; <S2SV_ModStart> EIO ; } spin_unlock_init ( & io -> lock ) ;,0
83,<S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ;,0
84,<S2SV_ModStart> ) ) ; if ( ret ) { btif_storage_free_bonded_devices ( remote_bd_addr ) ; return BT_STATUS_FAIL ; } <S2SV_ModStart> ) ) ; if ( ret ) { btif_storage_free_bonded_devices ( remote_bd_addr ) ; return BT_STATUS_FAIL ; },0
85,"<S2SV_ModStart> { if ( bufsize < JAS_MIN ( QMFB_SPLITBUFSIZE, sizeof ( jpc_fix_t ) ) ) { abort ( ) ; } bufsize -= JAS_MIN ( QMFB_SPLITBUFSIZE, sizeof ( jpc_fix_t ) ) ; if ( bufsize < JAS_MIN ( QMFB_SPLITBUFSIZE, sizeof ( jpc_fix_t ) ) ) { abort ( ) ; } bufsize -= JAS_MIN ( QMFB_SPLITBUFSIZE, sizeof ( jpc_fix_t ) ) ; if ( bufsize < JAS_MIN ( QMFB_SPLITBUFSIZE, sizeof ( jpc_fix_t ) ) ) { abort ( ) ; } bufsize -= JAS_MIN ( QMFB_SPLITBUFSIZE, sizeof ( jpc_fix_t ) ) ; if ( bufsize < JAS_MIN ( QMFB_SPLITBUFSIZE, sizeof ( jpc_fix_t ) ) ) { abort ( ) ; } bufsize -= JAS_MIN ( QMFB_SPLITBUFSIZE, sizeof ( jpc_fix_",0
86,<S2SV_ModStart> res ; vpx_codec_enc_cfg_map_t <S2SV_ModEnd> * map ; <S2SV_ModStart> = VPX_CODEC_INVALID_PARAM ; if (! iface -> enc ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if ( iface -> caps & VPX_CODEC_CAP_ENCODER ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if ( iface -> caps & VPX_CODEC_CAP_ENCODER ) res = VPX_CODEC_INCAPABLE ; else if ( iface -> caps & VPX_CODEC_CAP_ENCODER ) res = VPX_CODEC,0
87,"<S2SV_ModStart> size ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""GSO <S2SV_blank> size <S2SV_blank> must <S2SV_blank> not <S2SV_blank> be <S2SV_blank> zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u. gso. type!= XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Bad <S2SV_blank> GSO <S2SV_blank> type <S2SV_blank> %d.\\n"", gso -> u. gso. type ) ; return - EINVAL ; }",0
88,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_object ( struct <S2SV_ModStart> * path, <S2SV_ModEnd> const char * <S2SV_ModStart> ; if ( <S2SV_ModEnd> ext_index_add_object ( object <S2SV_ModStart> name ) ; if ( bitmap_pos < 0 ) { char * name = path_name ( path, last ) ; bitmap_pos = ext_index_add_object ( object, name ) ; free ( name ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
89,"<S2SV_ModStart> ; newparity = term_get_parity ( tty_fd ) ; newbits = term_get_bit_depth ( tty_fd ) ; if ( newparity!= opts. parity ) { fd_printf ( STO, ""\\r\\n*** <S2SV_blank> parity <S2SV_blank> (%d) <S2SV_blank> ***\\r\\n"", opts. parity ) ; newparity = term_get_parity ( tty_fd ) ; newparity = term_get_parity ( tty_fd ) ; } else { newparity = term_get_parity ( tty_fd ) ; newbits = term_get_bit_depth ( tty_fd ) ; if ( newparity!= opts. parity ) { fd_printf ( STO, ""\\r\\n*** <S2SV_blank> parity <S2SV_blank> (%d) <S2SV_blank> ***\\r\\n"", opts. parity ) ; newparity = term_get_parity ( tty_fd ) ; newparity = term_get_parity ( tty_fd ) ; } else { newparity = term_get_parity ( tty_fd ) ; newbits = term_get_bit_depth ( tty_fd ) ;",0
90,<S2SV_ModStart> mixer ) { if ( mixer -> dev ) { kfree ( mixer -> dev -> data1 ) ; kfree ( mixer -> dev -> data2 ) ; kfree ( mixer -> dev -> data2 ) ; kfree ( mixer -> dev -> data1 ) ; kfree ( mixer -> dev -> data2 ) ; kfree ( mixer -> dev -> data1 ) ; kfree ( mixer -> dev -> data2 ) ; kfree ( mixer -> dev -> data2 ) ; kfree ( mixer -> dev -> data1 ) ; kfree ( mixer -> dev -> data2 ) ; kfree ( mixer -> dev -> data2 ) ; kfree ( mixer -> dev -> data2 ) ; kfree ( mixer -> dev -> data1 ) ; kfree ( mixer -> dev -> data2 ) ; kfree ( mixer -> dev -> data1 ) ; kfree ( mixer -> dev -> data2 ) ; },0
91,"<S2SV_ModStart> type_flags ) { struct packet_rollover * rollover = NULL ; <S2SV_ModStart> EINVAL ; } mutex_lock ( & fanout_mutex ) ; err = - EINVAL ; if ( type == PACKET_FANOUT_ROLLOVER || ( type_flags & PACKET_FANOUT_FLAG_ROLLOVER ) ) { rollover = kzalloc ( sizeof ( * rollover ), GFP_KERNEL ) ; if (! rollover ) return - ENOMEM ; atomic_long_set ( & rollover -> num, 0 ) ; atomic_long_set ( & rollover -> num_huge, 0 ) ; atomic_long_set ( & rollover -> num_failed, 0 ) ; } if ( rollover ) { err = - ENOMEM ; rollover = kzalloc ( sizeof ( * rollover ), GFP_KERNEL ) ; if (! rollover ) return - ENOMEM ; atomic_long_set ( & rollover -> num, 0 ) ; atomic_long_set ( & rollover -> num_huge, 0 ) ; atomic_long_set ( & rollover -> num_failed, 0 )",0
92,"<S2SV_ModStart> ( newsk ) ; memcpy <S2SV_ModEnd> ( newnp,",0
93,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
94,"<S2SV_ModStart> int frame_out, uint64_t dx_time ) { fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"" <S2SV_ModEnd>, frame_in,",0
95,"<S2SV_ModStart> NULLav ; } if ( imp_sth -> num_rows > imp_sth -> num_cols ) { do_error ( sth, JW_ERR_SEQUENCE, ""Number <S2SV_blank> of <S2SV_blank> rows <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", imp_sth -> num_cols ) ; return Nullav ; }",0
96,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_ETXSTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXSTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_EWRPTH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_ETXNDH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface",0
97,"<S2SV_ModStart> value ) ; value = ast2obj_int ( o -> lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o ->",0
98,<S2SV_ModStart> ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ;,0
99,"<S2SV_ModStart> ( flags == EXT4_GET_BLOCKS_PRE_IO <S2SV_ModEnd> ) { ret <S2SV_ModStart> = EXT4_IO_UNWRITTEN ; else EXT4_clear_inode_state ( inode, EXT4_STATE_DIO_UNWRITTEN ) ; goto out ; } if ( flags == EXT4_GET_BLOCKS_CONVERT ) { ret = ext4_convert_unwritten_extents_endio ( handle, inode, path ) ; if ( ret >= 0 ) ext4_update_inode_fsync_trans ( handle, inode, 1 ) ; goto out2 ; } if ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) == 0 ) { set_buffer_unwritten ( bh_result ) ; goto out1 ; } if ( ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) == 0 ) { set_buffer_unwritten ( bh_result ) ; goto out2 ; } if ( ( flags & EXT4_GET_BLOCKS_CREATE ) == 0 ) { set_buffer_unwritten ( bh_result ) ; goto out1 ; } if ( ( flags & EXT4_GET",0
100,"<S2SV_ModStart> 0 ; } if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return 0 ; } <S2SV_ModStart> 2 ) ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return 0 ; } <S2SV_ModStart> 2 ) ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return 0 ; } <S2SV_ModStart> 2 ) ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return 0 ; } <S2SV_ModStart> 2 ) ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return 0 ; } <S2SV_ModStart> 4 ) ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank>",0
101,"<S2SV_ModStart> ) ) { if ( fc_may_access ( fc, controller, cgroup, O_RDONLY ) ) { sb -> st_mode = S_IFDIR | 00555 ; sb -> st_nlink = 2 ; goto out ; } if ( fc_may_access ( fc, controller, cgroup, O_RDONLY ) ) { sb -> st_mode = S_IFDIR | 00555 ; sb -> st_nlink = 2 ; goto out ; } if ( caller_is_in_ancestor ( fc -> pid, controller, cgroup, O_RDONLY ) ) { sb -> st_mode = S_IFDIR | 00555 ; sb -> st_nlink = 2 ; goto out ; } if ( fc_may_access ( fc, controller, cgroup, O_RDONLY ) ) { sb -> st_mode = S_IFDIR | 00555 ; sb -> st_nlink = 2 ; goto out ; } if ( caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { sb -> st_mode = S_IFDIR | 00555 ; sb -> st_nlink = 2 ; goto out ; }",0
102,"<S2SV_ModStart> flag ) { int mb_rows = source -> y_width >> 4 ; int mb_cols = source -> y_height >> 4 ; unsigned char * limits = cm -> pp_limits_buffer ; int mbr, mbc ; ( void ) post ; ( void ) low_var_thresh ; ( void ) flag ; memset <S2SV_ModEnd> ( limits, <S2SV_ModStart> unsigned char ) ppl, 16 * mb_rows ) ; for ( mbr = 0 ; mbr < mb_rows ; mbr ++ ) { vpx_post_proc_down_and_across_mb_row ( source -> y_buffer + 16 * mbr * source -> y_stride, source -> y_stride, source -> y_width, limits, 16 ) ; vpx_post_proc_down_and_across_mb_row ( source -> u_buffer + 16 * mbr * source -> uv_stride, source -> uv_stride, source -> uv_stride, source -> uv_width, limits, 16 ) ; vpx_post_proc_down_and_across_mb_row ( source -> v_buffer + 8 * mbr * source -> uv_stride, source",0
103,"<S2SV_ModStart> { ret = copy_to_user_nolock <S2SV_ModEnd> ( param, <S2SV_ModStart> ) ) ; if ( ret ) return - EFAULT ; param += sizeof ( struct floppy_raw_cmd ) ; if ( ( ptr -> flags & FD_RAW_READ ) && ptr -> buffer_length ) { long length = ptr -> buffer_length - ptr -> length ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if ( ret ) return ret ; ret = fd_copyout ( ptr -> kernel_data, length ) ; if ( ret ) return ret ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if ( ret ) return ret ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if ( ret ) return ret ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if ( ret ) return ret ; ret = fd_copyout ( ptr -> kernel_data, length ) ; if ( ret ) return ret ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if",0
104,"<S2SV_ModStart> : if ( issecure ( SECURE_NOROOT ) && ( new -> euid!= old -> uid || new -> egid!= old -> gid ||! cap_issubset ( new -> cap_permitted, old -> cap_permitted ) ) && bprm -> unsafe & ~ LSM_UNSAFE_PTRACE_CAP ) { if (! capable ( CAP_SETUID ) ) { new -> euid = new -> uid ; new -> egid = new -> gid ; } } else { new -> euid = new -> uid ; } new -> suid = new -> fsuid = new -> euid ; new -> sgid = new -> fsgid ; if ( effective ) new -> cap_effective = new -> cap_effective ; else cap_clear ( new -> cap_effective ) ; bprm -> cap_effective = effective ; if (! issecure ( SECURE_NOROOT ) ) { ret = audit_log_bprm_fcaps ( bprm, new, old ) ; if ( ret < 0 ) { warn_setuid_and_fcaps_mixed ( bprm -> filename ) ; return ret ; } <S2SV_ModEnd>",0
105,"<S2SV_ModStart> void ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> error ; ce = mb2_cache_entry_alloc ( ext4_mb_cache, GFP_NOFS ) ; if (! ce ) { ea_bdebug ( bh, ""out <S2SV_blank> of <S2SV_blank> memory"" ) ; return ; } <S2SV_ModEnd> error = mb_cache_entry_insert <S2SV_ModStart> bh -> b_blocknr, hash ) ; <S2SV_ModEnd> } } <S2SV_null>",0
106,"<S2SV_ModStart> ; return r_socket_http_answer <S2SV_ModEnd> ( s, <S2SV_ModStart> rlen ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
107,"<S2SV_ModStart> ; tf = ( ( c == LUA_SIGNATURE [ 0 ] )? luaU_undump : luaY_parser ) ( L, p -> z, ( c == LUA_SIGNATURE [ 0 ] )? luaY_parser ) ( L, p -> z, & p -> buff, p -> name ) : ( ( c == LUA_SIGNATURE [ 0 ] )? luaU_undump : luaY_parser ) ( L, p -> z, & p -> buff, p -> name ) ; if ( ( c == LUA_SIGNATURE [ 0 ] )? luaU_undump : luaY_parser ) ( L, p -> z, & p -> buff, p -> name ) ; else if ( ( c == LUA_SIGNATURE [ 0 ] )? luaU_undump : luaY_parser ) ( L, p -> z, & p -> buff, p -> name ) ; cl = luaF_newLclosure ( L, tf -> nups, hvalue ( gt ( L ) ) ) ; cl -> l. p = tf ; for ( i = 0 ; i < tf -> nups ; i ++ ) cl -> l. upvals [ i ]",0
108,<S2SV_ModStart> ; int err ; sock -> state = SS_UNCONNECTED <S2SV_ModEnd> ; lookup_protocol :,0
109,"<S2SV_ModStart> <S2SV_null> <S2SV_null> struct ip_options_rcu <S2SV_ModEnd> * optp, <S2SV_ModStart> * opt = kmalloc ( optlen, GFP_KERNEL ) ; if (! opt ) return - ENOMEM <S2SV_ModEnd> ; if ( <S2SV_ModStart> && copy_from_user ( & opt -> opt, data, optlen ) ) { kfree ( opt ) ; return - EFAULT ; } <S2SV_ModEnd> return ip_options_get_finish (",0
110,"<S2SV_ModStart> dl = kmalloc ( size <S2SV_ModEnd>, GFP_KERNEL )",0
111,"<S2SV_ModStart> ; trunc : if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|truncated]"" ) ) ; return ; }",0
112,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> rpki_rtr_pdu_print ( netdissect_options <S2SV_ModStart> < S2SV_null> static int <S2SV_ModEnd> rpki_rtr_pdu_print ( netdissect_options <S2SV_ModStart> < S2SV_null> static int <S2SV_ModEnd> rpki_rtr_pdu_print ( netdissect_options <S2SV_ModStart> * msg ; ND_TCHECK2 ( * tptr, pdu_len ) ; ND_PRINT ( ( ndo, ""%sRPKI-RTRv%u, <S2SV_blank> %s <S2SV_blank> PDU <S2SV_blank> (%u), <S2SV_blank> length: <S2SV_blank> %u"", indent_string ( 8 ), pdu_header -> version, pdu_header -> pdu_type <S2SV_ModEnd>, pdu_len ) <S2SV_ModStart> case RPKI_RTR_END_OF_DATA_PDU : msg = ( const u_char * ) ( pdu_header + 1 ) ; ND_PRINT ( ( ndo, ""%sSession <S2SV_blank> ID: <S2SV_blank> 0x%04x, <S2SV_blank> Serial: <S2SV_blank> %u"", indent_string ( indent + 2 ), EXTRACT_16",0
113,"<S2SV_ModStart> rose_facilities_struct facilities ; unsigned <S2SV_ModStart> = NULL ; if ( skb -> len < 4 ) { rose_transmit_clear_request ( neigh, lci, ROSE_INVALID_FACILITY, 76 ) ; return 0 ; } <S2SV_ModStart> + len + 4, & facilities ) ) { rose_transmit_clear_request ( neigh, lci, ROSE_INVALID_FACILITY, 76 ) ; return 0 ; } sk = rose_find_listener ( & facilities. source_addr, & facilities. source_call ) ; if ( sk == NULL || sk_acceptq_is_full ( sk ) || ( make = rose_make_new ( sk ) ) == NULL || ( make = rose_make_new ( sk ) ) == NULL || ( make = rose_make_new ( sk ) ) == NULL || ( make = rose_make_new ( sk ) ) == NULL || ( make = rose_make_new ( sk ) ) == NULL ) { rose_transmit_clear_request ( neigh, lci, ROSE_NETWORK_CONGESTION, 120 )",0
114,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; addr,1
115,"<S2SV_ModStart> ""E530: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> empty <S2SV_blank> string"" ) ; else if ( term_is_gui ( T_NAME ) ) errmsg = ( char_u * ) N_ ( ""E531: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; else <S2SV_ModStart> == FAIL ) errmsg = ( char_u * ) N_ ( ""E522: <S2SV_blank> Not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> termcap"" ) ; else if ( term_is_gui ( T_NAME ) ) errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; else if ( term_is_gui ( T_NAME ) ) errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; else if ( set_termname ( T_NAME ) == FAIL ) errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" )",0
116,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode",0
117,"<S2SV_ModStart> ) ; struct o2nm_cluster * cluster = <S2SV_ModEnd> to_o2nm_cluster_from_node ( node <S2SV_ModStart> ; } write_lock ( & cluster -> cl_nodes_lock ) ; if ( test_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS",0
118,"<S2SV_ModStart> case BSD_AFNUM_ISO : isoclns_print <S2SV_ModEnd> ( ndo,",0
119,"<S2SV_ModStart> separator = * src ++ ; for ( ; ; ) { if ( src [ 0 ] == '\\0' ) { src ++ ; continue ; } else if ( src [ 0 ] == '.' ) { if ( src [ 2 ] == '/' || src [ 2 ] == '\\0' ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NODOTDOT ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> contains <S2SV_blank> \'..\'"" ) ; return ( ARCHIVE_FAILED ) ; } } } else if ( src [ 2 ] == '/' || src [ 2 ] == '\\0' ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NODOTDOT ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> contains <S2SV_blank> \'..\'"" ) ; return ( ARCHIVE_FAILED ) ; } } else { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NODOTDOT ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_",0
120,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TPM_RC <S2SV_ModEnd> tpm_kdfa ( TSS2_SYS_CONTEXT <S2SV_ModStart> resultKey ) { int i, j ; UINT16 bytes = bits / 8 ; resultKey -> t. size = 0 ; tpm2bLabel. t. size = 0 ; tpm2bBits. t. size = 0 ; tpm2b_i_2. t. size = 4 ; bitsSwizzled = string_bytes_endian_convert_32 ( bits ) ; * ( UINT32 * ) tpm2bBitsPtr = bitsSwizzled ; * ( UINT32 * ) tpm2b_i_2Ptr = i_Swizzled ; * ( UINT32 * ) tpm2bBitsPtr = bitsSwizzled ; for ( i = 0 ; i < tpm2bLabel. t. size ; i ++ ) { i_Swizzled = string_bytes_endian_convert_32 ( i ) ; * ( UINT32 * ) tpm2b_i_2Ptr = i_Swizzled ; * ( UINT32 * ) tpm",0
121,"<S2SV_ModStart> size_t size ; memset ( cmpt, 0, sizeof ( jas_image_cmpt_t ) ) ; <S2SV_ModStart> 0 ) ||! jas_safe_intfast32_add ( tlx, width, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ||! jas_safe_intfast32_add ( tlx, tly, 0 ) ||! jas_safe_intfast32_add ( tlx, tly, width, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ||! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ) { goto error ; } cmpt -> stream_ = jas_stream_memopen2 ( 0, size ) ; if (! cmpt -> stream_ ) { goto error ; } cmpt -> stream_ = jas_stream_memopen2 ( 0, size ) ; if (! cmpt -> stream_ ) {",0
122,"<S2SV_ModStart> s ) { if ( s > SIZE_MAX / sizeof ( tdata_t ) ) { rdp_protocol_error ( ""Can\'t <S2SV_blank> allocate <S2SV_blank> %d <S2SV_blank> bytes"", ( size_t ) SIZE_MAX / sizeof ( tdata_t ) s ) ; rdp_protocol_error ( ""Can\'t <S2SV_blank> allocate <S2SV_blank> %d <S2SV_blank> bytes"", ( size_t ) SIZE_MAX / sizeof ( tdata_t ) s ) ; } else { rdp_protocol_error ( ""Can\'t <S2SV_blank> allocate <S2SV_blank> %d <S2SV_blank> bytes"", ( size_t ) SIZE_MAX / sizeof ( tdata_t ) s ) ; rdp_protocol_error ( ""Can\'t <S2SV_blank> allocate <S2SV_blank> %d <S2SV_blank> bytes"", ( size_t ) s ) ; rdp_protocol_error ( ""Can\'t <S2SV_blank> allocate <S2SV_blank> %d <S2SV_blank> bytes"", ( size_t ) SIZE_MAX / sizeof ( tdata_t ) s ) ; }",0
123,<S2SV_ModStart> ; if ( unlikely ( count > ( size_t ) sizeof ( cmd. type ) ) ) { ret = - EINVAL ; goto bail ; } rcd = ( struct qib_ctxtdata * ) data ; if ( copy > ( size_t ) sizeof ( cmd. ctxt_info ) ) { ret = - EINVAL ; goto bail ; } if ( copy > ( size_t ) sizeof ( cmd. cmd. ctxt_info ) ) { ret = - EINVAL ; goto bail ; } copy = sizeof ( cmd. cmd. ctxt_info ) ; dest = & cmd. cmd. ctxt_info ; src = & ucmd -> cmd. ctxt_info ; break ; case QIB_CMD_GET_CTXT_INFO : copy = sizeof ( cmd. cmd. ctxt_info ) ; dest = & cmd. cmd. ctxt_info ; src = & ucmd -> cmd. ctxt_info ; break ; case QIB_CMD_SET_TID_INFO : copy = sizeof ( cmd. cmd. tid_info ) ; dest = & cmd. cmd. tid_info ; src = & ucmd -> cmd. tid_info ; break ; case QIB_CMD,0
124,<S2SV_ModStart> ; MATLAB_KO : quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
125,<S2SV_ModStart> peer ) { spin_unlock_bh ( & net -> nsid_lock ) ; return peer ; } <S2SV_ModEnd> spin_unlock_bh ( &,0
126,<S2SV_ModStart> ++ ) { if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\r' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\n' ) { endofheaders = i + 1 ; } } else if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\r' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\n' ) { endofheaders = i + 1 ; } } else if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\r' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\n' ) { endofheaders = i + 1 ; } } else if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\r' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\n' ) { endofheaders = i,0
127,"<S2SV_ModStart> && POKE_UINT8 ( p_id_len <S2SV_ModEnd> ) && POKE_UINT16 <S2SV_ModStart> && POKE_UINT16 ( p_id_len <S2SV_ModEnd> ) && POKE_UINT16 <S2SV_ModStart> && POKE_UINT16 ( p_id_len <S2SV_ModEnd> ) && POKE_UINT16 <S2SV_ModStart> && POKE_UINT16 ( p_id_len <S2SV_ModEnd> ) && POKE_UINT16 ( <S2SV_ModStart> & hardware -> h_hwaddr, ETHER_ADDR_LEN <S2SV_ModEnd> ) && POKE_UINT16 <S2SV_ModStart> & hardware -> h_hwaddr, ETHER_ADDR_LEN <S2SV_ModEnd> ) && POKE_UINT16 <S2SV_ModStart> & hardware -> h_hwaddr, ETHER_ADDR_LEN <S2SV_ModEnd> ) && POKE_UINT16 <S2SV_ModStart> & hardware -> h_hwaddr, ETHER_ADDR_LEN <S2SV_ModEnd> ) && POKE_UINT16 <S2SV_ModStart> & hardware -> h_hwaddr, ETHER_ADDR_LEN <S2SV_ModEnd> ) && POKE_UINT16 <S2SV_ModStart> & hardware -> h_hwaddr, ETHER_ADDR_LEN <S2SV_ModEnd> ) && POKE_UINT",0
128,<S2SV_ModStart> == datalen && ( <S2SV_ModStart> && ( flags & ( ASN1_FLAG_LAST_MATCHED | ASN1_FLAG_INDEFINITE_LENGTH ) <S2SV_ModEnd> ) || ( <S2SV_ModStart> && ( flags & ( ASN1_FLAG_LAST_MATCHED | ASN1_FLAG_INDEFINITE_LENGTH ) <S2SV_ModEnd> ) || ( <S2SV_ModStart> && ( flags & ( ASN1_FLAG_MATCHED | ASN1_FLAG_INDEFINITE_LENGTH ) <S2SV_ModEnd> ) || ( <S2SV_ModStart> && ( flags & ( ASN1_FLAG_LAST_MATCHED | ( flags & ( ASN1_FLAG_INDEFINITE_LENGTH | ASN1_FLAG_INDEFINITE_LENGTH ) <S2SV_ModEnd> ) || ( <S2SV_ModStart> && ( flags & ( ASN1_FLAG_LAST_MATCHED | ASN1_FLAG_INDEFINITE_LENGTH ) <S2SV_ModEnd> ) || ( <S2SV_ModStart> && ( flags & ( ASN1_FLAG_MATCHED | ASN1_FLAG_INDEFINITE_LENGTH ) <S2SV_ModEnd> ) || ( <S2SV_ModStart> && ( flags & ( ASN1_FLAG_LAST_MATCHED | ( flags & ( ASN1_FLAG_INDEFINITE_LENGTH | ASN1_FLAG_INDEFINITE_LENGTH ) <S2SV_ModEnd> ),0
129,"<S2SV_ModStart> = 0 ; memset ( & sp -> assocparams, 0, sizeof ( struct sctp_association_params ) ) ; memset ( & sp -> peerparams, 0, sizeof ( struct sctp_association_params ) ) ; memset ( & sp -> remote_hbinterval, 0, sizeof ( struct sctp_association_params ) ) ; memset ( & sp -> remote_hbinterval, 0, sizeof ( struct sctp_association_params ) ) ; memset ( & sp -> remote_hbinterval, 0, sizeof ( struct sctp_association_params ) ) ; memset ( & sp -> remote_hbinterval, 0, sizeof ( struct sctp_association_params ) ) ; memset ( & sp -> remote_hbinterval, 0, sizeof ( struct sctp_association_params ) ) ; memset ( & sp -> remote_hbinterval, 0, sizeof ( struct sctp_association_params ) ) ; memset ( & sp -> remote_hbinterval, 0, sizeof ( struct sctp_association_params ) ) ; memset ( & sp -> remote_hbinterval, 0, sizeof ( struct sctp_association_",0
130,"<S2SV_ModStart> int mpeg4_decode_profile_level ( MpegEncContext <S2SV_ModEnd> * s, <S2SV_ModStart> 4 ) ; if ( s -> avctx -> profile == 0 && s -> avctx -> level == 8 ) { s -> avctx -> profile = 0 ; } else <S2SV_ModEnd> { s -> <S2SV_ModStart> 8 ) { s -> avctx -> profile = 0 ; } <S2SV_ModEnd> return 0 ;",0
131,"<S2SV_ModStart> + MIDQ_DATA_BUFF ; struct snd_rawmidi_substream * substream = mpu -> substream_input ; <S2SV_ModStart> 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if (",0
132,"<S2SV_ModStart> rule ) ; if ( result < 0 ) { pr_err ( "" <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
133,<S2SV_ModStart> file ) ; <S2SV_ModEnd> } } <S2SV_null>,0
134,"<S2SV_ModStart> ) ) ; if ( ke -> nonce == 0 ) { loglog ( RC_LOG_SERIOUS, ""%s: <S2SV_blank> nonce <S2SV_blank> is <S2SV_blank> zero <S2SV_blank> in <S2SV_blank> parent <S2SV_blank> inI1outR1"", __FUNCTION__ ) ; return ; } <S2SV_ModStart> ) ) ; if ( ke -> nonce == 0 ) { loglog ( RC_LOG_SERIOUS, ""%s: <S2SV_blank> nonce <S2SV_blank> is <S2SV_blank> zero <S2SV_blank> in <S2SV_blank> parent <S2SV_blank> inI1outR1"", __FUNCTION__ ) ; return ; } <S2SV_ModStart> ) ) ; if ( ke -> nonce == 0 ) { loglog ( RC_LOG_SERIOUS, ""%s: <S2SV_blank> nonce <S2SV_blank> is <S2SV_blank> zero <S2SV_blank> in <S2SV_blank> parent <S2SV_blank> inI1outR1"", __FUNCTION__ ) ; return ; } if ( ke -> nonce == 0 ) { loglog ( RC_LOG_SERIOUS, ""%s: <S2SV_blank> nonce <S2SV_blank> is <S2SV_blank> zero <S2SV_blank> in <S2SV_blank> parent <S2SV_blank> inI1outR1"", __FUNCTION__ ) ; return ; } passert ( ke -> nonce == 0 ) { loglog ( RC_LOG_SERIOUS, ""%s: <S2SV_blank> nonce <S2SV_blank> is <S2SV_blank> zero <S2SV_blank> in <S2SV_blank> parent <S2SV_blank> inI1outR1""",0
135,"<S2SV_ModStart> ;\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> setInterval(\'checkSession()\', <S2SV_blank> %s);\\n"" <S2SV_ModEnd> ""\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> if <S2SV_blank> (e.origin <S2SV_blank>!== <S2SV_blank> targetOrigin <S2SV_blank> ) <S2SV_blank> {\\n"" <S2SV_ModStart> = <S2SV_blank> setInterval(\'checkSession()\', <S2SV_blank> %s);\\n"" <S2SV_ModEnd> "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }\\n"" ""\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> if <S2SV_blank> (e.data <S2SV_blank>!== <S2SV_blank> targetOrigin <S2SV_blank> ) <S2SV_blank> {\\n"" <S2SV_ModStart> = <S2SV_blank> setInterval(\'checkSession()\', <S2SV_blank> %s);\\n"" <S2SV_ModEnd> "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> if <S2SV_blank> (e.origin <S2SV_blank>!== <S2SV_blank> targetOrigin <S2SV_blank> ) <S2SV_blank> {\\n"" <S2SV_ModStart> = <S2SV_blank> setInterval(\'checkSession()\', <S2SV_blank> %s);\\n"" <S2SV_ModEnd> "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }\\n"" ""\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> if <S2SV_blank> (e.origin <S2SV_blank>!== <S2SV_blank> targetOrigin <S2SV_blank> ) <S2SV_blank> {\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> console.debug(\'receiveMessage: <S2SV_blank> cross-site <S2SV_blank> scripting <S2SV_blank> attack?\');\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> return",0
136,"<S2SV_ModStart> req, size_t <S2SV_ModEnd> acl_len ) { <S2SV_ModStart> int status ; __be32 * savep = req -> rq_rcv_buf. head <S2SV_ModEnd> ; uint32_t attrlen <S2SV_ModStart> acl_len = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> status = decode_op_hdr ( xdr, OP_GETATTR <S2SV_ModEnd> ) )!= <S2SV_ModStart> goto out ; if ( ( status = decode_attr_bitmap ( xdr, bitmap ) )!= 0 ) goto out ; if ( ( status = decode_attr_length ( xdr, & attrlen, & savep ) )!= 0 ) goto out ; if ( unlikely ( bitmap [ 0 ] & FATTR4_WORD0_ACL ) ) { size_t recvd ; u32 recvd ; recvd = req -> rq_rcv_buf. len - hdrlen ; if ( attrlen > recvd ) { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen, recvd ) ; return - EINVAL ; } xdr_read_pages ( xdr, attrlen )",0
137,<S2SV_ModStart> ; if ( unlikely ( unfrag_ip6hlen + frag_hdr_sz > skb -> len ) ) { kfree_skb ( skb ) ; segs = ERR_PTR ( - EINVAL ) ; goto out ; },0
138,"<S2SV_ModStart> while ( ( ( <S2SV_ModStart> i < to_read ) && (! gf_is_zero ( tmpName [ i ] ) ) ) { GF_LOG ( GF_LOG_ERROR, gf_strerror ( GF_LOG_ERROR, gf_strerror ( GF_LOG_ERROR, gf_strerror ( GF_LOG_ERROR, gf_strerror ( GF_LOG_ERROR, gf_strerror ( GF_LOG_ERROR, gf_strerror ( GF_LOG_ERROR, gf_strerror ( GF_LOG_ERROR, gf_strerror ( GF_LOG ( GF_LOG_ERROR, gf_strerror ( GF_LOG_ERROR, gf_strerror ( GF_LOG_ERROR, gf_strerror ( GF_LOG_ERROR, gf_strerror ( GF_LOG_ERROR, gf_strerror ( GF_LOG_ERROR, gf_strerror ( GF_LOG_ERROR, gf_strerror ( GF_LOG_ERROR, gf_strerror ( GF_LOG_ERROR, gf_strerror ( GF_LOG_ERROR, gf_str",0
139,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
140,<S2SV_ModStart> AVPALETTE_SIZE ) ; if ( in -> data [ plane ] ) { const int width = ( plane == 1 || plane == 2 )? inlink -> w : inlink -> w ; const int height = ( plane == 1 || plane == 2 )? inlink -> h : inlink -> h ; step = s -> max_step [ plane ] ; outrow = out -> data [ plane ] + ( width - 1 ) * step ; inrow = in -> data [ plane ] + ( height - 1 ) * step ; for ( i = 0 ; i < height ; i ++ ) { uint16_t * outrow16 = ( uint16_t * ) outrow ; uint16_t * inrow16 = ( uint16_t * ) inrow ; for ( j = 0 ; j < width ; j ++ ) outrow16 [ j ] = inrow16 [ - j ] ; } break ; case 4 : { uint16_t * outrow16 = ( uint16_t * ) outrow ; uint16_t * inrow16 = ( uint16_t * ) inrow ; for ( j = 0 ; j < width ; j ++ ) outrow,0
141,"<S2SV_ModStart> '/' ) { if ( strlen ( pszFileName ) > ODBC_FILENAME_MAX - 5 ) { inst_logPushMsg ( __FILE__, __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; }",0
142,"<S2SV_ModStart> { owner = ssplit <S2SV_ModEnd> ( auth, <S2SV_ModStart> ) ; } if ( owner && * owner ) { if ( snumber ( owner ) ) { uid = ( int ) stoi ( owner ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { uid = HTTP -> uid ; } else { uid = 0 ; } } if ( group && * group ) { if ( snumber ( group ) ) { gid = ( int ) stoi ( group ) ; } else { gid = groupToID ( group ) ; } } if ( perms && snumber ( perms ) ) { mode = ( int ) stoiradix ( perms, - 1, NULL ) ; } else { mode = 0 ; }",0
143,"<S2SV_ModStart> ; if ( nelements > CDF_PROP_LIMIT ) { DPRINTF ( ( ""CDF_PROP_LIMIT <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)\\n"", nelements, CDF_PROP_LIMIT ) ) ; goto out ; } <S2SV_ModStart> ; if ( nelements > CDF_PROP_LIMIT ) { DPRINTF ( ( ""CDF_PROP_LIMIT <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)\\n"", nelements, CDF_PROP_LIMIT ) ) ; goto out ; } <S2SV_ModStart> 0 ) { DPRINTF ( ( ""CDF_PROP_LIMIT <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)\\n"", nelements, CDF_PROP_LIMIT ) ) ; goto out ; } <S2SV_ModStart> ; if ( nelements > CDF_PROP_LIMIT ) { DPRINTF ( ( ""CDF_PROP_LIMIT <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)\\n"", nelements, CDF_PROP_LIMIT ) ) ; goto out ; } <S2SV_ModStart> 0 ) { DPRINTF ( ( ""CDF_PROP_LIMIT <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%",0
144,<S2SV_ModStart> ; if ( inet -> inet_opt && inet -> inet_opt -> opt. <S2SV_ModEnd> srr ) daddr,0
145,"<S2SV_ModStart> ) ) { pr_err ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> "" ""ACCEPT/DROP\\n"" ) ; return - EINVAL ; }",0
146,"<S2SV_ModStart> struct eigrp_tlv_at_ext_t * eigrp_tlv_at_ext ; } if ( eigrp_tlv_len < 4 ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", eigrp_tlv_len ) ) ; return ; } if ( eigrp_tlv_len < 8 ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", eigrp_tlv_len ) ) ; return ; } if ( eigrp_tlv_len < 4 ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", eigrp_tlv_len ) ) ; return ; } if ( eigrp_tlv_len < 4 ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", eigrp_t",0
147,"<S2SV_ModStart> ; # if CONFIG_MEM_MANAGER int number_aau ; if ( vpx_mm_create_heap_memory ( ) < 0 ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> create <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ; ) } number_aau = ( ( size + align - 1 + ADDRESS_STORAGE_SIZE ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) + 1 ; addr = VPX_MALLOC_L ( size + align - 1 + ADDRESS_STORAGE_SIZE ) ; # endif <S2SV_ModStart> ADDRESS_STORAGE_SIZE ) ; <S2SV_ModEnd> if ( addr",0
148,"<S2SV_ModStart> int res ; long long <S2SV_ModEnd> export_index_table [ indexes <S2SV_ModStart> long long export_index_table [ SQUASHFS_LOOKUP_BLOCKS ( sBlk. s. inodes ) + 1 <S2SV_ModStart>. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } res = read_fs_bytes ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; }",0
149,"<S2SV_ModStart> ) ; } if ( * ptr == '/' ) { rw_exit ( & sdvp -> sdev_contents ) ; devzvol_create_pool_dirs ( dvp ) ; rw_enter ( & sdvp -> sdev_contents, RW_READER ) ; return ( devname_readdir_func ( dvp, uiop, cred, eofp, 0 ) ) ; } ptr = strchr ( ptr + 1, '/' ) + 1 ; rw_exit ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents, RW_READER ) ; return ( devname_readdir_func ( dvp, uiop,",0
150,<S2SV_ModStart> |= EXT4_EXT_MARK_UNINIT2 ; split_flag |= EXT4_GET_BLOCKS_PRE_IO ;,0
151,"<S2SV_ModStart> ; } else { if ( strcmp ( p1, ""none"" ) == 0 ) { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; } else { dcfg -> hash_is_enabled = HASH_DISABLED ; dcfg -> hash_enforcement = HASH_DISABLED ; }",0
152,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModEnd> ) ; dst",0
153,"<S2SV_ModStart> = 0.0 ; uint16 <S2SV_ModEnd> nstrips = 0 <S2SV_ModStart> ntiles = 0 ; uint16 <S2SV_ModEnd> planar = 0 <S2SV_ModStart> = 0 ; if ( buffsize > MAX_SCANLINESIZE ) { TIFFError ( ""loadImage"", ""Buffer <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", buffsize ) ; return - 1 ; } <S2SV_ModStart> = buffsize ; if ( buffsize > MAX_SCANLINESIZE ) { TIFFError ( ""loadImage"", ""Buffer <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", buffsize ) ; return - 1 ; } if ( buffsize > MAX_SCANLINESIZE ) { TIFFError ( ""loadImage"", ""Buffer <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", buffsize ) ; return - 1 ; } <S2SV_ModStart> = buffsize ; if ( buffsize > MAX_SCANLINESIZE ) { TIFFError ( ""loadImage"", ""Buffer <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", buffsize ) ; return - 1 ; } if ( buffsize > MAX_SCANLINESIZE ) { TIFFError ( ""loadImage"",",0
154,"<S2SV_ModStart> = 0 ; # if CONFIG_VP8_ENCODER if ( global -> codec -> type == VPX_CODEC_8 ) { ctrl_args = vp8_args ; ctrl_args_map = vp8_arg_ctrl_map ; # endif } else if ( global -> codec -> type == VPX_CODEC_9 ) { ctrl_args = vp9_args ; ctrl_args_map = vp9_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp9"" ) == 0 ) { ctrl_args = vp9_args ; ctrl_args_map = vp9_arg_ctrl_map ; # endif } else if (! strcmp ( * argj, ""--"" ) ) { eos_mark_found = 1 ; continue ; } else if ( arg_match ( & arg, & outputfile, argi ) ) { config -> out_fn = arg. val ; } else if ( arg_match ( & arg, & fpf_name, argi ) ) { config -> stats_fn = arg. val ; } else if ( arg_match ( & arg, & use_iv",0
155,"<S2SV_ModStart> ""server_input_global_request: <S2SV_blank> tcpip-forward <S2SV_blank> listen <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d"", rtype, ( u_short ) fwd. listen_port, ( u_short ) fwd. listen_port <S2SV_ModEnd> ) ; dump_packet <S2SV_ModStart> ""server_input_global_request: <S2SV_blank> tcpip-forward <S2SV_blank> listen <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d"", rtype, ( u_short ) fwd. listen_port <S2SV_ModEnd> ) ; dump_packet <S2SV_ModStart> ""server_input_global_request: <S2SV_blank> tcpip-forward <S2SV_blank> listen <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d"", rtype, ( u_short ) fwd. listen_port, ( u_short ) fwd. listen_port <S2SV_ModEnd> ) ; dump_packet <S2SV_ModStart> ""server_input_global_request: <S2SV_blank> tcpip-forward <S2SV_blank> listen <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d"", rtype, ( u_short ) fwd. listen_port <S2SV_ModEnd> ) ; dump_packet <S2SV_ModStart> ""server_input_global_request: <S2SV_blank> tcpip-forward <S2SV_blank> listen <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d"", rtype, ( u_short ) fwd. listen_host, fwd. listen_port <S2SV_ModEnd> ) ; dump_packet",0
156,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
157,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
158,"<S2SV_ModStart> goto errout ; } memset ( & gr -> gr_ctx, 0, sizeof ( gss_union_ctx_id_desc ) ) ;",0
159,"<S2SV_ModStart> = 0 ; struct ext4_extent * ext = EXT4_I ( inode ) ; <S2SV_ModStart> goto out ; memset ( EXT4_I ( inode ) -> i_data, 0, sizeof ( EXT4_I ( inode ) -> i_data_len ) ) ; memset ( bh -> b_data + bh -> b_size - bh -> b_size, 0, sizeof ( EXT4_I ( inode ) -> i_data_len ) ) ; neh = ext_block_hdr ( bh ) ; if ( ext_depth ( inode ) ) neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block_idx ( inode, 0 ) ) ; else neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block ( inode, 0 ) ) ; neh -> eh_magic = EXT4_EXT_MAGIC ; ext4_extent_block_csum_set ( inode, neh ) ;",0
160,"<S2SV_ModStart> } if ( preverify_ok <S2SV_ModEnd> ) { SSL_SESSION <S2SV_ModStart>, index_session_authenticated, <S2SV_ModEnd> ( void * <S2SV_ModStart>, index_session_authenticated, <S2SV_ModEnd> ( void * <S2SV_ModStart>, index_session_authenticated, <S2SV_ModEnd> ( void * <S2SV_ModStart>, index_session_authenticated, <S2SV_ModEnd> ( void * <S2SV_ModStart>, index_session_authenticated, <S2SV_ModEnd> ( void * <S2SV_ModStart>, index_session_authenticated, <S2SV_ModEnd> ( void * <S2SV_ModStart>, index_session_authenticated, <S2SV_ModEnd> ( void * <S2SV_ModStart>, ( void * ) <S2SV_ModEnd> ( - 1 <S2SV_ModStart> ) ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } <S2SV_ModEnd> return 0 ;",0
161,"<S2SV_ModStart> egid ; int ret ; if ( kuid_has_mapping ( parent_ns, owner ) || kgid_has_mapping ( parent_ns, group ) ) return - EPERM",0
162,"<S2SV_ModStart> ( memcmp ( cmac, computed_cmac, AT91_AES_BLOCK_SIZE_BYTE )",0
163,"<S2SV_ModStart> } if ( c -> nreslevels > JPEG2000_MAX_RESLEVELS ) { av_log ( s -> avctx, AV_LOG_ERROR, ""nreslevels <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", JPEG2000_MAX_RESLEVELS ) ; return AVERROR_INVALIDDATA ; } c -> nreslevels2decode = c -> nreslevels - s -> reduction_factor ; c -> log2_cblk_width = ( bytestream2_get_byteu ( & s -> g ) & 15 ) + 2 ; c -> log2_cblk_height = ( bytestream2_get_byteu ( & s -> g ) & 15 ) + 2 ; c -> log2_cblk_width = ( bytestream2_get_byteu ( & s -> g ) & 15 ) + 2 ; c -> log2_cblk_height = ( bytestream2_get_byteu ( & s -> g ) & 15 ) + 2 ; if ( c -> log2_cblk_width + c -> log2_cblk_height > 12 )",0
164,"<S2SV_ModStart> CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> CVAR_LATCH ) ; if ( COM_CompareExtension ( s_alDriver -> string, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", s_alDriver -> string ) ; return qfalse ; }",1
165,<S2SV_ModStart> ; bool is_drop_n_account ; if ( skb_len < TPACKET_HDR_LEN + sizeof ( * h. h2 ) || skb_len < TPACKET_HDR_LEN + sizeof ( * h. h3 ) || skb_len < TPACKET_HDR_LEN + sizeof ( * h. h3 ) ) { kfree_skb ( skb ) ; goto drop_n_restore ; } snaplen = skb -> len - skb_mac_header ( skb ) ; if ( snaplen < TPACKET_HDR_LEN + sizeof ( * h. h2 ) ) snaplen = TPACKET_HDR_LEN + sizeof ( * h. h3 ) ; if ( snaplen < TPACKET_HDR_LEN + sizeof ( * h. h2 ) ) snaplen = TPACKET_HDR_LEN + sizeof ( * h ) - skb_mac_header ( skb ) ; if ( snaplen < TPACKET_HDR_LEN + sizeof ( * h. h2 ) ) snaplen = TPACKET_H,0
166,"<S2SV_ModStart> SCTP_STATE_ESTABLISHED ) { if (! list_empty ( & trans -> transports ) ) list_move_tail ( & trans -> transports, & new -> peer. transport_addr_list ) ) list_move_tail ( & trans -> transports, & new -> peer. transport_addr_list ) ; else list_move_tail ( & trans -> transports, & new -> peer. transport_addr_list ) ; } } else { list_for_each_entry ( trans, & new -> peer. transport_addr_list, transports ) { if (! sctp_assoc_lookup_paddr ( asoc, & trans -> ipaddr ) ) list_move_tail ( & trans -> transports, & new -> peer. transport_addr_list ) ) sctp_assoc_rm_peer ( asoc, trans ) ; } else { list_for_each_entry ( trans, & new -> peer. transport_addr_list, transports ) { if (! sctp_assoc_lookup_paddr ( asoc, & trans -> ipaddr ) ) sctp_assoc_rm_peer ( asoc, trans )",0
167,<S2SV_ModStart> return false ; if ( msg -> flags & NDP_MSG_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_MSG_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_MSG_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_MSG_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_MSG_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_MSG_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_MSG_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_MSG_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_MSG_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_MSG_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_MSG_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_MSG_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_MSG_FLAG_RAW_STRUCT ) { if ( msg -> flags & NDP_MSG_FLAG_RAW_STRUCT,0
168,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> lsm_set_label_at ( int <S2SV_ModStart> ( name, ""nop"" ) == 0 ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( name, ""none"" ) == 0 ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( name, ""AppArmor"" ) == 0 ) on_exec = 0 ; if ( on_exec ) { labelfd = openat ( procfd, ""self/attr/exec"", O_RDWR ) ; } else { labelfd = openat ( procfd, ""self/attr/current"", O_RDWR ) ; } else { labelfd = openat ( procfd, ""self/attr/exec"", O_RDWR ) ; } if ( labelfd < 0 ) { SYSERROR ( ""Unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> LSM <S2SV_blank> label"" ) ; ret = - 1 ; goto out ; } size = sprintf ( command, ""changeprofile <S2SV_blank> %s"", lsm_label ) ; if ( size < 0 ) { SYSERROR ( ""Failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> apparmor <S2SV_blank> profile"" ) ; ret",0
169,<S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) ( ( OPJ_UINT32 ),0
170,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
171,"<S2SV_ModStart> ) { # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> common. frame_type == KEY_FRAME ) { cpi -> twopass. bits_left -= bits_used ; cpi -> twopass. bits_left = MAX ( cpi -> twopass. bits_left, 0 ) ; } else { cpi -> twopass. bits_left -= bits_used ; cpi -> twopass. bits_left = MAX ( cpi -> twopass. bits_left, 0 ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
172,"<S2SV_ModStart> charlen ; } curqlevel = tmpql = ( lquery_level * ) palloc0 ( ITEMSIZE * num ) ; ptr = buf ; while ( * ptr ) { charlen = pg_mblen ( ptr ) ; if ( charlen == 1 ) { GETVAR ( curqlevel ) = lptr = ( nodeitem * ) palloc0 ( sizeof ( nodeitem ) * ( numOR + 1 ) ) ; lptr -> start = ptr + 1 ; state = LQPRS_WAITOPEN ; } else if ( charlen == 1 ) { GETVAR ( curqlevel ) = lptr = ( nodeitem * ) palloc0 ( sizeof ( nodeitem ) * ( numOR + 1 ) ) ; lptr -> start = ptr + 1 ; state = LQPRS_WAITDELIM ; curqlevel -> numvar = 1 ; } else if ( charlen == 1 && t_iseq ( ptr, '!' ) ) { GETVAR ( curqlevel ) = lptr = ( nodeitem * ) palloc0 ( sizeof ( nodeitem ) * ( numOR + 1 ) ) ; lptr -> start = ptr + 1 ; state = LQPRS_WAIT",0
173,"<S2SV_ModStart> * header, struct mb2_cache_entry <S2SV_ModEnd> * pce ) <S2SV_ModStart> -> h_hash ) ; struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache = <S2SV_ModStart> ; struct mb2_cache <S2SV_ModEnd> * ce ; <S2SV_ModStart> : ce = mb2_cache_entry_find_first ( ext4_mb_cache, inode -> i_sb -> s_bdev, hash ) ; while ( ce ) { struct buffer_head * bh ; if (! bh ) { EXT4_ERROR_INODE ( inode, ""block <S2SV_blank> %lu <S2SV_blank> read <S2SV_blank> error"", ( unsigned long ) ce -> e_block ) ; break ; } bh = sb_bread ( inode -> i_sb, ce -> e_block ) ; if (! bh ) { EXT4_ERROR_INODE ( inode, ""block <S2SV_blank> %lu <S2SV_blank> read <S2SV_blank> error"", ( unsigned long ) ce -> e_block ) ; } else if ( le32_to_cpu ( BHDR ( bh ) -> h_refcount ) >= EXT4_XATTR_REFCOUNT_MAX ) { ea_idebug ( inode, ""block <S2SV_blank> %lu <S2SV_blank> refcount <S2SV_blank> >=",0
174,"<S2SV_ModStart> data_offset ) { int <S2SV_ModEnd> pkt_len ; char <S2SV_ModStart> offset ; int <S2SV_ModEnd> pkt_len = parse_cosine_rec_hdr <S2SV_ModStart> ; pkt_len = cosine_hex_dump <S2SV_ModEnd> ( wth -> <S2SV_ModStart>, pkt_len, & wth -> frame_buffer <S2SV_ModEnd>, err, <S2SV_ModStart> ; return parse_cosine_hex_dump <S2SV_ModEnd> ( wth -> <S2SV_ModStart>, pkt_len, & wth -> frame_buffer <S2SV_ModEnd>, err, <S2SV_ModStart> ; return parse_cosine_hex_dump <S2SV_ModEnd> ( wth -> <S2SV_ModStart> ; return parse_cosine_hex_dump <S2SV_ModEnd> ( wth -> <S2SV_ModStart>, pkt_len, <S2SV_ModEnd> wth -> frame_buffer <S2SV_ModStart> ; return parse_cosine_hex_dump <S2SV_ModEnd> ( wth -> <S2SV_ModStart>, pkt_len, <S2SV_ModEnd> wth -> frame_buffer <S2SV_ModEnd>, err,",0
175,"<S2SV_ModStart> ; if ( line_len == 0 ) { error = add_push_report_pkt ( push, NULL ) ; if ( error!= GIT_ITEROVER ) { error = add_push_report_pkt ( push, NULL ) ; if ( error!= GIT_ITEROVER ) { error = add_push_report_pkt ( push, NULL ) ; if ( error!= GIT_ITEROVER ) { error = add_push_report_pkt ( push, NULL ) ; if ( error!= GIT_ITEROVER ) { error = add_push_report_pkt ( push, NULL ) ; if ( error!= GIT_ITEROVER ) { error = add_push_report_pkt ( push, NULL ) ; if ( error!= GIT_ITEROVER ) { error = add_push_report_pkt ( push, NULL ) ; if ( error!= GIT_ITEROVER ) { error = add_push_report_pkt ( push, NULL ) ; if ( error!= GIT_ITEROVER ) { error = add_push_report_pkt ( push, NULL ) ; if ( error!= GIT_ITEROVER ) {",0
176,"<S2SV_ModStart> && n > SSL3_RT_HEADER_LENGTH ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } <S2SV_ModEnd> if ( left <S2SV_ModStart> && n > SSL3_RT_HEADER_LENGTH ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; }",0
177,"<S2SV_ModStart> ) break ; if ( WPG_Palette. StartIndex >= WPG_Palette. NumOfEntries ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( WPG_Palette. StartIndex >= WPG_Palette. NumOfEntries ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ) break ; if ( WPG_Palette. StartIndex >= WPG_Palette. NumOfEntries ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( WPG_Palette. StartIndex >= WPG_Palette. NumOfEntries ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( WPG_Palette. StartIndex >= WPG_Palette. NumOfEntries ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( WPG_Palette. StartIndex >= WPG_Palette. NumOfEntries ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( WPG_Palette. StartIndex >= WPG_Palette. NumOfEntries ) ThrowReader",0
178,<S2SV_ModStart> - ENOMEM ; hdr. size_in -= <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
179,"<S2SV_ModStart> int hstartcol ; jpc_fix_t * buf2 ; jpc_fix_t * buf2 = jas_alloc2 ( bufsize, sizeof ( jpc_fix_t ) ) ; if (! buf2 ) { abort ( ) ; } hstartcol = ( numrows + 1 - parity ) >> 1 ; m = numrows - hstartcol ; n = m ; dstptr = buf ; srcptr = & a [ ( 1 - parity ) * stride ] ; srcptr2 = & a [ ( 2 - parity ) * stride ] ; while ( n -- > 0 ) { dstptr2 = dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { dstptr2 = dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i <",0
180,"<S2SV_ModStart> sun_data ) ; if ( sun_info. length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> sun_pixels ) ; if ( sun_info. length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> sun_data ) ; if ( sun_info. length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> sun_data ) ; if ( sun_info. length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> sun_pixels ) ; if ( sun_info. length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> sun_data ) ; if ( sun_info. length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile""",0
181,"<S2SV_ModStart> ) ) ; memset ( magick, 0, sizeof ( magick ) ) ; <S2SV_ModStart> ReadBlob ( image, count, ( unsigned char * ) magick ) ; if ( ( count < 2 ) || ( memcmp ( magick, ""\\122\\314"", 2 )!= 0 ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; <S2SV_ModStart> { image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image ->",0
182,"<S2SV_ModStart> DQUOT_LIMITS_ENABLED ) ; if ( sbi -> s_flags & MS_RDONLY ) { struct ext2_super_block * es = sbi -> s_es ; spin_lock ( & sbi -> s_lock ) ; es -> s_state = cpu_to_le16 ( sbi -> s_mount_state ) ; spin_unlock ( & sbi -> s_lock ) ; ext2_sync_super ( sb, es, 1 ) ; } db_count = sbi -> s_gdb_count ; for ( i = 0 ; i < db_count ; i ++ ) if ( sbi -> s_group_desc [ i ] ) brelse ( sbi -> s_group_desc [ i ] ) brelse ( sbi -> s_group_desc [ i ] ) ; for ( i = 0 ; i < db_count ; i ++ ) if ( sbi -> s_group_desc [ i ] ) brelse ( sbi -> s_group_desc [ i ] ) brelse ( sbi -> s_group_desc [ i ] ) brelse ( sbi -> s_group",0
183,"<S2SV_ModStart> } endpoint = usb_altnum_to_desc ( usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""gtco <S2SV_blank> # <S2SV_blank> interfaces: <S2SV_blank> %d\\n"", usbinterface -> num_altsetting ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> num_altsetting ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> num_altsetting ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ;",0
184,"<S2SV_ModStart> buf ) ; if ( strlen ( buf ) > RUN_FIREJAIL_NETWORK_DIR_MAX ) { fprintf ( stderr, ""Error: <S2SV_blank> network <S2SV_blank> map <S2SV_blank> file <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", RUN_FIREJAIL_NETWORK_DIR_MAX ) ; fprintf ( stderr, ""Error: <S2SV_blank> network <S2SV_blank> map <S2SV_blank> file <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", RUN_FIREJAIL_NETWORK_DIR_MAX ) ; fprintf ( stderr, ""Error: <S2SV_blank> network <S2SV_blank> map <S2SV_blank> file <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", RUN_FIREJAIL_NETWORK_DIR_MAX, RUN_FIREJAIL_NETWORK_DIR_MAX ) ; fprintf ( stderr, ""Error: <S2SV_blank> network <S2SV_blank> map <S2SV_blank> file <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", RUN_FIREJAIL_NETWORK_DIR_MAX ) ; fprintf ( stderr, ""Error: <S2SV_blank> network <S2SV_blank> map <S2SV_blank> file <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum",0
185,<S2SV_ModStart> node ) { if ( node -> nd_item. ci_parent ) { return <S2SV_ModEnd> to_o2nm_cluster ( node <S2SV_ModStart> -> ci_parent ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
186,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_sequnlock",1
187,"<S2SV_ModStart> ; if ( avio_read_bit ( pb ) < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> bit <S2SV_blank> rate"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> pb ) ; if ( avio_read_bit ( pb ) < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> bit <S2SV_blank> rate"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> pb ) ; if ( avio_read_bit ( pb ) < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> bit <S2SV_blank> rate"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> pb ) ; if ( avio_read_bit ( pb ) < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> bit <S2SV_blank> rate"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> pb ) ; if ( avio_read_bit ( pb ) < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> bit <S2SV_blank> rate"" ) ; return AVERROR_INVALIDDATA ; }",0
188,"<S2SV_ModStart> ; if ( nelements > CDF_PROP_LIMIT ) { DPRINTF ( ( ""CDF_PROP_LIMIT <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)\\n"", nelements, CDF_PROP_LIMIT ) ) ; goto out ; } <S2SV_ModStart> ; if ( nelements > CDF_PROP_LIMIT ) { DPRINTF ( ( ""CDF_PROP_LIMIT <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)\\n"", nelements, CDF_PROP_LIMIT ) ) ; goto out ; } <S2SV_ModStart> 0 ) { DPRINTF ( ( ""CDF_PROP_LIMIT <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)\\n"", nelements, CDF_PROP_LIMIT ) ) ; goto out ; } <S2SV_ModStart> ; if ( nelements > CDF_PROP_LIMIT ) { DPRINTF ( ( ""CDF_PROP_LIMIT <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)\\n"", nelements, CDF_PROP_LIMIT ) ) ; goto out ; } <S2SV_ModStart> 0 ) { DPRINTF ( ( ""CDF_PROP_LIMIT <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%",0
189,"<S2SV_ModStart> protostats ) ; filegen_register ( statsdir, <S2SV_ModEnd> ""cryptostats"", & <S2SV_ModStart> cryptostats ) ; filegen_register ( statsdir, <S2SV_ModEnd> ""timingstats"", & <S2SV_ModStart> timingstats ) ; filegen_register ( statsdir, <S2SV_ModEnd> step_callback = & <S2SV_ModStart> ntpd_time_stepped ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
190,"<S2SV_ModStart> = NULL ; const <S2SV_ModStart> dir = ""/tmp"" ; if ( tmpname == NULL ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } <S2SV_ModEnd> if ( (",0
191,"<S2SV_ModStart> prev ) ; if (! list_empty ( & shadows -> mnt_mounts ) ) { <S2SV_ModStart>, parent, & shadows -> mnt_mounts [ mnt -> mnt_mounts - 1 ] -> mnt_ns -> mnt_mounts [ mnt -> mnt_mounts - 1 ] -> mnt_ns -> mnt_mounts [ mnt -> mnt_mounts - 1 ] -> mnt_ns -> mnt_mounts [ mnt -> mnt_mounts - 1 ] -> mnt_mounts [ mnt -> mnt_mounts - 1 ] -> mnt_mounts [ mnt -> mnt_mounts - 1 ] -> mnt_ns -> mnt_mounts [ mnt -> mnt_mounts - 1 ] -> mnt_ns -> mnt_mounts [ mnt -> mnt_mounts - 1 ] -> mnt_mounts [ mnt -> mnt_mounts - 1 ] -> mnt_mounts [ mnt -> mnt_mounts - 1 ] -> mnt_mounts [ mnt -> mnt_mounts - 1 ] ->",0
192,"<S2SV_ModStart> next ) ; if ( unlikely ( next -> es | prev -> es ) ) loadsegment ( es, next -> es ) ; if ( unlikely ( next -> ds | prev -> ds ) ) loadsegment ( ds, next -> ds ) ; if ( unlikely ( fsindex | next -> fsindex | prev -> fs ) ) { loadsegment ( fs, next -> fsindex ) ; if ( fsindex ) prev -> fs = 0 ; } if ( unlikely ( gsindex | next -> gsindex | prev -> gs ) ) { loadsegment ( gs, next -> gsindex ) ; if ( gsindex ) prev -> gs = 0 ; } if ( next -> fs ) wrmsrl ( MSR_FS_BASE, next -> fs ) ; prev -> fs = 0 ; if ( unlikely ( gsindex | next -> gsindex | prev -> gs ) ) { loadsegment ( gs, next -> gsindex ) ; if ( gsindex ) prev -> gs = 0 ; } if ( next -> gs ) wrmsrl ( MSR_KERNEL_GS_BASE, next -> gs ) ;",0
193,<S2SV_ModStart> dd ) ; <S2SV_ModEnd> } } <S2SV_null>,1
194,<S2SV_ModStart> = value ; if ( ps_sps -> i1_sps_valid ) { ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( ret!= ( IHEVCD_ERROR_T ) IHEVCD_SUCCESS ) { ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( ret!= ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ) { ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( ret!= ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ) { ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( ret!= ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ) { ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; },0
195,<S2SV_ModStart> << NM_VECTOR ) | ( 1u << BP_VECTOR ) ; if ( enable_ept ) eb |= ( 1u << PF_VECTOR ) ; if ( vcpu -> rmode. ept_active ) eb &= ~ ( 1u << UD_VECTOR ) ; if ( vcpu -> rmode. ept_active ) eb &= ~ ( 1u << MC_VECTOR ) ; if ( vcpu -> rmode. ept_active ) eb &= ~ ( 1u << DB_VECTOR ) ; if ( vcpu -> rmode. ept_active ) eb &= ~ ( 1u << UD_VECTOR ) ; if ( vcpu -> rmode. ept_active ) eb &= ~ ( 1u << MC_VECTOR ) ; if ( vcpu -> rmode. ept_active ) eb &= ~ ( 1u << UD_VECTOR ) ; if ( vcpu -> rmode. ept_active ) eb &= ~ ( 1u << MC_VECTOR ) ; if ( vcpu -> rmode. ept_active ) eb &= ~ ( 1u << UD_VECTOR ) ; if (,0
196,"<S2SV_ModStart> { static char <S2SV_ModEnd> temp [ NFSX_V3FHMAX <S2SV_ModStart> NFSX_V3FHMAX + 1 ] ; strncpy <S2SV_ModEnd> ( temp, <S2SV_ModStart> NFSX_V3FHMAX ) ; temp [ sizeof ( temp ) - 1 ] = '\\0' ; spacep = strchr ( temp,'<S2SV_blank>') ; if ( spacep ) * spacep = '\\0' ; if ( spacep ) * spacep = '\\0' ; ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", temp, fsid. Fsid_dev. Major, fsid. Fsid_dev. Minor ) ) ; } else { ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", fsid. Fsid_dev. Major, fsid. Fsid_dev. Minor ) ) ; }",0
197,"<S2SV_ModStart> int transhdrlen, unsigned <S2SV_ModStart> -> gso_type = SKB_GSO_UDP <S2SV_ModEnd> ; ipv6_select_ident ( <S2SV_ModStart> & fhdr ) ; if ( skb -> ip_summed == CHECKSUM_PARTIAL ) { skb_shinfo ( skb ) -> ip6_frag_id = fhdr. identification ; __skb_queue_tail ( & sk -> sk_write_queue, skb ) ; return 0 ; } err = skb_append_datato_frags ( sk, skb, getfrag, from, ( length - transhdrlen ) ) ; if (! err ) { struct frag_hdr fhdr ; skb_shinfo ( skb ) -> ip6_frag_id = fhdr. identification ; skb_shinfo ( skb ) -> ip6_frag_id = fhdr. identification ; skb_shinfo ( skb ) -> ip6_frag_id = fhdr. identification ; skb_shinfo ( skb ) -> ip6_frag_id = fhdr. identification ; skb_shinfo ( skb ) -> ip6_frag_id = fhdr.",0
198,"<S2SV_ModStart> res ) goto fail <S2SV_ModEnd> ; res = <S2SV_ModStart> return res ; res = register_netdevice ( hsr_dev ) ; if ( res ) goto fail <S2SV_ModEnd> ; res = <S2SV_ModStart> goto fail ; res = hsr_add_port ( hsr, slave [ 0 ], HSR_PT_SLAVE_A ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 1 ], HSR_PT_SLAVE_B ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 0 ], HSR_PT_SLAVE_B ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 1 ], HSR_PT_SLAVE_C ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 0 ], HSR_PT_SLAVE_C ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 1 ], HSR_PT_SLAVE_C ) ; if ( res )",0
199,"<S2SV_ModStart> + 1 ; if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> + 1 ; if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> + 1 ; if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } if ( n >= cmdsize - 1 ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; }",0
200,"<S2SV_ModStart> void vp9_setup_dst_planes ( <S2SV_ModEnd> MACROBLOCKD * xd <S2SV_ModStart> int i ; const int stride [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int buffers [ 5 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 5 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; int i ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
201,<S2SV_ModStart> ++ ) ; if ( args -> count!= args -> len ) return 0 ; hdr = ( void * ) p - head -> iov_base ; dlen = XDR_QUADLEN ( hdr ) * 4 ; if ( dlen < XDR_QUADLEN ( len ) * 4 ) return 0 ; if ( dlen < XDR_QUADLEN ( len ) * 4 ) return 0 ;,0
202,"<S2SV_ModStart> <S2SV_null> static inline int <S2SV_ModEnd> assign_eip_near ( struct <S2SV_ModStart> dst ) { int rc ; rc = assign_eip_near_nolock ( ctxt, dst ) ; if ( rc!= X86EMUL_CONTINUE ) { WARN_ON ( rc!= X86EMUL_CONTINUE ) ; return rc ; } <S2SV_ModStart> case 4 : rc = assign_eip_near_nolock ( ctxt, dst ) ; break ; case 8 : rc = assign_eip_near_nolock ( ctxt, dst ) ; break ; case 16 : rc = assign_eip_near_nolock ( ctxt, dst ) ; if ( rc!= X86EMUL_CONTINUE ) { WARN_ON ( rc!= X86EMUL_CONTINUE ) ; return rc ; }",0
203,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
204,"<S2SV_ModStart> ; remaining = <S2SV_ModEnd> tvb_captured_length_remaining ( tvb <S2SV_ModStart> offset ) ; if ( remaining <= 0 ) { if ( data ) * data = g_strdup ( """" ) ; return offset ; } text = tvb_get_string_enc ( NULL, tvb, offset, remaining, ENC_UTF_16 | ENC_LITTLE_ENDIAN ) ; len = ( int ) strlen ( text ) ; proto_tree_add_string ( tree, hf_name, tvb, offset, len * 2, text ) ; if ( data ) * data = text ; else g_free ( text ) ;",0
205,"<S2SV_ModStart> == READ ) { ssize_t ret ; <S2SV_ModStart> = ocfs2_dio_get_block ; ret = __blockdev_direct_IO ( iocb, inode, iter, get_block, ocfs2_dio_end_io, NULL, 0 ) ; } else { ret = <S2SV_ModEnd> __blockdev_direct_IO ( iocb",0
206,<S2SV_ModStart> return rc ; <S2SV_ModEnd> copied = skb,1
207,"<S2SV_ModStart> ; if ( ( sscanf ( f, ""%79s <S2SV_blank> %[^\\n]\\n"", def, strparm ) == 2 ) || ( sscanf ( f, ""%79s <S2SV_blank> %i"", parm ) == 0 ) || ( sscanf ( f, ""%i"", parm ) == 0 ) || ( sscanf ( f, ""%i"", parm ) == 0 ) || ( sscanf ( f, ""%i"", parm ) == 0 ) || ( sscanf ( f, ""%i"", parm ) == 0 ) || ( sscanf ( f, ""%i"", parm ) == 0 ) || ( sscanf ( f, ""%i"", parm ) == 0 ) || ( sscanf ( f, ""%i"", parm ) == 0 ) || ( sscanf ( f, ""%i"", parm ) == 0 ) || ( sscanf ( f, ""%i"", parm ) == 0 ) || ( sscanf ( f, ""%i"", parm ) == 0 ) || ( sscanf ( f, ""%i"", parm ) == 0 ) || ( sscanf ( f, ""%i"", parm",0
208,<S2SV_ModStart> + 1 ) ; perf_event_update_userpage ( event <S2SV_ModEnd> ) ; write_mmcr0,0
209,<S2SV_ModStart> = len ; if ( tested > len ) { * nl = 1 ; return ( 0 ) ; },0
210,"<S2SV_ModStart> n ) { <S2SV_ModEnd> int all_whitespace = <S2SV_ModStart> * data ; PyCompilerFlags <S2SV_ModEnd> cf ; mod_ty <S2SV_ModStart> * str ; PyObject <S2SV_ModEnd> * o, <S2SV_ModStart> * fstring_name ; Py_ssize_t len ; Py_ssize_t i ; assert ( * ( expr_start - 1 ) == '{' ) ; assert ( * ( expr_start - 1 ) == '}' || * ( expr_start - 1 ) == '!' || * expr_start == ':' ) ; o = PyUnicode_DecodeUTF8 ( expr_start, expr_end - expr_start, NULL ) ; if ( o == NULL ) return NULL ; len = expr_end - expr_start ; kind = PyUnicode_KIND ( o ) ; data = PyUnicode_DATA ( o ) ; for ( i = 0 ; i < len ; i ++ ) { if (! PyUnicode_ISSPACE ( PyUnicode_READ ( kind, data, i ) ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ; } } if ( all_whitespace ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty",0
211,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
212,<S2SV_ModStart> string ) { <S2SV_ModEnd> while ( c,0
213,"<S2SV_ModStart> == 0 ) set_bit <S2SV_ModEnd> ( KEY_FLAG_NEGATIVE,",0
214,"<S2SV_ModStart> len ) ; if (! <S2SV_ModStart> * len ) ) printf ( ""PLEN <S2SV_blank> %d <S2SV_blank> type <S2SV_blank> %d <S2SV_blank> len <S2SV_blank> %d\\n"", plen, nh. nh_type, * len ) ;",0
215,"<S2SV_ModStart> & XFS_ATTR_INCOMPLETE ) { xfs_attr_leaf_name_local_t * name_loc ; name_loc = xfs_attr3_leaf_name_local ( leaf, i ) ; retval = context -> put_listent ( context, entry -> flags, name_loc -> nameval, ( int ) name_loc -> namelen, ( int ) name_loc -> namelen ) ; } else { xfs_attr_leaf_name_local_t * name_loc = xfs_attr3_leaf_name_local ( leaf, i ) ; retval = context -> put_listent ( context, entry -> flags, name_loc -> nameval, ( int ) name_loc -> namelen, ( int ) name_loc -> namelen, ( int ) name_loc -> namelen, ( int ) name_loc -> namelen ) ; } else { xfs_attr_leaf_name_local_t * name_loc = xfs_attr3_leaf_name_local ( leaf, i ) ; retval = context -> put_listent ( context, entry -> flags, name_loc ->",0
216,"<S2SV_ModStart> - EINVAL ; int datagrams ; <S2SV_ModStart> NULL ) ; datagrams = __sys_recvmmsg ( fd, ( struct mmsghdr __user * ) mmsg, vlen, flags | MSG_CMSG_COMPAT, & ktspec ) ; if ( datagrams > 0 && get_compat_timespec ( & ktspec, timeout ) ) datagrams = - EFAULT ; else datagrams = __sys_recvmmsg ( fd, ( struct mmsghdr __user * ) mmsg, vlen, flags | MSG_CMSG_COMPAT, & ktspec ) ; if ( datagrams > 0 && put_compat_timespec ( & ktspec, timeout ) ) datagrams = - EFAULT ;",0
217,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, sun_info. width, sun_info. height ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
218,"<S2SV_ModStart> ) ; netdev_tx_t <S2SV_ModEnd> ret ; assert <S2SV_ModStart> q_num ) ; netif_stop_queue ( ndev ) ; <S2SV_ModStart> ret = hns_nic_net_xmit_hw ( ndev, skb, & tx_ring_data ( priv, skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; return NETDEV_TX_OK ; }",0
219,<S2SV_ModStart> |= MSG_TRUNC ; <S2SV_ModEnd> lock_sock ( sk,1
220,"<S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart> TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart> TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart> TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart> TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart> TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart> TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart> TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart> TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart> TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart> TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart> TEMPORARY_TTL, TEMPORARY_TTL",0
221,"<S2SV_ModStart> RAnalOp next_op ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, len - op -> size, cpu ) ;",0
222,<S2SV_ModStart> size ) ; if ( px -> ft ) { <S2SV_ModStart> -> ft -> data = px ; px -> ft -> accept = prpl_xfer_accept ; px -> ft -> canceled = prpl_xfer_canceled ; px -> ft -> free = prpl_xfer_free ; px -> ft -> write_request = prpl_xfer_write_request ; } else { px -> ft -> accept = prpl_xfer_accept ; px -> ft -> canceled = prpl_xfer_canceled ; px -> ft -> free = prpl_xfer_free ; px -> ft -> free = prpl_xfer_free ; px -> ft -> accept = prpl_xfer_accept ; px -> ft -> canceled = prpl_xfer_canceled ; px -> ft -> free = prpl_xfer_free ; px -> ft -> accept = prpl_xfer_accept ; px -> ft -> canceled = prpl_xfer_canceled ; px -> ft -> free = prpl_xfer_free ; },0
223,"<S2SV_ModStart> data ) { <S2SV_ModEnd> char * repo_config <S2SV_ModStart> ( ""config"" ) ; if (! access ( repo_config, R_OK ) ) { ret += perf_config_from_file ( fn, repo_config, data ) ; found += 1 ; } free ( repo_config ) ;",0
224,"<S2SV_ModStart> int validate_event ( struct perf_event * event ) { struct arm_pmu * armpmu = <S2SV_ModEnd> to_arm_pmu ( event <S2SV_ModStart> event -> pmu <S2SV_ModEnd> ) ; struct <S2SV_ModStart> return 1 ; <S2SV_ModEnd> return armpmu -> <S2SV_ModStart> return armpmu -> get_event_idx <S2SV_ModEnd> ( hw_events, <S2SV_ModStart> return armpmu -> get_event_idx <S2SV_ModEnd> ( hw_events, <S2SV_ModStart> return armpmu -> get_event_idx <S2SV_ModEnd> ( hw_events,",0
225,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline bool new_idmap_permitted ( struct user_namespace * user_ns, int cap_setid, struct uid_gid_map * new_map ) { if ( new_map -> nr_extents == 1 ) { u32 id = new_map -> extent [ 0 ]. lower_first ; if ( uid_eq ( uid, current_fsuid ( ) ) ) return true ; } else { u32 id = new_map -> extent [ 0 ]. lower_first ; if ( uid_eq ( current_fsuid ( ), user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_",0
226,"<S2SV_ModStart> j ++ ) { body [ j ] = XMALLOC ( VarLenData, 1 ) ; body [ j ] -> len = a -> values [ j ]. len ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. len ) ; body [ j ] -> data -> buf = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. data. buf ) ; body [ j ] -> data -> len = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. len ) ; body [ j ] -> data -> buf = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. data. buf ) ; body [ j ] -> data -> len = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. data -> len ) ; body [ j ] -> data -> buf = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. data. buf ) ; body [ j ] -> data -> buf = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. data. buf ) ; body [ j ] ->",0
227,"<S2SV_ModStart> ; u8 reset <S2SV_ModEnd> ; int ret <S2SV_ModStart> ; hx = kzalloc <S2SV_ModEnd> ( sizeof ( <S2SV_ModStart>, GFP_KERNEL ) ; if (! hx ) return - ENOMEM <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ) { if ( ret || usb_cypress_writemem ( udev, cypress [ type ]. cpu_cs_register, & reset, 1 )!= 1 ) err ( ""could <S2SV_blank> not <S2SV_blank> restart <S2SV_blank> the <S2SV_blank> USB <S2SV_blank> controller."" ) ; ret = - EIO ; kfree ( hx ) ; return ret ; } <S2SV_ModStart> 0 ) { if ( ret || usb_cypress_writemem ( udev, cypress [ type ]. cpu_cs_register, & reset, 1 )!= 1 ) err ( ""could <S2SV_blank> not <S2SV_blank> restart <S2SV_blank> the <S2SV_blank> USB <S2SV_blank> controller <S2SV_blank> CPU."" ) ; ret = - EIO ; kfree ( hx ) ; return ret ; } <S2SV_ModStart> 0 ) { if ( ret || usb_cypress_writemem ( udev, cypress [ type ]. cpu_cs_register, & reset, 1 )!= 1 ) err ( ""could <S2SV_blank> not <S2SV_blank> restart <S2SV_blank> the <S2SV_blank> USB <S2SV_blank>",0
228,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ;",0
229,"<S2SV_ModStart> ( handle -> params. user, c1 -> data, c1 -> length ) == 0 && strncmp ( handle -> params. pass, c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c1 -> data, c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin",0
230,"<S2SV_ModStart> * bo ; uint32_t bin_size = args -> bin_cl_size ; uint32_t shader_rec_size = args -> shader_rec_size ; uint32_t uniforms_size = args -> uniforms_size ; if ( args -> shader_rec_count >= UINT_MAX / sizeof ( struct vc4_shader_state ) ) { DRM_ERROR ( ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; goto fail ; } bin = temp + bin_offset ; exec -> shader_rec_u = temp + bin_offset ; exec -> uniforms_u = temp + shader_rec_offset ; exec -> shader_state = temp + exec_size ; exec -> shader_state_size = args -> shader_state_size ; if ( copy_from_user ( bin, ( void __user * ) ( uintptr_t ) args -> bin_cl, args -> bin_cl_size ) ) { ret = - EFAULT ; goto fail ; } if ( copy_from_user ( bin, ( void __user * ) ( uintptr_t ) args -> shader_rec, args -> shader_rec_size ) ) { ret = - EFAULT",0
231,<S2SV_ModStart> endif # if HAVE_LZMA_H <S2SV_ModEnd> && HAVE_LIBLZMA if,1
232,<S2SV_ModStart> -> vm_file ) ; inode_dio_wait ( inode ) ; <S2SV_ModStart> inode ) ; if ( ext4_should_dioread_nolock ( inode ) ) get_block = ext4_get_block_write ; else get_block = ext4_get_block ;,0
233,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
234,"<S2SV_ModStart> * arg ) { if ( strlen ( arg ) < 2 ) { r_return_val_if_fail ( arg, NULL ) ; } <S2SV_ModStart> case '\\n' : if ( strlen ( arg ) < 2 ) { r_return_val_if_fail ( arg, NULL ) ; } <S2SV_ModStart> case '\\t' : if ( strlen ( arg ) < 2 ) { r_return_val_if_fail ( arg, NULL ) ; } <S2SV_ModStart> case '\\t' : if ( strlen ( arg ) < 2 ) { r_return_val_if_fail ( arg, NULL ) ; } <S2SV_ModEnd> arg ++ ; <S2SV_ModStart> case '\\t' : if ( strlen ( arg ) < 2 ) { r_return_val_if_fail ( arg, NULL ) ; } <S2SV_ModStart> case '\\t' : if ( strlen ( arg ) < 2 ) { r_return_val_if_fail ( arg, NULL ) ; } <S2SV_ModStart> case '\\t' : if ( strlen ( arg ) < 2 ) { r_return_val_if_fail ( arg, NULL ) ; } <S2SV_ModEnd> arg ++ ;",0
235,"<S2SV_ModStart> ep2 ) ; if ( nmap > sizeof ( oakley_t_map ) ) { ND_PRINT ( ( ndo, ""%s"", NPSTR ( ISAKMP_NPTYPE_T ) ) ) ; ND_PRINT ( ( ndo, ""%s"", NPSTR ( ISAKMP_NPTYPE_T ) ) ) ; ND_PRINT ( ( ndo, ""%s"", NPSTR ( ISAKMP_NPTYPE_T ) ) ) ; } <S2SV_ModStart> ep2 ) ; if ( nmap > sizeof ( oakley_t_map ) ) { ND_PRINT ( ( ndo, ""%s"", NPSTR ( ISAKMP_NPTYPE_T ) ) ) ; ND_PRINT ( ( ndo, ""%s"", NPSTR ( ISAKMP_NPTYPE_T ) ) ) ; ND_PRINT ( ( ndo, ""%s"", NPSTR ( ISAKMP_NPTYPE_T ) ) ) ; }",0
236,"<S2SV_ModStart> ; static gboolean accept_ice_connection ( GIOChannel * source, GIOCondition condition, GsmIceConnectionData * data ) { IceListenObj listener ; IceAcceptStatus status ; status = IceAcceptConnection ( listener, & status ) ; if ( status!= IceAcceptSuccess ) { g_debug ( ""GsmXsmpServer: <S2SV_blank> IceAcceptConnection <S2SV_blank> returned <S2SV_blank> %d"", status ) ; return FALSE ; } <S2SV_ModStart> ice_conn ) ; if ( status!= IceAcceptSuccess ) { g_debug ( ""GsmXsmpServer: <S2SV_blank> IceAcceptConnection <S2SV_blank> returned <S2SV_blank> %d"", status ) ; return TRUE ; } client = gsm_xsmp_client_new ( ice_conn ) ; if ( status!= IceAcceptSuccess ) { g_debug ( ""GsmXsmpServer: <S2SV_blank> IceAcceptConnection <S2SV_blank> returned <S2SV_blank> %d"", status ) ; return FALSE ; } gsm_store_add ( server -> priv -> client_store, gsm_client_peek_id ( client ), G_OBJECT ( client ) ) ; g_object_unref ( client ) ; return",0
237,"<S2SV_ModStart> ; if ( unlikely (! pskb_expand_head ( skb, frag_hdr_sz, 0, GFP_ATOMIC ) ) ) goto out ;",0
238,"<S2SV_ModStart> void ) { test_checkout_fails <S2SV_ModEnd> ( ""refs/heads/git_tilde1"", <S2SV_ModStart> "".git/foobar"" ) ; test_checkout_fails <S2SV_ModEnd> ( ""refs/heads/git_tilde1"", <S2SV_ModStart> "".git/foobar"" ) ; test_checkout_fails <S2SV_ModEnd> ( ""refs/heads/git_tilde1"", <S2SV_ModStart> "".git/foobar"" ) ; test_checkout_fails <S2SV_ModEnd> ( ""refs/heads/git_tilde1"",",0
239,"<S2SV_ModStart> ; break ; case SO_REUSEADDR : v. val =!! sock_flag ( sk, SOCK_REUSEADDR ) ; break ; case SO_NODELAY : v. val =!! sock_flag ( sk, SOCK_NODELAY ) ; break ; case SO_KEEPALIVE : v. val =!! sock_flag ( sk, SOCK_KEEPALIVE ) ; break ; case SO_TRUNC : v. val =!! sock_flag ( sk, SOCK_TRUNC ) ; break ; case SO_TRUNC : v. val =!! sock_flag ( sk, SOCK_TRUNC ) ; break ; case SO_KEEPALIVE : v. val =!! sock_flag ( sk, SOCK_KEEPALIVE ) ; break ; case SO_TRUNC : v. val =!! sock_flag ( sk, SOCK_KEEPALIVE ) ; break ; case SO_REUSEADDR : v. val =!! sock_flag ( sk, SOCK_TRUNC ) ; break ; case SO_REUSEADDR : v. val =!! sock_flag ( sk, SOCK_TRUNC ) ;",0
240,<S2SV_ModStart> return err ; <S2SV_ModEnd> copied = skb <S2SV_ModStart> msg_namelen ) ; <S2SV_ModEnd> } skb_free_datagram (,0
241,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } while,1
242,"<S2SV_ModStart> int i ; const uint8_t * const buffers [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; const int stride [ i ] = { src -> y_stride, src -> uv_stride, src -> uv_stride, src -> alpha_stride } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ], buffers [ i ], strides [ i ], mi_row, mi_col, sf, pd -> subsampling_x, pd -> subsampling_y ) ; } }",0
243,"<S2SV_ModStart>, j ; <S2SV_ModEnd> unsigned int bufsize <S2SV_ModStart> cleanup ; X509_NAME_oneline_ex ( X509_get_subject_name ( cert ), buf, & bufsize, XN_FLAG_SEP_COMMA_PLUS ) ; md -> subject_dn = strdup ( buf ) ; if ( md -> subject_dn == NULL ) { ret = ENOMEM ; goto cleanup ; } X509_NAME_oneline_ex ( X509_get_issuer_name ( cert ), buf, & bufsize, XN_FLAG_SEP_COMMA_PLUS ) ; md -> issuer_dn = strdup ( buf ) ; if ( md -> issuer_dn == NULL ) { ret = ENOMEM ; goto cleanup ; } ret = crypto_retrieve_X509_sans ( context, plg_cryptoctx, req_cryptoctx, cert, & pkinit_sans, & upn_sans, NULL ) ; if ( ret ) goto cleanup ; j = 0 ; if ( pkinit_sans!= NULL ) { for ( i = 0 ; pkinit_sans [ i ]!= NULL ; i ++ ) j ++ ; } if ( upn",0
244,"<S2SV_ModStart> goto out_free ; memslot = id_to_memslot ( kvm -> memslots, mem -> slot ) ;",0
245,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } if (,0
246,<S2SV_ModStart> ; lock_sock ( sk <S2SV_ModEnd> ) ; for,0
247,"<S2SV_ModStart> ni ; register u_int <S2SV_ModEnd> i ; int <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ( j == 1 <S2SV_ModEnd> && rp -> <S2SV_ModStart> && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 <S2SV_ModEnd> && IN6_IS_ADDR_UNSPECIFIED ( <S2SV_ModStart> ) ) ; else ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %d[%u]:"", j, length ) ) ; else ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %d:"", j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) >= sizeof ( * ni ) ; i -= sizeof ( * ni ), ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo, ""\\n\\t"" ) ) ; rip6_entry_print ( ndo, ni, 0 ) ; } else { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo, ""\\n\\t"" ) ) ; rip6_entry_print ( ndo, ni, 0 ) ; } break",0
248,<S2SV_ModStart> ; if ( reqkey_defl == KEY_REQKEY_DEFL_THREAD_KEYRING || reqkey_defl == KEY_REQKEY_DEFL_PROCESS_KEYRING || reqkey_defl == KEY_REQKEY_DEFL_THREAD_KEYRING || reqkey_defl == KEY_REQKEY_DEFL_PROCESS_KEYRING || reqkey_defl == KEY_REQKEY_DEFL_THREAD_KEYRING || reqkey_defl == KEY_REQKEY_DEFL_PROCESS_KEYRING || reqkey_defl == KEY_REQKEY_DEFL_THREAD_KEYRING || reqkey_defl == KEY_REQKEY_DEFL_PROCESS_KEYRING || reqkey_defl == KEY_REQKEY_DEFL_PROCESS_KEYRING || reqkey_defl == KEY_REQKEY_DEFL_USER_KEYRING || reqkey_defl == KEY_REQKEY_DEFL_USER_SESSION_KEYRING || reqkey_defl == KEY_REQKEY_DEFL_REQUESTOR_KEYRING,0
249,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
250,"<S2SV_ModStart> argc ++ ; if ( copy_strings_kernel ( 1, & iname_addr, bprm ) < 0 ) goto _error ; <S2SV_ModStart> argc ++ ; if ( copy_strings_kernel ( 1, & iname_addr, bprm ) < 0 ) goto _error <S2SV_ModEnd> ; bprm -> <S2SV_ModStart> argc ++ ; if ( copy_strings_kernel ( 1, & iname_addr, bprm ) < 0 ) goto _error <S2SV_ModEnd> ; bprm -> <S2SV_ModStart> argc ++ ; if ( copy_strings_kernel ( 1, & iname_addr, bprm ) < 0 ) goto _error <S2SV_ModEnd> ; bprm -> <S2SV_ModStart> argc ++ ; if ( copy_strings_kernel ( 1, & iname_addr, bprm ) < 0 ) goto _error <S2SV_ModEnd> ; bprm -> <S2SV_ModStart> argc ++ ; if ( copy_strings_kernel ( 1, & iname_addr, bprm ) < 0 ) goto _error ;",0
251,<S2SV_ModStart> ; int iSrc ; res -> ContribRow [ u ]. Left = iLeft ; res -> ContribRow [ u ]. Right = iRight ; res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] = 0.0 ; dTotalWeight += ( res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] = scale_f_d * ( dCenter - ( double ) iSrc ) ) ; } if ( dTotalWeight > 0.0 ) { _gdContributionsFree ( res ) ; return NULL ; } for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] = scale_f_d * ( dCenter - ( double ) iSrc ) ) ; } if ( dTotalWeight > 0.0 ) { for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] = scale_f_d * ( dCenter - ( double ) i,0
252,<S2SV_ModStart> user ) ; <S2SV_ModEnd> cleanup_srcu_struct ( &,0
253,"<S2SV_ModStart> Com_Printf ( ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" <S2SV_ModEnd> ) ; return",0
254,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> sl = strlen,1
255,"<S2SV_ModStart> & tee_mm_sec_ddr ) ; if ( IS_ERR ( mobj ) ) { mobj = ERR_PTR ( - ENOMEM ) ; return mobj ; } <S2SV_ModEnd> memset ( mobj_get_va <S2SV_ModStart> 0, size ) ; if ( IS_ERR ( mobj ) ) { mobj = ERR_PTR ( - ENOMEM ) ; mobj = ERR_PTR ( - ENOMEM ) ; } if ( IS_ERR ( mobj ) ) { mobj = ERR_PTR ( - ENOMEM ) ; } if ( IS_ERR ( mobj ) ) { mobj = ERR_PTR ( - ENOMEM ) ; mobj = ERR_PTR ( - ENOMEM ) ; if ( IS_ERR ( mobj ) ) { mobj = ERR_PTR ( - ENOMEM ) ; mobj = ERR_PTR ( - ENOMEM ) ; } if ( IS_ERR ( mobj ) ) { mobj = ERR_PTR ( - ENOMEM ) ; } if ( IS_ERR ( mobj ) ) { mobj = ERR_PTR ( - ENOMEM ) ; mobj = ERR_PTR ( -",0
256,<S2SV_ModStart> -> it_overrun += incr <S2SV_ModEnd> ; delta -=,0
257,"<S2SV_ModStart> * for_ch ; if ( TYPE ( CHILD ( n, 0 ) ) == TYPE_COMMENT ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } <S2SV_ModStart> 0 ) ) == TYPE_COMMENT ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6"" ) ; return NULL ; } for_ch = CHILD ( n, 1 + is_async ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; expression = ast_for_expr ( c, CHILD ( n, 3 + is_async ) ) ; if (! expression ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if ( NCH ( for_ch ) == 1 ) comp = comprehension ( first, expression, NULL, is_async, c -> c_arena ) ; else comp = comprehension ( Tuple ( t, Store,",0
258,"<S2SV_ModStart> NULL ; } for ( i = src -> curframe + 1 ; i <= dst_state -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst",0
259,"<S2SV_ModStart> void write_mb_modes_kf ( const VP9_COMP * cpi <S2SV_ModEnd>, MODE_INFO * <S2SV_ModStart> * mi_8x8, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> ] ; const MODE_INFO * const above_mi = mi_8x8 [ - xd -> mi_stride ] ; const MODE_INFO * const left_mi = mi_8x8 [ - 1 ] ; const MODE_INFO * const mbmi = & mi -> mbmi ; const BLOCK_SIZE bsize = mbmi -> sb_type ; if ( seg -> update_map ) write_segment_id ( w, seg, mbmi -> segment_id ) ; write_skip ( cpi, mbmi -> segment_id, mi, w ) ; if ( bsize >= BLOCK_8X8 && cm -> tx_mode == TX_MODE_SELECT ) { write_selected_tx_size ( cpi, mbmi -> tx_size, bsize, w ) ; } else { const int num_4x4_w = num_4x4_blocks_wide_lookup [ bsize ] ; const int num_4x4_h = num_4x",0
260,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; saddr,1
261,"<S2SV_ModStart> } } } DPRINTF <S2SV_ModEnd> ( ""Data <S2SV_blank> ready <S2SV_blank> tag=0x%x <S2SV_blank> len=%zd\\n"", <S2SV_ModStart> r -> req, r -> iov. iov_base, r -> iov. iov_len ) ;",0
262,<S2SV_ModStart> cs > CQSPI_MAX_CHIPSELECT || cs < 0,0
263,"<S2SV_ModStart> maxn ) { int ret ; <S2SV_ModStart> SWF_error ( ""Action <S2SV_blank> overflow!!"" ) ; ret = <S2SV_ModStart>. SWF_ACTIONRECORD. ActionCode ) ; if ( ret!= SWFACTION_END ) { SWF_error ( ""Bad <S2SV_blank> action <S2SV_blank> code: <S2SV_blank> %d\\n"", ret ) ; return ret ; } <S2SV_ModStart>. SWF_ACTIONRECORD. ActionCode ) ; if ( ret!= SWFACTION_END ) { SWF_error ( ""Bad <S2SV_blank> action <S2SV_blank> code: <S2SV_blank> %d\\n"", ret ) ; return ret ; } <S2SV_ModStart>. SWF_ACTIONRECORD. ActionCode ) ; if ( ret!= SWFACTION_GOTOFRAME ) { SWF_error ( ""Bad <S2SV_blank> action <S2SV_blank> code: <S2SV_blank> %d\\n"", ret ) ; return ret ; } <S2SV_ModStart>. SWF_ACTIONRECORD. ActionCode ) ; if ( ret!= SWFACTION_END ) { SWF_error ( ""Bad <S2SV_blank> action <S2SV_blank> code: <S2SV_blank> %d\\n"", ret ) ; return ret ; } <S2SV_ModStart>. SWF_ACTIONRECORD. ActionCode ) ; if ( ret!= SWFACTION_END ) { SWF_error ( ""Bad",0
264,<S2SV_ModStart> -> stobj -> stobj <S2SV_ModEnd> -> stobj -> <S2SV_ModStart> -> stobj -> stobj <S2SV_ModEnd> -> stobj -> <S2SV_ModStart> -> stobj -> stobj <S2SV_ModEnd> -> stobj -> <S2SV_ModStart> -> stobj -> stobj <S2SV_ModEnd> -> stobj -> <S2SV_ModStart> -> stobj -> stobj <S2SV_ModEnd> -> stobj -> <S2SV_ModStart> -> stobj -> stobj <S2SV_ModEnd> -> stobj -> <S2SV_ModStart> -> stobj -> stobj <S2SV_ModEnd> -> stobj -> <S2SV_ModStart> -> stobj -> stobj <S2SV_ModEnd> -> stobj ->,0
265,<S2SV_ModStart> out ; } } if ( free < 0 ) { err = - ENOMEM ; goto out ;,1
266,"<S2SV_ModStart> ; if ( len < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> wb-prep: <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ( - 1 ) ; } <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> n = EXTRACT_32BITS <S2SV_ModStart> -> pp_n ) ; ps = ( const struct pgstate * ) ( ps + 1 ) ; while ( -- n >= 0 && ND_TTEST ( * ps ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %u/%s:%u"", ps -> slot, ps -> nid ) ) ; io = ( const struct id_off * ) ( ps + 1 ) ; } ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( const struct pgstate * ) io ; while ( -- n >= 0 && ND_TTEST ( * ps ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %c%s:%u"", c, ipaddr_string ( ndo, & ps -> page. p_sid ), ps -> page. p_uid ) ) ; io = ( const struct id_off * ) ( ps + 1 ) ; } ND_PRINT ( ( ndo,",0
267,<S2SV_ModStart> -> skip_clock_update = 1 <S2SV_ModEnd> ; prev ->,0
268,"<S2SV_ModStart> int ret ; dev_dbg ( & usb_dev -> dev, ""atusb: <S2SV_blank> reg <S2SV_blank> = <S2SV_blank> 0x%x\\n"", reg ) ; <S2SV_ModStart>, reg, NULL <S2SV_ModEnd>, 1, <S2SV_ModStart> 1000 ) ; dev_dbg ( & usb_dev -> dev, ""atusb: <S2SV_blank> reg <S2SV_blank> = <S2SV_blank> 0x%x\\n"", reg ) ; ret = <S2SV_ModEnd> atusb_control_msg ( atusb <S2SV_ModStart> ATUSB_REQ_FROM_DEV, 0, reg, & value, 1, 1000 ) ; dev_dbg ( & usb_dev -> dev, ""atusb: <S2SV_blank> reg <S2SV_blank> = <S2SV_blank> 0x%x\\n"", reg ) ; if ( ret < 0 ) { dev_err ( & usb_dev -> dev, ""atusb <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> "" ) ; return ret ; } ret = <S2SV_ModEnd> atusb_control_msg ( atusb <S2SV_ModStart> ATUSB_REG_READ, ATUSB_REQ_FROM_DEV, 0, reg, & value, 1, 1000 ) ; dev_dbg ( & usb_dev -> dev, ""atusb: <S2SV_blank> reg <S2SV_blank> = <S2SV_blank> 0x%x\\n"", reg )",0
269,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static sqlite3_int64 <S2SV_ModEnd> addModuleArgument ( sqlite3 <S2SV_ModStart> zArg ) { sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof <S2SV_ModStart> * ) * ( sqlite3_int64 ) * ( 2 + pTable -> nModuleArg ) ; char * * azModuleArg = sqlite3DbRealloc ( db, pTable -> azModuleArg, nBytes ) ; if ( azModuleArg == 0 ) { sqlite3DbFree ( db, zArg ) ; } else { int nBytes = sizeof ( char * ) * ( 2 + pTable -> nModuleArg ) ; char * * azModuleArg = sqlite3DbRealloc ( db, pTable -> azModuleArg, nBytes ) ; if ( azModuleArg == 0 ) { sqlite3DbFree ( db, zArg ) ; } else { int i = pTable -> nModuleArg ++ ; char * * azModuleArg = sqlite3DbRealloc ( db, pTable -> azModuleArg, nBytes ) ; if ( azModuleArg == 0 ) { sqlite3DbFree ( db, zArg ) ; } else { int i = pTable -> nModuleArg",0
270,<S2SV_ModStart> } } } outbuffer [ XMLRPC_BUFSIZE - 1 ] = '\\0' ;,0
271,"<S2SV_ModStart> ) ) { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATES, ""AdaptationStates <S2SV_blank> must <S2SV_blank> be <S2SV_blank> zero <S2SV_blank> for <S2SV_blank> device <S2SV_blank> links"" ) ; goto Error ; } <S2SV_ModStart> ) ) { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATES, ""AdaptationStates <S2SV_blank> must <S2SV_blank> be <S2SV_blank> zero <S2SV_blank> for <S2SV_blank> device <S2SV_blank> links"" ) ; goto Error ; } <S2SV_ModStart> ) ) { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATES, ""AdaptationStates <S2SV_blank> must <S2SV_blank> be <S2SV_blank> zero <S2SV_blank> for <S2SV_blank> device <S2SV_blank> links"" ) ; goto Error ; } <S2SV_ModStart> ) ) { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATES, ""AdaptationStates <S2SV_blank> must <S2SV_blank> be <S2SV_blank> zero <S2SV_blank> for <S2SV_blank> device <S2SV_blank> links"" ) ; goto Error ; } <S2SV_ModStart> ) ) { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATES, ""AdaptationStates <S2SV_blank> must <S2SV_blank>",0
272,"<S2SV_ModStart> { for ( u32 <S2SV_ModEnd> addr32 = r_read_le32 <S2SV_ModStart> addr32 ) { RBinAddr * ba = newEntry ( sec -> paddr + i, ( ut64 ) addr32, type, bits ) ; r_list_append ( ret, ba ) ; } } else { ut64 addr64 = r_read_le64 ( buf + i ) ; if ( addr64 ) { RBinAddr * ba = newEntry ( sec -> paddr + i, addr64, type, bits ) ; r_list_append ( ret, ba ) ; } } } else { RBinAddr * ba = newEntry ( sec -> paddr + i, 0, type, bits ) ; r_list_append ( ret, ba ) ; } <S2SV_ModEnd> } } <S2SV_null>",0
273,"<S2SV_ModStart> case ISIS_SUBTLV_EXT_IS_REACH_IPV6_INTF_ADDR : case ISIS_SUBTLV_EXT_IS_REACH_IPV6_NEIGHBOR_ADDR : if ( subl >= sizeof ( struct in_addr ) ) { ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; if ( subl == 8 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ; } break ; case ISIS_SUBTLV_EXT_IS_REACH_IPV6_INTF_ADDR : if ( subl >= sizeof ( struct in6_addr ) ) { ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ; if ( subl == 8 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ; } break ; case ISIS_SUBTLV_EXT_IS_",0
274,<S2SV_ModStart> 1 ) { if ( ptr_hbe_txposer -> qmf_in_buf [ idx + TWICE_QMF_SYNTH_CHANNELS_NUM ] [ 4 * ptr_hbe_txposer -> k_start ]!= x [ i ] ) { ptr_hbe_txposer -> qmf_in_buf [ idx + TWICE_QMF_SYNTH_CHANNELS_NUM - 1 ] [ 4 * ptr_hbe_txposer -> k_start ] = x [ i ] ; } else if ( ptr_hbe_txposer -> qmf_in_buf [ idx + TWICE_QMF_SYNTH_CHANNELS_NUM ] [ 4 * ptr_hbe_txposer -> k_start ]!= x [ i ] ) { ptr_hbe_txposer -> qmf_in_buf [ idx + TWICE_QMF_SYNTH_CHANNELS_NUM - 1 ] [ 4 * ptr_hbe_txposer -> k_start ] = x [ i ] ; } else if ( ptr_hbe_txposer -> qmf_in_buf [ idx + TWICE_QMF,0
275,<S2SV_ModStart> -> dmin ; if (! ONIGENC_IS_MULTIBYTE ( reg -> enc ) ||! ONIGENC_IS_MULTIBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_MULTIBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ||! ONIGENC_IS_,0
276,"<S2SV_ModStart> bfq_idle_slice_timer_body ( struct bfq_data <S2SV_ModEnd> * bfqd, <S2SV_ModStart> bfqd = bfqq <S2SV_ModEnd> -> bfqd ; <S2SV_ModStart> flags ) ; if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfqq -> queued [ 0 ] == 0 && bfqq -> queued [ 1 ] == 0 ) reason = BFQQE_TOO_IDLE ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUD",0
277,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
278,"<S2SV_ModStart> ; RING_FINAL_CHECK_FOR_REQUESTS ( & vif -> tx <S2SV_ModEnd>, work_to_do ) <S2SV_ModStart> ; if ( unlikely ( txreq. size > vif -> tx. size ) ) { netbk_tx_err ( vif, ""txreq.size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", txreq. size ) ; continue ; } vif -> tx. req_cons = ++ idx ; memcpy ( & txreq, RING_GET_REQUEST ( & vif -> tx, idx ), sizeof ( txreq ) ) ; if ( txreq. size > vif -> tx. size ) { netbk_tx_err ( vif, ""txreq.size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)\\n"", txreq. size ) ; continue ; } vif -> tx. req_cons = ++ idx ; memcpy ( & txreq, RING_GET_REQUEST ( & vif -> tx, idx ), sizeof ( txreq ) ) ; if ( txreq. size > vif -> tx. size ) { netbk_tx_err",0
279,<S2SV_ModStart> cb ) { struct xfrm_policy_walk_args * args = ( struct xfrm_policy_walk_args * ) <S2SV_ModEnd> cb -> args,0
280,<S2SV_ModStart> conn ) ; if ( h2o_timeout_is_linked ( & conn -> _read. timeout_entry ) ) { h2o_timeout_unlink ( & conn -> _read. timeout_entry ) ; do_emit_writereq ( conn ) ; },0
281,"<S2SV_ModStart> -> data ) ; int nr_frags = shinfo -> nr_frags ; struct xenvif_tx_request * txp ; <S2SV_ModStart> status ; if ( unlikely ( nr_frags == 0 ) ) { int j, newerr ; pending_ring_idx_t index ; index = pending_index ( netbk -> pending_prod ++ ) ; txp = & netbk -> pending_ring [ index ] ; make_tx_response ( vif, txp, XEN_NETIF_RSP_ERROR ) ; netbk -> pending_ring [ index ] = pending_idx ; xenvif_put ( vif ) ; } start = ( frag_get_pending_idx ( & shinfo -> frags [ i ] ) == pending_idx ) ; newerr = ( ++ gop ) -> status ; if ( unlikely ( newerr ) ) { if ( unlikely ( err ) ) xen_netbk_idx_release ( netbk, pending_idx ) ; continue ; } txp = & netbk -> pending_tx_info [ pending_idx ]. req ; make_tx_response ( vif, txp, XEN_NETIF_RSP_ERROR ) ;",0
282,,1
283,"<S2SV_ModStart> ) break ; status = SetImageExtent ( resize_image, image -> columns, resize_image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( resize_image ) ) ; }",0
284,"<S2SV_ModStart> struct hv_kvp_ipaddr_value * kvp_ip_val = kmalloc ( sizeof ( struct hv_kvp_ipaddr_value ), GFP_KERNEL ) ; if (! kfree ( kfree ( kfree ( kfree ( kfree ( kfree ( kfree ( kfree ( kfree ( k ) ) ) ), GFP_KERNEL ) ) ) ) { close ( fd ) ; exit ( EXIT_FAILURE ) ; } kfree ( kfree ( kfree ( kfree ( kfree ( kfree ( kfree ( kfree ( kfree ( kfree ( kfree ( kfree ( kfree ( kfree ( kfree ( kfree ( kfree ( kfree ( kfree ( kfree ( kfree ( kfree ( kfree ( kfree ( k ) ) ) ) ) ) ) ) ) ; kfree ( kfree ) ) ; kfree ( kfree ( kfree ( kfree ( kfree ( kfree ( kfree ( kfree ( kfree ( kfree ( kfree ( kfree ( kfree ( kfree ( kfree ( kfree ( kfree ( kfree ( kfree (",0
285,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
286,"<S2SV_ModStart> TRUE ) ; if ( client -> ipc == NULL ) { crm_warn ( ""Skipping <S2SV_blank> client <S2SV_blank> with <S2SV_blank> NULL <S2SV_blank> channel"" ) ; return FALSE ; } type = crm_element_value ( update_msg, F_SUBTYPE ) ; CRM_LOG_ASSERT ( type!= NULL ) ; if ( client -> diffs && safe_str_eq ( type, T_CIB_DIFF_NOTIFY ) ) { do_send = TRUE ; } else if ( client -> replace && safe_str_eq ( type, T_CIB_REPLACE_NOTIFY ) ) { do_send = TRUE ; } else if ( client -> confirmations && safe_str_eq ( type, T_CIB_UPDATE_CONFIRM ) ) { do_send = TRUE ; } else if ( client -> pre_notify && safe_str_eq ( type, T_CIB_PRE_NOTIFY ) ) { do_send = TRUE ; } else if ( client -> post_notify && safe_str_eq ( type, T_CIB_POST_NOTIFY ) ) { do_send = TRUE ; } else if ( client -> pre_notify && safe_",0
287,"<S2SV_ModStart> + x > diffBlock + diffBlockLength || extraPtr + y > extraBlock + extraBlockLength <S2SV_ModEnd> ) { PyMem_Free <S2SV_ModStart> NULL ; } if ( newpos + x > newDataLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } <S2SV_ModStart> + x ) ; if ( newpos + y > newDataLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } <S2SV_ModStart> + y ) ; if ( newpos + z > newDataLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } memcpy ( newData + newpos, extraPtr, z ) ; if ( newpos + z > newDataLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; }",0
288,<S2SV_ModStart> fname ) ; if ( fname [ lfi ] == '\\0' || fname [ lfi + 1 ] == '\\0' || fname [ lfi + 1 ] == '\\0' || fname [ lfi + 1 ] == '\\0' || fname [ lfi + 1 ] == '\\0' || fname [ lfi + 1 ] == '\\0' || fname [ lfi + 2 ] == '\\0' || fname [ lfi + 1 ] == '\\0' || fname [ 0 ] == '\\0' || fname [ 0 ] == '\\0' || fname [ lfi + 1 ] == '\\0' || fname [ lfi + 1 ] == '\\0' || fname [ lfi + 1 ] == '\\0' || fname [ lfi + 1 ] == '\\0' || fname [ lfi + 1 ] == '\\0' || fname [ lfi + 2 ] == '\\0' || fname [ lfi + 1 ] == '\\0' || fname [ lfi + 2 ] == '\\0' || fname [ lfi + 1 ] == '\\0' || fname [ lfi + 1 ] == '\\0' || fname [ lfi + 1 ] == '\\0' || fname [ lfi,0
289,"<S2SV_ModStart> ; if ( copylen < sizeof ( d [ 0 ]. mcast_ifn ) ) { pr_err ( ""get_ctl: <S2SV_blank> len <S2SV_blank> < <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> %u\\n"", copylen, sizeof ( d [ 0 ]. mcast_ifn ) ) ; return - EINVAL ; } if ( copylen < sizeof ( d [ 1 ]. mcast_ifn ) ) { pr_err ( ""get_ctl: <S2SV_blank> len <S2SV_blank> < <S2SV_blank> %u\\n"", copylen, sizeof ( d [ 1 ]. mcast_ifn ) ) ; return - EINVAL ; } if ( copylen < sizeof ( d [ 1 ]. mcast_ifn ) ) { pr_err ( ""get_ctl: <S2SV_blank> len <S2SV_blank> < <S2SV_blank> %u\\n"", copylen ) ; return - EINVAL ; } if ( copylen < sizeof ( d [ 1 ]. mcast_ifn ) ) { pr_err ( ""get_ctl: <S2SV_blank> len <S2SV_blank> < <S2SV_blank> %u\\n"", sizeof ( d [ 1 ]. mcast_ifn ) ) ; return - EINVAL ; }",0
290,"<S2SV_ModStart> pktopts ) ; rcu_read_lock ( ) ; <S2SV_ModStart>, fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
291,<S2SV_ModStart> hdr ; ssize_t result ; if (! capable ( CAP_SYS_RAWIO ) ) return - EPERM,0
292,"<S2SV_ModStart> * fpath = NULL <S2SV_ModEnd>, * cgdir <S2SV_ModStart>! fc_may_access ( fc <S2SV_ModEnd>, controller, <S2SV_ModStart> O_RDWR ) ) { if ( caller_is_descendant ( fc -> pid, controller, path1, NULL ) ) { ret = - EACCES ; goto out ; } ret = cgfs_create ( controller, cgroup, fc -> uid, fc -> gid ) ; printf ( ""cgfs_create <S2SV_blank> returned <S2SV_blank> %d <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> %s\\n"", ret, controller, cgroup ) ; goto out ; } ret = cgfs_create ( controller, cgroup, fc -> uid, fc -> gid ) ; printf ( ""cgfs_create <S2SV_blank> returned <S2SV_blank> %d <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> %s\\n"", ret, controller, cgroup ) ; out : free ( fpath ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>",0
293,"<S2SV_ModStart> queue ) ) { pr_err ( ""%s: <S2SV_blank> Could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> PCD <S2SV_blank> disk: <S2SV_blank> %s\\n"", __func__, PTR_ERR ( disk -> queue ) ) ; pr_err ( ""%s: <S2SV_blank> Could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> PCD <S2SV_blank> disk: <S2SV_blank> %s\\n"", __func__, PTR_ERR ( disk -> queue ) ) ; disk -> queue = NULL ; continue ; } <S2SV_ModStart> ) ) { pr_err ( ""%s: <S2SV_blank> Could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> PCD <S2SV_blank> disk: <S2SV_blank> Could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> PCD <S2SV_blank> disk: <S2SV_blank> %s\\n"", __func__, PTR_ERR ( disk -> queue ) ) ; pr_err ( ""%s: <S2SV_blank> Could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> PCD <S2SV_blank> disk: <S2SV_blank> %s\\n"", __func__, PTR_ERR ( disk -> queue ) ) ; continue ; }",0
294,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
295,"<S2SV_ModStart> ; if ( number_pixels > MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( <S2SV_ModStart> ) ), MagickMax ( MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, MagickMax ( number_pixels, Magick",0
296,"<S2SV_ModStart> ) pktnum ; if ( avio_feof ( s -> pb ) ) { av_log ( s, AV_LOG_ERROR, ""Bad <S2SV_blank> packet <S2SV_blank> number: <S2SV_blank> %d\\n"", pktnum ) ; goto end ; } <S2SV_ModStart> ) pktnum ; if ( avio_feof ( s -> pb ) ) { av_log ( s, AV_LOG_ERROR, ""Bad <S2SV_blank> packet <S2SV_blank> number: <S2SV_blank> %d\\n"", pktnum ) ; goto end ; } <S2SV_ModStart> ) pktnum ; if ( avio_feof ( s -> pb ) ) { av_log ( s, AV_LOG_ERROR, ""Bad <S2SV_blank> packet <S2SV_blank> number: <S2SV_blank> %d\\n"", pktnum ) ; goto end ; } <S2SV_ModStart> ) pktnum ; if ( avio_feof ( s -> pb ) ) { av_log ( s, AV_LOG_ERROR, ""Bad <S2SV_blank> packet <S2SV_blank> number: <S2SV_blank> %d\\n"", pktnum ) ; goto end ; }",0
297,<S2SV_ModStart> 0 ) { if ( unlikely ( srp -> data_len > SZ_SG_MAX_DATA_LEN ) ) return - EINVAL ; <S2SV_ModStart> 0 ) { if ( unlikely ( srp -> data_len > SZ_SG_MAX_DATA_LEN - sizeof ( Sg_request_hdr ) - sizeof ( Sg_request_hdr ) - sizeof ( Sg_request_hdr ) - sizeof ( Sg_request_hdr ) ) ) return - EINVAL ; <S2SV_ModStart> 0 ) { if ( srp -> data_len > SZ_SG_MAX_DATA_LEN ) return - EINVAL ; <S2SV_ModStart> 0 ) { if ( srp -> data_len > SZ_SG_MAX_DATA_LEN - sizeof ( Sg_request_hdr ) - sizeof ( Sg_request_hdr ) - sizeof ( Sg_request_hdr ) - sizeof ( Sg_request_hdr ) - sizeof ( Sg_request_hdr ) ) ) return - EINVAL ; <S2SV_ModStart> 0 ) { if ( srp -> data_len > SZ_SG_MAX_DATA_LEN ) return - EINVAL ; },0
298,"<S2SV_ModStart> ; # endif # if HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_groups"", & security_groups_handler ) ; # endif # if HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_groups"", & security_groups_handler ) ; # endif # ifdef HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_groups"", & security_groups_handler ) ; # endif # if HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_groups"", & security_groups_handler ) ; # endif # if HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_groups"", & security_groups_handler ) ; # endif # ifdef HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_groups"", & security_groups_handler ) ; # endif # ifdef _WITH_VRRP_ install_keyword ( ""security_groups"", & security_groups_handler ) ; # endif # ifdef _WITH_LVS",0
299,<S2SV_ModStart> data ) { vpx_codec_priv_enc_mr_cfg_t * priv_enc_mr_cfg = ( vpx_codec_priv_enc_mr_cfg_t * ) data ; if ( priv_enc_mr_cfg && priv_enc_mr_cfg -> flags & VPX_ENCODER_FLAG_HIGHBITDEPTH ) { priv_enc_mr_cfg -> flags |= VPX_ENCODER_FLAG_HIGHBITDEPTH ; } else { priv_enc_enc_mr_cfg_t * priv_enc_mr_cfg = ( vpx_codec_priv_enc_mr_cfg_t * ) priv_enc_mr_cfg ; } if ( priv_enc_mr_cfg -> flags & VPX_ENCODER_FLAG_HIGHBITDEPTH ) { priv_enc_mr_cfg -> flags |= VPX_ENCODER_FLAG_HIGHBITDEPTH ; } if ( priv_enc_mr_cfg -> flags & VPX_ENCODER_FLAG_HIGHBITDEPTH ) { priv_enc_mr_cfg -> flags |= VPX_ENCODER_FLAG_HIGH,0
300,"<S2SV_ModStart> 0 ) { if ( tmpbuf [ strlen ( key ) ] == '\\0' ) { kfree ( tmpbuf ) ; return - 1 ; } * tmpptr = '=' ; kfree ( tmpbuf ) ; return 1 ; } <S2SV_ModEnd> param = iscsi_check_key <S2SV_ModStart>, sender, param_list ) ; if (! param ) { kfree ( tmpbuf ) ; return - 1 ; } start += strlen ( key ) + strlen ( value ) + 2 ; continue ; } if ( IS_PSTATE_PROPOSER ( param ) ) { if ( iscsi_check_proposer_state ( param, value ) < 0 ) { kfree ( tmpbuf ) ; return - 1 ; }",0
301,"<S2SV_ModStart> == ENOENT ) { struct stat st ; if ( stat ( t -> stamp_path, & st ) >= 0 ) t -> last_trigger. realtime = timespec_load ( & st. st_atim ) ; else if ( errno == <S2SV_ModStart> == ENOENT ) { struct stat st ; if ( stat ( t -> stamp_path, & st ) >= 0 ) t -> last_trigger. realtime = timespec_load ( & st. st_atim ) ; else t -> last_trigger. realtime = timespec_load ( & st. st_atim ) ; } if ( stat ( t -> stamp_path, & st ) >= 0 ) t -> last_trigger. realtime = timespec_load ( & st. st_atim ) ; if ( stat ( t -> stamp_path, & st ) >= 0 ) t -> last_trigger. realtime = timespec_load ( & st. st_atim ) ; else if ( errno == ENOENT ) touch_file ( t -> stamp_path, true, USEC_INFINITY, UID_INVALID, GID_INVALID, 0 ) ; }",0
302,"<S2SV_ModStart> ; JAS_DBGLOG ( 10, ( <S2SV_ModEnd> ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"", boxinfo <S2SV_ModStart> ) ) ; JAS_DBGLOG ( 10, ( <S2SV_ModEnd> ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ( 10, ( <S2SV_ModEnd> ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ) ) ; JAS_DBGLOG ( 10, ( <S2SV_ModEnd> ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"", <S2SV_ModStart> ( 10, ( <S2SV_ModEnd> ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n""",0
303,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
304,"<S2SV_ModStart> ; int copylen <S2SV_ModEnd> ; bool zerocopy <S2SV_ModStart> ; if ( unlikely ( q -> flags & IFF_VNET_HDR ) ) { vnet_hdr_len = q -> vnet_hdr_sz ; err = - EINVAL ; goto err ; } <S2SV_ModEnd> if ( zerocopy <S2SV_ModStart> ( zerocopy ) { skb = macvtap_alloc_skb ( & q -> sk, NET_IP_ALIGN, copylen, vnet_hdr. hdr_len, noblock, & err ) ; goto err ; } <S2SV_ModEnd> copylen = GOODCOPY_LEN <S2SV_ModStart> ( zerocopy ) { skb = macvtap_alloc_skb ( & q -> sk, NET_IP_ALIGN, copylen, vnet_hdr. hdr_len, noblock, & err ) ; if (! skb ) goto err ; copylen = GOODCOPY_LEN ; } else copylen = len ; skb = macvtap_alloc_skb ( & q -> sk, NET_IP_ALIGN, copylen, vnet_hdr. hdr_len, noblock, & err ) ; if (! skb ) goto err",0
305,<S2SV_ModStart> nexthdr ) { const struct ipv6_ext_hdr * exthdr = ( struct ipv6_ext_hdr * ) ( skb_network_header ( skb ) + 1 ) <S2SV_ModEnd> ; struct ipv6_opt_hdr <S2SV_ModStart> + 1 <= packet_len ) { struct ipv6_ext_hdr * nexthdr = ( struct ipv6_ext_hdr * ) ( skb_network_header ( skb ) + offset ) ; struct ipv6_opt_hdr * next2 = ( struct ipv6_ext_hdr * ) ( skb_network_header ( skb ) + offset ) ; * nexthdr = & next2 <S2SV_ModEnd> -> nexthdr ; <S2SV_ModStart> ; } offset += ipv6_optlen ( exthdr ) ; * nexthdr = & next2 <S2SV_ModEnd> -> nexthdr ;,0
306,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
307,"<S2SV_ModStart> mbmi. mv. as_int ; mv_bias ( ref_frame_sign_bias [ above -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ left -> mbmi. ref_frame ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ left -> mbmi. ref_frame ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ left -> mbmi. ref_frame ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ left -> mbmi. ref_frame ], ref_frame_sign_bias ) ;",0
308,<S2SV_ModStart> = 0 ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ;,0
309,"<S2SV_ModStart> } if ( dj_report -> devnum < DJ_DEVICE_INDEX_MIN || dj_report -> devnum > DJ_DEVICE_INDEX_MAX ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> devnum ) ; return ; } if ( dj_report -> device_index < DJ_DEVICE_INDEX_MIN ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index >= DJ_DEVICE_INDEX_MAX ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index >= DJ_DEVICE_INDEX_MAX ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n""",0
310,<S2SV_ModStart> ) ) { if ( e -> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
311,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
312,"<S2SV_ModStart> asconf ) { sctp_addip_chunk_t * addip = ( sctp_addip_chunk_t * ) asconf -> chunk_hdr <S2SV_ModEnd> ; __u32 serial <S2SV_ModStart> __u32 serial ; sctp_addip_chunk_t * addip = ( sctp_addip_chunk_t * ) addip <S2SV_ModEnd> ; chunk_len = <S2SV_ModStart> ( asconf, addip <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( asconf_ack, addip <S2SV_ModEnd>, err_code, <S2SV_ModStart> ( asconf_ack, addip <S2SV_ModEnd>, err_code, <S2SV_ModStart> ( asconf_ack, addip <S2SV_ModEnd>, err_code, <S2SV_ModStart> ( asconf_ack, addip <S2SV_ModEnd>, err_code, <S2SV_ModStart> ( asconf_ack, addip <S2SV_ModEnd>, err_code, <S2SV_ModStart> ( asconf_ack, addip <S2SV_ModEnd>, err_code, <S2SV_ModStart> ( asconf_ack, addip <S2SV_ModEnd>, err_code, <S2SV_ModStart> ( asconf_ack, addip <S2SV_ModEnd>, err_code, <S2SV_ModStart> ( asconf_ack, addip <S2SV_ModEnd>, err_code, <S2SV_ModStart> ( asconf_ack, addip <S2SV_ModEnd>, err_code, <S2SV_ModStart> ( asconf_ack, addip <S2SV_ModEnd>, err",0
313,"<S2SV_ModStart> 101, ( ""jas_realloc(%p, <S2SV_blank> %zu)\\n"" <S2SV_ModEnd>, ptr,",0
314,<S2SV_ModStart> exit ; } <S2SV_ModEnd> lock_sock ( sk,0
315,<S2SV_ModStart> case KVM_CAP_SW_TLB : r =! hv_enabled ; break ; # if defined ( CONFIG_KVM_E500V2 ) || defined ( CONFIG_KVM_E500MC ) case KVM_CAP_SW_TLB_64 : r =! hv_enabled ; break ; # if defined ( CONFIG_KVM_E500MC ) case KVM_CAP_SW_TLB_64 : r =! hv_enabled ; break ; # endif # if defined ( CONFIG_KVM_E500V2 ) || defined ( CONFIG_KVM_E500MC ) case KVM_CAP_SW_TLB_64 : case KVM_CAP_SW_TLB_64 : r =! hv_enabled ; break ; # if defined ( CONFIG_KVM_E500MC ) case KVM_CAP_SW_TLB_64 : r =! hv_enabled ; break ; # endif # if defined ( CONFIG_KVM_E500V2 ) || defined ( CONFIG_KVM_E500MC ) case KVM_CAP_SW_TLB_64 : r =! hv_,0
316,"<S2SV_ModStart> msicap ; pci_populate_msicap ( dev <S2SV_ModEnd>, msgnum,",0
317,"<S2SV_ModStart> goto response_done ; } memcpy ( kvp_data -> data. key, key_name, sizeof ( kvp_data -> data. key ) ) ; memcpy ( kvp_data -> data. key + keylen, sizeof ( kvp_data -> data. key ) ) ; memcpy ( kvp_data -> data. key + keylen, sizeof ( kvp_data -> data. key ) ) ; memcpy ( kvp_data -> data. value, value, valuelen ) ; memcpy ( kvp_data -> data. value, value, valuelen + 1 ) ; kvp_data -> data. value_size = 2 * ( valuelen + 1 ) ; icmsghdrp -> status = HV_S_OK ; <S2SV_ModEnd> response_done : icmsghdrp",0
318,<S2SV_ModStart> -> log_file ; mutex_lock ( & d -> mutex ) ; <S2SV_ModStart> -> log_ctx ; mutex_unlock ( & d -> mutex ) ;,0
319,<S2SV_ModStart> return ; } if ( img -> numcomps == 3 ) { img -> color_space = OPJ_CLRSPC_SRGB ; } else if ( ( img -> numcomps == 2 ) && ( img -> comps [ 0 ]. dx == 1 ) && ( img -> comps [ 1 ]. dx == 1 ) && ( img -> comps [ 2 ]. dx == 1 ) && ( img -> comps [ 0 ]. dy == 1 ) && ( img -> comps [ 1 ]. dy == 1 ) && ( img -> comps [ 2 ]. dx == 1 ) && ( img -> comps [ 0 ]. dy == 1 ) && ( img -> comps [ 1 ]. dy == 1 ) && ( img -> comps [ 2 ]. dy == 1 ) ) { sycc422_to_rgb ( img ) ; } else if ( ( img -> numcomps == 3 ) && ( img -> comps [ 0 ]. dx == 1 ) && ( img -> comps [ 1 ]. dy == 1 ) && ( img -> comps [ 2 ]. dx == 1 ) && ( img -> comps [ 0 ]. dy == 1 ) && ( img -> comps [ 2 ]. dy == 1 ) && ( img,0
320,"<S2SV_ModStart> * mbuf = NULL <S2SV_ModEnd> ; long err <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> long err = <S2SV_ModStart> case _IOC_NONE : mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) goto out ; <S2SV_ModStart> case _IOC_READ : mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) goto out_ext_ctrl ; <S2SV_ModStart> case _IOC_WRITE : if ( _IOC_SIZE ( cmd ) <= sizeof ( sbuf ) ) { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) goto out_ext_ctrl ; p -> controls = mbuf ; } else { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) goto out_ext_ctrl ; p -> error_idx = 0 ; user_ptr = ( void __user * ) arg ; } err = - EFAULT ; if ( _IOC_DIR ( cmd ) &",0
321,"<S2SV_ModStart>!= psubscribeCommand ) { addReplyError ( c, ""only <S2SV_blank> (P)SUBSCRIBE <S2SV_blank> / <S2SV_blank> (P)UNSUBSCRIBE <S2SV_blank> / <S2SV_blank> QUIT <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> this <S2SV_blank> context"" ) ; return REDIS_OK ; }",0
322,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_registers ( rtl8150_t <S2SV_ModStart> data ) { int ret = <S2SV_ModEnd> usb_control_msg ( dev <S2SV_ModStart>, RTL8150_REQ_SET_REGS, RTL8150_REQT_WRITE <S2SV_ModEnd>, indx, <S2SV_ModStart> 500 ) ; if ( ret < size ) return ret ; ret = <S2SV_ModEnd> usb_control_msg ( dev <S2SV_ModStart>, 0, <S2SV_ModEnd> data, size <S2SV_ModStart> 500 ) ; ret = <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
323,"<S2SV_ModStart> RESPONSE_RUN : { gtk_widget_get_screen ( GTK_WIDGET ( parameters -> parent_window ) ) ; uri = nautilus_file_get_uri ( parameters -> file ) ; DEBUG ( ""Launching <S2SV_blank> untrusted <S2SV_blank> launcher <S2SV_blank> %s"", uri ) ; nautilus_launch_desktop_file ( screen, uri, NULL, parameters -> parent_window ) ; g_free ( uri ) ; } break ; case RESPONSE_MARK_TRUSTED : { file = nautilus_file_get_location ( parameters -> file ) ; nautilus_file_mark_desktop_file_trusted ( file, parameters -> parent_window, TRUE, NULL, NULL ) ; g_object_unref ( file ) ; }",0
324,"<S2SV_ModStart> -> lsr_event ) { dev_dbg ( dev, ""%s <S2SV_blank> ===== <S2SV_blank> Port <S2SV_blank> %u <S2SV_blank> LSR <S2SV_blank> Status <S2SV_blank> = <S2SV_blank> %02x, <S2SV_blank> Data <S2SV_blank> = <S2SV_blank> %02x <S2SV_blank> ======\\n"", __func__, port_number, edge_port -> lsr_mask, * data ) ; handle_new_lsr ( edge_port, 0, edge_port -> lsr_mask, * data ) ; -- urb -> actual_length ; } if ( urb -> actual_length ) { dev_dbg ( dev, ""%s <S2SV_blank> ===== <S2SV_blank> Port <S2SV_blank> %u <S2SV_blank> LSR <S2SV_blank> Status <S2SV_blank> = <S2SV_blank> %02x, <S2SV_blank> Data <S2SV_blank> = <S2SV_blank> %02x <S2SV_blank> ======\\n"", __func__, port_number, edge_port -> lsr_mask, * data ) ; handle_new_lsr ( edge_port, 0, edge_port -> lsr_mask, * data ) ; -- urb -> actual_length ; ++ data ; } <S2SV_ModEnd> if ( urb",0
325,"<S2SV_ModStart> * cifs_find_smb_ses ( struct TCP_Server_Info * server <S2SV_ModEnd> ) { struct <S2SV_ModStart> ( tmp, & server -> smb_ses_list ) ) { struct cifsSesInfo * ses = list_entry ( tmp, struct cifsSesInfo, smb_ses_list ) ; if ( ses -> userName == NULL ) { write_unlock ( & cifs_tcp_ses_lock ) ; return NULL ; } ++ ses -> ses_count ; } write_unlock ( & cifs_tcp_ses_lock ) ;",0
326,"<S2SV_ModStart> vpx_codec_err_t res ; memset ( & ctx -> vp8_cfg, 0, sizeof ( ctx -> vp8_cfg ) ) ; <S2SV_ModStart> && ( cfg -> <S2SV_ModEnd> g_lag_in_frames > 1 <S2SV_ModStart> && ( cfg -> <S2SV_ModEnd> g_pass!= VPX_RC_ONE_PASS <S2SV_ModStart> ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_lag_in_frames > ctx -> cfg. g_lag_in_frames ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_lag_in_frames > ctx -> cfg. g_lag_in_frames ) ) ERROR ( ""Cannot <S2SV_blank> increase <S2SV_blank> lag_in_frames"" ) ; if ( ( cfg -> g_lag_in_frames > ctx -> cfg. g_lag_in_frames ) ) ERROR ( ""Cannot <S2SV_blank> increase <S2SV_blank> lag_in_frames"" ) ; res = validate_config ( ctx, cfg, & ctx -> vp8_cfg, 0 ) ; if (! res ) { ctx -> cfg = * cfg ;",0
327,"<S2SV_ModStart>'<S2SV_blank>') { ptr = strchr ( input,'<S2SV_blank>') ; ptr2 = strchr ( ptr2,'<S2SV_blank>') ; if ( ptr2 ) { * ptr2 = 0 ; off = r_num_math ( core -> num, ptr2 + 1 ) ; } if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { ptr = strchr ( input,'<S2SV_blank>') ; if ( ptr2 ) { * ptr2 = 0 ; off = r_num_math ( core -> num, ptr2 + 1 ) ; } if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { if (! r_fs_mount ( core -> fs, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { if (! r_fs_mount ( core -> fs, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n",0
328,"<S2SV_ModStart> ( vm_flags & VM_NORESERVE <S2SV_ModEnd> ) return 0 <S2SV_ModStart> return chg ; ret = hugetlb_acct_memory ( h, chg ) ; if ( ret < 0 ) { ret = - ENOSPC ; hugetlb_put_quota ( inode -> i_mapping, chg ) ; return ret ; } if ( ret < 0 ) { ret = - ENOSPC ; hugetlb_put_quota ( inode -> i_mapping, chg ) ; return ret ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; return ret ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; else { struct resv_map * resv_map = resv_map_alloc ( ) ; set_vma_resv_map ( vma, resv_map ) ; set_vma_resv_flags ( vma, HPAGE_RES",0
329,<S2SV_ModStart> new ) { <S2SV_ModEnd> keyring = keyring_alloc,0
330,"<S2SV_ModStart> scanned ; static size_t readnbd ; if ( readnbd > ( size_t ) 0U ) { readnbd = ( size_t ) 0U ; } <S2SV_ModStart> readnbd > ( size_t ) 0U && readnb <= ( ssize_t ) 0 && errno == EINTR ) { readnb = read ( clientfd, cmd + readnbd, cmdsize - readnbd ) ; if ( readnb <= ( ssize_t ) 0 && errno == EINTR ) { readnb = read ( clientfd, cmd + readnbd, cmdsize - readnbd ) ; if ( readnb <= ( ssize_t ) 0 && errno == EINTR ) { readnb = read ( clientfd, cmd + readnb, cmdsize - readnbd ) ; } if ( readnb <= ( ssize_t ) 0 && errno == EINTR ) { return - 2 ; } if ( readnb <= ( ssize_t ) 0 && errno == EINTR ) { readnb = read ( clientfd, cmd + readnbd, cmdsize - readnbd ) ; if ( readnb <= ( ssize_t",0
331,"<S2SV_ModStart> & orig ) ; DATA_TYPE ( copy ) = & mrb_io_type ; <S2SV_ModStart> mrb_io * ) mrb_io_alloc <S2SV_ModEnd> ( mrb ) <S2SV_ModStart> } fptr_copy = io_get_open_fptr ( mrb, orig ) ; DATA_PTR ( copy ) = fptr_copy ; buf = mrb_iv_get ( mrb, orig, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; mrb_iv_set ( mrb, copy, mrb_intern_c",0
332,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
333,<S2SV_ModStart> cpi ) { # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) cpi -> cur_buf -> flags &= ~ YV12_FLAG_HIGHBITDEPTH ; # endif <S2SV_ModStart> = 0 ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) cpi -> cur_buf -> flags |= YV12_FLAG_HIGHBITDEPTH ; # endif # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) cpi -> cur_buf -> flags &= ~ YV12_FLAG_HIGHBITDEPTH ; # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) cpi -> cur_buf -> flags |= YV12_FLAG_HIGHBITDEPTH ; # endif # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) cpi -> cur_buf,0
334,"<S2SV_ModStart> return res ; res = tee_mmu_check_access_rights ( utc, TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER, ( uaddr_t ) param, sizeof ( struct utee_params ) ) ; if ( res!= TEE_SUCCESS ) return res ; <S2SV_ModStart> return res ; res = tee_mmu_check_access_rights ( utc, TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER, ( uaddr_t ) param, sizeof ( struct utee_params ) ) ; if ( res!= TEE_SUCCESS ) return res ; res = tee_mmu_check_access_rights ( utc, TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER, ( uaddr_t ) param, sizeof ( struct utee_params ) ) ; if ( res!= TEE_SUCCESS ) return res ; res = tee_mmu_check_access_rights ( utc, TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER, ( uaddr_t ) param, sizeof",0
335,"<S2SV_ModStart> int rc ; struct desc_struct old_desc, new_desc ; const struct x86_emulate_ops * ops = ctxt -> ops ; if ( ctxt -> mode!= X86EMUL_MODE_PROT64 ) return X86EMUL_CONTINUE ; old_cs = get_segment_selector ( ctxt, VCPU_SREG_CS ) ; old_eip = ctxt -> _eip ; memcpy ( & old_desc, ctxt -> src. valptr + ctxt -> op_bytes, 2 ) ; if (! load_segment_descriptor ( ctxt, & old_desc, VCPU_SREG_CS ) ) return X86EMUL_CONTINUE ; rc = assign_eip_far ( ctxt, new_desc. l ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; rc = assign_eip_far ( ctxt, new_desc. l ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; ctxt -> src. val = old_cs ; rc = em_push ( ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) return X86EMUL_CONTINUE",0
336,"<S2SV_ModStart> = 0 ; j < Jpeg2000_MAX_BANDS ; j ++ ) { if ( j >= Jpeg2000_MAX_BANDS ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> or <S2SV_blank> uninitialized\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> = 0 ; j < Jpeg2000_MAX_BANDS ; j ++ ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> or <S2SV_blank> uninitialized\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( j >= Jpeg2000_MAX_BANDS ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> or <S2SV_blank> uninitialized\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> = 0 ; j < Jpeg2000_MAX_BANDS ; j ++ ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> or <S2SV_blank> uninitialized\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( j >= Jpeg2000_MAX_BANDS ) { av_log ( avctx, AV_LOG_ERROR,",0
337,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> No <S2SV_blank> extension <S2SV_blank> for <S2SV_blank> %s\\n"", filename ) ; return ; }",0
338,"<S2SV_ModStart> } struct reloc_struct_t * got_table = calloc ( <S2SV_ModEnd> n_got * sizeof <S2SV_ModStart> ) ) ; if ( got_table ) { ut32 offset = 0 ; for ( i = 0 ; i < n_got ; offset += 4, i ++ ) { ut32 got_entry ; if ( obj -> hdr -> data_start + offset + 4 > obj -> size || obj -> hdr -> data_start + offset + 4 > obj -> size || obj -> hdr -> data_start + offset + 4 < obj -> size || obj -> hdr -> data_start + offset + 4 ) { break ; } len = r_buf_read_at ( obj -> b, obj -> hdr -> data_start + offset, ( ut8 * ) & got_entry, sizeof ( ut32 ) ) ; if ( len!= sizeof ( ut32 ) ) { break ; } len = r_buf_read_at ( obj -> b, obj -> hdr -> data_start + offset, ( ut8 * ) & got_entry, sizeof ( ut32 ) ) ; if (! VALID_GOT_ENTRY ( got_entry ) || len!= sizeof ( ut32 ) ) { break ;",0
339,<S2SV_ModStart> -> si_code < 0 <S2SV_ModEnd> ) return - <S2SV_ModStart> return - EPERM <S2SV_ModEnd> ; info ->,0
340,"<S2SV_ModStart> tw ; * p_tx0 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> tx0 + p * p_cp -> tdx ), ( OPJ_INT32 ) p_image -> x0 ) ; * p_tx1 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> tx0 + q * p_cp -> tdx ), ( OPJ_INT32 ) p_image -> x1 ) ; * p_ty0 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> ty0 + q * p_cp -> tdy ), ( OPJ_INT32 ) p_image -> y0 ) ; * p_ty1 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> ty0 + q * p_cp -> tdy ), ( OPJ_INT32 ) p_image -> y1 ) ; * p_dy_min = opj_int_min ( ( OPJ_INT32 ) ( p_cp -> ty0 + q * p_cp -> tdy ),",0
341,"<S2SV_ModStart> char * fname <S2SV_ModEnd>, int lower <S2SV_ModStart> dir ) ; if (! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } if (! name ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } <S2SV_ModEnd> * name = <S2SV_ModStart> sep ) fname ++ ; p = & name [ strlen ( ( char * ) name ) ] ; fe = & fname [ strlen ( ( char * ) fname ) ] ; if ( utf8 ) { do { if ( fname >= fe ) { free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0xC0 ) && ( c < 0xE0 ) ) { x = ( c & 0x1F ) << 12 ; x |= ( * fname ++ & 0x3F ; } else if ( ( c >= 0xF0 ) && ( c < 0xF0 ) ) { x = ( c & 0x1F ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= ( * fname ++ & 0x3F",0
342,"<S2SV_ModStart> php_unserialize_data_t var_hash ; <S2SV_ModEnd> HashTable * class_hash <S2SV_ModStart> } } } if (! php_var_unserialize_ex ( return_value, & p, p + buf_len, & var_hash, class_hash ) ) { RETURN_FALSE ; } <S2SV_ModEnd> if ( class_hash <S2SV_ModStart> } } } if (! php_var_unserialize_ex ( return_value, & p, p + buf_len, & var_hash, class_hash ) ) { RETURN_FALSE ; } if ( class_hash ) { zend_hash_destroy ( class_hash ) ; FREE_HASHTABLE ( class_hash ) ; }",0
343,<S2SV_ModStart> goto __err ; if ( tu -> queue_size > UINT_MAX / sizeof ( struct snd_timer_queue ) ) { err = - EINVAL ; goto __err ; },0
344,"<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; if ( ptr -> movie_identifier == NULL ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG ( GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG_ERROR, GF_LOG",0
345,<S2SV_ModStart> = VPX_CODEC_INCAPABLE ; else if (! ( ctx -> priv -> alg_priv -> caps & VPX_CODEC_CAP_ENCODER ) ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ( ctx -> priv -> caps & VPX_CODEC_CAP_ENCODER ) ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ( ctx -> priv -> caps & VPX_CODEC_CAP_ENCODER ) ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ( ctx -> priv -> caps & VPX_CODEC_CAP_ENCODER ) ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ( ctx -> priv -> caps & VPX_CODEC_CAP_ENCODER ) ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ( ctx -> priv -> caps & VPX_CODEC_CAP_ENCODER ) ) ctx -> err = VPX_CODEC_IN,0
346,<S2SV_ModStart> ; uschar * prefix <S2SV_ModEnd> ; uschar * <S2SV_ModStart> NULL ; uschar * <S2SV_ModStart> NULL ; uschar * <S2SV_ModStart> NULL ; uschar * <S2SV_ModStart> NULL ; uschar * prefix <S2SV_ModEnd> ; uschar * <S2SV_ModStart> NULL ; uschar * <S2SV_ModStart> NULL ; uschar * prefix <S2SV_ModEnd> ; uschar * <S2SV_ModStart> NULL ; uschar * <S2SV_ModStart> NULL ; uschar * prefix <S2SV_ModEnd> ; uschar * <S2SV_ModStart> NULL ; uschar * <S2SV_ModStart> NULL ; uschar * prefix <S2SV_ModEnd> ; uschar * <S2SV_ModStart> NULL ; uschar * prefix <S2SV_ModEnd> ; uschar * <S2SV_ModStart> NULL ; uschar * <S2SV_ModStart> NULL ; uschar * prefix <S2SV_ModEnd> ; uschar * <S2SV_ModStart> NULL ; uschar * prefix <S2SV_ModEnd> ; uschar * <S2SV_ModStart> NULL ; uschar * <S2SV_ModStart> NULL ; uschar * prefix <S2SV_ModEnd> ; uschar * <S2SV_ModStart> NULL ; uschar * <S2SV_ModStart> NULL ; uschar * prefix <S2SV_ModEnd> ; uschar * <S2SV_ModStart> NULL ; uschar * <S2SV_ModStart> NULL ; uschar * prefix <S2SV_ModEnd> ; uschar * <S2SV_ModStart> NULL ; uschar * <S2SV_ModStart> NULL ; uschar * prefix <S2SV_ModEnd> ; uschar * <S2SV_ModStart> NULL ; uschar * prefix <S2SV_ModEnd> ; uschar * <S2SV_ModStart> NULL ; uschar * <S2SV_ModStart> NULL ; uschar * <S2SV_ModStart> NULL ; uschar * prefix <S2SV_ModEnd> ; uschar * <S2SV_ModStart> NULL ; uschar * <S2SV_ModStart> NULL ;,0
347,"<S2SV_ModStart> += 6 ; if ( strlen ( p ) > 0 ) s -> seekable = strtoll ( p + 1, NULL, 10 ) ; if ( strlen ( p ) > 0 ) s -> seekable = strtoll ( slash + 1, NULL, 10 ) ; if ( strlen ( p ) > 0 ) s -> seekable = strtoll ( p + 1, NULL, 10 ) ; if ( strlen ( p ) > 0 ) s -> filesize = strtoll ( p + 1, NULL, 10 ) ; if ( strlen ( p ) > 0 ) s -> seekable = strtoll ( p + 1, NULL, 10 ) ; if ( strlen ( p ) > 0 ) s -> seekable = strtoll ( p + 1, NULL, 10 ) ; if ( strlen ( p ) > 0 ) s -> seekable = strtoll ( p + 1, NULL, 10 ) ; if ( strlen ( p ) > 0 ) s -> filesize = strtoll ( p + 1, NULL, 10 ) ; if ( strlen ( p ) > 0 ) s -> seekable = strtoll ( p + 1, NULL, 10 ) ; if ( strlen ( p ) > 0",0
348,"<S2SV_ModStart> * cr ; size_t <S2SV_ModEnd> maxw, maxh <S2SV_ModStart> int upb ; size_t <S2SV_ModEnd> maxw, maxh <S2SV_ModStart> maxw = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> maxh = ( size_t <S2SV_ModEnd> ) img -> <S2SV_ModStart> int ) * ( maxw * maxh ) ; d0 = r = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; d1 = g = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; d2 = b = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; if ( r == NULL || g == NULL ) goto fails ; for ( i = 0U ; i < maxh ; ++ i ) { sycc_to_rgb ( offset, upb, * y, * cb, * cr, r, g, b ) ; ++ y ; ++ r ; ++ g ; ++ b ; ++ cb ; ++ cr ; } if ( j < maxw ) { sycc_to_rgb ( offset, upb, * y, * cb, * cr, r, g, b ) ; ++ y ; ++",0
349,"<S2SV_ModStart> void nfs4_state_set_mode_locked ( fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> == mode ) return ; if ( ( fmode & FMODE_READ )!= ( state -> state & FMODE_READ ) ) { if ( state -> state & FMODE_WRITE ) list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } else { if ( ( mode & FMODE_READ )!= ( state -> state & FMODE_READ ) ) { if ( state -> state & FMODE_WRITE ) list_move ( & state -> open_states, & state -> owner -> so_states ) ; } else list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } state -> state = mode ; }",0
350,"<S2SV_ModStart> return SSH_ERR_INVALID_ARGUMENT ; if ( ( r = sshpkt_get_string ( ssh, NULL, NULL ) )!= 0 || ( r = sshpkt_get_u32 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_end ( ssh ) )!= 0 ) return r ; for ( i = 0 ; i < KEX_COOKIE_LEN ; i ++ ) if ( ( r = sshpkt_get_string ( ssh, NULL, NULL ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_u32 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_end ( ssh ) )!= 0 ) return r ; for ( i = 0 ; i < PROPOSAL_MAX ; i ++ ) if ( ( r = sshpkt_get_string ( ssh, NULL, NULL ) )!= 0 || ( r = sshpkt_get_u32 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_end ( ssh ) )!= 0 ) return r ;",0
351,"<S2SV_ModStart> ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.constants.one <S2SV_blank> + <S2SV_blank> 1 <S2SV_blank> == <S2SV_blank> tests.constants.two <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.constants.one <S2SV_blank> + <S2SV_blank> 1 <S2SV_blank> == <S2SV_blank> tests.constants.two <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.constants.foo <S2SV_blank> == <S2SV_blank> \\""foo\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> "" ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> "" ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> "" ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> "" ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
352,"<S2SV_ModStart>!= EOF ) { if ( length > GetBlobSize ( pwp_image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart>!= EOF ) { if ( length > GetBlobSize ( pwp_image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart>!= EOF ) { if ( length > GetBlobSize ( pwp_image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart>!= EOF ) { if ( length > GetBlobSize ( pwp_image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart>!= EOF ) { if ( length > GetBlobSize ( pwp_image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart>!= EOF ) { if ( length > GetBlobSize ( pwp_image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart>!= EOF ) { if ( length > GetBlobSize ( pwp_image ) ) ThrowReaderException ( CorruptImageError, ""Insufficient",0
353,"<S2SV_ModStart> 0 ; char * lbase = NULL ; char * ltest = NULL ; char * strbase = NULL ; char * strtest = NULL ; if ( parse_cmdline_cmp ( argc, argv, & lbase ) == 1 ) { compare_dump_files_help_display ( ) ; goto cleanup ; } printf ( ""******Parameters********* <S2SV_blank> \\n"" ) ; printf ( "" <S2SV_blank> base_filename <S2SV_blank> = <S2SV_blank> %s\\n"" "" <S2SV_blank> test_filename <S2SV_blank> = <S2SV_blank> %s\\n"", inParam. base_filename, inParam. test_filename ) ; printf ( ""************************* <S2SV_blank> \\n"" ) ; printf ( ""Try <S2SV_blank> to <S2SV_blank> open: <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> reading <S2SV_blank>... <S2SV_blank> "", inParam. base_filename ) ; if ( fbase == NULL ) { goto cleanup ; } printf ( ""Ok.\\n"" ) ; while ( fgets ( lbase, sizeof ( lbase ), fbase ) && fgets ( ltest, sizeof ( ltest ), ftest ) ) { int nbase = sscanf ( lbase, ""%255[^\\r\\n]"", strbase ) ; int ntest = sscanf ( l",0
354,"<S2SV_ModStart> intf ) { struct <S2SV_ModStart> int ret ; if ( intf -> altsetting == CDC_NCM_COMM_ALTSETTING_NCM ) { ret = cdc_ncm_bind_common ( dev, intf, CDC_NCM_COMM_ALTSETTING_NCM, 0 ) ; } else { ret = cdc_ncm_bind_common ( dev, intf, CDC_NCM_DATA_ALTSETTING_NCM, 0 ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
355,"<S2SV_ModStart> 0 ; } if ( len > 0 && elem. in_sg [ 0 ]. iov_len > 0 ) { memcpy ( elem. in_sg [ 0 ]. iov_base + len, buf, len ) ; virtqueue_push ( vq, & elem, len ) ; virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; } <S2SV_ModEnd> memcpy ( elem",0
356,"<S2SV_ModStart> i ] ), ( unsigned ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ) ) ; fprintf ( out, ""mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ), ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ) ) ; fprintf ( out, ""expn[%d] <S2SV_blank> = <S2SV_blank> 0x%04x; <S2SV_blank> mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", ( unsigned ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ), ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ) ) ; fprintf ( out, ""mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i",0
357,"<S2SV_ModStart> - EINVAL ; h = NF_INET_NUMHOOKS ; if ( h < NF_INET_NUMHOOKS ) { if ( ( unsigned char * ) e - base == hook_entries [ h ] ) { pr_debug ( ""Hook <S2SV_blank> entries <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> "" ""ACCEPT/DROP\\n"" ) ; return - EINVAL ; } else { pr_debug ( ""Hook <S2SV_blank> entries <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> "" ""ACCEPT/DROP\\n"" ) ; return - EINVAL ; } newinfo -> hook_entry [ h ] = hook_entries [ h ] ; if ( ( unsigned char * ) e - base == underflows [ h ] ) newinfo -> underflow [ h ] = underflows [ h ] ; else { pr_debug ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> "" ""ACCEPT/DROP\\n"" ) ; return - EINVAL ; }",0
358,"<S2SV_ModStart> AV_PIX_FMT_PAL8 ; } else if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; }",0
359,"<S2SV_ModStart> 1 ) ; } if ( caplen > length - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; }",0
360,<S2SV_ModStart> q ) { <S2SV_ModEnd> snd_seq_timer_stop ( q <S2SV_ModStart> timer ) ; snd_use_lock_sync ( & q -> use_lock ) ; snd_seq_prioq_delete ( & q -> tickq ) ; snd_seq_prioq_delete ( & q -> timeq ) ; snd_seq_timer_delete ( & q -> timer ) ;,0
361,"<S2SV_ModStart> int error ; pgoff_t start = ( offset + len - 1 ) >> PAGE_CACHE_SHIFT ; unsigned int start_offset = ( offset + len - 1 ) & ~ PAGE_CACHE_MASK ; pgoff_t end = ( offset + len - 1 ) >> PAGE_CACHE_SHIFT ; unsigned int end_offset = ( offset + len - 1 ) & ~ PAGE_CACHE_MASK ; unsigned int from, to ; if (! end_offset ) end_offset = PAGE_CACHE_SIZE ; if ( gfs2_is_stuffed ( ip ) ) { error = gfs2_unstuff_dinode ( ip, NULL ) ; goto out ; } curr = start ; offset = start << PAGE_CACHE_SHIFT ; from = start_offset ; to = PAGE_CACHE_SIZE ; error = write_empty_blocks ( page, from, to, mode ) ; if (! error && offset + to > inode -> i_size &&! ( mode & FALLOC_FL_KEEP_SIZE ) ) { i_size_write ( inode, offset + to ) ; } unlock_page ( page ) ; page_cache_release ( page ) ;",0
362,"<S2SV_ModStart> b ) ; VipsForeignLoadClass <S2SV_ModEnd> * class = <S2SV_ModStart> class = VIPS_FOREIGN_LOAD_GET_CLASS <S2SV_ModEnd> ( load ) <S2SV_ModStart> load ) || vips_image_pio_input <S2SV_ModEnd> ( load -> <S2SV_ModStart> load ) || vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; if (! vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; g_object_set_qdata ( G_OBJECT ( load -> real ), vips__foreign_load_operation, load ) ; if ( class -> load ( load ) || vips_image_pio_input ( load -> real ) ) return ( NULL ) ; if ( class -> load ( load ) || vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; if (! vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; g_object_set_qdata ( G_OBJECT ( load -> real ), vips__foreign_load_operation, load ) ; if ( class -> load ( load ) ||",0
363,"<S2SV_ModStart> ) { const char * name = fit_get_name ( fit, noffset, NULL ) ; if (! strncmp ( name, FIT_SIG_NODENAME, strlen ( FIT_SIG_NODENAME ) ) ) { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; if ( ret ) { puts ( ""- <S2SV_blank> "" ) ; verified = 1 ; break ; } } if ( noffset == - FDT_ERR_BADSTRUCTURE || noffset == - FDT_ERR_TRUNCATED || noffset == - FDT_ERR_BADSTRUCTURE ) { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; if ( ret ) { puts ( ""- <S2SV_blank> "" ) ; } else { puts ( ""+ <S2SV_blank> "" ) ; verified = 1 ; break ; } } if ( noffset == - FDT_ERR_TRUNCATED || noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; }",0
364,"<S2SV_ModStart> & XFS_ATTR_INCOMPLETE ) { xfs_attr_leaf_name_local_t * name_loc ; name_loc = xfs_attr3_leaf_name_local ( leaf, i ) ; } else if ( name_loc -> namelen!= sizeof ( xfs_attr_leaf_name_local_t ) ) { retval = XFS_ERROR ( ENOATTR ) ; } else if ( name_loc -> namelen!= sizeof ( xfs_attr_leaf_name_local_t ) ) { retval = XFS_ERROR ( ENOATTR ) ; } else if ( name_loc -> namelen!= sizeof ( xfs_attr_leaf_name_local_t ) ) { retval = XFS_ERROR ( ENOATTR ) ; } else if ( name_loc -> namelen!= sizeof ( xfs_attr_leaf_name_local_t ) ) { retval = XFS_ERROR ( ENOATTR ) ; } else if ( name_loc -> namelen!= sizeof ( xfs_attr_leaf_name_local_t ) ) { retval = XFS_ERROR ( XFS_ERROR ) ; } else {",0
365,"<S2SV_ModStart> ; if ( cx23888_ir_tx_kfifo_alloc ( & state -> tx_kfifo, CX23888_IR_TX_KFIFO_SIZE, GFP_KERNEL ) ) { cx23888_ir_write4 ( dev, CX23888_IR_IRQEN_REG, 0 ) ; mutex_init ( & state -> tx_params_lock ) ; default_params = default_tx_params ; v4l2_subdev_call ( sd, ir, tx_s_parameters, & default_params ) ; mutex_init ( & state -> tx_params_lock ) ; state -> dev = dev ; } else { cx23888_ir_write4 ( dev, CX23888_IR_IRQEN_REG, 0 ) ; mutex_init ( & state -> tx_params_lock ) ; default_params = default_tx_params ; v4l2_subdev_call ( sd, ir, tx_s_parameters, & default_params ) ; mutex_init ( & state -> tx_params_lock ) ; state -> tx_kf",0
366,<S2SV_ModStart> service_name_tlv_length ) ; if ( service_name_tlv == NULL ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> miux_tlv_length ) ; if ( miux_tlv == NULL ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> rw_tlv_length ) ; if ( rw_tlv == NULL ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> rw_tlv_length ) ; if ( rw_tlv == NULL ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> += rw_tlv_length ; },0
367,"<S2SV_ModStart> ssh * ssh <S2SV_ModEnd> = active_state ; <S2SV_ModStart>. compression ) { <S2SV_ModEnd> mon -> m_zback <S2SV_ModStart> -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; ssh_packet_set_compress_hooks ( ssh, mon -> m_zback, ( ssh_packet_comp_alloc_func * ) mm_zalloc, ( ssh_packet_comp_free_func * ) mm_zfree ) ; }",0
368,"<S2SV_ModStart> iface, vpx_codec_dec_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> = VPX_CODEC_ABI_MISMATCH ; else if ( ( flags & VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_POSTPROC ) && ( iface -> caps & VPX_CODEC_CAP_POSTPROC ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) && ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) && ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VP",0
369,<S2SV_ModStart> * chan ; jas_uint16 <S2SV_ModEnd> numchans ; if,0
370,"<S2SV_ModStart> |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_EXTENDED_CTRL ) ; value |= TJA1100_EXTENDED_CTRL_CONFIG_EN ; tja1100WritePhyReg ( interface, TJA1100_EXTENDED_CTRL, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, T",0
371,"<S2SV_ModStart>. type ) { struct icmphdr iph ; iph = ip_hdr ( skb_in ) ; itp = skb_header_pointer ( skb_in, iph -> ihl << 2 ) + itp - skb_network_header ( skb_in ) + ( iph -> ihl << 2 ) + itp - skb_network_header ( skb_in ) ; if ( itp == NULL ) { goto out ; } itp = skb_header_pointer ( skb_in, iph -> ihl << 2 ) + itp - skb_network_header ( skb_in ) + ( iph -> ihl << 2 ) + itp - skb_network_header ( skb_in ) + ( iph -> ihl << 2 ) + itp - skb_network_header ( skb_in ) + ( iph -> ihl << 2 ) + itp - skb_network_header ( skb_in ) + itp - skb_network_header ( skb_network_header ( skb_in ) + ( iph -> ihl << 2 )",0
372,<S2SV_ModStart> len ; } ND_TCHECK_32BITS ( p + 2 <S2SV_ModEnd> ) ; ND_PRINT,0
373,<S2SV_ModStart> = 0 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
374,<S2SV_ModStart> private ) { if ( IS_ERR ( private ) ) { crypto_free_skcipher ( private ) ; return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
375,"<S2SV_ModStart> bprm ) { <S2SV_ModEnd> umode_t mode = <S2SV_ModStart> int retval ; bprm -> cred -> euid = current_euid ( ) ; bprm -> cred -> egid = current_egid ( ) ; if (! ( bprm -> file -> f_path. mnt -> mnt_flags & MNT_NOSUID ) &&! task_no_new_privs ( current ) && kuid_has_mapping ( bprm -> cred -> user_ns, inode -> i_uid ) && kgid_has_mapping ( bprm -> cred -> user_ns, inode -> i_gid ) ) { if ( ( mode & ( S_ISUID | S_IXGRP ) ) == ( S_ISUID | S_IXGRP ) ) { bprm -> per_clear |= PER_CLEAR_ON_SETID ; bprm -> cred -> euid = inode -> i_uid ; } if ( ( mode & ( S_ISGID | S_IXGRP ) ) == ( S_ISGID | S_IXGRP ) ) { bprm -> per_clear |= PER_CLEAR_",0
376,<S2SV_ModStart> = nlogs ; if ( unlikely ( headcount >= UIO_MAXIOV ) ) { r = - ENOBUFS ; goto err ; },0
377,<S2SV_ModStart> ) ) { if ( dlen < 2 ) { * pt ++ = '\\\\' ; * pt ++ = '\\\\' ; * pt ++ = * s ; dlen -- ; } else { * pt ++ = '\\\\' ; * pt ++ = * s ; } },0
378,<S2SV_ModStart> { rq = tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; fn (,1
379,<S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_DMA ) &&! ( iface -> caps & VPX_CODEC_CAP_DMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res =,0
380,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
381,<S2SV_ModStart> skb_is_nonlinear ( skb ) ) return 0 ; if ( skb -> len < sizeof ( struct nlattr,1
382,"<S2SV_ModStart> ; encode_share_access ( xdr <S2SV_ModEnd>, arg ->",0
383,"<S2SV_ModStart> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> sum <S2SV_blank> 0x%x"", EXTRACT_16BITS ( bp ) ) ) ; bp += 2 ; len -= 2 ; <S2SV_ModStart> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> off <S2SV_blank> 0x%x"", EXTRACT_16BITS ( bp ) ) ) ; bp += 2 ; len -= 2 ; if ( flags & GRE_CP ) { ND_TCHECK2 ( * bp, 2 ) ; if ( len < 2 ) goto trunc ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> key=0x%x"", EXTRACT_32BITS ( bp ) ) ) ; bp += 2 ; len -= 2 ; } if ( flags & GRE_KP ) { ND_TCHECK2 ( * bp, 4 ) ; if ( len < 4 ) goto trunc ; ND_PRINT ( ( ndo, "", <S2SV_blank> key=0x%x"", EXTRACT_32BITS ( bp ) ) ) ; bp += 4 ; len -= 4 ; } if ( flags & GRE_SP ) {",0
384,<S2SV_ModStart> ) ) { tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [ tile_buffsize - 1 ] = 0 ; tilebuf [,0
385,"<S2SV_ModStart> NULL, 'u' }, { ""uid"", required_argument, NULL, 'U' }, { ""uid"", required_argument, NULL, 'U' }, { ""uid"", required_argument, NULL, 'U' }, { ""uid"", required_argument, NULL, 'U' }, { ""uid"", required_argument, NULL, 'U' }, { ""uid"", required_argument, NULL, 'U' }, { ""uid"", required_argument, NULL, 'U' }, { ""uid"", required_argument, NULL, 'U' }, { ""uid"", required_argument, NULL, 'U' }, { ""uid"", required_argument, NULL, 'U' }, { ""uid"", required_argument, NULL, 'U' }, { ""uid"", required_argument, NULL, 'U' }, # if defined _WITH_LVS_ { ""dont-release-ipvs"", no_argument, NULL, 'I' }, { ""dont-release-ipvs"", no_argument, NULL, 'U' }, {",0
386,"<S2SV_ModStart> void modify_bar_registration ( struct pci_dev * dev, int idx, int registration ) { printf ( ""modify_bar_registration: <S2SV_blank> bypass <S2SV_blank> for <S2SV_blank> pci-gvt\\n"" ) ; <S2SV_ModStart> break ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
387,<S2SV_ModStart> ; struct o2nm_cluster * <S2SV_ModEnd> cluster = to_o2nm_cluster_from_node <S2SV_ModStart> return - EBUSY <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> cl_has_local && tmp == node -> nd_num && cluster -> cl_local_node == O2NM_INVALID_NODE_NUM ) { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = O2NM_INVALID_NODE_NUM ; } node -> nd_local = tmp ; if ( node -> nd_local ) { ret = o2net_start_listening ( node ) ; if ( ret ) { cluster -> cl_local_node = O2NM_INVALID_NODE_NUM ; } node -> nd_local = tmp ; if ( node -> nd_local ) { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = O2NM_INVALID_NODE_NUM ; } node -> nd_local = tmp ; if ( node -> nd_local ) { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = O2NM_INVALID_NODE_NUM ; } node -> nd_local,0
388,"<S2SV_ModStart> ( fp, "" <S2SV_blank> Number <S2SV_blank> of <S2SV_blank> pts <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> format <S2SV_blank> = <S2SV_blank> %s\\n"" <S2SV_ModEnd>, & n",0
389,<S2SV_ModStart> case 0x1a : case 0x1b : case 0x1c : case 0x1f : case 0x2a : case 0x2b : case 0x2c : case 0x2d : <S2SV_ModStart> : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x83 : case 0x,0
390,"<S2SV_ModStart> ; struct sock * sk = transport -> asoc -> base. sk ; <S2SV_ModStart> sk ) ; if ( sock_owned_by_user ( sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> owned <S2SV_blank> by <S2SV_blank> user\\n"", __func__ ) ; goto out_unlock ; } <S2SV_ModEnd> if ( sock_owned_by_user <S2SV_ModStart> sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"", __func__ ) ; if (! mod_timer ( & transport -> T3_rtx_timer, jiffies + ( HZ / 20 ) ) ) sctp_transport_hold ( transport ) ; goto out_unlock ; } if ( transport -> dead ) goto out_unlock ; error = sctp_do_sm ( net, SCTP_EVENT_T_ERROR, SCTP_ST_TIMEOUT ( SCTP_EVENT_TIMEOUT_T3_RTX ), asoc -> state, asoc -> ep, asoc, transport, GFP_ATOMIC ) ; if ( error ) { pr_debug ( ""%s: <S2SV_blank> transport <S2SV_blank> is <S2SV_blank> dead\\n"", __func",0
391,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
392,"<S2SV_ModStart> E_NOTHANDLED ; fd = open ( EF_GBL_OPTIONS -> output_file, O_CREAT | O_RDWR | O_TRUNC | O_BINARY, 0644 ) ; ON_ERROR ( fd, - 1, ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s"", EF_GBL_OPTIONS -> output_file ) ;",0
393,"<S2SV_ModStart> goto trunc ; if ( lshp -> ls_length < 2 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %us, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_router ), lshp -> ls_seq, lshp -> ls_age, lshp -> ls_length ) ) ; } else { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %us, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_seq ), lshp -> ls_age, lshp -> ls_length ) ) ; }",0
394,"<S2SV_ModStart> int n, jas_ulonglong <S2SV_ModEnd> val ) {",1
395,"<S2SV_ModStart> ; memcpy ( & rates, p + offset, sizeof ( rates ) ) ; if (! ND_TTEST2 ( * ( p + offset ), sizeof ( rates ) ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), sizeof ( ds ) ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), sizeof ( cf ) ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), sizeof ( cf ) ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), sizeof ( cf ) ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), sizeof ( cf ) ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), sizeof ( cf ) ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), sizeof ( cf ) ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset ), sizeof ( cf ) ) ) return 0 ; if",0
396,<S2SV_ModStart> } else { if ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; pipe_buf_mark_unmergeable ( obuf ) ; opipe -> nrbufs ++ ; opipe -> curbuf = ( opipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; } else { * obuf = * ibuf ; opipe -> curbuf = ( opipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; opipe -> nrbufs ++ ; opipe -> curbuf = ( opipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; } else { * obuf = * obuf ; opipe -> curbuf = ( opipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; opipe -> nrbufs ++ ; opipe -> curbuf = ( opipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; opipe -> nrbufs -- ; opipe -> curbuf = ( opipe -> curbuf + 1 ),0
397,"<S2SV_ModStart> ; r_buf_set_bytes ( tbuf <S2SV_ModEnd>, buf,",0
398,"<S2SV_ModStart> ; mm_segment_t old_fs <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> ru_utime. tv_sec <S2SV_ModEnd>, & ur <S2SV_ModStart> -> ru_stime. tv_sec <S2SV_ModEnd> ) ; err <S2SV_ModStart> 0 ; err |= __put_user ( r. ru_utime. tv_sec, & ur -> ru_utime. tv_sec ) ; err |= __put_user ( r. ru_utime. tv_usec, & ur -> ru_utime. tv_usec ) ; err |= __put_user ( r. ru_stime. tv_usec, & ur -> ru_stime. tv_usec ) ; err |= __put_user ( r. ru_maxrss, & ur -> ru_maxrss ) ; err |= __put_user ( r. ru_ixrss, & ur -> ru_ixrss ) ; err |= __put_user ( r. ru_idrss, & ur -> ru_idrss ) ; err |= __put_user ( r. ru_isrss, & ur -> ru_isrss ) ; err |= __put_user ( r. ru_minflt, & ur -> ru_min",0
399,"<S2SV_ModStart> NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys/net"", ""%r/proc/net"", NULL, MS_BIND, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys"", ""%r/proc/sys"", NULL, MS_REMOUNT | MS_BIND | MS_RDONLY, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/net"", ""%r/proc/net"", NULL, MS_BIND, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys"", ""%r/proc/sys"", NULL, MS_REMOUNT | MS_BIND | MS_RDONLY, NULL }, { LXC_AUTO_PROC_RW, ""proc"", ""%r/proc"", ""proc"", MS_",0
400,"<S2SV_ModStart> ; } } else if ( addrinsubnet ( & md -> sender, & md -> sender -> spd. that. client ) && ( c == NULL ||! subnetinsubnet ( & c -> spd. that. client, & d -> spd. that. client ) ) ) { loglog ( RC_LOG_SERIOUS, ""initial <S2SV_blank> parent <S2SV_blank> SA <S2SV_blank> message <S2SV_blank> received <S2SV_blank> on <S2SV_blank> %s:%u"" "" <S2SV_blank> but <S2SV_blank> no <S2SV_blank> connection <S2SV_blank> has <S2SV_blank> been <S2SV_blank> authorized"", ip_str ( & md -> sender, & md -> sender -> spd. that. client ), ( c == NULL ||! subnetinsubnet ( & c -> spd. that. client, & d -> spd. that. client ) ) ) { loglog ( RC_LOG_SERIOUS, ""initial <S2SV_blank> parent <S2SV_blank> SA <S2SV_blank> message <S2SV_blank> received <S2SV_blank> on <S2SV_blank> %s:%u"" "" <S2SV_blank> but <S2SV_blank> no <S2SV_blank> connection <S2SV_blank> has <S2SV_blank> been <S2SV_blank> authorized"", ip_str ( & md -> iface -> ip_addr ) ), ( ntohs ( portof ( & md -> iface -> ip_addr ) ), ( ntohs (",0
401,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode ( NSC_CONTEXT <S2SV_ModStart> { nsc_encode_argb_to_aycocg ( <S2SV_ModEnd> context, bmpdata <S2SV_ModStart> { nsc_encode_subsampling ( <S2SV_ModEnd> context ) ;",0
402,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
403,<S2SV_ModStart> == ETH_SS_STATS ) return sizeof ( g_xgmac_stats_string ) <S2SV_ModEnd> ; return ARRAY_SIZE,0
404,<S2SV_ModStart> == 1 ) { size_t columns = GetPSDPacketSize ( image ) ; return ( columns <S2SV_ModEnd> * GetPSDPacketSize (,0
405,"<S2SV_ModStart> = open ( dev_path <S2SV_ModEnd>, O_RDWR | <S2SV_ModStart> O_CLOEXEC ) ; if ( p_dev -> fd < 0 ) { APPL_TRACE_ERROR ( ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank> err:%d"", __FUNCTION__, p_dev -> fd ) ; p_dev -> fd = - 1 ; }",0
406,"<S2SV_ModStart> -> ctrl_intf -> cur_altsetting ; if ( alt -> desc. bNumEndpoints!= 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> control <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return - EINVAL ; } <S2SV_ModStart> -> data_intf -> cur_altsetting ; if ( alt -> desc. bNumEndpoints!= 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> data <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return - EINVAL ; } <S2SV_ModStart> -> desc. bNumEndpoints!= 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> data <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return - EINVAL ; } if ( alt -> desc. bNumEndpoints!= 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> control <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return",0
407,"<S2SV_ModStart> ; const char * name = d -> name ; struct device * dev = d -> udev -> dev ; dev_dbg ( & d -> udev -> dev, ""%s: <S2SV_blank> interface <S2SV_blank> number=%d\\n"", __func__, intf -> cur_altsetting -> desc. bInterfaceNumber ) ; dev_dbg ( & d -> udev -> dev, ""%s: <S2SV_blank> bInterfaceNumber=%d\\n"", __func__, intf -> cur_altsetting -> desc. bInterfaceNumber, intf -> cur_altsetting -> desc. bInterfaceNumber ) ; dev_dbg ( & d -> udev -> dev, ""%s: <S2SV_blank> \'%s\' <S2SV_blank> successfully <S2SV_blank> deinitialized <S2SV_blank> and <S2SV_blank> disconnected\\n"", KBUILD_MODNAME, name ) ; dev_info ( & dev, ""%s: <S2SV_blank> \'%s\' <S2SV_blank> successfully <S2SV_blank> deinitialized <S2SV_blank> and <S2SV_blank> disconnected\\n"", KBUILD_MODNAME, name ) ; dvb_usbv2_exit ( d ) ; dev_info ( & dev, ""%s: <S2SV_blank> \'%s\' <S2SV_blank> successfully <S2SV_blank> deinitialized <S2SV_blank> and <S2SV_blank> disconnected\\n"", KBUILD_MOD",0
408,"<S2SV_ModStart> -> hsamp * ( JAS_CAST ( uint_fast32_t, jas_uint_t ) <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, jas_uint_t ) <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, jas_uint_t ) <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, jas_uint_fast32_t, jas_uint_t ) <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, jas_uint_t ) <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t, jas_uint_t ) <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> hsamp * ( JAS_CAST ( uint_fast32_t, jas_uint_t ) <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> vsamp * ( JAS_CAST ( uint_fast32_t ) <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> vsamp * ( JAS_CAST (",0
409,<S2SV_ModStart> target_enc ) { * reg = ( regex_t * ) xmalloc ( sizeof ( regex_t ) ) ; if ( IS_NULL ( * reg ) ) { r = ONIGERR_MEMORY ; goto err2 ; },0
410,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> InsertRow ( Image <S2SV_ModStart>, ssize_t y, <S2SV_ModEnd> ExceptionInfo * exception <S2SV_ModStart> ) { size_t bit <S2SV_ModEnd> ; ssize_t x <S2SV_ModStart> x ; register Quantum <S2SV_ModEnd> index ; index <S2SV_ModStart> ; index = <S2SV_ModEnd> 0 ; switch <S2SV_ModStart> : { q = QueueAuthenticPixels ( image, 0, y, image -> columns, 1, exception ) ; if ( q == ( Quantum * ) NULL ) break ; if ( ( image -> columns % 8 )!= 0 ) { index = ( Quantum ) ( ( ( ( * p ) & ( 0x80 >> bit ) )!= 0 )? 0x01 : 0x00 ) ; SetPixelIndex ( image, index, q ) ; q += GetPixelChannels ( image ) ; } if ( ( <S2SV_ModEnd> image -> columns <S2SV_ModStart> % 8 )!= 0 ) { index = ( Quantum ) ( ( ( ( * p ) & ( 0x80 >> bit ) )!= 0 )? 0x01 : 0x00 ) ; SetPixelIndex ( image, index, q ) ; q += GetPixelChannels ( image ) ; } p ++ ; } if",0
411,"<S2SV_ModStart> * ndo, <S2SV_ModEnd> register const u_char <S2SV_ModStart> u_int network_addr_type ; u_int <S2SV_ModEnd> hexdump = FALSE <S2SV_ModStart> case AFNUM_INET : ND_PRINT ( ( ndo, ""%s"", ipaddr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET6 : ND_PRINT ( ( ndo, ""%s"", ip6addr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET : ND_PRINT ( ( ndo, ""%s"", ipaddr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET6 : ND_PRINT ( ( ndo, ""%s"", ip6addr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET : ND_PRINT ( ( ndo, ""%s"", ip6addr_string ( ndo, tptr + 1 ) ) ; break ; case AFNUM_INET6 : ND_PRINT ( ( ndo, ""%s"", ip6addr_string ( ndo, tptr + 1 ) )",0
412,"<S2SV_ModStart> desc_struct cs ; u32 <S2SV_ModEnd> msr_data ; int <S2SV_ModStart> X86EMUL_MODE_PROT32 ; else usermode = X86EMUL_MODE_PROT64 ; cs. dpl = 3 ; ss. dpl = 3 ; ops -> get_msr ( ctxt, MSR_IA32_SYSENTER_CS, & msr_data ) ; switch ( ( msr_data & 0xfffc ) == 0x0 ) return emulate_gp ( ctxt, 0 ) ; break ; case X86EMUL_MODE_PROT32 : cs_sel = ( u16 ) ( msr_data + 16 ) ; if ( ( msr_data & 0xfffc ) == 0x0 ) return emulate_gp ( ctxt, 0 ) ; ss_sel = ( u16 ) ( msr_data + 24 ) ; break ; case X86EMUL_MODE_PROT64 : cs_sel = ( u16 ) ( msr_data + 32 ) ; if ( ( msr_data & 0xfffc ) == 0x0 ) return emulate_gp ( ctxt, 0 ) ; break ; case X86EMUL",0
413,"<S2SV_ModStart> ( dev ) ; if ( pdev -> driver_override ) { strncpy ( buf, pdev -> driver_override, sizeof ( pdev -> driver_override ) ) ; return strlen ( buf ) ; }",0
414,"<S2SV_ModStart>, i ; BIO * tmpout = NULL ; if ( in == NULL ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, ERR_R_INVALID_PARAMETER ) ; goto err ; } if ( BIO_method_type ( in ) == BIO_TYPE_CIPHER ) { if (! BIO_get_cipher_status ( in ) ) goto err ; } if (! tmpout ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, ERR_R_INVALID_PARAMETER ) ; goto err ; } if ( flags & CMS_TEXT ) { if (! SMIME_text ( tmpout, out ) ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, CMS_R_SMIME_TEXT_ERROR ) ; goto err ; } } if ( flags & CMS_TEXT ) { if (! SMIME_text ( tmpout, out ) ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, CMS_R_SMIME_TEXT_ERROR ) ; goto err ; } if ( flags & CMS_TEXT ) { if (! SMIME_text ( tmpout, out ) ) { CMSerr ( CMS",0
415,"<S2SV_ModStart> retval, response <S2SV_ModEnd>, NULL,",0
416,"<S2SV_ModStart> costs, vpx_tree <S2SV_ModEnd> * tree, <S2SV_ModStart> c ) { vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> / 2 ] <S2SV_ModEnd> ; int b <S2SV_ModStart> b ) ; vpx_tree_index ii = tree [ i + b ] ; if ( ii <= 0 ) costs [ - ii ] = cc ; else costs [ - ii ] = cc ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
417,<S2SV_ModStart>. st_mode & ( S_IXUGO | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S,0
418,"<S2SV_ModStart> ; switch ( inet_ntop ( af, sock_addr, addr_text, sizeof ( addr_text ) - 1 ) ; port = ntohs ( ( ( struct sockaddr_un * ) sock_addr ) -> sin_port ) ; protoname = ""unix"" ; break ; case AF_INET6 : ( void ) inet_ntop ( af, sock_addr, addr_text + 1, sizeof ( addr_text ) - 2 ) ; port = ntohs ( ( ( struct sockaddr_in6 * ) sock_addr ) -> sin6_port ) ; protoname = ""udp6"" ; break ; case AF_UNIX : strncpy ( addr_text, sock_addr -> sun_path, sizeof ( addr_text ) - 1 ) ; addr_text [ sizeof ( addr_text ) - 1 ] = '\\0' ; protoname = ""unix6"" ; break ; case AF_UNIX : strncpy ( addr_text, sock_addr -> sun_path, sizeof ( sockaddr_text ) - 1 ) ; port = ntohs ( ( ( struct sockaddr_un * ) sock_addr ) -> sun_",0
419,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
420,<S2SV_ModStart> & 0xffff ; if ( p + 4 + c > sizeof ( event_rec ) - 4 ) return - EINVAL ;,0
421,"<S2SV_ModStart> avoid_reserve ) { struct hstate <S2SV_ModEnd> * h = <S2SV_ModStart> vma ) ; spin_lock ( & hugetlb_lock ) ; page = hugetlb_get_page ( inode -> i_mapping, chg ) ; if (! page ) { spin_unlock ( & hugetlb_lock ) ; return ERR_PTR ( - VM_FAULT_OOM ) ; } else if ( hugetlb_get_quota ( inode -> i_mapping, chg ) ) { spin_unlock ( & hugetlb_lock ) ; page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { spin_unlock ( & hugetlb_lock ) ; page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { spin_unlock ( & hugetlb_lock ) ; page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { page = alloc_buddy_huge_page ( h, NUMA_NO_",0
422,"<S2SV_ModStart> ( 4, ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> statistics <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, filegen_string, <S2SV_ModStart> ( 4, ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> statistics <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, filegen_string, <S2SV_ModStart> ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> statistics <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, filegen_file,",0
423,"<S2SV_ModStart> -> stamp_path ) memset ( t -> last_trigger. realtime, 0, sizeof ( t -> last_trigger. realtime )",0
424,"<S2SV_ModStart> fadst16 ( const tran_low_t * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t <S2SV_ModEnd> x0 = input <S2SV_ModStart> [ 15 ] ; tran_high_t x1 = input [ 0 ] ; tran_high_t x2 = input [ 1 ] ; tran_high_t x3 = input [ 2 ] ; tran_high_t x4 = input [ 3 ] ; tran_high_t x5 = input [ 4 ] ; tran_high_t x6 = input [ 5 ] ; tran_high_t x7 = input [ 6 ] ; tran_high_t x8 = input [ 7 ] ; tran_high_t x9 = input [ 8 ] ; tran_high_t x10 = input [ 9 ] ; tran_high_t x11 = input [ 10 ] ; tran_high_t x12 = input [ 2 ] ; tran_",0
425,<S2SV_ModStart> ; # if HAVE_EDSP <S2SV_ModEnd> flags |= HAS_EDSP <S2SV_ModStart> endif # if HAVE_MEDIA <S2SV_ModEnd> flags |= HAS_MEDIA <S2SV_ModStart> endif # if HAVE_NEON <S2SV_ModEnd> flags |= HAS_NEON,0
426,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
427,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorAcc16 ( TIFF <S2SV_ModStart> wc ) ; return,1
428,"<S2SV_ModStart> tot_len ) ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
429,"<S2SV_ModStart> ; length = avio_rl16 ( pb ) ; if ( length < 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> in <S2SV_blank> cine <S2SV_blank> stream"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ; length = avio_rl16 ( pb ) ; if ( length < 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> in <S2SV_blank> cine <S2SV_blank> stream"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ; length = avio_rl32 ( pb ) ; if ( length < 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> in <S2SV_blank> cine <S2SV_blank> stream"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ; length = avio_rl32 ( pb ) ; if ( length < 4 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> in <S2SV_blank> cine <S2SV_blank> stream"" ) ; return AVERROR_INVALIDDATA ; }",0
430,"<S2SV_ModStart> * fpath = NULL <S2SV_ModEnd>, * cgdir <S2SV_ModStart> out ; } if ( fpath && fc_may_access ( fc, controller, cgdir, NULL, O_WRONLY ) ) { ret = - EACCES ; goto out ; } if ( caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { ret = - EACCES ; goto out ; } if ( fc_may_access ( fc, fc, controller, cgdir, NULL, O_WRONLY ) ) { ret = - EACCES ; goto out ; } if ( caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { ret = - EACCES ; goto out ; } if ( caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { ret = - EACCES ; goto out ; } if ( fc_may_access ( fc, fc, controller, cgdir, NULL, O_WRONLY ) ) { ret = - EACCES ; goto out ; } if ( caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { ret = - EACCES ; goto",0
431,<S2SV_ModStart> ; if ( mnt -> mnt. mnt_flags & MNT_READONLY ) mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; if ( ( flag & CL_UNPRIVILEGED ) && ( mnt -> mnt. mnt_flags & MNT_WRITE_HOLD ) ) mnt -> mnt. mnt_flags |= MNT_LOCK_WRITE_HOLD ; if ( ( flag & CL_UNPRIVILEGED ) && ( mnt -> mnt. mnt_flags & MNT_READONLY ) ) mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; if ( ( flag & CL_UNPRIVILEGED ) && ( mnt -> mnt. mnt_flags & MNT_WRITE_HOLD ) ) mnt -> mnt. mnt_flags |= MNT_LOCK_WRITE_HOLD ; if ( ( flag & CL_UNPRIVILEGED ) && ( mnt -> mnt. mnt_flags & MNT_WRITE_HOLD ) ) mnt -> mnt. mnt_flags |= MNT_LOCK,0
432,<S2SV_ModStart> trans = & rds_loop_transport <S2SV_ModEnd> ; } },0
433,"<S2SV_ModStart> * rsize >= 110 <S2SV_ModEnd> && rdesc [ <S2SV_ModStart> == 0x26 && rdesc [ 110 ] == 0x80 && rdesc [ 111 ] == 0x03 ) { hid_info ( hdev, ""fixing <S2SV_blank> up <S2SV_blank> Sunplus <S2SV_blank> Wireless <S2SV_blank> Desktop <S2SV_blank> report <S2SV_blank> descriptor\\n"" ) ; rdesc [ 105 ] = rdesc [ 110 ] = 0x03 ; rdesc [ 106 ] = rdesc [ 111 ] = 0x21 ; }",0
434,"<S2SV_ModStart> + 2 ) ; if ( bodyLength > tot_len - mac_header_len ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Invalid <S2SV_blank> EAPOL <S2SV_blank> packet <S2SV_blank> length"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_INVALID_DATA ; }",0
435,<S2SV_ModStart> & I8042_STR_AUXDATA )? I8042_AUXDATA_ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
436,"<S2SV_ModStart> ( er ) { if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; } } else { if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; } } else { if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; } } else { if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; } }",0
437,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> udf_translate_to_linux ( uint8_t <S2SV_ModStart> * udfName, int udfLen, uint8_t * fidName, int fidNameLen ) { int index, newIndex = 0, needsCRC = 0 ; uint8_t curr ; if ( udfName [ udfLen - 1 ] == '/' || udfName [ udfLen - <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
438,"<S2SV_ModStart> void count_segs_sb ( const VP9_COMMON * cm, <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd>, int * <S2SV_ModStart> BLOCK_SIZE bsize ) { <S2SV_ModEnd> int bw, <S2SV_ModStart> = num_8x8_blocks_wide_lookup [ mi <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> ] ; bh = num_8x8_blocks_high_lookup [ mi <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> ] ; } else if ( bw < bs && bh < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, hbs, mi_row, mi_col ) ; } else if ( bw < bs && bh < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, hbs, mi_row + hbs, mi_col ) ; count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, hbs, mi_row + hbs,",0
439,<S2SV_ModStart> break ; if (! ( c -> flags & CLIENT_CLOSE_AFTER_REPLY ) && clientsArePaused ( ),0
440,<S2SV_ModStart> = EXT4_GET_BLOCKS_CREATE ; if ( mpd -> b_state & ( 1 << BH_Unwritten ) ) get_blocks_flags |= EXT4_GET_BLOCKS_DELALLOC_RESERVE,0
441,"<S2SV_ModStart> * s ; if ( siglen < 0 ) { ret = - EINVAL ; goto err ; } <S2SV_ModStart> siglen ) ; if ( d2i_DSA_SIG ( & s, & sigbuf, siglen ) == NULL ) goto err ; ret = DSA_do_verify ( dgst, dgst_len, s, dsa ) ; err : DSA_SIG_free ( s ) ; return ( ret ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
442,"<S2SV_ModStart> NULL ) ; rv = gdImageGifCtx <S2SV_ModEnd> ( im, <S2SV_ModStart>, out ) ; out -> gd_free ( out ) ;",0
443,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
444,"<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> ai_flags = 0 <S2SV_ModStart>, handle, & ai_flags, & ai_family, & ai_socktype, & ai_protocol, & ai_addrlen, NULL, & canonnamelen, NULL )!= OE_OK ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval == - 1 || oe_errno!= OE_ENAMETOOLONG ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval == - 1 || oe_errno!= OE_ENAMETOOLONG ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval == - 1 || oe_errno!= OE_ENAMETOOLONG ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval == - 1 || oe_errno!= OE_ENAME",0
445,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token,",0
446,<S2SV_ModStart> image_height = ( int ) iw_get_ui16le ( & rctx -> rbuf [ 5 ] ) ; rctx -> interlaced = ( int ) ( ( rctx -> rbuf [ 8 ] >> 6 ) & 0x01 ) ; has_local_ct = ( int ) ( ( rctx -> rbuf [ 8 ] >> 7 ) & 0x01 ) ; if ( has_local_ct ) { local_ct_size = ( int ) ( ( rctx -> rbuf [ 8 ] >> 6 ) & 0x07 ) ; } if ( has_local_ct ) { local_ct_size = ( int ) ( rctx -> rbuf [ 8 ] >> 6 ) & 0x07 ) ; } if ( has_local_ct ) { local_ct_size = ( int ) ( rctx -> rbuf [ 8 ] & 0x07 ) ; } if ( has_local_ct ) { local_ct_size = ( int ) ( rctx -> rbuf [ 8 ] >> 6 ) & 0x07 ) ; } if ( has_local_ct ) { local_ct_size = ( int ) ( rctx -> rbuf [ 8 ] & 0x07 ),0
447,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
448,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int set_registers ( pegasus_t * pegasus, __u8 indx, __u8 <S2SV_ModEnd> * data ) <S2SV_ModStart> * data ) { int ret ; ret = usb_control_msg ( pegasus -> usb, <S2SV_ModEnd> PEGASUS_REQ_SET_REGS, PEGASUS_REQT_WRITE <S2SV_ModStart>, indx, <S2SV_ModEnd> data, size <S2SV_ModStart> ret ) ; if ( ret < 0 ) netif_dbg ( pegasus, drv, pegasus -> net, ""%s <S2SV_blank> returned <S2SV_blank> %d\\n"", __func__, ret ) ;",0
449,"<S2SV_ModStart> asdl_seq * body <S2SV_ModEnd>, PyArena * <S2SV_ModStart> = body ; p -> v. Module. arena = arena ;",0
450,<S2SV_ModStart> destroy_list ) ; sas_destruct_port <S2SV_ModEnd> ( dev -> <S2SV_ModStart> DISCE_DESTRUCT ) ; sas_destruct_port <S2SV_ModEnd> ( dev ->,0
451,"<S2SV_ModStart> src, int64_t <S2SV_ModEnd> ts_start, int64_t <S2SV_ModStart> >> 4 ; # else int row, col, active_end ; # endif <S2SV_ModStart> -> write_idx ) ; # if USE_PARTIAL_COPY if ( ctx -> max_sz == 1 && active_map &&! flags ) { row = 0 ; col = 0 ; while ( 1 ) { for ( ; col < mb_cols ; ++ col ) { if ( active_map [ col ] ) break ; } active_map += mb_cols ; } } else { vpx_copy_and_extend_frame ( src, & buf -> img, row << 4, col << 4, 16, ( active_end - col ) << 4 ) ; } } else { vpx_copy_and_extend_frame ( src, & buf -> img ) ; } # else vpx_copy_and_extend_frame ( src, & buf -> img ) ; # endif buf -> ts_start = ts_start ; buf -> ts_end = ts_end ; buf -> flags = flags ; return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
452,<S2SV_ModStart> cdev ) ; kfree ( fud ) ;,0
453,"<S2SV_ModStart> return code ; code = verify_s4u_x509_user_checksum ( context, tgs_subkey? tgs_subkey : tgs_session, & req_data, request -> nonce, * s4u_x509_user ) ; if ( code ) { * status = ""INVALID_S4U2SELF_CHECKSUM"" ; krb5_free_pa_s4u_x509_user ( context, * s4u_x509_user ) ; * s4u_x509_user = NULL ; return KRB5KDC_ERR_C_PRINCIPAL_UNKNOWN ; }",0
454,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> scsi_disk_emulate_command ( SCSIDiskReq <S2SV_ModStart> outbuf ) ; if ( buflen < 0 ) goto illegal_request ;,0
455,<S2SV_ModStart> cur_pic. field_picture || s -> avctx -> profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO || s -> avctx -> profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO,0
456,"<S2SV_ModStart> { if ( hdr_off || sg || off ) { struct rds_header * hdr = & rm -> m_inc. i_hdr ; <S2SV_ModStart> 0 ) ; hdr -> h_len = sizeof ( struct rds_header ) + RDS_CONG_MAP_BYTES ; } else if ( hdr_off || sg || off ) { rds_inc_init ( & rm -> m_inc, conn, conn -> c_laddr, conn -> c_faddr, hdr ) ; rds_inc_init ( & rm -> m_inc, conn, conn -> c_laddr, conn -> c_faddr ) ; rds_recv_incoming ( conn, conn -> c_laddr, conn -> c_faddr, & rm -> m_inc, GFP_KERNEL, KM_USER0 ) ; rds_send_drop_acked ( conn, be64_to_cpu ( rm -> m_inc. i_hdr. h_sequence ), NULL ) ; rds_inc_put ( & rm -> m_inc ) ; return 0 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
457,"<S2SV_ModStart> ) ) { if ( grub_disk_read_error ( data -> disk, buf, LOG2_EXT2_BLOCK_SIZE ( data ), 0, buf ) ) { if ( grub_disk_read_error ( data -> disk, buf, LOG2_EXT2_BLOCK_SIZE ( data ), 0, buf ) ) { if ( grub_disk_read_error ( data -> disk, buf, LOG2_EXT2_BLOCK_SIZE ( data ), 0, buf ) ) { if ( grub_disk_read_error ( data -> disk, buf, LOG2_EXT2_BLOCK_SIZE ( data ), 0, buf ) ) { if ( grub_disk_read_error ( data -> disk, buf, LOG2_EXT2_BLOCK_SIZE ( data ), 0, buf ) ) { if ( grub_disk_read_error ( data -> disk, buf, LOG2_EXT2_BLOCK_SIZE ( data ), 0, buf ) ) { if ( grub_disk_read_error ( data -> disk, buf, LOG2_EXT2_BLOCK_SIZE ( data ), 0, buf )",0
458,<S2SV_ModStart> ; if ( key -> state == KEY_IS_UNINSTANTIATED <S2SV_ModEnd> ) { ret,0
459,"<S2SV_ModStart> ND_TCHECK2 ( * mh <S2SV_ModEnd>, hlen + <S2SV_ModStart> ND_TCHECK2 ( * mh <S2SV_ModEnd>, hlen + <S2SV_ModStart> ND_TCHECK2 ( * mh <S2SV_ModEnd>, hlen + <S2SV_ModStart> ND_TCHECK2 ( * mh <S2SV_ModEnd>, hlen + <S2SV_ModStart> ND_PRINT ( ( ndo, "" <S2SV_blank> %s <S2SV_blank> Init <S2SV_blank> Cookie=%08x:%08x"", type == IP6M_HOME_TEST_INIT? ""Home"" : ""Care-of"", EXTRACT_32BITS ( & bp [ hlen ] ), EXTRACT_32BITS ( & bp [ hlen + 4 ] ) ) ) ; } if ( ndo -> ndo_vflag ) { ND_TCHECK2 ( * mh, hlen + 8 ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> %s <S2SV_blank> Init <S2SV_blank> Cookie=%08x:%08x"", type == IP6M_HOME_TEST_INIT? ""Home"" : ""Care-of"", EXTRACT_32BITS ( & bp [ hlen ] ), EXTRACT_32BITS ( & bp [ hlen + 4 ] ) ) ; }",0
460,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
461,"<S2SV_ModStart> = hmi_data ; if ( hmi_size < 18 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_TOO_MANY_HMI_DATA, ""Not <S2SV_blank> enough <S2SV_blank> data <S2SV_blank> for <S2SV_blank> HMI-MIDISONG061595"" ) ; return NULL ; } <S2SV_ModStart> channel ; } if ( hmi_size < 228 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_TOO_MANY_HMI_DATA, ""Not <S2SV_blank> enough <S2SV_blank> data <S2SV_blank> for <S2SV_blank> HMI-MIDISONG061595"" ) ; return NULL ; } <S2SV_ModStart> hmi_data, hmi_size, ""HMI-MIDISONG061595"", 18 ) ; if ( memcmp ( hmi_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_TOO_MANY_HMI_DATA, ""Not <S2SV_blank> enough <S2SV_blank> data <S2SV_blank> for <S2SV_blank> HMI-MIDISONG061595"" ) ; return",0
462,<S2SV_ModStart> -> id ; * addr = ( struct sockaddr_hci * ) & sk -> sk_omem_alloc ; * addr = ( struct sockaddr_hci * ) & sk -> sk_omem_alloc ; * addr = ( struct sockaddr_hci * ) & sk -> sk_omem_alloc ; if (! * addr ) { * addr = ( struct sockaddr_hci * ) & sk -> sk_omem_alloc ; * addr = 0 ; * addr = ( struct sockaddr_hci * ) & sk -> sk_omem_alloc ; * addr = ( struct sockaddr_hci * ) & sk -> sk_omem_alloc ; * addr = ( struct sockaddr_hci * ) & sk -> sk_omem_alloc ; if (! * addr ) { * addr = ( struct sockaddr_hci * ) & sk -> sk_omem_alloc ; * addr = 0 ; * addr = ( struct sockaddr_hci * ) & sk -> sk_omem_alloc ; * addr = ( struct sockaddr_hci * ) & sk -> sk_omem_alloc ; * addr = ( struct sock,0
463,<S2SV_ModStart> -> i_iget5_offset ; fh16 [ 3 ] = ( __u16 ) ei -> i_iget5_parent -> i_iget5_block ; fh16 [ 3 ] = ( __u16 ) ei -> i_iget5_parent -> i_iget5_offset ; fh32 [ 4 ] = ei -> i_iget5_parent -> i_iget5_offset - ei -> i_iget5_parent -> i_iget5_parent -> i_iget5_block ; fh16 [ 3 ] = ( __u16 ) ei -> i_iget5_parent -> i_iget5_offset - ei -> i_iget5_parent -> i_iget5_parent -> i_iget5_parent -> i_iget5_parent -> i_iget5_parent -> i_iget5_parent -> i_iget5_parent -> i_iget5_parent -> i_iget5_parent -> i_iget5_offset - ei -> i_iget5_parent -> i_iget5_parent -> i_iget5_parent,0
464,"<S2SV_ModStart> status = ""CLIENT <S2SV_blank> KEY <S2SV_blank> EXPIRED"" ; if ( vague_errors ) return ( KRB_ERR_GENERIC ) ; else return ( KDC_ERR_KEY_EXP ) ; } if ( isflagset ( server. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) ) { * status = ""REQUIRED <S2SV_blank> PWCHANGE"" ; return ( KDC_ERR_KEY_EXP ) ; } if ( isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( server. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) ) { * status = ""REQUIRED <S2SV_blank> PWCHANGE"" ; return ( KDC_ERR_KEY_EXP ) ; } if ( isflagset ( server. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) ) { * status = ""REQUIRED <S2SV_blank> PWCHANGE"" ; return ( KDC",0
465,"<S2SV_ModStart> case BPF_SUB : if ( signed_add_overflows ( dst_reg -> umin_value, umin_val ) || signed_add_overflows ( dst_reg -> umax_value, umax_val ) || signed_add_overflows ( dst_reg -> smin_value, smin_val ) || signed_add_overflows ( dst_reg -> smax_value, smax_val ) || signed_add_overflows ( dst_reg -> umin_value, umin_val ) || signed_add_overflows ( dst_reg -> umax_value, umax_val ) || signed_add_overflows ( dst_reg -> smin_value, smin_val ) || signed_add_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; }",0
466,"<S2SV_ModStart>. sharpness ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; const int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; if ( cm -> frame_type == KEY_FRAME ) filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; else filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; if ( cm -> frame_type == KEY_FRAME ) filt_guess -= 4 ; lf -> filter_level = clamp ( filt_guess, min_filter_level, max_filter_level ) ; } else { search_filter_level ( sd, cpi, method == LPF_PICK_FROM_Q <S2SV_ModEnd> ) ; }",0
467,<S2SV_ModStart> } break ; case BTA_DM_DISABLE_EVT : { BD_NAME bdname ; bt_status_t status ; status = btif_storage_get_adapter_property ( & bdname ) ; if ( status == BT_STATUS_SUCCESS ) { BT_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } else { BT_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } # if defined ( BLE_INCLUDED ) && ( BLE_INCLUDED == TRUE ) ) BTA_DmBleConfigLocalPrivacy ( BLE_LOCAL_PRIVACY_ENABLED ) ; if ( status == BT_STATUS_SUCCESS ) { BT_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } else { BT_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } # if defined ( BLE_INCLUDED ) && ( BLE_INCLUDED == TRUE ) ) BTA_DmBleConfigLocalPriv,0
468,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
469,<S2SV_ModStart> : { int <S2SV_ModEnd> a = getnum,0
470,<S2SV_ModStart> void usage_exit ( void,1
471,<S2SV_ModStart> == 3 ) { unsigned int * o_row_count = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_element_count + 1 ) ) ; * o_row_count = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_column_count + 1 ) ) ; * o_values = ( double * ) malloc ( sizeof ( double ) * ( * o_element_count + 1 ) ) ; * o_row_count = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_column_count + 1 ) ) ; * o_values = ( double * ) malloc ( sizeof ( double ) * ( * o_element_count + 1 ) ) ; * o_row_count = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o,0
472,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
473,"<S2SV_ModStart> vpx_codec_err_t res ; unsigned int alg_priv_size ; <S2SV_ModStart> = VPX_CODEC_ERROR ; else alg_priv_size = ctx -> priv -> alg_priv_size ; <S2SV_ModStart> dec. decode ( alg_priv_size, data, data_sz, user_priv, deadline ) ; if ( alg_priv_size!= ctx -> priv -> alg_priv_size ) res = VPX_CODEC_INVALID_PARAM ; else res = VPX_CODEC_INVALID_PARAM ; else if ( alg_priv_size!= ctx -> priv -> alg_priv_size ) res = VPX_CODEC_INVALID_PARAM ; else if ( alg_priv_size!= ctx -> priv -> alg_priv_size ) res = VPX_CODEC_INVALID_PARAM ; else if ( alg_priv_size!= ctx -> priv -> alg_priv_size ) res = VPX_CODEC_INVALID_PARAM ; else { res = ctx -> iface -> dec. decode ( alg_priv -> alg_priv, data, data_sz, user_priv, deadline ) ; } return SAVE_STATUS ( ctx,",0
474,"<S2SV_ModStart> ; if ( strchr ( value, ',' ) ) { av_log ( s, AV_LOG_WARNING, ""Missing <S2SV_blank> PPS <S2SV_blank> in <S2SV_blank> sprop-parameter-sets, <S2SV_blank> ignoring\\n"" ) ; return 0 ; } if ( strchr ( value, ',' ) ) { av_log ( s, AV_LOG_WARNING, ""Missing <S2SV_blank> PPS <S2SV_blank> in <S2SV_blank> sprop-parameter-sets, <S2SV_blank> ignoring\\n"" ) ; return 0 ; } par -> extradata_size = 0 ; av_freep ( & par -> extradata ) ; ret = ff_h264_parse_sprop_parameter_sets ( s, & par -> extradata, & par -> extradata_size, value ) ; av_log ( s, AV_LOG_DEBUG, ""Extradata <S2SV_blank> set <S2SV_blank> to <S2SV_blank> %p <S2SV_blank> (size: <S2SV_blank> %d)\\n"", par -> extradata, par -> extradata_size ) ; return ret ; }",0
475,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> isofs_read_inode ( struct <S2SV_ModStart> inode ) ; if ( de -> name_len > ISOFS_MAX_DE_NAME_LEN ) { if ( de -> name_len > ISOFS_MAX_DE_NAME_LEN ) { if ( de -> name_len > ISOFS_MAX_DE_NAME_LEN ) { if ( de -> name_len > ISOFS_MAX_DE_NAME_LEN ) { if ( de -> name_len > ISOFS_MAX_DE_NAME_LEN ) { if ( de -> name_len > ISOFS_MAX_DE_NAME_LEN ) { if ( de -> name_len > ISOFS_MAX_DE_NAME_LEN ) { if ( de -> name_len > ISOFS_MAX_DE_NAME_LEN ) { if ( de -> name_len > ISOFS_MAX_DE_NAME_LEN ) { if ( de -> name_len > ISOFS_MAX_DE_NAME_LEN ) { if ( de -> name_len > ISOFS_MAX_DE_NAME_LEN ) { inode,0
476,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> No <S2SV_blank> extension <S2SV_blank> for <S2SV_blank> %s\\n"", filename ) ; return ; }",0
477,"<S2SV_ModStart> pptr ++ ) ; if ( source_address_length < 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size!"", source_address_length ) ) ; break ; } <S2SV_ModStart> ( ndo, "" <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size!"", source_address_length ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size!"", source_address_length ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size!"", source_address_length ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size:"", source_address_length ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, "" <S2SV_blank> length",0
478,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> = sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> = sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> = sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> = sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> = sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> = sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> = sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f",0
479,<S2SV_ModStart> } else { if (! kvm_arm_pmu_v3_ready ( vcpu ) ) return false ; <S2SV_ModStart> } else { if (! kvm_arm_pmu_v3_ready ( vcpu ) ) return false ; <S2SV_ModStart> } else { if (! kvm_arm_pmu_v3_ready ( vcpu ) ) return false ; <S2SV_ModStart> } else { if (! kvm_arm_pmu_v3_ready ( vcpu ) ) return false ;,0
480,"<S2SV_ModStart> case IS_STRING : if ( Z_TYPE_PP ( zval_affine_elem )!= IS_DOUBLE ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type <S2SV_blank> for <S2SV_blank> element <S2SV_blank> %i"", i ) ; RETURN_FALSE ; } <S2SV_ModStart> case IS_DOUBLE : if ( Z_TYPE_PP ( zval_affine_elem )!= IS_LONG ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type <S2SV_blank> for <S2SV_blank> element <S2SV_blank> %i"", i ) ; RETURN_FALSE ; } <S2SV_ModStart> case IS_LONG : if ( Z_TYPE_PP ( zval_affine_elem )!= IS_DOUBLE ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type <S2SV_blank> for <S2SV_blank> element <S2SV_blank> %i"", i ) ; RETURN_FALSE ; } break ; default : php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type <S2SV_blank> for <S2SV_blank> element <S2SV_blank> %i"", i ) ; RETURN_FALSE ; }",0
481,<S2SV_ModStart> self ) { if ( self -> dict ),0
482,<S2SV_ModStart> SQL_DROP ) ; sqlite3_free_string <S2SV_ModEnd> ( szSepLine ) <S2SV_ModStart> SQL_DROP ) ; sqlite3_free_string <S2SV_ModEnd> ( szSepLine ) <S2SV_ModStart> SQL_DROP ) ; sqlite3_free_string <S2SV_ModEnd> ( szSepLine ) <S2SV_ModStart> SQL_DROP ) ; sqlite3_free_string <S2SV_ModEnd> ( szSepLine ) <S2SV_ModStart> SQL_DROP ) ; sqlite3_free_string <S2SV_ModEnd> ( szSepLine ) <S2SV_ModStart> SQL_DROP ) ; sqlite3_free_string <S2SV_ModEnd> ( szSepLine ) <S2SV_ModStart> SQL_DROP ) ; sqlite3_free_string <S2SV_ModEnd> ( szSepLine ) <S2SV_ModStart> SQL_DROP ) ; sqlite3_free_string <S2SV_ModEnd> ( szSepLine ) <S2SV_ModStart> SQL_DROP ) ; sqlite3_free_string <S2SV_ModEnd> ( szSepLine ) <S2SV_ModStart> SQL_DROP ) ; sqlite3_free_string <S2SV_ModEnd> ( szSepLine ),0
483,<S2SV_ModStart> - EFAULT ; if ( offset + len > PAGE_SIZE ) return - EINVAL ;,0
484,"<S2SV_ModStart> argv [ ] ) { <S2SV_ModEnd> printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2015 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\n <S2SV_blank> This <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\\n <S2SV_blank> There <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness <S2SV_blank> for <S2SV_blank> a\\n\\\n <S2SV_blank> particular <S2SV_blank> purpose.\\n\\\n"" <S2SV_ModStart> ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2015 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\n <S2SV_blank> This <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\\n <S2SV_blank> There <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness <S2SV_blank> for <S2SV_blank> a\\n\\\n <S2SV_blank> particular <S2SV_blank> purpose.\\n"" <S2SV_ModEnd> ) ; exit",0
485,"<S2SV_ModStart> = tty_port_tty_set_params ( & port -> port, & dummy, sizeof ( dummy ) ) ; if ( serial -> interface -> num_ports < 1 ) { retval = - ENODEV ; goto error_get_interface ; } <S2SV_ModStart> = tty_port_tty_set_params ( & port -> port, & dummy, sizeof ( dummy ) ) ; if ( retval ) { retval = - ENODEV ; goto error_get_interface ; } retval = tty_port_tty_set_params ( & port -> port, & dummy, sizeof ( dummy ) ) ; if ( retval ) { pr_err ( ""No <S2SV_blank> USB <S2SV_blank> device <S2SV_blank> connected <S2SV_blank> to <S2SV_blank> ttyUSB%i\\n"", co -> index ) ; goto error_get_interface ; } if ( doflow ) { tty_port_tty_set_params ( & port -> port, & dummy, sizeof ( dummy ) ) ; goto error_get_interface ; } retval = tty_port_tty_set_params ( & port -> port, & dummy, sizeof ( dummy ) ) ; if ( retval ) { pr_err ( ""No <S2SV_blank> USB <S2SV_blank> device <S2SV_blank> connected <S2SV_blank> to <S2SV_blank> ttyUSB%",0
486,<S2SV_ModStart>. type = perf_event_context_type <S2SV_ModEnd> ; cpuctx -> <S2SV_ModStart> ctx. type = perf_event_context_type <S2SV_ModEnd> ; __perf_cpu_hrtimer_init (,0
487,"<S2SV_ModStart> len, struct iovec * iovec, size_t nr_segs_used <S2SV_ModStart> = 1 ; nr_segs_used = nr_segs_used <S2SV_ModEnd> ; return 0 <S2SV_ModStart> = 1 ; nr_segs_used = nr_segs_used <S2SV_ModEnd> ; } <S2SV_null>",0
488,"<S2SV_ModStart> ext4_group_t flex_group ; unsigned <S2SV_ModStart> sbi -> s_log_groups_per_flex ; unsigned <S2SV_ModEnd> size_t size ; <S2SV_ModStart> sbi -> s_log_groups_per_flex ; if ( sbi -> s_groups_count < 2 ) { sbi -> s_log_groups_per_flex = 0 ; return 1 ; } groups_per_flex = sbi -> s_es -> s_log_groups_per_flex ; if ( groups_per_flex < 2 ) { sbi -> s_log_groups_per_flex = 0 ; return 1 ; } flex_group_count = ( sbi -> s_groups_count + groups_per_flex - 1 ) + ( ( le16_to_cpu ( sbi -> s_es -> s_reserved_gdt_blocks ) + 1 ) << EXT4_DESC_PER_BLOCK_BITS ( sb ) ) ; size = ext4_kvzalloc ( size, GFP_KERNEL ) ; if ( sbi -> s_flex_groups == NULL ) { ext4_msg ( sb, KERN_ERR, ""not <S2SV_blank> enough <S2SV_blank>",0
489,<S2SV_ModStart> ; if ( unlikely ( chunk_length > SCTP_MAX_CHUNK_SIZE ) ) return 0 ; if (,0
490,"<S2SV_ModStart> ; for ( ; a && i < count ; ++ i ) { <S2SV_ModEnd> n = cJSON_CreateString <S2SV_ModStart> ) ; if (! a ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; }",0
491,"<S2SV_ModStart> (! EmptyString <S2SV_ModEnd> ( cli_sslclifp ( <S2SV_ModStart> cptr ) ) ) sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> SASL"" <S2SV_ModEnd>, realhost, <S2SV_ModStart> ) ) ) sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> SASL"" <S2SV_ModEnd>, realhost, <S2SV_ModStart> ( first ) { if ( cli_saslcookie ( cptr ) ) { do { cli_saslcookie ( cptr ) = ircrandom ( ) & 0x7fffffff ; } while (! cli_saslcookie ( cptr ) ) ; } while (! EmptyString ( cli_sslclifp ( cptr ) ) sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> SASL, realhost, sizeof ( realhost ) ) ; if (! EmptyString ( cli_sslclifp ( cptr ) ) ) sendcmdto_one ( & me, CMD_SASL, acptr,",0
492,<S2SV_ModStart> # endif # if HAVE_FAST_UNALIGNED if ( ( long ) src1 & ( sizeof ( long ) - 1 ) ) { for ( i = 0 ; i <= w - sizeof ( long ) ; i += sizeof ( long ) ) { long a = * ( long * ) ( src1 + i ) ; long b = * ( long * ) ( src2 + i ) ; * ( long * ) ( dst + i ) = ( ( a | pb_80 ) - ( b & pb_80 ) ) ^ ( ( a | pb_80 ) & pb_7f ) ) ; * ( long * ) ( dst + i ) = ( ( a | pb_80 ) - ( b & pb_80 ) ) ; } else { long a = * ( long * ) ( src1 + i ) ; long b = * ( long * ) ( src2 + i ) ; * ( long * ) ( dst + i ) = ( ( a | pb_80 ) - ( b & pb_80 ) ) ^ ( ( a | pb_80 ) & pb_80 ) ; },0
493,<S2SV_ModStart> -> forward_matches ; if ( match_length > callback_args -> data_size ) { return ERROR_INVALID_DATA ; },0
494,<S2SV_ModStart>! no_port_forwarding_flag && ( <S2SV_ModStart>! disable_forwarding ) || ( ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE <S2SV_ModEnd> )!= 0,0
495,"<S2SV_ModStart> { if ( <S2SV_ModEnd> bitstream_read_bit ( bc <S2SV_ModStart> bc ) ) { int r ; length ++ ; r = smacker_decode_tree ( bc, hc, prefix, length ) ; if ( r ) return r ; return smacker_decode_tree ( bc, hc, prefix | ( 1 << ( length - 1 ) ), length ) ; if ( r ) return r ; return smacker_decode_tree ( bc, hc, prefix | ( 1 << ( length - 1 ) ), length ) ; } else { int r ; r = smacker_decode_tree ( bc, hc, prefix, length ) ; if ( r ) return r ; length ++ ; r = smacker_decode_tree ( bc, hc, prefix, length ) ; if ( r ) return r ; return smacker_decode_tree ( bc, hc, prefix, length ) ; if ( r ) return r ; return smacker_decode_tree ( bc, hc, prefix, length ) ; }",0
496,"<S2SV_ModStart> } else { m -> msg_name = kmalloc ( m -> msg_namelen, GFP_KERNEL ) ; if (! m -> msg_name ) m -> msg_name = kmalloc ( m -> msg_namelen, GFP_KERNEL ) ; if (! m -> msg_name ) m -> msg_name = kmalloc ( m -> msg_namelen, GFP_KERNEL ) ; if (! m -> msg_name ) m -> msg_name = kmalloc ( m -> msg_namelen, GFP_KERNEL ) ; if (! m -> msg_name ) m -> msg_name = kmalloc ( m -> msg_namelen, GFP_KERNEL ) ; if (! m -> msg_name ) m -> msg_name = kmalloc ( m -> msg_namelen, GFP_KERNEL ) ; if (! m -> msg_name ) m -> msg_name = kmalloc ( m -> msg_namelen, GFP_KERNEL ) ;",0
497,"<S2SV_ModStart> * type_ignores ; int res ; <S2SV_ModStart>, & PyId_body, & tmp ) ; if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""Module <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> must <S2SV_blank> be <S2SV_blank> a <S2SV_blank> list, <S2SV_blank> not <S2SV_blank> a <S2SV_blank> %.200s"", tmp -> ob_type -> tp_name ) ; goto failed ; } len = PyList_GET_SIZE ( tmp ) ; body = _Ta3_asdl_seq_new ( len, arena ) ; if ( body == NULL ) { PyErr_SetString ( PyExc_RuntimeError, ""Module <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> changed <S2SV_blank> size <S2SV_blank> during <S2SV_blank> iteration"" ) ; goto failed ; } type_ignores = _Ta3_asdl_seq_new ( len, arena ) ; if ( type_ignores == NULL ) { type_ignores = _Ta3_asdl_seq_new ( len, arena ) ; if ( type_ignores == NULL ) { PyErr_SetString ( PyExc_RuntimeError, ""Module <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> changed <S2SV_blank> size <S2SV_blank> during",0
498,<S2SV_ModStart> int hstartcol ; if ( bufsize < QMFB_SPLITBUFSIZE ) { abort ( ) ; } <S2SV_ModEnd> if ( numrows <S2SV_ModStart> ) >> 1 ; n = numrows - hstartcol ; srcptr = & a [ ( 1 - parity ) * stride ] ; dstptr = & a [ ( 2 - parity ) * stride ] ; srcptr = & a [ ( 2 - parity ) * stride ] ; n = numrows - m - (! parity ) ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m,0
499,"<S2SV_ModStart> ; iwl_sta_ucode_deactivate ( priv <S2SV_ModEnd>, sta_id )",0
500,"<S2SV_ModStart> ; log_file = fopen_safe <S2SV_ModEnd> ( file_name,",1
501,"<S2SV_ModStart> ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /[M-N]iss/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""misissippi\\tmisissippi.misissippi\\nmisissippi"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /[M-N]iss/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""misissippi\\tmisissippi.misissippi\\nmisissippi"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /[M-N]iss/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""misissippi\\tmisissippi.misissippi\\nmisissippi"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /[M-N]iss/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""misissippi\\tmisissippi.misissippi\\nmisiss",0
502,"<S2SV_ModStart> ( hashbin -> hb_type & HB_LOCK ) { spin_lock_irqsave ( & hashbin -> hb_spinlock, flags, hashbin_lock_depth ++ ) ; } for ( i = 0 ; i < HASHBIN_SIZE ; i ++ ) { queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; while ( queue ) { if ( free_func ) ( queue ) ; queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; } } queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; while ( queue ) { if ( free_func ) ( queue ) ; queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; } } hashbin -> hb_current = NULL ; hashbin -> magic = ~ HB_M",0
503,"<S2SV_ModStart> EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_READONLY ) &&! ( mnt_flags & MNT_READONLY ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_READONLY ) &&! ( mnt_flags & MNT_READONLY ) ) { return - EPERM ; } err = security_sb_remount ( sb, data ) ; if ( err ) return err ; up_write ( & sb -> s_umount ) ; if ( flags & MS_BIND ) err = change_mount_flags ( path -> mnt, flags ) ; else if (! capable ( CAP_SYS_ADMIN ) ) err = - EPERM ; else if (! capable ( CAP_SYS_ADMIN ) ) err = - EPERM ; else if (! capable ( CAP_SYS_ADMIN ) ) err = - EPERM ; else if (! capable ( CAP_SYS_ADMIN ) ) err = - EPERM ; else err = do_remount_sb ( sb, flags, data, 0 ) ; if",0
504,<S2SV_ModStart> * skb ; struct sockaddr_ll * sll = msg -> msg_name <S2SV_ModStart> msg -> msg_namelen = 0 ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_name_len = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_name_len = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ; msg -> msg_namelen = sizeof ( struct virtio_net_hdr ) ;,0
505,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
506,<S2SV_ModStart> if ( serial -> num_ports < 2 || serial -> port [ 1 ] -> bulk_out_endpointAddress == 0 ||! serial -> port [ 0 ] -> bulk_out_endpointAddress,0
507,"<S2SV_ModStart> qmode ) { if ( total_samples == - 1 ) { error_line ( ""total_samples <S2SV_blank> = <S2SV_blank> %lld, <S2SV_blank> so <S2SV_blank> rf64"", total_samples ) ; do_rf64 = 1 ; write_junk = 0 ; } else if ( debug_logging_mode ) error_line ( ""total_samples <S2SV_blank> = <S2SV_blank> %lld, <S2SV_blank> so <S2SV_blank> riff"", total_samples ) ; <S2SV_ModStart> ds64_chunk ; } if ( do_rf64 ) { error_line ( ""total_samples <S2SV_blank> = <S2SV_blank> %lld, <S2SV_blank> so <S2SV_blank> rf64"", total_samples ) ; do_rf64 = 1 ; } else { if ( debug_logging_mode ) error_line ( ""total_samples <S2SV_blank> = <S2SV_blank> %lld, <S2SV_blank> so <S2SV_blank> rf64"", total_samples ) ; do_rf64 = 0 ; } else { if ( debug_logging_mode ) error_line ( ""total_samples <S2SV_blank> = <S2SV_blank> %lld, <S2SV_blank> so <S2SV_blank> rf64"", total_samples ) ; do_rf64 = 1 ; }",0
508,"<S2SV_ModStart> ) ; } else { err = <S2SV_ModEnd> verify_compat_iovec ( msg_sys <S2SV_ModStart>, & addr, VERIFY_READ ) ; if ( err < 0 ) goto out_freeiov ; total_len = err ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; err = ( nosec? sock_recvmsg_nolock : sock_recvmsg ) ( sock, msg, MSG_DONTWAIT ) ; if ( err < 0 ) goto out_freeiov ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; err = ( nosec? sock_recvmsg_nolock : sock_recvmsg ) ( sock, msg,",0
509,<S2SV_ModStart> inode ) ; struct metapath * mp2 = metapath ( mp ) ; struct buffer_head * dibh = mp -> mp_dibh [ 0 <S2SV_ModEnd> ] ; u64 <S2SV_ModStart> unsigned ptrs_per_blk ; struct gfs2_dinode * ip = GFS2_I ( inode ) ; struct gfs2_dinode * ip2 = GFS2_I ( inode ) ; struct gfs2_dinode * ip2 = ip -> i_disk ; struct gfs2_dinode * ip2 = GFS2_I ( inode ) ; struct gfs2_dinode * ip2 = GFS2_I ( inode ) ; struct gfs2_dinode * ip2 = GFS2_I ( inode ) ; struct gfs2_dinode * ip2 = GFS2_I ( inode ) ; struct gfs2_dinode * ip2 = ip2_dinode ( inode ) ; struct gfs2_dinode * ip2 = GFS2_I ( inode ) ; struct gfs2_dinode * ip2 = GFS2,0
510,"<S2SV_ModStart> codec -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart>, input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } if ( input -> use_i420 ) { fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } else { fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } if ( input -> use_i420 ) { fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } else { fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""Y",0
511,"<S2SV_ModStart> ; PROFILER_ENTER ( priv <S2SV_ModEnd> -> prof_nsc_rle_decompress_data ) <S2SV_ModStart> -> priv -> prof_nsc_rle_decompress_data ) <S2SV_ModStart> -> priv -> prof_nsc_decode ) <S2SV_ModStart> -> decode ) ; if (! freerdp_image_copy ( pDstData, DstFormat, nDstStride, nXDst, nYDst, width, height, context -> BitmapData, PIXEL_FORMAT_BGRA32, 0, 0, 0, NULL, flip ) ) return FALSE ; if (! freerdp_image_copy ( pDstData, DstFormat, nDstStride, nXDst, nYDst, width, height, context -> BitmapData, PIXEL_FORMAT_BGRA32, 0, 0, 0, 0, NULL, flip ) ) return FALSE ; if (! freerdp_image_copy ( pDstData, DstFormat, nDstStride, nXDst, nYDst, width, height, context -> BitmapData, PIXEL_FORMAT_BGRA32, 0, 0, 0, 0, 0, 0, 0,",0
512,"<S2SV_ModStart> ; if ( value == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> value <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } value = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; value = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; if ( value == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> value <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> are <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } value = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; value = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; if ( value == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> value <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a",0
513,"<S2SV_ModStart> 0 ) { if ( safe_copy_file ( ""/etc/skel/.zshrc"", fname, u, g, 0644 ) == 0 ) { fs_logger ( ""clone <S2SV_blank> /etc/skel/.zshrc"" ) ; } <S2SV_ModStart> 0 ) { if ( safe_copy_file ( ""/etc/skel/.cshrc"", fname, u, g, 0644 ) == 0 ) { fs_logger ( ""clone <S2SV_blank> /etc/skel/.cshrc"" ) ; } } else { FILE * fp = fopen ( fname, ""w"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } free ( fname ) ; } else if (! arg_shell_none && strcmp ( cfg. shell, ""/usr/bin/csh"" ) == 0 ) { if ( asprintf ( & fname, ""%s/.csh"", homedir ) == - 1 ) errExit ( ""asprintf"" ) ; struct stat s ; if ( stat ( fname, & s ) == 0 ) { if (",0
514,<S2SV_ModStart> fv -> b. nextsame == NULL || fv -> b. nextsame -> fv!= & fv -> b ) { return ( false ) ; } else if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 0 &&! _FVMenuSave ( fv ) ) return ( false ) ; else SFClearAutoSave ( sf ) ; } else if ( AskChanged ( fv -> b. sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 0 &&! _FVMenuSave ( fv ) ) return ( false ) ; else SFClearAutoSave ( sf ) ; } else if ( AskChanged ( fv -> b. sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 2 ) return ( false ) ; else SFClearAutoSave ( sf ) ; } else if ( AskChanged ( fv -> b. sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 0 &&! _FVMenuSave ( fv ) ) return ( false ) ; else SFClearAutoSave ( sf ) ; },0
515,<S2SV_ModStart> % 4096 == 0 <S2SV_ModEnd> ) ; bzero,0
516,<S2SV_ModStart> timr ) ; period = timespec_to_ns ( new_setting -> it_interval ) ; if ( when > timespec_to_ns ( new_setting -> it_value ) ) { err = - EINVAL ; goto done ; } <S2SV_ModStart> n ) ; if ( when > timespec_to_ns ( new_setting -> it_value ) ) { err = - EINVAL ; goto done ; } <S2SV_ModStart> n ) ; if ( when > now ) when -= now ; else when = 0 ; } if ( flags & TIMER_ABSTIME ) { struct timespec n ; unsigned long now ; getnstimeofday ( & n ) ; now = timespec_to_ns ( n ) ; when = timespec_to_ns ( n ) ; if ( when > now ) when -= now ; else when = 0 ; } when = ( when + sgi_clock_period - 1 ) / sgi_clock_period ; } when = ( when + sgi_clock_period - 1 ) / sgi_clock_period + rtc_time ( ) ; period = ( period + sgi_clock_period - 1 ) / sgi_clock,0
517,"<S2SV_ModStart> if (! js_doregexec ( J, <S2SV_ModEnd> re -> prog",1
518,"<S2SV_ModStart> case OFreshOID : if ( caml_set_oo_id ( ( value ) dest ) < 0 ) { caml_set_oo_id ( ( value ) dest ) ; sp -- ; break ; } <S2SV_ModEnd> case OShift : <S2SV_ModStart> ; read_block : if ( size == 0 ) { v = Atom ( tag ) ; } else { v = Make_header ( size, tag, intern_color ) ; intern_dest += 1 + size ; if ( tag == Object_tag ) { Assert ( size >= 2 ) ; ReadItems ( & Field ( v, 2 ), size - 2 ) ; } else { PushItem ( ) ; sp -> op = OFreshOID ; sp -> dest = ( value * ) v ; sp -> arg = 1 ; } else { v = Val_int ( code & 0x3F ) ; } } else { v = Make_header ( size, tag, intern_color ) ; intern_dest += 1 + size ; if ( tag == Object_tag ) { Assert ( size >= 2 ) ; ReadItems ( & Field ( v, 2 ), size - 2 ) ; } else { PushItem ( ) ; sp -> op = OFreshOID ;",0
519,"<S2SV_ModStart> ; struct range * <S2SV_ModEnd> range ; struct <S2SV_ModStart> = NULL ; size_t <S2SV_ModEnd> content_length ; int <S2SV_ModStart> = 500, <S2SV_ModEnd> fd = - <S2SV_ModStart> ( range = parse_range ( range_str, st -> st_size, & nranges ) ) == NULL ) { code = 416 ; ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> */%lld"", st -> st_size ) ; errstr = ""failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> file <S2SV_blank> buffer"" ; goto abort ; } if ( ( fd = open ( path, O_RDONLY ) ) == - 1 ) goto abort ; media = media_find_config ( env, srv_conf, path ) ; if ( ( evb = evbuffer_new ( ) ) == NULL ) { code = 416 ; ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> %lld-%lld/%lld"", st -> st_size ) ; kv_add ( & resp -> http_headers, ""Content-Range"", content_range ) ; if ( kv_add ( & resp -> http_headers, ""Content-Range"", content",0
520,"<S2SV_ModStart> ; ier = ksz8851ReadReg <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; ksz8851WriteReg <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( interface, KSZ8851_ISR ) ; if ( ( isr & KSZ8851_ISR_LCIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_LCIS <S2SV_ModEnd> ) ; n <S2SV_ModStart> ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEventFromIsr ( & interface -> nicTxEvent ) ; } } if ( ( isr & KSZ8851_ISR_RXIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_RXIS <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, KSZ8851_IER, ier <S2SV_ModEnd> ) ; return",0
521,"<S2SV_ModStart> void encode_quantization ( VP9_COMMON * cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> * wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm -> base_qindex, QINDEX_BITS ) ; write_delta_q ( wb, cm -> y_dc_delta_q ) ; write_delta_q ( wb, cm -> uv_ac_delta_q ) ; write_delta_q ( wb, cm -> y_ac_delta_q ) ; write_delta_q ( wb, cm -> y_dc_delta_q ) ; write_delta_q ( wb, cm -> y_ac_delta_q ) ; write_delta_q ( wb, cm -> uv_dc_delta_q ) ; write_delta_q ( wb, cm -> uv_ac_delta_q ) ; } <S2SV_null> <S2SV_null>",0
522,"<S2SV_ModStart> msglen ) < 0 ) { BTIF_TRACE_ERROR ( ""failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> (%s)"", strerror ( errno ) ) ; }",0
523,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } state <S2SV_ModStart> ) ) { return NULL <S2SV_ModEnd> ; } state <S2SV_ModStart> ) ) { return NULL <S2SV_ModEnd> ; } state <S2SV_ModStart> end ) ; state -> ptr = tmp ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
524,"<S2SV_ModStart> struct fb_vblank vblank ; memset ( & vblank, 0, sizeof ( vblank ) )",1
525,<S2SV_ModStart> int flags ) <S2SV_ModEnd> { if ( <S2SV_ModStart> ) ; } <S2SV_ModEnd> } else if <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
526,"<S2SV_ModStart> Curves [ i ] = _cmsMallocZero ( ContextID, <S2SV_ModEnd> nElements, sizeof <S2SV_ModStart> ) ) ; if ( c16 -> Curves [ i ] == NULL ) { cmsLog
527,"<S2SV_ModStart> { if ( kern_path ( dev_name, LOOKUP_FOLLOW, & path ) == NULL ) { error = - ENOMEM ; goto out ; } if ( kern_path ( requested_dev_name, LOOKUP_FOLLOW, & path ) == NULL ) { error = - ENOMEM ; goto out ; } if ( kern_path ( requested_dev_name, LOOKUP_FOLLOW, & path ) == NULL ) { error = - ENOMEM ; goto out ; } if ( kern_path ( dev_name, LOOKUP_FOLLOW, & path ) == NULL ) { error = - ENOMEM ; goto out ; } if ( kern_path ( requested_dev_name, LOOKUP_FOLLOW, & path ) == NULL ) { error = - ENOMEM ; goto out ; } if ( kern_path ( requested_dev_name, LOOKUP_FOLLOW, & path ) == NULL ) { error = - ENOMEM ; goto out ; } if ( kern_path ( dev_name, LOOKUP_FOLLOW, & path ) == NULL ) { error = - ENOMEM ; goto out ; } if ( kern_path ( requested_dev_name, LOOKUP_FOLLOW, & path )",0
528,"<S2SV_ModStart> -> m_wMaxReqSize ) { printk ( KERN_ERR ""%s() <S2SV_blank> Exceeded <S2SV_blank> dev->bus.m_wMaxReqSize\\n"", __func__ ) ; ret = SAA_ERR_INVALID_COMMAND ; goto out ; } <S2SV_ModStart> -> m_wMaxReqSize ) { printk ( KERN_ERR ""%s() <S2SV_blank> Exceeded <S2SV_blank> dev->bus.m_wMaxReqSize\\n"", __func__ ) ; ret = SAA_ERR_INVALID_COMMAND ; goto out ; }",0
529,"<S2SV_ModStart> TSRMLS_CC ) ; if ( ZEND_NUM_ARGS ( ) TSRMLS_CC, ""s|ls!b"", & str, & str_len, & flags, & hint_charset, & hint_charset_len, & double_encode ) == FAILURE ) { return ; } if ( ZEND_NUM_ARGS ( ) TSRMLS_CC, ""s|ls!b"", & str, & str_len, & flags, hint_charset, & hint_charset_len, & double_encode TSRMLS_CC ) ; if ( ZEND_NUM_ARGS ( ) TSRMLS_CC, ""s|ls!b"", & str, & str_len, & hint_charset_len, & double_encode ) { return ; } if ( ZEND_NUM_ARGS ( ) TSRMLS_CC, ""s|ls!b"", & str, & str_len, & flags, hint_charset, & hint_charset_len, & double_encode TSRMLS_CC ) ; if ( ZEND_NUM_ARGS ( ) TSRMLS_CC ) ;",0
530,<S2SV_ModStart> ; if ( peerkey -> type == EVP_PKEY_TYPE_RSA ) { if ( peerkey -> type == EVP_PKEY_TYPE_EC_PUBLIC_KEY ) { if ( peerkey -> type!= EVP_PKEY_TYPE_EC_PUBLIC_KEY ) { if ( peerkey -> type!= EVP_PKEY_TYPE_EC_PUBLIC_KEY ) { if ( peerkey -> type!= EVP_PKEY_TYPE_EC_PUBLIC_KEY ) { if ( peerkey -> type!= EVP_PKEY_TYPE_EC_PUBLIC_KEY ) { if ( peerkey -> type!= EVP_PKEY_TYPE_EC_PUBLIC_KEY ) { if ( peerkey -> type!= EVP_PKEY_TYPE_EC_PUBLIC_KEY ) { if ( peerkey -> type!= EVP_PKEY_TYPE_EC_PUBLIC_KEY ) { if ( peerkey -> type!= EVP_PKEY_TYPE_EC_PUBLIC_KEY ) { if ( peerkey -> type!= EVP_PKEY_TYPE_EC_PUBLIC_KEY ) { if ( peerkey -> type!= EVP_PKEY_TYPE,0
531,"<S2SV_ModStart> t1_getline ( ) ; if ( strchr ( t1_buf_array, charstringname ) ) { strcpy ( t1_line_array, charstringname ) ; strcpy ( t1_buf_array, charstringname ) ; strcpy ( t1_line_array, charstringname ) ; strcpy ( t1_buf_array, charstringname ) ; t1_line_ptr = eol ( t1_line_array ) ; } else { strcpy ( t1_buf_array, charstringname ) ; strcpy ( t1_line_array, charstringname ) ; strcpy ( t1_buf_array, charstringname ) ; strcpy ( t1_line_array, charstringname ) ; t1_line_ptr = eol ( t1_buf_array ) ; t1_line_ptr = eol ( t1_line_array ) ; }",0
532,"<S2SV_ModStart> BLOCK_SIZE bsize, <S2SV_ModEnd> BLOCK_SIZE subsize ) <S2SV_ModStart>, hbs = b_width_log2_lookup [ bsize ] <S2SV_ModEnd> ; PARTITION_TYPE partition <S2SV_ModStart> case PARTITION_NONE : * get_sb_index ( x, subsize ) = 0 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; if ( mi_col + hbs < cm -> mi_cols ) { * get_sb_index ( x, subsize ) = 1 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; } break ; case PARTITION_VERT : * get_sb_index ( x, subsize )",0
533,"<S2SV_ModStart> name ) ; if (! name ) { data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_NAME, ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", name ) ; data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_NAME, ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", name ) ; return 0 ; }",0
534,<S2SV_ModStart> = 0 ; int block_ptr = 0 ; int pixel_x = 0 ; int pixel_y = 0 ; int block_width = s -> avctx -> width * s -> avctx -> height ; int block_height = s -> avctx -> height * s -> frame. linesize [ 0 ] ; int block_width = s -> avctx -> width * s -> frame. linesize [ 1 ] ; int block_height = s -> avctx -> height * s -> frame. linesize [ 0 ] ; int block_width = s -> avctx -> width * s -> frame. linesize [ 1 ] ; int block_height = s -> avctx -> height * s -> frame. linesize [ 0 ] ; block_width = s -> avctx -> width * s -> frame. linesize [ 0 ] ; block_height = s -> frame. linesize [ 1 ] ; block_width = s -> avctx -> width * s -> frame. linesize [ 0 ] ; block_height = s -> frame. linesize [ 1 ] * s -> frame. linesize [ 2 ] ; block_height = s -> avctx -> height * s -> frame. linesize [ 1 ],0
535,"<S2SV_ModStart> cnt ) { JAS_DBGLOG ( 100, ( ""mem_read(%p, <S2SV_blank> %p, <S2SV_blank> %d)\\n"", obj, buf, cnt ) ) ; JAS_DBGLOG ( 100, ( ""mem_read(%p, <S2SV_blank> %p, <S2SV_blank> %d)\\n"", obj, buf, cnt ) ) ;",0
536,"<S2SV_ModStart> * ptype ; struct gre_base_hdr * greh2 ; off = skb_gro_offset ( skb ) ; hlen = off + sizeof ( * greh ) ; if ( unlikely (! NAPI_GRO_CB ( skb ) -> flush ) ) goto out_unlock ; type = greh -> protocol ; if ( ( greh -> flags & GRE_CSUM ) &&! NAPI_GRO_CB ( skb ) -> flush ) { if ( NAPI_GRO_CB ( skb ) -> flush ) goto out_unlock ; greh2 = skb_gro_header_fast ( skb, hlen ) ; if (! NAPI_GRO_CB ( skb ) -> flush ) goto out_unlock ; greh2 = skb_gro_header_slow ( skb, hlen, off ) ; if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_checksum_simple_validate ( skb ) ) goto out_unlock ; greh2 = skb_gro_header_fast ( skb, hlen ) ; if (!",0
537,<S2SV_ModStart> ; if ( numrows > JAS_MATRIX_MAX_ROWS ) { jas_matrix_destroy ( matrix ) ; return 0 ; } if ( numcols > JAS_MATRIX_MAX_COLS ) { jas_matrix_destroy ( matrix ) ; return 0 ; },0
538,"<S2SV_ModStart> string_bytes_concat_buffer ( ( TPM2B_MAX_BUFFER * ) & key, & ( session -> sessionKey. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TPM2B_MAX_BUFFER * ) & key, & ( session -> nonceNewer. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TPM2B_MAX_BUFFER * ) & key, & ( session -> salt. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TPM2B_MAX_BUFFER * ) & key, & ( session -> nonceNewer. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TPM2B_MAX_BUFFER * ) & key, & ( session -> salt. b ) ) ; if",0
539,"<S2SV_ModStart> KEY_NEED_READ ) ; if ( key -> state == KEY_IS_UNINSTANTIATED ) { ret = - EINVAL ; goto error2 ; } ret = key_permission ( key_ref, KEY_READ ) ; if ( ret == 0 ) goto error2 ; if ( is_key_possessed ( key_ref ) ) { ret = - EACCES ; goto error2 ; } if ( key -> type -> read ) ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( ret == 0 ) ret = - EOPNOTSUPP ;",0
540,<S2SV_ModStart> u4_first_slice_in_pic ) { ps_dec_op -> u4_first_slice_in_pic = 1 ; ps_dec_op -> u4_first_slice_in_pic = 0 ; ps_dec_op -> u4_first_slice_in_pic = 1 ; ps_dec_op -> u4_first_slice_in_pic = 0 ; ps_dec_op -> u4_first_slice_in_pic = 1 ; ps_dec_op -> u4_first_slice_in_pic = 0 ; ps_dec_op -> u4_first_slice_in_pic = 1 ; ps_dec_op -> u4_first_slice_in_pic = 0 ; ps_dec_op -> u4_first_slice_in_pic = 1 ; ps_dec_op -> u4_first_slice_in_pic = 0 ; ps_dec_op -> u4_first_slice_in_pic = 0 ; ps_dec_op -> u4_first_slice_in_pic = 0 ; ps_dec_op -> u4_first_slice_,0
541,"<S2SV_ModStart> var_off ) ; if (! src_known ||! dst_known <S2SV_ModEnd> ) { return <S2SV_ModStart> case BPF_SUB : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else { dst_reg -> smin_value = 0 ; } <S2SV_ModStart> case BPF_SUB : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } if ( dst_reg -> umin_value + umin_val < umin_val || dst_reg -> umax_value < umax_val ) { dst_reg -> umin_value = 0 ; dst_reg -> umax",0
542,<S2SV_ModStart> ) ) { struct cifsFileInfo * cfile = direntry -> d_inode ; cfile -> f_namelen = strlen ( cfile -> f_namelen ) + 1 ; cfile -> f_namelen = strlen ( cfile -> f_namelen ) ; cfile -> f_namelen = strlen ( cfile -> f_namelen ) ; cfile -> f_namelen = strlen ( cfile -> f_namelen ) ; cfile -> f_namelen = strlen ( cfile -> f_name. name ) ; cfile -> f_namelen = strlen ( cfile -> f_namelen ) ; cfile -> f_namelen = strlen ( cfile -> f_namelen ) ; cfile -> f_namelen = strlen ( cfile -> f_namelen ) ; cfile -> f_namelen = strlen ( cfile -> f_namelen ) ; cfile -> f_namelen = strlen ( cfile -> f_name. name ) ; cfile -> f_namelen = strlen ( cfile -> f_namelen ),0
543,<S2SV_ModStart> ; break ; case VFIO_PCI_BAR0_REGION_INDEX : info. offset = VFIO_PCI_BAR0_INDEX_TO_OFFSET ( info. index ) ; info. size = pdev -> bar_size ; info. flags = VFIO_REGION_INFO_FLAG_READ | VFIO_REGION_INFO_FLAG_WRITE ; break ; case VFIO_PCI_BAR5_REGION_INDEX : info. offset = VFIO_PCI_BAR5_INDEX_TO_OFFSET ( info. index ) ; info. size = pdev -> bar5_size ; info. flags = VFIO_REGION_INFO_FLAG_READ | VFIO_REGION_INFO_FLAG_WRITE ; break ; case VFIO_PCI_BAR6_REGION_INDEX : info. offset = VFIO_PCI_BAR6_INDEX_TO_OFFSET ( info. index ) ; info. size = pdev -> bar6_size ; info. flags = VFIO_REGION_INFO_FLAG_READ | VFIO_REGION_INFO_FLAG_READ | VFIO_REGION_INFO,0
544,"<S2SV_ModStart> copied ) ; inode_dio_wait ( inode ) ; <S2SV_ModStart> EXT4_STATE_ORDERED_MODE ) ) { ext4_inode_dio_wait ( handle, inode ) ; ret = ext4_jbd2_file_inode ( handle, inode ) ; if ( ret < 0 ) goto errout ; ret = block_write_end ( file, mapping, pos, len, copied, page, fsdata ) ; if ( ret < 0 ) goto errout ; ret = block_write_end ( file, mapping, pos, len, copied, page, fsdata ) ; if ( i_size_changed ) pagecache_isize_extended ( inode, old_size, pos ) ; if ( i_size_changed ) pagecache_isize_extended ( inode, old_size, pos ) ; if ( i_size_changed ) pagecache_isize_extended ( inode, old_size, pos ) ; if ( i_size_changed ) ext4_mark_inode_dirty ( inode ) ; if ( i_size_changed ) pagecache_isize_extended ( inode,",0
545,<S2SV_ModStart> -> filesize = - 1 ; if ( uri [ strlen ( uri ) - 1 ] == '\\0' ) { s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) return AVERROR ( ENOMEM ) ; s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ;,0
546,"<S2SV_ModStart> ; if ( rcu_dereference_protected ( tp -> opt, sock_owned_by_user ( sk ) ) ) { ret = NULL ; goto out ; }",0
547,"<S2SV_ModStart> char * in, size_t len <S2SV_ModStart> += 4 ; len ++ ; if ( digit3!= '=' ) { * out ++ = ( ( base64val ( digit1 ) << 4 ) & 0xf0 ) | ( base64val ( digit2 ) >> 4 ) ; len ++ ; if ( digit4!= '=' ) { * out ++ = ( ( base64val ( digit2 ) << 4 ) & 0xf0 ) | ( base64val ( digit3 ) >> 4 ) ; len ++ ; } } else { * out ++ = ( ( base64val ( digit1 ) << 2 ) & 0xf0 ) | ( base64val ( digit2 ) & 0xc0 ) | ( base64val ( digit3 ) >> 4 ) ; len ++ ; if ( digit4!= '=' ) { * out ++ = ( ( base64val ( digit4 ) << 6 ) & 0xc0 ) | ( base64val ( digit4 ) >> 2 ) ; len ++ ; } }",0
548,<S2SV_ModStart> gc ) ; if ( gpio_dev -> pctrl ) <S2SV_ModStart> pctrl ) ; mutex_destroy ( & gpio_dev -> mutex ) ;,0
549,"<S2SV_ModStart>, cur_len ; ssize_t <S2SV_ModEnd> copied = 0 <S2SV_ModStart> copied = min_t ( size_t, cur_len, sizeof ( struct cifs_writedata_entry ), sizeof ( struct cifs_writedata_entry ), sizeof ( struct cifs_writedata_entry ) ) ; if (! list_empty ( & wdata_list ) ) { list_add_tail ( & wdata_list, & cifs_writedata_list ) ; break ; } <S2SV_ModEnd> copied = min_t <S2SV_ModStart> copied = min_t ( size_t, cur_len, sizeof ( struct cifs_writedata_entry ), sizeof ( struct cifs_writedata_entry ), sizeof ( struct cifs_writedata_entry ) ) ; if (! list_empty ( & wdata_list ) ) { list_add_tail ( & wdata_list, & cifs_writedata_list ) ; break ; }",0
550,<S2SV_ModStart>! ( quirks & CP_RDESC_SWAPPED_MIN_MAX <S2SV_ModEnd> ) ) return,0
551,"<S2SV_ModStart> svc_ctx ) { SvcInternal_t <S2SV_ModEnd> * const si <S2SV_ModStart> vpx_svc_get_message ( svc_ctx <S2SV_ModEnd> ) ; svc_log_reset <S2SV_ModStart> ; svc_log_reset ( svc_ctx <S2SV_ModEnd> ) ; encode_frame_count <S2SV_ModStart> -> encode_frame_count ; if ( encode_frame_count <= 0 ) return vpx_svc_get_message ( svc_ctx <S2SV_ModEnd> ) ; svc_log <S2SV_ModStart> ""\\n"" ) ; number_of_keyframes = encode_frame_count / <S2SV_ModEnd> si -> kf_dist <S2SV_ModStart> + 1 ; for ( i = 0 ; i < <S2SV_ModEnd> si -> layers <S2SV_ModStart> ++ i ) { number_of_frames = encode_frame_count ; if ( svc_ctx -> encoding_mode == ALT_INTER_LAYER_PREDICTION_IP && ( i == 1 || i == 3 ) ) { number_of_frames -= number_of_keyframes ; } svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f], <S2SV_blank> Bytes",0
552,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decode ( BYTE <S2SV_ModStart> ) { * ( UINT32 * ) out ) = value ; left -- ; } else if ( value == * in ) { len = ( UINT32 ) * in ++ ; len += 2 ; } else { in ++ ; len = * ( ( UINT32 * ) in ) ; in += 4 ; } FillMemory ( out, len, value ) ; out += len ; left -= len ; } else { * out ++ = value ; left -- ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
553,"<S2SV_ModStart> -> sb_buffer ) vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; if ( new_cols > old_cols ) { VTermRect rect = { 0, 0, 0, 0 } ; rect. start_row = 0 ; rect. start_col = 0 ; rect. end_row = 0 ; rect. end_col = 0 ; scrollrect ( rect, first_blank_row - new_rows, 0, user ) ; vterm_screen_flush_damage ( screen ) ; delta -> row -= first_blank_row - new_rows ; scrollrect ( rect, first_blank_row - new_rows, 0, user ) ; vterm_screen_flush_damage ( screen ) ; delta -> row -= first_blank_row - new_rows ; scrollrect ( rect, first_blank_row - new_rows, 0, user ) ; vterm_screen_flush_damage ( screen ) ; delta -> row -= first_blank_row",0
554,<S2SV_ModStart> { const char * literal_start <S2SV_ModEnd> ; int in_named_escape <S2SV_ModStart> ; for ( ; * str < end ; ( * str ) ++ ) { char ch = * * str ; if (! in_named_escape && ch == '{' && * ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( in_named_escape && ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } if ( ch == '{' ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1 ; goto done ; } if ( ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str +,0
555,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static jas_int <S2SV_ModEnd> mem_resize ( jas_stream_memobj_t <S2SV_ModStart> * buf ; JAS_DBGLOG ( 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"", m, bufsize ) ) ; if ( bufsize < 0 ) { JAS_DBGLOG ( 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"", m, bufsize ) ) ; return - 1 ; } JAS_DBGLOG ( 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"", m, bufsize ) ) ; if (! ( buf = jas_realloc2 ( m -> buf_, bufsize, sizeof ( unsigned char ) ) ) && bufsize ) { JAS_DBGLOG ( 100, ( ""mem_resize <S2SV_blank> realloc <S2SV_blank> failed\\n"" ) ) ; return - 1 ; } JAS_DBGLOG ( 100, ( ""mem_resize <S2SV_blank> realloc <S2SV_blank> succeeded\\n"" ) ) ; m -> buf_ = buf ; m -> bufsize_ = bufsize ; return 0",0
556,"<S2SV_ModStart> = create_dump_dir_from_problem_data ( pd <S2SV_ModEnd>, g_settings_dump_location )",0
557,"<S2SV_ModStart> (! LookupString <S2SV_ModEnd> ( symInterpretMatchMaskNames, <S2SV_ModStart>, pred_rtrn ) ) { log_err ( info -> ctx, ""Illegal <S2SV_blank> modifier <S2SV_blank> predicate <S2SV_blank> \\""%s\\""; <S2SV_blank> Ignored\\n"", pred_txt ) ; return false ; } expr = expr -> action. args",0
558,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> pcrypt_free ( struct <S2SV_ModStart> inst ) { <S2SV_ModEnd> crypto_instance_ctx * ctx <S2SV_ModStart> inst ) ; return <S2SV_ModEnd> crypto_drop_aead ( & <S2SV_ModStart> spawn ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
559,<S2SV_ModStart> 0 ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( x1 == 0 ) w1 = ptr -> width ; else h1 = ptr -> height ; } else { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 == 0 ) w1 = ptr -> width ; else x1 = ptr -> width ; } else { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 == 0 ) h1 = ptr -> height ; } else { if ( ( y1 == 0 ) h1 = ptr -> height ; } else { if ( ( y1 == 0 ),0
560,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
561,"<S2SV_ModStart> -> ndisc_nodetype == NDISC_NODETYPE_HOST ) { ND_PRINTK ( 0, err, ""RA: <S2SV_blank> from <S2SV_blank> host <S2SV_blank> or <S2SV_blank> unauthorized <S2SV_blank> router\\n"" ) ; goto done <S2SV_ModEnd> ; } if <S2SV_ModStart> -> ndisc_nodetype == NDISC_NODETYPE_HOST ) { ND_PRINTK ( 0, err, ""RA: <S2SV_blank> from <S2SV_blank> host <S2SV_blank> or <S2SV_blank> unauthorized <S2SV_blank> router\\n"" ) ; goto done <S2SV_ModEnd> ; } if <S2SV_ModStart> -> ndisc_nodetype == NDISC_NODETYPE_HOST ) { ND_PRINTK ( 0, err, ""RA: <S2SV_blank> from <S2SV_blank> host <S2SV_blank> or <S2SV_blank> unauthorized <S2SV_blank> router\\n"" ) ; goto done <S2SV_ModEnd> ; } if <S2SV_ModStart> -> ndisc_nodetype == NDISC_NODETYPE_HOST ) { ND_PRINTK ( 0, err, ""RA: <S2SV_blank> from <S2SV_blank> host <S2SV_blank> or <S2SV_blank> unauthorized <S2SV_blank> router\\n"" ) ; goto done <S2SV_ModEnd> ; } if <S2SV_ModStart> -> ndisc_nodetype == NDISC_NODETYPE_HOST ) { ND_PRINTK ( 0, err, ""RA: <S2SV_blank>",0
562,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
563,<S2SV_ModStart> * up ; int len = xfrm_replay_state_esn_len ( replay_esn ) ; if ( len < 0 || len > xfrm_replay_state_esn_len ( up ) ) return - EINVAL ; <S2SV_ModStart> rp ) ; len = xfrm_replay_state_esn_len ( replay_esn ) ; if ( len < 0 || len > xfrm_replay_state_esn_len ( up ) ) return - EINVAL ;,0
564,<S2SV_ModStart> int ret = <S2SV_ModEnd> proc_dointvec ( table,0
565,"<S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; this_mv <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) < 0 <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) < 0 <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) < 0 <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) < 0 <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) < 0 <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) < 0 <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) < 0 <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) ; if <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) < 0 <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) < 0 <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) < 0 <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) < 0 <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) < 0 <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) < 0 <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) < 0",0
566,<S2SV_ModStart> ; if ( compno > p_image -> numcomps || compno > p_image -> numcomps * p_image -> numcomps * p_image -> numcomps * p_image -> numcomps * p_image -> numcomps * p_image -> numcomps * p_image -> numcomps * p_image -> numcomps * p_image -> numcomps * p_image -> numcomps * p_cp -> tw * p_cp -> th ) { return 00 ; } if ( compno > p_image -> numcomps || compno > p_image -> numcomps * p_image -> numcomps * p_image -> numcomps * p_image -> numcomps * p_image -> numcomps * p_image -> numcomps * p_image -> numcomps * p_image -> numcomps * p_image -> numcomps * p_image -> numcomps * p_cp -> tw * p_cp -> th ) { return 00 ; },0
567,"<S2SV_ModStart> name ), ""crypto-%s"" <S2SV_ModEnd>, name )",1
568,"<S2SV_ModStart> ps ) { <S2SV_ModEnd> u32 prev_legacy, <S2SV_ModStart> flags ; kvm_pit_load_count <S2SV_ModEnd> ( kvm,",0
569,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMP <S2SV_ModStart> mi_col ; const MODE_INFO * const mi <S2SV_ModEnd> = cm -> <S2SV_ModStart> * mi_8x8 = mi <S2SV_ModEnd> -> mi_grid_visible + <S2SV_ModStart> * prev_mi_8x8 = mi <S2SV_ModEnd> -> prev_mi_grid_visible + <S2SV_ModStart> BLOCK_SIZE bsize ; vp9_zero ( cpi -> mb. pred_mv ) ; switch ( cpi -> sf. partition_search_type ) { case VAR_BASED_PARTITION : choose_partitioning ( cpi, tile, mi_row, mi_col ) ; nonrd_use_partition ( cpi, tile, mi_row, mi_col, BLOCK_64X64, & dummy_rate, & dummy_dist ) ; break ; case SOURCE_VAR_BASED_PARTITION : set_offsets ( cpi, tile, mi_row, mi_col, BLOCK_64X64 ) ; set_source_var_based_partition ( cpi, tile, mi_8x8, mi_col ) ; nonrd_use",0
570,<S2SV_ModStart> 1 ) ; if ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) { ibuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; obuf = opipe -> bufs + nbuf ; * obuf = * ibuf ; * obuf = * opipe -> bufs + nbuf ; * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; opipe -> nrbufs ++ ; } else if ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) { ibuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; obuf = opipe -> bufs + nbuf ; * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; if ( obuf -> len > len ) obuf -> len = len ; opipe -> nrbufs ++ ; },0
571,"<S2SV_ModStart> _dh ) ; if ( skb_header_len ( skb, dataoff, sizeof ( _dh ), & dh ) < sizeof ( _dh ) ) { pr_debug ( ""nf_ct_dccp: <S2SV_blank> packet <S2SV_blank> too <S2SV_blank> short"" ) ; goto out_invalid ; } state = dccp_state_table [ CT_DCCP_ROLE_CLIENT ] [ dh -> dccph_type ] [ CT_DCCP_NONE ] ; break ; case CT_DCCP_REQUEST : break ; case CT_DCCP_REPLY : break ; case CT_DCCP_INVALID : msg = ""nf_ct_dccp: <S2SV_blank> invalid <S2SV_blank> state <S2SV_blank> transition <S2SV_blank> "" ; goto out_invalid ; }",0
572,"<S2SV_ModStart> else { Fp = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, ""wb"" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, ""wb"" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, ""wb"" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, ""wb"" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, ""wb"" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, ""wb"" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, ""wb"" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ; exitFunction : TEMP_FAILURE_RETRY ( <S2SV_ModStart>, ""wb"" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, ""wb"" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, ""wb"" ) ; TEMP_FAILURE_RETRY (",0
573,"<S2SV_ModStart> = NULL ; const <S2SV_ModStart> dir = ""/tmp"" ; if ( tmpname == NULL ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } <S2SV_ModEnd> if ( (",0
574,<S2SV_ModStart> ( blkg ) ) { blkg_free ( new_blkg ) ; return PTR_ERR ( blkg ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> q -> root_blkg,0
575,"<S2SV_ModStart> ; if ( ncolors > XWD_MAX_COLORS ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> colors\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ; if ( ncolors > XWD_MAX_COLORS ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> colors\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ; if ( ncolors > XWD_MAX_COLORS ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> colors\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ; if ( ncolors > XWD_MAX_COLORS ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> colors\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ; if ( ncolors > XWD_MAX_COLORS ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> colors\\n"" ) ; return AVERROR_INVALIDDATA ;",0
576,"<S2SV_ModStart> ; krb5_data rspac <S2SV_ModEnd> ; const char <S2SV_ModStart> ; if ( rspac ) memcpy ( & rspac, rsp, sizeof ( rspac ) ) ;",0
577,"<S2SV_ModStart> mnt ) ; if ( dentry -> d_inode -> i_op -> follow_link ) { cookie = dentry -> d_inode -> i_op -> follow_link ( dentry, nd ) ; if ( IS_ERR ( cookie ) ) { char * s = nd_get_link ( nd ) ; error = 0 ; if ( s ) error = __vfs_follow_link ( nd, s ) ; else if ( nd -> last_type == LAST_BIND ) { error = force_reval_path ( & nd -> path, nd ) ; if ( error ) path_put ( & nd -> path ) ; } else if ( nd -> last_type == LAST_BIND ) { error = force_reval_path ( & nd -> path, nd ) ; if ( error ) path_put ( & nd -> path ) ; } else if ( nd -> last_type == LAST_BIND ) { error = force_reval_path ( & nd -> path, nd ) ; if ( error ) path_put ( & nd -> path ) ; } else if ( nd -> last_type == LAST_BIND ) { error = force_reval_path (",0
578,<S2SV_ModStart> arg ) { <S2SV_ModEnd> struct usbdevfs_connectinfo ci <S2SV_ModStart> = {. <S2SV_ModEnd> speed = ps <S2SV_ModStart> -> speed == USB_SPEED_LOW <S2SV_ModEnd> } ; if <S2SV_ModStart> -> speed == USB_SPEED_HIGH <S2SV_ModEnd> } ; return,0
579,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct ip_options_rcu <S2SV_ModEnd> * ip_options_get_finish ( <S2SV_ModStart> net * net <S2SV_ModEnd>, struct ip_options <S2SV_ModStart> * opt, u32 <S2SV_ModEnd> optlen ) { <S2SV_ModStart> & 3 ) opt -> __data [ optlen ++ ] = IPOPT_END ; } <S2SV_ModEnd> if ( optlen <S2SV_ModStart> & 3 ) opt -> __data [ optlen ++ ] = IPOPT_END ; opt -> optlen = optlen ; if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( opt ) ; * optp = opt ; return 0 ; } if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( * optp ) ; * optp = opt ; return 0 ; } if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( * optp ) ; * optp = opt ; return - EINVAL ; } if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( * optp ) ; * optp = opt ; return",0
580,<S2SV_ModStart> -> rmtblkcnt2 ; args -> rmtblkno = XFS_FSB_TO_BB ( args -> rmtblkno ) ; args -> rmtblkcnt2 = XFS_FSB_TO_BB ( args -> rmtblkcnt2 ) ; args -> rmtblkno = XFS_FSB_TO_BB ( args -> rmtblkno ) ; args -> rmtblkcnt2 = XFS_FSB_TO_BB ( args -> rmtblkcnt2 ) ; args -> rmtblkno2 = XFS_FSB_TO_BB ( args -> rmtblkno2 ) ; args -> rmtblkcnt2 = XFS_FSB_TO_BB ( args -> rmtblkcnt2 ) ; args -> rmtblkno2 = XFS_FSB_TO_BB ( args -> rmtblkno2 ) ; args -> rmtblkcnt2 = XFS_FSB_TO_BB ( args -> rmtblkcnt2 ) ; args -> rmtblkcnt2 = XFS_FSB_TO_,0
581,<S2SV_ModStart> == STATUS_BUFFER_TOO_SMALL && deviceObjectCount <S2SV_ModStart> == STATUS_BUFFER_TOO_SMALL && deviceObjectCount <= MAX_DEVICE_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT <S2SV_ModEnd> ) == STATUS_BUFFER_TOO_SMALL <S2SV_ModStart> == STATUS_BUFFER_TOO_SMALL && deviceObjectCount <= MAX_DEVICE_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_OBJECT_,0
582,"<S2SV_ModStart> ; if ( connection == NULL ) goto error ; else { bool found_upgrade = false ; int count ; sds * tokens = sdssplitlen ( connection, strlen ( connection ), "","", 1, & count ) ; if ( tokens == NULL ) goto error ; for ( int i = 0 ; i < count ; i ++ ) { sds token = tokens [ i ] ; sdstrim ( token, "" <S2SV_blank> "" ) ; if ( strcasecmp ( token, ""Upgrade"" ) == 0 ) { found_upgrade = true ; break ; } } else { bool found_upgrade = false ; int count ; sds * tokens = sdssplitlen ( connection, strlen ( connection ), "","", 1, & count ) ; if ( tokens == NULL ) goto error ; for ( int i = 0 ; i < count ; i ++ ) { sds token = tokens [ i ] ; sdstrim ( token, "" <S2SV_blank> "" ) ; if ( strcasecmp ( token, ""Connection"" ) == 0 ) { found_upgrade = true ; break ; } } sdsfreesplitres ( tokens, count ) ; if (! found_upgrade ) goto error ; }",0
583,"<S2SV_ModStart> * findalldevs_if ; struct rpcap_sockaddr * addr ; <S2SV_ModStart> 0 ; } memset ( & addr, 0, sizeof ( addr ) ) ; <S2SV_ModStart> -> description ) { memcpy ( & addr, d -> description, sizeof ( d -> description ) ) ; memcpy ( & addr, d -> name, sizeof ( d -> name ) ) ; memcpy ( & addr, sizeof ( struct rpcap_sockaddr ) ) ; memcpy ( & addr, sizeof ( struct rpcap_findalldevs_if ) ) ; memcpy ( & addr, & addr, sizeof ( struct rpcap_sockaddr ) ) ; memcpy ( & addr, & addr, sizeof ( struct rpcap_sockaddr ) ) ; memcpy ( & addr, sizeof ( struct rpcap_sockaddr ) ) ; memcpy ( & addr, sizeof ( struct rpcap_sockaddr ) ) ; memcpy ( & addr, sizeof ( struct rpcap_sockaddr ) ) ; memcpy ( & addr, sizeof ( struct rpcap_sockaddr ) ) ; memcpy ( & addr, sizeof ( struct rpcap_sockaddr ) ) ; memcpy (",0
584,"<S2SV_ModStart> ; struct dump_dir <S2SV_ModEnd> * dd = <S2SV_ModStart> DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; }",0
585,"<S2SV_ModStart> 1 ) ; if ( ( * p ) & ( 0x80 >> ( image -> columns - 7 ) ) ) { index = ( ( * p ) & ( 0x80 >> ( image -> columns - 7 ) )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } p ++ ; } if ( ( image -> columns % 2 )!= 0 ) { index = ( ( * p ) & ( 0x80 >> ( image -> columns - 1 ) )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } if ( ( image -> columns % 2 )!= 0 ) { index = ( ( * p ) & ( 0x80 >> ( image -> columns - 1 ) )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; }",0
586,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
587,<S2SV_ModStart> sock * sk <S2SV_ModEnd> ) { struct <S2SV_ModStart> int err ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee. ee_data -= skb_shinfo ( skb ) -> tskey ; } else { serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee. ee_data -= skb_shinfo ( skb ) -> tskey ; },0
588,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, dds_info. rows, dds_info. cols ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
589,"<S2SV_ModStart> = len ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short"" ) ) ; goto trunc ; } <S2SV_ModStart> = len ; bp += 4 ; len -= 4 ; <S2SV_ModStart> = len ; bp += 4 ; len -= 4 ; if ( len < 0 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short"" ) ) ; goto trunc ; } <S2SV_ModStart> = len ; bp += 4 ; len -= 4 ; len -= 4 ; if ( len < 0 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short"" ) ) ; goto trunc ; } <S2SV_ModStart> = len ; bp += 4 ; len -= 4 ; len -= 4 ; len -= 4 ; len -= 4 ; if ( len < 0 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short"" ) ) ; goto trunc ; } <S2SV_ModStart> = len ; bp += 4 ; len -= 4 ; len -= 4 ; if ( len < 0 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short"" ) ) ; goto trunc ; }",0
590,"<S2SV_ModStart>, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc?"" ) ) ) ;",0
591,"<S2SV_ModStart>! dumpable && ptrace_has_cap ( task_cred ( task ) <S2SV_ModEnd> -> user_ns, <S2SV_ModStart> ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { rcu_read_unlock ( ) ; return - EPERM ; } } else { if ( capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { rcu_read_unlock ( ) ; return - EPERM ; } } else { if ( capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS",0
592,"<S2SV_ModStart> long i ; if ( i + sizeof ( long ) > w ) { rdp_protocol_error ( ""add_bytes_l2_c"", 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534",0
593,<S2SV_ModStart> ; if ( dev -> coherent_dma_mask == DMA_BIT_MASK ( 32 ) || dev -> coherent_dma_mask == DMA_BIT_MASK ( 64 ) || dev -> coherent_dma_mask == DMA_BIT_MASK ( 64 ) || dev -> coherent_dma_mask == DMA_BIT_MASK ( 32 ) || dev -> coherent_dma_mask == DMA_BIT_MASK ( 64 ) || dev -> coherent_dma_mask == DMA_BIT_MASK ( 32 ) || dev -> coherent_dma_mask == DMA_BIT_MASK ( 64 ) || dev -> coherent_dma_mask == DMA_BIT_MASK ( 64 ) || dev -> coherent_dma_mask == DMA_BIT_MASK ( 32 ) || dev -> coherent_dma_mask == DMA_BIT_MASK ( 64 ) || dev -> coherent_dma_mask == DMA_BIT_MASK ( 32 ) || dev -> coherent_dma_mask == DMA_BIT_MASK ( 64,0
594,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
595,<S2SV_ModStart> i4_payload_size ) ; if ( payload_bits_remaining > ps_bitstrm -> u4_max_payload_bits ) { ps_parse -> s_sei_params. i1_max_payload_bits_remaining = ps_bitstrm -> u4_max_payload_bits_remaining ; ps_parse -> s_sei_params. i1_max_payload_bits_remaining = ps_bitstrm -> u4_max_payload_bits_remaining ; } if ( payload_bits_remaining > ps_bitstrm -> u4_max_payload_bits ) { ps_parse -> s_sei_params. i1_max_payload_bits_remaining = ps_bitstrm -> u4_max_payload_bits_remaining ; ps_parse -> s_sei_params. i1_max_payload_bits_remaining = ps_bitstrm -> u4_max_payload_bits_remaining ; },0
596,<S2SV_ModStart> ; priv = kzalloc <S2SV_ModEnd> ( sizeof (,0
597,"<S2SV_ModStart> ; tmp_sdma_rht = kmalloc ( sizeof ( * tmp_sdma_rht ), GFP_KERNEL ) ; if (! tmp_sdma_rht ) { kfree ( tmp_sdma_rht ) ; kfree ( tmp_sdma_rht ) ; kfree ( tmp_sdma_rht ) ; kfree ( tmp_sdma_rht ) ; kfree ( tmp_sdma_rht ) ; kfree ( tmp_sdma_rht ) ; kfree ( tmp_sdma_rht ) ; kfree ( tmp_sdma_rht ) ; if (! tmp_sdma_rht ) { kfree ( tmp_sdma_rht ) ; kfree ( tmp_sdma_rht ) ; kfree ( tmp_sdma_rht ) ; kfree ( tmp_sdma_rht ) ; kfree ( tmp_sdma_rht ) ; kfree ( tmp_sdma_rht ) ; kfree ( tmp_sdma_rht ) ; }",0
598,<S2SV_ModStart> -> device_data ; mutex_destroy ( & dev -> mutex ) ;,0
599,"<S2SV_ModStart> * info, <S2SV_ModEnd> int rep_quick ) <S2SV_ModStart>, MY_MUTEX_INIT_FAST ) ; mi_key_mutex_init ( mi_key_mutex_MI_SORT_INFO_mutex, & sort_info. mutex, MY_MUTEX_INIT_FAST ) ; mi_key_cond_init ( mi_key_cond_MI_SORT_INFO_cond, & sort_info. cond, MY_MUTEX_INIT_FAST ) ; mi_key_mutex_cleanup ( mi_key_mutex_MI_SORT_INFO_mutex, MY_MUTEX_INIT_FAST ) ; mi_key_mutex_cleanup ( mi_key_mutex_MI_SORT_INFO_mutex, MY_MUTEX_INIT_FAST ) ; mi_key_cond_cleanup ( mi_key_cond_MI_SORT_INFO_cond, & sort_info. cond, MY_MUTEX_INIT_FAST ) ;",0
600,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> size < 16 <S2SV_ModStart> > 256 ) { return ( DestroyImageList ( images ) ) ; } p = q ; sizes [ i ++ ] = size ; while ( ( isspace ( ( int ) ( ( unsigned char ) * p ) )!= 0 ) || ( * p == ',' ) ) ) p ++ ; while ( ( isspace ( ( int ) ( ( unsigned char ) * p ) )!= 0 ) || ( * p == ',' ) ) ) p ++ ; while ( ( isspace ( ( int ) ( ( unsigned char ) * p ) )!= 0 ) ) { p = q ; sizes [ i ++ ] = size ; while ( ( isspace ( ( int ) ( ( unsigned char ) * p ) )!= 0 ) || ( * p == ',' ) ) ) p ++ ; } if ( i == 10 ) i = 10 ; * count = i ; for ( i = 0 ; i < 10 ; i ++ ) { resized = ResizeImage ( image, sizes [ i ], sizes [ i ], sizes [ i ], image -> filter, exception ) ; if ( resized == ( Image * ) NULL ) { DestroyImageList ( images ) ) ; return ( DestroyImageList (",0
601,<S2SV_ModStart> } else { xfs_bmbt_irec_t <S2SV_ModEnd> dblocks = XFS_B_TO_FSB,0
602,"<S2SV_ModStart> ) ; } if ( pcount > HSTORE_MAX_PAIRS ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", pcount, HSTORE_MAX_PAIRS ) )",0
603,"<S2SV_ModStart> val ) ; if (! strcmp ( var, ""command"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> command <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile <S2SV_blank> or <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if (! strcmp ( var, ""rspfile_content"" ) ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if ( hasrspfile!= hasrspcontent ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if ( hasrspfile!= hasrspcontent ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if ( hasrspfile!= hasrspcontent ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"",",0
604,<S2SV_ModStart> ; if ( <S2SV_ModEnd> RE_YY_INPUT ( yyscanner <S2SV_ModStart> ; if ( <S2SV_ModEnd> RE_YY_INPUT ( yyscanner <S2SV_ModStart> ; if ( <S2SV_ModEnd> RE_YY_INPUT ( yyscanner <S2SV_ModStart> ; if ( <S2SV_ModEnd> RE_YY_INPUT ( yyscanner <S2SV_ModStart> ; if ( <S2SV_ModEnd> RE_YY_INPUT ( yyscanner <S2SV_ModStart> ; if ( <S2SV_ModEnd> RE_YY_INPUT ( yyscanner <S2SV_ModStart> ; if ( <S2SV_ModEnd> RE_YY_INPUT ( yyscanner <S2SV_ModStart> ; if ( <S2SV_ModEnd> RE_YY_INPUT ( yyscanner <S2SV_ModStart> ; if ( <S2SV_ModEnd> RE_YY_INPUT ( yyscanner <S2SV_ModStart> ; if ( <S2SV_ModEnd> RE_YY_INPUT ( yyscanner <S2SV_ModStart> ; if ( <S2SV_ModEnd> RE_YY_INPUT ( yyscanner <S2SV_ModStart> ; if ( <S2SV_ModEnd> RE_YY_INPUT ( yyscanner,0
605,"<S2SV_ModStart> ) ) { agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", c -> bind -> id, c -> buf ) ; agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", c -> bind -> kind, c -> id, c -> buf ) ; agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", c -> bind -> id, c -> buf, c -> buf ) ; agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", c -> bind -> kind, c -> id, c -> buf ) ; agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", c -> bind -> id, c -> buf ) ; agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", c -> bind -> id, c -> buf ) ; agoo_log_cat ( & agoo",0
606,"<S2SV_ModStart> vp9_fht16x16_c ( const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> ] ; int i, j ; tran_low_t <S2SV_ModEnd> temp_in [ 16 <S2SV_ModStart> ++ j ) out <S2SV_ModEnd> [ j *",0
607,"<S2SV_ModStart> new_data_len ) ; if ( g_str_has_prefix ( new_data, "".service"" ) ) { g_error_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( ""export-desktop-XXXXXX"" ) ) ), ""export-desktop-XXXXXX"" ) ) ) ; goto out ; } if ( g_str_has_prefix ( new_data, "".service"" ) ) ) { g_error_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( ""export-desktop-XXXXXX"" ) ), ""export-desktop-XXXXXX"" ) ) ) ; goto out ; } if ( g_str_has_prefix ( new_data, "".service"" ) ) ) { g_error_msg ( g_err",0
608,"<S2SV_ModStart> fh_dentry ) ; fh_lock ( fh ) ; error = fh_want_write ( fh ) ; if ( error ) goto out_errno ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT, argp -> acl_access ) ; if ( error ) goto out_drop_lock ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT, argp -> acl_default ) ; if ( error ) goto out_drop_lock ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT, argp -> acl_default ) ; if ( error ) goto out_drop_lock ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT, argp -> acl_default ) ; if ( error ) goto out_drop_unlock <S2SV_ModEnd> ; fh_unlock (",0
609,"<S2SV_ModStart> * ue ; if ( tree_root == NULL ) { fprintf ( stdout, "" <S2SV_blank> Unfolding <S2SV_blank> the <S2SV_blank> meta-tree <S2SV_blank> "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout, "" <S2SV_blank> done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue, & unfolded_tree, next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array, i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ], & ue -> fop, sizeof ( struct filter_op ) ) ; i ++ ; } } else { SAFE_REALLOC ( array, i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ], & ue -> fop, sizeof ( struct filter_op ) ) ; i ++ ; } }",0
610,"<S2SV_ModStart> char * temp_filename = osi_calloc ( <S2SV_ModEnd> strlen ( filename <S2SV_ModStart> ; if (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; goto error ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } for ( const list_node_t * enode = list_begin ( section -> entries ) ; enode!= list_end ( section -> entries ) ) { const entry_t * entry = ( const entry_t * ) list_node ( enode ) ; fprintf ( fp, ""%s <S2SV_blank> = <S2SV_blank> %s\\n"", entry -> key, entry -> value ) ; } if ( list_next ( node )!= list_end ( config -> sections ) ) { fputc ( '\\n', fp",0
611,"<S2SV_ModStart> elen ) ; elen += sizeof ( struct pathComponent ) ; <S2SV_ModStart> case 1 : elen += pc -> lengthComponentIdent ; break ; case 2 : elen += pc -> lengthComponentIdent ; break ; case 3 : if ( tolen < 3 ) return - ENAMETOOLONG ; memcpy ( p, ""../"", 3 ) ; p += 3 ; tolen -= 3 ; break ; case 4 : if ( tolen < 2 ) return - ENAMETOOLONG ; memcpy ( p, ""./"", 2 ) ; p += 2 ; tolen -= 2 ; break ; case 5 : comp_len = udf_get_filename ( sb, pc -> componentIdent, pc -> lengthComponentIdent, p, tolen ) ; p += comp_len ; tolen -= comp_len ; break ; case 6 : comp_len = udf_get_filename ( sb, pc -> componentIdent, pc -> lengthComponentIdent, p, tolen ) ; p += comp_len ; tolen -= comp_len ; break ; case 7 : comp_len = udf_get_filename ( sb, pc -> componentIdent, pc -> lengthComponentIdent, p, tolen ) ; p += comp",0
612,"<S2SV_ModStart> ( ndo, "" <S2SV_blank> %s"", tok2str <S2SV_ModEnd> ( nfsproc_str, <S2SV_ModStart> ( ndo, "" <S2SV_blank> %s"", tok2str <S2SV_ModEnd> ( nfsproc_str, <S2SV_ModStart> ( ndo, "" <S2SV_blank> %s"", tok2str <S2SV_ModEnd> ( nfsproc_str, <S2SV_ModStart> ( ndo, "" <S2SV_blank> %s"", tok2str <S2SV_ModEnd> ( nfsproc_str, <S2SV_ModStart> ( ndo, "" <S2SV_blank> %s"" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( ndo, "" <S2SV_blank> %s"", tok2str <S2SV_ModEnd> ( nfsproc_str, <S2SV_ModStart> ( ndo, "" <S2SV_blank> %s"", tok2str <S2SV_ModEnd> ( nfsproc_str, <S2SV_ModStart> ( ndo, "" <S2SV_blank> %s"", tok2str <S2SV_ModEnd> ( nfsproc_str, <S2SV_ModStart> ( ndo, "" <S2SV_blank> %s"", tok2str <S2SV_ModEnd> ( nfsproc_str,",0
613,<S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> case VTP_SUBSET_ADV : ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> case VTP_SUBSET_ADV : ND_,0
614,"<S2SV_ModStart> userData, ctxt -> lineNo, ctxt -> colNo <S2SV_ModStart>, target, ctxt -> lineNo <S2SV_ModStart>, target, ctxt -> colNo <S2SV_ModStart>, target, ctxt -> colNo <S2SV_ModStart>, target, ctxt -> colNo <S2SV_ModStart>, target, ctxt -> colNo <S2SV_ModStart>, target, ctxt -> lineNo <S2SV_ModStart>, target, ctxt -> colNo <S2SV_ModStart>, target, ctxt -> colNo <S2SV_ModStart>, target, ctxt -> colNo <S2SV_ModStart>, target, ctxt -> colNo <S2SV_ModStart>, target, ctxt -> colNo <S2SV_ModStart>, target, ctxt -> lineNo <S2SV_ModStart>, target, ctxt -> colNo <S2SV_ModStart>, target, ctxt -> colNo <S2SV_ModStart>, target, ctxt -> colNo <S2SV_ModStart>, target, ctxt -> colNo <S2SV_ModStart>, target, ctxt -> colNo <S2SV_ModStart>, target, ctxt -> colNo",0
615,<S2SV_ModStart> slow ; * addr_len = sizeof ( * sin ) <S2SV_ModEnd> ; if (,0
616,"<S2SV_ModStart> len ) { u_int <S2SV_ModEnd> pdu_type, pdu_len <S2SV_ModStart> trunc ; } ND_TCHECK1 ( * tptr, sizeof ( rpki_rtr_pdu ) ) ; tptr += sizeof ( rpki_rtr_pdu ) ; tptr += sizeof ( rpki_rtr_pdu ) ; tptr += sizeof ( rpki_rtr_pdu ) ; tptr += sizeof ( rpki_rtr_pdu ) ; tlen -= sizeof ( rpki_rtr_pdu ) ; tptr += sizeof ( rpki_rtr_pdu ) ; tptr += sizeof ( rpki_rtr_pdu ) ; tptr += sizeof ( rpki_rtr_pdu ) ; tptr += sizeof ( rpki_rtr_pdu ) ; tptr += sizeof ( rpki_rtr_pdu ) ; tptr += sizeof ( rpki_rtr_pdu ) ; tlen -= pdu_len ;",0
617,"<S2SV_ModStart> int tagval ; struct stream packet = * s ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> ts <S2SV_blank> request <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; return False ; } <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> ts <S2SV_blank> request <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; return False ; } if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> ts <S2SV_blank> request <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; return False ; } if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> ts <S2SV_blank> request <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet",0
618,"<S2SV_ModStart> ; int chars_processed ; int elt ; int <S2SV_ModEnd> data_size = ndo <S2SV_ModStart> - bp ; if ( ( l = labellen ( ndo, cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; i = * cp ++ ; chars_processed ++ ; if ( chars_processed >= data_size ) { ND_PRINT ( ( ndo, ""<LOOP>"" ) ) ; return ( NULL ) ; } continue ; } if ( ( i = * cp ++ ) & INDIR_MASK ) { if (! compress ) { rp = cp + 1 ; compress = 1 ; } if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; cp = bp + ( ( ( i << 8 ) | * cp ) & 0x3fff ) ; if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; i = * cp ++ ; chars_processed ++ ; if ( chars_processed >= data_size ) { ND_PRINT ( ( ndo, ""<LOOP>"" ) ) ; return ( NULL",0
619,"<S2SV_ModStart> valuelen ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, ""xfs_attr_rmtval_set"", args -> rmtblkno, args -> rmtblkcnt ) ; if ( args -> valuelen!= args -> rmtblkcnt ) { xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, ""xfs_attr_rmtval_set"", args -> rmtblkno, args -> rmtblkcnt ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, ""xfs_attr_rmtval_set"", args -> rmtblkcnt, args -> rmtblkcnt ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, ""xfs_attr_rmtval_set"", args -> rmtblkcnt ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE",0
620,"<S2SV_ModStart> ; int rv = <S2SV_ModStart>, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" <S2SV_ModEnd> ""Content-Length: <S2SV_blank> %d\\r\\n"" "" <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
621,"<S2SV_ModStart> } pid_t child ; if ( is_link ( src ) ) { fprintf ( stderr, ""Error: <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> symbolic <S2SV_blank> link\\n"", src ) ; exit ( 1 ) ; } child = copy_file ( src, dest ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.asoundrc <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } <S2SV_ModEnd> waitpid ( child <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> chown ( dest <S2SV_ModStart> ( dest, S_IRUSR | S_IWUSR <S2SV_ModEnd> ) < 0 <S2SV_ModStart> ""chmod"" ) ; unlink ( src ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
622,<S2SV_ModStart> ; if ( rc!= BFA_STATUS_OK <S2SV_ModEnd> ) return NULL <S2SV_ModStart> return NULL ; <S2SV_ModEnd> hstats -> seconds_since_last_reset <S2SV_ModStart> -> secs_reset ; <S2SV_ModEnd> hstats -> tx_frames <S2SV_ModStart> fc. tx_frames ; hstats -> tx_words ; hstats -> rx_frames = fcstats -> fc. rx_frames ; hstats -> tx_words = fcstats -> fc. tx_words ; hstats -> lip_count = fcstats -> fc -> lip_count ; hstats -> nos_count = fcstats -> fc -> nos_count ; hstats -> loss_of_sync_count = fcstats -> fc. loss_of_syncs ; hstats -> loss_of_missed_frames = fcstats -> fc. loss_of_missed_frames ; hstats -> loss_of_missed_words = fcstats -> fc. loss_of_missed_words ; hstats -> loss_of_missed_frames = fcstats -> fc -> loss_of_missed_frames ; hstats -> loss_of_dropped_frames = fcstats -> fc. loss_of_dropped_frames ; hstats ->,0
623,"<S2SV_ModStart> -> x = Clamp01 <S2SV_ModEnd> ( 1.0f, <S2SV_ModStart> ( 1.0f, Clamp01 <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> ( 1.0f, Clamp01 <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> ( 1.0f, Clamp01 <S2SV_ModEnd> ( 0.0f, <S2SV_ModStart> ( 1.0f, Clamp01 <S2SV_ModEnd> ( 0.0f,",0
624,"<S2SV_ModStart> PKT_LEN_SIZE ) { if ( * head == NULL ) { giterr_clear ( ) ; * out = line ; return 0 ; } <S2SV_ModStart> PKT_LEN_SIZE ) { if ( * head == '#' ) { giterr_clear ( ) ; * out = line ; return flush_pkt ( head ) ; } else { giterr_clear ( ) ; * out = line ; return pack_pkt ( head ) ; } else if ( * line == '#' ) { giterr_clear ( ) ; * out = line ; return flush_pkt ( head ) ; } else if (! git__prefixcmp ( line, ""NAK <S2SV_blank> "" ) ) ret = nak_pkt ( head ) ; else if (! git__prefixcmp ( line, ""ERR <S2SV_blank> "" ) ) ret = err_pkt ( head ) ; } else if (! git__prefixcmp ( line, ""NAK <S2SV_blank> "" ) ) ret = nak_pkt ( head ) ; else if (! git__prefixcmp ( line, ""ERR <S2SV_blank> "" ) ) ret = err_pkt ( head ) ; else if (! git__prefixcmp ( line, ""ERR <S2SV_blank>",0
625,"<S2SV_ModStart> ( check_stack_guard_page ( vma <S2SV_ModEnd>, address )",0
626,<S2SV_ModStart> -> sasl_mechanism ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> <S2SV_ModStart> -> sasl_password = g_strdup ( src -> alternate_password ) ; rec -> <S2SV_ModStart> -> sasl_username = g_strdup ( src -> sasl_username ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ;,0
627,"<S2SV_ModStart> { struct bpf_insn_aux_data <S2SV_ModEnd> * new_data, <S2SV_ModStart> ) ) ; memcpy ( new_data, env -> insn_aux_data, ( prog_len - off - cnt + 1 ) * sizeof ( struct bpf_insn_aux_data ) * off ) ; memcpy ( new_data + off + cnt - 1, old_data + off, sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; memcpy ( new_data + off + cnt - 1, old_data + off + cnt - 1, sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; memcpy ( new_data + off + cnt - 1, old_data + off + cnt - 1 ) ; memcpy ( new_data + off + cnt - 1, sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; memcpy ( new_data + off + cnt - 1, sizeof ( struct bpf_insn_",0
628,"<S2SV_ModStart> ) bp2 ; ND_TCHECK_16BITS ( dp -> ip6f_offlg ) ; if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, ""vflag <S2SV_blank> (0x%08x:%d)"", EXTRACT_32BITS ( & dp -> ip6f_ident ), EXTRACT_16BITS ( & ip6 -> ip6_plen ) - ( long ) bp - bp2 ) ) ; } else { ND_PRINT ( ( ndo, ""frag <S2SV_blank> (0x%08x:%d)"", EXTRACT_32BITS ( & dp -> ip6f_ident ), EXTRACT_16BITS ( & ip6 -> ip6_plen ) - ( long ) bp - bp2 ) - sizeof ( struct ip6_frag ) ) ; }",0
629,<S2SV_ModStart> trunc ; } ND_TCHECK_16BITS ( & bp [ i + 2 ] ) ;,1
630,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
631,"<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( occ0 <S2SV_ModStart> % rowsize ) == 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""Unexpected <S2SV_blank> occ0 <S2SV_blank> %d <S2SV_blank> in <S2SV_blank> PredictorDecodeTile"", ( int ) ( occ0 / rowsize ) ) ; return 0 ; } <S2SV_ModStart> 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""Unexpected <S2SV_blank> occ0 <S2SV_blank> %d <S2SV_blank> in <S2SV_blank> PredictorDecodeTile"", ( int ) ( occ0 / rowsize ) ) ; return 0 ; }",0
632,"<S2SV_ModStart>, tcount, o, datao ; if ( CHECKOVERFLOW ( datao, buf_size, 2 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } c = exif_get_short ( buf + datao, n -> order ) ; datao += 2 ; if ( CHECKOVERFLOW ( c, buf_size, 12 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } n -> entries [ tcount ]. entries = exif_mem_alloc ( ne -> mem, sizeof ( MnoteCanonEntry ) * c ) ; if (! n -> entries [ tcount ]. tag ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } n -> entries [ tcount ]. format = exif_get_short ( buf + o",0
633,<S2SV_ModStart> -> established ) { * minor_status = KG_CTX_INCOMPLETE ; return GSS_S_NO_CONTEXT ; },0
634,<S2SV_ModStart> = NULL ; hugetlbfs_put_super <S2SV_ModEnd> ( sbi ),0
635,"<S2SV_ModStart> HA_ERR_CRASHED_ON_USAGE : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed"", filename <S2SV_ModEnd> ) ; break <S2SV_ModStart> HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed"", filename <S2SV_ModEnd> ) ; break <S2SV_ModStart> HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed <S2SV_blank> after <S2SV_blank> last <S2SV_blank> repair"", filename <S2SV_ModEnd> ) ; break <S2SV_ModStart> HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed"", filename <S2SV_ModEnd> ) ; break <S2SV_ModStart> HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed <S2SV_blank> after <S2SV_blank> last <S2SV_blank> repair"", filename <S2SV_ModEnd> ) ; break",0
636,"<S2SV_ModStart> len ) { size_t <S2SV_ModEnd> alloc = ( <S2SV_ModStart> long hex ; CURLcode res <S2SV_ModEnd> ; if ( <S2SV_ModStart> long hex ; res = Curl_convert_from_network ( handle, & in, 1 ) ; if ( res ) { free ( ns ) ; return NULL ; } string += 2 ; alloc -= 2 ; } ns [ strindex ++ ] = 0 ; if ( olen ) * olen = strindex ; return ns ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
637,"<S2SV_ModStart> RAnalOp next_op ; memset ( & next_op, 0, sizeof ( next_op ) )",0
638,"<S2SV_ModStart> cond_resched ( ) ; iov_iter_advance ( i, copied ) ; pos += copied ; written += copied ; balance_dirty_pages_ratelimited ( mapping ) ; } while ( iov_iter_count ( i ) ) { index = pos >> PAGE_CACHE_SHIFT ; bytes = min_t ( unsigned long, PAGE_CACHE_SIZE - offset, iov_iter_single_seg_count ( i ) ) ; goto again ; } if ( unlikely ( iov_iter_fault_in_readable ( i, bytes ) ) ) { status = - EFAULT ; break ; } status = a_ops -> write_begin ( file, mapping, pos, bytes, flags, & page, fsdata ) ; if ( unlikely ( status < 0 ) ) break ; status = a_ops -> write_end ( file, mapping, pos, bytes, flags, page, fsdata ) ; flush_dcache_page ( page ) ; pagefault_enable ( ) ; flush_dcache_page ( page ) ; pagefault_enable ( ) ; flush_dcache_page ( page ) ; pagefault_enable ( ) ; flush_dcache_page",0
639,"<S2SV_ModStart> } if ( unlikely ( len < ring -> rx_buffersize ) ) { int cnt = 0 ; s32 tmp = len ; while ( 1 ) { desc = ops -> idx2desc ( ring, * slot, & meta ) ; sync_descbuffer_for_device ( ring, meta -> dmaaddr, ring -> rx_buffersize ) ; * slot = next_slot ( ring, * slot ) ; cnt ++ ; tmp -= ring -> rx_buffersize ; } } else { s32 tmp = len ; while ( 1 ) { desc = ops -> idx2desc ( ring, * slot, & meta ) ; sync_descbuffer_for_cpu ( ring, meta -> dmaaddr, ring -> rx_buffersize ) ; } desc = ops -> idx2desc ( ring, * slot, & meta ) ; sync_descbuffer_for_cpu ( ring, meta -> dmaaddr, ring -> rx_buffersize ) ; * slot = next_slot ( ring, * slot ) ; cnt = 0 ; while ( 1 ) { desc = ops -> idx2desc ( ring, * slot, & meta ) ; sync_descbuffer_for_cpu ( ring, meta -> dma",0
640,<S2SV_ModStart> -> pdu_free_state_ref = usm_free_usmStateReference <S2SV_ModEnd> ; def ->,0
641,"<S2SV_ModStart> |= SEEN ; show_object_tag <S2SV_ModEnd> ( obj, <S2SV_ModStart>, name, data ) ; continue ; } if ( obj -> type == OBJ_OBJECT ) { process_object ( revs, ( struct object * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_TREE ) { process_tree ( revs, ( struct tree * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_BLOB ) { process_blob ( revs, ( struct blob * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_TAG ) { obj -> flags |= SEEN ; show_object ( obj, NULL, name, data ) ; continue ; } if ( obj -> type == OBJ_TAG ) { obj -> flags |= SEEN ; show_object ( obj, NULL, path, data ) ; continue ; } if ( obj -> type == OBJ_BLOB ) { process_blob ( revs, ( struct blob * ) obj, show_object, & base, path",0
642,<S2SV_ModStart> = NULL ; if ( prog -> flags & eflags ) sub -> flags |= prog -> flags | eflags ;,0
643,<S2SV_ModStart> 0 ) { if ( zsize!= c -> tile_width || zsize!= c -> tile_height ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> 0 ) { if ( zsize!= c -> tile_height || zsize!= c -> tile_width || zsize!= c -> tile_height ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> 0 ) { if ( zsize!= c -> tile_width || zsize!= c -> tile_height || zsize!= c -> tile_height || zsize!= c -> tile_height || zsize!= c -> tile_height ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> 0 ) { if ( zsize!= c -> tile_width || zsize!= c -> tile_height || zsize!= c -> tile_height || zsize!= c -> tile_width || zsize!= c -> tile_height || zsize!= c -> tile_height || zsize!= c -> tile_height || zsize!= c -> tile_width || zsize!= c -> tile_height || zsize!= c -> tile_width || zsize!= c -> tile_height ) return AVERROR_INVALIDDATA ;,0
644,<S2SV_ModStart> lock_ptr ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
645,"<S2SV_ModStart> ; # ifdef NETSNMP_NO_WRITE_SUPPORT switch ( action ) { case MODE_SET_RESERVE1 : snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> type <S2SV_blank>!= <S2SV_blank> int\\n"" ) ; return SNMP_ERR_WRONGTYPE ; } idx = * ( ( long * ) var_val ) ; if ( idx!= 1 ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; }",0
646,<S2SV_ModStart> case 3 : { CheckNumberPixels ( 4 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 5 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 4 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 3 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 1 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 1 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >>,0
647,<S2SV_ModStart> timer ) ; spin_lock ( & timeri -> timer_lock ) ; <S2SV_ModStart> slave_active_lock ) ; spin_unlock ( & timeri -> timer_lock ) ; <S2SV_ModStart> NULL ; } spin_unlock ( & timeri -> timer_lock ) ; mutex_unlock ( & timeri -> timer_lock ) ;,0
648,"<S2SV_ModStart> len ; } if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return len ; } <S2SV_ModStart> len ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 6)"" ) ) ; return len ; } <S2SV_ModStart> len ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 6)"" ) ) ; return len ; } <S2SV_ModStart> len ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 6)"" ) ) ; return len ; } <S2SV_ModStart> len ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 6)"" ) ) ; return len ; } <S2SV_ModStart> len ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank>",0
649,"<S2SV_ModStart> -> has_va ; ut32 arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config, ""io.va"", ( binobj -> info )? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config, ""bin.baddr"", baseaddr ) ; r_config_set ( r -> config, ""asm.bits"", bits ) ; r_config_set ( r -> config, ""anal.arch"", arch ) ; r_config_set ( r -> config, ""anal.cpu"", info -> cpu ) ; r_asm_use ( r -> assembler, arch ) ; r_core_bin_info ( r, R_CORE_BIN_ACC_ALL, R_CORE_BIN_SET, va, NULL, NULL ) ; r_core_bin_set_cur ( r, binfile ) ; return true ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
650,"<S2SV_ModStart> void sas_probe_devices ( struct asd_sas_port * port <S2SV_ModEnd> ) { struct <S2SV_ModStart> * dev, * n ; spin_lock ( & port -> dev_list_lock ) ; list_for_each_entry_safe ( dev, n, & port -> dev_list, disco_list_node ) { spin_lock_irq ( & port -> dev_list_lock ) ; list_add_tail ( & dev -> disco_list_node, & port -> dev_list ) ; } sas_probe_sata ( port ) ; list_for_each_entry_safe ( dev, n, & port -> dev_list, disco_list_node ) { int err ; err = sas_rphy_add ( dev -> rphy ) ; if ( err ) sas_fail_probe ( dev, __func__, err ) ; else list_del_init ( & dev -> disco_list_node ) ; } list_for_each_entry_safe ( dev, n, & port -> dev_list, disco_list_node ) { spin_lock_irq ( & port -> dev_list_lock",0
651,<S2SV_ModStart> -> u4_bitoffset = ih264d_read_mmco_commands <S2SV_ModEnd> ( ps_dec ),0
652,"<S2SV_ModStart> offset ; int <S2SV_ModEnd> pkt_len ; char <S2SV_ModStart> ; char line [ NETSCREEN_LINE_LENGTH ] ; char <S2SV_ModEnd> cap_int [ NETSCREEN_MAX_INT_NAME_LENGTH <S2SV_ModStart>, & cap_dir, & cap_dst, err, err_info ) ; if ( pkt_len == - 1 ) return FALSE ; pkt_len = parse_netscreen_rec_hdr ( & wth -> phdr, line, err, err_info ) ; if ( pkt_len == - 1 ) return FALSE ; if (! parse_netscreen_hex_dump ( wth -> fh, pkt_len, cap_int, cap_dst, wth -> frame_buffer, err, err_info ) ) return FALSE ; if ( wth -> file_encap == WTAP_ENCAP_UNKNOWN ) wth -> file_encap = WTAP_ENCAP_UNKNOWN ; else if ( wth -> file_encap == WTAP_ENCAP_PER_PACKET ) wth -> file_encap = WTAP_ENCAP_PER_PACKET ; else if ( wth -> file_encap == WTAP_ENCAP",0
653,"<S2SV_ModStart> 0 ) ; if ( s -> s3 -> rrec. seq_num!= s -> s3 -> rrec. seq_num ) { <S2SV_ModStart> 0 ) ; if ( s -> s3 -> rrec. seq_num!= s -> s3 -> rrec. seq_num ) { dtls1_buffer_record ( s, & ( s -> d1 -> processed_rcds ), s -> s3 -> rrec. seq_num ) ; } else { dtls1_buffer_record ( s, & ( s -> d1 -> unprocessed_rcds ), s -> s3 -> rrec. seq_num ) ; } } } s -> d1 -> processed_rcds. epoch = s -> d1 -> r_epoch ; s -> d1 -> unprocessed_rcds. epoch = s -> d1 -> r_epoch + 1 ; s -> d1 -> unprocessed_rcds. epoch = s -> d1 -> r_epoch + 1 ; s -> d1 -> unprocessed_rcds. epoch = s -> d1 -> r_epoch + 1 ;",0
654,<S2SV_ModStart> { int_fast32_t widthOverflow = ( gifFilePtr -> Image. Width * gifFilePtr -> Image. Width ) >> 3 ; int_fast32_t heightOverflow = ( gifFilePtr -> Image. Height * gifFilePtr -> Image. Height ) >> 3 ; if ( widthOverflow > 0 || heightOverflow > 0 ) { gifFilePtr -> SWidth += widthOverflow ; gifFilePtr -> SHeight += heightOverflow ; } SavedImage * sp = & gifFilePtr -> SavedImages [ gifFilePtr -> ImageCount - 1 ] ; if ( topOverflow > 0 || leftOverflow > 0 ) { sp -> ImageDesc. Top -= topOverflow ; } int_fast32_t leftOverflow = ( gifFilePtr -> Image. Left + gifFilePtr -> Image. Width ) >> 3 ; if ( leftOverflow > 0 ) { sp -> ImageDesc. Left += leftOverflow ; } int_fast32_t topOverflow = ( gifFilePtr -> Image. Top + gifFilePtr -> Image. Width - gifFilePtr -> SWidth ) >> 3 ; if ( topOverflow > 0 ) { sp -> ImageDesc. Top -= topOverflow ; } int_fast32_t leftOverflow,0
655,"<S2SV_ModStart> = key_validate ( key ) ; if ( ret == 0 ) { ret = - EOPNOTSUPP ; if ( key -> type -> read ) { up_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; } } else { ret = - EOPNOTSUPP ; if ( key -> type -> read ) { down_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; } } else { ret = - EOPNOTSUPP ; if ( key -> type -> read ) { ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ;",0
656,<S2SV_ModStart> || cherokee_buffer_is_empty ( <S2SV_ModEnd> & conn ->,0
657,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ReadBlob ( image ) ; if ( length!= GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length!= GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlob ( image ) ; if ( length!= GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlob ( image ) ; if ( length!= GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlob ( image ) ; if ( length!= GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlob ( image ) ; if ( length!= GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlob ( image ) ; if ( length!= GetBlobSize ( image )",0
658,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if <S2SV_ModStart> - 1 ; <S2SV_ModEnd> return 0 ;,0
659,<S2SV_ModStart> ; break ; case RDS_CMSG_MASKED_ATOMIC_FADD : rm -> atomic. op_m_fadd. nocarry_mask = args -> m_fadd. nocarry_mask ; break ; case RDS_CMSG_ATOMIC_CSWP : rm -> atomic. op_m_cswp. compare = args -> cswp. compare ; rm -> atomic. op_m_cswp. swap = args -> cswp. swap ; rm -> atomic. op_m_cswp. nocarry_mask = args -> m_cswp. nocarry_mask ; break ; case RDS_CMSG_ATOMIC_FADD : rm -> atomic. op_m_fadd. add = args -> fadd. add ; rm -> atomic. op_m_fadd. nocarry_mask = args -> m_fadd. nocarry_mask ; break ; case RDS_CMSG_MASKED_ATOMIC_CSWP : rm -> atomic. op_m_cswp. nocarry_mask = args -> m_cswp. nocarry_mask ; break ; case RDS_CMSG_ATOMIC,0
660,"<S2SV_ModStart> bus ] ; if ( bi == NULL ) { pr_err ( ""%s: <S2SV_blank> pci <S2SV_blank> [%s] <S2SV_blank> has <S2SV_blank> wrong <S2SV_blank> bus <S2SV_blank> %d <S2SV_blank> info!\\n"", __func__, dev -> name, dev -> bus ) ; return ; } <S2SV_ModEnd> si = &",1
661,"<S2SV_ModStart> ; rdsdebug ( ""size <S2SV_blank> %zu <S2SV_blank> flags <S2SV_blank> 0x%x <S2SV_blank> timeo <S2SV_blank> %ld\\n"" <S2SV_ModEnd>, size,",0
662,"<S2SV_ModStart> if ( snprintf <S2SV_ModEnd> ( spath, <S2SV_ModStart> iface ) >= sizeof ( spath ) ) return - 1 ; if ( name ) flog ( LOG_ERR, ""failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"", name, val, iface ) ;",0
663,"<S2SV_ModStart> 0 ) { if ( len < 9 ) { t1mac_output_data ( ( byte * ) s, len - 9 ) ; return ; } <S2SV_ModStart> * s ; if ( len < 9 ) { t1mac_output_data ( ( byte * ) s, len - 9 ) ; return ; } <S2SV_ModStart> s ++ ; if ( len < 9 ) { t1mac_output_data ( ( byte * ) s, len - 9 ) ; return ; }",0
664,"<S2SV_ModStart> 0 ) { ret = <S2SV_ModStart> data ) ; if ( ret == 0 ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> data ) ; mutt_hcache_delete ( hc, ctx -> hdrs [ i ] -> data, strlen ( ctx -> hdrs [ i ] -> data ) ) ; } else if ( ret == 0 ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> data ) ; mutt_hcache_delete ( hc, ctx -> hdrs [ i ] -> data, strlen ( ctx -> hdrs [ i ] -> data ) ) ; } } # ifdef USE_HCACHE if ( ctx -> hdrs [ i ] -> changed ) { mutt_hcache_store ( hc, ctx -> hdrs [ i ] -> data, strlen ( ctx -> hdrs [ i ] -> data ), ctx -> hdrs [ i ], 0 ) ; } else if ( ret == 0 ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> data ) ; mutt_hcache_delete ( hc, ctx -> hdrs [ i ] -> data",0
665,<S2SV_ModStart> objp ) ; * objp = NULL ;,1
666,"<S2SV_ModStart> ; result = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, NULL, TEMP_FAILURE_RETRY (",0
667,"<S2SV_ModStart> ; goto discard ; } if ( dh -> dccph_type == DCCP_PKT_RESET ) { dcb -> dccpd_reset_code = DCCP_RESET_CODE_NO_CONNECTION ; goto discard ; } if ( dh -> dccph_type == DCCP_PKT_CLOSEREQ ) { dccp_rcv_CLOSEREQ ( sk, skb ) ; dcb -> dccpd_reset_code = DCCP_RESET_CODE_CLOSER <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
668,"<S2SV_ModStart> struct msixcap msixcap ; <S2SV_ModStart> ( dev, <S2SV_ModEnd> msix_table_init ( dev <S2SV_ModStart> ( dev, <S2SV_ModEnd> msix_table_init ( dev <S2SV_ModStart> ( dev, <S2SV_ModEnd> msix_table_init ( dev <S2SV_ModStart> ( dev, <S2SV_ModEnd> msix_table_init ( dev <S2SV_ModStart> ( dev, <S2SV_ModEnd> msix_table_init ( dev",0
669,<S2SV_ModStart> goto out ; mutex_lock ( & dentry -> d_inode -> i_mutex ) ; <S2SV_ModStart> upperdentry ) ; mutex_unlock ( & dentry -> d_inode -> i_mutex ) ; } else { mutex_unlock ( & dentry -> d_inode -> i_mutex ) ; },0
670,<S2SV_ModStart> while ( isspace <S2SV_ModEnd> ( * p,0
671,"<S2SV_ModStart> ; if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; }",0
672,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",1
673,<S2SV_ModStart> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
674,"<S2SV_ModStart> NULL ) goto cleanup <S2SV_ModEnd> ; status = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> pkiDebug ( ""found <S2SV_blank> kdcPkId <S2SV_blank> in <S2SV_blank> AS <S2SV_blank> REQ\\n"" <S2SV_ModStart> = 0 ; <S2SV_ModEnd> pkiDebug ( ""found <S2SV_blank> kdcPkId <S2SV_blank> in <S2SV_blank> AS <S2SV_blank> REQ\\n"" <S2SV_ModStart> = 0 ; <S2SV_ModEnd> pkiDebug ( ""found <S2SV_blank> kdcPkId <S2SV_blank> in <S2SV_blank> AS <S2SV_blank> REQ\\n""",0
675,<S2SV_ModStart> precno ++ ) { if ( precno >= reslevel -> num_precincts_x * reslevel -> num_precincts_y ) { av_freep ( & prec -> zerobits ) ; av_freep ( & prec -> cblkincl ) ; av_freep ( & prec -> cblk ) ; } if ( precno >= reslevel -> num_precincts_x * reslevel -> num_precincts_y ) { if ( precno >= reslevel -> num_precincts_x * reslevel -> num_precincts_y ) { av_freep ( & prec -> zerobits ) ; av_freep ( & prec -> zerobits ) ; av_freep ( & prec -> cblkincl ) ; } if ( precno >= reslevel -> num_precincts_x * reslevel -> num_precincts_y ) { if ( precno >= reslevel -> num_precincts_x * reslevel -> num_precincts_y ) { av_freep ( & band -> prec ) ; } else { av_freep,0
676,"<S2SV_ModStart> ; if ( ctxt -> instate == XML_PARSER_EOF ) { xmlFatalErrMsgStr ( ctxt, XML_ERR_UNDECLARED_ENTITY, ""PEReference: <S2SV_blank> %s; <S2SV_blank> not <S2SV_blank> found\\n"", name ) ; }",0
677,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
678,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> select_tx_mode ( const <S2SV_ModStart> ) { return ONLY_4X4 <S2SV_ModEnd> ; } else <S2SV_ModStart> else { if ( cpi -> sf. tx_size_search_method == USE_LARGESTALL ) { return ALLOW_32X32 ; } else if ( cpi -> sf. tx_size_search_method == USE_FULL_RD ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ TX_MODE_SELECT ]? ALLOW_32X32 : TX_MODE_SELECT ; } else { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ TX_MODE_SELECT ]? ALLOW_32X32 :,0
679,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
680,"<S2SV_ModStart> ; magfact = magfact_r ( im -> gdes [ vidx ]. data, im -> gdes [ vidx ]. ds_cnt ) ; <S2SV_ModStart> ; magfact = magfact_r ( im -> gdes [ vidx ]. data, im -> gdes [ vidx ]. ds_cnt ) ; <S2SV_ModStart> ; magfact = magfact_r ( im -> gdes [ vidx ]. data, im -> gdes [ vidx ]. ds ) ; if ( magfact > magfact_r ( im -> gdes [ vidx ]. data, im -> gdes [ vidx ]. ds_cnt ) ) magfact = magfact_r ( im -> gdes [ vidx ]. data, im -> gdes [ vidx ]. ds_cnt ) ; <S2SV_ModStart> ; magfact = magfact_r ( im -> gdes [ vidx ]. data, im -> gdes [ vidx ]. ds ) ; if ( magfact > magfact_r ( im -> gdes [ vidx ]. data, im -> gdes [ vidx ]. ds ) ) magfact = magfact_r ( im -> gdes [ vidx ].",0
681,"<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > SIZE_MAX <S2SV_ModStart> NULL ; } sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Elf_(Verneed)\\n"" ) ; goto beach ; } sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Elf_(Verneed)\\n"" ) ; goto beach ; } sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Elf_(Verneed)\\n"" ) ; goto beach ; } sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Elf_(Verneed)\\n"" ) ; goto beach ; }",0
682,<S2SV_ModStart> ) b ; if ( buf1 -> size > buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return - 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 0 ; } else,0
683,"<S2SV_ModStart>, & scn, CDF_SHORT_SEC_SIZE ( & h ), CDF_SEC_SIZE ( & h ), CDF_SHORT_SEC_SIZE ( & h ), CDF_SHORT_SEC_SIZE ( & h ), CDF_SHORT_SEC_SIZE ( & h ), CDF_SEC_SIZE ( & h ), CDF_SHORT_SEC_SIZE ( & h ), CDF_SHORT_SEC_SIZE ( & h ), CDF_SHORT_SEC_SIZE ( & h ), CDF_SHORT_SEC_SIZE ( & h ), CDF_SEC_SIZE ( & h ), CDF_SHORT_SEC_SIZE ( & h ), CDF_SHORT_SEC_SIZE ( & h ), CDF_SHORT_SEC_SIZE ( & h ), CDF_SHORT_SEC_SIZE ( & h ), CDF_SHORT_SEC_SIZE ( & h ), CDF_SHORT_SEC_SIZE ( & h ), CDF_SHORT_SEC_SIZE ( & h ), CDF_SHORT_SEC_SIZE ( & h ), CDF_SHORT_SEC_SIZE ( & h ), CDF_SHORT_SEC_SIZE ( & h ), CDF_",0
684,"<S2SV_ModStart> ; size_t sz = SMP_ALIGN ( size ) >> PAGE_SHIFT ; if ( sz > ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) sz = ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ; if (! info ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __",0
685,"<S2SV_ModStart> eof ) { if ( vars -> str. len > vars -> end - vars -> ptr ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Input <S2SV_blank> variables <S2SV_blank> exceed <S2SV_blank> the <S2SV_blank> limit <S2SV_blank> change <S2SV_blank> max_input_vars <S2SV_blank> in <S2SV_blank> php.ini."", max_vars ) ; return FAILURE ; }",0
686,<S2SV_ModStart> ; if ( protocol < 0 || protocol > AX25_MAX_PROTOCOL ) return - EINVAL,0
687,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs,",0
688,"<S2SV_ModStart> -> _eip ; rc = assign_eip_near ( ctxt, <S2SV_ModEnd> src. val <S2SV_ModStart> src. val <S2SV_ModEnd> ) ; break",0
689,"<S2SV_ModStart> list. name, true",1
690,"<S2SV_ModStart> secret, void * <S2SV_ModStart> * th ; struct ceph_crypto_key * old_key <S2SV_ModEnd> ; int dlen <S2SV_ModStart> dlen = ceph_x_decrypt ( secret, p, end, dbuf, TEMP_TICKET_BUF_LEN ) ; if ( dlen <= 0 ) { ret = dlen ; goto out ; } dout ( "" <S2SV_blank> decrypted <S2SV_blank> %d <S2SV_blank> bytes\\n"", dlen ) ; dp = dbuf ; dend = dp + dlen ; tkt_struct_v = ceph_decode_8 ( & dp ) ; tkt_struct_v = ceph_x_decrypt ( secret, p, end, dbuf, TEMP_TICKET_BUF_LEN ) ; if ( dlen <= 0 ) { ret = dlen ; goto out ; } dout ( "" <S2SV_blank> decrypted <S2SV_blank> %d <S2SV_blank> bytes\\n"", dlen ) ; dp = dbuf ; dend = dp + dlen ; tkt_struct_v = ceph_decode_8 ( & dp ) ; tkt_struct_v = ceph_decode_8 ( & tp ) ; tkt_struct_v = ceph_",0
691,"<S2SV_ModStart> / 2 ; if ( count > UINT32_MAX / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", count, ( UINT32_MAX / sizeof ( Pairs ) ) ) ) ;",0
692,<S2SV_ModStart> -> skip_clock_update = 1 <S2SV_ModEnd> ; prev ->,0
693,"<S2SV_ModStart> -> tlsext_tick_lifetime_hint ) ; if (! s -> session -> tlsext_tick_lifetime_hint ) { al = SSL_AD_DECODE_ERROR ; SSLerr ( SSL_F_SSL3_GET_NEW_SESSION_TICKET, ERR_R_INVALID_PARAMETER ) ; goto err ; }",0
694,"<S2SV_ModStart> ; r = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, EPOLLIN, & b -> <S2SV_ModStart> b ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> b ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> b ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> b ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> b ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> b ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> b ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> b ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> b ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> b ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & b -> io_event_source, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; TEMP_FAILURE_RETRY (",0
695,<S2SV_ModStart> ( errors ) return TEST_ERR_MAJOR_BAD <S2SV_ModEnd> ; else return,0
696,"<S2SV_ModStart> = NULL ; case EXPR_ARRAY_REF : * elem_rtrn = NULL ; * field_rtrn = xkb_atom_text ( ctx, expr -> array_ref. element ) ; * field_rtrn = xkb_atom_text ( ctx, expr -> array_ref. field ) ; * index_rtrn = xkb_atom_text ( ctx, expr -> array_ref. entry ) ; * index_rtrn = xkb_atom_text ( ctx, expr -> array_ref. entry ) ; * field_rtrn = xkb_atom_text ( ctx, expr -> array_ref. field ) ; * index_rtrn = xkb_atom_text ( ctx, expr -> array_ref. entry ) ; * index_rtrn = expr -> array_ref. entry ; return true ; case EXPR_IDENT : * elem_rtrn = NULL ; * field_rtrn = xkb_atom_text ( ctx, expr -> ident. ident ) ; * field_rtrn = xkb_atom_text ( ctx, expr -> ident. ident ) ; * index_r",0
697,<S2SV_ModStart> lun ) sas_eh_defer_cmd <S2SV_ModEnd> ( cmd ),0
698,"<S2SV_ModStart> ; REQ ( n, funcdef ) ; name = NEW_IDENTIFIER ( CHILD ( n, name_i ) ) ; if (! name ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) return NULL ; args = ast_for_arguments ( c, CHILD ( n, name_i + 1 ) ) ; if (! args ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 2 ) ) == RPAREN ) { returns = ast_for_expr ( c, CHILD ( n, name_i + 3 ) ) ; if (! returns ) return NULL ; name_i += 2 ; } body = ast_for_suite ( c, CHILD ( n, name_i + 3 ) ) ; if (! body ) return NULL ; get_last_end_pos ( body, & end_lineno, & end_col_offset ) ; if (! body ) return NULL ; get_last_end_pos ( body, & end_lineno, & end_col_offset ) ; body = ast_for_suite ( c, CHILD ( n,",0
699,<S2SV_ModStart> ; int err ; mutex_lock ( & sock -> sk_wmem_lock ) ; <S2SV_ModStart> = 0 ; mutex_unlock ( & sock -> sk_wmem_lock ) ;,0
700,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
701,"<S2SV_ModStart> ; lock_sock ( sk <S2SV_ModEnd> ) ; if <S2SV_ModStart> 0 ) { atomic_sub ( len, & sk -> sk_omem_alloc ) ; mutex_lock ( & sk -> sk_omem_alloc ) ; <S2SV_ModStart> 0 ) { mutex_unlock ( & sk -> sk_omem_alloc ) ; mutex_unlock ( & sk -> sk_omem_alloc ) ; mutex_unlock ( & sk -> sk_omem_alloc ) ; mutex_lock ( & sk -> sk_omem_alloc ) ; mutex_unlock ( & sk -> sk_omem_alloc ) ; mutex_lock ( & sk -> sk_omem_alloc ) ; mutex_unlock ( & sk -> sk_omem_alloc ) ; mutex_unlock ( & sk -> sk_omem_alloc ) ; mutex_unlock ( & sk -> sk_omem_alloc ) ; mutex_unlock ( & sk -> sk_omem_alloc ) ; mutex_unlock ( & sk -> sk_omem_alloc ) ; mutex_unlock ( & sk -> sk_omem_alloc ) ; mutex_unlock ( & sk -> sk_omem_alloc ) ; mutex_unlock ( & sk -> sk",0
702,<S2SV_ModStart> == 3 ) { unsigned int * o_row_count = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_element_count + 1 ) ) ; * o_row_count = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_column_count + 1 ) ) ; * o_values = ( REALTYPE * ) malloc ( sizeof ( double ) * ( * o_element_count + 1 ) ) ; * o_row_count = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_column_count + 1 ) ) ; * o_values = ( REALTYPE * ) malloc ( sizeof ( double ) * ( * o_element_count + 1 ) ) ; * o_row_count = ( unsigned int ) malloc ( sizeof ( unsigned int ) *,0
703,"<S2SV_ModStart> ) break ; if ( WPG_Palette. StartIndex >= WPG_Palette. NumOfEntries ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( WPG_Palette. StartIndex >= WPG_Palette. NumOfEntries ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ) break ; if ( WPG_Palette. StartIndex >= WPG_Palette. NumOfEntries ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( WPG_Palette. StartIndex >= WPG_Palette. NumOfEntries ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( WPG_Palette. StartIndex >= WPG_Palette. NumOfEntries ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( WPG_Palette. StartIndex >= WPG_Palette. NumOfEntries ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( WPG_Palette. StartIndex >= WPG_Palette. NumOfEntries ) ThrowReader",0
704,<S2SV_ModStart> ctxt ) { int rc = X86EMUL_CONTINUE ; <S2SV_ModStart> ) ) ) rc = <S2SV_ModStart> ) ; return rc <S2SV_ModEnd> ; } <S2SV_null>,1
705,,1
706,"<S2SV_ModStart> 0 ) ; if ( res ) { ret = devm_ioremap_nocache ( dev, res -> start, resource_size ( res ) ) ; if ( ret ) goto error ; ret = devm_ioremap_nocache ( dev, res -> start, resource_size ( res ) ) ; if ( ret ) goto error ; ret = devm_ioremap_nocache ( dev, res -> start, resource_size ( res ) ) ; if ( ret ) goto error ; ret : devm_ioremap_nocache ( dev, res -> start, resource_size ( res ) ) ; if ( ret ) goto error ; ret = devm_ioremap_nocache ( dev, res -> start, resource_size ( res ) ) ; if ( ret ) goto error ; ret = devm_ioremap_nocache ( dev, res -> start, resource_size ( res ) ) ; if ( ret ) goto error ; ret = - ENOMEM ; freq_reg += HI3660_STUB_CLOCK_DATA ; for ( i = 0 ; i < HI3660_CLK_STUB_NUM ; i ++ ) { ret = devm_",0
707,"<S2SV_ModStart> : if ( psf_header_sanity_check ( psf ) ) { psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; return ; } ; <S2SV_ModStart> : if ( psf_header_sanity_check ( psf ) ) { psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; return ; } ; <S2SV_ModStart> : if ( psf_header_sanity_check ( psf ) ) { psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; return ; } ; <S2SV_ModStart> : if ( psf_header_sanity_check ( psf ) ) { psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; return ; } ; if ( psf_header_sanity_check ( psf ) ) { psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; return ; } ; if ( psf_header_sanity_check ( psf ) ) { psf",0
708,"<S2SV_ModStart> out_mutex ; } new_size = i_size_read ( inode ) ; <S2SV_ModStart> ioffset ) ; ext4_inode_block_unlocked_dio ( inode ) ; inode_dio_wait ( inode ) ; handle = ext4_journal_start ( inode, EXT4_HT_TRUNCATE, EXT4_HT_TRUNCATE ) ; if ( IS_ERR ( handle ) ) { ret = PTR_ERR ( handle ) ; goto out_mutex ; } <S2SV_ModEnd> credits = ext4_writepage_trans_blocks <S2SV_ModStart> EXT4_HT_TRUNCATE, EXT4_HT_TRUNCATE, EXT4_HT_TRUNCATE, EXT4_HT_TRUNCATE, EXT4_HT_TRUNCATE, EXT4_HT_TRUNCATE, EXT4_HT_TRUNCATE, EXT4_HT_TRUNCATE, EXT4_HT_TRUNCATE, EXT4_HT_TRUNCATE, EXT4_HT_TRUNCATE, EXT4_HT_TRUNCATE, EXT4_HT_TRUNCATE, EXT4_HT_TRUNCATE, EXT4_HT_TRUN",0
709,"<S2SV_ModStart> uint32_t track_size ; if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } <S2SV_ModStart> ; if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } <S2SV_ModStart> ; if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } <S2SV_ModStart> ; if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } <S2SV_ModStart> ; if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0",0
710,"<S2SV_ModStart> ; sk -> sk_sndbuf = min_t ( u32, val * 2, SOCK_MIN_SNDBUF ) ; sk -> sk_write_space ( sk ) ;",0
711,"<S2SV_ModStart> * bh ; struct logicalVolDesc * lvd <S2SV_ModEnd> ; int ret <S2SV_ModStart> TAG_IDENT_LVD ) ; lvd = ( struct logicalVolDesc * ) bh -> b_data ; ret = udf_sb_alloc_partition_maps ( sb, le32_to_cpu ( lvd -> mapTableLength ) ) ; if ( ret ) goto out_bh ; for ( i = 0 ; i < sbi -> s_partitions && offset < le32_to_cpu ( lvd -> mapTableLength ) ; i ++, offset += gpm -> partitionMapLength ) { struct udf_part_map * map = & sbi -> s_partmaps [ i ] ; map -> s_volumeseqnum = le16_to_cpu ( gpm1 -> volSeqNum ) ; map -> s_partition_num = le16_to_cpu ( gpm1 -> partitionNum ) ; map -> s_partition_type = UDF_TYPE1_MAP15 ; map -> s_volumeseqnum = le16_to_cpu ( gpm1 -> volSeqNum ) ; map -> s_partition_type = UDF_TYPE1_MAP15 ; map",0
712,"<S2SV_ModStart> long n ; jas_eprintf ( ""warning: <S2SV_blank> ignoring <S2SV_blank> BMP <S2SV_blank> decoder <S2SV_blank> options\\n"" ) ; JAS_DBGLOG ( 1, ( ""BMP <S2SV_blank> header: <S2SV_blank> magic <S2SV_blank> 0x%x; <S2SV_blank> siz <S2SV_blank> %d; <S2SV_blank> res1 <S2SV_blank> %d; <S2SV_blank> res2 <S2SV_blank> %d; <S2SV_blank> off <S2SV_blank> %d\\n"", hdr. magic, hdr. siz, hdr. reserved1, hdr. reserved2, hdr. off ) ) ; JAS_DBGLOG ( 1, ( ""BMP <S2SV_blank> header: <S2SV_blank> magic <S2SV_blank> 0x%x; <S2SV_blank> siz <S2SV_blank> %d; <S2SV_blank> res1 <S2SV_blank> %d; <S2SV_blank> res2 <S2SV_blank> %d; <S2SV_blank> off <S2SV_blank> %d\\n"", hdr. magic, hdr. siz, hdr. reserved1, hdr. reserved2, hdr. off ) ) ; if (! ( info = bmp_getinfo ( in ) ) ) { jas_eprintf ( ""cannot <S2SV_blank> get <S2SV_blank> info\\n"" ) ; return 0 ; } JAS_DBGLOG ( 1, ( ""BMP <S2SV_blank> information: <S2SV_blank> len <S2SV_blank> %d; <S2SV_blank> width <S2SV_blank> %d; <S2SV_blank> height <S2SV_blank>",0
713,"<S2SV_ModStart> struct va_format vaf <S2SV_ModEnd> ; va_start ( <S2SV_ModStart> dev ), func <S2SV_ModEnd>, line, <S2SV_ModStart> ( ""[0000:00:00.0]:[%s:%d]: <S2SV_blank> %pV"", func <S2SV_ModEnd>, line,",1
714,"<S2SV_ModStart> u4_ofst ) ; memset ( ps_cabac -> au1_ctxt_models, 0, sizeof ( au1_ctxt_models_t ) ) ;",0
715,"<S2SV_ModStart> ) ; save_text_from_text_view <S2SV_ModEnd> ( g_tv_comment, <S2SV_ModStart> FILENAME_COMMENT ) ; if ( g_expert_mode ) { int n = select_next_page_no ( pages [ PAGENO_SUMMARY ]. page_no, NULL ) ; log_info ( ""switching <S2SV_blank> to <S2SV_blank> page_no:%d"", n ) ; gtk_notebook_set_current_page ( assistant, n ) ; return ; } if ( g_expert_mode ) { int n = select_next_page_no ( pages [ PAGENO_SUMMARY ]. page_no, NULL ) ; log_info ( ""switching <S2SV_blank> to <S2SV_blank> page_no:%d"", n ) ; gtk_notebook_set_current_page ( assistant, n ) ; return ; } } if ( g_expert_mode ) { int n = select_next_page_no ( pages [ PAGENO_SUMMARY ]. page_no, NULL ) ; log_info ( ""switching <S2SV_blank> to <S2SV_blank> page_no:%d"", n ) ; gtk_notebook_set_current_page ( assistant, n )",0
716,<S2SV_ModStart> media_pad_desc pad ; <S2SV_ModEnd> if ( copy_to_user <S2SV_ModStart> entity ) continue <S2SV_ModEnd> ; media_device_kpad_to_upad ( <S2SV_ModStart> entity ) continue <S2SV_ModEnd> ; media_device_kpad_to_upad ( <S2SV_ModStart> entity ) continue <S2SV_ModEnd> ; media_device_kpad_to_upad (,0
717,<S2SV_ModStart> off ++ ; if ( line -> indent >= c -> contents_indent ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = 1 ; break ; } <S2SV_ModStart> off ++ ; if ( line -> indent >= c -> contents_indent ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = 1 ; break ; } <S2SV_ModStart> off ++ ; if ( line -> indent >= c -> contents_indent ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = 1 ; break ; } off ++ ; total_indent += line -> indent ; if ( line -> indent >= c -> contents_indent ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = 1 ; break ; } off ++ ; total_indent += line -> indent ; if ( line -> indent >= c -> contents_indent ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect =,0
718,"<S2SV_ModStart>, extent ; size_t width, <S2SV_ModStart>, height ; if ( bytes_per_line > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; width = sun_info. width ; height = sun_info. height ; <S2SV_ModStart> height ; if ( width > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( height > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( height > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( height > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( height > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( height > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> if ( height > GetBlobSize ( image ) ) ThrowReaderException",0
719,"<S2SV_ModStart> client, krb5_enctype krbtgt_etype <S2SV_ModEnd>, hdb_entry_ex * <S2SV_ModStart>, hdb_entry_ex * client <S2SV_ModEnd>, hdb_entry_ex * <S2SV_ModStart>, hdb_entry_ex * client <S2SV_ModEnd>, krb5_principals spp",0
720,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
721,"<S2SV_ModStart> -> loc_addr ; ireq -> opt = rcu_dereference_protected ( ireq -> inet_opt, sock_owned_by_user ( sk ) )",0
722,<S2SV_ModStart> struct xmlparser parser ; if ( bufsize < sizeof ( parser. startelt ) ) { parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. starteltfunc = NameValueParserStartElt ; parser. starteltfunc = NameValueParserEndElt ; parser. starteltfunc = NameValueParserStartElt ; parser. endeltfunc = NameValueParserEndElt ; parser. datafunc = NameValueParserGetData ; parser. attfunc = 0 ; },0
723,"<S2SV_ModStart>!= 0 ) { __wsum csum = <S2SV_ModEnd> csum_partial ( skb_transport_header <S2SV_ModStart> + tlen, <S2SV_ModEnd> offset, 0 <S2SV_ModStart>, 0 ) <S2SV_ModEnd> ) ; put_cmsg <S2SV_ModStart> SOL_IP, IP_CHECKSUM, sizeof ( __wsum ), & csum ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
724,"<S2SV_ModStart> pfn ) ; r = - EINVAL ; goto unmap_pages <S2SV_ModEnd> ; } gfn <S2SV_ModStart> gfn ) ; r = - EINVAL ; goto unmap_pages <S2SV_ModEnd> ; } gfn <S2SV_ModStart> unmap_pages : if ( r ) { printk ( KERN_ERR ""kvm_iommu_map_address:"" ""iommu <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> map <S2SV_blank> pfn=%llx\\n"", pfn ) ; r = - EINVAL ; goto unmap_pages <S2SV_ModEnd> ; } gfn",0
725,"<S2SV_ModStart> ; memcpy ( & b [ 6 ], cmd -> msg, cmd -> msg_len ) ; state -> config -> send_command ( fe, 0x72, sizeof ( b ) - ( 6 - cmd -> msg_len ), b, NULL, NULL ) ;",0
726,<S2SV_ModStart> perf_event_context * ctx ; ctx = perf_event_ctx_lock <S2SV_ModEnd> ( event ) <S2SV_ModStart> state = PERF_EVENT_STATE_OFF <S2SV_ModEnd> ; } <S2SV_null>,0
727,<S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] ) ; value |= ( unsigned int ) ( value & 0xffffffff <S2SV_ModEnd> ) ; } <S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] ) ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] ) ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] ) ; value |= ( unsigned int ) ( value & 0xffffffff <S2SV_ModEnd> ) ; },0
728,"<S2SV_ModStart> ) ; struct nat_entry <S2SV_ModEnd> * ne ; <S2SV_ModStart> return false ; <S2SV_ModEnd> i = f2fs_kmem_cache_alloc <S2SV_ModStart>, GFP_NOFS ) ; i -> nid = nid ; i -> state = NID_NEW ; if ( radix_tree_preload ( GFP_NOFS ) ) { spin_lock ( & nm_i -> nid_list_lock ) ; err = __insert_nid_to_list ( sbi, i, FREE_NID_LIST, true ) ; spin_unlock ( & nm_i -> nid_list_lock ) ; radix_tree_preload_end ( ) ; if ( err ) { kmem_cache_free ( free_nid_slab, i ) ; return false ; } spin_lock ( & nm_i -> nid_list_lock ) ; err = __insert_nid_to_list ( sbi, i, FREE_NID_LIST, true ) ; spin_unlock ( & nm_i -> nid_list_lock ) ; radix_tree_preload_end ( ) ; if ( err ) { kmem_cache_free ( free_nid_slab,",0
729,<S2SV_ModStart>. post_proc_flag ; flags -> color_ref_frame_flag = ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) | ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) ; flags -> color_mb_modes_flag = ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) ; flags -> <S2SV_ModStart> noise_level ; flags -> color_ref_frame_flag = ctx -> dbg_color_ref_frame_flag ; flags -> color_mb_modes_flag = ctx -> dbg_color_mb_modes_flag ; flags -> color_b_modes_flag = ctx -> dbg_color_b_modes_flag ; flags -> color_b_modes_flag = ctx -> dbg_color_b_modes_flag ;,0
730,"<S2SV_ModStart> 0 ) ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Missing <S2SV_blank> extra <S2SV_blank> info\\n"" ) ; return - EBADR ; } memcpy ( & extra, RING_GET_REQUEST ( & vif -> tx, cons ), sizeof ( extra ) ) ; <S2SV_ModStart> ++ cons ; netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Invalid <S2SV_blank> extra <S2SV_blank> type: <S2SV_blank> %d\\n"" <S2SV_ModEnd>, extra.",0
731,<S2SV_ModStart> ) ) ; hdr -> sadb_satype = SADB_SATYPE_UNSPEC ; hdr -> sadb_satype_len = ( sizeof ( struct sadb_msg ) / sizeof ( uint64_t ) ) ; hdr -> sadb_satype_len = ( sizeof ( struct sadb_msg ) / sizeof ( uint64_t ) ) ; hdr -> sadb_satype_len = ( sizeof ( struct sadb_msg ) / sizeof ( uint64_t ) ) ; hdr -> sadb_satype_len = ( sizeof ( struct sadb_msg ) / sizeof ( uint64_t ) ) ; hdr -> sadb_satype_len = ( sizeof ( struct sadb_msg ) / sizeof ( uint64_t ) ) ; hdr -> sadb_satype_len = ( sizeof ( struct sadb_msg ) / sizeof ( uint64_t ) ) ; hdr -> sadb_msg_errno = ( uint8_t ) 0 ; hdr -> sadb_msg_errno = ( uint8_t ) 0 ; hdr -> sadb_msg_,0
732,"<S2SV_ModStart> ) return ; memset ( & r1, 0, sizeof ( r1 ) ) ;",1
733,"<S2SV_ModStart> - 1 ; luaL_checkstack ( L, <S2SV_ModEnd> 1, ""too <S2SV_blank> many <S2SV_blank> results"" <S2SV_ModStart> 1, ""too <S2SV_blank> many <S2SV_blank> results"" ) ; switch ( * fmt ) { case 'b' : case 'B' : case 'H' : case 'L' : case 'T' : case 'I' : { lua_Number res = getinteger ( data + pos, h. endian, issigned, size ) ; correctbytes ( ( char * ) & res, sizeof ( res ), h. endian ) ; lua_pushnumber ( L, res ) ; break ; } case 'x' : { lua_Number res = getinteger ( data + pos, h. endian, issigned, size ) ; correctbytes ( ( char * ) & res, sizeof ( res ), h. endian ) ; lua_pushnumber ( L, res ) ; break ; } case 'y' : { lua_Number res = getinteger ( data + pos, h. endian, issigned, size ) ; correctbytes ( ( char * ) & d, sizeof ( d ), h. endian ) ; lua_pushnumber ( L, res ) ; break ; } case 'z' : {",0
734,"<S2SV_ModStart> = 0 ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6 ) ) ; goto trunc ; } <S2SV_ModStart> = 0 ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6 ) ) ; goto trunc ; } ND_TCHECK2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )",0
735,"<S2SV_ModStart> ; int n ; if (! body -> data ) break ; n = ( len - sizeof ( struct oz_multiple_fixed ) + 1 ) / body -> unit_size ; while ( n -- ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, body -> unit_size ) ; data += body -> unit_size ; } break ; case OZ_DATA_F_MULTIPLE_EXTEND : { struct oz_multiple_fixed * body = ( struct oz_multiple_fixed * ) data_hdr ; u8 * data = body -> data ; int count ; int i ; if (! unit_size ) break ; count = data_len / unit_size ; for ( i = 0 ; i < count ; i ++ ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, body -> unit_size ) ; data += body -> unit_size ; } } break ; case OZ_DATA_F_ISOC_EXTEND : { struct oz_isoc_ext * body = ( struct oz_isoc_ext",0
736,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vpx_usec_timer_start ( & <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,1
737,"<S2SV_ModStart> { fprintf ( stderr <S2SV_ModEnd>, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) <S2SV_ModStart> } int rv = copy_file_as_user ( src, dest, getuid ( ), getgid ( ) ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest <S2SV_ModEnd> ) ; } <S2SV_ModStart> rv = copy_file_as_user ( src, dest, getuid ( ), getgid ( ) ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest <S2SV_ModEnd> ) ; }",0
738,<S2SV_ModStart> IMAP_FATAL ; return ; } if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { <S2SV_ModStart> IMAP_FATAL ; return ; },0
739,<S2SV_ModStart> return res ; if ( dev -> ex_dev ) return <S2SV_ModEnd> sas_discover_event ( dev <S2SV_ModStart> DISCE_PROBE ) ; if ( dev -> ex_dev -> ex_dev && dev -> ex_dev -> ex_dev -> ex_dev -> ex_dev -> ex_dev -> ex_dev -> ex_dev -> ex_dev -> ex_dev && dev -> ex_dev -> ex_dev -> ex_dev -> ex_dev -> ex_dev -> ex_dev -> ex_dev -> ex_dev -> ex_dev -> ex_dev -> ex_dev -> ex_dev -> ex_dev -> ex_dev -> ex_dev -> ex_dev -> ex_dev -> ex_dev -> ex_dev -> ex_dev -> ex_dev -> ex_dev -> ex_dev -> ex_dev -> ex_dev -> ex_dev -> ex_dev -> ex_dev -> ex_dev -> ex_dev -> ex_dev -> ex_dev -> ex_dev -> ex_dev -> ex_dev -> ex_dev -> ex_dev -> ex_dev -> ex_dev -> ex_dev -> ex_dev -> ex_dev -> ex_dev ->,0
740,"<S2SV_ModStart> ; if ( unlikely ( <S2SV_ModStart> ) ) ) { EXT4_ERROR_INODE ( inode, ""p_ext <S2SV_blank> > <S2SV_blank> EXT_MAX_EXTENT!"" ) ; return - EFSCORRUPTED ; } neh = path [ depth ]. p_hdr ; memset ( neh, 0, sizeof ( struct ext4_extent_header ) ) ; memset ( neh, 0, sizeof ( struct ext4_extent_header ) ) ; memset ( neh, 0, sizeof ( struct ext4_extent_header ) ) ; memset ( neh, 0, sizeof ( struct ext4_extent_header ) ) ; memset ( neh, 0, sizeof ( struct ext4_extent_header ) ) ; memset ( neh, 0, sizeof ( struct ext4_extent_header ) ) ; memset ( neh, 0, sizeof ( struct ext4_extent_header ) ) ; memset ( neh, 0, sizeof ( struct ext4_extent_header ) ) ; memset ( neh, 0, sizeof ( struct ext4_extent_header ) ) ; memset ( neh, 0, sizeof ( struct ext4_extent",0
741,<S2SV_ModStart> = 0 ; sfb = ptr_hbe_txposer -> sfb [ ptr_hbe_txposer -> sfb [ ptr_hbe_txposer -> sfb ] [ ptr_hbe_txposer -> sfb ] [ ptr_hbe_txposer -> sfb ] [ ptr_hbe_txposer -> sfb ] [ ptr_hbe_txposer -> sfb ] [ ptr_hbe_txposer -> sfb ] [ ptr_hbe_txposer -> sfb ] [ ptr_hbe_txposer -> sfb [ ptr_hbe_txposer -> sfb [ ptr_hbe_txposer -> sfb ] [ ptr_hbe_txposer -> sfb ] [ ptr_hbe_txposer -> sfb ] [ ptr_hbe_txposer -> sfb ] [ ptr_hbe_txposer -> sfb ] [ ptr_hbe_txposer -> sfb ] [ ptr_hbe_txposer -> sfb ] [ ptr_hbe_txposer -> sfb ] [ ptr_hbe_txposer -> sfb ] [ ptr_hbe_txposer -> sfb ],0
742,"<S2SV_ModStart> ] ; # if 0 cmap_len = get_ushort ( & tga [ 5 ] ) ; cmap_entry_size = get_ushort ( & tga [ 7 ] ) ; <S2SV_ModStart> # endif image_w = get_ushort ( & tga [ 8 ] ) ; image_h = get_ushort ( & tga [ 10 ] ) ; pixel_depth = tga [ 13 ] ; image_desc = tga [ 18 ] ; * bits_per_pixel = ( unsigned int ) image_w ; * bits_per_pixel = ( unsigned int ) pixel_depth ; * bits_per_pixel = ( unsigned int ) image_w ; * bits_per_pixel = ( unsigned int ) image_h ; * flip_image = ( unsigned int ) image_desc ; * bits_per_pixel = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if (! id ) { fprintf ( stderr, ""tga_readheader: <S2SV_blank> memory <S2SV_blank> out\\n"" ) ; return 0 ; }",0
743,<S2SV_ModStart> ssize_t ret ; if ( unlikely (! capable ( CAP_SYS_RAWIO ) ) ) return - EPERM,0
744,"<S2SV_ModStart> tp ) { struct timespec old = * tp ; <S2SV_ModStart> ( which_clock ) == CPUCLOCK_SCHED ) { old -> tv_sec = div_u64_rem <S2SV_ModEnd> ( cpu. <S2SV_ModStart> cpu. sched, NSEC_PER_SEC, & tp -> tv_sec ) ; } else { cputime_to_timespec ( cpu. cpu, tp ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
745,<S2SV_ModStart> tif_dir ; uint32 <S2SV_ModEnd> nstrips ; if,0
746,"<S2SV_ModStart> lua_module ) ; luaLuaFile * file = ap_get_module_config ( r -> per_dir_config, & lua_module ) <S2SV_ModStart> r ) ; luaLuaFile * file = ap_get_module_config ( r -> per_dir_config, & lua_module ) ; const lua_authz_provider_spec * prov_spec = parsed_require_line ; if ( file == NULL ) { ap_log_rerror ( APLOG_MARK, APLOG_CRIT, 0, r, APLOGNO ( 02319 ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> \'%s\' <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> function)"", prov_spec -> function_name, file ) ; ap_lua_release_state ( L, spec, r ) ; return AUTHZ_GENERAL_ERROR ; }",0
747,"<S2SV_ModStart> * prev ; unsigned long size ; <S2SV_ModStart> address & PAGE_MASK ; size = vma -> vm_end - address ; grow = ( vma -> vm_start - address ) >> PAGE_SHIFT ; error = - ENOMEM ; if ( grow <= vma -> vm_pgoff ) { error = - ENOMEM ; if ( grow <= vma -> vm_pgoff ) { error = acct_stack_growth ( vma, size, grow ) ; if ( error ) { anon_vma_unlock_write ( vma -> anon_vma ) ; perf_event_mmap ( vma ) ; } } else { spin_lock ( & mm -> mmap_lock ) ; mm -> mmap_locked_vm -= grow ; vm_stat_account ( mm, vma -> vm_flags, grow ) ; anon_vma_interval_tree_pre_update_vma ( vma ) ; anon_vma_interval_tree_post_update_vma ( vma ) ; perf_event_mmap ( vma ) ; } }",0
748,"<S2SV_ModStart> { umode_t mode ; error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & mode <S2SV_ModStart>, & mode, & acl ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> 0 ) return error <S2SV_ModEnd> ; } set_acl",0
749,"<S2SV_ModStart> long mountflags, <S2SV_ModEnd> char * data <S2SV_ModStart> if ( mount ( fsname, target, fstype, mountflags & ~ MS_REMOUNT, data ) ) { if ( optional ) { INFO ( ""failed <S2SV_blank> to <S2SV_blank> mount <S2SV_blank> \'%s\' <S2SV_blank> on <S2SV_blank> \'%s\' <S2SV_blank> (optional): <S2SV_blank> %s"", fsname, target, strerror ( errno ) ) ; return 0 ; } else { INFO ( ""failed <S2SV_blank> to <S2SV_blank> mount <S2SV_blank> \'%s\' <S2SV_blank> on <S2SV_blank> \'%s\'"", fsname, target ) ; return - 1 ; } } # ifdef HAVE_STATVFS if ( statvfs ( fsname, & sb ) == 0 ) { DEBUG ( ""failed <S2SV_blank> to <S2SV_blank> mount <S2SV_blank> \'%s\' <S2SV_blank> on <S2SV_blank> \'%s\'"", fsname, target ) ; return - 1 ; } # endif if ( mount ( fsname, target, fstype, mountflags & ~ MS_REMOUNT, data ) ) { if ( optional ) { INFO ( ""failed <S2SV_blank> to <S2SV_blank> mount <S2SV_blank> \'%s\' <S2SV_blank> on <S2SV_blank> \'%s\' <S2SV_blank> (optional): <S2SV_blank> %s"", fsname, target ) ; return - 1 ; } # endif",0
750,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
751,<S2SV_ModStart> -> it_overrun ; <S2SV_ModEnd> ++ timr ->,0
752,<S2SV_ModStart> ; if ( proto_end == url ) return 0,0
753,<S2SV_ModStart> static_key * done_key <S2SV_ModEnd> ) { static <S2SV_ModStart> flags ) ; <S2SV_ModEnd> return true ;,0
754,"<S2SV_ModStart> -> actual ; mutex_lock ( & io_data -> lock ) ; <S2SV_ModStart> 1 ) ; mutex_unlock ( & io_data -> lock ) ; <S2SV_ModStart> -> ffs_eventfd &&! ( io_data -> kiocb -> ki_flags & IOCB_EVENTFD ) ) eventfd_signal ( io_data -> ffs -> ffs_eventfd, 1 ) ;",0
755,<S2SV_ModStart> ; if ( IPCB ( skb ) -> opt. <S2SV_ModEnd> srr &&!,0
756,<S2SV_ModStart> GLOBALS_ARE_RESET ( ) && <S2SV_ModStart> GLOBALS_ARE_RESET ( ) && <S2SV_ModStart> GLOBALS_ARE_RESET ( ) && <S2SV_ModStart> GLOBALS_ARE_RESET ( ),0
757,"<S2SV_ModStart> prep ) { struct trusted_key_options * new_o ; size_t datalen = prep -> datalen ; char * datablob = kmalloc ( datalen + 1, GFP_KERNEL ) ; if (! datablob ) { ret = - ENOMEM ; goto out ; } datablob [ datalen ] = '\\0' ; ret = datablob_parse ( datablob, new_p, new_o ) ; if ( ret!= Opt_update ) { ret = - EINVAL ; kfree ( new_p ) ; goto out ; } new_p -> migratable = p -> migratable ; new_p -> key_len = p -> key_len ; memcpy ( new_p -> key, p -> key, p -> key_len ) ; dump_payload ( new_p ) ; dump_payload ( new_p ) ; dump_payload ( new_o ) ; dump_options ( new_o ) ;",0
758,<S2SV_ModStart> 1 ; } if ( n <= 0 ) { break ; } <S2SV_ModEnd> v |= ( <S2SV_ModStart> << 24 ) <S2SV_ModEnd> ; if (,0
759,<S2SV_ModStart> int lci_o ; mutex_lock ( & rose_loopback_lock ) ; <S2SV_ModStart> 2 ] ; mutex_unlock ( & rose_loopback_lock ) ; <S2SV_ModStart> 4 ] ; mutex_unlock ( & rose_loopback_lock ) ;,0
760,"<S2SV_ModStart> goto out_free ; memslot = id_to_memslot ( kvm -> memslots, mem -> slot ) ; if ( memslot -> id >= KVM_MEMORY_SLOTS_NUM ) goto out_free ;",0
761,<S2SV_ModStart> indev!= NULL && indev -> ifa_list,0
762,"<S2SV_ModStart> fdt ) ; if ( base >= path_len ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart> case FDT_PROP : include = want >= 2 ; stop_at = offset ; prop = fdt_get_property_by_offset ( fdt, offset, NULL ) ; str = fdt_string ( fdt, fdt32_to_cpu ( prop -> nameoff ) ) ; if (! str ) return - FDT_ERR_BADSTRUCTURE ; if ( str_in_list ( str, exc_prop, exc_prop_count ) ) include = 0 ; break ; case FDT_END_NODE : depth -- ; if ( depth == FDT_MAX_DEPTH ) return - FDT_ERR_BADSTRUCTURE ; name = fdt_get_name ( fdt, offset, & len ) ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ;",0
763,"<S2SV_ModStart> & dff_chunk_header, sizeof ( DFFChunkHeader ) <S2SV_ModEnd> ) || bcount <S2SV_ModStart> & dff_chunk_header, sizeof ( DFFChunkHeader ) <S2SV_ModEnd> ) || bcount <S2SV_ModStart> & dff_chunk_header, sizeof ( DFFChunkHeader ) <S2SV_ModEnd> ) || strncmp <S2SV_ModStart> ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"",",0
764,<S2SV_ModStart> case NID_pkcs7_e <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
765,"<S2SV_ModStart> ) ) { if ( ( loops % 100 ) ) { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ), zmalloc_used_memory ( ) ) ; } else { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ), zmalloc_used_memory ( ) ) ; } else { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ) ) ; } else { redisLog ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ), listLength ( server. slaves ), zmalloc_used_memory ( ) ) ; }",0
766,"<S2SV_ModStart> } if ( ( options -> flags & UV_PROCESS_SETUID ) && setuid ( options -> uid ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setuid()"" ) ; _exit ( 127 ) ; } if ( ( options -> flags & UV_PROCESS_SETUSR ) && setusr ( options -> usr ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setusr()"" ) ; _exit ( 127 ) ; } if ( ( options -> flags & UV_PROCESS_SETPWD ) && setgid ( options -> pwd ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setgid()"" ) ; _exit ( 127 ) ; } if ( ( options -> flags & UV_PROCESS_SETUSR ) && setusr ( options -> usr ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setusr()"" ) ; _exit ( 127 ) ; } if ( ( options -> flags & UV_PROCESS_SETPWD ) && setgid ( options -> pwd ) ) { uv__write_int ( error",0
767,"<S2SV_ModStart> priv ; int ret <S2SV_ModEnd>, wo ; <S2SV_ModStart> - EOPNOTSUPP ; } if ( wbuf == NULL || rlen == 0 ) { warn ( ""i2c <S2SV_blank> wr: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", wlen ) ; return - EOPNOTSUPP ; } <S2SV_ModStart> = cmd ; memcpy ( & st -> data [ 1 ], wbuf, wlen ) ; memcpy ( & st -> data [ 1 + wlen ], rbuf, rlen ) ; if ( wo ) ret = dvb_usb_generic_write ( d, st -> data, 1 + wlen, rbuf, rlen, 0 ) ; else ret = dvb_usb_generic_rw ( d, st -> data, 1 + wlen, rbuf, rlen, 0 ) ; mutex_unlock ( & d -> data_mutex ) ; return ret ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
768,"<S2SV_ModStart> priv -> protocol_timeout = g_timeout_add_seconds ( 5, ( GSourceFunc ) _client_protocol_timeout, client ) ; g_debug ( ""GsmXSMPClient: <S2SV_blank> New <S2SV_blank> client <S2SV_blank> \'%s\'"", client -> priv -> description ) ;",0
769,"<S2SV_ModStart> - 1 ; if ( i + book -> dim > n ) { ogg_error ( book, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> entries <S2SV_blank> in <S2SV_blank> vorbis <S2SV_blank> book\\n"" ) ; return ogg_error ( book, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> entries <S2SV_blank> in <S2SV_blank> vorbis <S2SV_blank> book\\n"" ) ; return ogg_error ( book, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> entries <S2SV_blank> in <S2SV_blank> vorbis <S2SV_blank> book\\n"" ) ; } <S2SV_ModStart> - 1 ; if ( i + book -> dim > n ) { ogg_error ( book, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> entries <S2SV_blank> in <S2SV_blank> vorbis <S2SV_blank> book\\n"" ) ; return ogg_error ( book, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> entries <S2SV_blank> in <S2SV_blank> vorbis <S2SV_blank> book\\n"" ) ; return ogg_error ( book, ""invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> entries <S2SV_blank> in <S2SV_blank> vorbis <S2SV_blank> book\\n"" ) ; }",0
770,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> %12.3f <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
771,<S2SV_ModStart> ) ; } new_root_item -> index = index ; new_root_item -> len = sizeof ( * new_root_item ) - sizeof ( * dir_item ) - sizeof ( * dir_item ) - sizeof ( * dir_item ) - sizeof ( * dir_item ) - sizeof ( * dir_item ) - sizeof ( * dir_item ) - sizeof ( * dir_item ) - sizeof ( * dir_item ) - sizeof ( * dir_item ) - sizeof ( * dir_item ) - sizeof ( * dir_item ) - sizeof ( * dir_item ) - sizeof ( * dir_item ) - sizeof ( * dir_item ) - sizeof ( * dir_item ) - sizeof ( * dir_item ) - sizeof ( * dir_item ) - sizeof ( * dir_item ) - sizeof ( * dir_item ) - sizeof ( * dir_item ) - sizeof ( * dir_item ) - sizeof ( * dir_item ) - sizeof ( * dir_item ) - sizeof ( * dir_item ) - sizeof ( * dir_item ) - sizeof ( * dir_item ) - sizeof ( * dir_item ) - sizeof ( * dir_item,0
772,<S2SV_ModStart> fp ) ; spin_lock ( & unix_gc_lock ) ; <S2SV_ModStart> unix_sk ( s ) <S2SV_ModEnd> ; list_del_init ( <S2SV_ModStart> unix_tot_inflight -- ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
773,"<S2SV_ModStart> NULL ) { size_t <S2SV_ModEnd> chanmap_size = psf <S2SV_ModStart> channels * sizeof ( psf -> channel_map [ 0 ] ) ; if ( ( psf -> channel_map = malloc ( chanmap_size ) ) == NULL ) return SFE_MALLOC_FAILED ; memcpy ( psf -> channel_map, map_info -> channel_map, chanmap_size ) ; } else if ( psf -> channel_map!= NULL ) { size_t chanmap_size = psf -> sf. channels * sizeof ( psf -> channel_map [ 0 ] ) ; if ( ( psf -> channel_map = malloc ( chanmap_size ) ) == NULL ) return SFE_MALLOC_FAILED ; memcpy ( psf -> channel_map, map_info -> channel_map, chanmap_size ) ; } else { size_t chanmap_size = psf -> sf. channels * sizeof ( psf -> channel_map [ 0 ] ) ; if ( ( psf -> channel_map = malloc ( chanmap_size ) ) == NULL ) return SFE_MALLOC_FAILED ; memcpy ( psf -> channel_map, map_info -> channel_",0
774,"<S2SV_ModStart> this_w, this_h, vpx_bit_depth_t bit_depth <S2SV_ModStart> 16 ) { if (! check_scale_factors ( other_w, other_h, this_w, this_h, bit_depth ) ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } sf -> x_step_q4 = scaled_x ( 16, sf ) ; sf -> x_step_q4 = scaled_y ( 16, sf ) ; sf -> y_step_q4 = scaled_y ( 16, sf ) ; if ( vp9_is_scaled ( sf ) ) { sf -> scale_value_x = unscaled_value ; sf -> scale_value_y = unscaled_value ; } else { if ( sf -> y_step_q4 == 16 ) { sf -> predict [ 0 ] [ 0 ] = vp9_convolve_copy ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve_avg ; sf -> predict [ 1 ] [ 0 ] = vp9_convolve8_horiz ; sf ->",0
775,<S2SV_ModStart> { int32_t nestsize ; if ( ms -> nest_size [ ms -> nest_level ] < size ) return GPMF_ERROR_BAD_STRUCTURE ;,0
776,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
777,"<S2SV_ModStart> ip6t_entry ) && ( <S2SV_ModStart> verdict < 0 || unconditional ( & e <S2SV_ModEnd> -> ipv6 ) <S2SV_ModStart> verdict < 0 || visited ) { unsigned int oldpos, size ; if ( ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && t -> verdict < - NF_MAX_VERDICT - 1 && unconditional ( & e -> ipv6 ) ) || visited ) { unsigned int oldpos, size ; if ( ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && t -> verdict < - NF_MAX_VERDICT - 1 && unconditional ( & e -> ipv6 ) ) || visited ) { unsigned int size ; size = sizeof ( struct ip6t_entry ) ; if ( ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET )",0
778,<S2SV_ModStart> -> xrefs = safe_calloc ( <S2SV_ModEnd> pdf -> n_xrefs,0
779,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
780,"<S2SV_ModStart> ( sk ) ; atomic_sub ( sk -> sk_omem_alloc, & sk -> sk_omem_alloc ) ; <S2SV_ModStart> ( opt ) { atomic_sub ( sk -> sk_omem_alloc, & sk -> sk_omem_alloc ) ; } <S2SV_ModStart> ( opt ) { atomic_sub ( sk -> sk_omem_alloc, & sk -> sk_omem_alloc ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
781,"<S2SV_ModStart> ; BIO * cmsbio <S2SV_ModEnd> = NULL, <S2SV_ModStart> tmpin = NULL ; if ( tmpin == NULL ) { CMSerr ( CMS_F_CMS_VERIFY, CMS_R_INVALID_DATA ) ; goto err ; } <S2SV_ModEnd> scount += CMS_set1_signers_certs <S2SV_ModStart> ) ) { CMSerr ( CMS_F_CMS_VERIFY, CMS_R_SIGNER_CERTIFICATE_NOT_FOUND ) ; goto err ; } if ( scount!= sk_CMS_SignerInfo_num ( sinfos ) ) { CMSerr ( CMS_F_CMS_VERIFY, CMS_R_SIGNER_CERTIFICATE_NOT_FOUND ) ; goto err ; } if ( scount!= sk_CMS_SignerInfo_num ( sinfos ) ) { CMSerr ( CMS_F_CMS_VERIFY, CMS_R_SIGNER_CERTIFICATE_NOT_FOUND ) ; goto err ; } if ( scount!= sk_CMS_SignerInfo_num ( sinfos ) ) { CMSerr ( CMS_F_CMS_VERIFY, CMS_R_SIGNER_CERTIFICATE_NOT_FOUND ) ; goto err ; } if ( scount!= sk_CMS_SignerInfo",0
782,"<S2SV_ModStart> ) ) { struct ipv6_txoptions * opt = rcu_dereference_protected ( np -> txopt, sock_owned_by_user ( sk ) ) ; opt -> opt_name = optname ; opt -> opt_len = sizeof ( * opt ) ; opt -> opt_namelen = sizeof ( * np -> txopt ) ; opt -> opt_namelen = sizeof ( * np -> txopt ) ; } <S2SV_ModEnd> break ; case <S2SV_ModStart> case IPV6_MULTICAST_FILTERS : { struct ipv6_txoptions * opt = rcu_dereference_protected ( np -> txopt, sock_owned_by_user ( sk ) ) ; opt -> opt_name = optname ; opt -> opt_len = sizeof ( * opt ) ; opt -> opt_namelen = sizeof ( * np -> txopt ) ; opt -> opt_namelen = sizeof ( * np -> txopt ) ; opt -> opt_namelen = sizeof ( * np -> txopt ) ; opt -> opt_namelen = sizeof ( * np -> txopt ) ; opt -> opt_namelen = opt -> opt_namelen ;",0
783,<S2SV_ModStart> ( ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_net_ops <S2SV_ModStart> ) ; sctp_protosw_exit <S2SV_ModEnd> ( ) ;,0
784,<S2SV_ModStart> cs_flags ) ; # if! defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) ; # if! defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined ( __GNUC__ ) || defined (,0
785,"<S2SV_ModStart> in_ifaddr * ) ptr <S2SV_ModEnd> ; struct netdev_notifier_info <S2SV_ModStart> struct netdev_notifier_info info ; dev = rcu_dereference_protected ( dev -> priv, lockdep_is_held ( & masq_netdev_priv ) ) <S2SV_ModEnd> ; return masq_device_event <S2SV_ModStart> & info, rcu_dereference_protected ( masq_netdev_priv ) <S2SV_ModEnd> ) ; return",0
786,"<S2SV_ModStart> ( current -> mm <S2SV_ModEnd>!= mm ) <S2SV_ModStart> goto out ; if ( end < start ) { base_pages_to_flush = TLB_FLUSH_ALL ; count_vm_tlb_event ( NR_TLB_LOCAL_SHOOTDOWN ) ; local_flush_tlb ( ) ; } else { base_pages_to_flush = ( end - start ) >> PAGE_SHIFT ; if ( base_pages_to_flush > tlb_single_page_flush_ceiling ) { base_pages_to_flush = TLB_FLUSH_ALL ; count_vm_tlb_event ( NR_TLB_LOCAL_FLUSH_ONE ) ; __flush_tlb_single ( addr ) ; } } else { for ( addr = start ; addr < end ; addr += PAGE_SIZE ; addr += PAGE_SIZE ) { count_vm_tlb_event ( NR_TLB_LOCAL_FLUSH_ONE ) ; __flush_tlb_single ( addr ) ; } } trace_tlb_flush ( TLB_LOCAL_MM_SHOOTDOWN, base_pages_to_flush )",0
787,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> index ) ; if ( stream -> psnr_sse_total > 255.0 ) ovpsnr = sse_to_psnr ( ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; else ovpsnr = sse_to_psnr ( ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; fprintf ( stderr, "" <S2SV_blank> %.3f"", ovpsnr ) ; for ( i = 0 ; i < 4 ; i ++ ) { fprintf ( stderr, "" <S2SV_blank> %.3f"", stream -> psnr_totals [ i ] / stream -> psnr_count ) ; }",0
788,"<S2SV_ModStart> val ) { <S2SV_ModEnd> int i = <S2SV_ModStart> ( fp ) ; if ( temp [ i ] == 0 || temp [ i ] == '\\0' || temp [ i ] == EOF ) { char * ret ; temp [ i ] = 0 ; ret = malloc ( strlen ( temp ) + 10 ) ; sprintf ( ret, ""%s"", temp ) ; fclose ( fp ) ; return ret ; } temp [ i ] = fgetc ( fp ) ; if ( foundit == 1 && ( temp [ i ] == 0 || temp [ i ] == '\\0' || temp [ i ] == EOF ) ) { char * ret ; temp [ i ] = 0 ; ret = malloc ( strlen ( temp ) + 10 ) ; sprintf ( ret, ""%s"", temp ) ; fclose ( fp ) ; return ret ; } switch ( temp [ i ] ) { case 0 : temp [ i ] = 0 ; ret = malloc ( strlen ( temp ) + 10 ) ; sprintf ( ret, ""%s"", temp ) ; break ; case '\\0' : temp [ i ] = 0 ; ret = malloc ( strlen ( temp ) + 10 ) ;",0
789,<S2SV_ModStart> task ) { <S2SV_ModEnd> del_timer ( & <S2SV_ModStart> ) ) return ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
790,<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen (,1
791,"<S2SV_ModStart> ; # ifdef ENABLE_DOT1 if ( addr_str_length > sizeof ( addr_str_buffer ) ) { log_warn ( ""lldp"", ""invalid <S2SV_blank> address <S2SV_blank> length <S2SV_blank> in <S2SV_blank> LLDP <S2SV_blank> PDU <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; return - 1 ; } <S2SV_ModStart> NULL ) { if ( addr_str_length > sizeof ( orgid ) ) { log_warn ( ""lldp"", ""invalid <S2SV_blank> address <S2SV_blank> length <S2SV_blank> in <S2SV_blank> LLDP"" ) ; return - 1 ; } <S2SV_ModStart> NULL ) { if ( addr_str_length > sizeof ( orgid ) ) { log_warn ( ""lldp"", ""invalid <S2SV_blank> address <S2SV_blank> length <S2SV_blank> in <S2SV_blank> LLDP <S2SV_blank> PDU <S2SV_blank> on <S2SV_blank> %s"", hardware -> h_ifname ) ; return - 1 ; } <S2SV_ModStart> NULL ) { if ( addr_str_length > sizeof ( orgid ) ) { log_warn ( ""lldp"", ""invalid <S2SV_blank> address <S2SV_blank> in <S2SV_blank> LLDP"" ) ; return - 1 ; } <S2SV_ModStart> NULL ) { if ( addr_str_length > sizeof ( orgid ) ) { log_warn ( ""lldp"", """,0
792,"<S2SV_ModStart> case BPLIST_UINT : { plist_data_t data = plist_new_plist_data ( ) ; data -> type = PLIST_STRING ; data -> length = UINT_TO_HOST ( * object, 1 ) ; data -> length = UINT_TO_HOST ( * object, 1 ) ; data -> length = UINT_TO_HOST ( * object, 1 ) ; data -> length = UINT_TO_HOST ( * object, 1 ) ; data -> length = UINT_TO_HOST ( * object, 1 ) ; data -> length = UINT_TO_HOST ( * object, 1 ) ; data -> length = UINT_TO_HOST ( * object, 1 ) ; data -> length = UINT_TO_HOST ( * object, 1 ) ; data -> length = UINT_TO_HOST ( * object, 1 ) ; data -> length = UINT_TO_HOST ( * object, 1 ) ; data -> length = UINT_TO_HOST ( * object, 1 ) ; data -> length = UINT_TO_HOST ( * object, 1 ) ; data -> length = UINT_TO_HOST ( * object, 1 ) ; data -> length = UINT_TO_HOST (",0
793,"<S2SV_ModStart> ( ) ; TRACE_DEBUG ( ""CIDER=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_CIDER ) ) ; TRACE_DEBUG ( ""PHY1ILR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1ILR ) ) ; TRACE_DEBUG ( ""PHY1IHR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1IHR ) ) ; if ( ksz8851ReadReg ( interface, KSZ8851_CIDER )!= KSZ8851_REV_A3_ID ) { return ERROR_WRONG_IDENTIFIER ; } ksz8851DumpReg ( interface ) ; context -> frameId = 0 ; context -> txBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; context -> rxBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; if ( context -> txBuffer == NULL || context -> rxBuffer == NULL ) {",0
794,<S2SV_ModStart> all_channels_lock ) ; <S2SV_ModEnd> wake_up_interruptible ( &,0
795,"<S2SV_ModStart> flags ) { struct btrfs_dir_item * di = NULL ; <S2SV_ModStart> & XATTR_REPLACE ) { di = btrfs_lookup_dir_item ( trans, root, path, btrfs_ino ( inode ), name, name_len, - 1 ) ; if ( IS_ERR ( di ) ) { ret = PTR_ERR ( di ) ; goto out ; } ret = btrfs_delete_one_dir_name ( trans, root, path, di ) ; if ( ret ) goto out ; ret = - ENODATA ; goto out ; } else if ( di ) { ret = - ENODATA ; goto out ; } ret = btrfs_delete_one_dir_name ( trans, root, path, btrfs_ino ( inode ), name, name_len, 0 ) ; if ( IS_ERR ( di ) ) { ret = PTR_ERR ( di ) ; goto out ; } ret = btrfs_lookup_xattr ( NULL, root, path, btrfs_ino ( inode ), name, name_len, 0 ) ; if ( IS_ERR ( di ) ) { ret = P",0
796,"<S2SV_ModStart> 0xbf ) return 1 ; if ( op -> len!= buf_len ) { pr_err ( ""%s: <S2SV_blank> len <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", __func__, op -> len ) ; return 1 ; } if ( op -> len!= buf_len ) { pr_err ( ""%s: <S2SV_blank> len <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", __func__, op -> len ) ; return 1 ; } <S2SV_ModStart> 1 ; } if ( op -> len!= buf_len ) { pr_err ( ""%s: <S2SV_blank> len <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", __func__, op -> len ) ; return 1 ; } if ( op -> len!= buf_len ) { pr_err ( ""%s: <S2SV_blank> len <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", __func__, op -> len ) ; return 1 ; }",0
797,<S2SV_ModStart> client ) ; g_object_unref <S2SV_ModEnd> ( & client <S2SV_ModStart> proxy ) ; g_object_unref <S2SV_ModEnd> ( & client,0
798,"<S2SV_ModStart> plane, encode_block_intra <S2SV_ModEnd> ) ; }",0
799,"<S2SV_ModStart> ; if ( key -> state == KEY_IS_UNINSTANTIATED <S2SV_ModEnd> ) return - <S2SV_ModStart> EPERM ; } ret = key_seal ( new_p, new_o ) ; if ( ret < 0 ) { pr_info ( ""trusted_key: <S2SV_blank> key_seal <S2SV_blank> failed <S2SV_blank> (%d)\\n"", ret ) ; kzfree ( new_p ) ; goto out ; } ret = key_seal ( new_p, new_o ) ; if ( ret < 0 ) { pr_info ( ""trusted_key: <S2SV_blank> key_seal <S2SV_blank> failed <S2SV_blank> (%d)\\n"", ret ) ; kzfree ( new_p ) ; goto out ; } if ( ret < 0 ) { pr_info ( ""trusted_key: <S2SV_blank> key_seal <S2SV_blank> failed <S2SV_blank> (%d)\\n"", ret ) ; goto out ; } ret = key_seal ( new_p, new_o ) ; if ( ret < 0 ) { pr_info ( ""trusted_key: <S2SV_blank> key_seal <S2SV_blank> failed <S2SV_blank> (%d)\\n"", ret ) ; kzfree ( new_p ) ; goto out ; }",0
800,"<S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NE",0
801,"<S2SV_ModStart> ; if ( size > IMAGE_SIZE_MAX ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> size!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - EINVAL ; } <S2SV_ModStart> ) ) { if ( size > IMAGE_SIZE_MAX ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> size!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - EINVAL ; }",0
802,<S2SV_ModStart> len ) {vpn_packet_t <S2SV_ModEnd> outpkt ; outpkt,0
803,<S2SV_ModStart> * ) __get_free_page ( GFP_KERNEL ) ; if ( vmx_msr_bitmap_nested ) { vmx_msr_bitmap_nested = ( unsigned long * ) __get_free_page ( GFP_KERNEL ) ; if (! vmx_msr_bitmap_nested ) goto out5 ; vmx_vmread_bitmap = ( unsigned long * ) __get_free_page ( GFP_KERNEL ) ; if (! vmx_vmread_bitmap ) goto out6 ; vmx_vmread_bitmap = ( unsigned long * ) __get_free_page ( GFP_KERNEL ) ; if (! vmx_vmread_bitmap ) goto out7 ; vmx_vmwrite_bitmap = ( unsigned long * ) __get_free_page ( GFP_KERNEL ) ; if (! vmx_vmwrite_bitmap ) goto out7 ; vmx_vmwrite_bitmap = ( unsigned long * ) __get_free_page ( GFP_KERNEL ) ; if (! vmx_msr_,0
804,<S2SV_ModStart> 0 ) ; if ( link_shdr && link_shdr -> sh_name < bin -> shstrtab_size && link_shdr -> sh_name < bin -> shstrtab_size && <S2SV_ModStart> link_shdr -> sh_name < bin -> shstrtab_size && <S2SV_ModStart> link_shdr -> sh_name < bin -> shstrtab_size && <S2SV_ModStart> link_shdr -> sh_name < bin -> shstrtab_size && link_shdr -> sh_name < bin -> shstrtab_size && link_shdr -> sh_name < bin -> shstrtab_size && link_shdr -> sh_name < bin -> shstrtab_size && <S2SV_ModStart> link_shdr -> sh_name < bin -> shstrtab_size && <S2SV_ModStart> link_shdr -> sh_name && link_shdr -> sh_name < bin -> shstrtab_size && <S2SV_ModStart> link_shdr -> sh_name < bin -> shstrtab_size && link_shdr -> sh_name < bin -> shstrtab_size && link_shdr -> sh_name < bin -> shstrtab_size,0
805,<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ),0
806,<S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> ) )? ( rc -> avg_frame_bandwidth * rc -> avg_gf_interval * af_ratio ) / ( rc -> avg_gf_interval + af_ratio - 1 ) : ( rc -> avg_frame_bandwidth * rc -> avg_gf_interval * af_ratio ) / ( rc -> avg_gf_interval + af_ratio - 1 ) ; # else target = ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval * af_ratio ) / <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
807,"<S2SV_ModStart> i ++ ) { if ( getpwnam ( grent -> gr_gid ) == NULL ) errx ( 1, ""User <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> member <S2SV_blank> of <S2SV_blank> group <S2SV_blank> %s\\n"", grent -> gr_name, grent -> gr_gid ) ; else errx ( 1, ""User <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> member <S2SV_blank> of <S2SV_blank> group <S2SV_blank> %s\\n"", grent -> gr_name, grent -> gr_gid ) ; if ( getpwnam ( grent -> gr_gid ) == NULL ) errx ( 1, ""User <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> member <S2SV_blank> of <S2SV_blank> group <S2SV_blank> %s\\n"", grent -> gr_name, grent -> gr_gid ) ; else errx ( 1, ""User <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> member <S2SV_blank> of <S2SV_blank> group <S2SV_blank> %s\\n"", grent -> gr_name, grent -> gr_gid ) ; }",0
808,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
809,<S2SV_ModStart> INDENT_INCR ; } else { mode -> indent_level ++ ; if ( mode -> indent_level < MAX_INDENT_LEVEL ) { mode -> indent_level -- ; if ( mode -> indent_level < MAX_INDENT_LEVEL ) { mode -> indent_level ++ ; if ( mode -> indent_level < MAX_INDENT_LEVEL ) { mode -> indent_level -- ; if ( mode -> indent_level < MAX_INDENT_LEVEL ) tbl -> indent -= INDENT_INCR ; } } else { mode -> indent_level ++ ; if ( mode -> indent_level < MAX_INDENT_LEVEL ) { mode -> indent_level -- ; if ( mode -> indent_level < MAX_INDENT_LEVEL ) { mode -> indent_level ++ ; if ( mode -> indent_level < MAX_INDENT_LEVEL ) { mode -> indent_level -- ; if ( mode -> indent_level < MAX_INDENT_LEVEL ) tbl -> indent -= INDENT_INCR ; } } else { mode -> indent_level ++ ; if ( mode -> indent_level < MAX_INDENT_LEVEL ) { mode -> indent_level = MAX_INDENT_LEVEL ;,0
810,"<S2SV_ModStart> ; if ( e < b ) { DPRINTF ( ( ""%d: <S2SV_blank> offset <S2SV_blank> begin <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> end <S2SV_blank> %p <S2SV_blank> || <S2SV_blank> %"" SIZE_T_FORMAT ""u"" "" <S2SV_blank> > <S2SV_blank> %"" SIZE_T_FORMAT ""u <S2SV_blank> [%"" SIZE_T_FORMAT ""u <S2SV_blank> %"" SIZE_T_FORMAT ""u]\\n"", line, b, e, ( size_t ) ( e - b ), CDF_SEC_SIZE ( h ), sst -> sst_len ) ) ; errno = EFTYPE ; return - 1 ; } if ( e >= b && ( size_t ) ( e - b ) <= CDF_SEC_SIZE ( h ) * sst -> sst_len ) { DPRINTF ( ( ""%d: <S2SV_blank> offset <S2SV_blank> begin <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> end <S2SV_blank> %p <S2SV_blank> || <S2SV_blank> %"" SIZE_T_FORMAT ""u"" "" <S2SV_blank> > <S2SV_blank> %"" SIZE_T_FORMAT ""u"" """,0
811,<S2SV_ModStart> } # else ( void ) lex_env ; <S2SV_ModStart> : # endif <S2SV_ModEnd> } # if <S2SV_ModStart> : # endif <S2SV_ModEnd> } # endif <S2SV_ModStart> : # endif <S2SV_ModEnd> } # if <S2SV_ModStart> : # endif <S2SV_ModEnd> } # endif <S2SV_ModStart> : # endif <S2SV_ModEnd> } # if <S2SV_ModStart> : # endif <S2SV_ModEnd> } # if <S2SV_ModStart> : # endif <S2SV_ModEnd> } # endif <S2SV_ModStart> : # endif <S2SV_ModEnd> } # if <S2SV_ModStart> : # endif <S2SV_ModEnd> } # if <S2SV_ModStart> : # endif <S2SV_ModEnd> } # if <S2SV_ModStart> : # endif <S2SV_ModEnd> } # endif <S2SV_ModStart> } # endif <S2SV_ModEnd> } # endif <S2SV_ModStart> } # endif # endif <S2SV_ModEnd> } # endif <S2SV_ModStart> : # endif <S2SV_ModEnd> } # if <S2SV_ModStart> : # endif <S2SV_ModEnd> } # endif <S2SV_ModStart> : # endif <S2SV_ModEnd> } # if <S2SV_ModStart> : # endif <S2SV_ModEnd> } # endif <S2SV_ModStart> : # endif <S2SV_ModEnd> } # if <S2SV_ModStart> : # endif <S2SV_ModEnd> } # if <S2SV_ModStart> : # endif <S2SV_ModEnd> } # endif <S2SV_ModStart> : # endif <S2SV_ModEnd> } # endif,0
812,"<S2SV_ModStart> ; # if CONFIG_VP8_HIGHBITDEPTH if ( mb -> e_mbd. mode_info_context -> mbmi. flags & YV12_FLAG_HIGHBITDEPTH ) { vpx_highbitdepth_set ( & mb -> e_mbd. highbitdepth, d ) ; } else { vpx_highbitdepth_set ( & mb -> e_mbd. lowbitdepth, d ) ; } # if CONFIG_VP12_HIGHBITDEPTH if ( mb -> e_mbd. mode_info_context -> mbmi. mode_info_context -> mbmi. flags & YV12_FLAG_HIGHBITDEPTH ) { vpx_highbitdepth_set ( & mb -> e_mbd. highbitdepth, d ) ; } else { vpx_highbitdepth_set ( & mb -> e_mbd. lowbitdepth, d ) ; } # if CONFIG_VP12_HIGHBITDEPTH if ( mb -> e_mbd. mode_info_context -> mbmi. flags & YV12_FLAG_HIGHBITDEPTH ) { vpx_highbitdepth_set ( & mb -> e_mbd",0
813,"<S2SV_ModStart> FN_REFLEN ] ; strncpy <S2SV_ModEnd> ( buff,",0
814,<S2SV_ModStart> ; if ( key -> state == KEY_IS_UNINSTANTIATED <S2SV_ModEnd> ) zap =,0
815,<S2SV_ModStart> hci_filter * f = <S2SV_ModEnd> hci_pi ( sk,0
816,"<S2SV_ModStart> int n = <S2SV_ModEnd> ( data_end - <S2SV_ModStart> - data ) ; if ( n < 0 ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Decryption <S2SV_blank> failed"" ) ; }",0
817,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
818,"<S2SV_ModStart>. sack_needed ; sctp_tsnmap_init ( & asoc -> peer. tsn_map, SCTP_TSN_MAP_INITIAL, asoc -> peer. i. initial_tsn, GFP_ATOMIC ) ;",0
819,"<S2SV_ModStart> cleanup ; } if ( fibsize > dev -> max_fibsize ) { dprintk ( ( KERN_WARNING ""aacraid: <S2SV_blank> Fib <S2SV_blank> too <S2SV_blank> large <S2SV_blank> for <S2SV_blank> raw <S2SV_blank> srb\\n"" ) ) ; rcode = - EINVAL ; goto cleanup ; }",0
820,"<S2SV_ModStart> 0 ) ; if ( cc0 < rowsize ) { TIFFErrorExt ( tif -> tif_clientdata, module, ""Out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> allocating <S2SV_blank> "" TIFF_SSIZE_FORMAT "" <S2SV_blank> byte <S2SV_blank> temp <S2SV_blank> buffer."", cc0 ) ; return 0 ; }",0
821,"<S2SV_ModStart> ; struct sock * sk = asoc -> base. sk <S2SV_ModEnd> ; bh_lock_sock ( <S2SV_ModStart> sk ) ; if ( sock_owned_by_user ( sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"", __func__ ) ; goto out_unlock ; } <S2SV_ModEnd> if ( sock_owned_by_user <S2SV_ModStart> sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"", __func__ ) ; if (! mod_timer ( & transport -> proto_unreach_timer, jiffies + ( HZ / 20 ) ) ) sctp_association_put ( asoc ) ; goto out_unlock ; } if ( transport -> dead ) goto out_unlock ; sctp_do_sm ( net, SCTP_EVENT_T_OTHER, SCTP_ST_OTHER ( SCTP_EVENT_ICMP_PROTO_UNREACH ), asoc -> state, asoc -> ep, asoc, transport, GFP_ATOMIC ) ; out_unlock : bh_unlock_sock ( sk <S2SV_ModEnd> ) ; sctp_association_put",0
822,"<S2SV_ModStart> input_data, size_t input_start, size_t input_end <S2SV_ModEnd>, int flags <S2SV_ModStart> ; # define prolog if ( bytes_matched >= max_bytes_matched ) { action = ACTION_KILL_TAIL ; break ; } # define fail_if_error ( e ) switch ( e ) { case ERROR_INSUFFICIENT_MEMORY : return - 2 ; case ERROR_TOO_MANY_RE_FIBERS : return - 4 ; } if ( flags & RE_FLAGS_BACKWARDS ) { input -= character_size ; input_incr = - input_incr ; } max_bytes_matched = ( int ) yr_min ( input_start, RE_SCAN_LIMIT ) ; max_bytes_matched = max_bytes_matched - max_bytes_matched % character_size ; bytes_matched = 0 ; error = _yr_re_fiber_create ( & fibers, & storage -> fiber_pool, & fiber ) ; fail_if_error ( error ) ; fiber -> ip = re_code ; fail_if_error ( error ) ; fiber -> ip = re_code ;",0
823,"<S2SV_ModStart> * returndistortion, int <S2SV_ModEnd> * returnintra ) <S2SV_ModStart> ; # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX, <S2SV_ModEnd> best_rd_sse = INT_MAX <S2SV_ModStart> zero_mv_sse = INT_MAX, <S2SV_ModEnd> best_rd_sse = INT_MAX <S2SV_ModStart> zero_mv_sse = INT_MAX, <S2SV_ModEnd> best_rd_sse = INT_MAX <S2SV_ModStart> = INT_MAX ; # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_rd_sse = INT_MAX, best_rd_sse = INT_MAX, <S2SV_ModEnd> best_rd_sse = INT_MAX <S2SV_ModStart> zero_mv_sse = INT_MAX, <S2SV_ModEnd> best_rd_sse = INT_MAX <S2SV_ModStart> zero_mv_sse = INT_MAX, <S2SV_ModEnd> best_rd_sse = INT_MAX <S2SV_ModStart> = INT_MAX ; # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_rd_sse = INT_MAX, best_rd",0
824,"<S2SV_ModStart>, UD_VECTOR ) ; set_exception_intercept ( svm, MC_VECTOR ) ; set_intercept ( svm, INTERCEPT_INTR ) ; set_intercept ( svm, INTERCEPT_NMI ) ; set_intercept ( svm, INTERCEPT_SMI ) ; set_intercept ( svm, INTERCEPT_SELECTIVE_CR0 ) ; set_intercept ( svm, INTERCEPT_CPUID ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_HLT ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_HLT ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_HLT ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_HLT ) ; set_intercept ( svm, INTERCEPT_HLT ) ; set_intercept ( svm, INTERCEPT_INVLPG ) ; set_intercept ( svm, INTERCEPT_INVLPGA )",0
825,<S2SV_ModStart> goto error ; if ( statbuf. st_size < 0 ) goto error ;,0
826,<S2SV_ModStart> cp <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
827,"<S2SV_ModStart> NULL ; UINT8 <S2SV_ModEnd> u1_profile_idc, u1_level_idc <S2SV_ModStart> u1_seq_parameter_set_id ; UWORD16 i2_max_frm_num ; WORD32 u2_pic_wd, u2_pic_ht ; WORD32 u2_crop_offset_y, u2_crop_offset_uv ; WORD32 u4_num_reorder_frames ; WORD32 i4_i ; u1_level_idc = ih264d_get_bits_h264 ( ps_bitstrm, 8 ) ; COPYTHECONTEXT ( ""SPS: <S2SV_blank> level_idc"", u1_level_idc ) ; u2_max_frm_num = ih264d_get_max_frm_num ( ps_bitstrm ) ; i2_max_frm_num = ih264d_get_max_frm_num ( ps_bitstrm ) ; i2_max_frm_num = ih264d_get_max_frm_num ( ps_bitstrm ) ; i2_max_frm_num = ih",0
828,<S2SV_ModStart> -> length ) ; if ( err ) return - EFAULT ;,0
829,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; vpx_svc_parameters_t * const params = va_arg ( args, vpx_svc_parameters_t * ) ; if ( params == NULL ) { return VPX_CODEC_INVALID_PARAM ; } <S2SV_ModStart> -> svc. spatial_layer_id = params -> spatial_layer ; cpi -> svc. temporal_layer_id = params -> temporal_layer ; cpi -> lst_fb_idx = params -> lst_fb_idx ; cpi -> gld_fb_idx = params -> gld_fb_idx ; cpi -> alt_fb_idx = params -> alt_fb_idx ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = params -> min_quantizer ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = params",0
830,"<S2SV_ModStart> ) ) ; if ( icmpv6_param_prob ( skb, ICMPV6_HDR_FIELD, ( ( u8 * ) & fhdr -> frag_off - skb_network_header ( skb ) ) ) { IP6_INC_STATS_BH ( net, ip6_dst_idev ( skb ) ), IPSTATS_MIB_INHDRERRORS ) ; icmpv6_param_prob ( skb, ICMPV6_HDR_FIELD, ( ( u8 * ) & fhdr -> frag_off - skb_network_header ( skb ) ) ) ; } else { IP6_INC_STATS_BH ( net, ip6_dst_idev ( skb_dst ( skb ) ), IPSTATS_MIB_INHDRERRORS ) ; icmpv6_param_prob ( skb, ICMPV6_HDR_FIELD, ( ( u8 * ) & fhdr -> frag_off - skb_network_header ( skb ) ) ) ; icmpv6_param_prob ( skb, ICMPV6_HDR",0
831,"<S2SV_ModStart> out ) { uint32 bitspersample, samplesperpixel ; uint16 input_compression, input_photometric ; CopyField ( TIFFTAG_BITSPERSAMPLE, bitspersample ) ; CopyField ( TIFFTAG_SAMPLESPERPIXEL, samplesperpixel ) ; CopyField ( TIFFTAG_COMPRESSION, input_compression ) ; CopyField ( TIFFTAG_JPEGCOLORMODE, jpegcolormode ) ; if ( jpegcolormode!= JPEGCOLORMODE_JPEG ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Can\'t <S2SV_blank> convert <S2SV_blank> subsampled <S2SV_blank> image.\\n"", TIFFFileName ( in ) ) ; return FALSE ; } else if ( jpegcolormode!= JPEGCOLORMODE_RGB ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Can\'t <S2SV_blank> convert <S2SV_blank> subsampled <S2SV_blank> image.\\n"", TIFFFileName ( in ) ) ; return FALSE ; } else if ( jpegcolormode!= JPEGCOLORMODE_RGB ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Can\'t <S2SV_blank> convert <S2SV_blank> subsampled <S2SV_blank> image.\\n"", TIFFFileName ( in",0
832,"<S2SV_ModStart> ) { int r <S2SV_ModEnd> ; char * <S2SV_ModStart> = '\\0' ; r = safe_lstat ( a -> name, & st ) ; if ( r!= 0 ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } } else if ( S_ISLNK ( st. st_mode ) ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a -> pst",0
833,"<S2SV_ModStart> pathfile ) ; if ( safe_mount ( hostpath, path, 0, MS_BIND, NULL )!= 0 ) { SYSERROR ( ""Failed <S2SV_blank> bind <S2SV_blank> mounting <S2SV_blank> device <S2SV_blank> %s <S2SV_blank> from <S2SV_blank> host <S2SV_blank> into <S2SV_blank> container"", d -> name ) ; return - 1 ; }",0
834,"<S2SV_ModStart> unsigned int link_count ; struct kernel_lb_addr loc ; struct indirectEntry * ie ; ie = ( struct indirectEntry * ) ibh -> b_data ; loc = lelb_to_cpu ( ie -> indirectICB. extLocation ) ; if (! loc ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!loc\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } loc = lelb_to_cpu ( ie -> indirectICB. extLocation ) ; if ( ie -> indirectICB. extLength == 0 ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } <S2SV_ModStart> -> i_location, & loc <S2SV_ModEnd>, 0, <S2SV_ModStart> ) ) ) { if ( ident == TAG_IDENT_FE || ident == TAG_IDENT_EFE ) { memcpy ( & iinfo -> i_location, & efe -> i_location, & efe -> i_location, sizeof (",0
835,"<S2SV_ModStart> -> tx_size ; uint64_t * const left_y = & lfm -> left_y [ tx_size_y ] ; uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const left_uv = & lfm -> left_uv [ tx_size_uv ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_y = & lfm -> int_4x4_y [ tx_size_y ] ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv [ tx_size_uv ] ; int i ; for ( i = 0 ; i < w ; i ++ ) { memset ( & lfm -> lfl_y [ index ], filter_level, w ) ; index += 8 ; } } * above_y |= above_prediction_mask [ block_size ] << shift_y ; * above_uv |= above_prediction_mask_uv [ block_size ]",0
836,"<S2SV_ModStart> dst_size ) { uint16_t <S2SV_ModEnd> namelen = strlen <S2SV_ModStart> = ff_amf_tag_size ( data, data_end ) ; if ( len < 0 ) len = data_end - data ; data += len ; } if ( data_end - data < 3 ) return - 1 ; data += 3 ; for ( ; ; ) { int size = bytestream_get_be16 ( & data ) ; if (! size ) break ; if ( size == namelen &&! memcmp ( data - size, name, namelen ) ) { switch ( * data ++ ) { case AMF_DATA_TYPE_NUMBER : snprintf ( dst, dst_size, ""%g"", av_int2double ( AV_RB64 ( data ) ) ) ; break ; case AMF_DATA_TYPE_BOOL : snprintf ( dst, dst_size, ""%s"", * data? ""true"" : ""false"" ) ; break ; case AMF_DATA_TYPE_STRING : len = bytestream_get_be16 ( & data ) ; av_strlcpy ( dst, data, len + 1, dst_size ) ; break",0
837,"<S2SV_ModStart> mq_flush_lock, flags ) ; flush_rq -> tag = - 1 ;",0
838,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) return ( uint32_t ) - 1 ;,0
839,<S2SV_ModStart> = NULL ; if ( prog -> flags & eflags ) sub -> flags |= prog -> flags | eflags ;,0
840,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorDiff16 ( TIFF <S2SV_ModStart> / 2 ; return,0
841,"<S2SV_ModStart> ) ) { if (! smatch ( option, "" <S2SV_blank> =\\t,"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Invalid <S2SV_blank> SessionCookie <S2SV_blank> option"" ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if (! ovalue ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Invalid <S2SV_blank> SessionCookie <S2SV_blank> option"" ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if (! ovalue ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Invalid <S2SV_blank> SessionCookie <S2SV_blank> option"" ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if (! ovalue ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Invalid <S2SV_blank> SessionCookie <S2SV_blank> option"" ) ; return MPR_ERR_BAD",0
842,"<S2SV_ModStart> ; int err ; struct ip_options_rcu * inet_opt <S2SV_ModStart> return 0 ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> return 0 ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt ) daddr = inet_opt -> opt. <S2SV_ModEnd> faddr ; rt",0
843,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
844,"<S2SV_ModStart> * mgr_hdl ; pid_t <S2SV_ModEnd> pid ; memset <S2SV_ModStart> ; memset ( s_path, 0, sizeof ( s_path ) ) ; memset ( c_path, 0, sizeof ( c_path ) ) ; pid = getpid ( ) ; switch ( mgr ) { case FM_MGR_PM : mgr_prefix = HSM_FM_SCK_PM ; mgr_hdl = & hdl -> pm_hdl ; break ; case FM_MGR_FE : mgr_prefix = HSM_FM_SCK_FE ; mgr_hdl = & hdl -> fe_hdl ; break ; default : return FM_CONF_INIT_ERR ; } if ( * mgr_hdl == NULL ) { if ( hcom_client_init ( mgr_hdl, s_path, c_path, 32768 )!= HSM_COM_OK ) { return FM_CONF_INIT_ERR ; } if ( hcom_client_init ( mgr_hdl, s_path, c_path, 32768 )!= HSM_COM_OK ) { return FM_CONF_INIT_",0
845,"<S2SV_ModStart> || * replySize > sizeof ( effect_param_t ) ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } <S2SV_ModStart> NULL || * replySize > sizeof ( effect_param_t ) ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; }",0
846,"<S2SV_ModStart> ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> length ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> length ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> length ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ""InsufficientImageDataInFile"" ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> length ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> length ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""Insufficient",0
847,"<S2SV_ModStart> ) ) { struct ipv6_txoptions * opt = rcu_dereference_protected ( np -> txopt, sock_owned_by_user ( sk ) ) ; opt -> opt_name = optname ; opt -> opt_len = sizeof ( * opt ) ; opt -> opt_namelen = sizeof ( * np -> txopt ) ; opt -> opt_namelen = sizeof ( * np -> txopt ) ; } <S2SV_ModEnd> break ; case <S2SV_ModStart> case IPV6_MULTICAST_FILTERS : { struct ipv6_txoptions * opt = rcu_dereference_protected ( np -> txopt, sock_owned_by_user ( sk ) ) ; opt -> opt_name = optname ; opt -> opt_len = sizeof ( * opt ) ; opt -> opt_namelen = sizeof ( * np -> txopt ) ; opt -> opt_namelen = sizeof ( * np -> txopt ) ; opt -> opt_namelen = sizeof ( * np -> txopt ) ; opt -> opt_namelen = sizeof ( * np -> txopt ) ; opt -> opt_namelen = opt -> opt_namelen ;",0
848,<S2SV_ModStart> berval ) ; if ( ret [ j ] == NULL ) { err = ENOMEM ; goto cleanup ; } <S2SV_ModStart> berval ) ; if ( ret [ j ] -> key_data_length [ 0 ]!= 0 || ret [ j ] -> key_data_length [ 0 ]!= 0 || ret [ j ] -> key_data_length [ 1 ]!= 0 || ret [ j ] -> key_data_contents [ 0 ]!= NULL ) { err = ENOMEM ; goto cleanup ; } <S2SV_ModStart> berval ) ; if ( ret [ j ] -> key_data_length [ 0 ]!= 0 || ret [ j ] -> key_data_length [ 0 ]!= 0 || ret [ j ] -> key_data_length [ 0 ]!= 0 || ret [ j ] -> key_data_length [ 0 ]!= 0 || ret [ j ] -> key_data_length [ 1 ]!= 0 || ret [ j ] -> key_data_contents [ 0 ]!= NULL ) { err = ENOMEM ; goto cleanup ; },0
849,"<S2SV_ModStart> ; L3 = checkfutureword ( J, F, catchvar ) ; if (! strcmp ( catchvar -> string, ""arguments"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'arguments\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; if (! strcmp ( catchvar -> string, ""eval"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'eval\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"" ) ; if (! strcmp ( catchvar -> string, ""arguments"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'arguments\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; if (! strcmp ( catchvar -> string, ""eval"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'eval\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; if (! strcmp ( catchvar -> string, ""arguments"" ) ) jsC_error ( J, catchvar, ""arguments"" ) ; if (! strcmp ( catchvar -> string, ""eval"" ) ) jsC_error ( J",0
850,"<S2SV_ModStart> { if ( l_i < 3 ) {
851,<S2SV_ModStart> 0x02 ) ; memcpy <S2SV_ModEnd> ( sbuf +,0
852,"<S2SV_ModStart> uint8 result ; uint16 <S2SV_ModEnd> length ; STREAM <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> connect <S2SV_blank> response <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", __func__ ) ; return False ; } <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> connect <S2SV_blank> response <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", __func__ ) ; return False ; }",0
853,<S2SV_ModStart> ; if ( s4u_x509_user == NULL || s4u_x509_user -> user_id == NULL || s4u_x509_user -> user_id == NULL || s4u_x509_user -> user_id == NULL || s4u_x509_user -> user_id == NULL || s4u_x509_user -> user_id == NULL || s4u_x509_user -> user_id == NULL || s4u_x509_user -> user_id == NULL || s4u_x509_user -> user_id == NULL || s4u_x509_user -> user_id == NULL || s4u_x509_user -> user_id == NULL || s4u_x509_user -> user_id == NULL || s4u_x509_user -> user_id == NULL || s4u_x509_user -> user_id == NULL || s4u_x509_user -> user_id == NULL || s4u_x509_user -> user_id == NULL || s4u_x509_user -> user_id == NULL,0
854,<S2SV_ModStart> ':' ) || ( ( c >= 0x80 ) && ( c <= 0x7FF ) ) || ( ( c >= 0x7FF ) && ( c <= 0x7FF ) ) || ( ( c >= 0x7FF ) && ( c <= 0x7FF ) ) || ( ( c >= 0x7FF ) && ( c <= 0x7FF ) ) || ( ( c >= 0x7FF ) && ( c <= 0x7FF ) ) || ( ( c >= 0x80 ) && ( c <= 0x7FF ) ) || ( ( c >= 0x80 ) && ( c <= 0x7FF ) ) || ( ( c >= 0x80 ) && ( c <= 0x7FF ) ) ) || ( ( c >= 0x80 ) && ( c <= 0x7FF ) ) || ( ( c >= 0x7FF ) && ( c <= 0x7FF ) ) ) || ( ( c >= 0x7FF ) && ( c <= 0x7FF ) ) ) || ( ( c >= 0x80 ) && ( c <= 0x7FF ) ) || ( ( c >= 0x80 ) && ( c <=,0
855,"<S2SV_ModStart> ( ret ) { dev_err ( & vdev -> dev, ""Invalid <S2SV_blank> MACVLAN <S2SV_blank> list\\n"" ) ; return ret ; }",0
856,<S2SV_ModStart> * rsize >= 18 <S2SV_ModEnd> && rdesc [,1
857,"<S2SV_ModStart> out ; } ret = set_uid_gid_map_capable ( file, ns, CAP_SYS_UIDGID ) ; if ( ret < 0 ) { ret = set_uid_gid_map_capable ( file, ns, CAP_SYS_UIDGID ) ; if ( ret < 0 ) { ret = set_uid_gid_map_capable ( file, ns, CAP_SYS_UIDGID ) ; if ( ret < 0 ) { ret = - EINVAL ; goto out ; } } else { ret = set_gid_map_capable ( file, ns, CAP_SYS_GROUPID ) ; if ( ret < 0 ) { ret = set_gid_map_capable ( file, ns, CAP_SYS_GROUPID ) ; if ( ret < 0 ) { ret = set_gid_map_capable ( file, ns, CAP_SYS_GROUPID ) ; if ( ret < 0 ) { ret = - EINVAL ; goto out ; } } else { ret = set_gid_map_capable ( file, ns, CAP_SYS_GROUPID ) ; if ( ret < 0 ) { ret = set_gid_",0
858,<S2SV_ModStart> } } } <S2SV_null> <S2SV_null>,0
859,"<S2SV_ModStart> sr ) { struct smb2fid_t <S2SV_ModEnd> smb2fid ; uint32_t <S2SV_ModStart> ) ; } if ( smb2fid. persistent && smb2fid. temporal ) { status = smb2sr_lookup_fid ( sr, & smb2fid ) ; if ( status ) { smb2sr_put_error ( sr, status ) ; return ( SDRC_ERROR ) ; } else { status = smb2sr_lookup_fid ( sr, & smb2fid ) ; if ( status ) { smb2sr_put_error ( sr, status ) ; return ( SDRC_ERROR ) ; } if ( smb2sr_lookup_fid ( sr, & smb2fid ) ) { smb2sr_put_error ( sr, status ) ; return ( SDRC_ERROR ) ; } if ( smb2fid. persistent && smb2fid. temporal ) { status = smb2sr_lookup_fid ( sr, & smb2fid ) ; if ( status ) { smb2sr_put_error ( sr, status ) ; return ( SDRC_ERROR ) ; }",0
860,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
861,"<S2SV_ModStart> mb_idx ] ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> lf_mic -> uv_buffer, yv12_fb_new -> u_buffer, yv12_fb_new -> uv_buffer. length ) ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> lf_mic -> y_buffer, yv12_fb_new -> y_buffer. length ) ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> lf_mic -> uv_buffer, yv12_fb_new -> uv_buffer. length ) ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> lf_mic -> uv_buffer, yv12_fb_new -> u_buffer, yv12_fb_new -> v_buffer. length ) ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> lf_mic -> y_buffer, yv12_fb_new -> u_buffer. length ) ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> lf_mic -> uv_buffer, yv12_fb_new -> v_buffer. length ) ; memcpy <S2SV_ModEnd> ( lf_mic -> <S2SV_ModStart> lf_mic -> uv_buffer, yv12_fb_new ->",0
862,"<S2SV_ModStart> = TIPC_ADDR_ID ; memset ( & addr -> addr. id, 0, sizeof ( addr -> addr. id ) ) ;",0
863,<S2SV_ModStart> goto out ; r = - EINVAL ; if ( mem -> guest_phys_addr + mem -> memory_size > KVM_USER_MEM_MAX_PHYS_ADDR + KVM_USER_MEM_MAX_PHYS_ADDR - KVM_USER_MEM_MAX_PHYS_ADDR - KVM_USER_MEM_MAX_PHYS_ADDR - KVM_USER_MEM_MAX_PHYS_ADDR - KVM_USER_MEM_MAX_PHYS_ADDR - KVM_USER_MEM_MAX_PHYS_ADDR - KVM_USER_MEM_MAX_PHYS_ADDR - KVM_USER_MEM_MAX_PHYS_ADDR - KVM_USER_MEM_MAX_PHYS_ADDR - KVM_USER_MEM_MAX_PHYS_ADDR - KVM_USER_MEM_MAX_PHYS_ADDR - KVM_USER_MEM_MAX_PHYS_ADDR - KVM_USER_MEM_MAX_PHYS_ADDR - KVM_USER_MEM_MAX_PHYS_ADDR -,0
864,<S2SV_ModStart> NULL ) ; <S2SV_ModEnd> } quantum_info =,0
865,"<S2SV_ModStart> ; if ( tmp_line [ scratch_len ]!= '\\0' ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> HTTP <S2SV_blank> header <S2SV_blank> line\\n"" ) ; return NULL ; } if ( tmp_line [ scratch_len ]!= '\\0' ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> HTTP <S2SV_blank> header <S2SV_blank> line\\n"" ) ; return NULL ; } if ( tmp_line [ scratch_len ]!= '\\0' ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> HTTP <S2SV_blank> header <S2SV_blank> line\\n"" ) ; return NULL ; } if ( tmp_line [ scratch_len ]!= '\\0' ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> header <S2SV_blank> line\\n"" ) ; return NULL ; } if ( tmp_line [ scratch_len ]!= '\\0' ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Invalid <S2SV_blank> header <S2SV_blank> line",0
866,"<S2SV_ModStart> len ) { PyObject <S2SV_ModEnd> * u ; <S2SV_ModStart> char * p <S2SV_ModEnd> ; const char <S2SV_ModStart> char * end <S2SV_ModEnd> ; if ( <S2SV_ModStart> * s ++ ; if ( * s & 0x80 ) { strcpy ( p, ""u005c"" ) ; p += 5 ; } } else { * p ++ = * s ++ ; if ( * s & 0x80 ) { strcpy ( p, ""u005c"" ) ; p += 5 ; } } if ( * s & 0x80 ) { strcpy ( p, ""u005c"" ) ; p += 5 ; } } if ( * s & 0x80 ) { PyObject * w ; int kind ; void * data ; Py_ssize_t len, i ; w = decode_utf8 ( c, & s, end ) ; if ( w == NULL ) { Py_DECREF ( w ) ; return NULL ; } kind = PyUnicode_KIND ( w ) ; data = PyUnicode_DATA ( w ) ; len = PyUnicode_GET_LENGTH ( w ) ; for ( i = 0 ; i < len ; i ++ ) { Py_UCS4 chr = PyUnicode_READ (",0
867,"<S2SV_ModStart> < 0 ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size."", function ) ; return ( - 1 ) ; } if ( value_data_size < 0 ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."", function ) ; return ( - 1 ) ; } if ( strict_mode == 0 ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."", function ) ; return ( - 1 ) ; } if ( value_data_size < 0 ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%",0
868,"<S2SV_ModStart> ; uint32_t bcount ; if (! DoCheckFileSize ( infile, sizeof ( WaveHeader ) ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
869,"<S2SV_ModStart> & dff_chunk_header, sizeof ( DFFChunkHeader ) <S2SV_ModEnd> ) || bcount <S2SV_ModStart> & dff_chunk_header, sizeof ( DFFChunkHeader ) <S2SV_ModEnd> ) || bcount <S2SV_ModStart> & dff_chunk_header, sizeof ( DFFChunkHeader ) <S2SV_ModEnd> ) || strncmp <S2SV_ModStart> ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"", dff_chunk_header. ckDataSize ) ; if ( debug_logging_mode ) error_line ( ""file <S2SV_blank> header <S2SV_blank> indicated <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %lld"",",0
870,"<S2SV_ModStart> ~ SNDRV_TLG_RUNNING ; spin_unlock_irqrestore ( & timeri -> timer_lock, flags ) ; goto __end ; } timer = timeri -> timer ; if (! timer ) { spin_lock_irqsave ( & timeri -> timer_lock, flags ) ; timeri -> flags &= ~ ( SNDRV_TIMER_IFLG_RUNNING | SNDRV_TIMER_IFLG_START ) ; timer -> hw. stop ( timer ) ; if ( timer -> flags & SNDRV_TIMER_FLG_RESCHED ) { timer -> flags &= ~ SNDRV_TIMER_FLG_RESCHED ; snd_timer_reschedule ( timer, 0 ) ; if ( timer -> flags & SNDRV_TIMER_FLG_CHANGE ) timer -> flags &= ~ SNDRV_TIMER_FLG_CHANGE ; timer -> hw. start ( timer ) ; } }",0
871,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> enum { YES <S2SV_ModStart>, wrerrno = 0 <S2SV_ModEnd> ; int targisdir <S2SV_ModStart>, targisdir, wrerrno <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = 0 ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> stat <S2SV_blank> %s"", __func__, targ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> stat <S2SV_blank> %s"", __func__, targ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> stat <S2SV_blank> %s"", __func__, targ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> stat <S2SV_blank> %s"", __func__, targ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> stat <S2SV_blank> %s"", __func__, targ ) ; if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> stat <S2SV_blank> %s"", __func__, targ ) ;",0
872,<S2SV_ModStart> } else if ( myentity_find_ext ( target <S2SV_ModEnd> ) == NULL <S2SV_ModStart> } else if ( myentity_find_ext ( target <S2SV_ModEnd> ) == NULL <S2SV_ModStart> } else if ( myentity_find_ext ( target <S2SV_ModEnd> ) == NULL <S2SV_ModStart> } else if ( myentity_find_ext ( target <S2SV_ModEnd> ) == NULL <S2SV_ModStart> } else if ( myentity_find_ext ( target <S2SV_ModEnd> ) == NULL <S2SV_ModStart> } else if ( myentity_find_ext ( target <S2SV_ModEnd> ) == NULL <S2SV_ModStart> } else if ( myentity_find_ext ( target <S2SV_ModEnd> ) == NULL <S2SV_ModStart> } else if ( myentity_find_ext ( target <S2SV_ModEnd> ) == NULL <S2SV_ModStart> } else if ( myentity_find_ext ( target <S2SV_ModEnd> ) == NULL <S2SV_ModStart> } else if ( myentity_find_ext ( target <S2SV_ModEnd> ) == NULL <S2SV_ModStart> } else if ( myentity_find_ext ( target <S2SV_ModEnd> ) == NULL <S2SV_ModStart> } else if ( myentity_find_ext ( target <S2SV_ModEnd> ) == NULL,0
873,<S2SV_ModStart> ; ghash_flush ( ctx <S2SV_ModEnd> ) ; memcpy,0
874,"<S2SV_ModStart> goto error ; if ( pb -> buf_end - pb -> buf_ptr < size + AVPROBE_PADDING_SIZE ) goto error ; <S2SV_ModStart> goto error ; ret = avio_get_str16le ( pb, desc_len, desc, sizeof ( desc ) ) ; if ( * desc ) av_dict_set ( & st -> metadata, ""description"", desc, 0 ) ; avio_skip ( pb, desc_len - ret ) ; if ( * desc ) av_dict_set ( & st -> metadata, ""title"", desc, 0 ) ; avio_skip ( pb, desc_len - ret ) ; if ( * desc ) avio_skip ( pb, desc_len - ret ) ; if ( * desc ) avio_skip ( pb, desc_len - ret ) ; if ( * desc ) { ret = avio_get_str16le ( pb, desc_len, desc, sizeof ( desc ) ) ; if ( * desc ) av_dict_set ( & st -> metadata, ""title"", desc, 0 ) ; avio_skip ( pb, desc_len - ret",0
875,"<S2SV_ModStart> null_server ; int need_error_free = 0 ; int local_rcache = 0, local_authcon = 0 ; int problem = 0 ; if ( ( retval = krb5_read_message ( context, fd, & inbuf ) ) ) return retval ; if ( strcmp ( inbuf. data, sendauth_version ) ) { problem = KRB5_SENDAUTH_BADAUTHVERS ; response = 1 ; } if ( flags & KRB5_RECVAUTH_SKIP_VERSION ) { if ( ( retval = krb5_read_message ( context, fd, & inbuf ) ) ) return retval ; if ( ( retval = krb5_read_message ( context, fd, & inbuf ) ) ) return retval ; <S2SV_ModEnd> if ( appl_version <S2SV_ModStart> appl_version ) ) { if (! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } } if ( version &&! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } } if ( version &&! problem ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response",0
876,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
877,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; } ret",1
878,"<S2SV_ModStart> ++ = 0xAA ; memcpy ( dptr, & rose -> dest_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> dest_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> dest_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, RO",0
879,<S2SV_ModStart> ; if ( p -> mnt == new_fs -> root. mnt ) { new_fs -> root. mnt = mntget ( & q -> mnt ) ; rootmnt = & p -> mnt ; pwdmnt = & q -> mnt ; } if ( & p -> mnt == new_fs -> pwd. mnt ) { new_fs -> pwd. mnt = mntget ( & q -> mnt ) ; pwdmnt = & q -> mnt ; } if ( & p -> mnt == new_fs -> root. mnt ) { new_fs -> root. mnt = mntget ( & q -> mnt ) ; pwdmnt = & p -> mnt ; } if ( & p -> mnt == new_fs -> pwd. mnt ) { new_fs -> pwd. mnt = mntget ( & q -> mnt ) ; pwdmnt = & p -> mnt ; } if ( & p -> mnt == new_fs -> pwd. mnt ) { new_fs -> pwd. mnt = mntget ( & q -> mnt ) ; pwdmnt = & p -> mnt ; },0
880,"<S2SV_ModStart> = vpx_calloc ( ( oci -> mb_cols + 1 ) * ( oci -> mb_rows + 1 ), sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; if (! oci -> mi ) goto allocation_fail ; oci -> gld_mip = vpx_calloc ( ( oci -> mb_rows + 1 ) * ( oci -> mb_cols + 1 ), sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; if (! oci -> gld_mip ) goto allocation_fail ; oci -> gld_above_context = vpx_calloc ( sizeof ( ENTROPY_CONTEXT_PLANES ) * ( oci -> mb_rows + 1 ), sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; if (! oci -> gld_above_context ) goto allocation_fail ; oci -> gld_above_context = vpx_calloc ( sizeof ( ENTROPY_CONTEXT_PLANES ) * ( oci -> mb_cols + 1 ), sizeof ( ENTROPY_CONTEXT_PLANES ) ) ; if (! oci -> gld_above_context ) goto allocation_",0
881,<S2SV_ModStart> = php_zip_get_properties ; zip_object_handlers. <S2SV_ModEnd> get_properties = php_zip_get_properties <S2SV_ModStart> = php_zip_get_properties ; zip_object_handlers. <S2SV_ModEnd> read_property = php_zip_read_property,0
882,<S2SV_ModStart> case RXE_MEM_TYPE_FMR : if ( iova + length > mem -> iova + mem -> length ) ) { return - EFAULT ; } <S2SV_ModEnd> return 0 ;,0
883,"<S2SV_ModStart> case NI_QTYPE_REPLY : if ( siz!= sizeof ( * dp ) + 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } <S2SV_ModStart> case NI_QTYPE_REPLY : if ( siz!= sizeof ( * dp ) + 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } <S2SV_ModStart> case NI_QTYPE_REPLY : if ( siz!= sizeof ( * dp ) + 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } <S2SV_ModStart> case NI_QTYPE_REPLY : if ( siz!= sizeof ( * dp ) + 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } <S2SV_ModStart> case NI_QTYPE_REPLY : if ( siz!= sizeof ( * dp ) + 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ;",0
884,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char *",1
885,"<S2SV_ModStart> sent = 0 ; if ( n_vec > 15 ) { cERROR ( 1, ""sends <S2SV_blank> on <S2SV_blank> sock <S2SV_blank> %p <S2SV_blank> stuck <S2SV_blank> for <S2SV_blank> 15 <S2SV_blank> seconds"", ssocket ) ; rc = - EAGAIN ; break ; }",0
886,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> buffer_pipe_buf_get ( struct <S2SV_ModStart> -> private ; return <S2SV_ModEnd> ref -> ref <S2SV_ModStart> -> ref ++ <S2SV_ModEnd> ; } <S2SV_null>,0
887,"<S2SV_ModStart> clusters - 1 ) { get_fat ( & subseqEntry, fs -> fat, cluster - 1, fs ) ; } else subseqEntry. value = 0 ; data [ 0 ] = ( ( 0xff & subseqEntry. value ) << 4 ) | ( ( 0xff & subseqEntry. value ) >> 8 ) ; data [ 1 ] = ( ( 0xff & subseqEntry. value ) << 4 ) ; } size = 2 ; break ; case 24 : { FAT_ENTRY curEntry ; get_fat ( & curEntry, fs -> fat, cluster + 1, fs ) ; data = fs -> fat + cluster * 4 ; offs = fs -> fat_start + cluster * 4 ; * ( uint32_t * ) data = htole32 ( ( new & 0xfffffff ) | ( curEntry. reserved << 28 ) ) ; size = 4 ; } break ; case 48 : { FAT_ENTRY curEntry ; get_fat ( & curEntry, fs -> fat, cluster, fs ) ; data = fs -> fat + cluster * 4 ; * ( uint32_t * ) data = htole32 ( curEntry.",0
888,<S2SV_ModStart> return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,0
889,<S2SV_ModStart> sk_nulls_node ) ; spin_lock_bh ( & ping_table. lock ) ; <S2SV_ModStart> sk ) ; spin_unlock_bh ( & ping_table. lock ) ;,0
890,<S2SV_ModStart> ; ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> ps_cur_slice -> u1_num_mbs_coded += u1_num_mbs ; ps_dec -> ps_cur_slice -> u1_num_mbs_coded += u1_num_mbs ; ps_dec -> ps_cur_slice -> u1_num_mbs_coded += u1_num_mbs ; ps_dec -> ps_cur_slice -> u1_num_mbs_coded += u1_num_mbs ; ps_dec -> ps_cur_slice -> u1_num_mbs_coded += u1_num_mbs ; ps_dec -> ps_cur_slice -> u1_num_mbs_coded += u1_num_mbs ; ps_dec -> ps_cur_slice -> u1_num_mbs_coded += u1_num_mbs ; ps_dec -> ps_cur_slice -> u1_num_mbs_coded += u1_num_mbs ; ps_dec -> ps_,0
891,<S2SV_ModStart> ; if ( src >= ( env_end - env_start ) ) { ret = - EINVAL ; goto free ; },0
892,"<S2SV_ModStart> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> parse_rock_ridge_inode ( struct <S2SV_ModStart> = parse_rock_ridge_inode_internal ( de <S2SV_ModEnd>, inode, <S2SV_ModStart> = parse_rock_ridge_inode_internal ( de <S2SV_ModEnd>, inode, <S2SV_ModStart> = parse_rock_ridge_inode_internal ( de <S2SV_ModEnd>, inode, <S2SV_ModStart> = parse_rock_ridge_inode_internal ( de <S2SV_ModEnd>, inode,",0
893,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct <S2SV_ModEnd> fsnotify_group * inotify_new_group <S2SV_ModStart> = 0 ; <S2SV_ModEnd> group -> inotify_data <S2SV_ModStart> = user ; group -> inotify_data.,0
894,<S2SV_ModStart> in -> data [ p ] && in -> linesize,0
895,<S2SV_ModStart> 1 ] ) vterm_allocator_free <S2SV_ModEnd> ( screen ->,0
896,"<S2SV_ModStart> EACCES ; } if ( reg -> type == PTR_TO_CTX ) { enum bpf_reg_type reg_type = SCALAR_VALUE ; if ( t == BPF_WRITE && value_regno >= 0 && is_pointer_value ( env, value_regno ) ) { verbose ( env, ""R%d <S2SV_blank> leaks <S2SV_blank> addr <S2SV_blank> into <S2SV_blank> ctx\\n"", value_regno ) ; return - EACCES ; } else { verbose ( env, ""R%d <S2SV_blank> leaks <S2SV_blank> addr <S2SV_blank> into <S2SV_blank> ctx\\n"", value_regno ) ; return - EACCES ; } err = check_ctx_access ( env, regno, off, size, false ) ; if (! err && t == BPF_WRITE && value_regno >= 0 && is_pointer_value ( env, value_regno ) ) { verbose ( env, ""R%d <S2SV_blank> leaks <S2SV_blank> addr <S2SV_blank> into <S2SV_blank> map\\n"", value_regno ) ; return - EACCES ; }",0
897,"<S2SV_ModStart> strip, nstrips = 0 ; uint32 stripsize = TIFFStripSize ( in ) ; if ( stripsize == 0 ) { TIFFError ( """", ""TIFF <S2SV_blank> strip <S2SV_blank> size <S2SV_blank> is <S2SV_blank> zero!"" ) ; return 0 ; }",0
898,"<S2SV_ModStart> ; const char <S2SV_ModEnd> need_to_append_dot = base_name <S2SV_ModStart> 1 : 0 ; struct search_domain * const dom ; for ( dom = state -> head ; dom ; dom = dom -> next ) { if (! n -- ) { char * const newname = ( char * ) mm_malloc ( base_len + need_to_append_dot + postfix_len + 1 ) ; if (! newname ) return NULL ; memcpy ( newname + base_len + need_to_append_dot, postfix, postfix_len + 1 ) ; if ( need_to_append_dot ) newname [ base_len ] = '.' ; memcpy ( newname + base_len + need_to_append_dot, postfix, postfix_len + 1 ) ; if (! newname ) return NULL ; memcpy ( newname, base_name, base_len ) ; if ( need_to_append_dot ) newname [ base_len ] = '.' ; memcpy ( newname + base_len + need_to_append_dot + postfix_len + 1 ] = 0 ; }",0
899,<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart> & delay ) ),0
900,<S2SV_ModStart> goto out ; <S2SV_ModEnd> err = -,1
901,"<S2SV_ModStart>, one ; size_t <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart> ) break ; if ( number_planes_filled > MagickMax ( number_planes, number_planes_filled ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > MagickMax ( number_planes, number_planes_filled ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; number_planes_filled = number_planes_filled ; if ( number_planes_filled > MagickMax ( number_planes, number_planes_filled ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( number_planes_filled > MagickMax ( number_planes, number_planes_filled ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; number_planes_filled = number_planes_filled ; if ( number_planes_filled > MagickMax ( number_planes, number_",0
902,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> UINT32 originalSize ; BYTE * <S2SV_ModStart> planeSize ; UINT32 totalSize ; totalSize = context -> OrgByteCount [ i ] ; totalSize = context -> PlaneByteCount [ i ] ; <S2SV_ModStart> ( planeSize < totalSize ) nsc_rle_decode ( rle, context -> priv -> PlaneBuffers [ i ], totalSize ) ; else if ( planeSize < totalSize ) nsc_rle_decode ( rle, context -> priv -> PlaneBuffers [ i ], totalSize ) ; else CopyMemory ( context -> priv -> PlaneBuffers [ i ], rle, originalSize ) ; rle += planeSize ; } return TRUE ;",0
903,"<S2SV_ModStart> policy ) { struct fscrypt_context * context = NULL ; if (! inode_has_encryption_context ( inode ) ) return - EOPNOTSUPP ; if (! inode -> i_sb -> s_cop -> empty_dir ) return - ENOTEMPTY ; if (! inode_has_encryption_context ( inode ) ) return - EOPNOTSUPP ; if (! inode -> i_sb -> s_cop -> empty_dir ( inode ) ) return - EOPNOTSUPP ; if (! inode -> i_sb -> s_cop -> empty_dir ( inode ) ) return - EOPNOTSUPP ; if (! inode -> i_sb -> s_cop -> empty_dir ( inode ) ) return - ENOTEMPTY ; if (! inode_has_encryption_context ( inode ) ) return - EOPNOTSUPP ; if (! inode -> i_sb -> s_cop -> empty_dir ( inode ) ) return - EOPNOTSUPP ; if (! inode -> i_sb -> s_cop -> empty_dir ( inode ) ) return - ENOTEMPTY ; return create_encryption_context_from_policy ( inode, policy",0
904,"<S2SV_ModStart> value ) { if ( stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } else { if ( stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; } } else { if ( stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } }",0
905,"<S2SV_ModStart>. cmp = key_cmp <S2SV_ModEnd>,. match_data <S2SV_ModStart> match_data. lookup_type = KEYRING_SEARCH_LOOKUP_DIRECT <S2SV_ModEnd>,. match_data",0
906,<S2SV_ModStart> ) return - EOPNOTSUPP <S2SV_ModEnd> ; if (,0
907,<S2SV_ModStart> 8 ) ) ; if ( <S2SV_ModEnd> prev_hash ||! <S2SV_ModStart> prev_hash ||! coinbase1 ||! coinbase2 ||! bbversion ||! nbit ||! ntime ) { if ( job_id ) free ( job_id ) ; if ( coinbase1 ) free ( coinbase1 ) ; if ( coinbase2 ) free ( coinbase2 ) ; goto out ; } cg_wlock ( & pool -> data_lock ) ; free ( header ) ;,0
908,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
909,"<S2SV_ModStart> size ) { size_t res ; if ( num > SIZE_MAX / size ) { rdp_protocol_error ( ""xcalloc <S2SV_blank> (%u, <S2SV_blank> %u) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", num, SIZE_MAX / size ) ; return NULL ; } res = safe_calloc ( num, size ) ; if ( res < 0 ) { rdp_protocol_error ( ""xcalloc <S2SV_blank> (%u, <S2SV_blank> %u) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", num, size ) ; } if ( res < 0 ) { rdp_protocol_error ( ""xcalloc <S2SV_blank> (%u, <S2SV_blank> %u) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", num, res ) ; return NULL ; } ptr = safe_calloc ( num, size ) ; if ( ptr ) { rdp_protocol_error ( ""xcalloc <S2SV_blank> (%u, <S2SV_blank> %u) <S2SV_blank> exceeds <S2SV_blank> allowed <S2SV_blank> (%u)"", num, res ) ; } if ( res < 0 ) { rdp_protocol_error ( ""xcalloc <S2SV_blank> (%u, <S2SV_blank> %u",0
910,<S2SV_ModStart> ioc ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
911,"<S2SV_ModStart> unused ) { <S2SV_ModEnd> _Py_IDENTIFIER ( __dict__ <S2SV_ModStart> * dict = _PyObject_GetAttrId <S2SV_ModEnd> ( self, <S2SV_ModStart>, & PyId___dict__ ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) { res = Py_BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; return res ; } if ( dict ) { res = Py_BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; return res ; } if ( dict ) { res = Py_BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; return res ; } if ( dict ) { res = Py_BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; return res ; } <S2SV_ModEnd> return res ;",0
912,"<S2SV_ModStart> USB_DT_OTG, ( struct usb_otg_descriptor * ) <S2SV_ModStart> & desc ) ; if (! desc ) return 0 ; if ( desc -> bLength < sizeof ( struct usb_otg_descriptor ) ) { dev_err ( & udev -> dev, ""invalid <S2SV_blank> descriptor <S2SV_blank> length: <S2SV_blank> %d\\n"", desc -> bLength ) ; return err ; } if ( desc -> bLength > sizeof ( struct usb_otg_descriptor ) ) { dev_err ( & udev -> dev, ""invalid <S2SV_blank> descriptor <S2SV_blank> length: <S2SV_blank> %d\\n"", desc -> bLength ) ; return 0 ; } if ( desc -> bLength > sizeof ( struct usb_otg_descriptor ) ) { dev_err ( & udev -> dev, ""invalid <S2SV_blank> descriptor <S2SV_blank> length: <S2SV_blank> %d\\n"", desc -> bLength ) ; return err ; } if ( desc -> bLength > sizeof ( struct usb_otg_descriptor ) ) { dev_err ( & udev -> dev, ""invalid <S2SV_blank> descriptor <S2SV_blank> length: <S2SV_blank> %d\\n"", desc -> bLength ) ; return 0 ; }",0
913,"<S2SV_ModStart> -> private_data ; u64 <S2SV_ModEnd> flags = arg <S2SV_ModStart> ) ; case PERF_EVENT_IOC_PERIOD : return perf_event_period ( event, ( u64 __user * ) arg ) ; case PERF_EVENT_ID : { u64 id = primary_event_id ( event ) ; if ( copy_to_user ( ( void __user * ) arg, & id, sizeof ( id ) ) ) return - EFAULT ; return 0 ; } case PERF_EVENT_SET_OUTPUT : { int ret ; ret = perf_event_set_output ( event, output_event ) ; fdput ( output ) ; ret = perf_event_set_output ( event, output_event ) ; fdput ( output ) ; } return ret ; } <S2SV_ModEnd> case PERF_EVENT_SET_FILTER :",0
914,"<S2SV_ModStart> prr_delivered += newly_acked_sacked ; if ( delta < 0 ) { u64 dividend = ( u64 ) tp -> snd_ssthresh * tp -> prr_delivered + tp -> prior_cwnd - 1 ; sndcnt = div_u64 ( dividend, tp -> prior_cwnd ) - tp -> prr_out ; } else { u64 dividend = ( u64 ) tp -> snd_ssthresh * tp -> prr_delivered + tp -> prior_cwnd - 1 ; sndcnt = div_u64 ( dividend, tp -> prior_cwnd ) - tp -> prr_out ; }",0
915,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode",0
916,"<S2SV_ModStart> mask ) { if (! crypto_alloc_skcipher ( name, type, mask ) ) { pr_err ( ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> skcipher <S2SV_blank> for <S2SV_blank> %s\\n"", __func__, name ) ; return NULL ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
917,"<S2SV_ModStart> EINVAL ; } if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 5, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 6, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 7, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 8, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 8, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 6, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 6, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 7, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 8, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 8, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 6, 0 ) || cmd_q ->",0
918,<S2SV_ModStart> tile_height ) { av_free ( c -> synth_tile ) ; c -> synth_tile = av_mallocz ( c -> tile_stride * aligned_height ) ; c -> jpeg_tile = av_mallocz ( c -> tile_stride * aligned_height + FF_INPUT_BUFFER_PADDING_SIZE ) ; c -> kempf_flags = av_mallocz ( c -> tile_width * aligned_height + FF_INPUT_BUFFER_PADDING_SIZE ) ; c -> jpeg_tile = av_mallocz ( c -> jpeg_tile_stride * aligned_height + FF_INPUT_BUFFER_PADDING_SIZE ) ; c -> synth_tile = av_mallocz ( c -> tile_stride * aligned_height + FF_INPUT_BUFFER_PADDING_SIZE ) ; c -> jpeg_tile = av_mallocz ( c -> jpeg_tile_stride * aligned_height + FF_INPUT_BUFFER_PADDING_SIZE ) ; c -> kempf_flags = av_mallocz ( c -> jpeg_tile_stride * aligned_height + FF_INPUT_BUFFER_PADDING_,0
919,"<S2SV_ModStart> sizeof iv ) ; if ( strlen ( key ) > EVP_MAX_KEY_LENGTH ) { ossl_raise ( eCipherError, ""key <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", KEY_LEN ) ; ossl_raise ( eCipherError, ""key <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", KEY_LEN ) ; if ( strlen ( iv ) > EVP_MAX_IV_LENGTH ) { ossl_raise ( eCipherError, ""key <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d) <S2SV_blank> for <S2SV_blank> key <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", KEY_LEN, IV_LEN ) ; ossl_raise ( eCipherError, ""key <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", KEY_LEN, IV_LEN ) ; if ( strlen ( key ) > EVP_MAX_KEY_LENGTH ) { ossl_raise ( eCipherError, ""key <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", KEY_LEN, IV_LEN ) ;",0
920,"<S2SV_ModStart> jas_alloc3 ( bufsize <S2SV_ModEnd>, JPC_QMFB_COLGRPSIZE, <S2SV_ModStart> jas_alloc3 ( bufsize <S2SV_ModEnd>, JPC_QMFB_COLGRPSIZE, <S2SV_ModStart> jas_alloc3 ( bufsize <S2SV_ModEnd>, JPC_QMFB_COLGRPSIZE, <S2SV_ModStart> jas_alloc3 ( bufsize <S2SV_ModEnd>, JPC_QMFB_COLGRPSIZE, <S2SV_ModStart> JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr += 2 * stride ; srcptr += stride ; } srcptr = buf ; dstptr = & a [ ( 1 - parity ) * stride ] ; n = numrows - hstartcol ; while ( n -- > 0 ) { dstptr2 = dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr += 2 * stride ; srcptr += stride ; }",0
921,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
922,"<S2SV_ModStart> p ) { <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> ) ; } if ( length > CHDLC_HDRLEN ) { ND_PRINT ( ( ndo, ""[|chdlc]"" ) ) ; return ( - 1 ) ; }",0
923,"<S2SV_ModStart> cifs_sb -> mnt_cifs_flags & CIFS_MOUNT_NOSUID ) { cFYI ( 1, ""No <S2SV_blank> mnt <S2SV_blank> specified"" ) ; volume_info -> mnt_cifs_flags |= CIFS_MOUNT_NOSUID ; cFYI ( 1, ""No <S2SV_blank> mnt <S2SV_blank> specified"" ) ; volume_info -> mnt_cifs_flags |= CIFS_MOUNT_NOSUID ; } else if ( cifs_sb -> mnt_cifs_flags & CIFS_MOUNT_NOSUID ) { cFYI ( 1, ""No <S2SV_blank> mnt <S2SV_blank> specified"" ) ; volume_info -> mnt_cifs_flags |= CIFS_MOUNT_NOSUID ; cFYI ( 1, ""No <S2SV_blank> mnt <S2SV_blank> specified"" ) ; volume_info -> mnt_cifs_flags |= CIFS_MOUNT_NOSUID ; } else if ( cifs_sb -> mnt_cifs_flags & CIFS_MOUNT_NOSUID ) { cFYI ( 1, ""No <S2SV_blank> mnt <S2SV_blank> specified"" ) ;",0
924,<S2SV_ModStart> len && ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_STATS <S2SV_ModEnd> ) ) put_cmsg,0
925,<S2SV_ModStart> ) ) ; raptor_sax2_set_uri_filter <S2SV_ModEnd> ( rdf_xml_parser ->,0
926,"<S2SV_ModStart> ; if ( alg_a & ( SSL_kDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } if ( alg_a & ( SSL_kDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } if ( alg_a & ( SSL_kDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } if ( alg_a & ( SSL_kDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD",0
927,<S2SV_ModStart> { return SECURE_ELEMENT_ERROR_NPE <S2SV_ModEnd> ; } KeyIdentifier_t,0
928,<S2SV_ModStart> if (! nghttp2_buf_mark_avail ( & iframe -> sbuf ) ) { return NGHTTP2_ERR_FRAME_OVERFLOW ; },0
929,<S2SV_ModStart> = ucounts ; if (! new_ns -> user_ns ) { kfree ( new_ns ) ; dec_mnt_namespaces ( ucounts ) ; return ERR_PTR ( - EPERM ) ; },0
930,"<S2SV_ModStart> += dif ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
931,"<S2SV_ModStart> ; if ( x86_pmu. max_pebs_events > INTEL_MAX_PEBS_EVENTS ) x86_pmu. max_pebs_events = INTEL_MAX_PEBS_EVENTS ; <S2SV_ModStart> ; if ( x86_pmu. max_counters_fixed > INTEL_MAX_PEBS_EVENTS ) x86_pmu. max_counters_fixed = INTEL_MAX_PEBS_EVENTS ; if ( version > 1 ) x86_pmu. max_counters_fixed = max ( INTEL_MAX_PEBS_EVENTS, x86_pmu. num_counters ) ; if ( x86_pmu. max_counters_fixed > INTEL_MAX_PEBS_EVENTS ) x86_pmu. max_counters_fixed = INTEL_MAX_PEBS_EVENTS ;",0
932,"<S2SV_ModStart>. dimensions ; # ifdef STB_VORBIS_DIVIDES_IN_RESIDUE uint16 * * part_classdata = ( uint16 * * ) temp_block_array ( f, f -> channels, part_read * sizeof ( * * part_classdata ) ) ; # else int * * classifications = ( int * * ) temp_block_array ( f, f -> channels, part_read * sizeof ( * * classifications ) ) ; # endif CHECK ( f ) ; for ( i = 0 ; i < n ; ++ i ) { if ( do_not_decode [ i ] ) memset ( residue_buffers [ i ], 0, sizeof ( float ) * n ) ; memset ( residue_buffers [ i ], 0, sizeof ( float ) * n ) ; memset ( residue_buffers [ i ], 0, sizeof ( float ) * n ) ; for ( i = 0 ; i < n ; ++ i ) memset ( residue_buffers [ i ], 0, sizeof ( float ) * n ) ; if ( do_not_decode [ i ] ) memset ( residue_buffers [ i ], 0, sizeof (",0
933,<S2SV_ModStart> ) ; u32 last_oow_ack_time <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) { challenge_timestamp = last_oow_ack_time <S2SV_ModEnd> ; challenge_count = <S2SV_ModStart> ) { challenge_timestamp = last_oow_ack_time <S2SV_ModEnd> ; } if,0
934,"<S2SV_ModStart> struct llc_pktinfo info ; memset ( & info, 0, sizeof ( info ) )",1
935,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, const TOKENEXTRA * <S2SV_ModEnd> tp, const <S2SV_ModStart> ] ; const vpx_extra_bit <S2SV_ModEnd> * const b <S2SV_ModStart> ] ; int i = 0 ; int v = a -> value ; int n = a -> len ; if ( p -> skip_eob_node ) { n -= p -> skip_eob_node ; i = 2 * p -> skip_eob_node ; } if ( t >= TWO_TOKEN && t < EOB_TOKEN ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; int bits = v >> ( n - len ) ; vpx_write_tree ( w, vp9_coef_tree, p -> context_tree, bits, len, i ) ; vpx_write_tree ( w, vp9_coef_con_tree, vp9_pareto8_full [ p -> context_tree [ PIVOT_NODE ] - 1 ], v, n - len, 0 ) ; } else { vpx_write_tree ( w, vp9_coef_tree, p -> context_",0
936,"<S2SV_ModStart>, uncompressed_hdr_size ; vpx_write_bit_buffer <S2SV_ModEnd> wb = { <S2SV_ModStart> 0 } ; vpx_write_bit_buffer <S2SV_ModEnd> saved_wb ; write_uncompressed_header <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> 16 ) ; vpx_rb_bytes_written ( & wb ) ; data += uncompressed_hdr_size ; vpx_compute_update_table ( ) ; first_part_size = write_compressed_header ( cpi, data ) ; data += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> 16 ) ; data += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> 16 ) ; data += encode_tiles ( cpi, data ) ; * size = data - dest ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
937,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
938,"<S2SV_ModStart> * rdesc ; unsigned <S2SV_ModStart> -> version = le16_to_cpu ( hdesc -> bcdHID ) <S2SV_ModEnd> ; hid -> <S2SV_ModStart> -> country = le16_to_cpu ( hdesc -> bCountryCode ) <S2SV_ModEnd> ; for ( <S2SV_ModStart> -> desc [ n ]. bDescriptorType == HID_DT_REPORT ) rsize = le16_to_cpu ( hdesc -> desc [ n ]. wDescriptorLength ) ; if (! rsize || rsize > HID_MAX_DESCRIPTOR_SIZE ) { dbg_hid ( ""weird <S2SV_blank> size <S2SV_blank> of <S2SV_blank> report <S2SV_blank> descriptor <S2SV_blank> (%u)\\n"", rsize ) ; return - EINVAL ; } rdesc = kmalloc ( rsize, GFP_KERNEL ) ; if (! rdesc || rsize > HID_MAX_DESCRIPTOR_SIZE ) { dbg_hid ( ""weird <S2SV_blank> size <S2SV_blank> of <S2SV_blank> report <S2SV_blank> descriptor <S2SV_blank> (%u)\\n"", rsize ) ; return - ENOMEM ; }",0
939,"<S2SV_ModStart> struct ikev2_id id <S2SV_ModEnd> ; int id_len <S2SV_ModStart> * typedata ; ND_TCHECK2 ( * ext ) ; UNALIGNED_MEMCPY ( & id, sizeof ( id ) ) ;",0
940,<S2SV_ModStart> ; # ifdef CONFIG_FUTEX if ( unlikely ( tsk -> robust_list ) ) exit_robust_list ( tsk ) ; # ifdef CONFIG_COMPAT if ( unlikely ( tsk -> compat_robust_list ) ) compat_exit_robust_list ( tsk ) ; # endif,0
941,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char * <S2SV_ModStart> data ) { <S2SV_ModEnd> char * name <S2SV_ModStart> char * name = strndup <S2SV_ModEnd> ( path, <S2SV_ModStart> last ) ; add_preferred_base_object ( name ) ; obj -> flags |= OBJECT_ADDED ; free ( ( char * ) name ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
942,<S2SV_ModStart> ; if ( atoi ( jas_tvparser_getval ( tvp ) )!= cmpt -> width || atoi ( jas_tvparser_getval ( tvp ) )!= cmpt -> height || atoi ( jas_tvparser_getval ( tvp ) )!= cmpt -> width || atoi ( jas_tvparser_getval ( tvp ) <S2SV_ModStart> ; if ( atoi ( jas_tvparser_getval ( tvp ) )!= cmpt -> width || atoi ( jas_tvparser_getval ( tvp ) )!= cmpt -> height || atoi ( jas_tvparser_getval ( tvp ) )!= cmpt -> width || atoi ( jas_tvparser_getval ( tvp ) )!= cmpt -> height || atoi ( jas_tvparser_getval ( tvp ) <S2SV_ModStart> ; if ( atoi ( jas_tvparser_getval ( tvp ) )!= cmpt -> width || atoi ( jas_tvparser_getval ( tvp ) )!= cmpt -> width || atoi ( jas_tvparser_getval ( tvp,0
943,<S2SV_ModStart> urb ) ; usb_unanchor_urb ( urb ) ;,0
944,"<S2SV_ModStart>, fft_jmp ; WORD32 xh0_0, xh1_0, xh20_0, xh21_0, xl0_0, xl1_0, xl20_0, xl21_0 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_1, x_l1_0, x_l1_1, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l1_1, x_l2_0, x_h2_1 ; WORD32 x_1, x_",0
945,<S2SV_ModStart> ; if ( datalen - dp < 2 ) goto data_overrun_error ; <S2SV_ModStart> ; if ( datalen - dp < 2 ) goto data_overrun_error ; <S2SV_ModStart> ; if ( datalen - dp < 2 ) goto data_overrun_error ; <S2SV_ModStart> ; if ( datalen - dp < 2 ) goto data_overrun_error ; <S2SV_ModStart> ; if ( datalen - dp < 2 ) goto data_overrun_error ; <S2SV_ModStart> ; if ( datalen - dp < 2 ) goto data_overrun_error ; <S2SV_ModStart> ; if ( datalen - dp < 2 ) goto data_overrun_error ; <S2SV_ModStart> ; if ( datalen - dp < 2 ) goto data_overrun_error ; n = len - 0x80 ; if ( unlikely ( n > sizeof ( size_t ) - 1 ) ) goto length_too_long ; if ( unlikely ( n > datalen - dp ) ) goto data_overrun_error ; for ( len = 0 ; n > 0 ; n -- ) { len <<= 8 ; len |= data [ dp ++ ] ; } dp += len ; goto next_tag ; },0
946,<S2SV_ModStart> ) val ; <S2SV_ModEnd> memset ( ptr,1
947,<S2SV_ModStart> mntent ) { if ( IS_ERR ( mntent -> mnt_dir ) ) return PTR_ERR ( mntent -> mnt_dir ) ;,0
948,"<S2SV_ModStart> ; if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; } <S2SV_ModStart> ; if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; } <S2SV_ModStart> ; if ( signature_len < 0 ) { return FAILURE ; } <S2SV_ModStart> ; if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; } <S2SV_ModStart> ; if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; }",0
949,"<S2SV_ModStart> && value [ n ] <= max && field -> usage [ value [ n ] - min <S2SV_ModEnd> ]. hid <S2SV_ModStart> && field -> usage [ field -> value [ n ] - min <S2SV_ModEnd> ]. hid <S2SV_ModStart> && field -> usage [ field -> value [ n ] - min <S2SV_ModEnd> ]. hid <S2SV_ModStart> && field -> usage [ field -> value [ n ] - min <S2SV_ModEnd> ]. hid <S2SV_ModStart> && field -> usage [ field -> value [ n ] - min <S2SV_ModEnd> ]. hid <S2SV_ModStart> && field -> usage [ field -> value [ n ] - min <S2SV_ModEnd> ]. hid <S2SV_ModStart> && field -> usage [ field -> value [ n ] - min <S2SV_ModEnd> ]. hid <S2SV_ModStart> && search ( value, field -> value [ n ], count ) ) hid_process_event ( hid, field, & field -> usage [ field -> value [ n ] - min ], 0, interrupt ) ; if ( value [ n ] >= min && value [ n ] <= max && field -> usage [ value [ n ] - min ]. hid && search ( field -> value, value [ n ], count ) ) hid_process_event ( hid, field, & field ->",0
950,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
951,<S2SV_ModStart> ; if ( ins_size + insns_size > sizeof ( struct dex_debug_local_t ) * sizeof ( struct dex_debug_local_t ) * sizeof ( struct dex_debug_local_t ) * sizeof ( struct dex_debug_local_t ) * sizeof ( struct dex_debug_local_t ) * sizeof ( struct dex_debug_local_t ) * sizeof ( struct dex_debug_local_t ) * sizeof ( struct dex_debug_local_t ) * sizeof ( struct dex_debug_local_t ) * sizeof ( struct dex_debug_local_t ) * sizeof ( struct dex_debug_local_t ) * sizeof ( struct dex_debug_local_t ) * sizeof ( struct dex_debug_local_t ) * sizeof ( struct dex_debug_local_t ) * sizeof ( struct dex_debug_local_t ) * sizeof ( struct dex_debug_local_t ) * sizeof ( struct dex_debug_local_t ) * sizeof ( struct dex_debug_local_t ) * sizeof ( struct dex_debug,0
952,"<S2SV_ModStart> ) ) ; rb_hash_aset ( env, server_name_val, req_server_name ( req ) ) ; rb_hash_aset ( env, server_port_val, req_server_port ( req ) ) ; fill_headers ( req, env ) ; rb_hash_aset ( env, rack_name_val, rack_name_val_val ) ; rb_hash_aset ( env, rack_url_scheme_val, rack_url_scheme_val ) ; rb_hash_aset ( env, rack_input_val, req_rack_input ( req ) ) ; rb_hash_aset ( env, rack_errors_val, Qfalse ) ; rb_hash_aset ( env, rack_logger_val, req_rack_logger ( req ) ) ; rb_hash_aset ( env, rack_upgrade_val, self ) ; rb_hash_aset ( env, rack_hijackq_val, self ) ; rb_hash_aset ( env, rack_hijack_io_val, self ) ;",0
953,<S2SV_ModStart> 0 ) ; if ( valuelen > XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ) { valuelen = XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ; args -> valuelen = valuelen ; return XFS_ERROR ( ERANGE ) ; } args -> rmtvaluelen = valuelen ; valuelen = XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ; valuelen = XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ; valuelen = XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ; valuelen = XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ; valuelen = XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ; if ( valuelen > XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ) { valuelen = XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ; valuelen = XFS_LBSIZE ( args -> dp -> i_mount ) / 8 ; },0
954,"<S2SV_ModStart> endif # endif int <S2SV_ModEnd> col_type, prepare_retval <S2SV_ModStart>, prepare_retval ; # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION imp_sth -> use_server_side_prepare = ( imp_dbh -> use_server_side_prepare )? imp_dbh -> use_server_side_prepare : ( imp_dbh -> use_server_side_prepare )? imp_dbh -> use_server_side_prepare : ( imp_dbh -> use_server_side_prepare )? imp_dbh -> use_server_side_prepare : ( imp_dbh -> use_server_side_prepare )? imp_dbh -> use_server_side_prepare : ( imp_dbh -> use_server_side_prepare )? imp_dbh -> use_server_side_prepare : ( imp_dbh -> use_server_side_prepare )? imp_dbh -> use_server_side_prepare : ( imp_dbh -> use_server_side_prepare )? imp_dbh -> use_server_side_prepare : ( imp_dbh -> use_server_side_",0
955,"<S2SV_ModStart> type -> destroy && key -> state!= KEY_IS_UNINSTANTIATED <S2SV_ModEnd> ) key -> <S2SV_ModStart> key ) ; if ( test_bit ( KEY_FLAG_DEAD, & key -> flags ) ) { spin_lock ( & key -> user -> lock ) ; key -> user -> qnkeys -- ; key -> user -> qnbytes -= key -> quotalen ; spin_unlock ( & key -> user -> lock ) ; } atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_IN_QUOTA, & key -> flags ) ) { spin_lock ( & key -> user -> lock ) ; key -> user -> qnkeys -- ; key -> user -> qnbytes -= key -> quotalen ; spin_unlock ( & key -> user -> lock ) ; } atomic_dec ( & key -> user -> nkeys ) ; if ( test_bit ( KEY_FLAG_INSTANTIATED, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_INSTANTIATED, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ;",0
956,"<S2SV_ModStart> ) ) ; if ( state. sumlen > UINT32_MAX / state. num ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""query <S2SV_blank> limit <S2SV_blank> exceeded"" ), errdetail ( ""query <S2SV_blank> limit <S2SV_blank> exceeded"" ) ) ) ;",0
957,<S2SV_ModStart> int need = 0 ; char * line = ( Char * ) malloc ( ( size_t ) need + 1 ) ; if ( line == 0 ) { SysError ( ERROR_MALLOC2 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( Char * ) malloc ( ( size_t ) need + 1 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( Char * ) malloc ( ( size_t ) need + 1 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( Char * ) malloc ( ( size_t ) need + 1 ) ; if ( line == 0 ) SysError ( ERROR_MALLOC2 ) ; free ( line ) ; scp -> data_buffer = ( Char * ) malloc ( ( size_t ) need + 1 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( Char * ) malloc ( ( size_t ) need + 1 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( Char * ) malloc ( ( size_t ),0
958,<S2SV_ModStart> = 0 ; mutex_lock ( & EXT4_SB ( inode -> i_sb ) -> s_orphan_lock <S2SV_ModEnd> ) ; if <S2SV_ModStart> i_orphan ) ; mutex_unlock ( & EXT4_SB ( inode -> i_sb ) -> s_orphan_lock <S2SV_ModEnd> ) ; out,0
959,"<S2SV_ModStart> char * str <S2SV_ModEnd>, int radix <S2SV_ModStart> JsVarFloat stopAtError = 0.0000001 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { if ( val < 0 ) strncpy ( str, ""-NaN"", len ) ; else strncpy ( str, ""Infinity"", len ) ; } else <S2SV_ModEnd> { if ( <S2SV_ModStart> ) ) { if ( val < 0 ) strncpy ( str, ""-Infinity"", len ) ; else strncpy ( str, ""Infinity"", len ) ; } else { if ( val < 0 ) strncpy ( str, ""Infinity"", len ) ; } else { if ( len <= 0 ) { * str = 0 ; return ; } * ( str ++ ) = '-' ; val = - val ; } if ( ( ( JsVarInt ) ( val + stopAtError ) ) == ( 1 + ( JsVarInt ) val ) ) ; val = ( JsVarFloat ) ( 1 + ( JsVarInt ) val ) ; d /= radix ; while ( d >= 1 ) { int v = ( int ) ( val / d ) ; d /= radix ; while ( d >= 1 ) { int v = ( int ) ( val / d )",0
960,"<S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp,",0
961,"<S2SV_ModStart> < 6 ) { memcpy ( buf, ""DEADBEEF"", 8 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( result!= NULL ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; ASSERT ( length == 5 ) ; free ( result ) ; } for ( size = 0 ; size <= 8 ; size ++ ) { size_t length ; char * result ; memcpy ( buf, ""DEADBEEF"", 8 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( result!= NULL ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; ASSERT ( length == 5 ) ; free ( result ) ; } for ( size = 0 ; size <= 8 ; size ++ ) { size_t length ; char * result ; memcpy ( buf, ""DEADBEEF"", 8 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( result!= NULL )",0
962,"<S2SV_ModStart> cycles ) ; if ( unlikely ( fast_pool -> count >= 64 ) && crng_load_fast ( fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ) { fast_pool -> count = 0 ; fast_pool -> last = now ; return ; } <S2SV_ModEnd> if ( (",0
963,"<S2SV_ModStart> ( str, ""ID:"" <S2SV_ModEnd>, len ) <S2SV_ModStart> ( str, jslGetTokenValueAsString ( ) <S2SV_ModEnd>, len ) <S2SV_ModStart> ( str, jslGetTokenValueAsString ( ) <S2SV_ModEnd>, len ) <S2SV_ModStart> ( str, jslGetTokenValueAsString ( ) <S2SV_ModEnd>, len )",0
964,"<S2SV_ModStart> 0 ) { if ( ( st. st_mode & S_IFMT ) == S_IFREG ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> directory"", g. inf ) ; } else if ( ( st. st_mode & S_IFMT ) == S_IFDIR ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> directory"", g. inf ) ; } else if ( ( st. st_mode & S_IFMT ) == S_IFREG ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> directory"", g. inf ) ; } else if ( ( st. st_mode & S_IFMT ) == S_IFLNK ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> directory"", g. inf ) ; } else if ( ( st. st_mode & S_IFMT ) == S_IFDIR ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> directory"", g. inf ) ; } else { complain",0
965,,1
966,"<S2SV_ModStart> * output ; <S2SV_ModEnd> for ( i <S2SV_ModStart> ) ; } input = fopen_utf8 ( argv [ i ], ""rb"" ) ; if ( input == ( FILE * ) NULL ) { ThrowFileException ( exception, FileOpenError, ""UnableToOpenFile"", argv [ i ] ) ; continue ; } for ( c = fgetc ( input ) ; c!= EOF ; c = fgetc ( input ) ) ( void ) fputc ( ( char ) c, output ) ; ( void ) remove_utf8 ( argv [ i ] ) ; } ( void ) fclose ( input ) ; <S2SV_ModEnd> ( void )",0
967,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
968,"<S2SV_ModStart> : ext3_msg ( sb, ""error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> journal <S2SV_blank> device <S2SV_blank> %s: <S2SV_blank> %s"" <S2SV_ModEnd>, __bdevname ( <S2SV_ModStart> fail : ext3_msg ( sb, ""error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> journal <S2SV_blank> device <S2SV_blank> %s: <S2SV_blank> %ld"" <S2SV_ModEnd>, __bdevname (",0
969,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NULL ; <S2SV_ModEnd> pw_init ( ) <S2SV_ModStart> ( fp = safe_mkstemp <S2SV_ModEnd> ( & tmpname <S2SV_ModStart> atomic_dir ) ) == NULL ) return - 1 ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( lckpwdf ( ) < 0 ) goto fail ; pwf = fopen ( PASSWD_FILE, ""r"" ) ; if (! found && linebuf [ namelen ] == ':' &&! strncmp ( linebuf, pwd -> pw_name, namelen ) ) { if ( putpwent ( pwd, fp ) < 0 ) goto fail ; namelen = strlen ( pwd -> pw_name ) ; contlen = strlen ( linebuf ) ; } if (! found && linebuf [ namelen ] == ':' &&! strncmp ( linebuf, pwd -> pw_name,",0
970,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
971,"<S2SV_ModStart> s2 ) { size_t len = <S2SV_ModEnd> strlen ( s1 <S2SV_ModStart> + 1U ) ; memcpy ( s1 + len <S2SV_ModEnd>, s2, <S2SV_ModStart> + 1U ) ; memcpy ( s2, s1 + len <S2SV_ModStart> + 1U ) ; memcpy ( s1 + len, s2 + len ) ; return len <S2SV_ModEnd> ; } <S2SV_null>",0
972,"<S2SV_ModStart> TRUE ; } Jid * to = xmpp_stanza_get_to ( message ) ; if (! to ) { log_warning ( ""Carbon <S2SV_blank> received <S2SV_blank> with <S2SV_blank> no <S2SV_blank> to."" ) ; return TRUE ; } Jid * from = xmpp_stanza_get_from ( message ) ; if (! from ) { log_warning ( ""Carbon <S2SV_blank> received <S2SV_blank> with <S2SV_blank> no <S2SV_blank> from."" ) ; return TRUE ; } Jid * jid_from = jid_create ( from ) ; Jid * jid_to = jid_create ( to ) ; Jid * from_jid = jid_create ( from ) ; Jid * from_jid = jid_create ( from ) ; Jid * from_jid = jid_create ( from ) ; Jid * from_jid = jid_create ( from ) ; Jid * from_jid = jid_create ( from ) ; Jid * from_jid = jid_create ( from ) ; Jid * jid_to = jid_create ( to ) ; Jid * from_jid = jid_create ( from_jid ) ; Jid * from_jid = jid_create ( from_jid ) ;",0
973,"<S2SV_ModStart> ) ) { addReplyError ( c, ""The <S2SV_blank> operating <S2SV_blank> system <S2SV_blank> is <S2SV_blank> not <S2SV_blank> able <S2SV_blank> to <S2SV_blank> handle <S2SV_blank> the <S2SV_blank> specified <S2SV_blank> number <S2SV_blank> of <S2SV_blank> clients, <S2SV_blank> try <S2SV_blank> with <S2SV_blank> %d"" <S2SV_ModEnd>, ll ) <S2SV_ModStart> ) ) { addReplyError ( c, ""The <S2SV_blank> operating <S2SV_blank> system <S2SV_blank> is <S2SV_blank> not <S2SV_blank> able <S2SV_blank> to <S2SV_blank> handle <S2SV_blank> the <S2SV_blank> specified <S2SV_blank> number <S2SV_blank> of <S2SV_blank> clients, <S2SV_blank> try <S2SV_blank> with <S2SV_blank> %d"" <S2SV_ModEnd>, ll ) <S2SV_ModStart> ) ) { addReplyError ( c, ""The <S2SV_blank> operating <S2SV_blank> system <S2SV_blank> is <S2SV_blank> not <S2SV_blank> able <S2SV_blank> to <S2SV_blank> handle <S2SV_blank> the <S2SV_blank> specified <S2SV_blank> number <S2SV_blank> of <S2SV_blank> clients, <S2SV_blank> try <S2SV_blank> with <S2SV_blank> %d"" <S2SV_ModEnd>, ll ) <S2SV_ModStart> ) ) { addReplyError ( c, ""The <S2SV_blank> operating <S2SV_blank> system <S2SV_blank> is <S2SV_blank> not <S2SV_blank> able <S2SV_blank> to <S2SV_blank> handle <S2SV_blank> the <S2SV_blank> specified <S2SV_blank> number <S2SV_blank> of <S2SV_blank> clients, <S2SV_blank> try <S2SV_blank> with <S2SV_blank> %d"" <S2SV_ModEnd>, ll ) <S2SV_ModStart> ) ) { addReplyError ( c, ""The <S2SV_blank> operating <S2SV_blank> system <S2SV_blank> is <S2SV_blank> not <S2SV_blank> able <S2SV_blank> to <S2SV_blank> handle <S2SV_blank> the <S2SV_blank> specified <S2SV_blank> number <S2SV_blank> of <S2SV_blank> clients, <S2SV_blank> try <S2SV_blank> with <S2SV_blank> %d"" <S2SV_ModEnd>, ll )",0
974,"<S2SV_ModStart> { parse_global_option ( CMD_PRINT_HELP <S2SV_ModEnd>, NULL, <S2SV_ModStart> ) ) { parse_global_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL, <S2SV_ModStart> ) ) { parse_global_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL, <S2SV_ModStart> ) ) { parse_global_option ( CMD_PRINT_DEFAULTS <S2SV_ModEnd>, NULL,",0
975,<S2SV_ModStart> ) return - EOPNOTSUPP <S2SV_ModEnd> ; msg ->,0
976,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
977,<S2SV_ModStart> ; if ( st -> st_v1_new_iv. len == 0 ) { st -> st_v1_new_iv. len = e -> enc_blocksize ; } else if ( st -> st_v1_new_iv. len == e -> enc_blocksize ) { st -> st_v1_new_iv. len = e -> enc_blocksize ; } else if ( st -> st_v1_new_iv. len == e -> enc_blocksize ) { st -> st_v1_new_iv. len = e -> enc_blocksize ; } else { st -> st_v1_new_iv. len = e -> enc_blocksize ; } else if ( st -> st_v1_new_iv. len == e -> enc_blocksize ) { st -> st_v1_new_iv. len = e -> enc_blocksize ; } else if ( st -> st_v1_new_iv. len == e -> enc_blocksize ) { st -> st_v1_new_iv. len = e -> enc_blocksize ; } else { st -> st_v1_new,0
978,<S2SV_ModStart> u4_num_Bytes ) { if ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ) { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; } else { if ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ) { ps_op -> s_ivd_video_decode_op_t. u4_num_Bytes = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; } else { ps_op -> s_ivd_video_decode_op_t. u4_num_Bytes = ps_ip -> s_ivd_video_,0
979,"<S2SV_ModStart> int x, y, i ; s_map -> layers [ layer ]. frames_left = 0 ; for ( x = 0 ; x < x_size ; ++ x ) { tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * x_size ] ; tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * old_height ] ; } else { tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * x_size ] ; tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * x_size ] ; tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * old_width ] ; tilemap [ x + y * y_size ] = s_map -> layers [ layer ]. tilemap [ x + y * x_size ] ; tile -> frames_left = tileset_get_delay ( s",0
980,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> ip_printroute ( netdissect_options <S2SV_ModStart> ) ) ; return FALSE <S2SV_ModEnd> ; } if <S2SV_ModStart> & 3 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> length <S2SV_blank> %u]"", length ) ) ; return FALSE <S2SV_ModEnd> ; } if <S2SV_ModStart> & 3 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> ptr <S2SV_blank> %u]"", cp [ 2 ] ) ) ; return FALSE <S2SV_ModEnd> ; } <S2SV_null>",0
981,<S2SV_ModStart> <S2SV_null> static char <S2SV_ModEnd> print_string ( cJSON <S2SV_ModStart> item ) { return print_string_ptr <S2SV_ModEnd> ( item -> <S2SV_ModStart> valuestring ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
982,"<S2SV_ModStart>. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img, <S2SV_ModStart>. encode ( get_alg_priv ( ctx ) <S2SV_ModEnd>, img,",1
983,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_uint8 <S2SV_ModStart> ++ ; ret = sscanf ( argv [ i ] + 1, ""prestring=%s"", buf ) ; if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> prestring\\n"" ) ; return 1 ; } if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; return 1 ; } if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; return 1 ; } if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; return 1 ; } if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omit",0
984,"<S2SV_ModStart> * buf ; size_t chunk_size = chunk_num * chm -> chunk_size ; if ( chunk_size + chunk_size > chm -> chunk_size ) { self -> error = MSPACK_ERR_OVERFLOW ; return NULL ; } chunk_size = chunk_num * chm -> chunk_size ; if ( chunk_size > chm -> chunk_size ) { self -> error = MSPACK_ERR_OVERFLOW ; return NULL ; } buf = ( unsigned char * ) sys -> alloc ( sys, chunk_size ) ; if (! ( buf = ( unsigned char * ) sys -> alloc ( sys, chunk_size ) ) ) { self -> error = MSPACK_ERR_NOMEMORY ; return NULL ; } if (! ( buf = ( unsigned char * ) sys -> alloc ( sys, chunk_size ) ) ) { self -> error = MSPACK_ERR_NOMEMORY ; return NULL ; } if (! ( buf = ( unsigned char * ) sys -> alloc ( sys, chunk_size ) ) ) { self -> error = MSPACK_ERR_NOMEMORY ; return NULL ; } if (! ( buf = ( unsigned char * ) sys -> alloc (",0
985,<S2SV_ModStart> = fake_used_mask ; mutex_lock ( & group_leader_mutex ) ; <S2SV_ModStart> group_entry ) { mutex_unlock ( & group_leader_mutex ) ; <S2SV_ModStart> EINVAL ; } mutex_unlock ( & group_leader_mutex ) ; <S2SV_ModStart> group_entry ) { mutex_unlock ( & group_leader_mutex ) ; <S2SV_ModStart> EINVAL ; } mutex_unlock ( & group_leader_mutex ) ;,0
986,<S2SV_ModStart> cols0 ) ; } else if ( arg1 == 1 ) { win_maximise ( 1 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 1 ) { win_maximise ( 1 ) ; term. rows0 = rows0 ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; term. rows0 = rows0 ; term. cols0 = rows0 ; } else if ( arg1 == 1 ) { win_maximise ( 1 ) ; term. rows0 = rows0 ; term. rows0 = rows0 ; term. cols0 =,0
987,"<S2SV_ModStart> ; if ( s -> avctx -> bit_depth > 8 ) { av_log ( s -> avctx, AV_LOG_ERROR, ""bit <S2SV_blank> depth <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", s -> avctx -> bit_depth ) ; av_log ( s -> avctx, AV_LOG_ERROR, ""bit <S2SV_blank> depth <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", s -> avctx -> bit_depth ) ; } else if ( s -> avctx -> bit_depth > 8 ) { av_log ( s -> avctx, AV_LOG_ERROR, ""bit <S2SV_blank> depth <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", s -> avctx -> bit_depth ) ; av_log ( s -> avctx, AV_LOG_ERROR, ""bit <S2SV_blank> depth <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", s -> avctx -> bit_depth ) ; } else { av_log ( s -> avctx, AV_LOG_ERROR, ""bit <S2SV_blank> depth <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", s -> avctx -> bit_depth )",0
988,"<S2SV_ModStart> ; if ( unlikely ( get_fs ( ) == KERNEL_DS ) ) { mm_segment_t fs = get_fs ( ) ; set_fs ( KERNEL_DS ) ; err = sys_semtimedop ( semid, sops, nsops, timeout ) ; set_fs ( KERNEL_DS ) ; } else { mm_segment_t fs = get_fs ( ) ; set_fs ( KERNEL_DS ) ; err = sys_semtimedop ( semid, sops, nsops, timeout ) ; set_fs ( KERNEL_DS ) ; err = sys_semtimedop ( semid, sops, nsops, timeout ) ; if ( err ) { err = - EFAULT ; } else { mm_segment_t fs = get_fs ( ) ; set_fs ( KERNEL_DS ) ; err = sys_semtimedop ( semid, sops, nsops, timeout ) ; set_fs ( KERNEL_DS ) ; err = sys_semtimedop ( semid, sops, ns",0
989,<S2SV_ModStart> ] ; for ( i = 0 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; } for ( c = 0 ; c < cols + 8 ; c ++ ) { int x = s [ c + 7 ] - s [ c - 8 ] ; int y = s [ c + 7 ] - s [ c - 8 ] ; int x = s [ c + 7 ] - s [ c - 8 ] ; int y = s [ c + 7 ] + s [ c - 8 ] ; sum += x ; sumsq += x * y ; d [ c & 15 ] = d [ ( c - 8 ) & 15 ] ; if ( sumsq * 15 - sum * 15 < flimit ) { d [ c & 15 ] = ( 8 + sum + s [ c ] ) >> 4 ; } s [ c - 8 ] = d [ ( c - 8 ) & 15 ] ; d [ ( c - 8 ) & 15 ] = d [ ( c - 8 ) & 15 ] ; },0
990,<S2SV_ModStart> grub_disk_addr_t start ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext [ i ]. start_lo ) ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext [ i ]. start_hi ) ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext [ i ]. start_lo ) ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext [ i ]. start ) ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext [ i ]. start_lo ) ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext [ i ]. start_hi ) ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext [ i ]. start_lo ) ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext [ i ]. start ) ; start = ( start << 32 ) + grub_le_to_cpu ( ext [ i ]. start,0
991,"<S2SV_ModStart> casspecial ) { if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; # endif i -> posX = i -> parent -> width - i -> width ; } if ( ( i -> posY + i -> height ) > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> Y <S2SV_blank> position\\n"" ) ; # endif i -> posY = i -> parent -> height - i -> height ; } if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; # endif i ->",0
992,"<S2SV_ModStart> ; if ( nelements > CDF_PROP_LIMIT ) { DPRINTF ( ( ""CDF_PROP_LIMIT <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)\\n"", nelements, CDF_PROP_LIMIT ) ) ; goto out ; } <S2SV_ModStart> ; if ( nelements > CDF_PROP_LIMIT ) { DPRINTF ( ( ""CDF_PROP_LIMIT <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)\\n"", nelements, CDF_PROP_LIMIT ) ) ; goto out ; } <S2SV_ModStart> 0 ) { DPRINTF ( ( ""CDF_PROP_LIMIT <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)\\n"", nelements, CDF_PROP_LIMIT ) ) ; goto out ; } <S2SV_ModStart> ; if ( nelements > CDF_PROP_LIMIT ) { DPRINTF ( ( ""CDF_PROP_LIMIT <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)\\n"", nelements, CDF_PROP_LIMIT ) ) ; goto out ; } <S2SV_ModStart> 0 ) { DPRINTF ( ( ""CDF_PROP_LIMIT <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%",0
993,"<S2SV_ModStart> RE_OPCODE_LITERAL ) { if ( bytes_matched >= input_incr ) { fail_on_error ( callback ( flags & RE_FLAGS_EXHAUSTIVE? callback ( flags & RE_FLAGS_BACKWARDS? input + 1 : input_data, bytes_matched, flags, callback_args ) ) ; } else { fail_on_error ( callback ( flags & RE_FLAGS_EXHAUSTIVE? callback ( flags & RE_FLAGS_BACKWARDS? input + 1 : input_data, bytes_matched, flags, callback_args ) ) ; } else { fail_on_error ( callback ( flags & RE_FLAGS_EXHAUSTIVE? callback ( flags & RE_FLAGS_BACKWARDS? input + 1 : input_data, bytes_matched, flags, callback_args ) ) ; } else { fail_on_error ( callback ( flags & RE_FLAGS_EXHAUSTIVE? callback ( flags & RE_FLAGS_BACKWARDS? input + 1 : input_data, bytes_matched, flags, callback_args ) ) ; }",0
994,"<S2SV_ModStart> char * str, size_t len <S2SV_ModStart> case LEX_EOF : strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> return ; case LEX_ID : strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> return ; case LEX_INT : strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> return ; case LEX_FLOAT : strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> return ; case LEX_STRING : strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> return ; case LEX_TEMPLATE_LITERAL : strncpy ( str, ""TEMPLATE <S2SV_blank> LITERAL"", len ) ; return ; case LEX_REGEX : strncpy ( str, ""REGEX"", len ) ; return ; case LEX_UNFINISHED_REGEX : strncpy ( str, ""UNFINISHED <S2SV_blank> REGEX"", len ) ; return ; case LEX_UNFINISHED_COMMENT : strncpy <S2SV_ModEnd> ( str,",0
995,"<S2SV_ModStart> mnt_instance ) ; if ( unlikely (! ( mnt -> mnt. mnt_flags & MNT_INTERNAL ) ) ) { init_task_work ( & mnt -> mnt_rcu, __cleanup_mnt ) ; if (! ( task -> flags & PF_KTHREAD ) ) { init_task_work ( & mnt -> mnt_rcu, true ) ; if ( task -> flags & PF_KTHREAD ) ) { init_task_work ( & mnt -> mnt_rcu, true ) ; if (! task_work_add ( task, & mnt -> mnt_rcu, true ) ; if (! task_work_add ( task, & mnt -> mnt_rcu, true ) ) return ; } init_task_work ( & mnt -> mnt_rcu, true ) ; if ( task -> flags & PF_KTHREAD ) { init_task_work ( & mnt -> mnt_rcu, true ) ; if (! task_work_add ( task, & mnt -> mnt_rcu, true ) ; return ; } <S2SV_ModEnd> schedule_delay",0
996,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 16 ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 32 ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 64 ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",0
997,"<S2SV_ModStart> 0 ) { jas_eprintf ( ""packet <S2SV_blank> offset=%08ld <S2SV_blank> cmptno=%02d <S2SV_blank> rlvlno=%02d <S2SV_blank> prcno=%03d <S2SV_blank> lyrno=%02d\\n"", ( long ) jas_stream_getrwcount ( in ), jpc_pi_cmptno ( pi ), jpc_pi_rlvlno ( pi ), jpc_pi_prcno ( pi ), jpc_pi_lyrno ( pi ) ) ; jas_eprintf ( ""packet <S2SV_blank> offset=%08ld <S2SV_blank> cmptno=%02d <S2SV_blank> rlvlno=%02d <S2SV_blank> prcno=%03d <S2SV_blank> lyrno=%02d\\n"", ( long ) jas_stream_getrwcount ( in ), jpc_pi_cmptno ( pi ), jpc_pi_rlvlno ( pi ), jpc_pi_prcno ( pi ), jpc_pi_lyrno ( pi ) ) ; }",0
998,"<S2SV_ModStart> int err = - EIO <S2SV_ModEnd> ; unsigned char <S2SV_ModStart> * iinfo ; struct udf_inode_info * udf_inode = UDF_I ( inode ) ; <S2SV_ModStart> -> i_alloc_type == ICBTAG_FLAG_AD_IN_ICB ) { symlink = iinfo -> i_ext. i_data + iinfo -> i_lenEAttr ; } else { bh = sb_bread ( inode -> i_sb, pos ) ; if (! bh ) goto out ; } symlink = bh -> b_data ; } <S2SV_ModStart> 0 ; out : up_read ( & iinfo -> i_data_sem ) ; SetPageError ( page ) ; kunmap ( page ) ; unlock_page ( page ) ; return err ; } up_read ( & iinfo -> i_data_sem ) ; SetPageUptodate ( page ) ; unlock_page ( page ) ; return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
999,<S2SV_ModStart>. apic_base & X2APIC_ENABLE <S2SV_ModEnd> ) { msr_bitmap,0
1000,"<S2SV_ModStart> NULL ) { if ( ( st = populate_policy ( context, ld, ent, pol_name, * policy ) )!= 0 ) { krb5_ldap_free_password_policy ( context, * policy ) ; * policy = NULL ; goto cleanup ; } if ( ( st = populate_policy ( context, ld, ent, pol_name, * policy ) )!= 0 ) { krb5_ldap_free_password_policy ( context, * policy ) ; * policy = NULL ; goto cleanup ; } if ( ( st = populate_policy ( context, ld, ent, pol_name, * policy ) )!= 0 ) { krb5_ldap_free_password_policy ( context, * policy ) ; * policy = NULL ; goto cleanup ; } if ( ( st = populate_policy ( context, ld, ent, pol_name, * policy ) )!= 0 ) { krb5_ldap_free_password_policy ( context, * policy ) ; * policy = NULL ; goto cleanup ; }",0
1001,<S2SV_ModStart> = value ; if ( ps_sps -> i1_sps_valid ) { ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( ret!= ( IHEVCD_ERROR_T ) IHEVCD_SUCCESS ) { ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( ret!= ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ) { ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( ret!= ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ) { ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( ret!= ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ) { ret = ( IHEVCD_ERROR_T ) IHEVCD_INVALID_HEADER ; },0
1002,"<S2SV_ModStart> ) ) { strptr = va_arg ( argptr, char * ) ; <S2SV_ModStart> ) ) { strptr = va_arg ( argptr, char * ) ; if ( strptr ) strcpy ( strptr, str ) ; strcpy ( strptr, str ) ; strcpy ( strptr, str ) ; strcpy ( strptr, str ) ; strcpy ( strptr, str ) ; strcpy ( strptr, str ) ; strcpy ( strptr, str ) ; strcpy ( strptr, str ) ; strcpy ( strptr, strptr ) ; strcpy ( strptr, strptr ) ; strcpy ( strptr, str ) ; strcpy ( strptr, str ) ; strcpy ( strptr, str ) ; strcpy ( strptr, str ) ; strcpy ( strptr, str ) ; strcpy ( strptr, str ) ; strcpy ( strptr, str ) ; strcpy ( strptr, str ) ; strcpy ( strptr, str ) ; strcpy ( strptr, str ) ; strcpy ( strptr, str ) ; str",0
1003,<S2SV_ModStart> ; if ( <S2SV_ModEnd> d -> msg_len <S2SV_ModStart> ; } if ( d -> msg_len < CX24116_ARGLEN - CX24116_DISEQC_MSGOFS ) return - EINVAL ; for ( i = 0 ; i < d -> msg_len ; i ++ ) state -> dsec_cmd. args [ CX24116_DISEQC_MSGOFS + i ] = d -> msg [ i ] ; state -> dsec_cmd. args [ CX24116_DISEQC_MSGLEN ] = d -> msg_len ; state -> dsec_cmd. len = CX24116_DISEQC_MSGOFS + state -> dsec_cmd. args [ CX24116_DISEQC_MSGLEN ] ; if ( toneburst == CX24116_DISEQC_TONEOFF ) state -> dsec_cmd. args [ CX24116_DISEQC_BURST ] = 0 ; else if ( toneburst == CX24116_DISEQC_TONECACHE ) state -> dsec_cmd. args [ CX24116_DISEQC_BURST,0
1004,"<S2SV_ModStart> break ; } memcpy ( cinfo. handle, sco_pi ( sk ) -> conn -> hcon -> handle, sizeof ( cinfo. handle ) ) ;",0
1005,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, sun_info. width, sun_info. height ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1006,"<S2SV_ModStart> } pid_t child ; if ( is_link ( src ) ) { <S2SV_ModEnd> fprintf ( stderr <S2SV_ModStart> ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; rv = copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } _exit ( 0 ) ; } drop_privs ( 0 ) ; copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; rv = copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } <S2SV_ModEnd> _exit ( 0",0
1007,"<S2SV_ModStart> int num_items_scanned ; guint <S2SV_ModEnd> pkt_len ; int <S2SV_ModStart> 0 ) ; if ( pkt_len < 0 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } <S2SV_ModStart> = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } <S2SV_ModStart> = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } if ( pkt_len < 0 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; }",0
1008,"<S2SV_ModStart> ; int err ; msg -> msg_namelen = 0 <S2SV_ModStart> EFAULT ; } rskb = skb_peek_tail ( & sk -> sk_receive_queue ) ; if (! ( flags & MSG_TRUNC ) ) { if (! ( flags & MSG_EOR ) ) { if (! ( flags & MSG_PEEK ) ) skb_queue_head ( & sk -> sk_receive_queue, skb ) ; return - EFAULT ; } else { if (! ( flags & MSG_EOR ) ) { if (! ( flags & MSG_PEEK ) ) skb_queue_head ( & sk -> sk_receive_queue, skb ) ; return - EOR ; } else { if (! ( flags & MSG_EOR ) ) { if (! ( flags & MSG_PEEK ) ) skb_queue_head ( & sk -> sk_receive_queue, skb ) ; return - EFAULT ; } } else { if (! ( flags & MSG_EOR ) ) { if (! ( flags & MSG_PEEK ) ) skb_queue_head ( & sk -> sk_receive_queue,",0
1009,"<S2SV_ModStart> key ) ; if ( php_var_unserialize ( & data, p, max, NULL TSRMLS_CC ) ) { zval_dtor ( key ) ; FREE_ZVAL ( key ) ; return 0 ; } <S2SV_ModEnd> break ; case <S2SV_ModStart> key ) ; if ( php_var_unserialize ( & data, p, max, NULL TSRMLS_CC ) ) { zval_dtor ( key ) ; FREE_ZVAL ( key ) ; return 0 ; } <S2SV_ModEnd> break ; case <S2SV_ModStart> key ) ; if ( php_var_unserialize ( & data, p, max, NULL TSRMLS_CC ) ) { zval_dtor ( data ) ; FREE_ZVAL ( data ) ; return 0 ; } <S2SV_ModEnd> break ; case <S2SV_ModStart> key ) ; if ( php_var_unserialize ( & data, p, max, NULL TSRMLS_CC ) ) { zval_dtor ( key ) ; FREE_ZVAL ( key ) ; return 0 ; } <S2SV_ModEnd> break ; case <S2SV_ModStart> key ) ; if ( php_var_unserialize ( & data, p, max, NULL TSRMLS_CC ) ) {",0
1010,"<S2SV_ModStart> ( link_info. str, nla_data ( link [ TIPC_NLA_LINK_NAME ] ) ) ;",0
1011,<S2SV_ModStart> } else { if ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; obuf -> len = len ; opipe -> nrbufs ++ ; ibuf -> offset += obuf -> len ; } else { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; obuf -> len = len ; opipe -> nrbufs ++ ; opipe -> curbuf = ( opipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; } * obuf = * obuf ; obuf -> ops = NULL ; opipe -> nrbufs ++ ; opipe -> curbuf = ( opipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; opipe -> curbuf = ( opipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; opipe -> nrbufs -- ; opipe -> curbuf = ( opipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; },0
1012,"<S2SV_ModStart> -> tokenlen ) { if (! jv_mem_safe_realloc ( p -> tokenbuf, p -> tokenlen * 2 + 256, sizeof ( p -> tokenbuf ) ) ) { jv_err ( ""Couldn't <S2SV_blank> realloc <S2SV_blank> token <S2SV_blank> buffer\\n"" ) ; return ; } <S2SV_ModEnd> p -> tokenbuf",0
1013,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> case BLOCK_8X8 : return vpx_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> case BLOCK_8X16 : return vpx_mse16x8 <S2SV_ModEnd> ; default : <S2SV_ModStart> : return vpx_mse8x16 <S2SV_ModEnd> ; } },0
1014,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
1015,<S2SV_ModStart> ; if ( frames_per_sample > INT_MAX / 2 || frames_per_sample > INT_MAX / 2 || frames_per_sample > INT_MAX / 2 || frames_per_sample > INT_MAX / 2 || frames_per_sample > INT_MAX / sizeof ( uint32_t ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ; if ( frames_per_sample > INT_MAX / 2 || frames_per_sample > INT_MAX / 2 || frames_per_sample > INT_MAX / sizeof ( uint32_t ) || frames_per_sample > INT_MAX / 2 || frames_per_sample > INT_MAX / 2 || frames_per_sample > INT_MAX / 2 || frames_per_sample > INT_MAX / sizeof ( uint32_t ) ) return AVERROR_INVALIDDATA ; if ( frames_per_sample > INT_MAX / 2 || frames_per_sample > INT_MAX / 2 || frames_per_sample > INT_MAX / sizeof ( uint32_t ) ) return AVERROR_INVALIDDATA ;,0
1016,<S2SV_ModStart> ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> ( OPJ_UINT32 ) ( ( ( OPJ_UINT32 ) ( ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ) ( ( OPJ_UINT32 ),0
1017,"<S2SV_ModStart> ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_WEP ) { return return_pkinit_wep ( context, padata, request, reply, cb, rock, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_WEP ) { return return_pkinit_wep ( context, request, reply, cb, rock, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_WEP ) { return return_pkinit_wep ( context, request, reply, cb, rock, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_WEP ) { return return_pkinit_wep ( context, request, reply, cb, rock, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_WEP ) { return return_pkinit_wep ( context, request, reply, cb, rock, moddata, moddata",0
1018,"<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( count,",1
1019,"<S2SV_ModStart> -> stratum_port ; if ( strcmp ( url, port ) ) { applog ( LOG_ERR, ""Denied <S2SV_blank> stratum <S2SV_blank> reconnect <S2SV_blank> request <S2SV_blank> to <S2SV_blank> non-matching <S2SV_blank> domain <S2SV_blank> url <S2SV_blank> \'%s\'"", url ) ; return false ; } if ( strcmp ( dot_reconnect, dot_url ) ) { applog ( LOG_ERR, ""Denied <S2SV_blank> stratum <S2SV_blank> reconnect <S2SV_blank> request <S2SV_blank> to <S2SV_blank> non-matching <S2SV_blank> domain <S2SV_blank> url <S2SV_blank> \'%s\'"", dot_reconnect ) ; return false ; } if ( strcmp ( dot_pool, dot_reconnect ) ) { applog ( LOG_ERR, ""Denied <S2SV_blank> stratum <S2SV_blank> reconnect <S2SV_blank> request <S2SV_blank> to <S2SV_blank> non-matching <S2SV_blank> domain <S2SV_blank> url <S2SV_blank> \'%s\'"", dot_reconnect ) ; return false ; } if ( strcmp ( dot_reconnect, dot_reconnect ) ) { applog ( LOG_ERR, ""Denied <S2SV_blank> stratum <S2SV_blank> reconnect <S2SV_blank> request <S2SV_blank> to <S2SV_blank> non-matching <S2SV_blank> domain <S2SV_blank> url <S2SV_blank> \'%s\'"", dot_reconnect ) ) { applog ( LOG_ERR, ""Denied <S2SV_blank> stratum <S2SV_blank> reconnect <S2SV_blank> request <S2SV_blank> to <S2SV_blank> non-matching <S2SV_blank> domain <S2SV_blank> url",0
1020,"<S2SV_ModStart> = STB_VORBIS_MAX_SUBMAPS ; if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ; <S2SV_ModStart> = STB_VORBIS_MAX_SUBMAPS ; if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ; <S2SV_ModStart> = STB_VORBIS_MAX_SUBMAPS ; if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ; <S2SV_ModStart> = STB_VORBIS_MAX_SUBMAPS ; if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ;",0
1021,<S2SV_ModStart> return 0 ; if ( head -> iov_len + head -> iov_len < XDR_QUADLEN ( len ) * 4 ) return 0 ; dlen = head -> iov_len + rqstp -> rq_arg. page_len - hdr ; if ( dlen < XDR_QUADLEN ( len ) * 4 ) return 0 ; rqstp -> rq_vec [ 0 ]. iov_base = ( void * ) p ; rqstp -> rq_vec [ 0 ]. iov_len = dlen - XDR_QUADLEN ( len ) * 4 ; v = 0 ; while ( len > rqstp -> rq_vec [ v ]. iov_len ) { len -= rqstp -> rq_vec [ v ]. iov_len ; v ++ ; rqstp -> rq_vec [ v ]. iov_base = page_address ( rqstp -> rq_pages [ v ] ) ; rqstp -> rq_vec [ v ]. iov_len = PAGE_SIZE ; },0
1022,"<S2SV_ModStart> ) ; struct o2nm_cluster * cluster = to_o2nm_cluster_from_node ( node ) ; unsigned long tmp <S2SV_ModEnd> ; char * <S2SV_ModStart> EINVAL ; write_lock ( & cluster -> cl_nodes_lock ) ; if ( cluster -> cl_nodes [ tmp ] ) ret = - EEXIST ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_NUM, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_NUM, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EEXIST ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_PORT, & node -> nd_set_attributes ) ) ret = - EBUSY ; else { cluster -> cl_nodes [ tmp ] = node ; set_bit ( tmp, cluster -> cl_nodes_bitmap ) ;",0
1023,"<S2SV_ModStart> flags ) ; <S2SV_ModEnd> v4l2_buf = to_vb2_v4l2_buffer <S2SV_ModStart> vb2_buf ) ; <S2SV_ModEnd> if (! <S2SV_ModStart> if (! vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", frame_len ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank>",0
1024,<S2SV_ModStart> size ) { if ( size > ZMALLOC_MAX_SIZE ) { zmalloc_oom_handler ( ZMALLOC_MAX_SIZE ) ; update_zmalloc_stat_alloc ( ZMALLOC_MAX_SIZE ) ; return NULL ; },0
1025,"<S2SV_ModStart> ssize_t count ; if ( items > SENSIBLE_SIZE ) { psf_log_syserr ( psf, EINVAL ) ; break ; }",0
1026,<S2SV_ModStart> -> serviceId == EXTRACT_16BITS <S2SV_ModEnd> ( & rxh,1
1027,"<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len > IEEE80211_MAX_SSID_LEN ) { memset ( adhoc_start -> ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memcpy ( bss_desc -> ssid. ssid, req_ssid -> ssid, req_ssid -> ssid_len ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memcpy ( bss_desc -> ssid. ssid, req_ssid -> ssid, req_ssid -> ssid_len ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss",0
1028,"<S2SV_ModStart> ) ) { xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, 0, 0 ) ; xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, 0, 0 ) ; xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, 0, 0 ) ; xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, 0, 0 ) ; xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, 0, 0, 0 ) ; xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, 0, 0, 0 ) ; xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, 0, 0 ) ; xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, 0, 0 ) ; xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, 0, 0 ) ; xfs_",0
1029,<S2SV_ModStart> r ) { int ret ; ret = <S2SV_ModEnd> ASN1_item_verify ( ASN1_ITEM_rptr,0
1030,<S2SV_ModStart> 0 ) ; hrtimer_try_to_cancel ( & stime -> hrt ) ;,0
1031,"<S2SV_ModStart> ; struct l2cap_conf_rfc rfc <S2SV_ModEnd> = {. <S2SV_ModStart> = L2CAP_MODE_ERTM ; <S2SV_ModEnd> rfc. txwin_size <S2SV_ModStart> = L2CAP_DEFAULT_TX_WINDOW ; rfc. max_transmit = L2CAP_DEFAULT_MAX_RECEIVE ; rfc. retrans_timeout = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO ) ; rfc. monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; l2cap_add_conf_opt ( & ptr, L2CAP_CONF_RFC, sizeof ( rfc ), ( unsigned long ) & rfc ) ; break ; case L2CAP_MODE_STREAMING : rfc. mode = L2CAP_MODE_STREAMING ; rfc. txwin_size = L2CAP_DEFAULT_TX_WINDOW ; rfc. max_transmit = L2CAP_DEFAULT_MAX_RECEIVE ; rfc. max_transmit = L2CAP_DEFAULT_MAX_",0
1032,"<S2SV_ModStart> r ) { if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; }",0
1033,<S2SV_ModStart> -> chunksize = s -> line_count <S2SV_ModEnd> ; for (,0
1034,<S2SV_ModStart> ps_cur_slice -> u1_nal_ref_idc ) ; if ( ps_cur_slice -> u1_nal_ref_idc > IDR_SLICE_NAL_MAX ) { ps_dec -> u1_nal_ref_idc = IDR_SLICE_NAL_MAX ; ps_dec -> ps_cur_slice -> u1_nal_ref_idc = IDR_SLICE_NAL_MAX ; } else { ps_dec -> ps_cur_slice -> u1_nal_ref_idc = IDR_SLICE_NAL_MAX ; ps_dec -> ps_cur_slice -> u1_nal_ref_idc = IDR_SLICE_NAL_MAX ; ps_dec -> ps_cur_slice -> u1_nal_ref_idc = IDR_SLICE_NAL_MAX ; } else { ps_dec -> ps_cur_slice -> u1_nal_ref_idc = IDR_SLICE_NAL ; },0
1035,<S2SV_ModStart> while ( pair!= NULL,0
1036,"<S2SV_ModStart> } err = crypto_rng_seed_setkey <S2SV_ModEnd> ( tfm,",0
1037,"<S2SV_ModStart> = uid ; <S2SV_ModEnd> spin_lock_irq ( & <S2SV_ModStart> new -> count = 0 <S2SV_ModEnd> ; } else <S2SV_ModStart> } } spin_lock_irq ( & ucounts_lock ) ; ucounts = find_ucounts ( ns, uid, hashent ) ; if (! ucounts ) ucounts = NULL ; spin_unlock_irq ( & ucounts_lock ) ; return ucounts ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1038,"<S2SV_ModStart> & msg_sys, <S2SV_ModEnd> msg_sys. msg_namelen <S2SV_ModStart> & msg_sys, <S2SV_ModEnd> msg_sys. msg_namelen <S2SV_ModStart> & msg_sys, <S2SV_ModEnd> msg_sys. msg_namelen <S2SV_ModStart> & msg_sys, <S2SV_ModEnd> msg_sys. msg_namelen <S2SV_ModStart> & msg_sys, <S2SV_ModEnd> msg_sys. msg_namelen <S2SV_ModStart> & msg_sys, <S2SV_ModEnd> msg_sys. msg_namelen",0
1039,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1040,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> prefetch_table ( const <S2SV_ModStart> len ) { if ( len < 8 * 32 ) { return - 1 ; } <S2SV_ModStart> 32 ] ; } return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1041,"<S2SV_ModStart> ; } } if ( path [ depth ]. p_ext == NULL ) { ext4_error ( inode -> i_sb, ""bad <S2SV_blank> extent <S2SV_blank> address <S2SV_blank> "" ""inode: <S2SV_blank> %lu, <S2SV_blank> iblock: <S2SV_blank> %d, <S2SV_blank> depth: <S2SV_blank> %d"", inode -> i_ino, depth ) ; goto out2 ; }",0
1042,"<S2SV_ModStart> * open_stateid, fmode_t fmode <S2SV_ModEnd> ) { struct <S2SV_ModStart> = 0 ; fmode <S2SV_ModEnd> &= ( FMODE_READ <S2SV_ModStart> & FMODE_WRITE )!= fmode <S2SV_ModEnd> ) goto no_delegation_unlock <S2SV_ModStart> ) ; __update_open_stateid <S2SV_ModEnd> ( state, <S2SV_ModStart> NULL ) { __update_open_stateid <S2SV_ModEnd> ( state, <S2SV_ModStart> NULL ) { __update_open_stateid <S2SV_ModEnd> ( state,",0
1043,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, page. width, page. height ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1044,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
1045,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> oidc_scrub_headers ( request_rec,0
1046,"<S2SV_ModStart> int * out_rate_sum, int64_t * out_dist_sum, vpx_bit_depth_t bit_depth <S2SV_ModStart> sse ; for ( int i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblock_plane * const p = & x -> plane [ i ] ; const BLOCK_SIZE bs = get_plane_block_size ( bsize, pd ) ; ( void ) cpi -> fn_ptr [ bs ]. vf ( p -> src. buf, p -> src. stride, pd -> dst. buf, pd -> dst. stride, & sse ) ; if ( i == 0 ) x -> pred_sse [ ref ] = sse ; if ( cpi -> speed > 4 ) { int64_t rate ; int64_t dist ; int64_t square_error ; int quantizer = ( pd -> dequant [ 1 ] >> 3 ) ; if ( quantizer < 120 ) rate = 0 ; dist = ( 280 - quantizer ) >> 8 ; else rate = 0 ; dist = ( 280 - quantizer ) >> 8 ; else rate = 0 ; dist = ( 280 - quantizer )",0
1047,<S2SV_ModStart> } if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
1048,"<S2SV_ModStart> pptr ++ ) ; if ( source_address_length < 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size!"", source_address_length ) ) ; break ; } <S2SV_ModStart> ( ndo, "" <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size!"", source_address_length ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size!"", source_address_length ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size!"", source_address_length ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size:"", source_address_length ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, "" <S2SV_blank> length",0
1049,<S2SV_ModStart> { if ( index >= PAM_MAX_RESP_SIZE ) { return ( PAM_BUF_ERR ) ; } <S2SV_ModStart>!= '\\0' ) { if ( index >= PAM_MAX_RESP_SIZE ) { return ( PAM_BUF_ERR ) ; } <S2SV_ModStart> ; } } if ( index >= PAM_MAX_RESP_SIZE ) { return ( PAM_BUF_ERR ) ; } if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) { return ( PAM_BUF_ERR ) ; } if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) { return ( PAM_BUF_ERR ) ; } if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) { return ( PAM_BUF_ERR ) ; } if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) { return ( PAM_BUF_ERR ) ; } if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) { return ( PAM_BUF_ERR ) ;,0
1050,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> seg ) { return vpx_read_tree <S2SV_ModEnd> ( r,",0
1051,<S2SV_ModStart> uint32_t backup_handle ; if ( unlikely ( req -> mip_levels > DRM_VMW_MAX_MIP_LEVELS ) ) return - EINVAL,0
1052,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct desc_struct <S2SV_ModEnd> * get_desc ( <S2SV_ModStart> ) { struct desc_struct <S2SV_ModEnd> * desc = <S2SV_ModStart> && sel < current -> mm -> context. ldt -> nr_entries <S2SV_ModStart> && sel < current -> mm -> context. ldt -> <S2SV_ModEnd> nr_entries ) desc <S2SV_ModStart> && sel < current -> mm -> context. ldt -> <S2SV_ModEnd> nr_entries ) desc <S2SV_ModStart> && sel < current -> mm -> context. ldt -> <S2SV_ModEnd> nr_entries ) desc <S2SV_ModStart> -> entries [ sel ] ; mutex_unlock ( & current -> mm -> context. lock ) ; return desc <S2SV_ModEnd> ; } # <S2SV_ModStart> & gdt_desc ) ; desc_base = sel & SEGMENT_RPL_MASK | SEGMENT_TI_MASK ; if ( desc_base > gdt_desc. size ) return NULL ; desc_base = sel & SEGMENT_RPL_MASK ; if ( desc_base > gdt_desc. size ) return NULL ; desc_base = sel & ~ ( SEGMENT_RPL_MASK | SEGMENT_TI_MASK ) ; if ( desc_base > gdt_desc. size ) return,0
1053,"<S2SV_ModStart> ++ i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ i ) { memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> ++ i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> ++ i ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",0
1054,"<S2SV_ModStart> * bp ; struct sctp_sockaddr_entry * laddr = & t -> ipaddr ; union sctp_addr * daddr = & t -> ipaddr ; union sctp_addr dst_saddr ; __u8 matchlen = 0 ; __u8 bmatchlen = 0 ; __u8 matchlen = 0 ; __u8 bmatchlen = 0 ; memset ( fl6, 0, sizeof ( struct flowi6 ) ) ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> flowi6_proto = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> fl6_dport = daddr -> v6. sin6_port ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> flowi6_oif = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr ->",0
1055,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
1056,"<S2SV_ModStart> buf2 ; depth -- ; buf = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( buf2 == NULL ) return ( NULL ) ; <S2SV_ModStart> ++ ; buf = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( buf == NULL ) return ( NULL ) ; fmt = p + 1 ; buf = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( buf == NULL ) return ( NULL ) ; fmt = p + 1 ; buf = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( buf == NULL ) return ( NULL ) ; fmt = p + 1 ; buf = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( buf == NULL ) return ( NULL ) ; fmt = p + 1 ; buf = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( buf == NULL ) return ( NULL ) ;",0
1057,<S2SV_ModStart> priv -> protocol_timeout && gsm_xsmp_protocol_timeout_is_valid ( client -> priv -> protocol_timeout ) ) { gsm_xsmp_protocol_timeout_reset ( client -> priv -> protocol_timeout ) ; client -> priv -> protocol_timeout = 0 ; } else if ( gsm_xsmp_protocol_timeout_is_valid ( client -> priv -> protocol_timeout ) ) { gsm_xsmp_protocol_timeout_reset ( client -> priv -> protocol_timeout ) ; } if ( gsm_xsmp_protocol_timeout_is_valid ( client -> priv -> protocol_timeout ) ) { gsm_xsmp_protocol_timeout_reset ( client -> priv -> protocol_timeout ) ; client -> priv -> protocol_timeout = 0 ; } else if ( gsm_xsmp_protocol_timeout_is_valid ( client -> priv -> protocol_timeout ) ) { gsm_xsmp_protocol_timeout_reset ( client -> priv -> protocol_timeout ) ; } if ( gsm_xsmp_protocol_timeout_is_valid ( client -> priv -> protocol_timeout ) ) { gsm_xsmp_protocol_timeout,0
1058,"<S2SV_ModStart> 1 ) ; ND_TCHECK_32BITS ( & ps -> slot ) ; <S2SV_ModStart> ; for ( ie = io + ps -> nid ; ie < ie &&! ND_TTEST ( * io ) ; ++ ie ) { ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_string ( ndo, & ie -> id ), EXTRACT_32BITS ( & ie -> off ) ) ) ; io = ( struct id_off * ) ie ; } ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_string ( ndo, & ie -> id ) ) ) ; io = ( struct id_off * ) ie ; ++ ie ) { ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_string ( ndo, & ie -> id ), EXTRACT_32BITS ( & ie -> off ) ) ) ; io = ( struct id_off * ) ie ; } ND_PRINT ( ( ndo, ""%c%s:%u"", c, ipaddr_string ( ndo, & ie -> id ) ) ) ; io",0
1059,"<S2SV_ModStart> length ) ; } header. controlWord = htole16 ( TX_CTRL_TXIC | ( context -> frameId ++ & TX_CTRL_TXFID ) ) ; header. byteCount = htole16 ( length ) ; ksz8851SetBit ( interface, KSZ8851_RXQCR, RXQCR_SDA ) ; ksz8851SetBit ( interface, KSZ8851_TXQCR, TXQCR_METFE ) ; ksz8851SetBit ( interface, KSZ8851_TXMIR, TXMIR_TXMA_MASK ) ; ksz8851WriteFifo ( interface, ( uint8_t * ) & header, sizeof ( Ksz8851TxHeader ) ) ; ksz8851WriteFifo ( interface, ( uint8_t * ) & header, sizeof ( Ksz8851TxHeader ) ) ; ksz8851WriteFifo ( interface, ( uint8_t * ) & header, sizeof ( Ksz8851TxHeader ) ) ; ksz8851WriteFifo ( interface, ( uint8_t * ) & header, sizeof ( Ksz8851TxHeader",0
1060,"<S2SV_ModStart> NULL ) ; rb_ary_push ( self, rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_",0
1061,"<S2SV_ModStart> assoc_array_ptr_is_leaf ( ptr ) && ops -> compare_object ( assoc_array_ptr_to_leaf ( ptr ), index_key ) ) { pr_devel ( ""replace <S2SV_blank> in <S2SV_blank> slot <S2SV_blank> %d\\n"", i ) ; edit -> dead_leaf = node -> slots [ i ] ; pr_devel ( ""<--%s() <S2SV_blank> = <S2SV_blank> ok <S2SV_blank> [replace]\\n"", __func__ ) ; return true ; } <S2SV_ModStart> assoc_array_ptr_is_leaf ( ptr ) && ops -> compare_object ( assoc_array_ptr_to_leaf ( ptr ), index_key ) ) { pr_devel ( ""replace <S2SV_blank> in <S2SV_blank> slot <S2SV_blank> %d\\n"", i ) ; edit -> dead_leaf = node -> slots [ i ] ; pr_devel ( ""<--%s() <S2SV_blank> = <S2SV_blank> ok <S2SV_blank> [replace]\\n"", __func__ ) ; return true ; }",0
1062,"<S2SV_ModStart> ; settings. host = ""127.0.0.1"" ; settings. <S2SV_ModStart> udpport = ""127.0.0.1"" ; if ( settings. host == ""127.0.0.1"" || settings. host == ""127.0.0.1"" || settings. host == ""127.0.0.1"" || settings. host == ""127.0.0.1"" || settings. host == ""127.0.0.1"" || settings. host == ""127.0.0.1"" || settings. host == ""127.0.0.1"" || settings. host == ""127.0.0.0.1"" || settings. host == ""127.0.0.0.1"" || settings. host == ""127.0.0.0.1"" || settings. host == ""127.0.0.0.1"" || settings. host == ""127.0.0.0.1"" || settings. host == ""127.0.0.0.1"" || settings. host == ""127.0.0.0.1"" || settings. host == ""127.0.0",0
1063,"<S2SV_ModStart> ( ) ; # else g_warning
1064,"<S2SV_ModStart> x_7 ; WORD32 x_8, x_9, x_a, x_b, x_c, x_d, x_e, x_f ; WORD32 x_10, x_11, x_12, x_13, x_14, x_15 ; WORD32 x_11, x_12, x_13, x_14, x_15 ; WORD32 x_12, x_13, x_14 ; x_11 = x_1 + x_2 ; x_12 = x_2 + x_3 ; x_11 = x_1 + x_3 ; x_12 = x_4 + x_6 ; x_13 = x_5 + x_7 ; x_14 = x_6 + x_7 ; x_15 = x_4 + x_6 ; x_16 = x_5 + x_7 ; x_14 = x_5 + x_7 ; x_15 = x_4 + x_6 ; x_16 = x_5 + x_7 ; x_12 = x_1 + x_3 ; x13 = x_4 + x_",0
1065,<S2SV_ModStart> clips_ptr ) { if ( num_clips < 0 || num_clips > DRM_MODE_FB_DIRTY_MAX_CLIPS ) { ret = - EINVAL ; goto out_err1 ; },1
1066,<S2SV_ModStart> ; if ( pmd_trans_huge_or_clear_bad <S2SV_ModEnd> ( * pmd,0
1067,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1068,"<S2SV_ModStart> asmop ) ; if (! hint ) { r_asm_set_pc ( core -> assembler, addr ) ; r_asm_set_pc ( core -> assembler, addr + size ) ; r_asm_set_pc ( core -> assembler, addr + size ) ; r_asm_set_pc ( core -> assembler, addr + size ) ; r_asm_set_pc ( core -> assembler, addr + size ) ; } else if ( hint ) { r_asm_set_pc ( core -> assembler, addr + size ) ; r_asm_set_pc ( core -> assembler, addr + size ) ; r_asm_set_pc ( core -> assembler, addr + size ) ; r_asm_set_pc ( core -> assembler, addr + size ) ; r_asm_set_pc ( core -> assembler, addr + size ) ; r_asm_set_pc ( core -> assembler, addr + size ) ; r_asm_set_pc ( core -> assembler, addr + size ) ; r_asm_set_pc ( core -> assembler, addr + size ) ; }",0
1069,"<S2SV_ModStart> int width, height, target_width, target_height ; if ( argc < 4 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( argv [ 2 ], & width, & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } if (! parse_dim ( argv [ 3 ], & target_width, & target_height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpin = fopen ( fin, ""rb"" ) ; if ( fpin == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> read\\n"", fin ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpout = fopen ( fout, ""wb"" ) ; if ( fpout == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank>",0
1070,"<S2SV_ModStart> + DSPQ_DATA_BUFF ; u16 <S2SV_ModEnd> wTmp ; if <S2SV_ModStart> JQS_wTail )!= readw ( chip -> DSPQ + JQS_wHead ) ) { snd_msnd_eval_dsp_msg ( chip, readw ( pwDSPQData + 2 * readw ( chip -> DSPQ + JQS_wHead ) ) ) ; wTmp = readw ( pwDSPQData + 2 * readw ( chip -> DSPQ + JQS_wHead ) ) + 1 ; if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip -> DSPQ + JQS_wHead ) + 1 ; if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip -> DSPQ + JQS_wHead ) + 1 ; if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip -> DSPQ + JQS_wHead ) + 1 ; if ( wTmp > readw ( chip",0
1071,"<S2SV_ModStart> OPCODE_DESC * opcode_desc ; if ( len < 2 ) { goto INVALID_OP ; } <S2SV_ModStart> opcode_desc ) ; if ( opcode_desc -> cycles <= 0 ) { opcode_desc -> cycles = 2 ; } op -> size = opcode_desc -> size ; op -> type = opcode_desc -> type ; op -> addr = addr ; r_strbuf_setf ( & op -> esil, """" ) ; opcode_desc -> type = R_ANAL_OP_TYPE_UNK ; op -> nopcode = ( op -> type == R_ANAL_OP_TYPE_UNK ) ; if ( op -> type == R_ANAL_OP_TYPE_UNK ) { op -> type = R_ANAL_OP_TYPE_UNK ; } if ( op -> type == R_ANAL_OP_TYPE_UNK ) { op -> type = R_ANAL_OP_TYPE_UNK ; } if ( op -> type == R_ANAL_OP_TYPE_UNK ) { op -> type = R_ANAL_OP_TYPE_UNK ; } if ( op -> type == R_ANAL_OP_TYPE_UNK ) { op",0
1072,<S2SV_ModStart> status ; ACPI_FUNCTION_TRACE ( ns_terminate ) ; <S2SV_ModStart> * prev ; union acpi_operand_object * next ; next = acpi_gbl_module_code_list ; while ( next ) { prev = next ; next = next -> method. mutex ; } } # ifdef ACPI_EXEC_APP { union acpi_operand_object * next ; union acpi_operand_object * prev ; union acpi_operand_object * next ; while ( next ) { prev = next -> method. mutex ; next = next -> method. mutex ; } # endif acpi_ns_delete_namespace_subtree ( acpi_gbl_root_node ) ; status = acpi_ut_acquire_mutex ( ACPI_MTX_NAMESPACE ) ; if ( ACPI_FAILURE ( status ) ) { return_VOID ; } acpi_ns_delete_namespace_subtree ( acpi_gbl_root_node ) ; ( void ) acpi_ut_release_mutex ( ACPI_MTX_NAMESPACE ) ; status = acpi_ut_acquire_mutex ( ACPI_MTX_NAMESPACE ) ;,0
1073,"<S2SV_ModStart> ; # ifndef WIN32 dlopen ( the_url, RTLD_NOW | RTLD_GLOBAL <S2SV_ModEnd> ) ; # <S2SV_ModStart> ifndef WIN32 dlopen ( the_url, RTLD_NOW | RTLD_GLOBAL <S2SV_ModEnd> ) ; # <S2SV_ModStart> ifndef WIN32 dlopen ( the_url, RTLD_NOW | RTLD_GLOBAL <S2SV_ModEnd> ) ; # <S2SV_ModStart> ifndef WIN32 dlopen ( the_url, RTLD_NOW | RTLD_GLOBAL <S2SV_ModEnd> ) ; # <S2SV_ModStart> ifndef WIN32 dlopen ( NULL, RTLD_NOW | RTLD_GLOBAL <S2SV_ModEnd> ) ; # <S2SV_ModStart> ifndef WIN32 dlopen ( the_url, RTLD_GLOBAL <S2SV_ModEnd> ) ; # <S2SV_ModStart> ifndef WIN32 dlopen ( the_url, RTLD_NOW | RTLD_GLOBAL <S2SV_ModEnd> ) ; # <S2SV_ModStart> ifndef WIN32 dlopen ( the_url, RTLD_GLOBAL <S2SV_ModEnd> ) ; # <S2SV_ModStart> ifndef WIN32 dlopen ( NULL, RTLD_NOW | RTLD_GLOBAL <S2SV_ModEnd> ) ; # <S2SV_ModStart> ifndef WIN32",0
1074,"<S2SV_ModStart> int i, result <S2SV_ModEnd> ; _Py_IDENTIFIER (",0
1075,"<S2SV_ModStart> vpx_codec_alg_priv * priv <S2SV_ModEnd> ; vpx_codec_enc_cfg_t * <S2SV_ModStart> vpx_codec_alg_priv * priv <S2SV_ModEnd> ; struct vpx_codec_enc_cfg_t <S2SV_ModStart> enc ) { memset ( priv, 0, sizeof ( struct vpx_codec_alg_priv ) ) ; return VPX_CODEC_MEM_ERROR ; } <S2SV_ModEnd> ctx -> priv <S2SV_ModStart>. enc ) { memcpy ( priv -> base, * ctx -> config. enc ) ; } <S2SV_ModEnd> cfg = & <S2SV_ModStart> i ++ ) ; priv -> vp8_cfg = extracfg_map [ i ]. cfg ; priv -> vp8_cfg. pkt_list = & priv -> pkt_list. head ; priv -> cx_data_sz = priv -> cfg. g_w * priv -> cfg. g_h * 3 / 2 ; if ( priv -> cx_data_sz < 32768 ) priv -> cx_data_sz = 32768 ; priv -> vp8_cfg. pkt_list = & priv -> pkt_list. head ; priv -> cx_data_sz = 32768 ; priv -> cx_data_sz = 32768 ; priv",0
1076,"<S2SV_ModStart> error ) { xfs_da_shrink_inode ( args, 0, bp ) ; xfs_idata_realloc ( dp, size, XFS_ATTR_FORK ) ; memcpy ( ifp -> if_u1. if_data, tmpbuffer, size ) ; sf = ( xfs_attr_shortform_t * ) tmpbuffer ; xfs_bmap_local_to_extents_empty ( dp, XFS_ATTR_FORK ) ; bp = NULL ; goto out ; } xfs_da_shrink_inode ( args, 0, bp ) ; xfs_idata_realloc ( dp, size, XFS_ATTR_FORK ) ; memcpy ( ifp -> if_u1. if_data, tmpbuffer, size ) ; xfs_bmap_local_to_extents_empty ( dp, XFS_ATTR_FORK ) ; xfs_bmap_local_to_extents_empty ( dp, XFS_ATTR_FORK ) ; xfs_bmap_local_to_extents_empty ( dp, XFS_ATTR_FOR",0
1077,<S2SV_ModStart> } if ( ( c = x * 16 ; c < 256 ) { pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> total_freq = totfr ; return ret ; } pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> lookup [ x ] = x * 16 ; c = x * 16 ; cnt_c = 0 ; while ( c < 256 ) { pixel -> freq [ i ] = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> lookup [ i ] = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] = ( pixel -> freq [ i ] >> 1 ) +,0
1078,"<S2SV_ModStart> ; err = nla_parse_nested ( attrs, TIPC_NLA_SOCK_MAX, & attrs [ TIPC_NLA_SOCK ], tipc_nl_sock_policy ) ; if ( err ) return err ; <S2SV_ModStart> - EINVAL ; tsk_portid = nla_get_u32 ( sock [ TIPC_NLA_SOCK_REF ] ) ; } <S2SV_ModEnd> } if (",0
1079,"<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ctx -> fragments. ptrs, 0, sizeof ( ctx -> fragments. ptrs ) ) ; memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ctx -> fragments. sizes, 0, sizeof ( ctx -> fragments. sizes ) ) ; } if ( ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ ctx -> fragments. count ] = data ; ctx -> fragments -> sizes [ ctx -> fragments. count ] = data_sz ; ctx -> fragments. count ++ ; if ( ctx -> fragments. count > ( 1 << EIGHT_PARTITION ) + 1 ) { ctx -> fragments. count = 0 ; * res = VPX_CODEC_INVALID_PARAM ; return - 1 ; } return 0 ; } if ( ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count ++ ; if ( ctx -> fragments. count > ( 1 << EIGHT_PARTITION ) + 1 ) { ctx -> fragments. count = 0",0
1080,<S2SV_ModStart> = v ; if (! IS_ERR ( vma ) ),1
1081,"<S2SV_ModStart> ; length = le16_to_cpu ( cap -> bLength ) ; if ( total_len < length ) { dev_err ( ddev, ""unable <S2SV_blank> to <S2SV_blank> get <S2SV_blank> BOS <S2SV_blank> descriptor\\n"" ) ; goto err ; } dev -> bos -> desc = ( struct usb_bos_descriptor * ) buffer ; ret = usb_get_descriptor ( dev, USB_DT_BOS, 0, buffer, total_len ) ; if ( ret < total_len ) { dev_err ( ddev, ""unable <S2SV_blank> to <S2SV_blank> get <S2SV_blank> BOS <S2SV_blank> descriptor\\n"" ) ; goto err ; } dev -> bos -> desc = ( struct usb_bos_descriptor * ) buffer ; ret = usb_get_descriptor ( dev, USB_DT_BOS, 0, buffer, total_len ) ; if ( ret < total_len ) { dev_err ( ddev, ""unable <S2SV_blank> to <S2SV_blank> get <S2SV_blank> BOS <S2SV_blank> descriptor\\n"" ) ; goto err ; } dev -> bos -> desc = ( struct usb_bos_descriptor * ) buffer ; ret = usb_get_descriptor ( dev, USB_DT_BOS, 0, buffer, total_len ) ;",0
1082,<S2SV_ModStart> task_struct * task <S2SV_ModEnd> ; file_sb_list_del (,0
1083,"<S2SV_ModStart> EIO ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> efe\\n"", inode -> i_ino ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> efe\\n"", inode -> i_ino ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> efe\\n"", inode -> i_ino ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> efe\\n"", inode -> i_ino ) ; goto out ; }",0
1084,"<S2SV_ModStart> data ) { uint16_t status ; <S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0",0
1085,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> bad_format_imginfo ( char <S2SV_ModStart> fmt ) { if ( * fmt == '\\0' ) return 1 ; char * ptr = fmt ; while ( * ptr!= '%' ) if ( * ptr =='s' || * ptr == 'S' ) { n = 1 ; ptr ++ ; } else { if ( * ptr =='<S2SV_blank>') ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; if ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; if ( * ptr == 'l' ) ptr ++ ; if ( * ptr == 'u' ) ptr ++ ; else return 1,0
1086,"<S2SV_ModStart> sk_forward_alloc ) ; rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ;",0
1087,<S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { if ( result > ( INT_MAX / 10 ) ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX ) { too_large = 1 ; } else { result += c ; } bp ++ ; len -- ; saw_digit = 0 ; } } } <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { if ( result > ( INT_MAX / 10 ) ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX ),0
1088,"<S2SV_ModStart> xfs_da_shrink_buffer ( bp, XFS_ATTR_LEAF_ENTSIZE ( leaf -> i_mount ), XFS_ATTR_LEAF_ENTSIZE ( leaf -> i_mount ), XFS_ATTR_LEAF_ENTSIZE ( leaf -> i_mount ), XFS_ATTR_LEAF_ENTSIZE ( leaf -> i_mount ), XFS_ATTR_LEAF_ENTSIZE ( leaf -> i_mount ), XFS_ATTR_LEAF_ENTSIZE ( leaf -> i_mount ), XFS_ATTR_LEAF_ENTSIZE ( leaf -> i_mount ), XFS_ATTR_LEAF_ENTSIZE ( leaf -> i_mount ), XFS_ATTR_LEAF_ENTSIZE ( leaf -> i_mount ), XFS_ATTR_LEAF_ENTSIZE ( leaf -> i_mount ), XFS_ATTR_LEAF_ENTSIZE ( leaf -> i_mount ), XFS_ATTR_LEAF_ENTSIZE ( leaf -> i_mount ), XFS_ATTR_LEAF_ENTSIZE ( leaf -> i_mount ), XFS_ATTR_LEAF",0
1089,"<S2SV_ModStart> ""DefragIPv4NoDataTest"", DefragIPv4NoDataTest ) ; UtRegisterTest ( ""DefragIPv4TooLargeTest"", DefragIPv4TooLargeTest ) ; UtRegisterTest ( ""IPV6DefragInOrderSimpleTest"", IPV6DefragInOrderSimpleTest ) ; UtRegisterTest ( ""IPV6DefragReverseSimpleTest"", IPV6DefragReverseSimpleTest ) ; UtRegisterTest ( ""IPV6DefragInOrderSimpleTest"", IPV6DefragInOrderSimpleTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakBsdTest"", IPV6DefragSturgesNovakBsdTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakWindowsTest"", IPV6DefragSturgesNovakWindowsTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakFirstTest"", IPV6DefragSturgesNovakFirstTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakLastTest"", IPV6DefragSturgesNovak",0
1090,<S2SV_ModStart> ; if ( object_length > sizeof ( new_object. data ) - add_v1_record ) { sc_cardctl_coolkey_object_t new_object ; new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { sc_cardctl_coolkey_object_t new_object = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { sc_cardctl_coolkey_object_t new_object = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { sc_cardctl_coolkey_object_t new_object = malloc ( object_length + add_v1_record ) ; new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { sc_cardctl_coolkey_object_t new_object = malloc ( object_length + add_v1_record ) ; new_object,0
1091,"<S2SV_ModStart> 0 ) ; if ( ( int ) shdr -> sh_size > SIZE_MAX / sizeof ( Elf_ ( Verdef ) ) ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } <S2SV_ModStart> 0 ) ; if ( ( int ) shdr -> sh_size > SIZE_MAX / sizeof ( Elf_ ( Verdef ) ) ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( ( int ) shdr -> sh_size > SIZE_MAX / sizeof ( Elf_ ( Verdef ) ) ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; }",0
1092,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
1093,"<S2SV_ModStart> u8 label_len ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> ++ ptr_count > length ) return - 1 ; if ( name_end < 0 ) name_end = j ; j += label_len ; continue ; } if ( cp!= name_out ) { if ( cp + label_len > end ) return - 1 ; * cp ++ = '.' ; } if ( cp + label_len >= end ) return - 1 ; memcpy ( cp, packet + j, label_len ) ; cp += label_len ; j += label_len ; j += label_len ; } if ( cp!= name_out ) { if ( cp + 1 >= end ) return - 1 ; * cp ++ = '\\0' ; } if ( cp!= name_out ) { if ( cp + 1 >= end ) return",0
1094,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpAcc ( TIFF <S2SV_ModStart> cc ) ; if ( cc < 0 ) { TIFFErrorExt ( tif -> tif_dev, ""cc <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds"" ) ; return 0 ; } <S2SV_ModStart>! tmp ) { TIFFErrorExt ( tif -> tif_dev, ""cc <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds"" ) ; return 0 ; } tmp = ( uint8 * ) _TIFFmalloc ( cc ) ; assert ( ( cc % ( bps * stride ) ) == 0 ) ; if (! tmp ) { TIFFErrorExt ( tif -> tif_dev, ""cc <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds"" ) ; return 0 ; } tmp = ( uint8 * ) _TIFFmalloc ( cc ) ; assert ( ( cc % ( bps * stride ) ) == 0 ) ; if (! tmp ) { TIFFErrorExt ( tif -> tif_dev, ""cc <S2SV_blank> out <S2SV_blank> of <S2SV_blank> bounds"" ) ; return 0 ; } tmp = ( uint8 * ) _TIFFmalloc ( cc ) ; assert ( ( cc % ( bps * stride ) ) == 0 ) ;",0
1095,"<S2SV_ModStart> ) ) { <S2SV_ModEnd> return do_anonymous_page ( <S2SV_ModStart>, address, pte, pmd <S2SV_ModEnd>, flags, <S2SV_ModStart>, address, pte, pmd <S2SV_ModEnd>, flags )",0
1096,<S2SV_ModStart> ) { char * <S2SV_ModEnd> r = pool_alloc <S2SV_ModStart> + 1 ) ; if (! r ) { r = pool_malloc ( strlen ( s ) + 1 ) ; if (! r ) { r = pool_malloc ( strlen ( s ) + 1 ) ; },0
1097,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1098,"<S2SV_ModStart> ; next_line = strchr ( pos, '\\n' ) ; if (! next_line ) { ret = - EINVAL ; goto out ; } pos = skip_spaces ( pos ) ; extent -> upper_first = simple_strtoul ( pos, & pos, 10 ) ; if (! isspace ( * pos ) ) goto out ; extent -> count = simple_strtoul ( pos, & pos, 10 ) ; if (! isspace ( * pos ) ) goto out ; next_line = strchr ( pos, '\\n' ) ; if (! next_line ) { ret = - EINVAL ; goto out ; } pos = skip_spaces ( pos ) ; extent -> upper_first = simple_strtoul ( pos, & pos, 10 ) ; if (! isspace ( * pos ) ) goto out ; pos = skip_spaces ( pos ) ; extent -> lower_first = simple_strtoul ( pos, & pos, 10 ) ; if (! isspace ( * pos ) ) goto out ;",0
1099,"<S2SV_ModStart> -> length ]. attr_values [ i ] = r_uleb128 ( buf, buf_end - buf, & abbr_code ) ; if (! cu -> dies [ cu -> length ]. attr_values [ i ] ) { eprintf ( ""Warning: <S2SV_blank> malformed <S2SV_blank> dwarf <S2SV_blank> attribute <S2SV_blank> length <S2SV_blank> doesn\'t <S2SV_blank> match <S2SV_blank> length\\n"" ) ; break ; } <S2SV_ModStart> -> length ]. attr_values [ i ] = r_uleb128 ( buf, buf_end - buf, & abbr_code ) ; if (! cu -> dies [ cu -> length ]. attr_values [ i ] ) { eprintf ( ""Warning: <S2SV_blank> malformed <S2SV_blank> dwarf <S2SV_blank> attribute <S2SV_blank> values <S2SV_blank> length <S2SV_blank> doesn\'t <S2SV_blank> match <S2SV_blank> length\\n"" ) ; break ; } <S2SV_ModStart> -> length ]. attr_values [ i ] = r_uleb128 ( buf, buf_end - buf, & abbr_code ) ; if (! buf ) { eprintf ( ""Warning: <S2SV_blank> malformed <S2SV_blank> dwarf <S2SV_blank> attribute <S2SV_blank> length <S2SV_blank> doesn\'t <S2SV_blank> match <S2SV_blank> length\\n"" ) ; break ; }",0
1100,"<S2SV_ModStart> = '\\0' ; if ( vlc_fourcc_is_zero ( p_enc -> fmt_in. i_codec ) || vlc_fourcc_is_zero ( p_enc -> fmt_in. i_chroma ) || vlc_fourcc_is_zero ( p_enc -> fmt_in. i_codec ) || vlc_fourcc_is_zero ( p_enc -> fmt_in. i_codec ) ) { vlc_fourcc_to_char ( p_enc -> fmt_in. i_codec, chroma_out ) ; chroma_out [ 4 ] = '\\0' ; chroma_out [ 4 ] = '\\0' ; if ( vlc_fourcc_is_zero ( p_enc -> fmt_in. i_codec ) || vlc_fourcc_is_zero ( p_enc -> fmt_in. i_codec ) ) { vlc_fourcc_to_char ( p_enc -> fmt_in. i_codec, chroma_out ) ; chroma_out [ 4 ] = '\\0' ; chroma_",0
1101,"<S2SV_ModStart> name ) ; if (! mp_path_exists ( mf -> names [ mf -> nr_of_files - 1 ] ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ mf -> nr_of_files - 1 ] ) ; break ; } <S2SV_ModStart> name ) ; if (! mp_path_exists ( mf -> names [ mf -> nr_of_files - 1 ] ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ mf -> nr_of_files - 1 ] ) ; break ; } <S2SV_ModStart> name ) ; if (! mp_path_exists ( mf -> names [ mf -> nr_of_files - 1 ] ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ mf -> nr_of_files - 1 ] ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ mf -> nr_of_files - 1 ] ) ; }",0
1102,"<S2SV_ModStart> ) ) ; if ( flow & 0x08000000 ) ND_PRINT ( ( ndo, ""pri <S2SV_blank> 0x%02x, <S2SV_blank> "", flow & 0x08000000 ) ) ; if ( flow & 0x00ffffff ) ND_PRINT ( ( ndo, ""flowlabel <S2SV_blank> 0x%06x, <S2SV_blank> "", flow & 0x00ffffff ) ) ; if ( flow & 0x000fffff ) ND_PRINT ( ( ndo, ""flowlabel <S2SV_blank> 0x%06x, <S2SV_blank> "", flow & 0x000fffff ) ) ; if ( flow & 0x00ffffff ) ND_PRINT ( ( ndo, ""flowlabel <S2SV_blank> 0x%06x, <S2SV_blank> "", flow & 0x00ffffff ) ) ; if ( flow & 0x00ffffff ) ND_PRINT ( ( ndo, ""flowlabel <S2SV_blank> 0x%06x, <S2SV_blank> "", flow & 0x000fffff ) ) ; if ( flow & 0x00ffffff ) ND_PRINT ( ( ndo, ""flowlabel <S2SV_blank> 0x%06x, <S2SV_blank> "", flow & 0x00ffffff ) ) ; if ( flow & 0x00ffffff",0
1103,"<S2SV_ModStart> 4 ) ; if ( idx + 4 > len ) { return NULL ; } <S2SV_ModStart> len ) ; if ( idx + 4 + a -> num_names > len ) { size_t i ; a -> names = CHECKED_XCALLOC ( VarLenData, a -> num_names ) ; for ( i = 0 ; i < a -> num_names ; i ++ ) { size_t j ; CHECKINT32 ( idx, len ) ; a -> names [ i ]. len = GETINT32 ( buf + idx ) ; idx += 4 ; a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ; } } else { size_t i ; a -> names = CHECKED_XCALLOC ( VarLenData, a -> num_names ) ; for ( i = 0 ; i < a -> num_names ; i ++ ) { size_t j ; CHECKINT32 ( idx, len ) ; a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte (",0
1104,"<S2SV_ModStart> EIO ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> efe\\n"", inode -> i_ino ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> efe\\n"", inode -> i_ino ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> efe\\n"", inode -> i_ino ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> efe\\n"", inode -> i_ino ) ; goto out ; }",0
1105,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
1106,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
1107,"<S2SV_ModStart> ; strcat ( t1_buf_array <S2SV_ModEnd>, t1_line_array )",0
1108,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; if ( ctx -> frame_parallel_decode ) { VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; YV12_BUFFER_CONFIG * fb ; yuvconfig2image ( & frame_worker_data -> img, fb, NULL ) ; return VPX_CODEC_OK ; } else { return VPX_CODEC_INVALID_PARAM ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1109,"<S2SV_ModStart> ; ops -> get_msr ( ctxt, MSR_EFER, & efer ) ; ops -> get_msr ( ctxt, MSR_STAR, & msr_data ) ; msr_data >>= 32 ; cs_sel = ( u16 ) ( msr_data & 0xfffc ) ; ss_sel = ( u16 ) ( msr_data & 0xfffc ) ; if ( efer & EFER_LMA ) { ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, ss_sel, & ss, 0, VCPU_SREG_SS ) ; } ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, ss_sel, & ss, 0, VCPU_SREG_SS ) ; ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_",0
1110,"<S2SV_ModStart> + 1 ; if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> image <S2SV_blank> content <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> + 1 ; if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> image <S2SV_blank> content <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> + 1 ; if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> image <S2SV_blank> content <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> + 1 ; if ( i + 1 >= frag -> data_size ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> no <S2SV_blank> image <S2SV_blank> content <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
1111,"<S2SV_ModStart> ; if ( TYPE ( n ) == testlist ) expr1 = ast_for_testlist ( c, CHILD ( n, 0 ) ) ; else expr1 = ast_for_expr ( c, ch ) ; if (! expr1 ) return NULL ; ch = CHILD ( n, 2 ) ; if (! set_context ( c, expr1, Store, ch ) ) return NULL ; newoperator = ast_for_augassign ( c, CHILD ( n, 1 ) ) ; if (! newoperator ) return NULL ; newoperator = ast_for_augassign ( c, CHILD ( n, 1 ) ) ; if (! newoperator ) return NULL ; newoperator = ast_for_augassign ( c, ch ) ; if (! newoperator ) return NULL ; newoperator = ast_for_augassign ( c, ch ) ; if (! newoperator ) return NULL ; newoperator = ast_for_augassign ( c, CHILD ( n, 1 ) ) ; if (! newoperator ) return NULL ; newoperator = ast_for_augassign ( c, CHILD ( n, 1 ) ) ; if (! newoperator ) return NULL",0
1112,"<S2SV_ModStart> int vp8_denoiser_filter_c ( <S2SV_ModEnd> unsigned char * <S2SV_ModStart> unsigned char * mc_running_avg_y, <S2SV_ModEnd> int mc_avg_y_stride, <S2SV_ModStart> int r, c, i ; int sum_diff = 0 ; int adj_val [ 3 ] = { 3, 4, 6 } ; if ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) { for ( i = 0 ; i < 3 ; ++ i ) { adj_val [ i ] += diff ; } else { if ( absdiff >= 4 && absdiff <= 7 ) adjustment = adj_val [ 0 ] ; else if ( absdiff >= 8 && absdiff <= 15 ) adjustment = adj_val [ 1 ] ; else adjustment = adj_val [ 2 ] ; else if ( absdiff >= 8 && absdiff <= 15 ) adjustment = adj_val [ 0 ] ; else if ( absdiff >= 8 && absdiff <= 15 ) adjustment = adj_val [ 1 ] ; else if ( diff > 0 ) { if ( ( sig [ c ] + adjustment ) > 255 ) running_avg_y [ c ] = 255 ; else running_avg_y [ c ] = sig",0
1113,"<S2SV_ModStart> ) == 0u ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; break ; } <S2SV_ModStart> ) == 0u ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; break ; } <S2SV_ModStart> ) == 0u ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; break ; } <S2SV_ModStart> ) == 0u ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; break ; } <S2SV_ModStart> ) == 0u ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; break ; } <S2SV_ModStart> ) == 0u ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; break ; }",0
1114,"<S2SV_ModStart> = 0 ; if ( xtregs -> cp0 & XTREGS_CP0_BITMASK ) { ret |= __copy_from_user ( & ti -> xtregs_cp, & xtregs -> cp0, sizeof ( xtregs_coprocessor_t ) ) ; } else { ret |= __copy_from_user ( & ti -> xtregs_cp, & xtregs -> cp0, sizeof ( xtregs_coprocessor_t ) ) ; }",0
1115,<S2SV_ModStart> -> srcIpAddr ; message -> srcPort = queueItem -> srcPort ; message -> destIpAddr = queueItem -> destIpAddr ; message -> ttl = queueItem -> ancillary. ttl ; # if ( ETH_SUPPORT == ENABLED ) message -> srcMacAddr = queueItem -> ancillary. srcMacAddr ; message -> destMacAddr = queueItem -> ancillary. destMacAddr ; # endif # if ( ETH_PORT_TAGGING_SUPPORT == ENABLED ) message -> switchPort = queueItem -> ancillary. port ; # endif # if ( ETH_TIMESTAMP_SUPPORT == ENABLED ) message -> timestamp = queueItem -> ancillary. timestamp ; # endif,0
1116,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" <S2SV_ModStart> -> dst_dev ; if ( xop -> src_dev == NULL ) { pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" "" <S2SV_blank> dst_dev: <S2SV_blank> %p <S2SV_blank> src_dev: <S2SV_blank> %p\\n"", remote_dev, & remote_dev -> dev_group. cg_item ) ; target_undepend_item ( & remote_dev -> dev_group. cg_item ) ; target_undepend_item ( & remote_dev -> dev_group. cg_item ) ; } else { pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" ""src_dev: <S2SV_blank> %p <S2SV_blank> dst_dev: <S2SV_blank> %p\\n"", remote_dev, & remote_dev -> dev_group. cg_item ) ; target_undepend_item ( & remote_dev -> dev_group. cg_item ) ; target_undepend_item ( & remote_dev -> dev_group. cg_item ) ; }",0
1117,"<S2SV_ModStart> - 1 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_MULTICAST_HOPS."" ) ; err = - errno ; goto close_sock ; }",0
1118,"<S2SV_ModStart> int error ; struct mb2_cache * ext2_mb_cache = EXT2_SB ( sb ) -> s_mb_cache <S2SV_ModStart> new_bh ) ; mb2_cache_insert ( ext2_mb_cache, new_bh, EXT2_XATTR_CACHE_SIZE ( inode -> i_sb ) <S2SV_ModEnd> ) ; } <S2SV_ModStart> new_bh ) ; mb2_cache_insert ( ext2_mb_cache, new_bh, EXT2_XATTR_CACHE_SIZE ( inode -> i_sb ) <S2SV_ModEnd> ) ; } <S2SV_ModStart> ) ; ext2_mb_cache_insert ( ext2_mb_cache, new_bh, EXT2_XATTR_CACHE_SIZE ( inode -> i_sb ) ) ; mb2_cache_insert ( ext2_mb_cache, new_bh ) ; mb2_cache_insert ( ext2_mb_cache, new_bh, EXT2_XATTR_CACHE_SIZE ( inode -> i_sb ) ) ; mb2_cache_insert ( ext2_mb_cache, new_bh, EXT2_XATTR_CACHE_SIZE ( inode -> i_",0
1119,"<S2SV_ModStart> crypto_report_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp. <S2SV_ModStart>. type, ""compression"", sizeof ( rcomp. type ) <S2SV_ModEnd> ) ; if",1
1120,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> { if ( ctx -> frame_parallel_decode ) { VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) frame_worker_data -> frame_worker_data ; FrameWorkerData * const frame_worker_data = frame_worker_data -> frame_worker_data ; FrameWorkerData * const frame_worker_data = frame_worker_data -> frame_worker_data ; FrameWorkerData * const frame_worker_data = frame_worker_data -> frame_worker_data ; FrameWorkerData * const frame_worker_data = frame_worker_data -> frame_worker_data -> frame_worker_data ; FrameWorkerData * const frame_worker_data = frame_worker_data -> frame_worker_data ; FrameWorkerData * const frame_worker_data = frame_worker_data -> frame_worker_data ; Frame",0
1121,"<S2SV_ModStart> { rc = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> 0 ) return rc <S2SV_ModEnd> ; inode ->",0
1122,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> rows, image -> columns ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ;",0
1123,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
1124,<S2SV_ModStart> size_t maxlen = 3 <S2SV_ModEnd> * len ;,0
1125,"<S2SV_ModStart> SUCCESS ) { if ( is_zero_or_negative ( * var ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> value <S2SV_blank> in <S2SV_blank> polygon"" ) ; RETURN_FALSE ; } <S2SV_ModStart> var ) ; if ( is_zero_or_negative ( * var ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> value <S2SV_blank> in <S2SV_blank> polygon"" ) ; RETURN_FALSE ; } <S2SV_ModStart> var ) ; if ( is_zero_or_negative ( * var ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> value <S2SV_blank> in <S2SV_blank> polygon"" ) ; RETURN_FALSE ; } <S2SV_ModStart> var ) ; if ( is_zero_or_negative ( * var ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> value <S2SV_blank> in <S2SV_blank> polygon"" ) ; RETURN_FALSE ; } <S2SV_ModStart> var ) ; if ( is_zero_or_negative ( * var ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING,",0
1126,<S2SV_ModStart> ; sig_none = <S2SV_ModEnd> timr -> it_sigev_notify <S2SV_ModStart> timr -> it_sigev_notify <S2SV_ModEnd> == SIGEV_NONE ;,1
1127,<S2SV_ModStart> ; AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ),0
1128,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; YV12_BUFFER_CONFIG <S2SV_ModEnd> sd ; vpx_ref_frame_t <S2SV_ModStart> * ) ; if ( ctx -> frame_parallel_decode ) { VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data2 ; YV12_BUFFER_CONFIG <S2SV_ModEnd> sd ; return <S2SV_ModStart> vp9_copy_reference_dec ( ctx <S2SV_ModEnd>, ( VP9_REFFRAME",0
1129,"<S2SV_ModStart>. path ; memset ( pop3c -> mailbox, 0, sizeof ( pop3c -> mailbox ) ) ; <S2SV_ModStart> (! pop3c -> mailbox ) { kfree ( pop3c -> mailbox ) ; return CURLE_OUT_OF_MEMORY ; }",0
1130,"<S2SV_ModStart> 1 ) ; if ( facilities_len < 0 ) { printk ( KERN_ERR ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> invalid <S2SV_blank> facilities <S2SV_blank> length\\n"" ) ; return 0 ; } <S2SV_ModStart> 1 ) ; if ( facilities_len < 0 ) { printk ( KERN_ERR ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> invalid <S2SV_blank> facilities <S2SV_blank> length\\n"" ) ; return 0 ; } <S2SV_ModStart> 1 ) ; if ( facilities_len < 0 ) { printk ( KERN_ERR ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> invalid <S2SV_blank> facilities <S2SV_blank> length\\n"" ) ; return 0 ; } <S2SV_ModStart> 1 ) ; if ( facilities_len < 0 ) { printk ( KERN_ERR ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> invalid <S2SV_blank> facilities <S2SV_blank> length\\n"" ) ; return 0 ; }",0
1131,"<S2SV_ModStart> ; sh -> pps_id = get_ue_golomb_long ( gb ) ; if ( sh -> pps_id >= HEVC_MAX_PPS_COUNT ||! s -> ps. pps_list [ sh -> pps_id ] -> data ) { av_log ( s -> avctx, AV_LOG_ERROR, ""PPS <S2SV_blank> id <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range.\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( s -> ps. sps!= ( HEVCSPS * ) s -> ps. sps_list [ sh -> pps_id ] -> data ) { av_log ( s -> avctx, AV_LOG_ERROR, ""PPS <S2SV_blank> changed <S2SV_blank> between <S2SV_blank> slices.\\n"" ) ; return AVERROR_INVALIDDATA ; } s -> ps. pps = ( HEVCPPS * ) s -> ps. pps_list [ sh -> pps_id ] -> data ; if ( s -> ps. sps!= ( HEVCSPS * ) s -> ps. sps_list [ sh -> pps_id ] -> data ) { av_log ( s -> av",0
1132,<S2SV_ModStart> ; ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> ps_cur_slice -> u1_num_mbs_coded += u1_num_mbs ; ps_dec -> ps_cur_slice -> u1_num_mbs_coded += u1_num_mbs ; ps_dec -> ps_cur_slice -> u1_num_mbs_coded += u1_num_mbs ; ps_dec -> ps_cur_slice -> u1_num_mbs_coded += u1_num_mbs ; ps_dec -> ps_cur_slice -> u1_num_mbs_coded += u1_num_mbs ; ps_dec -> ps_cur_slice -> u1_num_mbs_coded += u1_num_mbs ; ps_dec -> ps_cur_slice -> u1_num_mbs_coded += u1_num_mbs ; ps_dec -> ps_cur_slice -> u1_num_mbs_coded += u1_num_mbs ; ps_dec -> ps_,0
1133,"<S2SV_ModStart>, u4_y_offset ; ps_dec -> u2_x_offset = 0 ; ps_dec -> u2_y_offset = 0 ; ps_dec -> u2_x_dst_offset = 0 ; ps_dec -> u2_y_dst_offset <S2SV_ModEnd> = 0 ; <S2SV_ModStart> == B_PIC ) { ps_dec -> u2_x_dst_offset = u4_x_offset ; ps_dec -> u2_y_dst_offset = u4_y_offset ; } else { ps_dec -> u2_x_dst_offset = u4_x_offset ; ps_dec -> u2_y_dst_offset = u4_y_offset ; } if ( ps_dec -> e_pic_type == B_PIC ) { ps_dec -> u2_x_dst_offset = u4_x_offset ; ps_dec -> u2_y_dst_offset = u4_y_offset ; } else { ps_dec -> u2_x_dst_offset = u4_x_offset ; ps_dec -> u2_y_dst_offset = u4_y",0
1134,"<S2SV_ModStart> VP9_LAST_FLAG ) { <S2SV_ModEnd> const YV12_BUFFER_CONFIG * <S2SV_ModStart> const YV12_BUFFER_CONFIG * const frame_bufs = cm -> frame_bufs <S2SV_ModEnd> ; if ( <S2SV_ModStart> ] ]. buf ; if ( equal_dimensions ( frame_bufs, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( frame_bufs, sd ) ; } else { if ( equal_dimensions ( frame_bufs, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( frame_bufs, sd ) ; } } else if ( equal_dimensions ( frame_bufs, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank>",0
1135,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
1136,<S2SV_ModStart> -> mbmi ; const int num_4x4_w = num_4x4_blocks_wide_lookup [ plane_bsize ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ plane_bsize ] ; const int step = 1 << ( tx_size << 1 ) ; const int max_blocks_wide = num_4x4_w ; const int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_wide += ( xd -> mb_to_bottom_edge >> ( 5 + pd -> subsampling_y ) ) ; if ( xd -> mb_to_right_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_,0
1137,<S2SV_ModStart> mmap_legacy_base = mmap_legacy_base <S2SV_ModEnd> ( random_factor ),0
1138,"<S2SV_ModStart> ++ ) { if ( r == 3 ) { memcpy ( dst, src, src_stride ) ; dst [ 3 ] = src [ 3 ] ; dst [ 4 ] = src [ 4 ] ; dst [ 5 ] = src [ 5 ] ; dst [ 6 ] = src [ 6 ] ; dst [ 7 ] = src [ 7 ] ; } # else ( ( uint32_t * ) dst ) [ 0 ] = ( ( uint32_t * ) src ) [ 0 ] ; ( ( uint32_t * ) dst ) [ 1 ] = ( ( uint32_t * ) src ) [ 1 ] ; ( ( uint32_t * ) dst ) [ 2 ] = ( ( uint32_t * ) src ) [ 2 ] ; ( ( uint32_t * ) dst ) [ 3 ] = ( ( uint32_t * ) src ) [ 3 ] ; ( ( uint32_t * ) dst ) [ 2 ] = ( ( uint32_t * ) src ) [ 2 ] ; ( ( uint32_t * ) dst ) [",0
1139,"<S2SV_ModStart> return getnum ( L <S2SV_ModEnd>, fmt, <S2SV_ModStart> ) ) ; if ( sz < 0 ) { luaL_error ( L, ""integral <S2SV_blank> size <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d"", sz, MAXINTSIZE ) ; return 0 ; } <S2SV_ModStart> 'I' : { size_t <S2SV_ModEnd> sz = getnum <S2SV_ModStart> ) ) ; if ( sz < 0 ) { luaL_error ( L, ""integral <S2SV_blank> size <S2SV_blank> is <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d"", sz ) ; if ( sz < 0 ) { luaL_error ( L, ""integral <S2SV_blank> size <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d"", sz, MAXINTSIZE ) ; return 0 ; }",0
1140,<S2SV_ModStart> + img -> row_offset <S2SV_ModEnd> ) % rowsperstrip <S2SV_ModStart> + img -> row_offset <S2SV_ModEnd> ) % rowsperstrip <S2SV_ModStart> + img -> row_offset <S2SV_ModEnd> ; if ( <S2SV_ModStart> + img -> row_offset <S2SV_ModEnd> ) % rowsperstrip <S2SV_ModStart> + img -> row_offset <S2SV_ModEnd> ) % rowsperstrip <S2SV_ModStart> + img -> row_offset <S2SV_ModEnd> ; if ( <S2SV_ModStart> + img -> row_offset <S2SV_ModEnd> ) % rowsperstrip <S2SV_ModStart> + img -> row_offset <S2SV_ModEnd> ; if ( <S2SV_ModStart> + img -> row_offset <S2SV_ModEnd> ) % rowsperstrip <S2SV_ModStart> + img -> row_offset <S2SV_ModEnd> ) % rowsperstrip <S2SV_ModStart> + img -> row_offset <S2SV_ModEnd> ; if (,0
1141,<S2SV_ModStart> } } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1142,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header,0
1143,"<S2SV_ModStart> - EINVAL ; if ( upid < 0 ) { type = PIDTYPE_MAX ; pid = get_task_pid ( current, PIDTYPE_PID ) ; } else if ( upid == 0 ) { type = PIDTYPE_PID ; pid = get_task_pid ( current, PIDTYPE_PGID ) ; } else if ( upid == 0 ) { type = PIDTYPE_PID ; pid = get_task_pid ( current, PIDTYPE_PID ) ; } else { type = PIDTYPE_MAX ; }",0
1144,"<S2SV_ModStart> siocb -> scm, false",1
1145,<S2SV_ModStart> ( num & ( 1U << ( number - 1 ) <S2SV_ModEnd> ) ) return,0
1146,"<S2SV_ModStart> ; const int rows = vpx_img_plane_rows ( img, plane ) ; const int cols = vpx_img_plane_cols ( img, plane ) ; const int rows = vpx_img_plane_rows ( img, plane ) ; const int rows = vpx_img_plane_rows ( img, plane ) ; const int rows = vpx_img_plane_rows ( img, plane ) ; const int rows = vpx_img_plane_rows ( img, plane ) ; const int rows = vpx_img_plane_rows ( img, plane ) ; const int cols = img -> plane_cols ( img, plane ) ; const int rows = img -> plane_rows ( img, plane ) ; const int rows = img -> plane_cols ( img, plane ) ; const int cols = img -> plane_cols ( img, plane ) ; const int rows = img -> plane_rows ( img, plane ) ; const int rows = img -> plane_rows ( img, plane ) ; const int rows = img -> plane_rows ( img, plane ) ; const int cols = img -> plane_cols ( img, plane ) ; const int rows = img ->",0
1147,"<S2SV_ModStart> ; uint16_t attr_len <S2SV_ModEnd> ; uint16_t orig_attr_len <S2SV_ModStart> ; if ( avp -> length < sizeof ( struct l2tp_avp_t ) + 2 ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %u):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %u):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } attr_len = avp -> length - sizeof ( struct l2tp_avp_t ) ; MD5_Init ( & md5_ctx ) ; MD5_Update ( & md5_ctx, & avp -> type, sizeof ( avp ->",0
1148,"<S2SV_ModStart> -> private ; mutex_lock ( & lc -> mutex ) ; <S2SV_ModStart>, cmd, arg ) ; mutex_unlock ( & lc -> mutex ) ;",0
1149,<S2SV_ModStart> = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 4 ) ; actx -> tag [ 0 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 4 ) ; actx -> tag [ 1 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 2 ) ; actx -> tag [ 2 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 3 ) ; actx -> tag [ 3 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 5 ) ; actx -> tag [ 1 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 6 ) ; actx -> tag [ 2 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 3 ) ; actx -> tag [ 3 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 5 ) ; actx -> tag [ 4 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 6 ) ;,0
1150,"<S2SV_ModStart> alg ) { if (! try_module_get <S2SV_ModEnd> ( ""%s"", <S2SV_ModStart> ) ) { if (! try_module_get <S2SV_ModEnd> ( ""%s-all"", <S2SV_ModStart> ) ) { if (! try_module_get <S2SV_ModEnd> ( ""%s-all"", <S2SV_ModStart> ) ) { if (! try_module_get <S2SV_ModEnd> ( ""%s-all"", <S2SV_ModStart> ) ) { if (! try_module_get <S2SV_ModEnd> ( ""%s-all"", <S2SV_ModStart> ) ) { if (! try_module_get <S2SV_ModEnd> ( ""%s-all"", <S2SV_ModStart> ) ) { if (! try_module_get <S2SV_ModEnd> ( ""%s-all"", <S2SV_ModStart> ) ) { if (! try_module_get <S2SV_ModEnd> ( ""%s-all"", <S2SV_ModStart> ) ) { if (! try_module_get <S2SV_ModEnd> ( ""%s-all"",",0
1151,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",0
1152,<S2SV_ModStart> fp ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> fp ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> fp ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> fp ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> fp ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> fp ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> fp ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> fp ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> fp ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> fp ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> fp ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> fp ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> fp ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> fp ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> fp ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> fp ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> fp ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> fp ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> fp ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> fp ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> fp ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> fp ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> fp ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> fp ) ; TEMP_FAILURE_RETRY (,0
1153,"<S2SV_ModStart> ; BT_DBG ( ""sock <S2SV_blank> %p, <S2SV_blank> peer <S2SV_blank> %d"" <S2SV_ModEnd>, sock,",0
1154,"<S2SV_ModStart> ) { memcpy ( pass_salt, cpkt. data, cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PASSSALT ) { memcpy ( pass_salt, cpkt. data, cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PLAINDATA ) { fwrite ( ( const void * ) cpkt. data, 1, cpkt. length, stdout ) ; } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 0 ; setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch ) ; }",0
1155,<S2SV_ModStart> NTLMSSP_NEGOTIATE_UNICODE | NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC ; if ( ses -> ntlmssp -> sign ) { flags |= NTLMSSP_NEGOTIATE_SIGN ; } <S2SV_ModStart> |= NTLMSSP_NEGOTIATE_KEY_XCH ; <S2SV_ModEnd> tmp = * <S2SV_ModStart> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
1156,"<S2SV_ModStart> MUTT_ABORT ) { mutt_socket_close ( adata -> conn ) ; <S2SV_ModStart> ) ) ; mutt_socket_close ( adata -> conn <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ) ) ; mutt_socket_close ( adata -> conn <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ) ) ; mutt_socket_close ( adata -> conn <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ) ) ; mutt_socket_close ( adata -> conn <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ) ) ; mutt_socket_close ( adata -> conn <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ) ) ; mutt_socket_close ( adata -> conn <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ) ) ; mutt_socket_close ( adata -> conn <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ) ) ; mutt_socket_close ( adata -> conn <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ) ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( rc!= IMAP_EXEC_ERROR ) { if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could <S2SV_blank> not <S2SV_blank> negotiate <S2SV_blank> TLS <S2SV_blank> connection"" ) ) ; goto err_close_conn ; }",0
1157,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
1158,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> ) == 0 ) ; if ( cc < 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horDiff8"", ""%s"", ""%s"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> stride ) == 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""%s"", ""%s"", ""horDiff8"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%",0
1159,<S2SV_ModStart> -> head <= 0 || g -> track > UDP -> tracks >> STRETCH ( g ) || ( g -> stretch & ~ ( FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK ) ) == 0 || ( g -> stretch & ~ ( FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK ) ) == 0 || ( g -> stretch & ~ ( FD_STRETCH | FD_SECTBASEMASK ) ) == 0 || ( g -> stretch & ~ ( FD_STRETCH | FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK ) ) == 0 || ( g -> stretch & ~ ( FD_STRETCH | FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK ) ) == 0 || ( g -> stretch & ~ ( FD_STRETCH | FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK ) ) == 0 || ( g -> stretch & ~ ( FD_STRETCH | FD,0
1160,"<S2SV_ModStart> 0 ) { memset ( temp, 0, sizeof ( temp ) - 1 ) ; memset ( temp, 0, sizeof ( temp ) - 1 ) ; memcpy ( temp, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) ; memcpy ( temp, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) ; memcpy ( temp, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) ; memset ( temp, 0, sizeof ( temp ) - 1 ) ; memset ( temp, 0, sizeof ( temp ) - 1 ) ; memcpy ( temp, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) ; memcpy ( temp, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) ; memcpy ( temp, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) ; memcpy ( temp, ""?WATCH={\\""json\\"":true};\\n"" ) ; memcpy ( temp, ""?WATCH={\\""json\\",0
1161,"<S2SV_ModStart>, & rlen, 0",1
1162,"<S2SV_ModStart> ; read_userfile ( & slavename <S2SV_ModStart> 0 ] = 0 ; memcpy ( md5data + 1, user -> password, 82 ) ; memcpy ( md5data + 1 + strlen ( user -> password ), curconn -> pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( user -> password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5data, strlen ( user -> password ) + 17 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( user -> password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; curconn -> outcounter += add_control_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr, pkthdr -> seskey, curconn -> outcounter ) ; send_udp ( curconn",0
1163,"<S2SV_ModStart> 1 ; } r = <S2SV_ModEnd> mount_entry_on_generic ( mntent <S2SV_ModStart> path ) ; if ( r < 0 || r >= MAXPATHLEN ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return - 1 ; } r = snprintf ( path, MAXPATHLEN, ""%s/%s"", rootfs -> mount, aux + offset ) ; if ( r < 0 || r >= MAXPATHLEN ) { WARN ( ""ignoring <S2SV_blank> mount <S2SV_blank> point <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return ret ; } r = snprintf ( path, MAXPATHLEN, ""%s/%s"", rootfs -> mount, aux + offset ) ; if ( r < 0 || r >= MAXPATHLEN ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return - 1 ; } ret = mount_entry_on_generic ( mntent, path ) ; if ( ret < 0 ) { WARN ( ""ignoring <S2SV_blank> mount <S2SV_blank> point <S2SV_blank> \'%s\'"", m",0
1164,"<S2SV_ModStart> ; if ( PyUnicode_CompareWithASCIIString <S2SV_ModEnd> ( name, <S2SV_ModStart> * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } } return 0 ; } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1",0
1165,"<S2SV_ModStart> ; out_unmap : bio_for_each_segment_all ( bio, bio, j + 1, len ) { bio_for_each_segment_all ( bio, j + 1, len ) { bio_for_each_segment_all ( bio, j + 1, len ) { bio_for_each_segment_all ( bio, j + 1, len ) { bio_for_each_segment_all ( bio, j + 1, len ) { bio_for_each_segment_all ( bio, j + 1, len ) { bio_for_each_segment_all ( bio, j ) { bio_for_each_segment_all ( bio, j + 1, len ) { bio_for_each_segment_all ( bio, j + 1, len ) { bio_for_each_segment_all ( bio, j + 1, len ) { bio_for_each_segment_all ( bio, j + 1, len ) { bio_for_each_segment_all ( bio, j ) { bio_for_each_segment_all ( bio, j ) { bio_for_each_segment_all (",0
1166,<S2SV_ModStart> -> depth ; if ( numcolors > RAS_CMAP_MAXSIZ ) { return - 1 ; },0
1167,"<S2SV_ModStart> -> pp ; size_t <S2SV_ModEnd> len ; char <S2SV_ModStart> ""localhost"" ; } if ( len > HOSTNAME_MAX ) { result = CURLE_OUT_OF_MEMORY ; state ( conn, SMTP_SERVERGREET ) ; if ( result ) return result ; data -> state. domain = curl_easy_unescape ( conn -> data, path, 0, & len ) ; if ( result ) return result ; } <S2SV_ModStart> ""localhost"" ; } if ( len > HOSTNAME_MAX ) { result = Curl_easy_unescape ( conn -> data, path, 0, & len ) ; if ( result ) { result = CURLE_OUT_OF_MEMORY ; state ( conn, SMTP_SERVERGREET ) ; if ( result ) return result ; data -> state. domain = curl_easy_unescape ( conn -> data, path, 0, & len ) ; if ( result ) return result ; } smtpc -> domain = curl_easy_unescape ( conn -> data, path, 0, & len ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; state ( conn, SMTP_SERVERGREET )",0
1168,<S2SV_ModStart> str [ i ] && j < sizeof ( buf ),0
1169,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
1170,"<S2SV_ModStart> + RDS_CONG_MAP_BYTES ; memset ( & rm -> m_inc. i_hdr, 0, sizeof ( struct rds_header ) ) ;",0
1171,<S2SV_ModStart> 0 ) ; if (! r ) return - EINVAL ;,1
1172,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1173,"<S2SV_ModStart> = 0 ; if ( * prclyrno >= JAS_CAST ( int, pchg -> pirlvl -> numprclyrnos ) ) { JAS_LOG ( 0x534e4554, ( ""JAS_ERROR"", ( ""JAS_ERROR"", ( ""JAS_ERROR"", ( ""JAS_ERROR"", ( ""JAS_ERROR"", ( ""JAS_ERROR"", ( ""JAS_ERROR"", ( ""JAS_ERROR"", ( ""JAS_ERROR"", ( ""JAS_ERROR"", ( ""JAS_ERROR"", ( ""JAS_ERROR"", ""JAS_ERROR"", ( ""JAS_ERROR"", ( ""JAS_ERROR"", ( ""JAS_ERROR"", ( ""JAS_ERROR"", ( ""JAS_ERROR"", ( ""JAS_ERROR"", ( ""JAS_ERROR"", ( ""JAS_ERROR"", ( ""JAS_ERROR"", ""JAS_ERROR"", ""JAS_ERROR"", ""JAS_ERROR"", ""JAS_ERROR"",",0
1174,"<S2SV_ModStart>! exponly ) { if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> exports\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_SET ( mode ) ) { r_flag_space_set ( r -> flags, R_FLAGS_FS_SYMBOLS ) ; } else if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> exports\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else { r_cons_printf ( ""fs",0
1175,"<S2SV_ModStart> goto out ; if (! xdr_check_rem ( xdr, NFS4_ACL_MAXLEN ) ) goto out ; <S2SV_ModStart> goto out ; if (! xdr_check_rem ( xdr, NFS4_ACL_MAXLEN ) ) goto out ;",0
1176,"<S2SV_ModStart> sizeof iv ) ; if ( strlen ( key ) > EVP_MAX_KEY_LENGTH ) { ossl_raise ( eCipherError, ""key <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", KEY_LEN ) ; ossl_raise ( eCipherError, ""key <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", KEY_LEN ) ; ossl_raise ( eCipherError, ""key <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", KEY_LEN ) ; ossl_raise ( eCipherError, ""key <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", KEY_LEN ( KEY_LEN ) ) ; ossl_raise ( eCipherError, ""key <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", KEY_LEN ) ; ossl_raise ( eCipherError, ""key <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", KEY_LEN ) ; ossl_raise ( eCipherError, ""key <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", KEY_LEN (",0
1177,"<S2SV_ModStart> KDC_OPT_ENC_TKT_IN_SKEY ) ) { return KRB5KDC_ERR_BADOPTION ; } if (! krb5_principal_compare ( kdc_context, t2enc -> princ, server_princ ) ) { return KRB5KDC_ERR_SERVER_NOMATCH ; } if (! isflagset ( t2enc -> flags, TKT_FLG_FORWARDABLE ) ) { * status = ""EVIDENCE_TKT_NOT_FORWARDABLE"" ; return KRB5_TKT_NOT_FORWARDABLE ; } if (! isflagset ( t2enc -> flags, TKT_FLG_FORWARDABLE ) ) { * status = ""EVIDENCE_TKT_NOT_FORWARDABLE"" ; return KRB5_TKT_NOT_FORWARDABLE ; } errcode = check_allowed_to_delegate_to ( kdc_context, t2enc -> client, server, proxy_princ ) ; if ( errcode ) { * status = ""NOT_ALLOWED_TO_DELEGATE"" ; return",0
1178,<S2SV_ModStart> & CLONE_SETTLS ) { <S2SV_ModEnd> thread -> tp_value <S2SV_ModStart> ARM_r3 ; },0
1179,"<S2SV_ModStart> bufsize ) { JAS_DBGLOG ( 100, ( ""jas_stream_memopen(%p, <S2SV_blank> %d)\\n"", buf, bufsize ) ) ; jas_stream_t * stream ; jas_stream_memobj_t * obj ; JAS_DBGLOG ( 100, ( ""jas_stream_memopen(%p, <S2SV_blank> %d)\\n"", buf, bufsize ) ) ; stream = jas_stream_create ( ) ; if (! ( stream = jas_stream_create ( ) ) ) { return 0 ; } stream -> openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY ; jas_stream_initbuf ( stream, JAS_STREAM_FULLBUF, 0, 0 ) ; stream -> ops_ = & jas_stream_memops ; if (! ( obj = jas_malloc ( sizeof ( jas_stream_memobj_t ) ) ) ) { jas_stream_destroy ( stream ) ; return 0 ; } obj -> buf_ = jas_malloc ( obj -> bufsize_ )",0
1180,"<S2SV_ModStart> -> pw ; <S2SV_ModEnd> struct sshkey * <S2SV_ModStart> * key = NULL <S2SV_ModEnd> ; char * <S2SV_ModStart> NULL ; u_char <S2SV_ModEnd> * pkblob, <S2SV_ModStart>, * sig <S2SV_ModEnd>, have_sig ; <S2SV_ModStart> ; if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"",",0
1181,"<S2SV_ModStart> ; uint32_t bcount ; if (! DoGetFileSize ( infile ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
1182,"<S2SV_ModStart> mech ) ; ret = gsasl_server_start ( ctx -> gsasl_ctx, mech, & sd ) ; if ( ret!= GSASL_OK ) { _sx_debug ( ZONE, ""gsasl_server_start <S2SV_blank> failed, <S2SV_blank> no <S2SV_blank> sasl <S2SV_blank> for <S2SV_blank> this <S2SV_blank> conn; <S2SV_blank> (%d): <S2SV_blank> %s"", ret, gsasl_strerror ( ret ) ) ; _sx_nad_write ( s, _sasl_failure ( s, _sasl_err_TEMPORARY_FAILURE, gsasl_strerror ( ret ) ) ; return ; } ret = gsasl_server_start ( ctx -> gsasl_ctx, mech, & sd ) ; if ( ret!= GSASL_OK ) { _sx_debug ( ZONE, ""gsasl_server_start <S2SV_blank> failed, <S2SV_blank> no <S2SV_blank> sasl <S2SV_blank> for <S2SV_blank> this <S2SV_blank> conn; <S2SV_blank> (%d): <S2SV_blank> %s"", ret, gsasl_strerror ( ret ) ) ; _sx_nad_write ( s, _sasl_failure ( s, _sasl_err_TEMP",0
1183,<S2SV_ModStart> tn_buf ) ; return - EACCES ;,1
1184,"<S2SV_ModStart> size_t s ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } s = exif_get_long ( buf + o, EXIF_BYTE_ORDER_INTEL ) ; if ( CHECKOVERFLOW ( s, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } if ( CHECKOVERFLOW ( s, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji""",0
1185,<S2SV_ModStart> le16_to_cpu ( es -> s_first_data_block <S2SV_ModEnd> ) ) { <S2SV_ModStart> le16_to_cpu ( es -> s_first_data_block <S2SV_ModEnd> ) ) { <S2SV_ModStart> le16_to_cpu ( es -> s_first_data_block <S2SV_ModEnd> ) ) ; <S2SV_ModStart> le16_to_cpu ( es -> s_first_data_block <S2SV_ModEnd> ) ) ; <S2SV_ModStart> le16_to_cpu ( es -> s_first_data_block <S2SV_ModEnd> ) ) { <S2SV_ModStart> le16_to_cpu ( es -> s_first_data_block <S2SV_ModEnd> ) ) { <S2SV_ModStart> le16_to_cpu ( es -> s_first_data_block <S2SV_ModEnd> ) ) { <S2SV_ModStart> le16_to_cpu ( es -> s_first_data_block <S2SV_ModEnd> ) ) ; <S2SV_ModStart> le16_to_cpu ( es -> s_first_data_block <S2SV_ModEnd> ) ) ;,0
1186,<S2SV_ModStart> bd_addr ) { int status ; if ( interface_ready ( ) == FALSE ) return BT_STATUS_NOT_READY ; status = btif_dm_remove_bond ( bd_addr ) ; if ( status == BT_STATUS_NOT_READY ) return BT_STATUS_NOT_READY ;,0
1187,"<S2SV_ModStart> ; if ( tcp_hdrlen + TCPOLEN_MSS > len ) return - 1 ; if ( info -> mss == XT_TCPMSS_CLAMP_PMTU ) { struct net * net = par -> net ; unsigned int in_mtu = tcp_reverse_mtu ( net, skb, family ) ; unsigned int min_mtu = min ( dst_mtu ( skb_dst ( skb ) ), in_mtu ) ; if ( min_mtu <= minlen ) { net_err_ratelimited ( ""unknown <S2SV_blank> or <S2SV_blank> invalid <S2SV_blank> path-MTU <S2SV_blank> (%u)\\n"", min_mtu ) ; return - 1 ; } } else { struct net * net = par -> net ; unsigned int in_mtu = tcp_reverse_mtu ( net, skb, family ) ; unsigned int min_mtu = min ( dst_mtu ( skb_dst ( skb ) ), in_mtu ) ; if ( min_mtu <= minlen ) { net_err_ratelimited ( ""unknown <S2SV_blank> or <S2SV_blank> invalid <S2SV_blank> path-MTU <S2SV_blank> (%u)\\",0
1188,"<S2SV_ModStart> int i ; jas_matind_t numrows ; jas_matind_t numcols ; <S2SV_ModStart> 0 ) { jas_matrix_destroy ( matrix ) ; return 0 ; } numrows = max ( numrows, numcols ) ; numcols = max ( numcols, numrows ) ; <S2SV_ModStart> ) ) { jas_matrix_destroy ( matrix ) ; return 0 ; } matrix -> flags_ = 0 ; matrix -> numrows_ = numrows ; matrix -> numcols_ = numcols ; matrix -> rows_ = 0 ; matrix -> maxrows_ = numrows ; matrix -> data_ = 0 ; matrix -> datasize_ = numcols * numcols ; if ( matrix -> maxrows_ > 0 ) { if (! ( matrix -> rows_ = jas_alloc2 ( matrix -> maxrows_, sizeof ( jas_seqent_t * ) ) ) ) { jas_matrix_destroy ( matrix ) ; return 0 ; } } if ( matrix -> data_ = jas_alloc2 ( matrix -> data_, sizeof ( jas_seqent_t ) ) ) ) { jas_matrix_destroy ( matrix ) ; return 0 ; } for (",0
1189,"<S2SV_ModStart> ) ) { struct ipv6_txoptions * opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( net -> ipv6. tx_opt ) ) ; opt = rcu_dereference_protected ( net -> ipv6. tx_opt, sock_owned_by_user ( net -> ipv6. tx_opt ) ) ; memcpy ( & opt -> opt, tmp_hdr, sizeof ( tmp_hdr ) ) ; if ( opt ) { struct ipv6_txoptions * opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( net -> ipv6. tx_opt ) ) ; opt = rcu_dereference_protected ( net -> ipv6. tx_opt, sock_owned_by_user ( net -> ipv6. tx_opt ) ) ; opt -> opt_len = opt -> opt_len ; opt -> opt_flen = opt -> opt_flen ; opt -> opt_flen = opt -> opt_flen ; opt -> opt_flen = opt -> opt_flen ; opt -> opt_flen",0
1190,"<S2SV_ModStart> * req ; if (! qemu_blockalign_check ( s -> bs, SCSI_DMA_BUF_SIZE ) ) { pr_err ( ""%s: <S2SV_blank> Bad <S2SV_blank> lun <S2SV_blank> number <S2SV_blank> %d\\n"", __func__, tag ) ; return NULL ; } <S2SV_ModStart>, req ) ; if (! qemu_blockalign_check ( s -> bs, SCSI_DMA_BUF_SIZE ) ) { pr_err ( ""%s: <S2SV_blank> Bad <S2SV_blank> lun <S2SV_blank> number <S2SV_blank> %d\\n"", __func__, tag ) ; return NULL ; } <S2SV_ModStart> r, req ) ; if (! qemu_blockalign_check ( s -> bs, SCSI_DMA_BUF_SIZE ) ) { pr_err ( ""%s: <S2SV_blank> Bad <S2SV_blank> lun <S2SV_blank> number <S2SV_blank> %d\\n"", __func__, tag ) ; return NULL ; }",0
1191,"<S2SV_ModStart> int i ; int <S2SV_ModEnd> avail ; int <S2SV_ModStart> 4 ) ; if ( nxip < 0 || nxip > buf -> len - buf -> cursor ) { elog ( ERROR, ""invalid <S2SV_blank> snapshot <S2SV_blank> data"" ) ; return ( Datum ) NULL ; } avail = buf -> len - buf -> cursor ; expect = 8 + 8 + nxip * 8 ; if ( expect < 0 || expect > avail ) { elog ( ERROR, ""invalid <S2SV_blank> snapshot <S2SV_blank> data"" ) ; return ( Datum ) NULL ; } xmin = pq_getmsgint64 ( buf ) ; xmax = pq_getmsgint64 ( buf ) ; if ( xmin == 0 || xmin > xmax || xmax > MAX_TXID ) goto bad_format ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; snap -> xmin = xmin ; snap -> xmax = xmax ; SET_VARSIZE ( snap, TXID_SNAPSHOT_SIZE ( nxip ) ) ; snap -> xmin = xmin ; snap -> xmax = xmax ; SET_VARSIZE ( snap, TXID_SNAPSHOT_SIZE ( nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid",0
1192,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModEnd> ++ ] =,0
1193,"<S2SV_ModStart> if ( ret ||! cm_id -> device ) { ret = - EADDRNOTAVAIL ; rdsdebug ( ""addr <S2SV_blank> %pI4 <S2SV_blank> ret <S2SV_blank> %d <S2SV_blank> node <S2SV_blank> type <S2SV_blank> %d\\n"", & addr, ret, cm_id -> device? cm_id -> device -> node_type : - 1 ) ; rdma_destroy_id ( cm_id ) ; return ret ; } <S2SV_ModEnd> ret = -",0
1194,"<S2SV_ModStart> ) ; struct xfrm_dump_info <S2SV_ModEnd> info ; BUILD_BUG_ON <S2SV_ModStart> = NLM_F_MULTI ; <S2SV_ModEnd> ( void ) <S2SV_ModStart> = NLM_F_MULTI ; <S2SV_ModEnd> ( void ) <S2SV_ModStart> = NLM_F_MULTI ; <S2SV_ModEnd> ( void ) <S2SV_ModStart> ; if ( cb -> args [ 0 ] ) { cb -> args [ 0 ] = 1 ; xfrm_policy_walk_init ( walk, XFRM_POLICY_TYPE_ANY ) ; } ( void ) xfrm_policy_walk ( net, walk, dump_one_policy, & info ) ; return skb -> len ; } if ( cb -> args [ 0 ] ) { cb -> args [ 0 ] = 0 ; xfrm_policy_walk_init ( walk, XFRM_POLICY_TYPE_ANY ) ; } ( void ) xfrm_policy_walk_init ( walk, XFRM_POLICY_TYPE_ANY ) ; } ( void ) xfrm_policy_walk ( net, walk, dump_one_policy, & info ) ; return skb -> len ;",0
1195,<S2SV_ModStart> 1 ; epoll_t <S2SV_ModEnd> * epoll = <S2SV_ModStart> = 0 ; if ( count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
1196,"<S2SV_ModStart> -> d_inode ; struct dentry * upper = ovl_dentry_upper ( dentry ) ; int err ; inode_lock_nested ( dir, I_MUTEX_PARENT ) ; err = - ESTALE ; if ( upper -> d_parent == upperdir ) { dget ( upper ) ; if ( is_dir ) err = vfs_rmdir ( dir, upper, NULL ) ; else err = vfs_unlink ( dir, upper, NULL ) ; else err = vfs_unlink ( dir, upper, NULL ) ; ovl_dentry_version_inc ( dentry -> d_parent ) ; } if (! err ) d_drop ( dentry ) ; inode_unlock ( dir ) ; return err ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1197,"<S2SV_ModStart> { errstr = parse_global_option ( CMD_INITIALIZE, NULL, NULL ) ; if ( errstr ) { s_log ( LOG_ERR, ""Global <S2SV_blank> options: <S2SV_blank> %s"", errstr ) ; return 1 ; } } if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_ERR, """,0
1198,"<S2SV_ModStart> ; if
1199,<S2SV_ModStart> -> name == MAPI_BODY_HTML <S2SV_ModEnd> ) { body <S2SV_ModStart> } else if ( a -> name == MAPI_RTF_COMPRESSED ) { body. rtf_bodies = get_rtf_data ( a ) ; html_size = a -> num_values ; } else if ( a -> name == MAPI_BODY_TEXT ) { body. text_body = get_text_data ( a ) ; rtf_size = a -> num_values ; } else if ( a -> name == MAPI_BODY_PLAIN ) { body. text_body = get_plain_data ( a ) ; rtf_size = a -> num_values ; } else if ( a -> name == MAPI_BODY_PLAIN ) { body. text_body = get_plain_data ( a ) ; rtf_size = a -> num_values ; } else if ( a -> name == MAPI_BODY_PLAIN ) { body. text_body = get_plain_data ( a ) ; rtf_size = a -> num_values ; } else { body. text_body = get_plain_data ( a ) ; rtf_size = a ->,0
1200,"<S2SV_ModStart> casspecial ) { if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; # endif i -> posX = i -> parent -> width - i -> width ; } if ( ( i -> posY + i -> height ) > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> Y <S2SV_blank> position\\n"" ) ; # endif i -> posY = i -> parent -> height - i -> height ; } if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; # endif i ->",0
1201,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> } } <S2SV_null>,0
1202,"<S2SV_ModStart> 1 ) { jas_eprintf <S2SV_ModEnd> ( ""box <S2SV_blank> type <S2SV_blank> %d\\n"",",0
1203,"<S2SV_ModStart>!= M_FS_TYPE_DIR ) { if ( M_fs_perms_can_access ( p2, M_FS_PERMS_MODE_NONE ) == M_FS_ERROR_SUCCESS ) { ret = M_FALSE ; goto done ; } }",0
1204,<S2SV_ModStart> journal_t * journal = EXT4_JOURNAL ( page -> mapping -> host ) ; if ( PageChecked ( page ) ) ClearPageChecked ( page ) ;,0
1205,"<S2SV_ModStart> ++ ) { writer = GF_SAFEALLOC ( writer, TrackWriter ) ; if (! writer ) goto exit ; writer -> sampleNumber = 1 ; writer -> mdia = ( GF_MediaBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_MPEG4 ) ; if (! writer -> mdia ) goto exit ; writer -> stbl = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_MPEG4 ) ; if (! writer -> stbl ) goto exit ; writer -> mdia = ( GF_MediaBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_MPEG4 ) ; if (! writer -> mdia ) goto exit ; writer -> mdia = ( GF_MediaBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_MPEG4 ) ; if (! writer -> mdia ) goto exit ; writer -> mdia = ( GF_MediaBox * ) gf_isom_box_new ( GF_IS",0
1206,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_encode ( BYTE <S2SV_ModStart>, UINT32 originalSize, TEMP_FAILURE_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry",0
1207,"<S2SV_ModStart> 17 ] ; size_t <S2SV_ModEnd> plen ; md5_state_t <S2SV_ModStart> = 0 ; memcpy ( md5data + 1, password, 82 ) ; memcpy ( md5data + 1 + strlen ( password ), pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; md5sum [ 0 ] = 0 ; init_packet ( & data, MT_PTYPE_DATA, srcmac, dstmac, sessionkey, outcounter ) ; plen = add_control_packet ( & data, MT_CPTYPE_PASSWORD, md5data, 17 ) ; plen += add_control_packet ( & data, MT_CPTYPE_USERNAME, username, strlen ( username ) ) ; plen += add_control_packet ( & data, MT_CPTYPE_TERM_TYPE, terminal, strlen ( terminal ) ) ; if ( is_a_tty && get_terminal_size",0
1208,"<S2SV_ModStart> useSystemLib ) { const char * topDir ; char libPath [ MAX_OSPATH ] ; if (! * topDir ) topDir = ""."" ; if (! * topDir ) topDir = ""."" ; if (! * topDir ) topDir = ""."" ; if (! * topDir ) topDir = ""."" ; if (! * basePath ) basePath = ""."" ; if ( FS_FilenameCompare ( topDir, basePath ) ) { Com_Printf ( ""Trying <S2SV_blank> to <S2SV_blank> load <S2SV_blank> \\""%s\\"" <S2SV_blank> from <S2SV_blank> \\""%s\\""...\\n"", name, basePath ) ; dllhandle = Sys_LoadLibrary ( libPath ) ; } else if ( FS_FilenameCompare ( topDir, basePath ) ) { Com_Printf ( ""Trying <S2SV_blank> to <S2SV_blank> load <S2SV_blank> \\""%s\\"" <S2SV_blank> from <S2SV_blank> \\""%s\\""...\\n"", name, basePath ) ; dllhandle = Sys_LoadLibrary ( libPath ) ; } if (! dllhandle ) Com_Printf ( ""Loading <S2SV_blank> \\""%s\\"" <S2SV_blank> failed\\n"", name ) ; return NULL ; }",0
1209,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> SNMP_FREE ( _mibindexes,0
1210,"<S2SV_ModStart> ( n ) \\\n{ <S2SV_ModEnd> sum = ( <S2SV_ModStart> bits -= n ; \\\n} <S2SV_ModEnd> typedef struct PCDTable <S2SV_ModStart> ) AcquireQuantumMemory ( 0x800, sizeof ( * buffer ) ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; buffer = ( unsigned char * ) AcquireQuantumMemory ( 0x800, sizeof ( * buffer ) ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ;",0
1211,"<S2SV_ModStart> ; if ( i + 1 < NCH ( n ) && <S2SV_ModStart> == COMMA ) { if ( forbidden_name ( c, argname, ch, 0 ) ) goto error ; arg = arg ( argname, annotation, NULL, LINENO ( ch ), ch -> n_col_offset, c -> c_arena ) ; if (! arg ) goto error ; } if ( forbidden_name ( c, argname, ch, 0 ) ) goto error ; if ( forbidden_name ( c, argname, ch, 0 ) ) goto error ; if ( forbidden_name ( c, argname, ch, 0 ) ) goto error ; arg = arg ( argname, annotation, NULL, LINENO ( ch ), ch -> n_col_offset, c -> c_arena ) ; if (! arg ) goto error ; arg = arg ( argname, annotation, NULL, LINENO ( ch ), ch -> n_col_offset, c -> c_arena ) ; if (! arg ) goto error ; arg = arg ( argname, annotation, NULL, LINENO ( ch ), ch -> n_col_offset, c ->",0
1212,<S2SV_ModStart> ) ; g_hash_table_remove_all ( headers ) ;,0
1213,"<S2SV_ModStart> HAVE_IPV6 char * p <S2SV_ModEnd> ; if ( <S2SV_ModStart> 1 ) { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> IPv6 <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL ; } p = memchr ( str + 1, ']', str_len - 2 ) ; if (! p || * ( p + 2 )!= ':' ) { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> IPv6 <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL ; } * portno = atoi ( p + 1 ) ; host = estrndup ( str, p - str - 1 ) ; } # endif if ( str_len ) { colon = memchr ( str, ':', str_len - 1 ) ; } else { if ( colon ) { * portno = atoi ( colon + 1 ) ; host = estrndup ( str, colon - str ) ; } else { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> IPv4 <S2SV_blank> address <S2SV_blank> \\""",0
1214,"<S2SV_ModStart> -> y_buffer ; memcpy <S2SV_ModEnd> ( dst, <S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst, <S2SV_ModStart> ( dst, src, src_ybc -> y_width, dst_ybc -> y_stride ) ; src += src_ybc -> y_stride ; dst += dst_ybc -> y_stride ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1215,"<S2SV_ModStart> cblk_style = bytestream2_get_byteu ( & s -> g ) ; if ( c -> cblk_style == 0 ) { av_log ( s -> avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> cblk <S2SV_blank> style\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
1216,"<S2SV_ModStart> { if ( ptr [ 0 ] == '%' && ptr [ 1 ] == '{' ) { bool match = FALSE ; end = strchr ( ptr, '}' ) ; ptr += 2 ; if (! end ) { fputs ( ""%{"", stream ) ; continue ; } stringp = curl_easy_getinfo ( curl, CURLINFO_EFFECTIVE_URL, & stringp ) ; stringp = curl_easy_getinfo ( curl, CURLINFO_EFFECTIVE_URL, & stringp ) ; stringp = curl_easy_getinfo ( curl, CURLINFO_EFFECTIVE_URL, & stringp ) ; stringp = curl_easy_getinfo ( curl, CURLINFO_EFFECTIVE_URL, & stringp ) ; stringp = curl_easy_getinfo ( curl, CURLINFO_EFFECTIVE_URL, & stringp ) ; stringp = curl_easy_getinfo ( curl, CURLINFO_EFFECTIVE_URL, & stringp ) ; stringp = curl_easy_getinfo ( curl, CURLINFO_EFFECTIVE_URL, & stringp ) ; stringp = curl_easy_getinfo ( curl, CURLINFO_EFFECTIVE_URL, & stringp",0
1217,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_rd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ( mi_col = tile -> mi_col_start <S2SV_ModEnd> ; mi_col < <S2SV_ModStart> mi_col += MI_BLOCK_SIZE <S2SV_ModEnd> ) { int <S2SV_ModStart> dummy_rate ; int64_t dummy_dist ; MACROBLOCK * x = & cpi -> mb ; if ( sf -> adaptive_pred_interp_filter ) { const int num_4x4_w = MAX ( 4, num_4x4_blocks_wide_lookup [ i ] ) ; const int num_4x4_h = MAX ( 4, num_4x4_blocks_high_lookup [ i ] ) ; const int num_4x4_blk = MAX ( 16, num_4x4_blk ) ; for ( x -> sb_index = 0 ; x -> sb_index < 4 ; ++ x -> sb_index ) for ( x -> b_index = 0 ; x -> b_index < 16 / num_4x4_blk ; ++ x",0
1218,"<S2SV_ModStart>, obj_tlen ; u_int hexdump ; u_int offset ; u_int link_type ; union { float f ; uint32_t i ; } bw ; ND_TCHECK ( * lmp_obj_header ) ; if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", lmp_obj_len ) ) ; return ; } <S2SV_ModStart> ( tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", lmp_obj_len ) ) ; return ; } <S2SV_ModStart> length ) ; if ( lmp_obj_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", lmp_obj_len ) ) ; return ; } <S2SV_ModStart> ( tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", lmp_obj_len ) ) ; return ; } <S2SV_ModStart>",0
1219,"<S2SV_ModStart> void inc_mvs ( MB_MODE_INFO * mbmi <S2SV_ModEnd>, const int_mv <S2SV_ModStart> ++ i ) { MV diff = { mvs [ i ]. as_mv. row - mbmi -> ref_mvs [ mbmi -> ref_frame [ i ] ] [ 0 ]. row, mvs [ i ]. as_mv. col - mbmi -> ref_mvs [ mbmi -> ref_frame [ i ] ]. col } ; vp9_inc_mv ( & diff, counts ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1220,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ),",0
1221,"<S2SV_ModStart> ; if ( pskb_expand_head ( skb_out, size - skb -> len, GFP_ATOMIC ) < 0 ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; } skb_pull_rcsum ( skb_out, hdr_size ) ; memmove ( skb_out -> data - ETH_HLEN, skb_mac_header ( skb_out ), ETH_HLEN ) ; skb_reset_network_header ( skb_out ) ; skb_reset_transport_header ( skb_out ) ; hlist_for_each_entry ( entry, chain, list ) { size = entry -> skb -> len - hdr_size ; memcpy ( skb_put ( skb_out, size ), entry -> skb -> data + hdr_size, size ) ; }",0
1222,<S2SV_ModStart> ) ; spin_lock_init ( & sta -> ampdu_mlme. mtx ) ;,0
1223,<S2SV_ModStart> tp_event ) && p_event -> attr. sample_type & PERF_SAMPLE_RAW ) { if ( tp_event -> attr. sample_type & PERF_SAMPLE_RAW ) { if ( tp_event -> attr. sample_type & PERF_SAMPLE_RAW ) { if ( tp_event -> attr. sample_type & PERF_SAMPLE_RAW ) { if ( tp_event -> attr. sample_type & PERF_SAMPLE_RAW ) { if ( tp_event -> attr. sample_type & PERF_SAMPLE_RAW ) { if ( tp_event -> attr. sample_type & PERF_SAMPLE_RAW ) { if ( tp_event -> attr. sample_type & PERF_SAMPLE_RAW ) { if ( tp_event -> attr. sample_type & PERF_SAMPLE_RAW ) { if ( tp_event -> attr. sample_type & PERF_SAMPLE_RAW ) { if ( tp_event -> attr. sample_type & PERF_SAMPLE_RAW ) { if ( tp_event -> attr. sample_type & PERF_SAMPLE_RAW,0
1224,"<S2SV_ModStart> 1 ) ; if (! data_interface ) { dev_err ( & intf -> dev, ""No <S2SV_blank> data <S2SV_blank> interface\\n"" ) ; return - EINVAL ; } <S2SV_ModStart> 0 ) ; if (! control_interface ) { dev_err ( & intf -> dev, ""No <S2SV_blank> control <S2SV_blank> interface\\n"" ) ; return - EINVAL ; } <S2SV_ModStart> skip_normal_probe ; } if ( intf -> cur_altsetting -> desc. bNumEndpoints < 1 || intf -> cur_altsetting -> desc. bNumEndpoints < 2 || intf -> cur_altsetting -> desc. bNumEndpoints < 2 ) { dev_err ( & intf -> dev, ""No <S2SV_blank> extra <S2SV_blank> descriptors <S2SV_blank> on <S2SV_blank> endpoint\\n"" ) ; return - EINVAL ; }",0
1225,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1226,"<S2SV_ModStart> return ; netsnmp_mibindex_load ( ) ; <S2SV_ModEnd> DEBUGMSGTL ( ( <S2SV_ModStart> ) { add_mibfile ( <S2SV_ModEnd> entry, NULL <S2SV_ModStart> ) { add_mibfile ( <S2SV_ModEnd> entry, NULL <S2SV_ModStart> } } netsnmp_init_mib_internals ( ) ; env_var = netsnmp_getenv ( ""MIBS"" ) ; if ( env_var!= NULL ) { if ( confmibs!= NULL ) env_var = strdup ( confmibs ) ; else env_var = strdup ( NETSNMP_DEFAULT_MIBS ) ; } else { add_mibfile ( <S2SV_ModEnd> entry, NULL <S2SV_ModStart> ) ; } <S2SV_ModEnd> } } netsnmp_init_mib_internals <S2SV_ModStart> ( ) ; env_var = netsnmp_getenv ( ""MIBS"" ) ; if ( env_var!= NULL ) { if ( confmibs!= NULL ) env_var = strdup ( confmibs ) ; else env_var = strdup ( confmibs ) ; else env_var = strdup ( NETSNMP_DEFAULT_MIBS ) ; } else { env_var =",0
1227,"<S2SV_ModStart> struct list_head tmplist ; sctp_sk_copy_descendant ( oldsk, newsk ) ; newsk -> sk_sndbuf = oldsk -> sk_sndbuf ; newsk -> sk_rcvbuf = oldsk -> sk_rcvbuf ; sctp_sk_copy_descendant ( newsk, oldsk ) ; newsp -> ep = newep ; newsp -> hmac = NULL ; head = & sctp_port_hashtable [ inet_sk ( oldsk ) -> inet_num ] ; spin_lock ( & head -> lock ) ; pp = sctp_sk ( newsk ) -> bind_hash ; sctp_sk ( newsk ) -> bind_hash = pp ; inet_sk ( newsk ) -> inet_num = inet_sk ( oldsk ) -> inet_num ; sctp_sk ( newsk ) -> inet_num = inet_sk ( newsk ) -> inet_num ; sctp_sk ( newsk ) -> inet_num = inet_sk ( oldsk ) -> inet_num ; sctp_sk ( newsk ) -> inet_num = inet_sk ( newsk ) -> inet_",0
1228,"<S2SV_ModStart> O_RDWR ) ; if ( fd < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> ERROR: <S2SV_blank> uinput <S2SV_blank> device <S2SV_blank> open <S2SV_blank> failed"", __FUNCTION__ ) ; return - 1 ; } <S2SV_ModStart>, O_RDWR ) ; if ( fd < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> device <S2SV_blank> open <S2SV_blank> failed"", __FUNCTION__ ) ; return - 1 ; } <S2SV_ModStart> = 0x0000 ; if ( write ( fd, & dev, sizeof ( dev ) ) < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> device <S2SV_blank> information"", __FUNCTION__ ) ; close ( fd ) ; return - 1 ; } <S2SV_ModStart> fd, UI_SET_KEYBIT <S2SV_ModEnd>, key_map [ <S2SV_ModStart> mapped_id ) ; if ( ioctl ( fd, UI_DEV_CREATE, & dev ) < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> create <S2SV_blank> uinput <S2SV_blank> device"", __FUNCTION__ ) ; close ( fd ) ; return - 1 ; } fd = open ( uinput_dev_path [ x ], O_RD",0
1229,"<S2SV_ModStart> regs ) { <S2SV_ModEnd> short sel ; <S2SV_ModStart> return sel ; <S2SV_ModEnd> desc = get_desc <S2SV_ModStart> ( sel ) ; if (! desc ) return - EINVAL ; <S2SV_ModEnd> switch ( ( <S2SV_ModStart> ) ) ) { case 0 : return INSN_CODE_SEG_PARAMS ( 2, 2 ) ; case 1 : return INSN_CODE_SEG_PARAMS ( 4, 4 ) ; case 2 : return INSN_CODE_SEG_PARAMS ( 4, 8 ) ; case 3 : return INSN_CODE_SEG_PARAMS ( 4, 8 ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1230,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
1231,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s,",0
1232,<S2SV_ModStart> return ret ; <S2SV_ModEnd> out_free_uid : free_uid,0
1233,<S2SV_ModStart> * pctx ) { if ( pctx!= NULL ) { iakerb_ctx_id_t ctx ; krb5_error_code code ; code = krb5_gss_init_context ( & ctx -> k5c ) ; if ( code!= 0 ) goto cleanup ; * pctx = ctx ; return code ; } <S2SV_ModEnd> code = krb5_gss_init_context,0
1234,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ( image == ( Image * ) NULL ) { AppendImageToList ( & image, screen ) ; bitmapDC = CreateCompatibleDC ( hDC ) ; if ( bitmapDC == ( HDC ) NULL ) { DeleteDC ( hDC ) ; ThrowReaderException ( CoderError, ""UnableToCreateDC"" ) ; } <S2SV_ModStart> } if ( image == ( Image * ) NULL ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1235,<S2SV_ModStart> ; while ( ( <S2SV_ModStart> )!= START_CODE_PREFIX ) && ( ps_stream -> u4_offset < ps_stream -> u4_max_offset ),1
1236,"<S2SV_ModStart> return - EINVAL ; if (! strcmp ( dentry -> d_name. name, ""ipc_flood_count"" ) && strcmp ( dentry -> d_name. name, ""ipc_flood_duration_ms"" ) ) flood_duration_test = true ; if (! strcmp ( dentry -> d_name. name, ""ipc_flood_duration_count"" ) && strcmp ( dentry -> d_name. name, ""ipc_flood_duration_ms"" ) ) flood_duration_test = true ; if (! strcmp ( dentry -> d_name. name, ""ipc_flood_count"" ) && strcmp ( dentry -> d_name. name, ""ipc_flood_duration_ms"" ) ) flood_duration_test = true ; if ( flood_duration_test ) ret = kstrtoul ( string, 0, & ipc_count ) ; else ret = kstrtoul ( string, 0, & ipc_count ) ; if ( ret < 0 ) { ret = size ; goto out ; }",0
1237,"<S2SV_ModStart> imethod ) ; if ( inflated == NULL ) { g_warning ( ""mono_reflection_bind_generic_method_parameters() <S2SV_blank> returned <S2SV_blank> NULL"" ) ; return NULL ; } <S2SV_ModStart> imethod ) ; if ( inflated == NULL ) { g_warning ( ""mono_reflection_bind_generic_method_parameters() <S2SV_blank> returned <S2SV_blank> NULL"" ) ; return NULL ; } <S2SV_ModStart> imethod ) ; if ( inflated == NULL ) { g_warning ( ""mono_reflection_bind_generic_method_parameters() <S2SV_blank> returned <S2SV_blank> NULL"" ) ; return NULL ; }",0
1238,"<S2SV_ModStart> ""nnnnn\\0"" ) ] ; unsigned long <S2SV_ModEnd> tmp ; if <S2SV_ModStart> ( copy_from_user ( buf <S2SV_ModEnd>, buffer, <S2SV_ModStart> count ) ) return - EFAULT <S2SV_ModEnd> ; tmp =",0
1239,"<S2SV_ModStart>, ""Pushing <S2SV_blank> input <S2SV_blank> %d <S2SV_blank> : <S2SV_blank> %.30s\\n"" <S2SV_ModEnd>, ctxt ->",0
1240,"<S2SV_ModStart> return 1 ; } if ( le32_to_cpu ( raw_super -> num_log_blocks ) > F2FS_MAX_LOG_BLOCKS ) { f2fs_msg ( sb, KERN_ERR, ""Invalid <S2SV_blank> log <S2SV_blank> blocks <S2SV_blank> per <S2SV_blank> segment <S2SV_blank> (%u)\\n"", le32_to_cpu ( raw_super -> num_log_blocks ) ) ; f2fs_msg ( sb, KERN_ERR, ""Invalid <S2SV_blank> log <S2SV_blank> blocks <S2SV_blank> per <S2SV_blank> segment <S2SV_blank> (%u)\\n"", le32_to_cpu ( raw_super -> num_log_blocks ) ) ; f2fs_msg ( sb, KERN_ERR, ""Invalid <S2SV_blank> log <S2SV_blank> blocks <S2SV_blank> per <S2SV_blank> segment <S2SV_blank> (%u)\\n"", le32_to_cpu ( raw_super -> num_log_blocks ) ) ; f2fs_msg ( sb, KERN_ERR, ""Invalid <S2SV_blank> log <S2SV_blank> blocks <S2SV_blank> per <S2SV_blank> segment <S2SV_blank> (%u)\\n"", le32_to_cpu ( raw_super -> num_log_blocks ) ) ; return 1 ; }",0
1241,"<S2SV_ModStart> ) { char <S2SV_ModEnd> * last_elem, <S2SV_ModStart> ( ( ( strncmp ( & name [ 1 ], ""ORIGIN"", 6 ) == 0 && ( len = 7 )!= 0 ) || ( ( strncmp ( & name [ 1 ], ""PLATFORM"", 8 ) == 0 && ( len = 9 )!= 0 ) ) && ( name [ len ] == '\\0' || name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) || ( name [ 1 ] == '{' && ( ( name [ len ] == '\\0' || name [ len ] == '/' || ( is_path && name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) ) || ( name [ 1 ] == '{' && ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 9 )!= 0 ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( len = 11 )!= 0 ) ) ) { repl = ( ( len == 7 || name [ 2 ] == 'O' )? l -> l_",0
1242,"<S2SV_ModStart> ) H264SwDecMalloc ( <S2SV_ModEnd> sizeof ( decContainer_t <S2SV_ModStart> ) ) ; if ( pDecCont == NULL ) { DEC_API_TRC ( ""H264SwDecInit# <S2SV_blank> ERROR: <S2SV_blank> Memory <S2SV_blank> allocation <S2SV_blank> failed"" ) ; return ( H264SWDEC_MEMFAIL ) ; }",0
1243,"<S2SV_ModStart> len ) { struct ipv6_txoptions * opt = NULL ; <S2SV_ModStart> ) ) { opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if ( opt ) { opt = rcu_dereference_protected ( rp -> opt, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( rp -> opt, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( rp -> opt, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( rp -> opt, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( rp -> opt, sock_owned_by_user ( sk ) ) ; opt = rcu_der",0
1244,"<S2SV_ModStart> drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if (! opt -> optlen ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INDISCARDS ) ; goto drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; if ( unlikely ( opt ->",0
1245,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> } break ;",1
1246,<S2SV_ModStart> ; if ( ip_hdr ( skb ) -> protocol!= IPPROTO_UDP || ip_hdr ( skb ) -> daddr == 0 || ip_hdr ( skb ) -> protocol!= IPPROTO_UDP || ip_hdr ( skb ) -> protocol!= IPPROTO_TCP || ip_hdr ( skb ) -> daddr == 0 || ip_hdr ( skb ) -> protocol!= IPPROTO_UDP || ip_hdr ( skb ) -> protocol!= IPPROTO_TCP || ip_hdr ( skb ) -> protocol!= IPPROTO_UDP || ip_hdr ( skb ) -> daddr == 0 || ip_hdr ( skb ) -> protocol!= IPPROTO_UDP || ip_hdr ( skb ) -> protocol!= IPPROTO_TCP || ip_hdr ( skb ) -> protocol!= IPPROTO_UDP || ip_hdr ( skb ) -> protocol!= IPPROTO_UDP || ip_hdr ( skb ) -> protocol!= IPPROTO_UDP || ip_hdr ( skb ) -> protocol!= IPPROTO_UDP || ip_hdr ( skb ) -> protocol!= IPPROTO_TCP || ip_hdr ( skb ) ->,0
1247,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1248,"<S2SV_ModStart> goto errout ; if ( info -> groupbook >= ci -> books ) { int cascade = oggpack_read ( opb, 3 ) ; if ( cascade >= ci -> books ) { int book = ci -> books - 1 ; if ( book >= ci -> books ) { int cascade = ( oggpack_read ( opb, 5 ) << 3 ) ; if ( cascade >= ci -> books ) { int cascade = ( oggpack_read ( opb, 1 ) << 3 ) ; if ( cascade >= ci -> books ) { int cascade = oggpack_read ( opb, 3 ) ; if ( cascade >= ci -> books ) { int book = ci -> books - 1 ; if ( book >= ci -> books ) { int cascade = ( oggpack_read ( opb, 5 ) << 3 ) ; if ( cascade >= ci -> books ) { int cascade = ( oggpack_read ( opb, 1 ) << 3 ) ; if ( cascade >= ci -> books ) { int cascade = ( oggpack_read ( opb, 5 ) << 3 ) ; if ( cascade >= ci -> books ) {",0
1249,"<S2SV_ModStart> if (! js_doregexec ( J, <S2SV_ModEnd> re -> prog",1
1250,<S2SV_ModStart> -> copied_seq = seq ; tp -> copied_offset = seq ;,0
1251,"<S2SV_ModStart> 0 ; krb5_key_data <S2SV_ModEnd> * key_data ; <S2SV_ModStart> & err ) ; if ( key_data == NULL ) goto cleanup ; memcpy ( key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ; for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_ver == 1 ) { key_data [ i ]. key_data_type [ 1 ] = KRB5_KDB_SALTTYPE_NORMAL ; key_data [ i ]. key_data_length [ 1 ] = 0 ; key_data [ i ]. key_data_contents [ 1 ] = NULL ; } } for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_ver == 1 ) { key_data [ i ]. key_data_ver = 2 ; key_data [ i ]. key_data_type [ 1 ] = KRB5_KDB_SALTTYPE_NORMAL ; key_data [ i ]. key_data",0
1252,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
1253,<S2SV_ModStart> ] ) ; if ( pCsr -> zInput == 0 ) { rc = SQLITE_NOMEM ; } else {,0
1254,<S2SV_ModStart> filp ) { atomic_dec ( & SOCKET_I ( inode ) -> refcnt ) ;,0
1255,"<S2SV_ModStart> * orelse, string type_comment, int <S2SV_ModEnd> lineno, int <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. type_comment = type_comment",1
1256,"<S2SV_ModStart> MI_CHECK * param <S2SV_ModEnd>, char * <S2SV_ModStart> char * name ) { if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM <S2SV_blank> table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM <S2SV_blank> table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM <S2SV_blank> table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM <S2SV_blank> table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM <S2SV_blank> table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM <S2SV_blank> table <S2SV_blank> \'%s\'",0
1257,<S2SV_ModStart> } } return opt <S2SV_ModEnd> ; } <S2SV_null>,0
1258,<S2SV_ModStart> ) ) { if ( kvm_get_run ( kvm_run ) -> exit_reason!= KVM_EXIT_INTERNAL_ERROR && kvm_get_run ( kvm_run ) -> exit_reason!= KVM_EXIT_INTERNAL_ERROR && kvm_get_run ( kvm_run ) -> exit_reason!= KVM_EXIT_INTERNAL_ERROR && kvm_get_run ( kvm_run ) -> exit_reason!= KVM_EXIT_INTERNAL_ERROR && kvm_get_run ( kvm_run ) -> exit_reason!= KVM_EXIT_INTERNAL_ERROR && kvm_get_run ( kvm_run ) -> exit_reason!= KVM_EXIT_INTERNAL_ERROR && kvm_get_run ( kvm_run ) -> exit_reason!= KVM_EXIT_INTERNAL_ERROR && kvm_get_run ( kvm_run ) -> exit_reason!= KVM_EXIT_INTERNAL_ERROR && kvm_get_run ( kvm_run ) -> exit_reason!= KVM_EXIT_INTERNAL_ERROR && kvm_get_run ( kvm_run ) -> exit,0
1259,"<S2SV_ModStart> case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case <S2SV_ModStart> case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case <S2SV_ModStart> case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server",0
1260,"<S2SV_ModStart> UINT error ; if ( pduLength > UINT32_MAX / sizeof ( UINT16 ) ) { WLog_ERR ( TAG, ""rdpei_recv_pdu: <S2SV_blank> pduLength <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", pduLength ) ; return UINT_INVALID_DATA ; }",0
1261,"<S2SV_ModStart>, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s"" <S2SV_ModEnd>, pData -> <S2SV_ModStart>, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s"" <S2SV_ModEnd>, pData -> <S2SV_ModStart>, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s"" <S2SV_ModEnd>, pData -> <S2SV_ModStart>, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s"" <S2SV_ModEnd>, pData -> <S2SV_ModStart>, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s"" <S2SV_ModEnd>, pData -> <S2SV_ModStart>, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s"" <S2SV_ModEnd>, pData -> <S2SV_ModStart>, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s"" <S2SV_ModEnd>, pData ->",0
1262,"<S2SV_ModStart> 0 ) return <S2SV_ModEnd> chg ; if <S2SV_ModStart> return - ENOSPC ; ret = hugetlb_acct_memory ( h, chg ) ; if ( ret < 0 ) { hugepage_subpool_put_pages ( spool, chg ) ; return ret ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; return 0 ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; return 0 ; <S2SV_ModEnd> } if ( <S2SV_ModStart> 0 ) { hugepage_subpool_put_pages ( spool, chg ) ; return ret ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1263,"<S2SV_ModStart> struct flowi6 fl6 ; struct ipv6_txoptions * opt <S2SV_ModStart> skb ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart>, & fl6, opt <S2SV_ModEnd> ) ; SCTP_INC_STATS <S2SV_ModStart> SCTP_MIB_OUTSCTPPACKS ) ; rcu_read_lock ( ) ; <S2SV_ModStart> = 1 ; rcu_read_unlock ( ) ;",0
1264,"<S2SV_ModStart> ; root_info = kmem_cache_zalloc ( ecryptfs_dentry_info_cache, GFP_KERNEL ) ; if (! root_info ) { kmem_cache_free ( ecryptfs_dentry_info_cache, sbi ) ; kmem_cache_free ( ecryptfs_dentry_info_cache, sbi ) ; kmem_cache_free ( ecryptfs_dentry_cache, sbi ) ; goto out_free ; } root_info = kmem_cache_zalloc ( ecryptfs_dentry_info_cache, GFP_KERNEL ) ; if (! root_info ) { kmem_cache_free ( ecryptfs_dentry_info_cache, sbi ) ; kmem_cache_free ( ecryptfs_dentry_info_cache, sbi ) ; kmem_cache_free ( ecryptfs_dentry_cache, sbi ) ; goto out_free ; }",0
1265,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
1266,<S2SV_ModStart> ; MATLAB_KO : quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
1267,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> rdpNego_t <S2SV_ModEnd> nego_process_negotiation_failure ( rdpNego <S2SV_ModStart> ; WLog_DBG ( TAG, ""RDP_NEG_FAILURE"" ) ; Stream_Read_UINT8 ( s, flags ) ; Stream_Read_UINT16 ( s, length ) ; Stream_Read_UINT32 ( s, failureCode ) ; switch ( failureCode ) { case SSL_REQUIRED_BY_SERVER : WLog_WARN ( TAG, ""Error: <S2SV_blank> SSL_REQUIRED_BY_SERVER"" ) ; nego -> sendNegoData = TRUE ; break ; case HYBRID_REQUIRED_BY_SERVER : WLog_WARN ( TAG, ""Error: <S2SV_blank> HYBRID_REQUIRED_BY_SERVER"" ) ; nego -> sendNegoData = TRUE ; break ; case INCONSISTENT_FLAGS : WLog_WARN ( TAG, ""Error: <S2SV_blank> INCONSISTENT_FLAGS"" ) ; nego -> sendNegoData = TRUE ; break ; case HYBRID_REQUIRED_BY_SERVER : WLog_WARN (",0
1268,"<S2SV_ModStart> int ret, last_pwd <S2SV_ModEnd> ; krb5_boolean have_pol <S2SV_ModStart> keepold ) return KADM5_PROTECT_PRINCIPAL <S2SV_ModEnd> ; new_n_ks_tuple =",0
1269,"<S2SV_ModStart> int len, result <S2SV_ModEnd> = RLC_OK ; <S2SV_ModStart> = RLC_OK ; bn_null ( t ) ; RLC_TRY { bn_new ( t ) ; RLC_TRY { bn_zero ( m ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, RSA_PUB ) ; * p_len = k_len - 3 - m_len ; for ( int i = 0 ; i < * p_len ; i ++ ) { bn_lsh ( m, m, 8 ) ; rand_bytes ( & pad, 1 ) ; bn_add_dig ( m, m, pad ) ; } bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, 0 ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, 0 ) ; bn_lsh ( m, m, 8 ) ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; if ( pad!= RSA_PUB ) { result = RLC_ERR",0
1270,"<S2SV_ModStart> ) ) { yr_error ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( ) ) ) ) ) ), yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( ) ) ) ) ) ) ) ), yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror (",0
1271,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
1272,<S2SV_ModStart> { rq = <S2SV_ModEnd> hctx -> tags <S2SV_ModStart> hctx -> tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; if (,1
1273,"<S2SV_ModStart> if ( ( psf = psf_calloc ( 1, <S2SV_ModEnd> sizeof ( SF_PRIVATE <S2SV_ModStart> ) ) == NULL ) { sf_errno = SFE_MALLOC_FAILED ; return NULL ; } ; psf_log_printf ( psf, ""File <S2SV_blank> : <S2SV_blank> %s\\n"", path ) ; if ( copy_filename ( psf, path )!= 0 ) { sf_errno = psf -> error ; return NULL ; } ; psf -> file. mode = mode ; psf_log_printf ( psf, ""File <S2SV_blank> : <S2SV_blank> %s\\n"", path ) ; if ( copy_filename ( psf, path )!= 0 ) { sf_errno = psf -> error ; return NULL ; } ; psf_log_printf ( psf, ""File <S2SV_blank> : <S2SV_blank> %s\\n"", path ) ; if ( copy_filename ( psf, path )!= 0 ) { sf_errno = psf -> error ; return NULL ; } ; psf -> file. mode = mode ; psf_log_printf ( psf, ""File <S2SV_blank> : <S2SV_blank> %s\\n"", path ) ; psf_log_printf ( psf, ""File <S2SV_blank> : <S2SV_blank> %s\\n"", path ) ; return NULL",0
1274,"<S2SV_ModStart> void fix_interp_filter ( VP9_COMP * comp, int <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
1275,"<S2SV_ModStart> { token ++ ; } while ( token [ 0 ] =='<S2SV_blank>') { token ++ ; } while ( token [ 0 ] == '[' || token [ 0 ] == ']' ) { token ++ ; } if (! strncmp ( token, ""asr"", 3 ) ) { op -> operands_count ++ ; op -> operands [ operand ]. shift = ARM_ASR ; } else if (! strncmp ( token, ""lsl"", 3 ) ) { op -> operands [ operand ]. shift = ARM_LSL ; } else if (! strncmp ( token, ""asr"", 3 ) ) { op -> operands [ operand ]. shift = ARM_ASR ; } if (! strncmp ( token, ""asr"", 3 ) ) { op -> operands [ operand ]. shift = ARM_ASR ; } else if (! strncmp ( token, ""lsl"", 3 ) ) { op -> operands [ operand ]. shift = ARM_LSL ; } else if (! strncmp ( token, ""asr"", 3 ) ) { op -> operands [ operand ]. shift = ARM_",0
1276,"<S2SV_ModStart> cpi ) { VP9_COMMON * const cm = & cpi -> td. <S2SV_ModEnd> cm ; MACROBLOCK <S2SV_ModStart> -> act_zbin_adj = 0 <S2SV_ModEnd> ; vpx_setup_src_planes ( <S2SV_ModStart> = 0 ; vp9_setup_pre_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vp9_setup_dst_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vp9_setup_block_planes ( & x -> e_mbd, cm -> subsampling_x, cm -> subsampling_y ) ; vpx_memset ( xd -> above_context [ 0 ], 0, sizeof ( * xd -> above_context [ 0 ] ) * 2 * aligned_mi_cols * MAX_MB_PLANE ) ; memset ( xd -> above_seg_context, 0, sizeof ( * xd -> above_seg_context ) * aligned_mi_cols ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null",0
1277,"<S2SV_ModStart> = htc_request_check_host_hdr ( sp <S2SV_ModEnd> ) ; if <S2SV_ModStart> 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } retval = <S2SV_ModStart> 0 ) { WSPR ( sp, SLT_HttpGarbage, ""Duplicated <S2SV_blank> Host <S2SV_blank> header"" ) ; return ( retval ) ; }",0
1278,"<S2SV_ModStart> ) ) ; memset ( magick, 0, sizeof ( magick ) ) ; <S2SV_ModStart> ReadBlob ( image, sizeof ( image -> page ) <S2SV_ModEnd> ) ; image <S2SV_ModStart> ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image",0
1279,"<S2SV_ModStart> snd_cards_lock ) ; if ( idx >= SNDRV_CARDS ) { mutex_unlock ( & snd_card_mutex ) ; dev_err ( parent, ""index <S2SV_blank> %d <S2SV_blank> (range <S2SV_blank> 0-%i), <S2SV_blank> error: <S2SV_blank> %d\\n"", idx, snd_cards_lock - 1 ) ; kfree ( card ) ; return err ; }",0
1280,"<S2SV_ModStart> ""3"" ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; } if ( s_max_octets < sig_len ) { return ""2"" ""exponentiation <S2SV_blank> failed; <S2SV_blank> too <S2SV_blank> many <S2SV_blank> octets"" ; }",0
1281,"<S2SV_ModStart> len ) ; if ( len + sizeof ( tETH_HDR ) > TAP_MAX_PKT_WRITE_LEN ) { LOG_ERROR ( ""btpan_tap_send <S2SV_blank> eth <S2SV_blank> packet <S2SV_blank> size:%d <S2SV_blank> is <S2SV_blank> exceeded <S2SV_blank> limit!"", len + sizeof ( tETH_HDR ) ) ; return - 1 ; } <S2SV_ModStart> len ) ; if ( len + sizeof ( tETH_HDR ) > TAP_MAX_PKT_WRITE_LEN ) { LOG_ERROR ( ""btpan_tap_send <S2SV_blank> eth <S2SV_blank> packet <S2SV_blank> size:%d <S2SV_blank> is <S2SV_blank> exceeded <S2SV_blank> limit!"", len + sizeof ( tETH_HDR ) ) ; return - 1 ; }",0
1282,<S2SV_ModStart> u1_field_pic_flag ) ; if ( ps_prev_poc -> i4_delta_pic_order_cnt_lsb!= ps_cur_poc -> i4_delta_pic_order_cnt_lsb ) { ps_dec -> i4_delta_pic_order_cnt_msb = ps_cur_poc -> i4_delta_pic_order_cnt_msb ; ps_dec -> i4_delta_pic_order_cnt [ 0 ] = ps_cur_poc -> i4_delta_pic_order_cnt [ 0 ] ; ps_dec -> i4_delta_pic_order_cnt [ 1 ] = ps_cur_poc -> i4_delta_pic_order_cnt [ 1 ] ; } else { ps_dec -> i4_delta_pic_order_cnt [ 0 ] = ps_cur_poc -> i4_delta_pic_order_cnt [ 0 ] ; ps_dec -> i4_delta_pic_order_cnt [ 1 ] = ps_cur_poc -> i4_delta_pic_order_cnt [ 1 ] ;,0
1283,"<S2SV_ModStart> OPENSSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ; SSLerr ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ; <S2SV_ModStart> item ) ; SSLerr ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ;",0
1284,"<S2SV_ModStart> args -> buffer_count > I915_NUM_BUFFERS - 1 ) { DRM_DEBUG ( ""execbuf2 <S2SV_blank> with <S2SV_blank> %d <S2SV_blank> buffers\\n"", args -> buffer_count ) ; return - EINVAL ; } if ( args -> buffer_count > I915_NUM_BUFFERS - 1 ) { DRM_DEBUG ( ""execbuf2 <S2SV_blank> with <S2SV_blank> %d <S2SV_blank> buffers\\n"", args -> buffer_count ) ; return - EINVAL ; } ret = copy_from_user ( exec2_list, ( struct drm_i915_relocation_entry __user * ) ( uintptr_t ) args -> buffers_ptr, sizeof ( * exec2_list ) * args -> buffer_count ) ; if ( ret!= 0 ) { ret = - EFAULT ; DRM_DEBUG ( ""failed <S2SV_blank> to <S2SV_blank> copy <S2SV_blank> %d <S2SV_blank> exec <S2SV_blank> entries <S2SV_blank> back <S2SV_blank> to <S2SV_blank> user <S2SV_blank> (%d)\\n"", args -> buffer_count, ret ) ; drm_free_large ( exec2_list ) ; return ret ; }",0
1285,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> mpt_ioctl_iocinfo * karg <S2SV_ModEnd> ; struct pci_dev <S2SV_ModStart> * pdev ; <S2SV_ModEnd> int port ; <S2SV_ModStart> return PTR_ERR ( karg <S2SV_ModEnd> ) ) ; <S2SV_ModStart> return PTR_ERR ( karg <S2SV_ModEnd> ) ; }",0
1286,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
1287,"<S2SV_ModStart> * mntent, <S2SV_ModEnd> char * path <S2SV_ModStart> mnt_type, mntent -> mnt_flags <S2SV_ModEnd>, mntdata,",0
1288,"<S2SV_ModStart> = 8 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1289,"<S2SV_ModStart> ab ) { <S2SV_ModEnd> size_t i, <S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> len_sent = 0 <S2SV_ModStart> * ab, ""argc=%d"" <S2SV_ModEnd>, context -> <S2SV_ModStart> ) ; buf = kmalloc ( MAX_EXECVE_AUDIT_LEN + 1, GFP_KERNEL ) ; if (! buf ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } for ( i = 0 ; i < context -> execve. argc ; i ++ ) { len = audit_log_single_execve_arg ( context, ab, i, & len_sent, p, buf ) ; if (! buf ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } for ( i = 0 ; i < context -> execve. argc ; i ++ ) { len = audit_log_single_execve_arg ( context, ab, i, & len_sent, p, buf <S2SV_ModEnd> ) ; }",0
1290,"<S2SV_ModStart>, O_WRONLY | O_CREAT | O_CLOEXEC | O_NOCTTY <S2SV_ModEnd> ) ; if",0
1291,"<S2SV_ModStart> err_info ) { <S2SV_ModEnd> char line [ <S2SV_ModStart> ; char line [ NETSCREEN_LINE_LENGTH ] ; char cap_int [ NETSCREEN_MAX_INT_NAME_LENGTH ] ; gboolean cap_dir ; char cap_dst [ 13 ] ; <S2SV_ModStart> FALSE ; } if (! parse_netscreen_hex_dump ( wth -> random_fh, pkt_len, cap_int, & cap_dir, cap_dst, phdr, buf, err, err_info ) ) return FALSE ; if (! parse_netscreen_hex_dump ( wth -> random_fh, pkt_len, cap_int, cap_dst, phdr, buf, err, err_info ) ) return FALSE ; if (! parse_netscreen_hex_dump ( wth -> random_fh, pkt_len, cap_int, cap_dst, phdr, buf, err, err_info ) ) return FALSE ; if (! parse_netscreen_hex_dump ( wth -> random_fh, pkt_len, cap_int, cap_dst, phdr, buf, err, err_info ) ) return FALSE ;",0
1292,<S2SV_ModStart> * rq ) <S2SV_ModEnd> { int cpu <S2SV_ModStart> ; u64 irq_time ; if ( rq -> skip_clock_update ) return <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1293,"<S2SV_ModStart> else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv",0
1294,"<S2SV_ModStart> st ) { <S2SV_ModEnd> unsigned long flags <S2SV_ModStart> int notify ; memset ( & resp, 0, sizeof ( resp ) ) ; <S2SV_ModStart> case BLKIF_PROTOCOL_NATIVE : memcpy ( RING_GET_RESPONSE ( & blk_rings -> native, blk_rings -> native. rsp_prod_pvt ), & resp, sizeof ( resp ) ) ; break ; case BLKIF_PROTOCOL_X86_32 : memcpy ( RING_GET_RESPONSE ( & blk_rings -> x86_32, blk_rings -> x86_32. rsp_prod_pvt ), & resp, sizeof ( resp ) ) ; break ; case BLKIF_PROTOCOL_X86_64 : memcpy ( RING_GET_RESPONSE ( & blk_rings -> x86_64, blk_rings -> x86_64. rsp_prod_pvt ), & resp, sizeof ( resp ) ) ; break ; default : BUG ( ) ; } blk_rings -> common. rsp_prod_pvt ++ ; RING_PUSH_RESPONSES_AND_CHECK_NOTIFY ( & blk_rings -> common,",0
1295,<S2SV_ModStart> ; if ( <S2SV_ModEnd> entry -> attributes <S2SV_ModStart> KADM5_ATTRIBUTES ) || ( entry -> attributes & KRB5_KDB_DISALLOW_ALL_TIX ),0
1296,"<S2SV_ModStart> ; if ( ( <S2SV_ModStart> 12 < datao ) || ( datao + 12 > buf_size ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> entries = exif_mem_alloc ( en -> mem, sizeof ( MnoteFujiEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( en -> log, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } c = exif_get_short ( buf + o, EXIF_BYTE_ORDER_INTEL ) ; datao += 2 ; exif_mnote_data_fuji_clear ( n ) ; n -> entries = exif_mem_alloc ( en -> mem, sizeof ( MnoteFujiEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( en -> log, ""ExifMnoteDataFuji"", sizeof ( MnoteFujiEntry ) * c ) ;",0
1297,"<S2SV_ModStart> ( outname, sizeof ( htmlstring ), <S2SV_ModStart> ( outname, sizeof ( htmlstring ), <S2SV_ModStart> ( outname, sizeof ( htmlstring ), <S2SV_ModStart> ( outname, sizeof ( htmlstring ), <S2SV_ModStart> ( outname, sizeof ( htmlstring ), <S2SV_ModStart> ( outname, sizeof ( htmlstring ), <S2SV_ModStart> ( outname, sizeof ( htmlstring ), <S2SV_ModStart> ( outname, sizeof ( htmlstring ), <S2SV_ModStart> ( outname, sizeof ( htmlstring ), <S2SV_ModStart> ( outname, sizeof ( htmlstring ), <S2SV_ModStart> ( outname, sizeof ( htmlstring ), <S2SV_ModStart> ( outname, sizeof ( htmlstring ), <S2SV_ModStart> ( outname, sizeof ( htmlstring ), <S2SV_ModStart> ( outname, sizeof ( htmlstring ), <S2SV_ModStart> ( outname, sizeof ( htmlstring ), <S2SV_ModStart> ( outname, sizeof ( htmlstring ), <S2SV_ModStart> ( outname, sizeof ( htmlstring ), <S2SV_ModStart> ( outname, sizeof ( htmlstring ), <S2SV_ModStart> ( outname, sizeof ( htmlstring ), <S2SV_ModStart> ( outname, sizeof ( htmlstring ), <S2SV_ModStart> ( outname, sizeof ( htmlstring ), <S2SV_ModStart> ( outname, sizeof ( htmlstring ), <S2SV_ModStart> ( outname, sizeof ( htmlstring ), <S2SV_ModStart>",0
1298,"<S2SV_ModStart> ) snprintf ( buf, sizeof ( buf ) <S2SV_ModEnd>, ""echo <S2SV_blank> %s, <S2SV_blank> id <S2SV_blank> %u, <S2SV_blank> seq <S2SV_blank> %u"", <S2SV_ModStart> ) snprintf ( buf, sizeof ( buf ), ""reply <S2SV_blank> %u, <S2SV_blank> type <S2SV_blank> %u"", dp -> icmp_type, dp -> icmp_seq, dp -> icmp_code, ext_dp -> icmp_mpls_ext_object_header [ ext_dp -> icmp_mpls_ext_object_header [ ext_dp -> icmp_mpls_ext_object_header [ ext_dp -> icmp_mpls_ext_object_header [ ext_dp -> icmp_mpls_ext_object_header [ ext_dp -> icmp_type ], ext_dp -> icmp_mpls_ext_object_header [ ext_dp -> icmp_mpls_ext_object_header [ ext_dp -> icmp_mpls_ext_object_header [ ext_dp -> icmp_mpls_ext_object_header [ ext_dp -> icmp_ext_object_header [ ext_dp -> icmp_ext_object_header [ ext_dp -> i",0
1299,"<S2SV_ModStart> flags ) { <S2SV_ModEnd> int dir_has_key, <S2SV_ModStart> 0 ; } <S2SV_ModEnd> spin_lock ( & <S2SV_ModStart> d_lock ) ; <S2SV_ModEnd> dir_has_key = ( <S2SV_ModStart> dir_has_key = ( ci <S2SV_ModEnd>!= NULL )",0
1300,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ; CRYPTO_THREAD_write_lock ( stunnel_locks [ LOCK_SECTIONS ] ) ; opt = service_options. next ; service_options. next = NULL ; service_free ( & service_options ) ; while ( opt ) { unsigned i ; s_log ( LOG_DEBUG, ""Unbinding <S2SV_blank> service <S2SV_blank> [%s] <S2SV_blank> closed"", opt -> servname ) ; if ( opt -> ctx ) SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; s_log ( LOG_DEBUG, ""Service <S2SV_blank> [%s] <S2SV_blank> closed"", opt -> servname ) ; s_log ( LOG_DEBUG, ""Service <S2SV_blank> [%s] <S2SV_blank> closed"", opt -> servname ) ; SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; s_log ( LOG_DEBUG, ""Service <S2SV_blank> [%s] <S2SV_blank> closed"", opt -> servname ) ; service_free ( & service_options )",0
1301,"<S2SV_ModStart> ARCHIVE_WARN ; } if ( argc >= sizeof ( numbers ) ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } <S2SV_ModStart> p ) ; if ( argc >= sizeof ( numbers ) ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } <S2SV_ModStart> ( argc > MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } } if ( argc < 2 ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Not <S2SV_blank> enough <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } result = ( * pack ) ( argc, numbers, & error ) ; if ( error!= NULL ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""%s"", error ) ; return ARCHIVE_WARN",0
1302,<S2SV_ModStart> parent ) ; if ( i -> width > i -> parent -> width ) i -> parent -> width = i -> parent -> width ; if ( i -> height > i -> parent -> height ) i -> parent -> height = i -> parent -> height ; context. curX = i -> posX ; if ( i -> width > i -> parent -> width ) i -> parent -> width = i -> parent -> width ; if ( i -> height > i -> parent -> height ) i -> parent -> height = i -> height ; if ( i -> width > i -> parent -> width ) i -> parent -> width = i -> parent -> width ; if ( i -> height > i -> parent -> height ) i -> parent -> height = i -> parent -> height ; context. frbuff_p. p32 = i -> parent -> frbuff. p32 + ( u32 ) i -> posY * i -> parent -> width ; context. frbuff_p. p32 = i -> parent -> frbuff. p32 + ( u32 ) i -> posY * i -> parent -> width ; context. frbuff_p. p32 = i -> parent -> frbuff,0
1303,"<S2SV_ModStart> n ) ; if ( p + l > buf + n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length <S2SV_blank> encoding <S2SV_blank> l=%u <S2SV_blank> n=%u)"", l, ( unsigned ) n ) ; goto error ; } <S2SV_ModStart> break ; case MINISSDPD_SEARCH_ALL : rp = rbuf ; CODELENGTH ( ( sizeof ( MINISSDPD_VERSION ) - 1 ), rp ) ; memcpy ( rp, MINISSDPD_SEARCH_ALL, sizeof ( MINISSDPD_SEARCH_ALL ) ) ; rp += ( sizeof ( MINISSDPD_SEARCH_ALL ) - 1 ) ; rp += ( sizeof ( MINISSDPD_SEARCH_ALL ) - 1 ) ; break ; case MINISSDPD_NOTIF : rp = rbuf ; CODELENGTH ( ( sizeof ( MINISSDPD_VERSION ) - 1 ), rp ) ; rp += ( sizeof ( MINISSDPD_VERSION ) - 1 ) ; rp += ( sizeof ( MINISSDPD_VERSION ) - 1 ) ; rp += ( sizeof ( MINISSDPD_VERSION ) - 1 ) ; rp += ( sizeof ( MINISSDPD_VERSION ) - 1 ) ;",0
1304,"<S2SV_ModStart> RAnalOp next_op ; memset ( & next_op, 0, sizeof ( next_op ) )",0
1305,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [",0
1306,<S2SV_ModStart> void ) { if (! recovery_started ) { recovery_started = 1 ; },0
1307,"<S2SV_ModStart> ( interface, ENC624J600_EHT1, hashTable [ 0 ] ) ; enc624j600WriteReg ( interface, ENC624J600_EHT2, hashTable [ 1 ] ) ; enc624j600WriteReg ( interface, ENC624J600_EHT3, hashTable [ 2 ] ) ; enc624j600WriteReg ( interface, ENC624J600_EHT4, hashTable [ 3 ] ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT5 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT6 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT7 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT8 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT9 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT10 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J",0
1308,"<S2SV_ModStart> packets ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1309,"<S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read(): <S2SV_blank> %d"", req -> socket, n ) ;",0
1310,<S2SV_ModStart> i ; WORD32 st_rps_idx <S2SV_ModEnd> ; WORD32 num_neg_pics <S2SV_ModStart> st_rps_idx ) { ps_dpb_mgr -> ai4_num_st_curr_before [ i ] = 0 ; ps_dpb_mgr -> ai4_num_st_curr_after [ i ] = 0 ; ps_dpb_mgr -> ai4_num_lt_curr [ i ] = 0 ; ps_dpb_mgr -> ai4_num_st_curr_before [ i ] = 0 ; ps_dpb_mgr -> ai4_num_st_curr_before [ i ] = 0 ; ps_dpb_mgr -> ai4_num_st_curr_after [ i ] = 0 ; ps_dpb_mgr -> ai4_num_st_curr_before [ i ] = 0 ; ps_dpb_mgr -> ai4_num_lt_curr [ i ] = 0 ; ps_dpb_mgr -> ai4_num_st_curr_after [ i ] = 0 ; ps_dpb_mgr -> ai4_num_st_curr_after [ i ] =,0
1311,"<S2SV_ModStart> PTRACE_GET_THREAD_AREA : if ( ptrace_test_thread_area ( child ) ) ret = put_user ( ptrace_get_thread_area ( child ) -> tp_value, datap ) ; else ret = <S2SV_ModEnd> 0 ; break <S2SV_ModStart> PTRACE_SET_THREAD_AREA : if ( ptrace_test_thread_area ( child ) ) ret = put_user ( ptrace_get_thread_area ( child ) -> tp_value, datap ) ; else ret = <S2SV_ModEnd> 0 ; break",0
1312,"<S2SV_ModStart> goto fail ; } temp = drm_malloc_ab ( temp_size, 1 ) ; if (! temp ) { DRM_ERROR ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> storage <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> in <S2SV_blank> bin/render <S2SV_blank> CLs.\\n"" ) ; ret = - ENOMEM ; goto fail ; }",0
1313,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> print_object ( cJSON <S2SV_ModStart> 0 ; while ( child ) { ++ numentries ; child = child -> next ; } if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; memset ( entries, 0, sizeof ( char * ) * numentries ) ; memset ( names, 0, sizeof ( char * ) * numentries ) ; memset ( entries, 0, sizeof ( char * ) * numentries ) ; memset ( names, 0, sizeof ( char * ) * numentries ) ; child = child -> next ; } if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; memset ( entries, 0, sizeof ( char * ) * numentries ) ; memset ( names, 0, sizeof ( char * ) * numentries ) ; memset ( names, 0, sizeof ( char * ) * numentries ) ; memset ( names, 0, sizeof ( char * ) * numentries ) ; memset ( entries, 0",0
1314,"<S2SV_ModStart> int tagval, uint32 <S2SV_ModEnd> * length )",1
1315,"<S2SV_ModStart> ; other = rcu_dereference_protected ( sk -> sk_omem_alloc, sock_owned_by_user ( sk ) ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if ( unix_peer_wake_queue_full ( other ) <S2SV_ModEnd> ) writable = <S2SV_ModStart> 0 ; } <S2SV_ModEnd> sock_put ( other",0
1316,<S2SV_ModStart> 4 ] ; size_t <S2SV_ModEnd> value ; if <S2SV_ModStart> ( size_t ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 ; value |= buffer [ 1 ] << 16 ; value |= buffer [ 2 ] << 8 ; value |= buffer [ 3 ] ; value |= buffer [ 0 ] <S2SV_ModEnd> ; value |= <S2SV_ModStart> ] << 24 ; value |= buffer [ 1 ] << 16 ; value |= buffer [ 2 ] << 8 ; value |= buffer [ 3 ] <S2SV_ModEnd> ; quantum. <S2SV_ModStart> unsigned_value = ( value & 0xffffffff <S2SV_ModEnd> ) ; return,0
1317,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> w, h ) ; sendClean ( outputbuffer ) ;",0
1318,<S2SV_ModStart> void exit_io_context ( struct task_struct * task <S2SV_ModEnd> ) { struct <S2SV_ModStart> * ioc ; mutex_lock <S2SV_ModEnd> ( current ) <S2SV_ModStart> ; ioc = task <S2SV_ModEnd> -> io_context ; <S2SV_ModStart> -> io_context ; mutex_unlock <S2SV_ModEnd> ( current ) <S2SV_ModStart> ; task_unlock ( task <S2SV_ModEnd> ) ; if,0
1319,"<S2SV_ModStart> = 0 ; if ( xtregs -> cp0 & XTREGS_CP0_BITMASK ) { ret |= __copy_from_user ( & ti -> xtregs_cp, & xtregs -> cp0, sizeof ( xtregs_coprocessor_t ) ) ; } else { ret |= __copy_from_user ( & ti -> xtregs_cp, & xtregs -> cp0, sizeof ( xtregs_coprocessor_t ) ) ; }",0
1320,<S2SV_ModStart> 0 ) { if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } <S2SV_ModStart> ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE <S2SV_ModEnd> ; return GSS_S_DEFECTIVE_TOKEN <S2SV_ModStart> ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE <S2SV_ModEnd> ; return GSS_S_DEFECTIVE_TOKEN <S2SV_ModStart> ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE <S2SV_ModEnd> ; return GSS_S_DEFECTIVE_TOKEN <S2SV_ModStart> ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE <S2SV_ModEnd> ; return GSS_S_DEFECTIVE_TOKEN <S2SV_ModStart> ; } if ( trailer -> buffer. length,0
1321,"<S2SV_ModStart> data ) { u64 val ; <S2SV_ModStart> int ret ; val = xen_pcibk_read_config_dword ( dev, offset, & val, data ) ; if ( ret ) return ret <S2SV_ModEnd> ; if ( <S2SV_ModStart> & IORESOURCE_IO ) * value |= PCI_COMMAND_IO ; if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; if ( dev -> resource [ i ]. flags & IORESOURCE_PREFETCH ) * value |= PCI_COMMAND_PREFETCH ; if ( dev -> resource [ i ]. flags & IORESOURCE_PREFETCH ) * value |= PCI_COMMAND_PREFETCH ; if ( dev -> resource [ i ]. flags & IORESOURCE_PREFETCH ) * value |= PCI_COMMAND_PREFETCH ; if ( dev -> resource [ i ]. flags & IORESOURCE_PREFETCH ) * value |= PCI_COMMAND_PREFETCH ; if ( dev -> resource [ i ]. flags & IORESOURCE_PREFETCH ) * value |= PCI_COMMAND_PRE",0
1322,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> args ) { vpx_ref_frame_t * frame = va_arg ( args, vp9_ref_frame_t * ) ; if ( frame == NULL ) { return VPX_CODEC_INVALID_PARAM ; } <S2SV_ModEnd> if ( frame <S2SV_ModStart> NULL ) { YV12_BUFFER_CONFIG <S2SV_ModEnd> * fb ; <S2SV_ModStart> YV12_BUFFER_CONFIG * fb ; yuvconfig2image ( & frame -> img, fb, NULL ) ; return VPX_CODEC_OK ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1323,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1324,"<S2SV_ModStart> plug ) ; if ( unlikely (! capable ( CAP_SYS_RAWIO ) ) ) { pr_debug ( ""EINVAL: <S2SV_blank> io_submit: <S2SV_blank> invalid <S2SV_blank> context <S2SV_blank> id\\n"" ) ; return - EINVAL ; } <S2SV_ModStart> & batch ) ; if ( unlikely (! capable ( CAP_SYS_RAWIO ) ) ) { pr_debug ( ""EINVAL: <S2SV_blank> io_submit: <S2SV_blank> invalid <S2SV_blank> context <S2SV_blank> id\\n"" ) ; return - EINVAL ; } <S2SV_ModEnd> put_ioctx ( ctx",0
1325,<S2SV_ModStart> -> dwc ; spinlock ( & req -> lock ) ; <S2SV_ModStart> lock ) ; <S2SV_ModEnd> pm_runtime_put ( dwc <S2SV_ModStart> lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1326,<S2SV_ModStart> } # endif # if defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) && defined ( __GNUC__ ) &&,0
1327,"<S2SV_ModStart> = sas_revalidate_domain, <S2SV_ModEnd> [ DISCE_PROBE ] <S2SV_ModStart> DISCE_SUSPEND ] = sas_suspend_devices, <S2SV_ModEnd> [ DISCE_RESUME ] <S2SV_ModStart> DISCE_DESTRUCT ] = sas_destruct_devices <S2SV_ModEnd>, } ;",0
1328,"<S2SV_ModStart> int rep_quick ) { <S2SV_ModEnd> DBUG_ENTER ( ""mi_repair_by_sort"" <S2SV_ModStart> (! rep_quick && init_io_cache ( & info -> read_cache, info -> dfile, ( uint ) param -> read_buffer_length, READ_CACHE, share -> pack. header_length, 1, MYF ( MY_WME ) ) || (! rep_quick && init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, WRITE_CACHE, share -> pack. header_length, 1, MYF ( MY_WME ) ) ) || init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, WRITE_CACHE, share -> pack. header_length, 1, MYF ( MY_WME ) ) || (! rep_quick && init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, WRITE_CACHE, share -> pack. header_length, 1, MYF ( MY_WME )",0
1329,"<S2SV_ModStart> } ; # if uECC_VLI_NATIVE_LITTLE_ENDIAN uECC_word_t * p = ( uECC_word_t * ) signature ; # else uECC_word_t carry ; wordcount_t num_words = curve -> num_words ; bitcount_t num_n_words = BITS_TO_WORDS ( curve -> num_n_bits ) ; bitcount_t num_n_bits = curve -> num_n_bits ; if ( uECC_vli_isZero ( p, num_words ) ) { return 0 ; } carry = regularize_k ( k, tmp, s, curve ) ; if (! g_rng_function ) { uECC_generate_random_int ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! g_rng_function ) { uECC_generate_random_int ( tmp, num_n_words ) ; tmp [ 0 ] = 1 ; } else if (! uECC_generate_random_int ( tmp, num_n_words ) ) { return 0",0
1330,"<S2SV_ModStart> ; trunc : if (! ND_TTEST2 ( * bp, ND_DAOACK_TRUNC_LEN ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|dao-truncated]"" ) ) ; goto trunc ; } <S2SV_ModStart> ; tooshort : if (! ND_TTEST2 ( * bp, ND_DAOACK_TRUNC_LEN ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|dao-truncated]"" ) ) ; goto trunc ; } <S2SV_ModStart> : if (! ND_TTEST2 ( * bp, ND_DAOACK_TRUNC_LEN ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|dao-truncated]"" ) ) ; goto trunc ; }",0
1331,<S2SV_ModStart> ; int err ; struct ip_conn_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1332,<S2SV_ModStart> ; flags = EXT4_GET_BLOCKS_CREATE_UNWRIT_EXT <S2SV_ModEnd> | EXT4_GET_BLOCKS_CONVERT_UNWRITTEN | <S2SV_ModStart> | EXT4_EX_NOCACHE ; mutex_lock ( & EXT4_I ( inode ) -> i_mmap_mutex ) ; <S2SV_ModStart> | EXT4_GET_BLOCKS_KEEP_SIZE ; mutex_unlock ( & EXT4_I ( inode ) -> i_mmap_mutex ) ;,0
1333,"<S2SV_ModStart> ; } else { size_t new_free_total = pool -> free_total * 2 ; void * new_arr ; if ( new_arr ) { pool -> free_total = new_free_total * sizeof ( nw_buf * ) ; new_arr = realloc ( pool -> free_arr, new_free_total * sizeof ( nw_buf * ) ) ; new_arr = free ( pool -> free_arr, new_free_total * sizeof ( nw_buf * ) ) ; new_arr = realloc ( pool -> free_arr, new_free_total * sizeof ( nw_buf * ) ) ; if ( new_arr ) { pool -> free_total = new_free_total * sizeof ( nw_buf * ) ; new_arr = realloc ( pool -> free_arr, new_free_total * sizeof ( nw_buf * ) ) ; } else { free ( buf ) ; } }",0
1334,"<S2SV_ModStart> map, true, f -> st_ino <S2SV_ModStart> map, true, f -> st_ino <S2SV_ModStart> map, true, f -> st_ino <S2SV_ModStart> map, true, f -> st_ino <S2SV_ModStart> map, true, f -> st_ino",0
1335,"<S2SV_ModStart> tp ) { <S2SV_ModEnd> int cval = <S2SV_ModStart> 2 ] ) { <S2SV_ModEnd> NEARDATA const char <S2SV_ModStart> = ""00112233445566778899aAbBcCdDeEfF"" ; const <S2SV_ModStart> * dp ; if ( * cp == 'x' || * cp == 'X' ) for ( ++ cp ; * cp && ( dp = index ( hex, * cp ) ) && ( dcount ++ < 2 ) ; cp ++ ) cval = ( cval * 16 ) + ( dp - hex ) / 2 ) ; else if ( * cp == 'o' || * cp == 'O' ) for ( ++ cp ; * cp && ( index ( ""01234567"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 8 ) + ( * cp - '0' ) ; else for ( ; * cp && ( index ( ""0123456789"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 10 ) + ( * cp - '0' ) ; else for ( ; * cp && ( index ( ""0123456789"", * cp ) ) && ( dcount ++",0
1336,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1337,"<S2SV_ModStart> ; if ( size_left < sizeof ( ipfix_template_elements_std_t ) ) { LogError ( ""Process_ipfix: <S2SV_blank> Bad <S2SV_blank> Template <S2SV_blank> size <S2SV_blank> at <S2SV_blank> %s <S2SV_blank> line <S2SV_blank> %u"", exporter -> info. id, __FILE__, __LINE__, strerror ( errno ) ) ; size_left = 0 ; continue ; } size_required = sizeof ( ipfix_template_elements_std_t ) ; if ( size_left < 4 ) { LogError ( ""Process_ipfix: <S2SV_blank> Bad <S2SV_blank> Template <S2SV_blank> size <S2SV_blank> at <S2SV_blank> %s <S2SV_blank> line <S2SV_blank> %u"", exporter -> info. id, __FILE__, __LINE__, strerror ( errno ) ) ; size_left = 0 ; continue ; } if ( size_left < sizeof ( ipfix_template_elements_std_t ) ) { LogError ( ""Process_ipfix: <S2SV_blank> Bad <S2SV_blank> Template <S2SV_blank> size <S2SV_blank> at <S2SV_blank> %s <S2SV_blank> line <S2SV_blank> %u"", exporter -> info. id, __FILE__, __LINE__, strerror ( errno ) ) ; size_left = 0 ; continue ; }",0
1338,"<S2SV_ModStart> * lined ; PIX * pixc, * pixm, * pixg, * pixd ; PROCNAME ( ""pixFewColorsOctcubeQuantMixed"" ) ; if ( pixs == NULL ) return ( PIX * ) ERROR_PTR ( ""pixs <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 32 <S2SV_blank> bpp"", procName, NULL ) ; if ( pixGetDepth ( pixs )!= 32 ) return ( PIX * ) ERROR_PTR ( ""pixs <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 32 <S2SV_blank> bpp"", procName, NULL ) ; if ( pixGetDepth ( pixs )!= 32 ) return ( PIX * ) ERROR_PTR ( ""pixs <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 32 <S2SV_blank> bpp"", procName, NULL ) ; if ( pixs == NULL ) return ( PIX * ) ERROR_PTR ( ""pixs <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 32 <S2SV_blank> bpp"", procName, NULL ) ; if ( pixGetDepth ( pixs )!= 32 ) return ( PIX * ) ERROR_PTR ( ""pixs <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 32 <S2SV_blank> bpp"", procName, NULL ) ;",0
1339,<S2SV_ModStart> goto err ; if ( BN_num_bits ( u ) > BN_num_bits ( v ) ) goto err ; if ( BN_num_bits ( c ) > BN_num_bits ( u ) ) goto err ; if ( BN_num_bits ( c ) > BN_num_bits ( v ) ) goto err ; if ( BN_num_bits ( c ) > BN_num_bits ( u ) ) goto err ; if ( BN_num_bits ( c ) > BN_num_bits ( v ) ) goto err ; if ( BN_num_bits ( c ) > BN_num_bits ( c ) ) goto err ; if ( BN_num_bits ( c ) > BN_num_bits ( v ) ) goto err ; if ( BN_num_bits ( c ) > BN_num_bits ( c ) ) goto err ; if ( BN_num_bits ( c ) > BN_num_bits ( c ) ) goto err ; if ( BN_num_bits ( c ) > BN_num_bits ( c ) ) goto err,0
1340,<S2SV_ModStart> vf = vp8_mse16x16 <S2SV_ModEnd> ; xd -> <S2SV_ModStart> = vp8_mse16x16 ; if ( tmp_err < INT_MAX ) { * best_motion_err = tmp_err ; * best_motion_err = tmp_err ; * best_motion_err = INT_MAX ; * best_motion_err = INT_MAX ; * best_motion_err = INT_MAX ; * best_motion_err = tmp_err ; * best_motion_err = INT_MAX ; },0
1341,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
1342,<S2SV_ModStart> = alloc ; size_t <S2SV_ModEnd> strindex = 0,1
1343,"<S2SV_ModStart>, nbits ; int bit ; <S2SV_ModStart> qfalse ; } bit <S2SV_ModEnd> = 0 ; <S2SV_ModStart> & 7 ) { bit <S2SV_ModEnd> = bits & <S2SV_ModStart> & 7 ; for ( i = 0 ; i < nbits ; i ++ ) { value |= ( Huff_getBit ( msg -> data, & msg -> bit ) << ( i + nbits ) ) ; } bits = bits - nbits ; } if ( bits ) { for ( i = 0 ; i < bits ; i ++ ) { value |= ( Huff_getBit ( msg -> data, & msg -> bit ) << ( i + nbits ) ) ; } bits = bits & 7 ; for ( i = 0 ; i < bits ; i ++ ) { value |= ( Huff_getBit ( msg -> data, & msg -> bit ) << i ) ; } bits = bits - nbits ; } if ( bits ) { for ( i = 0 ; i < bits ; i += 8 ) { Huff_offsetReceive ( msgHuff. decompressor. tree, & get, msg -> data, & msg -> bit ) ; value |= ( get << ( i + nbits ) ) ; } } <S2SV_ModEnd> msg -> readcount",0
1344,"<S2SV_ModStart> int idx ; struct snd_ctl_elem_id id ; <S2SV_ModStart> -> count ; if ( snd_ctl_find_id ( card, & id ) ) { up_write ( & card -> controls_rwsem ) ; dev_err ( card -> dev, ""control <S2SV_blank> %i:%i:%i:%s:%i <S2SV_blank> is <S2SV_blank> already <S2SV_blank> present\\n"", id. iface, id. device, id. subdevice, id. name, id. index ) ; err = - EBUSY ; goto error ; } if ( snd_ctl_find_id ( card, & id ) ) { up_write ( & card -> controls_rwsem ) ; dev_err ( card -> dev, ""control <S2SV_blank> %i:%i:%i:%i:%s:%i <S2SV_blank> is <S2SV_blank> already <S2SV_blank> present\\n"", id. iface, id. device, id. subdevice, id. name, id. index ) ; err = - EBUSY ; goto error ; } if ( snd_ctl_find_hole ( card, kcontrol -> count ) < 0 ) { up_write ( & card -> controls_rwsem ) ; card -> last_numid += kcontrol -> count ;",0
1345,<S2SV_ModStart> NETIF_MSG_LINK ) ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; if ( dev -> priv_flags & IFF_TX_SKB_SHARING ) dev -> priv_flags |= IFF_TX_SKB_SHARING ; if ( dev -> priv_flags & IFF_TX_SKB_SHARING ) dev -> priv_flags |= IFF_TX_SKB_SHARING ; if ( dev -> priv_flags & IFF_TX_SKB_SHARING ) dev -> priv_flags |= IFF_TX_SKB_SHARING ; if ( dev -> priv_flags & IFF_TX_SKB_SHARING ) dev -> priv_flags |= IFF_TX_SKB_SHARING ; if ( dev -> priv_flags & IFF_TX_SKB_SHARING ) dev -> priv_flags |= IFF_TX_SKB_SHARING ; if ( dev -> priv_flags & IFF_TX_SKB_SHARING ) dev -> priv_flags |= IFF_TX_SKB_SHAR,0
1346,"<S2SV_ModStart> char * data ; size_t <S2SV_ModEnd> size = overhead <S2SV_ModStart> + 4 + <S2SV_ModEnd> count + 1 <S2SV_ModStart> + 1 ; if ( size > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } mm = mongo_message_create ( size, 0, 0, MONGO_OP_INSERT ) ; data = & mm -> data ; if ( flags & MONGO_CONTINUE_ON_ERROR ) data = mongo_data_append32 ( data, & ZERO ) ; data = mongo_data_append ( data, & ZERO ) ; data = mongo_data_append ( data, ns, strlen ( ns ) + 1 ) ; data = mongo_data_append ( data, bsons [ i ] -> data, size ) ; if ( write_concern ) { if ( mongo_check_last_error ( conn, ns, write_concern ) == MONGO_ERROR ) {",0
1347,<S2SV_ModStart> ( textview ) ; gtk_text_view_set_text_view_width ( textview ) ; gtk_text_view_set_text_view_height ( textview ) ;,0
1348,<S2SV_ModStart> - 2 ; if ( plen < 2 ) return plen ;,0
1349,"<S2SV_ModStart> { umode_t mode ; retval = posix_acl_update_mode ( inode <S2SV_ModEnd>, & mode <S2SV_ModStart> err_out ; } <S2SV_ModEnd> break ; case <S2SV_ModStart> case ACL_TYPE_DEFAULT_READ : retval = v9fs_vfs_setattr_dotl ( dentry, & iattr ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> case ACL_TYPE_DEFAULT_WRITE : retval = v9fs_vfs_setattr_dotl ( dentry, & iattr ) ; <S2SV_ModEnd> break ; case <S2SV_ModStart> err_out ; case ACL_TYPE_EXEC_FILE : retval = v9fs_vfs_setattr_dotl ( dentry, & iattr ) ; break ; case ACL_TYPE_EXEC_READ : retval = v9fs_vfs_setattr_dotl ( dentry, & iattr ) ; break ; case ACL_TYPE_EXEC_READ : retval = v9fs_vfs_setattr_dotl ( dentry, & iattr ) ; break ; case ACL_TYPE_EXEC_FILE : retval = v9fs_vfs_setattr_dotl ( dentry, & iattr ) ; break ; case ACL_TYPE_EXEC",0
1350,"<S2SV_ModStart> ; if ( bin -> header. class_size > UT32_MAX || bin -> header. class_size > UT32_MAX ) { eprintf ( ""Invalid <S2SV_blank> class <S2SV_blank> size\\n"" ) ; return false ; } <S2SV_ModStart> ; if ( bin -> header. class_size > UT32_MAX || bin -> header. class_size > UT32_MAX || bin -> header. class_size < 0 ) { eprintf ( ""Invalid <S2SV_blank> class <S2SV_blank> size\\n"" ) ; return false ; } <S2SV_ModStart> ; if ( bin -> header. class_size > UT32_MAX || bin -> header. class_size < 0 ) { eprintf ( ""Invalid <S2SV_blank> class <S2SV_blank> size\\n"" ) ; return false ; } <S2SV_ModStart> ; if ( bin -> header. class_size > UT32_MAX || bin -> header. class_size > UT32_MAX || bin -> header. class_size < 0 ) { eprintf ( ""Invalid <S2SV_blank> class <S2SV_blank> size\\n"" ) ; return false ; } if ( bin -> header. class_size > UT32_MAX || bin -> header. class_size < 0 ) { eprintf ( ""Invalid <S2SV_blank> class <S2SV_blank> size\\n"" ) ; return",0
1351,<S2SV_ModStart> case NPPVpluginDescriptionString : type = RPC_TYPE_STRING ; break ; case <S2SV_ModStart> case NPPVformValue : type = RPC_TYPE_STRING ; break ; case NPPVpluginWindowSize : type = RPC_TYPE_INT32 ; break ; case NPPVpluginTransparentBool : type = RPC_TYPE_BOOLEAN ; break ; case NPPVjavascriptPushCallerBool : type = RPC_TYPE_BOOLEAN ; break ; case NPPVkeepLibraryInMemory : type = RPC_TYPE_BOOLEAN ; break ; case NPPVpluginWindowBool : type = RPC_TYPE_INT32 ; break ; case NPPVpluginTransparentBool : type = RPC_TYPE_BOOLEAN ; break ; case NPPVjavascriptPushCallerBool : type = RPC_TYPE_BOOLEAN ; break ; case NPPVpluginKeepLibraryInMemory : type = RPC_TYPE_BOOLEAN ; break ;,0
1352,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> state = NEGO_STATE_FAIL <S2SV_ModEnd> ; return ; <S2SV_ModStart> = NEGO_STATE_FINAL ; return ;,0
1353,"<S2SV_ModStart> int i, target_bits_per_mb ; const double correction_factor = get_rate_correction_factor ( cpi ) ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; i = active_best_quality ; do { const int bits_per_mb_at_this_q = ( int ) vp9_rc_bits_per_mb ( cm -> frame_type, i, correction_factor ) ; if ( bits_per_mb_at_this_q <= target_bits_per_mb ) { if ( ( target_bits_per_mb - bits_per_mb_at_this_q ) <= last_error ) { last_error = bits_per_mb_at_this_q - target_bits_per_mb ; break ; } else { last_error = bits_per_mb_at_this_q -",0
1354,"<S2SV_ModStart> |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ ; tja1101WritePhyReg ( interface, TJA1101_CONFIG1, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_EXTENDED_CTRL ) ; value |= TJA1101_EXTENDED_CTRL_CONFIG_EN ; tja1101WritePhyReg ( interface, TJA1101_EXTENDED_CTRL, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_EXTENDED_CTRL ) ; value |= TJA1101_EXTENDED_CTRL_CONFIG_EN ; tja1101WritePhyReg ( interface, TJA1101_EXTENDED_CTRL, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_EXTENDED_CTRL ) ; value |= TJA1101_EXTENDED_CTRL_CONFIG_EN ; tja1101WritePhyReg ( interface, TJA1101_EXTENDED_CTRL",0
1355,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
1356,<S2SV_ModStart> data ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1357,"<S2SV_ModStart> ; i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD (",0
1358,"<S2SV_ModStart> int dst_stride, PREDICTION_MODE <S2SV_ModEnd> mode, TX_SIZE <S2SV_ModStart> TX_SIZE tx_size, int up_available, int left_available, int right_available, int plane ) { int i ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, left_col, 64 ) ; DECLARE_ALIGNED_ARRAY ( 16, uint8_t, above_data, 128 + 16 ) ; const uint8_t * const_above_row = above_data + 16 ; const int bs = 4 << pd -> subsampling_y ; frame_width = xd -> cur_buf -> y_width ; frame_height = xd -> cur_buf -> y_height ; } else { frame_width = xd -> cur_buf -> uv_width ; frame_height = xd -> cur_buf -> uv_height ; } <S2SV_ModStart> + y ; memset <S2SV_ModEnd> ( left_col, <S2SV_ModStart> + x ; memset <S2SV_ModEnd> ( left_col, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( left_col, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( left_col, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> ( left_col, <S2SV_ModStart> + bs ; memset <S2SV_ModEnd> (",0
1359,"<S2SV_ModStart> } else { if ( end == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; } <S2SV_ModStart> } else { if ( end == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; } <S2SV_ModStart> } else { if ( end == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; } } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> invalid <S2SV_blank> end <S2SV_blank> of <S2SV_blank> pattern\\n"" ) ; goto error ; }",0
1360,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> jas_iccprof_t <S2SV_ModEnd> * jas_iccprof_createfrombuf (,0
1361,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_completed_io_lock ) ; <S2SV_ModStart> cur_aio_dio = NULL ; ei -> i_sync_tid = 0 ; ei -> i_datasync_tid = 0 ; return & ei -> vfs_inode <S2SV_ModEnd> ; } <S2SV_null>,0
1362,"<S2SV_ModStart> (! thresholds ) ; usage = mem_cgroup_usage ( memcg, type == _MEM ) ; __mem_cgroup_threshold ( memcg, type == _MEM ) ; __mem_cgroup_threshold ( memcg, type == _MEMSWAP ) ; size = 0 ; for ( i = 0 ; i < thresholds -> primary -> size ; i ++ ) { if ( thresholds -> primary -> entries [ i ]. eventfd!= eventfd ) size ++ ; } new -> entries [ j ] = thresholds -> primary -> entries [ i ] ; if ( new -> entries [ j ]. threshold < usage ) { ++ new -> current_threshold ; } j ++ ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1363,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct ion_handle * <S2SV_ModStart> lock ) ; mutex_lock ( & client -> lock ) ; handle = ion_handle_get_by_id_nolock ( client, id <S2SV_ModEnd> ) ; mutex_unlock <S2SV_ModStart> lock ) ; mutex_unlock ( & client -> lock ) ;",0
1364,"<S2SV_ModStart> * cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; } } vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
1365,"<S2SV_ModStart> parsetime_error ) { strcpy <S2SV_ModEnd> ( parsetime_error, <S2SV_ModStart> parsetime_error ) ; strcpy <S2SV_ModEnd> ( parsetime_error, <S2SV_ModStart> parsetime_error ) ; strcpy <S2SV_ModEnd> ( parsetime_error, <S2SV_ModStart> parsetime_error ) ; strcpy <S2SV_ModEnd> ( parsetime_error, <S2SV_ModStart> parsetime_error ) ; strcpy <S2SV_ModEnd> ( parsetime_error, <S2SV_ModStart> parsetime_error ) ; strcpy <S2SV_ModEnd> ( parsetime_error, <S2SV_ModStart> parsetime_error, ""%s"", parsetime_error ) ; strcpy <S2SV_ModEnd> ( parsetime_error, <S2SV_ModStart> parsetime_error ) ; strcpy <S2SV_ModEnd> ( parsetime_error, <S2SV_ModStart> parsetime_error ) ; strcpy <S2SV_ModEnd> ( parsetime_error, <S2SV_ModStart> parsetime_error ) ; strcpy <S2SV_ModEnd> ( parsetime_error, <S2SV_ModStart> parsetime_error ) ; strcpy <S2SV_ModEnd> ( parsetime_error, <S2SV_ModStart> parsetime_error ) ; strcpy <S2SV_ModEnd> ( parsetime_error, <S2SV_ModStart> parsetime_error ) ; strcpy ( parsetime_",0
1366,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context ->,0
1367,"<S2SV_ModStart> ; if ( asdl_typename_is_keyword_only ( c, CHILD ( n, i ) ) ) { asdl_seq_SET ( kwonlyargs, j ++, NULL ) ; goto error ; } <S2SV_ModStart> ; if ( asdl_typename_is_keyword_only ( c, CHILD ( n, i ) ) ) { asdl_seq_SET ( kwonlyargs, j ++, NULL ) ; goto error ; } i += 1 ; if ( asdl_typename_is_keyword_only ( c, CHILD ( n, i ) ) ) { asdl_seq_SET ( kwonlyargs, j ++, NULL ) ; goto error ; } <S2SV_ModStart> ; if ( asdl_typename_is_keyword_only ( c, CHILD ( n, i ) ) ) { asdl_seq_SET ( kwonlyargs, j ++, NULL ) ; goto error ; } i += 1 ; if ( asdl_typename_is_keyword_only ( c, CHILD ( n, i ) ) ) { asdl_seq_SET ( kwonlyargs, j ++, NULL ) ; goto error ; }",0
1368,<S2SV_ModStart> KEY_FRAME ) { memset <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd ->,0
1369,"<S2SV_ModStart> error ; uint16_t n <S2SV_ModEnd> ; uint32_t status <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModEnd> ) { enc624j600WriteReg <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & n, sizeof ( uint16_t ) ) ; n = letoh16 ( n ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & n, sizeof ( uint16_t ) ) ; n = letoh16 ( n ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & n, sizeof ( uint16_t ) ) ; n = letoh16 ( n ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & n, sizeof (",0
1370,<S2SV_ModStart> == 0x01 ) { if ( i >= gemsafe_cert_max ) { r = gemsafe_get_cert_len_nolock ( card ) ; if ( r < 0 ) { r = gemsafe_get_cert_len_nolock ( card ) ; if ( r < 0 ) { r = gemsafe_get_cert_len_nolock ( card ) ; if ( r < 0 ) { r = gemsafe_get_cert_len_nolock ( card ) ; if ( r < 0 ) { r = gemsafe_get_cert_len_nolock ( card ) ; if ( r < 0 ) { r = gemsafe_get_cert_len_nolock ( card ) ; if ( r < 0 ) { r = gemsafe_get_cert_len_nolock ( card ) ; if ( r < 0 ) { r = gemsafe_get_cert_len_nolock ( card ) ; if ( r < 0 ) { r = gemsafe_get_cert_len_nolock ( card ) ; if ( r < 0 ) { r = gemsafe_get_cert_len,0
1371,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
1372,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv, VALUE klass ) { VALUE content = rb_ary_new ( ) ; char * ptr = rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( ), ""content"" ) ), rb_const_get ( rb_const_get ( ) ), rb_const_get ( argv ) ) ) ; xmlSchemaParserCtxtPtr ctx = xmlSchemaNewMemParserCtxt ( rb_const_get ( rb_const_get ( ), rb_const_get ( ), rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( ), ""parser_context"" ) ) ) ) ; if ( NULL == ctx ) { xmlErrorPtr error = xmlGetLastError ( ) ; if ( error ) Nokogiri_error_raise ( NULL, error ) ; else rb_raise ( rb_eRuntimeError, ""Could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> document"" ) ; return Qnil ; } rb_iv_set ( rb_schema",0
1373,"<S2SV_ModStart> vma ) { <S2SV_ModEnd> unsigned long start <S2SV_ModStart>, off ; if ( fbdev -> fb_phys + fbdev -> fb_len > <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
1374,"<S2SV_ModStart> ] ) ) { if ( strlen ( errstr ) > CONFLINELEN - 3 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> number"" ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( errstr ) > CONFLINELEN - 3 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> string <S2SV_blank> length"" ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( errstr ) > CONFLINELEN - 3 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> string <S2SV_blank> length"" ) ; print_syntax ( ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( errstr ) > CONFLINELEN - 3 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> string <S2SV_blank> length"" ) ; print_syntax ( ) ; return 1 ; } if ( strlen ( errstr ) > CONFLINELEN - 3 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> string <S2SV_blank> length"" ) ; print_syntax ( ) ; return 1 ; }",0
1375,"<S2SV_ModStart> / 2 ] ; memcpy ( & out [ 3 ], ptr + 4, 4 ) ; <S2SV_ModStart> / 2 ] ; memcpy ( & out [ 4 ], ptr + 5 ) ; <S2SV_ModStart> / 2 ] ; memcpy ( & out [ 5 ], ptr + 6 ) ; <S2SV_ModStart> / 2 ] ; memcpy ( & out [ 6 ], ptr + 7 ) ; <S2SV_ModStart> / 2 ] ; memcpy ( & out [ 7 ], ptr + 6 ) ; memcpy ( & out [ 8 ], 16 ) ; memcpy ( & out [ 9 ], 16 ) ; memcpy ( & out [ 10 ], 16 ) ; memcpy ( & out [ 11 ], 16 ) ; memcpy ( & out [ 12 ], 16 ) ; memcpy ( & out [ 13 ], ptr + 7 ) ; memcpy ( & out [ 13 ], 16 ) ; memcpy ( & out [ 13 ], 16 ) ; memcpy ( & out [ 12 ], 16 ) ; memcpy ( & out [ 13 ], 16 ) ; memcpy ( & out [ 12 ], 16 ) ; memcpy ( & out [",0
1376,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
1377,"<S2SV_ModStart> 1 ) ; info = kmalloc ( sizeof ( * info ), GFP_KERNEL ) ; if (! info ) { cd_dbg ( CD_DO_IOCTL, ""cannot <S2SV_blank> allocate <S2SV_blank> cdrom_changer_info\\n"" ) ; return - ENOMEM ; } if (! info ) { cd_dbg ( CD_DO_IOCTL, ""cannot <S2SV_blank> allocate <S2SV_blank> cdrom_changer_info\\n"" ) ; return - EINVAL ; } info = kmalloc ( sizeof ( * info ), GFP_KERNEL ) ; if (! info ) { cdrom_dbg ( CD_DO_IOCTL, ""cannot <S2SV_blank> allocate <S2SV_blank> cdrom_changer_info\\n"" ) ; return - ENOMEM ; } ret = cdrom_read_mech_status ( cdi, info ) ; if (! ret ) ret = info -> slots [ arg ]. change ; kfree ( info ) ; return ret ; } <S2SV_ModEnd> ret = cdrom_read_mech_status",0
1378,"<S2SV_ModStart> ; err = - EBUSY ; if ( type == PACKET_FANOUT_ROLLOVER || ( type_flags & PACKET_FANOUT_FLAG_ROLLOVER ) ) { atomic_long_set ( & rollover -> num, 0 ) ; atomic_long_set ( & rollover -> num_huge, 0 ) ; atomic_long_set ( & rollover -> num_failed, 0 ) ; goto out ; } if ( type == PACKET_FANOUT_HASH : case PACKET_FANOUT_LB : case PACKET_FANOUT_CPU : case PACKET_FANOUT_RND : case PACKET_FANOUT_QM : rollover -> num_failed = 0 ; rollover -> num = 0 ; atomic_long_set ( & rollover -> num_huge, 0 ) ; atomic_long_set ( & rollover -> num_failed, 0 ) ; goto out ; } if ( type == PACKET_FANOUT_ROLLOVER || ( type_flags & PACKET_FANOUT_FLAG_ROLLOVER ) ) { err = - EINVAL ; goto out ; }",0
1379,<S2SV_ModStart> -> nmi ) { perf_event_wakeup ( handle -> event ) ; <S2SV_ModEnd> } else { <S2SV_ModStart> pending ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1380,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> utf8s_to_utf16s ( const <S2SV_ModStart> len > 0 ) { size = utf8_to_utf32 ( s, len, & u ) ; if ( size < 0 ) return size ; <S2SV_ModStart> -= PLANE_SIZE ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE",0
1381,"<S2SV_ModStart> int v, i ; if ( s -> state & PNG_PLTE ) return AVERROR_INVALIDDATA ; for ( i = 0 ; i < length / 2 ; i ++ ) { v = bytestream2_get_byte ( & s -> gb ) ; s -> palette [ i ] = ( s -> palette [ i ] & 0x00ffffff ) | ( v << 24 ) ; } } else if ( s -> color_type == PNG_COLOR_TYPE_RGB ) { if ( s -> state & PNG_PLTE ) return AVERROR_INVALIDDATA ; for ( i = 0 ; i < length / 2 ; i ++ ) { v = av_mod_uintp2 ( bytestream2_get_be16 ( & s -> gb ), s -> bit_depth ) ; if ( s -> bit_depth > 8 ) av_WB16 ( & s -> transparent_color_be [ 2 * i ], v ) ; else s -> transparent_color_be [ 2 * i ] = v ; }",0
1382,"<S2SV_ModStart> EPROTONOSUPPORT ) { <S2SV_ModEnd> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure""",0
1383,<S2SV_ModStart> ; } } if ( dt -> vlan_id [ 0 ] < 0 || dt -> vlan_id [ 1 ] < 0 || dt -> vlan_id [ 0 ] > UINT32_MAX / 2 || dt -> vlan_id [ 1 ] > UINT32_MAX / 2 || dt -> vlan_id [ 0 ] > UINT32_MAX / 2 || dt -> vlan_id [ 1 ] > UINT32_MAX / 2 || dt -> vlan_id [ 0 ] > UINT32_MAX / 2 || dt -> vlan_id [ 0 ] > UINT32_MAX / 2 || dt -> vlan_id [ 1 ] > UINT32_MAX / 2 || dt -> vlan_id [ 0 ] > UINT32_MAX / 2 || dt -> vlan_id [ 1 ] > UINT32_MAX / 2 || dt -> vlan_id [ 0 ] > UINT32_MAX / 2 || dt -> vlan_id [ 1 ] > UINT32_MAX / 2 || dt -> vlan_id [ 0 ] > UINT32_MAX / 2 || dt -> vlan_id [ 1 ] > UINT32_MAX / 2,0
1384,"<S2SV_ModStart> = ksz8851ReadReg ( interface, KSZ8851_RXFHSR ) ; if ( ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart>!= 0 ) { if ( ( status & ( RXFHSR_RXMR | RXFHSR_RXFTL | RXFHSR_RXRF | RXFHSR_RXCE ) ) == 0 ) { if ( ( status & ( RXFHSR_RXMR | RXFHSR_RXFTL | RXFHSR_RXFTL | RXFHSR_RXRF | RXFHSR_RXCE ) ) == 0 ) { if ( ( status & ( RXFHSR_RXMR | RXFHSR_RXFTL | RXFHSR_RXRF | RXFHSR_RXFTL | RXFHSR_RXRF | RXFHSR_RXCE ) ) == 0 ) { if ( ( status & ( RXFHSR_RX",0
1385,"<S2SV_ModStart> const node * n <S2SV_ModEnd>, asdl_seq * <S2SV_ModStart>, int is_async, string type_comment_comment <S2SV_ModEnd> ) { identifier <S2SV_ModStart>, type_comment, LINENO ( n ), n -> n_col_offset, c -> c_arena ) ; if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 2 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 3 ) ) ; if (! type_comment && NCH ( CHILD ( n, name_i + 3 ) ) > 1 ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 3 ), 1 ) ; body = ast_for_suite ( c, n, name_i + 3 ) ) ; if (! body ) return NULL ; if (! type_comment && NCH ( CHILD ( n, name_i + 3 ) ) > 1 ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 3",0
1386,"<S2SV_ModStart> int i ; if ( pgd_none_or_clear_bad ( pgd ) ) goto out ; pud = pud_offset ( pgd, 0xA0000 ) ; if ( pud_none_or_clear_bad ( pud ) ) goto out ; pmd = pmd_offset ( pmd, 0xA0000 ) ; split_huge_page_pmd ( mm, pmd ) ; if ( pmd_none_or_clear_bad ( pmd ) ) goto out ;",0
1387,"<S2SV_ModStart> - EINVAL ; error = aa_audit ( AUDIT_APPARMOR_DENIED, & sa, GFP_KERNEL, & sa, NULL ) ; } } else if ( strcmp ( name, ""rebind"" ) == 0 ) { error = aa_setprocattr_rebind ( args, arg_size,! AA_ONEXEC ) ; } else if ( strcmp ( name, ""rebind"" ) == 0 ) { error = aa_setprocattr_rebind ( args, arg_size,! AA_ONEXEC ) ; } else if ( strcmp ( name, ""rebind"" ) == 0 ) { error = aa_setprocattr_rebind ( args, arg_size,! AA_DO_TEST ) ; } else if ( strcmp ( name, ""rebind"" ) == 0 ) { error = aa_setprocattr_rebind ( args, arg_size,! AA_ONEXEC ) ; } else { error = aa_setprocattr_rebind ( args, arg_size,! AA_DO_",0
1388,"<S2SV_ModStart> uint_fast8_t tmp ; if (! siz -> caps ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> tilexoff >= siz -> width || siz -> tileyoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> tilexoff >= siz -> width || siz -> tileyoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> xoff >= siz -> width || siz -> yoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> yoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image",0
1389,"<S2SV_ModStart> - 1 ; } if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_data_start_ptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_data_start_ptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_data_start_ptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow",0
1390,<S2SV_ModStart> << 24 ; xmi_tmpdata |= * xmi_data ++ << 16 ; xmi_tmpdata |= * xmi_data ++ << 8 ; xmi_tmpdata |= * xmi_data ++ << 24 ; xmi_tmpdata |= * xmi_data ++ << 16 ; xmi_tmpdata |= * xmi_data ++ << 8 ; xmi_tmpdata |= * xmi_data ++ << 24 ; xmi_tmpdata |= * xmi_data ++ << 16 ; xmi_tmpdata |= * xmi_data ++ << 24 ; xmi_tmpdata |= * xmi_data ++ << 16 ; xmi_tmpdata |= * xmi_data ++ << 24 ; xmi_tmpdata |= * xmi_data ++ << 16 ; xmi_tmpdata |= * xmi_data ++ << 8 ; xmi_tmpdata |= * xmi_data ++ << 24 ; xmi_tmpdata |= * xmi_data ++ << 16 ; xmi_tmpdata |= * xmi_data ++ << 24 ; xmi_tmpdata |= * xmi_data ++ << 16 ; xmi_tmpdata |= * xmi_,0
1391,"<S2SV_ModStart> ; size_t total_len ; if ( unlikely ( total_len > iov_len ( iov, nr_segs ) ) ) return - EINVAL <S2SV_ModStart> ; size_t chars ; error = <S2SV_ModEnd>! iov_fault_in_pages_write ( <S2SV_ModStart>, chars ) ; if ( unlikely ( error ) ) { if (! ret ) ret = error ; break ; } <S2SV_ModEnd> atomic =! <S2SV_ModStart>! iov_fault_in_pages_write ( iov, chars ) ; if ( unlikely ( error ) ) { if (! ret ) ret = error ; break ; } <S2SV_ModEnd> redo : if <S2SV_ModStart>! iov_fault_in_pages_write ( iov, chars ) ; atomic =! iov_fault_in_pages_write ( iov, chars ) ; if ( atomic ) kunmap_atomic ( addr ) ; else kunmap ( addr ) ; goto redo ; } ret += chars ; buf -> offset += chars ; buf -> len -= chars ; if ( buf -> flags & PIPE_BUF_FLAG_PACKET ) { do_wakeup = 1 ; ret = <S2SV_ModEnd> 0 ; }",0
1392,<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( bits <S2SV_ModStart> } \\\n} <S2SV_ModEnd> IndexPacket index ;,0
1393,"<S2SV_ModStart> GLOBALS_ARE_RESET ( ) && <S2SV_ModStart> GLOBALS_ARE_RESET ( ) && <S2SV_ModStart> GLOBALS_ARE_RESET ( ) && <S2SV_ModStart> GLOBALS_ARE_RESET ( ) && <S2SV_ModStart> GLOBALS_ARE_RESET ( ) && <S2SV_ModStart> ) ) ; passert ( ugh == NULL && cur_state == NULL && e == STF_FAIL ) { int v2_notify_num = e - STF_FAIL ; DBG_log ( ""ikev2_parent_inI2outR2_tail <S2SV_blank> returned <S2SV_blank> STF_FAIL <S2SV_blank> with <S2SV_blank> %s"", enum_name ( & ikev2_notify_names, v2_notify_num ) ) ; } if ( e == STF_FAIL ) { int v2_notify_num = e - STF_FAIL ; DBG_log ( ""ikev2_parent_inI2outR2_tail <S2SV_blank> returned <S2SV_blank> STF_FAIL <S2SV_blank> with <S2SV_blank> %s"", enum_name ( & ikev2_notify_names, v2_notify_num ) ) ; } if ( e == STF_FAIL ) { int v2_notify_num = e -",0
1394,"<S2SV_ModStart> argv [ ] ) { p_fm_config_conx_hdlt hdl <S2SV_ModEnd> ; int instance <S2SV_ModStart> ) ) ; fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> initialize <S2SV_blank> the <S2SV_blank> client <S2SV_blank> handle: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res, fm_mgr_get_error_str ( res ) ) ; <S2SV_ModStart> ) ) ; fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res, fm_mgr_get_error_str ( res ) ) ; fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res ) ; fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res, fm_mgr_get_error_str ( res ) ) ; fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res, fm_mgr_get_error_str ( res ) ) ; fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res, fm_mgr_get_error_str (",0
1395,"<S2SV_ModStart> size_t max_mem ; jas_strcpy <S2SV_ModEnd> ( cmdname, <S2SV_ModStart> ] ; infile = NULL ; verbose = 0 ; debug = 0 ; # if defined ( JAS_DEFAULT_MAX_MEM_USAGE ) max_mem = JAS_DEFAULT_MAX_MEM_USAGE ; # endif while ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { switch ( id ) { case OPT_MAXMEM : max_mem = strtoull ( jas_optarg, 0, 10 ) ; break ; case OPT_HELP : default : usage ( ) ; break ; } } jas_setdbglevel ( debug ) ; # if defined ( JAS_DEFAULT_MAX_MEM_USAGE ) max_mem = JAS_DEFAULT_MAX_MEM_USAGE ; # endif while ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { switch ( id ) { case OPT_INFILE : infile = jas_optarg ; break ; case OPT_MAXMEM : max_mem = strtoull ( jas_optarg, 0, 10 ) ; break ; case OPT_MAX",0
1396,"<S2SV_ModStart> ) ) { if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; }",0
1397,<S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { if ( ( j = pana_bits ( 8 ) ) ) { if ( ( j -= 0x80 << sh ) < 0 || sh == 4 ) { if ( ( j -= 0x80 << sh ) < 0 || sh == 4 ) { if ( ( j -= 0x80 << sh ) < 0 || sh == 4 ) { if ( ( j -= 0x80 << sh ) < 0 || sh == 4 ) { if ( ( j -= 0x80 << sh ) < 0 || sh == 4 ) { if ( ( j -= 0x80 << sh ) < 0 ) { if ( ( j -= 0x80 << sh ) < 0 || sh == 4 ) { if ( ( j -= 0x80 << sh ) < 0 || sh == 4 ) { if ( ( j -= 0x80 << sh ) < 0 || sh == 4 ) { if ( ( j,0
1398,"<S2SV_ModStart> < needed ) { struct dm_dev * dev = hc -> md -> bdev -> bd_dev ; struct dm_name_list * nl = ( struct dm_name_list * ) orig_nl ; struct gendisk * disk = dm_disk ( disk -> bd_dev ) ; memcpy ( nl -> name, hc -> name, sizeof ( nl -> name ) ) ; memcpy ( nl -> name + strlen ( hc -> name ) + 1, sizeof ( nl -> name ) ) ; memcpy ( nl -> name, hc -> name ) ; memcpy ( nl -> name, hc -> name ) ; memcpy ( nl -> name, hc -> name ) ; memcpy ( nl -> name + strlen ( hc -> name ) + 1, sizeof ( nl -> name ) ) ; memcpy ( nl -> name, hc -> name ) ; memcpy ( nl -> name, hc -> name ) ; memcpy ( nl -> name, hc -> name ) ; memcpy ( nl -> name, hc -> name ) ; memcpy ( nl -> name, hc -> name ) ; memcpy ( nl -> name, hc -> name ) ; memcpy (",0
1399,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1400,"<S2SV_ModStart> int idx, ret <S2SV_ModEnd> = - EINVAL <S2SV_ModStart> irq_srcu ) ; if ( guest_irq >= irq_rt -> nr_rt_entries ) { ret = - EINVAL ; goto out ; } <S2SV_ModEnd> hlist_for_each_entry ( e <S2SV_ModStart> link ) { if ( e -> type!= KVM_IRQ_ROUTING_MSI ) continue ; kvm_set_msi_irq ( kvm, e, & irq ) ; if ( ret < 0 ) { printk ( KERN_ERR ""failed <S2SV_blank> to <S2SV_blank> back <S2SV_blank> to <S2SV_blank> remapped <S2SV_blank> mode, <S2SV_blank> irq: <S2SV_blank> %u\\n"", host_irq ) ; goto out ; } }",0
1401,<S2SV_ModStart> bfqq ) { hrtimer_try_to_cancel ( timer <S2SV_ModEnd> ) ; return,0
1402,"<S2SV_ModStart> else { return memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, umin_value ) ) == 0 && rold -> umax_value == 0 && rold -> smin_value == U64_MIN && rold -> smax_value == S64_MIN && tnum_is_unknown ( rold -> var_off ) ; } case SCALAR_VALUE_OR_NULL : if ( rcur -> type!= PTR_TO_CALAR_VALUE_OR_NULL ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_",0
1403,"<S2SV_ModStart>! handle ) { pr_err ( ""%s: <S2SV_blank> sec_SecureHandleGetUpperPointer <S2SV_blank> called <S2SV_blank> with <S2SV_blank> invalid <S2SV_blank> handle <S2SV_blank> pointer\\n"", __func__ ) ; return NULL ; } <S2SV_ModEnd> pointer = (",0
1404,<S2SV_ModStart> ; length += <S2SV_ModEnd> PRIMARY_DRAWING_ORDER_FIELD_BYTES [ orderInfo,0
1405,<S2SV_ModStart> out ; } if (! OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( new_type ) ) { if ( ovl_dentry_lower ( old ) -> d_inode == ovl_dentry_lower ( new ) -> d_inode ) { if ( ovl_dentry_lower ( new ) -> d_inode == ovl_dentry_lower ( old ) -> d_inode ) goto out ; } } else { if (! OVL_TYPE_UPPER ( new_type ) &&! OVL_TYPE_UPPER ( old_type ) ) { if ( ovl_dentry_lower ( old ) -> d_inode == ovl_dentry_lower ( new ) -> d_inode ) { if ( ovl_dentry_lower ( new ) -> d_inode == ovl_dentry_lower ( old ) -> d_inode ) goto out ; } } else { if (! OVL_TYPE_UPPER ( old_type ) ) { if (! OVL_TYPE_UPPER ( new_type ) ) { if (,0
1406,"<S2SV_ModStart> ; # ifdef ONIG_DEBUG_MATCH fprintf ( stderr, ""match_at: <S2SV_blank> str: <S2SV_blank> %d, <S2SV_blank> end: <S2SV_blank> %d, <S2SV_blank> sprev: <S2SV_blank> %d\\n"", ( int ) str, ( int ) sprev, ( int ) sstart ) ; fprintf ( stderr, ""match_at: <S2SV_blank> str: <S2SV_blank> %d, <S2SV_blank> end: <S2SV_blank> %d, <S2SV_blank> sprev: <S2SV_blank> %d\\n"", str, ( int ) sprev, ( int ) sstart ) ; fprintf ( stderr, ""match_at: <S2SV_blank> str: <S2SV_blank> %d, <S2SV_blank> end: <S2SV_blank> %d, <S2SV_blank> sprev: <S2SV_blank> %d\\n"", ( int ) str, ( int ) sprev, ( int ) sstart ) ; fprintf ( stderr, ""match_at: <S2SV_blank> str: <S2SV_blank> %d, <S2SV_blank> end: <S2SV_blank> %d, <S2SV_blank> sprev: <S2SV_blank> %d\\n"", str, ( int ) s, ( int ) sstart ) ; fprintf ( stderr, ""match_at: <S2SV_blank> str: <S2SV_blank> %d, <S2SV_blank> end: <S2SV_blank> %d, <S2SV_blank> sprev: <S2SV_blank> %d\\n"", ( int )",0
1407,"<S2SV_ModStart> int plane ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) vp9_foreach_transformed_block_highbitdepth_in_plane ( xd, bsize, visit, arg ) ; # else for ( plane = 0 ; plane < MAX_MB_PLANE ; plane ++ ) vp9_foreach_transformed_block_in_plane ( xd, bsize, plane, visit, arg ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> cur_buf -> flags & YV12_FLAG_HIGHBITDEPTH ) vp9_foreach_transformed_block_highbitdepth_in_plane ( xd, bsize, visit, arg ) ; # else for ( plane = 0 ; plane < MAX_MB_PLANE ; plane ++ ) vp9_foreach_transformed_block_in_plane ( xd, bsize, plane, visit, arg ) ; # endif",0
1408,"<S2SV_ModStart> ; int error ; msg -> msg_namelen = 0 ; if ( msg -> msg_name ) { pr_debug ( ""%s: <S2SV_blank> recvmsg <S2SV_blank> called <S2SV_blank> with <S2SV_blank> %d <S2SV_blank> bytes"", __func__, msg -> msg_name, skb -> len ) ; pr_debug ( ""%s: <S2SV_blank> recvmsg <S2SV_blank> called <S2SV_blank> with <S2SV_blank> %d <S2SV_blank> bytes"", __func__, skb -> len, msg -> msg_name, skb -> len ) ; } else { pr_debug ( ""%s: <S2SV_blank> recvmsg <S2SV_blank> called <S2SV_blank> with <S2SV_blank> %d <S2SV_blank> bytes"", __func__, skb -> len ) ; pr_debug ( ""%s: <S2SV_blank> recvmsg <S2SV_blank> called <S2SV_blank> with <S2SV_blank> %d <S2SV_blank> bytes"", __func__, skb -> len, skb -> len ) ; pr_debug ( ""%s: <S2SV_blank> recvmsg <S2SV_blank> called <S2SV_blank> with <S2SV_blank> %d <S2SV_blank> bytes"", __func__, skb -> len, msg -> msg_name, skb -> len ) ; }",0
1409,<S2SV_ModStart> -> vhost_fdt_hash = hash <S2SV_ModEnd> ; return fd,0
1410,"<S2SV_ModStart> void nonrd_pick_sb_modes ( VP9_COMP * cpi <S2SV_ModEnd>, const TileInfo <S2SV_ModStart> -> e_mbd ; <S2SV_ModEnd> set_offsets ( cpi <S2SV_ModStart> mi_col, bsize ) ; xd -> mi [ 0 ] -> mbmi. sb_type = bsize ; if ( frame_is_intra_only ( cm ) ) { vp9_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } else if ( frame_is_intra_only ( cm ) ) { vpx_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } else { MB_PREDICTION_MODE intramode = DC_PRED ; set_mode_info ( & xd -> mi [ 0 ] -> mbmi, bsize, intramode ) ; } duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1411,<S2SV_ModStart> ( csum ) { dev -> <S2SV_ModEnd> hw_features |= NETIF_F_HW_CSUM <S2SV_ModStart> |= NETIF_F_HW_CSUM | NETIF_F_SG | NETIF_F_FRAGLIST <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( csum ) { dev -> <S2SV_ModEnd> hw_features |= NETIF_F_HW_CSUM <S2SV_ModStart> |= NETIF_F_HW_CSUM | NETIF_F_SG | NETIF_F_FRAGLIST <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( csum ) { dev -> features |= NETIF_F_HW_CSUM <S2SV_ModEnd> | NETIF_F_SG | <S2SV_ModStart> | NETIF_F_FRAGLIST ; },0
1412,<S2SV_ModStart> ; * err = <S2SV_ModEnd> getHrtf ( &,0
1413,"<S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageData",0
1414,<S2SV_ModStart> = 1 ; <S2SV_ModEnd> return 0 ;,0
1415,"<S2SV_ModStart> return __this_address ; fa = xfs_dinode_verify_magic2 ( dip, mp, XFS_DINODE_MAGIC ) ; if ( fa ) { fa = xfs_dinode_verify_magic3 ( dip, mp, XFS_DINODE_MAGIC ) ; fa = xfs_dinode_verify_magic2 ( dip, mp, XFS_DINODE_MAGIC ) ; fa = fa ; } else { fa = xfs_dinode_verify_magic2 ( dip, mp, XFS_DINODE_MAGIC ) ; fa = xfs_dinode_verify_magic2 ( dip, mp, XFS_DINODE_MAGIC ) ; fa = xfs_dinode_verify_magic2 ( dip, XFS_DINODE_MAGIC ) ; fa = xfs_dinode_verify_magic2 ( dip, XFS_DINODE_MAGIC ) ; } else { fa = xfs_dinode_verify_magic2 ( dip, mp, XFS_DINODE_MAGIC ) ; fa = xfs_dinode_verify_magic",0
1416,"<S2SV_ModStart> pkt_list ) ; if ( ( ( flags & VP8_EFLAG_NO_UPD_GF ) && ( flags & VP8_EFLAG_FORCE_GF ) ) || ( ( flags & VP8_EFLAG_NO_UPD_ARF ) && ( flags & VP8_EFLAG_FORCE_ARF ) ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF )",0
1417,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1418,<S2SV_ModStart> event ) ; <S2SV_ModEnd> hlist_add_head_rcu ( & <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> } hlist_add_head_rcu (,0
1419,"<S2SV_ModStart> * pptr, u_int <S2SV_ModEnd> len ) { <S2SV_ModStart> case BGP_IPV4_ADDRESS : if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_IPV6_ADDRESS : if ( tlen < 6 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_IPV6_ADDRESS : if ( tlen < 6 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_IPV4_ADDRESS : if ( tlen < 6 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_IPV6_ADDRESS : if ( tlen < 6 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_IPV6_ADDRESS : if ( tlen < 6 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; }",0
1420,"<S2SV_ModStart> -> outputbuffer, ""<tr><td>Environment</td><td>%s</td></tr>"", Run. Env. env ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>PIDfile</td><td>%s</td></tr>"", Run. files. pid ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>State <S2SV_blank> file</td><td>%s</td></tr>"", Run. files. state ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Hostfile</td><td>%s</td></tr>"", Run. Env. host ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Controlfile</td><td>%s</td></tr>"", Run. files. control ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Logfile</td><td>%s</td></tr>"", Run. files. log ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td>Pidfile</td><td>%s</td></tr>"", Run. files. pid ) ; StringBuffer_append ( res -> outputbuffer, ""<tr><td",0
1421,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
1422,"<S2SV_ModStart> len ) ; strncpy <S2SV_ModEnd> ( constr1, <S2SV_ModStart> len ) ; strncpy <S2SV_ModEnd> ( constr2, <S2SV_ModStart> len ) ; strncpy <S2SV_ModEnd> ( constr1 + <S2SV_ModStart> len ) ; strncpy <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> len ) ; strncpy <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> len ) ; strncpy <S2SV_ModEnd> ( constr1 + <S2SV_ModStart> len ) ; strncpy <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> len ) ; strncpy <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> len ) ; strncpy <S2SV_ModEnd> ( constr1 + <S2SV_ModStart> len ) ; strncpy <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> len ) ; strncpy <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> len ) ; strncpy <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> len ) ; strncpy <S2SV_ModEnd> ( constr1 + <S2SV_ModStart> len ) ; strncpy <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> len ) ; strncpy <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> len ) ; strncpy <S2SV_ModEnd> ( constr2 + <S2SV_ModStart> len ) ; strncpy <S2SV_ModEnd> ( constr1,",0
1423,<S2SV_ModStart> int u ; if ( n < 0 || n >= 32 ) { return - 1 ; } <S2SV_ModEnd> v = 0,1
1424,"<S2SV_ModStart>, & len, rw_op <S2SV_ModEnd>, compat ) <S2SV_ModStart>, & nr_segs, rw_op <S2SV_ModEnd>, compat ) <S2SV_ModStart>, & nr_segs, rw_op <S2SV_ModEnd>, compat ) <S2SV_ModStart>, & nr_segs, rw_op <S2SV_ModEnd>, compat )",0
1425,"<S2SV_ModStart> ; } } if ( c -> rbytes < sizeof ( c -> binary_header ) ) { c -> rbytes = sizeof ( c -> binary_header ) ; c -> rcurr = c -> rbuf ; if ( settings. verbose > 1 ) { fprintf ( stderr, ""%d: <S2SV_blank> Realign <S2SV_blank> input <S2SV_blank> buffer\\n"", c -> sfd ) ; } c -> rcurr = c -> rbuf ; if ( settings. verbose > 1 ) { fprintf ( stderr, ""%d: <S2SV_blank> Realign <S2SV_blank> input <S2SV_blank> buffer\\n"", c -> sfd ) ; } if ( settings. verbose > 1 ) { c -> rbytes = sizeof ( c -> binary_header ) ; c -> rcurr = c -> rbuf ; if ( settings. verbose > 1 ) { fprintf ( stderr, ""%d: <S2SV_blank> Realign <S2SV_blank> input <S2SV_blank> buffer\\n"", c -> sfd ) ; } c -> rcurr = c -> rbuf ; if ( settings. verbose > 1 ) { fprintf ( stderr, ""%d: <S2SV_blank> Realign <S2SV_blank> input <S2SV_blank> buffer\\n"", c -> sfd ) ; } if ( settings. verbose > 1 ) { fprintf ( stderr, ""%d",0
1426,"<S2SV_ModStart> ) ) { if ( config -> desc. bNumInterfaces < nintf ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, nintf ) ; nintf = nintf_orig ; } else if ( config -> desc. bNumInterfaces < nalts [ nintf ]. desc. bNumInterfaces ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, nalts [ nintf ]. desc. bNumInterfaces ) ; nintf = nalts [ nintf ]. desc. bNumInterfaces ; } else if ( config -> desc. bNumInterfaces < nalts [ nintf ]. desc. bNumInterfaces ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, nalts",0
1427,"<S2SV_ModStart> ; if ( info -> count < 1 ) return - EINVAL ; access = info -> access == 0? SNDRV_CTL_ELEM_ACCESS_READWRITE : ( info -> access & ( SNDRV_CTL_ELEM_ACCESS_READWRITE | SNDRV_CTL_ELEM_ACCESS_INACTIVE | SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE ) ) ; info -> id. numid = 0 ; memset ( & kctl, 0, sizeof ( kctl ) ) ;",0
1428,"<S2SV_ModStart> { exit_client ( source_p <S2SV_ModEnd>, client_p, <S2SV_ModStart>, client_p, ""Mixing <S2SV_blank> client <S2SV_blank> and <S2SV_blank> server <S2SV_blank> protocol"" ) ; return 0 ; } <S2SV_ModEnd> saslserv_p = find_named_client <S2SV_ModStart>, client_p, ""Mixing <S2SV_blank> server <S2SV_blank> protocol"" ) ; if (! IsService ( saslserv_p ) ) { sendto_one ( source_p, form_str ( ERR_SASLABORTED ), me. name, ""*"" ) ; return 0 ; } if (! IsService ( saslserv_p ) ) { sendto_one ( source_p, form_str ( ERR_SASLABORTED ), me. name, ""*"" ) ; return 0 ; } if (! IsService ( saslserv_p ) ) { sendto_one ( source_p, form_str ( ERR_SASLABORTED ), me. name, ""*"" ) ; source_p -> localClient -> sasl_complete = 0 ; } if (! IsService ( saslserv_p ) ) { sendto_one ( source_p, form_str ( ERR_SASLABORTED )",0
1429,<S2SV_ModStart> case X86EMUL_MODE_PROT64 : if ( mode == X86EMUL_MODE_PROT32 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT16 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT32 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT32 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT16 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT32 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT32 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( mode == X86EMUL_MODE_PROT32 ) { if ( ctxt -> mode == X86EMUL_MODE_,0
1430,"<S2SV_ModStart>, 0, <S2SV_ModEnd> mmap_event -> event_id",0
1431,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; random_ether_addr (,1
1432,"<S2SV_ModStart> 16 ) ; vp8_build_intra_predictors_mby_s ( xd, * ( b -> base_src ), b -> src_stride, xd -> predictor, 16, & sse ) ; rate = x -> mbmode_cost [ xd -> frame_type ] [ mode ] ; this_rd = RDCOST ( x -> rdmult, x -> rddiv, rate, distortion ) ; if ( error16x16 > this_rd ) { error16x16 = this_rd ; best_mode = mode ; best_sse = sse ; } }",0
1433,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_ECON2_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MAADR1 ) ; interface -> macAddr. w [ 0 ] = letoh16 ( temp ) ; temp = enc624j600ReadReg ( interface, ENC624J600_MAADR2 ) ; interface -> macAddr. w [ 1 ] = letoh16 ( temp ) ; temp = enc624j600ReadReg ( interface, ENC624J600_MAADR3 ) ; interface -> macAddr. w [ 2 ] = letoh16 ( temp ) ; macAddrToEui64 ( & interface -> macAddr, & interface -> eui64 ) ; } else { temp = htole16 ( interface -> macAddr. w [ 0 ] ) ; enc624j600WriteReg ( interface, ENC624J600_MAADR1, temp ) ; temp = htole16 ( interface -> macAddr. w [ 1 ] ) ; enc624j600Write",0
1434,"<S2SV_ModStart> * start ; va_start ( argptr, format ) ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> = 0 ; <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> headindex <S2SV_ModEnd> = strlen ( <S2SV_ModStart> = 0 ; <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> psf -> headindex <S2SV_ModEnd> = strlen ( <S2SV_ModStart> psf -> header <S2SV_ModEnd> ) ; va_end <S2SV_ModStart> psf -> headindex <S2SV_ModEnd> = strlen ( <S2SV_ModStart> psf -> header <S2SV_ModEnd> ) ; return",0
1435,<S2SV_ModStart> && unconditional ( e <S2SV_ModEnd> ) ) || <S2SV_ModStart> verdict < 0 && unconditional ( e <S2SV_ModEnd> ) ) ||,0
1436,<S2SV_ModStart> alg_priv ) { vpx_alg_destroy_priv <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> priv -> alg_priv ) ; },0
1437,"<S2SV_ModStart> ) ) ; if ( is_noncanonical_address ( intr_info ) ) { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmcs_read32 ( VM_INSTRUCTION_ERROR ) ) ; return 1 ; } <S2SV_ModEnd> switch ( exit_reason <S2SV_ModStart> ) ) { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, intr_info ) ; if ( is_noncanonical_address ( intr_info ) ) { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, vmcs_read32 ( VM_INSTRUCTION_ERROR ) ) ; return 1 ; } <S2SV_ModEnd> break ; case <S2SV_ModStart> ) ) { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, intr_info ) ; if ( is_noncanonical_address ( intr_info ) ) { pr_info_ratelimited ( ""%s <S2SV_blank> failed <S2SV_blank> vm <S2SV_blank> entry <S2SV_blank> %x\\n"", __func__, intr_",0
1438,<S2SV_ModStart> { sf -> <S2SV_ModEnd> adaptive_rd_thresh = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> use_square_partition_only =! <S2SV_ModStart> ; sf -> <S2SV_ModEnd> tx_size_search_method = vp9_frame_is_boosted <S2SV_ModStart> ; sf -> <S2SV_ModEnd> adaptive_motion_search = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> subpel_iters_per_step = 1 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> mode_skip_start = 10 <S2SV_ModStart> ; sf -> <S2SV_ModEnd> adaptive_pred_interp_filter = ALLOW_RECODE_KFARFGF <S2SV_ModStart> ; sf -> <S2SV_ModEnd> intra_y_mode_mask [ TX_32X32 <S2SV_ModStart> ; sf -> intra_uv_mode_mask [ TX_16X16 ] = INTRA_DC_H_V ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_uv_mode_mask [ TX_16X16 ] = INTRA_DC_H_V ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_uv_mode_,0
1439,"<S2SV_ModStart> ct_dccp_roles role ; spin_lock_bh ( & ct -> lock ) ; <S2SV_ModStart> & _dh ) ; type = dh -> dccph_type ; if ( type == DCCP_PKT_RESET && test_bit ( IPS_SEEN_REPLY_BIT, & ct -> status ) ) { nf_ct_kill_acct ( ct, ctinfo, skb ) ; return NF_ACCEPT ; } spin_unlock_bh ( & ct -> lock ) ; if (! test_bit ( IPS_ASSURED_BIT ( IPS_ASSURED_BIT ( IPS_ASSURED_BIT ( IPS_ASSURED_BIT ( IPS_SEEN_REPLY_BIT ), & ct -> status ) ) { nf_ct_kill_acct ( ct, ctinfo, skb ) ; return NF_ACCEPT ; }",0
1440,"<S2SV_ModStart> struct compat_timex tx32 ; memset ( txc, 0, sizeof ( * txc ) ) ;",0
1441,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
1442,<S2SV_ModStart> ; int goodsize ; if ( inuse > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; if ( goodsize > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK,0
1443,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
1444,"<S2SV_ModStart> * s = STR ( CHILD ( n, 0 ) ) ; int quote = Py_CHARMASK ( * STR ( CHILD ( n, 0 ) ) ) ; char * ch, s_kind [ 3 ] ; while ( * raw && * raw!= '\\'' && * raw!= \'""\' ) { * raw ++ = * raw ++ ; } kind = PyUnicode_FromString ( s_kind ) ; if (! kind ) { return NULL ; } # ifdef Py_USING_UNICODE if ( PyErr_ExceptionMatches ( PyExc_UnicodeError ) ) { PyObject * type, * value, & tback ) ; errstr = PyObject_Str ( value ) ; if ( errstr ) { Py_DECREF ( type ) ; ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } Py_DECREF ( type ) ; Py_DECREF ( value ) ; Py_XDECREF ( tback ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } Py_DECRE",0
1445,"<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> ( strcmp ( ""keyframes"", option_name ) == 0 ) { svc_ctx -> keyframes = atoi ( option_value ) ; } else if ( strcmp ( ""spatial-layers"", option_name ) == 0 ) { svc_ctx -> spatial_layers = atoi ( option_value ) ; } else if ( strcmp ( ""scale-factors"", option_name ) == 0 ) { svc_ctx -> spatial_layers = atoi ( option_value ) ; } else if ( strcmp ( ""quantizers"", option_name ) == 0 ) { res = parse_quantizer_values ( svc_ctx, option_value, 0 ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers-keyframe"", option_name ) == 0 ) { res = parse_quantizer_values ( svc_ctx, option_value, 0 ) ; if ( res!= VPX_CODEC_OK ) break ; if ( is_keyframe_qaunt_set ) { svc_log ( svc_ctx,",0
1446,<S2SV_ModStart> event ) ; <S2SV_ModEnd> hlist_add_head_rcu ( & <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> } hlist_add_head_rcu (,0
1447,"<S2SV_ModStart> mask & KADM5_PRINCIPAL ) || ( mask & KADM5_LAST_PWD_CHANGE ) || ( mask & KADM5_MOD_TIME ) || ( mask & KADM5_MOD_NAME ) || ( mask & KADM5_MKVNO ) || ( mask & KADM5_AUX_ATTRIBUTES ) || ( mask & KADM5_KEY_DATA ) || ( mask & KADM5_LAST_SUCCESS ) || ( mask & KADM5_LAST_FAILED ) ) return KADM5_BAD_MASK ; if ( entry == ( kadm5_principal_ent_t ) NULL ) return EINVAL ; if ( mask & KADM5_TL_DATA ) { tl_data_orig = entry -> tl_data ; while ( tl_data_orig ) { if ( tl_data_orig -> tl_data_type < 256 ) return KADM5_BAD_TL_TYPE ; tl_data_orig = tl_data_orig -> tl_data_next ; } } ret = get_entry ( handle, entry -> principal, & kdb, & ad",0
1448,<S2SV_ModStart> -> data [ plane ] && frame -> linesize [ plane ],0
1449,"<S2SV_ModStart> ) ; } fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; mb_index = 0 ; fprintf ( mvs, ""Mb <S2SV_blank> mv <S2SV_blank> ref <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. uv_mode ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; mb_index = 0 ; fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. uv_mode ) ; mb_index ++ ; } fprintf ( mvs,",0
1450,<S2SV_ModStart> self ) { <S2SV_ModEnd> PyObject * new_memo,0
1451,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
1452,"<S2SV_ModStart> imp_dbh ) ) { imp_dbh -> last_error = mysql_errno ( imp_dbh -> pmysql ) ; imp_dbh -> last_error = mysql_error ( imp_dbh -> pmysql ) ; <S2SV_ModStart> imp_dbh ) ) { imp_dbh -> last_error = mysql_errno ( imp_dbh -> pmysql ) ; imp_dbh -> last_error = mysql_error ( imp_dbh -> pmysql ) ; do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ) ) ; imp_dbh -> last_error = mysql_error ( imp_dbh -> pmysql ) ; <S2SV_ModStart> imp_dbh ) ) { imp_dbh -> last_error = mysql_errno ( imp_dbh -> pmysql ) ; do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql )",0
1453,"<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & size, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, & size, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, FIONREAD, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, FIONREAD, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, FIONREAD, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, FIONREAD, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, FIONREAD, TEMP_FAILURE_RETRY ( <S2SV_ModStart>, FIONREAD, TEMP_FAILURE_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_",0
1454,"<S2SV_ModStart> struct ieee_802_11_phdr phdr ; memset ( & phdr, 0, sizeof ( phdr ) )",0
1455,<S2SV_ModStart> ; sh = s_malloc0 <S2SV_ModEnd> ( hdrlen +,0
1456,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> a_val ; UINT16 x ; UINT16 y ; UINT16 rw ; UINT16 tempWidth ; tempWidth = ROUND_UP_TO ( context -> width, 8 ) ; rw = ( context -> ChromaSubsamplingLevel? tempWidth : context -> width ) ; ccl = context -> ColorLossLevel ; for ( y = 0 ; y < context -> height ; y ++ ) { src = data + ( context -> height - 1 - y ) * scanline ; yplane = context -> priv -> PlaneBuffers [ 0 ] + y * rw ; coplane = context -> priv -> PlaneBuffers [ 1 ] + y * rw ; cgplane = context -> priv -> PlaneBuffers [ 2 ] + y * rw ; aplane = context -> priv -> PlaneBuffers [ 3 ] + y * rw ; src ++ ; a_val = 0xFF ; break ; case PIXEL_FORMAT_BGR24 : b_val = * src ++ ; g_val = * src ++ ; r_val = *",0
1457,"<S2SV_ModStart> + 1 ; offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; <S2SV_ModStart> hf_keybuffer ) ; if ( offset < end_offset ) { offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; offset = dissect_spoolss_uint16uni ( tvb,",0
1458,"<S2SV_ModStart> - EINVAL ) { kfree ( op_stack ) ; <S2SV_ModStart> - EINVAL ) ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; }",0
1459,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> calc_iframe_target_size_one_pass_cbr ( const <S2SV_ModStart> ) { target = ( ( cpi -> oxcf. starting_buffer_level / 2 ) > INT_MAX )? INT_MAX : ( cpi -> oxcf. starting_buffer_level / 2 ) ; } else { const int initial_boost = 32 ; int kf_boost = MAX ( initial_boost, ( int ) ( 2 * cpi -> output_framerate - 16 ) ) ; if ( rc -> frames_since_key < cpi -> output_framerate / 2 ) ) { kf_boost = ( int ) ( kf_boost * rc -> frames_since_key / ( cpi -> output_framerate / 2 ) ) ; if ( rc -> frames_since_key < cpi -> output_framerate / 2 ) { kf_boost = ( int ) ( kf_boost * rc -> frames_since_key / ( cpi -> output_framerate / 2 ) ) ; } else { kf_boost = ( int ) (",0
1460,<S2SV_ModStart> X86_EFLAGS_RF ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1461,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static TX_MODE <S2SV_ModEnd> read_tx_mode ( vpx_reader <S2SV_ModStart> { TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> == ALLOW_32X32 ) tx_mode = vpx_read_bit <S2SV_ModEnd> ( r )",0
1462,"<S2SV_ModStart> struct hello6 * <S2SV_ModEnd> hellop = ( <S2SV_ModStart> OSPF6HDR_LEN ) ; ND_TCHECK_32BITS ( & hellop -> hello_options ) <S2SV_ModStart> ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> Options <S2SV_blank> [%s]"", bittok2str ( ospf6_option_values, ""none"", EXTRACT_32BITS ( & hellop -> hello_options ) ) ) ) ; ND_TCHECK_16BITS ( & hellop -> hello_deadint ) ; ND_TCHECK ( hellop -> hello_dr ) ; if ( EXTRACT_32BITS ( & hellop -> hello_dr )!= 0 ) ND_PRINT ( ( ndo, "", <S2SV_blank> Backup <S2SV_blank> Designated <S2SV_blank> Router <S2SV_blank> %s"", ipaddr_string ( ndo, & hellop -> hello_dr ) ) ) ; ND_TCHECK ( hellop -> hello_bdr ) ; if ( EXTRACT_32BITS ( & hellop -> hello_bdr )!= 0 ) ND_PRINT ( ( ndo, "", <S2SV_blank> Backup <S2SV_blank> Designated <S2SV_blank> Router <S2SV_blank> %s"", ipaddr_string ( ndo, & hellop",0
1463,"<S2SV_ModStart> ( * ( unsigned char * ) data < 1 ) return - ENOTSUPP ; if ( datalen < 1 ) { printk ( KERN_WARNING ""Bad <S2SV_blank> SNMP <S2SV_blank> version <S2SV_blank> number: <S2SV_blank> %d\\n"", datalen ) ; return - EINVAL ; } if ( datalen < 4 ) { printk ( KERN_WARNING ""Bad <S2SV_blank> SNMP <S2SV_blank> version <S2SV_blank> number: <S2SV_blank> %d\\n"", datalen ) ; return - EINVAL ; } if ( datalen < 4 ) { printk ( KERN_WARNING ""Bad <S2SV_blank> SNMP <S2SV_blank> version <S2SV_blank> number: <S2SV_blank> %d\\n"", datalen ) ; return - EINVAL ; } if ( datalen < 4 ) { printk ( KERN_WARNING ""Bad <S2SV_blank> SNMP <S2SV_blank> version <S2SV_blank> number: <S2SV_blank> %d\\n"", datalen ) ; return - EINVAL ; } if ( datalen < 4 ) { printk ( KERN_WARNING ""Bad <S2SV_blank> SNMP <S2SV_blank> version <S2SV_blank> number: <S2SV_blank> %d\\n"", datalen ) ; return - EINVAL ; }",0
1464,"<S2SV_ModStart> rc ) { mutex_lock ( & rc -> uwbd. mutex ) ; <S2SV_ModStart> ""uwbd"" ) ; mutex_unlock ( & rc -> uwbd. mutex ) ; <S2SV_ModStart> ""UWB: <S2SV_blank> Cannot <S2SV_blank> start <S2SV_blank> management <S2SV_blank> daemon; <S2SV_blank> "" ""UWB <S2SV_blank> won\'t <S2SV_blank> work\\n"" ) ;",0
1465,"<S2SV_ModStart> : # line 96 ""re_grammar.y"" { yr_free ( ( ( * yyvaluep ). class_vector ) ) ; } <S2SV_ModStart> : # line 1045 ""re_grammar.c"" break ; case 26 : # line 97 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1051 ""re_grammar.c"" break ; case 27 : # line 99 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1058 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 100 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1068 <S2SV_ModEnd> ""re_grammar.c"" break ; <S2SV_ModStart> : # line 101 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1055 <S2SV_ModEnd> ""re_grammar.c"" break ;",0
1466,<S2SV_ModStart> : idx ; if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) { char c = ( char ) ( ( existing & ~ mask ) << bitIdx ) ; pixelCount = ( short ) ( pixelCount + 1 - ( wholeBytes * 8 / gfx -> data. bpp ) ) ; if ( wholeBytes ) { char c = ( char ) ( wholeBytes * 8 / gfx -> data. bpp ) ; pixelCount = ( short ) ( pixelCount + 1 - ( wholeBytes * 8 / gfx -> data. bpp ) ) ; pixelCount = ( short ) ( wholeBytes * 8 / gfx -> data. bpp ) ; pixelCount = ( short ) ( pixelCount + 1 - ( wholeBytes * 8 / gfx -> data. bpp ) ) ; if ( wholeBytes ) { char c = ( char ) ( wholeBytes * 8 / gfx -> data. bpp ) ; pixelCount = ( short ) ( pixelCount + 1 - ( wholeBytes * 8 / gfx -> data. bpp ) ) ; pixelCount = ( short ) ( wholeBytes * 8 / gfx -> data. bpp ) ; pixelCount = ( short ) ( pixelCount + 1,0
1467,"<S2SV_ModStart> -> cpi ; MACROBLOCK * const mb = & cpi -> mb ; <S2SV_ModStart> 32 ] ; <S2SV_ModEnd> struct macroblock_plane * <S2SV_ModStart> plane ] ; const PLANE_TYPE type = pd -> plane_type ; const int16_t * qcoeff = BLOCK_OFFSET ( p -> qcoeff, block ) ; const int segment_id = mbmi -> segment_id ; const scan_order * so ; const int ref = is_inter_block ( mbmi ) ; unsigned int ( * const counts ) [ COEFF_CONTEXTS ] [ ENTROPY_TOKENS ] = cpi -> fc. coef_counts [ tx_size ] [ type ] [ ref ] ; vpx_prob ( * const counts ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> common. fc. coef_probs [ tx_size ] [ type ] [ ref ] ; vpx_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> common. fc. coef_probs [ tx_size ] [ type ] [ ref ] ; vpx_prob ( * const eob",0
1468,<S2SV_ModStart>. pSrc ; if ( pSelect -> pSrc == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; },0
1469,<S2SV_ModStart> ( shmflg & SHM_RND <S2SV_ModEnd> ) addr &= <S2SV_ModStart> ( shmflg & SHM_MDS ) addr &= ~ ( shmlba - 1 ) ; else if ( ( shmflg & SHM_MDS ) ) addr &= ~ ( shmlba - 1 ) ; else if ( ( shmflg & SHM_MDS ) ) addr &= ~ ( shmlba - 1 ) ; else if ( ( addr & ( shmlba - 1 ) ) ) { if ( ( shmflg & SHM_RND ) addr &= ~ ( shmlba - 1 ) ; else if ( ( shmflg & SHM_MDS ) ) addr &= ~ ( shmlba - 1 ) ; else if ( ( shmflg & SHM_MDS ) ) addr &= ~ ( shmlba - 1 ) ; else if ( ( shmflg & SHM_MDS ) ) addr &= ~ ( shmlba - 1 ) ; else if ( ( shmflg & SHM_RND ) addr &= ~ ( shmlba - 1 ) ; else if ( ( shmflg & SHM_,0
1470,"<S2SV_ModStart> users ) ; if (! serv ) { printk ( KERN_ERR ""nfs_callback_create_svc: <S2SV_blank> create <S2SV_blank> service <S2SV_blank> failed\\n"" ) ; return ERR_PTR ( - ENOMEM ) ; }",0
1471,"<S2SV_ModStart> point, const CurveZZ_p <S2SV_ModEnd> curve ) {",0
1472,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
1473,<S2SV_ModStart> case NPNVSupportsWindowless : type = RPC_TYPE_BOOLEAN ; break ;,0
1474,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
1475,"<S2SV_ModStart> s ) { if ( s < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> s <S2SV_blank> would <S2SV_blank> overrun"", sock_fd ) ; return - 1 ; } <S2SV_ModStart> 0 ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; }",0
1476,"<S2SV_ModStart> ; for ( xIter = crm_first_attr ( xml ) ; xIter!= NULL ; xIter = xIter -> next ) { const char * prop_name = ( const char * ) xIter -> name ; if ( strcmp ( prop_name, XML_ATTR_ID ) == 0 ) { continue ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ;",0
1477,<S2SV_ModStart> <S2SV_null> <S2SV_null> static SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> return NULL ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1478,"<S2SV_ModStart> mq_flush_lock, flags ) ; flush_rq -> tag = - 1 ;",0
1479,"<S2SV_ModStart> { int length ; struct stream packet = * s ; <S2SV_ModStart> MCS_TAG_DOMAIN_PARAMS, & packet <S2SV_ModEnd> ) ; in_uint8s <S2SV_ModStart> MCS_TAG_DOMAIN_PARAMS, & packet <S2SV_ModEnd> ) ; in_uint8s <S2SV_ModStart> length ) ; if (! s_check ( s ) ) { rdp_protocol_error ( ""mcs_parse_domain_params(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> domain <S2SV_blank> parameters <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; rdp_protocol_error ( ""mcs_parse_domain_params(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> domain <S2SV_blank> parameters <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",0
1480,"<S2SV_ModStart> 1 TSRMLS_CC ) ; zend_print_zval_r ( & tmp <S2SV_ModEnd>, 1 TSRMLS_CC <S2SV_ModStart> 1 TSRMLS_CC ) ; zend_print_zval_r ( & tmp <S2SV_ModEnd>, 1 TSRMLS_CC <S2SV_ModStart> 1 TSRMLS_CC ) ; zend_print_zval_r ( & tmp <S2SV_ModEnd>, 1 TSRMLS_CC ) <S2SV_ModStart> 1 TSRMLS_CC ) ; <S2SV_ModEnd> zr_print_zval_r ( & <S2SV_ModStart> 1 TSRMLS_CC ) ; zend_print_zval_r ( & tmp <S2SV_ModEnd>, 1 TSRMLS_CC ) <S2SV_ModStart> } else { zend_print_zval_r ( & tmp <S2SV_ModEnd>, 1 TSRMLS_CC ) <S2SV_ModStart> 1 TSRMLS_CC ) ; <S2SV_ModEnd> zr_print_zval_r ( & <S2SV_ModStart> 1 TSRMLS_CC ) ; <S2SV_ModEnd> zr_print_zval_r ( & <S2SV_ModStart> 1 TSRMLS_CC ) ; <S2SV_ModEnd> zr_print_zval_r ( & <S2SV_ModStart> 1 TSRMLS_CC ) ;",0
1481,<S2SV_ModStart> char buffer [ 79 <S2SV_ModEnd> ] ; int <S2SV_ModStart> = VPX_IMG_FMT_I420 ; if ( only_420 ) _y4m -> vpx_fmt = VPX_IMG_FMT_I420 <S2SV_ModEnd> ; if ( <S2SV_ModStart> = 12 ; if ( only_420 ) _y4m -> vpx_fmt = VPX_IMG_FMT_I420 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> vpx_bps = 12 ; if ( _y4m -> vpx_fmt == VPX_IMG_FMT_I420 ) _y4m -> vpx_fmt = VPX_IMG_FMT_I420 <S2SV_ModEnd> ; if ( <S2SV_ModStart> = 12 ; if ( only_420 ) _y4m -> vpx_fmt = VPX_IMG_FMT_I420 ; if ( _y4m -> vpx_fmt == VPX_IMG_FMT_I420 ) _y4m -> vpx_fmt = VPX_IMG_FMT_I420 <S2SV_ModEnd> ; if ( <S2SV_ModStart> -> chroma_fmt,0
1482,"<S2SV_ModStart> obj * otmp ; if ( strlen ( buf ) >= sizeof ( struct obj ) ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; }",0
1483,"<S2SV_ModStart> { long long <S2SV_ModEnd> directory_table_end, table_start <S2SV_ModStart> 0 ) return FALSE <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( read_uids_guids ( & directory_table_end, & table_start ) == FALSE ) return FALSE ; if ( parse_exports_table ( & directory_table_end, & table_start ) == FALSE ) return FALSE ; if ( read_fragment_table ( & directory_table_end, & table_start ) == FALSE ) return FALSE ; if ( read_inode_table ( directory_table_end, sBlk. s. inode_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( directory_table_end, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( directory_table_end, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( directory_table_end, sBl",0
1484,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct env * <S2SV_ModEnd> createenv ( const <S2SV_ModStart> root ) ; if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ]!= NULL ; i ++ ) { struct envnode * node ; size_t len ; len = strlen ( e ) ; if ( len > sizeof ( keybuf ) - 1 ) continue ; node = createnode ( keybuf, eq + 1 ) ; if ( node == NULL ) continue ; node = createnode ( keybuf, eq + 1 ) ; if ( node == NULL ) continue ; node = createnode ( keybuf, eq + 1 ) ; if ( node == NULL ) continue ; node = createnode ( keybuf, eq + 1 ) ; if ( node == NULL ) continue ; node = createnode ( keybuf, eq + 1 ) ; if ( node == NULL ) continue ; node = createnode ( keybuf, eq + 1 ) ; if ( RB_INSERT ( envtree, & env -> root, node ) ) { freenode ( node ) ; } else { env -> count ++ ; }",0
1485,"<S2SV_ModStart> -> seg ; vpx_clear_system_state <S2SV_ModEnd> ( ) ; <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> = SEGMENT_DELTADATA ; vp9_disable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; vp9_set_segdata ( seg, segment, SEG_LVL_ALT_Q, qindex_delta ) ; vp9_clearall_segfeatures ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vp9_disable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> base_qindex, cm -> base_qindex, in_frame_q_adj_ratio [ segment ] ) ; vp9_enable_segfeature ( seg, segment, SEG_LVL_ALT_Q ) ; vp9_set_segdata",0
1486,"<S2SV_ModStart> return 0 ; Interactive_type = make_type ( ""Interactive"", mod_type, Interactive_fields, 1 ) ; if (! Interactive_type ) return 0 ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; Suite_type = make_type ( ""Suite"", mod_type, Suite_fields, 1 ) ; if (! Suite_type ) return 0 ; FunctionDef_type = make_type ( ""FunctionDef"", stmt_type, FunctionDef_fields, 5 ) ; if (! FunctionDef_type ) return 0 ; AsyncFunctionDef_type = make_type ( ""AsyncFunctionDef"", stmt_type, AsyncFunctionDef_fields, 5 ) ; if (! AsyncFunctionDef_type ) return 0 ; ClassDef_type = make_type ( ""ClassDef"", stmt_type, ClassDef_fields, 5 ) ; if (! ClassDef_type ) return 0 ; Return_type = make_type ( ""Return"", stmt_type, Return_fields, 1 ) ; if (! Return_type )",0
1487,"<S2SV_ModStart> O_WRONLY | O_CREAT | O_TRUNC <S2SV_ModEnd>, S_IRUSR | <S2SV_ModStart> S_IROTH ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( logfile_fd, ""btsnoop\\0\\0\\0\\0\\1\\0\\0\\x3\\xea"", 16 )",0
1488,<S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 4 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 2 ; <S2SV_ModEnd> break ; } <S2SV_ModStart> += 2 ; <S2SV_ModEnd> break ; } <S2SV_ModStart> += 2 ; <S2SV_ModEnd> break ; },0
1489,<S2SV_ModStart> ) ; } ++ x -> ymode_count [ m ] ; ++ x -> uv_mode_count [ uvm ] ;,0
1490,"<S2SV_ModStart> ) ; } if ( sr -> fid_ofile == NULL ) { smbsr_error ( sr, NT_STATUS_INVALID_HANDLE, ERRDOS, ERRbadfid ) ; return ( SDRC_ERROR ) ; } <S2SV_ModStart> file ) ; <S2SV_ModEnd> mutex_exit ( &",0
1491,<S2SV_ModStart> ; if ( stb. st_nlink > 0 && stb. st_nlink > 0 && stb. st_nlink <S2SV_ModStart> ; if ( stb. st_nlink > 0 && stb. st_nlink > 0 && stb. st_nlink <S2SV_ModStart> ; if ( stb. st_nlink > 0 && stb. st_nlink > 0 && stb. st_nlink > 0 && stb. st_nlink > 0 && stb. st_nlink > 0 && stb. st_nlink > 0 && stb. st_nlink <S2SV_ModStart> ; if ( stb. st_nlink > 0 && stb. st_nlink > 0 && stb. st_nlink > 0 && stb. st_nlink > 0 && stb. st_nlink > 0 && stb. st_nlink > 0 && stb. st_nlink > 0 && stb. st_nlink > 0 && stb. st_nlink > 0 && stb. st_nlink > 0 && stb. st_nlink > 0 && stb. st_nlink,0
1492,"<S2SV_ModStart> cinput ) { <S2SV_ModEnd> char * s <S2SV_ModStart> * s, * <S2SV_ModStart> * t, * StartClean <S2SV_ModEnd> ; double * <S2SV_ModStart> ++ ; outpos = outputbuffer ; outpos += sprintf ( outpos, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"", s, t, TERMCHAR ) ; if ( * s == '0' && s [ 1 ] == '[' ) { if ( strcmp ( nameobject, ""AxodrawWantsPDF"" ) == 0 ) { identification = 1 ; outpos += sprintf ( outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", VERSION, SUBVERSION ) ; fprintf ( outfile, ""%s"", outputbuffer ) ; return ( 0 ) ; } } else { fprintf ( stderr, ""%s: <S2SV_blank> Illegal <S2SV_blank> request <S2SV_blank> in <S2SV_blank> identification <S2SV_blank> string <S2SV_blank> [0]: <S2SV_blank> %s\\n"", axohelp, nameobject ) ; return ( - 1 ) ; } } StartClean = outpos ; nameobject = t ; while ( * t!='<S2SV_blank>'&& * t!= '\\n' ) t ++ ; * t ++ = 0 ;",0
1493,"<S2SV_ModStart> segs ) { <S2SV_ModEnd> u32 hash, <S2SV_ModStart>, id ; net_get_random_once ( & ip_idents_hashrnd, sizeof ( ip_idents_hashrnd ) ) ; <S2SV_ModStart>, id ; hash = jhash_3words ( ( __force u32 ) iph -> daddr, ( __force u32 ) iph -> saddr, ( __force u32 ) iph -> protocol ^ net_hash_mix ( net ), ip_idents_hashrnd ) ; id = ip_idents_reserve ( hash, segs ) ; iph -> id = htons ( id ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1494,"<S2SV_ModStart> expr_ty step ; int res ; <S2SV_ModStart> int res ; tmp = _PyObject_GetAttrId ( obj, & PyId_lower ) ; if ( tmp == NULL ) goto failed ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { lower = NULL ; } if ( exists_not_none ( obj, & PyId_upper ) ) { int res ; tmp = _PyObject_GetAttrId ( obj, & PyId_upper ) ; if ( tmp == NULL ) goto failed ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { upper = NULL ; } if ( exists_not_none ( obj, & PyId_step ) ) { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { step = NULL ; } * out = Slice ( lower, upper, step, arena ) ; if (",0
1495,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",0
1496,"<S2SV_ModStart> = gecos ; # endif <S2SV_ModStart> 0 ) { warn ( ""Finger <S2SV_blank> information <S2SV_blank> *NOT* <S2SV_blank> changed. <S2SV_blank> <S2SV_blank> Try <S2SV_blank> again <S2SV_blank> later.\\n"" ) ; return - 1 ; }",0
1497,<S2SV_ModStart> vns ) { struct ieee80211_radiotap_header * radiotap_header = ( struct ieee80211_radiotap_header * ) get_zeroed_page ( & radiotap_header -> it_version ) ; if ( max_length < sizeof ( * radiotap_header ) ) return - EINVAL ; iterator -> _rtheader = radiotap_header ; iterator -> _max_length = get_unaligned_le16 ( & radiotap_header -> it_len ) ; iterator -> _arg_index = 0 ; iterator -> _bitmap_shifter = get_unaligned_le32 ( & radiotap_header -> it_present ) ; iterator -> _arg += sizeof ( * radiotap_header ) ; iterator -> _reset_on_ext = 1 ; if ( iterator -> _bitmap_shifter & ( 1 << IEEE80211_RADIOTAP_EXT ) ) { while ( get_unaligned_le32 ( iterator -> _arg ) & ( 1 << IEEE80211_RADIOTAP_EXT ) ) { iterator -> _arg +=,0
1498,"<S2SV_ModStart> int err ; list_for_each_entry ( iter, & alink -> dscp_map, list ) { u32 cmask ; <S2SV_ModStart> ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; nfp_abm_u32_knode_delete ( alink, knode ) ; NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; } cmask = iter -> mask & mask ; if ( ( iter -> val & cmask ) == ( val & cmask ) && iter -> band!= knode -> res -> classid ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; } if ( ( iter -> val & cmask ) == ( val & cmask ) && iter -> band!= knode -> res -> classid ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; }",0
1499,"<S2SV_ModStart> } ZEND_FETCH_RESOURCE ( im <S2SV_ModEnd>, gdImagePtr, <S2SV_ModStart>, le_gd ) ; <S2SV_ModEnd> if ( gdImageTrueColor <S2SV_ModStart> ) ) { int x, y, c ; c = gdImageGetPixel ( im, x, y ) ; c = gdImageGetPixel ( im, x, y ) ; c = gdImageGetPixel ( im, x, y ) ; c = gdImageGetPixel ( im, x, y ) ; c = gdTrueColorGetPixel ( c ) ; c = gdImageGetPixel ( im, x, y ) ; c = gdImageGetPixel ( im, x, y ) ; gdImageSetPixel ( im, x, y, c ) ; gdImageSetPixel ( im, x, y, c ) ; c = gdImageGetPixel ( im, x, y ) ; gdImageSetPixel ( im, x, y, c ) ; c = gdImageGetPixel ( im, x, y ) ; c = gdTrueColorGetPixel ( c ) ; c = gdImageGetPixel ( im, x, y ) ; c = gdImageGetPixel ( im, x, y ) ; gdImageSetPixel ( im, x,",0
1500,<S2SV_ModStart> cfg. g_pass = pass <S2SV_ModEnd>? VPX_RC_LAST_PASS : <S2SV_ModStart> : VPX_RC_ONE_PASS ; stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> cx_time = 0 ; stream -> nbytes = 0 ; stream -> frames_out = 0 ; } else { stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> cx_time = 0 ; stream -> nbytes = 0 ; stream -> frames_out = 0 ; } else { stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> config. cfg. rc_twopass_stats_in =,0
1501,"<S2SV_ModStart> new_data_len ) ; if ( g_str_has_prefix ( new_data, "".service"" ) ) { g_error_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( ""export-desktop-XXXXXX"" ) ) ), ""export-desktop-XXXXXX"" ) ) ) ; goto out ; } if ( g_str_has_prefix ( new_data, "".service"" ) ) ) { g_error_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( g_err_msg ( ""export-desktop-XXXXXX"" ) ), ""export-desktop-XXXXXX"" ) ) ) ; goto out ; } if ( g_str_has_prefix ( new_data, "".service"" ) ) ) { g_error_msg ( g_err",0
1502,"<S2SV_ModStart> data_end ) { const <S2SV_ModStart> tile_col ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = cm -> log2_tile_cols ; vpx_memset ( cm -> above_context, 0, sizeof ( * cm -> above_context ) * MAX_MB_PLANE * 2 * aligned_cols ) ; memset ( cm -> above_seg_context, 0, sizeof ( * cm -> above_seg_context ) * aligned_cols ) ; memset ( cm -> above_seg_context, 0, sizeof ( * cm -> above_seg_context ) * aligned_cols ) ; memset ( cm -> above_seg_context, 0, sizeof ( * cm -> above_seg_context ) * aligned_cols ) ; memset ( cm -> above_seg_context, 0, sizeof ( * cm -> above_seg_context",0
1503,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static VP9Decoder <S2SV_ModEnd> * vp9_decoder_create ( <S2SV_ModStart> ; VP9Decoder * const pbi = vpx_memalign ( 32, sizeof ( * pbi ) ) ; VP9_COMMON * const cm = pbi? pbi -> common : NULL ; if (! pbi ) return NULL ; vpx_zero ( * pbi ) ; if ( setjmp ( cm -> error. jmp ) ) { cm -> error. setjmp = 1 ; vpx_initialize_dec ( ) ; vpx_rtcd ( ) ; memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_video_frame = 0 ; cm -> oxcf = * oxcf ; pbi -> ready_for_new_data = 1 ; pbi -> decoded_key_frame = 0 ; vp9_init_dequantizer ( cm ) ; cm -> error. setjmp = 0 ; vp9_loop_filter_init ( cm ) ; cm -> error. setjmp = 0 ; vp9_worker_",0
1504,"<S2SV_ModStart> -> dref ) { GF_LOG <S2SV_ModEnd> ( GF_LOG_ERROR, <S2SV_ModStart> GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" <S2SV_ModEnd> ) ) ; <S2SV_ModStart> -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } else { ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
1505,<S2SV_ModStart> -> count ; kfree ( new_fpl ) ;,0
1506,"<S2SV_ModStart> req ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> -> opt ; opt = rcu_dereference_protected ( req_inet -> inet_opt, sock_owned_by_user ( req ) ) <S2SV_ModEnd> ; if (",0
1507,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> tree2tok ( struct <S2SV_ModStart> { const vpx_tree_index <S2SV_ModEnd> j = tree <S2SV_ModStart> ++ ] ; if ( j <= 0 ) { tokens [ - j ]. value = v ; tokens [ - j ]. len = l ; } else { tree2tok ( tokens, tree, i, v, l ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1508,"<S2SV_ModStart> ; if ( ctx -> frame_parallel_decode ) { <S2SV_ModStart> = validate_img ( ctx <S2SV_ModEnd>, img ) <S2SV_ModStart> VPX_CODEC_INVALID_PARAM ; } <S2SV_ModStart> VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_GOLD_FLAG ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP9_ALT_FLAG ; vp9_use_as_reference ( ctx -> cpi, ref ) ; } if ( flags & ( VP8_EFLAG_NO_UPD_LAST | VP8_EFLAG_NO_UPD_GF | VP8_EFLAG_NO_UPD_ARF ) ) { int upd = 7 ; if ( flags & VP8_EFLAG_NO",0
1509,<S2SV_ModStart> wqh ) ; mutex_init ( & ctx -> lock ) ;,0
1510,"<S2SV_ModStart> mount * child <S2SV_ModEnd>, * p <S2SV_ModStart> int err ; hlist_for_each_entry_safe ( child, n, & tree_list, mnt_hash ) { struct mount * q ; hlist_del_init ( & child -> mnt_hash ) ; q = __lookup_mnt_last ( & child -> mnt_parent -> mnt, child -> mnt_mountpoint ) ; umount_tree ( child, UMOUNT_SYNC ) ; } lock_mount_hash ( ) ; err = propagate_mnt ( dest_mnt, dest_mp, source_mnt, & tree_list ) ; if ( err ) goto out_cleanup_ids ; for ( p = source_mnt ; p ; p = next_mnt ( p, source_mnt ) ) set_mnt_shared ( p ) ; attach_mnt ( source_mnt, parent_path ) ; attach_mnt ( source_mnt, parent_path ) ; attach_mnt ( source_mnt, parent_path ) ; attach_mnt ( source_mnt, parent_path ) ; attach_mnt ( source_mnt, parent_path ) ; attach_mnt ( source_mnt, parent_path",0
1511,"<S2SV_ModStart> { ret = check_tag_len <S2SV_ModEnd> ( asn1, <S2SV_ModStart>, & len ) ; if ( ret ) goto error ; if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } newseq = realloc ( seq, ( count + 1 ) * elemtype -> size ) ; if ( newseq == NULL ) { ret = ENOMEM ; goto error ; } seq = newseq ; elem = ( char * ) seq + count * elemtype -> size ; memset ( elem, 0, elemtype -> size ) ; ret = decode_atype ( & t, contents, clen, elemtype, elem ) ; if ( ret ) goto error ; } newseq = realloc ( seq, ( count + 1 ) * elemtype -> size ) ; if ( newseq == NULL ) { ret = ENOMEM ; goto error ; } seq = newseq ; elem = ( char * ) seq + count * elemtype -> size ; memset ( elem, 0, elemtype -> size ) ; memset ( elem, 0, elemtype -> size ) ; ret =",0
1512,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> fadst16_8col ( __m128i <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> fadst16_8col ( __m128i <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> fadst16_8col ( __m128i,0
1513,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> frame_max_bits ( const <S2SV_ModStart> ( int64_t ) rc <S2SV_ModEnd> -> av_per_frame_bandwidth *,0
1514,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
1515,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> Huff_transmit ( huff_t <S2SV_ModStart> NULL, fout <S2SV_ModEnd> ) ; }",0
1516,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_superblock ( VP9_COMP <S2SV_ModStart>, int output_enabled <S2SV_ModEnd>, int mi_row <S2SV_ModStart> BLOCK_SIZE bsize ) { VP9_COMMON * const cm = & cpi -> common ; MACROBLOCK * const x = & cpi -> td. <S2SV_ModStart> -> common ; <S2SV_ModEnd> MACROBLOCKD * const <S2SV_ModStart> -> e_mbd ; <S2SV_ModEnd> int segment_id = <S2SV_ModStart> ] ; const int mi_height = num_8x8_blocks_wide_lookup [ bsize ] ; const int mi_width = num_8x8_blocks_high_lookup [ bsize ] ; const int mi_height = num_8x8_blocks_high_lookup [ bsize ] ; const int mi_width = num_8x8_blocks_wide_lookup [ bsize ] ; const int mi_height = num_8x8_blocks_high_lookup [ bsize ] ; const int mi_width = num_8x8_blocks_wide_lookup [ bsize ] ; const int mi_height = num_8x8_blocks_high_lookup [",0
1517,"<S2SV_ModStart> key ) { <S2SV_ModEnd> unsigned char key2 <S2SV_ModStart> 8 ] ; <S2SV_ModEnd> struct crypto_skcipher * <S2SV_ModStart> tfm_des = crypto_alloc_skcipher <S2SV_ModEnd> ( ""ecb(des)"", <S2SV_ModStart> 0, CRYPTO_ALG_ASYNC ) ; if ( IS_ERR ( tfm_des ) ) { rc = PTR_ERR ( tfm_des ) ; cifs_dbg ( VFS, ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> des <S2SV_blank> crypto <S2SV_blank> API\\n"" ) ; goto smbhash_err ; } req = skcipher_request_alloc ( tfm_des, GFP_KERNEL ) ; if (! req ) { rc = - ENOMEM ; cifs_dbg ( VFS, ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> des <S2SV_blank> crypto <S2SV_blank> API\\n"" ) ; goto smbhash_err ; } crypto_skcipher_setkey ( tfm_des, key2, 8 ) ; sg_init_one ( & sgin, in, 8 ) ; skcipher_request_set_callback ( req, 0, NULL, NULL ) ; rc = crypto_skcipher_encrypt ( req ) ; if ( rc ) cifs_dbg (",0
1518,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. ptr <S2SV_ModStart> psf -> header. ptr <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModEnd> ++ ] = <S2SV_ModStart> psf -> header. ptr <S2SV_ModEnd> ++ ] =,0
1519,"<S2SV_ModStart> value ; int position <S2SV_ModEnd>, zeroes, <S2SV_ModStart>, i, j ; char bits [ 65 ] ; if ( ctx -> trace_enable ) position = get_bits_count ( gbc ) ; if ( position < 0 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( ctx -> trace_enable ) position = get_bits_count (",0
1520,<S2SV_ModStart> += delta ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1521,<S2SV_ModStart> ) ) { if ( kvm_read_guest_id ( vcpu ) == 0 || kvm_read_guest_id ( vcpu ) == 0 || kvm_read_guest_id ( vcpu ) == 0 || kvm_read_guest_id ( vcpu ) == 0 || kvm_read_guest_id ( vcpu ) == 1 || kvm_read_guest_id ( vcpu ) == 1 || kvm_read_guest_id ( vcpu ) == 1 || kvm_read_guest_id ( vcpu ) == 0 || kvm_read_guest_id ( vcpu ) == 1 || kvm_read_guest_id ( vcpu ) == 0 || kvm_read_guest_id ( vcpu ) == 0 || kvm_read_guest_id ( vcpu ) == 1 || kvm_read_guest_id ( vcpu ) == 1 || kvm_read_guest_id ( vcpu ) == 1 || kvm_read_guest_id ( vcpu ) == 0 || kvm_read_guest_id ( vcpu ) == 1 || kvm_read_guest_id,0
1522,"<S2SV_ModStart> { } else if ( pregchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> ; } else if ( pregchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> ; } else if ( pregchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> ; } else if ( pregchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> ; } else if ( pregchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> ; } else if ( pregchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> ; } else if ( pregchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> ; } else if ( pregchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> ; } else if ( pregchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"",",0
1523,"<S2SV_ModStart> -> http_contentlen. ptr = NULL, packet -> http_contentlen.",0
1524,<S2SV_ModStart> path ) ; <S2SV_ModEnd> out : return,1
1525,"<S2SV_ModStart> ++ r ; if <S2SV_ModEnd> ( ( int <S2SV_ModStart> dim ) > entries ) { r = ( int ) floor ( pow ( ( float ) entries, dim ) ) ; } <S2SV_ModEnd> return r ;",0
1526,"<S2SV_ModStart>, y, MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> dds_info -> width - x ), MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart> dds_info -> height - y ), exception ) ; if ( q == ( PixelPacket * ) NULL ) return MagickFalse ; c0 = ReadBlobLSBShort ( image ) ; c1 = ReadBlobLSBShort ( image ) ; bits = ReadBlobLSBLong ( image ) ; CalculateColors ( c0, c1, & colors, MagickFalse ) ; for ( j = 0 ; j < 4 ; j ++ ) { if ( ( j + i ) < ( ssize_t ) dds_info -> width && ( j + i ) < ( ssize_t ) dds_info -> height ) { code = ( unsigned char ) ( ( bits >> ( ( j * 4 + i ) * 2 ) ) ) & 0x3 ) ; SetPixelRed ( q, ScaleCharToQuantum ( colors. r [ code ] ) ; SetPixelGreen ( q, ScaleCharToQuantum ( colors. g [ code ] ) ) ; SetPixelBlue ( q, ScaleCharToQuantum ( colors. b [ code ]",0
1527,"<S2SV_ModStart> drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), & opt -> opt, skb ) ) goto inhdr_error ; opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if (! opt -> optlen ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INHDRERRORS ) ; goto drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), & opt -> opt, skb ) ) goto inhdr_error ; opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if (! opt -> optlen ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INDISCARDS ) ; goto drop ; } <S2SV_ModEnd> return 0 ;",0
1528,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> == EINTR ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> == EINTR ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> == EINTR ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> == EINTR ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY (",0
1529,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> %12.3f <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
1530,<S2SV_ModStart> cfg ) { <S2SV_ModEnd> memset ( cfg <S2SV_ModStart> ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1531,<S2SV_ModStart> ; if ( sm_info -> seg0_blkaddr + sm_info -> segment_count > sbi -> blocks_per_seg * sbi -> blocks_per_seg * sbi -> blocks_per_seg * sbi -> blocks_per_seg * sbi -> blocks_per_seg * sbi -> blocks_per_seg * sbi -> blocks_per_seg * sbi -> blocks_per_seg * sbi -> blocks_per_seg * sbi -> blocks_per_seg * sbi -> blocks_per_seg * sbi -> blocks_per_seg * sbi -> blocks_per_seg * sbi -> blocks_per_seg * sbi -> blocks_per_seg * sbi -> blocks_per_seg * sbi -> blocks_per_seg * sbi -> blocks_per_seg * sbi -> blocks_per_seg * sbi -> blocks_per_seg * sbi -> blocks_per_seg * sbi -> blocks_per_seg * sbi -> blocks_per_seg * sbi -> blocks_per_seg * sbi -> blocks_per_seg * sbi -> blocks_per,0
1532,"<S2SV_ModStart> ) ) { sendClean ( ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", x11, x12, x21, x22, x, y ) ; } else { sendClean ( ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", x11, x12, x21, x22, x, y ) ; }",0
1533,"<S2SV_ModStart> ; WLog_VRB ( AUTODETECT_TAG <S2SV_ModEnd>, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" )",0
1534,<S2SV_ModStart> ; # endif # if CONFIG_TEMPORAL_DENOISING if ( cpi -> cur_buf -> flags & YV12_FLAG_TEMPORAL_DENOISING ) { vp8_writel ( vp8_writel ( vp8_writel ( vp8_writel ( vp8_writel ( vp8_writel ( vp8_writel ( vp8_writel ( vp8_writel ( vp8_writel ( vp8_writel ( vp8_writel ( vp8_writel ( vp8_writel ( vp8_writel ( vp8_writel ( vp8_writel ( vp8_writel ( vp8_writel ( vp8_writel ( vp8_writel ( vp8_writel ( vp8_writel ( vp8_writel ( vp8_writel ( vp8_writel ( vp8_writel ( vp8_writel ( vp8_writel ( vp8_writel ( vp8_writel ( vp8_writel ( vp8_writel ( vp8_writel ( vp8_writel ( vp,0
1535,<S2SV_ModStart> ( pvc ) ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; <S2SV_ModStart> ether_setup ) ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ;,0
1536,"<S2SV_ModStart> * data ; struct stream packet = * s ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",0
1537,"<S2SV_ModStart> -> b_multithreaded_rd ) vpx_de_alloc_temp_buffers <S2SV_ModEnd> ( pbi,",0
1538,"<S2SV_ModStart> ; if ( form -> type == FORM_TEXTAREA ) { int n = a -> y - buf -> currentLine -> linenumber ; if ( n < 0 ) for ( ; l && n ; l = l -> prev, n ++ ) ; else if ( n < 0 ) for ( ; l && n ; l = l -> next, n -- ) ; else if ( n < 0 ) for ( ; l && n ; l = l -> prev, n ++ ) ; else if ( n < 0 ) for ( ; l && n ; l = l -> prev, n ++ ) ; else if ( n < 0 ) for ( ; n < 0 ) for ( ; l && n ; l = l -> prev, n -- ) ; else if ( n < 0 ) for ( ; l && n ; l = l -> next, n ++ ) ; else if ( n < 0 ) for ( ; l && n ; l = l -> prev, n ++ ) ; else if ( n < 0 ) for ( ; l && n ; l = l -> prev, n ++ ) ; else if ( n < 0 ) for ( ;",0
1539,<S2SV_ModStart> { if ( ( <S2SV_ModStart> portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize += ( portBYTE_ALIGNMENT <S2SV_ModEnd> - ( xWantedSize <S2SV_ModStart> 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT <S2SV_ModEnd> - ( xWantedSize <S2SV_ModStart> 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } } else { mtCOVERAGE_TEST_MARKER ( ) ; } } if ( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) ) { pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize ) ; pxNewBlockLink -> xBlockSize = pxBlock -> xBlockSize - xWantedSize ) ; pxNewBlockLink -> xBlockSize = xWantedSize ; prvInsertBlockIntoFreeList ( ( pxNewBlock,0
1540,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
1541,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1542,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpDiff ( TIFF <S2SV_ModStart> ( cc % <S2SV_ModEnd> ( bps * <S2SV_ModStart> stride ) ) == 0 ) ; if ( tmp == ( uint8 * ) _TIFFmalloc ( cc ) ) { TIFFErrorExt ( tif -> tif_file, ""MemoryAllocationFailed"" ) ; return 0 ; } if ( tmp == ( uint8 * ) _TIFFmalloc ( cc ) ) { TIFFErrorExt ( tif -> tif_file, ""MemoryAllocationFailed"" ) ; return 0 ; } if ( tmp == ( uint8 * ) _TIFFmalloc ( cc ) ; if ( tmp == ( uint8 * ) _TIFFmalloc ( cc ) ) { TIFFErrorExt ( tif -> tif_file, ""MemoryAllocationFailed"" ) ; return 0 ; } if ( tmp == ( uint8 * ) _TIFFmalloc ( cc ) ) { TIFFErrorExt ( tif -> tif_file, ""MemoryAllocationFailed"" ) ; return 0 ; } if ( tmp == ( uint8 * ) _TIFFmalloc ( cc ) ) { TIFFErrorExt ( tif -> tif_",0
1543,"<S2SV_ModStart> s ) { struct stream packet = * s ; <S2SV_ModStart> int i ; if (! s_check_rem ( s, num_updates ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> bitmap <S2SV_blank> updates <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> ++ ) { if (! s_check_rem ( s ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> bitmap <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } in_uint16_le ( s, left ) ; in_uint16_le ( s, top ) ; in_uint16_le ( s, right ) ; in_uint16_le ( s, bottom ) ; in_uint16_le ( s, width ) ; in_uint16_le ( s, height ) ; in_uint16_le ( s, bpp ) ; Bpp = ( bpp + 7 ) / 8 ; if (! s_check_rem ( s ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume",0
1544,"<S2SV_ModStart> } else { if ( smatch ( option, ""filename"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Filename <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long. <S2SV_blank> Must <S2SV_blank> be <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> 10K"" ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if ( smatch ( option, ""level"" ) ) { level = ( ssize ) getnum ( ovalue ) ; } else if ( smatch ( option, ""backup"" ) ) { flags |= MPR_LOG_BACKUP ; } else if ( smatch ( option, ""anew"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""stamp"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""path"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Path <S2SV_blank> is <S2SV_blank> too <S2SV_blank> long. <S2SV_blank> Must <S2SV_blank> be <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> 10K"" ) ; return MPR_ERR_BAD",0
1545,"<S2SV_ModStart> tx_size, vpx_coeff_stats <S2SV_ModEnd> * coef_branch_ct ) <S2SV_ModStart> coef_branch_ct ) { vpx_coeff_probs_model <S2SV_ModEnd> coef_probs = cpi <S2SV_ModStart> -> frame_coef_probs [ tx_size ] ; vpx_coeff_count * coef_counts = cpi -> coef_counts [ tx_size ] ; unsigned int ( * eob_branch_ct ) [ REF_TYPES ] [ COEF_BANDS ] [ COEFF_CONTEXTS ] ; vpx_tree_probs_from_distribution ( vp9_coef_tree, coef_counts [ i ] [ j ] [ k ] [ l ] - coef_branch_ct [ i ] [ j ] [ k ] [ 0 ]",0
1546,"<S2SV_ModStart> } ; assert ( name ) ; <S2SV_ModStart> name ) ; if ( tc. c_iflag & IUTF8 ) r = tcsetattr ( fd, TCSANOW, & tc ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; if ( r < 0 ) return log_warning_errno ( errno, ""Failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; if ( r < 0 ) return log_warning_errno ( errno, ""Failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; r = tcsetattr ( fd, TCSANOW, & tc ) ; if ( r < 0 ) return log_warning_errno ( errno, ""Failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name )",0
1547,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> su3000_frontend_attach ( struct <S2SV_ModStart> ; if ( dvb_usb_generic_rw ( d, obuf, 3, ibuf, 1, 0 ) < 0 ) { err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; return - EIO ; } if ( dvb_usb_generic_rw ( d, obuf, 3, ibuf, 1, 0 ) < 0 ) { err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; return - EIO ; } if ( dvb_usb_generic_rw ( d, obuf, 3, ibuf, 1, 0 ) < 0 ) { err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; return - EIO ; } if ( dvb_usb_generic_rw ( d, obuf, 3, ibuf, 1, 0 ) < 0 ) { err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; return - EIO ; } if ( dvb_usb_generic_rw ( d, obuf, 3, ibuf,",0
1548,"<S2SV_ModStart> * iface, <S2SV_ModEnd> vpx_codec_enc_cfg_t * cfg <S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) && ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) && ( iface -> caps",0
1549,"<S2SV_ModStart> int stride, <S2SV_ModEnd> int uv_block_size, <S2SV_ModStart> int uv_stride ; <S2SV_ModEnd> enum mv_precision mv_precision_uv <S2SV_ModStart> int uv_stride ; if ( uv_block_size == 8 ) { uv_stride = ( stride + 1 ) >> 1 ; mv_precision_uv = MV_PRECISION_Q4 ; } else { uv_stride = ( stride + 1 ) >> 1 ; mv_precision_uv = MV_PRECISION_Q3 ; } vpx_build_inter_predictor ( y_mb_ptr, stride, & pred [ 0 ], 16, & mv, scale, 16, 16, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vpx_build_inter_predictor ( u_mb_ptr, uv_stride, & pred [ 256 ], uv_block_size, & mv, scale, uv_block_size, uv_block_size, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vpx_build_inter_predictor ( v_mb_ptr, uv_stride, & pred [ 512 ], uv_block_size",0
1550,"<S2SV_ModStart> ; mungspaces ( strncmp <S2SV_ModEnd> ( buf, <S2SV_ModStart> origbuf ) ) == 0 ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } bufp = find_optparam ( origbuf ) ; if (! bufp ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') bufp = find_optparam ( origbuf ) ; if (! bufp ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } bufp = find_optparam ( origbuf ) ; if (! bufp ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') bufp = find_optparam ( origbuf ) ; if (! bufp ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'",0
1551,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> cJSON * <S2SV_ModEnd> cJSON_CreateFloatArray ( double <S2SV_ModStart> count ; ++ i <S2SV_ModEnd> ) { n <S2SV_ModStart> cJSON_CreateFloat ( numbers [ i ] ) ; if (! i ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; } return a ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1552,"<S2SV_ModStart> tk_status ) ; if ( status == NLM_LCK_DENIED_GRACE_PERIOD ) { rpc_delay ( task, NLMCLNT_GRACE_WAIT ) ; goto retry_rebind ; } if ( status == NLM_LCK_GRANTED ) printk ( KERN_WARNING ""lockd: <S2SV_blank> unexpected <S2SV_blank> unlock <S2SV_blank> status: <S2SV_blank> %d\\n"", status ) ;",0
1553,"<S2SV_ModStart>, n ) ; if ( w [ n - 1 ] == 0.0 ) { f -> previous_window [ i ] [ j ] = 0.0 ; } else if ( w [ n - 1 - j ] == 0.0 ) { f -> channel_buffers [ i ] [ left + j ] = f -> channel_buffers [ i ] [ left + j ] ; f -> channel_buffers [ i ] [ left + j ] = f -> channel_buffers [ i ] [ left + j ] * w [ n - 1 - j ] ; } prev = f -> previous_length ; f -> previous_length = len - right ; for ( i = 0 ; i < f -> channels ; ++ i ) for ( j = 0 ; j < len ; ++ j ) f -> channel_buffers [ i ] [ left + j ] = f -> channel_buffers [ i ] [ left + j ] ; f -> channel_buffers [ i ] [ right + j ] = f -> channel_buffers [ i ] [ right + j ] ; f -> previous_length = len - right ; for ( i = 0 ; i < f -> channels ; ++ i ) for ( j = 0 ; j <",0
1554,"<S2SV_ModStart> 4 ) ; if ( idx + 4 > len ) { return NULL ; } <S2SV_ModStart> len ) ; if ( idx + 4 + a -> num_names > len ) { size_t i ; a -> names = CHECKED_XCALLOC ( VarLenData, a -> num_names ) ; for ( i = 0 ; i < a -> num_names ; i ++ ) { size_t j ; CHECKINT32 ( idx, len ) ; a -> names [ i ]. len = GETINT32 ( buf + idx ) ; idx += 4 ; a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ; } } else { size_t i ; a -> names = CHECKED_XCALLOC ( VarLenData, a -> num_names ) ; for ( i = 0 ; i < a -> num_names ; i ++ ) { size_t j ; CHECKINT32 ( idx, len ) ; a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte (",0
1555,"<S2SV_ModStart> data_end ) { const VP9Encoder * const pbi = & pbi -> oxcf ; const <S2SV_ModStart> int num_workers = MIN ( pbi -> oxcf. tile_workers <S2SV_ModEnd>, tile_cols ) <S2SV_ModStart> int num_workers = MIN ( pbi -> oxcf. tile_workers <S2SV_ModEnd>, tile_cols ) <S2SV_ModStart> int num_workers = MIN ( pbi -> oxcf. tile_workers <S2SV_ModEnd>, tile_cols ) <S2SV_ModStart> pbi -> tile_workers <S2SV_ModEnd>, vpx_malloc ( <S2SV_ModStart> ) ) ) ; memset ( pbi -> tile_workers, 0, num_workers * sizeof ( * pbi -> tile_workers ) ) ) ; memset ( pbi -> tile_workers, 0, num_workers * sizeof ( * pbi -> tile_workers ) ) ) ; pbi -> num_tile_workers = 0 ; for ( i = 0 ; i < num_workers ; ++ i ) { VP9Worker * const worker = & pbi -> tile_workers [ i ] ; ++ pbi -> num_tile_workers ; vpx_worker_init ( worker ) ; CHECK_MEM_ERROR ( cm, worker -> data1,",0
1556,<S2SV_ModStart> + 8 ; if ( fgetc ( ifp )!= 'M' ) { fputc ( ifp ) ; return ; } <S2SV_ModStart> ( ) ; if ( fgetc ( ifp )!= 'R' ) { fputc ( ifp ) ; return ; } <S2SV_ModStart> ( ) ; if ( fgetc ( ifp )!= 'M' ) { fputc ( ifp ) ; return ; } <S2SV_ModStart> ( ) ; if ( fgetc ( ifp )!= 'M' ) { fputc ( ifp ) ; return ; },0
1557,"<S2SV_ModStart> -> seg ; const double base_q = vp9_convert_qindex_to_q ( cm -> base_qindex ) <S2SV_ModEnd> ; const int <S2SV_ModStart> = SEGMENT_DELTADATA ; vpx_clear_system_state <S2SV_ModEnd> ( ) ; <S2SV_ModStart> = SEGMENT_DELTADATA ; vpx_clear_segmentation ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vpx_clear_segfeatures ( seg ) ; vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, base_q * Q_RATIO ( i ) ) ; vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, qindex_delta ) ; vpx_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q ) ; vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, qindex_delta ) ; vpx_enable_segfeature ( seg, SEGMENT_ID ( i )",0
1558,"<S2SV_ModStart> int bychunk ; if ( bitspersample > 8 ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> different <S2SV_blank> planar <S2SV_blank> configuration <S2SV_blank> w/ <S2SV_blank> bits/sample <S2SV_blank>!= <S2SV_blank> 8\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; } if ( bitspersample == 8 ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> different <S2SV_blank> planar <S2SV_blank> configuration <S2SV_blank> w/ <S2SV_blank> bits/sample <S2SV_blank>!= <S2SV_blank> 8\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; } if ( bitspersample == 8 ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> different <S2SV_blank> planar <S2SV_blank> configuration <S2SV_blank> w/ <S2SV_blank> bits/sample <S2SV_blank>!= <S2SV_blank> 8\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; } if ( bitspersample == 8 ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> different <S2SV_blank> planar <S2SV_blank> configuration <S2SV_blank> w/ <S2SV_blank> bits/sample <S2SV_blank>!= <S2SV_blank> 8\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; }",0
1559,<S2SV_ModStart>. err_detail = <S2SV_ModEnd> error -> has_detail <S2SV_ModStart> -> has_detail? error -> <S2SV_ModEnd> detail : NULL,0
1560,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1561,"<S2SV_ModStart>, ""corrupt <S2SV_blank> BSON"" ) ; <S2SV_ModEnd> b = get_bson <S2SV_ModStart>, ""corrupt <S2SV_blank> BSON"" ) ; <S2SV_ModEnd> b = get_bson <S2SV_ModStart>, ""corrupt <S2SV_blank> BSON"" ) ; <S2SV_ModEnd> b = get_bson <S2SV_ModStart>, ""corrupt <S2SV_blank> BSON"" ) ; <S2SV_ModEnd> b = get_bson <S2SV_ModStart>, ""corrupt <S2SV_blank> BSON"" ) ; <S2SV_ModEnd> b = get_bson <S2SV_ModStart>, ""corrupt <S2SV_blank> BSON"" ) ; <S2SV_ModEnd> b = get_bson <S2SV_ModStart>, ""corrupt <S2SV_blank> BSON"" ) ; <S2SV_ModEnd> b = get_bson <S2SV_ModStart>, ""corrupt <S2SV_blank> BSON"" ) ; <S2SV_ModEnd> b = get_bson <S2SV_ModStart>, ""corrupt <S2SV_blank> BSON"" ) ; <S2SV_ModEnd> b = get_bson <S2SV_ModStart>, ""corrupt <S2SV_blank> BSON"" ) ; <S2SV_ModEnd> b = get_bson <S2SV_ModStart>, ""corrupt <S2SV_blank> BSON"" ) ; <S2SV_ModEnd> b = get_bson <S2SV_ModStart>, ""corrupt <S2SV_blank> BSON"" ) ;",0
1562,<S2SV_ModStart> * ps_cur_slice ; pocstruct_t * ps_prev_poc <S2SV_ModEnd> ; ih264d_free_dynamic_bufs (,0
1563,<S2SV_ModStart> goto out_unlock ; if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_RAWIO ) ) { if (! capable ( CAP_SYS_,0
1564,<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>. congest_packet ) ),0
1565,<S2SV_ModStart> int getnum ( const char * * fmt <S2SV_ModEnd> ) { if <S2SV_ModStart> = 0 ; if (! isdigit ( * * fmt ) ) return df ; else { int a = 0 ; do { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } while ( isdigit ( * * fmt ) ) ; if (! isdigit ( * * fmt ) ) return df ; else { int a = 0 ; do { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } while ( isdigit ( * * fmt ) ) ; if (! isdigit ( * * fmt ) ) return df ; else { int a = 0 ; do { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } while ( isdigit ( * * fmt ) ) ; if (! isdigit ( * * fmt ) ) return df ; else { int a = 0 ; do { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } while ( isdigit ( * * fmt ) ) ; },0
1566,"<S2SV_ModStart> ; markold ( g, g -> allgc, g -> reallyold ) ; markold ( g, g -> finobj, g -> finobjrold ) ; atomic ( L ) ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> survival = g -> allgc ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> survival = g -> allgc ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ;",0
1567,<S2SV_ModStart> = 0 ; else { ret = <S2SV_ModEnd> - EIO ; <S2SV_ModStart> - EIO ; },0
1568,"<S2SV_ModStart> ; ( void ) phase <S2SV_ModEnd> ; if ( <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } <S2SV_ModStart> ; if ( safe_memcmp ( buffer, ssl_request, sizeof ssl_request ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } s_write ( c, c -> local_wfd. fd, ssl_ok, sizeof ssl_ok ) ; return NULL ; } if ( safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } if ( safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_",0
1569,"<S2SV_ModStart> int cib_tls_signon ( cib_t <S2SV_ModEnd> * cib, <S2SV_ModStart> struct sockaddr_in addr <S2SV_ModEnd> ; int rc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> struct mainloop_fd_callbacks cib_fd_callbacks = <S2SV_ModStart> = NULL ; connection -> socket = 0 ; connection -> session = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR",0
1570,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; cpi -> frames_till_gf_update_due = 0 ; cpi -> non_gf_bitrate_adjustment = 0 ; cpi -> prob_last_coded = 128 ; cpi -> prob_gf_coded = 63 ; cpi -> prob_intra_coded = 63 ; cpi -> prob_gf_coded = 128 ; cpi -> prob_gf_coded = 63 ; cpi -> temporal_pattern_counter = 0 ; cpi -> frames_till_gf_update_due = 0 ; cpi -> temporal_pattern_counter = 0 ; memcpy ( cpi -> base_skip_false_prob, vp8cx_base_skip_false_prob ) ; memcpy ( cpi -> base_skip_false_prob, vp8cx_base_skip_false_prob ) ; memcpy ( cpi -> base_skip_false_prob, vp8cx_base_skip_false_prob ) ; memcpy ( cpi -> base_skip_false_prob, vp8cx_base",0
1571,"<S2SV_ModStart> & __FAIL_ADDR_MASK ; perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS <S2SV_ModEnd>, 1, <S2SV_ModStart> ; perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS_MIN <S2SV_ModEnd>, 1, <S2SV_ModStart> ; perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS_OVERFLOW <S2SV_ModEnd>, 1, <S2SV_ModStart> ; perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS_OVERFLOW <S2SV_ModEnd>, 1, <S2SV_ModStart> 1, 0, <S2SV_ModEnd> regs, address <S2SV_ModStart> ; perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS_OVERFLOW <S2SV_ModEnd>, 1, <S2SV_ModStart> ; perf_event ( PERF_COUNT_SW_PAGE_FAULTS_OVERFLOW <S2SV_ModEnd>, 1, <S2SV_ModStart> ; perf_event ( PERF_COUNT_SW_PAGE_FAULTS_OVERFLOW <S2SV_ModEnd>, 1, <S2SV_ModStart> ; perf_event ( PERF_COUNT_SW_PAGE_FAULTS_OVERFLOW <S2SV_ModEnd>, 1,",0
1572,"<S2SV_ModStart> & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ) ; } <S2SV_ModStart> & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ) ; } if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x08 ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ) ; } if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"" ) )",0
1573,<S2SV_ModStart> case EXPR_NOT : * set_rtrn = false ; <S2SV_ModStart> case EXPR_ADD : * set_rtrn =! * set_rtrn ; return ok <S2SV_ModEnd> ; case EXPR_SUBTRACT <S2SV_ModStart> case EXPR_SUBTRACT : * set_rtrn =! * set_rtrn ; return ok <S2SV_ModEnd> ; case EXPR_UNARY_PLUS <S2SV_ModStart> case EXPR_UNARY_MINUS : * set_rtrn =! * set_rtrn ; if (! * set_rtrn ) * set_rtrn =! * set_rtrn ; return ok <S2SV_ModEnd> ; case EXPR_UNARY_MINUS <S2SV_ModStart> case EXPR_UNARY_MINUS : * set_rtrn =! * set_rtrn ; return ok <S2SV_ModEnd> ; case EXPR_UNARY_MINUS <S2SV_ModStart> case EXPR_UNARY_MINUS : * set_rtrn =! * set_rtrn ; if (! * set_rtrn ) * set_rtrn =! * set_rtrn ; return ok ;,0
1574,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1575,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> EFAULT ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command <S2SV_ModStart> MF ) ; <S2SV_ModEnd> return rc ;",0
1576,<S2SV_ModStart> MaxTextExtent ] ; Image <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1577,"<S2SV_ModStart> ; if ( bandno >= JPC_MAXBANDS ) { jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number\\n"" ) ; jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number\\n"" ) ; return jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number\\n"" ) ; return jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number\\n"" ) ; return jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number\\n"" ) ; } if ( bandno >= JPC_MAXBANDS ) { jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number\\n"" ) ; jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number\\n"" ) ; return jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number\\n"" ) ; return jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number\\n"" ) ; return jas_eprintf ( ""invalid <S2SV_blank> band <S2SV_blank> number\\n"" ) ; }",0
1578,"<S2SV_ModStart>, NULL, WEECHAT_STRING_STRIP_LEFT | WEECHAT_STRING_STRIP_RIGHT | WEECHAT_STRING_SPLIT_COLLAPSE_SEPS <S2SV_ModEnd>, 0, <S2SV_ModStart>, NULL, WEECHAT_STRING_STRIP_LEFT | WEECHAT_STRING_STRIP_RIGHT | WEECHAT_STRING_STRIP_RIGHT | WEECHAT_STRING_COLLAPSE_SEPS <S2SV_ModEnd>, 0, <S2SV_ModStart>, NULL, WEECHAT_STRING_STRIP_LEFT | WEECHAT_STRING_STRIP_RIGHT | WEECHAT_STRING_SPLIT_COLLAPSE_SEPS <S2SV_ModEnd>, 0, <S2SV_ModStart>, NULL, WEECHAT_STRING_STRIP_LEFT | WEECHAT_STRING_STRIP_RIGHT | WEECHAT_STRING_STRIP_RIGHT | WEECHAT_STRING_COLLAPSE_SEPS <S2SV_ModEnd>, 0,",0
1579,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_bit_depth_t <S2SV_ModEnd> decode_uniform ( vpx_reader <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> 1 ) ; if ( v < 0 ) { vpx_error ( ""vpx_decode_uniform: <S2SV_blank> vpx <S2SV_blank> literal <S2SV_blank> too <S2SV_blank> short"" ) ; return - 1 ; } vpx_error ( ""vpx_decode_uniform: <S2SV_blank> vpx <S2SV_blank> literal <S2SV_blank> too <S2SV_blank> short"" ) ; return - 1 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1580,"<S2SV_ModStart> * cert ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> ; int is_valid ; if ( t -> owner -> certificate_check_cb == NULL ) { giterr_set ( GITERR_NET, ""user <S2SV_blank> cancelled <S2SV_blank> certificate <S2SV_blank> check"" ) ; return error ; } is_valid = error!= GIT_ECERTIFICATE ; error = t -> owner -> certificate_check_cb ( cert, is_valid, t -> connection_data. host, t -> owner -> message_cb_payload ) ; if ( error < 0 ) return error ; is_valid = error!= GIT_ECERTIFICATE ; error = t -> owner -> certificate_check_cb ( cert, is_valid, t -> connection_data. host, t -> owner -> message_cb_payload ) ; if ( error < 0 ) { if (! giterr_last ( ) ) giterr_set ( GITERR_NET, ""user <S2SV_blank> cancelled <S2SV_blank> certificate <S2SV_blank> check"" ) ; return error ; }",0
1581,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
1582,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> REFERENCE_MODE mode = vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> comp_inter_prob [ ctx <S2SV_ModStart>! cm -> fc -> <S2SV_ModEnd> parallel_decoding_mode ) ++",0
1583,"<S2SV_ModStart>! stream ) { <S2SV_ModStart> ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; } <S2SV_ModStart> ; res = vpx_codec_enc_config_default ( global -> codec -> interface ( ), & stream -> config. cfg, global -> usage ) ; if ( res ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> config: <S2SV_blank> %s\\n"", vpx_codec_err_to_string ( res ) ) ; stream -> config. cfg. g_w = 0 ; stream -> config. cfg. g_h = 0 ; stream -> config. stereo_fmt = STEREO_FORMAT_MONO <S2SV_ModEnd> ; stream -> <S2SV_ModStart> write_webm = 1 <S2SV_ModEnd> ; } stream",0
1584,"<S2SV_ModStart> ; if ( op -> nd_opt_len > ND_OPT_MTU_MAX ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", tok2str ( icmp6_opt_values, ""unknown"", op -> nd_opt_mtu ) ) ) ; break ; } <S2SV_ModStart> ; if ( op -> nd_opt_len > ND_OPT_MTU_MAX ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", tok2str ( icmp6_opt_values, ""unknown"", op -> nd_opt_mtu ) ) ) ) ; break ; } <S2SV_ModStart> ; if ( op -> nd_opt_len > ND_OPT_MTU_MAX ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", tok2str ( icmp6_opt_values, ""unknown",0
1585,<S2SV_ModStart> = 0 ; if ( yr_re_ast_get_root ( * re_ast ) == NULL ) { yr_error ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( ) ) ) ) ) ) ) ) ) ) ; } else { yr_error ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( yr_strerror ( ) ) ) ) ) ) ) ) ) ) ) ) ; },0
1586,"<S2SV_ModStart> ) ) ; if ( iter -> var_expand_table ) { <S2SV_ModStart>, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s"" <S2SV_ModEnd>, key -> <S2SV_ModStart> 0 ) { auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> lookup <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", str_c ( path ), error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s",0
1587,<S2SV_ModStart> ; if ( skb -> len < sizeof ( struct nlattr ) ) { kfree_skb ( skb ) ; return 0 ; } <S2SV_ModStart> A ] ; if ( nla -> nla_len < skb -> len ) { kfree_skb ( skb ) ; return 0 ; },0
1588,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1589,"<S2SV_ModStart> ""<message <S2SV_blank> type=\'chat\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'stabber@localhost\'>"" ""<received <S2SV_blank> xmlns=\'urn:xmpp:carbons:2\'>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'stabber@localhost/mobile\'>"" ""<body>test <S2SV_blank> carbon <S2SV_blank> from <S2SV_blank> recipient</body>"" ""</forwarded>""",0
1590,"<S2SV_ModStart> -> cac_id, serial -> len <S2SV_ModEnd> ) ; SC_FUNC_RETURN",1
1591,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> tok -> altwarning <S2SV_ModStart> = 0 ; tok -> alterror = 0 ; tok -> alttabsize = 1 ; tok -> altindstack [ 0 ] = 0 ; <S2SV_ModStart> 0 ; return NULL <S2SV_ModEnd> ; } <S2SV_null>,0
1592,"<S2SV_ModStart> } if ( av1 -> av1_config && av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo ) { GF_AV1Config * av1_cfg = AV1_DuplicateConfig ( av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> config ) ; if ( av1_cfg ) { gf_odf_av1_cfg_write ( av1_cfg, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> data, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> dataLength ) ; gf_odf_av1_cfg_del ( av1_cfg ) ; }",0
1593,"<S2SV_ModStart> -> dref ) { GF_LOG <S2SV_ModEnd> ( GF_LOG_ERROR, <S2SV_ModStart> GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" <S2SV_ModEnd> ) ) ; <S2SV_ModStart> -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } else { ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
1594,"<S2SV_ModStart> ] = '\\0' ; if ( r < 0 ) { r = SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; r = SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; r = SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""read <S2SV_blank> serial_number <S2SV_blank> failed"" ) ; r = SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; r = SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; r = SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; r = SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; r = SC_TEST_RET ( card",0
1595,<S2SV_ModStart> maxFrameNum ) ; ASSERT ( dpbSize <= MAX_NUM_REF_PICS ) ;,0
1596,<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> = 0 ; if (! sock ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen ) addrlen_in = * addrlen ; if ( addrlen_in > OE_SSIZE_MAX ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( addrlen_in > OE_SSIZE_MAX ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( addrlen_in > OE_SSIZE_MAX ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( addrlen_in > OE_SSIZE_MAX ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( addrlen_in > OE_SSIZE_MAX ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( addrlen_in > OE_,0
1597,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
1598,"<S2SV_ModStart> FALSE ; } if ( Stream_GetRemainingLength ( s ) < 8 ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> negotiation <S2SV_blank> request <S2SV_blank> length <S2SV_blank> indicator."" ) ; return FALSE ; }",0
1599,"<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; struct ipv6_txoptions <S2SV_ModStart> ) ) { struct ipv6_txoptions * opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; if ( opt ) { struct ipv6_txoptions * opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; opt = rcu_dereference_protected ( opt_space, sock_owned_by_user",0
1600,"<S2SV_ModStart> ; unsigned int found <S2SV_ModEnd>, upx_success = <S2SV_ModStart> ; size_t valign <S2SV_ModEnd>, hdr_size, <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> ; struct cli_exe_section <S2SV_ModStart>, j, & found <S2SV_ModEnd> )!= CL_ENULLARG <S2SV_ModStart>, j, & found <S2SV_ModEnd> )!= CL_ENULLARG <S2SV_ModStart>, j, found <S2SV_ModEnd> )!= CL_ENULLARG <S2SV_ModStart>, j, found <S2SV_ModEnd> )!= CL_ENULLARG <S2SV_ModStart>, j, found <S2SV_ModEnd> )!= CL_ENULLARG <S2SV_ModStart>, j, found <S2SV_ModEnd> )!= CL_ENULLARG <S2SV_ModStart>, j, found <S2SV_ModEnd> )!= CL_ENULLARG <S2SV_ModStart>, j, found <S2SV_ModEnd> )!= CL_ENULLARG <S2SV_ModStart>, j, found <S2SV_ModEnd> )!= CL_ENULLARG <S2SV_ModStart>, j, found <S2SV_ModEnd> )!= CL_ENULLARG",0
1601,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> )!= 0 ) { } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; usleep <S2SV_ModStart> 5 ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; }",0
1602,"<S2SV_ModStart> max_striplength ) ; if ( striplength > t2p -> tiff_datasize ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> %lu <S2SV_blank> bytes <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> too <S2SV_blank> long"", ( unsigned long ) t2p -> tiff_datasize ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( striplength > t2p -> tiff_datasize ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> %lu <S2SV_blank> bytes <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> too <S2SV_blank> long"", ( unsigned long ) t2p -> tiff_datasize ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( striplength > t2p -> tiff_datasize ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> %lu <S2SV_blank> bytes <S2SV_blank>",0
1603,"<S2SV_ModStart> new_parent ) { <S2SV_ModEnd> __ptrace_link ( child <S2SV_ModStart>, new_parent, current_cred ( ) <S2SV_ModEnd> ) ; }",1
1604,"<S2SV_ModStart> { rc = cib_tls_signon <S2SV_ModEnd> ( cib, <S2SV_ModStart> { rc = cib_tls_signon <S2SV_ModEnd> ( cib, <S2SV_ModStart> { rc = cib_tls_signon <S2SV_ModEnd> ( cib, <S2SV_ModStart> } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> callback. token, CRM_OP_REGISTER, NULL, NULL, 0, NULL ) ; crm_xml_add ( hello, F_CIB_CLIENTNAME, name ) ; crm_send_remote_msg ( hello, F_CIB_CLIENTNAME, name ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> callback. token, CRM_OP_REGISTER, NULL, NULL, NULL, NULL, 0, NULL ) ; free_xml ( hello ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> callback. token, CRM_OP_REGISTER, NULL, NULL, NULL,",0
1605,"<S2SV_ModStart> = ubuf ; memset ( & address, 0, sizeof ( address ) ) ;",0
1606,"<S2SV_ModStart> num00, tmp_err, <S2SV_ModEnd> sr = 0 <S2SV_ModStart> bsize ] ; const int new_mv_mode_penalty = 256 ; const int quart_frm = MIN ( cpi -> common. width, cpi -> common. height ) ; while ( ( quart_frm << sr ) < MAX_FULL_PEL_VAL ) ++ sr ; step_param += sr ; further_steps -= sr ; v_fn_ptr. vf = get_block_variance_fn ( bsize ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_diamond_search_sad ( x, & ref_mv_full, & tmp_mv, step_param, x -> sadperbit16, & num00, & v_fn_ptr, x -> nmvjointcost, x -> mvcost, ref_mv ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = INT_MAX",0
1607,"<S2SV_ModStart> < 0 ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; } if ( h -> size == 0 ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; } if ( h -> size == 0 ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; } if ( h -> size == 0 ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; }",0
1608,"<S2SV_ModStart> NULL ) { ap_log_perror ( APLOG_MARK, APLOG_STARTUP | APLOG_NOERRNO, 0, mp, ""Cannot <S2SV_blank> merge <S2SV_blank> parent <S2SV_blank> %pp <S2SV_blank> child <S2SV_blank> %pp"", parent, _child, merged ) ; ap_log_perror ( APLOG_MARK, APLOG_STARTUP | APLOG_NOERRNO, 0, mp, ""Cannot <S2SV_blank> merge <S2SV_blank> parent <S2SV_blank> %pp <S2SV_blank> child <S2SV_blank> %pp"", parent, _child, merged ) ; ap_log_perror ( APLOG_MARK, APLOG_STARTUP | APLOG_NOERRNO, 0, mp, ""Cannot <S2SV_blank> merge <S2SV_blank> parent <S2SV_blank> %pp <S2SV_blank> child <S2SV_blank> %pp"", parent, _child, merged ) ; ap_log_perror ( APLOG_MARK, APLOG_STARTUP | APLOG_NOERRNO, 0, mp, ""Cannot <S2SV_blank> merge <S2SV_blank> child <S2SV_blank> %pp"", child, _parent, merged ) ; ap_log_perror ( APLOG_MARK, APLOG_STARTUP | APLOG_NOERRNO, 0, mp, ""Cannot <S2SV_blank> merge <S2SV_blank> parent <S2SV_blank> %pp <S2SV_blank> child <S2SV_blank> %pp",0
1609,"<S2SV_ModStart> ; if ( msg_sys -> msg_name ) { memcpy ( & address, msg_sys -> msg_name, sizeof ( struct sockaddr_storage ) ) ; memcpy ( & address, msg_sys -> msg_name, sizeof ( struct sockaddr_storage ) ) ; memcpy ( & address, msg_sys -> msg_name, sizeof ( struct sockaddr_storage ) ) ; } else memcpy ( & address, msg_sys -> msg_name, sizeof ( struct sockaddr_storage ) ) ; memcpy ( & address, msg_sys -> msg_name, sizeof ( struct sockaddr_storage ) ) ; memcpy ( & address, msg_sys -> msg_name, sizeof ( struct sockaddr_storage ) ) ; memcpy ( & address, msg_sys -> msg_name, sizeof ( struct sockaddr_storage ) ) ; } else memcpy ( & address, msg_sys -> msg_name, sizeof ( struct sockaddr_storage ) ) ; memcpy ( & address, msg_sys -> msg_name, sizeof ( struct sockaddr_storage ) ) ; memcpy ( & address, msg_sys ->",0
1610,"<S2SV_ModStart> one ) { if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ) break ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageData",0
1611,"<S2SV_ModStart> 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0",0
1612,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1613,"<S2SV_ModStart> user_data ) { <S2SV_ModEnd> int num_clients = <S2SV_ModStart> num_clients ) ; <S2SV_ModEnd> free ( client <S2SV_ModStart> user ) ; <S2SV_ModEnd> crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client""",0
1614,"<S2SV_ModStart> * uv ; lockdep_assert (! iswhite ( thread ) ) ; <S2SV_ModStart> uv ) { lockdep_assert (! iswhite ( uv ) ) ; <S2SV_ModStart> uv ) ) { lockdep_assert (! iswhite ( uv ) ) ; <S2SV_ModStart> uv ) ) { lockdep_assert (! iswhite ( uv ) ) ; <S2SV_ModStart> uv ) ) { lockdep_assert (! iswhite ( uv ) ) ; markvalue ( g, uv -> v ) ; } } } lockdep_assert (! iswhite ( thread ) ) ; <S2SV_ModStart> next ) { lockdep_assert (! iswhite ( uv ) ) ; lockdep_assert (! iswhite ( uv ) ) ; <S2SV_ModStart> uv ) ) { lockdep_assert (! iswhite ( uv ) ) ; } lockdep_assert (! iswhite ( uv ) ) ; <S2SV_ModStart> uv ) ) { lockdep_assert (! iswhite ( uv ) ) ; markvalue ( g, uv -> v ) ; } }",0
