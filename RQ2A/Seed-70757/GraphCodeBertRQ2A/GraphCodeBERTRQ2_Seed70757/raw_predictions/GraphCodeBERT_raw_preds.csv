,raw_predictions,correctly_predicted
0,,0
1,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> * tptr ; ND_TCHECK_16BITS ( tptr ) ; ND_TCHECK_16BITS ( tptr ) ; ND_TCHECK_16BITS ( tptr ) ; <S2SV_ModStart> 2 ) ) ; ND_TCHECK_TCHECK_16BITS ( ( tptr ) ) ; ND_TCHECK_TCHECK_16BITS ( tptr + 2 ) ; <S2SV_ModStart> * ) ; ND_TCHECK_TCHECK_16BITS ( tptr + 2 <S2SV_ModEnd> ) ; ND_TCHECK_TCHECK_16BITS ( tptr + <S2SV_ModStart> * ) ) ; ND_TCHECK_TCHECK_TCHECK_16BITS ( tptr ) ; ND_TCHECK ( ( ( tptr ) ) ) ; ND_TCHECK ( ( ( ( tptr ) ) ; ND_TCHECK_TCHECK_TCHECK_TCHECK_16BITS ( tptr ) ) ;,0
2,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> return - EINVAL,0
3,<S2SV_ModStart> hdr ) ; <S2SV_ModEnd> if ( y,0
4,<S2SV_ModStart> ; if (,0
5,<S2SV_ModStart> ; if ( index >= bytes_size ) return AVERROR_INVALIDDATA ; if (,0
6,"<S2SV_ModStart>, int tpg ) <S2SV_ModEnd> ; if (",0
7,,0
8,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
9,<S2SV_ModStart> src ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
10,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
11,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
12,<S2SV_ModStart> ; if (,0
13,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",0
14,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> encode_null> <S2S2SV_null>,0
15,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
16,<S2SV_ModStart> - EINVAL ; mutex_unlock ( env ) ;,0
17,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
18,"<S2SV_ModStart> int rc = 0 ; unsigned char * sense_buffer = 0 ; unsigned char * senseptr = cgc -> sense_buffer ( cgc -> sense, 0, & cgc -> sense ) ; if ( cgc -> sense ) cgc -> senseptr, & cgc -> sense ) ; if ( cgc -> sense ) memcpy ( cgc -> sense, & cgc -> sense, & cgc -> sense ) ; if ( cgc -> sense, sizeof ( cgc -> sense ) ) ;",0
19,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
20,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> log2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mi_row ; const int <S2SV_ModEnd> log2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <SV_null>,0
21,,0
22,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
23,,0
24,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return - EINVAL,0
25,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
26,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static jas_image_numcmpts ( jas_image_numcmpts, jas_numcmpts, jas_image_numcmpts ( jas_numcmpts, jas_image_numcmpts, <S2SV_ModEnd> ) ; JAS_NUMBITS (",0
27,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",0
28,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 2 ) { ND_PRINT ( ( ( ndo, ""AVP <S2SV_blank> short"" ) ) ; return ; } ND_PRINT ( ( ( ndo, ""AVP <S2SV_blank> short"" ) ) ) ; if ( length < 2 ) { ND_PRINT ( ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 2 ) { ND_PRINT ( ( ( ndo, ""AVP <S2SV_blank> short"" ) ) ) ) { ND_PRINT ( ( ( ( ndo, ""AVP <S2SV_blank> short"" ) ) ) ) ) ; return ; } if ( length < 2 ) { ND_PRINT ( ( ( ( ndo, ""AVP <S2SV_blank> short"" ) ) ) ) ) ; return ; } if ( length < 2 ) { ND_PRINT ( ( length ) ) ) { ND_PRINT ( ( ( ( ( ndo, ""AVP <S2SV_blank> short"" ) ) ) )",0
29,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null>,0
30,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> sizeof ( struct <S2SV_ModStart> p ) { struct pc * p ; <S2SV_ModStart> p ) { struct size_t * p ; <S2SV_ModStart> p ) { if (! p ) return - 1 ; } <S2SV_ModEnd> p -> name <S2SV_ModStart> ; } else { if (! out ) return - 1 ; } else { if (! out ) return - 1 ; },0
31,"<S2SV_ModStart> ; if ( osStrchr <S2SV_ModEnd> ( line,",0
32,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
33,<S2SV_ModStart> retval ) ; if (! dev -> desc. bNumEndpoints < 1 ) { dev_err ( & dev -> dev_err ) ; return - ENOMEM ; },0
34,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
35,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
36,<S2SV_ModStart> = 0 ;,0
37,<S2SV_ModStart> ; int err = - EINVAL ; if (! sock_unlock ( sk ) ) return - EINVAL ; if (,0
38,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
39,"<S2SV_ModStart> NULL, NULL, NULL",0
40,,0
41,,0
42,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> dev ) { if ( d2SV_null> <S2SV_null> <S2S2SV_null> <S2S2SV_null> <S2SV_null> <S2S2SV_null>,0
43,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> skb ) { <S2SV_ModStart> ( & <S2SV_ModEnd> sk ) ; bh_unlock_sock ( & <S2SV_ModStart> ( & <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sk -> sk -> sk -> sk ) <S2SV_ModEnd> sock_unlock_sock ( <S2SV_ModEnd> sk ) ;,0
44,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return 0 ;,0
45,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
46,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
47,<S2SV_ModStart> ( page ) <S2SV_ModEnd> ; if (,0
48,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
49,,0
50,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
51,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
52,"<S2SV_ModStart> ; if (! inode_user ( inode, inode ) ) return - EINVAL ; if (",0
53,<S2SV_ModStart> ; } } if (,0
54,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
55,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> this_frame_frame <S2SV_ModStart> this_frame_frame ; const TWO_PASS <S2SV_ModEnd> ( twopass, <S2SV_ModStart> this_frame ) { TWO_PASS <S2SV_ModEnd> if ( twopass <S2SV_ModStart> ; } else { TWO_PASS_PASS <S2SV_ModEnd> if ( twopass <S2SV_ModStart> ( twopass, twopass, twopass <S2SV_ModEnd> ) ) { const FIRSTPASS_STATS <S2SV_ModStart> ( twopass, twopass, twopass, twopass <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( twopass, twopass, twopass <S2SV_ModEnd> ) ; } <S2SV_null>",0
56,<S2SV_ModStart> <S2SV_null> <S2S2SV_null> <S2SV_null> <S2S2SV_null> <S2SV_null> static <S2SV_ModStart> int h2S2SV_null> <S2S2SV_null> <S2SV_null> <S2SV_ModEnd> int h2S2SV_null>,0
57,<S2SV_ModStart> ; if (! inode -> i_inode ) { ret = 0 ; },0
58,<S2SV_ModStart> ; xdr ->,0
59,"<S2SV_ModStart>, name, name <S2SV_ModEnd> ) ; return",0
60,"<S2SV_ModStart> 2 ) { ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> 2 ) ) { ND_TCHECK_32BITS ( tptr ) ; ND_TCHECK_32BITS ( tptr, tptr ) ; ND_TCHECK_32BITS ( tptr ) ; <S2SV_ModStart> 2 ) ) ; ND_TCHECK_TCHECK_32BITS ( tptr + 2 ) ; ND_TCHECK_S ( tptr + 2 ) { ND_TCHECK_S ( tptr + 2 ) ; ND_TCHECK_S ( tptr + 2 ) ; ND_TCHECK_S ( tptr ) ; ND_TCHECK_S ( tptr ) ; ND_TCHECK_S ( tptr ) ; <S2SV_ModStart> 2 ) ; } ND_TCHECK_TCHECK_S ( tptr + 2 ) ;",0
61,<S2SV_ModStart> return - 1 <S2SV_ModEnd> ; } if (,0
62,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
63,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
64,"<S2SV_ModStart> int procfd ; int procfd = procfm -> procfd ; int procfd ; int procfd = procf -> procfd ; int procfd ; int procfd = procf -> procfd ; int procfd ; int procfd = procf -> procfd ; int procfd ; int procfd = procfd -> procfd ; struct procfd = procfd ; struct procfd = procfd -> procfd = procfd -> procfd ; struct procfd = procfd -> procfd = procfd -> procfd ; } if ( procfd -> procfd -> procfd, procfd, procf -> procfd ) ; if ( procfd -> procfd -> procfd = procfd -> procf. procfd, procf -> procfd ) ; err = procfd -> procfd -> procfd ; procfd = procf -> procfd ; if ( procfd -> procf -> procfd -> procfd = procfd -> procfd ) ; if ( procf",0
65,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
66,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
67,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
68,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( image",0
69,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
70,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
71,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
72,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
73,<S2SV_ModStart> u_len ) { uaddr_len = 0 ; <S2SV_ModStart> - 1 ; },0
74,,0
75,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
76,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return 0 ;,0
77,<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
78,<S2SV_ModStart> offset ) { <S2SV_ModEnd> buf [ offset,0
79,<S2SV_ModStart> 0 ) ; ND_TCHECK2 ( p [ 0 ] ) ;,0
80,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
81,"<S2SV_ModStart> - EINVAL ; memset ( up, 0, 0 ) ;",0
82,<S2SV_ModStart> ; io -> io_cleanup = 0 ;,0
83,<S2SV_ModStart> MagickFalse ) ; <S2SV_ModEnd> return (,0
84,"<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( bdev,",0
85,<S2SV_ModStart> ) ) { jas_uchar <S2SV_ModEnd> buf [ j ],0
86,,0
87,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
88,"<S2SV_ModStart> * name, <S2SV_ModEnd> const char *",0
89,"<S2SV_ModStart> } else { memset <S2SV_ModEnd> ( opt,",0
90,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
91,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NULL ; atomic_set ( & atomic_set_set_set ( & fanout -> num_mutex ) ; <S2SV_ModStart> err ) { mutex_lock ( & fanout -> rollover ) ; err = - EINVAL ; goto out ; } mutex_lock ( & fanout -> rollover ) ; err = - EINVAL ; err = - EINVAL ; goto out ; } <S2SV_ModStart> atomic_long_long_set ( & fanout ) ; err = - EINVAL ; if ( & fanout -> num_long_set ( & fanout -> num_long_set ( & fanout ) ) - EINVAL ; err = - EINVAL ; err ; err = - EINVAL ; err ; err = - EINVAL ; err = - EINVAL ; err ; err = - EINVAL ; err = - EINVAL ; err ; err = - EINVAL ; err = - EINVAL ; err ; err = - EINVAL ; goto out : atomic_set ( & fanout_set ( & fanout,0
92,<S2SV_ModStart> ; newinet -> inet_opt <S2SV_ModEnd> = NULL ;,0
93,<S2SV_ModStart> ) ) ; kfree ( page ) ;,0
94,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
95,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } else {,0
96,"<S2SV_ModStart> ( interface, ENC28J60_EIE <S2SV_ModEnd>, interface, ENC28J60_EIE <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC28J60_ECON1 <S2SV_ModEnd>, ENC28J60_START ) <S2SV_ModStart> ( interface, ENC28J60_EIE, ENC28J60_START ) ; enc28J60_START <S2SV_ModEnd> ( interface, ENC28J60_START <S2SV_ModStart> ( interface, ENC28J60_EIE, ENC28J60_EIE_START ) ; enc28J60_START <S2SV_ModEnd> ( interface, ENC28J60_START <S2SV_ModStart> ( interface, ENC28J60_EIE, ENC28J60_START ) ; enc28J60WriteReg ( interface, ENC28J60_EIE <S2SV_ModEnd>, ENC28J60_START ) <S2SV_ModStart> ( interface, ENC28J60_EIE, ENC28J60_START ) ; enc28J60_START <S2SV_ModEnd> ( interface, ENC28J60_EIE_START ) <S2SV_ModStart> ( interface, ENC28J60_EIE, ENC28J60",0
97,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,0
98,"<S2SV_ModStart> ) ) { if (! strcmp ( page, ""%s"" ) ) { r = 0 ; } else { strcmp ( urb, ""%s"", ""%s"", ""%s"" ) ; return NULL ; } <S2SV_ModStart> NULL ) ; } else { if (! strcmp ( page ) ) { xml_get ( page ) ; } else if (! strcmp ( filename, ""%s"", ""%s"" ) ) ; return FALSE ; } else { r = NULL ; } else if (! strcmp (! strcmp ( filename, ""%s"" ) ) { xml_get_error ( page ) ; } else { r = strcmp ( filename, ""%s"" ) ; return FALSE ; }",0
99,"<S2SV_ModStart> inode ) { struct ext4_inode_blocks * inode = EXT4_I ( inode ) ; <S2SV_ModStart> = EXT4_I ( inode ) ; if ( inode -> i_mode & EXT4_I ( inode, EXT4_I ( inode, flags & EXT4_I ( inode ), flags & EXT4_I ( inode ), flags & EXT4_I ( inode ) -> i_flag & EXT4_I ( inode, EXT4_I ( inode ), flags & EXT4_I ( inode ) ) -> i_flag & EXT4_I ( inode ), flags & EXT4_I ( inode ), flags & EXT4_I ( inode ), EXT4_I ( inode ), EXT4_I ( inode ), EXT4_I ( inode ) <S2SV_ModEnd> ) ; if",0
100,<S2SV_ModStart> len ) ; ND_TCHECK_16BITS ( p ) ; ND_TCHECK_16BITS ( p ) ; <S2SV_ModStart> 2 ) ; ND_TCHECK_16BITS ( p + <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> 2 ) ; ND_TCHECK_32BITS ( p + <S2SV_ModEnd> 2 ) ;,0
101,<S2SV_ModStart> } else { struct fcpy <S2SV_ModEnd> ( cb ->,0
102,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mi_row ) { <S2SV_ModEnd> int mi_row, <S2SV_ModStart> -> y_stride ; memset <S2SV_ModEnd> ( cm -> <S2SV_ModStart> -> y_stride ) { <S2SV_ModEnd> ( void ) <S2SV_ModStart> 8 ) { memcpy <S2SV_ModEnd> ( sbmi_stride,",0
103,<S2SV_ModStart> cmd ) ; <S2SV_ModEnd> return NULL ;,0
104,<S2SV_ModStart> ; if (! new -> cid ) return 0 ;,0
105,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; <S2SV_ModEnd> free ( error,0
106,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
107,,0
108,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
109,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
110,<S2SV_ModStart> dev ) ; kfree ( nfs ) ;,0
111,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
112,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null> <S2SV_null> static <S2SV_ModStart> r_null> <S2SV_null> <S2SV_null> <S2SV_null> static uint16BITS2SV_null>,0
113,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
114,"<S2SV_ModStart> addr, & addr_len, 0",0
115,<S2SV_ModStart> ; default : return EINVAL ; } if (,0
116,"<S2SV_ModStart> ; ret = posix_acl_update_mode ( inode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; if (",0
117,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int ret =,0
118,"<S2SV_ModStart> p, length <S2SV_ModEnd> ) ; break",1
119,,0
120,<S2SV_ModStart> <S2SV_null> <S2S2SV_null> <S2S2SV_null> <S2S2SV_null> <S2SV_null> static int <S2SV_ModEnd> t2S2S2S2S2SV_null>,0
121,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
122,<S2SV_ModStart> s ) { if ( s == NULL ) return NULL ;,0
123,<S2SV_ModStart> ; if (! cmd ) return - EINVAL,0
124,<S2SV_ModStart> 6 ) { MATLAB_KO : clone_info = DestroyImageInfo ( clone_info ) ;,0
125,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
126,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
127,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY (,0
128,"<S2SV_ModStart>, 1, 0",0
129,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
130,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
131,<S2SV_ModStart> * buf ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
132,,0
133,<S2SV_ModStart> ( file ) <S2SV_ModEnd> ; } <S2SV_null>,0
134,<S2SV_ModStart> ( ) ) == 0,0
135,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
136,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null> static int <S2SV_ModEnd> hdr_len <S2SV_ModStart> errno ) { unsigned int ret = - EINVAL ; goto error ; <S2SV_ModStart> - EINVAL ; } if (! xattr_len ) return - EINVAL <S2SV_ModEnd> ; } <S2SV_null>,0
137,<S2SV_ModStart> prevhdr ) ; if ( unfrag_len < 0 ) goto trunc ;,0
138,,0
139,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
140,<S2SV_ModStart> [ plane ] && in -> linesize [ plane ],1
141,"<S2SV_ModStart> ; if ( osStrchr <S2SV_ModEnd> ( szName,",0
142,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
143,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> if ( q,0
144,<S2SV_ModStart> ; if (! inet_opt && inet_opt -> opt.,0
145,,0
146,<S2SV_ModStart> ) ) { ND_TCHECK_16BITS ( eof ) ;,0
147,"<S2SV_ModStart> ( addr, size_t <S2SV_ModEnd> size ) ; if",0
148,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
149,"<S2SV_ModStart> ) ; } memset <S2SV_ModEnd> ( dp,",0
150,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
151,,0
152,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ;,0
153,"<S2SV_ModStart> ; size = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 8 ) ) { if ( buffsize > 0 ) { TIFFError ( ""load <S2SV_blank> allocate <S2SV_blank> allocate <S2SV_blank> allocate <S2SV_blank> buffer"" ) ; return 0 ; }",0
154,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
155,"<S2SV_ModStart> -> remote_addr, 0",0
156,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
157,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
158,<S2SV_ModStart> ctx ) ; <S2SV_ModEnd> return 0 ;,0
159,"<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> - ENOMEM ; memset ( inode, 0, 0, sizeof ( inode ) ) ) ; <S2SV_ModStart> out ) ; memset <S2SV_ModEnd> ( bh ->",0
160,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
161,<S2SV_ModStart> goto ret ; <S2SV_ModEnd> return 0 ;,0
162,,0
163,<S2SV_ModStart> ; if ( c -> bit_depth > 16 ) return AVERROR_INVALIDDATA ;,0
164,"<S2SV_ModStart> CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> CVAR_LATCH ) ; if ( COM_CompareExtension ( s_alDriver -> string, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", s_alDriver -> string ) ; return qfalse ; }",1
165,<S2SV_ModStart> 0 ; } hdr -> tp_padding = 0 ;,0
166,,0
167,,0
168,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null> <S2SV_null>,0
169,,0
170,"<S2SV_ModStart> * event, <S2SV_ModEnd> regs, regs",0
171,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
172,,0
173,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ext2S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ; struct mb2SV_null>,0
174,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> null> <S2SV_null> <S2SV_null>,0
175,,0
176,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
177,,0
178,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
179,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static jas_matind_t <S2SV_ModEnd> jmp8_t <S2SV_ModStart> numcols ; jas_eprintf ( jptr, jas_eprintf ) ; jas_eprintf ( jas_eprintf, jas_fast32 ) ; jas_matind_t <S2SV_ModEnd> j ; jas_eprintf ( j <S2SV_ModStart> j ; jas_eprintf ( jptr, buf ) ; jas_eprintf ( ) ; if ( jas_eprintf ( jas_eprintf ( jas_eprintf ) ) { jas_eprintf ( j, ""error: <S2SV_blank> buffer <S2SV_blank> %d\\n"", buf ) ; goto trunc ; } if ( jptr ) { jas_eprintf ( jas_fast32 ) { jas_matind_t ) { jas_t * buf ; jas_size = 1 ; j ; jas_eprintf ( jptr ) ; jas_eprintf ( jptr ) ; jas_eprintf ( j",0
180,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( height",0
181,"<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, number_planes_filled, number_planes_filled, number_planes_filled ) <S2SV_ModEnd> ( number_planes_filled, <S2SV_ModStart> -> rows * number_planes_filled <S2SV_ModEnd> ) ; number_filled <S2SV_ModStart> ( number_filled, number_filled <S2SV_ModEnd> ( number_filled, <S2SV_ModStart> -> rows * number_planes_filled <S2SV_ModEnd> ) ; number_planes_filled <S2SV_ModStart> -> rows * number_filled <S2SV_ModEnd> = ( number_planes_planes_filled <S2SV_ModStart> -> rows * number_planes_filled <S2SV_ModEnd> = ( number_filled <S2SV_ModStart> -> rows * number_filled <S2SV_ModEnd> = ( number_planes_planes_filled <S2SV_ModEnd> ) ; number_filled <S2SV_ModStart> -> rows * number_filled = MagickMax ( number_planes_planes_filled <S2SV_ModEnd> ( number_planes_planes_filled,",0
182,,0
183,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
184,"<S2SV_ModStart> ) ; } if ( osStrchr <S2SV_ModEnd> ( pid,",0
185,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
186,"<S2SV_ModStart> * fmode, fmode_t fmode <S2SV_ModEnd> ) { int",0
187,,0
188,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> if ( q,0
189,"<S2SV_ModStart> ; # endif # if CONFIG_VP9_HIGHBITDEPTH <S2SV_ModEnd> ( log2, <S2SV_ModStart> - 1 ) ; # if CONFIG_VP9_HIGHBITDEPTH <S2SV_ModEnd> ) ; # endif",0
190,"<S2SV_ModStart> * tmpname, NULL <S2SV_ModEnd> ) ; }",0
191,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
192,<S2SV_ModStart> ( ) ) { <S2SV_ModEnd> return TRUE ; <S2SV_ModStart> ) ) ; },0
193,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } else {,0
194,,0
195,,0
196,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
197,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
198,<S2SV_ModStart> ; if ( hdev -> hdev ) return - ENOMEM <S2SV_ModEnd> ; if,0
199,"<S2SV_ModStart> ; # endif ifdef CONFIG_VP9_HIGHBITDEPTH if ( n )!= 0 ) { if (! strcmp ( cmd ) == 0 ) { log_error ( ""Invalid <S2SV_blank> failed"" ) ; return - 1 ; }",0
200,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> intra_stride, vp9_stride <S2SV_ModEnd> * const int <S2SV_ModStart> intra_stride, vp9_stride <S2SV_ModEnd> ( r, <S2SV_ModStart> intra_stride, vp9_stride, vp9_stride <S2SV_ModEnd> ( src, <S2SV_ModStart> intra_stride, <S2SV_ModEnd>, 0,",0
201,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return 0 ;,0
202,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
203,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
204,<S2SV_ModStart> ; if ( buffer_length < 0 ) return - 1 ;,0
205,<S2SV_ModStart> inode ) ; spin_unlock ( inode ) ;,0
206,<S2SV_ModStart> ) ) ; msg -> msg_namelen = 0 ;,0
207,,0
208,"<S2SV_ModStart> val, regs <S2SV_ModEnd> ) ; }",0
209,,0
210,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> * * o_null> static int <S2SV_ModEnd> ; if ( <S2SV_ModStart> NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> string"" ) ; return NULL ; } if ( PyErr_SetString ( * )!= NULL ) { PyErr_SetString ( * ) ; return NULL ; } if ( * ) { PyErr_SetString ( * )!= NULL ) { Py_SetString ( ""required <S2SV_blank> c"" ) ; return NULL ; } if ( PyErr_SetString ( * ) == NULL ) { return NULL ; } if ( PyErr_SetString ( * )!= NULL ) { PyErr_SetString ( * ) ; return NULL ; } return NULL ; } if ( Py_SetString ( PyObject * ) { Py_SetString ( * ) { return NULL ; } else { PyErr_SetString ( ""required <S2SV_blank> c"" ) ; return NULL ; } else { Py_SetString ( Py_SetString ( * ) ; } if ( Py_TypeError, ""required <S2SV_blank> missing <S2SV_blank>",0
211,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
212,<S2SV_ModStart> string ) { <S2SV_ModEnd> c = c,0
213,,0
214,<S2SV_ModStart> s + 1 <S2SV_ModEnd> ; if (,0
215,"<S2SV_ModStart>, buf, 0",0
216,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
217,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( sun_pixels",0
218,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
219,<S2SV_ModStart> ( msg ) <S2SV_ModEnd> ; msg ->,0
220,<S2SV_ModStart> } if ( <S2SV_ModEnd> } if (,0
221,<S2SV_ModStart> ( buf + 4 <S2SV_ModEnd> ) ; },0
222,<S2SV_ModStart> x ) ; <S2SV_ModEnd> if ( x,0
223,<S2SV_ModStart> * r ; <S2SV_ModEnd> return 0 ;,0
224,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> event_event_lock ( event <S2SV_ModEnd> ) { return <S2SV_ModStart> event_event ) { <S2SV_ModEnd> event_unlock ( event <S2SV_ModStart> event ) ; return - EINVAL <S2SV_ModEnd> ; } return,0
225,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
226,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
227,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static TEMP_FAILURE_RETRY ( <S2SV_ModStart> dev ) ) ; kfree ( hdev -> len ) <S2SV_ModStart> 0 ) ; if (! hw -> len ) { ret = - EINVAL ; goto out ; } <S2SV_ModEnd> if (! <S2SV_ModStart> - ENOMEM ) { ret = <S2SV_ModEnd> - ENOMEM ; <S2SV_ModStart> - EINVAL ; } ret = <S2SV_ModEnd> - EINVAL ; <S2SV_ModStart> 0 ) ; } ret = <S2SV_ModEnd> if ( h,0
228,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) ) ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> too <S2SV_blank> short"" ) ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } else { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> too <S2SV_blank> too <S2SV_blank> too <S2SV_blank> too <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> too <S2SV_blank> too <S2SV_blank> too <S2SV_blank> too <S2SV_blank> short"" ) ) ; } else { ND_PRINT ( ndo, ""AVP <S2SV_blank> short"" ) ) ; return ; } if ( ptr ++ ) { ND_PRINT ( ndo_PRINT ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> too <S2SV_blank> too <S2SV_blank> too <S2SV_blank>",0
229,,0
230,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
231,,0
232,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if ( inode,0
233,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
234,"<S2SV_ModStart> * arg, <S2SV_ModEnd> * *",0
235,<S2SV_ModStart> ; } } if (,0
236,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
237,<S2SV_ModStart> ; if (,0
238,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
239,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
240,<S2SV_ModStart> msg ) ; msg -> msg_namelen = 0 ;,0
241,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } while,1
242,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
243,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null>,0
244,<S2SV_ModStart> out_free ; } kvm_unlock ( kvm ) ;,0
245,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
246,<S2SV_ModStart> ( sk ) ; msg -> msg_namelen = 0,0
247,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> * ) { ND_PRINT ( ndo, sizeof ( ndo, <S2SV_ModEnd> ) ) ; <S2SV_ModStart> if ( ndo, length <S2SV_ModEnd> ) ) { <S2SV_ModStart> ) ) { ND_PRINT ( ndo, ""\\n"" ) ; return ; } <S2SV_ModEnd> if ( ndo",0
248,,0
249,<S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( cpi ->,0
250,<S2SV_ModStart> 1 ) ; int retval = - EINVAL ; <S2SV_ModStart> 0 ) ; if ( ret < 1 ) { ret = - EINVAL ; },0
251,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
252,<S2SV_ModStart> user ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
253,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
254,,0
255,"<S2SV_ModStart> size ) { memset ( size, 0, sizeof ( mem ) ;",0
256,,0
257,"<S2SV_ModStart> ) { const CHILD ( n, n ) ; const CHILD ( n ) == 0 ) { const CHILD ( n ) ; if (! CHILD ( n ) ) { assert ( CHILD ( n, 1 ) ) ; } else { assert ( n ) == NULL ; } else { assert ( n ) ; assert ( CHILD ( n, 1 ) == NULL ; } else { assert ( n ) == NULL ; } else { assert ( n ) == NULL ; } else { assert ( CHILD ( n, 1 ) ) ; } else { assert ( n, 1 ) ; } else { assert ( n, 1 ) == NULL ; } else { assert ( n ) == NULL ; } else { assert ( n, NEW_COMMENT ) ; } else { assert ( n, 1 ) == NULL ; } else { assert ( n, 1 ) == NULL ; } else { assert ( n, 1 ) == NULL ; } else { if (! strcmp ( n, 1 ) ) ) { if (! strcmp ( n, NEW_COMMENT ( n, 1 ) ) == NULL ; } else { if (! strcmp ( n, NEW_COMPRESSION_COMMENTS ) ) )",0
258,,0
259,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mi_row, const VP9_COMMON * const VP9_COMMON * const MACROBLOCKD * const xd = & cpi -> mbmi ; MACROBLOCKD * const xd = & cpi -> mbmi -> mbmi -> mbmi ; const MB_MODE_INFO * const xd = & cpi -> mbmi -> mbmi ; MACROBLOCK_MODE_INFO * const mbmi_INFO * const mbmi = mbmi -> mbmi ; <S2SV_ModStart> * mbmi ; const int mbmi = mbmi -> mbmi ; const mbmi_ext = mbmi -> mbmi -> mbmi ; const mbmi = mbmi -> mbmi ; <S2SV_ModStart> cm -> mbmi_ext = mbmi -> mbmi_ext ; if ( mbmi -> mbmi ) memset ( mbmi, mbmi, mbmi -> mbmi, mbmi, mbmi -> mbmi",0
260,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return 0 ;,0
261,<S2SV_ModStart> return - EINVAL ; if ( r -> iov_len > r -> iov_len ) { r = - EINVAL ; goto out ; },0
262,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
263,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
264,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> break ; },0
265,,0
266,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
267,,0
268,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> int ret ; int <S2SV_ModStart> dev ) { ret = - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart> dev ) ; ret = kmalloc ( GFP_KERNEL ) ; return - ENOMEM <S2SV_ModEnd> ; } <S2SV_null>,0
269,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
270,,0
271,<S2SV_ModStart> ; } } if (,0
272,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
273,"<S2SV_ModStart> ; if ( tlen < 2 ) { ND_TCHECK_32BITS ( tptr, tptr ) ; break ; }",0
274,<S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( *,0
275,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
276,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> bqp_null> <S2S2SV_null>,0
277,<S2SV_ModStart> ; if ( key_is_is_positive <S2SV_ModEnd> ( key ),0
278,<S2SV_ModStart> x ) { memset <S2SV_ModEnd> ( netif ->,0
279,<S2SV_ModStart> * cb ) <S2SV_ModEnd> ; if (,0
280,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
281,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int i2S2SV_null> <S2SV_null> static <S2SV_ModStart> int i2SV_null> 0 ; <S2SV_ModEnd> if ( netdev <S2SV_ModStart> dev ) { if ( status == 0 ) return - EINVAL ; <S2SV_ModStart> - ENODEV_ID_ID2SV_null> 0 ; <S2SV_ModEnd> if ( netb <S2SV_ModStart> - ENODEV_ID_IDXEN_ID_ID ) { <S2SV_ModEnd> err ( & <S2SV_ModStart> - ENODE_ID_ID_ID_ID_ID_ID ) ; <S2SV_ModEnd> if ( netdev <S2SV_ModStart> - 1 ) ) { netdev ; netbkfree ( netdev, idx ) ; netb_err ( netb_get_id ( netb, netdev ) ) ; netb_get_id ( netdev ) ; netb_id_id ( netb, idx, ""in_idx"" ) ; netb_idx_get_id ( netdev ) ) ; netb_id ( netdev, netb_idx_id ) ; netb_idx",0
282,,1
283,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
284,"<S2SV_ModStart> sock ) { struct sockaddr * addr ; struct sockaddr * addr = sizeof ( addr ) ; <S2SV_ModStart> ( addr, sizeof ( addr ) ) ; <S2SV_ModStart> return - 1 ; }",0
285,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
286,,0
287,,0
288,"<S2SV_ModStart>, flags, fmode_t flags <S2SV_ModEnd> ) ; if",0
289,<S2SV_ModStart> ; if ( cmd == NULL ) return - EINVAL ;,0
290,<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ;,0
291,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
292,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> set_null> <S2S2SV_null>,0
293,<S2SV_ModStart> 1 ) ; kfree ( sk ) ;,0
294,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
295,"<S2SV_ModStart> { if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( ( image <S2SV_ModStart> { if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( number_pixels,",1
296,<S2SV_ModStart> ; if ( s -> buf_size > 0 ) return AVERROR_INVALIDDATA ;,0
297,<S2SV_ModStart> ) return - EINVAL <S2SV_ModEnd> ; } return,0
298,<S2SV_ModStart> ; # endif # endif # endif,0
299,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
300,<S2SV_ModStart> str ) { <S2SV_ModEnd> buf [ 0,0
301,,0
302,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
303,,0
304,<S2SV_ModStart> ; if ( <S2SV_ModEnd> hdr. n,0
305,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ipv6_hdr <S2SV_ModStart> size ) { unsigned int len = sizeof ( struct ipv6_hdr * ipv6_hdr ) * ipv6_hdr ; unsigned int len = sizeof ( struct ipv6_thdr ) * ipv6_hdr = sizeof ( * ipv6_hdr ) ) ; * ipv6_hdr = sizeof ( struct ipv6_hdr ) * ipv6_opt = IPV6_MAX_MAX_INVAL ; * ipv6_thdr = sizeof ( * ipv6_thdr ) ) ; if ( len > IPV6_MAX_MAX_MAX_MAX ) { return - EINVAL ; } <S2SV_ModEnd> ; *,0
306,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> vpx_wb_wb_wb_wb ( wb, vpx_wb_wb_wb_wb_wb_wb <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) { vpx_wb_wb_wb_wb_wb <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_wb_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_wb_wb_wb_wb_wb_write_literal <S2SV_ModEnd> ( wb,",0
307,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
308,<S2SV_ModStart> 0 ; } msg -> msg_name = 0 ;,0
309,<S2SV_ModStart> 0 ) { if ( dj_report -> hdev -> h_index == NULL ) { return - 1 ; },0
310,,0
311,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
312,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> asoc_chunk_t <S2SV_ModStart> asconf ) { sctp_chunk_hdr. addip_hdr. addip ; sctp_hdr. addip = addip_hdr. addip ; sctp_chunk_t * addip ; sctp = addip_hdr. addip_hdr. addip ; sctp_chunk_params ( param, SCTP_ADDRESS ) ; if ( addip -> type == SCTP_ADDRESS ) { sctp_hdr. addip = SCTP_ADDRESS ; sctp_ADDRESS ; sctp = SCTP_IPV4_ADDRESS ; sctp_ADDRESS ; if ( sctp == SCTP_ADDRESS ) { sctp_IPV4_ADDRESS : if ( err_code == SCTP_ADDRESS ) { sctp_ADDRESS ; err_ADDRESS ; sctp",0
313,,0
314,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> msg -> msg_namelen = 0,0
315,"<S2SV_ModStart> ""SV_null> <S2SV_null> <S2SV_null>",0
316,<S2SV_ModStart> mmap_sem ) ; if (! mmap_ms ) return - 1 ;,0
317,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
318,<S2SV_ModStart> 0 ) { if ( dp!= NULL ) { error = - ENOMEM ; },0
319,<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> return 0 ;,0
320,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static,0
321,,0
322,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModStart> dev ) { int ret ; int ret ; int ret = kmalloc ( buf, GFP_NOIO ) ; if (! buf ) return - ENOMEM ; if (! buf ) return - ENOMEM ; if (! buf ) return - ENOMEM ; <S2SV_ModStart> data ) ; ret = kmalloc ( size, buf, buf ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ret ) ;",0
323,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
324,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
325,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null>,0
326,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
327,<S2SV_ModStart> 0 ) { int i ; <S2SV_ModStart> ) ) ; } <S2SV_ModEnd> } else { <S2SV_ModStart> ) ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
328,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
329,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
330,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
331,"<S2SV_ModStart> * mrb ; memset <S2SV_ModEnd> ( mrb, <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( mrb,",0
332,,0
333,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
334,<S2SV_ModStart> = 0 ; size_t alloc_size = 0 ;,0
335,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ctxt ) { int rc ; struct desc_desc ; struct desc_struct old_descriptor = cpl ( ctxt, old_desc, VCPU_SREG_CS, VCPU_SREG_SREG_CS, VCPU_SREG_CS ) ; rc = assign_eip_segment ( ctxt, VCPU_SREG_CS ) ; rc = assign_eip_segment ( ctxt, VCPU_CS ) ; if ( rc!= X86EMUL_CONTINUE ) return rc = assign_eip_segment ( ctxt, VCPU_CS ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; rc = assign_eip_eip_segment ( ctxt, VCPU_CS ) ; if ( rc!= X86EMUL_CONTINUE ) return rc = assign_segment ( ctxt, VCPU_SREG_CS ) ; if ( rc!= X86EMUL_CONTINUE ) rc!= X86EMUL_CONTIN",0
336,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( comp ->,0
337,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
338,"<S2SV_ModStart> 1 ) { memset <S2SV_ModEnd> ( obj,",0
339,<S2SV_ModStart> - EINVAL ; if ( info -> si == 0 ) return - EINVAL ;,0
340,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
341,"<S2SV_ModStart> char * name <S2SV_ModEnd>, int fname <S2SV_ModStart>, fname, fname, int <S2SV_ModEnd> ) { int <S2SV_ModStart> = 0 ; if (! strlen ( fname, '\\0' ) ) { fprintf ( fname, '\\0', '\\0' ) ; return - 1 ; } <S2SV_ModStart> = '\\0' ; if ( fname [ 1 ] == '\\0' ) { if (! strlen ( fname, '\\0' ) ) { fprintf ( fname, '\\0' ) ; return - 1 ; } <S2SV_ModEnd> } else { <S2SV_ModStart> = '\\0' ; } <S2SV_ModStart> = '\\0' ; if ( fname + 1 ) { if ( fprintf ( fname + 1 ) == '\\0' ) { fprintf ( fname, '\\0' ) ; if ( fname + 1 ) { if ( fprintf ( fname ) == '\\0' ) { fprintf ( fname, '\\0' ) ; return - 1 ; } else { * str ++ ; } <S2SV_ModEnd> if ( fname <S2SV_ModStart> = '\\0' ; } else { int <S2SV_ModStart> = '\\0' ; } <S2SV_ModEnd> if ( fprintf ( fprintf (",0
342,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null> static,0
343,<S2SV_ModStart> -> private_data ; <S2SV_ModEnd> if ( tu,0
344,"<S2SV_ModStart> tmp_strsize ) { ISOM_DECREASE_SIZE ( ptr, 1 ) ; <S2SV_ModStart> ) ) { ISOM_DECREASE_SIZE ( ptr, 1 ) ; }",0
345,"<S2SV_ModStart>. get_alg_priv ( ctx ) <S2SV_ModEnd>, ctx ->",0
346,<S2SV_ModStart> ; } } # if CONFIG_VP9_HIGHBITS2SV_null> <S2SV_null>,0
347,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
348,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> maxh2S2SV_null> static int <S2SV_ModStart> int size_t <S2SV_ModEnd> maxh ; int <S2SV_ModStart> maxh ; size_t <S2SV_ModEnd> maxh ; int <S2SV_ModStart> maxh ; size_t <S2SV_ModEnd> maxh = max_t <S2SV_ModStart> maxh ; size_t <S2SV_ModEnd> maxh = max_t <S2SV_ModStart> maxh ; size_t <S2SV_ModEnd> maxh = max_t <S2SV_ModStart> maxh ; size_t <S2SV_ModEnd> max ) * <S2SV_ModStart> max ) * size_t <S2SV_ModEnd> max ) *,0
349,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { fmode <S2SV_ModStart> ( state, fmode <S2SV_ModEnd> ) { fmode <S2SV_ModStart> ( state, fmode <S2SV_ModEnd> ) ; }",0
350,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
351,"<S2SV_ModStart> { assert_true_true_true_rule ( "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> tests <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> tests <S2SV_blank> <S2SV_blank> tests <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> tests <S2SV_blank> <S2SV_blank> tests <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> tests <S2SV_blank> tests <S2SV_blank> tests <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> tests <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> tests <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> tests <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> tests <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> tests <S2SV_blank> tests <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> tests <S2SV_blank> tests <S2SV_blank> tests <S2SV_blank> tests <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> tests <S2SV_blank> tests <S2SV_blank> <S2SV_blank> tests <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> tests <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> tests <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> tests <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> tests <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> tests <S2SV_blank> tests <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> tests <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
352,<S2SV_ModStart> ; if ( <S2SV_ModEnd> fputc ( c,0
353,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null> <S2SV_null> static int <S2SV_ModEnd>, fprintf ( <S2SV_ModStart> * ) ; int fprintf ( st_t ) ; if ( fprintf ( fprintf ( fprintf ) ) { fprintf ( stderr, ""%s\\n"", ""\\n"", buf ) ; return NULL ; } <S2SV_ModEnd> ; } if (",0
354,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
355,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
356,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
357,<S2SV_ModStart> e -> e + e ->,0
358,<S2SV_ModStart> 0 ) { if ( c -> format == AV_INVALIDDATA ) return AVERROR_INVALIDDATA ;,0
359,"<S2SV_ModStart> p, length <S2SV_ModEnd> ) ; return",0
360,<S2SV_ModStart> q ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
361,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> page_block_block_inode ( inode ) <S2SV_ModStart> inode ) { <S2SV_ModEnd> write_unlock ( page,0
362,<S2SV_ModStart> ( * ) NULL <S2SV_ModEnd> ; if (,0
363,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
364,,0
365,<S2SV_ModStart> * state ; <S2SV_ModEnd> return - EINVAL,0
366,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <SV_null> <SV_null> <S2SV_null>,0
367,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
368,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
369,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
370,,0
371,,0
372,<S2SV_ModStart> len ; } ND_TCHECK_16BITS ( p + 2 ) ; <S2SV_ModStart> len ; ND_TCHECK_16BITS ( p + <S2SV_ModEnd> 2 ) ; ND_TCHECK_16BITS ( p <S2SV_ModStart> 2 ) ; ND_TCHECK_16BITS ( p + <S2SV_ModEnd> 2 ) ;,0
373,,0
374,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
375,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
376,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
377,<S2SV_ModStart> ; dlen -= 2 <S2SV_ModEnd> ; dlen -=,0
378,<S2SV_ModStart> off = tags -> rqs [ <S2SV_ModEnd> off + bit,0
379,<S2SV_ModStart> = 1 ; <S2SV_ModEnd> } else {,0
380,<S2SV_ModStart> goto out ; <S2SV_ModEnd> if ( msg,0
381,<S2SV_ModStart> skb ) return 0,0
382,<S2SV_ModStart> ; xdr ->,0
383,<S2SV_ModStart> len ) ; ND_TCHECK_16BITS ( bp ) ;,0
384,"<S2SV_ModStart> } else { TEMP_FAILURE_RETRY ( tilebuf, 0 ) ; }",0
385,<S2SV_ModStart> ; new_umask_val ; default : new_umask_val ; new_umask_val = new_umask_umask_val ; if ( new_umask_val ) { new_umask_umask_val = new_umask_val ; } if ( new_umask_val ) { new_umask_umask_umask_val = new_umask_val ; },0
386,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
387,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
388,,0
389,<S2SV_ModStart> [ 1 ] ; if ( len < 4 ) return - 1 ;,0
390,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> skb ) { <S2SV_ModStart> ( & <S2SV_ModEnd> sk ) ; struct sock_unlock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> ( sk ) ; <S2SV_ModEnd> sock_unlock_sock ( &,0
391,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
392,<S2SV_ModStart> int fp = NULL <S2SV_ModEnd> ; if (,0
393,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
394,"<S2SV_ModStart> int n, jas_ulonglong <S2SV_ModEnd> val ) {",1
395,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart> return 0 ; <S2SV_ModEnd> memcpy ( p,0
396,<S2SV_ModStart> 1 ) ; if ( ret == 0 ) { ret = - EINVAL ; } <S2SV_ModStart> 1 ) ; },0
397,,0
398,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
399,"<S2SV_ModStart> ""S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> * s2S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null>",0
400,<S2SV_ModStart> ) ) ; if (! NULL ) { err = NULL ; },0
401,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
402,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
403,,0
404,<S2SV_ModStart> image ) { <S2SV_ModEnd> if ( image,0
405,"<S2SV_ModStart> -> bh = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
406,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
407,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> dev ) { if ( d -> dev ) { dev_err ( & d -> dev, ""usb_dev -> dev ) ; return - ENODEV ; } <S2SV_ModStart> dev ) ; } ddev = d -> dev -> dev ; if ( d -> dev ) { dev -> dev_err ( & d -> dev, ""%s: <S2SV_blank> device <S2SV_blank> %d\\n"", __func__, hdev -> dev ) ; return - ENODEV2SV_null> <S2SV_null>",0
408,"<S2SV_ModStart> pirlvl ) { if ( pi -> numrlvls > JAS_CAST ( JAS_CAST ( JAS_CAST ( JAS_CAST ( JAS_CAST ( JAS_CAST ( JAS_CAST ( JAS_CAST ( JAS_CAST ( JAS_CAST ( JAS_CAST ( JAS_CAST ( JAS_CAST ( JAS_CAST ( JAS_CAST ( JAS_CAST ( JAS_CAST ( uint_fast32_fast32_fast32_fast32_t, 1 ), 1 ) ) ) <S2SV_ModEnd> << rpx )",0
409,,0
410,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 2S2SV_null> 0 ) { <S2SV_ModEnd> int i ; <S2SV_ModStart> 0 ) { <S2SV_ModEnd> if ( quantumPixelChannels * <S2SV_ModStart> ++ ) { <S2SV_ModEnd> PixelChannels * <S2SV_ModStart> 1 ) ; } <S2SV_ModEnd> if ( q <S2SV_ModStart> 1 ) { <S2SV_ModEnd> if ( q <S2SV_ModStart> q ) ; } <S2SV_ModStart> ++ ) { <S2SV_ModEnd> if ( q ++ ; <S2SV_ModStart> 1 ) { <S2SV_ModEnd> if ( q ) <S2SV_ModStart> 1 ) { <S2SV_ModEnd> return 1 ; <S2SV_ModStart> q ) ; } <S2SV_ModEnd> 1 ) { <S2SV_ModStart> q ) ; } <S2SV_ModEnd> if ( q ++ ; <S2SV_ModStart> 1 ) { <S2SV_ModEnd> if ( q ++ ; <S2SV_ModStart> 1 ) { <S2SV_ModEnd> if ( q ) <S2SV_ModStart> 1 ) { <S2SV_ModEnd> if ( q <S2SV_ModStart> 1 ) ; } <S2SV_ModStart> 1 ) { <S2SV_ModEnd> return 0 ; },0
411,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
412,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
413,<S2SV_ModStart> ) { return <S2SV_ModEnd> ; } return,0
414,<S2SV_ModStart> * out ; <S2SV_ModEnd> out = tmp <S2SV_ModStart> out ; } else { <S2SV_ModEnd> out = tmp,0
415,,0
416,"<S2SV_ModStart> * cpi, vpx_prob <S2SV_ModEnd> * probs,",0
417,,0
418,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
419,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output,",0
420,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
421,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> page ) { if ( page_pages ( page ) ) return - EINVAL <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( hdr ) ) { kfree ( page ) ; } <S2SV_ModEnd> if ( page,0
422,<S2SV_ModStart> ; } } if (,0
423,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
424,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 7 ) { const tran_low_t <S2SV_ModEnd> output = input <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] ; tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_low_t ) ; tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_low_t ) <S2SV_ModStart> 0 ] = ( tran_low_t ) ; tran_low_",0
425,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> flags &,0
426,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
427,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
428,"<S2SV_ModStart> tot_len ) ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
429,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
430,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> null> <S2SV_null> <S2SV_null>,0
431,<S2SV_ModStart> ; if ( mnt -> mnt_flags & MNT_NODEV ) mnt -> mnt_flags |= MNT_NODEV ; if ( mnt -> mnt. mnt_flags & MNT_NODEV ) mnt_flags |= MNT_NOSUID ; if ( mnt -> mnt_flags & MNT_NODEV ) mnt -> mnt_flags |= MNT_LOCK_NOSUID ; if ( mnt -> mnt. mnt_flags & MNT_NOSUID ) mnt -> mnt_flags |= MNT_NOSUID ; if ( mnt -> mnt. mnt. mnt. mnt. mnt. mnt. mnt_flags & MNT_NOEXEC ) mnt -> mnt_flags |= MNT_NOSUID ; if ( mnt -> mnt -> mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt. mnt_flags |= MNT_flags |= MNT,0
432,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
433,<S2SV_ModStart> * rsize >= 91 <S2SV_ModEnd> && rdesc [,0
434,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
435,<S2SV_ModStart> return 0 ; if ( i < 8 ) return - EINVAL ;,0
436,"<S2SV_ModStart> ( ndo, ""%s"", rp <S2SV_ModEnd> ) ) ; if",0
437,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
438,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mi_se2SV_null> <S2SV_null> static int <S2SV_ModEnd> int mi_seg_seg_seg_seg_seg_seg_seg_segment_segment_segment_segment_segment_segment_segment_se ( bs, tile_segment_segment_segment_segment_segment_segment_id, tile_segment_segment_segment_segment_segment_segment_segment_segment_segment_se ( bs, tile_segment_segment_segment_segment_segment_segment_segment_segment_segment_segment_se ( bs, mi_segment_segment_segment_segment_segment_segment_segment_segment_segment_se ( bs ), mi_segment_segment_segment_segment_segment_segment_segment_segment_segment",0
439,<S2SV_ModStart> ; } else if (,0
440,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0 ;,0
441,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
442,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
443,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
444,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
445,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token,",0
446,<S2SV_ModStart> ) ) ; if ( rctx -> height < 0 ) return - 1 ;,0
447,,0
448,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModStart> data ) { int ret = kmalloc ( size, GFP_KERNEL ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; } return",0
449,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
450,,0
451,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 8_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ; vpx_null>,0
452,<S2SV_ModStart> = rc ; <S2SV_ModEnd> if ( rc,0
453,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
454,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
455,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
456,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null>,0
457,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return 0 ;,0
458,,0
459,"<S2SV_ModStart> ( ndo, ""%s"" <S2SV_ModEnd> ) ) ;",0
460,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
461,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = 0 ; # if CONFIG_VP9_HIGHBITSV_HIGHBITS2SV_null> static,0
462,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
463,,0
464,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
465,"<S2SV_ModStart> BPF_ALU64 ) { coerce_reg_to_size ( dst_reg, 4 ) ; coerce_reg_to_size ( dst_reg, 4 ) ; coerce_reg_to_size ( dst_reg, 4 ) ; coerce_reg_to_size ( & src_reg, 4 ) ; coerce_reg_to_size ( & src_reg, 4 ) ; coerce_reg_to_size ( dst_reg, 4 ) ; coerce_reg_size ( & src_reg, 4 ) ; coerce_reg_to_size ( & src_reg, 4 ) ; coerce_reg_to_size ( & src_reg, 4 ) ; coerce_size ( dst_reg, 4 ) ;",0
466,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> VP9_COMP_HIGHBITDEPTH <S2SV_ModEnd> ( cm, <S2SV_ModStart> VP9_HIGHBITDEPTH ) { <S2SV_ModEnd> return 0 ;",0
467,,0
468,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
469,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
470,<S2SV_ModStart> void usage_exit ( void,1
471,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
472,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
473,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
474,,0
475,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
476,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
477,"<S2SV_ModStart> ( ndo, ""%s"" <S2SV_ModEnd> ) ) {",0
478,<S2SV_ModStart> y3 ) { sprintf ( outputbuffer <S2SV_ModEnd> ) ; },0
479,<S2SV_ModStart> ; return 1 <S2SV_ModEnd> ; if (,0
480,<S2SV_ModStart> case Z_FAILURE ) { zval = zval ; zval = zval_copy_ctor ( zval ) ; zval_copy_ctor ( zval ) ; zval = zval ; zval_copy_copy_ctor ( zval ) ; zval ) ; zval = zval ; zval = zval ; zval_copy_ctor ( zval ) ; zval ) ; zval = zval ; zval_copy_ctor ( zval ) ; zval ) ; zval = zval ; zval_ctor ( zval ) ; zval_copy_copy_copy_copy_copy_ctor ( zval ) ; zval ) ; zval = zval_copy_ctor ( zval ) ; zval ) ; zval = zval ; zval ; zval_ctor ( zval ) ; zval_copy_ctor ( zval ) ; zval = zval_ctor ( zval ) ; zval_copy_copy_copy_ctor ( zval ) ; zval = Z_ctor ( zval ) ; zval_copy_copy_copy_ctor ( zval ) ; zval ) ; z,0
481,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
482,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
483,<S2SV_ModStart> ; return - EINVAL <S2SV_ModEnd> ; if (,0
484,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
485,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return NULL ;,0
486,<S2SV_ModStart> goto out ; <S2SV_ModEnd> if ( p,0
487,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> u8_t *,0
488,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
489,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
490,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
491,"<S2SV_ModStart> ; if ( osStrchr <S2SV_ModEnd> ( cptr,",0
492,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
493,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> offset = 0,0
494,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
495,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
496,,0
497,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_lineno, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""lineno\\"" <S2SV_blank> missing <S2SV_blank> \\"" ) ; return 1 ; } if ( tmp == NULL || tmp == NULL ) { Py_CLEAR ( tmp ) ; return 1 ; } if ( tmp == Py_CLEAR ( tmp ) { Py_CLEAR ( tmp ) ; } if ( tmp == Py_CLEAR ( tmp ) < 0 ) { Py_CLEAR ( tmp ) ; return 1 ; } if ( tmp == NULL || tmp == NULL ) { Py_CLEAR ( tmp ) { Py_CLEAR ( tmp ) ; } if ( tmp == NULL || tmp == NULL ) { Py_CLEAR ( tmp ) { Py_CLEAR ( tmp ) ; return 1 ; } if ( tmp == NULL ) { Py_CLEAR ( tmp ) { Py_CLEAR ( tmp ) ; } else { Py_CLEAR ( tmp ) ; } else { Py_CLEAR ( tmp, ""required <S2SV_blank> missing <S2SV_blank>",0
498,"<S2SV_ModStart> ; j = jas_uchar <S2SV_ModEnd> ( buf,",0
499,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
500,,0
501,"<S2SV_ModStart> } else { assert_true_blob ( ""\\0 <S2SV_blank> = <S2SV_blank> $a <S2SV_blank> $a <S2SV_blank> $abc/ <S2SV_blank> $a <S2SV_blank> $a <S2SV_blank> $a <S2SV_blank> $a <S2SV_blank> $a <S2SV_blank> \\0x\\0x\\0x\\0c\\0' ) ; assert_true_true_true_true_blob ( ""rule <S2SV_blank> $a <S2SV_blank> $a <S2SV_blank> $a <S2SV_blank> $a <S2SV_blank> $a <S2SV_blank> $a <S2SV_blank> \\0"" ) ; assert_true_true_true_blob ( ""abc/ <S2SV_blank> $a <S2SV_blank> $a <S2SV_blank> $a <S2SV_blank> $a <S2SV_blank> $a <S2SV_blank> $a <S2SV_blank> $a <S2SV_blank> $a <S2SV_blank> \\0"" ) ; assert_true_true_blob ( ""rule <S2SV_blank> $a <S2SV_blank> $a <S2SV_blank> $a <S2SV_blank> $a <S2SV_blank> $a <S2SV_blank> $a <S2SV_blank> $a <S2SV_blank> \\0b\\0b\\0x\\0b\\0"" ) ; assert_true_true_true_true_true_true_blob ( ""\\0"" ) ; assert_true_true_true_true_true_true_true_blob ( ""Invalid <S2SV_blank> $a <S2SV_blank> $a <S2SV_blank> $a <S2SV_blank> \\0"" ) ; assert ( """,0
502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> hash_null> <S2S2S2SV_null>,0
503,<S2SV_ModStart>. mnt_flags & MNT_MASK <S2SV_ModEnd> ; if (,0
504,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
505,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
506,<S2SV_ModStart> port ) { <S2SV_ModEnd> return - EINVAL ;,0
507,"<S2SV_ModStart> ; uint64_t s64_chunk ; uint64_chunk = 0 ; uint64_chunk s64_chunk ; uint64_chunk = 0 ; uint64_chunk. s64_chunk. s64_chunk = 0 ; uint64_chunk. s64_chunk. s64_chunk. s64_chunk. s64_chunk, sizeof ( chunk_chunk ) ) ; uint32_chunk. chunk_chunk = 0 ; uint64_chunk = 0 ; uint64_chunk. s64_chunk = 0 ; uint32_chunk. s64_chunk. s64_chunk = 0 ; uint64_chunk. s64_chunk, sizeof ( table_chunk ) ) ; if (! cs64_chunk ) ) { error_chunk. chunk_chunk. chunk_chunk = CS64_chunk. chunk_chunk. s64_chunk. chunk_chunk. s64_chunk, sizeof ( table_chunk ) ; } if ( cs64_chunk ) ) { error = CS64_chunk",0
508,"<S2SV_ModStart> -> msg_namelen ; msg -> msg_namelen = msg -> msg_name ; <S2SV_ModStart> -> msg -> msg_namelen ; <S2SV_ModEnd> msg -> msg_namelen <S2SV_ModStart> ( msg -> msg_name, msg_name, msg -> msg_namelen <S2SV_ModEnd> ) ; if",0
509,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> b2S2SV_null> <S2SV_null>,0
510,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) ) { int <S2SV_ModEnd> printf ( int <S2SV_ModStart> ( int ) ) <S2SV_ModEnd> ; if (,0
511,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
512,,0
513,"<S2SV_ModStart> ) { struct fname * fname = NULL ; if (! fname ) { <S2SV_ModStart> ( fname, ""/etc"" ) ; } else { if (! fname ) return - 1 ; } <S2SV_ModStart> } else { fprintf ( fname, fname, fname ) ; } else { if (! fname ) { fprintf ( stderr, ""/etc"" ) ; return - 1 ; } else { fprintf ( fname, ""/tmp/etc"" ) ; } else { if ( fname ( fname, fname ) == - 1 ) { error ( fname ) ; } if ( fname ( fname ) == - 1 ) { fprintf ( fname, ""clone"" ) ; } else { error ( fname, ""clone"" ) ; } else if ( fname ) == - 1 ) { fprintf ( fname, ""clone"" ) ; } else if ( fname ( fname ) == - 1 ) { fprintf ( fname ) ; } else { error ( fname ) ; } else { error ( fname, ""/etc"" ) ; } else if ( fprintf ( fname ) == - 1 ) ; } else { if ( fname",0
514,<S2SV_ModStart> ) ; return NULL,0
515,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
516,"<S2SV_ModStart> ( nr, 0 <S2SV_ModEnd> ) ; }",0
517,"<S2SV_ModStart> { if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
518,<S2SV_ModStart> + 1 ; size_t <S2SV_ModEnd> size = 1,0
519,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
520,"<S2SV_ModStart> ( interface, EINVAL <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR_ISR <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, EINVAL <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR_ISR <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, KSZ8851_ISR_ISR <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, EINVAL <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, EINVAL <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, EINVAL <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, EINVAL <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, EINVAL <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, EINVAL <S2SV_ModEnd> ) ) ; if",0
521,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
522,"<S2SV_ModStart> } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
523,<S2SV_ModStart> ; } } if ( * ptr == NULL ) return NULL ;,0
524,,0
525,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
526,,0
527,<S2SV_ModStart> 0 ) { err = - EBUSED ; },0
528,<S2SV_ModStart> { ret = <S2SV_ModEnd> goto ret ; },0
529,"<S2SV_ModStart> ( strlen, ""%s"",",0
530,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
531,,0
532,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> BLOCK_null> <S2S2SV_null> static <S2SV_ModStart> BLOCK_null> <S2SV_null> <S2S2SV_null> <S2SV_null> static <S2SV_ModEnd> BLOCK_null> static <S2SV_ModStart> BLOCK_null> <S2SV_null> <S2S2SV_null> bsize_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> BLOCK_null> bsize ( xd <S2SV_ModEnd>, BLOCK_null>",0
533,<S2SV_ModStart> value ) ; if (! value ) return - ENOMEM ;,0
534,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
535,,0
536,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
537,<S2SV_ModStart> i ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_matind_t,0
538,,0
539,<S2SV_ModStart> ; ret = 0 <S2SV_ModEnd> ; ret =,0
540,,0
541,"<S2SV_ModStart> BPF_ALU64 ) { coerce_reg_to_size ( dst_reg, 4 ) ; coerce_reg_to_size ( dst_reg, 4 ) ; coerce_reg_to_size ( dst_reg, 4 ) ; coerce_reg_to_size ( & src_reg, 4 ) ; coerce_reg_to_size ( & src_reg, 4 ) ; coerce_reg_size ( dst_reg, 4 ) ; coerce_reg_to_size ( & src_reg, 4 ) ; coerce_reg_to_size ( & src_reg, 4 ) ; coerce_reg_to_size ( & src_reg, 4 ) ; coerce_size ( dst_reg, 4 ) ;",0
542,<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> if ( dir,0
543,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return 0 ;,0
544,<S2SV_ModStart> inode ) ; ext4_write_inode ( inode ) ; <S2SV_ModEnd> if ( inode,0
545,<S2SV_ModStart> ; s ->,0
546,"<S2SV_ModStart> & fl6, 0",0
547,<S2SV_ModStart> len ) { if ( len == olen ) return len ;,0
548,<S2SV_ModStart> pio ) ; <S2SV_ModEnd> return ret ;,0
549,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
550,<S2SV_ModStart> * rsize >= <S2SV_ModEnd> && rdesc [,0
551,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_frame_stats ( VP9_COMMON <S2SV_ModStart> ) { const size_t <S2SV_ModEnd> svcpy <S2SV_ModEnd> ( svc_ctx, <S2SV_ModStart> i ] ; size_t <S2SV_ModEnd> svcpy <S2SV_ModEnd> ( svc_t",0
552,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
553,,0
554,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> * * end_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
555,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
556,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
557,,0
558,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
559,"<S2SV_ModStart> ; } } if ( <S2SV_ModEnd> ( w,",0
560,"<S2SV_ModStart> image ) ; if ( count == 0 ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ;",0
561,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> break ; },0
562,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
563,<S2SV_ModStart> ) ) return - EINVAL <S2SV_ModEnd> ; if (,0
564,<S2SV_ModStart> int ret ; size_t <S2SV_ModEnd> len = 0,0
565,"<S2SV_ModStart> in_what, in_stride <S2SV_ModEnd> ) ; if",0
566,<S2SV_ModStart> L2SV_null> <S2SV_null> <S2SV_null>,0
567,"<S2SV_ModStart> name ), ""crypto-%s"" <S2SV_ModEnd>, name )",1
568,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
569,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mi_row ) { VP9_COMMON * const MACROBLOCKD * const xd = & cpi -> mi_row, MACROBLOCKD * const <S2SV_ModStart> BLOCK_SIZE bsize, MACROBLOCKD * const <S2SV_ModEnd>, mi_row, <S2SV_ModStart> BLOCK_SIZE bsize ) { <S2SV_ModStart> BLOCK_SIZE bsize = & td <S2SV_ModEnd> -> common ; MACROBLOCK_INFO * const <S2SV_ModStart> BLOCK_SIZE bsize ) ; memset <S2SV_ModEnd> ( & cpi <S2SV_ModStart> BLOCK_SIZE bsize, mi_col, <S2SV_ModStart> BLOCK_8 ) ; memset ( & cpi, 0, 0, mi_col, mi_col, & cpi -> mbmi_col, & cpi -> mi_row, mi_col, mi_col ) ; if ( cpi -> common. mb_col ) { memset ( & cpi, & cpi -> mi_col ) ; if CONFIG_VP9_HIGHBITDEPTH ) { vp9_HIGHBITDEPTH if ( cpi ->",0
570,<S2SV_ModStart> 1 ) ; if ( ret == 0 ) ret = - EINVAL ; if ( ret == 0 ) { ret = - EINVAL ; },0
571,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
572,"<S2SV_ModStart> ; if ( osStrchr <S2SV_ModEnd> ( buf,",0
573,"<S2SV_ModStart> * tmpname, NULL <S2SV_ModEnd> ) ; }",0
574,<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> return NULL ;,0
575,<S2SV_ModStart> goto end ; <S2SV_ModEnd> if ( s,0
576,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
577,,0
578,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void,0
579,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> optlen ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> * opt -> optlen ; if ( <S2SV_ModEnd> optlen <S2SV_null> <S2SV_null>,0
580,<S2SV_ModStart> args ) ; args -> rmtvaluelen = args -> rmtvaluelen <S2SV_ModEnd> ; args ->,0
581,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
582,<S2SV_ModStart> ; if ( osStrchr <S2SV_ModEnd> ( connection ->,0
583,"<S2SV_ModStart> if (! dp -> priv_len <S2SV_ModEnd> ( dp, <S2SV_ModStart> ( dbuf, sizeof ( dbuf ) ) <S2SV_ModEnd> if ( dp",0
584,<S2SV_ModStart> goto out_name = 0 <S2SV_ModEnd> ; } if (,0
585,<S2SV_ModStart> -> columns - 1 <S2SV_ModEnd> ) ; x <S2SV_ModStart> % 4 ) > <S2SV_ModEnd> 2 ) {,0
586,"<S2SV_ModStart> ) { BN_ULONG <S2SV_ModEnd> c1, c2",1
587,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
588,<S2SV_ModStart>!= MagickFalse ) break,0
589,<S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( bp ) ;,0
590,"<S2SV_ModStart> p, true, false",0
591,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
592,,0
593,"<S2SV_ModStart> ( addr, PAGE_SHIFT <S2SV_ModEnd> ) ; }",0
594,<S2SV_ModStart> * row ; jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_matind_t,0
595,,0
596,<S2SV_ModStart> dev ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
597,"<S2SV_ModStart> goto out_delta ; } memset <S2SV_ModEnd> ( dev,",0
598,<S2SV_ModStart> * dev ; <S2SV_ModEnd> return 0 ;,0
599,"<S2SV_ModStart> * data, size_t flags <S2SV_ModEnd> ) { int",0
600,,0
601,<S2SV_ModStart> ; if ( namelen <S2SV_ModEnd> ( xfs ->,0
602,<S2SV_ModStart> ; pkg_size = 0,0
603,<S2SV_ModStart> ( s ->,0
604,<S2SV_ModStart> ) return ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
605,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
606,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> <S2SV_null> <SV_null> <S2SV_null> <S2SV_null> static",0
607,"<S2SV_ModStart> goto out ; if ( strlen ( name, '\\0' ) == '\\0' ) { g_warning ( ""%s: <S2SV_blank> "", '\\n"" ) ; goto out ; } <S2SV_ModEnd> } else if (",0
608,<S2SV_ModStart> goto out_lock ; error = fh_lock ( fh ) ; if ( fh -> fh ) goto out ; <S2SV_ModStart> goto out_lock ; if ( fh ) goto out_unlock <S2SV_ModEnd> ; if (,0
609,<S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; if (,0
610,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
611,<S2SV_ModStart> break ; } if ( elen >= elen ) return 0 ;,0
612,"<S2SV_ModStart> ( ndo, ""%s"", rp <S2SV_ModEnd> ) ) ;",0
613,<S2SV_ModStart> ) ) { ND_TCHECK_16BITS ( tptr ) ;,0
614,,0
615,<S2SV_ModStart> ( addr ) <S2SV_ModEnd> ; if (,0
616,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null>,0
617,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
618,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null> static int <S2SV_ModEnd> int ndo_t <S2SV_ModStart> int ndo, int <S2SV_ModEnd> u ; int <S2SV_ModStart> int ) { if ( ndo_t )!= NULL ) { ND_PRINT ( ( ndo, ""\\n"" ) ; return - 1 ; } if ( ndo, ( ndo, 1 ) ) { if ( ndo, 1 ) == 0 ) { ND_PRINT ( ( ( ndo, ""\\n"" ) ) ; return - 1 ; } if ( ndo, 1 ) == NULL ) { if (! ( ndo, 1 ) ) return - 1 ; } <S2SV_ModStart> 0 ) { if ( ndo, 1 ) { if ( ndo, 1 ) { if (! ( ndo, 1 ) ) return - 1 ) { if ( ndo, 1 ) return - 1 ; } if ( ndo, ndo, 1 ) { if ( ndo_print ( ndo, 1 ) == NULL ) { if ( ndo, 1 ) return - 1 ) { if ( ndo, 1 ) {",0
619,<S2SV_ModStart> ; args -> rmtvaluelen <S2SV_ModEnd> ; args ->,0
620,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
621,"<S2SV_ModStart> ) ; } copy_as_user <S2SV_ModEnd> ( src,",0
622,"<S2SV_ModStart> ( fc, NULL <S2SV_ModEnd> ) ; return",0
623,"<S2SV_ModStart> ( 1.0f, MagickMax <S2SV_ModEnd> ( 1.0f,",0
624,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
625,<S2SV_ModStart> ; if ( page_size < 0 ) goto out_unlock <S2SV_ModEnd> ; if (,0
626,<S2SV_ModStart> ; if (! strcpy <S2SV_ModEnd> ( dest ->,0
627,"<S2SV_ModStart> * off ; memset <S2SV_ModEnd> ( off,",0
628,<S2SV_ModStart> ) ) ; ND_TCHECK2 ( bp ) ;,0
629,<S2SV_ModStart> len ; } ND_TCHECK_16BITS ( bp ) ;,0
630,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi ->,0
631,"<S2SV_ModStart> ( tsize, 0 <S2SV_ModEnd> ) ) return",0
632,<S2SV_ModStart> ; if ( CHECKOVERFLOW ( n -> order ) > CHECKOVERFLOW ( CHECKOVERFLOW ) ) { exif_log ( n -> entries [ n -> entries [ tcount ]. entries [ tcount ]. format = n -> entries [ tcount ]. tag ; n -> entries [ tcount ]. format = n -> entries [ tcount ]. n -> entries [ tcount ]. entries [ tcount ]. format = n -> entries [ tcount ] ; n -> entries [ tcount ]. format = n -> entries [ tcount ]. entries [ tcount ] ; n -> entries [ tcount ]. format = n -> order ; n -> entries [ tcount ]. format = n -> order ; n -> order = n -> order ; n -> order ; n -> order = n -> order ; n -> entries [ tcount ]. order = n -> order ; n -> entries [ tcount ]. order = n -> order ; n -> entries [ tcount ]. order ; n -> order = n -> order ; n -> order ; n -> order = n -> order ; n -> order ; n -> order = n -> order = n -> order,0
633,<S2SV_ModStart> ; if ( ctx -> terminated ||,1
634,,0
635,"<S2SV_ModStart> ; if ( osStrchr <S2SV_ModEnd> ( filename,",0
636,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> out ; int <S2SV_ModStart> out ) { int <S2SV_ModEnd> out ; *,0
637,<S2SV_ModStart> ( buf + 4 <S2SV_ModEnd> ) ; },0
638,<S2SV_ModStart> goto out ; <S2SV_ModEnd> if ( page,0
639,<S2SV_ModStart> goto error ; <S2SV_ModEnd> if (!,0
640,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
641,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
642,<S2SV_ModStart> ; if ( seg -> prog ) return 0 ;,0
643,<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( c ->,0
644,<S2SV_ModStart> q ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
645,<S2SV_ModStart> ; # if CONFIG_HIGHBITS2SV_null> <S2SV_null> static,0
646,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
647,<S2SV_ModStart> slave_lock ) ; spin_unlock ( & timer -> lock ) ; <S2SV_ModStart> slave_unlock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
648,<S2SV_ModStart> len ; } ND_TCHECK_16BITS ( p ) ; <S2SV_ModStart> 0 ; } ND_TCHECK_16BITS ( p + <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> 2 ) ; ND_TCHECK_16BITS ( p + <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> 2 ) ; ND_TCHECK_16BITS ( p + <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> 0 ; ND_TCHECK_16BITS ( p + <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> 0 ; } ND_TCHECK_16BITS ( p + <S2SV_ModEnd> 2 ) ;,0
649,"<S2SV_ModStart> r_settings ) { r_set_config ( r, r ) ; r = RATE_INVALID_SET ( r, r -> common ) ; r_set_extentries ( r ) ; r = RATE_INVALID_set ( r -> b_config, r ) ; r_set_set_set ( r, r -> b_set_config, r -> b_config, r_config, r ) ; r_set_get_config ( r, r ) ; r_extent ( r ) ; r -> b_set_set ( r, r ) ; r_set_set ( r ) ; r -> s_set_set ( r ) ; r -> s_set_get_config ( r ), r -> s_extent ( r, r ) ) ; return - 1 ; } <S2SV_ModEnd> ; }",0
650,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
651,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> if ( i,0
652,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> hdr_null> <S2SV_null>,0
653,<S2SV_ModStart> S2SV_null> <S2S2SV_null> <S2SV_null>,0
654,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
655,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> int ret ; mutex_read_unlock ( & <S2SV_ModStart> key ) ; mutex_unlock ( & key -> read_read_unlock <S2SV_ModEnd> ) ; return,0
656,<S2SV_ModStart> { ret = TEMP_FAILURE_RETRY (,0
657,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( length",0
658,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
659,<S2SV_ModStart> NULL ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
660,<S2SV_ModStart> dev ) ; <S2SV_ModEnd> return 0 ;,0
661,<S2SV_ModStart> ) ) ; msg -> msg_namelen = 0 ;,0
662,"<S2SV_ModStart> ( fp, NULL <S2SV_ModEnd> ) ; if",0
663,<S2SV_ModStart> * s ; <S2SV_ModEnd> if ( s,0
664,<S2SV_ModStart> data ) { <S2SV_ModEnd> ret = 0,0
665,<S2SV_ModStart> } return NULL <S2SV_ModEnd> ; if (,0
666,"<S2SV_ModStart> ; ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
667,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
668,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return - 1 ;,0
669,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
670,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
671,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
672,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
673,<S2SV_ModStart> ; if ( osStrchr <S2SV_ModEnd> ( context ->,0
674,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return 0 ;,0
675,<S2SV_ModStart> ) return 0 <S2SV_ModEnd> ; if (,0
676,,0
677,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) ; rcu_read_lock ( ) ; <S2SV_ModStart> np -> opt ) ; rcu_read_unlock ( ) ;",0
678,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
679,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
680,<S2SV_ModStart> ) ) { <S2SV_ModEnd> return - 1,0
681,<S2SV_ModStart> 0 ; } st32 vnaux = vnaux ; vnaux = vnaux ; vnaux = vnaux ; vnaux = vnaux ; vnaux = vnaux -> vnaux ; vnaux = vnaux ; vnaux = vnaux ; vnaux = vnaux ; vnaux = vnaux ; vnaux = vnaux ; vnaux = vnaux ; if ( vnaux < 1 ) { vnaux = vnaux ; goto out ; } vnaux = vnaux ; } vnaux = vnaux = vnaux ; vnaux = vnaux ; vnaux = vnaux ; vnaux = vnaux ; vnaux = vnaux ; vnaux = vnaux ; vnaux = vnaux ; vnaux = vnaux = vnaux ; vnaux = vnaux ; vnaux = vnaux ; vnaux = vnaux ; vnaux = vnaux = vnaux ; vnaux ; vnaux = vnaux ; vnaux = vn,0
682,,0
683,"<S2SV_ModStart>, hdr, 0 <S2SV_ModEnd> ) ; if",0
684,,0
685,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
686,<S2SV_ModStart> ; return - EINVAL ; if (,0
687,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
688,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
689,"<S2SV_ModStart> list. name, true",1
690,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> encode_null> <S2S2SV_null>,0
691,,0
692,,0
693,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
694,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
695,,0
696,,0
697,<S2SV_ModStart> dev ) ; kfree ( cmd ) ;,0
698,"<S2SV_ModStart>, string type_comment, string type_comment, <S2SV_ModStart>, NULL ) ; if (! type_comment ) return NULL ; <S2SV_ModStart>, type_comment, type_comment, type_comment, type_comment ) ; if ( type_comment ) return NULL ;",0
699,<S2SV_ModStart> return - EINVAL <S2SV_ModEnd> ; if (,0
700,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
701,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ;,1
702,"<S2SV_ModStart> { if ( o_element_count!= * o_count ) { l_row_row_row ; if ( l_row_row < 0 || l_row_row_count!= * o_row_row ) { l_row_row_row_row <S2SV_ModEnd> ( o_row,",0
703,,0
704,<S2SV_ModStart> ctxt ) { int rc = X86EMUL_CONTINUE ; <S2SV_ModStart> ) ) ; return rc <S2SV_ModEnd> ; } <S2SV_null>,0
705,,1
706,<S2SV_ModStart> ret ) ; <S2SV_ModEnd> return 0 ;,0
707,<S2SV_ModStart> psf -> header. indx = psf -> header. indx <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. end <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ; psf -> <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> header. end <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ; psf ->,0
708,<S2SV_ModStart> inode ) ; ext4_inode_dio_lock ( inode ) ; <S2SV_ModStart> inode ) ; ext4_dio_unlock ( inode ) ; <S2SV_ModStart> inode ) ; memset ( inode ) ; <S2SV_ModEnd> ( inode ->,0
709,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
710,"<S2SV_ModStart> = SOCK_STREAM ; memset ( sk, 0, 0, sizeof ( sk ) ) ;",0
711,<S2SV_ModStart> ; int offset = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) { if ( <S2SV_ModEnd> goto error <S2SV_ModStart> goto error ) { <S2SV_ModEnd> goto error ; },0
712,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> s2S2SV_null> static jas_s ( jas_eprintf, opts, jas_eprintf <S2SV_ModEnd>, jas_eprintf (",0
713,<S2SV_ModStart> struct va_format vaf <S2SV_ModEnd> ; va_start (,0
714,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } else {,0
715,"<S2SV_ModStart> ) ) ; strncpy <S2SV_ModEnd> ( page,",0
716,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
717,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
718,<S2SV_ModStart> length ) { size_t <S2SV_ModEnd> length = sun_pixels,0
719,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
720,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) break",0
721,<S2SV_ModStart> ; newinet -> inet_opt = NULL ;,0
722,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
723,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
724,"<S2SV_ModStart> gfn, page_size >> PAGE_SHIFT",0
725,"<S2SV_ModStart> ( ctrl, 0",0
726,<S2SV_ModStart> event ) { <S2SV_ModEnd> event_context ( event <S2SV_ModStart> event ) ; } <S2SV_ModEnd> } <S2SV_null>,0
727,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> buffer [ 0,0
728,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> nid_null> <S2S2SV_null>,0
729,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
730,<S2SV_ModStart> dev ) { memset <S2SV_ModEnd> ( vif ->,0
731,<S2SV_ModStart> ; hdr -> sadb_satype = 0 ; hdr ->,0
732,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> return 0 ;,0
733,"<S2SV_ModStart> size ) { size_t lua_argsize ; int lua_check ( L, ""too <S2SV_blank> too <S2SV_blank> too <S2SV_blank> 1"" ) ; if ( lua_argsize < 2 ) { lua_check_arg ( L, ""too <S2SV_blank> too <S2SV_blank> too <S2SV_blank> 1"" ) ; return - 1 ; } <S2SV_ModStart> 0 ) ; } <S2SV_ModEnd> if ( ldelta ( lua_argsize <= lua_arg ) { lua_arg ( L, ""too <S2SV_blank> to <S2SV_blank> too <S2SV_blank> many <S2SV_blank> too <S2SV_blank> too <S2SV_blank> to <S2SV_blank> data"" ) ; return lua_arg ++ ; }",0
734,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
735,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
736,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
737,"<S2SV_ModStart> ) ; } copy_as_user <S2SV_ModEnd> ( src,",0
738,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> char * s,0
739,<S2SV_ModStart> return res ; <S2SV_ModEnd> return 0 ;,1
740,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( bh -> <S2SV_ModStart> extent ) ; memset <S2SV_ModEnd> ( bh ->,0
741,<S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; },0
742,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null> static INT_MAX_MAX <S2SV_ModEnd> ; image_size = <S2SV_ModStart> image_size ) ; if ( fprintf ( tp, ""invalid <S2SV_blank> image\\n"" ) ) ; return - 1 ;",0
743,<S2SV_ModStart> len ) ; if ( len < 0 ) return - EINVAL ;,0
744,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
745,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
746,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
747,<S2SV_ModStart> addr ) { <S2SV_ModEnd> goto out ; <S2SV_ModStart> ( address ) ; <S2SV_ModEnd> return 0 ;,0
748,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode ) <S2SV_ModEnd> ; if (",0
749,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
750,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> columns ) ; if ( status == MagickFalse ) break",0
751,<S2SV_ModStart> -> it_overrun = <S2SV_ModEnd> ( timer ->,0
752,,0
753,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
754,<S2SV_ModStart> -> data_data ; mutex_lock ( & kfree ) ; <S2SV_ModStart> ) ; } spin_lock ( & io -> io_lock ) ;,0
755,<S2SV_ModStart> ; if (! skb -> opt.,0
756,<S2SV_ModStart> ( ) ) == 0,0
757,<S2SV_ModStart> return - EINVAL <S2SV_ModEnd> ; if (,0
758,,0
759,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
760,<S2SV_ModStart> out_free ; } kvm_unlock ( kvm ) ;,0
761,,0
762,<S2SV_ModStart> break ; } if ( len > end - ENOMEM ) { goto out ; } <S2SV_ModStart> break ; } if ( len < end - 1 ) goto out ;,0
763,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
764,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
765,<S2SV_ModStart> ( server. ds_enabled <S2SV_ModEnd> ( server.,0
766,<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> } if (,0
767,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ruv_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
768,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
769,,0
770,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
771,"<S2SV_ModStart>, NULL, true, true",0
772,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
773,<S2SV_ModStart> ; if ( <S2SV_ModEnd> psf -> header,0
774,<S2SV_ModStart> 1 ) { memcpy <S2SV_ModEnd> ( svc ->,0
775,,0
776,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
777,<S2SV_ModStart> if ( ( e <S2SV_ModEnd> ) == 0,0
778,"<S2SV_ModStart> ; if ( safe_calloc <S2SV_ModEnd> ( buf,",0
779,<S2SV_ModStart>! buf ) || count > OE_RAISE_ERRNO ( OE_EINVAL ),0
780,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
781,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
782,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
783,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
784,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
785,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> dev_null> <S2SV_null> static,0
786,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
787,<S2SV_ModStart> void usage_stats ( void,0
788,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
789,<S2SV_ModStart> task ) { <S2SV_ModEnd> del_timer ( & <S2SV_ModStart> -> timer ) <S2SV_ModEnd> ; complete (,1
790,<S2SV_ModStart> ; strncpy <S2SV_ModEnd> ( buf ),0
791,"<S2SV_ModStart>, sizeof ( addr ) <S2SV_ModEnd> ; if (",0
792,,0
793,"<S2SV_ModStart> ( interface, EINVAL <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, EINVAL <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, EINVAL <S2SV_ModEnd> ) ) ; if",0
794,<S2SV_ModStart> pending ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
795,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null> static <S2SV_ModStart> dir_null> <S2SV_null> <S2SV_null> <S2S2SV_null> <S2SV_null>,0
796,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
797,<S2SV_ModStart> i ) ; <S2SV_ModEnd> return NULL ;,0
798,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
799,<S2SV_ModStart> return - ENOMEM <S2SV_ModEnd> ; ret =,0
800,"<S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> HAVE_OP ( 0, 0 <S2SV_ModStart> HAVE_OP ( 0 <S2SV_ModStart> NEED_OP ( 0, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> HAVE_IP ( 0, 0 <S2SV_ModStart> NEED_IP ( 0, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> HAVE_OP ( 0, 0 <S2SV_ModStart> NEED_OP ( 0, 0 <S2SV_ModStart> NEED_IP ( 0 <S2SV_ModStart> HAVE_OP ( 0, 0 <S2SV_ModStart> HAVE_OP ( 0 <S2SV_ModStart> NEED_IP ( 0, 0 <S2SV_ModStart> HAVE_IP ( 0, 0 <S2SV_ModStart> NEED_OP ( 0, 0 <S2SV_ModStart> NEED_IP ( 0 <S2SV_ModStart> NEED_IP ( 0, 0 <S2SV_ModStart> HAVE_OP ( 0, 0 <S2SV_ModStart> NEED_OP ( 0, 0 <S2SV_ModStart> NEED_IP ( 0, 0 <S2SV_ModStart> NEED_IP ( 0 <S2SV_ModStart> NEED_IP ( 0, 0 <S2SV_ModStart> NEED_IP ( 0, 0 <S2SV_ModStart> NEED_IP ( 0, 0 <S2SV_ModStart> NEED",0
801,"<S2SV_ModStart> ; # if CONFIG_HIGHBITDEPTH if ( fit_error ( fit_error )!= NULL ) { if ( fit_error ( fit_error, ""error: <S2SV_blank> invalid <S2SV_blank> invalid <S2SV_blank> name"" ) ; return - EINVALID ; } if ( <S2SV_ModEnd> ( fit_error, <S2SV_ModStart> ) ) ) { if ( fit_error ( ""error: <S2SV_blank> invalid <S2SV_blank> invalid <S2SV_blank> name: <S2SV_blank> %d\\n"", image_name ) ) ; return - EINVAL ; } # endif <S2SV_ModStart> return - 1 ; } if ( <S2SV_ModEnd> ) ; } if",0
802,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
803,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return - 1,0
804,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
805,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
806,<S2SV_ModStart> rc ; const VP9EncoderConfig <S2SV_ModEnd> * oxcf =,0
807,,0
808,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
809,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
810,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
811,"<S2SV_ModStart> } # line 62 <S2SV_ModEnd> ""grammar.c"" { compiler -> <S2SV_ModStart> } # line 1358 <S2SV_ModEnd> ""grammar.c""grammar.c"" { compiler -> <S2SV_ModStart> } # line 847 <S2SV_ModEnd> ""grammar.c""grammar.c""grammar.c"" { compiler <S2SV_ModEnd> ""grammar.c""grammar.c"" { yr_grammar.c"" break ; }",0
812,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
813,,0
814,,0
815,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
816,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> break ; },0
817,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat,0
818,<S2SV_ModStart> -> peer. new -> peer.,0
819,<S2SV_ModStart> ( ret = - EINVAL <S2SV_ModEnd> ; if (,0
820,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
821,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> p_null> <S2S2SV_null>,0
822,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> input_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
823,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> intra_sse2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> intra_pick_sse = 0 <S2SV_ModStart> intra_sse = 0 <S2SV_ModEnd> ; # if CONFIG_VP8_HIGHBITDEPTH int <S2SV_ModStart> = 0 ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_VP8_HIGHBITDEPTH int best_sse = 0 ; # endif <S2SV_ModStart> intra_sse = 0 ; # if CONFIG_VP8_HIGHBITDEPTH if CONFIG_VP8_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH best_sse = 0 ; # endif <S2SV_ModStart> this_sse = 0 ; # if CONFIG_VP8_VP8_HIGHBITDEPTH if CONFIG_VP8_HIGHBITDEPTH if CONFIG_VP9_HIGHBITDEPTH if ( best_sse, best_sse, best_sse, best_sse, best_sse, best_sse, best_sse,",0
824,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
825,<S2SV_ModStart> ; if ( osStrchr <S2SV_ModEnd> ( h ),0
826,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return 0 ; <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return 0 ;,0
827,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
828,,0
829,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> vpx_codec_alg_priv_t *,0
830,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
831,<S2SV_ModStart> int bitspersample = 0,0
832,"<S2SV_ModStart> * p ; void * p ; int a = NULL ; <S2SV_ModStart> ; if ( p!= NULL ) { archive_error ( & a -> archive, ""%s\\n"" ) ; return NULL ; } if ( p!= NULL ) { archive_error ( a, ""Failed <S2SV_blank> is <S2SV_blank> is <S2SV_blank> is <S2SV_blank> archive\\n"" ) ; return NULL ; } if ( p!= NULL ) { archive_error ( a!= NULL ) { archive_error ( a, ""%s\\n"" ) ; return NULL ; } else { archive_s\\n"" ) ; } if ( ( p!= NULL ) { archive_error ( a!= NULL ) { archive_error ( ""%s\\n"", ""\\n"" ) ; return NULL ; } if ( p!= NULL ) { archive_error ( a!= NULL ) { archive_error ( ""%s\\n\\n"" ) ; } else { free ( a!= NULL ) ; } else { archive_error ( a!= NULL ) ; } else { archive_error ( a!= NULL ) ; } else { archive_error ( ""%s\\n"" ) ; } else { archive_error ( a, a -> archive_error ( a!= NULL ) ; }",0
833,"<S2SV_ModStart> } if ( safe_mount <S2SV_ModEnd> ( path,",0
834,"<S2SV_ModStart> struct ext4_info * bb ; struct ext4_info * bb ; struct ext4_info * bb ; <S2SV_ModStart> if ( inode ) goto out ; if ( inode -> i_offset > bh -> i_len ) goto out ; if ( bh -> i_offset > bs ) goto out ; if ( inode ) goto out ; <S2SV_ModStart> if ( bh, bs, bh -> bh -> bs, bs ) goto out_unlock ) ; if ( bh -> bh ) goto out ; if ( bh -> i_offset > bs ) goto out ; if ( bh -> bh, bs, bh -> bh -> bs, bs, bs, bh -> bs, bs, bh -> bh, bs, bs, bs, bh -> bs, bs, bs ) ) goto out ; if ( bh -> bh -> bh -> bs ) goto out ; if ( inode ) goto out ; if (! bh -> bh -> bh ) goto out ; if ( bh -> bh ) goto out : if ( inode",0
835,"<S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( lfm,",0
836,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null> <S2SV_null> static <S2SV_ModStart> data ) { const size_t data_t size ; if ( data_size > data_size ) { if ( data_size > size ) return - ENOM_t * data ; <S2SV_ModStart> data ) { if ( data_size > size ) return - ENOMEM ; } if ( data + 1 ) goto out ; <S2SV_ModStart> data ) { if ( data + 1 ) goto out ; } if ( data + 1 ) { if ( data + 1 ) goto out ; <S2SV_ModStart> if ( data + 1 ) goto out ; } if ( data + 1 ) { if ( data + 1 ) goto out ) { return - 1 ; } if ( data + 1 ) { return - 1 ; } if ( data + 1 ) { if ( data + 1 ) goto out ; if ( data + 1 ) goto out ; } if ( data + 1 ) { if ( data + 1 ) goto out ; if ( data + 1 ) goto out ; } if ( data + 1 ) { if ( data + 1 ) {,0
837,<S2SV_ModStart> flags ) ; <S2SV_ModEnd> mutex_unlock ( &,0
838,,0
839,<S2SV_ModStart> ; if ( seg -> prog <S2SV_ModEnd> ) { if,0
840,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc32 ( TIFF <S2SV_ModStart> ) ; return 0 <S2SV_ModEnd> ; } <S2SV_null>,0
841,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
842,<S2SV_ModStart> ; int err ; struct ip_options_rcu * inet_opt = inet_opt -> <S2SV_ModStart> ; if ( inet_opt && inet_opt -> inet_opt && inet_opt -> inet_opt && inet_opt -> inet_opt && inet_opt -> inet_opt && inet_opt -> inet_opt && inet_opt -> inet_opt && inet_opt -> inet_opt && inet_opt -> inet_opt && inet_opt -> inet_opt && inet_opt -> inet_opt -> inet_opt && inet_opt -> inet_opt && inet_opt -> inet_opt && inet_opt -> inet_opt -> inet_opt && inet_opt -> inet_opt && inet_opt -> inet_opt && inet_opt -> inet_opt -> inet_opt && inet_opt -> inet_opt && inet_opt -> inet_opt -> inet_opt && inet_opt -> inet_opt && inet_opt && inet_opt && inet,0
843,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
844,<S2SV_ModStart> ; size_t res ; memcpy <S2SV_ModEnd> ( ctx ->,0
845,<S2SV_ModStart> ) return - EINVAL <S2SV_ModEnd> ; if (,0
846,"<S2SV_ModStart> ""`%s\'"", option ) ; geometry = DestroyString ( geometry",0
847,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
848,,0
849,<S2SV_ModStart> ( JAS_CAST ( JAS_COMMENTS <S2SV_ModEnd> ) ) {,0
850,<S2SV_ModStart> { * o_element_idx ; if ( * o_count!= * o_row_count ) { * o_row_count = 0 ; * o_count = 0 ; * o_element_count = 0 ; * o_count = 0 ; * o_count ; * o_count = 0 ; * o_element_count ; * o_count = 0 ; * o_count ; * o_count = 0 ; if ( 0!= * o_element_idx!= * o_count ) { * o_row_row_row_element_count = 0 ; } if ( 0!= * o_count ) * o_row_row_count ) { * o_count = 0 ; * o_element_count = 0 ; * o_count ; * o_count = 0 ; } if ( 0!= * o_element_count ) { * o_element_idx!= * o_count ) * o_row_count ) { * o_count = 0 ; * o_element_count ; } if ( * o_idx!= * o_idx!= * o_idx!= * o_row ) { * o_,0
851,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> if ( len <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> if ( len,0
852,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
853,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
854,"<S2SV_ModStart> } else { if ( c == '\\0' || <S2SV_ModEnd> ( ctxt -> <S2SV_ModStart> ( ctxt, ""\\"" <S2SV_ModEnd> ( ctxt -> <S2SV_ModStart> } else if ( ctx <S2SV_ModEnd> ( ctxt ->",0
855,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
856,<S2SV_ModStart> * rsize >= 63 <S2SV_ModEnd> && rdesc [,0
857,<S2SV_ModStart> ret ) ; if ( ret < 0 ) goto out ;,0
858,,0
859,<S2SV_ModStart> S2SV_null> <S2SV_null> <S2SV_null> static,0
860,<S2SV_ModStart> int i ; jas_uchar <S2SV_ModEnd> buf [ 0,0
861,<S2SV_ModStart> -> mb_stride ; memcpy <S2SV_ModEnd> ( ),0
862,"<S2SV_ModStart> -> msg ; memset ( msg, 0, sizeof ( addr ) ) ;",0
863,<S2SV_ModStart> out_free ; } out_out_free ( kvm ) ;,0
864,<S2SV_ModStart> 0 ) { MATLAB_KO : clone_info = DestroyImageInfo ( clone_info ) ;,0
865,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
866,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null> static int <S2SV_ModEnd> encode_t <S2SV_ModStart> NULL ) { if ( len <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ; } return NULL ; <S2SV_ModStart> ; } } if ( len <S2SV_null>,0
867,<S2SV_ModStart> = NULL ; size_t data_size = 0 ;,0
868,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
869,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
870,<S2SV_ModStart> flags & timer -> flags |= 0 ;,0
871,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> strchr ( void <S2SV_ModStart> stride ) { int <S2SV_ModEnd> strdup = 0 <S2SV_ModStart> ; char * cp = <S2SV_ModEnd> ; char * <S2SV_ModStart> = 0 ; char * cp = <S2SV_ModEnd> ; char *,0
872,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> if (!,0
873,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
874,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
875,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ; <S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0 ;,0
876,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
877,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; ret =",0
878,"<S2SV_ModStart> ) ; } memset <S2SV_ModEnd> ( rptr,",0
879,<S2SV_ModStart> pnt ; } new_ns -> mnt. mnt = 0 ;,0
880,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi ->,0
881,<S2SV_ModStart> Z_TYPE_TRUE ) ; Z_SET_TYPE_LEN,0
882,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
883,<S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( bp ) ;,0
884,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char *",1
885,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
886,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> buffer_buffer_buffer ( struct <S2SV_ModStart> buffer ) { int ret = <S2SV_ModEnd> -> buffer_buffer ; <S2SV_ModStart> buffer ) ; return ret <S2SV_ModEnd> ; } <S2SV_null>,0
887,,0
888,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
889,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
890,<S2SV_ModStart> ) { return ERROR_INV_SLICE_T <S2SV_ModEnd> ; } ps_dec ->,0
891,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
892,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> * ext2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_null>,0
893,<S2SV_ModStart> * group ; <S2SV_ModEnd> group = 0,0
894,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
895,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } else {,0
896,<S2SV_ModStart> off ; } if (! off ) return - EINVAL ;,0
897,"<S2SV_ModStart> } bufp += stripsize <S2SV_ModEnd> ( buf,",0
898,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
899,<S2SV_ModStart> ; goto out <S2SV_ModEnd> ; } if (,0
900,<S2SV_ModStart> goto out ; <S2SV_ModEnd> if ( msg,0
901,"<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, number_planes_filled, number_filled ) <S2SV_ModEnd> ( number_planes_filled,",0
902,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int64 ) { size_t <S2SV_ModEnd> sizeof ( struct <S2SV_ModStart> data ) ; if (! context -> data ) return NULL ; <S2SV_ModStart> ) ; } <S2SV_ModEnd> if (!,0
903,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
904,<S2SV_ModStart> ( state == 0 ),0
905,<S2SV_ModStart> ; int ret = key_len <S2SV_ModEnd> ; if (,0
906,<S2SV_ModStart> ( sizeof ( * addr ),0
907,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
908,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> length, length )",0
909,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> size ) { memcpy ( size, size_t <S2SV_ModEnd> ) ; return",0
910,<S2SV_ModStart> ioc ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
911,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
912,<S2SV_ModStart> attr ) ; if (! desc -> desc. bNumEndpoints < 1 ) return - ENOMEM ;,0
913,"<S2SV_ModStart> * event, <S2SV_ModEnd> struct perf_event_event *",0
914,,0
915,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> intra_mode_mode_mode ( cm <S2SV_ModStart> intra_mode ) { PREDICTION_MODE <S2SV_ModEnd> intra_mode =",0
916,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
917,<S2SV_ModStart> ) ) { if ( ctx -> cur_size == 0 ) { ctx -> ctx = 0 ; },0
918,"<S2SV_ModStart> c -> height + 15 <S2SV_ModEnd>, 16 )",0
919,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
920,"<S2SV_ModStart> buf ) { jas_uchar <S2SV_ModEnd> ( buf,",0
921,,0
922,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
923,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
924,<S2SV_ModStart> sk ) ; <S2SV_ModEnd> return 0 ;,0
925,"<S2SV_ModStart> ), RAPTOR_LOAD_EXTERNAL_ENTITIES, RAPTOR_EXTERNAL_ENTITIES",0
926,<S2SV_ModStart> ; s -> tlsext_use_etm = 0,0
927,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
928,,0
929,<S2SV_ModStart> ; return - 1 <S2SV_ModEnd> ; } return,0
930,,0
931,,0
932,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null> <S2SV_null> static int <S2SV_ModStart> 2SV_null> static int size_t <S2SV_ModEnd> ; int n_t <S2SV_ModStart> ; if ( r <S2SV_null> <S2SV_null> static,0
933,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
934,<S2SV_ModStart> ( sk ) <S2SV_ModEnd> return 0 ;,0
935,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> struct vpx_writer * <S2SV_ModStart> * w, vpx_write_literal <S2SV_ModEnd> * w, <S2SV_ModStart> * w ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 8 ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 0 ) { vpx_write_literal <S2SV_ModEnd> ( w,",0
936,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 8_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 2S2SV_null> static struct vpx_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_write_literal <S2SV_ModEnd> ( wb,",0
937,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
938,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> sizeof ( int <S2SV_ModStart> -> desc -> desc -> desc. desc. desc -> desc. desc. desc. desc -> desc. bsize ) ; int <S2SV_ModEnd> if ( int <S2SV_ModStart> desc -> desc -> desc. desc. desc <S2SV_ModStart> int ) ; if (! desc -> desc -> desc -> desc -> desc. desc. desc. bsize ) ||! hdr -> desc -> desc -> desc -> desc. desc -> desc. bsize ) { if ( hsize > hsize ) { dev -> desc -> desc -> desc -> desc. desc. desc. bsize ) ; return - ENODEV ; } if (! desc -> desc -> desc. bsize ) { dev -> desc -> desc -> desc. desc. desc. desc. desc. desc. desc. desc. bsize ) { dev -> desc -> desc. desc. desc. desc. desc -> desc. desc. desc. desc. desc. desc. desc. desc. desc. bsize ) ; return - ENODEV ; } <S2SV_ModEnd> ; },0
939,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
940,<S2SV_ModStart> ) exit_io_context ( tsk,0
941,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> * name, name <S2SV_ModEnd> const char * name <S2SV_ModStart> * name, name <S2SV_ModEnd> ) ; char *",0
942,<S2SV_ModStart> ; jas_uchar <S2SV_ModEnd> cmpts = 0,0
943,<S2SV_ModStart> goto out ; } <S2SV_ModEnd> } } },0
944,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
945,<S2SV_ModStart> ; if ( dp >= MAX_JOINVALID_MAX ) goto done ; <S2SV_ModStart> ; if ( size_t ) goto error ; <S2SV_ModEnd> ; if (,0
946,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return - 1,0
947,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
948,<S2SV_ModStart> ; if ( osStrchr <S2SV_ModEnd> ( *,0
949,<S2SV_ModStart> -> data ; size_t <S2SV_ModEnd> size = 0,0
950,"<S2SV_ModStart> * cm, vpx_write_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> 8 ) { vpx_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_write_literal <S2SV_ModEnd> ( wb,",0
951,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return ;,0
952,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
953,<S2SV_ModStart> ( args -> rmtvaluelen <S2SV_ModEnd> ) ; args ->,0
954,"<S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( ssl,",0
955,<S2SV_ModStart> key ) ; kfree ( key -> type ) ;,0
956,<S2SV_ModStart> ( state. tlen - 1 <S2SV_ModEnd> ) ) ;,0
957,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
958,<S2SV_ModStart> ; if (! ( flags & EXT4_SB ( inode -> i_sb ) ) goto out_mount_sb ; if (,0
959,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
960,<S2SV_ModStart> char buf [ 100 <S2SV_ModEnd> ] = 0,0
961,<S2SV_ModStart> char buf [ size ] ; ASSERT ( size!= 0 ) ; ASSERT ( size ) ; ASSERT ( size <= 0 ) ; ASSERT ( size ) ; ASSERT ( result == 0 ) ; ASSERT ( result == 0 ) ; ASSERT ( result == 0 ) ; ASSERT ( buf + 1 ) ; ASSERT ( result == 0 ) ; ASSERT ( result == 0 ) ; ASSERT ( result == 0 ) ; ASSERT ( result == 0 ) ; ASSERT ( result == 0 ) ; ASSERT ( result == 0 ) ; ASSERT ( buf ) ; ASSERT ( result == 0 ) ; ASSERT ( result == 0 ) ; ASSERT ( result == 0 ) ; ASSERT ( result == 0 ) ; ASSERT ( result == 0 ) ; ASSERT ( result == 0 ) ; ASSERT ( result == 0 ) ; ASSERT ( buf + 1 ) ; ASSERT ( result == 0 ) ; ASSERT ( result == 0 ) ; ASSERT ( buf + 1 ) ; ASSERT ( buf ) ; ASSERT ( result == 0 ) ; ASSERT ( result!= buf + 1 ) ; ASSERT ( buf + 1 ) ; ASSERT ( buf + 1 ) ; ASSERT ( result ==,0
962,<S2SV_ModStart> ( ) <S2SV_ModEnd> ; if (,0
963,"<S2SV_ModStart> str ) { strncpy <S2SV_ModEnd> ( str, <S2SV_ModStart> str ) ; strncpy <S2SV_ModEnd> ( str,",0
964,,0
965,,1
966,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> image_utf8 ( void ) fclose ( void ) fclose ( void ) fclose ( void ) fclose ( void ) fclose ( void ) ;,0
967,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
968,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
969,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
970,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
971,,0
972,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
973,<S2SV_ModStart> o ) { <S2SV_ModEnd> return 0 ;,0
974,<S2SV_ModStart> S_null> <S2SV_null> <S2SV_null> <S2SV_null> static,0
975,<S2SV_ModStart> ; msg -> msg_namelen = 0,0
976,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
977,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> break ; },0
978,,0
979,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
980,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) ) ; ND_TCHECK_32 <S2SV_ModEnd> ( ndo, <S2SV_ModStart> ) ) ; ND_PRINT <S2SV_ModEnd> ( ndo, <S2SV_ModStart> ) ) ; ND_PRINT <S2SV_ModEnd> ( ndo,",0
981,"<S2SV_ModStart> * item, <S2SV_ModEnd> const char *",0
982,"<S2SV_ModStart>, 1 ) <S2SV_ModEnd> ; if (",0
983,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ], L_BUFSIZE <S2SV_ModStart> ( buf, L_BUFSIZE <S2SV_ModEnd>, L_BUFSIZE <S2SV_ModStart> ( buf, L_BUFSIZE <S2SV_ModEnd>, L_BUFSIZE <S2SV_ModStart> ( buf, L_BUFSIZE <S2SV_ModEnd>, L_BUFSIZE <S2SV_ModStart> ( buf, L_BUFSIZE <S2SV_ModEnd>, "" <S2SV_blank> %s"", <S2SV_ModStart> ( buf, L_BUFSIZE <S2SV_ModEnd>, buf, <S2SV_ModStart> + 1, L_BUFSIZE <S2SV_ModEnd> ) ) <S2SV_ModStart> ( buf, L_BUFSIZE <S2SV_ModEnd>, "" <S2SV_blank> ( buf, <S2SV_ModStart> ( buf, L_BUFSIZE <S2SV_blank> %s"", L_BUFSIZE <S2SV_ModEnd>, buf, <S2SV_ModStart> ( buf, L_BUFSIZE <S2SV_ModEnd>, "" <S2SV_blank> %s"", <S2SV_ModStart> ( buf, L_BUFSIZE <S2SV_ModEnd>, ""\\n"",",0
984,"<S2SV_ModStart> ; if (! buf_size <S2SV_ModEnd> ( buf,",0
985,<S2SV_ModStart> goto out ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
986,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
987,<S2SV_ModStart> ; s -> studio_profile = 0 ; if (! s -> profile ) return AVERROR_INVALIDDATA ;,0
988,<S2SV_ModStart> ; err = - EINVAL ; if (,0
989,,0
990,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> break ; },0
991,,0
992,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> if ( q,0
993,<S2SV_ModStart> input_size < 0,0
994,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int64 ) { const char * str ; int len = strlen ( str, str, str, len, len ) ; if ( len == '\\n"" ) { if ( strlen ( str, '\\n"" ) ) return - 1 ; } <S2SV_ModStart> ) ; } else { int len = strlen ( str, str, str, str, len, len ) ; if ( strlen ( str, len ) ) { if ( strncpy ( str, ""\\n"" ) == '\\n"" ) ; return 1 ; } if (! strncpy ( str ) ) { if ( strncpy ( str, len ) ) { if ( str, '\\n"" ) ) { return 1 ; } else { if ( str, '\\n"" ) ; } else { if ( str, str, str, str, str, str, len ) ; } else { if ( str, str, str, str, str, str, str, str, len, len ) ; return 1 ) ; } else { if ( str, len ) { if ( str",0
995,<S2SV_ModStart> ) ) { if ( mnt -> mnt_flags & MNT_NODEV ) && mnt -> mnt_flags & mnt_flags & MNT_MASK <S2SV_ModEnd> ) { if,0
996,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> uv_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_null> <S2S2SV_null>,0
997,,1
998,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null> <S2S2SV_null> <S2SV_null>,0
999,,0
1000,<S2SV_ModStart> * ent ; <S2SV_ModEnd> del = 0,0
1001,,0
1002,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1003,"<S2SV_ModStart> ""S2SV_null> <S2SV_null> <S2SV_null>",0
1004,,0
1005,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( sun_pixels",0
1006,"<S2SV_ModStart> ) ; } copy_file_as_user <S2SV_ModEnd> ( src,",0
1007,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null>,0
1008,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1009,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> break ; },0
1010,,0
1011,<S2SV_ModStart> 1 ) ; if ( ret == 0 ) { ret = - EINVAL ; } <S2SV_ModStart> 1 ) ; },0
1012,,0
1013,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1014,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
1015,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1016,,0
1017,"<S2SV_ModStart>, NULL, NULL <S2SV_ModEnd> ; if (",0
1018,"<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( count,",1
1019,,0
1020,"<S2SV_ModStart> ; if ( f -> values < 1 ) return error ( f, VORBIS_invalid_setup ) ; if ( f -> values < 1 ) return error ( f, VORBIS_invalid_setup ) ; if (",0
1021,<S2SV_ModStart> p ) ; if (! xdr_argsize ) return 0 ;,0
1022,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1023,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null>,0
1024,<S2SV_ModStart> size ) { ASSERT_NO_SIZE_OVERFLOW ( size ) ;,1
1025,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1026,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1027,<S2SV_ModStart> ; if ( addr_len < 0 ) return - 1 ;,0
1028,,0
1029,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1030,<S2SV_ModStart> 0 ) ; spin_lock ( & ht ) ;,0
1031,<S2SV_ModStart> <S2SV_null> <S2S2SV_null> <S2SV_null> <S2S2SV_null> <S2SV_null> static int <S2SV_ModEnd> r2S2SV_null> <S2S2SV_null> <S2SV_null>,0
1032,"<S2SV_ModStart> { ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> len, MSG_DONTWAIT )",0
1033,<S2SV_ModStart> ; s ->,0
1034,,0
1035,,0
1036,"<S2SV_ModStart>, buf, 0",0
1037,<S2SV_ModStart> -> uid ; <S2SV_ModEnd> new -> count <S2SV_ModStart> new -> count = 0 <S2SV_ModEnd> ; spin_lock_irq (,0
1038,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> msg -> msg_namelen,0
1039,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1040,,0
1041,<S2SV_ModStart> = 0 ; if (! EXT4_EXT_BLOCK_SIZE ( inode ) ) { ext4_extent ( inode ) -> i_extentries ) ; goto out ; },0
1042,"<S2SV_ModStart> * fmode, fmode_t fmode <S2SV_ModEnd> ) { int",0
1043,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1044,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
1045,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1046,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> * const <S2SV_ModStart> int bsse = ( int64_t * sse, int64_t * sse, int64_t * sse = 0 ; int64_t * sse = 0 ; int64_t * sse = 0 ; int64_t * sse = 0 ; int64_t * sse = 0 ; int sse = 0 ; int64_t * sse = 0 ; int64_t * sse = 0 ; int64_t * sse = 0 ; int64_t * sse = 0 ; uint8_t * sse = 0 ; int sse = 0 ; int64_t * sse = 0 ; int64_t * sse = 0 ; uint8_t * sse = 0 ; int64_t * sse = 0 ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( is_highbd -> sse ) { if ( cpi -> sse ) { if ( is_",0
1047,"<S2SV_ModStart> ; } } memset <S2SV_ModEnd> ( addr,",0
1048,"<S2SV_ModStart> ( ndo, ""%s"" <S2SV_ModEnd> ) ) {",0
1049,<S2SV_ModStart> ( ret = 0 <S2SV_ModEnd> ; if (,0
1050,"<S2SV_ModStart> * r, vpx_reader <S2SV_ModEnd> * r )",0
1051,<S2SV_ModStart> return 0 ; if (! val ) return 0 ;,0
1052,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> desc_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1053,"<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( dst_ptr1,",0
1054,"<S2SV_ModStart> -> ipv6_addr ; struct ipv6_txoptions * rcu_read_lock ( ) ; <S2SV_ModStart> ) ) { rcu_dereference ( <S2SV_ModEnd>, & <S2SV_ModStart> -> opt ) ; rcu_read_lock ( ) ; rcu_unlock ( ) ;",0
1055,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
1056,"<S2SV_ModStart> buf ) { memcpy <S2SV_ModEnd> ( buf,",0
1057,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1058,"<S2SV_ModStart> ( ndo, <S2SV_ModEnd> ) ) { if",0
1059,"<S2SV_ModStart> ( interface, EINVAL <S2SV_ModEnd> ( interface, <S2SV_ModStart> ( interface, EINVAL <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( interface, EINVAL ; }",0
1060,"<S2SV_ModStart> NULL, NULL, true",0
1061,,0
1062,<S2SV_ModStart> ; settings = 0 <S2SV_ModEnd> ; settings.,0
1063,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1064,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1065,<S2SV_ModStart> clips_ptr ) { ret = - EINVAL ; },0
1066,<S2SV_ModStart> ( pmd ) <S2SV_ModEnd> ; if (,0
1067,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1068,<S2SV_ModStart> - 1 ; <S2SV_ModEnd> } } },0
1069,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> height2S2SV_null> <S2SV_null>,0
1070,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ( ( int <S2SV_ModStart> - 1 ) ; if ( <S2SV_ModEnd> ( input -> <S2SV_ModStart> - 1 ) ) return 0 ;,0
1071,"<S2SV_ModStart> 128 ) { memset <S2SV_ModEnd> ( op, <S2SV_ModStart> buf, 0, 0 <S2SV_ModEnd> ) ; }",0
1072,<S2SV_ModStart> flags ) { <S2SV_ModEnd> return NULL ;,0
1073,,0
1074,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1075,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> priv_t *,0
1076,"<S2SV_ModStart> size_t args, NULL <S2SV_ModEnd> ) ; if",0
1077,,0
1078,"<S2SV_ModStart> = 0 ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1079,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1080,<S2SV_ModStart> = v ; if (! IS_ERR ( vma ) ),1
1081,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return NULL ;,0
1082,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1083,<S2SV_ModStart> if ( iinfo -> i_len > bs,0
1084,"<S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd> ) ; data",0
1085,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1086,<S2SV_ModStart> ) ) ; kfree ( sk ) ;,0
1087,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null> <S2SV_null>,0
1088,,0
1089,<S2SV_ModStart> ) ) ; },0
1090,,0
1091,<S2SV_ModStart> 0 ) { if ( sh_size < 0 ) { goto out ; },0
1092,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token,",1
1093,,0
1094,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> if ( cc <S2SV_ModStart> ) ; return 0 ; <S2SV_ModEnd> if ( tmp,0
1095,<S2SV_ModStart> ( entry ) { <S2SV_ModEnd> if (! <S2SV_ModStart> ( entry ) ) { <S2SV_ModEnd> return 0 ;,0
1096,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1097,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1098,"<S2SV_ModStart> new_map ) ; new_map_map ( & new_map, & new_map ) ; if ( new_map ) goto out ;",0
1099,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return ; },0
1100,<S2SV_ModStart> -> p_stride ; p_stride = 0 ;,0
1101,,0
1102,"<S2SV_ModStart> ) ) ; ND_TCHECK_16BITS ( ndo, 4 ) ;",0
1103,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null> static,0
1104,<S2SV_ModStart> if ( iinfo -> i_len > bs,0
1105,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
1106,,0
1107,,0
1108,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
1109,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1110,<S2SV_ModStart> ; if ( img -> data_size < 0 ) return AVERROR_INVALIDDATA ;,0
1111,"<S2SV_ModStart> ), NULL, true",0
1112,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> avg_null> <S2SV_null> <S2SV_null> <S2S2SV_null> static int <S2SV_ModEnd> unsigned int <S2SV_ModStart> = 0 ; unsigned int <S2SV_ModStart> = 0 ; unsigned char * running_avg_avg_diff = 0 ; unsigned int <S2SV_ModStart> = 0 ; unsigned char * running_avg_avg_stride = 0 ; unsigned int motion_avg_stride = 0 ; unsigned char * running_avg_stride = 0 ; unsigned char * running_avg_stride = 0 ; unsigned int motion_stride = 0 ; unsigned char * running_stride = 0 ; unsigned int motion_avg_avg_stride = 0 ; unsigned char * running_stride = 0 ; unsigned char * running_avg_avg_avg_avg_stride = 0 ; unsigned char * running_avg_stride = 0 ; int,0
1113,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1114,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; ret =,0
1115,<S2SV_ModStart> ; message -> interface = queueItem -> interface ; message ->,1
1116,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> p_null> <S2SV_null> <S2SV_null> <S2S2SV_null> <S2SV_null>,0
1117,<S2SV_ModStart> } err = TEMP_FAILURE_RETRY ( <S2SV_ModStart> s ) ),0
1118,,0
1119,<S2SV_ModStart> crypto_report_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp.,0
1120,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
1121,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) <S2SV_ModEnd> ; if (",0
1122,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( image",0
1123,<S2SV_ModStart> * event ; size_t <S2SV_ModEnd> size = 0,0
1124,<S2SV_ModStart> ( * state ) NULL <S2SV_ModEnd> ; if (,0
1125,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1126,,0
1127,"<S2SV_ModStart> AcquireQuantumMemory ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( dmsx, size_t ) <S2SV_ModStart> AcquireQuantumMemory ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if",0
1128,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",0
1129,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1130,<S2SV_ModStart> case 0x00 : return - 1,0
1131,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1132,<S2SV_ModStart> ) { return ERROR_INV_SLICE_T <S2SV_ModEnd> ; } ps_dec ->,0
1133,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null> <S2SV_null>,0
1134,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1135,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
1136,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null> static <S2SV_ModStart> int mi_row, int <S2SV_ModEnd> int mi_row, int <S2SV_ModStart> int mbmi_row, int <S2SV_ModEnd> * mbmi_row, <S2SV_ModStart> int mbmi_row, int <S2SV_ModEnd> ) { const <S2SV_ModStart> int mbmi_row, mbmi_row, mbmi_row, mbmi_row, mbmi_row, mbmi_stride <S2SV_ModEnd> ) ; const <S2SV_ModStart> ) ) { if ( mbmi_row <S2SV_null> <S2S2SV_null>",0
1137,<S2SV_ModStart> -> mm ) ; <S2SV_ModEnd> return 0 ;,0
1138,"<S2SV_ModStart> src ) { memset <S2SV_ModEnd> ( src,",0
1139,,0
1140,"<S2SV_ModStart>, row ; } <S2SV_ModEnd> if ( row",0
1141,,0
1142,<S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1143,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1144,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; out :,0
1145,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1146,,0
1147,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int i2S2SV_null> <S2SV_null> <S2S2SV_null> <S2S2SV_null>,0
1148,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1149,<S2SV_ModStart> 1 ; } <S2SV_ModEnd> if (!,0
1150,"<S2SV_ModStart>, name, name <S2SV_ModEnd> ) ; return",0
1151,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1152,<S2SV_ModStart> fp ) ; unlink ( RUN_LIB_FILE ) ;,1
1153,"<S2SV_ModStart> sock, 0",0
1154,<S2SV_ModStart> } if ( <S2SV_ModEnd> pkt. length > 0,0
1155,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1156,<S2SV_ModStart> ) ; } mutt_socket_empty ( adata -> conn ) ;,0
1157,,0
1158,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1159,<S2SV_ModStart> goto out ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1160,,0
1161,"<S2SV_ModStart>, & rlen, 0",1
1162,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null>,0
1163,"<S2SV_ModStart> ; if ( safe_mount <S2SV_ModEnd> ( path,",0
1164,"<S2SV_ModStart> ; if ( n <S2SV_ModEnd> ( n,",0
1165,<S2SV_ModStart> ; if ( unlikely ( unlikely ( unlikely ( unlikely (,0
1166,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1167,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1168,,0
1169,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
1170,<S2SV_ModStart> ) ) { if (! rdp_read_lock ( ) ) ;,0
1171,<S2SV_ModStart> ret ) ; <S2SV_ModEnd> return 0 ;,0
1172,<S2SV_ModStart> NULL ) ; return false,0
1173,<S2SV_ModStart> ) { return 1 <S2SV_ModEnd> ; } if,0
1174,<S2SV_ModStart> R_INVALID ) { r = r_create ( r ) ;,0
1175,,0
1176,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1177,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1178,"<S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( p,",0
1179,"<S2SV_ModStart> uint8_t buf ; jas_memcpy <S2SV_ModEnd> ( buf, <S2SV_ModStart> ) ) { JAS_CAST ( JAS_CAST <S2SV_ModEnd> ) ; JAS_CAST",0
1180,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null> static,0
1181,"<S2SV_ModStart> & ds64_chunk, sizeof ( DS64Chunk )",0
1182,<S2SV_ModStart> ; if (! sz_async ( s ) ) &&,0
1183,"<S2SV_ModStart>, offset, <S2SV_ModEnd> regs, off",0
1184,"<S2SV_ModStart> ; if ( CHECKOVERFLOW ( o, buf_size, 4 <S2SV_ModEnd> ) ) { <S2SV_ModStart> ; if ( CHECKOVERFLOW ( CHECKOVERFLOW ( o, buf_size ) ) { exif_log ( CHECKOVERFLOW, ""Exif_LOG_LOG_DEBUG"" ) ; break ; n -> order = exif_log ( n -> order, n -> order ) ; n -> order ) ; n -> order = exif_get_log ( n -> order, n -> order ) ; n -> order ) ; n -> order = exif_log ( n -> order, n -> order ) ; n -> log, n -> order ) ; n -> log ( n -> order, n -> order ) ; n -> entries [ n -> order ) ; n -> order = exif_log ( n -> order ) ; n -> log_log ( n -> order ) ; n -> log_log ( n -> order, n -> order ) ; n -> order ) ; n -> entries [ tif_log ( n -> order ) ; n -> entries [ tif_log ( n -> order ) ; n -> log_log ( n -> log,",0
1185,<S2SV_ModStart> ; goto out <S2SV_ModEnd> ; if (,0
1186,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1187,<S2SV_ModStart> == 0 ) return - 1 ;,0
1188,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2S2SV_null> <S2S2SV_null> <S2SV_null> static jas_matind_t <S2SV_ModEnd> ; jas_matind_t <S2SV_ModStart> { jas_matind_t <S2SV_ModEnd> ; } jas_matind_t <S2SV_ModStart> numcols ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> { jas_matind_t <S2SV_ModStart> ) ) { jas_matind_t <S2SV_ModEnd> ; } return 0 ;,0
1189,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1190,<S2SV_ModStart> 0 ) ; kfree ( s ) ;,0
1191,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1192,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ; } <S2SV_null>,0
1193,<S2SV_ModStart> return ret ; <S2SV_ModEnd> } ret =,0
1194,<S2SV_ModStart> * cb ) memset <S2SV_ModEnd> ( cb ->,0
1195,<S2SV_ModStart> OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModEnd> ) ; } if,0
1196,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> dir_null> <S2SV_null>,0
1197,<S2SV_ModStart> S_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1198,<S2SV_ModStart> size ) { size_t size ; size_t size = malloc ( size ) ; if (! ptr ) return - EINVAL ; },0
1199,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1200,,0
1201,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0 ;,0
1202,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1203,,1
1204,,0
1205,<S2SV_ModStart> 0 ) { if (! NULL ) return FALSE ;,0
1206,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1207,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 2S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1208,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1209,<S2SV_ModStart> ) ) { <S2SV_ModEnd> return NULL ;,0
1210,,0
1211,"<S2SV_ModStart>, annotation, NULL, NULL <S2SV_ModEnd> ) ; if",0
1212,,0
1213,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> stride ) { return NULL ; } if ( strlen ( strlen ( str, str, str ) ) { return - 1 ; } <S2SV_ModStart> NULL ; } else { if ( strlen ( strlen ( str, str, str, str, str, p ) ) ; return NULL ; } <S2SV_ModEnd> if ( p <S2SV_ModStart> ) ; } if ( strlen ( str, str, str, p )!= NULL ; return NULL ; } if ( p == '\\0' ) { if ( strlen ( strlen ( p ) )!= NULL ) { return NULL ; } if ( strlen ( strlen ( strlen ( p ) ) )!= NULL ; return NULL ; } <S2SV_ModStart> NULL ; } else { if ( strlen ( p == '\\0' ) { err_len ( strlen ( str, strlen ) ) ; return 1 ; } else { err_len = strlen ( strlen ( str, strlen ) ; } else { err_len ( p ) ; } else { err_len = strlen ( p ) ; }",0
1214,<S2SV_ModStart> = 0 ; memcpy <S2SV_ModEnd> ( dst ->,0
1215,<S2SV_ModStart> ; s -> bit_depth = 0 ; s ->,0
1216,,0
1217,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mi_row ) { VP9_COMMON * const xd ; MACROBLOCKD * const xd = & cpi -> common ; MACROBLOCKD * const xd -> common ; MACROBLOCKD * const xd = & cpi -> mbmi_row ; MACROBLOCKD * const xd -> mb_row * const xd = & cpi -> mbmi_col ; MACROBLOCK_MODE_INFO * const xd = & cpi -> mbmi_cols ; MACROBLOCK_MODE_INFO * const x -> mb ; <S2SV_ModStart> -> mbmi_cols ; memcpy <S2SV_ModEnd> ( xd -> <S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( xd ->,0
1218,"<S2SV_ModStart> ( ndo, ""%s"", tstr <S2SV_ModEnd> ) ) {",0
1219,,0
1220,<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ),0
1221,<S2SV_ModStart> skb ) ; kfree_skb ( skb ) ;,0
1222,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1223,<S2SV_ModStart> perf_event * p,0
1224,"<S2SV_ModStart> retval ; } if ( alt -> desc. bNumEndpoints < 1 ) { dev_err = - EINVAL ; goto fail1 ; } if ( bNumEndpoints < 0 ) { dev_err ( ""invalid <S2SV_blank> invalid <S2SV_blank> invalid\\n"" ) ; return - EINVAL ; }",0
1225,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1226,"<S2SV_ModStart> tmpp, NULL <S2SV_ModEnd> ) ; }",0
1227,"<S2SV_ModStart> goto out ; sctp_sock_frag <S2SV_ModEnd> ( skb, <S2SV_ModStart> skb ) { sctp_set_rfree_frag <S2SV_ModEnd> ( skb ) <S2SV_ModStart> skb ) { sctp_rfree_frag <S2SV_ModEnd> ( skb ) <S2SV_ModStart> ( skb ) { sctp_rfree_frag <S2SV_ModEnd> ( skb, <S2SV_ModStart> skb ) { sctp_rfree_frag <S2SV_ModEnd> ( skb,",0
1228,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null>,0
1229,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1230,,0
1231,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1232,<S2SV_ModStart> inoten ) ; <S2SV_ModEnd> return ret ;,0
1233,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1234,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1235,,0
1236,"<S2SV_ModStart>, size_t <S2SV_ModEnd> size ) { if",0
1237,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1238,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1239,,0
1240,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1241,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1242,,0
1243,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1244,"<S2SV_ModStart> ; ip_options_rcu <S2SV_ModEnd> ( sk,",0
1245,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & acl )",0
1246,<S2SV_ModStart> ) ) ; if ( tlen < 0 ) return - EINVAL ;,0
1247,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1248,<S2SV_ModStart> ; if ( info -> bytes_count > 0 ) return 0,0
1249,"<S2SV_ModStart> { if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
1250,<S2SV_ModStart> ) ; } tp -> copied_seq = seq ;,0
1251,<S2SV_ModStart> keyring ) { kfree ( keyring ) ; kfree ( keyring ) ;,0
1252,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1253,,0
1254,<S2SV_ModStart> ; if (! inode ) return - EINVAL ;,0
1255,"<S2SV_ModStart> expr_ty returns, string type_comment",0
1256,"<S2SV_ModStart> name ) { memset <S2SV_ModEnd> ( tmp, <S2SV_ModStart> name ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1257,<S2SV_ModStart> = xchg ( ( __force struct ipv6_txoptions * * ),1
1258,<S2SV_ModStart> ; if ( is_nmi <S2SV_ModEnd> ( intr_info ),0
1259,,0
1260,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1261,,0
1262,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1263,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int64 ) { struct ipv6_txoptions * opt = sizeof ( struct ip6_t ) ; <S2SV_ModStart> ) ) ; struct ip6_rcu16_t * opt = rcu_read_lock ( ) ; <S2SV_ModStart> -> opt = <S2SV_ModEnd> ; opt = <S2SV_ModStart> np -> opt. <S2SV_ModEnd> ; opt = <S2SV_ModStart> ( np -> opt.,0
1264,"<S2SV_ModStart> sock, true, true",0
1265,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
1266,"<S2SV_ModStart>, sizeof ( clone_info ) ) <S2SV_ModEnd> ; if (",0
1267,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1268,<S2SV_ModStart> * key ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>,0
1269,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null>,0
1270,"<S2SV_ModStart>, YR_OBJECT * yr_arena ; YR_OBJECT * yr_arena = yr_arena ; YR_OBJECT * yr_arena ; YR_OBJECT * yr_OBJECT * yr_arena = yr_arena ; yr_arena ( yr_arena, sizeof ( yr_arena ) ) ;",0
1271,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
1272,<S2SV_ModStart> off = rqs -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; if (,0
1273,"<S2SV_ModStart> ( psf, sizeof ( psf )",0
1274,"<S2SV_ModStart> * cm, vpx_writer <S2SV_ModEnd> * cm )",0
1275,,0
1276,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> memset <S2SV_ModEnd> ( xd ->,0
1277,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> return 0 ;,0
1278,"<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, number_planes_filled, number_planes_filled, number_planes_filled ) <S2SV_ModEnd> ( number_filled, <S2SV_ModStart> -> rows * number_filled <S2SV_ModEnd> ( number_planes_filled, <S2SV_ModStart> -> rows * number_planes_planes_filled <S2SV_ModEnd> ( number_filled, <S2SV_ModStart> -> rows * number_planes_filled <S2SV_ModEnd> ) * number_filled <S2SV_ModStart> -> rows * number_filled <S2SV_ModEnd> = ( number_planes_filled <S2SV_ModStart> -> rows * number_planes_planes_filled <S2SV_ModEnd> = ( number_filled <S2SV_ModStart> -> rows * number_filled <S2SV_ModEnd> = ( number_filled <S2SV_ModStart> -> rows * number_planes_planes_planes_filled <S2SV_ModEnd> ; number_filled =",0
1279,,0
1280,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1281,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1282,,0
1283,<S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( s1 ->,0
1284,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0 ;,0
1285,"<S2SV_ModStart> int mptctl_ioctl_init ( MPT_ADAPTER * ioc, <S2SV_ModStart> mpt_ioctl_ioctl_ioctl_ioctl_init ( MPT_ADAPTER * ioc, <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } dctlprintk",0
1286,,0
1287,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1288,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1289,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> encode_null> static <S2SV_ModStart> * buf ; mutex_unlock ( & buf <S2SV_ModEnd>, buf, <S2SV_ModStart>, buf, buf <S2SV_ModEnd> ) ; return",0
1290,"<S2SV_ModStart> ( fd, fmode <S2SV_ModEnd> ) ; } if",0
1291,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> p_null> <S2SV_null> <S2SV_null>,0
1292,<S2SV_ModStart> * rq ) <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
1293,<S2SV_ModStart> ; goto out <S2SV_ModEnd> ; } if ( <S2SV_ModStart> ) ) ; } if (! strncpy ( name ) ) { return - 1 ; },0
1294,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> struct struct <S2SV_ModStart> struct ext2SV_null> <S2SV_null> <S2S2SV_null> <S2SV_null> <S2S2SV_null> struct <S2SV_ModEnd> struct struct <S2SV_ModStart> struct rv_null> static <S2SV_ModEnd> struct rspk_block_block ( struct <S2SV_ModStart> struct rspk_block ) ; memset ( & rspk_priv_pk_pk_pk ( & rsp ) ; if ( & rsp -> rsp ) { <S2SV_ModEnd> return - 1 ;,0
1295,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1296,"<S2SV_ModStart> ; if ( CHECKOVERFLOW ( n -> buf_size > CHECKOVERFLOW ( CHECKOVERFLOW ) ) { exif_log ( exif_log, EXIF_LOG_LOG_LOG_LOG_DEBUG, EXIF_LOG_LOG_LOG_DEBUG, EXIF_LOG_LOG_DEBUG, EXIF_LOG_LOG_LOG_DEBUG, ""Exif_LOG_DEBUG"" ) { exif_log ( ne -> log, EXIF_LOG_LOG_LOG_LOG_DEBUG, EXIF_LOG_LOG_LOG_LOG_DEBUG, EXIF_LOG_LOG_ERROR, ""Exif_LOG_LOG_DEBUG"" ) ; exif_log ( exif_log ( n -> log, EXIF_LOG_LOG_LOG_LOG_LOG_LOG_DEBUG, ""Exif_DEBUG"" ) ; n -> log -> log -> log -> order = exif_log ( n -> log, EXIF_LOG_LOG_LOG_LOG_LOG_DEBUG, EXIF_LOG_LOG_LOG_LOG_LOG_LOG_LOG_LOG_LOG_ERROR, ""Exif_LOG",0
1297,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1298,<S2SV_ModStart> ) ) { ND_TCHECK_16BITS ( dp ) ;,0
1299,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> dir_null> <S2SV_null>,0
1300,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> S2SV_null> <S2SV_null> <SV_null> <S2SV_null> <S2SV_null> static,0
1301,<S2SV_ModStart> ; default : return EINVAL ; } if (,0
1302,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1303,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1304,<S2SV_ModStart> ( buf + 4 <S2SV_ModEnd> ) ; },0
1305,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( data",0
1306,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1307,"<S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT",0
1308,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( pixels",0
1309,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0 ;,0
1310,<S2SV_ModStart> goto ret ; if ( ps_dec -> s2_num_mbs_mbs_mbs_num_mbs_mbs_mbs ) { ret = 0 ; },0
1311,<S2SV_ModStart> data ) ; if ( ret == 0 ) { ret = - EINVAL ; goto fail ; },0
1312,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1313,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = 0 ; char * ptr = ensure ( p ) ; <S2SV_ModStart> 0 ) { char * ptr = ensure ( p ) ; * ptr = ensure ( p ) ; if ( p -> cur_malloc ( p ) ) { out = ensure ( p ) ; if ( p -> cur_malloc ( p ) cJSON_malloc ( p, 0 ) ; if (! ptr ) return 0 ; } * ptr = ensure ( p ) ; ptr = ensure ( p ) ; if (! ptr ++ ) { * ptr = ensure ( p ) ; if ( p -> cur_malloc ( p ) ) ; if ( p -> ptr ++ ) { out = ensure ( p -> next ) ; p -> ptr = ensure ( p -> next ) ; if ( p -> ptr ++ ) { * ptr = ensure ( p ) ; if (! ptr ++ ) { * ptr = ensure ( p ) ; } ptr = ensure ( p -> next ) ; ptr = ensure ( p -> next ) ; if (! ptr = ensure ( p ) { * ptr = ensure ( p ) ; if ( p ->",0
1314,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1315,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1316,<S2SV_ModStart> unsigned short ) <S2SV_ModEnd> buffer [ 0,0
1317,<S2SV_ModStart> y3 ) { sprintf ( outputbuffer ) ;,0
1318,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1319,<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; ret =,0
1320,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
1321,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> int i ; int <S2SV_ModStart> dev ) return 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0 ;,0
1322,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",0
1323,,0
1324,"<S2SV_ModStart> ( ctx, <S2SV_ModEnd> ) ; }",0
1325,<S2SV_ModStart> req ) ; <S2SV_ModEnd> if (!,0
1326,"<S2SV_ModStart> } # line 62 <S2SV_ModEnd> ""grammar.c"" { compiler -> <S2SV_ModStart> } # line 1358 <S2SV_ModEnd> ""grammar.c""grammar.c"" { compiler -> <S2SV_ModStart> } # line 847 <S2SV_ModEnd> ""grammar.c""grammar.c""grammar.c"" { compiler <S2SV_ModEnd> ""grammar.c""grammar.c"" { yr_grammar.c""grammar.c"" { <S2SV_ModStart> } # line 958 <S2SV_ModEnd> ""grammar.c""grammar.c""grammar.c""grammar.c"" { compiler <S2SV_ModEnd> ""grammar.c"" break ; <S2SV_ModStart> } # line 9 <S2SV_ModEnd> ""grammar.c""grammar.c""grammar.c"" { yr_grammar.c""grammar.c"" { compiler <S2SV_ModEnd> ""grammar.c""grammar.c""grammar.c""grammar.c"" { compiler <S2SV_ModEnd> ""grammar.c"" { <S2SV_ModStart> } # line 958 <S2SV_ModEnd> ""grammar.c""grammar.c""grammar.c""grammar.c"" break ;",0
1327,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null>,0
1328,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1329,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1330,"<S2SV_ModStart> ( ndo, ""%s"", rpl_tstr <S2SV_ModEnd> ) ) ;",1
1331,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> sin2SV_null> static <S2SV_ModStart> -> msg ) { struct sockaddr ; struct sockaddr * addr_len ; struct sockaddr * addr_len = sizeof ( * sin6_len ) ; <S2SV_ModStart> -> msg_len ; if ( addr_len ) { struct sockaddr_len = sizeof ( * sin6 ) ; * addr_len = sizeof ( * sin6 ) ; * addr_len = sin6_len ; * sin6_len = sizeof ( struct sockaddr ) ; addr_len = sin6_len ; * sin6_len = sin6_len ; * sin6_len = sizeof ( * addr ) ; * sin6_len = sin6_len ; * sin6_len = sin6_len ; addr_len = sizeof ( sin6_len ) ; * sin6_len = sin6_len ; addr_len = sin6 ( sin6_len ) ; addr_len = sin6 ( sin6_len ) ; * sin6_len = sin6_len ; addr_len = sin6 ( sin6 ;,0
1332,<S2SV_ModStart> if ( EXT4_TEMP_FAILURE_RETRY ( <S2SV_ModStart> ext4_dio ) ) <S2SV_ModEnd> ; ext4_goto out_unlock (,0
1333,<S2SV_ModStart> ; } } } free ( buf ) ;,0
1334,,0
1335,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ) { int <S2SV_ModEnd> cpi ; int <S2SV_ModStart> = 0 ; int <S2SV_ModEnd> = 0 ; <S2SV_ModStart> = '\\0' ; <S2SV_ModEnd> } if ( <S2SV_ModStart> == '\\0' ) { if ( cp == '\\0' ) { <S2SV_ModStart> = '\\0' ; } <S2SV_ModEnd> } if ( ctx <S2SV_ModStart> == '\\0' ) { if ( ctx -> dval [ 1 ] == '\\0' ) continue ; } <S2SV_ModEnd> } if ( ctx <S2SV_ModStart> == '\\0' ) { if ( ctx -> p ++ ) { if ( ctx -> tp == '\\0' ) { if (! <S2SV_ModStart> == '\\0' ) { if ( ctx -> p == '\\0' || ( ctx -> p == '\\0' ) ) { if (! ctx -> mode == '\\0' ) continue ; } else { if ( ctx -> tp [ 1 ] == '\\0' ) { continue ; } <S2SV_ModEnd> = '\\0' ; <S2SV_ModStart> == '\\"" ) { if (! <S2SV_ModStart> == '\\"" ) ) { if ( c",0
1336,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1337,<S2SV_ModStart> ; if ( size_t <S2SV_ModEnd> sizeof ( ),0
1338,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1339,"<S2SV_ModStart> p, p, NULL <S2SV_ModEnd> ) ; if",0
1340,"<S2SV_ModStart>, y_stride <S2SV_ModEnd> ) ; if",0
1341,,0
1342,,0
1343,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1344,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1345,<S2SV_ModStart> dev ) ; kfree ( bdev ) ;,0
1346,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1347,"<S2SV_ModStart> ), NULL, NULL <S2SV_ModEnd> ) ; if",0
1348,<S2SV_ModStart> ( buf + 1 <S2SV_ModEnd> ) ; },0
1349,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode ) <S2SV_ModEnd> ; if (",0
1350,<S2SV_ModStart> 0 ) { return ; },0
1351,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1352,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1353,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1354,,0
1355,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
1356,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1357,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( CHILD <S2SV_ModStart> ; if ( CHILD ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( CHILD ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( CHILD ( CHILD ( CHILD <S2SV_ModStart> ; if ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( n, 2 ) ) ) == TYPE_COMMENT ) ) ) && TYPE ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( n, 1 ) ) ) ), 1 ) ) ) == TYPE_COMMENT ) ) ) return NULL ; if ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( n, CHILD ( CHILD ( CHILD ( n, CHILD ( CHILD ( CHILD ( n, 1 ) ) ) ) ) == TYPE_COMMENT ) ) ) ) return NULL ; if ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( CHILD ( n,",0
1358,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1359,,0
1360,"<S2SV_ModStart> * buf, jas_ulong <S2SV_ModEnd> * buf,",0
1361,<S2SV_ModStart> i_flags |= 0 ;,0
1362,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
1363,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
1364,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> vpx_wb_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) { vpx_wb_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 8 ) ; vpx_write_literal <S2SV_ModEnd> ( wb,",0
1365,<S2SV_ModStart> ; } } if ( num <S2SV_null> <S2SV_null>,0
1366,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context ->,0
1367,"<S2SV_ModStart>, annotation, NULL, NULL <S2SV_ModEnd> ) ; if",0
1368,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( xd ->,0
1369,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> int64_t <S2SV_ModStart> ( interface, ENC624J600_ERR, ENC624J600_ER <S2SV_ModStart> ( interface, ENC624J600_ERR, ENC624J600_ERR <S2SV_ModEnd> ) ; uint8_t <S2SV_ModStart> ( interface, ENC624J600_ERR, ENC624J600_ERR <S2SV_ModEnd> ) ; uint16_t <S2SV_ModStart> ( interface, ENC624J600_ERR, ENC624J600_ERR <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_ERR, ENC624J600_EINVAL <S2SV_ModStart> ( interface, ENC624J600_ERR, ENC624J600_EINVAL <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, ENC624J600_EINVAL <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( interface, ENC624J600_EINVAL <S2SV_ModStart> ( interface, ENC624J600_EINVAL <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( interface, ENC624J600_",0
1370,<S2SV_ModStart> ] == 0x01 && i < 0,0
1371,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
1372,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1373,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> vma_null> <S2SV_null>,0
1374,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } else {,0
1375,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1376,"<S2SV_ModStart> ( event, <S2SV_ModEnd> data, regs",0
1377,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return 0 ;,0
1378,<S2SV_ModStart> ; err = - EINVAL <S2SV_ModEnd> ; err =,0
1379,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1380,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> u_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> u ) { int <S2SV_ModEnd> if (! <S2SV_ModStart> stride ) { if (! (! <S2SV_ModStart> str ) ) { if (! (! (! str ) ) return (! ( * ) ) ) return FALSE ; } else { if (! (! (! s ) ) { * s ) return FALSE ; } return FALSE ; } <S2SV_ModEnd> if (! <S2SV_ModStart> + 1 ) { if (! <S2SV_ModEnd> if (! <S2SV_ModStart> str ) ) { if (! <S2SV_ModStart> if (! <S2SV_ModStart> str ) ) { if (! <S2SV_ModEnd> if (! <S2SV_ModStart> str ) ) return TRUE ; } else { <S2SV_ModEnd> if (! <S2SV_ModStart> if (! <S2SV_ModStart> if (!,0
1381,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1382,<S2SV_ModStart> return - 1 <S2SV_ModEnd> ; } if,0
1383,,0
1384,"<S2SV_ModStart> ( interface, EINVAL <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_S2SV_null> <S2SV_null>",0
1385,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1386,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1387,<S2SV_ModStart> return - EINVAL ; if ( args [ args [ 0 ] == 0 ) { error = - EINVAL ; },0
1388,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1389,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return 0 ;,0
1390,"<S2SV_ModStart> = 0 ; memset ( xmi, 0, sizeof ( xchunk ) ) ;",0
1391,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> goto out ; int <S2SV_ModStart> goto out ; int <S2SV_ModEnd> off ; int <S2SV_ModStart> ( inode ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> - EINVAL ) { <S2SV_ModEnd> hdr ) { <S2SV_ModStart> - EINVAL ; } <S2SV_ModStart> - EINVAL ; } <S2SV_ModEnd> if (! <S2SV_ModStart> - EINVAL ; } <S2SV_ModEnd> if (! <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> ) ) { <S2SV_ModStart> - EINVAL ; goto out ; },0
1392,<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( index,0
1393,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1394,<S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return 0 ;,0
1395,<S2SV_ModStart> ; int num ; size_t num_samples = 0 ; num_s = 0 ; if ( num_s > 0 ) { goto error ; } <S2SV_ModStart> ) ) ; } if ( num_samples!= 0 ) { goto error ; } <S2SV_ModEnd> ; } JAS_DBGLOG (,0
1396,,0
1397,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } if (,0
1398,<S2SV_ModStart> len ) ; ND_TCHECK ( hdr ) ;,0
1399,<S2SV_ModStart> 2 ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,1
1400,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1401,<S2SV_ModStart> -> bqs ; bh_unlock ( bqs ) ;,0
1402,"<S2SV_ModStart> -> opl, 0",0
1403,<S2SV_ModStart> (! handle ||! SecIsValidHandle ( handle ),1
1404,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1405,<S2SV_ModStart> ) goto out <S2SV_ModEnd> ; } if (,0
1406,<S2SV_ModStart> { if ( osStrchr <S2SV_ModEnd> ( *,0
1407,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1408,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ; msg -> msg -> msg_namelen = 0 ;,0
1409,<S2SV_ModStart> 1 ) ; <S2SV_ModEnd> if ( fd,0
1410,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1411,<S2SV_ModStart> ; if ( <S2SV_ModEnd> dev -> config.,0
1412,<S2SV_ModStart> * err ; <S2SV_ModEnd> return NULL ;,0
1413,"<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, 4 )",0
1414,<S2SV_ModStart> length ) { size_t <S2SV_ModEnd> size = 0,0
1415,<S2SV_ModStart> case 0 : if ( xfs_verify_verify_verify_fork ( dip ) ) return 0 ; <S2SV_ModEnd> } else {,0
1416,,0
1417,<S2SV_ModStart> 2 ) ; quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
1418,<S2SV_ModStart> goto out ; <S2SV_ModEnd> if ( event,0
1419,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1420,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1421,"<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dest_width,",0
1422,<S2SV_ModStart> 8 ) ; <S2SV_ModEnd> return 0 ;,0
1423,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1424,<S2SV_ModStart> ; buf = len <S2SV_ModEnd> ; ret =,0
1425,,0
1426,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1427,<S2SV_ModStart> ; ue -> card = 0 ; ue ->,0
1428,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1429,"<S2SV_ModStart> -> _eip ; memset <S2SV_ModEnd> ( ctxt,",0
1430,<S2SV_ModStart> size ) ; size_t <S2SV_ModEnd> size = 0,0
1431,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; dev ->,0
1432,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( x ->,0
1433,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( interface, EINVAL <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, EINVAL <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_EINVAL <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_EIR_LEN <S2SV_ModEnd> ) ; interface <S2SV_ModStart> ( interface, ENC624J600_ECON2 <S2SV_ModEnd>, ENC624J600_EINVAL <S2SV_ModStart> ( interface, ENC624J600_EIR, ENC624J600_EIR, ENC624J600_ERR2 <S2SV_ModEnd>, 0 )",0
1434,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> psf ) { int <S2SV_ModEnd> psf ; char *,0
1435,<S2SV_ModStart>! unconditional ( e <S2SV_ModEnd> ) ) ||,0
1436,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1437,,0
1438,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = S2SV_null> <S2S2SV_null> <S2SV_null> static PRED_null> <S2SV_null> <S2SV_null>,0
1439,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1440,,0
1441,"<S2SV_ModStart> } ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
1442,,0
1443,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
1444,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1445,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = Svc_null> <S2S2SV_null> static,0
1446,<S2SV_ModStart> goto out ; <S2SV_ModEnd> if ( event,0
1447,<S2SV_ModStart> ; if ( mask == NULL ) return NULL <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( mask & KADM5_MASK ) ) return 0 ; if (,0
1448,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1449,"<S2SV_ModStart> ] ) ; memset <S2SV_ModEnd> ( mb,",0
1450,,0
1451,,1
1452,<S2SV_ModStart> ; int tmp_dbh = 0 ;,0
1453,"<S2SV_ModStart> ; status = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 )",0
1454,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> vp9_phdr ) { eth_packet_packet_len ( eth ) ; break ; } else { struct eth_packet_packet_len = NULL ; break ; },0
1455,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1456,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1457,"<S2SV_ModStart> offset ) { <S2SV_ModEnd> offset, offset <S2SV_ModStart> offset ) ; }",0
1458,<S2SV_ModStart> out_free ; } if (! out ) { ret = - EINVAL ; goto out ; },0
1459,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> rc -> avg_frame_frame_frame_bandwidth <S2SV_ModEnd> * const int <S2SV_ModStart> = 0 ; int rc -> avg_frame_bandwidth = ( cpi -> avg_frame_bandwidth - 1 ) <S2SV_ModEnd> ; const int <S2SV_ModStart> = ( cpi -> avg_frame_frame_bandwidth ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> = ( rc -> avg_frame_frame_bandwidth / 2 ) <S2SV_ModEnd> ; if (,0
1460,,0
1461,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> read_bit ( vpx_read_bit <S2SV_ModEnd> ( r ),0
1462,"<S2SV_ModStart> ) ) { ND_TCHECK_16BITS ( ndo, 0 ) ; <S2SV_ModStart> ) ) ; }",0
1463,<S2SV_ModStart> ) return - 1 <S2SV_ModEnd> ; if (,0
1464,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1465,"<S2SV_ModStart> ; # line 8 <S2SV_ModEnd> ""grammar.c"" { yr_grammar.c"" { yr_grammar.c"" { yr_grammar.c"" { yr_grammar.c"" { yr_grammar.c"" { yr_grammar.c"" { yr_grammar.c"" { yr_grammar.c"" { yr_grammar.c"" { yr_grammar.c"" { yr_grammar.c"" { yr_grammar.c"" { yr_grammar.c"" { yr_grammar.c"" { yr_grammar.c"" { yr_grammar.c"" { yr_grammar.c"" { yr_grammar.c"" { yr_grammar.c"" { yr_grammar.c"" { yr_grammar.y"" { yr_grammar.y"" { yr_grammar.y"" { yr_grammar.y"" { yr_grammar.c"" { yr_grammar.y"" { yr_grammar.y"" { yr_grammar.y"" { yr_grammar.y"" { yr_grammar.y"" { yr",0
1466,<S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( *,0
1467,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> * const MACROBLOCKD <S2SV_ModStart> * const MACROBLOCKD * const <S2SV_ModStart> TX_SIZE tx_size = & cpi -> common ; MACROBLOCKD * const <S2SV_ModStart> TX_SIZE tx_size ; MACROBLOCK_SIZE tx_size = & cpi -> common ; MACROBLOCK_SIZE bh = & cpi -> common ; MACROBLOCK_SIZE tx_size ; MACROBLOCK_SIZE tx_size = & cpi -> mb ; const int64_t * const int64_t * const <S2SV_ModStart> block ) ; const int <S2SV_ModEnd> t * const int <S2SV_ModStart> cm -> mbmi_ext = & cpi -> mbmi_ext ; const int64_t * const uint8_t * const uint8_t * const int64_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * const uint8_t * const int64_t * const int,0
1468,,0
1469,<S2SV_ModStart> ; if ( shm_perm == NULL ) return - EINVAL ; if (,0
1470,,0
1471,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1472,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
1473,,0
1474,<S2SV_ModStart> msg ) ; msg -> msg_namelen = 0 ;,0
1475,<S2SV_ModStart> } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> len ) ),0
1476,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1477,<S2SV_ModStart> <S2SV_null> <S2SV_null> static,0
1478,<S2SV_ModStart> mq ) ; q -> mq = 0 ;,0
1479,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1480,<S2SV_ModStart> 0 ) { zval ; zval = * tmp ; zval ; zval_copy_copy ( tmp ) ; zval_to_copy ( & tmp ) ; zval_copy ( tmp ) ; zval = zval_copy ( tmp ) ; zval_copy_copy ( tmp ) ;,0
1481,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1482,<S2SV_ModStart> buf ) { if ( buf == sizeof ( buf ) ) return - 1 ;,0
1483,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> s_null> <S2SV_null> <SV_null> static S_null> <S2SV_null> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> s_null>,0
1484,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1485,"<S2SV_ModStart> * seg ) { memset <S2SV_ModEnd> ( cm, <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( cm ->",0
1486,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart>,0
1487,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY (,0
1488,<S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; },0
1489,<S2SV_ModStart> ) { memset <S2SV_ModEnd> ( x ->,0
1490,<S2SV_ModStart> 1 ) { <S2SV_ModEnd> rcode = 0,0
1491,<S2SV_ModStart> ; if ( * cp == NULL || <S2SV_ModEnd> strchr ( cp,0
1492,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> * outputbuffer ) { int <S2SV_ModEnd> ; char * <S2SV_ModStart> 0 ) { int result ; int <S2SV_ModStart> = 0 ; char * s ; int <S2SV_ModStart> = 0 ; char * tp = 0 ; char * out ; char * s = strbuf [ 0 ] ; char * out ; char * out ; char * s = strbuf [ tp [ 0 ] ; char * out ; char * s = str ; char * out ; char * out ; char * out = 0 ; char * tp [ 0 ] ; char * out = strbuf [ 0 ] ; char * out = 0 ; char * out ; if (! strchr ( s ) ) { if (! strbuf [ 0 ] ) { if (! strbuf [ 0 ] == '\\0' ) { if ( strbuf [ i ] == '\\0' ) { if (! strbuf [ 1 ] == '\\0' ) { sprintf ( ""Error: <S2SV_blank> \' <S2SV_blank> \' <S2SV_blank> \' <S2SV_blank> \' <S2SV_blank> \' <S2SV_blank> \' <S2SV_blank> \' <S2SV_blank> \' <S2SV_blank> \'\\n""\'\\n"" ) ; return 0 ; }",0
1493,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ipv4. ipv4_idents_once ( & <S2SV_ModStart>, & net -> ipv4. ipv4. ipv4. ipv4. ip_key <S2SV_ModEnd>, sizeof ( <S2SV_ModStart>, & net -> ipv4. ipv4. ipv4. ipv4. ipv4. ipv4. ipv4. ipv4. ipv4. ipv4. ipv4. ipv4. ip_key <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> ( net -> ipv4. ipv4. ipv4. ipv4. ipv4. ipv4. ipv4. ipv4. ipv4. ipv4. ipv4. ipv4. ipv4. ip_key <S2SV_ModEnd>, sizeof (",0
1494,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj,",0
1495,"<S2SV_ModStart> * const vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_prob <S2SV_ModEnd> * w )",0
1496,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1497,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1498,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1499,<S2SV_ModStart> IMG2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null>,0
1500,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1501,"<S2SV_ModStart> goto out ; if ( strlen ( name, '\\0' ) == '\\0' ) { g_warning ( ""%s: <S2SV_blank> "", '\\n"" ) ; goto out ; } <S2SV_ModEnd> } else if (",0
1502,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> uv_null> <S2SV_null> <S2SV_null> static int tile_null> static <S2SV_ModStart> vp9_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> tile_null> <S2SV_null> <S2SV_null>,0
1503,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> p9_null> <S2S2SV_null> <S2SV_null> <S2S2SV_null> static int <S2SV_ModEnd> vp9_null>,0
1504,,0
1505,<S2SV_ModStart> = 0 ;,0
1506,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ; struct ipv6_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> -> opt -> opt <S2SV_ModEnd> ; if (,0
1507,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1508,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1509,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1510,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> path_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null>,0
1511,"<S2SV_ModStart>, & len, 0",1
1512,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1513,<S2SV_ModStart> rc ; const VP9EncoderConfig <S2SV_ModEnd> * oxcf =,0
1514,<S2SV_ModStart> * buf ; jas_uchar <S2SV_ModEnd> buf [ 0,0
1515,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1516,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int mi_row ) { const PREDICTION_MODE_INFO * const xd = & cpi -> common ; MACROBLOCK_MODE_INFO * const x = & cpi -> td. mb ; MACROBLOCK_INFO * const x = & cpi -> oxcf. mb ; MACROBLOCK_MODE_INFO * const x -> mbmi_ext = & cpi -> sf_ext ; MACROBLOCK_MODE_INFO * const mbmi_ext = & cpi -> sf_ext ; <S2SV_ModStart> cm -> mbmi_ext = cpi -> mb ; # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH if ( x -> oxcf. subsampling_8_8 ) { if ( x -> oxcf. subsampling_mode == BLOCK_8_8 ) ) { x -> oxcf. is_mode = x -> oxcf. mb_mode ; } else { x -> oxcf. mb_mode = cpi ->,0
1517,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> en2SV_null> <S2S2SV_null> <S2SV_null> static <S2SV_ModStart> int ret ; int ret = - EINVAL ; int ret = - EINVAL ; int ret ; int ret = - EINVAL ; int ret = - EINVAL ; goto out ; <S2SV_ModStart> int ) ; if (! ret ) goto out ; <S2SV_ModStart> if (! ret <S2SV_ModEnd> ) ) goto out <S2SV_ModEnd> ; } if (,0
1518,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ; } <S2SV_null>,0
1519,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = 0 ; int <S2SV_ModEnd> offset ; int <S2SV_ModStart> = 0 ; if ( bit_offset > 0 ) { <S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ; <S2SV_ModStart> = 0 ; } <S2SV_ModEnd> } if (,0
1520,<S2SV_ModStart> ++ ) { if ( off + off + off + off + off ) return - off ;,0
1521,<S2SV_ModStart> ; if ( is_nmi <S2SV_ModEnd> ( intr_info ),0
1522,,0
1523,<S2SV_ModStart> ; if ( <S2SV_ModEnd> packet -> filename,0
1524,<S2SV_ModStart> path ) ; <S2SV_ModEnd> out : return,1
1525,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1526,"<S2SV_ModStart>, y, MagickMin <S2SV_ModEnd> ( 4,",0
1527,"<S2SV_ModStart> ; ip_options_rcu <S2SV_ModEnd> ( sk,",0
1528,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1529,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1530,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1531,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1532,<S2SV_ModStart> y3 ) { <S2SV_ModEnd> f ( x,0
1533,<S2SV_ModStart> ( rdp ->,0
1534,<S2SV_ModStart> ) ) { memset <S2SV_ModEnd> ( cpi ->,0
1535,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,0
1536,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1537,<S2SV_ModStart> pbi ) { <S2SV_ModEnd> if ( pbi,0
1538,,0
1539,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1540,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * input,",0
1541,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1542,,0
1543,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1544,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1545,<S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> coef_probs [ tx_size,0
1546,"<S2SV_ModStart> ( fd, r <S2SV_ModEnd> ) ; } if",0
1547,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 2SV_null> <SV_null> <S2SV_null> <SV_null> <S2SV_null> <S2S2SV_null> <S2SV_null> static <S2SV_ModStart> 2SV_null> <SV_null> <S2SV_null> <SV_null> <S2SV_null> <SV_null> <S2SV_null> <S2S2SV_null>,0
1548,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1549,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1550,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; char <S2SV_ModStart> ( buf, ""\\"" ) ) ; if (! buf ) { <S2SV_ModStart> ( buf, ""invalid <S2SV_blank> \'%d"", buf ) ; } else if (! buf ) { if (! buf ) continue ; }",0
1551,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1552,<S2SV_ModStart> task ) ; task -> tk_status = 0 ;,0
1553,"<S2SV_ModStart>, n ) ; if ( w == NULL ) return 0",1
1554,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1555,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 8_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 8_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 8_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 8_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> vp8_null> static <S2SV_ModStart> int64_null> <S2S2SV_null> <S2S2SV_null> static <S2SV_ModStart> 8_null> 0 ) { vp9_null> <S2S2SV_null> static int <S2SV_ModEnd> ( & tile_null>,0
1556,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1557,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int motion_delta_delta_delta_delta ; int segfeature_active = 0 ; int segfeature_active = 0 ; int segfeature_active = 0 ; int segfeature_active = 0 ; int segfeature_active = 0 ; int segfeature_active_active ( seg, segment_active ) ; if ( segfeature_active ( seg, segment_active ) ) { if ( segfeature_active ( seg, segment_active ) ) { if ( segfeature_active_active ( segfeature_active ) ) { if ( segfeature_active ( seg ) ) { if (! seg -> segfeature_active_active_active_active ( seg, seg ) ) { if ( segfeature_active ) ) { if ( segfeature_active_active_active_active_active ( seg, seg ) ) { if ( segfeature_active ) ) { if ( seg -> segfeature_delta_active_active_active ( seg, seg,",0
1558,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1559,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1560,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1561,,0
1562,,0
1563,<S2SV_ModStart> -> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,0
1564,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) ) ),0
1565,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> t *,0
1566,<S2SV_ModStart> L ) ; g -> gcstate = 0 ;,0
1567,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1568,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> sock ) { <S2SV_ModEnd> log2SV_null> <S2SV_null> <S2SV_null> static,0
1569,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> inter_null> static <S2SV_ModStart> int ret = 0 ; int <S2SV_ModEnd> struct client ; int <S2SV_ModStart> NULL ) { int ret = - 1 ; int ret = 0 ; int ret = 0 ; int ret = 0 ; int ret = 0 ; int ret = 0 ; int ret = 0 ; int ret = 0 ; int ret ; int ret = 0 ; int ret = 0 ; int ret = 0 ; int ret = 0 ; int ret = 0 ; int ret = 0 ; int ret = 0 ; int ret = 0 ; int ret = 0 ; int ret = 0 ; int rest_timeout = 0 ; int ret = 0 ; if ( server -> remote_timeout!= NULL ) { int ret = 0 ; out_timeout = 0 ; if ( server -> remote_timeout < 0 ) { if (! server -> remote_timeout ) { if (! server -> remote_timeout ) { crm_get_client_client_timeout ( client, ""client <S2SV_blank> failed"" ) ; goto out ; } <S2SV_ModEnd> return 0 ; } <S2SV_ModStart> return 0 ; } <S2SV_ModEnd> return 0 ;",0
1570,<S2SV_ModStart> = 0 ; memset <S2SV_ModEnd> ( cpi ->,0
1571,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
1572,<S2SV_ModStart> ) ) ; ND_TCHECK ( bp [ 0 ] ) ;,0
1573,<S2SV_ModStart> NULL ; } if ( ctx -> type == NULL ) return FALSE ;,0
1574,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1575,"<S2SV_ModStart> int mptctl_ioctl_init ( MPT_ADAPTER * ioc, <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; if ( <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } if (",0
1576,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> image_info ) { ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; ThrowReaderException ( CorruptImageHeader"" ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( image -> columns )!= 0 ) { ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; ThrowReaderException ( CorruptImageDataInFile"" ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageDataInFile"" ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageDataInFile"" ) ; return ( image ) ; } if ( image -> rows ) { if ( status == MagickMemory ( image ) ) ) ThrowReaderException ( image )",0
1577,"<S2SV_ModStart> ) ; } if ( jas_eprintf ( jas_eprintf ( jas_eprintf -> numt ) || jas_eprintf -> numtiles [ jas_eprintf -> numcmpts [ jas_eprintf -> comps [ jas_eprintf ( jas_eprintf -> jas_eprintf -> jas_eprintf ( jas_eprintf -> jas_eprintf, ""n"" ) ) ; return - 1 ; } if ( jas_eprintf ( jas_eprintf -> numcmpts [ jas_eprintf -> jas_eprintf ( jas_eprintf -> jas_eprintf -> numcmpts - 1 ) ) { jas_eprintf ( ""n"" ) - 1 ) ; jas_eprintf ( jas_eprintf -> jas_eprintf -> jas_eprintf ( ""n"", 1 ) ) ; jas_eprintf ( jas_eprintf -> jas_eprintf -> jas_eprintf (",0
1578,,0
1579,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1580,,0
1581,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1582,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r )",0
1583,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1584,"<S2SV_ModStart> ) ) ; ND_TCHECK2 ( ndo, 0 ) ;",0
1585,<S2SV_ModStart> return 0 ; <S2SV_ModEnd> return 0 ;,0
1586,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> key_null> static int <S2SV_ModEnd> ; ret =,0
1587,<S2SV_ModStart> ; if ( skb -> len < sizeof ( struct nla_len ) ) return 0 ; if (,0
1588,"<S2SV_ModStart>, tag ) \\\n{ <S2SV_ModEnd> if ( image",0
1589,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null>,0
1590,"<S2SV_ModStart> -> cac_id, serial -> len <S2SV_ModEnd> ) ; SC_FUNC_RETURN",1
1591,<S2SV_ModStart> ; # endif tok -> type_comments = 0 ;,0
1592,<S2SV_ModStart> = 0 ; gd -> decoder -> decoderConfig = 0 ;,0
1593,,0
1594,<S2SV_ModStart> 0 ) { <S2SV_ModEnd> return 0 ;,0
1595,,0
1596,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2S2SV_null>,0
1597,,1
1598,<S2SV_ModStart> ; if (! s ) return FALSE,0
1599,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct ipv6_txoptions * opt <S2SV_ModStart> ) ) { struct ipv6_txoptions * opt = NULL ; rcu_dereference_read_unlock ( ) ; <S2SV_ModStart> ) ) ; } <S2SV_ModEnd> if ( opt <S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( opt <S2SV_ModStart> ) ) ; } <S2SV_ModEnd> if ( fl6_to_to_to_to_unlock ( fl6, & <S2SV_ModStart> opt -> opt_to_dereference <S2SV_ModEnd> opt -> opt",0
1600,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int size_t <S2SV_ModEnd> size ) { int <S2SV_ModStart> = 0 ; int ret = 0 ; int <S2SV_ModStart> = 0 ; if ( size_t ) { if ( ndo_t ) goto out ; <S2SV_ModStart> = 0 ; } # if CONFIG_VP9_HIGHBITDEPTH if CONFIG_HIGHBITDEPTH ) { if ( ""Unsupported <S2SV_blank> image <S2SV_blank> image\\n"" ) { goto out ; } <S2SV_ModEnd> ; } if ( <S2SV_ModStart> = 0 ; } if ( size_t ) { if ( size_t ) { if ( ndo_t ) >= 0 ) { if ( dec_t ) { return - 1 ; } # if CONFIG_VP9_HDR_HIGHBITDEPTH ) { if ( ""Bad <S2SV_blank> exceeds"" ) { goto out ; } } # endif <S2SV_ModStart> ) { if CONFIG_VP9_HIGHBITDEPTH ) { if ( ""Unsupported <S2SV_blank> image <S2SV_blank> image"" ) { if ( ""Unsupported <S2SV_blank> to <S2SV_blank> image\\n"" ) { goto out ; } break ; } if ( """,0
1601,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null>,0
1602,"<S2SV_ModStart> buffer ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1603,<S2SV_ModStart> new_parent ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1604,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> return 0 ;,0
1605,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( msg,0
1606,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> int64_t <S2SV_ModStart> int64_t * const int <S2SV_ModEnd> ; int64_t <S2SV_ModStart> = 0 ; int64_t <S2SV_ModEnd> cost ; int <S2SV_ModStart> int64_t ) { <S2SV_ModEnd> return 0 ; <S2SV_ModStart> ; } # if CONFIG_VP9_HIGHBITS2SV_null> <S2SV_null> <S2SV_null>,0
1607,,0
1608,<S2SV_ModStart> == 0 ) { memset <S2SV_ModEnd> ( p ->,0
1609,"<S2SV_ModStart> -> msg_name ; memset ( msg, 0, msg_name, sizeof ( msg_name ) ) ;",0
1610,"<S2SV_ModStart> -> rows * MagickMax ( number_planes_filled, number_planes_filled, number_filled ) <S2SV_ModEnd> ( number_planes_planes_filled,",0
1611,<S2SV_ModStart> ) ) { if <S2SV_ModEnd> ( r ->,0
1612,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1613,<S2SV_ModStart> client ) { <S2SV_ModEnd> client -> client,0
1614,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
