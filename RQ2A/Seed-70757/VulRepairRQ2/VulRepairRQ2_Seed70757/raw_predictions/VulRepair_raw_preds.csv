,raw_predictions,correctly_predicted
0,"<S2SV_ModStart> ; if ( n2size < 0 ) { applog ( LOG_INFO, ""JSON <S2SV_blank> decode <S2SV_blank> failed(%d): <S2SV_blank> %s"", err. line, err. text ) ; goto out ; } nonce1 = json_object_get ( val, ""nonce1"" ) ; if (! nonce1 ) { applog ( LOG_INFO, ""JSON <S2SV_blank> decode <S2SV_blank> failed(%d): <S2SV_blank> %s"", err. line, err. text ) ; goto out ; } sessionid = json_object_get ( val, ""sessionid"" ) ; if (! sessionid ) { applog ( LOG_INFO, ""JSON <S2SV_blank> decode <S2SV_blank> failed(%d): <S2SV_blank> %s"", err. text ) ; goto out ; }",0
1,"<S2SV_ModStart> case EAP_FRAME_TYPE_PACKET : if ( tlen < 2 ) { ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ) ) ; break ; } <S2SV_ModStart> 2 ) { if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ) ) ; break ; } <S2SV_ModStart> ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ) ) ; break ; default : ND_PRINT ( ( ndo, ""\\n\\t\\t <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", tok2str ( eap_type_values, ""unknown"", * ( tptr + 4 ) ) ) ; break ; } ND_TCHECK2 ( * tptr, len )",0
2,<S2SV_ModStart> op_mutex ) ; kfree_skb ( skb ) ;,1
3,"<S2SV_ModStart> sizeof ( struct yamdrv_ioctl_cfg ) ) ) return - EINVAL ; if ( copy_from_user ( & ym -> cfg, ifr -> ifr_data, sizeof ( struct yamdrv_ioctl_cfg ) ) ) return - EFAULT ; if ( copy_from_user ( & ym -> cfg, ifr -> ifr_data, sizeof ( struct yamdrv_ioctl_cfg ) ) ) return - EFAULT ; if ( copy_from_user ( & ym -> cfg, sizeof ( struct yamdrv_ioctl_cfg ) ) ) return - EFAULT ; if ( copy_from_user ( & ym -> cfg, ifr -> ifr_data, sizeof ( struct yamdrv_ioctl_cfg ) ) ) return - EFAULT ; if ( copy_from_user ( & ym -> cfg, ifr -> ifr_data, sizeof ( struct yamdrv_ioctl_cfg ) ) ) return - EFAULT ;",0
4,<S2SV_ModStart> frag_hdr_sz ) ; if ( unlikely ( unfrag_ip6hlen > MAX_FRAGMENT_IP6HLEN ) ) { kfree_skb ( skb ) ; return ERR_PTR ( - EINVAL ) ; } <S2SV_ModStart> frag_hdr_sz ) ; if ( unlikely ( unfrag_ip6hlen > MAX_FRAGMENT_IP6HLEN ) ) { kfree_skb ( skb ) ; return ERR_PTR ( - EINVAL ) ; },0
5,"<S2SV_ModStart> i ++ ) { uint64_t <S2SV_ModEnd> time, offset <S2SV_ModStart> offset ; } if ( version == 1 ) { time = avio_rb64 ( f ) ; offset = avio_rb64 ( f ) ; } else if ( version == 2 ) { time = avio_rb64 ( f ) ; offset = avio_rb64 ( f ) ; } else if ( version == 3 ) { time = avio_rb64 ( f ) ; offset = avio_rb32 ( f ) ; }",0
6,"<S2SV_ModStart> * tpg ; size_t <S2SV_ModEnd> tpgt ; int <S2SV_ModStart> EINVAL ) ; tpgt = kstrtoul ( name + 5, 10, & tpgt ) ; if ( tpgt < 1 || tpgt > UINT_MAX ) return ERR_PTR ( - EINVAL ) ; tpg = kzalloc ( sizeof ( struct vhost_scsi_tpg ), GFP_KERNEL ) ; if (! tpg ) return ERR_PTR ( - ENOMEM ) ; tpg -> tport_type = TRANSPORT_TPG_TYPE_NORMAL ; ret = core_tpg_register ( & tpg -> se_tpg, wwn, & tpg -> se_tpg, tpg, TRANSPORT_TPG_TYPE_NORMAL ) ; if ( ret < 0 ) { kfree ( tpg ) ; return NULL ; } mutex_lock ( & vhost_scsi_mutex ) ; list_add_tail ( & tpg -> tv_tpg_list, & vhost_scsi_list ) ; mutex_unlock ( & vhost_scsi_mutex ) ; return NULL ; }",0
7,<S2SV_ModStart> writer = ( TrackWriter <S2SV_ModEnd> * ) gf_list_get,0
8,"<S2SV_ModStart> vcpu ) { <S2SV_ModEnd> void * vapic <S2SV_ModStart> ) return ; if (! test_bit ( KVM_APIC_CHECK_VAPIC, & vcpu -> arch. apic_attention ) ) return ;",0
9,<S2SV_ModStart> src ) ; <S2SV_ModEnd> clear_task_ebb ( dst,0
10,<S2SV_ModStart> item ) { return <S2SV_ModEnd> cJSON_GetArrayItem ( array <S2SV_ModStart> -> child ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
11,"<S2SV_ModStart> ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"" <S2SV_ModEnd>, ( char",0
12,<S2SV_ModStart> = NEXTHDR_FRAGMENT ; if ( unlikely ( unfrag_ip6hlen > SKB_MAX_FRAGMENT_SIZE ) ) { kfree_skb ( skb ) ; segs = ERR_PTR ( - EINVAL ) ; goto out ; } <S2SV_ModStart> = NEXTHDR_FRAGMENT ; if ( unlikely ( unfrag_len > SKB_MAX_FRAGMENT_SIZE ) ) { kfree_skb ( skb ) ; segs = ERR_PTR ( - EINVAL ) ; goto out ; },0
13,"<S2SV_ModStart> u32 event_id, u64 <S2SV_ModEnd> nr, int <S2SV_ModStart>, nr, <S2SV_ModEnd> & data,",0
14,"<S2SV_ModStart> EXT4_EXTENTS_FLAG ) { char * buf = grub_malloc ( <S2SV_ModEnd> EXT2_BLOCK_SIZE ( data <S2SV_ModStart> ( data ) ) ; if (! buf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } <S2SV_ModEnd> leaf = ( <S2SV_ModStart> leaf ) { if (! leaf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) ( leaf + 1 ) ; for ( i = 0 ; i < grub_le_to_cpu16 ( leaf -> entries ) ; i ++ ) { if ( fileblock >= grub_le_to_cpu32 ( ext [ i ]. block ) ) break ; } if ( fileblock >= grub_le_to_cpu32 ( ext [ i ]. len ) ) return 0 ; else { grub_disk_addr_t start ; start = grub_le_to_cpu32 ( ext [ i ]. start ) ; start = ( start << 32 ) + grub_le_to_cpu",0
15,"<S2SV_ModStart> fdct16 ( const tran_low_t * in, tran_low_t <S2SV_ModEnd> * out ) <S2SV_ModStart> 16 ] ) { tran_low_t <S2SV_ModEnd> step1 [ 8 <S2SV_ModStart> 8 ] ; tran_low_t <S2SV_ModEnd> step2 [ 8 <S2SV_ModStart> 8 ] ; tran_low_t <S2SV_ModEnd> step3 [ 8 <S2SV_ModStart> 8 ] ; tran_low_t <S2SV_ModEnd> input [ 8 <S2SV_ModStart> ; int temp1, temp2 ; input [ 0 ] = in [ 0 ] + in [ 15 ] ; input [ 1 ] = in [ 1 ] + in [ 14 ] ; input [ 2 ] = in [ 2 ] + in [ 13 ] ; input [ 3 ] = in [ 3 ] + in [ 14 ] ; input [ 4 ] = in [ 4 ] + in [ 11 ] ; input [ 5 ] = in [ 5 ] + in [ 12 ] ; input [ 6 ] = in [ 6 ] + in [ 10 ] ; input [ 7 ] = in [ 7 ] + in [ 9 ] ; s0, s1, s2, s3, s4, s5, s6, s7 ; t0, t1, t2, t3 ; t1 = input [ 0 ] + input [",0
16,<S2SV_ModStart> skip_full_check : mutex_unlock ( & bpf_verifier_lock ) ;,0
17,"<S2SV_ModStart> -> num_channels ; if ( num_chans > MAX_WAVEPACK_CHANNELS ) { strcpy ( wpc -> error_message, ""libwavpack <S2SV_blank> too <S2SV_blank> many <S2SV_blank> channels <S2SV_blank> in <S2SV_blank> the <S2SV_blank> wave <S2SV_blank> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
18,"<S2SV_ModStart> = 0 ; if (! scsi_device_online ( SDev ) ) { err = - ENODEV ; goto out ; } <S2SV_ModStart> cgc -> sense, & sshdr, cgc -> timeout, IOCTL_RETRIES, 0, 0, NULL ) ; if ( driver_byte ( result )!= 0 ) { err = - EIO ; goto out ; } result = scsi_execute ( SDev, cgc -> cmd, cgc -> data_direction, cgc -> buffer, cgc -> buflen, cgc -> sense, & sshdr, cgc -> timeout, IOCTL_RETRIES, 0, 0, NULL ) ; if ( driver_byte ( result )!= 0 ) { if (! cgc -> quiet ) sr_printk ( KERN_INFO, cd, ""CDROM <S2SV_blank> change <S2SV_blank> detected.\\n"" ) ; if (! cgc -> quiet ) sr_printk ( KERN_INFO, cd, ""CDROM <S2SV_blank> not <S2SV_blank> ready. <S2SV_blank> Make <S2SV_blank> sure <S2SV_blank> there <S2SV_blank> is <S2SV_blank> a <S2SV_blank> disc <S2SV_blank> in <S2SV_blank> the <S2SV_blank> drive.\\n"" ) ; err = - ENOMEDIUM ; break ;",0
19,"<S2SV_ModStart> ; if ( ( fgetc ( ifp ) ) == 0x48454150 ) { # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; # endif <S2SV_ModStart> ; if ( ( fgetc ( ifp ) ) == 0x48454150 ) { # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; # else imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; # endif <S2SV_ModStart> } if ( ( fgetc ( ifp ) ) == 0x48454150 ) { # ifdef LIBRAW_LIBRARY_BUILD imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; # endif parse_ciff ( save + hlen, len - hlen, 0 ) ; }",0
20,"<S2SV_ModStart> void search_filter_level ( <S2SV_ModEnd> const YV12_BUFFER_CONFIG * <S2SV_ModStart> * sd, VP9EncoderConfig <S2SV_ModEnd> * cpi, <S2SV_ModStart> partial_frame ) { const VP9EncoderConfig <S2SV_ModEnd> * const cm <S2SV_ModStart> = get_max_filter_level ( cpi ) ; <S2SV_ModEnd> const int min_filter_level <S2SV_ModStart> = get_max_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_",0
21,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
22,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ( w, mv_class == MV_CLASS_0? mvcomp -> class0_fp : mvcomp -> class0_hp ) ; } vpx_write_token ( w, vp9_mv_class_tree, mvcomp -> classes, & mv_class_encodings [ mv_class ] ) ; vpx_write_token ( w, vp9_mv_fp_tree, mv_class == MV_CLASS_0? mvcomp -> class0_fp : mvcomp -> fp ) ; if ( usehp ) vpx_write ( w, hp, mv_class == MV_CLASS_0? mvcomp -> class0_hp : mvcomp -> hp ) ; } else { int i ; const int n = MV_CLASS0_BITS - 1 ; for ( i = 0 ; i < n ; ++ i ) vpx_write ( w, ( d >> i ) & 1, mvcomp -> bits [ i ] ) ; vpx_write_token ( w, vp9_mv_class0_tree, mv",0
23,<S2SV_ModStart> base ) ; if ( likely ( alg -> cra_rng. rng_make_random ) ) return <S2SV_ModEnd> rng -> seedsize,0
24,"<S2SV_ModStart> sa_protocol!= PX_PROTO_PPTP ) return - EINVAL ; if ( sockaddr_len < sizeof ( sp -> sa_addr. pptp. sin_addr ) ) return - EINVAL ; if ( sockaddr_len < sizeof ( sp -> sa_addr. pptp. sin_addr ) ) return - EINVAL ; if (! lookup_chan_dst ( sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. call_id, & fl4 ) ) return - EINVAL ; if (! lookup_chan_dst ( sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. call_id, & sp -> sa_addr. pptp. sin_addr. s_addr ) ) goto end ; if (! lookup_chan_dst ( sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. call_id, & fl4 ) ) goto end ; if (! lookup_chan_dst ( sp -> sa_addr. pptp. call_",0
25,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; } else { <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; } <S2SV_ModStart> == 1024 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_1024 ; },0
26,"<S2SV_ModStart> int verbose ; jas_image_t <S2SV_ModEnd> * image ; <S2SV_ModStart> ; while ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { switch ( id ) { case OPT_VERSION : printf ( ""%s\\n"", JAS_VERSION ) ; exit ( EXIT_SUCCESS ) ; break ; case OPT_INFILE : infile = jas_optarg ; break ; case OPT_HELP : default : usage ( ) ; break ; } } if ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { if ( id == OPT_INFILE ) { if (! ( instream = jas_stream_fopen ( infile, ""rb"" ) ) ) { fprintf ( stderr, ""cannot <S2SV_blank> open <S2SV_blank> input <S2SV_blank> image <S2SV_blank> file <S2SV_blank> %s\\n"", infile ) ; exit ( EXIT_FAILURE ) ; } } if ( ( fmtid = jas_image_getfmt ( instream ) ) < 0 ) { fprintf ( stderr, ""unknown <S2SV_blank> image <S2SV_blank> format\\n"" ) ; } if (! ( image = jas_image_decode ( instream, fmtid, 0 )",0
27,"<S2SV_ModStart> esr ) { <S2SV_ModEnd> pr_crit ( ""Bad <S2SV_blank> mode <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> handler <S2SV_blank> detected, <S2SV_blank> code <S2SV_blank> 0x%08x\\n"" <S2SV_ModStart> esr ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
28,"<S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ptr ++ ; if ( length < 2 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> ( ndo, ""%s"", tok2str ( l2tp_cc_direction2str, <S2SV_ModEnd> ""Direction-#%u"", * <S2SV_ModStart> ptr ++ ) ) ) ; if ( length < 5 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; return ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
29,"<S2SV_ModStart> intf ) { struct usb_host_interface * intf1 = to_usb_interface ( udev, intf ) ; struct usb_host_interface * intf2 = to_usb_interface ( intf ) ; struct usb_host_interface * intf2 = to_usb_interface ( intf ) ; if ( intf2 -> desc. bNumInterfaces < 1 ) return - ENODEV ; alt = intf2 -> desc. bNumInterfaces - 1 ; if ( alt < 0 ) return alt ; if ( intf -> desc. bNumEndpoints < 1 || intf2 -> desc. bNumEndpoints > 1 ) return - ENODEV ; alt = <S2SV_ModEnd> uas_find_uas_alt_setting ( intf <S2SV_ModStart> intf ) ; if ( alt < 1 ) return alt ; return usb_set_interface ( udev, intf2 -> desc. bInterfaceNumber, alt ) ;",0
30,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int udf_pc_to_char ( struct udf_sb * udf_sb, const unsigned char * from <S2SV_ModEnd>, int fromlen <S2SV_ModStart> fromlen, unsigned char * <S2SV_ModEnd> to ) { <S2SV_ModStart> elen = 0 ; unsigned char * <S2SV_ModEnd> p = to <S2SV_ModStart> = '/' ; <S2SV_ModEnd> while ( elen <S2SV_ModStart> case 2 : memcpy <S2SV_ModEnd> ( p, <S2SV_ModStart> += 3 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> case 3 : memcpy <S2SV_ModEnd> ( p, <S2SV_ModStart> += 2 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> case 4 : p += udf_get_filename ( sb, pc -> componentIdent, p, pc -> lengthComponentIdent ) ; p += 2 ; break ; case 5 : p += udf_get_filename ( sb, pc -> componentIdent, p, pc -> lengthComponentIdent ) ; p += pc -> lengthComponentIdent ; break ; case 6 : p += udf_get_filename ( sb, pc -> componentIdent, p, pc -> lengthComponentIdent ) ; * p ++ = '/' ; break ; case 7 : p += udf_get_filename ( sb, pc -> componentIdent, p, pc -> lengthComponentIdent ) ; p += pc ->",0
31,"<S2SV_ModStart> ; } else if ( atoi ( argv [ 1 ] ) == - 1 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'yes\' <S2SV_blank> or <S2SV_blank> \'no\'"" ; goto loaderr ; } else if ( atoi ( argv [ 1 ] ) == - 1 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'no\'"" ; goto loaderr ; } else if ( atoi ( argv [ 1 ] ) == - 1 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'no\'"" ; goto loaderr ; } else if ( atoi ( argv [ 1 ] ) == - 1 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'yes\' <S2SV_blank> or <S2SV_blank> \'no\'"" ; goto loaderr ; } else if ( atoi ( argv [ 1 ] ) == - 1 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'no\'"" ; goto loaderr ; } else if ( atoi ( argv [ 1 ] ) == - 1 ) { err = ""argument <S2SV_blank> must <S2SV_blank> be <S2SV_blank> \'no\'"" ; goto loaderr ; }",0
32,"<S2SV_ModStart> connection_id ) ; spin_lock_irqsave ( & tgtport -> lock, flags )",0
33,"<S2SV_ModStart> get_version_reply ) ; if ( dev -> get_version_reply. desc. bNumEndpoints < 1 ) { dev_err ( idev, ""get <S2SV_blank> version <S2SV_blank> not <S2SV_blank> supported\\n"" ) ; retval = - ENODEV ; goto exit ; } if ( dev -> get_version_reply. desc. bNumEndpoints < 1 ) { dev_err ( idev, ""get <S2SV_blank> version <S2SV_blank> not <S2SV_blank> supported\\n"" ) ; retval = - ENODEV ; goto exit ; } if ( dev -> get_version_reply. desc. bNumEndpoints < 1 ) { dev_err ( idev, ""get <S2SV_blank> version <S2SV_blank> not <S2SV_blank> supported\\n"" ) ; retval = - ENODEV ; goto exit ; } if ( dev -> get_version_reply. desc. bNumEndpoints < 1 ) { dev_err ( idev, ""get <S2SV_blank> version <S2SV_blank> not <S2SV_blank> supported\\n"" ) ; retval = - ENODEV ; goto exit ; } if ( dev -> get_version_reply. desc. bNumEndpoints < 1 ) { dev_err ( idev, ""get <S2SV_blank> version <S2SV_blank> not <S2SV_blank> supported\\n"" ) ; retval = - ENODEV ;",0
34,"<S2SV_ModStart> ; if ( bin -> shstrtab ) { if ( shdr -> sh_name + shdr -> sh_size > bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } else if ( shdr -> sh_name + shdr -> sh_size > bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( link_shdr && link_shdr -> sh_name + link_shdr -> sh_size > bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } else if ( link_shdr && link_shdr -> sh_name + link_shdr -> sh_size > bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" )",0
35,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> construct_get_dest_keyring ( struct <S2SV_ModStart> * authkey ; if ( dest_keyring ) { key_get ( dest_keyring ) ; return 0 ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> switch ( cred <S2SV_ModStart> KEY_REQKEY_DEFL_DEFAULT : case KEY_REQKEY_DEFL_REQUESTOR_KEYRING : if ( cred -> request_key_auth ) { authkey = cred -> request_key_auth ; up_read ( & authkey -> sem ) ; if (! test_bit ( KEY_FLAG_REVOKED, & authkey -> flags ) ) dest_keyring = key_get ( authkey -> dest_keyring ) ; break ; } case KEY_REQKEY_DEFL_THREAD_KEYRING : dest_keyring = key_get ( cred -> thread_keyring ) ; if ( dest_keyring ) break ; case KEY_REQKEY_DEFL_PROCESS_KEYRING : dest_keyring = key_get ( rcu_dereference ( cred -> process_keyring ) ) ; if ( dest_keyring )",0
36,<S2SV_ModStart> create_spnego_ctx ( ) ; if ( sc == NULL ) return GSS_S_FAILURE,0
37,<S2SV_ModStart> ; if ( <S2SV_ModEnd> addr_len < sizeof <S2SV_ModStart> ( struct sockaddr_l2tpip ) || <S2SV_ModEnd> addr -> l2tp_family <S2SV_ModStart> ; if ( <S2SV_ModEnd> addr -> l2tp_family <S2SV_ModStart> -> l2tp_family!= AF_INET ) return - EINVAL ; ret = - EADDRINUSE ; read_lock_bh ( & l2tp_ip_lock ) ; if ( sk -> sk_state!= TCP_CLOSE || addr -> l2tp_addr. s_addr && chk_addr_ret!= RTN_LOCAL && chk_addr_ret!= RTN_MULTICAST && chk_addr_ret!= RTN_BROADCAST ) goto out ; ret = - EADDRNOTAVAIL ; if ( addr -> l2tp_addr. s_addr ) inet -> inet_rcv_saddr = inet -> inet_saddr = addr -> l2tp_addr. s_addr ; if ( addr -> l2tp_addr. s_addr && chk_addr_ret!= RTN_LOCAL && chk_addr_ret!= RTN_BROADCAST ) inet -> inet_saddr = addr -> l2tp_,0
38,<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline <S2SV_ModEnd> unsigned int stack_maxrandom_size <S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> unsigned int stack_maxrandom_size <S2SV_ModStart> max = ( <S2SV_ModEnd> ( - 1U <S2SV_ModStart> ) << PAGE_SHIFT <S2SV_ModEnd> ; } <S2SV_null>,0
39,"<S2SV_ModStart> ), _ ( ""Launch <S2SV_blank> anyway"" <S2SV_ModEnd> ), RESPONSE_RUN <S2SV_ModStart> ), _ ( ""Mark <S2SV_blank> as <S2SV_blank> trusted"" <S2SV_ModEnd> ), RESPONSE_MARK_TRUSTED <S2SV_ModStart> ), _ ( ""Cancel"" <S2SV_ModEnd> ), GTK_RESPONSE_CANCEL <S2SV_ModStart> ), _ ( ""Cancel"" <S2SV_ModEnd> ), GTK_RESPONSE_CANCEL <S2SV_ModStart> ), _ ( ""Cancel"" <S2SV_ModEnd> ), GTK_RESPONSE_CANCEL <S2SV_ModStart> ), _ ( ""Cancel"" <S2SV_ModEnd> ), GTK_RESPONSE_CANCEL",0
40,<S2SV_ModStart> ; tm = g_tm_localtime <S2SV_ModEnd> ( & t,0
41,"<S2SV_ModStart> strlen ( password ) ) ; if ( type == PW_PASSWORD ) { vector = ( unsigned char * ) password ; md5_init ( & md5_secret ) ; MD5Update ( & md5_secret, ( unsigned char * ) vector, strlen ( vector ) ) ; my_md5 = md5_secret ; MD5Final ( misc, & my_md5 ) ; xor ( hashed, misc, AUTH_PASS_LEN ) ; for ( i = 1 ; i < length ; i ++ ) { my_md5 = md5_secret ; MD5Update ( & my_md5, vector, AUTH_VECTOR_LEN ) ; MD5Final ( misc, & my_md5 ) ; xor ( hashed, misc, AUTH_PASS_LEN ) ; for ( i = 1 ; i < ( length >> 4 ) ; i ++ ) { my_md5 = md5_secret ; MD5Update ( & my_md5, & hashed [ ( i - 1 ) * AUTH_PASS_LEN ], AUTH_PASS_LEN ) ; MD5Final ( misc, & my_md5 ) ; xor ( hashed, misc, AUTH_PASS_LEN ) ;",0
42,"<S2SV_ModStart> int m88rs2000_frontend_attach ( struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; struct dvb_usb_device_context * ctx = d -> priv ; struct dvb_usb_device_context * ctx = adap -> priv ; struct dvb_usb_device_state * state = d -> priv ; struct dvb_usb_device_ops * ops = d -> ops ; if ( dvb_usb_generic_rw ( d -> dev, obuf, 1, ibuf, 1, 0 ) < 0 ) { err ( ""command <S2SV_blank> 0x51 <S2SV_blank> transfer <S2SV_blank> failed."" ) ; d -> fe_adap [ 0 ]. fe = dvb_attach ( m88rs2000_attach, & s421_m88rs2000_config, & d -> dev -> i2c_adap ) ; if ( d -> fe_adap [ 0 ]. fe == NULL ) return - EIO ; if ( dvb_attach ( ts2020_attach, d -> fe_adap [ 0 ]. fe, & dw2104_ts2020_config",0
43,"<S2SV_ModStart> ; struct sock * sk = transport -> asoc -> base. sk ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> sk ) ; <S2SV_ModEnd> if ( sock_owned_by_user <S2SV_ModStart> sk ) ) { <S2SV_ModEnd> pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"" <S2SV_ModStart> sk ) ; sctp_transport_put ( transport ) ; goto out_unlock ; } <S2SV_ModEnd> error = sctp_do_sm <S2SV_ModStart>, SCTP_ST_TIMEOUT ( SCTP_EVENT_TIMEOUT_HEARTBEAT ), asoc -> state, asoc -> ep, asoc, transport, GFP_ATOMIC ) ; if ( error ) <S2SV_ModEnd> asoc -> base <S2SV_ModStart> sk ) ; <S2SV_ModEnd> out_unlock : bh_unlock_sock",0
44,"<S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> options <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w -> <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\'"" <S2SV_ModEnd>, w ->",0
45,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> ) == 0 ) ; if ( <S2SV_ModEnd> cc > stride <S2SV_ModStart> stride ) == 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horAcc8"", ""%s"", ""(cc%stride)!=0"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> stride ) == 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""%s"", ""(cc%stride)!=0"", ""(cc%stride)!=0"" ) ; return 0 ;",0
46,"<S2SV_ModStart> tsample_t s ; if ( scanlinesizein < 0 ) { TIFFError ( TIFFFileName ( in ), ""Error, <S2SV_blank> can\'t <S2SV_blank> allocate <S2SV_blank> scanlinesizein <S2SV_blank> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
47,<S2SV_ModStart> ) ; struct <S2SV_ModEnd> address_space * mapping <S2SV_ModStart> hugetlb_lock ) ; <S2SV_ModEnd> hugetlb_put_quota ( mapping,0
48,"<S2SV_ModStart> pts_flag ) { if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length\\n"" ) ; return AVERROR ( EIO ) ; }",0
49,"<S2SV_ModStart> if (! e <S2SV_ModEnd> || e == <S2SV_ModStart> goto not_found ; r = parse_uid ( e + 1, & uid ) ; if ( r < 0 ) goto not_found ; machine = strndupa ( p, e - p ) ; if (! machine_name_is_valid ( machine ) ) goto not_found ; r = sd_bus_call_method ( bus, ""org.freedesktop.machine1"", ""/org/freedesktop/machine1"", ""Manager"", ""MapFromMachineUser"", & error, & reply, ""su"", ( uint32_t ) uid ) ; if ( r < 0 ) { if ( sd_bus_error_has_name ( & error, BUS_ERROR_NO_SUCH_USER_MAPPING ) ) goto not_found ; goto fail ; } r = sd_bus_message_read ( reply, ""u"", & mapped ) ; if ( r < 0 ) { if ( sd_bus_error_has_name ( & error, BUS_ERROR_NO_SUCH_USER_MAPPING ) ) goto not_found ; goto fail ; } r = sd_",0
50,"<S2SV_ModStart> void generic_pipe_buf_get ( struct pipe_inode_info * pipe, struct pipe_buffer * buf ) { if ( buf -> page ) <S2SV_ModStart> get_page ( buf <S2SV_ModEnd> ) ; }",0
51,"<S2SV_ModStart> case IV2_T_ENCR : idstr = STR_OR_ID ( t_id, encr_p_map ) ; map = NULL ; nmap = sizeof ( encr_t_map ) / sizeof ( encr_t_map ) ; break ; case IV2_T_INTEG : idstr = STR_OR_ID ( t_id, integ_p_map ) ; map = NULL ; nmap = sizeof ( integ_p_map ) ; break ; case IV2_T_DH : idstr = STR_OR_ID ( t_id, dh_p_map ) ; break ; case IV2_T_ESN : idstr = STR_OR_ID ( t_id, esn_p_map ) ; break ; case IV2_T_ESN : idstr = STR_OR_ID ( t_id, dh_p_map ) ; map = NULL ; nmap = sizeof ( dh_p_map ) / sizeof ( dh_p_map ) ; break ; case IV2_T_ESN : idstr = STR_OR_ID ( t_id, esn_p_map",0
52,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> inode, CAP_CHOWN ) ) return - EPERM ; if ( ia_valid & ATTR_GID ) &&! in_group_p ( ( ia_valid & ATTR_GID )? attr -> ia_gid : inode -> i_gid ) &&! capable_wrt_inode_gidgid ( inode, CAP_FSETID ) ) return - EPERM ; if ( ia_valid & ATTR_MTIME_SET ) { if (! inode_owner_or_capable ( inode ) ) return - EPERM ; attr -> ia_mode &= ~ S_ISGID ; } if ( ia_valid & ATTR_ATIME_SET ) { if (! inode_owner_or_capable ( inode ) ) return - EPERM ; } if ( ia_valid & ATTR_TIMES_SET ) { if (! inode_owner_or_capable ( inode ) ) return - E",0
53,"<S2SV_ModStart> NULL, & timeout ) ; if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { FD_SET ( reader -> bytes_available_fd, & read_fds ) ; return FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ; } else { if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { FD_SET ( reader -> bytes_available_fd, & read_fds ) ; if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { FD_SET ( reader -> bytes_available_fd, & read_fds ) ; return FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ; } else { if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { FD_SET ( reader -> bytes_available_fd, & read_f",0
54,"<S2SV_ModStart> wp ) { if ( 0 > wp -> config -> pm_max_requests ) { zlog ( ZLOG_ERROR, ""[pool <S2SV_blank> %s] <S2SV_blank> child <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> initialize"", wp -> config -> name ) ; exit ( FPM_EXIT_SOFTWARE ) ; }",0
55,"<S2SV_ModStart> int detect_transition_to_still ( TWO_PASS <S2SV_ModEnd> * twopass, <S2SV_ModStart> int trans_to_still = 0 ; const FIRSTPASS_STATS * position = twopass -> stats_in ; if ( frame_interval < MIN_GF_INTERVAL && loop_decay_rate >= 0.999 && last_decay_rate < 0.9 ) { int j ; const FIRSTPASS_STATS * tmp_next_frame ; for ( j = 0 ; j < still_interval ; ++ j ) { if ( EOF == input_stats ( twopass, & tmp_next_frame ) ) { if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.",0
56,<S2SV_ModStart> } if ( IS_ERR ( handle -> h_transaction ) ) { int err ; err = PTR_ERR ( handle -> h_transaction -> t_journal -> j_flags & JBD2_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
57,<S2SV_ModStart> return ret ; spin_lock ( & EXT4_I ( inode ) -> i_io_lock ) ; <S2SV_ModStart> return ret ; spin_unlock ( & EXT4_I ( inode ) -> i_io_lock,0
58,"<S2SV_ModStart> ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_rmt, tmp + sizeof ( * name_rmt ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp + sizeof ( * name_loc ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_rmt, tmp + sizeof ( * name_rmt ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, name_loc, tmp ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf",0
59,<S2SV_ModStart> alg ) { if (! try_module_get ( THIS_MODULE ) ) { return ERR_PTR ( - EFAULT ) ; } <S2SV_ModEnd> alg = crypto_alg_lookup <S2SV_ModStart> mask & CRYPTO_ALG_NEED_FALLBACK ) ) { if (! try_module_get ( THIS_MODULE ) ) { return ERR_PTR ( - EFAULT ) ; } <S2SV_ModEnd> alg = crypto_alg_lookup <S2SV_ModStart> mask & CRYPTO_ALG_NEED_FALLBACK ) ) { if (! try_module_get ( THIS_MODULE ) ) { return ERR_PTR ( - EFAULT ) ; } } <S2SV_ModEnd> alg = crypto_alg_lookup,0
60,"<S2SV_ModStart> 2 ) { ND_TCHECK_16BITS ( tptr ) ; <S2SV_ModStart> stlv_len ) ) ; if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc <S2SV_ModStart> case ISIS_SUBTLV_SPB_INSTANCE : if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc <S2SV_ModStart> case ISIS_SUBTLV_SPB_INSTANCE : stlv_len = stlv_len - ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ; if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc ; <S2SV_ModStart> case ISIS_SUBTLV_CIST_ROOT_ID : if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto trunc ; ND_TCHECK2 ( * tptr, stlv_len - ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) ; if ( stlv_len < ISIS_SUBTLV_SPB_INSTANCE_MIN_LEN ) goto",0
61,"<S2SV_ModStart> { return reply_msg ( c, MSG_JOB_TOO_BIG ) ; } if ( end_buf [ 0 ] == '\\0' ) { twarnx ( ""server <S2SV_blank> error: <S2SV_blank> "" MSG_OUT_OF_MEMORY ) ; return skip ( c, body_size + 2, MSG_OUT_OF_MEMORY ) ; }",0
62,"<S2SV_ModStart> flags ) ; memset ( & ddi, 0, sizeof ( ddi ) ) ;",1
63,"<S2SV_ModStart> ) opt ; ND_TCHECK ( opt_len ) ; <S2SV_ModStart> ) ) ; if ( opt_len == 12 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> {0x%"" PRIx64, EXTRACT_64BITS ( mpc -> sender_key ) ) ) ; if ( opt_len == 20 ) { ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> receiver_key ) ) ) ; } else { ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> receiver_key ) ) ) ; } if ( opt_len == 20 ) { ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> receiver_key ) ) ) ; } else { ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> receiver_key ) ) ) ; } if ( opt_len == 12 ) { ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( m",0
64,"<S2SV_ModStart> -> ipc_socket ; int <S2SV_ModEnd> procfd = payload <S2SV_ModStart> int fd ; uid_t <S2SV_ModEnd> new_uid ; gid_t <S2SV_ModStart> 0 ) { <S2SV_ModEnd> ERROR ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (0)"" <S2SV_ModStart> ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (0)"" ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ; } if (! ( options -> namespaces & CLONE_NEWNS ) && ( options -> attach_flags & LXC_ATTACH_REMOUNT_PROC_SYS ) ) { ret = lxc_remount_sys_proc ( ) ; if ( ret < 0 ) { SYSERROR ( ""could <S2SV_blank> not <S2SV_blank> ensure <S2SV_blank> correct <S2SV_blank> architecture"" ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ; } } # if HAVE_SYS_PERSONALITY_H if ( options -> attach_flags & LXC_ATTACH_SET_PERSONALITY ) { ret = personality ( init_ctx ->",0
65,"<S2SV_ModStart> = GIT_PKT_NG ; if ( strlen ( line ) < 3 ) { GITERR_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; return - 1 ; } <S2SV_ModStart> = '\\0' ; if ( strlen ( line ) < 3 ) { GITERR_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; return - 1 ; } <S2SV_ModStart> += 3 ; if ( strlen ( line ) > 3 ) { GITERR_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; return - 1 ; } <S2SV_ModStart> += 3 ; if ( strlen ( line ) < 3 ) { GITERR_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; return - 1 ; } if ( strlen ( line ) < 3 ) { GITERR_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; return - 1 ; } if ( strlen ( line ) > 3 ) { GITERR_set ( GITERR_NET, ""invalid <S2SV_blank> packet <S2SV_blank> line"" ) ; return - 1 ; }",0
66,<S2SV_ModStart> -> biSize >= 12U <S2SV_ModEnd> ) { header <S2SV_ModStart> ; if ( header -> biSize >= 56U ) { header -> biCompression = ( OPJ_UINT32 ) getc ( IN ) ; header -> biCompression |= ( OPJ_UINT32 ) getc ( IN ) << 8 ; header -> biWidth |= ( OPJ_UINT32 ) getc ( IN ) << 16 ; header -> biHeight |= ( OPJ_UINT32 ) getc ( IN ) << 24 ; } else { header -> biCompression = ( OPJ_UINT32 ) getc ( IN ) ; header -> biWidth |= ( OPJ_UINT32 ) getc ( IN ) << 8 ; header -> biHeight |= ( OPJ_UINT32 ) getc ( IN ) << 16 ; header -> biHeight |= ( OPJ_UINT32 ) getc ( IN ) << 24 ; header -> biPlanes = ( OPJ_UINT16 ) getc ( IN ) ; header -> biPlanes |= ( OPJ_UINT16 ) ( ( OPJ_UINT32 ) getc ( IN ) << 8 ) ; header -> biBitCount |= ( OPJ_U,0
67,<S2SV_ModStart> NULL ; } sas_destruct_devices ( port ) ;,0
68,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
69,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
70,"<S2SV_ModStart> - ENOBUFS ; } if ( copy_from_user ( & line, ifr -> ifr_settings. ifs_ifsu. sync, size ) ) return - EFAULT ;",0
71,"<S2SV_ModStart> arg ) { struct scsi_device * sdev = bd -> bd_disk -> private_data ; if ( scsi_queue_ioctl ( sdev -> request_queue, bd -> bd_disk, mode, cmd, arg ) ) return - EINVAL ; return scsi_cmd_ioctl ( sdev -> request_queue, bd -> bd_disk, mode, cmd, arg ) ;",0
72,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nego_process_negotiation_request ( rdpNego <S2SV_ModStart> <S2SV_null> <S2SV_null> BOOL <S2SV_ModEnd> nego_process_negotiation_request ( rdpNego <S2SV_ModStart> = NEGO_STATE_FINAL ; return TRUE ;,0
73,"<S2SV_ModStart> qeth_snmp_ureq * ureq ; size_t <S2SV_ModEnd> req_len ; struct <S2SV_ModStart> ) ) return - EFAULT ; ureq = memdup_user ( udata, req_len + sizeof ( struct qeth_snmp_ureq_hdr ) ) ; if ( IS_ERR ( ureq ) ) { QETH_CARD_TEXT ( card, 2, ""snmpnome"" ) ; return PTR_ERR ( ureq ) ; } qinfo. udata = kzalloc ( qinfo. udata_len, GFP_KERNEL ) ; if (! qinfo. udata ) { kfree ( qinfo. udata ) ; kfree ( ureq ) ; return - ENOMEM ; }",0
74,<S2SV_ModStart> c ) { jas_int <S2SV_ModEnd> m ; for,0
75,<S2SV_ModStart> 0 ) { if ( avio_feof ( pb ) ) return AVERROR_EOF ; <S2SV_ModStart> 0 ) { if ( avio_feof ( pb ) ) return AVERROR_EOF ; <S2SV_ModStart> 0 ) { if ( avio_feof ( pb ) ) return AVERROR_EOF ; <S2SV_ModStart> 0 ) { if ( avio_feof ( pb ) ) return AVERROR_EOF ; <S2SV_ModStart> 0 ) { if ( avio_feof ( pb ) ) return AVERROR_EOF ; },0
76,"<S2SV_ModStart> = NULL ; if (! source_package ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""could <S2SV_blank> not <S2SV_blank> resolve <S2SV_blank> source <S2SV_blank> package <S2SV_blank> strong <S2SV_blank> ref\\n"" ) ; return AVERROR_INVALIDDATA ; } if (! source_track ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""could <S2SV_blank> not <S2SV_blank> resolve <S2SV_blank> source <S2SV_blank> track <S2SV_blank> strong <S2SV_blank> ref\\n"" ) ; return AVERROR_INVALIDDATA ; } if (! source_package ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""could <S2SV_blank> not <S2SV_blank> resolve <S2SV_blank> source <S2SV_blank> package <S2SV_blank> strong <S2SV_blank> ref\\n"" ) ; return AVERROR_INVALIDDATA ; } if (! source_track ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""could <S2SV_blank> not <S2SV_blank> resolve <S2SV_blank> source <S2SV_blank> track <S2SV_blank> strong <S2SV_blank> ref\\n"" ) ; return AVERROR_INVALIDDATA ; } if (! st ) { av_log ( mxf -> fc, AV_LOG_ERROR, ""could <S2SV_blank> not <S2SV_blank> resolve <S2SV_blank> stream <S2SV_blank> strong <S2SV_blank> ref\\n"" ) ; return AVERROR_INVALIDDATA ;",0
77,"<S2SV_ModStart> 1 ; } ret = mount_entry_on_generic_nolock <S2SV_ModEnd> ( mntent,",0
78,<S2SV_ModStart> + 10 ; <S2SV_ModEnd> return 1 ; <S2SV_ModStart> return 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
79,"<S2SV_ModStart> += jnx_ext_len ; if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ; <S2SV_ModStart> += jnx_ext_len ; if ( ndo -> ndo_eflag > 1 ) ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ; <S2SV_ModStart> ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ; if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, ""none"",",0
80,<S2SV_ModStart> return NF_STOLEN ; kfree_skb ( skb ) ;,0
81,"<S2SV_ModStart> * up ; int err ; * replay_esn = NULL ; * preplay_esn = NULL ; <S2SV_ModStart> rta ) ; err = kmemdup ( up, xfrm_replay_state_esn_len ( up ), GFP_KERNEL ) ; if ( err ) return err ; up = nla_data ( rta ) ; if (! up ) { kfree ( p ) ; return - ENOMEM ; } p = kmemdup ( up, xfrm_replay_state_esn_len ( up ), GFP_KERNEL ) ; if (! p ) return - ENOMEM ; err = kmemdup ( up, xfrm_replay_state_esn_len ( up ), GFP_KERNEL ) ; if ( err ) return err ;",0
82,<S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> switch ( io <S2SV_ModStart> EIO ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
83,<S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ; <S2SV_ModStart> : { result = 0.0 <S2SV_ModEnd> ; break ;,0
84,<S2SV_ModStart> ) ) ; if ( ret < 0 ) { btif_storage_free_bonded_device ( remote_bd_addr ) ; return BT_STATUS_FAIL ; } <S2SV_ModStart> ) ) ; if ( ret < 0 ) { btif_storage_free_bonded_device ( remote_bd_addr ) ; return BT_STATUS_FAIL ; },0
85,"<S2SV_ModStart> ( buf = jas_calloc <S2SV_ModEnd> ( bufsize, <S2SV_ModStart> ) ) ) { abort ( ) ; } if (! jas_safe_size_mul3 ( bufsize, sizeof ( jpc_fix_t ), a, stride ) ) { abort ( ) ; } if (! jas_safe_size_mul3 ( bufsize, sizeof ( jpc_fix_t ), a, stride ) ) { abort ( ) ; } if (! jas_safe_size_mul3 ( bufsize, sizeof ( jpc_fix_t ) ) ) { abort ( ) ; } if (! jas_safe_size_mul3 ( bufsize, sizeof ( jpc_fix_t ), a, stride ) ) { abort ( ) ; } if (! jas_safe_size_mul3 ( bufsize, sizeof ( jpc_fix_t ), a, stride ) ) ) { abort ( ) ; } if (! jas_safe_size_mul3 ( bufsize, sizeof ( jpc_fix_t ) ) ) ) { abort ( ) ; } if (! jas_safe_size_mul3 ( buf",0
86,<S2SV_ModStart> vpx_codec_err_t res ; vpx_codec_enc_cfg_map_t <S2SV_ModEnd> * map ; <S2SV_ModStart> = VPX_CODEC_INVALID_PARAM ; if (! iface -> enc. cfg_maps ) return VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else { res = VPX_CODEC_INVALID_PARAM ; if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INCAPABLE ; else if (! ( iface -> caps & VPX_CODEC_CAP_ENCODER ) ) res = VPX_CODEC_INVALID,0
87,"<S2SV_ModStart> size ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""GSO <S2SV_blank> size <S2SV_blank> must <S2SV_blank> not <S2SV_blank> be <S2SV_blank> zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u. gso. type == XEN_NETIF_GSO_TYPE_TCPV6 ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Bad <S2SV_blank> GSO <S2SV_blank> type <S2SV_blank> %d.\\n"", gso -> u. gso. type ) ; return - EINVAL ; }",0
88,"<S2SV_ModStart> * object, <S2SV_ModEnd> const char * <S2SV_ModStart> const char * last <S2SV_ModEnd>, void * <S2SV_ModStart> * data ) { <S2SV_ModEnd> int bitmap_pos ; <S2SV_ModStart>. hash ) ; <S2SV_ModEnd> bitmap_pos = ext_index_add_object <S2SV_ModStart> name ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
89,"<S2SV_ModStart> ; newparity = term_get_parity ( tty_fd, NULL ) ; if ( newparity!= opts. parity ) { fd_printf ( STO, ""\\r\\n*** <S2SV_blank> parity: <S2SV_blank> (%d) <S2SV_blank> ***\\r\\n"", opts. parity ) ; } else if ( newparity!= opts. parity ) { fd_printf ( STO, ""\\r\\n*** <S2SV_blank> parity: <S2SV_blank> (%d) <S2SV_blank> ***\\r\\n"", opts. parity ) ; } else { newparity = term_get_parity ( tty_fd, NULL ) ; if ( newparity!= opts. parity ) { fd_printf ( STO, ""\\r\\n*** <S2SV_blank> parity: <S2SV_blank> (%d) <S2SV_blank> ***\\r\\n"", opts. parity ) ; } else if ( newparity!= opts. parity ) { fd_printf ( STO, ""\\r\\n*** <S2SV_blank> parity: <S2SV_blank> (%d) <S2SV_blank> ***\\r\\n"", opts. parity ) ; } else { newparity = term_get_parity ( tty_fd, NULL ) ; }",0
90,<S2SV_ModStart> mixer ) { if ( mixer -> users ) kfree ( mixer -> users ) ;,0
91,"<S2SV_ModStart> type_flags ) { struct packet_rollover * rollover = NULL ; struct <S2SV_ModStart> EINVAL ; } mutex_lock ( & fanout_mutex ) ; err = - EINVAL ; if ( type == PACKET_FANOUT_ROLLOVER || ( type_flags & PACKET_FANOUT_FLAG_ROLLOVER ) ) { err = - EALREADY ; goto out ; } <S2SV_ModStart> - EALREADY ; <S2SV_ModEnd> if ( type <S2SV_ModStart> ) ) { rollover = kzalloc ( sizeof ( * rollover ), GFP_KERNEL ) ; if (! rollover ) <S2SV_ModEnd> return - ENOMEM <S2SV_ModStart> - ENOMEM ; <S2SV_ModEnd> atomic_long_set ( & <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> atomic_long_set ( & <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_huge <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> atomic_long_set ( & <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_failed <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } match =",0
92,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; np = rcu_dereference_protected ( newnp -> ipv6_opt, sock_owned_by_user ( sk ) ) ; if ( np ) memcpy ( newnp, np, sizeof ( struct ipv6_pinfo )",0
93,<S2SV_ModStart> ) ; } kfree ( table ) ;,1
94,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void show_progress ( int frame_in, int frame_out, uint64_t dx_time ) { if ( frame_in!= frame_out ) printf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out ) ; else printf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out ) ;",0
95,"<S2SV_ModStart> ; if ( imp_sth -> num_rows > imp_sth -> num_cols ) { do_error ( sth, JW_ERR_SEQUENCE, ""num_rows <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", imp_sth -> num_cols ) ; return Nullav ; }",0
96,"<S2SV_ModStart> ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_ETXSTL, LSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_ETXSTH, MSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteBuffer ( interface, buffer, offset ) ; enc28j60WriteBuffer ( interface, buffer, offset ) ; enc28j60WriteReg ( interface, ENC28J60_ETXNDL, LSB ( ENC28J60_TX_BUFFER_START + length ) ) ; enc28j60WriteReg ( interface, ENC28J60_ETXNDH, MSB ( ENC28J60_TX_BUFFER_START + length )",0
97,"<S2SV_ModStart> ; value = ast2obj_int ( o -> lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_",0
98,"<S2SV_ModStart> ( page && ( access ( page, R_OK ) == 0 ) <S2SV_ModStart> ) ) { if ( access ( page, R_OK ) == 0 ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } <S2SV_ModEnd> } } else <S2SV_ModStart> ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } } else if ( access ( page, R_OK ) == 0 ) { if ( access ( page, R_OK ) == 0 ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } } else if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return ; } } else if ( access ( page, R_OK ) == 0 ) { if ( access ( page, R_OK ) == 0 ) { http_response_printf ( res, ""success"" ) ; http_response_send",0
99,"<S2SV_ModStart> path ) ; ret = ext4_split_unwritten_extents ( handle, inode, path, iblock, max_blocks, flags ) ; if ( ret < 0 ) { ext4_set_inode_state ( inode, EXT4_STATE_DIO_UNWRITTEN ) ; goto out ; } if ( flags == EXT4_GET_BLOCKS_PRE_IO ) { ret = ext4_split_unwritten_extents ( handle, inode, path, iblock, max_blocks, flags ) ; if ( io ) io -> flag = EXT4_IO_UNWRITTEN ; else ext4_set_inode_state ( inode, EXT4_STATE_DIO_UNWRITTEN ) ; goto out ; } if ( flags & EXT4_GET_BLOCKS_CONVERT ) { ret = ext4_convert_unwritten_extents_endio ( handle, inode, path ) ; if ( ret >= 0 ) ext4_update_inode_fsync_trans ( handle, inode, 1 ) ; goto out2 ; } if ( ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) ==",0
100,"<S2SV_ModStart> 0 ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 6)"" ) ) ; return 0 ; } <S2SV_ModStart> 2 ) ; if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 6)"" ) ) ; return 0 ; } <S2SV_ModStart> 2 ) ; if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 6)"" ) ) ; return 0 ; } <S2SV_ModStart> 2 ) ; if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 6)"" ) ) ; return 0 ; } ND_TCHECK2 ( * p + 6, 6 ) ; if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 6)"" ) ) ; return 0 ; } ND_TCHECK2 ( * p + 6 ), 6 ) ; if (",0
101,"<S2SV_ModStart> ) ) { if ( fc_may_access ( fc, controller, cgroup, NULL, O_RDONLY ) ) { ret = - EACCES ; goto out ; } sb -> st_mode = S_IFDIR | 00555 ; sb -> st_nlink = 2 ; ret = 0 ; goto out ; } if ( caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { sb -> st_mode = S_IFDIR | 00555 ; sb -> st_nlink = 2 ; ret = 0 ; goto out ; } if (! fc_may_access ( fc, controller, cgroup, NULL, O_RDONLY ) ) { sb -> st_mode = S_IFDIR | 00555 ; sb -> st_nlink = 2 ; ret = 0 ; goto out ; } if ( caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { sb -> st_mode = S_IFDIR | 00555 ; sb -> st_nlink = 2 ; goto out ; } if (! fc_may_access ( fc, controller, cgroup, NULL, O_RDONLY ) ) {",0
102,"<S2SV_ModStart>, int flag, vpx_bit_depth_t bit_depth <S2SV_ModStart> ; int mb_rows = source -> mb_rows ; int mb_cols = source -> mb_cols ; unsigned char * limits <S2SV_ModEnd> = cm -> <S2SV_ModStart> pp_limits_buffer ; ; int mbr, mbc ; ( void ) post ; ( void ) low_var_thresh ; ( void ) flag ; memset ( limits, ( unsigned char ) ppl, 16 * mb_rows ) ; for ( mbr = 0 ; mbr < mb_rows ; mbr ++ ) { vpx_post_proc_down_and_across_mb_row ( source -> y_buffer + 16 * mbr * source -> y_stride, source -> y_stride, source -> y_width, limits, 16 ) ; vpx_post_proc_down_and_across_mb_row ( source -> u_buffer + 16 * mbr * source -> uv_stride, source -> uv_stride, source -> uv_stride, source -> uv_width, limits, 16 ) ; vpx_post_proc_down_and_across_mb_row ( source -> v_buffer +",0
103,"<S2SV_ModStart> ptr ) { if ( ( ptr -> flags & FD_RAW_READ ) && ptr -> buffer_length ) { long length = ptr -> buffer_length ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if ( ret ) return ret ; param += length ; } else if ( ( ptr -> flags & FD_RAW_WRITE ) && ptr -> buffer_length ) { if ( ptr -> length >= 0 && ptr -> length <= ptr -> buffer_length ) { ret = fd_copyout ( ptr -> data, ptr -> kernel_data, ptr -> length ) ; if ( ret ) return ret ; } } else if ( ( ptr -> flags & FD_RAW_READ ) && ptr -> buffer_length ) { if ( ptr -> length >= 0 && ptr -> length <= ptr -> buffer_length ) { ret = fd_copyout ( ptr -> data, ptr -> kernel_data, ptr -> length ) ; if ( ret ) return ret ; } else { ret = fd_copyout ( ptr -> kernel_data, ptr -> length ) ; if ( ret ) return ret ; } }",0
104,"<S2SV_ModStart> : if ( issecure ( SECURE_NOROOT ) && ( new -> euid!= old -> uid || new -> egid!= old -> gid ||! cap_issubset ( new -> cap_permitted, old -> cap_permitted ) ) && bprm -> unsafe & ~ LSM_UNSAFE_PTRACE_CAP ) { new -> euid = new -> uid ; new -> egid = new -> gid ; } else if ( ( new -> euid!= old -> uid || new -> egid!= old -> gid ||! cap_issubset ( new -> cap_permitted, old -> cap_permitted ) ) && bprm -> unsafe & ~ LSM_UNSAFE_PTRACE_CAP ) { if (! capable ( CAP_SETUID ) ) { new -> euid = new -> uid ; new -> egid = new -> gid ; } new -> suid = new -> fsuid = new -> euid ; new -> sgid = new -> fsgid = new -> fsgid ; } else { new -> suid = new -> fsuid = new -> euid ; new -> sgid = new -> fsgid ; } new",0
105,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; <S2SV_ModEnd> ce = mb_cache_entry_alloc <S2SV_ModStart> ; error = mb2_cache_entry_insert ( ext4_mb_cache, <S2SV_ModEnd> bh -> b_bdev <S2SV_ModStart> bh -> b_blocknr <S2SV_ModEnd>, hash ) <S2SV_ModStart> error ) { <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> } } <S2SV_null>",0
106,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
107,"<S2SV_ModStart> ; tf = ( ( c == LUA_SIGNATURE [ 0 ] )? luaU_undump : luaY_parser ) ( L, p -> z,",0
108,<S2SV_ModStart> ; int err ; if ( protocol < 0 || protocol >= IPPROTO_MAX ) return - EINVAL,1
109,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> struct ip_options_rcu <S2SV_ModEnd> * ip_options_get_from_user ( <S2SV_ModStart> optlen ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> if ( optlen && copy_from_user ( & opt -> __data, data, optlen ) ) { kfree ( opt ) ; return - EFAULT ; } return ip_options_get_finish ( net, optp, opt, optlen ) ; } <S2SV_null>",0
110,"<S2SV_ModStart> ; dl = kmalloc_array <S2SV_ModEnd> ( size,",0
111,<S2SV_ModStart> trunc : return ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
112,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> rpki_rtr_pdu_print ( netdissect_options <S2SV_ModStart> * tptr, u_int <S2SV_ModEnd> indent ) { <S2SV_ModStart> * msg ; if ( <S2SV_ModEnd> pdu_header -> pdu_type <S2SV_ModStart> case RPKI_RTR_END_OF_DATA_PDU : ND_TCHECK2 ( * tptr, pdu_len ) ; hexdump = FALSE ; ND_PRINT ( ( ndo, ""%sRPKI-RTRv%u, <S2SV_blank> %s <S2SV_blank> PDU <S2SV_blank> (%u), <S2SV_blank> length: <S2SV_blank> %u)"", indent_string ( 8 ), pdu_header -> version, pdu_header -> version ) ) ; switch ( pdu_type ) { case RPKI_RTR_SERIAL_NOTIFY_PDU : case RPKI_RTR_SERIAL_QUERY_PDU : case RPKI_RTR_RESET_QUERY_PDU : case RPKI_RTR_RESET_PDU : case RPKI_RTR_CACHE_RESET_PDU : break ; case RPKI_RTR_",0
113,"<S2SV_ModStart> struct rose_facilities_struct facilities ; unsigned <S2SV_ModStart> = NULL ; <S2SV_ModEnd> len = ( <S2SV_ModStart> ; if ( <S2SV_ModEnd>! rose_parse_facilities ( <S2SV_ModStart> + len + 4, & facilities ) ) { rose_transmit_clear_request ( neigh, lci, ROSE_INVALID_FACILITY, 76 ) ; return 0 ; } sk = rose_find_listener ( & facilities. source_addr, & facilities. source_call ) ; if ( sk == NULL || sk_acceptq_is_full ( sk ) || ( make = rose_make_new ( sk ) ) == NULL ) { rose_transmit_clear_request ( neigh, lci, ROSE_NETWORK_CONGESTION, 120 ) ; return 0 ; } sk -> sk_state = TCP_LISTEN ; if ( sk_acceptq_is_full ( sk ) || ( make = rose_make_new ( sk ) ) == NULL || ( make = rose_make_new ( sk ) ) == NULL || ( make = rose_make_new ( sk ) ) == NULL ) { rose_transmit_clear_",0
114,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; addr,1
115,"<S2SV_ModStart> ) ) ; if ( * gvarp == NULL ) { errmsg = ( char_u * ) N_ ( ""E529: <S2SV_blank> Cannot <S2SV_blank> set <S2SV_blank> \'global\' <S2SV_blank> to <S2SV_blank> null"" ) ; } else if ( * gvarp == NULL ) { errmsg = ( char_u * ) N_ ( ""E529: <S2SV_blank> Cannot <S2SV_blank> set <S2SV_blank> \'global\' <S2SV_blank> to <S2SV_blank> null"" ) ; } else if ( * gvarp == NULL ) { errmsg = ( char_u * ) N_ ( ""E529: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'global\' <S2SV_blank> to <S2SV_blank> null"" ) ; } else if ( * gvarp == NULL ) { errmsg = ( char_u * ) N_ ( ""E529: <S2SV_blank> Cannot <S2SV_blank> set <S2SV_blank> \'global\' <S2SV_blank> to <S2SV_blank> null"" ) ; } else if ( * gvarp == NULL ) { errmsg = ( char_u * ) N_ ( ""E529: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'global\' <S2SV_blank> to <S2SV_blank> null"" ) ; } else if ( * gvarp == NULL ) { errmsg = ( char_u * ) N_ ( ""E529: <S2SV_blank> Cannot <S2SV_blank> change <S2SV_blank> \'global\' <S2SV_blank>",0
116,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode",0
117,"<S2SV_ModStart> ) ; struct o2nm_cluster * <S2SV_ModEnd> cluster = to_o2nm_cluster_from_node <S2SV_ModStart> ; } write_lock ( & cluster -> cl_nodes_lock ) ; if ( test_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_",0
118,"<S2SV_ModStart> case BSD_AFNUM_ISO : if (! ndo -> ndo_eflag ) null_hdr_print ( ndo, family, length, caplen ) ; if (! ndo -> ndo_eflag ) null_hdr_print ( ndo, family, length, caplen ) ; <S2SV_ModStart> case BSD_AFNUM_APPLETALK : atalk_print ( ndo, p, length ) ; break ; case BSD_AFNUM_IPX : ipx_print ( ndo, p, length ) ; break ; if (! ndo -> ndo_eflag ) null_hdr_print ( ndo, family, length + NULL_HDRLEN ) ; if (! ndo -> ndo_eflag ) null_hdr_print ( ndo, family, length + NULL_HDRLEN ) ; if (! ndo -> ndo_eflag ) null_hdr_print ( ndo, family, length + NULL_HDRLEN ) ; if (! ndo -> ndo_eflag ) null_hdr_print ( ndo, family, length + NULL_HDRLEN ) ;",0
119,"<S2SV_ModStart> '/' ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NODOTDOT ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> contains <S2SV_blank> \'..\'"" ) ; return ( ARCHIVE_FAILED ) ; } } for ( ; ; ) { if ( src [ 0 ] == '\\0' ) { break ; } else if ( src [ 0 ] == '.' ) { if ( src [ 1 ] == '/' ) { src += 3 ; continue ; } else if ( src [ 1 ] == '/' ) { src += 3 ; continue ; } else if ( src [ 2 ] == '\\0' ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NODOTDOT ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> contains <S2SV_blank> \'..\'"" ) ; return ( ARCHIVE_FAILED ) ; } } else if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NODOTDOT ) { archive_set_error ( & a -> archive, ARCHIVE_ERR",0
120,"<S2SV_ModStart> TPM_RC tpm_kdfa ( TSS2_SYS_CONTEXT * sapi_context <S2SV_ModEnd>, TPMI_ALG_HASH hashAlg <S2SV_ModStart> resultKey ) { TPM2B_DIGEST tmpResult ; TPM2B_DIGEST tpm2bLabel, tpm2bBits, tpm2b_i_2 ; UINT8 * tpm2bBitsPtr = & tpm2bBits. t. buffer [ 0 ] ; UINT8 * tpm2b_i_2Ptr = & tpm2b_i_2. t. buffer [ 0 ] ; UINT8 * tpm2bBitsPtr = & tpm2bBits. t. buffer [ 0 ] ; UINT32 bitsSwizzled = string_bytes_endian_convert_32 ( bits ) ; * ( UINT32 * ) tpm2bBitsPtr = bitsSwizzled ; for ( i = 0 ; i < tpm2bLabel. t. size ; i ++ ) { i_Swizzled = string_bytes_endian_convert_32 ( i ) ; * ( UINT32 * ) tpm2b_i_2Ptr = i_Sw",0
121,"<S2SV_ModStart> size_t size ; if ( width < 0 || height < 0 || hstep <= 0 || vstep <= 0 ) { goto error ; } if ( jas_safe_intfast32_add ( tlx, width, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ||! jas_safe_intfast32_add ( tlx, tly, hstep, 0 ) ||! jas_safe_intfast32_add ( tlx, tly, hstep, 0 ) ||! jas_safe_intfast32_add ( tly, vstep, 0 ) ) { goto error ; } if (! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ) { goto error ; }",0
122,<S2SV_ModStart> s ) { if ( s < 0 ) return ( NULL ) ;,0
123,"<S2SV_ModStart> ; if ( WARN_ON_ONCE (! mutex_is_locked ( & rcd -> mutex ) ) ) { ret = - EACCES ; goto bail ; } ucmd = ( const struct qib_cmd __user * ) data ; if ( copy_from_user ( & cmd. type, & ucmd -> type, sizeof ( cmd. type ) ) ) { ret = - EFAULT ; goto bail ; }",0
124,<S2SV_ModStart> ; MATLAB_KO : quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
125,<S2SV_ModStart> peer ) get_net ( net <S2SV_ModEnd> ) ; spin_unlock_bh,0
126,<S2SV_ModStart> ++ ; } if ( i < ( int ) header_buf_used && <S2SV_ModStart> ++ ; } if ( i < ( int ) header_buf_used && <S2SV_ModStart> ++ ) { if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\n' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\r' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\n' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\r' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\n' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\n' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\r' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] ==,0
127,"<S2SV_ModStart> ( mcastaddr, sizeof ( mcastaddr ) <S2SV_ModEnd> ) && POKE_UINT16 <S2SV_ModStart> ( mcastaddr, sizeof ( mcastaddr ) <S2SV_ModEnd> ) && POKE_UINT16 <S2SV_ModStart> ( mcastaddr, sizeof ( mcastaddr ) <S2SV_ModEnd> ) && POKE_UINT16 <S2SV_ModStart> ( mcastaddr, sizeof ( mcastaddr ) <S2SV_ModEnd> ) && POKE_UINT16 <S2SV_ModStart> ( mcastaddr, sizeof ( mcastaddr ) <S2SV_ModEnd> ) && POKE_UINT16 <S2SV_ModStart> ( mcastaddr, sizeof ( mcastaddr ) <S2SV_ModEnd> ) && POKE_UINT16 <S2SV_ModStart> ( mcastaddr, sizeof ( mcastaddr ) <S2SV_ModEnd> ) && POKE_UINT16 <S2SV_ModStart> ( mcastaddr, sizeof ( mcastaddr ) <S2SV_ModEnd> ) && POKE_UINT16 <S2SV_ModStart> ( mcastaddr, sizeof ( mcastaddr ) <S2SV_ModEnd> ) && POKE_UINT16",0
128,<S2SV_ModStart> && flags & FLAG_LAST_MATCHED <S2SV_ModEnd> ) { flags <S2SV_ModStart> &= ~ FLAG_LAST_MATCHED ; pc += asn1_op_lengths [ op ] ; if ( unlikely ( dp + asn1_op_lengths [ op ] > datalen ) ) { pc += asn1_op_lengths [ op ] ; flags &= ~ FLAG_LAST_MATCHED ; pc += asn1_op_lengths [ op ] ; goto next_op ; } if ( unlikely ( dp + asn1_op_lengths [ op ] > datalen ) ) { flags &= ~ FLAG_LAST_MATCHED ; pc += asn1_op_lengths [ op ] ; goto next_op ; } if ( unlikely ( dp + asn1_op_lengths [ op ] > datalen ) ) { pc += asn1_op_lengths [ op ] ; flags &= ~ FLAG_LAST_MATCHED ; pc += asn1_op_lengths [ op ] ; goto next_op ; } if ( unlikely ( dp + asn1_op_lengths [ op ] > datalen ) ) { flags &= ~ FLAG_LAST_MATCHED ; pc += asn1_op_lengths [ op ] ; goto next,0
129,"<S2SV_ModStart> = 0 ; if ( sk -> sk_protocol!= IPPROTO_UDP ) { pr_debug ( ""%s: <S2SV_blank> sk:%p\\n\\t <S2SV_blank> %s\\n\\t <S2SV_blank> %s\\n\\t <S2SV_blank> %s\\n\\t <S2SV_blank> %s\\n\\t <S2SV_blank> %s\\n\\t <S2SV_blank> %s\\n\\t <S2SV_blank> %s\\n\\t <S2SV_blank> %s\\n\\t <S2SV_blank> %s\\n\\t <S2SV_blank> %s\\n\\t\\n\\t\\n\\t\\t <S2SV_blank> %s\\n\\t <S2SV_blank> %s\\n\\t <S2SV_blank> %s\\n\\t <S2SV_blank> %s\\n\\t <S2SV_blank> %s\\n\\t <S2SV_blank> %s\\n\\t <S2SV_blank> %s\\n\\t <S2SV_blank> %s\\n\\t <S2SV_blank> %s\\n\\t <S2SV_blank> %s\\n\\t <S2SV_blank> %s\\n\\t <S2SV_blank> %s\\n\\t <S2SV_blank> %s\\n\\t <S2SV_blank> %s\\n\\t\\n\\t\\n\\t <S2SV_blank> %s\\n\\t <S2SV_blank> %s\\n\\t <S2SV_blank> %s\\n\\t <S2SV_blank> %s\\n\\t <S2SV_blank> %s\\n\\t",0
130,"<S2SV_ModStart> int mpeg4_decode_profile_level ( MpegEncContext <S2SV_ModEnd> * s, <S2SV_ModStart> 4 ) ; if ( s -> avctx -> profile == 0 && s -> avctx -> level == 8 ) { s -> avctx -> profile = 0 ; s -> avctx -> level = 0 ; } else if ( s -> avctx -> profile == 0 && s -> avctx -> level == 8 ) { s -> avctx -> profile = 0 ; s -> avctx -> level = 0 ; } else { s -> avctx -> profile = 0 ; s -> avctx -> level = 0 ; }",0
131,"<S2SV_ModStart> + MIDQ_DATA_BUFF ; readw ( mpu -> dev -> MIDQ + JQS_wTail )!= readw ( mpu -> dev -> MIDQ + JQS_wHead ) ) { u16 wTmp ; val = readw ( pwMIDQData + 2 * readw ( mpu -> dev -> MIDQ + JQS_wHead ) ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_",0
132,"<S2SV_ModStart> rule ) ; if ( result < 0 ) { security_filter_rule_destroy ( entry -> lsm [ lsm_rule ]. rule ) ; return result ; } result = security_filter_rule_init ( entry -> lsm [ lsm_rule ]. type, Audit_equal, args, & entry -> lsm [ lsm_rule ]. rule ) ; if ( result < 0 ) { security_filter_rule_destroy ( entry -> lsm [ lsm_rule ]. rule ) ; return result ; }",0
133,<S2SV_ModStart> file ) ; <S2SV_ModEnd> file_free ( file,1
134,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
135,"<S2SV_ModStart> "" <S2SV_blank> <S2SV_blank> <S2SV_blank> var <S2SV_blank> targetOrigin <S2SV_blank> = <S2SV_blank> \'%s\';\\n"" "" <S2SV_blank> <S2SV_blank> var <S2SV_blank> message <S2SV_blank> = <S2SV_blank> \'%s\';\\n"" <S2SV_ModEnd> "" <S2SV_blank> <S2SV_blank> var <S2SV_blank> win <S2SV_blank> = <S2SV_blank> window.parent.document.getElementById(\'%s\').contentWindow;\\n"" "" <S2SV_blank> <S2SV_blank> var <S2SV_blank> targetOrigin <S2SV_blank> = <S2SV_blank> \'%s\';\\n"" <S2SV_ModStart> "" <S2SV_blank> <S2SV_blank> var <S2SV_blank> timerID <S2SV_blank> = <S2SV_blank> setInterval(\'checkSession()\', <S2SV_blank> %s);\\n"" <S2SV_ModEnd> ""\\n"" "" <S2SV_blank> <S2SV_blank> if <S2SV_blank> (e.origin <S2SV_blank>!== <S2SV_blank> targetOrigin <S2SV_blank> ) <S2SV_blank> {\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> console.debug(\'receiveMessage: <S2SV_blank> cross-site <S2SV_blank> scripting <S2SV_blank> attack?\');\\n"" <S2SV_ModStart> "" <S2SV_blank> <S2SV_blank> console.debug(\'receiveMessage: <S2SV_blank> cross-site <S2SV_blank> scripting <S2SV_blank> attack?\');\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> if <S2SV_blank> (e.origin <S2SV_blank>!== <S2SV_blank> targetOrigin <S2SV_blank> ) <S2SV_blank> {\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> console.debug(\'receiveMessage: <S2SV_blank> cross-site <S2SV_blank> scripting <S2SV_blank> attack?\');\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> console.debug(\'receiveMessage: <S2SV_blank> cross-site",0
136,"<S2SV_ModStart> req, size_t <S2SV_ModEnd> acl_len ) { <S2SV_ModStart> * acl_len = 0 ; struct kvec * iov = req -> rq_rcv_buf. head <S2SV_ModEnd> ; int status <S2SV_ModStart> int status ; if ( ( status = decode_op_hdr ( xdr, OP_GETACL ) )!= 0 ) goto out ; if ( ( status = decode_attr_bitmap ( xdr, bitmap ) )!= 0 ) goto out ; if ( ( status = decode_attr_length ( xdr, & attrlen, & savep ) )!= 0 ) goto out ; if ( unlikely ( bitmap [ 0 ] & FATTR4_WORD0_ACL ) ) { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" <S2SV_ModEnd> "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen <S2SV_ModStart> recvd ) { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" <S2SV_ModEnd> "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen, recvd ) ; return - EINVAL ; } x",0
137,<S2SV_ModStart> ; if ( unlikely ( unfrag_ip6hlen > INT_MAX / frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen > INT_MAX / frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen > INT_MAX / frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen > INT_MAX / frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen > INT_MAX / frag_hdr_sz > INT_MAX / frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen > INT_MAX / frag_hdr_sz ) ) { if ( unlikely ( unfrag_ip6hlen > INT_MAX / frag_hdr_sz ) ) { if ( unfrag_ip6hlen > INT_MAX / frag_hdr_sz ) { if ( unfrag_ip6hlen > INT_MAX / frag_hdr_sz ) { if ( unfrag_ip6hlen > INT_MAX / frag_hdr_sz ) { if ( unfrag_ip6hlen > INT,0
138,<S2SV_ModStart> ( i < <S2SV_ModEnd> to_read ) ),0
139,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
140,"<S2SV_ModStart> ; for ( plane = 0 ; plane < 4 && in -> data [ plane ] ; plane ++ ) { const int width = ( plane == 1 || plane == 2 )? FF_CEIL_RSHIFT ( inlink -> w, s -> hsub ) : inlink -> w ; const int height = ( plane == 1 || plane == 2 )? FF_CEIL_RSHIFT ( inlink -> h, s -> vsub ) : inlink -> h ; step = s -> max_step [ plane ] ; outrow = out -> data [ plane ] ; inrow = in -> data [ plane ] + ( width - 1 ) * step ; for ( i = 0 ; i < height ; i ++ ) { uint16_t * outrow16 = ( uint16_t * ) outrow ; uint16_t * inrow16 = ( uint16_t * ) inrow ; for ( j = 0 ; j < width ; j ++ ) outrow16 [ j ] = inrow16 [ - j ] ; for ( j = 0 ; j < width ; j ++ ) outrow16 [ j ] = in",0
141,"<S2SV_ModStart> '/' ) { if ( strlen ( pszFileName ) < 5 ) { inst_logPushMsg ( __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; }",0
142,"<S2SV_ModStart> ) ) { if ( snumber ( * owner ) ) { uid = ( int ) stoi ( owner ) ; } else if ( smatch ( * owner, ""APPWEB"" ) ) { uid = HTTP -> uid ; } else { uid = 0 ; } } if ( owner && * owner ) { if ( snumber ( owner ) ) { uid = ( int ) stoi ( owner ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { uid = HTTP -> uid ; } else { uid = userToID ( owner ) ; } } if ( group && snumber ( group ) ) { gid = ( int ) stoi ( group ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { gid = groupToID ( group ) ; } } if ( perms && snumber ( perms ) ) { if ( snumber ( perms ) ) { gid = ( int ) stoiradix ( perms, - 1, NULL ) ; } else { gid = 0 ; } } if ( perms && snumber ( perms ) ) { mode = ( int ) stoiradix ( perms, - 1, NULL ) ; } else { mode = 0 ; }",0
143,<S2SV_ModStart> = CDF_TOLE4 ( q <S2SV_ModEnd> -> sh_entries ) <S2SV_ModStart> = CDF_TOLE4 ( q <S2SV_ModEnd> -> sh_entries ) <S2SV_ModStart> = CDF_TOLE4 ( q <S2SV_ModEnd> -> sh_entries ) <S2SV_ModStart> = CDF_TOLE4 ( q <S2SV_ModEnd> -> sh_entries ) <S2SV_ModStart> = CDF_TOLE4 ( q <S2SV_ModEnd> -> sh_entries <S2SV_ModStart> = CDF_TOLE4 ( q <S2SV_ModEnd> -> sh_entries <S2SV_ModStart> = CDF_TOLE4 ( q <S2SV_ModEnd> -> sh_entries <S2SV_ModStart> = CDF_TOLE4 ( q <S2SV_ModEnd> -> sh_entries <S2SV_ModStart> = CDF_TOLE4 ( q <S2SV_ModEnd> -> sh_entries <S2SV_ModStart> = CDF_TOLE4 ( q <S2SV_ModEnd> -> sh_entries <S2SV_ModStart> = CDF_TOLE4 ( q <S2SV_ModEnd> -> sh_entries <S2SV_ModStart> = CDF_TOLE4 ( q <S2SV_ModEnd> -> sh_entries ) <S2SV_ModStart> = CDF_TOLE4 ( q <S2SV_ModEnd> -> sh_entries <S2SV_ModStart> = CDF_TOLE4 ( q <S2SV_ModEnd> -> sh_entries <S2SV_ModStart> = CDF_TOLE4 ( q <S2SV_ModEnd> -> sh_entries <S2SV_ModStart> = CDF_TOLE4 ( q <S2SV_ModEnd> -> sh_entries <S2SV_ModStart> = CDF_TOLE4 ( q <S2SV_ModEnd> -> sh_entries <S2SV_ModStart> = CDF_TOLE4 ( q <S2SV_ModEnd> ->,0
144,<S2SV_ModStart> ; if ( inet -> inet_opt && inet -> inet_opt -> opt. <S2SV_ModEnd> srr ) daddr,0
145,"<S2SV_ModStart> ) ) { pr_err ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" <S2SV_ModEnd> ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,0
146,"<S2SV_ModStart> ) ) ; if ( eigrp_tlv_len!= eigrp_tlv_len ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", eigrp_tlv_len ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( eigrp_tlv_len!= eigrp_tlv_tlen ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", eigrp_tlv_len ) ) ; return ; } <S2SV_ModStart> ( ndo, ""EIGRP <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", eigrp_tlv_len ) ) ; if ( eigrp_tlv_len!= eigrp_tlv_tlen ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", eigrp_tlv_len ) ) ; return ; }",0
147,"<S2SV_ModStart> ; # if CONFIG_MEM_MANAGER int number_aau ; if ( vpx_mm_create_heap_memory ( ) < 0 ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> create <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ; ) } number_aau = ( ( size + align - 1 + ADDRESS_STORAGE_SIZE ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) + 1 ; if ( addr < 0 ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ; ) }",0
148,"<S2SV_ModStart> int res ; unsigned<extra_id_1>long long export_index_table [ SQUASHFS_LOOKUP_BLOCKS ( sBlk. s. inodes ) + 1 <S2SV_ModEnd> ] ; long <S2SV_ModStart> long long export_index_table [ SQUASHFS_LOOKUP_BLOCKS ( sBlk. s. inodes ) + 1 <S2SV_ModEnd> ] ; res <S2SV_ModStart> long long export_index_table [ SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ) ] ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } res = read_fs_bytes ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } SQUASHFS_INSWAP_LOOKUP_BLOCKS ( export_index_table, indexes",0
149,"<S2SV_ModStart> ) ; } if ( memchr ( ptr, '/', strlen ( ptr ) - 1 ) == NULL ) { rw_exit ( & sdvp -> sdev_contents ) ; devzvol_create_pool_dirs ( dvp ) ; rw_enter ( & sdvp -> sdev_contents, RW_READER ) ; return ( devname_readdir_func ( dvp, uiop, cred, eofp, 0 ) ) ; } ptr = strchr ( ptr + 1, '/' ) ; rw_exit ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ; sdev_iter_datasets ( dvp, ZFS_IOC_DATASET_LIST_NEXT, ptr ) ; rw_enter ( & sdvp -> sdev_contents ) ;",0
150,<S2SV_ModStart> |= EXT4_GET_BLOCKS_PRE_IO ; split_flag |= inode -> i_sb -> s_blocksize_bits <S2SV_ModStart> |= EXT4_EXT_MARK_UNINIT2 ; split_flag |= inode -> i_sb -> s_blocksize_bits - inode -> i_sb -> s_blocksize_bits <S2SV_ModStart> |= EXT4_GET_BLOCKS_PRE_IO ; split_flag |= inode -> i_sb -> s_blocksize_bits - inode -> i_sb -> s_blocksize_bits - inode -> i_sb -> s_blocksize_bits <S2SV_ModStart> |= EXT4_GET_BLOCKS_PRE_IO ; split_flag |= inode -> i_sb -> s_blocksize_bits - inode -> i_sb -> s_blocksize_bits - inode -> i_sb -> s_blocksize_bits - inode -> i_sb -> s_blocksize_bits - inode -> i_sb -> s_blocksize_bits <S2SV_ModStart> inode -> i_sb -> s_blocksize_bits - inode -> i_sb -> s_blocksize_bits <S2SV_ModEnd> ; return ext4_split_extent,0
151,"<S2SV_ModStart> HASH_DISABLED ; } else return apr_psprintf ( cmd -> pool, ""ModSecurity: <S2SV_blank> Invalid <S2SV_blank> value <S2SV_blank> for <S2SV_blank> SecRuleEngine: <S2SV_blank> %s"" <S2SV_ModEnd>, p1 )",0
152,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
153,"<S2SV_ModStart> = 0.0 ; uint32 nstrips = 0 ; uint32 ntiles = 0 ; uint16 <S2SV_ModEnd> planar = 0 <S2SV_ModStart> = 0 ; nstrips = 0 ; <S2SV_ModStart> = 0 ; ntiles = 0 ; <S2SV_ModStart> = 0 ; nstrips = 0 ; <S2SV_ModStart> = 0 ; nstrips = 0 ; ntiles = 0 ; <S2SV_ModStart> = 0 ; nstrips = 0 ; ntiles = 0 ; <S2SV_ModStart> = 0 ; nstrips = 0 ; ntiles = 0 ; if (! TIFFGetField ( in, TIFFTAG_NSTRIPS, & nstrips ) ) TIFFError ( ""loadImage"", ""Image <S2SV_blank> lacks <S2SV_blank> nstrips <S2SV_blank> tag"" ) ; if (! nstrips ) TIFFError ( ""loadImage"", ""Image <S2SV_blank> lacks <S2SV_blank> nstrips <S2SV_blank> tag"" ) ; if (! ntiles ) TIFFError ( ""loadImage"", ""Image <S2SV_blank> lacks <S2SV_blank> ntiles <S2SV_blank> tag"" ) ; if (! nstrips ) TIFFError ( ""loadImage"", ""Image <S2SV_blank> lacks <S2SV_blank> nstrips <S2SV_blank> tag"" ) ) TIFFError ( ""loadImage"", ""Image <S2SV_blank> lacks <S2SV_blank> ntiles <S2SV_blank> tag"" ) ; if (",0
154,"<S2SV_ModStart> = 0 ; # if CONFIG_VP8_ENCODER if ( global -> codec -> name == ""vp8"" ) { ctrl_args = vp8_args ; ctrl_args_map = vp8_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp9"" ) == 0 ) { ctrl_args = vp9_args ; ctrl_args_map = vp9_arg_ctrl_map ; # endif <S2SV_ModStart> } else if (! strcmp ( * argj, ""--"" ) ) { eos_mark_found = 1 ; continue ; } else if ( arg_match ( & arg, & outputfile, argi ) ) { config -> out_fn = arg. val ; } else if ( arg_match ( & arg, & fpf_name, argi ) ) { config -> stats_fn = arg. val ; } else if ( arg_match ( & arg, & use_ivf, argi ) ) { config -> write_webm = 1 ; } else if ( arg_match ( & arg, & use_ivf, argi ) ) { config -> write_webm = 0 ; } else",0
155,"<S2SV_ModStart> ; if (! the_authctxt -> valid ) fatal ( ""server_input_global_request: <S2SV_blank> no/invalid <S2SV_blank> user"" ) ;",0
156,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
157,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
158,"<S2SV_ModStart> goto errout ; } memset ( & gr -> gr_ctx, 0, sizeof ( gss_union_ctx_id_desc ) ) ;",0
159,"<S2SV_ModStart> = 0 ; size_t ext_size = 0 ; <S2SV_ModStart> out ; } ext_size = sizeof ( EXT4_I ( inode ) -> i_data ) ; memset ( bh -> b_data + ext_size, 0, inode -> i_sb -> s_blocksize - ext_size ) ; <S2SV_ModStart> out ; } neh = ext_block_hdr ( bh ) ; if ( ext_depth ( inode ) ) neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block_idx ( inode, 0 ) ) ; else neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block ( inode, 0 ) ) ; else neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block ( inode, 0 ) ) ; neh = ext_block_hdr ( bh ) ; if ( ext_depth ( inode ) ) neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block_idx ( inode, 0 ) ) ; else neh -> eh_max = cpu_to_le16 ( ext4_ext",0
160,"<S2SV_ModStart> } if ( <S2SV_ModEnd> verify_checks ( c <S2SV_ModStart> callback_ctx ) ) { SSL_SESSION * sess = SSL_get1_session ( c -> ssl ) ; if (! sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } } if ( sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, ( void * ) ( - 1 ) ) ; SSL_SESSION_free ( sess ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } } <S2SV_ModEnd> return 0 ;",0
161,"<S2SV_ModStart> ; int ret ; if ( kuid_has_mapping ( parent_ns, owner ) || kgid_has_mapping ( parent_ns, group ) ) return - EPERM",0
162,"<S2SV_ModStart> ; if ( memcmp <S2SV_ModEnd> ( cmac,",0
163,"<S2SV_ModStart> AVERROR_INVALIDDATA ; } <S2SV_ModEnd> c -> nreslevels2decode <S2SV_ModStart> = 1 ; if ( c -> nreslevels2decode >= c -> nreslevels ) { av_log ( s -> avctx, AV_LOG_ERROR, ""nreslevels2decode <S2SV_blank> is <S2SV_blank> invalid\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModEnd> c -> log2_cblk_width <S2SV_ModStart> ; c -> log2_cblk_height ; c -> log2_cblk_width = ( bytestream2_get_byteu ( & s -> g ) & 15 ) + 2 ; if ( c -> log2_cblk_width + c -> log2_cblk_height > 12 ) { avpriv_request_sample ( s -> avctx, ""cblk <S2SV_blank> size <S2SV_blank> invalid\\n"" ) ; return AVERROR_PATCHWELCOME ; } if ( c -> log2_cblk_width > 6 || c -> log2_cblk_height > 6 ) { avpriv_request_sample ( s -> avctx, ""cblk <S2SV_blank> size <S2SV_blank> invalid\\n"" ) ; return A",0
164,"<S2SV_ModStart> CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> CVAR_LATCH ) ; if ( COM_CompareExtension ( s_alDriver -> string, "".pk3"" ) ) { Com_Printf ( ""Rejecting <S2SV_blank> DLL <S2SV_blank> named <S2SV_blank> \\""%s\\"""", s_alDriver -> string ) ; return qfalse ; }",1
165,<S2SV_ModStart> ts_status ; bool is_drop_n_account <S2SV_ModEnd> ; BUILD_BUG_ON ( <S2SV_ModStart> is_drop_n_account = false ; if ( skb -> ip_summed == CHECKSUM_PARTIAL ) status |= TP_STATUS_CSUMNOTREADY ; else if ( skb -> ip_summed == CHECKSUM_COMPLETE || skb_csum_unnecessary ( skb ) ) status |= TP_STATUS_CSUM_VALID ; else if ( skb -> ip_summed == CHECKSUM_COMPLETE ) status |= TP_STATUS_CSUM_VALID ; if ( skb -> pkt_type == PACKET_OUTGOING ) { if ( skb -> ip_summed == CHECKSUM_PARTIAL ) status |= TP_STATUS_CSUMNOTREADY ; else if ( skb -> ip_summed == CHECKSUM_COMPLETE || skb_csum_unnecessary ( skb ) ) status |= TP_STATUS_CSUM_VALID ; } else if ( skb -> ip_summed == CHECKSUM_COMPLETE ) status |= TP_STATUS_CSUM_VALID ; else if ( skb -> ip_summed == CHECKSUM_,0
166,"<S2SV_ModStart> SCTP_STATE_ESTABLISHED ) { if (! sctp_assoc_lookup_paddr ( new, & trans -> ipaddr ) ) { sctp_assoc_rm_peer ( asoc, trans ) ; continue ; } sctp_ssnmap_clear ( asoc -> ssnmap ) ; sctp_ulpq_flush ( & asoc -> ulpq ) ; asoc -> overall_error_count = 0 ; } else { list_for_each_entry ( trans, & new -> peer. transport_addr_list, transports ) { if (! sctp_assoc_lookup_paddr ( asoc, & trans -> ipaddr ) ) { sctp_assoc_rm_peer ( asoc, trans ) ; continue ; } if (! sctp_assoc_lookup_paddr ( asoc, & trans -> ipaddr ) ) { sctp_assoc_rm_peer ( asoc, trans ) ; } else { list_for_each_entry ( trans, & new -> peer. transport_addr_list, transports ) { if (! sctp_assoc_lookup_paddr ( asoc, & trans -> ip",0
167,<S2SV_ModStart> return false ; if ( len < ndp_msg_type_info ( msg_type ) -> raw_struct_size ) return false ;,0
168,"<S2SV_ModStart> int procfd, int on_exec, int <S2SV_ModEnd> lsm_label ) { <S2SV_ModStart> ( name, ""nop"" ) == 0 ) goto out ; if ( strcmp ( name, ""none"" ) == 0 ) goto out ; if ( strcmp ( name, ""AppArmor"" ) == 0 ) on_exec = 0 ; if ( on_exec ) { labelfd = openat ( procfd, ""self/attr/exec"", O_RDWR ) ; } else { labelfd = openat ( procfd, ""self/attr/current"", O_RDWR ) ; } if ( labelfd < 0 ) { SYSERROR ( ""Unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> LSM <S2SV_blank> label"" ) ; ret = - 1 ; goto out ; } size = sprintf ( command, ""changeprofile <S2SV_blank> %s"", lsm_label ) ; if ( size < 0 ) { SYSERROR ( ""Failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> apparmor <S2SV_blank> profile"" ) ; ret = - 1 ; goto out ; } if ( write ( labelfd, command, size + 1 ) < 0 ) { SYSERROR ( ""Unable <S2SV_blank> to <S2SV_blank> set <S2SV_blank> LSM <S2SV_blank> label"" ) ; ret",0
169,<S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32 <S2SV_ModStart> += ( OPJ_UINT32 ) <S2SV_ModEnd> ( ( OPJ_UINT32,0
170,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
171,"<S2SV_ModStart> cpi ) { <S2SV_ModEnd> const uint64_t bits_used <S2SV_ModStart> ; if ( <S2SV_ModEnd> cpi -> common <S2SV_ModStart> KEY_FRAME ) { cpi -> twopass. gf_group_bits += cpi -> rc. this_frame_target - bits_used ; } else { cpi -> twopass. gf_group_bits -= bits_used ; cpi -> twopass. gf_group_bits = MAX ( cpi -> twopass. gf_group_bits, 0 ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
172,"<S2SV_ModStart> charlen ; } curqlevel = tmpql = ( lquery_level * ) palloc0 ( ITEMSIZE * num ) ; if ( ISALNUM ( ptr ) ) { GETVAR ( curqlevel ) = lptr = ( nodeitem * ) palloc0 ( sizeof ( nodeitem ) * ( numOR + 1 ) ) ; lptr -> start = ptr + 1 ; state = LQPRS_WAITOPEN ; else UNCHAR ; } else if ( charlen == 1 && t_iseq ( ptr, '!' ) ) { GETVAR ( curqlevel ) = lptr = ( nodeitem * ) palloc0 ( sizeof ( nodeitem ) * ( numOR + 1 ) ) ; lptr -> start = ptr + 1 ; state = LQPRS_WAITDELIM ; curqlevel -> flag |= LQL_NOT ; hasnot = true ; } else if ( charlen == 1 && t_iseq ( ptr, '!' ) ) { GETVAR ( curqlevel ) = lptr = ( nodeitem * ) palloc0 ( sizeof ( nodeitem ) * ( numOR + 1 ) ) ; lptr -> start = ptr + 1 ; state = LQPRS",0
173,"<S2SV_ModStart> * header, <S2SV_ModEnd> struct mb_cache_entry * <S2SV_ModStart> * pce ) { struct mb2_cache_entry * ce ; struct mb2_cache * ext4_mb_cache = EXT4_GET_MB_CACHE ( inode ) ; if (! header -> h_hash ) return NULL ; <S2SV_ModStart> hash ) ; ce = mb2_cache_entry_find_first ( ext4_mb_cache, inode -> i_sb -> s_bdev, hash ) ; while ( ce ) { bh = sb_bread ( inode -> i_sb, ce -> e_block ) ; if (! bh ) { EXT4_ERROR_INODE ( inode, ""block <S2SV_blank> %lu <S2SV_blank> read <S2SV_blank> error"", ( unsigned long ) ce -> e_block ) ; break ; } bh = sb_bread ( inode -> i_sb, ce -> e_block ) ; if (! bh ) { EXT4_ERROR_INODE ( inode, ""block <S2SV_blank> %lu <S2SV_blank> read <S2SV_blank> error"", ( unsigned long ) ce -> e_block ) ; } else if ( le32_to_cpu ( BHDR ( bh ) -> h_refcount ) >= EXT4_",0
174,"<S2SV_ModStart> data_offset ) { gchar <S2SV_ModEnd> line [ COSINE_LINE_LENGTH <S2SV_ModStart> offset ; int pkt_len = parse_cosine_rec_hdr ( & wth -> phdr, line, err, err_info ) ; if ( pkt_len == - 1 ) return FALSE ; <S2SV_ModStart> ; return parse_cosine_hex_dump <S2SV_ModEnd> ( wth -> <S2SV_ModStart>, pkt_len, <S2SV_ModEnd> wth -> frame_buffer <S2SV_ModStart> wth -> frame_buffer <S2SV_ModEnd>, err, <S2SV_ModStart>, err_info ) <S2SV_ModEnd> ; } <S2SV_null>",0
175,<S2SV_ModStart> = line_end ; <S2SV_ModEnd> error = add_push_report_pkt,1
176,"<S2SV_ModStart> ) ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } if ( <S2SV_ModStart> left > 0 && SSL3_RT_HEADER_LENGTH > rb -> len - rb -> offset ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } len = s -> packet_length ; if ( len + left > rb -> len - rb -> offset ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } if ( len + left > n ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } if ( len + left > rb -> len - rb -> offset ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ; return - 1 ; } if ( len + left > rb -> len - rb -> offset ) { SSLerr ( SSL_F_SSL3_READ_N, ERR_R_INTERNAL_ERROR ) ;",0
177,"<S2SV_ModStart> ) break ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> ) break ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> ) break ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries ) ThrowReaderException ( CorruptImageError, ""Im",0
178,"<S2SV_ModStart> - ENOMEM ; ret = - EINVAL ; if ( hdr. size_in > size ) { ret = - EINVAL ; goto out ; } if ( <S2SV_ModStart> size_in ) ) { vbg_debug ( ""%s: <S2SV_blank> too <S2SV_blank> much <S2SV_blank> output <S2SV_blank> data <S2SV_blank> %zu <S2SV_blank> > <S2SV_blank> %zu\\n"", __func__, returned_size, size ) ; ret = - EFAULT ; goto out ; } if ( hdr. size_out > size ) { vbg_debug ( ""%s: <S2SV_blank> too <S2SV_blank> much <S2SV_blank> output <S2SV_blank> data <S2SV_blank> %zu <S2SV_blank> > <S2SV_blank> %zu\\n"", __func__, returned_size, size ) ; ret = - EINVAL ; goto out ; } if ( hdr. size_out < size ) { vbg_debug ( ""%s: <S2SV_blank> too <S2SV_blank> much <S2SV_blank> output <S2SV_blank> data <S2SV_blank> %zu <S2SV_blank> > <S2SV_blank> %zu\\n"", __func__, returned_size, size ) ; ret = - EINVAL ; goto out ; } if ( hdr. size_out < size ) { vbg_debug ( ""%s: <S2SV_blank> too <S2SV_blank> much <S2SV_blank> output <S2SV_blank> data <S2SV_blank> %z",0
179,<S2SV_ModStart> int hstartcol ; if ( numrows < 2 ) { abort ( ) ; } hstartcol = ( numrows + 1 - parity ) >> 1 ; n = numrows - hstartcol ; dstptr = buf ; srcptr = & a [ hstartcol * stride ] ; while ( n -- > 0 ) { dstptr2 = dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { dstptr2 = dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = buf,0
180,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
181,"<S2SV_ModStart> EOFOp 0x08 <S2SV_ModEnd> char magick [ <S2SV_ModStart> ReadBlob ( image, <S2SV_ModEnd> 2, ( <S2SV_ModStart> ReadBlob ( image, <S2SV_ModEnd> 2, ( <S2SV_ModStart> ReadBlob ( image, <S2SV_ModEnd> 2, ( <S2SV_ModStart> ReadBlob ( image, <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> ReadBlob ( image, <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> ReadBlob ( image, <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> ReadBlob ( image, <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> ReadBlob ( image, <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> ReadBlob ( image, <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> ReadBlob ( image, <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> ReadBlob ( image, <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> ReadBlob ( image, <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> ReadBlob ( image, <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> ReadBlob ( image, <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> ReadBlob ( image, <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> ReadBlob ( image, <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> ReadBlob ( image, <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> ReadBlob ( image, <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> ReadBlob ( image, <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> ReadBlob ( image, <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> ReadBlob ( image, <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> ReadBlob ( image, <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> ReadBlob ( image, <S2SV_ModEnd> 2 ) ; <S2SV_ModStart> ReadBlob ( image, <S2SV_ModEnd> 2 ) ; <S2SV_ModStart>",0
182,"<S2SV_ModStart> DQUOT_LIMITS_ENABLED ) ; if ( sb -> s_flags & MS_RDONLY ) { struct ext2_super_block * es = sbi -> s_es ; spin_lock ( & sbi -> s_lock ) ; es -> s_state = cpu_to_le16 ( sbi -> s_mount_state ) ; ext2_sync_super ( sb, es, 1 ) ; }",0
183,"<S2SV_ModStart> err_free_buf ; } if ( usbinterface -> num_altsetting < 1 ) { dev_err ( & usbinterface -> dev, ""No <S2SV_blank> endpoints <S2SV_blank> for <S2SV_blank> this interface\\n"" ) ; error = - ENODEV ; goto err_free_devs ; } dev_dbg ( & usbinterface -> dev, ""gtco <S2SV_blank> # <S2SV_blank> interfaces: <S2SV_blank> %d\\n"", usbinterface -> num_altsetting ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc",0
184,"<S2SV_ModStart> ) ; } if ( asprintf ( & fname, ""/run/firejail/network/%d-netmap"", ( int ) pid ) == - 1 ) errExit ( ""asprintf"" ) ;",0
185,<S2SV_ModStart> node ) { if ( node -> nd_item. ci_parent ) { return to_o2nm_cluster ( node -> nd_item. ci_parent -> ci_parent ) ; } else { return NULL ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
186,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModStart>, stateid, fmode <S2SV_ModEnd> ) ; write_seqlock",0
187,"<S2SV_ModStart> ; if ( avio_read_bit ( pb ) < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> bit <S2SV_blank> rate <S2SV_blank> in <S2SV_blank> MV1 <S2SV_blank> stream"" ) ; return AVERROR ( EINVAL ) ; } <S2SV_ModStart> ; if ( avio_read_bit ( pb ) < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> bit <S2SV_blank> rate <S2SV_blank> in <S2SV_blank> MV1 <S2SV_blank> stream"" ) ; return AVERROR ( EINVAL ) ; } <S2SV_ModStart> ; if ( avio_read_bit ( pb ) < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> bit <S2SV_blank> rate <S2SV_blank> in <S2SV_blank> MV1 <S2SV_blank> stream"" ) ; return AVERROR ( EINVAL ) ; } <S2SV_ModStart> ; if ( avio_read_bit ( pb ) < 0 ) { av_log ( avctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> bit <S2SV_blank> rate <S2SV_blank> in <S2SV_blank> MV1 <S2SV_blank> stream"" ) ; return AVERROR ( EINVAL ) ; }",0
188,<S2SV_ModStart> = CDF_TOLE4 ( q <S2SV_ModEnd> -> sh_entries ) <S2SV_ModStart> = CDF_TOLE4 ( q <S2SV_ModEnd> -> sh_entries ) <S2SV_ModStart> = CDF_TOLE4 ( q <S2SV_ModEnd> -> sh_entries ) <S2SV_ModStart> = CDF_TOLE4 ( q <S2SV_ModEnd> -> sh_entries ) <S2SV_ModStart> = CDF_TOLE4 ( q <S2SV_ModEnd> -> sh_entries <S2SV_ModStart> = CDF_TOLE4 ( q <S2SV_ModEnd> -> sh_entries <S2SV_ModStart> = CDF_TOLE4 ( q <S2SV_ModEnd> -> sh_entries <S2SV_ModStart> = CDF_TOLE4 ( q <S2SV_ModEnd> -> sh_entries <S2SV_ModStart> = CDF_TOLE4 ( q <S2SV_ModEnd> -> sh_entries <S2SV_ModStart> = CDF_TOLE4 ( q <S2SV_ModEnd> -> sh_entries <S2SV_ModStart> = CDF_TOLE4 ( q <S2SV_ModEnd> -> sh_entries <S2SV_ModStart> = CDF_TOLE4 ( q <S2SV_ModEnd> -> sh_entries ) <S2SV_ModStart> = CDF_TOLE4 ( q <S2SV_ModEnd> -> sh_entries <S2SV_ModStart> = CDF_TOLE4 ( q <S2SV_ModEnd> -> sh_entries <S2SV_ModStart> = CDF_TOLE4 ( q <S2SV_ModEnd> -> sh_entries <S2SV_ModStart> = CDF_TOLE4 ( q <S2SV_ModEnd> -> sh_entries <S2SV_ModStart> = CDF_TOLE4 ( q <S2SV_ModEnd> -> sh_entries <S2SV_ModStart> = CDF_TOLE4 ( q <S2SV_ModEnd> ->,0
189,<S2SV_ModStart> protostats ) ; <S2SV_ModEnd> filegen_register ( statsdir <S2SV_ModStart> cryptostats ) ; <S2SV_ModEnd> step_callback = & <S2SV_ModStart> timingstats ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
190,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart>, dir ) ) == NULL ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; }",0
191,<S2SV_ModStart>. prev ) ; <S2SV_ModEnd> touch_mnt_namespace ( n,0
192,"<S2SV_ModStart> next ) ; if ( unlikely ( next -> es | prev -> es ) ) loadsegment ( es, next -> es ) ; if ( unlikely ( next -> ds | prev -> ds ) ) loadsegment ( ds, next -> ds ) ; if ( unlikely ( fsindex | next -> fsindex | prev -> fs ) ) { loadsegment ( fs, next -> fsindex ) ; if ( fsindex ) prev -> fs = 0 ; } if ( unlikely ( gsindex | next -> gsindex | prev -> gs ) ) { loadsegment ( gs, next -> gsindex ) ; if ( gsindex ) prev -> gs = 0 ; } if ( next -> fs ) wrmsrl ( MSR_FS_BASE, next -> fs ) ; prev -> fsindex = fsindex ; if ( unlikely ( gsindex | next -> gsindex | prev -> gs ) ) { loadsegment ( gs, next -> gsindex ) ; if ( gsindex ) prev -> gs = 0 ; } if ( next -> gs ) wrmsrl ( MSR_KERNEL_GS_BASE, next -> gs ) ; prev -> gsindex = gsindex ; if ( next ->",0
193,<S2SV_ModStart> dd ) ; <S2SV_ModEnd> } } <S2SV_null>,1
194,<S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; },0
195,<S2SV_ModStart> << NM_VECTOR ) | <S2SV_ModEnd> ( 1u <<,0
196,"<S2SV_ModStart> sfsname ) { if ( strlen ( sfsname ) > NFSX_V3FHMAX ) { ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> too <S2SV_blank> long"" ) ) ; return ; } <S2SV_ModStart> 1 ] ; if ( strlen ( temp ) > NFSX_V3FHMAX ) { ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> too <S2SV_blank> long"" ) ) ; return ; } <S2SV_ModStart> = '\\0' ; spacep = strchr ( temp,'<S2SV_blank>') ; if ( spacep ) * spacep = '\\0' ; if ( spacep ) * spacep = '\\0' ; ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %s/"", temp ) ) ; } else { if ( strlen ( temp ) > NFSX_V3FHMAX ) { ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> too <S2SV_blank> long"" ) ) ; return ; }",0
197,"<S2SV_ModStart> int transhdrlen, unsigned int <S2SV_ModEnd> flags ) { <S2SV_ModStart> = SKB_GSO_UDP ; if ( skb_is_gso ( skb ) ) { struct frag_hdr fhdr ; <S2SV_ModStart> = SKB_GSO_UDP ; ipv6_select_ident ( & fhdr ) ; skb_shinfo ( skb ) -> ip6_frag_id = fhdr. identification ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_UDP ; skb_shinfo ( skb ) -> gso_type = SKB_GSO_UDP ; skb_shinfo ( skb ) -> gso_size = ( mtu - fragheaderlen - sizeof ( struct frag_hdr ) ) & ~ 7 ; skb_shinfo ( skb ) -> ip6_frag_id = fhdr. identification ; __skb_queue_tail ( & sk -> sk_write_queue, skb ) ; return 0 ; }",0
198,"<S2SV_ModStart> res ) goto fail <S2SV_ModEnd> ; res = <S2SV_ModStart> goto fail ; res = register_netdevice ( hsr_dev ) ; if ( res ) goto fail <S2SV_ModEnd> ; res = <S2SV_ModStart> goto fail ; res = hsr_add_port ( hsr, slave [ 0 ], HSR_PT_SLAVE_A ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, slave [ 1 ], HSR_PT_SLAVE_B ) ; if ( res ) goto fail <S2SV_ModEnd> ; mod_timer ( <S2SV_ModStart> goto fail ; res = hsr_add_port ( hsr, slave [ 0 ], HSR_PT_SLAVE_C ) ; if ( res ) goto fail <S2SV_ModEnd> ; mod_timer ( <S2SV_ModStart> goto fail ; res = hsr_add_port ( hsr, slave [ 1 ], HSR_PT_SLAVE_C ) ; if ( res ) goto fail <S2SV_ModEnd> ; res =",0
199,"<S2SV_ModStart> ++ ; } if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; }",0
200,"<S2SV_ModStart> void vp9_setup_dst_planes ( <S2SV_ModEnd> MACROBLOCKD * xd <S2SV_ModStart> int mi_col ) { const uint8_t * const buffers [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; int i ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y <S2SV_ModEnd> ) ; }",0
201,"<S2SV_ModStart> ++ ) ; if (! xdr_decode_hyper ( p, & args -> count ) ) return 0 ; hdr = ( void * ) p - head -> iov_base ; dlen = XDR_QUADLEN ( hdr ) * 4 ; if ( dlen < XDR_QUADLEN ( len ) * 4 ) return 0 ; if ( dlen < XDR_QUADLEN ( len ) * 4 ) return 0 ; if ( dlen > max_blocksize ) { args -> count = max_blocksize ; len = max_blocksize ; }",0
202,"<S2SV_ModStart> * ctxt, struct desc_struct * old, struct x86_emulate_ops * ops ) { struct x86_emulate_ops * ops = ctxt -> ops ; <S2SV_ModStart> -> op_bytes ) { case 1 : ops -> assign_eip_near ( ctxt, old, dst ) ; break ; case 2 : ops -> assign_eip_near ( ctxt, old, dst ) ; break ; case 4 : ops -> assign_eip_near ( ctxt, old, dst ) ; break ; default : WARN ( 1, ""unsupported <S2SV_blank> eip <S2SV_blank> assignment <S2SV_blank> size\\n"" ) ; } <S2SV_ModStart> } } <S2SV_null> <S2SV_null>",0
203,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
204,"<S2SV_ModStart> ; remaining = <S2SV_ModEnd> tvb_captured_length_remaining ( tvb <S2SV_ModStart> offset ) ; if ( remaining <= 0 ) { if ( data ) * data = g_strdup ( """" ) ; return offset ; } text = tvb_get_string_enc ( NULL, tvb, offset, remaining, ENC_UTF_16 | ENC_LITTLE_ENDIAN ) ; len = ( int ) strlen ( text ) ; proto_tree_add_string ( tree, hf_name, tvb, offset, len * 2, text",0
205,"<S2SV_ModStart> == READ ) { struct ocfs2_dinode * ip = OCFS2_I ( inode ) ; if ( OCFS2_I ( inode ) -> ip_dyn_features & OCFS2_INLINE_DATA_FL ) get_block = ocfs2_dio_get_block_nolock ; else get_block = ocfs2_dio_get_block_nolock <S2SV_ModStart> == READ ) ip = OCFS2_I ( inode ) -> ip_dyn_features & OCFS2_INLINE_DATA_FL ; if (! ocfs2_supports_append_dio ( osb ) ) return 0 ; return __blockdev_direct_IO ( iocb, inode, ip -> i_sb -> s_bdev, iter, get_block, NULL, 0 ) ; }",0
206,<S2SV_ModStart> return rc ; <S2SV_ModEnd> copied = skb,1
207,"<S2SV_ModStart> ( f, ""%79s <S2SV_blank> %[^\\n]\\n"" <S2SV_ModEnd>, def,",0
208,<S2SV_ModStart> ( int ) <S2SV_ModEnd> val < 0,0
209,"<S2SV_ModStart> len ; len = get_line_size ( * b, * avail, nl ) ; if ( len >= 0 ) len += tested ;",0
210,"<S2SV_ModStart> n ) { <S2SV_ModEnd> int all_whitespace = <S2SV_ModStart> ; int kind <S2SV_ModEnd> ; void * <S2SV_ModStart> ; PyCompilerFlags cf <S2SV_ModEnd> ; char * <S2SV_ModStart> char * str <S2SV_ModEnd> ; PyObject * <S2SV_ModStart> * o, * fstring_name ; Py_ssize_t len <S2SV_ModStart> ; o = PyUnicode_DecodeUTF8 ( expr_start, expr_end - expr_start, NULL ) ; if ( o == NULL ) return NULL ; len = expr_end - expr_start ; kind = PyUnicode_GET_KIND ( o ) ; data = PyUnicode_DATA ( o ) ; for ( i = 0 ; i < len ; i ++ ) { if (! PyUnicode_ISSPACE ( PyUnicode_READ ( kind, data, i ) ) ) { all_whitespace = 0 ; break ; } } <S2SV_ModEnd> str [ 0 <S2SV_ModStart> + 1 ] = '(' ; memcpy ( str + 2, expr_start, len ) ; str [ len + 2 ] = 0 ; cf. cf_flags = PyCF_ONLY_AST ; fstring_name = PyUnicode_FromString ( ""<fstring>"" ) ; Py_DECREF ( fstring_name ) ; Py_DECREF ( fstring",0
211,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
212,<S2SV_ModStart> string ) { <S2SV_ModEnd> while ( c,0
213,"<S2SV_ModStart> == 0 ) { if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) <S2SV_ModStart> KEY_FLAG_NEGATIVE, & key -> flags ) ; else set_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ; }",0
214,"<S2SV_ModStart> len ) ; if (! net_read_exact ( s, arg, * len ) ) { printf ( ""PLEN <S2SV_blank> %d <S2SV_blank> type <S2SV_blank> %d <S2SV_blank> len <S2SV_blank> %d\\n"", plen, nh. nh_type ) ; return - 1 ; }",0
215,"<S2SV_ModStart> XFS_ATTR_INCOMPLETE ) continue ; <S2SV_ModEnd> xfs_attr3_leaf_name_local_t * name_loc <S2SV_ModStart> XFS_ATTR_LOCAL ) { xfs_attr_leaf_name_remote_t * name_loc = xfs_attr3_leaf_name_remote ( leaf, i ) ; retval = context -> put_listent ( context, entry -> flags, name_loc -> nameval, ( int ) name_loc -> namelen ) ; retval = context -> put_listent ( context, entry -> flags, name_loc -> namelen, ( int ) name_loc -> namelen ) ; } else if ( xfs_attr3_leaf_name_remote ( leaf, i ) -> flags & XFS_ATTR_LOCAL ) { xfs_attr_leaf_name_remote_t * name_loc = xfs_attr3_leaf_name_remote ( leaf, i ) ; retval = context -> put_listent ( context, entry -> flags, name_loc -> namelen, ( int ) name_loc -> namelen, ( int ) name_loc -> namelen ) ; } else",0
216,"<S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> if ( COMPAT_USE_64BIT_TIME <S2SV_ModStart> ) mmsg, vlen, flags | MSG_CMSG_COMPAT, ( struct timespec * ) get_compat_timespec ( & ktspec, timeout ) ) return - EFAULT ; if ( get_compat_timespec ( & ktspec, timeout ) ) return - EFAULT ; datagrams = __sys_recvmmsg ( fd, ( struct mmsghdr __user * ) mmsg, vlen, flags | MSG_CMSG_COMPAT, & ktspec ) ; if ( datagrams > 0 && put_compat_timespec ( & ktspec, timeout ) ) return - EFAULT ;",0
217,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
218,"<S2SV_ModStart> ) ; netdev_tx_t <S2SV_ModEnd> ret ; assert <S2SV_ModStart> ; ret = <S2SV_ModEnd> hns_nic_net_xmit_hw ( ndev <S2SV_ModStart> skb, & tx_ring_data <S2SV_ModEnd> ( priv, <S2SV_ModStart> ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats. tx_bytes += skb -> len ; } return ( netdev_tx_t ) ret <S2SV_ModEnd> ; } <S2SV_null>",0
219,<S2SV_ModStart> |= MSG_TRUNC ; <S2SV_ModEnd> lock_sock ( sk,1
220,"<S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL <S2SV_ModEnd>, TEMP",0
221,"<S2SV_ModStart> RAnalOp next_op ; if ( len <= op -> size ) { avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; } else if ( len <= op -> size ) { avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, buf + op -> size, len - op -> size, cpu ) ; } else if ( len <= op -> size ) { avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, len - op -> size, cpu ) ; }",0
222,<S2SV_ModStart> size ) ; <S2SV_ModEnd> return FALSE ;,0
223,"<S2SV_ModStart> data ) { <S2SV_ModEnd> char * repo_config <S2SV_ModStart> ; } repo_config = perf_pathdup ( ""/etc/perfconfig"" ) ; if (! access ( repo_config, R_OK ) ) { ret += perf_config_from_file ( fn, repo_config, data ) ; found += 1 ; } free ( repo_config ) ;",0
224,"<S2SV_ModStart> int validate_event ( struct perf_event_hw * hw_events <S2SV_ModEnd>, struct perf_event <S2SV_ModStart> event ) { <S2SV_ModEnd> struct arm_pmu * <S2SV_ModStart> ( event -> <S2SV_ModEnd> pmu!= leader_pmu <S2SV_ModStart> ( event -> <S2SV_ModEnd> state < PERF_EVENT_STATE_OFF <S2SV_ModStart> state < PERF_EVENT_STATE_OFF <S2SV_ModEnd> ) return 1 <S2SV_ModStart> return 1 ; if ( event -> state == PERF_EVENT_STATE_OFF &&! event -> attr. enable_on_exec ) return 1 ; if ( event -> state == PERF_EVENT_STATE_OFF &&! event -> attr. enable_on_exec ) return 1 ; if ( event -> state == PERF_EVENT_STATE_OFF &&! event -> attr. enable_on_exec ) return 1 ; if ( event -> state == PERF_EVENT_STATE_OFF &&! event -> attr. enable_on_exec ) return 1 ; if ( event -> state == PERF_EVENT_STATE_OFF &&! event -> attr. enable_on_exec ) return 1 ; if ( event -> state == PERF_EVENT_STATE_OFF &&! event -> attr. enable_on_exec ) return 1 ;",0
225,<S2SV_ModStart> new_idmap_permitted ( struct <S2SV_ModEnd> uid_gid_map * new_map <S2SV_ModStart> return true ; <S2SV_ModEnd> return false ;,0
226,"<S2SV_ModStart> ++ ) { if ( j == a -> num_values - 1 ) { <S2SV_ModStart> j ] = XMALLOC ( VarLenData, 1 ) ; body [ j ] -> len = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> data -> buf = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> len = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> len = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, 1 ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, 1 )",0
227,"<S2SV_ModStart> hexline * hx ; u8 <S2SV_ModEnd> reset ; int <S2SV_ModStart> ; hx = kzalloc <S2SV_ModEnd> ( sizeof ( <S2SV_ModStart> = 1 ; ret = usb_cypress_writemem ( udev, cypress [ type ]. cpu_cs_register, & reset, 1 ) )!= 1 ) { err ( ""could <S2SV_blank> not <S2SV_blank> restart <S2SV_blank> the <S2SV_blank> USB <S2SV_blank> controller <S2SV_blank> CPU."" ) ; ret = - EINVAL ; kfree ( hx ) ; return ret ; } while ( ( ret = usb_cypress_writemem ( udev, cypress [ type ]. cpu_cs_register, & reset, 1 ) )!= 1 ) { err ( ""could <S2SV_blank> not <S2SV_blank> restart <S2SV_blank> the <S2SV_blank> USB <S2SV_blank> controller <S2SV_blank> CPU."" ) ; ret = - EIO ; kfree ( hx ) ; return ret ; } if ( ret == 0 ) { reset = 0 ; if ( ret || usb_cypress_writemem ( udev, cypress [ type ]. cpu_cs_register, & reset, 1 )!= 1 ) { err ( ""could <S2SV_blank> not <S2SV_blank> restart <S2SV_blank> the <S2SV_blank> USB <S2SV_blank> controller <S2SV_blank> CPU."" ) ; ret = - E",0
228,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> val_l ) ) ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> val_l ) ) ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> val_l ) ) ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ;",0
229,"<S2SV_ModStart> ( handle -> params. handle, realm -> data, realm -> length ) == 0 && strncmp ( handle -> params. realm, c1 -> data, c2 -> data, c2 -> length ) == 0 && strncmp ( ""kadmin"", c1 -> data, c2 -> data, c2 -> length ) == 0 && strncmp ( ""kuid"", c1 -> data, c2 -> data, c2 -> length ) == 0 && strncmp ( ""kuid"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kuid"", c1 -> data, c2 -> data, c2 -> length ) == 0 && strncmp ( ""kuid"", c1 -> data, c2 -> data, c2 -> length ) == 0 && strncmp ( ""gid"", c2 -> data, c2 -> data, c2 -> length ) == 0 && strncmp ( ""gid"", c2 -> data, c2 -> length ) == 0",0
230,"<S2SV_ModStart> * bo ; uint32_t bin_size = args -> bin_cl_size ; uint32_t shader_rec_offset = roundup ( bin_offset + args -> bin_cl_size, 16 ) ; uint32_t shader_rec_offset = roundup ( bin_offset + args -> bin_cl_size, 16 ) ; uint32_t uniforms_offset = roundup ( shader_rec_offset + args -> shader_rec_size, 16 ) ; if ( temp_size < bin_offset ) { DRM_ERROR ( ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; goto fail ; } bin = temp + bin_offset ; exec -> shader_rec_u = temp + bin_offset ; exec -> shader_state = temp + bin_size ; exec -> shader_state_size = args -> shader_state_size ; if ( copy_from_user ( bin, ( void __user * ) ( uintptr_t ) args -> bin_cl, args -> bin_cl_size ) ) { ret = - EFAULT ; goto fail ; } if ( copy_from_user ( bin, ( void __user * ) ( uintptr_t",0
231,<S2SV_ModStart> endif # if HAVE_LZMA_H <S2SV_ModEnd> && HAVE_LIBLZMA if,1
232,<S2SV_ModStart> -> vm_file ) ; mutex_lock ( & EXT4_I ( inode ) -> i_mmap_sem ) <S2SV_ModStart> inode ) ; mutex_unlock ( & EXT4_I ( inode ) -> i_mmap_sem ) ;,0
233,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
234,"<S2SV_ModStart> arg ) { if ( strlen ( arg ) < 2 ) { r_return_val_if_fail ( arg, NULL ) ; return NULL ; } <S2SV_ModStart> case ';' : if ( strlen ( arg ) < 2 ) { r_return_val_if_fail ( arg, NULL ) ; return NULL ; } <S2SV_ModStart> case '\\n' : if ( strlen ( arg ) < 2 ) { r_return_val_if_fail ( arg, NULL ) ; return NULL ; } <S2SV_ModStart> break ; default : if ( strlen ( arg ) < 2 ) { r_return_val_if_fail ( arg, NULL ) ; return NULL ; } * b ++ = * arg ; arg ++ ; } if ( strlen ( arg ) < 2 ) { r_return_val_if_fail ( arg, NULL ) ; return NULL ; }",0
235,"<S2SV_ModStart> break ; case 5 : idstr = STR_OR_ID ( t. t_id, oakley_p_map ) ; map = ipsec_t_map ; nmap = sizeof ( ipsec_t_map ) / sizeof ( ipsec_t_map [ 0 ] ) ; break ; case 6 : idstr = STR_OR_ID ( t. t_id, ah_p_map ) ; map = ipsec_t_map ; nmap = sizeof ( ipsec_t_map ) / sizeof ( ipsec_t_map ) ; break ; case 7 : idstr = STR_OR_ID ( t. t_id, esp_p_map ) ; map = ipsec_t_map ; nmap = sizeof ( ipsec_t_map ) / sizeof ( ipsec_t_map ) ; break ; case 8 : idstr = STR_OR_ID ( t. t_id, esp_p_map ) ; map = ipsec_t_map ; nmap = sizeof ( ipsec_t_map ) / sizeof ( ipsec_t_map ) ; break ; case 9 : idstr = STR",0
236,"<S2SV_ModStart> GsmIceConnectionData ; static gboolean <S2SV_ModEnd> accept_ice_connection ( GIOChannel <S2SV_ModStart> source, GIOCondition condition, GsmIceConnectionData * data ) { IceListenObj listener ; IceAcceptStatus status ; gsm_client * client ; gsm_store_add ( server -> priv -> client_store, gsm_client_peek_id ( client ), G_OBJECT ( client ) ) ; if ( status!= IceAcceptSuccess ) { g_debug ( ""GsmXsmpServer: <S2SV_blank> IceAcceptConnection <S2SV_blank> returned <S2SV_blank> %d"", status ) ; return FALSE ; } status = IceAcceptConnection ( listener, & status ) ; if ( status!= IceAcceptSuccess ) { g_debug ( ""GsmXsmpServer: <S2SV_blank> IceAcceptConnection <S2SV_blank> returned <S2SV_blank> %d"", status ) ; return TRUE ; } client = gsm_xsmp_client_new ( ice_conn ) ; gsm_store_add ( server -> priv -> client_store, gsm_client_peek_id ( client ), G_OBJECT ( client ) ) ; g_object_unref ( client )",0
237,<S2SV_ModStart> ; if ( unlikely ( skb_cloned ( skb ) ) ) goto out ;,0
238,"<S2SV_ModStart> void ) { test_checkout_nasty__git_tilde1_nolock <S2SV_ModEnd> ( ""refs/heads/git_tilde1"", <S2SV_ModStart> "".git/foobar"" ) ; test_checkout_fails ( ""refs/heads/git_tilde1"", "".git"" ) ; test_checkout_fails ( ""refs/heads/git_tilde1"", "".git"" ) ; test_checkout_fails ( ""refs/heads/git_tilde1_nol <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
239,"<S2SV_ModStart> ; break ; case SO_NODELAY : v. val = sock_flag ( sk, SOCK_NODELAY ) ; break ; case <S2SV_ModStart> break ; case SO_REUSEADDR : v. val = sock_flag ( sk, SOCK_TRUNC ) ; break ; case SO_BROADCAST : v. val = sock_flag ( sk, SOCK_TRUNC ) ; break ; case SO_REUSEPORT : v. val = sock_flag ( sk, SOCK_BROADCAST ) ; break ; case SO_KEEPALIVE : v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; break ; case SO_KEEPALIVE : v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; break ; case SO_KEEPALIVE : v. val = sock_flag ( sk, SOCK_TRUNC ) ; break ; case SO_REUSEPORT : v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; break ; case SO_BROADCAST : v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; break ; case SO_",0
240,<S2SV_ModStart> ) { if ( <S2SV_ModEnd> sk -> sk_shutdown <S2SV_ModStart> ) ; } else { <S2SV_ModEnd> msg -> msg_namelen <S2SV_ModStart> ) ; },0
241,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } while,1
242,"<S2SV_ModStart> int i ; const uint8_t <S2SV_ModEnd> * const buffers <S2SV_ModStart> 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ], buffers [ i ], strides [ i ], mi_row, mi_col, sf, pd -> subsampling_x, pd -> subsampling_y, pd -> subsampling_x, pd -> subsampling_y ) ; }",0
243,"<S2SV_ModStart>, j ; <S2SV_ModEnd> unsigned int bufsize <S2SV_ModStart> cleanup ; } <S2SV_ModEnd> X509_NAME_oneline_ex ( X509_get_subject_name <S2SV_ModStart> buf, & bufsize <S2SV_ModEnd>, XN_FLAG_SEP_COMMA_PLUS ) <S2SV_ModStart> ; } X509_NAME_oneline_ex ( X509_get_issuer_name ( cert ), buf, & bufsize <S2SV_ModEnd>, XN_FLAG_SEP_COMMA_PLUS ) <S2SV_ModStart> ; md -> subject_dn = strdup ( buf ) ; if ( md -> subject_dn == NULL ) { ret = ENOMEM ; goto cleanup ; } ret = crypto_retrieve_X509_sans ( context, plg_cryptoctx, req_cryptoctx, cert, & pkinit_sans, & upn_sans, NULL ) ; if ( ret ) goto cleanup ; j = 0 ; if ( pkinit_sans!= NULL ) { for ( i = 0 ; pkinit_sans [ i ]!= NULL ; i ++ ) j ++ ; } if ( upn_sans!= NULL ) { for ( i = 0 ; upn_sans [ i ]!= NULL ; i ++ ) j",0
244,"<S2SV_ModStart> goto out_free ; kvm_iommu_unmap_pages ( kvm, <S2SV_ModEnd> mem -> guest_phys_addr <S2SV_ModStart> -> guest_phys_addr ) ; kvm_iommu_unmap_pages ( kvm, <S2SV_ModEnd> mem -> guest_phys_addr <S2SV_ModStart> -> guest_phys_addr ) ; kvm_iommu_unmap_pages ( kvm, <S2SV_ModEnd> mem -> guest_phys_addr <S2SV_ModStart> mem -> guest_phys_addr ) ; kvm_iommu_unmap_pages ( kvm, <S2SV_ModEnd> mem -> guest_phys_addr <S2SV_ModStart> -> guest_phys_addr ) ; kvm_iommu_unmap_pages ( kvm, <S2SV_ModEnd> mem -> guest_phys_addr <S2SV_ModStart> -> guest_phys_addr ) ; kvm_iommu_unmap_pages ( kvm, <S2SV_ModEnd> mem -> guest_phys_addr <S2SV_ModStart> mem -> guest_phys_addr ) ; kvm_iommu_unmap_pages ( kvm, <S2SV_ModEnd> mem -> guest_phys_addr <S2SV_ModStart> mem -> guest_phys_addr ) ; kvm_iommu_unmap_pages ( kvm",0
245,"<S2SV_ModStart> = 0 ; if ( ru && copy_to_user ( ru, & r, sizeof ( struct rusage ) ) ) return - EFAULT ;",0
246,<S2SV_ModStart> ; lock_sock ( sk <S2SV_ModEnd> ) ; for,0
247,"<S2SV_ModStart> * ni ; register u_int <S2SV_ModEnd> i ; int <S2SV_ModStart> case RIP6_REQUEST : ni = <S2SV_ModEnd> rp -> rip6_nets <S2SV_ModStart> -> rip6_metric == HOPCNT_INFINITY6 <S2SV_ModEnd> ) && IN6_IS_ADDR_UNSPECIFIED <S2SV_ModStart> ) ) ; else ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %d[%u]:"", j, length ) ) ; else ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %d:"", j ) ) ; trunc = ( ( i / sizeof ( * ni ) ) * sizeof ( * ni )!= i ) ; for ( ni = rp -> rip6_nets ; i >= sizeof ( * ni ) ; i -= sizeof ( * ni ), ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo, ""\\n\\t"" ) ) ; rip6_entry_print ( ndo, ni, 0 ) ; } break ; case RIP6_RESPONSE : j = length / sizeof ( * ni ) ; if ( j * sizeof ( * ni )!= length - 4 ) ND_PRINT",0
248,<S2SV_ModStart> ; if ( reqkey_defl == KEY_REQKEY_DEFL_DEFAULT ) { ret = install_default_keyring_to_cred ( new ) ; if ( ret < 0 ) goto error ; ret = 0 ; } goto set ; case KEY_REQKEY_DEFL_SESSION_KEYRING : case KEY_REQKEY_DEFL_USER_KEYRING : case KEY_REQKEY_DEFL_REQUESTOR_KEYRING : ret = install_session_keyring_to_cred ( new ) ; if ( ret < 0 ) { ret = - EINVAL ; goto error ; } goto set ; case KEY_REQKEY_DEFL_GROUP_KEYRING : ret = install_group_keyring_to_cred ( new ) ; if ( ret < 0 ) goto error ; ret = 0 ; goto set ;,0
249,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
250,"<S2SV_ModStart> argc ++ ; retval = copy_strings_kernel ( 1, & iname_addr, bprm ) ; if ( retval < 0 ) goto _error ;",0
251,<S2SV_ModStart> = 0.0 ; register <S2SV_ModStart> int iSrc ; res -> ContribRow [ u ]. Left = iLeft ; res -> ContribRow [ u ]. Right = iRight ; <S2SV_ModStart> } } for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] = scale_f_d * ( dCenter - ( double ) iSrc ) ) ; } if ( dTotalWeight > 0.0 ) { for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] /= dTotalWeight ; } },0
252,<S2SV_ModStart> user ) { mutex_lock ( & user -> mutex ) ; <S2SV_ModStart> ) ; } mutex_unlock ( & user -> mutex ) ;,0
253,"<S2SV_ModStart> Com_Printf ( ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" ) ; return ; } if (! COM_CompareExtension ( filename, "".cfg"" ) ) { Com_Printf ( ""Com_WriteConfig_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".cfg\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n""",1
254,<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> sl = strlen,1
255,"<S2SV_ModStart> & tee_mm_sec_ddr ) ; if ( IS_ERR ( mobj ) ) { if (! IS_ERR ( mobj ) ) memset ( mobj_get_va ( mobj, 0 ), 0, size ) ; if (! IS_ERR ( mobj ) ) memset ( mobj_get_va ( mobj, 0 ), 0, size ) ; if (! IS_ERR ( mobj ) ) memset ( mobj_get_va ( mobj, 0 ), 0, size ) ; return mobj ; } <S2SV_ModStart> mobj ) { if (! IS_ERR ( mobj ) ) memset ( mobj_get_va ( mobj, 0 ), 0, size ) ; if (! IS_ERR ( mobj ) ) memset ( mobj_get_va ( mobj, 0 ), 0, size ) ; if (! IS_ERR ( mobj ) ) memset ( mobj_get_va ( mobj, 0 ), 0, size ) ; }",0
256,<S2SV_ModStart> += incr ; delta -= incr ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
257,"<S2SV_ModStart> * for_ch ; if ( TYPE ( CHILD ( n, 0 ) ) == TYPE_COMMENT ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6"" ) ; return NULL ; } else if ( TYPE ( CHILD ( n, 0 ) ) == TYPE_COMMENT ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6"" ) ; return NULL ; } for_ch = CHILD ( n, 1 + is_async ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; if (! expression ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if (! first ) return NULL ; if ( NCH ( for_ch ) == 1 ) comp = comprehension ( first, expression, NULL, is_async, c -> c_arena ) ; else comp = comprehension ( Tuple ( t, Store, first -> lineno, first -> col_offset, c",0
258,"<S2SV_ModStart> NULL ; } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; dst_state -> frame [ i ] = dst ; } err = copy_func_state ( dst, src -> frame [ i ] ) ; if ( err ) return err ; dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; dst_state -> frame [ i ] = dst ; } err = copy_func_state ( dst, src -> frame [ i ] ) ; if ( err ) return err ; } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (!",0
259,"<S2SV_ModStart> void write_mb_modes_kf ( const VP9_COMMON * cm, const MACROBLOCKD * xd <S2SV_ModEnd>, MODE_INFO * <S2SV_ModStart> * mi_8x8, vpx_writer <S2SV_ModEnd> * w ) <S2SV_ModStart> -> mi_stride ] <S2SV_ModEnd> ; const MODE_INFO <S2SV_ModStart> ; const MODE_INFO * const above_mi = xd -> above_available? mi_8x8 [ - xd -> mi_stride - 1 ] : NULL ; const MODE_INFO * const left_mi = xd -> left_available? mi_8x8 [ - 1 ] : NULL ; const MB_MODE_INFO * const mbmi = & mi -> mbmi ; const BLOCK_SIZE bsize = mbmi -> sb_type ; if ( bsize >= BLOCK_8X8 && cm -> tx_mode == TX_MODE_SELECT ) write_selected_tx_size ( cpi, mbmi -> tx_size, bsize, w ) ; else if ( bsize >= BLOCK_8X8 && cm -> tx_mode == TX_MODE_SELECT ) write_selected_tx_size ( cpi, mbmi -> tx_size, bsize, w ) ; else {",0
260,<S2SV_ModStart> = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; saddr,1
261,"<S2SV_ModStart> } } DPRINTF ( ""Data <S2SV_blank> ready <S2SV_blank> tag=0x%x <S2SV_blank> len=%zd\\n"", r -> req. tag, r -> iov. iov_len ) ; if ( r -> iov. iov_len < 0 ) { DPRINTF ( ""Data <S2SV_blank> ready <S2SV_blank> tag=0x%x <S2SV_blank> len=%zd\\n"", r -> req. tag, r -> iov. iov_len ) ; return ; } n = r -> iov. iov_len / 512 ; r -> sector += n ; scsi_req_data ( & r -> req, r -> iov. iov_base, r -> iov. iov_len ) ; if ( n < 0 ) { DPRINTF ( ""Data <S2SV_blank> ready <S2SV_blank> tag=0x%x <S2SV_blank> len=%zd\\n"", r -> req. tag, r -> iov. iov_len ) ; r -> sector_count -= n ; scsi_req_data ( & r -> req, r -> iov. iov_len ) ; }",0
262,"<S2SV_ModStart> err ; } if ( cs >= CQSPI_MAX_CHIPSELECT ) { dev_err ( dev, ""Chip <S2SV_blank> select <S2SV_blank> %d <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range.\\n"", cs ) ; goto err ; }",0
263,"<S2SV_ModStart> maxn ) { switch ( n ) { case SWFACTION_END : return 0 ; case SWFACTION_CONSTANTPOOL : return decompileCONSTANTPOOL ( & actions [ n ], maxn, 1 ) ; case SWFACTION_GOTOFRAME : return decompileGOTOFRAME ( n, actions, maxn, 0 ) ; case SWFACTION_GOTOFRAME2 : return decompileGOTOFRAME2 ( n, actions, maxn, 1 ) ; case SWFACTION_GOTOFRAME2 : return decompileGOTOFRAME2 ( n, actions, maxn, 0 ) ; case SWFACTION_GETURL2 : decompileGETURL2 ( & actions [ n ], maxn, 0 ) ; return 0 ; case SWFACTION_PUSHDUP : decompilePUSHDUP ( & actions [ n ], maxn ) ; return 0 ; case SWFACTION_GETPROPERTY : decompileGETPROPERTY ( n, actions, maxn ) ; return 0 ; case SWFACTION_GETTIME : decompileGETTIME ( n, actions, maxn ) ; return 0 ; case SWFACTION_TRACE : de",0
264,<S2SV_ModStart> ) ) ; if ( l < 0 ) { AZ ( KD_PRINT ( ( KD_PRINT ( ( KD_PRINT ( ( KD_PRINT ( ( KD_PRINT ( ( KD_PRINT ( ( KD_PRINT ( ( KD_PRINT ( ( KD_PRINT ( ( KD_PRINT ( ( KD_PRINT ( ( KD_PRINT ( ( W_TIM_real ( wrk ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; AZ ( KD_PRINT ( ( KD_PRINT ( ( KD_PRINT ( ( KD_PRINT ( ( KD_PRINT ( ( KD_PRINT ( ( KD_PRINT ( ( KD_PRINT ( ( KD_PRINT ( ( KD_PRINT ( ( KD_PRINT ( ( KD_PRINT ( ( KD_PRINT ( ( KD_PRINT ( ( KD_PRINT ( ( KD_PRINT ( ( ( KD_PRINT ( ( ( KD_PRINT ( ( KD_PRINT ( ( KD_PRINT ( ( KD_PRINT ( ( KD_PRINT ( ( KD_PRINT ( (,0
265,"<S2SV_ModStart> out ; } if ( table -> total == table -> max ) { err = - ENOSPC ; goto out ; } if ( table -> refs [ i ] && ( vlan == ( MLX4_VLAN_MASK & be32_to_cpu ( table -> entries [ i ] ) ) ) ) { err = - ENOSPC ; goto out ; } if ( free == table -> max ) { err = - ENOSPC ; goto out ; } table -> entries [ free ] = cpu_to_be32 ( vlan | MLX4_VLAN_VALID ) ; err = mlx4_set_port_vlan_table ( dev, port, table -> entries ) ; if ( unlikely ( err ) ) { mlx4_warn ( dev, ""Failed <S2SV_blank> adding <S2SV_blank> vlan: <S2SV_blank> %u\\n"", vlan ) ; table -> refs [ free ] = 0 ; table -> entries [ free ] = 0 ; goto out ; } table -> refs [ free ] = 0 ; table -> entries [ free ] = cpu_to_be32 ( vlan | MLX4_VLAN_VALID ) ; err = mlx4_set_port_vlan_table ( dev, port,",0
266,"<S2SV_ModStart> ) ) ; ND_TCHECK ( prep ) ; <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> n = EXTRACT_32BITS <S2SV_ModStart> n >= 0 && ND_TTEST ( * ps ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %u/%s:%u"", n, EXTRACT_32BITS ( & ps -> slot ), ps -> nid ) ) ; ps = ( const struct pgstate * ) ( ps + 1 ) ; while ( -- n >= 0 && ND_TTEST ( * ps ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %u/%s:%u"", n, EXTRACT_32BITS ( & ps -> page. p_uid ) ) ) ; } ND_PRINT ( ( ndo, "" <S2SV_blank> %u/%s:%u"", n, EXTRACT_32BITS ( & ps -> page. p_sid ) ) ) ; ps = ( const struct pgstate * ) ( ps + 1 ) ; while ( -- n >= 0 && ND_TTEST ( * ps ) ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %u/%s:%u"", n, EXTRACT_32BITS ( &",0
267,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
268,"<S2SV_ModStart> int ret ; <S2SV_ModEnd> dev_dbg ( & <S2SV_ModStart>, ""atusb: <S2SV_blank> reg <S2SV_blank> = <S2SV_blank> 0x%04x\\n"", reg <S2SV_ModEnd> ) ; ret <S2SV_ModStart> = atusb_control_msg ( atusb, usb_rcvctrlpipe ( usb_dev, 0 ), ATUSB_REG_READ, ATUSB_REQ_FROM_DEV, 0, reg, & value, 1, 1000 ) ; if ( ret < 0 ) { dev_err ( & usb_dev -> dev, ""atusb: <S2SV_blank> reg <S2SV_blank> = <S2SV_blank> 0x%04x\\n"", reg ) ; return ret ; } ret = <S2SV_ModEnd> atusb_control_msg ( atusb <S2SV_ModStart>, ATUSB_REG_READ, <S2SV_ModEnd> ATUSB_REQ_FROM_DEV, 0 <S2SV_ModStart>, reg, & value, 1, 1000 ) ; if ( ret < 0 ) { dev_err ( & usb_dev -> dev, ""atusb: <S2SV_blank> reg <S2SV_blank> = <S2SV_blank> 0x%04x\\n"", reg ) ; return ret ; } return ret ;",0
269,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static sqlite3_int64 <S2SV_ModEnd> addModuleArgument ( sqlite3 <S2SV_ModStart> zArg ) { sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof <S2SV_ModStart> * ) * ( sqlite3_int64 ) <S2SV_ModEnd> pTable -> nModuleArg <S2SV_ModStart> -> nModuleArg ; sqlite3_int64 * azModuleArg = sqlite3DbRealloc ( db, pTable -> azModuleArg, nBytes ) ; if ( azModuleArg == 0 ) { sqlite3DbFree ( db, zArg ) ; return 0 ; } <S2SV_ModEnd> azModuleArg = sqlite3DbRealloc",0
270,"<S2SV_ModStart> } } } memcpy ( outbuffer, s -> str, XMLRPC_BUFSIZE ) ;",0
271,"<S2SV_ModStart> ) ) { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATE_NOT_SUPPORTED, ""AdaptationStates <S2SV_blank> must <S2SV_blank> be <S2SV_blank> zero"" ) ; goto Error ; } <S2SV_ModStart> ) ) { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATE_NOT_SUPPORTED, ""AdaptationStates <S2SV_blank> must <S2SV_blank> be <S2SV_blank> zero"" ) ; goto Error ; } <S2SV_ModStart> ) ) { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATE_NOT_SUPPORTED, ""AdaptationStates <S2SV_blank> must <S2SV_blank> be <S2SV_blank> zero"" ) ; goto Error ; } <S2SV_ModStart> ) ) { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATE_NOT_SUPPORTED, ""AdaptationStates <S2SV_blank> must <S2SV_blank> be <S2SV_blank> zero"" ) ; goto Error ; } <S2SV_ModStart> ) ) { if ( AdaptationStates == NULL ) { cmsSignalError ( ContextID, cmsERROR_ADAPTATION_STATE_NOT_SUPPORTED, ""AdaptationStates <S2SV_blank> must <S2SV_blank> be <S2SV_blank> zero"" ) ; goto Error ;",0
272,"<S2SV_ModStart> 32 ) { ut32 addr32 = r_read_le32 ( buf + i ) ; <S2SV_ModStart> } else { ut64 addr64 = r_read_le64 ( buf + i ) ; if ( addr64 ) { RBinAddr * ba = newEntry ( sec -> paddr + i, addr64, type, bits ) ; r_list_append ( ret, ba ) ; } } } else { <S2SV_ModStart> } else { ut64 addr64 = r_read_le64 ( buf + i ) ; if ( addr64 ) { RBinAddr * ba = newEntry ( sec -> paddr + i, addr64, type, bits ) ; r_list_append ( ret, ba ) ; } }",0
273,"<S2SV_ModStart> case ISIS_SUBTLV_EXT_IS_REACH_IPV6_INTF_ADDR : if ( subl >= 4 ) { ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; if ( subl == 8 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; } break ; case ISIS_SUBTLV_EXT_IS_REACH_IPV6_INTF_ADDR : if ( subl >= 4 ) { ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; if ( subl == 8 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; } break ; case ISIS_SUBTLV_EXT_IS_REACH_IPV6_INTF_ADDR : if ( subl >= 4 ) { ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x""",0
274,<S2SV_ModStart> 1 ) { if ( ptr_hbe_txposer -> noise_sensitivity > 0 && ptr_hbe_txposer -> noise_sensitivity > 0 && ptr_hbe_txposer -> noise_sensitivity > 0 && ptr_hbe_txposer -> noise_sensitivity > 0 && ptr_hbe_txposer -> noise_sensitivity > 0 && ptr_hbe_txposer -> noise_sensitivity <= 1 ) { ptr_hbe_txposer -> noise_sensitivity = 1 ; ptr_hbe_txposer -> noise_sensitivity = 0 ; } else if ( ptr_hbe_txposer -> noise_sensitivity > 0 && ptr_hbe_txposer -> noise_sensitivity > 0 && ptr_hbe_txposer -> noise_sensitivity > 0 && ptr_hbe_txposer -> noise_sensitivity <= 1 && ptr_hbe_txposer -> noise_sensitivity <= 1 ) { ptr_hbe_txposer -> noise_sensitivity = 0 ; } else if ( ptr_hbe_txposer -> noise_sensitivity >,0
275,"<S2SV_ModStart> q ) { if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { rdp_protocol_error ( reg -> enc, ""forward_search_range: <S2SV_blank> str: <S2SV_blank> %s, <S2SV_blank> end: <S2SV_blank> %d, <S2SV_blank> range: <S2SV_blank> %d\\n"", ( int ) str, ( int ) end ) ; return - 1 ; } <S2SV_ModStart> -> dmin ; if (! ONIGENC_IS_SINGLEBYTE ( reg -> enc ) ) { rdp_protocol_error ( reg -> enc, ""forward_search_range: <S2SV_blank> str: <S2SV_blank> %s, <S2SV_blank> end: <S2SV_blank> %s\\n"", ( int ) str, ( int ) end ) ; } else { rdp_protocol_error ( reg -> enc, ""forward_search_range: <S2SV_blank> str: <S2SV_blank> %s, <S2SV_blank> end: <S2SV_blank> %s, <S2SV_blank> range: <S2SV_blank> %d\\n"", ( int ) str, ( int ) end ) ; } else { rdp_protocol_error ( reg -> enc, ""forward_search_range: <S2SV_blank> str: <S2SV_blank> %s, <S2SV_blank> end: <S2SV_blank> %d\\n"", ( int ) str, ( int ) end ) ;",0
276,"<S2SV_ModStart> bfq_queue * bfqq <S2SV_ModEnd> ) { struct <S2SV_ModStart> struct bfq_data * <S2SV_ModEnd> bfqd = bfqq <S2SV_ModStart> flags ) ; if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_TOO_IDLE ; else goto schedule_dispatch ; spin_lock_irqsave ( & bfqd -> lock, flags ) ; if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) )",0
277,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
278,"<S2SV_ModStart> continue ; } <S2SV_ModEnd> idx = vif <S2SV_ModStart> vif -> tx. req_cons ; rmb ( ) ; memcpy ( & txreq, RING_GET_REQUEST ( & vif -> tx, idx ), sizeof ( txreq ) ) ; if ( txreq. size > vif -> remaining_credit ) { netbk_tx_err ( vif, ""tx_credit_exceeded"" ) ; continue ; } vif -> tx. req_cons = ++ idx ; memset ( extras, 0, sizeof ( extras ) ) ; if ( txreq. flags & XEN_NETTXF_extra_info ) { work_to_do = xen_netif_get_extras ( vif, extras, work_to_do ) ; idx = vif -> tx. req_cons ; if ( unlikely ( work_to_do < 0 ) ) { netbk_tx_err ( vif, ""tx_credit_exceeded"" ) ; continue ; } vif -> tx. req_cons = ++ idx ; memcpy ( & txfrags, RING_GET_REQUEST ( & vif -> tx, idx ), sizeof ( txfrags )",0
279,<S2SV_ModStart> cb ) { <S2SV_ModEnd> return 0 ;,0
280,<S2SV_ModStart> conn ) ; if ( h2o_timeout_is_linked ( & conn -> _read. timeout_entry ) ) { h2o_timeout_unlink ( & conn -> _read. timeout_entry ) ; do_emit_writereq ( conn ) ; },0
281,"<S2SV_ModStart> -> data ) ; int nr_frags = skb_shinfo ( skb ) -> nr_frags ; int err, start ; if ( unlikely ( err ) ) { int j, newerr ; pending_ring_idx_t index ; index = pending_index ( netbk -> pending_prod ++ ) ; txp = & netbk -> pending_tx_info [ index ]. req ; make_tx_response ( vif, txp, XEN_NETIF_RSP_ERROR ) ; netbk -> pending_ring [ index ] = pending_idx ; xenvif_put ( vif ) ; } start = ( frag_get_pending_idx ( & shinfo -> frags [ i ] ) == pending_idx ) ; if ( likely (! newerr ) ) { if ( unlikely ( err ) ) xen_netbk_idx_release ( netbk, pending_idx ) ; continue ; } txp = & netbk -> pending_tx_info [ index ]. req ; make_tx_response ( vif, txp, XEN_NETIF_RSP_ERROR ) ; netbk -> pending_ring [ index ] = pending_idx ;",0
282,,1
283,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ;",0
284,"<S2SV_ModStart> struct hv_kvp_msg ) ; memset ( hv_msg, 0, sizeof ( * hv_msg ) ) ; <S2SV_ModStart> struct hv_kvp_ipaddr_value ) ; memcpy ( hv_msg -> kvp_hdr. ip_addr, ""127.0.0.1"", sizeof ( * hv_msg -> kvp_hdr. ip_addr ) ) ; <S2SV_ModStart> struct hv_kvp_ipaddr_value ) ; memset ( hv_msg -> kvp_hdr. ip_addr, 0, sizeof ( * hv_msg -> kvp_hdr. ip_addr ) ) ; <S2SV_ModStart> struct hv_kvp_ipaddr_value ) ; memcpy ( hv_msg -> kvp_hdr. ip_addr, sizeof ( * hv_msg -> kvp_hdr. ip_addr ) ) ; <S2SV_ModStart> struct hv_kvp_ipaddr_value ) ; memcpy ( hv_msg -> kvp_hdr. ip_addr, sizeof ( * hv_msg -> kvp_hdr. ip_addr ) ) ;",0
285,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
286,"<S2SV_ModStart> -> ipc == NULL ) { crm_warn ( ""Skipping <S2SV_blank> client <S2SV_blank> with <S2SV_blank> NULL <S2SV_blank> channel"" ) ; return FALSE ; } type = crm_element_value ( update_msg, F_SUBTYPE ) ; if ( type == NULL ) { crm_warn ( ""Skipping <S2SV_blank> client <S2SV_blank> with <S2SV_blank> NULL <S2SV_blank> type"" ) ; return FALSE ; } type = crm_element_value ( update_msg, F_SUBTYPE ) ; CRM_LOG_ASSERT ( type!= NULL ) ; if ( client -> diffs && safe_str_eq ( type, T_CIB_DIFF_NOTIFY ) ) { do_send = TRUE ; } else if ( client -> replace && safe_str_eq ( type, T_CIB_REPLACE_CONFIRM ) ) { do_send = TRUE ; } else if ( client -> pre_notify && safe_str_eq ( type, T_CIB_PRE_NOTIFY ) ) { do_send = TRUE ; } else if ( client -> post_notify && safe_str_eq ( type, T_CIB_POST_NOTIFY ) ) { do_send = TRUE ; } else if ( client",0
287,"<S2SV_ModStart> + x > diffBlock + diffBlockLength || extraPtr + y <S2SV_ModStart> NULL ; } if ( diffPtr + x + diffBlockLength > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } <S2SV_ModStart> y ) ; if ( extraPtr + y + extraBlockLength > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; }",0
288,<S2SV_ModStart> ; if ( UDF_I ( dir ) -> i_alloc_type == ICBTAG_FLAG_AD_SHORT ) epos. offset -= sizeof ( struct short_ad ) ; else if ( UDF_I ( dir ) -> i_alloc_type == ICBTAG_FLAG_AD_LONG ) epos. offset -= sizeof ( struct long_ad ) ; else if ( dinfo -> i_alloc_type == ICBTAG_FLAG_AD_SHORT ) epos. offset -= sizeof ( struct short_ad ) ; else if ( dinfo -> i_alloc_type == ICBTAG_FLAG_AD_LONG ) epos. offset -= sizeof ( struct long_ad ) ; else if ( dinfo -> i_alloc_type == ICBTAG_FLAG_AD_LONG ) epos. offset -= sizeof ( struct long_ad ) ; else if ( dinfo -> i_alloc_type == ICBTAG_FLAG_AD_SHORT ) epos. offset -= sizeof ( struct short_ad ) ; else if ( dinfo -> i_alloc_type == ICBTAG_FLAG_AD_LONG ) epos. offset -= sizeof ( struct long_ad ) ;,0
289,"<S2SV_ModStart> ( cmd == IP_VS_BASE_CTL || cmd == IP_VS_SO_GET_DAEMON ) { d [ 0 ]. state = IP_VS_STATE_MASTER ; strlcpy ( d [ 0 ]. mcast_ifn, ipvs -> master_mcast_ifn, sizeof ( d [ 0 ]. mcast_ifn ) ) ; d [ 0 ]. syncid = ipvs -> master_syncid ; } else { d [ 1 ]. state = IP_VS_STATE_BACKUP ; strlcpy ( d [ 1 ]. mcast_ifn, ipvs -> backup_mcast_ifn, sizeof ( d [ 1 ]. mcast_ifn ) ) ; d [ 1 ]. syncid = ipvs -> backup_syncid ; } if ( ipvs -> daemon_state & IP_VS_STATE_UP ) { d [ 1 ]. state = IP_VS_STATE_BACKUP ; strlcpy ( d [ 1 ]. mcast_ifn, ipvs -> backup_mcast_ifn, sizeof ( d [ 1 ]. mcast_ifn ) ) ; d [",0
290,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart>, fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
291,<S2SV_ModStart> ssize_t result ; if (! ib_safe_file_access ( filp ) ) return - EACCES,0
292,"<S2SV_ModStart> fpath = NULL, <S2SV_ModEnd> * cgdir = <S2SV_ModStart> ; if ( <S2SV_ModEnd>! fc_may_access ( <S2SV_ModStart>, controller, fpath <S2SV_ModEnd>, O_RDWR ) <S2SV_ModStart> { ret = <S2SV_ModEnd> - EACCES ; <S2SV_ModStart> EACCES ; goto out ; } if ( caller_is_in_ancestor ( fc -> pid, controller, path1, NULL ) ) { ret = - EACCES ; goto out ; } ret = cgfs_create ( controller, cgroup, fc -> uid, fc -> gid ) ; printf ( ""cgfs_create <S2SV_blank> returned <S2SV_blank> %d <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> %s\\n"", ret, controller, cgroup ) ; out : free ( cgdir ) ; return ret ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
293,<S2SV_ModStart> -> queue ) { kfree ( disk ) ; <S2SV_ModStart> -> queue = NULL ; continue ; } <S2SV_ModEnd> INIT_LIST_HEAD ( &,0
294,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
295,"<S2SV_ModStart> ; if ( MagickMax ( number_pixels, max_packets ) > MagickMax ( number_pixels, max_packets ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( MagickMax ( number_pixels, max_packets ) > MagickMax ( number_pixels, max_packets ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( MagickMax ( number_pixels, max_packets, ""InsufficientImageDataInFile"" ) > MagickMax ( number_pixels, max_packets ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( MagickMax ( number_pixels, max_packets ) > MagickMax ( number_pixels, max_packets ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( MagickMax ( number_pixels, max_packets, ""InsufficientImageDataInFile"" ) > MagickMax ( number_pixels, max_packets ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" )",0
296,<S2SV_ModStart> ) pktnum ; if ( avio_feof ( s -> pb ) ) { ret = AVERROR_INVALIDDATA ; goto end ; },0
297,"<S2SV_ModStart> srp ) ; if ( srp -> eip == SG_EIP ) { result = sg_remove_eip ( sfp, srp ) ; if ( result < 0 ) return result ; result = sg_verify_rq ( sfp, srp, READ ) ; if ( result < 0 ) return result ; result = sg_verify_rq ( sfp, srp, WRITE ) ; if ( result < 0 ) return result ; result = wait_event_interruptible ( sfp -> read_wait, ( srp_done ( sfp, srp ) || atomic_read ( & sdp -> detaching ) ) ) ; if ( result < 0 ) return result ; write_lock_irq ( & sfp -> rq_list_lock ) ; result = sg_new_read ( sfp, p, SZ_SG_IO_HDR, srp ) ; if ( result < 0 ) return result ; result = sg_new_read ( sfp, p, SZ_SG_IO_HDR, srp ) ; if ( result < 0 ) return result ; write_unlock_irq ( & sfp -> rq_list",0
298,"<S2SV_ModStart> ; # endif # if HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_context"", & security_context_handler, global_active ) ; # endif # ifdef HAVE_DECL_CLONE_NEWNET <S2SV_ModStart> ; # endif # ifdef HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_context"", & security_context_handler, global_active ) ; # endif <S2SV_ModStart> ; # endif # if HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_context"", & security_context_handler, global_active ) ; # endif # ifdef HAVE_DECL_CLONE_NEWNET <S2SV_ModStart> ; # endif # ifdef HAVE_DECL_CLONE_NEWNET <S2SV_ModStart> ; # endif # ifdef HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_context"", & security_context_handler, global_active ) ; # endif # ifdef HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_context"", & security_context_handler ) ;",0
299,<S2SV_ModStart> data ) { # if CONFIG_VP9_HIGHBITDEPTH switch ( ctx -> bit_depth ) { case VPX_BITS_8 : return encoder_common_init_highbitdepth ( ctx ) ; case VPX_BITS_10 : return encoder_common_init_highbitdepth ( ctx ) ; case VPX_BITS_12 : return encoder_common_init_highbitdepth ( ctx ) ; default : return encoder_common_init ( ctx ) ; } # if CONFIG_VP9_HIGHBITDEPTH switch ( ctx -> bit_depth ) { case VPX_BITS_8 : return encoder_common_init_highbitdepth ( ctx ) ; case VPX_BITS_10 : return encoder_common_init_highbitdepth ( ctx ) ; case VPX_BITS_12 : return encoder_common_init_highbitdepth ( ctx ) ; default : return encoder_common_init ( ctx ) ; } # if CONFIG_VP9_HIGHBITDEPTH switch ( ctx -> bit_depth ) { case VPX_BITS_8 : return encoder_common_init_highbitdepth ( ctx ) ; } # endif,0
300,"<S2SV_ModStart> 0 ) { if ( strlen ( key ) + 2 > tmpbuf ) { kfree ( tmpbuf ) ; return - 1 ; } <S2SV_ModEnd> param = iscsi_check_key <S2SV_ModStart>, sender, param_list ) ; if (! param ) { kfree ( tmpbuf ) ; return - 1 ; } start += strlen ( key ) + strlen ( value ) + 2 ; continue ; } if (! param ) { if ( iscsi_add_notunderstood_response ( key, value, param_list ) < 0 ) { kfree ( tmpbuf ) ; return - 1 ; } start += strlen ( key ) + strlen ( value ) + 2 ; continue ; } iscsi_add_notunderstood_response ( key, value, param_list ) ; if (! param ) { if ( iscsi_check_acceptor_state ( param, value ) < 0 ) { kfree ( tmpbuf ) ; return - 1 ; } start += strlen ( key ) + strlen ( value ) + 2 ; continue ; } if ( iscsi_check_acceptor_state ( param, value ) < 0 ) { kfree ( tmpbuf ) ; return - 1",0
301,"<S2SV_ModStart> ENOENT ) { struct stat st ; if ( stat ( t -> stamp_path, & st ) >= 0 ) t -> last_trigger. realtime = timespec_load ( & st. st_atim ) ; else if ( errno == EEXIST ) touch_file ( t -> stamp_path, true, USEC_INFINITY, UID_INVALID, GID_INVALID, 0 ) ; else if ( errno == EACCES ) touch_file ( t -> stamp_path, true, USEC_INFINITY, UID_INVALID, GID_INVALID, 0",0
302,"<S2SV_ModStart> = 0 ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ) ) ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ) ) ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, box",0
303,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
304,<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> copylen ; bool <S2SV_ModStart> ; if ( unlikely ( q -> flags & IFF_VNET_HDR ) ) { vnet_hdr. flags &= ~ VIRTIO_NET_HDR_F_NEEDS_CSUM ; vnet_hdr. hdr_len = len - ETH_HLEN ; err = - EINVAL ; if ( ( vnet_hdr. flags & VIRTIO_NET_HDR_F_NEEDS_CSUM ) && ( vnet_hdr. flags & VIRTIO_NET_HDR_F_NEEDS_CSUM ) ) vnet_hdr. flags &= ~ VIRTIO_NET_HDR_F_NEEDS_CSUM ; if ( vnet_hdr. flags & VIRTIO_NET_HDR_F_NEEDS_CSUM ) vnet_hdr. flags |= VIRTIO_NET_HDR_F_NEEDS_CSUM ; if ( vnet_hdr. flags & VIRTIO_NET_HDR_F_NEEDS_CSUM ) vnet_,0
305,"<S2SV_ModStart> nexthdr ) { const struct ipv6_opt_hdr * exthdr = <S2SV_ModEnd> ( struct ipv6_opt_hdr <S2SV_ModStart> offset + 1 <= ipv6_optlen ( exthdr ) <S2SV_ModEnd> ) { switch <S2SV_ModStart> ( * * nexthdr ) { case NEXTHDR_HOP : if ( ipv6_find_tlv ( skb, offset, IPV6_TLV_HAO ) >= 0 ) break ; # else if ( IS_ENABLED ( CONFIG_IPV6_MIP6 ) if ( ipv6_find_tlv ( skb, offset, IPV6_TLV_HAO ) >= 0 ) break ; # endif <S2SV_ModEnd> offset += ipv6_optlen <S2SV_ModStart> ( exthdr ) <S2SV_ModEnd> ; * nexthdr",0
306,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
307,"<S2SV_ModStart> ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias <S2SV_ModEnd> ) ; near_ref <S2SV_ModStart> ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias <S2SV_ModEnd> ) ; near_ref <S2SV_ModStart> vcnt ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias <S2SV_ModEnd> ) ; near_ref <S2SV_ModStart> ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias <S2SV_ModEnd> ) ; near_ref <S2SV_ModStart> ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias <S2SV_ModEnd> ) ; near_ref <S2SV_ModStart> vcnt ] = left -> mbmi. ref_frame ; } vcnt ++ ; if ( aboveleft -> mbmi. ref_frame!= INTRA_FRAME ) { near_mvs [ 0 ]. as_int = left -> mbmi. mv. as_int ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame, & near_mvs [ 0 ], refframe, & near_mvs [ 0 ], ref_",0
308,<S2SV_ModStart> ; sll -> sl_family = AF_INET ; sll -> sl_protocol = htons ( ETH_P_IP ) ;,0
309,"<S2SV_ModStart> return ; } if ( dj_report -> device_index < DJ_DEVICE_INDEX_MIN ) || ( dj_report -> device_index > DJ_DEVICE_INDEX_MAX ) ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index == DJ_DEVICE_INDEX_MIN ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index == DJ_DEVICE_INDEX_MIN ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index == DJ_DEVICE_INDEX_MAX ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank>",0
310,"<S2SV_ModStart> ) ) { pr_err ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" <S2SV_ModEnd> ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> """,0
311,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
312,"<S2SV_ModStart> asconf ) { sctp_addip_chunk_t * addip = ( sctp_addip_chunk_t * ) asconf -> chunk_hdr ; sctp_addip_chunk_t * addip = ( sctp_addip_chunk_t * ) addip ; <S2SV_ModStart> __u32 serial ; sctp_walk_params ( addip, param, addip_hdr. params ) { if ( param. type == SCTP_PARAM_IPV4_ADDRESS || param. type == SCTP_PARAM_IPV6_ADDRESS || param. type == SCTP_PARAM_IPV6_ADDRESS || param. type == SCTP_PARAM_IPV6_ADDRESS || param. type == SCTP_PARAM_IPV6_ADDRESS || param. type == SCTP_PARAM_IPV6_ADDRESS || param. type == SCTP_PARAM_IPV6_ADDRESS || param. type == SCTP_PARAM_IPV6_ADDRESS ) { if ( param. type == SCTP_PARAM_IPV6_ADDRESS || param. type == SCTP_PARAM_IPV6_ADDRESS || param. type == SCTP_",0
313,"<S2SV_ModStart> 101, ( ""jas_realloc(%p, <S2SV_blank> %zz)\\n"" <S2SV_ModEnd>, ptr,",0
314,<S2SV_ModStart> exit ; } m -> msg_namelen = 0 ;,0
315,"<S2SV_ModStart> # ifdef CONFIG_KVM_XICS r = kvm_xics_check_extension ( kvm, ext ) ; break ; # ifdef CONFIG_KVM_XICS_64 r = kvm_xics_check_extension ( kvm, ext ) ; break ; # ifdef CONFIG_KVM_XICS_64 r = kvm_xics_check_extension ( kvm, ext ) ; break ; # endif # if defined ( CONFIG_KVM_E500MC ) case defined ( CONFIG_KVM_E500V2 ) || defined ( CONFIG_KVM_E500MC ) case defined ( CONFIG_KVM_E500MC ) case defined ( CONFIG_KVM_E500MC ) case defined ( CONFIG_KVM_E500MC ) case defined ( CONFIG_KVM_E500MC ) case defined ( CONFIG_KVM_E500MC ) case defined ( CONFIG_KVM_E500MC ) case defined ( CONFIG_KVM_E500MC ) case defined ( CONFIG_KVM_E500MC ) case defined ( CONFIG_KVM_E500MC ) case defined ( CONFIG_KVM_E500MC",0
316,<S2SV_ModStart> msicap ; return pci_populate_msicap <S2SV_ModEnd> ( & msicap,0
317,"<S2SV_ModStart> goto response_done ; } if ( strlen ( key_name ) > 64 ) { pr_warn ( ""KVP: <S2SV_blank> Key <S2SV_blank> name <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> 64\\n"" ) ; return ; } <S2SV_ModStart> 1 ) ; if ( strlen ( value ) > 64 ) { pr_warn ( ""KVP: <S2SV_blank> Value <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> 64\\n"" ) ; return ; } <S2SV_ModStart> + 1 ) ; if ( strlen ( value ) > 64 ) { pr_warn ( ""KVP: <S2SV_blank> Value <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> 64\\n"" ) ; return ; } <S2SV_ModStart> valuelen = utf8s_to_utf16s <S2SV_ModEnd> ( value, <S2SV_ModStart> + 1 ) ; if ( strlen ( value ) > 64 ) { pr_warn ( ""KVP: <S2SV_blank> Value <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> 64\\n"" ) ; return ; } <S2SV_ModStart> + 1 ) ; if ( strlen ( value ) > 64 ) { pr_warn ( ""KVP: <S2SV_blank> Value <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> 64\\n"" ) ; return ; }",0
318,<S2SV_ModStart> -> log_ctx ; if (! mutex_trylock ( & d -> mutex ) ) mutex_unlock ( & d -> mutex ) ;,0
319,"<S2SV_ModStart> return ; } if ( ( img -> fmt & OPJ_IMG_FMT_HIGHBITDEPTH ) == 0 ) { fprintf ( stderr, ""%s:%d:color_sycc_to_rgb\\n\\tCAN <S2SV_blank> NOT <S2SV_blank> HIGHBITDEPTH\\n\\tCAN <S2SV_blank> NOT <S2SV_blank> HIGHBITDEPTH\\n\\tCAN <S2SV_blank> NOT <S2SV_blank> HIGHBITDEPTH\\n\\tCAN <S2SV_blank> NOT <S2SV_blank> HIGHBITDEPTH\\n\\tCAN <S2SV_blank> NOT <S2SV_blank> HIGHBITDEPTH\\n\\tCAN <S2SV_blank> NOT <S2SV_blank> HIGHBITDEPTH\\n\\tCAN <S2SV_blank> NOT <S2SV_blank> HIGHBITDEPTH\\n\\tCAN <S2SV_blank> NOT <S2SV_blank> HIGHBITDEPTH\\n\\tCAN <S2SV_blank> NOT <S2SV_blank> HIGHBITDEPTH\\n\\tCAN <S2SV_blank> NOT <S2SV_blank> HIGHBITDEPTH\\n\\tCAN <S2SV_blank> NOT <S2SV_blank> HIGHBITDEPTH\\n\\tCAN <S2SV_blank> NOT <S2SV_blank> HIGHBITDEPTH\\n\\tCAN <S2SV_blank> NOT <S2SV_blank> HIGHBITDEPTH\\n\\tCAN <S2SV_blank> NOT <S2SV_blank> HIGHBITDEPTH\\n\\tCAN <S2SV_blank> NOT <S2SV_blank> HIGHBITDEPTH\\n\\tCAN <S2SV_blank> NOT <S2SV_blank> HIGHBITDEPTH\\n\\tCAN <S2SV_blank> NOT <S2SV_blank> HIGHBITDEPTH\\n\\t",0
320,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> long err = <S2SV_ModStart> EINVAL ; int is_ext_ctrl ; size_t ctrls_size = 0 ; void __user * user_ptr = NULL <S2SV_ModStart> case _IOC_NONE : is_ext_ctrl = ( cmd == VIDIOC_S_EXT_CTRLS || cmd == VIDIOC_G_EXT_CTRLS || cmd == VIDIOC_TRY_EXT_CTRLS ) ; switch ( _IOC_DIR ( cmd ) ) { case _IOC_READ : case _IOC_WRITE : if ( _IOC_SIZE ( cmd ) <= sizeof ( sbuf ) ) { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) goto out_ext_ctrl ; p -> controls = mbuf ; } else { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) goto out_ext_ctrl ; p -> controls = mbuf ; } err = - EFAULT ; if ( _IOC_DIR ( cmd ) & _IOC_",0
321,"<S2SV_ModStart> psubscribeCommand ) { addReplyError ( c, ""only <S2SV_blank> (P)SUBSCRIBE <S2SV_blank> / <S2SV_blank> (P)UNSUBSCRIBE <S2SV_blank> / <S2SV_blank> QUIT <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> this <S2SV_blank> context"" ) ; return REDIS_OK ; } switch ( cmd -> proc ) { case infoCommand : addReplyError ( c, ""link <S2SV_blank> with <S2SV_blank> master <S2SV_blank> is <S2SV_blank> down <S2SV_blank> and <S2SV_blank> slave-serve-data <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported"" ) ; return REDIS_OK ; case psubscribeCommand : addReplyError ( c, ""only <S2SV_blank> (P)SUBSCRIBE <S2SV_blank> / <S2SV_blank> (P)UNSUBSCRIBE <S2SV_blank> / <S2SV_blank> QUIT <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> this <S2SV_blank> context"" ) ; return REDIS_OK ; case punsubscribeCommand : addReplyError ( c, ""only <S2SV_blank> (P)UNSUBSCRIBE <S2SV_blank> / <S2SV_blank> QUIT <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> this <S2SV_blank> context"" ) ; return REDIS_OK ; } switch ( cmd -> proc ) { case psubscribeCommand : addReplyError ( c, ""only <S2SV_blank> (P)SUBSCRIBE <S2SV_blank> / <S2SV_blank> (P)UNSUBSCRIBE <S2SV_blank> / <S2SV_blank> QUIT <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> this <S2SV_blank> context"" ) ; return REDIS_OK ; }",0
322,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_registers ( rtl8150_t <S2SV_ModStart> * data ) { int ret ; ret = <S2SV_ModEnd> usb_control_msg ( dev <S2SV_ModStart> 0 ), RTL8150_REQ_SET_REGS, RTL8150_REQT_WRITE, indx, 0, data, size, 500 ) ; if ( ret < 0 ) return ret ; ret = <S2SV_ModEnd> usb_control_msg ( dev <S2SV_ModStart>, 0 ), ret <S2SV_ModEnd>, RTL8150_REQ_SET_REGS, <S2SV_ModStart>, RTL8150_REQT_WRITE, indx <S2SV_ModEnd>, data, <S2SV_ModStart> 500 ) ; if ( ret > 0 ) return ret ; return ret ;",0
323,"<S2SV_ModStart> { case RESPONSE_RUN : { gtk_widget_get_screen ( GTK_WIDGET ( parameters -> parent_window ) ) ; uri = nautilus_file_get_uri ( parameters -> file ) ; DEBUG ( ""Launching <S2SV_blank> untrusted <S2SV_blank> launcher <S2SV_blank> %s"", uri ) ; nautilus_launch_desktop_file ( screen, uri, NULL, parameters -> parent_window ) ; g_free ( uri ) ; } break ; case RESPONSE_MARK_TRUSTED : { file = nautilus_file_get_location ( parameters -> file ) ; g_object_unref ( file ) ; nautilus_file_mark_desktop_file_trusted ( file, parameters -> parent_window, TRUE, NULL, NULL ) ; g_object_unref ( file ) ; }",0
324,"<S2SV_ModStart> -> lsr_event ) { dev_dbg ( dev, ""%s <S2SV_blank> ===== <S2SV_blank> Port <S2SV_blank> %u <S2SV_blank> LSR <S2SV_blank> Status <S2SV_blank> = <S2SV_blank> %02x, <S2SV_blank> Data <S2SV_blank> = <S2SV_blank> %02x <S2SV_blank> ======\\n"", __func__, port_number, edge_port -> lsr_status, * data ) ; edge_port -> lsr_status |= * data ; -- urb -> actual_length ; ++ data ; } if ( urb -> actual_length ) { dev_dbg ( dev, ""%s <S2SV_blank> ===== <S2SV_blank> Port <S2SV_blank> %u <S2SV_blank> LSR <S2SV_blank> Status <S2SV_blank> = <S2SV_blank> %02x, <S2SV_blank> Data <S2SV_blank> = <S2SV_blank> %02x <S2SV_blank> ======\\n"", __func__, port_number, edge_port -> lsr_status, * data ) ; handle_new_lsr ( edge_port, 0, edge_port -> lsr_status, * data ) ; -- urb -> actual_length ; } if ( edge_port -> close_pending ) dev_dbg ( dev, ""%s <S2SV_blank> - <S2SV_blank> close <S2SV_blank> pending, <S2SV_blank> dropping <S2SV_blank> data <S2SV_blank> on <S2SV_blank> the <S2SV_blank> floor\\n"", __func__ ) ;",0
325,"<S2SV_ModStart> * server, const <S2SV_ModStart> ) ; list_for_each ( tmp, & server -> smb_ses_list ) { struct cifsSesInfo * ses ; <S2SV_ModStart> ( tmp, & server -> server_ses_list ) ) { ses = list_entry ( tmp, struct cifsSesInfo, smb_ses_list ) ; if (! ses ) { write_unlock ( & cifs_tcp_ses_lock ) ; return NULL ; } ++ ses -> ses_count ; } write_unlock ( & cifs_tcp_ses_lock ) ;",0
326,"<S2SV_ModStart> vpx_codec_err_t res ; memset ( & ctx -> vp8_cfg, 0, sizeof ( ctx -> vp8_cfg ) ) ; <S2SV_ModStart> ( cfg -> <S2SV_ModEnd> g_lag_in_frames > 1 <S2SV_ModStart> ( cfg -> <S2SV_ModEnd> g_pass!= VPX_RC_ONE_PASS <S2SV_ModStart> ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_lag_in_frames > ctx -> cfg. g_lag_in_frames ) ) ERROR ( ""Cannot <S2SV_blank> increase <S2SV_blank> lag_in_frames"" ) ; if ( ( cfg -> g_lag_in_frames > ctx -> cfg. g_lag_in_frames ) ) ERROR ( ""Cannot <S2SV_blank> increase <S2SV_blank> lag_in_frames"" ) ; if ( ( cfg -> g_lag_in_frames > ctx -> cfg. g_lag_in_frames ) ) ERROR ( ""Cannot <S2SV_blank> increase <S2SV_blank> lag_in_frames"" ) ; if ( ( cfg -> g_lag_in_frames > ctx -> cfg. g_lag_in_frames ) ) ERROR ( ""Cannot <S2SV_blank> increase <S2SV_blank> lag_in_frames"" ) ;",0
327,"<S2SV_ModStart> { input ++ ; off = r_num_math ( core -> num, ptr + 1 ) ; ptr2 = strchr ( ptr2,'<S2SV_blank>') ; if ( ptr2 ) { * ptr2 = 0 ; off = r_num_math ( core -> num, ptr2 + 1 ) ; } if (! r_fs_mount ( core -> fs, ptr, input, off ) ) { eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { if ( ptr2 ) { * ptr2 = 0 ; off = r_num_math ( core -> num, ptr2 + 1 ) ; } if ( ptr2 ) { * ptr2 = 0 ; off = r_num_math ( core -> num, ptr2 + 1 ) ; } if (! r_fs_mount ( core -> fs, ptr, input, off ) ) { eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { if ( ptr2 ) { * ptr2 = 0 ; off = r_num_math ( core -> num, ptr2 + 1 ) ; } if (! r_fs_mount ( core -> fs",0
328,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> vm_flags & VM_NORESERVE <S2SV_ModStart> 0 ) { hugetlb_put_quota ( inode -> i_mapping, chg ) ; return ret ; } ret = hugetlb_acct_memory ( h, chg ) ; if ( ret < 0 ) { hugetlb_put_quota ( inode -> i_mapping, chg ) ; return ret ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; return ret ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; return 0 ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from,",0
329,"<S2SV_ModStart> new ) { const struct key * old_keyring = NULL ; if ( new -> thread_keyring ) old_keyring = keyring_alloc ( ""_tid"", new -> uid, new -> gid, new, KEY_POS_ALL | KEY_USR_VIEW, NULL, NULL ) ; if (! old_keyring ) return - ENOMEM <S2SV_ModEnd> ; keyring =",0
330,"<S2SV_ModStart> = 0 ; size_t scanned = ( size_t ) 0U ; size_t readnbd = ( size_t ) 0U ; if ( readnbd > ( size_t ) 0U ) { readnbd = ( size_t ) 0U ; } <S2SV_ModStart> ; } } if ( readnb <= ( ssize_t ) 0 && errno == EINTR ) { if ( read ( clientfd, cmd + scanned, cmdsize - scanned ) ) < ( ssize_t ) 0 && errno == EINTR ) { if ( read ( clientfd, cmd + scanned, cmdsize - scanned ) ) < ( ssize_t ) 0 && errno == EINTR ) { if ( read ( clientfd, cmd + scanned, cmdsize - scanned ) ) < ( ssize_t ) 0 && errno == EINTR ) { if ( errno == EINTR ) { if ( read ( clientfd, cmd + scanned, cmdsize - scanned ) ) < ( ssize_t ) 0 && errno == EINTR ) { if ( read ( clientfd, cmd + scanned, cmdsize - scanned ) ) < ( ssize_t ) 0 && errno == E",0
331,"<S2SV_ModStart> ) ; fptr_copy <S2SV_ModEnd> = ( struct <S2SV_ModStart> * ) mrb_io_alloc <S2SV_ModEnd> ( mrb ) <S2SV_ModStart> } fptr_copy = <S2SV_ModEnd> io_get_open_fptr ( mrb <S2SV_ModStart> -> fd = mrb_dup ( mrb, fptr_orig -> fd, & failed ) ; if ( failed ) { mrb_sys_fail ( mrb, 0 ) ; } mrb_fd_cloexec ( mrb, fptr_copy -> fd ) ; <S2SV_ModStart> -> fd2 = mrb_dup ( mrb, fptr_orig -> fd2, & failed ) ; mrb_fd_cloexec ( mrb, fptr_copy -> fd2 ) ; if ( fptr_copy -> fd2!= - 1 ) { close ( fptr_copy -> fd2 ) ; mrb_sys_fail ( mrb, 0 ) ; } mrb_fd_cloexec ( mrb, fptr_copy -> fd2 ) ; if ( fptr_orig -> fd2!= - 1 ) { close ( mrb, fptr_copy -> fd2 ) ; mrb_fd_cloexec ( mrb, fptr_copy -> fd",0
332,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data",1
333,<S2SV_ModStart> cpi ) { # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & VPX_FLAG_HIGHBITDEPTH ) cpi -> cur_buf -> flags &= ~ VPX_FLAG_HIGHBITDEPTH ; <S2SV_ModStart> -> zbin_mode_boost = ( cpi -> cur_buf -> flags & VPX_FLAG_HIGHBITDEPTH )? ( cpi -> cur_buf -> flags & VPX_FLAG_HIGHBITDEPTH ) : ( cpi -> flags & VPX_FLAG_HIGHBITDEPTH )? ( cpi -> cur_buf -> flags & ~ VPX_FLAG_HIGHBITDEPTH ) : ( cpi -> cur_buf -> flags & ~ VPX_FLAG_HIGHBITDEPTH ) : ( cpi -> cur_buf -> flags & VPX_FLAG_HIGHBITDEPTH )? ( cpi -> cur_buf -> flags & ~ VPX_FLAG_HIGHBITDEPTH ) : ( cpi -> flags & VPX_FLAG_HIGHBITDEPTH )? ( cpi -> cur_buf -> flags & ~ VPX_FLAG_HIGHBITDEPTH ) : ( cpi ->,0
334,"<S2SV_ModStart> return res ; res = tee_mmu_check_access_rights ( utc, TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER, ( uaddr_t ) param, sizeof ( struct tee_ta_param ) ) ; if ( res!= TEE_SUCCESS ) return res <S2SV_ModStart> return res ; res = tee_mmu_check_access_rights ( utc, TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER, ( uaddr_t ) param, sizeof ( struct utee_params ) ) ; if ( res!= TEE_SUCCESS ) return res ;",0
335,"<S2SV_ModStart> int rc ; struct desc_struct old_desc, new_desc ; const struct x86_emulate_ops * ops = ctxt -> ops ; if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) ops -> get_segment ( ctxt, & old_cs, & old_desc, NULL, VCPU_SREG_CS <S2SV_ModEnd> ) ; old_eip <S2SV_ModStart> sel, VCPU_SREG_CS <S2SV_ModEnd> ) ) return <S2SV_ModStart> return X86EMUL_CONTINUE ; new_desc = ctxt -> src. val ; rc = assign_eip_far ( ctxt, new_desc. l ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; rc = assign_eip_far ( ctxt, new_desc. l ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; rc = assign_eip_far ( ctxt, new_desc. l ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; ctxt -> src. val = old_cs ; rc = assign_eip_far ( ctxt, new_desc. l ) ; if ( rc!= X86EMUL_CONT",0
336,"<S2SV_ModStart> ( avctx, AV_LOG_ERROR, ""log2_band_prec <S2SV_blank> width <S2SV_blank> %d <S2SV_blank> height <S2SV_blank> %d\\n"" <S2SV_ModEnd>, log2_band_prec_width, <S2SV_ModStart> ( avctx, AV_LOG_ERROR, ""log2_band_prec <S2SV_blank> height <S2SV_blank> %d\\n"" <S2SV_ModEnd>, log2_band_prec_height, <S2SV_ModStart> ( avctx, AV_LOG_ERROR, ""log2_band_prec <S2SV_blank> width <S2SV_blank> %d\\n"" <S2SV_ModEnd>, log2_band_prec_width, <S2SV_ModStart> ( avctx, AV_LOG_ERROR, ""log2_band_prec <S2SV_blank> width <S2SV_blank> %d\\n"" <S2SV_ModEnd>, log2_band_prec_width, <S2SV_ModStart> ( avctx, AV_LOG_ERROR, ""log2_band_prec <S2SV_blank> height <S2SV_blank> %d\\n"" <S2SV_ModEnd>, log2_band_prec_height,",0
337,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".txt\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n"" ) ; return ; }",1
338,"<S2SV_ModStart> ; } struct reloc_struct_t * got_table = calloc ( 1, <S2SV_ModEnd> n_got * sizeof <S2SV_ModStart> ut32 ) ) ; if (! got_table ) { r_list_free ( list ) ; return NULL ; }",0
339,<S2SV_ModStart> return - EINVAL ; <S2SV_ModEnd> info -> si_signo <S2SV_ModStart> return - EPERM <S2SV_ModEnd> ; return do_send_specific,0
340,"<S2SV_ModStart> ; * p_tx0 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> tx0 + p * p_cp -> tdx ), ( OPJ_INT32 ) p_image -> x0 ) ; <S2SV_ModStart> ; * p_tx1 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> tx0 + q * p_cp -> tdx ), ( OPJ_INT32 ) p_image -> x1 ) ; <S2SV_ModStart> ; * p_ty0 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> ty0 + q * p_cp -> tdy ), ( OPJ_INT32 ) p_image -> y1 ) ; <S2SV_ModStart> ; * p_ty1 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> ty0 + q * p_cp -> tdy ), ( OPJ_INT32 ) p_image -> y1 ) ;",0
341,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> char * create_output_name <S2SV_ModStart> fname ) ; if (! x ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } <S2SV_ModEnd> if ( dir <S2SV_ModStart> fname ++ ; <S2SV_ModEnd> p = & <S2SV_ModStart> fname >= fe ) { free ( name ) ; return NULL ; } if ( ( c = * fname ++ ) < 0x80 ) x = c ; else { if ( ( c >= 0xC0 ) && ( c < 0xE0 ) ) { x = ( c & 0x1F ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= ( * fname ++ & 0x3F ) << 12 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= ( * fname ++ & 0x3F ) << 6 ; x |= ( * fname ++ & 0x3F ) ; } else { if ( ( c >= 0xC0 ) && ( c < 0xF0 ) ) { x = ( c & 0x1F ) << 12 ; x |= ( * fname ++ & 0x3F )",0
342,"<S2SV_ModStart> php_unserialize_data_t var_hash ; <S2SV_ModEnd> HashTable * class_hash <S2SV_ModStart> } } if ( <S2SV_ModEnd> php_var_unserialize_ex ( return_value <S2SV_ModStart>, & p, p + buf_len, & var_hash, class_hash ) ) { RETURN_FALSE ; } <S2SV_ModEnd> PHP_VAR_UNSERIALIZE_DESTROY ( var_hash <S2SV_ModStart> } if ( <S2SV_ModEnd> class_hash ) {",0
343,"<S2SV_ModStart> goto __err ; if ( tu -> tqueue ) { kfree ( tu -> tqueue ) ; tu -> tqueue = NULL ; if ( tu -> tread ) { tu -> tread = kmalloc ( tu -> queue_size * sizeof ( struct snd_timer_tread ), GFP_KERNEL ) ; if ( tu -> tread == NULL ) err = - ENOMEM ; } else { tu -> tread = kmalloc ( tu -> queue_size * sizeof ( struct snd_timer_read ), GFP_KERNEL ) ; if ( tu -> tqueue == NULL ) err = - ENOMEM ; } else { tu -> tread = kmalloc ( tu -> queue_size * sizeof ( struct snd_timer_tread ), GFP_KERNEL ) ; if ( tu -> tread == NULL ) err = - ENOMEM ; } else { tu -> tread = kmalloc ( tu -> queue_size * sizeof ( struct snd_timer_read ), GFP_KERNEL ) ; if ( tu -> tqueue == NULL ) err = - ENOMEM ; } else { tu -> tread = kmalloc ( tu -> queue_size *",0
344,"<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; <S2SV_ModEnd> tmp_str = gf_malloc <S2SV_ModStart> tmp_strsize ) { ISOM_DECREASE_SIZE ( ptr, 1 ) tmp_str [ i ] = gf_bs_read_u8 ( bs ) ; tmp_strsize -- ; if (! tmp_str [ i ] ) break ; i ++ ; } <S2SV_ModEnd> tmp_str = gf_malloc <S2SV_ModStart> tmp_strsize ) { ISOM_DECREASE_SIZE ( ptr, 1 ) tmp_str [ i ] = gf_bs_read_u8 ( bs ) ; tmp_strsize -- ; if (! tmp_str [ i ] ) break ; i ++ ; } if ( i ) { ptr -> movie_identifier [ i ] = gf_bs_read_u8 ( bs ) ; tmp_strsize -- ; if (! tmp_str [ i ] ) break ; i ++ ; } if ( i ) { ISOM_DECREASE_SIZE ( ptr, 1 ) tmp_str [ i ] = gf_bs_read_u8 ( bs ) ; tmp_strsize -- ; if (! tmp_str [ i ] ) break",0
345,<S2SV_ModStart>. get_glob_hdrs ( get_alg_priv ( ctx ) <S2SV_ModEnd> ) ; },1
346,<S2SV_ModStart> ; uschar * cmdline_syslog_name <S2SV_ModEnd> = NULL ; <S2SV_ModStart> NULL ) { cmdline_syslog_name <S2SV_ModEnd> = US ; <S2SV_ModStart> NULL ) { cmdline_syslog_name <S2SV_ModEnd> = US ; <S2SV_ModStart> NULL ) { cmdline_syslog_name <S2SV_ModEnd> = US ; <S2SV_ModStart> NULL ) { uschar * cmdline_syslog_name <S2SV_ModEnd> = US ; <S2SV_ModStart> NULL ) { uschar * cmdline_syslog_name = US ; uschar * cmdline_syslog_name = US ; uschar * cmdline_syslog_name <S2SV_ModEnd> = NULL ; <S2SV_ModStart> NULL ) { cmdline_syslog_name <S2SV_ModEnd> = US ; <S2SV_ModStart> NULL ) { cmdline_syslog_name <S2SV_ModEnd> = US ; <S2SV_ModStart> NULL ) { uschar * cmdline_syslog_name <S2SV_ModEnd> = US ; <S2SV_ModStart> NULL ) { uschar * cmdline_syslog_name = US ; uschar * cmdline_syslog_name = US ; uschar * cmdline_syslog_name = US ; uschar * cmdline_syslog_name = US ; uschar * cmdline_syslog_name = US ; uschar * cmdline_syslog_name = US ; us,0
347,"<S2SV_ModStart> ; s -> seekable = simple_strtol ( p <S2SV_ModEnd>, NULL, <S2SV_ModStart> 10 ) ; if ( s -> seekable == - 1 ) { s -> seekable = simple_strtol ( slash + 1, NULL, 10 ) ; s -> filesize = simple_strtol ( slash + 1, NULL, 10 ) ; } else { s -> seekable = - 1 ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
348,"<S2SV_ModStart> * cr ; size_t maxw, maxh, max ; size_t <S2SV_ModEnd> offset, upb <S2SV_ModStart>, upb ; maxw = ( size_t ) img -> comps [ 0 ]. w ; maxh = ( size_t ) img -> comps [ 0 ]. h ; max = maxw * maxh ; y = img -> comps [ 0 ]. data ; cb = img -> comps [ 0 ]. data ; cr = img -> comps [ 1 ]. data ; d0 = r = ( int * ) malloc ( sizeof ( int ) * max ) ; d1 = g = ( int * ) malloc ( sizeof ( int ) * max ) ; d2 = b = ( int * ) malloc ( sizeof ( int ) * max ) ; if ( r == NULL || g == NULL || b == NULL ) goto fails ; r = ( int * ) malloc ( sizeof ( int ) * max ) ; g = ( int * ) malloc ( sizeof ( int ) * max ) ; d1 = b = ( int * ) malloc ( sizeof ( int ) * max ) ; d2 = r = ( int * ) malloc ( sizeof ( int ) * max ) ;",0
349,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> == mode ) return ; if ( ( fmode & FMODE_READ )!= ( state -> state & FMODE_READ ) ) { if ( ( mode & FMODE_READ )!= ( state -> state & FMODE_READ ) ) { if ( ( mode & FMODE_WRITE )!= ( state -> state & FMODE_WRITE ) ) { list_move ( & state -> open_states, & owner -> so_states ) ; } else { list_move_tail ( & state -> open_states, & owner -> so_states ) ; } state -> state = mode ; } } else { if ( ( mode & FMODE_READ )!= ( state -> state & FMODE_READ ) ) { if ( ( mode & FMODE_WRITE )!= ( state -> state & FMODE_WRITE ) ) { list_move ( & state -> open_states, & owner -> so_states ) ; } else { list_move_tail ( & state -> open_states, & owner -> so_states ) ; } }",0
350,"<S2SV_ModStart> return SSH_ERR_INVALID_ARGUMENT ; if ( ( r = sshpkt_get_string ( ssh, NULL, NULL ) )!= 0 ) return r ; for ( i = 0 ; i < KEX_COOKIE_LEN ; i ++ ) if ( ( r = sshpkt_get_u8 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_u32 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_end ( ssh ) )!= 0 ) return r ; for ( i = 0 ; i < PROPOSAL_MAX ; i ++ ) if ( ( r = sshpkt_get_u8 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_string ( ssh, NULL, NULL ) )!= 0 || ( r = sshpkt_get_u32 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_end ( ssh ) )!= 0 ) return r ; for ( i = 0 ; i < PROPOSAL_MAX ; i ++ ) if ( ( r = sshpkt_get_u8 ( ssh, NULL ) )!= 0",0
351,"<S2SV_ModStart> ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.constants.one <S2SV_blank> + <S2SV_blank> 1 <S2SV_blank> == <S2SV_blank> tests.constants.two <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.constants.foo <S2SV_blank> == <S2SV_blank> \\""foo\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.constants.empty <S2SV_blank> == <S2SV_blank> \\""\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> condition: <S2SV_blank> tests.empty() <S2SV_blank> == <S2SV_blank> \\""\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.empty() <S2SV_blank> == <S2SV_blank> \\""\\""",0
352,"<S2SV_ModStart> ) break ; status = SetImageInfoBlob ( read_info, ( MagickProgressMonitor * ) NULL, ( void * ) NULL ) ; <S2SV_ModStart> ) break ; status = SetImageInfoBlob ( read_info, ( MagickProgressMonitor * ) NULL, ( void * ) NULL ) ; if ( status == MagickFalse ) return ( ( Image * ) NULL ) ;",0
353,"<S2SV_ModStart> ; char * lbase <S2SV_ModEnd> [ 256 ] <S2SV_ModStart> 256 ] ; char * ltest <S2SV_ModEnd> [ 256 ] <S2SV_ModStart> 256 ] ; char * strbase <S2SV_ModEnd> ; char * <S2SV_ModStart> ( lbase, ""%255[^\\r\\n]"" <S2SV_ModEnd>, strbase ) <S2SV_ModStart> ( ltest, ""%255[^\\r\\n]"" <S2SV_ModEnd>, strtest ) <S2SV_ModStart> ( nbase!= 255 && ntest!= 255 ) { fprintf ( stderr, ""could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> line <S2SV_blank> from <S2SV_blank> files\\n"" ) ; goto cleanup ; } if ( strcmp ( lbase, strbase )!= 0 ) { fprintf ( stderr, ""could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> line <S2SV_blank> from <S2SV_blank> files\\n"" ) ; goto cleanup ; } if ( strcmp ( lbase, strbase )!= 0 ) { fprintf ( stderr, ""could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> line <S2SV_blank> from <S2SV_blank> files\\n"" ) ; goto cleanup ; } if ( strcmp ( strbase, strtest )!= 0 ) { fprintf ( stderr, ""could <S2SV_blank> not <S2SV_blank> parse <S2SV_blank> line <S2SV_blank> from <S2SV_blank> files\\n"" ) ; goto cleanup ; } if ( strcmp ( strbase, strtest )!= 0 ) { fprintf ( stderr, ""could <S2SV_blank> not <S2SV_blank> parse",0
354,"<S2SV_ModStart> intf ) { <S2SV_ModEnd> if ( cdc_ncm_select_altsetting <S2SV_ModStart> return - ENODEV ; if ( intf -> altsetting == CDC_NCM_COMM_ALTSETTING_NCM ) return - ENODEV <S2SV_ModStart> 0 ) ; if ( intf -> altsetting == CDC_NCM_DATA_ALTSETTING_NCM ) ret = cdc_ncm_bind_common ( dev, intf, CDC_NCM_COMM_ALTSETTING_NCM, 0 ) ; else ret = cdc_ncm_bind_common ( dev, intf, CDC_NCM_DATA_ALTSETTING_NCM, 0 ) ; if ( ret < 0 ) return ret ; if ( intf -> altsetting == CDC_NCM_COMM_ALTSETTING_NCM ) ret = cdc_ncm_bind_common ( dev, intf, CDC_NCM_DATA_ALTSETTING_NCM, 0 ) ; else ret = cdc_ncm_bind_common ( dev, intf, CDC_NCM_COMM_ALTSETTING_NCM, 0 ) ;",0
355,"<S2SV_ModStart> 0 ; } if ( elem. in_sg [ 0 ]. iov_len!= len ) { virtqueue_push ( vq, & elem, len ) ; virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; } <S2SV_ModStart> len ) ; if ( elem. in_sg [ 0 ]. iov_len!= len ) { virtqueue_push ( vq, & elem, len ) ; virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; }",0
356,"<S2SV_ModStart> i ] ), ( unsigned ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ) <S2SV_ModStart> i ] ), ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] )",0
357,"<S2SV_ModStart> EINVAL ; err = check_entry_size ( e, newinfo, base, e -> target_offset, e -> next_offset ) ; if ( err ) return err ; for ( h = 0 ; h < NF_INET_NUMHOOKS ; h ++ ) { if (! check_hook ( e ) ) { pr_debug ( ""Hook <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> "" ""ACCEPT/DROP\\n"" ) ; return - EINVAL ; } newinfo -> hook_entry [ h ] = hook_entries [ h ] ; if ( ( unsigned char * ) e - base == hook_entries [ h ] ) newinfo -> hook_entry [ h ] = hook_entries [ h ] ; if (! check_underflow ( e ) ) { pr_debug ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> "" ""ACCEPT/DROP\\n"" ) ; return - EINVAL ; } newinfo -> underflow [ h ] = underflows [ h ] ; }",0
358,"<S2SV_ModStart> AV_PIX_FMT_PAL8 ; } else if ( c -> format == CHUNKY ) avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x <S2SV_blank> is <S2SV_blank> not <S2SV_blank> chunky"", c -> format ) ; else if ( c -> format == CHUNKY ) avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; else if ( c -> format == CHUNKY ) avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> is <S2SV_blank> chunky"" ) ; else if ( c -> format == CHUNKY ) avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; else if ( c -> format == CHUNKY ) avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; else if ( c -> format == CHUNKY ) avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> is <S2SV_blank> not <S2SV_blank> chunky"" ) ; else if ( c -> format == CHUNKY ) avpriv_request_sample ( avctx, ""Pixel <S2SV_blank>",0
359,"<S2SV_ModStart> 1 ) ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( 1 ) ; }",0
360,<S2SV_ModStart> q ) { if ( q -> timer ) <S2SV_ModStart> timer ) ; snd_use_lock_sync ( & q -> use_lock ) ;,0
361,"<S2SV_ModStart> int error ; struct gfs2_inode * ip2 = GFS2_I ( inode ) ; pgoff_t start = ( offset + len - 1 ) >> PAGE_CACHE_SHIFT ; unsigned int start_offset = ( offset + len - 1 ) & ~ PAGE_CACHE_MASK ; unsigned int end = ( offset + len - 1 ) >> PAGE_CACHE_SHIFT ; unsigned int end_offset = ( offset + len - 1 ) & ~ PAGE_CACHE_MASK ; if (! end_offset ) end_offset = PAGE_CACHE_SIZE ; if ( unlikely (! ( mode & FALLOC_FL_KEEP_SIZE ) ) { i_size_write ( inode, offset + to ) ; goto out ; } unlock_page ( page ) ; page_cache_release ( page ) ; unlock_page ( page ) ; page_cache_release ( page ) ; if ( error ) goto out ; curr ++ ; offset += PAGE_CACHE_SIZE ; from = 0 ; } <S2SV_ModEnd> brelse ( dibh <S2SV_ModStart> out : return error <S2SV_ModEnd> ; } <S2SV_null>",0
362,"<S2SV_ModStart> b ) ; VipsForeignLoadClass <S2SV_ModEnd> * class = <S2SV_ModStart> load ) || <S2SV_ModEnd> vips_image_pio_input ( load <S2SV_ModStart> ( load ) || <S2SV_ModEnd> vips_image_pio_output ( load <S2SV_ModStart> ( load ) || <S2SV_ModEnd> vips_foreign_load_iscompat ( load <S2SV_ModStart> out ) ) { g_object_set_qdata ( G_OBJECT ( load -> real ), vips__foreign_load_operation, load ) ; g_object_set_qdata ( G_OBJECT ( load -> real ), vips__foreign_load_operation, load ) ; g_object_set_qdata ( G_OBJECT ( load -> real ), vips__foreign_load_operation, load ) ; if ( class -> load ( load ) ||! vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; g_object_set_qdata ( G_OBJECT ( load -> real ), vips__foreign_load_operation, load ) ; g_object_set_qdata ( G_OBJECT ( load -> real ), vips__foreign_load_operation, load ) ; if ( class ->",0
363,"<S2SV_ModStart> image_noffset ) { const char * name = fit_get_name ( fit, noffset, NULL ) ; if (! strncmp ( name, FIT_SIG_NODENAME, strlen ( FIT_SIG_NODENAME ) ) ) { ret = fit_image_check_sig ( fit, noffset, data, size, - 1, & err_msg ) ; if ( ret ) { puts ( ""- <S2SV_blank> "" ) ; } else { puts ( ""+ <S2SV_blank> "" ) ; } } if ( noffset == - FDT_ERR_TRUNCATED || noffset == - FDT_ERR_BADSTRUCTURE || noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; } if ( noffset == - FDT_ERR_TRUNCATED || noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto error ; } if ( noffset == - FDT_ERR_BADSTRUCTURE ) { err_msg = ""Corrupted <S2SV_blank> or <S2SV_blank> truncated <S2SV_blank> tree"" ; goto",0
364,"<S2SV_ModStart> & XFS_ATTR_LOCAL ) { xfs_attr_leaf_name_local_t * name_loc ; memcpy ( name_loc, entry, sizeof ( xfs_attr_leaf_name_local_t ) ) ; } else if ( entry -> flags & XFS_ATTR_INCOMPLETE ) { xfs_attr_leaf_name_local_t * name_loc = xfs_attr3_leaf_name_local ( leaf, i ) ; retval = context -> retval ; break ; } <S2SV_ModEnd> if ( name_loc <S2SV_ModStart> XFS_ATTR_LOCAL ) { xfs_attr_leaf_name_local_t * name_loc = xfs_attr3_leaf_name_local ( leaf, i ) ; } else if ( entry -> flags & XFS_ATTR_INCOMPLETE ) { xfs_attr_leaf_name_local_t * name_loc = xfs_attr3_leaf_name_local ( leaf, i ) ; } else if ( name_loc -> flags & XFS_ATTR_LOCAL ) { xfs_attr_leaf_name_local_t * name_loc = xfs_attr3",0
365,<S2SV_ModStart> ( kfifo_alloc ( & state -> rx_kfifo_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
366,<S2SV_ModStart> service_name_tlv_length ) ; if (! service_name_tlv ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> miux_tlv_length ) ; if (! miux_tlv ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> rw_tlv_length ) ; if (! rw_tlv ) { err = - ENOMEM ; goto error_tlv ; },1
367,"<S2SV_ModStart> void ) { <S2SV_ModEnd> monitor_openfds ( mon <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> if ( options <S2SV_ModStart>. compression ) { mon -> m_zback = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; } else { mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; }",0
368,"<S2SV_ModStart> * iface, vpx_codec_dec_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> = VPX_CODEC_ABI_MISMATCH ; else if ( ( flags & VPX_CODEC_USE_XMA ) && ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_POSTPROC ) &&! ( iface -> caps & VPX_CODEC_CAP_POSTPROC ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( (",0
369,"<S2SV_ModStart> * chan ; jas_uint16 type ; jas_uint16 assoc ; if ( jas_getuint16 ( in, & type ) || jp2_getuint16 ( in, & assoc ) ) { return - 1 ; }",0
370,<S2SV_ModStart> value |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1100WritePhyReg (,0
371,<S2SV_ModStart> icmp_param. data ; if ( type == ICMP_DEST_UNREACH ) { iph = ip_hdr ( skb_in ) ; itp = icmp_pointers [ type ]. itp ; if ( * itp > NR_ICMP_TYPES || icmp_pointers [ * itp ]. error > NR_ICMP_TYPES ) { iph = ip_hdr ( skb_in ) ; itp = icmp_pointers [ * itp ]. itp ; if ( * itp > NR_ICMP_TYPES || icmp_pointers [ * itp ]. error > NR_ICMP_TYPES || icmp_pointers [ * itp ]. error > NR_ICMP_TYPES || icmp_pointers [ * itp ]. error > NR_ICMP_TYPES ) { iph = ip_hdr ( skb_in ) ; itp = icmp_pointers [ * itp ]. itp ; if ( * itp > NR_ICMP_TYPES || icmp_pointers [ * itp ]. error > NR,0
372,"<S2SV_ModStart> len ; } if ( EXTRACT_32BITS ( p + 2 )!= 4 ) { ND_PRINT ( ( ndo, "": <S2SV_blank> Magic-Num <S2SV_blank> 0x%08x"", EXTRACT_32BITS ( p + 2 ) ) ) ; break ; } if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo, & p [ 2 ], ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> "", len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo, & p [ 2 ], ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> "", len - 2 ) ; break ; default : if ( ndo -> ndo_vflag < 1 ) print_unknown_data ( ndo, & p [ 2 ], ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> "", len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo, & p [ 2 ], ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> "", len - 2 ) ; return len ;",0
373,<S2SV_ModStart> 0 ; } skb_dst_drop ( skb ) ;,0
374,<S2SV_ModStart> private ) { <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
375,<S2SV_ModStart> ) { struct <S2SV_ModEnd> umode_t mode = <S2SV_ModStart> int retval ; bprm -> cred -> euid = current_euid ( ) ; bprm -> cred -> egid = current_egid ( ) ; if (! ( inode -> i_mode & ( S_ISUID | S_IXGRP ) ) ) { bprm -> per_clear |= PER_CLEAR_ON_SETID ; bprm -> cred -> euid = inode -> i_uid ; } if ( ( mode & ( S_ISUID | S_IXGRP ) ) == ( S_ISUID | S_IXGRP ) ) { bprm -> per_clear |= PER_CLEAR_ON_SETID ; bprm -> cred -> euid = inode -> i_uid ; } if ( ( mode & ( S_ISGID | S_IXGRP ) ) == ( S_ISGID | S_IXGRP ) ) { bprm -> per_clear |= PER_CLEAR_ON_SETID ; bprm -> cred -> egid = inode -> i_gid ; } retval = security_bprm_set_creds ( bpr,0
376,<S2SV_ModStart> = nlogs ; if ( unlikely ( headcount >= UIO_MAXIOV ) ) { r = - ENOBUFS ; goto err ; },0
377,<S2SV_ModStart> ) ) { if ( dlen == 0 ) break ; * pt ++ = '\\\\' ; * pt ++ = * s ; } else <S2SV_ModEnd> { * pt,0
378,<S2SV_ModStart> { rq = tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; fn (,1
379,<S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_,0
380,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
381,<S2SV_ModStart> skb_is_nonlinear ( skb ) ) return 0 ; if ( skb -> len < sizeof ( struct nlattr,1
382,"<S2SV_ModStart> ; encode_share_access ( xdr <S2SV_ModEnd>, arg ->",0
383,"<S2SV_ModStart> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> type <S2SV_blank> 0x%x"", EXTRACT_16BITS ( bp ) ) ) ; bp += 2 ; len -= 2 ; if ( flags & GRE_CP ) { ND_TCHECK2 ( * bp, 2 ) ; if ( len < 2 ) goto trunc ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> sum <S2SV_blank> 0x%x"", EXTRACT_16BITS ( bp ) ) ) ; bp += 2 ; len -= 2 ; } if ( flags & GRE_KP ) { ND_TCHECK2 ( * bp, 4 ) ; if ( len < 4 ) goto trunc ; ND_PRINT ( ( ndo, "", <S2SV_blank> key=0x%x"", EXTRACT_32BITS ( bp ) ) ) ; bp += 4 ; len -= 4 ; } if ( flags & GRE_SP ) { <S2SV_ModStart> 4 ) ; if ( len < 4 ) goto trunc ; ND_PRINT ( ( ndo, "", <S2SV_blank> seq <S2SV_blank> %u"", EXTRACT_32BITS ( bp ) ) ) ; bp += 4 ;",0
384,"<S2SV_ModStart> } if ( tile_buffsize % tile_rowsize == 0 ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> calculating <S2SV_blank> buffer <S2SV_blank> size"" ) ; exit ( - 1 ) ; } <S2SV_ModStart> } if ( tile_buffsize % tile_rowsize == 0 ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> calculating <S2SV_blank> buffer <S2SV_blank> size"" ) ; exit ( - 1 ) ; } <S2SV_ModStart> } if ( tile_buffsize % tile_rowsize == 0 ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> calculating <S2SV_blank> buffer <S2SV_blank> size"" ) ; exit ( - 1 ) ; } if ( tile_buffsize % tile_rowsize == 0 ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> calculating <S2SV_blank> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
385,"<S2SV_ModStart> }, # if defined _WITH_LVS_ { ""dont-release-ipvs"", no_argument, NULL, 'I' }, # endif <S2SV_ModStart> }, # if defined _WITH_LVS_ { ""dont-release-ipvs"", no_argument, NULL, 'X' }, { ""dont-release-ipvs"", no_argument, NULL, 'I' }, # endif <S2SV_ModStart> }, # if defined _WITH_LVS_ { ""dont-release-ipvs"", no_argument, NULL, 'I' }, { ""dont-respawn"", no_argument, NULL, 'n' }, # if defined _WITH_LVS_ { ""dont-release-ipvs"", no_argument, NULL, 'X' }, { ""dont-release-ipvs"", no_argument, NULL, 'I' }, # endif <S2SV_ModStart> }, # if defined _WITH_LVS_ { ""dont-release-ipvs"", no_argument, NULL, 'I' }, # endif",0
386,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> modify_bar_registration ( struct <S2SV_ModStart> ) ; return <S2SV_ModEnd> EINVAL ; } <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
387,<S2SV_ModStart> item ) ; <S2SV_ModEnd> unsigned long tmp <S2SV_ModStart> tmp == cluster -> cl_has_local <S2SV_ModEnd> ) return - <S2SV_ModStart> return - EBUSY <S2SV_ModEnd> ; if ( <S2SV_ModStart> tmp == cluster -> cl_has_local <S2SV_ModEnd> ) return - <S2SV_ModStart> return - EBUSY <S2SV_ModEnd> ; if ( <S2SV_ModStart> tmp &&! cluster -> cl_has_local <S2SV_ModEnd> ) { ret <S2SV_ModStart> return ret ; } node -> nd_local = tmp ; if ( node -> nd_local ) { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = O2NM_INVALID_NODE_NUM ; } node -> nd_local = tmp ; if ( node -> nd_local ) { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = O2NM_INVALID_NODE_NUM ; } node -> nd_local = tmp ; if ( node -> nd_local ) { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = O2NM_INVALID_NODE_NUM ; } node -> nd_local = tmp ; if ( node -> nd_local ) { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = O2,0
388,"<S2SV_ModStart> ( fp, "" <S2SV_blank> Number <S2SV_blank> of <S2SV_blank> pts <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> format <S2SV_blank> = <S2SV_blank> %s\\n"" <S2SV_ModEnd>, & n",0
389,<S2SV_ModStart> case 0x00 : case 0x01 : case 0x02 : case 0x03 : case 0x06 : case 0x0a : case 0x0b : case 0x0c : case 0x0e : case 0x0a : case 0x0b : case 0x0c : case 0x0e : case 0x0a : case 0x0b : case 0x0c : case 0x0e : case 0x9a : case 0x9e : case 0x10 : case 0x11 : case 0x12 : case 0x13 : case 0x1a : case 0x1b : case 0x1c : case 0x1e : case 0x10 : case 0x11 : case 0x12 : case 0x13 : case 0x14 : case 0x15 : case 0x16 : case 0x17 : case 0x18 : case 0x18 : case 0x19 : case 0x1a : case 0x1b : case 0x1c : case 0x1f :,0
390,"<S2SV_ModStart> ; struct sock * sk = transport -> asoc -> base. sk ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> sk ) ; <S2SV_ModEnd> if ( sock_owned_by_user <S2SV_ModStart> sk ) ) { <S2SV_ModEnd> pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"" <S2SV_ModStart> sk ) ; sctp_transport_put ( transport ) ; goto out_unlock ; } error = sctp_do_sm ( net, SCTP_EVENT_T_ERR, SCTP_ST_TIMEOUT ( SCTP_EVENT_TIMEOUT_T3_RTX ), asoc -> state, ep, asoc, transport, GFP_ATOMIC ) ; if ( error ) <S2SV_ModEnd> asoc -> base <S2SV_ModStart> sk_err = - error <S2SV_ModEnd> ; out_unlock :",0
391,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
392,<S2SV_ModStart> return - E_NOTHANDLED <S2SV_ModEnd> ; fd =,0
393,"<S2SV_ModStart> goto trunc ; if ( lshp -> ls_length < 2 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %us, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_router ), EXTRACT_32BITS ( & lshp -> ls_seq ), lshp -> ls_length ) ) ; } else { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %us, <S2SV_blank> length <S2SV_blank> %u)"", ipaddr_string ( ndo, & lshp -> ls_seq ), lshp -> ls_age ), lshp -> ls_length ) ) ; }",0
394,"<S2SV_ModStart> int n, jas_ulonglong <S2SV_ModEnd> val ) {",1
395,"<S2SV_ModStart> return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart>. length ) return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart>. length ) return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart>. length ) return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart>. length ) return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart>. length ) return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart>. length ) return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart>. length ) return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart>. length ] = '\\0' ; if (! pbody -> cf_present ) { pbody -> cf = ds ; pbody -> cf = cf ; } break ; case E_TICKS : memcpy ( & tim, p + offset, tim. length ) return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart>. length ) return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart>. length ) return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart>. length ) return 0 ; <S2SV_ModEnd> memcpy ( & <S2SV_ModStart>. length ] = '\\0' ; if (! pbody -> cf_present ) { pbody -> cf = ds ; } break ; case E_TICKS : memcpy ( & tim, p +",0
396,<S2SV_ModStart> } else { if ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; opipe -> nrbufs ++ ; ibuf -> offset += ibuf -> len ; } else { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; opipe -> nrbufs ++ ; } ret += obuf -> len ; if ( len ) { * obuf = * obuf ; obuf -> len = len ; opipe -> nrbufs ++ ; opipe -> curbuf = ( opipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; ibuf -> ops = NULL ; opipe -> nrbufs ++ ; opipe -> curbuf = ( opipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; } else { * obuf = * obuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; opipe -> nrbufs ++ ; opipe -> curbuf = ( opipe -> curbuf + 1 ) & ( opipe,0
397,"<S2SV_ModStart> ) ; r_buf_set_bytes <S2SV_ModEnd> ( tbuf,",0
398,"<S2SV_ModStart> long ret, err <S2SV_ModEnd> ; if ( <S2SV_ModStart> = 0 ; if (! access_ok ( VERIFY_WRITE, ur, sizeof ( * ur ) ) ) return - EFAULT ; err |= __put_user ( r. ru_utime. tv_sec, & ur -> ru_utime. tv_sec ) ; err |= __put_user ( r. ru_utime. tv_usec, & ur -> ru_utime. tv_usec ) ; err |= __put_user ( r. ru_stime. tv_sec, & ur -> ru_stime. tv_sec ) ; err |= __put_user ( r. ru_stime. tv_usec, & ur -> ru_stime. tv_usec ) ; err |= __put_user ( r. ru_maxrss, & ur -> ru_maxrss ) ; err |= __put_user ( r. ru_ixrss, & ur -> ru_ixrss ) ; err |= __put_user ( r. ru_idrss, & ur -> ru_idrss ) ; err |= __put_user ( r. ru_isrss, & ur -> ru",0
399,"<S2SV_ModStart> NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys/net"", ""%r/proc/net"", NULL, MS_BIND, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys"", ""%r/proc/sys"", NULL, MS_REMOUNT | MS_BIND | MS_RDONLY, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/net"", ""%r/proc/net"", NULL, MS_BIND, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys"", ""%r/proc/sys"", NULL, MS_BIND | MS_RDONLY, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_RW, ""proc"", ""proc"", MS_",0
400,"<S2SV_ModStart> ; } } else if ( addrinsubnet ( & md -> sender, & c -> spd. that. client ) ) { loglog ( RC_LOG_SERIOUS, ""initial <S2SV_blank> parent <S2SV_blank> SA <S2SV_blank> message <S2SV_blank> received <S2SV_blank> on <S2SV_blank> %s:%u"" ""but <S2SV_blank> no <S2SV_blank> connection <S2SV_blank> has <S2SV_blank> been <S2SV_blank> authorized%s%s"", ip_str ( & md -> iface -> ip_addr ), ntohs ( portof ( & md -> iface -> ip_addr ) ), c == NULL ||! subnetinsubnet ( & c -> spd. that. client, & d -> spd. that. client ) ) { loglog ( RC_LOG_SERIOUS, ""initial <S2SV_blank> parent <S2SV_blank> SA <S2SV_blank> message <S2SV_blank> received <S2SV_blank> on <S2SV_blank> %s:%u"" ""but <S2SV_blank> no <S2SV_blank> connection <S2SV_blank> has <S2SV_blank> been <S2SV_blank> authorized%s%s"", ip_str ( & md -> iface -> ip_addr ), ntohs ( portof ( & md -> iface -> ip_addr ) ), c == NULL ||! subnetinsubnet ( & c -> spd. that. client, & d -> spd. that. client ) ) { loglog ( RC",0
401,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> UINT32 <S2SV_ModEnd> nsc_encode ( NSC_CONTEXT <S2SV_ModStart> { nsc_encode_argb_to_aycocg ( context <S2SV_ModEnd>, bmpdata, <S2SV_ModStart> { nsc_encode_subsampling ( context <S2SV_ModEnd> ) ; }",0
402,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
403,<S2SV_ModStart> stringset ) { int len ; len = ARRAY_SIZE ( g_xgmac_stats_string ) ; if ( len >= sizeof ( g_xgmac_stats_string ) ) return len ; if ( len >= sizeof ( g_xgmac_stats_string ) ) return 0 ; if ( strlen ( g_xgmac_stats_string ) ) return ARRAY_SIZE ( g_xgmac_stats_string ) ; if ( len >= sizeof ( g_xgmac_stats_string ) return ARRAY_SIZE ( g_xgmac_stats_string ) ; if ( len >= sizeof ( g_xgmac_stats_string ) ) return ARRAY_SIZE ( g_xgmac_stats_string ) - 1 ; if ( len >= sizeof ( g_xgmac_stats_string ) ) return ARRAY_SIZE ( g_xgmac_stats_string ) ; if ( len >= sizeof ( g_xgmac_stats_string ) ) return ARRAY_SIZE ( g_xgmac_stats_string ) ; if ( len >= sizeof ( g_xgmac_stats_string ) ) return ARRAY_SIZE ( g_x,0
404,<S2SV_ModStart> == 1 ) return <S2SV_ModEnd> ( ( image <S2SV_ModStart> / 8 ) <S2SV_ModEnd> ; else return,0
405,"<S2SV_ModStart> = open ( dev_path <S2SV_ModEnd>, O_RDWR | <S2SV_ModStart> O_CLOEXEC ) ; if ( p_dev -> fd < 0 ) { APPL_TRACE_ERROR ( ""%s: <S2SV_blank> Error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank> err:%d"", __FUNCTION__, p_dev -> fd ) ; p_dev -> fd = - 1 ; } <S2SV_ModStart> = open ( dev_path <S2SV_ModEnd>, O_RDWR | <S2SV_ModStart> O_CLOEXEC ) ; if ( p_dev -> fd < 0 ) { APPL_TRACE_ERROR ( ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank> err:%d"", __FUNCTION__, p_dev -> fd ) ; p_dev -> fd = - 1 ; p_dev -> dev_status = BTHH_CONN_STATE_UNKNOWN ; p_dev -> dev_status = BTHH_CONN_STATE_UNKNOWN ; } else if ( p_dev -> dev_status == BTHH_CONN_STATE_UNKNOWN ) { APPL_TRACE_ERROR ( ""%s: <S2SV_blank> Failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uhid, <S2SV_blank> err:%d"", __FUNCTION__, p_",0
406,"<S2SV_ModStart> bMasterInterface0 ) ; if ( alt -> desc. bNumEndpoints < 1 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> control <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return - EINVAL ; }",0
407,"<S2SV_ModStart> intf ) ; <S2SV_ModEnd> struct device * <S2SV_ModStart> dev = d -> udev <S2SV_ModEnd> -> dev ; <S2SV_ModStart> d ) ; dev_dbg ( & d -> udev -> dev, ""%s: <S2SV_blank> bInterfaceNumber=%d\\n"", __func__, intf -> cur_altsetting -> desc. bInterfaceNumber ) ; <S2SV_ModStart> d ) ; dev_info ( & dev, ""%s: <S2SV_blank> \'%s\' <S2SV_blank> successfully <S2SV_blank> deinitialized <S2SV_blank> and <S2SV_blank> disconnected\\n"", KBUILD_MODNAME, name ) ;",0
408,<S2SV_ModStart> pirlvl ) { if ( pirlvl -> prcwidthexpn + picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> ) ) { if ( pirlvl -> prcheightexpn + picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> ) ) { if ( pirlvl -> prcwidthexpn + picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> - rpx ) > JAS_UINTFAST32_NUMBITS - <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> ) ) { if ( pirlvl -> prcheightexpn + picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> ) ) { if ( pirlvl -> prcheightexpn + picomp -> numrlvls > JAS_UINTFAST32_NUMBITS - <S2SV_ModEnd> ( pirlvl -> <S2SV_ModStart> - rpy ) > JAS_UINTFAST32_NUMBITS -,0
409,"<S2SV_ModStart> target_enc ) { if ( <S2SV_ModEnd> cpat, &",0
410,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> InsertRow ( Image <S2SV_ModStart> ) { ssize_t <S2SV_ModEnd> bit ; ssize_t <S2SV_ModStart> x ; ssize_t y ; Quantum index ; <S2SV_ModStart> : { q = QueueAuthenticPixels ( image, 0, y, image -> columns, 1, exception ) ; if ( q == ( Quantum * ) NULL ) break ; <S2SV_ModStart> : { q = QueueAuthenticPixels ( image, 0, y, image -> columns, 1, exception ) ; if ( q == ( Quantum * ) NULL ) break ; <S2SV_ModStart> : { q = QueueAuthenticPixels ( image, 0, y, image -> columns, 1, exception ) ; if ( q == ( Quantum * ) NULL ) break ; <S2SV_ModStart> : { q = QueueAuthenticPixels ( image, 0, y, image -> columns, 1, exception ) ; if ( q == ( Quantum * ) NULL ) break ; <S2SV_ModStart> : { q = QueueAuthenticPixels ( image, 0, y, image -> columns, 1, exception ) ; if ( q == ( Quantum * ) NULL ) break ; <S2SV_ModStart> : { q = QueueAuthenticPixels",0
411,"<S2SV_ModStart> * ndo, <S2SV_ModEnd> register const u_char <S2SV_ModStart> u_int network_addr_type ; u_int <S2SV_ModEnd> hexdump = FALSE <S2SV_ModStart> case AFNUM_INET : ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Network <S2SV_blank> Address <S2SV_blank> Type <S2SV_blank> %s <S2SV_blank> (%u)"", ipaddr_string ( ndo, tptr + 1 ) <S2SV_ModEnd> ) ) ; <S2SV_ModStart> case AFNUM_INET6 : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ip6addr_string ( ndo, tptr + 1 ) <S2SV_ModEnd> ) ) ; <S2SV_ModStart> case AFNUM_INET : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ipaddr_string ( ndo, tptr + 1 ) <S2SV_ModEnd> ) ) ; <S2SV_ModStart> case AFNUM_INET : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ipaddr_string ( ndo, tptr + 1 ) <S2SV_ModEnd> ) ) ; <S2SV_ModStart> case AFNUM_INET : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ipaddr_string ( ndo, tptr + 1 ) <S2SV_ModEnd> ) ) ;",0
412,<S2SV_ModStart> desc_struct ss ; unsigned long eip <S2SV_ModEnd> ; int usermode <S2SV_ModStart> = X86EMUL_MODE_PROT32 ; if ( ( ctxt -> mode & X86EMUL_MODE_RX )!= 0x0 ) usermode = X86EMUL_MODE_RX ; <S2SV_ModStart> = 3 ; if ( ( ctxt -> mode & X86EMUL_MODE_RX )!= 0x0 ) usermode = X86EMUL_MODE_RX ; <S2SV_ModStart> = 1 ; if ( ( ctxt -> mode & X86EMUL_MODE_RX )!= 0x0 ) usermode = X86EMUL_MODE_RX ; <S2SV_ModStart> = 1 ; if ( ( ctxt -> mode & X86EMUL_MODE_RX )!= 0x0 ) usermode = X86EMUL_MODE_RX ; if ( ( ctxt -> mode & X86EMUL_MODE_RX )!= 0x0 ) usermode = X86EMUL_MODE_RX ; if ( ( ctxt -> mode & X86EMUL_MODE_RX )!= 0x0 ) usermode = X86EMUL_MODE_RX ; if ( ( ctxt,0
413,"<S2SV_ModStart> ( dev ) ; if ( pdev -> driver_override ) strlcpy ( buf, pdev -> driver_override, sizeof ( pdev -> driver_override ) ) ;",0
414,"<S2SV_ModStart> ; BIO * <S2SV_ModEnd> tmpout = NULL <S2SV_ModStart> CMS_TEXT ) { if ( out == NULL ) tmpout = BIO_new ( BIO_s_null ( ) ) ; else tmpout = BIO_new ( BIO_s_mem ( ) ) ; if ( tmpout == NULL ) tmpout = BIO_new ( BIO_s_null ( ) ) ; else tmpout = BIO_new ( BIO_s_mem ( ) ) ; if ( tmpout == NULL ) tmpout = BIO_new ( BIO_s_null ( ) ) ; else tmpout = BIO_new ( BIO_s_mem ( ) ) ; BIO_set_mem_eof_return ( tmpout, 0 ) ; if ( tmpout == NULL ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, ERR_R_MALLOC_FAILURE ) ; goto err ; } if ( flags & CMS_TEXT ) { if (! SMIME_text ( tmpout, out ) ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, CMS_R_SMIME_TEXT_ERROR ) ; goto err ; } }",0
415,<S2SV_ModStart> = KRB5_PREAUTH_FAILED ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
416,"<S2SV_ModStart> costs, vpx_tree <S2SV_ModEnd> * tree, <S2SV_ModStart> c ) { vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> i / 2 ] <S2SV_ModEnd> ; int b <S2SV_ModStart> b ) ; vpx_tree_index ii = tree [ i + b ] ; if ( ii <= 0 ) costs [ - ii ] = cc ; else costs [ - ii ] = cc ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
417,"<S2SV_ModStart> == '\\0' ) && ( ( tmp_dir = getenv ( ""TMP"" ) ) == NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir = getenv ( ""TMP"" ) ) == NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir = getenv ( ""TEMP"" ) ) == NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir = getenv ( ""TMP"" ) ) == NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir = getenv ( ""TMPDIR"" ) ) == NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir = getenv ( ""TEMP"" ) ) == NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir = getenv ( ""TMP"" ) ) == NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir = getenv ( ""TMP"" ) ) == NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir = getenv ( ""TEMP"" ) ) == NULL || * tmp_dir == '\\0' ) && ( ( tmp_dir = getenv ( ""TEMP"" )",0
418,"<S2SV_ModStart> = 0 ; if ( sockaddr ) { strncpy <S2SV_ModEnd> ( addr_text, <S2SV_ModStart> ( struct sockaddr_un <S2SV_ModEnd> * ) sock_addr <S2SV_ModStart> ) sock_addr ) -> sun_path, sizeof ( addr_text ) - 1 ) ; port = ntohs ( ( ( struct sockaddr_un <S2SV_ModEnd> * ) sock_addr <S2SV_ModStart> ( struct sockaddr_un <S2SV_ModEnd> * ) sock_addr <S2SV_ModStart> ( struct sockaddr_un <S2SV_ModEnd> * ) sock_addr <S2SV_ModStart> ) -> sun_path, sizeof ( addr_text ) - 1 ) ; addr_text [ sizeof ( addr_text ) - 1 ] = '\\0' ; protoname = ""unix"" ; break ; } if ( strlen ( addr_text ) < 2 ) { sprintf ( addr_text, ""<AF <S2SV_blank> %d>"", af ) ; } if ( strlen ( addr_text ) < 2 ) { sprintf ( addr_text, ""<AF <S2SV_blank> %d>"", af ) ; } else { sprintf ( addr_text, ""<AF <S2SV_blank> %d>"", af ) ; }",0
419,"<S2SV_ModStart> void write_buffer_16x16 ( tran_low_t <S2SV_ModEnd> * output,",1
420,<S2SV_ModStart> & 0xffff ; if ( p + 4 + c > sizeof ( event_rec ) - 4 ) return - EINVAL ;,0
421,"<S2SV_ModStart> avoid_reserve ) { <S2SV_ModEnd> struct page * <S2SV_ModStart> page * page ; struct address_space * mapping = vma -> vm_file -> f_mapping <S2SV_ModStart> ; if ( <S2SV_ModEnd> hugetlb_get_quota ( inode <S2SV_ModStart> ( inode -> i_mapping, chg ) ) return ERR_PTR ( - VM_FAULT_SIGBUS ) ; spin_lock ( & hugetlb_lock ) ; page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { hugetlb_put_quota ( inode -> i_mapping, chg ) ; return ERR_PTR ( - VM_FAULT_SIGBUS ) ; } } set_page_private ( page, ( unsigned long ) mapping ) ; vma_commit_reservation ( h, vma, addr ) ; return page ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
422,"<S2SV_ModStart> ( 4, ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> statistics <S2SV_blank> \'%s%s\'\\n"" <S2SV_ModEnd>, filegen_string, <S2SV_ModStart> ( 4, ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> statistics <S2SV_blank> \'%s%s\'\\n"" <S2SV_ModEnd>, filegen_string, <S2SV_ModStart> ( 4, ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> options <S2SV_blank> \'%s\'\\n"" <S2SV_ModEnd>, filegen_string,",0
423,"<S2SV_ModStart> -> stamp_path ) { if (! file_exists ( t -> stamp_path ) ) { log_unit_warning ( UNIT ( t ), ""Failed <S2SV_blank> to <S2SV_blank> touch <S2SV_blank> file: <S2SV_blank> %s"", bus_error_message ( & error, r ) ) ; timer_enter_dead ( t, TIMER_FAILURE_RESOURCES ) ; return ; }",0
424,"<S2SV_ModStart> fadst16 ( const tran_low_t * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t x0 = input [ 15 ] ; tran_high_t x1 = input [ 0 ] ; tran_high_t x2 = input [ 1 ] ; tran_high_t x3 = input [ 2 ] ; tran_high_t x4 = input [ 3 ] ; tran_high_t x5 = input [ 4 ] ; tran_high_t x6 = input [ 5 ] ; tran_high_t x7 = input [ 6 ] ; tran_high_t x8 = input [ 7 ] ; tran_high_t x9 = input [ 8 ] ; tran_high_t x10 = input [ 10 ] ; tran_high_t x11 = input [ 11 ] ; tran_high_t x12 = input [ 3 ] ; tran_high_",0
425,<S2SV_ModStart> ; # if HAVE_EDSP flags |= HAS_EDSP ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_NEON <S2SV_ModStart> HAVE_EDSP flags |= HAS_EDSP ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_NEON,0
426,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
427,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorAcc16 ( TIFF <S2SV_ModStart> wc ) ; return,1
428,"<S2SV_ModStart> tot_len ) ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
429,"<S2SV_ModStart> 8 ) ; if ( avio_rl16 ( pb )!= 1 ) { avpriv_request_sample ( avctx, ""unsupported <S2SV_blank> biBitCount <S2SV_blank> %i"", biBitCount ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> 8 ) ; if ( avio_rl16 ( pb )!= 1 ) { avpriv_request_sample ( avctx, ""unsupported <S2SV_blank> biBitCount <S2SV_blank> %i"", biBitCount ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> 8 ) ; if ( avio_rl16 ( pb )!= 1 ) { avpriv_request_sample ( avctx, ""unsupported <S2SV_blank> biBitCount <S2SV_blank> %i"", biBitCount ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> 8 ) ; if ( avio_rl16 ( pb )!= 1 ) { avpriv_request_sample ( avctx, ""unsupported <S2SV_blank> biBitCount <S2SV_blank> %i"", biBitCount ) ; return AVERROR_INVALIDDATA ; }",0
430,"<S2SV_ModStart> fpath = NULL <S2SV_ModEnd>, * cgdir <S2SV_ModStart> out ; } <S2SV_ModEnd> if (! <S2SV_ModStart> ( stderr, ""rmdir: <S2SV_blank> verifying <S2SV_blank> access <S2SV_blank> to <S2SV_blank> %s:%s <S2SV_blank> (req <S2SV_blank> path <S2SV_blank> %s)\\n"" <S2SV_ModEnd>, controller, <S2SV_ModStart> out ; } free ( fpath ) ; <S2SV_ModEnd> return ret ;",0
431,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flag & CL_UNPRIVILEGED <S2SV_ModStart> & CL_UNPRIVILEGED ) mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; if ( ( flag & CL_UNPRIVILEGED ) && ( mnt -> mnt. mnt_flags & MNT_READONLY ) ) mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; if ( ( flag & CL_UNPRIVILEGED ) && ( mnt -> mnt. mnt_flags & MNT_READONLY ) ) mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; if ( ( flag & CL_UNPRIVILEGED ) && ( mnt -> mnt. mnt_flags & MNT_READONLY ) ) mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; if ( ( flag & CL_UNPRIVILEGED ) && ( mnt -> mnt. mnt_flags & MNT_READONLY ) ) mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; if ( (,0
432,"<S2SV_ModStart> trans = & rds_loop_transport ; } else if ( trans == NULL ) { kmem_cache_free ( rds_conn_slab, conn ) ; conn = ERR_PTR ( - ENODEV ) ; goto out ; }",0
433,"<S2SV_ModStart> ) { if ( <S2SV_ModEnd> rdesc [ 104 <S2SV_ModStart> [ 105 ] == 0x26 && rdesc [ 110 ] == 0x80 && rdesc [ 111 ] == 0x21 ) { hid_info ( hdev, ""fixing <S2SV_blank> up <S2SV_blank> Sunplus <S2SV_blank> Wireless <S2SV_blank> Desktop <S2SV_blank> report <S2SV_blank> descriptor\\n"" ) ; rdesc [ 105 ] = rdesc [ 110 ] = 0x03 ; rdesc [ 106 ] = rdesc [ 111 ] = 0x21 ; } else if ( * rsize >= 104 ) { hid_info ( hdev, ""fixing <S2SV_blank> up <S2SV_blank> Sunplus <S2SV_blank> Wireless <S2SV_blank> Desktop <S2SV_blank> report <S2SV_blank> descriptor\\n"" ) ; rdesc [ 105 ] = rdesc [ 110 ] = 0x03 ; rdesc [ 106 ] = rdesc [ 111 ] = 0x21 ; } if ( * rsize >= 104 && rdesc [ 105 ] == 0x26 && rdesc [ 105 ] == 0x80 && rdesc [ 106 ] == 0x80 ) { hid_info ( hdev, ""fixing <S2SV_blank> up <S2SV_blank> Sunplus <S2SV_blank> Wireless <S2SV_blank> Desktop <S2SV_blank> report <S2SV_blank> descriptor\\n"" ) ; rdesc [ 105 ] =",0
434,"<S2SV_ModStart> + 2 ) ; if ( bodyLength > tot_len ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Not <S2SV_blank> EAPOL <S2SV_blank> key"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_NO_VALID_HANDSHAKE ; } <S2SV_ModStart> + 2 ) ; if ( bodyLength > tot_len ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Not <S2SV_blank> EAPOL <S2SV_blank> key"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_NO_VALID_HANDSHAKE ; }",0
435,<S2SV_ModStart> (! i8042_notimeout && str & I8042_STR_AUXERR <S2SV_ModEnd> ) dfl = <S2SV_ModStart> (! i8042_notimeout && str & I8042_STR_PARITY <S2SV_ModEnd> ) dfl = <S2SV_ModStart> (! i8042_notimeout && str & I8042_STR_TIMEOUT <S2SV_ModEnd> ) dfl = <S2SV_ModStart> (! i8042_notimeout && str & I8042_STR_AUXERR <S2SV_ModEnd> ) dfl = <S2SV_ModStart> (! i8042_notimeout && str & I8042_STR_TIMEOUT <S2SV_ModEnd> ) dfl = <S2SV_ModStart> (! i8042_notimeout && str & I8042_STR_PARITY <S2SV_ModEnd> ) dfl = <S2SV_ModStart> (! i8042_notimeout && str & I8042_STR_TIMEOUT <S2SV_ModEnd> ) dfl = <S2SV_ModStart> (! i8042_notimeout && str & I8042_STR_TIMEOUT <S2SV_ModEnd> ) dfl = <S2SV_ModStart> (! i8042_notimeout && str & I8042_STR_TIMEOUT <S2SV_ModEnd> ) dfl =,0
436,"<S2SV_ModStart> case NFSPROC_GETSTAT : if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dstat:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; } else if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; } else { if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; } else { if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; }",0
437,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> newName, uint8_t * udfName, int udfLen, uint8_t * fidName <S2SV_ModEnd>, int fidNameLen <S2SV_ModStart> newExtIndex ; } if ( udfName [ udfLen - 1 ] == '/' ) { if ( udfName [ udfLen - 1 ] == '/' ) { needsCRC = 1 ; curr = ILLEGAL_CHAR_MARK ; while ( index + 1 < udfLen && ( udfName [ index + 1 ] == '/' || udfName [ index + 1 ] == 0 ) ) index ++ ; } else { if ( udfName [ index + 1 ] == '/' ) { needsCRC = 1 ; curr = ILLEGAL_CHAR_MARK ; while ( index + 1 < udfLen && ( udfName [ index + 1 ] == '/' || udfName [ index + 1 ] == 0 ) ) index ++ ; } if ( curr == EXT_MARK && ( udfName [ index + 1 ] == '/' || udfName [ index + 1 ] == 0 ) ) index ++ ; } if ( curr == ILLEGAL_CHAR_MARK && ( udfName [ index + 1 ] == 0 )",0
438,"<S2SV_ModStart> void count_segs_sb ( VP9_COMP * cpi, <S2SV_ModEnd> const TileInfo * <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd>, int * <S2SV_ModStart> BLOCK_SIZE bsize ) { <S2SV_ModEnd> int bw, <S2SV_ModStart> ; bw = num_8x8_blocks_wide_lookup [ mi <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> ] ; bh = num_8x8_blocks_high_lookup [ mi <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> ] ; if ( bw < bs && bh < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, bs, mi_row, mi_col ) ; } else if ( bw < bs && bh < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, bs, mi_row, mi_col ) ; count_segs ( cpi, tile, mi_8x8 + hbs * mis, no_pred_segcounts, temporal_predictor_count",0
439,<S2SV_ModStart> c -> flags & CLIENT_CLOSE_AFTER_REPLY <S2SV_ModEnd> ) break ;,0
440,<S2SV_ModStart> = EXT4_GET_BLOCKS_CREATE ; if ( mpd -> b_state & ( 1 << BH_Unwritten ) ) get_blocks_flags |= EXT4_GET_BLOCKS_UNWRITTEN ; if ( mpd -> b_state & ( 1 << BH_Mapped ) ) get_blocks_flags |= EXT4_GET_BLOCKS_DELALLOC_RESERVE ; if ( mpd -> b_state & ( 1 << BH_Delay ) ) get_blocks_flags |= EXT4_GET_BLOCKS_DELALLOC_RESERVE ; if ( mpd -> b_state & ( 1 << BH_Delay ) ) get_blocks_flags |= EXT4_GET_BLOCKS_DELALLOC_RESERVE ; if ( mpd -> b_state & ( 1 << BH_Delay ) ) get_blocks_flags |= EXT4_GET_BLOCKS_DELALLOC_RESERVE ; if ( mpd -> b_state & ( 1 << BH_Unwritten ) ) get_blocks_flags |= EXT4_GET_BLOCKS_UNWRITTEN ;,0
441,"<S2SV_ModStart> ; int ret <S2SV_ModEnd> ; s = <S2SV_ModStart> ; if ( d2i_DSA_SIG <S2SV_ModEnd> ( & s <S2SV_ModStart>, & sigbuf, siglen <S2SV_ModEnd> ) == NULL <S2SV_ModStart> goto err ; ret = DSA_do_verify ( dgst, dgst_len, s, dsa ) ; err : DSA_SIG_free ( s ) ;",0
442,<S2SV_ModStart> NULL ) ; <S2SV_ModEnd> rv = gdDPExtractData <S2SV_ModStart> size ) ; if ( rv == NULL ) { rv = NULL ; } else <S2SV_ModEnd> rv = gdDPExtractData <S2SV_ModStart> size ) ; if ( rv == NULL ) { rv = NULL ; },0
443,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
444,"<S2SV_ModStart> = 0 ; size_t addrlen = 0 ; <S2SV_ModStart>, handle, & addrlen <S2SV_ModEnd>, & p <S2SV_ModStart>, & addrlen <S2SV_ModEnd>, & p <S2SV_ModStart>, & addrlen <S2SV_ModEnd>, & p <S2SV_ModStart>, & addrlen <S2SV_ModEnd>, & p <S2SV_ModStart>, & addrlen <S2SV_ModEnd>, & p <S2SV_ModStart>, & addrlen <S2SV_ModEnd>, & p <S2SV_ModStart>, & addrlen <S2SV_ModEnd>, & p <S2SV_ModStart>, & addrlen <S2SV_ModEnd>, & p <S2SV_ModStart>, & addrlen <S2SV_ModEnd>, NULL, <S2SV_ModStart>, & addrlen <S2SV_ModEnd>, NULL, <S2SV_ModStart>, & addrlen <S2SV_ModEnd>, NULL, <S2SV_ModStart>, & addrlen <S2SV_ModEnd>, NULL, <S2SV_ModStart>, & addrlen <S2SV_ModEnd>, NULL, <S2SV_ModStart>, & addrlen <S2SV_ModEnd>, NULL, <S2SV_ModStart>, & addrlen <S2SV_ModEnd>, NULL, <S2SV_ModStart>, & addrlen <S2SV_ModEnd>, NULL, <S2SV_ModStart>, & addrlen <S2SV_ModEnd>, NULL, <S2SV_ModStart>, & addrlen <S2SV_ModEnd>, NULL, <S2SV_ModStart>, & addrlen <S2SV_ModEnd>, NULL, <S2SV_ModStart>, & addrlen <S2SV_ModEnd>, NULL, <S2SV_ModStart>, & addrlen <S2SV_ModEnd>, NULL,",0
445,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> ; if ( separator!= NULL ) { * separator = '\\0' ; strSafeCopy ( connection -> request. auth. user, token, HTTP_SERVER_USERNAME_MAX_LEN ) ; token = separator + 1 ; } } <S2SV_ModEnd> TRACE_DEBUG ( ""Authorization <S2SV_blank> header:\\r\\n"" <S2SV_ModStart> } # endif # if HTTP_SERVER_DIGEST_SUPPORT == ENABLED ) else if ( osStrcasecmp ( token, ""Digest"" ) ) { error_t error ; size_t n ; char_t * separator ; if ( separator!= NULL ) { * separator = '\\0' ; strSafeCopy ( connection -> request. auth. user, token, HTTP_SERVER_USERNAME_MAX_LEN ) ; token = separator + 1 ; if ( token!= NULL ) { error = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> '=' ) ; if ( separator!= NULL ) { * separator = '\\0' ; strSafeCopy ( connection -> request. auth. password, token, HTTP_SERVER_DIGEST_MAX_LEN ) ; token = separator",0
446,<S2SV_ModStart> rctx -> rbuf [ 5 <S2SV_ModEnd> ] ) ;,0
447,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
448,"<S2SV_ModStart> * pegasus, u32 <S2SV_ModEnd> indx, void <S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM <S2SV_ModEnd> ; ret = <S2SV_ModStart>, indx, buf <S2SV_ModEnd>, size, <S2SV_ModStart>, size, buf <S2SV_ModEnd> ) ; if <S2SV_ModStart> ret ) ; kfree ( buf ) ;",0
449,"<S2SV_ModStart> asdl_seq * body, asdl_arena * arena <S2SV_ModStart> = body ; p -> v. Module. arena = arena ;",0
450,<S2SV_ModStart> destroy_list ) ; sas_destruct_port ( port <S2SV_ModEnd> ) ; },0
451,"<S2SV_ModStart> * src, vpx_bit_depth_t bit_depth <S2SV_ModStart> ; # endif # if CONFIG_VP9_HIGHBITDEPTH switch ( bit_depth ) { case VPX_BITS_8 : # endif # if CONFIG_VP9_HIGHBITDEPTH switch ( bit_depth ) { case VPX_BITS_10 : # endif # if CONFIG_VP9_HIGHBITDEPTH switch ( bit_depth ) { case VPX_BITS_12 : # endif # endif # if CONFIG_VP9_HIGHBITDEPTH switch ( bit_depth ) { case VPX_BITS_12 : # if CONFIG_VP9_HIGHBITDEPTH switch ( bit_depth ) { case VPX_BITS_8 : # endif # if CONFIG_VP9_HIGHBITDEPTH switch ( bit_depth ) { case VPX_BITS_10 : # endif # if CONFIG_VP9_HIGHBITDEPTH switch ( bit_depth ) { case VPX_BITS_12 : # if CONFIG_VP9_HIGHBITDEPTH switch ( bit_depth ) { case VPX_BITS_12 : # if CONFIG_VP9_HIGHBITDEPTH switch ( bit_depth",0
452,<S2SV_ModStart> cdev ) ; } kfree ( fud ) ;,0
453,"<S2SV_ModStart> return code ; code = verify_s4u_x509_user_checksum ( context, tgs_subkey? tgs_subkey : tgs_session, & req_data, request -> nonce, * s4u_x509_user ) ; if ( code ) { * status = ""INVALID_S4U2SELF_CHECKSUM"" ; krb5_free_pa_s4u_x509_user ( context, * s4u_x509_user ) ; * s4u_x509_user = NULL ; return KRB5KDC_ERR_C_PRINCIPAL_UNKNOWN ; }",0
454,"<S2SV_ModStart> scsi_disk_emulate_command ( SCSIDiskReq <S2SV_ModEnd> * r, <S2SV_ModStart> outbuf ) ; if (! scsi_disk_emulate_read_toc ( r ) ) goto illegal_request ;",0
455,<S2SV_ModStart> cur_pic. f || s -> avctx -> profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO || s -> avctx -> profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO,0
456,"<S2SV_ModStart> ) { u64 map_size ; <S2SV_ModStart> ) + RDS_CONG_MAP_BYTES ; map_size = be32_to_cpu ( rm -> m_inc. i_hdr. h_len ) ; if ( map_size!= ~ ( u64 ) 0 ) { rds_cong_map_updated ( conn -> c_fcong, map_size ) ; return 0 ; } <S2SV_ModStart> m_inc ) ; if (! map_size ) return 0 ; return <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
457,<S2SV_ModStart> buf ) ) { if ( ext_block -> depth == 0 ) { ext_block = ( struct grub_ext4_extent_header * ) buf ; } else { ext_block = ( struct grub_ext4_extent_header * ) buf ; },0
458,<S2SV_ModStart> ; if ( key -> state == KEY_IS_UNINSTANTIATED <S2SV_ModEnd> ) { ret,0
459,"<S2SV_ModStart> ( * mh, hlen <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ( * mh, hlen <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ( * mh, hlen <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ( * mh, hlen <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ( * mh, hlen <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ( * mh, hlen <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> ) ) ; ND_TCHECK ( mh -> ip6m_data16 [ 1 ] ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> nonce <S2SV_blank> id=0x%08x"", EXTRACT_32BITS ( & bp [ hlen ] ) ) ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> nonce <S2SV_blank> id=0x%08x"", EXTRACT_32BITS ( & bp [ hlen + 1 ] ) ) ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> nonce <S2SV_blank> id=0x%08x"", EXTRACT_32BITS ( & bp [ hlen ] ) ) ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> nonce <S2SV_blank> id=0x%08x"", EXTRACT_32BITS ( & bp [",0
460,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
461,"<S2SV_ModStart> = hmi_data ; if ( hmi_size < 18 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> channel ; } if ( memcmp ( hmi_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> note ; } if ( memcmp ( hmi_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; return NULL ; } if ( memcmp ( hmi_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; return NULL ; }",0
462,<S2SV_ModStart> -> id ; if ( * addr_len < sizeof ( * haddr ) ) * addr_len = sizeof ( * haddr ) ;,0
463,<S2SV_ModStart> ; fh32 [ 1 <S2SV_ModEnd> ] = inode,0
464,"<S2SV_ModStart> status = ""CLIENT <S2SV_blank> KEY <S2SV_blank> EXPIRED"" ; if ( vague_errors ) return ( KRB_ERR_GENERIC ) ; else return ( KDC_ERR_KEY_EXP ) ; } if ( isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( server. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) ) { * status = ""REQUIRED <S2SV_blank> PWCHANGE"" ; return ( KDC_ERR_KEY_EXP ) ; } if ( isflagset ( server. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) ) { * status = ""REQUIRED <S2SV_blank> PWCHANGE"" ; return ( KDC_ERR_KEY_EXP ) ; } if ( isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( server. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( client. attributes, KRB5_KDB",0
465,"<S2SV_ModStart> case BPF_SUB : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else { dst_reg -> smin_value = S64_MIN ; } break ; case BPF_SUB : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else { dst_reg -> smin_value = S64_MIN ; } break ; case BPF_SUB : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val )",0
466,"<S2SV_ModStart> ; if ( cpi <S2SV_ModEnd> -> oxcf. <S2SV_ModStart> LPF_PICK_FROM_Q ) { const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; const int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; lf -> filter_level = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; } else { search_filter_level ( sd, cpi, method == LPF_PICK_FROM_SUBIMAGE ) ; }",0
467,<S2SV_ModStart> case BT_DM_DISABLE_EVT : { BD_NAME bdname ; bt_status_t status ; if ( status == BT_STATUS_SUCCESS ) { BTIF_DmBleConfigLocalPrivacy ( BLE_LOCAL_PRIVACY_DISABLED ) ; } else { BTIF_DmBleConfigLocalPrivacy ( BLE_LOCAL_PRIVACY_DISABLED ) ; } if ( status == BT_STATUS_SUCCESS ) { BTIF_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } else { BT_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } if ( status == BT_STATUS_SUCCESS ) { BTIF_DmBleConfigLocalPrivacy ( BLE_LOCAL_PRIVACY_DISABLED ) ; } if ( status == BT_STATUS_SUCCESS ) { BTIF_DmSetDeviceName ( btif_get_default_local_name ( ) ) ; } else { BT_DmSetDeviceName ( btif_get_default_local,0
468,"<S2SV_ModStart> ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
469,<S2SV_ModStart> : { int <S2SV_ModEnd> a = getnum,0
470,<S2SV_ModStart> void usage_exit ( void,1
471,"<S2SV_ModStart> ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"" <S2SV_ModEnd>, o_row_count, <S2SV_ModStart> == 3 ) { unsigned int * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_element_count + 1 ) ) ; * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( double * ) malloc ( sizeof ( double ) * ( * o_element_count + 1 ) ) ; if ( * o_row_idx == NULL ) { fprintf ( stderr, ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> memory!\\n"" ) ; return ; }",0
472,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
473,"<S2SV_ModStart> vpx_codec_err_t res ;<extra_id_1>res = VPX_CODEC_INVALID_PARAM ; else if (! data ||! data_sz ) res = VPX_CODEC_INVALID_PARAM ; else if (! ctx -> iface ) res = VPX_CODEC_ERROR ; else if (! ctx -> priv -> alg_priv ) res = VPX_CODEC_INVALID_PARAM ; else if (! ctx -> iface -> dec. decode ( ctx -> priv -> alg_priv, data, data_sz, user_priv, deadline ) ; else if (! ctx -> iface -> dec. decode ) res = VPX_CODEC_ERROR ; else { res = ctx -> iface -> dec. decode ( ctx -> priv -> alg_priv, data, data_sz, user_priv, deadline ) ; } return SAVE_STATUS ( ctx, res <S2SV_ModEnd> ) ; }",0
474,"<S2SV_ModStart> ; if ( strchr ( value, ',' ) ) { av_log ( s, AV_LOG_WARNING, ""Missing <S2SV_blank> PPS <S2SV_blank> in <S2SV_blank> sprop-parameter-sets, <S2SV_blank> ignoring\\n"" ) ; return 0 ; } else if ( strchr ( value, ',' ) ) { av_log ( s, AV_LOG_WARNING, ""Missing <S2SV_blank> PPS <S2SV_blank> in <S2SV_blank> sprop-parameter-sets, <S2SV_blank> ignoring\\n"" ) ; return 0 ; } else { par -> extradata_size = 0 ; av_freep ( & par -> extradata ) ; ret = ff_h264_parse_sprop_parameter_sets ( s, & par -> extradata, & par -> extradata_size, value ) ; av_log ( s, AV_LOG_DEBUG, ""Extradata <S2SV_blank> set <S2SV_blank> to <S2SV_blank> %p <S2SV_blank> (size: <S2SV_blank> %d)\\n"", par -> extradata_size ) ; return ret ; }",0
475,"<S2SV_ModStart> inode * inode, fmode_t fmode <S2SV_ModStart> inode ) ; if ( fmode & FMODE_READ ) ei -> i_file_format = isofs_file_read_nolock ; else ei -> i_file_format = isofs_file_read_nolock ; else if ( fmode & FMODE_WRITE ) ei -> i_file_format = isofs_file_read_nolock ; else if ( fmode & FMODE_READ ) ei -> i_file_format = isofs_file_read_nolock ; else ei -> i_file_format = isofs_file_read_nolock ;",0
476,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""Con_Dump_f: <S2SV_blank> Only <S2SV_blank> the <S2SV_blank> \\"".txt\\"" <S2SV_blank> extension <S2SV_blank> is <S2SV_blank> supported <S2SV_blank> by <S2SV_blank> this <S2SV_blank> command!\\n"" ) ; return ; }",1
477,"<S2SV_ModStart> ) ) ; if ( source_address_length < 0 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size!"", source_address_length ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( source_address_length < 0 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size!"", source_address_length ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( source_address_length < 0 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size!"", source_address_length ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( source_address_length < 0 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size!"", source_address_length ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( source_address_length < 0 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size!"", source_address_length",0
478,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> k"", <S2SV_ModStart> } } }",0
479,"<S2SV_ModStart> } else { if ( pmu_access_cycle_counter_el0_disabled ( vcpu ) ) return false ; idx = ARMV8_PMU_CYCLE_IDX <S2SV_ModEnd> ; } } <S2SV_ModStart> else { if ( pmu_access_event_counter_el0_disabled ( vcpu ) ) return false ; idx = ( r -> CRm & 3 ) << 3 ) | ( r -> Op2 & 7 ) ; } else { if ( pmu_access_cycle_counter_el0_disabled ( vcpu ) ) return false ; idx = ( r -> CRm & 3 ) << 3 ) | ( r -> Op2 & 7 ) ; } if (! pmu_counter_idx_valid ( vcpu, idx ) ) return false ; if ( p -> is_write ) { if ( pmu_access_el0_disabled ( vcpu ) ) return false ; kvm_pmu_set_counter_value ( vcpu, idx, p -> regval ) ; } else { p -> regval = kvm_pmu_get_counter_value ( vcpu, idx ) ; }",0
480,<S2SV_ModStart> case IS_STRING : if ( Z_TYPE_PP ( zval_affine_elem ) == IS_DOUBLE ) { <S2SV_ModStart> zval_affine_elem ) ; } <S2SV_ModStart> case IS_DOUBLE : if ( Z_TYPE_PP ( zval_affine_elem ) == IS_LONG ) { affine [ i ] = Z_LVAL ( zval_affine_elem ) ; } else { affine [ i ] = Z_DVAL ( zval_affine_elem ) ; } <S2SV_ModStart> case IS_LONG : if ( Z_TYPE_PP ( zval_affine_elem ) == IS_DOUBLE ) { affine [ i ] = Z_DVAL ( zval_affine_elem ) ; } else if ( Z_TYPE_PP ( zval_affine_elem ) == IS_LONG ) { affine [ i ] = Z_LVAL ( zval_affine_elem ) ; } else { affine [ i ] = Z_DVAL ( zval_affine_elem ) ; },0
481,<S2SV_ModStart> self ) { if ( self -> dict == NULL ) { Py_RETURN_NONE ; },0
482,<S2SV_ModStart> SQL_DROP ) ; sqlite3_free_string <S2SV_ModEnd> ( szSepLine ) <S2SV_ModStart> SQL_DROP ) ; sqlite3_free_string <S2SV_ModEnd> ( szSepLine ) <S2SV_ModStart> SQL_DROP ) ; sqlite3_free_string <S2SV_ModEnd> ( szSepLine ),0
483,<S2SV_ModStart> - EFAULT ; if ( offset + len > sizeof ( * data ) ) return - EINVAL ;,0
484,"<S2SV_ModStart> argv [ ] ) { <S2SV_ModEnd> char * p <S2SV_ModStart> ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2010 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\n <S2SV_blank> This <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\\n <S2SV_blank> There <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness.\\n\\\n <S2SV_blank> particular <S2SV_blank> purpose.\\n"" <S2SV_ModEnd> ) ; exit <S2SV_ModStart> ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2010 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\n <S2SV_blank> This <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\\n <S2SV_blank> There <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness.\\n\\\n <S2SV_blank> There <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or",0
485,<S2SV_ModStart> ; if (! serial -> type -> set_termios ) { retval = - ENODEV ; goto error_set_termios ; },0
486,<S2SV_ModStart> cpuctx_lock ) ; mutex_lock ( & cpuctx -> ctx. mutex ) ; <S2SV_ModStart> type = cpu_context ; mutex_unlock ( & cpuctx -> ctx. lock ) ;,0
487,"<S2SV_ModStart> len, struct file * file <S2SV_ModStart> = 1 ; file -> f_pos = 0 ; <S2SV_ModStart> = 1 ; file -> f_pos = 0 ;",0
488,"<S2SV_ModStart> ext4_group_t flex_group ; unsigned <S2SV_ModStart> sbi -> s_log_groups_per_flex ; unsigned int <S2SV_ModEnd> size_t size ; <S2SV_ModStart> sbi -> s_log_groups_per_flex ; if ( sbi -> s_groups_count < 2 ) { sbi -> s_log_groups_per_flex = 0 ; return 1 ; } <S2SV_ModEnd> flex_group_count = ( <S2SV_ModStart> 1 ) { sbi -> s_log_groups_per_flex = 0 ; goto failed ; } <S2SV_ModEnd> atomic_add ( ext4_free_inodes_count <S2SV_ModStart> ), & sbi -> s_flex_groups [ flex_group ]. free_inodes ) ; atomic_add ( ext4_free_group_clusters ( sb, gdp ), & sbi -> s_flex_groups [ flex_group ]. free_clusters ) ; atomic_add ( ext4_used_dirs_count ( sb, gdp ), & sbi -> s_flex_groups [ flex_group ]. used_dirs ) ; atomic_add ( ext4_free_inodes_count ( sb, gdp ), & sbi -> s_",0
489,<S2SV_ModStart> ( unlikely ( chunk_length > SCTP_MAX_CHUNK_SIZE ) ) return 0 ; if (,0
490,"<S2SV_ModStart> ; for ( ; a && i < count ; ++ i ) n = cJSON_CreateString ( strings [ i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ;",0
491,"<S2SV_ModStart> ) ) { if (! cli_sslclifp ( cptr ) ) { sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> SASL"", acptr, ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> SASL"", realhost ) ; } else { sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> SASL"", realhost ) ; } else if (! EmptyString ( <S2SV_ModEnd> cli_sslclifp ( cptr <S2SV_ModStart> cptr ) ) ) { sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> SASL"", realhost ) ; } else { sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> SASL"", realhost ) ; } else { sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> S",0
492,<S2SV_ModStart> # endif # if HAVE_FAST_UNALIGNED if ( ( long ) src2 & ( sizeof ( long ) - 1 ) ) { for ( ; i < w - 8 ; i += 8 ) { long a = * ( long * ) ( src1 + i ) ; long b = * ( long * ) ( src2 + i ) ; * ( long * ) ( dst + i ) = ( ( a | pb_80 ) - ( b & pb_80 ) ) ^ ( ( a ^ b ^ pb_80 ) & pb_80 ) ; * ( long * ) ( dst + i ) = ( ( a | pb_80 ) - ( a & pb_7f ) ) ^ ( a ^ b ^ pb_80 ) & pb_7f ) ; } for ( ; i < w - 8 ; i += 8 ) { long a = * ( long * ) ( src1 + i ) ; long b = * ( long * ) ( src2 + i ) ; * ( long * ) ( dst + i ) = ( ( a | pb_80 ) - ( b & pb_80 ) ) ^ ( a & pb_7f ) ) ^ ( a ^,0
493,<S2SV_ModStart> -> forward_matches ; if ( match_length > callback_args -> data_size ) { return ERROR_DATA_OVERFLOW ; },0
494,"<S2SV_ModStart>! no_port_forwarding_flag && ( ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 &&! options. disable_forwarding ) ) { c = channel_connect_to_path ( target, ""direct-streamlocal@openssh.com"", ""direct-streamlocal"" ) ; } else if ( ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 &&! no_port_forwarding_flag &&! options. disable_forwarding ) { logit ( ""refused <S2SV_blank> streamlocal <S2SV_blank> port <S2SV_blank> forward: <S2SV_blank> "" ""originator <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d, <S2SV_blank> target <S2SV_blank> %s"", originator, originator_port ) ; c = channel_connect_to_path ( target, ""direct-streamlocal@openssh.com"", ""direct-streamlocal"" ) ; }",0
495,"<S2SV_ModStart> length ) { int r ; <S2SV_ModStart> ) ) { if (! bitstream_read_bit ( bc ) ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ) ) { if (! bitstream_read_bit ( bc ) ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; } else { if (! bitstream_read_bit ( bc ) ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ) ) { if (! bitstream_read_bit ( bc ) ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; } else { if (! bitstream_read_bit ( bc ) ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_",0
496,<S2SV_ModStart> return err ; },0
497,"<S2SV_ModStart> ; if ( lookup_attr_id <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_body, & tmp ) < 0 ) { return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""required <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> missing <S2SV_blank> from <S2SV_blank> Module"" ) ; return 1 ; } if ( tmp == NULL ) { PyErr_SetString ( PyExc_TypeError, ""Module <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> must <S2SV_blank> be <S2SV_blank> a <S2SV_blank> list, <S2SV_blank> not <S2SV_blank> a <S2SV_blank> %.200s"", tmp -> ob_type -> tp_name ) ; goto failed ; } len = PyList_GET_SIZE ( tmp ) ; body = _Ta3_asdl_seq_new ( len, arena ) ; if ( body == NULL ) { PyErr_SetString ( PyExc_RuntimeError, ""Module <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> changed <S2SV_blank> size <S2SV_blank> during <S2SV_blank> iteration"" ) ; goto failed ; } asdl_seq_SET ( body",0
498,<S2SV_ModStart> ; register int <S2SV_ModEnd> hstartcol ; if <S2SV_ModStart> 2 ) { if ( numrows < 2 ) { abort ( ) ; } hstartcol = ( numrows + 1 - parity ) >> 1 ; n = m ; dstptr = buf ; srcptr = & a [ hstartcol * stride ] ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr = buf ; n = m ; while ( n -- > 0 ),0
499,"<S2SV_ModStart> ; iwl_sta_ucode_deactivate ( priv <S2SV_ModEnd>, sta_id )",0
500,"<S2SV_ModStart> ; log_file = fopen_safe <S2SV_ModEnd> ( file_name,",1
501,"<S2SV_ModStart> ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(Mi|ssi)ssippi/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""mississippi\\tmississippi.mississippi\\nmississippi"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(Mi|ssi)ssippi/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""mississippi\\tmississippi.mississippi\\nmississippi"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(Mi|ssi)ssippi/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""mississippi\\tmississippi.mississippi\\nmississippi"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(Mi|ssi)ssippi/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""mississip",0
502,"<S2SV_ModStart> ; ) ; spin_lock_irqsave ( & hashbin -> hb_spinlock, flags, hashbin_lock_depth ++ ) ; <S2SV_ModStart> ( queue ) { queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; } while ( queue ) { queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; while ( queue ) { queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; while ( queue ) { queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; } } queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; while ( queue ) { if ( free_func ) ( queue ) ; queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; } } hashbin -> hb_current <S2SV_ModEnd> = NULL ; <S2SV_ModStart> ~ HB",0
503,"<S2SV_ModStart> EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOSUID ) &&! ( mnt_flags & MNT_NOSUID ) ) { return - EPERM ; } if ( ( mnt -> mnt. mnt_flags & MNT_LOCK_NOSUID ) &&! ( mnt_flags & MNT_NOSUID ) ) { return - EPERM ; } err = security_sb_remount ( sb, data ) ; if ( err ) return err ; down_write ( & sb -> s_umount ) ; if ( flags & MS_BIND ) err = change_mount_flags ( path -> mnt, flags ) ; else if (! capable ( CAP_SYS_ADMIN ) ) err = - EPERM ; else if (! capable ( CAP_SYS_ADMIN ) ) err = - EPERM ; else if (! capable ( CAP_SYS_ADMIN ) ) err = - EPERM ; else if (! capable ( CAP_SYS_ADMIN ) ) err = - EPERM ; else err = do_remount_sb ( sb, flags, data,",0
504,"<S2SV_ModStart> * skb ; struct packet_tx_info * tx_info <S2SV_ModStart> out_free ; } tx_info = rcu_dereference_protected ( sk -> sk_omem_info, sock_owned_by_user ( sk ) ) ;",0
505,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
506,<S2SV_ModStart> num_ports < 2 ||! serial -> port [ 1 ],0
507,"<S2SV_ModStart> write_junk = 1 <S2SV_ModEnd> ; RiffChunkHeader riffhdr <S2SV_ModStart> ; DS64Chunk ds64_chunk ; JunkChunk junkchunk ; int64_t total_riff_bytes ; <S2SV_ModStart> ds64_chunk ) { if ( debug_logging_mode ) error_line ( ""can\'t <S2SV_blank> create <S2SV_blank> valid <S2SV_blank> RIFF <S2SV_blank> wav <S2SV_blank> header <S2SV_blank> for <S2SV_blank> non-normalized <S2SV_blank> floating <S2SV_blank> data!"" ) ; return FALSE ; } if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_data_bytes > 0xff000000 ) { if ( debug_logging_mode ) error_line ( ""total_data_bytes <S2SV_blank> = <S2SV_blank>",0
508,"<S2SV_ModStart> msg ) ; memset ( msg_sys -> msg_name, 0, sizeof ( msg_sys -> msg_name ) ) ; <S2SV_ModStart> ( MSG_CMSG_COMPAT & msg_sys -> msg_flags, 0, sizeof ( msg_sys -> msg_name ) ) ; <S2SV_ModStart>, & addr, msg_sys -> msg_iovlen ) ; if ( err < 0 ) goto out_freeiov ; total_len = err ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; err = ( nosec? sock_recvmsg_nolock : sock_recvmsg ) ( sock, msg, msg_sys, flags ) ; if ( err < 0 ) goto out_freeiov ; total_len = err ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_",0
509,<S2SV_ModStart> inode ) ; struct metapath * mp2 = & mp -> mp_le [ height ] ; struct gfs2_dinode * ip = GFS2_I ( inode ) ; struct gfs2_dinode * ip2 = GFS2_I ( inode ) ; struct gfs2_dinode * ip2 = GFS2_I ( inode ) ; struct gfs2_dinode * ip2 = GFS2_I ( inode ) ; struct gfs2_dinode * ip2 = GFS2_I ( inode ) ; struct gfs2_dinode * ip2 = GFS2_I ( inode ) ; struct gfs2_dinode * ip2 = GFS2_I ( inode ) ; struct gfs2_dinode * ip2 = GFS2_I ( inode ) ; struct gfs2_dinode * ip2 = GFS2_I ( inode ) ; struct gfs2_dinode * ip2 = GFS2_I ( inode ) ; struct gfs2_dinode * ip2 = GFS2_I ( inode ) ; <S2SV_ModStart>,0
510,"<S2SV_ModStart> ; fprintf ( stderr, ""Codec: <S2SV_blank> %s\\n"", vpx_codec_iface_name <S2SV_ModEnd> ( global -> <S2SV_ModStart> ( ) ) ) ; fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> index ) ; if ( input -> use_i420 ) { fprintf ( stderr, ""\\nSource <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } if ( input -> use_i420 ) { fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } if ( input -> use_i420 ) { fprintf ( stderr,",0
511,"<S2SV_ModStart> ; PROFILER_ENTER ( <S2SV_ModEnd> context -> priv <S2SV_ModStart> -> priv -> prof_nsc_rle_decompress_data ) ; <S2SV_ModStart> -> priv -> prof_nsc_rle_decompress_data ) ; <S2SV_ModStart> -> decode ) ; if (! freerdp_image_copy ( pDstData, DstFormat, nDstStride, nXDst, nYDst, width, height, context -> BitmapData, PIXEL_FORMAT_BGRA32, 0, 0, 0, NULL, flip ) ) return FALSE ; if (! freerdp_image_copy ( pDstData, DstFormat, nDstStride, nXDst, nYDst, width, height, context -> BitmapData, PIXEL_FORMAT_BGRA32, 0, 0, 0, NULL, flip ) ) return FALSE ; if (! freerdp_image_copy ( pDstData, DstFormat, nDstStride, nXDst, nYDst, width, height, context -> BitmapData, PIXEL_FORMAT_BGRA32, 0, 0, 0, 0, 0, NULL, flip ) ) return FALSE ;",0
512,"<S2SV_ModStart> ( value == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> value <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } valueAVT = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; if ( valueAVT == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> value <S2SV_blank> of <S2SV_blank> a <S2SV_blank> literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } if ( valueAVT == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> value <S2SV_blank> of <S2SV_blank> a <S2SV_blank> literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> is <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } valueAVT = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; } else { valueAVT = xmlDictLookup ( ctxt -> dict, BAD_CAST """",",0
513,"<S2SV_ModStart> ( copy_file ( ""/etc/skel/.zshrc"" <S2SV_ModEnd>, fname, <S2SV_ModStart> ( copy_file ( ""/etc/skel/.zshrc"" <S2SV_ModEnd>, fname, <S2SV_ModStart> ( copy_file ( ""/etc/skel/.zshrc"" <S2SV_ModEnd>, fname, <S2SV_ModStart> ( copy_file ( ""/etc/skel/.cshrc"" <S2SV_ModEnd>, fname, <S2SV_ModStart> ( copy_file ( ""/etc/skel/.cshrc"" <S2SV_ModEnd>, fname, <S2SV_ModStart> ( copy_file ( ""/etc/skel/.cshrc"" <S2SV_ModEnd>, fname, <S2SV_ModStart> ( copy_file ( ""/etc/skel/.cshrc"" <S2SV_ModEnd>, fname, <S2SV_ModStart> ( copy_file ( ""/etc/skel/.cshrc"" <S2SV_ModEnd>, fname, <S2SV_ModStart> ( copy_file ( ""/etc/skel/.cshrc"" <S2SV_ModEnd>, fname, <S2SV_ModStart> ( copy_file ( ""/etc/skel/.cshrc"" <S2SV_ModEnd>, fname, <S2SV_ModStart> ( copy_file ( ""/etc/skel/.cshrc"" <S2SV_ModEnd>, fname, <S2SV_ModStart> ( copy_file ( ""/etc/skel/.cshrc"" <S2SV_ModEnd>, fname, <S2SV_ModStart> ( copy_file ( ""/etc/skel/.csh",0
514,<S2SV_ModStart> fv -> b ) ; else if ( fv -> b. nextsame == NULL || fv -> b. sf -> fv!= & fv -> b ) { return ( false ) ; } else if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 2 &&! _FVMenuSave ( fv ) ) return ( false ) ; else SFClearAutoSave ( sf ) ; } else if ( AskChanged ( fv -> b. sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 0 &&! _FVMenuSave ( fv ) ) return ( false ) ; else SFClearAutoSave ( sf ) ; } else if ( AskChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 0 &&! _FVMenuSave ( fv ) ) return ( false ) ; } else if ( AskChanged ( fv -> b. sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 0 &&! _FVMenuSave ( fv ) ) return ( false ) ; else SFClearAutoSave ( sf ) ; },0
515,<S2SV_ModStart> msix_tab_size % 4096 <S2SV_ModEnd> == 0 ),0
516,<S2SV_ModStart> timr ) ; period = timespec_to_ns ( new_setting -> it_interval ) ; if ( period == 0 ) { period = timespec_to_ns ( new_setting -> it_value ) ; } else { when = timespec_to_ns ( new_setting -> it_value ) ; period = timespec_to_ns ( new_setting -> it_interval ) ; },0
517,"<S2SV_ModStart> ; if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
518,<S2SV_ModStart> case OFreshOID : if ( caml_get_oo_id ( ) == - 1 ) { caml_set_oo_id ( ( value ) dest ) ; } else if ( caml_get_oo_id ( ) == - 1 ) { caml_set_oo_id ( ( value ) dest ) ; } else if ( caml_get_oo_id ( ) == - 1 ) { caml_set_oo_id ( ( value ) dest ) ; } else if ( caml_get_oo_id ( ) == - 1 ) { caml_set_oo_id ( ( value ) dest ) ; } else if ( caml_get_oo_id ( ) == - 1 ) { caml_set_oo_id ( ( value ) dest ) ; } else if ( caml_get_oo_id ( ) == - 1 ) { caml_set_oo_id ( ( value ) dest ) ; } else if ( caml_get_oo_id ( ) == - 1 ) { caml_set_oo_id ( ( value ) dest ) ; } else if ( caml_get_oo_id,0
519,<S2SV_ModStart> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
520,"<S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd> ) ; ksz8851WriteReg <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, 0 ) <S2SV_ModStart> ( interface, KSZ8851_ISR ) ; if ( ( isr & KSZ8851_ISR_LCIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_LCIS <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_LCIS <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, KSZ8851_ISR, KSZ8851_ISR_TXIS <S2SV_ModEnd> ) ; n <S2SV_ModStart> ( interface, KSZ8851_TXMIR <S2SV_ModEnd> ) & TXMIR_TXMA_MASK <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, ier ) <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, ier ) <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, ier ) <S2SV_ModStart> ( interface, KSZ8851_IER <S2SV_ModEnd>, ier )",0
521,"<S2SV_ModStart> void encode_quantization ( VP9EncoderConfig <S2SV_ModEnd> * cm, <S2SV_ModStart> * cm, vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm -> base_qindex, QINDEX_BITS ) ; write_delta_q ( wb, cm -> y_dc_delta_q ) ; write_delta_q ( wb, cm -> uv_dc_delta_q ) ; write_delta_q ( wb, cm -> y_ac_delta_q ) ;",0
522,"<S2SV_ModStart> if ( write ( uipc_main. ch [ ch_id ]. fd, p_buf, msglen ) < 0 ) { BTIF_TRACE_ERROR ( ""failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> (%s)"", strerror ( errno ) ) ; }",0
523,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } case <S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } state <S2SV_ModStart> ) ; return NULL <S2SV_ModEnd> ; } state <S2SV_ModStart> end ) ; return NULL <S2SV_ModEnd> ; } <S2SV_null>,0
524,<S2SV_ModStart> FBIOGET_VBLANK : { struct fb_vblank <S2SV_ModEnd> vblank ; vblank,0
525,<S2SV_ModStart> int flags ) { spin_lock ( & ctx -> lock ) ; <S2SV_ModStart> ) ; } spin_unlock ( & ctx -> lock ) ; <S2SV_ModStart> ) ; } spin_unlock ( & ctx -> lock ) ;,0
526,"<S2SV_ModStart> ) { if ( c16 -> Curves [ i ] == NULL ) { c16 -> Curves [ i ] = _cmsMallocZero ( ContextID, sizeof ( cmsUInt16Number ) ) ; return NULL ; } <S2SV_ModStart> ) ) ; if ( c16 -> Curves [ i ] [ j ] == NULL ) { c16 -> Curves [ i ] [ j ] = cmsEvalToneCurve16 ( G [ i ], ( cmsUInt16Number ) j ) ; } else { for ( j = 0 ; j < nElements ; j ++ ) { c16 -> Curves [ i ] [ j ] = cmsMallocZero ( ContextID, sizeof ( cmsUInt16Number ) ) ; if ( c16 -> Curves [ i ] [ j ] == NULL ) { c16 -> Curves [ i ] [ j ] = NULL ; } } else { for ( j = 0 ; j < nElements ; j ++ ) { c16 -> Curves [ i ] [ j ] = cmsEvalToneCurve16 ( G [ i ], ( cmsUInt16Number ) j ) ; } }",0
527,"<S2SV_ModStart> need_dev ) { error = - ENOENT ; goto out ; } if ( kern_path ( dev_name, LOOKUP_FOLLOW, & path ) == NULL ) { error = - ENOENT ; goto out ; } <S2SV_ModEnd> if ( kern_path <S2SV_ModStart> LOOKUP_FOLLOW, & path ) == NULL ) { error = - ENOENT ; goto out ; } <S2SV_ModEnd> if ( kern_path <S2SV_ModStart> LOOKUP_FOLLOW, & path ) == NULL ) { error = - ENOENT ; goto out ; } if ( kern_path ( path, LOOKUP_FOLLOW, & rdev ) == NULL ) { error = - ENOENT ; goto out ; } if ( error ) { error = - ENOENT ; goto out ; } <S2SV_ModEnd> if ( kern_path <S2SV_ModStart> LOOKUP_FOLLOW, & path ) == NULL ) { error = - ENOENT ; goto out ; } <S2SV_ModEnd> if ( kern_path <S2SV_ModStart> LOOKUP_FOLLOW, & path ) == NULL ) { error = - ENOENT ; goto out ; } if ( kern_path ( path, LOOKUP_FOLLOW, & rdev ) == NULL ) { error = - ENOENT ; goto out ; }",0
528,"<S2SV_ModStart> ; if ( space_rem > msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem + msg -> size > dev -> bus. m_wMaxReqSize ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem + msg -> size > dev -> bus. m_wMaxReqSize ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem + msg -> size > dev -> bus. m_wMaxReqSize ) { printk ( KERN_ERR ""%s() <S2SV_blank> Exceeded <S2SV_blank> dev->bus.m_wMaxReqSize\\n"", __func__ ) ; goto out ; } if ( space_rem + msg -> size > dev -> bus. m_wMaxReqSize ) { printk ( KERN_ERR ""%s() <S2SV_blank> Exceeded <S2SV_blank> dev->bus.m_wMaxReqSize\\n"", __func__ ) ; goto out ; }",0
529,"<S2SV_ModStart> ) new_len, 0 ) ; if ( new_len < 0 ) { php_error_docref ( ""html_entities_would <S2SV_blank> overrun"", ""html_entities_would <S2SV_blank> overrun"", ""html_entities_would <S2SV_blank> overrun"", ""html_entities_would <S2SV_blank> overrun"", ""html_entities_would <S2SV_blank> overrun"", ""html_entities_would <S2SV_blank> overrun"", ""html_entities_would <S2SV_blank> overrun"", ""html_entities_would <S2SV_blank> overrun"", ""html_entities_would <S2SV_blank> overrun"", ""html_entities_would <S2SV_blank> overrun"", ""html_entities_would <S2SV_blank> overrun"", ""html_entities_would <S2SV_blank> overrun"", ""html_entities_would <S2SV_blank> overrun"", ""html_entities_would <S2SV_blank> overrun"", ""html_entities_would <S2SV_blank> overrun"", ""html_entities_would <S2SV_blank> overrun"", ""html_entities_would <S2SV_blank> overrun"", ""html_entities_would <S2SV_blank>",0
530,"<S2SV_ModStart> ) ) { if ( BIO_reset ( rawcert ) == 1 && ( localrsa = d2i_RSAPublicKey_bio ( rawcert, NULL ) ) == 1 && ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == 1 && ( localkey = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == 1 ) { if (! EVP_PKEY_set1_EC_KEY ( peerec, localkey ) ) { goto sslerr ; } } else if ( BIO_reset ( rawcert ) == 1 && ( localrsa = d2i_RSAPublicKey_bio ( rawcert, NULL ) ) == 1 && ( localec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == 1 && ( localkey = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) ) { if (! EVP_PKEY_set1_EC ( peerec, localkey ) ) { goto sslerr ; } } else if ( BIO_reset ( rawcert ) == 1 && ( localrsa = d2i_RS",0
531,"<S2SV_ModStart> ( ) ; strncat <S2SV_ModEnd> ( t1_buf_array, <S2SV_ModStart> ( ) ; strncat <S2SV_ModEnd> ( t1_line_array,",0
532,"<S2SV_ModStart> BLOCK_SIZE bsize, <S2SV_ModEnd> BLOCK_SIZE subsize ) <S2SV_ModStart> BLOCK_SIZE subsize ) { <S2SV_ModEnd> MACROBLOCKD * xd <S2SV_ModStart> -> e_mbd ; <S2SV_ModEnd> int bsl = <S2SV_ModStart> / 4 ; <S2SV_ModEnd> switch ( bsize <S2SV_ModStart> case PARTITION_NONE : set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 1 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize <S2SV_ModStart> case PARTITION_VERT : * get_sb_index ( x, subsize ) = 1 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 1 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; break ; case PARTITION_HORZ : * get_sb_index ( x, subsize ) = 0 ; set_modeinfo_offsets ( cm, xd",0
533,"<S2SV_ModStart> name ) ; if (! check_submodule_name ( name ) ) data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_NAME, ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", name ) ;",0
534,<S2SV_ModStart> = 0 ; int block_ptr = 0 ; int pixel_x = 0 ; int pixel_y <S2SV_ModEnd> ; int total_blocks <S2SV_ModStart> break ; case 0x00 : colorA = ( opcode << 8 ) | ( s -> buf [ stream_ptr ++ ] << 8 ) | ( s -> buf [ stream_ptr ++ ] << 8 ) | ( s -> buf [ stream_ptr ++ ] << 8 ) ; colorB = ( opcode << 8 ) | ( s -> buf [ stream_ptr ++ ] << 8 ) | ( s -> buf [ stream_ptr ++ ] << 8 ) | ( s -> buf [ stream_ptr ++ ] << 8 ) | ( s -> buf [ stream_ptr ++ ] << 8 ) | ( s -> buf [ stream_ptr ++ ] << 8 ) | ( s -> buf [ stream_ptr ++ ] << 8 ) | ( s -> buf [ stream_ptr ++ ] << 8 ) ; colorB = ( opcode << 8 ) | ( s -> buf [ stream_ptr ++ ] << 8 ) | ( s -> buf [ stream_ptr ++ ] << 8 ) | ( s -> buf [ stream_ptr ++ ] << 8 ) | ( s -> buf [ stream_ptr ++,0
535,"<S2SV_ModStart> cnt ) { JAS_DBGLOG ( 100, ( ""mem_read(%p, <S2SV_blank> %p, <S2SV_blank> %d)\\n"", obj, buf, cnt )",0
536,<S2SV_ModStart> * ptype ; __be16 type ; if ( skb_is_gso ( skb ) ) { rcu_read_unlock ( ) ; type = greh -> protocol ; if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush ) { if (! NAPI_GRO_CB ( skb ) -> flush,0
537,"<S2SV_ModStart> ; if ( numrows < 0 ) { jas_matrix_destroy ( matrix ) ; return 0 ; } if ( numcols < 0 ) { jas_matind_zero ( matrix, numrows ) ; matrix -> numcols_ = 0 ; matrix -> rows_ = 0 ; matrix -> data_ = 0 ; matrix -> datasize_ = 0 ; } for ( i = 0 ; i < matrix -> numrows_ ; ++ i ) { matrix -> rows_ [ i ] = & matrix -> data_ [ i * matrix -> numcols_ ] ; } for ( i = 0 ; i < matrix -> datasize_ ; ++ i ) { matrix -> data_ [ i ] = 0 ; } for ( i = 0 ; i < matrix -> numrows_ ; ++ i ) { matrix -> rows_ [ i ] = & matrix -> data_ [ i * matrix -> numcols_ ] ; } for ( i = 0 ; i < matrix -> numcols_ ; ++ i ) { matrix -> data_ [ i ] = 0 ; } for ( i = 0 ; i < matrix -> datasize_ ; ++ i ) { matrix -> data_ [ i ] = 0 ; } for ( i = 0 ;",0
538,"<S2SV_ModStart> bool result = string_bytes_concat_buffer ( ( TPM2B_MAX_BUFFER * ) & key, & ( session -> sessionKey. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TPM2B_MAX_BUFFER * ) & key, & ( session -> nonceOlder. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TPM2B_MAX_BUFFER * ) & key, & ( session -> salt. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TPM2B_MAX_BUFFER * ) & key, & ( session -> sessionKey. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TPM2B_MAX_BUFFER * ) & key, & ( session -> nonceOlder.",0
539,<S2SV_ModStart> KEY_NEED_READ ) ; if ( key -> state == KEY_IS_UNINSTANTIATED <S2SV_ModEnd> ) goto can_read_key,0
540,<S2SV_ModStart> u4_first_slice_is_aud ) { if ( ps_dec -> u4_first_slice_is_aud == 0 ) { ps_dec -> u4_first_slice_is_aud = 1 ; ps_dec -> u4_first_slice_is_aud = 0 ; } else if ( ps_dec -> u4_first_slice_is_aud == 1 ) { ps_dec -> u4_first_slice_is_aud = 1 ; ps_dec -> u4_first_slice_is_aud = 0 ; } else { if ( ps_dec -> u4_first_slice_is_aud == 0 ) { ps_dec -> u4_first_slice_is_aud = 1 ; ps_dec -> u4_first_slice_is_aud = 1 ; } else if ( ps_dec -> u4_first_slice_is_aud == 1 ) { ps_dec -> u4_first_slice_is_aud = 0 ; } else { ps_dec -> u4_first_slice_is_aud = 1 ; ps_dec -> u4_first_slice_is_aud =,0
541,"<S2SV_ModStart> dst_reg -> var_off ) ; if (! src_known ||! <S2SV_ModEnd> dst_known ) { <S2SV_ModStart> case BPF_SUB : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } break ; case BPF_SUB : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } else { dst_reg -> smin_value = S64_MIN ; } break ; case BPF_SUB : if ( signed_sub_overflows ( dst_reg -> smin_value, smin_val ) || signed_sub_overflows ( dst_reg -> smax_",0
542,"<S2SV_ModStart> cifs_sb -> mnt_cifs_flags & CIFS_MOUNT_NOCTO ) { cFYI ( 1, ""parent <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p <S2SV_blank> name <S2SV_blank> is: <S2SV_blank> %s <S2SV_blank> and <S2SV_blank> dentry <S2SV_blank> = <S2SV_blank> 0x%p"", parent_dir_inode, direntry ) ; cFYI ( 1, ""non-NULL file <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p"", direntry -> d_inode, direntry ) ; cFYI ( 1, ""non-NULL file <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p"", direntry -> d_inode ) ; cFYI ( 1, ""non-NULL file <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p"", direntry -> d_inode ) ; cFYI ( 1, ""non-NULL file <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p"", direntry ) ; cFYI ( 1, ""non-NULL file <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p"", direntry -> d_inode ) ;",0
543,<S2SV_ModStart> = VFIO_REGION_INFO_FLAG_READ | VFIO_REGION_INFO_FLAG_WRITE <S2SV_ModEnd> ; break ; <S2SV_ModStart> = VFIO_REGION_INFO_FLAG_READ ; break ; case VFIO_PCI_BAR0_REGION_INDEX : info. offset = VFIO_PCI_INDEX_TO_OFFSET ( info. index ) ; info. size = pdev -> bar0_size ; info. flags = VFIO_REGION_INFO_FLAG_READ | VFIO_REGION_INFO_FLAG_WRITE ; break ; case VFIO_PCI_BAR5_REGION_INDEX : info. offset = VFIO_PCI_INDEX_TO_OFFSET ( info. index ) ; info. size = pdev -> bar5_size ; info. flags = <S2SV_ModStart>. flags = VFIO_REGION_INFO_FLAG_READ | VFIO_REGION_INFO_FLAG_READ ; break ; case VFIO_PCI_BAR5_REGION_INDEX : info. offset = VFIO_PCI_INDEX_TO_OFFSET ( info. index ) ; info. size = pdev -> bar5_,0
544,"<S2SV_ModStart> copied ) ; inode_dio_wait ( inode ) ; <S2SV_ModStart> ext4_test_inode_state ( inode, EXT4_STATE_ORDERED_MODE ) ) { ext4_inode_dio_wait ( handle, inode ) ; ret = ext4_jbd2_file_inode ( handle, inode ) ; if ( ret ) goto errout ; }",0
545,"<S2SV_ModStart> s -> filesize = - 1 ; if (! s -> location ) { s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if (! s -> location ) s -> location = av_strdup ( uri ) ; if ( options ) av_dict_copy ( & s -> chained_options,",0
546,"<S2SV_ModStart> ; if ( rcu_dereference_protected ( tp -> opt, sock_owned_by_user ( sk ) ) ) { ret = NULL ; goto out ; }",0
547,"<S2SV_ModStart> char * in, size_t maxlen <S2SV_ModStart> += 4 ; if ( len >= maxlen ) return - 1 ; <S2SV_ModStart> '=' ) { if ( len >= maxlen ) return - 1 ; <S2SV_ModStart> '=' ) { if ( len >= maxlen ) return - 1 ; <S2SV_ModStart> '=' ) { if ( len >= maxlen ) return - 1 ; <S2SV_ModStart> '=' ) { if ( len >= maxlen ) return - 1 ; <S2SV_ModStart> '=' ) { if ( len >= maxlen ) return - 1 ; <S2SV_ModStart> '=' ) { if ( len >= maxlen ) return - 1 ; <S2SV_ModStart> '=' ) { if ( len >= maxlen ) return - 1 ; <S2SV_ModStart> '=' ) { if ( len >= maxlen ) return - 1 ; <S2SV_ModStart> '=' ) { if ( len >= maxlen ) return - 1 ; <S2SV_ModStart> '=' ) { if ( len >= maxlen ) return - 1 ; <S2SV_ModStart> '=' ) { if ( len >= maxlen ) return - 1 ; }",0
548,<S2SV_ModStart> gc ) ; <S2SV_ModEnd> return 0 ;,1
549,"<S2SV_ModStart>, cur_len ; size_t <S2SV_ModEnd> total_written = 0 <S2SV_ModStart> i ++ ) { size_t <S2SV_ModEnd> copied = min_t <S2SV_ModStart> copied = min_t ( size_t <S2SV_ModEnd>, cur_len,",0
550,<S2SV_ModStart> if (! ( <S2SV_ModEnd> quirks & CP_RDESC_SWAPPED_MIN_MAX,0
551,"<S2SV_ModStart> svc_ctx ) { SvcInternal_t <S2SV_ModEnd> * const si <S2SV_ModStart> int number_of_frames, number_of_keyframes, encode_frame_count <S2SV_ModEnd> ; svc_log_reset ( <S2SV_ModStart> ) ; encode_frame_count = get_svc_internal_count ( svc_ctx ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) return vpx_svc_get_message <S2SV_ModEnd> ( svc_ctx ) <S2SV_ModStart> ) ; number_of_keyframes = encode_frame_count / si -> kf_dist + 1 ; for ( i = 0 ; i < si -> layers ; ++ i ) { number_of_keyframes = encode_frame_count / si -> kf_dist + 1 ; if ( svc_ctx -> encoding_mode == ALT_INTER_LAYER_PREDICTION_IP && ( i == 1 || i == 3 ) ) { number_of_keyframes -= number_of_keyframes ; } svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f], <S2SV_blank> Bytes=[%u]",0
552,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decode ( BYTE <S2SV_ModStart> 5 ) { if (! out ) return FALSE ; <S2SV_ModStart> } else { if (! out ) return FALSE ;,0
553,"<S2SV_ModStart> ; if ( is_altscreen && screen -> sb_buffer ) { <S2SV_ModStart> -> sb_buffer ) vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = NULL ; } else { vterm_allocator_free ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; screen -> vt = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_rows ) ; } if ( is_altscreen && screen -> buffer ) { vterm_allocator_free ( screen -> vt, screen -> buffer ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; } else if ( is_altscreen && screen -> buffer ) { vterm_allocator_free ( screen -> vt, screen -> buffer ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> buffer, sizeof ( VTermScreenCell ) * new",0
554,<S2SV_ModStart> n ) { <S2SV_ModEnd> int result = <S2SV_ModStart> NULL ) ; <S2SV_ModEnd> for ( ; <S2SV_ModStart> * str < end ; ( * str ) ++ ) { char ch = * * str ; if (! in_named_escape && * ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( ch == '{' && ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( ch == '{' && * ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( ch == '}' ) { if ( recurse_lvl == 0 ) { if ( * str + 1 < end && * ( * str + 1 ) == ch ) { literal_end = * str + 1 ; * str += 2 ; result = 1,0
555,"<S2SV_ModStart> * m, jas_int64_t <S2SV_ModEnd> bufsize ) { <S2SV_ModStart> unsigned char * buf <S2SV_ModEnd> ; JAS_DBGLOG ( <S2SV_ModStart> ( bufsize >= 0 <S2SV_ModEnd> ) ; JAS_DBGLOG <S2SV_ModStart> ( 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"" <S2SV_ModEnd>, m, <S2SV_ModStart> ( 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"" <S2SV_ModEnd>, m,",0
556,"<S2SV_ModStart> ( pd, g_settings_dump_location <S2SV_ModEnd> ) ; char",0
557,"<S2SV_ModStart> ; if ( expr -> action. args == NULL ) { log_err ( info -> ctx, ""Illegal <S2SV_blank> modifier <S2SV_blank> predicate <S2SV_blank> \\""%s\\""; <S2SV_blank> Ignored\\n"", pred_txt ) ; return false ; } expr = expr -> action. args ; } else if ( expr -> expr. op == EXPR_ACTION_DECL ) { const char * pred_txt = xkb_atom_text ( info -> ctx, expr -> action. name ) ; if (! LookupString ( symInterpretMatchMaskNames, pred_txt, pred_rtrn ) ) { log_err ( info -> ctx, ""Illegal <S2SV_blank> modifier <S2SV_blank> predicate <S2SV_blank> \\""%s\\""; <S2SV_blank> Ignored\\n"", pred_txt ) ; return false ; } else if ( expr -> expr. op == EXPR_IDENT ) { const char * pred_txt = xkb_atom_text ( info -> ctx, expr -> ident. ident ) ; if ( istreq ( pred_txt, ""any"" ) ) { * pred_rtrn = MATCH_ANY ; * mods_rtrn = MOD_REAL_MASK_ALL ; return true ; } } <S2SV_ModEnd> return ExprResolveModMask (",0
558,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> pcrypt_free ( struct <S2SV_ModStart> * inst ) { <S2SV_ModEnd> pcrypt_instance_ctx * ctx <S2SV_ModStart> = crypto_instance_ctx ( <S2SV_ModEnd> inst ) ;,0
559,<S2SV_ModStart> ; if ( ( x1 + w1 ) > ( ptr -> width ) || ( x1 + w1 ) > ( ptr -> width ) ) { if ( y1 + h1 ) > ( ptr -> height ) ) { if ( y1 + h1 ) > ( ptr -> height ) ) { if ( y1 + h1 ) > ( ptr -> height ) ) { if ( y1 + w1 ) > ( ptr -> width ) ) { if ( y1 == 0 ) h1 = ptr -> height ; else w1 = ptr -> width ; else h1 = ptr -> height ; } else if ( ( y1 + w1 ) > ( ptr -> height ) ) { if ( y1 + h1 ) > ( ptr -> height ) ) { if ( y1 + h1 ) > ( ptr -> width ) ) { if ( y1 == 0 ) h1 = ptr -> height ; else y1 = ptr -> height ; } else { if ( x1 == 0 ) w1 = ptr -> width ; else w1 = ptr -> width ; else h1 = ptr -> height ; } else if ( ( y1 + w1 ) > ( ptr -> height ) ) { if (,0
560,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
561,"<S2SV_ModStart> ) ) ; if (! ipv6_addr_is_multicast ( & ipv6_hdr ( skb ) -> saddr ) ) { ND_PRINTK ( 2, warn, ""RA: <S2SV_blank> source <S2SV_blank> address <S2SV_blank> is <S2SV_blank> not <S2SV_blank> multicast\\n"" ) ; return ; }",0
562,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
563,<S2SV_ModStart> * up ; int len ; <S2SV_ModStart>! replay_esn ||! rp <S2SV_ModEnd> ) return 0 <S2SV_ModStart> )!= xfrm_replay_state_esn_len ( up ) ) return - EINVAL ; len = xfrm_replay_state_esn_len ( replay_esn ) ; if ( len < 0 || len > xfrm_replay_state_esn_len ( up ) ) return - EINVAL ; if ( len > xfrm_replay_state_esn_len ( up ) ) return - EINVAL ; if ( len > xfrm_replay_state_esn_len ( up ) ) return - EINVAL ; len = xfrm_replay_state_esn_len ( up ) ; if ( len < 0 || len > xfrm_replay_state_esn_len ( up ) ) return - EINVAL ; if ( len > xfrm_replay_state_esn_len ( up ) ) return - EINVAL ; if ( len > xfrm_replay_state_esn_len ( up ) ) return - E,0
564,"<S2SV_ModStart> ppos ) { struct proc_dir_entry * pdir = table -> private_data ; int ret = proc_dointvec ( table, write, buffer, lenp, ppos ) ; if ( ret ||! write ) return ret ; if ( sysctl_perf_cpu_time_max_percent < 0 || sysctl_perf_cpu_time_max_percent > 100 || sysctl_perf_cpu_time_max_percent == 0 ) { printk ( KERN_WARNING ""perf: <S2SV_blank> Dynamic <S2SV_blank> interrupt <S2SV_blank> throttling <S2SV_blank> disabled, <S2SV_blank> can <S2SV_blank> hang <S2SV_blank> your <S2SV_blank> system!\\n"" ) ; WRITE_ONCE ( perf_sample_allowed_ns, - 1 ) ; } else if ( sysctl_perf_cpu_time_max_percent < 0 || sysctl_perf_cpu_time_max_percent > 100 ) { printk ( KERN_WARNING ""perf: <S2SV_blank> Dynamic <S2SV_blank> interrupt <S2SV_blank> throttling <S2SV_blank> disabled, <S2SV_blank> can <S2SV_blank> hang <S2SV_blank> your <S2SV_blank> system!\\n"" ) ; WRITE_ONCE ( perf_sample_allowed_ns, - 1 ) ; }",0
565,"<S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + mvsad_err_cost",0
566,<S2SV_ModStart> opj_malloc ( l_data_stride * p_image -> numcomps * sizeof ( OPJ_UINT32 ) ) ; if ( l_tmp_data == ( OPJ_UINT32 * ) NULL ) { opj_free ( l_tmp_data ) ; return 00 ; } <S2SV_ModStart> l_step_l ) ; if ( l_tmp_ptr == ( OPJ_UINT32 * ) NULL ) { opj_free ( l_tmp_data ) ; if ( l_tmp_ptr == ( OPJ_UINT32 * ) NULL ) { opj_free ( l_tmp_data ) ; return ( OPJ_UINT32 * ) opj_malloc ( l_data_stride * p_image -> numcomps * sizeof ( OPJ_UINT32 ) ) ; l_tmp_ptr = ( OPJ_UINT32 * ) opj_malloc ( l_data_stride * l_tmp_data ) ; if ( l_tmp_ptr == ( OPJ_UINT32 * ) NULL ) { opj_free ( l_tmp_data ) ; return ( OPJ_UINT32 *,0
567,"<S2SV_ModStart> name ), ""crypto-%s"" <S2SV_ModEnd>, name )",1
568,"<S2SV_ModStart> ps ) { u32 <S2SV_ModEnd> prev_legacy, cur_legacy <S2SV_ModStart> flags ; kvm_pit_load_count <S2SV_ModEnd> ( kvm,",0
569,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col, <S2SV_ModEnd> const TileInfo * <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd>, TOKENEXTRA * <S2SV_ModStart> BLOCK_SIZE bsize ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> mi_col = tile -> mi_col_start <S2SV_ModEnd> ; mi_col < <S2SV_ModStart> mi_col += MI_BLOCK_SIZE <S2SV_ModEnd> ) { int <S2SV_ModStart> BLOCK_SIZE bsize ; vp9_zero ( cpi -> <S2SV_ModEnd> pred_mv ) ; <S2SV_ModStart> cpi -> sf. partition_search_type ) { case VAR_BASED_PARTITION : choose_partitioning ( cpi, tile, mi_row, mi_col ) ; nonrd_use_partition ( cpi, tile, mi_row, mi_col, BLOCK_64X64, & dummy_rate, & dummy_dist ) ; break ; case SOURCE_VAR_BASED_PARTITION : set_offsets ( cpi, tile, mi_row, mi_col, BLOCK_64X64 ) ; set_source_var_based_partition ( cpi, tile, mi_row",0
570,"<S2SV_ModStart> 1 ) ; if (! <S2SV_ModStart>, ibuf ) ) break",0
571,"<S2SV_ModStart> ; dh = skb_header_pointer <S2SV_ModEnd> ( skb,",0
572,"<S2SV_ModStart> } else { Fp = fopen_safe <S2SV_ModEnd> ( filename, <S2SV_ModStart>, ""wb"" ) ; if ( Fp == NULL ) return HTTP_UNAUTHORIZED ; } parser -> position = POS_INSTR ; while ( parser -> position!= POS_COMPLETE ) { if ( membuffer_append ( & parser -> msg. msg, Buf, ( size_t ) num_read )!= 0 ) { parser -> http_error_code = HTTP_INTERNAL_SERVER_ERROR ; ret_code = HTTP_INTERNAL_SERVER_ERROR ; goto ExitFunction ; } status = parser_parse_entity ( parser ) ; if ( status == PARSE_INCOMPLETE_ENTITY ) { ok_on_close = TRUE ; } else { if ( membuffer_append ( & parser -> msg. msg, Buf, ( size_t ) num_read )!= 0 ) { parser -> http_error_code = HTTP_INTERNAL_SERVER_ERROR ; ret_code = HTTP_INTERNAL_SERVER_ERROR ; goto ExitFunction ; } } else if ( membuffer_append ( & parser -> msg. msg, Buf, ( size_t ) num_read )!= 0 ) { parser -> http_error_code",0
573,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart>, dir ) ) == NULL ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; }",0
574,<S2SV_ModStart> ( blkg ) ) { blkg_free ( new_blkg ) ; return PTR_ERR ( blkg ) ; } ret = blk_throtl_init ( q ) ; if ( ret ) { spin_lock_irq ( q -> queue_lock ) ; blkg_destroy_all ( q ) ; spin_unlock_irq ( q -> queue_lock ) ; return ret ; } q -> root_blkg = blkg ; q -> root_rl. blkg = blkg ; ret = blk_throtl_init ( q ) ; if ( ret ) { spin_lock_irq ( q -> queue_lock ) ; blkg_destroy_all ( q ) ; spin_unlock_irq ( q -> queue_lock ) ; } ret = blkg_throtl_init ( q ) ; if ( ret ) { spin_lock_irq ( q -> queue_lock ) ; blkg_destroy_all ( q ) ; spin_unlock_irq ( q -> queue_lock ) ; },0
575,"<S2SV_ModStart> ; if ( ncolors > 3 ) { av_log ( avctx, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> colors\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ; if ( ncolors > 3 ) { av_log ( avctx, AV_LOG_ERROR, ""too <S2SV_blank> many <S2SV_blank> colors\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
576,"<S2SV_ModStart> kvno ; krb5_data <S2SV_ModEnd> rspac ; const <S2SV_ModStart> ; krb5_data <S2SV_ModEnd> rspac ; const <S2SV_ModStart> rspac ) ; if ( rspac ) memcpy ( & rspac, & rspac, sizeof ( rspac ) ) ; if ( krbtgt_out_principal == NULL ) { ret = krb5_principal_get_comp_string ( context, krbtgt -> entry. principal, 1 ) ; if ( ret == 0 ) { ret = krb5_principal_get_comp_string ( context, krbtgt -> entry. principal, 1 ) ; } else { ret = krb5_principal_get_comp_string ( context, krbtgt -> entry. principal, 1 ) ; if ( ret == 0 ) { ret = krb5_principal_get_comp_string ( context, krbtgt_out -> entry. principal, 1 ) ; if ( ret == 0 ) { ret = krb5_principal_get_comp_string ( context, krbtgt -> entry. principal, 1 ) ; } else { ret = krb5_principal_get_comp_string ( context, krbtgt",0
577,"<S2SV_ModStart> mnt ) ; if ( dentry -> d_inode -> i_op -> follow_link ) { dentry -> d_inode -> i_op -> follow_link ( dentry, nd ) ; error = PTR_ERR ( cookie ) ; if (! IS_ERR ( cookie ) ) { char * s = nd_get_link ( nd ) ; error = 0 ; if ( s ) error = __vfs_follow_link ( nd, s ) ; else if ( nd -> last_type == LAST_BIND ) { error = force_reval_path ( & nd -> path, nd ) ; if ( error ) path_put ( & nd -> path ) ; } else if ( nd -> last_type == LAST_BIND ) { error = force_reval_path ( & nd -> path, nd ) ; if ( error ) path_put ( & nd -> path ) ; } else if ( nd -> last_type == LAST_BIND ) { error = force_reval_path ( & nd -> path, nd ) ; if ( error ) path_put ( & nd -> path ) ; } if ( dentry -> d_inode -> i_op ->",0
578,"<S2SV_ModStart> arg ) { struct usbdevfs_connectinfo ci ; memset ( & ci, 0, sizeof ( ci ) ) ; if ( copy_to_user ( arg, & ci, sizeof ( ci ) ) ) return - EFAULT ;",0
579,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static u32 <S2SV_ModEnd> ip_options_get_finish ( struct <S2SV_ModStart> * optp, u32 <S2SV_ModEnd> optlen ) { <S2SV_ModStart> & 3 ) opt -> __data [ optlen ++ ] = IPOPT_END <S2SV_ModEnd> ; if ( <S2SV_ModStart> & 3 ) opt -> __data [ optlen ++ ] <S2SV_ModEnd> = IPOPT_END ; <S2SV_ModStart> = optlen ; if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( opt ) ; return - EINVAL ; } if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( * optp ) ; * optp = opt ; return 0 ; } if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( * optp ) ; * optp = opt ; return 0 ; } if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree ( opt ) ; * optp = opt ; return - EINVAL ; } if ( optlen && ip_options_compile ( net, opt, NULL ) ) { kfree",0
580,"<S2SV_ModStart> args -> rmtblkcnt2 ; args -> rmtvaluelen2 = args -> rmtvaluelen ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, 0, dp ) ; retval = xfs_attr3_leaf_add ( args, bp ) ; if ( retval == EEXIST ) { xfs_trans_brelse ( args -> trans, bp ) ; return retval ; } trace_xfs_attr_leaf_add ( args ) ; args -> op_flags |= XFS_DA_OP_RENAME ; args -> rmtblkno2 = args -> rmtblkno2 ; args -> rmtblkcnt2 = args -> rmtblkcnt2 ; args -> rmtvaluelen2 = args -> rmtblkcnt2 ; args -> rmtblkcnt2 = args -> rmtblkcnt2 ; args -> rmtvaluelen2 = args -> rmtvaluelen ; args -> rmtblkcnt2 = args -> rmtblkcnt2 ; args -> rmtblkcnt2 = args -> rmtblkcnt",0
581,"<S2SV_ModStart> = STATUS_BUFFER_TOO_SMALL ; if ( IoEnumerateDeviceObjectList ( TCDriverObject, NULL, 0, & deviceObjectCount ) == STATUS_BUFFER_TOO_SMALL && deviceObjectCount > 1 ) * ( int * ) Irp -> AssociatedIrp. SystemBuffer = TRUE ; if ( IoEnumerateDeviceObjectList ( TCDriverObject, NULL, 0, & deviceObjectCount ) == STATUS_BUFFER_TOO_SMALL && deviceObjectCount > 1 ) * ( int * ) Irp -> AssociatedIrp. SystemBuffer = TRUE ; if ( IoEnumerateDeviceObjectList ( TCDriverObject, NULL, 0, & deviceObjectCount ) == STATUS_BUFFER_TOO_SMALL && deviceObjectCount > 1 ) * ( int * ) Irp -> AssociatedIrp. SystemBuffer = TRUE ; if ( IoEnumerateDeviceObjectList ( TCDriverObject, NULL, 0, & deviceObjectCount ) == STATUS_BUFFER_TOO_SMALL && deviceObjectCount > 1 ) * ( int * ) Irp -> AssociatedIrp. SystemBuffer = TRUE ; if ( IoEnumerateDeviceObjectList ( TCDriverObject, NULL, 0, & deviceObjectCount ) == STATUS",0
582,"<S2SV_ModStart> ; if ( http_request_get_header ( info -> request, ""Sec-WebSocket-Connection"" ) == NULL ) goto error ; else { bool found_upgrade = false ; if ( connection == NULL ) goto error ; else { bool found_upgrade = false ; int count ; sds * tokens = sdssplitlen ( connection, strlen ( connection ), "","", 1, & count ) ; if ( tokens == NULL ) goto error ; for ( int i = 0 ; i < count ; i ++ ) { sds token = tokens [ i ] ; sdstrim ( token, "" <S2SV_blank> "" ) ; if ( strcasecmp ( token, ""Upgrade"" ) == 0 ) { found_upgrade = true ; break ; } } sdsfreesplitres ( tokens, count ) ; if (! found_upgrade ) goto error ; for ( int i = 0 ; i < count ; i ++ ) { sds token = tokens [ i ] ; sdstrim ( token, "" <S2SV_blank> "" ) ; if ( strcasecmp ( token, ""Upgrade"" ) == 0 ) { found_upgrade = true ; break ; } sdsfreesplitres ( tokens, count ) ; if ( sdsfreesplitres (",0
583,"<S2SV_ModStart> * findalldevs_if ; struct rpcap_sockaddr * addr ; <S2SV_ModStart> 0 ; } memset ( & addr, 0, sizeof ( struct rpcap_sockaddr ) ) ; <S2SV_ModStart> -> description ) { if ( strlen ( d -> description ) > plen ) { rpcapd_discard ( pars -> sockctrl, plen ) ; return - 1 ; } <S2SV_ModStart> -> name ) { if ( strlen ( d -> name ) > plen ) { return - 1 ; } <S2SV_ModStart> -> description ) { if ( strlen ( d -> name ) > plen ) { rpcapd_discard ( pars -> sockctrl, plen ) ; return - 1 ; } <S2SV_ModEnd> if ( d <S2SV_ModStart> -> name ) { if ( strlen ( d -> name ) > plen ) { rpcapd_discard ( pars -> sockctrl, plen ) ; return - 1 ; } <S2SV_ModStart> -> description ) { if ( strlen ( d -> description ) > plen ) { return - 1 ; } <S2SV_ModStart> -> name ) { if ( strlen ( d -> description ) > plen ) { rpcapd_discard ( pars -> sockctrl, plen ) ; return - 1 ; } <S2SV_ModEnd> if ( d <S2SV_ModStart> -> description ) { if ( strlen",0
584,"<S2SV_ModStart> ; struct dump_dir * <S2SV_ModEnd> dd = dd_create <S2SV_ModStart> DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; }",0
585,"<S2SV_ModStart> 1 ) ; if ( ( image -> columns % 2 )!= 0 ) { for ( bit = 0 ; bit < 2 ; bit ++ ) { index = ConstrainColormapIndex ( image, ( * p >> 6 ) & 0x3 ) ; SetPixelIndex ( indexes + x, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } p ++ ; } if ( ( image -> columns % 2 )!= 0 ) { for ( bit = 0 ; bit < 2 ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } p ++ ; } if ( ( image -> columns % 2 )!= 0 ) { for ( bit = 0 ; bit < 2 ; bit ++ ) { for ( bit = 0 ; bit < 2 ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes",0
586,"<S2SV_ModStart> BN_ULONG t1, t2 ; BN_ULONG <S2SV_ModEnd> c1, c2 <S2SV_ModStart> c3 ) ; r [ 6 ] = c1 ; c1 = 0 ; sqr_add_c ( a, 0, c1, c2, c3 ) ; r [ 7 ] = c2 ; c2 = 0 ; sqr_add_c2 ( a, 6, 0, c1, c2 ) ; r [ 8 ] = c1 ; c1 = 0 ; sqr_add_c ( a, 0, c1, c2, c3 ) ; r [ 8 ] = c2 ; c2 = 0 ; sqr_add_c ( a, 1, c2, c3 ) ; r [ 9 ] = c1 ; c1 = 0 ; sqr_add_c ( a, 2, c1, c2, c3 ) ; r [ 10 ] = c2 ; c2 = 0 ; sqr_add_c ( a, 0, c1, c2, c3 ) ; r [ 11 ] = c1 ; c1 = 0 ; sqr_add_c ( a, 1, c2",0
587,"<S2SV_ModStart> * sk, unsigned <S2SV_ModStart> * serr ; int <S2SV_ModEnd> err ; serr <S2SV_ModStart> = SO_EE_ORIGIN_TIMESTAMPING ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee. ee_data -= sk -> sk_tskey ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; if ( skb_shinfo ( skb ) -> tskey > 0 ) serr -> ee. ee_data -= sk -> sk_tskey ; if ( skb_shinfo ( skb ) -> tskey > 0 ) serr -> ee. ee_data -= sk -> sk_tskey ; } <S2SV_ModEnd> err = sock_queue_err_skb",0
588,"<S2SV_ModStart> num_images = 0 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
589,"<S2SV_ModStart> len ; if (! in_cksum ( & vec [ 0 ] ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> cksum <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> len ; if (! in_cksum ( & vec [ 0 ] ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> cksum <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> len ; if (! in_cksum ( & vec [ 0 ] ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> cksum <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",0
590,"<S2SV_ModStart> ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/12345678"" ), CONST_STR_LEN ( ""/12345678"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/12345678"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/12345678"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/12345678"" ), CONST_STR_LEN ( ""/12345678"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/12345678"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/12345678"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/",0
591,"<S2SV_ModStart>! dumpable && ptrace_has_cap ( task_cred ( task ) -> user_ns, mode ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { rcu_read_unlock ( ) ; return - EPERM ; } } else { if ( ptrace_has_cap ( task_cred ( task ) -> user_ns, mode ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { rcu_read_unlock ( ) ; return - EPERM ; } } else { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE ) ) { if (! capable ( CAP_SYS_PTRACE",0
592,"<S2SV_ModStart> long ) ) { if ( i + sizeof ( long ) > w ) { rdp_protocol_error ( ""add_bytes_l2_c"", 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x534e4554, 0x5",0
593,<S2SV_ModStart> ( flags & ( __GFP_DMA | __GFP_HIGHMEM ) ),0
594,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
595,<S2SV_ModStart> ps_sps ) ; if ( ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flag == 0 ) { ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flag = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = 1 ; ps_parse -> s_,0
596,<S2SV_ModStart> ; priv = kzalloc <S2SV_ModEnd> ( sizeof (,0
597,"<S2SV_ModStart> ; tmp_sdma_rht = kcalloc ( num_engines, sizeof ( * tmp_sdma_rht ), GFP_KERNEL ) ; if (! tmp_sdma_rht ) { kfree ( dd -> per_sdma ) ; return - ENOMEM ; }",0
598,<S2SV_ModStart> device_data ; if ( dev ) device_put ( & dev -> dev ) ;,0
599,"<S2SV_ModStart> * info, <S2SV_ModEnd> const char * <S2SV_ModStart>, int rep_quick, my_bool <S2SV_ModEnd> ) { int <S2SV_ModStart>, MY_MUTEX_INIT_FAST ) ; mi_key_mutex_init ( mi_key_mutex_MI_SORT_INFO_mutex, & sort_info. mutex, MY_MUTEX_INIT_FAST ) ; mi_key_cond_init ( mi_key_cond_MI_SORT_INFO_cond, & sort_info. cond, MY_MUTEX_INIT_FAST ) ; <S2SV_ModStart>, MY_MUTEX_INIT_FAST ) ; mi_key_mutex_init ( mi_key_mutex_MI_SORT_INFO_mutex, & sort_info. mutex, MY_MUTEX_INIT_FAST ) ; <S2SV_ModStart>, MY_MUTEX_INIT_FAST ) ; mi_key_cond_init ( mi_key_cond_MI_SORT_INFO_cond, & sort_info. cond, MY_MUTEX_INIT_FAST ) ; mi_key_mutex_init ( mi_key_mutex_MI_SORT_INFO_cond, & sort_info",0
600,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> size < 16 <S2SV_ModStart> > 256 ) { p = q ; sizes [ i ++ ] = size ; while ( ( isspace ( ( int ) ( ( unsigned char ) * p ) )!= 0 ) || ( * p == ',' ) ) ) p ++ ; } if ( i == 0 ) i = 10 ; while ( ( isspace ( ( int ) ( ( unsigned char ) * p ) )!= 0 ) || ( * p == ',' ) ) i = 10 ; while ( ( isspace ( ( int ) ( ( unsigned char ) * p ) )!= 0 ) || ( * p == ',' ) ) ) p ++ ; } if ( i == 0 ) i = 10 ; for ( i = 0 ; i < 10 ; i ++ ) { resized = ResizeImage ( image, sizes [ i ], sizes [ i ], image -> filter, exception ) ) ; if ( resized == ( Image * ) NULL ) return ( DestroyImageList ( images ) ) ; if ( images == ( Image * ) NULL ) return ( DestroyImageList ( images ) ) ; if ( images == ( Image * ) NULL ) images = resized ; else AppendImageToList ( & images, resized ) ; }",0
601,"<S2SV_ModStart> } else { xfs_bmbt_irec_t <S2SV_ModEnd> dblocks = XFS_B_TO_FSB <S2SV_ModStart> valuelen ) ; if ( XFS_FORCED_SHUTDOWN ( ip -> i_mount ) ) { XFS_ERROR ( ip -> i_mount, XFS_ERROR ( EFSCORRUPTED ), XFS_RANDOM ( EFSCORRUPTED, XFS_RANDOM ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_RANDOM ( EFSCORRUPTED, XFS_RANDOM ( EFSCORRUPTED, XFS_ATTR_FORK ) ) ) ) { XFS_ERROR ( ip -> i_mount, XFS_ERROR ( EFSCORRUPTED ), XFS_RANDOM ( EFSCORRUPTED, XFS_RANDOM ( EFSCORRUPTED, XFS_RANDOM ( EFSCORRUPTED, XFS_RANDOM ( EFSCORRUPTED, XFS_RANDOM ( EFSCORRUPTED, XFS_ATTR_FORK ) ) ) ;",0
602,<S2SV_ModStart> } pairs = pcalloc <S2SV_ModEnd> ( pcount *,0
603,"<S2SV_ModStart> val ) ; if (! val ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> no <S2SV_blank> value"", r -> name ) ;",0
604,<S2SV_ModStart> ; if ( RE_YY_INPUT ( yyscanner ) == EOF ) return 0 ; if ( <S2SV_ModStart> ; if ( RE_YY_INPUT ( yyscanner ) == EOF ) return 0 ; if ( <S2SV_ModStart> ; if ( RE_YY_INPUT ( yyscanner ) == EOF ) return 0 ; if ( <S2SV_ModStart> ; if ( RE_YY_INPUT ( yyscanner ) == EOF ) return 0 ; if ( <S2SV_ModStart> ; if ( RE_YY_INPUT ( yyscanner ) == EOF ) return 0 ; if ( RE_YY_INPUT ( yyscanner ) == EOF ) return 0 ; if ( RE_YY_INPUT ( yyscanner ) == EOF ) return 0 ; if ( RE_YY_INPUT ( yyscanner ) == EOF ) return 0 ; if ( RE_YY_INPUT ( yyscanner ) == EOF ) return 0 ; if ( RE_YY_INPUT ( yyscanner ) == EOF ) return 0 ; if ( RE_YY_INPUT ( yyscanner ) == EOF ) return 0 ; if ( RE_YY_INPUT ( yyscanner ) == EOF ) return 0 ; if ( RE_YY_INPUT ( yyscanner ) == EOF ) return 0 ; if ( RE_YY_INPUT ( yyscanner ) == EOF ) return,0
605,"<S2SV_ModStart> ) ) ) { agoo_log_cat ( & agoo_req_cat, ""%s <S2SV_blank> %llu: <S2SV_blank> %s"", c -> bind -> kind, ( unsigned long long ) c -> id, c -> buf ) ; return HEAD_AGAIN ; }",0
606,"<S2SV_ModStart> vp9_fht16x16_c ( const tran_low_t <S2SV_ModEnd> * input, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> 256 ] ; <S2SV_ModEnd> int i, <S2SV_ModStart> j ; int16_t temp_in [ 16 ], temp_out [ 16 ] ; const transform_2d ht = FHT_16 [ tx_type ] ; for ( i = 0 ; i < 16 ; ++ i ) { for ( j = 0 ; j < 16 ; ++ j ) temp_in [ j ] = input [ j * stride + i ] * 4 ; ht. cols ( temp_in, temp_out ) ; for ( j = 0 ; j < 16 ; ++ j ) outptr [ j * 16 + i ] = ( temp_out [ j ] + 1 + ( temp_out [ j ] < 0 ) ) >> 2 ; for ( i = 0 ; i < 16 ; ++ i ) { for ( j = 0 ; j < 16 ; ++ j ) temp_in [ j ] = input [ j * stride + i ] ; ht. rows",0
607,"<S2SV_ModStart> new_data_len ) ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; <S2SV_ModStart> if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; <S2SV_ModStart> g_key_file_new ( ) ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; <S2SV_ModStart> if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ;",0
608,"<S2SV_ModStart> fh_dentry ) ; error = fh_want_write ( fh ) ; if ( error ) goto out_errno ; error = set_posix_acl ( inode, ACL_TYPE_ACCESS, argp -> acl_access ) ; if ( error ) goto out_errno ; <S2SV_ModStart> goto out_errno ; error = set_posix_acl ( inode, ACL_TYPE_ACCESS, argp -> acl_default ) ; if ( error ) goto out_drop_write ; error = fh_want_write ( fh ) ; if ( error ) goto out_errno ; error = set_posix_acl ( inode, ACL_TYPE_DEFAULT, argp -> acl_default ) ; if ( error ) goto out_drop_drop_write ;",0
609,"<S2SV_ModStart> * ue ; if ( tree_root == NULL ) { fprintf ( stdout, "" <S2SV_blank> Unfolding <S2SV_blank> the <S2SV_blank> meta-tree <S2SV_blank> "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout, "" <S2SV_blank> done.\\n\\n"" ) ; }",0
610,"<S2SV_ModStart> = osi_calloc ( <S2SV_ModEnd> strlen ( filename <S2SV_ModStart> ( strlen ( filename <S2SV_ModEnd> ) + 5 <S2SV_ModStart> (! temp_filename ) ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } if ( list_next ( node )!= list_end ( config -> sections ) ) fputc ( '\\n', fp ) ; fflush ( fp ) ; fclose ( fp ) ; if ( chmod ( temp_filename, S_IRUSR | S_IRGRP | S_IWUSR | S_IWGRP ) == - 1 ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> change <S2SV_blank> file <S2SV_blank> permissions <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func",0
611,"<S2SV_ModStart> elen ) ; elen += sizeof ( struct pathComponent ) ; <S2SV_ModStart> > 0 ) elen += sizeof ( struct pathComponent ) ; <S2SV_ModStart> case 2 : elen += sizeof ( struct pathComponent ) + pc -> lengthComponentIdent ; break ; case 3 : if ( tolen < 3 ) return - ENAMETOOLONG ; memcpy ( p, ""../"", 3 ) ; p += 3 ; tolen -= 3 ; break ; case 4 : if ( tolen < 2 ) return - ENAMETOOLONG ; memcpy ( p, ""./"", 3 ) ; p += 3 ; tolen -= 3 ; break ; case 5 : elen += sizeof ( struct pathComponent ) + pc -> lengthComponentIdent ; break ; } <S2SV_ModEnd> } if (",0
612,"<S2SV_ModStart> case NFSPROC_GETATTR : if ( ( dp = parsereq ( ndo, rp, length ) )!= NULL && parsefhn ( ndo, dp, v3 )!= NULL ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %s"", tok2str ( nfsproc_str, ""proc-%u"", proc ) ) ) ; goto trunc ; } <S2SV_ModStart> case NFSPROC_DELETE : if ( ( dp = parsereq ( ndo, rp, length ) )!= NULL && parsefhn ( ndo, dp, v3 )!= NULL ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %s"", tok2str ( nfsproc_str, ""proc-%u"", proc ) ) ) ; goto trunc ; }",0
613,"<S2SV_ModStart> case VTP_SUMMARY_ADV : if ( tlv_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> MgmtD <S2SV_blank> Len <S2SV_blank> %u]"", tlv_len ) ) ; return ; } <S2SV_ModStart> case VTP_UPDATE_TIMESTAMP_LEN : if ( tlv_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> MgmtD <S2SV_blank> Len <S2SV_blank> %u]"", tlv_len ) ) ; return ; } <S2SV_ModStart> tlv_len ) ; if ( tlv_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> MgmtD <S2SV_blank> Len <S2SV_blank> %u]"", tlv_len ) ) ; return ; } <S2SV_ModStart> case VTP_VLAN : if ( tlv_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> MgmtD <S2SV_blank> Len <S2SV_blank> %u]"", tlv_len ) ) ; return ; } <S2SV_ModStart> tlv_len ) ; if ( tlv_len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [invalid <S2SV_blank> MgmtD <S2SV_blank> Len <S2SV_blank> %u]"",",0
614,"<S2SV_ModStart> userData, target <S2SV_ModEnd> ) ; ctxt",0
615,"<S2SV_ModStart> slow ; if (! sock_flag ( sk, SOCK_DEAD ) ) { atomic_inc ( & sk -> sk_drops ) ; UDP_INC_STATS_USER ( sock_net ( sk ), UDP_MIB_INDATAGRAMS, is_udplite ) ; goto out ; }",0
616,"<S2SV_ModStart> len ) { u_int <S2SV_ModEnd> tlen, pdu_type <S2SV_ModStart> } while ( tlen >= sizeof ( rpki_rtr_pdu ) ) { ND_TCHECK2 ( * tptr, sizeof ( rpki_rtr_pdu ) ) ; pdu_header = ( const rpki_rtr_pdu * ) tptr ; tlen = EXTRACT_32BITS ( pdu_header -> length ) ; if (! pdu_type ||! pdu_len ) { goto trunc ; } if ( rpki_rtr_pdu_print ( ndo, tptr, 8 ) ) { goto trunc ; } tlen -= pdu_len ; tptr += pdu_len ; }",0
617,"<S2SV_ModStart> int tagval ; struct stream packet = * s ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> tag <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; return False ; } <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> tag <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; return False ; } <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cssp_read_tsrequest(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> tag <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; return False ; }",0
618,"<S2SV_ModStart> ; int chars_processed <S2SV_ModEnd> ; int elt <S2SV_ModStart> int elt ; int data_size ; if ( ( l = labellen ( ndo, cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; i = * cp ++ ; chars_processed ++ ; if ( chars_processed >= data_size ) { ND_PRINT ( ( ndo, ""<LOOP>"" ) ) ; return ( NULL ) ; } if ( ( i = * cp ++ ) & 0x3fff ) ; if ( ( l = labellen ( ndo, cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; cp = bp + ( ( i << 8 ) | * cp ) & 0x3fff ) ; if ( ( l = labellen ( ndo, cp ) ) == ( u_int ) - 1 ) ) return ( NULL ) ; if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; i = * cp ++ ; chars_processed ++ ; if ( chars_processed >= data_size ) { ND_PRINT ( (",0
619,"<S2SV_ModStart> valuelen ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE <S2SV_ModEnd> ) ; error <S2SV_ModStart> valuelen ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE <S2SV_ModEnd> ) ; args",0
620,"<S2SV_ModStart> ( S, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" <S2SV_ModEnd> ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" <S2SV_ModStart> ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModEnd> ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModEnd> ""Content-Length: <S2SV_blank> %d\\r\\n"" ""%s"",",0
621,"<S2SV_ModStart> } pid_t child ; if ( is_link ( src ) ) { fprintf ( stderr, ""Error: <S2SV_blank> %s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> symbolic <S2SV_blank> link\\n"", src ) ; exit ( 1 ) ; } <S2SV_ModEnd> child = fork <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> rv = copy_file <S2SV_ModStart> ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.asoundrc <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } unlink ( src ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
622,<S2SV_ModStart> BFA_STATUS_OK ) { kfree ( fcstats ) ; <S2SV_ModStart> NULL ; } <S2SV_ModEnd> hstats -> seconds_since_last_reset <S2SV_ModStart> hstats -> seconds_since_last_reset = fcstats -> fc. secs_reset ; hstats -> tx_frames = fcstats -> fc. tx_frames ; hstats -> tx_words = fcstats -> fc. tx_words ; hstats -> nos_count = fcstats -> fc. nos_count ; hstats -> error_frames = fcstats -> fc. error_frames ; hstats -> dumped_frames = fcstats -> fc. dropped_frames ; hstats -> link_failure_count = fcstats -> fc. link_failures ; hstats -> loss_of_sync_count = fcstats -> fc. loss_of_syncs ; hstats -> loss_of_syncs = fcstats -> fc. loss_of_syncs ; hstats -> link_failure_count = fcstats -> fc. link_failures ; hstats -> link_failure_count = fcstats -> fc. link_failures ; hstats -> loss_of_syncs = fcstats -> fc. loss_of_syncs ; h,0
623,"<S2SV_ModStart> value ) { value -> w <S2SV_ModEnd> = MinF ( <S2SV_ModStart> = MinF ( <S2SV_ModEnd> 1.0f, MaxF <S2SV_ModStart> = MinF ( <S2SV_ModEnd> 1.0f, MaxF <S2SV_ModStart> = MinF ( <S2SV_ModEnd> 1.0f, MaxF <S2SV_ModStart> = MinF ( <S2SV_ModEnd> 1.0f, MaxF <S2SV_ModStart> = MinF ( <S2SV_ModEnd> 1.0f, MaxF <S2SV_ModStart> = MinF ( <S2SV_ModEnd> 1.0f, MaxF <S2SV_ModStart> = MinF ( <S2SV_ModEnd> 1.0f, MaxF <S2SV_ModStart> = MinF ( <S2SV_ModEnd> 1.0f, MaxF <S2SV_ModStart> = MinF ( <S2SV_ModEnd> 1.0f, MaxF <S2SV_ModStart> = MinF ( <S2SV_ModEnd> 1.0f, MaxF <S2SV_ModStart> = MinF ( <S2SV_ModEnd> 1.0f, MaxF <S2SV_ModStart> = MinF ( <S2SV_ModEnd> 1.0f, MaxF <S2SV_ModStart> = MinF ( <S2SV_ModEnd> 1.0f, MaxF <S2SV_ModStart> = MinF ( <S2SV_ModEnd> 1.0f, MaxF <S2SV_ModStart> = MinF ( <S2SV_ModEnd> 1.0f, MaxF ( 0.0f",0
624,"<S2SV_ModStart> head = NULL ; * out = line ; return 0 ; } if ( len == 0 ) { * head = NULL ; return flush_pkt ( head ) ; } if ( len == 0 ) { if ( bufflen >= 4 &&! git__prefixcmp ( line, ""FLUSH"" ) ) { giterr_clear ( ) ; * out = line ; return flush_pkt ( head ) ; } len -= PKT_LEN_SIZE ; if ( * line == GIT_SIDE_BAND_DATA ) ret = data_pkt ( head, line, len ) ; else if ( * line == GIT_SIDE_BAND_PROGRESS ) ret = sideband_progress_pkt ( head, line, len ) ; else if (! git__prefixcmp ( line, ""NAK"" ) ) ret = nak_pkt ( head ) ; else if (! git__prefixcmp ( line, ""ERR <S2SV_blank> "" ) ) ret = err_pkt ( head ) ; else if (! git__prefixcmp ( line, ""OK <S2SV_blank> "" ) ) ret = ok_pkt ( head, line, len ) ; else if (! git__prefixcmp ( line",0
625,"<S2SV_ModStart> pte_unmap ( page_table ) ; spin_lock_irqsave ( & vma -> vm_mm -> mmap_sem, address ) ; <S2SV_ModStart> ) ; unlock : spin_unlock_irqrestore ( & vma -> vm_mm -> mmap_sem, address ) ;",0
626,<S2SV_ModStart> -> sasl_mechanism ; rec -> <S2SV_ModEnd> sasl_username = src <S2SV_ModStart> -> sasl_username = g_strdup <S2SV_ModEnd> ( src <S2SV_ModStart> -> sasl_password = g_strdup <S2SV_ModEnd> ( src ->,0
627,"<S2SV_ModStart> ) { struct bpf_insn_aux_data <S2SV_ModEnd> * new_data, <S2SV_ModStart> ) ) ; memcpy ( new_data + off, old_data + off + cnt - 1, sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; <S2SV_ModStart> ) ) ; memcpy ( new_data + off + cnt - 1, old_data + off, sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ;",0
628,"<S2SV_ModStart> ) bp2 ; ND_TCHECK_32BITS ( & dp -> ip6f_offlg ) ; if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, ""frag <S2SV_blank> (0x%08x:%d)"", EXTRACT_32BITS ( & dp -> ip6f_ident ), EXTRACT_32BITS ( & ip6 -> ip6_plen ) ) ) ; } else { ND_PRINT ( ( ndo, ""frag <S2SV_blank> (0x%08x:%d)"", EXTRACT_32BITS ( & dp -> ip6f_ident ), EXTRACT_32BITS ( & ip6 -> ip6_plen ) ) ) ; } else if ( ndo -> ndo_vflag ) { ND_PRINT ( ( ndo, ""frag <S2SV_blank> (0x%08x:%d)"", EXTRACT_32BITS ( & dp -> ip6f_ident ) ) ) ; } else { ND_PRINT ( ( ndo, ""frag <S2SV_blank> (0x%08x:%d)"", EXTRACT_32BITS ( & dp -> ip6f_ident ), EXTRACT_32BITS (",0
629,"<S2SV_ModStart> trunc ; } if ( len - i < IP6MOPT_REFRESH_MINLEN ) { ND_PRINT ( ( ndo, ""(refresh: <S2SV_blank> %u)"", EXTRACT_16BITS ( & bp [ i + 2 ] ) << 2 ) ) ; goto trunc ; } ND_PRINT ( ( ndo, ""(refresh: <S2SV_blank> %u)"", EXTRACT_16BITS ( & bp [ i + 2 ] ) << 2 ) ) ; break ; case IP6MOPT_ALTCOA : if ( len - i < IP6MOPT_ALTCOA_MINLEN ) { ND_PRINT ( ( ndo, ""(altcoa: <S2SV_blank> trunc)"" ) ) ; goto trunc ; } ND_PRINT ( ( ndo, ""(alt-CoA: <S2SV_blank> %s)"", ip6addr_string ( ndo, & bp [ i + 2 ] ) ) ) ; break ; case IP6MOPT_NONCEID : if ( len - i < IP6MOPT_NONCEID_MINLEN ) { ND_PRINT ( ( ndo, ""(ni: <S2SV_blank> trunc)"" ) ) ) ; goto trunc ; } ND_PRINT ( ( n",0
630,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
631,"<S2SV_ModStart> 0 ) ; if <S2SV_ModEnd> ( ( occ0 <S2SV_ModStart> 0 ) { if <S2SV_ModEnd> ( sp -> <S2SV_ModStart> ( tif, op0, rowsize ) < 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""Failed <S2SV_blank> to <S2SV_blank> decode <S2SV_blank> tile\\n"" ) ; return 0 ; } <S2SV_ModStart> 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""Failed <S2SV_blank> to <S2SV_blank> decode <S2SV_blank> tile\\n"" ) ; return 0 ; } assert ( sp -> decodepfunc!= NULL ) ; while ( occ0 > 0 ) { if ( ( * sp -> decodepfunc ) ( tif, op0, rowsize ) < 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""Failed <S2SV_blank> to <S2SV_blank> decode <S2SV_blank> tile\\n"" ) ; return 0 ; } <S2SV_ModStart> 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""Failed <S2SV_blank> to <S2SV_blank> decode <S2SV_blank> tile\\n"" ) ; return 0 ; } assert ( sp -> decodepfunc!= NULL ) ; while ( occ0 > 0 ) { TIFFErrorExt ( tif, op0, rowsize ) < 0 ) { TIFFErrorExt ( tif -> tif_clientdata,",0
632,"<S2SV_ModStart>, o, datao ; if ( CHECKOVERFLOW ( 6 + n -> offset, buf_size, 2 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } c = exif_get_short ( buf + datao, n -> order ) ; datao += 2 ; if ( CHECKOVERFLOW ( c, buf_size, 12 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } n -> entries [ tcount ]. entries = exif_mem_alloc ( ne -> mem, sizeof ( MnoteCanonEntry ) * c ) ; if (! n -> entries [ tcount ]. tag ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } n -> entries [ tcount ]. format = exif_get_short ( buf + o",0
633,<S2SV_ModStart> ; if ( ctx == NULL ) { * minor_status = KG_CTX_INCOMPLETE ; return GSS_S_NO_CONTEXT ; },0
634,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> } } <S2SV_null>,0
635,"<S2SV_ModStart> HA_ERR_NOT_A_TABLE : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> MyISAM-table"", filename ) ; <S2SV_ModStart> HA_ERR_CRASHED_ON_USAGE : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed <S2SV_blank> after <S2SV_blank> last <S2SV_blank> repair"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPA",0
636,"<S2SV_ModStart> len ) { <S2SV_ModEnd> char * ns <S2SV_ModStart> unsigned long hex <S2SV_ModEnd> ; CURLcode res <S2SV_ModStart> ; res = Curl_convert_from_network <S2SV_ModEnd> ( handle, <S2SV_ModStart>, 1 ) ; if ( res ) { free ( ns ) ; return NULL ; } <S2SV_ModEnd> string += 2 <S2SV_ModStart> alloc -= 2 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
637,"<S2SV_ModStart> RAnalOp next_op ; if ( len < 2 ) { avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; } else if ( len < 2 ) { avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; } else { avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; }",0
638,"<S2SV_ModStart> ( unlikely ( iov_iter_count ( i ) <= 0 ) ) { bytes = min_t ( unsigned long, PAGE_CACHE_SIZE - offset, iov_iter_single_seg_count ( i ) ) ; goto again ; } <S2SV_ModStart> again ; } if ( unlikely ( iov_iter_count ( i ) <= 0 ) ) { bytes = min_t ( unsigned long, PAGE_CACHE_SIZE - offset, iov_iter_single_seg_count ( i ) ) ; if ( unlikely ( iov_iter_fault_in_readable ( i, bytes ) ) ) { status = - EFAULT ; break ; } status = a_ops -> write_begin ( file, mapping, pos, bytes, flags, & page, & fsdata ) ; if ( unlikely ( status ) ) { status = - EFAULT ; break ; } status = a_ops -> write_begin ( file, mapping, pos, bytes, flags, & page, & fsdata ) ; flush_dcache_page ( page ) ; pagefault_enable ( ) ; flush_dcache_page ( page ) ; pagefault_enable ( ) ; flush_dcache_page ( page",0
639,"<S2SV_ModStart> drop_recycle_buffer ; } if ( unlikely ( ( <S2SV_ModStart> -> rx_buffersize ) ) ) { int cnt = 0 ; s32 tmp = len ; while ( 1 ) { desc = ops -> idx2desc ( ring, * slot, & meta ) ; sync_descbuffer_for_device ( ring, meta -> dmaaddr, ring -> rx_buffersize ) ; * slot = next_slot ( ring, * slot ) ; cnt ++ ; tmp -= ring -> rx_buffersize ; if ( tmp <= 0 ) break ; } if ( unlikely ( cnt > ring -> rx_buffersize ) ) { int cnt = 0 ; while ( 1 ) { desc = ops -> idx2desc ( ring, * slot, & meta ) ; sync_descbuffer_for_device ( ring, meta -> dmaaddr, ring -> rx_buffersize ) ; * slot = next_slot ( ring, * slot ) ; * slot = next_slot ( ring, * slot ) ; } else { desc = ops -> idx2desc ( ring, * slot, & meta ) ; sync_descbuffer_for_device ( ring, meta -> dmaaddr, ring -> rx_buffersize ) ;",0
640,"<S2SV_ModStart> pdu_free_state_ref = usm_free_usmStateReference ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_POST_PREMIB_READ_CONFIG, init_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; <S2SV_ModStart> NULL, ""MD5|SHA|SHA-512|SHA-384|SHA-256|SHA-224"" ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_",0
641,"<S2SV_ModStart> |= SEEN ; if (! show_object ( obj, NULL, name, data ) ) continue ; <S2SV_ModStart> |= SEEN ; if (! path ) path = """" ; if ( obj -> type == OBJ_TREE ) { process_tree ( revs, ( struct tree * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_BLOB ) { process_blob ( revs, ( struct blob * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_TAG ) { obj -> flags |= SEEN ; show_object ( obj, NULL, name, data ) ; continue ; } if ( obj -> type == OBJ_BLOB ) { process_blob ( revs, ( struct blob * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_TREE ) { process_tree ( revs, ( struct tree * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_BLOB ) { process",0
642,"<S2SV_ModStart> = NULL ; if ( prog -> flags & eflags ) match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; else if (! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ) match ( prog -> start, sp, sp, prog -> flags | eflags | eflags, sub ) ; else if ( prog -> flags & eflags ) match ( prog -> start, sp, sp, prog -> flags | eflags | eflags, sub ) ; else if (! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ) match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ) match ( prog -> start, sp, sp, prog -> flags | eflags | eflags, sub ) ; else if ( prog -> flags & eflags ) match ( prog -> start, sp, sp, prog -> flags | eflags | eflags, sub ) ; else if (! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ) match ( prog -> start, sp, sp, prog -> flags | eflags,",0
643,<S2SV_ModStart> return AVERROR_INVALIDDATA ; if ( zsize > c -> tile_width * c -> tile_height ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ++ ) { if ( zsize > c -> tile_width * c -> tile_height ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ++ ) { if ( zsize > c -> tile_width * c -> tile_height ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ++ ) { if ( zsize > c -> tile_width * c -> tile_height ) return AVERROR_INVALIDDATA ; zsize = c -> tile_width * c -> tile_height ; <S2SV_ModStart> ++ ) { if ( zsize > c -> tile_height * c -> tile_width * c -> tile_height ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ++ ) { if ( zsize > c -> tile_width * c -> tile_height ) return AVERROR_INVALIDDATA ; zsize = c -> tile_width * c -> tile_height ; zsize = c -> tile_height ; zsize = c -> tile_width * c -> tile_height ; zsize = c -> tile_width * c -> tile_height ;,0
644,<S2SV_ModStart> lock_ptr ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
645,"<S2SV_ModStart> ; # ifdef NETSNMP_NO_WRITE_SUPPORT switch ( action ) { case MODE_SET_RESERVE1 : if ( var_val_type!= ASN_INTEGER ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> type <S2SV_blank>!= <S2SV_blank> int\\n"" ) ; return SNMP_ERR_WRONGTYPE ; } idx = * ( ( long * ) var_val ) ; if ( idx!= 1 ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; }",0
646,<S2SV_ModStart> * pixels ++ = ( unsigned char ) ( ( pixel >> 7 ) & 0x07 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 5 ) & 0x07 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 3 ) & 0x07 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x07 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 1 ) & 0x07 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x07 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x07 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x07 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 1 ) & 0x07 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x07 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x07 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >>,0
647,"<S2SV_ModStart> timer ) ; <S2SV_ModEnd> mutex_lock ( & <S2SV_ModStart> slave_list_head, & snd_timer_slave_list <S2SV_ModEnd> ) { _snd_timer_stop <S2SV_ModStart> NULL ; } <S2SV_ModEnd> mutex_unlock ( & <S2SV_ModStart> slave_active_lock ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
648,"<S2SV_ModStart> len ; } if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return len ; } <S2SV_ModStart> len ; } if ( len < 3 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 3)"" ) ) ; return len ; } <S2SV_ModStart> len ; } if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return len ; }",0
649,"<S2SV_ModStart> has_va ; const char * arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config, ""io.va"", ( binobj -> info )? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config, ""bin.baddr"", baseaddr ) ; r_config_set ( r -> config, ""asm.bits"", bits ) ; r_config_set ( r -> config, ""anal.arch"", arch ) ; r_config_set ( r -> config, ""anal.cpu"", arch ) ; r_asm_use ( r -> assembler, arch ) ; r_core_bin_info ( r, R_CORE_BIN_ACC_ALL, R_CORE_BIN_SET, va, NULL, NULL ) ; r_core_bin_set_cur ( r, binfile ) ; return true ; } <S2SV_null>",0
650,"<S2SV_ModStart> void sas_probe_devices ( struct asd_sas_port * port <S2SV_ModEnd> ) { struct <S2SV_ModStart> * dev, * n ; spin_lock ( & port -> dev_list_lock ) ; list_for_each_entry_safe ( dev, n, & port -> dev_list, disco_list_node ) { spin_lock_irq ( & port -> dev_list_lock ) ; list_add_tail ( & dev -> disco_list_node, & port -> dev_list ) ; spin_unlock_irq ( & port -> dev_list_lock",0
651,<S2SV_ModStart> -> u4_bitoffset = ih264d_read_mmco_commands <S2SV_ModEnd> ( ps_dec ),0
652,<S2SV_ModStart> ; int pkt_len ; <S2SV_ModEnd> char line [ <S2SV_ModStart> ; char line [ NETSCREEN_LINE_LENGTH ] ; char cap_int [ NETSCREEN_MAX_INT_NAME_LENGTH ] ; char cap_dst [ NETSCREEN_MAX_INT_NAME_LENGTH ] ; gboolean <S2SV_ModEnd> cap_dir ; char <S2SV_ModStart> ; if ( <S2SV_ModEnd> parse_netscreen_rec_hdr ( & <S2SV_ModStart> ; if ( <S2SV_ModEnd> parse_netscreen_hex_dump ( wth <S2SV_ModStart> ; if ( <S2SV_ModEnd>! parse_netscreen_hex_dump ( <S2SV_ModStart> ; if ( <S2SV_ModEnd> parse_netscreen_hex_dump ( wth <S2SV_ModStart> ; if ( <S2SV_ModEnd> parse_netscreen_hex_dump ( wth <S2SV_ModStart> ; if ( <S2SV_ModEnd> parse_netscreen_hex_dump ( wth <S2SV_ModStart> ; if ( <S2SV_ModEnd> parse_netscreen_hex_dump ( wth <S2SV_ModStart> ; if ( <S2SV_ModEnd> parse_netscreen_hex_dump ( wth <S2SV_ModStart> ; if ( <S2SV_ModEnd> parse_netscreen_hex_dump ( wth <S2SV_ModStart> ; if ( <S2SV_ModEnd>! parse_netscreen_hex_dump (,0
653,"<S2SV_ModStart> 0 ) ; if ( s -> s3 -> rrec. seq_num!= s -> d1 -> processed_rcds. seq_num ) { dtls1_buffer_record ( s, & ( s -> d1 -> processed_rcds ), s -> s3 -> rrec. seq_num ) ; s -> s3 -> rrec. seq_num = s -> d1 -> processed_rcds. seq_num ; } else if ( s -> s3 -> rrec. seq_num!= s -> s3 -> rrec. seq_num ) { dtls1_buffer_record ( s, & ( s -> d1 -> processed_rcds ), s -> s3 -> rrec ), s -> s3 -> rrec. seq_num ) ; s -> s3 -> rrec. seq_num = s -> d1 -> processed_rcds. seq_num ; } else if ( s -> s3 -> rrec. seq_num!= s -> s3 -> rrec. seq_num ) { dtls1_buffer_record ( s, & ( s -> d1 -> processed_rcds ), s -> s3 -> rrec",0
654,<S2SV_ModStart> { int_fast32_t widthOverflow = gifFilePtr -> Image. Width - info -> originalWidth ; int_fast32_t heightOverflow = gifFilePtr -> Image. Height - info -> originalHeight ; const uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( widthOverflow > 0 || heightOverflow > 0 ) { gifFilePtr -> SWidth += widthOverflow ; gifFilePtr -> SHeight += heightOverflow ; } if ( decode ) { int_fast32_t widthOverflow = gifFilePtr -> Image. Width - gifFilePtr -> originalWidth ; int_fast32_t heightOverflow = gifFilePtr -> Image. Height - info -> originalHeight ; const uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > info -> rasterSize || widthOverflow > 0 || heightOverflow > 0 ) { gifFilePtr -> SWidth += widthOverflow ; gifFilePtr -> SHeight += heightOverflow ; } <S2SV_ModStart> uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height,0
655,"<S2SV_ModStart> can_read_key : if ( key -> state == KEY_IS_UNINSTANTIATED <S2SV_ModEnd> ) { ret <S2SV_ModStart> - EOPNOTSUPP ; if ( key -> type -> read ) { down_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; } else { ret = - EOPNOTSUPP ; if ( key -> type -> read ) { ret = - EOPNOTSUPP ; if ( key -> type -> read ) { up_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; } } else { ret = - EOPNOTSUPP ; if ( key -> type -> read ) { down_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; } } error2 : key_put ( key ) ; return ret ; }",0
656,"<S2SV_ModStart> || cherokee_buffer_is_empty ( & <S2SV_ModStart> user ) ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ; re = init_filter ( ldap, props, conn ) ; if ( re!= LDAP_SUCCESS ) { LOG_ERROR ( CHEROKEE_ERROR_VALIDATOR_LDAP_SEARCH, props -> basedn. buf? props -> basedn. buf : """" ) ; return ret_error ; } re = ldap_count_entries ( ldap -> conn, message ) ; if ( re!= 1 ) { ldap_msgfree ( message ) ; return ret_not_found ; } first = ldap_first_entry ( ldap -> conn, message ) ; if ( first == NULL ) { ldap_msgfree ( message ) ; return ret_not_found ; } dn = ldap_get_dn ( ldap -> conn, first ) ; if ( dn == NULL ) { log_error ( CHEROKEE_ERROR_VALIDATOR_LDAP_SEARCH, props -> basedn. buf ) ;",0
657,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ReadBlobShort ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( length <S2SV_ModStart> ReadBlobShort ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlobShort ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlobShort ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlobShort ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlobShort ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart>",0
658,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if <S2SV_ModStart> - 1 ; <S2SV_ModEnd> return 0 ;,0
659,<S2SV_ModStart> ; break ; case RDS_CMSG_ATOMIC_FREND : rm -> atomic. op_m_frend. add = args -> frend. add ; rm -> atomic. op_m_frend. nocarry_mask = args -> m_frend. nocarry_mask ; break ; case RDS_CMSG_ATOMIC_FREND : rm -> atomic. op_m_frend. add = args -> frend. add ; rm -> atomic. op_m_frend. nocarry_mask = args -> m_frend. nocarry_mask ; break ; case RDS_CMSG_MASKED_ATOMIC_CSWP : rm -> atomic. op_type = RDS_ATOMIC_TYPE_CSWP ; rm -> atomic. op_m_cswp. compare = args -> m_cswp. compare ; rm -> atomic. op_m_cswp. swap = args -> m_cswp. swap ; rm -> atomic. op_m_cswp. nocarry_mask = args -> m_cswp. nocarry_mask ; break ; case RDS_,0
660,"<S2SV_ModStart> bus ] ; if ( bi == NULL ) { pr_err ( ""%s: <S2SV_blank> pci <S2SV_blank> [%s] <S2SV_blank> has <S2SV_blank> wrong <S2SV_blank> bus <S2SV_blank> %d <S2SV_blank> info!\\n"", __func__, dev -> name, dev -> bus ) ; return ; } <S2SV_ModEnd> si = &",1
661,"<S2SV_ModStart>, timeo ) ; msg -> msg_namelen = 0",0
662,"<S2SV_ModStart> iface ) >= sizeof ( spath ) ) return - 1 ; if ( strncmp ( spath, var, sizeof ( spath ) <S2SV_ModEnd> )!= 0",0
663,"<S2SV_ModStart> 0 ) { if ( len < 9 ) { t1mac_output_data ( ( byte * ) s, len - 9 ) ; return ; } <S2SV_ModStart> ++ s ; if ( len < 1 ) { t1mac_output_data ( ( byte * ) t, len - 1 ) ; return ; } <S2SV_ModEnd> if ( * <S2SV_ModStart> ++ s ; if ( len < 1 ) { t1mac_output_data ( ( byte * ) t, len - 1 ) ; t1mac_output_data ( ( byte * ) t, len - 1 ) ; t1mac_output_data ( ( byte * ) s, len - 1 ) ; return ; } <S2SV_ModEnd> if ( * <S2SV_ModStart> ++ s ; if ( len < 1 ) { t1mac_output_data ( ( byte * ) t, len - 1 ) ; if ( len < 1 ) { t1mac_output_data ( ( byte * ) t, len - 1 ) ; t1mac_output_data ( ( byte * ) t, len - 1 ) ; t1mac_output_data ( ( byte * ) s, len - 1 ) ; } <S2SV_ModEnd> if ( *",0
664,"<S2SV_ModStart> 0 ) { if (! ctx -> quiet ) mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> data, strlen ( ctx -> hdrs [ i ] -> data ) ) ; else if ( ctx -> hdrs [ i ] -> changed ) { mutt_hcache_store ( hc, ctx -> hdrs [ i ] -> data, strlen ( ctx -> hdrs [ i ] -> data ), ctx -> hdrs [ i ], 0 ) ; } # ifdef USE_HCACHE if ( ctx -> hdrs [ i ] -> changed ) { mutt_hcache_delete ( hc, ctx -> hdrs [ i ] -> data, strlen ( ctx -> hdrs [ i ] -> data ) ) ; } else if ( ctx -> hdrs [ i ] -> changed ) { mutt_hcache_store ( hc, ctx -> hdrs [ i ] -> data, strlen ( ctx -> hdrs [ i ] -> data ), ctx -> hdrs [ i ], 0 ) ; } # ifdef USE_HCACHE if ( ctx -> hdrs [ i ] -> changed ) { mutt_hcache_store ( hc, ctx -> hdrs [ i ] -> data, strlen ( ctx -> hdrs [",0
665,<S2SV_ModStart> objp ) ; <S2SV_ModEnd> return TRUE ;,0
666,"<S2SV_ModStart> = select ( uipc_main. max_fd + 1, & uipc_main. active_set, NULL, NULL, NULL ) ; if ( result < 0 ) { BTIF_TRACE_EVENT ( ""select <S2SV_blank> timeout"" ) ; continue ; } else if ( result == - EAGAIN ) { BTIF_TRACE_EVENT ( ""select <S2SV_blank> failed <S2SV_blank> %s"", strerror ( errno ) ) ; continue ; } else { result = - EAGAIN ; if ( result < 0 ) { BTIF_TRACE_EVENT ( ""select <S2SV_blank> failed <S2SV_blank> %s"", strerror ( errno ) ) ; continue ; } UIPC_UNLOCK ( ) ; uipc_check_task_flags_locked ( ) ; uipc_check_fd_locked ( UIPC_CH_ID_AV_AUDIO ) ; for ( ch_id = 0 ; ch_id < UIPC_CH_NUM ; ch_id ++ ) { if ( ch_id!= UIPC_CH_ID_AV_AUDIO ) uipc_check_fd_locked ( ch_id ) ; uipc_check",0
667,"<S2SV_ModStart> return 1 ; } if ( sk -> sk_state == DCCP_LISTEN ) { sk -> sk_state = DCCP_CLOSED ; dcb -> dccpd_reset_code = DCCP_RESET_CODE_NO_CONNECTION ; return 1 ; } if ( sk -> sk_state == DCCP_REQUESTING ) { dccp_send_sync ( sk, dcb -> dccpd_seq, DCCP_PKT_SYNC ) ; goto discard ; } if ( sk -> sk_state == DCCP_RESPOND && dh -> dccph_type == DCCP_PKT_DATA ) { dccp_send_sync ( sk, dcb -> dccpd_seq, DCCP_PKT_SYNC ) ; goto discard ; } if ( sk -> sk_state == DCCP_RESPOND && dh -> dccph_type == DCCP_PKT_REQUEST ) || ( dp -> dccps_role == DCCP_ROLE_SERVER && dh -> dccph_type == DCCP_PKT_RESPOND ) ) { dccp_send_sync ( sk, dcb -> dccpd_seq",0
668,"<S2SV_ModStart> struct msixcap msixcap ; if ( msgnum < 1 || msgnum > MAX_MSIX_TABLE_ENTRIES - 1 ) { pr_err ( ""%s: <S2SV_blank> invalid <S2SV_blank> number <S2SV_blank> of <S2SV_blank> msix <S2SV_blank> tables <S2SV_blank> (%d)"", __func__, msgnum ) ; return - EINVAL ; } <S2SV_ModStart> ) ; pci_populate_msixcap ( & msixcap, barnum, tab_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size + dev -> msix. pba_size ) ; pci_emul_alloc_bar ( dev, barnum, PCIBAR_MEM32, tab_size + dev -> msix. pba_size ) ; return ( pci_emul_add_capability ( dev, & msixcap, sizeof ( msixcap ) <S2SV_ModEnd> ) ) ;",0
669,<S2SV_ModStart> goto out ; mutex_lock ( & dentry -> d_inode -> i_mutex ) ; <S2SV_ModStart> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
670,<S2SV_ModStart> ( isspace ( ( unsigned char ),1
671,"<S2SV_ModStart> ; if (! authctxt -> user ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } <S2SV_ModEnd> if ( ( <S2SV_ModStart> ) )!= 0 || ( r = <S2SV_ModEnd> sshpkt_get_cstring ( ssh <S2SV_ModStart> chost, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & cuser, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & chost, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & chost, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & cuser, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & chost, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & cuser, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & chost, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh,",0
672,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",1
673,"<S2SV_ModStart> + 1 ) ; if ( mutt_str_cmp ( line, ctx -> hdrs [ i ] -> data ) == 0 ) break ; if ( i == ctx -> msgcount ) { mutt_debug ( 1, ""skip <S2SV_blank> header <S2SV_blank> %d <S2SV_blank> %s\\n"", index, line ) ; ctx -> hdrmax -- ; } else if ( i == ctx -> msgcount ) { mutt_debug ( 1, ""skip <S2SV_blank> header <S2SV_blank> %d <S2SV_blank> %s\\n"", index, line ) ; } else if ( mutt_str_strcmp ( line, ctx -> hdrs [ i ] -> data ) == 0 ) break ; if ( i == ctx -> msgcount ) { mutt_debug ( 1, ""skip <S2SV_blank> header <S2SV_blank> %d <S2SV_blank> %s\\n"", index, line ) ; } else if ( i == ctx -> msgcount ) { mutt_debug ( 1, ""skip <S2SV_blank> header <S2SV_blank> %d <S2SV_blank> %s\\n"", index, line ) ; } else if ( mutt_str_strcmp ( line, ctx -> hdrs [ i ] -> data ) == 0 ) break ; if ( i == ctx -> msgcount ) { mutt_debug",0
674,"<S2SV_ModStart> NULL ) goto cleanup <S2SV_ModEnd> ; status = <S2SV_ModStart> 0 ; cleanup : if ( X509_get_issuer_name ( kdc_cert ) == NULL ) { X509_NAME_free ( is -> issuer ) ; ASN1_INTEGER_free ( is -> serial ) ; free ( is ) ; return retval ; } status = X509_NAME_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) * valid_kdcPkId = 1 ; } retval = 0 ; <S2SV_ModEnd> return retval ;",0
675,<S2SV_ModStart> precno ++ ) { if ( precno >= ( reslevel -> num_precincts_x * reslevel -> num_precincts_y ) ) { av_freep ( & prec -> zerobits ) ; av_freep ( & prec -> cblkincl ) ; av_freep ( & prec -> cblk ) ; } else if ( precno >= ( reslevel -> num_precincts_x * reslevel -> num_precincts_y ) ) { av_freep ( & band -> prec ) ; } else if ( precno >= ( reslevel -> num_precincts_x * reslevel -> num_precincts_y ) ) { av_freep ( & band -> prec ) ; } else if ( precno >= ( reslevel -> num_precincts_x * reslevel -> num_precincts_y ) ) { av_freep ( & band -> prec ) ; } else if ( precno >= ( reslevel -> num_precincts_x * reslevel -> num_precincts_y ) ) { av_freep ( & band -> prec ),0
676,"<S2SV_ModStart> ) ) { if ( ( ctxt -> validate ) && ( ctxt -> vctxt. error!= NULL ) ) { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""PEReference: <S2SV_blank> %%%s; <S2SV_blank> not <S2SV_blank> found\\n"", name, NULL ) ; } else { if ( ( ctxt -> validate ) && ( ctxt -> vctxt. error!= NULL ) ) { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""PEReference: <S2SV_blank> %%%s; <S2SV_blank> not <S2SV_blank> found\\n"", name, NULL ) ; } else { xmlValidityError ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""Internal: <S2SV_blank> %%%s; <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> parameter <S2SV_blank> entity\\n"", name, NULL ) ; } } else { if ( ( entity -> etype == XML_EXTERNAL_PARAMETER_ENTITY ) && ( entity -> etype == XML_EXTERNAL_PARAMETER_ENTITY ) ) { xmlWarningMsg ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""External: <S2SV_blank> %%%s; <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> parameter <S2SV_blank> entity\\n"", name, NULL ) ; }",0
677,"<S2SV_ModStart> ) ) ; rcu_read_lock ( ) ; <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
678,<S2SV_ModStart> <S2SV_null> <S2SV_null> static TX_MODE <S2SV_ModEnd> select_tx_mode ( const <S2SV_ModStart>. lossless ) { return ONLY_4X4 ; } else if ( cpi -> sf. tx_size_search_method == USE_LARGESTALL ) { return ALLOW_32X32 ; } else if ( cpi -> sf. tx_size_search_method == USE_FULL_RD ) { return cpi -> rd_tx_select_threshes [ cpi -> sf. frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ cpi -> sf. frame_type ] [ ALLOW_32X32 ]? ALLOW_32X32 : TX_MODE_SELECT ; } else if ( cpi -> sf. tx_size_search_method == USE_LARGESTALL ) { return ALLOW_32X32 ; } else if ( cpi -> sf. tx_size_search_method == USE_LARGESTALL ) { return ALLOW_32X32 ; } else if ( cpi -> sf. tx_size_search_method == USE_LARGESTALL,0
679,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> H264SwDecMalloc ( u32 <S2SV_ModEnd> size ) { <S2SV_ModStart> return malloc ( <S2SV_ModEnd> size ) ;,0
680,"<S2SV_ModStart> = min ( <S2SV_ModEnd> printval, im <S2SV_ModStart> = max ( <S2SV_ModEnd> printval, im <S2SV_ModStart> printval, im -> <S2SV_ModEnd> gdes [ vidx <S2SV_ModStart> = max ( <S2SV_ModEnd> printval, im <S2SV_ModStart> = max ( <S2SV_ModEnd> printval, im <S2SV_ModStart> = min ( <S2SV_ModEnd> printval, im <S2SV_ModStart> = max ( <S2SV_ModEnd> printval, im <S2SV_ModStart> = max ( <S2SV_ModEnd> printval, im <S2SV_ModStart> = max ( <S2SV_ModEnd> printval, im <S2SV_ModStart> = max ( <S2SV_ModEnd> printval, im <S2SV_ModStart> = min ( <S2SV_ModEnd> printval, im <S2SV_ModStart> = min ( <S2SV_ModEnd> printval, im <S2SV_ModStart> = max ( <S2SV_ModEnd> printval, im <S2SV_ModStart> = max ( <S2SV_ModEnd> printval, im <S2SV_ModStart> = max ( <S2SV_ModEnd> printval, im <S2SV_ModStart> = max ( <S2SV_ModEnd> printval, im <S2SV_ModStart> = max ( <S2SV_ModEnd> printval, im <S2SV_ModStart> = min ( <S2SV_ModEnd> printval, im <S2SV_ModStart> = max ( <S2SV_ModEnd> printval, im <S2SV_ModStart> = max ( <S2SV_ModEnd> printval, im <S2SV_ModStart> = max ( <S2SV_ModEnd> printval, im <S2SV_ModStart> = max ( <S2SV_ModEnd> printval, im",0
681,<S2SV_ModStart> sh_size < 1 || shdr -> sh_size > sz <S2SV_ModStart> 1 ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { s,0
682,<S2SV_ModStart> ; if ( buf1 -> num_tiles < buf2 -> num_tiles ) { return - 1 ; } else if ( buf1 -> num_tiles == buf2 -> num_tiles ) { return 1 ; } else if ( buf1 -> num_tiles == buf2 -> num_tiles ) { return 0 ; } else if ( buf1 -> num_tiles == buf2 -> num_tiles ) { return - 1 ; } else if ( buf1 -> num_tiles < buf2 -> num_tiles ) { return 1 ; } else if ( buf1 -> num_tiles == buf2 -> num_tiles ) { return 1 ; } else if ( buf1 -> num_tiles == buf2 -> num_tiles ) { return - 1 ; } else if ( buf1 -> num_tiles == buf2 -> num_tiles ) { return - 1 ; } else if ( buf1 -> num_tiles == buf2 -> num_tiles ) { return 1 ; } else if ( buf1 -> num_tiles < buf2 -> num_tiles ) { return - 1 ; } else if ( buf1 -> num_tiles < buf2 -> num_tiles ) { return - 1 ; } else if ( buf1,0
683,"<S2SV_ModStart> if ( ( i = cdf_read_short_stream ( & info, & h, & dir, & scn ) ) == - 1 ) { expn = ""Cannot <S2SV_blank> read <S2SV_blank> short <S2SV_blank> stream"" ; goto out3 ; } # ifdef CDF_DEBUG cdf_dump_dir ( & info, & h, & dir, & scn ) ; # endif if ( ( i = cdf_read_directory ( & info, & h, & dir, & sst ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> read <S2SV_blank> directory"" ; goto out3 ; } if ( ( i = cdf_read_short_stream ( & info, & h, & dir, & scn, & root_storage ) ) == - 1 ) { expn = ""Cannot <S2SV_blank> read <S2SV_blank> directory"" ; goto out4 ; } # endif if ( ( i = cdf_read_short_stream ( & info, & h, & dir, & scn, & sst ) ) == - 1 ) { expn = ""Can\'t <S2SV_blank> read <S2SV_blank> short <S2SV_blank> stream"" ; goto out4 ; } # ifdef CDF_DEBUG cdf_dump_directory ( & info, &",0
684,"<S2SV_ModStart> = NULL ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) return NULL ; if (! info ) return NULL ;",0
685,"<S2SV_ModStart>! eof ) { if ( vars -> str. len > vars -> end - vars -> ptr ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Input <S2SV_blank> variables <S2SV_blank> exceed <S2SV_blank> the <S2SV_blank> limit <S2SV_blank> change <S2SV_blank> max_input_vars <S2SV_blank> in <S2SV_blank> php.ini."", max_vars ) ; return FAILURE ; } <S2SV_ModStart>! eof ) { if ( vars -> str. len > vars -> end - vars -> ptr ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Input <S2SV_blank> variables <S2SV_blank> exceed <S2SV_blank> the <S2SV_blank> limit <S2SV_blank> change <S2SV_blank> max_input_vars <S2SV_blank> in <S2SV_blank> php.ini."", max_vars ) ; return FAILURE ; }",0
686,<S2SV_ModStart> ; if ( protocol < 0 || protocol > AX25_MAX_PROTOCOL ) return - EINVAL,0
687,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs,",0
688,"<S2SV_ModStart> -> _eip ; rc = assign_eip_near ( ctxt, <S2SV_ModEnd> ctxt -> src <S2SV_ModStart> src. val <S2SV_ModEnd> ) ; break",0
689,"<S2SV_ModStart> list. name, false",0
690,"<S2SV_ModStart> * secret, void * <S2SV_ModStart> * th ; <S2SV_ModEnd> int dlen ; <S2SV_ModStart> dlen = ceph_x_decrypt <S2SV_ModEnd> ( secret, <S2SV_ModStart> end, dbuf, TEMP_TICKET_BUF_LEN ) ; if ( dlen <= 0 ) { ret = dlen ; goto out ; } dout ( "" <S2SV_blank> decrypted <S2SV_blank> %d <S2SV_blank> bytes\\n"", TEMP_TICKET_BUF_LEN ) ; dp = dbuf ; tkt_struct_v = ceph_decode_8 ( & dp ) ; if ( tkt_struct_v!= 1 ) goto out ; } dlen = ceph_x_decrypt ( secret, p, end, dbuf, TEMP_TICKET_BUF_LEN ) ; if ( dlen <= 0 ) { ret = dlen ; goto out ; } dout ( "" <S2SV_blank> decrypted <S2SV_blank> %d <S2SV_blank> bytes\\n"", dlen ) ; dp = dbuf ; dend = dp + dlen ; tkt_struct_v = ceph_decode_8 ( & dp ) ; tkt_struct_v = ceph_decode_8 ( & dp ) ; tkt_struct_v = ce",0
691,"<S2SV_ModStart> / 2 ; if ( count <= 0 ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d)"", count ) ) ) ;",0
692,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
693,"<S2SV_ModStart> -> tlsext_tick_lifetime_hint ) ; if (! s -> session -> tlsext_tick_lifetime_hint ) { al = SSL_AD_DECODE_ERROR ; SSLerr ( SSL_F_SSL3_GET_NEW_SESSION_TICKET, SSL_R_INVALID_PARAMETER ) ; goto err ; }",0
694,"<S2SV_ModStart> b ) ; if ( b -> manager -> event == NULL ) { r = log_error_errno ( errno, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } r = sd_event_add_io ( b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r < 0 ) { log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } r = sd_event_add_io ( b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r < 0 ) { log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } r = log_info ( ""Watching <S2SV_blank> system <S2SV_blank> buttons <S2SV_blank> on <S2SV_blank> /dev/input/%s <S2SV_blank> (%s)"", b -> name, name ) ; if ( r < 0 ) { r = log_error_errno ( errno, ""Failed <S2SV_blank> to <S2SV_blank>",0
695,<S2SV_ModStart> ( errors ) return TEST_ERR_MAJOR_BAD ; else <S2SV_ModEnd> return 0 ;,0
696,<S2SV_ModStart> NULL ; return ( * field_rtrn!= NULL ) <S2SV_ModEnd> ; case EXPR_ARRAY_REF <S2SV_ModStart>. entry ; return ( * index_rtrn!= NULL ) <S2SV_ModEnd> ; default :,0
697,<S2SV_ModStart> lun ) sas_eh_finish_cmd <S2SV_ModEnd> ( cmd ),0
698,"<S2SV_ModStart>, end_col_offset ; if ( TYPE ( CHILD ( n, name_i ) ) == NAME ) { if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) return NULL ; } else if ( TYPE ( CHILD ( n, name_i + 2 ) ) == TYPE ( CHILD ( n, name_i + 3 ) ) == TYPE_COMMENT ) { if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) ) return NULL ; } body = ast_for_suite ( c, CHILD ( n, name_i + 4 ) ) ; if (! body ) return NULL ; get_last_end_pos ( body, & end_lineno, & end_col_offset ) ; if (! body ) return NULL ; get_last_end_pos ( body, & end_lineno, & end_col_offset ) ; if (! body ) return NULL ; get_last_end_pos ( body,",0
699,"<S2SV_ModStart> int err = 0 ; if (! sock_flag ( sk, SOCK_DEAD ) ) return - EINVAL",0
700,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
701,"<S2SV_ModStart> ; lock_sock ( sk ) ; if ( sk -> sk_state!= SS_UNCONNECTED ) { err = - ECONNRESET ; goto out ; } if ( flags & MSG_OOB ) { err = - EOPNOTSUPP ; goto out ; } if ( sk -> sk_state!= SS_UNCONNECTED ) { if ( sock_flag ( sk, SOCK_DONE ) ) err = - ENOTCONN ; goto out ; } target = sock_rcvlowat ( sk, flags & MSG_WAITALL, len ) ; if ( target >= transport -> stream_rcvhiwat ( vsk ) ) { err = - EINVAL ; goto out_wait ; } else if ( target >= transport -> stream_rcvhiwat ( vsk ) ) { err = - EINVAL ; goto out_wait ; }",0
702,"<S2SV_ModStart> ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"" <S2SV_ModEnd>, o_row_count, <S2SV_ModStart> == 3 ) { unsigned int * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_element_count ) ) ; * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( REALTYPE * ) malloc ( sizeof ( double ) * ( * o_element_count ) ) ; if ( * o_column_idx == NULL ) { * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( REALTYPE * ) malloc ( sizeof ( double ) * ( * o_element_count + 1 ) ) ; * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( REALTYPE * ) malloc ( sizeof ( double ) * ( * o",0
703,"<S2SV_ModStart> ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> Rec ) ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> Rec ) ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> Rec ) ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> Rec ) ; if ( WPG_Palette. StartIndex > WPG_Palette. NumOfEntries ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> Rec ) ; if ( WPG_Palette. StartIndex > WPG_Palette",0
704,<S2SV_ModStart> ctxt ) { int rc = X86EMUL_CONTINUE ; <S2SV_ModStart> ) ) ) rc = <S2SV_ModStart> ) ; return rc <S2SV_ModEnd> ; } <S2SV_null>,1
705,,1
706,"<S2SV_ModStart> 0 ) ; if (! res ) return - ENODEV ; if ( resource_size ( res ) < HI3660_STUB_CLOCK_DATA ) return - ENODEV <S2SV_ModStart> ; freq_reg -= HI3660_STUB_CLOCK_DATA ; for ( i = 0 ; i < HI3660_CLK_STUB_NUM ; i ++ ) { ret = devm_ioremap ( dev, res -> start, HI3660_STUB_CLOCK_DATA ) ; if ( ret ) return ret ; ret = devm_ioremap ( dev, res -> start, HI3660_STUB_CLOCK_DATA ) ; if ( ret ) return ret ; ret = devm_of_clk_remove_hw_provider ( & pdev -> dev, hi3660_stub_clk_hw_get, hi3660_stub_clks ) ; if ( ret ) return ret ; ret = devm_of_clk_remove_hw_provider ( & pdev -> dev, hi3660_stub_clk_hw_get, hi3660_stub_clks )",0
707,"<S2SV_ModStart> : if ( <S2SV_ModEnd> position > psf <S2SV_ModStart> -> header ) ) { psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; break ; } ; if ( <S2SV_ModEnd> position > psf <S2SV_ModStart> -> header ) ) { psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; break ; } ; <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> += position ; <S2SV_ModEnd> psf_fseek ( psf <S2SV_ModStart> > psf -> header ) ) { psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; break ; } ; <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> -> header ) ) { psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; break ; } ; psf_fseek ( psf, position, whence ) ; return ; case SEEK_SET : if ( <S2SV_ModEnd> position > psf <S2SV_ModStart> -> header ) ) { psf_log_printf ( psf, ""Bad <S2SV_blank> whence <S2SV_blank> param <S2SV_blank> in <S2SV_blank> header_seek().\\n"" ) ; break ; } ; if ( <S2SV_ModEnd>",0
708,"<S2SV_ModStart> out_mutex ; } new_size = i_size_read ( inode ) ; <S2SV_ModStart> ioffset ) ; ext4_inode_block_unlocked_dio ( inode ) ; handle = ext4_journal_start ( inode, EXT4_HT_TRUNCATE, credits ) ; if ( IS_ERR ( handle ) ) { ret = PTR_ERR ( handle ) ; goto out_dio ; }",0
709,"<S2SV_ModStart> uint32_t track_size ; if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } <S2SV_ModStart> ++ ) { if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } <S2SV_ModStart> ++ ) { if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } <S2SV_ModStart> ++ ) { if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } <S2SV_ModStart> ++ ) { if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT",0
710,"<S2SV_ModStart> sk_sndbuf = max_t <S2SV_ModEnd> ( u32, <S2SV_ModStart> val * 2, SOCK_MIN_SNDBUF ) ; sk -> sk_write_space ( sk ) ; break ; case SO_RCVBUF : val = min_t ( u32, val, sysctl_rmem_max ) ; set_rcvbuf : sk -> sk_userlocks |= SOCK_RCVBUF_LOCK ; sk -> sk_rcvbuf = max_t ( u32, val * 2, SOCK_MIN_RCVBUF ) ;",0
711,"<S2SV_ModStart> * bh ; struct logicalVolDesc * lvd ; uint32_t mapTableLength ; <S2SV_ModStart> TAG_IDENT_LVD ) ; mapTableLength = le32_to_cpu ( lvd -> mapTableLength ) ; for ( i = 0 ; i < sbi -> s_partitions && offset < mapTableLength ; i ++, offset += gpm -> partitionMapLength ) { struct udf_part_map * map = & sbi -> s_partmaps [ i ] ; map -> s_partition_type = UDF_TYPE1_MAP15 ; map -> s_volumeseqnum = le16_to_cpu ( gpm1 -> volSeqNum ) ; map -> s_partition_num = le16_to_cpu ( gpm1 -> partitionNum ) ; map -> s_partition_func = NULL ; } else if ( type == 3 ) { struct udfPartitionMap3 * upm3 = ( struct udfPartitionMap3 * ) gpm ; map -> s_partition_type = UDF_TYPE2_MAP15 ; map -> s_partition_type = UDF_TYPE2_MAP15 ; map -> s_partition_num = le16_to_cpu",0
712,"<S2SV_ModStart> long n ; jas_eprintf ( ""warning: <S2SV_blank> ignoring <S2SV_blank> BMP <S2SV_blank> decoder <S2SV_blank> options\\n"" ) ; JAS_DBGLOG ( 1, ( ""BMP <S2SV_blank> header: <S2SV_blank> magic <S2SV_blank> 0x%x; <S2SV_blank> siz <S2SV_blank> %d; <S2SV_blank> res1 <S2SV_blank> %d; <S2SV_blank> res2 <S2SV_blank> %d; <S2SV_blank> off <S2SV_blank> %d\\n"", hdr. magic, hdr. siz, hdr. reserved1, hdr. reserved2, hdr. off ) ) ; <S2SV_ModStart> ( ""BMP <S2SV_blank> information: <S2SV_blank> len <S2SV_blank> %d; <S2SV_blank> width <S2SV_blank> %d; <S2SV_blank> height <S2SV_blank> %d; <S2SV_blank> numplanes <S2SV_blank> %d; <S2SV_blank> """,0
713,"<S2SV_ModStart> struct va_format vaf <S2SV_ModEnd> ; va_start ( <S2SV_ModStart> dev ), func <S2SV_ModEnd>, line, <S2SV_ModStart> ( ""[0000:00:00.0]:[%s:%d]: <S2SV_blank> %pV"", func <S2SV_ModEnd>, line,",1
714,<S2SV_ModStart> ( IHEVCD_ERROR_T ) IHEVCD_SUCCESS <S2SV_ModEnd> ) ; },0
715,"<S2SV_ModStart> ) ; save_text_from_text_view <S2SV_ModEnd> ( g_tv_comment, <S2SV_ModStart> FILENAME_COMMENT ) ; if ( g_expert_mode ) gtk_notebook_set_current_page ( assistant, PAGENO_SUMMARY ]. page_widget == page ) { gtk_notebook_set_current_page ( assistant, PAGENO_SUMMARY ]. page_no, NULL ) ; return ; } if ( pages [ PAGENO_REVIEW_DATA ]. page_widget == page ) { gtk_widget_show ( g_btn_detail ) ; gtk_widget_set_sensitive ( g_btn_next, FALSE ) ; } if ( pages [ PAGENO_REVIEW_DATA ]. page_widget == page ) { gtk_widget_show ( g_btn_detail ) ; gtk_widget_set_sensitive ( g_btn_next, FALSE ) ; on_review_data_changed ( gtk_text_view_get_buffer ( g_tv_review_data ), NULL ) ; } if ( pages [ PAGENO_REVIEW_DATA ]. page_widget == page ) { gtk_",0
716,"<S2SV_ModStart> media_pad_desc pad ; if ( copy_to_user ( & links -> pads [ p ], & pad, sizeof ( pad ) ) ) return - EFAULT ;",0
717,<S2SV_ModStart> ) ) { if ( prev_line_has_list_loosening_effect && line -> type == MD_LINE_LIST_LOOSEING_EFFECT ) { line -> type = MD_LINE_LIST_LOOSEING_EFFECT ; ctx -> last_line_has_list_loosening_effect = 1 ; } else if ( line -> type == MD_LINE_BLANK ) { ctx -> last_line_has_list_loosening_effect = 1 ; } else if ( line -> type == MD_LINE_BLANK ) { line -> type = MD_LINE_BLANK ; ctx -> last_line_has_list_loosening_effect = 0 ; } else if ( line -> type == MD_LINE_BLANK ) { ctx -> last_line_has_list_loosening_effect = 1 ; } else if ( line -> type == MD_LINE_BLANK ) { ctx -> last_line_has_list_loosening_effect = 0 ; } else if ( line -> type == MD_LINE_BLANK ) { ctx -> last_line_has_list_loosening_effect =,0
718,"<S2SV_ModStart>, extent ; size_t width, <S2SV_ModStart>. height ; if ( sun_info. depth > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; width = sun_info. width ; height = sun_info. height ; <S2SV_ModStart>. depth ; if ( sun_info. length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart>. length ; if ( sun_info. type!= GetBlobType ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( sun_info. maptype!= GetBlobType ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart>. type ; if ( sun_info. length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( sun_info. type!= GetBlobType ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( sun_info. type!= GetBlobType ( image ) ) ThrowReaderException ( CorruptImageError",0
719,"<S2SV_ModStart> * client, const char * client_name, hdb_entry_ex * krbtgt, krb5_enctype krbtgt_etype, krb5_principals spp, const krb5_data * enc_pa_data <S2SV_ModStart> ( config -> <S2SV_ModEnd> trpolicy == TRPOLICY_ALWAYS_CHECK <S2SV_ModStart> TRPOLICY_ALWAYS_CHECK ) # undef GLOBAL_ALLOW_PER_PRINCIPAL ( config -> trpolicy == TRPOLICY_ALLOW_PER_PRINCIPAL ) # undef GLOBAL_ALLOW_DISABLE_TRANSITED_CHECK ( config -> trpolicy == TRPOLICY_ALWAYS_CHECK ) # undef GLOBAL_ALLOW_PER_PRINCIPAL ( config -> trpolicy == TRPOLICY_ALWAYS_CHECK ) # undef GLOBAL_ALLOW_PER_PRINCIPAL ( config -> trpolicy == TRPOLICY_ALLOW_PER_PRINCIPAL ) # undef GLOBAL_ALLOW_DISABLE_TRANSITED_CHECK ( config -> trpolicy == TRPOLICY_ALWAYS_CHECK ) # undef GLOBAL_ALLOW_PER_PRINCIPAL ( config -> trpolicy == TRPOLICY_ALWAYS_CHECK ) #",0
720,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
721,<S2SV_ModStart> ireq -> opt ; newinet -> inet_opt = NULL ; newinet -> mc_index = inet_iif ( skb ) ; newinet -> mc_ttl = ip_hdr ( skb ) -> ttl ; newinet -> inet_id = jiffies ;,0
722,<S2SV_ModStart> struct xmlparser parser ; if ( bufsize < sizeof ( parser. starteltfunc ) ) { parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. data = data ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. starteltfunc = NameValueParserStartElt ; parser. endeltfunc = NameValueParserEndElt ; parser. datafunc = NameValueParserGetData ; parser. attfunc = 0 ; },0
723,"<S2SV_ModStart> ( offset!= sizeof ( __wsum ) <S2SV_ModEnd> ) csum = <S2SV_ModStart> csum, csum_partial <S2SV_ModEnd> ( skb_transport_header ( <S2SV_ModStart>, offset, sizeof ( __wsum ) <S2SV_ModEnd> ) ) ;",0
724,"<S2SV_ModStart> pfn ) ; kvm_iommu_put_pages <S2SV_ModEnd> ( kvm, <S2SV_ModStart> unmap_pages : kvm_iommu_put_pages <S2SV_ModEnd> ( kvm,",0
725,"<S2SV_ModStart> -> msg, cmd -> msg_len ) ; if ( cmd -> msg_len < 6 ) return - EINVAL ;",0
726,<S2SV_ModStart> perf_event_context * ctx ; ctx = perf_event_ctx_lock <S2SV_ModEnd> ( event ) <S2SV_ModStart> state = PERF_EVENT_STATE_OFF <S2SV_ModEnd> ; } raw_spin_unlock_irq,0
727,<S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> [ 0 ] <S2SV_ModEnd> ; return ( <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ) ; } <S2SV_ModStart> unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> ( buffer [ <S2SV_ModStart> [ 3 ] <S2SV_ModEnd> ; return ( <S2SV_ModStart> value & 0xffffffff <S2SV_ModEnd> ) ; },0
728,"<S2SV_ModStart> free_nid * i = f2fs_kmem_cache_alloc ( free_nid_slab, GFP_NOFS ) <S2SV_ModStart> ; int err <S2SV_ModEnd> ; if ( <S2SV_ModStart> return false ; <S2SV_ModEnd> ne = __lookup_nat_cache <S2SV_ModStart> ( build ) { i = f2fs_kmem_cache_alloc ( free_nid_slab, GFP_NOFS ) ; i -> nid = nid ; i -> state = NID_NEW ; if ( radix_tree_preload ( GFP_NOFS ) ) { spin_lock ( & nm_i -> nid_list_lock ) ; spin_unlock ( & nm_i -> nid_list_lock ) ; radix_tree_preload_end ( ) ; return true ; } i = f2fs_kmem_cache_alloc ( free_nid_slab, GFP_NOFS ) ; i -> nid = nid ; i -> state = NID_NEW ; if ( radix_tree_preload ( GFP_NOFS ) ) { spin_lock ( & nm_i -> nid_list_lock ) ; spin_unlock ( & nm_i -> nid_list_lock ) ;",0
729,<S2SV_ModStart>. post_proc_flag ; flags -> color_ref_frame_flag = ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) | ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_display_mv_flag? VP9D_DEBUG_DRAW_MV : 0 ) ; # else ( flags -> color_ref_frame_flag = ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) | ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ),0
730,"<S2SV_ModStart> 0 ) ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Missing <S2SV_blank> extra <S2SV_blank> info\\n"" ) ; return - EBADR ; } if ( unlikely (! RING_GET_REQUEST ( & vif -> tx, cons ) ) ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Invalid <S2SV_blank> extra <S2SV_blank> type: <S2SV_blank> %d\\n"", extra. type ) ; return - EINVAL ; } memcpy ( & extras [ extra. type - 1 ], & extra ) ; vif -> tx. req_cons = ++ cons ; } <S2SV_ModEnd> return work_to_do ;",0
731,<S2SV_ModStart> ) ) ; hdr -> sadb_msg_satype = SADB_SATYPE_UNSPEC ;,0
732,"<S2SV_ModStart> ) return ; memset ( & r1, 0, sizeof ( r1 ) ) ;",1
733,"<S2SV_ModStart> 1 ) - 1 ; luaL_argcheck ( L, pos + size <= ld, 2, ""data <S2SV_blank> string <S2SV_blank> too <S2SV_blank> short"" ) ; <S2SV_ModStart> size ) ; if ( size == 0 ) { luaL_error ( L, ""format <S2SV_blank> `c0\' <S2SV_blank> needs <S2SV_blank> a <S2SV_blank> previous <S2SV_blank> size"" ) ; return luaL_error ( L, ""format <S2SV_blank> `c0\' <S2SV_blank> needs <S2SV_blank> a <S2SV_blank> previous <S2SV_blank> size"" ) ; return luaL_error ( L, ""format <S2SV_blank> `c0\' <S2SV_blank> needs <S2SV_blank> a <S2SV_blank> previous <S2SV_blank> size"" ) ; return luaL_error ( L, ""format <S2SV_blank> `c0\' <S2SV_blank> needs <S2SV_blank> a <S2SV_blank> previous <S2SV_blank> size"" <S2SV_ModStart> 1 ) ; } if ( size == 0 ) { luaL_error ( L, ""format <S2SV_blank> `c0\' <S2SV_blank> needs <S2SV_blank> a <S2SV_blank> previous <S2SV_blank> size"" ) ; return luaL_error ( L, ""format <S2SV_blank> `c0\' <S2SV_blank> needs <S2SV_blank> a <S2SV_blank> previous <S2SV_blank> size"" ) ; return luaL_error ( L, ""format <S2SV_blank> `c0\' <S2SV_blank> needs <S2SV_blank> a <S2SV_blank> previous <S2SV_blank> size"" ) ; return luaL_error ( L, ""format <S2SV_blank> `c0\' <S2SV_blank> needs <S2SV_blank> a <S2SV_blank>",0
734,"<S2SV_ModStart> = 0 ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6 ) ) ; goto trunc ; } <S2SV_ModStart> struct olsr_msg4 ) ) ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg6 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6 ) ) ; goto trunc ; } ND_TCHECK2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", (",0
735,"<S2SV_ModStart> ; int n ; if (! body -> data ) break ; n = ( len - sizeof ( struct oz_multiple_fixed ) + 1 ) / body -> unit_size ; while ( n -- ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, body -> unit_size ) ; data += body -> unit_size ; } break ; case OZ_DATA_F_MULTIPLE_EXTEND : { struct oz_multiple_fixed * body = ( struct oz_multiple_fixed * ) data_hdr ; int data_len = len - sizeof ( struct oz_multiple_fixed ) + 1 ; int unit_size = body -> unit_size ; u8 * data = body -> data ; int count ; int i ; if (! unit_size ) break ; count = data_len / unit_size ; for ( i = 0 ; i < count ; i ++ ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, data_len ) ; data += data_len ; } break ; case OZ_DATA_F_ISOC_EXTEND",0
736,<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> = 0 ; <S2SV_ModEnd> vpx_usec_timer_start ( & <S2SV_ModStart> timer ) ; <S2SV_ModEnd> return res ;,1
737,"<S2SV_ModStart> { fprintf ( stderr <S2SV_ModEnd>, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) <S2SV_ModStart> 0 ) ; copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> rv = copy_file_as_user <S2SV_ModEnd> ( src, <S2SV_ModStart> ( dest, getuid ( ), getgid ( ) ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } waitpid ( child, NULL, 0 ) ; if ( chown ( dest, getuid ( ), getgid ( ) ) == - 1 ) errExit ( ""fchown"" ) ; if ( chmod ( dest, 0600 ) == - 1 ) errExit ( ""chmod"" ) ; return 1 ; } drop_privs ( 0 ) ; <S2SV_ModEnd> return 0 ;",0
738,<S2SV_ModStart> IMAP_FATAL ; return ; } if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { idata -> status = IMAP_FATAL ; return ; },0
739,<S2SV_ModStart> return res ; <S2SV_ModEnd> return 0 ;,1
740,"<S2SV_ModStart> ; if ( unlikely (! path [ depth ]. p_ext ) ) { EXT4_ERROR_INODE ( inode, ""p_ext <S2SV_blank> > <S2SV_blank> EXT_MAX_EXTENT!"" ) ; return - EFSCORRUPTED ; } if (",0
741,<S2SV_ModStart> 768 ) { if ( ptr_hbe_txposer -> core_frame_length == 768 ) { if ( ptr_hbe_txposer -> k_start + ptr_hbe_txposer -> synth_size > 24 ) ptr_hbe_txposer -> k_start = 24 - ptr_hbe_txposer -> synth_size ; ptr_hbe_txposer -> k_start = 24 - ptr_hbe_txposer -> synth_size ; } else { if ( ptr_hbe_txposer -> k_start + ptr_hbe_txposer -> synth_size > 16 ) ptr_hbe_txposer -> k_start = 16 - ptr_hbe_txposer -> synth_size ; } else if ( ptr_hbe_txposer -> core_frame_length == 768 ) { if ( ptr_hbe_txposer -> k_start + ptr_hbe_txposer -> synth_size > 24 ) ptr_hbe_txposer -> k_start = 24 - ptr_hbe_txposer -> synth_size ; } else if ( ptr_hbe_,0
742,"<S2SV_ModStart> ] ; image_w = get_ushort ( & tga [ 5 ] ) ; image_h = get_ushort ( & tga [ 7 <S2SV_ModEnd> ] ) ; <S2SV_ModStart> # if 0 image_w = get_ushort ( & tga [ 8 ] ) ; image_h = get_ushort ( & tga [ 10 ] ) ; # else image_w = get_ushort ( & tga [ 8 <S2SV_ModEnd> ] ) ; <S2SV_ModStart> # endif image_w = get_ushort ( & tga [ 12 ] ) ; image_h = get_ushort ( & tga [ 13 ] ) ; pixel_depth = tga [ 15 ] ; image_desc = tga [ 18 ] ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if (! id ) { fprintf ( stderr, ""tga_readheader: <S2SV_blank> memory <S2SV_blank> out\\n"" ) ; return 0 ; } if (! fread ( id, id_len, 1, fp ) ) { fprintf ( stderr, ""\\nError: <S2SV_blank> tga_readheader: <S2SV_blank> memory <S2SV_blank> out\\n"" ) ; return 0 ;",0
743,<S2SV_ModStart> ssize_t ret ; if ( unlikely (! capable ( CAP_SYS_RAWIO ) ) ) return - EPERM,0
744,"<S2SV_ModStart> tp ) { unsigned long rem ; <S2SV_ModStart> CPUCLOCK_SCHED ) { rem = div_u64_rem <S2SV_ModEnd> ( cpu. <S2SV_ModStart>. sched, NSEC_PER_SEC <S2SV_ModEnd>, & tp <S2SV_ModStart> tp ) ; } } else { div_u64_rem <S2SV_ModEnd> ( cpu. <S2SV_ModStart> tp ) ; }",0
745,<S2SV_ModStart> tif_dir ; uint32 <S2SV_ModEnd> nstrips ; if,0
746,"<S2SV_ModStart> lua_module ) ; luaL_cfg_t * cfg = ap_get_module_config ( r -> per_dir_config, & lua_module ) ; luaL_dir_cfg * file_cfg = ap_get_module_config ( r -> per_dir_config, & lua_module ) ; const lua_authz_provider_spec * prov_spec = parsed_require_line ; luaL_getglobal ( L, file_name ) ; if ( L == NULL ) { ap_log_rerror ( APLOG_MARK, APLOG_ERR, 0, r, APLOGNO ( 02314 ) ""Unable <S2SV_blank> to <S2SV_blank> compile <S2SV_blank> VM <S2SV_blank> for <S2SV_blank> authz <S2SV_blank> provider <S2SV_blank> (not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> function)"", r, APLOGNO ( 02319 ) ""Unable <S2SV_blank> to <S2SV_blank> find <S2SV_blank> entry <S2SV_blank> function <S2SV_blank> \'%s\' <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> (not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank> function)"", prov_spec -> function_name, file_name ) ; ap_lua_release_state ( L, spec, r ) ; return AUTHZ_GENERAL_ERROR ; } lua_getglobal ( L, file",0
747,"<S2SV_ModStart> * prev ; unsigned <S2SV_ModEnd> long address ; <S2SV_ModStart> address ) ; if (! mmget_still_valid ( mm ) ) return - EFAULT <S2SV_ModEnd> ; prev = <S2SV_ModStart> VM_GROWSDOWN ) && ( vma -> vm_flags & VM_GROWSDOWN ) ) { if (! ( vma -> vm_flags & VM_GROWSDOWN ) && ( vma -> vm_flags & VM_WRITE | VM_READ | VM_EXEC ) ) return - ENOMEM ; } else { unsigned long size ; size = ( vma -> vm_start - address ) >> PAGE_SHIFT ; grow = ( vma -> vm_end - address ) >> PAGE_SHIFT ; error = - ENOMEM ; if ( grow <= vma -> vm_pgoff ) { error = acct_stack_growth ( vma, size, grow ) ; if (! error ) { spin_lock ( & mm -> page_table_lock ) { spin_lock ( & mm -> page_table_lock ) ; anon_vma_interval_tree_pre_update_vma ( vma ) ; anon_vma_interval_tree_post_update_vma ( vma )",0
748,"<S2SV_ModStart> { umode_t mode ; error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & mode <S2SV_ModStart> & mode, & acl ) ; if ( error ) return error ; error = xfs_set_mode ( inode, mode, & acl ) ; if ( error <S2SV_ModEnd> <= 0 ) <S2SV_ModStart> <= 0 ) <S2SV_ModEnd> return error ;",0
749,"<S2SV_ModStart> long mountflags, <S2SV_ModEnd> int optional ) <S2SV_ModStart> # endif if ( mount ( fsname, target, fstype, mountflags & ~ MS_REMOUNT, data ) ) { INFO ( ""mounting <S2SV_blank> \'%s\' <S2SV_blank> on <S2SV_blank> \'%s\' <S2SV_blank> (optional): <S2SV_blank> %s"", fsname, target ) ; return 0 ; } else if ( mount ( fsname, target, fstype, mountflags & ~ MS_REMOUNT, data ) ) { INFO ( ""failed <S2SV_blank> to <S2SV_blank> mount <S2SV_blank> \'%s\' <S2SV_blank> on <S2SV_blank> \'%s\' <S2SV_blank> (optional): <S2SV_blank> %s"", fsname, target ) ; return - 1 ; } # ifdef HAVE_STATVFS if ( statvfs ( fsname, & sb ) == 0 ) { if ( required_flags & MS_NOEXEC ) required_flags |= MS_NOEXEC ; if ( sb. f_flag & MS_RDONLY ) required_flags |= MS_RDONLY ; if ( sb. f_flag & MS_NOEXEC ) required_flags |= MS_NOEXEC ; if ( sb. f_flag & MS_NOEXEC ) required_flags |= MS_NOEXEC ; if ( sb.",0
750,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
751,<S2SV_ModStart> -> it_overrun = 0 <S2SV_ModEnd> ; ++ timr,0
752,<S2SV_ModStart> if (! proto_end <S2SV_ModEnd> ) return 0,0
753,<S2SV_ModStart> static_key * done_key <S2SV_ModEnd> ) { static <S2SV_ModStart> flags ) ; <S2SV_ModEnd> return true ;,0
754,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> io_data -> read <S2SV_ModStart> 0 ) { mutex_lock ( & io_data -> ffs -> ffs_mutex ) ; <S2SV_ModStart> 1 ) ; } <S2SV_ModStart> -> ffs_eventfd &&! ( io_data -> kiocb -> ki_flags & IOCB_EVENTFD ) ) { mutex_unlock ( & io_data -> ffs -> ffs_mutex ) ; usb_ep_free_request ( io_data -> ep, io_data -> req ) ; } else { mutex_unlock ( & io_data -> ffs -> ffs_mutex ) ; }",0
755,"<S2SV_ModStart> ; if ( rt -> rt_flags & RTCF_DOREDIRECT <S2SV_ModEnd> &&! skb_sec_path <S2SV_ModStart> &&! skb_sec_path ( skb ) ) ip_rt_send_redirect ( skb ) ; skb -> priority = iph -> tos ; return NF_HOOK ( NFPROTO_IPV4, NF_INET_PRE_ROUTING, skb ) <S2SV_ModEnd> ; too_many_hops :",0
756,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
757,"<S2SV_ModStart> prep ) { <S2SV_ModEnd> struct trusted_key_payload * <S2SV_ModStart> trusted_key_payload * new_p <S2SV_ModEnd> ; size_t datalen <S2SV_ModStart> key -> payload. data [ 0 ] ; struct trusted_key_options * new_o ; char * datablob = kmalloc ( datalen + 1, GFP_KERNEL ) ; if (! datablob ) return - ENOMEM ; ret = datablob_parse ( datablob, new_p, new_o ) ; if ( ret!= Opt_update ) { ret = - EINVAL ; kfree ( new_p ) ; goto out ; } dump_options ( new_o ) ; ret = key_seal ( new_p, new_o ) ; if ( ret < 0 ) { pr_info ( ""trusted_key: <S2SV_blank> key_seal <S2SV_blank> failed <S2SV_blank> (%d)\\n"", ret ) ; kfree ( new_p ) ; goto out ; } ret = key_seal ( new_p, new_o ) ; if ( ret < 0 ) { pr_info ( ""trusted_key: <S2SV_blank> key_seal <S2SV_blank> failed <S2SV_blank> (%d)\\n"", ret ) ; kfree ( new",0
758,<S2SV_ModStart> } v |= ( jas_uint_fast32_t ) <S2SV_ModStart> v |= ( jas_uint_fast32_t <S2SV_ModEnd> ) ; if,0
759,"<S2SV_ModStart> ; while ( ( skb = skb_dequeue ( & loopback_queue ) )!= NULL ) { lci_i = ( ( skb -> data [ 0 ] << 8 ) & 0x0FF ) ; frametype = skb -> data [ 2 ] ; dest = ( rose_address * ) ( skb -> data + 4 ) ; lci_o = ROSE_DEFAULT_MAXVC + 1 - lci_i ; skb_reset_transport_header ( skb ) ; } while ( ( skb = skb_dequeue ( & loopback_queue ) )!= NULL ) { if ( skb_dequeue ( & loopback_queue ) )!= NULL ) { if ( ( skb = skb_dequeue ( & loopback_queue ) )!= NULL ) { if ( rose_rx_call_request ( skb, dev, rose_loopback_neigh, lci_o ) == 0 ) kfree_skb ( skb ) ; } else { kfree_skb ( skb ) ; } }",0
760,"<S2SV_ModStart> goto out_free ; kvm_iommu_unmap_pages ( kvm, <S2SV_ModEnd> mem -> guest_phys_addr <S2SV_ModStart> -> guest_phys_addr ) ; kvm_iommu_unmap_pages ( kvm, <S2SV_ModEnd> mem -> guest_phys_addr <S2SV_ModStart> -> guest_phys_addr ) ; kvm_iommu_unmap_pages ( kvm, <S2SV_ModEnd> mem -> guest_phys_addr <S2SV_ModStart> mem -> guest_phys_addr ) ; kvm_iommu_unmap_pages ( kvm, <S2SV_ModEnd> mem -> guest_phys_addr <S2SV_ModStart> -> guest_phys_addr ) ; kvm_iommu_unmap_pages ( kvm, <S2SV_ModEnd> mem -> guest_phys_addr <S2SV_ModStart> -> guest_phys_addr ) ; kvm_iommu_unmap_pages ( kvm, <S2SV_ModEnd> mem -> guest_phys_addr <S2SV_ModStart> mem -> guest_phys_addr ) ; kvm_iommu_unmap_pages ( kvm, <S2SV_ModEnd> mem -> guest_phys_addr <S2SV_ModStart> mem -> guest_phys_addr ) ; kvm_iommu_unmap_pages ( kvm",0
761,<S2SV_ModStart> indev!= NULL && indev -> ifa_list,0
762,"<S2SV_ModStart> fdt ) ; if ( base >= path_len ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart> nextoffset ; switch ( tag ) { case FDT_END_NODE : depth = - 1 ; if ( depth == FDT_MAX_DEPTH ) return - FDT_ERR_BADSTRUCTURE ; <S2SV_ModStart> FDT_ERR_BADSTRUCTURE ; name = fdt_get_name ( fdt, offset, & len ) ; if (! name ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 1 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 1 + len >= path_len ) return - FDT_ERR_NOSPACE ;",0
763,"<S2SV_ModStart> ckDataSize ) ; if ( dff_chunk_header. ckDataSize == 0 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( dff_chunk_header. ckDataSize == 0 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( dff_chunk_header. ckDataSize == 0 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( dff_chunk_header. ckDataSize == 0 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( dff_chunk_header. ckDataSize == 0 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ;",0
764,"<S2SV_ModStart> case NID_pkcs7_publickey : if ( p7 -> d. private_key == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_NO_PRIVATE_KEY ) ; goto err ; } <S2SV_ModStart> case NID_pkcs7_privatekey : if ( p7 -> d. private_key == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_NO_PRIVATE_KEY ) ; goto err ; } if ( p7 -> d. private_key == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_NO_PRIVATE_KEY ) ; goto err ; } <S2SV_ModStart> case NID_pkcs7_privatekey : if ( p7 -> d. private_key == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_NO_PRIVATE_KEY ) ; goto err ; } if ( p7 -> d. private_key == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R",0
765,"<S2SV_ModStart> ) ) { redisLog <S2SV_ModEnd> ( REDIS_VERBOSE, <S2SV_ModStart> ( REDIS_VERBOSE, ""%d <S2SV_blank> clients <S2SV_blank> connected <S2SV_blank> (%d <S2SV_blank> slaves), <S2SV_blank> %zu <S2SV_blank> bytes <S2SV_blank> in <S2SV_blank> use"", listLength ( server. clients ) - listLength ( server. slaves ), zmalloc_used_memory ( ) <S2SV_ModEnd> ) ; }",0
766,"<S2SV_ModStart> } if ( ( options -> flags & UV_PROCESS_SETUID ) && setuid ( options -> uid, options -> gid ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setuid()"" ) ; _exit ( 127 ) ; } if (",0
767,"<S2SV_ModStart> -> priv ; struct dvb_usb_device_context * ctx ; <S2SV_ModStart> - EOPNOTSUPP ; } mutex_lock ( & d -> data_mutex ) ; if ( wbuf == NULL || wlen == 0 ) { warn ( ""i2c <S2SV_blank> wr: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", wlen ) ; return - EOPNOTSUPP ; } if ( rbuf == NULL || rlen == 0 ) { warn ( ""i2c <S2SV_blank> wr: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", wlen ) ; return - EINVAL ; } mutex_lock ( & d -> data_mutex ) ; st -> data [ 0 ] = cmd ; memcpy ( & st -> data [ 1 ], wbuf, wlen ) ; if ( wo ) ret = dvb_usb_generic_write ( d, st -> data, 1 + wlen, rbuf, rlen, 0 ) ; else ret = dvb_usb_generic_rw ( d, st -> data, 1 + wlen, rbuf, rlen, 0 ) ; mutex_unlock ( & d -> data_",0
768,"<S2SV_ModStart> channel ) ; if ( client -> priv -> protocol_timeout == 0 ) { g_debug ( ""GsmXSMPClient: <S2SV_blank> New <S2SV_blank> client <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> expired"", client -> priv -> description ) ; g_debug ( ""GsmXSMPClient: <S2SV_blank> New <S2SV_blank> client <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> expired\\n"", client -> priv -> description ) ; g_debug ( ""GsmXSMPClient: <S2SV_blank> New <S2SV_blank> client <S2SV_blank> \'%s\'"", client -> priv -> description ) ; g_debug ( ""GsmXSMPClient: <S2SV_blank> New <S2SV_blank> client <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> expired\\n"", client -> priv -> description ) ; return ; } g_debug ( ""GsmXSMPClient: <S2SV_blank> New <S2SV_blank> client <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> expired\\n"", client -> priv -> description ) ; g_debug ( ""GsmXSMPClient: <S2SV_blank> New <S2SV_blank> client <S2SV_blank> \'%s\'"", client -> priv -> description ) ; g_debug ( ""GsmXSMPClient: <S2SV_blank> New <S2SV_blank> client <S2SV_blank> \'%s\'"", client -> priv -> description ) ; }",0
769,<S2SV_ModStart> - 1 ; if ( book -> dim > 0 && i < n ),0
770,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
771,"<S2SV_ModStart> new_root_item ) ; btrfs_dir_item_init ( dir_item ) ; if ( btrfs_check_dir_item_collision ( fs_info, root, dir_item ) ) { ret = btrfs_check_dir_item_collision ( fs_info, root, dir_item ) ; if ( ret ) { pending -> error = ret ; goto no_free_dir_item ; } } else if ( btrfs_check_dir_item ( fs_info, root, dir_item ) ) { ret = btrfs_check_dir_item_collision ( fs_info, root, dir_item ) ; if ( ret ) { ret = btrfs_check_dir_item_collision ( fs_info, root, dir_item ) ; if ( ret ) { pending -> error = ret ; goto no_free_dir_item ; } else if ( btrfs_check_dir_item_collision ( fs_info, root, dir_item ) ) { ret = btrfs_check_dir_item_collision ( fs_info, root, dir_item )",0
772,<S2SV_ModStart> fp ) ; spin_lock ( & unix_gc_lock ) ; <S2SV_ModStart> ( s ) <S2SV_ModEnd> ; u -> <S2SV_ModStart> -- ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
773,"<S2SV_ModStart> NULL ) { if ( psf -> channel_map!= NULL ) { size_t chanmap_size = map_info -> chanmap_size * sizeof ( psf -> channel_map [ 0 ] ) ; if ( chanmap_size > sizeof ( psf -> channel_map [ 0 ] ) ) return SFE_MALLOC_FAILED ; if ( ( psf -> channel_map = malloc ( chanmap_size ) ) == NULL ) return SFE_MALLOC_FAILED ; memcpy ( psf -> channel_map, map_info -> channel_map, chanmap_size ) ; } else if ( psf -> channel_map!= NULL ) { size_t chanmap_size = map_info -> chanmap_size * sizeof ( psf -> channel_map [ 0 ] ) ; if ( ( psf -> channel_map = malloc ( chanmap_size ) ) == NULL ) return SFE_MALLOC_FAILED ; memcpy ( psf -> channel_map, map_info -> channel_map, chanmap_size )",0
774,"<S2SV_ModStart> ) { if (! check_scale_factors ( other_w, other_h, this_w, this_h, sf -> x_scale_fp, sf -> y_scale_fp, sf -> x_step_q4, sf -> y_step_q4 ) ) { sf -> x_scale_fp = REF_INVALID_SCALE ; return ; } sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } sf -> x_step_q4 = scaled_x ( 16, sf ) ; sf -> y_step_q4 = scaled_y ( 16, sf ) ; if ( vp9_is_scaled ( sf ) ) { sf -> predict [ 0 ] [ 0 ] = vp9_convolve_copy ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve_avg ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve8_horiz ; sf -> predict [ 0 ] [ 1 ] = vp9_convolve8_horiz ; sf -> predict [ 1 ] [ 0 ] = vp9_convolve8_horiz ; } else { sf -> predict [ 0 ] [ 0",0
775,<S2SV_ModStart> { int32_t nestsize ; if ( ms -> buffer_size_longs > ms -> max_buffer_size ) return GPMF_ERROR_BAD_STRUCTURE ;,0
776,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
777,"<S2SV_ModStart> ip6t_entry ) && <S2SV_ModEnd> unconditional ( & <S2SV_ModStart> verdict < 0 <S2SV_ModEnd> ) || visited <S2SV_ModStart> verdict < - NF_MAX_VERDICT <S2SV_ModEnd> - 1 ) <S2SV_ModStart> verdict < - NF_MAX_VERDICT <S2SV_ModEnd> - 1 ) <S2SV_ModStart> verdict < - NF_MAX_VERDICT <S2SV_ModEnd> - 1 ) <S2SV_ModStart> verdict < - NF_MAX_VERDICT <S2SV_ModEnd> - 1 ) <S2SV_ModStart> verdict < - NF_MAX_VERDICT <S2SV_ModEnd> - 1 ) <S2SV_ModStart> if ( ( strcmp ( t -> target. u. name, XT_STANDARD_TARGET ) == 0 ) && t -> verdict < - NF_MAX_VERDICT - 1 ) { duprintf ( ""mark_source_chains: <S2SV_blank> bad <S2SV_blank> "" ""negative <S2SV_blank> verdict <S2SV_blank> (%i)\\n"", t -> verdict ) ; return 0 ; } else if ( ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && t -> verdict < - NF_MAX_VERDICT - 1 ) && t -> verdict < - NF_MAX_VERDICT - 1 ) { duprintf ( ""mark_source",0
778,"<S2SV_ModStart> ) ; if (! pdf -> xrefs ) { ERR ( ""Failed <S2SV_blank> to <S2SV_blank> locate <S2SV_blank> the <S2SV_blank> xref <S2SV_blank> token. <S2SV_blank> "" ""This <S2SV_blank> might <S2SV_blank> be <S2SV_blank> corrupt <S2SV_blank> PDF.\\n"" ) ; return - 1 ; } <S2SV_ModStart> ) ) { ERR ( ""Failed <S2SV_blank> to <S2SV_blank> locate <S2SV_blank> the <S2SV_blank> xref <S2SV_blank> token. <S2SV_blank> "" ""This <S2SV_blank> might <S2SV_blank> be <S2SV_blank> a <S2SV_blank> corrupt <S2SV_blank> PDF.\\n"" ) ; return - 1 ; } <S2SV_ModStart> ) ) ; if (! is_linear_skipped ( fp, & pdf -> xrefs [ i ] ) ) { ERR ( ""Failed <S2SV_blank> to <S2SV_blank> locate <S2SV_blank> the <S2SV_blank> xref <S2SV_blank> token. <S2SV_blank> "" ""This <S2SV_blank> might <S2SV_blank> be <S2SV_blank> a <S2SV_blank> corrupt <S2SV_blank> PDF.\\n"" ) ; return - 1 ; }",0
779,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
780,"<S2SV_ModStart> ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> ( opt ) { atomic_sub ( opt -> tot_len, & sk -> sk_omem_alloc ) ; <S2SV_ModStart> ( opt ) { atomic_sub ( opt -> tot_len, & sk -> sk_omem_alloc ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
781,"<S2SV_ModStart> = NULL, <S2SV_ModEnd> tmpin = NULL <S2SV_ModStart> tmpin = NULL ; if (! dcont && check_content ( cms ) ) return 0 ; <S2SV_ModEnd> if (! <S2SV_ModStart> tmpin ) goto err <S2SV_ModEnd> ; if ( <S2SV_ModStart> tmpin ) goto err <S2SV_ModEnd> ; if ( <S2SV_ModStart> tmpin ) goto err <S2SV_ModEnd> ; if ( <S2SV_ModStart> tmpin ) goto err <S2SV_ModEnd> ; if ( <S2SV_ModStart> tmpin ) goto err <S2SV_ModEnd> ; if ( <S2SV_ModStart> tmpin ) goto err <S2SV_ModEnd> ; if (",0
782,"<S2SV_ModStart> ) ) { struct ipv6_rxopt * rxopt = rcu_dereference_protected ( np -> rxopt, sock_owned_by_user ( sk ) ) ; if ( rcu_dereference_protected ( sk -> sk_omem_alloc, sock_owned_by_user ( sk ) ) ) return - EFAULT ; rxopt = rcu_dereference_protected ( np -> rxopt, sock_owned_by_user ( sk ) ) ; if ( rxopt ) { struct ipv6_rxopt * rxopt = rcu_dereference_protected ( sk -> sk_omem_alloc, sock_owned_by_user ( sk ) ) ; rxopt = rcu_dereference_protected ( sk -> sk_omem_alloc, sock_owned_by_user ( sk ) ) ; }",0
783,<S2SV_ModStart> ( ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_net_ops <S2SV_ModStart> ( ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_protosw_exit <S2SV_ModStart> ( ) ; unregister_pernet_subsys <S2SV_ModEnd> ( & sctp_protosw_exit,0
784,<S2SV_ModStart> ) ; } <S2SV_null> <S2SV_null>,0
785,"<S2SV_ModStart> ptr ) { struct net_device * dev = ( ( struct in_ifaddr * ) ptr ) -> ifa_dev <S2SV_ModEnd> ; struct netdev_notifier_info <S2SV_ModStart> info ; netdev_notifier_info_init ( <S2SV_ModEnd> & info,",0
786,"<S2SV_ModStart> ( current -> mm <S2SV_ModEnd> ) goto out <S2SV_ModStart> goto out ; if (! mmget_still_valid ( mm ) ) { leave_mm ( smp_processor_id ( ) ) ; goto out ; } if ( ( start!= TLB_FLUSH_ALL ) &&! ( vmflag & VM_HUGETLB ) ) base_pages_to_flush = ( end - start ) >> PAGE_SHIFT ; if ( base_pages_to_flush > tlb_single_page_flush_ceiling ) { base_pages_to_flush = TLB_FLUSH_ALL ; count_vm_tlb_event ( NR_TLB_LOCAL_SHOOTDOWN, base_pages_to_flush ) ; __flush_tlb_single ( start ) ; } else { for ( addr = start ; addr < end ; addr += PAGE_SIZE ) { count_vm_tlb_event ( NR_TLB_LOCAL_FLUSH_ONE ) ; __flush_tlb_single ( addr ) ; } } trace_tlb_flush ( TLB_LOCAL_MM_SHOOTDOWN, base_pages_to_",0
787,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> index ) ; <S2SV_ModEnd> ovpsnr = sse_to_psnr,0
788,"<S2SV_ModStart> val ) { char * temp = kmalloc ( sizeof ( temp ) + 1, GFP_KERNEL <S2SV_ModEnd> ) ; int <S2SV_ModStart> ) { temp [ i ] = fgetc ( fp ) ; if ( temp [ i ] == 0 || temp [ i ] == '\\0' || temp [ i ] == EOF ) { temp [ i ] = 0 ; break ; } <S2SV_ModEnd> } } <S2SV_null>",0
789,<S2SV_ModStart> task ) { <S2SV_ModEnd> del_timer ( & <S2SV_ModStart> -> timer ) <S2SV_ModEnd> ; complete (,1
790,<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen (,1
791,"<S2SV_ModStart> = 0 ; if ( ( af = calloc ( 1, sizeof ( struct lldpd_af ) ) ) == NULL ) { log_warn ( ""lldp"", ""failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> local <S2SV_blank> chassis"" ) ; return - 1 ; } <S2SV_ModStart> ( af = calloc ( 1, sizeof ( struct lldpd_af ) ) ) == NULL ) { log_warn ( ""lldp"", ""failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> local <S2SV_blank> chassis"" ) ; return - 1 ; } <S2SV_ModStart> ( af = calloc ( 1, sizeof ( struct lldpd_af ) ) ) == NULL ) { log_warn ( ""lldp"", ""failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> local <S2SV_blank> port"" ) ; return - 1 ; } <S2SV_ModStart> ( af = calloc ( 1, sizeof ( struct lldpd_af ) ) ) == NULL ) { log_warn ( ""lldp"", ""failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> local <S2SV_blank> chassis"" ) ; return - 1 ; } <S2SV_ModStart> ( af = calloc ( 1, sizeof ( struct lldpd_af ) ) ) == NULL ) { log_warn ( ""lldp"", ""failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> local <S2SV_blank>",0
792,"<S2SV_ModStart> case BPLIST_UINT : { plist_data_t data = plist_new_plist_data ( ) ; data -> type = PLIST_BOOLEAN ; data -> boolval = TRUE ; data -> length = 1 ; return node_create ( NULL, data ) ; } case BPLIST_UINT : { plist_data_t data = plist_new_plist_data ( ) ; data -> type = PLIST_BOOLEAN ; data -> boolval = FALSE ; data -> length = 1 ; return node_create ( NULL, data ) ; } case BPLIST_TRUE : { plist_data_t data = plist_new_plist_data ( ) ; data -> type = PLIST_BOOLEAN ; data -> boolval = FALSE ; data -> length = 1 ; return node_create ( NULL, data ) ; } case BPLIST_FALSE : { plist_data_t data = plist_new_plist_data ( ) ; data -> type = PLIST_BOOLEAN ; data -> boolval = FALSE ; data -> length = 1 ; return node_create ( NULL, data ) ; } case BPLIST_TRUE : { plist_data_t data = plist_new_",0
793,"<S2SV_ModStart> ( ) ; <S2SV_ModEnd> TRACE_DEBUG ( ""CIDER=0x%04"" <S2SV_ModStart> ( interface, KSZ8851_CIDER ) ) ; if ( ksz8851ReadReg ( interface, KSZ8851_PHY1ILR )!= KSZ8851_REV_A3_ID ) { return ERROR_WRONG_IDENTIFIER ; } if ( ksz8851ReadReg ( interface, KSZ8851_CIDER )!= KSZ8851_REV_A3_ID ) { return ERROR_WRONG_IDENTIFIER ; } if ( ksz8851ReadReg ( interface, KSZ8851_CIDER )!= KSZ8851_REV_A3_ID ) { return ERROR_WRONG_IDENTIFIER ; } if ( ksz8851ReadReg ( interface, KSZ8851_CIDER )!= KSZ8851_REV_A3_ID )!= KSZ8851_REV_A3_ID ) { return ERROR_WRONG_IDENTIFIER ; } if ( ksz8851ReadReg ( interface, KSZ8851_CIDER )!= KSZ8851_REV_A3_ID )",0
794,<S2SV_ModStart> all_channels_lock ) ; <S2SV_ModEnd> wake_up_interruptible ( &,0
795,"<S2SV_ModStart> flags ) { struct btrfs_dir_item * dir_item = NULL ; <S2SV_ModStart> XATTR_REPLACE ) { dir_item = btrfs_lookup_dir_item ( trans, root, path, btrfs_ino ( inode ), name, name_len, - 1 ) ; if (! dir_item ) { di = btrfs_lookup_dir_item ( trans, root, path, btrfs_ino ( inode ), name, name_len, - 1 ) ; if ( IS_ERR ( di ) ) { ret = PTR_ERR ( di ) ; goto out ; } ret = btrfs_delete_one_dir_name ( trans, root, path, di ) ; if ( ret ) goto out ; btrfs_release_path ( path ) ; } else { di = btrfs_lookup_xattr ( trans, root, path, btrfs_ino ( inode ), name, name_len, 0 ) ; if ( IS_ERR ( di ) ) { ret = PTR_ERR ( di ) ; goto out ; } ret = btrfs_delete_one_dir_name ( trans, root",0
796,"<S2SV_ModStart> 1 ; if ( op -> len > buf_len ) { ALOGE ( ""b/26366256"" ) ; return - 1 ; } <S2SV_ModStart> ; if ( op -> len > buf_len ) { ALOGE ( ""b/26366256"" ) ; return - 1 ; } <S2SV_ModStart> case WASM_OP_I64EQZ : if ( op -> len > buf_len ) { ALOGE ( ""b/26366256"" ) ; return - 1 ; } if ( op -> len > buf_len ) { ALOGE ( ""b/26366256"" ) ; return - 1 ; } if ( op -> len > buf_len ) { ALOGE ( ""b/26366256"" ) ; return - 1 ; } <S2SV_ModStart> case WASM_OP_I64EQZ : if ( op -> len > buf_len ) { ALOGE ( ""b/26366256"" ) ; return - 1 ; } if ( op -> len > buf_len ) { ALOGE ( ""b/26366256"" ) ; return - 1 ; }",0
797,<S2SV_ModStart> client ) ; <S2SV_ModEnd> g_hash_table_destroy ( client,0
798,"<S2SV_ModStart>. skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
799,"<S2SV_ModStart> ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) return - ENOKEY ; if (",0
800,<S2SV_ModStart> NEED_IP ( 1 <S2SV_ModEnd> ) ; } <S2SV_ModStart> NEED_OP ( t <S2SV_ModEnd> + 3 ) <S2SV_ModStart> NEED_IP ( t <S2SV_ModEnd> + 3 ) <S2SV_ModStart> NEED_OP ( t <S2SV_ModEnd> + 3 ) <S2SV_ModStart> NEED_IP ( t <S2SV_ModEnd> + 3 ) <S2SV_ModStart> NEED_OP ( t <S2SV_ModEnd> + 3 ) <S2SV_ModStart> NEED_IP ( t <S2SV_ModEnd> + 3 ) <S2SV_ModStart> NEED_OP ( t <S2SV_ModEnd> + 3 ) <S2SV_ModStart> NEED_IP ( t <S2SV_ModEnd> + 3 ) <S2SV_ModStart> NEED_OP ( t <S2SV_ModEnd> + 3 ) <S2SV_ModStart> NEED_IP ( t <S2SV_ModEnd> + 3 ) <S2SV_ModStart> NEED_OP ( t <S2SV_ModEnd> + 3 ) <S2SV_ModStart> NEED_IP ( t <S2SV_ModEnd> + 3 ) <S2SV_ModStart> NEED_OP ( t <S2SV_ModEnd> + 3 ) <S2SV_ModStart> NEED_IP ( t <S2SV_ModEnd> + 3 ) <S2SV_ModStart> NEED_IP ( t <S2SV_ModEnd> + 3 ) <S2SV_ModStart> NEED_IP ( t <S2SV_ModEnd> + 3 ) <S2SV_ModStart> NEED_OP ( t <S2SV_ModEnd> + 3 ),0
801,"<S2SV_ModStart> ; if ( size < IMAGE_SIZE_MIN ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> size!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - EINVAL ; } <S2SV_ModStart> ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name <S2SV_ModEnd> ) ; bootstage_error <S2SV_ModStart> + BOOTSTAGE_SUB_FORMAT ) ; if ( size < IMAGE_SIZE_MIN ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> size!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - EINVAL ; } <S2SV_ModStart> + BOOTSTAGE_SUB_FORMAT ) ; if ( size < IMAGE_SIZE_MIN ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> size!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - EINVAL ; }",0
802,<S2SV_ModStart> len ) { vpn_packet_t <S2SV_ModEnd> outpkt ; outpkt,0
803,<S2SV_ModStart> ) __get_free_page ( GFP_KERNEL ) ; if (! vmx_msr_bitmap_legacy_x2apic ) goto out3 ; vmx_msr_bitmap_legacy_x2apic = ( unsigned long * ) __get_free_page ( GFP_KERNEL ) ; if (! vmx_msr_bitmap_legacy_x2apic ) goto out3 ; vmx_msr_bitmap_longmode_x2apic = ( unsigned long * ) __get_free_page ( GFP_KERNEL ) ; if (! vmx_msr_bitmap_longmode_x2apic ) goto out4 ; if ( nested ) { vmx_msr_bitmap_nested = ( unsigned long * ) __get_free_page ( GFP_KERNEL ) ; if (! vmx_msr_bitmap_nested ) goto out5 ; },0
804,"<S2SV_ModStart> ; if ( bin -> shstrtab ) { if ( shdr -> sh_name + shdr -> sh_size > bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } else if ( shdr -> sh_name + shdr -> sh_size > bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( link_shdr && link_shdr -> sh_name + link_shdr -> sh_size > bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } else if ( link_shdr && link_shdr -> sh_name + link_shdr -> sh_size > bin -> shstrtab_size ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" )",0
805,"<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart>, UI_DEV_DESTROY )",0
806,<S2SV_ModStart> ( rc -> avg_frame_bandwidth <S2SV_ModEnd> * rc -> <S2SV_ModStart> -> avg_frame_bandwidth * rc -> avg_gf_interval <S2SV_ModEnd> ) / <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
807,"<S2SV_ModStart> ++ ) { if ( strcmp ( argv [ i ], ""/dev/null"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""/dev/null"" ) ; else if ( strcmp ( argv [ i ], ""/dev/null"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""/dev/null"" ) ; else if ( strcmp ( argv [ i ], ""/dev/null"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""/dev/null"" ) ; else if ( strcmp ( argv [ i ], ""/dev/null"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""/dev/null"" ) ; else if ( strcmp ( argv [ i ], ""/dev/null"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""/dev/null"" ) ; else if ( strcmp ( argv [ i ], ""/dev/null"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""/dev/null"" )",0
808,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
809,<S2SV_ModStart> INDENT_INCR ; } else if ( cmd == HTML_DT ) { if ( mode -> indent_level > 0 && mode -> indent_level < MAX_INDENT_LEVEL ) offset -= INDENT_INCR ; <S2SV_ModStart> -= INDENT_INCR ; },0
810,"<S2SV_ModStart> tail ; if ( CDF_SEC_SIZE ( h ) * sst -> sst_len > CDF_SEC_SIZE ( h ) * sst -> sst_len ) { DPRINTF ( ( ""%d: <S2SV_blank> offset <S2SV_blank> begin <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> end <S2SV_blank> %p <S2SV_blank> || <S2SV_blank> %"" SIZE_T_FORMAT ""u"" ""u"" ""u"" ""u"" ""u"" ""u"" ""u"" ""u"" ""u"" SIZE_T_FORMAT ""u"" SIZE_T_FORMAT ""u"" ""u"" ""u"" ), CDF_SEC_SIZE ( h ) * sst -> sst_len, CDF_SEC_SIZE ( h ), sst -> sst_len ) ) ; errno = EFTYPE ; return - 1 ; } if ( e >= b && ( size_t ) ( e - b ) <= CDF_SEC_SIZE ( h ) * sst -> sst_len ) <= CDF_SEC_SIZE ( h ) * sst -> sst_len ) { DPRINTF ( ( ""%d: <S2SV_blank> offset <S2SV_blank> begin <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> end <S2SV_blank> %p <S2SV_blank> || <S2SV_blank> %"" SIZE_T_FORMAT ""u",0
811,"<S2SV_ModStart> : # line 67108864 <S2SV_ModEnd> ""HEX_grammar.c"" break ; <S2SV_ModStart> : # line 67108864 <S2SV_ModEnd> ""HEX_grammar.c"" break ; <S2SV_ModStart> : # line 67108864 <S2SV_ModEnd> ""HEX_grammar.c"" break ; <S2SV_ModStart> : # line 67108864 <S2SV_ModEnd> ""HEX_grammar.c"" break ; <S2SV_ModStart> : # line 67108864 <S2SV_ModEnd> ""HEX_grammar.c"" break ; <S2SV_ModStart> : # line 67108864 <S2SV_ModEnd> ""HEX_grammar.c"" break ; <S2SV_ModStart> : # line 67108864 <S2SV_ModEnd> ""HEX_grammar.c"" break ; <S2SV_ModStart> : # line 67108864 <S2SV_ModEnd> ""HEX_grammar.c"" break ; <S2SV_ModStart> : # line 67108864 <S2SV_ModEnd> ""HEX_grammar.c"" break ; <S2SV_ModStart> : # line 67108864 <S2SV_ModEnd> ""HEX_grammar.c"" break ; <S2SV_ModStart> : # line 67108864 <S2SV_ModEnd> ""HEX_grammar.c"" break ; <S2SV_ModStart> : # line 67108864 <S2SV_ModEnd> ""HEX_grammar.c"" break ; <S2SV_ModStart> : # line 671088 <S2SV_ModEnd> ""HEX_grammar.c"" break ; <S2SV_ModStart> : # line 671088 <S2SV_ModEnd> ""HEX_grammar.c"" break ; <S2SV_ModStart> : # line",0
812,"<S2SV_ModStart> ib ] ; # if CONFIG_VP9_HIGHBITDEPTH if ( mb -> e_mbd. mode_info_context -> mbmi. flags & YV12_FLAG_HIGHBITDEPTH ) { vp8_highbd_strict_quantize_b ( mb, d ) ; } else if ( mb -> e_mbd. mode_info_context -> mbmi. flags & YV12_FLAG_HIGHBITDEPTH ) { vp8_highbd_strict_quantize_b ( mb, d ) ; } else { if ( mb -> e_mbd. mode_info_context -> mbmi. flags & YV12_FLAG_HIGHBITDEPTH ) { vp8_highbd_strict_quantize_b ( mb, d ) ; } else if ( mb -> e_mbd. mode_info_context -> mbmi. flags & YV12_FLAG_HIGHBITDEPTH ) { vp8_highbd_strict_quantize_b ( mb, d ) ; } else if ( mb -> e_mbd. mode_info_context -> mbmi. flags & YV12_FLAG_HIGHBITDEPTH ) {",0
813,<S2SV_ModStart> FN_REFLEN ] ; if ( i + 1 > FN_DIRLEN ) { error = - 1 ; goto exit ; } <S2SV_ModStart> 1 ) ; if ( i + 1 > FN_DIRLEN ) { error = - 1 ; goto exit ; },0
814,<S2SV_ModStart> ; if ( key -> state == KEY_IS_UNINSTANTIATED <S2SV_ModEnd> ) zap =,0
815,"<S2SV_ModStart> hci_filter * f = rcu_dereference_protected ( sk -> sk_filter, sock_owned_by_user ( sk ) ) ; if ( f -> type_mask == HCI_UNSPEC ) { uf. type_mask = f -> type_mask ; uf. opcode = f -> opcode ; uf. event_mask [ 0 ] = * ( ( u32 * ) f -> event_mask + 1 ) ; } else { uf. type_mask = f -> type_mask ; uf. opcode = f -> opcode ; uf. event_mask [ 1 ] = * ( ( u32 * ) f -> event_mask + 0 ) ; uf. event_mask [ 2 ] = * ( ( u32 * ) f -> event_mask + 1 ) ; }",0
816,"<S2SV_ModStart> int n = MIN ( sizeof ( clear_buffer ), data_end - data ) ; if ( n < 0 ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } <S2SV_ModStart> int n = MIN ( sizeof ( clear_buffer ), data_end - data ) ; if ( n < 0 ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; }",0
817,"<S2SV_ModStart> getprivs_ret ret ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> errmsg ) ; exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
818,"<S2SV_ModStart> peer. i ; sctp_tsnmap_init ( & asoc -> peer. tsn_map, SCTP_TSN_MAP_INITIAL, asoc -> peer. i. initial_tsn, GFP_ATOMIC ) ;",0
819,"<S2SV_ModStart> cleanup ; } status = aac_fib_send ( dev, srbfib, sizeof ( struct aac_srb ) ) ; if ( status ) { dprintk ( ( KERN_INFO ""aacraid: <S2SV_blank> Could <S2SV_blank> not <S2SV_blank> send <S2SV_blank> raw <S2SV_blank> srb\\n"" ) ) ; rcode = - EFAULT ; goto cleanup ; }",0
820,"<S2SV_ModStart> 0 ) ; if ( cc0 >= rowsize ) { TIFFErrorExt ( tif -> tif_clientdata, module, ""Out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> allocating <S2SV_blank> "" TIFF_SSIZE_FORMAT "" <S2SV_blank> byte <S2SV_blank> temp <S2SV_blank> buffer."", cc0 ) ; return 0 ; } <S2SV_ModStart> 0 ) ; if ( cc0 >= rowsize ) { TIFFErrorExt ( tif -> tif_clientdata, module, ""Out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> allocating <S2SV_blank> "" TIFF_SSIZE_FORMAT "" <S2SV_blank> byte <S2SV_blank> temp <S2SV_blank> buffer."", cc0 ) ; return 0 ; } <S2SV_ModStart> 0 ) ; if ( ( cc0 % rowsize ) == 0 ) { ( * sp -> encodepfunc ) ( tif, bp, rowsize ) ; cc -= rowsize ; bp += rowsize ; } result_code = ( * sp -> encodetile ) ( tif, working_copy, cc0, s ) ; _TIFFfree ( working_copy ) ; return result_code ; }",0
821,"<S2SV_ModStart> = transport -> asoc <S2SV_ModEnd> ; bh_lock_sock ( <S2SV_ModStart> sk ) ; if ( sock_owned_by_user ( <S2SV_ModEnd> asoc -> base <S2SV_ModStart>. sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"", __func__ ) ; goto out_unlock ; } <S2SV_ModEnd> if ( sock_owned_by_user <S2SV_ModStart> sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"", __func__ ) ; if (! mod_timer ( & transport -> proto_unreach_timer, jiffies + ( HZ / 20 ) ) ) sctp_association_put ( asoc ) ; goto out_unlock ; } <S2SV_ModEnd> sctp_do_sm ( net <S2SV_ModStart> SCTP_EVENT_T_OTHER, SCTP_ST_OTHER ( SCTP_EVENT_ICMP_PROTO_UNREACH ), asoc -> state, asoc -> ep, asoc, transport, GFP_ATOMIC ) ; out_unlock :",0
822,"<S2SV_ModStart> input_data, size_t <S2SV_ModEnd> input_size, int <S2SV_ModStart> # define ACTION_KILL_TAIL 4 if ( bytes_matched >= max_bytes_matched ) { action = ACTION_KILL_TAIL ; break ; } # define fail_if_error ( e ) switch ( e ) { case ERROR_INSUFFICIENT_MEMORY : return - 2 ; case ERROR_TOO_MANY_RE_FIBERS : return - 4 ; } if ( yr_re_alloc_storage ( & storage )!= ERROR_SUCCESS ) return - 2 ; if ( _yr_re_alloc_storage ( & storage )!= ERROR_SUCCESS ) return - 2 ; if ( _yr_re_alloc_storage ( & storage )!= ERROR_SUCCESS ) return - 2 ; if ( flags & RE_FLAGS_BACKWARDS ) { input -= character_size ; input_incr = - input_incr ; } max_bytes_matched = max_bytes_matched - max_bytes_matched % character_size ; bytes_matched = 0 ; error = _yr_re_fiber_create ( & storage -> fiber_pool, & fiber ) ; fail",0
823,"<S2SV_ModStart> * returnrate, RATE_DISTORTION <S2SV_ModEnd> * returndistortion, <S2SV_ModStart> * returnintra ) { memset ( & best_mode, 0, sizeof ( BEST_MODE ) ) ; <S2SV_ModStart> = INT_MAX ; # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; # else unsigned int zero_mv_sse = INT_MAX, best_rd_sse = INT_MAX ; # endif <S2SV_ModStart> = INT_MAX ; # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX ; # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse = INT_MAX, best_rd_sse = INT_MAX ; # else unsigned int zero_mv_sse = INT_MAX, best_rd_sse = INT_MAX ; # endif <S2SV_ModStart> = INT_MAX ; # if CONFIG_TEMPORAL_DENOISING unsigned int zero_mv_sse =",0
824,"<S2SV_ModStart>, UD_VECTOR ) ; set_exception_intercept ( svm, MC_VECTOR ) ; set_intercept ( svm, INTERCEPT_INTR ) ; set_intercept ( svm, INTERCEPT_NMI ) ; set_intercept ( svm, INTERCEPT_SMI ) ; set_intercept ( svm, INTERCEPT_SELECTIVE_CR0 ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_HLT ) ; set_intercept ( svm, INTERCEPT_INVLPG ) ; set_intercept ( svm, INTERCEPT_INVLPGA ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_HLT ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_HLT ) ; set_intercept ( svm, INTERCEPT_INVLPG ) ; set_intercept ( svm, INTERCEPT_INVLPGA ) ; set_intercept ( svm, INTERCEPT",0
825,"<S2SV_ModStart> goto error ; if ( statbuf. st_size < 0 ) goto error ; <S2SV_ModStart>. st_size ; if (! h -> writable ) { h -> addr = malloc ( h -> size ) ; if ( h -> addr == NULL ) goto error ; DEBUG ( 2, ""malloc <S2SV_blank> file <S2SV_blank> at <S2SV_blank> %p"", h -> addr ) ; } else { h -> addr = safe_calloc ( h -> size, sizeof ( * h ) ) ; if ( mmap ( NULL, h -> size, PROT_READ, PROT_READ, h -> fd, 0 ) ; if ( h -> addr == NULL ) goto error ; DEBUG ( 2, ""mmap <S2SV_blank> file <S2SV_blank> at <S2SV_blank> %p"", h -> addr ) ; } else { h -> addr = malloc ( h -> size ) ; if ( h -> addr == NULL ) goto error ; DEBUG ( 2, ""malloc <S2SV_blank> file <S2SV_blank> at <S2SV_blank> %p"", h -> addr ) ; } else { if ( full_read ( h -> fd, h -> addr, h -> size ) < h -> size ) goto error ; if ( close ( h -> fd ) == - 1 ) goto error ; h -> fd =",0
826,"<S2SV_ModStart> cdf_stream_t * sst <S2SV_ModEnd> ) { cdf_summary_info_header_t <S2SV_ModStart> break ; } str = cdf_clsid_to_mime ( clsid, clsid2desc ) ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; m = cdf_file_property_info ( ms, info, count, clsid ) ; if ( m == - 1 ) return - 1 ; m = cdf_file_property_info ( ms, info, count, clsid ) ; free ( info ) ; return m == - 1? - 2 : m ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
827,"<S2SV_ModStart> ; UWORD8 u1_profile_idc, u1_level_idc, u1_seq_parameter_set_id ; WORD32 i2_max_frm_num ; WORD32 pic_height_in_map_units_minus1 ; WORD32 u2_pic_wd, u2_pic_ht, u2_crop_offset_y, u2_crop_offset_uv ; WORD32 ret ; WORD32 i4_i ; u1_profile_idc = ih264d_get_bits_h264 ( ps_bitstrm, 8 ) ; COPYTHECONTEXT ( ""SPS: <S2SV_blank> profile_idc"", u1_profile_idc ) ; u1_level_idc = ih264d_get_bits_h264 ( ps_bitstrm, 8 ) ; COPYTHECONTEXT ( ""SPS: <S2SV_blank> level_idc"", u1_level_idc ) ; uc_constraint_set1_flag = ih264d_get_bit_h264 ( ps_bitstrm, 8 ) ; COPYTHECONTEXT ( ""SPS: <S2SV_blank> level_idc"", u1",0
828,"<S2SV_ModStart> ) ; err |= put_user ( length, & up -> length ) ; if ( err ) return - EFAULT",0
829,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; <S2SV_ModEnd> VP9_COMP * const <S2SV_ModStart> * const params = va_arg <S2SV_ModEnd> ( args, <S2SV_ModStart> vpx_svc_parameters_t * ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> NULL ) return VPX_CODEC_INVALID_PARAM ; cpi -> svc. spatial_layer_id = params -> spatial_layer ; cpi -> svc. temporal_layer_id = params -> temporal_layer ; cpi -> lst_fb_idx = params -> lst_fb_idx ; cpi -> gld_fb_idx = params -> gld_fb_idx ; cpi -> alt_fb_idx = params -> alt_fb_idx ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer = params -> min_quantizer ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx -> cfg. rc_min_quantizer =",0
830,"<S2SV_ModStart> ; if ( fhdr -> frag_off & htons ( IP6_MF ) ) { IP6_INC_STATS_BH ( net, ip6_dst_idev ( skb_dst ( skb ) ), IPSTATS_MIB_INHDRERRORS ) ; icmpv6_param_prob ( skb, ICMPV6_HDR_FIELD, ( ( u8 * ) & fhdr -> frag_off - skb_network_header ( skb ) ) ) ; } else { IP6_INC_STATS_BH ( net, ip6_dst_idev ( skb_dst ( skb ) ) ), IPSTATS_MIB_INHDRERRORS ) ; icmpv6_param_prob ( skb, ICMPV6_HDR_FIELD, ( ( u8 * ) & fhdr -> frag_off - skb_network_header ( skb ) ) ) ; return - 1 ; }",0
831,"<S2SV_ModStart> out ) { <S2SV_ModEnd> copyFunc cf ; <S2SV_ModStart> uint16 input_compression, input_photometric ; uint32 width, length ; uint32 bitspersample, samplesperpixel ; bitspersample = ( uint16 ) TIFFGetFieldDefaulted ( in, TIFFTAG_BITSPERSAMPLE, & bitspersample ) ; samplesperpixel = ( uint16 ) TIFFGetFieldDefaulted ( in, TIFFTAG_SAMPLESPERPIXEL, & samplesperpixel ) ; if ( bitspersample!= ( uint32 ) - 1 ) { TIFFSetField ( out, TIFFTAG_BITSPERSAMPLE, bitspersample ) ; TIFFSetField ( out, TIFFTAG_BITSPERSAMPLE, samplesperpixel ) ; } else if ( bitspersample!= ( uint16 ) - 1 ) TIFFSetField ( out, TIFFTAG_BITSPERSAMPLE, bitspersample ) ; if ( samplesperpixel!= ( uint16 ) - 1 ) TIFFSetField ( out, TIFFTAG_SAMPLESPERPIXEL, samplesperpixel ) ; else if ( input_photometric == PHOTOMETRIC_RGB && jpegcolormode == JPEGCOLORMODE_RGB ) TIFFSetField ( out,",0
832,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int check_symlinks ( struct archive_write_disk * a ) { int r ; <S2SV_ModStart> = '\\0' ; r = safe_lstat ( a -> name, & st ) ; if ( r!= 0 ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; return ( ARCHIVE_FAILED ) ; } } else if ( S_ISLNK ( st. st_mode ) ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"",",0
833,"<S2SV_ModStart> ; if ( safe_mount <S2SV_ModEnd> ( hostpath,",0
834,"<S2SV_ModStart> unsigned int link_count ; struct kernel_lb_addr loc ; struct indirectEntry * ie ; ie = ( struct indirectEntry * ) ibh -> b_data ; if ( ie -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { bh = udf_read_ptagged ( inode -> i_sb, & iinfo -> i_location, 0, & ident ) ; if (! bh ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!bh\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if ( ie -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { bh = udf_read_ptagged ( inode -> i_sb, & iinfo -> i_location, 0, & ident ) ; brelse ( bh ) ; return ; } if ( bh ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!bh\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if",0
835,<S2SV_ModStart> TX_SIZE tx_size_uv = get_uv_tx_size <S2SV_ModEnd> ( mbmi ) <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm <S2SV_ModStart> ++ ) { memset <S2SV_ModEnd> ( & lfm,0
836,"<S2SV_ModStart> dst_size ) { const <S2SV_ModStart> data_end ) ; if ( len >= data_end - data ) return - 1 ; <S2SV_ModStart> data_end ) ; if ( len >= data_end - data ) return - 1 ; <S2SV_ModStart> - 1 ; if ( len >= data_end - data ) return - 1 ; <S2SV_ModStart> data ++ ; if ( len >= data_end - data ) return - 1 ; <S2SV_ModStart> ; if ( len >= data_end - data ) return - 1 ; if ( size == namelen &&! memcmp ( data - size, name, namelen ) ) { switch ( * data ++ ) { case AMF_DATA_TYPE_NUMBER : snprintf ( dst, dst_size, ""%g"", av_int2double ( AV_RB64 ( data ) ) ) ; break ; case AMF_DATA_TYPE_BOOL : snprintf ( dst, dst_size, ""%s"", * data ) ; break ; case AMF_DATA_TYPE_STRING : len = bytestream_get_be16 ( & data ) ; av_strlcpy ( dst, data, ff_amf_tag_size ( data, data_end ) ) ; break ;",0
837,"<S2SV_ModStart> mq_flush_lock, flags ) ; list_for_each_entry_safe ( rq, n, running, flush. list ) { unsigned int seq = blk_flush_cur_seq ( rq ) ; WARN_ON ( seq!= REQ_FSEQ_PREFLUSH && seq!= REQ_FSEQ_POSTFLUSH ) ; queued |= blk_flush_complete_seq ( rq, fq, seq, error ) ; } if ( q -> mq_ops ) spin_unlock_irqrestore ( & fq -> mq_flush_lock, flags ) ;",0
838,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) { return ( uint32_t ) - 1 ; } <S2SV_ModStart> -> config ) <S2SV_ModEnd> ; val =,1
839,"<S2SV_ModStart> = NULL ; if ( prog -> flags & eflags ) return! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; else if ( prog -> flags & eflags ) return! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; else if ( prog -> flags & eflags ) return! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ||! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ) return! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; else if ( prog -> flags & eflags ) return! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ; else if (! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ) return! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ) return! match ( prog -> start, sp, sp, prog -> flags | eflags, sub ) ;",0
840,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorDiff16 ( TIFF <S2SV_ModStart> / 2 ; if ( <S2SV_ModStart> wc ) ; return 0 ;,0
841,"<S2SV_ModStart> ) ) { if (! stok ( option, "" <S2SV_blank> =\\t,"", & ovalue ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Invalid <S2SV_blank> SessionCookie <S2SV_blank> option: <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; }",0
842,"<S2SV_ModStart> __be32 daddr ; struct ip_options_rcu * inet_opt <S2SV_ModStart> return 0 ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> return 0 ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ;",0
843,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
844,"<S2SV_ModStart> p_hsm_com_client_hdl_t * mgr_hdl ; pid_t pid ; memset ( s_path, 0, sizeof ( s_path ) ) ; memset ( c_path, 0, sizeof ( c_path ) ) ; pid = getpid ( ) ; switch ( mgr ) { case FM_MGR_PM : mgr_prefix = HSM_FM_SCK_PM ; mgr_hdl = & hdl -> pm_hdl ; break ; case FM_MGR_FE : mgr_prefix = HSM_FM_SCK_FE ; mgr_hdl = & hdl -> fe_hdl ; break ; default : return FM_CONF_INIT_ERR ; } if ( hcom_client_init ( mgr_hdl, s_path, c_path, 32768 )!= HSM_COM_OK ) { return FM_CONF_INIT_ERR ; } if ( hcom_client_init ( mgr_hdl, s_path, c_path, 32768 )!= HSM_COM_OK ) { return FM_CONF_INIT_ERR ; }",0
845,"<S2SV_ModStart> == NULL || <S2SV_ModEnd> * replySize < <S2SV_ModStart> NULL || * replySize > sizeof ( effect_param_t ) ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } session_get_param ( effect -> session, ( effect_param_t * ) pCmdData ) ; if ( * ( int * ) pReplyData!= 0 ) break ; if ( effect -> state!= EFFECT_STATE_ACTIVE ) * ( int * ) pReplyData = effect_set_state ( effect, EFFECT_STATE_ACTIVE ) ; if ( effect -> state!= EFFECT_STATE_CONFIG ) * ( int * ) pReplyData = session_get_state ( effect -> session, ( effect_state_t * ) pCmdData ) ; if ( * ( int * ) pReplyData!= 0 ) break ; if ( effect -> state!= EFFECT_STATE_ACTIVE ) * ( int * ) pReplyData = effect_set_state ( effect, EFFECT_STATE_ACTIVE ) ; if ( effect -> state!= EFFECT_STATE_ACTIVE ) * ( int",0
846,"<S2SV_ModStart> ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image_info -> filename ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image_info -> filename ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image_info -> filename ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image_info -> filename ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image_info -> filename ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image_info -> filename ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image_info -> filename ) ;",0
847,"<S2SV_ModStart> ) ) { struct ipv6_rxopt * rxopt = rcu_dereference_protected ( np -> rxopt, sock_owned_by_user ( sk ) ) ; if ( rcu_dereference_protected ( sk -> sk_omem_alloc, sock_owned_by_user ( sk ) ) ) return - EFAULT ; rxopt = rcu_dereference_protected ( np -> rxopt, sock_owned_by_user ( sk ) ) ; if ( rxopt ) { struct ipv6_rxopt * rxopt = rcu_dereference_protected ( sk -> sk_omem_alloc, sock_owned_by_user ( sk ) ) ; rxopt = rcu_dereference_protected ( sk -> sk_omem_alloc, sock_owned_by_user ( sk ) ) ; }",0
848,<S2SV_ModStart> berval ) ; if ( ret [ j ] == NULL ) { err = ENOMEM ; goto cleanup ; },0
849,"<S2SV_ModStart> OP_JUMP ) ; if (! checkfutureword ( J, F, catchvar ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'arguments\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; if (! checkfutureword ( J, F, catchvar ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'eval\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; if (! strcmp ( catchvar -> string, ""arguments"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'arguments\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; if (! strcmp ( catchvar -> string, ""eval"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'eval\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; if (! strcmp ( catchvar -> string, ""arguments"" ) ) jsC_error ( J, catchvar, ""arguments"" ) ; if (! strcmp ( catchvar -> string, ""eval"" ) ) jsC_error ( J, catchvar,",0
850,"<S2SV_ModStart> ( sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 || sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 || sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 || sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 || sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 ) { * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_element_count ) ) ; * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_",0
851,<S2SV_ModStart> 0x02 ) ; memcpy <S2SV_ModEnd> ( sbuf +,0
852,"<S2SV_ModStart> uint8 result ; size_t <S2SV_ModEnd> length ; STREAM <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> connect <S2SV_blank> response <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", __func__ ) ; return False ; } <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> connect <S2SV_blank> response <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", __func__ ) ; return False ; } <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> connect <S2SV_blank> response <S2SV_blank> would <S2SV_blank> overrun"", __func__ ) ; return False ; }",0
853,<S2SV_ModStart> ; if ( stkt_server!= NULL ) { stkt_server -> entry = stkt_server ; stkt_server -> entry = NULL ; stkt_server -> entry = NULL ; stkt_server -> entry = NULL ; stkt_server -> entry = NULL ; stkt_server -> entry = NULL ; stkt_server -> entry = NULL ; stkt_server -> entry = NULL ; stkt_server -> entry = NULL ; stkt_server -> entry = NULL ; stkt_server -> entry = NULL ; stkt_server -> entry = stkt_server ; stkt_server -> entry = NULL ; stkt_server -> entry = NULL ; stkt_server -> entry = NULL ; stkt_server -> entry = stkt_server ; stkt_server -> entry = stkt_server ; stkt_server -> entry = stkt_server ; stkt_server -> entry = stkt_server ; stkt_server -> entry = stkt_server ; stkt_server -> entry = stkt_server ; stkt_server -> entry = stkt_server ; stkt_server -> entry = stkt_server ; stkt_entry ->,0
854,<S2SV_ModStart> ) ) || ( ( c >= 0x2060 ) && ( c <= 0x218F ) ) || ( ( c >= 0x2C00 ) && ( c <= 0x2FEF ) ) || ( ( c >= 0x3001 ) && ( c <= 0x3FFF ) ) || ( ( c >= 0x2C00 ) && ( c <= 0x2FEF ) ) || ( ( c >= 0x3001 ) && ( c <= 0x3FFF ) ) || ( ( c >= 0x2C00 ) && ( c <= 0x2FEF ) ) || ( ( c >= 0x3001 ) && ( c <= 0x3FFF ) ) || ( ( c >= 0x3001 ) && ( c <= 0x3FFF ) ) || ( ( c >= 0x2C00 ) && ( c <= 0x2FEF ) ) || ( ( c >= 0x3001 ) && ( c <= 0x3FFF ) ) ) || ( ( c >= 0x2C00 ) && ( c <= 0x2FEF ) ) || ( ( c >= 0x3001 ) && ( c <=,0
855,"<S2SV_ModStart> ret ) { dev_err ( & vdev -> dev, ""Failed <S2SV_blank> to <S2SV_blank> configure <S2SV_blank> mac <S2SV_blank> vlans\\n"" ) ; return ret ; } <S2SV_ModEnd> ch = i <S2SV_ModStart> ch ) ; if ( ret ) { dev_err ( & vdev -> dev, ""Failed <S2SV_blank> to <S2SV_blank> configure <S2SV_blank> mac <S2SV_blank> vlans\\n"" ) ; return ret ; } <S2SV_ModStart> ch ) ; if ( ret ) { dev_err ( & vdev -> dev, ""Failed <S2SV_blank> to <S2SV_blank> configure <S2SV_blank> mac <S2SV_blank> vlans\\n"" ) ; return ret ; }",0
856,<S2SV_ModStart> * rsize >= 18 <S2SV_ModEnd> && rdesc [,1
857,"<S2SV_ModStart> out ; } ret = set_uid_gid_map_extent ( & new_map, map, extent. lower_first, extent. count ) ; if ( ret < 0 ) { ret = set_uid_gid_map_extent ( & new_map, map, extent. count ) ; if ( ret < 0 ) goto out ; ret = set_uid_gid_map_extent ( & new_map, extent. first, extent. lower_first, extent. count ) ; if ( ret < 0 ) goto out ; ret = set_uid_gid_map_extent ( & new_map, extent. count ) ; if ( ret < 0 ) { ret = set_uid_gid_map_extent ( & new_map, extent. count ) ; if ( ret < 0 ) goto out ; ret = set_uid_gid_map_extent ( & new_map, extent. first, extent. lower_first, extent. count ) ; if ( ret < 0 ) goto out ; ret = set_uid_gid_map_extent ( & new_map, extent. count ) ; if ( ret < 0 ) { ret = set_uid_gid_map",0
858,"<S2SV_ModStart> } } } if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { eprintf ( ""action: <S2SV_blank> %s\\n"", action ) ; return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok ( NULL, "";"" ) ) ) { return send_msg ( g, ""E01"" ) ; } if (! ( action = strtok",0
859,"<S2SV_ModStart> sr ) { <S2SV_ModEnd> uint16_t StructSize ; <S2SV_ModStart> ; } of = sr -> fid_ofile ; if ( ( of -> f_node -> flags & NODE_FLAGS_WRITE_THROUGH ) == 0 ) { smb_fsop_commit ( sr, of -> f_cr, of -> f_node ) ; ( void ) smb_mbc_encodef ( & sr -> reply, ""wwl"", 4, 0 ) ; return ( SDRC_SUCCESS ) ; }",0
860,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
861,"<S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, mb_row, mb_col <S2SV_ModEnd> ) ; if <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, mb_row, mb_col <S2SV_ModEnd> ) ; if <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, mb_row, mb_col <S2SV_ModEnd> ) ; if <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, mb_row, mb_col <S2SV_ModEnd> ) ; if <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, mb_row, mb_col <S2SV_ModEnd> ) ; if <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, mb_row, mb_col <S2SV_ModEnd> ) ; if <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, mb_row, mb_col <S2SV_ModEnd> ) ; if <S2SV_ModStart> vp8_loop_filter_frame_init ( pbi, mb_row, mb_col <S2SV_ModEnd> ) ; if",0
862,"<S2SV_ModStart> = TIPC_ADDR_ID ; memset ( addr, 0, sizeof ( * addr ) ) ;",0
863,<S2SV_ModStart> goto out ; r = - EINVAL ; if ( mem -> userspace_addr & ( PAGE_SIZE - 1 ) ) goto out ; if ( mem -> slot >= KVM_MEMORY_SLOTS + KVM_PRIVATE_MEM_SLOTS ) goto out ; if ( mem -> guest_phys_addr + mem -> memory_size < mem -> guest_phys_addr ) goto out ; if (,0
864,<S2SV_ModStart> NULL ) ; <S2SV_ModEnd> } clone_info =,0
865,"<S2SV_ModStart> tmp ) ; if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Malformed <S2SV_blank> request, <S2SV_blank> aborting"" ) ; return NULL ; } <S2SV_ModStart> tmp ) ; if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Malformed <S2SV_blank> request, <S2SV_blank> aborting"" ) ; return NULL ; } <S2SV_ModStart> if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Malformed <S2SV_blank> request, <S2SV_blank> aborting"" ) ; return NULL ; } <S2SV_ModStart> tmp ) ; if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Malformed <S2SV_blank> request, <S2SV_blank> aborting"" ) ; return NULL ; } <S2SV_ModStart> tmp ) ; if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRMLS_CC, ""Malformed <S2SV_blank> request, <S2SV_blank> aborting"" ) ; return NULL ; } <S2SV_ModStart> tmp ) ; if ( tmp == NULL ) { php_stream_wrapper_log_error ( wrapper, options TSRML",0
866,"<S2SV_ModStart> len ) { PyObject <S2SV_ModEnd> * u ; <S2SV_ModStart> char * p <S2SV_ModEnd> ; char * <S2SV_ModStart> char * p <S2SV_ModEnd> ; if ( <S2SV_ModStart> += 5 ; if ( p - buf > Py_SIZE ( u ) ) { Py_DECREF ( w ) ; return NULL ; } <S2SV_ModStart> += 5 ; if ( p - buf > Py_SIZE ( u ) ) { Py_DECREF ( w ) ; return NULL ; } <S2SV_ModEnd> } if ( <S2SV_ModStart> ++ ; if ( * s & 0x80 ) { PyObject * w ; int kind ; void * data ; Py_ssize_t len, i ; w = decode_utf8 ( c, & s, end ) ; if ( w == NULL ) { Py_DECREF ( w ) ; return NULL ; } kind = PyUnicode_KIND ( w ) ; data = PyUnicode_DATA ( w ) ; len = PyUnicode_GET_LENGTH ( w ) ; for ( i = 0 ; i < len ; i ++ ) { Py_UCS4 chr = PyUnicode_READ ( kind, data, i ) ; p += 10 ; } assert ( p - buf <= Py_SIZE ( u ) ) ; Py_DECREF",0
867,"<S2SV_ModStart> ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data."" <S2SV_ModEnd>, function ) <S2SV_ModStart> ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data."" <S2SV_ModEnd>, function ) <S2SV_ModStart> ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."" <S2SV_ModEnd>, function ) <S2SV_ModStart> ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."" <S2SV_ModEnd>, function ) <S2SV_ModStart> ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."" <S2SV_ModEnd>, function )",0
868,"<S2SV_ModStart> ; uint32_t bcount ; if (! DoGetFileSize ( infile ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
869,"<S2SV_ModStart> ckDataSize ) ; if ( dff_chunk_header. ckDataSize == 0 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( dff_chunk_header. ckDataSize == 0 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( dff_chunk_header. ckDataSize == 0 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( dff_chunk_header. ckDataSize == 0 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if ( dff_chunk_header. ckDataSize == 0 ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ;",0
870,"<S2SV_ModStart> ~ SNDRV_TLG_RUNNING ; spin_unlock_irqrestore ( & <S2SV_ModEnd> slave_active_lock, flags",0
871,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> struct stat stb <S2SV_ModStart>, targisdir, <S2SV_ModEnd> wrerrno = 0 <S2SV_ModStart> wrerrno = 0 <S2SV_ModEnd> ; char ch",0
872,"<S2SV_ModStart> } else if ( myentity_find_ext <S2SV_ModEnd> ( target ) <S2SV_ModStart> ; } else if ( myentity_find_ext <S2SV_ModEnd> ( target ) <S2SV_ModStart> ; } else if ( myentity_find_ext <S2SV_ModEnd> ( target ) <S2SV_ModStart> ; } else if ( myentity_find_ext <S2SV_ModEnd> ( target ) <S2SV_ModStart> ""CLEAR"" ) && chanacs_source_has_flag ( mc, si, CA_FOUNDER ) ) { command_fail ( si, fault_noprivs, ""You <S2SV_blank> are <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> CA <S2SV_blank> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
873,<S2SV_ModStart> ; ghash_flush ( ctx <S2SV_ModEnd> ) ; memcpy,0
874,"<S2SV_ModStart> goto error ; ret = avio_get_str16le ( pb, desc_len, & time_base, sizeof ( time_base ) ) ; if ( ret <S2SV_ModStart> goto error ; ret = avio_get_str16le ( pb, desc_len, & time_base, sizeof ( time_base ) ) ; if ( ret < 0 ) goto error ; ret = avio_get_str16le ( pb, desc_len, desc, sizeof ( desc ) ) ; if ( ret < 0 ) goto error ; ret = avio_get_str16le ( pb, desc_len, desc, sizeof ( desc ) ) ; if ( ret < 0 ) goto error ; ret = avio_get_str16le ( pb, desc_len, desc, sizeof ( desc ) ) ; if ( ret < 0 ) goto error ; ret = avio_get_str16le ( pb, desc_len, desc, sizeof ( desc ) ) ; if ( ret < 0 ) goto error ; ret = avio_get_str16le ( pb, desc_len, desc, sizeof ( desc ) ) ; if ( ret <",0
875,"<S2SV_ModStart> null_server ; int need_error_free = 0 ; int local_rcache = 0, local_authcon = 0 ; problem = 0 ; if ( ( retval = krb5_read_message ( context, fd, & inbuf ) ) ) return retval ; if ( strcmp ( inbuf. data, sendauth_version ) ) { problem = KRB5_SENDAUTH_BADAUTHVERS ; response = 1 ; } if ( version &&! problem ) * version = inbuf ; else free ( inbuf. data ) ; } if ( flags & KRB5_RECVAUTH_BADAPPLVERS ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 2 ; } if ( flags & KRB5_RECVAUTH_BADAPPLVERS ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; response = 1 ; } if ( flags & KRB5_RECVAUTH_BADAPPLVERS ) { problem = KRB5_SENDAUTH_BADAPPLVERS ; } if ( flags & KRB5_RECVAUTH_BADAPPLVERS ) { problem = KRB5_SENDAUTH_BADAPPLVERS",0
876,"<S2SV_ModStart> write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> 1 ) ; vpx_write_literal <S2SV_ModEnd> ( w,",0
877,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret ) return ret <S2SV_ModEnd> ; } ret",1
878,"<S2SV_ModStart> ++ = 0xAA ; memcpy ( dptr, & rose -> dest_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> dest_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> dest_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ;",0
879,<S2SV_ModStart> ; if ( p -> mnt. mnt_flags & MNT_UMOUNT ) { if ( p -> mnt == new_fs -> root. mnt ) { new_fs -> root. mnt = mntget ( & q -> mnt ) ; rootmnt = & p -> mnt ; } if ( & p -> mnt == new_fs -> pwd. mnt ) { new_fs -> pwd. mnt = mntget ( & q -> mnt ) ; pwdmnt = & p -> mnt ; } if ( & p -> mnt == new_fs -> root. mnt ) { new_fs -> root. mnt = mntget ( & q -> mnt ) ; pwdmnt = & q -> mnt ; } if ( & p -> mnt == new_fs -> pwd. mnt ) { new_fs -> pwd. mnt = mntget ( & q -> mnt ) ; pwdmnt = & p -> mnt ; } if ( & p -> mnt == new_fs -> pwd. mnt ) { new_fs -> pwd. mnt = mntget ( & q -> mnt ) ; pwdmnt =,0
880,"<S2SV_ModStart> -> alt_fb_idx ; if ( vp8_yv12_alloc_frame_buffer ( & oci -> alt_scale_frame, width, height, VP8BORDERINPIXELS ) < 0 ) goto allocation_fail ; if ( vp8_yv12_alloc_frame_buffer ( & oci -> lst_frame_buffer, width, height, VP8BORDERINPIXELS ) < 0 ) goto allocation_fail ; if ( vp8_yv12_alloc_frame_buffer ( & oci -> alt_scale_frame, width, height, VP8BORDERINPIXELS ) < 0 ) goto allocation_fail ; if ( vp8_yv12_alloc_frame_buffer ( & oci -> alt_scale_frame, width, height, VP8BORDERINPIXELS ) < 0 ) goto allocation_fail ; if ( vp8_yv12_alloc_frame_buffer ( & oci -> alt_frame_buffer, width, height, VP8BORDERINPIXELS ) < 0 ) goto allocation_fail ; if ( vp8_yv12_alloc_frame_buffer ( &",0
881,<S2SV_ModStart> = php_zip_get_properties ; zip_object_handlers. get_object_name = php_zip_get_object_name ;,0
882,<S2SV_ModStart> case RXE_MEM_TYPE_FMR : if ( <S2SV_ModEnd> ( iova < <S2SV_ModStart> ( iova < <S2SV_ModEnd> mem -> iova <S2SV_ModStart> ( iova + length <S2SV_ModEnd> ) > (,0
883,"<S2SV_ModStart> ) ) ; if ( siz < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } <S2SV_ModStart> ) ) ; if ( siz < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } <S2SV_ModStart> ) ) ; if ( siz < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } <S2SV_ModStart> ) ) ; if ( siz < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } if ( siz < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } if ( siz < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; } if ( siz < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> who-are-you <S2SV_blank> request"" ) ) ; break ; }",0
884,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char *",1
885,"<S2SV_ModStart> * sent = 0 ; if ( n_vec == 0 ) { cERROR ( 1, ""tcp_send_kvec: <S2SV_blank> zero <S2SV_blank> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
886,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> buffer_pipe_buf_get ( struct <S2SV_ModStart> -> ref ++ ; return <S2SV_ModStart> -> ref ++ ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
887,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> cluster!= fs <S2SV_ModStart> clusters - 1 ) { get_fat ( & subseqEntry, fs -> fat, cluster - 1, fs ) ; else subseqEntry. value = 0 ; data [ 0 ] = ( ( new & 0xf ) << 4 ) | ( ( 0xff & subseqEntry. value ) >> 8 ) ; data [ 1 ] = ( ( 0xff & subseqEntry. value ) << 4 ) ; } else { FAT_ENTRY subseqEntry ; if ( cluster!= fs -> clusters - 1 ) { get_fat ( & subseqEntry, fs -> fat, cluster - 1, fs ) ; data [ 0 ] = ( new & 0xf ) << 4 ) | ( ( 0xff & subseqEntry. value ) << 4 ) ; } else { FAT_ENTRY curEntry ; get_fat ( & curEntry, fs -> fat, cluster, fs ) ; data = fs -> fat + cluster * 4 ; offs = fs -> fat_start + cluster * 4 ; size = 4 ; } break ; case 64 : { FAT_ENTRY curEntry ; get_fat ( & curEntry, fs -> fat",0
888,<S2SV_ModStart> ) return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,1
889,<S2SV_ModStart> sk_nulls_node ) ; sk_common_release ( sk ) ;,0
890,"<S2SV_ModStart> i2_cur_mb_addr, u1_num_mbs <S2SV_ModEnd>, u1_num_mbsNby2, <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbs <S2SV_ModEnd>, u1_num_mbsNby2, <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbs <S2SV_ModEnd>, u1_num_mbsNby2, <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbsNby2, u1_num_mbs <S2SV_ModEnd>, u1_num_mbsNby2, <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbs <S2SV_ModEnd>, u1_num_mbsNby2, <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbs <S2SV_ModEnd>, u1_num_mbsNby2, <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbsNby2, u1_num_mbsNby2, u1_num_mbsNby2, u1_num_mbsNby2, u1_num_mbsNby",0
891,<S2SV_ModStart> ; if ( unlikely (! mmget_still_valid ( mm ) ) ) return - EINVAL,0
892,"<S2SV_ModStart> int parse_rock_ridge_inode ( struct iso_directory_record * de, struct inode * inode ) { int result ; result = <S2SV_ModEnd> parse_rock_ridge_inode_internal ( de <S2SV_ModStart> ) ) { result = <S2SV_ModEnd> parse_rock_ridge_inode_internal ( de <S2SV_ModStart> ; result = <S2SV_ModEnd> parse_rock_ridge_inode_internal ( de <S2SV_ModStart> ; result = <S2SV_ModEnd> parse_rock_ridge_inode_internal ( de",0
893,"<S2SV_ModStart> user, unsigned int <S2SV_ModEnd> max_events ) { <S2SV_ModStart> = 0 ; <S2SV_ModEnd> group -> inotify_data <S2SV_ModStart> = user ; <S2SV_ModEnd> return group ;",0
894,<S2SV_ModStart> [ p ] && in -> linesize [ p ],1
895,"<S2SV_ModStart> 1 ] ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 2 ] ) ; if ( screen -> buffers [ 3 ] ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 3 ] ) ; if ( screen -> sb_buffer ) vterm_allocator_free ( screen -> vt, screen -> sb_buffer",0
896,"<S2SV_ModStart> EACCES ; } if (! tnum_is_const ( reg -> var_off. type ) ) { verbose ( env, ""dereference <S2SV_blank> of <S2SV_blank> modified <S2SV_blank> ctx <S2SV_blank> ptr <S2SV_blank> R%d <S2SV_blank> off=%d+%d, <S2SV_blank> ctx+const <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed, <S2SV_blank> ctx+const+const <S2SV_blank> is <S2SV_blank> not\\n"", regno, reg -> off - reg -> off ) ; return - EACCES ; }",0
897,<S2SV_ModStart> = 0 ; uint32 <S2SV_ModEnd> stripsize = TIFFStripSize,0
898,"<S2SV_ModStart> const char need_to_append_dot <S2SV_ModEnd> = base_name [ <S2SV_ModStart> ] == '.'? 0 : 1 ; struct search_domain * const dom ; if ( base_len + need_to_append_dot > sizeof ( struct search_domain ) ) { EVUTIL_ASSERT ( 0 ) ; return NULL ; } for ( dom = state -> head ; dom ; dom = dom -> next ) { if (! n -- ) { const u8 * const postfix = ( ( u8 * ) dom ) + sizeof ( struct search_domain ) ; const int postfix_len = dom -> len ; if ( need_to_append_dot ) newname [ base_len + need_to_append_dot + postfix_len + 1 ] = '.' ; memcpy ( newname, base_name, base_len ) ; if ( need_to_append_dot ) newname [ base_len ] = '.' ; memcpy ( newname + base_len + need_to_append_dot, postfix, postfix_len ) ; newname [ base_len + need_to_append_dot + postfix_len ] = 0 ; }",0
899,<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart> & delay ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> & delay ),0
900,<S2SV_ModStart> goto out ; <S2SV_ModEnd> err = -,1
901,"<S2SV_ModStart>, one ; size_t <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart>, pixel_info_length ) ; if ( pixel_info_length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImage",0
902,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> UINT32 originalSize ; BYTE * rle ; if (! context ) return FALSE <S2SV_ModStart> 0xFF ) ; <S2SV_ModEnd> for ( i <S2SV_ModStart> < originalSize ) { CopyMemory ( rle, context -> priv -> PlaneBuffers [ i ], originalSize ) ; rle += originalSize ; } else if ( planeSize < originalSize ) { nsc_rle_decode ( rle, context -> priv -> PlaneBuffers [ i ], originalSize ) ; rle += originalSize ; } else if ( planeSize < originalSize ) { CopyMemory ( rle, context -> priv -> PlaneBuffers [ i ], originalSize ) ; rle += planeSize ; } else if ( planeSize < originalSize ) { nsc_rle_decode ( rle, context -> priv -> PlaneBuffers [ i ], originalSize ) ; rle += planeSize ; } else if ( planeSize < originalSize ) { nsc_rle_decode ( rle, context -> priv -> PlaneBuffers [ i ], originalSize",0
903,<S2SV_ModStart> policy ) { int rc = 0 ; if (! inode_has_encryption_context ( inode ) ) return - EOPNOTSUPP ; if (! inode -> i_sb -> s_cop -> get_file ) return - EOPNOTSUPP ; if (! inode -> i_sb -> s_cop -> get_file ) return - EOPNOTSUPP ; if (! inode -> i_sb -> s_cop -> get_file ) return - EOPNOTSUPP ; if (! inode -> i_sb -> s_cop -> get_file ( inode ) -> s_cop -> get_file ( inode ) -> s_cop -> get_file ( inode ) -> s_cop -> get_file ( inode ) ) return - EOPNOTSUPP ; if (! inode -> i_sb -> s_cop -> get_file ( inode ) -> s_cop -> get_file ( inode ) -> s_cop -> get_file ( inode ) -> s_cop -> get_file ( inode ) -> s_cop -> get_file ( inode ) -> s_cop -> get_file ( inode ) -> s_cop -> get_file ( inode ) ) ),0
904,"<S2SV_ModStart> value ) { if ( stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } else if ( value ) { if ( stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; } else { if ( stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; } else if ( value ) { if ( stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; } else { if ( stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) { httpSetRouteName ( state -> route, sfmt ( ""default-%s",0
905,"<S2SV_ModStart>. cmp = key_default_cmp <S2SV_ModEnd>,. match_data <S2SV_ModStart> match_data ) ; if ( key -> type == & key_type_keyring ) { construct_get_dest_keyring ( & dest_keyring ) ; ret = construct_key_and_link ( & ctx, callout_info, callout_len, aux, dest_keyring, flags ) ; if ( ret < 0 ) { key_put ( dest_keyring ) ; ret = ERR_PTR ( ret ) ; goto error_free ; } } else { construct_get_dest_keyring ( & dest_keyring ) ; ret = construct_get_dest_keyring ( & dest_keyring ) ; ret = key_link ( dest_keyring, key ) ; if ( ret < 0 ) { key_put ( dest_keyring ) ; ret = ERR_PTR ( ret ) ; goto error_free ; } } else { construct_get_dest_keyring ( & dest_keyring ) ; ret = construct_get_dest_keyring ( & dest_keyring ) ; ret = construct_get_dest_keyring ( & dest_key",0
906,<S2SV_ModStart> ) return - EOPNOTSUPP <S2SV_ModEnd> ; if (,0
907,<S2SV_ModStart> ) ) ; <S2SV_ModEnd> cg_wlock ( & <S2SV_ModStart> ( job_id ) free ( job_id ) ; if ( coinbase1 ) free ( coinbase1 ) ; if ( coinbase2 ) free ( coinbase2 ) ;,0
908,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
909,"<S2SV_ModStart> size ) { size_t alloc_size = <S2SV_ModEnd> num * size <S2SV_ModStart> = malloc ( alloc_size <S2SV_ModEnd> ) ; if <S2SV_ModStart> ) { memset <S2SV_ModEnd> ( ptr,",0
910,<S2SV_ModStart> ioc ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
911,"<S2SV_ModStart> unused ) { <S2SV_ModEnd> _Py_IDENTIFIER ( __dict__ <S2SV_ModStart> * dict = _PyObject_GetAttrId <S2SV_ModEnd> ( self, <S2SV_ModStart>, & PyId___dict__ ) ; if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; return NULL ; } <S2SV_ModStart> dict ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; return NULL ; } if ( dict ) { res = Py_BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; return res ; } <S2SV_ModEnd> return NULL ;",0
912,"<S2SV_ModStart> USB_DT_OTG, ( void *",0
913,"<S2SV_ModStart> -> private_data ; <S2SV_ModEnd> u32 flags = <S2SV_ModStart> ; case PERF_EVENT_IOC_PERIOD : return perf_event_period ( event, <S2SV_ModEnd> ( u64 __user <S2SV_ModStart> ) arg ) ; case PERF_EVENT_IOC_ID : return primary_event_id ( event ) ; if ( copy_to_user ( ( void __user * ) arg, & id, sizeof ( id ) ) ) return - EFAULT ; return 0 ; } case PERF_EVENT_SET_OUTPUT : { int ret ; if ( arg!= - 1 ) { struct fd output ; ret = perf_event_get_light ( arg, & output ) ; if ( ret ) return ret ; output_event = output. file -> private_data ; fdput ( output ) ; ret = perf_event_set_output ( event, output_event ) ; } else { ret = perf_event_set_output ( event, NULL ) ; } return ret ; }",0
914,"<S2SV_ModStart> sacked_out ) ; if ( delta < 0 ) { u64 dividend = ( u64 ) tp -> snd_ssthresh * tp -> prr_delivered + tp -> prior_cwnd - 1 ; sndcnt = div_u64 ( dividend, tp -> prior_cwnd ) - tp -> prr_out ; } else if ( delta < 0 ) { u64 dividend = ( u64 ) tp -> snd_ssthresh * tp -> prr_delivered + tp -> prior_cwnd - 1 ; sndcnt = div_u64 ( dividend, tp -> prior_cwnd ) - tp -> prr_out ; } else if ( ( flag & FLAG_RETRANS_DATA_ACKED ) &&! ( flag & FLAG_LOST_RETRANS ) ) { sndcnt = min_t ( int, delta, max_t ( int, tp -> prr_delivered - tp -> prr_out, newly_acked_sacked ) + 1 ) ; }",0
915,"<S2SV_ModStart> * cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> y_mode ) { const PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode",0
916,"<S2SV_ModStart> mask ) { struct skcipher_tfm * tfm = crypto_alloc_skcipher ( type <S2SV_ModEnd> ) ; return <S2SV_ModStart> crypto_alloc_skcipher ( name <S2SV_ModEnd>, type, <S2SV_ModStart> mask ) ; } <S2SV_null> <S2SV_null>",0
917,"<S2SV_ModStart> ) ) { if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || sha -> ctx_len < SHA1_DIGEST_SIZE ) return - EINVAL ; block_size = SHA1_BLOCK_SIZE ; break ; case CCP_SHA_TYPE_384 : if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || sha -> ctx_len < SHA384_DIGEST_SIZE ) return - EINVAL ; block_size = SHA384_BLOCK_SIZE ; break ; case CCP_SHA_TYPE_256 : if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || sha -> ctx_len < SHA256_DIGEST_SIZE ) return - EINVAL ; block_size = SHA256_BLOCK_SIZE ; break ; case CCP_SHA_TYPE_384 : if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || sha -> ctx_len < SHA384_DIGEST_SIZE ) return - EINVAL ; block_size = SHA",0
918,<S2SV_ModStart> tile_height ) { av_free ( c -> synth_tile ) ; av_free ( c -> jpeg_tile ) ; av_free ( c -> kempf_flags ) ; c -> synth_tile = av_mallocz ( c -> tile_stride * aligned_height ) ; c -> jpeg_tile = av_mallocz ( c -> tile_stride * aligned_height ) ; c -> kempf_flags = av_mallocz ( c -> tile_width * aligned_height + FF_INPUT_BUFFER_PADDING_SIZE ) ; c -> kempf_flags = av_mallocz ( c -> tile_width * aligned_height + FF_INPUT_BUFFER_PADDING_SIZE ) ; if (! c -> synth_tile ) c -> jpeg_tile = av_mallocz ( c -> jpeg_tile_stride * aligned_height ) ; c -> kempf_flags = av_mallocz ( c -> jpeg_tile_stride * aligned_height + FF_INPUT_BUFFER_PADDING_SIZE ) ; c -> kempf_flags = av_mallocz ( c -> jpeg_tile_,0
919,<S2SV_ModStart> ; return Qnil <S2SV_ModEnd> ; } <S2SV_null>,0
920,<S2SV_ModStart> += 2 * JPC_QMFB_COLGRPSIZE ; n = numrows - hstartcol ; while ( n -- > 0 ) { dstptr2 = dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr += 2 * <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
921,<S2SV_ModStart> s ) ; <S2SV_ModEnd> return 0 ;,1
922,"<S2SV_ModStart> p ) { <S2SV_ModEnd> ND_PRINT ( ( <S2SV_ModStart> length ) ) ; } if ( length > CHDLC_HDRLEN ) { ND_PRINT ( ( ndo, ""[|chdlc]"" ) ) ; return ( length ) ; }",0
923,"<S2SV_ModStart> out ; } if ( cifs_sb -> mnt_cifs_flags & CIFS_MOUNT_NOSUID ) { rc = cifs_mount_no_suid ( cifs_sb, full_path, & cifs_sb -> mnt_cifs_flags, & cifs_sb -> mnt_cifs_flags, & cifs_sb -> mnt_cifs_flags, & cifs_sb -> mnt_cifs_flags, & cifs_sb -> mnt_cifs_flags ) ; rc = cifs_mount_no_suid ( cifs_sb, full_path, & cifs_sb -> mnt_cifs_flags, & cifs_sb -> mnt_cifs_flags, & cifs_sb -> mnt_cifs_flags, & cifs_sb -> mnt_cifs_flags, & cifs_sb -> mnt_cifs_flags, & cifs_sb -> mnt_cifs_flags ) ; goto out ; }",0
924,<S2SV_ModStart> len && ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_STATS <S2SV_ModEnd> ) ) put_cmsg,0
925,"<S2SV_ModStart> ) ) ; raptor_sax2_set_option ( rdf_xml_parser -> sax2, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES, NULL, RAPTOR_OPTIONS_GET_NUMERIC ( rdf_parser, RAPTOR_OPTION_LOAD_EXTERNAL_ENTITIES ) ) ;",1
926,"<S2SV_ModStart> ; if ( alg_k & ( SSL_kDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } if ( alg_k & ( SSL_kECDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } if ( alg_k & ( SSL_kDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; }",0
927,"<S2SV_ModStart> SECURE_ELEMENT_ERROR_NPE ; } if ( encJoinAcceptSize < LORAMAC_MIC_FIELD_SIZE + LORAMAC_MIC_FIELD_SIZE <S2SV_ModStart> SECURE_ELEMENT_ERROR_NPE ; } if (! SecureElementVerifyAesCmac ( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY )!= SECURE_ELEMENT_SUCCESS ) { return SECURE_ELEMENT_FAIL_CMAC ; } if ( SecureElementAesEncrypt ( decJoinAccept + LORAMAC_MIC_FIELD_SIZE, encKeyID, decJoinAccept + LORAMAC_MIC_FIELD_SIZE )!= SECURE_ELEMENT_SUCCESS ) { return SECURE_ELEMENT_FAIL_ENCRYPT ; } if ( SecureElementVerifyAesCmac ( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY )!= SECURE_ELEMENT_SUCCESS ) { return SECURE_ELEMENT_FAIL_ENCRYPT ; }",0
928,<S2SV_ModStart> += 4 ; if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) ) { return in - first ; } <S2SV_ModStart> += 4 ; if ( nghttp2_buf_mark_avail ( & iframe -> <S2SV_ModEnd> sbuf ) ) <S2SV_ModStart> += 4 ; if ( nghttp2_buf_mark_avail ( & iframe -> <S2SV_ModEnd> sbuf ) ) <S2SV_ModStart> += 4 ; if ( nghttp2_buf_mark_avail ( & iframe -> <S2SV_ModEnd> sbuf ) ) <S2SV_ModStart> += 4 ; if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) ) { return in - first ; } <S2SV_ModStart> += 4 ; if ( nghttp2_buf_mark_avail ( & iframe -> <S2SV_ModEnd> sbuf ) ) <S2SV_ModStart> += 4 ; if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) ) { return in - first ; } if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) ) { return in - first ; } if ( nghttp2_buf_mark_avail ( & iframe -> sbuf ) ) { return in - first ; },0
929,<S2SV_ModStart> = ucounts ; kfree ( new_ns ) ;,0
930,"<S2SV_ModStart> += dif ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
931,"<S2SV_ModStart> rdmsrl ( MSR_IA32_PERF_CAPABILITIES, & x86_pmu. intel_cap. capabilities ) ; if ( version > 1 ) { rdmsrl ( MSR_IA32_PERF_CAPABILITIES, & x86_pmu. intel_cap. capabilities | X86_PERF_CAPABILITIES_DEFAULT ) ; x86_pmu. intel_cap. capabilities |= X86_PERF_CAPABILITIES_DEFAULT ; }",0
932,"<S2SV_ModStart>. dimensions ; # ifdef STB_VORBIS_DIVIDES_IN_RESIDUE uint8 * * * part_classdata = temp_block_array ( f, f -> channels, r -> part_size * sizeof ( * * part_classdata ) ) ; # else int * * classifications = temp_block_array ( f, f -> channels, r -> part_size * sizeof ( * * classifications ) ) ; # endif CHECK ( f ) ; for ( j = 0 ; j < ch ; ++ j ) if (! do_not_decode [ j ] ) memset ( residue_buffers [ i ], 0, sizeof ( float ) * n ) ) break ; if ( j == ch ) { for ( j = 0 ; j < ch ; ++ j ) if (! do_not_decode [ j ] ) memset ( residue_buffers [ i ], 0, sizeof ( float ) * n ) ) break ; if ( j == ch ) { for ( j = 0 ; j < ch ; ++ j ) if (! do_not_decode [ j ] ) memset ( residue_buffers [ i ], 0, sizeof ( float )",0
933,"<S2SV_ModStart> ) ; u32 last_oow_ack_time <S2SV_ModEnd> ; if ( <S2SV_ModStart> challenge_timestamp ) { TCP_SKB_CB ( skb ) -> last_oow_ack_time = jiffies <S2SV_ModEnd> ; challenge_count = <S2SV_ModStart> 0 ; } last_oow_ack_time = tp -> last_oow_ack_time <S2SV_ModStart> ) { TCP_SKB_CB ( skb ) -> last_oow_ack_time <S2SV_ModEnd> = now ; <S2SV_ModStart> } if ( last_oow_ack_time!= tp -> last_oow_ack_time <S2SV_ModEnd> ) { NET_INC_STATS <S2SV_ModStart> LINUX_MIB_TCPCHALLENGEACK ) ; } if ( ++ challenge_count <= sysctl_tcp_challenge_ack_limit ) { NET_INC_STATS ( sock_net ( sk ), LINUX_MIB_TCPCHALLENGEACK ) ; } if ( ++ challenge_count <= sysctl_tcp_challenge_ack_limit ) { NET_INC_STATS ( sock_net ( sk ), LINUX_MIB_TCPCHALLENGEACK ) ; }",0
934,"<S2SV_ModStart> struct llc_pktinfo info ; memset ( & info, 0, sizeof ( info ) )",1
935,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * tp, vpx_writer <S2SV_ModEnd> * stop ) <S2SV_ModStart> * stop ) { const TOKENEXTRA * p = * tp ; while ( p < stop && p -> token!= EOSB_TOKEN ) { const int t = p -> token ; const struct vpx_token * const a = & vpx_coef_encodings [ t ] ; const vpx_extra_bit * const b = & vpx_extra_bits [ t ] ; int i = 0 ; int v = a -> value ; int n = a -> len ; if ( p -> skip_eob_node ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; int bits = v >> ( n - len ) & 1 ; int n = UNCONSTRAINED_NODES - p -> skip_eob_node ; int i = 2 * p -> skip_eob_node ; if ( t >= TWO_TOKEN && t < EOB_TOKEN ) { int len = UNCONSTRAINED_NODES - p",0
936,"<S2SV_ModStart> ; struct vpx_write_bit_buffer <S2SV_ModEnd> wb = { <S2SV_ModStart> 0 } ; vpx_write_bit_buffer <S2SV_ModEnd> saved_wb ; write_uncompressed_header <S2SV_ModStart> = wb ; vpx_wb_write_literal <S2SV_ModEnd> ( & wb <S2SV_ModStart> 16 ) ; vpx_rb_bytes_written <S2SV_ModEnd> ( & wb <S2SV_ModStart> += uncompressed_hdr_size ; vpx_clear_system_state ( ) ; first_part_size = write_compressed_header ( cpi, data ) ; data += first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> first_part_size ; vpx_wb_write_literal <S2SV_ModEnd> ( & saved_wb <S2SV_ModStart> 16 ) ; vpx_rb_write_literal <S2SV_ModEnd> ( & saved_wb",0
937,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
938,"<S2SV_ModStart> * rdesc ; __le16 version ; <S2SV_ModStart> - ENODEV ; } version = le16_to_cpu ( hdesc -> bcdHID ) ; <S2SV_ModStart> -> country = le16_to_cpu ( hdesc -> bCountryCode <S2SV_ModEnd> ) ; for <S2SV_ModStart> -> bNumDescriptors ; n < sizeof ( * hdesc ) ; n ++ ) if ( hdesc -> desc [ n ]. bDescriptorType == HID_DT_REPORT ) rsize = le16_to_cpu ( hdesc -> desc [ n ]. wDescriptorLength ) ; if (! rsize || rsize > HID_MAX_DESCRIPTOR_SIZE ) { dbg_hid ( ""weird <S2SV_blank> size <S2SV_blank> of <S2SV_blank> report <S2SV_blank> descriptor <S2SV_blank> (%u)\\n"", rsize ) ; return - EINVAL ; } <S2SV_ModStart> -> desc [ n ]. bDescriptorType == HID_DT_REPORT ) rsize = le16_to_cpu ( hdesc -> desc [ n ]. wDescriptorType ) ; if (! rsize || rsize > HID_MAX_DESCRIPTOR_SIZE ) { dbg_hid ( ""weird <S2SV_blank> size <S2SV_blank> of <S2SV_blank> report <S2SV_blank> descriptor <S2SV_blank> (%u)\\",0
939,"<S2SV_ModStart> struct ikev2_id id <S2SV_ModEnd> ; int id_len <S2SV_ModStart> * typedata ; ND_TCHECK2 ( * ext, sizeof ( id ) <S2SV_ModEnd> ) ; UNALIGNED_MEMCPY <S2SV_ModStart> ( * ext, sizeof ( id ) <S2SV_ModEnd> ) ; ND_PRINT <S2SV_ModStart> case ID_DER_ASN1_DN : ND_PRINT ( ( ndo, "" <S2SV_blank> asn1:"" ) ) ; dumphex = 1 ; break ; case ID_IPV6_ADDRESS : ND_PRINT ( ( ndo, "" <S2SV_blank> ipv6:"" ) ) ; dumphex = 1 ; break ; case ID_IPV4_ADDRESS : ND_PRINT ( ( ndo, "" <S2SV_blank> ipv4:"" ) ) ; dumphex = 1 ; break ; case ID_IPV6_ADDRESS : ND_PRINT ( ( ndo, "" <S2SV_blank> ipv6:"" ) ) ; dumphex = 1 ; break ; case ID_IPV4_ADDRESS : ND_PRINT ( ( ndo, "" <S2SV_blank> fqdn:"" ) ) ; dumphex = 1 ; break ; case ID_RFC822_ADDRESS : ND_PRINT ( ( ndo, "" <S2SV_blank> rfc822:"" ) ) ; dum",0
940,<S2SV_ModStart> group_dead ) ; <S2SV_ModEnd> exit_robust_list ( tsk <S2SV_ModStart> ; # ifdef CONFIG_FUTEX if ( unlikely ( tsk -> robust_list ) ) exit_robust_list <S2SV_ModEnd> ( tsk ) <S2SV_ModStart> ; # ifdef CONFIG_COMPAT if ( unlikely ( tsk -> compat_robust_list ) ) compat_exit_robust_list ( tsk ) ; # endif,0
941,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char * <S2SV_ModStart> * path, <S2SV_ModEnd> void * data <S2SV_ModStart> data ) { <S2SV_ModEnd> add_preferred_base_object ( name <S2SV_ModStart> name ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
942,<S2SV_ModStart> ) ) { if ( atoi ( jas_tvparser_getval ( tvp ) )!= cmpt -> width || atoi ( jas_tvparser_getval ( tvp ) )!= cmpt -> height || atoi ( jas_tvparser_getval ( tvp ) )!= cmpt -> width || atoi ( jas_tvparser_getval ( tvp ) )!= cmpt -> width || atoi ( jas_tvparser_getval ( tvp ) )!= cmpt -> height || atoi ( jas_tvparser_getval ( tvp ) )!= cmpt -> width || atoi ( jas_tvparser_getval ( tvp ) )!= cmpt -> height || atoi ( jas_tvparser_getval ( tvp ) )!= cmpt -> width || atoi ( jas_tvparser_getval ( tvp ) )!= cmpt -> height || atoi ( jas_tvparser_getval ( tvp ) )!= cmpt -> width || atoi ( jas_tvparser_getval ( tvp ) )!= cmpt -> width || atoi ( jas_,0
943,"<S2SV_ModStart> urb ) ; if ( ret < 0 ) { ath10k_dbg ( ar, ATH10K_DBG_USB_BULK, ""usb <S2SV_blank> bulk <S2SV_blank> transmit <S2SV_blank> failed: <S2SV_blank> %d\\n"", ret ) ; usb_unanchor_urb ( urb ) ; <S2SV_ModStart> err_free_urb_to_pipe ; } if ( ret < 0 ) { ath10k_dbg ( ar, ATH10K_DBG_USB_BULK, ""usb <S2SV_blank> bulk <S2SV_blank> transmit <S2SV_blank> failed: <S2SV_blank> %d\\n"", ret ) ; usb_unanchor_urb ( urb ) ; if ( ret < 0 ) { ath10k_dbg ( ar, ATH10K_DBG_USB_BULK, ""usb <S2SV_blank> bulk <S2SV_blank> transmit <S2SV_blank> failed: <S2SV_blank> %d\\n"", ret ) ; usb_unanchor_urb ( urb ) ; ret = - EINVAL ; goto err_free_urb_to_pipe ; }",0
944,"<S2SV_ModStart>, yt0_0, xt1_0, yt1_0, xt2_0, yt2_0 ; WORD32 xh0_0, xh1_0, xh20_0, xh21_0, xl0_0, xl1_0 ; WORD32 x_0, x_1, x_l1_0, x_l2_0, x_l1_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l1_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_",0
945,<S2SV_ModStart> ; if ( unlikely ( data [ dp ++ ]!= 0 ) ) goto invalid_eoc ; if ( -- indef_level <= 0 ) { if ( datalen - dp < 2 ) goto data_overrun_error ; goto next_tag ; } if ( unlikely ( ( tag & 0x1f ) == ASN1_INDEFINITE_LENGTH ) ) { if ( unlikely ( ( tag & ASN1_CONS_BIT ) == ASN1_PRIM << 5 ) ) goto indefinite_len_primitive ; indef_level ++ ; goto next_tag ; } if ( unlikely ( len == ASN1_INDEFINITE_LENGTH ) ) { if ( unlikely ( ( tag & ASN1_CONS_BIT ) == ASN1_PRIM << 5 ) ) ) goto indefinite_len_primitive ; indef_level ++ ; goto next_tag ; } if ( unlikely ( len == ASN1_INDEFINITE_LENGTH ) ) { if ( unlikely ( ( tag & ASN1_CONS_BIT ) == ASN1_PRIM << 5 ) ) goto indefinite_len_primitive ; indef_level ++ ; goto next_tag,0
946,<S2SV_ModStart> ; if ( <S2SV_ModEnd> flags & __GFP_ZERO,0
947,<S2SV_ModStart> mntent ) { if ( IS_ERR ( mntent -> mnt_dir ) ) return PTR_ERR ( mntent -> mnt_dir ) ; if ( IS_ERR ( mntent -> mnt_dir ) ) return PTR_ERR ( mntent -> mnt_dir ) ;,0
948,"<S2SV_ModStart> ; if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; } <S2SV_ModStart> ; if ( signature_len < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; }",0
949,<S2SV_ModStart> ] >= min && value [ n ] <= max && field -> usage [ value [ n ] <S2SV_ModEnd> - min ] <S2SV_ModStart> - min ] <S2SV_ModEnd> == HID_UP_KEYBOARD + <S2SV_ModStart> if ( value [ n ] >= min && value [ n ] <= max && field -> usage [ value [ n ] <S2SV_ModEnd> - min ] <S2SV_ModStart> - min ] <S2SV_ModEnd> == HID_UP_KEYBOARD + <S2SV_ModStart> if ( value [ n ] >= min && value [ n ] <= max && field -> usage [ value [ n ] <S2SV_ModEnd> - min ] <S2SV_ModStart> <= max && field -> usage [ value [ n ] <S2SV_ModEnd> - min ] <S2SV_ModStart> - min ] <S2SV_ModEnd> == HID_UP_KEYBOARD + <S2SV_ModStart> if ( value [ n ] >= min && value [ n ] <= max && field -> usage [ value [ n ] <S2SV_ModEnd> - min ] <S2SV_ModStart> - min ] <S2SV_ModEnd> == HID_UP_KEYBOARD +,0
950,"<S2SV_ModStart> * cm, vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb,",0
951,"<S2SV_ModStart> if ( argReg < 0 || argReg + ins_size <S2SV_ModStart> break ; } if ( argReg + ins_size > regsz ) { r_buf_set_at ( binfile -> buf, debug_info_off, p4 + ins_size, regsz - ins_size ) ; return ; } <S2SV_ModStart> break ; } <S2SV_ModEnd> p4 = r_uleb128 <S2SV_ModStart> ; p4 = r_uleb128 ( p4, p4_end - p4, & line_start ) ; p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; p4 = r_uleb128 ( p4, p4_end - p4, & parameters_size ) ; p4 = r_uleb128 ( p4, p4_",0
952,"<S2SV_ModStart> ) ) ; rb_hash_aset ( env, server_name_val, req_server_name ( req ) ) ; rb_hash_aset ( env, server_port_val, req_server_port ( req ) ) ; fill_headers ( req, env ) ; rb_hash_aset ( env, rack_name_val, rack_name_val_val ) ; rb_hash_aset ( env, rack_url_scheme_val, rack_url_scheme_val ) ; rb_hash_aset ( env, rack_input_val, req_rack_input ( req ) ) ; rb_hash_aset ( env, rack_errors_val, Qfalse ) ; rb_hash_aset ( env, rack_logger_val, Qfalse ) ; rb_hash_aset ( env, rack_upgrade_val, self ) ; rb_hash_aset ( env, rack_hijack_val, self ) ; rb_hash_aset ( env, rack_hijack_io_val, self ) ;",0
953,<S2SV_ModStart> 0 ) ; if ( args -> flags & ATTR_KERNOVAL ) { args -> valuelen = valuelen ; return XFS_ERROR ( ERANGE ) ; } args -> rmtvaluelen = valuelen ;,0
954,"<S2SV_ModStart> endif # endif int <S2SV_ModEnd> prepare_retval ; # <S2SV_ModStart>, prepare_retval ; # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION imp_sth -> use_server_side_prepare = imp_dbh -> use_server_side_prepare ; if ( attribs ) { svp = DBD_ATTRIB_GET_SVP ( attribs, ""mysql_bind"", 20 ) ; imp_sth -> use_server_side_prepare = svp? imp_dbh -> use_server_side_prepare : imp_dbh -> use_server_side_prepare ; if ( svp && SvTRUE ( * svp ) ) { # if MYSQL_ASYNC imp_sth -> is_async = TRUE ; imp_sth -> use_server_side_prepare = FALSE ; # else do_error ( sth, 2000, ""Async <S2SV_blank> support <S2SV_blank> was <S2SV_blank> not <S2SV_blank> built <S2SV_blank> into <S2SV_blank> this <S2SV_blank> version <S2SV_blank> of <S2SV_blank> DBD::mysql"", ""HY000"" ) ; # endif do_error ( sth, 2000, ""Async <S2SV_blank> support <S2SV_blank> was <S2SV_blank> not <S2SV_blank> built <S2SV_blank> into <S2SV_blank> this <S2SV_blank> version <S2SV_blank> of <S2SV_blank> DBD::mysql"", ""HY000""",0
955,"<S2SV_ModStart> ; if ( key -> type == & key_type_keyring ) { if (! test_bit ( KEY_FLAG_INSTANTIATED, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_INSTANTIATED, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_IN_QUOTA, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_IN_QUOTA, & key -> flags ) ) atomic_dec ( & key -> user -> nkeys ) ; if ( test_bit ( KEY_FLAG_IN_QUOTA, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_IN_USERKEYRING, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_IN_QUOTA, & key -> flags ) ) atomic_dec ( & key -> user ->",0
956,"<S2SV_ModStart> ) ) ; if (! state. sumlen ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> queries <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", state. num ) ) ) ;",0
957,"<S2SV_ModStart> int need = 0 <S2SV_ModEnd> ; Char * <S2SV_ModStart>, { need = Length ( screen, first. row, first. row, screen -> max_row ) ; if ( need < 0 ) { SysError ( ERROR_BMALLOC2 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( Char * ) malloc ( ( size_t ) need + 1 ) ; return ; } <S2SV_ModStart>, { need = Length ( screen, first. row, first. col, screen -> max_col ) ; if ( need < 0 ) { SysError ( ERROR_BMALLOC2 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( Char * ) malloc ( ( size_t ) need + 1 ) ; scp -> data_limit = ( size_t ) ( need + 1 ) ; free ( scp -> data_buffer ) ; scp -> data_buffer = ( Char * ) malloc ( ( size_t ) need + 1 ) ; if ( need < 0 ) { SysError ( ERROR_BMALLOC2 ) ; free ( scp -> data_buffer ) ; free ( scp -> data_buffer ) ; scp -> data_buffer =",0
958,"<S2SV_ModStart> = 0 ; mutex_lock ( & EXT4_SB ( inode -> i_sb ) -> s_orphan_lock ) ; <S2SV_ModStart> i_orphan ) ; err = ext4_reserve_inode_write ( handle, inode, & iloc ) ; if ( err ) goto out_err ; if ( prev == & sbi -> s_orphan ) { BUFFER_TRACE ( sbi -> s_sbh, ""get_write_access"" ) ; err = ext4_journal_get_write_access ( handle, sbi -> s_sbh ) ; if ( err ) goto out_brelse ; } if ( prev == & ei -> i_orphan ) { BUFFER_TRACE ( sbi -> s_sbh, ""get_write_access"" ) ; err = ext4_journal_get_write_access ( handle, sbi -> s_sbh ) ; if ( err ) goto out_brelse ; sbi -> s_es -> s_last_orphan = cpu_to_le32 ( ino_next ) ; BUFFER_TRACE ( sbi -> s_sbh, ""get_write_access"" ) ;",0
959,"<S2SV_ModStart> ftoa_bounded_extra ( JsVarFloat <S2SV_ModEnd> val, char <S2SV_ModStart> ( isnan ( val <S2SV_ModEnd> ) ) { <S2SV_ModStart> ( val < 0 ) strncat ( str, ""-NaN"", len ) ; else strncat ( str, ""Infinity"", len ) ; } else if (! isfinite ( val ) ) { if ( val < 0 ) strncat ( str, ""-Infinity"", len ) ; else strncat ( str, ""Infinity"", len ) ; } else { if ( val > 0 && val < 1 ) { if ( -- len <= 0 ) { * str = 0 ; return ; } * ( str ++ ) = '-' ; val = - val ; } if ( ( ( JsVarInt ) ( val + stopAtError ) ) == ( 1 + ( JsVarInt ) val ) ) { if ( -- len <= 0 ) { * str = 0 ; return ; } * ( str ++ ) = '-' ; val = - val ; } if ( ( ( JsVarInt ) ( val + stopAtError ) ) == ( 1 + ( JsVarInt ) val ) ) ; d = 1 ; while ( d >= 1 ) { int v = ( int )",0
960,"<S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%",0
961,"<S2SV_ModStart> ) ; } for ( size = 0 ; size <= 8 ; size ++ ) { size_t length ; char * result ; memcpy ( buf, ""DEADBEEF"", 8 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( result!= NULL ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; ASSERT ( length == 5 ) ; if ( size < 6 ) ASSERT ( result!= buf ) ; ASSERT ( memcmp ( buf + size, & ""DEADBEEF"" [ size ], 8 - size ) == 0 ) ; if ( result!= buf ) free ( result ) ; } for ( size = 0 ; size <= 8 ; size ++ ) { size_t length ; char * result ; memcpy ( buf, ""DEADBEEF"", 8 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( result!= NULL ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; ASSERT ( length == 5 ) ; if ( size < 6",0
962,"<S2SV_ModStart> cycles ) ; if ( unlikely ( irq_flags & IRQF_NO_FRESH_POOL ) ) { if ( ( fast_pool -> count >= 64 ) && crng_load_fast ( & fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ) { fast_pool -> count = 0 ; fast_pool -> last = now ; return ; }",0
963,"<S2SV_ModStart> LEX_ID ) { if ( strlen ( jslGetTokenValueAsString ( ) ) > len ) { jslTokenAsString ( str, jslGetTokenValueAsString ( ), len ) ; return ; } <S2SV_ModStart> LEX_STR ) { if ( strlen ( jslGetTokenValueAsString ( ) ) > len ) { jslTokenAsString ( str, jslGetTokenValueAsString ( ), len ) ; return ; } <S2SV_ModStart> ( str, jslGetTokenValueAsString ( ), len ) ; strncat ( str, ""\'"", len ) ; } else if ( strlen ( jslGetTokenValueAsString ( ) ) > len ) { jslTokenAsString ( str, jslGetTokenValueAsString ( ), len ) ; } else if ( strlen ( jslGetTokenValueAsString ( ) ) > len ) { jslTokenAsString ( str, jslGetTokenValueAsString ( ), len ) ; return ; }",0
964,"<S2SV_ModStart> 0 ) { if ( ( st. st_mode & S_IFMT ) == S_IFREG ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> directory"", g. inf ) ; } else if ( ( st. st_mode & S_IFMT ) == S_IFDIR ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> directory"", g. inf ) ; } else if ( ( st. st_mode & S_IFMT ) == S_IFREG ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> directory"", g. inf ) ; } else if ( ( st. st_mode & S_IFMT ) == S_IFLNK ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> directory"", g. inf ) ; } else if ( ( st. st_mode & S_IFMT ) == S_IFDIR ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> directory"", g. inf ) ; } else if ( (",0
965,,1
966,"<S2SV_ModStart> * output ; MagickBooleanType result ; <S2SV_ModStart> MagickFalse ) ; } result = MagickFalse ; <S2SV_ModStart> 1 ) ; if ( result == MagickFalse ) { ThrowFileException ( exception, FileOpenError, ""UnableToOpenFile"", argv [ argc - 1 ] ) ; return ( MagickFalse ) ; } <S2SV_ModStart> input ) ) if ( result == MagickFalse ) { ThrowFileException ( exception, FileOpenError, ""UnableToOpenFile"", argv [ i ] ) ; return ( MagickFalse ) ; } for ( i = 2 ; i < ( ssize_t ) ( argc - 1 ) ; i ++ ) { input = fopen_utf8 ( argv [ i ], ""rb"" ) ; if ( input == ( FILE * ) NULL ) { fprintf ( stderr, ""DEBUG: <S2SV_blank> Concatenate <S2SV_blank> Image: <S2SV_blank> \\""%s\\""\\n"", argv [ i ] ) ; continue ; } for ( c = fgetc ( input ) ; c!= EOF ; c = fgetc ( input ) ) if ( result == MagickFalse ) { ThrowFileException ( exception, FileOpenError, ""UnableToOpenFile"", argv [ i ] )",0
967,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
968,"<S2SV_ModStart> fail : ext3_msg ( <S2SV_ModEnd> ""error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> journal <S2SV_blank> device <S2SV_blank> %s: <S2SV_blank> %ld"",",0
969,"<S2SV_ModStart> passwd * pwd, const char * prefix <S2SV_ModStart> = NULL ; <S2SV_ModEnd> pw_init ( ) <S2SV_ModStart> ( fp = safe_mkstemp <S2SV_ModEnd> ( & tmpname <S2SV_ModStart> atomic_dir ) ) == NULL ) return - 1 ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; namelen = strlen ( pwd -> pw_name ) ; if (! found && linebuf [ namelen ] == ':' &&! strncmp ( linebuf, pwd -> pw_name, namelen ) ) { if ( putpwent ( pwd, fp ) < 0 ) goto fail ; found = true ; continue ; } rc = close_stream ( fp ) ; fp = NULL ;",0
970,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned",1
971,"<S2SV_ModStart> s2 ) { size_t len = <S2SV_ModEnd> strlen ( s1 <S2SV_ModStart> ) + 1U ; return memcmp ( s1, s2, len <S2SV_ModEnd> ) ; }",0
972,"<S2SV_ModStart> TRUE ; } Jid * jid_from = jid_create ( xmpp_stanza_get_from ( stanza ) ) ; Jid * jid_to = jid_create ( from ) ; if (! jid_from ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> retrieve <S2SV_blank> stanza <S2SV_blank> from <S2SV_blank> for <S2SV_blank> Carbon"" ) ; return TRUE ; } <S2SV_ModStart> jid_from ) ; if (! jid_to ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> retrieve <S2SV_blank> jid from: <S2SV_blank> %s"", xmpp_stanza_get_from ( stanza ) ) ; return TRUE ; } <S2SV_ModStart> jid_to ) ; if (! jid_from ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> retrieve <S2SV_blank> stanza <S2SV_blank> from: <S2SV_blank> %s"", xmpp_stanza_get_from ( stanza ) ) ; return TRUE ; } <S2SV_ModStart> jid_create ( jid_from ) ; if (! jid_to ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> retrieve <S2SV_blank> jid from: <S2SV_blank> %s"", from ) ; return TRUE ; } <S2SV_ModStart> jid_create ( jid_to ) ; if (! jid_from ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> retrieve",0
973,"<S2SV_ModStart> ( c, ""The <S2SV_blank> operating <S2SV_blank> system <S2SV_blank> is <S2SV_blank> not <S2SV_blank> able <S2SV_blank> to <S2SV_blank> handle <S2SV_blank> the <S2SV_blank> specified <S2SV_blank> number <S2SV_blank> of <S2SV_blank> clients"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( c, ""The <S2SV_blank> operating <S2SV_blank> system <S2SV_blank> is <S2SV_blank> not <S2SV_blank> able <S2SV_blank> to <S2SV_blank> handle <S2SV_blank> the <S2SV_blank> specified <S2SV_blank> number <S2SV_blank> of <S2SV_blank> clients"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( c, ""The <S2SV_blank> operating <S2SV_blank> system <S2SV_blank> is <S2SV_blank> not <S2SV_blank> able <S2SV_blank> to <S2SV_blank> handle <S2SV_blank> the <S2SV_blank> specified <S2SV_blank> number <S2SV_blank> of <S2SV_blank> clients"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( c, ""The <S2SV_blank> operating <S2SV_blank> system <S2SV_blank> is <S2SV_blank> not <S2SV_blank> able <S2SV_blank> to <S2SV_blank> handle <S2SV_blank> the <S2SV_blank> specified <S2SV_blank> number <S2SV_blank> of <S2SV_blank> clients"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( c, ""The <S2SV_blank> operating <S2SV_blank> system <S2SV_blank> is <S2SV_blank> not <S2SV_blank> able <S2SV_blank> to <S2SV_blank> handle <S2SV_blank> the <S2SV_blank> specified <S2SV_blank> number <S2SV_blank> of <S2SV_blank> clients"" <S2SV_ModEnd> ) ; return <S2SV_ModStart> ( c, ""The <S2SV_blank> operating <S2SV_blank> system <S2SV_blank> is <S2SV_blank> not <S2SV_blank> able <S2SV_blank> to <S2SV_blank> handle <S2SV_blank> the <S2SV_blank> specified <S2SV_blank> number <S2SV_blank> of <S2SV_blank> clients"" <S2SV_ModEnd> ) ; return",0
974,"<S2SV_ModStart> ) ) { parse_global_option ( CMD_PRINT_HELP, NULL, NULL, NULL ) ; parse_service_option ( CMD_PRINT_HELP, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, <S2SV_ModStart> ) ) { parse_global_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-version"" ) ) { parse_global_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcmp ( arg1, ""-options"" ) ) { print_ssl_options ( ) ; log_flush ( LOG_INFO ) ; return 1 ; } else if (! strcmp ( arg1, ""-sockets"" ) ) { socket_options_print",0
975,<S2SV_ModStart> return - EOPNOTSUPP ; msg -> msg_namelen = 0,0
976,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
977,<S2SV_ModStart> st_v1_new_iv ) ; st -> st_v1_new_iv. data [ st -> st_v1_new_iv. len - 1 ] = 0 ; <S2SV_ModStart> st_v1_new_iv ) ; st -> st_v1_new_iv. data [ st -> st_v1_new_iv. len - 1 ] <S2SV_ModStart> st_v1_new_iv ) ; st -> st_v1_new_iv. data [ st -> st_v1_new_iv. len - 1 ] = 0 ; st -> st_v1_new_iv. data [ st -> st_v1_new_iv. len - 1 ] = 0 ; st -> st_v1_new_iv. data [ st -> st_v1_new_iv. len - 1 ] <S2SV_ModStart> st_v1_new_iv ) ; st -> st_v1_new_iv. data [ st -> st_v1_new_iv. len - 1 ] = 0 ; st -> st_v1_new_iv. data [ st -> st_v1_new_iv. len - 1 ] = 0,0
978,<S2SV_ModStart> ; if ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ) { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; } else { ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; },0
979,"<S2SV_ModStart> map_zone * zone ; unsigned int <S2SV_ModEnd> i ; old_map <S2SV_ModStart> ]. height ; tilemap = malloc ( x_size * y_size * sizeof ( struct map_tile ) ) ; if (! tilemap ) return false ; for ( x = 0 ; x < x_size ; ++ x ) { for ( y = 0 ; y < y_size ; ++ y ) { tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * old_width ] ; tile -> frames_left = tileset_get_delay ( s_map -> tileset, 0 ) ; tile -> tile_index = 0 ; } } for ( i = 0 ; i < s_map -> num_layers ; ++ i ) { if (! s_map -> layers [ i ]. is_parallax ) { s_map -> width = fmax ( s_map -> width, s_map -> layers [ i ]. width * tile_width ) ; s_map -> height = fmax ( s_map -> height, s_map -> layers [ i ]. height * tile_height ) ; } for (",0
980,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> ip_printroute ( netdissect_options <S2SV_ModStart> return ; } if ( ( length + 1 ) & 3 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> length <S2SV_blank> %u]"", length ) ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> ptr <S2SV_blank> %u]"", cp [ 2 ] ) ) ; return - 1 ; } if ( ( length + 1 ) & 3 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> length <S2SV_blank> %u]"", length ) ) ; return - 1 ; } if ( ( ptr + 1 ) & 3 ) || ( ( ptr + 1 ) & 3 ) || ptr > length + 1 ) ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> ptr <S2SV_blank> %u]"", ptr ) ) ; for ( len = 3 ; len < length ; len += 4 ) { if ( ipaddr_string ( ndo, & cp [ len ] ) ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %s"", ipaddr_string ( ndo, & cp [ len ] ) )",0
981,<S2SV_ModStart> <S2SV_null> <S2SV_null> static char <S2SV_ModEnd> print_string ( cJSON <S2SV_ModStart> item ) { return print_string_ptr <S2SV_ModEnd> ( item -> <S2SV_ModStart> valuestring ) ; } <S2SV_null>,0
982,"<S2SV_ModStart> 1 ) res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ; else if (! res ) res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ; else if (! res ) res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ; else res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ; else if (! res ) res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ; else if (! res ) res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ; else { int i ; for ( i = num_enc - 1 ; i >= 0 ; i -- ) { if ( ( res = ctx -> iface -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags,",0
983,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_uint8 <S2SV_ModStart> + 1, ""prestring=%s"" <S2SV_ModEnd>, buf ) <S2SV_ModStart> buf ) ; if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; } else if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; } else if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; } else if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; } else if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large;",0
984,"<S2SV_ModStart> * buf ; size_t size = sizeof ( unsigned char * ) * chm -> chunk_size ; if ( chunk_num >= chm -> num_chunks ) { self -> error = MSPACK_ERR_NOMEMORY ; return NULL ; } if (! sys -> seek ( fh, ( off_t ) ( chunk_num * chm -> chunk_size ) ) ) { self -> error = MSPACK_ERR_SEEK ; sys -> free ( buf ) ; return NULL ; } if ( sys -> read ( fh, buf, ( int ) chm -> chunk_size )!= ( int ) chm -> chunk_size ) { self -> error = MSPACK_ERR_READ ; sys -> free ( buf ) ; return NULL ; } if (! sys -> seek ( fh, ( off_t ) ( chunk_num * chm -> chunk_size ) ) ) { self -> error = MSPACK_ERR_SEEK ; sys -> free ( buf ) ; return NULL ; } if (! sys -> read ( fh, buf, ( int ) chm -> chunk_size ) ) { self -> error = MSPACK_ERR_SEEK ; sys -> free ( buf ) ; return",0
985,"<S2SV_ModStart> = fake_used_mask ; list_for_each_entry ( leader, & leader -> sibling_list, group_entry ) { list_for_each_entry ( sibling, & sibling -> sibling_list, group_entry ) { list_for_each_entry ( sibling, & leader -> sibling_list, group_entry ) { if (! validate_event ( & fake_pmu, sibling ) ) return - EINVAL ; } list_for_each_entry ( sibling, & sibling -> group_entry, group_entry ) { if (! validate_event ( & fake_pmu, sibling ) ) return - EINVAL ; } } list_for_each_entry ( sibling, & sibling -> sibling_list, group_entry ) { list_for_each_entry ( sibling, & leader -> sibling_list, group_entry ) { if (! validate_event ( & fake_pmu, sibling ) ) return - EINVAL ; } list_for_each_entry ( sibling, & sibling -> group_entry, group_entry ) { if (! validate_event ( & fake_pmu, sibling ) ) return - EINVAL ;",0
986,"<S2SV_ModStart> ; } } else if ( arg1 == 2 ) { win_maximise ( - 2 ) ; win_set_chars ( term. rows, term. cols ) ; } else if ( arg1 == 3 ) { win_maximise ( - 2 ) ; win_set_chars ( term. rows, term. cols ) ; } else if ( arg1 == 0 ) { win_maximise ( - 1 ) ; win_set_chars ( term. rows, term. cols ) ; } else if ( arg1 == 1 ) { win_maximise ( 1 ) ; win_set_chars ( term. rows, term. cols ) ; } else if ( arg1 == 0 ) { win_maximise ( 0 ) ; win_set_chars ( term. rows, term. cols ) ; } else if ( arg1 == 3 ) { win_maximise ( - 1 ) ; win_set_chars ( term. rows, term. cols ) ; } else if ( arg1 == 1 ) { win_maximise ( 1 ) ; win_set_chars ( term. rows, term. cols ) ; } else if ( term. csi_arg",0
987,"<S2SV_ModStart> ; } else if ( s -> studio_profile ) { av_log ( s -> avctx, AV_LOG_DEBUG, ""Studio <S2SV_blank> Profile <S2SV_blank> not <S2SV_blank> supported"" ) ; else if ( s -> avctx -> profile == FF_PROFILE_STUDIO ) { av_log ( s -> avctx, AV_LOG_DEBUG, ""Studio <S2SV_blank> Profile <S2SV_blank> not <S2SV_blank> supported"" ) ; else if ( s -> avctx -> profile == FF_PROFILE_STUDIO ) { av_log ( s -> avctx, AV_LOG_DEBUG, ""Studio <S2SV_blank> Profile <S2SV_blank> not <S2SV_blank> supported"" ) ; return AVERROR_INVALIDDATA ; } else if ( s -> avctx -> profile == FF_PROFILE_STUDIO ) { av_log ( s -> avctx, AV_LOG_DEBUG, ""Studio <S2SV_blank> Profile <S2SV_blank> not <S2SV_blank> supported"" ) ; else if ( s -> avctx -> profile == FF_PROFILE_STUDIO ) { av_log ( s -> avctx, AV_LOG_DEBUG, ""Studio <S2SV_blank> Profile <S2SV_blank> not <S2SV_blank> supported"" ) ; return AVERROR_INVALIDDATA ; } else return AVERROR_INVALID",0
988,"<S2SV_ModStart> ; if ( unlikely ( __get_user ( err, & tsops -> sem_num, err ) ) return err ; if ( unlikely ( __get_user ( err, & tsops -> sem_flg, err ) ) ) return err",0
989,<S2SV_ModStart> ++ ) s [ i ] = 0 ; for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; sum += s [ i ] ; d [ i + 8 ] = 0 ; } for ( i = 0 ; i < cols + 17 ; i ++ ) s [ i ] = s [ i ] ; for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; } for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; d [ i + 8 ] = 0 ; } for ( c = 0 ; c < cols + 8 ; c ++,0
990,<S2SV_ModStart> if ( log2_blksz > EXT2_BLOCK_SIZE ( data ) ) { log2_blksz = LOG2_EXT2_BLOCK_SIZE ( data ) ; log2_blksz = LOG2_EXT2_BLOCK_SIZE ( data ) ; if ( log2_blksz > EXT2_BLOCK_SIZE ( data ) ) { log2_blksz = LOG2_EXT2_BLOCK_SIZE ( data ) ; log2_blksz = LOG2_EXT2_BLOCK_SIZE ( data ) ; } else if ( log2_blksz > EXT2_BLOCK_SIZE ( data ) ) log2_blksz = LOG2_EXT2_BLOCK_SIZE ( data ) ; if ( log2_blksz > EXT2_BLOCK_SIZE ( data ) ) { log2_blksz = LOG2_EXT2_BLOCK_SIZE ( data ) ; } log2_blksz = LOG2_EXT2_BLOCK_SIZE ( data ) ; },0
991,"<S2SV_ModStart> ; # endif if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; # endif i -> posX = i -> parent -> width - i -> width ; } if ( ( i -> posY + i -> height ) > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> Y <S2SV_blank> position\\n"" ) ; # endif i -> posY = i -> parent -> height - i -> height ; } if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; # endif i -> posX =",0
992,"<S2SV_ModStart> ) ) ; DPRINTF ( ( ""section <S2SV_blank> len: <S2SV_blank> %u <S2SV_blank> properties: <S2SV_blank> %u\\n"", sh. sh_len, CDF_SHLEN_LIMIT ) ) ; <S2SV_ModStart> ) ) ; if ( inp == NULL ) { DPRINTF ( ( ""CDF_PROP_LIMIT: <S2SV_blank> %u\\n"", CDF_PROP_LIMIT ) ) ; goto out ; } <S2SV_ModStart> 0 ) { DPRINTF ( ( ""CDF_PROP_LIMIT: <S2SV_blank> %u\\n"", CDF_PROP_LIMIT ) ) ; if ( inp == NULL ) { DPRINTF ( ( ""CDF_PROP_LIMIT: <S2SV_blank> %u\\n"" ) ) ; goto out ; } <S2SV_ModStart> ) ) ; if ( inp == NULL ) { DPRINTF ( ( ""CDF_PROP_LIMIT: <S2SV_blank> %u\\n"", CDF_PROP_LIMIT ) ) ; goto out ; } <S2SV_ModStart> 0 ) { DPRINTF ( ( ""CDF_PROP_LIMIT: <S2SV_blank> %u\\n"", CDF_PROP_LIMIT ) ) ; if ( inp == NULL ) { DPRINTF ( ( ""CDF_PROP_LIMIT: <S2SV_blank> %u\\n"" ) ) ;",0
993,"<S2SV_ModStart> ++ ; } if ( bytes_matched + input_incr > MAX_FAST_RE_LIMIT ) { FAIL_ON_ERROR ( callback ( flags & RE_FLAGS_BACKWARDS? input + 1 : input_data, bytes_matched, flags, callback_args ) ) ; break ; } <S2SV_ModStart> ++ ; } if ( bytes_matched + input_incr > MAX_FAST_RE_LIMIT ) { FAIL_ON_ERROR ( callback ( flags & RE_FLAGS_BACKWARDS? input + 1 : input_data, bytes_matched, flags, callback_args ) ) ; break ; }",0
994,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ( token ) { case LEX_EOF : strncpy ( str, ""EOF"", len ) ; return ; case LEX_ID : strncpy ( str, ""ID"", len ) ; return ; case LEX_INT : strncpy ( str, ""INT"", len ) ; return ; case LEX_FLOAT : strncpy ( str, ""FLOAT"", len ) ; return ; case LEX_STR : strncpy ( str, ""STRING"", len ) ; return ; case LEX_TEMPLATE_LITERAL : strncpy ( str, ""TEMPLATE <S2SV_blank> LITERAL"", len ) ; return ; case LEX_UNFINISHED_STR : strncpy ( str, ""UNFINISHED <S2SV_blank> STRING"", len ) ; return ; case LEX_TEMPLATE_LITERAL : strncpy ( str, ""TEMPLATE <S2SV_blank> LITERAL"", len ) ; return ; case LEX_REGEX : strncpy ( str, ""REGEX"", len ) ; return ; case LEX_UNFINISHED_REGEX : strncpy ( str, ""UNFINISHED <S2SV_blank>",0
995,<S2SV_ModStart> mnt_instance ) ; if ( mnt -> mnt. mnt_flags & MNT_PRIVILEGED ) { mnt -> mnt. mnt_flags &= ~ ( MNT_PRIVILEGED | MNT_MOUNT <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
996,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",0
997,"<S2SV_ModStart> ) ) ; if (! jas_stream_getrwcount ( in ) ) { jas_eprintf ( ""packet <S2SV_blank> offset=%08ld <S2SV_blank> cmptno=%02d <S2SV_blank> rlvlno=%02d <S2SV_blank> prcno=%03d <S2SV_blank> lyrno=%02d\\n"", ( long ) jas_stream_getrwcount ( in ), jpc_pi_prg ( pi ), jpc_pi_cmptno ( pi ), jas_pi_lyrno ( pi ) ) ; }",0
998,<S2SV_ModStart> err = - EIO <S2SV_ModEnd> ; unsigned char <S2SV_ModStart> iinfo ; uint32_t <S2SV_ModEnd> pos ; iinfo <S2SV_ModStart> 0 ; out : if ( PageError ( page ) ) { SetPageError ( page ) ; unlock_page ( page ) ; return err ; } <S2SV_ModStart> 0 ; out : if ( PageError ( page ) ) { up_read ( & iinfo -> i_data_sem ) ; SetPageUptodate ( page ) ; kunmap ( page ) ; unlock_page ( page ) ; return err ; } up_read ( & iinfo -> i_data_sem ) ; SetPageError ( page ) ; unlock_page ( page ) ; return err ; },0
999,<S2SV_ModStart> ; else if ( vcpu -> arch. x2apic_base & X2APIC_DISABLE_X2APIC ) { if ( is_noncanonical_address ( vcpu -> arch. x2apic_base ) ) msr_bitmap = vmx_msr_bitmap_noncanonical_x2apic ; else if ( is_noncanonical_address ( vcpu -> arch. x2apic_base ) ) msr_bitmap = vmx_msr_bitmap_noncanonical_x2apic ; else if ( is_noncanonical_address ( vcpu -> arch. x2apic_base ) ) msr_bitmap = vmx_msr_bitmap_noncanonical_x2apic ; else if ( is_noncanonical_address ( vcpu -> arch. x2apic_base ) ) msr_bitmap = vmx_msr_bitmap_noncanonical_x2apic ; else if ( is_noncanonical_address ( vcpu -> arch. x2apic_base ) ) msr_bitmap = vmx_msr_bitmap_noncanonical,0
1000,"<S2SV_ModStart> ( ent!= NULL && ( st = populate_policy ( context, ld, ent, pol_name, * policy ) )!= 0 <S2SV_ModEnd> ) goto cleanup <S2SV_ModStart> cleanup ; } <S2SV_ModEnd> return st ;",0
1001,<S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; } <S2SV_ModStart> = value ; if ( 0 == ps_sps -> i1_sps_valid ) { return IHEVCD_INVALID_HEADER ; },0
1002,"<S2SV_ModStart> ) ) { switch ( ( c = * format ++ ) ) { case'<S2SV_blank>': psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'e' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case 'E' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'T' : trunc_8to4 = SF_FALSE ; break ; case'm' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case '1' : data = va_arg ( argptr, unsigned int ) ; if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_be_long ( psf, data ) ; } else { header_put_le_long ( psf, data ) ; } ; count += 1 ; break ; case '3' : data = va_arg ( argptr, unsigned int ) ; if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_be_long ( psf, data ) ; } else { header_put_le_long ( psf, data ) ; } ;",0
1003,<S2SV_ModStart> ; if ( d -> msg_len < CX24116_ARGLEN - CX24116_DISEQC_MSGOFS ) return - EINVAL ; <S2SV_ModStart> ; } if ( d -> msg_len + CX24116_DISEQC_MSGLEN > ( CX24116_ARGLEN - CX24116_DISEQC_MSGOFS ) ) return - EINVAL ; for ( i = 0 ; i < d -> msg_len ; i ++ ) state -> dsec_cmd. args [ CX24116_DISEQC_MSGOFS + i ] = d -> msg [ i ] ; if ( state -> dsec_cmd. len < d -> msg_len ) return - EINVAL ; for ( i = 0 ; i < d -> msg_len ; i ++ ) state -> dsec_cmd. args [ CX24116_DISEQC_MSGLEN + i ] = d -> msg [ i ] ; if ( toneburst == CX24116_DISEQC_TONEOFF ) state -> dsec_cmd. args [ CX24116_DISEQC_BURST ] = 0 ; else,0
1004,"<S2SV_ModStart> break ; } memset ( & cinfo, 0, sizeof ( cinfo ) ) ;",1
1005,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1006,"<S2SV_ModStart> 0 ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; return 0 ; } int rv = copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } <S2SV_ModEnd> return 1 ;",0
1007,"<S2SV_ModStart> int num_items_scanned ; guint <S2SV_ModEnd> pkt_len ; int <S2SV_ModStart> 0 ) ; if ( pkt_len > 1024 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } <S2SV_ModStart> = WTAP_ERR_BAD_FILE ; <S2SV_ModEnd> return FALSE ; <S2SV_ModStart> = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } if ( pkt_len < 0 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return FALSE ; } if ( pkt_len > 1024 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return",0
1008,"<S2SV_ModStart> ; int err ; msg -> msg_namelen = 0 <S2SV_ModStart> ; } } rskb = skb_peek_tail ( & sk -> sk_receive_queue ) ; err = put_cmsg ( msg, SOL_IUCV, SCM_IUCV_DATA, CB_IUCV_DATA_LEN, CB_IUCV ( skb ) ) ; if ( err ) { if (! ( flags & MSG_PEEK ) ) skb_queue_head ( & sk -> sk_receive_queue, skb ) ; return err ; } <S2SV_ModEnd> err = put_cmsg <S2SV_ModStart>, SOL_IUCV, SCM_IUCV_RECV_EOB, CB_IUCV_RECV_EOB_LEN, CB_IUCV_RECV_EOB_LEN ( skb ) ) ; if ( err ) { if (! ( flags & MSG_PEEK ) ) skb_queue_head ( & sk -> sk_receive_queue, skb ) ; return err ; }",0
1009,"<S2SV_ModStart> case IS_STRING : if ( zend_symtable_find ( ht, Z_STRVAL_P ( key ), Z_STRLEN_P ( key ) + 1, ( void * * ) & old_data ) == SUCCESS ) { var_push_dtor ( var_hash, old_data ) ; } zend_symtable_update ( ht, Z_STRVAL_P ( key ), sizeof ( data ), NULL ) ; break ; case IS_LONG : if ( zend_hash_index_find ( ht, Z_LVAL_P ( key ), ( void * * ) & old_data ) == SUCCESS ) { var_push_dtor ( var_hash, old_data ) ; } zend_hash_index_update ( ht, Z_LVAL_P ( key ), & data, sizeof ( data ), NULL ) ; break ; case IS_LONG : if ( zend_hash_index_find ( ht, Z_LVAL_P ( key ), ( void * * ) & old_data ) == SUCCESS ) { var_push_dtor ( var_hash, old_data ) ; } zend_hash_",0
1010,<S2SV_ModStart> ) ) ; strncpy <S2SV_ModEnd> ( link_info.,0
1011,<S2SV_ModStart> } else { if ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; obuf -> len = len ; opipe -> nrbufs ++ ; } else { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; opipe -> nrbufs ++ ; } ret += obuf -> len ; if ( len ) { * obuf = * obuf ; obuf -> offset += obuf -> len ; opipe -> nrbufs ++ ; opipe -> curbuf = ( opipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; } else { * obuf = * obuf ; opipe -> nrbufs ++ ; opipe -> curbuf = ( opipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; },0
1012,"<S2SV_ModStart> -> tokenlen ) { assert (! jv_mem_safe_realloc ( p -> tokenbuf, p -> tokenlen, sizeof ( p -> tokenbuf ) ) ; if (! jv_mem_safe_realloc ( p -> tokenbuf, p -> tokenlen, sizeof ( p -> tokenbuf ) ) ) ; p -> tokenbuf = jv_mem_realloc ( p -> tokenbuf, p -> tokenlen, sizeof ( p -> tokenbuf ) ) ; if (! jv_mem_safe_realloc ( p -> tokenbuf, p -> tokenlen, sizeof ( p -> tokenbuf ), sizeof ( p -> tokenbuf ) ) ) { if (! jv_mem_safe_realloc ( p -> tokenbuf, p -> tokenlen, sizeof ( p -> tokenbuf ) ) ) { jv_mem_realloc ( p -> tokenbuf, p -> tokenlen, sizeof ( p -> tokenbuf ) ) ; p -> tokenlen = 0 ; } if (! jv_mem_safe_realloc ( p -> tokenbuf, p -> tokenlen, sizeof ( p -> tokenbuf ) ) ) { jv_mem_realloc ( p",0
1013,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> : return vpx_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> : return vpx_mse8x8 <S2SV_ModEnd> ; case BLOCK_8X8 <S2SV_ModStart> : return vpx_mse8x8 <S2SV_ModEnd> ; case BLOCK_16X8 <S2SV_ModStart> : return vpx_mse16x8 <S2SV_ModEnd> ; } <S2SV_null>,0
1014,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
1015,<S2SV_ModStart> ; if (! avio_read_le16 ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ; if (! avio_read_le16 ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ; if (! avio_read_le16 ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ; if (! avio_read_le16 ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ; if (! avio_read_le16 ( pb ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ; if (! avio_read_le16 ( pb ) ) return AVERROR_INVALIDDATA <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if (! avio_read_le16 ( pb ) ) return AVERROR_INVALIDDATA ; if (! avio_read_le16 ( pb ) ) return AVERROR_INVALIDDATA <S2SV_ModEnd> ; if ( <S2SV_ModStart> ; if (! avio_read_le16 ( pb ) ) return AVERROR_INVALIDDATA ; if (! avio_read_le16 ( pb ) ) return AVERROR_INVALIDDATA ;,0
1016,<S2SV_ModStart> ( OPJ_UINT32 ) ( <S2SV_ModEnd> ( OPJ_UINT32 ) <S2SV_ModStart> ( OPJ_UINT32 ) ( <S2SV_ModEnd> ( OPJ_UINT32 ) <S2SV_ModStart> ( OPJ_UINT32 ) ( <S2SV_ModEnd> ( OPJ_UINT32 ) <S2SV_ModStart> ( OPJ_UINT32 ) ( <S2SV_ModEnd> ( OPJ_UINT32 ) <S2SV_ModStart> ( OPJ_UINT32 ) ( <S2SV_ModEnd> ( OPJ_UINT32 ) <S2SV_ModStart> ( OPJ_UINT32 ) ( <S2SV_ModEnd> ( OPJ_UINT32 ) <S2SV_ModStart> ( OPJ_UINT32 ) ( <S2SV_ModEnd> ( OPJ_UINT32 ) <S2SV_ModStart> ( OPJ_UINT32 ) ( <S2SV_ModEnd> ( OPJ_UINT32 ) <S2SV_ModStart> ( OPJ_UINT32 ) ( <S2SV_ModEnd> ( OPJ_UINT32 ),0
1017,<S2SV_ModStart> send_pa ) ; if ( padata -> pa_type == KRB5_PADATA_SUBJECT_PUBLIC_KEY && padata -> pa_type == KRB5_PADATA_SUBJECT_PUBLIC_KEY && padata -> pa_type == KRB5_PADATA_SUBJECT_PUBLIC_KEY && padata -> pa_type == KRB5_PADATA_SUBJECT_PUBLIC_KEY && padata -> pa_type == KRB5_PADATA_SUBJECT_PUBLIC_KEY && padata -> pa_type == KRB5_PADATA_SUBJECT_PUBLIC_KEY && padata -> pa_type == KRB5_PADATA_SUBJECT_PUBLIC_KEY && padata -> pa_type == KRB5_PADATA_SUBJECT_PUBLIC_KEY && padata -> pa_type == KRB5_PADATA_SUBJECT_PUBLIC_KEY && padata -> pa_type == KRB5_PADATA_SUBJECT_PUBLIC_KEY && padata -> pa_type == KRB5_SUBJECT_PUBLIC_KEY && padata -> pa_type == KRB5_PADATA_SUBJECT_PUBLIC,0
1018,"<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( count,",1
1019,"<S2SV_ModStart> stratum_port ; if ( strchr ( url, ':' ) ) { applog ( LOG_ERR, ""Denied <S2SV_blank> stratum <S2SV_blank> reconnect <S2SV_blank> request <S2SV_blank> for <S2SV_blank> pool <S2SV_blank> without <S2SV_blank> port <S2SV_blank> \'%s\'"", url ) ; return false ; }",0
1020,"<S2SV_ModStart> 0 ) { if ( f -> page_flag & PAGEFLAG_continued_packet ) return error ( f, VORBIS_invalid_first_page ) ; <S2SV_ModStart> 0 ) { if ( f -> page_flag & PAGEFLAG_continued_packet ) return error ( f, VORBIS_invalid_first_page ) ; return error ( f, VORBIS_invalid_first_page ) ; <S2SV_ModStart> 0 ) { if ( f -> page_flag & PAGEFLAG_continued_packet ) return error ( f, VORBIS_invalid_first_page ) ; return error ( f, VORBIS_invalid_first_page ) ; <S2SV_ModStart> 0 ) { if ( f -> page_flag & PAGEFLAG_continued_packet ) return error ( f, VORBIS_invalid_first_page ) ; return error ( f, VORBIS_invalid_first_page ) ; } <S2SV_ModStart> 0 ) { if ( f -> page_flag & PAGEFLAG_continued_packet ) return error ( f, VORBIS_invalid_first_page ) ; return error ( f, VORBIS_invalid_",0
1021,<S2SV_ModStart> return 0 ; if ( head -> iov_len + head -> iov_len < XDR_QUADLEN ( len ) * 4 ) return 0 ; dlen = head -> iov_len + rqstp -> rq_arg. page_len - hdr ; if ( dlen < XDR_QUADLEN ( len ) * 4 ) return 0 ; rqstp -> rq_vec [ 0 ]. iov_base = ( void * ) p ; rqstp -> rq_vec [ 0 ]. iov_len = dlen ; v = 0 ; while ( len > rqstp -> rq_vec [ v ]. iov_len ) { len -= rqstp -> rq_vec [ v ]. iov_len ; v ++ ; rqstp -> rq_vec [ v ]. iov_base = page_address ( rqstp -> rq_pages [ v ] ) ; rqstp -> rq_vec [ v ]. iov_len = PAGE_SIZE ; },0
1022,<S2SV_ModStart> ) ; struct o2m_cluster * <S2SV_ModEnd> cluster = to_o2nm_cluster_from_node <S2SV_ModStart> - EINVAL ; mutex_lock <S2SV_ModEnd> ( & cluster <S2SV_ModStart> cl_nodes_lock ) ; mutex_unlock <S2SV_ModEnd> ( & cluster <S2SV_ModStart> cl_nodes_lock ) ; mutex_unlock <S2SV_ModEnd> ( & cluster,0
1023,"<S2SV_ModStart> v4l2_buf ) ; if (! vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } <S2SV_ModStart> (! vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } if ( input -> buf_cur_space_left > frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", frame_len ) ; return ; } if ( input -> buf_cur_space_left > frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than",0
1024,<S2SV_ModStart> size ) { if ( size < PREFIX_SIZE ) { zmalloc_oom_handler ( size ) ; return NULL ; },0
1025,<S2SV_ModStart> ssize_t count ; if ( psf_check_file_io ( psf ) ) return 0,0
1026,<S2SV_ModStart> serviceId == EXTRACT_32BITS <S2SV_ModEnd> ( & rxh,0
1027,"<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len > IEEE80211_MAX_SSID_LEN ) { mwifiex_dbg ( adapter, INFO, ""info: <S2SV_blank> ADHOC_S_CMD: <S2SV_blank> SSID <S2SV_blank> = <S2SV_blank> %s\\n"", req_ssid -> ssid ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memcpy ( bss_desc -> ssid. ssid, req_ssid -> ssid, req_ssid -> ssid_len ) ; }",0
1028,"<S2SV_ModStart> ) ) { xfs_trans_log_inode ( dp, XFS_ERROR ( EIO, dp, XFS_ERROR ( EIO, dp, XFS_RANDOM_ATTRFORK ) ) ; return XFS_ERROR ( EIO, dp, XFS_ERROR ( EIO, dp, XFS_ERROR ( EIO, dp, XFS_ERROR ( EIO, dp, XFS_ERROR ( EIO, dp, XFS_ERROR ( dp, XFS_ERROR ( dp, XFS_ERROR ( dp, XFS_ERROR ( EIO, dp, XFS_ERROR ( EIO, dp, XFS_RANDOM_ATTRFORK ) ) ) ) ) ; xfs_trans_log_inode ( dp, XFS_ERROR ( EIO, dp, XFS_ERROR ( EIO, dp, XFS_ERROR ( EIO, dp, XFS_ERROR ( EIO, dp, XFS_ERROR ( dp, XFS_ERROR ( dp, XFS_ERROR ( EIO, dp, XFS_ERROR ( EIO, dp, XFS_ERROR ( EIO, dp, XFS_",0
1029,"<S2SV_ModStart> r ) { return ( ASN1_item_verify ( ASN1_ITEM_rptr ( X509_CINF ), a -> sig_alg, a -> signature, a -> cert_info, r ) ) <S2SV_ModEnd> ; } <S2SV_null>",0
1030,<S2SV_ModStart> 0 ) ; hrtimer_try_to_cancel ( & stime -> hrt ) ;,0
1031,"<S2SV_ModStart> l2cap_conf_rfc rfc = { <S2SV_ModEnd>. mode = <S2SV_ModStart>. mode = L2CAP_MODE_BASIC <S2SV_ModEnd> ; void * <S2SV_ModStart> = L2CAP_MODE_ERTM ; rfc. txwin_size = L2CAP_DEFAULT_TX_WINDOW ; rfc. max_transmit = L2CAP_DEFAULT_MAX_RECEIVE ; rfc. retrans_timeout = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO ) ; rfc. monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; l2cap_add_conf_opt ( & ptr, L2CAP_CONF_RFC, sizeof ( rfc ), ( unsigned long ) & rfc ) <S2SV_ModEnd> ; break ;",0
1032,"<S2SV_ModStart> r ) { if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return ret ; }",0
1033,"<S2SV_ModStart> = - 1 ; if ( s -> chunksize == - 1 ) { av_log ( h, AV_LOG_ERROR, ""chunk <S2SV_blank> size <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", s -> filesize ) ; return err ; }",0
1034,<S2SV_ModStart> u1_nal_ref_idc ) ; if ( ( ps_dec -> u1_nal_ref_idc == 0 ) || ( ps_dec -> u1_nal_ref_idc == 0 ) || ( ps_dec -> u1_nal_ref_idc == 0 ) || ( ( ps_dec -> u1_nal_ref_idc == 0 ) || ( ps_dec -> u1_nal_ref_idc > IDR_SLICE_NAL ) || ( ps_dec -> u1_nal_ref_idc == 0 ) || ( ps_dec -> u1_nal_ref_idc == 0 ) || ( ps_dec -> u1_nal_ref_idc == 0 ) || ( ps_dec -> u1_nal_ref_idc == 0 ) || ( ps_dec -> u1_nal_ref_idc > IDR_SLICE_NAL ) || ( ps_dec -> u1_nal_ref_idc == 0 ) || ( ps_dec -> u1_nal_ref_,0
1035,<S2SV_ModStart> while ( pair!= NULL <S2SV_ModEnd> ) { mprAddItem,0
1036,"<S2SV_ModStart> } err = crypto_rng_setseed <S2SV_ModEnd> ( tfm,",0
1037,<S2SV_ModStart> = uid ; <S2SV_ModEnd> new -> count <S2SV_ModStart> new -> count = 0 <S2SV_ModEnd> ; spin_lock_irq ( <S2SV_ModStart> } if ( <S2SV_ModEnd> ucounts -> count <S2SV_ModStart> ucounts -> count == INT_MAX ) ucounts = NULL ; else ucounts -> count += 1 <S2SV_ModEnd> ; spin_unlock_irq (,1
1038,<S2SV_ModStart> msg_sys. msg_namelen ; msg_sys. msg_namelen = 0 ;,0
1039,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1040,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> prefetch_table ( const <S2SV_ModStart> len ) { if ( len < 8 * 32 ) return - 1 ; <S2SV_ModStart> i ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1041,"<S2SV_ModStart> le16_to_cpu ( eh -> eh_entries ) ; if ( path [ depth ]. p_ext == NULL ) { ext4_error ( inode -> i_sb, ""bad <S2SV_blank> extent <S2SV_blank> address <S2SV_blank> inode: <S2SV_blank> %lu, <S2SV_blank> iblock: <S2SV_blank> %d, <S2SV_blank> depth: <S2SV_blank> %d"", inode -> i_ino, depth ) ; goto out2 ; } <S2SV_ModStart> le16_to_cpu ( eh -> eh_entries [ depth ]. eh_entries ) ; if ( path [ depth ]. p_ext == NULL ) { ext4_error ( inode -> i_sb, ""bad <S2SV_blank> extent <S2SV_blank> address <S2SV_blank> inode: <S2SV_blank> %lu, <S2SV_blank> depth: <S2SV_blank> %d"" ""inode: <S2SV_blank> %lu, <S2SV_blank> iblock: <S2SV_blank> %d, <S2SV_blank> depth: <S2SV_blank> %d"", inode -> i_ino, depth ) ; goto out2 ; } <S2SV_ModStart> le16_to_cpu ( eh -> eh_entries [ depth ]. eh_entries [ depth ]. eh_entries ) ; if ( path [ depth ]. p_ext == NULL ) { ext4_error ( inode -> i_sb, ""bad <S2SV_blank> extent <S2SV_blank> header <S2SV_blank> inode:",0
1042,"<S2SV_ModStart> * open_stateid, fmode_t fmode <S2SV_ModStart> ; open_flags &= ( FMODE_READ | FMODE_WRITE <S2SV_ModEnd> ) ; rcu_read_lock <S2SV_ModStart> = 0 ; if ( fmode & ( FMODE_READ | FMODE_WRITE <S2SV_ModEnd> )!= open_flags <S2SV_ModStart> ( state, fmode & ( FMODE_READ | FMODE_WRITE ) <S2SV_ModEnd> )!= open_flags <S2SV_ModStart> ( state, fmode & ( FMODE_READ | FMODE_WRITE <S2SV_ModEnd> ) ; ret",0
1043,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> width, image -> height ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1044,"<S2SV_ModStart> ) ; return TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",1
1045,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> oidc_scrub_headers ( request_rec,0
1046,"<S2SV_ModStart> * xd, int64_t * out_rate_sum, int64_t * out_dist_sum ) { int i ; int64_t rate_sum = 0 ; int64_t dist_sum = 0 ; <S2SV_ModStart>. vf ( p -> src. buf, p -> src. stride, pd -> dst. buf, pd -> dst. stride, & sse ) ; if ( i == 0 ) x -> pred_sse [ ref ] = sse ; if ( cpi -> speed > 4 ) { int64_t rate ; int64_t dist ; vpx_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ bs ], & rate, & dist ) ; rate_sum += rate ; dist_sum += dist ; } else { int64_t rate ; int64_t dist ; vpx_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ bs ], & rate, & dist ) ; * out_rate_sum = ( int ) rate_sum ; * out_dist_sum = ( int ) dist_sum",0
1047,<S2SV_ModStart> } if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
1048,"<S2SV_ModStart> ) ) ; if ( source_address_length < 0 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size!"", source_address_length ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( source_address_length < 0 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size!"", source_address_length ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( source_address_length < 0 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size!"", source_address_length ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( source_address_length < 0 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size!"", source_address_length ) ) ; return ; } <S2SV_ModStart> ) ) ; if ( source_address_length < 0 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> < <S2SV_blank> min <S2SV_blank> PDU <S2SV_blank> size!"", source_address_length",0
1049,"<S2SV_ModStart>!= '\\0' ) { if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( <S2SV_ModStart> ( * ret_username = krealloc ( username, index + 1, GFP_KERNEL ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ;",0
1050,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> seg ) { return vpx_read_tree <S2SV_ModEnd> ( r, <S2SV_ModStart> -> tree_probs ) <S2SV_ModEnd> ; } <S2SV_null>",0
1051,"<S2SV_ModStart> uint32_t backup_handle ; if ( unlikely ( req -> mip_levels > DRM_VMW_MAX_MIP_LEVELS ) ) return - EINVAL ; size = ttm_round_pot ( sizeof ( * user_srf ) ) + 128 ; ret = vmw_surface_gb_priv_define ( dev, size, req -> svga3d_flags, req -> format, req -> mip_levels, req -> array_size, req -> base_size ) ; if ( unlikely ( ret!= 0 ) ) return ret ; ret = vmw_surface_gb_priv_define ( dev, size, req -> svga3d_flags, req -> format, req -> mip_levels, req -> array_size, req -> base_size, & tmp ) ; if ( unlikely ( ret!= 0 ) ) return ret ; ret = ttm_read_lock ( & dev_priv -> reservation_sem, true ) ; if ( unlikely ( ret!= 0 ) ) return ret ; ret = ttm_read_lock ( & dev_priv -> reservation_sem, true ) ; if ( unlikely ( ret!= 0 ) ) return ret",0
1052,<S2SV_ModStart> <S2SV_null> <S2SV_null> static struct desc_struct <S2SV_ModEnd> * get_desc ( <S2SV_ModStart> SEGMENT_LDT ) { <S2SV_ModEnd> struct ldt_struct * <S2SV_ModStart> ( ldt && <S2SV_ModEnd> sel < ldt <S2SV_ModStart> && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> -> nr_entries ) desc = & ldt -> entries [ sel ] ; mutex_unlock ( & current -> active_mm -> context. lock ) ; return desc <S2SV_ModEnd> ; } # <S2SV_ModStart> ( desc_base > <S2SV_ModEnd> gdt_desc. size <S2SV_ModStart> size ) return NULL ; <S2SV_ModEnd> return ( struct <S2SV_ModStart> NULL ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
1053,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",1
1054,<S2SV_ModStart> struct sctp_sockaddr_entry * laddr = NULL ; union sctp_addr dst_saddr ; __u8 matchlen = 0 ; __u8 bmatchlen <S2SV_ModEnd> ; sctp_scope_t scope <S2SV_ModStart> ) ; } laddr = & t -> ipaddr ; baddr = & t -> ipaddr ; daddr = & t -> ipaddr ; union sctp_addr dst_saddr ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) { fl6 -> daddr = daddr -> v6. sin6_addr ; fl6 -> fl6_dport = daddr -> v6. sin6_port ; fl6 -> flowi6_proto = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> flowi6_oif = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> fl,0
1055,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
1056,"<S2SV_ModStart> buf2 = smb_fdata2 <S2SV_ModEnd> ( ndo,",0
1057,"<S2SV_ModStart> -> protocol_timeout ) { g_source_remove_sync ( client -> priv -> protocol_timeout ) ; client -> priv -> protocol_timeout = 0 ; } else if ( client -> priv -> protocol_timeout < 0 ) { g_debug ( ""GsmXSMPClient: <S2SV_blank> Protocol <S2SV_blank> timeout <S2SV_blank> has <S2SV_blank> expired"" ) ; gsm_client_disconnect ( client ) ; return ; } <S2SV_ModEnd> g_debug ( ""GsmXSMPClient: <S2SV_blank> Initializing <S2SV_blank> client <S2SV_blank> %s"" <S2SV_ModStart> manager_data = client ; * mask_ret |= SmsCloseConnectionProcMask ; callbacks_ret -> close_connection. callback = close_connection_callback ; callbacks_ret -> close_connection. manager_data = client ; * mask_ret |= SmsCloseConnectionProcMask ; callbacks_ret -> close_connection. manager_data = client ; * mask_ret |= SmsSetPropertiesProcMask ; callbacks_ret -> set_properties. manager_data = client ; * mask_ret |= SmsGetPropertiesProcMask ; callbacks_ret -> get_properties. callback = get_properties_callback ; callbacks_ret -> get_properties. manager_data = client ; * mask_ret |=",0
1058,"<S2SV_ModStart> -- n >= 0 <S2SV_ModEnd> &&! ND_TTEST <S2SV_ModStart> -- n >= 0 <S2SV_ModEnd> &&! ND_TTEST <S2SV_ModStart> -- n >= 0 <S2SV_ModEnd> &&! ND_TTEST <S2SV_ModStart> ++ io ) if (! ND_TTEST ( * io ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %c%s:%u"", c, ipaddr_string ( ndo, & io -> id ), EXTRACT_32BITS ( & io -> off ) ) ) ; c = ',' ; } ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( struct pgstate * ) ie ; if ( ie < io ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %c%s:%u"", c, ipaddr_string ( ndo, & io -> id ), EXTRACT_32BITS ( & io -> off ) ) ) ; c = ',' ; } ND_PRINT ( ( ndo, "">"" ) ) ; ps = ( struct pgstate * ) ie ; if (! ND_TTEST ( * io ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %c%s:%u"",",0
1059,"<S2SV_ModStart> ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( interface, KSZ8851_RXQCR, KSZ8851_RXQCR_SDA <S2SV_ModEnd> ) ; ksz8851SetBit <S2SV_ModStart> ( interface, KSZ8851_TXQCR, KSZ8851_TXQCR_METFE <S2SV_ModEnd> ) ; n <S2SV_ModStart> ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK <S2SV_ModEnd> ; if (",0
1060,"<S2SV_ModStart> NULL ) ; rb_ivar_set ( self, rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( ) ), rb_const_get ( ) ), rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( ), rb_const_get ( ) ) ), rb_const_get ( ) ) ), rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_const_get ( rb_",0
1061,"<S2SV_ModStart> assoc_array_ptr_is_leaf ( ptr ) && ops -> compare_object ( assoc_array_ptr_to_leaf ( ptr ), index_key ) ) { pr_devel ( ""replace <S2SV_blank> in <S2SV_blank> free <S2SV_blank> slot <S2SV_blank> %d\\n"", free_slot ) ; edit -> dead_leaf = node -> slots [ free_slot ] ; pr_devel ( ""<--%s() <S2SV_blank> = <S2SV_blank> ok <S2SV_blank> [replace]\\n"", __func__ ) ; return true ; }",0
1062,<S2SV_ModStart>. udpport = 0 <S2SV_ModEnd> ; settings.,1
1063,<S2SV_ModStart> ; # endif # ifdef MONO_HAS_SEMAPHORES g_assert ( mono_domain_get ( ) == mono_get_root_domain ( ) ) ; <S2SV_ModStart> ( ) ; g_assert ( g_slist_is_empty ( g_slist_get ( g_slist_get ( g_slist_get ( g_slist_get ( g_slist_get ( g_slist_get ( ) ) ) ) ) ) ; <S2SV_ModStart> ( ) ; g_assert ( g_slist_is_empty ( g_slist_get ( g_slist_get ( g_slist_get ( g_slist_get ( g_slist_get ( g_slist_get ( g_slist_get ( g_slist_get ( g_slist_get ( g_slist_get ( g_slist_get ( g_slist_get ( g_slist_get ( g_slist_get ( g_slist_get ( g_slist_get ( g_slist_get ( g_slist_get ( g_slist,0
1064,"<S2SV_ModStart>, x_8, x_9, x_a, x_b, x_c, x_d, x_e, x_f ; WORD32 n00, n10, n11, n12, n13, n23, n33 ; WORD32 n00, n01, n10, n11, n12, n13, n23, n33 ; WORD32 n30 = x_0 + x_2 ; WORD32 n01 = x_1 + x_3 ; n10 = x_0 - x_2 ; n01 = x_1 + x_3 ; n11 = x_2 + x_4 ; n12 = x_1 + x_6 ; n13 = x_2 + x_7 ; n03 = x_1 + x_3 ; n13 = x_4 + x_6 ; n23 = x_5 + x_7 ; n30 = x_0 - x_2 ; n01 = x_1 + x_3 ; n11 = x_1 - x_3 ; n12 = x_2 + x_4 ; n13 = x_5 + x_6 ; n13",0
1065,<S2SV_ModStart> clips_ptr ) { if ( num_clips < 0 || num_clips > DRM_MODE_FB_DIRTY_MAX_CLIPS ) { ret = - EINVAL ; goto out_err1 ; },1
1066,<S2SV_ModStart> ; if ( pmd_none_or_trans_huge_or_clear_bad <S2SV_ModEnd> ( pmd ),1
1067,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1068,"<S2SV_ModStart> case 'l' : r_anal_esil_to_reil_setup ( esil, <S2SV_ModEnd> romem, stats <S2SV_ModStart> romem, stats ) ; r_anal_esil_to_reil_setup ( esil, <S2SV_ModEnd> romem, stats <S2SV_ModStart> stats ) ; r_anal_esil_to_reil_setup ( esil, <S2SV_ModEnd> romem, stats <S2SV_ModStart> case 'l' : r_anal_esil_to_reil_setup ( esil, <S2SV_ModEnd> romem, stats <S2SV_ModStart> stats ) ; r_anal_esil_to_reil_setup ( esil, <S2SV_ModEnd> romem, stats <S2SV_ModStart> stats ) ; r_anal_esil_to_reil_setup ( esil, <S2SV_ModEnd> romem, stats <S2SV_ModStart> case 'l' : r_anal_esil_to_reil_setup ( esil, <S2SV_ModEnd> romem, stats <S2SV_ModStart> case 'l' : r_anal_esil_to_reil_setup ( esil, <S2SV_ModEnd> romem, stats <S2SV_ModStart> stats ) ; r_anal_esil_to_reil_setup ( esil, <S2SV_ModEnd> romem, stats",0
1069,"<S2SV_ModStart>, frames ; <S2SV_ModEnd> if ( argc <S2SV_ModStart> ) ; usage ( argv [ 1 ] ) ; return 1 ; } if ( argc < 4 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( argv [ 2 ], & width, & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } if (! parse_dim ( argv [ 3 ], & target_width, & target_height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpin = fopen ( fin, ""rb"" ) ; if ( fpin == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> read\\n"", fin ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpout = fopen ( fout, ""wb"" ) ; if ( fpout == NULL ) { printf",0
1070,"<S2SV_ModStart> + DSPQ_DATA_BUFF ; u16 wTmp ; snd_msnd_eval_dsp_msg ( chip, readw ( pwDSPQData + 2 * readw ( chip -> DSPQ + JQS_wHead ) ) ) ; while ( readw ( chip -> DSPQ + JQS_wTail )!= readw ( chip -> DSPQ + JQS_wHead ) ) { if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip -> DSPQ + JQS_wHead ) + 1 ; if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip -> DSPQ + JQS_wHead ) + 1 ; if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip -> DSPQ + JQS_wHead ) + 1 ; if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip -> DSPQ + J",0
1071,<S2SV_ModStart> OPCODE_DESC * opcode_desc = NULL <S2SV_ModStart> == R_ANAL_OP_TYPE_UNK ) { op -> family = R_ANAL_OP_FAMILY_UNKNOWN ; op -> type = R_ANAL_OP_TYPE_UNK ; } else if ( ( addr & UT64_MAX_MASK ) == UT64_MAX_MASK ) { op -> family = R_ANAL_OP_FAMILY_UNKNOWN ; op -> type = R_ANAL_OP_TYPE_UNK ; } else if ( ( addr & UT64_MAX_MASK ) == UT64_MAX_MASK ) { op -> family = R_ANAL_OP_FAMILY_UNKNOWN ; op -> type = R_ANAL_OP_TYPE_UNK ; } else if ( ( addr & UT64_MAX_MASK ) == UT64_MAX_MASK ) { op -> family = R_ANAL_OP_FAMILY_UNKNOWN ; op -> type = R_ANAL_OP_TYPE_UNK ; } else if ( ( addr & UT64_MAX_MASK ) == UT64_MAX_MASK ) { op -> type = R_ANAL_OP_TYPE,0
1072,<S2SV_ModStart> acpi_status status ; struct acpi_namespace_node * node ; <S2SV_ModStart> * prev ; struct acpi_namespace_node * next ; next = acpi_gbl_module_code_list ; while ( next ) { prev = next ; next = next -> method. mutex ; } <S2SV_ModEnd> # ifdef ACPI_EXEC_APP <S2SV_ModStart> * prev ; next = acpi_gbl_module_code_list ; while ( next ) { prev = next ; next = next -> method. mutex ; } <S2SV_ModEnd> # endif acpi_ns_delete_namespace_subtree <S2SV_ModStart> ( acpi_gbl_root_node ) ; status = acpi_ut_acquire_mutex ( ACPI_MTX_NAMESPACE ) ; if ( ACPI_FAILURE ( status ) ) { status = acpi_ut_release_mutex ( ACPI_MTX_NAMESPACE ) ; if ( status ) { return_VOID ; } status = acpi_ns_delete_namespace_subtree ( node ) ; if ( ACPI_FAILURE ( status ) ) { return_VOID ; } status = acpi_ut_acquire_mutex ( ACPI_MTX_NAMESPACE ) ; if (,0
1073,"<S2SV_ModStart> = GF_FALSE ; # ifndef WIN32 dlopen ( the_url, O_RDONLY | O_DIRECTORY | O_CREAT | O_NOFOLLOW | O_NOCTTY | O_NOCTTY | O_NOCTTY | O_NOCTTY | O_NOCTTY | O_NOCTTY | O_NOCTTY <S2SV_ModEnd> ) ; # <S2SV_ModStart> ifndef WIN32 dlopen ( the_url, O_DIRECTORY | O_NOFOLLOW | O_NOCTTY <S2SV_ModEnd> ) ; # <S2SV_ModStart> ifndef WIN32 dlopen ( the_url, O_RDONLY | O_NOFOLLOW | O_NOCTTY | O_NOCTTY | O_NOCTTY <S2SV_ModEnd> ) ; # <S2SV_ModStart> ifndef WIN32 dlopen ( the_url, O_DIRECTORY | O_NOCTTY <S2SV_ModEnd> ) ; # <S2SV_ModStart> ifndef WIN32 dlopen ( the_url, O_DIRECTORY | O_NOFOLLOW | O_NOCTTY <S2SV_ModEnd> ) ; # <S2SV_ModStart> ifndef WIN32 dlopen ( the_url, O_RDONLY | O_NOFOLLOW | O_NOCTTY <S2SV_ModEnd> ) ; #",0
1074,<S2SV_ModStart> num_fields ) { <S2SV_ModEnd> _Py_IDENTIFIER ( _attributes,0
1075,<S2SV_ModStart> vpx_codec_alg_priv * priv <S2SV_ModEnd> ; vpx_codec_enc_cfg_t * <S2SV_ModStart> -> priv ) { vpx_codec_alg_priv_t * priv <S2SV_ModEnd> ; struct vpx_codec_enc_cfg_t <S2SV_ModStart> enc ) { priv <S2SV_ModEnd> = calloc ( <S2SV_ModStart> -> base ; priv -> sz = sizeof ( * priv <S2SV_ModEnd> ) ; ctx <S2SV_ModStart> enc = & priv <S2SV_ModEnd> -> cfg ; <S2SV_ModStart> i ++ ) ; priv <S2SV_ModEnd> -> vp8_cfg = <S2SV_ModStart>. cfg ; priv <S2SV_ModEnd> -> vp8_cfg. <S2SV_ModStart>. cfg ; priv <S2SV_ModEnd> -> vp8_cfg. <S2SV_ModStart> ; priv -> vp8_cfg. pkt_list = & priv -> pkt_list. head ; priv -> cx_data_sz = 32768 ; if ( priv -> cx_data_sz < 32768 ) priv -> cx_data_sz = 32768 ; if ( priv -> cx_data_sz < 32768 ) priv -> cx_data_sz = 32768 ; if ( priv -> cx_data_sz < 32768 ) priv -> cx_data_sz = 32768 ; if ( priv -> cx_data_sz < 32768 ) priv -> cx_data_sz = 32768,0
1076,"<S2SV_ModStart> error ) { xfs_trans_log_inode ( args -> trans, dp, XFS_ERROR ( EIO ), dp, XFS_ILOG_CORE ) ; xfs_da_shrink_inode ( args, 0, bp ) ; xfs_idata_realloc ( dp, - size, XFS_ATTR_FORK ) ; xfs_bmap_local_to_extents_empty ( dp, XFS_ILOG_CORE ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ERROR ( EIO ), dp, XFS_ILOG_CORE ) ; xfs_da_shrink_inode ( args, 0, bp ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE ) ; xfs_trans_log_inode ( args -> trans, XFS_ILOG_CORE ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ERROR ( EIO ), dp, XFS_ILOG_CORE ) ; xfs_trans_log_inode",0
1077,"<S2SV_ModStart> ; } if ( ( ret = s -> decode ( gb, rc, cumfr, cnt_c, totfr ) ) < 0 ) return ret ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; if ( totfr > BOT ) { totfr = 0 ; for ( i = 0 ; i < 16 ; i ++ ) { unsigned nc = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] = nc ; pixel -> lookup [ i ] = nc ; totfr += nc ; } for ( i = 0 ; i < 16 ; i ++ ) { unsigned sum = 0 ; unsigned i16_17 = i << 4 ; for ( j = 0 ; j < 16 ; j ++ ) sum += pixel -> freq [ i16_17 + j ] ; pixel -> lookup [ i ] = sum ; } for ( i = 0 ; i < 16 ; i ++ ) { unsigned sum = 0 ; unsigned i16_17 = i << 4 ; for ( j = 0 ; j < 16 ; j ++ ) sum += pixel -> freq [ i16_17 + j ] ; pixel -> lookup [ i",0
1078,"<S2SV_ModStart> err ; err = nla_parse_nested ( attrs, TIPC_NLA_SOCK_MAX, attrs, tipc_nl_sock_policy ) ; if ( err ) return err ; err = nla_parse_nested ( sock, TIPC_NLA_SOCK_MAX, attrs [ TIPC_NLA_SOCK ], tipc_nl_sock_policy ) ; if ( err ) return err ; if (! sock [ TIPC_NLA_SOCK_REF ] ) return - EINVAL ; tsk_portid = nla_get_u32 ( sock [ TIPC_NLA_SOCK_REF ] ) ; if (! sock [ TIPC_NLA_SOCK_REF ] ) return - EINVAL ; <S2SV_ModStart> - EINVAL ; lock_sock ( & tsk -> sk ) ; err = __tipc_nl_list_sk_publ ( skb, cb, tsk, & last_publ ) ; if (! err ) done = 1 ; release_sock ( & tsk -> sk ) ; sock_put ( & tsk -> sk ) ;",0
1079,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> return 0 ; } if (! ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count = 1 ; } if (! ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count = 1 ; } if (! ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count = 1 ; } if (! ctx -> fragments. enabled ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count = 1 ; } if (! ctx,0
1080,<S2SV_ModStart> = v ; if (! IS_ERR ( vma ) ),1
1081,"<S2SV_ModStart> buffer ; length = le16_to_cpu ( cap -> bLength ) ; if ( total_len < length ) { dev_err ( ddev, ""unable <S2SV_blank> to <S2SV_blank> get <S2SV_blank> BOS <S2SV_blank> descriptor <S2SV_blank> set\\n"" ) ; ret = - ENOMSG ; goto err ; } dev -> bos -> desc = ( struct usb_bos_descriptor * ) buffer ; ret = usb_get_descriptor ( dev, USB_DT_BOS, 0, buffer, total_len ) ; if ( ret < total_len ) { dev_err ( ddev, ""unable <S2SV_blank> to <S2SV_blank> get <S2SV_blank> BOS <S2SV_blank> descriptor <S2SV_blank> set\\n"" ) ; ret = - ENOMSG ; goto err ; } dev -> bos -> desc = ( struct usb_bos_descriptor * ) buffer ; ret = usb_get_descriptor ( dev, USB_DT_BOS, 0, buffer, total_len ) ; if ( ret < total_len ) { dev_err ( ddev, ""unable <S2SV_blank> to <S2SV_blank> get <S2SV_blank> BOS <S2SV_blank> descriptor <S2SV_blank> set\\n"" ) ; ret = - ENOMSG ; goto err ; } length = cap -> bLength ; if ( total_len < length ) break",0
1082,<S2SV_ModStart> task_struct * task <S2SV_ModEnd> ; file_sb_list_del (,0
1083,"<S2SV_ModStart> EIO ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } fe",0
1084,"<S2SV_ModStart> data ) { uint16_t status ; <S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> ) & MISTAT_BUSY <S2SV_ModStart> ( interface, ENC28J60_MISTAT <S2SV_ModEnd> )!= 0",0
1085,<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline int <S2SV_ModEnd> bad_format_imginfo ( char <S2SV_ModStart> fmt ) { <S2SV_ModEnd> int n =,0
1086,"<S2SV_ModStart> sk_forward_alloc ) ; rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ;",0
1087,<S2SV_ModStart>! saw_digit ) break ; <S2SV_ModStart>! saw_digit ) break ; <S2SV_ModStart>! saw_digit ) break ; <S2SV_ModStart>! saw_digit ) break ; <S2SV_ModStart>! saw_digit ) break ; <S2SV_ModStart>! saw_digit ) break ; <S2SV_ModStart>! saw_digit ) break ; <S2SV_ModStart>! saw_digit ) break ; <S2SV_ModStart>! saw_digit ) break ; <S2SV_ModStart>! saw_digit ) break ; <S2SV_ModStart> += '0' ; if ( result == INT_MAX ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX ) { too_large =,0
1088,<S2SV_ModStart> = probe ; name_loc -> namelen = cpu_to_be16 ( XFS_LBSIZE ( args -> dp -> i_mount ) ) ; name_rmt -> namelen = cpu_to_be16 ( XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args -> dp -> i_mount ) ) ; name_loc -> namelen = cpu_to_be16 ( XFS_LBSIZE ( args -> dp -> i_mount ) ) ; name_rmt -> namelen = cpu_to_be16 ( XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_LBSIZE ( args -> dp -> i_mount ) ) ; name_rmt -> namelen = cpu_to_be16 ( XFS_LBSIZE ( args -> dp -> i_mount ) - XFS_,0
1089,"<S2SV_ModStart> ( ""DefragIPv4NoDataTest"", DefragIPv4NoDataTest ) ; UtRegisterTest ( ""DefragIPv4TooLargeTest"", DefragIPv4TooLargeTest ) ; UtRegisterTest ( ""IPV6DefragInOrderSimpleTest"", IPV6DefragInOrderSimpleTest ) ; UtRegisterTest ( ""IPV6DefragReverseSimpleTest"", IPV6DefragReverseSimpleTest ) ; UtRegisterTest ( ""IPV6DefragInOrderSimpleTest"", IPV6DefragInOrderSimpleTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakBsdTest"", IPV6DefragSturgesNovakLinuxTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakWindowsTest"", IPV6DefragSturgesNovakWindowsTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakFirstTest"", IPV6DefragSturgesNovakFirstTest ) ; UtRegisterTest ( ""IPV6DefragSturgesNovakLastTest"", IPV6DefragSturgesNovak",0
1090,<S2SV_ModStart> if ( object_data && object_length,0
1091,"<S2SV_ModStart> = 0 ; if ( ( int ) shdr -> sh_link + 1 > bin -> ehdr. e_shnum ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( ( int ) shdr -> sh_link + 1 > bin -> ehdr. e_shnum ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( ( int ) shdr -> sh_link + 1 > bin -> ehdr. e_shnum ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( ( int ) shdr -> sh_link + 1 > bin -> ehdr. e_shnum ) ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; }",0
1092,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> separator!= NULL ) { if ( separator == NULL ) return ERROR_INVALID_SYNTAX ; name = strTrimWhitespace ( token ) ; value = strTrimWhitespace ( separator + 1 ) ; n = osStrlen ( value ) ; if ( n > 0 && value [ n - 1 ] == \'\\""\' ) value [ n - 1 ] = '\\0' ; if ( value [ 0 ] == \'\\""\' ) value [ n - 1 ] = '\\0' ; if ( n > 0 && value [ n - 1 ] == \'\\""\' ) value [ n - 1 ] == \'\\""\' ) value [ n - 1 ] = '\\0' ; if ( value [ 0 ] == \'\\""\' ) value [ n - 1 ] = '\\0' ; if ( n > 0 && value [ n - 1 ] == \'\\""\' ) value [ n - 1 ] == \'\\""\' ) value [ n - 1 ] = '\\0' ; if ( n > 0 && value [ n - 1 ] == \'\\""\' ) value [ n - 1 ] == \'\\""\' ) value [ n - 1 ] = '\\0' ; if ( value [ 0",0
1093,"<S2SV_ModStart> u8 label_len ; if ( j + label_len > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len + 1 > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len + 1 > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len + 1 > length ) return - 1 ; <S2SV_ModStart> - 1 ; if ( j + label_len + 1 > length ) return - 1 ; <S2SV_ModStart> + j, label_len + 1 <S2SV_ModEnd> ) ; cp",0
1094,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpAcc ( TIFF <S2SV_ModStart> ( cc % <S2SV_ModEnd> ( bps * <S2SV_ModStart> stride ) ) == 0 ) ; if (! tmp ) return - 1 ; <S2SV_ModStart> tmp ) ; <S2SV_ModEnd> while ( count <S2SV_ModStart> stride ) ) { if ( count > stride ) { REPEAT4 ( stride, cp [ stride ] = ( unsigned char ) ( cp [ stride ] + cp [ 0 ] ) & 0xff ; cp ++ ) count -= stride ; } else { REPEAT4 ( stride, cp [ stride ] = ( unsigned char ) ( cp [ stride ] + cp [ 0 ] ) & 0xff ) ; } _TIFFmemcpy ( tmp, cp0, cc ) ; cp = ( uint8 * ) cp0 ; for ( count = 0 ; count < wc ; count ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { # if WORDS_BIGENDIAN cp [ bps * count + byte ] = tmp [ ( bps - byte - 1 ) * wc + count ] ; # else cp [ bps * count + byte ] = tmp [ ( bps - byte - 1 ) *",0
1095,"<S2SV_ModStart> ) ) { if ( unlikely (! vma -> vm_ops -> fault ) ) return do_fault ( mm, vma, address, pte, pmd, flags, entry ) ; return do_anonymous_page ( mm, vma, address, pte, pmd, flags ) ; } if ( pte_protnone ( entry ) ) return do_numa_page ( mm, vma, address, pte, pmd, flags ) ; if ( flags & FAULT_FLAG_WRITE ) { if (! pte_write ( entry ) ) return do_wp_page ( mm, vma, vma, address, pte, pmd, ptl, entry ) ; } entry = pte_mkyoung ( entry ) ; if ( ptep_set_access_flags ( vma, address, pte, entry, flags & FAULT_FLAG_WRITE ) ) { update_mmu_cache ( vma, address, pte ) ; } else { if ( flags & FAULT_FLAG_WRITE ) flush_tlb_fix_spurious_fault ( vma, address, pte ) ; }",0
1096,"<S2SV_ModStart> s ) { return safe_calloc <S2SV_ModEnd> ( strlen ( <S2SV_ModStart> + 1 ), GFP_KERNEL ) <S2SV_ModEnd> ; } <S2SV_null>",0
1097,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1098,"<S2SV_ModStart> ; next_line = strchr ( pos, '\\n' ) ; if (! next_line ) { ret = - EINVAL ; goto out ; } next_line = strchr ( pos, '\\n' ) ; if (! next_line ) { ret = - EINVAL ; goto out ; } pos = skip_spaces ( pos ) ; extent -> upper_first = simple_strtoul ( pos, & pos, 10 ) ; if (! isspace ( * pos ) ) goto out ; pos = skip_spaces ( pos ) ; if (! isspace ( * pos ) ) goto out ; extent -> count = simple_strtoul ( pos, & pos, 10 ) ; if (! isspace ( * pos ) ) { ret = - EINVAL ; goto out ; } pos = skip_spaces ( pos ) ; extent -> upper_first = simple_strtoul ( pos, & pos, 10 ) ; if (! isspace ( * pos ) ) goto out ; pos = skip_spaces ( pos ) ; extent -> count = simple_strtoul ( pos, & pos, 10 ) ; if (! isspace ( * pos ) ) goto out ;",0
1099,"<S2SV_ModStart> -> length ]. attr_values [ i ] = r_uleb128 ( buf, buf_end - buf, & abbr_code ) ; if (! cu -> length ) { eprintf ( ""Warning: <S2SV_blank> malformed <S2SV_blank> dwarf <S2SV_blank> attribute <S2SV_blank> length <S2SV_blank> doesn\'t <S2SV_blank> match <S2SV_blank> length\\n"" ) ; break ; } <S2SV_ModEnd> cu -> dies <S2SV_ModStart> -> length ]. attr_values [ i ] = r_uleb128 ( buf, buf_end - buf, & abbr_code ) ; if (! cu -> length ) { eprintf ( ""Warning: <S2SV_blank> malformed <S2SV_blank> dwarf <S2SV_blank> attribute <S2SV_blank> length <S2SV_blank> doesn\'t <S2SV_blank> match <S2SV_blank> length\\n"" ) ; break ; }",0
1100,"<S2SV_ModStart> b_go ) { if ( p_enc -> fmt_in. i_codec!= p_enc -> fmt_out. i_codec ) { msg_Err ( p_enc, ""Unsupported <S2SV_blank> codec <S2SV_blank> %d"", p_enc -> fmt_in. i_codec ) ; return NULL ; } <S2SV_ModStart> b_go ) { if ( p_enc -> fmt_in. i_codec!= p_enc -> fmt_out. i_codec ) { msg_Err ( p_enc, ""Unsupported <S2SV_blank> codec <S2SV_blank> %d"", p_enc -> fmt_in. i_codec ) ; return NULL ; } else if ( p_enc -> fmt_in. i_codec!= p_enc -> fmt_out. i_codec ) { msg_Err ( p_enc, ""Unsupported <S2SV_blank> codec <S2SV_blank> %d"", p_enc -> fmt_in. i_codec ) ; return NULL ; } else { if ( p_enc -> fmt_in. i_codec!= p_enc -> fmt_out. i_codec ) { msg_Err ( p_enc, ""Unsupported <S2SV_blank> codec <S2SV_blank> %d"", p_enc -> fmt_in. i_codec )",0
1101,"<S2SV_ModStart> ) ) { if (! mp_path_exists ( mf -> names [ count ] ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ count ] ) ; break ; } <S2SV_ModStart> ) ) { if (! mp_path_exists ( mf -> names [ count ] ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ count ] ) ; } else { mp_info ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> names [ count ] ) ; }",0
1102,"<S2SV_ModStart> ) ) ; if ( flow & 0x01 ) ND_PRINT ( ( ndo, ""flowlabel <S2SV_blank> 0x%02x, <S2SV_blank> "", flow & 0x01 ) ) ; if ( flow & 0x0200000 ) ND_PRINT ( ( ndo, ""class <S2SV_blank> 0x%02x, <S2SV_blank> "", flow & 0x0200000 ) >> 20 ) ; if ( flow & 0x000fffff ) ND_PRINT ( ( ndo, ""flowlabel <S2SV_blank> 0x%06x, <S2SV_blank> "", flow & 0x000fffff ) ) ; if ( flow & 0x00ffffff ) ND_PRINT ( ( ndo, ""flowlabel <S2SV_blank> 0x%06x, <S2SV_blank> "", flow & 0x00ffffff ) ) ; if ( flow & 0x00ffffff ) ND_PRINT ( ( ndo, ""flowlabel <S2SV_blank> 0x%06x, <S2SV_blank> "", flow & 0x00ffffff ) ) ; if ( flow & 0x00ffffff ) ND_PRINT ( ( ndo, ""flowlabel <S2SV_blank> 0x%06x, <S2SV_blank> "", flow & 0x00ffffff ) ) ; if ( flow & 0x00ffffff )",0
1103,<S2SV_ModStart> 4 ) ; if ( idx + 4 > len ) return NULL ; <S2SV_ModStart> ) ; for ( j = 0 ; j < ( a -> names [ i ]. len >> 1 ) ; j ++ ) a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ; <S2SV_ModStart> ) ; for ( j = 0 ; j < a -> names [ i ]. len >> 1 ; j ++ ) a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len <S2SV_ModStart> ) ; for ( j = 0 ; j < a -> names [ i ]. len >> 1 ; j ++ ) a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len >> 1 ) ; j ++ ) a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a,0
1104,"<S2SV_ModStart> EIO ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 16 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } fe",0
1105,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
1106,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
1107,"<S2SV_ModStart> ( ) ; strncat <S2SV_ModEnd> ( t1_buf_array,",0
1108,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; if ( ctx -> frame_parallel_decode ) { VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; <S2SV_ModStart> * fb ; YV12_BUFFER_CONFIG * yuvconfig ; yuvconfig2image ( & data -> img, yuvconfig, NULL ) ; return VPX_CODEC_OK ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1109,"<S2SV_ModStart> ctxt ) ; if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { ops -> get_msr ( ctxt, MSR_EFER, & efer ) ; setup_syscalls_segments ( ctxt, & cs, & ss ) ; } else if ( efer & ( X86EMUL_MODE_PROT64 | X86EMUL_MODE_PROT32 | X86EMUL_MODE_PROT64 ) ) { ops -> get_msr ( ctxt, MSR_EFER, & efer ) ; ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, ss_sel, & ss, 0, VCPU_SREG_SS ) ; if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { ops -> get_msr ( ctxt, MSR_SYSCALL_MASK, & msr_data ) ; ctxt -> eflags &= ~ ( msr_data | EFLG_RF ) ; } else { ops -> get_msr ( ctxt, MSR_SYSCALL",0
1110,"<S2SV_ModStart> + 1 ; if ( data_size == 0 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""No <S2SV_blank> image <S2SV_blank> content <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> + 1 ; if ( data_size == 0 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""No <S2SV_blank> image <S2SV_blank> content <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> + 1 ; if ( data_size == 0 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""No <S2SV_blank> image <S2SV_blank> content <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> + 1 ; if ( data_size == 0 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""No <S2SV_blank> image <S2SV_blank> content <S2SV_blank> found.\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> + 1 ; if ( data_size == 0 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""No <S2SV_blank> image <S2SV_blank> content <S2SV_blank> found.\\n"" ) ; return AVER",0
1111,"<S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == exprlist ) { expr_ty e = ast_for_testlist ( c, CHILD ( n, 0 ) ) ; if (! e ) return NULL ; return Expr ( e, LINENO ( n ), n -> n_col_offset, n -> n_end_lineno, n -> n_end_col_offset, c -> c_arena ) ; } else if ( TYPE ( CHILD ( n, 1 ) ) == testlist ) expr1 = ast_for_testlist ( c, CHILD ( n, 0 ) ) ; else expr1 = ast_for_expr ( c, ch ) ; if (! expr1 ) return NULL ; switch ( expr1 -> kind ) { case Name_kind : case Attribute_kind : case Subscript_kind : break ; default : ast_error ( c, ch, ""illegal <S2SV_blank> expression <S2SV_blank> for <S2SV_blank> augmented <S2SV_blank> assignment"" ) ; return NULL ; } ch = CHILD ( n, 2 ) ; if (! set_context ( c, expr1, Store, ch ) ) return NULL ; switch ( expr1 -> kind ) { case",0
1112,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> 16 ; unsigned char * mc_running_avg_y = mc_running_avg -> y_buffer + y_offset ; int mc_avg_y_stride = mc_running_avg -> y_stride ; unsigned char * running_avg_y = running_avg -> y_buffer + y_offset + mc_running_avg -> y_stride ; int avg_y_stride = running_avg -> y_stride ; int r, c, i ; int sum_diff = 0 ; int adj_val [ 3 ] = { 3, 4, 6 } ; if ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) { for ( r = 0 ; r < 16 ; ++ r ) { for ( i = 0 ; i < 3 ; ++ i ) adj_val [ i ] += 1 ; } for ( r = 0 ; r < 16 ; ++ r ) { for ( c = 0 ; c < 16 ; ++ c ) { int diff = mc_running_avg_y [ c ] - sig [ c ] ; absdiff = abs ( diff",0
1113,"<S2SV_ModStart> ) ; } if ( reqPtr -> avail == 0u ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100 <S2SV_blank> continue"" ) ; return SOCK_MORE ; } <S2SV_ModStart> ) ; } if ( reqPtr -> avail == 0u ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100 <S2SV_blank> continue"" ) ; return SOCK_MORE ; }",0
1114,<S2SV_ModStart> = 0 ; if ( xtregs -> cp0 >= sizeof ( xtregs_coprocessor_t ) ) return - EINVAL,0
1115,<S2SV_ModStart> size ) ; if ( message -> length < 0 ) { message -> length = 0 ; error = ERROR_TIMEOUT ; } else { message -> srcIpAddr = queueItem -> srcIpAddr ; message -> srcPort = queueItem -> srcPort ; message -> destIpAddr = queueItem -> destIpAddr ; message -> ttl = queueItem -> ancillary. ttl ; # if ( ETH_SUPPORT == ENABLED ) message -> srcMacAddr = queueItem -> ancillary. srcMacAddr ; # endif # if ( ETH_PORT_TAGGING_SUPPORT == ENABLED ) message -> switchPort = queueItem -> ancillary. port ; # endif # if ( ETH_TIMESTAMP_SUPPORT == ENABLED ) message -> timestamp = queueItem -> ancillary. timestamp ; # endif,0
1116,"<S2SV_ModStart> xop ) { <S2SV_ModEnd> if ( xop <S2SV_ModStart> == XCOL_SOURCE_RECV_OP ) { <S2SV_ModStart> dst_dev ; } else remote_dev = xop -> src_dev ; pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" "" <S2SV_blank> remote_dev: <S2SV_blank> %p <S2SV_blank> remote_dev->dev_group: <S2SV_blank> %p\\n"", remote_dev, & remote_dev -> dev_group. cg_item ) ; if ( remote_dev ) { pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" "" <S2SV_blank> remote_dev: <S2SV_blank> %p <S2SV_blank> remote_dev->dev_group: <S2SV_blank> %p\\n"", remote_dev, & remote_dev -> dev_group. cg_item ) ; target_undepend_item ( & remote_dev -> dev_group. cg_item ) ; }",0
1117,"<S2SV_ModStart> - 1 ) { ret = setsockopt ( sock, IPPROTO_IPV6, IPV6_MULTICAST_HOPS, & val, sizeof ( val ) ) ; if ( ret == - 1 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_MULTICAST_HOPS."" ) ; err = - errno ; goto close_sock ; }",0
1118,"<S2SV_ModStart> int error ; struct mb2_cache * ext2_mb_cache = EXT2_SB ( sb ) -> s_mb_cache <S2SV_ModStart> get_bh ( new_bh ) ; ext2_mb_cache_insert ( EXT2_SB ( sb ) -> s_mb_cache <S2SV_ModStart> new_bh ) ; ext2_mb_cache_insert ( EXT2_SB ( sb ) -> s_mb_cache, new_bh ) ; unlock_buffer ( new_bh ) ; } else if ( ext2_xattr_cache_find ( inode, header ) == NULL ) { new_bh = NULL ; get_bh ( new_bh ) ; ext2_mb_cache_insert ( EXT2_SB ( sb ) -> s_mb_cache, new_bh ) ; ext2_mb_cache_insert ( EXT2_SB ( sb ) -> s_mb_cache, new_bh ) ; ext2_mb_cache_insert ( EXT2_SB ( sb ) -> s_mb_cache, new_bh ) ; ext2_mb_cache_insert ( EXT2_SB ( sb ) ->",0
1119,"<S2SV_ModStart> crypto_report_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp. <S2SV_ModStart>. type, ""compression"", sizeof ( rcomp. type ) <S2SV_ModEnd> ) ; if",1
1120,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> (! vp9_set_active_map <S2SV_ModEnd> ( ctx ->",0
1121,"<S2SV_ModStart> { rc = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( rc <S2SV_ModEnd> ) return rc <S2SV_ModStart> return rc ; <S2SV_ModEnd> } break ;",0
1122,"<S2SV_ModStart> ""ImproperImageHeader"" ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1123,"<S2SV_ModStart> size, 0 <S2SV_ModEnd> ) ; if",1
1124,"<S2SV_ModStart> ) { size_t <S2SV_ModEnd> maxlen = 3 <S2SV_ModStart> len ) ; if ( state -> end - str < len ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> URL: <S2SV_blank> \'%s\'"", state -> ptr ) ; efree ( state ) ; return NULL ; } <S2SV_ModStart> ( state ) ; if (! parse_path ( state ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> URL: <S2SV_blank> \'%s\'"", state -> ptr ) ; efree ( state ) ; return NULL ; } if (! parse_query ( state ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> URL: <S2SV_blank> \'%s\'"", state -> ptr ) ; efree ( state ) ; return NULL ; } if (! parse_fragment ( state ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> URL: <S2SV_blank> \'%s\'"", state -> ptr ) ;",0
1125,"<S2SV_ModStart> SUCCESS ) { if ( convert_to_long ( * var ) < 0 ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Convert <S2SV_blank> to <S2SV_blank> long"" ) ; RETURN_FALSE ; } <S2SV_ModStart> convert_to_long ( * var <S2SV_ModEnd> ) ; points <S2SV_ModStart> i ]. y <S2SV_ModEnd> = Z_LVAL_PP ( <S2SV_ModStart> var ) ; <S2SV_ModEnd> } if ( <S2SV_ModStart> SUCCESS ) { if ( convert_to_long ( * var ) < 0 ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Convert <S2SV_blank> to <S2SV_blank> long"" ) ; RETURN_FALSE ; } <S2SV_ModStart> SUCCESS ) { if ( convert_to_long ( * var ) < 0 ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Convert <S2SV_blank> to <S2SV_blank> long"" ) ; RETURN_FALSE ; } if ( convert_to_long ( * var ) < 0 ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Convert <S2SV_blank> to <S2SV_blank> long"" ) ; RETURN_FALSE ; } <S2SV_ModStart> SUCCESS ) { if ( convert_to_long ( * var )",0
1126,<S2SV_ModStart> ; sig_none = <S2SV_ModEnd> timr -> it_sigev_notify <S2SV_ModStart> timr -> it_sigev_notify <S2SV_ModEnd> == SIGEV_NONE ;,1
1127,"<S2SV_ModStart> AcquireQuantumMemory ( imsx, imsy <S2SV_ModEnd>, 1 ) <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx, dmsy <S2SV_ModEnd> ) ; if <S2SV_ModStart> AcquireQuantumMemory ( dmsx <S2SV_ModEnd>, dmsy <S2SV_ModEnd> ) ;",0
1128,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; if ( ctx -> frame_parallel_decode ) { VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; <S2SV_ModStart> YV12_BUFFER_CONFIG sd ; vpx_ref_frame_t * const frame_worker_data = ( vpx_ref_frame_t * ) worker -> data1 <S2SV_ModEnd> ; return vp9_copy_reference_dec <S2SV_ModStart> vp9_copy_reference_dec ( ctx <S2SV_ModEnd> -> pbi, <S2SV_ModStart> VP9_REFFRAME ) frame_worker_data <S2SV_ModEnd> -> frame_type, <S2SV_ModStart> VP9_REFFRAME ) frame_worker_data <S2SV_ModEnd> -> frame_type, <S2SV_ModStart> VP9_REFFRAME ) frame_worker_data <S2SV_ModEnd> -> frame_type, <S2SV_ModStart> VP9_REFFRAME ) frame_worker_data <S2SV_ModEnd> ; } <S2SV_null>",0
1129,"<S2SV_ModStart>. path ; if (! pop3c -> mailbox ) return CURLE_OUT_OF_MEMORY ; <S2SV_ModStart> mailbox = curl_easy_unescape <S2SV_ModEnd> ( data, <S2SV_ModStart>, NULL ) ; if (! pop3c -> mailbox ) return CURLE_OUT_OF_MEMORY ;",0
1130,<S2SV_ModStart> 1 ) ; if ( facilities_len < 0 ) return 0 ; <S2SV_ModStart> 1 ) ; if ( facilities_len < 0 ) return 0 ; <S2SV_ModStart> 1 ) ; if ( facilities_len < 0 ) return 0 ; <S2SV_ModStart> 1 ) ; if ( facilities_len < 0 ) return 0 ;,0
1131,"<S2SV_ModStart>, ret ; if ( s -> nal_unit_type == HEVC_NAL_CRA_NUT && s -> last_eos == 1 ) sh -> no_output_of_prior_pics_flag = 1 ; else if ( s -> nal_unit_type == HEVC_NAL_CRA_NUT && s -> last_eos == 2 ) sh -> no_output_of_prior_pics_flag = 1 ; else if ( s -> nal_unit_type == HEVC_NAL_CRA_NUT && s -> last_eos == 2 ) sh -> no_output_of_prior_pics_flag = 1 ; else if ( s -> nal_unit_type == HEVC_NAL_CRA_NUT && s -> last_eos == 3 ) sh -> no_output_of_prior_pics_flag = 1 ; else if ( s -> nal_unit_type == HEVC_NAL_CRA_NUT && s -> last_eos == 3 ) sh -> no_output_of_prior_pics_flag = 1 ;",0
1132,"<S2SV_ModStart> i2_cur_mb_addr, u1_num_mbs <S2SV_ModEnd>, u1_num_mbsNby2, <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbs <S2SV_ModEnd>, u1_num_mbsNby2, <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbs <S2SV_ModEnd>, u1_num_mbsNby2, <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbsNby2, u1_num_mbs <S2SV_ModEnd>, u1_num_mbsNby2, <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbs <S2SV_ModEnd>, u1_num_mbsNby2, <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbs <S2SV_ModEnd>, u1_num_mbsNby2, <S2SV_ModStart> i2_cur_mb_addr, u1_num_mbsNby2, u1_num_mbsNby2, u1_num_mbsNby2, u1_num_mbsNby2, u1_num_mbsNby",0
1133,"<S2SV_ModStart>, u4_y_offset ; IMPEG2D_TRACE_MB_START ( ps_dec -> u2_mb_x, ps_dec -> u2_mb_y ) ; <S2SV_ModStart> B_PIC ) { <S2SV_ModEnd> impeg2d_dec_pnb_mb_params ( ps_dec <S2SV_ModStart> else impeg2d_dec_p_mb_params ( ps_dec, <S2SV_ModEnd> ps_dec_mb_params ) ; <S2SV_ModStart> else impeg2d_dec_p_mb_params ( ps_dec, <S2SV_ModEnd> ps_dec_mb_params ) ; <S2SV_ModStart> else impeg2d_dec_p_mb_params ( ps_dec, <S2SV_ModEnd> ps_dec_mb_params ) ; <S2SV_ModStart> ( ps_dec, <S2SV_ModEnd> ps_dec_mb_params ) ; <S2SV_ModStart> else impeg2d_dec_p_mb_params ( ps_dec, <S2SV_ModEnd> ps_dec_mb_params ) ; <S2SV_ModStart> else impeg2d_dec_p_mb_params ( ps_dec, <S2SV_ModEnd> ps_dec_mb_params ) ; <S2SV_ModStart> else impeg2d_dec_p_mb_params ( ps_dec, <S2SV_ModEnd> ps_dec_mb_",0
1134,"<S2SV_ModStart> VP9_LAST_FLAG ) { <S2SV_ModEnd> const YV12_BUFFER_CONFIG * <S2SV_ModStart> const YV12_BUFFER_CONFIG * const cfg = cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ] ; if ( cfg == NULL ) { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Missing <S2SV_blank> buffer <S2SV_blank> config"" ) ; } else { const YV12_BUFFER_CONFIG * const cfg = cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ] ; if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; } } else if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; }",0
1135,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
1136,"<S2SV_ModStart> const TX_SIZE tx_size = get_plane_tx_size ( plane, pd ) <S2SV_ModEnd> ; const int <S2SV_ModStart> int i ; # if CONFIG_VP9_HIGHBITDEPTH if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) { int r, c ; int max_blocks_wide = num_4x4_w ; int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> ( 5 + pd -> subsampling_y ) ) ; if ( xd -> mb_to_right_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge <",0
1137,<S2SV_ModStart> mmap_legacy_base = mmap_legacy_base <S2SV_ModEnd> ( random_factor ),0
1138,"<S2SV_ModStart> ++ ) { memcpy <S2SV_ModEnd> ( dst,",0
1139,"<S2SV_ModStart> case 'c' : return getnum <S2SV_ModEnd> ( L, <S2SV_ModStart> case 'I' : { luaL_error ( L, ""integral <S2SV_blank> size <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d"", sizeof ( int ), MAXINTSIZE ) ; return 0 ; } case 'u' : case 'U' : { luaL_error ( L, ""integral <S2SV_blank> size <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d"", sizeof ( int ), MAXINTSIZE",0
1140,"<S2SV_ModStart> nrow ) { if ( img -> row_offset + img -> row_size > h ) { TIFFErrorExt ( tif, ""row_offset <S2SV_blank> too <S2SV_blank> large"", ""gtStripSeparate"" ) ; return ( 0 ) ; } <S2SV_ModStart> ( buf == NULL ) { TIFFErrorExt ( tif, ""row_size <S2SV_blank> too <S2SV_blank> large"", ""gtStripSeparate"", ""gtStripSeparate"" ) ; return ( 0 ) ; } if ( img -> row_offset + img -> row_size > h ) { TIFFErrorExt ( tif, ""row_size <S2SV_blank> too <S2SV_blank> large"", ""gtStripSeparate"", ""gtStripSeparate"" ) ; return ( 0 ) ; } <S2SV_ModStart> ( buf == NULL ) { TIFFErrorExt ( tif, ""row_size <S2SV_blank> too <S2SV_blank> large"", ""gtStripSeparate"" ) ; return ( 0 ) ; } if ( img -> row_offset + img -> row_size > h ) { TIFFErrorExt ( tif, ""row_offset <S2SV_blank> too <S2SV_blank> large"", ""gtStripSeparate"" ) ; return ( 0 ) ; }",0
1141,"<S2SV_ModStart> } } } if ( TYPE ( CHILD ( n, 1 ) ) == TYPE_COMMENT ) { i += 2 ; l = 0 ; for ( ; i < ( NCH ( n ) - 1 ) ; i ++ ) l += num_stmts ( CHILD ( n, i ) ) ; else if ( TYPE ( CHILD ( n, 2 ) ) == TYPE_COMMENT ) i += 2 ; for ( ; i < ( NCH ( n ) - 1 ) ; i ++ ) l += num_stmts ( CHILD ( n, 2 ) ) ; else if ( TYPE ( CHILD ( n, 1 ) ) == TYPE_COMMENT ) i += 2 ; for ( ; i < ( NCH ( n ) - 1 ) ; i ++ ) l += num_stmts ( CHILD ( n, i ) ) ; else if ( TYPE ( CHILD ( n, 2 ) ) == TYPE_COMMENT ) i += 2 ; for ( ; i < ( NCH ( n ) - 1 ) ; i ++ ) l += num_stmts ( CHILD ( n, 2 ) ) ; else if ( TYPE ( CHILD ( n, 1 ) ) == TYPE_COMMENT ) i += 2 ; for ( ; i",0
1142,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ; psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ; psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ; psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ; psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ; psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ; psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ; psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ; psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ; psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ; psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ; psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ; psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ; psf -> header. indx <S2SV_ModEnd> ++ ] =,0
1143,<S2SV_ModStart> upid == - 1 || upid == 0,0
1144,"<S2SV_ModStart> siocb -> scm, false",1
1145,<S2SV_ModStart> ( num & ( 1U << ( number - 1 ) ) ) return num - ( 1U << ( number - 1 ) ) ; else if ( num & ( 1U << ( number - 1 ) ) ) return num - ( 1U << ( number - 1 ) ) ; else,0
1146,<S2SV_ModStart> int w = ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH )? ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH ) : ( img -> fmt & VPX_IMG_FMT_HIGHBITDEPTH )? ( img -> fmt & ~ VPX_IMG_FMT_HIGHBITDEPTH )? ( img -> fmt & ~ VPX_IMG_FMT_HIGHBITDEPTH ) : ( ( img -> fmt & ~ VPX_IMG_FMT_HIGHBITDEPTH )? ( img -> fmt & ~ VPX_IMG_FMT_HIGHBITDEPTH ) : ( img -> fmt & ~ VPX_IMG_FMT_HIGHBITDEPTH )? ( img -> fmt & ~ VPX_IMG_FMT_HIGHBITDEPTH ) : ( ( img -> fmt & ~ VPX_IMG_FMT_HIGHBITDEPTH )? ( img -> fmt & ~ VPX_IMG_FMT_HIGHBITDEPTH ) : ( ( img -> fmt & ~ VPX_IMG_FMT_HIGHBITDEPTH,0
1147,"<S2SV_ModStart> ; uint16_t attr_len <S2SV_ModEnd> ; uint16_t orig_attr_len <S2SV_ModStart> if ( avp -> length < sizeof ( struct l2tp_avp_t ) + 2 ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } if ( avp -> length < attr_len - 2 ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes",0
1148,"<S2SV_ModStart> -> private ; if ( cmd == DM_IOCTL_GET_CHILD ) return __blkdev_driver_ioctl ( lc -> dev -> bdev, lc -> mode, cmd, arg ) ; else return __blkdev_driver_ioctl ( lc -> dev -> bdev, lc -> mode, cmd, arg ) ;",0
1149,<S2SV_ModStart> ; return 1 ; case EVP_CTRL_AEAD_SET_TAG : if ( arg <= 0 || arg > CHACHA_CTR_SIZE ) return 0 ; actx -> tag [ 0 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 2 ) ; actx -> tag [ 1 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 3 ) ; actx -> tag [ 2 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 6 ) ; actx -> tag [ 0 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 8 ) ; actx -> tag [ 1 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 2 ) ; actx -> tag [ 2 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 3 ) ; actx -> tag [ 3 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 6 ) ;,0
1150,<S2SV_ModStart> alg ) { if (! try_module_get ( THIS_MODULE ) ) { return ERR_PTR ( - ENODEV ) ; } <S2SV_ModEnd> alg = crypto_alg_lookup <S2SV_ModStart> mask & CRYPTO_ALG_NEED_FALLBACK ) ) { if (! try_module_get ( THIS_MODULE ) ) { return ERR_PTR ( - ENODEV ) ; } <S2SV_ModEnd> alg = crypto_alg_lookup <S2SV_ModStart> mask & CRYPTO_ALG_NEED_FALLBACK ) ) { if (! try_module_get ( THIS_MODULE ) ) { return ERR_PTR ( - ENODEV ) ; } } <S2SV_ModEnd> alg = crypto_alg_lookup,0
1151,"<S2SV_ModStart>. size, <S2SV_ModEnd> 0, 0",0
1152,<S2SV_ModStart> fp ) ; unlink ( RUN_LIB_FILE ) ;,1
1153,"<S2SV_ModStart> sock, sk ) ; memset ( sa, 0, sizeof ( * sa )",1
1154,"<S2SV_ModStart> ) { memcpy ( pass_salt, cpkt. data, cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PASSSALT ) { memcpy ( pass_salt, cpkt. data, cpkt. length ) ; } else if ( cpkt. cptype == MT_CPTYPE_PLAINDATA ) { fwrite ( ( const void * ) cpkt. data, 1, cpkt. length, stdout ) ; } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 0 ; if ( is_a_tty ) { raw_term ( ) ; setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch ) ; } } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 1 ; if ( is_a_tty ) { raw_term ( ) ; setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH",0
1155,<S2SV_ModStart> NTLMSSP_NEGOTIATE_UNICODE | NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC ; <S2SV_ModStart> |= NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC ; <S2SV_ModEnd> tmp = * <S2SV_ModStart> |= NTLMSSP_NEGOTIATE_SIGN ; if ( ses -> server -> session_estab || ses -> ntlmssp -> sesskey_per_smbsess ) flags |= NTLMSSP_NEGOTIATE_KEY_XCH ; if (! ses -> server -> session_estab || ses -> ntlmssp -> sesskey_per_smbsess ) flags |= NTLMSSP_NEGOTIATE_KEY_XCH ;,0
1156,<S2SV_ModStart> MUTT_ABORT ) { mutt_socket_empty ( adata -> conn ) ; <S2SV_ModStart> err_close_conn ; } mutt_socket_empty ( adata -> conn ) ;,0
1157,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
1158,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> ) == 0 ) ; if ( <S2SV_ModEnd> ( cc % <S2SV_ModStart> stride ) == 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""horDiff8"", ""%s"", ""cc"" ) ; return 0 ; } <S2SV_ModEnd> if ( cc <S2SV_ModStart> stride ) == 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s"", ""%s",0
1159,"<S2SV_ModStart> sect <= 0 || <S2SV_ModEnd> g -> head <S2SV_ModStart> -> head <= 0 || g -> track > UDP -> tracks >> STRETCH ( g ) || ( g -> stretch & ~ ( FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK ) )!= 0 || ( g -> stretch & ~ ( FD_STRETCH | FD_SECTBASEMASK ) )!= 0 ) return - EINVAL ; if ( cmd!= FDDEFPRM ) { if ( poll_drive ( true, FD_RAW_NEED_DISK ) == - EINTR ) return - EINTR ; } current_type [ drive ] = & user_params [ drive ] ; floppy_sizes [ drive ] = user_params [ drive ]. size ; process_fd_request ( ) ; for ( cnt = 0 ; cnt < N_DRIVE ; cnt ++ ) { struct block_device * bdev = opened_bdev [ cnt ] ; if (! bdev || ITYPE ( bdev )!= type ) continue ; process_fd_request ( ) ; for ( cnt = 0 ; cnt < N_DRIVE ; cnt",0
1160,"<S2SV_ModStart> ""?WATCH={\\""json\\"":true};\\n"" ) ; if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 || strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 || strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 || strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 || strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 || strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 || strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 || strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 || strncmp ( line, ""{\\""class\\"":",0
1161,"<S2SV_ModStart>, & rlen, 0",1
1162,"<S2SV_ModStart> * slavename ; if ( curconn -> userfile == NULL ) { abort_connection ( curconn, pkthdr, _ ( ""Login <S2SV_blank> failed, <S2SV_blank> incorrect <S2SV_blank> username\\r\\n"" ) ) ; return ; } <S2SV_ModStart> 0 ] = 0 ; memcpy ( md5data + 1, user -> password, 82 ) ; memcpy ( md5data + 1 + strlen ( user -> password ), curconn -> pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( user -> password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; curconn -> outcounter += add_control_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr, pkthdr -> dstaddr, pkthdr -> srcaddr, pkthdr -> srcaddr, pkthdr -> srcaddr, pkthdr -> seskey, curconn -> outcounter ) ; if ( curconn -> state == STATE_ACTIVE",0
1163,"<S2SV_ModStart> 1 ; } if ( strlen ( path ) > sizeof ( path ) - 1 ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return - 1 ; }",0
1164,"<S2SV_ModStart> ( name, ""__debug__"" ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } if ( <S2SV_ModStart> p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } if (! PyUnicode_CompareWithASCIIString ( name, * p ) ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } if (! PyUnicode_CompareWithASCIIString ( name, * p ) ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } if (! PyUnicode_CompareWithASCIIString ( name, * p ) ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } if (! PyUnicode_CompareWithASCIIString ( name, * p ) ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" )",0
1165,<S2SV_ModStart> bio ) ; if ( ret < 0 ) { ret = - EFAULT ; goto out_unmap ; },0
1166,<S2SV_ModStart> RAS_CMAP_MAXSIZ ) ; if ( numcolors > RAS_CMAP_MAXSIZ ) { return - 1 ; },0
1167,"<S2SV_ModStart> -> pp ; <S2SV_ModEnd> int len ; <S2SV_ModStart> ""localhost"" ; } <S2SV_ModEnd> smtpc -> domain <S2SV_ModStart> -> domain = curl_easy_unescape <S2SV_ModEnd> ( conn -> <S2SV_ModStart> len ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; state ( conn, SMTP_SERVERGREET <S2SV_ModEnd> ) ; if",0
1168,"<S2SV_ModStart> ; i < sizeof ( buf ) <S2SV_ModEnd> && str [ <S2SV_ModStart> ++ ) { if ( j >= sizeof ( buf ) - 1 ) { return - 1 ; } <S2SV_ModStart> ++ ) { if ( j >= sizeof ( buf ) - 1 && str [ i ] == '#' ) { i -- ; continue ; } buf [ i ] = tolower ( ( const ut8 ) str [ j ] ) ; } for ( j = 0 ; j < sizeof ( buf ) - 1 ; j ++ ) { if ( str [ j ] == '#' ) { i -- ; continue ; } buf [ i ] = 0 ; } for ( j = 0 ; j < sizeof ( buf ) - 1 ; i ++, j ++ ) { if ( str [ i ] == '#' ) { i -- ; continue ; } buf [ i ] = tolower ( ( const ut8 ) str [ j ] ) ; } for ( j = 0 ; j < sizeof ( buf ) - 1 ; j ++ ) { if ( str [ j ] == '#' ) { i -- ; continue ; } buf [ i ] = 0 ; } for ( j = 0 ; j < sizeof ( buf ) - 1 ; j ++ ) { if ( str [ j ] == '#'",0
1169,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
1170,"<S2SV_ModStart> ) + RDS_CONG_MAP_BYTES ; rm -> m_inc. i_hdr. h_len = 0 ; i = ceil ( be32_to_cpu ( rm -> m_inc. i_hdr. h_len ), RDS_FRAG_SIZE ) ; if ( i == 1 ) i = ceil ( be32_to_cpu ( rm -> m_inc. i_hdr. h_len ), RDS_FRAG_SIZE ) ; else i = ceil ( be32_to_cpu ( rm -> m_inc. i_hdr. h_len ), RDS_FRAG_SIZE ) ; if ( work_alloc == 0 ) { set_bit ( RDS_LL_SEND_FULL, & conn -> c_flags ) ; rds_ib_stats_inc ( s_ib_tx_ring_full ) ; goto out ; }",0
1171,"<S2SV_ModStart> -> start, <S2SV_ModEnd> resource_size ( r <S2SV_ModStart> r ) ) ; if (! priv -> base ) { dev_err ( & pdev -> dev, ""failed <S2SV_blank> to <S2SV_blank> remap <S2SV_blank> register\\n"" ) ; return - ENOMEM ; }",0
1172,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1173,<S2SV_ModStart> = 0 ; if ( pi -> picomp -> pirlvls == NULL || pi -> picomp -> pirlvls == NULL || pi -> picomp -> pirlvls [ pi -> picomp -> pirlvls [ pi -> picomp -> pirlvls [ pi -> picomp -> pirlvls [ pi -> picomp -> pirlvls [ pi -> picomp -> pirlvls [ pi -> picomp -> pirlvls ] ]. name == NULL || pi -> pirlvl -> pirlvls [ pi -> picomp -> pirlvls [ pi -> picomp -> pirlvls [ pi -> picomp -> pirlvls [ pi -> picomp -> pirlvls [ pi -> picomp -> pirlvls [ pi -> picomp -> pirlvls [ pi -> picomp -> pirlvls [ pi -> picomp -> pirlvls [ pi -> picomp -> pirlvls ]. name == NULL || pi -> pirlvl -> pirlvls [ pi -> picomp -> pirlvls [ pi -> picomp -> pirlvls [ pi -> picomp -> pirlvls [ pi,0
1174,"<S2SV_ModStart>! exponly ) { if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> exports\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ;",0
1175,<S2SV_ModStart> goto out ; if ( xdr_read_n <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
1176,<S2SV_ModStart> ; return Qnil <S2SV_ModEnd> ; } <S2SV_null>,0
1177,"<S2SV_ModStart> KRB5KDC_ERR_BADOPTION ; } if (! krb5_principal_compare ( kdc_context, server -> princ, server_princ ) ) { return KRB5KDC_ERR_SERVER_NOMATCH ; } if (! krb5_principal_compare ( kdc_context, t2enc -> client -> princ, proxy_princ ) ) { return KRB5KDC_ERR_SERVER_NOMATCH ; } errcode = check_allowed_to_delegate_to ( kdc_context, t2enc -> client, server, proxy_princ ) ; if ( errcode ) { * status = ""NOT_ALLOWED_TO_DELEGATE"" ; return errcode ; } errcode = check_allowed_to_delegate_to ( kdc_context, t2enc -> client, server, proxy_princ ) ; if ( errcode ) { * status = ""NOT_ALLOWED_TO_DELEGATE"" ; return errcode ; }",0
1178,<S2SV_ModStart> & CLONE_SETTLS ) { <S2SV_ModEnd> thread_notify ( THREAD_NOTIFY_COPY,0
1179,"<S2SV_ModStart> bufsize ) { JAS_DBGLOG ( 100, ( ""jas_stream_memopen(%p, <S2SV_blank> %d)\\n"", buf, bufsize ) ) ; jas_stream_t * stream ; jas_stream_memobj_t * obj ; JAS_DBGLOG ( 100, ( ""jas_stream_memopen(%p, <S2SV_blank> %d)\\n"", buf, bufsize ) ) ; stream = jas_stream_create ( ) ; if (! stream ) { jas_stream_destroy ( stream ) ; return 0 ; } stream -> openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY ; if (! jas_stream_initbuf ( stream, JAS_STREAM_FULLBUF, 0, 0 ) ) ) { jas_stream_destroy ( stream ) ; return 0 ; } stream -> ops_ = & jas_stream_memops ; if (! jas_malloc ( sizeof ( jas_stream_memobj_t ) ) ) ) { jas_stream_destroy ( stream ) ; return 0 ; } obj ->",0
1180,"<S2SV_ModStart> sshbuf * b <S2SV_ModEnd> ; struct sshkey <S2SV_ModStart> * key = NULL ; <S2SV_ModEnd> u_char * pkblob <S2SV_ModStart>, * sig <S2SV_ModEnd>, have_sig ; <S2SV_ModStart> ; if ( <S2SV_ModEnd> authctxt -> valid <S2SV_ModStart> authctxt -> valid ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & pkblob, & blen ) )!= 0 || ( r = sshpkt_get_string ( ssh, & blen, & slen ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & blen ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8",0
1181,"<S2SV_ModStart> ; uint32_t bcount ; if (! DoGetFileSize ( infile ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
1182,"<S2SV_ModStart> mech ) ) { ret = gsasl_server_start ( ctx -> gsasl_ctx, mech, & sd ) ; if ( ret!= GSASL_OK ) { _sx_debug ( ZONE, ""gsasl_server_start <S2SV_blank> failed, <S2SV_blank> no <S2SV_blank> sasl <S2SV_blank> for <S2SV_blank> this <S2SV_blank> conn; <S2SV_blank> (%d): <S2SV_blank> %s"", ret, gsasl_strerror ( ret ) ) ; _sx_nad_write ( s, _sx_sasl_failure ( s, _sasl_err_TEMPORARY_FAILURE, gsasl_strerror ( ret ) ) ) ; return ; } ret = gsasl_server_start ( ctx -> gsasl_ctx, mech, & sd ) ; if ( ret!= GSASL_OK ) { _sx_debug ( ZONE, ""gsasl_server_start <S2SV_blank> failed, <S2SV_blank> no <S2SV_blank> sasl <S2SV_blank> for <S2SV_blank> this <S2SV_blank> conn; <S2SV_blank> (%d): <S2SV_blank> %s"", ret, gsasl_strerror ( ret ) ) ) ; _sx_nad_write ( s, _sasl_failure ( s, _sas",0
1183,<S2SV_ModStart> tn_buf ) ; return - EACCES ;,1
1184,"<S2SV_ModStart> size_t s ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; break ; } n -> entries [ tcount ] = exif_mem_alloc ( en -> mem, sizeof ( MnoteFujiEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( en -> log, ""ExifMnoteFuji"", sizeof ( MnoteFujiEntry ) * c )",0
1185,<S2SV_ModStart> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1186,<S2SV_ModStart> bd_addr ) { if ( interface_ready ( ) == FALSE ) return BT_STATUS_NOT_READY ;,0
1187,"<S2SV_ModStart> 4 ; if ( info -> mss == XT_TCPMSS_CLAMP_PMTU ) { net_err_ratelimited ( ""unknown <S2SV_blank> or <S2SV_blank> invalid <S2SV_blank> path-MTU <S2SV_blank> (%u)\\n"", minlen ) ; return - 1 ; } if ( info -> mss == XT_TCPMSS_CLAMP_PMTU ) { net_err_ratelimited ( ""unknown <S2SV_blank> or <S2SV_blank> invalid <S2SV_blank> path-MTU <S2SV_blank> (%u)\\n"", minlen ) ; return - 1 ; } else if ( info -> mss == XT_TCPMSS_CLAMP_PMTU ) { net_err_ratelimited ( ""unknown <S2SV_blank> or <S2SV_blank> invalid <S2SV_blank> path-MTU <S2SV_blank> (%u)\\n"", minlen ) ; return - 1 ; } if ( info -> mss == XT_TCPMSS_CLAMP_PMTU ) { net_err_ratelimited ( ""unknown <S2SV_blank> or <S2SV_blank> invalid <S2SV_blank> path-MTU <S2SV_blank> (%u)\\n"", minlen ) ; return - 1 ; }",0
1188,"<S2SV_ModStart> * matrix ; jas_matind_t i ; jas_matind_t i1 ; jas_matind_t i2 ; jas_matind_t i3 ; if ( numrows < 0 || numcols < 0 ) { return 0 ; } <S2SV_ModStart> 0 ) { jas_matind_destroy ( matrix ) ; <S2SV_ModStart> ) ) { jas_matind_destroy ( matrix ) ; return 0 ; } matrix -> flags_ = 0 ; matrix -> numrows_ = numrows ; matrix -> numcols_ = numcols ; matrix -> rows_ = 0 ; matrix -> maxrows_ = 0 ; matrix -> data_ = 0 ; matrix -> datasize_ = numrows * numcols ; if ( matrix -> maxrows_ > 0 ) { if (! jas_alloc2 ( matrix -> maxrows_, sizeof ( jas_seqent_t ) ) ) ) { jas_matind_destroy ( matrix ) ; return 0 ; } } if ( matrix -> datasize_ > 0 ) { if (! jas_alloc2 ( matrix -> datasize_, sizeof ( jas_seqent_t ) ) ) ) { jas_matrix_",0
1189,"<S2SV_ModStart> skb ) ; tmp_hdr = rcu_dereference_protected ( np -> ipv6_opt, sock_owned_by_user ( skb -> sk ) ) ;",0
1190,"<S2SV_ModStart> * req ; struct scsi_disk_req * <S2SV_ModEnd> r ; req <S2SV_ModStart> scsi_disk_req_alloc ( & s -> scsi_disk_reqops, & s -> qdev, tag, lun, hba_private ) ; if (! req ) return NULL <S2SV_ModStart> scsi_disk_req_alloc ( & s -> scsi_disk_reqops, & s -> qdev, tag, lun, hba_private ) ; <S2SV_ModEnd> r -> iov <S2SV_ModStart>. iov_base = qemu_blockalign ( s -> bs, SCSI_DMA_BUF_SIZE ) ; r -> iov. iov_len = qemu_blockalign ( s -> bs, SCSI_DMA_BUF_SIZE ) ; if (! qemu_blockalign ( s -> bs, SCSI_DMA_BUF_SIZE ) ) return NULL ;",0
1191,<S2SV_ModStart> int i ; int <S2SV_ModEnd> expect ; txid <S2SV_ModStart> 4 ) ; <S2SV_ModEnd> nxip = pq_getmsgint <S2SV_ModStart> buf -> cursor <S2SV_ModEnd> ; expect = <S2SV_ModStart> ( nxip < 0 || nxip > avail || expect > avail ) goto bad_format ; xmin = pq_getmsgint64 ( buf ) ; xmax = pq_getmsgint64 ( buf ) ; if ( xmin == 0 || xmin == 0 || xmax == 0 || xmax == 0 || xmax > MAX_TXID ) goto bad_format ; snap = palloc ( TxidSnapshot_SIZE ( nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last || cur < xmin || cur >= xmax ) goto bad_format ; snap -> xip [ i ] = cur ; last = cur ; },0
1192,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ; psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ; psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ; psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ; psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ; psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ; psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ; psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ; psf -> header. indx <S2SV_ModEnd> ++ ; },0
1193,"<S2SV_ModStart> if ( ret ||! cm_id -> device ) { ret = - EADDRNOTAVAIL ; rdsdebug ( ""addr <S2SV_blank> %pI4 <S2SV_blank> ret <S2SV_blank> %d <S2SV_blank> node <S2SV_blank> type <S2SV_blank> %d\\n"", & addr, ret, cm_id -> device? cm_id -> device -> node_type : - 1 ) ; rdma_destroy_id ( cm_id ) ; return ret ; }",0
1194,"<S2SV_ModStart> sk ) ; <S2SV_ModEnd> struct xfrm_dump_info info <S2SV_ModStart> = NLM_F_MULTI ; <S2SV_ModEnd> cb -> args <S2SV_ModStart> 0 ] ) { <S2SV_ModEnd> xfrm_policy_walk_init ( walk <S2SV_ModStart> = NLM_F_MULTI ; <S2SV_ModEnd> cb -> args <S2SV_ModStart> 0 ] ) { <S2SV_ModEnd> cb -> args <S2SV_ModStart> [ 0 ] = 1 ; xfrm_policy_walk_init ( walk, XFRM_POLICY_TYPE_ANY ) ; } ( void ) xfrm_policy_walk ( net, walk, dump_one_policy, & info ) ; return skb -> len ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1195,"<S2SV_ModStart> - 1 ; struct oe_sock * oe = NULL ; <S2SV_ModStart> = 0 ; if ( count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; oe_errno = 0 ; if ( oe_syscall_write_ocall ( & ret, epoll -> host_fd, buf, count )!= OE_OK ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> OE_EINVAL ) ; } if ( ret > ( ssize_t ) count ) { ret = - 1 ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; oe_errno = 0 ; if ( oe_syscall_write_ocall ( & ret, epoll -> host_fd, buf, count )!= OE_OK ) OE_RAISE_ERRNO ( OE_EINVAL ) ; }",0
1196,"<S2SV_ModStart> -> d_inode ; struct dentry * upper = ovl_dentry_upper <S2SV_ModEnd> ( dentry ) <S2SV_ModStart> = - ESTALE <S2SV_ModEnd> ; if ( <S2SV_ModStart> I_MUTEX_PARENT ) ; if ( upper -> d_parent == upperdir ) { dget ( upper ) ; if ( is_dir ) err = vfs_rmdir ( dir, upper, NULL ) ; else err = vfs_unlink ( dir, upper, NULL ) ; else err = vfs_unlink ( dir, upper, NULL ) ; ovl_dentry_version_inc ( dentry -> d_parent ) ; } <S2SV_ModStart> ) ; inode_unlock ( dir ) ; return err <S2SV_ModEnd> ; } <S2SV_null>",0
1197,"<S2SV_ModStart> { errstr = parse_global_option <S2SV_ModEnd> ( CMD_INITIALIZE, <S2SV_ModStart> eof ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) s_log ( LOG_ERR, ""Inetd <S2SV_blank> mode: <S2SV_blank> %s"", errstr ) ; else s_log ( LOG_ERR, ""Service <S2SV_blank> [%s]: <S2SV_blank> %s"", ( * section_ptr ) -> servname, errstr ) ; return 1 ; } if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ;",0
1198,<S2SV_ModStart>! ( nmemb <S2SV_ModEnd> && size ),0
1199,<S2SV_ModStart> ] ; if ( a -> type == MAPI_BODY_HTML ) { body. html_bodies = get_html_data ( a ) ; html_size = a -> num_values ; } else if ( a -> type == MAPI_RTF_COMPRESSED ) { body. rtf_bodies = get_rtf_data ( a ) ; rtf_size = a -> num_values ; } else if ( a -> type == MAPI_BODY_TEXT ) { body. text_body = get_text_data ( a ) ; html_size = a -> num_values ; } else if ( a -> type == MAPI_RTF_COMPRESSED ) { body. rtf_bodies = get_rtf_data ( a ) ; rtf_size = a -> num_values ; } else if ( a -> name == MAPI_BODY_HTML ) { body. html_bodies = get_html_data ( a ) ; html_size = a -> num_values ; } else if ( a -> type == MAPI_RTF_COMPRESSED ) { body. rtf_bodies = get_rtf_data ( a,0
1200,"<S2SV_ModStart> ; # endif if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; # endif i -> posX = i -> parent -> width - i -> width ; } if ( ( i -> posY + i -> height ) > i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> Y <S2SV_blank> position\\n"" ) ; # endif i -> posY = i -> parent -> height - i -> height ; } if ( ( i -> posX + i -> width ) > i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> WARNING <S2SV_blank> *** <S2SV_blank> Adjusting <S2SV_blank> X <S2SV_blank> position\\n"" ) ; # endif i -> posX =",0
1201,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_DIR_MAX : * ( size_t * ) val = ms -> elf_dir_max ; return 0 ; case MAGIC_PARAM_NAME_MAX : * ( size_t * ) val = ms -> name_max ; return 0 ; case MAGIC_PARAM_ELF_PHNUM_MAX : * ( size_t * ) val = ms -> elf_phnum_max ; return 0 ; case MAGIC_PARAM_ELF_SHNUM_MAX : * ( size_t * ) val = ms -> elf_shnum_max ; return 0 ; case MAGIC_PARAM_ELF_DIR_MAX : * ( size_t * ) val = ms -> elf_dir_max ; return 0 ; case MAGIC_PARAM_ELF_SHNUM_MAX : * ( size_t * ) val = ms -> elf_shnum_max ; return 0 ; case MAGIC_PARAM_ELF_SHNUM_MAX : * ( size_t * ) val = ms -> elf_shnum_max ; return 0 ;,0
1202,"<S2SV_ModStart> 1 ) { jas_eprintf <S2SV_ModEnd> ( ""box <S2SV_blank> type <S2SV_blank> %d\\n"", <S2SV_ModStart> name ) ; goto error <S2SV_ModEnd> ; } switch <S2SV_ModStart> case JP2_BOX_FTYP : if ( box -> data. ftyp. magic!= JP2_FTYP_MAGIC ) { jas_eprintf ( ""incorrect <S2SV_blank> magic <S2SV_blank> number\\n"" ) ; goto error ; } if ( box -> data. fsyp. magic!= JP2_FTYP_MAGIC ) { jas_eprintf ( ""incorrect <S2SV_blank> magic <S2SV_blank> number\\n"" ) ; goto error ; } if ( box -> data. fsyp. magic!= JP2_FTYP_MAGIC ) { jas_eprintf ( ""incorrect <S2SV_blank> magic <S2SV_blank> number\\n"" ) ; goto error ; } if ( box -> data. fsyp. magic!= JP2_MAGIC ) { jas_eprintf ( ""incorrect <S2SV_blank> magic <S2SV_blank> number\\n"" ) ; goto error ; } if ( box -> data. fsyp. magic!= JP2_MAGIC ) { jas_eprintf ( ""incorrect <S2SV_blank>",0
1203,"<S2SV_ModStart>!= M_FS_TYPE_DIR ) { if ( M_fs_perms_can_access ( p2, M_FS_PERMS_MODE_NONE ) == M_FS_ERROR_SUCCESS ) { ret = M_FALSE ; goto done ; } }",0
1204,<S2SV_ModStart> ext4_journal ( page_file_mapping ( page ) <S2SV_ModEnd> ) ; if,0
1205,<S2SV_ModStart> ++ ) { writer = GF_SAFEALLOC ( GF_TrackWriter * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1206,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_rle_encode ( BYTE <S2SV_ModStart>, UINT32 originalSize, TEMP_FAILURE_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY = TEMP_FAILURE_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY",0
1207,"<S2SV_ModStart> 17 ] ; size_t <S2SV_ModEnd> plen ; md5_state_t <S2SV_ModStart> 0 ; # if defined ( __linux__ ) && defined ( _POSIX_MEMLOCK_RANGE ) mlock ( md5data, sizeof ( md5data ) ) ; # endif strncpy ( md5data + 1, password, 82 ) ; strncpy ( md5data + 1 + strlen ( password ), pass_salt, 16 ) ; memcpy ( md5data + 1 + strlen ( password ), pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; md5sum [ 0 ] = 0 ; if ( is_a_tty && get_terminal_size ( & width, & height )!= - 1 ) { width = htole16 ( width ) ; height = htole16 ( height ) ; } if ( is_a_tty && get_terminal_size ( & width, & height )!=",0
1208,"<S2SV_ModStart> useSystemLib ) { const char * topDir ; char libPath [ MAX_OSPATH ] ; if (! * topDir ) topDir = ""."" ; if (! * topDir ) topDir = ""."" ; if (! * topDir ) topDir = ""."" ; if (! * topDir ) topDir = ""."" ; if (! * basePath ) basePath = ""."" ; if ( FS_FilenameCompare ( topDir, name ) ) { Com_Printf ( ""Trying <S2SV_blank> to <S2SV_blank> load <S2SV_blank> \\""%s\\"" <S2SV_blank> from <S2SV_blank> \\""%s\\""...\\n"", name, topDir ) ; dllhandle = Sys_LoadLibrary ( libPath ) ; } else if (! * basePath ) basePath = ""."" ; if ( FS_FilenameCompare ( topDir, basePath ) ) { Com_Printf ( ""Trying <S2SV_blank> to <S2SV_blank> load <S2SV_blank> \\""%s\\"" <S2SV_blank> from <S2SV_blank> \\""%s\\""...\\n"", name, basePath ) ; dllhandle = Sys_LoadLibrary ( libPath ) ; } if (! dllhandle ) Com_Printf ( ""Loading <S2SV_blank> \\""%s\\"" <S2SV_blank> failed\\n"", name ) ; }",0
1209,<S2SV_ModStart> ; if ( _mibindexes ) { int i ; for ( i = 0 ; i < _mibindex_max ; ++ i ) SNMP_FREE ( _mibindexes [ i ] ) ; free ( _mibindexes ) ; _mibindexes = NULL ; },0
1210,"<S2SV_ModStart> ( n ) \\\n{ <S2SV_ModEnd> sum = ( <S2SV_ModStart> bits -= 24 ; \\\n} <S2SV_ModEnd> typedef struct PCDTable <S2SV_ModStart> buffer ) ; if ( buffer == ( unsigned char * ) NULL ) AcquireQuantumMemory ( 0x800, sizeof ( * buffer ) ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ;",0
1211,"<S2SV_ModStart> += 1 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> case COMMA : if ( TYPE ( CHILD ( n, i ) ) == TYPE_COMMENT ) arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case",0
1212,"<S2SV_ModStart> g_hash_table_destroy ( headers ) ; headers = web_socket_util_new_headers ( ) ; g_hash_table_insert ( headers, g_strdup ( ""Cookie"" ), g_strdup ( ""CockpitAuth=v=3;k=blah"" ) ) ; if ( cockpit_auth_check_cookie ( test -> auth, ""/cockpit"", headers ) ) g_assert_not_reached ( ) ; g_hash_table_insert ( headers, g_strdup ( ""Cookie"" ), g_strdup ( ""CockpitAuth=v=4;k=blah"" ) ) ; if ( cockpit_auth_check_cookie ( test -> auth, ""/cockpit"", headers ) ) g_assert_not_reached ( ) ; g_hash_table_destroy ( headers ) ;",0
1213,"<S2SV_ModStart> HAVE_IPV6 char * <S2SV_ModEnd> p ; if <S2SV_ModStart> 1 ) { if ( str_len > 2 ) { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> IPv6 <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; return NULL ; } return estrndup ( str + 1, str_len - 2 ) ; } else { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> IPv4 <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL ; } } else { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> IPv4 <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return host ; } # endif if ( str_len ) { char * colon = memchr ( str, ':', str_len - 1 ) ; if ( colon ) { * portno = atoi ( colon + 1 ) ; host = estrndup ( str, colon - str ) ; } else { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to",0
1214,"<S2SV_ModStart> -> y_buffer ; const int y_width = src_ybc -> y_width ; const int y_height = src_ybc -> y_height ; const int y_stride = src_ybc -> y_stride ; <S2SV_ModStart> row ) { memcpy <S2SV_ModEnd> ( dst, <S2SV_ModStart> dst, src, y_width <S2SV_ModEnd> ) ; src",0
1215,"<S2SV_ModStart> AVERROR_INVALIDDATA ; } if ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) { av_log ( s -> avctx, AV_LOG_WARNING, ""extra <S2SV_blank> cblk <S2SV_blank> styles <S2SV_blank> is <S2SV_blank> invalid\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> g ) ; if ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) { av_log ( s -> avctx, AV_LOG_WARNING, ""extra <S2SV_blank> cblk <S2SV_blank> styles <S2SV_blank> is <S2SV_blank> invalid\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> g ) ; if ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) { av_log ( s -> avctx, AV_LOG_WARNING, ""extra <S2SV_blank> cblk <S2SV_blank> styles <S2SV_blank> is <S2SV_blank> invalid\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) { av_log ( s -> avctx, AV_LOG_WARNING, ""extra <S2SV_blank> cblk <S2SV_blank> is <S2SV_blank> invalid\\n"" ) ; return AVERROR_INVALIDDATA ;",0
1216,"<S2SV_ModStart> ( '%' == ( unsigned char ) <S2SV_ModStart> ) ) { ptr ++ ; } else if ( '{' == ( unsigned char ) ptr [ 1 ] ) { fputc ( '{', stream ) ; ptr += 2 ; } else if ( '}' == ( unsigned char ) ptr [ 1 ] ) { if ( CURLE_OK == curl_easy_getinfo ( curl, CURLINFO_EFFECTIVE_URL, & stringp ) ) && stringp ) fputs ( stringp, stream ) ; break ; case VAR_HTTP_CODE_PROXY : if ( CURLE_OK == curl_easy_getinfo ( curl, CURLINFO_HTTP_CONNECTCODE_PROXY, & stringp ) ) && stringp ) fputs ( stringp, stream ) ; break ; case VAR_HTTP_CODE_PROXY : if ( CURLE_OK == curl_easy_getinfo ( curl, CURLINFO_HTTP_CONNECTCODE_PROXY, & stringp ) ) && stringp ) fputs ( stringp, stream ) ; break ; case VAR_HTTP_CODE_PROXY : if ( CURLE_OK == curl_easy_getinfo ( curl, CURLINFO_HTTP_CONNECTCODE_PROXY, & stringp ) ) fputs (",0
1217,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_rd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> mi_col += MI_BLOCK_SIZE <S2SV_ModEnd> ) { int <S2SV_ModStart> dummy_rate ; int64_t dummy_dist ; MACROBLOCK * x = & cpi -> mb ; if ( sf -> adaptive_pred_interp_filter ) { for ( i = BLOCK_4X4 ; i < BLOCK_8X8 ; ++ i ) { const int num_4x4_w = MAX ( 4, num_4x4_w * num_4x4_blk ) ; const int num_4x4_h = MAX ( 4, num_4x4_h * num_4x4_blk ) ; for ( x -> sb_index = 0 ; x -> sb_index < 4 ; ++ x -> sb_index ) for ( x -> b_index = 0 ; x -> b_index < 16 / num_4x4_blk ; ++ x -> b_index ) for ( x -> sb_index = 0 ; x -> mb",0
1218,"<S2SV_ModStart> obj_tlen ; u_int <S2SV_ModEnd> hexdump ; u_int <S2SV_ModStart>, hexdump ) ) ; if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart>, hexdump ) ) ; if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart>, hexdump ) ) ; if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart>, hexdump ) ) ; if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart>, hexdump ) ) ; if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart>, hexdump ) ) ; if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> too <S2SV_blank> short"" ) ) ; if ( obj_tlen < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank>",0
1219,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> inc_mvs ( const <S2SV_ModStart> mbmi ) { # if CONFIG_VP9_HIGHBITDEPTH const MV * ref = & mbmi -> ref_mvs [ mbmi -> ref_frame [ i ] ] [ 0 ]. as_mv ; const MV diff = { mvs [ i ]. as_mv. row - ref -> row, mvs [ i ]. as_mv. col - ref -> col } ; vp9_inc_mv ( & diff, counts ) ; # else ( void ) counts ; # endif for ( ; i < 2 ; ++ i ) { const MV * ref = & mbmi -> ref_mvs [ mbmi -> ref_frame [ i ] ] [ 0 ]. as_mv ; const MV diff = { mvs [ i ]. as_mv. row - ref -> row, mvs [ i ]. as_mv. col - ref -> col } ; vp9_inc_mv ( & diff, counts ) ; }",0
1220,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ),",0
1221,"<S2SV_ModStart> ; if ( pskb_expand_head ( skb_out, size - skb -> len, GFP_ATOMIC ) < 0 ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; } skb_pull_rcsum ( skb_out, hdr_size ) ; memmove ( skb_out -> data - ETH_HLEN, skb_mac_header ( skb_out ), ETH_HLEN ) ; skb_set_mac_header ( skb_out, - ETH_HLEN ) ; skb_set_mac_header ( skb_out, - ETH_HLEN ) ; skb_reset_network_header ( skb_out ) ; skb_reset_transport_header ( skb_out ) ; hlist_for_each_entry ( entry, chain, list ) { size = entry -> skb -> len - hdr_size ; memcpy ( skb_put ( skb_out, size ), entry -> skb -> data + hdr_size, size ) ; }",0
1222,"<S2SV_ModStart> ( ) ; spin_lock_init ( & sta -> lock ) ; spin_lock_init ( & sta -> ampdu_mlme. mtx ) ; INIT_WORK ( & sta -> drv_unblock_wk, sta_unblock ) ; INIT_WORK ( & sta -> ampdu_mlme. work, ieee80211_ba_session_work ) ; spin_lock_init ( & sta -> ampdu_mlme. mtx ) ;",0
1223,<S2SV_ModStart> tp_event ) &&! capable ( CAP_SYS_ADMIN ) ) return - EPERM ; if ( p_event -> attr. group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader -> group_leader ->,0
1224,"<S2SV_ModStart> 1 ) ; if (! data_interface ) { dev_err ( & intf -> dev, ""No <S2SV_blank> data <S2SV_blank> interface <S2SV_blank> specified\\n"" ) ; return - ENODEV ; } <S2SV_ModStart> 0 ) ; if (! control_interface ) { dev_err ( & intf -> dev, ""No <S2SV_blank> control <S2SV_blank> interface <S2SV_blank> specified\\n"" ) ; return - ENODEV ; }",0
1225,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1226,"<S2SV_ModStart> return ; DEBUGMSGTL ( ( ""init_mib"", ""Seen <S2SV_blank> MIBDIRS: <S2SV_blank> Looking <S2SV_blank> in <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> mib <S2SV_blank> dirs <S2SV_blank>...\\n"", env_var ) ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibfile ( entry, NULL, NULL ) ; } env_var = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibdir ( entry ) ; entry = strtok_r ( env_var + 1, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibfile ( entry, NULL, NULL ) ; } env_var = strtok_r ( env_var + 1, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibdir ( entry ) ; entry = strtok_r ( env_var + 1, ENV_SEPARATOR, & st )",0
1227,"<S2SV_ModStart> * head ; sctp_skb_for_each ( skb, & assoc -> ulpq. reasm, tmp ) { sctp_skb_copy_descendant ( skb, oldsk ) ; inet_sk_copy_descendant ( newsk, oldsk ) ; memcpy ( & tmplist, & newsp -> auto_asconf_list, sizeof ( tmplist ) ) ; sctp_sk ( newsk ) -> inet_num = inet_sk ( oldsk ) -> inet_num ; sctp_skb_for_each ( skb, & oldsk -> sk_receive_queue, tmp, GFP_KERNEL ) ; sctp_sk ( newsk ) -> inet_num = inet_sk ( oldsk ) -> inet_num ; sctp_sk ( newsk ) -> inet_num = inet_sk ( oldsk ) -> inet_num ; sctp_sk ( newsk ) -> inet_num = inet_sk ( oldsk ) -> inet_num ; sctp_skb_for_each ( skb, & assoc -> ulpq. reasm, tmp, <S2SV_ModEnd> GFP_KERN",0
1228,"<S2SV_ModStart> ; fd = safe_open <S2SV_ModEnd> ( uinput_dev_path [ <S2SV_ModStart>, O_RDWR ) ; if ( fd < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uinput <S2SV_blank> device"", __FUNCTION__ ) ; close ( fd ) ; return - 1 ; } <S2SV_ModStart> 1 ; } fd = safe_open <S2SV_ModEnd> ( uinput_dev_path [ <S2SV_ModStart>, O_RDWR ) ; if ( fd < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> uinput <S2SV_blank> device"", __FUNCTION__ ) ; close ( fd ) ; return - 1 ; } <S2SV_ModStart> = 0x0000 ; if ( write ( fd, & dev, sizeof ( dev ) ) < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> device <S2SV_blank> information"", __FUNCTION__ ) ; close ( fd ) ; return - 1 ; } if ( fd < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> Unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> device <S2SV_blank> information"", __FUNCTION__ ) ; close ( fd ) ; return - 1 ; } fd = safe_open <S2SV_ModEnd> ( uinput",0
1229,"<S2SV_ModStart> regs ) { struct desc_struct <S2SV_ModEnd> desc ; short <S2SV_ModStart> return sel ; <S2SV_ModEnd> desc = get_desc <S2SV_ModStart> if (! desc <S2SV_ModEnd> ) return - <S2SV_ModStart> if (! <S2SV_ModEnd> desc -> type <S2SV_ModStart> if (! <S2SV_ModEnd> desc -> type <S2SV_ModStart> if (! <S2SV_ModEnd> desc -> l <S2SV_ModStart> desc -> d ) return - EINVAL ; switch ( ( desc -> l << 1 ) | desc -> d ) { case 0 : return INSN_CODE_SEG_PARAMS ( 2, 2 ) ; case 1 : return INSN_CODE_SEG_PARAMS ( 4, 4 ) ; case 2 : return INSN_CODE_SEG_PARAMS ( 4, 8 ) ; case 3 : return INSN_CODE_SEG_PARAMS ( 4, 8 ) ; } }",0
1230,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
1231,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s,",0
1232,<S2SV_ModStart> return ret ; <S2SV_ModEnd> out_free_uid : free_uid,0
1233,<S2SV_ModStart> * pctx ) { if ( pctx ) { iakerb_ctx_id_t ctx ; krb5_error_code code ; code = krb5_gss_init_context ( & ctx -> k5c ) ; if ( code!= 0 ) goto cleanup ; * pctx = ctx ; return code ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
1234,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; bitmapDC = CreateCompatibleDC ( hDC ) ; if ( bitmapDC == ( HDC ) NULL ) { DeleteDC ( hDC ) ; ThrowReaderException ( CoderError, ""UnableToCreateDC"" ) ; }",0
1235,<S2SV_ModStart>!= START_CODE_PREFIX ) { if ( ps_stream -> u4_offset >= ps_stream -> u4_max_offset ) break ; <S2SV_ModStart>!= START_CODE_PREFIX ) { if ( ps_stream -> u4_offset >= ps_stream -> u4_max_offset ) break ; <S2SV_ModStart>!= START_CODE_PREFIX ) { if ( ps_stream -> u4_offset >= ps_stream -> u4_max_offset ) break ; <S2SV_ModStart> )!= START_CODE_PREFIX ) { if ( ps_stream -> u4_offset >= ps_stream -> u4_max_offset ) break ; <S2SV_ModStart>!= START_CODE_PREFIX ) { if ( ps_stream -> u4_offset >= ps_stream -> u4_max_offset ) break ; <S2SV_ModStart>!= START_CODE_PREFIX ) { if ( ps_stream -> u4_offset >= ps_stream -> u4_max_offset ) break ; },0
1236,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) flood_duration_test = true ; if (! strcmp ( dentry -> d_name. name, ""ipc_flood_count"" ) ) flood_duration_test = false ; if (! strcmp ( dentry -> d_name. name, ""ipc_flood_duration_ms"" ) ) flood_duration_test = false ; if (! strcmp ( dentry -> d_name. name, ""ipc_flood_count"" ) ) flood_duration_test = true ; if ( flood_duration_test ) { if (! ipc_count ) { ret = size ; goto out ; } if ( ipc_count > MAX_IPC_FLOOD_COUNT ) ipc_count = MAX_IPC_FLOOD_COUNT ; } else { if (! flood_duration_test ) { if (! ipc_count ) { ret = size ; goto out ; } if ( ipc_count > MAX_IPC_FLOOD_COUNT ) ipc_count = MAX_IPC_FLOOD",0
1237,"<S2SV_ModStart> imethod ) ; <S2SV_ModEnd> if ( inflated <S2SV_ModStart> imethod ) ; mono_class_inflate_generic_method ( imethod, <S2SV_ModEnd> & tmp_context ) <S2SV_ModStart> imethod ) ; mono_class_inflate_generic_method ( imethod, <S2SV_ModEnd> & tmp_context ) <S2SV_ModStart> imethod ) ; mono_class_inflate_generic_method ( imethod, <S2SV_ModEnd> & tmp_context ) <S2SV_ModStart> imethod ) ; mono_class_inflate_generic_method ( imethod, <S2SV_ModEnd> & tmp_context ) <S2SV_ModStart> imethod ) ; mono_class_inflate_generic_method ( imethod, <S2SV_ModEnd> & tmp_context ) <S2SV_ModStart> imethod ) ; mono_class_inflate_generic_method ( imethod, <S2SV_ModEnd> & tmp_context ) <S2SV_ModStart> imethod ) ; mono_class_inflate_generic_method ( imethod, <S2SV_ModEnd> & tmp_context ) <S2SV_ModStart> imethod ) ; mono_class_inflate_generic_method ( imethod, <S2SV_ModEnd> & tmp_context ) <S2SV_ModStart> imethod ) ; mono_class_inflate_generic_method ( imethod, <S2SV_ModEnd> & tmp_context )",0
1238,"<S2SV_ModStart> ""nnnnn\\0"" ) ] ; unsigned long <S2SV_ModEnd> tmp ; if <S2SV_ModStart> ( copy_from_user ( buf <S2SV_ModEnd>, buffer, <S2SV_ModStart> ( buf, buffer <S2SV_ModEnd>, count )",0
1239,"<S2SV_ModStart>, ""Pushing <S2SV_blank> input <S2SV_blank> %d <S2SV_blank> : <S2SV_blank> %.30s\\n"" <S2SV_ModEnd>, ctxt ->",0
1240,"<S2SV_ModStart> 1 ; } if ( le32_to_cpu ( raw_super -> log_inode_sectorsize ) > F2FS_MAX_INODE_SEGS || le32_to_cpu ( raw_super -> log_inode_sectorsize ) < F2FS_MIN_INODE_SEGS || le32_to_cpu ( raw_super -> log_inode_sectorsize ) > F2FS_MAX_INODE_SEGS || le32_to_cpu ( raw_super -> log_inode_sectorsize ) > F2FS_MAX_INODE_SEGS || le32_to_cpu ( raw_super -> log_inode_sectorsize ) > F2FS_MAX_INODE_SEGS ) { f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> inode <S2SV_blank> sectorsize <S2SV_blank> (%u)\\n"", le32_to_cpu ( raw_super -> log_inode_sectorsize ) ) ; return 1 ; }",0
1241,"<S2SV_ModStart> is_path ) { <S2SV_ModEnd> char * last_elem <S2SV_ModStart> ( ( ( strncmp ( & name [ 1 ], ""ORIGIN}"", 6 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 1 ], ""PLATFORM}"", 8 ) == 0 && ( len = 9 )!= 0 ) ) ) || ( name [ 1 ] == '{' && ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"", 9 ) == 0 && ( len = 11 )!= 0 ) ) ) ) || ( name [ 1 ] == '{' && ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 9 )!= 0 ) || ( strncmp ( & name [ 2 ], ""PLATFORM}"", 7 ) == 0 && ( len = 9 )!= 0 ) || ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 11 )!= 0 ) )? NULL : l -> l_",0
1242,"<S2SV_ModStart> ) ; } if ( sizeof ( decContainer_t ) > UINT32_MAX / sizeof ( decContainer_t ) ) { DEC_API_TRC ( ""H264SwDecInit# <S2SV_blank> ERROR: <S2SV_blank> Memory <S2SV_blank> allocation <S2SV_blank> failed"" ) ; return ( H264SWDEC_MEMFAIL ) ; }",0
1243,"<S2SV_ModStart> len ) { struct ipv6_txoptions * opt_space = NULL ; <S2SV_ModStart> ) ; } opt_space = rcu_dereference_protected ( np -> opt_space, sock_owned_by_user ( sk ) ) ; if ( opt_space ) opt_space = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ;",0
1244,"<S2SV_ModStart> } if ( unlikely ( iph -> ihl > IP_OPTION_MAX / 4 ) ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INDISCARDS ) ; goto drop ; } iph = ip_hdr ( skb ) ; opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( ip_options_compile ( dev_net ( dev ), opt, skb ) ) goto inhdr_error ; opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( unlikely ( opt -> optlen > IP_OPTION_MAX / 4 ) ) goto inhdr_error ; if ( unlikely ( opt -> optlen > IP_OPTION_MAX / 4 ) ) goto inhdr_error ; if ( unlikely ( opt -> optlen > IP_OPTION_MAX / 4 ) ) goto inhdr_error ; if ( unlikely ( opt -> optlen > IP_OPTION_MAX / 4 ) ) goto inhdr_error ;",0
1245,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> } break ;",1
1246,"<S2SV_ModStart> ) ; } rt = rcu_dereference_protected ( rt -> rt_group, sock_owned_by_user ( in_skb -> sk ) ) ; if (! rt ) { err = - EINVAL ; goto errout ; }",0
1247,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1248,<S2SV_ModStart> goto errout ; if ( oggpack_eop ( opb ) ) goto errout ;,0
1249,"<S2SV_ModStart> ; if ( js_doregexec ( J, <S2SV_ModEnd> re -> prog",0
1250,"<S2SV_ModStart> -> count ) { if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; ++ seq ; break ; }",0
1251,"<S2SV_ModStart> 0 ; krb5_key_data <S2SV_ModEnd> * key_data ; <S2SV_ModStart> err ) ; if ( key_data == NULL ) goto cleanup ; memcpy ( key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ; if ( <S2SV_ModStart> ( key_data_in == NULL ) goto cleanup ; memcpy ( key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ; for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_ver == 1 ) { key_data [ i ]. key_data_ver = 2 ; key_data [ i ]. key_data_type [ 1 ] = KRB5_KDB_SALTTYPE_NORMAL ; key_data [ i ]. key_data_length [ 1 ] = 0 ; key_data [ i ]. key_data_length [ 1 ] = 0 ; num_versions ++ ; ret [ j ] = k5alloc ( sizeof ( struct berval ), & err ) ; if ( ret [ j ] == NULL )",0
1252,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
1253,"<S2SV_ModStart> ] ) ; sqlite3_int64 <S2SV_ModEnd> nByte = sqlite3_value_bytes <S2SV_ModStart> 1 ) ; if ( pCsr -> zInput == 0 ) { rc = SQLITE_NOMEM ; } else { memcpy ( pCsr -> zInput, zByte, nByte ) ; pCsr -> zInput [ nByte ] = 0 ; rc = pTab -> pMod -> xOpen ( pTab -> pTok, pCsr -> zInput, nByte, & pCsr -> pCsr ) ; if ( rc == SQLITE_OK ) { pCsr -> pCsr -> pTokenizer = pTab -> pTok ; } }",0
1254,<S2SV_ModStart> filp ) { mutex_unlock ( & SOCKET_I ( inode ) -> io_mutex ) ;,0
1255,"<S2SV_ModStart> * orelse, string type_comment, int <S2SV_ModEnd> lineno, int <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. type_comment = type_comment",1
1256,"<S2SV_ModStart> MI_CHECK * param <S2SV_ModEnd>, char * <S2SV_ModStart> name ) { if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; else if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n",0
1257,"<S2SV_ModStart> } } return rcu_dereference_protected ( inet6_sk ( sk ) -> inet_opt, sock_owned_by_user ( sk ) ) <S2SV_ModEnd> ; } <S2SV_null>",0
1258,<S2SV_ModStart> ) ) { if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( error_code & PFERR_RSVD_MASK ) ) { vcpu -> run -> exit_reason = KVM_EXIT_INTERNAL_ERROR ; vcpu -> run -> internal. suberror = KVM_INTERNAL_ERROR_SIMUL_EX ; vcpu -> run -> internal. data [ 1 ] = intr_info ; vcpu -> run -> internal. data [ 2 ] = error_code ; } else { if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( error_code & PFERR_RSVD_MASK ) ) { vcpu -> run -> exit_reason = KVM_EXIT_INTERNAL_ERROR ; vcpu -> run -> internal. suberror = KVM_INTERNAL_ERROR_SIMUL_EX ; vcpu -> run -> internal. data [ 1 ] = intr_info ; vcpu -> run -> internal. data [ 2 ] = cr2 ; } else { if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( error_code & PFER,0
1259,"<S2SV_ModStart> ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case NGHTTP2_ERR_INTERNAL_SERVER_ERROR : return ""Internal <S2SV_blank> server <S2SV_blank> error"" ; case",0
1260,<S2SV_ModStart> UINT error ; if ( Stream_GetRemainingLength ( s ) < 4 ) { return CHANNEL_RC_INVALID_DATA ; },0
1261,"<S2SV_ModStart>, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed: <S2SV_blank> %s"" <S2SV_ModEnd>, zmq_strerror ( <S2SV_ModStart>, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed: <S2SV_blank> %s"" <S2SV_ModEnd>, zmq_strerror ( <S2SV_ModStart>, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed: <S2SV_blank> %s"" <S2SV_ModEnd>, zmq_strerror ( <S2SV_ModStart>, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed: <S2SV_blank> %s"" <S2SV_ModEnd>, zmq_strerror ( <S2SV_ModStart>, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed: <S2SV_blank> %s"" <S2SV_ModEnd>, zmq_strerror ( <S2SV_ModStart>, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed: <S2SV_blank> %s"" <S2SV_ModEnd>, zmq_strerror ( <S2SV_ModStart>, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed: <S2SV_blank> %s"" <S2SV_ModEnd>, zmq_strerror (",0
1262,"<S2SV_ModStart> return chg ; if ( hugepage_subpool_get_pages ( spool, chg ) ) { ret = - ENOSPC ; set_vma_resv_map ( vma, resv_map ) ; set_vma_resv_flags ( vma, HPAGE_RESV_OWNER ) ; } else { ret = hugetlb_acct_memory ( h, chg ) ; if ( ret < 0 ) { hugepage_subpool_put_pages ( spool, chg ) ; return ret ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; return 0 ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; return ret ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; return 0",0
1263,"<S2SV_ModStart> struct flowi6 fl6 ; struct ipv6_txoptions * opt <S2SV_ModStart> ( sock_net ( sk ), SCTP_MIB_OUTSCTPPACKS ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModEnd> memset ( & <S2SV_ModStart> & fl6, <S2SV_ModEnd> opt, np <S2SV_ModStart> = 1 ; rcu_read_lock ( ) ; <S2SV_ModStart> = 1 ; rcu_read_unlock ( ) ;",0
1264,"<S2SV_ModStart> -> s_type!= & ecryptfs_fs_type ) { rc = - EINVAL ; printk ( KERN_ERR ""Mount <S2SV_blank> on <S2SV_blank> filesystem <S2SV_blank> of <S2SV_blank> type <S2SV_blank> "" ""eCryptfs <S2SV_blank> explicitly <S2SV_blank> disallowed <S2SV_blank> due <S2SV_blank> to <S2SV_blank> known <S2SV_blank> incompatibilities\\n"" ) ; goto out_free ; } if ( path. dentry -> d_sb -> s_type!= & ecryptfs_fs_type ) { rc = - EINVAL ; printk ( KERN_ERR ""Mount <S2SV_blank> on <S2SV_blank> filesystem <S2SV_blank> of <S2SV_blank> type <S2SV_blank> "" ""eCryptfs <S2SV_blank> explicitly <S2SV_blank> disallowed <S2SV_blank> due <S2SV_blank> to <S2SV_blank> known <S2SV_blank> incompatibilities\\n"" ) ; goto out_free ; } if ( path. dentry -> d_sb -> s_type!= & ecryptfs_fs_type ) { rc = - EINVAL ; printk ( KERN_ERR ""Mount <S2SV_blank> on <S2SV_blank> filesystem <S2SV_blank> of <S2SV_blank> type <S2SV_blank> "" ""eCryptfs <S2SV_blank> explicitly <S2SV_blank> disallowed <S2SV_blank> due <S2SV_blank> to <S2SV_blank> known <S2SV_blank> incompatibilities\\n"" ) ; goto out_free ; }",0
1265,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
1266,<S2SV_ModStart> ; MATLAB_KO : quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
1267,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> nego_process_negotiation_failure ( rdpNego <S2SV_ModStart> ; WLog_DBG ( TAG <S2SV_ModEnd>, ""RDP_NEG_FAILURE"" ) <S2SV_ModStart> = NEGO_STATE_FAIL ; return 0 ;",0
1268,"<S2SV_ModStart> int ret, last_pwd ; if ( keepold ) return KADM5_PROTECT_PRINCIPAL",0
1269,"<S2SV_ModStart>, result = RLC_OK ; bn_t t ; bn_null ( t ) ; RLC_TRY { bn_null ( t ) ; RLC_TRY { bn_new ( t ) ; RLC_TRY { bn_zero ( m ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, RSA_PUB ) ; * p_len = k_len - 3 - m_len ; for ( i = 0 ; i < * p_len ; i ++ ) { bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, pad ) ; } bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, 0 ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, 0 ) ; bn_lsh ( m, m, 8 ) ; bn_mod_2b ( m, m, ( k_len - * p_len ) * 8 ) ; bn_mod_2b ( m, m, ( k_len - * p_len ) * 8 ) ;",0
1270,<S2SV_ModStart> ++ ) { if (! is_undef ( r2 ) ) mem [ r1. i ] = r2. i ; <S2SV_ModStart> ++ ) { if (! is_undef ( r2 ) ) mem [ r1. i ] = 0 ; <S2SV_ModStart> ++ ) { if (! is_undef ( r2 ) ) mem [ r1. i ] = 0 ; <S2SV_ModStart> ++ ) { if (! is_undef ( r2 ) ) mem [ r1. i ] = 0 ; <S2SV_ModStart> ++ ) { if (! is_undef ( r2 ) ) mem [ r1. i ] = 0 ; <S2SV_ModStart> ++ ) { if (! is_undef ( r2 ) ) mem [ r1. i ] = 0 ; <S2SV_ModStart> ++ ) { if (! is_undef ( r2 ) ) mem [ r1. i ] = 0 ; } <S2SV_ModStart> ++ ) { if (! is_undef ( r2 ) ) mem [ r1. i ] = 0 ; } <S2SV_ModStart> ++ ) { if (! is_undef ( r2 ) ) mem [ r1. i ] = 0 ; } <S2SV_ModStart> ++ ) { if (! is_undef ( r2,0
1271,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
1272,<S2SV_ModStart> { rq = <S2SV_ModEnd> hctx -> tags <S2SV_ModStart> hctx -> tags -> rqs [ <S2SV_ModEnd> off + bit <S2SV_ModStart> off + bit ] <S2SV_ModEnd> ; if (,1
1273,"<S2SV_ModStart> ( psf = psf_calloc <S2SV_ModEnd> ( 1,",0
1274,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fix_interp_filter ( VP9_COMMON <S2SV_ModStart> ++ j ) { if ( cm -> counts. switchable_interp [ j ] [ i ] > 0 ) count [ i ] += cm -> counts. switchable_interp [ j ] [ i ] ; c += ( count [ i ] > 0 ) ; } if ( c == 0 ) { for ( i = 0 ; i < SWITCHABLE_FILTERS ; ++ i ) count [ i ] = 0 ; for ( j = 0 ; j < SWITCHABLE_FILTER_CONTEXTS ; ++ j ) count [ i ] += cm -> counts. switchable_interp [ j ] [ i ] ; c += ( count [ i ] > 0 ) ; } if ( c == 1 ) { for ( i = 0 ; i < SWITCHABLE_FILTERS ; ++ i ) { if ( count [ i ] > 0 ) { for ( i = 0 ; i < SWITCHABLE_FILTERS ; ++ i ) count [ i ] = 0 ; for ( j = 0 ; j < SWITCHABLE_FILTER_CONTEXTS ; ++ j ) count [ i,0
1275,"<S2SV_ModStart>'<S2SV_blank>') { if ( operand >= MAX_OPERANDS ) { return false ; } <S2SV_ModStart> ++ ; } if ( operand >= MAX_OPERANDS ) { op -> operands_count -- ; op -> operands [ operand ]. type = ARM_GPR ; op -> operands [ operand ]. reg = r_num_math ( NULL, token + 1 ) ; if ( op -> operands [ operand ]. reg > 31 ) { return false ; } operand ++ ; token = next ; continue ; } switch ( token [ 0 ] ) { case 'w' : op -> operands_count ++ ; op -> operands [ operand ]. type = ARM_GPR ; op -> operands [ operand ]. reg_type = ARM_REG64 ; op -> operands [ operand ]. reg = r_num_math ( NULL, token + 1 ) ; if ( op -> operands [ operand ]. reg > 31 ) { return false ; } break ; case 'z' : op -> operands_count ++ ; op -> operands [ operand ]. type = ARM_GPR ; op -> operands [ operand ]. reg_type = ARM_REG64 ; op -> operands [ operand ]. reg",0
1276,"<S2SV_ModStart> cpi ) { <S2SV_ModEnd> VP9_COMMON * const <S2SV_ModStart> -> act_zbin_adj = 0 <S2SV_ModEnd> ; vpx_setup_src_planes ( <S2SV_ModStart> = 0 ; vpx_setup_pre_planes ( xd, 0, get_ref_frame_buffer ( cpi, FIRST_FRAME ), 0, 0, NULL ) ; vpx_setup_dst_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vp9_setup_block_planes ( & x -> e_mbd, cm -> subsampling_x, cm -> subsampling_y ) ; vpx_memset ( xd -> above_context [ 0 ], 0, sizeof ( * xd -> above_context [ 0 ] ) * 2 * aligned_mi_cols * MAX_MB_PLANE ) ; vpx_memset ( xd -> above_seg_context, 0, sizeof ( * xd -> above_seg_context ) * aligned_mi_cols ) ; vpx_memset ( xd -> above_seg_context, 0, sizeof ( * xd -> above_seg_context",0
1277,"<S2SV_ModStart> = htc_request_check_host_hdr ( sp <S2SV_ModEnd> ) ; if <S2SV_ModStart> 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } retval = http_splitline ( sp -> wrk, sp -> fd, hp, htc, HTTP_HDR_REQ, HTTP_HDR_URL, HTTP_HDR_PROTO ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } retval = http_splitline ( sp -> wrk, sp -> fd, hp, htc, HTTP_HDR_PROTO, HTTP_HDR_URL, HTTP_HDR_PROTO ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } http_ProtoVer ( hp ) ; retval = htc_request_check_host_hdr ( sp <S2SV_ModEnd> ) ; if <S2SV_ModStart> 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval )",0
1278,"<S2SV_ModStart> ( image ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; <S2SV_ModStart> ReadBlobLSBShort ( image ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; <S2SV_ModStart> ReadBlobLSBShort ( image ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; <S2SV_ModStart> ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; status = SetImageExtent ( image, image -> rows, image -> columns ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; <S2SV_ModStart> ReadBlobLSBShort ( image ) ; status = SetImageExtent ( image, image -> rows, image -> columns, image -> rows ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ;",0
1279,"<S2SV_ModStart> snd_cards_lock ) ; if ( test_bit ( SNDRV_CARDS - 1, snd_cards_lock ) ) err = - EBUSY ; else if ( test_bit ( SNDRV_CARDS - 1, snd_cards_lock ) ) err = - EBUSY ; else if ( idx >= SNDRV_CARDS - 1 ) err = - ENODEV ; if ( err < 0 ) { mutex_unlock ( & snd_card_mutex ) ; dev_err ( parent, ""cannot <S2SV_blank> find <S2SV_blank> the <S2SV_blank> slot <S2SV_blank> for <S2SV_blank> index <S2SV_blank> %d <S2SV_blank> (range <S2SV_blank> 0-%i), <S2SV_blank> error: <S2SV_blank> %d\\n"", idx, snd_cards_lock - 1 ) ; kfree ( card ) ; return err ; }",0
1280,"<S2SV_ModStart> ""3"" ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; } if ( mpz_cmp ( s, & k -> e, & k -> n )!= 0 ) { return ""4"" ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; } <S2SV_ModStart> += padlen + 3 ; if ( mpz_cmp ( s, & k -> n, & k -> e )!= 0 ) { return ""5"" ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; }",0
1281,"<S2SV_ModStart> len ) ; if ( len + sizeof ( tETH_HDR ) > TAP_MAX_PKT_WRITE_LEN ) { LOG_ERROR ( ""btpan_tap_send <S2SV_blank> eth <S2SV_blank> packet <S2SV_blank> size:%d <S2SV_blank> is <S2SV_blank> exceeded <S2SV_blank> limit!"", len + sizeof ( tETH_HDR ) ) ; return - 1 ; } <S2SV_ModStart> ) ) ; if ( len + sizeof ( tETH_HDR ) > TAP_MAX_PKT_WRITE_LEN ) { LOG_ERROR ( ""btpan_tap_send <S2SV_blank> eth <S2SV_blank> packet <S2SV_blank> size:%d <S2SV_blank> is <S2SV_blank> exceeded <S2SV_blank> limit!"", len + sizeof ( tETH_HDR ) ) ; return - 1 ; }",0
1282,<S2SV_ModStart> u1_field_pic_flag ) ; if ( i4_poc -> i4_delta_pic_order_cnt_lsb!= ps_cur_poc -> i4_delta_pic_order_cnt_lsb || i4_poc -> i4_delta_pic_order_cnt_msb!= ps_cur_poc -> i4_delta_pic_order_cnt_msb ) { ps_dec -> i4_delta_pic_order_cnt_lsb = ps_cur_poc -> i4_delta_pic_order_cnt_lsb ; ps_dec -> i4_delta_pic_order_cnt_msb = ps_cur_poc -> i4_delta_pic_order_cnt_msb ; ps_dec -> i4_delta_pic_order_cnt_lsb = ps_cur_poc -> i4_delta_pic_order_cnt_lsb ; ps_dec -> i4_delta_pic_order_cnt_msb = ps_cur_poc -> i4_delta_pic_order_cnt_msb ; },0
1283,"<S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; if ( rdata!= NULL ) { OPENSSL_free ( rdata ) ; pitem_free ( item ) ; return ( 0 ) ; } <S2SV_ModStart> item ) ; if ( s -> packet_length == 0 ) { SSLerr ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ; if ( s -> state == SSL3_ST_SR_FINISHED_A || s -> state == SSL3_ST_CR_FINISHED_A ) { BIO_ctrl ( SSL_get_rbio ( s ), BIO_CTRL_DGRAM_SCTP_GET_RCVINFO, sizeof ( rdata -> recordinfo ), & rdata -> recordinfo ), & rdata -> recordinfo ) ; } else { SSLerr ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ; if ( s -> state == SSL3_ST_SR_FINISHED_A ) { BIO_ctrl ( SSL_get_rbio ( s ), BIO_CTRL_DGRAM_SCTP_GET_RCVINFO, sizeof ( rdata -> record",0
1284,"<S2SV_ModStart> args -> buffer_count > I915_NUM_BUFFERS - 1 ) { DRM_DEBUG ( ""execbuf2 <S2SV_blank> with <S2SV_blank> %d <S2SV_blank> buffers\\n"", args -> buffer_count ) ; return - EINVAL ; } if ( args -> buffer_count > I915_NUM_BUFFERS - 1 ) { DRM_DEBUG ( ""execbuf2 <S2SV_blank> with <S2SV_blank> %d <S2SV_blank> buffers\\n"", args -> buffer_count ) ; return - EINVAL ; } ret = copy_from_user ( exec2_list, ( struct drm_i915_relocation_entry __user * ) ( uintptr_t ) args -> buffers_ptr, sizeof ( * exec2_list ) * args -> buffer_count ) ; if ( ret!= 0 ) { DRM_DEBUG ( ""failed <S2SV_blank> to <S2SV_blank> copy <S2SV_blank> %d <S2SV_blank> exec <S2SV_blank> entries <S2SV_blank> back <S2SV_blank> to <S2SV_blank> user <S2SV_blank> (%d)\\n"", args -> buffer_count, ret ) ; drm_free_large ( exec2_list ) ; return ret ; }",0
1285,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_iocinfo * karg <S2SV_ModEnd> ; struct pci_dev <S2SV_ModStart> mpt_ioctl_iocinfo * karg <S2SV_ModEnd> ; int iocnum <S2SV_ModStart> return PTR_ERR ( karg <S2SV_ModEnd> ) ; } <S2SV_ModStart> return PTR_ERR ( karg <S2SV_ModEnd> ) ; } <S2SV_ModStart> ( MYIOC_s_ERR_FMT ""%s@%d::mpt_getiocinfo <S2SV_blank> - <S2SV_blank> ioc%d <S2SV_blank> not <S2SV_blank> found!\\n"", __FILE__, __LINE__, iocnum ) ; kfree ( karg ) ; return - ENODEV ;",0
1286,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
1287,"<S2SV_ModStart> * mntent, <S2SV_ModEnd> const char * <S2SV_ModStart> mnt_type, unsigned long flags <S2SV_ModEnd>, char *",0
1288,"<S2SV_ModStart> = 8 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1289,"<S2SV_ModStart> ab ) { <S2SV_ModEnd> size_t len_sent = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> char * buf <S2SV_ModStart> char __user * p <S2SV_ModEnd> ; p = <S2SV_ModStart> -> arg_start ; if (! audit_log_format ( * ab, ""argc=%u"", context -> execve. argc ) ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } <S2SV_ModEnd> buf = kmalloc <S2SV_ModStart> + 1, GFP_KERNEL ) ; if (! buf ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } for ( i = 0 ; i < context -> execve. argc ; i ++ ) { len = audit_log_single_execve_arg ( context, ab, i, & len_sent, p, buf ) ; if ( len <= 0 ) break ; p += len ; } <S2SV_ModEnd> kfree ( buf",0
1290,"<S2SV_ModStart>, O_WRONLY | O_CREAT <S2SV_ModEnd> | O_CLOEXEC |",0
1291,"<S2SV_ModStart> err_info ) { <S2SV_ModEnd> char line [ <S2SV_ModStart> ; char line [ NETSCREEN_LINE_LENGTH ] ; char cap_int [ NETSCREEN_MAX_INT_NAME_LENGTH ] ; gboolean cap_dir ; char cap_dst [ 13 ] ; if ( file_gets ( line, NETSCREEN_LINE_LENGTH, wth -> random_fh ) == NULL ) { * err = WTAP_ERR_SHORT_READ ; } return FALSE ; } if ( file_gets ( line, NETSCREEN_LINE_LENGTH, wth -> random_fh ) == NULL ) { * err = WTAP_ERR_SHORT_READ ; } return FALSE ; } pkt_len = parse_netscreen_rec_hdr ( phdr, line, cap_int, & cap_dir, & cap_dir, cap_dst, err, err_info ) ; if ( pkt_len == - 1 ) return FALSE ; if (! parse_netscreen_hex_dump ( wth -> random_fh, pkt_len, cap_int, & cap_dir, cap_dst, phdr, buf, err, err_info ) ) return FALSE ; if ( pkt_len ==",0
1292,<S2SV_ModStart> * rq ) <S2SV_ModEnd> { int cpu <S2SV_ModStart> ; u64 irq_time ; if ( rq -> skip_clock_update ) return <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
1293,"<S2SV_ModStart> } else { <S2SV_ModEnd> raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModStart> } else { <S2SV_ModEnd> raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModStart> } else { <S2SV_ModEnd> raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModStart> } else { <S2SV_ModEnd> raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModStart> } else { <S2SV_ModEnd> raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModStart> } break ;",0
1294,<S2SV_ModStart> st ) { <S2SV_ModEnd> unsigned long flags <S2SV_ModStart> int notify ; <S2SV_ModEnd> RING_PUSH_RESPONSES_AND_CHECK_NOTIFY ( & <S2SV_ModStart> ) ; } <S2SV_ModEnd> blk_rings -> common <S2SV_ModStart> case BLKIF_PROTOCOL_NATIVE : memcpy <S2SV_ModEnd> ( RING_GET_RESPONSE ( <S2SV_ModStart> case BLKIF_PROTOCOL_X86_32 : memcpy <S2SV_ModEnd> ( RING_GET_RESPONSE ( <S2SV_ModStart> case BLKIF_PROTOCOL_X86_64 : memcpy <S2SV_ModEnd> ( RING_GET_RESPONSE ( <S2SV_ModStart> case BLKIF_PROTOCOL_X86_64 : memcpy <S2SV_ModEnd> ( RING_GET_RESPONSE ( <S2SV_ModStart> case BLKIF_PROTOCOL_X86_32 : memcpy <S2SV_ModEnd> ( RING_GET_RESPONSE ( & <S2SV_ModStart> case BLKIF_PROTOCOL_X86_64 : memcpy <S2SV_ModEnd> ( RING_GET_RESPONSE ( &,0
1295,<S2SV_ModStart> ; if ( ( <S2SV_ModStart> & KADM5_ATTRIBUTES ) || ( entry -> attributes & KRB5_KDB_DISALLOW_ALL_TIX ),0
1296,"<S2SV_ModStart> ; if ( ( datao + 8 < datao ) || ( datao + 8 < 12 ) || ( datao + 8 < buf_size ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteDataFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> order = EXIF_BYTE_ORDER_INTEL ; if ( ( datao + 2 < datao ) || ( datao + 2 < 2 ) || ( datao + 2 > buf_size ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } c = exif_get_short ( buf + o, EXIF_BYTE_ORDER_INTEL ) ; datao += 2 ; exif_mnote_data_fuji_clear ( n ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( en -> log, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ;",0
1297,"<S2SV_ModStart> ; if ( l_strchr <S2SV_ModEnd> ( fname, <S2SV_ModStart> fname, '\\0' ) || l_strchr <S2SV_ModEnd> ( fname, <S2SV_ModStart> fname, '\\0' ) || l_strchr <S2SV_ModEnd> ( fname, <S2SV_ModStart> fname, '\\0' ) || l_strchr <S2SV_ModEnd> ( fname, <S2SV_ModStart> fname, '\\0' <S2SV_ModEnd> ) || l_strchr <S2SV_ModStart> fname, '\\0' <S2SV_ModEnd> ) || l_strchr <S2SV_ModStart> fname, '\\0' <S2SV_ModEnd> ) || l_strchr <S2SV_ModStart> fname, '\\0' <S2SV_ModEnd> ) || l_strchr <S2SV_ModStart> fname, '\\0' ) || l_strchr <S2SV_ModEnd> ( fname, <S2SV_ModStart> fname, '\\0' ) || l_strchr <S2SV_ModEnd> ( fname, <S2SV_ModStart> fname, '\\0' ) || l_strchr <S2SV_ModEnd> ( fname, <S2SV_ModStart> fname, '\\0' <S2SV_ModEnd> ) || l_strchr <S2SV_ModStart> fname, '\\0' <S2SV_ModEnd> ) || l_strchr <S2SV_ModStart> fname, '\\0' <S2SV_ModEnd> ) || l_strchr <S2SV_ModStart> fname, '\\0' <S2SV_ModEnd> ) ||",0
1298,"<S2SV_ModStart> ( ndo, ext_dp, sizeof ( icmp_mpls_ext_object_header_t ) <S2SV_ModEnd> ) ; break <S2SV_ModStart> ( ndo, ext_dp, sizeof ( icmp_mpls_ext_object_header_t ) <S2SV_ModEnd> ) ; break <S2SV_ModStart> ( ndo, ext_dp, sizeof ( icmp_mpls_ext_object_header_t ) <S2SV_ModEnd> ) ; break <S2SV_ModStart> ( ndo, ext_dp, sizeof ( icmp_mpls_ext_object_header ) <S2SV_ModEnd> ) ; break <S2SV_ModStart> ( ndo, ext_dp, sizeof ( icmp_mpls_ext_object_header ) <S2SV_ModEnd> ) ; break <S2SV_ModStart> ( ndo, ext_dp, sizeof ( icmp_mpls_ext_object_header_t ) <S2SV_ModEnd> ) ; break <S2SV_ModStart> ( ndo, ext_dp, sizeof ( icmp_mpls_ext_object_header_t ) <S2SV_ModEnd> ) ; break",0
1299,<S2SV_ModStart> dentry * dir <S2SV_ModEnd> ; int dir_has_key <S2SV_ModStart> 0 ; } <S2SV_ModEnd> spin_lock ( & <S2SV_ModStart> dir_has_key = ( d_inode ( dir ) -> i_crypt_info <S2SV_ModEnd>!= NULL ),1
1300,"<S2SV_ModStart> void ) { <S2SV_ModEnd> SERVICE_OPTIONS * opt <S2SV_ModStart> 1 ) ; <S2SV_ModEnd> crypto_thread_write_lock ( stunnel_locks <S2SV_ModStart> LOCK_SECTIONS ] ) ; opt = service_options. next ; service_options. next = NULL ; service_free ( & service_options ) ; while ( opt ) { unsigned i ; <S2SV_ModEnd> opt = opt <S2SV_ModStart> servname ) ; SSL_CTX_flush_sessions ( opt -> ctx, ( long ) time ( NULL ) + opt -> session_timeout + 1 ) ; s_log ( LOG_DEBUG, ""Service <S2SV_blank> [%s] <S2SV_blank> closed"", opt -> servname ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1301,"<S2SV_ModStart> ; } if ( mtree_atol ( & p ) > MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } if ( <S2SV_ModStart> p ) > MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } if ( argc < 2 ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Not <S2SV_blank> enough <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } result = ( * pack ) ( argc, numbers, & error ) ; if ( error!= NULL ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""%s"", error ) ; return ARCHIVE_WARN ; }",0
1302,<S2SV_ModStart> parent ) ; if ( i -> width > i -> parent -> width ) i -> parent -> width = i -> parent -> width ; if ( i -> height > i -> parent -> height ) i -> parent -> height = i -> parent -> height ; context. curX = i -> posX ; if ( i -> width > i -> parent -> width ) i -> parent -> width = i -> parent -> width ; context. curY = i -> posY ; if ( i -> parent -> mode & NGIFLIB_MODE_INDEXED ) { # ifdef NGIFLIB_ENABLE_CALLBACKS context. line_p. p32 = i -> parent -> frbuff. p32 + ( u32 ) i -> posY * i -> parent -> width ; context. line_p. p32 = i -> parent -> frbuff. p32 + ( u32 ) i -> posX * i -> parent -> width ; context. line_p. p32 = i -> parent -> frbuff. p32 + ( u32 ) i -> posY * i -> parent -> width ; context. line_p. p32 = i -> parent -> frbuff. p32 + ( u32 ) i ->,0
1303,"<S2SV_ModStart> if ( p + l > buf + n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length <S2SV_blank> encoding <S2SV_blank> l=%u <S2SV_blank> n=%u)"", l, ( unsigned ) n ) ; goto error ; } <S2SV_ModStart> n ) ; if ( l == 0 && type!= MINISSDPD_SEARCH_ALL && type!= MINISSDPD_GET_VERSION && type!= MINISSDPD_NOTIF ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0, <S2SV_blank> type=%d)"", type ) ; goto error ; } if ( l == 0 && type!= MINISSDPD_GET_VERSION && type!= MINISSDPD_NOTIF ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0, <S2SV_blank> type=%d)"", type ) ; goto error ; } if ( l == 0 && type!= MINISSDPD_SEARCH_ALL && type!= MINISSDPD_GET_VERSION && type!= MINISSDPD_GET_VERSION && type!= MINISSDPD_NOTIF ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0, <S2SV_blank> type=%d)"", type ) ; goto",0
1304,"<S2SV_ModStart> RAnalOp next_op ; if ( len < 2 ) { avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; } else if ( len < 2 ) { avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; } else { avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; }",0
1305,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [ <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char explicit_vr [",0
1306,"<S2SV_ModStart> void ) { if (! recovery_is_in_recovery_mode ( ) ) { recovery_set_error ( ERROR_RECOVERY_MODE_NOT_SUPPORTED, ""Recovery <S2SV_blank> mode <S2SV_blank> is <S2SV_blank> in <S2SV_blank> recovery <S2SV_blank> mode <S2SV_blank> is <S2SV_blank> in <S2SV_blank> recovery <S2SV_blank> mode <S2SV_blank>!= <S2SV_blank> in <S2SV_blank> recovery <S2SV_blank> mode <S2SV_blank>!= <S2SV_blank> in <S2SV_blank> recovery <S2SV_blank> mode <S2SV_blank>!= <S2SV_blank> in <S2SV_blank> recovery <S2SV_blank> mode <S2SV_blank>!= <S2SV_blank> in <S2SV_blank> recovery <S2SV_blank> mode <S2SV_blank>!= <S2SV_blank> in <S2SV_blank> recovery <S2SV_blank> mode <S2SV_blank>!= <S2SV_blank> in <S2SV_blank> recovery <S2SV_blank> mode <S2SV_blank>!= <S2SV_blank> in <S2SV_blank> recovery <S2SV_blank> mode"" ) ; recovery_set_error ( ERROR_RECOVERY_MODE_NOT_SUPPORTED, ""Recovery <S2SV_blank> mode <S2SV_blank> is <S2SV_blank> in <S2SV_blank> recovery <S2SV_blank> mode <S2SV_blank>!= <S2SV_blank> in <S2SV_blank> recovery <S2SV_blank> mode <S2SV_blank>!= <S2SV_blank> in <S2SV_blank> recovery <S2SV_blank> mode <S2SV_blank>!= <S2SV_blank> in <S2SV_blank> recovery <S2SV_blank> mode <S2SV_blank>!= <S2SV_blank> in <S2SV_blank> recovery <S2SV_blank> mode <S2SV_blank>!= <S2SV_blank> in <S2SV_blank> recovery <S2SV_blank> mode <S2SV_blank>!= <S2SV_blank> in <S2SV_blank> recovery <S2SV_blank> mode <S2SV_blank>!= <S2SV_blank> in <S2SV_blank> recovery <S2SV_blank> mode <S2SV_blank>!= <S2SV_blank> in <S2SV_blank> recovery <S2SV_blank> mode <S2SV_blank>!= <S2SV_blank> in <S2SV_blank> recovery <S2SV_blank> mode"" ) ; }",0
1307,"<S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd>, hashTable [ <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT0 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT0 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT1 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT2 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT3 <S2SV_ModEnd> ) ) ; <S2SV_ModStart> ( interface, ENC624J600_EHT4 <S2SV_ModEnd> ) )",0
1308,"<S2SV_ModStart> packets ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1309,"<S2SV_ModStart> ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0)"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0)"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0)"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0)"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0)"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0)"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0)"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0)"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0)"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0)"" <S2SV_ModEnd> ) ; goto <S2SV_ModStart> ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0)"" <S2SV_ModEnd> ) ; goto",0
1310,"<S2SV_ModStart> ) { WORD32 st_rps_idx, ai4_num_st_curr_before, ai4_num_st_curr_after, u4_num_lt_curr, u4_num_st_curr_foll ; WORD8 ai1_curr_delta_poc_msb_present_flag [ MAX_DPB_SIZE ] ; WORD8 ai1_curr_delta_poc_msb_present_flag [ MAX_DPB_SIZE ], ai1_curr_delta_poc_msb_present_flag [ u4_num_st_curr_before ] ; WORD8 ai1_curr_delta_poc_msb_present_flag [ u1_num_st_curr_before ], ai1_curr_delta_poc_msb_present_flag [ u1_num_st_curr_after ], ai1_foll_delta_poc_msb_present_flag [ u1_num_st_curr_before ], ai1_curr_delta_poc_msb_present_flag [ u1_num_st_curr_",0
1311,"<S2SV_ModStart> PTRACE_GET_THREAD_AREA : if ( request == PTRACE_GETREGS ) ret = copy_regset_to_user ( child, & user_arm_view, REGSET_GPR, 0, sizeof ( struct pt_regs ), datap ) ; else ret = copy_regset_to_user ( child, & user_arm_view, REGSET_FPR, 0, sizeof ( union fp_state ), datap ) ; break ; case PTRACE_SETFPREGS : ret = copy_regset_to_user ( child, & user_arm_view, REGSET_FPR, 0, sizeof ( union fp_state ), datap ) ; break ; case PTRACE_GET_SYSCALL : task_thread_info ( child ) -> syscall = data ; ret = 0 ; break ; # ifdef CONFIG_IWMMXT case PTRACE_GETWMMXREGS : ret = ptrace_getwmmxregs ( child, datap ) ; break ; case PTRACE_SETWMMXREGS : ret = ptrace_setwmmxregs ( child, datap ) ;",0
1312,<S2SV_ModStart> goto fail ; } if ( args -> shader_rec_count > UINT_MAX / sizeof ( struct vc4_shader_state ) ) { ret = - EINVAL ; goto fail ; },0
1313,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> print_object ( cJSON <S2SV_ModStart> = 0 ; <S2SV_ModEnd> while ( child <S2SV_ModStart> ) { ++ numentries ; child = child -> next ; } if (! entries ) { cJSON_free ( entries ) ; return 0 ; } entries [ i ++ ] = ret = print_value ( child, depth, fmt ) ; if ( str && ret ) len += strlen ( ret ) + 2 + ( fmt? 2 + depth : 0 ) ; else fail = 1 ; child = child -> next ; } if (! out ) { cJSON_free ( entries ) ; return 0 ; } if (! fail ) { for ( i = 0 ; i < numentries ; ++ i ) { if ( names [ i ] ) cJSON_free ( names [ i ] ) ; if ( entries [ i ] ) cJSON_free ( entries [ i ] ) ; if ( entries [ i ] ) cJSON_free ( entries [ i ] ) ; cJSON_free ( entries [ i ] ) ; cJSON_free ( entries [ i ] ) ; cJSON_free ( names ) ; cJSON_free ( entries ) ; return 0 ;",0
1314,"<S2SV_ModStart> int tagval, size_t <S2SV_ModEnd> * length )",0
1315,"<S2SV_ModStart> ; other = rcu_dereference_protected ( sk -> sk_omem_alloc, sock_owned_by_user ( sk ) ) <S2SV_ModEnd> ; if ( <S2SV_ModStart>!= sk ) <S2SV_ModEnd> writable = 0 <S2SV_ModStart> = 0 ; <S2SV_ModEnd> sock_poll_wait ( file <S2SV_ModStart> wait ) ; <S2SV_ModEnd> sock_put ( other",0
1316,<S2SV_ModStart> ] ; size_t <S2SV_ModEnd> value ; if <S2SV_ModStart> ) c ; } <S2SV_ModEnd> value = ( <S2SV_ModStart> ) ( buffer <S2SV_ModEnd> [ 0 ] <S2SV_ModStart> [ 1 ] <S2SV_ModEnd> << 24 ; <S2SV_ModStart> [ 2 ] <S2SV_ModEnd> << 16 ; <S2SV_ModStart> [ 3 ] <S2SV_ModEnd> ; quantum. <S2SV_ModStart>. unsigned_value = <S2SV_ModEnd> value & 0xffffffff <S2SV_ModStart>. unsigned_value = <S2SV_ModEnd> value & 0xffffffff,0
1317,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; sendClean ( outputbuffer ) ;",1
1318,<S2SV_ModStart> void exit_io_context ( struct task_struct * task <S2SV_ModEnd> ) { struct <S2SV_ModStart> * ioc ; mutex_lock <S2SV_ModEnd> ( current ) <S2SV_ModStart> ; ioc = task <S2SV_ModEnd> -> io_context ; <S2SV_ModStart> -> io_context ; task <S2SV_ModEnd> -> io_context = <S2SV_ModStart> NULL ; task_unlock <S2SV_ModEnd> ( current ),0
1319,<S2SV_ModStart> = 0 ; if ( xtregs -> cp0 >= sizeof ( xtregs_coprocessor_t ) ) return - EINVAL,0
1320,<S2SV_ModStart> 0 ) { if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( header -> buffer. length < token_wrapper_len + 14 ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } <S2SV_ModEnd> ptr = ( <S2SV_ModStart>,0
1321,"<S2SV_ModStart> data ) { <S2SV_ModEnd> int ret ; <S2SV_ModStart> ; ret = xen_pcibk_read_config_word <S2SV_ModEnd> ( dev, <S2SV_ModStart> |= PCI_COMMAND_IO ; if (! pci_is_enabled ( dev ) ) return ret ; for ( i = 0 ; i < PCI_ROM_RESOURCE ; i ++ ) { if ( dev -> resource [ i ]. flags & IORESOURCE_IO ) * value |= PCI_COMMAND_IO ; if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; } return ret ; } for ( i = 0 ; i < PCI_ROM_RESOURCE ; i ++ ) { if ( dev -> resource [ i ]. flags & IORESOURCE_IO ) * value |= PCI_COMMAND_IO ; if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; } return",0
1322,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * frame ; if ( ctx -> frame_parallel_decode ) { VPxWorker * const worker = ctx -> frame_workers ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data1 ; <S2SV_ModStart> * fb ; FrameWorkerData * const frame_worker_data = ( FrameWorkerData * ) worker -> data0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> NULL ) { YV12_BUFFER_CONFIG * const fb = frame -> fb ; yuvconfig2image ( & frame -> img, fb, NULL ) ; return VPX_CODEC_OK ; } <S2SV_ModEnd> return VPX_CODEC_INVALID_PARAM ;",0
1323,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1324,<S2SV_ModStart> plug ) ; if ( unlikely (! capable ( CAP_SYS_RAWIO ) ) ) { ret = - EPERM ; break ; },0
1325,"<S2SV_ModStart> -> dwc ; <S2SV_ModEnd> list_del ( & <S2SV_ModStart> lock ) ; <S2SV_ModEnd> pm_runtime_put ( dwc <S2SV_ModStart> lock ) ; usb_gadget_unmap_request ( dwc -> sysdev, & req -> request, req -> direction ) ; spin_lock ( & dwc -> lock ) ; usb_gadget_giveback_request ( & dep -> endpoint, & req -> request ) ; spin_unlock ( & dwc -> lock ) ; if ( req -> trb ) usb_gadget_unmap_request_by_dev ( dwc -> sysdev, & req -> request, req -> direction ) ; spin_lock ( & dwc -> lock ) ; usb_gadget_giveback_request ( & dep -> endpoint, & req -> request ) ; spin_unlock ( & dwc -> lock ) ; usb_gadget_gadget_giveback_request ( & dep -> endpoint, & req -> request ) ; spin_lock ( & dwc -> lock ) ; usb_gadget_gadget_giveback_request ( & dep -> endpoint, & req -> request ) ; spin_lock ( & dw",0
1326,<S2SV_ModStart> } # else ( void ) # else ( void ) # endif # define YYSTACK_RELOCATE ( 2 ) ( yyssa [ YYINITDEPTH ] ; yytype_int16 * yyssp ; yytype_int16 * yyvs ; YYTYPE * yyvsp ; int yynum ; int yynum ; int yynum ; int yynum ; int yynum ; int yynum ; int yynum ; int yynum ; int yynum ; int yynum ; int yynum ; yynum = 0 ; yynum = 0 ; yynum = 0 ; yynum = 0 ; yynum = 0 ; yynum = 0 ; yynum = 0 ; yynum = 0 ; yynum = 0 ; yynum = 0 ; yynum = 0 ; yynum = 0 ; yynum = 0 ; yynum = 0 ; yynum = 0 ; yynum = 0 ; yynum = 0 ; yynum = 0 ; yynum = 0 ; yynum = 0 ; yynum = 0 ; yynum = 0 ; yynum = 0 ; yynum = 0 ; yynum = 0 ; yynum = 0 ; yynum = 0 ; yynum = 0 ; yynum = 0 ; yy,0
1327,"<S2SV_ModStart> DISCE_REVALIDATE_DOMAIN ] = sas_revalidate_domain, <S2SV_ModEnd> [ DISCE_PROBE ] <S2SV_ModStart> DISCE_SUSPEND ] = sas_suspend_devices <S2SV_ModEnd>, [ DISCE_RESUME <S2SV_ModStart> DISCE_RESUME ] = sas_resume_devices <S2SV_ModEnd>, [ DISCE_DESTRUCT",0
1328,"<S2SV_ModStart> * info, my_bool <S2SV_ModEnd> rep_quick ) { <S2SV_ModStart> ) ) || init_io_cache ( & info -> read_cache, info -> dfile, ( uint ) param -> read_buffer_length, READ_CACHE, share -> pack. header_length, MYF ( MY_WME ) ) || ( rep_quick && init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, 1, MYF ( MY_WME ) ) ) || (! rep_quick && init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, WRITE_CACHE, share -> pack. header_length, MYF ( MY_WME ) ) ) || (! rep_quick && init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, WRITE_CACHE, share -> pack. header_length, 1, MYF ( MY_WME ) ) ) || (! rep_quick && init_io_cache ( & info -> rec_cache, info ->",0
1329,"<S2SV_ModStart> } ; # if uECC_VLI_NATIVE_LITTLE_ENDIAN uECC_word_t * p = signature ; # else uECC_word_t * p = ( uECC_word_t * ) signature ; # endif <S2SV_ModStart> curve ) ; if ( uECC_vli_isZero ( p, num_words ) ) { return 0 ; } carry = regularize_k ( k, tmp, s, curve ) ; if ( uECC_vli_isZero ( p, num_words ) ) { return 0 ; } if (! uECC_vli_isZero ( p, num_words ) ) { return 0 ; } if (! uECC_vli_isZero ( p, num_words ) ) { return 0 ; } if (! uECC_vli_isZero ( p, num_words ) ) { return 0 ; } if (! uECC_vli_isZero ( p, num_words ) ) { return 0 ; } if (! g_rng_function ) { uECC_generate_random_int ( tmp, num_n_words",0
1330,"<S2SV_ModStart> trunc : if (! RPL_DAOACK_D ( daoack -> rpl_flags ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|dao-length <S2SV_blank> too <S2SV_blank> short]"" ) ) ; return ; } <S2SV_ModStart> : if (! RPL_DAOACK_D ( daoack -> rpl_flags ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|dao-length <S2SV_blank> too <S2SV_blank> short]"" ) ) ; return ; } <S2SV_ModStart> : if (! RPL_DAOACK_D ( daoack -> rpl_flags ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|dao-length <S2SV_blank> too <S2SV_blank> short]"" ) ) ; return ; }",0
1331,"<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; err = <S2SV_ModStart> out ; if ( msg -> msg_name ) { struct sockaddr_in * sin = msg -> msg_name ; <S2SV_ModStart> sin -> sin_family = AF_INET ; sin -> sin_port = 0 ; memset ( sin -> sin_zero, 0, sizeof ( sin -> sin_zero ) ) ; <S2SV_ModStart> sin -> sin_family = AF_INET ; sin -> sin_addr. s_addr = ip_hdr ( skb ) -> saddr ; memset ( sin -> sin_zero, 0, sizeof ( sin -> sin_zero )",0
1332,"<S2SV_ModStart> = EXT4_GET_BLOCKS_CREATE_UNWRIT_EXT | EXT4_GET_BLOCKS_CONVERT_UNWRITTEN | EXT4_EX_NOCACHE ; <S2SV_ModStart> |= EXT4_GET_BLOCKS_KEEP_SIZE ; mutex_lock_nested ( & EXT4_I ( inode ) -> i_mmap_mutex, SINGLE_DEPTH_NESTING ) ;",0
1333,"<S2SV_ModStart> ; } else { size_t new_free_total = pool -> free_total * 2 ; if ( pool -> free_total < new_free_total ) { uint32_t new_free_total = pool -> free_total * 2 ; void * new_arr = realloc ( pool -> free_arr, new_free_total * sizeof ( nw_buf * ) ) ; if ( new_arr ) { pool -> free_total = new_free_total ; new_arr = realloc ( pool -> free_arr, new_free_total * sizeof ( nw_buf * ) ) ; if ( new_arr ) { pool -> free_total = new_free_total ; pool -> free_arr = new_arr ; } else { free ( buf ) ; } } }",0
1334,"<S2SV_ModStart> map ; bpf_map_inc <S2SV_ModEnd> ( map,",0
1335,"<S2SV_ModStart> * cp ) { int cval = 0, meta = 0 ; <S2SV_ModStart> [ ] = ""00112233445566778899aAbBcCdDeEfF"" <S2SV_ModEnd> ; const char <S2SV_ModStart> = ""00112233445566778899aAbBcCdDeEfF"" <S2SV_ModEnd> ; const char <S2SV_ModStart> * dp ; if ( * cp == 'x' || * cp == 'X' ) for ( ++ cp ; * cp && ( dp = index ( hex, * cp ) ) && ( dcount ++ < 2 ) ; cp ++ ) cval = ( cval * 16 ) + ( ( int ) ( dp - hex ) / 2 ) ; else if ( * cp == 'o' || * cp == 'O' ) for ( ++ cp ; * cp && ( index ( ""01234567"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 8 ) + ( * cp - '0' ) ; else for ( ; * cp && ( index ( ""0123456789"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( cval * 10 ) + ( * cp",0
1336,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1337,"<S2SV_ModStart> ; if (! Check_ipfix_size ( exporter, DataPtr, size_left ) ) { LogError ( ""Process_ipfix: <S2SV_blank> Bad <S2SV_blank> template <S2SV_blank> size <S2SV_blank> at <S2SV_blank> %s <S2SV_blank> line <S2SV_blank> %u\\n"", exporter -> info. id, __FILE__, __LINE__, strerror ( errno ) ) ; size_left = 0 ; continue ; } <S2SV_ModStart> ; if (! Check_ipfix_size ( exporter, DataPtr, size_left ) ) { LogError ( ""Process_ipfix: <S2SV_blank> Bad <S2SV_blank> template <S2SV_blank> size <S2SV_blank> at <S2SV_blank> %s <S2SV_blank> line <S2SV_blank> %u\\n"", __FILE__, __LINE__, strerror ( errno ) ) ; size_left = 0 ; continue ; } if (! Check_ipfix_size ( exporter, DataPtr, size_left ) ) { LogError ( ""Process_ipfix: <S2SV_blank> Bad <S2SV_blank> template <S2SV_blank> size <S2SV_blank> at <S2SV_blank> %s <S2SV_blank> line <S2SV_blank> %u\\n"", __FILE__, __LINE__, strerror ( errno ) ) ; size_left = 0 ; continue ; }",0
1338,"<S2SV_ModStart> * pixc, * pixm, * pixg, * pixd ; PROCNAME ( ""pixFewColorsOctcubeQuantMixed"" ) ; if ( ( pixm = pixFewColorsOctcubeQuant1 ( pixs, level ) ) == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; if ( pixg = pixFewColorsOctcubeQuant1 ( pixs, level ) ) == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; if ( ( pixg = pixFewColorsOctcubeQuant1 ( pixs, level ) ) == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; if ( ( pixg = pixFewColorsOctcubeQuant1 ( pixs, level ) ) == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; if ( ( pixg = pixFewColorsOctcubeQuant1 ( pixs, level ) ) == NULL ) return (",0
1339,<S2SV_ModStart> err ; } if ( BN_num_bits ( u ) > BN_num_bits ( v ) ) goto err ; for ( i = 0 ; i < ubits ; i ++ ) { if ( BN_num_bits ( v ) > BN_num_bits ( c ) ) goto err ; if ( BN_num_bits ( c ) > BN_num_bits ( u ) ) goto err ; if ( BN_num_bits ( c ) > BN_num_bits ( v ) ) goto err ; if ( BN_num_bits ( c ) > BN_num_bits ( v ) ) goto err ; if ( BN_num_bits ( c ) > BN_num_bits ( c ) ) goto err ; if ( BN_num_bits ( c ) > BN_num_bits ( c ) ) goto err ; if ( BN_num_bits ( c ) > BN_num_bits ( v ) ) goto err ; if ( BN_num_bits ( c ) > BN_num_bits ( v ) ) goto err ; if ( BN_num_bits ( c,0
1340,<S2SV_ModStart> 256 ; vpx_mse16x16_t <S2SV_ModEnd> vf = vp8_mse16x16 <S2SV_ModStart> vf = vp8_mse16x16 <S2SV_ModEnd> ; xd ->,0
1341,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
1342,<S2SV_ModStart> = alloc ; size_t <S2SV_ModEnd> strindex = 0,1
1343,"<S2SV_ModStart> int i, nbits <S2SV_ModEnd> ; if ( <S2SV_ModStart> qfalse ; } <S2SV_ModEnd> if ( msg <S2SV_ModStart> msg -> oob ) { nbits = msg -> bit >> 3 ; for ( i = 0 ; i < nbits ; i ++ ) { value |= ( Huff_getBit ( msg -> data, & msg -> bit ) << ( i + nbits ) ) ; } bits = bits - nbits ; } if ( bits ) { for ( i = 0 ; i < nbits ; i ++ ) { value |= ( Huff_getBit ( msg -> data, & msg -> bit ) << ( i + nbits ) ) ; } bits = bits - nbits ; } if ( bits ) { for ( i = 0 ; i < nbits ; i ++ ) { value |= ( get << ( i + nbits ) ) ; } bits = bits - nbits ; } if ( bits ) { for ( i = 0 ; i < bits ; i += 8 ) { Huff_offsetReceive ( msgHuff. decompressor. tree, & get, msg -> data, & msg -> bit ) ; value |= ( get << ( i + nbits ) ) ; } msg -> readcount = ( msg ->",0
1344,"<S2SV_ModStart> int idx ; struct snd_ctl_elem_id id ; struct snd_ctl_elem_list list ; <S2SV_ModStart> -> count ; list = kcontrol -> list ; <S2SV_ModStart> -> count ; for ( idx = 0 ; idx < kcontrol -> count ; idx ++, id. index ++, id. numid ++ ) { snd_ctl_notify ( card, SNDRV_CTL_EVENT_MASK_ADD, & id ) ; return 0 ; } for ( idx = 0 ; idx < kcontrol -> count ; idx ++, id. index ++, id. numid ++ ) snd_ctl_notify ( card, SNDRV_CTL_EVENT_MASK_ADD, & id ) ; for ( idx = 0 ; idx < kcontrol -> count ; idx ++, id. index ++, id. numid ++ ) snd_ctl_notify ( card, SNDRV_CTL_EVENT_MASK_ADD, & id ) ; return 0 ; }",0
1345,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; if ( dev -> priv_flags & IFF_TX_SKB_SHARING ) { dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; if ( dev -> priv_flags & IFF_TX_SKB_SHARING ) { dev -> priv_flags |= IFF_TX_SKB_SHARING ; if ( dev -> priv_flags & IFF_TX_SKB_SHARING ) { dev -> priv_flags |= IFF_TX_SKB_SHARING ; } else { dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; if ( dev -> priv_flags & IFF_TX_SKB_SHARING ) { dev -> priv_flags |= IFF_TX_SKB_SHARING ; if ( dev -> priv_flags & IFF_TX_SKB_SHARING ) { dev -> priv_flags |= IFF_TX_SKB_SHARING ; } else { dev -> priv_flags &= ~ IFF_TX_,0
1346,"<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> size = overhead <S2SV_ModStart> ; int size ; if ( count < 0 ) return MONGO_ERROR ; for ( i = 0 ; i < count ; i ++ ) { size = overhead ; if ( bson_bson_valid ( conn, bsons [ i ], 1 )!= MONGO_OK ) return MONGO_ERROR ; } for ( i = 0 ; i < count ; i ++ ) { size += bson_size ( bsons [ i ] ) ; if ( mongo_validate_ns ( conn, ns )!= MONGO_OK ) return MONGO_ERROR ; for ( i = 0 ; i < count ; i ++ ) { size += bson_size ( bsons [ i ] ) ; if ( mongo_bson_valid ( conn, bsons [ i ], 1 )!= MONGO_OK ) return MONGO_ERROR ; } if ( ( size - overhead ) > conn -> max_bson_size ) { conn -> err = MONGO_BSON_TOO_LARGE ; return MONGO_ERROR ; } if ( flags & MONGO_CONTINUE_ON_ERROR ) {",0
1347,<S2SV_ModStart> ) ) { gtk_window_destroy ( GTK_WINDOW ( g_wnd_assistant ) ) ; <S2SV_ModStart> FALSE ) { gtk_window_destroy ( GTK_WINDOW ( g_wnd_assistant ) ) ; <S2SV_ModStart> FALSE ) { gtk_window_destroy ( GTK_WINDOW ( g_wnd_assistant ) ) ; } <S2SV_ModStart> FALSE ) { gtk_window_destroy ( GTK_WINDOW ( g_wnd_assistant ) ) ; } else { gtk_window_destroy ( GTK_WINDOW ( g_wnd_assistant ) ) ; } <S2SV_ModStart> FALSE ) { gtk_window_destroy ( GTK_WINDOW ( g_wnd_assistant ) ) ; } <S2SV_ModStart> FALSE ) { gtk_window_destroy ( GTK_WINDOW ( g_wnd_assistant ) ) ; },0
1348,<S2SV_ModStart> - 2 ; if ( plen < 2 ) return 1 ; <S2SV_ModStart> * pid ) <S2SV_ModEnd> ; if (,0
1349,"<S2SV_ModStart> { umode_t mode ; retval = posix_acl_update_mode ( inode, & mode, & acl ) ; if ( retval ) goto err_out ; <S2SV_ModEnd> retval = v9fs_vfs_setattr_dotl <S2SV_ModStart> iattr ) ; <S2SV_ModEnd> } break ;",0
1350,<S2SV_ModStart> ; if (! bin -> classes ) { r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> methods_list ) ; r_list_free ( bin -> imports_list ) ; return false ; } if ( bin -> header. class_size > bin -> size ) { r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> imports_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_free ( bin -> classes_list ) ; r_list_,0
1351,<S2SV_ModStart> case NPPVpluginDescriptionString : type = RPC_TYPE_STRING ; break ; case NPPVpluginWindowSize : type = RPC_TYPE_INT32 ; break ; case NPPVpluginTimerInterval : type = RPC_TYPE_INT32 ; break ; case NPPVpluginNeedsXEmbed : type = RPC_TYPE_INT32 ; break ; case NPPVpluginTransparentBool : type = RPC_TYPE_BOOLEAN ; break ; case NPPVjavascriptPushCallerBool : type = RPC_TYPE_BOOLEAN ; break ; case NPPVpluginKeepLibraryInMemory : type = RPC_TYPE_BOOLEAN ; break ; case NPPVpluginScriptableNPObject : type = RPC_TYPE_NP_OBJECT ; break ;,0
1352,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NEGO_STATE_FAIL ; return ;,0
1353,"<S2SV_ModStart> int i, target_bits_per_mb ; const double correction_factor = get_rate_correction_factor ( cpi ) ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; i = active_best_quality ; do { const int bits_per_mb_at_this_q = ( int ) vp9_rc_bits_per_mb ( cm -> frame_type, i, correction_factor ) ; if ( bits_per_mb_at_this_q <= target_bits_per_mb ) { if ( ( target_bits_per_mb - bits_per_mb_at_this_q ) <= last_error ) { last_error = bits_per_mb_at_this_q - target_bits_per_mb ; break ; } else { last_error = bits_per_mb_at_this_q - target_bits_per_mb ; } } while ( ++ i <= active_worst_quality ) ;",0
1354,<S2SV_ModStart> value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ <S2SV_ModEnd> ; tja1101WritePhyReg (,0
1355,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
1356,"<S2SV_ModStart> data ) { atomic_set ( & c -> refcnt, 1 ) ;",0
1357,"<S2SV_ModStart> ; i ++ ; if ( i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; <S2SV_ModStart> ; i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; <S2SV_ModStart> ; i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; <S2SV_ModStart> ; i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == TYPE ( CHILD ( n, i ) ) == TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; <S2SV_ModStart> ; i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; <S2SV_ModStart> ; i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; <S2SV_ModStart> ; i < NCH ( n ) && TYPE ( CHILD ( n, i ) ) == TYPE ( CHILD ( n, i ) ) == TYPE ( TYPE ( CHILD ( n, i ) ) == TYPE ( CHILD ( n, i ) ) == COMMA ) i ++ ; if ( i < NCH ( n ) &&",0
1358,"<S2SV_ModStart> TX_SIZE tx_size, PREDICTION_MODE <S2SV_ModEnd> mode, int <S2SV_ModStart> int i ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> uint8_t, left_col, 64 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> uint8_t, above_data, 128 + 16 ) ; uint8_t * const_above_row = above_data + 16 ; const int bs = 4 << tx_size ; if ( plane == 0 ) { frame_width = xd -> cur_buf -> y_width ; frame_height = xd -> cur_buf -> y_height ; } else { frame_width = xd -> cur_buf -> uv_width ; frame_height = xd -> cur_buf -> uv_height ; } x0 = ( - xd -> mb_to_left_edge >> ( 3 + pd -> subsampling_x ) ) + x ; y0 = ( - xd -> mb_to_top_edge >> ( 3 + pd -> subsampling_y ) ) + y ; x0 = ( - xd -> mb_to_left_edge >> ( 3 + pd -> subsampling_x ) ) + x ; y0 = (",0
1359,"<S2SV_ModStart> } else { if ( end + 1 > end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern: <S2SV_blank> too <S2SV_blank> many <S2SV_blank> components\\n"" ) ; goto error ; } else if ( end + 1 > end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern: <S2SV_blank> too <S2SV_blank> many <S2SV_blank> components\\n"" ) ; goto error ; } else if ( end + 1 > end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern: <S2SV_blank> too <S2SV_blank> many <S2SV_blank> components\\n"" ) ; goto error ; } else if ( end + 1 > end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern: <S2SV_blank> too <S2SV_blank> many <S2SV_blank> components\\n"" ) ; goto error ; } else if ( end + 1 > end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern: <S2SV_blank> too <S2SV_blank> many <S2SV_blank> components\\n"" ) ; goto error ; } else if ( end + 1 > end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern: <S2SV_blank> too <S2SV_blank> many <S2SV_blank> components\\n"" ) ; goto error ; }",0
1360,<S2SV_ModStart> <!,0
1361,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_completed_io_lock ) ;,1
1362,<S2SV_ModStart> BUG ( ) ; mutex_lock ( & memcg -> thresholds_lock ) ; <S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1363,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct ion_handle * <S2SV_ModStart> ; handle = ion_handle_get_by_id_nolock <S2SV_ModEnd> ( client, <S2SV_ModStart> lock ) ; mutex_unlock ( & client -> lock ) ; return handle <S2SV_ModEnd> ; } <S2SV_null>",0
1364,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> common ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 0 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> ; vpx_wb_write_bit <S2SV_ModEnd> ( wb,",0
1365,"<S2SV_ModStart>, long_tmp, <S2SV_ModEnd> col_nam [ 12 <S2SV_ModStart>, long_tmp, <S2SV_ModEnd> col_nam [ 12 <S2SV_ModStart>, long_tmp, <S2SV_ModEnd> col_nam [ 12 <S2SV_ModStart>, long_tmp, <S2SV_ModEnd> col_nam [ 12 <S2SV_ModStart>, long_tmp, <S2SV_ModEnd> col_nam [ 12 <S2SV_ModStart>, long_tmp, <S2SV_ModEnd> col_nam [ 12 <S2SV_ModStart>, long_tmp, <S2SV_ModEnd> col_nam [ 12 <S2SV_ModStart>, long_tmp, <S2SV_ModEnd> col_nam [ 12 <S2SV_ModStart>, long_tmp, <S2SV_ModEnd> col_nam [ 12 <S2SV_ModStart>, long_tmp, <S2SV_ModEnd> col_nam [ 12 <S2SV_ModStart>, long_tmp, <S2SV_ModEnd> col_nam [ 12 <S2SV_ModStart>, long_tmp, <S2SV_ModEnd> col_nam [ 12 <S2SV_ModStart>, long_tmp, <S2SV_ModEnd> col_nam [ 12 <S2SV_ModStart>, long_tmp, <S2SV_ModEnd> col_nam [ 12 <S2SV_ModStart>, long_tmp, <S2SV_ModEnd> col_nam [ 12",0
1366,<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart>'<S2SV_blank>') ; if ( p == NULL ) return ERROR_INVALID_SYNTAX ; p = osStrchr <S2SV_ModEnd> ( p + <S2SV_ModStart> == '?' ) { p = osStrchr <S2SV_ModEnd> ( p +,0
1367,"<S2SV_ModStart> += 1 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> case COMMA : if ( TYPE ( CHILD ( n, i ) ) == TYPE_COMMENT ) arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case",0
1368,<S2SV_ModStart> KEY_FRAME ) { memset <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> = SEGMENT_DELTADATA ; memset <S2SV_ModEnd> ( xd ->,0
1369,"<S2SV_ModStart> error ; uint16_t n <S2SV_ModEnd> ; uint32_t status <S2SV_ModStart> ( interface, ENC624J600_ESTAT ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModEnd> ) { if <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT <S2SV_ModEnd>, context -> <S2SV_ModStart> ( interface, ENC624J600_CMD_RRXDATA <S2SV_ModEnd>, ( uint8_t <S2SV_ModStart> ( status & ENC624J600_RSV_RECEIVED_OK <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & ENC624J600_RSV_RECEIVED_OK <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & ENC624J600_RSV_RECEIVED_OK <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & ENC624J600_RSV_RECEIVED_OK <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & ENC624J600_RSV_RECEIVED_OK <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & ENC624J600_RSV_RECEIVED_OK <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & ENC624J600_RSV_RECEIVED_OK <S2SV_ModEnd> )!= 0 <S2SV_ModStart> ( status & ENC624J600_",0
1370,"<S2SV_ModStart> == 0x01 ) { if ( i < gemsafe_cert_max ) { sc_log ( card -> ctx, ""Key <S2SV_blank> container <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> unallocated"", i + 1 ) ; return SC_ERROR_INTERNAL ; } <S2SV_ModStart> 0x01 ) { if ( i < gemsafe_cert_max ) { sc_log ( card -> ctx, ""Key <S2SV_blank> container <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> unallocated"", i + 1 ) ; return SC_ERROR_INTERNAL ; } <S2SV_ModStart> 0xFE ) { if ( i < gemsafe_cert_max ) { sc_log ( card -> ctx, ""Key <S2SV_blank> container <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> unallocated"", i + 1 ) ; return SC_ERROR_INTERNAL ; }",0
1371,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
1372,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE * argv, VALUE klass ) { VALUE content ; VALUE parse_options ; <S2SV_ModStart> xmlSchemaPtr schema ; xmlSchemaParserCtxtPtr ctx = xmlSchemaNewMemParserCtxt ( argc, argv <S2SV_ModStart> ) ) ; if ( NULL == ctx ) { xmlErrorPtr error = xmlGetLastError ( ) ; if ( error ) Nokogiri_error_raise ( NULL, error ) ; xmlSchemaFreeParserCtxt ( ctx ) ; return Qnil ; } schema = xmlSchemaParse ( ctx ) ; xmlSetStructuredErrorFunc ( NULL, Nokogiri_error_array_pusher, ( void * ) errors ) ; xmlSetStructuredErrorFunc ( NULL, NULL ) ; xmlSetStructuredErrorFunc ( NULL, NULL ) ; xmlSetStructuredErrorFunc ( NULL, NULL ) ; xmlSetStructuredErrorFunc ( NULL, NULL ) ; xmlSetStructuredErrorFunc ( NULL, error ) ; xmlSchemaFreeParserCtxt ( ctx ) ; if ( NULL == schema ) { xmlErrorPtr error = xmlGetLastError ( ) ; if ( error ) Nokogiri_error_raise ( NULL, error ) ; xmlSetStructuredErrorFunc ( NULL, error ) ; xml",0
1373,"<S2SV_ModStart> vma ) { <S2SV_ModEnd> unsigned long start <S2SV_ModStart> unsigned long len <S2SV_ModEnd> ; unsigned long <S2SV_ModStart>, off ; if ( fbdev -> fb_phys & ~ PAGE_MASK ) { return - EINVAL ; } start = fbdev -> fb_phys & PAGE_MASK ; len = PAGE_ALIGN ( ( start & ~ PAGE_MASK ) + fbdev -> fb_len ) >> PAGE_SHIFT ; vma -> vm_pgoff = PAGE_ALIGN ( ( start >> PAGE_SHIFT ) >> PAGE_SHIFT ) ; if ( vma -> vm_end - vma -> vm_start > len ) { return - EINVAL ; } vma -> vm_pgoff = PAGE_ALIGN ( ( vma -> vm_end - vma -> vm_start ) >> PAGE_SHIFT ) ; vma -> vm_page_prot = pgprot_noncached ( vma -> vm_page_prot ) ; return io_remap_pfn_range ( vma, vma -> vm_start, off >> PAGE_SHIFT, vma -> vm_end - vma -> vm_start, vma -> vm_page_prot ) ; }",0
1374,"<S2SV_ModStart> ++ ) { if ( strlen ( config_opt ) < 3 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> option"" ) ; print_syntax ( ) ; return 1 ; } <S2SV_ModStart> ++ ) { if ( strlen ( config_arg ) < 4 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> option"" ) ; print_syntax ( ) ; return 1 ; } <S2SV_ModStart> ++ ) { if ( strlen ( config_arg ) < 4 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> option"" ) ; print_syntax ( ) ; return 1 ; }",0
1375,"<S2SV_ModStart> / 2 ] ; memcpy <S2SV_ModEnd> ( out, <S2SV_ModStart> / 2 ] ; memcpy <S2SV_ModEnd> ( out,",0
1376,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
1377,<S2SV_ModStart> ; if ( <S2SV_ModEnd> arg >= cdi,1
1378,<S2SV_ModStart> ; err = - EINVAL ; mutex_unlock ( & fanout_mutex ) ; if ( type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_QM || type == PACKET_FANOUT_LB || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_QM || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_QM || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_QM,0
1379,<S2SV_ModStart> ) ; <S2SV_ModEnd> perf_event_wakeup ( handle <S2SV_ModStart> pending ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1380,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int utf8s_to_utf16s ( const u8 * s, int len, wchar_t * pwcs ) { if ( len < 1 ) return - EINVAL ; if ( <S2SV_ModStart> -= PLANE_SIZE ; <S2SV_ModEnd> if ( u <S2SV_ModStart> ) ( SURROGATE_PAIR | SURROGATE_LOW | ( u >> 10 ) & SURROGATE_BITS ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( u >> 10 ) & SURROGATE_BITS ) ; } else { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( u >> 10 ) & SURROGATE_BITS ) ; } s += size ; len -= size ; } else { * op ++ = ( wchar_t ) u ; } s += size ; len -= size ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1381,"<S2SV_ModStart> length ) { uint32_t <S2SV_ModEnd> v, i <S2SV_ModStart> s -> color_type == PNG_COLOR_TYPE_GRAY ) || ( s -> color_type == PNG_COLOR_TYPE_RGB && length!= 6 ) ) return AVERROR_INVALIDDATA ; for ( i = 0 ; i < length / 2 ; i ++ ) { v = av_mod_uintp2 ( bytestream2_get_be16 ( & s -> gb ), s -> bit_depth ) ; if ( s -> bit_depth > 8 ) av_WB16 ( & s -> transparent_color_be [ 2 * i ], v ) ; else s -> transparent_color_be [ 2 * i ] = v ; } } else if ( s -> color_type == PNG_COLOR_TYPE_RGB && length!= 6 ) return AVERROR_INVALIDDATA ; for ( i = 0 ; i < length / 2 ; i ++ ) { v = av_mod_uintp2 ( bytestream2_get_be16 ( & s -> gb ), s -> bit_depth ) ; if ( s -> bit_depth > 8 ) av_WB16 ( & s ->",0
1382,"<S2SV_ModStart> EPROTONOSUPPORT ) { crm_trace ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" ) ; st -> cmds -> unregister_notification ( st, T_STONITH_NOTIFY_FENCE, mon_st_callback ) ; rc = pcmk_ok ; } if ( rc == - EPROTONOSUPPORT ) { print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" ) ; st -> cmds -> unregister_notification ( st, T_STONITH_NOTIFY_FENCE, mon_st_callback ) ; st -> cmds -> unregister_notification ( st, T_STONITH_NOTIFY_FENCE, mon_st_callback ) ; } if ( rc == - EPROTONOSUPPORT ) { print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure"" ) ; st -> cmds -> unregister_notification ( st, T_STONITH_NOTIFY_FENCE, mon_st_",0
1383,<S2SV_ModStart> AF_INET6 ; } if (! PKT_IS_IPV4 ( p ) ) { dt -> id = ( int32_t ) IPV4_EXTHDR_GET_IPID ( p ) ; } else if (! PKT_IS_IPV6 ( p ) ) { dt -> id = ( int32_t ) IPV6_EXTHDR_GET_FH_ID ( p ) ; dt -> vlan_id [ 0 ] = p -> vlan_id [ 0 ] ; } else if (! PKT_IS_IPV4 ( p ) ) { dt -> id = ( int32_t ) IPV4_EXTHDR_GET_IPID ( p ) ; } else if (! PKT_IS_IPV6 ( p ) ) { dt -> id = ( int32_t ) IPV6_EXTHDR_GET_FH_ID ( p ) ; dt -> vlan_id [ 1 ] = p -> vlan_id [ 1 ] ; } else if (! PKT_IS_IPV6 ( p ) ) { dt -> id = ( int32_t ) IPV6_EXTHDR_GET_FH_ID (,0
1384,"<S2SV_ModStart> = ksz8851ReadReg ( interface, KSZ8851_RXFHSR ) ; if ( ( status & KSZ8851_RXFHSR_RXFV <S2SV_ModEnd> )!= 0 <S2SV_ModStart>!= 0 ) { if ( ( status & ( RXFHSR_RXMR | RXFHSR_RXFTL | RXFHSR_RXRF | RXFHSR_RXCE ) ) == 0 ) { if ( ( status & ( RXFHSR_RXMR | RXFHSR_RXFTL | RXFHSR_RXRF | RXFHSR_RXCE ) ) == 0 ) { if ( ( status & ( RXFHSR_RXMR | RXFHSR_RXFTL | RXFHSR_RXRF | RXFHSR_RXCE ) ) == 0 ) { if ( ( status & ( RXFHSR_RXMR | RXFHSR_RXFTL | RXFHSR_RXRF | RXFHSR_RXCE",0
1385,"<S2SV_ModStart> ast_for_funcdef_impl ( struct compiler * c, const node * funcdef, asdl_seq * decorator_seq <S2SV_ModEnd>, int is_async <S2SV_ModStart> is_async ) { identifier name ; arguments_ty args = NULL ; expr_ty returns = NULL ; if ( TYPE ( CHILD ( n, name_i + 1 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 2 ) ) ; if (! args ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 2 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 2 ) ) ; name_i += 2 ; } if ( TYPE ( CHILD ( n, name_i + 3 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 3 ) ) ; body = ast_for_suite ( c, funcdef, n ) ; if (! body ) return NULL ; if (! type_comment && NCH ( CHILD ( n, name_i + 3 ) ) > 1 )",0
1386,"<S2SV_ModStart> int i ; if ( mmget_pgd ( mm ) == NULL ) { WARN_ON (! mmget_still_valid ( mm ) ) ; return ; } <S2SV_ModEnd> pgd = pgd_offset <S2SV_ModStart> out : if ( mmget_still_valid ( mm ) ) { if (! mmget_still_valid ( mm ) ) { WARN_ON (! mmget_still_valid ( mm ) ) ; return ; } pgd = NULL ; pud = NULL ; pmd = pmd_offset ( mm, 0xA0000 ) ; split_huge_page_pmd ( mm, pmd ) ; if ( pmd_none_or_clear_bad ( pmd ) ) { if (! mmget_still_valid ( mm ) ) { if (! mmget_still_valid ( mm ) ) { WARN_ON (! mmget_still_valid ( mm ) ) ; return ; } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null> <S2SV_null>",0
1387,"<S2SV_ModStart> - EINVAL ; if ( error ) return error ; error = aa_audit ( AUDIT_APPARMOR_DENIED, & sa, GFP_KERNEL, & sa, NULL ) ; } else if ( strcmp ( name, ""rebind"" ) == 0 ) { error = aa_setprocattr_rebind ( args, arg_size,! AA_ONEXEC,! AA_DO_TEST ) ; } else if ( strcmp ( name, ""rebind"" ) == 0 ) { error = aa_audit ( AUDIT_APPARMOR_DENIED, NULL, GFP_KERNEL, & sa, NULL ) ; } else if ( strcmp ( name, ""rebind"" ) == 0 ) { error = aa_audit ( AUDIT_APPARMOR_DENIED, NULL, GFP_KERNEL, & sa, NULL ) ; } else if ( strcmp ( name, ""rebind"" ) == 0 ) { error = aa_audit ( AUDIT_APPARMOR_DENIED, NULL, GFP_KERNEL, & sa, NULL ) ; } else if ( strcmp ( name, """,0
1388,"<S2SV_ModStart> uint_fast8_t tmp ; if (! siz -> caps ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } <S2SV_ModStart> ) ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if (! siz -> width ||! siz -> height ||! siz -> tilexoff ||! siz -> xoff ||! siz -> yoff ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> tilexoff >= siz -> width || siz -> tileyoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> tilexoff >= siz -> width || siz -> tileyoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the",0
1389,"<S2SV_ModStart> 0 ; } if ( sn_coap_parser_check_option_number ( handle, * packet_data_pptr, packet_len, <S2SV_ModEnd> dst_coap_msg_ptr -> token_ptr <S2SV_ModStart> 0 ; } if ( sn_coap_parser_check_option_number ( handle, * packet_data_pptr, packet_len, <S2SV_ModEnd> dst_coap_msg_ptr -> token_ptr <S2SV_ModStart> dst_coap_msg_ptr -> token_ptr ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } if ( sn_coap_parser_check_option_number ( handle, * packet_data_pptr, packet_len, <S2SV_ModEnd> dst_coap_msg_ptr -> token_ptr <S2SV_ModStart> dst_coap_msg_ptr -> token_ptr, <S2SV_ModEnd> dst_coap_msg_ptr -> token_len <S2SV_ModStart> 0 ; } if ( sn_coap_parser_check_option_number ( handle, * packet_data_pptr, packet_len, <S2SV_ModEnd> dst_coap_msg_",0
1390,"<S2SV_ModStart> = 0 ; if ( xmi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } <S2SV_ModStart> ++ << 24 ; xmi_tmpdata |= * xmi_data ++ << 16 ; xmi_tmpdata |= * xmi_data ++ << 8 ; xmi_tmpdata |= * xmi_data ++ ; xmi_size -= 4 ; <S2SV_ModStart> ++ << 24 ; xmi_tmpdata |= * xmi_data ++ << 16 ; xmi_tmpdata |= * xmi_data ++ << 8 ; xmi_tmpdata |= * xmi_data ++ << 24 ; xmi_tmpdata |= * xmi_data ++ << 16 ; xmi_tmpdata |= * xmi_data ++ << 8 ; xmi_tmpdata |= * xmi_data ++ ; xmi_size -= 4 ; if ( memcmp ( xmi_data, ""XDIRINFO"", 8 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return",0
1391,"<S2SV_ModStart> ; size_t total_len <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) ) return - EINVAL <S2SV_ModEnd> ; do_wakeup = <S2SV_ModStart>, nr_segs ) <S2SV_ModEnd> ; for ( <S2SV_ModStart> ; size_t chars = iov_length ( iov, nr_segs ) ; if ( unlikely ( chars > total_len ) ) do_wakeup = 1 ; ret = 0 ; __pipe_unlock ( pipe ) ; for ( ; ; ) { int error ; if ( unlikely ( error ) ) { if (! atomic ) atomic =! iov_fault_in_pages_write ( iov, chars ) ; else atomic =! iov_fault_in_pages_write ( iov, chars ) ; else atomic =! iov_fault_in_pages_write ( iov, chars ) ; if ( atomic ) kunmap_atomic ( addr ) ; else kunmap ( addr ) ; if (! ret ) ret = error ; break ; } ret += chars ; buf -> offset += chars ; buf -> len -= chars ; if ( buf -> flags & PIPE_BUF_FLAG_PACKET ) { do_wakeup = 1 ; ret = 0 ; break",0
1392,<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( bits <S2SV_ModStart> ) break ; \\\n} <S2SV_ModEnd> IndexPacket index ; <S2SV_ModStart> ) break ; \\\n} <S2SV_ModEnd> IndexPacket index ; <S2SV_ModStart> ) break ; \\\n} <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1393,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1394,"<S2SV_ModStart> ) { p_fm_config_conx_hdlt <S2SV_ModEnd> hdl ; int <S2SV_ModStart> ) ) ; if ( res!= FM_CONF_OK ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> initialize <S2SV_blank> the <S2SV_blank> client <S2SV_blank> handle: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res, fm_mgr_get_error_str ( res ) ) ; goto die_clean <S2SV_ModEnd> ; } if <S2SV_ModStart> 0 ) { if ( res!= FM_CONF_OK ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res, fm_mgr_get_error_str ( res ) ) ; goto die_clean <S2SV_ModEnd> ; } } <S2SV_ModStart> 0 ) { if ( res!= FM_CONF_OK ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res, fm_mgr_get_error_str ( res ) ) ; goto die_clean <S2SV_ModEnd> ; } } <S2SV_ModStart> 0 ) { if ( res!= FM_CONF_OK ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res",0
1395,"<S2SV_ModStart> ; if (! jas_safe_init <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ; infile = NULL ; verbose = 0 ; debug = 0 ; # if defined ( JAS_DEFAULT_MAX_MEM_USAGE ) max_mem = JAS_DEFAULT_MAX_MEM_USAGE ; # endif while ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { switch ( id ) { case OPT_INFILE : infile = jas_optarg ; break ; case OPT_MAXMEM : max_mem = strtoull ( jas_optarg, 0, 10 ) ; break ; case OPT_HELP : # if defined ( JAS_DEFAULT_MAX_MEM_USAGE ) max_mem = JAS_DEFAULT_MAX_MEM_USAGE ; # endif while ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { switch ( id ) { case OPT_INFILE : infile = jas_optarg ; break ; case OPT_MAXMEM : max_mem = strtoull ( jas_optarg, 0, 10 ) ; break ; case OPT_MAXMEM : max_mem = strtoull (",0
1396,"<S2SV_ModStart> bt_remote_bdaddr ) ; if ( bdaddr_is_empty ( & bt_remote_bdaddr ) ) { printf ( ""Error: <S2SV_blank> no <S2SV_blank> paired <S2SV_blank> device <S2SV_blank> in <S2SV_blank> config <S2SV_blank> file.\\n"" ) ; print_usage ( argv [ 0 ] ) ; return - 1 ; }",0
1397,"<S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( row = 0 ; row < height ; row ++ ) <S2SV_ModEnd> { for ( <S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD if ( ( RAW ( row, col ) = pred [ col & 1 ] ) > 4098 && col < width ) derror ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { if ( ( i = pana_bits ( 8 ) ) ) { if ( ( j = pana_bits ( 8 ) ) ) { if ( ( j = pana_bits ( 8 ) ) ) { if ( ( nonz [ i & 1 ] -= 0x80 << sh ) < 0 || sh == 4 ) pred [ i & 1 ] &= ~ ( ( ~ 0u ) << sh ) ; nonz [ i & 1 ] += j << sh ; } } else if ( ( i = pana_bits ( 8 ) ) ) { if ( ( j = pana_bits ( 8 ) ) ) { if ( ( j = pana_bits ( 8 ) ) ) { if ( ( nonz [ i",0
1398,<S2SV_ModStart> len < needed ||! nl,0
1399,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1400,"<S2SV_ModStart> vcpu_info ; struct hlist_node * link ; <S2SV_ModStart> ) ; hlist_for_each_entry ( link, & irq_rt -> map [ guest_irq ], link ) { if ( e -> type!= KVM_IRQ_ROUTING_MSI ) continue ; if ( e -> type!= KVM_IRQ_ROUTING_MSI ) continue ; if ( e -> type!= KVM_IRQ_ROUTING_MSI ) continue ; if ( e -> type!= KVM_IRQ_ROUTING_MSI ) continue ; if ( e -> type!= KVM_IRQ_ROUTING_MSI ) continue ; kvm_set_msi_irq ( kvm, e, & irq ) ; if (! kvm_intr_is_single_vcpu ( kvm, & irq, & vcpu ) ) { ret = irq_set_vcpu_affinity ( host_irq, NULL ) ; if ( ret < 0 ) { printk ( KERN_ERR ""failed <S2SV_blank> to <S2SV_blank> back <S2SV_blank> to <S2SV_blank> remapped <S2SV_blank> mode, <S2SV_blank> irq:",0
1401,<S2SV_ModStart> bfqq ) return <S2SV_ModEnd> HRTIMER_NORESTART ; },0
1402,"<S2SV_ModStart> } else { if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, umin_value ) ) == 0 && rold -> umin_value == U64_MIN && rold -> umax_value == 0 && rold -> smin_value == S64_MIN && rold -> smax_value == S64_MAX && tnum_is_unknown ( rold -> var_off ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, umax_value ) ) == 0 && rold -> smin_value == 0 && rold -> smax_value == 0 && tnum_is_unknown ( rold -> var_off ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) == 0 && range_within ( rold, rcur ) && tnum_in ( rold -> var_off, rcur",0
1403,<S2SV_ModStart>! handle ) return NULL ; if (! <S2SV_ModStart>! handle ) return NULL <S2SV_ModEnd> ; pointer =,0
1404,<S2SV_ModStart> += PRIMARY_DRAWING_ORDER_FIELD_BYTES [ <S2SV_ModEnd> orderInfo -> orderType,0
1405,<S2SV_ModStart> out ; } if ( OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( old_type ) ) { if ( ovl_dentry_lower ( old ) -> d_inode == ovl_dentry_lower ( new ) -> d_inode ) goto out ; } else if (! OVL_TYPE_UPPER ( new_type ) && OVL_TYPE_UPPER ( old_type ) ) { if ( ovl_dentry_lower ( old ) -> d_inode == ovl_dentry_lower ( new ) -> d_inode ) goto out ; } else { if (! OVL_TYPE_UPPER ( new_type ) && OVL_TYPE_UPPER ( old_type ) ) { if (! OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( old_type ) ) { if (! ovl_dentry_lower ( old ) -> d_inode == ovl_dentry_lower ( new ) -> d_inode ) goto out ; } else { if (! OVL_TYPE_,0
1406,"<S2SV_ModStart> ; if ( s >= sprev ) { fprintf ( stderr, ""match_at: <S2SV_blank> str: <S2SV_blank> %s, <S2SV_blank> end: <S2SV_blank> %d, <S2SV_blank> start: <S2SV_blank> %d, <S2SV_blank> sprev: <S2SV_blank> %d\\n"", ( int ) str, ( int ) sprev ) ; fprintf ( stderr, ""match_at: <S2SV_blank> str: <S2SV_blank> %s, <S2SV_blank> end: <S2SV_blank> %d, <S2SV_blank> sprev: <S2SV_blank> %d\\n"", s, sprev ) ; } else { if ( s >= sstart ) { fprintf ( stderr, ""match_at: <S2SV_blank> str: <S2SV_blank> %s, <S2SV_blank> end: <S2SV_blank> %d, <S2SV_blank> start: <S2SV_blank> %d, <S2SV_blank> sprev: <S2SV_blank> %d\\n"", ( int ) s, ( int ) sstart ) ; fprintf ( stderr, ""match_at: <S2SV_blank> str: <S2SV_blank> %s, <S2SV_blank> end: <S2SV_blank> %d, <S2SV_blank> sprev: <S2SV_blank> %d\\n"", s, ( int ) s, ( int ) sprev ) ; }",0
1407,"<S2SV_ModStart> int plane ; # if CONFIG_VP9_HIGHBITDEPTH switch ( bsize. bit_depth ) { case VPX_BITS_8 : # endif vp9_foreach_transformed_block_in_plane ( xd, bsize, visit, arg ) ; break ; case VPX_BITS_10 : # endif vp9_foreach_transformed_block_in_plane ( xd, bsize, visit, arg ) ; break ; case VPX_BITS_12 : # if CONFIG_VP9_HIGHBITDEPTH vp9_foreach_transformed_block_in_plane ( xd, bsize, visit, arg ) ; # endif vp9_foreach_transformed_block_in_plane ( xd, bsize, visit, arg ) ; break ; case VPX_BITS_10 : # endif vp9_foreach_transformed_block_in_plane ( xd, bsize, visit, arg ) ; break ; case VPX_BITS_12 : # if CONFIG_VP9_HIGHBITDEPTH vp9_foreach_transformed_block_in_plane ( xd, bsize, visit, arg ) ; # endif",0
1408,"<S2SV_ModStart> ; int error ; memset ( msg -> msg_name, 0, sizeof ( * msg ) ) ;",0
1409,<S2SV_ModStart> = hash ; if ( ht -> av_slots <= 0 ) { ht -> av_slots -- ; sr -> vhost_fdt_id = id ; sr -> vhost_fdt_hash = hash ; return fd ; } <S2SV_ModStart> = hash ; if ( ht -> av_slots <= 0 ) { ht -> av_slots -- ; sr -> vhost_fdt_id = id ; sr -> vhost_fdt_hash = hash ; return fd ; },0
1410,"<S2SV_ModStart> void nonrd_pick_sb_modes ( VP9_COMP * cpi, TileDataEnc * tile_data <S2SV_ModEnd>, int mi_row <S2SV_ModStart> x -> e_mbd <S2SV_ModEnd> ; set_offsets ( <S2SV_ModStart>, mi_row, mi_col, rate, dist, BLOCK_SIZE bsize ) ; xd -> mi [ 0 ] -> mbmi. sb_type = bsize ; if ( frame_is_intra_only ( cm ) ) { vp9_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } else if (! frame_is_intra_only ( cm ) ) { vp9_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } else { MB_PREDICTION_MODE intramode = DC_PRED ; set_mode_info ( & xd -> mi [ 0 ] -> mbmi, bsize, intramode ) ; } <S2SV_ModEnd> duplicate_mode_info_in_sb ( cm",0
1411,"<S2SV_ModStart> ) ) { u32 csum = virtio_cread_feature ( vdev, VIRTIO_NET_F_CSUM, NULL, & csum ) ; if ( csum ) dev -> hw_features |= NETIF_F_HW_CSUM | NETIF_F_SG | NETIF_F_FRAGLIST ; else dev -> hw_features &= ~ ( NETIF_F_HW_CSUM | NETIF_F_SG ) ; if ( virtio_has_feature ( vdev, VIRTIO_NET_F_GF_CSUM ) ) { dev -> features |= NETIF_F_HW_CSUM | NETIF_F_SG | NETIF_F_FRAGLIST ; } else if ( virtio_has_feature ( vdev, VIRTIO_NET_F_GF_CSUM ) ) { dev -> features |= NETIF_F_HW_CSUM | NETIF_F_SG | NETIF_F_FRAGLIST ; } else if ( virtio_has_feature ( vdev, VIRTIO_NET_F_",0
1412,"<S2SV_ModStart> ; * err = openSuperblock ( filename, O_RDONLY | O_CLOEXEC | O_NOFOLLOW | O_NOCTTY | O_NOCTTY | O_NOCTTY | O_NOCTTY | O_NOCTTY | O_NOCTTY | O_NOCTTY | O_NOCTTY | O_NOCTTY | O_NOCTTY | O_NOCTTY | O_NOCTTY | O_NOEXT ) ; if ( * err ) { hrtf = getHrtf ( & reader, err ) ; } else if (! ( * err = openSuperblock ( filename, O_RDONLY | O_NOCTTY | O_NOCTTY | O_NOCTTY | O_NOCTTY | O_NOCTTY | O_NOCTTY | O_NOCTTY | O_NOCTTY | O_NOCTTY | O_NOCTTY | O_NOCTTY ) ) { log ( ""cannot <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s\\n"", filename ) ; * err = errno ; return NULL ; }",0
1413,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( Corrupt",0
1414,"<S2SV_ModStart> = malloc ( <S2SV_ModEnd> sizeof ( MappedRange <S2SV_ModStart> ) ) ; if (! pMap -> ranges ) { LOGE ( ""malloc(%d, <S2SV_blank> R, <S2SV_blank> PRIVATE, <S2SV_blank> %d, <S2SV_blank> %d) <S2SV_blank> failed: <S2SV_blank> %s\\n"", ( int ) length, fd ) ; return - 1 ; }",0
1415,<S2SV_ModStart> ; if ( be16_to_cpu ( dip -> di_nlink ) > XFS_DFORK_MAX ( dip ) ) return __this_address ; if ( be16_to_cpu ( dip -> di_nlink ) > XFS_DFORK_MAX ( dip ) ) return __this_address ; if ( be16_to_cpu ( dip -> di_nlink ) > XFS_DFORK_MAX ( dip ) ) return __this_address ; if ( be16_to_cpu ( dip -> di_nlink ) > XFS_DFORK_MAX ( dip ) ) return __this_address ; if ( be32_to_cpu ( dip -> di_anextents ) + be16_to_cpu ( dip -> di_anextents ) > XFS_DFORK_MAX ( dip -> di_nblocks ) ) return __this_address ; if ( mode && ( be16_to_cpu ( dip -> di_nextents ) + be16_to_cpu ( dip -> di_anextents ) > XFS_DFORK_MAX ( dip ) ) ) return __this_address ;,0
1416,<S2SV_ModStart> ; if ( ( ( flags & VP8_EFLAG_NO_UPD_GF ) && ( flags & VP8_EFLAG_NO_UPD_ARF ) ) || ( ( flags & VP8_EFLAG_NO_REF_LAST ) && ( flags & VP8_EFLAG_NO_REF_GF ) && ( flags & VP8_EFLAG_NO_REF_GF ) ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_ALTR_FRAME ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_,0
1417,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1418,<S2SV_ModStart> event ) ; WARN_ON_ONCE (! swhash -> online ) ; <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
1419,"<S2SV_ModStart> * pptr, u_int <S2SV_ModEnd> len ) { <S2SV_ModStart> case BGP_IPV4_ADDRESS : if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_IPV6_ADDRESS : if ( tlen < 6 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_IPV6_ADDRESS : if ( tlen < 6 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_IPV4_ADDRESS : if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_IPV6_ADDRESS : if ( tlen < 6 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGP_IPV6_ADDRESS : if ( tlen < 6 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; }",0
1420,"<S2SV_ModStart> ""<table <S2SV_blank> id=\'status-table\'><tr>"" ""<th <S2SV_blank> width=\'40%%\'>Parameter</th>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""<th <S2SV_blank> width=\'60%%\'>"" ""</th></tr>"", Run. Env. user ) ; if ( Run. files. control ) StringBuffer_append ( res -> outputbuffer, ""<tr><td>Controlfile</td><td>%s</td></tr>"", Run. files. control ) ; if ( Run. files. log ) StringBuffer_append ( res -> outputbuffer, ""<tr><td>Logfile</td><td>%s</td></tr>"", Run. files. log ) ; if ( Run. files. pid ) StringBuffer_append ( res -> outputbuffer, ""<tr><td>Pidfile</td><td>%s</td></tr>"", Run. files. pid ) ; if ( Run. files. state ) StringBuffer_append ( res -> outputbuffer, ""<",0
1421,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
1422,"<S2SV_ModStart>, constr1, sizeof ( constr1 ) <S2SV_ModEnd> ) ; bn_from_bytes <S2SV_ModStart>, constr2, sizeof ( constr2 ) <S2SV_ModEnd> ) ; bn_from_bytes <S2SV_ModStart>, constr1, sizeof ( constr1 ) <S2SV_ModEnd> ) ; bn_from_bytes <S2SV_ModStart>, constr2, sizeof ( constr2 ) <S2SV_ModEnd> ) ; bn_from_bytes <S2SV_ModStart>, constr1, sizeof ( constr1 ) <S2SV_ModEnd> ) ; bn_from_bytes <S2SV_ModStart>, constr2, sizeof ( constr2 ) <S2SV_ModEnd> ) ; bn_from_bytes <S2SV_ModStart>, constr1, sizeof ( constr2 ) <S2SV_ModEnd> ) ; bn_from_bytes <S2SV_ModStart>, constr2, sizeof ( constr2 ) <S2SV_ModEnd> ) ; bn_from_bytes <S2SV_ModStart>, constr1, sizeof ( constr1 ) <S2SV_ModEnd> ) ; bn_from_bytes <S2SV_ModStart>, constr2, sizeof ( constr2 ) <S2SV_ModEnd> ) ; bn_from_bytes",0
1423,<S2SV_ModStart> int u ; if ( n < 0 || n >= 32 ) { return - 1 ; },0
1424,"<S2SV_ModStart>, & len <S2SV_ModEnd>, & iovec <S2SV_ModStart>, & len <S2SV_ModEnd>, & iovec <S2SV_ModStart>, & len <S2SV_ModEnd>, & iter_op",0
1425,"<S2SV_ModStart> ; } } if ( settings. verbose > 1 ) { fprintf ( stderr, ""%d: <S2SV_blank> Read <S2SV_blank> binary <S2SV_blank> protocol <S2SV_blank> data:"", c -> sfd ) ; for ( ii = 0 ; ii < 4 ; ++ ii ) { if ( ii % 4 == 0 ) { fprintf ( stderr, ""\\n<%d <S2SV_blank> <S2SV_blank> <S2SV_blank> "", c -> sfd ) ; } fprintf ( stderr, "" <S2SV_blank> 0x%02x"", req -> bytes [ ii ] ) ; } if ( settings. verbose > 1 ) { fprintf ( stderr, ""%d: <S2SV_blank> Read <S2SV_blank> binary <S2SV_blank> protocol <S2SV_blank> data:"", c -> sfd ) ; for ( ii = 0 ; ii < 4 ; ++ ii ) { if ( ii % 4 == 0 ) { fprintf ( stderr, ""\\n<%d <S2SV_blank> <S2SV_blank> "", c -> sfd ) ; } fprintf ( stderr, "" <S2SV_blank> 0x%02x"", req -> bytes [ ii ] ) ; } if ( settings. verbose > 1 ) { fprintf ( stderr, ""%d: <S2SV_blank> Read <S2SV_blank> binary <S2SV_blank> protocol <S2SV_blank> data:"", c -> sfd ) ; for ( ii = 0 ; ii < 4 ; ++ ii ) { fprintf",0
1426,"<S2SV_ModStart> iad_num ++ ; if ( iad_num >= nalts [ nintf ]. bNumInterfaces ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\n"", cfgno, nalts [ nintf ]. bNumInterfaces ) ; nintf = nintf_orig ; } else if ( iad_num >= nalts [ nintf ]. bNumInterfaces ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d, <S2SV_blank> ignoring\\n"", cfgno, nalts [ nintf ]. bNumInterfaces ) ; nalts [ nintf ]. bNumInterfaces = iad_num ; } else if ( iad_num >= nalts [ nintf ]. bNumInterfaces ) { dev_warn ( ddev, ""config <S2SV_blank> %d <S2SV_blank> has <S2SV_blank> too <S2SV_blank> many <S2SV_blank> interfaces: <S2SV_blank> %d, <S2SV_blank> "" ""using <S2SV_blank> maximum <S2SV_blank> allowed: <S2SV_blank> %d\\",0
1427,"<S2SV_ModStart> ; if ( info -> count < 1 ) return - EINVAL ; access = info -> access == 0? SNDRV_CTL_ELEM_ACCESS_READWRITE : ( info -> access & ( SNDRV_CTL_ELEM_ACCESS_READWRITE | SNDRV_CTL_ELEM_ACCESS_INACTIVE | SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE ) ) ; info -> id. numid = 0 ; memset ( & kctl, 0, sizeof ( kctl ) ) ; if ( replace ) access = info -> access == 0? SNDRV_CTL_ELEM_ACCESS_READWRITE : ( info -> access & ( SNDRV_CTL_ELEM_ACCESS_READWRITE | SNDRV_CTL_ELEM_ACCESS_INACTIVE | SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE ) ) ; info -> id. numid = 0 ; memcpy ( & kctl. id, & info -> id, sizeof ( info -> id ) ) ; if ( access & SNDRV_CTL",0
1428,"<S2SV_ModStart> 3 ) { switch ( parc ) { case 2 : exit_client ( client_p, client_p, ""Mixing <S2SV_blank> client <S2SV_blank> and <S2SV_blank> server <S2SV_blank> protocol"" ) ; break ; case 1 : exit_client ( client_p, client_p, ""Mixing <S2SV_blank> client <S2SV_blank> and <S2SV_blank> server <S2SV_blank> protocol"" ) ; break ; case 2 : exit_client ( client_p, client_p, ""Mixing <S2SV_blank> server <S2SV_blank> protocol"" ) ; break ; case 1 : exit_client ( client_p, client_p, ""Mixing <S2SV_blank> client <S2SV_blank> and <S2SV_blank> server <S2SV_blank> protocol"" ) ; break ; case 3 : exit_client ( client_p, client_p, ""Mixing <S2SV_blank> client <S2SV_blank> and <S2SV_blank> server <S2SV_blank> protocol"" ) ; return 0 ; } saslserv_p = find_named_client ( ConfigFileEntry. sasl_service ) ; if ( saslserv_p == NULL ||! IsService ( saslserv_p ) ) { sendto_one ( source_p, form_str ( ERR_SASLABORTED ), me. name, EmptyString ( source_p -> name )? ""*"" : source_p -> name ) ; return 0 ;",0
1429,<S2SV_ModStart> case 0x66 : if ( mode == X86EMUL_MODE_PROT64 ) { if ( mode == X86EMUL_MODE_PROT64 ) { if ( mode == X86EMUL_MODE_PROT64 ) { if ( mode == X86EMUL_MODE_PROT64 ) { if ( mode == X86EMUL_MODE_PROT64 ) { if ( mode == X86EMUL_MODE_PROT64 ) { if ( mode == X86EMUL_MODE_PROT64 ) { if ( mode == X86EMUL_MODE_PROT64 ) { if ( mode == X86EMUL_MODE_PROT64 ) { if ( mode == X86EMUL_MODE_PROT64 ) { if ( mode == X86EMUL_MODE_PROT64 ) { if ( mode == X86EMUL_MODE_PROT64 ) { if ( mode == X86EMUL_MODE_PROT64 ) { if ( mode == X86EMUL_MODE_PROT64 ) { if ( mode == X86EMUL_MODE_PROT64 ) { if ( mode == X86EMUL,0
1430,"<S2SV_ModStart>, 0, <S2SV_ModEnd> mmap_event -> event_id <S2SV_ModStart>. size, <S2SV_ModEnd> mmap_event -> event_id",0
1431,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; random_ether_addr (,1
1432,"<S2SV_ModStart> 16 ) ; vp8_build_intra_predictors_mby_s ( xd, b -> base_src, b -> src_stride, xd -> predictor, 16, & sse ) ; rate = x -> mbmode_cost [ xd -> frame_type ] [ mode ] ; this_rd = RDCOST ( x -> rdmult, x -> rddiv, rate, distortion ) ; if ( error16x16 > this_rd ) { error16x16 = this_rd ; best_mode = mode ; best_sse = sse ; } }",0
1433,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_ECON2_STRCH <S2SV_ModEnd> ) ; if <S2SV_ModStart> ( interface, ENC624J600_MAADR1 ) ; temp = htole16 ( interface -> macAddr. w [ 0 ] ) ; temp = htole16 ( interface -> macAddr. w [ 1 ] ) ; temp = htole16 ( interface -> macAddr. w [ 2 ] ) ; temp = htole16 ( interface -> macAddr. w [ 0 ] ) ; temp = htole16 ( interface -> macAddr. w [ 1 ] ) ; temp = htole16 ( interface -> macAddr. w [ 2 ] ) ; temp = htole16 ( interface -> macAddr. w [ 3 ] ) ; temp = htole16 ( interface -> macAddr. w [ 0 ] ) ; temp = htole16 ( interface -> macAddr. w [ 0 ] ) ; temp = htole16 ( interface -> macAddr. w [ 1 ] ) ; temp = htole16 ( interface -> macAddr. w [ 2 ] ) ; temp = ht",0
1434,"<S2SV_ModStart> * start ; va_start ( argptr, format ) ; maxlen = strlen ( <S2SV_ModEnd> ( ( char <S2SV_ModStart> ) psf -> header ) <S2SV_ModEnd> ; va_end ( <S2SV_ModStart> = 0 ; <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1435,"<S2SV_ModStart> -> target_offset == ARPT_ENT_SIZE <S2SV_ModEnd> && unconditional ( <S2SV_ModStart> verdict < 0 <S2SV_ModEnd> && unconditional ( <S2SV_ModStart> & e -> arp ) ) || visited ) { unsigned int oldpos, size ; if ( ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && t -> verdict < - NF_MAX_VERDICT - 1 ) && unconditional ( & e -> arp ) ) || visited ) { unsigned int oldpos, size ; if ( ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && t -> verdict < - NF_MAX_VERDICT - 1 ) && unconditional ( & e -> arp ) ) || visited ) { unsigned int oldpos, size ; if ( ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && unconditional ( & e -> arp ) ) { duprintf ( ""mark_source_chains: <S2SV_blank> bad <S2SV_blank> "" ""negative <S2SV_blank> verdict <S2SV_blank> (%i)\\n"", t -> verdict ) ; return 0 ;",0
1436,<S2SV_ModStart> alg_priv ) { vpx_alg_destroy_priv <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> alg_priv ) ; },0
1437,"<S2SV_ModStart> ; case EXIT_REASON_RDC : return nested_cpu_has ( vmcs12, CPU_BASED_RDC_EXITING ) ; case EXIT_REASON_RAID_EXIT : return nested_cpu_has ( vmcs12, CPU_BASED_RAID_EXITING ) ; case EXIT_REASON_RAID_EXIT : return nested_cpu_has ( vmcs12, CPU_BASED_RAID_EXITING ) ; case EXIT_REASON_RAID_EXIT : return nested_cpu_has ( vmcs12, CPU_BASED_RAID_EXITING ) ; case EXIT_REASON_RAID_EXIT : return nested_cpu_has ( vmcs12, CPU_BASED_RAID_EXITING ) ; case EXIT_REASON_RAID_EXIT : return nested_cpu_has ( vmcs12, CPU_BASED_RAID_EXITING ) ; case EXIT_REASON_RAID_EXIT : return nested_cpu_has ( vmcs12, CPU_BASED_RAID_EXITING ) ; case EXIT_REASON_RAID_EXIT : return",0
1438,"<S2SV_ModStart> speed ) { memset ( sf, 0, sizeof ( SPEED_FEATURES ) ) ; <S2SV_ModStart> 1 ) { <S2SV_ModEnd> sf -> use_square_partition_only <S2SV_ModStart> =! frame_is_intra_only ( cpi ) ; <S2SV_ModEnd> sf -> less_rectangular_check <S2SV_ModStart> = 1 ; <S2SV_ModEnd> sf -> auto_mv_step_size <S2SV_ModStart> = 2 ; <S2SV_ModEnd> sf -> mode_skip_start <S2SV_ModStart> = 10 ; <S2SV_ModEnd> sf -> adaptive_pred_interp_filter <S2SV_ModStart> = INTRA_DC_H_V ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_uv_mode_mask [ TX_16X16 ] = INTRA_DC_H_V ; sf -> <S2SV_ModEnd> intra_y_mode_mask [ TX_32X32 <S2SV_ModStart> = INTRA_DC_H_V ; sf -> intra_y_mode_mask [ TX_32X32 ] = INTRA_DC_H_V ; sf -> intra_uv_mode_mask [ TX_16X16 ] = INTRA_DC_H_V ; sf -> intra_",0
1439,"<S2SV_ModStart> ct_dccp_roles role ; if ( dataoff < sizeof ( _dh ) || dh -> dccph_type == DCCP_PKT_RESET ) { nf_ct_kill_acct ( ct, ctinfo, skb ) ; return NF_ACCEPT ; } type = dh -> dccph_type ; if ( type == DCCP_PKT_RESET && test_bit ( IPS_SEEN_REPLY_BIT, & ct -> status ) ) { nf_ct_kill_acct ( ct, ctinfo, skb ) ; return NF_ACCEPT ; } <S2SV_ModStart> CT_DCCP_TIMEWAIT : if ( old_state == CT_DCCP_RESPOND ) ct -> proto. dccp. role [! dir ] = CT_DCCP_ROLE_SERVER ; ct -> proto. dccp. role [! dir ] = CT_DCCP_ROLE_CLIENT ; ct -> proto. dccp. role [! dir ] = CT_DCCP_ROLE_SERVER ; break ; case CT_DCCP_RESPOND : if ( old_state == CT_DCCP_RESPOND ) ct ->",0
1440,<S2SV_ModStart> struct compat_timex ) ) { txc -> modes = tx32. modes ; txc -> esterror = tx32. esterror ; txc -> status = tx32. status ; txc -> precision = tx32. precision ; txc -> tolerance = tx32. tolerance ; txc -> time. tv_sec = tx32. time. tv_sec ; txc -> time. tv_usec = tx32. time. tv_usec ; txc -> time. tv_sec = tx32. time. tv_sec ; txc -> time. tv_usec = tx32. time. tv_usec ; txc -> tick = tx32. tick ; txc -> ppsfreq = tx32. ppsfreq ; txc -> jitter = tx32. jitter ; txc -> shift = tx32. shift ; txc -> stabil = tx32. stabil ; txc ->,0
1441,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
1442,<S2SV_ModStart> ; int goodsize <S2SV_ModEnd> ; if (,0
1443,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
1444,"<S2SV_ModStart> ) ; const <S2SV_ModEnd> char * s <S2SV_ModStart> * s = STR ( CHILD ( n, 0 ) ) ; int quote <S2SV_ModEnd> = Py_CHARMASK ( <S2SV_ModStart> ( errstr ) { <S2SV_ModEnd> char buf [ <S2SV_ModStart> = """" ; PyOS_snprintf ( buf, sizeof ( buf ), ""(unicode <S2SV_blank> error) <S2SV_blank> %s"", s ) ; ast_error ( n, buf ) ; Py_DECREF ( errstr ) ; } else { ast_error ( n, ""(unicode <S2SV_blank> error) <S2SV_blank> unknown <S2SV_blank> error"" ) ; } PyArena_AddPyObject ( c -> c_arena, str ) ; return Str ( str, kind, LINENO ( n ), n -> n_col_offset, c -> c_arena ) ; return Str ( str, kind, LINENO ( n ), n -> n_col_offset, c -> c_arena ) ; } <S2SV_ModEnd> return NULL ;",0
1445,"<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> ( ""encoding-mode"", option_name ) == 0 ) { res = set_option_encoding_mode ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""layers"", option_name ) == 0 ) { res = parse_layers ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""scale-factors"", option_name ) == 0 ) { res = parse_scale_factors ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers"", option_name ) == 0 ) { res = parse_quantizer_values ( svc_ctx, option_value, 0 ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers-keyframe"", option_name ) == 0 ) { svc_log ( svc_ctx, SVC_",0
1446,<S2SV_ModStart> event ) ; WARN_ON_ONCE (! swhash -> online ) ; <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> hlist_add_head_rcu ( &,0
1447,<S2SV_ModStart> ( mask & KADM5_PRINCIPAL ) || ( mask & KADM5_LAST_PWD_CHANGE ) || ( mask & KADM5_MOD_TIME ) || ( mask & KADM5_MOD_NAME ) || ( mask & KADM5_MKVNO ) || ( mask & KADM5_AUX_ATTRIBUTES ) || ( mask & KADM5_KEY_DATA ) || ( mask & KADM5_LAST_SUCCESS ) || ( mask & KADM5_LAST_FAILED ) ) return KADM5_BAD_MASK ; if ( entry == ( kadm5_principal_ent_t ) NULL ) return EINVAL ; if ( mask & KADM5_TL_DATA ) { tl_data_orig = entry -> tl_data ; while ( tl_data_orig ) { if ( tl_data_orig -> tl_data_type < 256 ) return KADM5_BAD_TL_TYPE ; tl_data_orig = tl_data_orig -> tl_data_next ; tl_data_orig = tl_data_orig -> tl_data_next ; },0
1448,<S2SV_ModStart> [ plane ] && frame -> linesize [ plane ],0
1449,"<S2SV_ModStart> ) ; } fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; mb_index = 0 ; fprintf ( mvs, ""Mb <S2SV_blank> mv <S2SV_blank> ref <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. ref_frame ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; } fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. uv_mode ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ;",0
1450,<S2SV_ModStart> self ) { size_t <S2SV_ModEnd> i ; PyObject,1
1451,,1
1452,"<S2SV_ModStart> ) ) { if ( imp_dbh -> pmysql -> error ) do_error ( dbh, mysql_errno ( imp_dbh -> pmysql ), mysql_error ( imp_dbh -> pmysql ), mysql_sqlstate ( imp_dbh -> pmysql )",0
1453,"<S2SV_ModStart>! ( flags & SOCK_THREAD_FD_EXCEPTION <S2SV_ModEnd> ) || ( <S2SV_ModStart> == 0 && <S2SV_ModEnd> size ) ) <S2SV_ModStart> pthread_mutex_unlock ( & slot_lock ) ; BTA_JvRfcommRead ( slot -> rfc_handle, slot -> id ) ; } else if ( flags & SOCK_THREAD_FD_WR ) { if (! slot -> f. connected ||! flush_incoming_que_on_wr_signal ( slot ) ) { LOG_ERROR ( ""%s <S2SV_blank> socket <S2SV_blank> signaled <S2SV_blank> for <S2SV_blank> write <S2SV_blank> while <S2SV_blank> disconnected <S2SV_blank> (or <S2SV_blank> write <S2SV_blank> failure), <S2SV_blank> slot: <S2SV_blank> %d, <S2SV_blank> channel: <S2SV_blank> %d"", __func__, slot -> scn ) ; need_close = true ; } } else if ( flags & SOCK_THREAD_FD_WR ) { if (! slot -> f. connected ||! flush_incoming_que_on_wr_signal ( slot ) ) { LOG_ERROR ( ""%s <S2SV_blank> socket <S2SV_blank> signaled <S2SV_blank> for <S2SV_blank> write <S2SV_blank> while <S2SV_blank> disconnected <S2SV_blank> (or <S2SV_blank> write <S2SV_blank> failure), <S2SV_blank> slot: <S2SV_blank> %d, <S2SV_blank> channel: <S2SV_blank> %d"", __func__, slot -> scn",0
1454,"<S2SV_ModStart> struct ieee_802_11_phdr phdr ; memset ( & phdr, 0, sizeof ( phdr ) )",0
1455,<S2SV_ModStart> ; sh = s_malloc0 <S2SV_ModEnd> ( hdrlen +,0
1456,<S2SV_ModStart> <S2SV_null> <S2SV_null> static BOOL <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> BYTE a_val ; if (! context ) return FALSE <S2SV_ModStart> = context -> ColorLossLevel ; if ( context -> priv -> PlaneBuffers [ 0 ] + y * rw > context -> priv -> PlaneBuffers [ 1 ] + context -> height ) return FALSE <S2SV_ModStart> -> ChromaSubsamplingLevel? 1 : 0 ; for ( y = 0 ; y < context -> height ; y ++ ) { src = data + ( context -> height - 1 - y ) * scanline ; yplane = context -> priv -> PlaneBuffers [ 0 ] + y * rw ; coplane = context -> priv -> PlaneBuffers [ 1 ] + y * rw ; cgplane = context -> priv -> PlaneBuffers [ 2 ] + y * rw ; aplane = NULL ; for ( x = 0 ; x < context -> width ; x ++ ) { switch ( context -> format ) { case PIXEL_FORMAT_BGR24 : b_val = * src ++ ; g_val = * src ++ ; r_val = * src,0
1457,<S2SV_ModStart> + 1 ; } if ( end_offset < offset ) { return offset ; } <S2SV_ModStart> hf_keybuffer ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1458,"<S2SV_ModStart> - EINVAL ) ; if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, ptr - str ) ; goto out_free ; }",0
1459,<S2SV_ModStart> cpi ) { const VP9EncoderConfig <S2SV_ModEnd> * rc = <S2SV_ModStart> > INT_MAX )? ( int ) ( cpi -> oxcf. starting_buffer_level / 2 ) : ( int ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> > INT_MAX )? ( int ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> > INT_MAX )? ( int ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> > INT_MAX )? ( int ) ( cpi -> oxcf. starting_buffer_level / 2 ) : ( int ) ( cpi -> oxcf. starting_buffer_level <S2SV_ModEnd> / 2 ) <S2SV_ModStart> / 2 ) ; if ( rc -> frames_since_key < cpi -> output_framerate / 2 ) { kf_boost = ( int ) ( rc -> frames_since_key / cpi -> output_framerate / 2 ) ; if ( rc -> frames_since_key < cpi -> output_framerate / 2 ) { kf_boost = ( int ) ( kf_boost * rc ->,0
1460,<S2SV_ModStart> X86_EFLAGS_RF ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1461,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static TX_MODE read_tx_mode ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> TX_MODE tx_mode = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> == ALLOW_32X32 ) return vpx_read_bit <S2SV_ModEnd> ( r )",0
1462,"<S2SV_ModStart> struct hello6 * ) op <S2SV_ModEnd> ; ND_TCHECK ( <S2SV_ModStart> OSPF6HDR_LEN ) ; if ( EXTRACT_32BITS ( & hellop -> hello_options )!= 0 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> Options <S2SV_blank> [%s]"", bittok2str ( ospf6_option_values, ""none"", EXTRACT_32BITS ( & hellop -> hello_options ) ) ) ) ; } else { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> Options <S2SV_blank> [%s]"", bittok2str ( ospf6_option_values, ""none"", EXTRACT_32BITS ( & hellop -> hello_options ) ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> Options <S2SV_blank> [%s]"", bittok2str ( ospf6_option_values, ""none"", EXTRACT_32BITS ( & hellop -> hello_options ) ) ) ) ; } else { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> Options <S2SV_blank> [%s]"", bittok2str ( ospf6_option_values, ""none"",",0
1463,<S2SV_ModStart> datalen ) { size_t version = <S2SV_ModEnd> * ( unsigned <S2SV_ModStart> * ) data ; if ( datalen < 1 ) return - EINVAL ; if ( version,0
1464,<S2SV_ModStart> rc ) { if ( rc -> uwbd. task == NULL ) { rc -> uwbd. task = kthread_run ( uwbd_ <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1465,"<S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_free <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar.y"" { yr_re_node_destroy <S2SV_ModStart> : # line 110 <S2SV_ModEnd> ""re_grammar",0
1466,<S2SV_ModStart> : idx ; if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) { * ptr = ( char ) ( ( existing & ( mask << bitIdx ) ) | ( ( col & mask ) << bitIdx ) ) ; } else if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) { * ptr = ( char ) ( ( existing & ~ ( mask << bitIdx ) ) | ( ( col & mask ) << bitIdx ) ) ; } else if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) { int i ; for ( i = 0 ; i < 8 ; i ++ ) { * ptr = ( char ) ( col >> i ) ; ptr ++ ; } else if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) { if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_VERTICAL_BYTE ) { ptr ++ ; } else if ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_VERTICAL_BYTE ) { ptr ++ ; } else if ( gfx -> data. flags & JSGRAPHICSFLAGS_,0
1467,"<S2SV_ModStart> -> cpi ; MACROBLOCK * const mb = & cpi -> mb ; <S2SV_ModStart> 32 ] ; <S2SV_ModEnd> struct macroblock_plane * <S2SV_ModStart> plane ] ; <S2SV_ModEnd> const int16_t * <S2SV_ModStart> int16_t * qcoeff <S2SV_ModEnd> = BLOCK_OFFSET ( <S2SV_ModStart> block ) ; const int16_t * scan, * nb ; const scan_order * so ; const int ref = is_inter_block ( mbmi ) ; unsigned int ( * const counts ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> fc -> coef_probs [ tx_size ] [ type ] [ ref ] ; vpx_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> common. fc -> coef_probs [ tx_size ] [ type ] [ ref ] ; unsigned int ( * const eob_branch ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> common. counts -> eob_branch [ tx_size ] [ type ] [ ref ] ; const uint8_t * const band = get_band_translate ( tx_",0
1468,"<S2SV_ModStart> ; SrcList * const pSrc = pSelect -> pSrc ; if ( pSrc == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; } for ( i = 0 ; i < pSrc -> nSrc ; i ++ ) { struct SrcList_item * pItem = & pSrc -> a [ i ] ; if ( pItem -> pTab == p -> pTab ) { renameTokenFind ( pWalker -> pParse, p, pItem -> zName ) ; } }",0
1469,<S2SV_ModStart> ( shmflg & SHM_RND <S2SV_ModEnd> ) addr &= <S2SV_ModStart> shmflg & SHM_MAYWRITE ) addr &= ~ ( shmlba - 1 ) ; else if ( ( shmflg & SHM_MAYREAD ) ) addr &= ~ ( shmlba - 1 ) ; else if ( ( shmflg & SHM_MAYWRITE ) ) addr &= ~ ( shmlba - 1 ) ; else if ( ( shmflg & SHM_MAYWRITE ) ) addr &= ~ ( shmlba - 1 ) ;,0
1470,"<S2SV_ModStart> ) ; serv = svc_create ( <S2SV_ModEnd> & nfs4_callback_program,",0
1471,"<S2SV_ModStart> point, const CurveZZ_p curve ) { PointZZ_p R0, R1 ; mpz_inits ( R0. x, R0. y, tmp. x, tmp. y, NULL ) ; mpz_inits ( R1. x, R1. y, tmp. x, tmp. y, NULL ) ; mpz_init_set ( R1. x, R1. y, tmp. x, tmp. y, NULL ) ; mpz_set ( R0. x, R0. x ) ; mpz_set ( R0. y, R1. y ) ; pointZZ_pDouble ( & R0, & R1, curve ) ; mpz_set ( R0. x, R0. x ) ; mpz_set ( R0. y, R1. y ) ; pointZZ_pAdd ( & R1, & R0, curve ) ; mpz_set ( tmp. x, R0. x ) ; mpz_set ( tmp. y, R1. y ) ; mpz_set ( tmp. x, R0. x ) ; mpz_set ( tmp. y",0
1472,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
1473,<S2SV_ModStart> NPNVSupportsXEmbedBool : case NPNVSupportsWindowless : type = RPC_TYPE_BOOLEAN ; break ;,0
1474,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
1475,"<S2SV_ModStart> s ) { if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } <S2SV_ModStart> 0 ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; }",0
1476,"<S2SV_ModStart> xIter = crm_first_attr <S2SV_ModEnd> ( xml ) <S2SV_ModStart> -> name ; <S2SV_ModEnd> if ( __xml_acl_check <S2SV_ModStart> ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else <S2SV_ModEnd> if ( __xml_acl_check <S2SV_ModStart> ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else { char * path = xml_get_path ( xml ) ; if ( xml!= xmlDocGetRootElement ( xml -> doc ) ) { xmlUnlinkNode ( xml ) ; xmlFreeNode ( xml ) ; return ;",0
1477,<S2SV_ModStart> <S2SV_null> <S2SV_null> static SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> NULL ; return <S2SV_ModEnd> svc_ctx -> internal <S2SV_ModStart> -> internal ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1478,"<S2SV_ModStart> mq_flush_lock, flags ) ; list_for_each_entry_safe ( rq, n, running, flush. list ) { unsigned int seq = blk_flush_cur_seq ( rq ) ; WARN_ON ( seq!= REQ_FSEQ_PREFLUSH && seq!= REQ_FSEQ_POSTFLUSH ) ; queued |= blk_flush_complete_seq ( rq, fq, seq, error ) ; } if ( q -> mq_ops ) spin_unlock_irqrestore ( & fq -> mq_flush_lock, flags ) ;",0
1479,"<S2SV_ModStart> STREAM s ) { struct stream packet = * s ; <S2SV_ModStart> int length ; if (! s_check ( s ) ) { rdp_protocol_error ( ""mcs_parse_domain_params(), <S2SV_blank> stream <S2SV_blank> is <S2SV_blank> in <S2SV_blank> unstable <S2SV_blank> state"", & packet ) ; return RD_FALSE ; } <S2SV_ModStart> MCS_TAG_DOMAIN_PARAMS, & packet <S2SV_ModEnd> ) ; in_uint8s <S2SV_ModStart> length ) ; if (! s_check ( s ) ) { rdp_protocol_error ( ""mcs_parse_domain_params(), <S2SV_blank> stream <S2SV_blank> is <S2SV_blank> in <S2SV_blank> unstable_state"", & packet ) ; return RD_FALSE ; }",0
1480,"<S2SV_ModStart> ; if ( hkey. type == HASH_KEY_IS_STRING ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; fprintf ( stderr, ""\\n"" ) ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" )",0
1481,"<S2SV_ModStart> char buffer [ 79 <S2SV_ModEnd> ] ; int <S2SV_ModStart> = VPX_IMG_FMT_I420 ; if ( only_420 ) { _y4m -> vpx_fmt = VPX_IMG_FMT_I420 ; } else if ( strcmp ( _y4m -> vpx_fmt, _y4m -> vpx_fmt ) == 0 ) { _y4m -> vpx_fmt = _y4m -> vpx_fmt ; } else { _y4m -> vpx_bps = 12 ; } <S2SV_ModStart> = 12 ; if ( <S2SV_ModEnd> strcmp ( _y4m <S2SV_ModStart> -> chroma_fmt, _y4m -> vpx_fmt ) == 0 ) { _y4m -> vpx_fmt = VPX_IMG_FMT_I420 ; } else if ( strcmp ( _y4m -> chroma_fmt, _y4m -> chroma_fmt ) == 0 ) { _y4m -> vpx_fmt = VPX_IMG_FMT_I420 ; } else { _y4m -> vpx_fmt = _y4m",0
1482,"<S2SV_ModStart> obj * otmp ; if ( strlen ( buf ) < 1 ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; }",0
1483,"<S2SV_ModStart> ) { long long <S2SV_ModEnd> directory_table_end, table_start <S2SV_ModStart> 0 ) return FALSE <S2SV_ModEnd> ; if ( <S2SV_ModStart> ( & table_start ) == FALSE ) return FALSE ; if ( parse_exports_table ( & table_start ) == FALSE ) return FALSE ; if ( read_inode_table ( & sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_fragment_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, directory_table_end ) == FALSE",0
1484,"<S2SV_ModStart> * rule ) { RB_INIT ( & env -> root ) ; <S2SV_ModStart> count = 0 ; if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ]!= NULL ; i ++ ) { const char * e, * eq ; size_t len ; node = createnode ( keybuf, eq + 1 ) ; if ( node == NULL ) continue ; node = createnode ( keybuf, eq + 1 ) ; if ( RB_INSERT ( envtree, & env -> root, node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } }",0
1485,"<S2SV_ModStart> -> seg ; vpx_clear_system_state <S2SV_ModEnd> ( ) ; <S2SV_ModStart> int segment ; memset <S2SV_ModEnd> ( cpi -> <S2SV_ModStart> ; vp9_clearall_segfeatures ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> frame_type, cm -> base_qindex, in_frame_q_adj_ratio [ segment ] ) ; vp9_enable_segfeature ( seg, segment, SEG_LVL_ALT_Q ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> frame_type, cm -> base_qindex, in_frame_q_adj_ratio [ segment ] ) ; vpx_enable_segfeature ( seg, segment, SEG_LVL_ALT_Q ) ; vpx_set_segdata ( seg, segment, SEG_LVL_ALT_Q,",0
1486,"<S2SV_ModStart> return 0 ; Module_type = make_type ( ""Module"", mod_type, Module_fields, 1 ) ; if (! Module_type ) return 0 ; Interactive_type = make_type ( ""Interactive"", mod_type, Interactive_fields, 1 ) ; if (! Interactive_type ) return 0 ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; Suite_type = make_type ( ""Suite"", mod_type, Suite_fields, 1 ) ; if (! Suite_type ) return 0 ; FunctionDef_type = make_type ( ""FunctionDef"", stmt_type, FunctionDef_fields, 5 ) ; if (! FunctionDef_type ) return 0 ; AsyncFunctionDef_type = make_type ( ""AsyncFunctionDef"", stmt_type, AsyncFunctionDef_fields, 5 ) ; if (! AsyncFunctionDef_type ) return 0 ; ClassDef_type = make_type ( ""ClassDef"", stmt_type, ClassDef_fields, 5 ) ; if (! ClassDef_type )",0
1487,"<S2SV_ModStart> ) ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> } write ( TEMP_FAILURE_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRIES, TEMP_FAILURE_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_RETRY_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_retry_",0
1488,<S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 8 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 4 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> += 2 ; <S2SV_ModEnd> break ; } <S2SV_ModStart> += 2 ; <S2SV_ModEnd> break ; },0
1489,<S2SV_ModStart> ) ; } ++ x -> ymode_count [ m ] ; ++ x -> uv_mode_count [ uvm ] ;,0
1490,"<S2SV_ModStart> ( sr, <S2SV_ModEnd> sr -> fid_ofile <S2SV_ModStart> file ) ; mutex_exit ( & file -> f_mutex ) ; file = smb_llist_next ( flist, file ) ; } smb_llist_enter ( flist, RW_READER ) ; file = smb_llist_head ( flist ) ; while ( file ) { mutex_enter ( & file -> f_mutex ) ; smb_flush_file ( sr, file ) ; mutex_exit ( & file -> f_mutex ) ; file = smb_llist_next ( flist, file ) ; } smb_llist_exit ( flist )",0
1491,<S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto screwup <S2SV_ModEnd> ; if (,0
1492,"<S2SV_ModStart> cinput ) { char * s, * t, * StartClean <S2SV_ModEnd> ; char * <S2SV_ModStart> * s, * <S2SV_ModStart> * t, * StartClean <S2SV_ModEnd> ; double * <S2SV_ModStart> = 0 ; if ( * s == '0' && s [ 1 ] == '[' ) { if ( strcmp ( nameobject, ""AxodrawWantsPDF"" ) == 0 ) { identification = 1 ; outpos += sprintf ( outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", VERSION, SUBVERSION ) ; fprintf ( outfile, ""%s"", outputbuffer ) ; return ( 0 ) ; } else if ( * s == '0' && s [ 1 ] == '[' ) { if ( strcmp ( nameobject, ""AxodrawWantsPDF"" ) == 0 ) { identification = 1 ; outpos += sprintf ( outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", VERSION, SUBVERSION ) ; fprintf ( outfile, ""%s"", outputbuffer ) ; return ( 0 ) ; } else { fprintf ( stderr, ""%s: <S2SV_blank> Illegal <S2SV_blank> request <S2SV_blank> in <S2SV_blank> identification <S2SV_blank> string <S2SV_blank> [0]: <S2SV_blank> %s",0
1493,"<S2SV_ModStart> segs ) { <S2SV_ModEnd> u32 hash, <S2SV_ModStart> id ; net_get_random_once <S2SV_ModEnd> ( & ip_idents_hashrnd <S2SV_ModStart> sizeof ( ip_idents_hashrnd ) ) ; hash = jhash_3words ( ( __force u32 ) iph -> daddr, ( __force u32 ) iph -> saddr, ( __force u32 ) iph -> protocol ^ net_hash_mix ( net ), ip_idents_hashrnd ) ; id = ip_idents_reserve ( hash, segs <S2SV_ModEnd> ) ; iph",0
1494,"<S2SV_ModStart> expr_ty step ; int res ; <S2SV_ModStart> int res ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { lower = NULL ; } if ( exists_not_none ( obj, & PyId_lower ) ) { int res ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { lower = NULL ; } if ( exists_not_none ( obj, & PyId_upper ) ) { int res ; tmp = _PyObject_GetAttrId ( obj, & PyId_upper ) ; if ( tmp == NULL ) goto failed ; Py_CLEAR ( tmp ) ; } else { upper = NULL ; } if ( exists_not_none ( obj, & PyId_step ) ) { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { step = NULL ; } if ( exists_not_none (",0
1495,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
1496,<S2SV_ModStart> = gecos ; <S2SV_ModEnd> printf ( _,0
1497,<S2SV_ModStart> vns ) { struct ieee80211_radiotap_header * radiotap_header = ( struct ieee80211_radiotap_header * ) get_unaligned ( & radiotap_header -> it_version ) ; if ( max_length < get_unaligned_le32 ( & radiotap_header -> it_len ) ) return - EINVAL ; if (,0
1498,"<S2SV_ModStart> int err ; struct tc_cls_u32_key * key ; <S2SV_ModStart> extack ) ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; <S2SV_ModStart> return - EOPNOTSUPP ; } key = be32_to_cpu ( knode -> sel -> keys [ 0 ]. key ) >> tos_off & 0xff ; val = be32_to_cpu ( knode -> sel -> keys [ 1 ]. val ) >> tos_off & 0xff ; mask = iter -> mask & mask ; if ( ( iter -> val & cmask ) == ( val & cmask ) && iter -> band!= knode -> res -> classid ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; goto err_delete ; } iter = iter -> mask & mask ; if ( ( iter -> val & cmask ) == ( val & cmask ) && iter -> band!= knode -> res -> classid ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter",0
1499,"<S2SV_ModStart> } ZEND_FETCH_RESOURCE ( im <S2SV_ModEnd>, gdImagePtr, <S2SV_ModStart> le_gd ) ; <S2SV_ModEnd> if ( gdImageTrueColor <S2SV_ModStart> ) ) { int x, y ; c = gdImageGetPixel ( im, x, y ) ; gdImageSetPixel ( im, x, y, gdTrueColorAlpha ( ( int ) ( ( pow ( ( pow ( ( gdTrueColorGetRed ( c ) / 255.0 ), input ) ), 1.0 / output ) * 255 ) +.5 ), ( int ) ( ( pow ( ( gdTrueColorGetGreen ( c ) / 255.0 ) ), 1.0 / output ) * 255 ) +.5 ) ; } for ( i = 0 ; i < gdImageColorsTotal ( im ) ; i ++ ) { im -> red [ i ] = ( int ) ( ( pow ( ( pow ( ( im -> red [ i ] / 255.0 ), input ) ), 1.0 / output ) * 255 ) +.5 ) ; im -> green [ i ] = ( int ) ( ( pow ( ( im -> green [ i ] / 255.0 ) ), 1.0 / output ) * 255 )",0
1500,<S2SV_ModStart> ; } if ( stream -> config. cfg. rc_twopass_stats_in == NULL ) { stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> cx_time = 0 ; stream -> nbytes = 0 ; stream -> frames_out = 0 ; } else { stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; } if ( pass ) { stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> cx_time = 0 ; stream -> nbytes = 0 ; } else { stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; } if ( pass ) { stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; stream -> config. cfg. rc_twopass_stats_in = stats_get (,0
1501,"<S2SV_ModStart> new_data_len ) ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; <S2SV_ModStart> if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; <S2SV_ModStart> g_key_file_new ( ) ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; <S2SV_ModStart> if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ;",0
1502,"<S2SV_ModStart> data_end ) { <S2SV_ModEnd> const int aligned_cols <S2SV_ModStart> tile_col ; const int tile_rows = cm -> log2_tile_rows ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = cm -> log2_tile_rows ; const int tile_rows = ( 1 << 6 ) ) ; memset ( cm -> above_context, 0, sizeof ( * cm -> above_context ) * MAX_MB_PLANE * 2 * aligned_cols ) ; memset ( cm -> above_seg_context, 0, sizeof ( * cm -> above_seg_context ) * aligned_cols ) ; for ( tile_row = 0 ; tile_row < tile_rows ; ++ tile_row ) { for ( tile_col = 0 ; tile_col < tile_cols ; ++ tile_col ) { const int last_tile = tile_row == tile_rows - 1 && tile_col == tile_cols - 1 ; const size_t size = get_tile ( data_end",0
1503,"<S2SV_ModStart> VP9D_CONFIG * oxcf, vpx_bit_depth_t bit_depth <S2SV_ModStart> = vpx_memalign ( 32 <S2SV_ModEnd>, sizeof ( <S2SV_ModStart> * pbi ) ) ; VP9_COMMON * const cm = pbi? & pbi -> common : NULL ; if (! pbi ) return NULL ; vp9_zero ( * pbi ) ; if ( setjmp ( setjmp ( cm -> error. jmp ) ) { cm -> error. setjmp = 1 ; vpx_initialize_dec ( ) ; vpx_memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_video_frame = 0 ; vp9_rtcd ( ) ; vpx_memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_key_frame = 0 ; vp9_init_dequantizer ( cm ) ; cm -> error. setjmp = 0 ; return pbi ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1504,"<S2SV_ModStart> ) ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; <S2SV_ModStart> ) ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } else { ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
1505,<S2SV_ModStart> = new_fpl -> count + 1,0
1506,"<S2SV_ModStart> req ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> ; if ( rcu_dereference_protected ( req_inet -> inet_opt, sock_owned_by_user ( req ) ) ) return ; opt = rcu_dereference_protected ( req_inet -> inet_opt, sock_owned_by_user ( req ) ) ; if ( opt == NULL || opt -> cipso == 0 ) return ; <S2SV_ModEnd> cipso_v4_delopt ( &",0
1507,"<S2SV_ModStart> * tokens, const vpx_tree_index <S2SV_ModEnd> * tree, <S2SV_ModStart> do { const vpx_tree_index <S2SV_ModEnd> j = tree <S2SV_ModStart> ++ ] ; if ( j <= 0 ) { tokens [ - j ]. value = v ; tokens [ - j ]. len = l ; } else { tokens [ - j ]. len = l ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1508,<S2SV_ModStart> ; if ( flags & VP8_EFLAG_NO_REF_LAST ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_GOLD_FLAG ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP9_ALT_FLAG ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_GOLD_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_GOLD_FLAG ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP9_ALT_FLAG ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags &,0
1509,<S2SV_ModStart> wqh ) ; <S2SV_ModEnd> if ( isalarm,0
1510,"<S2SV_ModStart> mount * child <S2SV_ModEnd> ; struct hlist_node <S2SV_ModStart> int err ; hlist_for_each_entry_safe ( child, n, & tree_list, mnt_hash ) { struct mount * q ; <S2SV_ModStart> mnt_hash ) ; q = __lookup_mnt_last ( & child -> mnt_parent -> mnt, child -> mnt_mountpoint ) ; q = __lookup_mnt_last ( & child -> mnt_parent -> mnt, child -> mnt_mountpoint ) ; } else { err = propagate_mnt ( dest_mnt, dest_mp, source_mnt, & tree_list ) ; if ( err ) goto out_cleanup_ids ; for ( p = source_mnt ; p ; p = next_mnt ( p, source_mnt ) ) set_mnt_shared ( p ) ; } else { lock_mount_hash ( ) ; } if ( parent_path ) { detach_mnt ( source_mnt, parent_path ) ; attach_mnt ( source_mnt, dest_mnt, dest_mp ) ; touch_mnt_namespace ( source_mnt -> mnt_ns ) ; } else { mnt_set_mount",0
1511,"<S2SV_ModStart> { ret = check_tag_len <S2SV_ModEnd> ( asn1, <S2SV_ModStart> len ) ; if ( ret ) goto error ; if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } newseq = realloc ( seq, count * elemtype -> size ) ; if ( newseq == NULL ) { ret = ENOMEM ; goto error ; } seq = newseq ; elem = ( char * ) seq + count * elemtype -> size ; memset ( elem, 0, elemtype -> size ) ; ret = decode_atype ( & t, contents, clen, elemtype, elem ) ; if ( ret ) goto error ; count ++ ; } if (! check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } newseq = realloc ( seq, count * elemtype -> size ) ; if ( newseq == NULL ) { ret = ENOMEM ; goto error ; } seq = newseq ; elem = ( char * ) seq + count * elemtype -> size ; memset ( elem, 0, elemtype -> size ) ; ret = ENOMEM ; goto error",0
1512,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = pair_set_epi16 ( cospi_1_64, - cospi_1_64 <S2SV_ModEnd> ) ; const <S2SV_ModStart> = pair_set_epi16 ( cospi_1_64, - cospi_1_64 <S2SV_ModEnd> ) ; const <S2SV_ModStart> = pair_set_epi16 ( cospi_1_64, - cospi_1_64 <S2SV_ModEnd> ) ; const <S2SV_ModStart> = pair_set_epi16 ( cospi_1_64, - cospi_1_64 <S2SV_ModEnd> ) ; const <S2SV_ModStart> = pair_set_epi16 ( cospi_1_64, - cospi_1_64 <S2SV_ModEnd> ) ; const <S2SV_ModStart> = pair_set_epi16 ( cospi_1_64, - cospi_1_64 <S2SV_ModEnd> ) ; const <S2SV_ModStart> = pair_set_epi16 ( cospi_1_64, - cospi_1_64 <S2SV_ModEnd> ) ; const",0
1513,"<S2SV_ModStart> int frame_max_bits ( const RATE_CONTROL * rc, const VP9EncoderConfig <S2SV_ModEnd> * oxcf ) <S2SV_ModStart> ) rc -> avg_frame_bandwidth <S2SV_ModEnd> * oxcf ->",0
1514,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
1515,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> Huff_transmit ( huff <S2SV_ModStart> NULL ) { return <S2SV_ModEnd> NYT ; } <S2SV_ModStart> NYT, fout ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1516,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_superblock ( VP9_COMP <S2SV_ModStart> * cpi, ThreadData * td, <S2SV_ModStart> int output_enabled, ThreadData * td_data <S2SV_ModEnd>, BLOCK_SIZE bsize <S2SV_ModStart> BLOCK_SIZE bsize ) { <S2SV_ModEnd> VP9_COMMON * const <S2SV_ModStart> x = & td_data <S2SV_ModEnd> -> common ; <S2SV_ModStart> x = & td_data <S2SV_ModEnd> -> mb ; <S2SV_ModStart> = get_block_context ( x <S2SV_ModEnd>, bsize ) <S2SV_ModStart> -> skip_recode =! x -> select_txfm_size && mbmi -> sb_type >= BLOCK_8X8 && cpi -> oxcf. aq_mode!= COMPLEXITY_AQ && cpi -> oxcf. aq_mode!= CYCLIC_REFRESH_AQ && cpi -> sf. allow_skip_recode ; x -> skip_optimize = ctx -> is_coded ; x -> use_lp32x32fdct = cpi -> sf. use_lp32x32fdct ; x -> use_lp32x32fdct = cpi -> oxcf. use_lp32x32fd",0
1517,"<S2SV_ModStart> key ) { <S2SV_ModEnd> unsigned char key2 <S2SV_ModStart> 8 ] ; <S2SV_ModEnd> struct crypto_skcipher * <S2SV_ModStart> tfm_des = crypto_alloc_skcipher <S2SV_ModEnd> ( ""ecb(des)"", <S2SV_ModStart>, 0, CRYPTO_ALG_ASYNC ) ; if ( IS_ERR ( tfm_des ) ) { rc = PTR_ERR ( tfm_des ) ; cifs_dbg ( VFS, ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> des <S2SV_blank> crypto <S2SV_blank> API\\n"" ) ; goto smbhash_err ; } req = skcipher_request_alloc ( tfm_des, GFP_KERNEL ) ; if (! req ) { rc = - ENOMEM ; cifs_dbg ( VFS, ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> des <S2SV_blank> crypto <S2SV_blank> API\\n"" ) ; goto smbhash_err ; } skcipher_request_set_callback ( req, 0, NULL, NULL ) ; rc = crypto_skcipher_encrypt ( req ) ; if ( rc ) cifs_dbg ( VFS, ""could <S2SV_blank> not <S2SV_blank> encrypt <S2SV_blank> crypt <S2SV_blank> key <S2SV_blank> rc: <S2SV_blank> %d\\n"", rc ) ; smbhash_free_skcipher",0
1518,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> - 4 ) <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ; psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ; psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ; psf -> header. indx <S2SV_ModEnd> ++ = x <S2SV_ModStart> ; psf -> header. indx <S2SV_ModEnd> ++ = x <S2SV_ModStart> ; psf -> header. indx <S2SV_ModEnd> ++ = x <S2SV_ModStart> ; psf -> header. indx <S2SV_ModEnd> ++ = x <S2SV_ModStart> ; psf -> header. indx <S2SV_ModEnd> ++ = x <S2SV_ModStart> ; psf -> header. indx <S2SV_ModEnd> ++ = x <S2SV_ModStart> ; psf -> header. indx <S2SV_ModEnd> ++ = x <S2SV_ModStart> ; psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ; psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ; psf -> header. indx <S2SV_ModEnd> ++ ] = <S2SV_ModStart> ; psf -> header. indx <S2SV_ModEnd> ++ = x,0
1519,"<S2SV_ModStart> value ; int position, zeroes, i, j ; char bits [ 65 ] ; if ( ctx -> trace_enable ) position = get_bits_count ( gbc ) ; if ( position < 0 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits1 ( gbc ) ) { bits [ i ++ ] = '1",0
1520,<S2SV_ModStart> += delta ; <S2SV_ModEnd> } } <S2SV_null>,0
1521,"<S2SV_ModStart> ) ) { switch ( exit_reason ) { case EXIT_REASON_NMI_WINDOW : return nested_cpu_has ( vmcs12, CPU_BASED_NMI_PENDING ) ; case EXIT_REASON_TASK_SWITCH : return 1 ; case EXIT_REASON_NMI_OVERFLOW : return nested_cpu_has ( vmcs12, CPU_BASED_NMI_OVERFLOW ) ; case EXIT_REASON_NMI_OVERFLOW : return nested_cpu_has ( vmcs12, CPU_BASED_NMI_OVERFLOW ) ; }",0
1522,"<S2SV_ModStart> ) || strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> ( c ) || strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> ( c ) || strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> ( c ) || strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> ( c ) || strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> ( c ) || strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> ( c ) || strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> ( c ) || strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> ( c ) || strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~"", <S2SV_ModStart> ( c ) || strchr <S2SV_ModEnd> ( ""!#$%&\'*+-.^_`|~""",0
1523,"<S2SV_ModStart> -> http_contentlen. len = 0, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_origin. ptr = NULL, packet -> http_origin. len = 0, packet -> http_x_session_type. ptr = NULL, packet -> http_x_session_type. len = 0, packet -> server_line. ptr = NULL, packet -> server_line. len = 0, packet -> server_line. ptr = NULL, packet -> server_line. len = 0, packet ->",0
1524,<S2SV_ModStart> path ) ; <S2SV_ModEnd> out : return,1
1525,"<S2SV_ModStart> ++ r ; if <S2SV_ModEnd> ( pow ( <S2SV_ModStart> dim ) > entries ) r = ( int ) floor ( pow ( ( float ) r + 1, dim ) ) ; if ( ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) r = ( int ) floor ( pow ( ( float ) r + 1, dim ) ) ; if ( ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) r = ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) r = ( int ) floor ( pow ( ( float ) r + 1, dim ) ) ; if ( ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) r = ( int ) floor ( pow ( ( float ) r + 1, dim ) ) ; if ( ( int ) floor ( pow ( ( float ) r, dim ) ) <= entries ) r = ( int ) floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) r = ( int ) floor ( pow ( ( float ) r + 1, dim ) ) ; if ( r < 0 ) r = ( int ) floor ( pow ( ( float",0
1526,"<S2SV_ModStart> 4 ) { if ( ( x + x ) > ( ssize_t ) dds_info -> width - x ) || ( y + y ) > ( ssize_t ) dds_info -> height - y ) ) return MagickFalse ; <S2SV_ModStart> dds_info, 8 <S2SV_ModEnd> ) ; return",0
1527,"<S2SV_ModStart> } if ( unlikely ( ip_options_compile ( dev_net ( dev ), & opt -> opt, skb ) ) ) goto inhdr_error ; if ( unlikely ( opt -> optlen < iph -> ihl * 4 - sizeof ( struct iphdr ) ) ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INHDRERRORS ) ; goto drop ; } opt -> optlen = iph -> ihl * 4 - sizeof ( struct iphdr ) ; if ( unlikely ( opt -> opt. <S2SV_ModEnd> srr ) ) <S2SV_ModStart> goto inhdr_error ; if ( unlikely ( opt -> optlen < iph -> ihl * 4 - sizeof ( struct iphdr ) ) ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INHDRERRORS ) ; goto drop ; }",0
1528,"<S2SV_ModStart> length ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> EINTR ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY )",0
1529,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; sendClean ( outputbuffer ) ;",0
1530,"<S2SV_ModStart> cfg ) { <S2SV_ModEnd> memset ( cfg <S2SV_ModStart> -> debug_file = open ( filename, O_WRONLY | O_APPEND | O_CLOEXEC | O_NOFOLLOW | O_NOCTTY | O_NOCTTY | O_NOCTTY | O_NOCTTY | O_NOCTTY | O_NOCTTY | O_NOCTTY | O_NOCTTY | O_NOCTTY | O_NOCTTY | O_NOFOLLOW | O_NOFOLLOW | O_NOFOLLOW | O_NOCTTY | O_WRONLY | O_APPEND | O_CLOEXEC | O_NOCTTY | O_NOCTTY | O_NOCTTY | O_NOCTTY | O_NOCTTY | O_NOCTTY | O_NOCTTY | O_NOCTTY | O_NOCTTY | O_NOCTTY | O_NOCTTY | O_NOCTTY | O_NOCTTY | O_NOFOLLOW | O_NOCTTY | O_NOCTTY | O_TRUNC | O_NOCTTY | O_NOCTTY | O_NOCTTY | O_NO",0
1531,"<S2SV_ModStart> = DEF_MIN_FSYNC_BLOCKS ; if ( test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_FSYNC ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_FSYNC ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_UTIL ; if ( test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_FSYNC ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_UTIL ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_UTIL ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_UTIL",0
1532,"<S2SV_ModStart> ) ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""%12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> cm\\n"", <S2SV_ModStart> y ) ; sendClean ( outputbuffer ) ;",0
1533,"<S2SV_ModStart> ; WLog_VRB ( AUTODETECT_TAG <S2SV_ModEnd>, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU""",0
1534,<S2SV_ModStart> ; # endif # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOATION # else # endif # endif # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # endif # endif # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING # if CONFIG_TEMPORAL_DENOISING #,0
1535,"<S2SV_ModStart> ( pvc ) ; dev = alloc_netdev ( 0, ""pvceth%d"", ether_setup ) ; if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENOBUFS ; } else if ( type == ARPHRD_ETHER ) dev = alloc_netdev ( 0, ""pvceth%d"", pvc_setup ) ; if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENOBUFS ; }",0
1536,"<S2SV_ModStart> * data ; struct stream packet = * s ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",0
1537,"<S2SV_ModStart> -> b_multithreaded_rd ) vpx_de_alloc_temp_buffers <S2SV_ModEnd> ( pbi,",0
1538,<S2SV_ModStart> 0 ) { if ( l -> lineBuf [ spos ] == '\\0' ) { buf -> currentLine -> lineBuf [ spos ] = '\\0' ; } else if ( l -> lineBuf [ spos ] == '\\0' ) { buf -> currentLine -> lineBuf [ spos ] = '\\0' ; } else if ( l -> lineBuf [ spos ] == '\\0' ) { buf -> currentLine -> lineBuf [ spos ] = '\\0' ; } else { if ( l -> lineBuf [ spos ] == '\\0' ) { buf -> currentLine -> lineBuf [ spos ] = '\\0' ; } else if ( l -> lineBuf [ spos ] == '\\0' ) { buf -> currentLine -> lineBuf [ spos ] = '\\0' ; } else if ( l -> lineBuf [ spos ] == '\\0' ) { buf -> currentLine -> lineBuf [ spos ] = '\\0' ; } else { if ( l -> lineBuf [ spos ] == '\\0' ) { buf -> currentLine -> lineBuf [ spos ] = '\\0' ; } else if ( l -> lineBuf [ spos ] == '\\0' ) { buf,0
1539,<S2SV_ModStart> { if ( <S2SV_ModEnd> ( xWantedSize > <S2SV_ModStart> 0x00 ) { if ( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) > xHeapStructSize ) ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } } else { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } } else { mtCOVERAGE_TEST_MARKER ( ) ; } if ( ( xWantedSize + xHeapStructSize ) > xFreeBytesRemaining ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ),0
1540,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
1541,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1542,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpDiff ( TIFF <S2SV_ModStart> cc ) ; if <S2SV_ModEnd> ( ( cc <S2SV_ModStart> stride ) )!= 0 ) { TIFFErrorExt ( tif -> tif_clientdata, ""fpDiff"", ""%s"", ""(cc%(bps*stride))!=0"" ) ; return 0 ; } <S2SV_ModStart>! tmp ) { TIFFErrorExt ( tif -> tif_clientdata, ""%s"", ""(cc%(bps*stride))!=0"", ""(cc%(bps*stride))!=0)"", ""(cc%(bps*stride))!=0)"" ) ; return 0 ; } <S2SV_ModEnd> _TIFFmemcpy ( tmp <S2SV_ModStart> ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { # if WORDS_BIGENDIAN cp [ byte * wc + count ] = tmp [ bps * count + byte ] ; # endif <S2SV_ModStart> ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { # if WORDS_BIGENDIAN cp [ byte * wc + count ] = tmp [ bps * count",0
1543,"<S2SV_ModStart> STREAM s ) { struct stream packet = * s ; <S2SV_ModStart> int i ; if (! s_check_rem ( s ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> bitmap <S2SV_blank> updates <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> ++ ) { if (! s_check_rem ( s ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> bitmap <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> ++ ) { if (! s_check_rem ( s ) ) { rdp_protocol_error ( ""process_bitmap_updates(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> bitmap <S2SV_blank> updates <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; }",0
1544,"<S2SV_ModStart> } else { if ( smatch ( option, ""path"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Path <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large. <S2SV_blank> Must <S2SV_blank> be <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> 10MB"" ) ; return MPR_ERR_BAD_SYNTAX ; } else { ovalue = strim ( option, ""\\""\'"", MPR_TRIM_BOTH ) ; } else if ( smatch ( option, ""backup"" ) ) { backup = ( ssize ) getnum ( ovalue ) ; } else if ( smatch ( option, ""anew"" ) ) { flags |= MPR_LOG_ANEW ; } else if ( smatch ( option, ""stamp"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Backup <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small. <S2SV_blank> Must <S2SV_blank> be <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> 10MB"" ) ; return MPR_ERR_BAD_SYNTAX ; } else { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Backup <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small. <S2SV_blank> Must <S2SV_blank> be <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> 10MB"" ) ; return",0
1545,"<S2SV_ModStart> tx_size, vpx_coeff_stats <S2SV_ModEnd> * coef_branch_ct ) <S2SV_ModStart> coef_branch_ct ) { vpx_tree_probs_from_distribution <S2SV_ModEnd> ( vp9_coef_tree, <S2SV_ModStart> coef_probs ) { vpx_tree_probs_from_distribution <S2SV_ModEnd> ( vp9_coef_tree,",0
1546,"<S2SV_ModStart> { } ; struct termios old_tc ; <S2SV_ModStart> name ) ; old_tc = tc ; r = set_termios ( fd, & tc, & old_tc ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> termios <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( old_tc ), name ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> termios <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( old_tc ), name ) ; r = set_termios ( fd, & old_tc, & tc ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> termios <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", name ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> termios <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( old_tc ), name ) ;",0
1547,"<S2SV_ModStart> int su3000_frontend_attach ( struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> dev ; int ret = 0 ; <S2SV_ModStart> 0 } ; if ( dvb_usb_generic_rw ( d, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; else if ( dvb_usb_generic_rw ( d, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; else if ( dvb_usb_generic_rw ( d, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; else if ( dvb_usb_generic_rw ( d, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; else if ( dvb_usb_generic_rw ( d, obuf, 3, ibuf, 1, 0 ) < 0 )",0
1548,"<S2SV_ModStart> * iface, vpx_codec_enc_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION",0
1549,"<S2SV_ModStart> int stride, <S2SV_ModEnd> int uv_block_size, <S2SV_ModStart> const kernel = vpx_get_interp_kernel ( xd -> mi [ 0 ] -> mbmi. interp_filter ) <S2SV_ModEnd> ; enum mv_precision <S2SV_ModStart> ; if ( <S2SV_ModEnd> uv_block_size == 8 <S2SV_ModStart> == 8 ) { stride = ( stride + 1 ) >> 1 ; mv_precision_uv = MV_PRECISION_Q4 ; } else { uv_stride = ( stride + 1 ) >> 1 ; } vpx_build_inter_predictor ( y_mb_ptr, stride, & pred [ 0 ], 16, 16, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vpx_build_inter_predictor ( u_mb_ptr, uv_stride, & pred [ 256 ], uv_block_size, uv_block_size, which_mv, kernel, MV_PRECISION_Q3, x, y ) ; vpx_build_inter_predictor ( v_mb_ptr, uv_stride, & pred [ 512 ], 16, 16, which_mv, kernel, MV_PRECISION_Q3, x, y )",0
1550,"<S2SV_ModStart> = TRUE ; if ( strlen ( origbuf ) < 4 ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } bufp = find_optparam ( buf ) ; if (! bufp ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ;",0
1551,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static cJSON * cJSON_CreateFloatArray ( double <S2SV_ModEnd> * numbers, <S2SV_ModStart> < count ; ++ i <S2SV_ModEnd> ) { n <S2SV_ModStart> = cJSON_CreateFloat ( <S2SV_ModEnd> numbers [ i <S2SV_ModStart> i ] ) ; if (! n ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; }",0
1552,"<S2SV_ModStart> tk_status ) ; if ( status == NLM_LCK_DENIED_GRACE_PERIOD ) { rpc_delay ( task, NLMCLNT_GRACE_WAIT ) ; goto retry_rebind ; } if ( status == NLM_LCK_GRANTED ) { printk ( KERN_WARNING ""lockd: <S2SV_blank> unexpected <S2SV_blank> unlock <S2SV_blank> status: <S2SV_blank> %d\\n"", status ) ; die : return ; } if ( status == NLM_LCK_GRANTED ) printk ( KERN_WARNING ""lockd: <S2SV_blank> unexpected <S2SV_blank> unlock <S2SV_blank> status: <S2SV_blank> %d\\n"", status ) ; die : return ;",0
1553,"<S2SV_ModStart>, n ) ; if ( w == NULL ) { f -> previous_window [ i ] [ j ] = 0 ; } else { for ( i = 0 ; i < f -> channels ; ++ i ) f -> channel_buffers [ i ] [ left + j ] = f -> channel_buffers [ i ] [ left + j ] ; for ( j = 0 ; j < f -> channels ; ++ j ) f -> previous_window [ i ] [ j ] /= w [ n - 1 - j ] ; for ( i = 0 ; i < f -> channels ; ++ i ) for ( j = 0 ; j < f -> channels ; ++ j ) f -> channel_buffers [ i ] [ left + j ] = f -> channel_buffers [ i ] [ left + j ] * f -> previous_window [ i ] [ j ] ; for ( j = 0 ; j < f -> channels ; ++ j ) f -> channel_buffers [ i ] [ left + j ] = f -> channel_buffers [ i ] [ left + j ] ; for ( j = 0 ; j < f -> channels ; ++ j ) for ( j = 0 ; j < f -> channels ; ++ j ) f -> channel",0
1554,"<S2SV_ModStart> 4 ) ; if ( idx + 4 > len ) return NULL ; <S2SV_ModStart> len ) ; if ( j < ( a -> names [ i ]. len >> 1 ) ) { <S2SV_ModStart> ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len ) ; } } else { size_t i ; a -> name = CHECKINT32 ( buf + idx ) ; idx += 4 ; if ( a -> name & GUID_EXISTS_FLAG ) { a -> guid = CHECKED_XMALLOC ( GUID, 1 ) ; copy_guid_from_buf ( a -> guid, buf + idx, len ) ; idx += sizeof ( GUID ) ; } } else { size_t i ; a -> names = CHECKED_XCALLOC ( VarLenData, a -> num_names ) ; for ( i = 0 ; i < a -> num_names ; i ++ ) { size_t j ; CHECKINT32 ( idx, len ) ; a -> names [ i ]. len = GETINT32 ( buf + idx ) ; idx += 4 ; a -> names [ i ]. data = CHECKED_",0
1555,"<S2SV_ModStart> data_end ) { <S2SV_ModEnd> const uint8_t * <S2SV_ModStart> int num_workers = MIN <S2SV_ModEnd> ( pbi -> <S2SV_ModStart> int num_workers = MIN <S2SV_ModEnd> ( pbi -> <S2SV_ModStart>, tile_cols ) ; TileBuffer tile_buffers [ 1 << 6 ] ; int n ; int final_worker = - 1 ; if ( tile_cols <= ( 1 << 6 ) ) assert ( tile_rows <= ( 1 << 6 ) ) ; if ( pbi -> num_tile_workers == 0 ) { CHECK_MEM_ERROR ( cm, pbi -> tile_workers, vpx_malloc ( num_threads * sizeof ( * pbi -> tile_workers ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR ( cm, worker -> data2, vpx_malloc ( sizeof ( TileInfo ) ) ) ; if ( i < num_threads - 1 &&! vp9_worker_init ( worker ) ) { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Tile <S2SV_blank> decoder <S2SV_blank> thread <S2SV_blank> creation <S2SV_blank> failed""",0
1556,<S2SV_ModStart> * 0x101 ; if (! fgetc ( ifp ) ) return ; <S2SV_ModStart> ( ) ; if (! fgetc ( ifp ) ) return ; <S2SV_ModStart> ( ) ; if (! fgetc ( ifp ) ) break ; <S2SV_ModStart> ( ) ; if (! fgetc ( ifp ) ) break ; <S2SV_ModStart> ( ) ; if (! fgetc ( ifp ) ) break ; <S2SV_ModStart> ( ) ; if (! fgetc ( ifp ) ) break ; <S2SV_ModStart> ( ) ; if (! fgetc ( ifp ) ) break ; <S2SV_ModStart> ( ) ; if (! fgetc ( ifp ) ) break ; <S2SV_ModStart> ( ) ; if (! fgetc ( ifp ) ) break ; <S2SV_ModStart> ( ) ; if (! fgetc ( ifp ) ) break ; imgdata. makernotes. sony. prd_ImageHeight = ( ushort ) fgetc ( ifp ) ; if (! fgetc ( ifp ) ) break ; imgdata. makernotes. sony. prd_ImageWidth = ( ushort ) fgetc ( ifp ) ;,0
1557,"<S2SV_ModStart> -> common ; vpx_clear_system_state ( ) ; const double base_q = vp9_convert_qindex_to_q ( cpi -> base_qindex, cm -> y_dc_delta_q ) ; const int base_rdmult = vp9_compute_rd_mult ( cpi, cm -> base_qindex + cm -> y_dc_delta_q ) ; RDMULT_RATIO ( i ) = 1 ; for ( i = ENERGY_MIN ; i <= ENERGY_MAX ; i ++ ) { if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; } qindex_delta = vp9_compute_qdelta ( & cpi -> rc, base_q, base_q * Q_RATIO ( i ) ) ; vpx_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, qindex_delta ) ; vpx_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q ) ;",0
1558,"<S2SV_ModStart> int bychunk ; if (! TIFFIsTiled ( out ) ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> tiled <S2SV_blank> configuration <S2SV_blank> w/bias <S2SV_blank> image\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; } <S2SV_ModStart> int bychunk ; if (! TIFFIsTiled ( out ) ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> tiled <S2SV_blank> configuration <S2SV_blank> w/bias <S2SV_blank> image\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; } if (! TIFFIsTiled ( out ) ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> tiled <S2SV_blank> configuration <S2SV_blank> w/bias <S2SV_blank> image\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; } if (! TIFFIsTiled ( out ) ) { if (! TIFFGetField ( in, TIFFTAG_TILEWIDTH, & tw ) ) tw = w ; if (! TIFFGetField ( in, TIFFTAG_TILELENGTH, & tl ) ) tw = l ; if (! TIFFIsTiled ( out ) ) { if (! TIFFI",0
1559,<S2SV_ModStart>. err_detail = error <S2SV_ModEnd> -> has_detail? <S2SV_ModStart> error -> detail : NULL ; return error -> error_code <S2SV_ModEnd> ; } <S2SV_null>,0
1560,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1561,"<S2SV_ModStart> bson_validate_with_error ( b, _flags, & error ) ) ; ASSERT_ERROR_CONTAINS ( error, BSON_ERROR_INVALID, _flag, _msg ) ; bson_destroy ( b ) ;",0
1562,<S2SV_ModStart> * ps_cur_slice ; pocstruct_t * ps_prev_poc <S2SV_ModEnd> ; ih264d_free_dynamic_bufs (,0
1563,<S2SV_ModStart> goto out_unlock ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,0
1564,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> congest_packet ) ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> from <S2SV_blank> driver: <S2SV_blank> %s"", __func__, strerror ( errno ) ) ; GKI_freebuf ( buffer ) ; btsock_thread_add_fd ( pan_pth, fd, 0, SOCK_THREAD_FD_RD, 0 ) ; break ; default : BTIF_TRACE_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> from <S2SV_blank> driver: <S2SV_blank> %s"", __func__, strerror ( errno ) ) ; GKI_freebuf ( buffer ) ; btsock_thread_add_fd ( pan_pth, fd, 0, SOCK_THREAD_FD_RD, 0 ) ; return ; }",0
1565,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> int getnum ( <S2SV_ModStart> return df ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1566,"<S2SV_ModStart> ; markold ( g, g -> allgc, g -> reallyold ) ; markold ( g, g -> finobj, g -> finobjrold ) ;",0
1567,"<S2SV_ModStart> = 0 ; else { * cold = - 1 ; ret = - EIO ; goto err ; } <S2SV_ModEnd> deb_info ( ""Identify <S2SV_blank> state <S2SV_blank> cold <S2SV_blank> = <S2SV_blank> %d\\n""",0
1568,"<S2SV_ModStart> 'S' } ; <S2SV_ModEnd> if ( phase <S2SV_ModStart>!= PROTOCOL_EARLY ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } if ( safe_memcmp ( buffer, ssl_request, sizeof ssl_request ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } if ( safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } if ( safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; }",0
1569,"<S2SV_ModStart> int cib_tls_signon ( cib_t <S2SV_ModEnd> * cib, <S2SV_ModStart> cib -> variant_opaque <S2SV_ModEnd>, struct remote_connection_s <S2SV_ModStart> -> variant_opaque ; <S2SV_ModEnd> char * server <S2SV_ModStart> = 0 ; <S2SV_ModEnd> struct mainloop_fd_callbacks cib_fd_callbacks <S2SV_ModStart> = NULL ; connection -> socket = 0 ; connection -> session = NULL ; <S2SV_ModEnd> sock = socket <S2SV_ModStart> PF_INET, SOCK_STREAM <S2SV_ModEnd>, IPPROTO_TCP ) <S2SV_ModStart> ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; }",0
1570,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> = 0 ; if ( setjmp ( cm -> error. jmp ) ) { cpi -> common. error. setjmp = 1 ; CHECK_MEM_ERROR ( cpi -> mb. ss, vpx_calloc ( sizeof ( search_site ), ( MAX_MVSEARCH_STEPS * 8 ) + 1 ) ) ; vp8_create_common ( & cpi -> common ) ; } else if ( setjmp ( cm -> error. jmp ) ) { cpi -> common. error. setjmp = 1 ; CHECK_MEM_ERROR ( cpi -> mb. ss, vpx_calloc ( sizeof ( search_site ), ( MAX_MVSEARCH_STEPS * 8 ) + 1 ) ) ) ; cpi -> common. error. setjmp = 1 ; } vp8_create_common ( & cpi -> common ) ; memcpy ( cpi -> base_skip_false_prob, vp8cx_base_skip_false_prob ) ; memcpy ( cpi -> base_skip_false_prob, vp8cx_base_skip_false_",0
1571,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS_MAJ, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS_MIN, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS_MIN, 1 <S2SV_ModEnd>, regs,",0
1572,"<S2SV_ModStart> ( ndo, ""%s"", mldv2_tstr <S2SV_ModEnd> ( ndo, <S2SV_ModStart> ( ndo, ""%s"", mldv2_tstr <S2SV_ModEnd> ( ndo, <S2SV_ModStart> ( ndo, ""%s"", mldv2_tstr <S2SV_ModEnd> ( ndo, <S2SV_ModStart> ( ndo, ""%s"", mldv2_tstr <S2SV_ModEnd> ( ndo, <S2SV_ModStart> ( ndo, ""%s"", mldv2_tstr <S2SV_ModEnd> ( ndo, <S2SV_ModStart> ( ndo, ""%s"", mldv2_tstr <S2SV_ModEnd> ( ndo, <S2SV_ModStart> ( ndo, ""%s"", mldv2_tstr <S2SV_ModEnd> ( ndo, <S2SV_ModStart> ( ndo, ""%s"", mldv2_tstr <S2SV_ModEnd> ( ndo, <S2SV_ModStart> ( ndo, ""%s"", mldv2_tstr <S2SV_ModEnd> ( ndo, <S2SV_ModStart> ( ndo, ""%s"", mldv2_tstr <S2SV_ModEnd> ( ndo,",0
1573,"<S2SV_ModStart> case EXPR_NOT : * set_rtrn = false ; <S2SV_ModStart>, set_rtrn ) ; if (! * set_rtrn ) * set_rtrn = true ; return ok ; case EXPR_UNARY_PLUS : * set_rtrn =! * set_rtrn ; return ok ; case EXPR_ADD : case EXPR_SUBTRACT : case EXPR_SUBTRACT : if ( istreq ( ident, ""true"" ) || istreq ( ident, ""false"" ) || istreq ( ident, ""no"" ) || istreq ( ident, ""on"" ) ) { * set_rtrn = true ; return true ; } else if ( istreq ( ident, ""false"" ) || istreq ( ident, ""on"" ) ) { * set_rtrn = false ; return true ; } else if ( istreq ( ident, ""true"" ) || istreq ( ident, ""false"" ) || istreq ( ident, ""on"" ) ) { * set_rtrn = true ; return true ; } else if ( istreq ( ident, ""on"" ) ) { * set_",0
1574,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1575,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> struct mpt_ioctl_command karg <S2SV_ModEnd> ; int rc <S2SV_ModStart> return - EFAULT <S2SV_ModEnd> ; } <S2SV_null>",0
1576,"<S2SV_ModStart> Image * image <S2SV_ModEnd> ; MagickBooleanType status <S2SV_ModStart>, length, padding <S2SV_ModEnd>, value, <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } image -> columns = width ; image -> rows = height ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; return ( DestroyImageList ( image ) ) ; } if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1577,"<S2SV_ModStart> = 0 ; if ( jas_stream_getrwcount ( enc -> out ) < mainhdrlen ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> mainhdr <S2SV_blank> marker\\n"" ) ; return - 1 ; } <S2SV_ModStart> = 0 ; if ( jas_stream_getrwcount ( enc -> out ) < mainhdrlen ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> mainhdr <S2SV_blank> marker\\n"" ) ; return - 1 ; } <S2SV_ModStart> = 0 ; if ( jas_stream_getrwcount ( enc -> out ) < mainhdrlen ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> mainhdr <S2SV_blank> marker\\n"" ) ; return - 1 ; } <S2SV_ModStart> = 0 ; if ( jas_stream_getrwcount ( enc -> out ) < mainhdrlen ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> mainhdr <S2SV_blank> marker\\n"" ) ; return - 1 ; } <S2SV_ModStart> = 0 ; if ( jas_stream_getrwcount ( enc -> out ) < mainhdrlen ) { jas_eprintf ( ""cannot <S2SV_blank> write <S2SV_blank> mainhdr <S2SV_blank> marker\\n"" ) ; return - 1 ;",0
1578,"<S2SV_ModStart> = '\\0' ; length = strlen ( str_modes ) + 1 ; if ( length > sizeof ( str_mode ) - 1 ) length = sizeof ( str_mode ) - 1 ; if ( length > sizeof ( str_temp ) - 1 ) length = sizeof ( str_temp ) - 1 ; if ( length > sizeof ( str_mode ) - 1 ) length = sizeof ( str_mode ) - 1 ; if ( length > sizeof ( str_temp ) - 1 ) length = sizeof ( str_temp ) - 1 ; if ( length > sizeof ( str_temp ) - 1 ; if ( length > sizeof ( str_mode ) - 1 ) length = sizeof ( str_mode ) - 1 ; if ( length > sizeof ( str_temp ) - 1 ) length = sizeof ( str_temp ) - 1 ; if ( length > sizeof ( str_temp ) - 1 ) length = sizeof ( str_temp ) - 1 ; if ( length > sizeof ( str_temp ) - 1 ) length = sizeof ( str_temp ) - 1 ; if ( length > sizeof ( str_temp ) - 1 ) { strcat ( new_args, str_temp ) ; } else { ptr_arg",0
1579,"<S2SV_ModStart> decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> int v = vpx_read_bit <S2SV_ModEnd> ( r )",0
1580,"<S2SV_ModStart> * cert ; giterr_t <S2SV_ModEnd> is_valid ; if <S2SV_ModStart> return error ; <S2SV_ModEnd> is_valid = error <S2SV_ModStart> ; is_valid = error!= GIT_ECERTIFICATE ; error = t -> owner -> certificate_check_cb ( cert, is_valid, t -> connection_data. host, t -> owner -> message_cb_payload ) ; if ( error < 0 ) { if (! giterr_last ( ) ) giterr_set ( GITERR_NET, ""user <S2SV_blank> cancelled <S2SV_blank> certificate <S2SV_blank> check"" ) ; return error ; }",0
1581,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
1582,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> ) vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> comp_inter_prob [ ctx <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> parallel_decoding_mode ) ++",0
1583,"<S2SV_ModStart>! stream ) { memset ( stream, 0, sizeof ( * stream ) ) ; <S2SV_ModStart> fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" <S2SV_ModEnd> ) ; } <S2SV_ModStart> ; res = vpx_codec_enc_config_default ( global -> codec -> interface ( ), & stream -> config. cfg, global -> usage ) ; if ( res ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> config: <S2SV_blank> %s\\n"", vpx_codec_err_to_string ( res ) ) ; stream -> config. cfg. g_w = 0 ; stream -> config. cfg. g_h = 0 ; stream -> config. stereo_fmt = STEREO_FORMAT_MONO ; stream -> config. write_webm <S2SV_ModEnd> = 1 ;",0
1584,"<S2SV_ModStart> ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( ndo, ""\\n\\t <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( ndo, ""\\n\\t <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( ndo, ""\\n\\t <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "" <S2SV_ModEnd>, tok2str ( <S2SV_ModStart> ( ndo, ""\\n\\t <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u): <S2SV_blank> "" <S2SV_ModEnd>, tok2str (",0
1585,"<S2SV_ModStart> -> root_node = ( yr_re_node_t * ) yr_malloc ( 1 ) ; if ( ( * re_ast ) -> root_node == NULL ) { yr_error ( yr_malloc ( 1 ), ""Could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> root <S2SV_blank> node\\n"" ) ; return ERROR_INSUFFICIENT_MEMORY ; } ( * re_ast ) -> root_node = ( yr_re_node_t * ) yr_malloc ( 1 ) ; if ( ( * re_ast ) -> root_node == NULL ) { yr_error ( yr_malloc ( 1 ), ""Could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> root <S2SV_blank> node\\n"" ) ; return ERROR_INSUFFICIENT_MEMORY ; } ( * re_ast ) -> root_node = ( yr_re_node_t * ) yr_malloc ( 1 ) ; if ( ( * re_ast ) -> root_node == NULL ) { yr_error ( yr_malloc ( 1 ), ""Could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> root <S2SV_blank> node\\n"" ) ; return ERROR_INSUFFICIENT_MEMORY ; }",0
1586,"<S2SV_ModStart> ( path, <S2SV_ModEnd> iter -> var_expand_table <S2SV_ModStart> ( ret <= 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } <S2SV_ModStart> 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> = <S2SV_blank> %s"", str_c ( path ), key -> value ) ; } else if ( ret < 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> lookup <S2SV_blank> key <S2SV_blank> %s:",0
1587,<S2SV_ModStart> ; if ( skb -> len < sizeof ( struct nlattr ) ) return 0 ; if ( <S2SV_ModStart> -> nla_len > <S2SV_ModEnd> skb -> len <S2SV_ModStart> skb -> len <S2SV_ModEnd> ) return 0 <S2SV_ModStart> skb -> len <S2SV_ModEnd> ) return 0,0
1588,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; return ( DestroyImageList ( image ) ) ; }",0
1589,"<S2SV_ModStart> ( ""<message <S2SV_blank> type=\'chat\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'stabber@localhost\'>"" ""<received <S2SV_blank> xmlns=\'urn:xmpp:carbons:2\'>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\'>"" ""<body>test <S2SV_blank> carbon <S2SV_blank> from <S2SV_blank> recipient</body>"" ""</message>""",0
1590,"<S2SV_ModStart> -> cac_id, serial -> len",0
1591,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> tok -> alterror <S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1592,"<S2SV_ModStart> maxBitrate ; } if ( av1 -> av1_config && av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo ) { GF_AV1Config * av1_cfg = AV1_DuplicateConfig ( av1 -> av1_config -> config ) ; if ( av1_cfg ) { gf_odf_av1_cfg_write ( av1_cfg, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> data, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> dataLength ) ; gf_odf_av1_cfg_del ( av1_cfg ) ; }",0
1593,"<S2SV_ModStart> ) ) { GF_LOG ( GF_LOG_ERROR, GF_LOG_CONTAINER, ( ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; <S2SV_ModStart> ) ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } else { ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
1594,"<S2SV_ModStart> ] = '\\0' ; if ( r < 0 ) { r = SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; r = SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; r = SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""select <S2SV_blank> esteid <S2SV_blank> PD <S2SV_blank> failed"" ) ; if ( r < 0 ) { r = SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""select <S2SV_blank> esteid <S2SV_blank> PD <S2SV_blank> failed"" ) ; r = SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""select <S2SV_blank> esteid <S2SV_blank> PD <S2SV_blank> failed"" ) ; r = SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL, r, ""select <S2SV_blank> esteid <S2SV_blank> PD <S2SV_blank> failed"" ) ; if ( r < 0 ) { r = SC_TEST_RET ( card -> ctx, SC_LOG_DEBUG_NORMAL,",0
1595,"<S2SV_ModStart> maxFrameNum ) ; dpb -> maxLongTermFrameIdx = NO_LONG_TERM_FRAME_INDICES ; dpb -> maxRefFrames = MAX ( maxRefFrames, 1 ) ; if ( noReordering ) dpb -> maxRefFrames = MAX ( maxRefFrames, 1 ) ; else dpb -> maxRefFrames = MAX ( maxRefFrames, 1 ) ; if ( noReordering ) dpb -> fullness = 1 ; if ( dpb -> buffer == NULL ) return ( MEMORY_ALLOCATION_ERROR ) ; H264SwDecMemset ( dpb -> buffer, 0, ( MAX_NUM_REF_IDX_L0_ACTIVE + 1 ) * sizeof ( dpbPicture_t ) ) ; for ( i = 0 ; i < dpb -> dpbSize + 1 ; i ++ ) { if ( dpb -> buffer [ i ]. pAllocatedData == NULL ) return ( MEMORY_ALLOCATION_ERROR ) ; dpb -> buffer [ i ]. pAllocatedData = NULL ; if ( dpb -> buffer [ i ]. pAllocatedData == NULL ) return ( MEMORY_ALLOCATION_ERROR ) ; dpb -> buffer [ i ].",0
1596,"<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> (! sock ||! addr ||! addrlen ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> ( addrlen ) addrlen_in = * addrlen ; if ( addrlen_in > OE_SSIZE_MAX ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( addrlen_in > OE_SSIZE_MAX ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( oe_syscall_getpeername_ocall ( & ret, sock -> host_fd, addr, addrlen_in, & addrlen_out, addrlen_out )!= OE_OK ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; }",0
1597,,1
1598,"<S2SV_ModStart> FALSE ; } if ( Stream_GetRemainingLength ( s ) < length ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> TPDU <S2SV_blank> length <S2SV_blank> indicator."" ) ; return FALSE ; }",0
1599,"<S2SV_ModStart> ipv6_pinfo * np = rcu_dereference_protected ( sk -> sk_prot, sock_owned_by_user ( sk ) ) <S2SV_ModStart> final_p ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if ( opt ) opt_space = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ; if ( opt_space ) opt_space = rcu_dereference_protected ( opt_space, sock_owned_by_user ( sk ) ) ;",0
1600,"<S2SV_ModStart>, at ; size_t <S2SV_ModEnd> fsize ; size_t <S2SV_ModStart>, fsize ; size_t <S2SV_ModEnd> valign, hdr_size <S2SV_ModStart>, hdr_size, j <S2SV_ModEnd> ; struct cli_exe_section <S2SV_ModStart>, j ; if ( fsize == 0 ) { cli_errmsg ( ""cli_scanpe: <S2SV_blank> fsize <S2SV_blank> == <S2SV_blank> 0\\n"" ) ; return CL_ENULLARG ; } <S2SV_ModStart>, j ; if ( fsize == 0 ) { cli_errmsg ( ""cli_scanpe: <S2SV_blank> fsize <S2SV_blank> == <S2SV_blank> 0\\n"" ) ; return CL_ENULLARG ; } <S2SV_ModStart>, j ; if ( fsize == 0 ) { cli_errmsg ( ""cli_scanpe: <S2SV_blank> fsize <S2SV_blank> == <S2SV_blank> 0\\n"" ) ; return CL_ENULLARG ; } <S2SV_ModStart>, j ; if ( fsize == 0 ) { cli_errmsg ( ""cli_scanpe: <S2SV_blank> fsize <S2SV_blank> == <S2SV_blank> 0\\n"" ) ; return CL_ENULLARG ; } <S2SV_ModStart>, j ; if ( fsize == 0 ) { cli_errmsg ( ""cli_scanpe: <S2SV_blank> fsize <S2SV_blank> == <S2SV_blank> 0\\n"" ) ; return CL_ENULLARG ; }",0
1601,"<S2SV_ModStart> address ) { <S2SV_ModEnd> dm9000WriteReg ( DM9000_EPAR <S2SV_ModStart> ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> { } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> )!= 0 ) { } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; while ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> )!= 0 ) { } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS",0
1602,"<S2SV_ModStart> 0 ) ; if ( t2p -> tiff_datasize < 0 ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> t2p_readwrite_pdf_image, <S2SV_blank> %s"", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } <S2SV_ModStart> 0 ) { if ( t2p -> tiff_datasize < 0 ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> t2p_readwrite_pdf_image, <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> %s"", TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } <S2SV_ModStart> 0 ) { if ( t2p -> tiff_datasize < 0 ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> t2p_readwrite_pdf_image, <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> %s""",0
1603,"<S2SV_ModStart> new_parent ) { <S2SV_ModEnd> __ptrace_link ( child <S2SV_ModStart>, new_parent, current_cred ( ) <S2SV_ModEnd> ) ; }",1
1604,"<S2SV_ModStart> pcmk_ok ) { <S2SV_ModEnd> cib_tls_signon ( cib <S2SV_ModStart> pcmk_ok ) { <S2SV_ModEnd> cib_tls_signon ( cib <S2SV_ModStart> pcmk_ok ) { <S2SV_ModEnd> cib_tls_signon ( cib <S2SV_ModStart> cib_tls_signon ( cib <S2SV_ModEnd>, & ( <S2SV_ModStart> pcmk_ok ) { <S2SV_ModEnd> cib_tls_signon ( cib <S2SV_ModStart> private -> callback ) ; } } if ( rc == pcmk_ok ) { <S2SV_ModEnd> cib_tls_signon ( cib <S2SV_ModStart> private -> callback ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, CRM_OP_REGISTER, NULL, NULL, 0, NULL ) ; free_xml ( hello ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, CRM_OP_REGISTER, NULL, NULL, NULL, 0, NULL ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, CRM",0
1605,"<S2SV_ModStart> = ubuf ; memset ( & address, 0, sizeof ( address ) ) ;",0
1606,"<S2SV_ModStart> int num00, tmp_err, n, sr = 0, step_param = 3 ; int further_steps = ( MAX_MVSEARCH_STEPS - 1 ) - step_param ; int new_mv_mode_penalty = 256 ; const int quart_frm = MIN ( cpi -> common. width, cpi -> common. height ) ; while ( ( quart_frm << sr ) < MAX_FULL_PEL_VAL ) ++ sr <S2SV_ModEnd> ; while ( <S2SV_ModStart> bsize ) ; tmp_err = cpi -> diamond_search_sad ( x, & ref_mv_full, & tmp_mv, step_param, x -> sadperbit16, & num00, & v_fn_ptr, x -> nmvjointcost, ref_mv ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX - new_mv_mode_penalty ) tmp_err += new_mv_mode_penalty",0
1607,"<S2SV_ModStart> ( EFAULT, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; if ( h -> size == 0 ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; } <S2SV_ModStart> ( EFAULT, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"" <S2SV_ModEnd>, filename ) <S2SV_ModStart> goto error ; if ( stat ( h -> fd, & statbuf ) == - 1 ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; } if ( stat ( h -> fd, & statbuf ) == - 1 ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file""",0
1608,<S2SV_ModStart> -> reqbody_no_files_limit = ( parent -> reqbody_no_files_limit == NOT_SET? parent -> reqbody_no_files_limit : child -> reqbody_no_files_limit ) ; merged -> reqbody_limit = ( child -> reqbody_limit == NOT_SET? parent -> reqbody_limit : child -> reqbody_limit ) ; merged -> reqbody_no_files_limit = ( child -> reqbody_no_files_limit == NOT_SET? parent -> reqbody_no_files_limit : child -> reqbody_no_files_limit ) ; merged -> reqbody_limit = ( child -> reqbody_limit == NOT_SET? parent -> reqbody_limit : child -> reqbody_limit ) ; merged -> reqbody_no_files_limit = ( child -> reqbody_no_files_limit == NOT_SET? parent -> reqbody_no_files_limit : child -> reqbody_no_files_limit ) ; merged -> resbody_access = ( child -> resbody_access == NOT_SET? parent -> resbody_access : child -> resbody_access ) ; merged ->,0
1609,"<S2SV_ModStart> -> msg_name, msg_sys <S2SV_ModEnd> -> msg_namelen, <S2SV_ModStart> -> msg_name, msg_sys <S2SV_ModEnd> -> msg_namelen, <S2SV_ModStart> -> msg_namelen, msg_sys <S2SV_ModEnd> -> msg_namelen, <S2SV_ModStart> -> msg_namelen, msg_sys <S2SV_ModEnd> -> msg_namelen <S2SV_ModStart> -> msg_namelen, msg_sys <S2SV_ModEnd> -> msg_namelen <S2SV_ModStart> -> msg_namelen, msg_sys <S2SV_ModEnd> -> msg_namelen, <S2SV_ModStart> -> msg_namelen, msg_sys <S2SV_ModEnd> -> msg_namelen <S2SV_ModStart> -> msg_namelen, msg_sys <S2SV_ModEnd> -> msg_namelen, <S2SV_ModStart> -> msg_namelen, msg_sys <S2SV_ModEnd> -> msg_namelen, <S2SV_ModStart> -> msg_namelen, msg_sys <S2SV_ModEnd> -> msg_namelen,",0
1610,"<S2SV_ModStart>, one ; size_t <S2SV_ModEnd> pixel_info_length ; ssize_t <S2SV_ModStart>, pixel_info_length ) ; if ( pixel_info_length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImage",0
1611,"<S2SV_ModStart> 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> cipher ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> cipher ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0",0
1612,"<S2SV_ModStart> { option = ssplit <S2SV_ModEnd> ( option,",1
1613,"<S2SV_ModStart> user_data ) { <S2SV_ModEnd> if ( client <S2SV_ModStart> num_clients ) ; <S2SV_ModEnd> free ( client <S2SV_ModStart> user ) ; <S2SV_ModEnd> crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client""",0
1614,"<S2SV_ModStart> * uv ; <S2SV_ModEnd> for ( uv <S2SV_ModStart> uv!= NULL ; uv = uv -> u. open. next ) { work ++ ; markvalue ( g, uv -> v ) ; } <S2SV_ModEnd> } } <S2SV_null>",0
