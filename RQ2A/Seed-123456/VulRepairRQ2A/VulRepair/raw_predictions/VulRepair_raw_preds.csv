,raw_predictions,correctly_predicted
0,"<S2SV_ModStart> ; if (! nonce1 ) { applog ( LOG_INFO, ""No <S2SV_blank> nonce <S2SV_blank> in <S2SV_blank> initiate_stratum"" ) ; goto out ; } nonce1 = json_object_get ( val, ""nonce1"" ) ; nonce1 = json_object_get ( val, ""nonce2"" ) ; nonce1 = json_object_get ( val, ""nonce1"" ) ; sessionid = json_object_get ( val, ""sessionid"" ) ; sessionid = json_object_get ( val, ""sessionid"" ) ; if (! sessionid ) { applog ( LOG_INFO, ""No <S2SV_blank> session <S2SV_blank> id <S2SV_blank> in <S2SV_blank> initiate_stratum"" ) ; goto out ; } if (! nonce1 ) { applog ( LOG_INFO, ""No <S2SV_blank> nonce <S2SV_blank> in <S2SV_blank> initiate_stratum"" ) ; goto out ; } sessionid = json_object_get ( val, ""sessionid"" ) ; sessionid = json_object_get ( val, ""sessionid"" ) ; if (! sessionid ) { applog ( LOG_INFO, ""No <S2SV_blank> session <S2SV_blank> id <S2SV_blank> in <S2SV_blank> initiate_stratum",0
1,"<S2SV_ModStart> case EAP_FRAME_TYPE_PACKET : if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""%s <S2SV_blank> (%u) <S2SV_blank> v%u, <S2SV_blank> len <S2SV_blank> %u"", tok2str ( eap_type_values, ""unknown"", type ), type ) ) ; return ; } <S2SV_ModStart> 2 ) { if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""%s <S2SV_blank> (%u) <S2SV_blank> v%u, <S2SV_blank> len <S2SV_blank> %u"", tok2str ( eap_type_values, ""unknown"", type ), type ) ) ; return ; } <S2SV_ModStart> case EAP_FRAME_TYPE_PACKET : if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""%s <S2SV_blank> (%u) <S2SV_blank> v%u, <S2SV_blank> len <S2SV_blank> %u"", tok2str ( eap_type_values, ""unknown"", type ), type ) ) ; return ; } <S2SV_ModStart> case EAP_FRAME_TYPE_PACKET : if ( tlen < 4 ) { ND_PRINT ( ( ndo, ""%s <S2SV_blank> (%u) <S2SV_blank> v%u, <S2SV_blank> len <S2SV_blank> %u""",0
2,"<S2SV_ModStart> op_mutex ) ; ret = - ETIMEDOUT ; goto out ; } ret = __ath9k_wmi_cmd_issue ( wmi, skb, cmd_id, cmd_len ) ; if ( ret < 0 ) { ret = - EPROTO ; goto out ; } <S2SV_ModStart> op_mutex ) ; ret = __ath9k_wmi_cmd_issue ( wmi, skb, cmd_id, cmd_len ) ; if ( ret < 0 ) { ret = - EPROTO ; goto out ; } mutex_unlock ( & wmi -> op_mutex ) ; ret = __ath9k_wmi_cmd_issue ( wmi, skb, cmd_id, cmd_len ) ; if ( ret < 0 ) { ret = - EPROTO ; goto out ; } ret = __ath9k_wmi_cmd_issue ( wmi, skb, cmd_id, cmd_len ) ; if ( ret < 0 ) { ret = - EPROTO ; goto out ; } ret = __ath9k_wmi_cmd_issue ( wmi, skb, cmd_id, cmd_len ) ; if ( ret < 0",0
3,"<S2SV_ModStart> SIOCYAMSMCS : if ( ( ym = kmalloc ( sizeof ( struct yamdrv_mcs ), GFP_KERNEL ) ) == NULL ) { kfree ( ym ) ; return - ENOBUFS ; } if ( ym -> bits > YAM_MAXBITS ) { kfree ( ym ) ; return - EINVAL ; } if ( ym -> bitrate > YAM_MAXBITRATE ) { kfree ( ym ) ; return - EINVAL ; } if ( ym -> bits > YAM_MAXBITS ) { kfree ( ym ) ; return - EINVAL ; } if ( ym -> bits > YAM_MAXBITS ) { kfree ( ym ) ; return - EINVAL ; } add_mcs ( ym -> bits, ym -> bitrate, 0 ) ; kfree ( ym ) ; break ; case SIOCDEVPRIVATE : if (! capable ( CAP_SYS_RAWIO ) ) return - EPERM ; if ( copy_from_user ( ym, ifr -> ifr_data, sizeof ( struct yamdrv_ioctl_cfg",0
4,<S2SV_ModStart> ; if ( unfrag_ip6hlen > frag_hdr_sz ) unfrag_ip6hlen = frag_hdr_sz ; <S2SV_ModStart> frag_hdr_sz ) ; if ( unfrag_ip6hlen > frag_hdr_sz ) unfrag_ip6hlen = frag_hdr_sz ; <S2SV_ModStart> frag_hdr_sz ) ; if ( unfrag_ip6hlen > frag_hdr_sz ) unfrag_ip6hlen = frag_hdr_sz ; if ( unfrag_ip6hlen > frag_hdr_sz ) unfrag_ip6hlen = frag_hdr_sz ;,0
5,"<S2SV_ModStart> int64_t time, offset ; if ( version == 1 ) { time = avio_rb64 ( f ) ; offset = avio_rb64 ( f ) ; } else { time = avio_rb32 ( f ) ; offset = avio_rb32 ( f ) ; }",0
6,"<S2SV_ModStart> * tpg ; <S2SV_ModEnd> int ret ; <S2SV_ModStart> - EINVAL ) ; tpg = kzalloc ( sizeof ( struct vhost_scsi_tpg ), GFP_KERNEL ) ; if (! tpg ) { pr_err ( ""Unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> struct <S2SV_blank> vhost_scsi_tpg"" ) ; return ERR_PTR ( - ENOMEM ) ; } mutex_lock ( & vhost_scsi_fabric_configfs -> tf_ops ) ; mutex_unlock ( & vhost_scsi_fabric_configfs -> tf_ops ) ; tpg = kzalloc ( sizeof ( struct vhost_scsi_tpg ), GFP_KERNEL ) ; if (! tpg ) { pr_err ( ""Unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> struct <S2SV_blank> vhost_scsi_tpg"" ) ; return ERR_PTR ( - ENOMEM ) ; } ret = core_tpg_register ( & vhost_scsi_fabric_configfs -> tf_ops, wwn, & tpg -> se_tpg, tpg, TRANSPORT_TPG_TYPE_NORMAL ) ; mutex_unlock ( & vhost_sc",0
7,<S2SV_ModStart> writer = ( TrackWriter <S2SV_ModEnd> * ) gf_list_get,0
8,"<S2SV_ModStart> ) { u32 <S2SV_ModEnd> data ; void <S2SV_ModStart> vapic = kmap_atomic ( vcpu -> arch. apic -> vapic_page ) ; if (! test_bit ( KVM_APIC_CHECK_VAPIC, & vcpu -> arch. apic_attention ) ) return ; data = * ( u32 * ) ( vapic + offset_in_page ( vcpu -> arch. apic -> vapic_addr ) ) ; if (! test_bit ( KVM_APIC_CHECK_VAPIC, & vcpu -> arch. apic_attention ) ) return ; if (! test_bit ( KVM_APIC_CHECK_VAPIC, & vcpu -> arch. apic_attention ) ) return ; data = * ( u32 * ) ( vapic + offset_in_page ( vcpu -> arch. apic -> vapic_addr ) ) ; if (! test_bit ( KVM_APIC_CHECK_VAPIC, & vcpu -> arch. apic_attention ) ) return ; if ( test_bit ( KVM_APIC_CHECK_VAPIC,",0
9,<S2SV_ModStart> src ) ; switch ( src -> state ) { case TASK_UNINTERRUPTIBLE : flush_task_ebb ( dst ) ; break ; case TASK_UNINTERRUPTIBLE : flush_task_ebb ( dst ) ; break ; case TASK_UNINTERRUPTIBLE : flush_task_ebb ( dst ) ; break ; default : flush_spe_to_thread ( src ) ; flush_fp_to_thread ( src ) ; flush_altivec_to_thread ( src ) ; flush_vsx_to_thread ( src ) ; flush_spe_to_thread ( src ) ; break ; case TASK_UNINTERRUPTIBLE : flush_spe_to_thread ( src ) ; flush_spe_to_thread ( src ) ; break ; case TASK_UNINTERRUPTIBLE : flush_spe_to_thread ( src ) ; flush_spe_to_thread ( src ) ; flush_spe_to_thread ( src ) ; flush_spe_to_thread ( src ) ; flush_spe_to_thread ( src ) ; flush_spe_to_,0
10,<S2SV_ModStart> item ) { return <S2SV_ModEnd> c -> child <S2SV_ModStart> -> next ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
11,"<S2SV_ModStart>!= ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ';' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ';' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ';' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ';' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options == ',' ) { ext3_msg ( sb, ""error: <S2SV_blank> invalid <S2SV_blank> sb <S2SV_blank> specification: <S2SV_blank> %s"", ( char * ) * data ) ; return 1 ; } if ( * options",0
12,<S2SV_ModStart> = NEXTHDR_FRAGMENT ; if ( unfrag_ip6hlen > INT_MAX / sizeof ( struct frag_hdr ) ) { kfree_skb ( skb ) ; return ERR_PTR ( - EINVAL ) ; } <S2SV_ModStart> = NEXTHDR_FRAGMENT ; if ( unfrag_ip6hlen > INT_MAX / sizeof ( struct frag_hdr ) ) { kfree_skb ( skb ) ; return ERR_PTR ( - EINVAL ) ; },0
13,"<S2SV_ModStart> u32 event_id, <S2SV_ModEnd> struct pt_regs * <S2SV_ModStart> ) ; do_perf_sw_event <S2SV_ModEnd> ( PERF_TYPE_SOFTWARE, <S2SV_ModStart> & data, <S2SV_ModEnd> regs ) ;",0
14,"<S2SV_ModStart> EXT4_EXTENTS_FLAG ) { char * buf = grub_malloc ( EXT2_BLOCK_SIZE ( data ) ) ; struct grub_ext4_extent * ext ; int i ; leaf = grub_ext4_find_leaf ( data, buf, ( struct grub_ext4_extent_header * ) inode -> blocks. dir_blocks, fileblock ) ; if (! leaf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } leaf = grub_ext4_find_leaf ( data, buf, ( struct grub_ext4_extent_header * ) inode -> blocks. dir_blocks, fileblock ) ; if (! leaf ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } ext = ( struct grub_ext4_extent * ) ( leaf + 1 ) ; for ( i = 0 ; i < grub_le_to_cpu16 ( leaf -> entries ) ; i ++ ) { if ( fileblock < grub_le_to_cpu32 ( ext",0
15,"<S2SV_ModStart> fdct16 ( const tran_low_t <S2SV_ModEnd> in [ 16 <S2SV_ModStart> 16 ], tran_low_t <S2SV_ModEnd> out [ 16 <S2SV_ModStart> 16 ] ) { tran_low_t step1 [ 8 ] ; tran_low_t step2 [ 8 ] ; tran_low_t step3 [ 8 ] ; tran_low_t step4 [ 8 ] ; tran_low_t step5 [ 8 ] ; tran_low_t step6 [ 8 ] ; tran_low_t temp1, temp2 ; input [ 0 ] = in [ 0 ] + in [ 15 ] ; input [ 1 ] = in [ 1 ] + in [ 13 ] ; input [ 2 ] = in [ 2 ] + in [ 14 ] ; input [ 3 ] = in [ 3 ] + in [ 12 ] ; input [ 4 ] = in [ 4 ] + in [ 11 ] ; input [ 5 ] = in [ 5 ] + in [ 12 ] ; input [ 6 ] = in [ 6 ] + in [ 9 ] ; input [ 7 ] = in [ 7 ] + in [ 8 ] ; input [ 0 ] = in [ 0 ] + in [ 15 ] ; input [ 1 ] = in [ 1 ]",0
16,<S2SV_ModStart> err_unlock ; } if ( env -> prog -> aux -> offload ) { ret = replace_map_fd_with_map_ptr ( env ) ; if ( ret < 0 ) goto skip_full_check ; env -> prog -> aux -> offload = false ; if ( env -> prog -> aux -> offload ) { ret = replace_map_fd_with_map_ptr ( env ) ; if ( ret < 0 ) goto skip_full_check ; env -> prog -> aux -> offload = true ; if ( env -> prog -> aux -> offload ) { ret = replace_map_fd_with_map_ptr ( env ) ; if ( ret < 0 ) goto skip_full_check ; env -> prog -> aux -> offload = false ; if ( env -> prog -> aux -> offload ) { ret = replace_map_fd_with_map_ptr ( env ) ; if ( ret < 0 ) goto skip_full_check ; env -> prog -> aux -> offload = false ; if ( env -> prog -> aux -> offload ) { ret = replace_map_fd_with_map_ptr ( env ) ; if ( ret < 0 ) goto,0
17,"<S2SV_ModStart> ; int i ; wpc -> stream_version = ( config -> flags & CONFIG_COMPATIBLE_WRITE )? CUR_STREAM_VERS : MAX_STREAM_VERS ; if ( config -> flags & CONFIG_COMPATIBLE_WRITE ) wpc -> stream_version = ( config -> flags & CONFIG_COMPATIBLE_WRITE )? CUR_STREAM_VERS : MAX_STREAM_VERS ; if ( config -> flags & CONFIG_HIGH_FLAG ) { strcpy ( wpc -> error_message, ""high <S2SV_blank> mode <S2SV_blank> not <S2SV_blank> configured <S2SV_blank> for <S2SV_blank> DSD!"" ) ; return FALSE ; } config -> flags &= ( CONFIG_HIGH_FLAG | CONFIG_MD5_CHECKSUM | CONFIG_PAIR_UNDEF_CHANS ) ; config -> float_norm_exp = config -> xmode = 0 ; } else if ( config -> flags & CONFIG_HIGH_FLAG ) { strcpy ( wpc -> error_message, ""high <S2SV_blank> mode <S2SV_blank> not <S2SV_blank> configured <S2SV_blank> for <S2SV_blank> DSD!"" ) ; return FALSE ; } config -> flags &= ( CONFIG_HIGH_FLAG | CONFIG_MD5_CHECKSUM | CONFIG_PAIR_UNDEF_CHANS ) ; config ->",0
18,"<S2SV_ModStart> ; retry : if (! scsi_block_when_processing_errors ( SDev ) ) { err = - ENODEV ; goto out ; } result = scsi_execute ( SDev, cgc -> cmd, cgc -> data_direction, cgc -> buffer, cgc -> buflen, cgc -> sense, & sshdr, cgc -> timeout, IOCTL_RETRIES, 0, 0, NULL ) ; if ( driver_byte ( result )!= 0 ) { err = - ENODEV ; goto out ; } result = scsi_execute ( SDev, cgc -> cmd, cgc -> data_direction, cgc -> buffer, cgc -> buflen, cgc -> sense, & sshdr, cgc -> timeout, IOCTL_RETRIES, 0, 0, NULL ) ; if ( driver_byte ( result )!= 0 ) { err = - ENODEV ; goto out ; } result = scsi_execute ( SDev, cgc -> cmd, cgc -> data_direction, cgc -> buffer, cgc -> buflen, cgc -> data_direction, cgc -> buffer, cgc -> buflen",0
19,<S2SV_ModStart> ( get4 ( ) == 0x48454150 ) { imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; imgdata. lens. makernotes. LensMount = LIBRAW_MOUNT_FixedLens ; } else { imgdata. lens. makernotes. CameraMount = LIBRAW_MOUNT_FixedLens ; },0
20,"<S2SV_ModStart> void search_filter_level ( const YV12_BUFFER_CONFIG * sd, <S2SV_ModStart> partial_frame ) { VP9_COMMON * const cm = & cpi -> common ; struct loopfilter * const lf = & cpi -> lf ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; int min_filter_level = clamp ( cm -> filter_level, min_filter_level, max_filter_level ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int max_filter_level = get_max_",0
21,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
22,"<S2SV_ModStart> void encode_mv_component ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> 0 ) ; vpx_write <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ; vpx_write <S2SV_ModEnd> ( w,",0
23,<S2SV_ModStart> cra_rng. rng_make_random && <S2SV_ModEnd> ralg -> seedsize,0
24,"<S2SV_ModStart> ; if ( sockaddr_len < sizeof ( struct sockaddr_pppox ) ) return - EINVAL ; if (! lookup_chan_dst ( sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. sin_addr. s_addr ) ) return - EINVAL ; if ( lookup_chan_dst ( sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. sin_addr. s_addr ) ) return - EINVAL ; if ( lookup_chan_dst ( sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. sin_addr. s_addr ) ) return - EINVAL ; if ( lookup_chan_dst ( sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. call_id, sp -> sa_addr. pptp. call_id, sp -> sa_addr. ppt",0
25,<S2SV_ModStart> == 16 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_16 ; } <S2SV_ModStart> == 32 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_32 ; } <S2SV_ModStart> == 64 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_64 ; } <S2SV_ModStart> == 128 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_128 ; } <S2SV_ModStart> == 256 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_256 ; } <S2SV_ModStart> == 512 ) { <S2SV_ModStart> = COAP_BLOCK_SIZE_512 ; },0
26,"<S2SV_ModStart> int verbose ; jas_image_t * image ; <S2SV_ModStart> ; while ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { switch ( id ) { case OPT_VERBOSE : verbose = 1 ; break ; case OPT_INFILE : infile = jas_optarg ; break ; case OPT_HELP : default : usage ( ) ; break ; } } if ( infile ) { if (! ( instream = jas_stream_fopen ( infile, ""rb"" ) ) ) { fprintf ( stderr, ""cannot <S2SV_blank> open <S2SV_blank> input <S2SV_blank> image <S2SV_blank> file <S2SV_blank> %s\\n"", infile ) ; exit ( EXIT_FAILURE ) ; } } else { if (! ( instream = jas_stream_fopen ( 0, ""rb"" ) ) ) { fprintf ( stderr, ""cannot <S2SV_blank> open <S2SV_blank> standard <S2SV_blank> input\\n"" ) ; exit ( EXIT_FAILURE ) ; } } if ( ( fmtid = jas_image_getfmt ( instream ) ) < 0 ) { fprintf ( stderr, ""unknown <S2SV_blank> image <S2SV_blank> format\\n"" ) ; } if (! ( image = jas_image_decode ( inst",0
27,"<S2SV_ModStart> int esr ) { # ifdef CONFIG_X86_64 <S2SV_ModEnd> pr_crit ( ""Bad <S2SV_blank> mode <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> handler <S2SV_blank> detected, <S2SV_blank> code <S2SV_blank> 0x%08x\\n"" <S2SV_ModStart> esr ) ; # endif <S2SV_ModStart> ""Oops <S2SV_blank> - <S2SV_blank> bad <S2SV_blank> mode"", regs, 0 ) ; } # endif <S2SV_ModStart> ( ""Bad <S2SV_blank> mode <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> handler <S2SV_blank> detected, <S2SV_blank> code <S2SV_blank> 0x%08x\\n"", <S2SV_ModEnd> handler [ reason <S2SV_ModStart> ) ; pr_crit ( ""Bad <S2SV_blank> mode <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> handler <S2SV_blank> detected, <S2SV_blank> code <S2SV_blank> 0x%08x\\n"" <S2SV_ModEnd>, handler [ <S2SV_ModStart> esr ) ; pr_crit ( ""Bad <S2SV_blank> mode <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> handler <S2SV_blank> detected, <S2SV_blank> code <S2SV_blank> 0x%08x\\n"" <S2SV_ModEnd>, handler [ <S2SV_ModStart> esr ) ; pr_crit ( ""Bad <S2SV_blank> mode <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> handler <S2SV_blank> detected, <S2SV_blank> code <S2SV_blank> 0x%08x\\n"" <S2SV_ModEnd>, handler [ <S2SV_ModStart> esr ) ; pr_crit ( ""Bad <S2SV_blank> mode <S2SV_blank> in <S2SV_blank> %s <S2SV_blank> handler <S2SV_blank> detected, <S2SV_blank> code <S2SV_blank> 0x%08x\\",0
28,"<S2SV_ModStart> ( ndo, ""%04x, <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x, <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x, <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ( ndo, ""%04x, <S2SV_blank> "" <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ) ) ) ; ptr ++ ; if ( length < 5 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; } else { ND_PRINT ( ( ndo, ""%s"", tok2str ( l2tp_cc_direction2str, <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
29,"<S2SV_ModStart> intf ) { <S2SV_ModEnd> alt = uas_find_uas_alt_setting <S2SV_ModStart> intf ) ; if ( alt < 0 ) return alt ; if ( intf -> altsetting [ 0 ]. desc. bNumInterfaces < 1 ) return - ENODEV ; if ( intf -> altsetting [ 0 ]. desc. bNumInterfaces < 1 ) return - ENODEV ; if ( intf -> altsetting [ 0 ]. desc. bNumInterfaces < 1 ) return - ENODEV ; alt = intf -> altsetting [ 0 ]. desc. bInterfaceNumber ; if ( alt < 0 ) return alt <S2SV_ModEnd> ; return usb_set_interface <S2SV_ModStart> udev, intf -> altsetting [ 0 ]. desc. bInterfaceNumber, alt ) ; if ( intf -> altsetting [ 0 ]. desc. bNumInterfaces < 1 ) return - ENODEV ; if ( intf -> altsetting [ 0 ]. desc. bNumInterfaces < 1 ) return - ENODEV ; alt = uas_find_uas_alt_setting ( intf ) ; if ( alt < 0 ) return alt ; return usb_set_interface ( udev, intf -> altsetting [ 0 ]. desc. bInterfaceNumber,",0
30,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> udf_pc_to_char ( struct <S2SV_ModStart> from, int <S2SV_ModEnd> fromlen, unsigned <S2SV_ModStart> to ) { int elen = 0 ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> while ( elen <S2SV_ModStart> elen < fromlen ) { pc = ( struct pathComponent * ) ( from + elen ) ; switch ( pc -> componentType ) { case 2 : memcpy ( p = to ; * p ++ = '/' ; break ; case 3 : memcpy ( p, ""../"", 3 ) ; p += 3 ; p += 3 ; break ; case 4 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break ; case 5 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break ; case 6 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break ; case 7 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break ; case 8 : memcpy ( p, ""./"", 2 ) ; p += 2 ; break ; case 9 : memcpy ( p, ""./"", 2 ) ; p += 2",0
31,<S2SV_ModStart> = atoi ( ( char * ) <S2SV_ModStart> = atoi ( ( char * ) <S2SV_ModStart> = atoi ( ( char * ) <S2SV_ModStart> = atoi ( ( char * ) <S2SV_ModStart> = atoi ( ( char * ) <S2SV_ModStart> = atoi ( ( char * ) <S2SV_ModStart> = atoi ( ( char * ) <S2SV_ModStart> = atoi ( ( char * ) <S2SV_ModStart> = atoi ( ( char * ) <S2SV_ModStart> = atoi ( ( char * ) <S2SV_ModStart> = atoi ( ( char * ) <S2SV_ModStart> = atoi ( ( ( char * ) <S2SV_ModStart> = atoi ( ( char * ) <S2SV_ModStart> = atoi ( ( char * ) <S2SV_ModStart> = atoi ( ( char * ) <S2SV_ModStart> = atoi ( ( char * ) <S2SV_ModStart> = atoi ( ( char * ) <S2SV_ModStart> = atoi ( ( char * ) <S2SV_ModStart> = atoi ( ( char * ) <S2SV_ModStart> = atoi ( ( char * ) <S2SV_ModStart> = atoi ( ( char * ) <S2SV_ModStart> = atoi ( ( char * ) <S2SV_ModStart> = atoi ( ( char * ) <S2SV_ModStart> = atoi ( ( char * ) <S2SV_ModStart> = atoi ( ( char * ) <S2SV_ModStart> = atoi ( ( char * ) <S2SV_ModStart> = atoi ( ( char * ) <S2SV_ModStart> = atoi ( ( char * ) <S2SV_ModStart>,0
32,"<S2SV_ModStart> connection_id ) ; spin_lock_irqsave ( & tgtport -> lock, flags ) ; list_for_each_entry ( assoc, & tgtport -> assoc_list, a_list ) { if ( association_id == assoc -> association_id ) { queue = assoc -> queues [ qid ] ; if ( queue && (! atomic_read ( & queue -> connected ) ||! nvmet_fc_tgt_q_get ( queue ) ) ) queue = NULL ; spin_unlock_irqrestore ( & tgtport -> lock, flags ) ; return NULL ; } } spin_unlock_irqrestore ( & tgtport -> lock, flags ) ;",0
33,"<S2SV_ModStart> get_version_reply ) ; if ( result < 0 ) { dev_err ( idev, ""get_version <S2SV_blank> failed\\n"" ) ; retval = - ENODEV ; goto exit ; } if ( result < 0 ) { dev_err ( idev, ""get_version <S2SV_blank> failed\\n"" ) ; retval = - ENODEV ; goto exit ; } if ( result < 0 ) { dev_err ( idev, ""get_version <S2SV_blank> failed\\n"" ) ; goto exit ; } if ( result < 0 ) { dev_err ( idev, ""get_version <S2SV_blank> failed\\n"" ) ; retval = - ENODEV ; goto exit ; } if ( result < 0 ) { dev_err ( idev, ""get_version <S2SV_blank> failed\\n"" ) ; retval = - ENODEV ; goto exit ; } if ( result < 0 ) { dev_err ( idev, ""get_version <S2SV_blank> failed\\n"" ) ; goto exit ; } if ( result < 0 ) { dev_err ( idev, ""get_version <S2SV_blank> failed\\n"" ) ; retval = - ENODEV ; goto exit ; }",0
34,<S2SV_ModStart> ; if ( bin -> shstrtab && shdr -> sh_name < bin -> shstrtab_size && shdr -> sh_name < bin -> shstrtab_size && shdr -> sh_name < bin -> shstrtab_size && link_shdr -> sh_name < bin -> shstrtab_size && link_shdr -> sh_name < bin -> shstrtab_size && link_shdr -> sh_name < bin -> shstrtab_size && link_shdr -> sh_name < bin -> shstrtab_size && shdr -> sh_name < bin -> shstrtab_size && shdr -> sh_name < bin -> shstrtab_size && link_shdr -> sh_name < bin -> shstrtab_size && link_shdr -> sh_name < bin -> shstrtab_size && link_shdr -> sh_name < bin -> shstrtab_size && link_shdr -> sh_name < bin -> shstrtab_size && link_shdr -> sh_name < bin -> shstrtab_size && link_shdr -> sh_name < bin -> shstrtab_size,0
35,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int construct_get_dest_keyring ( <S2SV_ModEnd> struct request_key_auth * <S2SV_ModStart> * authkey ; if ( dest_keyring ) { key_get ( dest_keyring ) ; } else { <S2SV_ModEnd> switch ( cred <S2SV_ModStart> case KEY_REQKEY_DEFL_DEFAULT : dest_keyring = key_get ( cred -> default_keyring ) ; if ( dest_keyring ) break ; case KEY_REQKEY_DEFL_THREAD_KEYRING : dest_keyring = key_get ( cred -> thread_keyring ) ; if ( dest_keyring ) break ; case KEY_REQKEY_DEFL_PROCESS_KEYRING : dest_keyring = key_get ( cred -> process_keyring ) ; if ( dest_keyring ) break ; case KEY_REQKEY_DEFL_USER_SESSION_KEYRING : dest_keyring = key_get ( cred -> user -> session_keyring ) ; if ( dest_keyring ) break ; case KEY_REQKEY_DEFL_GROUP_KEYRING : dest_keyring = key_get ( cred,0
36,"<S2SV_ModStart> = NULL ; if ( sc == NULL ) return GSS_S_FAILURE ; ret = get_mech_set ( minor_status, spcred, GSS_C_INITIATE, & sc -> mech_set ) ; if ( ret!= GSS_S_COMPLETE ) goto cleanup ; ret = get_mech_set ( minor_status, spcred, GSS_C_INITIATE, & sc -> der_mechTypes ) ; if ( ret!= GSS_S_COMPLETE ) goto cleanup ; ret = get_mech_set ( minor_status, spcred, GSS_C_INITIATE, & sc -> mech_set ) ; if ( ret!= GSS_S_COMPLETE ) goto cleanup ; ret = get_mech_set ( minor_status, spcred, GSS_C_INITIATE, & sc -> mech_set ) ; if ( ret!= GSS_S_COMPLETE ) goto cleanup ; sc -> internal_mech = & sc -> mech_set -> elements [ 0 ] ; if ( put_mech_set ( sc -> mech_set, & sc -> DER_mechTypes ) < 0 ) { ret = GSS",0
37,"<S2SV_ModStart> ; int chk_addr_ret ; <S2SV_ModStart> ; if ( addr_len < sizeof ( struct sockaddr_l2tpip ) ) return - EINVAL ; chk_addr_ret = inet_addr_type ( net, addr -> l2tp_addr. s_addr ) ; if ( chk_addr_ret!= RTN_LOCAL && chk_addr_ret!= RTN_MULTICAST && chk_addr_ret!= RTN_BROADCAST ) goto out ; ret = - EADDRINUSE ; read_lock_bh ( & l2tp_ip_lock ) ; if ( __l2tp_ip_bind_lookup ( net, addr -> l2tp_addr. s_addr, sk -> sk_bound_dev_if, addr -> l2tp_conn_id ) ) goto out_in_use ; if ( addr -> l2tp_addr. s_addr && chk_addr_ret!= RTN_LOCAL && chk_addr_ret!= RTN_BROADCAST ) goto out ; ret = - EADDRNOTAVAIL ; if ( addr -> l2tp_addr. s_addr ) inet -> inet_",0
38,<S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> stack_maxrandom_size ( void <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> stack_maxrandom_size ( void <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> stack_maxrandom_size ( void <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> stack_maxrandom_size ( void <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> stack_maxrandom_size ( void,0
39,"<S2SV_ModStart> ( dialog ), _ ( ""Launch <S2SV_blank> anyway"" ), RESPONSE_RUN ) ; if ( nautilus_file_can_set_permissions ( file ) ) { gtk_dialog_add_button ( GTK_DIALOG ( dialog ), _ ( ""Mark <S2SV_blank> as <S2SV_blank> trusted"" ), RESPONSE_MARK_TRUSTED ) ; } else { gtk_dialog_add_button ( GTK_DIALOG ( dialog ), _ ( ""Cancel"" ), GTK_RESPONSE_CANCEL ) ; }",0
40,<S2SV_ModStart> ; tm = g_time_to_tm <S2SV_ModEnd> ( & t <S2SV_ModStart> & t ) ; if ( tm == NULL ) tm = g_time_to_tm ( & t ) ; if ( tm == NULL ) tm = g_time_to_tm ( & t ) ; if ( tm == NULL ) tm = g_time_to_tm ( & t ) ; if ( tm == NULL ) tm = g_time_to_tm ( & t ) ; if ( tm == NULL ) tm = g_time_to_tm ( & t ) ; if ( tm == NULL ) tm = g_time_to_tm ( & t ) ; if ( tm == NULL ) tm = g_time_to_tm ( & t ) ; if ( tm == NULL ) tm = g_time_to_tm ( & t ) ; if ( tm == NULL ) tm = g_time_to_tm ( & t ) ; if ( tm == NULL ) tm = g_time_to_tm ( & t ) ; if ( tm == NULL ) tm = g_time_to_tm ( & t ) ; if ( tm == NULL ) tm = g_time_to_,0
41,"<S2SV_ModStart> length ) ; memcpy <S2SV_ModEnd> ( hashed,",0
42,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> m88rs2000_frontend_attach ( struct <S2SV_ModStart> int m88rs2000_frontend_attach ( struct dvb_usb_adapter * adap ) { struct dvb_usb_device * d = adap -> priv ; struct dvb_usb_device_settings * settings = d -> priv ; struct dvb_usb_device_ops * ops = d -> priv ; <S2SV_ModStart> ]. fe = dvb_attach ( m88rs2000_attach, & s421_m88rs2000_config, & d -> dev -> i2c_adap ) ; if ( d -> fe_adap [ 0 ]. fe == NULL ) return - EIO ; d -> fe_adap [ 0 ]. fe = dvb_attach ( m88rs2000_attach, & s421_m88rs2000_config, & d -> dev -> i2c_adap ) ; d -> fe_adap [ 0 ]. fe = dvb_attach ( m88rs2000_attach, & s421_m88rs2000_config, & d -> dev -> i2c",0
43,"<S2SV_ModStart> ; struct sock * sk = asoc -> base. sk ; <S2SV_ModStart> sk ) ; if (! sock_owned_by_user ( sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"", __func__ ) ; goto out_unlock ; } <S2SV_ModEnd> if ( sock_owned_by_user <S2SV_ModStart> sk ) ) { <S2SV_ModEnd> pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"" <S2SV_ModStart> goto out_unlock ; } if ( transport -> dead ) goto out_unlock ; error = sctp_do_sm ( net, SCTP_EVENT_T_TIMEOUT, SCTP_ST_TIMEOUT ( SCTP_EVENT_TIMEOUT_HEARTBEAT ), asoc -> state, asoc -> ep, asoc, transport, GFP_ATOMIC ) ; if ( error ) { <S2SV_ModEnd> asoc -> base <S2SV_ModStart> sk -> sk_err = - error ; out_unlock : sctp_transport_put ( transport ) ; } else { <S2SV_ModEnd> error = sctp_do_sm <S2SV_ModStart> SCTP_EVENT_T_TIMEOUT, SCTP_ST_TIMEOUT ( SCTP_EVENT_TIMEOUT_",0
44,"<S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"", w -> id, name, value ) ; <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"", w -> id, name, value ) ; <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"", w -> id, name, value ) ; <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"", w -> id, name, value ) ; <S2SV_ModStart> ( D_WEB_CLIENT, ""%llu: <S2SV_blank> API <S2SV_blank> v1 <S2SV_blank> data <S2SV_blank> query <S2SV_blank> param <S2SV_blank> \'%s\' <S2SV_blank> with <S2SV_blank> value <S2SV_blank> \'%s\'"", w -> id, name,",0
45,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF <S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horAcc8 ( TIFF,0
46,"<S2SV_ModStart> tsample_t s ; if ( scanlinesizein > TIFFScanlineSize ( in ) ) { TIFFError ( TIFFFileName ( in ), ""Error, <S2SV_blank> too <S2SV_blank> large <S2SV_blank> scanlinesizein <S2SV_blank> (%lu)"", ( unsigned long ) scanlinesizein ) ; goto bad ; } inbuf = _TIFFmalloc ( scanlinesizein ) ; if (! inbuf ||! outbuf ) goto bad ; _TIFFmemset ( inbuf, 0, scanlinesizeout ) ; for ( row = 0 ; row < imagelength ; row ++ ) { if ( TIFFReadScanline ( in, inbuf, row, 0 ) < 0 &&! ignore ) { TIFFError ( TIFFFileName ( in ), ""Error, <S2SV_blank> can\'t <S2SV_blank> read <S2SV_blank> scanline <S2SV_blank> %lu"", ( unsigned long ) row ) ; goto bad ; } inp = ( ( uint8 * ) inbuf ) + s ; outp = ( uint8 * ) outbuf ; for ( n = imagewidth ; n -- > 0 ; ) { * outp ++ = * inp ; inp += spp ; } if ( TIFFWriteScanline ( out, outbuf, row, s ) <",0
47,<S2SV_ModStart> ) ; struct <S2SV_ModEnd> address_space * mapping <S2SV_ModStart> hugetlb_lock ) ; <S2SV_ModEnd> hugetlb_put_quota ( mapping,0
48,"<S2SV_ModStart> ) ; } if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; } <S2SV_ModStart> ) ; } if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; } <S2SV_ModStart> ) ; } if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; } if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; } if ( length < 4 ) { pva_log ( s, AV_LOG_ERROR, ""invalid <S2SV_blank> payload <S2SV_blank> length <S2SV_blank> %u\\n"", length ) ; return AVERROR ( EIO ) ; }",0
49,"<S2SV_ModStart> if (! e ) goto not_found ; r = parse_uid ( e + 1, & uid ) ; if ( r < 0 ) goto not_found ; machine = strndupa ( p, e - p ) ; if (! machine_name_is_valid ( machine ) ) { r = sd_bus_open_system ( & bus, ""org.freedesktop.machine1"", ""/org/freedesktop/machine1"", ""org.freedesktop/machine1"", ""org.freedesktop/machine1.Manager"", ""MapFromMachineUser"", & error, & reply, ""su"", ( uint32_t ) uid ) ; if ( r < 0 ) goto not_found ; r = sd_bus_call_method ( bus, ""org.freedesktop.machine1"", ""/org/freedesktop/machine1"", ""/org/freedesktop/machine1"", ""org.freedesktop/machine1"", ""org.freedesktop/machine1.Manager"", ""MapFromMachineUser"", & error, & reply, ""su",0
50,"<S2SV_ModStart> void generic_pipe_buf_get ( struct pipe_inode_info * pipe, struct pipe_buffer * buf ) { if (! buf -> page ) return ; get_page ( buf -> page ) ; }",0
51,"<S2SV_ModStart> case IV2_T_ENCR : idstr = STR_OR_ID ( t_id, esp_p_map ) ; map = encr_t_map ; nmap = sizeof encr_t_map ; break ; case IV2_T_INTEG : idstr = STR_OR_ID ( t_id, integ_p_map ) ; map = encr_t_map ; nmap = sizeof encr_t_map ; break ; case IV2_T_DH : idstr = STR_OR_ID ( t_id, dh_p_map ) ; map = encr_t_map ; nmap = sizeof encr_t_map ; break ; case IV2_T_ESN : idstr = STR_OR_ID ( t_id, esn_p_map ) ; map = encr_t_map ; nmap = sizeof encr_t_map ; break ; default : ND_PRINT ( ( ndo, "" <S2SV_blank> #%u <S2SV_blank> type=%s <S2SV_blank> id=%s <S2SV_blank> "", tcount, STR_OR_ID ( t. t_type, ikev2_",0
52,"<S2SV_ModStart> ) &&! capable_wrt_inode_uidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> ) &&! capable_wrt_inode_gidgid <S2SV_ModEnd> ( inode, <S2SV_ModStart> inode, CAP_CHOWN ) ) return - EPERM ; if ( ia_valid & ATTR_GID ) && (! in_group_p ( ( ia_valid & ATTR_GID )? attr -> ia_gid : inode -> i_gid ) &&! capable_wrt_inode_gidgid ( inode, CAP_FSETID ) ) return - EPERM ; if ( ia_valid & ATTR_MODE ) { if (! inode_owner_or_capable ( inode ) ) return - EPERM ; if (! in_group_p ( ( ia_valid & ATTR_GID )? attr -> ia_gid : inode -> i_gid ) &&! capable_wrt_inode_gidgid ( inode, CAP_FSETID ) ) return - EPERM ; if ( ia_valid & ATTR_MTIME_SET ) { if (! inode_owner_or_capable ( inode ) ) return - EPERM ; if (! in_group_",0
53,"<S2SV_ModStart> = 0 ; if (! FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { FD_SET ( reader -> bytes_available_fd, & read_fds ) ; return false ; } if ( FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ) { FD_SET ( reader -> bytes_available_fd, & read_fds ) ; return FD_ISSET ( reader -> bytes_available_fd, & read_fds ) ; }",0
54,"<S2SV_ModStart> wp -> config -> max_requests ; if ( 0 > wp -> config -> pm_max_requests ) { zlog ( ZLOG_ERROR, ""[pool <S2SV_blank> %s] <S2SV_blank> child <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> initialize"", wp -> config -> name ) ; exit ( FPM_EXIT_SOFTWARE ) ; }",0
55,"<S2SV_ModStart> int detect_transition_to_still ( TWO_PASS <S2SV_ModEnd> * twopass, <S2SV_ModStart> last_decay_rate ) { int trans_to_still = 0 ; const FIRSTPASS_STATS * position = twopass -> stats_in ; if ( frame_interval > MIN_GF_INTERVAL && loop_decay_rate >= 0.999 && last_decay_rate < 0.9 ) { int j ; const FIRSTPASS_STATS * tmp_next_frame ; for ( j = 0 ; j < still_interval ; ++ j ) { if ( EOF == input_stats ( twopass, & tmp_next_frame ) ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame. pcnt_motion < 0.999 ) break ; if ( tmp_next_frame. pcnt_inter - tmp_next_frame.",0
56,"<S2SV_ModStart> 0 ; } err = 0 ; <S2SV_ModStart> h_transaction ) { <S2SV_ModEnd> err = jbd2_journal_stop <S2SV_ModStart> handle ) ; return handle -> h_err? handle -> h_err : err ; } sb = handle -> h_transaction -> t_journal -> j_private ; err = handle -> h_err ; rc = jbd2_journal_stop ( handle ) ; if (! err ) { err = handle -> h_err ; rc = jbd2_journal_stop ( handle ) ; if (! rc ) __ext4_std_error ( sb, where, line, err ) ; return err ; } err = handle -> h_err ; rc = jbd2_journal_stop ( handle ) ; if (! err ) err = rc ; if (! err ) err = rc ; rc = jbd2_journal_stop ( handle ) ; if (! err ) err = handle -> h_err ; rc = jbd2_journal_stop ( handle ) ; if (! rc ) __ext4_std_error ( sb, where, line, err ) ; if (! err ) __ext4_std_error ( sb, where, line, err",0
57,"<S2SV_ModStart> return ret ; ret = ext4_convert_unwritten_extents ( inode, offset, size ) ; if ( ret < 0 ) { printk ( KERN_EMERG ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> unwritten"" ""extents <S2SV_blank> to <S2SV_blank> written <S2SV_blank> extents, <S2SV_blank> error <S2SV_blank> is <S2SV_blank> %d"" "" <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, ret, inode -> i_ino ) ; io -> flag = 0 ; return ret ; } if ( ret < 0 ) { printk ( KERN_EMERG ""%s: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> convert <S2SV_blank> unwritten"" ""extents <S2SV_blank> to <S2SV_blank> written <S2SV_blank> extents, <S2SV_blank> error <S2SV_blank> is <S2SV_blank> %d"" "" <S2SV_blank> io <S2SV_blank> is <S2SV_blank> still <S2SV_blank> on <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> aio <S2SV_blank> dio <S2SV_blank> list\\n"", __func__, ret, inode -> i_ino ) ; return ret ; }",0
58,"<S2SV_ModStart> valuelen ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, entry, tmp ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, entry, tmp + sizeof ( * entry ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, entry, tmp + sizeof ( * entry ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, entry, tmp ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, entry, tmp + sizeof ( * entry ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, entry, tmp + sizeof ( * entry ) ) ) ; xfs_trans_log_buf ( args -> trans, bp, XFS_DA_LOGRANGE ( leaf, entry, tmp ) ) ; xfs_trans_log_",0
59,"<S2SV_ModStart> alg ) { if (! ( type ^ CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_NEED_FALLBACK ) ) { <S2SV_ModStart> ) ) { if (! ( type ^ CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_NEED_FALLBACK ) ) { <S2SV_ModStart> ) ) { if (! ( type ^ CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_NEED_FALLBACK ) ) { if ( ( type ^ CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_NEED_FALLBACK ) ) { if (! ( type ^ CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_NEED_FALLBACK ) ) { if (! ( type ^ CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_NEED_FALLBACK ) ) { request_module ( ""%",0
60,"<S2SV_ModStart> 2 ) { ND_TCHECK2 ( * tptr, stlv_type ) ; <S2SV_ModStart> stlv_len ) ) ; ND_TCHECK2 ( * tptr, stlv_len ) ; <S2SV_ModStart> case ISIS_SUBTLV_SPB_INSTANCE : if ( stlv_len < 4 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
61,"<S2SV_ModStart> job_data_size_limit ) { twarnx ( ""server <S2SV_blank> error: <S2SV_blank> "" MSG_JOB_TOO_BIG ) ; return skip ( c, body_size + 2, MSG_OUT_OF_MEMORY ) ; } if ( end_buf [ 0 ] == '\\0' ) { twarnx ( ""server <S2SV_blank> error: <S2SV_blank> "" MSG_OUT_OF_MEMORY ) ; return skip ( c, body_size + 2, MSG_OUT_OF_MEMORY ) ; return skip ( c, body_size + 2, MSG_OUT_OF_MEMORY ) ; } if ( end_buf [ 0 ] == '\\0' ) { twarnx ( ""server <S2SV_blank> error: <S2SV_blank> "" MSG_OUT_OF_MEMORY ) ; return skip ( c, body_size + 2, MSG_OUT_OF_MEMORY ) ; return skip ( c, body_size + 2, MSG_OUT_OF_MEMORY ) ; } if ( end_buf [ 0 ] == '\\0' ) { twarnx ( ""server <S2SV_blank> error: <S2SV_blank> "" MSG_OUT_OF_MEMORY ) ; return skip ( c, body_size + 2, MSG_OUT_OF_MEMORY",0
62,<S2SV_ModStart> flags ) ; if ( dgnc_Board [ brd ] -> state == BOARD_FAILED ) dgnc_Board [ brd ] -> state = BOARD_FAILED ; <S2SV_ModStart> = dgnc_NumBoards ; if ( dgnc_Board [ brd ] -> state == BOARD_FAILED ) dgnc_Board [ brd ] -> state = BOARD_FAILED ; if ( dgnc_Board [ brd ] -> state!= BOARD_FAILED ) dgnc_Board [ brd ] -> state = BOARD_FAILED ; if ( dgnc_Board [ brd ] -> state == BOARD_FAILED ) dgnc_Board [ brd ] -> state = BOARD_FAILED ; if ( dgnc_Board [ brd ] -> state == BOARD_FAILED ) dgnc_Board [ brd ] -> state = BOARD_FAILED ; if ( dgnc_Board [ brd ] -> state!= BOARD_FAILED ) dgnc_Board [ brd ] -> state = BOARD_FAILED ; if ( dgnc_Board [ brd ] -> state == BOARD_FAILED ) dgnc_Board,0
63,"<S2SV_ModStart> (! ( opt_len <S2SV_ModEnd> == 12 && <S2SV_ModStart> & TH_SYN ) &&! ( opt_len == 20 && flags & TH_ACK ) ) return 0 ; if ( mpc -> flags & MP_CAPABLE_C ) ND_PRINT ( ( ndo, "" <S2SV_blank> csum"" ) ) ; if ( mpc -> flags & MP_CAPABLE_R ) ND_PRINT ( ( ndo, "" <S2SV_blank> {0x%"" PRIx64, EXTRACT_64BITS ( mpc -> sender_key ) ) ) ; if ( opt_len == 20 ) ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> receiver_key ) ) ) ; if ( opt_len == 20 ) ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> sender_key ) ) ) ; if ( opt_len == 20 ) ND_PRINT ( ( ndo, "",0x%"" PRIx64, EXTRACT_64BITS ( mpc -> receiver_key ) ) ) ; if ( opt_len == 12 ) ND_PRINT ( (",0
64,"<S2SV_ModStart> -> ipc_socket ; <S2SV_ModEnd> int procfd = <S2SV_ModStart> ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (0)"" ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ; } status = - 1 ; ret = lxc_read_nointr_expect ( ipc_socket, & status, sizeof ( status ), & expected ) ; if ( ret <= 0 ) { ERROR ( ""error <S2SV_blank> using <S2SV_blank> IPC <S2SV_blank> to <S2SV_blank> receive <S2SV_blank> notification <S2SV_blank> from <S2SV_blank> initial <S2SV_blank> process <S2SV_blank> (0)"" ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ; } if (! ( options -> namespaces & CLONE_NEWNS ) && ( options -> attach_flags & LXC_ATTACH_REMOUNT_PROC_SYS ) ) { ret = lxc_attach_remount_sys_proc ( ) ; if ( ret < 0 ) { SYSERROR ( ""could <S2SV_blank> not <S2SV_blank> ensure <S2SV_blank> correct <S2SV_blank> architecture"" ) ; shutdown ( ipc_socket, SHUT_RDWR ) ; rexit ( - 1 ) ;",0
65,"<S2SV_ModStart> = GIT_PKT_NG ; ptr = line ; if (! ( ptr = strchr ( line,'<S2SV_blank>') ) ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> ref = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> ref ) ; memcpy ( pkt -> ref, line, len ) ; pkt -> ref [ len ] = '\\0' ; line = ptr + 1 ; if (! ( ptr = strchr ( line, '\\n' ) ) ) goto out_err ; len = ptr - line ; GITERR_CHECK_ALLOC_ADD ( & alloclen, len, 1 ) ; pkt -> ref = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> ref ) ; memcpy ( pkt -> ref, line, len ) ; pkt -> msg = git__malloc ( alloclen ) ; GITERR_CHECK_ALLOC ( pkt -> msg ) ; memcpy ( pkt -> msg, line,",0
66,"<S2SV_ModStart> ; if ( header -> biSize < 12U ) { fprintf ( stderr, ""Error, <S2SV_blank> invalid <S2SV_blank> BMP <S2SV_blank> header <S2SV_blank> size\\n"" ) ; return OPJ_FALSE ; } header -> biHeight = ( OPJ_UINT32 ) getc ( IN ) ; header -> biWidth = ( OPJ_UINT32 ) getc ( IN ) ; header -> biHeight = ( OPJ_UINT32 ) getc ( IN ) ; header -> biHeight = ( OPJ_UINT32 ) getc ( IN ) ; header -> biWidth = ( OPJ_UINT32 ) getc ( IN ) ; header -> biHeight = ( OPJ_UINT32 ) getc ( IN ) ; header -> biHeight = ( OPJ_UINT32 ) getc ( IN ) ; header -> biWidth = ( OPJ_UINT32 ) getc ( IN ) ; header -> biHeight = ( OPJ_UINT32 ) getc ( IN ) ; header -> biHeight = ( OPJ_UINT32 ) getc ( IN ) ; header -> biHeight = ( OPJ_UINT32 ) getc ( IN ) ; header -> bi",0
67,"<S2SV_ModStart> NULL ; } <S2SV_ModEnd> SAS_DPRINTK ( ""DOING <S2SV_blank> DISCOVERY <S2SV_blank> on <S2SV_blank> port <S2SV_blank> %d, <S2SV_blank> pid:%d, <S2SV_blank> result:%d\\n"" <S2SV_ModStart> port_dev = NULL ; break ; case SAS_END_DEVICE : error = sas_discover_end_dev ( dev ) ; break ; case SAS_EDGE_EXPANDER_DEVICE : case SAS_FANOUT_EXPANDER_DEVICE : error = sas_discover_root_expander ( dev ) ; break ; case SAS_SATA_DEV : case SAS_SATA_PM : error = sas_discover_sata ( dev ) ; break ; case SAS_SATA_PM : error = - ENXIO ; sas_rphy_free ( dev -> rphy ) ; spin_lock_irq ( & port -> dev_list_lock ) ; list_del_init ( & port -> dev_list_lock ) ; spin_unlock_irq ( & port -> dev_list_lock ) ; list_del_init ( & port -> dev_list_node ) ; spin_unlock_irq ( & port -> dev_list_",0
68,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
69,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
70,"<S2SV_ModStart> - ENOBUFS ; } line. clock_type = get_status ( port ) -> clocking ; line. clock_rate = 0 ; line. loopback = 0 ; if ( copy_from_user ( & line, ifr -> ifr_settings. ifs_ifsu. sync, size ) ) return - EFAULT ; if ( copy_to_user ( & line, ifr -> ifr_settings. ifs_ifsu. sync, size ) ) return - EFAULT ; if ( copy_to_user ( & line, ifr -> ifr_settings. ifs_ifsu. sync, size ) ) return - EFAULT ; if ( copy_from_user ( & line, ifr -> ifr_settings. ifs_ifsu. sync, size ) ) return - EFAULT ; if ( copy_from_user ( & line, ifr -> ifr_settings. ifs_ifsu. sync, size ) ) return - EFAULT ; if ( copy_from_user ( & line, ifr -> ifr_settings. ifs_ifsu. sync, size ) ) return - EFAULT ;",0
71,"<S2SV_ModStart> arg ) { if (! capable ( CAP_SYS_RAWIO ) ) return - EPERM ; return scsi_cmd_ioctl ( bd -> bd_disk -> queue, bd -> bd_disk -> queue, bd -> bd_disk, mode, cmd, arg ) ; }",0
72,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NEGO_STATE_FINAL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""RDP_NEG_REQ: <S2SV_blank> RemainingLength: <S2SV_blank> %d"", Stream_GetRemainingLength ( s ) ) ; return ; } <S2SV_ModStart> = NEGO_STATE_FINAL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""RDP_NEG_REQ: <S2SV_blank> RemainingLength: <S2SV_blank> %d"", Stream_GetRemainingLength ( s ) ) ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""RDP_NEG_REQ: <S2SV_blank> RemainingLength: <S2SV_blank> %d"", Stream_GetRemainingLength ( s ) ) ; return ; } <S2SV_ModStart> = NEGO_STATE_FINAL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""RDP_NEG_REQ: <S2SV_blank> RemainingLength: <S2SV_blank> %d"", Stream_GetRemainingLength ( s ) )",0
73,"<S2SV_ModStart> * ureq ; unsigned <S2SV_ModStart> int ) ) ) { ureq = memdup_user ( udata, req_len + sizeof ( struct qeth_snmp_ureq_hdr ) ) ; if ( IS_ERR ( ureq ) ) { QETH_CARD_TEXT ( card, 2, ""snmpnome"" ) ; return PTR_ERR ( ureq ) ; } qinfo. udata_len = ureq -> hdr. data_len ; qinfo. udata_offset = sizeof ( ureq -> hdr. data_len ; qinfo. udata = kzalloc ( qinfo. udata_len, GFP_KERNEL ) ; if (! qinfo. udata ) { kfree ( ureq ) ; return - ENOMEM ; } qinfo. udata = kzalloc ( qinfo. udata_len, GFP_KERNEL ) ; if (! qinfo. udata ) { kfree ( ureq ) ; return - ENOMEM ; } qinfo. udata = kzalloc ( qinfo. udata_len, GFP_KERNEL ) ; if (! qinfo. udata ) { k",0
74,<S2SV_ModStart> c ) { jas_matind_t <S2SV_ModEnd> m ; m,0
75,"<S2SV_ModStart> num ) { if ( avio_feof ( pb ) ) return AVERROR_EOF ; <S2SV_ModStart> num ) { if ( avio_feof ( pb ) ) return AVERROR_EOF ; <S2SV_ModStart> num ) { av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num ) ; return AVERROR_PATCHWELCOME ; } <S2SV_ModStart> num ) { av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num ) ; return AVERROR_PATCHWELCOME ; } <S2SV_ModStart> num ) { av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num ) ; return AVERROR_PATCHWELCOME ; } <S2SV_ModStart> num ) { av_log ( s, AV_LOG_ERROR, ""number <S2SV_blank> of <S2SV_blank> video <S2SV_blank> tracks <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> 1\\n"", num ) ; return AVERROR_PATCHWELCOME ; }",0
76,"<S2SV_ModStart> return AVERROR_INVALIDDATA ; } mxf_add_umid_metadata ( & mxf -> fc -> metadata, ""material_package_name"", material_package -> name, 0 ) ; if ( material_package -> name && material_package -> name [ 0 ] ) av_dict_set ( & mxf -> fc -> metadata, ""material_package_name"", material_package -> name, 0 ) ; if ( material_package -> name [ 0 ] ) av_dict_set ( & mxf -> fc -> metadata, ""material_package_name"", material_package -> name, 0 ) ; if ( material_package -> name && material_package -> name [ 0 ] ) av_dict_set ( & mxf -> fc -> metadata, ""material_package_name"", material_package -> name, 0 ) ; if ( material_package -> name && material_package -> name [ 0 ] ) av_dict_set ( & mxf -> fc -> metadata, ""material_package_name"", material_package -> name, 0 ) ; mxf_parse_package_comments ( mxf, & mxf -> fc -> metadata, material_package",0
77,"<S2SV_ModStart> 1 ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""path <S2SV_blank> name <S2SV_blank> too <S2SV_blank> short"" ) ; return - 1 ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""path <S2SV_blank> name <S2SV_blank> too <S2SV_blank> short"" ) ; return - 1 ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""path <S2SV_blank> name <S2SV_blank> too <S2SV_blank> short"" ) ; return - 1 ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""path <S2SV_blank> name <S2SV_blank> too <S2SV_blank> short"" ) ; return - 1 ; } ret = mount_entry_on_generic_nolock ( mntent, path ) ; if ( ret < 0 ) { ERROR ( ""path <S2SV_blank> name <S2SV_blank> too <S2SV_blank> short"" ) ; return ret ; }",0
78,"<S2SV_ModStart> + 10 ; psf_log_printf ( psf, ""ID3 <S2SV_blank> length <S2SV_blank> : <S2SV_blank> %d\\n--------------------\\n"", <S2SV_ModEnd> psf_binheader_readf ( psf <S2SV_ModStart> += offset + 10 ; <S2SV_ModStart> += offset + 10 ; psf_log_printf ( psf, ""ID3 <S2SV_blank> length <S2SV_blank> : <S2SV_blank> %d\\n--------------------\\n"", <S2SV_ModEnd> psf_binheader_readf ( psf <S2SV_ModStart> += offset + 10 ; <S2SV_ModStart> += offset + 10 ; <S2SV_ModStart> += offset + 10 ; psf_log_printf ( psf, ""ID3 <S2SV_blank> length <S2SV_blank> : <S2SV_blank> %d\\n--------------------\\n"", <S2SV_ModEnd> psf_binheader_readf ( psf <S2SV_ModStart> += offset + 10 ; psf_log_printf ( psf, ""ID3 <S2SV_blank> length <S2SV_blank> : <S2SV_blank> %d\\n--------------------\\n"", <S2SV_ModEnd> psf_binheader_readf ( psf <S2SV_ModStart> += offset + 10 ; psf_log_printf ( psf, ""ID3 <S2SV_blank> length <S2SV_blank> : <S2SV_blank> %d\\n--------------------\\n"", <S2SV_ModEnd> psf_binheader_readf ( psf",0
79,"<S2SV_ModStart> ; if ( ndo -> ndo_eflag ) ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ; if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ; if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags ) ) ) ; if ( ndo -> ndo_eflag ) ND_PRINT ( ( ndo, ""\\n\\tJuniper <S2SV_blank> PCAP <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( jnx_flag_values, ""none"", l2info -> flags",0
80,"<S2SV_ModStart> return NF_STOLEN ; err = nf_ct_frag2_gather ( state -> net, skb, nf_ct_defrag_user ( state -> hook, skb ) ) ; if ( err == - EINPROGRESS ) return NF_STOLEN ; err = nf_ct_frag3_gather ( state -> net, skb, nf_ct_defrag_user ( state -> hook, skb ) ) ; if ( err == - EINPROGRESS ) return NF_ACCEPT ; err = nf_ct_frag4_gather ( state -> net, skb, nf_ct_defrag_user ( state -> hook, skb ) ) ; if ( err == - EINPROGRESS ) return NF_STOLEN ; err = nf_ct_frag3_gather ( state -> net, skb, nf_ct_defrag_user ( state -> hook, skb ) ) ; if ( err == - EINPROGRESS ) return NF_STOLEN ; err = nf_ct_frag4_gather ( state -> net, skb, nf_ct_defrag_user ( state -> hook, skb )",0
81,<S2SV_ModStart> * up ; size_t len ; <S2SV_ModStart> rta ) ; len = nla_len ( rta ) ; if ( len > xfrm_replay_state_esn_len ( up ) ) { kfree ( p ) ; return - EINVAL ; } <S2SV_ModStart> up ) ; len = xfrm_replay_state_esn_len ( up ) ; if ( len > xfrm_replay_state_esn_len ( up ) ) { kfree ( pp ) ; return - EINVAL ; } * replay_esn = p ; * preplay_esn = pp ; return 0 ; } if ( len > xfrm_replay_state_esn_len ( up ) ) { kfree ( p ) ; return - EINVAL ; } len = xfrm_replay_state_esn_len ( up ) ; if ( len > xfrm_replay_state_esn_len ( up ) ) { kfree ( pp ) ; return - EINVAL ; } if ( len > xfrm_replay_state_esn_len ( up ) ) { kfree ( p,0
82,"<S2SV_ModStart> - ENODEV ; if (! io -> inputb ) io -> inputb = intf_mem_inb ; io -> outputb = intf_mem_outb ; break ; case 1 : io -> inputb = intf_mem_inb ; io -> outputb = intf_mem_outb ; break ; case 2 : io -> inputb = intf_mem_inw ; io -> outputb = intf_mem_outw ; break ; case 4 : io -> inputb = intf_mem_inl ; io -> outputb = intf_mem_inl ; break ; case 8 : io -> inputb = mem_inq ; io -> outputb = mem_outq ; break ; # ifdef readq case 8 : io -> inputb = mem_inq ; io -> outputb = mem_inq ; break ; # endif for ( idx = 0 ; idx < io -> io_size ; idx ++ ) { if ( request_mem_region ( addr + idx * io -> regspacing, io -> regsize, DEVICE_NAME ) == NULL ) { mem_region_cleanup ( io, idx ) ; return - EIO ; } } mapsize =",0
83,<S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> ( MagickRealType ) ( <S2SV_ModEnd> ( size_t ) <S2SV_ModStart> (,0
84,"<S2SV_ModStart> ( LINK_KEY ) ) ; ret &= btif_config_set_bin ( bdstr, ""LinkKeyLength"", sizeof ( LINK_KEY ) ) ; ret &= btif_config_set_bin ( bdstr, ""LinkKeyType"", ( int ) key_type ) ; ret &= btif_config_set_bin ( bdstr, ""PinLength"", ( int ) pin_length ) ; ret &= btif_config_set_bin ( bdstr, ""LinkKeyType"", ( int ) key_type ) ; ret &= btif_config_set_bin ( bdstr, ""LinkKey"", link_key, sizeof ( LINK_KEY ) ) ; ret &= btif_config_flush ( ) ; ret &= btif_config_set_bin ( bdstr, ""LinkKeyLength"", sizeof ( LINK_KEY ) ) ; ret &= btif_config_set_bin ( bdstr, ""LinkKey"", link_key, sizeof ( LINK_KEY ) ) ; ret &= btif_config_set_bin ( bdstr, ""LinkKey"", link_key, sizeof ( LINK_KEY ) ) ; ret &= btif_",0
85,"<S2SV_ModStart> { if ( bufsize < JAS_MIN ( bufsize, sizeof ( jpc_fix_t ) ) ) { abort ( ) ; } } if ( numrows >= 2 ) { hstartcol = ( numrows + 1 - parity ) >> 1 ; m = ( numrows + 1 - parity ) >> 1 ; n = m ; dstptr = buf ; srcptr = & a [ hstartcol * stride ] ; while ( n -- > 0 ) { dstptr2 = dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i < numcols ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = & a [ hstartcol * stride ] ; n = numrows - m - (! parity ) ; while ( n -- > 0 ) { dstptr2 = dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i < numcols ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dst",0
86,<S2SV_ModStart> vpx_codec_err_t res ; vpx_codec_enc_cfg_map_t <S2SV_ModEnd> * map ; <S2SV_ModStart> = VPX_CODEC_INVALID_PARAM ; <S2SV_ModEnd> for ( map,0
87,"<S2SV_ModStart> size ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""GSO <S2SV_blank> size <S2SV_blank> must <S2SV_blank> not <S2SV_blank> be <S2SV_blank> zero.\\n"" ) ; return - EINVAL ; } if ( gso -> u. gso. type!= XEN_NETIF_GSO_TYPE_TCPV4 ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Bad <S2SV_blank> GSO <S2SV_blank> type <S2SV_blank> %d.\\n"", gso -> u. gso. type ) ; return - EINVAL ; } skb_shinfo ( skb ) -> gso_type = SKB_GSO_TCPV4 ; skb_shinfo ( skb ) -> gso_segs = 0 ;",0
88,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_object ( struct <S2SV_ModStart> * path, <S2SV_ModEnd> const char * <S2SV_ModStart> char * last, void * data ) { struct bitmap * base ; int bitmap_pos ; bitmap_pos = bitmap_position ( object -> oid. hash ) ; if ( bitmap_pos < 0 ) { char * name = path_name ( path, last ) ; bitmap_pos = ext_index_add_object ( object, name ) ; free ( name ) ; } else if ( bitmap_pos < 0 ) { char * name = path_name ( path, last ) ; bitmap_pos = ext_index_add_object ( object, name ) ; free ( name ) ; }",0
89,<S2SV_ModStart> ; newparity = term_get_parity ( tty_fd ) ; newbits = term_get_parity ( tty_fd ) ; newflow = term_get_parity ( tty_fd ) ; newparity = term_get_parity ( tty_fd ) ; if ( newparity!= term_get_parity ( tty_fd ) ) newparity = term_get_parity ( tty_fd ) ; if ( newflow!= term_get_parity ( tty_fd ) ) newparity = term_get_parity ( tty_fd ) ; if ( newparity!= term_get_parity ( tty_fd ) ) newparity = term_get_parity ( tty_fd ) ; if ( newparity!= term_get_parity ( tty_fd ) ) newparity = term_get_parity ( tty_fd ) ; if ( newflow!= term_get_parity ( tty_fd ) ) newparity = term_get_parity ( tty_fd ) ; if ( newparity!= term_get_parity ( tty_fd ) ) newparity =,0
90,<S2SV_ModStart> mixer ) { mutex_lock ( & mixer -> mixer_mutex ) ; <S2SV_ModStart> mixer ) ; mutex_unlock ( & mixer -> mixer_mutex ) ;,0
91,"<S2SV_ModStart> type_flags ) { struct packet_rollover * rollover = NULL ; <S2SV_ModStart> EINVAL ; } mutex_lock ( & fanout_mutex ) ; <S2SV_ModStart> return - EALREADY ; if ( type == PACKET_FANOUT_LB : case PACKET_FANOUT_CPU : case PACKET_FANOUT_RND : case PACKET_FANOUT_CPU : case PACKET_FANOUT_CPU : case PACKET_FANOUT_CPU : rollover = kzalloc ( sizeof ( * rollover ), GFP_KERNEL ) ; if (! rollover ) return - ENOMEM ; <S2SV_ModEnd> atomic_long_set ( & <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> atomic_long_set ( & <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_huge <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> atomic_long_set ( & <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_failed <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover -> num_huge <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> atomic_long_set ( & <S2SV_ModStart> atomic_long_set ( & <S2SV_ModEnd> rollover ->",0
92,"<S2SV_ModStart> ( newsk ) ; memcpy ( newnp, np, sizeof ( struct ipv6_pinfo ) ) ; rcu_read_lock ( ) ; opt = rcu_dereference ( newnp -> opt ) ; if ( opt ) opt = ipv6_dup_options ( newsk, opt ) ; if ( opt ) opt = ipv6_dup_options ( newsk, opt ) ; rcu_read_unlock ( ) ; sctp_sk ( newsk ) -> v4mapped = sctp_sk ( sk ) -> v4mapped ; newnp = inet6_sk ( newsk ) ; if ( opt ) opt = ipv6_dup_options ( newsk, opt ) ; if ( opt ) opt = ipv6_dup_options ( newsk, opt ) ; if ( opt ) opt = ipv6_dup_options ( newsk, opt ) ; rcu_read_unlock ( ) ; sctp_sk ( newsk ) -> pinet6 = & newsctp6sk -> inet6 ; sctp_sk ( newsk ) -> v4mapped = sctp_sk ( sk ) -> v4mapped ; sctp_sk ( new",0
93,"<S2SV_ModStart> ) ; } return NULL ; } if ( size < PAGE_SIZE ) { kfree ( table ) ; table = NULL ; for_each_sg ( table, iter, sg_nents ( table ), i ) { new_page = alloc_page ( GFP_KERNEL ) ; if (! new_page ) __free_page ( new_page ) ; } return NULL ; } alloc_size = min_t ( int, size, PAGE_SIZE ) ; size -= PAGE_SIZE ; sg_set_page ( iter, new_page, alloc_size, 0 ) ; table = NULL ; for_each_sg ( table, iter, sg_nents ( table ), i ) { new_page = alloc_page ( GFP_KERNEL ) ; if (! new_page ) __free_page ( new_page ) ; } new_page = alloc_page ( GFP_KERNEL ) ; for_each_sg ( table, iter, sg_nents ( table ), i ) { new_page = alloc_page ( GFP_KERNEL ) ; for_each_sg ( table, iter, sg_nents",0
94,"<S2SV_ModStart> void show_progress ( int frame_in, int frame_out, uint64_t dx_time ) { fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out, dx_time ) ; fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out, dx_time ) ; fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out, dx_time ) ; fprintf ( stderr, ""%d <S2SV_blank> decoded <S2SV_blank> frames/%d <S2SV_blank> showed <S2SV_blank> frames <S2SV_blank> in <S2SV_blank> %"" PRId64 "" <S2SV_blank> us <S2SV_blank> (%.2f <S2SV_blank> fps)\\r"", frame_in, frame_out, dx_time ) ; }",0
95,<S2SV_ModStart> ; if ( imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags ) { if ( imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags ) { if ( imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags ) { if ( imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags ) { if ( imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth -> flags & imp_sth ->,0
96,"<S2SV_ModStart> } enc28j60SetBit ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRST <S2SV_ModEnd> ) ; enc28j60ClearBit <S2SV_ModStart> ( interface, ENC28J60_EIR, ENC28J60_EIR_TXIF | ENC28J60_EIR_TXERIF <S2SV_ModEnd> ) ; enc28j60WriteReg <S2SV_ModStart> ( interface, ENC28J60_EWRPTL, LSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_ETXSTL, LSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteReg ( interface, ENC28J60_ETXSTH, MSB ( ENC28J60_TX_BUFFER_START ) ) ; enc28j60WriteBuffer ( interface, buffer, offset ) ; enc28j60WriteBuffer ( interface, buffer, offset ) ; enc28j60SetBit ( interface, ENC28J60_ECON1, ENC28J60_ECON1_TXRTS",0
97,"<S2SV_ModStart> value ) ; value = ast2obj_int ( o -> lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_lineno ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_lineno, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o -> end_col_offset ) ; if (! value ) goto failed ; if ( _PyObject_SetAttrId ( result, & PyId_end_col_offset, value ) < 0 ) goto failed ; Py_DECREF ( value ) ; value = ast2obj_int ( o ->",0
98,"<S2SV_ModStart> ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } } else if (! strcmp ( func, ""page/get"" ) ) { char * page = http_request_param_get ( req, ""page"" ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""%s"", file_read ( page ) ) ; http_response_send ( res ) ; return ; } else if (! strcmp ( func, ""page/get"" ) ) { char * page = http_request_param_get ( req, ""page"" ) ; if ( page == NULL ) page = http_request_get_query_string ( req ) ; if ( page && ( access ( page, R_OK ) == 0 ) ) { http_response_printf ( res, ""success"" ) ; http_response_send ( res ) ; return",0
99,"<S2SV_ModStart> path ) ; ext4_set_inode_state ( inode, EXT4_STATE_DIO_UNWRITTEN ) ; <S2SV_ModStart> out ; } if ( flags & EXT4_GET_BLOCKS_PRE_IO ) { ret = ext4_split_unwritten_extents ( handle, inode, path, iblock, max_blocks, flags ) ; if ( io ) io -> flag = EXT4_IO_UNWRITTEN ; else if ( flags & EXT4_GET_BLOCKS_CONVERT ) { ret = ext4_convert_unwritten_extents_endio ( handle, inode, path ) ; if ( ret >= 0 ) ext4_update_inode_fsync_trans ( handle, inode, 1 ) ; goto out2 ; } if ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) goto map_out ; if ( ( flags & EXT4_GET_BLOCKS_CREATE ) == 0 ) { set_buffer_unwritten ( bh_result ) ; goto out1 ; } if ( ( flags & EXT4_GET_BLOCKS_UNINIT_EXT ) == 0 ) { set_buffer_un",0
100,"<S2SV_ModStart> 0 ; } ND_TCHECK_16BITS ( p + 2 ) ; <S2SV_ModStart> 2 ) ; ND_TCHECK_16BITS ( p + 2 ) ; <S2SV_ModStart> 2 ) ; ND_TCHECK_16BITS ( p + 2 ) ; ND_PRINT ( ( ndo, "": <S2SV_blank> %s <S2SV_blank> (0x%02x):"", tok2str ( ipcpopt_compproto_values, ""Unknown"", compproto ) ) ) ; ND_PRINT ( ( ndo, "": <S2SV_blank> %s <S2SV_blank> (0x%02x):"", tok2str ( ipcpopt_compproto_values, ""Unknown"", compproto ) ) ) ; ND_TCHECK_16BITS ( p + 2 ) ; ND_PRINT ( ( ndo, "": <S2SV_blank> %s <S2SV_blank> (0x%02x):"", tok2str ( ipcpopt_compproto_values, ""Unknown"", compproto ) ) ) ; ND_PRINT ( ( ndo, "": <S2SV_blank> %s <S2SV_blank> (0x%02x):"", tok2str ( ipcpopt_compproto_values, ""Unknown"", compproto ) )",0
101,"<S2SV_ModStart> if (! caller_is_in_cgroup ( fc -> pid, controller, cgroup, NULL ) ) { sb -> st_mode = S_IFDIR | 00555 ; sb -> st_nlink = 2 ; ret = 0 ; goto out ; } if ( caller_is_in_cgroup ( fc -> pid, controller, cgroup, NULL ) ) { sb -> st_mode = S_IFDIR | 00555 ; sb -> st_nlink = 2 ; goto out ; } if ( caller_is_cgroup ( fc -> pid, controller, cgroup, NULL ) ) { sb -> st_mode = S_IFDIR | 00555 ; sb -> st_nlink = 2 ; ret = 0 ; goto out ; } if ( caller_is_cgroup ( fc -> pid, controller, cgroup, NULL ) ) { sb -> st_mode = S_IFDIR | 00555 ; sb -> st_nlink = 2 ; ret = 0 ; goto out ; } if ( caller_is_cgroup ( fc -> pid, controller, cgroup, NULL ) ) { sb -> st_mode = S_IFDIR | 00555 ; sb -> st_",0
102,"<S2SV_ModStart> flag ) { <S2SV_ModEnd> double level = <S2SV_ModStart>.5 ) ; int mb_rows = source -> y_width >> 4 ; int mb_cols = source -> y_height >> 4 ; unsigned char * limits ; int mbr, mbc ; ( void ) post ; ( void ) low_var_thresh ; ( void ) flag ; memset ( limits, ( unsigned char ) ppl, 16 * mb_cols ) ; for ( mbr = 0 ; mbr < mb_rows ; mbr ++ ) { vpx_memset ( limits, ( unsigned char ) ppl, 16 * mb_cols ) ; for ( mbr = 0 ; mbr < mb_rows ; mbr ++ ) { vpx_post_proc_down_and_across_mb_row ( source -> y_buffer + 16 * mbr * source -> y_stride, source -> y_stride, source -> y_width, limits, 16 ) ; vpx_post_proc_down_and_across_mb_row ( source -> u_buffer + 8 * mbr * source -> uv_stride, source -> uv_stride, source -> uv_width, limits, 8 ) ; v",0
103,"<S2SV_ModStart> ptr ) { if ( ( ptr -> flags & FD_RAW_READ ) && ptr -> buffer_length ) { long length = ptr -> buffer_length ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if ( ret ) return ret ; param += ptr -> length ; } else if ( ( ptr -> flags & FD_RAW_WRITE ) && ptr -> buffer_length ) { if ( ptr -> length >= 0 && ptr -> length <= ptr -> buffer_length ) { long length = ptr -> buffer_length ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if ( ret ) return ret ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if ( ret ) return ret ; param += ptr -> length ; } else if ( ( ptr -> flags & FD_RAW_READ ) && ptr -> buffer_length ) { if ( ptr -> length >= 0 && ptr -> length <= ptr -> buffer_length ) { long length = ptr -> buffer_length ; ret = fd_copyout ( ptr -> data, ptr -> kernel_data, length ) ; if (",0
104,"<S2SV_ModStart> if ( ( new -> euid!= old -> uid || new -> egid!= old -> gid ||! cap_issubset ( new -> cap_permitted, old -> cap_permitted ) ) && bprm -> unsafe & ~ LSM_UNSAFE_PTRACE_CAP ) { if (! capable ( CAP_SETUID ) ) { new -> euid = new -> uid ; new -> egid = new -> gid ; } new -> cap_permitted = cap_intersect ( new -> cap_permitted, old -> cap_permitted ) ; } new -> suid = new -> fsuid = new -> euid ; new -> sgid = new -> fsgid = new -> fsgid ; if (! issecure ( SECURE_NOROOT ) ) { if (! capable ( CAP_FULL_SET ) ) { new -> euid = new -> uid ; new -> fsgid = new -> gid ; } new -> securebits &= ~ SECURE_SECURE_SECURE_SECURE_SECURE_SECURE_SECURE_SECURE_SECURE_SECURE_SECURE_SECURE_SECURE_SECURE_SECURE_",0
105,"<S2SV_ModStart> ext4_xattr_cache_insert ( struct mb2_cache <S2SV_ModEnd> * ext4_mb_cache, <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> int error ; <S2SV_ModStart> int error ; <S2SV_ModEnd> ce = mb_cache_entry_alloc <S2SV_ModStart> int error ; <S2SV_ModEnd> ce = mb_cache_entry_alloc <S2SV_ModStart> ; error = mb2_cache_entry_insert ( ext4_mb_cache, bh -> b_bdev, bh -> b_blocknr, hash ) ; if ( error ) { ea_bdebug ( bh, ""inserting <S2SV_blank> [%x]"", ( int ) hash ) ; <S2SV_ModEnd> ea_bdebug ( bh <S2SV_ModStart> ""already <S2SV_blank> in <S2SV_blank> cache"" ) ; <S2SV_ModEnd> } } <S2SV_null>",0
106,"<S2SV_ModStart> ) ) ; if (! r_socket_http_answer ( s, code, rlen ) ) { eprintf ( ""Invalid <S2SV_blank> HTTP/1.0\\r\\n"" ""Host: <S2SV_blank> %s\\r\\n"", host ) ; free ( uri ) ; return NULL ; } <S2SV_ModStart> ) ) ; if (! r_socket_http_answer ( s, code, rlen ) ) { eprintf ( ""Invalid <S2SV_blank> HTTP/1.0\\r\\n"" ""Host: <S2SV_blank> %s\\r\\n"" ""Content-Length: <S2SV_blank> %i\\r\\n"", host, ( int ) strlen ( data ) ) ; free ( uri ) ; return NULL ; } r_socket_printf ( s, ""POST <S2SV_blank> /%s <S2SV_blank> HTTP/1.0\\r\\n"" ""User-Agent: <S2SV_blank> radare2 <S2SV_blank> "" R2_VERSION ""\\r\\n"" ""User-Agent: <S2SV_blank> radare2 <S2SV_blank> "" R2_VERSION\\r\\n"" ""Host: <S2SV_blank> %s\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" <S2SV_ModEnd> ""Host: <S2SV_blank> %s\\r\\",0
107,"<S2SV_ModStart> ; tf = ( ( c == LUA_SIGNATURE [ 0 ] )? luaU_undump : luaY_parser ) ( L, p -> z, ( c == LUA_SIGNATURE [ 0 ] )? luaU_undump : luaY_parser ) ( L, p -> z, ( c == LUA_SIGNATURE [ 0 ] )? luaU_undump : luaY_parser ) ( L, p -> z, ( c == LUA_SIGNATURE [ 0 ] )? luaY_parser ) : ( c == LUA_SIGNATURE [ 0 ] )? luaU_undump : luaY_parser ) ( L, p -> z, ( c == LUA_SIGNATURE [ 0 ] )? luaU_undump : luaY_parser ) ( L, p -> z, ( c == LUA_SIGNATURE [ 0 ] )? luaU_undump : luaY_parser ) ( L, p -> z, ( c == LUA_SIGNATURE [ 0 ] )? luaU_undump : luaY_parser )",0
108,"<S2SV_ModStart> = 0 ; struct ip_options_data * inet_opt ; <S2SV_ModStart> = 0 ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> -> icsk_ext_hdr_len = inet_opt -> opt_nflen ; inet_opt -> opt_nflen = inet_opt -> opt_nflen ; inet_opt -> opt_nflen = inet_opt -> opt_nflen ; inet_opt -> opt_nflen = inet_opt -> opt_nflen ; inet -> inet_opt -> opt_nflen = inet_opt -> opt_nflen ; <S2SV_ModStart> -> icsk_ext_len = inet_opt -> opt_nflen ; inet_opt -> opt_nflen = inet_opt -> opt_nflen ; inet_opt -> opt_nflen = inet_opt -> opt_nflen ; inet_opt -> opt_nflen = inet_opt -> opt_nflen ; inet -> inet_opt -> opt_nflen = inet_opt -> opt_n",0
109,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> ip_options_get_from_user ( struct <S2SV_ModStart> ) { struct ip_options_rcu <S2SV_ModEnd> * opt = <S2SV_ModStart> ( optlen && copy_from_user ( & opt -> opt, data, optlen ) ) { kfree ( opt ) ; return - EFAULT ; } if ( copy_from_user ( & opt -> opt, data, optlen ) ) { kfree ( opt ) ; return - EFAULT ; } if ( optlen && copy_from_user ( & opt -> __data, data, optlen ) ) { kfree ( opt ) ; return - EFAULT ; } return ip_options_get_finish ( net, optp, opt, optlen ) ; }",0
110,"<S2SV_ModStart> dl = kmalloc ( size <S2SV_ModEnd>, GFP_KERNEL )",0
111,<S2SV_ModStart> trunc : if (! <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
112,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static u_int <S2SV_ModEnd> rpki_rtr_pdu_print ( netdissect_options <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> rpki_rtr_pdu_print ( netdissect_options <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> rpki_rtr_pdu_print ( netdissect_options <S2SV_ModStart>, indent ) { ND_TCHECK2 ( * tptr, pdu_len ) ; ND_TCHECK2 ( * tptr, pdu_len ) ; ND_TCHECK2 ( * tptr, pdu_len ) ; ND_TCHECK2 ( * tptr, pdu_len ) ; ND_PRINT ( ( ndo, ""%sRPKI-RTRv%u, <S2SV_blank> %s <S2SV_blank> PDU <S2SV_blank> (%u), <S2SV_blank> length: <S2SV_blank> %u"", indent_string ( 8 ), pdu_header -> version, tok2str ( rpki_rtr_pdu_values, ""Unknown"", pdu_type ), pdu_len ) ) ; break ; case RPKI_RTR",0
113,"<S2SV_ModStart> rose_facilities_struct facilities ; unsigned <S2SV_ModStart> = NULL ; unsigned <S2SV_ModStart> = NULL ; if ( skb -> len < 4 ) { rose_transmit_clear_request ( neigh, lci, ROSE_INVALID_FACILITY, 76 ) ; return 0 ; } <S2SV_ModStart> & facilities ) ) { rose_transmit_clear_request ( neigh, lci, ROSE_INVALID_FACILITY, 76 ) ; return 0 ; } skb -> sk = NULL ; if ( skb -> len < 4 ) { rose_transmit_clear_request ( neigh, lci, ROSE_INVALID_FACILITY, 76 ) ; return 0 ; } sk = rose_find_listener ( & facilities. source_addr, & facilities. source_call ; if ( sk == NULL || sk_acceptq_is_full ( sk ) || ( make = rose_make_new ( sk ) ) == NULL || ( make = rose_make_new ( sk ) ) == NULL ) { rose_transmit_clear_request ( neigh, lci, ROSE_NETWORK_CONGESTION, 120 )",0
114,<S2SV_ModStart>. s_addr = htonl ( INADDR_LOOPBACK <S2SV_ModEnd> ) ; addr,0
115,"<S2SV_ModStart> ; } else if ( * varp == NUL ) errmsg = ( char_u * ) N_ ( ""E529: <S2SV_blank> Cannot <S2SV_blank> set <S2SV_blank> \'term\' <S2SV_blank> to <S2SV_blank> empty <S2SV_blank> string"" ) ; else if ( term_is_gui ( T_NAME ) ) errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; else if ( <S2SV_ModStart> ( * varp == NUL ) errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; else if ( term_is_gui ( T_NAME ) ) errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; else if ( term_is_gui ( T_NAME ) ) errmsg = ( char_u * ) N_ ( ""E530: <S2SV_blank> Use <S2SV_blank> \\"":gui\\"" <S2SV_blank> to <S2SV_blank> start <S2SV_blank> the <S2SV_blank> GUI"" ) ; else if ( term_is_gui ( T_NAME ) )",0
116,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & new_mode",0
117,"<S2SV_ModStart> to_o2nm_cluster ( item <S2SV_ModEnd> ) ; int <S2SV_ModStart> ) ; } <S2SV_ModEnd> write_lock ( & <S2SV_ModStart> cl_nodes_lock ) ; if ( test_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = - EBUSY ; else if ( test_and_set_bit ( O2NM_NODE_ATTR_ADDRESS, & node -> nd_set_attributes ) ) ret = 0 ;",0
118,"<S2SV_ModStart> case BSD_AFNUM_ISO : ND_PRINT ( ( ndo, ""[|isoclns]"" ) ) ; break ; case BSD_AFNUM_APPLETALK : atalk_print ( ndo, p, length ) ; break ; case BSD_AFNUM_IPX : ipx_print ( ndo, p, length ) ; break ; case BSD_AFNUM_ISO : if ( ndo -> ndo_eflag ) null_hdr_print ( ndo, family, length + NULL_HDRLEN ) ; if (! ndo -> ndo_eflag ) null_hdr_print ( ndo, family, length + NULL_HDRLEN ) ; if (! ndo -> ndo_eflag ) null_hdr_print ( ndo, family, length ) ; break ; case BSD_AFNUM_APPLETALK : if ( ndo -> ndo_eflag ) null_hdr_print ( ndo, family, length + NULL_HDRLEN ) ; if (! ndo -> ndo_eflag ) null_hdr_print ( ndo, family, length + NULL_H",0
119,"<S2SV_ModStart> == '/' ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> contains <S2SV_blank> \'.\'"" ) ; return ( ARCHIVE_FAILED ) ; } src ++ ; for ( ; ; ) { if ( src [ 0 ] == '/' ) { src ++ ; continue ; } else if ( src [ 0 ] == '.' ) { if ( src [ 1 ] == '/' ) { src += 2 ; continue ; } else if ( src [ 1 ] == '/' ) { src += 2 ; continue ; } else if ( src [ 1 ] == '.' ) { if ( a -> flags & ARCHIVE_EXTRACT_SECURE_NODOTDOT ) { archive_set_error ( & a -> archive, ARCHIVE_ERRNO_MISC, ""Path <S2SV_blank> contains <S2SV_blank> \'..\'"" ) ; return ( ARCHIVE_FAILED ) ; } } } if ( separator ) * dest ++ = '/' ; while ( * src!= '\\0' && * src!= '/' ) { * dest ++ = * src ++ ; } if ( dest == a -> name ) { if ( separator ) * dest ++ = '.' ; else * dest ++ = '.'",0
120,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> TPM_RC <S2SV_ModEnd> tpm_kdfa ( TSS2_SYS_CONTEXT <S2SV_ModStart> TPM_RC rval ; UINT16 bytes = bits / 8 ; TPM2B_DIGEST tpm2bLabel, tpm2bBits, tpm2b_i_2 ; UINT8 * tpm2bBitsPtr = & tpm2bBits. t. buffer [ 0 ] ; UINT8 * tpm2b_i_2Ptr = & tpm2b_i_2. t. buffer [ 0 ] ; UINT8 * tpm2bBitsPtr = & tpm2bBits. t. buffer [ 0 ] ; UINT32 bitsSwizzled = string_bytes_endian_convert_32 ( bits ) ; * ( UINT32 * ) tpm2bBitsPtr = bitsSwizzled ; for ( i = 0 ; i < tpm2bLabel. t. size ; i ++ ) { i_Swizzled = string_bytes_endian_convert_32 ( i ) ; * ( UINT32 * ) tpm2b_i_",0
121,"<S2SV_ModStart> size_t size ; if ( width < 0 || height < 0 || hstep <= 0 || vstep <= 0 ) { goto error ; } if (! jas_safe_intfast32_add ( tlx, width, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ||! jas_safe_intfast32_add ( tlx, tly, 0 ) ||! jas_safe_intfast32_add ( tlx, tly, 0 ) ||! jas_safe_intfast32_add ( tly, height, 0 ) ) { goto error ; } if (! jas_safe_size_mul ( cmpt -> width_, cmpt -> height_, & size ) ||! jas_safe_size_mul ( size, cmpt -> cps_, & size ) ||! jas_safe_size_mul ( size, cmpt -> prec_, & size ) ) { goto error ; } cmpt -> stream_ = ( inmem )? jas_stream_memopen2 ( 0, size ) : jas_stream_tmpfile ( ) ; if",0
122,<S2SV_ModStart> s ) { if ( s > UINT32_MAX / sizeof ( size_t ) ) { return ( malloc ( ( size_t ) s ) ) ; },0
123,"<S2SV_ModStart> * dest ; ucmd = ( const struct qib_cmd __user * ) data ; if ( copy_from_user ( & cmd. type, & ucmd -> type, sizeof ( cmd. type ) ) ) { ret = - EFAULT ; goto bail ; } src = ( const void __user * ) data ; if ( copy_from_user ( & cmd. type, & ucmd -> type, sizeof ( cmd. type ) ) ) { ret = - EFAULT ; goto bail ; } dest = & cmd. cmd ; src = & ucmd -> cmd ; break ; case QIB_CMD_SET_CTXT_INFO : copy = sizeof ( cmd. cmd. ctxt_info ) ; dest = & cmd. cmd. ctxt_info ; src = & ucmd -> cmd. ctxt_info ; break ; case QIB_CMD_TID_UPDATE : copy = sizeof ( cmd. cmd. tid_info ) ; dest = & cmd. cmd. tid_info ; src = & ucmd -> cmd. tid_info ; break ; case QIB_CMD_TID_FREE : copy = sizeof ( cmd. cmd. tid_info ) ; dest = & cmd. cmd",0
124,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; goto MATLAB_KO ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; goto END_OF_READING ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; goto MATLAB_KO ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; goto END_OF_READING ; }",0
125,"<S2SV_ModStart> peer ) get_net ( net, peer -> name <S2SV_ModStart> peer ) ; spin_unlock_bh ( & net -> nsid_lock ) ;",0
126,<S2SV_ModStart> ] == '\\r' ) { if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\n' ) { endofheaders = i + 1 ; } else if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\n' ) { endofheaders = i + 1 ; } else if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\r' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\n' ) { endofheaders = i + 1 ; } } else if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\r' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\n' ) { endofheaders = i + 1 ; } else if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\r' ) { i ++ ; if ( i < ( int ) header_buf_used && header_buf [ i ] == '\\,0
127,<S2SV_ModStart> ; if (! POKE_UINT8 ( c_id_subtype ) && POKE_UINT8 ( c_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_subtype ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_subtype ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p_id_len ) && POKE_UINT8 ( p,0
128,"<S2SV_ModStart> ) || ( pc + asn1_op_lengths [ op ] > datalen ) ) goto machine_overrun_error <S2SV_ModEnd> ; pc += <S2SV_ModStart> ) || ( pc + asn1_op_lengths [ op ] > datalen ) ) goto machine_overrun_error <S2SV_ModEnd> ; pc += <S2SV_ModStart> ) || ( pc + asn1_op_lengths [ op ] > datalen ) ) goto machine_overrun_error <S2SV_ModEnd> ; pc += <S2SV_ModStart> datalen ) { pr_debug ( ""next_op: <S2SV_blank> pc=\\e[32m%zu\\e[m/%zu <S2SV_blank> dp=\\e[33m%zu\\e[m/%zu <S2SV_blank> C=%d <S2SV_blank> J=%d\\n"", pc, machlen, dp, datalen, csp, jsp ) ; if ( pc + asn1_op_lengths [ op ] > datalen ) goto machine_overrun_error ; pc += asn1_op_lengths [ op ] ; if ( pc >= machlen ) goto machine_overrun_error ; if ( pc >= machlen ) goto machine_overrun_error ; if ( pc >= machlen ) goto machine_",0
129,<S2SV_ModStart> = 0 ; if ( sp -> initmsg. sinit_num_ostreams = sctp_max_outstreams ; sp -> initmsg. sinit_max_instreams = sctp_max_instreams ; sp -> initmsg. sinit_max_attempts = sctp_max_retrans_init ; sp -> initmsg. sinit_max_init_timeo = sp -> sctp. rto_max ; sp -> initmsg. sinit_max_init_timeo = sp -> sctp. rto_max ; sp -> initmsg. sinit_max_instreams = sctp_max_instreams ; sp -> initmsg. sinit_max_instreams = sctp_max_outstreams ; sp -> initmsg. sinit_max_attempts = sctp_max_retrans_init ; sp -> initmsg. sinit_max_init_timeo = sp -> sctp. rto_max ; sp -> initmsg. sinit_max_init_timeo = sp -> sctp. rto_max ; sp -> initmsg. sinit_max_init_timeo = sp -> sctp,0
130,"<S2SV_ModStart> int mpeg4_decode_profile_level ( MpegEncContext <S2SV_ModEnd> * s, <S2SV_ModStart>, 4 ) ; if ( s -> avctx -> profile == 0 && s -> avctx -> level == 8 ) { s -> avctx -> profile = 0 ; s -> avctx -> level = 0 ; } else { s -> avctx -> profile = 0 ; s -> avctx -> level = get_bits ( gb, 4 ) ; } return 0 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
131,"<S2SV_ModStart> + MIDQ_DATA_BUFF ; struct snd_rawmidi_substream * substream = mpu -> substream_input ; <S2SV_ModStart> ) ; while ( readw ( mpu -> dev -> MIDQ + JQS_wTail )!= readw ( mpu -> dev -> MIDQ + JQS_wHead ) ) { u16 wTmp, val ; val = readw ( pwMIDQData + 2 * readw ( mpu -> dev -> MIDQ + JQS_wHead ) ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_rawmidi_receive ( mpu -> substream_input, ( unsigned char * ) & val, 1 ) ; if ( test_bit ( MSNDMIDI_MODE_BIT_INPUT_TRIGGER, & mpu -> mode ) ) snd_raw",0
132,"<S2SV_ModStart> rule ) ; if ( result < 0 ) { pr_err ( ""%s: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> LSM <S2SV_blank> measure <S2SV_blank> rule\\n"", __func__ ) ; return result ; } result = security_filter_rule_init ( entry -> lsm [ lsm_rule ]. type, Audit_equal, args, & entry -> lsm [ lsm_rule ]. rule ) ; if ( result < 0 ) { pr_err ( ""%s: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> LSM <S2SV_blank> measure <S2SV_blank> rule\\n"", __func__ ) ; return result ; } result = security_filter_rule_init ( entry -> lsm [ lsm_rule ]. type, Audit_equal, args, & entry -> lsm [ lsm_rule ]. rule ) ; if ( result < 0 ) { pr_err ( ""%s: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> LSM <S2SV_blank> measure <S2SV_blank> rule\\n"", __func__ ) ; return result ; } result = security_filter_rule_init ( entry -> lsm [ lsm_rule ]. type, Audit_equal, args, & entry -> lsm [ lsm_rule ]. rule ) ; return result ; }",0
133,<S2SV_ModStart> file ) ; <S2SV_ModEnd> file_free ( file,1
134,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
135,"<S2SV_ModStart> "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> if <S2SV_blank> ( <S2SV_blank> e.origin <S2SV_blank>!== <S2SV_blank> targetOrigin <S2SV_blank> ) <S2SV_blank> {\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> if <S2SV_blank> ( <S2SV_blank> e.origin <S2SV_blank>!== <S2SV_blank> targetOrigin <S2SV_blank> ) <S2SV_blank> {\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> {\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> if <S2SV_blank> ( <S2SV_blank> e.origin <S2SV_blank>!== <S2SV_blank> targetOrigin <S2SV_blank> ) <S2SV_blank> {\\n"" "" <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
136,"<S2SV_ModStart> req, size_t <S2SV_ModEnd> acl_len ) { <S2SV_ModStart> int status ; __be32 <S2SV_ModEnd> savep ; uint32_t <S2SV_ModStart> int status ; <S2SV_ModEnd> if ( ( <S2SV_ModStart> 0 ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) goto out <S2SV_ModEnd> ; if ( <S2SV_ModStart> ) { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" <S2SV_ModEnd> "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen, recvd ) ; * acl_len = attrlen ; } else { dprintk ( ""NFS: <S2SV_blank> server <S2SV_blank> cheating <S2SV_blank> in <S2SV_blank> getattr"" <S2SV_ModEnd> "" <S2SV_blank> acl <S2SV_blank> reply: <S2SV_blank> attrlen <S2SV_blank> %u <S2SV_blank> > <S2SV_blank> recvd <S2SV_blank> %u\\n"", attrlen, recvd ) ; return - EINVAL ; } xdr_read_pages ( xdr, attrlen ) ; * acl_len = attrlen ; } else status = - EOPNOTSUPP ; out : return status <S2SV_ModEnd> ; } <S2SV_null>",0
137,<S2SV_ModStart> ; if ( unfrag_ip6hlen > INT_MAX / frag_hdr_sz ) { if ( unfrag_ip6hlen > INT_MAX / frag_hdr_sz ) { if ( unfrag_ip6hlen > INT_MAX / frag_hdr_sz ) { if ( unfrag_ip6hlen > INT_MAX / frag_hdr_sz ) { if ( unfrag_ip6hlen > INT_MAX / frag_hdr_sz ) { if ( unfrag_ip6hlen > INT_MAX / frag_hdr_sz ) { if ( unfrag_ip6hlen > INT_MAX / frag_hdr_sz ) { if ( unfrag_ip6hlen > INT_MAX / frag_hdr_sz ) { if ( unfrag_ip6hlen > INT_MAX / frag_hdr_sz ) { if ( unfrag_ip6hlen > INT_MAX / frag_hdr_sz ) { if ( unfrag_ip6hlen > INT_MAX / frag_hdr_sz ) { if ( unfrag_ip6hlen > INT_MAX / frag_hdr_sz ) {,0
138,<S2SV_ModStart> while ( ( tmpName [ i ]!= 0 ) && ( i < to_read ) ) { i ++ ; } if ( i == to_read ) { gf_free ( tmpName ) ; return GF_ISOM_INVALID_FILE ; } if ( i == to_read - 1 ) { ptr -> nameURN = tmpName ; ptr -> location = NULL ; return GF_OUT_OF_MEM ; } ptr -> nameURN = ( char * ) gf_malloc ( sizeof ( char ) * ( i + 1 ) ) ; if (! ptr -> nameURN ) { gf_free ( tmpName ) ; return GF_ISOM_INVALID_FILE ; } ptr -> location = ( char * ) gf_malloc ( sizeof ( char ) * ( i + 1 ) ) ; if (! ptr -> location ) { gf_free ( tmpName ) ; return GF_OUT_OF_MEM ; } ptr -> nameURN = ( char * ) gf_malloc ( sizeof ( char ) * ( i + 1 ) ) ; if (! ptr -> nameURN ) { gf_free ( tmpName ) ; return GF_ISOM_INVALID_FILE ; },0
139,"<S2SV_ModStart> * TICK_NSEC ; u32 <S2SV_ModEnd> rem ; value <S2SV_ModStart> -> tv_sec = div_u64_rem <S2SV_ModEnd> ( nsec,",1
140,"<S2SV_ModStart> ; for ( plane = 0 ; plane < 4 && in -> data [ plane ] ; plane ++ ) { const int width = ( plane == 1 || plane == 2 )? FF_CEIL_RSHIFT ( inlink -> w, s -> hsub ) : inlink -> w ; const int height = ( plane == 1 || plane == 2 )? FF_CEIL_RSHIFT ( inlink -> h, s -> vsub ) : inlink -> h ; step = s -> max_step [ plane ] ; outrow = out -> data [ plane ] ; inrow = in -> data [ plane ] + ( width - 1 ) * step ; for ( i = 0 ; i < width ; i ++ ) { uint16_t * outrow16 = ( uint16_t * ) outrow ; uint16_t * inrow16 = ( uint16_t * ) inrow ; for ( j = 0 ; j < width ; j ++ ) outrow16 [ j ] = inrow16 [ - j ] ; for ( j = 0 ; j < height ; j ++ ) outrow16 [ j ] = inrow16 [ - j ] ; for ( j = 0 ; j <",0
141,"<S2SV_ModStart> '/' ) { strncpy <S2SV_ModEnd> ( szFileName, <S2SV_ModStart> pszFileName ) ; } if ( strlen ( pszFileName ) < 5 ) { inst_logPushMsg ( __FILE__, __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; } if ( strlen ( pszFileName ) < 5 ) { inst_logPushMsg ( __FILE__, __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; } if ( strlen ( pszFileName ) < 5 ) { inst_logPushMsg ( __FILE__, __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; } if ( strlen ( pszFileName ) < 5 ) { inst_logPushMsg ( __FILE__, __FILE__, __LINE__, LOG_CRITICAL, ODBC_ERROR_INVALID_PATH, """" ) ; return FALSE ; } if ( strlen ( pszFileName ) < 5 ) { inst_logPushMsg ( __FILE__, __FILE__, __LINE__,",0
142,"<S2SV_ModStart> { owner = ssplit <S2SV_ModEnd> ( auth, <S2SV_ModStart>, & tok ) ; if ( owner && * owner ) { if ( snumber ( owner ) ) { uid = ( int ) stoi ( owner ) ; } else if ( smatch ( owner, ""APPWEB"" ) ) { uid = HTTP -> uid ; } else { uid = userToID ( owner ) ; } } if ( group && * group ) { if ( snumber ( group ) ) { gid = ( int ) stoi ( group ) ; } else { gid = groupToID ( group ) ; } } if ( perms && snumber ( perms ) ) { mode = ( int ) stoiradix ( perms, - 1, NULL ) ; } else { mode = 0 ; }",0
143,<S2SV_ModStart> ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) goto out ; nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) goto out ; nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) goto out ; nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) goto out ; nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) goto out ;,0
144,<S2SV_ModStart> ; if ( inet -> inet_opt && inet -> inet_opt -> opt. <S2SV_ModEnd> srr ) daddr,0
145,"<S2SV_ModStart> ) ) { pr_err <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> """,0
146,"<S2SV_ModStart> eigrp_tlv_len ) ; if ( eigrp_tlv_len > len ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", eigrp_tlv_len ) ) ; return ; } <S2SV_ModStart> eigrp_tlv_len ) ; if ( eigrp_tlv_len > len ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", eigrp_tlv_len ) ) ; return ; } if ( eigrp_tlv_len > len ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", eigrp_tlv_len ) ) ; return ; } if ( eigrp_tlv_len > len ) { ND_PRINT ( ( ndo, ""EIGRP <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%u)"", eigrp_tlv_len ) )",0
147,"<S2SV_ModStart> NULL ; # if CONFIG_MEM_MANAGER int number_aau ; if ( vpx_mm_create_heap_memory ( ) < 0 ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> create <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ) } number_aau = ( ( size + align - 1 + ADDRESS_STORAGE_SIZE ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) + 1 ; if ( addr < 0 ) { _P ( printf ( ""[vpx][mm] <S2SV_blank> ERROR <S2SV_blank> vpx_memalign() <S2SV_blank> Couldn\'t <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> Heap.\\n"" ) ) } number_aau = ( ( size + align - 1 + ADDRESS_STORAGE_SIZE ) >> SHIFT_HMM_ADDR_ALIGN_UNIT ) + 1 ; addr = VPX_MALLOC_L ( size + align - 1 + ADDRESS_STORAGE_SIZE ) ; # endif",0
148,"<S2SV_ModStart> int res ; <S2SV_ModEnd> long long export_index_table [ <S2SV_ModStart> long long export_index_table [ SQUASHFS_LOOKUP_BLOCKS ( sBlk. s. inodes ) ] ; int read_fs_bytes ; <S2SV_ModStart> long long export_index_table [ SQUASHFS_LOOKUP_BLOCKS ( sBlk. s. inodes ) ] ; res = read_fs_bytes ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE ; } read_fs_bytes ( fd, sBlk. s. lookup_table_start, SQUASHFS_LOOKUP_BLOCK_BYTES ( sBlk. s. inodes ), export_index_table ) ; if ( res == FALSE ) { ERROR ( ""parse_exports_table: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> export <S2SV_blank> index <S2SV_blank> table\\n"" ) ; return FALSE",0
149,"<S2SV_ModStart> 0 ) ; } if ( strcmp ( ptr, '/' ) == 0 ) { rw_exit ( & sdvp -> sdev_contents ) ; ( void ) devname_lookup_func ( sdvp, ""dsk"", & vp, cred, devzvol_create_dir, SDEV_VATTR ) ; VN_RELE ( vp ) ; ( void ) devname_lookup_func ( sdvp, ""rdsk"", & vp, cred, devzvol_create_dir, SDEV_VATTR ) ; VN_RELE ( vp ) ; ( void ) devname_lookup_func ( sdvp, ""dsk"", & vp, cred, devzvol_create_dir, SDEV_VATTR ) ; VN_RELE ( vp ) ; ( void ) devname_lookup_func ( sdvp, ""rdsk"", & vp, cred, devzvol_create_dir, SDEV_VATTR ) ; VN_RELE ( vp ) ; ( void ) devname_lookup_func ( sdvp, ""rdsk"", & vp, cred, devzvol_create_dir, S",0
150,<S2SV_ModStart> |= EXT4_EXT_MARK_UNINIT2 ; split_flag |= EXT4_GET_BLOCKS_PRE_IO <S2SV_ModEnd> ; return ext4_split_extent,0
151,"<S2SV_ModStart> HASH_DISABLED ; } else return apr_psprintf ( cmd -> pool, ""ModSecurity: <S2SV_blank> Invalid <S2SV_blank> value <S2SV_blank> for <S2SV_blank> SecRuleEngine: <S2SV_blank> %s"", p1 ) ;",0
152,"<S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt )",0
153,"<S2SV_ModStart> = 0.0 ; uint16 nstrips = 0, ntiles = 0 ; uint16 planar = 0 ; uint16 input_photometric = 0 ; uint16 input_compression = 0 ; uint16 input_photometric = 0 ; uint16 input_compression = 0 ; uint16 subsampling_horiz, subsampling_vert ; uint32 width = 0 ; uint32 length = 0 ; if (! TIFFGetField ( in, TIFFTAG_IMAGEWIDTH, & width ) ) TIFFError ( ""loadImage"", ""Image <S2SV_blank> lacks <S2SV_blank> image <S2SV_blank> width <S2SV_blank> tag"" ) ; if (! TIFFGetField ( in, TIFFTAG_IMAGELENGTH, & length ) ) TIFFError ( ""loadImage"", ""Image <S2SV_blank> lacks <S2SV_blank> image <S2SV_blank> length <S2SV_blank> tag"" ) ; if (! TIFFGetField ( in, TIFFTAG_IMAGEWIDTH, & width ) ) TIFFError ( ""loadImage"", ""Image <S2SV_blank> lacks <S2SV_blank> image <S2SV_blank> width <S2SV_blank> tag"" ) ; if (! TIFFGetField ( in, TIFFTAG_IMAGELENGTH, & length ) ) TIFFError ( ""loadImage"", ""Image <S2SV_blank> lacks <S2SV_blank> image <S2SV_blank> length <S2SV_blank> tag"" ) ; if (!",0
154,"<S2SV_ModStart> = 0 ; # if CONFIG_VP8_ENCODER if ( global -> codec -> name == ""vp8"" ) { ctrl_args = vp8_args ; ctrl_args_map = vp8_arg_ctrl_map ; # endif } else if ( strcmp ( global -> codec -> name, ""vp9"" ) == 0 ) { ctrl_args = vp9_args ; ctrl_args_map = vp9_arg_ctrl_map ; # endif # if CONFIG_VP9_ENCODER else if ( strcmp ( global -> codec -> name, ""vp9"" ) == 0 ) { ctrl_args = vp9_args ; ctrl_args_map = vp9_arg_ctrl_map ; # endif } else if ( strcmp ( * argj, ""--"" ) ) { eos_mark_found = 1 ; continue ; } else if (! strcmp ( * argj, ""--"" ) ) { eos_mark_found = 1 ; continue ; } else if (! strcmp ( * argj, ""--"" ) ) { eos_mark_found = 1 ; continue ; } else if (! strcmp ( * argj, ""--"" ) ) { eos_mark_",0
155,"<S2SV_ModStart> ""server_input_global_request: <S2SV_blank> tcpip-forward <S2SV_blank> listen <S2SV_blank> %s <S2SV_blank> port <S2SV_blank> %d"", <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
156,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
157,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) { LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; return ( DestroyImageList ( image ) ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) { LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; return ( DestroyImageList ( image ) ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename )",0
158,"<S2SV_ModStart> goto errout ; } if ( ( gr -> gr_ctx. value = mem_alloc ( sizeof ( gss_union_ctx_id_desc ) ) ) == NULL ) { <S2SV_ModEnd> fprintf ( stderr <S2SV_ModStart> ""svcauth_gss_accept_sec_context"", gr -> gr_major, gr -> gr_minor, rqst -> rq_xprt ) ; gd -> ctx = GSS_C_NO_CONTEXT ; goto errout ; } if ( ( gr -> gr_ctx. value = mem_alloc ( sizeof ( gss_union_ctx_id_desc ) ) ) == NULL ) { fprintf ( stderr, ""svcauth_gss_accept_sec_context"", gr -> gr_major, gr -> gr_minor, rqst -> rq_xprt ) ; gd -> ctx = GSS_C_NO_CONTEXT ; goto errout ; } if ( ( gr -> gr_ctx. value = mem_alloc ( sizeof ( gss_union_ctx_id_desc ) ) ) == NULL ) { fprintf ( stderr, ""svcauth_gss_accept_sec_context"", gr -> gr_major, gr -> gr",0
159,"<S2SV_ModStart> = 0 ; unsigned long data_size ; <S2SV_ModStart> out ; } data_size = sizeof ( EXT4_I ( inode ) -> i_data ) ; <S2SV_ModStart> goto out ; neh = ext_block_hdr ( bh ) ; if ( ext_depth ( inode ) ) neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block_idx ( inode, 0 ) ) ; else neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block ( inode, 0 ) ) ; neh -> eh_magic = EXT4_EXT_MAGIC ; ext4_extent_block_csum_set ( inode, neh ) ; if ( ext_depth ( inode ) ) neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block_idx ( inode, 0 ) ) ; else neh -> eh_max = cpu_to_le16 ( ext4_ext_space_block ( inode, 0 ) ) ; neh -> eh_magic = EXT4_EXT_MAGIC ; ext4_extent_block_csum_set ( inode, neh",0
160,"<S2SV_ModStart> } if ( <S2SV_ModEnd> verify_checks ( c <S2SV_ModStart> preverify_ok, callback_ctx ) ) { SSL_SESSION * sess = SSL_get1_session ( c -> ssl ) ; if (! sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, NULL ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } } if ( sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, NULL ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } } else { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, NULL ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data"" ) ; return 0 ; } if ( sess ) { int ok = SSL_SESSION_set_ex_data ( sess, index_session_authenticated, NULL ) ; if (! ok ) { sslerror ( ""SSL_SESSION_set_ex_data""",0
161,"<S2SV_ModStart> ; int ret ; if ( kuid_has_mapping ( parent_ns, owner ) || kgid_has_mapping ( parent_ns, group ) ) return - EPERM",0
162,"<S2SV_ModStart> ( memcmp ( cmac, computed_cmac, AT91_AES_BLOCK_SIZE_BYTE ) ) goto exit ; if ( at91_aes_cbc ( data_length, data, data, 0, key_size, cipher_key, iv ) ) goto exit ; rc = - 1 ; } else { if ( at91_aes_cmac ( data_length, data, data, computed_cmac, key_size, cipher_key ) ) goto exit ; fixed_length = at91_aes_roundup ( data_length ) ; cmac = ( const unsigned int * ) ( ( char * ) data + fixed_length ) ; if ( memcmp ( cmac, computed_cmac, AT91_AES_BLOCK_SIZE_BYTE ) ) goto exit ; } if ( at91_aes_cbc ( data_length, data, data, data, 0, key_size, cipher_key, iv ) ) goto exit ; rc = 0 ;",0
163,"<S2SV_ModStart> } if ( c -> nreslevels > JPEG2000_MAX_RESLEVELS ) { av_log ( s -> avctx, AV_LOG_ERROR, ""nreslevels <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> invalid\\n"", c -> nreslevels ) ; return AVERROR_INVALIDDATA ; } c -> nreslevels2decode = c -> nreslevels - s -> reduction_factor ; c -> log2_cblk_width = ( bytestream2_get_byteu ( & s -> g ) & 15 ) + 2 ; c -> log2_cblk_height = ( bytestream2_get_byteu ( & s -> g ) & 15 ) + 2 ; if ( c -> log2_cblk_width + c -> log2_cblk_height > 12 ) { avpriv_request_sample ( s -> avctx, ""cblk <S2SV_blank> size <S2SV_blank> > <S2SV_blank> 64"" ) ; return AVERROR_PATCHWELCOME ; } if ( c -> log2_cblk_width + c -> log2_cblk_height > 12 ) { avpriv_request_sample ( s -> avctx",0
164,"<S2SV_ModStart> CVAR_ARCHIVE | CVAR_LATCH | CVAR_PROTECTED <S2SV_ModStart> CVAR_LATCH ) ; s_alInputDevice = Cvar_Get ( ""s_alInputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alOutputDevice = Cvar_Get ( ""s_alOutputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alOutputDevice = Cvar_Get ( ""s_alOutputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alOutputDevice = Cvar_Get ( ""s_alOutputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alOutputDevice = Cvar_Get ( ""s_alOutputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alOutputDevice = Cvar_Get ( ""s_alOutputDevice"", """", CVAR_ARCHIVE | CVAR_LATCH ) ; s_alOutputDevice = Cvar_Get ( ""s_alOutputDevice"", """", CVAR_",0
165,"<S2SV_ModStart> ts_status ; bool is_drop_n_account = false ; <S2SV_ModStart> is_drop_n_account = true ; if ( skb -> len < TPACKET_ALIGN ( sizeof ( * h. h2 ) ) || skb -> len < TPACKET_ALIGN ( sizeof ( * h. h3 ) ) ) goto drop ; if ( skb -> len < TPACKET_ALIGN ( sizeof ( * h. h2 ) ) ) goto drop_n_restore ; if ( skb -> pkt_type == PACKET_OUTGOING ) { skb_pull ( skb, skb -> data - skb_mac_header ( skb ) ) ; status |= TP_STATUS_CSUMNOTREADY ; } else if ( skb -> pkt_type == PACKET_OUTGOING && skb -> ip_summed == CHECKSUM_PARTIAL ) status |= TP_STATUS_CSUMNOTREADY ; else if ( skb -> ip_summed == CHECKSUM_COMPLETE ) status |= TP_STATUS_CSUM_VALID ; else if ( skb -> ip_summed == CHECKSUM_UNNECESSARY ) status |= TP_STATUS_CSUM",0
166,"<S2SV_ModStart> SCTP_STATE_ESTABLISHED ) { list_for_each_entry ( trans, & new -> peer. transport_addr_list, transports ) { if (! sctp_assoc_lookup_paddr ( trans, & trans -> ipaddr ) ) sctp_assoc_rm_peer ( asoc, & trans -> ipaddr, GFP_ATOMIC, trans -> state ) ) sctp_assoc_rm_peer ( asoc, trans ) ; } else { list_for_each_entry ( trans, & trans -> ipaddr. transport_addr_list, transports ) { if (! sctp_assoc_lookup_paddr ( trans, & trans -> ipaddr ) ) sctp_assoc_rm_peer ( asoc, & trans -> ipaddr, GFP_ATOMIC, trans -> state ) ) sctp_assoc_add_peer ( asoc, & trans -> ipaddr, GFP_ATOMIC, trans -> state ) ; } else { list_for_each_entry ( trans, & trans -> ipaddr. transport_addr_list, transports ) { if (! sctp_assoc_lookup_paddr ( trans,",0
167,<S2SV_ModStart> return false ; if ( len < ndp_msg_type_info ( msg_type ) -> raw_struct_size ) return false ;,0
168,"<S2SV_ModStart> int on_exec, <S2SV_ModEnd> char * lsm_label <S2SV_ModStart> lsm_label ) { <S2SV_ModEnd> int labelfd = <S2SV_ModStart> ( name, ""None"" ) == 0 ) goto out ; if ( strcmp ( name, ""AppArmor"" ) == 0 ) on_exec = 0 ; if ( on_exec ) { labelfd = openat ( procfd, ""self/attr/exec"", O_RDWR ) ; } else { labelfd = openat ( procfd, ""self/attr/current"", O_RDWR ) ; } if ( labelfd < 0 ) { SYSERROR ( ""Unable <S2SV_blank> to <S2SV_blank> open <S2SV_blank> LSM <S2SV_blank> label"" ) ; ret = - 1 ; goto out ; } size = sprintf ( command, ""changeprofile <S2SV_blank> %s"", lsm_label ) ; if ( size < 0 ) { SYSERROR ( ""Failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> apparmor <S2SV_blank> profile"" ) ; ret = - 1 ; goto out ; } size = sprintf ( command, ""changeprofile <S2SV_blank> %s"", lsm_label ) ; if ( size < 0 ) { SYSERROR ( ""Failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> apparmor <S2SV_blank> profile"" )",0
169,<S2SV_ModStart> ( OPJ_UINT32 ) ( <S2SV_ModEnd> ( OPJ_UINT32 ) <S2SV_ModStart> ( OPJ_UINT32 ) ( <S2SV_ModEnd> ( OPJ_UINT32 ) <S2SV_ModStart> ( OPJ_UINT32 ) ( <S2SV_ModEnd> ( OPJ_UINT32 ) <S2SV_ModStart> ( OPJ_UINT32 ) ( <S2SV_ModEnd> ( OPJ_UINT32 ) <S2SV_ModStart> ( OPJ_UINT32 ) ( <S2SV_ModEnd> ( OPJ_UINT32 ) <S2SV_ModStart> ( OPJ_UINT32 ) ( <S2SV_ModEnd> ( OPJ_UINT32 ) <S2SV_ModStart> ( OPJ_UINT32 ) ( <S2SV_ModEnd> ( OPJ_UINT32 ) <S2SV_ModStart> ( OPJ_UINT32 ) ( <S2SV_ModEnd> ( OPJ_UINT32 ) <S2SV_ModStart> ( OPJ_UINT32 ) ( <S2SV_ModEnd> ( OPJ_UINT32 ) <S2SV_ModStart> ( OPJ_UINT32 ) ( <S2SV_ModEnd> ( OPJ_UINT32 ) <S2SV_ModStart> ( OPJ_UINT32 ) ( <S2SV_ModEnd> ( OPJ_UINT32 ) <S2SV_ModStart> ( OPJ_UINT32 ) ( <S2SV_ModEnd> ( OPJ_UINT32 ) <S2SV_ModStart> ( OPJ_UINT32 ) ( <S2SV_ModEnd> ( OPJ_UINT32 ),0
170,"<S2SV_ModStart> pt_regs * regs <S2SV_ModEnd> ) { u64 <S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
171,"<S2SV_ModStart> { # ifdef DISABLE_RC_LONG_TERM_MEM uint64_t bits_used = cpi -> rc. this_frame_target ; # else const uint64_t bits_used = cpi -> rc. projected_frame_size ; # endif <S2SV_ModStart> ; if ( cpi -> common. frame_type == KEY_FRAME ) { cpi -> twopass. bits_left -= bits_used ; cpi -> twopass. bits_left = MAX ( cpi -> twopass. bits_left, 0 ) ; } else { cpi -> twopass. bits_left -= bits_used ; cpi -> twopass. bits_left = MAX ( cpi -> twopass. bits_left, 0 ) ; } if ( cpi -> common. frame_type == KEY_FRAME ) { cpi -> twopass. kf_group_bits += cpi -> rc. this_frame_target - bits_used ; } else { cpi -> twopass. kf_group_bits -= bits_used ; cpi -> twopass. gf_group_bits -= bits_used ; cpi -> twopass. gf_",0
172,"<S2SV_ModStart> charlen ; } curqlevel = tmpql = ( lquery_level * ) palloc0 ( ITEMSIZE * num ) ; ptr = buf ; while ( * ptr ) { charlen = pg_mblen ( ptr ) ; if ( charlen == 1 ) { if ( t_iseq ( ptr, '!' ) ) { GETVAR ( curqlevel ) = lptr = ( nodeitem * ) palloc0 ( sizeof ( nodeitem ) * ( numOR + 1 ) ) ; lptr -> start = ptr + 1 ; state = LQPRS_WAITOPEN ; } else if ( charlen == 1 && t_iseq ( ptr, '*' ) ) { GETVAR ( curqlevel ) = lptr = ( nodeitem * ) palloc0 ( sizeof ( nodeitem ) * ( numOR + 1 ) ) ; lptr -> start = ptr + 1 ; state = LQPRS_WAITDELIM ; curqlevel -> flag |= LQL_NOT ; hasnot = true ; } else if ( charlen == 1 && t_iseq ( ptr, '!' ) ) { GETVAR ( curqlevel ) = lptr = ( nodeitem * ) palloc0 ( sizeof",0
173,"<S2SV_ModStart> header, struct mb2_cache_entry <S2SV_ModEnd> * pce ) <S2SV_ModStart> h_hash ) ; <S2SV_ModEnd> struct mb2_cache * <S2SV_ModStart> ; struct mb2_cache_entry <S2SV_ModEnd> * ce ; <S2SV_ModStart> again : ce = mb2_cache_entry_find_first ( ext4_mb_cache, inode -> i_sb -> s_bdev, hash ) ; while ( ce ) { struct buffer_head * bh ; if (! bh ) { EXT4_ERROR_INODE ( inode, ""block <S2SV_blank> %lu <S2SV_blank> read <S2SV_blank> error"", ( unsigned long ) ce -> e_block ) ; } else if ( le32_to_cpu ( BHDR ( bh ) -> h_refcount ) >= EXT4_XATTR_REFCOUNT_MAX ) { ea_idebug ( inode, ""block <S2SV_blank> %lu <S2SV_blank> refcount <S2SV_blank> %d>=%d"", ( unsigned long ) ce -> e_block, le32_to_cpu ( BHDR ( bh ) -> h_refcount ), EXT4_XATTR_REFCOUNT_MAX ) ; } else if ( le32_to_cpu ( BHDR ( bh ) -> h_refcount ) >= EXT",0
174,"<S2SV_ModStart> data_offset ) { <S2SV_ModEnd> int pkt_len ; <S2SV_ModStart> offset ; pkt_len = parse_cosine_rec_hdr ( & wth -> phdr, line, err, err_info ) ; if ( pkt_len == - 1 ) return FALSE ; <S2SV_ModStart> ; return parse_cosine_hex_dump <S2SV_ModEnd> ( wth -> <S2SV_ModStart>, pkt_len, <S2SV_ModEnd> wth -> frame_buffer",0
175,"<S2SV_ModStart> ; if ( line_end == NULL ) { error = add_push_report_pkt ( push, NULL ) ; if ( error!= GIT_ITEROVER ) { error = add_push_report_pkt ( push, NULL ) ; if ( error!= GIT_ITEROVER ) { error = add_push_report_pkt ( push, NULL ) ; if ( error!= GIT_ITEROVER ) { error = add_push_report_pkt ( push, NULL ) ; if ( error!= GIT_ITEROVER ) { error = add_push_report_pkt ( push, NULL ) ; if ( error!= GIT_ITEROVER ) { error = add_push_report_pkt ( push, NULL ) ; if ( error!= GIT_ITEROVER ) { error = add_push_report_pkt ( push, NULL ) ; if ( error!= GIT_ITEROVER ) { error = add_push_report_pkt ( push, NULL ) ; if ( error!= GIT_ITEROVER ) { error = add_push_report_pkt ( push, NULL ) ; if ( error!= GIT_ITEROVER ) {",0
176,<S2SV_ModStart> ) ) { SSL <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
177,"<S2SV_ModStart> size_t ldblk ; if ( ldblk > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( ldblk > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( ldblk > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( ldblk > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( ldblk > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( ldblk > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( ldblk > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( ldblk > GetBlobSize ( image ) )",0
178,"<S2SV_ModStart> if ( copy_from_user ( & hdr, ( void * ) arg, hdr. size_in ) ) { ret = - EFAULT ; goto out ; } if ( hdr. size_in > size ) { ret = - EINVAL ; goto out ; } if ( hdr. size_in < size ) memset ( buf + hdr. size_in, 0, size - hdr. size_in ) ; ret = - EFAULT ; goto out ; } if ( hdr. size_out < size ) { ret = - EINVAL ; goto out ; } if ( hdr. size_out < size ) memset ( buf + hdr. size_out, 0, size - hdr. size_out ) ) { ret = - EINVAL ; goto out ; } if ( hdr. size_out < size ) memset ( buf + hdr. size_out, 0, size - hdr. size_out ) ) { ret = - EINVAL ; goto out ; } if ( hdr. size_out < size ) memset ( buf + hdr. size_out, 0, size - hdr. size_out ) ) { ret = - EINVAL ; goto out ; }",0
179,"<S2SV_ModStart> int m ; jpc_fix_t * buf ; jpc_fix_t * srcptr ; jpc_fix_t * dstptr2 ; register jpc_fix_t * srcptr2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * dstptr2 ; register jpc_fix_t * srcptr2 ; jpc_fix_t * srcptr2 ; jpc_fix_t * srcptr2 ; jas_alloc2 ( bufsize, sizeof ( jpc_fix_t ) ) ; if ( buf = jas_alloc2 ( bufsize, sizeof ( jpc_fix_t ) ) ) { abort ( ) ; } } if ( numrows < 2 ) { hstartcol = ( numrows + 1 - parity ) >> 1 ; m = numrows - hstartcol ; n = m ; dstptr = buf ; srcptr = & a [ ( 1 - parity ) * stride ] ; while ( n -- > 0 ) { dstptr2 = dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i )",0
180,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; return ( Destroy",0
181,"<S2SV_ModStart> char magick [ 12 <S2SV_ModEnd> ] ; Image <S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> columns = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ; image -> rows = ReadBlobLSBShort ( image ) ;",0
182,"<S2SV_ModStart> DQUOT_LIMITS_ENABLED ) ; if ( sb -> s_flags & MS_RDONLY ) { struct ext2_super_block * es = sbi -> s_es ; spin_lock ( & sbi -> s_lock ) ; es -> s_state = cpu_to_le16 ( sbi -> s_mount_state ) ; ext2_sync_super ( sb, es, 1 ) ; } db_count = sbi -> s_gdb_count ; for ( i = 0 ; i < db_count ; i ++ ) if ( sbi -> s_group_desc [ i ] ) brelse ( sbi -> s_group_desc [ i ] ) ; for ( i = 0 ; i < db_count ; i ++ ) if ( sbi -> s_group_desc [ i ] ) brelse ( sbi -> s_group_desc [ i ] ) brelse ( sbi -> s_debts [ i ] ) ; for ( i = 0 ; i < db_count ; i ++ ) if ( sbi -> s_group_desc [ i ] ) brelse ( sbi -> s_group_",0
183,"<S2SV_ModStart> err_free_buf ; } dev_dbg ( & usbinterface -> dev, ""gtco <S2SV_blank> # <S2SV_blank> interfaces: <S2SV_blank> %d\\n"", usbinterface -> num_altsetting ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""gtco <S2SV_blank> # <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> num_altsetting ) ; dev_dbg ( & usbinterface -> dev, ""interface <S2SV_blank> class: <S2SV_blank> <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bInterfaceClass ) ; dev_dbg ( & usbinterface -> dev, ""num <S2SV_blank> endpoints: <S2SV_blank> %d\\n"", usbinterface -> cur_altsetting -> desc. bNumEndpoints ) ; dev_dbg ( & usbinterface -> dev",0
184,"<S2SV_ModStart> ; if ( asprintf ( & fname, ""%s/%d-netmap"", RUN_FIREJAIL_NETWORK_DIR, ( int ) pid ) == - 1 ) { fprintf ( stderr, ""Error: <S2SV_blank> cannot <S2SV_blank> read <S2SV_blank> network <S2SV_blank> map <S2SV_blank> file <S2SV_blank> %s\\n"", fname ) ; exit ( 1 ) ; } if ( asprintf ( & fname, ""%s/%d-netmap"", RUN_FIREJAIL_NETWORK_DIR, ( int ) pid ) == - 1 ) { fprintf ( stderr, ""Error: <S2SV_blank> cannot <S2SV_blank> read <S2SV_blank> network <S2SV_blank> map <S2SV_blank> file <S2SV_blank> %s\\n"", fname ) ; exit ( 1 ) ; } if ( asprintf ( & fname, ""%s/%d-netmap"", RUN_FIREJAIL_NETWORK_DIR, ( int ) pid ) == - 1 ) { fprintf ( stderr, ""Error: <S2SV_blank> cannot <S2SV_blank> read <S2SV_blank> network <S2SV_blank> map <S2SV_blank> file <S2SV_blank> %s\\n"", fname ) ; exit ( 1 ) ; } if ( asprintf ( & fname, ""%s/%d-netmap"", RUN_FIREJAIL_NETWORK_DIR, ( int ) pid ) == - 1",0
185,<S2SV_ModStart> node ) { if ( node -> nd_item. ci_parent ) { <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
186,"<S2SV_ModStart> * stateid, fmode_t fmode <S2SV_ModEnd> ) { write_seqlock <S2SV_ModStart> seqlock ) ; fmode = fmode & ( FMODE_READ | FMODE_WRITE ) <S2SV_ModEnd> ; write_sequnlock (",0
187,<S2SV_ModStart> ; v = avio_rb32 ( pb ) ; switch ( v ) { case 1 : vst -> codecpar -> format = AV_PIX_FMT_ARGB ; vst -> codecpar -> codec_id = AV_CODEC_ID_RAWVIDEO ; break ; case 2 : vst -> codecpar -> format = AV_PIX_FMT_ARGB ; vst -> codecpar -> codec_id = AV_CODEC_ID_MVC1 ; break ; case 3 : vst -> codecpar -> format = AV_PIX_FMT_ARGB ; vst -> codecpar -> codec_id = AV_CODEC_ID_MVC1 ; break ; case 4 : vst -> codecpar -> format = AV_PIX_FMT_ARGB ; vst -> codecpar -> format = AV_PIX_FMT_ARGB ; vst -> codecpar -> format = AV_PIX_FMT_ARGB ; break ; default : vst -> codecpar -> format = AV_PIX_FMT_ARGB ; vst -> codecpar -> codec_id = AV_CODEC_ID_RAWVIDEO ; break ; },0
188,<S2SV_ModStart> ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) goto out ; nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) goto out ; nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) goto out ; nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) goto out ; nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) goto out ;,0
189,<S2SV_ModStart> protostats ) ; <S2SV_ModEnd> filegen_register ( statsdir <S2SV_ModStart> protostats ) ; <S2SV_ModEnd> filegen_register ( statsdir <S2SV_ModStart> cryptostats ) ; <S2SV_ModEnd> step_callback = & <S2SV_ModStart> timingstats ) ; <S2SV_ModEnd> atexit ( &,0
190,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart>, dir ) ) == NULL ) { ulckpwdf ( ) ; err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( tmpname == NULL ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> tmpname, dir, TEMP_FAILURE_RETRY ( TEMP_FAILURE_RETRY ( TEMP_FAILURE_RETRY ( TEMP_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ) ; } if ( TEMP_FAILURE_RETRY ( TEMP_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } copyfile ( lockfd, fileno ( fd ) ) ; tmp_file = tmpname ; return fd ; }",0
191,"<S2SV_ModStart> prev ) ; if ( mnt -> mnt_flags & MNT_NOATTACH ) { attach_shadowed ( mnt, parent, shadows ) ; mnt -> mnt_flags |= MNT_NOATTACH ; } else if ( mnt -> mnt_flags & MNT_NOATTACH ) { attach_shadowed ( mnt, parent, shadows ) ; mnt -> mnt_flags &= ~ MNT_NOATTACH ; if ( n -> mnt_flags & MNT_NOATTACH ) { attach_shadowed ( mnt, parent, shadows ) ; mnt -> mnt_flags &= ~ MNT_NOATTACH ; } else if ( mnt -> mnt_flags & MNT_NOATTACH ) { attach_shadowed ( mnt, parent, shadows ) ; mnt -> mnt_flags &= ~ MNT_NOATTACH ; if ( n -> mnt_flags & MNT_NOATTACH ) { attach_shadowed ( mnt, parent, shadows ) ; mnt -> mnt_flags &= ~ MNT_NOATTACH",0
192,"<S2SV_ModStart> next ) ; if ( unlikely ( next -> es | prev -> es ) ) loadsegment ( es, next -> es ) ; if ( unlikely ( next -> ds | prev -> ds ) ) loadsegment ( ds, next -> ds ) ; if ( unlikely ( next -> fs | prev -> fs ) ) loadsegment ( fs, fsindex ) ; savesegment ( gs, gsindex ) ; arch_begin_context_switch ( next_p ) ; if ( unlikely ( next -> fs ) wrmsrl ( MSR_FS_BASE, next -> fs ) ; prev -> fsindex = fsindex ; if ( unlikely ( gsindex | next -> gsindex | prev -> gs ) ) { load_gs_index ( next -> gsindex ) ; if ( gsindex ) prev -> gs = 0 ; } if ( next -> gs ) wrmsrl ( MSR_KERNEL_GS_BASE, next -> gs ) ; prev -> gsindex = gsindex ; if ( next -> gs ) wrmsrl ( MSR_KERNEL_GS_BASE, next -> gs ) ; prev -> gsindex = gsindex ; if ( next -> gs ) wrmsrl ( MSR_KERNEL_GS",0
193,<S2SV_ModStart> dd ) ; <S2SV_ModEnd> update_gui_state_from_problem_data ( 0,0
194,"<S2SV_ModStart> = value ; if ( ps_codec -> i4_pps_done ) return IHEVCD_UNSUPPORTED_PPS_ID ; else ps_codec -> i4_pps_id = CLIP3 ( ps_pps -> i1_pps_id, 0, MAX_PPS_CNT - 2 ) ; if ( ps_codec -> i4_sps_done ) return IHEVCD_UNSUPPORTED_PPS_ID ; else ps_codec -> i1_pps_id = CLIP3 ( ps_pps -> i1_pps_id, 0, MAX_SPS_CNT - 2 ) ; if ( ps_codec -> i4_pps_done ) return IHEVCD_UNSUPPORTED_PPS_ID ; else ps_codec -> i4_pps_id = CLIP3 ( ps_pps -> i1_pps_id, 0, MAX_SPS_CNT - 2 ) ; ps_codec -> i4_sps_id = CLIP3 ( ps_pps -> i1_sps_id, 0, MAX_SPS_C",0
195,<S2SV_ModStart> << NM_VECTOR ) | ( 1u << DB_VECTOR ) | ( 1u << BP_VECTOR ) ; if ( ( vcpu -> guest_debug & ( KVM_GUESTDBG_ENABLE | KVM_GUESTDBG_USE_SW_BP ) ) == ( KVM_GUESTDBG_ENABLE | KVM_GUESTDBG_USE_SW_BP ) ) eb |= 1u << BP_VECTOR ; if ( ( vcpu -> guest_debug & ( KVM_GUESTDBG_ENABLE | KVM_GUESTDBG_USE_SW_BP ) ) == ( KVM_GUESTDBG_ENABLE | KVM_GUESTDBG_USE_SW_BP ) ) eb |= 1u << PF_VECTOR ; if ( enable_ept ) eb &= ~ ( 1u << UD_VECTOR ) ; if ( vcpu -> fpu_active ) eb &= ~ ( 1u << MC_VECTOR ) ; if ( vcpu -> fpu_active ) eb &= ~ ( 1u << NM_VECTOR ) ;,0
196,"<S2SV_ModStart> sfsname ) { <S2SV_ModEnd> char temp [ <S2SV_ModStart> NFSX_V3FHMAX + 1 ] ; temp [ sizeof ( temp ) - 1 ] = '\\0' ; spacep = strchr ( temp,'<S2SV_blank>') ; if ( spacep ) * spacep = '\\0' ; ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", temp, fsid. Fsid_dev. Major, fsid. Fsid_dev. Minor ) ) ; if ( spacep ) * spacep = '\\0' ; ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", temp, ino ) ) ; } else { ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", fsid. Fsid_dev. Major, fsid. Fsid_dev. Minor ) ) ; } if ( sfsname ) { static char temp [ NFSX_V3FHMAX + 1 ] ; temp [ sizeof ( temp ) - 1 ] = '\\0' ; ND_PRINT ( ( ndo, "" <S2SV_blank> fh <S2SV_blank> %d,%d/"", temp, ino ) ) ;",0
197,"<S2SV_ModStart> int transhdrlen, unsigned <S2SV_ModStart> ; ipv6_select_ident ( & fhdr, skb_shinfo ( skb ) -> ip6_frag_id ) ; skb_shinfo ( skb ) -> ip6_frag_id = fhdr. identification ; skb_shinfo ( skb ) -> ip6_frag_type = fhdr. frag_type ; skb_shinfo ( skb ) -> ip6_frag_id = fhdr. identification ; skb_shinfo ( skb ) -> ip6_frag_id = fhdr. identification ; skb_shinfo ( skb ) -> ip6_frag_id = fhdr. identification ; skb_shinfo ( skb ) -> ip6_frag_id = fhdr. identification ; skb_shinfo ( skb ) -> ip6_frag_id = fhdr. frag_id ;",0
198,"<S2SV_ModStart> res ) return res ; res = register_netdevice ( hsr_dev ) ; if ( res ) goto fail ; res = hsr_create_self_node ( & hsr -> self_node_db, hsr_dev -> dev_addr, hsr_dev -> dev_addr, hsr_dev -> dev_addr, hsr_dev -> dev_addr ) ; if ( res < 0 ) goto fail ; res = hsr_add_port ( hsr, hsr_dev, HSR_PT_MASTER ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, hsr_dev, HSR_PT_SLAVE_A ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, hsr_dev, HSR_PT_SLAVE_B ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, hsr_dev, HSR_PT_SLAVE_C ) ; if ( res ) goto fail ; res = hsr_add_port ( hsr, hsr_dev, HSR_PT",0
199,"<S2SV_ModStart> n ] ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> n ] ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> n ] ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> n ] ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> n ] ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; } <S2SV_ModStart> n ] ; if ( n == ( size_t ) 0U ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) { die ( 421, LOG_WARNING, MSG_LINE_TOO_LONG ) ; }",0
200,"<S2SV_ModStart> vp9_setup_dst_planes ( MACROBLOCKD * xd <S2SV_ModEnd>, const YV12_BUFFER_CONFIG <S2SV_ModStart> int mi_col ) { const uint8_t * const buffers [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; int i ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> dst, buffers [ i ], strides [ i ], mi_row, mi_col, NULL, pd -> subsampling_x, pd -> subsampling_y, pd -> subsampling_x, pd -> subsampling_y ) ; }",0
201,<S2SV_ModStart> * p ++ ) ; if ( args -> count!= args -> count ) return 0 ; hdr = ( void * ) p - head -> iov_base ; dlen = head -> iov_len + rqstp -> rq_arg. page_len + tail -> iov_len - hdr ; if ( dlen < XDR_QUADLEN ( len ) * 4 ) return 0 ; if ( hdr + dlen > XDR_QUADLEN ( len ) * 4 ) return 0 ; if ( dlen > XDR_QUADLEN ( args -> count ) { args -> count = max_blocksize ; len = max_blocksize ; },0
202,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static inline int <S2SV_ModEnd> assign_eip_near ( struct <S2SV_ModStart> ) { switch ( ctxt -> op_bytes ) { case 1 : ctxt -> _eip = dst ; break ; case 2 : ctxt -> _eip = dst ; break ; case 4 : ctxt -> _eip = dst ; break ; default : WARN ( 1, ""unsupported <S2SV_blank> eip <S2SV_blank> assignment <S2SV_blank> size\\n"" ) ; } return 1 ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
203,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args )",1
204,<S2SV_ModStart> ; remaining = <S2SV_ModEnd> tvb_captured_length_remaining ( tvb,0
205,<S2SV_ModStart> == READ ) { mlog_ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
206,<S2SV_ModStart> return rc ; <S2SV_ModEnd> copied = skb,1
207,"<S2SV_ModStart> ( fscanf ( <S2SV_ModEnd> f, ""%79s <S2SV_blank> %[^\\n]\\n"" <S2SV_ModStart>, def, strparm ) == 2 ) { if ( strparm [ 0 ] == \'""\' ) { isstring = true ; len = strlen ( strparm ) ; strcpy ( newstring, strparm + 1 ) ; } else if ( strparm [ 0 ] == '0' && strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else if ( strparm [ 0 ] == '0' && strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else if ( strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else if ( strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"", & parm ) ; else if ( strparm [ 1 ] == 'x' ) sscanf ( strparm + 2, ""%x"",",0
208,"<S2SV_ModStart> + 1 ) ; perf_event_update_userpage ( event ) ; <S2SV_ModStart> val < 0 ) { perf_event_update_userpage ( event ) ; write_mmcr0 ( cpuhw, cpuhw -> mmcr [ 0 ] ) ; nmi = perf_intr_is_nmi ( regs ) ; if ( nmi ) nmi_exit ( ) ; } for ( i = 0 ; i < ppmu -> n_counter ; ++ i ) { if ( is_limited_pmc ( i + 1 ) ) continue ; val = read_pmc ( i + 1 ) ; if ( ( int ) val < 0 ) { write_mmcr0 ( cpuhw, cpuhw -> mmcr [ 0 ] ) ; nmi = perf_intr_is_nmi ( regs ) ; if ( nmi ) nmi_exit ( ) ; } for ( i = 0 ; i < ppmu -> n_counter ; ++ i ) { if ( is_limited_pmc ( i + 1 ) ) continue ; val = read_pmc ( i + 1 ) ; if ( ( int ) val < 0 ) write_pmc ( i + 1",0
209,"<S2SV_ModStart> = len ; if ( len > ( ssize_t ) * avail ) len = get_line_size ( * b, * avail, nl ) ; if ( len > ( ssize_t ) * avail ) { * nl = 0 ; len = get_line_size ( * b, * avail, nl ) ; if ( len > ( ssize_t ) * avail ) len = get_line_size ( * b, * avail, nl ) ; if ( len >= 0 ) len += tested ; } else { if ( len > ( ssize_t ) * avail ) len = get_line_size ( * b, * avail, nl ) ; if ( len >= ( ssize_t ) * avail ) len = get_line_size ( * b, * avail, nl ) ; if ( len >= ( ssize_t ) * avail ) len = get_line_size ( * b, * avail, nl ) ; if ( len >= 0 ) len += tested ; }",0
210,"<S2SV_ModStart> n ) { <S2SV_ModEnd> int all_whitespace = <S2SV_ModStart> ; int kind <S2SV_ModEnd> ; int data <S2SV_ModStart> ; mod_ty mod <S2SV_ModEnd> ; PyObject * <S2SV_ModStart> * str ; PyObject * o, * fstring_name ; Py_ssize_t len <S2SV_ModEnd> ; Py_ssize_t i <S2SV_ModStart> expr_end == ':' ) ; all_whitespace = 1 ; kind = PyUnicode_KIND ( o ) ; data = PyUnicode_DATA ( o ) ; for ( i = 0 ; i < len ; i ++ ) { if (! PyUnicode_ISSPACE ( PyUnicode_READ ( kind, data, i ) ) ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ; } len = expr_end - expr_start ; str = PyMem_RawMalloc ( len + 3 ) ; if ( str == NULL ) { ast_error ( c, n, ""f-string: <S2SV_blank> empty <S2SV_blank> expression <S2SV_blank> not <S2SV_blank> allowed"" ) ; return NULL ; } str [ 0 ] = '(' ; memcpy ( str + 1, expr_start, len ) ; str [ 1 ] = ')' ; memcpy ( str",0
211,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
212,<S2SV_ModStart> string ) { <S2SV_ModEnd> while ( c,0
213,"<S2SV_ModStart> 0 ) { if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) set_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ; else set_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ; }",0
214,"<S2SV_ModStart> len ) ; if (! net_read_exact ( s, & nh, sizeof ( nh ) ) ) printf ( ""PLEN <S2SV_blank> %d <S2SV_blank> type <S2SV_blank> %d <S2SV_blank> len <S2SV_blank> %d\\n"", plen, nh. nh_type, * len ) ; if (! net_read_exact ( s, & nh, sizeof ( nh ) ) ) printf ( ""PLEN <S2SV_blank> %d <S2SV_blank> type <S2SV_blank> %d <S2SV_blank> len <S2SV_blank> %d\\n"", nh. nh_len, nh. nh_type, * len ) ; if (! net_read_exact ( s, & nh, sizeof ( nh ) ) ) printf ( ""PLEN <S2SV_blank> %d <S2SV_blank> type <S2SV_blank> %d <S2SV_blank> len <S2SV_blank> %d\\n"", plen, nh. nh_type, * len ) ; if (! net_read_exact ( s, & nh, sizeof ( nh ) ) ) printf ( ""PLEN <S2SV_blank> %d <S2SV_blank> type <S2SV_blank> %d <S2SV_blank> len <S2SV_blank> %d\\n"", nh. nh_len, nh. nh_type ) ; if (! net_read_exact ( s, & nh, sizeof ( nh ) ) ) printf ( ""PLEN <S2SV_blank> %",0
215,<S2SV_ModStart> ( <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
216,"<S2SV_ModStart> - EINVAL ; int datagrams ; <S2SV_ModStart> NULL ) ; datagrams = __sys_recvmmsg ( fd, ( struct mmsghdr __user * ) mmsg, vlen, flags | MSG_CMSG_COMPAT, & ktspec ) ; if ( datagrams > 0 && get_compat_timespec ( & ktspec, timeout ) ) return - EFAULT ; datagrams = __sys_recvmmsg ( fd, ( struct mmsghdr __user * ) mmsg, vlen, flags | MSG_CMSG_COMPAT, & ktspec ) ; datagrams = __sys_recvmmsg ( fd, ( struct mmsghdr __user * ) mmsg, vlen, flags | MSG_CMSG_COMPAT, & ktspec ) ; if ( datagrams > 0 && put_compat_timespec ( & ktspec, timeout ) ) return - EFAULT ; datagrams = __sys_recvmmsg ( fd, ( struct mmsghdr __user * ) mmsg, vlen, flags | MSG_CMSG_COMPAT, & ktspec ) ; if ( datagrams > 0 && <S2SV_ModEnd> put_",0
217,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; return ( Destroy",0
218,"<S2SV_ModStart> ) ; netdev_tx_t <S2SV_ModEnd> ret ; assert <S2SV_ModStart> q_num ) ; netif_stop_queue ( ndev ) ; <S2SV_ModStart> ret = hns_nic_net_xmit_hw ( ndev, skb, & tx_ring_data ( priv, skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats. tx_bytes += skb -> len ; } if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats. tx_packets ++ ; } else { ret = hns_nic_net_xmit_hw ( ndev, skb, & tx_ring_data ( priv, skb -> queue_mapping ) ) ; if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats. tx_bytes += skb -> len ; } if ( ret == NETDEV_TX_OK ) { netif_trans_update ( ndev ) ; ndev -> stats. tx_bytes += skb ->",0
219,<S2SV_ModStart> |= MSG_TRUNC ; <S2SV_ModEnd> lock_sock ( sk,1
220,"<S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL <S2SV_ModEnd>, TEMPORARY_TTL, <S2SV_ModStart>, TEMPORARY_TTL, TEMPORARY_TTL, TEMPORARY_TTL, TEMPORARY_TTL, TEMPORARY_TTL, TEMPORARY_TTL, TEMPORARY_TTL, TEMPORARY_TTL, TEMPORARY_TTL, TEMPORARY_TTL, TEMPORARY_TTL, TEMPORARY_TTL, TEMPORARY_TTL, TEMPORARY_TTL, TEMPORARY_TTL, TEMPORARY_TTL, TEMPORARY_TTL, TEMPORARY_TTL, TEMPORARY_TTL, TEMPORARY_TTL, TEMPORARY_TTL, TEMPORARY_TTL, TEMPORARY_TTL, TEMPORARY_TTL, TEMPORARY",0
221,"<S2SV_ModStart> RAnalOp next_op ; if ( len < op -> size ) { avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; } else { avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, buf + op -> size, len - op -> size, cpu ) ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, buf + op -> size, len - op -> size, cpu ) ; avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; }",0
222,<S2SV_ModStart> size ) ; <S2SV_ModEnd> px -> ft,0
223,"<S2SV_ModStart> data ) { <S2SV_ModEnd> char * repo_config <S2SV_ModStart> ) ; } if ( perf_config_global ( ) && home ) { char * user_config = strdup ( mkpath ( ""%s/.perfconfig"", home ) ) ; if (! access ( user_config, R_OK ) ) { ret += perf_config_from_file ( fn, user_config, data ) ; found += 1 ; } free ( user_config ) ; } home = getenv ( ""HOME"" ) ; if ( home ) { char * user_config = strdup ( mkpath ( ""%s/.perfconfig"", home ) ) ; if (! access ( user_config, R_OK ) ) { ret += perf_config_from_file ( fn, user_config, data ) ; found += 1 ; } free ( user_config ) ; }",0
224,"<S2SV_ModStart> int validate_event ( struct perf_event * event ) { <S2SV_ModEnd> struct arm_pmu * <S2SV_ModStart> struct arm_pmu * <S2SV_ModEnd> arm_pmu = to_arm_pmu <S2SV_ModStart> = to_arm_pmu ( <S2SV_ModEnd> event -> pmu <S2SV_ModStart>!= leader_pmu || event -> state < PERF_EVENT_STATE_OFF ) return 1 ; if ( event -> state == PERF_EVENT_STATE_OFF &&! event -> attr. enable_on_exec ) return 1 ; if ( event -> state == PERF_EVENT_STATE_OFF &&! event -> attr. enable_on_exec ) return 1 ; return armpmu -> get_event_idx ( hw_events, & fake_event ) >= 0 ; if ( event -> state == PERF_EVENT_STATE_OFF &&! event -> attr. enable_on_exec ) return 1 ; if ( event -> state == PERF_EVENT_STATE_OFF &&! event -> attr. enable_on_exec ) return 1 ; if ( event -> state == PERF_EVENT_STATE_OFF &&! event -> attr. enable_on_exec ) return 1 ; return armpmu -> get_event",0
225,"<S2SV_ModStart> bool new_idmap_permitted ( const <S2SV_ModEnd> struct uid_gid_map * <S2SV_ModStart> return true ; if ( new_map -> nr_extents > 1 ) { u32 id = new_map -> extent [ 0 ]. lower_first ; if ( cap_setid == CAP_SETUID ) { kuid_t uid = make_kuid ( ns -> parent, id ) ; if ( uid_eq ( uid, current_fsuid ( ) ) ) return true ; } else if ( cap_setid == CAP_SETGID ) { kgid_t gid = make_kgid ( ns -> parent, id ) ; if ( gid_eq ( gid, current_fsgid ( ) ) ) return true ; } else if ( cap_setid == CAP_FSETUID ) { kuid_t uid = make_kuid ( ns -> parent, id ) ; if ( uid_eq ( uid, current_fsuid ( ) ) return true ; } else if ( cap_setid == CAP_SETGID ) { kgid_t gid = make_kgid ( ns -> parent, id ) ; if ( gid_eq ( gid, current_fsg",0
226,"<S2SV_ModStart> ) { body [ j ] = XMALLOC ( VarLenData, 1 ) ; body [ j ] -> len = a -> values [ j ]. len ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. len ) ; body [ j ] -> buf = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. data. buf, body [ j ] -> len ) ; body [ j ] -> data -> buf = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. data. buf, a -> values [ j ] -> data -> len ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. data. len ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. data. buf, body [ j ] -> len ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, a -> values [ j ]. data. len ) ; body [ j ] -> data = CHECKED_XCALLOC ( unsigned char, a ->",0
227,"<S2SV_ModStart> hx ; u8 <S2SV_ModEnd> reset ; int <S2SV_ModStart> ; hx = kzalloc ( sizeof ( * hx ), GFP_KERNEL ) ; if (! hx ) return - ENOMEM ; hx -> addr = 0 ; hx -> len = 0 ; <S2SV_ModStart> 0 ) { hx -> addr = 0 ; hx -> len = 0 ; <S2SV_ModStart> 0 ) { hx -> addr = 0 ; hx -> len = 0 ; ret = - EINVAL ; break ; } <S2SV_ModEnd> } if ( <S2SV_ModStart> 0 ) { hx -> addr = 0 ; hx -> len = 0 ; ret = usb_cypress_writemem ( udev, cypress [ type ]. cpu_cs_register, & reset, 1 ) ; if ( ret || usb_cypress_writemem ( udev, cypress [ type ]. cpu_cs_register, & reset, 1 )!= 1 ) { err ( ""could <S2SV_blank> not <S2SV_blank> restart <S2SV_blank> the <S2SV_blank> USB <S2SV_blank> controller <S2SV_blank> CPU."" ) ; ret = - EIO ; kfree ( hx ) ; return ret ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
228,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart>, val_l ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> val_l ) ) ; length -= 2 ; <S2SV_ModStart> val_l ) ) ; length -= 2 ; <S2SV_ModStart> val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length -= 2 ; <S2SV_ModStart> val_l ) ) ; length -= 2 ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length -= 2 ; if ( length < 4 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> val_h = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length -= 2 ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> val_l = EXTRACT_16BITS ( ptr ) ; ptr ++ ; length -= 2 ;",0
229,"<S2SV_ModStart> ) == 0 && strncmp ( handle -> params. realm, c1 -> data, c1 -> length ) == 0 && strncmp ( ""kadmin"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""kuid"", c1 -> data, c1 -> length ) == 0 && strncmp ( ""uid"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""uid"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""uid"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""uid"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""uid"", c1 -> data, c1 -> length ) == 0 && strncmp ( ""uid"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""uid"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""uid"", c2 -> data, c2 -> length ) == 0 && strncmp ( ""uid"", c2 -> data, c",0
230,"<S2SV_ModStart> * bo ; uint32_t bin_size = 0 ; uint32_t shader_rec_offset = roundup ( bin_offset + args -> bin_cl_size, 16 ) ; uint32_t shader_rec_size = roundup ( bin_offset + args -> bin_cl_size, 16 ) ; uint32_t exec_size = exec_size + ( sizeof ( struct vc4_shader_state ) * args -> shader_rec_count ) ; if ( temp_size < exec_size ) { DRM_ERROR ( ""overflow <S2SV_blank> in <S2SV_blank> exec <S2SV_blank> arguments\\n"" ) ; goto fail ; } bin = temp + bin_offset ; exec -> shader_rec_u = temp + shader_rec_offset ; exec -> uniforms_u = temp + shader_rec_offset ; exec -> shader_state = temp + exec_size ; exec -> shader_state_size = temp + exec_size ; if ( copy_from_user ( bin, ( void __user * ) ( uintptr_t ) args -> bin_cl, args -> bin_cl_size ) ) { ret = - EFAULT ; goto fail ; } bin = temp + bin_",0
231,<S2SV_ModStart> endif # if HAVE_LZMA_H <S2SV_ModEnd> && HAVE_LIBLZMA if,1
232,"<S2SV_ModStart> i_sb ) ; mutex_lock ( & EXT4_I ( inode ) -> i_mmap_sem ) ; <S2SV_ModStart> ext4_bh_unmapped ) ) { mutex_unlock ( & EXT4_I ( inode ) -> i_mmap_sem ) ; unlock_page ( page ) ; ret = VM_FAULT_LOCKED ; goto out ; } if ( test_opt ( inode -> i_sb, DELALLOC ) &&! ext4_nonda_switch ( inode -> i_sb ) ) { do { ret = block_page_mkwrite ( vma, vmf, ext4_da_get_block_prep ) ; } while ( ret == - ENOSPC && ext4_should_retry_alloc ( inode -> i_sb, & retries ) ) ; ret = VM_FAULT_LOCKED ; goto out ; } if ( test_opt ( inode -> i_sb, DELALLOC ) &&! ext4_should_nonda_switch ( inode -> i_sb ) ) { do { ret = block_page_mkwrite ( vma, vmf, ext4_get_block_prep ) ; }",0
233,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if,1
234,"<S2SV_ModStart> * arg ) { r_return_val_if_fail ( * arg, NULL ) ; <S2SV_ModStart> case '\\n' : r_return_val_if_fail ( * arg, NULL ) ; <S2SV_ModStart> case '\\n' : r_return_val_if_fail ( * arg, NULL ) ; <S2SV_ModStart> break ; default : r_return_val_if_fail ( * arg, NULL ) ;",0
235,"<S2SV_ModStart> ; if ( cp == NULL ) { ND_PRINT ( ( ndo, ""%s\\n"", NPSTR ( ISAKMP_NPTYPE_T ) ) ) ; return NULL ; } <S2SV_ModStart> ; if ( cp == NULL ) { ND_PRINT ( ( ndo, ""%s\\n"", NPSTR ( ISAKMP_NPTYPE_T ) ) ) ; return NULL ; } <S2SV_ModStart> ; if ( cp == NULL ) { ND_PRINT ( ( ndo, ""%s\\n"", NPSTR ( ISAKMP_NPTYPE_T ) ) ) ) ; return NULL ; } <S2SV_ModStart> ; if ( cp == NULL ) { ND_PRINT ( ( ndo, ""%s\\n"", NPSTR ( ISAKMP_NPTYPE_T ) ) ) ) ; return NULL ; } <S2SV_ModStart> ; if ( cp == NULL ) { ND_PRINT ( ( ndo, ""%s\\n"", NPSTR ( ISAKMP_NPTYPE_T ) ) ) ) ; return NULL ; } <S2SV_ModStart> ; if ( cp == NULL ) { ND_PRINT ( ( ndo, ""%s\\n"", NP",0
236,"<S2SV_ModStart> ; static gboolean accept_ice_connection ( GIOChannel * source, GIOCondition condition, GsmIceConnectionData * data ) { IceListenObj listener ; IceAcceptStatus status ; g_debug ( ""GsmXsmpServer: <S2SV_blank> accept_ice_connection()"" ) ; listener = data -> listener ; status = IceAcceptConnection ( listener, & status ) ; if ( status!= IceAcceptSuccess ) { g_debug ( ""GsmXsmpServer: <S2SV_blank> IceAcceptConnection <S2SV_blank> returned <S2SV_blank> %d"", status ) ; return FALSE ; } client = gsm_xsmp_client_new ( ice_conn ) ; gsm_store_add ( server -> priv -> client_store, gsm_client_peek_id ( client ), G_OBJECT ( client ) ) ; g_object_unref ( client ) ; return TRUE ; } client = gsm_xsmp_client_new ( ice_conn ) ; gsm_store_add ( server -> priv -> client_store, gsm_client_peek_id ( client ), G_OBJECT ( client ) ) ; g_object_unref",0
237,"<S2SV_ModStart> ; if ( unlikely (! pskb_may_pull ( skb, frag_hdr_sz ) ) ) goto out ; unfrag_ip6hlen = ip6_find_1stfragopt ( skb, & prevhdr ) ; unfrag_len = skb_network_header ( skb ) - skb_mac_header ( skb ) - unfrag_ip6hlen ;",0
238,"<S2SV_ModStart> void ) { <S2SV_ModEnd> test_checkout_fails ( ""refs/heads/git_tilde1"" <S2SV_ModStart> "".git/foobar"" ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
239,"<S2SV_ModStart> ; break ; case SO_REUSEADDR : v. val = sock_flag ( sk, SOCK_REUSEADDR ) ; break ; case SO_KEEPALIVE : v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; break ; case SO_ACCEPTCONN : v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; break ; case SO_TRUNC : v. val = sock_flag ( sk, SOCK_TRUNC ) ; break ; case SO_KEEPALIVE : v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; break ; case SO_TRUNC : v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; break ; case SO_ACCEPTCONN : v. val = sock_flag ( sk, SOCK_TRUNC ) ; break ; case SO_KEEPALIVE : v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; break ; case SO_TRUNC : v. val = sock_flag ( sk, SOCK_KEEPALIVE ) ; break ; case SO_REUSEADDR : v. val = sk -> sk",0
240,"<S2SV_ModStart> sk_shutdown & RCV_SHUTDOWN ) msg -> msg_namelen = 0 ; return err ; } copied = skb -> len ; if ( len < copied ) { msg -> msg_flags |= MSG_TRUNC ; copied = len ; } skb_reset_transport_header ( skb ) ; err = skb_copy_datagram_iovec ( skb, 0, msg -> msg_iov, copied ) ; if ( err == 0 ) { sock_recv_ts_and_drops ( msg, sk, skb ) ; if ( bt_sk ( sk ) -> skb_msg_name ) bt_sk ( sk ) -> skb_msg_name ( skb, msg -> msg_name, & msg -> msg_namelen ) ; else msg -> msg_namelen = 0 ; } skb_free_datagram ( sk, skb ) ; return err ;",0
241,<S2SV_ModStart> ) { return NULL <S2SV_ModEnd> ; } while,1
242,"<S2SV_ModStart> int i ; const uint8_t * const buffers [ 4 ] = { src -> y_buffer, src -> u_buffer, src -> v_buffer, src -> alpha_buffer } ; const int strides [ 4 ] = { src -> y_stride, src -> uv_stride, src -> alpha_stride } ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ], buffers [ i ], strides [ i ], mi_row, mi_col, sf, pd -> subsampling_x, pd -> subsampling_y, pd -> subsampling_x, pd -> subsampling_y, pd -> subsampling_y ) ; for ( i = 0 ; i < MAX_MB_PLANE ; ++ i ) { struct macroblockd_plane * const pd = & xd -> plane [ i ] ; setup_pred_plane ( & pd -> pre [ idx ], buffers [ i ], strides [ i ], mi_row, mi_col, sf, pd -> subsampling_",0
243,"<S2SV_ModStart>, j ; <S2SV_ModEnd> unsigned int bufsize <S2SV_ModStart> cleanup ; X509_NAME_oneline_ex ( X509_get_subject_name ( cert ), buf, & bufsize, XN_FLAG_SEP_COMMA_PLUS ) ; md -> subject_dn = strdup ( buf ) ; if ( md -> subject_dn == NULL ) { ret = ENOMEM ; goto cleanup ; } X509_NAME_oneline_ex ( X509_get_issuer_name ( cert ), buf, & bufsize, XN_FLAG_SEP_COMMA_PLUS ) ; md -> issuer_dn = strdup ( buf ) ; if ( md -> issuer_dn == NULL ) { ret = ENOMEM ; goto cleanup ; } ret = crypto_retrieve_X509_sans ( context, plg_cryptoctx, req_cryptoctx, cert, & pkinit_sans, & upn_sans, NULL ) ; if ( ret!= 0 ) { ret = ENOMEM ; goto cleanup ; } ret = crypto_retrieve_X509_sans ( context, plg_cryptoctx, req_cryptoctx, cert, & pkinit_sans,",0
244,"<S2SV_ModStart> & KVM_MEM_LOG_DIRTY_PAGES ) { memslot = id_to_memslot ( kvm -> memslots, mem -> slot ) ; memslot = id_to_memslot ( kvm -> memslots, mem -> slot ) ; memslot = id_to_memslot ( kvm -> memslots, mem -> slot ) ; r = - EINVAL ; if ( npages > KVM_MEM_MAX_NR_PAGES ) { memslot = id_to_memslot ( kvm -> memslots, mem -> slot ) ; memslot = id_to_memslot ( kvm -> memslots, mem -> slot ) ; memslot = id_to_memslot ( kvm -> memslots, mem -> slot ) ; memslot = id_to_memslot ( kvm -> memslots, mem -> slot ) ; r = - EINVAL ; if ( npages > KVM_MEM_MAX_NR_PAGES ) { memslot = id_to_memslot ( kvm -> memslots, mem -> slot ) ; memslot = id_to_memslot ( kvm -> memslots, mem ->",0
245,"<S2SV_ModStart> 0 ; } if (! err ) { if ( ru && copy_to_user ( ru, & r, sizeof ( struct rusage ) ) ) return - EFAULT ;",0
246,<S2SV_ModStart> ; lock_sock ( sk <S2SV_ModEnd> ) ; for,0
247,"<S2SV_ModStart> * ni ; u_int amt ; <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> = length / <S2SV_ModEnd> sizeof ( * <S2SV_ModStart> ni ) ; if ( j * sizeof ( * ni )!= length - 4 ) ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %d[%u]:"", j, length ) ) ; else ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> %d:"", j ) ) ; break ; case RIP6_REQUEST : j = length / sizeof ( * ni ) ; if ( j == 1 && rp -> rip6_nets -> rip6_metric == HOPCNT_INFINITY6 && IN6_IS_ADDR_UNSPECIFIED ( & rp -> rip6_nets -> rip6_dest ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> ripng-req <S2SV_blank> dump"" ) ) ; break ; } if ( i >= sizeof ( * ni ) ; i -= sizeof ( * ni ), ++ ni ) { if ( ndo -> ndo_vflag > 1 ) ND_PRINT ( ( ndo, ""\\n\\t",0
248,<S2SV_ModStart> ; if ( reqkey_defl == KEY_REQKEY_DEFL_THREAD_KEYRING ) ret = install_thread_keyring_to_cred ( new ) ; if ( ret < 0 ) ret = - EINVAL ; goto error ; case KEY_REQKEY_DEFL_PROCESS_KEYRING : ret = install_process_keyring_to_cred ( new ) ; if ( ret < 0 ) ret = - EINVAL ; goto error ; case KEY_REQKEY_DEFL_USER_SESSION_KEYRING : case KEY_REQKEY_DEFL_USER_SESSION_KEYRING : ret = install_user_keyring_to_cred ( new ) ; if ( ret < 0 ) ret = - EINVAL ; goto error ; case KEY_REQKEY_DEFL_GROUP_KEYRING : ret = install_group_keyring_to_cred ( new ) ; if ( ret < 0 ) ret = - EINVAL ; goto error ;,0
249,"<S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( sortlist,",1
250,"<S2SV_ModStart> argc ++ ; retval = copy_strings_kernel ( 1, & iname_addr, bprm ) ; if ( retval < 0 ) goto _error ; bprm -> interp = iname ; retval = copy_strings_kernel ( 1, & iname_addr, bprm ) ; if ( retval < 0 ) goto _error ; bprm -> interp_flags |= BINPRM_FLAGS_EXECFD ; bprm -> interp_data = fd_binary ; retval = copy_strings_kernel ( 1, & iname_addr, bprm ) ; if ( retval < 0 ) goto _error ; retval = copy_strings_kernel ( 1, & iname_addr, bprm ) ; if ( retval < 0 ) goto _error ; retval = copy_strings_kernel ( 1, & iname_addr, bprm ) ; if ( retval < 0 ) goto _error ; bprm -> argc ++ ; retval = copy_strings_kernel ( 1, & iname_addr, bprm ) ; if ( retval < 0 ) goto _error ; retval = copy_strings_kernel ( 1, & iname_addr, b",0
251,<S2SV_ModStart> ; int iSrc ; res -> ContribRow [ u ]. Left = iLeft ; res -> ContribRow [ u ]. Right = iRight ; if ( iRight - iLeft + 1 > windows_size ) { iRight -- ; } } for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] = scale_f_d * ( dCenter - ( double ) iSrc ) ) ) ; } if ( dTotalWeight < 0.0 ) { _gdContributionsFree ( res ) ; return NULL ; } for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { dTotalWeight += ( res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] = scale_f_d * ( dCenter - ( double ) iSrc ) ) ) ; } if ( dTotalWeight > 0.0 ) { for ( iSrc = iLeft ; iSrc <= iRight ; iSrc ++ ) { res -> ContribRow [ u ]. Weights [ iSrc - iLeft ] /=,0
252,<S2SV_ModStart> user ) { mutex_lock ( & ipmi_user_mutex ) ; <S2SV_ModStart> user ) ; mutex_unlock ( & ipmi_user_mutex ) ;,0
253,"<S2SV_ModStart> Com_Printf ( ""Usage: <S2SV_blank> writeconfig <S2SV_blank> <filename>\\n"" <S2SV_ModEnd> ) ; return",0
254,"<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> sl = strlen <S2SV_ModStart> + 1 ; size_t limit = 0 ; mongo_message * mm ; if ( cursor -> seen >= cursor -> limit ) { cursor -> err = MONGO_CURSOR_EXHAUSTED ; return MONGO_ERROR ; } mm = mongo_message_create ( 16 + 4 + 4 + 4 + 4 + 4 + 8, 0, 0, MONGO_OP_GET_MORE ) ; data = & mm -> data ; data = & mm -> data ; data = & mm -> data ; data = mongo_data_append ( data, & ZERO ) ; data = mongo_data_append ( data, & cursor -> reply -> fields. cursorID ) ; bson_free ( cursor -> reply ) ; res = mongo_read_response ( cursor -> conn, & mm ) ; if ( res!= MONGO_OK ) { mongo_cursor_destroy ( cursor ) ; return MONGO_ERROR ; } res = mongo_read_response ( cursor -> conn, & mm ) ; if ( res!= MONGO_OK ) { mongo_cursor_destroy ( cursor ) ; return MONGO_ERROR ; }",0
255,<S2SV_ModStart> & tee_mm_sec_ddr ) ; <S2SV_ModStart> ( mobj ) memset <S2SV_ModEnd> ( mobj_get_va (,0
256,<S2SV_ModStart> expires += incr ; timer -> it_overrun += 1 << i ; delta -= incr ; },0
257,"<S2SV_ModStart> * for_ch ; int is_async = 0 ; <S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == TYPE_COMMENT ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } <S2SV_ModStart> 0 ) ) == TYPE_COMMENT ) { ast_error ( c, n, ""Async <S2SV_blank> comprehensions <S2SV_blank> are <S2SV_blank> only <S2SV_blank> supported <S2SV_blank> in <S2SV_blank> Python <S2SV_blank> 3.6 <S2SV_blank> and <S2SV_blank> greater"" ) ; return NULL ; } for_ch = CHILD ( n, 1 + is_async ) ; t = ast_for_exprlist ( c, for_ch, Store ) ; if (! t ) return NULL ; expression = ast_for_expr ( c, CHILD ( n, 3 + is_async ) ) ; if (! expression ) return NULL ; first = ( expr_ty ) asdl_seq_GET ( t, 0 ) ; if ( NCH ( for_ch ) == 1 ) comp = comprehension ( first, expression, NULL, is_async, c -> c_arena ) ;",0
258,"<S2SV_ModStart> NULL ; } dst_state -> curframe = src -> curframe ; for ( i = 0 ; i <= src -> curframe ; i ++ ) { dst = dst_state -> frame [ i ] ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; dst_state -> frame [ i ] = dst ; } } err = copy_func_state ( dst, src -> frame [ i ] ) ; if (! dst ) { dst = kzalloc ( sizeof ( * dst ), GFP_KERNEL ) ; dst_state -> frame [ i ] = dst ; } err = copy_func_state ( dst, src",0
259,"<S2SV_ModStart> void write_mb_modes_kf ( const VP9_COMMON * cm, const MACROBLOCKD * xd <S2SV_ModEnd>, vpx_writer * <S2SV_ModStart> w ) { const MODE_INFO * const mi = mi_8x8 [ 0 ] ; const MODE_INFO * const above_mi = mi_8x8 [ - xd -> mi_stride ] ; const MODE_INFO * const left_mi = mi_8x8 [ - xd -> left_available? mi_8x8 [ - 1 ] : NULL ; const MB_MODE_INFO * const mbmi = & mi -> mbmi ; const BLOCK_SIZE bsize = mbmi -> sb_type ; const int num_4x4_w = num_4x4_blocks_wide_lookup [ bsize ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ bsize ] ; const int num_4x4_w = num_4x4_blocks_wide_lookup [ bsize ] ; const int num_4x4_w = num_4x4_blocks_wide_lookup [ bsize ] ; const int num_",0
260,"<S2SV_ModStart> ; saddr. sin_family = AF_INET ; saddr. sin_addr. s_addr = htonl ( INADDR_LOOPBACK ) ; saddr. sin_port = htons ( port ) ; if ( 0 > bind ( sfd, ( struct sockaddr * ) & saddr, sizeof ( struct sockaddr_in ) ) ) { perror ( ""bind()"" ) ; socket_close ( sfd ) ; return - 1 ; } memset ( ( void * ) & saddr, 0, sizeof ( saddr ) ) ; if ( 0 > bind ( sfd, ( struct sockaddr * ) & saddr, sizeof ( struct sockaddr_in ) ) ) { perror ( ""bind()"" ) ; socket_close ( sfd ) ; return - 1 ; } memset ( ( void * ) & saddr, 0, sizeof ( saddr ) ) ; if ( 0 > bind ( sfd, ( struct sockaddr * ) & saddr, sizeof ( struct sockaddr_in ) ) ) { perror ( ""bind()"" ) ; socket_close ( sfd ) ; return - 1 ; }",0
261,"<S2SV_ModStart> } } DPRINTF ( ""Data <S2SV_blank> ready <S2SV_blank> tag=0x%x <S2SV_blank> len=%zd\\n"", r -> req. tag, r -> iov. iov_len ) ; n = r -> iov. iov_len / 512 ; r -> sector += n ; r -> sector_count -= n ; scsi_req_data ( & r -> req, r -> iov. iov_len ) ; }",0
262,"<S2SV_ModStart> cs > CQSPI_MAX_CHIPSELECT ) { dev_err ( dev, ""Chip <S2SV_blank> select <S2SV_blank> %d <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range.\\n"", cs ) ; goto err ; } <S2SV_ModEnd> f_pdata = & <S2SV_ModStart> cs > CQSPI_MAX_CHIPSELECT ) { dev_err ( dev, ""Chip <S2SV_blank> select <S2SV_blank> %d <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range.\\n"", cs ) ; goto err ; }",0
263,"<S2SV_ModStart> maxn ) { switch ( actions [ n ]. SWF_ACTIONRECORD. ActionCode ) { case SWFACTION_END : return 0 ; case SWFACTION_CONSTANTPOOL : decompileCONSTANTPOOL ( & actions [ n ] ) ; return 0 ; case SWFACTION_GOTOFRAME : return decompileGOTOFRAME ( n, actions, maxn, 1 ) ; case SWFACTION_GETURL2 : decompileGETURL2 ( & actions [ n ] ) ; return 0 ; case SWFACTION_GETPROPERTY : decompileGETPROPERTY ( & actions [ n ] ) ; return 0 ; case SWFACTION_GETTIME : decompileGETTIME ( n, actions, maxn ) ; return 0 ; case SWFACTION_TRACE : decompileTRACE ( n, actions, maxn ) ; return 0 ; case SWFACTION_CALLFRAME : decompileCALLFRAME ( n, actions, maxn ) ; return 0 ; case SWFACTION_GETTIME : decompileGETTIME ( n, actions, maxn ) ; return 0 ; case SWFACTION_GETTIME : decompileGETTIME ( n, actions, maxn ) ;",0
264,"<S2SV_ModStart> memcpy ( ptr, & bo -> stobj -> stevedore, sizeof ( struct vsb ) ) ; <S2SV_ModStart> memcpy ( ptr, & bo -> stobj -> stevedore, sizeof ( struct vsb ) ) ; AZ ( memcpy ( ptr, & bo -> stobj -> stevedore, sizeof ( struct vsb ) ) ) ; if (! VTAILQ_EMPTY ( & bo -> fetch_objcore -> objhead -> waitinglist ) ) { AZ ( memcpy ( ptr, & bo -> stobj -> stevedore, sizeof ( struct vsb ) ) ) ; AZ ( memcpy ( ptr, & bo -> stobj -> stevedore, sizeof ( struct vsb ) ) ) ; AZ ( memcpy ( ptr, & ptr, sizeof ( struct vsb ) ) ) ; if (! VTAILQ_EMPTY ( & bo -> fetch_objcore -> objhead -> waitinglist ) ) { AZ ( memcpy ( ptr, & bo -> stobj -> stevedore, sizeof ( struct vsb ) ) ) ; AZ ( memcpy ( ptr, & ptr, sizeof ( struct vsb ) ) ) ;",0
265,"<S2SV_ModStart> out ; } if ( table -> total == table -> max ) { err = - ENOSPC ; goto out ; } if ( table -> total == table -> max ) { err = - ENOSPC ; goto out ; } table -> entries [ free ] = cpu_to_be32 ( vlan | MLX4_VLAN_VALID ) ; err = mlx4_set_port_vlan_table ( dev, port, table -> entries ) ; if ( unlikely ( err ) ) { mlx4_warn ( dev, ""Failed <S2SV_blank> adding <S2SV_blank> vlan: <S2SV_blank> %u\\n"", vlan ) ; table -> refs [ free ] = 0 ; table -> entries [ free ] = cpu_to_be32 ( vlan | MLX4_VLAN_VALID ) ; err = mlx4_set_port_vlan_table ( dev, port, table -> entries ) ; if ( unlikely ( err ) ) { mlx4_warn ( dev, ""Failed <S2SV_blank> adding <S2SV_blank> vlan: <S2SV_blank> %u\\n"", vlan ) ; table -> refs [ free ] = 0 ; table -> entries [ free ] = 0 ; table -> entries [ free ] = 0 ; table -> entries [ free ]",0
266,"<S2SV_ModStart> ) ) ; ND_TCHECK_32BITS ( & prep -> pp_n ) ; <S2SV_ModStart> 1 ) ; ND_TCHECK_32BITS ( & prep -> pp_n ) ; n = EXTRACT_32BITS ( & prep -> pp_n ) ; ps = ( const struct pgstate * ) ( prep + 1 ) ; while ( -- n >= 0 && ND_TTEST ( * ps ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %u/%s:%u"", EXTRACT_32BITS ( & ps -> slot ), ipaddr_string ( ndo, & ps -> page. p_sid ), EXTRACT_32BITS ( & ps -> page. p_uid ) ) ) ; ps = ( const struct pgstate * ) ( prep + 1 ) ; while ( -- n >= 0 && ND_TTEST ( * ps ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %u/%s:%u"", EXTRACT_32BITS ( & ps -> slot ), ipaddr_string ( ndo, & ps -> page. p_sid ), EXTRACT_32BITS ( & ps -> page. p_uid",0
267,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
268,"<S2SV_ModStart> int ret ; uint16_t <S2SV_ModEnd> value ; dev_dbg <S2SV_ModStart>, reg, & value, 1, 1000 ) ; if ( ret < 0 ) return ret ; ret = atusb_control_msg ( atusb, usb_rcvctrlpipe ( usb_dev, 0 ), ATUSB_REG_READ, ATUSB_REQ_FROM_DEV, 0, reg, & value, 1, 1000 ) ; if ( ret < 0 ) return ret ; ret = atusb_control_msg ( usb_dev, 0 ), ATUSB_REG_READ, ATUSB_REQ_FROM_DEV, 0, reg, & value, 1, 1000 ) ; if ( ret < 0 ) return ret ; ret = ret ; ret = atusb_control_msg ( usb_dev, 0 ), ATUSB_REG_READ, ATUSB_REQ_FROM_DEV, 0, reg, & value, 1, 1000 ) ; if ( ret < 0 ) return ret ; ret = ret ; ret = atusb_control_msg ( usb_dev, 0 ), ATUSB_REG_READ, ATUSB_REQ_FROM_DEV, 0, reg, & value, 1,",0
269,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static sqlite3_int64 <S2SV_ModEnd> addModuleArgument ( sqlite3 <S2SV_ModStart> zArg ) { sqlite3_int64 <S2SV_ModEnd> nBytes = sizeof <S2SV_ModStart> * ) * <S2SV_ModEnd> ( 2 + <S2SV_ModStart> pTable -> nModuleArg ) ; sqlite3_int64 * azModuleArg = sqlite3DbRealloc ( db, pTable -> azModuleArg, nBytes ) ; if ( azModuleArg == 0 ) { sqlite3DbFree ( db, zArg ) ; return sqlite3_int64. MaxValue ; }",0
270,"<S2SV_ModStart> c ) ; } if ( s -> len > XMLRPC_BUFSIZE ) { mowgli_string_free ( s ) ; s = mowgli_string_create ( ) ; memcpy ( outbuffer, s -> str, XMLRPC_BUFSIZE ) ; } else if ( s -> len > XMLRPC_BUFSIZE ) { mowgli_string_free ( s ) ; s = mowgli_string_create ( ) ; if ( ( s -> len > XMLRPC_BUFSIZE ) { mowgli_string_free ( s ) ; s = mowgli_string_create ( ) ; s = mowgli_string_create ( ) ; memcpy ( outbuffer, s -> str, XMLRPC_BUFSIZE ) ; } else if ( s -> len > XMLRPC_BUFSIZE ) { mowgli_string_free ( s ) ; s = mowgli_string_create ( ) ; if ( s -> len > XMLRPC_BUFSIZE ) { mowgli_string_free ( s ) ; s = mowgli_string_create (",0
271,"<S2SV_ModStart> ) ) { if ( lIsInput && ( CurrentColorSpace!= cmsSigXYZData ) && ( CurrentColorSpace!= cmsSigLabData ) ) { cmsSignalError ( ContextID, cmsERROR_COLORSPACE_CHECK, ""ColorSpace <S2SV_blank> mismatch"" ) ; goto Error ; } } if ( lIsInput && ( CurrentColorSpace!= cmsSigLabData ) ) { cmsSignalError ( ContextID, cmsERROR_COLORSPACE_CHECK, ""ColorSpace <S2SV_blank> mismatch"" ) ; goto Error ; } if ( ( CurrentColorSpace!= cmsSigXYZData ) && ( CurrentColorSpace!= cmsSigLabData ) ) { cmsSignalError ( ContextID, cmsERROR_COLORSPACE_CHECK, ""ColorSpace <S2SV_blank> mismatch"" ) ; goto Error ; } } if ( lIsInput && ( CurrentColorSpace!= cmsSigXYZData ) ) { cmsSignalError ( ContextID, cmsERROR_COLORSPACE_CHECK, ""ColorSpace <S2SV_blank> mismatch"" ) ; goto Error ; } if ( ( CurrentColorSpace!= cmsSigLabData ) && ( CurrentColorSpace!= cmsSigLabData ) ) { cmsSignalError ( ContextID, cmsERROR_COLORSPACE_CHECK, ""ColorSpace <S2SV_blank> mismatch",0
272,"<S2SV_ModStart> 32 ) { ut32 addr32 = r_read_le32 ( buf + i ) ; <S2SV_ModStart> } else { ut64 addr64 = r_read_le64 ( buf + i ) ; if ( addr64 ) { RBinAddr * ba = newEntry ( sec -> paddr + i, addr64, type, bits ) ; r_list_append ( ret, ba ) ; } } } else { <S2SV_ModStart> { for ( i = 0 ; i < sec -> size ; i += 8 ) { ut64 addr64 = r_read_le64 ( buf + i ) ; if ( addr64 ) { RBinAddr * ba = newEntry ( sec -> paddr + i, addr64, type, bits ) ; r_list_append ( ret, ba ) ; } }",0
273,"<S2SV_ModStart> case ISIS_SUBTLV_EXT_IS_REACH_IPV6_INTF_ADDR : case ISIS_SUBTLV_EXT_IS_REACH_IPV6_NEIGHBOR_ADDR : if ( subl >= 4 ) { ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; if ( subl == 8 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; } break ; case ISIS_SUBTLV_EXT_IS_REACH_IPV6_INTF_ADDR : case ISIS_SUBTLV_EXT_IS_REACH_IPV6_NEIGHBOR_ADDR : if ( subl >= 4 ) { ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ; if ( subl == 8 ) ND_PRINT ( ( ndo, "", <S2SV_blank> 0x%08x"", ipaddr_string ( ndo, tptr ) ) ) ;",0
274,<S2SV_ModStart> 1 ) { if ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ]!= 0 && ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ]!= 0 ) { ia_esbr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ] [ 4 * ptr_hbe_txposer -> k_start ]!= 0 && ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ]!= 0 && ( ptr_hbe_txposer -> qmf_in_buf [ idx + HBE_OPER_WIN_LEN - 1 ] [ 4 * ptr_hbe_txposer -> k_start ],0
275,"<S2SV_ModStart> -> dmin ; if ( p + enclen ( reg -> enc, p ) > end ) { rdp_protocol_error ( reg -> enc, ""forward_search_range: <S2SV_blank> str: <S2SV_blank> %d, <S2SV_blank> end: <S2SV_blank> %d, <S2SV_blank> range: <S2SV_blank> %d\\n"", ( int ) str, ( int ) end, ( int ) range ) ; } else { rdp_protocol_error ( reg -> enc, ""forward_search_range: <S2SV_blank> str: <S2SV_blank> %d, <S2SV_blank> end: <S2SV_blank> %d\\n"", ( int ) str ) ) ; rdp_protocol_error ( reg -> enc, ""forward_search_range: <S2SV_blank> str: <S2SV_blank> %d, <S2SV_blank> end: <S2SV_blank> %d, <S2SV_blank> range: <S2SV_blank> %d\\n"", ( int ) str, ( int ) end, ( int ) range ) ; } else { rdp_protocol_error ( reg -> enc, ""forward_search_range: <S2SV_blank> str: <S2SV_blank> %d, <S2SV_blank> end: <S2SV_blank> %d\\n"", ( int ) str ) ) ; rdp_protocol_error ( reg -> enc, ""forward_search_range: <S2SV_blank> str: <S2SV_blank> %d,",0
276,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> bfq_idle_slice_timer_body ( struct <S2SV_ModStart> bfqd = bfqq <S2SV_ModEnd> -> bfqd ; <S2SV_ModStart> flags ) ; if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_TOO_IDLE ; else goto schedule_dispatch ; spin_lock_irqsave ( & bfqd -> lock, flags ) ; bfq_clear_bfqq_wait_request ( bfqq ) ; if ( bfqq!= bfqd -> in_service_queue ) { spin_unlock_irqrestore ( & bfqd -> lock, flags ) ; return ; } if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_BUDGET_TIMEOUT ; else if ( bfq_bfqq_budget_timeout ( bfqq ) ) reason = BFQQE_TOO_IDLE ; else if ( bfq_bfqq_budget_timeout",0
277,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
278,"<S2SV_ModStart> continue ; RING_FINAL_CHECK_FOR_REQUESTS ( & vif -> tx, work_to_do ) ; <S2SV_ModStart> ; if ( unlikely ( txreq. size > vif -> remaining_credit && tx_credit_exceeded ( vif, txreq. size ) ) { netbk_tx_err ( vif ) ; continue ; } idx = vif -> tx. req_cons ; rmb ( ) ; memcpy ( & txreq, RING_GET_REQUEST ( & vif -> tx, idx ), sizeof ( txreq ) ) ; if ( txreq. size > vif -> remaining_credit && tx_credit_exceeded ( vif, txreq. size ) ) { netbk_tx_err ( vif ) ; continue ; } vif -> tx. req_cons = ++ idx ; memset ( extras, 0, sizeof ( extras ) ) ; if ( txreq. flags & XEN_NETTXF_extra_info ) { work_to_do = xen_netif_get_extras ( vif, extras, work_to_do ) ; idx = vif -> tx. req_cons ; }",0
279,"<S2SV_ModStart> cb ) { struct xfrm_sec_ctx * ctx = cb -> args [ 0 ] ; struct xfrm_sec_ctx * ctx = rcu_dereference_protected ( ctx -> xfrm_sec_ctx, lockdep_is_held ( & ctx -> xfrm_sec_ctx -> lock ) ) ; struct xfrm_sec_ctx * xfrm_sec_ctx = ( struct xfrm_sec_ctx * ) ctx ; xfrm_sec_ctx_put ( & ctx -> xfrm_sec_ctx ) ; xfrm_sec_ctx_put ( & ctx -> xfrm_sec_ctx ) ; xfrm_sec_ctx_put ( & ctx -> xfrm_sec_ctx ) ; xfrm_sec_ctx_put ( & ctx -> xfrm_sec_ctx ) ; xfrm_sec_ctx_put ( & ctx -> xfrm_ctx ) ; xfrm_sec_ctx_put ( & ctx -> xfrm_ctx ) ; xfrm_sec_ctx_put ( & ctx -> xfrm_ctx ) ;",0
280,<S2SV_ModStart> conn ) ; if ( h2o_timeout_is_linked ( & conn -> _read. timeout_entry ) ) { h2o_timeout_unlink ( & conn -> _read. timeout_entry ) ; do_emit_writereq ( conn ) ; },0
281,"<S2SV_ModStart> * pending_tx_info = rcu_dereference_protected ( netbk -> pending_tx_info, lockdep_is_held ( & netbk -> lock ) ) <S2SV_ModEnd> ; struct xenvif_tx_request <S2SV_ModStart> XEN_NETIF_RSP_ERROR ) ; netbk -> pending_tx_info [ pending_idx ]. vif = vif ; <S2SV_ModStart> XEN_NETIF_RSP_ERROR ) ; netbk -> pending_ring [ index ] = pending_idx ; xenvif_put ( vif ) ; } for ( i = start ; i < nr_frags ; i ++ ) { int j, newerr ; pending_ring_idx_t index ; pending_idx = frag_get_pending_idx ( & shinfo -> frags [ i ] ) ; newerr = ( ++ gop ) -> status ; if ( likely (! newerr ) ) { if ( unlikely ( err ) ) xen_netbk_idx_release ( netbk, pending_idx ) ; continue ; } txp = & netbk -> pending_tx_info [ pending_idx ]. req ; make_tx_response ( vif, tx",0
282,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
283,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> rows, exception ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; status = SetImageExtent ( image, image -> rows, exception ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> rows, exception ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) return ( DestroyImageList ( image ) ) ; status = SetImageExtent ( image, image -> rows, exception ) ; if ( status == MagickFalse ) return",0
284,"<S2SV_ModStart> struct hv_kvp_ipaddr_value * kvp_ip_val = kmalloc ( sizeof ( * hv_kvp_ip_val ), GFP_KERNEL ) ; if (! hv_kvp_ip_val ) { hv_kvp_ip_val = kmalloc ( sizeof ( * hv_kvp_ip_val ), GFP_KERNEL ) ; hv_kvp_ip_val = kmalloc ( sizeof ( * hv_kvp_ip_val ), GFP_KERNEL ) ) ; kfree ( k <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
285,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
286,"<S2SV_ModStart> TRUE ) ; <S2SV_ModEnd> type = crm_element_value <S2SV_ModStart> F_SUBTYPE ) ; if ( type == NULL ) { crm_warn ( ""Skipping <S2SV_blank> client <S2SV_blank> with <S2SV_blank> NULL <S2SV_blank> channel"" ) ; return FALSE ; } type = crm_element_value ( update_msg, F_SUBTYPE ) ; if ( type == NULL ) { crm_warn ( ""Skipping <S2SV_blank> client <S2SV_blank> with <S2SV_blank> NULL <S2SV_blank> type"" ) ; return FALSE ; } type = crm_element_value ( update_msg, F_SUBTYPE ) ; if ( type == NULL ) { crm_warn ( ""Skipping <S2SV_blank> client <S2SV_blank> with <S2SV_blank> NULL <S2SV_blank> type"" ) ; return FALSE ; } type = crm_element_value ( update_msg, F_SUBTYPE ) ; if ( type == NULL ) { crm_warn ( ""Skipping <S2SV_blank> client <S2SV_blank> with <S2SV_blank> NULL <S2SV_blank> type"" ) ; return FALSE ; } type = crm_element_value ( update_msg, F_SUBTYPE ) ; if ( type == NULL ) { crm_warn ( ""Skipping <S2SV_blank> client <S2SV_blank> with <S2SV_blank> NULL <S2SV_blank> type"" ) ; return FALSE ; } type = crm_element_value ( update_msg,",0
287,"<S2SV_ModStart> + x > <S2SV_ModEnd> diffBlock + diffBlockLength <S2SV_ModStart> NULL ; } if ( newpos + x > newDataLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } if ( diffPtr + x > diffBlock + diffBlockLength || extraPtr + y > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } if ( diffPtr + x > diffBlock + diffBlockLength || extraPtr + y > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ; return NULL ; } memcpy ( newData + newpos, diffPtr, x ) ; if ( diffPtr + x > diffBlock + diffBlockLength || extraPtr + y > extraBlock + extraBlockLength ) { PyMem_Free ( newData ) ; PyErr_SetString ( PyExc_ValueError, ""corrupt <S2SV_blank> patch <S2SV_blank> (overflow)"" ) ;",0
288,"<S2SV_ModStart> ; if (! fibh -> sbh ) fibh -> sbh = udf_tread ( dir -> i_sb, block ) ; if (! fibh -> ebh ) fibh -> sbh = udf_tread ( dir -> i_sb, block ) ; if (! fibh -> sbh ) fibh -> sbh = udf_tread ( dir -> i_sb, block ) ; if (! fibh -> sbh ) fibh -> sbh = udf_tread ( dir -> i_sb, block ) ; if (! fibh -> ebh ) fibh -> sbh = udf_tread ( dir -> i_sb, block ) ; if (! fibh -> sbh ) fibh -> sbh = udf_tread ( dir -> i_sb, block ) ; if (! fibh -> sbh ) fibh -> sbh = udf_tread ( dir -> i_sb, block ) ; if (! fibh -> sbh ) fibh -> sbh = udf_tread ( dir -> i_sb, block ) ; if (! f",0
289,"<S2SV_ModStart> = IP_VS_BASE_CTL ; memset ( & d [ 0 ], 0, sizeof ( d [ 0 ] ) ) ; memset ( & d [ 1 ], 0, sizeof ( d [ 1 ] ) ) ; memset ( & d [ 2 ], 0, sizeof ( d [ 2 ] ) ) ; memset ( & d [ 3 ], 0, sizeof ( d [ 3 ] ) ) ; memset ( & d [ 4 ], 0, sizeof ( d [ 4 ] ) ) ; memset ( & d [ 5 ], 0, sizeof ( d [ 5 ] ) ) ; memset ( & d [ 6 ], 0, sizeof ( d [ 6 ] ) ) ; memset ( & d [ 7 ], 0, sizeof ( d [ 7 ] ) ) ; memset ( & d [ 7 ], 0, sizeof ( d [ 7 ] ) ) ; memset ( & d [ 8 ], 0, sizeof ( d [ 8 ] ) ) ; memset ( & d [ 9 ], 0, sizeof ( d [ 9 ] ) ) ; memset ( & d [ 10 ], 0, sizeof ( d [ 10 ] ) ) ; memset (",0
290,"<S2SV_ModStart> pktopts ) ; rcu_read_lock ( ) ; <S2SV_ModStart> err = ip6_xmit_flow ( sk, skb, fl6, np -> opt, np -> tclass ) ; rcu_read_unlock (",0
291,<S2SV_ModStart> hdr ; ssize_t result ; if (! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ),0
292,"<S2SV_ModStart> fpath = NULL <S2SV_ModEnd>, * cgdir <S2SV_ModStart> ; if (! caller_is_in_controller ( fc -> pid, controller, path1, NULL ) ) { ret = - EACCES ; goto out ; } <S2SV_ModStart> if (! caller_is_in_ancestor ( fc -> pid, controller, path1, NULL ) ) { ret = - EACCES ; goto out ; } ret = cgfs_create ( controller, cgroup, fc -> uid, fc -> gid ) ; printf ( ""cgfs_create <S2SV_blank> returned <S2SV_blank> %d <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> %s\\n"", ret, controller, cgroup ) ; printf ( ""cgfs_create <S2SV_blank> returned <S2SV_blank> %d <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> %s\\n"", ret, controller, cgroup ) ; free ( cgdir ) ; return ret ; } <S2SV_ModEnd> printf ( ""cgfs_create <S2SV_blank> returned <S2SV_blank> %d <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> %s\\n""",0
293,<S2SV_ModStart> queue ) ) { kfree ( disk ) ; <S2SV_ModStart> queue = NULL ; continue ; } if (! capable ( CAP_SYS_RAWIO ) ||! capable ( CAP_SYS_RAWIO ) ||! capable ( CAP_SYS_RAWIO ) ||! capable ( CAP_SYS_RAWIO ) ) { kfree ( disk ) ; continue ; },0
294,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
295,"<S2SV_ModStart> ; if ( number_pixels > MagickMax ( number_pixels, max_packets ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( number_pixels > MagickMax ( number_pixels, max_packets ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( number_pixels > MagickMax ( number_pixels, max_packets ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( status",0
296,"<S2SV_ModStart> ) pktnum ; av_log ( s, AV_LOG_DEBUG, ""itime:0x%"" PRIx64 "", <S2SV_blank> pct:%d, <S2SV_blank> ict:%d\\n"", itime, pct, ict ) ; <S2SV_ModStart> ) pktnum ; av_log ( s, AV_LOG_DEBUG, ""itime:0x%"" PRIx64 "", <S2SV_blank> pct:%d, <S2SV_blank> ict:%d\\n"", itime, pct, ict ) ; for ( i = 0 ; i < ict ; i ++ ) { av_log ( s, AV_LOG_DEBUG, ""itime:0x%"" PRIx64 "", <S2SV_blank> pct:%d, <S2SV_blank> ict:%d\\n"", itime, pct, ict ) ; av_log ( s, AV_LOG_DEBUG, ""itime:0x%"" PRIx64 "", <S2SV_blank> pct:%d, <S2SV_blank> ict:%d\\n"", itime, pct, ict ) ; for ( i = 0 ; i < ict ; i ++ ) { av_log ( s, AV_LOG_DEBUG, ""itime:0x%"" PRIx64 "", <S2SV_blank> pct:%d, <S2SV_blank> ict:%d\\n",0
297,<S2SV_ModStart> srp ) ; if ( srp -> ops -> fops -> fops -> fops -> fops -> fops_read!= srp -> ops -> fops_read ) return - EACCES ; <S2SV_ModStart> srp ) ; if ( srp -> ops -> fops -> fops -> fops_read!= srp -> ops -> fops_read ) return - EACCES ; <S2SV_ModStart> srp ) ; if ( srp -> ops -> fops -> fops -> fops -> fops -> fops -> fops -> fops -> fops -> fops -> fops -> fops_read!= srp -> ops -> fops_read ) return - EACCES ; if ( srp -> ops -> fops -> fops -> fops -> fops_read!= srp -> ops -> fops_read ) return - EACCES ; if ( srp -> ops -> fops -> fops -> fops -> fops -> fops -> fops -> fops -> fops -> fops -> fops -> fops -> fops -> fops_read!= srp -> ops -> fops_read ) return - EACCES ;,0
298,"<S2SV_ModStart> ; # endif # if HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_context"", & security_context_handler, global_active ) ; # endif # if HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_context"", & security_context_handler, global_active ) ; install_keyword_root ( ""security_context"", & security_context_handler, global_active ) ; # if HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_context"", & security_context_handler, global_active ) ; # endif # if HAVE_DECL_CLONE_NEWNET install_keyword_root ( ""security_context"", & security_context_handler, global_active ) ; install_keyword_root ( ""security_context"", & security_context_handler, global_active ) ; # endif # ifdef _WITH_VRRP_ install_keyword ( ""smtp_alert_vrrp"", & smtp_alert_vrrp_handler ) ; # endif # ifdef _WITH_LVS_ install",0
299,<S2SV_ModStart> data ) { vpx_codec_priv_enc_mr_cfg_t * enc_cfg = ( vpx_codec_priv_enc_mr_cfg_t * ) data ; vpx_codec_ctx_t * const ctx = ( vpx_codec_ctx_t * ) ctx ; vpx_codec_priv_enc_mr_cfg_t * const priv_enc = ( vpx_codec_priv_enc_mr_cfg_t * ) priv_enc ; vpx_codec_priv_enc_mr_cfg_t * const priv_enc = ( vpx_codec_priv_enc_mr_cfg_t * ) data ; vpx_codec_ctx_t * const ctx = ( vpx_codec_ctx_t * ) ctx ; vpx_codec_priv_enc_mr_cfg_t * const priv_enc = ( vpx_codec_priv_enc_mr_cfg_t * ) priv_enc ; vpx_codec_priv_enc_mr_cfg_t * const priv_enc = ( vpx_codec_priv_enc_mr_cfg_t * ) priv_enc ;,0
300,"<S2SV_ModStart> 0 ) { if (! tmpptr ) { pr_err ( ""Unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> tmpbuf.\\n"" ) ; return - 1 ; } tmpptr = key + strlen ( key ) ; * tmpptr = '=' ; kfree ( tmpbuf ) ; return 1 ; } } param = iscsi_check_key ( key, phase, sender, param_list ) ; if (! param ) { if ( iscsi_add_notunderstood_response ( key, value, param_list ) < 0 ) { kfree ( tmpbuf ) ; return - 1 ; } start += strlen ( key ) + strlen ( value ) + 2 ; continue ; } if ( IS_PSTATE_PROPOSER ( param ) ) { if ( iscsi_check_acpi_state ( param, value ) < 0 ) { kfree ( tmpbuf ) ; return - 1 ; } SET_PSTATE_PROPOSER ( param ) ; } else { if ( iscsi_check_acpi_state ( param, value ) < 0 ) { kfree ( tmpbuf ) ; return - 1 ; }",0
301,"<S2SV_ModStart> ( t -> stamp_path <S2SV_ModEnd>, true, <S2SV_ModStart>, USEC_INFINITY, <S2SV_ModEnd> UID_INVALID, GID_INVALID",0
302,"<S2SV_ModStart> ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ) ) ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ) ) ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ) ) ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c%s%c <S2SV_blank> (0x%08x); <S2SV_blank> length=%d\\n"" <S2SV_ModEnd>, boxinfo -> <S2SV_ModStart> ) ) ; JAS_DBGLOG ( 10, ( ""preliminary <S2SV_blank> processing <S2SV_blank> of <S2SV_blank> JP2 <S2SV_blank> box: <S2SV_blank> type=%c",0
303,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> new_size ) { <S2SV_ModStart> new_size ) { size_t <S2SV_ModEnd> i ; assert",1
304,"<S2SV_ModStart> = 0 ; size_t <S2SV_ModEnd> copylen ; bool <S2SV_ModStart> ; if ( q -> flags & IFF_VNET_HDR ) { vnet_hdr_len = q -> vnet_hdr_sz ; err = - EINVAL ; len -= vnet_hdr_len ; err = memcpy_fromiovecend ( iv, 0, sizeof ( vnet_hdr ) ) ; if ( err < 0 ) goto err ; len -= vnet_hdr_len ; err = memcpy_fromiovecend ( ( void * ) & vnet_hdr, iv, 0, sizeof ( vnet_hdr ) ) ; if ( err < 0 ) goto err ; if ( ( vnet_hdr. flags & VIRTIO_NET_HDR_F_NEEDS_CSUM ) && vnet_hdr. csum_start + vnet_hdr. csum_offset + 2 > len ) vnet_hdr. hdr_len = vnet_hdr. csum_start + vnet_hdr. csum_offset + 2 ; err = - EINVAL ; if ( len < vnet_hdr. hdr_len )",0
305,"<S2SV_ModStart> nexthdr ) { struct ipv6_opt_hdr * exthdr = ( struct ipv6_opt_hdr * ) ( skb_network_header ( skb ) + 1 ) ; <S2SV_ModStart> offset + 1 <= packet_len <S2SV_ModEnd> ) { switch <S2SV_ModStart> case NEXTHDR_HOP : if ( ipv6_find_tlv ( skb, offset, IPV6_TLV_HAO ) >= 0 ) break ; # if IS_ENABLED ( CONFIG_IPV6_MIP6 ) if ( ipv6_find_tlv ( skb, offset, IPV6_TLV_HAO ) >= 0 ) break ; # endif <S2SV_ModStart> case NEXTHDR_DEST : # if IS_ENABLED ( CONFIG_IPV6_MIP6 ) if ( ipv6_find_tlv ( skb, offset, IPV6_TLV_HAO ) >= 0 ) break ; # endif if ( found_rhdr ) break ; # if IS_ENABLED ( CONFIG_IPV6_MIP6 ) if ( ipv6_find_tlv ( skb, offset, IPV6_TLV_HAO ) >= 0 ) break ; # endif if ( found_rhdr )",0
306,"<S2SV_ModStart> write_delta_q ( struct vpx_write_bit_buffer <S2SV_ModEnd> * wb, <S2SV_ModStart> 0 ) { vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> 1 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 4 ) ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> } else { vpx_wb_write_bit <S2SV_ModEnd> ( wb,",1
307,"<S2SV_ModStart> mbmi. mv. as_int ; mv_bias ( ref_frame_sign_bias [ above -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; if ( aboveleft -> mbmi. ref_frame!= INTRA_FRAME ) { mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ], ref_frame_sign_bias ) ; near_ref [ vcnt ] = left -> mbmi. ref_frame ; } vcnt ++ ; if ( left -> mbmi. mv. as_int!= 0 ) { mv_bias ( ref_frame_sign_bias [ left -> mbmi. ref_frame ], refframe, & near_mvs [ left -> mbmi. ref_frame ], refframe, & near_mvs [ vcnt ]",0
308,<S2SV_ModStart> ; sll -> sl_family = AF_INET ; sll -> sl_protocol = htons ( ETH_P_IP ) ; sll -> sl_protocol = htons ( ETH_P_IPV6 ) ; sll -> sl_protocol = htons ( ETH_P_IPV4 ) ; sll -> sl_protocol = htons ( ETH_P_IPV6 ) ; sll -> sl_protocol = htons ( ETH_P_IPV6 ) ; sll -> sl_family = AF_INET ; sll -> sl_protocol = htons ( ETH_P_IP ) ; sll -> sl_protocol = htons ( ETH_P_IPV6 ) ; sll -> sl_protocol = htons ( ETH_P_IPV4 ) ; sll -> sl_protocol = htons ( ETH_P_IPV6 ) ; sll -> sl_protocol = htons ( ETH_P_IPV6 ) ; sll -> sl_family = AF_INET6 ; sll -> sl_protocol = htons ( ETH_P_IP ) ; sl,0
309,"<S2SV_ModStart> return ; } if ( dj_report -> device_index < DJ_DEVICE_INDEX_MIN ) || ( dj_report -> device_index > DJ_DEVICE_INDEX_MAX ) ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index < DJ_DEVICE_INDEX_MIN ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index < DJ_DEVICE_INDEX_MIN ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank> device <S2SV_blank> index:%d\\n"", __func__, dj_report -> device_index ) ; return ; } if ( dj_report -> device_index < DJ_DEVICE_INDEX_MIN ) { dev_err ( & djrcv_hdev -> dev, ""%s: <S2SV_blank> invalid <S2SV_blank>",0
310,"<S2SV_ModStart> ) ) { pr_err <S2SV_ModEnd> ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> """,0
311,"<S2SV_ModStart> string, const size_t <S2SV_ModEnd> length ) {",1
312,"<S2SV_ModStart> asconf ) { sctp_addip_chunk_t * addip = ( sctp_addip_chunk_t * ) asconf -> chunk_hdr ; sctp_addip_chunk_t * addip = ( sctp_addip_chunk_t * ) addip <S2SV_ModEnd> ; __u32 serial <S2SV_ModStart> __u32 serial ; sctp_addip_chunk_t * addip = ( sctp_addip_chunk_t * ) asconf -> chunk_hdr -> data ; serial = ntohl ( addip -> addip_hdr. serial ) ; <S2SV_ModEnd> err_code = sctp_process_asconf_param <S2SV_ModStart> asconf, asconf_param ) ; if ( SCTP_ERROR_NO_ERROR!= err_code ) all_param_pass = 0 ; if (! all_param_pass ) sctp_add_asconf_response ( asconf_ack, addip -> crr_id, err_code, addip ) ; if ( SCTP_ERROR_RSRC_LOW == err_code ) goto done ; length = ntohs ( asconf_param -> param_hdr. length ) ; as",0
313,"<S2SV_ModStart> ; JAS_DBGLOG ( 100 <S2SV_ModEnd>, ( ""jas_realloc <S2SV_blank> called <S2SV_blank> with <S2SV_blank> %x,%zu\\n""",0
314,<S2SV_ModStart> exit ; } if ( unlikely ( m -> msg_name ) ) { m -> msg_name = 0 ; m -> msg_namelen = sizeof ( * m -> msg_name ) ; m -> msg_namelen = sizeof ( * m -> msg_name ) ; },0
315,<S2SV_ModStart> break ; # ifdef CONFIG_PPC_BOOK3S_64 case KVM_CAP_SPAPR_TCE : case KVM_CAP_SPAPR_TCE_64 : case KVM_CAP_SPAPR_TCE_VFIO : case KVM_CAP_SPAPR_VFIO_64 : case KVM_CAP_SPAPR_VFIO_64 : r =! hv_enabled ; break ; # if defined ( CONFIG_KVM_E500V2 ) || defined ( CONFIG_KVM_E500MC ) case KVM_CAP_SW_TLB : r =! hv_enabled ; break ; # endif # ifdef CONFIG_KVM_MPIC case KVM_CAP_IRQ_MPIC : r = 1 ; break ; # ifdef CONFIG_KVM_MPIC case KVM_CAP_IRQ_MPIC : r =! hv_enabled ; break ; # if defined ( CONFIG_KVM_E500V2 ) || defined ( CONFIG_KVM_E500MC ) case KVM_CAP_SW_TLB : r =! hv,0
316,"<S2SV_ModStart> msicap ; pci_populate_msicap ( dev <S2SV_ModEnd>, msgnum,",0
317,"<S2SV_ModStart> response_done ; } memset ( kvp_data -> data. key, 0, sizeof ( * kvp_data -> data. key ) ) ; memset ( kvp_data -> data. value, 0, sizeof ( * kvp_data -> data. value ) ) ; <S2SV_ModStart> 1 ) ; memcpy ( kvp_data -> data. value, value, sizeof ( * kvp_data -> data. value ) ) ; kvp_data -> data. key_size = 2 * ( keylen + 1 ) ; kvp_data -> data. key_type = REG_SZ ; icmsghdrp -> status = HV_S_OK ; response_done : memset ( kvp_data -> data. value, 0, sizeof ( * kvp_data -> data. value ) ) ; memcpy ( kvp_data -> data. value, value, sizeof ( * kvp_data -> data. value ) ) ; kvp_data -> data. value_size = 2 * ( valuelen + 1 ) ; icmsghdrp -> icflags = ICMSGHDRFLAG_TRANSACTION | ICMSGHDRFLAG_RESPONSE ; vmbus_",0
318,<S2SV_ModStart> log_file ; ctx = eventfp? eventfd_ctx_fileget ( eventfp ) : NULL ; d -> log_ctx = eventfp? eventfd_ctx_fileget ( eventfp ) : NULL ;,0
319,"<S2SV_ModStart> ; } } else if ( img -> color_space == OPJ_CLRSPC_SRGB ) { fprintf ( stderr, ""%s:%d:color_sycc_to_rgb\\n\\tCAN <S2SV_blank> NOT <S2SV_blank> CONVERT\\n"", __FILE__, __LINE__ ) ; return ; } else if ( img -> color_space == OPJ_CLRSPC_GRAY ) { fprintf ( stderr, ""%s:%d:color_sycc_to_rgb\\n\\tCAN <S2SV_blank> NOT <S2SV_blank> CONVERT\\n"", __FILE__, __LINE__ ) ; return ; } if ( img -> color_space == OPJ_CLRSPC_GRAY ) { img -> color_space = OPJ_CLRSPC_GRAY ; return ; } else if ( img -> color_space == OPJ_CLRSPC_SRGB ) { fprintf ( stderr, ""%s:%d:color_sycc_to_rgb\\n\\tCAN <S2SV_blank> NOT <S2SV_blank> CONVERT\\n"", __FILE__, __LINE__ ) ; return ; }",0
320,"<S2SV_ModStart> * mbuf = NULL ; int is_ext_ctrl ; size_t ctrls_size = 0 ; void __user * user_ptr = NULL ; <S2SV_ModStart> case _IOC_NONE : is_ext_ctrl = ( cmd == VIDIOC_S_EXT_CTRLS || cmd == VIDIOC_G_EXT_CTRLS || cmd == VIDIOC_TRY_EXT_CTRLS ) ; <S2SV_ModStart> case _IOC_READ : if ( _IOC_SIZE ( cmd ) <= sizeof ( sbuf ) ) { mbuf = kmalloc ( sizeof ( sbuf ), GFP_KERNEL ) ; if ( NULL == mbuf ) goto out ; parg = mbuf ; } err = - ENOMEM ; if ( _IOC_DIR ( cmd ) & _IOC_READ ) { mbuf = kmalloc ( _IOC_SIZE ( cmd ), GFP_KERNEL ) ; if ( NULL == mbuf ) goto out_ext_ctrl ; p -> error_idx = p -> count ; user_ptr = ( void __user * ) arg ; if ( copy_from_user ( mbuf, user_ptr, ctr",0
321,"<S2SV_ModStart> ; } if ( cmd -> flags & REDIS_CMD_DENYPASS ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" ) ; return REDIS_OK ; } if ( cmd -> flags & REDIS_CMD_DENYOOM ) { addReplyError ( c, ""command <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> when <S2SV_blank> used <S2SV_blank> memory <S2SV_blank> > <S2SV_blank> \'maxmemory\'"" )",0
322,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_registers ( rtl8150_t <S2SV_ModStart> data ) { int ret ; ret = <S2SV_ModEnd> usb_control_msg ( dev <S2SV_ModStart>, RTL8150_REQ_SET_REGS, RTL8150_REQT_WRITE, indx, 0, data, size, 500 ) ; if ( ret < 0 ) return ret ; ret = <S2SV_ModEnd> usb_control_msg ( dev <S2SV_ModStart>, 0 ), ret, <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
323,"<S2SV_ModStart> RESPONSE_RUN : { gtk_widget_get_screen ( GTK_WIDGET ( parameters -> parent_window ) ) ; uri = nautilus_file_get_uri ( parameters -> file ) ; DEBUG ( ""Launching <S2SV_blank> untrusted <S2SV_blank> launcher <S2SV_blank> %s"", uri ) ; nautilus_launch_desktop_file ( screen, uri, NULL, parameters -> parent_window ) ; g_free ( uri ) ; } break ; case RESPONSE_MARK_TRUSTED : { file = nautilus_file_get_location ( parameters -> file ) ; nautilus_file_mark_desktop_file_trusted ( file, parameters -> parent_window, TRUE, NULL, NULL ) ; g_object_unref ( file ) ; } break ; case RESPONSE_UNTRUSTED : { file = nautilus_file_get_location ( parameters -> file ) ; nautilus_file_mark_desktop_file_trusted ( file, parameters -> parent_window, TRUE, NULL, NULL ) ; g_object_unref ( file ) ; }",0
324,"<S2SV_ModStart> -> lsr_event ) { <S2SV_ModStart> lsr_event ) { dev_dbg ( dev, ""%s <S2SV_blank> ===== <S2SV_blank> Port <S2SV_blank> %u <S2SV_blank> LSR <S2SV_blank> Status <S2SV_blank> = <S2SV_blank> %02x, <S2SV_blank> Data <S2SV_blank> = <S2SV_blank> %02x <S2SV_blank> ======\\n"", __func__, port_number, edge_port -> lsr_mask, * data ) ; handle_new_lsr ( edge_port, 0, edge_port -> lsr_mask, * data ) ; } if ( urb -> actual_length ) { dev_dbg ( dev, ""%s <S2SV_blank> ===== <S2SV_blank> Port <S2SV_blank> %u <S2SV_blank> LSR <S2SV_blank> Status <S2SV_blank> = <S2SV_blank> %02x, <S2SV_blank> Data <S2SV_blank> = <S2SV_blank> %02x <S2SV_blank> ======\\n"", __func__, port_number, edge_port -> lsr_mask, * data ) ; handle_new_lsr ( edge_port, 0, edge_port -> lsr_mask, * data ) ; } if ( urb -> actual_length ) { dev_dbg ( dev, ""%s <S2SV_blank> ===== <S2SV_blank> Port <S2SV_blank> %u <S2SV_blank> LSR <S2SV_blank> Status <S2SV_blank> = <S2SV_blank> %02x <S2SV_blank> ======\\n"",",0
325,"<S2SV_ModStart> * cifs_find_smb_ses ( struct TCP_Server_Info * server, const <S2SV_ModStart> cifs_tcp_ses_lock ) ; list_for_each ( tmp, & server -> smb_ses_list ) { struct cifsSesInfo * ses = list_entry ( tmp, struct cifsSesInfo, smb_ses_list ) ; if ( strncmp ( ses -> userName, username, MAX_USERNAME_SIZE ) ) continue ; ++ ses -> ses_count ; return NULL ; } write_unlock ( & cifs_tcp_ses_lock ) ; if ( list_empty ( & server -> smb_ses_list ) ) { list_for_each ( tmp, & server -> smb_ses_list ) { struct cifsSesInfo * ses = list_entry ( tmp, struct cifsSesInfo, smb_ses_list ) ; if ( strncmp ( ses -> userName, username, MAX_USERNAME_SIZE ) ) continue ; ++ ses -> ses_count ; write_unlock ( & cifs_tcp_ses_lock ) ; ses = list_entry ( tmp, struct cifsSesInfo,",0
326,"<S2SV_ModStart> vpx_codec_err_t res ; # if CONFIG_VP9_HIGHBITDEPTH if ( ( ( cfg -> g_w!= ctx -> cfg. g_w ) || ( ( cfg -> g_h!= ctx -> cfg. g_h ) ) || ( ( cfg -> g_w!= ctx -> cfg. g_w ) || ( cfg -> g_h!= ctx -> cfg. g_h ) ) ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_w > ctx -> cfg. g_w ) || ( cfg -> g_h > ctx -> cfg. g_h ) ) ) ERROR ( ""Cannot <S2SV_blank> change <S2SV_blank> width <S2SV_blank> or <S2SV_blank> height <S2SV_blank> after <S2SV_blank> initialization"" ) ; if ( ( cfg -> g_lag_in_frames > ctx -> cfg. g_lag_in_frames ) ) ERROR ( ""Cannot <S2SV_blank> increase <S2SV_blank> lag_in_frames"" ) ; res = validate_config ( ctx, cfg, & ctx -> vp8_cfg, 0 ) ; if (! res ) { ctx -> cfg = * cfg ; set_vp8e_config ( & ctx",0
327,"<S2SV_ModStart>'<S2SV_blank>') { ptr = r_fs_name ( core -> fs, core -> offset ) ; if (! ( ptr = r_fs_name ( core -> fs, core -> offset ) ) ) eprintf ( ""Unknown <S2SV_blank> filesystem <S2SV_blank> type\\n"" ) ; else if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { if (! ( ptr = r_fs_name ( core -> fs, core -> offset ) ) ) eprintf ( ""Unknown <S2SV_blank> filesystem <S2SV_blank> type\\n"" ) ; else if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ; } else { if (! r_fs_mount ( core -> fs, ptr, input, off ) ) eprintf ( ""Cannot <S2SV_blank> mount <S2SV_blank> %s\\n"", input ) ;",0
328,"<S2SV_ModStart> vm_flags & VM_NORESERVE <S2SV_ModEnd> ) return 0 <S2SV_ModStart> return chg ; ret = hugetlb_acct_memory ( h, chg ) ; if ( ret < 0 ) { ret = - ENOSPC ; hugetlb_put_quota ( inode -> i_mapping, chg ) ; return ret ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; if ( ret < 0 ) { ret = - ENOSPC ; ret = hugetlb_acct_memory ( h, chg ) ; if ( ret < 0 ) { ret = - ENOSPC ; hugetlb_put_quota ( inode -> i_mapping, chg ) ; return ret ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; return ret ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode ->",0
329,"<S2SV_ModStart> new ) { const struct user_namespace * ns = current_user_ns ( ) ; struct user_namespace * ns = current_user_ns ( ) ; if (! ns -> user_ns ) ns = current_user_ns ( ) ; if (! ns -> user_ns ) ns = current_user_ns ( ) ; if ( ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns, new -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns -> user_ns",0
330,"<S2SV_ModStart> = 0 ; size_t scanned = ( size_t ) 0U ; size_t readnbd = ( size_t ) 0U ; if ( readnbd > ( size_t ) 0U ) { readnbd -= scanned ; memmove ( cmd, cmd + scanned, readnbd ) ; scanned = ( size_t ) 0U ; } if ( readnb <= ( ssize_t ) 0 && errno == EINTR ) { while ( ( readnb = read ( clientfd, cmd + readnbd, cmdsize - readnbd ) ) < ( ssize_t ) 0 && errno == EINTR ) ; } if ( readnb <= ( ssize_t ) 0 && errno == EINTR ) { while ( ( readnb = read ( clientfd, cmd + scanned, cmdsize - scanned ) ) < ( ssize_t ) 0 && errno == EINTR ) ) { while ( ( readnb = read ( clientfd, cmd + readnbd, cmdsize - readnbd ) ) < ( ssize_t ) 0 && errno == EINTR ) ; } if ( readnb <= ( ssize_t ) 0 && errno",0
331,"<S2SV_ModStart> & orig ) ; mrb_io * fptr_copy = NULL ; mrb_io * fptr_orig = io_get_open_fptr ( mrb, orig ) ; DATA_TYPE ( copy ) = & mrb_io_type ; DATA_PTR ( copy ) = fptr_copy ; buf = mrb_iv_get ( mrb, orig, mrb_intern_cstr ( mrb, ""@buf"" ) ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; DATA_PTR ( copy ) = fptr_copy ; buf = mrb_iv_get ( mrb, orig, mrb_intern_cstr ( mrb, ""@buf"" ) ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; mrb_iv_set ( mrb, copy, mrb_intern_cstr ( mrb, ""@buf"" ), buf ) ; mrb_iv_set ( mrb, copy",0
332,"<S2SV_ModStart>,. match_data. type_data. lookup_type = KEYRING_SEARCH_LOOKUP_DIRECT,. match_data. flags = KEY_FLAG_UID_KEYRING | KEY_FLAG_UID_KEYRING | KEY_FLAG_UID_KEYRING | KEY_FLAG_UID_KEYRING | KEY_FLAG_UID_KEYRING | KEY_FLAG_UID_KEYRING | KEY_FLAG_UID_KEYRING | KEY <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
333,<S2SV_ModStart> cpi ) { # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & VPX_FLAG_HIGHBITDEPTH ) { cpi -> cur_buf -> flags &= ~ VPX_FLAG_HIGHBITDEPTH ; cpi -> cur_buf -> flags &= ~ VPX_FLAG_HIGHBITDEPTH ; } # endif # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & VPX_FLAG_HIGHBITDEPTH ) { # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & VPX_FLAG_HIGHBITDEPTH ) { cpi -> cur_buf -> flags &= ~ VPX_FLAG_HIGHBITDEPTH ; cpi -> cur_buf -> flags &= ~ VPX_FLAG_HIGHBITDEPTH ; # endif # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & VPX_FLAG_HIGHBITDEPTH ) { # if CONFIG_VP9_HIGHBITDEPTH if ( cpi -> cur_buf -> flags & VPX_FLAG_HIGHBITDEPTH ) cpi -> cur_,0
334,"<S2SV_ModStart> return res ; res = tee_mmu_check_access_rights ( utc, TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER, ( uaddr_t ) param, sizeof ( struct tee_ta_param ) ) ; if ( res!= TEE_SUCCESS ) return res ; <S2SV_ModStart>, callee_params ) ; res = tee_mmu_check_access_rights ( utc, TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER, ( uaddr_t ) param, sizeof ( struct tee_ta_param ) ) ; if ( res!= TEE_SUCCESS ) return res ; res = tee_mmu_check_access_rights ( utc, TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER, ( uaddr_t ) param, sizeof ( struct tee_ta_param ) ) ; if ( res!= TEE_SUCCESS ) return res ; res = tee_mmu_check_access_rights ( utc, TEE_MEMORY_ACCESS_READ | TEE_MEMORY_ACCESS_ANY_OWNER, ( uaddr",0
335,"<S2SV_ModStart> ; old_cs = get_segment_selector <S2SV_ModEnd> ( ctxt, <S2SV_ModStart>, VCPU_SREG_CS ) ; memcpy ( & sel, ctxt -> src. valptr + ctxt -> op_bytes, 2 ) ; if (! load_segment_descriptor ( ctxt, sel, VCPU_SREG_CS ) ) return X86EMUL_CONTINUE ; memcpy ( & ctxt -> _eip, ctxt -> src. valptr + ctxt -> op_bytes, 2 ) ; if ( load_segment_descriptor ( ctxt, sel, VCPU_SREG_CS ) ) return X86EMUL_CONTINUE ; memcpy ( & ctxt -> _eip, ctxt -> src. valptr + ctxt -> op_bytes, 2 ) ; ctxt -> src. val = old_cs ; rc = em_push ( ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; rc = em_push ( ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) return rc ; ctxt -> src. val = old_cs ; rc = em_push ( ctxt ) ; if ( rc!= X86EMUL_CONTINUE ) return",0
336,"<S2SV_ModStart> ; if ( ( j = 0 ) < j ) { av_log ( avctx, AV_LOG_ERROR, ""nreslevels2decode <S2SV_blank> %d <S2SV_blank> invalid <S2SV_blank> or <S2SV_blank> uninitialized\\n"", j ) ; return AVERROR_INVALIDDATA ; } if ( ( j = 0 ) < j ) { av_log ( avctx, AV_LOG_ERROR, ""nreslevels2decode <S2SV_blank> %d <S2SV_blank> invalid <S2SV_blank> or <S2SV_blank> uninitialized\\n"", j ) ; return AVERROR_INVALIDDATA ; } if ( ( j = 0 ) < j ) { av_log ( avctx, AV_LOG_ERROR, ""nreslevels2decode <S2SV_blank> %d <S2SV_blank> invalid <S2SV_blank> or <S2SV_blank> uninitialized\\n"", j ) ; return AVERROR_INVALIDDATA ; } if ( ( j = 0 ) < j ) { av_log ( avctx, AV_LOG_ERROR, ""nreslevels2decode <S2SV_blank> %d <S2SV_blank> invalid <S2SV_blank> or <S2SV_blank> uninitialized\\n"", j ) ; return AVERROR_INVALIDDATA ; } if ( ( j = 0 ) < j ) { av_log ( avctx, AV_LOG_ERROR, ""nreslevels",0
337,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""usage: <S2SV_blank> condump <S2SV_blank> <filename>\\n"" ) ; return ; } if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""usage: <S2SV_blank> condump <S2SV_blank> <filename>\\n"" ) ; return ; }",0
338,"<S2SV_ModStart> ; } struct reloc_struct_t * got_table = calloc ( 1, n_got * sizeof ( ut32 ) ) ; if (! got_table ) { r_list_free ( list ) ; return NULL ; } <S2SV_ModStart> reloc_struct_t * got_table = calloc ( 1, n_got * sizeof ( ut32 ) ) ; if (! got_table ) { r_list_free ( list ) ; return NULL ; } got_table = calloc ( 1, n_got * sizeof ( ut32 ) ) ; if ( got_table ) { ut32 offset = 0 ; for ( i = 0 ; i < n_got ; i ++ ) { ut32 got_entry ; if ( obj -> hdr -> data_start + offset + 4 > obj -> size || obj -> hdr -> data_start + offset + 4 < obj -> size || obj -> hdr -> data_start + offset + 4 < obj -> size || obj -> hdr -> data_start + offset + 4 ) { break ; } len = r_buf_read_at ( obj -> b, obj -> hdr -> data_start + offset, ( ut8 * ) & got_",0
339,"<S2SV_ModStart> ; if (! capable ( CAP_SYS_ADMIN ) ) return - EPERM ; if ( info -> si_code < 0 ) return - EPERM ; if ( info -> si_signo < 0 ) info -> si_signo = sig ; return do_send_specific ( tgid, pid, sig, info ) ; } if ( info -> si_code >= 0 ) { info -> si_code = - EPERM ; info -> si_signo = sig ; return do_send_specific ( tgid, pid, sig, info ) ; } if ( info -> si_code >= 0 ) return - EPERM ; if ( info -> si_code >= 0 ) { info -> si_signo = sig ; return do_send_specific ( tgid, pid, sig, info ) ; } if ( info -> si_code >= 0 ) { info -> si_code = - EPERM ; info -> si_signo = sig ; return do_send_specific ( tgid, pid, sig, info ) ; } if ( info -> si_code >= 0 ) return - EPERM ; if ( info -> si_code >= 0 ) { info",0
340,"<S2SV_ModStart> tw ; * p_tx0 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> tx0 + p * p_cp -> tdx ), ( OPJ_INT32 ) p_image -> x0 ) ; * p_tx1 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> tx0 + p * p_cp -> tdx ), ( OPJ_INT32 ) p_image -> x1 ) ; * p_ty0 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> ty0 + q * p_cp -> tdy ), ( OPJ_INT32 ) p_image -> y0 ) ; * p_ty1 = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> ty0 + q * p_cp -> tdy ), ( OPJ_INT32 ) p_image -> y1 ) ; * p_max_prec = opj_int_max ( ( OPJ_INT32 ) ( p_cp -> tx0 + p * p_cp -> tdx ),",0
341,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> char * create_output_name <S2SV_ModStart> fname ) ; if (! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } if (! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } if (! ( name = ( unsigned char * ) malloc ( x + 2 ) ) ) { fprintf ( stderr, ""out <S2SV_blank> of <S2SV_blank> memory!\\n"" ) ; return NULL ; } * name = '\\0' ; if ( dir ) { strcpy ( ( char * ) name, ( char * ) dir ) ; strcat ( ( char * ) name, ""/"" ) ; } while ( * fname == sep ) fname ++ ; p = & name [ strlen ( ( char * ) name ) ] ; fe = & fname [ strlen ( ( char * ) fname ] ; if ( utf8 ) { do { if ( fname >= fe ) { free ( name )",0
342,"<S2SV_ModStart> var_hash ; zval * options = NULL, * classes = NULL ; HashTable * class_hash = NULL ; if ( zend_hash_str_find ( Z_ARRVAL_P ( options ), ""allowed_classes"", sizeof ( ""allowed_classes"" ) - 1 ) ) { classes = zend_hash_str_find ( Z_ARRVAL_P ( options ), ""allowed_classes"", sizeof ( ""allowed_classes"" ) - 1 ) ; if ( classes ) { class_hash = ( HashTable * ) zend_hash_str_find ( Z_ARRVAL_P ( classes ), ""allowed_classes"", sizeof ( ""allowed_classes"" ) - 1 ) ) ; } if ( class_hash && Z_TYPE_P ( classes ) == IS_ARRAY ) { convert_to_string_ex ( Z_STR_P ( classes ) ) ; lcname = zend_string_tolower ( Z_STR_P ( classes ) ) ; zend_hash_add_empty_element ( class_hash, lcname ) ; zend_string_release ( lcname ) ; } ZEND_HASH_FOREACH_END (",0
343,"<S2SV_ModStart> __err ; kfree ( tu -> tqueue ) ; tu -> tqueue = NULL ; if ( tu -> tread ) { tu -> tread = kmalloc ( tu -> queue_size * sizeof ( struct snd_timer_tread ), GFP_KERNEL ) ; if ( tu -> tread ) { tu -> tread = kmalloc ( tu -> queue_size * sizeof ( struct snd_timer_read ), GFP_KERNEL ) ; if ( tu -> tread ) { tu -> tread = kmalloc ( tu -> queue_size * sizeof ( struct snd_timer_tread ), GFP_KERNEL ) ; if ( tu -> tread ) { tu -> tread = kmalloc ( tu -> queue_size * sizeof ( struct snd_timer_read ), GFP_KERNEL ) ; if ( tu -> tread ) { tu -> tread = kmalloc ( tu -> queue_size * sizeof ( struct snd_timer_tread ), GFP_KERNEL ) ; if ( tu -> tread ) { tu -> tread = kmalloc ( tu -> queue_size * sizeof ( struct snd_timer_tread",0
344,<S2SV_ModStart> return GF_ISOM_INVALID_FILE ; if (! gf_bs_check_rem ( bs ) ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> - 8 ; if (! gf_bs_check_rem ( bs ) ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> - 8 ; if (! gf_bs_check_rem ( bs ) ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> - 8 ; if (! gf_bs_check_rem ( bs ) ) return GF_ISOM_INVALID_FILE ; if (! gf_bs_check_rem ( bs ) ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> - 8 ; if (! gf_bs_check_rem ( bs ) ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> - 8 ; if (! gf_bs_check_rem ( bs ) ) return GF_ISOM_INVALID_FILE ; <S2SV_ModStart> - 8 ; if (! gf_bs_check_rem ( bs ) ) return GF_ISOM_INVALID_FILE ; if (! gf_bs_check_rem ( bs ) ) return GF_,0
345,<S2SV_ModStart> ) ; else if (! ctx -> priv -> alg_priv ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ctx -> iface -> enc. get_glob_hdrs ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ctx -> priv -> alg_priv -> get_glob_hdrs ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ctx -> priv -> alg_priv -> get_glob_hdrs ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ctx -> iface -> enc. get_glob_hdrs ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ctx -> priv -> alg_priv -> get_glob_hdrs ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ctx -> priv -> alg_priv -> get_glob_hdrs ) ctx -> err = VPX_CODEC_INCAPABLE ; else if (! ctx -> iface -> enc. get_glob_hdrs ) ctx -> err = VPX,0
346,<S2SV_ModStart> = US ; uschar * cmdline_syslog_name = NULL ; uschar * cmdline_syslog_line = NULL ; uschar * cmdline_syslog_line = NULL ; uschar * cmdline_syslog_line = NULL ; uschar * cmdline_syslog_line = NULL ; uschar * cmdline_syslog_line = NULL ; uschar * cmdline_syslog_line = NULL ; uschar * cmdline_syslog_line = NULL ; uschar * cmdline_syslog_line = NULL ; uschar * cmdline_syslog_line = NULL ; uschar * cmdline_syslog_line = NULL ; uschar * cmdline_syslog_line = NULL ; uschar * cmdline_syslog_line = NULL ; uschar * cmdline_syslog_line = NULL ; uschar * cmdline_syslog_line = NULL ; uschar * cmdline_syslog_line = NULL ; uschar * cmdline_syslog_line = NULL ; uschar * cmdline_syslog_line = NULL ; uschar * cmdline_syslog_line = NULL ; uschar * cmdline_syslog_line = NULL ; uschar * cmdline_syslog_line =,0
347,"<S2SV_ModStart> += 6 ; if ( strlen ( p ) > 0 ) s -> seekable = strtoll ( p, NULL, 10 ) ; if ( strlen ( p ) > 0 ) s -> filesize = strtoll ( p + 1, NULL, 10 ) ; if ( strlen ( p ) > 0 ) s -> seekable = strtoll ( p + 1, NULL, 10 ) ; if ( s -> seekable == - 1 && (! s -> is_akamai || s -> filesize!= 2147483647 ) ) h -> is_streamed = 0 ; else if ( strlen ( p ) > 0 ) s -> seekable = strtoll ( p, NULL, 10 ) ; if ( ( slash = strchr ( p, '/' ) ) && strlen ( slash ) > 0 ) s -> seekable = strtoll ( slash + 1, NULL, 10 ) ; if ( s -> seekable == - 1 && (! s -> is_akamai || s -> filesize!= 2147483647 ) ) h -> is_streamed = 0 ;",0
348,"<S2SV_ModStart> * cr ; size_t maxw, maxh, max ; size_t offset, upb ; size_t i, j ; size_t maxw, maxh, max ; size_t offset, upb ; maxw = ( size_t ) img -> comps [ 0 ]. w ; maxh = ( size_t ) img -> comps [ 0 ]. h ; maxw = ( size_t ) img -> comps [ 0 ]. w ; maxw = ( size_t ) img -> comps [ 0 ]. w ; maxh = ( size_t ) img -> comps [ 0 ]. h ; y = img -> comps [ 0 ]. data ; cb = img -> comps [ 1 ]. data ; cr = img -> comps [ 2 ]. data ; d0 = r = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; d1 = g = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; d2 = b = ( int * ) malloc ( sizeof ( int ) * ( size_t ) max ) ; if ( r == NULL || g == NULL || b ==",0
349,"<S2SV_ModStart> void nfs4_state_set_mode_locked ( fmode_t fmode <S2SV_ModEnd> ) { if <S2SV_ModStart> { if ( fmode & ( FMODE_READ | FMODE_WRITE ) )!= ( state -> state & FMODE_READ ) ) { list_move ( & state -> open_states, & state -> owner -> so_states ) ; } else { list_move_tail ( & state -> open_states, & state -> owner -> so_states ) ; } if ( ( state -> state & FMODE_READ )!= ( state -> state & FMODE_READ ) ) { if ( state -> state & FMODE_WRITE ) list_move ( & state -> open_states, & state -> owner -> so_states ) ; } else { list_move ( & state -> open_states, & state -> owner -> so_states ) ; } state -> state = mode ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
350,"<S2SV_ModStart> return SSH_ERR_INVALID_ARGUMENT ; if ( ( r = sshpkt_get_string ( ssh, NULL, NULL ) )!= 0 ) return r ; for ( i = 0 ; i < KEX_COOKIE_LEN ; i ++ ) if ( ( r = sshpkt_get_u8 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_u32 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_string ( ssh, NULL, NULL ) )!= 0 ) return r ; for ( i = 0 ; i < PROPOSAL_MAX ; i ++ ) if ( ( r = sshpkt_get_u8 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_string ( ssh, NULL, NULL ) )!= 0 || ( r = sshpkt_get_u32 ( ssh, NULL ) )!= 0 || ( r = sshpkt_get_end ( ssh ) )!= 0 ) return r ; for ( i = 0 ; i < PROPOSAL_MAX ; i ++ ) if ( ( r = sshpkt_get_u32 ( ssh, NULL",0
351,"<S2SV_ModStart> ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.constants.one <S2SV_blank> + <S2SV_blank> 1 <S2SV_blank> == <S2SV_blank> tests.constants.two <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> { <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> condition: <S2SV_blank> tests.constants.foo <S2SV_blank> == <S2SV_blank> \\""foo\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> }"", NULL ) ; assert_true_rule ( ""import <S2SV_blank> \\""tests\\"" <S2SV_blank> \\\n <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
352,"<S2SV_ModStart> if ( length > GetBlobSize ( pwp_image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> if ( length > GetBlobSize ( pwp_image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> if ( length > GetBlobSize ( pwp_image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> if ( length > GetBlobSize ( pwp_image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> if ( length > GetBlobSize ( pwp_image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> if ( length > GetBlobSize ( pwp_image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> if ( length > GetBlobSize ( pwp_image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; <S2SV_ModStart> if ( length > GetBlobSize ( pwp_image ) ) Throw",0
353,"<S2SV_ModStart> 0 ; char <S2SV_ModEnd> lbase [ 256 <S2SV_ModStart> 256 ] ; char <S2SV_ModEnd> strbase [ 256 <S2SV_ModStart> 256 ] ; char <S2SV_ModEnd> ltest [ 256 <S2SV_ModStart> 256 ] ; char <S2SV_ModEnd> strtest [ 256 <S2SV_ModStart> 256 ] ; <S2SV_ModEnd> if ( parse_cmdline_cmp <S2SV_ModStart> ( argc, argv, & inParam ) == 1 ) { compare_dump_files_help_display ( ) ; goto cleanup ; } printf ( ""******Parameters********* <S2SV_blank> \\n"" ) ; printf ( "" <S2SV_blank> base_filename <S2SV_blank> = <S2SV_blank> %s\\n"", inParam. base_filename ) ; printf ( "" <S2SV_blank> test_filename <S2SV_blank> = <S2SV_blank> %s\\n"", inParam. test_filename ) ; if ( fgets ( lbase, sizeof ( lbase ), fbase ) && fgets ( ltest, sizeof ( ltest ), fbase ) ) { printf ( ""Ok.\\n"" ) ; while ( fgets ( lbase, sizeof ( lbase ), fbase ) && fgets ( ltest, sizeof ( ltest ), ftest ) ) { int nbase = sscanf ( lbase, ""%255[^\\r\\n]"", strbase ) ; int ntest = sscanf ( ltest",0
354,<S2SV_ModStart> intf ) { <S2SV_ModEnd> if ( cdc_ncm_select_altsetting <S2SV_ModStart> - ENODEV ; <S2SV_ModEnd> ret = cdc_ncm_bind_common <S2SV_ModStart> 0 ) ; <S2SV_ModEnd> return ret ;,0
355,"<S2SV_ModStart> 0 ; } if ( elem. in_sg [ 0 ]. iov_len!= len ) { virtqueue_push ( vq, & elem, len ) ; virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; } if ( elem. out_sg [ 0 ]. iov_len!= len ) { virtqueue_push ( vq, & elem, len ) ; virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; } if ( elem. out_sg [ 0 ]. iov_len!= len ) { virtqueue_push ( vq, & elem, len ) ; virtio_notify ( VIRTIO_DEVICE ( vser ), vq ) ; return 0 ; }",0
356,"<S2SV_ModStart> i, ( unsigned ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ), ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ) ) ; fprintf ( out, ""expn[%d] <S2SV_blank> = <S2SV_blank> 0x%04x; <S2SV_blank> mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", ( unsigned ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ), ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ), ( unsigned ) JPC_QCX_GETMANT ( qcd -> compparms. stepsizes [ i ] ) ) ; fprintf ( out, ""expn[%d] <S2SV_blank> = <S2SV_blank> 0x%04x; <S2SV_blank> mant[%d] <S2SV_blank> = <S2SV_blank> 0x%04x;\\n"", ( unsigned ) JPC_QCX_GETEXPN ( qcd -> compparms. stepsizes [ i ] ), ( unsigned ) JPC_QCX",0
357,"<S2SV_ModStart> EINVAL ; err = check_entry_offsets ( e, e -> target_offset, e -> next_offset ) ; if ( err ) return err ; for ( h = 0 ; h < NF_INET_NUMHOOKS ; h ++ ) { if (! check_hook ( e ) ) { pr_debug ( ""Hook <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> "" ""ACCEPT/DROP\\n"" ) ; return - EINVAL ; } newinfo -> hook_entry [ h ] = hook_entries [ h ] ; if ( ( unsigned char * ) e - base == hook_entries [ h ] ) newinfo -> hook_entry [ h ] = hook_entries [ h ] ; if ( ( unsigned char * ) e - base == underflows [ h ] ) newinfo -> underflow [ h ] = underflows [ h ] ; if (! check_underflow ( e ) ) { pr_debug ( ""Underflows <S2SV_blank> must <S2SV_blank> be <S2SV_blank> unconditional <S2SV_blank> and <S2SV_blank> "" ""use <S2SV_blank> the <S2SV_blank> STANDARD <S2SV_blank> target <S2SV_blank> with <S2SV_blank> "" ""ACCEPT/DROP\\n"" ) ; return -",0
358,"<S2SV_ModStart> AV_PIX_FMT_PAL8 ; } else if ( c -> format == CHUNKY ) { avpriv_request_sample ( avctx, ""Pixel <S2SV_blank> format <S2SV_blank> 0x%0x"", c -> format ) ; return AVERROR_PATCHWELCOME ; }",0
359,"<S2SV_ModStart> 1 ) ; } if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( - 1 ) ; } <S2SV_ModStart> 1 ) ; if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( - 1 ) ; } <S2SV_ModStart> 1 ) ; if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( - 1 ) ; } <S2SV_ModStart> 1 ) ; if ( length > caplen - 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [|osi]"" ) ) ; return ( - 1 ) ; }",0
360,<S2SV_ModStart> q ) { if ( q -> timer ) <S2SV_ModStart> timer ) ; snd_use_lock_sync ( & q -> use_lock ) ; <S2SV_ModStart> q ) ; },0
361,"<S2SV_ModStart> int error ; u64 <S2SV_ModEnd> start = ( <S2SV_ModStart> ~ PAGE_CACHE_MASK ; unsigned int start_offset = ( offset & ~ PAGE_CACHE_MASK ) >> PAGE_CACHE_SHIFT ; unsigned int end = ( offset + len - 1 ) >> PAGE_CACHE_SHIFT ; pgoff_t curr ; struct page * page = grab_cache_page_write_begin ( inode -> i_mapping, curr, AOP_FLAG_NOFS ) ; if ( page ) { i_size_write ( inode, offset + to ) ; } else { mark_inode_dirty ( inode ) ; brelse ( dibh ) ; goto out ; } curr = start ; offset = start << PAGE_CACHE_SHIFT ; from = start_offset ; to = PAGE_CACHE_SIZE ; error = write_empty_blocks ( page, from, to, mode ) ; if (! error && offset + to > inode -> i_size &&! ( mode & FALLOC_FL_KEEP_SIZE ) ) { i_size_write ( inode, offset + to ) ; } unlock_page ( page ) ; page_cache_release ( page ) ; if ( error ) goto out",0
362,"<S2SV_ModStart> b ) ; VipsForeignLoadClass <S2SV_ModEnd> * class = <S2SV_ModStart> class = VIPS_FOREIGN_LOAD_GET_CLASS <S2SV_ModEnd> ( load ) <S2SV_ModStart> ( load ) || vips_image_pio_input ( load -> real ) ) return ( NULL ) ; if (! vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; vips_image_pipelinev ( load -> out, load -> out -> dhint, load -> real, NULL ) ; } else { g_object_set_qdata ( G_OBJECT ( load -> real ), vips__foreign_load_operation, load ) ; if ( class -> load ( load ) || vips_image_pio_input ( load -> real ) ) return ( NULL ) ; if (! vips_foreign_load_iscompat ( load -> real, out ) ) return ( NULL ) ; g_object_set_qdata ( G_OBJECT ( load -> real ), vips__foreign_load_operation, load ) ; if ( class -> load ( load ) || vips_image_pio_input ( load -> real ) ) return ( NULL ) ;",0
363,"<S2SV_ModStart> image_noffset ) { if ( noffset < 0 ) { printf ( "" <S2SV_blank> error!\\n%s <S2SV_blank> for <S2SV_blank> \'%s\' <S2SV_blank> hash <S2SV_blank> node <S2SV_blank> in <S2SV_blank> \'%s\' <S2SV_blank> image <S2SV_blank> node\\n"", err_msg, fit_get_name ( fit, noffset, NULL ), fit_get_name ( fit, image_noffset, NULL ) ) ; return - 1 ; } name = fit_get_name ( fit, noffset, NULL ) ; if (! strncmp ( name, FIT_SIG_NODENAME, strlen ( FIT_SIG_NODENAME ) ) ) { printf ( "" <S2SV_blank> error!\\n%s <S2SV_blank> for <S2SV_blank> \'%s\' <S2SV_blank> hash <S2SV_blank> node <S2SV_blank> in <S2SV_blank> \'%s\' <S2SV_blank> image <S2SV_blank> node\\n"", err_msg, fit_get_name ( fit, image_noffset, NULL ) ) ; return - 1 ; }",0
364,<S2SV_ModStart> ( <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
365,"<S2SV_ModStart> kfifo_alloc ( & state -> rx_kfifo_head <S2SV_ModEnd>, CX23888_IR_RX_KFIFO_SIZE, <S2SV_ModStart> - ENOMEM ; state -> rx_kfifo_head = kfifo_alloc ( & state -> rx_kfifo_head, CX23888_IR_RX_KFIFO_SIZE, GFP_KERNEL ) ; state -> tx_kfifo_head = kfifo_alloc ( & state -> tx_kfifo_head, CX23888_IR_TX_KFIFO_SIZE, GFP_KERNEL ) ; state -> dev = dev ; sd = & state -> sd ; v4l2_subdev_init ( sd, & cx23888_ir_controller_ops ) ; v4l2_set_subdevdata ( sd, state ) ; ret = cx23888_ir_write4 ( dev, CX23888_IR_IRQEN_REG, 0 ) ; mutex_init ( & state -> tx_params_lock ) ; default_params = default_rx_params ; v4l",0
366,"<S2SV_ModStart> service_name_tlv_length ) ; if ( service_name_tlv == NULL ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> service_name_tlv_length ) ; if ( miux_tlv == NULL ) { err = - ENOMEM ; goto error_tlv ; } <S2SV_ModStart> rw_tlv_length ) ; if ( service_name_tlv == NULL ) { err = - ENOMEM ; goto error_tlv ; } service_name_tlv = nfc_llcp_build_tlv ( LLCP_TLV_SN, sock -> service_name, sock -> service_name_len, & service_name_tlv_length ) ; if ( rw_tlv == NULL ) { err = - ENOMEM ; goto error_tlv ; } service_name_tlv = nfc_llcp_build_tlv ( LLCP_TLV_SN, sock -> service_name, sock -> service_name_len, & service_name_tlv_length ) ; if ( service_name_tlv == NULL ) { err = - ENOMEM ; goto error_tlv ;",0
367,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct monitor * <S2SV_ModStart> ; if ( <S2SV_ModEnd> options. compression <S2SV_ModStart>. compression ) { mon -> m_zback = mm_create ( NULL, MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; } else { mon -> m_zback = mm_create ( NULL, MM_MEMSIZE ) ; } mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, MM_MEMSIZE ) ; mon -> m_zlib = mm_create ( NULL, 20 * MM_MEMSIZE ) ; mon -> m_packet_set_compress_hooks ( ssh, mon -> m_zlib, ( ssh_packet_set_compress_hooks_func * ) mm_zalloc, ( ssh_packet_comp_alloc_func * ) mm_zalloc, ( ssh_packet_comp_free_func * ) mm",0
368,"<S2SV_ModStart> * iface, vpx_codec_dec_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_POSTPROC ) &&! ( iface -> caps & VPX_CODEC_CAP_POSTPROC ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT_FRAGMENTS ) &&! ( iface -> caps & VPX_CODEC_CAP_INPUT_FRAGMENTS ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_INPUT",0
369,"<S2SV_ModStart> * chan ; jas_uint16 numchans ; jas_uint16 type ; jas_uint16 assoc ; <S2SV_ModStart> unsigned int channo ; numchans = jp2_getuint16 ( in, & chan -> type ) ; assoc = jp2_getuint16 ( in, & chan -> assoc ) ; if (! ( cdef -> ents = jas_alloc2 ( cdef -> numchans, sizeof ( jas_uint16 ) ) ) ) { return - 1 ; } for ( channo = 0 ; channo < cdef -> numchans ; ++ channo ) { chan = & cdef -> ents [ channo ] ; if ( jp2_getuint16 ( in, & chan -> type ) || jp2_getuint16 ( in, & chan -> assoc ) ) { return - 1 ; } if (! ( cdef -> ents = jas_alloc2 ( cdef -> numchans, sizeof ( jas_uint16 ) ) ) { return - 1 ; } for ( channo = 0 ; channo < cdef -> numchans ; ++ channo ) { chan = & cdef -> ents [ channo",0
370,"<S2SV_ModStart> |= TJA1100_CONFIG1_MII_MODE_RMII_25MHZ ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_EXTENDED_CTRL ) ; value |= TJA1100_EXTENDED_CTRL_CONFIG_EN ; tja1100WritePhyReg ( interface, TJA1100_EXTENDED_CTRL, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, TJA1100_CONFIG1 ) ; value |= TJA1100_CONFIG1_AUTO_OP ; tja1100WritePhyReg ( interface, TJA1100_CONFIG1, value ) ; value = tja1100ReadPhyReg ( interface, T",0
371,<S2SV_ModStart> ; if ( code == ICMP_DEST_UNREACH ) code = ICMP_DEST_UNREACH ; if ( code == ICMP_DEST_UNREACH ) code = ICMP_DEST_UNREACH ; if ( code == ICMP_DEST_UNREACH ) code = ICMP_DEST_UNREACH ; if ( code == ICMP_DEST_UNREACH ) code = ICMP_DEST_UNREACH ; if ( code == ICMP_DEST_UNREACH ) code = ICMP_DEST_UNREACH ; if ( code == ICMP_DEST_UNREACH ) code = ICMP_DEST_UNREACH ; if ( code == ICMP_DEST_UNREACH ) code = ICMP_DEST_UNREACH ; if ( code == ICMP_DEST_UNREACH ) code = ICMP_DEST_UNREACH ; if ( code == ICMP_DEST_UNREACH ) code = ICMP_DEST_UNREACH ; if ( code == ICMP_DEST_UNREACH ) code = ICMP,0
372,"<S2SV_ModStart> len ; } ND_TCHECK_32BITS ( p + 2 ) ; <S2SV_ModStart> 4 ) ; if ( ndo -> ndo_vflag < 2 ) print_unknown_data ( ndo, & p [ 2 ], ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> "", len - 2 ) ; break ; default : if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo, & p [ 2 ], ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> "", len - 2 ) ; break ; } ND_TCHECK_32BITS ( p + 2 ) ; if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo, & p [ 2 ], ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> "", len - 2 ) ; break ; default : if ( ndo -> ndo_vflag < 1 ) print_unknown_data ( ndo, & p [ 2 ], ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> "", len - 2 ) ; break ; } if ( ndo -> ndo_vflag > 1 ) print_unknown_data ( ndo, & p [ 2 ], ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> """,0
373,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
374,<S2SV_ModStart> private ) { crypto_free_skcipher <S2SV_ModEnd> ( private ),0
375,"<S2SV_ModStart> file ) { <S2SV_ModEnd> umode_t mode = <S2SV_ModStart> int retval ; bprm -> cred -> euid = current_euid ( ) ; bprm -> cred -> egid = current_egid ( ) ; if (! ( bprm -> file -> f_path. mnt -> mnt_flags & MNT_NOSUID ) &&! task_no_new_privs ( current ) && kuid_has_mapping ( bprm -> cred -> user_ns, inode -> i_uid ) && kgid_has_mapping ( bprm -> cred -> user_ns, inode -> i_gid ) ) { if ( ( mode & ( S_ISUID | S_IXGRP ) ) == ( S_ISUID | S_IXGRP ) ) { bprm -> per_clear |= PER_CLEAR_ON_SETID ; bprm -> cred -> euid = inode -> i_uid ; } if ( ( mode & ( S_ISGID | S_IXGRP ) ) == ( S_ISGID | S_IXGRP ) ) { bprm -> per_clear |= PER_CLEAR_ON_",0
376,<S2SV_ModStart> = nlogs ; if ( unlikely ( headcount >= UIO_MAXIOV ) ) { r = - ENOBUFS ; goto err ; },0
377,"<S2SV_ModStart> s ) ) { if ( dlen < 2 ) break ; * pt ++ = '\\\\' ; * pt ++ = * s ; } else { * pt ++ = '\\\\' ; * pt ++ = * s ; dlen -- ; } } * pt ++ = \'""\' ; * pt ++ = '\\0' ;",0
378,<S2SV_ModStart> { rq = tags -> rqs [ <S2SV_ModEnd> off + bit,0
379,<S2SV_ModStart> = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_PSNR ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps &,0
380,<S2SV_ModStart> - EOPNOTSUPP ; <S2SV_ModEnd> err = 0,1
381,<S2SV_ModStart> skb_is_nonlinear ( skb ) ) return 0 ; if ( skb -> len < sizeof ( struct nlattr ) ) return 0 ; if (,0
382,"<S2SV_ModStart> ; encode_share_access ( xdr <S2SV_ModEnd>, arg ->",0
383,"<S2SV_ModStart> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> Flags <S2SV_blank> [%s]"", bittok2str ( gre_flag_values, ""none"", flags ) ) ) ; bp += 2 ; len -= 2 ; if ( ( flags & GRE_CP ) | ( flags & GRE_RP ) ) { ND_TCHECK2 ( * bp, 2 ) ; if ( len < 2 ) goto trunc ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> sum <S2SV_blank> 0x%x"", EXTRACT_16BITS ( bp ) ) ) ; bp += 2 ; len -= 2 ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> off <S2SV_blank> 0x%x"", EXTRACT_16BITS ( bp ) ) ) ; bp += 2 ; len -= 2 ; if ( ( flags & GRE_KP ) ) { ND_TCHECK2 ( * bp, 2 ) ; if ( len < 2 ) goto trunc ; if ( ndo -> ndo_vflag ) ND_PRINT ( ( ndo, "", <S2SV_blank> key=0",0
384,"<S2SV_ModStart> ; if ( imagelength < tile_buffsize / tile_rowsize ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> reading <S2SV_blank> contig <S2SV_blank> tiles"" ) ; exit ( - 1 ) ; } if ( imagewidth < tile_buffsize / tile_rowsize ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> reading <S2SV_blank> contig <S2SV_blank> tiles"" ) ; exit ( - 1 ) ; } if ( imagewidth < tile_buffsize / tile_rowsize ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> reading <S2SV_blank> contig <S2SV_blank> tiles"" ) ; exit ( - 1 ) ; } if ( imagelength < tile_buffsize / tile_rowsize ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> reading <S2SV_blank> contig <S2SV_blank> tiles"" ) ; exit ( - 1 ) ; } if ( imagelength < tile_buffsize / tile_rowsize ) { TIFFError ( ""readContigTilesIntoBuffer"", ""Integer <S2SV_blank> overflow <S2SV_blank> when <S2SV_blank> reading <S2SV_blank> tiles"" ) ; exit ( - 1",0
385,"<S2SV_ModStart> }, # if defined _WITH_VRRP_ && defined _WITH_LVS_ { ""release-vips"", no_argument, NULL, 'X' }, { ""dont-release-ipvs"", no_argument, NULL, 'I' }, { ""dont-release-ipvs"", no_argument, NULL, 'X' }, { ""dont-release-ipvs"", no_argument, NULL, 'I' }, # if defined _WITH_BFD_ && defined _WITH_LVS_ { ""dont-release-ipvs"", no_argument, NULL, 'X' }, { ""dont-release-ipvs"", no_argument, NULL, 'I' }, { ""dont-respawn"", no_argument, NULL, 'n' }, { ""dont-fork"", no_argument, NULL, 'n' }, # if defined _WITH_VRRP_ && defined _WITH_LVS_ { ""dont-release-ipvs"", no_argument, NULL, 'X' }, { ""dont-release-ip",0
386,"<S2SV_ModStart> void modify_bar_registration ( struct pci_dev * dev, int idx, int registration ) { printf ( ""modify_bar_registration: <S2SV_blank> bypass <S2SV_blank> for <S2SV_blank> pci-gvt\\n"" ) ; return ; } if ( is_pci_gvt ( dev ) ) { printf ( ""modify_bar_registration: <S2SV_blank> bypass <S2SV_blank> for <S2SV_blank> pci-gvt\\n"" ) ; return ; } switch ( dev -> bar [ idx ]. type ) { case PCIBAR_IO : bzero ( & iop, sizeof ( struct inout_port ) ) ; iop. name = dev -> name ; iop. port = dev -> bar [ idx ]. addr ; iop. size = dev -> bar [ idx ]. addr ; iop. handler = pci_emul_io_handler ; iop. arg = dev ; error = register_inout ( & iop ) ; break ; case PCIBAR_MEM32 : case PCIBAR_MEM64 : bzero ( & mr, sizeof ( struct mem_range ) ) ; mr. name = dev -> name ; mr. base = dev -> bar [ idx ]. addr ; mr.",0
387,<S2SV_ModStart> item ) ; <S2SV_ModEnd> unsigned long tmp <S2SV_ModStart> cluster -> cl_has_local && tmp == cluster -> cl_local_node && cluster -> cl_local_node!= node -> nd_num ) return - EBUSY ; if ( tmp && tmp == cluster -> cl_has_local && cluster -> cl_local_node!= node -> nd_num ) return - EBUSY ; if ( tmp && cluster -> cl_local_node == O2NM_INVALID_NODE_NUM ) { o2net_stop_listening ( node ) ; cluster -> cl_local_node = O2NM_INVALID_NODE_NUM ; } node -> nd_local = tmp ; if ( node -> nd_local ) { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = O2NM_INVALID_NODE_NUM ; } node -> nd_local = tmp ; if ( node -> nd_local ) { cluster -> cl_has_local = tmp ; cluster -> cl_local_node = O2NM_INVALID_NODE_NUM ; } node -> nd_local = tmp ; if ( node -> nd_local ) { cluster -> cl_has_,0
388,"<S2SV_ModStart> if ( fscanf ( fp, "" <S2SV_blank> Number <S2SV_blank> of <S2SV_blank> pts <S2SV_blank> = <S2SV_blank> %d; <S2SV_blank> format <S2SV_blank> = <S2SV_blank> %s\\n"", & n, typestr )!= 2 ) return ( PTA * ) ERROR_PTR ( ""not <S2SV_blank> a <S2SV_blank> pta <S2SV_blank> file"", procName, NULL ) ; if ( strcmp ( typestr, ""float"" ) ) type = 0 ; else type = 1 ; if ( ( pta = ptaCreate ( n ) ) == NULL ) return ( PTA * ) ERROR_PTR ( ""pta <S2SV_blank> not <S2SV_blank> made"", procName, NULL ) ; if ( ( pta = ptaCreate ( n ) ) == NULL ) return ( PTA * ) ERROR_PTR ( ""pta <S2SV_blank> not <S2SV_blank> made"", procName, NULL ) ; if ( ( pta = ptaCreate ( n ) ) == NULL ) return ( PTA * ) ERROR_PTR ( ""pta <S2SV_blank> not <S2SV_blank> made"", procName, NULL ) ; if ( ( pta = ptaCreate ( n ) ) == NULL ) return ( PTA * ) ERROR_PTR ( ""pta <S2SV_blank> not <S2SV_blank> m",0
389,"<S2SV_ModStart> = snes_op_get_size ( 1, 1 <S2SV_ModEnd>, & snes_op <S2SV_ModStart> = snes_op_get_size ( 1, 1 <S2SV_ModEnd>, & snes_op <S2SV_ModStart> = snes_op_get_size ( 1, 1 <S2SV_ModEnd>, & snes_op <S2SV_ModStart> = snes_op_get_size ( 1, 1 <S2SV_ModEnd>, & snes_op <S2SV_ModStart> = snes_op_get_size ( 1, 1 <S2SV_ModEnd>, & snes_op <S2SV_ModStart> = snes_op_get_size ( 1, 1 <S2SV_ModEnd>, & snes_op <S2SV_ModStart> = snes_op_get_size ( 1, 1 <S2SV_ModEnd>, & snes_op <S2SV_ModStart> = snes_op_get_size ( 1, 1 <S2SV_ModEnd>, & snes_op <S2SV_ModStart> = snes_op_get_size ( 1, 1 <S2SV_ModEnd>, & snes_op <S2SV_ModStart> = snes_op_get_size ( 1, 1 <S2SV_ModEnd>, & snes_op <S2SV_ModStart> = snes_op_get_size ( 1, 1 <S2SV_ModEnd>, & snes_op <S2SV_ModStart> = snes_op_get_size ( 1, 1 <S2SV_ModEnd>, & snes_op <S2SV_ModStart> =",0
390,"<S2SV_ModStart> ; struct sock * sk = asoc -> base. sk ; <S2SV_ModStart> = sock_net ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> sk ) ; <S2SV_ModEnd> if ( sock_owned_by_user <S2SV_ModStart> sk ) ) { <S2SV_ModEnd> pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"" <S2SV_ModStart> sk ) ; <S2SV_ModEnd> sctp_transport_put ( transport",0
391,"<S2SV_ModStart> ; s = osStrchr <S2SV_ModEnd> ( token,",1
392,"<S2SV_ModStart> E_NOTHANDLED ; fd = open ( EF_GBL_OPTIONS -> output_file, O_CREAT | O_RDWR | O_TRUNC | O_BINARY, 0644 ) ; ON_ERROR ( fd, - 1, ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s"", EF_GBL_OPTIONS -> output_file ) ; fprintf ( stdout, "" <S2SV_blank> Writing <S2SV_blank> output <S2SV_blank> to <S2SV_blank> \\\'%s\\\' <S2SV_blank> "", EF_GBL_OPTIONS -> output_file ) ;",0
393,"<S2SV_ModStart> goto trunc ; if ( lshp -> ls_length == 0 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %us, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_router ), EXTRACT_32BITS ( & lshp -> ls_seq ), EXTRACT_16BITS ( & lshp -> ls_age ), lshp -> ls_length ) ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> Advertising <S2SV_blank> Router <S2SV_blank> %s, <S2SV_blank> seq <S2SV_blank> 0x%08x, <S2SV_blank> age <S2SV_blank> %us, <S2SV_blank> length <S2SV_blank> %u"", ipaddr_string ( ndo, & lshp -> ls_seq ), EXTRACT_16BITS ( & lshp -> ls_age ), EXTRACT_16BITS ( & lshp -> ls_length ) ) ) ; }",0
394,"<S2SV_ModStart> int n, jas_ulonglong <S2SV_ModEnd> val ) {",1
395,"<S2SV_ModStart> ; if (! ND_TTEST2 ( * ( p + offset + 1 ), elementlen ) ) return 0 ; if ( <S2SV_ModStart> ; if (! ND_TTEST2 ( * ( p + offset + 2 ), elementlen ) ) return 0 ; if ( <S2SV_ModStart> ; if (! ND_TTEST2 ( * ( p + offset + 1 ), elementlen ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 2 ), elementlen ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 2 ), elementlen ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 2 ), elementlen ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 1 ), elementlen ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 2 ), elementlen ) ) return 0 ; if (! ND_TTEST2 ( * ( p + offset + 2 ), elementlen ) ) return 0 ; if (! ND_TTEST2 (",0
396,<S2SV_ModStart> } else { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; * obuf = * obuf ; obuf -> len = len ; opipe -> nrbufs ++ ; ipipe -> curbuf = ( ipipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; opipe -> curbuf = ( ipipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; ipipe -> curbuf = ( ipipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; opipe -> nrbufs ++ ; ipipe -> curbuf = ( ipipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; ipipe -> curbuf = ( ipipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; ipipe -> curbuf = ( ipipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; ipipe -> curbuf = ( ipipe -> curbuf + 1 ) & ( opipe -> buffers - 1 ) ; ipipe -> curbuf = ( ipipe -> curbuf + 1 ) & ( opipe ->,0
397,"<S2SV_ModStart> ; r_buf_set_bytes ( <S2SV_ModEnd> tbuf, buf",0
398,"<S2SV_ModStart> long ret, err ; <S2SV_ModEnd> set_fs ( KERNEL_DS <S2SV_ModStart> KERNEL_DS ) ; r. ru_utime. tv_sec = 0 ; r. ru_utime. tv_usec = 0 ; <S2SV_ModStart> = 0 ; <S2SV_ModEnd> err |= __put_user <S2SV_ModStart> 0 ; err |= __put_user ( r. ru_stime. tv_sec, & ur -> ru_stime. tv_sec ) ; err |= __put_user ( r. ru_stime. tv_usec, & ur -> ru_stime. tv_usec ) ; err |= __put_user ( r. ru_maxrss, & ur -> ru_maxrss ) ; err |= __put_user ( r. ru_ixrss, & ur -> ru_ixrss ) ; err |= __put_user ( r. ru_idrss, & ur -> ru_idrss ) ; err |= __put_user ( r. ru_isrss, & ur -> ru_isrss ) ; err |= __put_user ( r. ru_minflt, & ur -> ru_minflt ) ; err |= __put_user ( r.",0
399,"<S2SV_ModStart> NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys/net"", ""%r/proc/net"", NULL, MS_BIND, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys"", ""%r/proc/sys"", NULL, MS_REMOUNT | MS_BIND | MS_RDONLY, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/net"", ""%r/proc/net"", NULL, MS_BIND, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_MIXED, ""%r/proc/sys"", ""%r/proc/sys"", NULL, MS_REMOUNT | MS_BIND | MS_RDONLY, NULL }, { LXC_AUTO_PROC_MASK, LXC_AUTO_PROC_RW, ""proc"", """,0
400,"<S2SV_ModStart> ; } else if ( addrinsubnet ( & md -> sender, & c -> spd. that. client ) ) { loglog ( RC_LOG_SERIOUS, ""initial <S2SV_blank> parent <S2SV_blank> SA <S2SV_blank> message <S2SV_blank> received <S2SV_blank> on <S2SV_blank> %s:%u"" ""but <S2SV_blank> no <S2SV_blank> connection <S2SV_blank> has <S2SV_blank> been <S2SV_blank> authorized%s%s"", ip_str ( & md -> iface -> ip_addr ), ntohs ( portof ( & md -> iface -> ip_addr ) ), ( c == NULL ||! subnetinsubnet ( & c -> spd. that. client, & d -> spd. that. client ) ) { loglog ( RC_LOG_SERIOUS, ""initial <S2SV_blank> parent <S2SV_blank> SA <S2SV_blank> message <S2SV_blank> received <S2SV_blank> on <S2SV_blank> %s:%u"" ""but <S2SV_blank> no <S2SV_blank> connection <S2SV_blank> has <S2SV_blank> been <S2SV_blank> authorized%s%s"", ip_str ( & md -> iface -> ip_addr ), ntohs ( portof ( & md -> iface -> ip_addr ) ), ( policy!= LEMPTY )? bitnamesof ( sa_policy_bit_names, policy ) : """" ) ; return STF_FAIL + v2N_",0
401,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
402,"<S2SV_ModStart> void vp9_tree_probs_from_distribution ( vpx_tree <S2SV_ModEnd> tree, unsigned",1
403,<S2SV_ModStart> ( stringset == ETH_SS_STATS || stringset == WLAN_SS_STATS ) return ARRAY_SIZE ( g_xgmac_stats_string ) ; if ( stringset == WLAN_SS_STATS ) return ARRAY_SIZE ( g_xgmac_wlan_stats_string ) ; if ( stringset == WLAN_SS_STATS ) return ARRAY_SIZE ( g_xgmac_wlan_stats_string ) ; if ( stringset == WLAN_SS_STATS || stringset == WLAN_SS_STATS ) return ARRAY_SIZE ( g_xgmac_wlan_stats_string ) ; if ( stringset == WLAN_SS_STATS ) return ARRAY_SIZE ( g_xgmac_wlan_stats_string ) ; if ( stringset == WLAN_SS_STATS ) return ARRAY_SIZE ( g_xgmac_wlan_stats_string ) ; if ( stringset == WLAN_SS_STATS ) return ARRAY_SIZE ( g_xgmac_wlan_stats_string ) ;,0
404,<S2SV_ModStart> == 1 ) return ( image -> columns * GetPSDPacketSize ( image ) ) ; else return ( image -> columns * GetPSDPacketSize ( image ) ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
405,"<S2SV_ModStart> fd = open ( <S2SV_ModEnd> dev_path, O_RDWR <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> -> fd = TEMP_FAILURE_RETRY (",0
406,"<S2SV_ModStart> bMasterInterface0 ) ; if ( alt -> desc. bNumEndpoints!= 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> control <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return - EINVAL ; } <S2SV_ModStart> bSlaveInterface0 ) ; if ( alt -> desc. bNumEndpoints!= 2 ) { dev_err ( pcu -> dev, ""Incorrect <S2SV_blank> number <S2SV_blank> of <S2SV_blank> endpoints <S2SV_blank> on <S2SV_blank> data <S2SV_blank> interface <S2SV_blank> (%d)\\n"", alt -> desc. bNumEndpoints ) ; return - EINVAL ; } pcu -> ep_ctrl = & alt -> endpoint [ 0 ]. desc ; pcu -> max_ctrl_size = usb_endpoint_maxp ( pcu -> ep_ctrl ) ; if ( pcu -> max_ctrl_size < 8 ) { dev_err ( pcu -> dev, ""Max <S2SV_blank> CTRL <S2SV_blank> packet <S2SV_blank> size <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%zd)\\n"", pcu -> max_ctrl_size ) ; return - EINVAL ; } pcu -> ep_in = & alt -> endpoint [ 1 ].",0
407,"<S2SV_ModStart> intf ) ; <S2SV_ModEnd> struct device * <S2SV_ModStart> -> name ; <S2SV_ModEnd> dev = d <S2SV_ModStart> dev = d -> udev -> dev ; dev_dbg ( & d -> udev -> dev, ""%s: <S2SV_blank> bInterfaceNumber=%d\\n"", __func__, intf -> cur_altsetting -> desc. bInterfaceNumber ) ; dev_info ( & d -> udev -> dev, ""%s: <S2SV_blank> successfully <S2SV_blank> deinitialized <S2SV_blank> and <S2SV_blank> disconnected\\n"", KBUILD_MODNAME, name ) ; dev_info ( & d -> udev -> dev, ""%s: <S2SV_blank> \'%s\' <S2SV_blank> successfully <S2SV_blank> deinitialized <S2SV_blank> and <S2SV_blank> disconnected\\n"", KBUILD_MODNAME, name ) ; dvb_usbv2_exit ( d ) ; dev_info ( & d -> udev -> dev, ""%s: <S2SV_blank> \'%s\' <S2SV_blank> successfully <S2SV_blank> deinitialized <S2SV_blank> and <S2SV_blank> disconnected\\n"", KBUILD_MODNAME, name ) ; dev_info ( & d -> udev -> dev, ""%s: <S2SV_blank> \'%s\' <S2SV_blank> successfully <S2SV_blank> deinitialized <S2SV_blank> and <S2SV_blank> disconnected\\n"", KBUILD_MODNAME, name ) ; }",0
408,<S2SV_ModStart> pirlvl ) { if ( pirlvl -> prcwidthexpn + picomp -> numrlvls > JAS_UINT32_MAX / JAS_UINT32_MAX / JAS_UINT32_MAX / JAS_UINT32_MAX / JAS_UINT32_MAX / JAS_UINT32_MAX / JAS_UINT32_MAX / JAS_UINT32_MAX / JAS_UINT32_MAX / JAS_UINT32_MAX / JAS_UINT32_MAX / JAS_UINT32_MAX / JAS_UINT32_MAX / JAS_UINT32_MAX / JAS_UINT32_MAX / JAS_UINT32_MAX / JAS_UINT32_MAX / JAS_UINT32_MAX / JAS_UINT32_MAX / JAS_UINT32_MAX / JAS_UINT32_MAX / JAS_UINT32_MAX / JAS_UINT32_MAX / JAS_UINT32_MAX / JAS_UINT32_MAX / JAS_,0
409,"<S2SV_ModStart> target_enc ) { cpat = ( UChar * ) conv_encoding ( ci -> pattern_enc, ci -> target_enc, pattern, pattern_end, & cpat, & cpat_end ) ; if ( r!= 0 ) return r ; cpat_end = ( UChar * ) conv_encoding ( ci -> pattern_enc, ci -> target_enc, cpat, & cpat_end ) ; if ( r!= 0 ) goto err ; r = onig_compile ( * reg, cpat, cpat_end, einfo ) ; if ( r!= ONIGERR_MEMORY ) goto err2 ; r = onig_reg_init ( * reg, ci -> option, ci -> case_fold_flag, ci -> syntax ) ; if ( r!= 0 ) goto err ; r = onig_compile ( * reg, cpat, cpat_end, einfo ) ; if ( r!= ONIGERR_MEMORY ) goto err ; r = onig_reg_init ( * reg, ci -> option, ci -> case_fold_flag, ci -> syntax ) ; if ( r!= ONIGERR_MEMORY ) goto err2 ;",0
410,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> InsertRow ( Image <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> InsertRow ( Image <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> InsertRow ( Image <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> InsertRow ( Image <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> InsertRow ( Image <S2SV_ModStart>, ssize_t bit ; ssize_t x ; register Quantum <S2SV_ModEnd> index ; index <S2SV_ModStart> : { q = QueueAuthenticPixels ( image, 0, y, image -> columns, 1, exception ) ; if ( q == ( Quantum * ) NULL ) break ; for ( x = 0 ; x < ( ( ssize_t ) image -> columns - 7 ) ; x += 8 ) { for ( bit = 0 ; bit < 8 ; bit ++ ) { index = ( Quantum ) ( ( ( ( * p ) & ( 0x80 >> bit ) )!= 0 ) { index = ( Quantum ) ( ( ( ( * p ) & ( 0x80 >> bit ) )!= 0 )? 0x01 : 0x00 ) ; SetPixelIndex ( image, index",0
411,"<S2SV_ModStart> * ndo, <S2SV_ModEnd> const u_char * <S2SV_ModStart> u_int network_addr_type ; u_int <S2SV_ModEnd> hexdump = FALSE <S2SV_ModStart> case AFNUM_INET : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ipaddr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET6 : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ip6addr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ipaddr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET6 : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ip6addr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET6 : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ip6addr_string ( ndo, tptr + 1 ) ) ) ; break ; case AFNUM_INET : ND_PRINT ( ( ndo, "", <S2SV_blank> %s"", ipaddr",0
412,"<S2SV_ModStart> ; u64 msr_data <S2SV_ModEnd> ; int usermode <S2SV_ModStart> = X86EMUL_MODE_PROT32 ; if ( ops -> get_msr ( ctxt, MSR_IA32_SYSENTER_CS, & msr_data )!= 0x0 ) return emulate_gp ( ctxt, 0 ) ; <S2SV_ModStart> = X86EMUL_MODE_PROT64 ; if ( ops -> get_msr ( ctxt, MSR_IA32_SYSENTER_SS, & msr_data )!= 0x0 ) return emulate_gp ( ctxt, 0 ) ; <S2SV_ModStart> = 1 ; if ( ops -> get_msr ( ctxt, MSR_IA32_SYSENTER_SS, & msr_data )!= 0x0 ) return emulate_gp ( ctxt, 0 ) ; cs_sel |= SELECTOR_RPL_MASK ; ss_sel |= SELECTOR_RPL_MASK ; ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_SS ) ;",0
413,"<S2SV_ModStart> ( dev ) ; if ( pdev -> driver_override ) strlcpy ( buf, pdev -> driver_override, sizeof ( pdev -> driver_override ) ) ; else strlcpy ( buf, pdev -> driver_override, sizeof ( pdev -> driver_override ) ) ;",0
414,"<S2SV_ModStart> i ; BIO * tmpout ; if ( BIO_method_type ( in ) == BIO_TYPE_CIPHER ) tmpout = BIO_new ( BIO_s_null ( ) ) ; else tmpout = BIO_new ( BIO_s_mem ( ) ) ; if (! tmpout ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, ERR_R_MALLOC_FAILURE ) ; goto err ; } tmpout = out ; if (! tmpout ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, ERR_R_MALLOC_FAILURE ) ; goto err ; } if ( tmpout ) { CMSerr ( CMS_F_CMS_COPY_CONTENT, ERR_R_MALLOC_FAILURE ) ; goto err ; } for ( ; ; ) { i = BIO_read ( in, buf, sizeof ( buf ) ) ; if ( i <= 0 ) { if ( BIO_method_type ( in ) == BIO_TYPE_CIPHER ) { if (! BIO_get_cipher_status ( in ) ) goto err ; } if ( tmpout && ( B",0
415,"<S2SV_ModStart> retval, NULL <S2SV_ModEnd>, NULL )",0
416,"<S2SV_ModStart> costs, vpx_tree <S2SV_ModEnd> * tree, <S2SV_ModStart> c ) { vpx_prob <S2SV_ModEnd> prob = probs <S2SV_ModStart> i / 2 ] ; vpx_tree_index ii ; int b ; for ( b = 0 ; b <= 1 ; ++ b ) { const int cc = c + vpx_cost_bit ( prob, b ) ; const int cc = c + vpx_cost_bit ( prob, b ) ; const vpx_tree_index ii = tree [ i + b ] ; if ( ii <= 0 ) costs [ - ii ] = cc ; else costs [ - ii ] = cc ; } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
417,<S2SV_ModStart>. st_mode & ( S_IRUSR | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_IXGRP | S_,0
418,"<S2SV_ModStart> ; switch ( c -> family ) { case AF_INET : ( void ) inet_ntop ( af, & ( ( struct sockaddr_in * ) sock_addr ) -> sin_addr, addr_text, sizeof ( addr_text ) - 1 ) ; port = ntohs ( ( ( struct sockaddr_in * ) sock_addr ) -> sin_port ) ; if ( inet_ntop ( af, & ( ( struct sockaddr_in * ) sock_addr ) -> sin_addr, addr_text, sizeof ( addr_text ) - 1 ) ; addr_text [ sizeof ( addr_text ) - 1 ] = '\\0' ; if ( inet_ntop ( af, & ( ( struct sockaddr_un * ) sock_addr ) -> sun_path, addr_text, sizeof ( addr_text ) - 1 ) ; addr_text [ sizeof ( addr_text ) - 1 ] = '\\0' ; if ( inet_ntop ( af, & ( ( struct sockaddr_un * ) sock_addr ) -> sun_path, addr_text, sizeof ( addr_text ) - 1 ) ; addr_text [ sizeof ( addr_text )",0
419,"<S2SV_ModStart> write_buffer_16x16 ( int16_t <S2SV_ModEnd> * output,",0
420,"<S2SV_ModStart> 0xffff ; err = <S2SV_ModStart> synth_devs [ dev ] -> load_patch ( dev, fmt, buf, p + 4, c, 0 ) ; if ( err < 0 ) return err ; if ( seq_mode == SEQ_2 ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> 4 <S2SV_blank> byte <S2SV_blank> event <S2SV_blank> in <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> mode\\n"" ) ; return - EINVAL ; } ev_size = 8 ; if ( c < ev_size ) { if (! seq_playing ) seq_startplay ( ) ; return count - c ; } if ( copy_from_user ( ( char * ) & event_rec [ 4 ], & ( buf ) [ p + 4 ], 4 ) ) goto out ; } if ( ev_code >= 128 ) { if ( ev_code == SEQ_EXTENDED ) { printk ( KERN_WARNING ""Sequencer: <S2SV_blank> Invalid <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> event <S2SV_blank> in <S2SV_blank> level <S2SV_blank> 2 <S2SV_blank> mode\\n"" ) ; return - EINVAL ; } if ( copy_from_user ( ( char * ) & event_rec [ 4 ], & ( buf",0
421,"<S2SV_ModStart> avoid_reserve ) { <S2SV_ModEnd> struct page * <S2SV_ModStart> page * page ; long chg = vma_needs_reservation ( h, vma, addr ) ; if ( chg < 0 ) return ERR_PTR ( - VM_FAULT_OOM ) ; if ( hugetlb_get_quota ( inode -> i_mapping, chg ) ) return ERR_PTR ( - VM_FAULT_SIGBUS ) ; spin_lock ( & hugetlb_lock ) ; page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { page = alloc_buddy_huge_page ( h, NUMA_NO_NODE ) ; if (! page ) { hugetlb_put_quota ( inode -> i_mapping, chg ) ; return ERR_PTR ( - VM_FAULT_SIGBUS ) ; } } <S2SV_ModEnd> set_page_private ( page",0
422,"<S2SV_ModStart> filegen_string ) ; NTP_PRINTF ( 4, ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> statistics <S2SV_blank> \'%s%s\'\\n"", filegen_string, filegen -> prefix, filegen -> basename ) ) ; <S2SV_ModStart> filegen_file ) ; NTP_PRINTF ( 4, ( ""enabling <S2SV_blank> filegen <S2SV_blank> for <S2SV_blank> %s <S2SV_blank> statistics <S2SV_blank> \'%s%s\'\\n"", filegen_string, filegen -> prefix, filegen -> basename ) ) ; <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
423,"<S2SV_ModStart> stamp_path ) { set_uid_gid ( t -> last_trigger. uid, t -> last_trigger. gid ) ; <S2SV_ModStart> -> stamp_path ) ; set_gid_gid ( t -> last_trigger. gid, t -> last_trigger. uid, t -> last_trigger. gid <S2SV_ModEnd> ) ; timer_set_state",0
424,"<S2SV_ModStart> fadst16 ( const tran_low_t * input, tran_low_t <S2SV_ModEnd> * output ) <S2SV_ModStart> output ) { tran_high_t s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15 ; tran_high_t <S2SV_ModEnd> x0 = input <S2SV_ModStart> 15 ] ; tran_high_t x1 = input [ 0 ] ; tran_high_t x2 = input [ 1 ] ; tran_high_t x3 = input [ 2 ] ; tran_high_t x4 = input [ 3 ] ; tran_high_t x5 = input [ 4 ] ; tran_high_t x6 = input [ 5 ] ; tran_high_t x7 = input [ 6 ] ; tran_high_t x8 = input [ 7 ] ; tran_high_t x9 = input [ 8 ] ; tran_high_t x10 = input [ 9 ] ; tran_high_t x11 = input [ 10 ] ; tran_low_t x12 = input [ 2 ] ; tran_high",0
425,<S2SV_ModStart> ; # if HAVE_EDSP flags |= HAS_EDSP ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_NEON flags |= HAS_NEON ; # endif # if HAVE_EDSP flags |= HAS_EDSP ; # endif # if HAVE_MEDIA flags |= HAS_MEDIA ; # endif # if HAVE_NEON flags |= HAS_NEON ; # endif # if HAVE_NEON <S2SV_ModEnd> flags |= HAVE_NEON,0
426,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> PREDICTION_MODE <S2SV_ModEnd> vp9_left_block_mode ( const,1
427,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorAcc16 ( TIFF <S2SV_ModStart> wc ) ; return,1
428,"<S2SV_ModStart> tot_len ) ; <S2SV_ModEnd> p = ( <S2SV_ModStart> = tot_len ; <S2SV_ModEnd> err = ipv6_renew_option <S2SV_ModStart>, newopt, newoptlen, newtype!= IPV6_DSTOPTS, & opt2 -> dst1opt, & p ) ; if ( err ) goto out ; err = ipv6_renew_option ( opt? opt -> srcrt : NULL, newopt, newoptlen, newtype!= IPV6_RTHDR, & opt2 -> srcrt, & p ) ; if ( err ) goto out ; err = ipv6_renew_option ( opt? opt -> dst1opt : NULL, newopt, newoptlen, newtype!= IPV6_DSTOPTS, & p ) ; if ( err ) goto out ; err = ipv6_renew_option ( opt? opt -> srcrt : NULL, newopt, newoptlen, newtype!= IPV6_RTHDR, & opt2 -> srcrt, & p ) ; if ( err ) goto out ; err = ipv6_renew_option ( opt? opt -> dst1opt : NULL, newopt, newoptlen, newtype!= IPV6",0
429,"<S2SV_ModStart> = 0 ; length = avio_read_u16 ( pb ) ; if ( length < 0 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> %i"", length ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> = 0 ; length = avio_read_u16 ( pb ) ; if ( length < 0 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> %i"", length ) ; return AVERROR_INVALIDDATA ; } if ( length < 0 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> %i"", length ) ; return AVERROR_INVALIDDATA ; } length = avio_read_u16 ( pb ) ; length = avio_read_u16 ( pb ) ; if ( length < 0 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> %i"", length ) ; return AVERROR_INVALIDDATA ; } if ( length < 0 ) { avpriv_request_sample ( avctx, ""invalid <S2SV_blank> length <S2SV_blank> %i"", length ) ; return AVERROR_INVALIDDATA ; }",0
430,"<S2SV_ModStart> fpath = NULL <S2SV_ModEnd>, * controller <S2SV_ModStart> ( stderr, ""rmdir: <S2SV_blank> verifying <S2SV_blank> access <S2SV_blank> to <S2SV_blank> %s:%s <S2SV_blank> (req <S2SV_blank> path <S2SV_blank> %s)\\n"" <S2SV_ModEnd>, controller, <S2SV_ModStart> out ; } if (! caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { ret = - EACCES ; goto out ; } if (! cgfs_remove ( controller, cgroup ) ) { ret = - EINVAL ; goto out ; } if (! fc_may_access ( fc, controller, cgdir, NULL, O_WRONLY ) ) { ret = - EACCES ; goto out ; } if (! caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { ret = - EACCES ; goto out ; } if (! caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { ret = - EACCES ; goto out ; } if (! caller_is_in_ancestor ( fc -> pid, controller, cgroup, NULL ) ) { ret = - EACCES ; goto out ; } ret = 0 ; out : free ( cg",0
431,<S2SV_ModStart> ; if ( ( flag & CL_UNPRIVILEGED ) && ( mnt -> mnt. mnt_flags & ( MNT_READONLY | MNT_WRITE_HOLD | MNT_MARKED ) ) ) mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; if ( ( flag & CL_UNPRIVILEGED ) && ( mnt -> mnt. mnt_flags & MNT_READONLY ) ) mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; if ( ( flag & CL_UNPRIVILEGED ) && ( mnt -> mnt. mnt_flags & MNT_READONLY ) ) mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; if ( ( flag & CL_UNPRIVILEGED ) && ( mnt -> mnt. mnt_flags & MNT_READONLY ) ) mnt -> mnt. mnt_flags |= MNT_LOCK_READONLY ; if ( ( flag & CL_UNPRIVILEGED ) && ( mnt -> mnt. mnt_flags & MNT,0
432,"<S2SV_ModStart> trans = & rds_loop_transport ; } else if ( trans == NULL ) { kmem_cache_free ( rds_conn_slab, conn ) ; conn = ERR_PTR ( - EINVAL ) ; goto out ; }",0
433,"<S2SV_ModStart> if ( * rsize >= 110 && rdesc [ 104 ] == 0x26 && rdesc [ 105 ] == 0x80 && rdesc [ 110 ] == 0x03 && rdesc [ 111 ] == 0x21 ) { hid_info ( hdev, ""fixing <S2SV_blank> up <S2SV_blank> Sunplus <S2SV_blank> Wireless <S2SV_blank> Desktop <S2SV_blank> report <S2SV_blank> descriptor\\n"" ) ; rdesc [ 105 ] = rdesc [ 110 ] = 0x03 ; rdesc [ 106 ] = rdesc [ 111 ] = 0x21 ; }",0
434,"<S2SV_ModStart> + 2 ) ; if ( bodyLength > tot_len ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Too <S2SV_blank> large <S2SV_blank> EAPOL <S2SV_blank> packet"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_INVALID_DATA ; } <S2SV_ModStart> + 2 ) ; if ( bodyLength > tot_len ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Too <S2SV_blank> large <S2SV_blank> EAPOL <S2SV_blank> packet"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_INVALID_DATA ; } <S2SV_ModStart> + 2 ) ; if ( bodyLength > tot_len ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""AirPDcapScanForKeys"", ""Too <S2SV_blank> large <S2SV_blank> EAPOL <S2SV_blank> packet"", AIRPDCAP_DEBUG_LEVEL_3 ) ; return AIRPDCAP_RET_INVALID_DATA ; } <S2SV_ModStart> + 2 ) ; if ( bodyLength > tot_len ) { AIRPDCAP_DEBUG_PRINT_LINE ( ""Air",0
435,"<S2SV_ModStart> & I8042_STR_AUXERR ) { dbg ( ""AUX <S2SV_blank> error, <S2SV_blank> status <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> data <S2SV_blank> is <S2SV_blank> %02x\\n"", str, data ) ; ret = 0 ; goto out ; } if ( str & I8042_STR_AUXERR ) { dbg ( ""AUX <S2SV_blank> error, <S2SV_blank> status <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> data <S2SV_blank> is <S2SV_blank> %02x\\n"", str, data ) ; break ; } if ( str & I8042_STR_AUXERR ) { dbg ( ""AUX <S2SV_blank> error, <S2SV_blank> status <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> data <S2SV_blank> is <S2SV_blank> %02x\\n"", str, data ) ; ret = 0 ; goto out ; } if ( str & I8042_STR_MUXERR ) { dbg ( ""MUX <S2SV_blank> error, <S2SV_blank> status <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> data <S2SV_blank> is <S2SV_blank> %02x\\n"", str, data ) ; break ; } if ( str & I8042_STR_AUXERR ) { dbg ( ""AUX <S2SV_blank> error, <S2SV_blank> status <S2SV_blank> is <S2SV_blank> %02x",0
436,"<S2SV_ModStart> ndo_vflag ) ) { if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; } else { if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; } } else { if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; } } else { if ( ndo -> ndo_vflag > 1 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> post <S2SV_blank> dattr:"" ) ) ; dp = parse_post_op_attr ( ndo, dp, ndo -> ndo_vflag ) ; } }",0
437,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> int udf_translate_to_linux ( <S2SV_ModStart> newName, uint8_t * udfName, int udfLen, uint8_t * fidName, int fidNameLen ) { int index, newIndex = 0, needsCRC = 0 ; if ( udfName [ 0 ] == '.' && udfName [ 1 ] == '.' ) { needsCRC = 1 ; newIndex = udfLen ; memcpy ( newName, udfName, udfLen ) ; } else { if ( udfName [ 0 ] == '.' && ( udfName [ 1 ] == '.' ) ) { needsCRC = 1 ; newIndex = udfLen ; memcpy ( newName, udfName, udfName, udfNameLen ) ; } else { for ( index = 0 ; index < udfLen ; index ++ ) { uint8_t curr ; if ( udfName [ index ] == '/' ) { needsCRC = 1 ; curr = ILLEGAL_CHAR_MARK ; while ( index + 1 < udfLen && ( udfName [ index + 1 ] == '/' || udfName [ index + 1 ] == 0 ) ) { hasExt = 1 ; extIndex = index ;",0
438,"<S2SV_ModStart> void count_segs_sb ( const <S2SV_ModStart> MODE_INFO * * mi <S2SV_ModEnd>, int mi_row <S2SV_ModStart> bsize ) { <S2SV_ModEnd> const VP9_COMMON * <S2SV_ModStart> const cm = & cpi -> common ; const int mis = cm -> mi_stride ; const int bs = num_8x8_blocks_wide_lookup [ mi_8x8 [ 0 ] -> mbmi. sb_type ] ; const int hbs = bs / 2 ; if ( bw == bs && bh == bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, hbs, mi_row, mi_col ) ; } else if ( bw < bs && bh < bs ) { count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_predictor_count, t_unpred_seg_counts, bs, hbs, mi_row, mi_col ) ; count_segs ( cpi, tile, mi_8x8, no_pred_segcounts, temporal_",0
439,<S2SV_ModStart> ; if ( <S2SV_ModEnd> c -> flags <S2SV_ModStart> & CLIENT_CLOSE_AFTER_REPLY ) c -> flags &= ~ CLIENT_BLOCKED ; if ( c -> flags & CLIENT_CLOSING ) c -> flags &= ~ CLIENT_CLOSING ; if ( c -> flags & CLIENT_CLOSING ) c -> flags &= ~ CLIENT_CLOSING <S2SV_ModStart> c -> flags & CLIENT_CLOSING ; if ( c -> flags & CLIENT_CLOSE_AFTER_REPLY ) c -> flags &= ~ CLIENT_CLOSING ; if ( c -> flags & CLIENT_CLOSE_AFTER_REPLY ) c -> flags &= ~ CLIENT_CLOSING ; if ( server. current_client == NULL ) c -> flags &= ~ CLIENT_CLOSING ; if ( server. flags & CLIENT_CLOSING ) c -> flags &= ~ CLIENT_CLOSING ; if ( server. flags & CLIENT_CLOSING ) c -> flags &= ~ CLIENT_CLOSING ; if ( server. flags & CLIENT_CLOSING ) c -> flags &= ~ CLIENT_CLOSING ; if ( server. flags & CLIENT_CLOSING ) c -> flags &= ~ CLIENT_CLOSING ; if ( server. current_client == NULL ) c -> flags &= ~ CLIENT_CLOSING ;,0
440,"<S2SV_ModStart> = 0 ; if ( mpd -> b_state & ( 1 << BH_Mapped ) ) get_blocks_flags |= EXT4_GET_BLOCKS_CREATE ; if ( mpd -> b_state & ( 1 << BH_Unwritten ) ) get_blocks_flags |= EXT4_GET_BLOCKS_DELALLOC_RESERVE ; err = ext4_get_blocks ( handle, mpd -> inode, next, max_blocks, & new ) ; if ( err ) { ext4_msg ( mpd -> inode -> i_sb, KERN_CRIT, ""delayed <S2SV_blank> block <S2SV_blank> allocation <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> inode <S2SV_blank> %lu <S2SV_blank> at <S2SV_blank> "" ""logical <S2SV_blank> offset <S2SV_blank> %llu <S2SV_blank> with <S2SV_blank> max <S2SV_blank> blocks <S2SV_blank> %zd <S2SV_blank> with <S2SV_blank> error <S2SV_blank> %d\\n"", mpd -> inode -> i_ino, ( unsigned long long ) next, mpd -> b_size >> mpd -> inode -> i_blkbits, err ) ; if ( err ) { ext4_msg ( mpd -> inode -> i_sb, KERN_CRIT, ""delayed <S2SV_blank> block <S2SV_blank> allocation <S2SV_blank> failed <S2SV_blank>",0
441,"<S2SV_ModStart> * s ; d2i_DSA_SIG_t * d2i_DSA_SIG ; <S2SV_ModStart> ret ) ; d2i_DSA_SIG = d2i_DSA_SIG_new ( ) ; if ( d2i_DSA_SIG ( & s, & sigbuf, siglen ) == NULL ) goto err ; ret = DSA_do_verify ( dgst, dgst_len, s, dsa ) ; err : if ( d2i_DSA_SIG ( & s, & sigbuf, siglen ) == NULL ) goto err ; ret = DSA_do_verify ( dgst, dgst_len, s, dsa ) ; err : if ( d2i_DSA_SIG ( & s, & sigbuf, siglen ) == NULL ) goto err ; ret = DSA_do_verify ( dgst, dgst_len, s, dsa ) ; err : if ( d2i_DSA_SIG ( & s, & d2i_DSA_SIG ( & s, & sigbuf, siglen ) == NULL ) goto err ; ret = DSA_do_verify ( dgst, dgst_len,",0
442,"<S2SV_ModStart> NULL ) ; rv = gdImageGifCtx <S2SV_ModEnd> ( im, <S2SV_ModStart> out ) ; if ( rv ) return rv ; <S2SV_ModStart> rv = gdDPExtractData <S2SV_ModEnd> ( out,",0
443,<S2SV_ModStart> ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
444,"<S2SV_ModStart> size_t canonnamelen = 0 ; <S2SV_ModStart>, handle, & p -> ai_flags, & p -> ai_family, & p -> ai_socktype, & p -> ai_protocol, & p -> ai_addrlen, NULL, & canonnamelen, NULL )!= OE_OK ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( oe_syscall_getaddrinfo_read_ocall ( & retval, handle, & p -> ai_flags, & p -> ai_family, & p -> ai_socktype, & p -> ai_protocol, & p -> ai_addrlen, NULL, & canonnamelen, NULL )!= OE_OK ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( retval == - 1 || oe_errno!= OE_ENAMETOOLONG ) { ret = OE_EAI_SYSTEM ; OE_RAISE_ERRNO ( OE_EINVAL ) ; }",0
445,"<S2SV_ModStart> ; separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart> NULL ) { if ( separator == NULL ) { * separator = '\\0' ; strSafeCopy ( connection -> request. auth. user, token, HTTP_SERVER_USERNAME_MAX_LEN ) ; token = separator + 1 ; } <S2SV_ModStart> NULL ) { if ( separator == NULL ) { * separator = '\\0' ; strSafeCopy ( connection -> request. auth. password, token, HTTP_SERVER_PASSWORD_MAX_LEN ) ; token = separator + 1 ; } else { * separator = '\\0' ; strSafeCopy ( connection -> request. auth. user, token, HTTP_SERVER_USERNAME_MAX_LEN ) ; token = separator + 1 ; connection -> request. auth. password = token ; } } } TRACE_DEBUG ( ""Authorization <S2SV_blank> header:\\r\\n"" ) ; TRACE_DEBUG ( "" <S2SV_blank> username: <S2SV_blank> %s\\r\\n"", connection -> request. auth. user ) ; TRACE_DEBUG ( "" <S2SV_blank> password: <S2SV_blank> %s\\r\\n"", connection -> request. auth. user ) ; TRACE_DEBUG ( "" <S2SV_blank> password: <S2SV_blank> %s\\r\\n"", connection -> request. auth.",0
446,"<S2SV_ModStart> -> image_height = ( int ) iw_get_ui16le ( & rctx -> rbuf [ 5 ] ) ; rctx -> interlaced = ( int ) ( ( rctx -> rbuf [ 8 ] >> 6 ) & 0x01 ) ; has_local_ct = ( int ) ( ( rctx -> rbuf [ 8 ] >> 7 ) & 0x01 ) ; if ( has_local_ct ) { local_ct_size = ( int ) ( ( rctx -> rbuf [ 8 ] >> 6 ) & 0x01 ) ; rctx -> colortable. num_entries = 1 << ( 1 + local_ct_size ) ; } if ( has_local_ct ) { if (! iwgif_read_color_table ( rctx, & rctx -> colortable ) ) goto done ; } if (! rctx -> has_transparency ) { iw_set_error ( rctx -> ctx, ""Invalid <S2SV_blank> LZW <S2SV_blank> minimum <S2SV_blank> code <S2SV_blank> size"" ) ; goto done ; } if (! rctx -> has_transparency ) { iw_set_error ( rctx -> ctx, ""Invalid <S2SV_blank> LZW <S2SV_blank> minimum <S2SV_blank> code <S2SV_blank> size"" ) ; goto done",0
447,<S2SV_ModStart> pc ) { memcpy <S2SV_ModEnd> ( pc ->,1
448,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> set_registers ( pegasus_t <S2SV_ModStart> data ) { u8 * buf ; int ret ; buf = kmalloc ( size, GFP_NOIO ) ; if (! buf ) return - ENOMEM ; ret = usb_control_msg ( pegasus -> usb, 0, PEGASUS_REQ_SET_REGS, PEGASUS_REQT_WRITE, indx, buf, size, 100 ) ; if ( ret < 0 ) netif_dbg ( pegasus, drv, pegasus -> net, ""%s <S2SV_blank> returned <S2SV_blank> %d\\n"", __func__, ret ) ; if ( ret < 0 ) netif_dbg ( pegasus, drv, pegasus -> net, ""%s <S2SV_blank> returned <S2SV_blank> %d\\n"", __func__, ret ) ; if ( ret < 0 ) netif_dbg ( pegasus, drv, pegasus -> net, ""%s <S2SV_blank> returned <S2SV_blank> %d\\n"", __func__, ret ) ; return ret ;",0
449,"<S2SV_ModStart> asdl_seq * body <S2SV_ModEnd>, PyArena * <S2SV_ModStart> ; return p <S2SV_ModEnd> ; } <S2SV_null>",0
450,"<S2SV_ModStart> destroy_list ) ; sas_destruct_port ( port, dev <S2SV_ModEnd> ) ; }",0
451,"<S2SV_ModStart> * src, vpx_bit_depth_t bit_depth, <S2SV_ModStart> >> 4 ; vpx_bit_depth_t bit_depth <S2SV_ModStart> -> sz + 1 + MAX_PRE_FRAMES > ctx -> max_sz ) return 1 ; if ( ctx -> sz + 1 + MAX_PRE_FRAMES > ctx -> max_sz ) return 1 ; ctx -> sz ++ ; buf = pop ( ctx, & ctx -> write_idx ) ; if ( buf ) { vpx_copy_and_extend_frame ( src, & buf -> img ) ; } else { vpx_copy_and_extend_frame ( src, & buf -> img ) ; } # else vpx_copy_and_extend_frame ( src, & buf -> img ) ; # endif if ( ctx -> sz + 1 + MAX_PRE_FRAMES > ctx -> max_sz ) return 1 ; ctx -> sz ++ ; buf = pop ( ctx, & ctx -> write_idx ) ; # if USE_PARTIAL_COPY vpx_copy_and_extend_frame ( src, & buf -> img ) ; # else vpx_copy_and_extend_frame ( src, & buf ->",0
452,<S2SV_ModStart> cdev ) ; } fuse_dev_lock ( inode ) ; fuse_dev_unlock ( inode,0
453,"<S2SV_ModStart> return code ; code = verify_s4u_x509_user_checksum ( context, tgs_subkey? tgs_subkey : tgs_session, & req_data, request -> nonce, * s4u_x509_user ) ; if ( code ) { * status = ""INVALID_S4U2SELF_CHECKSUM"" ; krb5_free_pa_s4u_x509_user ( context, * s4u_x509_user ) ; * s4u_x509_user = NULL ; return KRB5KDC_ERR_C_PRINCIPAL_UNKNOWN ; }",0
454,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> scsi_disk_emulate_command ( SCSIDiskReq <S2SV_ModStart> outbuf ) ; if ( scsi_disk_emulate_read_toc ( r ) < 0 ) goto illegal_request ; break ; case READ_TOC : buflen = scsi_disk_emulate_read_toc ( r, outbuf ) ; if ( buflen < 0 ) goto illegal_request ; break ; case READ_CAPACITY : buflen = scsi_disk_emulate_read_geometry ( s -> bs, & nb_sectors ) ; if ( buflen < 0 ) goto illegal_request ; break ; case WRITE_TOC : buflen = scsi_disk_emulate_write_toc ( r, outbuf ) ; if ( buflen < 0 ) goto illegal_request ; break ; case RESERVE : if ( scsi_disk_emulate_release ( r ) < 0 ) goto illegal_request ; break ; case START_STOP : if ( scsi_disk_emulate_start_stop ( r ) < 0 ) { return - 1 ; }",0
455,<S2SV_ModStart> cur_pic. field_picture || s -> avctx -> profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO || s -> avctx -> profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO || s -> avctx -> profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO || s -> avctx -> profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO ) return 0 ; if ( s -> avctx -> profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO || s -> avctx -> profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO || s -> avctx -> profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO || s -> avctx -> profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO || s -> avctx -> profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO || s -> avctx -> profile == FF_PROFILE_MPEG4_SIMPLE_STUDIO ) return 0 ;,0
456,"<S2SV_ModStart> int off ) { unsigned long flags ; <S2SV_ModStart> 0 ) ; flags = be32_to_cpu ( rm -> m_inc. i_hdr. h_flags ) ; <S2SV_ModStart> m_inc ) ; if ( flags & RDS_FLAG_CONG_BITMAP ) { rds_cong_map_updated ( conn -> c_fcong, ~ ( u64 ) 0 ) ; return sizeof ( struct rds_header ) + rds_cong_map_bytes ; } if ( hdr_off || sg || off ) { rds_inc_init ( & rm -> m_inc, conn, conn -> c_laddr, conn -> c_faddr, & rm -> m_inc, GFP_KERNEL, KM_USER0 ) ; rds_send_drop_acked ( conn, be64_to_cpu ( rm -> m_inc. i_hdr. h_sequence ), NULL ) ; rds_inc_put ( & rm -> m_inc ) ; } if ( hdr_off || sg || off ) { rds_inc_init ( & rm -> m_inc, conn, conn -> c_laddr, conn -> c_faddr,",0
457,"<S2SV_ModStart> buf ) ) { if ( grub_disk_read_error ( data -> disk, block << LOG2_EXT2_BLOCK_SIZE ( data ), 0, EXT2_BLOCK_SIZE ( data ), buf ) ) { if ( grub_disk_read_error ( data -> disk, block << LOG2_EXT2_BLOCK_SIZE ( data ), 0, EXT2_BLOCK_SIZE ( data ), buf ) ) { if ( grub_disk_read ( data -> disk, block << LOG2_EXT2_BLOCK_SIZE ( data ), 0, EXT2_BLOCK_SIZE ( data ), buf ) ) { if ( grub_disk_read_error ( data -> disk, block << LOG2_EXT2_BLOCK_SIZE ( data ), 0, EXT2_BLOCK_SIZE ( data ), buf ) ) { if ( grub_disk_read ( data -> disk, block << LOG2_EXT2_BLOCK_SIZE ( data ), 0, EXT2_BLOCK_SIZE ( data ), 0, buf ) ) { return 0 ; } }",0
458,"<S2SV_ModStart> ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) { ret = - ENOKEY ; goto error2 ; } ret = key_permission ( key_ref, KEY_IS_UNINSTANTIATED ) ; if ( ret!= - EACCES ) goto error2 ; if (! is_key_possessed ( key_ref ) ) { ret = - EACCES ; goto error2 ; } ret = - EOPNOTSUPP ; if ( key -> type -> read ) { up_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( is_key_possessed ( key_ref ) ) { ret = - EOPNOTSUPP ; goto error2 ; } ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret =",0
459,"<S2SV_ModStart> ndo_vflag ) { if (! ND_TTEST ( mh -> ip6m_len ) ) { ND_PRINT ( ( ndo, ""(header <S2SV_blank> length <S2SV_blank> %u <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> for <S2SV_blank> type <S2SV_blank> %u)"", mh -> ip6m_len ) ) ; goto trunc ; } <S2SV_ModStart> 8 ) ; if (! ND_TTEST ( mh -> ip6m_data16 [ 0 ] ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %s <S2SV_blank> Init <S2SV_blank> Cookie=%08x:%08x"", type == IP6M_HOME_TEST_INIT? ""Home"" : ""Care-of"" ) ) ) ; goto trunc ; } ND_TCHECK ( mh -> ip6m_data16 [ 0 ] ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> nonce <S2SV_blank> id=0x%08x"", mh -> ip6m_data16 [ 0 ] ) ) ; ND_PRINT ( ( ndo, "" <S2SV_blank> nonce <S2SV_blank> id=0x%08x"", type == IP6M_HOME_TEST_INIT? ""Home"" : ""Care-of"" )",0
460,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
461,"<S2SV_ModStart> hmi_data ; uint16_t hmi_bpm = 0 ; uint16_t hmi_division = 0 ; uint32_t hmi_track_cnt = 0 ; uint32_t sample_count = 0 ; uint32_t sample_remainder = 0 ; <S2SV_ModStart> channel ; } * note = NULL ; if ( memcmp ( hmi_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; return NULL ; } if ( memcmp ( hmi_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; return NULL ; } if ( memcmp ( hmi_data, ""HMI-MIDISONG061595"", 18 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_HMI, NULL, 0 ) ; return NULL",0
462,<S2SV_ModStart> = hdev -> id ; haddr -> hci_family = AF_BLUETOOTH ; haddr -> hci_dev = hdev -> bd <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
463,<S2SV_ModStart> i_iget5_offset ; fh32 [ 1 <S2SV_ModEnd> ] = inode,0
464,"<S2SV_ModStart> = ""CLIENT <S2SV_blank> KEY <S2SV_blank> EXPIRED"" ; if ( vague_errors ) return ( KRB_ERR_GENERIC ) ; else return ( KDC_ERR_KEY_EXP ) ; } if ( server. pw_expiration && server. pw_expiration < kdc_time &&! isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( server. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) ) { * status = ""CLIENT <S2SV_blank> KEY <S2SV_blank> EXPIRED"" ; if ( vague_errors ) return ( KRB_ERR_GENERIC ) ; else return ( KDC_ERR_KEY_EXP ) ; } if ( server. expiration && server. expiration < kdc_time &&! isflagset ( client. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) &&! isflagset ( server. attributes, KRB5_KDB_REQUIRES_PWCHANGE ) ) { * status = ""CLIENT <S2SV_blank> KEY <S2SV_blank> EXPIRED"" ; if ( vague_errors ) return ( KRB_ERR_GENERIC ) ; else return ( KDC",0
465,"<S2SV_ModStart> case BPF_SUB : if ( signed_add_overflows ( dst_reg -> smin_value, smin_val ) || signed_add_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } break ; case BPF_SUB : if ( signed_add_overflows ( dst_reg -> umin_value, smin_val ) || signed_add_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } break ; case BPF_SUB : if ( signed_add_overflows ( dst_reg -> smin_value, smin_val ) || signed_add_overflows ( dst_reg -> smax_value, smax_val ) ) { dst_reg -> smin_value = S64_MIN ; dst_reg -> smax_value = S64_MAX ; } break ; case",0
466,"<S2SV_ModStart> sharpness ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int min_filter_level = get_min_filter_level ( cpi ) ; const int max_filter_level = get_max_filter_level ( cpi ) ; const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; const int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; lf -> filter_level = clamp ( lf -> filter_level, min_filter_level, max_filter_level ) ; if ( method == LPF_PICK_FROM_Q ) { const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; const int q = vp9_ac_quant ( cm -> base_qindex, 0 ) ; const int filt_guess = ROUND_POWER_OF_TWO ( q * 20723 + 1015158, 18 ) ; if ( cm -> frame_type == KEY_FRAME ) filt_guess -= 4 ; lf -> filter_level = clamp (",0
467,"<S2SV_ModStart> ; BTIF_TRACE_EVENT ( ""btif_dm_upstreams_cback <S2SV_blank> <S2SV_blank> ev: <S2SV_blank> %s"", dump_dm_event ( event ) ) ; <S2SV_ModStart> case BTA_DM_DISABLE_EVT : { BD_NAME bdname ; bt_status_t status ; status = btif_storage_get_adapter_property ( & bdname ) ; if ( status == BT_STATUS_SUCCESS ) { BTA_DmBleConfigLocalPrivacy ( BLE_LOCAL_PRIVACY_ENABLED ) ; } else { BTIF_TRACE_EVENT ( ""btif_dm_upstreams_cback <S2SV_blank> <S2SV_blank> ev: <S2SV_blank> %s"", dump_dm_event ( event ) ) ; BTIF_TRACE_EVENT ( ""btif_dm_upstreams_cback <S2SV_blank> <S2SV_blank> ev: <S2SV_blank> %s"", dump_dm_event ( event ) ) ; } break ; case BTA_DM_DISABLE_EVT : { BT_TRACE_EVENT ( ""btif_dm_upstreams_cback <S2SV_blank> <S2SV_blank> ev: <S2SV_blank> %s"", dump_dm_event ( event ) )",0
468,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows, exception ) ; if ( status == MagickFalse ) { InheritException ( exception, &",0
469,"<S2SV_ModStart> : { int a = getnum ( L, fmt, MAXALIGN ) ; if (! isp2 ( a ) ) luaL_error ( L, ""alignment <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> power <S2SV_blank> of <S2SV_blank> 2"", a ) ; h -> align = a ; return ; } case '!' : { int a = getnum ( L, fmt, MAXALIGN ) ; if (! isp2 ( a ) ) luaL_error ( L, ""alignment <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> power <S2SV_blank> of <S2SV_blank> 2"", a ) ; h -> align = a ; return ; } case '!' : { int a = getnum ( L, fmt, MAXALIGN ) ; if (! isp2 ( a ) ) luaL_error ( L, ""alignment <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> power <S2SV_blank> of <S2SV_blank> 2"", a ) ; h -> align = a ; return ; } default : { const char * msg = lua_pushfstring ( L, ""invalid <S2SV_blank> format <S2SV_blank> option <S2SV_blank> \'%c\'"", opt ) ; luaL_argerror ( L, 1, msg ) ; h -> endian = BIG ; h -> endian = LITT",0
470,<S2SV_ModStart> void usage_exit ( void,1
471,"<S2SV_ModStart> ( sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 ) { * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( double * ) malloc ( sizeof ( double ) * ( * o_element_count ) ) ; * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( double * ) malloc ( sizeof ( double ) * ( * o_element_count + 1 ) ) ; * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( double * ) malloc ( sizeof ( double ) * ( * o_element_count",0
472,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
473,"<S2SV_ModStart> vpx_codec_err_t res ; # if CONFIG_VP9_HIGHBITDEPTH if (! ctx || (! data && data_sz ) ) res = VPX_CODEC_INVALID_PARAM ; else if (! ctx -> iface ||! ctx -> priv ) res = VPX_CODEC_ERROR ; else if (! ctx -> priv -> alg_priv ) res = ctx -> iface -> dec. decode ( ctx -> priv -> alg_priv, data, data_sz, user_priv, deadline ) ; else if (! ctx -> iface -> dec. decode ) res = VPX_CODEC_ERROR ; else { res = ctx -> iface -> dec. decode ( ctx -> priv -> alg_priv, data, data_sz, user_priv, deadline ) ; } return SAVE_STATUS ( ctx, res ) ; } # endif",0
474,"<S2SV_ModStart> int ret ; av_freep ( & par -> extradata ) ; ret = ff_h264_parse_sprop_parameter_sets ( s, & par -> extradata, & par -> extradata_size, value ) ; if ( ret < 0 ) { av_log ( s, AV_LOG_WARNING, ""Missing <S2SV_blank> PPS <S2SV_blank> in <S2SV_blank> sprop-parameter-sets, <S2SV_blank> ignoring\\n"" ) ; return ret ; } par -> extradata_size = 0 ; av_freep ( & par -> extradata ) ; ret = ff_h264_parse_sprop_parameter_sets ( s, & par -> extradata, & par -> extradata_size, value ) ; if ( ret < 0 ) { av_log ( s, AV_LOG_WARNING, ""Missing <S2SV_blank> PPS <S2SV_blank> in <S2SV_blank> sprop-parameter-sets, <S2SV_blank> ignoring\\n"" ) ; return ret ; }",0
475,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> isofs_read_inode ( struct <S2SV_ModStart> inode ) ; if ( de -> name_len > sizeof ( * de ) ) { printk ( KERN_INFO ""%s: <S2SV_blank> invalid <S2SV_blank> name\\n"", __func__ ) ; ret = - EIO ; goto fail ; } if ( de -> name_len > sizeof ( * tmpde ) ) { printk ( KERN_INFO ""%s: <S2SV_blank> invalid <S2SV_blank> name\\n"", __func__ ) ; ret = - EIO ; goto fail ; } if ( de -> name_len > sizeof ( * tmpde ) ) { printk ( KERN_INFO ""%s: <S2SV_blank> invalid <S2SV_blank> name\\n"", __func__ ) ; ret = - EIO ; goto fail ; } if ( de -> name_len > sizeof ( * tmpde ) ) { printk ( KERN_INFO ""%s: <S2SV_blank> invalid <S2SV_blank> name\\n"", __func__ ) ; ret = - EIO ; goto fail ; } if ( de -> name_len > sizeof ( * tmpde ) ) { printk ( KERN",0
476,"<S2SV_ModStart> "".txt"" ) ; if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""usage: <S2SV_blank> condump <S2SV_blank> <filename>\\n"" ) ; return ; } if (! COM_CompareExtension ( filename, "".txt"" ) ) { Com_Printf ( ""usage: <S2SV_blank> condump <S2SV_blank> <filename>\\n"" ) ; return ; }",0
477,"<S2SV_ModStart> ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%s"", esis_pdu_type ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%s"", esis_pdu_type ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%s"", esis_pdu_type ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%s"", esis_pdu_type ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%s"", esis_pdu_type ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%s"", esis_pdu_type ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> indicator <S2SV_blank> %",0
478,"<S2SV_ModStart> STROKING ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> } else { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> K"", <S2SV_ModStart> k ) ; }",0
479,"<S2SV_ModStart> else { if ( kvm_arm_pmu_v3_ready ( vcpu ) ) return trap_raz_wi ( vcpu, p, r ) ; if (! kvm_arm_pmu_v3_ready ( vcpu ) ) return trap_raz_wi ( vcpu, p, r ) ; if (! kvm_arm_pmu_v3_ready ( vcpu ) ) return trap_raz_wi ( vcpu, p, r ) ; if (! kvm_arm_pmu_v3_ready ( vcpu ) ) return trap_raz_wi ( vcpu, p, r ) ; if (! kvm_arm_pmu_v3_ready ( vcpu ) ) return trap_raz_wi ( vcpu, p, r ) ; if (! kvm_arm_pmu_v3_ready ( vcpu ) ) return trap_raz_wi ( vcpu, p, r ) ; if (! kvm_arm_pmu_v3_ready ( vcpu ) ) return trap_raz_wi ( v",0
480,"<S2SV_ModStart> case IS_STRING : if ( zval_affine_elem == NULL ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type <S2SV_blank> for <S2SV_blank> element <S2SV_blank> %i"", i ) ; RETURN_FALSE ; } <S2SV_ModStart> case IS_STRING : if ( zval_affine_elem == NULL ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type <S2SV_blank> for <S2SV_blank> element <S2SV_blank> %i"", i ) ; RETURN_FALSE ; } <S2SV_ModStart> case IS_DOUBLE : if ( zval_affine_elem == NULL ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type <S2SV_blank> for <S2SV_blank> element <S2SV_blank> %i"", i ) ; RETURN_FALSE ; } <S2SV_ModStart> case IS_LONG : if ( zval_affine_elem == NULL ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Invalid <S2SV_blank> type <S2SV_blank> for <S2SV_blank> element <S2SV_blank> %i"", i ) ; RETURN_FALSE ; } <S2SV_ModStart> case IS_DOUBLE : if ( zval_affine_elem == NULL )",0
481,<S2SV_ModStart> self ) { if ( self -> dict ),0
482,"<S2SV_ModStart> SQL_DROP ) ; if ( SQLGetLastError ( hStmt )!= SQL_SUCCESS ) { if ( bVerbose ) DumpODBCLog ( hEnv, hDbc, 0 ) ; fprintf ( stderr, ""[ISQL]ERROR: <S2SV_blank> SQLGetLastError\\n"" ) ; return 0 ; } <S2SV_ModStart> SQL_DROP ) ; if ( SQLGetLastError ( hStmt )!= SQL_SUCCESS ) { if ( bVerbose ) DumpODBCLog ( hEnv, hDbc, 0 ) ; fprintf ( stderr, ""[ISQL]ERROR: <S2SV_blank> SQLGetLastError\\n"" ) ; return 0 ; } if ( SQLGetLastError ( hStmt )!= SQL_SUCCESS ) { if ( bVerbose ) DumpODBCLog ( hEnv, hDbc, 0 ) ; fprintf ( stderr, ""[ISQL]ERROR: <S2SV_blank> SQLGetLastError\\n"" ) ; return 0 ; } if ( SQLGetLastError ( hStmt )!= SQL_SUCCESS ) { if ( bVerbose ) DumpODBCLog ( hEnv, hDbc, 0 ) ; return 0 ; } if ( SQLGetLastError ( hStmt )!= SQL_SUCCESS ) { if ( b",0
483,<S2SV_ModStart> - EFAULT ; if ( offset + len > sizeof ( * data ) ) return - EINVAL ;,0
484,"<S2SV_ModStart> p, * q, * <S2SV_ModStart> VERSION ) ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2015 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\n <S2SV_blank> This <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\\n <S2SV_blank> There <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness <S2SV_blank> for <S2SV_blank> a\\n\\\n <S2SV_blank> particular <S2SV_blank> purpose.\\n"" ) ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2015 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> Hetherington, <S2SV_blank> Eddie <S2SV_blank> Kohler <S2SV_blank> et <S2SV_blank> al.\\n\\\n <S2SV_blank> This <S2SV_blank> is <S2SV_blank> free <S2SV_blank> software; <S2SV_blank> see <S2SV_blank> the <S2SV_blank> source <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> conditions.\\n\\\n <S2SV_blank> There <S2SV_blank> is <S2SV_blank> NO <S2SV_blank> warranty, <S2SV_blank> not <S2SV_blank> even <S2SV_blank> for <S2SV_blank> merchantability <S2SV_blank> or <S2SV_blank> fitness <S2SV_blank> for <S2SV_blank> a\\n"" ) ; printf ( ""Copyright <S2SV_blank> (C) <S2SV_blank> 1992-2015 <S2SV_blank> I. <S2SV_blank> Lee <S2SV_blank> H",0
485,<S2SV_ModStart> ; if ( serial -> interface -> num_ports < 1 ) { retval = - ENODEV ; goto error_get_interface ; } if ( serial -> interface -> num_ports > 1 ) { retval = - ENODEV ; goto error_get_interface ; } if ( serial -> interface -> num_ports < 2 ) { retval = - ENODEV ; goto error_get_interface ; } if ( serial -> interface -> num_ports < 3 ) { retval = - ENODEV ; goto error_get_interface ; } if ( serial -> interface -> num_ports < 2 ) { retval = - ENODEV ; goto error_get_interface ; } if ( serial -> interface -> num_ports > 1 ) { retval = - ENODEV ; goto error_get_interface ; } if ( serial -> interface -> num_ports < 2 ) { retval = - ENODEV ; goto error_get_interface ; } if ( serial -> interface -> num_ports < 3 ) { retval = - ENODEV ; goto error_get_interface ; } if ( serial -> interface -> num_ports < 2 ) { retval = - ENODEV ; goto error_get_interface ; },0
486,"<S2SV_ModStart> cpuctx_lock ) ; if ( cpuctx -> ctx. type == cpu_context ) { cpuctx -> ctx. type = type ; cpuctx -> ctx. pmu = pmu ; __perf_cpu_hrtimer_init ( cpuctx, cpu ) ; }",0
487,"<S2SV_ModStart> len, struct file * file, <S2SV_ModStart> = 1 ; file -> f_pos = 0 ; <S2SV_ModStart> = 1 ; file -> f_pos = 0 <S2SV_ModEnd> ; } <S2SV_null>",0
488,<S2SV_ModStart> ext4_group_t flex_group ; <S2SV_ModEnd> size_t size ; <S2SV_ModStart> sbi -> s_log_groups_per_flex ; ext4_group_t groups_per_flex = sbi -> s_es -> s_log_groups_per_flex ; size_t size ; int i ; sbi -> s_log_groups_per_flex = sbi -> s_es -> s_log_groups_per_flex ; if ( groups_per_flex < 2 ) { sbi -> s_log_groups_per_flex = 0 ; return 1 ; } groups_per_flex = 1 << sbi -> s_log_groups_per_flex ; if ( groups_per_flex < 2 ) { sbi -> s_log_groups_per_flex = 0 ; return 1 ; } flex_group_count = ( sbi -> s_groups_count + groups_per_flex - 1 ) + ( le16_to_cpu ( sbi -> s_es -> s_reserved_gdt_blocks ) + EXT4_DESC_PER_BLOCK_BITS ( sb ) ) ; size = flex_group_count * sizeof (,0
489,<S2SV_ModStart> ; if ( unlikely ( chunk_length > SCTP_MAX_CHUNK_SIZE ) ) return 0 ; if (,0
490,"<S2SV_ModStart> ; for ( i = 0 ; a && i < count ; ++ i ) { n = cJSON_CreateString ( strings [ i ] ) ; if (! i ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; } a = cJSON_CreateArray ( ) ; for ( i = 0 ; a && i < count ; ++ i ) { cJSON * n = cJSON_CreateString ( strings [ i ] ) ; if (! i ) a -> child = n ; else suffix_object ( p, n ) ; p = n ; } a = cJSON_CreateArray ( ) ; for ( i = 0 ; a && i < count ; ++ i ) { n = cJSON_CreateString ( strings [ i ] ) ; if (! i ) a -> child = cJSON_CreateString ( strings [ i ] ) ; if (! i ) a -> child = cJSON_CreateString ( strings [ i ] ) ; if (! i ) a -> child = n ; else suffix_object ( p, n ) ; a = cJSON_CreateArray ( ) ; for ( i = 0 ; i < count ; ++ i ) {",0
491,"<S2SV_ModStart> if (! cli_sslclifp ( cptr ) ) sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> SASL"", parv [ 1 ] ) ; else sendcmdto_one ( & me, CMD_SASL, acptr, ""%C <S2SV_blank> %C!%u.%u <S2SV_blank> SASL"", parv [ 2 ] ) ; if (! cli_saslagent ( cptr ) ) { if ( strcmp ( feature_str ( FEAT_SASL_SERVER ), ""*"" ) ) acptr = find_match_server ( ( char * ) feature_str ( FEAT_SASL_SERVER ) ) ; else acptr = NULL ; } if (! acptr ) { do { cli_saslagent ( cptr ) = ircd_random ( ) & 0x7fffffff ; } while (! cli_saslagent ( cptr ) ) { if ( strcmp ( feature_str ( FEAT_SASL_SERVER ), ""*"" ) ) acptr = find_match_server ( ( char * ) feature_str (",0
492,<S2SV_ModStart> # endif # if HAVE_FAST_UNALIGNED if ( ( long ) src1 & ( sizeof ( long ) - 1 ) ) { for ( i = 0 ; i < w - sizeof ( long ) ; i += sizeof ( long ) ; i += sizeof ( long ) ) { long a = * ( long * ) ( src1 + i ) ; long b = * ( long * ) ( src2 + i ) ; * ( long * ) ( dst + i ) = ( a | pb_80 ) - ( b & pb_80 ) ; * ( long * ) ( dst + i ) = ( ( a | pb_80 ) - ( a & pb_7f ) ) ^ ( ( a ^ b ^ pb_80 ) & pb_80 ),0
493,<S2SV_ModStart> -> data ; if ( callback_args -> forward_matches ) { match_length += callback_args -> forward_matches ; } else if ( callback_args -> full_word ) { if ( match_offset >= 2 && * ( match_data - 2 ) == 0 ) return ERROR_SUCCESS ; if ( match_offset + match_length + 1 < callback_args -> data_size && * ( match_data + match_length + 1 ) == 0 ) return ERROR_SUCCESS ; if ( match_offset + match_length + 1 < callback_args -> data_size && * ( match_data + match_length + 1 ) == 0 ) return ERROR_SUCCESS ; if ( match_offset + match_length < callback_args -> data_size ) return ERROR_SUCCESS ; if ( match_offset + match_length + 1 < callback_args -> data_size && * ( match_data + match_length + 1 ) ) return ERROR_SUCCESS ; if ( match_offset + match_length + 1 < callback_args -> data_size && * ( match_data + match_length + 1 ) ) return ERROR_SUCCESS ; if ( match_offset + match_length < callback,0
494,<S2SV_ModStart>! no_port_forwarding_flag && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE )!= 0 && ( options. allow_streamlocal_forwarding & FORWARD_REMOTE,0
495,"<S2SV_ModStart>! bitstream_read_bit ( bc ) ) { if ( hc -> current >= 256 ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( hc -> current >= 256 ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( hc -> current >= 256 ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( hc -> current >= 256 ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( hc -> current >= 256 ) { av_log ( NULL, AV_LOG_ERROR, ""Tree <S2SV_blank> size <S2SV_blank> exceeded!\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( length ) { int r ; r = smacker_decode_tree ( bc, hc, prefix, length ) ;",0
496,"<S2SV_ModStart> return err ; } if ( m -> msg_namelen > sizeof ( struct sockaddr_storage ) ) { m -> msg_name = address ; m -> msg_namelen = sizeof ( struct sockaddr_storage ) ; } else { m -> msg_name = NULL ; } size = m -> msg_iovlen * sizeof ( struct iovec ) ; if ( copy_from_user ( iov, ( void __user __force * ) m -> msg_iov, size ) ) return - EFAULT ; m -> msg_iov = iov ; err = 0 ; for ( ct = 0 ; ct < m -> msg_iovlen ; ct ++ ) { size_t len = iov [ ct ]. iov_len ; if ( len > INT_MAX - err ) { len = INT_MAX - err ; iov [ ct ]. iov_len = len ; } err = 0 ; for ( ct = 0 ; ct < m -> msg_iovlen ; ct ++ ) { size_t len = iov [ ct ]. iov_len ; if ( len > INT_MAX - err ) { err = INT_MAX -",0
497,"<S2SV_ModStart> ; if ( _PyObject_HasAttrId <S2SV_ModEnd> ( obj, <S2SV_ModStart>, & PyId_type_ignores ) ) { int res ; int res ; int res ; int res ; Py_ssize_t len ; Py_ssize_t i ; tmp = _PyObject_GetAttrId ( obj, & PyId_type_ignores ) ; if ( tmp == NULL ) { PyErr_Format ( PyExc_TypeError, ""Module <S2SV_blank> field <S2SV_blank> \\""type_ignores\\"" <S2SV_blank> must <S2SV_blank> be <S2SV_blank> a <S2SV_blank> list, <S2SV_blank> not <S2SV_blank> a <S2SV_blank> %.200s"", tmp -> ob_type -> tp_name ) ; goto failed ; } len = PyList_GET_SIZE ( tmp ) ; body = _Ta3_asdl_seq_new ( len, arena ) ; if ( body == NULL ) { PyErr_SetString ( PyExc_RuntimeError, ""Module <S2SV_blank> field <S2SV_blank> \\""body\\"" <S2SV_blank> changed <S2SV_blank> size <S2SV_blank> during <S2SV_blank> iteration"" ) ; goto failed ; } for ( i = 0 ; i < len ; i ++ ) { stmt_ty value ; res = obj2ast_stmt ( PyList_GET_ITEM ( tmp, i )",0
498,<S2SV_ModStart> int hstartcol = 0 <S2SV_ModEnd> ; if ( <S2SV_ModStart> 2 ) { hstartcol = ( numrows + 1 - parity ) >> 1 ; m = numrows - hstartcol ; n = m ; dstptr = buf ; srcptr = & a [ hstartcol * stride ] ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr += stride << 1 ; } dstptr = & a [ hstartcol * stride ] ; srcptr = & a [ hstartcol * stride ] ; n = numrows - m - (! parity ) ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr = * srcptr ; dstptr += stride ; srcptr = buf ; n = m ; while ( n -- > 0 ) { * dstptr,0
499,"<S2SV_ModStart> ; iwl_sta_ucode_deactivate ( priv <S2SV_ModEnd>, sta_id )",0
500,"<S2SV_ModStart> ; log_file = fopen_safe <S2SV_ModEnd> ( file_name,",1
501,"<S2SV_ModStart> ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(Mi|ssi)ssippi/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""mississippi\\tmississippi.mississippi\\nmississippi"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(Mi|ssi)ssippi/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(Mi|ssi)ssippi/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""mississippi\\tmississippi.mississippi\\nmississippi"" ) ; assert_true_rule ( ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(Mi|ssi)ssippi/ <S2SV_blank> nocase <S2SV_blank> condition: <S2SV_blank> $a <S2SV_blank> }"", ""rule <S2SV_blank> test <S2SV_blank> { <S2SV_blank> strings: <S2SV_blank> $a <S2SV_blank> = <S2SV_blank> /(Mi|ssi)ssippi/ <S2SV_blank>",0
502,"<S2SV_ModStart> ) ; if ( hashbin -> hb_type & HB_LOCK ) { spin_lock_irqsave ( & hashbin -> hb_spinlock, flags, hashbin_lock_depth ++ ) ; } <S2SV_ModStart> hb_type & HB_LOCK ) { spin_unlock_irqrestore ( & hashbin -> hb_spinlock, flags ) ; # ifdef CONFIG_LOCKDEP hashbin_lock_depth -- ; # endif } for ( i = 0 ; i < HASHBIN_SIZE ; i ++ ) { queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; if ( queue ) ( * free_func ) ( queue ) ; queue = dequeue_first ( ( irda_queue_t * * ) & hashbin -> hb_queue [ i ] ) ; } } hashbin -> hb_current = NULL ; hashbin -> magic = ~ HB_MAGIC ; if ( hashbin -> hb_type & HB_LOCK ) { spin_unlock_irqrestore ( & hashbin -> hb_spinlock, flags ) ; # ifdef CONFIG_LOCKDEP hashbin_",0
503,"<S2SV_ModStart> EPERM ; } if ( mnt -> mnt. mnt_flags & MNT_LOCK_READWRITE ) { return - EPERM ; } err = security_sb_remount ( sb, data ) ; if ( err ) return err ; down_write ( & sb -> s_umount ) ; if ( flags & MS_BIND ) err = change_mount_flags ( path -> mnt, flags ) ; else if (! capable ( CAP_SYS_ADMIN ) ) err = - EPERM ; else if (! capable ( CAP_SYS_ADMIN ) ) err = - EPERM ; else if (! capable ( CAP_SYS_ADMIN ) ) err = - EPERM ; else if (! capable ( CAP_SYS_ADMIN ) ) err = - EPERM ; else if (! capable ( CAP_SYS_ADMIN ) ) err = - EPERM ; else if (! capable ( CAP_SYS_ADMIN ) ) err = - EPERM ; else if (! capable ( CAP_SYS_ADMIN ) ) err = - EPERM ; else if (! capable ( CAP_SYS_ADMIN ) ) err = - EPERM ; else",0
504,<S2SV_ModStart> * skb ; struct sockaddr_ll * sll <S2SV_ModEnd> ; int vnet_hdr_len <S2SV_ModStart> out_free ; } sll = msg -> msg_name ; sll -> sl_family = AF_INET ; sll -> sl_protocol = htons ( ETH_P_IP ) ; sll -> sl_port = htons ( ETH_P_IPV4 ) ; sll -> sl_family = htons ( ETH_P_IPV6 ) ; sll -> sl_family = htons ( ETH_P_IPV4 ) ; sll -> sl_family = htons ( ETH_P_IPV6 ) ; sll -> sl_family = htons ( ETH_P_IPV4 ) ; sll -> sl_port = htons ( ETH_P_IPV6 ) ; sll -> sl_family = htons ( ETH_P_IPV6 ) ; sll -> sl_family = htons ( ETH_P_IPV6 ) ; sll -> sl_family = htons ( ETH_P_IPV6 ) ; sll -> sl_family =,0
505,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ RAS_MAGICLEN,1
506,"<S2SV_ModStart> ; if ( serial -> num_ports < 2 ) return - 1 ; port = serial -> port [ 0 ] ; if ( port -> bulk_out_endpointAddress == 0 ) port -> bulk_out_endpointAddress = USB_ENDPOINT_NUMBER ( serial -> dev, port -> bulk_out_endpointAddress ) ; else port -> bulk_out_endpointAddress = USB_ENDPOINT_NUMBER ( serial -> dev, port -> bulk_out_endpointAddress ) ; if ( port -> bulk_out_endpointAddress == USB_ENDPOINT_NUMBER ( serial -> dev, port -> bulk_out_endpointAddress ) ) port -> bulk_out_endpointAddress = USB_ENDPOINT_NUMBER ( serial -> dev, port -> bulk_out_endpointAddress ) ; if ( port -> bulk_out_endpointAddress == 0 ) port -> bulk_out_endpointAddress = USB_ENDPOINT_NUMBER ( serial -> dev, port -> bulk_out_endpointAddress ) ; if ( port -> bulk_out_endpointAddress == USB_ENDPOINT_NUMBER ( serial -> dev, port -> bulk_out_endpointAddress ) ) port -> bulk_out_endpointAddress = USB_ENDPOINT_NUMBER ( serial ->",0
507,"<S2SV_ModStart> WriteRiffHeader ( FILE * outfile, RiffChunkHeader * riffhdr, DS64Chunk * ds64_chunk, JunkChunk * junkchunk ) { int do_rf64 = 0, write_junk = 1 ; int64_t total_data_bytes, total_riff_bytes ; int64_t num_channels = WavpackGetNumChannels ( wpc ) ; int32_t bytes_per_sample = WavpackGetBytesPerSample ( wpc ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / ( bytes_per_sample * num_channels ) ; if ( total_samples == - 1 ) total_samples = 0x7ffff000 / (",0
508,"<S2SV_ModStart> msg ) ; err = - EINVAL ; <S2SV_ModStart> ( msg_sys, iov, & addr, VERIFY_READ ) ; if ( err < 0 ) goto out_freeiov ; total_len = err ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; err = ( nosec? sock_recvmsg_nosec : sock_recvmsg ) ( sock, msg, msg_sys, flags ) ; if ( err < 0 ) goto out_freeiov ; cmsg_ptr = ( unsigned long ) msg_sys -> msg_control ; msg_sys -> msg_flags = flags & ( MSG_CMSG_CLOEXEC | MSG_CMSG_COMPAT ) ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; err = ( nosec? sock_recvmsg_nosec : sock_recvmsg ) ( sock, msg, msg_sys,",0
509,"<S2SV_ModStart> inode ) ; u64 <S2SV_ModEnd> bn, dblock <S2SV_ModStart> unsigned end_of_metadata = height <S2SV_ModEnd> - 1 ; <S2SV_ModStart> end_of_metadata = height <S2SV_ModEnd> - 1 ; <S2SV_ModStart> end_of_metadata = height <S2SV_ModEnd> - 1 ; <S2SV_ModStart> end_of_metadata = height <S2SV_ModEnd> - 1 ; <S2SV_ModStart> end_of_metadata = height <S2SV_ModEnd> - 1 ; <S2SV_ModStart> end_of_metadata = height <S2SV_ModEnd> - 1 ; <S2SV_ModStart> end_of_metadata = height <S2SV_ModEnd> ; int eob <S2SV_ModStart> eob ) ; if ( state == ALLOC_DATA ) { struct buffer_head * bh ; ptr = metapointer ( end_of_metadata, mp ) ; bh = mp -> mp_bh [ end_of_metadata ] ; dblks = gfs2_extent_length ( bh -> b_data, bh -> b_size, ptr, maxlen, & eob ) ; if ( state == ALLOC_DATA ) { struct buffer_head * bh ; ptr = metapointer ( end_of_metadata, mp ) ; bh = mp -> mp_bh [ end_of_metadata ] ; bh = mp -> mp_bh [ end_of_metadata ] ; state = ALLOC_DATA",0
510,"<S2SV_ModStart> vpx_codec_iface_name ( global -> codec -> interface ( ) ) ) ; fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; } if ( stream -> next || stream -> index ) fprintf ( stderr, ""\\nStream <S2SV_blank> Index: <S2SV_blank> %d\\n"", stream -> next ) ; if ( input -> use_i420 ) fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; if ( input -> use_i420 ) fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename, input -> use_i420? ""I420"" : ""YV12"" ) ; if ( input -> use_i420 ) fprintf ( stderr, ""Source <S2SV_blank> file: <S2SV_blank> %s <S2SV_blank> Format: <S2SV_blank> %s\\n"", input -> filename",0
511,"<S2SV_ModStart> FALSE ; PROFILER_ENTER ( context -> priv -> prof_nsc_rle_decompress_data ) <S2SV_ModStart> prof_nsc_rle_decompress_data ) ; PROFILER_EXIT ( context -> priv -> prof_nsc_rle_decompress_data ) ; <S2SV_ModStart> prof_nsc_decode ) ; if (! freerdp_image_copy ( pDstData, DstFormat, nDstStride, nXDst, nYDst, width, height, context -> BitmapData, PIXEL_FORMAT_BGRA32, 0, 0, NULL, flip ) ) return FALSE ; if (! freerdp_image_copy ( pDstData, DstFormat, nDstStride, nXDst, nYDst, width, height, context -> BitmapData, PIXEL_FORMAT_BGRA32, 0, 0, 0, 0, NULL, flip ) ) return FALSE ; if (! freerdp_image_copy ( pDstData, DstFormat, nDstStride, nXDst, nYDst, width, height, context -> BitmapData, PIXEL_FORMAT_BGRA32",0
512,"<S2SV_ModStart> -> type == XML_TEXT_NODE ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> children <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> are <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } value = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; if ( value == NULL ) value = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; if ( value == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The <S2SV_blank> children <S2SV_blank> of <S2SV_blank> an <S2SV_blank> attribute <S2SV_blank> node <S2SV_blank> of <S2SV_blank> a <S2SV_blank> "" ""literal <S2SV_blank> result <S2SV_blank> element <S2SV_blank> are <S2SV_blank> not <S2SV_blank> in <S2SV_blank> the <S2SV_blank> expected <S2SV_blank> form.\\n"" ) ; goto error ; } value = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; if ( value == NULL ) value = xmlDictLookup ( ctxt -> dict, BAD_CAST """", 0 ) ; if ( value == NULL ) { xsltTransformError ( ctxt, NULL, attr -> parent, ""Internal <S2SV_blank> error: <S2SV_blank> The",0
513,"<S2SV_ModStart> 0 ) { <S2SV_ModEnd> fs_logger ( ""clone <S2SV_blank> /etc/skel/.zshrc"" <S2SV_ModStart> fs_logger ( ""clone <S2SV_blank> /etc/skel/.zshrc"" ) ; } else { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } } else { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2 ( ""touch"", fname ) ; } else { FILE * fp = fopen ( fname, ""w"" ) ; if ( fp ) { fprintf ( fp, ""\\n"" ) ; SET_PERMS_STREAM ( fp, u, g, S_IRUSR | S_IWUSR ) ; fclose ( fp ) ; fs_logger2",0
514,<S2SV_ModStart> nextsame!= NULL || fv -> b. sf -> fv!= & fv -> b ) { if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 0 &&! _FVMenuSave ( fv ) ) return ( false ) ; } else if ( SFAnyChanged ( sf ) ) { i = AskChanged ( fv -> b. sf ) ; if ( i == 2 &&! _FVMenuSave ( fv ) ) return ( false ) ; } else if ( i == 0 &&! _FVMenuSave ( fv ) ) return ( false ) ; if (! _FVMenuSave ( fv ) ) return ( false ) ; if ( i == 0 &&! _FVMenuSave ( fv ) ) return ( false ) ; if ( sf -> filename!= NULL ) RecentFilesRemember ( sf -> filename ) ; else if ( sf -> origname!= NULL ) RecentFilesRemember ( sf -> origname ) ; else if ( sf -> filename!= NULL ) RecentFilesRemember ( sf -> origname ) ; else if ( sf -> filename!= NULL ) RecentFilesRemember ( sf -> filename ) ; else if ( sf -> origname!= NULL ) Recent,0
515,<S2SV_ModStart> msix_tab_size % 4096 <S2SV_ModEnd> == 0 ),0
516,"<S2SV_ModStart> ; when = timespec_to_ns <S2SV_ModEnd> ( new_setting -> <S2SV_ModStart> it_value ) ; period = timespec_to_ns ( new_setting -> it_interval ) ; if ( when == 0 ) return 0 ; base = kmalloc ( sizeof ( struct mmtimer ), GFP_KERNEL ) ; if ( base == NULL ) return - ENOMEM ; if ( flags & TIMER_ABSTIME ) { struct timespec n ; unsigned long now ; getnstimeofday ( & n ) ; when = timespec_to_ns ( n ) ; period = timespec_to_ns ( n ) ; if ( when > now ) when -= now ; else when = 0 ; } if ( flags & TIMER_ABSTIME ) { struct timespec n ; unsigned long now ; getnstimeofday ( & n ) ; when = timespec_to_ns ( n ) ; now = timespec_to_ns ( n ) ; when = ( when + sgi_clock_period - 1 ) / sgi_clock_period ; } when = ( when + sgi_clock_period - 1 ) / sgi_clock_period ;",0
517,<S2SV_ModStart>! js_regexec ( <S2SV_ModEnd> re -> prog,0
518,<S2SV_ModStart> case OFreshOID : caml_set_oo_id ( <S2SV_ModEnd> dest ) ; <S2SV_ModStart> case OShift : * dest += sp -> arg ; sp -- ; break ; case OReadItems : sp -> dest ++ ; if ( -- ( sp -> arg ) == 0 ) sp -- ; break ; case OShift : * dest += sp -> arg ; sp -- ; break ; case OShift : * dest += sp -> arg ; sp -- ; break ; case OShift : * dest += sp -> arg ; sp -- ; break ; case OShift : * dest += sp -> arg ; if ( -- ( sp -> arg ) == 0 ) sp -- ; break ; case OReadItems : sp -> dest ++ ; if ( -- ( sp -> arg ) == 0 ) sp -- ; code = read8u ( ) ; if ( code >= PREFIX_SMALL_STRING ) { tag = code & 0xF ; size = ( code >> 4 ) & 0x7 ; read_string : if ( size == 0 ) { v = Val_hp ( intern_dest ) ; if ( intern_obj_table!= NULL ) intern_obj_table [ obj_counter ++ ] = v ; * intern_dest = Make_header (,0
519,"<S2SV_ModStart> * multipart_media ; <S2SV_ModEnd> int code = <S2SV_ModStart> = NULL ; <S2SV_ModEnd> int fd = <S2SV_ModStart> ; size_t content_length ; <S2SV_ModStart> ; int code = 500, fd = - 1, nranges, ret ; uint32_t boundary ; char content_range [ 64 ] ; <S2SV_ModStart> st_size, & nranges ) ) == NULL ) { code = 416 ; ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> */%lld"", st -> st_size ) ; errstr = content_range ; goto abort ; } if ( <S2SV_ModStart> 1 ) { ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> %lld-%lld/%lld"", range -> start, range -> end, st -> st_size ) ; errstr = ""bytes <S2SV_blank> */%lld"", st -> st_size ) ; if ( kv_add ( & resp -> http_headers, ""Content-Range"", content_range ) == NULL ) goto abort ; } if ( nranges == 1 ) { ( void ) snprintf ( content_range, sizeof ( content_range ), ""bytes <S2SV_blank> %lld-%lld",0
520,"<S2SV_ModStart> ; ier = ksz8851ReadReg <S2SV_ModEnd> ( interface, <S2SV_ModStart>, KSZ8851_IER ) ; ksz8851WriteReg <S2SV_ModEnd> ( interface, <S2SV_ModStart>, 0 ) ; isr = ksz8851ReadReg ( interface, KSZ8851_ISR ) ; if ( ( isr & KSZ8851_LCIS )!= 0 ) { ksz8851WriteReg ( interface, KSZ8851_ISR, KSZ8851_LCIS ) ; if ( ( isr & KSZ8851_ISR_LCIS )!= 0 ) { ksz8851WriteReg ( interface, KSZ8851_ISR, KSZ8851_ISR_LCIS ) ; if ( ( isr & KSZ8851_ISR_TXIS )!= 0 ) { ksz8851WriteReg ( interface, KSZ8851_ISR, KSZ8851_ISR_TXIS ) ; if ( ( isr & KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { flag |= osSetEvent",0
521,"<S2SV_ModStart> void encode_quantization ( VP9EncoderConfig <S2SV_ModEnd> * cm, <S2SV_ModStart> * cm, vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> wb ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> cm -> base_qindex, QINDEX_BITS ) ; write_delta_q ( wb, cm -> y_dc_delta_q ) ; write_delta_q ( wb, cm -> uv_dc_delta_q ) ; write_delta_q ( wb, cm -> uv_ac_delta_q ) ; write_delta_q ( wb, cm -> y_ac_delta_q ) ; write_delta_q ( wb, cm -> x_dc_delta_q ) ; write_delta_q ( wb, cm -> y_ac_delta_q ) ; write_delta_q ( wb, cm -> x_ac_delta_q ) ; write_delta_q ( wb, cm -> y_ac_delta_q ) ; write_delta_q ( wb, cm -> x_ac_delta_q ) ; write_delta_q ( wb, cm -> y_ac_delta_q ) ; write_",0
522,"<S2SV_ModStart> ( write ( uipc_main. ch [ ch_id ]. fd, p_buf, msglen ) < 0 ) { BTIF_TRACE_ERROR ( ""failed <S2SV_blank> to <S2SV_blank> write <S2SV_blank> (%s)"", strerror ( errno ) ) ; }",0
523,<S2SV_ModStart> tmp ) { state -> ptr = tmp ; <S2SV_ModStart> tmp ; } if ( state -> ptr == state -> end ) { state -> ptr = tmp ; <S2SV_ModStart> end ) ; state -> url. scheme = & state -> buffer [ 0 ] ; state -> buffer [ state -> offset ++ ] = 0 ; return ++ state -> ptr ; } if ( state -> ptr == state -> end ) { state -> url. scheme = & state -> buffer [ 0 ] ; state -> buffer [ state -> offset ++ ] = 0 ; state -> buffer [ state -> offset ++ ] = 0 ; return ++ state -> ptr ; } if ( state -> ptr == state -> end ) { state -> url. scheme = & state -> buffer [ 0 ] ; state -> buffer [ state -> offset ++ ] = 0 ; return ++ state -> ptr ; } if ( state -> ptr == state -> end ) { state -> url. scheme = & state -> buffer [ 0 ] ; state -> buffer [ state -> offset ++ ] = 0 ; state -> buffer [ state -> offset ++ ] = 0 ; return ++ state -> ptr ; } if ( state -> ptr == state -> end ) { state -> url. scheme = & state -> buffer [ 0 ] ; state -> buffer [ state,0
524,"<S2SV_ModStart> FBIOGET_VBLANK : { struct fb_vblank <S2SV_ModEnd> vblank ; vblank <S2SV_ModStart> FB_VBLANK_HAVE_VCOUNT | FB_VBLANK_HAVE_VSYNC ; vblank. count = 0 ; vblank. vcount = 0 ; vblank. hcount = 0 ; vblank. flags = FB_VBLANK_HAVE_HCOUNT | FB_VBLANK_HAVE_HSYNC ; vblank. flags = FB_VBLANK_HAVE_COUNT | FB_VBLANK_HAVE_VCOUNT | FB_VBLANK_HAVE_VSYNC ; vblank. count = 0 ; vblank. vcount = 0 ; vblank. hcount = 0 ; if ( copy_to_user ( ( void __user * ) arg, & vblank, sizeof ( vblank ) ) ) return - EFAULT ; if ( copy_to_user ( ( void __user * ) arg, & vblank, sizeof ( vblank ) ) ) return - EFAULT ;",0
525,<S2SV_ModStart> flags ) { if ( flags & TFD_TIMER_ABSTIME ) && ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( ctx -> clockid == CLOCK_REALTIME || ctx -> clockid == CLOCK_REALTIME_ALARM ) && ( ctx -> flags & TFD_TIMER_CANCEL_ON_SET ) ) { if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ) ; } else if ( ctx -> might_cancel ) { timerfd_remove_cancel ( ctx ),0
526,"<S2SV_ModStart> ++ ) { if ( nCurves == 256 ) { for ( j = 0 ; j < nElements ; j ++ ) { c16 -> Curves [ i ] [ j ] = cmsEvalToneCurve16 ( G [ i ], FROM_8_TO_16 ( j ) ) ; } } else if ( nCurves == 256 ) { for ( j = 0 ; j < nElements ; j ++ ) { c16 -> Curves [ i ] [ j ] = cmsEvalToneCurve16 ( G [ i ], FROM_16_TO_16 ( j ) ) ; } } else { for ( j = 0 ; j < nCurves ; j ++ ) { c16 -> Curves [ i ] [ j ] = cmsEvalToneCurve16 ( G [ i ], FROM_16_TO_16 ( j ) ) ; } }",0
527,"<S2SV_ModStart> dev_name, LOOKUP_FOLLOW, & path ) < 0 ) { error = - ENOENT ; goto out ; } if ( kern_path ( dev_name, LOOKUP_FOLLOW, & path ) < 0 ) { error = - ENOENT ; goto out ; } if ( kern_path ( dev_name, LOOKUP_FOLLOW, & path ) < 0 ) { error = - ENOENT ; goto out ; } if ( kern_path ( dev_name, LOOKUP_FOLLOW, & path ) < 0 ) { error = - ENOENT ; goto out ; } if ( kern_path ( path, LOOKUP_FOLLOW, & path ) < 0 ) { error = - ENOENT ; goto out ; } if ( kern_path ( path, LOOKUP_FOLLOW, & path ) < 0 ) { error = - ENOENT ; goto out ; } if ( kern_path ( path, LOOKUP_FOLLOW, & path ) < 0 ) { error = - ENOENT ; goto out ; } if ( kern_path ( path, LOOKUP_FOLLOW, & path ) < 0 ) { error = - ENOENT ; goto out ; } if ( kern_path ( path, LOOKUP_FOLLOW, & path ) < 0 )",0
528,<S2SV_ModStart> ; if ( space_rem > msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { ret = SAA_ERR_INVALID_COMMAND ; goto out ; } if ( space_rem > msg -> size ) { ret = SAA_ERR_,0
529,"<S2SV_ModStart> TSRMLS_CC ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> RETVAL_STRINGL ( replaced, ( size_t ) new_len, 0 ), TEMP_FAILURE_RETRY ( <S2SV_ModStart> RETVAL_STRINGL ( replaced, ( size_t ) new_len, 0 ), TEMP_FAILURE_RETRY ( <S2SV_ModStart> RETVAL_STRINGL ( replaced, ( size_t ) new_len, 0 ), TEMP_FAILURE_RETRY ( ( size_t ) new_len, 0 ), TEMP_FAILURE_RETRY ( ( size_t ) new_len, 0 ), TEMP_FAILURE_RETRY ( ( size_t ) new_len, 0 ), TEMP_FAILURE_RETRY ( ( size_t ) new_len, 0 ) ), TEMP_FAILURE_RETRY ( ( size_t ) new_len, 0 ), TEMP_FAILURE_RETRY ( ( size_t ) new_len, 0 ), TEMP_FAILURE_RETRY ( ( size_t ) new_len, 0 ), TEMP_FAILURE_RETRY ( ( size_t ) TEMP_FAILURE_RETRY ( ( size_t ) TEMP_FAILURE_RETRY ( ( size_t ) TEMP_FAILURE_",0
530,"<S2SV_ModStart> ; if ( ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) ) { if ( ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) ) { if ( ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) ) { if ( ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) ) { if ( ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) ) { if ( ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) ) == NULL ) { if ( ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) ) == NULL ) { if ( ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == NULL ) { if ( ( peerec = d2i_EC_PUBKEY_bio ( rawcert, NULL ) ) == NULL ) { if ( ( peerec = d2i_EC_PUBKEY_bio (",0
531,"<S2SV_ModStart> t1_getline ( ) ; if ( strcmp ( t1_line_array, charstringname )!= 0 ) { strcpy ( t1_buf_array, charstringname ) ; strcpy ( t1_line_array, charstringname ) ; t1_line_ptr = eol ( t1_line_array ) ; } else if ( strcmp ( t1_buf_array, charstringname )!= 0 ) { strcpy ( t1_line_array, charstringname ) ; t1_line_ptr = eol ( t1_line_array ) ; } else { strcpy ( t1_buf_array, charstringname ) ; strcpy ( t1_line_array, charstringname ) ; t1_line_ptr = eol ( t1_line_array ) ; }",0
532,"<S2SV_ModStart> BLOCK_SIZE bsize, int <S2SV_ModEnd> subsize ) { <S2SV_ModStart> int bsl = b_width_log2_lookup [ bsize ], hbs = ( 1 << bsl ) / 4, partition = partition_lookup [ bsl ] [ subsize ] ; assert ( bsize >= BLOCK_8X8 ) ; if ( mi_row >= cm -> mi_rows || mi_col >= cm -> mi_cols ) return ; <S2SV_ModStart> case PARTITION_NONE : * get_sb_index ( x, subsize ) = 0 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x, subsize ) -> mic ; duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col, bsize ) ; if ( mi_col + hbs < cm -> mi_cols ) { * get_sb_index ( x, subsize ) = 1 ; set_modeinfo_offsets ( cm, xd, mi_row, mi_col ) ; * ( xd -> mi [ 0 ] ) = get_block_context ( x",0
533,"<S2SV_ModStart> name ) ; if (! check_submodule_name ( name ) ) data -> ret |= report ( data -> options, data -> obj, FSCK_MSG_GITMODULES_NAME, ""disallowed <S2SV_blank> submodule <S2SV_blank> name: <S2SV_blank> %s"", name ) ;",0
534,"<S2SV_ModStart> ; int pixel_ptr = 0 ; int block_ptr = 0 ; int pixel_x, pixel_y ; int total_blocks ; if ( s -> size < 4 ) { av_log ( s -> avctx, AV_LOG_ERROR, ""MOV <S2SV_blank> chunk <S2SV_blank> size <S2SV_blank>!= <S2SV_blank> encoded <S2SV_blank> chunk <S2SV_blank> size; <S2SV_blank> using <S2SV_blank> MOV <S2SV_blank> chunk <S2SV_blank> size; <S2SV_blank> using <S2SV_blank> MOV <S2SV_blank> chunk <S2SV_blank> size\\n"" ) ; return ; } if ( s -> buf [ stream_ptr ]!= 0xe1 ) { av_log ( s -> avctx, AV_LOG_ERROR, ""First <S2SV_blank> chunk <S2SV_blank> byte <S2SV_blank> is <S2SV_blank> 0x%02x <S2SV_blank> instead <S2SV_blank> of <S2SV_blank> 0xe1\\n"", s -> buf [ stream_ptr ] ) ; chunk_size = s -> size ; stream_ptr += 4 ; if ( chunk_size!= s -> size ) { av_log ( s -> avctx, AV_LOG_ERROR, ""MOV <S2SV_blank> chunk <S2SV_blank> size <S2SV_blank>!= <S2SV_blank> encoded <S2SV_blank> chunk <S2SV_blank> size; <S2SV_blank> using <S2SV_blank> MOV <S2SV_blank> chunk <S2SV_blank> size; <S2SV_blank> using <S2SV_blank> MOV <S2SV_blank> chunk <S2SV_blank> size\\n"" ) ; return ; }",0
535,"<S2SV_ModStart> cnt ) { JAS_DBGLOG ( 100, ( ""mem_read(%p, <S2SV_blank> %p, <S2SV_blank> %d)\\n"", obj, buf, cnt ) ) ; if ( cnt > JAS_MAX ( n, cnt ) ) { JAS_DBGLOG ( 100, ( ""mem_read(%p, <S2SV_blank> %p, <S2SV_blank> %d)\\n"", obj, buf, cnt ) ) ; jas_stream_memobj_t * m = ( jas_stream_memobj_t * ) obj ; JAS_DBGLOG ( 100, ( ""mem_read(%p, <S2SV_blank> %p, <S2SV_blank> %d)\\n"", obj, buf, cnt ) ) ; JAS_DBGLOG ( 100, ( ""mem_read(%p, <S2SV_blank> %p, <S2SV_blank> %d)\\n"", obj, buf, cnt ) ) ; jas_stream_memobj_t * m = ( jas_stream_memobj_t * ) obj ; JAS_DBGLOG ( 100, ( ""mem_read(%p, <S2SV_blank> %p, <S2SV_blank> %d)\\n"", obj, buf, cnt )",0
536,"<S2SV_ModStart> * ptype ; __be16 type ; off = skb_gro_offset ( skb ) ; hlen = off + sizeof ( * greh ) ; if ( skb_gro_header_hard ( skb, hlen ) ) { greh = skb_gro_header_fast ( skb, hlen ) ; if (! greh ) goto out ; type = greh -> protocol ; } if ( ( greh -> flags & GRE_KEY ) &&! NAPI_GRO_CB ( skb ) -> flush ) { if ( skb_gro_checksum_simple_validate ( skb ) ) goto out_unlock ; } type = greh -> protocol ; if ( skb_gro_header_hard ( skb, hlen ) ) { greh = skb_gro_header_slow ( skb, hlen, off ) ; if (! greh ) goto out_unlock ; } if ( ( greh -> flags & GRE_CSUM ) &&! NAPI_GRO_CB ( skb ) -> flush ) { if ( skb_gro_checksum_simple_validate ( skb ) ) goto out_unlock",0
537,"<S2SV_ModStart> ; if ( ( matrix = jas_malloc ( numrows * numcols ) ) ) ) { jas_matrix_destroy ( matrix ) ; return 0 ; } matrix -> numcols_ = numcols ; matrix -> rows_ = 0 ; matrix -> maxrows_ = numrows ; matrix -> data_ = 0 ; matrix -> datasize_ = numcols * numrows ; if ( matrix -> maxrows_ > 0 ) { if (! ( matrix -> rows_ = jas_alloc2 ( matrix -> maxrows_, sizeof ( jas_seqent_t ) ) ) ) ) { jas_matrix_destroy ( matrix ) ; return 0 ; } matrix -> numrows_ = numrows ; matrix -> numcols_ = numcols ; matrix -> data_ = 0 ; matrix -> datasize_ = numcols * numcols ; if ( matrix -> datasize_ > 0 ) { if (! ( matrix -> data_ = jas_alloc2 ( matrix -> datasize_, sizeof ( jas_seqent_t ) ) ) ) ) ) { jas_matrix_destroy ( matrix ) ; return 0 ; }",0
538,"<S2SV_ModStart> { bool result = string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & ( session -> sessionKey. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & ( session -> salt. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & ( session -> authValueBind. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & ( session -> sessionKey. b ) ) ; if (! result ) { return TSS2_SYS_RC_BAD_VALUE ; } result = string_bytes_concat_buffer ( ( TSS2_MAX_BUFFER * ) & key, & ( session -> salt. b ) ) ; if (! result",0
539,"<S2SV_ModStart> key_ref, KEY_NEED_READ ) ; if ( ret == 0 ) goto can_read_key ; if ( is_key_possessed ( key_ref ) ) ret = - EACCES ; if (! is_key_possessed ( key_ref ) ) ret = - EOPNOTSUPP ; if ( key -> type -> read ) ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( ret == 0 ) ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( key -> type -> read ) ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = key -> type -> read ( key, buffer, buflen ) ; if ( ret == 0 ) ret = - EOPNOTSUPP ; if ( ret == 0 ) ret",0
540,"<S2SV_ModStart> ivd_video_decode_op_t * ps_dec_op ; ps_dec_op = ( ivd_video_decode_op_t * ) pv_api_op ; { UWORD32 u4_size ; u4_size = ps_dec_op -> u4_size ; memset ( ps_dec_op, 0, sizeof ( ivd_video_decode_op_t ) ) ; ps_dec -> u4_max_ofst = u4_size ; ps_dec -> u4_length_of_start_code = ps_dec_op -> u4_length_of_start_code ; ps_dec -> u4_first_slice_is_aud = ps_dec_op -> u4_first_slice_is_aud ; ps_dec -> u4_first_slice_is_aud = ps_dec_op -> u4_first_slice_is_aud ; ps_dec -> u4_first_slice_is_aud = ps_dec -> u4_first_slice_is_aud ; ps_dec -> u4_first_slice_is_aud = 0 ;",0
541,<S2SV_ModStart> = tnum_is_const ( <S2SV_ModEnd> dst_reg -> var_off <S2SV_ModStart> = tnum_is_const ( <S2SV_ModEnd> dst_reg -> var_off <S2SV_ModStart> = tnum_is_const ( <S2SV_ModEnd> dst_reg -> var_off <S2SV_ModStart> = tnum_is_const ( <S2SV_ModEnd> dst_reg -> var_off <S2SV_ModStart> = tnum_is_const ( <S2SV_ModEnd> dst_reg -> var_off <S2SV_ModStart> = tnum_is_const ( <S2SV_ModEnd> dst_reg -> var_off <S2SV_ModStart> = tnum_add ( <S2SV_ModEnd> dst_reg -> var_off <S2SV_ModStart> = tnum_add ( <S2SV_ModEnd> dst_reg -> var_off <S2SV_ModStart> = tnum_add ( <S2SV_ModEnd> dst_reg -> var_off <S2SV_ModStart> = tnum_add ( <S2SV_ModEnd> dst_reg -> var_off <S2SV_ModStart> = tnum_sub ( <S2SV_ModEnd> dst_reg -> var_off <S2SV_ModStart> = tnum_sub ( <S2SV_ModEnd> dst_reg -> var_off <S2SV_ModStart> = tnum_sub ( <S2SV_ModEnd> dst_reg -> var_off <S2SV_ModStart> = tnum_sub ( <S2SV_ModEnd> dst_reg -> var_off <S2SV_ModStart> = tnum_sub ( <S2SV_ModEnd> dst_reg -> var_off <S2SV_ModStart> = tnum_sub ( <S2SV_ModEnd> dst_reg -> var_off <S2SV_ModStart> =,0
542,"<S2SV_ModStart> ) ) { cFYI ( 1, ""parent <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p <S2SV_blank> name <S2SV_blank> is: <S2SV_blank> %s <S2SV_blank> and <S2SV_blank> dentry <S2SV_blank> = <S2SV_blank> 0x%p"", parent_dir_inode, direntry -> d_name. name, direntry ) ; cfile = cifs_lookup_file ( parent_dir_inode, direntry ) ; if ( cfile == NULL ) { cFYI ( 1, ""non-NULL <S2SV_blank> file <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p <S2SV_blank> name <S2SV_blank> is: <S2SV_blank> %s <S2SV_blank> and <S2SV_blank> dentry <S2SV_blank> = <S2SV_blank> 0x%p"", parent_dir_inode, direntry -> d_name. name, direntry ) ; cfile = cifs_lookup_file ( parent_dir_inode, direntry ) ; if ( cfile == NULL ) { cFYI ( 1, ""non-NULL <S2SV_blank> file <S2SV_blank> inode <S2SV_blank> = <S2SV_blank> 0x%p <S2SV_blank> name <S2SV_blank> is: <S2SV_blank> %s <S2SV_blank> and <S2SV_blank> dentry <S2SV_blank> = <S2SV_blank> 0x%p"", parent_dir_inode, dire",0
543,<S2SV_ModStart> ; break ; case VFIO_PCI_CONFIG_REGION_INDEX : info. offset = VFIO_PCI_INDEX_TO_OFFSET ( info. index ) ; info. size = pdev -> cfg_size ; info. flags = VFIO_REGION_INFO_FLAG_READ | VFIO_REGION_INFO_FLAG_WRITE ; break ; case VFIO_PCI_BAR0_REGION_INDEX : info. offset = VFIO_PCI_INDEX_TO_OFFSET ( info. index ) ; info. size = pdev -> bar0_cfg_size ; info. flags = VFIO_REGION_INFO_FLAG_READ | VFIO_REGION_INFO_FLAG_WRITE ; break ; case VFIO_PCI_BAR5_REGION_INDEX : info. offset = VFIO_PCI_INDEX_TO_OFFSET ( info. index ) ; info. size = pdev -> bar5_cfg_size ; info. flags = VFIO_REGION_INFO_FLAG_READ | VFIO_REGION_INFO_FLAG_READ | VFIO_REGION_INFO_FLAG_WRITE ; break,0
544,"<S2SV_ModStart> copied ) ; ret = ext4_jbd2_file_inode ( handle, inode ) ; if ( ret ) goto errout ; ret = block_write_end ( file, mapping, pos, len, copied, page, fsdata ) ; if ( ret < 0 ) goto errout ; ret = ext4_jbd2_file_inode ( handle, inode ) ; if ( ret < 0 ) goto errout ; ret = ext4_write_block_end ( file, mapping, pos, len, copied, page, fsdata ) ; if ( ret < 0 ) goto errout ; ret = ext4_jbd2_file_inode ( handle, inode ) ; if ( ret < 0 ) goto errout ; ret = ext4_jbd2_file_inode ( handle, inode ) ; if ( ret < 0 ) goto errout ; ret = ext4_write_block_end ( file, mapping, pos, len, copied, page, fsdata ) ; if ( ret < 0 ) goto errout ; ret = ext4_write_block_end ( file, mapping, pos, len, copied, page ) ; if ( ret",0
545,"<S2SV_ModStart> s -> filesize = - 1 ; if ( uri [ strlen ( uri ) - 1 ] == '\\0' ) { av_log ( h, AV_LOG_WARNING, ""No <S2SV_blank> trailing <S2SV_blank> CRLF <S2SV_blank> found <S2SV_blank> in <S2SV_blank> HTTP <S2SV_blank> header.\\n"" ) ; ret = http_open_cnx ( h, uri, flags, options ) ; if ( ret < 0 ) return ret ; s -> location = av_strdup ( uri ) ; if (! s -> location ) return AVERROR ( ENOMEM ) ; s -> location = av_strdup ( uri ) ; if (! s -> location ) { av_log ( h, AV_LOG_WARNING, ""No <S2SV_blank> trailing <S2SV_blank> CRLF <S2SV_blank> found <S2SV_blank> in <S2SV_blank> HTTP <S2SV_blank> header.\\n"" ) ; ret = http_open_cnx ( h, uri, flags, options ) ; if ( ret < 0 ) return ret ; s -> location = av_strdup ( uri ) ; if (! s -> location ) return AVERROR ( ENOMEM ) ; s -> location = av_strdup ( uri ) ; if (! s -> location ) { av_log ( h, AV_LOG_WARNING, """,0
546,"<S2SV_ModStart> tcp_synq_no_recent_overflow ( sk ) || ( mss = cookie_check ( skb, cookie ) ) == 0 ) { NET_INC_STATS_BH ( sock_net ( sk ), LINUX_MIB_SYNCOOKIESFAILED ) ; goto out ; } if ( tcp_synq_no_recent_overflow ( sk ) || ( mss = cookie_check ( skb, cookie ) ) == 0 ) { NET_INC_STATS_BH ( sock_net ( sk ), LINUX_MIB_SYNCOOKIESFAILED ) ; goto out ; } if ( tcp_synq_no_recent_overflow ( sk ) || ( mss = cookie_check ( skb, cookie ) ) == 0 ) { NET_INC_STATS_BH ( sock_net ( sk ), LINUX_MIB_SYNCOOKIESFAILED ) ; goto out ; }",0
547,"<S2SV_ModStart> char * in, size_t buflen <S2SV_ModStart> += 4 ; if ( len > buflen ) return - 1 ; <S2SV_ModStart> '=' ) { if ( len > buflen ) return - 1 ; <S2SV_ModStart> '=' ) { if ( len > buflen ) return - 1 ; <S2SV_ModStart> '=' ) { if ( len > buflen ) return - 1 ; <S2SV_ModStart> '=' ) { if ( len > buflen ) return - 1 ; <S2SV_ModStart> '=' ) { if ( len > buflen ) return - 1 ; <S2SV_ModStart> '=' ) { if ( len > buflen ) return - 1 ; <S2SV_ModStart> '=' ) { if ( len > buflen ) return - 1 ; <S2SV_ModStart> '=' ) { if ( len > buflen ) return - 1 ; <S2SV_ModStart> '=' ) { if ( len > buflen ) return - 1 ; <S2SV_ModStart> '=' ) { if ( len > buflen ) return - 1 ; <S2SV_ModStart> '=' ) { if ( len > buflen ) return - 1 ; <S2SV_ModStart> '=' ) { if ( len > buflen ) return - 1 ; <S2SV_ModStart> '=' ) { if ( len > buflen ) return - 1 ; <S2SV_ModStart> '=' ) { if ( len > buflen ) return - 1 ; <S2SV_ModStart> '=' )",0
548,<S2SV_ModStart> gc ) ; if ( gpio_dev -> pctrl ) module_put ( gpio_dev -> pctrl -> owner ) ; <S2SV_ModStart> pctrl ) ; module_put ( gpio_dev -> pctrl -> owner ) ;,0
549,"<S2SV_ModStart> size_t copied, cur_len ; size_t total_written = 0 ; <S2SV_ModStart> i ++ ) { copied = min_t ( size_t, cur_len, sizeof ( struct cifs_writedata_entry ) ) ; if ( copied > len ) { rc = - EINVAL ; break ; } <S2SV_ModEnd> total_written += copied <S2SV_ModStart> copied = min_t ( size_t, cur_len, sizeof ( struct cifs_writedata_entry ) ) ; if ( rc ) { kfree ( wdata ) ; break ; } tmp = cifs_writedata_alloc ( nr_pages, cifs_uncached_writev_complete ) ; if (! tmp ) { kfree ( tmp ) ; break ; } rc = cifs_write_allocate_pages ( tmp, nr_pages, cifs_uncached_writev_complete ) ; if ( rc ) { kfree ( tmp ) ; break ; } save_len = cur_len ; wdata = cifs_writedata_alloc ( nr_pages, cifs_uncached_writev_complete ) ; if (! tmp ) { kfree ( wdata ) ;",0
550,"<S2SV_ModStart> ; if ( <S2SV_ModEnd>! ( quirks <S2SV_ModStart> CP_RDESC_SWAPPED_MIN_MAX ) ) return rdesc ; for ( i = 0 ; i < * rsize - 4 ; i ++ ) if ( rdesc [ i ] == 0x29 && rdesc [ i + 2 ] == 0x19 ) { rdesc [ i ] = 0x19 ; rdesc [ i + 2 ] = 0x29 ; swap ( rdesc [ i + 3 ], rdesc [ i + 1 ] ) ; } if (! ( quirks & CP_RDESC_SWAPPED_MAX ) ) return rdesc ; for ( i = 0 ; i < * rsize - 4 ; i ++ ) if ( rdesc [ i ] == 0x29 && rdesc [ i + 2 ] == 0x19 ) { rdesc [ i ] = 0x19 ; rdesc [ i + 2 ] = 0x29 ; swap ( rdesc [ i + 3 ], rdesc [ i + 1 ] ) ; } if (! ( quirks & CP_RDESC_SWAPPED_MIN_MAX ) ) return rdesc ; for ( i = 0 ; i < * r",0
551,"<S2SV_ModStart> svc_ctx ) { SvcInternal_t <S2SV_ModEnd> * const si <S2SV_ModStart> svc_ctx ) ; SvcInternal_t <S2SV_ModEnd> * const si <S2SV_ModStart> svc_ctx ) ; <S2SV_ModEnd> svc_log_reset ( svc_ctx <S2SV_ModStart> ) ; encode_frame_count = get_svc_internal_count ( svc_ctx ) ; if ( encode_frame_count <= 0 ) return vpx_svc_get_message ( svc_ctx ) ; svc_log ( svc_ctx, SVC_LOG_INFO, ""\\n"" ) ; for ( i = 0 ; i < si -> layers ; ++ i ) { number_of_frames = encode_frame_count ; if ( svc_ctx -> encoding_mode == ALT_INTER_LAYER_PREDICTION_IP && ( i == 1 || i == 3 ) ) { number_of_frames -= number_of_keyframes ; } svc_log ( svc_ctx, SVC_LOG_INFO, ""Layer <S2SV_blank> %d <S2SV_blank> Average <S2SV_blank> PSNR=[%2.3f, <S2SV_blank> %2.3f, <S2SV_blank> %2.3f], <S2SV_blank> Bytes=[%u]\\n"", i, ( double ) si -> psnr",0
552,"<S2SV_ModStart> BYTE * in, BYTE * <S2SV_ModEnd> out, UINT32 <S2SV_ModStart> 5 ) { BYTE value ; UINT32 len ; <S2SV_ModStart> fillMemory ( out, len, value ) ; out += len ; left -= len ; } else { value = * in ++ ; len = ( UINT32 ) * in ++ ; len = ( UINT32 ) * in ++ ; len = ( UINT32 ) * in ++ ; len = ( UINT32 ) * in ++ ; len = ( UINT32 ) * in ++ ; len = ( UINT32 ) * in ++ ; len = ( UINT32 ) * in ++ ; len = * ( ( UINT32 * ) in ) ; in += 4 ; } fillMemory ( out, len, value ) ; out += len ; left -= len ; } if ( value == * in ) { in ++ ; if ( * in < 0xFF ) { len = ( UINT32 ) * in ++ ; len = ( UINT32 ) * in ++ ; len = ( UINT32 ) * in ++ ; len = ( UINT32 ) * in ++ ; len = ( UINT32 ) * in ++ ; len = * ( ( UINT32 * ) in ) ; in += 4 ; } fillMemory ( out, len, value ) ;",0
553,"<S2SV_ModStart> ; if ( screen -> buffer ) vterm_allocator_free ( screen -> vt, screen -> buffer ) ; screen -> buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; if ( screen -> sb_buffer ) vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_rows ) ; if ( screen -> sb_buffer ) vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; screen -> sb_buffer = vterm_allocator_malloc ( screen -> vt, sizeof ( VTermScreenCell ) * new_cols ) ; if ( new_cols > old_cols ) { VTermRect rect ; rect. start_row = 0 ; rect. end_row = 0 ; rect. start_col = 0 ; rect. end_col = 0 ; scrollrect ( rect, first_blank_row - new_rows, 0, user ) ; vterm_screen_flush_damage ( screen )",0
554,<S2SV_ModStart> n ) { <S2SV_ModEnd> const char * <S2SV_ModStart> * str ; int in_named_escape = 0 ; int result = 0 ; assert ( * literal == NULL ) ; for ( ; * str < end ; ( * str ) ++ ) { char ch = * * str ; if (! in_named_escape && * ( * str ) - literal_start >= 2 && * ( * str ) - literal_start >= 2 && * ( * str ) - literal_start >= 2 && * ( * str ) - literal_start >= 2 && * ( * str ) - literal_start >= 2 && * ( * str ) - literal_start >= 2 && * ( * str ) - literal_start >= 2 && * ( * str ) - literal_start >= 2 && * ( * str - 2 ) == '\\\\' && * ( * str - 1 ) == 'N' ) { in_named_escape = 0 ; } else if ( ch == '{' && * ( * str ) - literal_start >= 2 && * ( * str ) - literal_start >= 2 && * ( * str ) - literal_start >= 2 && * ( * str ) - literal_start >= 2 && * ( * str ) -,0
555,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static jas_int <S2SV_ModEnd> mem_resize ( jas_stream_memobj_t <S2SV_ModStart> unsigned char * buf ; JAS_DBGLOG ( 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"", m, bufsize ) ) ; if ( bufsize < 0 ) { JAS_DBGLOG ( 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"", m, bufsize ) ) ; return - 1 ; } JAS_DBGLOG ( 100, ( ""mem_resize(%p, <S2SV_blank> %d)\\n"", m, bufsize ) ) ; if (! ( buf = jas_realloc2 ( m -> buf_, bufsize, sizeof ( unsigned char ) ) ) && bufsize ) { JAS_DBGLOG ( 100, ( ""mem_resize <S2SV_blank> realloc <S2SV_blank> failed\\n"" ) ) ; return - 1 ; } JAS_DBGLOG ( 100, ( ""mem_resize <S2SV_blank> realloc <S2SV_blank> succeeded\\n"" ) ) ; m -> buf_ = buf ; m -> bufsize_ = bufsize ;",0
556,"<S2SV_ModStart> = create_dump_dir_from_problem_data ( pd <S2SV_ModEnd>, g_settings_dump_location )",0
557,"<S2SV_ModStart> name ) ; if (! LookupString ( symInterpretMatchMaskNames, pred_txt, pred_rtrn ) ) { log_err ( info -> ctx, ""Illegal <S2SV_blank> modifier <S2SV_blank> predicate <S2SV_blank> \\""%s\\""; <S2SV_blank> Ignored\\n"", pred_txt ) ; return false ; } expr = expr -> action. args ; } else if ( expr -> expr. op == EXPR_ACTION_DECL ) { const char * pred_txt = xkb_atom_text ( info -> ctx, expr -> ident. name ) ; if (! LookupString ( symInterpretMatchMaskNames, pred_txt, pred_rtrn ) ) { log_err ( info -> ctx, ""Illegal <S2SV_blank> modifier <S2SV_blank> predicate <S2SV_blank> \\""%s\\""; <S2SV_blank> Ignored\\n"", pred_txt ) ; return false ; } } else if ( expr -> expr. op == EXPR_IDENT ) { const char * pred_txt = xkb_atom_text ( info -> ctx, expr -> ident. ident ) ; if ( istreq ( pred_txt, ""any"" ) ) { * pred_rtrn = MATCH_ANY ; * mods_rtrn = MOD_REAL_MASK",0
558,<S2SV_ModStart> <S2SV_null> <S2SV_null> static void <S2SV_ModEnd> pcrypt_free ( struct <S2SV_ModStart> inst ) { <S2SV_ModEnd> crypto_instance_ctx * ctx <S2SV_ModStart> * ctx = <S2SV_ModEnd> crypto_instance_ctx ( inst,0
559,<S2SV_ModStart> 0 ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( x1 + w1 ) > ( ptr -> width ) ) { if ( ( y1 + h1 ) > ( ptr -> height ) ) { if ( ( y1 + h1 ) > ( ptr,0
560,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image",0
561,"<S2SV_ModStart> NDISC_NODETYPE_HOST ) { ND_PRINTK ( 2, warn, ""RA: <S2SV_blank> from <S2SV_blank> host <S2SV_blank> or <S2SV_blank> unauthorized <S2SV_blank> router\\n"" ) ; return ; } # ifdef CONFIG_IPV6_NDISC_NODETYPE if ( skb -> ndisc_nodetype == NDISC_NODETYPE_HOST ) { ND_PRINTK ( 2, warn, ""RA: <S2SV_blank> from <S2SV_blank> host <S2SV_blank> or <S2SV_blank> unauthorized <S2SV_blank> router\\n"" ) ; return ; } ND_PRINTK ( 2, warn, ""RA: <S2SV_blank> from <S2SV_blank> host <S2SV_blank> or <S2SV_blank> unauthorized <S2SV_blank> router\\n"" ) ; return ; } # ifdef CONFIG_IPV6_NDISC_NODETYPE if ( skb -> ndisc_nodetype == NDISC_NODETYPE_HOST ) { ND_PRINTK ( 2, warn, ""RA: <S2SV_blank> from <S2SV_blank> host <S2SV_blank> or <S2SV_blank> unauthorized <S2SV_blank> router\\n"" ) ; return ; } # endif",0
562,"<S2SV_ModStart> u_char * dat, u_int length <S2SV_ModStart> ) dat ; if ( length < 2 ) { ND_PRINT ( ( ndo, ""AVP <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; }",1
563,<S2SV_ModStart> * up ; size_t esn_len ; <S2SV_ModStart> = nla_data ( rp ) ; esn_len = xfrm_replay_state_esn_len ( replay_esn ) ; if ( esn_len!= up -> esn_len ) return - EINVAL ; if ( xfrm_replay_state_esn_len ( replay_esn )!= esn_len ) return - EINVAL ; if ( xfrm_replay_state_esn_len ( up )!= xfrm_replay_state_esn_len ( up ) ) return - EINVAL ; if ( xfrm_replay_state_esn_len ( replay_esn )!= xfrm_replay_state_esn_len ( up ) ) return - EINVAL ; if ( xfrm_replay_state_esn_len ( replay_esn )!= xfrm_replay_state_esn_len ( up ) ) return - EINVAL ; if ( xfrm_replay_state_esn_len ( replay_esn )!=,0
564,"<S2SV_ModStart> int ret = security_perf_cpu_time_max_percent_handler ( table, write, buffer, lenp, ppos ) ; if ( ret ||! write ) return ret ; if ( sysctl_perf_cpu_time_max_percent > 100 ) { printk ( KERN_WARNING ""perf: <S2SV_blank> Dynamic <S2SV_blank> interrupt <S2SV_blank> throttling <S2SV_blank> disabled, <S2SV_blank> can <S2SV_blank> hang <S2SV_blank> your <S2SV_blank> system!\\n"" ) ; WRITE_ONCE ( perf_sample_allowed_ns, 0 ) ; } else if ( sysctl_perf_cpu_time_max_percent > 100 ) { printk ( KERN_WARNING ""perf: <S2SV_blank> Dynamic <S2SV_blank> interrupt <S2SV_blank> throttling <S2SV_blank> disabled, <S2SV_blank> can <S2SV_blank> hang <S2SV_blank> your <S2SV_blank> system!\\n"" ) ; printk ( KERN_WARNING ""perf: <S2SV_blank> Dynamic <S2SV_blank> interrupt <S2SV_blank> throttling <S2SV_blank> disabled, <S2SV_blank> can <S2SV_blank> hang <S2SV_blank> your <S2SV_blank> system!\\n"" ) ; }",0
565,"<S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + ( <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + ( <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + ( <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + ( <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> + ( ref_row <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + ( <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + ( <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + ( <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + ( <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + ( <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + ( <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + ( <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + ( <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + ( <S2SV_ModStart> check_here, in_what_stride <S2SV_ModEnd> ) + (",0
566,<S2SV_ModStart> * * l_tmp_ptr = ( OPJ_UINT32 * ) opj_malloc ( l_data_stride * p_image -> numcomps * sizeof ( OPJ_UINT32 ) ) ; if ( l_tmp_ptr == ( OPJ_UINT32 * ) opj_malloc ( l_data_stride * p_image -> numcomps * sizeof ( OPJ_UINT32 ) ) ) { return 00 ; } <S2SV_ModStart> * * l_tmp_ptr = ( OPJ_UINT32 * ) opj_malloc ( l_data_stride * p_image -> numcomps * sizeof ( OPJ_UINT32 ) ) ; if ( l_tmp_ptr == ( OPJ_UINT32 * ) opj_malloc ( l_data_stride * p_image -> numcomps * sizeof ( OPJ_UINT32 ) ) ) { return 00 ; } <S2SV_ModStart> * * l_tmp_ptr = ( OPJ_UINT32 * ) opj_malloc ( l_data_stride * p_image -> numcomps * sizeof ( OPJ_UINT32 ) ) ) ; if ( l_tmp,0
567,"<S2SV_ModStart> name ) { int ret ; ret = try_then_request_module ( __crypto_lookup_template ( name ), ""%s"", name ) ; if ( ret < 0 ) return NULL ; ret = try_then_request_module ( __crypto_lookup_template ( name ), ""%s"", name ) ; if ( ret < 0 ) return NULL ; ret = try_then_request_module ( __crypto_lookup_template ( name ), ""%s"", name ) ; if ( ret < 0 ) return NULL ; ret = try_then_request_module ( __crypto_lookup_template ( name ), ""%s"", name ) ; if ( ret < 0 ) return NULL ; ret = try_then_request_module ( __crypto_lookup_template ( name ), ""%s"", name ) ; if ( ret < 0 ) return NULL ; ret = try_then_request_module ( __crypto_lookup_template ( name ), ""%s"", name ) ; if ( ret < 0 ) return NULL ; ret = try_then_request_module ( __crypto_lookup_template ( name ), ""%s"", name ) ; return ret ;",0
568,"<S2SV_ModStart> ps ) { <S2SV_ModEnd> u32 prev_legacy, <S2SV_ModStart> flags ; kvm_pit_load_count <S2SV_ModEnd> ( kvm,",0
569,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_nonrd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> left_context, 0, sizeof ( xd -> left_context ) ) ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> left_seg_context, 0, sizeof ( xd -> left_seg_context ) ) ; const int idx_str = cm -> mi_stride * mi_row + mi_col ; const MODE_INFO * * prev_mi_8x8 = cm -> prev_mi_grid_visible + idx_str ; BLOCK_SIZE bsize ; cpi -> mb. source_variance = UINT_MAX ; vp9_zero ( cpi -> mb. pred_mv ) ; switch ( cpi -> sf. partition_search_type ) { case VAR_BASED_PARTITION : choose_partitioning ( cpi, tile, mi_row, mi_col ) ; nonrd_use_partition ( cpi, tile, mi_row, mi_col, BLOCK_64X64, & dummy_rate, & dummy_dist ) ; break ; case SOURCE_",0
570,<S2SV_ModStart> 1 ) ; if ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) { * ibuf = * ibuf ; obuf = opipe -> bufs + nbuf ; * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; } else { * ibuf = * opipe -> bufs + nbuf ; * obuf = * opipe -> bufs + nbuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; if ( obuf -> len > len ) obuf -> len = len ; opipe -> nrbufs ++ ; ret += obuf -> len ; len -= obuf -> len ; i ++ ; } if ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; } else { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; if ( obuf -> len > len ) obuf -> len = len ; opipe -> nrbufs ++ ; ret += obuf -> len,0
571,"<S2SV_ModStart> state ; dh = skb_header_pointer ( skb, dataoff, sizeof ( _dh ), & dh ) ; if ( dh == NULL ) { nf_log_packet ( net, nf_ct_l3num ( ct ), 0, NULL, NULL, NULL, ""%s"", ""null <S2SV_blank> packet"" ) ; return false ; } state = dccp_state_table [ CT_DCCP_ROLE_CLIENT ] [ dh -> dccph_type ] [ CT_DCCP_NONE ] ; if ( state == CT_DCCP_REQUEST ) { msg = ""nf_ct_dccp: <S2SV_blank> not <S2SV_blank> picking <S2SV_blank> up <S2SV_blank> existing <S2SV_blank> connection <S2SV_blank> "" ; goto out_invalid ; } ct -> proto. dccp. role [ IP_CT_DIR_ORIGINAL ] = CT_DCCP_ROLE_SERVER ; ct -> proto. dccp. state = state ; ct -> proto. dccp. last_pkt = DCCP_PKT_REQUEST ; ct -> proto. dccp. last_dir = IP_CT_DIR_REPLY ; ct -> proto. dccp. handshake_seq =",0
572,"<S2SV_ModStart> } else { TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) return HTTP_INTERNAL_SERVER_ERROR ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, ""wb"" ), TEMP_FAILURE_RETRY ( <S2SV_ModStart>, ""wb"" ), TEMP_FAILURE_RETRY ( <S2SV_ModStart>, ""wb"" ), TEMP_FAILURE_RETRY ( <S2SV_ModStart>, ""wb"" ), TEMP_FAILURE_RETRY ( <S2SV_ModStart>, ""wb"" ), TEMP_FAILURE_RETRY ( <S2SV_ModStart>, ""wb"" ), TEMP_FAILURE_RETRY ( <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
573,"<S2SV_ModStart> = NULL ; <S2SV_ModEnd> if ( ( <S2SV_ModStart>, dir ) ) == NULL ) { ulckpwdf ( ) ; err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( tmpname == NULL ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> tmpname, dir, TEMP_FAILURE_RETRY ( TEMP_FAILURE_RETRY ( TEMP_FAILURE_RETRY ( TEMP_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ) ; } if ( TEMP_FAILURE_RETRY ( TEMP_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ) { err ( EXIT_FAILURE, _ ( ""can\'t <S2SV_blank> open <S2SV_blank> temporary <S2SV_blank> file"" ) ) ; } copyfile ( lockfd, fileno ( fd ) ) ; tmp_file = tmpname ; return fd ; }",0
574,"<S2SV_ModStart> ( ) ; ret = blkg_alloc ( new_blkg, GFP_KERNEL ) ; if ( ret ) { blkg_free ( new_blkg ) ; return PTR_ERR ( blkg ) ; } q -> root_blkg = blkg ; q -> root_rl. blkg = blkg ; ret = blk_throtl_init ( q ) ; if ( ret ) { spin_lock_irq ( q -> queue_lock ) ; blkg_destroy_all ( q ) ; spin_unlock_irq ( q -> queue_lock ) ; } q -> root_rl. blkg = blkg ; ret = blk_throtl_init ( q ) ; if ( ret ) { spin_lock_irq ( q -> queue_lock ) ; blkg_destroy_all ( q ) ; spin_unlock_irq ( q -> queue_lock ) ; blkg_destroy_all ( q ) ; }",0
575,"<S2SV_ModStart> ; if ( buf_size < 4 ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> buffer <S2SV_blank> size\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( buf_size < 4 ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> buffer <S2SV_blank> size\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( buf_size < 4 ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> buffer <S2SV_blank> size\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( buf_size < 4 ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> buffer <S2SV_blank> size\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( buf_size < 4 ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> buffer <S2SV_blank> size\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( buf_size < 4 ) { av_log ( avctx, AV_LOG_ERROR, ""invalid <S2SV_blank> header <S2SV_blank> size\\n"" ) ; return AVERROR_INVALIDDATA ; }",0
576,"<S2SV_ModStart> ; krb5_data rspac ; memset ( & rspac, 0, sizeof ( krb5_data ) ) ; memset ( & tp, 0, sizeof ( krb5_principal ) ) ; memset ( & dp, 0, sizeof ( krb5_principal ) ) ; memset ( & tp, 0, sizeof ( krb5_principal ) ) ; memset ( & dp, 0, sizeof ( krb5_principal ) ) ; memset ( & tp, 0, sizeof ( krb5_principal ) ) ; memset ( & rspac, 0, sizeof ( krb5_data ) ) ; memset ( & rspac, 0, sizeof ( krb5_data ) ) ; memset ( & tp, 0, sizeof ( krb5_principal ) ) ; memset ( & dp, 0, sizeof ( krb5_principal ) ) ; memset ( & tp, 0, sizeof ( krb5_principal ) ) ; memset ( & tp, 0, sizeof ( krb5_principal ) ) ; memset ( & tp, 0, sizeof ( krb5_principal ) ) ; memset ( & tp, 0",0
577,"<S2SV_ModStart> mnt ) ; if ( dentry -> d_inode -> i_op -> follow_link ) { error = PTR_ERR ( cookie ) ; if (! IS_ERR ( cookie ) ) { char * s = nd_get_link ( nd ) ; error = 0 ; if ( s ) error = __vfs_follow_link ( nd, s ) ; else if ( nd -> last_type == LAST_BIND ) { error = force_reval_path ( & nd -> path, nd ) ; if ( error ) path_put ( & nd -> path ) ; } else if ( nd -> last_type == LAST_BIND ) { error = force_reval_path ( & nd -> path, nd ) ; if ( error ) path_put ( & nd -> path ) ; } else if ( nd -> last_type == LAST_BIND ) { error = force_reval_path ( & nd -> path, nd ) ; if ( error ) path_put ( & nd -> path ) ; } if ( dentry -> d_inode -> i_op -> put_link ) dentry -> d_inode -> i_op -> put_link ( dentry",0
578,"<S2SV_ModStart> arg ) { if ( copy_to_user ( arg, & ci, sizeof ( ci ) ) ) return - EFAULT ; if ( copy_to_user ( arg, & ci, sizeof ( ci ) ) ) return - EFAULT ; if ( copy_to_user ( arg, & ci, sizeof ( ci ) ) ) return - EFAULT ; if ( copy_to_user ( arg, & ci, sizeof ( ci ) ) ) return - EFAULT ; if ( copy_to_user ( arg, & ci, sizeof ( ci ) ) ) return - EFAULT ; return 0 ; } if ( copy_to_user ( arg, & ci, sizeof ( ci ) ) ) return - EFAULT ; if ( copy_to_user ( arg, & ci, sizeof ( ci ) ) ) return - EFAULT ; if ( copy_to_user ( arg, & ci, sizeof ( ci ) ) ) return - EFAULT ; if ( copy_to_user ( arg, & ci, sizeof ( ci ) ) ) return - EFAULT ; return 0 ;",0
579,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static u32 <S2SV_ModEnd> ip_options_get_finish ( struct <S2SV_ModStart> * optp, u32 <S2SV_ModEnd> optlen ) { <S2SV_ModStart> & 3 ) opt -> __data [ <S2SV_ModEnd> optlen ++ ] <S2SV_ModStart> IPOPT_END ; } if ( optlen && ip_options_compile ( net, & opt -> opt, NULL ) ) { kfree ( opt ) ; return - EINVAL ; } if ( optlen && ip_options_compile ( net, & opt -> opt, NULL ) ) { kfree ( opt ) ; return - EINVAL ; } if ( optlen && ip_options_compile ( net, & opt -> opt, NULL ) ) { kfree ( opt ) ; * optp = opt ; return 0 ; } if ( optlen && ip_options_compile ( net, & opt -> opt, NULL ) ) { kfree ( opt ) ; * optp = opt ; return 0 ; } if ( optlen && ip_options_compile ( net, & opt -> opt, NULL ) ) { kfree ( opt ) ; * optp = opt ; return 0 ; }",0
580,"<S2SV_ModStart> rmtblkcnt2 ; } retval = xfs_attr3_leaf_add ( args, bp, args ) ; if ( retval == ENOATTR ) { xfs_trans_brelse ( args -> trans, bp ) ; return retval ; } args -> op_flags |= XFS_DA_OP_ADDNAME ; args -> rmtblkno2 = args -> rmtblkno2 ; args -> rmtblkcnt2 = args -> rmtblkcnt2 ; args -> rmtblkcnt2 = args -> rmtblkcnt ; args -> rmtblkcnt2 = args -> rmtblkcnt2 ; args -> rmtblkno2 = args -> rmtblkno2 ; args -> rmtblkcnt2 = args -> rmtblkcnt2 ; args -> rmtblkcnt2 = args -> rmtblkcnt2 ; args -> rmtblkno2 = args -> rmtblkcnt2 ; args -> rmtblkcnt2 = args -> rmtblkcnt ; args -> rmtblkcnt2 = args -> rmtblkcnt ; args -> rmtbl",0
581,"<S2SV_ModStart> TC_IOCTL_GET_DEVICE_REFCOUNT : if ( ValidateIOBufferSize ( Irp, sizeof ( LONG ), ValidateOutput ) ) { * ( int * ) Irp -> AssociatedIrp. SystemBuffer = DeviceObject -> ReferenceCount ; Irp -> IoStatus. Information = sizeof ( LONG ) ; Irp -> IoStatus. Status = STATUS_BUFFER_TOO_SMALL ; if ( IoEnumerateDeviceObjectList ( TCDriverObject, NULL, 0, & deviceObjectCount ) == STATUS_BUFFER_TOO_SMALL && deviceObjectCount > 1 ) * ( int * ) Irp -> AssociatedIrp. SystemBuffer = TRUE ; Irp -> IoStatus. Information = sizeof ( int ) ; Irp -> IoStatus. Status = STATUS_BUFFER_TOO_SMALL ; if ( IoEnumerateDeviceObjectList ( TCDriverObject, NULL, 0, & deviceObjectCount ) == STATUS_BUFFER_TOO_SMALL && deviceObjectCount > 1 ) * ( int * ) Irp -> AssociatedIrp. SystemBuffer = TRUE ; Irp -> IoStatus. Information = sizeof ( int ) ; Irp -> IoStatus. Status = STATUS_BUFFER_TOO_SMALL",0
582,"<S2SV_ModStart> ; if ( connection == NULL ) goto error ; else { bool found_upgrade = false ; double count ; sds * tokens = sdssplitlen ( connection, strlen ( connection ), "","", 1, & count ) ; if ( tokens == NULL ) goto error ; for ( int i = 0 ; i < count ; i ++ ) { sds token = tokens [ i ] ; sdstrim ( token, ""Upgrade"" ) ; if ( strcasecmp ( token, ""Sec-WebSocket-Version"" ) == 0 ) { found_upgrade = true ; break ; } }",0
583,"<S2SV_ModStart> * findalldevs_if ; uint16 <S2SV_ModEnd> nif = 0 <S2SV_ModStart> = 0 ; if ( plen < sizeof ( struct rpcap_findalldevs_if ) ) { rpcapd_discard ( pars -> sockctrl, plen ) ; return - 1 ; } <S2SV_ModStart> description ) { if ( plen < sizeof ( struct rpcap_findalldevs_if ) ) { rpcapd_discard ( pars -> sockctrl, plen ) ; return - 1 ; } <S2SV_ModStart> name ) { if ( plen < sizeof ( struct rpcap_sockaddr ) * 4 ) { rpcapd_log ( LOGPRIO_ERROR, ""Send <S2SV_blank> to <S2SV_blank> client <S2SV_blank> failed: <S2SV_blank> %s"", errbuf ) ; return - 1 ; } <S2SV_ModStart> -> name ) { if ( plen < sizeof ( struct rpcap_sockaddr ) * 4 ) { rpcapd_discard ( pars -> sockctrl, plen ) ; return - 1 ; } <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
584,"<S2SV_ModStart> dump_dir * dd = dd_create ( path, client_uid, DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; } <S2SV_ModStart> dd = dd_create ( path, client_uid, DEFAULT_DUMP_DIR_MODE ) ; if (! dd ) { error_msg_and_die ( ""Error <S2SV_blank> creating <S2SV_blank> problem <S2SV_blank> directory <S2SV_blank> \'%s\'"", path ) ; } dd_create_basic_files ( dd, client_uid, NULL ) ; dd_save_text ( dd, FILENAME_ABRT_VERSION, VERSION ) ; g_hash_table_iter_init ( & iter, problem_info ) ; while ( g_hash_table_iter_next ( & iter, & gpkey, & gpvalue ) ) { dd_save_text ( dd, FILENAME_CMDLINE, cmdline ) ; free ( cmdline ) ; }",0
585,"<S2SV_ModStart> ) ; for ( bit = 0 ; bit < 8 ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x + bit, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } p ++ ; } if ( ( image -> columns % 8 )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 8 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes + x + bit, index ) ; SetPixelRGBO ( q, image -> colormap + ( ssize_t ) index ) ; q ++ ; } if ( ( image -> columns % 8 )!= 0 ) { for ( bit = 0 ; bit < ( ssize_t ) ( image -> columns % 8 ) ; bit ++ ) { index = ( ( * p ) & ( 0x80 >> bit )? 0x01 : 0x00 ) ; SetPixelIndex ( indexes +",0
586,"<S2SV_ModStart> a ) { BN_ULONG <S2SV_ModEnd> c1, c2 <S2SV_ModStart>, t2 ; r [ 0 ] = c1 ; c1 = 0 ; sqr_add_c ( a, 1, c2, c3 ) ; r [ 1 ] = c2 ; c2 = 0 ; sqr_add_c ( a, 2, 0, c1, c2 ) ; r [ 2 ] = c3 ; c3 = 0 ; sqr_add_c ( a, 3, 0, c1, c2 ) ; r [ 3 ] = c1 ; c1 = 0 ; sqr_add_c ( a, 2, 0, c2, c3 ) ; r [ 4 ] = c2 ; c2 = 0 ; sqr_add_c ( a, 1, c3, c1, c2 ) ; r [ 5 ] = c1 ; c1 = 0 ; sqr_add_c ( a, 2, 0, c1, c2 ) ; r [ 6 ] = c2 ; c2 = 0 ; sqr_add_c ( a, 1, c2, c3 ) ; r [ 7 ] = c",0
587,"<S2SV_ModStart> sock * sk <S2SV_ModEnd>, int tstype <S2SV_ModStart> serr ; int <S2SV_ModEnd> err ; serr <S2SV_ModStart> = SO_EE_ORIGIN_TIMESTAMPING ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_ID ) { serr -> ee. ee_data = sk -> sk_tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee. ee_data -= sk -> sk_tskey ; } else { serr -> ee. ee_data = skb_shinfo ( skb ) -> tskey ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee. ee_data -= sk -> sk_protocol ; if ( sk -> sk_protocol == IPPROTO_TCP && sk -> sk_type == SOCK_STREAM ) serr -> ee. ee_data -= sk -> sk_protocol ; if ( sk -> sk_",0
588,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse ) ThrowReaderException ( CorruptImageError, ""InsufficientImageExtent"" ) ; if ( status == MagickFalse )",0
589,"<S2SV_ModStart> len ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> len ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> len ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> len ; if ( in_cksum ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> len ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> len ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> len ; if ( in_cksum ) { ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> short"" ) ) ; return ; } <S2SV_ModStart> len ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank>",0
590,"<S2SV_ModStart> ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ), CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ), CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/abc/def"" ) ) ; run_burl_normalize ( psrc, ptmp, flags, __LINE__, CONST_STR_LEN ( ""/",0
591,"<S2SV_ModStart> (! dumpable && ptrace_has_cap ( task_cred ( task ) -> user_ns, mode ) ) { rcu_read_unlock ( ) ; return - EPERM ; } rcu_read_lock ( ) ; tcred = __task_cred ( task ) ; if ( uid_eq ( cred -> uid, tcred -> euid ) && uid_eq ( cred -> uid, tcred -> suid ) && gid_eq ( cred -> gid, tcred -> gid ) ) goto ok ; if ( ptrace_has_cap ( task_cred ( task ) -> user_ns, mode ) ) { rcu_read_unlock ( ) ; return - EPERM ; }",0
592,<S2SV_ModStart> long i ; if ( w < sizeof ( * src1 ) || w < sizeof ( * src2 ) ) return ; if ( w < sizeof ( * src1 ) || w < sizeof ( * src2 ) ) return ; for ( i = 0 ; i < w ; i += sizeof ( * src2 ) ) { long a = * ( long * ) ( src1 + i ) ; long b = * ( long * ) ( src2 + i ) ; * ( long * ) ( dst + i ) = ( a & pb_7f ) + ( b & pb_7f ) ; * ( long * ) ( dst + i ) = ( a & pb_7f ) + ( b & pb_80 ) ; for ( ; i < w ; i += sizeof ( * src1 ) ; i += sizeof ( * src2 ) ) { long a = * ( long * ) ( src1 + i ) ; long b = * ( long * ) ( src2 + i ) ; * ( long * ) ( dst + i ) = ( a & pb_7f ) + ( b & pb_7f ) ; * ( long * ) ( dst + i ) = ( a &,0
593,<S2SV_ModStart> ( flags & __GFP_ZERO <S2SV_ModEnd> ) memset (,0
594,<S2SV_ModStart> maxval ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * data ; jas_matind_t <S2SV_ModEnd> rowstep ; if,1
595,<S2SV_ModStart> ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_present_flags = 1 ; ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_flags = ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_flags = ps_parse -> s_sei_params. i4_sei_mastering_disp_colour_vol_params_,0
596,"<S2SV_ModStart> * priv ; if ( port -> interrupt_in_urb &&! port -> interrupt_out_urb -> interval ) { dev_err ( & port -> dev, ""%s <S2SV_blank> - <S2SV_blank> read <S2SV_blank> & <S2SV_blank> write <S2SV_blank> intervals <S2SV_blank> forced <S2SV_blank> to <S2SV_blank> %d\\n"", __func__, port -> interrupt_in_urb -> interval ) ; priv -> read_urb_interval = port -> interrupt_in_urb -> interval ; priv -> read_urb_interval = port -> interrupt_out_urb -> interval ; dev_err ( & port -> dev, ""%s <S2SV_blank> - <S2SV_blank> read <S2SV_blank> & <S2SV_blank> write <S2SV_blank> intervals <S2SV_blank> forced <S2SV_blank> to <S2SV_blank> %d\\n"", __func__, interval ) ; } else { dev_err ( & port -> dev, ""%s <S2SV_blank> - <S2SV_blank> read <S2SV_blank> & <S2SV_blank> write <S2SV_blank> intervals <S2SV_blank> forced <S2SV_blank> to <S2SV_blank> %d\\n"", __func__, port -> interrupt_out_urb -> interval ) ; priv -> read_urb_interval = port -> interrupt_in_urb -> interval ; dev_dbg ( & port -> dev, ""%s <S2SV_blank> - <S2SV_blank> read <S2SV_blank> & <S2SV_blank> write <S2SV_blank> intervals <S2SV_blank> forced <S2SV_blank> to <S2SV_blank> %d\\n"", __func__, interval",0
597,"<S2SV_ModStart> ; tmp_sdma_rht = kmalloc ( SDMA_BLOCK_SIZE, GFP_KERNEL ) ; if (! tmp_sdma_rht ) memset ( tmp_sdma_rht, 0, sizeof ( * tmp_sdma_rht ) ) ; <S2SV_ModStart> ; if (! tmp_sdma_rht ) memset ( tmp_sdma_rht, 0, sizeof ( * tmp_sdma_rht ) ) memset ( tmp_sdma_rht, 0, sizeof ( * tmp_sdma_rht ) ) ; if (! tmp_sdma_rht ) memset ( tmp_sdma_rht, 0, sizeof ( * tmp_sdma_rht ) ) ) { memset ( tmp_sdma_rht, 0, sizeof ( * tmp_sdma_rht ) ) ; memset ( tmp_sdma_rht, 0, sizeof ( * tmp_sdma_rht ) ) ; memset ( tmp_sdma_rht, 0, sizeof ( * tmp_sdma_rht ) ) ; memset ( tmp_sdma_r",0
598,<S2SV_ModStart> -> device_data ; snd_use_lock_free ( & dev -> use_lock ) ;,0
599,"<S2SV_ModStart> * info, myisam_table * table <S2SV_ModEnd>, int rep_quick <S2SV_ModStart> ( mi_key_mutex_MI_SORT_INFO_mutex, & sort_info. mutex, MY_MUTEX_INIT_FAST ) ; mysql_mutex_init ( mi_key_mutex_MI_SORT_INFO_cond, & sort_info. cond, MY_MUTEX_INIT_FAST ) ; mysql_mutex_init ( mi_key_mutex_MI_SORT_INFO_mutex, & sort_info. mutex, MY_MUTEX_INIT_FAST ) ; mysql_cond_init ( mi_key_cond_MI_SORT_INFO_cond, & sort_info. cond, MY_MUTEX_INIT_FAST ) ; mysql_mutex_init ( mi_key_mutex_MI_SORT_INFO_mutex, & sort_info. mutex, MY_MUTEX_INIT_FAST ) ; mysql_cond_init ( mi_key_cond_MI_SORT_INFO_cond, & sort_info. cond, MY_MUTEX_INIT_FAST ) ;",0
600,"<S2SV_ModStart> == q || ( <S2SV_ModStart> size > 256 ) ) return ( DestroyImageList ( images ) ) ; p = q ; sizes [ i ++ ] = size ; while ( ( isspace ( ( int ) ( ( unsigned char ) * p ) )!= 0 ) || ( * p == ',' ) ) ) p ++ ; if ( p == q ) return ( DestroyImageList ( images ) ) ; p = q ; sizes [ i ++ ] = size ; while ( ( isspace ( ( int ) ( ( unsigned char ) * p ) )!= 0 ) ) return ( DestroyImageList ( images ) ) ; p = q ; sizes [ i ++ ] = size ; while ( ( isspace ( ( int ) ( ( unsigned char ) ( ( unsigned char ) * p ) )!= 0 ) ) p ++ ; if ( p == q ) return ( DestroyImageList ( images ) ) ; p = q ; i = 0 ; for ( i = 0 ; i < 10 ; i ++ ) { resized = ResizeImage ( image, sizes [ i ], sizes [ i ], sizes [ i ], image -> filter, exception ) ; if ( images == ( Image * ) NULL ) return ( DestroyImageList ( images ) )",0
601,"<S2SV_ModStart> valuelen ) ; nblks += XFS_DAENTER_SPACE_RES ( mp, XFS_ATTR_FORK ) ; if ( size > ( mp -> m_sb. sb_blocksize >> 1 ) ) { nblks *= 2 ; } } else { uint dblocks = XFS_B_TO_FSB ( mp, valuelen ) ; nblks += XFS_NEXTENTADD_SPACE_RES ( mp, dblocks, XFS_ATTR_FORK ) ; if ( size > ( mp -> m_sb. sb_blocksize >> 1 ) ) { nblks *= 2 ; } }",0
602,"<S2SV_ModStart> ) ; } if ( pcount > HSTORE_MAX_PAIRS ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", pcount, HSTORE_MAX_PAIRS ) ) ) ; for ( i = 0 ; i < pcount ; ++ i ) { int rawlen = pq_getmsgint ( buf, 4 ) ; int len ; if ( rawlen < 0 ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", pcount, HSTORE_MAX_PAIRS ) ) ) ; pairs [ i ]. key = NULL ; pairs [ i ]. keylen = hstoreCheckKeyLen ( len ) ; pairs [ i ]. needfree = true ; rawlen = pq_getmsgint ( buf, 4 ) ; if ( rawlen < 0 ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT",0
603,"<S2SV_ModStart> val ) ; if ( strcmp ( var, ""command"" ) == 0 ) hascommand = true ; else if ( strcmp ( var, ""rspfile"" ) == 0 ) hasrspfile = true ; else if ( strcmp ( var, ""rspfile_content"" ) == 0 ) hasrspcontent = true ; if (! hasrspfile ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if ( hasrspfile!= hasrspcontent ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile_content <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if ( hasrspfile!= hasrspcontent ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile <S2SV_blank> or <S2SV_blank> vice <S2SV_blank> versa"", r -> name ) ; if ( hasrspfile!= hasrspcontent ) fatal ( ""rule <S2SV_blank> \'%s\' <S2SV_blank> has <S2SV_blank> rspfile <S2SV_blank> and <S2SV_blank> no <S2SV_blank> rspfile <S2SV_blank> or",0
604,<S2SV_ModStart> ; if ( RE_YY_INPUT ( yyscanner ) ; <S2SV_ModStart> ; if ( RE_YY_INPUT ( yyscanner ) ; if ( <S2SV_ModStart> ; if ( RE_YY_INPUT ( yyscanner ) ; if ( <S2SV_ModStart> ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if ( RE_YY_INPUT ( yyscanner ) ; if (,0
605,"<S2SV_ModStart> case 'Q' : if ( 3 == b - c -> buf && 0 == strncmp ( ""GET"", c -> buf, 3 ) ) { method = AGOO_GET ; } else if ( 4 == b - c -> buf && 0 == strncmp ( ""POST"", c -> buf, 4 ) ) { method = AGOO_POST ; } else if ( 4 == b - c -> buf && 0 == strncmp ( ""GET"", c -> buf, 4 ) ) { method = AGOO_GET ; } else if ( 4 == b - c -> buf && 0 == strncmp ( ""PUT"", c -> buf, 4 ) ) { method = AGOO_PUT ; } else if ( 4 == b - c -> buf && 0 == strncmp ( ""POST"", c -> buf, 4 ) ) { method = AGOO_POST ; } else if ( 4 == b - c -> buf && 0 == strncmp ( ""PUT"", c -> buf, 4 ) ) { method = AGOO_POST ; } else if ( 4 == b - c -> buf && 0 == strncmp ( ""POST"",",0
606,"<S2SV_ModStart> * input, tran_low_t <S2SV_ModEnd> * output, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> DCT_DCT ) { vpx_fdct16x16_c <S2SV_ModEnd> ( input, <S2SV_ModStart> } else { tran_low_t <S2SV_ModEnd> out [ 256 <S2SV_ModStart> 256 ] ; tran_low_t <S2SV_ModEnd> * outptr = <S2SV_ModStart> 0 ] ; tran_low_t <S2SV_ModEnd> temp_in [ 16 <S2SV_ModStart> j ; tran_low_t <S2SV_ModEnd> temp_out [ 16 <S2SV_ModStart> j ; tran_low_t <S2SV_ModEnd> temp_in [ 16 <S2SV_ModStart> ++ j ) out [ j * 16 + i ] = ( temp_out [ j ] + 1 ) >> 2 ; } for ( i = 0 ; i < 16 ; ++ i ) { for ( j = 0 ; j < 16 ; ++ j ) out [ j * 16 + i ] = ( temp_out [ j ] + 1 + ( temp_out [ j ] < 0 ) ) >> 2 ; } for ( i = 0 ; i < 16 ; ++ i ) { for ( j = 0 ; j < 16 ; ++ j ) out [ j * 16 + i ] = ( temp_",0
607,"<S2SV_ModStart> g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; g_autoptr ( GOutputStream ) out_stream = NULL ; g_auto ( GStrv ) groups = NULL ; g_auto ( GStrv ) old_argv = NULL ; g_auto ( GStrv ) new_exec = NULL ; g_autoptr ( GKeyFile ) keyfile = NULL ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; g_autoptr ( GKeyFile ) keyfile = NULL ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error",0
608,"<S2SV_ModStart> fh_dentry ) ; error = fh_want_write ( fh ) ; if ( error ) goto out_errno ; error = fh_verify ( rqstp, & resp -> fh, 0, NFSD_MAY_SATTR ) ; if ( error ) goto out_errno ; error = posix_acl_update ( fh, argp -> acl_access, ACL_TYPE_ACCESS ) ; if ( error ) goto out_drop_write ; error = posix_acl_update ( fh, argp -> acl_default, ACL_TYPE_DEFAULT ) ; if ( error ) goto out_drop_write ; error = fh_drop_write ( fh ) ; if ( error ) goto out_errno ; error = fh_verify ( rqstp, & resp -> fh, 0, NFSD_MAY_SATTR ) ; if ( error ) goto out_errno ; error = fh_verify ( rqstp, & resp -> fh, 0, NFSD_MAY_SATTR ) ; if ( error ) goto out_errno ; error = fh_verify ( rqstp, & resp -> fh, 0, NFSD_MAY_SATTR ) ; if ( error ) goto out",0
609,"<S2SV_ModStart> * ue ; if ( tree_root == NULL ) { fprintf ( stdout, "" <S2SV_blank> Unfolding <S2SV_blank> the <S2SV_blank> meta-tree <S2SV_blank> "" ) ; fflush ( stdout ) ; unfold_blk ( & tree_root ) ; fprintf ( stdout, "" <S2SV_blank> done.\\n\\n"" ) ; labels_to_offsets ( ) ; TAILQ_FOREACH ( ue, & unfolded_tree, next ) { if ( ue -> label == 0 ) { SAFE_REALLOC ( array, i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ], & ue -> fop, sizeof ( struct filter_op ) ) ; i ++ ; } } else { SAFE_REALLOC ( array, i * sizeof ( struct filter_op ) ) ; memcpy ( & array [ i - 1 ], & ue -> fop, sizeof ( struct filter_op ) ) ; i ++ ; }",0
610,"<S2SV_ModStart> char * temp_filename = osi_calloc ( strlen ( filename ) <S2SV_ModEnd> + 5 ) <S2SV_ModStart> (! temp_filename ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> filename."", __func__ ) ; return false ; } strcpy ( temp_filename, filename ) ; strcat ( temp_filename, "".new"" ) ; FILE * fp = fopen ( temp_filename, ""wt"" ) ; if (! fp ) { LOG_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> write <S2SV_blank> file <S2SV_blank> \'%s\': <S2SV_blank> %s"", __func__, temp_filename, strerror ( errno ) ) ; goto error ; } for ( const section_t * section = ( const section_t * ) list_node ( node ) ; fprintf ( fp, ""[%s]\\n"", section -> name ) ; for ( const entry_t * entry = ( const entry_t * ) list_node ( enode ) ; fprintf ( fp, ""%s <S2SV_blank> = <S2SV_blank> %s\\n"", entry -> key, entry -> value ) ; } if ( list_next ( node )!= list_end ( config -> sections ) )",0
611,<S2SV_ModStart> elen ) ; elen += sizeof ( struct pathComponent ) + pc -> lengthComponentIdent ; <S2SV_ModStart> case 1 : if ( elen + pc -> lengthComponentIdent > fromlen ) return - EIO ; <S2SV_ModStart> case 2 : if ( elen + pc -> lengthComponentIdent > fromlen ) return - EIO ; <S2SV_ModStart> case 4 : if ( elen + pc -> lengthComponentIdent > fromlen ) return - EIO ; <S2SV_ModStart> break ; } elen += pc -> lengthComponentIdent ; if ( elen + sizeof ( struct pathComponent ) + pc -> lengthComponentIdent > fromlen ) return - EIO ; <S2SV_ModStart> case 5 : if ( elen + pc -> lengthComponentIdent > fromlen ) return - EIO ; elen += pc -> lengthComponentIdent ; if ( elen + pc -> lengthComponentIdent > fromlen ) return - EIO ; <S2SV_ModStart> case 6 : if ( elen + pc -> lengthComponentIdent > fromlen ) return - EIO ; elen += pc -> lengthComponentIdent ; if ( elen + pc -> lengthComponentIdent > fromlen ) return - EIO ; <S2SV_ModStart> case 7 : if ( elen + pc -> lengthComponentIdent > fromlen ) return - EIO ;,0
612,"<S2SV_ModStart> case NFSPROC_GETATTR : if ( ( dp = parsereq ( ndo, rp, length ) )!= NULL && parsefhn ( ndo, dp, v3 )!= NULL ) { ND_TCHECK ( ndo, dp ) ; goto trunc ; } <S2SV_ModStart> case NFSPROC_DELETE : if ( ( dp = parsereq ( ndo, rp, length ) )!= NULL && parsefh ( ndo, dp, v3 )!= NULL ) { ND_TCHECK ( ndo, dp ) ; goto trunc ; } if ( ( dp = parsereq ( ndo, rp, length ) )!= NULL && parsefhn ( ndo, dp, v3 )!= NULL ) { ND_TCHECK ( ndo, dp ) ; goto trunc ; } if ( ( dp = parsereq ( ndo, rp, length ) )!= NULL && parsefh ( ndo, dp, v3 )!= NULL ) { ND_TCHECK ( ndo, dp ) ; goto trunc ; }",0
613,"<S2SV_ModStart> tlv_len ) ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [too <S2SV_blank> short]"" ) ) ; return ; } <S2SV_ModStart> tlv_len ) ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [too <S2SV_blank> short]"" ) ) ; return ; } <S2SV_ModStart> tlv_len ) ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [too <S2SV_blank> short]"" ) ) ; return ; } <S2SV_ModStart> tlv_len ) ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [too <S2SV_blank> short]"" ) ) ; return ; } <S2SV_ModStart> tlv_len ) ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [too <S2SV_blank> short]"" ) ) ; return ; } <S2SV_ModStart> tlv_len ) ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [too <S2SV_blank> short]"" ) ) ; return ; } <S2SV_ModStart> tlv_len ) ; if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [too <S2SV_blank> short]"" ) ) ; return ; } <S2SV_ModStart> case",0
614,"<S2SV_ModStart> userData, target <S2SV_ModEnd> ) ; ctxt <S2SV_ModStart>, target, NULL ) ; ctxt -> instate = state ; return ; } buf = ( xmlChar * ) xmlMallocAtomic ( size * sizeof ( xmlChar ) ) ; if ( buf == NULL ) { xmlErrMemory ( ctxt, NULL ) ; ctxt -> instate = state ; return ; } buf = ( xmlChar * ) xmlMallocAtomic ( size * sizeof ( xmlChar ) ) ; if ( buf == NULL ) { xmlErrMemory ( ctxt, NULL ) ; ctxt -> instate = state ; return ; } buf = ( xmlChar * ) xmlMallocAtomic ( size * sizeof ( xmlChar ) ) ; if ( buf == NULL ) { xmlErrMemory ( ctxt, NULL ) ; ctxt -> instate = state ; return ; } buf = ( xmlChar * ) xmlMallocAtomic ( size * sizeof ( xmlChar ) ) ; if ( buf == NULL ) { xmlErrMemory ( ctxt, NULL ) ; ctxt -> instate = state ; return ; } buf = ( xmlChar * ) xmlMallocAtomic ( size * sizeof ( xmlChar ) ) ; if ( buf == NULL ) { xmlErrMemory ( ctxt, NULL ) ; ctxt -> inst",0
615,<S2SV_ModStart> bool slow ; if ( flags & MSG_TRUNC ) { msg -> msg_namelen = sizeof ( * sin ) ; * addr_len = sizeof ( * sin ) ; },0
616,"<S2SV_ModStart> len ) { u_int <S2SV_ModEnd> tlen, pdu_type <S2SV_ModStart> ; } while ( tlen >= sizeof ( rpki_rtr_pdu ) ) { ND_TCHECK2 ( * tptr, sizeof ( rpki_rtr_pdu ) ) ; pdu_header = ( const rpki_rtr_pdu * ) tptr ; pdu_type = EXTRACT_32BITS ( pdu_header -> pdu_type ) ; pdu_len = EXTRACT_32BITS ( pdu_header -> length ) ; if (! tlen ) { ND_TCHECK2 ( * tptr, sizeof ( rpki_rtr_pdu ) ) ; break ; } if ( rpki_rtr_pdu_print ( ndo, tptr, 8 ) ) goto trunc ; tlen -= pdu_len ; tptr += pdu_len ; } return ; trunc : ND_PRINT ( ( ndo, ""\\n\\t%s"", tstr ) ) ; }",0
617,"<S2SV_ModStart> int tagval ; struct stream packet = * s ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { logger ( Protocol, Error, ""cssp_read_tsrequest(), <S2SV_blank> expected <S2SV_blank> BER_TAG_SEQUENCE|BER_TAG_CONSTRUCTED, <S2SV_blank> got <S2SV_blank> %x"", s -> p [ 0 ] ) ; return False ; } <S2SV_ModStart> return False ; if (! s_check_rem ( s, length ) ) { logger ( Protocol, Error, ""cssp_read_tsrequest(), <S2SV_blank> expected <S2SV_blank> BER_TAG_SEQUENCE|BER_TAG_CONSTRUCTED, <S2SV_blank> got <S2SV_blank> %x"", s -> p [ 0 ] ) ; return False ; } if (! s_check_rem ( s, length ) ) { logger ( Protocol, Error, ""cssp_read_tsrequest(), <S2SV_blank> expected <S2SV_blank> BER_TAG_SEQUENCE|BER_TAG_CONSTRUCTED, <S2SV_blank> got <S2SV_blank> %x"", s -> p [ 0 ] ) ; return False ; } if (! s_check_rem ( s, length ) ) { logger ( Protocol, Error, ""cssp_read_tsrequest(), <S2SV_blank> expected <S2SV_blank> BER_TAG_SEQUENCE|",0
618,"<S2SV_ModStart> ; int chars_processed <S2SV_ModEnd> ; int elt <S2SV_ModStart> int elt ; u_int data_size ; if ( ( l = labellen ( ndo, cp ) ) == ( u_int ) - 1 ) return ( NULL ) ; i = * cp ++ ; chars_processed = 1 ; if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; i = * cp ++ ; chars_processed ++ ; if ( chars_processed >= data_size ) return ( NULL ) ; if ( i!= 0 ) while ( i && cp < ndo -> ndo_snapend ) { if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; cp = bp + ( ( i << 8 ) | * cp ) & 0x3fff ) ; if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; i = * cp ++ ; chars_processed ++ ; if ( chars_processed >= data_size ) return ( NULL ) ; i = * cp ++ ; chars_processed ++ ; if (! ND_TTEST2 ( * cp, 1 ) ) return ( NULL ) ; i = *",0
619,"<S2SV_ModStart> args ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE ) ; <S2SV_ModStart> valuelen ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE ) ; xfs_trans_ijoin ( args -> trans, dp, XFS_ILOG_CORE ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG",0
620,"<S2SV_ModStart> int rv = Socket_print <S2SV_ModEnd> ( S, <S2SV_ModStart>, ""POST <S2SV_blank> %s <S2SV_blank> HTTP/1.0\\r\\n"" ""Content-Type: <S2SV_blank> application/x-www-form-urlencoded\\r\\n"" ""Content-Length: <S2SV_blank> %d\\r\\n"" <S2SV_ModEnd> ""Content-Length: <S2SV_blank> %d\\r\\n"" ""%s"" ""\\r\\n"" ""%s""",0
621,"<S2SV_ModStart> } pid_t child ; int rv ; <S2SV_ModStart> 0 ) ; rv = copy_file ( src, dest ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.asoundrc <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } drop_privs ( 0 ) ; rv = copy_file ( src, dest ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.asoundrc <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.asoundrc <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } _exit ( 0 ) ; } unlink ( src ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
622,"<S2SV_ModStart> flags ) ; rc = bfa_port_get_stats ( BFA_FCPORT ( & bfad -> bfa ), fcstats, bfad_hcb_comp, & fcomp ) ; if ( rc!= BFA_STATUS_OK ) return NULL ; hstats -> seconds_since_last_reset = fcstats -> fc. secs_reset ; hstats -> tx_frames = fcstats -> fc. tx_frames ; hstats -> tx_words = fcstats -> fc. rx_words ; hstats -> lip_count = fcstats -> fc -> lip_count ; hstats -> nos_count = fcstats -> fc -> nos_count ; hstats -> error_frames = fcstats -> fc. error_frames ; hstats -> dumped_frames = fcstats -> fc. dumped_frames ; hstats -> link_failure_count = fcstats -> fc. link_failures ; hstats -> loss_of_sync_count = fcstats -> fc. loss_of_syncs ; hstats -> link_failure_count = fcstats -> fc. link_failures ; hstats -> loss_of_syncs = fcstats -> fc. loss_",0
623,"<S2SV_ModStart> value ) { value -> x = MinF ( 1.0f, MaxF ( 0.0f, value -> x ) ) ; value -> y = MinF ( 1.0f, MaxF ( 0.0f, value -> y ) ) ; value -> z = MinF ( 1.0f, MaxF ( 0.0f, value -> z ) ) ; value -> w = MinF ( 1.0f, MaxF ( 0.0f, value -> w ) ) ; value -> h = MinF ( 1.0f, MaxF ( 0.0f, value -> h ) ) ; value -> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
624,"<S2SV_ModStart> { * head = NULL ; * out = line ; return 0 ; } if ( len < PKT_LEN_SIZE ) { giterr_clear ( ) ; * out = line ; return 0 ; } len -= PKT_LEN_SIZE ; if ( * line == GIT_SIDE_BAND_DATA ) ret = data_pkt ( head, line, len ) ; else if ( * line == GIT_SIDE_BAND_PROGRESS ) ret = sideband_progress_pkt ( head, line, len ) ; else if ( * line == GIT_SIDE_BAND_ERROR ) ret = sideband_error_pkt ( head, line, len ) ; else if ( * line == '#' ) ret = comment_pkt ( head, line, len ) ; else if (! git__prefixcmp ( line, ""ERR <S2SV_blank> "" ) ) ret = err <S2SV_blank> pkt ( head, line, len ) ; else if (! git__prefixcmp ( line, ""ERR <S2SV_blank> "" ) ) ret = err <S2SV_blank> pkt ( head, line, len ) ; else if ( * line == '#' ) ret = comment_pkt ( head, line, len ) ;",0
625,"<S2SV_ModStart> ; if (! mmget_still_valid ( mm ) ) return VM_FAULT_SIGSEGV ; if (! mmget_still_valid ( mm ) ) return VM_FAULT_SIGSEGV ; if ( ( flags & FAULT_FLAG_EXEC ) &&! mm_forbids_zeropage ( mm ) ) { entry = pte_mkexec ( my_zero_pfn ( address ), vma -> vm_page_prot ) ; page_table = pte_offset_map_lock ( mm, pmd, address, & ptl ) ; if (! page_table ) page_table = pte_offset_map_lock ( mm, pmd, address, & ptl ) ; if (! pte_none ( * page_table ) ) { entry = pte_mkexec ( my_zero_pfn ( address ), vma -> vm_page_prot ) ; page_table = pte_offset_map_lock ( mm, pmd, address, & ptl ) ; if (! page_table ) page_table = pte_offset_map_lock ( mm, pmd,",0
626,<S2SV_ModStart> -> sasl_mechanism ; rec -> sasl_username = g_strdup ( src -> sasl_username ) ; rec -> sasl_password = g_strdup ( src -> sasl_password ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec -> usermode = g_strdup ( src -> usermode ) ; rec -> alternate_nick = g_strdup ( src -> alternate_nick ) ; rec ->,0
627,"<S2SV_ModStart> { struct bpf_insn_aux_data <S2SV_ModEnd> * new_data, <S2SV_ModStart> = new_data ; memset ( new_data, 0, sizeof ( struct bpf_insn_aux_data ) ) ; <S2SV_ModStart> = new_data ; memcpy ( new_data + off + cnt - 1, old_data + off, sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; memcpy ( new_data + off, old_data + off, sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; memcpy ( new_data + off + cnt - 1, old_data + off, sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; memcpy ( new_data + off, old_data + off, sizeof ( struct bpf_insn_aux_data ) * ( prog_len - off - cnt + 1 ) ) ; memcpy ( new_data + off, sizeof ( struct bpf_insn_aux",0
628,<S2SV_ModStart> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
629,"<S2SV_ModStart> trunc ; } if ( len - i < IP6MOPT_REFRESH_MINLEN ) { ND_PRINT ( ( ndo, ""(refresh: <S2SV_blank> %u)"", EXTRACT_16BITS ( & bp [ i + 2 ] ) << 2 ) ) ; goto trunc ; } <S2SV_ModStart> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
630,<S2SV_ModStart> frames_till_gf_update_due ; } memset <S2SV_ModEnd> ( cpi ->,1
631,<S2SV_ModStart> 0 ) ; if ( ( <S2SV_ModStart> occ0 % rowsize ) == 0 ) { TIFFError * tifp = & tif -> tif_errors [ tif -> tif_id ] ; TIFFError * tifp = & tif -> tif_errors [ tif -> tif_id ] ; TIFFError * tifp = & tif -> tif_errors [ tif -> tif_id ] ; TIFFError * tifp = & tif -> tif_errors [ tif -> tif_id ] ; TIFFError * tifp = & tifp -> tif_errors [ tif -> tif_id ] ; TIFFError * tifp = & tifp -> tif_errors [ tif -> tif_id ] ; TIFFError * tifp = & tifp -> tif_errors [ tif -> tif_id ] ; TIFFError * tifp = & tifp -> tif_errors [ tif -> tif_id ] ; TIFFError * tifp = & tifp -> tif_errors [ tif -> tif_id ] ; TIFFError * tifp,0
632,"<S2SV_ModStart>, tcount, o, datao ; if ( CHECKOVERFLOW ( 6 + n -> offset, 2 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } datao = 6 + n -> offset ; if ( CHECKOVERFLOW ( datao, buf_size, 2 ) ) { exif_log ( ne -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteCanon"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } c = exif_get_short ( buf + datao, n -> order ) ; datao += 2 ; exif_mnote_data_canon_clear ( n ) ; exif_mem_free ( n -> entries ) ; n -> entries = exif_mem_alloc ( ne -> mem, sizeof ( MnoteCanonEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( ne -> log, ""ExifMnoteCanon"", sizeof ( MnoteCanonEntry ) * c ) ; break ; }",0
633,"<S2SV_ModStart> established ) { * minor_status = KG_CTX_INCOMPLETE ; return GSS_S_NO_CONTEXT ; } if ( kg_locate_iov ( iov, iov_count, GSS_IOV_BUFFER_TYPE_STREAM )!= NULL ) { code = kg_unseal_stream_iov ( minor_status, ctx, conf_state, qop_state, iov, iov_count, GSS_IOV_BUFFER_TYPE_STREAM ) ; } else { * minor_status = KG_CTX_INCOMPLETE ; return GSS_S_NO_CONTEXT ; } if ( kg_locate_iov ( iov, iov_count, GSS_IOV_BUFFER_TYPE_STREAM )!= NULL ) { code = kg_unseal_stream_iov ( minor_status, ctx, conf_state, qop_state, iov, iov_count, GSS_IOV_BUFFER_TYPE_STREAM ) ; } else { code = kg_unseal_stream_iov ( minor_status, ctx, conf_state, qop_state, i",0
634,<S2SV_ModStart> = NULL ; <S2SV_ModEnd> } } <S2SV_null>,0
635,"<S2SV_ModStart> HA_ERR_CRASHED : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> a <S2SV_blank> correct <S2SV_blank> index <S2SV_blank> definition. <S2SV_blank> You <S2SV_blank> need <S2SV_blank> to <S2SV_blank> recreate <S2SV_blank> it <S2SV_blank> before <S2SV_blank> you <S2SV_blank> can <S2SV_blank> do <S2SV_blank> a <S2SV_blank> repair"", filename ) ; break ; case HA_ERR_NOT_A_TABLE : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> MyISAM-table"", filename ) ; break ; case HA_ERR_CRASHED_ON_USAGE : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed"", filename ) ; break ; case HA_ERR_CRASHED_ON_REPAIR : mi_check_print_error ( param, ""\'%s\' <S2SV_blank> is <S2SV_blank> marked <S2SV_blank> as <S2SV_blank> crashed"",",0
636,"<S2SV_ModStart> ) { int alloc <S2SV_ModEnd> = ( length <S2SV_ModStart> long hex ; CURLcode <S2SV_ModEnd> res ; if <S2SV_ModStart> CURL_convert_from_network ( handle <S2SV_ModEnd>, & in <S2SV_ModStart> 1 ) ; if ( res ) { free ( ns ) ; return NULL ; } string += 2 ; alloc -= 2 ; } ns [ strindex ++ ] = 0 ; if ( olen ) * olen = strindex ; return ns ; } <S2SV_ModEnd> while ( -- <S2SV_ModStart> alloc > 0 ) { in = * string ; if ( ( '%' == in ) && ( ISXDIGIT ( string [ 1 ] ) && ISXDIGIT ( string [ 2 ] ) ) { hex = strtoul ( hexstr, & ptr, 16 ) ; in = curlx_ultouc ( hex ) ; res = Curl_convert_from_network ( handle, & in, 1 ) ; if ( res ) { free ( ns ) ; return NULL ; } ns [ strindex ++ ] = in ; string ++ ; } ns [ strindex ++ ] = 0 ; if ( olen ) * olen = strindex ; return ns ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
637,"<S2SV_ModStart> RAnalOp next_op ; # if CONFIG_CPU_HIGHBITDEPTH avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; # else avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; # if CONFIG_CPU_HIGHBITDEPTH avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, buf + op -> size, len - op -> size, cpu ) ; # else avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; # if CONFIG_CPU_HIGHBITDEPTH avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; # endif",0
638,"<S2SV_ModStart> ( unlikely ( iov_iter_count ( i ) > PAGE_CACHE_SIZE ) ) { bytes = min_t ( unsigned long, PAGE_CACHE_SIZE - offset, iov_iter_single_seg_count ( i ) ) ; goto again ; } status = a_ops -> write_begin ( file, mapping, pos, bytes, flags, & page, & fsdata ) ; if ( status < 0 ) break ; status = a_ops -> write_end ( file, mapping, pos, bytes, copied, page, fsdata ) ; if ( status < 0 ) break ; status = - EFAULT ; break ; } status = a_ops -> write_begin ( file, mapping, pos, bytes, flags, & page, & fsdata ) ; if ( status < 0 ) break ; status = a_ops -> write_end ( file, mapping, pos, bytes, copied, page, fsdata ) ; if ( status < 0 ) break ; status = a_ops -> write_end ( file, mapping, pos, bytes, copied, page, fsdata ) ; if ( status < 0 ) break ; status = a_ops -> write_end ( file, mapping",0
639,"<S2SV_ModStart> } if ( unlikely ( len < ring -> rx_buffersize ) ) { int cnt = 0 ; s32 tmp = len ; while ( 1 ) { desc = ops -> idx2desc ( ring, * slot, & meta ) ; sync_descbuffer_for_device ( ring, meta -> dmaaddr, ring -> rx_buffersize ) ; * slot = next_slot ( ring, * slot ) ; cnt ++ ; tmp -= ring -> rx_buffersize ; } } if ( unlikely ( tmp > ring -> rx_buffersize ) ) { int cnt = 0 ; s32 tmp = len ; while ( 1 ) { desc = ops -> idx2desc ( ring, * slot, & meta ) ; sync_descbuffer_for_device ( ring, meta -> dmaaddr, ring -> rx_buffersize ) ; * slot = next_slot ( ring, * slot ) ; * slot = next_slot ( ring, * slot ) ; cnt = 0 ; while ( 1 ) { desc = ops -> idx2desc ( ring, * slot, & meta ) ; sync_descbuffer_for_device ( ring, meta -> dmaaddr, ring -> rx_buffersize ) ; * slot",0
640,"<S2SV_ModStart> pdu_free_state_ref = usm_free_usmStateReference ; def -> session_setup = usm_session_setup ; def -> probe_engineid = usm_discover_engineid ; def -> post_probe_engineid = usm_create_user_from_session_hook ; if ( register_sec_mod ( USM_SEC_MODEL_NUMBER, ""usm"", def )!= SNMPERR_SUCCESS ) { SNMP_FREE ( def ) ; snmp_log ( LOG_ERR, ""could <S2SV_blank> not <S2SV_blank> register <S2SV_blank> usm <S2SV_blank> sec <S2SV_blank> mod\\n"" ) ; return ; } snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_POST_PREMIB_READ_CONFIG, init_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ; snmp_register_callback ( SNMP_CALLBACK_LIBRARY, SNMP_CALLBACK_SHUTDOWN, deinit_usm_post_config, NULL ) ;",0
641,"<S2SV_ModStart> |= SEEN ; show_tag ( obj, name, data ) ; continue ; } if ( obj -> type == OBJ_OBJECT ) { process_object ( revs, ( struct object * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_TREE ) { process_tree ( revs, ( struct tree * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_BLOB ) { process_blob ( revs, ( struct blob * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_TAG ) { obj -> flags |= SEEN ; show_object ( obj, NULL, name, data ) ; continue ; } if ( obj -> type == OBJ_BLOB ) { process_blob ( revs, ( struct blob * ) obj, show_object, & base, path, data ) ; continue ; } if ( obj -> type == OBJ_BLOB ) { process_blob ( revs, ( struct blob * ) obj, show_object, & base",0
642,<S2SV_ModStart> = NULL ; if ( prog -> flags & eflags ) prog -> flags |= eflags ; else prog -> flags &= ~ eflags ;,0
643,"<S2SV_ModStart> + 1 ; memcpy ( pal, src, npal * 3 ) ; src += npal * 3 ; if (! memcmp ( pal + i * 3, transp, 3 ) ) { ret = AVERROR_INVALIDDATA ; return ret ; } <S2SV_ModStart> + 1 ; memcpy ( pal + i * 3, transp, 3 ) ; if (! memcmp ( pal + i * 3, transp, 3 ) ) { ret = AVERROR_INVALIDDATA ; return ret ; } memcpy ( pal + i * 3, transp, 3 ) ; if (! memcmp ( pal + i * 3, transp, 3 ) ) { ret = AVERROR_INVALIDDATA ; return ret ; } memcpy ( pal, src, npal * 3 ) ; src += npal * 3 ; if (! memcmp ( pal + i * 3, transp, 3 ) ) { ret = AVERROR_INVALIDDATA ; return ret ; } memcpy ( pal + i * 3, transp, 3 ) ; if (! memcmp ( pal + i * 3, transp, 3 ) ) { ret = AVERROR_INVALIDDATA ;",0
644,<S2SV_ModStart> lock_ptr ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
645,"<S2SV_ModStart> ] ; # ifdef NETSNMP_NO_WRITE_SUPPORT switch ( action ) { case MODE_SET_RESERVE1 : if ( var_val_type!= ASN_INTEGER ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> type <S2SV_blank>!= <S2SV_blank> int\\n"" ) ; return SNMP_ERR_WRONGTYPE ; } idx = * ( ( long * ) var_val ) ; if ( idx!= * ( ( long * ) var_val ) ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; } idx = * ( ( long * ) var_val ) ; if ( idx!= * ( ( long * ) var_val ) ) { snmp_log ( LOG_ERR, ""Wrong <S2SV_blank> value <S2SV_blank>!= <S2SV_blank> 1\\n"" ) ; return SNMP_ERR_WRONGVALUE ; } if (! exten ||! exten -> efix_entry ) { snmp_log ( LOG_ERR, ""No <S2SV_blank> command <S2SV_blank> to <S2SV_blank> run\\n"" ) ; return SNMP_ERR_GENERR ; }",0
646,<S2SV_ModStart> ; break ; case 3 : { CheckNumberPixels ( 4 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 7 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 5 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 4 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 3 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 1 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ) ; * pixels ++ = ( unsigned char ) ( ( pixel >> 0 ) & 0x03 ),0
647,"<S2SV_ModStart> timer ) ; if ( timeri -> flags & SNDRV_TIMER_IFLG_CALLBACK ) { spin_lock_irq ( & timeri -> lock ) ; <S2SV_ModStart> slave_active_lock ) ; snd_timer_stop ( slave, 1, SNDRV_TIMER_EVENT_RESOLUTION ) ; list_move_tail ( & slave -> open_list, & snd_timer_slave_list ) ; } spin_unlock_irq ( & timeri -> lock ) ; if ( timeri -> flags & SNDRV_TIMER_IFLG_CALLBACK ) { spin_unlock_irq ( & timeri -> lock ) ; } spin_lock_irq ( & timeri -> lock ) ; list_del ( & timeri -> timer_list_head ) ; list_for_each_entry_safe ( slave, tmp, & timeri -> slave_list_head, open_list ) { spin_lock_irq ( & timeri -> lock ) ; if ( timeri -> flags & SNDRV_TIMER_IFLG_CALLBACK ) { spin_unlock_irq ( & timeri -> lock )",0
648,"<S2SV_ModStart> len ; } if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return len ; } <S2SV_ModStart> len ; } if ( len < 5 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 5)"" ) ) ; return len ; } <S2SV_ModStart> len ; } if ( len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 4)"" ) ) ; return len ; } <S2SV_ModStart> len ; } if ( len < 5 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 5)"" ) ) ; return len ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> >= <S2SV_blank> 6)"" ) ) ; return len ; } <S2SV_ModStart> len ; } if ( len < 6 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> (length <S2SV_blank> bogus, <S2SV_blank> should <S2SV_blank> be <S2SV_blank>",0
649,"<S2SV_ModStart> ; const char <S2SV_ModEnd> * arch = <S2SV_ModStart> arch = info -> arch ; ut16 bits = info -> bits ; ut64 baseaddr = r_bin_get_baddr ( r -> bin ) ; r_config_set_i ( r -> config, ""io.va"", ( binobj -> info )? binobj -> info -> has_va : 0 ) ; r_config_set_i ( r -> config, ""bin.baddr"", baseaddr ) ; r_config_set ( r -> config, ""asm.bits"", bits ) ; r_asm_use ( r -> assembler, arch ) ; r_core_bin_info ( r, R_CORE_BIN_ACC_ALL, R_CORE_BIN_SET, va, NULL, NULL ) ; r_core_bin_set_cur ( r, binfile ) ; return true ; } <S2SV_ModEnd> return true ;",0
650,"<S2SV_ModStart> void sas_probe_devices ( struct asd_sas_port * port <S2SV_ModEnd> ) { struct <S2SV_ModStart> * dev, * n ; list_for_each_entry_safe ( dev, n, & port -> sas_port_list, disco_list_node ) { spin_lock_irq ( & port -> dev_list_lock ) ; list_add_tail ( & dev -> dev_list_node, & port -> dev_list ) ; spin_unlock_irq ( & port -> dev_list_lock ) ; } sas_probe_sata ( port ) ; list_for_each_entry_safe ( dev, n, & port -> sas_port_list, disco_list_node ) { spin_lock_irq ( & port -> dev_list_lock ) ; list_add_tail ( & dev -> dev_list_node, & port -> dev_list ) ; spin_unlock_irq ( & port -> dev_list_lock ) ; sas_probe_sata ( port ) ; list_for_each_entry_safe ( dev, n, & port -> sas_port_list, disco_list_node",0
651,"<S2SV_ModStart> -> u1_dpb_commands_read ) { if (! ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read ) ps_dec -> u4_bitoffset = ih264d_read_mmco_commands ( ps_dec ) ; else ps_dec -> ps_bitstrm -> u4_ofst += ps_dec -> u4_bitoffset ; <S2SV_ModStart> -> u4_bitoffset = ih264d_read_mmco_commands ( ps_dec ) ; if (! ps_dec -> ps_dpb_cmds -> u1_dpb_commands_read ) ps_dec -> u4_bitoffset = ih264d_read_mmco_commands ( ps_dec ) ; else ps_dec -> ps_bitstrm -> u4_ofst += ps_dec -> u4_bitoffset ; } i_temp = ps_pps -> u1_pic_init_qp + ih264d_sev ( pu4_bitstrm_ofst, pu4_bitstrm_buf ) ; if ( i_temp < 0 ) return ERROR_INV_RANGE_Q",0
652,"<S2SV_ModStart> ; int pkt_len ; <S2SV_ModEnd> char line [ <S2SV_ModStart> ; char line [ NETSCREEN_LINE_LENGTH ] ; char <S2SV_ModEnd> cap_int [ NETSCREEN_MAX_INT_NAME_LENGTH <S2SV_ModStart> ; pkt_len = parse_netscreen_rec_hdr ( & wth -> phdr, line, cap_int, & cap_dir, & cap_dst, err, err_info ) ; if ( pkt_len == - 1 ) return FALSE ; if ( wth -> file_encap == WTAP_ENCAP_UNKNOWN ) wth -> file_encap = WTAP_ENCAP_UNKNOWN ; else if ( wth -> file_encap == WTAP_ENCAP_PER_PACKET ) wth -> file_encap = WTAP_ENCAP_PER_PACKET ; else if ( wth -> file_encap == WTAP_ENCAP_UNKNOWN ) wth -> file_encap = WTAP_ENCAP_PER_PACKET ; else if ( wth -> file_encap == WTAP_ENCAP_PER_PACKET ) wth -> file_encap = WTAP_ENCAP_",0
653,"<S2SV_ModStart> 0 ) ; if ( pqueue_peek ( s -> d1 -> unprocessed_rcds. q ) ) { if ( pqueue_peek ( s -> d1 -> unprocessed_rcds. q ) ) { if ( pqueue_peek ( s -> d1 -> unprocessed_rcds. q ) ) { dtls1_buffer_record ( s, & ( s -> d1 -> processed_rcds ), s -> s3 -> rrec. seq_num ) ; s -> d1 -> unprocessed_rcds. epoch = s -> d1 -> r_epoch ; s -> d1 -> unprocessed_rcds. epoch = s -> d1 -> r_epoch ; s -> d1 -> processed_rcds. epoch = s -> d1 -> r_epoch ; s -> d1 -> unprocessed_rcds. epoch = s -> d1 -> r_epoch ; s -> d1 -> unprocessed_rcds. epoch = s -> d1 -> r_epoch + 1 ; s -> d1 -> unprocessed_rcds. epoch = s -> d1 -> r_epoch ; s -> d1 -> unprocessed_rcds. epoch = s -> d1 -> r_epoch",0
654,<S2SV_ModStart> ) { int_fast32_t originalWidth = gifFilePtr -> Image. Width ; int_fast32_t heightOverflow = gifFilePtr -> Image. Height ; const uint_fast32_t newRasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; const uint_fast32_t rasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > info -> rasterSize || widthOverflow > 0 || heightOverflow > 0 ) { int_fast32_t widthOverflow = gifFilePtr -> Image. Width - gifFilePtr -> Image -> SWidth ; int_fast32_t newRasterSize = gifFilePtr -> Image. Height * gifFilePtr -> Image. Width ; const uint_fast32_t rasterSize = gifFilePtr -> Image. Width * gifFilePtr -> Image. Height ; if ( newRasterSize > info -> rasterSize || widthOverflow > 0 || heightOverflow > 0 ) { int_fast32_t widthOverflow = gifFilePtr -> Image. Width - gifFilePtr -> Image -> SWidth ; int_fast32_t heightOverflow = gifFilePtr -> Image -> Height,0
655,"<S2SV_ModStart> can_read_key : ret = keyctl_check_keytype ( key ) ; if ( ret == - EOPNOTSUPP ) { down_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; } if ( ret == 0 ) { ret = - EOPNOTSUPP ; if ( key -> type -> read ) { down_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; ret = key -> type -> read ( key, buffer, buflen ) ; up_read ( & key -> sem ) ; } <S2SV_ModEnd> error2 : key_put",0
656,"<S2SV_ModStart> || cherokee_buffer_is_empty ( & <S2SV_ModStart> user ) ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> user, 0, ""*()"" ) ; if ( size!= conn -> validator -> user. len ) return ret_error ; size = cherokee_buffer_cnt_cspn ( & conn -> validator -> passwd, 0, ""*"" ) ; if ( size!= conn -> validator -> passwd. len ) return ret_error ; re = ldap_count_entries ( ldap -> conn, message ) ; if ( re!= 1 ) { ldap_msgfree ( message ) ; return ret_not_found ; } first = ldap_first_entry ( ldap -> conn, message ) ; if ( first == NULL ) { ldap_msgfree ( message ) ; return ret_not_found ; } dn = ldap_get_dn ( ldap -> conn, first ) ; if ( dn == NULL ) { ldap_msgfree ( message ) ; return ret_not_found ; } dn = ldap_get_dn ( ldap -> conn, first ) ; if ( dn == NULL ) { ldap_msgfree ( message ) ;",0
657,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( tile_image <S2SV_ModStart> ) ) ; \\\n} <S2SV_ModEnd> char geometry [ <S2SV_ModStart> ReadBlobByte ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( <S2SV_ModStart> ReadBlobByte ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlobByte ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlobByte ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlobByte ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> ReadBlobByte ( image ) ; if ( length > GetBlobSize ( image ) ) ThrowPICTException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> Read",0
658,<S2SV_ModStart> val ) { jas_ulonglong <S2SV_ModEnd> tmp ; if <S2SV_ModStart> - 1 ; <S2SV_ModEnd> * val =,0
659,<S2SV_ModStart> ; break ; case RDS_CMSG_ATOMIC_FADD : rm -> atomic. op_m_fadd. add = args -> fadd. add ; rm -> atomic. op_m_fadd. nocarry_mask = args -> m_fadd. nocarry_mask ; break ; case RDS_CMSG_MASKED_ATOMIC_FADD : rm -> atomic. op_type = RDS_ATOMIC_TYPE_FADD ; rm -> atomic. op_m_fadd. add = args -> fadd. add ; rm -> atomic. op_m_fadd. nocarry_mask = args -> m_fadd. nocarry_mask ; break ; case RDS_CMSG_MASKED_ATOMIC_CSWP : rm -> atomic. op_type = RDS_ATOMIC_TYPE_CSWP ; rm -> atomic. op_m_cswp. compare = args -> cswp. compare ; rm -> atomic. op_m_cswp. swap = args -> cswp. swap ; rm -> atomic. op_m_cswp. nocarry_mask = args -> m_cswp. nocarry_,0
660,<S2SV_ModStart> bus ] ; if ( bi == NULL ) return ; <S2SV_ModEnd> si = &,0
661,"<S2SV_ModStart> ; rdsdebug ( ""size <S2SV_blank> %zu <S2SV_blank> flags <S2SV_blank> 0x%x <S2SV_blank> timeo <S2SV_blank> %ld\\n"" <S2SV_ModEnd>, size,",0
662,"<S2SV_ModStart> ] ; if ( strncmp ( spath, var, sizeof ( spath ) )!= 0 ) return - 1 ; if ( strncmp ( spath, iface, sizeof ( spath ) )!= 0 ) return - 1 ; if ( strlen ( spath ) > sizeof ( spath ) ) return - 1 ; if ( access ( spath, F_OK )!= 0 ) return - 1 ; if ( access ( spath, F_OK )!= 0 ) return - 1 ; fp = fopen ( spath, ""w"" ) ; if (! fp ) { if ( name ) flog ( LOG_ERR, ""failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> %s <S2SV_blank> (%u) <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"", name, val, iface, strerror ( errno ) ) ; return - 1 ; } if ( access ( spath, F_OK )!= 0 ) return - 1 ; fp = fopen ( spath, ""w"" ) ; if (! fp ) { if ( name ) flog ( LOG_ERR, ""failed <S2SV_blank> to <S2SV_blank> set <S2SV_blank> %s <S2SV_blank> (%u) <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"", name, val, iface, str",0
663,<S2SV_ModStart> ( s += 10 <S2SV_ModEnd> ; isspace ( <S2SV_ModStart> ) ) t ++ ; if ( * s == '/' ) { const char * t = ++ s ; while ( * t &&! isspace ( * t ) ) t ++ ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ) ; free ( font_name ) ; font_name = ( char * ) malloc ( t - s + 1 ),0
664,"<S2SV_ModStart> 0 ) { if ( ctx -> hdrs [ i ] -> deleted ) { mutt_bcache_del ( pop_data -> bcache, ctx -> hdrs [ i ] -> data ) ; ctx -> hdrs [ i ] -> data = NULL ; } else if ( ctx -> hdrs [ i ] -> changed ) { mutt_hcache_store ( hc, ctx -> hdrs [ i ] -> data, strlen ( ctx -> hdrs [ i ] -> data ), ctx -> hdrs [ i ], 0 ) ; } } # ifdef USE_HCACHE if ( ctx -> hdrs [ i ] -> changed ) { mutt_hcache_delete ( hc, ctx -> hdrs [ i ] -> data, strlen ( ctx -> hdrs [ i ] -> data ) ) ; } else if ( ctx -> hdrs [ i ] -> deleted ) { j ++ ; if (! ctx -> quiet ) mutt_progress_update ( & progress, j, - 1 ) ; snprintf ( buf, sizeof ( buf ), ""DELE <S2SV_blank> %d\\r\\n"", ctx -> hdrs [ i ] -> refno ) ; ret = pop_query ( pop_data, buf, sizeof ( buf ) ) ; if ( ret",0
665,"<S2SV_ModStart> objp ) ; return TRUE ; case XDR_END : if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if ( p ) free ( p ) ; ret = krb5_parse_name ( context, p, & pr ) ; if ( ret!= 0 ) return FALSE ; * objp = pr ; free ( p ) ; break ; case XDR_END : if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if ( p ) free ( p ) ; ret = krb5_parse_name ( context, p, & pr ) ; if ( ret!= 0 ) return FALSE ; * objp = pr ; ret = krb5_free_principal ( context, pr ) ; if ( ret!= 0 ) return FALSE ; * objp = NULL ; break ; case XDR_END : if (! xdr_nullstring ( xdrs, & p ) ) return FALSE ; if ( p ) free ( p ) ; ret = krb5_parse_name ( context, p, & pr",0
666,"<S2SV_ModStart>. active_set ; if ( uipc_main. read_set < 0 ) { BTIF_TRACE_EVENT ( ""select <S2SV_blank> failed <S2SV_blank> %s"", strerror ( errno ) ) ; continue ; } result = TEMP_FAILURE_RETRY ( <S2SV_ModStart> UIPC_CH_NUM ; ch_id < UIPC_CH_NUM ; ch_id ++ ) { if ( ch_id!= UIPC_CH_ID_AV_AUDIO ) uipc_check_fd_locked ( ch_id ) ; if ( ch_id!= UIPC_CH_ID_AV_AUDIO ) uipc_check_fd_locked ( ch_id ) ; uipc_check_task_flags_locked ( ) ; uipc_check_fd_locked ( UIPC_CH_ID_AV_AUDIO ) ; for ( ch_id = 0 ; ch_id < UIPC_CH_NUM ; ch_id ++ ) { if ( ch_id!= UIPC_CH_ID_AV_AUDIO ) uipc_check_fd_locked ( ch_id ) ; }",0
667,"<S2SV_ModStart> return 1 ; dcb -> dccpd_seq = dh -> dccph_seq ; dcb -> dccpd_reset_code = DCCP_RESET_CODE_NO_CONNECTION ; return 1 ; } if ( dh -> dccph_type == DCCP_PKT_RESET ) { dcb -> dccpd_reset_code = DCCP_RESET_CODE_NO_CONNECTION ; return 1 ; } if ( dh -> dccph_type == DCCP_PKT_CLOSEREQ ) { dccp_rcv_CLOSEREQ ( sk, skb ) ; dcb -> dccpd_reset_code = DCCP_RESET_CODE_NO_CONNECTION ; return 1 ; } if ( dh -> dccph_type == DCCP_PKT_RESET ) { dcb -> dccpd_reset_code = DCCP_RESET_CODE_NO_CONNECTION ; return 1 ; } if ( dh -> dccph_type == DCCP_PKT_DATA ) { dccp_send_sync ( sk, dcb -> dccpd_seq, dcb -> dccpd_seq, DCCP_PKT_",0
668,<S2SV_ModStart> msixcap ; assert ( <S2SV_ModEnd> msgnum >= 1 <S2SV_ModStart> msgnum ) ; <S2SV_ModEnd> pci_msix_table_init ( dev <S2SV_ModStart> msgnum ) ; <S2SV_ModEnd> pci_populate_msixcap ( &,0
669,"<S2SV_ModStart> ; upperdentry = ovl_dentry_upper_nolock <S2SV_ModEnd> ( dentry ) <S2SV_ModStart> if ( upperdentry && upperdentry -> d_inode ) { mutex_lock ( & upperdentry -> d_inode -> i_mutex ) ; err = notify_change ( upperdentry, attr, NULL ) ; mutex_unlock ( & upperdentry -> d_inode -> i_mutex ) ; } else { err = ovl_copy_up_last ( dentry, attr, false ) ; }",0
670,"<S2SV_ModStart> ; while (! strchr ( p, '\\t' ) ) p ++ ; if (! strchr ( p, '\\n' ) ) return ( - 1 ) ; if (! strchr ( p, '\\r' ) ) return ( - 1 ) ; if (! strchr ( p, '\\r' ) ) return ( - 1 ) ; if (! strchr ( p, '\\t' ) ) return ( - 1 ) ; if (! strchr ( p, '\\t' ) ) return ( - 1 ) ) return ( - 1 ) ; if (! strchr ( p, '\\n' ) ) return ( - 1 ) ; if (! strchr ( p, '\\r' ) ) return ( - 1 ) ; if (! strchr ( p, '\\t' ) ) return ( - 1 ) ; if (! strchr ( p, '\\t' ) ) return ( - 1 ) ; if (! strchr ( p, '\\t' ) ) return ( - 1 ) ) return ( 1 ) ; if (! strchr ( p, '\\t' ) ) return ( - 1 ) ; if (! strchr ( p, '\\r' ) ) return ( -",0
671,"<S2SV_ModStart> ; if ( authctxt -> user == NULL ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } <S2SV_ModEnd> r = sshpkt_get_cstring <S2SV_ModStart> ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & chost, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & blen ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & cuser, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & chost, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & blen ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & cuser, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & chost, NULL ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & chost, NULL ) )!= 0 || ( r = sshpkt_get_c",0
672,"<S2SV_ModStart> decode_unsigned_max ( struct vpx_read_bit_buffer <S2SV_ModEnd> * rb, <S2SV_ModStart> int data = vpx_rb_read_literal <S2SV_ModEnd> ( rb,",1
673,"<S2SV_ModStart> 1 ) ; if (! mutt_str_strcmp ( line, ctx -> hdrs [ i ] -> data ) ) break ; if ( i == ctx -> msgcount ) { mutt_debug ( 1, ""skip <S2SV_blank> header <S2SV_blank> %d <S2SV_blank> %s\\n"", index, line ) ; if ( i >= ctx -> hdrmax ) mx_alloc_memory ( ctx ) ; ctx -> hdrmax ++ ; ctx -> hdrs [ i ] = mutt_header_new ( ) ; } else if ( i == ctx -> msgcount ) { mutt_debug ( 1, ""skip <S2SV_blank> header <S2SV_blank> %d <S2SV_blank> %s\\n"", index, line ) ; if ( i >= ctx -> hdrmax ) mx_alloc_memory ( ctx ) ; ctx -> hdrmax ++ ; ctx -> hdrs [ i ] = mutt_header_new ( ) ; ctx -> hdrs [ i ] -> data = mutt_str_strdup ( line ) ; } else if ( i == ctx -> msgcount ) { mutt_debug ( 1, ""skip <S2SV_blank> header <S2SV_blank> %d <S2SV_blank> %d <S2SV_blank> %s\\n"", index, line ) ; ctx -> hdrmax ++ ; ctx -> msgcount",0
674,"<S2SV_ModStart> NULL ) goto cleanup ; status = X509_NAME_cmp ( X509_get_issuer_name ( kdc_cert ), is -> issuer ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) { status = ASN1_INTEGER_cmp ( X509_get_serialNumber ( kdc_cert ), is -> serial ) ; if (! status ) * valid_kdcPkId = 1 ;",0
675,<S2SV_ModStart> precno ++ ) { <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
676,"<S2SV_ModStart> ; } } if ( ( entity -> etype == XML_INTERNAL_PARAMETER_ENTITY ) && ( entity -> etype == XML_EXTERNAL_PARAMETER_ENTITY ) ) { xmlWarningMsg ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""Internal: <S2SV_blank> %%%s; <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> parameter <S2SV_blank> entity\\n"", name, NULL ) ; } else { if ( ( entity -> etype == XML_EXTERNAL_PARAMETER_ENTITY ) && ( entity -> etype == XML_INTERNAL_PARAMETER_ENTITY ) ) { xmlWarningMsg ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""Internal: <S2SV_blank> %%%s; <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> parameter <S2SV_blank> entity\\n"", name, NULL ) ; } else { xmlWarningMsg ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""Internal: <S2SV_blank> %%%s; <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> parameter <S2SV_blank> entity\\n"", name, NULL ) ; } else { xmlWarningMsg ( ctxt, XML_WAR_UNDECLARED_ENTITY, ""Internal: <S2SV_blank> %%%s; <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> parameter <S2SV_blank> entity\\n"", name, NULL ) ; }",0
677,"<S2SV_ModStart> & fl6, rcu_dereference ( <S2SV_ModStart> np -> opt ) <S2SV_ModStart> np -> opt ) ; rcu_assign_pointer ( <S2SV_ModStart> np -> opt, rcu_dereference ( <S2SV_ModStart> np -> opt ) ) ; rcu_assign_pointer ( <S2SV_ModStart> np -> opt, rcu_dereference ( <S2SV_ModStart> np -> opt ) ) ; rcu_assign_pointer ( <S2SV_ModStart> np -> opt, rcu_dereference ( <S2SV_ModStart> np -> opt ) ) ; rcu_assign_pointer ( <S2SV_ModStart> np -> opt, rcu_dereference ( <S2SV_ModStart> np -> opt ) ) ; rcu_assign_pointer ( <S2SV_ModStart> np -> opt, rcu_dereference ( <S2SV_ModStart> np -> opt ) ) ) ; rcu_assign_pointer ( <S2SV_ModStart> np -> opt, rcu_dereference ( <S2SV_ModStart> np -> opt ) ) ; <S2SV_ModEnd> err = net_xmit_eval",0
678,<S2SV_ModStart> <S2SV_null> <S2SV_null> static TX_MODE <S2SV_ModEnd> select_tx_mode ( const <S2SV_ModStart> ) { return ONLY_4X4 <S2SV_ModEnd> ; } else <S2SV_ModStart> else { if ( cpi -> sf. tx_size_search_method == USE_LARGESTALL || cpi -> sf. tx_size_search_method == USE_FULL_RD ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ TX_MODE_SELECT ]? ALLOW_32X32 : TX_MODE_SELECT ; } else if ( cpi -> sf. tx_size_search_method == USE_FULL_RD ) { const MV_REFERENCE_FRAME frame_type = get_frame_type ( cpi ) ; return cpi -> rd_tx_select_threshes [ frame_type ] [ ALLOW_32X32 ] > cpi -> rd_tx_select_threshes [ frame_type ] [ TX_,0
679,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
680,<S2SV_ModStart> gf == GF_VDEF || im -> gdes [ vidx ]. gf == GF_MHWPREDICT || im -> gdes [ vidx ]. gf == GF_DEVPREDICT || im -> gdes [ vidx ]. gf == GF_MHWPREDICT || im -> gdes [ vidx ]. gf == GF_MHWPREDICT || im -> gdes [ vidx ]. gf == GF_DEVSEASONAL || <S2SV_ModStart> gf == GF_VDEF || im -> gdes [ vidx ]. gf == GF_MHWPREDICT || im -> gdes [ vidx ]. gf == GF_DEVSEASONAL || im -> gdes [ vidx ]. gf == GF_MHWPREDICT || im -> gdes [ vidx ]. gf == GF_MHWPREDICT || im -> gdes [ vidx ]. gf == GF_DEVSEASONAL || im -> gdes [ vidx ]. gf == GF_MHWPREDICT || im -> gdes [ vidx ]. gf == GF_DEVSE,0
681,<S2SV_ModStart> NULL ; } if ( shdr -> sh_size > sz ) { sdb = sdb_new0 ( ) ; if (! sdb ) { return NULL ; } sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = sdb_new0 ( ) ; if (! sdb_vernaux ) { sdb_vernaux = s,0
682,<S2SV_ModStart> ; if ( buf1 -> size > buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return - 1 ; } else if ( buf1 -> size == buf2 -> size ) { return 0 ; } else if ( buf1 -> size == buf2 -> size ) { return 1 ; } else if ( buf1 -> size == buf2 -> size ) { return - 1 ; },0
683,"<S2SV_ModStart>, & scn, CDF_SHORT_SEC_SIZE ( & h ), CDF_SEC_SIZE ( & h ), CDF_SHORT_SEC_SIZE ( & h ), CDF_SHORT_SEC_SIZE ( & h ), CDF_SEC_SIZE ( & h ), CDF_SHORT_SEC_SIZE ( & h ), CDF_SEC_SIZE ( & h ), CDF_SHORT_SEC_SIZE ( & h ), CDF_SHORT_SEC_SIZE ( & h ), CDF_SHORT_SEC_SIZE ( & h ), CDF_SEC_SIZE ( & h ), CDF_SHORT_SEC_SIZE ( & h ), CDF_SHORT_SEC_SIZE ( & h ), CDF_SEC_SIZE ( & h ), CDF_SHORT_SEC_SIZE ( & h ), CDF_SHORT_SEC_SIZE ( & h ), CDF_SHORT_SEC_SIZE ( & h ), CDF_SHORT_SEC_SIZE ( & h ), CDF_SHORT_SEC_SIZE ( & h ), CDF_SHORT_SEC_SIZE ( & h ), CDF_SHORT_SEC_SIZE ( & h ), CDF_SHORT_SEC_",0
684,"<S2SV_ModStart> = NULL ; size_t <S2SV_ModEnd> sz = sizeof <S2SV_ModStart> info ) + size ; if ( ( SMP_ALIGN ( size ) >> PAGE_SHIFT ) + 2 > totalram_pages ) return NULL ; if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) { info = vmalloc ( sz ) ; if (! info ) { info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) return NULL ; } if ( sz <= ( PAGE_SIZE << PAGE_ALLOC_COSTLY_ORDER ) ) info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) { info = vmalloc ( sz ) ; if (! info ) { info = kmalloc ( sz, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if (! info ) return",0
685,"<S2SV_ModStart>! eof ) { if ( vars -> str. len > vars -> end - vars -> ptr ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Input <S2SV_blank> variables <S2SV_blank> exceeded <S2SV_blank> %"" PRIu64 "". <S2SV_blank> "" ""To <S2SV_blank> increase <S2SV_blank> the <S2SV_blank> limit <S2SV_blank> change <S2SV_blank> max_input_vars <S2SV_blank> in <S2SV_blank> php.ini."", max_vars ) ; return FAILURE ; }",0
686,<S2SV_ModStart> * ax25 ; if ( protocol < 0 || protocol > AX25_MAX_PROTOCOL ) return - EINVAL ; switch ( sock -> type ) { case SOCK_DGRAM : if ( protocol == 0 || protocol == PF_AX25 ) protocol = AX25_P_TEXT ; break ; case SOCK_SEQPACKET : if ( protocol == 0 || protocol == PF_AX25 ) protocol = AX25_P_ARP ; break ; case AX25_P_IP : case AX25_P_IPV4 : case AX25_P_IPV6 : if ( ax25_protocol_is_registered ( AX25_P_IPV6 ) ) return - ESOCKTNOSUPPORT ; break ; # ifdef CONFIG_INET case AX25_P_ARP : case AX25_P_IP : if ( ax25_protocol_is_registered ( AX25_P_IP ) ) return - ESOCKTNOSUPPORT ; break ; # endif # ifdef CONFIG_NETROM_MODULE case AX25_P_NETROM : if ( ax25_protocol_is_registered ( AX25_P_NETROM ) ) return - ESOCK,0
687,"<S2SV_ModStart> PERF_COUNT_SW_PAGE_FAULTS, 1 <S2SV_ModEnd>, regs, <S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",0
688,"<S2SV_ModStart> -> _eip ; rc = assign_eip_near ( ctxt, <S2SV_ModEnd> old_eip ) ; <S2SV_ModStart> case 4 : rc = assign_eip_near ( ctxt, <S2SV_ModEnd> old_eip ) ;",0
689,"<S2SV_ModStart> imap_quote_string ( errstr, sizeof ( errstr ), list. name ) ; if ( mutt_str_strcmp ( url. path, ImapUser ) == 0 ) url. path [ strlen ( url. path ) - 1 ] = '\\0' ; if ( mutt_str_strcmp ( url. user, ImapUser ) == 0 ) url. user = NULL ; url_tostring ( & url, buf + 11, sizeof ( buf ) - 11, 0 ) ; if ( mutt_str_strcmp ( url. user, ImapUser ) == 0 ) url. user = NULL ; url_tostring ( & url, buf + 11, sizeof ( buf ) - 11, 0 ) ; if ( mutt_parse_rc_line ( buf, & token, & err ) ) mutt_debug ( 1, ""Error <S2SV_blank> adding <S2SV_blank> subscribed <S2SV_blank> mailbox: <S2SV_blank> %s\\n"", errstr ) ; if ( mutt_parse_rc_line ( buf, & token, & err ) ) mutt_debug ( 1, ""Error <S2SV_blank> adding <S2SV_blank> subscribed <S2SV_blank> mailbox: <S2SV_blank> %s\\n"", errstr ) ;",0
690,"<S2SV_ModStart> * secret, <S2SV_ModEnd> void * end <S2SV_ModStart> * th ; <S2SV_ModEnd> int dlen ; <S2SV_ModStart> dlen = ceph_x_decrypt ( secret, p, end, dbuf, TEMP_TICKET_BUF_LEN ) ; if ( dlen <= 0 ) { ret = dlen ; goto out ; } dp = dbuf ; dend = dp + dlen ; tkt_struct_v = ceph_decode_8 ( & dp ) ; if ( tkt_struct_v!= 1 ) { ret = dlen ; goto out ; } dlen = ceph_x_decrypt ( secret, p, end, dbuf, TEMP_TICKET_BUF_LEN ) ; if ( dlen <= 0 ) { ret = dlen ; goto out ; } dout ( "" <S2SV_blank> decrypted <S2SV_blank> %d <S2SV_blank> bytes\\n"", dlen ) ; dp = dbuf ; dend = dp + dlen ; tkt_struct_v = ceph_decode_8 ( & dp ) ; tkt_struct_v = ceph_decode_8 ( & dp ) ; if ( tkt_struct_v!= 1 ) { ret = dlen ; goto out ; }",0
691,"<S2SV_ModStart> / 2 ; if ( count > UINT32_MAX / sizeof ( Pairs ) ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""number <S2SV_blank> of <S2SV_blank> pairs <S2SV_blank> (%d) <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", count, ( UINT32_MAX / sizeof ( Pairs ) ) ) ) ;",0
692,<S2SV_ModStart> rq ) ; <S2SV_ModEnd> prev -> sched_class,1
693,"<S2SV_ModStart> ; n2l ( p, s -> session -> tlsext_tick_lifetime_hint ) ; n2s ( p, ticklen ) ; if ( ticklen + 6!= n ) { al = SSL_AD_DECODE_ERROR ; SSLerr ( SSL_F_SSL3_GET_NEW_SESSION_TICKET, SSL_R_LENGTH_MISMATCH ) ; goto f_err ; }",0
694,"<S2SV_ModStart> ) ; r = safe_event_add_io ( b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r < 0 ) { log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } r = safe_event_add_io ( b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r < 0 ) { log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } r = sd_event_add_io ( b -> manager -> event, & b -> io_event_source, b -> fd, EPOLLIN, button_dispatch, b ) ; if ( r < 0 ) { log_error_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> add <S2SV_blank> button <S2SV_blank> event: <S2SV_blank> %m"" ) ; goto fail ; } log_info ( ""Watching <S2SV_blank> system <S2SV_blank> buttons <S2SV_blank> on <S2SV_blank> /dev/input/%s <S2SV_blank> (%s",0
695,<S2SV_ModStart> ( errors ) return TEST_ERR_MAJOR_BAD ; else return 0 ;,0
696,"<S2SV_ModStart> ; return ( * field_rtrn!= NULL ) ; case EXPR_ARRAY_REF : * elem_rtrn = NULL ; * field_rtrn = xkb_atom_text ( ctx, expr -> array_ref. element ) ; * field_rtrn = xkb_atom_text ( ctx, expr -> array_ref. field ) ; * index_rtrn = expr -> array_ref. entry ; return ( * elem_rtrn!= NULL ) ; case EXPR_IDENT : * elem_rtrn = NULL ; * field_rtrn = xkb_atom_text ( ctx, expr -> ident. ident ) ; * index_rtrn = xkb_atom_text ( ctx, expr -> ident. field ) ; * index_rtrn = NULL ; return ( * field_rtrn!= NULL ) ; case EXPR_FIELD_REF : * elem_rtrn = xkb_atom_text ( ctx, expr -> field_ref. element ) ; * field_rtrn = xkb_atom_text ( ctx, expr -> field_ref. field ) ; * index_rtrn",0
697,<S2SV_ModStart> lun ) sas_eh_finish_cmd ( cmd <S2SV_ModEnd> ) ; },0
698,"<S2SV_ModStart> ; REQ ( n <S2SV_ModEnd>, funcdef ) <S2SV_ModStart>, funcdef ) ; name = NEW_IDENTIFIER ( CHILD ( n, name_i ) ) ; if (! name ) return NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) return NULL ; args = ast_for_arguments ( c, CHILD ( n, name_i + 1 ) ) ; if (! args ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 2 ) ) == RARROW ) { returns = ast_for_expr ( c, CHILD ( n, name_i + 3 ) ) ; if (! returns ) return NULL ; name_i += 2 ; } body = ast_for_suite ( c, CHILD ( n, name_i + 3 ) ) ; if (! body ) return NULL ; get_last_end_pos ( body, & end_lineno, & end_col_offset ) ; body = ast_for_suite ( c, CHILD ( n, name_i + 4 ) ) ; if (! body ) return NULL ; get_last_end_pos (",0
699,<S2SV_ModStart> * sock ; struct ip_sockaddr_storage addr ; <S2SV_ModStart> = 0 ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. saddr_len = sizeof ( struct in_addr ) ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. saddr_len = sizeof ( struct in_addr ) ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF_INET ; addr. sa_family = AF,0
700,<S2SV_ModStart> iv ) ; <S2SV_ModEnd> while ( walk,1
701,<S2SV_ModStart> = 0 ; msg -> msg_namelen = 0 ;,1
702,"<S2SV_ModStart> if ( sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 ) { * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( REALTYPE * ) malloc ( sizeof ( double ) * ( * o_element_count ) ) ; * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( REALTYPE * ) malloc ( sizeof ( double ) * ( * o_element_count + 1 ) ) ; * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_row_count + 1 ) ) ; * o_values = ( REALTYPE * ) malloc ( sizeof ( double ) *",0
703,"<S2SV_ModStart> size_t ldblk ; if ( ldblk > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( ldblk > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( ldblk > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( ldblk > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( ldblk > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( ldblk > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( ldblk > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( ldblk > GetBlobSize ( image ) )",0
704,<S2SV_ModStart> ctxt ) { int rc = X86EMUL_CONTINUE ; <S2SV_ModStart> ) ) ) rc = <S2SV_ModStart> ) ; return rc <S2SV_ModEnd> ; } <S2SV_null>,1
705,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
706,"<S2SV_ModStart> 0 ) ; if (! res ) return - ENODEV ; <S2SV_ModStart> ; freq_reg += HI3660_STUB_CLOCK_DATA ; for ( i = 0 ; i < HI3660_CLK_STUB_NUM ; i ++ ) { ret = devm_ioremap ( dev, res -> start, resource_size ( res ) ) ; if ( ret ) return ret ; freq_reg += HI3660_STUB_CLOCK_DATA ; for ( i = 0 ; i < HI3660_CLK_STUB_NUM ; i ++ ) { ret = devm_clk_hw_register ( & pdev -> dev, & hi3660_stub_clks [ i ]. hw ) ; if ( ret ) return ret ; ret = devm_ofclk_remove_hw_provider ( & pdev -> dev, hi3660_stub_clks [ i ]. hw ) ; if ( ret ) return ret ; ret = devm_ofclk_remove_hw_provider ( & pdev -> dev, hi3660_stub_clks [ i ]. hw ) ; if ( ret",0
707,"<S2SV_ModStart> case SEEK_SET : <S2SV_ModEnd> if ( position <S2SV_ModStart> > psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; <S2SV_ModEnd> if ( psf <S2SV_ModStart> > psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; <S2SV_ModEnd> if ( psf <S2SV_ModStart> > psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; <S2SV_ModEnd> if ( psf <S2SV_ModStart> > psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; <S2SV_ModEnd> if ( psf <S2SV_ModStart> > psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; <S2SV_ModEnd> if ( psf <S2SV_ModStart> > psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; <S2SV_ModEnd> if ( psf <S2SV_ModStart> > psf -> header ) ) { psf_fseek ( psf, <S2SV_ModEnd> position, SEEK_CUR <S2SV_ModStart> > psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> > psf -> header ) ) { psf_fseek ( psf, position, whence ) ; return ; } ; <S2SV_ModEnd>",0
708,"<S2SV_ModStart> out_mutex ; } ext4_inode_block_unlocked_dio ( inode ) ; ext4_inode_block_unlocked_dio ( inode ) ; inode_dio_wait ( inode ) ; credits = ext4_writepage_trans_blocks ( inode, EXT4_HT_TRUNCATE, credits ) ; handle = ext4_journal_start ( inode, EXT4_HT_TRUNCATE, credits ) ; if ( handle ) { ret = PTR_ERR ( handle ) ; ext4_inode_block_unlocked_dio ( inode ) ; ret = ext4_writepage_trans_blocks ( inode, EXT4_HT_TRUNCATE, credits ) ; if ( ret ) goto out_mutex ; } ret = ext4_truncate_pagecache ( inode, ioffset ) ; out_mutex : if (! ext4_test_inode_flag ( inode, EXT4_INODE_EXTENTS ) ) { ret = - EOPNOTSUPP ; goto out_mutex ; } if (! ext4_test_inode_flag ( inode, EXT4_INODE_",0
709,"<S2SV_ModStart> uint32_t track_size ; if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } <S2SV_ModStart> ; if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } <S2SV_ModStart> ; if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return ( NULL ) ; } if ( midi_size < 4 ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_CORUPT, ""(too <S2SV_blank> short)"", 0 ) ; return (",0
710,"<S2SV_ModStart> ; sk -> sk_sndbuf = min_t ( u32, val * 2, SOCK_MIN_SNDBUF ) ; sk -> sk_write_space ( sk ) ; break ; case SO_RCVBUF : val = min_t ( u32, val, sysctl_rmem_max ) ; set_rcvbuf : sk -> sk_userlocks |= SOCK_RCVBUF_LOCK ; sk -> sk_rcvbuf = max_t ( u32, val * 2, SOCK_MIN_RCVBUF ) ; sk -> sk_rcvbuf = max_t ( u32, val * 2, SOCK_MIN_RCVBUF ) ; break ; case SO_RCVBUF : val = min_t ( u32, val, sysctl_rmem_max ) ; set_rcvbuf : sk -> sk_userlocks |= SOCK_RCVBUF_LOCK ; sk -> sk_rcvbuf = max_t ( u32, val * 2, SOCK_MIN_RCVBUF ) ; sk -> sk_rcvbuf = max_t ( u32, val * 2, SOCK_",0
711,"<S2SV_ModStart> * bh ; struct logicalVolDesc * lvd ; <S2SV_ModStart> TAG_IDENT_LVD ) ; lvd = ( struct logicalVolDesc * ) bh -> b_data ; ret = udf_sb_alloc_partition_maps ( sb, le32_to_cpu ( lvd -> numPartitionMaps ) ) ; if ( ret ) goto out_bh ; for ( i = 0, offset = 0 ; i < sbi -> s_partitions && offset < le32_to_cpu ( lvd -> mapTableLength ) ; i ++, offset += gpm -> partitionMapLength ) { struct udf_part_map * map = & sbi -> s_partmaps [ i ] ; map -> s_volumeseqnum = le16_to_cpu ( gpm1 -> volSeqNum ) ; map -> s_partition_num = le16_to_cpu ( gpm1 -> partitionNum ) ; map -> s_partition_type = UDF_TYPE1_MAP15 ; map -> s_volumeseqnum = le16_to_cpu ( gpm1 -> volSeqNum ) ; map -> s_partition_num = le16_to_cpu ( gp",0
712,"<S2SV_ModStart> long n ; jas_eprintf ( ""warning: <S2SV_blank> ignoring <S2SV_blank> BMP <S2SV_blank> decoder <S2SV_blank> options\\n"" ) ; JAS_DBGLOG ( 1, ( ""BMP <S2SV_blank> header: <S2SV_blank> magic <S2SV_blank> 0x%x; <S2SV_blank> siz <S2SV_blank> %d; <S2SV_blank> res1 <S2SV_blank> %d; <S2SV_blank> res2 <S2SV_blank> %d; <S2SV_blank> off <S2SV_blank> %d\\n"", hdr. magic, hdr. siz, hdr. reserved1, hdr. reserved2, hdr. off ) ) ; if ( bmp_gethdr ( in, & hdr ) ) { jas_eprintf ( ""BMP <S2SV_blank> header: <S2SV_blank> magic <S2SV_blank> 0x%x; <S2SV_blank> siz <S2SV_blank> %d; <S2SV_blank> res1 <S2SV_blank> %d; <S2SV_blank> res2 <S2SV_blank> %d; <S2SV_blank> off <S2SV_blank> %d\\n"", hdr. magic, hdr. siz, hdr. reserved1, hdr. reserved2, hdr. off ) ) ; if ( bmp_getinfo ( in, & info ) ) { jas_eprintf ( ""cannot <S2SV_blank> get <S2SV_blank> info\\n"" ) ; JAS_DBGLOG ( 1, ( ""BMP <S2SV_blank> information: <S2SV_blank> len <S2SV_blank> %d; <S2SV_blank> width <S2SV_blank>",0
713,"<S2SV_ModStart> struct va_format vaf <S2SV_ModEnd> ; va_start ( <S2SV_ModStart> dev ), func <S2SV_ModEnd>, line, <S2SV_ModStart> ( ""[0000:00:00.0]:[%s:%d]: <S2SV_blank> %pV"", func <S2SV_ModEnd>, line,",1
714,<S2SV_ModStart> u4_ofst ) ; if ( ps_cabac -> au1_ctxt_models == NULL ) { return ( IHEVCD_ERROR_T ) IHEVCD_INVALID_PARAMETER ; },0
715,"<S2SV_ModStart> ) ; save_text_from_text_view <S2SV_ModEnd> ( g_tv_comment, <S2SV_ModStart> FILENAME_COMMENT ) ; if ( g_expert_mode ) { int n = select_next_page_no ( pages [ PAGENO_SUMMARY ]. page_no, NULL ) ; log_info ( ""switching <S2SV_blank> to <S2SV_blank> page_no:%d"", n ) ; gtk_notebook_set_current_page ( assistant, n ) ; return ; } if ( g_expert_mode ) { int n = select_next_page_no ( pages [ PAGENO_SUMMARY ]. page_no, NULL ) ; log_info ( ""switching <S2SV_blank> to <S2SV_blank> page_no:%d"", n ) ; gtk_notebook_set_current_page ( assistant, n ) ; return ; } } if ( g_expert_mode ) { int n = select_next_page_no ( pages [ PAGENO_SUMMARY ]. page_no, NULL ) ; log_info ( ""switching <S2SV_blank> to <S2SV_blank> page_no:%d"", n ) ; gtk_notebook_set_current_page ( assistant, n",0
716,"<S2SV_ModStart> media_pad_desc pad ; if ( copy_to_user ( & links -> pads [ p ], & pad, sizeof ( pad ) ) ) return - EFAULT ; <S2SV_ModStart> entity ) continue ; if ( copy_to_user ( & links -> pads [ p ], & pad, sizeof ( pad ) ) ) return - EFAULT ;",0
717,<S2SV_ModStart> off ) ; if ( prev_line_has_list_loosening_effect ) { line -> type = MD_LINE_LIST_LOOSE ; ctx -> last_line_has_list_loosening_effect = 1 ; } else if ( prev_line_has_list_loosening_effect ) { line -> type = MD_LINE_LIST_LOOSE ; ctx -> last_line_has_list_loosening_effect = 1 ; } else if ( prev_line_has_list_loosening_effect ) { line -> type = MD_LINE_LIST_LOOSE ; ctx -> last_line_has_list_loosening_effect = 1 ; } else if ( prev_line_has_list_loosening_effect ) { line -> type = MD_LINE_LIST_LOOSE ; ctx -> last_line_has_list_loosening_effect = 1 ; } else if ( prev_line_has_list_loosening_effect ) { line -> type = MD_LINE_LIST_LOOSE ; ctx -> last_line_has_list_loosening_effect,0
718,"<S2SV_ModStart>, extent ; size_t width, height ; size_t depth ; size_t <S2SV_ModStart>, height ; height = sun_info. height ; depth = sun_info. depth ; <S2SV_ModStart> ReadBlobMSBLong ( image ) ; <S2SV_ModStart> ReadBlobMSBLong ( image ) ; <S2SV_ModStart> ReadBlobMSBLong ( image ) ; <S2SV_ModStart> ReadBlobMSBLong ( image ) ; <S2SV_ModStart> ReadBlobMSBLong ( image ) ; <S2SV_ModStart> ReadBlobMSBLong ( image ) ; <S2SV_ModStart> ReadBlobMSBLong ( image ) ; <S2SV_ModStart> ReadBlobMSBLong ( image ) ; <S2SV_ModStart> ReadBlobMSBLong ( image ) ; <S2SV_ModStart> ReadBlobMSBLong ( image ) ; <S2SV_ModStart> ReadBlobMSBLong ( image ) ; <S2SV_ModStart> ReadBlobMSBLong ( image ) ; <S2SV_ModStart> ReadBlobMSBLong ( image ) ; <S2SV_ModStart> ReadBlobMSBLong ( image ) ; <S2SV_ModStart> ReadBlobMSBLong ( image ) ; <S2SV_ModStart> ReadBlobMSBLong ( image ) ; <S2SV_ModStart> ReadBlobMSBLong ( image ) ; <S2SV_ModStart> ReadBlobMSBLong ( image ) ; <S2SV_ModStart> ReadBlobMSBLong ( image ) ; <S2SV_ModStart> ReadBlobMSBLong ( image ) ; <S2SV_ModStart> ReadBlobMSBLong ( image ) ; <S2SV_ModStart> ReadBlobMSB",0
719,"<S2SV_ModStart> * client, HDB <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
720,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image, exception ) ; if ( status ==",0
721,<S2SV_ModStart> -> loc_addr ; <S2SV_ModEnd> ireq -> opt <S2SV_ModStart> ireq -> opt ; newinet -> mc_index = inet_iif ( skb ) ; newinet -> mc_ttl = ip_hdr ( skb ) -> ttl ; newinet -> mc_index = inet_iif ( skb ) ; newinet -> mc_ttl = ip_hdr ( skb ) -> ttl ; newinet -> inet_id = jiffies ;,0
722,<S2SV_ModStart> struct xmlparser parser ; data -> portListing = NULL ; data -> portListingLength = 0 ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. xmlend = buffer ; parser. xmlstart = bufsize ; parser. xmlsize = bufsize ; parser. data = data ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. xmlstart = buffer ; parser. xmlsize = bufsize ; parser. xmlend = buffer ; parser. xmlendeltfunc = NameValueParserEndElt ; parser. datafunc = NameValueParserGetData ; parser. attfunc = 0 ;,0
723,"<S2SV_ModStart>!= CHECKSUM_COMPLETE ) { __wsum csum = 0 ; <S2SV_ModStart>, csum_partial ( skb_transport_header ( skb ) + tlen, offset, 0 ) ) ; csum = csum_sub ( csum, csum_partial ( skb_transport_header ( skb ) + tlen, offset, 0 ) ) ; put_cmsg ( msg, SOL_IP, IP_CHECKSUM, sizeof ( __wsum ), & csum ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
724,"<S2SV_ModStart> pfn ) ; r = - EINVAL ; goto unmap_pages ; } r = kvm_iommu_put_pages ( kvm, slot -> npages ) ; if ( r ) { printk ( KERN_ERR ""kvm_iommu_map_address:"" ""iommu <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> map <S2SV_blank> pfn=%llx\\n"", pfn ) ; r = - EINVAL ; goto unmap_pages ; } gfn += page_size >> PAGE_SHIFT ; } r = kvm_iommu_map ( domain, gfn_to_gpa ( gfn ), page_size, flags ) ; if ( r ) { printk ( KERN_ERR ""kvm_iommu_map_address:"" ""iommu <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> map <S2SV_blank> pfn=%llx\\n"", pfn ) ; r = - EINVAL ; goto unmap_pages ; } <S2SV_ModStart> unmap_pages : if ( r ) { printk ( KERN_ERR ""kvm_iommu_map_address:"" ""iommu <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> map <S2SV_blank> pfn=%llx\\n"",",0
725,"<S2SV_ModStart> = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00",0
726,<S2SV_ModStart> event ) { <S2SV_ModEnd> struct task_struct *,0
727,<S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 2 <S2SV_ModStart> ] << 8 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 3 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer [ 1 <S2SV_ModStart> ] << 16 ; value |= ( unsigned int ) <S2SV_ModEnd> buffer,0
728,"<S2SV_ModStart> free_nid * i = f2fs_kmem_cache_alloc ( free_nid_slab, GFP_NOFS ) <S2SV_ModEnd> ; if ( <S2SV_ModStart> return false ; <S2SV_ModEnd> i = f2fs_kmem_cache_alloc <S2SV_ModStart> GFP_NOFS ) ; i -> nid = nid ; i -> state = NID_NEW ; if ( radix_tree_preload ( GFP_NOFS ) ) { spin_lock ( & nm_i -> nid_list_lock ) ; err = __insert_nid_to_list ( sbi, i, FREE_NID_LIST, true ) ; if ( err ) { kmem_cache_free ( free_nid_slab, i ) ; return true ; } spin_unlock ( & nm_i -> nid_list_lock ) ; err = __insert_nid_to_list ( sbi, i, FREE_NID_LIST, true ) ; if ( err ) { kmem_cache_free ( free_nid_slab, i, FREE_NID_LIST, true ) ; spin_unlock ( & nm_i -> nid_list_lock ) ; err =",0
729,<S2SV_ModStart> -> post_proc_flag = ( ctx -> dbg_color_ref_frame_flag? VP9D_DEBUG_CLR_FRM_REF_BLKS : 0 ) | ( ctx -> dbg_color_mb_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) | ( ctx -> dbg_color_b_modes_flag? VP9D_DEBUG_CLR_BLK_MODES : 0 ) ; flags -> deblocking_level = ctx -> postproc_cfg. deblocking_level ; flags -> noise_level = ctx -> postproc_cfg. noise_level ; flags -> display_ref_frame_flag = ctx -> dbg_color_ref_frame_flag ; flags -> display_mb_modes_flag = ctx -> dbg_color_mb_modes_flag ; flags -> display_b_modes_flag = ctx -> dbg_color_b_modes_flag ; flags -> display_mv_flag = ctx -> dbg_display_mv_flag ; flags ->,0
730,"<S2SV_ModStart> 0 ) ) { netdev_err <S2SV_ModEnd> ( vif -> <S2SV_ModStart> dev, ""Missing <S2SV_blank> extra <S2SV_blank> info\\n"" ) ; return - EBADR ; } memcpy ( & extra, RING_GET_REQUEST ( & vif -> tx, cons ), sizeof ( extra ) ) ; if ( unlikely ( extra. type >= XEN_NETIF_EXTRA_TYPE_MAX ) ) { netdev_err ( vif -> dev, ""Invalid <S2SV_blank> extra <S2SV_blank> type: <S2SV_blank> %d\\n"", extra. type ) ; return - EINVAL ; } memcpy ( & extras [ extra. type - 1 ], & extras [ extra. type - 1 ], sizeof ( extras [ extra. type - 1 ] ) ) ; vif -> tx. req_cons = ++ cons ; } else if ( unlikely ( extra. type >= XEN_NETIF_EXTRA_TYPE_MAX ) ) { netdev_err ( vif -> dev, ""Invalid <S2SV_blank> extra <S2SV_blank> type: <S2SV_blank> %d\\n"", extra. type ) ; return - EINVAL ; } memcpy ( & extras [ extra. type - 1 ], & extras [ extra. type - 1 ]",0
731,<S2SV_ModStart> ) ) ; hdr -> sadb_msg_satype = SADB_SATYPE_UNSPEC ; hdr -> sadb_msg_satype_len = ( sizeof ( struct sadb_msg ) / sizeof ( uint64_t ) ) ; hdr -> sadb_msg_satype_len = ( sizeof ( struct sadb_msg ) / sizeof ( uint64_t ) ) ; hdr -> sadb_msg_satype_len = ( sizeof ( struct sadb_msg ) / sizeof ( uint64_t ) ) ; hdr -> sadb_msg_satype = SADB_SATYPE_UNSPEC ; hdr -> sadb_msg_errno = ( uint8_t ) 0 ; hdr -> sadb_msg_errno = ( uint8_t ) 0 ; hdr -> sadb_msg_errno = ( uint8_t ) 0 ; hdr -> sadb_msg_errno = ( uint8_t ) 0 ; hdr -> sadb_msg_errno = ( uint8_t ) 0 ; hdr -> sadb_msg_satype = SADB_SAT,0
732,<S2SV_ModStart> r1. event = event ; r1. tstamp = * tstamp ; r1. val = resolution ; if ( tu -> filter & ( 1 << event ) ) { if ( tu -> filter & ( 1 << event ) ) { if ( tu -> filter & ( 1 << event ) ) { if ( tu -> filter & ( 1 << event ) ) { if ( tu -> filter & ( 1 << event ) ) { if ( tu -> filter & ( 1 << event ) ) { if ( tu -> filter & ( 1 << event ) ) { if ( tu -> filter & ( 1 << event ) ) { if ( tu -> filter & ( 1 << event ) ) { if ( tu -> filter & ( 1 << event ) ) { if ( tu -> filter & ( 1 << event ) ) { if ( tu -> filter & ( 1 << event ) ) { if ( tu -> filter & ( 1 << event ) ) { if ( tu -> filter & ( 1 << event ) ) { if ( tu -> filter & ( 1 << event ) ) { if ( tu -> filter & ( 1 << event ) ) { if ( tu -> filter & ( 1 << event ) ) { if ( tu -> filter & ( 1,0
733,"<S2SV_ModStart> - 1 ; luaL_checkstack ( L, 1, ""too <S2SV_blank> many <S2SV_blank> results"" ) ; switch ( * fmt ) { case 'b' : case 'B' : case 'H' : case 'L' : case 'T' : case 'I' : { int issigned = islower ( opt ) ; lua_Number res = getinteger ( data + pos, h. endian, issigned, size ) ; luaL_pushnumber ( L, res ) ; break ; } case 'x' : { float f ; memcpy ( & f, data + pos, size ) ; correctbytes ( ( char * ) & f, sizeof ( f ), h. endian ) ; lua_pushnumber ( L, f ) ; break ; } case 'f' : { float f ; memcpy ( & f, data + pos, size ) ; correctbytes ( ( char * ) & d, h. endian ) ; lua_pushnumber ( L, d ) ; break ; } case 'd' : { double d ; memcpy ( & d, data + pos, size ) ; correctbytes ( ( char * ) & d, h. endian ) ; lua_push",0
734,"<S2SV_ModStart> = 0 ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6 ) ) ; goto trunc ; } if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6 ) ) ; goto trunc ; } ND_TCHECK2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ; if (! ND_TTEST2 ( * tptr, sizeof ( struct olsr_msg4 ) ) ) { ND_PRINT ( ( ndo, ""OLSRv%i, <S2SV_blank> seq <S2SV_blank> 0x%04x, <S2SV_blank> length <S2SV_blank> %u"", ( is_ipv6 == 0 )? 4 : 6",0
735,"<S2SV_ModStart> ; int n ; oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, body -> unit_size ) ; data += body -> unit_size ; } break ; case OZ_DATA_F_MULTIPLE : { struct oz_multiple_fixed * body = ( struct oz_multiple_fixed * ) data_hdr ; int data_len = len - sizeof ( struct oz_multiple_fixed ) + 1 ; int n ; if (! body -> unit_size ) break ; n = ( len - sizeof ( struct oz_multiple_fixed ) + 1 ) / body -> unit_size ; while ( n -- ) { oz_hcd_data_ind ( usb_ctx -> hport, body -> endpoint, data, body -> unit_size ) ; data += body -> unit_size ; } break ; case OZ_DATA_F_ISOC_FIXED : { struct oz_isoc_fixed * body = ( struct oz_isoc_fixed * ) data_hdr ; u8 * data = body -> data ; int count ; int i ; if (! unit_size ) break ; count =",0
736,"<S2SV_ModStart> end_time ) { <S2SV_ModEnd> struct vpx_usec_timer timer <S2SV_ModStart> timer ) ; assert ( cpi -> active_map_enabled ) ; <S2SV_ModStart> timer ) ; assert ( cpi -> oxcf. lag_in_frames < 2 ) ; dealloc_raw_frame_buffers ( cpi ) ; if ( sd -> y_width!= cpi -> oxcf. Width || sd -> y_height!= cpi -> oxcf. Height ) { assert ( cpi -> active_map_enabled ) ; dealloc_raw_frame_buffers ( cpi ) ; } if ( vp8_lookahead_push ( cpi -> lookahead, sd, time_stamp, end_time, frame_flags, cpi -> active_map_enabled? cpi -> active_map : NULL ) ) res = - 1 ; vpx_usec_timer_mark ( & timer ) ; cpi -> time_receive_data += vpx_usec_timer_elapsed ( & timer ) ; cpi -> time_receive_data += vpx_usec_timer_elapsed ( & timer ) ; cpi -> time_receive_data += vpx_usec_",0
737,"<S2SV_ModStart> { fprintf ( stderr <S2SV_ModEnd>, ""Error: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) <S2SV_ModStart> ) ; int rv = copy_file ( src, dest ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } _exit ( 0 ) ; } drop_privs ( 0 ) ; rv = copy_file ( src, dest ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } waitpid ( child, NULL, 0 ) ; if ( chown ( dest, getuid ( ), getgid ( ) ) == - 1 ) errExit ( ""fchown"" ) ; if ( chmod ( dest, 0600 ) == - 1 ) errExit ( ""chmod""",0
738,<S2SV_ModStart> IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IMAP_CMD_CONTINUE ) { if ( imap_cmd_step ( idata )!= IM,0
739,<S2SV_ModStart> return res ; res = sas_notify_lldd_dev_found_nolock ( dev ) ; if ( res ) return res ; res = sas_discover_event <S2SV_ModEnd> ( dev -> <S2SV_ModStart> DISCE_PROBE ) ; if ( res ) return res ; res = sas_notify_lldd_dev_found_nolock ( dev ) ; if ( res ) return res ; res = sas_notify_lldd_dev_found_nolock ( dev ) ; if ( res ) return res ; res = sas_notify_lldd_dev_found_nolock ( dev ) ; if ( res ) return res ; res = sas_notify_lldd_dev_found_nolock ( dev ) ; if ( res ) return res ; res = sas_notify_lldd_dev_found_nolock ( dev ) ; if ( res ) return res ; res = sas_notify_lldd_dev_found_nolock ( dev ) ; return res ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
740,"<S2SV_ModStart>. p_ext > EXT_MAX_EXTENT ( path [ depth ]. p_hdr ) ) { EXT4_ERROR_INODE ( inode, ""p_ext <S2SV_blank> > <S2SV_blank> EXT_MAX_EXTENT!"" ) ; return - EFSCORRUPTED ; } <S2SV_ModStart> ]. p_hdr ) ) { EXT4_ERROR_INODE ( inode, ""p_hdr <S2SV_blank> > <S2SV_blank> EXT_MAX_EXTENT!"" ) ; return - EFSCORRUPTED ; } if ( path [ depth ]. p_ext!= EXT_MAX_EXTENT ( path [ depth ]. p_hdr ) ) { EXT4_ERROR_INODE ( inode, ""p_ext <S2SV_blank> > <S2SV_blank> EXT_MAX_EXTENT!"" ) ; return - EFSCORRUPTED ; } if ( path [ depth ]. p_ext!= EXT_MAX_EXTENT ( path [ depth ]. p_hdr ) ) { EXT4_ERROR_INODE ( inode, ""p_ext <S2SV_blank> > <S2SV_blank> EXT_MAX_EXTENT(path [ depth ]. p_hdr ) ) { EXT4_ERROR_INODE ( inode, ""p_ext <S2SV_blank> > <S2SV_blank> EXT_MAX",0
741,<S2SV_ModStart> ; sfb = ixheaacd_start_subband2kL_tbl [ ptr_hbe_txposer -> start_band ] ; sfb = ixheaacd_start_subband2kL_tbl [ ptr_hbe_txposer -> end_band ] ; sfb = ixheaacd_start_subband2kL_tbl [ ptr_hbe_txposer -> start_band ] ; sfb = ixheaacd_start_subband2kL_tbl [ ptr_hbe_txposer -> start_band ] ; sfb = ixheaacd_start_subband2kL_tbl [ ptr_hbe_txposer -> end_band ] ; sfb = ixheaacd_start_subband2kL_tbl [ ptr_hbe_txposer -> end_band ] ; sfb = ixheaacd_start_subband2kL_tbl [ ptr_hbe_txposer -> end_band ] ; sfb = ixheaacd_start_subband2kL_tbl [ ptr_hbe_txposer -> end,0
742,"<S2SV_ModStart> [ 2 ] ; image_w = get_ushort ( & tga [ 5 ] ) ; image_h = get_ushort ( & tga [ 7 ] ) ; pixel_depth = get_ushort ( & tga [ 12 ] ) ; image_desc = tga [ 13 ] ; * bits_per_pixel = ( unsigned int ) image_w ; * width = ( unsigned int ) image_w ; * height = ( unsigned int ) image_h ; if ( id_len ) { unsigned char * id = ( unsigned char * ) malloc ( id_len ) ; if (! id ) { fprintf ( stderr, ""tga_readheader: <S2SV_blank> memory <S2SV_blank> out\\n"" ) ; return 0 ; } id = ( unsigned char * ) malloc ( id_len ) ; if (! id ) { fprintf ( stderr, ""\\nError: <S2SV_blank> fread <S2SV_blank> return <S2SV_blank> a <S2SV_blank> number <S2SV_blank> of <S2SV_blank> elements <S2SV_blank> different <S2SV_blank> from <S2SV_blank> the <S2SV_blank> expected.\\n"" ) ; return 0 ; } id = ( unsigned char * ) malloc ( id_len ) ; if (! id ) { fprintf ( stderr, ""tga_readheader: <S2SV_blank>",0
743,<S2SV_ModStart> struct rdma_ucm_cmd_hdr hdr ; <S2SV_ModStart> ssize_t ret ; if (! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ) &&! capable ( CAP_SYS_ADMIN ),0
744,"<S2SV_ModStart> tp ) { struct timespec local_time ; <S2SV_ModStart> CPUCLOCK_SCHED ) { local_time = <S2SV_ModEnd> div_long_long_rem ( cpu <S2SV_ModStart> tp ) ; local_time = <S2SV_ModEnd> div_long_long_rem ( cpu <S2SV_ModStart> tp ) ; local_time -> tv_sec = div_long_long_rem ( local_time -> tv_sec, NSEC_PER_SEC, & tp -> tv_nsec ) ; local_time -> tv_sec = div_long_long_rem ( local_time -> tv_sec, NSEC_PER_SEC, & tp -> tv_nsec ) ; } else { cputime_to_timespec ( cpu. <S2SV_ModEnd> cpu, tp <S2SV_ModStart> tp ) ; } local_time -> tv_sec = div_long_long_rem ( local_time -> tv_sec, NSEC_PER_SEC, & tp -> tv_nsec ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
745,<S2SV_ModStart> tif_dir ; uint32 <S2SV_ModEnd> nstrips ; if,0
746,"<S2SV_ModStart> lua_module ) ; <S2SV_ModEnd> int result = <S2SV_ModStart> r ) ; luaL_checkstack ( L, prov_spec -> args -> nelts ) ; luaL_checkstack ( L, prov_spec -> args -> nelts ) ; if (! lua_checkstack ( L, prov_spec -> args -> nelts ) ) { ap_log_rerror ( APLOG_MARK, APLOG_ERR, 0, r, APLOGNO ( 02314 ) ""Unable <S2SV_blank> to <S2SV_blank> compile <S2SV_blank> VM <S2SV_blank> for <S2SV_blank> authz <S2SV_blank> provider <S2SV_blank> %s"", prov_spec -> name ) ; ap_lua_release_state ( L, spec, r ) ; return AUTHZ_GENERAL_ERROR ; } luaL_checkstack ( L, prov_spec -> args -> nelts ) ; if (! lua_checkstack ( L, prov_spec -> args -> nelts ) ) { ap_log_rerror ( APLOG_MARK, APLOG_ERR, 0, r, APLOGNO ( 02314 ) ""Unable <S2SV_blank> to <S2SV_blank> compile <S2SV_blank> VM <S2SV_blank> for <S2SV_blank> authz <S2SV_blank> provider <S2SV_blank> %s"", prov_spec -> name ) ;",0
747,"<S2SV_ModStart> * prev ; unsigned long addr <S2SV_ModEnd> ; error = <S2SV_ModStart> address ) ; if ( error ) return error ; prev = vma -> vm_prev ; if ( prev &&! ( vma -> vm_flags & VM_GROWSDOWN ) && ( vma -> vm_flags & VM_WRITE | VM_READ | VM_EXEC ) ) { if ( address - prev -> vm_start < stack_guard_gap ) return - ENOMEM ; address -= prev -> vm_start ; } error = - ENOMEM ; if ( address < vma -> vm_start ) { size = ( vma -> vm_start - address ) >> PAGE_SHIFT ; grow = ( vma -> vm_start - address ) >> PAGE_SHIFT ; error = - ENOMEM ; if ( grow <= vma -> vm_pgoff ) { error = acct_stack_growth ( vma, size, grow ) ; if (! error ) { spin_lock ( & mm -> page_table_lock ) ; mm -> locked_vm += grow ; vm_stat_account ( mm, vma -> vm_flags, grow ) ; anon_vma_interval_tree_pre_update_vma (",0
748,"<S2SV_ModStart> { umode_t mode ; error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & mode <S2SV_ModStart> & mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> error = xfs_set_mode",0
749,"<S2SV_ModStart> int optional, <S2SV_ModEnd> struct statvfs sb <S2SV_ModStart> # endif if ( mount ( fsname, target, fstype, mountflags & ~ MS_REMOUNT, data ) < 0 ) { SYSERROR ( ""failed <S2SV_blank> to <S2SV_blank> mount <S2SV_blank> \'%s\' <S2SV_blank> on <S2SV_blank> \'%s\' <S2SV_blank> (optional): <S2SV_blank> %s"", fsname, target, strerror ( errno ) ) ; return - 1 ; } if ( mount ( fsname, target, fstype, mountflags & ~ MS_BIND ) ) { SYSERROR ( ""failed <S2SV_blank> to <S2SV_blank> mount <S2SV_blank> \'%s\' <S2SV_blank> on <S2SV_blank> \'%s\' <S2SV_blank> (optional): <S2SV_blank> %s"", fsname, target, strerror ( errno ) ) ; return - 1 ; } if ( mount ( fsname, target, fstype ) < 0 ) { SYSERROR ( ""failed <S2SV_blank> to <S2SV_blank> mount <S2SV_blank> \'%s\' <S2SV_blank> on <S2SV_blank> \'%s\' <S2SV_blank> (optional): <S2SV_blank> %s"", fsname, target, strerror ( errno ) ) ; return - 1 ; } if ( mount ( fsname, target, fstype ) < 0 ) { SYSERROR ( ""failed <S2SV_blank> to <S2SV_blank> mount <S2SV_blank> \'%s\' <S2SV_blank>",0
750,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> rows, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> rows, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
751,<S2SV_ModStart> -> it_overrun = 0 <S2SV_ModEnd> ; ++ timr <S2SV_ModStart> -> it_requeue_pending ; <S2SV_ModEnd> } unlock_timer (,0
752,"<S2SV_ModStart> ; if ( proto_end < 0 || proto_end > url ) return - 1 ; cp = proto_end + 3 ; at = strchr ( cp, '@' ) ; colon = strchrnul ( cp, ':' ) ; slash = strchrnul ( cp, '/' ) ; if (! at || slash <= at ) { host = cp ; } else if (! colon || at <= colon ) { host = cp ; } else if ( at <= at ) { host = at + 1 ; } else { c -> username = url_decode_mem ( cp, at - cp ) ; c -> password = url_decode_mem ( cp, at - cp ) ; c -> host = url_decode_mem ( host, slash - host ) ; c -> path = url_decode ( slash ) ; if ( check_url_component ( url, quiet, ""path"", c -> path ) < 0 || check_url_component ( url, quiet, ""protocol"", c -> protocol ) < 0 || check_url_component ( url, quiet, ""host"", c -> host ) < 0 || check_url_component ( url, quiet, ""path"", c -> path",0
753,"<S2SV_ModStart> static_key * done_key, bool get_random_bytes <S2SV_ModStart> flags ) ; get_random_bytes ( buf, nbytes ) ; * done = true ; spin_unlock_irqrestore ( & lock, flags ) ; if ( get_random_bytes ( buf, nbytes )!= nbytes ) { spin_unlock_irqrestore ( & lock, flags ) ; return false ; } get_random_bytes ( buf, nbytes ) ; * done = true ; spin_unlock_irqrestore ( & lock, flags ) ; __net_random_once_disable_jump ( done_key ) ; if ( get_random_bytes ( buf, nbytes )!= nbytes ) { spin_unlock_irqrestore ( & lock, flags ) ; return false ; } get_random_bytes ( buf, nbytes ) ; * done = true ; spin_unlock_irqrestore ( & lock, flags ) ; get_random_bytes ( buf, nbytes ) ; * done = true ; spin_unlock_irqrestore ( & lock, flags ) ; get_random_bytes ( buf, nbytes ) ; * done = true ; spin_unlock_irqrestore ( & lock, flags ) ; return",0
754,"<S2SV_ModStart> -> actual ; struct usb_ep * ep = io_data -> ep ; <S2SV_ModStart> -> ffs_eventfd && <S2SV_ModEnd>! ( io_data <S2SV_ModStart> 1 ) ; usb_ep_free_request ( ep, io_data -> req ) ; io_data -> kiocb -> private = NULL ; if ( io_data -> read ) kfree ( io_data -> to_free ) ; if ( io_data -> read ) kfree ( io_data -> buf ) ; if ( iov_iter_count ( & io_data -> data ) ) ret = - EFAULT ; if ( io_data -> ffs -> ffs_eventfd &&! ( io_data -> kiocb -> ki_flags & IOCB_EVENTFD ) ) eventfd_signal ( io_data -> ffs -> ffs_eventfd, 1 ) ; if ( io_data -> ffs -> ffs_eventfd &&! ( io_data -> kiocb -> ki_flags & IOCB_EVENTFD ) ) eventfd_signal ( io_data -> ffs -> ffs_eventfd, 1 ) ; if ( io_data -> ffs -> ffs_eventfd &&",0
755,"<S2SV_ModStart> &&! rt -> rt_flags <S2SV_ModEnd> &&! skb_sec_path <S2SV_ModStart> &&! rt -> rt_flags <S2SV_ModEnd> &&! skb_sec_path <S2SV_ModStart> &&! skb_sec_path ( skb ) ) ip_rt_send_redirect ( skb ) ; skb -> priority = iph -> tos ; return NF_HOOK ( NFPROTO_IPV4, NF_INET_FORWARD, skb ) ; too_many_hops : if ( ip_hdr ( skb ) -> ttl <= 1 ) { IP_INC_STATS ( dev_net ( rt -> dst. dev ), IPSTATS_MIB_FRAGFAILS ) ; icmp_send ( skb, ICMP_DEST_UNREACH, ICMP_FRAGFAILS ) ; icmp_send ( skb, ICMP_DEST_UNREACH, ICMP_FRAGFAILS ) ; icmp_send ( skb, ICMP_DEST_UNREACH, ICMP_FRAGFAILS ) ; icmp_send ( skb, ICMP_DEST_UNREACH, ICMP",0
756,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
757,"<S2SV_ModStart> prep ) { <S2SV_ModEnd> struct trusted_key_payload * <S2SV_ModStart> trusted_key_payload * new_p ; struct trusted_key_options * new_o ; size_t datalen = prep -> datalen ; char * datablob = kmalloc ( datalen + 1, GFP_KERNEL ) ; if (! datablob ) return - ENOMEM ; datablob [ datalen ] = '\\0' ; ret = datablob_parse ( datablob, new_p, new_o ) ; if ( ret!= Opt_update ) { ret = - EINVAL ; kfree ( new_p ) ; goto out ; } new_p -> migratable = p -> migratable ; new_p -> key_len = p -> key_len ; memcpy ( new_p -> key, p -> key, p -> key_len ) ; dump_payload ( p ) ; dump_payload ( new_p ) ; dump_payload ( new_o ) ; ret = key_seal ( new_p, new_o ) ; if ( ret < 0 ) { pr_info ( ""trusted_key: <S2SV_blank> key_seal <S2SV_blank> failed <S2SV_blank> (%d)\\n"",",0
758,<S2SV_ModStart> } v |= <S2SV_ModEnd> ( c << <S2SV_ModStart> << 24 ) <S2SV_ModEnd> ; if (,0
759,"<S2SV_ModStart> int lci_o ; if ( ( skb = skb_dequeue ( & loopback_queue ) ) == NULL ) break ; dest = ( rose_address * ) ( skb -> data + 4 ) ; lci_o = ROSE_DEFAULT_MAXVC + 1 - lci_i ; skb_reset_transport_header ( skb ) ; sk = rose_find_socket ( lci_o, rose_loopback_neigh ) ; if ( sk ) { if ( rose_process_rx_frame ( sk, skb ) == 0 ) kfree_skb ( skb ) ; continue ; } if ( frametype == ROSE_CALL_REQUEST ) { if ( ( dev = rose_dev_get ( dest ) )!= NULL ) { if ( rose_rx_call_request ( skb, dev, rose_loopback_neigh, lci_o ) == 0 ) kfree_skb ( skb ) ; } else { kfree_skb ( skb ) ; } }",0
760,"<S2SV_ModStart> goto out_free ; memslot = id_to_memslot ( kvm -> memslots, mem -> slot ) ; old_memslots = id_to_memslot ( kvm -> memslots, mem -> slot ) ; if ( old_memslots && old_memslots -> id >= KVM_MEMORY_SLOTS_NUM && old_memslots -> id >= KVM_MEMORY_SLOTS_NUM && old_memslots -> id >= KVM_MEMORY_SLOTS_NUM && old_memslots -> id >= KVM_MEMORY_SLOTS_NUM && old_memslots -> id >= KVM_MEMORY_SLOTS_NUM && old_memslots -> id >= KVM_MEMORY_SLOTS_NUM && old_memslots -> id >= KVM_MEMORY_SLOTS_NUM && old_memslots -> id >= KVM_MEMORY_SLOTS_NUM && old_memslots -> id >= KVM_MEMORY_SLOTS_NUM && old_memslots -> id >= KVM_MEMORY_SLOTS_NUM && old_memslots -> id >= KVM_MEMORY_SLOTS_",0
761,<S2SV_ModStart>!= NULL ) { newdst = indev -> ifa_list ; if (! newdst ) return NF_DROP ; } <S2SV_ModStart>!= NULL ) { newdst = indev -> ifa_list ; ifa = indev -> ifa_list ; newrange. flags = mr -> range [ 0 ]. flags | NF_NAT_RANGE_MAP_IPS ; newrange. min_proto = mr -> range [ 0 ]. min ; newrange. max_proto = mr -> range [ 0 ]. max ; rcu_read_unlock ( ) ; indev = NULL ; if ( indev!= NULL ) { newdst = indev -> ifa_list ; ifa = indev -> ifa_list ; newrange. flags = mr -> range [ 0 ]. flags | NF_NAT_RANGE_MAP_IPS ; newrange. max_proto = mr -> range [ 0 ]. min ; newrange. min_proto = mr -> range [ 0 ]. min ; newrange. max_proto = mr -> range [ 0 ]. max ; },0
762,"<S2SV_ModStart> fdt_off_dt_struct ( fdt ) ; <S2SV_ModStart> nextoffset ; switch ( tag ) { case FDT_END_NODE : depth = - 1 ; if ( depth == FDT_MAX_DEPTH ) return - FDT_ERR_BADSTRUCTURE ; <S2SV_ModStart> FDT_ERR_BADSTRUCTURE ; name = fdt_get_name ( fdt, offset, & len ) ; if (! name ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; <S2SV_ModStart> name = fdt_get_name ( fdt, offset, & len ) ; if (! name ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE ; if ( end - path + 2 + len >= path_len ) return - FDT_ERR_NOSPACE",0
763,"<S2SV_ModStart> ; if (! DoReadFile ( infile, & dff_chunk_header, sizeof ( DFFChunkHeader ), & bcount ) || bcount!= sizeof ( DFFChunkHeader ) - 4 ) || strncmp ( dff_chunk_header. formType, ""DSD <S2SV_blank> "", 4 ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if (! DoReadFile ( infile, & dff_chunk_header, sizeof ( DFFChunkHeader ), & bcount ) || bcount!= sizeof ( DFFChunkHeader ) - 4 ) || strncmp ( dff_chunk_header. formType, ""DSD <S2SV_blank> "", 4 ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if (! DoReadFile ( infile, & dff_chunk_header, sizeof ( DFFChunkHeader ), & bcount ) || bcount!= sizeof ( DFFChunkHeader ) - 4",0
764,"<S2SV_ModStart> ; if (! PKCS7_is_detached ( p7 ) && data_body == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_SIGNED_DATA_TYPE ) ; goto err ; } <S2SV_ModStart> ; if (! PKCS7_is_detached ( p7 ) && data_body == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_SIGNED_DATA_TYPE ) ; goto err ; } <S2SV_ModStart> ; if (! PKCS7_is_detached ( p7 ) && data_body == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_SIGNED_DATA_TYPE ) ; goto err ; } if (! PKCS7_is_detached ( p7 ) && data_body == NULL ) { PKCS7err ( PKCS7_F_PKCS7_DATADECODE, PKCS7_R_INVALID_SIGNED_DATA_TYPE ) ; goto err ; } if (! PKCS7_is_detached ( p7 ) && data_body == NULL ) { PKCS7",0
765,"<S2SV_ModStart> ) ) { redisLog ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> keys <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lld <S2SV_blank> slots <S2SV_blank> HT."", j, used, vkeys, size ) ; redisLog ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> keys <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lld <S2SV_blank> slots <S2SV_blank> HT."", j, used, vkeys, size ) ; if ( loops % 50 ) { redisLog ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> keys <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lld <S2SV_blank> slots <S2SV_blank> HT."", j, used, size ) ; redisLog ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> keys <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lld <S2SV_blank> slots <S2SV_blank> HT."", j, used, vkeys, size ) ; redisLog ( REDIS_VERBOSE, ""DB <S2SV_blank> %d: <S2SV_blank> %lld <S2SV_blank> keys <S2SV_blank> (%lld <S2SV_blank> volatile) <S2SV_blank> in <S2SV_blank> %lld <S2SV_blank> slots <S2SV_blank> HT."", j, used, vkeys",0
766,"<S2SV_ModStart> } if ( ( options -> flags & UV_PROCESS_SETUID ) && setuid ( options -> uid ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setuid()"" ) ; _exit ( 127 ) ; } if ( ( options -> flags & UV_PROCESS_SETGID ) && setgid ( options -> gid ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setgid()"" ) ; _exit ( 127 ) ; } if ( ( options -> flags & UV_PROCESS_SETUID ) && setuid ( options -> uid ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setuid()"" ) ; _exit ( 127 ) ; } if ( ( options -> flags & UV_PROCESS_SETGID ) && setgid ( options -> gid ) ) { uv__write_int ( error_fd, - errno ) ; perror ( ""setgid()"" ) ; _exit ( 127 ) ; } if ( ( options -> flags & UV_PROCESS_SETUID ) && setuid ( options -> uid ) ) { uv__write_int ( error",0
767,"<S2SV_ModStart> priv ; int ret = 0, wo = 0 ; <S2SV_ModStart> EOPNOTSUPP ; } if ( wbuf == NULL || wlen == 0 ) { warn ( ""i2c <S2SV_blank> wr: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", wlen ) ; return - EOPNOTSUPP ; } if ( rbuf == NULL || rlen == 0 ) { warn ( ""i2c <S2SV_blank> wr: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", wlen ) ; return - EOPNOTSUPP ; } if ( rbuf == NULL || rlen == 0 ) { warn ( ""i2c <S2SV_blank> wr: <S2SV_blank> len=%d <S2SV_blank> is <S2SV_blank> too <S2SV_blank> big!\\n"", wlen ) ; return - EOPNOTSUPP ; } if ( wo ) ret = dvb_usb_generic_write ( d, st -> data, 1 + wlen, rbuf, rlen, 0 ) ; else ret = dvb_usb_generic_rw ( d, st -> data, 1 + wlen, rbuf, rlen, 0 ) ; mutex_unlock ( & d -> data_mutex ) ;",0
768,"<S2SV_ModStart> priv -> protocol_timeout = g_timeout_add_seconds ( 5, ( GSourceFunc ) _client_protocol_timeout, client ) ; set_description ( client ) ; g_debug ( ""GsmXSMPClient: <S2SV_blank> New <S2SV_blank> client <S2SV_blank> \'%s\'"", client -> priv -> description ) ; g_debug ( ""GsmXSMPClient: <S2SV_blank> New <S2SV_blank> client <S2SV_blank> \'%s\'"", client -> priv -> description ) ; g_debug ( ""GsmXSMPClient: <S2SV_blank> New <S2SV_blank> client <S2SV_blank> \'%s\'"", client -> priv -> description ) ; g_debug ( ""GsmXSMPClient: <S2SV_blank> New <S2SV_blank> client <S2SV_blank> \'%s\'"", client -> priv -> description ) ; g_debug ( ""GsmXSMPClient: <S2SV_blank> New <S2SV_blank> client <S2SV_blank> \'%s\'"", client -> priv -> description ) ; g_debug ( ""GsmXSMPClient: <S2SV_blank> New <S2SV_blank> client <S2SV_blank> \'%s\'"", client -> priv -> description ) ; g_debug ( ""GsmXSMPClient: <S2SV_blank> New <S2SV_blank> client <S2SV_blank> \'%s\'"", client -> priv -> description ) ; g_debug ( """,0
769,<S2SV_ModStart> - 1 ; if ( book -> dim < vorbis_book_dim ( book ) ) { a [ i ++ ] = 0 ; } else if ( book -> dim > vorbis_book_dim ( book ) ) { a [ i ++ ] = 0 ; } else if ( book -> dim < vorbis_book_dim ( book ) ) { a [ i ++ ] = v [ j ] ; } else if ( book -> dim > vorbis_book_dim ( book ) ) { a [ i ++ ] = 0 ; } else if ( book -> dim < vorbis_dim ( book ) ) { a [ i ++ ] = 0 ; } else if ( book -> dim > vorbis_book_dim ( book ) ) { a [ i ++ ] = 0 ; } else if ( book -> dim < vorbis_book_dim ( book ) ) { a [ i ++ ] = v [ j ] ; } else if ( book -> dim > vorbis_book_dim ( book ) ) { for ( j = 0 ; j < book -> dim ; j ++ ) { a [ i ++ ] = v [ j ] ; } else if ( book,0
770,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> %12.3f <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; printf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c <S2SV_blank> %s\\n"", <S2SV_ModStart> action ) ; printf ( <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
771,"<S2SV_ModStart> new_root_item ) ; if ( pending -> error ) { ret = pending -> error ; goto root_item_alloc_fail ; } dir_item = btrfs_find_dir_item ( path, root -> root_key. objectid, & new_uuid ) ; if (! dir_item ) { ret = btrfs_insert_dir_item ( path, root, new_root_item ) ; if ( ret ) { ret = btrfs_insert_dir_item ( path, root, new_root_item ) ; goto root_item_alloc_fail ; } dir_item = btrfs_find_dir_item ( path, root -> root_key. objectid, & new_uuid ) ; if (! dir_item ) { ret = btrfs_insert_dir_item ( path, root, new_root_item ) ; if ( ret ) { ret = btrfs_insert_dir_item ( path, root, new_root_item ) ; goto root_item_alloc_fail ; } dir_item = btrfs_find_dir_item ( path, root -> root_key. object",0
772,<S2SV_ModStart> fp ) ; spin_lock ( & unix_gc_lock ) ; <S2SV_ModStart> unix_tot_inflight -- ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
773,"<S2SV_ModStart>!= NULL ) { <S2SV_ModEnd> size_t chanmap_size = <S2SV_ModStart> chanmap_size = psf -> sf. <S2SV_ModStart> channels * sizeof ( psf -> channel_map [ 0 ] ) ; if ( chanmap_size > sizeof ( psf -> channel_map [ 0 ] ) ) return SFE_MALLOC_FAILED ; memcpy ( psf -> channel_map, map_info -> channel_map, chanmap_size ) ; if ( ( psf -> channel_map = malloc ( chanmap_size ) ) == NULL ) return SFE_MALLOC_FAILED ; <S2SV_ModStart>!= NULL ) { size_t chanmap_size = psf -> sf. channels * sizeof ( psf -> channel_map [ 0 ] ) ; if ( ( psf -> channel_map = malloc ( chanmap_size ) ) == NULL ) return SFE_MALLOC_FAILED ; memcpy ( psf -> channel_map, map_info -> channel_map, chanmap_size ) ) == NULL ) return SFE_MALLOC_FAILED ; <S2SV_ModStart>!= NULL ) { size_t chanmap_size = psf -> sf. channels * sizeof ( psf -> channel_map [ 0 ]",0
774,"<S2SV_ModStart> check_scale_factors ( other_w, other_h, sf -> x_scale_fp, sf -> y_scale_fp, sf -> x_step_q4, sf -> y_step_q4 ) ) { sf -> x_scale_fp = REF_INVALID_SCALE ; sf -> y_scale_fp = REF_INVALID_SCALE ; return ; } sf -> x_step_q4 = scaled_x ( 16, sf ) ; sf -> y_step_q4 = scaled_y ( 16, sf ) ; sf -> x_step_q4 = scaled_x ( 16, sf ) ; sf -> y_step_q4 = scaled_y ( 16, sf ) ; sf -> x_step_q4 = scaled_x ( 16, sf ) ; sf -> y_step_q4 = scaled_y ( 16, sf ) ; if ( vp9_is_scaled ( sf ) ) { sf -> scale_value_x = unscaled_value ; sf -> scale_value_y = unscaled_value ; } else { sf -> scale_value_x = unscaled_value ; sf -> scale_value_y = uns",0
775,<S2SV_ModStart> ) { int32_t <S2SV_ModEnd> nestsize = ( <S2SV_ModStart> nest_level ] ; if ( size > ms -> buffer_size_longs ) return GPMF_ERROR_BAD_STRUCTURE,0
776,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
777,"<S2SV_ModStart> ip6t_entry ) && ( <S2SV_ModStart> verdict < 0 && unconditional ( & e -> ipv6 ) ) || visited ) { unsigned int oldpos, size ; if ( ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( e -> target. u. user. name, XT",0
778,"<S2SV_ModStart> -> xrefs = safe_calloc <S2SV_ModEnd> ( 1, <S2SV_ModStart> -> n_xrefs ) ; if (! pdf -> xrefs ) { ERR ( ""Failed <S2SV_blank> to <S2SV_blank> locate <S2SV_blank> the <S2SV_blank> startxref <S2SV_blank> token. <S2SV_blank> "" ""This <S2SV_blank> might <S2SV_blank> be <S2SV_blank> a <S2SV_blank> corrupt <S2SV_blank> PDF.\\n"" ) ; return - 1 ; } pos = ftell ( fp ) ; fseek ( fp, pos, SEEK_SET ) ; if ( pos >= sizeof ( buf ) ) { ERR ( ""Failed <S2SV_blank> to <S2SV_blank> locate <S2SV_blank> the <S2SV_blank> startxref <S2SV_blank> token. <S2SV_blank> "" ""This <S2SV_blank> might <S2SV_blank> be <S2SV_blank> a <S2SV_blank> corrupt <S2SV_blank> PDF.\\n"" ) ; return - 1 ; } memset ( buf, 0, pos_count ) ; c = buf ; while ( SAFE_F ( fp, ( x = fgetc ( fp ) )!= 'f' ) ) ) fseek ( fp, pos - ( pos_count ), SEEK_SET ) ; if ( pos_count >= sizeof ( buf ) ) { ERR ( ""Failed <S2SV_blank> to <S2SV_blank> read <S2SV_blank> startxref <S2SV_blank> token. <S2SV_blank> "" ""This <S2SV_blank> might <S2SV_blank> be <S2SV_blank> a <S2SV_blank> corrupt <S2SV_blank> PDF.\\n"" ) ; return",0
779,<S2SV_ModStart>! buf ) || count > OE_SSIZE_MAX <S2SV_ModStart> OE_EINVAL ) ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },1
780,"<S2SV_ModStart> sk ) ; atomic_sub ( sk -> sk_omem_alloc, & sk -> sk_omem_alloc ) ; <S2SV_ModStart> NULL ) ; atomic_sub ( sk -> sk_omem_alloc, & sk -> sk_omem_alloc ) ; <S2SV_ModStart> opt ) ; atomic_sub ( sk -> sk_omem_alloc, & sk -> sk_omem_alloc ) ; <S2SV_ModStart> ( opt ) { atomic_sub ( sk -> sk_omem_alloc, & sk -> sk_omem_alloc ) ; atomic_sub ( sk -> sk_omem_alloc, & sk -> sk_omem_alloc ) ; } <S2SV_ModStart> NULL ) ; atomic_sub ( sk -> sk_omem_alloc, & sk -> sk_omem_alloc ) ; atomic_sub ( sk -> sk_omem_alloc, & sk -> sk_omem_alloc ) ; <S2SV_ModStart> ( opt ) { atomic_sub ( sk -> sk_omem_alloc, & sk -> sk_omem_alloc ) ; atomic_sub ( sk -> sk_omem_alloc, & sk -> sk_omem_alloc ) ; }",0
781,"<S2SV_ModStart> = 0 ; STACK_OF ( X509 ) * tmpin = NULL ; STACK_OF ( X509_CRL ) * crls = NULL ; if ( sk_CMS_SignerInfo_num ( sinfos ) <= 0 ) { CMSerr ( CMS_F_CMS_VERIFY, CMS_R_NO_SIGNER_ALGS ) ; goto err ; } for ( i = 0 ; i < sk_CMS_SignerInfo_num ( sinfos ) ; i ++ ) { si = sk_CMS_SignerInfo_value ( sinfos, i ) ; CMS_SignerInfo_get0_algs ( si, NULL, & signer, NULL, NULL ) ; if ( signer ) scount += CMS_set1_signers_certs ( cms, certs, flags ) ; if ( scount!= sk_CMS_SignerInfo_num ( sinfos ) ) { CMSerr ( CMS_F_CMS_VERIFY, CMS_R_SIGNER_CERTIFICATE_NOT_FOUND ) ; goto err ; } for ( i = 0 ; i < sk_CMS_SignerInfo_num ( sinfos ) ; i ++ ) { si = sk_CMS_SignerInfo_value ( sinfos",0
782,"<S2SV_ModStart> case IPV6_MULTICAST_FILTER : val = AF_INET6 ; if ( copy_from_user ( & val, optval, sizeof ( val ) ) ) return - EFAULT ; if ( copy_from_user ( & val, optval, sizeof ( val ) ) ) return - EFAULT ; if ( copy_from_user ( & val, optval, sizeof ( val ) ) ) return - EFAULT ; lock_sock ( sk ) ; err = ip6_mc_msfget ( sk, & gsf, ( struct group_filter __user * ) optval, optlen ) ; release_sock ( sk ) ; err = ip6_mc_msfget ( sk, & val, ( struct group_filter __user * ) optval, optlen ) ; lock_sock ( sk ) ; err = ip6_mc_msfget ( sk, & val, sizeof ( val ) ) ; err = ip6_mc_msfget ( sk, & gsf, ( struct group_filter __user * ) optval, optlen ) ; release_sock ( sk ) ; err = ip6_mc_msfget ( sk,",0
783,"<S2SV_ModStart> ( ) ; unregister_pernet_subsys ( & sctp_ipv4_ops ) ; unregister_pernet_subsys ( & sctp_ipv6_ops ) ; unregister_pernet_subsys ( & sctp_ipv6_ops ) ; unregister_pernet_subsys ( & sctp_ipv6_ops ) ; unregister_pernet_subsys ( & sctp_ipv4_ops ) ; sctp_v4_protosw_exit ( ) ; sctp_sysctl_unregister ( ) ; free_pages ( ( unsigned long ) sctp_assoc_hashtable, get_order ( sctp_assoc_hashsize * sizeof ( struct sctp_hashbucket ) ) ) ; free_pages ( ( unsigned long ) sctp_ep_hashtable, get_order ( sctp_port_hashsize * sizeof ( struct sctp_bind_hashbucket ) ) ) ; free_pages ( ( unsigned long ) sctp_port_hashtable, get_order ( sctp_port_hashsize * sizeof ( struct sctp_bind_hashbucket ) ) ) ; free_pages ( ( unsigned long ) sctp_",0
784,"<S2SV_ModStart> cs_flags ) ; service_named_bind_command ( ""chanconf"", & cs_conf ) ; service_named_bind_command ( ""chanconfw"", & cs_confw ) ; service_named_bind_command ( ""chanconfw"", & cs_confw ) ; service_named_bind_command ( ""chanconfw"", & cs_confw ) ; service_named_bind_command ( ""chanconfw"", & cs_confw ) ; service_named_bind_command ( ""chanconfw"", & cs_confw ) ; service_named_bind_command ( ""chanconfw"", & cs_confw ) ; service_named_bind_command ( ""chanconfw"", & cs_confw ) ; service_named_bind_command ( ""chanconfw"", & cs_confw ) ; service_named_bind_command ( ""chanconfw"", & cs_confw ) ; service_named_bind_command ( ""chanconfw"", & cs_confw ) ; service_named_bind_command ( ""chanconfw"", & cs_confw",0
785,"<S2SV_ModStart> ptr ) { <S2SV_ModEnd> struct netdev_notifier_info info <S2SV_ModStart> info ; netdev_notifier_info_init ( & info, dev ) ; return masq_device_event ( this, event, & info ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
786,<S2SV_ModStart> ) ; if (! mm ) { leave_mm ( smp_processor_id ( ) ) ; goto out ; } if ( ( start!= TLB_FLUSH_ALL ) &&! ( vmflag & VM_HUGETLB ) ) base_pages_to_flush = ( end - start ) >> PAGE_SHIFT ; if ( base_pages_to_flush > tlb_single_page_flush_floor ) base_pages_to_flush = TLB_FLUSH_ALL ; if ( base_pages_to_flush > tlb_single_page_flush_floor ) base_pages_to_flush = ( end - start ) >> PAGE_SHIFT ; if ( base_pages_to_flush > tlb_single_page_flush_floor ) base_pages_to_flush = tlb_single_page_flush_ceiling ; if ( base_pages_to_flush > tlb_single_page_flush_floor ) base_pages_to_flush = tlb_single_page_flush_floor ; if ( base_pages_to_flush > tlb_single_page_flush_f,0
787,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> show_psnr ( struct <S2SV_ModStart> index ) ; double ovpsnr = sse_to_psnr ( ( double ) stream -> psnr_samples_total, 255.0, ( double ) stream -> psnr_sse_total ) ; fprintf ( stderr, "" <S2SV_blank> %.3f"", ovpsnr ) ; for ( i = 0 ; i < 4 ; i ++ ) { fprintf ( stderr, "" <S2SV_blank> %.3f"", ovpsnr ) ; fprintf ( stderr, "" <S2SV_blank> %.3f"", ovpsnr ) ; for ( i = 0 ; i < 4 ; i ++ ) { fprintf ( stderr, "" <S2SV_blank> %.3f"", ovpsnr ) ; fprintf ( stderr, "" <S2SV_blank> %.3f"", ovpsnr ) ; for ( i = 0 ; i < 4 ; i ++ ) { fprintf ( stderr, "" <S2SV_blank> %.3f"", ovpsnr ) ; fprintf ( stderr, "" <S2SV_blank> %.3f"", ovpsnr ) ; for ( i = 0 ; i < 4 ; i ++ ) { fprintf",0
788,<S2SV_ModStart> val ) { <S2SV_ModEnd> int i =,0
789,<S2SV_ModStart> task ) { mutex_lock ( & task -> slow_task -> lock ) ; <S2SV_ModStart> ) ) { mutex_unlock ( & task -> slow_task -> lock ) ; return ; },0
790,"<S2SV_ModStart> { dst_name = safe_calloc <S2SV_ModEnd> ( strlen ( <S2SV_ModStart> 16 ) ) ; if (! dst_name ) { ERR ( ""Could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> file <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> writing\\n"", dst_name ) ; return ; }",0
791,"<S2SV_ModStart> ; if ( ( af = calloc ( 1, sizeof ( struct lldpd_af ) ) ) == NULL ) { log_warn ( ""lldp"", ""failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> remote <S2SV_blank> chassis"" ) ; return - 1 ; } <S2SV_ModStart> ; if ( ( af = calloc ( 1, sizeof ( struct lldpd_af ) ) ) == NULL ) { log_warn ( ""lldp"", ""failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> remote <S2SV_blank> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
792,"<S2SV_ModStart> ; if ( next_size == BPLIST_UINT ) { PLIST_BIN_ERR ( ""%s: <S2SV_blank> size <S2SV_blank> node <S2SV_blank> data <S2SV_blank> bytes <S2SV_blank> for <S2SV_blank> node <S2SV_blank> type <S2SV_blank> 0x%02x <S2SV_blank> point <S2SV_blank> outside <S2SV_blank> of <S2SV_blank> valid <S2SV_blank> range\\n"", __func__, type ) ; return NULL ; } next_size = UINT_TO_HOST ( * object, next_size ) ; if ( next_size > bplist -> offset_table ) { PLIST_BIN_ERR ( ""%s: <S2SV_blank> size <S2SV_blank> node <S2SV_blank> data <S2SV_blank> bytes <S2SV_blank> for <S2SV_blank> node <S2SV_blank> type <S2SV_blank> 0x%02x <S2SV_blank> point <S2SV_blank> outside <S2SV_blank> of <S2SV_blank> valid <S2SV_blank> range\\n"", __func__, type ) ; return NULL ; } next_size = UINT_TO_HOST ( * object, next_size ) ; if ( next_size > bplist -> offset_table ) { PLIST_BIN_ERR ( ""%s: <S2SV_blank> size <S2SV_blank> node <S2SV_blank> data <S2SV_blank> bytes <S2SV_blank> for <S2SV_blank> node <S2SV_blank> type <S2SV_blank> 0x%02x <S2SV_blank> point <S2SV_blank> outside <S2SV_blank> of <S2SV_blank> valid <S2SV_blank> range\\n"", __func__, type ) ; return NULL ; } next_size = UINT_",0
793,"<S2SV_ModStart> init ( ) ; TRACE_DEBUG ( ""CIDER=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_CIDER ) ) ; TRACE_DEBUG ( ""PHY1ILR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1ILR ) ) ; TRACE_DEBUG ( ""PHY1IHR=0x%04"" PRIX16 ""\\r\\n"", ksz8851ReadReg ( interface, KSZ8851_PHY1IHR ) ) ; if ( ksz8851ReadReg ( interface, KSZ8851_CIDER )!= KSZ8851_REV_A3_ID ) { return ERROR_WRONG_IDENTIFIER ; } ksz8851DumpReg ( interface ) ; context -> frameId = 0 ; context -> txBuffer = memPoolAlloc ( ETH_MAX_FRAME_SIZE ) ; if ( context -> txBuffer == NULL || context -> rxBuffer == NULL ) { memPoolFree ( context -> txBuffer ) ; memPoolFree ( context -> rxBuffer",0
794,<S2SV_ModStart> all_channels_lock ) ; mutex_lock ( & pch -> chan_mutex ) ; <S2SV_ModStart> file. dead = 1 ; mutex_unlock ( & pch -> chan_mutex ) ;,0
795,"<S2SV_ModStart> flags ) { struct btrfs_dir_item * dir_item ; <S2SV_ModStart> - ENOMEM ; dir_item = btrfs_lookup_dir_item ( trans, root, path, btrfs_ino ( inode ), name, name_len, - 1 ) ; if ( dir_item ) { di = btrfs_lookup_dir_item ( trans, root, path, btrfs_ino ( inode ), name, name_len, - 1 ) ; if ( IS_ERR ( di ) ) { ret = PTR_ERR ( di ) ; goto out ; } ret = btrfs_delete_one_dir_name ( trans, root, path, dir_item ) ; if ( ret ) goto out ; btrfs_release_path ( path ) ; di = btrfs_lookup_xattr ( trans, root, path, btrfs_ino ( inode ), name, name_len, 0 ) ; if ( IS_ERR ( di ) ) { ret = PTR_ERR ( di ) ; goto out ; } ret = btrfs_insert_one_dir_name ( trans, root, path, dir_item",0
796,<S2SV_ModStart> ; if ( buf_len < 1 ) return - 1 ; <S2SV_ModStart> 1 ; if ( buf_len < 1 ) return - 1 ; <S2SV_ModStart> 1 ; if ( buf_len < 1 ) return - 1 ; <S2SV_ModStart> 1 ; if ( buf_len < 1 ) return - 1 ; <S2SV_ModStart> 1 ; if ( buf_len < 1 ) return - 1 ; <S2SV_ModStart> 1 ; if ( buf_len < 1 ) return - 1 ; <S2SV_ModStart> 1 ; if ( buf_len < 2 ) return - 1 ; if ( buf_len < 1 ) return - 1 ; <S2SV_ModStart> 1 ; if ( buf_len < 1 ) return - 1 ; <S2SV_ModStart> 1 ; if ( buf_len < 1 ) return - 1 ; <S2SV_ModStart> 1 ; if ( buf_len < 1 ) return - 1 ; <S2SV_ModStart> 1 ; if ( buf_len < 1 ) return - 1 ; <S2SV_ModStart> 1 ; if ( buf_len < 1 ) return 1 ; if ( buf_len < 1 ) return - 1 ; <S2SV_ModStart> 1 ; if ( buf_len < 1 ) return - 1 ; if ( buf_len < 1 ) return - 1 ; <S2SV_ModStart> 1 ; if ( buf_len < 1 ) return - 1 ; <S2SV_ModStart> 1 ; if ( buf_len < 1,0
797,<S2SV_ModStart> client ) ; <S2SV_ModEnd> g_hash_table_destroy ( client,0
798,"<S2SV_ModStart>. skip } ; vpx_foreach_transformed_block_in_plane <S2SV_ModEnd> ( xd,",0
799,"<S2SV_ModStart> ; if ( key -> type == & key_type_keyring ) return - ENOKEY ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) return - ENOKEY ; p = key -> payload. data [ 0 ] ; if (! p -> migratable ) return - EPERM ; if ( p -> key_len > 32767 || p -> key_type!= & key_type_keyring ) return - EINVAL ; memcpy ( new_p -> key, p -> key, p -> key_len ) ; dump_payload ( p ) ; dump_payload ( new_p ) ; ret = key_seal ( new_p, new_o ) ; if ( ret < 0 ) { pr_info ( ""trusted_key: <S2SV_blank> key_seal <S2SV_blank> failed <S2SV_blank> (%d)\\n"", ret ) ; kzfree ( new_p ) ; goto out ; } ret = key_seal ( new_p, new_o ) ; if ( ret < 0 ) { pr_info ( ""trusted_key: <S2SV_blank> key_seal <S2SV_blank> failed <S2SV_blank> (%d)\\n"", ret ) ; k",0
800,"<S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_IP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NEED_OP ( 1, 0 <S2SV_ModStart> NE",0
801,"<S2SV_ModStart> ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; } if ( fit_check_format ( fit, IMAGE_SIZE_INVAL ) ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; return - ENOEXEC ; } if ( fit_uname ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_FORMAT ) ; return - ENOEXEC ; } if ( fit_uname ) { printf ( ""Bad <S2SV_blank> FIT <S2SV_blank> %s <S2SV_blank> image <S2SV_blank> format!\\n"", prop_name ) ; bootstage_error ( bootstage_id + BOOTSTAGE_SUB_UNIT_NAME ) ; noffset = fit_image_get_node ( fit, fit_uname ) ; } else { bootstage_mark ( bootstage_id + BOOTSTAGE_SUB_",0
802,<S2SV_ModStart> len ) { switch ( outpkt. type ) { case VPN_PACKET_TYPE_TCP : outpkt. type = VPN_PACKET_TYPE_TCP ; break ; case VPN_PACKET_TYPE_IPV6 : outpkt. type = VPN_PACKET_IPV6 ; break ; case VPN_PACKET_IPV4 : outpkt. type = VPN_PACKET_IPV4 ; break ; case VPN_PACKET_IPV6 : outpkt. type = VPN_PACKET_IPV6 ; break ; case VPN_PACKET_VPN_VPN_VPN_VPN_VPN_VPN_VPN_VPN_VPN_VPN_VPN_VPN_VPN_VPN_VPN_VPN_VPN_VPN_VPN_VPN_VPN_VPN_VPN_VPN_VPN_VPN_VPN_VPN_VPN_VPN_VPN_VPN_VPN_VPN_VPN_VPN_VPN_VPN_VPN_VPN_VPN,0
803,"<S2SV_ModStart> rdmsrl_safe ( MSR_IA32_MSR, & msr ) ; for ( i = 0 ; i < ARRAY_SIZE ( vmx_msr_index ) ; ++ i ) kvm_define_shared_msr ( i, vmx_msr_index [ i ] ) ; for ( i = 0 ; i < ARRAY_SIZE ( vmx_msr_index ) ; ++ i ) kvm_define_shared_msr ( i, vmx_msr_index [ i ] ) ; for ( i = 0 ; i < ARRAY_SIZE ( vmx_msr_index ) ; ++ i ) kvm_define_shared_msr ( i, vmx_msr_index [ i ] ) ; for ( i = 0 ; i < ARRAY_SIZE ( vmx_msr_index ) ; ++ i ) kvm_define_shared_msr ( i, vmx_msr_index [ i ] ) ; for ( i = 0 ; i < ARRAY_SIZE ( vmx_msr_index ) ; ++ i ) kvm_define_shared_msr ( i, vmx_msr",0
804,<S2SV_ModStart> ; if ( bin -> shstrtab && shdr -> sh_name < bin -> shstrtab_size && shdr -> sh_name < bin -> shstrtab_size && shdr -> sh_name < bin -> shstrtab_size && link_shdr -> sh_name < bin -> shstrtab_size && link_shdr -> sh_name < bin -> shstrtab_size && link_shdr -> sh_name < bin -> shstrtab_size && link_shdr -> sh_name < bin -> shstrtab_size && shdr -> sh_name < bin -> shstrtab_size && shdr -> sh_name < bin -> shstrtab_size && link_shdr -> sh_name < bin -> shstrtab_size && link_shdr -> sh_name < bin -> shstrtab_size && link_shdr -> sh_name < bin -> shstrtab_size && link_shdr -> sh_name < bin -> shstrtab_size && link_shdr -> sh_name < bin -> shstrtab_size && link_shdr -> sh_name < bin -> shstrtab_size,0
805,"<S2SV_ModStart> 0 ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> UI_DEV_DESTROY ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, UI_DEV_DESTROY ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, UI_DEV_DESTROY ) ; TEMP_FAILURE_RETRY (",0
806,<S2SV_ModStart> -> is_src_frame_alt_ref )? ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval * af_ratio ) / ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval + af_ratio - 1 ) : ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval * af_ratio ) / ( rc -> baseline_gf_interval + af_ratio - 1 ) ; # else target = rc -> avg_frame_bandwidth * ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval * af_ratio ) / ( rc -> baseline_gf_interval + af_ratio - 1 ) ; # else target = rc -> avg_frame_bandwidth * ( rc -> avg_frame_bandwidth * rc -> baseline_gf_interval * af_ratio ) / ( rc -> baseline_gf_interval + af_ratio - 1 ) ; <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
807,"<S2SV_ModStart> i ++ ) { if ( strcmp ( argv [ i ], ""allow-untrusted"" ) == 0 ) errx ( 1, ""%s: <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> option"", ""--allow-untrusted"" ) ; argv [ 0 ] = path ; setuid ( 0 ) ; setgid ( 0 ) ; execv ( path, ( char * const * ) argv ) ; return 1 ; } <S2SV_ModEnd> argv [ 0",0
808,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
809,"<S2SV_ModStart> INDENT_INCR ; } if ( cmd == HTML_DT ) { if ( mode -> indent_level > 0 && mode -> indent_level <= MAX_INDENT_LEVEL ) offset -= INDENT_INCR ; <S2SV_ModStart> INDENT_INCR ; } else if ( cmd == HTML_COMMENT ) { if ( mode -> indent_level > 0 && mode -> indent_level <= MAX_INDENT_LEVEL ) offset -= INDENT_INCR ; } else if ( cmd == HTML_COMMENT ) { if ( mode -> indent_level > 0 && mode -> indent_level <= MAX_INDENT_LEVEL ) offset -= INDENT_INCR ; } if ( tbl -> indent > 0 ) { check_minimum0 ( tbl, 0 ) ; addcontentssize ( tbl, offset ) ; } else if ( cmd == HTML_COMMENT ) { if ( mode -> indent_level > 0 && mode -> indent_level <= MAX_INDENT_LEVEL ) offset -= INDENT_INCR ; } else if ( cmd == HTML_COMMENT ) { if ( mode -> indent_level > 0 && mode -> indent_level <= MAX_INDENT_LEVEL ) offset -= INDENT_INCR ; }",0
810,"<S2SV_ModStart> ; if ( e < b ) { DPRINTF ( ( ""%d: <S2SV_blank> offset <S2SV_blank> begin <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> end <S2SV_blank> %p <S2SV_blank> || <S2SV_blank> %"" SIZE_T_FORMAT ""u"" "" <S2SV_blank> > <S2SV_blank> %"" SIZE_T_FORMAT ""u\\n"", line, b, e, ( size_t ) ( e - b ), CDF_SEC_SIZE ( h ) * sst -> sst_len, CDF_SEC_SIZE ( h ), sst -> sst_len ) ) ; errno = EFTYPE ; return - 1 ; } if ( e >= b && ( size_t ) ( e - b ) <= CDF_SEC_SIZE ( h ) * sst -> sst_len ) { DPRINTF ( ( ""%d: <S2SV_blank> offset <S2SV_blank> begin <S2SV_blank> %p <S2SV_blank> < <S2SV_blank> end <S2SV_blank> %p <S2SV_blank> || <S2SV_blank> %"" SIZE_T_FORMAT ""u"" "" <S2SV_blank> > <S2SV_blank> %"" SIZE_T_FORMAT ""u\\n"", line, b, e, ( size_t ) ( e - b ), CDF_SEC_SIZE ( h ) * sst -> sst_len, CDF_SEC_SIZE ( h ) * sst -> s",0
811,<S2SV_ModStart> } # endif # define YYSTACK ( N ) ( yyvsp -= ( N ) ) int yylen = 0 ; # define YYSTACK ( N ) ( yyssa -= ( N ) ) int yylen = 0 ; # define YYSTACK ( N ) ( yyvsp -= ( N ) ) int yylen = 0 ; # define YYSTACK ( N ) ( yyssa -= ( N ) ) int yylen = 0 ; # define YYSTACK ( N ) ( yyss = yyssa ; # define YYSTACK ( N ) ( yyvsp -= ( N ) ) int yylen = 0 ; # define YYSTACK ( N ) ( yyssa -= ( N ) ) int yylen = 0 ; # define YYSTACK ( N ) ( yyvsp -= ( N ) ) int yylen = 0 ; # define YYSTACK ( N ) ( yyssa -= ( N ) ) int yylen = 0 ; # define YYSTACK ( N ) ( yyss = yyssa ; # define YYSTACK ( N ) ( yyvsp -= ( N ) ) int yylen = 0 ; # define YYSTACK ( N ) ( yyss,0
812,<S2SV_ModStart> ib ] ; <S2SV_ModEnd> dequant_ptr = d <S2SV_ModStart> -> dequant ; coeff_ptr = b -> coeff ; dqcoeff_ptr = b -> dqcoeff ; i0 =! type ; eob = * d -> eob ; rdmult = ( rdmult * 9 ) >> 4 ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >> 4 ; if ( mb -> e_mbd. mode_info_context -> mbmi. ref_frame == INTRA_FRAME ) rdmult = ( rdmult * 9 ) >>,0
813,"<S2SV_ModStart> FN_REFLEN ] ; if ( strlen ( opt_basedir ) > FN_REFLEN ) { error = - 1 ; goto exit ; } strncat ( buff, opt_basedir, sizeof ( buff ) - 1 ) ; # ifdef __WIN__ strncat ( buff, FN_DIRSEP, sizeof ( buff ) - strlen ( buff ) - 1 ) ; # else strncat ( buff, ""/"", sizeof ( buff ) - strlen ( buff ) - 1 ) ; # endif strncat ( buff, FN_DIRSEP, sizeof ( buff ) - strlen ( buff ) - 1 ) ; buff [ sizeof ( buff ) - 1 ] = 0 ; my_free ( opt_basedir ) ; opt_basedir = my_strdup ( buff, MYF ( MY_FAE ) ) ; } if (! opt_verbose ) { printf ( ""# <S2SV_blank> <S2SV_blank> <S2SV_blank> basedir <S2SV_blank> = <S2SV_blank> %s\\n"", opt_basedir ) ; printf ( ""# <S2SV_blank> plugin_dir <S2SV_blank> = <S2SV_blank> %s\\n"", opt_plugin_dir ) ; printf ( ""# <S2SV_blank> datadir <S2SV_blank> = <S2SV_blank> %s\\n"", opt_datadir ) ; printf ( ""# <S2SV_blank> plugin_ini <S2SV_blank>",0
814,"<S2SV_ModStart> ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) zap = dereference_key_locked ( key ) ; if ( zap ) call_rcu ( & zap -> rcu, user_free_payload_rcu ) ;",0
815,<S2SV_ModStart> hci_filter * f = <S2SV_ModEnd> hci_pi ( sk <S2SV_ModStart> hci_pi ( sk ) -> filter ; if ( f ) { uf. type_mask = f -> type_mask ; uf. opcode = f -> opcode ; uf. event_mask [ 0 ] = * ( ( u32 * ) f -> event_mask + 0 ) ; uf. event_mask [ 1 ] = * ( ( u32 * ) f -> event_mask + 1 ) ; } else { uf. type_mask = f -> type_mask ; uf. opcode = f -> opcode ; uf. event_mask [ 0 ] = * ( ( u32 * ) f -> event_mask + 0 ) ; uf. event_mask [ 1 ] = * ( ( u32 * ) f -> event_mask + 1 ) ; },0
816,"<S2SV_ModStart> decrypt_cb ) { int <S2SV_ModEnd> n = ( <S2SV_ModStart> data_end - data ) ; if ( n < 0 ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } if ( pbi -> ec_active ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } else { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } if ( pbi -> ec_active ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } if ( pbi -> ec_active ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRUPT_FRAME, ""Truncated <S2SV_blank> packet"" ) ; } if ( pbi -> ec_active ) { vpx_internal_error ( & pc -> error, VPX_CODEC_CORRU",0
817,"<S2SV_ModStart> getprivs_ret ret ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> ) ; exit_func : gss_release_buffer ( & minor_stat, & client_name ) ; gss_release_buffer ( & minor_stat, & service_name ) ; <S2SV_ModEnd> free_server_handle ( handle",0
818,"<S2SV_ModStart> peer. i = new -> peer. i ; sctp_tsnmap_init ( & asoc -> peer. tsn_map, SCTP_TSN_MAP_INITIAL, asoc -> peer. i. initial_tsn, GFP_ATOMIC ) ; list_for_each_entry ( pos, temp, & asoc -> peer. transport_addr_list ) { sctp_assoc_rm_peer ( asoc, trans ) ; continue ; } if ( asoc -> state >= SCTP_STATE_ESTABLISHED ) { asoc -> ctsn_ack_point = new -> ctsn_ack_point ; asoc -> adv_peer_ack_point = new -> adv_peer_ack_point ; sctp_ssnmap_clear ( asoc -> ssnmap ) ; asoc -> overall_error_count = 0 ; } else { list_for_each_entry ( trans, & new -> peer. transport_addr_list, transports ) { if (! sctp_assoc_lookup_paddr ( asoc, & trans -> ipaddr ) ) sctp_assoc_rm_peer ( asoc",0
819,"<S2SV_ModStart> cleanup ; } status = aac_fib_send ( dev, srbfib ) ; if ( status < 0 ) { dprintk ( ( KERN_INFO ""aacraid: <S2SV_blank> send <S2SV_blank> raw <S2SV_blank> srb <S2SV_blank> -EINVAL\\n"" ) ) ; rcode = - EINVAL ; goto cleanup ; } if ( status < 0 ) { dprintk ( ( KERN_INFO ""aacraid: <S2SV_blank> send <S2SV_blank> raw <S2SV_blank> srb <S2SV_blank> -EINVAL\\n"" ) ) ; rcode = - EINVAL ; goto cleanup ; } if ( status < 0 ) { dprintk ( ( KERN_INFO ""aacraid: <S2SV_blank> send <S2SV_blank> raw <S2SV_blank> srb <S2SV_blank> -EINVAL\\n"" ) ) ; rcode = - EINVAL ; goto cleanup ; } if ( status < 0 ) { dprintk ( ( KERN_INFO ""aacraid: <S2SV_blank> send <S2SV_blank> raw <S2SV_blank> srb <S2SV_blank> -EINVAL\\n"" ) ) ; rcode = - EINVAL ; goto cleanup ; } if ( status < 0 ) { dprintk ( ( KERN_INFO ""aac",0
820,"<S2SV_ModStart> 0 ) ; if ( cc0 >= rowsize ) { TIFFErrorExt ( tif -> tif_clientdata, module, ""Out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> allocating <S2SV_blank> "" TIFF_SSIZE_FORMAT ""byte <S2SV_blank> temp <S2SV_blank> buffer."", cc0 ) ; return 0 ; } <S2SV_ModStart> 0 ) ; if ( cc0 >= rowsize ) { TIFFErrorExt ( tif -> tif_clientdata, module, ""Out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> allocating <S2SV_blank> "" TIFF_SSIZE_FORMAT ""byte <S2SV_blank> temp <S2SV_blank> buffer."", cc0 ) ; return 0 ; }",0
821,"<S2SV_ModStart> ; struct sock * sk = asoc -> base. sk ; <S2SV_ModStart> ; bh_lock_sock ( <S2SV_ModEnd> sk ) ; <S2SV_ModStart> sk ) ; <S2SV_ModEnd> if ( sock_owned_by_user <S2SV_ModStart> base. sk ) ) { pr_debug ( ""%s: <S2SV_blank> sock <S2SV_blank> is <S2SV_blank> busy\\n"", __func__ ) ; if (! mod_timer ( & transport -> proto_unreach_timer, jiffies + ( HZ / 20 ) ) ) sctp_association_put ( asoc ) ; return ; } <S2SV_ModEnd> sctp_do_sm ( net <S2SV_ModStart> SCTP_EVENT_T_OTHER, SCTP_ST_OTHER ( SCTP_EVENT_ICMP_PROTO_UNREACH ), asoc -> state, asoc -> ep, asoc, transport, GFP_ATOMIC ) ; out_unlock : sctp_do_sm ( net, SCTP_EVENT_T_OTHER, SCTP_ST_OTHER ( SCTP_EVENT_ICMP_PROTO_UNREACH ), asoc -> state, asoc -> ep, asoc -> ep, transport, GFP_ATOMIC ) ; out_",0
822,"<S2SV_ModStart> input_data, size_t input_data_size, size_t input_data_size, size_t input_size, size_t flags, RE_MATCH_CALLBACK_FUNC <S2SV_ModEnd> callback, void <S2SV_ModStart> { action = ACTION_KILL_TAIL ; break ; } <S2SV_ModEnd> if ( _yr_re_alloc_storage <S2SV_ModStart> ) switch ( e ) { case ERROR_INSUFFICIENT_MEMORY : return - 2 ; case ERROR_TOO_MANY_RE_FIBERS : return - 4 ; } if ( _yr_re_alloc_storage ( & storage )!= ERROR_SUCCESS ) return - 2 ; if ( flags & RE_FLAGS_WIDE ) character_size = 2 ; else character_size = 1 ; input = input_data ; input_incr = character_size ; if ( flags & RE_FLAGS_BACKWARDS ) { input -= character_size ; input_incr = - input_incr ; } input = input_data ; input_incr = character_size ; if ( flags & RE_FLAGS_BACKWARDS ) { input -= character_size ; input_incr = - input_incr ; }",0
823,"<S2SV_ModStart> returnrate, int * returndistortion <S2SV_ModEnd>, int * <S2SV_ModStart> returnintra ) { unsigned int zero_mv_sse = INT_MAX, best_sse = INT_MAX, best_rd_sse = INT_MAX ; unsigned int zero_mv_sse = INT_MAX, zero_mv_sse = INT_MAX, best_rd_sse = INT_MAX ; unsigned int zero_mv_sse = INT_MAX ; unsigned int zero_mv_sse = INT_MAX, best_rd_sse = INT_MAX ; unsigned int zero_mv_sse = INT_MAX ; unsigned int zero_mv_sse = INT_MAX ; unsigned int zero_mv_sse = INT_MAX ; unsigned int zero_mv_sse = INT_MAX ; unsigned int zero_mv_sse = INT_MAX ; unsigned int zero_mv_sse = INT_MAX ; unsigned int zero_mv_sse = INT_MAX ; unsigned int zero_mv_sse = INT_MAX ; unsigned int zero_mv_sse = INT_MAX ; unsigned int zero_mv_sse = INT_MAX ;",0
824,"<S2SV_ModStart> svm, UD_VECTOR ) ; set_exception_intercept ( svm, MC_VECTOR ) ; set_exception_intercept ( svm, MC_VECTOR ) ; set_intercept ( svm, INTERCEPT_INTR ) ; set_intercept ( svm, INTERCEPT_NMI ) ; set_intercept ( svm, INTERCEPT_SMI ) ; set_intercept ( svm, INTERCEPT_SELECTIVE_CR0 ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_HLT ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_HLT ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_INVD ) ; set_intercept ( svm, INTERCEPT_HLT ) ; set_intercept ( svm, INTERCEPT_INVLPG ) ; set_intercept ( svm, INTERCEPT_INVLPGA ) ; set_intercept ( svm, INTERCEPT_",0
825,<S2SV_ModStart> goto error ; if ( statbuf. st_size < 0 ) goto error ; if ( h -> hdr -> magic [ 0 ] == '\\0' || h -> hdr -> magic [ 1 ] == '\\0' || h -> hdr -> magic [ 2 ] == '\\0' || h -> hdr -> magic [ 3 ] == '\\0' || h -> hdr -> magic [ 4 ]!= '\\0' || h -> hdr -> magic [ 5 ]!= '\\0' || h -> hdr -> magic [ 7 ]!= '\\0' || h -> hdr -> magic [ 8 ]!= '\\0' || h -> hdr -> magic [ 9 ]!= '\\0' || h -> hdr -> magic [ 10 ]!= '\\0' || h -> hdr -> magic [ 11 ]!= '\\0' || h -> hdr -> magic [ 12 ]!= '\\0' || h -> hdr -> magic [ 13 ]!= '\\0' || h -> hdr -> magic [ 14 ]!= '\\0' || h -> hdr -> magic [ 14 ]!= '\\0' || h -> hdr -> magic [ 13 ]!= '\\0' || h -> hdr -> magic [ 14 ]!= '\\0' || h -> hdr -> magic [ 12 ]!= '\\0',0
826,"<S2SV_ModStart> const cdf_stream_t * sst <S2SV_ModEnd>, const uint64_t <S2SV_ModStart> ; } str = cdf_clsid_to_mime ( clsid, clsid2desc ) ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; <S2SV_ModStart> break ; } str = cdf_clsid_to_mime ( clsid, clsid2desc ) ; if ( str ) if ( file_printf ( ms, "", <S2SV_blank> %s"", str ) == - 1 ) return - 2 ; } m = cdf_file_property_info ( ms, info, count, clsid ) ; free ( info ) ; return m == - 1? - 2 : m ; } <S2SV_ModEnd> m = cdf_file_property_info",0
827,"<S2SV_ModStart> u1_profile_idc, u1_level_idc, u1_seq_parameter_set_id ; WORD32 ret ; WORD32 pic_height_in_map_units_minus1 ; WORD32 u2_pic_wd, u2_pic_ht, u2_frm_wd_y, u2_frm_ht_y, u2_crop_offset_y, u2_crop_offset_uv ; ret = ih264d_get_bits_h264 ( ps_bitstrm, 8 ) ; COPYTHECONTEXT ( ""SPS: <S2SV_blank> pic_height_in_map_units_minus1"", pic_height_in_map_units_minus1 ) ; WORD32 u4_num_reorder_frames ; WORD32 i4_i ; UWORD8 u1_frame_cropping_flag, u1_frame_cropping_flag, u1_frame_cropping_rect_left_ofst, u1_frame_cropping_rect_right_ofst, u1_frame_cropping_rect_top_ofst, u1_frame_cropping",0
828,"<S2SV_ModStart> palp ) ; if ( err ) return - EFAULT ; <S2SV_ModStart> ) ; } up_native = compat_alloc_user_space ( sizeof ( struct video_spu_palette ) ) ; err = put_user ( palp, & up_native -> palette ) ; err |= put_user ( length, & up_native -> length",0
829,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> -> cpi ; vpx_svc_spatial_layer_t * const spatial_layer = va_arg ( args, vpx_svc_spatial_layer_t * ) ; vpx_svc_temporal_layer_t * const temporal_layer = va_arg ( args, vpx_svc_temporal_layer_t * ) ; if ( spatial_layer == NULL ) return VPX_CODEC_INVALID_PARAM ; cpi -> svc. spatial_layer_id = params -> spatial_layer ; cpi -> svc. temporal_layer_id = params -> temporal_layer ; cpi -> lst_fb_idx = params -> lst_fb_idx ; cpi -> gld_fb_idx = params -> gld_fb_idx ; cpi -> alt_fb_idx = params -> alt_fb_idx ; if ( vp9_set_size_literal ( ctx -> cpi, params -> width, params -> height )!= 0 ) return VPX_CODEC_INVALID_PARAM ; ctx -> cfg. rc_max_quantizer = params -> max_quantizer ; ctx",0
830,"<S2SV_ModStart> ; prev = rcu_dereference_protected ( fq -> q. next, sock_owned_by_user ( skb -> dev ) ) ; next = rcu_dereference_protected ( fq -> q. next, sock_owned_by_user ( skb -> dev ) ) ; if ( prev ) { IP6_INC_STATS_BH ( net, ip6_dst_idev ( skb_dst ( skb ) ), IPSTATS_MIB_INHDRERRORS ) ; icmpv6_param_prob ( skb, ICMPV6_HDR_FIELD, ( ( u8 * ) & fhdr -> frag_off - skb_network_header ( skb ) ) ) ; if ( prev ) { IP6_INC_STATS_BH ( net, ip6_dst_idev ( skb_dst ( skb ) ), IPSTATS_MIB_INHDRERRORS ) ; icmpv6_param_prob ( skb, ICMPV6_HDR_FIELD, ( ( u8 * ) & fhdr -> frag_off - skb_network_header (",0
831,"<S2SV_ModStart> out ) { uint32 width, length ; uint16 bitspersample, samplesperpixel ; uint16 input_compression, input_photometric <S2SV_ModEnd> ; copyFunc cf <S2SV_ModStart>, input_photometric ; if ( length!= ( uint32 ) - 1 ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Length <S2SV_blank> mismatch <S2SV_blank> in <S2SV_blank> tiffcp.\\n"", TIFFFileName ( in ) ) ; return FALSE ; } <S2SV_ModStart>, input_compression ) ; if ( length!= ( uint32 ) - 1 ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Length <S2SV_blank> mismatch <S2SV_blank> in <S2SV_blank> tiffcp.\\n"", TIFFFileName ( in ) ) ; return FALSE ; } if ( length!= ( uint32 ) - 1 ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Length <S2SV_blank> mismatch <S2SV_blank> in <S2SV_blank> tiffcp.\\n"", TIFFFileName ( in ) ) ; return FALSE ; } if ( length!= ( uint32 ) - 1 ) { fprintf ( stderr, ""tiffcp: <S2SV_blank> %s: <S2SV_blank> Length <S2SV_blank> mismatch <S2SV_blank> in <S2SV_blank> tiffcp.\\n"", TIFFFileName",0
832,"<S2SV_ModStart> a ) { struct stat st ; <S2SV_ModStart> = '\\0' ; if ( a -> flags & ARCHIVE_EXTRACT_UNLINK ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, 0, ""Cannot <S2SV_blank> remove <S2SV_blank> intervening <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } a -> pst = NULL ; } else if ( S_ISLNK ( st. st_mode ) ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, errno, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED ) ; } } else if ( S_ISLNK ( st. st_mode ) ) { if ( unlink ( a -> name )!= 0 ) { archive_set_error ( & a -> archive, 0, ""Could <S2SV_blank> not <S2SV_blank> remove <S2SV_blank> symlink <S2SV_blank> %s"", a -> name ) ; pn [ 0 ] = c ; return ( ARCHIVE_FAILED",0
833,"<S2SV_ModStart> ; if ( safe_mount <S2SV_ModEnd> ( hostpath,",0
834,"<S2SV_ModStart> struct udf_sb_info * udf_sb = UDF_SB ( inode -> i_sb ) ; <S2SV_ModStart> unsigned int link_count ; if ( udf_read_ptagged ( inode -> i_sb, & iinfo -> i_location, 0, & ident ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank>!bh\\n"", inode -> i_ino ) ; make_bad_inode ( inode ) ; return ; } if ( ident == TAG_IDENT_IE && ibh ) { struct buffer_head * nbh = NULL ; struct kernel_lb_addr loc ; struct indirectEntry * ie ; ie = ( struct indirectEntry * ) ibh -> b_data ; loc = lelb_to_cpu ( ie -> indirectICB. extLocation ) ; if ( ie -> indirectICB. extLength && ( nbh = udf_read_ptagged ( inode -> i_sb, & loc, 0, & ident ) ) { if ( ident == TAG_IDENT_FE || ident == TAG_IDENT_EFE ) { memcpy ( & iinfo -> i_location, & loc,",0
835,"<S2SV_ModStart> TX_SIZE tx_size_uv = mbmi -> tx_size_uv ; uint64_t * const left_y = & lfm -> left_y [ tx_size_y ] ; uint64_t * const above_y = & lfm -> above_y [ tx_size_y ] ; uint64_t * const left_uv = & lfm -> left_uv [ tx_size_y ] ; uint16_t * const above_uv = & lfm -> above_uv [ tx_size_uv ] ; uint16_t * const int_4x4_y = & lfm -> int_4x4_y [ tx_size_y ] ; uint16_t * const int_4x4_uv = & lfm -> int_4x4_uv [ tx_size_uv ] ; int i ; for ( i = 0 ; i < w ; i ++ ) { memset ( & lfm -> lfl_y [ index ], filter_level, w ) ; index += 8 ; } } * above_y |= above_prediction_mask [ block_size ] << shift_y ; * above_uv",0
836,"<S2SV_ModStart> dst_size ) { const <S2SV_ModStart> data_end ) ; if ( len < 0 ) len = data_end - data ; data += len ; } if ( data_end - data < 3 ) return - 1 ; data ++ ; for ( ; ; ) { int size = bytestream_get_be16 ( & data ) ; if (! size ) break ; if ( size < 0 || size >= data_end - data ) return - 1 ; data += size ; if (! memcmp ( data - size, name, namelen ) ) break ; if ( size == namelen &&! memcmp ( data - size, name, namelen ) ) { switch ( * data ++ ) { case AMF_DATA_TYPE_NUMBER : snprintf ( dst, dst_size, ""%g"", av_int2double ( AV_RB64 ( data ) ) ) ; break ; case AMF_DATA_TYPE_BOOL : snprintf ( dst, dst_size, ""%s"", * data ) ; break ; case AMF_DATA_TYPE_STRING : len = bytestream_get_be16 ( & data ) ; av_strlcpy ( dst, data",0
837,"<S2SV_ModStart> mq_ops ) { list_for_each_entry_safe ( rq, n, running, flush. list ) { unsigned int seq = blk_flush_cur_seq ( rq ) ; WARN_ON ( seq!= REQ_FSEQ_PREFLUSH && seq!= REQ_FSEQ_POSTFLUSH && seq!= REQ_FSEQ_PREFLUSH ) ; queued |= blk_flush_complete_seq ( rq, fq, seq, error ) ; list_for_each_entry_safe ( rq, n, running, flush. list ) { unsigned int seq = blk_flush_cur_seq ( rq ) ; WARN_ON ( seq!= REQ_FSEQ_PREFLUSH && seq!= REQ_FSEQ_POSTFLUSH ) ; queued |= blk_flush_complete_seq ( rq, fq, seq, error ) ; }",0
838,<S2SV_ModStart> uint8_t val ; if ( addr + sizeof ( val ) > vdev -> config_len ) return ( uint32_t ) - 1 ;,0
839,<S2SV_ModStart> = NULL ; if ( prog -> flags & eflags ) prog -> flags |= eflags ;,0
840,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> swabHorDiff16 ( TIFF <S2SV_ModStart> / 2 ; return <S2SV_ModEnd> horDiff16 ( tif <S2SV_ModStart> wc ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
841,"<S2SV_ModStart> ) ) { if (! smatch ( option, "" <S2SV_blank> =\\t,"" ) ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; } ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if (! ovalue || * ovalue == '\\0' ) continue ; if ( smatch ( option, ""name"" ) ) { httpSetRouteCookie ( state -> route, ovalue ) ; } else { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Unknown <S2SV_blank> SessionCookie <S2SV_blank> option <S2SV_blank> %s"", option ) ; return MPR_ERR_BAD_SYNTAX ; }",0
842,"<S2SV_ModStart> __be32 daddr ; struct ip_options_rcu * inet_opt <S2SV_ModStart> return 0 ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; <S2SV_ModStart> return 0 ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; inet_opt = rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( inet_opt && inet_opt -> opt. <S2SV_ModEnd> srr ) daddr",0
843,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
844,"<S2SV_ModStart> * mgr_hdl ; strncpy <S2SV_ModEnd> ( s_path, <S2SV_ModStart> ( s_path ) ) ; strncpy <S2SV_ModEnd> ( c_path, <S2SV_ModStart> instance ) ; strncpy <S2SV_ModEnd> ( c_path, <S2SV_ModStart> instance, ( long unsigned ) pid ) ; if ( * mgr_hdl == NULL ) { if ( hcom_client_init ( mgr_hdl, s_path, c_path, 32768 )!= HSM_COM_OK ) { return FM_CONF_INIT_ERR ; } if ( hcom_client_init ( mgr_hdl, s_path, c_path, 32768 )!= HSM_COM_OK ) { return FM_CONF_INIT_ERR ; } if ( hcom_client_connect ( * mgr_hdl, s_path, c_path, 32768 )!= HSM_COM_OK ) { return FM_CONF_INIT_ERR ; } if ( hcom_client_connect ( * mgr_hdl, s_path, c_path, 32768 )!= HSM_COM_OK ) { return FM_CONF_INIT_ERR ; } if ( hcom_",0
845,"<S2SV_ModStart> NULL || * replySize > sizeof ( effect_param_t ) ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( <S2SV_ModStart> == NULL || * replySize > sizeof ( effect_param_t ) ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( <S2SV_ModStart> == NULL || * replySize > sizeof ( effect_param_t ) ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( <S2SV_ModStart> == NULL || * replySize > sizeof ( effect_param_t ) ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EINVAL ; } if ( <S2SV_ModStart> == NULL || * replySize > sizeof ( effect_param_t ) ) { ALOGE ( ""fx_command() <S2SV_blank> EFFECT_CMD_GET_PARAM <S2SV_blank> invalid <S2SV_blank> args"" ) ; return - EIN",0
846,"<S2SV_ModStart> ) break ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image_info -> filename ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image_info -> filename ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image_info -> filename ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image_info -> filename ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image_info -> filename ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image_info -> filename ) ; if ( length > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"", image_info -> filename",0
847,"<S2SV_ModStart> - EINVAL ; if ( copy_from_user ( & src_info, optval, sizeof ( src_info ) ) ) return - EFAULT ; <S2SV_ModStart> - EMSGSIZE ; if ( copy_from_user ( & src_info, & src_info, sizeof ( src_info ) ) ) return - EFAULT ; <S2SV_ModStart> - EMSGSIZE ; if ( copy_from_user ( & src_info, & src_info, sizeof ( src_info ) ) ) return - EINVAL ; if ( copy_from_user ( & src_info, & src_info, sizeof ( src_info ) ) ) return - EFAULT ; if ( copy_from_user ( & src_info, & src_info, sizeof ( src_info ) ) ) return - EFAULT ; <S2SV_ModStart> - EMSGSIZE ; if ( copy_from_user ( & src_info, & src_info, sizeof ( src_info ) ) ) return - EINVAL ; if ( copy_from_user ( & src_info, & src_info, sizeof ( src_info ) ) ) return - EFAULT ; if ( copy_from_user ( & src_info,",0
848,"<S2SV_ModStart> ; } } ret [ j ] = k5alloc ( sizeof ( struct berval ), & err ) ; if ( ret [ j ] == NULL ) ret [ j ] = k5alloc ( sizeof ( struct berval ), & err ) ; if ( ret [ j ] == NULL ) ret [ j ] = k5alloc ( sizeof ( struct berval ), & err ) ; if ( ret [ j ] == NULL ) ret [ j ] = k5alloc ( sizeof ( struct berval ), & err ) ; if ( ret [ j ] == NULL ) ret [ j ] = k5alloc ( sizeof ( struct berval ), & err ) ; if ( ret [ j ] == NULL ) ret [ j ] = k5alloc ( sizeof ( struct berval ), & err ) ; if ( ret [ j ] == NULL ) ret [ j ] = k5alloc ( sizeof ( struct berval ), & err ) ; if ( ret [ j ] == NULL ) ret [ j ] = k5alloc ( sizeof ( struct berval ), & err ) ; if ( ret [ j ] == NULL ) ret [ j ] = k5alloc ( sizeof ( struct berval ), & err",0
849,"<S2SV_ModStart> ; L3 = checkfutureword ( J, F, catchvar ) ; if (! strcmp ( catchvar -> string, ""arguments"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'arguments\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; if (! strcmp ( catchvar -> string, ""eval"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'eval\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; } else { checkfutureword ( J, F, catchvar ) ; if (! strcmp ( catchvar -> string, ""arguments"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'arguments\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; if (! strcmp ( catchvar -> string, ""eval"" ) ) jsC_error ( J, catchvar, ""redefining <S2SV_blank> \'eval\' <S2SV_blank> is <S2SV_blank> not <S2SV_blank> allowed <S2SV_blank> in <S2SV_blank> strict <S2SV_blank> mode"" ) ; } else { checkfutureword ( J, F, catchvar ) ; if (! strcmp ( catchvar -> string, ""eval"" ) )",0
850,"<S2SV_ModStart> if ( sscanf ( l_line, ""%u <S2SV_blank> %u <S2SV_blank> %u"", o_row_count, o_column_count, o_element_count ) == 3 ) { * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_element_count ) ) ; * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_element_count ) ) ; * o_row_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_element_count ) ) ; * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_element_count ) ) ; * o_element_count = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_element_count ) ) ; * o_row_count = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_element_count ) ) ; * o_column_idx = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( * o_",0
851,<S2SV_ModStart> 0x02 ) ; memcpy <S2SV_ModEnd> ( sbuf +,0
852,"<S2SV_ModStart> uint8 result ; <S2SV_ModEnd> STREAM s ; <S2SV_ModStart> ( s, MCS_CONNECT_RESPONSE <S2SV_ModEnd>, & length <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> connect <S2SV_blank> response <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", __func__ ) ; return False ; } <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> connect <S2SV_blank> response <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", __func__ ) ; return False ; } <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank> connect <S2SV_blank> response <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", __func__ ) ; return False ; } <S2SV_ModStart> length ) ; if (! s_check_rem ( s ) ) { rdp_protocol_error ( ""mcs_recv_connect_response(), <S2SV_blank> consume <S2SV_blank>",0
853,"<S2SV_ModStart> = NULL ; memset ( state, 0, sizeof ( struct kdc_request_state ) ) ; <S2SV_ModStart> stkt_server ) ; memset ( state, 0, sizeof ( struct kdc_request_state ) ) ; <S2SV_ModStart> stkt_server ) ; memset ( state, 0, sizeof ( struct kdc_request_state ) ) ; <S2SV_ModStart> s4u_x509_user ) ; memset ( state, 0, sizeof ( struct kdc_request_state ) ) ; memset ( state, 0, sizeof ( struct kdc_request_state ) ) ; <S2SV_ModStart> stkt_server ) ; memset ( state, 0, sizeof ( struct kdc_request_state ) ) ; memset ( state, 0, sizeof ( struct kdc_request_state ) ) ; memset ( state, 0, sizeof ( struct kdc_request_state ) ) ; <S2SV_ModStart> s4u_x509_user ) ; memset ( state, 0, sizeof ( struct kdc_request_state ) ) ; memset ( state, 0, sizeof ( struct kdc_request_state ) ) ; memset ( state, 0, sizeof ( struct kdc_request_state )",0
854,<S2SV_ModStart> ':' ) || ( ( c >= 0xC0 ) && ( c <= 0xD7 ) ) || ( ( c >= 0x3000 ) && ( c <= 0x3FFF ) ) || ( ( c >= 0x200C ) && ( c <= 0x218F ) ) || ( ( c >= 0x2C00 ) && ( c <= 0x2FEF ) ) || ( ( c >= 0xF900 ) && ( c <= 0xFDCF ) ) || ( ( c >= 0x3001 ) && ( c <= 0xD7FF ) ) || ( ( c >= 0x3001 ) && ( c <= 0x3FFF ) ) || ( ( c >= 0x2C00 ) && ( c <= 0x2FEF ) ) || ( ( c >= 0x3001 ) && ( c <= 0x3FFF ) ) ) || ( ( c >= 0x3001 ) && ( c <= 0x3FFF ) ) ) || ( ( c >= 0x3001 ) && ( c <= 0xD7FF ) ) || ( ( c >= 0x3001 ) && ( c <= 0x3FFF ) ),0
855,<S2SV_ModStart>. valid_sections |= cpu_to_le16 ( I40E_AQ_VSI_PROP_TC_QUE_MAP_VALID ) ; if ( ctxt. info. mapping_flags & I40E_AQ_VSI_QUE_MAP_CONTIG ) { ctxt. info. mapping_flags |= cpu_to_le16 ( I40E_AQ_VSI_QUE_MAP_CONTIG ) ; ctxt. info. queue_mapping [ 0 ] = cpu_to_le16 ( I40E_AQ_VSI_QUE_MAP_CONTIG ) ; ctxt. info. mapping_flags |= cpu_to_le16 ( I40E_AQ_VSI_QUE_MAP_CONTIG ) ; ctxt. info. queue_mapping [ 0 ] = cpu_to_le16 ( I40E_AQ_VSI_QUE_MAP_CONTIG ) ; ctxt. info. mapping_flags |= cpu_to_le16 ( I40E_AQ_VSI_QUE_MAP_CONTIG ) ; ctxt. info. mapping_flags |= cpu_to_le16 ( I40E_AQ,0
856,"<S2SV_ModStart> if ( * rsize >= 17 && rdesc [ 11 ] == 0x3c && rdesc [ 12 ] == 0x02 ) { hid_info ( hdev, ""fixing <S2SV_blank> up <S2SV_blank> Cherry <S2SV_blank> Cymotion <S2SV_blank> report <S2SV_blank> descriptor\\n"" ) ; rdesc [ 11 ] = rdesc [ 16 ] = 0xff ; rdesc [ 12 ] = rdesc [ 17 ] = 0x03 ; } else if ( * rsize >= 18 && rdesc [ 11 ] == 0x3c && rdesc [ 12 ] == 0x02 ) { hid_info ( hdev, ""fixing <S2SV_blank> up <S2SV_blank> Cherry <S2SV_blank> Cymotion <S2SV_blank> report <S2SV_blank> descriptor\\n"" ) ; rdesc [ 11 ] = rdesc [ 16 ] = 0xff ; rdesc [ 12 ] = rdesc [ 17 ] = 0x03 ; }",0
857,"<S2SV_ModStart> ; if ( idx >= map -> nr_extents ) { ret = - EFSCORRUPTED ; goto out ; } if ( idx >= map -> nr_extents ) { ret = - EFSCORRUPTED ; goto out ; } if ( idx >= map -> nr_extents ) { ret = - EFSCORRUPTED ; goto out ; } if ( idx >= map -> nr_extents ) { ret = - EFSCORRUPTED ; goto out ; } for ( ; pos ; pos = next_line ) { next_line = strchr ( pos, '\\n' ) ; if ( next_line ) { * next_line = '\\0' ; next_line ++ ; } if ( idx >= map -> nr_extents ) { ret = - EFSCORRUPTED ; goto out ; } if ( idx >= map -> nr_extents ) { ret = - EFSCORRUPTED ; goto out ; } for ( ; pos ; pos = next_line ) { next_line = strchr ( pos, '\\n' ) ; if ( next_line ) { * next_line = '\\0' ; next_line = NULL ;",0
858,"<S2SV_ModStart> } } } eprintf ( ""vCont;c;s"" ) ; eprintf ( ""action: <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank>",0
859,"<S2SV_ModStart> sr ) { <S2SV_ModEnd> uint16_t StructSize ; <S2SV_ModStart> ; } of = sr -> fid_ofile ; if ( ( of -> f_node -> flags & NODE_FLAGS_WRITE_THROUGH ) == 0 ) { ( void ) smb_fsop_commit ( sr, of -> f_cr, of -> f_node ) ; ( void ) smb_mbc_encodef ( & sr -> reply, ""wwl"", 4, 0 ) ; return ( SDRC_SUCCESS ) ; } of = sr -> fid_ofile ; if ( ( of -> f_node -> flags & NODE_FLAGS_WRITE_THROUGH ) == 0 ) ( void ) smb_fsop_commit ( sr, of -> f_cr, of -> f_node ) ; ( void ) smb_mbc_encodef ( & sr -> reply, ""wwl"", 4, 0 ) ; return ( SDRC_SUCCESS ) ; }",0
860,<S2SV_ModStart> * streams ; jas_uchar <S2SV_ModEnd> * dataptr ;,1
861,<S2SV_ModStart> -> y_offset ; int recon_uv_offset = yv12_fb_new -> uv_stride ; int recon_y_offset = yv12_fb_new -> y_offset ; int recon_uv_offset = yv12_fb_new -> uv_offset ; int recon_uv_offset = yv12_fb_new -> uv_offset ; int recon_x_offset = yv12_fb_new -> x_offset ; int recon_y_offset = yv12_fb_new -> y_offset ; int recon_uv_offset = yv12_fb_new -> uv_offset ; int recon_x_offset = yv12_fb_new -> x_offset ; int recon_y_offset = yv12_fb_new -> y_offset ; int recon_uv_offset = yv12_fb_new -> uv_offset ; int recon_x_offset = yv12_fb_new -> x_offset ; int recon_y_offset = yv12_fb_new -> y_offset ; int recon_uv_offset = yv12_fb_new -> uv_offset ; int,0
862,<S2SV_ModStart> = AF_TIPC ; addr -> addr. id. ref = msg_origport ( msg ) ; addr -> addr. id. node = msg_orignode ( msg ) ;,0
863,<S2SV_ModStart> goto out ; r = - EINVAL ; if ( mem -> userspace_addr & ( PAGE_SIZE - 1 ) ) goto out ; if ( mem -> slot >= KVM_MEMORY_SLOTS + KVM_PRIVATE_MEM_SLOTS ) goto out ; if ( mem -> guest_phys_addr + mem -> memory_size < mem -> guest_phys_addr ) goto out ;,0
864,<S2SV_ModStart> NULL ) ; } quantum_info = DestroyQuantumInfo ( quantum_info ) ;,0
865,<S2SV_ModStart> ; if ( tmp_line [ HTTP_HEADER_BLOCK_SIZE ] == '\\0' ) { tmp_line [ HTTP_HEADER_BLOCK_SIZE ] = '\\0' ; } if ( tmp_line [ HTTP_HEADER_BLOCK_SIZE - 1 ] == '\\0' ) { tmp_line [ HTTP_HEADER_BLOCK_SIZE - 1 ] = '\\0' ; } if ( tmp_line [ HTTP_HEADER_BLOCK_SIZE - 1 ] == '\\0' ) { tmp_line [ HTTP_HEADER_BLOCK_SIZE - 1 ] = '\\0' ; tmp_line [ HTTP_HEADER_BLOCK_SIZE - 1 ] = '\\0' ; } if ( tmp_line [ HTTP_HEADER_BLOCK_SIZE - 1 ] == '\\0' ) { tmp_line [ HTTP_HEADER_BLOCK_SIZE - 1 ] = '\\0' ; } if ( tmp_line [ HTTP_HEADER_BLOCK_SIZE - 1 ] == '\\0' ) { tmp_line [ HTTP_HEADER_BLOCK_SIZE - 1 ] = '\\0' ; tmp_line [ HTTP_HEADER_BLOCK_SIZE - 1 ] = '\\0' ; } if ( tmp_line [ HTTP_,0
866,"<S2SV_ModStart> len ) { <S2SV_ModEnd> char * buf <S2SV_ModStart> char * p <S2SV_ModEnd> ; const char <S2SV_ModStart> char * end ; if ( len > SIZE_MAX / 6 ) return NULL ; u = PyBytes_FromStringAndSize ( ( char * ) NULL, len * 6 ) ; if ( u == NULL ) return NULL ; p = buf = PyBytes_AsString ( u ) ; end = s + len ; while ( s < end ) { if ( * s & 0x80 ) { strcpy ( p, ""u005c"" ) ; p += 5 ; } } if ( * s & 0x80 ) { * p ++ = * s ++ ; if ( * s & 0x80 ) { * p ++ = * s ++ ; if ( * s & 0x80 ) { * p ++ = * s ++ ; } if ( * s & 0x80 ) { * p ++ = * s ++ ; if ( * s & 0x80 ) { * p ++ = * s ++ ; } if ( * s & 0x80 ) { * p ++ = * s ++ ; } if ( * s & 0x80 ) { * p ++ = * s ++ ; if ( * s & 0x80",0
867,"<S2SV_ModStart> data_size > ( size_t ) sizeof ( evt_record_event_header_t ) ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."", function ) ; return ( - 1 ) ; } if ( data_size > ( size_t ) SSIZE_MAX ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."", function ) ; return ( - 1 ) ; } if ( data_size > ( size_t ) sizeof ( evt_record_event_header_t ) ) { libcerror_error_set ( error, LIBCERROR_ERROR_DOMAIN_ARGUMENTS, LIBCERROR_ARGUMENT_ERROR_INVALID_VALUE, ""%s: <S2SV_blank> invalid <S2SV_blank> record <S2SV_blank> data <S2SV_blank> size <S2SV_blank> value <S2SV_blank> exceeds <S2SV_blank> maximum."", function ) ; return ( -",0
868,"<S2SV_ModStart> uint32_t bcount ; if (! DoReadFile ( infile, & chunk_header, sizeof ( Wave64ChunkHeader ), & bcount ) || bcount!= sizeof ( Wave64ChunkHeader ) || memcmp ( chunk_header. ckID, riff_guid, sizeof ( riff_guid ) ) || memcmp ( chunk_header. formType, wave_guid, sizeof ( wave_guid ) ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if (! DoReadFile ( infile, & chunk_header, sizeof ( Wave64ChunkHeader ), & bcount ) || bcount!= sizeof ( Wave64ChunkHeader ) || memcmp ( chunk_header. ckID, riff_guid, sizeof ( riff_guid ) ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; }",0
869,"<S2SV_ModStart> ; if (! DoReadFile ( infile, & dff_chunk_header, sizeof ( DFFChunkHeader ), & bcount ) || bcount!= sizeof ( DFFChunkHeader ) - 4 ) || strncmp ( dff_chunk_header. formType, ""DSD <S2SV_blank> "", 4 ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if (! DoReadFile ( infile, & dff_chunk_header, sizeof ( DFFChunkHeader ), & bcount ) || bcount!= sizeof ( DFFChunkHeader ) - 4 ) || strncmp ( dff_chunk_header. formType, ""DSD <S2SV_blank> "", 4 ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.DFF <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } if (! DoReadFile ( infile, & dff_chunk_header, sizeof ( DFFChunkHeader ), & bcount ) || bcount!= sizeof ( DFFChunkHeader ) - 4",0
870,"<S2SV_ModStart> SNDRV_TLG_RUNNING ; spin_unlock_irqrestore ( & timeri -> lock, flags ) ; goto __end ; } if ( timeri -> flags & SNDRV_TIMER_IFLG_RUNNING ) { spin_unlock_irqrestore ( & timeri -> lock, flags ) ; timeri -> flags &= ~ SNDRV_TIMER_IFLG_RUNNING ; spin_unlock_irqrestore ( & timeri -> ack_list ) ; list_del_init ( & timeri -> active_list ) ; if ( ( timeri -> flags & SNDRV_TLG_RUNNING ) &&! ( timeri -> flags & SNDRV_TIMER_IFLG_RUNNING ) ) { spin_lock_irqsave ( & timeri -> lock, flags ) ; snd_timer_notify1 ( timeri, SNDRV_TIMER_EVENT_RESOLUTION ) snd_timer_notify1 ( timeri, SNDRV_TIMER_EVENT_RESOLUTION ) snd_timer_notify1 ( timeri, SNDRV_TIMER_EVENT_RESOLUTION )",0
871,"<S2SV_ModStart> BUF buffer ; <S2SV_ModEnd> int setimes, <S2SV_ModStart>, targisdir, wrerrno <S2SV_ModEnd> ; char ch <S2SV_ModStart> stb. st_mode <S2SV_ModEnd> ; if ( <S2SV_ModStart> stb. st_mode & S_IFMT ) { if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> read <S2SV_blank> stat <S2SV_blank> file"", __func__ ) ; exit ( 1 ) ; } <S2SV_ModStart> stb. st_mode & S_IFMT ) { if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> read <S2SV_blank> stat <S2SV_blank> file"", __func__ ) ; exit ( 1 ) ; } if ( stb. st_mode & S_IFMT ) { if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> read <S2SV_blank> stat <S2SV_blank> file"", __func__ ) ; exit ( 1 ) ; } <S2SV_ModStart> stb. st_mode & S_IFMT ) { if ( stat ( targ, & stb )!= 0 ) fatal ( ""%s: <S2SV_blank> could <S2SV_blank> not <S2SV_blank> read <S2SV_blank> stat <S2SV_blank> file"", __func__ ) ; exit ( 1 ) ; }",0
872,"<S2SV_ModStart> } else if ( myentity_find_ext ( target ) == NULL ) { do_list ( si, mc, 0 ) ; free ( target ) ; return ; } else if ( myentity_find_ext ( target ) == NULL ) { do_clear ( si, mc, 0 ) ; free ( target ) ; return ; } else if ( myentity_find_ext ( target ) == NULL ) { do_clear ( si, mc, 0 ) ; free ( target ) ; return ; } if ( metadata_find ( mc, ""private:close:closer"" ) && ( target || has_priv ( si, PRIV_CHAN_AUSPEX ) ) ) { command_fail ( si, fault_noprivs, _ ( ""\\2%s\\2 <S2SV_blank> is <S2SV_blank> closed."" ), channel ) ; return ; } if ( metadata_find ( mc, ""private:close:closer"" ) && ( target || has_priv ( si, PRIV_CHAN_AUSPEX ) ) ) { command_fail ( si, fault_noprivs, _ ( ""\\2%s\\2 <S2SV_blank> is <S2SV_blank> closed."" ), channel ) ;",0
873,"<S2SV_ModStart> buffer ; memcpy ( dst, buf, GHASH_BLOCK_SIZE ) ;",0
874,"<S2SV_ModStart> goto error ; ret = avio_get_str16le ( pb, desc_len, desc, sizeof ( desc ) ) ; if ( ret ) goto error ; ret = avio_get_str16le ( pb, desc_len, desc, sizeof ( desc ) ) ; if ( ret ) goto error ; ret = avio_get_str16le ( pb, desc_len, desc, sizeof ( desc ) ) ; if ( ret ) goto error ; ret = avio_get_str16le ( pb, desc_len, desc, desc, sizeof ( desc ) ) ; if ( ret ) goto error ; ret = avio_get_str16le ( pb, desc_len, desc, sizeof ( desc ) ) ; if ( ret ) goto error ; ret = avio_get_str16le ( pb, desc_len, desc, sizeof ( desc ) ) ; if ( ret ) goto error ; ret = avio_get_str16le ( pb, desc_len, desc, desc, sizeof ( desc ) ) ; if ( ret ) goto error ; ret = avio_get_str16le ( pb,",0
875,"<S2SV_ModStart> null_server ; int need_error_free = 0 ; int local_rcache = 0, local_authcon = 0 ; problem = 0 ; response = 0 ; if ( flags & KRB5_RECVAUTH_SKIP_VERSION ) { if ( retval = krb5_read_message ( context, fd, & inbuf ) ) ) return retval ; if ( strcmp ( inbuf. data, sendauth_version ) ) { problem = KRB5_SENDAUTH_BADAUTHVERS ; response = 1 ; } } if ( flags & KRB5_RECVAUTH_SKIP_APPLVERS ) { if ( retval = krb5_read_message ( context, fd, & inbuf ) ) ) return retval ; if ( retval = krb5_read_message ( context, fd, & inbuf ) ) ) return retval ; if ( retval = krb5_read_message ( context, fd, & inbuf ) ) ) return retval ; if ( retval = krb5_read_message ( context, fd, & inbuf ) ) ) return retval ; if ( retval = krb5_read_message ( context, fd, & inbuf ) )",0
876,"<S2SV_ModStart> int write_bit_gte ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> test ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
877,"<S2SV_ModStart> { ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( ret < 0 ) return ret ; ret = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode",0
878,"<S2SV_ModStart> ++ = 0xAA ; memcpy ( dptr, & rose -> dest_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> dest_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, & rose -> source_addr, ROSE_ADDR_LEN ) ; dptr += ROSE_ADDR_LEN ; memcpy ( dptr, buffer, faclen ) ; dptr += faclen ; break ; case ROSE_CLEAR_REQUEST : * dptr ++ = ROSE_GFI | lci1 ; * dptr ++ = ROSE_GFI | lci2 ; * dptr ++ = frametype ; * dptr ++ = 0x00 ; * dptr",0
879,"<S2SV_ModStart> = new_ns ; q = next_mnt ( q, new ) ; if (! q ) break ; if ( & p -> mnt == new_fs -> root. mnt ) { new_fs -> root. mnt = mntget ( & q -> mnt ) ; rootmnt = & p -> mnt ; pwdmnt = & q -> mnt ; } if ( & p -> mnt == new_fs -> pwd. mnt ) { new_fs -> pwd. mnt = mntget ( & q -> mnt ) ; pwdmnt = & p -> mnt ; } if ( & p -> mnt == new_fs -> root. mnt ) { new_fs -> root. mnt = mntget ( & q -> mnt ) ; rootmnt = & p -> mnt ; } if ( & p -> mnt == new_fs -> pwd. mnt ) { new_fs -> pwd. mnt = mntget ( & q -> mnt ) ; pwdmnt = & p -> mnt ; }",0
880,<S2SV_ModStart> ; if ( ( width & 0xf )!= 0 ) width += 16 ; if ( ( height & 0xf )!= 0 ) height += 16 ; if ( ( width & 0xf )!= 0 ) width += 16 ; if ( ( height & 0xf )!= 0 ) height += 16 ; if ( ( height & 0xf )!= 0 ) height += 16 ; if ( ( width & 0xf )!= 0 ) width += 16 ; if ( ( height & 0xf )!= 0 ) height += 16 ; if ( ( height & 0xf )!= 0 ) height += 16 ; if ( ( width & 0xf )!= 0 ) width += 16 ; if ( ( height & 0xf )!= 0 ) height += 16 ; if ( ( width & 0xf )!= 0 ) width += 16 ; if ( ( height & 0xf )!= 0 ) height += 16 ; if ( ( height & 0xf )!= 0 ) height += 16 ; if ( ( width & 0xf )!= 0 ) width += 16 ; if ( ( height & 0xf )!= 0 ) height += 16 ; if ( ( height & 0xf )!= 0 ) height += 16 ; if ( ( width & 0xf )!= 0 ) width,0
881,<S2SV_ModStart> get_properties = php_zip_get_properties ; zip_object_handlers. read_property = php_zip_read_property ; zip_object_handlers. has_property = php_zip_has_property ;,0
882,<S2SV_ModStart> case RXE_MEM_TYPE_FMR : switch ( mem -> type ) { case RXE_MEM_TYPE_MR : case RXE_MEM_TYPE_FMR : return ( ( iova + length ) < mem -> iova ) || ( ( iova + length ) > ( mem -> iova + mem -> length ) ) )? - EFAULT : 0 ; case RXE_MEM_TYPE_FMR : return ( ( iova < mem -> iova ) || ( ( iova + length ) > ( mem -> iova + mem -> length ) ) )? - EFAULT : 0 ; case RXE_MEM_TYPE_FMR : return ( ( iova < mem -> iova ) || ( ( iova + length ) > ( mem -> iova + length ) ) )? - EFAULT : 0 ; case RXE_MEM_TYPE_MR : case RXE_MEM_TYPE_FMR : return ( ( iova < mem -> iova ) || ( iova + length ) > ( mem -> iova + length ) )? - EFAULT : 0 ; case RXE_MEM_TYPE_FMR,0
883,<S2SV_ModStart> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
884,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char *",1
885,"<S2SV_ModStart> ; * sent = 0 ; if ( n_vec > 15 ) { cERROR ( 1, ""sends <S2SV_blank> on <S2SV_blank> sock <S2SV_blank> %p <S2SV_blank> stuck <S2SV_blank> for <S2SV_blank> 15 <S2SV_blank> seconds"", ssocket ) ; rc = - EAGAIN ; break ; } if ( i >= 14 || (! server -> noblocksnd && ( i > 2 ) ) ) { cERROR ( 1, ""sends <S2SV_blank> on <S2SV_blank> sock <S2SV_blank> %p <S2SV_blank> stuck <S2SV_blank> for <S2SV_blank> 15 <S2SV_blank> seconds"", ssocket ) ; rc = - EAGAIN ; break ; } if ( i >= 14 || (! server -> noblocksnd && ( i > 2 ) ) ) { cERROR ( 1, ""sends <S2SV_blank> on <S2SV_blank> sock <S2SV_blank> %p <S2SV_blank> stuck <S2SV_blank> for <S2SV_blank> 15 <S2SV_blank> seconds"", ssocket ) ; rc = - EAGAIN ; break ; } if ( rc > remaining ) { cERROR ( 1, ""sends <S2SV_blank> on <S2SV_blank> sock <S2SV_blank> %p <S2SV_blank> stuck <S2SV_blank> for <S2SV_blank> 15 <S2SV_blank> seconds"", ssocket ) ; rc = - EAGAIN ; break ; } if ( rc > remaining ) { cERROR ( 1, ""sends <S2SV_blank> on <S2SV_blank> sock <S2SV_blank> %p <S2SV_blank> stuck",0
886,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> buffer_pipe_buf_get ( struct <S2SV_ModStart> -> private ; return <S2SV_ModEnd> ref -> ref <S2SV_ModStart> -> ref ++ ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
887,"<S2SV_ModStart> FAT_ENTRY subseqEntry ; <S2SV_ModEnd> get_fat ( & <S2SV_ModStart> clusters - 1 ) get_fat ( & subseqEntry, fs -> fat, cluster + 1, fs ) ; else subseqEntry. value = 0 ; data [ 0 ] = new & 0xff ; data [ 1 ] = ( 0xff & subseqEntry. value ) << 4 ; } break ; case 24 : data = fs -> fat + cluster * 2 ; offs = fs -> fat_start + cluster * 2 ; if ( cluster & 1 ) get_fat ( & subseqEntry, fs -> fat, cluster - 1, fs ) ; if ( cluster & 1 ) get_fat ( & subseqEntry, fs -> fat, cluster + 1, fs ) ; if ( cluster & 1 ) get_fat ( & subseqEntry, fs -> fat, cluster - 1, fs ) ; if ( cluster & 1 ) get_fat ( & subseqEntry, fs -> fat, cluster + 1, fs ) ; if ( cluster & 1 ) get_fat ( & subseqEntry, fs -> fat, cluster + 1, fs ) ; if ( cluster &",0
888,<S2SV_ModStart> return ; memcpy <S2SV_ModEnd> ( & t_above <S2SV_ModStart> ) ) ; memcpy <S2SV_ModEnd> ( & t_left,0
889,<S2SV_ModStart> sk_nulls_node ) ; isk -> inet_num = 0 ; isk -> inet_sport = 0 ;,0
890,<S2SV_ModStart> i2_cur_mb_addr ; ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> u2_total_mbs_coded += u1_num_mbs ; <S2SV_ModStart> i2_pic_wdin_mbs ; ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> u2_total_mbs_coded += u1_num_mbs ; <S2SV_ModStart> i2_pic_wdin_mbs ; ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> u2_total_mbs_coded += u1_num_mbs ;,0
891,<S2SV_ModStart> ; if ( unlikely (! mmget_still_valid ( mm ) ) ) return - EFAULT ; page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; if (! page ) page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; if (! page ) page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; if (! page ) page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; if (! page ) page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; if (! page ) page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; if (! page ) page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; if (! page ) page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; if (! page ) page = ( char * ) __get_free_page ( GFP_TEMPORARY ) ; if,0
892,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModStart> int result = parse_rock_ridge_inode_internal <S2SV_ModEnd> ( de, <S2SV_ModStart> ) ) { if ( ( ISOFS_SB ( inode -> i_sb ) -> s_rock_offset == - 1 ) && ( ISOFS_SB ( inode -> i_sb ) -> s_rock == 2 ) ) { result = parse_rock_ridge_inode_internal ( de, inode, 14 ) ; } else { <S2SV_ModEnd> result = parse_rock_ridge_inode_internal",0
893,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> struct fsnotify_group * <S2SV_ModStart> = 0 ; <S2SV_ModEnd> group -> inotify_data <S2SV_ModStart> = 0 ; <S2SV_ModEnd> return group ;,0
894,"<S2SV_ModStart> in ) ; if ( in -> linesize [ p ]!= in -> linesize [ p ] ) av_image_copy_plane ( out -> data [ p ], out -> linesize [ p ], in -> data [ p ], in -> linesize [ p ], w, h ) ; else if ( out -> data [ p ]!= in -> data [ p ] ) av_image_copy_plane ( out -> data [ p ], out -> linesize [ p ], in -> data [ p ], w, h ) ; else if ( out -> data [ p ]!= in -> data [ p ] ) av_image_copy_plane ( out -> data [ p ], out -> linesize [ p ], in -> data [ p ], w, h ) ; else if ( out -> data [ p ]!= in -> data [ p ] ) av_image_copy_plane ( out -> data [ p ], out -> linesize [ p ], in -> data [ p ], w, h ) ;",0
895,"<S2SV_ModStart> ) ; if ( screen -> buffers [ 0 ] ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 0 ] ) ; if ( screen -> buffers [ 1 ] && screen -> sb_buffer ) vterm_allocator_free ( screen -> vt, screen -> sb_buffer ) ; if ( screen -> buffers [ 2 ] ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 2 ] ) ; if ( screen -> buffers [ 3 ] ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 3 ] ) ; if ( screen -> buffers [ 4 ] ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 4 ] ) ; vterm_allocator_free ( screen -> vt, screen -> buffers [ 5 ] ) ; if ( screen -> buffers [ 3 ] ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 3 ] ) ; if ( screen -> buffers [ 4 ] ) vterm_allocator_free ( screen -> vt, screen -> buffers [ 4 ] ) ; if ( screen -> buffers [ 5 ] ) vterm_allocator_free ( screen -> vt, screen ->",0
896,"<S2SV_ModStart> ( env, ""dereference <S2SV_blank> of <S2SV_blank> modified <S2SV_blank> ctx <S2SV_blank> ptr <S2SV_blank> R%d <S2SV_blank> off=%d+%d, <S2SV_blank> ctx+const <S2SV_blank> is <S2SV_blank> allowed, <S2SV_blank> ctx+const+const <S2SV_blank> is <S2SV_blank> not\\n"", regno, reg -> off, off - reg -> off <S2SV_ModStart> ( env, ""dereference <S2SV_blank> of <S2SV_blank> modified <S2SV_blank> ctx <S2SV_blank> ptr <S2SV_blank> R%d <S2SV_blank> off=%d+%d, <S2SV_blank> ctx+const <S2SV_blank> is <S2SV_blank> not\\n"", regno, reg -> off, off - reg -> off ) ; return - EACCES ; } if (! tnum_is_const ( reg -> var_off ) ) { verbose ( env, ""dereference <S2SV_blank> of <S2SV_blank> modified <S2SV_blank> ctx <S2SV_blank> ptr <S2SV_blank> R%d <S2SV_blank> off=%d+%d, <S2SV_blank> ctx+const <S2SV_blank> is <S2SV_blank> allowed, <S2SV_blank> ctx+const <S2SV_blank> is <S2SV_blank> not\\n"", regno, reg -> off, off - reg -> off ) ; return - EACCES ; } if (! tnum_is_const ( reg -> var_off ) ) { verbose ( env, ""dereference <S2SV_blank> of <S2SV_blank> modified <S2SV_blank> ctx <S2SV_blank> ptr <S2SV_blank> R%d <S2SV_blank> off=%d",0
897,"<S2SV_ModStart> uint16 strip, nstrips = TIFFNumberOfStrips ( in ) ; uint32 stripsize = TIFFStripSize ( in ) ; uint32 rows = 0 ; tsize_t scanline_size = TIFFGetFieldDefaulted ( in, TIFFTAG_ROWSPERSTRIP, & rps ) ; if ( scanline_size == 0 ) { TIFFError ( """", ""TIFF <S2SV_blank> scanline <S2SV_blank> size <S2SV_blank> is <S2SV_blank> zero!"" ) ; return 0 ; } for ( strip = 0 ; strip < ( nstrips - 1 ) ; strip ++ ) { bytes_read = TIFFReadEncodedStrip ( in, strip, bufp, - 1 ) ; rows = bytes_read / scanline_size ; if ( bytes_read < 0 &&! ignore ) { TIFFError ( """", ""Error <S2SV_blank> reading <S2SV_blank> strip <S2SV_blank> %lu <S2SV_blank> after <S2SV_blank> %lu <S2SV_blank> rows"", ( unsigned long ) strip, ( unsigned long ) rows ) ; return 0 ; } for ( strip = 0 ; strip < nstrips ; strip ++ ) { bytes_read = TIFFReadEncodedStrip ( in, strip, bufp, - 1 ) ; rows = bytes_read / scanline_size ; if ( bytes_read",0
898,"<S2SV_ModStart> base_name ) ; <S2SV_ModEnd> struct search_domain * <S2SV_ModStart> const char need_to_append_dot = base_name [ base_len - 1 ] == '.'? 0 : 1 ; <S2SV_ModStart> struct search_domain * dom ; if ( state -> head == NULL ) return NULL ; for ( dom = state -> head ; dom ; dom = dom -> next ) { if (! n -- ) { const u8 * const postfix = ( ( u8 * ) dom ) + sizeof ( struct search_domain ) ; if (! postfix ) { const int postfix_len = dom -> len ; if ( need_to_append_dot ) newname [ base_len ] = '.' ; memcpy ( newname, base_name, base_len ) ; if ( need_to_append_dot ) newname [ base_len ] = '.' ; memcpy ( newname + base_len + need_to_append_dot, postfix, postfix_len ) ; newname [ base_len + need_to_append_dot + postfix_len ] = 0 ; }",0
899,<S2SV_ModStart> { err = TEMP_FAILURE_RETRY ( <S2SV_ModStart> & delay ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> & delay ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> & delay ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> & delay ) ; TEMP_FAILURE_RETRY (,0
900,<S2SV_ModStart> goto out ; <S2SV_ModEnd> err = -,1
901,"<S2SV_ModStart>, one ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> number_planes_filled ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> number_planes_filled ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" <S2SV_ModStart> number_planes_filled ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""ImproperImageHeader""",0
902,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> nsc_rle_decompress_data ( NSC_CONTEXT <S2SV_ModStart> UINT32 originalSize ; BYTE * rle ; UINT16 i ; for ( i = 0 ; i < 4 ; i ++ ) { originalSize = context -> OrgByteCount [ i ] ; planeSize = context -> PlaneByteCount [ i ] ; if ( planeSize == 0 ) FillMemory ( rle, originalSize, 0xFF ) ; else if ( planeSize < originalSize ) { nsc_rle_decode ( rle, context -> priv -> PlaneBuffers [ i ], originalSize ) ; } else if ( planeSize < originalSize ) { nsc_rle_decode ( rle, context -> priv -> PlaneBuffers [ i ], originalSize ) ; } else if ( planeSize < originalSize ) { nsc_rle_decode ( rle, context -> priv -> PlaneBuffers [ i ], originalSize ) ; } else if ( planeSize < originalSize ) { nsc_rle_decode ( rle, context -> priv -> PlaneBuffers [ i ], originalSize )",0
903,<S2SV_ModStart> policy ) { if (! inode_has_encryption_context ( inode ) ) return - EOPNOTSUPP ; if (! inode -> i_sb -> s_cop -> empty_dir ) return - ENOTEMPTY ; if (! inode -> i_sb -> s_cop -> empty_dir ) return - EOPNOTSUPP ; if (! inode -> i_sb -> s_cop -> empty_dir ( inode ) ) return - ENOTEMPTY ; if (! inode -> i_sb -> s_cop -> empty_dir ( inode ) ) return - EOPNOTSUPP ; if (! inode -> i_sb -> s_cop -> empty_dir ( inode ) ) return - ENOTEMPTY ; if (! inode_has_encryption_context ( inode ) ) return - EOPNOTSUPP ; if (! inode -> i_sb -> s_cop -> empty_dir ( inode ) ) return - ENOTEMPTY ; if (! inode -> i_sb -> s_cop -> empty_dir ( inode ) ) return - EOPNOTSUPP ; if (! inode -> i_sb -> s_cop -> empty_dir ( inode ) ) return - ENOTEM,0
904,"<S2SV_ModStart> value ) { if ( stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } else if ( stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; } if ( value ) { if ( stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; } else if ( stok ( sclone ( value ), "" <S2SV_blank> \\t,"", NULL ) ) { httpSetRouteName ( state -> route, sfmt ( ""default-%s"", state -> host -> name ) ) ; state -> endpoints = sclone ( value ) ; }",0
905,"<S2SV_ModStart> = current_cred ( ) <S2SV_ModEnd>,. match_data <S2SV_ModStart> match_data. cmp = type -> match_cmp <S2SV_ModEnd>,. match_data <S2SV_ModStart> match_data. lookup_type = KEYRING_SEARCH_LOOKUP_DIRECT ; ret = request_key ( key, description, callout_info, callout_len, aux, dest_keyring, flags ) ; if ( ret < 0 ) { key = ERR_PTR ( ret ) ; goto error_free ; } ret = request_key ( key, description, callout_info, callout_len, aux, dest_keyring, flags ) ; if ( ret < 0 ) { key_put ( key ) ; ret = ERR_PTR ( ret ) ; goto error_free ; } ret = request_key ( key, description, callout_info, callout_len, aux, dest_keyring, flags ) ; if ( ret < 0 ) { ret = ERR_PTR ( ret ) ; goto error_free ; } ret = request_key ( key, description, callout_info, callout_len, aux, dest_keyring, flags ) ; if ( ret < 0 ) {",0
906,<S2SV_ModStart> ) return - EOPNOTSUPP <S2SV_ModEnd> ; if (,0
907,"<S2SV_ModStart>! job_id ||! prev_hash ||! coinbase1 ||! coinbase2 ||! bbversion ||! nbit ||! ntime ) { if ( job_id ) free ( job_id ) ; if ( coinbase1 ) free ( coinbase1 ) ; if ( coinbase2 ) free ( coinbase2 ) ; goto out ; } cg_wlock ( & pool -> data_lock ) ; pool -> swork. job_id = job_id ; snprintf ( pool -> prev_hash, 65, ""%s"", prev_hash ) ; snprintf ( pool -> bbversion, 9, ""%s"", bbversion ) ; snprintf ( pool -> nbit, 9, ""%s"", nbit ) ; snprintf ( pool -> ntime, 9, ""%s"", ntime ) ; pool -> swork. clean = clean ;",0
908,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> transmitted_length, length )",1
909,"<S2SV_ModStart> size ) { size_t res ; if ( num > SIZE_MAX / size ) { rdp_protocol_error ( ""xcalloc"", num, size ) ; return NULL ; } res = safe_calloc ( num, size ) ; if ( res ) { rdp_protocol_error ( ""xcalloc"", res ) ; return NULL ; } if (! res ) { rdp_protocol_error ( ""xcalloc"", num, size ) ; return NULL ; } ptr = safe_calloc ( num, size ) ; if (! ptr ) { rdp_protocol_error ( ""xcalloc"", num, size ) ; return NULL ; } if ( num > SIZE_MAX / size ) { rdp_protocol_error ( ""xcalloc"", num, size ) ; return NULL ; } if (! res ) { rdp_protocol_error ( ""xcalloc"", num, size ) ; return NULL ; } ptr = safe_calloc ( num, size ) ; if (! ptr ) { rdp_protocol_error ( ""xcalloc"", num, size ) ; return NULL ; }",0
910,<S2SV_ModStart> ioc ) ; } <S2SV_ModStart> ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,1
911,"<S2SV_ModStart> unused ) { _Py_IDENTIFIER ( __dict__ ) ; <S2SV_ModStart> * dict = _PyObject_GetAttrId <S2SV_ModEnd> ( self, <S2SV_ModStart>, & PyId___dict__ ) ; if ( dict == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( _PyObject_GetAttrId ( self, & PyId___dict__ ) == NULL ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( dict ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( dict ) { if ( PyErr_ExceptionMatches ( PyExc_AttributeError ) ) PyErr_Clear ( ) ; else return NULL ; } if ( dict ) { res = Py_BuildValue ( ""O()O"", Py_TYPE ( self ), dict ) ; Py_DECREF ( dict ) ; return res ; } <S2SV_ModEnd> return res ;",0
912,"<S2SV_ModStart> wTotalLength ), USB_DT_OTG <S2SV_ModEnd>, ( void <S2SV_ModStart> * ) & desc ) ; if (! desc ) return 0 ; if ( desc -> bmAttributes & USB_OTG_HNP ) { dev_info ( & udev -> dev, ""Dual-Role <S2SV_blank> OTG <S2SV_blank> device <S2SV_blank> on <S2SV_blank> %sHNP <S2SV_blank> port\\n"", ( port1 == bus -> otg_port )? """" : ""non-"" ) ; } else if ( port1 == bus -> otg_port ) { dev_info ( & udev -> dev, ""Dual-Role <S2SV_blank> OTG <S2SV_blank> device <S2SV_blank> on <S2SV_blank> %sHNP <S2SV_blank> port\\n"", ( port1 == bus -> otg_port )? """" : ""non-"" ) ; if ( port1 == bus -> otg_port ) { bus -> b_hnp_enable = 1 ; err = usb_control_msg ( udev, 0, USB_REQ_SET_FEATURE, 0, USB_DEVICE_B_HNP_ENABLE, 0, NULL, 0, USB_CTRL_SET_TIMEOUT ) ; if ( err < 0 ) dev_err",0
913,"<S2SV_ModStart> -> private_data ; u64 <S2SV_ModEnd> flags = arg <S2SV_ModStart> ) ; case PERF_EVENT_IOC_PERIOD : return perf_event_period ( event, ( u64 __user * ) arg ) ; case PERF_EVENT_IOC_ID : { u64 id = primary_event_id ( event ) ; if ( copy_to_user ( ( void __user * ) arg, & id, sizeof ( id ) ) ) return - EFAULT ; return 0 ; } case PERF_EVENT_SET_OUTPUT : { int ret ; if ( arg!= - 1 ) { struct perf_event * output_event ; struct fd output ; ret = perf_fget_light ( arg, & output ) ; if ( ret ) return ret ; output_event = output. file -> private_data ; ret = perf_event_set_output ( event, output_event ) ; fdput ( output ) ; } else { ret = perf_event_set_output ( event, NULL ) ; } ret = perf_event_set_output ( event, output_event ) ; fdput ( output ) ; ret = perf_event_set_filter ( event, output_event )",0
914,"<S2SV_ModStart> prr_delivered += newly_acked_sacked ; if ( delta < 0 ) { u64 dividend = ( u64 ) tp -> snd_ssthresh * tp -> prr_delivered + tp -> prior_cwnd ; sndcnt = div_u64 ( dividend, tp -> prior_cwnd ) - tp -> prr_out ; } else if ( ( flag & FLAG_RETRANS_DATA_ACKED ) &&! ( flag & FLAG_LOST_RETRANS ) ) { u64 dividend = ( u64 ) tp -> snd_ssthresh * tp -> prr_delivered + tp -> prior_cwnd - 1 ; sndcnt = div_u64 ( dividend, tp -> prior_cwnd ) - tp -> prr_out ; }",0
915,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static PREDICTION_MODE <S2SV_ModEnd> read_intra_mode_uv ( VP9_COMMON <S2SV_ModStart> cm, vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> y_mode ) { PREDICTION_MODE <S2SV_ModEnd> uv_mode = read_intra_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> uv_mode_prob [ y_mode",0
916,<S2SV_ModStart> mask ) { struct crypto_skcipher * skcipher = crypto_alloc_skcipher ( type ) ; if (! skcipher ) { crypto_free_skcipher ( name ) ; return NULL ; } <S2SV_ModStart> mask ) ; skcipher = crypto_alloc_skcipher ( type ) ; if (! skcipher ) { crypto_free_skcipher ( name ) ; return NULL ; },0
917,"<S2SV_ModStart> ; if ( cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> vdata -> version < CCP_VERSION ( 4, 0 ) || cmd_q -> ccp -> v",0
918,<S2SV_ModStart> tile_height ) { av_free ( c -> jpeg_tile ) ; c -> jpeg_tile = av_mallocz ( c -> tile_stride * aligned_height ) ; c -> synth_tile = av_mallocz ( c -> tile_stride * aligned_height ) ; c -> jpeg_tile = av_mallocz ( c -> tile_stride * aligned_height ) ; c -> kempf_flags = av_mallocz ( c -> kempf_buf ) ; c -> kempf_flags = av_mallocz ( c -> jpeg_tile_stride * aligned_height + FF_INPUT_BUFFER_PADDING_SIZE ) ; c -> synth_tile = av_mallocz ( c -> tile_stride * aligned_height ) ; c -> jpeg_tile = av_mallocz ( c -> tile_stride * aligned_height ) ; c -> kempf_buf = av_mallocz ( c -> kempf_buf ) ; c -> kempf_flags = av_mallocz ( c -> jpeg_tile_stride * aligned_height + FF_INPUT_BUFFER_PADDING_SIZE,0
919,"<S2SV_ModStart> sizeof iv ) ; rb_object_get ( self, rb_object_get ( self, rb_object_get ( self, rb_object_get ( self, rb_object_get ( self, rb_object_get ( self, rb_object_get ( ) ) ) ), rb_object_get ( self, rb_object_get ( ) ), rb_object_get ( self, rb_object_get ( ) ) ) ) ; rb_object_put ( self, rb_object_get ( self, rb_object_get ( self, rb_object_get ( self, rb_object_get ( self, rb_object_get ( self, rb_object_get ( self, rb_object_get ( ) ) ) ) ), rb_object_get ( self, rb_object_get ( ) ) ) ) ; rb_object_put ( self, rb_object_get ( self, rb_object_get ( self, rb_object_get ( self, rb_object_get ( self ) ) ) ) ) ; rb_object_put ( self, rb_object_get ( self, rb_object_get",0
920,<S2SV_ModStart> { * dstptr2 = * dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr += 2 * stride ; srcptr += stride ; } srcptr = buf ; dstptr = & a [ ( 1 - parity ) * stride ] ; dstptr = & a [ ( 1 - parity ) * stride ] ; srcptr2 = srcptr ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr2 = * srcptr2 ; ++ dstptr2 ; ++ srcptr2 ; } dstptr += 2 * stride ; srcptr += stride ; } srcptr = buf ; dstptr = & a [ ( 1 - parity ) * stride ] ; n = numrows - hstartcol ; while ( n -- > 0 ) { dstptr2 = dstptr ; srcptr2 = srcptr ; for ( i = 0 ; i < JPC_QMFB_COLGRPSIZE ; ++ i ) { * dstptr,0
921,<S2SV_ModStart> s ) ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; <S2SV_ModStart> s ) ; dev -> priv_flags |= IFF_TX_SKB_SHARING ; if ( dev -> priv_flags & IFF_TX_SKB_SHARING ) dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; if ( dev -> priv_flags & IFF_TX_SKB_SHARING ) dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; if ( dev -> priv_flags & IFF_TX_SKB_SHARING ) dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; if ( dev -> priv_flags & IFF_TX_SKB_SHARING ) dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; if ( dev -> priv_flags & IFF_TX_SKB_SHARING ) dev -> priv_flags &= ~ IFF_TX_SKB,0
922,"<S2SV_ModStart> u_int length = <S2SV_ModEnd> h -> len <S2SV_ModStart> ) ; } if ( length > CHDLC_HDRLEN ) { ND_PRINT ( ( ndo, ""[|chdlc]"" ) ) ; return ( - 1 ) ; }",0
923,"<S2SV_ModStart> NULL ) { cFYI ( 1, ""CIFS <S2SV_blank> mount <S2SV_blank> error: <S2SV_blank> iocharset <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found"", volume_info -> iocharset ) ; rc = - ELIBACC ; goto out ; } <S2SV_ModStart> { cFYI ( 1, ""Username: <S2SV_blank> %s"", volume_info -> username ) ; cFYI ( 1, ""Username: <S2SV_blank> %s"", volume_info -> username ) ; rc = - EINVAL ; goto out ; } if ( volume_info -> username ) { cFYI ( 1, ""Username: <S2SV_blank> %s"", volume_info -> username ) ; rc = - EINVAL ; goto out ; } if ( volume_info -> username ) { cFYI ( 1, ""Username: <S2SV_blank> %s"", volume_info -> username ) ; cFYI ( 1, ""Username: <S2SV_blank> %s"", volume_info -> username ) ; rc = - EINVAL ; goto out ; } if ( volume_info -> username ) { cFYI ( 1, ""Username: <S2SV_blank> %s"", volume_info -> username ) ; rc = - EINVAL ; goto out ;",0
924,"<S2SV_ModStart> len && ( sk -> sk_tsflags & SOF_TIMESTAMPING_OPT_STATS ) && <S2SV_ModStart> len && ( sk -> sk_tsflags & SOF_TIMESTAMPING_HARDWARE ) && ktime_to_timespec_cond ( shhwtstamps -> hwtstamp, tss. ts + 1 ) ) empty = 0 ; if ( shhwtstamps && ( sk -> sk_tsflags & SOF_TIMESTAMPING_HARDWARE ) && ktime_to_timespec_cond ( shhwtstamps -> hwtstamp, tss. ts + 3 ) ) empty = 0 ; if ( shhwtstamps && ( sk -> sk_tsflags & SOF_TIMESTAMPING_RAW_HARDWARE ) && ktime_to_timespec_cond ( shhwtstamps -> hwtstamp, tss. ts + 4 ) ) empty = 0 ; if ( shhwtstamps && ( sk -> sk_tsflags & SOF_TIMESTAMPING_HARDWARE ) && ktime_to_timespec_cond ( shhwtstamps -> hwtstamp, tss. ts + 3 ) ) empty = 0",0
925,"<S2SV_ModStart> ) ) ; raptor_sax2_set_option ( rdf_xml_parser -> sax2, RAPTOR_OPTION_NO_EXTERNAL_ENTITIES, NULL, RAPTOR_OPTIONS_GET_NUMERIC ( rdf_parser, RAPTOR_OPTION_NO_EXTERNAL_ENTITIES ) ) ; raptor_sax2_set_option ( rdf_xml_parser -> sax2, RAPTOR_OPTION_NO_EXTERNAL_ENTITIES, NULL, RAPTOR_OPTIONS_GET_NUMERIC ( rdf_parser, RAPTOR_OPTION_NO_EXTERNAL_ENTITIES ) ) ; raptor_sax2_set_option ( rdf_xml_parser -> sax2, RAPTOR_OPTION_NO_EXTERNAL_ENTITIES, NULL, RAPTOR_OPTIONS_GET_NUMERIC ( rdf_parser, RAPTOR_OPTION_NO_EXTERNAL_ENTITIES ) ) ;",0
926,"<S2SV_ModStart> ; if ( alg_a & ( SSL_kDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } if ( alg_a & ( SSL_kDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } if ( alg_a & ( SSL_kDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD_UNEXPECTED_MESSAGE ; goto f_err ; } if ( alg_a & ( SSL_kDHE | SSL_kECDHE ) ) { SSLerr ( SSL_F_SSL3_GET_KEY_EXCHANGE, SSL_R_UNEXPECTED_MESSAGE ) ; al = SSL_AD",0
927,"<S2SV_ModStart> SECURE_ELEMENT_ERROR_NPE ; } if ( encJoinAcceptSize < LORAMAC_MIC_FIELD_SIZE ) { return SECURE_ELEMENT_ERROR_MINSIZE ; } if ( encJoinAcceptSize < LORAMAC_MIC_FIELD_SIZE ) { return SECURE_ELEMENT_ERROR_MINSIZE ; <S2SV_ModStart> SECURE_ELEMENT_ERROR_NPE ; } if ( SecureElementVerifyAesCmac ( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY )!= SECURE_ELEMENT_SUCCESS ) { return SECURE_ELEMENT_FAIL_CMAC ; } if ( SecureElementVerifyAesCmac ( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY )!= SECURE_ELEMENT_SUCCESS ) { return SECURE_ELEMENT_FAIL_ENCRYPT ; } if ( SecureElementVerifyAesCmac ( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY )!= SECURE_ELEMENT_SUCCESS",0
928,"<S2SV_ModStart> case NGHTTP2_IB_READ_CLIENT_MAGIC : if ( iframe -> payloadleft > NGHTTP2_CLIENT_MAGIC_LEN ) { return NGHTTP2_ERR_BAD_CLIENT_MAGIC ; } iframe -> payloadleft -= NGHTTP2_CLIENT_MAGIC_LEN ; if ( memcmp ( & NGHTTP2_CLIENT_MAGIC [ NGHTTP2_CLIENT_MAGIC_LEN - iframe -> payloadleft ], in, readlen )!= 0 ) { return NGHTTP2_ERR_BAD_CLIENT_MAGIC ; } iframe -> state = NGHTTP2_IB_READ_CLIENT_MAGIC ; if ( iframe -> payloadleft > NGHTTP2_CLIENT_MAGIC_LEN - iframe -> payloadleft ) { return NGHTTP2_ERR_BAD_CLIENT_MAGIC ; } iframe -> state = NGHTTP2_IB_READ_CLIENT_MAGIC ; if ( memcmp ( & NGHTTP2_CLIENT_MAGIC [ NGHTTP2_CLIENT_MAGIC_LEN - iframe -> payloadleft ], in, readlen )!= 0 ) { return NGHTTP2_",0
929,<S2SV_ModStart> = ucounts ; if ( new_ns -> user_ns!= user_ns ) { kfree ( new_ns ) ; dec_mnt_namespaces ( ucounts ) ; return ERR_PTR ( - EPERM ) ; },0
930,"<S2SV_ModStart> += dif ; atomic_set ( & opt2 -> refcnt, 1 ) ;",1
931,"<S2SV_ModStart> ; x86_pmu. num_counters_fixed = min_t ( unsigned, MAX_PEBS_EVENTS, x86_pmu. num_counters ) ; if ( version > 1 ) x86_pmu. num_counters_fixed = max_t ( unsigned, MAX_PEBS_EVENTS, x86_pmu. num_counters ) ; if ( version > 1 ) x86_pmu. num_counters_fixed = min_t ( unsigned, MAX_PEBS_EVENTS, x86_pmu. num_counters ) ; if ( version > 1 ) x86_pmu. num_counters = eax. split. num_counters ; if ( version > 1 ) x86_pmu. num_counters_fixed = max_t ( unsigned, MAX_PEBS_EVENTS, x86_pmu. num_counters ) ; if ( version > 1 ) x86_pmu. num_counters_fixed = max_t ( unsigned, MAX_PEBS_EVENTS, x86_pmu. num_counters ) ; if ( version > 1 ) x86_pmu. num_counters_fixed = max_t ( unsigned",0
932,"<S2SV_ModStart>. dimensions ; # ifdef STB_VORBIS_DIVIDES_IN_RESIDUE uint8 * * * part_classdata = ( uint8 * * * ) temp_block_array ( f, f -> channels, part_read * sizeof ( * * part_classdata ) ) ; # else int * * classifications = ( int * * ) temp_block_array ( f, f -> channels, part_read * sizeof ( * * classifications ) ) ; # endif CHECK ( f ) ; # ifndef STB_VORBIS_DIVIDES_IN_RESIDUE int * * part_classdata = ( int * * ) temp_block_array ( f, f -> channels, part_read * sizeof ( * * part_classdata ) ) ; # else int * * classifications = ( int * * ) temp_block_array ( f, f -> channels, part_read * sizeof ( * * classifications ) ) ; # endif",0
933,"<S2SV_ModStart> ) ; u32 <S2SV_ModEnd> now ; if <S2SV_ModStart> ) { challenge_timestamp = now ; challenge_count = 0 ; } if ( ++ challenge_count <= sysctl_tcp_challenge_ack_limit ) { NET_INC_STATS ( sock_net ( sk ), LINUX_MIB_TCPCHALLENGEACK ) ; tp -> last_oow_ack_time = jiffies ; } if ( ++ challenge_count <= sysctl_tcp_challenge_ack_limit ) { NET_INC_STATS ( sock_net ( sk ), LINUX_MIB_TCPCHALLENGEACK_LIMIT ) ; if ( ++ challenge_count <= sysctl_tcp_challenge_ack_limit ) { NET_INC_STATS ( sock_net ( sk ), LINUX_MIB_TCPCHALLENGEACK ) ; tp -> last_oow_ack_time = jiffies / HZ ; } if ( ++ challenge_count <= sysctl_tcp_challenge_ack_limit ) { NET_INC_STATS ( sock_net ( sk ), LINUX_MIB_TCPCHALLENGEACK_LIMIT",0
934,"<S2SV_ModStart> struct llc_pktinfo info ; memset ( & info, 0, sizeof ( info ) )",1
935,"<S2SV_ModStart> void pack_mb_tokens ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, vpx_writer <S2SV_ModEnd> * tp, <S2SV_ModStart> * tp, vpx_writer <S2SV_ModEnd> * stop ) <S2SV_ModStart> t ] ; vpx_writer <S2SV_ModEnd> * const b <S2SV_ModStart> * const b = & vpx_extra_bits [ t ] ; int i = 0 ; int v = a -> value ; int n = a -> len ; if ( p -> skip_eob_node ) { n -= p -> skip_eob_node ; i = 2 * p -> skip_eob_node ; } if ( p -> skip_eob_node ) { int len = UNCONSTRAINED_NODES - p -> skip_eob_node ; int bits = v >> ( n - len ) ; vpx_write_tree ( w, vp9_coef_tree, p -> context_tree, bits, len, i ) ; vpx_write_tree ( w, vp9_coef_con_tree, vp9_pareto8_full [ p -> context_tree [ PIVOT_NODE ] - 1 ], v,",0
936,"<S2SV_ModStart>, uncompressed_hdr_size ; vpx_write_bit_buffer <S2SV_ModEnd> wb = { <S2SV_ModStart> 0 } ; vpx_write_bit_buffer <S2SV_ModEnd> saved_wb ; write_uncompressed_header <S2SV_ModStart> saved_wb ; write_uncompressed_header ( cpi, & wb ) ; uncompressed_hdr_size = vp9_rb_bytes_written ( & wb ) ; data += uncompressed_hdr_size ; vpx_compute_update_table ( ) ; first_part_size = write_compressed_header ( cpi, data ) ; data += first_part_size ; vpx_wb_write_literal ( & saved_wb, ( int ) uncompressed_hdr_size, 16 ) ; data += first_part_size ; vpx_wb_write_literal ( & saved_wb, ( int ) uncompressed_hdr_size, 16 ) ; data += first_part_size ; vpx_clear_system_state ( ) ; first_part_size = write_compressed_header ( cpi, data ) ; data += first_part_size ; vpx_wb_write_literal ( & saved_wb, ( int ) first_part_",0
937,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> int dev_get_valid_name (,1
938,"<S2SV_ModStart> * rdesc ; unsigned int version ; unsigned int country ; <S2SV_ModStart> - ENODEV ; } version = le16_to_cpu ( hdesc -> bcdHID ) ; <S2SV_ModStart> bcdHID ) ; country = hdesc -> bCountryCode ; for ( n = 0 ; n < hdesc -> bNumDescriptors ; n ++ ) if ( hdesc -> desc [ n ]. bDescriptorType == HID_DT_REPORT ) rsize = le16_to_cpu ( hdesc -> desc [ n ]. wDescriptorLength ) ; if (! rsize || rsize > HID_MAX_DESCRIPTOR_SIZE ) { dbg_hid ( ""weird <S2SV_blank> size <S2SV_blank> of <S2SV_blank> report <S2SV_blank> descriptor <S2SV_blank> (%u)\\n"", rsize ) ; return - EINVAL ; } rsize = le16_to_cpu ( hdesc -> desc [ n ]. wDescriptorLength ) ; if ( rsize > HID_MAX_DESCRIPTOR_SIZE ) { dbg_hid ( ""weird <S2SV_blank> size <S2SV_blank> of <S2SV_blank> report <S2SV_blank> descriptor <S2SV_blank> (%u)\\n"", rsize ) ; return - EINVAL ; } rdesc = kmalloc ( rsize, G",0
939,"<S2SV_ModStart> ) { struct ikev2_id <S2SV_ModEnd> id ; int <S2SV_ModStart> int id_len, idtype_len <S2SV_ModEnd> ; ND_TCHECK ( <S2SV_ModStart> * ext ) ; if ( id. h. len < 4 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> len=%d"", id_len ) ) ; goto trunc ; } id_len = ntohs ( id. h. len ) ; ikev2_pay_print ( ndo, NPSTR ( tpay ), id. h. critical ) ; id_len = ntohs ( id. h. len ) ; if ( 2 < ndo -> ndo_vflag && 4 < id_len ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if ( rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) ; if (! rawprint ( ndo, ( const uint8_t * ) ( ext + 1 ), id_len - 4 ) ) { ND_PRINT ( ( ndo, "" <S2SV_blank> "" ) ) ; if (! rawprint ( ndo, ( const uint",0
940,<S2SV_ModStart> group_dead ) ; <S2SV_ModEnd> if ( unlikely <S2SV_ModStart> ) ; # ifdef CONFIG_FUTEX if ( unlikely ( tsk -> robust_list ) ) exit_robust_list ( tsk ) ; # ifdef CONFIG_COMPAT if ( unlikely ( tsk -> compat_robust_list ) ) compat_exit_robust_list ( tsk ) ; # endif,0
941,"<S2SV_ModStart> * obj, <S2SV_ModEnd> const char * <S2SV_ModStart> data ) { <S2SV_ModEnd> add_preferred_base_object ( name <S2SV_ModStart> obj -> oid. hash, obj -> oid. type, obj -> oid. hash, obj -> oid. hash, obj -> oid. hash, obj -> oid. hash, obj -> oid. hash, obj -> oid. hash ) ; add_object_entry ( obj -> oid. hash, obj -> type, name, 0 ) ; obj -> flags |= OBJECT_ADDED ; free ( ( char * ) name ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
942,"<S2SV_ModStart> = atoi ( jas_tvparser_getval ( tvp ) ) ; if (! ( id = jas_taginfo_nonull ( jas_taginfos_lookup ( mif_tags, jas_tvparser_gettag ( tvp ) ) ) -> id ) ) { goto error ; } if (! ( id = jas_taginfo_nonull ( jas_taginfos_lookup ( mif_tags, jas_tvparser_gettag ( tvp ) ) ) -> id ) ) { goto error ; } if (! ( id = jas_taginfo_nonull ( jas_taginfos_lookup ( mif_tags, jas_tvparser_gettag ( tvp ) ) ) -> id ) ) { goto error ; } if (! ( id = jas_taginfo_nonull ( jas_taginfos_lookup ( mif_tags, jas_tvparser_gettag ( tvp ) ) -> id ) ) ) { goto error ; } if (! ( id = jas_taginfo_nonull ( jas_taginfos_lookup ( mif_tags, jas_",0
943,"<S2SV_ModStart> urb ) ; if ( ret!= - EINVAL ) { ath10k_dbg ( ar, ATH10K_DBG_USB_BULK, ""usb <S2SV_blank> bulk <S2SV_blank> transmit <S2SV_blank> failed: <S2SV_blank> %d\\n"", ret ) ; usb_unanchor_urb ( urb ) ; if ( ret!= - EINVAL ) { ath10k_dbg ( ar, ATH10K_DBG_USB_BULK, ""usb <S2SV_blank> bulk <S2SV_blank> transmit <S2SV_blank> failed: <S2SV_blank> %d\\n"", ret ) ; ath10k_dbg ( ar, ATH10K_DBG_USB_BULK, ""usb <S2SV_blank> bulk <S2SV_blank> transmit <S2SV_blank> failed: <S2SV_blank> %d\\n"", ret ) ; usb_unanchor_urb ( urb ) ; if ( ret!= - EINVAL ) { ath10k_dbg ( ar, ATH10K_DBG_USB_BULK, ""usb <S2SV_blank> bulk <S2SV_blank> transmit <S2SV_blank> failed: <S2SV_blank> %d\\n"", ret ) ; usb_unanchor_urb ( urb ) ; ret = - EINVAL ; goto err_free",0
944,"<S2SV_ModStart>, fft_jmp ; WORD32 xt0_0, yt0_0, xt1_0, yt1_0, xt2_0, yt2_0 ; WORD32 xh0_0, xh1_0, xh20_0, xh21_0, xl0_0, xl1_0, xl20_0, xl21_0 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_h2_0 ; WORD32 x_0, x_1, x_l1_0, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_1, x_1, x_l1_1, x_l1_1, x_l2_0, x_l2_1 ; WORD32 x_h2_0, x_h2_1 ; WORD32 x_0, x_1, x_1, x_l1_0, x_l1_1, x_l1_1, x_",0
945,"<S2SV_ModStart> if ( tag == 0 ) { if ( data [ dp ++ ]!= 0 ) goto invalid_eoc ; if ( -- indef_level <= 0 ) { * _errmsg = ""Invalid <S2SV_blank> length <S2SV_blank> EOC"" ; goto error ; } goto next_tag ; } if ( unlikely ( ( tag & 0x1f ) == ASN1_LONG_TAG ) ) { do { if ( unlikely ( datalen - dp < 2 ) ) goto data_overrun_error ; tmp = data [ dp ++ ] ; } while ( tmp & 0x80 ) ; } len = data [ dp ++ ] ; if ( unlikely ( len <= 0x7f ) ) { if ( data [ dp ++ ]!= 0 ) goto invalid_eoc ; if ( unlikely ( len == ASN1_INDEFINITE_LENGTH ) ) { if ( unlikely ( ( tag & ASN1_CONS_BIT ) == ASN1_PRIM << 5 ) ) goto indefinite_len_primitive ; indef_level ++ ; goto next_tag ; } n = len - 0x80 ; if ( unlikely ( n > sizeof ( size_t ) - 1 ) ) goto data_overrun_",0
946,<S2SV_ModStart> ( flags & __GFP_ZERO <S2SV_ModEnd> ) memset (,0
947,<S2SV_ModStart> mnt_dir ) { if ( IS_ERR ( mntent -> mnt_dir ) ) return PTR_ERR ( mntent -> mnt_dir ) ; if ( IS_ERR ( mntent -> mnt_dir ) ) return PTR_ERR ( mntent -> mnt_dir ) ;,0
948,"<S2SV_ModStart> < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; } <S2SV_ModStart> < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; } <S2SV_ModStart> < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed"" ) ; return FAILURE ; } <S2SV_ModStart> < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; } <S2SV_ModStart> < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed <S2SV_blank> (%d)"", sig_len ) ; return FAILURE ; } <S2SV_ModStart> < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> the <S2SV_blank> maximum <S2SV_blank> allowed"" ) ; return FAILURE ; } <S2SV_ModStart> < 0 ) { spprintf ( error, 0, ""signature <S2SV_blank> length <S2SV_blank> exceeds <S2SV_blank> (%d)"", sig_len",0
949,<S2SV_ModStart> && value [ <S2SV_ModEnd> n ] <= <S2SV_ModStart> && value [ <S2SV_ModEnd> n ] <= <S2SV_ModStart> && value [ <S2SV_ModEnd> n ] <= <S2SV_ModStart> && value [ <S2SV_ModEnd> n ] <= <S2SV_ModStart> && value [ <S2SV_ModEnd> n ] <= <S2SV_ModStart> max <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
950,"<S2SV_ModStart> cm, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> -> display_height ; vpx_wb_write_bit <S2SV_ModEnd> ( wb, <S2SV_ModStart> scaling_active ) { vpx_wb_write_literal <S2SV_ModEnd> ( wb, <S2SV_ModStart> 16 ) ; vpx_wb_write_literal <S2SV_ModEnd> ( wb,",1
951,"<S2SV_ModStart> ; if ( ins_size > regsz ) { r_buf_set_at ( binfile -> buf, debug_info_off, p4_end - <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
952,"<S2SV_ModStart> ) ) ; rb_hash_aset ( env, server_name_val, req_server_name ( req ) ) ; rb_hash_aset ( env, server_port_val, req_server_port ( req ) ) ; rb_hash_aset ( env, server_user_name_val, req_server_user_name ( req ) ) ; rb_hash_aset ( env, server_password_val, req_server_password ( req ) ) ; rb_hash_aset ( env, server_user_name_val, req_server_user_name ( req ) ) ; rb_hash_aset ( env, server_password_val, req_server_password ( req ) ) ; rb_hash_aset ( env, server_user_name_val, req_server_user_name ( req ) ) ; rb_hash_aset ( env, server_password_val, req_server_password ( req ) ) ; rb_hash_aset ( env, server_user_name_val, req_server_user_name ( req ) ) ; rb_hash_aset ( env, server_password_val, req_server_",0
953,"<S2SV_ModStart> 0 ) ; if ( args -> flags & ATTR_KERNOVAL ) { args -> valuelen = valuelen ; return XFS_ERROR ( ERANGE ) ; } args -> rmtvaluelen = valuelen ; memcpy ( args -> value, & name_rmt -> value [ args -> namelen ], valuelen ) ; }",0
954,"<S2SV_ModStart> endif # endif MYSQL_BIND * bind, * bind_end ; imp_sth_phb_t * fbind ; # if MYSQL_VERSION_ID >= SERVER_PREPARE_VERSION imp_sth -> use_server_side_prepare = imp_dbh -> use_server_side_prepare ; if ( attribs ) { svp = DBD_ATTRIB_GET_SVP ( attribs, ""mysql_server_prepare"", 20 ) ; imp_sth -> use_server_side_prepare = ( svp )? SvTRUE ( * svp ) : imp_dbh -> use_server_side_prepare ; svp = DBD_ATTRIB_GET_SVP ( attribs, ""async"", 5 ) ; if ( svp && SvTRUE ( * svp ) ) { # if MYSQL_ASYNC imp_sth -> is_async = TRUE ; imp_sth -> use_server_side_prepare = FALSE ; # else do_error ( sth, 2000, ""Async <S2SV_blank> support <S2SV_blank> was <S2SV_blank> not <S2SV_blank> built <S2SV_blank> into <S2SV_blank> this <S2SV_blank> version <S2SV_blank> of <S2SV_blank> DBD::mysql"", ""HY000"" ) ; # endif }",0
955,"<S2SV_ModStart> ; if ( key -> type && key -> type -> destroy ) key -> type -> destroy ( key ) ; if ( test_bit ( KEY_FLAG_NEGATIVE, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_IN_QUOTA, & key -> flags ) ) { spin_lock ( & key -> user -> lock ) ; key -> user -> qnkeys -- ; key -> user -> qnbytes -= key -> quotalen ; spin_unlock ( & key -> user -> lock ) ; } atomic_dec ( & key -> user -> nkeys ) ; if ( test_bit ( KEY_FLAG_INSTANTIATED, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_INSTANTIATED, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_INSTANTIATED, & key -> flags ) ) atomic_dec ( & key -> user -> nikeys ) ; if ( test_bit ( KEY_FLAG_INSTANTIATED, &",0
956,"<S2SV_ModStart> ) ) ; if (! state. sumlen ) ereport ( ERROR, ( errcode ( ERRCODE_PROGRAM_LIMIT_EXCEEDED ), errmsg ( ""process <S2SV_blank> limit <S2SV_blank> exceeded"" ), errdetail ( ""process <S2SV_blank> limit <S2SV_blank> exceeded"" ) ) ) ;",0
957,"<S2SV_ModStart> int need = 0 ; char * line ; char * lp ; <S2SV_ModStart> screen, { <S2SV_ModEnd> need *= 4 <S2SV_ModStart> need *= 4 ; } ) ; if ( need < 0 ) return ; for ( i = first. row ; i < last. row ; i ++ ) need += Length ( screen, i, 0, screen -> max_row ) + 1 ; for ( i = i + 1 ; i < last. row ; i ++ ) need += Length ( screen, i, 0, screen -> max_row ) + 1 ; for ( i = i + 1 ; i < last. row ; i ++ ) need += Length ( screen, i, 0, screen -> max_row ) + 1 ; for ( i = i + 1 ; i < last. row ; i ++ ) need += Length ( screen, i, 0, screen -> max_row ) + 1 ; for ( i = i + 1 ; i < last. row ; i ++ ) need += Length ( screen, i, 0, screen -> max_row ) + 1 ; for ( i = i + 1 ; i < last. row ; i ++ ) need += Length ( screen, i, 0, screen -> max_row ) + 1 ;",0
958,"<S2SV_ModStart> = 0 ; mutex_lock ( & EXT4_SB ( inode -> i_sb ) -> s_orphan_lock ) ; <S2SV_ModStart> i_orphan ) ; err = ext4_reserve_inode_write ( handle, inode, & iloc ) ; if ( err ) goto out_err ; if ( prev == & ei -> i_orphan ) { BUFFER_TRACE ( sbi -> s_sbh, ""get_write_access"" ) ; err = ext4_journal_get_write_access ( handle, sbi -> s_sbh ) ; if ( err ) goto out_brelse ; } if ( prev == & ei -> i_orphan ) { BUFFER_TRACE ( sbi -> s_sbh, ""get_write_access"" ) ; err = ext4_journal_get_write_access ( handle, sbi -> s_sbh, ""get_write_access"" ) ; err = ext4_journal_get_write_access ( handle, sbi -> s_sbh ) ; if ( err ) goto out_brelse ; sbi -> s_es -> s_last_orphan = cpu_to",0
959,"<S2SV_ModStart> ftoa_bounded_extra ( JsVarFloat <S2SV_ModEnd> val, char <S2SV_ModStart> val ) ) { const JsVarFloat stopAtError = 0.0000001 ; if ( val == JsVarFloat. NaN ) strncpy ( str, ""NaN"", len ) ; else if (! isfinite ( val ) ) { strncpy ( str, ""-Infinity"", len ) ; else strncpy ( str, ""Infinity"", len ) ; } else { if ( val == JsVarFloat. NaN ) strncpy ( str, ""Infinity"", len ) ; else strncpy ( str, ""Infinity"", len ) ; } else { if ( val == JsVarFloat. NaN ) strncpy ( str, ""NaN"", len ) ; else if ( val < 0 ) strncpy ( str, ""-Infinity"", len ) ; else strncpy ( str, ""Infinity"", len ) ; } else { if ( val == JsVarFloat. NaN ) strncpy ( str, ""Infinity"", len ) ; else strncpy ( str, ""Infinity"", len ) ; } else { if ( val == JsVarFloat. NaN",0
960,"<S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank> \\t]%d"" <S2SV_ModEnd>, temp, <S2SV_ModStart> ( f, ""PG%[ <S2SV_blank> \\t]%c%[ <S2SV_blank> \\t+-]%d%[ <S2SV_blank>",0
961,"<S2SV_ModStart> < 6 ) { size_t length ; char * result ; memcpy ( buf, ""DEADBEEF"", 8 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( result!= NULL ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( strcmp ( result, ""12345"" ) == 0 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ; ASSERT ( length == 5 ) ; length = size ; result = my_asnprintf ( buf, & length, ""%d"", 12345 ) ;",0
962,"<S2SV_ModStart> cycles ) ; if ( unlikely ( fast_pool -> count >= 64 ) && crng_fast_load ( ( char * ) fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ) { fast_pool -> count = 0 ; fast_pool -> last = now ; return ; } if ( ( fast_pool -> count >= 64 ) && crng_fast_load ( ( char * ) fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ) { fast_pool -> count = 0 ; fast_pool -> last = now ; } if ( ( fast_pool -> count >= 64 ) && crng_fast_load ( ( char * ) fast_pool -> pool, sizeof ( fast_pool -> pool ) ) ) { fast_pool -> count = 0 ; fast_pool -> last = now ; return ; }",0
963,"<S2SV_ModStart> EX_ID ) { strncat ( str, jslGetTokenValueAsString ( ), len ) ; } else if ( lex -> tk == LEX_STRING ) { strncat ( str, ""String:\'"", len ) ; strncat ( str, jslGetTokenValueAsString ( ), len ) ; } else if ( lex -> tk == LEX_STRING ) { strncat ( str, ""String:\'"", len ) ; strncat ( str, jslGetTokenValueAsString ( ), len ) ; strncat ( str, ""\'"", len ) ; } else if ( lex -> tk == LEX_COMMENT ) { strncat ( str, ""Comment:\'"", len ) ; strncat ( str, jslGetTokenValueAsString ( ), len ) ; } else if ( lex -> tk == LEX_COMMENT ) { strncat ( str, ""Comment:\'"", len ) ; strncat ( str, jslGetTokenValueAsString ( ), len ) ; jslTokenAsString ( lex -> tk, str, len ) ; } else jslTokenAsString ( lex -> tk, str, len ) ;",0
964,"<S2SV_ModStart> } if ( ( st. st_mode & S_IFMT ) == S_IFREG ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> directory"", g. inf ) ; return ; } if ( ( st. st_mode & S_IFMT ) == S_IFDIR ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> directory"", g. inf ) ; return ; } if ( ( st. st_mode & S_IFMT ) == S_IFREG ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> directory"", g. inf ) ; return ; } if ( ( st. st_mode & S_IFMT ) == S_IFLNK ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> directory"", g. inf ) ; return ; } if ( ( st. st_mode & S_IFMT ) == S_IFDIR ) { complain ( ""%s <S2SV_blank> is <S2SV_blank> a <S2SV_blank> special <S2SV_blank> file <S2SV_blank> or <S2SV_blank> device <S2SV_blank> directory"", g. inf ) ; return ; }",0
965,<S2SV_ModStart> which ) ; if ( which < 0 ) { cJSON_SetError ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString ( cJSON_GetErrorString,0
966,"<S2SV_ModStart> * output ; <S2SV_ModEnd> int i ; <S2SV_ModStart> MagickFalse ) ; } input = fopen_utf8 ( argv [ argc - 1 ], ""rb"" ) ; if ( input == ( FILE * ) NULL ) { ThrowFileException ( exception, FileOpenError, ""UnableToOpenFile"", argv [ argc - 1 ] ) ; return ( MagickFalse ) ; } for ( i = 2 ; i < ( ssize_t ) ( argc - 1 ) ; i ++ ) { input = fopen_utf8 ( argv [ i ], ""rb"" ) ; if ( input == ( FILE * ) NULL ) { ThrowFileException ( exception, FileOpenError, ""UnableToOpenFile"", argv [ i ] ) ; continue ; } for ( i = 2 ; i < ( ssize_t ) ( argc - 1 ) ; i ++ ) { input = fopen_utf8 ( argv [ i ], ""rb"" ) ; if ( input == ( FILE * ) NULL ) { ThrowFileException ( exception, FileOpenError, ""UnableToOpenFile"", argv [ i ] ) ; continue ; } for ( c = fgetc ( input ) ; c!= EOF ; c",0
967,<S2SV_ModStart> options ) { SvcInternal_t <S2SV_ModEnd> * const si,1
968,"<S2SV_ModStart> fail : ext3_msg ( sb, ""error: <S2SV_blank> failed <S2SV_blank> to <S2SV_blank> open <S2SV_blank> journal <S2SV_blank> device <S2SV_blank> %s: <S2SV_blank> %ld"" <S2SV_ModEnd>, __bdevname (",0
969,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> = NULL ; <S2SV_ModEnd> pw_init ( ) <S2SV_ModStart> ( fp = mkstemp <S2SV_ModEnd> ( & tmpname <S2SV_ModStart> atomic_dir ) ) == NULL ) return - 1 ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; if ( fchown ( fileno ( fp ), ( uid_t ) 0, ( gid_t ) 0 ) < 0 ) goto fail ; namelen = strlen ( pwd -> pw_name ) ; if (! found && linebuf [ namelen ] == ':' &&! strncmp ( linebuf, pwd -> pw_name, namelen ) ) { if ( putpwent ( pwd, fp ) < 0 ) goto fail ; rc = close_stream ( fp )",0
970,"<S2SV_ModStart> int i, vpx_tree <S2SV_ModEnd> tree, unsigned <S2SV_ModStart> int left, right ; if ( tree [ i ] <= 0 ) left = num_events [ - tree [ i ] ] ; else left = convert_distribution ( tree [ i ], tree, branch_ct, num_events ) ; if ( tree [ i + 1 ] <= 0 ) right = num_events [ - tree [ i + 1 ] ] ; if ( tree [ i + 1 ] <= 0 ) right = num_events [ - tree [ i + 1 ] ] ; if ( tree [ i + 1 ] <= 0 ) left = num_events [ - tree [ i + 1 ] ] ; else right = convert_distribution ( tree [ i + 1 ], tree, branch_ct, num_events ) ; if ( tree [ i + 1 ] <= 0 ) left = num_events [ - tree [ i + 1 ] ] ; if ( tree [ i + 1 ] <= 0 ) left = num_events [ - tree [ i + 1 ] ] ; else right = convert_distribution ( tree [ i + 1 ], tree, branch_ct, num_events ) ;",0
971,<S2SV_ModStart> s2 ) { if ( s1 == s2 ) return 0 ;,0
972,"<S2SV_ModStart> TRUE ; } gchar * from = xmpp_stanza_get_from ( stanza ) ; Jid * jid_from = jid_create ( from ) ; Jid * jid_to = jid_create ( to ) ; if (! jid_from ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> retrieve <S2SV_blank> stanza <S2SV_blank> name <S2SV_blank> for <S2SV_blank> Carbon"" ) ; return TRUE ; } if ( g_strcmp0 ( name, ""received"" )!= 0 ) { log_error ( ""Unable <S2SV_blank> to <S2SV_blank> retrieve <S2SV_blank> stanza <S2SV_blank> name <S2SV_blank> for <S2SV_blank> Carbon"" ) ; return TRUE ; } if ( g_strcmp0 ( name, ""sent"" )!= 0 ) { log_warning ( ""Carbon <S2SV_blank> received <S2SV_blank> with <S2SV_blank> unrecognised <S2SV_blank> stanza <S2SV_blank> name: <S2SV_blank> %s"", name ) ; return TRUE ; } if ( g_strcmp0 ( name, ""received"" )!= 0 ) { log_warning ( ""Carbon <S2SV_blank> received <S2SV_blank> with <S2SV_blank> unrecognised <S2SV_blank> stanza <S2SV_blank> name: <S2SV_blank> %s"", name ) ; return TRUE ; } if ( g_strcmp0 ( name, ""sent"" )!= 0 ) { log_",0
973,"<S2SV_ModStart> ; } } if ( sdslen ( o -> ptr ) > CONFIG_AUTHPASS_MAX_LEN ) { addReplyError ( c, ""rdbfilename <S2SV_blank> can\'t <S2SV_blank> be <S2SV_blank> a <S2SV_blank> path, <S2SV_blank> just <S2SV_blank> a <S2SV_blank> filename"" ) ; return ; } if ( sdslen ( o -> ptr ) > CONFIG_AUTHPASS_MAX_LEN ) { addReplyError ( c, ""rdbfilename <S2SV_blank> can\'t <S2SV_blank> be <S2SV_blank> a <S2SV_blank> path, <S2SV_blank> just <S2SV_blank> a <S2SV_blank> filename"" ) ; return ; } if ( sdslen ( o -> ptr ) > CONFIG_AUTHPASS_MAX_LEN ) { addReplyError ( c, ""rdbfilename <S2SV_blank> can\'t <S2SV_blank> be <S2SV_blank> a <S2SV_blank> path, <S2SV_blank> just <S2SV_blank> a <S2SV_blank> filename"" ) ; return ; } if ( sdslen ( o -> ptr ) > CONFIG_AUTHPASS_MAX_LEN ) { addReplyError ( c, ""rdbfilename <S2SV_blank> can\'t <S2SV_blank> be <S2SV_blank> a <S2SV_blank> path, <S2SV_blank> just <S2SV_blank> a <S2SV_blank> filename"" ) ; return ; } if ( sdslen ( o -> ptr ) > CONFIG_AUTHPASS_MAX_LEN ) { zfree (",0
974,"<S2SV_ModStart> ) ) { parse_global_option ( CMD_PRINT_HELP, NULL, NULL ) ; parse_service_option ( CMD_PRINT_HELP, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-version"" ) ) { parse_global_option ( CMD_PRINT_DEFAULTS, NULL, NULL ) ; parse_service_option ( CMD_PRINT_DEFAULTS, NULL, NULL, NULL ) ; log_flush ( LOG_MODE_INFO ) ; return 2 ; } else if (! strcasecmp ( arg1, ""-options"" ) ) { print_ssl_options ( ) ; log_flush ( LOG_MODE_INFO ) ; return 1 ; } else if ( type == CONF_FILE ) { if (! arg2 ) { s_log ( LOG_ERR, ""No <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> specified"" ) ; print_syntax ( ) ; return 1 ; } name = arg2 ; type = CONF_FILE ; } else if ( type == CONF_FD ) { if (! arg2 ) { s_log ( LOG_ERR, ""No <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> specified"" )",0
975,<S2SV_ModStart> ) return - EOPNOTSUPP <S2SV_ModEnd> ; BT_DBG (,0
976,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } switch,1
977,"<S2SV_ModStart> ) ; } if ( st -> st_v1_new_iv. len < e -> enc_blocksize ) { libreswan_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; return ; } if ( st -> st_v1_new_iv. len < e -> enc_blocksize ) { libreswan_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; return ; } if ( st -> st_v1_new_iv. len < e -> enc_blocksize ) { libreswan_log ( ""discarding <S2SV_blank> encrypted <S2SV_blank> message <S2SV_blank> because <S2SV_blank> we <S2SV_blank> haven\'t <S2SV_blank> yet <S2SV_blank> negotiated <S2SV_blank> keying <S2SV_blank> material"" ) ; return ; } st -> st_v1_new_iv. len = e -> enc_blocksize ; st -> st_v1_new_iv. len = e -> enc_blocksize ; st -> st_v1_new_iv. len = e -> enc_blocksize ; st",0
978,<S2SV_ModStart> s_ivd_video_decode_op_t. u4_num_Bytes ; if ( ps_op -> s_ivd_video_decode_op_t. u4_num_bytes_consumed > ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ) { ps_dec -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; ps_dec -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; } else { ps_dec -> s_ivd_video_decode_op_t. u4_num_bytes_consumed = ps_ip -> s_ivd_video_decode_ip_t. u4_num_Bytes ; },0
979,"<S2SV_ModStart> int x, y, i ; old_width = s_map -> layers [ layer ]. width ; old_height = s_map -> layers [ layer ]. height ; tilemap = malloc ( x_size * y_size * sizeof ( struct map_tile ) ) ; if (! tilemap ) return false ; for ( x = 0 ; x < x_size ; ++ x ) { if ( y < y_size ) { tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * x_size ] ; tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * x_size ] ; } else { tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * x_size ] ; tilemap [ x + y * x_size ] = s_map -> layers [ layer ]. tilemap [ x + y * x_size ] ; tile -> frames_left = tileset_get_delay ( s_map -> tileset, 0 ) ; tile",0
980,"<S2SV_ModStart> void ip_printroute ( netdissect_options * ndo, const u_char * cp, u_int length ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> length <S2SV_blank> %u]"", length ) ) ; return ; } if ( ( length + 1 ) & 3 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> length <S2SV_blank> %u]"", length ) ) ; return ; } if ( ( length + 1 ) & 3 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> length <S2SV_blank> %u]"", length ) ) ; return ; } if ( ( length + 1 ) & 3 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> length <S2SV_blank> %u]"", length ) ) ; ptr = cp [ 2 ] - 1 ; if ( ptr < 3 || ( ( ptr + 1 ) & 3 ) || ptr > length + 1 ) ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> ptr <S2SV_blank> %u]"", cp [ 2 ] ) ) ; if ( ptr > length + 1 ) ND_PRINT ( ( ndo, "" <S2SV_blank> [bad <S2SV_blank> ptr <S2SV_blank> %u]"", cp",0
981,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> char * print_string <S2SV_ModStart> item ) { return print_string_ptr <S2SV_ModEnd> ( item -> <S2SV_ModStart> valuestring ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
982,"<S2SV_ModStart> 1 ) res = ctx -> priv -> enc. encode ( ctx -> priv <S2SV_ModEnd>, img, <S2SV_ModStart> i -- ) { if ( ( res = ctx -> priv -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ) ) break ; ctx -- ; if ( img ) img -- ; } else { int i ; ctx += num_enc - 1 ; for ( i = num_enc - 1 ; i >= 0 ; i -- ) { if ( ( res = ctx -> priv -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ) ) break ; ctx -- ; if ( img ) img -- ; } else { int i ; ctx += num_enc - 1 ; for ( i = num_enc - 1 ; i >= 0 ; i -- ) { if ( ( res = ctx -> priv -> enc. encode ( ctx -> priv -> alg_priv, img, pts, duration, flags, deadline ) ) break ; ctx -- ; if ( img ) img -- ; } else { int i ; ctx ++ ; for ( i = num_enc - 1 ; i >= 0 ; i -- ) { if ( ( res",0
983,"<S2SV_ModStart> char buf [ L_BUFSIZE <S2SV_ModEnd> ] ; l_uint8 <S2SV_ModStart> buf ) ; if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> prestring\\n"" ) ; return 1 ; } <S2SV_ModStart> ++ ; ret = <S2SV_ModEnd> sscanf ( argv <S2SV_ModStart> + 1, ""prestring=%s"", buf ) ; if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> prestring\\n"" ) ; return 1 ; } if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ; return 1 ; } <S2SV_ModStart> ++ ; ret = <S2SV_ModEnd> sscanf ( argv <S2SV_ModStart> + 1, ""protos=%s"", buf ) ; if ( ret!= 1 ) { fprintf ( stderr, ""parse <S2SV_blank> failure <S2SV_blank> for <S2SV_blank> protos\\n"" ) ; return 1 ; } if ( ( len = strlen ( buf ) ) > L_BUFSIZE - 3 ) { L_WARNING ( ""prestring <S2SV_blank> too <S2SV_blank> large; <S2SV_blank> omitting!\\n"", mainName ) ;",0
984,"<S2SV_ModStart> * buf ; size_t size = sizeof ( unsigned char ) * chunk_num * chm -> chunk_size ; if (! chunk_num ) { self -> error = MSPACK_ERR_NOMEMORY ; return NULL ; } size = chunk_num * chm -> chunk_size ; if ( size > chm -> chunk_size ) { self -> error = MSPACK_ERR_NOMEMORY ; return NULL ; } size = chunk_num * chm -> chunk_size ; if (! ( buf = ( unsigned char * ) sys -> alloc ( sys, size ) ) ) { self -> error = MSPACK_ERR_NOMEMORY ; return NULL ; } if (! ( buf = ( unsigned char * ) sys -> alloc ( sys, size ) ) ) { self -> error = MSPACK_ERR_NOMEMORY ; return NULL ; } if (! ( buf = ( unsigned char * ) sys -> alloc ( sys, size ) ) ) { self -> error = MSPACK_ERR_NOMEMORY ; return NULL ; } if (! ( buf = ( unsigned char * ) sys -> alloc ( sys, size ) ) ) { self -> error = MSPACK_ERR_NOMEMORY ; return NULL",0
985,"<S2SV_ModStart> = fake_used_mask ; list_for_each_entry ( sibling, & leader -> sibling_list, group_entry ) { list_for_each_entry ( sibling, & sibling -> sibling_list, group_entry ) { list_for_each_entry ( sibling, & sibling -> sibling_list, group_entry ) { list_for_each_entry ( sibling, & sibling -> sibling_list, group_entry ) { if (! validate_event ( & fake_pmu, sibling ) ) return - EINVAL ; } list_for_each_entry ( sibling, & sibling -> sibling_list, group_entry ) { if (! validate_event ( & fake_pmu, sibling ) ) return - EINVAL ; } list_for_each_entry ( sibling, & sibling -> sibling_list, group_entry ) { list_for_each_entry ( sibling, & sibling -> sibling_list, group_entry ) { if (! validate_event ( & fake_pmu, sibling ) ) return - EINVAL ; } list_for_each_entry ( sibling, & sibling -> sibling_list, group_entry ) { if",0
986,"<S2SV_ModStart> cols0 ) ; } break ; case 10 : if ( term. csi_argc!= 2 ) return ; <S2SV_ModStart> ) ; } break ; case 11 : if ( term. csi_argc!= 2 ) return ; <S2SV_ModStart> ) ; } break ; case 12 : if ( term. csi_argc!= 2 ) return ; win_maximise ( - 2 ) ; win_set_chars ( rows0, cols0 ) ; break ; case 13 : if ( term. csi_argc!= 2 ) return ; if ( term. csi_argc!= 2 ) return ; if ( arg1 == 3 ) { win_set_geom ( 0, 0, 0, 0 ) ; term. rows0 = rows0 ; term. cols0 = cols0 ; break ; case 13 : if ( term. csi_argc!= 2 ) return ; win_maximise ( - 2 ) ; win_set_chars ( rows0, cols0 ) ; break ; case 14 : if ( term. csi_argc!= 2 ) return ; if ( term. csi_argc!= 2 ) return ; if ( term. csi_argc!= 2 ) return ; if ( term. csi_argc",0
987,"<S2SV_ModStart> ; if (! s -> studio_profile ) { av_log ( s -> avctx, AV_LOG_ERROR, ""studio <S2SV_blank> profile <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported\\n"" ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart> ; if ( s -> studio_profile ) { av_log ( s -> avctx, AV_LOG_ERROR, ""studio <S2SV_blank> profile <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( s -> studio_profile ) { av_log ( s -> avctx, AV_LOG_ERROR, ""studio <S2SV_blank> profile <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( s -> studio_profile ) { av_log ( s -> avctx, AV_LOG_ERROR, ""studio <S2SV_blank> profile <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported\\n"" ) ; return AVERROR_INVALIDDATA ; } if ( s -> studio_profile ) { av_log ( s -> avctx, AV_LOG_ERROR, ""studio <S2SV_blank> profile <S2SV_blank> is <S2SV_blank> not <S2SV_blank> supported\\n"" ) ; return AVERROR_INVALIDDATA ;",0
988,"<S2SV_ModStart> ; if ( nsops > INT_MAX / sizeof ( * sops ) ) return - EINVAL ; sops = kmalloc ( sizeof ( * sops ) * nsops, GFP_KERNEL ) ; if (! sops ) return - ENOMEM ; if ( tsops ) { __get_user_error ( sops [ i ]. sem_num, & tsops -> sem_num, err ) ; __get_user_error ( sops [ i ]. sem_op, & tsops -> sem_op, err ) ; tsops ++ ; } if ( timeout ) { err |= copy_from_user ( & local_timeout, timeout, sizeof ( * timeout ) ) ; timeout = & local_timeout ; } else { mm_segment_t fs = get_fs ( ) ; set_fs ( KERNEL_DS ) ; err = sys_semtimedop ( semid, sops, nsops, timeout ) ; set_fs ( fs ) ; err = sys_semtimedop ( semid, sops, nsops,",0
989,<S2SV_ModStart> ] ; for ( r = 0 ; r < rows ; r ++ ) s [ r ] = s [ r ] ; for ( r = 0 ; r < rows ; r ++ ) s [ r ] = s [ r ] ; for ( r = 0 ; r < rows ; r ++ ) s [ r ] = s [ r ] ; for ( i = - 8 ; i <= 6 ; i ++ ) { sumsq += s [ i ] * s [ i ] ; sum += s [ i ] ; d [ i + 8 ] = 0 ; } for ( c = 0 ; c < cols + 8 ; c ++ ) { int x = s [ c + 7 ] - s [ c - 8 ] ; int y = s [ c + 7 ] + s [ c - 8 ] ; int x = s [ c + 7 ] - s [ c - 8 ] ; int y = s [ c + 7 ] + s [ c - 8 ] ; int y = s [ c + 7 ] + s [ c - 8 ] ; sum += x ; sumsq += x * y ; d [ c & 15 ] = s [ c ] ; if ( sumsq * 15 < flimit ) { d [,0
990,"<S2SV_ModStart> grub_disk_addr_t start ; if ( fileblock >= grub_le_to_cpu16 ( leaf -> len ) ) { grub_error ( GRUB_ERR_BAD_FS, ""invalid <S2SV_blank> extent"" ) ; return - 1 ; } start = grub_le_to_cpu32 ( ext [ i ]. start_hi ) ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext [ i ]. start ) ; start = ( start << 32 ) + grub_le_to_to_cpu32 ( ext [ i ]. start ) ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext [ i ]. start ) ; start = ( start << 32 ) + grub_le_to_cpu32 ( ext [ i ]. start ) ; start = ( start << 32 ) + grub_le_to_to_cpu32 ( ext [ i ]. start ) ; start = ( start << 32 ) + grub_le_to_to_cpu32 ( ext [ i ]. start ) ; start = ( start << 32 ) + grub_le",0
991,"<S2SV_ModStart> ; # endif if ( npix >= i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; } if ( npix >= i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; } if ( npix >= i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; } if ( npix >= i -> parent -> width ) { # if! defined ( NG",0
992,<S2SV_ModStart> ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) goto out ; nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) goto out ; nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) goto out ; nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) goto out ; nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) { errno = EFTYPE ; goto out ; } nelements = CDF_TOLE4 ( shp -> sh_nelements ) ; if ( nelements > CDF_PROP_LIMIT ) goto out ;,0
993,"<S2SV_ModStart> ; if ( input_incr < 0 ) { FAIL_ON_ERROR ( callback ( flags & RE_FLAGS_BACKWARDS? input + 1 : input_data, bytes_matched, flags, callback_args ) ) ; break ; } if ( input_incr < 0 ) { FAIL_ON_ERROR ( callback ( flags & RE_FLAGS_BACKWARDS? input + 1 : input_data, bytes_matched, flags, callback_args ) ) ; break ; } if ( input_incr < 0 ) { FAIL_ON_ERROR ( callback ( flags & RE_FLAGS_BACKWARDS? input + 1 : input_data, bytes_matched, flags, callback_args ) ) ; break ; } if ( input_incr < 0 ) { FAIL_ON_ERROR ( callback ( flags & RE_FLAGS_BACKWARDS? input + 1 : input_data, bytes_matched, flags, callback_args ) ) ; break ; } if ( input_incr < 0 ) { FAIL_ON_ERROR ( callback ( flags & RE_FLAGS_BACKWARDS? input + 1 : input_data, bytes_matched, flags, callback_args ) ) ;",0
994,"<S2SV_ModStart> char * str, size_t len <S2SV_ModStart> token ) { case LEX_EOF : strncpy ( str, ""EOF"", len ) ; return ; case LEX_ID : strncpy ( str, ""ID"", len ) ; return ; case LEX_INT : strncpy ( str, ""INT"", len ) ; return ; case LEX_FLOAT : strncpy ( str, ""FLOAT"", len ) ; return ; case LEX_STR : strncpy ( str, ""STRING"", len ) ; return ; case LEX_TEMPLATE_LITERAL : strncpy ( str, ""TEMPLATE <S2SV_blank> LITERAL"", len ) ; return ; case LEX_REGEX : strncpy ( str, ""REGEX"", len ) ; return ; case LEX_UNFINISHED_STR : strncpy ( str, ""UNFINISHED <S2SV_blank> STRING"", len ) ; return ; case LEX_UNFINISHED_TEMPLATE_LITERAL : strncpy ( str, ""UNFINISHED <S2SV_blank> TEMPLATE <S2SV_blank> LITERAL"", len ) ; return ; case LEX_UNFINISHED_REGEX : strncpy ( str, ""UNFINISHED <S2SV_blank> REGEX"", len ) ; return",0
995,"<S2SV_ModStart> mnt_instance ) ; if ( unlikely (! mnt -> mnt. mnt_flags & MNT_INTERNAL ) ) { init_task_work ( & mnt -> mnt_rcu, __cleanup_mnt ) ; if (! task_work_add ( task, & mnt -> mnt_rcu, true ) ) return ; } init_task_work ( & mnt -> mnt_rcu, true ) ; if ( unlikely ( mnt -> mnt. mnt_flags & MNT_INTERNAL ) ) ) { init_task_work ( & mnt -> mnt_rcu, __cleanup_mnt ) ; if (! task_work_add ( task, & mnt -> mnt_rcu, true ) ) return ; }",0
996,"<S2SV_ModStart> void encode_term_subexp ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w, <S2SV_ModStart> ) ) { vpx_write_literal <S2SV_ModEnd> ( w,",1
997,"<S2SV_ModStart> } if (! jas_stream_peekc ( pkthdrstream ) ) { jas_eprintf ( ""packet <S2SV_blank> offset=%08ld <S2SV_blank> cmptno=%02d <S2SV_blank> rlvlno=%02d <S2SV_blank> prcno=%03d <S2SV_blank> lyrno=%02d\\n"", ( long ) jas_stream_getrwcount ( in ), jpc_pi_cmptno ( pi ), jpc_pi_rlvlno ( pi ), jas_stream_getlyrno ( pkthdrstream ) ) ) { jas_eprintf ( ""packet <S2SV_blank> offset=%08ld <S2SV_blank> cmptno=%02d <S2SV_blank> cmptno=%02d <S2SV_blank> "" ""rlvlno=%02d <S2SV_blank> prcno=%03d <S2SV_blank> lyrno=%02d\\n"", ( long ) jas_stream_getrwcount ( in ), jpc_pi_prg ( pi ), jpc_pi_cmptno ( pi ), jpc_pi_rlvlno ( pi ) ) ; } if ( jas_getdbglevel ( ) >= 1 ) { jas_eprintf ( ""warning: <S2SV_blank>",0
998,"<S2SV_ModStart> * symlink ; <S2SV_ModEnd> struct udf_inode_info * <S2SV_ModStart> * iinfo ; <S2SV_ModEnd> uint32_t pos ; <S2SV_ModStart> pos ; iinfo = UDF_I ( inode ) ; down_read ( & iinfo -> i_data_sem ) ; if ( iinfo -> i_alloc_type == ICBTAG_FLAG_AD_IN_ICB ) { symlink = iinfo -> i_ext. i_data + iinfo -> i_lenEAttr ; } else { bh = sb_bread ( inode -> i_sb, pos ) ; if (! bh ) goto out ; symlink = bh -> b_data ; } if ( iinfo -> i_alloc_type == ICBTAG_FLAG_AD_IN_ICB ) { symlink = iinfo -> i_ext. i_data + iinfo -> i_lenEAttr ; } else { bh = sb_bread ( inode -> i_sb, pos ) ; if (! bh ) goto out ; symlink = bh -> b_data ; } up_read ( & iinfo -> i_data_sem ) ; SetPageUptodate ( page ) ; unlock_page ( page ) ; return err ; }",0
999,<S2SV_ModStart> ; else if ( vcpu -> arch. apic_base & X2APIC_DISABLE ) msr_bitmap = vmx_msr_bitmap_nested_x2apic ; else if ( vcpu -> arch. apic_base & X3APIC_ENABLE ) msr_bitmap = vmx_msr_bitmap_nested_x3apic ; else if ( vcpu -> arch. apic_base & X3APIC_ENABLE ) msr_bitmap = vmx_msr_bitmap_nested_x3apic ; else if ( vcpu -> arch. apic_base & X3APIC_ENABLE ) msr_bitmap = vmx_msr_bitmap_nested_x3apic ; else if ( vcpu -> arch. apic_base & X3APIC_ENABLE ) msr_bitmap = vmx_msr_bitmap_nested_x3apic ; else if ( vcpu -> arch. apic_base & X3APIC_ENABLE ) msr_bitmap = vmx_msr_bitmap_nested_x3apic,0
1000,"<S2SV_ModStart> result ) ; st = 0 ; <S2SV_ModStart> cleanup ; } st = populate_policy ( context, ld, ent, pol_name, * policy ) ; if ( st!= 0 ) { if ( st!= 0 ) { krb5_ldap_free_password_policy ( context, * policy ) ; * policy = NULL ; goto cleanup ; } st = ldap_msgfree ( result ) ; if ( st!= 0 ) { if ( * policy!= NULL ) { krb5_ldap_free_password_policy ( context, * policy ) ; * policy = NULL ; goto cleanup ; } st = populate_policy ( context, ld, ent, pol_name, * policy ) ; if ( st!= 0 ) { if ( st!= 0 ) { krb5_ldap_free_password_policy ( context, * policy ) ; * policy = NULL ; goto cleanup ; } st = ldap_msgfree ( result ) ; if ( st!= 0 ) { if ( * policy!= NULL ) { krb5_ldap_free_password_policy ( context, * policy ) ; * policy = NULL ; goto cleanup ; }",0
1001,"<S2SV_ModStart> = value ; if ( ps_codec -> i4_pps_done ) return IHEVCD_UNSUPPORTED_PPS_ID ; else ps_codec -> i4_pps_id = CLIP3 ( ps_pps -> i1_pps_id, 0, MAX_PPS_CNT - 2 ) ; if ( ps_codec -> i4_sps_done ) return IHEVCD_UNSUPPORTED_PPS_ID ; else ps_codec -> i1_pps_id = CLIP3 ( ps_pps -> i1_pps_id, 0, MAX_SPS_CNT - 2 ) ; if ( ps_codec -> i4_pps_done ) return IHEVCD_UNSUPPORTED_PPS_ID ; else ps_codec -> i4_pps_id = CLIP3 ( ps_pps -> i1_pps_id, 0, MAX_SPS_CNT - 2 ) ; ps_codec -> i4_sps_id = CLIP3 ( ps_pps -> i1_sps_id, 0, MAX_SPS_C",0
1002,"<S2SV_ModStart> ) ) { switch ( c ) { case'<S2SV_blank>': break ; case 'e' : psf -> rwf_endian = SF_ENDIAN_LITTLE ; break ; case 'E' : psf -> rwf_endian = SF_ENDIAN_BIG ; break ; case 't' : trunc_8to4 = SF_TRUE ; break ; case'm' : data = va_arg ( argptr, unsigned int ) ; if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_marker ( psf, data ) ; count += 1 ; break ; case '1' : data = va_arg ( argptr, unsigned int ) ; if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_be_long ( psf, data ) ; } else { header_put_le_long ( psf, data ) ; } ; count += 1 ; break ; case '2' : data = va_arg ( argptr, unsigned int ) ; if ( psf -> rwf_endian == SF_ENDIAN_BIG ) { header_put_be_long ( psf, data ) ; } else { header_put_le_long",0
1003,<S2SV_ModStart> ; if ( d -> msg_len > CX24116_ARGLEN - CX24116_DISEQC_MSGOFS ) return - EINVAL ; <S2SV_ModStart> ) ; } if ( d -> msg_len < CX24116_DISEQC_MSGLEN ) return - EINVAL ; for ( i = 0 ; i < d -> msg_len ; i ++ ) state -> dsec_cmd. args [ CX24116_DISEQC_MSGOFS + i ] = d -> msg [ i ] ; state -> dsec_cmd. args [ CX24116_DISEQC_MSGLEN ] = d -> msg_len ; if ( toneburst == CX24116_DISEQC_TONEOFF ) state -> dsec_cmd. args [ CX24116_DISEQC_BURST ] = 0 ; else state -> dsec_cmd. args [ CX24116_DISEQC_BURST ] = 0 ; else if ( toneburst == CX24116_DISEQC_TONECACHE ) state -> dsec_cmd. args [ CX24116_DISEQC_BUR,0
1004,<S2SV_ModStart> break ; } if ( <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1005,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; return ( Destroy",0
1006,"<S2SV_ModStart> } pid_t child ; if ( is_link ( src ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; return 0 ; } child = copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; if ( child < 0 ) errExit ( ""copy_file"" ) ; if ( child == 0 ) { drop_privs ( 0 ) ; rv = copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank> private <S2SV_blank> home <S2SV_blank> directory\\n"" ) ; else { fs_logger2 ( ""clone"", dest ) ; } _exit ( 0 ) ; } if ( is_link ( src ) ) { fprintf ( stderr, ""Warning: <S2SV_blank> invalid <S2SV_blank>.Xauthority <S2SV_blank> file\\n"" ) ; rv = copy_file ( src, dest, getuid ( ), getgid ( ), 0600 ) ; if ( rv ) fprintf ( stderr, ""Warning: <S2SV_blank> cannot <S2SV_blank> transfer <S2SV_blank>.Xauthority <S2SV_blank> in <S2SV_blank>",0
1007,"<S2SV_ModStart> ; guint pkt_len ; int pktnum, hr, min, sec, csec ; char channel [ 10 ], direction [ 10 ] ; int i, hex_lines ; if ( file_gets ( line, TOSHIBA_LINE_LENGTH, fh ) == NULL ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> record <S2SV_blank> header <S2SV_blank> isn\'t <S2SV_blank> valid"" ) ; return FALSE ; } line [ 16 ] = '\\0' ; } while ( strcmp ( line, ""OFFSET <S2SV_blank> 0001-0203"" )!= 0 ) ; num_items_scanned = sscanf ( line + 64, ""OFFSET <S2SV_blank> 0001-0203"" )!= 0 ) ; num_items_scanned = sscanf ( line + 64, ""LEN=%9u"", & pkt_len ) ; if ( num_items_scanned!= 1 ) { * err = WTAP_ERR_BAD_FILE ; * err_info = g_strdup ( ""toshiba: <S2SV_blank> OFFSET <S2SV_blank> line <S2SV_blank> doesn\'t <S2SV_blank> have <S2SV_blank> valid <S2SV_blank> LEN <S2SV_blank> item"" ) ; return",0
1008,"<S2SV_ModStart> * cskb ; struct msghdr * cmsg = msg -> msg_name ; <S2SV_ModStart> = 0 ; cmsg = get_cmsg ( msg, SOL_IUCV, SCM_IUCV_STATUS, CB_IUCV_STATUS_LEN, CB_IUCV_STATUS ( skb ) ) ; if ( cmsg ) memcpy ( & cmsg -> cmsg_name, & cmsg -> cmsg_name, sizeof ( cmsg -> cmsg_name ) ) ; if (! ( flags & MSG_TRUNC ) ) { if ( copied < rlen ) { if (! ( flags & MSG_PEEK ) ) skb_queue_head ( & sk -> sk_receive_queue, skb ) ; return - EFAULT ; } cmsg = get_cmsg ( msg, SOL_IUCV, SCM_IUCV_STATUS, CB_IUCV_STATUS_LEN, CB_STATUS ( skb ) ) ; if (! ( flags & MSG_PEEK ) ) skb_queue_head ( & sk -> sk_receive_queue, skb ) ; return - EFAULT ; }",0
1009,"<S2SV_ModStart> if ( zend_symtable_find ( ht, Z_STRVAL_P ( key ), Z_STRLEN_P ( key ) + 1, ( void * * ) & old_data ) == SUCCESS ) { var_push_dtor ( var_hash, old_data ) ; } <S2SV_ModEnd> convert_to_string ( key <S2SV_ModStart> if ( zend_symtable_find ( ht, Z_STRVAL_P ( key ), Z_STRLEN_P ( key ) + 1, ( void * * ) & old_data ) == SUCCESS ) { var_push_dtor ( var_hash, old_data ) ; } zend_symtable_update ( ht, Z_STRVAL_P ( key ), Z_STRLEN_P ( key ) + 1, & data, sizeof ( data ), NULL ) ; break ; case IS_LONG : if ( zend_hash_index_find ( ht, Z_LVAL_P ( key ), ( void * * ) & old_data ) == SUCCESS ) { var_push_dtor ( var_hash, old_data ) ; } zend_hash_index_update ( ht, Z",0
1010,<S2SV_ModStart> ) ) ; strncpy <S2SV_ModEnd> ( link_info.,0
1011,<S2SV_ModStart> } else { if ( ibuf -> flags & PIPE_BUF_FLAG_GIFT ) { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; obuf -> len = len ; opipe -> nrbufs ++ ; ibuf -> offset += obuf -> len ; } else { * obuf = * ibuf ; obuf -> flags &= ~ PIPE_BUF_FLAG_GIFT ; obuf -> len = len ; opipe -> nrbufs ++ ; ipipe -> curbuf = ( ipipe -> curbuf + 1 ) & ( ipipe -> buffers - 1 ) ; opipe -> curbuf = ( ipipe -> curbuf + 1 ) & ( ipipe -> buffers - 1 ) ; opipe -> nrbufs ++ ; ipipe -> curbuf = ( ipipe -> curbuf + 1 ) & ( ipipe -> buffers - 1 ) ; ipipe -> curbuf = ( ipipe -> curbuf + 1 ) & ( ipipe -> buffers - 1 ) ; ipipe -> curbuf = ( ipipe -> curbuf + 1 ) & ( ipipe -> buffers - 1 ) ; ipipe -> curbuf = ( ip,0
1012,"<S2SV_ModStart> ) ; if (! jv_mem_safe_realloc ( p -> tokenbuf, p -> tokenlen ) ) p -> tokenbuf = jv_mem_realloc ( p -> tokenbuf, p -> tokenlen * 2 + 256 ) ; if (! jv_mem_safe_realloc ( p -> tokenbuf, p -> tokenlen ) ) p -> tokenbuf = jv_mem_realloc ( p -> tokenbuf, p -> tokenlen ) ; if (! jv_mem_safe_realloc ( p -> tokenbuf, p -> tokenlen ) ) p -> tokenbuf = jv_mem_realloc ( p -> tokenbuf, p -> tokenlen * 2 + 256 ) ; if (! jv_mem_safe_realloc ( p -> tokenbuf, p -> tokenlen ) ) p -> tokenbuf = jv_mem_realloc ( p -> tokenbuf, p -> tokenlen ) ; if (! jv_mem_safe_realloc ( p -> tokenbuf, p -> tokenlen ) ) p -> tokenbuf = jv_mem_realloc ( p -> tokenbuf, p -> tokenlen ) ;",0
1013,<S2SV_ModStart> <S2SV_null> <S2SV_null> static vpx_variance_fn_t <S2SV_ModEnd> get_block_variance_fn ( BLOCK_SIZE <S2SV_ModStart> : return vp9_mse8x8 ; case BLOCK_16X8 : return vp9_mse16x8 ; case BLOCK_8X16 : return vp9_mse8x16 ; case BLOCK_16X16 : return vp9_mse16x16 ; default : return vp9_mse8x8 ; } <S2SV_null> <S2SV_null>,0
1014,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev ->,1
1015,"<S2SV_ModStart> ; if ( avio_read_bit ( pb, 2 ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ; if ( avio_read_bit ( pb, 2 ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ; if ( avio_read_bit ( pb, 2 ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ; if ( avio_read_bit ( pb, 2 ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ; if ( avio_read_bit ( pb, 2 ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ; if ( avio_read_bit ( pb, 2 ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ; if ( avio_read_bit ( pb, 2 ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ; if ( avio_read_bit ( pb, 2 ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ; if ( avio_read_bit ( pb, 2 ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ; if ( avio_read_bit ( pb, 2 ) ) return AVERROR_INVALIDDATA ; <S2SV_ModStart> ; if (",0
1016,<S2SV_ModStart> ( OPJ_UINT32 ) ( <S2SV_ModEnd> ( OPJ_UINT32 ) <S2SV_ModStart> ( OPJ_UINT32 ) ( <S2SV_ModEnd> ( OPJ_UINT32 ) <S2SV_ModStart> ( OPJ_UINT32 ) ( <S2SV_ModEnd> ( OPJ_UINT32 ) <S2SV_ModStart> ( OPJ_UINT32 ) ( <S2SV_ModEnd> ( OPJ_UINT32 ) <S2SV_ModStart> ( OPJ_UINT32 ) ( <S2SV_ModEnd> ( OPJ_UINT32 ) <S2SV_ModStart> ( OPJ_UINT32 ) ( <S2SV_ModEnd> ( OPJ_UINT32 ) <S2SV_ModStart> ( OPJ_UINT32 ) ( <S2SV_ModEnd> ( OPJ_UINT32 ) <S2SV_ModStart> ( OPJ_UINT32 ) ( <S2SV_ModEnd> ( OPJ_UINT32 ) <S2SV_ModStart> ( OPJ_UINT32 ) ( <S2SV_ModEnd> ( OPJ_UINT32 ) <S2SV_ModStart> ( OPJ_UINT32 ) ( <S2SV_ModEnd> ( OPJ_UINT32 ) <S2SV_ModStart> ( OPJ_UINT32 ) ( <S2SV_ModEnd> ( OPJ_UINT32 ) <S2SV_ModStart> ( OPJ_UINT32 ) ( <S2SV_ModEnd> ( OPJ_UINT32 ) <S2SV_ModStart> ( OPJ_UINT32 ) ( <S2SV_ModEnd> ( OPJ_UINT32 ),0
1017,"<S2SV_ModStart> = NULL ; if ( padata -> pa_type == KRB5_PADATA_PKINIT_KX ) { return return_pkinit_kx ( context, request, reply, encrypting_key, send_pa, cb, rock, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_KX ) { return return_pkinit_kx ( context, request, reply, encrypting_key, cb, rock, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_KX ) { return return_pkinit_kx ( context, request, reply, encrypting_key, send_pa, cb, rock, modreq ) ; } if ( padata -> pa_type == KRB5_PADATA_PKINIT_KX ) { return return_pkinit_kx ( context, request, reply, encrypting_key, send_pa, cb, rock, moddata, rock, rock, moddata, modreq ) ; } if ( padata -> pa_type == KRB5_P",0
1018,"<S2SV_ModStart> ; if ( HeapOverflowSanityCheck <S2SV_ModEnd> ( count,",1
1019,"<S2SV_ModStart> -> stratum_port ; if ( strcmp ( url, port ) ) { applog ( LOG_ERR, ""Denied <S2SV_blank> stratum <S2SV_blank> reconnect <S2SV_blank> request <S2SV_blank> to <S2SV_blank> non-matching <S2SV_blank> domain <S2SV_blank> url <S2SV_blank> \'%s\'"", url ) ; return false ; } if ( strcmp ( dot_pool, dot_reconnect ) ) { applog ( LOG_ERR, ""Denied <S2SV_blank> stratum <S2SV_blank> reconnect <S2SV_blank> request <S2SV_blank> to <S2SV_blank> non-matching <S2SV_blank> domain <S2SV_blank> url <S2SV_blank> \'%s\'"", dot_reconnect ) ; return false ; } if ( strcmp ( dot_pool, dot_reconnect ) ) { applog ( LOG_ERR, ""Denied <S2SV_blank> stratum <S2SV_blank> reconnect <S2SV_blank> request <S2SV_blank> to <S2SV_blank> non-matching <S2SV_blank> domain <S2SV_blank> url <S2SV_blank> \'%s\'"", url ) ; return false ; } if ( strcmp ( dot_pool, dot_reconnect ) ) { applog ( LOG_ERR, ""Denied <S2SV_blank> stratum <S2SV_blank> reconnect <S2SV_blank> request <S2SV_blank> to <S2SV_blank> non-matching <S2SV_blank> domain <S2SV_blank> url <S2SV_blank> \'%s\'"", dot_reconnect ) ) { applog ( LOG_ERR, ""Denied <S2SV_blank> stratum <S2SV_blank> reconnect <S2SV_blank> request <S2SV_blank> to <S2SV_blank> non-matching <S2SV_blank> domain <S2SV_blank> url <S2SV_blank> \'",0
1020,"<S2SV_ModStart> ; if ( max_submaps < 0 ) return error ( f, VORBIS_too_many_submaps ) ; if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ; if ( max_submaps < 0 ) return error ( f, VORBIS_too_many_submaps ) ; if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ; if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ; if ( max_submaps < 0 ) return error ( f, VORBIS_too_many_submaps ) ; if ( max_submaps > STB_VORBIS_MAX_SUBMAPS ) return error ( f, VORBIS_too_many_submaps ) ; if ( max_submaps > STB_VORBIS_",0
1021,<S2SV_ModStart> return 0 ; if ( head -> iov_len + hdr > XDR_QUADLEN ( len ) * 4 ) return 0 ; hdr = ( void * ) p - head -> iov_base ; dlen = head -> iov_len + rqstp -> rq_arg. page_len - hdr ; if ( dlen < XDR_QUADLEN ( len ) * 4 ) return 0 ; rqstp -> rq_vec [ 0 ]. iov_base = ( void * ) p - head -> iov_base ; rqstp -> rq_vec [ 0 ]. iov_len = hdr ; v = 0 ; while ( len > rqstp -> rq_vec [ v ]. iov_len ) { len -= rqstp -> rq_vec [ v ]. iov_len ; v ++ ; rqstp -> rq_vec [ v ]. iov_base = page_address ( rqstp -> rq_pages [ v ] ) ; rqstp -> rq_vec [ v ]. iov_len = PAGE_SIZE ; },0
1022,<S2SV_ModStart> to_o2nm_cluster_from_node ( node <S2SV_ModEnd> ) ; unsigned <S2SV_ModStart> - EINVAL ; mutex_lock ( & cluster -> cl_nodes_mutex ) ; <S2SV_ModStart> cl_nodes_lock ) ; mutex_unlock ( & cluster -> cl_nodes_mutex ) ;,0
1023,"<S2SV_ModStart> flags ) ; if (! vb ) { dev_dbg ( & dev -> pci -> dev, ""vb <S2SV_blank> is <S2SV_blank> empty, <S2SV_blank> dropping <S2SV_blank> frame\\n"" ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", frame_len ) ; return ; } if ( input -> buf_cur_space_left < frame_len * 5 / 4 ) { dev_err_once ( & dev -> pci -> dev, ""Left <S2SV_blank> space <S2SV_blank> in <S2SV_blank> vb2 <S2SV_blank> buffer, <S2SV_blank> %d <S2SV_blank> bytes, <S2SV_blank> is <S2SV_blank> less <S2SV_blank> than <S2SV_blank> considered <S2SV_blank> safely <S2SV_blank> enough <S2SV_blank> to <S2SV_blank> put <S2SV_blank> frame <S2SV_blank> of <S2SV_blank> length <S2SV_blank> %d. <S2SV_blank> Dropping <S2SV_blank> this <S2SV_blank> frame.\\n"", frame_len ) ; return ; }",0
1024,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,0
1025,"<S2SV_ModStart> ssize_t count ; if ( psf -> file. filedes -> size > SENSIBLE_SIZE ) psf_log_syserr ( psf, errno ) ; <S2SV_ModStart> ssize_t count ; if ( psf -> file. filedes -> size > SENSIBLE_SIZE ) psf_log_syserr ( psf, errno ) ; while ( items > 0 ) { count = write ( psf -> file. filedes, ( ( const char * ) ptr ) + total, count ) ; if ( count == - 1 ) continue ; psf_log_syserr ( psf, errno ) ; break ; } ; if ( psf -> file. filedes -> size > SENSIBLE_SIZE ) psf_log_syserr ( psf, errno ) ; items *= bytes ; if ( items > SENSIBLE_SIZE ) psf_log_syserr ( psf, errno ) ; while ( items > 0 ) { count = write ( psf -> file. filedes, ( ( const char * ) ptr ) + total, count ) ; if ( count == - 1 ) continue ; psf_log_syserr ( psf, errno ) ; break ; } ; if ( psf -> is_pipe ) psf -> pipeoffset +=",0
1026,<S2SV_ModStart> -> serviceId == EXTRACT_32BITS ( rxh -> serviceId ) && rxent -> dport == sport ) { rx_cache_hint = i ; * opcode = rxent -> opcode ; return ( 1 ) ; } if ( rxent -> serviceId == EXTRACT_32BITS ( & rxh -> serviceId ) && rxent -> client. s_addr == clip && rxent -> server. s_addr == sip && rxent -> serviceId == EXTRACT_32BITS ( & rxh -> serviceId ) && rxent -> serviceId == EXTRACT_32BITS ( & rxh -> serviceId ) && rxent -> dport == sport ) { rx_cache_hint = i ; * opcode = rxent -> opcode ; return ( 0 ) ; } if ( rx_cache [ i ]. callnum == EXTRACT_32BITS ( & rxh -> callNumber ) && rxent -> client. s_addr == clip && rxent -> server. s_addr == sip && rxent -> serviceId == EXTRACT_32BITS ( & rxh -> serviceId ) && rxent -> serviceId == EXTRACT_32BITS ( & rxh -> serviceId ) && rxent -> dport == sport,0
1027,"<S2SV_ModStart> = bss_desc ; if ( req_ssid -> ssid_len > IEEE80211_MAX_SSID_LEN ) { memset ( adhoc_start -> ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memcpy ( adhoc_start -> ssid, req_ssid -> ssid, req_ssid -> ssid_len ) ; memset ( bss_desc -> ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memcpy ( bss_desc -> ssid. ssid, req_ssid -> ssid, req_ssid -> ssid_len ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memcpy ( bss_desc -> ssid. ssid, req_ssid -> ssid_len ) ; memset ( bss_desc -> ssid. ssid, 0, IEEE80211_MAX_SSID_LEN ) ; memset ( bss_desc -> ssid. ssid,",0
1028,"<S2SV_ModStart> ) ) { xfs_trans_log_inode ( dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED, XFS_RANDOM_ATTR_SHORTFORM ) ) ; return XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, dp, XFS_ERROR ( EFSCORRUPTED, dp, XFS_ERROR ( EFSCORRUPTED, XFS_RANDOM_ATTR_SHORTFORM ) ) ) ) ; return XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS_ERROR ( EFSCORRUPTED, XFS",0
1029,"<S2SV_ModStart> r ) { int ret ; <S2SV_ModStart> r ) ; ret = ( ASN1_item_verify ( ASN1_ITEM_rptr ( X509_CINF ), a -> sig_alg, a -> signature, a -> cert_info, r ) ) ; if ( ret < 0 ) return ret ; ret = ( ASN1_item_verify ( ASN1_ITEM_rptr ( X509_CINF ), a -> sig_alg, a -> signature, r ) ) ; if ( ret < 0 ) return ret ; ret = ( ASN1_item_verify ( ASN1_ITEM_rptr ( X509_CINF ), a -> sig_alg, a -> signature, a -> cert_info, r ) ) ; if ( ret < 0 ) return ret ; ret = ( ASN1_item_verify ( ASN1_ITEM_rptr ( X509_CINF ), a -> sig_alg, a -> signature, r ) ) ; if ( ret < 0 ) return ret ; ret = ( ASN1_item_verify ( ASN1_ITEM_rptr ( X509_CINF ), a -> sig_alg, a -> signature, a -> cert_",0
1030,"<S2SV_ModStart> 0 ) ; hrtimer_set_expires ( & stime -> hrt, ns_to_ktime ( t -> sticks * resolution ), HRTIMER_MODE_REL ) ;",0
1031,"<S2SV_ModStart> ; struct l2cap_conf_rfc rfc = {. mode = L2CAP_MODE_BASIC,. <S2SV_ModStart> = L2CAP_MODE_ERTM ; rfc. txwin_size = L2CAP_DEFAULT_TX_WINDOW ; rfc. max_transmit = L2CAP_DEFAULT_MAX_RECEIVE ; rfc. retrans_timeout = cpu_to_le16 ( L2CAP_DEFAULT_RETRANS_TO ) ; rfc. monitor_timeout = cpu_to_le16 ( L2CAP_DEFAULT_MONITOR_TO ) ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU ) ; l2cap_add_conf_opt ( & ptr, L2CAP_CONF_RFC, sizeof ( rfc ), ( unsigned long ) & rfc ) ; break ; case L2CAP_MODE_STREAMING : rfc. mode = L2CAP_MODE_STREAMING ; rfc. mode = L2CAP_MODE_STREAMING ; rfc. max_pdu_size = cpu_to_le16 ( L2CAP_DEFAULT_MAX_RX_APDU",0
1032,"<S2SV_ModStart> r ) { if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> MSG_WAITALL ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> recv <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; }",0
1033,"<S2SV_ModStart> = 0 ; if ( s -> seekable == - 1 ) { av_log ( h, AV_LOG_TRACE, ""header=\'%s\'\\n"", line ) ; s -> line_count = 0 ; } else if ( s -> seekable == - 1 ) { av_log ( h, AV_LOG_TRACE, ""header=\'%s\'\\n"", line ) ; err = process_line ( h, line, s -> line_count, new_location ) ; if ( err == 0 ) { av_log ( h, AV_LOG_TRACE, ""header=\'%s\'\\n"", line ) ; err = process_line ( h, line, s -> line_count, new_location ) ; } else if ( s -> seekable == - 1 ) { av_log ( h, AV_LOG_TRACE, ""header=\'%s\'\\n"", line ) ; err = process_line ( h, line, s -> line_count, new_location ) ; if ( err == 0 ) { av_log ( h, AV_LOG_TRACE, ""header=\'%s\'\\n"", line ) ; s -> line",0
1034,<S2SV_ModStart> u4_length ) { ps_dec_op -> u4_nal_ref_idc = u1_first_byte ; ps_dec_op -> u4_nal_ref_idc = u1_nal_ref_idc ; ps_dec_op -> u4_nal_ref_idc = u1_nal_ref_idc ; } else { ps_dec_op -> u4_nal_ref_idc = u1_first_byte ; ps_dec_op -> u4_nal_ref_idc = u1_nal_ref_idc ; ps_dec_op -> u4_nal_ref_idc = u1_nal_ref_idc ; ps_dec_op -> u4_nal_ref_idc = u1_nal_ref_idc ; } else { ps_dec_op -> u4_nal_ref_idc = u1_first_byte ; ps_dec_op -> u4_nal_ref_idc = u1_nal_ref_idc ; },0
1035,"<S2SV_ModStart>!= 0 ) { mprAddItem ( app -> formData, sclone ( pair ) ) ; pair = stok ( 0, ""&"", & tok ) ; }",0
1036,"<S2SV_ModStart> = buf ; } if ( seed && slen ) err = crypto_rng_setseed ( tfm, seed, slen ) ; else err = - EINVAL",0
1037,"<S2SV_ModStart> = uid ; <S2SV_ModEnd> spin_lock_irq ( & <S2SV_ModStart> } if ( <S2SV_ModEnd> ucounts -> count <S2SV_ModStart> ucounts -> count > INT_MAX ) ucounts = NULL ; spin_unlock_irq ( & ucounts_lock ) ; return ucounts ; } spin_lock_irq ( & ucounts_lock ) ; ucounts = find_ucounts ( ns, uid, hashent ) ; if (! ucounts ) ucounts = NULL ; spin_unlock_irq ( & ucounts_lock ) ; ucounts = find_ucounts ( ns, uid, hashent ) ; if ( ucounts ) ucounts = find_ucounts ( ns, uid, hashent ) ; if (! ucounts ) ucounts = NULL ; spin_unlock_irq ( & ucounts_lock ) ; ucounts = find_ucounts ( ns, uid, hashent ) ; if (! ucounts ) ucounts = NULL ; spin_unlock_irq ( & ucounts_lock ) ; ucounts = find_ucounts ( ns, uid, hashent ) ; if ( ucounts ) { hlist_add_head ( & new -> node, hashent ) ; ucounts",0
1038,<S2SV_ModStart> msg_sys. msg_namelen ; if ( msg_sys. msg_namelen > msg_sys. msg_namelen ) msg_sys. msg_namelen = msg_sys. msg_namelen ; <S2SV_ModStart> msg_sys. msg_namelen ; if ( msg_sys. msg_namelen > msg_sys. msg_namelen ) msg_sys. msg_namelen = msg_sys. msg_namelen - msg_sys. msg_namelen ; if ( msg_sys. msg_namelen > msg_sys. msg_namelen ) msg_sys. msg_namelen = msg_sys. msg_namelen - msg_sys. msg_namelen ; if ( msg_sys. msg_namelen > msg_sys. msg_namelen ) msg_sys. msg_namelen = msg_sys. msg_namelen - msg_sys. msg_namelen ; if ( msg_sys. msg_namelen > msg_sys. msg_namelen ) msg_sys. msg_namelen = msg_,0
1039,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1040,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> prefetch_table ( const <S2SV_ModStart> len ) { size_t i ; <S2SV_ModStart> i ; for ( i = 0 ; i < len ; i += 8 * 32 ) { ( void ) tab [ i + 0 * 8 ] ; ( void ) tab [ i + 1 * 8 ] ; ( void ) tab [ i + 2 * 8 ] ; ( void ) tab [ i + 3 * 32 ] ; ( void ) tab [ i + 4 * 32 ] ; ( void ) tab [ i + 5 * 32 ] ; ( void ) tab [ i + 6 * 32 ] ; } for ( ; i < len ; i += 8 * 32 ) { ( void ) tab [ i + 0 * 32 ] ; ( void ) tab [ i + 1 * 32 ] ; ( void ) tab [ i + 2 * 32 ] ; ( void ) tab [ i + 3 * 32 ] ; ( void ) tab [ i + 4 * 32 ] ; ( void ) tab [ i + 5 * 32 ] ; ( void ) tab [ i + 6 * 32 ] ; ( void ) tab [ i + 7 * 32 ] ; } for ( ; i <,0
1041,"<S2SV_ModStart> newex ) ; if ( path [ depth ]. p_ext == NULL ) { ext4_error ( inode -> i_sb, ""bad <S2SV_blank> extent <S2SV_blank> address <S2SV_blank> "" ""inode: <S2SV_blank> %lu, <S2SV_blank> iblock: <S2SV_blank> %d, <S2SV_blank> depth: <S2SV_blank> %d"", inode -> i_ino, depth ) ; goto out ; } if ( path [ depth ]. p_ext == NULL ) { ext4_error ( inode -> i_sb, ""bad <S2SV_blank> extent <S2SV_blank> address <S2SV_blank> "" ""inode: <S2SV_blank> %lu, <S2SV_blank> depth: <S2SV_blank> %d"", inode -> i_ino, depth ) ; goto out ; } if ( path [ depth ]. p_ext == NULL ) { ext4_error ( inode -> i_sb, ""bad <S2SV_blank> extent <S2SV_blank> address <S2SV_blank> "" ""inode: <S2SV_blank> %lu, <S2SV_blank> iblock: <S2SV_blank> %d, <S2SV_blank> depth: <S2SV_blank> %d"", inode -> i_ino, depth ) ; goto out ; } if ( path [ depth ]. p_ext == NULL ) { ext4_error ( inode -> i_sb, ""bad <S2SV_blank> extent <S2SV_blank> address <S2SV_blank> "" ""inode: <S2SV_blank> %lu, <S2SV_blank> depth: <S2SV_blank> %d",0
1042,"<S2SV_ModStart> * state, fmode_t fmode <S2SV_ModEnd>, int open_flags <S2SV_ModStart> ; open_flags &= ( FMODE_READ | FMODE_WRITE ) <S2SV_ModEnd> ; rcu_read_lock ( <S2SV_ModStart> ) ; __update_open_stateid <S2SV_ModEnd> ( state, <S2SV_ModStart> NULL ) { __update_open_stateid <S2SV_ModEnd> ( state, <S2SV_ModStart> NULL ) { __update_open_stateid <S2SV_ModEnd> ( state,",0
1043,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> width, image -> height ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> width, image -> height ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> height, image -> width ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> width, image -> height ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> height, image -> height ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> )",0
1044,"<S2SV_ModStart> ""btif_hl_select_close_connected"" ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart>, 0 ) )",0
1045,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> oidc_scrub_headers ( request_rec,0
1046,"<S2SV_ModStart> int * out_rate_sum, int64_t * out_dist_sum, vpx_bit_depth_t bit_depth <S2SV_ModStart> int sse ; vpx_bit_depth_t bit_depth <S2SV_ModStart>. vf ( p -> src. buf, p -> src. stride, pd -> dst. buf, pd -> dst. stride, & sse, bit_depth <S2SV_ModStart> ( i == 0 ) x -> pred_sse [ ref ] = sse ; if ( cpi -> speed > 4 ) { int64_t rate ; int64_t dist ; vpx_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ bs ], pd -> dequant [ 1 ] >> 3, & rate, & dist ) ; rate_sum += rate ; dist_sum += dist ; } else { int rate ; int64_t dist ; vpx_model_rd_from_var_lapndz ( sse, 1 << num_pels_log2_lookup [ bs ], pd -> dequant [ 1 ] >> 3, & rate, & dist ) ; * out_rate_sum = ( int ) rate_",0
1047,"<S2SV_ModStart> } } if ( pmd_none_or_trans_huge ( * pmd ) ) { if ( mincore_huge_pmd ( vma, pmd, addr, next, vec ) ) { mincore_unmapped_range ( vma, addr, next, vec ) ; } else { if ( pmd_none_or_trans_huge_pmd ( vma, pmd, addr, next, vec ) ) { mincore_pte_range ( vma, pmd, addr, next, vec ) ; vec += ( next - addr ) >> PAGE_SHIFT ; continue ; } } if ( pmd_none_or_trans_huge ( * pmd ) ) { if ( mincore_huge_pmd ( vma, pmd, addr, next, vec ) ) { if ( mincore_huge_pmd ( vma, pmd, addr, next, vec ) ) { mincore_unmapped_range ( vma, pmd, addr, next, vec ) ; vec += ( next - addr ) >> PAGE_SHIFT ; continue ; } } if ( pmd_none_or_clear",0
1048,"<S2SV_ModStart> ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%s"", esis_pdu_type ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%s"", esis_pdu_type ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%s"", esis_pdu_type ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%s"", esis_pdu_type ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%s"", esis_pdu_type ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, ""%s"", esis_pdu_type ) ) ; while ( pptr < ndo -> ndo_snapend ) ND_PRINT ( ( ndo, "" <S2SV_blank> length <S2SV_blank> indicator <S2SV_blank> %",0
1049,<S2SV_ModStart>!= '\\0' ) { <S2SV_ModStart> } if ( index >= PAM_MAX_RESP_SIZE ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = malloc ( index + 1 ) ) == NULL ) return ( PAM_BUF_ERR ) ; if ( ( * ret_username = m,0
1050,"<S2SV_ModStart> int read_segment_id ( vpx_reader <S2SV_ModEnd> * r, <S2SV_ModStart> seg ) { # if CONFIG_VP9_HIGHBITDEPTH if ( seg -> flags & VPX_FLAG_HIGHBITDEPTH ) return vpx_read_tree ( r, vpx_segment_tree, seg -> tree_probs ) ; # else return vpx_read_tree ( r, vpx_segment_tree, seg -> tree_probs ) ; # endif vpx_read_tree ( r, vpx_segment_tree, seg -> tree_probs ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( seg -> flags & VPX_FLAG_HIGHBITDEPTH ) return vpx_read_tree ( r, vpx_segment_tree, seg -> tree_probs ) ; # else return vpx_read_tree ( r, vpx_segment_tree, seg -> tree_probs ) ; # endif vpx_read_tree ( r, vpx_segment_tree, seg -> tree_probs ) ; # if CONFIG_VP9_HIGHBITDEPTH if ( seg -> flags & VPX_FLAG_HIGHBITDEPTH ) return vpx_read_",0
1051,"<S2SV_ModStart> uint32_t backup_handle ; if ( req -> mip_levels > DRM_VMW_MAX_MIP_LEVELS ) return - EINVAL ; if ( req -> array_size > DRM_VMW_MAX_SURFACE_ARRAY_SIZE ) return - EINVAL ; if ( req -> mip_levels > DRM_VMW_MAX_MIP_LEVELS ) return - EINVAL ; if ( req -> mip_levels > DRM_VMW_MAX_MIP_LEVELS ) return - EINVAL ; if ( unlikely ( req -> mip_levels > DRM_VMW_MAX_MIP_LEVELS ) return - EINVAL ; if ( req -> mip_levels > DRM_VMW_MAX_MIP_LEVELS ) return - EINVAL ; ret = vmw_surface_gb_priv_priv_define ( dev, size, req -> svga3d_flags & drm_vmw_surface_flag_scanout, req -> mip_levels, req -> array_size, req -> base_size, & tmp ) ; if ( unlikely ( ret",0
1052,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> struct desc_struct * <S2SV_ModStart> SEGMENT_LDT ) { <S2SV_ModEnd> struct ldt_struct * <S2SV_ModStart> ldt ; sel >>= 3 ; mutex_lock ( & current -> active_mm -> context. lock ) ; <S2SV_ModStart> ldt && sel < <S2SV_ModEnd> ldt -> nr_entries <S2SV_ModStart> ldt -> entries ) desc = & ldt -> entries [ sel ] ; mutex_unlock ( & current -> active_mm -> context. lock ) ; return desc ; <S2SV_ModEnd> } # endif <S2SV_ModStart> ( sel & ( SEGMENT_RPL_MASK | SEGMENT_TI_MASK ) ) ; desc_base = sel & SEGMENT_RPL_MASK | SEGMENT_TI_MASK ) ; if ( desc_base > gdt_desc. size ) return NULL ; desc_base = sel & ~ ( SEGMENT_RPL_MASK | SEGMENT_TI_MASK ) ; if ( desc_base > gdt_desc. size ) return NULL ; desc_base = sel & ~ ( SEGMENT_RPL_MASK | SEGMENT_TI_MASK ) ; if ( desc_base > gdt_desc. size ) return NULL ;,0
1053,"<S2SV_ModStart> i ) { memset <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> extend_left ) ; memset <S2SV_ModEnd> ( dst_ptr2, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr1, <S2SV_ModStart> i ) { memcpy <S2SV_ModEnd> ( dst_ptr2,",1
1054,"<S2SV_ModStart> * bp ; union sctp_addr * laddr = & t -> ipaddr ; union sctp_addr * baddr = & t -> ipaddr ; union sctp_addr * daddr = & t -> ipaddr ; union sctp_addr dst_saddr ; __u8 matchlen = 0 ; __u8 bmatchlen = 0 ; <S2SV_ModStart> ; } dst = ip6_dst_lookup_flow ( sk, fl6, NULL, false ) ; if (! asoc || saddr ) goto out ; bp = & t -> ipaddr ; fl6 -> daddr = daddr -> v6. sin6_addr ; fl6 -> fl6_dport = daddr -> v6. sin6_port ; fl6 -> flowi6_proto = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> fl6_oif = IPPROTO_SCTP ; if ( ipv6_addr_type ( & daddr -> v6. sin6_addr ) & IPV6_ADDR_LINKLOCAL ) fl6 -> fl6",0
1055,"<S2SV_ModStart> perf_event * event <S2SV_ModEnd>, struct perf_sample_data",1
1056,"<S2SV_ModStart> ++ ; buf2 = smb_fdata1 ( ndo, buf, s, maxbuf, unicodestr ) ; if ( buf2 == NULL ) return ( NULL ) ; if ( buf2 == buf ) return ( buf ) ; buf = buf2 ; } return ( buf ) ; } if (! depth && buf < maxbuf ) { size_t len = PTR_DIFF ( maxbuf, buf ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) len ) ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) len ) ) ; smb_print_data ( ndo, buf, len ) ; return ( buf ) ; } if (! depth && buf < maxbuf ) { size_t len = PTR_DIFF ( maxbuf, buf ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"", ( unsigned long ) len ) ) ; ND_PRINT ( ( ndo, ""Data: <S2SV_blank> (%lu <S2SV_blank> bytes)\\n"",",0
1057,"<S2SV_ModStart> ; if ( client -> priv -> protocol_timeout < 0 ) { g_source_remove ( client -> priv -> protocol_timeout ) ; client -> priv -> protocol_timeout = 0 ; } else { g_source_remove ( client -> priv -> protocol_timeout ) ; client -> priv -> protocol_timeout = 0 ; } g_debug ( ""GsmXSMPClient: <S2SV_blank> Initializing <S2SV_blank> client <S2SV_blank> %s"", client -> priv -> description ) ; * mask_ret = 0 ; * mask_ret |= SmsRegisterClientProcMask ; callbacks_ret -> register_client. callback = register_client_callback ; callbacks_ret -> register_client. manager_data = client ; * mask_ret |= SmsInteractRequestProcMask ; callbacks_ret -> interact_request. callback = interact_request_callback ; callbacks_ret -> interact_request. manager_data = client ; * mask_ret |= SmsInteractDoneProcMask ; callbacks_ret -> interact_done. callback = interact_done_callback ; callbacks_ret -> save_yourself_request. callback = save_yourself_request_callback ; callbacks_ret -> save_yourself_phase2",0
1058,"<S2SV_ModStart> 1 ) ; if ( ps -> nid < 0 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %u/%s:%u"", EXTRACT_32BITS ( & ps -> slot ), ipaddr_string ( ndo, & ps -> page. p_sid ), EXTRACT_32BITS ( & ps -> page. p_uid ) ) ) ; return ( - 1 ) ; } <S2SV_ModStart> 1 ) ; if ( ps -> nid < 0 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %u/%s:%u"", EXTRACT_32BITS ( & ps -> slot ), ipaddr_string ( ndo, & ps -> page. p_sid ), EXTRACT_32BITS ( & ps -> page. p_uid ) ) ) ; return ( - 1 ) ; } <S2SV_ModStart> 1 ) ; if ( ps -> nid < 0 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> %u/%s:%u"", EXTRACT_32BITS ( & ps -> slot ), ipaddr_string ( ndo, & ps -> page. p_sid ), EXTRACT_32BITS ( & ps -> page. p_uid ) ) ) ;",0
1059,"<S2SV_ModStart> } n = ksz8851ReadReg <S2SV_ModEnd> ( interface, <S2SV_ModStart>, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return NO_ERROR ; } header. controlWord = htole16 ( TX_CTRL_TXIC | ( context -> frameId ++ & TX_CTRL_TXFID ) ) ; header. byteCount = htole16 ( length ) ; ksz8851SetBit ( interface, KSZ8851_RXQCR, RXQCR_SDA ) ; ksz8851SetBit ( interface, KSZ8851_TXQCR, TXQCR_METFE ) ; n = ksz8851ReadReg ( interface, KSZ8851_TXMIR ) & TXMIR_TXMA_MASK ; if ( n >= ( ETH_MAX_FRAME_SIZE + 8 ) ) { osSetEvent ( & interface -> nicTxEvent ) ; return ERROR_FAILURE ; } netBufferRead ( context -> txBuffer, buffer, offset, length ) ; <S2SV_ModEnd>",0
1060,"<S2SV_ModStart> NULL ) ; rb_ary_push ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( ) ) ) ) ), rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( ) ) ) ) ) ), rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary_pop ( rb_ary",0
1061,"<S2SV_ModStart> assoc_array_ptr_is_leaf ( ptr ) && ops -> compare_object ( assoc_array_ptr_to_leaf ( ptr ), index_key ) ) { pr_devel ( ""replace <S2SV_blank> in <S2SV_blank> free <S2SV_blank> slot <S2SV_blank> %d\\n"", free_slot ) ; edit -> dead_leaf = node -> slots [ free_slot ] ; <S2SV_ModStart> assoc_array_ptr_is_leaf ( ptr ) && ops -> compare_object ( assoc_array_ptr_to_leaf ( ptr ), index_key ) ) { pr_devel ( ""replace <S2SV_blank> in <S2SV_blank> free <S2SV_blank> slot <S2SV_blank> %d\\n"", free_slot ) ; edit -> dead_leaf = node -> slots [ free_slot ] ; edit -> adjust_count_on = node ; pr_devel ( ""<--%s() <S2SV_blank> = <S2SV_blank> ok <S2SV_blank> [replace]\\n"", __func__ ) ; return true ; }",0
1062,"<S2SV_ModStart> ; settings. host = ""127.0.0.1"" ; settings. host_port = ""127.0.0.1"" ; settings. host_port = ""127.0.0.1"" ; settings. ipv4_port = ""127.0.0.1"" ; settings. ipv6_port = ""127.0.0.1"" ; settings. ipv6_port = ""127.0.0.1"" ; settings. ipv4_port = ""127.0.0.1"" ; settings. ipv6_port = ""127.0.0.1"" ; settings. ipv6_port = ""127.0.0.1"" ; settings. ipv4_port = ""127.0.0.1"" ; settings. ipv6_port = ""127.0.0.1"" ; settings. ipv6_port = ""127.0.0.1"" ; settings. ipv6_port = ""127.0.0.1"" ; settings. ipv6_port = ""127.0.0.1"" ; settings. ipv6_port = ""127.0.0.1"" ; settings.",0
1063,<S2SV_ModStart> ; # endif <S2SV_ModEnd> if ( domains_to_finalize,0
1064,"<S2SV_ModStart> x_7 ; WORD32 x_8, x_9, x_a, x_b, x_c, x_d, x_e, x_f ; WORD32 x_9, x_a, x_b, x_c, x_d, x_e, x_f ; WORD32 x_8, x_9, x_a, x_b, x_c, x_d, x_e, x_f ; WORD32 x_0 ; x_1 = * x0 ++ ; x_2 = * x0 ++ ; x_3 = * x0 ++ ; x_4 = * x0 ++ ; x_5 = * x0 ++ ; x_6 = * x0 ++ ; x_7 = * x0 ++ ; x_8 = * x0 ++ ; x_9 = * x0 ++ ; x_a = * x0 ++ ; x_b = * x0 ++ ; x_c = * x0 ++ ; x_d = * x0 ++ ; x_3 = * x0 ++ ; x_4 = * x0 ++ ; x_5 = * x0 ++ ; x",0
1065,<S2SV_ModStart> clips_ptr ) { if ( num_clips < 0 || num_clips > DRM_MODE_FB_DIRTY_MAX_CLIPS ) { ret = - EINVAL ; goto out_err1 ; },1
1066,"<S2SV_ModStart> ) ) { if ( pmd_trans_huge_or_clear_bad ( pmd ) ) continue ; ret = unuse_pte_range ( vma, pmd, addr, next, entry, page ) ; if ( ret < 0 ) return ret ; ret = unuse_pte_range ( vma, pmd, addr, next, entry, page ) ; if ( ret < 0 ) return ret ; ret = unuse_pte_range ( vma, pmd, addr, next, entry, page ) ; if ( ret < 0 ) return ret ; ret = unuse_pte_range ( vma, pmd, addr, next, entry, page ) ; if ( ret < 0 ) return ret ; ret = unuse_pte_range ( vma, pmd, addr, next, entry, page ) ; if ( ret < 0 ) return ret ; ret = unuse_pte_range ( vma, pmd, addr, next, entry, page ) ; if ( ret < 0 ) return ret ; ret = unuse_pte_range ( vma, pmd, addr, next, entry, page )",0
1067,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1068,"<S2SV_ModStart> case 'a' : r_anal_esil_to_reil_setup ( esil, core -> anal, romem, stats ) ; r_anal_esil_set_pc ( esil, core -> offset ) ; break ; case 'e' : r_anal_esil_to_reil_setup ( esil, core -> anal, romem, stats ) ; r_anal_esil_set_pc ( esil, core -> offset ) ; break ; case 'b' : r_anal_esil_to_reil_setup ( esil, core -> anal, romem, stats ) ; r_anal_esil_set_pc ( esil, core -> offset ) ; break ; case 'e' : r_anal_esil_to_reil_setup ( esil, core -> anal, romem, stats ) ; r_anal_esil_to_reil_setup ( esil, core -> anal, romem, stats ) ; r_anal_esil_to_reil_setup ( esil, core -> anal",0
1069,"<S2SV_ModStart> int width, height, target_width, target_height ; if ( argc < 4 ) { printf ( ""Incorrect <S2SV_blank> parameters:\\n"" ) ; usage ( argv [ 0 ] ) ; return 1 ; } fin = argv [ 1 ] ; fout = argv [ 4 ] ; if (! parse_dim ( argv [ 2 ], & width, & height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 2 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } if (! parse_dim ( argv [ 3 ], & target_width, & target_height ) ) { printf ( ""Incorrect <S2SV_blank> parameters: <S2SV_blank> %s\\n"", argv [ 3 ] ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpin = fopen ( fin, ""rb"" ) ; if ( fpin == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank> %s <S2SV_blank> to <S2SV_blank> read\\n"", fin ) ; usage ( argv [ 0 ] ) ; return 1 ; } fpout = fopen ( fout, ""wb"" ) ; if ( fpout == NULL ) { printf ( ""Can\'t <S2SV_blank> open <S2SV_blank> file <S2SV_blank>",0
1070,<S2SV_ModStart> + DSPQ_DATA_BUFF ; u16 wTmp ; <S2SV_ModStart> JQS_wTail )!= readw ( chip -> DSPQ + JQS_wHead ) ) { wTmp = readw ( chip -> DSPQ + JQS_wHead ) ; if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip -> DSPQ + JQS_wHead ) + 1 ; if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip -> DSPQ + JQS_wHead ) + 1 ; if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip -> DSPQ + JQS_wHead ) + 1 ; if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw ( chip -> DSPQ + JQS_wHead ) + 1 ; if ( wTmp > readw ( chip -> DSPQ + JQS_wSize ) ) wTmp = readw,0
1071,<S2SV_ModStart> OPCODE_DESC * opcode_desc = NULL <S2SV_ModStart> == R_ANAL_OP_TYPE_UNK ) { op -> family = R_ANAL_OP_FAMILY_UNKNOWN ; op -> type = R_ANAL_OP_TYPE_UNK ; } <S2SV_ModStart> == R_ANAL_OP_TYPE_UNK ) { op -> family = R_ANAL_OP_FAMILY_UNKNOWN ; op -> type = R_ANAL_OP_TYPE_UNK ; } if ( op -> family == R_ANAL_OP_FAMILY_UNKNOWN ) { op -> family = R_ANAL_OP_FAMILY_UNKNOWN ; op -> type = R_ANAL_OP_TYPE_UNK ; op -> addr = addr ; } <S2SV_ModStart> == R_ANAL_OP_TYPE_UNK ) { op -> family = R_ANAL_OP_FAMILY_UNKNOWN ; op -> type = R_ANAL_OP_TYPE_UNK ; } if ( op -> type == R_ANAL_OP_TYPE_UNK ) { op -> type = R_ANAL_OP_TYPE_UNK ; op -> type = R_ANAL_OP_TYPE_UNK,0
1072,<S2SV_ModStart> status ; ACPI_FUNCTION_TRACE ( ns_terminate ) ; # ifdef ACPI_EXEC_APP { union acpi_operand_object * prev ; union acpi_operand_object * next ; next = acpi_gbl_module_code_list ; while ( next ) { prev = next ; next = next -> method. mutex ; prev -> method. mutex = NULL ; acpi_ut_remove_reference ( prev ) ; } } # endif acpi_ns_delete_namespace_subtree ( acpi_gbl_root_node ) ; status = acpi_ut_acquire_mutex ( ACPI_MTX_NAMESPACE ) ; if ( ACPI_FAILURE ( status ) ) { return_VOID ; } acpi_ns_delete_namespace_subtree ( acpi_gbl_root_node ) ; status = acpi_ut_acquire_mutex ( ACPI_MTX_NAMESPACE ) ; if ( status ) { return_VOID ; } acpi_ns_delete_namespace_subtree ( acpi_gbl_root_node ) ; status = acpi_ut_acquire_mutex ( ACPI_MT,0
1073,<S2SV_ModStart> # ifdef GPAC_MEMORY_TRACKING if ( mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerBackTrace || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTrackerNone || mem_track == GF_MemTracker,0
1074,"<S2SV_ModStart> int i, result ; _Py_IDENTIFIER ( _attributes ) ; PyObject * s, * l ; Py_DECREF ( l ) ; for ( i = 0 ; i < num_fields ; i ++ ) { s = PyUnicode_FromString ( attrs [ i ] ) ; if (! s ) { Py_DECREF ( l ) ; return 0 ; } PyTuple_SET_ITEM ( l, i, s ) ; } result = _PyObject_SetAttrId ( ( PyObject * ) type, & PyId__attributes, l ) >= 0 ; Py_DECREF ( l ) ; return result <S2SV_ModEnd> ; } <S2SV_null>",0
1075,"<S2SV_ModStart> vpx_codec_alg_priv * priv <S2SV_ModEnd> ; struct vpx_codec_enc_cfg_t <S2SV_ModStart> vpx_codec_alg_priv * priv <S2SV_ModEnd> ; struct vpx_codec_enc_cfg_t <S2SV_ModStart> enc ) { priv = calloc ( 1, sizeof ( * priv ) ) ; if (! priv ) { return VPX_CODEC_MEM_ERROR ; } ctx -> priv = & priv -> base ; ctx -> priv -> sz = sizeof ( * ctx -> priv ) ; ctx -> priv -> iface = ctx -> iface ; ctx -> priv -> init_flags = ctx -> init_flags ; } cfg = & priv -> cfg ; for ( i = 0 ; extracfg_map [ i ]. usage && extracfg_map [ i ]. usage ; i ++ ) ; priv -> cfg = extracfg_map [ i ]. cfg ; priv -> vp8_cfg = extracfg_map [ i ]. cfg ; priv -> cx_data_sz = priv -> cfg. g_w * priv -> cfg. g_h * 3 / 2 * 2 ; if ( priv -> cx_data_sz < 32768 ) priv -> cx_data_",0
1076,"<S2SV_ModStart> error ) { xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED ) ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED ) ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED ) ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ERROR ( EFSCORRUPTED ) ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ILOG_CORE, dp, XFS_ERROR ( EFSCORRUPTED ) ) ; xfs_trans_log_inode ( args -> trans, XFS_ILOG_ERROR ( EFSCORRUPTED ) ) ; xfs_trans_log_inode ( args -> trans, dp, XFS_ERROR ( EFSCORRUPTED ) )",0
1077,<S2SV_ModStart> ) ) < 0 ) return ret ; pixel -> freq [ c ] = cnt_c + step ; pixel -> lookup [ x ] = cnt_x + step ; pixel -> lookup [ x ] = cnt_x + step ; if ( totfr > BOT ) { totfr = 0 ; for ( i = 0 ; i < 16 ; i ++ ) { unsigned nc = ( pixel -> freq [ i ] >> 1 ) + 1 ; pixel -> freq [ i ] = nc ; pixel -> lookup [ i ] = nc ; totfr += nc ; } for ( i = 0 ; i < 16 ; i ++ ) { unsigned sum = 0 ; unsigned i16_17 = i << 4 ; for ( j = 0 ; j < 16 ; j ++ ) sum += pixel -> freq [ i16_17 + j ] ; pixel -> lookup [ i ] = sum ; totfr += nc ; } for ( i = 0 ; i < 16 ; i ++ ) { unsigned sum = 0 ; unsigned i16_17 = i << 4 ; for ( j = 0 ; j < 16 ; j ++ ) { unsigned sum = 0 ; unsigned i16_17 = i << 4 ; for ( j = 0 ; j < 16,0
1078,"<S2SV_ModStart> err ; err = nla_parse_nested ( attrs, TIPC_NLA_SOCK_MAX, attrs [ TIPC_NLA_SOCK ], tipc_nl_sock_policy ) ; if ( err ) return err ; err = nla_parse_nested ( sock, TIPC_NLA_SOCK_MAX, attrs [ TIPC_NLA_SOCK ], tipc_nl_sock_policy ) ; if ( err ) return err ; if (! sock [ TIPC_NLA_SOCK_REF ] ) return - EINVAL ; tsk_portid = nla_get_u32 ( <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
1079,<S2SV_ModStart> 0 ) { memset <S2SV_ModEnd> ( ( void <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( ctx -> <S2SV_ModStart> ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count = 1 ; } return 0 ; } if ( ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count = 1 ; } if (! ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count = 1 ; } if ( ctx -> fragments. enabled &&! ( data == NULL && data_sz == 0 ) ) { ctx -> fragments. ptrs [ 0 ] = data ; ctx -> fragments. sizes [ 0 ] = data_sz ; ctx -> fragments. count,0
1080,"<S2SV_ModStart> = v ; if (! capable ( CAP_SYS_RAWIO ) ||! capable ( CAP_SYS_RAWIO ) ) { pr_err ( ""Not <S2SV_blank> supported <S2SV_blank> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
1081,"<S2SV_ModStart> bLength ; if ( total_len < length ) break ; total_len -= length ; if ( cap -> bDescriptorType!= USB_DT_DEVICE_CAPABILITY ) { dev_warn ( ddev, ""unable <S2SV_blank> to <S2SV_blank> get <S2SV_blank> BOS <S2SV_blank> descriptor <S2SV_blank> set\\n"" ) ; ret = - ENOMSG ; goto err ; } length = cap -> bLength ; if ( total_len < length ) break ; total_len -= length ; if ( cap -> bDescriptorType!= USB_DT_DEVICE_CAPABILITY ) { dev_warn ( ddev, ""unable <S2SV_blank> to <S2SV_blank> get <S2SV_blank> BOS <S2SV_blank> descriptor <S2SV_blank> set\\n"" ) ; ret = - ENOMSG ; goto err ; } dev -> bos -> desc = ( struct usb_bos_descriptor * ) buffer ; ret = usb_get_descriptor ( dev, USB_DT_BOS, 0, buffer, total_len ) ; if ( ret < total_len ) { dev_err ( ddev, ""unable <S2SV_blank> to <S2SV_blank> get <S2SV_blank> BOS <S2SV_blank> descriptor <S2SV_blank> set\\n"" ) ; ret = - ENOMSG ; goto err ; } dev -> bos -> desc = ( struct usb_bos_descriptor *",0
1082,"<S2SV_ModStart> task_struct * task = current ; file_sb_list_del ( file ) ; if ( likely ( task -> flags & PF_KTHREAD ) ) { init_task_work ( & file -> f_u. fu_rcuhead, ____fput ) ; if (! task_work_add ( task, & file -> f_u. fu_rcuhead, true ) ) return ; init_task_work ( & file -> f_u. fu_rcuhead, true ) ; if (! task_work_add ( task, & file -> f_u. fu_rcuhead, true ) ) return ; init_task_work ( & file -> f_u. fu_rcuhead, ____fput ) ; if (! task_work_add ( task, & file -> f_u. fu_rcuhead, true ) ) return ; init_task_work ( & file -> f_u. fu_rcuhead, true ) ; if (! task_work_add ( task, & file -> f_u. fu_rcuhead, true ) ) return ;",0
1083,"<S2SV_ModStart> EIO ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if",0
1084,"<S2SV_ModStart> data ) { uint16_t status ; <S2SV_ModStart> ( interface, ENC28J60_MIREGADR <S2SV_ModEnd>, address & <S2SV_ModStart> ( interface, ENC28J60_MIWRL <S2SV_ModEnd>, LSB ( <S2SV_ModStart> ( interface, ENC28J60_MIWRH <S2SV_ModEnd>, MSB ( <S2SV_ModStart> ( interface, ENC28J60_MISTAT ) & ENC28J60_MISTAT_BUSY <S2SV_ModEnd> )!= 0",0
1085,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> int bad_format_imginfo ( <S2SV_ModStart> fmt ) { char * ptr ; int n = 0 ; ptr = fmt ; while ( * ptr!= '\\0' ) if ( * ptr == '%' ) { if ( * ptr =='s' || * ptr == 'S' ) { n = 1 ; ptr ++ ; } else { if ( * ptr =='<S2SV_blank>') ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; if ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; if ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; while ( * ptr >= '0' && * ptr <= '9' ) ptr ++ ; if ( * ptr,0
1086,"<S2SV_ModStart> sk_forward_alloc ) ; rcu_dereference_protected ( inet -> inet_opt, sock_owned_by_user ( sk ) ) ;",0
1087,<S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { <S2SV_ModStart>! saw_digit ) { goto <S2SV_ModEnd> invalid ; } <S2SV_ModStart>! saw_digit ) { goto <S2SV_ModEnd> invalid ; } <S2SV_ModStart>! saw_digit ) { goto <S2SV_ModEnd> invalid ; } <S2SV_ModStart>! saw_digit ) { goto <S2SV_ModEnd> invalid ; } <S2SV_ModStart>! saw_digit ) { goto <S2SV_ModEnd> invalid ; } <S2SV_ModStart>! saw_digit ) { if (! saw_digit ) { goto invalid ; } break ; } c -= '0' ; if ( result > ( INT_MAX / 10 ) ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX ) { too_large = 1 ; } else { result *= 10 ; if ( result == INT_MAX ) { too_large = 1 ; } } bp ++ ; len -- ; * endp = bp ; if ( neg ) { if ( too_large || result!= 1 ) { result =,0
1088,"<S2SV_ModStart> ; if ( args -> op_flags & XFS_DA_OP_OKNOENT ) { xfs_trans_log_buf ( args -> dp -> i_mount, bp, XFS_ERROR ( EIO ) ) ; return XFS_ERROR ( EIO ) ; } if ( args -> op_flags & XFS_DA_OP_OKNOENT ) { xfs_trans_log_buf ( args -> dp -> i_mount, bp, XFS_ERROR ( EIO ) ) ; return XFS_ERROR ( EOPNOTSUPP ) ; } xfs_trans_log_buf ( args -> dp -> i_mount, bp, XFS_ERROR ( EIO ) ) ; return XFS_ERROR ( EIO ) ; } if ( args -> op_flags & XFS_DA_OP_OKNOENT ) { xfs_trans_log_buf ( args -> dp -> i_mount, bp, XFS_ERROR ( EIO ) ) ; return XFS_ERROR ( EOPNOTSUPP ) ; } xfs_trans_log_buf ( args -> dp -> i_mount, bp, XFS_ERROR ( EIO",0
1089,"<S2SV_ModStart> ""DefragReverseSimpleTest"", DefragReverseSimpleTest ) ; UtRegisterTest ( ""DefragSturgesNovakBsdTest"", DefragSturgesNovakBsdTest ) ; UtRegisterTest ( ""DefragSturgesNovakLinuxTest"", DefragSturgesNovakLinuxTest ) ; UtRegisterTest ( ""DefragSturgesNovakWindowsTest"", DefragSturgesNovakWindowsTest ) ; UtRegisterTest ( ""DefragIPv4NoDataTest"", DefragIPv4NoDataTest ) ; UtRegisterTest ( ""DefragIPv4TooLargeTest"", DefragIPv4TooLargeTest ) ; UtRegisterTest ( ""IPV6DefragInOrderSimpleTest"", IPV6DefragInOrderSimpleTest ) ; UtRegisterTest ( ""IPV6DefragReverseSimpleTest"", IPV6DefragReverseSimpleTest ) ; UtRegisterTest ( ""IPV6DefragInOrderSimpleTest"", IPV6DefragInOrderSimpleTest ) ; UtRegisterTest ( ""IPV6DefragReverseSimpleTest"", IPV6DefragReverseSimpleTest",0
1090,<S2SV_ModStart> ; if ( object_length > sizeof ( new_object. data ) - add_v1_record ) { new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { return SC_ERROR_OUT_OF_MEMORY ; } if ( object_length > sizeof ( new_object. data ) - add_v1_record ) { new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. length > sizeof ( new_object. data ) - add_v1_record ) { new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. data == NULL ) { return SC_ERROR_OUT_OF_MEMORY ; } if ( object_length > sizeof ( new_object. data ) - add_v1_record ) { new_object. data = malloc ( object_length + add_v1_record ) ; if ( new_object. length > sizeof ( new_object. data ) - add_v1_record ) { new_object,0
1091,"<S2SV_ModStart> ; if ( ( int ) shdr -> sh_size > ( int ) sz ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( ( int ) shdr -> sh_size > ( int ) sz ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( ( int ) shdr -> sh_size > ( int ) sz ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( ( int ) shdr -> sh_size > ( int ) sz ) ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; } if ( ( int ) shdr -> sh_size > ( int ) sz ) ) { bprintf ( ""Warning: <S2SV_blank> Cannot <S2SV_blank> allocate <S2SV_blank> memory <S2SV_blank> (Check <S2SV_blank> Elf_(Verdef))\\n"" ) ; return false ; }",0
1092,"<S2SV_ModStart> { separator = osStrchr <S2SV_ModEnd> ( token, <S2SV_ModStart>, '=' ) ; if ( separator == NULL ) { * separator = '\\0' ; name = strTrimWhitespace ( token ) ; value = strTrimWhitespace ( separator + 1 ) ; n = osStrlen ( value ) ; if ( n > 0 && <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
1093,<S2SV_ModStart> u8 label_len ; if ( j + label_len > length ) return - 1 ; GET16 ( x ) ; if ( name_end < 0 ) name_end = j ; j = ( ( int ) label_len & 0xc0 ) ; if ( name_end < 0 ) name_end = j ; j = ( ( int ) label_len & 0x3f ) << 8 ; if ( name_end < 0 ) name_end = j ; j = ( ( int ) label_len & 0x3f ) << 8 ; if ( name_end < 0 ) name_end = j ; j = ( ( int ) label_len & 0x3f ) << 8 ; if ( name_end < 0 ) name_end = j ; j = ( ( int ) label_len & 0x3f ) << 8 ; if ( name_end < 0 ) name_end = j ; j = ( ( int ) label_len & 0x3f ) << 8 ; if ( ptr_count > length ) return - 1 ; if ( cp!= name_out ) { if ( cp + 1 >= end ) return - 1 ; * cp ++ = '.',0
1094,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpAcc ( TIFF <S2SV_ModStart> cc ) ; assert ( ( cc % ( bps * stride ) ) == 0 ) ; if (! tmp ) return - 1 ; <S2SV_ModStart>! tmp ) return - 1 ; if ( count > stride ) { REPEAT4 ( stride, cp [ stride ] = ( unsigned char ) ( ( cp [ stride ] + cp [ 0 ] ) & 0xff ) ; cp ++ ) count -= stride ; } if ( count > stride ) { REPEAT4 ( stride, cp [ stride ] = ( unsigned char ) ( ( cp [ stride ] + cp [ 0 ] ) & 0xff ) ; cp ++ ) count -= stride ; } _TIFFmemcpy ( tmp, cp0, cc ) ; cp = ( uint8 * ) cp0 ; for ( count = 0 ; count < wc ; count ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; uint32 byte ; uint32 byte ; uint32 byte ; uint32 byte ; uint32 byte ;",0
1095,"<S2SV_ModStart> ) ) { <S2SV_ModEnd> if ( likely <S2SV_ModStart> vma -> vm_ops -> fault ) ) return do_fault ( mm, vma, address, pte, pmd, flags, entry ) ; } return do_anonymous_page ( mm, vma, address, pte, pmd, flags ) ; } if ( pte_protnone ( entry ) ) return do_numa_page ( mm, vma, address, pte, pmd, ptl, entry ) ; if ( flags & FAULT_FLAG_WRITE ) { if (! pte_write ( entry ) ) return do_wp_page ( mm, vma, address, pte, pmd, ptl, entry ) ; entry = pte_mkyoung ( entry ) ; if ( ptep_set_access_flags ( vma, address, pte, entry, flags & FAULT_FLAG_WRITE ) ) { update_mmu_cache ( vma, address, pte ) ; } else { if ( flags & FAULT_FLAG_WRITE ) flush_tlb_fix_spurious_fault ( vma, vma, address, pte",0
1096,"<S2SV_ModStart> s ) { size_t len = <S2SV_ModEnd> strlen ( s <S2SV_ModStart> + 1 ) ; memcpy ( r, s, len <S2SV_ModEnd> ) ; return",0
1097,<S2SV_ModStart> ; if ( key_is_positive <S2SV_ModEnd> ( key ),1
1098,"<S2SV_ModStart> ; next_line = strchr ( pos, '\\n' ) ; if (! next_line ) { ret = - EINVAL ; goto out ; } next_line = strchr ( pos, '\\n' ) ; if (! next_line ) { ret = - EINVAL ; goto out ; } next_line = strchr ( pos, '\\n' ) ; if (! next_line ) { ret = - EINVAL ; goto out ; } next_line = strchr ( pos, '\\n' ) ; next_line = strchr ( pos, '\\n' ) ; if (! next_line ) { ret = - EINVAL ; goto out ; } next_line = strchr ( pos, '\\n' ) ; if (! next_line ) { ret = - EINVAL ; goto out ; } next_line = strchr ( pos, '\\n' ) ; if (! next_line ) { ret = - EINVAL ; goto out ; } next_line = strchr ( pos, '\\n' ) ; next_line = strchr ( pos, '\\n' ) ; if (! next_line ) { ret = - E",0
1099,"<S2SV_ModStart> -> length ]. attr_values [ i ] = r_uleb128 ( buf, buf_end - buf, & abbr_code ) ; if (! cu -> length ) { eprintf ( ""Warning: <S2SV_blank> malformed <S2SV_blank> dwarf <S2SV_blank> attribute <S2SV_blank> length <S2SV_blank> doesn\'t <S2SV_blank> match <S2SV_blank> length\\n"" ) ; break ; } <S2SV_ModStart> -> length ]. attr_values [ i ] = r_uleb128 ( buf, buf_end - buf, & abbr_code ) ; if (! cu -> length ) { eprintf ( ""Warning: <S2SV_blank> malformed <S2SV_blank> dwarf <S2SV_blank> attribute <S2SV_blank> length <S2SV_blank> doesn\'t <S2SV_blank> match <S2SV_blank> length\\n"" ) ; break ; } <S2SV_ModStart> -> length ]. attr_values [ i ] = r_uleb128 ( buf, buf_end - buf, & abbr_code ) ; if (! abbr_code ) { eprintf ( ""Warning: <S2SV_blank> malformed <S2SV_blank> dwarf <S2SV_blank> attribute <S2SV_blank> capacity <S2SV_blank> doesn\'t <S2SV_blank> match <S2SV_blank> length\\n"" ) ; break ; } <S2SV_ModStart> -> length ]. attr_values [ i ] = r_uleb128 ( buf, buf_end - buf, & abbr_code ) ;",0
1100,"<S2SV_ModStart> b_eos_pulled ) { p_sys -> b_eos_signalled = 1 ; schro_encoder_end_of_stream ( p_sys -> p_schro ) ; } else { p_sys -> p_format -> interlaced = p_pic -> b_progressive ; p_sys -> p_format -> top_field_first = p_pic -> b_top_field_first ; if ( p_sys -> b_auto_field_coding ) vlc_fourcc_to_char ( p_enc -> fmt_in. i_codec, chroma_in ) ; chroma_in [ 4 ] = '\\0' ; vlc_fourcc_to_char ( p_enc -> fmt_in. i_codec, chroma_out ) ; chroma_in [ 4 ] = '\\0' ; vlc_fourcc_to_char ( p_enc -> fmt_in. i_codec, chroma_in ) ; chroma_in [ 4 ] = '\\0' ; vlc_fourcc_to_char ( p_enc -> fmt_in. i",0
1101,"<S2SV_ModStart> bfname. len ) { if (! mp_path_exists ( mf -> name ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> name ) ; } else if (! mp_path_exists ( mf -> name ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> name ) ; } else if (! mp_path_exists ( mf -> name ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> name ) ; } else if (! mp_path_exists ( mf -> name ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> name ) ; } else if (! mp_path_exists ( mf -> name ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found: <S2SV_blank> \'%s\'\\n"", mf -> name ) ; } else if (! mp_path_exists ( mf -> name ) ) { mp_err ( log, ""file <S2SV_blank> not <S2SV_blank> found",0
1102,"<S2SV_ModStart> ) ) ; if ( length < len ) { ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> - <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", length ) ) ; return ; } if ( length < len ) { ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> - <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", length ) ) ; return ; } if ( length < len ) { ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> - <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", length ) ) ; return ; } if ( length < len ) { ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> - <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", length ) ) ; return ; } if ( length < len ) { ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> - <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", length ) ) ; return ; } if ( length < len ) { ND_PRINT ( ( ndo, ""truncated-ip6 <S2SV_blank> - <S2SV_blank> %u <S2SV_blank> bytes <S2SV_blank> missing!"", length ) ) ; return ; } if ( length < len ) { ND_",0
1103,<S2SV_ModStart> 4 ) ; if ( idx + 4 > len ) return NULL ; <S2SV_ModStart> ) ; for ( j = 0 ; j < 4 ; j ++ ) a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len >> 1 ) ; for ( j = 0 ; j < 4 ; j ++ ) a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len >> 1 ) ; for ( j = 0 ; j < 4 ; j ++ ) a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len >> 1 ) ; a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len >> 1 ) ; for ( j = 0 ; j < 4 ; j ++ ) a -> names [ i ]. data,0
1104,"<S2SV_ModStart> EIO ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if ( efe -> icbTag. strategyType == cpu_to_le16 ( 4096 ) ) { udf_err ( inode -> i_sb, ""(ino <S2SV_blank> %ld) <S2SV_blank> failed <S2SV_blank> ident=%d\\n"", inode -> i_ino, ident ) ; goto out ; } if",0
1105,<S2SV_ModStart> mmap_sem ) ; if (! mmget_still_valid ( mm ) ) goto out_unlock ;,1
1106,<S2SV_ModStart> ; act = vpx_variance16x16 <S2SV_ModEnd> ( x ->,0
1107,"<S2SV_ModStart> ( ) ; if ( * ( strend ( t1_buf_array ) - 1 )!='<S2SV_blank>') { strcpy ( t1_line_array, t1_buf_array ) ; * ( strend ( t1_buf_array ) - 1 ) ='<S2SV_blank>'; t1_getline ( ) ; strcpy ( t1_line_array, t1_buf_array ) ; t1_line_ptr = eol ( t1_line_array ) ; } else if ( * ( strend ( t1_buf_array ) - 1 )!='<S2SV_blank>') { strcpy ( t1_line_array, t1_buf_array ) ; * ( strend ( t1_buf_array ) - 1 ) ='<S2SV_blank>'; t1_getline ( ) ; strcpy ( t1_line_array, t1_buf_array ) ; t1_line_ptr = eol ( t1_line_array ) ; }",0
1108,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; <S2SV_ModEnd> YV12_BUFFER_CONFIG * fb <S2SV_ModStart> * fb ; <S2SV_ModEnd> yuvconfig2image ( &",0
1109,"<S2SV_ModStart> ctxt ) ; if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) ops -> get_msr ( ctxt, MSR_EFER, & efer ) ; if ( efer & EFER_LMA ) ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; else ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_SS ) ; ops -> get_msr ( ctxt, MSR_STAR, & msr_data ) ; msr_data >>= 32 ; cs_sel = ( u16 ) ( msr_data & 0xfffc ) ; ss_sel = ( u16 ) ( msr_data + 8 ) ; if ( efer & EFER_LMA ) ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG_CS ) ; ops -> set_segment ( ctxt, cs_sel, & cs, 0, VCPU_SREG",0
1110,"<S2SV_ModStart>!= JPEG_MARKER_EOI ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> first <S2SV_blank> marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> SOI.\\n"", marker ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart>!= JPEG_MARKER_SOS ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> first <S2SV_blank> marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> SOS.\\n"", marker ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart>!= JPEG_MARKER_EOI ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> first <S2SV_blank> marker <S2SV_blank> is <S2SV_blank> %02x, <S2SV_blank> should <S2SV_blank> be <S2SV_blank> SOI.\\n"", marker ) ; return AVERROR_INVALIDDATA ; } <S2SV_ModStart>!= JPEG_MARKER_EOI ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> JPEG <S2SV_blank> image: <S2SV_blank> first <S2SV_blank> marker <S2SV_blank> is <S2SV_blank> %02x",0
1111,"<S2SV_ModStart> ; if ( TYPE ( CHILD ( n, 0 ) ) == testlist ) e = ast_for_testlist ( c, CHILD ( n, 0 ) ) ; if (! e ) return NULL ; e = Expr ( e, LINENO ( n ), n -> n_col_offset, n -> n_end_lineno, n -> n_end_col_offset, c -> c_arena ) ; if (! set_context ( c, e, Store, ch ) ) return NULL ; ch = CHILD ( n, 2 ) ; if (! set_context ( c, e, Store, ch ) ) return NULL ; switch ( expr1 -> kind ) { case Name_kind : case Attribute_kind : case Subscript_kind : break ; default : ast_error ( c, ch, ""illegal <S2SV_blank> expression <S2SV_blank> for <S2SV_blank> augmented <S2SV_blank> assignment"" ) ; return NULL ; } ch = CHILD ( n, 0 ) ; expr1 = ast_for_testlist ( c, ch ) ; if (! expr1 ) return NULL ; switch ( expr1 -> kind ) { case Name_kind : case Attribute_kind : case Subscript_kind",0
1112,"<S2SV_ModStart> int vp8_denoiser_filter_c ( <S2SV_ModEnd> unsigned char * <S2SV_ModStart> * mc_running_avg_y = mc_running_avg -> y_buffer + y_offset, int mc_avg_y_stride = mc_running_avg -> y_stride ; unsigned char * running_avg_y = running_avg -> y_buffer + y_offset ; int avg_y_stride = running_avg -> y_stride ; int r, c, i ; int sum_diff = 0 ; int adj_val [ 3 ] = { 3, 4, 6 } ; if ( motion_magnitude <= MOTION_MAGNITUDE_THRESHOLD ) { for ( r = 0 ; r < 16 ; r ++ ) { for ( c = 0 ; c < 16 ; ++ c ) { int diff = mc_running_avg_y [ c ] - sig [ c ] ; absdiff = abs ( diff ) ; if ( absdiff >= 4 && absdiff <= 7 ) { running_avg_y [ c ] = mc_running_avg_y [ c ] ; sum_diff += diff ; } else { running_avg_y [ c ] = mc_running_",0
1113,"<S2SV_ModStart> { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100 <S2SV_blank> continue"" ) ; if ( ( sockPtr -> flags & NS_CONN_ENTITYTOOLARGE )!= 0u ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; if ( ( sockPtr -> flags & NS_CONN_ENTITYTOOLARGE )!= 0u ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; if ( ( sockPtr -> flags & NS_CONN_ENTITYTOOLARGE )!= 0u ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; } else { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; if ( ( sockPtr -> flags & NS_CONN_ENTITYTOOLARGE )!= 0u ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue"" ) ; if ( ( sockPtr -> flags & NS_CONN_ENTITYTOOLARGE )!= 0u ) { Ns_Log ( Ns_LogRequestDebug, ""honoring <S2SV_blank> 100-continue",0
1114,"<S2SV_ModStart> = 0 ; # if XTENSA_HAVE_COPROCESSORS coprocessor_flush_all ( ti ) ; coprocessor_release_all ( ti ) ; ret |= __copy_from_user ( & ti -> xtregs_cp, & xtregs -> cp0, sizeof ( xtregs_coprocessor_t ) ) ; # else ret |= __copy_from_user ( & ti -> xtregs_user, & xtregs -> user, sizeof ( xtregs -> user ) ) ; ret |= __copy_from_user ( & ti -> xtregs_opt, & xtregs -> opt, sizeof ( xtregs -> opt ) ) ; ret |= __copy_from_user ( & ti -> xtregs_umask, & xtregs -> umask, sizeof ( xtregs -> umask ) ) ; # else ret |= __copy_from_user ( & ti -> xtregs_umask, & xtregs -> umask, sizeof ( xtregs -> umask ) ) ; ret |= __copy_from_user ( & ti -> xtregs_umask, & xtregs -> um",0
1115,<S2SV_ModStart> size ) ; if ( queueItem -> ancillary. srcIpAddr!= NULL ) { message -> srcIpAddr = queueItem -> ancillary. srcIpAddr ; message -> srcPort = queueItem -> ancillary. srcPort ; message -> destIpAddr = queueItem -> ancillary. destIpAddr ; message -> ttl = queueItem -> ancillary. ttl ; message -> switchPort = queueItem -> ancillary. switchPort ; } else { message -> srcIpAddr = queueItem -> srcIpAddr ; message -> srcPort = queueItem -> srcPort ; message -> destIpAddr = queueItem -> destIpAddr ; message -> ttl = queueItem -> ancillary. ttl ; },0
1116,"<S2SV_ModStart> xop ) { struct se_subsystem_dev * se_dev ; <S2SV_ModStart> == XCOL_SOURCE_RECV_OP ) se_dev = xop -> src_dev -> se_subsystem_data <S2SV_ModEnd> ; else remote_dev <S2SV_ModStart> -> dst_dev ; else se_dev = xop -> dst_dev -> se_subsystem_data <S2SV_ModEnd> ; pr_debug ( <S2SV_ModStart> ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" "" <S2SV_blank> remote_dev: <S2SV_blank> %p <S2SV_blank> remote_dev->dev_group: <S2SV_blank> %p\\n"", remote_dev, & se_dev -> dev_group. cg_item ) ; if (! se_dev ) { pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for"" "" <S2SV_blank> remote_dev: <S2SV_blank> %p <S2SV_blank> remote_dev->dev_group: <S2SV_blank> %p\\n"", remote_dev, & se_dev -> dev_group. cg_item ) ; target_undepend_item ( & se_dev -> dev_group. cg_item ) ; } <S2SV_ModEnd> pr_debug ( ""Calling <S2SV_blank> configfs_undepend_item <S2SV_blank> for""",0
1117,"<S2SV_ModStart> - 1 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_MULTICAST_HOPS."" ) ; err = - errno ; goto close_sock ; } val = 255 ; ret = setsockopt ( sock, IPPROTO_IPV6, IPV6_RECVPKTINFO, & val, sizeof ( val ) ) ; if ( ret == - 1 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_RECVPKTINFO."" ) ; err = - errno ; goto close_sock ; } val = 255 ; ret = setsockopt ( sock, IPPROTO_IPV6, IPV6_RECVPKTINFO, & val, sizeof ( val ) ) ; if ( ret == - 1 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> setsockopt <S2SV_blank> IPV6_RECVPKTINFO."" ) ; err = - errno ; goto close_sock ; } val = 255 ; ret = setsockopt ( sock, IPPROTO_IPV6, IPV6_MULTICAST_HOPS, & val, sizeof ( val ) ) ; if ( ret == - 1 ) { err ( ndp, ""Failed <S2SV_blank> to <S2SV_blank> sets",0
1118,"<S2SV_ModStart> int error ; struct mb2_cache * ext2_mb_cache = EXT2_SB ( sb ) -> s_mb_cache <S2SV_ModStart> get_bh ( new_bh ) ; ext2_mb_cache_insert ( ext2_mb_cache, header, new_bh ) ; new_bh = NULL ; } else if ( header ) { new_bh = old_bh ; get_bh ( new_bh ) ; ext2_mb_cache_insert ( ext2_mb_cache, header, new_bh ) ; } else if ( header == HDR ( new_bh ) ) { new_bh = old_bh ; get_bh ( new_bh ) ; ext2_mb_cache_insert ( ext2_mb_cache, header, new_bh ) ; } else if ( header == HDR ( new_bh ) ) { new_bh = old_bh ; get_bh ( new_bh ) ; get_bh ( new_bh ) ; ext2_mb_cache_insert ( ext2_mb_cache, header, new_",0
1119,<S2SV_ModStart> crypto_report_comp rcomp ; strncpy <S2SV_ModEnd> ( rcomp.,0
1120,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> map ) { vpx_active_map_t * const map = va_arg ( args, vpx_active_map_t * ) ; if (! vp9_set_active_map ( ctx -> cpi, map -> active_map, map -> rows, map -> cols ) ) return VPX_CODEC_INVALID_PARAM ; else return VPX_CODEC_INVALID_PARAM ; <S2SV_ModEnd> } <S2SV_null>",0
1121,"<S2SV_ModStart> { rc = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( rc ) return rc ; <S2SV_ModEnd> inode -> i_ctime <S2SV_ModStart> inode -> i_ctime <S2SV_ModEnd> = CURRENT_TIME ;",0
1122,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> rows, image -> columns ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows, image -> columns ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> rows, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent (",0
1123,"<S2SV_ModStart>. header. size, task_event -> event_id. header. flags & PERF_EVENT_FLAG_TASK ) ; if ( ret ) goto out ; task_event -> event_id. pid = perf_event_pid ( event, task ) ; task_event -> event_id. ppid = perf_event_pid ( event, task ) ; task_event -> event_id. tid = perf_event_tid ( event, task ) ; task_event -> event_id. ptid = perf_event_tid ( event, current ) ; task_event -> event_id. pid = perf_event_pid ( event, task ) ; task_event -> event_id. ppid = perf_event_pid ( event, task ) ; task_event -> event_id. tid = perf_event_tid ( event, task ) ; task_event -> event_id. ptid = perf_event_tid ( event, current ) ; task_event -> event_id. pid = perf_event_pid ( event, task ) ; task_event -> event_id. ppid = perf_event_pid ( event, task ) ; task_event ->",0
1124,"<S2SV_ModStart> size_t maxlen = 3 <S2SV_ModEnd> * len ; <S2SV_ModStart> * len ; if (! strlen ( str ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> URL <S2SV_blank> string: <S2SV_blank> \'%s\'"", str ) ; efree ( state ) ; return NULL ; } <S2SV_ModStart> * len ; if (! strlen ( str ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> URL <S2SV_blank> string: <S2SV_blank> \'%s\'"", str ) ; efree ( state ) ; return NULL ; } if (! strlen ( str ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> URL <S2SV_blank> string: <S2SV_blank> \'%s\'"", str ) ; efree ( state ) ; return NULL ; } if (! strlen ( str ) ) { php_error_docref ( NULL TSRMLS_CC, E_WARNING, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> URL <S2SV_blank> string: <S2SV_blank> \'%s\'"", str ) ; efree ( state ) ; return NULL ;",0
1125,"<S2SV_ModStart> SUCCESS ) { <S2SV_ModEnd> convert_to_long ( * <S2SV_ModStart> convert_to_long ( * var ) ; points [ i ]. y = Z_LVAL_PP ( var ) ; } if ( zend_hash_index_find ( Z_ARRVAL_P ( POINTS ), ( i * 2 ), ( void * * ) & var ) == SUCCESS ) { convert_to_long ( * var ) ; points [ i ]. x = Z_LVAL_PP ( var ) ; } if ( zend_hash_index_find ( Z_ARRVAL_P ( POINTS ), ( i * 2 ), ( void * * ) & var ) == SUCCESS ) { convert_to_long ( * var ) ; points [ i ]. x = Z_LVAL_PP ( var ) ; } if ( zend_hash_index_find ( Z_ARRVAL_P ( POINTS ), ( i * 2 ), ( void * * ) & var ) == SUCCESS ) { convert_to_long ( * var ) ; points [ i ]. y = Z_LVAL_PP ( var ) ; } if ( zend_hash_",0
1126,<S2SV_ModStart> ; sig_none = <S2SV_ModEnd> timr -> it_sigev_notify <S2SV_ModStart> timr -> it_sigev_notify <S2SV_ModEnd> == SIGEV_NONE ;,1
1127,<S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart> AcquireQuantumMemory ( ( size_t ) <S2SV_ModStart>,0
1128,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * ) ; if ( ctx -> frame_parallel_decode ) return vpx_copy_reference_dec ( ctx -> pbi, ( VP9_REFFRAME ) frame -> frame_type, & sd ) ; else if ( data ) { vpx_ref_frame_t * frame = ( vpx_ref_frame_t * ) data ; YV12_BUFFER_CONFIG sd ; image2yuvconfig ( & frame -> img, & sd ) ; return vp9_copy_reference_dec ( ctx -> pbi, ( VP9_REFFRAME ) frame -> frame_type, & sd ) ; } else { return VPX_CODEC_INVALID_PARAM ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1129,"<S2SV_ModStart>. path ; if (! path ) return CURLE_OUT_OF_MEMORY ; <S2SV_ModStart> = curl_easy_unescape ( data <S2SV_ModEnd>, path, <S2SV_ModStart>, NULL ) ; if (! pop3c -> mailbox ) return CURLE_OUT_OF_MEMORY ; return CURLE_OK ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1130,"<S2SV_ModStart> 1 ) ; if ( len < 0 ) { printk ( KERN_ERR ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> invalid <S2SV_blank> facilities <S2SV_blank> length\\n"" ) ; return 0 ; } <S2SV_ModStart> 1 ) ; if ( len < 0 ) { printk ( KERN_ERR ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> invalid <S2SV_blank> facilities <S2SV_blank> length\\n"" ) ; return 0 ; } <S2SV_ModStart> 1 ) ; if ( len < 0 ) { printk ( KERN_ERR ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> invalid <S2SV_blank> facilities <S2SV_blank> length\\n"" ) ; return 0 ; } <S2SV_ModStart> 1 ) ; if ( len < 0 ) { printk ( KERN_ERR ""ROSE: <S2SV_blank> rose_parse_facilities <S2SV_blank> - <S2SV_blank> invalid <S2SV_blank> facilities <S2SV_blank> length\\n"" ) ; return 0 ; }",0
1131,"<S2SV_ModStart> ; sh -> pps_id = get_ue_golomb_long ( gb ) ; if ( sh -> pps_id >= HEVC_MAX_PPS_COUNT ||! s -> ps. pps_list [ sh -> pps_id ] -> data ) { av_log ( s -> avctx, AV_LOG_ERROR, ""PPS <S2SV_blank> id <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range: <S2SV_blank> %d\\n"", sh -> pps_id ) ; return AVERROR_INVALIDDATA ; } if ( sh -> pps_id >= HEVC_MAX_PPS_COUNT ||! s -> ps. pps_list [ sh -> pps_id ] -> data ) { av_log ( s -> avctx, AV_LOG_ERROR, ""PPS <S2SV_blank> id <S2SV_blank> out <S2SV_blank> of <S2SV_blank> range: <S2SV_blank> %d\\n"", sh -> pps_id ) ; return AVERROR_INVALIDDATA ; } if ( s -> ps. sps!= ( HEVCSPS * ) s -> ps. sps_list [ sh -> pps_id ] -> data ) { av_log ( s -> avctx, AV_LOG_ERROR",0
1132,<S2SV_ModStart> i2_cur_mb_addr ; ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> u2_total_mbs_coded += u1_num_mbs ; <S2SV_ModStart> i2_pic_wdin_mbs ; ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> u2_total_mbs_coded += u1_num_mbs ; <S2SV_ModStart> i2_pic_wdin_mbs ; ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> u2_total_mbs_coded += u1_num_mbs ; ps_dec -> u2_total_mbs_coded += u1_num_mbs ;,0
1133,"<S2SV_ModStart> u4_y_offset ; UWORD32 u4_x_offset = 0 ; UWORD32 u4_y_dst_offset = 0 ; UWORD8 * pu1_out_p ; UWORD8 * pu1_pred ; WORD32 u4_pred_strd ; WORD32 u4_pred_strd ; IMPEG2D_TRACE_MB_START ( ps_dec -> u2_mb_x, ps_dec -> u2_mb_y ) ; if ( ps_dec -> u2_pic_structure == BOTTOM_FIELD ) { ps_dec -> u2_picture_width <<= 1 ; if ( ps_dec -> u2_picture_structure == BOTTOM_FIELD ) { ps_dec -> u2_picture_width <<= 1 ; if ( ps_dec -> u2_picture_structure == BOTTOM_FIELD ) { ps_dec -> u2_picture_width <<= 1 ; if ( ps_dec -> u2_picture_structure == BOTTOM_FIELD ) { ps_dec -> u2_picture_width <<= 1 ; if ( ps_dec -> u2_picture_structure == BOTTOM_FIELD ) { ps_dec ->",0
1134,"<S2SV_ModStart> VP9_LAST_FLAG ) { <S2SV_ModEnd> const YV12_BUFFER_CONFIG * <S2SV_ModStart> * const cfg = cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ]. buf ; if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg, sd ) ; } else { vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> reference <S2SV_blank> frame"" ) ; } return cm -> error. error_code ; } if ( ref_frame_flag == VP9_LAST_FLAG ) { const YV12_BUFFER_CONFIG * const cfg = cm -> frame_bufs [ cm -> ref_frame_map [ 0 ] ]. buf ; if (! equal_dimensions ( cfg, sd ) ) vpx_internal_error ( & cm -> error, VPX_CODEC_ERROR, ""Incorrect <S2SV_blank> buffer <S2SV_blank> dimensions"" ) ; else vp8_yv12_copy_frame ( cfg,",0
1135,<S2SV_ModStart> n ) { jas_matind_t i ; jas_matind_t <S2SV_ModEnd> j ; jas_seqent_t <S2SV_ModStart> * rowstart ; jas_matind_t <S2SV_ModEnd> rowstep ; jas_seqent_t,1
1136,"<S2SV_ModStart> -> mbmi ; const int num_4x4_w = num_4x4_blocks_wide_lookup [ plane_bsize ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ plane_bsize ] ; const int step = 1 << ( tx_size << 1 ) ; const int max_blocks_wide = num_4x4_w ; const int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 || xd -> mb_to_bottom_edge < 0 ) { int r, c ; int max_blocks_wide = num_4x4_w ; int max_blocks_high = num_4x4_h ; if ( xd -> mb_to_right_edge < 0 ) max_blocks_wide += ( xd -> mb_to_right_edge >> ( 5 + pd -> subsampling_x ) ) ; if ( xd -> mb_to_bottom_edge < 0 ) max_blocks_high += ( xd -> mb_to_bottom_edge >> ( 5 + pd -> subsampling_y ) )",0
1137,<S2SV_ModStart> mmap_legacy_base = mmap_legacy_base <S2SV_ModEnd> ( random_factor ),0
1138,<S2SV_ModStart> ++ ) { if <S2SV_ModEnd> (! ( <S2SV_ModStart> CONFIG_FAST_UNALIGNED ) dst [ 0 ] = src [ 0 ] ; dst [ 1 ] = src [ 1 ] ; dst [ 2 ] = src [ 2 ] ; dst [ 3 ] = src [ 3 ] ; dst [ 4 ] = src [ 4 ] ; dst [ 5 ] = src [ 5 ] ; dst [ 6 ] = src [ 6 ] ; dst [ 7 ] = src [ 7 ] ; # else ( ( uint32_t * ) dst ) [ 0 ] = ( ( uint32_t * ) src ) [ 0 ] ; ( ( uint32_t * ) dst ) [ 1 ] = ( ( uint32_t * ) src ) [ 1 ] ; ( ( uint32_t * ) dst ) [ 2 ] = ( ( uint32_t * ) src ) [ 2 ] ; ( ( uint32_t * ) src ) [ 3 ] ; # else ( ( uint32_t * ) dst ) [ 0 ] = ( ( uint32_t * ) src ) [ 0 ] ; ( ( uint32_t * ) dst ) [ 1 ] = ( ( uint32_t * ) src ) [,0
1139,"<S2SV_ModStart> ; case 'c' : return getnum ( L, fmt, sizeof ( int ) ) ; case 'i' : case 'I' : { int sz = getnum ( L, fmt, sizeof ( int ) ) ; if ( sz > MAXINTSIZE ) luaL_error ( L, ""integral <S2SV_blank> size <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d"", sz, MAXINTSIZE ) ; return sz ; } <S2SV_ModStart> : { int sz = getnum ( L, fmt, sizeof ( int ) ) ; if ( sz > MAXINTSIZE ) luaL_error ( L, ""integral <S2SV_blank> size <S2SV_blank> %d <S2SV_blank> is <S2SV_blank> larger <S2SV_blank> than <S2SV_blank> limit <S2SV_blank> of <S2SV_blank> %d"", sz, MAXINTSIZE ) ; return sz ; }",0
1140,"<S2SV_ModStart> { rowstoread = ( row + img -> row_offset ) % rowsperstrip ; nrow = ( row + img -> row_offset ) % rowsperstrip ; offset_row = ( row + img -> row_offset ) % rowsperstrip ; if ( buf == NULL ) { TIFFErrorLog ( tif, 0x534e4554, ""gtStripSeparate"" ) ; return ( 0 ) ; } <S2SV_ModStart> img -> row_offset ; if ( buf == NULL ) { TIFFErrorLog ( tif, 0x534e4554, ""gtStripSeparate"" ) ; return ( 0 ) ; } if ( buf == NULL ) { TIFFErrorLog ( tif, 0x534e4554, ""gtStripSeparate"" ) ; return ( 0 ) ; } buf = _TIFFReadEncodedStripAndAllocBuffer ( tif, bufsize, ""gtStripSeparate"" ) ; if ( buf == NULL ) { TIFFErrorLog ( tif, 0x534e4554, ""gtStripSeparate"" ) ; return ( 0 ) ; }",0
1141,"<S2SV_ModStart> } } } if ( TYPE ( CHILD ( n, 0 ) ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 1 ) ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 2 ) ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 1 ) ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 2 ) ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 2 ) ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 1 ) ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 2 ) ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 1 ) ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 2 ) ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n, 2 ) == TYPE_COMMENT ) i += 2 ; else if ( TYPE ( CHILD ( n,",0
1142,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header,0
1143,"<S2SV_ModStart> - EINVAL ; if ( upid == - 1 ) type = PIDTYPE_MAX ; else if ( upid < 0 ) { type = PIDTYPE_PID ; pid = get_task_pid ( current, pid -> pid_pgid ) ; } else if ( upid == 0 ) { type = PIDTYPE_PID ; pid = get_task_pid ( current, pid -> pid_pgid ) ; } else if ( upid == 0 ) { type = PIDTYPE_PID ; pid = get_task_pid ( current, pid -> pid_pgid ) ; } else if ( upid < 0 ) { type = PIDTYPE_PID ; pid = get_task_pid ( current, pid -> pid_pgid ) ; } else if ( upid == 0 ) { type = PIDTYPE_PID ; pid = get_task_pid ( current, pid -> pid_pgid ) ; } else if ( upid == 0 ) { type = PIDTYPE_PID ; pid = get_task_pid ( current, pid -> pid_pgid ) ; }",0
1144,"<S2SV_ModStart> ( ) ; if ( msg -> msg_namelen ) { err = - EINVAL ; goto out_err ; } <S2SV_ModStart> ) ; } if ( msg -> msg_namelen ) { err = - EOPNOTSUPP ; if ( msg -> msg_namelen ) { err = sk -> sk_state == TCP_ESTABLISHED? - EISCONN : - EOPNOTSUPP ; goto out_err ; } else { size = ( sk -> sk_sndbuf >> 1 ) - 64 ; if ( size > ( sk -> sk_sndbuf >> 1 ) - 64 ) ) size = ( sk -> sk_sndbuf >> 1 ) - 64 ; if ( size > ( sk -> sk_sndbuf >> 1 ) - 64 ) ) size = ( sk -> sk_sndbuf >> 1 ) - 64 ; if ( size > SKB_MAX_ALLOC ) size = SKB_MAX_ALLOC ; skb = sock_alloc_send_skb ( sk, size, msg -> msg_flags & MSG_DONTWAIT, & err ) ; if ( skb ) { kfree_skb ( skb ) ;",0
1145,<S2SV_ModStart> ( num & ( 1U << ( number - 1 ) ) ) return num - ( 1U << ( number - 1 ) ) ; else if ( num & ( 1U << ( number - 1 ) ) ) return num - ( 1U << ( number - 1 ) ) ; else return num ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1146,"<S2SV_ModStart> ; const int rows = vpx_img_plane_rows ( img, plane ) ; const int cols = vpx_img_plane_cols ( img, plane ) ; const int rows = vpx_img_plane_rows ( img, plane ) ; const int rows = vpx_img_plane_rows ( img, plane ) ; const int rows = vpx_img_plane_rows ( img, plane ) ; const int height = vpx_img_plane_height ( img, plane ) ; for ( y = 0 ; y < rows ; ++ y ) { if ( fread ( buf, 1, rows <S2SV_ModEnd>, file )",0
1147,"<S2SV_ModStart> ; uint16_t attr_len <S2SV_ModEnd> ; uint16_t orig_attr_len <S2SV_ModStart> ; if ( avp -> length < sizeof ( struct l2tp_avp_t ) + 2 ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } if ( avp -> length < sizeof ( struct l2tp_avp_t ) ) { log_warn ( ""l2tp: <S2SV_blank> incorrect <S2SV_blank> hidden <S2SV_blank> avp <S2SV_blank> received <S2SV_blank> (type <S2SV_blank> %hu):"" "" <S2SV_blank> length <S2SV_blank> too <S2SV_blank> small <S2SV_blank> (%hu <S2SV_blank> bytes)\\n"", ntohs ( avp -> type ), avp -> length ) ; return - 1 ; } attr_len = avp -> length - sizeof ( struct l2tp_avp_t ) ; if ( attr_len > MD5_DIGEST_LENGTH ) { memcpy ( avp -> val, p1, MD5_DIGEST",0
1148,"<S2SV_ModStart> -> private ; if ( cmd == DM_IOCTL_GET_BUFS ) return __blkdev_driver_ioctl ( lc -> dev -> bdev, lc -> mode, arg ) ; if ( cmd == DM_IOCTL_GET_RES ) return __blkdev_driver_ioctl ( lc -> res -> bdev, lc -> res -> mode, arg ) ; if ( cmd == DM_IOCTL_GET_RES ) return __blkdev_driver_ioctl ( lc -> res -> bdev, lc -> res -> mode, arg ) ; return __blkdev_driver_ioctl ( lc -> res -> bdev, lc -> mode, arg ) ; if ( cmd == DM_IOCTL_GET_RES ) return __blkdev_driver_ioctl ( lc -> res -> bdev, lc -> res -> mode, arg ) ; if ( cmd == DM_IOCTL_GET_RES ) return __blkdev_driver_ioctl ( lc -> res -> bdev, lc -> res -> mode, arg ) ; return __blkdev_driver_ioctl ( lc -> res -> bdev, lc -> res",0
1149,"<S2SV_ModStart> = CHACHA_U8TOU32 ( ( unsigned char * ) ptr ) ; actx -> key. counter [ 0 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 2 ) ; actx -> key. counter [ 0 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 4 ) ; actx -> key. counter [ 1 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 3 ) ; actx -> key. counter [ 2 ] = CHACHA_U8TOU32 ( ( unsigned char * ) ptr + 4 ) ; actx -> tag_len = 0 ; actx -> cipher_data = OPENSSL_memdup ( actx, sizeof ( * actx ) + Poly1305_ctx_size ( ) ) ; if ( dst -> cipher_data == NULL ) { EVPerr ( EVP_F_CHACHA20_POLY1305_CTRL, EVP_R_COPY_ERROR ) ; return 0 ; }",0
1150,"<S2SV_ModStart> alg ) { if (! ( type ^ CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_NEED_FALLBACK ) ) { <S2SV_ModStart> ) ) { if (! ( type ^ CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_NEED_FALLBACK ) ) { <S2SV_ModStart> ) ) { if (! ( type ^ CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_NEED_FALLBACK ) ) { if ( ( type ^ CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_NEED_FALLBACK ) ) { if (! ( type ^ CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_NEED_FALLBACK ) ) { if (! ( type ^ CRYPTO_ALG_NEED_FALLBACK ) & mask & CRYPTO_ALG_NEED_FALLBACK ) ) { request_module ( ""%",0
1151,"<S2SV_ModStart>. header. size <S2SV_ModEnd>, 0,",0
1152,"<S2SV_ModStart> fp ) ; unlink ( RUN_LIB_FILE ) ; if ( access ( full_path, R_OK ) ) { if ( access ( full_path, R_OK ) ) { if ( access ( full_path, R_OK ) ) { if ( access ( full_path, R_OK ) ) { if ( access ( full_path, R_OK ) ) { printf ( ""cannot <S2SV_blank> find <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> private-lib, <S2SV_blank> skipping...\\n"", full_path ) ; return ; } } if ( access ( full_path, R_OK ) ) { if ( access ( full_path, R_OK ) ) { if ( access ( full_path, R_OK ) ) { if ( access ( full_path, R_OK ) ) { if ( access ( full_path, R_OK ) ) { printf ( ""cannot <S2SV_blank> find <S2SV_blank> %s <S2SV_blank> for <S2SV_blank> private-lib, <S2SV_blank> skipping...\\n"", full_path ) ; return ; } }",0
1153,"<S2SV_ModStart> sk ; BT_DBG ( ""sock <S2SV_blank> %p, <S2SV_blank> sk <S2SV_blank> %p"", sock <S2SV_ModEnd>, sk )",0
1154,"<S2SV_ModStart> ) { memcpy ( pass_salt, cpkt. data, cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PASSSALT ) { memcpy ( pass_salt, cpkt. data, cpkt. length ) ; send_auth ( username, password ) ; } else if ( cpkt. cptype == MT_CPTYPE_PLAINDATA ) { fwrite ( ( const void * ) cpkt. data, 1, cpkt. length, stdout ) ; } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 0 ; setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch ) ; } else if ( cpkt. cptype == MT_CPTYPE_END_AUTH ) { terminal_mode = 1 ; if ( is_a_tty ) { raw_term ( ) ; setvbuf ( stdin, ( char * ) NULL, _IONBF, 0 ) ; signal ( SIGWINCH, sig_winch ) ;",0
1155,<S2SV_ModStart> NTLMSSP_NEGOTIATE_UNICODE | NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC ; sec_blob -> NegotiateFlags = NTLMSSP_NEGOTIATE_56 | NTLMSSP_REQUEST_TARGET | NTLMSSP_TARGET_INFO | NTLMSSP_NEGOTIATE_128 | NTLMSSP_NEGOTIATE_128 | NTLMSSP_NEGOTIATE_NTLM | NTLMSSP_NEGOTIATE_EXTENDED_SEC ; if (! ses -> server -> session_estab || ses -> ntlmssp -> sesskey_per_smbsess ) flags |= NTLMSSP_NEGOTIATE_KEY_XCH ; else flags |= NTLMSSP_NEGOTIATE_NTLM ; if (! ses -> server -> session_estab || ses -> ntlmssp -> sesskey_per_smbsess ) flags |= NTLMSSP_NEGOTI,0
1156,"<S2SV_ModStart> MUTT_ABORT ) { mutt_socket_close ( adata -> conn <S2SV_ModEnd> ) ; goto <S2SV_ModStart> err_close_conn ; } mutt_socket_empty ( adata -> conn ) ; if ( rc == IMAP_EXEC_FATAL ) goto bail ; if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could <S2SV_blank> not <S2SV_blank> negotiate <S2SV_blank> TLS <S2SV_blank> connection"" ) ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc!= IMAP_EXEC_ERROR ) { mutt_error ( _ ( ""Could <S2SV_blank> not <S2SV_blank> negotiate <S2SV_blank> TLS <S2SV_blank> connection"" ) ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc!= IMAP_EXEC_FATAL ) goto bail ; if ( mutt_ssl_starttls ( adata -> conn ) ) { mutt_error ( _ ( ""Could <S2SV_blank> not <S2SV_blank> negotiate <S2SV_blank> TLS <S2SV_blank> connection"" ) ) ; mutt_socket_empty ( adata -> conn ) ; if ( rc!= IMAP_EXEC_FATAL ) goto bail ; if ( rc!= IMAP_EXEC_ERROR ) { mutt_socket_empty ( adata",0
1157,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
1158,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> horDiff8 ( TIFF <S2SV_ModStart> cp0 ; assert ( <S2SV_ModEnd> ( cc % <S2SV_ModStart> stride ) == 0 <S2SV_ModEnd> ) ; if,0
1159,"<S2SV_ModStart> -> head <= 0 || g -> track > UDP -> tracks >> STRETCH ( g ) || ( g -> stretch & ~ ( FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK ) )!= 0 || ( g -> stretch & ~ ( FD_STRETCH | FD_SECTBASEMASK ) )!= 0 || ( g -> stretch & ~ ( FD_STRETCH | FD_SWAPSIDES | FD_SECTBASEMASK ) )!= 0 ) return - EINVAL ; if ( cmd == FDDEFPRM ) { if ( poll_drive ( true, FD_RAW_NEED_DISK ) == - EINTR ) return - EINTR ; } current_type [ drive ] = & user_params [ drive ] ; if ( buffer_drive == drive ) SUPBOUND ( buffer_max, user_params [ drive ]. sect ) ; floppy_sizes [ drive ] = user_params [ drive ]. size ; if ( cmd == FDDEFPRM ) { if ( poll_drive ( true, FD_RAW_NEED_DISK ) == -",0
1160,"<S2SV_ModStart> ; if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; } if ( strncmp ( line, ""{\\""class\\"":\\""DEVICES\\"",\\""devices\\"":[]}"", 32 ) == 0 ) { close ( gpsd_sock ) ; return ; }",0
1161,"<S2SV_ModStart> & rlen ) ; if (! check_atype_tag ( a, & t ) ) return ASN1_BAD_ID ; if (! check_atype_tag ( a, & t ) ) return ASN1_BAD_ID ; if (! check_atype_tag ( a, & t ) ) return ASN1_BAD_ID ; if (! check_atype_tag ( a, & t ) ) return ASN1_BAD_ID ; if ( check_atype_tag ( a, & t ) ) return ASN1_BAD_ID ; if ( check_atype_tag ( a, & t ) ) return ASN1_BAD_ID ; if (! check_atype_tag ( a, & t ) ) return ASN1_BAD_ID ; if (! check_atype_tag ( a, & t ) ) return ASN1_BAD_ID ; if (! check_atype_tag ( a, & t ) ) return ASN1_BAD_ID ; if ( check_atype_tag ( a, & t ) ) return ASN1_BAD_ID ; if ( check_atype_tag ( a, & t ) ) return ASN1_BAD_ID",0
1162,"<S2SV_ModStart> * slavename ; if ( curconn -> username == NULL ) { abort_connection ( curconn, pkthdr, _ ( ""Login <S2SV_blank> failed, <S2SV_blank> incorrect <S2SV_blank> username <S2SV_blank> or <S2SV_blank> password\\r\\n"" ) ) ; abort_connection ( curconn, pkthdr, _ ( ""Login <S2SV_blank> failed, <S2SV_blank> incorrect <S2SV_blank> username <S2SV_blank> or <S2SV_blank> password\\r\\n"" ) ) ; abort_connection ( curconn, pkthdr, _ ( ""Login <S2SV_blank> failed, <S2SV_blank> incorrect <S2SV_blank> username <S2SV_blank> or <S2SV_blank> password\\r\\n"" ) ) ; return ; } <S2SV_ModStart> = 0 ; init_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr, pkthdr -> seskey, curconn -> outcounter, curconn -> seskey, curconn -> outcounter ) ; curconn -> outcounter += add_control_packet ( & pdata, MT_PTYPE_DATA, pkthdr -> dstaddr, pkthdr -> srcaddr, pkthdr -> seskey, curconn -> outcounter ) ; curconn -> outcounter += add_control_packet ( & pdata, MT_PTYPE_DATA,",0
1163,"<S2SV_ModStart> 1 ; } if ( r < 0 || r >= MAXPATHLEN ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return - 1 ; } r = snprintf ( path, MAXPATHLEN, ""%s/%s"", rootfs -> mount, aux + offset ) ; if ( r < 0 || r >= MAXPATHLEN ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return ret ; } r = snprintf ( path, MAXPATHLEN, ""%s/%s"", rootfs -> mount, aux + offset ) ; if ( r < 0 || r >= MAXPATHLEN ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'"", mntent -> mnt_dir ) ; return ret ; } r = snprintf ( path, MAXPATHLEN, ""%s/%s"", rootfs -> mount, aux + offset ) ; if ( r < 0 || r >= MAXPATHLEN ) { WARN ( ""pathnme <S2SV_blank> too <S2SV_blank> long <S2SV_blank> for <S2SV_blank> \'%s\'",0
1164,"<S2SV_ModStart> ; if ( <S2SV_ModEnd> PyUnicode_CompareWithASCIIString ( name <S2SV_ModStart> * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } } if ( full_checks ) { const char * const * p ; for ( p = FORBIDDEN ; * p ; p ++ ) { if ( PyUnicode_CompareWithASCIIString ( name, * p ) == 0 ) { ast_error ( c, n, ""assignment <S2SV_blank> to <S2SV_blank> keyword"" ) ; return 1 ; } <S2SV_ModEnd> return 0 ;",0
1165,"<S2SV_ModStart> = get_user_pages_fast ( uaddr, local_nr_pages, ( iter -> type & WRITE )!= WRITE, & pages [ cur_page ] ) ; if ( ret < 0 ) { ret = - EFAULT ; goto out_unmap ; } ret = get_user_pages_fast ( uaddr, local_nr_pages, ( iter -> type & WRITE )!= WRITE, & pages [ cur_page ] ) ; if ( ret < 0 ) { ret = - EFAULT ; goto out_unmap ; } ret = bio_map_bios <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
1166,<S2SV_ModStart> depth ; assert ( <S2SV_ModEnd> numcolors <= RAS_CMAP_MAXSIZ,0
1167,"<S2SV_ModStart> -> pp ; <S2SV_ModEnd> int len ; <S2SV_ModStart> ( conn -> data, path, 0, & len ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; <S2SV_ModStart> } smtpc -> domain = curl_easy_unescape ( conn -> data, path, 0, & len ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; state ( conn, SMTP_SERVERGREET, len ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; state ( conn, SMTP_SERVERGREET, len ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; state ( conn, SMTP_SERVERGREET, len ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; state ( conn, SMTP_SERVERGREET, len ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; state ( conn, SMTP_SERVERGREET, len ) ; if (! smtpc -> domain ) return CURLE_OUT_OF_MEMORY ; state",0
1168,"<S2SV_ModStart> off } ; if ( str [ i ] ) { if ( j >= sizeof ( buf ) - 1 ) { return - 1 ; } <S2SV_ModStart> j ++ ) { if ( j >= sizeof ( buf ) - 1 && str [ i ] == '#' ) { i -- ; continue ; } buf [ i ] = tolower ( ( const ut8 ) str [ j ] ) ; } buf [ i ] = 0 ; arm_opcode_parse ( & aop, buf ) ; aop. off = off ; for ( j = 0 ; j < sizeof ( buf ) - 1 ; j ++ ) { if ( str [ j ] == '#' ) { i -- ; continue ; } buf [ i ] = tolower ( ( const ut8 ) str [ j ] ) ; } buf [ i ] = 0 ; arm_opcode_parse ( & aop, buf ) ; aop. off = off ; if ( thumb < 0 || thumb > 1 ) { return - 1 ; }",0
1169,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> buf [ 2,1
1170,"<S2SV_ModStart> ) + RDS_CONG_MAP_BYTES ; rm -> m_inc. i_hdr. h_len = sizeof ( struct rds_header ) + be32_to_cpu ( rm -> m_inc. i_hdr. h_len ) ; <S2SV_ModStart> + RDS_CONG_MAP_BYTES ; rm -> m_inc. i_hdr. h_len = be32_to_cpu ( rm -> m_inc. i_hdr. h_len ) ; if ( rm -> m_inc. i_hdr. h_flags & RDS_FLAG_LAST_FRAG ) i = ceil ( be32_to_cpu ( rm -> m_inc. i_hdr. h_len ), RDS_FRAG_SIZE ) ; else i = ceil ( be32_to_cpu ( rm -> m_inc. i_hdr. h_len ), RDS_FRAG_SIZE ) ; if ( work_alloc == 0 ) { set_bit ( RDS_LL_SEND_FULL, & conn -> c_flags ) ; rds_ib_stats_inc ( s_ib_tx_ring_full ) ; ret = - ENOMEM ; goto out ;",0
1171,"<S2SV_ModStart> 0 ) ; if (! r ) { dev_err ( & pdev -> dev, ""failed <S2SV_blank> to <S2SV_blank> remap <S2SV_blank> register\\n"" ) ; return - ENOMEM ; } priv -> base = devm_ioremap ( & pdev -> dev, r -> start, resource_size ( r ) ) ; if (! priv -> base ) { dev_err ( & pdev -> dev, ""failed <S2SV_blank> to <S2SV_blank> remap <S2SV_blank> register\\n"" ) ; return - ENOMEM ; } priv -> mii_bus = NULL ; ret = of_mdiobus_register ( bus, np ) ; if ( ret ) { dev_err ( & pdev -> dev, ""MDIO <S2SV_blank> bus <S2SV_blank> registration <S2SV_blank> failed\\n"" ) ; goto out_mdio_free ; } ret = of_mdiobus_register ( bus, np ) ; if ( ret ) { dev_err ( & pdev -> dev, ""MDIO <S2SV_blank> bus <S2SV_blank> registration <S2SV_blank> failed\\n"" ) ; goto out_mdio_free ; } ret = of_mdiobus_unregister ( bus, np ) ; if ( ret ) { dev_err ( & p",0
1172,<S2SV_ModStart> credssp ) ; transport -> credssp = NULL ;,1
1173,"<S2SV_ModStart> -> numlyrs && ( JAS_CAST ( jas_int, pchg -> picomp -> numcomps ) < JAS_CAST ( jas_int, pchg -> picomp -> numcomps ) ) { if ( ( JAS_CAST ( jas_int, pchg -> picomp -> numcomps ) < JAS_CAST ( jas_int, pchg -> picomp -> numcomps ) ) < JAS_CAST ( jas_int, pchg -> picomp -> numcomps ) ) < JAS_CAST ( jas_int, pchg -> picomp -> numcomps ) ) < JAS_CAST ( jas_int, pchg -> picomp -> numcomps ) ) { if ( ( JAS_CAST ( int, pchg -> picomp -> numcomps ) < JAS_CAST ( int, pchg -> picomp -> numcomps ) < JAS_CAST ( int, pchg -> picomp -> numcomps ) < JAS_CAST ( int, pchg -> picomp -> numcomps ) ) < JAS_CAST ( int, pchg -> picomp -> numcomps",0
1174,"<S2SV_ModStart>! exponly ) { if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> exports\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_SET ( mode ) ) { r_flag_space_set ( r -> flags, R_FLAGS_FS_SYMBOLS ) ; } else if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_RAD ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_NORMAL ( mode ) ) { r_cons_printf ( ""fs <S2SV_blank> symbols\\n"" ) ; } else if ( IS_MODE_SET ( mode ) ) { r_flag_space_set ( r -> flags, R_FLAGS_FS_SYMBOLS ) ; } else if (",0
1175,"<S2SV_ModStart> goto out ; status = decode_getacl_nolock ( xdr, & res -> posix_acl, & res -> fmode ) ; if ( status ) goto out ;",0
1176,"<S2SV_ModStart> sizeof iv ) ; rb_object_get ( self, rb_object_get ( self, rb_object_get ( self, rb_object_get ( self, rb_object_get ( self, rb_object_get ( self, rb_object_get ( ) ) ) ), rb_object_get ( self, rb_object_get ( ) ), rb_object_get ( self, rb_object_get ( ) ) ) ) ; rb_object_put ( self, rb_object_get ( self, rb_object_get ( self, rb_object_get ( self, rb_object_get ( self, rb_object_get ( self, rb_object_get ( self, rb_object_get ( ) ) ) ) ), rb_object_get ( self, rb_object_get ( ) ) ) ) ; rb_object_put ( self, rb_object_get ( self, rb_object_get ( self, rb_object_get ( self, rb_object_get ( self ) ) ) ) ) ; rb_object_put ( self, rb_object_get ( self, rb_object_get",0
1177,"<S2SV_ModStart> KDC_OPT_ENC_TKT_IN_SKEY ) ) { return KRB5KDC_ERR_BADOPTION ; } if (! krb5_principal_compare ( kdc_context, server -> princ, server_princ ) ) { return KRB5KDC_ERR_SERVER_NOMATCH ; } if (! isflagset ( t2enc -> flags, TKT_FLG_NO_PROXY ) ) { * status = ""EVIDENCE_TKT_NOT_FORWARDABLE"" ; return KRB5_TKT_NOT_FORWARDABLE ; } errcode = check_allowed_to_delegate_to ( kdc_context, t2enc -> client, server, proxy_princ ) ; if ( errcode ) { * status = ""EVIDENCE_TKT_NOT_FORWARDABLE"" ; return KRB5_TKT_NOT_FORWARDABLE ; } errcode = check_allowed_to_delegate_to ( kdc_context, t2enc -> client, server, proxy_princ ) ; if ( errcode ) { * status = ""EVID",0
1178,<S2SV_ModStart> & CLONE_SETTLS ) { <S2SV_ModStart> -> ARM_r3 ; },0
1179,"<S2SV_ModStart> bufsize ) { JAS_DBGLOG ( 100, ( ""jas_stream_memopen(%p, <S2SV_blank> %d)\\n"", buf, bufsize ) ) ; jas_stream_t * stream ; jas_stream_memobj_t * obj ; JAS_DBGLOG ( 100, ( ""jas_stream_memopen(%p, <S2SV_blank> %d)\\n"", buf, bufsize ) ) ; stream = jas_stream_create ( ) ; if (! ( stream = jas_stream_create ( ) ) ) { return 0 ; } stream -> openmode_ = JAS_STREAM_READ | JAS_STREAM_WRITE | JAS_STREAM_BINARY ; jas_stream_initbuf ( stream, JAS_STREAM_FULLBUF, 0, 0 ) ; stream -> ops_ = & jas_stream_memops ; if (! ( obj = jas_malloc ( sizeof ( jas_stream_memobj_t ) ) ) ) { jas_stream_destroy ( stream ) ; return 0 ; } obj -> buf_ = jas_malloc ( obj -> bufsize_ )",0
1180,"<S2SV_ModStart> -> pw ; <S2SV_ModEnd> char * pkalg <S2SV_ModStart> char * userstyle <S2SV_ModEnd>, * key_s <S2SV_ModStart> char * pkalg <S2SV_ModEnd>, * ca_s <S2SV_ModStart> NULL ; u_char <S2SV_ModEnd> * pkblob, <S2SV_ModStart>, have_sig ; size_t blen, slen ; int r, pktype ; int authenticated = 0 ; if ( authctxt -> valid ) { debug2 ( ""%s: <S2SV_blank> disabled <S2SV_blank> because <S2SV_blank> of <S2SV_blank> invalid <S2SV_blank> user"", __func__ ) ; return 0 ; } if ( ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_cstring ( ssh, & pkblob, & blen ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get_u8 ( ssh, & have_sig ) )!= 0 || ( r = sshpkt_get",0
1181,"<S2SV_ModStart> ; uint32_t bcount ; if (! DoGetFileSize ( infile ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } <S2SV_ModStart> ; if (! DoReadFile ( infile, & chunk_header, sizeof ( Wave64ChunkHeader ), & bcount ) || bcount!= sizeof ( Wave64ChunkHeader ) || memcmp ( chunk_header. ckID, riff_guid, sizeof ( riff_guid ) ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_SOFT_ERROR ; } else if (! DoReadFile ( infile, & chunk_header, sizeof ( Wave64ChunkHeader ), & bcount ) || bcount!= sizeof ( Wave64ChunkHeader ) || memcmp ( chunk_header. ckID, riff_guid, sizeof ( riff_guid ) ) ) { error_line ( ""%s <S2SV_blank> is <S2SV_blank> not <S2SV_blank> a <S2SV_blank> valid <S2SV_blank>.W64 <S2SV_blank> file!"", infilename ) ; return WAVPACK_",0
1182,"<S2SV_ModStart> mech ) ) { ret = gsasl_server_start ( ctx -> gsasl_ctx, mech, & sd ) ; if ( ret!= GSASL_OK ) { _sx_debug ( ZONE, ""gsasl_server_start <S2SV_blank> failed, <S2SV_blank> no <S2SV_blank> sasl <S2SV_blank> for <S2SV_blank> this <S2SV_blank> conn; <S2SV_blank> (%d): <S2SV_blank> %s"", ret, gsasl_strerror ( ret ) ) ; _sx_nad_write ( s, _sx_sasl_failure ( s, _sasl_err_TEMPORARY_FAILURE, gsasl_strerror ( ret ) ) ) ; _sx_nad_write ( s, _sx_sasl_failure ( s, _sasl_err_TEMPORARY_FAILURE, gsasl_strerror ( ret ) ) ) ; return ; } ret = gsasl_server_start ( ctx -> gsasl_ctx, mech, & sd ) ; if ( ret!= GSASL_OK ) { _sx_debug ( ZONE, ""gsasl_server_start <S2SV_blank> failed, <S2SV_blank> no <S2SV_blank> sasl <S2SV_blank> for <S2SV_blank> this <S2SV_blank> conn",0
1183,"<S2SV_ModStart> tn_buf ) ; return - EACCES ; } if (! tnum_is_const ( regs [ regno ]. var_off ) ||! tnum_is_const ( regs [ regno ]. var_off. value ) ) { verbose ( env, ""invalid <S2SV_blank> variable <S2SV_blank> stack <S2SV_blank> read <S2SV_blank> R%d <S2SV_blank> var_off=%s\\n"", regno, regs [ regno ]. var_off ) ; return - EACCES ; } if (! tnum_is_const ( regs [ regno ]. var_off. value ) ||! tnum_is_const ( regs [ regno ]. var_off. value ) ||! tnum_is_const ( regs [ regno ]. var_off. value ) ) { verbose ( env, ""invalid <S2SV_blank> variable <S2SV_blank> stack <S2SV_blank> read <S2SV_blank> R%d <S2SV_blank> var_off=%s\\n"", regno, regs [ regno ]. var_off ) ; return - EACCES ; }",0
1184,"<S2SV_ModStart> ; if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } if ( CHECKOVERFLOW ( o, buf_size, 12 ) ) { exif_log (",0
1185,"<S2SV_ModStart> = le32_to_cpu ( es -> s_features ) ; if (! sbi -> s_es ) { ext2_msg ( sb, KERN_ERR, ""error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> superblock"" ) ; goto failed_sbi ; } if (! sbi -> s_es ) { ext2_msg ( sb, KERN_ERR, ""error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> superblock"" ) ; goto failed_sbi ; } sbi -> s_db_count = db_count ; if (! sbi -> s_es ) { ext2_msg ( sb, KERN_ERR, ""error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> superblock"" ) ; goto failed_sbi ; } if (! sbi -> s_es ) { ext2_msg ( sb, KERN_ERR, ""error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> superblock"" ) ; goto failed_sbi ; } if (! sbi -> s_es ) { ext2_msg ( sb, KERN_ERR, ""error: <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> superblock"" ) ; goto failed",0
1186,<S2SV_ModStart> bd_addr ) { int ret ; <S2SV_ModStart> bd_addr ) { ret = btif_dm_remove_bond_nolock ( bd_addr ) ; if ( ret == BT_STATUS_NOT_READY ) return BT_STATUS_NOT_READY ; if ( ret == BT_STATUS_NOT_READY ) return BT_STATUS_NOT_READY ; if ( ret == BT_STATUS_NOT_READY ) return BT_STATUS_NOT_READY ; ret = btif_dm_remove_bond_nolock ( bd_addr ) ; if ( ret == BT_STATUS_NOT_READY ) return BT_STATUS_NOT_READY ; if ( ret == BT_STATUS_NOT_READY ) return BT_STATUS_NOT_READY ; ret = btif_dm_remove_bond_nolock ( bd_addr ) ; if ( ret == BT_STATUS_NOT_READY ) return BT_STATUS_NOT_READY ; ret = btif_dm_remove_bond_nolock ( bd_addr ) ; if ( ret == BT_STATUS_NOT_READY ) return BT_STATUS_NOT_,0
1187,"<S2SV_ModStart> * 4 ; if ( tcp_hdrlen > skb -> len ) return - 1 ; if ( info -> mss == XT_TCPMSS_CLAMP_PMTU ) { net_err_ratelimited ( ""unknown <S2SV_blank> or <S2SV_blank> invalid <S2SV_blank> path-MTU <S2SV_blank> (%u)\\n"", minlen ) ; return - 1 ; } if ( info -> mss == XT_TCPMSS_CLAMP_PMTU ) { net_err_ratelimited ( ""unknown <S2SV_blank> or <S2SV_blank> invalid <S2SV_blank> path-MTU <S2SV_blank> (%u)\\n"", minlen ) ; return - 1 ; } if ( info -> mss == XT_TCPMSS_CLAMP_PMTU ) { net_err_ratelimited ( ""unknown <S2SV_blank> or <S2SV_blank> invalid <S2SV_blank> path-MTU <S2SV_blank> (%u)\\n"", minlen ) ; return - 1 ; } else if ( info -> mss == XT_TCPMSS_CLAMP_PMTU ) { net_err_ratelimited ( ""unknown <S2SV_blank> or <S2SV_blank> invalid <S2SV_blank> path-MTU <S2SV_blank> (%u)\\n"", minlen ) ; return - 1 ; }",0
1188,"<S2SV_ModStart> ; if ( ( matrix = jas_malloc ( sizeof ( jas_matrix_t ) ) ) ) { jas_matrix_destroy ( matrix ) ; return 0 ; } matrix -> flags_ = 0 ; matrix -> numrows_ = numrows ; matrix -> numcols_ = numcols ; matrix -> rows_ = 0 ; matrix -> maxrows_ = 0 ; matrix -> data_ = 0 ; matrix -> datasize_ = numrows * numcols ; if ( matrix -> maxrows_ > 0 ) { if (! ( matrix -> rows_ = jas_alloc2 ( matrix -> maxrows_, sizeof ( jas_seqent_t * ) ) ) ) { jas_matrix_destroy ( matrix ) ; return 0 ; } matrix -> flags_ = 0 ; matrix -> numrows_ = numrows ; matrix -> numcols_ = numcols ; matrix -> data_ = 0 ; matrix -> datasize_ = numrows * numcols ; if ( matrix -> datasize_ > 0 ) { if (! ( matrix -> data_ = jas_alloc2 ( matrix -> datasize_, sizeof ( jas_seqent_t ) ) ) ) { jas_matrix",0
1189,"<S2SV_ModStart> ; tmp_hdr = rcu_dereference_protected ( np -> ipv6_opt, sock_owned_by_user ( skb -> sk ) ) ; tmp_hdr = rcu_dereference_protected ( np -> ipv6_opt, sock_owned_by_user ( skb -> sk ) ) ; tmp_hdr = rcu_dereference_protected ( np -> ipv6_opt, sock_owned_by_user ( skb -> sk ) ) ; tmp_hdr = rcu_dereference_protected ( np -> ipv6_opt, sock_owned_by_user ( skb -> sk ) ) ; tmp_hdr = rcu_dereference_protected ( skb -> ipv6_opt, sock_owned_by_user ( skb -> sk ) ) ; if ( tmp_hdr ) { skb -> dev = tmp_hdr -> dev ; icmpv6_send ( skb, ICMPV6_PKT_TOOBIG, 0, mtu ) ; IP6_INC_STATS ( net, ip6_dst_idev ( skb_dst ( skb )",0
1190,<S2SV_ModStart> * req ; <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1191,"<S2SV_ModStart> int i ; int <S2SV_ModEnd> expect ; txid <S2SV_ModStart> 4 ) ; <S2SV_ModEnd> expect = 8 <S2SV_ModStart> 8 ; if ( buf -> len < buf -> cursor ) goto bad_format ; nxip = pq_getmsgint ( buf, 4 ) ; if ( nxip < 0 || nxip > avail || expect > avail ) goto bad_format ; xmin = pq_getmsgint64 ( buf ) ; xmax = pq_getmsgint64 ( buf ) ; if ( xmin == 0 || xmin > xmax || xmax > MAX_TXID ) goto bad_format ; snap = palloc ( TXID_SNAPSHOT_SIZE ( nxip ) ) ; for ( i = 0 ; i < nxip ; i ++ ) { txid cur = pq_getmsgint64 ( buf ) ; if ( cur <= last || cur < xmin || cur >= xmax ) goto bad_format ; snap -> xip [ i ] = cur ; last = cur ; }",0
1192,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ <S2SV_ModEnd> psf -> header,0
1193,"<S2SV_ModStart> if ( ret ||! cm_id -> device ) { ret = - EADDRNOTAVAIL ; rdsdebug ( ""addr <S2SV_blank> %pI4 <S2SV_blank> ret <S2SV_blank> %d <S2SV_blank> node <S2SV_blank> type <S2SV_blank> %d\\n"", & addr, ret, cm_id -> device? cm_id -> device -> node_type : - 1 ) ; cm_id -> device -> node_type = RDMA_NODE_IB_CA ; }",0
1194,<S2SV_ModStart> sk ) ; <S2SV_ModEnd> struct xfrm_dump_info info <S2SV_ModStart> 1 ] ; struct xfrm_policy_walk * walk = ( struct xfrm_policy_walk * ) <S2SV_ModEnd> cb -> args <S2SV_ModStart> = NLM_F_MULTI ; <S2SV_ModEnd> walk = xfrm_policy_walk_init <S2SV_ModStart> = NLM_F_MULTI ; <S2SV_ModEnd> walk = xfrm_policy_walk_init,0
1195,<S2SV_ModStart> - 1 ; if ( count > OE_SSIZE_MAX ) OE_RAISE_ERRNO ( OE_EINVAL <S2SV_ModStart> = 0 ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } <S2SV_ModStart> = 0 ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; } <S2SV_ModStart> = 0 ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; if ( ret > ( ssize_t ) count ) { ret = - 1 ; OE_RAISE_ERRNO ( OE_EINVAL ) ; },0
1196,"<S2SV_ModStart> -> d_inode ; <S2SV_ModEnd> int err ; <S2SV_ModStart> = - ESTALE <S2SV_ModEnd> ; if ( <S2SV_ModStart> I_MUTEX_PARENT ) ; if ( upper -> d_parent == upperdir ) { dget ( upper ) ; if ( is_dir ) err = vfs_rmdir ( dir, upper ) ; else err = vfs_unlink ( dir, upper, NULL ) ; else err = vfs_unlink ( dir, upper ) ; ovl_dentry_version_inc ( dentry -> d_parent ) ; } <S2SV_ModEnd> inode_unlock ( dir <S2SV_ModStart> I_MUTEX_PARENT ) ; if ( upper -> d_parent == upperdir ) { dget ( upper ) ; if ( is_dir ) err = vfs_rmdir ( dir, upper ) ; else err = vfs_unlink ( dir, upper ) ; else err = vfs_unlink ( dir, upper, NULL ) ; ovl_dentry_version_inc ( dentry -> d_parent ) ; } if (! err ) d_drop ( dentry ) ; inode_unlock ( dir ) ; return err ;",0
1197,"<S2SV_ModStart> { errstr = parse_global_option ( CMD_INITIALIZE, NULL, NULL ) ; if ( errstr ) { s_log ( LOG_ERR, ""Global <S2SV_blank> options: <S2SV_blank> %s"", errstr ) ; return 1 ; } } if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_INFO, ""Initializing <S2SV_blank> inetd <S2SV_blank> mode <S2SV_blank> configuration"" ) ; else s_log ( LOG_INFO, ""Initializing <S2SV_blank> service <S2SV_blank> [%s]"", ( * section_ptr ) -> servname ) ; errstr = parse_service_option ( CMD_INITIALIZE, section_ptr, NULL, NULL ) ; if ( errstr ) { if ( * section_ptr == & new_service_options ) s_log ( LOG_ERR, """,0
1198,<S2SV_ModStart>! ( nmemb && size ) ) return AVERROR ( ENOMEM ) ; if (,0
1199,<S2SV_ModStart> ] ; if ( a -> name == MAPI_BODY_HTML ) { body. html_bodies = get_html_data ( a ) ; html_size = a -> num_values ; } else if ( a -> name == MAPI_BODY_RTF ) { body. rtf_bodies = get_rtf_data ( a ) ; rtf_size = a -> num_values ; } else if ( a -> name == MAPI_RTF_COMPRESSED ) { body. rtf_bodies = get_rtf_data ( a ) ; rtf_size = a -> num_values ; } else if ( a -> name == MAPI_RTF_COMPRESSED ) { body. rtf_bodies = get_rtf_data ( a ) ; rtf_size = a -> num_values ; },0
1200,"<S2SV_ModStart> ; if ( npix >= i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; } if ( npix >= i -> parent -> height ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; } if ( npix >= i -> parent -> width ) { # if! defined ( NGIFLIB_NO_FILE ) if ( i -> parent -> log ) fprintf ( i -> parent -> log, ""*** <S2SV_blank> ERROR <S2SV_blank> *** <S2SV_blank> Image <S2SV_blank> bigger <S2SV_blank> than <S2SV_blank> global <S2SV_blank> GIF <S2SV_blank> canvas <S2SV_blank>!\\n"" ) ; # endif return - 1 ; } if ( npix >= i -> parent -> width ) { # if! defined ( NGIFLIB",0
1201,<S2SV_ModStart> return 0 ; case MAGIC_PARAM_ELF_DIR_MAX : * ( size_t * ) val = ms -> elf_dir_max ; return 0 ; case MAGIC_PARAM_NAME_MAX : * ( size_t * ) val = ms -> name_max ; return 0 ; case MAGIC_PARAM_ELF_SHNUM_MAX : * ( size_t * ) val = ms -> elf_shnum_max ; return 0 ; case MAGIC_PARAM_ELF_PHNUM_MAX : * ( size_t * ) val = ms -> elf_phnum_max ; return 0 ; case MAGIC_PARAM_ELF_SHNUM_MAX : * ( size_t * ) val = ms -> elf_shnum_max ; return 0 ; case MAGIC_PARAM_ELF_PHNUM_MAX : * ( size_t * ) val = ms -> elf_phnum_max ; return 0 ; case MAGIC_PARAM_ELF_SHNUM_MAX : * ( size_t * ) val = ms -> elf_shnum_max ; return 0 ;,0
1202,"<S2SV_ModStart> 1 ) { jas_eprintf ( ""box <S2SV_blank> type <S2SV_blank> %d\\n"", box -> info -> name ) ; goto error ; } <S2SV_ModStart> 1 ) { jas_eprintf ( ""box <S2SV_blank> type <S2SV_blank> %d\\n"", box -> info -> name ) ; goto error ; } if ( box -> data. jp. magic!= JP2_JP_MAGIC ) { jas_eprintf ( ""incorrect <S2SV_blank> magic <S2SV_blank> number\\n"" ) ; goto error ; } if ( box -> data. jp. magic!= JP2_JP_MAGIC ) { jas_eprintf ( ""incorrect <S2SV_blank> magic <S2SV_blank> number\\n"" ) ; goto error ; } if ( box -> data. jp. magic!= JP2_JP_MAGIC ) { jas_eprintf ( ""incorrect <S2SV_blank> magic <S2SV_blank> number\\n"" ) ; goto error ; } if ( box -> data. jp. magic!= JP2_JP_MAGIC ) { jas_eprintf ( ""incorrect <S2SV_blank> magic <S2SV_blank> number\\n"" ) ; goto error ; } if ( box -> data. jp. magic!= JP2_BOX_FTYP ) { j",0
1203,"<S2SV_ModStart> p2, M_FS_SYSTEM_AUTO ) == M_FS_ERROR_SUCCESS ) { ret = M_FALSE ; goto done ; } pnew = M_fs_path_join ( p2, pold, M_FS_SYSTEM_AUTO ) ; if ( M_fs_perms_can_access ( pnew, M_FS_PERMS_MODE_NONE ) == M_FS_ERROR_SUCCESS ) { ret = M_FALSE ; goto done ; } pold = M_fs_path_basename ( p1, M_FS_SYSTEM_AUTO ) ; if ( M_fs_perms_can_access ( pnew, M_FS_PERMS_MODE_NONE ) == M_FS_ERROR_SUCCESS ) { ret = M_FALSE ; goto done ; } pnew = M_fs_path_join ( p2, pnew, M_FS_SYSTEM_AUTO ) ; if ( M_fs_perms_can_access ( pnew, M_FS_PERMS_MODE_NONE ) == M_FS_ERROR_SUCCESS ) { ret = M_FALSE ; goto done ; }",0
1204,"<S2SV_ModStart> * journal = NULL ; if ( page -> mapping -> host!= ext4_current_host ) journal = EXT4_JOURNAL ( page -> mapping -> host ) ; else if ( page -> mapping -> host!= ext4_current_host -> i_sb -> s_bdev -> bd_inode ) jbd2_journal_invalidatepage ( journal, page, offset ) ; else if ( page -> mapping -> host!= ext4_current_host -> i_sb -> s_bdev -> bd_inode ) { ClearPageChecked ( page ) ; if ( journal ) jbd2_journal_invalidatepage ( journal, page, offset ) ; else if ( page -> mapping -> host!= ext4_current_host -> i_sb -> s_bdev -> bd_inode ) jbd2_journal_invalidatepage ( journal, page, offset ) ; else if ( page -> mapping -> host!= ext4_current_host -> i_sb -> s_bdev -> bd_inode )",0
1205,"<S2SV_ModStart> { trak = gf_isom_get_track <S2SV_ModEnd> ( movie -> <S2SV_ModStart> i + 1 ) ; GF_SAFEALLOC ( writer, TrackWriter ) ; if (! trak ) goto exit ; writer -> sampleNumber = 1 ; writer -> mdia = trak -> Media ; writer -> stbl = trak -> Information -> sampleTable ; writer -> timeScale = trak -> Media -> mediaHeader -> timeScale ; writer -> all_dref_mode = trak -> sample_encryption ; if ( trak -> sample_encryption ) writer -> prevent_dispatch = GF_TRUE ; writer -> isDone = 0 ; writer -> chunkDur = 0 ; writer -> chunkDur = 0 ; writer -> chunkSize = 0 ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STSC ) ; if (! writer -> stsc ) return GF_OUT_OF_MEM ; writer -> stsc = ( GF_SampleToChunkBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_STSC ) ; if (! writer ->",0
1206,<S2SV_ModStart> <S2SV_null> <S2SV_null> static UINT32 <S2SV_ModEnd> nsc_rle_encode ( BYTE,0
1207,"<S2SV_ModStart> ] ; int <S2SV_ModEnd> plen ; md5_state_t <S2SV_ModStart> md5data ) ) ; # if defined ( __linux__ ) && defined ( _POSIX_MEMLOCK_RANGE ) memcpy ( md5data + 1, password, 82 ) ; md5data [ 83 ] = '\\0' ; memcpy ( md5data + 1 + strlen ( password ), pass_salt, 16 ) ; md5_init ( & state ) ; md5_append ( & state, ( const md5_byte_t * ) md5data, strlen ( password ) + 17 ) ; md5_finish ( & state, ( md5_byte_t * ) md5sum + 1 ) ; md5sum [ 0 ] = 0 ; init_packet ( & data, MT_PTYPE_DATA, srcmac, dstmac, sessionkey, outcounter ) ; plen = add_control_packet ( & data, MT_CPTYPE_USERNAME, username, strlen ( username ) ) ; plen += add_control_packet ( & data, MT_CPTYPE_TERM_TYPE, terminal, strlen ( terminal ) ) ; if ( is_a_tty",0
1208,"<S2SV_ModStart> useSystemLib ) { const char * topDir ; char libPath [ MAX_OSPATH ] ; if (! * topDir ) topDir = ""."" ; Com_Printf ( ""Trying <S2SV_blank> to <S2SV_blank> load <S2SV_blank> \\""%s\\"" <S2SV_blank> from <S2SV_blank> \\""%s\\""...\\n"", name, topDir ) ; Com_sprintf ( libPath, sizeof ( libPath ), ""%s%c%s"", topDir, PATH_SEP, name ) ; if (! * basePath ) basePath = ""."" ; if ( FS_FilenameCompare ( topDir, basePath ) ) { Com_Printf ( ""Trying <S2SV_blank> to <S2SV_blank> load <S2SV_blank> \\""%s\\"" <S2SV_blank> from <S2SV_blank> \\""%s\\""...\\n"", name, basePath ) ; dllhandle = Sys_LoadLibrary ( libPath ) ; } else if ( FS_FilenameCompare ( topDir, basePath ) ) { Com_Printf ( ""Trying <S2SV_blank> to <S2SV_blank> load <S2SV_blank> \\""%s\\"" <S2SV_blank> from <S2SV_blank> \\""%s\\""...\\n"", name, basePath ) ; dllhandle = Sys_LoadLibrary ( libPath ) ; } if (! dllhandle ) Com_Printf ( ""Loading <S2SV_blank> \\""%s\\"" <S2SV_blank> failed\\n""",0
1209,<S2SV_ModStart> NULL ; if ( _mibindex ) { int i ; for ( i = 0 ; i < _mibindex_max ; ++ i ) SNMP_FREE ( _mibindexes [ i ] ) ; free ( _mibindexes ) ; _mibindex = 0 ; _mibindex_max = 0 ; _mibindexes = NULL ; },0
1210,"<S2SV_ModStart> ( n ) \\\n{ <S2SV_ModEnd> sum = ( <S2SV_ModStart> n ) \\\n} <S2SV_ModEnd> typedef struct PCDTable <S2SV_ModStart> buffer ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; <S2SV_ModStart> buffer ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; <S2SV_ModStart> buffer ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; <S2SV_ModStart> buffer ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; <S2SV_ModStart> buffer ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; <S2SV_ModStart> buffer ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, ""MemoryAllocationFailed"", image -> filename ) ; <S2SV_ModStart> buffer ) ; if ( buffer == ( unsigned char * ) NULL ) ThrowBinaryException ( ResourceLimitError, """,0
1211,"<S2SV_ModStart> ; if ( i + 1 < NCH ( n ) && TYPE ( CHILD ( n, i + 1 ) ) == COMMA ) i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case DOUBLESTAR : if ( i + 1 < NCH ( n ) && TYPE ( CHILD ( n, i + 1 ) ) == COMMA ) i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto",0
1212,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1213,"<S2SV_ModStart> HAVE_IPV6 char * <S2SV_ModStart> char * p ; if ( * ( str ) == '[' ) { p = memchr ( str + 1, ']', str_len - 2 ) ; if (! p || * ( p + 1 )!= ':' ) { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> IPv6 <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL ; } * portno = atoi ( p + 2 ) ; } else { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> IPv4 <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL ; } if ( str_len ) { colon = memchr ( str, ':', str_len - 1 ) ; if ( colon ) { * portno = atoi ( colon + 1 ) ; host = estrndup ( str, colon - str ) ; } else { if ( get_err ) { * err = strpprintf ( 0, ""Failed <S2SV_blank> to <S2SV_blank> parse <S2SV_blank> IPv4 <S2SV_blank> address <S2SV_blank> \\""%s\\"""", str ) ; } return NULL ; }",0
1214,"<S2SV_ModStart> -> y_buffer ; uint32_t y_width = src_ybc -> y_width ; uint32_t y_height = src_ybc -> y_height ; uint32_t y_stride = dst_ybc -> y_stride ; for ( row = 0 ; row < y_height ; ++ row ) { memcpy ( dst, src, src_ybc -> y_width ) ; dst += dst_ybc -> y_stride ; } for ( row = 0 ; row < y_height ; ++ row ) { memcpy ( dst, src, src_ybc -> y_width ) ; src += src_ybc -> y_stride ; dst += dst_ybc -> y_stride ; } for ( row = 0 ; row < y_height ; ++ row ) { memcpy ( dst, src, src_ybc -> y_width ) ; dst += dst_ybc -> y_stride ; } for ( row = 0 ; row < y_height ; ++ row ) { memcpy ( dst, src, src_ybc -> y_height ; ++ row ) { memcpy ( dst, src, src_y",0
1215,<S2SV_ModStart> cblk_style = bytestream2_get_byteu <S2SV_ModEnd> ( & s <S2SV_ModStart> g ) ; if ( ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) && ( c -> transform == FF_DWT97 ) ) c -> transform = FF_DWT97_INT ; if ( ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) && ( c -> transform == FF_DWT97 ) ) c -> transform = FF_DWT97_INT ; if ( ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) && ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) && ( c -> transform == FF_DWT97 ) ) c -> transform = FF_DWT97_INT ; if ( ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) && ( c -> transform == FF_DWT97 ) ) c -> transform = FF_DWT97_INT ; if ( ( s -> avctx -> flags & CODEC_FLAG_BITEXACT ) && ( s -> avctx -> flags & CODEC_FLAG_BITEXACT,0
1216,"<S2SV_ModStart> ( '%' == ptr [ 1 ] ) { char * end ; char keepit ; int i ; if ( '{' == ptr [ 1 ] ) { ptr += 2 ; } else { end = strchr ( ptr, '}' ) ; if (! end ) { fputs ( ""%{"", stream ) ; continue ; } keepit = * end ; if (! end ) { fputs ( ""{"", stream ) ; continue ; } end = strchr ( ptr, '}' ) ; ptr += 2 ; if (! end ) { fputs ( ""{"", stream ) ; continue ; } end = strchr ( ptr, '}' ) ; ptr += 2 ; if (! end ) { fputs ( ""{"", stream ) ; continue ; } end = strchr ( ptr, '}' ) ; if (! end ) { fputs ( ""{"", stream ) ; continue ; } keepit = * end ; if (! end ) { fputs ( ""{"", stream ) ; continue ; } end = strchr ( ptr, '}' ) ; ptr += 2 ; if (! end ) { fputs ( ""{"", stream ) ; continue ; } end = strchr ( ptr, '}' ) ; ptr += 2 ; if (! end ) { fputs",0
1217,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_rd_sb_row ( VP9_COMP <S2SV_ModStart> int mi_col ; memset <S2SV_ModEnd> ( & xd <S2SV_ModStart> ) ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> int dummy_rate ; int64_t dummy_dist ; MACROBLOCK * x = & cpi -> mb ; if ( sf -> adaptive_pred_interp_filter ) { for ( i = BLOCK_4X4 ; i < BLOCK_8X8 ; ++ i ) { const int num_4x4_w = num_4x4_blocks_wide_lookup [ i ] ; const int num_4x4_h = num_4x4_blocks_high_lookup [ i ] ; const int num_4x4_blk = MAX ( 4, num_4x4_w * num_4x4_h ) ; for ( x -> sb_index = 0 ; x -> sb_index < 4 ; ++ x -> sb_index ) for ( x -> b_index = 0 ; x -> b_index < 16 ; ++ x -> b_index ) for ( x -> sb_index",0
1218,"<S2SV_ModStart> obj_tlen ; u_int hexdump ; u_int offset ; u_int link_type ; union { float f ; uint32_t i ; } bw ; <S2SV_ModStart> ( ndo, ""\\n\\tLMPv%u, <S2SV_blank> msg-type: <S2SV_blank> %s, <S2SV_blank> Flags: <S2SV_blank> [%s], <S2SV_blank> length: <S2SV_blank> %u"", LMP_EXTRACT_VERSION ( lmp_com_header -> version_res [ 0 ] ), lmp_com_header -> msg_type ), bittok2str ( lmp_header_flag_values, ""none"", lmp_obj_len ) ) ; return ; } <S2SV_ModStart> ( ndo, ""\\n\\tLMPv%u, <S2SV_blank> msg-type: <S2SV_blank> %s, <S2SV_blank> Flags: <S2SV_blank> [%s], <S2SV_blank> length: <S2SV_blank> %u"", LMP_EXTRACT_VERSION ( lmp_com_header -> version_res [ 0 ] ), lmp_com_header -> msg_type ), bittok2str ( lmp_header_flag_values, ""none"", lmp_obj_len ) ) ; obj_tlen = EXTRACT_16BITS ( lmp",0
1219,"<S2SV_ModStart> int_mv mvs [ 2 <S2SV_ModEnd> ], nmv_context_counts",0
1220,"<S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ) ) <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ), <S2SV_ModStart> ( encoder -> codec_interface <S2SV_ModEnd> ( ),",0
1221,"<S2SV_ModStart> ) ; if ( size < skb -> len ) { kfree_skb ( skb_out ) ; skb_out = NULL ; goto free ; } skb_pull_rcsum ( skb_out, hdr_size ) ; memmove ( skb_out -> data - ETH_HLEN, skb_mac_header ( skb_out ), ETH_HLEN ) ; memmove ( skb_out -> data - ETH_HLEN, skb_mac_header ( skb_out ), ETH_HLEN ) ; skb_set_mac_header ( skb_out, - ETH_HLEN ) ; skb_reset_network_header ( skb_out ) ; skb_reset_transport_header ( skb_out ) ; hlist_for_each_entry ( entry, chain, list ) { size = entry -> skb -> len - hdr_size ; memcpy ( skb_put ( skb_out, size ), entry -> skb -> data + hdr_size, size ) ; memcpy ( skb_put ( skb_out, size )",0
1222,"<S2SV_ModStart> ) ; spin_lock_init ( & sta -> ampdu_mlme. mtx ) ; INIT_WORK ( & sta -> drv_block_wk, sta_block ) ; INIT_WORK ( & sta -> ampdu_mlme. work, ieee80211_rx_session_work ) ; INIT_WORK ( & sta -> drv_unblock_wk, sta_unblock ) ; INIT_WORK ( & sta -> ampdu_mlme. work, ieee80211_rx_session_work ) ; # ifdef CONFIG_MAC80211_MESH if ( ieee80211_vif_is_mesh ( & sdata -> vif ) &&! is_multicast_ether_addr ( addr ) &&! is_multicast_ether_addr ( addr ) &&! is_multicast_ether_addr ( addr ) &&! is_multicast_ether_addr ( addr ) &&! is_multicast_ether_addr ( addr ) &&! is_multicast_ether_addr ( addr ) &&! is_multicast_ether_addr ( addr ) &&! is_multicast",0
1223,<S2SV_ModStart> tp_event ) &&! capable ( CAP_SYS_ADMIN ) ) return - EPERM ; if ( p_event -> attr. sample_type & PERF_SAMPLE_RAW ) return 0 ; if ( p_event -> attach_state == PERF_ATTACH_TASK ) { if ( tp_event -> flags & TRACE_EVENT_FL_CAP_ANY ) return 0 ; },0
1224,"<S2SV_ModStart> 1 ) ; if (! data_interface ) { dev_err ( & intf -> dev, ""No <S2SV_blank> data <S2SV_blank> interface\\n"" ) ; return - ENODEV ; } <S2SV_ModStart> 0 ) ; if (! control_interface ) { dev_err ( & intf -> dev, ""No <S2SV_blank> control <S2SV_blank> interface\\n"" ) ; return - ENODEV ; }",0
1225,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1226,"<S2SV_ModStart> ; netsnmp_mibindex_load ( ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; while ( entry ) { add_mibfile ( entry, NULL, NULL ) ; entry = strtok_r ( env_var, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = netsnmp_getenv ( ""MIBDIRS"" ) ; if ( env_var!= NULL ) { if ( * env_var == '+' ) entry = strtok_r ( env_var + 1, ENV_SEPARATOR, & st ) ; else entry = strtok_r ( env_var + 1, ENV_SEPARATOR, & st ) ; else entry = strtok_r ( env_var + 1, ENV_SEPARATOR, & st ) ; } SNMP_FREE ( env_var ) ; env_var = netsnmp_getenv ( ""MIBDIRS"" ) ; if ( env_var!= NULL ) { if ( * env_var == '+' ) env_var = strdup ( env_var + 1, ENV_SEPARATOR, & st ) ; else entry",0
1227,"<S2SV_ModStart> * head ; struct list_head tmplist ; sctp_skb_for_each ( skb, & oldsk -> sk_receive_queue, tmp ) { sctp_skb_copy_descendant ( skb, oldsk ) ; inet_sk_copy_descendant ( newsk, oldsk ) ; memcpy ( & tmplist, & newsp -> auto_asconf_list, sizeof ( tmplist ) ) ; sctp_skb_copy_descendant ( skb, newsk ) ; newsp -> ep = newep ; newsp -> hmac = NULL ; head = & sctp_port_hashtable [ sctp_phashfn ( sock_net ( oldsk ), inet_sk ( oldsk ) -> inet_num ) ] ; spin_lock ( & head -> lock ) ; pp = sctp_sk ( oldsk ) -> bind_hash ; sk_add_bind_node ( newsk, & pp -> owner ) ; sctp_sk ( newsk ) -> bind_hash = pp ; sctp_sk ( newsk ) -> inet_num = inet_sk ( oldsk ) -> inet_num ; spin_",0
1228,"<S2SV_ModStart> { fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, O_RDWR ) ) <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd = TEMP_FAILURE_RETRY ( <S2SV_ModStart> fd",0
1229,"<S2SV_ModStart> regs ) { <S2SV_ModEnd> short sel ; <S2SV_ModStart> return sel ; <S2SV_ModEnd> desc = get_desc <S2SV_ModStart> if (! desc ) return - EINVAL ; <S2SV_ModEnd> switch ( ( <S2SV_ModStart> -> l << 1 ) | desc -> d ) { case 0 : return INSN_CODE_SEG_PARAMS ( 2, 2 ) ; case 1 : return INSN_CODE_SEG_PARAMS ( 4, 4 ) ; case 2 : return INSN_CODE_SEG_PARAMS ( 4, 8 ) ; case 3 : return INSN_CODE_SEG_PARAMS ( 4, 8 ) ; case 4 : return INSN_CODE_SEG_PARAMS ( 2, 2 ) ; case 0 : return INSN_CODE_SEG_PARAMS ( 2, 2 ) ; case 1 : return INSN_CODE_SEG_PARAMS ( 2, 4 ) ; case 2 : return INSN_CODE_SEG_PARAMS ( 4, 4 ) ; case 3 : return INSN_CODE_SEG_PARAMS ( 4, 8 ) ; } } <S2SV_null>",0
1230,<S2SV_ModStart> i ++ ) vpx_free_frame_buffer <S2SV_ModEnd> ( & ctx,1
1231,"<S2SV_ModStart> 1 ) { vpx_lpf_vertical_16 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_8 <S2SV_ModEnd> ( s, <S2SV_ModStart> 1 ) { vpx_lpf_vertical_4 <S2SV_ModEnd> ( s,",0
1232,"<S2SV_ModStart> return ret ; ret = anon_inode_getfd ( ""inotify"", & inotify_fops, group, O_RDONLY | flags ) ; if ( ret < 0 ) goto out_free_uid ;",0
1233,"<S2SV_ModStart> * pctx ) { if ( pctx!= NULL ) { iakerb_ctx_id_t ctx ; krb5_error_code code ; * pctx = NULL ; ctx = k5alloc ( sizeof ( * ctx ), & code ) ; if ( ctx == NULL ) goto cleanup ; ctx -> defcred = GSS_C_NO_CREDENTIAL ; ctx -> magic = KG_IAKERB_CONTEXT ; ctx -> state = IAKERB_AS_REQ ; ctx -> count = 0 ; code = krb5_gss_init_context ( & ctx -> k5c ) ; if ( code!= 0 ) goto cleanup ; * pctx = ctx ; return code ; } ctx = k5alloc ( sizeof ( * ctx ), & code ) ; if ( ctx == NULL ) goto cleanup ; ctx -> defcred = GSS_C_NO_CREDENTIAL ; ctx -> magic = KG_IAKERB_CONTEXT ; ctx -> state = IAKERB_AS_REQ ; ctx -> count = 0 ; code = krb5_gss_init_context ( & ctx -> k5c ) ; if ( code!= 0 ) goto cleanup ;",0
1234,"<S2SV_ModStart> = DirectClass ; if ( image == ( Image * ) NULL ) image = screen ; else AppendImageToList ( & image, screen ) ; bitmapDC = CreateCompatibleDC ( hDC ) ; if ( bitmapDC == ( HDC ) NULL ) { DeleteDC ( hDC ) ; ThrowReaderException ( CoderError, ""UnableToCreateDC"" ) ; }",0
1235,"<S2SV_ModStart> while ( impeg2d_bit_stream_nxt <S2SV_ModEnd> ( ps_stream,",0
1236,"<S2SV_ModStart> ""ipc_flood_duration_ms"" ) ) flood_duration_test = true ; if (! strcmp ( dentry -> d_name. name, ""ipc_flood_count"" ) && strcmp ( dentry -> d_name. name, ""ipc_flood_duration_ms"" ) ) flood_duration_test = true ; if (! strcmp ( dentry -> d_name. name, ""ipc_flood_count"" ) ) { ret = size ; goto out ; } if ( ipc_count > MAX_IPC_FLOOD_COUNT ) { ret = size ; goto out ; } if ( ipc_count > MAX_IPC_FLOOD_COUNT ) { ret = size ; goto out ; } if ( ipc_count > MAX_IPC_FLOOD_COUNT ) { ret = size ; goto out ; } if ( ipc_count > MAX_IPC_FLOOD_COUNT ) { ret = size ; goto out ; } if ( ipc_count > MAX_IPC_FLOOD_COUNT ) { ret = size ; goto out ; }",0
1237,<S2SV_ModStart> imethod ) ; g_return_val_if_fail ( <S2SV_ModStart> imethod ) ; g_return_val_if_fail ( <S2SV_ModStart> imethod ) ; g_return_val_if_fail ( <S2SV_ModStart> g_return_val_if_fail ( g_return_val_if_fail ( g_return_val_if_fail ( g_return_val_if_fail ( g_return_val_if_fail ( g_return_val_if_fail ( g_return_val_if_fail ( g_return_val_if_fail ( g_return_val_if_fail ( g_return_val_if_fail ( g_return_val_if_fail ( g_return_val_if_fail ( g_return_val_if_fail ( g_return_val_if_fail ( g_return_val_if_fail ( g_return_val_if_fail ( g_return_val_if_fail ( g_return_val_if_fail ( g_return_val_if_fail ( g_return_val_if_fail ( g_return_val_if_,0
1238,"<S2SV_ModStart> ""nnnnn\\0"" ) ] ; unsigned long tmp ; <S2SV_ModStart> if ( copy_from_user ( buf, buffer, count ) ) return - EFAULT ; tmp = simple_strtol ( buf, & end, 0 ) ; if ( ( * end!= '\\0' ) &&! isspace ( * end ) ) return - EINVAL ; uml_exitcode = tmp ; return count ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1239,"<S2SV_ModStart>, ""Pushing <S2SV_blank> input <S2SV_blank> %d <S2SV_blank> : <S2SV_blank> %.30s\\n"", ctxt -> inputNr <S2SV_ModEnd>, input ->",0
1240,"<S2SV_ModStart> 1 ; } if ( le32_to_cpu ( raw_super -> log_blocksize ) > F2FS_MAX_LOG_BLOCK_SIZE || le32_to_cpu ( raw_super -> log_blocksize ) < F2FS_MIN_LOG_BLOCK_SIZE ) { f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> log <S2SV_blank> blocksize <S2SV_blank> (%u)\\n"", le32_to_cpu ( raw_super -> log_blocksize ) ) ; return 1 ; } if ( le32_to_cpu ( raw_super -> log_blocks_per_seg ) > 9 ) { f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> log <S2SV_blank> blocks <S2SV_blank> per <S2SV_blank> segment <S2SV_blank> (%u)\\n"", le32_to_cpu ( raw_super -> log_blocks_per_seg ) ) ; return 1 ; } if ( le32_to_cpu ( raw_super -> log_sectorsize ) > F2FS_MAX_LOG_SECTOR_SIZE ) { f2fs_msg ( sb, KERN_INFO, ""Invalid <S2SV_blank> log <S2SV_blank> sectorsize",0
1241,"<S2SV_ModStart> is_path ) { <S2SV_ModEnd> char * last_elem <S2SV_ModStart> len ; if ( * name == '$' ) { const char * repl ; size_t len ; if ( ( strncmp ( & name [ 1 ], ""ORIGIN"", 6 ) == 0 && ( len = 7 )!= 0 ) || ( strncmp ( & name [ 1 ], ""PLATFORM"", 8 ) == 0 && ( len = 9 )!= 0 ) ) || ( name [ 1 ] == '{' && ( ( strncmp ( & name [ 2 ], ""ORIGIN}"", 7 ) == 0 && ( len = 9 )!= 0 ) ) && ( name [ len ] == '\\0' || name [ len ] == '/' || ( is_path && name [ len ] == ':' ) ) ) ) { repl = ( ( len == 7 || name [ 2 ] == 'O' )? ( __libc_enable_secure? NULL : l -> l_origin ) : l -> l_platform ) ; if ( repl!= NULL && repl!= ( const char * ) - 1 ) { wp = last_elem ; name += len ; while ( * name!= '\\0' && (! is_path || *",0
1242,"<S2SV_ModStart> ; } pDecCont = ( decContainer_t * ) H264SwDecMalloc ( sizeof ( decContainer_t ) ) ; if ( pDecCont == NULL ) { DEC_API_TRC ( ""H264SwDecInit# <S2SV_blank> ERROR: <S2SV_blank> Memory <S2SV_blank> allocation <S2SV_blank> failed"" ) ; return ( H264SWDEC_MEMFAIL ) ; } # ifdef H264DEC_TRACE sprintf ( pDecCont -> str, ""H264SwDecInit# <S2SV_blank> decInst <S2SV_blank> %p <S2SV_blank> noOutputReordering <S2SV_blank> %d"", ( void * ) decInst, noOutputReordering ) ; DEC_API_TRC ( pDecCont -> str ) ; # endif rv = h264bsdInit ( & pDecCont -> storage, noOutputReordering ) ; if ( rv!= HANTRO_OK ) { H264SwDecRelease ( pDecCont ) ; return ( H264SWDEC_MEMFAIL ) ; }",0
1243,"<S2SV_ModStart> len ) { struct ipv6_txoptions opt_space <S2SV_ModEnd> ; DECLARE_SOCKADDR ( <S2SV_ModStart> sin6, msg -> msg_name ) ; opt = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; opt_space = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ;",0
1244,"<S2SV_ModStart> ; } if ( iph -> tot_len < iph -> ihl * 4 ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INDISCARDS ) ; goto drop ; } if ( iph -> tot_len < iph -> ihl * 4 ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INDISCARDS ) ; goto drop ; } if ( iph -> tot_len < iph -> ihl * 4 ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INDISCARDS ) ; goto drop ; } if ( iph -> ihl == 5 ) { memset ( IPCB ( skb ), 0, sizeof ( struct inet_skb_parm ) ) ; return 0 ; } if ( iph -> ihl == 5 ) { memset ( IPCB ( skb ), 0, sizeof ( struct inet_skb_parm ) ) ; return 0 ; } if ( iph -> ihl == 5 ) { memset ( IPCB ( sk",0
1245,"<S2SV_ModStart> { error = posix_acl_update_mode ( inode <S2SV_ModEnd>, & inode <S2SV_ModStart> inode -> i_mode, & acl ) ; if ( error ) return error ; <S2SV_ModEnd> } break ;",1
1246,"<S2SV_ModStart> ; rt = rcu_dereference_protected ( rt, sock_owned_by_user ( in_skb -> sk ), sock_owned_by_user ( in_skb -> sk ) ) ; if ( rt ) { rt -> rt_flags &= ~ RTCF_LOCAL ; rt -> rt_iif = iif ; rt -> rt_iif = iif ; rt -> rt_iif = iif ; rt -> rt_iif = 0 ; rt -> rt_iif = 0 ; rt -> rt_iif = 0 ; rt -> rt_iif = 0 ; rt -> rt_iif = 0 ; rt -> rt_iif = 0 ; rt -> rt_iif = 0 ; rt -> rt_flags &= ~ RTCF_LOCAL ; rt -> rt_iif = 0 ; rt -> rt_iif = 0 ; rt -> rt_iif = 0 ; rt -> rt_iif = 0 ; rt -> rt_iif = 0 ; rt -> rt_iif = 0 ; rt -> rt_iif = 0 ; rt -> rt_iif = 0 ; rt -> rt_iif = 0 ; rt",0
1247,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1248,"<S2SV_ModStart> goto errout ; for ( j = 0 ; j < info -> partitions ; j ++ ) { int cascade = oggpack_read ( opb, 3 ) ; if ( oggpack_read ( opb, 1 ) ) cascade |= ( oggpack_read ( opb, 5 ) << 3 ) ; if ( cascade >= ci -> books ) goto errout ; info -> stagemasks [ j ] = cascade ; } for ( j = 0 ; j < info -> partitions ; j ++ ) { int book = ( unsigned char ) oggpack_read ( opb, 5 ) << 3 ) ; if ( oggpack_read ( opb, 1 ) ) cascade |= ( oggpack_read ( opb, 5 ) << 3 ) ; info -> stagemasks [ j ] = cascade ; } for ( j = 0 ; j < info -> partitions ; j ++ ) { int cascade = oggpack_read ( opb, 3 ) ; if ( oggpack_read ( opb, 1 ) ) cascade |= ( oggpack_read ( opb, 5 ) << 3 ) ; info -> stagemasks [ j ] =",0
1249,<S2SV_ModStart>! js_regexec ( <S2SV_ModEnd> re -> prog,0
1250,"<S2SV_ModStart> -> count ) break ; if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; ++ seq ; break ; } tp -> copied_seq = seq ; tcp_rcv_space_adjust ( sk ) ; if ( copied > 0 ) tcp_cleanup_rbuf ( sk, copied ) ; return copied ; } if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; ++ seq ; break ; } if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; break ; } if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; ++ seq ; break ; } if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; ++ seq ; break ; } if ( tcp_hdr ( skb ) -> fin ) { sk_eat_skb ( sk, skb, 0 ) ; break ; }",0
1251,"<S2SV_ModStart> ; krb5_key_data * key_data <S2SV_ModEnd> ; if ( <S2SV_ModStart> & err ) ; if ( key_data_in == NULL ) goto cleanup ; memcpy ( key_data, key_data_in, n_key_data * sizeof ( * key_data ) ) ; for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_ver == 1 ) { key_data [ i ]. key_data_ver = 2 ; key_data [ i ]. key_data_type [ 1 ] = KRB5_KDB_SALTTYPE_NORMAL ; key_data [ i ]. key_data_length [ 1 ] = 0 ; key_data [ i ]. key_data_contents [ 1 ] = NULL ; } } for ( i = 0 ; i < n_key_data ; i ++ ) { if ( key_data [ i ]. key_data_ver == 1 ) { key_data [ i ]. key_data_ver = 2 ; key_data [ i ]. key_data_type [ 1 ] = KRB5_K",0
1252,"<S2SV_ModStart> * self, size_t <S2SV_ModEnd> idx, PyObject",1
1253,"<S2SV_ModStart> ] ) ; if ( zByte == 0 ) { rc = SQLITE_NOMEM ; } else { pCsr -> zInput = sqlite3_malloc ( nByte + 1 ) ; if ( pCsr -> zInput == 0 ) { rc = SQLITE_NOMEM ; } else { memcpy ( pCsr -> zInput, zByte, nByte ) ; pCsr -> zInput [ nByte ] = 0 ; rc = pTab -> pMod -> xOpen ( pTab -> pTok, pCsr -> zInput, nByte, & pCsr -> pCsr ) ; if ( rc == SQLITE_NOMEM ) { rc = SQLITE_NOMEM ; } else { memcpy ( pCsr -> zInput, zByte, nByte ) ; pCsr -> zInput [ nByte ] = 0 ; rc = pTab -> pMod -> xOpen ( pTab -> pTok, pCsr -> zInput, nByte, & pCsr -> pCsr ) ; if ( rc == SQLITE_OK ) { pCsr -> pCsr -> pTokenizer = pTab -> pTok ; } }",0
1254,<S2SV_ModStart> filp ) { mutex_lock ( & SOCKET_I ( inode ) -> io_mutex ) ; <S2SV_ModStart> ) ) ; mutex_unlock ( & SOCKET_I ( inode ) -> io_mutex ) ; <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1255,"<S2SV_ModStart> expr_ty iter, asdl_seq * orelse, string type_comment, <S2SV_ModStart> orelse = orelse ; p -> v. AsyncFor. type_comment = type_comment",0
1256,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> ""Can\'t <S2SV_blank> sort <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\'\\n"", name ) ; if ( param -> testflag & T_SILENT ) printf ( ""- <S2SV_blank> Sorting <S2SV_blank> index <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'%s\' <S2SV_blank> for <S2SV_blank> MyISAM-table <S2SV_blank> \'",0
1257,"<S2SV_ModStart> } } opt = rcu_dereference_protected ( inet_sk ( sk ) -> inet_opt, sock_owned_by_user ( sk ) ) ; if ( opt ) { rcu_assign_pointer ( inet_sk ( sk ) -> inet_opt, opt ) ; inet_csk -> icsk_ext_hdr_len = opt -> opt_flen + opt -> opt_nflen ; }",0
1258,"<S2SV_ModStart> ) ) { if ( ( vect_info & VECTORING_INFO_VALID_MASK ) &&! ( error_code & PFERR_RSVD_MASK ) ) { kvm_queue_exception ( vcpu, KVM_INTERNAL_ERROR_SIMUL_EX ) ; vcpu -> run -> exit_reason = KVM_EXIT_INTERNAL_ERROR ; vcpu -> run -> internal. suberror = KVM_INTERNAL_ERROR_SIMUL_EX ; return 1 ; }",0
1259,"<S2SV_ModStart> ; case NGHTTP2_ERR_UNSUPPORTED_PROTOCOL : return ""Unsupported <S2SV_blank> spdy <S2SV_blank> protocol"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> spdy <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> spdy <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> spdy <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> spdy <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> spdy <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> spdy <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> spdy <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> spdy <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> spdy <S2SV_blank> version"" ; case NGHTTP2_ERR_UNSUPPORTED_VERSION : return ""Unsupported <S2SV_blank> spdy <S2SV_blank> version""",0
1260,"<S2SV_ModStart> UINT error ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""rdpei_recv_pdu: <S2SV_blank> removing <S2SV_blank> data <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"" ) ; return UINT_INVALID_DATA ; } <S2SV_ModStart> pduLength ) ; if (! Stream_GetRemainingLength ( s ) ) { WLog_ERR ( TAG, ""rdpei_recv_pdu: <S2SV_blank> removing <S2SV_blank> data <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"" ) ; return UINT_INVALID_DATA ; }",0
1261,"<S2SV_ModStart> ; if (! pData -> socket ) { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"", pData -> description, zmq_strerror ( errno ) ) ; ABORT_FINALIZE ( RS_RET_NO_ERRCODE ) ; } <S2SV_ModStart> ; if (! pData -> socket ) { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"", pData -> description, zmq_strerror ( errno ) ) ; ABORT_FINALIZE ( RS_RET_NO_ERRCODE ) ; } if (! pData -> socket ) { errmsg. LogError ( 0, RS_RET_NO_ERRCODE, ""omzmq3: <S2SV_blank> zsocket_new <S2SV_blank> failed <S2SV_blank> for <S2SV_blank> %s: <S2SV_blank> %s"", pData -> description, zmq_strerror ( errno ) ) ; ABORT_FINALIZE ( RS_RET_NO_ERRCODE ) ; }",0
1262,"<S2SV_ModStart> 0 ) return chg ; if ( hugepage_subpool_get_pages ( spool, chg ) ) return - ENOSPC ; ret = hugetlb_acct_memory ( h, chg ) ; if ( ret < 0 ) { hugepage_subpool_put_pages ( spool, chg ) ; return ret ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; return 0 ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; return 0 ; } if (! vma || vma -> vm_flags & VM_MAYSHARE ) region_add ( & inode -> i_mapping -> private_list, from, to ) ; return 0 ;",0
1263,"<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; struct flowi6 <S2SV_ModStart> struct flowi6 fl6 ; memset ( & fl6, 0, sizeof ( fl6 ) ) ; <S2SV_ModStart>. daddr ) ; <S2SV_ModEnd> SCTP_INC_STATS ( sock_net <S2SV_ModStart> SCTP_MIB_OUTSCTPPACKS ) ; if ( transport -> param_flags & SPP_PMTUD_ENABLE ) skb -> local_df = 1 ; return ip6_xmit ( sk, skb, & fl6, np -> opt, np -> tclass ) ; } else { pr_debug ( ""%s: <S2SV_blank> skb:%p, <S2SV_blank> len:%d, <S2SV_blank> src:%pI6 <S2SV_blank> dst:%pI6\\n"", skb, skb -> len, & fl6. saddr, & fl6. daddr ) ; SCTP_INC_STATS ( sock_net ( sk ), SCTP_MIB_OUTSCTPPACKS ) ; if (! ( transport -> param_flags & SPP_PMTUD_ENABLE ) ) skb -> local_df = 1 ; return ip6_xmit ( sk, skb, & fl6",0
1264,"<S2SV_ModStart> ""mount <S2SV_blank> on <S2SV_blank> filesystem <S2SV_blank> of <S2SV_blank> type <S2SV_blank> "" ""eCryptfs <S2SV_blank> explicitly <S2SV_blank> disallowed <S2SV_blank> due <S2SV_blank> to <S2SV_blank> "" ""known <S2SV_blank> incompatibilities\\n"" ) ; goto out_free ; } if ( path. dentry -> d_sb -> s_type == & ecryptfs_fs_type ) { rc = - EINVAL ; printk ( KERN_ERR ""Mount <S2SV_blank> on <S2SV_blank> filesystem <S2SV_blank> of <S2SV_blank> type <S2SV_blank> "" ""eCryptfs <S2SV_blank> explicitly <S2SV_blank> disallowed <S2SV_blank> due <S2SV_blank> to <S2SV_blank> "" ""known <S2SV_blank> incompatibilities\\n"" ) ; goto out_free ; } if ( path. dentry -> d_sb -> s_type == & ecryptfs_fs_type ) { rc = - EINVAL ; printk ( KERN_ERR ""Mount <S2SV_blank> on <S2SV_blank> filesystem <S2SV_blank> of <S2SV_blank> type <S2SV_blank> "" ""eCryptfs <S2SV_blank> explicitly <S2SV_blank> disallowed <S2SV_blank> due <S2SV_blank> to <S2SV_blank> "" ""known <S2SV_blank> incompatibilities\\n"" ) ; goto out_free ; } if ( path. dentry -> d_sb -> s_type == & ecryptfs_fs_type ) { rc = - EINVAL ; printk (",0
1265,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, 0",1
1266,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; goto MATLAB_KO ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; goto END_OF_READING ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; goto MATLAB_KO ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; goto END_OF_READING ; }",0
1267,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> UINT32 failureCode ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""Not <S2SV_blank> enough <S2SV_blank> bytes <S2SV_blank> to <S2SV_blank> read <S2SV_blank> from <S2SV_blank> RDP_NEG_FAILURE"" ) ; return ; } <S2SV_ModStart> = NEGO_STATE_FAIL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""Not <S2SV_blank> enough <S2SV_blank> bytes <S2SV_blank> to <S2SV_blank> read <S2SV_blank> from <S2SV_blank> RDP_NEG_FAILURE"" ) ; return ; } <S2SV_ModStart> = NEGO_STATE_FAIL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""Not <S2SV_blank> enough <S2SV_blank> bytes <S2SV_blank> to <S2SV_blank> read <S2SV_blank> from <S2SV_blank> RDP_NEG_FAILURE"" ) ; return ; <S2SV_ModStart> = NEGO_STATE_FAIL ; if ( Stream_GetRemainingLength ( s ) < 4 ) { WLog_ERR ( TAG, ""Not <S2SV_blank> enough <S2SV_blank> bytes <S2SV_blank> to <S2SV_blank> read <S2SV_blank> from <S2SV_blank> RDP_NEG_FAILURE"" ) ; return ; }",0
1268,"<S2SV_ModStart> int ret, last_pwd ; krb5_boolean have_pol = TRUE ; osa_princ_ent_rec hist_princ ; int new_n_ks_tuple = 0 ; int new_n_ks_tuple = 0 ; if ( keepold ) return KADM5_PROTECT_PRINCIPAL ; new_n_ks_tuple = 1 ; ret = apply_keysalt_policy ( handle, adb. policy, n_ks_tuple, ks_tuple, & new_n_ks_tuple, & new_n_ks_tuple, & new_n_ks_tuple, & new_n_ks_tuple ) ; if ( new_n_ks_tuple ) new_n_ks_tuple = 1 ; if ( keepold ) return KADM5_PROTECT_PRINCIPAL ; new_n_ks_tuple = 1 ; ret = apply_keysalt_policy ( handle, adb. policy, n_ks_tuple, ks_tuple, & new_n_ks_tuple, & new_n_ks_tuple, & new_n_ks_tuple ) ; if (",0
1269,"<S2SV_ModStart> int len, result = RLC_OK ; bn_t t ; bn_null ( t ) ; RLC_TRY { bn_new ( t ) ; RLC_TRY { bn_null ( t ) ; RLC_TRY { bn_null ( t ) ; RLC_TRY { bn_new ( t ) ; RLC_TRY { bn_null ( t ) ; RLC_TRY { bn_null ( t ) ; RLC_TRY { bn_zero ( m ) ; bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, RSA_PUB ) ; * p_len = k_len - 3 - m_len ; for ( int i = 0 ; i < * p_len ; i ++ ) { bn_lsh ( m, m, 8 ) ; bn_add_dig ( m, m, RSA_PUB ) ; * p_len = m_len ; m_len -- ; bn_rsh ( t, m, 8 * m_len ) ; pad = ( uint8_t ) t -> dp [ 0 ] ; if ( pad!= RSA_PUB ) { result = RLC_ERR",0
1270,<S2SV_ModStart> ; if (! is_undef ( r1 ) ) mem [ r1. i ] = * ( uint64_t * ) ( ip + 1 ) ; else mem [ r1. i ] = * ( uint64_t * ) ( ip + 1 ) ; if (! is_undef ( r2 ) ) mem [ r1. i ] += r2. i ; else mem [ r1. i ] = * ( uint64_t * ) ( ip + 1 ) ; ip += sizeof ( uint64_t ) ; if (! is_undef ( r2 ) ) mem [ r1. i ] = * ( uint64_t * ) ( ip + 1 ) ; ip += sizeof ( uint64_t ) ; if (! is_undef ( r2 ) ) mem [ r1. i ] += r2. i ; else mem [ r1. i ] = * ( uint64_t * ) ( ip + 1 ) ; ip += sizeof ( uint64_t ) ; if (! is_undef ( r2 ) ) mem [ r1. i ] = * ( uint64_t * ) ( ip + 1 ) ; ip,0
1271,"<S2SV_ModStart> vpx_codec_alg_priv_t * ctx <S2SV_ModEnd>, va_list args",1
1272,<S2SV_ModStart> { rq = <S2SV_ModEnd> hctx -> tags <S2SV_ModStart> hctx -> tags [ <S2SV_ModEnd> off + bit,0
1273,"<S2SV_ModStart> ( psf = psf_calloc <S2SV_ModEnd> ( 1,",0
1274,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fix_interp_filter ( VP9_COMMON,0
1275,"<S2SV_ModStart> { token ++ ; } if ( token [ 0 ] == '[' ) { token ++ ; } if (! strncmp ( token, ""lsl"", 3 ) ) { token ++ ; } if (! strncmp ( token, ""lsr"", 3 ) ) { token ++ ; } if (! strncmp ( token, ""asr"", 3 ) ) { token ++ ; } if (! strncmp ( token, ""lsl"", 3 ) ) { token ++ ; } if (! strncmp ( token, ""asr"", 3 ) ) { token ++ ; } if (! strncmp ( token, ""lsl"", 3 ) ) { token ++ ; } if (! strncmp ( token, ""lsr"", 3 ) ) { token ++ ; } if (! strncmp ( token, ""asr"", 3 ) ) { token ++ ; } if (! strncmp ( token, ""asr"", 3 ) ) { token ++ ; } if (! strncmp ( token, ""asr"", 3 ) ) { token ++ ; } if (! strncmp ( token, ""asr"",",0
1276,"<S2SV_ModStart> cpi ) { <S2SV_ModEnd> VP9_COMMON * const <S2SV_ModStart> -> mi_cols ) ; vpx_setup_src_planes ( x, cpi -> Source, 0, 0 ) ; vpx_setup_pre_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vpx_setup_dst_planes ( xd, 0, get_ref_frame_buffer ( cpi, LAST_FRAME ), 0, 0, NULL ) ; vp9_setup_block_planes ( & x -> e_mbd, cm -> subsampling_x, cm -> subsampling_y ) ; xd -> mi [ 0 ] -> mbmi. mode = DC_PRED ; xd -> mi [ 0 ] -> mbmi. uv_mode = DC_PRED ; memset ( xd -> above_context [ 0 ], 0, sizeof ( * xd -> above_context [ 0 ] ) * 2 * aligned_mi_cols * MAX_MB_PLANE ) ; memset ( xd -> above_seg_context, 0, sizeof ( * xd -> above_seg_context ) *",0
1277,"<S2SV_ModStart> = htc_request_check_host_hdr ( sp ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } retval = http_splitline ( sp -> wrk, sp -> fd, hp, htc, HTTP_HDR_REQ, HTTP_HDR_URL, HTTP_HDR_PROTO ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } retval = http_splitline ( sp -> wrk, sp -> fd, hp, htc, HTTP_HDR_URL, HTTP_HDR_PROTO, HTTP_HDR_PROTO ) ; if ( retval!= 0 ) { WSPR ( sp, SLT_HttpGarbage, htc -> rxbuf ) ; return ( retval ) ; } retval = http_splitline ( sp -> wrk, sp -> fd, hp, htc, HTTP_HDR_PROTO, HTTP_HDR_PROTO, HTTP_HDR_PROTO ) ; if ( retval!= 0 ) { WSPR",0
1278,"<S2SV_ModStart> char magick [ 12 <S2SV_ModEnd> ] ; Image <S2SV_ModStart> ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) ( void ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) ( void ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) ( void ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) ( void ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) ( void ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) ( void ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) ( void ) LogMagickEvent ( TraceEvent, Get",0
1279,"<S2SV_ModStart> snd_cards_lock ) ; if ( idx < 0 ) idx = get_slot_from_bitmask ( idx, module_slot_match, module ) ; if ( idx < 0 ) idx = get_slot_from_bitmask ( idx, check_empty_slot, module ) ; if ( idx < 0 ) idx = get_slot_from_bitmask ( idx, check_empty_slot, module ) ; if ( idx < 0 ) idx = get_slot_from_bitmask ( idx, check_empty_slot, module ) ; if ( idx < 0 ) idx = get_slot_from_bitmask ( idx, module_slot_match, module ) ; if ( idx < 0 ) idx = get_slot_from_bitmask ( idx, check_empty_slot, module ) ; if ( idx < 0 ) idx = get_slot_from_bitmask ( idx, check_empty_slot, module ) ; if ( idx < 0 ) idx = get_slot_from_bitmask ( idx, check_empty_slot, module ) ; if ( idx < 0 ) idx = get_slot_from_bitmask ( idx, check",0
1280,"<S2SV_ModStart> ""3"" ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; } if ( padlen + 3 > sig_len ) { return ""3"" ""SIG <S2SV_blank> padding <S2SV_blank> does <S2SV_blank> not <S2SV_blank> check <S2SV_blank> out"" ; }",0
1281,"<S2SV_ModStart> len ) ; if ( len + sizeof ( tETH_HDR ) > TAP_MAX_PKT_WRITE_LEN ) { LOG_ERROR ( ""btpan_tap_send <S2SV_blank> eth <S2SV_blank> packet <S2SV_blank> size:%d <S2SV_blank> is <S2SV_blank> exceeded <S2SV_blank> limit!"", len + sizeof ( tETH_HDR ) ) ; return - 1 ; } <S2SV_ModStart> ) ) ; if ( len + sizeof ( tETH_HDR ) > TAP_MAX_PKT_WRITE_LEN ) { LOG_ERROR ( ""btpan_tap_send <S2SV_blank> eth <S2SV_blank> packet <S2SV_blank> size:%d <S2SV_blank> is <S2SV_blank> exceeded <S2SV_blank> limit!"", len + sizeof ( tETH_HDR ) ) ; return - 1 ; } if ( len + sizeof ( tETH_HDR ) > TAP_MAX_PKT_WRITE_LEN ) { LOG_ERROR ( ""btpan_tap_send <S2SV_blank> eth <S2SV_blank> packet <S2SV_blank> size:%d <S2SV_blank> is <S2SV_blank> exceeded <S2SV_blank> limit!"", len + sizeof ( tETH_HDR ) ) ; return - 1 ; }",0
1282,<S2SV_ModStart> i4_pic_order_cnt_lsb ; ps_prev_poc -> i4_pic_order_cnt_msb = ps_cur_poc -> i4_pic_order_cnt_msb ; ps_prev_poc -> i4_delta_pic_order_cnt_lsb = ps_cur_poc -> i4_delta_pic_order_cnt_lsb ; ps_prev_poc -> i4_delta_pic_order_cnt_msb = ps_cur_poc -> i4_delta_pic_order_cnt_msb ; ps_prev_poc -> i4_pic_order_cnt_bottom = ps_cur_poc -> i4_pic_order_cnt_bottom ; ps_prev_poc -> i4_pic_order_cnt_lsb = ps_cur_poc -> i4_pic_order_cnt_lsb ; ps_prev_poc -> i4_pic_order_cnt_msb = ps_cur_poc -> i4_pic_order_cnt_msb ; ps_prev_poc ->,0
1283,"<S2SV_ModStart> ERR_R_INTERNAL_ERROR ) ; OPENSSL_seterr ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ; <S2SV_ModStart> item ) ; OPENSSL_seterr ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ; <S2SV_ModStart> OPENSSL_free ( rdata ) ; OPENSSL_seterr ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ; OPENSSL_seterr ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ; <S2SV_ModStart> item ) ; OPENSSL_seterr ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ; return ( 0 ) ; } if (! ssl3_setup_buffers ( s ) ) { SSLerr ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ; OPENSSL_seterr ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R_INTERNAL_ERROR ) ; OPENSSL_seterr ( SSL_F_DTLS1_BUFFER_RECORD, ERR_R",0
1284,"<S2SV_ModStart> ; if ( args -> buffer_count > I915_NUM_BUFFERS - 1 ) { DRM_DEBUG ( ""execbuf2 <S2SV_blank> with <S2SV_blank> %d <S2SV_blank> buffers\\n"", args -> buffer_count ) ; return - EINVAL ; } exec2_list = kmalloc ( sizeof ( * exec2_list ) * args -> buffer_count, GFP_KERNEL | __GFP_NOWARN | __GFP_NORETRY ) ; if ( exec2_list == NULL ) exec2_list = drm_malloc_ab ( sizeof ( * exec2_list ), args -> buffer_count ) ; if ( exec2_list == NULL ) exec2_list = drm_malloc_ab ( sizeof ( * exec2_list ), args -> buffer_count ) ; if ( exec2_list == NULL ) exec2_list = drm_malloc_ab ( sizeof ( * exec2_list ), args -> buffer_count ) ; if ( exec2_list == NULL ) exec2_list = drm_malloc_ab ( sizeof ( * exec2_list ), args -> buffer_count ) ; if",0
1285,"<S2SV_ModStart> int mptctl_getiocinfo ( MPT_ADAPTER * ioc, <S2SV_ModStart> MPT_ADAPTER * ioc, <S2SV_ModStart> * karg ; <S2SV_ModEnd> int cim_rev ; <S2SV_ModStart> return PTR_ERR ( <S2SV_ModEnd> karg ) ; <S2SV_ModStart> return PTR_ERR ( <S2SV_ModEnd> karg ) ; <S2SV_ModStart> return PTR_ERR ( <S2SV_ModEnd> karg ) ; <S2SV_ModStart> return PTR_ERR ( <S2SV_ModEnd> karg ) ; <S2SV_ModStart> return PTR_ERR ( karg ) ; <S2SV_ModEnd> } if ( <S2SV_ModStart> ( karg ) ) { printk ( MYIOC_s_ERR_FMT ""%s@%d::mpt_ioctl_getiocinfo() <S2SV_blank> @%d <S2SV_blank> - <S2SV_blank> ioc%d <S2SV_blank> not <S2SV_blank> found!\\n"", __FILE__, __LINE__, iocnum ) ; kfree ( karg ) ; return - ENODEV ; } if ( ( ( iocnum = mpt_verify_adapter ( karg -> hdr. iocnum, & ioc ) ) < 0 ) || ( ioc == NULL ) ) { printk ( MYIOC_s_ERR_FMT ""%s@%d::mpt_ioctl_geti",0
1286,"<S2SV_ModStart>. left ; luaL_checkstack ( L, 1, ""in <S2SV_blank> function <S2SV_blank> mp_unpack_full"" ) ;",1
1287,"<S2SV_ModStart> mntent, const <S2SV_ModEnd> char * path <S2SV_ModStart> mnt_type, mntent -> mnt_flags <S2SV_ModEnd>, mntdata,",0
1288,"<S2SV_ModStart> = 8 ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",1
1289,"<S2SV_ModStart> ab ) { <S2SV_ModEnd> size_t len_sent = <S2SV_ModStart> = 0 ; <S2SV_ModEnd> const char __user <S2SV_ModStart> -> arg_start ; <S2SV_ModEnd> char * buf <S2SV_ModStart> * ab, ""argc=%d"", context -> execve. argc ) ; buf = kmalloc ( MAX_EXECVE_AUDIT_LEN + 1, GFP_KERNEL ) ; if (! buf ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } for ( i = 0 ; i < context -> execve. argc ; i ++ ) { len = audit_log_single_execve_arg ( context, ab, i, & len_sent, p, buf ) ; if ( len <= 0 ) break ; p += len ; } if (! buf ) { audit_panic ( ""out <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> argv <S2SV_blank> string"" ) ; return ; } for ( i = 0 ; i < context -> execve. argc ; i ++ ) { len = audit_log_single_execve_arg ( context, ab, i, & len_sent, p, buf ) ; if ( len <= 0 ) break ;",0
1290,"<S2SV_ModStart>, O_WRONLY | O_CREAT | O_CLOEXEC | O_NOCTTY <S2SV_ModEnd>, mode >",0
1291,"<S2SV_ModStart> err_info ) { <S2SV_ModEnd> char line [ <S2SV_ModStart> char line [ NETSCREEN_LINE_LENGTH <S2SV_ModEnd> ] ; char <S2SV_ModStart> ; if ( file_gets ( line, NETSCREEN_LINE_LENGTH, wth -> random_fh ) == NULL ) { * err = file_error ( wth -> random_fh, err_info ) ; if ( * err == 0 ) { * err = WTAP_ERR_SHORT_READ ; } return FALSE ; } if ( file_gets ( line, NETSCREEN_LINE_LENGTH, wth -> random_fh ) == NULL ) { * err = WTAP_ERR_SHORT_READ ; } return FALSE ; } if ( file_gets ( line, NETSCREEN_LINE_LENGTH, wth -> random_fh ) == NULL ) { * err = file_error ( wth -> random_fh, err_info ) ; if ( * err == 0 ) { * err = WTAP_ERR_SHORT_READ ; } if ( file_gets ( line, NETSCREEN_LINE_LENGTH, wth -> random_fh ) == NULL ) { * err = WTAP_ERR_SHORT_READ ; } if ( file_gets (",0
1292,<S2SV_ModStart> * rq ) <S2SV_ModEnd> { int cpu <S2SV_ModStart> ) ; u64 <S2SV_ModEnd> irq_time ; rq <S2SV_ModStart> ; } } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>,0
1293,"<S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv <S2SV_ModStart> } else { raw_printf ( ""Unknown <S2SV_blank> option: <S2SV_blank> %s"" <S2SV_ModEnd>, * argv",0
1294,"<S2SV_ModStart> st ) { <S2SV_ModEnd> unsigned long flags <S2SV_ModStart> int notify ; <S2SV_ModEnd> RING_PUSH_RESPONSES_AND_CHECK_NOTIFY ( & <S2SV_ModStart> ; case BLKIF_PROTOCOL_NATIVE : memcpy ( RING_GET_RESPONSE ( & blk_rings -> native, blk_rings -> native. rsp_prod_pvt ), & resp, sizeof ( resp ) ) ; break ; case BLKIF_PROTOCOL_X86_32 : memcpy ( RING_GET_RESPONSE ( & blk_rings -> x86_32, blk_rings -> x86_32. rsp_prod_pvt ), & resp, sizeof ( resp ) ) ; break ; case BLKIF_PROTOCOL_X86_64 : memcpy ( RING_GET_RESPONSE ( & blk_rings -> x86_64, blk_rings -> x86_64. rsp_prod_pvt ), & resp, sizeof ( resp ) ) ; break ; default : BUG ( ) ; } blk_rings -> common. rsp_prod_pvt ++ ; RING_PUSH_RESPONSES_AND_CHECK_NOTIFY ( & blk_r",0
1295,<S2SV_ModStart> if (! ( entry -> attributes & KADM5_ATTRIBUTES ) ||! ( entry -> attributes & KRB5_KDB_DISALLOW_ALL_TIX ) ) return ; if (! ( mask & KADM5_ATTRIBUTES ) ||! ( entry -> attributes & KRB5_KDB_DISALLOW_ALL_TIX ) ) return ; if (! ( mask & KADM5_ATTRIBUTES ) ||! ( entry -> attributes & KADM5_KDB_DISALLOW_ALL_TIX ) ||! ( entry -> attributes & KADM5_KDB_DISALLOW_ALL_TIX ) ) return ; if (! ( mask & KADM5_ATTRIBUTES ) ||! ( entry -> attributes & KADM5_KDB_DISALLOW_ALL_TIX ) ) return ; if (! ( mask & KADM5_ATTRIBUTES ) ||! ( mask & KADM5_ATTRIBUTES ) ||! ( entry -> attributes & KADM5_KDB_DISALLOW_ALL_TIX ) ||! ( entry -> attributes & KADM5_KDB_DISALLOW_ALL_TIX ) ) return ;,0
1296,"<S2SV_ModStart> ; if ( datao > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } n -> order = EXIF_BYTE_ORDER_INTEL ; datao += exif_get_long ( buf + datao + 8, EXIF_BYTE_ORDER_INTEL ) ; if ( datao + 2 > buf_size ) { exif_log ( en -> log, EXIF_LOG_CODE_CORRUPT_DATA, ""ExifMnoteFuji"", ""Short <S2SV_blank> MakerNote"" ) ; return ; } c = exif_get_short ( buf + datao, EXIF_BYTE_ORDER_INTEL ) ; datao += 2 ; exif_mnote_data_fuji_clear ( n ) ; n -> entries = exif_mem_alloc ( en -> mem, sizeof ( MnoteFujiEntry ) * c ) ; if (! n -> entries ) { EXIF_LOG_NO_MEMORY ( en -> log, ""ExifMnoteFuji""",0
1297,"<S2SV_ModStart> == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModStart> == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModStart> == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModStart> == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModStart> == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModStart> == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } <S2SV_ModStart> == NULL ) { L_ERROR ( ""output <S2SV_blank> directory <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> made\\n"", procName, dirout ) ; return 1 ; } if (",0
1298,"<S2SV_ModStart> -> icmp_type == ICMP_ECHO? ""echo <S2SV_blank> %s, <S2SV_blank> id <S2SV_blank> %u, <S2SV_blank> seq <S2SV_blank> %u"" : ""reply"", dp -> icmp_id <S2SV_ModEnd>, EXTRACT_16BITS ( <S2SV_ModStart> ) snprintf ( buf, sizeof ( buf ), ""echo <S2SV_blank> %s, <S2SV_blank> id <S2SV_blank> %u, <S2SV_blank> seq <S2SV_blank> %u"", dp -> icmp_type, dp -> icmp_seq ) ; break ; case ICMP_REACH_PROTOCOL : ND_TCHECK ( dp -> icmp_ip. ip_dst ) ; ND_TCHECK ( dp -> icmp_ip. ip_p ) ; ( void ) snprintf ( buf, sizeof ( buf ), ""%s <S2SV_blank> protocol <S2SV_blank> %d <S2SV_blank> unreachable"", ipaddr_string ( ndo, & dp -> icmp_ip. ip_dst ), dp -> icmp_ip. ip_p <S2SV_ModEnd> ) ; break <S2SV_ModStart> ) snprintf ( buf, sizeof ( buf ), ""%s <S2SV_blank> protocol <S2SV_blank> %d <S2SV_blank> unreachable"", ipaddr_string ( ndo, & dp -> icmp_ip. ip_p ) ; break ; case ICMP_",0
1299,<S2SV_ModStart> flags ) { <S2SV_ModEnd> struct fscrypt_info * <S2SV_ModStart> 0 ; } <S2SV_ModEnd> spin_lock ( & <S2SV_ModStart> d_lock ) ; <S2SV_ModEnd> dir_has_key = ( <S2SV_ModStart> dir_has_key = ( <S2SV_ModEnd> ci!= NULL <S2SV_ModStart> d_lock ) ; <S2SV_ModEnd> dput ( dir,0
1300,<S2SV_ModStart> void unbind_ports ( struct fs_ <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
1301,"<S2SV_ModStart> ARCHIVE_WARN ; } if ( argc > MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } <S2SV_ModStart> p ) ; if ( argc > MAX_PACK_ARGS ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Too <S2SV_blank> many <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } if ( argc < 2 ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""Not <S2SV_blank> enough <S2SV_blank> arguments"" ) ; return ARCHIVE_WARN ; } result = ( * pack ) ( argc, numbers, & error ) ; if ( error!= NULL ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""%s"", error ) ; return ARCHIVE_WARN ; } result = ( * pack ) ( argc, numbers, & error ) ; if ( error!= NULL ) { archive_set_error ( a, ARCHIVE_ERRNO_FILE_FORMAT, ""%s""",0
1302,<S2SV_ModStart> parent ) ; context. curX = i -> posX ; context. curY = i -> posY ; # ifdef NGIFLIB_INDEXED_ONLY # ifdef NGIFLIB_ENABLE_CALLBACKS context. line_p. p32 = i -> parent -> frbuff. p32 + ( u32 ) i -> posY * i -> parent -> width ; context. line_p. p32 = i -> parent -> frbuff. p32 + ( u32 ) i -> posX ; # else if ( i -> parent -> mode & NGIFLIB_MODE_HIGHBITDEPTH ) { # ifdef NGIFLIB_ENABLE_CALLBACKS context. line_p. p32 = i -> parent -> frbuff. p32 + ( u32 ) i -> posY * i -> parent -> width ; context. line_p. p32 = i -> parent -> frbuff. p32 + ( u32 ) i -> posY * i -> parent -> width ; # else if ( i -> parent -> mode & NGIFLIB_MODE_HIGHBITDEPTH ) { # ifdef NGIFLIB_ENABLE_CALLBACKS context. line_p. p32,0
1303,"<S2SV_ModStart> if ( p + l > buf + n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length <S2SV_blank> encoding <S2SV_blank> l=%u <S2SV_blank> n=%u)"", l, ( unsigned ) n ) ; goto error ; } if ( p + l > buf + n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length <S2SV_blank> encoding <S2SV_blank> l=%u <S2SV_blank> n=%u)"", l, ( unsigned ) n ) ; goto error ; } if ( p + l > buf + n ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length <S2SV_blank> encoding <S2SV_blank> l=%u <S2SV_blank> n=%u)"", l, ( unsigned ) n ) ; goto error ; } if ( l == 0 && type!= MINISSDPD_SEARCH_ALL && type!= MINISSDPD_GET_VERSION && type!= MINISSDPD_NOTIF ) { syslog ( LOG_WARNING, ""bad <S2SV_blank> request <S2SV_blank> (length=0, <S2SV_blank> type=%d)"", type ) ; goto error ; }",0
1304,"<S2SV_ModStart> RAnalOp next_op ; # if CONFIG_CPU_HIGHBITDEPTH avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; # else avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; # if CONFIG_CPU_HIGHBITDEPTH avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, buf + op -> size, len - op -> size, cpu ) ; # else avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; # if CONFIG_CPU_HIGHBITDEPTH avr_op_analyze ( anal, & next_op, op -> addr + op -> size, buf + op -> size, len - op -> size, cpu ) ; # endif",0
1305,"<S2SV_ModStart>, message ) \\\n{ <S2SV_ModEnd> if ( info <S2SV_ModStart>. scale!= ( Quantum * ) NULL ) info. scale = ( Quantum * ) RelinquishMagickMemory ( info. scale ) ; if ( data!= ( unsigned char * ) NULL ) data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; if ( graymap!= ( int * ) NULL ) graymap = ( int * ) RelinquishMagickMemory ( graymap ) ; if ( data!= ( unsigned char * ) NULL ) data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; if ( data!= ( unsigned char * ) NULL ) data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; if ( graymap!= ( int * ) NULL ) graymap = ( int * ) RelinquishMagickMemory ( graymap ) ; if ( data!= ( unsigned char * ) NULL ) data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; if ( data!= ( unsigned char * ) NULL ) data = ( unsigned char * ) RelinquishMagickMemory ( data ) ; if (",0
1306,<S2SV_ModStart> void ) { if ( recovery_mode == recovery_mode_single ) { recovery_mode_single = recovery_mode_single = recovery_mode_single = recovery_mode_single = recovery_mode_single = recovery_mode_single = recovery_mode_single = recovery_mode_single = recovery_mode_single = recovery_mode_single = recovery_mode_single = recovery_mode_single = recovery_mode_single = recovery_mode_single = recovery_mode_single = recovery_mode_single = recovery_mode_single = recovery_mode_single = recovery_mode_single = recovery_mode_single = recovery_mode_single = recovery_mode_single = recovery_mode_single = recovery_mode_single = recovery_mode_single = recovery_mode_single = recovery_mode_single = recovery_mode_single = recovery_mode_single = recovery_mode_single = recovery_mode_single = recovery_mode_single = recovery_mode_single = recovery_mode_single = recovery_mode_single = recovery_mode_single = recovery_mode_single = recovery_mode_single = recovery_mode_single = recovery_mode,0
1307,"<S2SV_ModStart> ( interface, ENC624J600_EHT1, hashTable [ 0 ] ) ; enc624j600WriteReg ( interface, ENC624J600_EHT2, hashTable [ 1 ] ) ; enc624j600WriteReg ( interface, ENC624J600_EHT3, hashTable [ 2 ] ) ; enc624j600WriteReg ( interface, ENC624J600_EHT4, hashTable [ 3 ] ) ; TRACE_DEBUG ( "" <S2SV_blank> <S2SV_blank> EHT1 <S2SV_blank> = <S2SV_blank> %04"" PRIX16 ""\\r\\n"", enc624j600ReadReg ( interface, ENC624J600_EHT1 ) ) ; TRACE_DEBUG ( "" <S2SV_blank> <S2SV_blank> EHT2 <S2SV_blank> = <S2SV_blank> %04"" PRIX16 ""\\r\\n"", enc624j600ReadReg ( interface, ENC624J600_EHT2 ) ) ; TRACE_DEBUG ( "" <S2SV_blank> <S2SV_blank> EHT3 <S2SV_blank> = <S2SV_blank> %04"" PRIX16 ""\\r\\n"", enc624j600ReadReg ( interface, ENC624J600_EHT3 ) ) ; TRACE_DEBUG (",0
1308,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; ThrowReaderException ( CorruptImageError, ""ImproperImageHeader"" ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1309,"<S2SV_ModStart> ( LOG_INFO, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read(): <S2SV_blank> %m"", req -> socket ) ; n = read ( req -> socket, buf, sizeof ( buf ) ) ; if ( n < 0 ) { syslog ( LOG_ERR, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read(): <S2SV_blank> %m"", req -> socket ) ; goto error ; } n = read ( req -> socket, buf, sizeof ( buf ) ) ; if ( n < 0 ) { syslog ( LOG_ERR, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read(): <S2SV_blank> %m"", req -> socket ) ; goto error ; } n = read ( req -> socket, buf, sizeof ( buf ) ) ; if ( n < 0 ) { syslog ( LOG_ERR, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read(): <S2SV_blank> %m"", req -> socket ) ; goto error ; } n = read ( req -> socket, buf, sizeof ( buf ) ) ; if ( n < 0 ) { syslog ( LOG_ERR, ""(s=%d) <S2SV_blank> processRequest(): <S2SV_blank> read(): <S2SV_blank> %m"", req -> socket ) ; goto error ; }",0
1310,<S2SV_ModStart> ps_slice_hdr ) { ps_dpb_mgr_t * ps_dpb_mgr = ( ps_dpb_mgr_t * ) ps_codec -> pv_dpb_mgr ; mv_buf_t * ps_mv_buf = ( mv_buf_t * ) ps_codec -> pv_mv_buf_mgr ; dpb_mgr_t * ps_dpb_mgr = ( dpb_mgr_t * ) ps_codec -> pv_dpb_mgr ; buf_mgr_t * ps_dpb_mgr = ( buf_mgr_t * ) ps_codec -> pv_dpb_mgr ; dpb_mgr_t * ps_mv_mgr = ( dpb_mgr_t * ) ps_codec -> pv_mv_buf_mgr ; dpb_mgr_t * ps_dpb_mgr = ( dpb_mgr_t * ) ps_codec -> pv_dpb_mgr ; dpb_mgr_t * ps_dpb_mgr = ( dpb_mgr_t * ) ps_codec -> pv_dpb_mgr ; dpb_mgr_t * ps,0
1311,"<S2SV_ModStart> PTRACE_GET_THREAD_AREA : ret = get_user ( task_thread_info ( child ) -> tp_value, datap ) ; break ; case PTRACE_SET_THREAD_AREA : ret = put_user ( task_thread_info ( child ) -> tp_area, datap ) ; break ; case PTRACE_GET_SYSCALL : task_thread_info ( child ) -> syscall = data ; break ; case PTRACE_SET_SYSCALL : ret = ptrace_setsyscall ( child, data ) ; break ; # ifdef CONFIG_IWMMXT case PTRACE_GETWMMXREGS : ret = ptrace_getwmmxregs ( child, datap ) ; break ; case PTRACE_SETWMMXREGS : ret = ptrace_setwmmxregs ( child, datap ) ; break ; case PTRACE_SETWMMXREGS : ret = ptrace_setwmmxregs ( child, datap ) ; break ; # ifdef CONFIG_IWMMXT case PTRACE_GETWMMXREGS : ret = ptrace_getwmmxregs",0
1312,"<S2SV_ModStart> goto fail ; } temp = drm_malloc_ab ( temp_size, 1 ) ; if (! temp ) { DRM_ERROR ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> storage <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> in <S2SV_blank> bin/render <S2SV_blank> CLs.\\n"" ) ; ret = - ENOMEM ; goto fail ; } temp = drm_malloc_ab ( temp_size, 1 ) ; if (! temp ) { DRM_ERROR ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> storage <S2SV_blank> for <S2SV_blank> copying <S2SV_blank> in <S2SV_blank> bin/render <S2SV_blank> CLs.\\n"" ) ; ret = - ENOMEM ; goto fail ; } if ( copy_from_user ( bin, ( void __user * ) ( uintptr_t ) args -> bin_cl, args -> bin_cl_size ) ) { ret = - EFAULT ; goto fail ; } if ( copy_from_user ( exec -> uniforms_u, ( void __user * ) ( uintptr_t ) args -> uniforms_u, args -> uniforms_size ) ) { ret = - EFAULT ; goto fail ; } if ( copy_from_user ( exec -> shader_state, ( void __user * )",0
1313,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> print_object ( cJSON <S2SV_ModStart> 0 ; while ( child ) { ++ numentries ; child = child -> next ; } if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( names = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ) ) ) ) return 0 ; if (! ( entries = ( char * * ) cJSON_malloc ( numentries * sizeof ( char * ),0
1314,"<S2SV_ModStart> * length ) { struct stream packet = * s ; if (! s_check ( s ) ) { rdp_protocol_error ( ""ber_parse_header(), <S2SV_blank> expected <S2SV_blank> tag <S2SV_blank> %d, <S2SV_blank> got <S2SV_blank> %d"", tagval, tag ) ; return False ; } if (! s_check ( s ) ) { rdp_protocol_error ( ""ber_parse_header(), <S2SV_blank> expected <S2SV_blank> tag <S2SV_blank> %d, <S2SV_blank> got <S2SV_blank> %d"", tagval, tag ) ; return False ; } if (! s_check ( s ) ) { rdp_protocol_error ( ""ber_parse_header(), <S2SV_blank> expected <S2SV_blank> tag <S2SV_blank> %d, <S2SV_blank> got <S2SV_blank> %d"", tagval, tag ) ; return False ; } if (! s_check ( s ) ) { rdp_protocol_error ( ""ber_parse_header(), <S2SV_blank> expected <S2SV_blank> tag <S2SV_blank> %d, <S2SV_blank> got <S2SV_blank> %d"", tagval, tag ) ; return False ; } if (! s_check ( s ) ) { rdp_protocol_error ( ""ber_parse_header(), <S2SV_blank> expected <S2SV_blank> tag <S2SV_blank> %d, <S2SV_blank> got <S2SV_blank> %d"", tagval",0
1315,"<S2SV_ModStart> ; other = <S2SV_ModEnd> unix_peer_get ( sk <S2SV_ModStart> other ) { mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; } else if ( unix_recvq_full ( other ) ) mask |= POLLOUT | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; return mask ; } if ( unix_peer ( sk )!= sk ) { sock_poll_wait ( file, & unix_sk ( other ) -> peer_wait, wait ) ; if ( unix_peer ( other )!= sk ) { sock_poll_wait ( file, & unix_sk ( other ) -> peer_wait, wait ) ; writable = 0 ; } sock_put ( other ) ; } if ( writable ) mask |= POLLOUT | POLLWRNORM | POLLWRBAND ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; else set_bit ( SOCK_ASYNC_NOSPACE, & sk -> sk_socket -> flags ) ; return mask ;",0
1316,<S2SV_ModStart> 4 ] ; size_t <S2SV_ModEnd> value ; if <S2SV_ModStart> size_t value ; if ( * length < 4 ) return ( - 1 ) ; <S2SV_ModStart> } value = <S2SV_ModEnd> buffer [ 0 <S2SV_ModStart> ] << 24 ; value |= buffer [ 1 ] << 16 ; value |= buffer [ 2 ] << 8 ; value |= buffer [ 3 ] ; value |= buffer [ 4 ] ; value |= buffer [ 5 ] ; value |= buffer [ 6 ] ; value |= buffer [ 7 ] ; value |= buffer [ 8 ] ; value |= buffer [ 9 ] ; value |= buffer [ 10 ] ; value |= buffer [ 11 ] ; value |= buffer [ 12 ] ; value |= buffer [ 13 ] ; quantum. unsigned_value = ( value & 0xffffffff ) ; return ( quantum. signed_value ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>,0
1317,"<S2SV_ModStart> h ) { sprintf ( outputbuffer <S2SV_ModEnd>, ""\\n <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> re"", <S2SV_ModStart> h ) ; sendClean ( outputbuffer ) ;",1
1318,<S2SV_ModStart> void exit_io_context ( struct task_struct * task <S2SV_ModEnd> ) { struct <S2SV_ModStart> * ioc ; mutex_lock ( & task -> io_context_mutex ) ; <S2SV_ModStart> -> io_context ; mutex_unlock ( & task -> io_context_mutex ) ; <S2SV_ModStart> ioc = task <S2SV_ModEnd> -> io_context ; <S2SV_ModStart> -> io_context = NULL ; task_unlock ( & task -> io_context_mutex ) ; <S2SV_ModEnd> if ( atomic_dec_and_test <S2SV_ModStart> ioc -> nr_tasks ) ) { mutex_unlock ( & task -> io_context -> nr_tasks ) ; if ( atomic_dec_and_test ( & ioc -> nr_tasks ) ) { if ( ioc -> aic && ioc -> aic -> exit ) ioc -> aic -> exit ( ioc -> aic ) ; cfq_exit ( ioc ) ; } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1319,"<S2SV_ModStart> = 0 ; # if XTENSA_HAVE_COPROCESSORS coprocessor_flush_all ( ti ) ; coprocessor_release_all ( ti ) ; ret |= __copy_from_user ( & ti -> xtregs_cp, & xtregs -> cp0, sizeof ( xtregs_coprocessor_t ) ) ; ret |= __copy_from_user ( & regs -> xtregs_opt, & xtregs -> opt, sizeof ( xtregs -> opt ) ) ; ret |= __copy_from_user ( & ti -> xtregs_user, & xtregs -> user, sizeof ( xtregs -> user ) ) ; # else ret = copy_from_user ( & ti -> xtregs_cp, & xtregs -> cp, sizeof ( xtregs_coprocessor_t ) ) ; ret |= __copy_from_user ( & ti -> xtregs_user, & xtregs -> opt, sizeof ( xtregs -> opt ) ) ; ret |= __copy_from_user ( & ti -> xtregs_cp, & xtregs -> cp, sizeof ( xtregs",0
1320,<S2SV_ModStart>. length < token_wrapper_len + 14 ) { * minor_status = ( OM_uint32 ) KRB5_BAD_MSIZE ; return GSS_S_DEFECTIVE_TOKEN ; } if ( header -> buffer. length < token_wrapper_len + 14 ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = 0 ; return GSS_S_DEFECTIVE_TOKEN ; } if ( trailer -> buffer. length < token_wrapper_len + 14 ) { * minor_status = ( OM_uint32 ) K,0
1321,"<S2SV_ModStart> data ) { <S2SV_ModEnd> xen_pcibk_read_config_word ( dev <S2SV_ModStart>, value, data ) ; for ( i = 0 ; i < PCI_ROM_RESOURCE ; i ++ ) { if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; if ( dev -> resource [ i ]. flags & IORESOURCE_IO ) * value |= PCI_COMMAND_IO ; if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; } return ret ; } for ( i = 0 ; i < PCI_ROM_RESOURCE ; i ++ ) { if ( dev -> resource [ i ]. flags & IORESOURCE_IO ) * value |= PCI_COMMAND_IO ; if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; if ( dev -> resource [ i ]. flags & IORESOURCE_MEM ) * value |= PCI_COMMAND_MEMORY ; } return ret ; } for ( i = 0 ; i < PCI_ROM_RESOURCE ; i ++ ) { if ( dev -> resource",0
1322,"<S2SV_ModStart> * ctx, <S2SV_ModEnd> va_list args ) <S2SV_ModStart> * frame = va_arg ( args, vpx_ref_frame_t <S2SV_ModEnd> * ) ; <S2SV_ModStart> NULL ) { YV12_BUFFER_CONFIG <S2SV_ModEnd> * fb ; <S2SV_ModStart> * fb ; vpx_get_reference_enc ( ctx -> cpi, frame -> idx, & fb ) ; yuvconfig2image ( & frame -> img, fb, NULL ) ; return VPX_CODEC_OK ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1323,<S2SV_ModStart> ) ; } if (! fpl ) { WARN_ON (! lockdep_is_held ( & fpl -> lock ) ) ; <S2SV_ModStart> ) ; } if (! fpl ) { WARN_ON (! lockdep_is_held ( & fpl -> lock ) ) ; <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1324,"<S2SV_ModStart> plug ) ; if ( unlikely (! capable ( CAP_SYS_RAWIO ) ) ) { pr_debug ( ""EPERM: <S2SV_blank> io_submit: <S2SV_blank> access <S2SV_blank> denied\\n"" ) ; return - EPERM ; } <S2SV_ModStart> & batch ) ; if ( unlikely (! capable ( CAP_SYS_RAWIO ) ) ) { pr_debug ( ""EPERM: <S2SV_blank> io_submit: <S2SV_blank> access <S2SV_blank> denied\\n"" ) ; return - EPERM ; } if ( unlikely ( capable ( CAP_SYS_RAWIO ) ) ) { pr_debug ( ""EPERM: <S2SV_blank> io_submit: <S2SV_blank> access <S2SV_blank> denied\\n"" ) ; return - EPERM ; } <S2SV_ModStart> & batch ) ; if ( unlikely (! capable ( CAP_SYS_RAWIO ) ) ) { pr_debug ( ""EPERM: <S2SV_blank> io_submit: <S2SV_blank> access <S2SV_blank> denied\\n"" ) ; return - EPERM ; } if ( unlikely ( capable ( CAP_SYS_RAWIO ) ) ) { pr_debug ( ""EPERM: <S2SV_blank> io_submit: <S2SV_blank> access <S2SV_blank> denied\\n"" ) ; return - EPERM ; }",0
1325,"<S2SV_ModStart> dwc ; list_del ( & req -> list ) ; req -> started = false ; req -> remaining = 0 ; if ( req -> request. status == - EINPROGRESS ) req -> request. status = status ; if ( req -> trb ) usb_gadget_unmap_request_by_dev ( dwc -> sysdev, & req -> request, req -> direction ) ; req -> trb = NULL ; spin_lock ( & dwc -> lock ) ; usb_gadget_giveback_request ( & dep -> endpoint, & req -> request ) ; spin_unlock ( & dwc -> lock ) ; usb_gadget_giveback_request ( & dep -> endpoint, & req -> request ) ; spin_lock ( & dwc -> lock ) ; usb_gadget_gadget_giveback_request ( & dep -> endpoint, & req -> request ) ; spin_lock ( & dwc -> lock ) ; <S2SV_ModEnd> pm_runtime_put ( dwc",0
1326,<S2SV_ModStart> } # else # if defined ( __GNUC__ ) ( void ) __GNUC__ ; # else # if defined ( __GNUC__ ) ( void ) ( void ) ( void ) ( void ) ( void ) __GNUC__ ; # else # if defined ( __GNUC__ ) ( void ) ( void ) ( void ) ( void ) ( void ) ( void ) ( void ) ( void ) ( void ) ( void ) ( void ) ( void ) # endif # if defined ( __GNUC__ ) ( void ) ( void ) __GNUC__ ; # else # if defined ( __GNUC__ ) ( void ) ( void ) ( void ) ( void ) ( void ) ( void ) ( void ) __GNUC__ ; # else # if defined ( __GNUC__ ) ( void ) ( void ) ( void ) ( void ) ( void ) ( void ) ( void ) ( void ) ( void ) ( void ) ( void ) ( void ) ( void ) ( void ) # endif # if defined ( __GNUC__ ) ( void ) ( void ) __GNUC__ ; # else # if defined ( __GNUC__ ) ( void ) ( void ) ( void ) (,0
1327,"<S2SV_ModStart> = sas_revalidate_domain, <S2SV_ModEnd> [ DISCE_PROBE ] <S2SV_ModStart> DISCE_SUSPEND ] = sas_suspend_devices, <S2SV_ModEnd> [ DISCE_RESUME ]",0
1328,"<S2SV_ModStart> * info, myisam_table * table <S2SV_ModEnd>, int rep_quick <S2SV_ModStart>, 1, MYF ( MY_WME ) ) || init_io_cache ( & info -> read_cache, info -> dfile, ( uint ) param -> read_buffer_length, READ_CACHE, share -> pack. header_length, 1, MYF ( MY_WME ) ) || (! rep_quick && init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, 1, MYF ( MY_WME ) ) ) || init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, WRITE_CACHE, share -> pack. header_length, 1, MYF ( MY_WME ) ) || (! rep_quick && init_io_cache ( & info -> rec_cache, info -> dfile, ( uint ) param -> write_buffer_length, 1, MYF ( MY_WME ) ) ) || (! rep_quick && init_io_cache ( & info -> rec_cache, info ->",0
1329,"<S2SV_ModStart> } ; # if uECC_VLI_NATIVE_LITTLE_ENDIAN uECC_word_t carry ; uECC_word_t carry ; wordcount_t num_words = curve -> num_words ; bitcount_t num_n_words = BITS_TO_WORDS ( curve -> num_n_bits ) ; bitcount_t num_n_bits = curve -> num_n_bits ; if ( uECC_vli_isZero ( k, num_words ) || uECC_vli_cmp ( curve -> n, k, num_n_words )!= 1 ) { return 0 ; } carry = regularize_k ( k, tmp, s, curve ) ; carry = regularize_k ( k, tmp, s, curve ) ; carry = regularize_k ( k, tmp, s, curve ) ; carry = regularize_k ( k, tmp, s, curve ) ; carry = regularize_k ( k, tmp, s, curve ) ; carry = regularize_k ( k, tmp, s, curve ) ; carry = regularize_k ( k, tmp, s, curve",0
1330,"<S2SV_ModStart> trunc : ND_TCHECK2 ( * daoack, ND_RPL_DAOACK_MIN_LEN ) ; if ( length < ND_RPL_DAOACK_MIN_LEN ) goto tooshort ; bp += ND_RPL_DAOACK_MIN_LEN ; length -= ND_RPL_DAOACK_MIN_LEN ; if ( RPL_DAOACK_D ( daoack -> rpl_flags ) ) { ND_TCHECK2 ( * daoack, ND_RPL_DAOACK_MIN_LEN ) ; if ( length < ND_RPL_DAOACK_MIN_LEN ) goto tooshort ; dagid_str = ip6addr_string ( ndo, daoack -> rpl_dagid ) ; bp += ND_RPL_DAOACK_MIN_LEN ; length -= ND_RPL_DAOACK_D ( daoack -> rpl_flags ) ; bp += ND_RPL_DAOACK_MIN_LEN ; length -= ND_RPL_DAOACK_MIN_LEN ; if ( length < ND_RPL_DAOACK",0
1331,"<S2SV_ModStart> ( sk ) <S2SV_ModEnd> ; int copied <S2SV_ModStart> out ; if ( flags & MSG_TRUNC ) { msg -> msg_namelen = sizeof ( * sin ) ; <S2SV_ModStart> = ( struct sockaddr_in * ) msg -> msg_name ; sin -> sin_family = AF_INET ; sin -> sin_port = 0 ; sin -> sin_addr. s_addr = ip_hdr ( skb ) -> saddr ; memset ( sin -> sin_zero, 0, sizeof ( sin -> sin_zero ) ) ; } if ( flags & MSG_TRUNC ) { msg -> msg_flags |= MSG_TRUNC ; copied = skb -> len ; } err = skb_copy_datagram_iovec ( skb, 0, msg -> msg_iov, copied ) ; if ( copied > len ) { msg -> msg_flags |= MSG_TRUNC ; copied = len ; } err = skb_copy_datagram_iovec ( skb, 0, msg -> msg_iov, copied ) ; if ( err ) { msg -> msg_flags |= MSG_TRUNC ; copied = len ; } err = skb_copy_datagram_i",0
1332,"<S2SV_ModStart> lblk ; flags = EXT4_GET_BLOCKS_CREATE_UNWRIT_EXT | EXT4_GET_BLOCKS_CONVERT_UNWRITTEN | EXT4_EX_NOCACHE ; if ( mode & FALLOC_FL_KEEP_SIZE ) flags |= EXT4_GET_BLOCKS_KEEP_SIZE ; if ( ext4_test_inode_flag ( inode, EXT4_INODE_EXTENT ) ) flags |= EXT4_GET_BLOCKS_EXTENT ; <S2SV_ModStart> EXT4_GET_BLOCKS_CREATE_UNWRIT_EXT | EXT4_GET_BLOCKS_CONVERT_UNWRITTEN | EXT4_EX_NOCACHE ; if ( mode & FALLOC_FL_KEEP_SIZE ) flags |= EXT4_GET_BLOCKS_KEEP_SIZE ; if ( ext4_test_inode_flag ( inode, EXT4_INODE_EXTENT ) ) flags |= EXT4_GET_BLOCKS_EXTENT ; if ( ext4_test_inode_flag ( inode, EXT4_INODE_EXTENT ) ) flags |= EXT4_GET_BLOCKS",0
1333,"<S2SV_ModStart> buf ; } else { uint32_t new_free_total = pool -> free_total * 2 ; void * new_arr = realloc ( pool -> free_arr, new_free_total * sizeof ( nw_buf * ) ) ; if ( new_arr ) { pool -> free_total = new_free_total ; pool -> free_arr = new_arr ; pool -> free_arr = new_arr ; pool -> free_arr = new_arr ; pool -> free_total = new_free_total ; } else { uint32_t new_free_total = pool -> free_total * 2 ; void * new_arr = realloc ( pool -> free_arr, new_free_total * sizeof ( nw_buf * ) ) ; if ( new_arr ) { pool -> free_total = new_free_total ; pool -> free_arr = new_arr ; pool -> free_arr = new_arr ; pool -> free_arr = new_arr ; pool -> free_total = new_free_total ; pool -> free_arr = new_arr ; pool -> free_arr = new_arr ; pool -> free_arr = new",0
1334,"<S2SV_ModStart> map ; bpf_map_inc_nolock <S2SV_ModEnd> ( map,",0
1335,"<S2SV_ModStart> * cp ) { int cval = 0, meta = 0 ; <S2SV_ModStart> = ""00112233445566778899aAbBcCdDeEfF"" ; <S2SV_ModEnd> const char * <S2SV_ModStart> = ""00112233445566778899aAbBcCdDeEfF"" ; <S2SV_ModEnd> const char * <S2SV_ModStart> = ""00112233445566778899aAbBcCdDeEfF"" ; <S2SV_ModEnd> const char * <S2SV_ModStart> = 0 ; cp ++ ; if ( * cp == 'x' || * cp == 'X' ) for ( ++ cp ; * cp && ( index ( hex, * cp ) ) && ( dcount ++ < 2 ) ; cp ++ ) cval = ( cval * 16 ) + ( ( int ) ( dp - hex ) / 2 ) ; else if ( * cp == 'o' || * cp == 'O' ) for ( ++ cp ; * cp && ( index ( ""01234567"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) for ( ; * cp && ( index ( ""0123456789"", * cp ) ) && ( dcount ++ < 3 ) ; cp ++ ) cval = ( c",0
1336,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static,1
1337,"<S2SV_ModStart> ; if ( size_left > sizeof ( ipfix_template_record_t ) ) { LogError ( ""Process_ipfix <S2SV_blank> [%u] <S2SV_blank> Template <S2SV_blank> size <S2SV_blank> error <S2SV_blank> at <S2SV_blank> %s <S2SV_blank> line <S2SV_blank> %u"", exporter -> info. id, __FILE__, __LINE__, strerror ( errno ) ) ; size_left = 0 ; continue ; } ipfix_template_record = ( ipfix_template_record_t * ) DataPtr ; size_left -= 4 ; table_id = ntohs ( ipfix_template_record -> TemplateID ) ; count = ntohs ( ipfix_template_record -> FieldCount ) ; dbg_printf ( ""\\n[%u] <S2SV_blank> Template <S2SV_blank> ID: <S2SV_blank> %u\\n"", table_id ) ; memset ( ( void * ) cache. common_extensions, 0, count ) ; memset ( ( void * ) cache. lookup_info, 0, 65536 * sizeof ( struct element_param_s ) ) ; for ( i = 1 ; i < count ; i ++ ) { uint32_t Type = ipfix_element_map [ i ]. id ; if ( ipfix_element",0
1338,"<S2SV_ModStart> * lined ; PIX * pixc, * pixm, * pixg, * pixd ; if ( ( pixc = pixFewColorsOctcubeQuant2 ( pixs, level ) ) == NULL ) return ( PIX * ) ERROR_PTR ( ""too <S2SV_blank> many <S2SV_blank> colors"", procName, NULL ) ; pixm = pixGetColormap ( pixc ) ; pixg = pixGetColormap ( pixg ) ; pixg = pixGetColormap ( pixg ) ; if (! pixs || pixGetDepth ( pixs )!= 32 ) return ( PIX * ) ERROR_PTR ( ""pixs <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 32 <S2SV_blank> bpp"", procName, NULL ) ; if (! pixs || pixGetDepth ( pixs )!= 32 ) return ( PIX * ) ERROR_PTR ( ""pixs <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 32 <S2SV_blank> bpp"", procName, NULL ) ; if (! pixs || pixGetDepth ( pixs )!= 32 ) return ( PIX * ) ERROR_PTR ( ""pixs <S2SV_blank> undefined <S2SV_blank> or <S2SV_blank> not <S2SV_blank> 32 <S2SV_blank> bpp"", procName, NULL )",0
1339,<S2SV_ModStart> v ) ) goto err ; if ( BN_num_bits ( u ) > BN_num_bits ( v ) ) goto err ; if ( BN_num_bits ( v ) > BN_num_bits ( c ) ) goto err ; if ( BN_num_bits ( u ) > BN_num_bits ( c ) ) goto err ; if ( BN_num_bits ( v ) > BN_num_bits ( c ) ) goto err ; if ( BN_num_bits ( u ) > BN_num_bits ( c ) ) goto err ; if ( BN_num_bits ( v ) > BN_num_bits ( c ) ) goto err ; if ( BN_num_bits ( u ) > BN_num_bits ( c ) ) goto err ; if ( BN_num_bits ( v ) > BN_num_bits ( c ) ) goto err ; if ( BN_num_bits ( u ) > BN_num_bits ( c ) ) goto err ; if ( BN_num_bits ( v ) > BN_num_bits ( c ) ),0
1340,"<S2SV_ModStart> = 256 ; vpx_mse16x16_t <S2SV_ModEnd> vf = vp8_mse16x16 <S2SV_ModStart> vf = vp8_mse16x16 ; xd -> pre. y_buffer = recon_buffer -> y_buffer + recon_yoffset ; tmp_mv. as_int = 0 ; ref_mv_full. as_mv. row = ref_mv -> as_mv. row >> 3 ; ref_mv_full. as_mv. col = ref_mv -> as_mv. col >> 3 ; tmp_err = cpi -> diamond_search_sad ( x, b, d, & ref_mv_full, step_param, x -> sadperbit16, & num00, & v_fn_ptr, x -> mvcost, ref_mv ) ; if ( tmp_err < INT_MAX - new_mv_mode_penalty ) tmp_err += new_mv_mode_penalty ; if ( tmp_err < INT_MAX - new_mv_mode_penalty ) tmp_err += new_mv_mode_penalty ; if ( tmp_err < INT_MAX",0
1341,<S2SV_ModStart> crypto_report_kpp rkpp ; strncpy <S2SV_ModEnd> ( rkpp.,1
1342,"<S2SV_ModStart> = alloc ; size_t strindex = 0 ; size_t length ; CURLcode res ; ns = malloc ( alloc ) ; if (! ns ) return NULL ; length = alloc - 1 ; res = Curl_convert_to_network ( handle, & in, 1 ) ; if ( res ) { free ( ns ) ; return NULL ; } snprintf ( & ns [ strindex ], 4, ""%%%02X"", in ) ; strindex += 3 ; } else { snprintf ( & ns [ strindex ], 4, ""%%%02X"", in ) ; strindex += 3 ; } string ++ ; if ( Curl_isunreserved ( in ) ) ns [ strindex ++ ] = in ; else { newlen += 2 ; if ( newlen > alloc ) { alloc *= 2 ; testing_ptr = realloc ( ns, alloc ) ; if (! testing_ptr ) { free ( ns ) ; return NULL ; } else { ns = testing_ptr ; } } res = Curl_convert_to_network ( handle, & in, 1 ) ; if ( res ) { free ( ns ) ; return NULL ; }",0
1343,"<S2SV_ModStart> int i, nbits ; <S2SV_ModStart> qfalse ; } nbits = 0 ; <S2SV_ModStart> msg -> oob ) { nbits = bits & 7 ; for ( i = 0 ; i < nbits ; i ++ ) { value |= ( Huff_getBit ( msg -> data, & msg -> bit ) << i ) ; } bits = bits & 7 ; if ( msg -> bit & 7 ) { nbits = bits & 7 ; for ( i = 0 ; i < nbits ; i ++ ) { value |= ( Huff_getBit ( msg -> data, & msg -> bit ) ; } bits = bits & 7 ; for ( i = 0 ; i < bits ; i += 8 ) { value |= ( Huff_getBit ( msg -> data, & msg -> bit ) << i ) ; } bits = bits - nbits ; } if ( bits ) { for ( i = 0 ; i < bits ; i += 8 ) { Huff_offsetReceive ( msgHuff. decompressor. tree, & get, msg -> data, & msg -> bit ) ; value |= ( get << ( i + nbits ) ) ; } msg -> readcount = ( msg -> bit >> 3 ) + 1",0
1344,"<S2SV_ModStart> int idx ; struct snd_ctl_elem_id id ; <S2SV_ModStart> count ; for ( idx = 0 ; idx < kcontrol -> count ; idx ++, id. index ++, id. numid ++ ) snd_ctl_notify ( card, SNDRV_CTL_EVENT_MASK_ADD, & id ) ;",0
1345,<S2SV_ModStart> ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; if ( dev -> priv_flags & IFF_TX_SKB_SHARING ) dev -> priv_flags &= ~ IFF_TX_SKB_SHARING ; if ( dev -> priv_flags & IFF_TX_SKB_SHARING ) dev -> priv_flags &= ~ IFF_TXSKB_SHARING ; if ( dev -> priv_flags & IFF_TXSKB_SHARING ) dev -> priv_flags &= ~ IFF_TXSKB_SHARING ; if ( dev -> priv_flags & IFF_TXSKB_SHARING ) dev -> priv_flags &= ~ IFF_TXSKB_SHARING ; if ( dev -> priv_flags & IFF_TXSKB_SHARING ) dev -> priv_flags &= ~ IFF_TXSKB_SHARING ; if ( dev -> priv_flags & IFF_TXSKB_SHARING ) dev -> priv_flags &= ~,0
1346,"<S2SV_ModStart> * data ; size_t <S2SV_ModEnd> size = overhead <S2SV_ModStart> size = overhead ; if ( bson_size ( bsons [ i ] ) > conn -> max_bson_size ) return MONGO_ERROR ; for ( i = 0 ; i < count ; i ++ ) { size += bson_size ( bsons [ i ] ) ; if ( mongo_bson_valid ( conn, bsons [ i ], 1 )!= MONGO_OK ) return MONGO_ERROR ; } mm = mongo_message_create ( size, 0, 0, MONGO_OP_INSERT ) ; if ( flags & MONGO_CONTINUE_ON_ERROR ) { conn -> err = MONGO_BSON_TOO_TOO_LARGE ; return MONGO_ERROR ; } mm = mongo_message_create ( size, 0, 0, 0, MONGO_OP_INSERT ) ; data = & mm -> data ; if ( flags & MONGO_CONTINUE_ON_ERROR ) { return MONGO_ERROR ; } mm = mongo_message_create ( size, 0, 0, 0, MONGO_OP_INSERT ) ;",0
1347,"<S2SV_ModStart> goto ret ; if ( item -> flags & CD_FLAG_TXT ) { strncpy ( item -> content, g_dump_dir_name, sizeof ( g_dump_dir_name ) ) ; strncpy ( item -> content, g_dump_dir_name, sizeof ( g_dump_dir_name ) ) ; } else { strncpy ( item -> content, g_dump_dir_name, sizeof ( g_dump_dir_name ) ) ; if ( item -> flags & CD_FLAG_TXT ) { strncpy ( item -> content, g_dump_dir_name, sizeof ( g_dump_dir_name ) ) ; strncpy ( item -> content, g_dump_dir_name, sizeof ( g_dump_dir_name ) ) ; } else { strncpy ( item -> content, g_dump_dir_name, sizeof ( g_dump_dir_name ) ) ; if ( item -> flags & CD_FLAG_TXT ) { strncpy ( item -> content, g_dump_dir_name, sizeof ( g_dump_dir_name ) ) ; strncpy ( item -> content,",0
1348,<S2SV_ModStart> - 2 ; if ( plen < 2 ) return 1 ;,0
1349,"<S2SV_ModStart> { umode_t mode ; retval = posix_acl_update_mode ( inode, & mode, & acl ) ; if ( retval < 0 ) goto err_out ; retval = posix_acl_update_mode_nolock ( inode, & mode, & acl ) ; if ( retval < 0 ) goto err_out ; <S2SV_ModEnd> iattr. ia_mode <S2SV_ModStart> ia_valid = ATTR_MODE ; <S2SV_ModEnd> v9fs_vfs_setattr_dotl ( dentry <S2SV_ModStart> iattr ) ; } break ; case ACL_TYPE_DEFAULT_ACCESS : if (! S_ISDIR ( inode -> i_mode ) ) { retval = - EINVAL ; goto err_out ; } break ; case ACL_TYPE_RESERVE : if (! S_ISDIR ( inode -> i_mode ) ) { retval = - EINVAL ; goto err_out ; } break ; case ACL_TYPE_RESERVE : if (! S_ISDIR ( inode -> i_mode ) ) { retval = - EINVAL ; goto err_out ; } <S2SV_ModEnd> break ; case",0
1350,"<S2SV_ModStart> ; if ( bin -> header. class_size > UT32_MAX || bin -> header. class_size > UT32_MAX ) { eprintf ( ""Invalid <S2SV_blank> class <S2SV_blank> size\\n"" ) ; return false ; } if ( bin -> header. class_size > UT32_MAX || bin -> header. class_size > UT32_MAX || bin -> header. class_size > UT32_MAX ) { eprintf ( ""Invalid <S2SV_blank> class <S2SV_blank> size\\n"" ) ; return false ; } if ( bin -> header. class_size > UT32_MAX || bin -> header. class_size > UT32_MAX ) { eprintf ( ""Invalid <S2SV_blank> class <S2SV_blank> size\\n"" ) ; return false ; } if ( bin -> header. class_size > UT32_MAX || bin -> header. class_size > UT32_MAX || bin -> header. class_size > UT32_MAX ) { eprintf ( ""Invalid <S2SV_blank> class <S2SV_blank> size\\n"" ) ; return false ; } if ( bin -> header. class_size > UT32_MAX || bin -> header. class_size > UT32_MAX ) { eprintf ( ""Invalid <S2SV_blank> class <S2SV_blank> size",0
1351,<S2SV_ModStart> case NPPVpluginDescriptionString : type = RPC_TYPE_STRING ; break ; case NPPVpluginNameString : type = RPC_TYPE_STRING ; break ; case NPPVpluginDescriptionString : type = RPC_TYPE_STRING ; break ; case NPPVformValue : type = RPC_TYPE_STRING ; break ; case NPPVpluginWindowSize : type = RPC_TYPE_INT32 ; break ; case NPPVpluginTimerInterval : type = RPC_TYPE_INT32 ; break ; case NPPVpluginNeedsXEmbed : type = RPC_TYPE_INT32 ; break ; case NPPVpluginTransparentBool : type = RPC_TYPE_BOOLEAN ; break ; case NPPVjavascriptPushCallerBool : type = RPC_TYPE_BOOLEAN ; break ; case NPPVpluginKeepLibraryInMemory : type = RPC_TYPE_BOOLEAN ; break ; case NPPVpluginScriptableNPObject : type = RPC_TYPE_NP_OBJECT ; break ;,0
1352,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> int <S2SV_ModEnd> nego_process_negotiation_response ( rdpNego <S2SV_ModStart> NEGO_STATE_FAIL ; return - 1 <S2SV_ModEnd> ; } UINT16 <S2SV_ModStart> = NEGO_STATE_FINAL ; return 0 <S2SV_ModEnd> ; } <S2SV_null>,0
1353,"<S2SV_ModStart> int i, target_bits_per_mb ; const double correction_factor = get_rate_correction_factor ( cpi ) ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; target_bits_per_mb = ( ( uint64_t ) target_bits_per_frame << BPER_MB_NORMBITS ) / cm -> MBs ; i = active_best_quality ; do { const int bits_per_mb_at_this_q = ( int ) vp9_rc_bits_per_mb ( cm -> frame_type, i, correction_factor ) ; if ( bits_per_mb_at_this_q <= target_bits_per_mb ) { if ( bits_per_mb_at_this_q <= target_bits_per_mb ) { last_error = bits_per_mb_at_this_q - target_bits_per_mb ; break ; } else { last_error = bits_per_mb_at_this_q - target_bits_per_",0
1354,"<S2SV_ModStart> |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ ; tja1101WritePhyReg ( interface, TJA1101_CONFIG1, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_EXTENDED_CTRL ) ; value |= TJA1101_EXTENDED_CTRL_CONFIG_EN ; tja1101WritePhyReg ( interface, TJA1101_EXTENDED_CTRL, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_CONFIG1 ) ; value &= ~ TJA1101_CONFIG1_MII_MODE ; value |= TJA1101_CONFIG1_MII_MODE_RMII_25MHZ ; tja1101WritePhyReg ( interface, TJA1101_CONFIG1, value ) ; value = tja1101ReadPhyReg ( interface, TJA1101_COMM_CTRL ) ; value |= TJA1101_COMM_CTRL_AUTO_OP ; tja1101Write",0
1355,<S2SV_ModStart> crypto_report_cipher rcipher ; strncpy <S2SV_ModEnd> ( rcipher.,1
1356,"<S2SV_ModStart> data ) { if (! atomic_dec_and_test ( & c -> object. refcount ) ) mark_object ( & c -> object, NULL, NULL, data ) ; else if ( atomic_dec_and_test ( & c -> object. refcount ) ) mark_object ( & c -> object, NULL, NULL, data ) ; else if (! atomic_dec_and_test ( & c -> object. refcount ) ) mark_object ( & c -> object, NULL, NULL, data ) ; else if (! atomic_dec_and_test ( & c -> object. refcount ) ) mark_object ( & c -> object, NULL, NULL, data ) ; else if ( atomic_dec_and_test ( & c -> object. refcount ) ) mark_object ( & c -> object, NULL, NULL, data ) ; else if (! atomic_dec_and_test ( & c -> object. refcount ) ) mark_object ( & c -> object, NULL, NULL, data ) ; else if (! atomic_dec_and_test ( & c -> object. refcount ) ) mark_object ( & c -> object, NULL",0
1357,<S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ; if ( <S2SV_ModEnd> TYPE ( CHILD <S2SV_ModStart> ;,0
1358,"<S2SV_ModStart> TX_SIZE tx_size, PREDICTION_MODE <S2SV_ModEnd> mode, int <S2SV_ModStart> int i ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> uint8_t, left_col, 64 ) ; DECLARE_ALIGNED <S2SV_ModEnd> ( 16, <S2SV_ModStart> uint8_t, above_data, 128 + 16 ) ; uint8_t * above_row = above_data + 16 ; const int bs = 4 << tx_size ; if ( plane == 0 ) { frame_width = xd -> cur_buf -> y_width ; frame_height = xd -> cur_buf -> y_height ; } else { frame_width = xd -> cur_buf -> uv_width ; frame_height = xd -> cur_buf -> uv_height ; } for ( i = 0 ; i < bs ; ++ i ) left_col [ i ] = ref [ i * ref_stride - 1 ] ; for ( i = 0 ; i < bs ; ++ i ) left_col [ i ] = ref [ i * ref_stride - 1 ] ; for ( i = 0 ; i < bs ; ++ i ) left_col [ i ] = ref [ i * ref_stride - 1 ] ;",0
1359,"<S2SV_ModStart> } end ++ ; if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> NULL <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> NULL <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> NULL <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> NULL <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> NULL <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> NULL <S2SV_blank> pattern\\n"" ) ; goto error ; } if ( current == end ) { xsltTransformError ( NULL, NULL, node, ""xsltCompilePattern <S2SV_blank> : <S2SV_blank> NULL <S2SV_blank>",0
1360,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> jas_iccprof_t <S2SV_ModEnd> * jas_iccprof_createfrombuf (,0
1361,<S2SV_ModStart> i_completed_io_list ) ; spin_lock_init ( & ei -> i_completed_io_lock ) ; <S2SV_ModStart> cur_aio_dio = NULL ; ei -> i_sync_tid = 0 ; ei -> i_datasync_tid = 0 ; return & ei -> vfs_inode ; },0
1362,"<S2SV_ModStart> (! thresholds ) ; usage = mem_cgroup_usage ( memcg, type == _MEM ) ; __mem_cgroup_threshold ( memcg, type == _MEM ) ; __mem_cgroup_threshold ( memcg, type == _MEMSWAP ) ; size = 0 ; for ( i = 0 ; i < thresholds -> primary -> size ; i ++ ) { if ( thresholds -> primary -> entries [ i ]. eventfd!= eventfd ) size ++ ; } new = thresholds -> spare ; if (! size ) { kfree ( new ) ; new = NULL ; goto swap_buffers ; } new = thresholds -> spare ; if (! size ) { kfree ( new ) ; new = NULL ; goto swap_buffers ; } new = thresholds -> spare ; if (! size ) { kfree ( new ) ; new = NULL ; goto swap_buffers ; } new -> size = size ; new -> current_threshold = - 1 ; for ( i = 0, j = 0 ; i < thresholds -> primary -> size ; i ++ ) { if ( new -> entries [ j ]. threshold < usage ) { ++ new -> current_threshold ; } j ++ ; }",0
1363,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> <S2SV_ModEnd> struct ion_handle * <S2SV_ModStart> lock ) ; <S2SV_ModEnd> handle = idr_find,0
1364,"<S2SV_ModStart> cpi, struct vpx_write_bit_buffer <S2SV_ModEnd> * wb ) <S2SV_ModStart> common ; vpx_wb_write_literal ( wb, VP9_FRAME_MARKER, 2 ) ; write_profile ( cm -> profile, wb ) ; vpx_wb_write_bit ( wb, cm -> frame_type ) ; vpx_wb_write_bit ( wb, cm -> show_frame ) ; vpx_wb_write_bit ( wb, cm -> error_resilient_mode ) ; if ( cm -> frame_type == KEY_FRAME ) { const COLOR_SPACE cs = UNKNOWN ; write_sync_code ( wb ) ; if ( cm -> profile > PROFILE_1 ) { assert ( cm -> bit_depth > BITS_8 ) ; vp9_wb_write_bit ( wb, cm -> bit_depth - BITS_10 ) ; } else { const COLOR_SPACE cs = UNKNOWN ; write_sync_code ( wb ) ; if ( cm -> profile > PROFILE_1 ) { assert ( cm -> bit_depth > BITS_8 ) ; vp9_wb_write_bit ( wb, cm -> bit_depth - B",0
1365,"<S2SV_ModStart> long long_tmp ; memset ( col_nam, 0, sizeof ( col_nam ) ) ; <S2SV_ModStart> long long_tmp ; memset ( col_nam, 0, sizeof ( col_nam ) ) ; <S2SV_ModStart> long long_tmp ; memset ( col_nam, 0, sizeof ( col_nam ) ) ; <S2SV_ModStart> long long_tmp ; memset ( col_nam, 0, sizeof ( col_nam ) ) ; memset ( col_nam, 0, sizeof ( col_nam ) ) ; memset ( col_nam, 0, sizeof ( col_nam ) ) ; <S2SV_ModStart> long long_tmp ; memset ( col_nam, 0, sizeof ( col_nam ) ) ; memset ( col_nam, 0, sizeof ( col_nam ) ) ; memset ( col_nam, 0, sizeof ( col_nam ) ) ; memset ( col_nam, 0, sizeof ( col_nam ) ) ; memset ( col_nam, 0, sizeof ( col_nam ) ) ; memset ( col_nam, 0, sizeof ( col_nam ) ) ; memset ( col_nam, 0, sizeof ( col_nam ) ) ; memset (",0
1366,"<S2SV_ModStart> ; p = osStrchr <S2SV_ModEnd> ( context -> <S2SV_ModStart>'<S2SV_blank>') ; if ( p == NULL ) return ERROR_INVALID_SYNTAX ; p = osStrpbrk ( p + 1, "" <S2SV_blank>?"" ) ; if ( p == NULL ) return ERROR_INVALID_SYNTAX ; p = osStrpbrk ( p + 1, "" <S2SV_blank>?"" ) ; if ( p == NULL ) return ERROR_INVALID_SYNTAX ; p = osStrpbrk ( p + 1, "" <S2SV_blank> "" ) ; if ( p == NULL ) return ERROR_INVALID_SYNTAX ; p = osStrpbrk ( p + 1, "" <S2SV_blank>?"" ) ; if ( p == NULL ) return ERROR_INVALID_SYNTAX ; if ( * p == '?' ) { q = osStrchr ( p + 1,'<S2SV_blank>') ; if ( q == NULL ) return ERROR_INVALID_SYNTAX ; m = q - p ; } else { q = p ; m = 0 ; } n = osStrlen ( queryString ) ; if ( n == 0 ) { n ++ ; if ( ( context -> bufferLen + n - m ) > HTTP_CLIENT_BUFFER_SIZE ) return ERROR_BUFFER",0
1367,"<S2SV_ModStart> ; if ( i + 1 < NCH ( n ) && TYPE ( CHILD ( n, i + 1 ) ) == COMMA ) i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case DOUBLESTAR : if ( i + 1 < NCH ( n ) && TYPE ( CHILD ( n, i + 1 ) ) == COMMA ) i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto error ; i += 1 ; break ; case TYPE_COMMENT : arg -> type_comment = NEW_TYPE_COMMENT ( ch ) ; if (! arg -> type_comment ) goto",0
1368,"<S2SV_ModStart> KEY_FRAME ) { memcpy <S2SV_ModEnd> ( pc -> <S2SV_ModStart> pc ) ; memset <S2SV_ModEnd> ( xd -> <S2SV_ModStart> segment_feature_data, 0, sizeof ( xd -> segment_feature_data ) ) ; memset ( xd -> ref_lf_deltas, 0, sizeof ( xd -> ref_lf_deltas ) ) ; memset ( xd -> mode_lf_deltas, 0, sizeof ( xd -> mode_lf_deltas ) ) ; pc -> refresh_golden_frame = 1 ; pc -> refresh_alt_ref_frame = 1 ; pc -> copy_buffer_to_gf = 0 ; pc -> copy_buffer_to_arf = 0 ; pc -> copy_buffer_to_gf = 0 ; pc -> copy_buffer_to_arf = 0 ; pc -> copy_buffer_to_gf = 0 ; pc -> copy_buffer_to_arf = 0 ; pc -> copy_buffer_to_gf = 0 ; pc -> copy_buffer_to_arf = 0 ; pc -> copy_buffer_to_gf = 0 ; pc -> copy_buffer_to_arf = 0 ; pc ->",0
1369,"<S2SV_ModStart> error ; uint16_t nextPacket <S2SV_ModEnd> ; uint32_t status <S2SV_ModStart> ( interface, ENC624J600_ESTAT <S2SV_ModEnd> ) & ESTAT_PKTCNT <S2SV_ModStart> ( interface, ENC624J600_ESTAT <S2SV_ModEnd> ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModStart> ( interface, ENC624J600_ESTAT <S2SV_ModEnd> ) & ENC624J600_ESTAT_PKTCNT <S2SV_ModStart> ( interface, ENC624J600_ERXRDPT, context -> nextPacket ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & n, sizeof ( uint16_t ) ) ; n = letoh16 ( n ) ; enc624j600ReadBuffer ( interface, ENC624J600_CMD_RRXDATA, ( uint8_t * ) & status, sizeof ( uint32_t ) ) ; status = letoh32 ( status ) ; if ( ( status & RSV_RECEIVED_OK )!= 0 ) { n = MIN ( n, ETH_MAX_FRAME_SIZE ) ; enc",0
1370,"<S2SV_ModStart> = 2 ; if ( objlen < 1 || objlen > GEMSAFE_MAX_OBJLEN ) { sc_log ( card -> ctx, ""Invalid <S2SV_blank> object <S2SV_blank> size: <S2SV_blank> %"" SC_FORMAT_LEN_T ""u"", objlen ) ; return SC_ERROR_INTERNAL ; } <S2SV_ModStart> 0x01 ) { if ( objlen < 1 || objlen > GEMSAFE_MAX_OBJLEN ) { sc_log ( card -> ctx, ""Invalid <S2SV_blank> object <S2SV_blank> size: <S2SV_blank> %"" SC_FORMAT_LEN_T ""u"", objlen ) ; return SC_ERROR_INTERNAL ; } <S2SV_ModStart> 0xFE ) { if ( objlen < 1 || objlen > GEMSAFE_MAX_OBJLEN ) { sc_log ( card -> ctx, ""Invalid <S2SV_blank> object <S2SV_blank> size: <S2SV_blank> %"" SC_FORMAT_LEN_T ""u"", objlen ) ; return SC_ERROR_INTERNAL ; } <S2SV_ModStart> 0xFE ) { if ( objlen < 1 || objlen > GEMSAFE_MAX_OBJLEN ) { sc_log ( card -> ctx, ""Invalid <S2SV_blank> object <S2SV_blank> size: <S2SV_blank> %"" SC_FORMAT_LEN_T ""u"", objlen ) ;",0
1371,"<S2SV_ModStart> ; if ( kvm_set_msr <S2SV_ModEnd> ( vcpu,",1
1372,"<S2SV_ModStart> VALUE read_memory ( int argc, VALUE klass, VALUE content ) { VALUE rb_schema ; VALUE errors = rb_ary_new ( ) ; xmlSchemaPtr schema ; xmlSchemaParserCtxtPtr ctx = xmlSchemaNewMemParserCtxt ( argc, ( int ) RSTRING_LEN ( content ) ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_pusher ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_poper ) ; if ( NULL == schema ) { xmlErrorPtr error = xmlGetLastError ( ) ; if ( error ) Nokogiri_error_raise ( NULL, error ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_poper ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_poper ) ; xmlSetStructuredErrorFunc ( ( void * ) errors, Nokogiri_error_array_poper ) ;",0
1373,"<S2SV_ModStart> vma ) { <S2SV_ModEnd> struct au1200fb_device * <S2SV_ModStart> struct au1200fb_device * fbdev = info -> par ; unsigned long start <S2SV_ModEnd> ; unsigned long <S2SV_ModStart>, off ; if ( fbdev -> fb_phys & ~ PAGE_MASK ) { return - EINVAL ; } start = fbdev -> fb_phys & PAGE_MASK ; len = PAGE_ALIGN ( ( start & ~ PAGE_MASK ) + fbdev -> fb_len ) >> PAGE_SHIFT ; vma -> vm_pgoff = PAGE_ALIGN ( ( start & ~ PAGE_MASK ) + fbdev -> fb_len ) >> PAGE_SHIFT ; vma -> vm_end - vma -> vm_start + off ) > len ) { return - EINVAL ; } vma -> vm_pgoff = off >> PAGE_SHIFT ; vma -> vm_page_prot = pgprot_noncached ( vma -> vm_page_prot ) ; return io_remap_pfn_range ( vma, vma -> vm_start, off >> PAGE_SHIFT, vma -> vm_end - vma -> vm_start, vma -> vm_page_prot )",0
1374,"<S2SV_ModStart> { if ( strlen ( errstr ) < 3 ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> number"" ) ; print_syntax ( ) ; return 1 ; } errstr = strerror ( errstr, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> number"" ) ; if ( errstr ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> number"" ) ; print_syntax ( ) ; return 1 ; } errstr = strerror ( errstr, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> number"" ) ; if ( errstr ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> number"" ) ; print_syntax ( ) ; return 1 ; } errstr = strerror ( errstr, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> number"" ) ; if ( errstr ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> number"" ) ; print_syntax ( ) ; return 1 ; } errstr = strerror ( errstr, ""Invalid <S2SV_blank> configuration <S2SV_blank> file <S2SV_blank> descriptor <S2SV_blank> number"" ) ; if ( errstr ) { s_log ( LOG_ERR, ""Invalid <S2SV_blank> configuration <S2SV_blank> descriptor <S2SV_blank> number"" )",0
1375,<S2SV_ModStart> / 2 ] ; out [ 3 <S2SV_ModEnd> ] = ptr <S2SV_ModStart> / 2 ] ; out [ 4 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; out [ 5 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; out [ 7 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; out [ 8 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; out [ 9 ] = ptr [ ( x + 5 * state -> xsize ) / 2 ] ; out [ 10 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; out [ 11 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; out [ 12 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; out [ 13 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; out [ 10 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; out [ 12 ] = ptr [ ( x + 4 * state -> xsize ) / 2 ] ; out [ 12 ] = ptr,0
1376,"<S2SV_ModStart> ( event, <S2SV_ModEnd> & data,",1
1377,"<S2SV_ModStart> 1 ) ; ret = - EINVAL ; if ( ret < 0 ) { cd_dbg ( CD_DO_IOCTL, ""skipping <S2SV_blank> CDROM_MEDIA_CHANGED\\n"" ) ; return ret ; } if ( ret < 0 ) { cd_dbg ( CD_DO_IOCTL, ""skipping <S2SV_blank> CDROM_MEDIA_CHANGED\\n"" ) ; return ret ; } info = kmalloc ( sizeof ( * info ), GFP_KERNEL ) ; if (! info ) return - ENOMEM ; ret = cdrom_read_mech_status ( cdi, info ) ; if ( ret < 0 ) { cd_dbg ( CD_DO_IOCTL, ""skipping <S2SV_blank> CDROM_MEDIA_CHANGED\\n"" ) ; return ret ; } ret = <S2SV_ModEnd> cdrom_read_mech_status ( cdi",0
1378,<S2SV_ModStart> fanout_mutex ) ; if ( type == PACKET_FANOUT_HASH || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_RND || type == PACKET_FANOUT_QM || type == PACKET_FANOUT_EBPF ) { err = - EINVAL ; goto out ; } if ( type == PACKET_FANOUT_HASH || type == PACKET_FANOUT_LB || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET_FANOUT_CPU || type == PACKET,0
1379,<S2SV_ModStart> ; if ( handle -> event ) { <S2SV_ModStart> pending ) ; handle -> event -> pending_wakeup = 1 ; perf_event_wakeup ( handle -> event ) ; } else <S2SV_ModEnd> perf_event_wakeup ( handle,0
1380,"<S2SV_ModStart> int utf8s_to_utf16s ( const u8 * s, int len, wchar_t * pwcs ) { if ( len < 2 ) return - EINVAL ; if ( len < 2 ) return - EINVAL ; if ( * s & 0x80 ) { size = utf8_to_utf32 ( s, len, & u ) ; if ( size < 0 ) return - EINVAL ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( ( u >> 10 ) & SURROGATE_BITS ) ) ; * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( u & SURROGATE_BITS ) ) ; } else { * op ++ = ( wchar_t ) ( SURROGATE_PAIR | SURROGATE_LOW | ( u & SURROGATE_BITS",0
1381,"<S2SV_ModStart> { int v, <S2SV_ModEnd> i ; if <S2SV_ModStart> == PNG_COLOR_TYPE_RGB && ( s -> state & PNG_PLTE ) ) return AVERROR_INVALIDDATA ; for ( i = 0 ; i < length / 2 ; i ++ ) { v = av_mod_uintp2 ( bytestream2_get_be16 ( & s -> gb ), s -> bit_depth ) ; if ( s -> bit_depth > 8 ) av_WB16 ( & s -> transparent_color_be [ 2 * i ], v ) ; else s -> transparent_color_be [ 2 * i ] = v ; } } else if ( s -> color_type == PNG_COLOR_TYPE_GRAY ) { if ( s -> state & PNG_PLTE ) return AVERROR_INVALIDDATA ; for ( i = 0 ; i < length / 2 ; i ++ ) { v = av_mod_uintp2 ( bytestream2_get_be16 ( & s -> gb ), s -> bit_depth ) ; if ( s -> bit_depth > 8 ) av_WB16 ( & s -> transparent_color_be [ 2 * i ]",0
1382,"<S2SV_ModStart> EPROTONOSUPPORT ) { <S2SV_ModEnd> print_as ( ""Notification <S2SV_blank> setup <S2SV_blank> failed, <S2SV_blank> won\'t <S2SV_blank> be <S2SV_blank> able <S2SV_blank> to <S2SV_blank> reconnect <S2SV_blank> after <S2SV_blank> failure""",0
1383,<S2SV_ModStart> = AF_INET6 ; } if ( PKT_IS_IPV4 ( p ) ) { dt -> id = ( int32_t ) IPV4_EXTHDR_GET_FH_ID ( p ) ; dt -> af = AF_INET ; } else if ( PKT_IS_IPV6 ( p ) ) { dt -> id = ( int32_t ) IPV6_EXTHDR_GET_FH_ID ( p ) ; dt -> af = AF_INET6 ; } if ( PKT_IS_IPV4 ( p ) ) { dt -> id = ( int32_t ) IPV4_EXTHDR_GET_IPID ( p ) ; dt -> af = AF_INET ; } else if ( PKT_IS_IPV6 ( p ) ) { dt -> id = ( int32_t ) IPV6_EXTHDR_GET_FH_ID ( p ) ; dt -> policy = DefragGetOsPolicy ( p ) ; dt -> host_timeout = DefragPolicyGetHostTimeout ( p ) ; dt -> remove = 0 ; dt -> host_timeout = DefragPolicyGetHostTimeout ( p ) ; dt -> remove,0
1384,"<S2SV_ModStart> nicContext ; status = ksz8851ReadReg ( interface, KSZ8851_RXFHSR ) ; if ( ( status & ( RXFHSR_RXFV | RXFHSR_RXFV_RXFV ) )!= 0 ) { if ( ( status & ( RXFHSR_RXMR | RXFHSR_RXFTL | RXFHSR_RXRF | RXFHSR_RXCE ) )!= 0 ) { if ( ( status & ( RXFHSR_RXMR | RXFHSR_RXFTL | RXFHSR_RXRF | RXFHSR_RXCE ) ) == 0 ) { if ( ( status & ( RXFHSR_RXMR | RXFHSR_RXFTL | RXFHSR_RXRF | RXFHSR_RXCE ) ) == 0 ) { if ( ( status & ( RXFHSR_RXMR | RXFHSR_RXFTL | RXFHSR_RXRF",0
1385,"<S2SV_ModStart> const node * <S2SV_ModEnd> n, asdl_seq <S2SV_ModStart> int is_async ) { identifier name ; arguments_ty args ; expr_ty returns = NULL ; if ( forbidden_name ( c, name, CHILD ( n, name_i + 1 ), 0 ) ) return NULL ; if ( TYPE ( CHILD ( n, name_i + 2 ) ) == RARROW ) { returns = ast_for_expr ( c, CHILD ( n, name_i + 2 ) ) ; if (! returns ) return NULL ; name_i += 2 ; } if ( TYPE ( CHILD ( n, name_i + 3 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 3 ) ) ; name_i += 1 ; } if ( TYPE ( CHILD ( n, name_i + 4 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CHILD ( n, name_i + 4 ) ) ; name_i += 4 ; if ( TYPE ( CHILD ( n, name_i + 5 ) ) == TYPE_COMMENT ) type_comment = NEW_TYPE_COMMENT ( CH",0
1386,"<S2SV_ModStart> int i ; if ( mm_none_or_clear_bad ( mm ) ) goto out ; pgd = pgd_offset ( mm, 0x0000 ) ; if ( pgd_none_or_clear_bad ( pgd ) ) goto out ; pud = pud_offset ( pud, 0xA0000 ) ; if ( pud_none_or_clear_bad ( pud ) ) goto out ; pmd = pmd_offset ( pud, 0xA0000 ) ; if ( pmd_none_or_clear_bad ( pmd ) ) goto out ; pte = pte_offset_map_lock ( mm, pmd, 0xA0000, & ptl ) ; for ( i = 0 ; i < 32 ; i ++ ) { if ( pte_present ( * pte ) ) set_pte ( pte, pte_wrprotect ( * pte ) ) set_pte ( pte, pte_wrprotect ( * pte ) ; pte ++ ; } pte_unmap_unlock ( pte, ptl ) ; out :",0
1387,"<S2SV_ModStart> ; return aa_audit ( AUDIT_APPARMOR_DENIED, & sa, NULL ) ; } if ( strcmp ( name, ""current"" ) == 0 ) { error = aa_setprocattr_current ( args, arg_size,! AA_ONEXEC ) ; } else if ( strcmp ( name, ""current"" ) == 0 ) { error = aa_setprocattr_current ( args, arg_size,! AA_DO_TEST ) ; } else if ( strcmp ( name, ""current"" ) == 0 ) { error = aa_setprocattr_current ( args, arg_size,! AA_ONEXEC ) ; } else if ( strcmp ( name, ""permhat"" ) == 0 ) { error = aa_setprocattr_changehat ( args, arg_size,! AA_DO_TEST ) ; } else if ( strcmp ( name, ""permipc"" ) == 0 ) { error = aa_setprocattr_permipc ( args,! AA_ONEXEC ) ; } else if ( strcmp ( name, ""current"" ) == 0 ) { error = aa_setprocattr_current ( args, arg_size",0
1388,"<S2SV_ModStart> uint_fast8_t tmp ; if (! siz -> caps ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> tilexoff >= siz -> width || siz -> tileyoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> xoff >= siz -> width || siz -> yoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> xoff >= siz -> width || siz -> yoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area\\n"" ) ; return - 1 ; } if ( siz -> yoff >= siz -> height ) { jas_eprintf ( ""all <S2SV_blank> tiles <S2SV_blank> are <S2SV_blank> outside <S2SV_blank> the <S2SV_blank> image <S2SV_blank> area",0
1389,"<S2SV_ModStart> return - 1 ; } if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_data_start_ptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_data_start_ptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank> overflow <S2SV_blank>!"" ) ; return - 1 ; } if ( sn_coap_parser_check_packet_ptr ( * packet_data_pptr, packet_data_start_ptr, packet_len, dst_coap_msg_ptr -> token_len ) ) { tr_error ( ""sn_coap_parser_options_parse <S2SV_blank> - <S2SV_blank> **packet_data_pptr <S2SV_blank>",0
1390,"<S2SV_ModStart> xmi_tmpdata |= * xmi_data ++ << 24 ; xmi_tmpdata |= * xmi_data ++ << 16 ; xmi_tmpdata |= * xmi_data ++ << 8 ; xmi_tmpdata |= * xmi_data ++ ; xmi_size -= 4 ; if ( memcmp ( xmi_data, ""XDIRINFO"", 4 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_XMI, NULL, 0 ) ; return NULL ; } xmi_data += 4 ; xmi_size -= 4 ; xmi_tmpdata = * xmi_data ++ << 24 ; xmi_tmpdata |= * xmi_data ++ << 16 ; xmi_tmpdata |= * xmi_data ++ << 8 ; xmi_tmpdata |= * xmi_data ++ ; xmi_tmpdata |= * xmi_data ++ ; xmi_size -= 4 ; if ( memcmp ( xmi_data, ""XDIRINFO"", 8 ) ) { _WM_GLOBAL_ERROR ( __FUNCTION__, __LINE__, WM_ERR_NOT_",0
1391,"<S2SV_ModStart> ; size_t total_len ; if ( unlikely ( total_len > iov_len ( iov, nr_segs ) ) ) return - EINVAL <S2SV_ModEnd> ; do_wakeup = <S2SV_ModStart>, nr_segs ) ; if ( unlikely ( total_len > iov_len ( iov, nr_segs ) ) ) return - EINVAL <S2SV_ModEnd> ; ret = <S2SV_ModStart> ; size_t chars = iov_length ( iov, nr_segs ) ; if ( unlikely ( chars > total_len ) ) chars = total_len ; error = pipe_iov_copy_to_user ( iov, addr + buf -> offset, chars, atomic ) ; if ( unlikely ( error ) ) { if (! ret ) ret = error ; break ; } ret = pipe_iov_copy_to_user ( iov, addr + buf -> offset, chars, atomic ) ; if (! ret ) ret = error ; break ; } ret += chars ; buf -> offset += chars ; buf -> len -= chars ; if ( buf -> flags & PIPE_BUF_FLAG_PACKET ) { buf -> ops = NULL ; ops -> release ( pipe,",0
1392,"<S2SV_ModStart> ( code ) \\\n{ <S2SV_ModEnd> if ( bits <S2SV_ModStart> if ( bits >= 8 ) { packet [ length ++ ] = ( unsigned char ) ( datum & 0xff ) ; if ( length >= 254 ) { ( void ) WriteBlobByte ( image, length ) ; ( void ) WriteBlobByte ( image, length ) ; ( void ) WriteBlob ( image, length ) ; ( void ) WriteBlobByte ( image, length ) ; ( void ) WriteBlob ( image, length ) ; length = 0 ; } else { packet [ length ++ ] = ( unsigned char ) ( datum & 0xff ) ; if ( length >= 254 ) { ( void ) WriteBlobByte ( image, length ) ; ( void ) WriteBlobByte ( image, length ) ; ( void ) WriteBlob ( image, length ) ; ( void ) WriteBlob ( image, length ) ; ( void ) WriteBlob ( image, length ) ; ( void ) WriteBlobByte ( image, length ) ; ( void ) WriteBlob ( image, length ) ; length = 0 ; }",0
1393,<S2SV_ModStart> ( ) ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,1
1394,"<S2SV_ModStart> argv [ ] ) { p_fm_config_conx_hdlt hdl ; <S2SV_ModStart> res ) ; if ( res!= FM_CONF_OK ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> initialize <S2SV_blank> the <S2SV_blank> client <S2SV_blank> handle: <S2SV_blank> %d\\n"", res ) ; goto die_clean ; } if ( ( res = fm_mgr_config_init ( & hdl, instance, rem_addr, community ) )!= FM_CONF_OK ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> initialize <S2SV_blank> the <S2SV_blank> client <S2SV_blank> handle: <S2SV_blank> %d\\n"", res ) ; goto die_clean ; } if ( ( res = fm_mgr_config_connect ( hdl ) )!= FM_CONF_OK ) { fprintf ( stderr, ""Failed <S2SV_blank> to <S2SV_blank> connect: <S2SV_blank> (%d) <S2SV_blank> %s\\n"", res, fm_mgr_get_error_str ( res ) ) ; goto die_clean ; } if ( strcmp ( command, commandList [ i ]. name ) == 0 ) { return commandList [ i ]. cmdPtr ( hdl, commandList [ i ]. mgr, ( argc - opt",0
1395,"<S2SV_ModStart> ; if (! jas_safe_init ( ) ) { abort ( ) ; } cmdname = argv [ 0 ] ; infile = 0 ; verbose = 0 ; debug = 0 ; # if defined ( JAS_DEFAULT_MAX_MEM_USAGE ) max_mem = JAS_DEFAULT_MAX_MEM_USAGE ; # endif while ( ( id = jas_getopt ( argc, argv, opts ) ) >= 0 ) { switch ( id ) { case OPT_INFILE : infile = jas_optarg ; break ; case OPT_MAXMEM : max_mem = strtoull ( jas_optarg, 0, 10 ) ; break ; case OPT_HELP : usage ( ) ; break ; case OPT_INFILE : infile = jas_optarg ; break ; case OPT_MAXMEM : max_mem = strtoull ( jas_optarg, 0, 10 ) ; break ; case OPT_MAXMEM : max_mem = strtoull ( jas_optarg, 0, 10 ) ; break ; case OPT_MAXMEM : max_mem = strtoull ( jas_optarg, 0, 10 ) ; break ; case OPT_",0
1396,<S2SV_ModStart> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
1397,<S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif <S2SV_ModStart> 4 ) ; # ifdef LIBRAW_LIBRARY_BUILD for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD for ( col = 0 ; col < raw_width ; col ++ ) { # ifdef LIBRAW_LIBRARY_BUILD for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { # ifdef LIBRAW_LIBRARY_BUILD for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD for ( col = 0 ; col < raw_width ; col ++ ) { # ifdef LIBRAW_LIBRARY_BUILD for ( row = 0 ; row < height ; row ++ ) { # ifdef LIBRAW_LIBRARY_BUILD checkCancel ( ) ; # endif for ( col = 0 ; col < raw_width ; col ++ ) { # ifdef LIBRAW_LIBRARY_BUILD for ( row = 0,0
1398,<S2SV_ModStart> < needed ) { struct dm_bdev * bdev = hc -> bdev ; <S2SV_ModStart> len < needed || bdev -> bd_dev -> bd_dev -> bd_dev -> bd_dev -> bd_dev -> bd_dev -> bd_dev -> bd_dev -> bd_dev -> bd_dev!= bdev -> bd_dev -> bd_dev || bdev -> bd_dev -> bd_dev -> bd_dev -> bd_dev -> bd_dev -> bd_dev -> bd_dev -> bd_dev -> bd_dev -> bd_dev -> bd_dev -> bd_dev -> bd_dev -> bd_dev -> bd_dev -> bd_dev -> bd_dev!= bdev -> bd_dev -> bd_dev && bdev -> bd_dev -> bd_dev -> bd_dev -> bd_dev!= bdev -> bd_dev -> bd_dev || bdev -> bd_dev -> bd_dev -> bd_dev -> bd_dev -> bd_dev -> bd_dev -> bd_dev -> bd_dev_id!= bdev -> bd_dev_id || bdev -> bd_dev -> bd_dev -> bd_dev -> bd_dev,0
1399,<S2SV_ModStart> case MagickFalse : quantum_info = ( QuantumInfo * ) NULL ; <S2SV_ModStart> case MagickFalse : quantum_info = ( QuantumInfo * ) NULL ; break ; case MagickQuantumInfo : quantum_info = ( QuantumInfo * ) NULL ; break ; case MagickQuantumInfo : quantum_info = ( QuantumInfo * ) NULL ; break ; case MagickQuantumInfo : quantum_info = ( QuantumInfo * ) NULL ; break ; case MagickQuantumInfo : quantum_info = ( QuantumInfo * ) NULL ; break ; case MagickQuantumInfo : quantum_info = ( QuantumInfo * ) NULL ; break ; case MagickQuantumInfo : quantum_info = ( QuantumInfo * ) NULL ; break ; case MagickQuantumInfo : quantum_info = ( QuantumInfo * ) NULL ; break ; case MagickQuantumInfo : quantum_info = ( QuantumInfo * ) NULL ; break ; case MagickQuantumInfo : quantum_info = ( QuantumInfo * ) NULL ; break ; case MagickQuantum,0
1400,"<S2SV_ModStart> vcpu_data vcpu_info ; <S2SV_ModEnd> idx = srcu_read_lock <S2SV_ModStart> irq_srcu ) ; <S2SV_ModEnd> hlist_for_each_entry ( e <S2SV_ModStart> irq_rt -> map [ guest_irq ], link ) { if ( e -> type!= KVM_IRQ_ROUTING_MSI ) continue ; kvm_set_msi_irq ( kvm, e, & irq ) ; if (! hlist_for_each_entry ( e, & irq_rt -> map [ guest_irq ], link ) { if ( e -> type!= KVM_IRQ_ROUTING_MSI ) continue ; kvm_set_msi_irq ( kvm, e, & irq ) ; if (! kvm_intr_is_single_vcpu ( kvm, & irq, & vcpu ) ) { ret = irq_set_vcpu_affinity ( host_irq, NULL ) ; if ( ret < 0 ) { printk ( KERN_INFO ""failed <S2SV_blank> to <S2SV_blank> back <S2SV_blank> to <S2SV_blank> remapped <S2SV_blank> mode, <S2SV_blank> irq: <S2SV_blank>",0
1401,<S2SV_ModStart> bfqq ) bfq_idle_slice_timer_body <S2SV_ModEnd> ( bfqq ),0
1402,"<S2SV_ModStart> } else { if ( rold -> umin_value == 0 && rold -> umax_value == 0 && rold -> smin_value == U64_MIN && rold -> smax_value == U64_MAX && rold -> smin_value == S64_MIN && rold -> smax_value == S64_MAX && tnum_is_unknown ( rold -> var_off ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) == 0 && range_within ( rold, rcur ) ) return false ; if ( memcmp ( rold, rcur, offsetof ( struct bpf_reg_state, id ) ) ) ) return",0
1403,<S2SV_ModStart> handle ) return NULL <S2SV_ModEnd> ; pointer =,0
1404,<S2SV_ModStart> += PRIMARY_DRAWING_ORDER_FIELD_BYTES [ <S2SV_ModEnd> orderInfo -> orderType,0
1405,<S2SV_ModStart> out ; } if ( OVL_TYPE_UPPER ( old_type ) &&! OVL_TYPE_UPPER ( new_type ) ) { if ( ovl_dentry_lower ( old ) -> d_inode == ovl_dentry_lower ( new ) -> d_inode ) { if ( ovl_dentry_lower ( new ) -> d_inode == ovl_dentry_lower ( old ) -> d_inode ) goto out ; } } if ( OVL_TYPE_UPPER ( new_type ) && OVL_TYPE_UPPER ( old_type ) ) { if ( ovl_dentry_lower ( old ) -> d_inode == ovl_dentry_lower ( new ) -> d_inode ) { if ( ovl_dentry_lower ( new ) -> d_inode == ovl_dentry_lower ( old ) -> d_inode ) goto out ; } if ( OVL_TYPE_UPPER ( new_type ) && OVL_TYPE_UPPER ( old_type ) ) { if ( ovl_dentry_lower ( old ) -> d_,0
1406,"<S2SV_ModStart> ; if ( mem_start_stk [ i ] > mem_end_stk [ i ] ) { fprintf ( stderr, ""match_at: <S2SV_blank> str: <S2SV_blank> %d, <S2SV_blank> end: <S2SV_blank> %d, <S2SV_blank> start: <S2SV_blank> %d, <S2SV_blank> sprev: <S2SV_blank> %d\\n"", ( int ) str, ( int ) sstart, ( int ) sprev ) ; fprintf ( stderr, ""size: <S2SV_blank> %d, <S2SV_blank> start <S2SV_blank> offset: <S2SV_blank> %d\\n"", mem_start_stk [ i ], mem_end_stk [ i ] ) ; if ( mem_start_stk [ i ] > mem_end_stk [ i ] ) { fprintf ( stderr, ""match_at: <S2SV_blank> str: <S2SV_blank> %d, <S2SV_blank> end: <S2SV_blank> %d, <S2SV_blank> start: <S2SV_blank> %d, <S2SV_blank> sprev: <S2SV_blank> %d\\n"", ( int ) sstart, ( int ) sprev ) ; fprintf ( stderr, ""size: <S2SV_blank> %d, <S2SV_blank> start <S2SV_blank> offset: <S2SV_blank> %d\\n"", mem_start_stk [ i ] ) ; if ( mem_start_stk [ i ]",0
1407,"<S2SV_ModStart> int plane ; # if CONFIG_VP9_HIGHBITDEPTH switch ( bsize -> bit_depth ) { case 16 : vpx_foreach_transformed_block_in_plane ( xd, bsize, plane, visit, arg ) ; break ; case 32 : vpx_foreach_transformed_block_in_plane ( xd, bsize, plane, visit, arg ) ; break ; case 64 : vpx_foreach_transformed_block_in_plane ( xd, bsize, plane, visit, arg ) ; } # if CONFIG_VP9_HIGHBITDEPTH switch ( bsize -> bit_depth ) { case 16 : vpx_foreach_transformed_block_in_plane ( xd, bsize, plane, visit, arg ) ; break ; case 32 : vpx_foreach_transformed_block_in_plane ( xd, bsize, plane, visit, arg ) ; break ; case 64 : vpx_foreach_transformed_block_in_plane ( xd, bsize, plane, visit, arg ) ; # else vpx_foreach_transformed_block_in_plane ( xd, bsize, plane, visit, arg )",0
1408,"<S2SV_ModStart> * skb ; size_t copied = 0 ; <S2SV_ModStart>, error = - EINVAL ; if ( msg -> msg_name ) { msg -> msg_name = msg -> msg_name ; msg -> msg_namelen = sizeof ( * msg -> msg_name ) ; msg -> msg_namelen = sizeof ( * msg -> msg_name ) ; msg -> msg_namelen = sizeof ( * msg -> msg_name ) ; } else { if (! ( flags & MSG_PEEK ) ) { pr_debug ( ""%d <S2SV_blank> -= <S2SV_blank> %d\\n"", atomic_read ( & sk -> sk_rmem_alloc ), skb -> truesize ) ; atm_return ( vcc, skb -> truesize ) ; } else { pr_debug ( ""%d <S2SV_blank> -= <S2SV_blank> %d\\n"", atomic_read ( & sk -> sk_rmem_alloc ), skb -> truesize ) ; if (! ( flags & MSG_PEEK ) ) { pr_debug ( ""%d <S2SV_blank> -= <S2SV_blank> %d\\n"", atomic_read ( & sk -> sk_rmem_alloc ), sk",0
1409,<S2SV_ModStart> = hash ; <S2SV_ModEnd> } } return,0
1410,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> nonrd_pick_sb_modes ( VP9_COMP <S2SV_ModStart> & x -> <S2SV_ModEnd> e_mbd ; set_offsets <S2SV_ModStart> xd -> mi [ 0 ] -> mbmi. sb_type = bsize ; if ( frame_is_intra_only ( cm ) ) { vpx_pick_inter_mode ( cpi, x, tile, mi_row, mi_col, rate, dist, bsize ) ; } else { MB_PREDICTION_MODE intramode = DC_PRED ; set_mode_info ( & xd -> mi [ 0 ] -> mbmi, bsize, intramode ) ; } duplicate_mode_info_in_sb ( cm, xd, mi_row, mi_col ) ; if ( frame_is_intra_only ( cm ) ) { VP9_COMMON * const cm = & cpi -> common ; MACROBLOCK * const x = & cpi -> mb ; MACROBLOCKD * const xd = & x -> e_mbd ; set_offsets ( cpi, tile, mi_row, mi_col",0
1411,"<S2SV_ModStart> ) ) { u32 csum = virtio_cread_feature ( vdev, VIRTIO_NET_F_CSUM, struct virtio_net_config, max_virtqueue_pairs, & max_queue_pairs ) ; if ( err || max_queue_pairs < VIRTIO_NET_CTRL_MQ_PAIRS_MIN || max_queue_pairs > VIRTIO_NET_CTRL_MQ_PAIRS_MAX ||! virtio_has_feature ( vdev, VIRTIO_NET_F_GF_CSUM ) ) csum = virtio_cread_feature ( vdev, VIRTIO_NET_F_CSUM, struct virtio_net_config, max_virtqueue_pairs, & max_queue_pairs ) ; if ( err || max_queue_pairs < VIRTIO_NET_CTRL_VQ_PAIRS_MIN || max_queue_pairs > VIRTIO_NET_CTRL_VQ_PAIRS_MAX ) csum = virtio_cread_feature (",0
1412,<S2SV_ModStart> = NULL ; if ( reader. superblock == NULL ) reader. superblock = mysofa_new_superblock ( ) ; if ( reader. superblock == NULL ) reader. superblock = mysofa_new_superblock ( ) ; if ( reader. superblock == NULL ) reader. superblock = mysofa_new_superblock ( ) ; if ( reader. superblock == NULL ) reader. superblock = mysofa_new_superblock ( ) ; if ( reader. superblock == NULL ) reader. superblock = mysofa_new_superblock ( ) ; if ( reader. superblock == NULL ) reader. superblock = mysofa_new_superblock ( ) ; if ( reader. superblock == NULL ) reader. superblock = mysofa_new_superblock ( ) ; if ( reader. superblock == NULL ) reader. superblock = mysofa_new_superblock ( ) ; if ( reader. superblock == NULL ) reader. superblock = mysofa_new_superblock ( ) ; if ( reader. superblock == NULL ) reader. superblock = mys,0
1413,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, Get",0
1414,"<S2SV_ModStart> = 1 ; memset ( pMap -> ranges, 0, sizeof ( MappedRange ) ) ;",0
1415,<S2SV_ModStart> ; if ( be16_to_cpu ( dip -> di_namelen ) > XFS_DFORK_MAXEXT ) return __this_address ; if ( be32_to_cpu ( dip -> di_nextents ) > XFS_DFORK_MAXEXT ) return __this_address ; if ( be16_to_cpu ( dip -> di_anextents ) > XFS_DFORK_MAXEXT ) return __this_address ; if ( be16_to_cpu ( dip -> di_anextents ) > XFS_DFORK_MAXEXT ) return __this_address ; if ( be16_to_cpu ( dip -> di_anextents ) > XFS_DFORK_MAXEXT ) return __this_address ; if ( be16_to_cpu ( dip -> di_anextents ) > XFS_DFORK_MAXEXT ) return __this_address ; if ( mode && ( be32_to_cpu ( dip -> di_nextents ) + be16_to_cpu ( dip -> di_anextents ) > XFS_DFORK_MAXEXT ) ) return __,0
1416,"<S2SV_ModStart> ; if ( ( <S2SV_ModStart> VP8_EFLAG_NO_UPD_GF ) && ( flags & VP8_EFLAG_NO_UPD_ARF ) && ( flags & VP8_EFLAG_FORCE_ARF ) ) ) { ctx -> base. err_detail = ""Conflicting <S2SV_blank> <S2SV_blank> flags."" ; return VPX_CODEC_INVALID_PARAM ; } if ( ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_ALTR_FRAME ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP8_LAST_FRAME ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP8_GOLD_FRAME ; if ( flags & VP8_EFLAG_NO_REF_ARF ) ref ^= VP8_AL",0
1417,<S2SV_ModStart> case MagickFalse : quantum_info = ( QuantumInfo * ) NULL ; <S2SV_ModStart> case MagickFalse : quantum_info = ( QuantumInfo * ) NULL ; break ; case MagickQuantumInfo : quantum_info = ( QuantumInfo * ) NULL ; break ; case MagickQuantumInfo : quantum_info = ( QuantumInfo * ) NULL ; break ; case MagickQuantumInfo : quantum_info = ( QuantumInfo * ) NULL ; break ; case MagickQuantumInfo : quantum_info = ( QuantumInfo * ) NULL ; break ; case MagickQuantumInfo : quantum_info = ( QuantumInfo * ) NULL ; break ; case MagickQuantumInfo : quantum_info = ( QuantumInfo * ) NULL ; break ; case MagickQuantumInfo : quantum_info = ( QuantumInfo * ) NULL ; break ; case MagickQuantumInfo : quantum_info = ( QuantumInfo * ) NULL ; break ; case MagickQuantumInfo : quantum_info = ( QuantumInfo * ) NULL ; break ; case MagickQuantum,0
1418,<S2SV_ModStart> event ) ; <S2SV_ModEnd> hlist_add_head_rcu ( & <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> } hlist_add_head_rcu (,0
1419,"<S2SV_ModStart> * pptr, u_int <S2SV_ModEnd> len ) { <S2SV_ModStart> case BGPTYPE_IPV4_ADDRESS : if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGPTYPE_IPV6_ADDRESS : if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGPTYPE_IPV6_ADDRESS : if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGPTYPE_IPV6_ADDRESS : if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGPTYPE_IPV6_ADDRESS : if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGPTYPE_IPV6_ADDRESS : if ( len < 4 ) { ND_PRINT ( ( ndo, ""invalid <S2SV_blank> len"" ) ) ; break ; } <S2SV_ModStart> case BGPTYPE_IPV6_ADDRESS : if ( len",0
1420,"<S2SV_ModStart> res -> outputbuffer, ""<table <S2SV_blank> id=\'status-table\'><tr>"" ""<th <S2SV_blank> width=\'40%%\'>Parameter</th>"" ""<th <S2SV_blank> width=\'60%%\'>Value</th>"" ""</tr>""",0
1421,"<S2SV_ModStart> ) src_pitch ; memcpy <S2SV_ModEnd> ( dest,",1
1422,"<S2SV_ModStart> ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ; } else if ( isAddLiquidityEthCall ( msg ) ) { arStr = ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"" ; } else if ( isRemoveLiquidityEthCall ( msg ) ) { arStr = ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ; } else if ( isAddLiquidityEthCall ( msg ) ) { arStr = ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ; } else if ( isAddLiquidityEthCall ( msg ) ) { arStr = ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ; } else { if ( isRemoveLiquidityEthCall ( msg ) ) { arStr = ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"" ; } else if ( isAddLiquidityEthCall ( msg ) ) { arStr = ""uniswap <S2SV_blank> add <S2SV_blank> liquidity"" ; } else if ( isAddLiquidityEthCall ( msg ) ) { arStr = ""uniswap <S2SV_blank> remove <S2SV_blank> liquidity"" ; }",0
1423,<S2SV_ModStart> int u ; if ( n < 0 || n > 32 ) { return - 1 ; },0
1424,"<S2SV_ModStart>, & len <S2SV_ModEnd>, & iovec <S2SV_ModStart>, & len <S2SV_ModEnd>, iovec ) <S2SV_ModStart> iovec ) ; ret = rw_verify_area ( rw, file, & req -> ki_pos, len ) ; if ( ret < 0 ) { if ( iovec!= inline_vecs ) kfree ( iovec ) ; return ret ; } ret = rw_verify_area ( rw, file, & req -> ki_pos, len ) ; if ( ret < 0 ) { if ( iovec!= inline_vecs ) kfree ( iovec ) ; return ret ; } ret = rw_verify_area ( rw, file, & req -> ki_pos, len ) ; if ( ret < 0 ) { if ( iovec!= inline_vecs ) kfree ( iovec ) ; return ret ; } ret = rw_verify_area ( rw, file, & req -> ki_pos, len ) ; if ( ret < 0 ) { if ( iovec!= inline_vecs ) kfree ( iovec ) ; return ret ; } ret = rw_verify_area ( rw, file, & req -> ki_pos, len ) ; if (",0
1425,<S2SV_ModStart> ; c -> rbytes = sizeof ( c -> binary_header ) ; c -> rcurr = ( c -> rbuf + c -> rsize ) ; if ( c -> rbytes < sizeof ( c -> binary_header ) ) { c -> rbytes = sizeof ( c -> binary_header ) ; c -> rcurr = ( c -> rbuf + c -> rsize ) ; c -> rcurr = ( c -> rbuf + c -> rsize ) ; c -> rbytes = sizeof ( c -> binary_header ) ; c -> rcurr = ( c -> rbuf + c -> rsize ) ; c -> rcurr = ( c -> rbuf + c -> rsize ) ; if ( c -> rbytes < sizeof ( c -> binary_header ) ) { c -> rbytes = sizeof ( c -> binary_header ) ; c -> rcurr = ( c -> rbuf + c -> rsize ) ; c -> rcurr = ( c -> rbuf + c -> rsize ) ; c -> rbytes = sizeof ( c -> binary_header ) ; c -> rcurr = ( c -> rbuf + c -> rsize ) ; c -> rcurr = ( c -> rbuf + c,0
1426,"<S2SV_ModStart> ; if ( len < USB_DT_CONFIG_SIZE ) { dev_err ( ddev, ""invalid <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d: <S2SV_blank> "" ""invalid <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d: <S2SV_blank> "" ""type <S2SV_blank> = <S2SV_blank> 0x%X, <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %d\\n"", cfgidx, config -> desc. bDescriptorType, config -> desc. bLength ) ; return - EINVAL ; } if ( len < USB_DT_CONFIG_SIZE ) { dev_err ( ddev, ""invalid <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d: <S2SV_blank> "" ""invalid <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d: <S2SV_blank> "" ""type <S2SV_blank> = <S2SV_blank> 0x%X, <S2SV_blank> length <S2SV_blank> = <S2SV_blank> %d\\n"", cfgidx, config -> desc. bDescriptorType, config -> desc. bLength ) ; return - EINVAL ; } if ( len < USB_DT_CONFIG_SIZE ) { dev_err ( ddev, ""invalid <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d: <S2SV_blank> "" ""invalid <S2SV_blank> descriptor <S2SV_blank> for <S2SV_blank> config <S2SV_blank> index <S2SV_blank> %d: <S2SV_blank>",0
1427,"<S2SV_ModStart> ; if ( info -> count < 1 ) return - EINVAL ; access = info -> access == 0? SNDRV_CTL_ELEM_ACCESS_READWRITE : ( info -> access & ( SNDRV_CTL_ELEM_ACCESS_READWRITE | SNDRV_CTL_ELEM_ACCESS_INACTIVE | SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE ) ) ; info -> id. numid = 0 ; memset ( & kctl, 0, sizeof ( kctl ) ) ; if ( info -> count < 1 ) return - EINVAL ; access = info -> access == 0? SNDRV_CTL_ELEM_ACCESS_READWRITE : ( info -> access & ( SNDRV_CTL_ELEM_ACCESS_READWRITE | SNDRV_CTL_ELEM_ACCESS_INACTIVE | SNDRV_CTL_ELEM_ACCESS_INACTIVE | SNDRV_CTL_ELEM_ACCESS_TLV_READWRITE ) ) ; info -> id. numid = 0 ; memcpy ( & kctl.",0
1428,"<S2SV_ModStart> client_p, client_p, ""Mixing <S2SV_blank> client <S2SV_blank> and <S2SV_blank> server <S2SV_blank> protocol"" ) ; return 0 ; } if ( strlen ( parv [ 1 ] ) > 400 ) { sendto_one ( source_p, form_str ( ERR_SASLTOOLONG ), me. name, ""*"", source_p -> name ) ; source_p -> localClient -> sasl_agent = '\\0' ; source_p -> localClient -> sasl_complete = 0 ; } if ( strlen ( parv [ 1 ] ) > 400 ) { sendto_one ( source_p, form_str ( ERR_SASLTOOLONG ), me. name, ""*"", source_p -> name ) ; source_p -> localClient -> sasl_agent = '\\0' ; source_p -> localClient -> sasl_complete = 0 ; } if ( strlen ( parv [ 1 ] ) > 400 ) { sendto_one ( source_p, form_str ( ERR_SASLTOOLONG ), me. name, ""*"", source_p -> name ) ; source_p -> localClient -> sasl_agent = '\\0' ; source_",0
1429,<S2SV_ModStart> case 0x66 : if ( mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT32 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT32 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT32 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) { if ( ctxt -> mode == X86EMUL_MODE_PROT64 ) {,0
1430,"<S2SV_ModStart>, event, <S2SV_ModEnd> mmap_event -> event_id <S2SV_ModStart>. size, <S2SV_ModEnd> mmap_event -> event_id",0
1431,<S2SV_ModStart> priv_flags &= ~ ( IFF_XMIT_DST_RELEASE | IFF_TX_SKB_SHARING ) <S2SV_ModEnd> ; random_ether_addr (,1
1432,"<S2SV_ModStart> 16 ) ; vp8_build_intra_predictors_mby_s ( xd, xd -> dst. y_buffer - 1, xd -> dst. y_stride, xd -> predictor, 16 ) ; vp8_build_intra_predictors_mby_s ( xd, xd -> dst. y_buffer - 1, xd -> dst. y_stride, xd -> predictor, 16 ) ; vp8_build_intra_predictors_mby_s ( xd, xd -> dst. y_buffer - 1, xd -> dst. y_stride, xd -> predictor, 16 ) ; distortion = vp8_variance16x16 ( * ( b -> base_src ), b -> src_stride, xd -> predictor, 16, & sse ) ; rate = x -> mbmode_cost [ xd -> frame_type ] [ mode ] ; this_rd = RDCOST ( x -> rdmult, x -> rddiv, rate, distortion ) ; if ( error16x16 > this_rd ) { error16x16 = this_rd ; best_mode = mode ; best_sse = sse ; } }",0
1433,"<S2SV_ModStart> ( interface, ENC624J600_ECON2, ENC624J600_ECON2_ETHEN | ENC624J600_ECON2_STRCH ) ; if ( macCompAddr ( & interface -> macAddr, & MAC_UNSPECIFIED_ADDR ) ) { temp = enc624j600ReadReg ( interface, ENC624J600_MAADR1 ) ; interface -> macAddr. w [ 0 ] = letoh16 ( temp ) ; interface -> macAddr. w [ 1 ] = letoh16 ( temp ) ; temp = enc624j600ReadReg ( interface, ENC624J600_MAADR2 ) ; interface -> macAddr. w [ 2 ] = letoh16 ( temp ) ; temp = enc624j600ReadReg ( interface, ENC624J600_MAADR3 ) ; interface -> macAddr. w [ 3 ] = letoh16 ( temp ) ; macAddrToEui64 ( & interface -> macAddr, & interface -> eui64 ) ; } else { temp = htole16 ( interface -> macAddr. w [ 0 ] ) ; enc6",0
1434,<S2SV_ModStart> * start ; <S2SV_ModEnd> start = ( <S2SV_ModStart> header ) ; <S2SV_ModEnd> maxlen = sizeof <S2SV_ModStart> = 0 ; <S2SV_ModEnd> psf -> headindex <S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1435,"<S2SV_ModStart> ) ) ; if ( unconditional ( & e -> arp ) ) || visited ) { unsigned int oldpos, size ; if ( ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && t -> verdict < 0 && unconditional ( & e -> arp ) ) || visited ) { unsigned int oldpos, size ; if ( ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET ) == 0 ) && ( strcmp ( t -> target. u. user. name, XT_STANDARD_TARGET",0
1436,<S2SV_ModStart> priv -> alg_priv && ctx -> iface -> destroy ) ctx -> iface -> destroy ( ctx -> priv -> alg_priv ) ; if (! ctx -> priv -> name ) return VPX_CODEC_INVALID_PARAM ; if (! ctx -> priv -> name ) return VPX_CODEC_INVALID_PARAM ; <S2SV_ModStart> priv -> alg_priv ) return VPX_CODEC_INVALID_PARAM ; if ( ctx -> priv -> name ) return VPX_CODEC_INVALID_PARAM ; if (! ctx -> priv -> name ) return VPX_CODEC_INVALID_PARAM ; if (! ctx -> priv -> name ) return VPX_CODEC_INVALID_PARAM ; if (! ctx -> priv -> name ) return VPX_CODEC_INVALID_PARAM ; if (! ctx -> priv -> name ) return VPX_CODEC_INVALID_PARAM ; if (! ctx -> priv -> name ) return VPX_CODEC_INVALID_PARAM ; if (! ctx -> priv -> name ) return VPX_CODEC_INVALID_PARAM ; if (! ctx -> priv -> name ) return VPX_CODEC_INVALID_,0
1437,"<S2SV_ModStart> ) ) ; switch ( exit_reason ) { case EXIT_REASON_NMI_WINDOW : return nested_cpu_has ( vmcs12, CPU_BASED_NMI_WINDOW_EXITING ) ; case EXIT_REASON_INVD : return nested_cpu_has ( vmcs12, CPU_BASED_INVD_EXITING ) ; case EXIT_REASON_RDPMC : return nested_cpu_has ( vmcs12, CPU_BASED_RDPMC_EXITING ) ; case EXIT_REASON_RDTSC : return nested_cpu_has ( vmcs12, CPU_BASED_RDTSC_EXITING ) ; case EXIT_REASON_HLT : return nested_cpu_has ( vmcs12, CPU_BASED_HLT_EXITING ) ; case EXIT_REASON_INVD : return nested_cpu_has ( vmcs12, CPU_BASED_INVD_EXITING ) ; case EXIT_REASON_INVD : return nested_cpu_has ( vmcs12, CPU_BASED_INVD_EXITING ) ; case EXIT_REASON_HLT : return",0
1438,<S2SV_ModStart> -> adaptive_rd_thresh = ( speed < 1 )? ALLOW_RECODE : ALLOW_RECODE_KFMAXBW ; sf -> allow_skip_recode = 1 ; if ( speed >= 1 ) { sf -> use_square_partition_only =! frame_is_intra_only ( cpi ) ; sf -> less_rectangular_check = 1 ; sf -> tx_size_search_method = vp9_frame_is_boosted ( cpi )? USE_FULL_RD <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
1439,"<S2SV_ModStart> ct_dccp_roles role ; memset ( & _dh, 0, sizeof ( _dh ) ) ; type = dh -> dccph_type ; if ( type == DCCP_PKT_RESET ) { nf_ct_kill_acct ( ct, ctinfo, skb ) ; return NF_ACCEPT ; } spin_lock_bh ( & ct -> lock ) ; role = ct -> proto. dccp. role [ dir ] ; if ( role == CT_DCCP_ROLE_SERVER ) { ct -> proto. dccp. role [! dir ] = CT_DCCP_ROLE_CLIENT ; ct -> proto. dccp. role [! dir ] = CT_DCCP_ROLE_SERVER ; } break ; case CT_DCCP_TIMEWAIT : if ( old_state == CT_DCCP_REQUEST ) ct -> proto. dccp. role [ dir ] = CT_DCCP_ROLE_CLIENT ; ct -> proto. dccp. role [! dir ] = CT_DCCP_ROLE_SERVER ; ct -> proto. dccp. role [! dir ] = CT_DCCP_ROLE_SERVER",0
1440,<S2SV_ModStart> struct compat_timex tx32 ; txc -> modes = tx32. modes ; txc -> offset = tx32. offset ; txc -> freq = tx32. freq ; txc -> maxerror = tx32. maxerror ; txc -> esterror = tx32. esterror ; txc -> status = tx32. status ; txc -> precision = tx32. precision ; txc -> tolerance = tx32. tolerance ; txc -> time. tv_sec = tx32. time. tv_sec ; txc -> time. tv_usec = tx32. time. tv_usec ; txc -> tick = tx32. tick ; txc -> ppsfreq = tx32. ppsfreq ; txc -> jitter = tx32. jitter ; txc -> shift = tx32. shift ; txc -> stabil = tx32. stabil ; txc ->,0
1441,"<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart>, - 1 )",1
1442,"<S2SV_ModStart> ; int goodsize ; if ( inuse > LUAI_MAXSTACK ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) goodsize = LUAI_MAXSTACK ; if ( inuse <= ( LUAI_MAXSTACK - EXTRA_STACK ) && goodsize < L -> stacksize ) goodsize = LUAI_MAXSTACK ; if ( goodsize < L -> stacksize ) luaD_reallocstack ( L, goodsize, 0 )",0
1443,<S2SV_ModStart> o ) { Py_RETURN_NONE <S2SV_ModEnd> ; } result,1
1444,"<S2SV_ModStart> ) ; const <S2SV_ModEnd> char * raw <S2SV_ModStart> char * s = STR ( CHILD ( n, 0 ) ) ; int quote = Py_CHARMASK ( * s ) ; char * ch, s_kind [ 3 ] ; while ( * raw && * raw!= '\\'' && * raw!= \'""\' ) { * raw ++ = * raw ++ ; } kind = PyUnicode_FromString ( s_kind ) ; if (! kind ) { return NULL ; } # ifdef Py_USING_UNICODE if ( PyErr_ExceptionMatches ( PyExc_UnicodeError ) ) { PyObject * type, * value, * tback ; errstr = PyObject_Str ( value ) ; if ( errstr ) { PyErr_Fetch ( & type, & value, & tback ) ; errstr = PyObject_Str ( value ) ; if ( errstr ) { PyErr_Fetch ( & type, & value, & tback ) ; errstr = PyObject_Str ( value ) ; if ( errstr ) { PyErr_Fetch ( & type, & value, & tback ) ; errstr = PyObject_Str ( value ) ; if ( errstr ) { PyErr_Fetch ( & type, & value, &",0
1445,"<S2SV_ModStart> * input_ptr ; <S2SV_ModEnd> vpx_codec_err_t res = <S2SV_ModStart> } if ( strcmp ( ""keyframes"", option_name ) == 0 ) { svc_ctx -> keyframes = atoi ( option_value ) ; } else if ( strcmp ( ""keyframes"", option_name ) == 0 ) { svc_ctx -> keyframes = atoi ( option_value ) ; } else if ( strcmp ( ""encoding-mode"", option_name ) == 0 ) { svc_ctx -> encoding_mode = atoi ( option_value ) ; } else if ( strcmp ( ""layers"", option_name ) == 0 ) { svc_ctx -> spatial_layers = atoi ( option_value ) ; } else if ( strcmp ( ""scale-factors"", option_name ) == 0 ) { res = parse_scale_factors ( svc_ctx, option_value ) ; if ( res!= VPX_CODEC_OK ) break ; } else if ( strcmp ( ""quantizers"", option_name ) == 0 ) { res = parse_quantizer_values ( svc_ctx, option_value, 0 ) ; if ( res!= VPX_",0
1446,<S2SV_ModStart> event ) ; <S2SV_ModEnd> hlist_add_head_rcu ( & <S2SV_ModStart> - EINVAL ; <S2SV_ModEnd> } hlist_add_head_rcu (,0
1447,"<S2SV_ModStart> mask & KADM5_PRINCIPAL ) || ( mask & KADM5_LAST_PWD_CHANGE ) || ( mask & KADM5_MOD_TIME ) || ( mask & KADM5_MOD_NAME ) || ( mask & KADM5_MKVNO ) || ( mask & KADM5_AUX_ATTRIBUTES ) || ( mask & KADM5_KEY_DATA ) || ( mask & KADM5_LAST_SUCCESS ) || ( mask & KADM5_LAST_FAILED ) ) return KADM5_BAD_MASK ; if ( entry == ( kadm5_principal_ent_t ) NULL ) return EINVAL ; if ( mask & KADM5_TL_DATA ) { tl_data_orig = entry -> tl_data ; while ( tl_data_orig ) { if ( tl_data_orig -> tl_data_type < 256 ) return KADM5_BAD_TL_TYPE ; tl_data_orig = tl_data_orig -> tl_data_next ; } } ret = get_entry ( handle, entry -> principal, & kdb, & ad",0
1448,"<S2SV_ModStart> ; for ( plane = 0 ; plane < 4 && frame -> data [ plane ] ; plane ++ ) { int64_t linesize = av_image_get_linesize ( frame -> format, frame -> width, plane ) ; int h = plane == 1 || plane == 2? FF_CEIL_RSHIFT ( inlink -> h, vsub ) : inlink -> h ; if ( linesize < 0 ) return linesize ; for ( i = 0 ; i < h ; i ++ ) { plane_checksum [ plane ] = av_adler32_update ( plane_checksum [ plane ], data, linesize ) ; checksum = av_adler32_update ( checksum, data, linesize ) ; checksum = av_adler32_update ( checksum, data, linesize ) ; data += frame -> linesize [ plane ] ; } } av_log ( ctx, AV_LOG_INFO, ""n:%"" PRId64 "" <S2SV_blank> pts:%s <S2SV_blank> pts_time:%s <S2SV_blank> pos:%"" PRId64 "" <S2SV_blank> fmt:%s <S2SV_blank> sar:%d/%d <S2SV_blank> s:%dx%d <S2SV_blank> i:%c <S2SV_blank> iskey:%c <S2SV_blank> "" "" <S2SV_blank> type:%",0
1449,"<S2SV_ModStart> ) ; } fprintf ( mvs, ""\\n"" ) ; mb_index = 0 ; fprintf ( mvs, ""Mb <S2SV_blank> mv <S2SV_blank> ref <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. ref_frame ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; mb_index = 0 ; fprintf ( mvs, ""UV <S2SV_blank> Modes <S2SV_blank> for <S2SV_blank> Frame <S2SV_blank> %d\\n"", frame ) ; for ( mb_row = 0 ; mb_row < rows ; mb_row ++ ) { for ( mb_col = 0 ; mb_col < cols ; mb_col ++ ) { fprintf ( mvs, ""%2d <S2SV_blank> "", mi [ mb_index ]. mbmi. uv_mode ) ; mb_index ++ ; } fprintf ( mvs, ""\\n"" ) ; mb_index = 0 ; fprintf",0
1450,<S2SV_ModStart> self ) { size_t <S2SV_ModEnd> i ; PyObject,1
1451,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
1452,<S2SV_ModStart> imp_dbh ) ) { <S2SV_ModStart> imp_dbh ) ) { imp_dbh -> stats. mysql_errors ++ ; imp_dbh -> stats. mysql_errors ++ ; <S2SV_ModStart> imp_dbh ) ) { imp_dbh -> stats. mysql_errors ++ ; <S2SV_ModStart> imp_dbh ) ; imp_dbh -> stats. mysql_errors ++ ; imp_dbh -> stats. mysql_errors ++ ; <S2SV_ModStart> imp_dbh ) ) { imp_dbh -> stats. mysql_errors ++ ; imp_dbh -> stats. mysql_errors ++ ; imp_dbh -> stats. mysql_errors ++ ; imp_dbh -> stats. mysql_errors ++ ; imp_dbh -> stats. mysql_errors ++ ; imp_dbh -> stats. mysql_errors ++ ; imp_dbh -> stats. mysql_errors ++ ; imp_dbh -> stats. mysql_errors ++ ; imp_dbh -> stats. mysql_errors ++ ; imp_dbh -> stats. mysql_errors ++ ; imp_dbh -> stats. mysql_errors ++ ; imp_dbh -> stats. mysql_errors ++ ; imp_dbh -> stats. mysql_errors ++,0
1453,<S2SV_ModStart> ; if ( TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> slot_lock ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) TEMP_FAILURE_RETRY ( <S2SV_ModStart> size ) ) TEMP_FAILURE_RETRY (,0
1454,"<S2SV_ModStart> struct ieee_802_11_phdr phdr ; col_set_str ( pinfo -> cinfo, COL_VERSION, ""PPI"" ) ; col_clear ( pinfo -> cinfo, COL_INFO ) ; data_len = tvb_get_letohs ( tvb, offset + 1 ) ; data_type = tvb_get_guint8 ( tvb, offset + 2 ) ; tot_len = tvb_get_letohs ( tvb, offset + 3 ) ; tot_len = tvb_get_letohs ( tvb, offset + 4 ) ; tot_len = tvb_get_letohs ( tvb, offset + 5 ) ; tot_len = tvb_get_letohs ( tvb, offset + 6 ) ; tot_len = tvb_get_letohs ( tvb, offset + 7 ) ; tot_len = tvb_get_letohs ( tvb, offset + 5 ) ; tot_len = tvb_get_letohs ( tvb, offset + 6 ) ; tot_len = tvb_get_letohs (",0
1455,"<S2SV_ModStart> * fp ; if ( hdrlen + initlen + 1 > sizeof ( * sh ) ) { sh = s_malloc ( hdrlen + initlen + 1 ) ; if ( sh == NULL ) sh = s_malloc ( hdrlen + initlen + 1 ) ; if ( sh == NULL ) return NULL ; if ( init == SDS_NOINIT ) init = NULL ; else memset ( sh, 0, hdrlen + initlen + 1 ) ; s = ( char * ) sh + hdrlen ; fp = ( ( unsigned char * ) sh ) - 1 ; switch ( type ) { case SDS_TYPE_32 : { SDS_HDR_VAR ( 32, s ) ; sh -> len = initlen ; sh -> alloc = initlen ; * fp = type ; break ; } case SDS_TYPE_64 : { SDS_HDR_VAR ( 64, s ) ; sh -> alloc = initlen ; * fp = type ; break ; } case SDS_TYPE_128 : { SDS_HDR_VAR ( 128, s ) ; sh -> len = initlen ; sh -> alloc = initlen ; * fp = type",0
1456,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> nsc_encode_argb_to_aycocg ( NSC_CONTEXT <S2SV_ModStart> BYTE a_val ; UINT16 x ; UINT16 y ; UINT16 rw ; UINT16 tempWidth ; tempWidth = ROUND_UP_TO ( context -> width, 8 ) ; rw = ( context -> ChromaSubsamplingLevel? tempWidth : context -> width ) ; ccl = context -> ColorLossLevel ; for ( y = 0 ; y < context -> height ; y ++ ) { src = data + ( context -> height - 1 - y ) * scanline ; yplane = context -> priv -> PlaneBuffers [ 0 ] + y * rw ; coplane = context -> priv -> PlaneBuffers [ 1 ] + y * rw ; cgplane = context -> priv -> PlaneBuffers [ 2 ] + y * rw ; aplane = context -> priv -> PlaneBuffers [ 3 ] + y * rw ; yplane = context -> priv -> PlaneBuffers [ 0 ] + y * rw ; coplane = context -> priv -> PlaneBuffers [ 1 ] + y * rw ; cgplane = context -> priv -> Pl",0
1457,"<S2SV_ModStart> + 1 ; if ( end_offset < offset ) offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; if ( offset < end_offset ) offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; if ( offset < end_offset ) offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; if ( offset < end_offset ) offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; if ( offset < end_offset ) offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo, tree, drep, NULL, hf_keybuffer ) ; if ( offset < end_offset ) offset = dissect_spoolss_uint16uni ( tvb, offset, pinfo,",0
1458,"<S2SV_ModStart> - EINVAL ) ; if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } * ( ++ top ) = invert ; continue ; case ')' : if ( top - op_stack > nr_parens ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next - str ) ; goto out_free ; } if ( N >= nr_preds ) { parse_error ( pe, FILT_ERR_TOO_MANY_PREDS, next",0
1459,"<S2SV_ModStart> cpi ) { const VP9EncoderConfig <S2SV_ModEnd> * rc = <S2SV_ModStart> = ( ( cpi -> oxcf. starting_buffer_level / 2 ) > INT_MAX )? INT_MAX : ( int ) ( cpi -> oxcf. starting_buffer_level / 2 ) ; } else { const int initial_boost = 32 ; const int kf_boost = MAX ( initial_boost, ( int ) ( 2 * cpi -> output_framerate - 16 ) ) ; if ( rc -> frames_since_key < cpi -> output_framerate / 2 ) ) { kf_boost = ( int ) ( rc -> frames_since_key * rc -> frames_since_key / ( cpi -> output_framerate / 2 ) ) ; } else { const int initial_boost = 32 ; const int kf_boost = MAX ( initial_boost, ( int ) ( 2 * cpi -> output_framerate - 16 ) ) ; if ( rc -> frames_since_key < cpi -> output_framerate / 2 ) { kf_boost = ( int ) ( rc -> frames_since_key * rc -> frames_since_key",0
1460,<S2SV_ModStart> X86_EFLAGS_RF ) ; if ( svm -> vmcb -> save. rflags & X86_EFLAGS_TF ) svm -> vmcb -> save. rflags |= X86_EFLAGS_TF ; <S2SV_ModStart> X86_EFLAGS_RF ) ; if ( svm -> vmcb -> save. rflags & ( X86_EFLAGS_TF | X86_EFLAGS_RF ) ) svm -> vmcb -> save. rflags |= X86_EFLAGS_TF ; if ( svm -> vmcb -> save. rflags & X86_EFLAGS_TF ) svm -> vmcb -> save. rflags |= ( X86_EFLAGS_TF | X86_EFLAGS_RF ) ; if ( svm -> vmcb -> save. rflags & ( X86_EFLAGS_TF | X86_EFLAGS_TF | X86_EFLAGS_RF ) ) svm -> vmcb -> save. rflags |= X86_EFLAGS_TF ; if ( svm -> vmcb -> save. rflags & X86_EFLAGS_TF ) svm -> vmcb -> save. rflags |= X86_E,0
1461,<S2SV_ModStart> <S2SV_null> <S2SV_null> static tran_low_t <S2SV_ModEnd> read_tx_mode ( vpx_reader <S2SV_ModStart> r ) { tran_low_t <S2SV_ModEnd> tx_mode = vpx_read_literal <S2SV_ModStart> ) tx_mode += vpx_read_bit <S2SV_ModEnd> ( r ),0
1462,"<S2SV_ModStart> OSPF_TYPE_HELLO : { ND_TCHECK_32BITS ( & hellop -> hello_options ) ; if ( EXTRACT_32BITS ( & hellop -> hello_options )!= 0 ) { ND_PRINT ( ( ndo, ""\\n\\tOptions <S2SV_blank> [%s]"", bittok2str ( ospf6_option_values, ""none"", EXTRACT_32BITS ( & hellop -> hello_options ) ) ) ; } else { ND_PRINT ( ( ndo, ""\\n\\tOptions <S2SV_blank> [%s]"", bittok2str ( ospf6_option_values, ""none"", EXTRACT_32BITS ( & hellop -> hello_options ) ) ) ) ; ND_TCHECK_32BITS ( & hellop -> hello_deadint ) ; if ( EXTRACT_32BITS ( & hellop -> hello_deadint )!= 0 ) { ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> Hello <S2SV_blank> Timer <S2SV_blank> %us, <S2SV_blank> Dead <S2SV_blank> Timer <S2SV_blank> %us, <S2SV_blank> Interface-ID <S2SV_blank> %s, <S2SV_blank> Priority <S2SV_blank> %u"", hellop -> hello_ifid ) ) ) ;",0
1463,<S2SV_ModStart> datalen ) { size_t version ; <S2SV_ModStart> unsigned char * ) data ; if ( datalen < 1 ) return - EINVAL ; version = * ( unsigned char * ) data ; if ( version < 1 ) return - EINVAL ;,0
1464,"<S2SV_ModStart> rc ) { mutex_lock ( & rc -> uwbd_mutex ) ; <S2SV_ModStart> ""uwbd"" ) ; mutex_unlock ( & rc -> uwbd_mutex ) ; <S2SV_ModStart> ""uwbd"" ) ; mutex_unlock ( & rc -> uwbd_mutex ) ;",0
1465,"<S2SV_ModStart> case 6 : # line 96 ""re_grammar.y"" { yr_free ( ( ( * yyvaluep ). class_vector ) ) ; } # line 1045 ""re_grammar.c"" break ; case 26 : # line 97 ""re_grammar.y"" { yr_free ( ( ( * yyvaluep ). class_vector ) ) ; } # line 1051 ""re_grammar.c"" break ; case 27 : # line 99 ""re_grammar.y"" { yr_free ( ( ( * yyvaluep ). re_node ) ) ; } # line 1057 ""re_grammar.c"" break ; case 28 : # line 99 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1063 ""re_grammar.c"" break ; case 29 : # line 100 ""re_grammar.y"" { yr_re_node_destroy ( ( ( * yyvaluep ). re_node ) ) ; } # line 1069 ""re_grammar.c"" break ; case 30 : # line 100 ""re_grammar.y"" { yr",0
1466,<S2SV_ModStart> : idx ; if ( ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) && ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) && ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) && ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) && ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) && ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) && ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) && ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) && ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) && ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) && ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) && ( gfx -> data. flags & JSGRAPHICSFLAGS_ARRAYBUFFER_HIGHBITDEPTH ) && ( gfx -> data. flags & JS,0
1467,"<S2SV_ModStart> -> cpi ; MACROBLOCK * const td = args -> td ; <S2SV_ModStart> 32 ] ; MACROBLOCK * const p = & td -> mb. plane [ plane ] ; struct macroblockd_plane * const pd = & td -> mb. plane [ plane ] ; MB_MODE_INFO * const mbmi = & td -> mbmi [ 0 ] -> mbmi ; const PLANE_TYPE type = pd -> plane_type ; const int16_t * qcoeff = BLOCK_OFFSET ( p -> qcoeff, block ) ; const int segment_id = BLOCK_OFFSET ( p -> segment_id, block ) ; const int ref = is_inter_block ( mbmi ) ; unsigned int ( * const counts ) [ COEFF_CONTEXTS ] [ ENTROPY_TOKENS ] = cpi -> coef_counts [ tx_size ] [ type ] [ ref ] ; vpx_prob ( * const coef_probs ) [ COEFF_CONTEXTS ] [ UNCONSTRAINED_NODES ] = cpi -> common. fc. coef_probs [ tx_size ] [ type ] [ ref ] ; vpx_prob ( * const coef_probs ) [ COEFF_",0
1468,<S2SV_ModStart> SrcList * pSrc = pSelect -> pSrc ; if ( pSrc == 0 ) { assert ( pWalker -> pParse -> db -> mallocFailed ) ; return WRC_Abort ; },0
1469,<S2SV_ModStart> shmflg & SHM_RND ) addr &= ~ ( shmlba - 1 ) ; else if ( ( shmflg & SHM_MAYWRITE ) ) addr &= ~ ( shmlba - 1 ) ; else if ( ( shmflg & SHM_MAYREAD ) ) addr &= ~ ( shmlba - 1 ) ; else if ( ( shmflg & SHM_MAYWRITE ) ) addr &= ~ ( shmlba - 1 ) ; else if ( ( shmflg & SHM_RND ) addr &= ~ ( shmlba - 1 ) ; else if ( ( shmflg & SHM_MAYEXEC ) ) { err = - EPERM ; goto out_unlock ; },0
1470,"<S2SV_ModStart> users ) ; switch ( minorversion ) { case 0 : cb_info -> serv = svc_create ( & nfs4_callback_program, NFS4_CALLBACK_BUFSIZE, sv_ops ) ; break ; case 1 : cb_info -> serv = svc_create ( & nfs4_callback_program, NFS4_CALLBACK_BUFSIZE, sv_ops ) ; break ; case 2 : cb_info -> serv = svc_create ( & nfs4_callback_program, NFS4_CALLBACK_BUFSIZE, sv_ops ) ; break ; case 3 : cb_info -> serv = svc_create ( & nfs4_callback_program, NFS4_CALLBACK_BUFSIZE, sv_ops ) ; break ; case 4 : cb_info -> serv = svc_create ( & nfs4_callback_program, NFS4_CALLBACK_BUFSIZE, sv_ops ) ; break ; case 5 : cb_info -> serv = svc_create ( & nfs4_callback_program, NFS4_CALLBACK_BUFSIZE, sv_ops ) ; break ; case 6 : cb_info -> serv = svc_create ( & nfs",0
1471,"<S2SV_ModStart> void pointZZ_pMul ( PointZZ_p <S2SV_ModEnd> rop, const <S2SV_ModStart> point, const CurveZZ_p curve ) { PointZZ_p R0, R1 ; mpz_inits ( R1. x, R1. y, tmp. x, tmp. y, NULL ) ; mpz_inits ( R0. x, R0. y, R1. x, R1. y, tmp. x, tmp. y, NULL ) ; mpz_inits ( R1. x, R1. y, tmp. x, tmp. y, NULL ) ; pointZZ_pDouble ( & R0, & R1, curve ) ; if ( mpz_tstbit ( scalar, dbits ) ) { mpz_set ( tmp. x, R0. x ) ; mpz_set ( tmp. y, R0. y ) ; pointZZ_pAdd ( & R1, & R0, curve ) ; mpz_set ( tmp. x, R0. x ) ; mpz_set ( tmp. y, R0. y ) ; pointZZ_pAdd ( & R0, & R1, curve )",0
1472,<S2SV_ModStart> ; gss_buffer_desc client_name = GSS_C_EMPTY_BUFFER ; gss_buffer_desc service_name = GSS_C_EMPTY_BUFFER <S2SV_ModEnd> ; OM_uint32 minor_stat <S2SV_ModStart> prime_arg ) ; exit_func : <S2SV_ModStart> service_name ) ; <S2SV_ModEnd> free_server_handle ( handle,1
1473,<S2SV_ModStart> case NPNVSupportsWindowless : type = RPC_TYPE_BOOLEAN ; break ; case NPNVJavaScriptEnabledBool : type = RPC_TYPE_BOOLEAN ; break ; case NPNVasdEnabledBool : case NPNVisOfflineBool : type = RPC_TYPE_UINT32 ; break ; case NPNVSupportsXEmbedBool : type = RPC_TYPE_UINT32 ; break ; case NPNVSupportsXEmbedBool : type = RPC_TYPE_UINT32 ; break ; case NPNVSupportsWindowless : type = RPC_TYPE_BOOLEAN ; break ; case NPNVToolkit : type = RPC_TYPE_UINT32 ; break ; case NPNVnetscapeWindow : type = RPC_TYPE_UINT32 ; break ; case NPNVPluginElementNPObject : type = RPC_TYPE_NP_OBJECT ; break ;,0
1474,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> msg, MSG_DONTWAIT )",1
1475,"<S2SV_ModStart> s ) { if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; } ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> 0 ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""sock <S2SV_blank> fd:%d <S2SV_blank> send <S2SV_blank> errno:%d, <S2SV_blank> ret:%d"", sock_fd, errno, ret ) ; return - 1 ; }",0
1476,"<S2SV_ModStart> = NULL ; if ( xml_acl_check ( xml, NULL, xpf_acl_read ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_write ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else if ( __xml_acl_check ( xml, NULL, xpf_acl_read ) ) { crm_trace ( ""Creation <S2SV_blank> of <S2SV_blank> %s=%s <S2SV_blank> is <S2SV_blank> allowed"", crm_element_name ( xml ), ID ( xml ) ) ; break ; } else { char * path",0
1477,<S2SV_ModStart> <S2SV_null> <S2SV_null> static SvcInternal_t <S2SV_ModEnd> * get_const_svc_internal ( <S2SV_ModStart> NULL ; return ( SvcInternal_t <S2SV_ModEnd> * ) svc_ctx,0
1478,"<S2SV_ModStart> mq_ops ) { list_for_each_entry_safe ( rq, n, running, flush. list ) { unsigned int seq = blk_flush_cur_seq ( rq ) ; WARN_ON ( seq!= REQ_FSEQ_PREFLUSH && seq!= REQ_FSEQ_POSTFLUSH && seq!= REQ_FSEQ_PREFLUSH ) ; queued |= blk_flush_complete_seq ( rq, fq, seq, error ) ; list_for_each_entry_safe ( rq, n, running, flush. list ) { unsigned int seq = blk_flush_cur_seq ( rq ) ; WARN_ON ( seq!= REQ_FSEQ_PREFLUSH && seq!= REQ_FSEQ_POSTFLUSH ) ; queued |= blk_flush_complete_seq ( rq, fq, seq, error ) ; }",0
1479,"<S2SV_ModStart> { int length ; struct stream packet = * s ; <S2SV_ModStart> MCS_TAG_DOMAIN_PARAMS, & packet ) ; if (! s_check ( s ) ) return RD_FALSE ; <S2SV_ModStart> MCS_TAG_DOMAIN_PARAMS, & packet ) ; if (! s_check ( s ) ) return RD_FALSE ; <S2SV_ModStart> length ) ; if (! s_check ( s ) ) return RD_FALSE ;",0
1480,"<S2SV_ModStart> == HASH_KEY_IS_STRING ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; } else if ( hkey. type == HASH_KEY_IS_LONG ) { zend_print_zval_r ( & tmp, 1 TSRMLS_CC ) ; fprintf ( stderr, ""\\n"" ) ; }",0
1481,"<S2SV_ModStart> only_420 ) { <S2SV_ModEnd> int ret ; <S2SV_ModStart> = VPX_IMG_FMT_I420 ; if ( memcmp ( buffer, ""YUV4MPEG"", 8 ) ) { fprintf ( stderr, ""Incorrect <S2SV_blank> magic <S2SV_blank> for <S2SV_blank> YUV4MPEG <S2SV_blank> file; <S2SV_blank> not <S2SV_blank> a <S2SV_blank> YUV4MPEG2 <S2SV_blank> file?\\n"" ) ; return - 1 ; } buffer [ i ] = '\\0' ; if ( memcmp ( buffer, ""YUV4MPEG"", 8 ) ) { fprintf ( stderr, ""Incorrect <S2SV_blank> magic <S2SV_blank> for <S2SV_blank> YUV4MPEG <S2SV_blank> file; <S2SV_blank> YUV4MPEG2 <S2SV_blank> version; <S2SV_blank> YUV4MPEG2 <S2SV_blank> required.\\n"" ) ; return - 1 ; } buffer [ i ] = '\\0' ; if ( memcmp ( buffer, ""YUV4MPEG"", 8 ) ) { fprintf ( stderr, ""Incorrect <S2SV_blank> magic <S2SV_blank> for <S2SV_blank> YUV4MPEG"", 8 ) ) { fprintf ( stderr, ""Incorrect <S2SV_blank> magic <S2SV_blank> for <S2SV_blank> YUV4MPEG <S2SV_blank> file; <S2SV_blank> YUV4MPEG <S2SV_blank> version; <S2SV_blank> YUV4MPEG",0
1482,"<S2SV_ModStart> obj * otmp = NULL ; if (! readobjnam ( buf, ( struct obj * ) 0 ) ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; } otmp = readobjnam ( buf, ( struct obj * ) 0 ) ; if (! otmp ) { config_error_add ( ""Bad <S2SV_blank> wizkit <S2SV_blank> item: <S2SV_blank> \\""%.60s\\"""", buf ) ; return FALSE ; }",0
1483,"<S2SV_ModStart> { long long <S2SV_ModEnd> directory_table_end, table_start <S2SV_ModStart> ; if ( read_uid_guids ( fd, & sBlk. s, & table_start ) == FALSE ) return FALSE ; if ( parse_exports_table ( & table_start ) == FALSE ) return FALSE ; if ( read_fragment_table ( & directory_table_end ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_inode_table ( sBlk. s. inode_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( read_directory_table ( sBlk. s. directory_table_start, sBlk. s. directory_table_start ) == FALSE ) return FALSE ; if ( no_xattrs ) sBlk. s. xattr",0
1484,"<S2SV_ModStart> * createenv ( <S2SV_ModEnd> const struct rule <S2SV_ModStart> root ) ; if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ]!= NULL ; i ++ ) { const char * e ; size_t len ; char keybuf [ 1024 ] ; node = createnode ( keybuf, eq + 1 ) ; if ( RB_INSERT ( envtree, & env -> root, node ) ) { freenode ( node ) ; } else { env -> count ++ ; } } } else if ( rule -> options & KEEPENV ) { extern char * * environ ; for ( i = 0 ; environ [ i ]!= NULL ; i ++ ) { const char * e, * eq ; size_t len ; if ( len > sizeof ( keybuf ) - 1 ) continue ; <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>",0
1485,"<S2SV_ModStart> -> seg ; int segment ; memset ( cpi -> segmentation_map, 0, cm -> mi_rows * cm -> mi_cols ) ; memset ( cpi -> complexity_map, 0, cm -> mi_rows * cm -> mi_cols ) ; memset ( cpi -> segmentation_map, 0, cm -> mi_rows * cm -> mi_cols ) ; memset ( cpi -> complexity_map, 0, cm -> mi_rows * cm -> mi_cols ) ; memset ( cpi -> segmentation_map, 0, cm -> mi_rows * cm -> mi_cols ) ; vp9_enable_segmentation ( seg ) ; seg -> abs_delta = SEGMENT_DELTADATA ; vp9_disable_segfeature ( seg, 0, SEG_LVL_ALT_Q ) ; for ( segment = 1 ; segment < 2 ; segment ++ ) { const int qindex_delta = vp9_compute_qdelta_by_rate ( & cpi -> rc, cm -> frame_type, cm -> base_qindex, in_frame_q_adj_ratio [ segment ] ) ; vp9_set_segfeature ( seg",0
1486,"<S2SV_ModStart> 0 ; Module_type = make_type ( ""Module"", mod_type, Module_fields, 1 ) ; if (! Module_type ) return 0 ; Interactive_type = make_type ( ""Interactive"", mod_type, Interactive_fields, 1 ) ; if (! Interactive_type ) return 0 ; Expression_type = make_type ( ""Expression"", mod_type, Expression_fields, 1 ) ; if (! Expression_type ) return 0 ; Suite_type = make_type ( ""Suite"", mod_type, Suite_fields, 1 ) ; if (! Suite_type ) return 0 ; stmt_type = make_type ( ""stmt"", & AST_type, NULL, 0 ) ; if (! stmt_type ) return 0 ; <S2SV_ModStart> 5 ) ; if (! AsyncFunctionDef_type ) return 0 ; ClassDef_type = make_type ( ""ClassDef"", stmt_type, ClassDef_fields, 5 ) ; if (! ClassDef_type ) return 0 ; Return_type = make_type ( ""Return"", stmt_type, Return_fields, 1 ) ; if (! Return_",0
1487,"<S2SV_ModStart> ) ; } TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ) ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> ( logfile_fd, ""btsnoop\\0\\0\\0\\0\\1\\0\\0\\x3\\xea"", 16 ) ) ; TEMP_FAILURE_RETRY (",0
1488,<S2SV_ModStart> += 8 ; <S2SV_ModEnd> if ( context <S2SV_ModStart> += 8 ; <S2SV_ModEnd> if ( context <S2SV_ModStart> += 4 ; <S2SV_ModEnd> if ( context <S2SV_ModStart> += 2 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> ; if ( context -> curY >= p -> height ) { context -> pass ++ ; context -> curY = i -> posY + 1 ; } break ; case 5 : context -> curY = i -> posY + 5 ; break ; case 6 : context -> curY = i -> posY + 6 ; break ; case 7 : context -> curY = i -> posY + 7 ; break ; case 8 : context -> curY += 8 ; <S2SV_ModEnd> if ( context <S2SV_ModStart> += 2 ; <S2SV_ModEnd> break ; case <S2SV_ModStart> ; if ( context -> curY >= p -> height ) { context -> pass ++ ; context -> curY = i -> posY + 2 ; } break ; case 6 : context -> curY = i -> posY + 6 ; break ; case 7 : context -> curY = i -> posY + 6 ; break ; case 8 : context -> curY += 8 ; if ( context -> curY >= p -> height ) { context -> pass ++ ; context -> curY = i -> posY + 6 ; break ; },0
1489,<S2SV_ModStart> } # endif # ifdef MODE_STATS if ( m == Y_PRED ) { unsigned int * const yct = is_key? y_modes : inter_y_modes ; unsigned int * const uvct = is_key? uv_modes : inter_uv_modes ; unsigned int * const bct = is_key? b_modes : inter_b_modes ; int b = 0 ; do { ++ yct [ yct [ xd -> block [ b ]. bmi. mode ] ; } while ( ++ b < 16 ) ; } if ( m == Y_PRED ) { unsigned int * const yct = is_key? y_modes : inter_y_modes ; unsigned int * const uvct = is_key? uv_modes : inter_uv_modes ; unsigned int * const bct = is_key? b_modes : inter_b_modes ; int b = 0 ; do { ++ bct [ bct [ xd -> block [ b ]. bmi. mode ] ; } while ( ++ b < 16 ) ; },0
1490,"<S2SV_ModStart> ) ; } if ( sr -> fid_ofile == NULL ) { smbsr_error ( sr, NT_STATUS_INVALID_HANDLE, ERRDOS, ERRbadfid ) ; return ( SDRC_ERROR ) ; }",0
1491,"<S2SV_ModStart> = 0 ; memset ( vect, 0, sizeof ( vect ) ) ; memset ( vect, 0, sizeof ( vect ) ) ; <S2SV_ModStart> = 0 ; memset ( vect, 0, sizeof ( vect ) ) ; memset ( vect, 0, sizeof ( vect ) ) ; memset ( vect, 0, sizeof ( vect ) ) ; memset ( vect, 0, sizeof ( vect ) ) ; memset ( vect, 0, sizeof ( vect ) ) ; memset ( vect, 0, sizeof ( vect ) ) ; memset ( vect, 0, sizeof ( vect ) ) ; memset ( vect, 0, sizeof ( vect ) ) ; memset ( vect, 0, sizeof ( vect ) ) ; memset ( vect, 0, sizeof ( vect ) ) ; memset ( vect, 0, sizeof ( vect ) ) ; memset ( vect, 0, sizeof ( vect ) ) ; memset ( vect, 0, sizeof ( vect ) ) ; memset ( vect, 0, sizeof ( vect ) ) ; memset ( vect, 0, sizeof ( vect ) ) ; memset ( vect, 0, sizeof ( vect ) ) ; memset ( vect, 0, sizeof ( vect ) )",0
1492,"<S2SV_ModStart> cinput ) { <S2SV_ModEnd> char * s <S2SV_ModStart> * s, * t, * StartClean <S2SV_ModEnd> ; SetDefaults ( <S2SV_ModStart> ; outpos = outputbuffer ; outpos += sprintf ( outpos, ""\\\\axo@setObject{%s}%%\\n{%s%c}%%\\n{"", s, t, TERMCHAR ) ; outpos += sprintf ( outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", VERSION, SUBVERSION ) ; if ( * s == '0' && s [ 1 ] == '[' ) { if ( strcmp ( nameobject, ""AxodrawWantsPDF"" ) == 0 ) { identification = 1 ; outpos += sprintf ( outpos, ""Axohelp <S2SV_blank> version <S2SV_blank> %d.%d. <S2SV_blank> PDF <S2SV_blank> output.}"", VERSION, SUBVERSION ) ; fprintf ( outfile, ""%s"", outputbuffer ) ; return ( 0 ) ; } } StartClean = outpos ; nameobject = t ; while ( * t!='<S2SV_blank>'&& * t!='<S2SV_blank>'&& * t!= '\\n' ) t ++ ; * t ++ = 0 ; while ( * t!='<S2SV_blank>'&& *",0
1493,"<S2SV_ModStart> segs ) { <S2SV_ModEnd> u32 hash, <S2SV_ModStart> id ; net_get_random_once ( & net -> ipv4. ip_idents_hashrnd, sizeof ( net -> ipv4. ip_idents_hashrnd ) ) ; hash = jhash_3words ( ( __force u32 ) iph -> daddr, ( __force u32 ) iph -> saddr, ( __force u32 ) iph -> protocol ^ net_hash_mix ( net ), ip_idents_hashrnd ) ; hash = jhash_3words ( ( __force u32 ) iph -> daddr, ( __force u32 ) iph -> saddr, ( __force u32 ) iph -> protocol ^ net_hash_mix ( net ), ip_idents_hashrnd ) ; id = ip_idents_reserve ( hash, segs ) ; iph -> id = htons ( id ) ; }",0
1494,"<S2SV_ModStart> expr_ty step ; PyObject * tmp = NULL ; <S2SV_ModStart> int res ; tmp = _PyObject_GetAttrId ( obj, & PyId_lower ) ; if ( tmp == NULL ) goto failed ; res = obj2ast_expr ( tmp, & lower, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { lower = NULL ; } if ( exists_not_none ( obj, & PyId_upper ) ) { int res ; tmp = _PyObject_GetAttrId ( obj, & PyId_upper ) ; if ( tmp == NULL ) goto failed ; res = obj2ast_expr ( tmp, & upper, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } else { upper = NULL ; } if ( exists_not_none ( obj, & PyId_step ) ) { int res ; res = obj2ast_expr ( tmp, & step, arena ) ; if ( res!= 0 ) goto failed ; Py_CLEAR ( tmp ) ; } * out = Slice ( lower, upper, step, arena ) ; if ( * out ==",0
1495,"<S2SV_ModStart> void write_intra_mode ( vpx_writer <S2SV_ModEnd> * w, <S2SV_ModStart> * w, PREDICTION_MODE <S2SV_ModEnd> mode, const <S2SV_ModStart> mode, const vpx_prob <S2SV_ModEnd> * probs )",1
1496,"<S2SV_ModStart> = gecos ; # endif <S2SV_ModStart> = gecos ; # ifdef HAVE_LIBUSER if ( set_value_libuser ( ""chfn"", ctl -> username, ctl -> pw -> pw_uid, LU_GECOS, gecos ) < 0 ) { warn ( ""setpwnam <S2SV_blank> failed"" ) ; # endif printf ( _ ( ""Finger <S2SV_blank> information <S2SV_blank> *NOT* <S2SV_blank> changed. <S2SV_blank> <S2SV_blank> Try <S2SV_blank> again <S2SV_blank> later.\\n"" ) ) ; return - 1 ; } <S2SV_ModStart> = gecos ; # ifdef HAVE_LIBUSER if ( set_value_libuser ( ""chfn"", ctl -> username, ctl -> pw -> pw_uid, LU_GECOS, gecos ) < 0 ) { warn ( ""setpwnam <S2SV_blank> failed"" ) ; # endif printf ( _ ( ""Finger <S2SV_blank> information <S2SV_blank> *NOT* <S2SV_blank> changed. <S2SV_blank> <S2SV_blank> Try <S2SV_blank> again <S2SV_blank> later.\\n"" ) ) ; return - 1 ; }",0
1497,<S2SV_ModStart> vns ) { struct ieee80211_radiotap_header * radiotap_header = ( struct ieee80211_radiotap_header * ) get_unaligned_le32 ( & radiotap_header -> it_version ) ; if ( radiotap_header -> it_len < sizeof ( radiotap_header -> it_len ) ) return - EINVAL ; if ( max_length < get_unaligned_le16 ( & radiotap_header -> it_len ) ) return - EINVAL ; if ( max_length < get_unaligned_le16 ( & radiotap_header -> it_len ) ) return - EINVAL ; iterator -> _rtheader = radiotap_header ; iterator -> _max_length = get_unaligned_le16 ( & radiotap_header -> it_len ) ; iterator -> _arg_index = 0 ; iterator -> _bitmap_shifter = get_unaligned_le32 ( & radiotap_header -> it_present ) ; iterator -> _arg = ( uint8_t * ) radiotap_header + sizeof ( *,0
1498,"<S2SV_ModStart> int err ; struct tc_cls_u32_key * key ; <S2SV_ModStart> extack ) ) { <S2SV_ModStart> goto err_delete ; } key = be32_to_cpu ( knode -> sel -> keys [ 0 ]. key ) >> tos_off & 0xff ; val = be32_to_cpu ( knode -> sel -> keys [ 0 ]. val ) >> tos_off & 0xff ; mask = knode -> sel -> keys [ 0 ]. mask & 0xff ; list_for_each_entry ( iter, & alink -> dscp_map, list ) { u32 cmask ; if ( ( iter -> val & cmask ) == ( val & cmask ) && iter -> band!= knode -> res -> classid ) { NL_SET_ERR_MSG_MOD ( extack, ""conflict <S2SV_blank> with <S2SV_blank> already <S2SV_blank> offloaded <S2SV_blank> filter"" ) ; return - EOPNOTSUPP ; } match -> handle = knode -> handle ; match -> band = knode -> res -> classid ; match -> val = val ; err = nfp_abm_update_band_map ( alink ) ; if ( err ) goto err_delete",0
1499,"<S2SV_ModStart> } ZEND_FETCH_RESOURCE ( <S2SV_ModEnd> IM, gdImagePtr <S2SV_ModStart>, le_gd ) ; <S2SV_ModEnd> if ( gdImageTrueColor <S2SV_ModStart> ) ) { int x, y, c ; for ( x = 0 ; x < gdImageSY ( im ) ; x ++ ) { c = gdImageGetPixel ( im, x, y ) ; c = gdImageGetPixel ( im, x, y ) ; c = gdImageGetPixel ( im, x, y ) ; c = gdTrueColorGetPixel ( im, x, y ) ; c = gdImageGetPixel ( im, x, y ) ; gdImageSetPixel ( im, x, y, c ; for ( x = 0 ; x < gdImageSX ( im ) ; x ++ ) { c = gdImageGetPixel ( im, x, y ) ; c = gdImageGetPixel ( im, x, y ) ; c = gdImageGetPixel ( im, x, y ) ; c = gdTrueColorGetPixel ( im, x, y ) ; c = gdImageGetPixel ( im, x, y ) ; gdImageSetPixel ( im, x, y, c ; for ( x = 0 ; x",0
1500,<S2SV_ModStart> cfg. g_pass = global -> passes == 2? VPX_RC_LAST_PASS : VPX_RC_FIRST_PASS ; if ( pass ) stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; if ( pass ) stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; if ( pass ) stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; if ( pass ) stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; if ( pass ) stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; if ( pass ) stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; if ( pass ) stream -> config. cfg. rc_twopass_stats_in = stats_get ( & stream -> stats ) ; if ( pass ) stream -> config. cfg. rc,0
1501,"<S2SV_ModStart> g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; g_autoptr ( GOutputStream ) out_stream = NULL ; g_auto ( GStrv ) groups = NULL ; g_auto ( GStrv ) old_argv = NULL ; g_auto ( GStrv ) new_exec = NULL ; g_autoptr ( GKeyFile ) keyfile = NULL ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; g_autoptr ( GKeyFile ) keyfile = NULL ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error ) ) goto out ; if (! g_key_file_load_from_data ( keyfile, new_data, new_data_len, G_KEY_FILE_KEEP_TRANSLATIONS, error",0
1502,"<S2SV_ModStart> data_end ) { const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_cols = 1 << cm -> log2_tile_cols ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_rows = 1 << cm -> log2_tile_rows ; const int tile_cols = 1 << cm -> log2_tile_cols ; TileBuffer tile_buffers [ 4 ] [ 1 << 6 ] ; int tile_row, tile_col ; const uint8_t * end = NULL ; vpx_reader r ; memset ( cm -> above_context, 0, sizeof ( * cm -> above_context ) * MAX_MB_PLANE * 2 * aligned_cols ) ; memset ( cm -> above_seg_context, 0, sizeof ( * cm -> above_seg_context ) * aligned_cols ) ; for ( tile_row = 0 ; tile_row < tile_rows ; ++ tile_row ) { for (",0
1503,"<S2SV_ModStart> VP9D_CONFIG * oxcf, vpx_bit_depth_t bit_depth <S2SV_ModStart> ; VP9Decoder * const pbi = vpx_memalign ( 32, bit_depth ) ; VP9_COMMON * const cm = pbi? & pbi -> common : NULL ; if (! pbi ) return NULL ; vp9_zero ( * pbi ) ; if ( setjmp ( cm -> error. jmp ) ) { cm -> error. setjmp = 1 ; vpx_memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; cm -> current_video_frame = 0 ; cm -> oxcf = * oxcf ; cm -> ready_for_new_data = 1 ; vp9_init_dequantizer ( cm ) ; cm -> error. setjmp = 0 ; vpx_rtcd ( ) ; vpx_memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref_frame_map ) ) ; vpx_memset ( & cm -> ref_frame_map, - 1, sizeof ( cm -> ref",0
1504,"<S2SV_ModStart> { GF_LOG ( GF_LOG_ERROR <S2SV_ModEnd>, GF_LOG_CONTAINER, <S2SV_ModStart> ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } else { ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
1505,<S2SV_ModStart> -> count ; kfree ( new_fpl ) ; <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug> <S2SV_StartBug>,0
1506,"<S2SV_ModStart> req ) { struct ip_options_rcu <S2SV_ModEnd> * opt ; <S2SV_ModStart> ; if ( rcu_dereference_protected ( req -> inet_opt, sock_owned_by_user ( req ) ) ) return ; opt = rcu_dereference_protected ( req -> inet_opt, sock_owned_by_user ( req ) ) ; if ( opt == NULL || opt -> cipso == 0 ) return ; opt = req_inet -> opt ; rcu_dereference ( req -> inet_opt ) ; if ( rcu_dereference_protected ( req_inet -> inet_opt, sock_owned_by_user ( req ) ) ) return ; opt = rcu_dereference_protected ( req -> inet_opt, sock_owned_by_user ( req ) ) ; if ( opt == NULL || opt -> cipso == 0 ) return ; opt = req_inet -> opt ; rcu_assign_pointer ( req -> inet_opt, opt ) ; if ( rcu_dereference_protected ( req_inet -> inet_opt, sock_owned_by_user ( req ) ) ) return",0
1507,"<S2SV_ModStart> void tree2tok ( vpx_token <S2SV_ModEnd> * tokens, <S2SV_ModStart> { const vpx_tree_index <S2SV_ModEnd> j = tree <S2SV_ModStart> ++ ] ; if ( j <= 0 ) { tokens [ - j ]. value = v ; tokens [ - j ]. len = l ; } else { tokens [ - j ]. value = v ; tokens [ - j ]. len = l ; } } <S2SV_ModEnd> } <S2SV_null> <S2SV_null>",0
1508,<S2SV_ModStart> res = VPX_CODEC_OK ; vpx_codec_pkt_list_init ( & ctx -> pkt_list ) ; <S2SV_ModStart> VPX_CODEC_INVALID_PARAM ; } if ( flags & ( VP8_EFLAG_NO_REF_LAST | VP8_EFLAG_NO_REF_GF | VP8_EFLAG_NO_REF_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ) ref ^= VP9_GOLD_FLAG ; if ( flags & ( VP8_EFLAG_NO_UPD_LAST | VP8_EFLAG_NO_UPD_GF | VP8_EFLAG_NO_UPD_ARF ) ) { int ref = 7 ; if ( flags & VP8_EFLAG_NO_REF_LAST ) ref ^= VP9_LAST_FLAG ; if ( flags & VP8_EFLAG_NO_REF_GF ),0
1509,"<S2SV_ModStart> wqh ) ; <S2SV_ModEnd> if ( isalarm <S2SV_ModStart> CLOCK_BOOTTIME_ALARM ) ) hrtimer_init ( & ctx -> t. alarm, ctx -> clockid == CLOCK_REALTIME_ALARM? ALARM_REALTIME : ALARM_BOOTTIME, timerfd_alarmproc ) ; else hrtimer_init ( & ctx -> t. tmr, ctx -> clockid, HRTIMER_MODE_ABS ) ; ctx -> moffs = ktime_mono_to_real ( 0 ) ; ufd = anon_inode_getfd ( ""[timerfd]"", & timerfd_fops, ctx, O_RDWR | ( flags & TFD_SHARED_FCNTL_FLAGS ) ) ; if ( ufd < 0 ) kfree ( ctx ) ;",0
1510,"<S2SV_ModStart> tree_list ) ; <S2SV_ModEnd> hlist_node * n <S2SV_ModStart> int err ; hlist_for_each_entry_safe ( child, n, & tree_list, mnt_hash ) { struct mount * q ; <S2SV_ModStart> mnt_hash ) ; q = __lookup_mnt_last ( & child -> mnt_parent -> mnt, child -> mnt_mountpoint ) ; q = __lookup_mnt_last ( & child -> mnt_parent -> mnt, child -> mnt_mountpoint ) ; umount_tree ( child, UMOUNT_SYNC ) ; } unlock_mount_hash ( ) ; err = propagate_mnt ( source_mnt, dest_mp, source_mnt, & tree_list ) ; if ( err ) goto out_cleanup_ids ; for ( p = source_mnt ; p ; p = next_mnt ( p, source_mnt ) ) set_mnt_shared ( p ) ; if ( parent_path ) { detach_mnt ( source_mnt, parent_path ) ; attach_mnt ( source_mnt, dest_mnt, dest_mp ) ; touch_mnt_namespace ( source_mnt -> mnt_ns )",0
1511,"<S2SV_ModStart> 0 ) { if ( check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } seq = ( char * ) seq + count * elemtype -> size ; elem = ( char * ) seq + count * elemtype -> size ; memset ( elem, 0, elemtype -> size ) ; ret = decode_atype ( & t, contents, clen, elemtype, elem ) ; if ( ret ) goto error ; if ( check_atype_tag ( elemtype, & t ) ) { ret = ASN1_BAD_ID ; goto error ; } newseq = realloc ( seq, ( count + 1 ) * elemtype -> size ) ; if ( newseq == NULL ) { ret = ENOMEM ; goto error ; } seq = newseq ; elem = ( char * ) seq + count * elemtype -> size ; memset ( elem, 0, elemtype -> size ) ; ret =",0
1512,<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> static <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> fadst16_8col ( __m128i <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> fadst16_8col ( __m128i <S2SV_ModStart> <S2SV_null> static int <S2SV_ModEnd> fadst16_8col ( __m128i,0
1513,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> frame_max_bits ( const <S2SV_ModStart> occf ) { int64_t max_bits ; max_bits = rc -> av_per_frame_bandwidth * ( ( int64_t ) rc -> two_pass_vbrmax_section ) / 100 ; if ( max_bits < 0 ) max_bits = 0 ; else max_bits = rc -> max_frame_bandwidth ; if ( max_bits > rc -> max_frame_bandwidth ) max_bits = rc -> max_frame_bandwidth ; if ( max_bits > rc -> max_frame_bandwidth ) max_bits = rc -> max_frame_bandwidth ; if ( max_bits < rc -> min_frame_bandwidth ) max_bits = rc -> min_frame_bandwidth ; if ( max_bits > rc -> max_frame_bandwidth ) max_bits = rc -> max_frame_bandwidth ; if ( max_bits > rc -> max_frame_bandwidth ) max_bits = rc -> max_frame_bandwidth ; if ( max_bits > rc -> max_frame_bandwidth ) max_bits = rc -> max_frame,0
1514,<S2SV_ModStart> in ) { jas_uchar <S2SV_ModEnd> magicbuf [ MIF_MAGICLEN,1
1515,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> void <S2SV_ModEnd> Huff_transmit ( huff_t <S2SV_ModStart> NULL ) { <S2SV_ModEnd> send ( huff <S2SV_ModStart> NULL, fout ) ; } else { send ( huff -> loc [ ch ] <S2SV_ModEnd>, NULL,",0
1516,<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> encode_superblock ( VP9_COMP <S2SV_ModStart> ) { VP9_COMMON * const cm = & cpi -> common ; MACROBLOCK * const x = & cpi -> mb ; MACROBLOCKD * const xd = & cpi -> e_mbd ; MODE_INFO * * mi_8x8 = xd -> mi ; const int mi_width = num_8x8_blocks_wide_lookup [ bsize ] ; const int mi_height = num_8x8_blocks_high_lookup [ bsize ] ; const int mis_width = num_8x8_blocks_wide_lookup [ bsize ] ; const int mis_height = num_8x8_blocks_high_lookup [ bsize ] ; const int mis_height = num_8x8_blocks_wide_lookup [ bsize ] ; const int mis_width = num_8x8_blocks_wide_lookup [ bsize ] ; const int mis_height = num_8x8_blocks_high_lookup [ bsize ] ; const int mis_height = num_,0
1517,"<S2SV_ModStart> key ) { <S2SV_ModEnd> unsigned char key2 <S2SV_ModStart> 8 ] ; <S2SV_ModEnd> crypto_skcipher * tfm_des <S2SV_ModStart> crypto_skcipher * tfm_des = crypto_alloc_skcipher ( ""ecb(des)"", 0, CRYPTO_ALG_ASYNC ) ; if ( IS_ERR ( tfm_des ) ) { rc = PTR_ERR ( tfm_des ) ; cifs_dbg ( VFS, ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> des <S2SV_blank> crypto <S2SV_blank> API\\n"" ) ; goto smbhash_err ; } <S2SV_ModStart> crypto_alloc_skcipher ( ""ecb(des)"", 0, CRYPTO_ALG_ASYNC ) ; if ( IS_ERR ( tfm_des ) ) { rc = PTR_ERR ( tfm_des ) ; cifs_dbg ( VFS, ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> des <S2SV_blank> crypto <S2SV_blank> API\\n"" ) ; goto smbhash_err ; } req = skcipher_request_alloc ( GFP_KERNEL ) ; if (! req ) { rc = - ENOMEM ; cifs_dbg ( VFS, ""could <S2SV_blank> not <S2SV_blank> allocate <S2SV_blank> des <S2SV_blank> crypto <S2SV_blank> API",0
1518,<S2SV_ModStart> x ) { <S2SV_ModEnd> psf -> header <S2SV_ModStart> psf -> header [ psf -> psfindex ] = ( x >> 24 ) ; psf -> header [ psf -> psfindex ++ ] = ( x >> 16 ) ; psf -> header [ psf -> psfindex ++ ] = ( x >> 8 ) ; psf -> header [ psf -> psfindex ++ ] = ( x >> 12 ) ; psf -> header [ psf -> psfindex ++ ] = ( x >> 16 ) ; psf -> header [ psf -> psfindex ++ ] = ( x >> 8 ) ; psf -> header [ psf -> psfindex ++ ] = ( x >> 16 ) ; psf -> header [ psf -> psfindex ++ ] = ( x >> 8 ) ; psf -> header [ psf -> psfindex ++ ] = ( x >> 16 ) ; psf -> header [ psf -> psfindex ++ ] = ( x >> 12 ) ; psf -> header [ psf -> psfindex ++ ] = ( x >> 8 ) ; psf -> header [ psf -> psfindex ++ ] = ( x >> 12 ) ; psf -> header [ psf -> psfindex ++ ] = ( x >> 8 ) ; psf -> header [ psf -> psfindex ++ ] = ( x >> 16 ) ; psf -> header [ psf ->,0
1519,"<S2SV_ModStart> value ; int position, zeroes, i, j ; char bits [ 65 ] ; if ( ctx -> trace_enable ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } position = get_bits_count ( gbc ) ; zeroes = i = 0 ; while ( 1 ) { if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( get_bits_left ( gbc ) < zeroes + 1 ) { av_log ( ctx -> log_ctx, AV_LOG_ERROR, ""Invalid <S2SV_blank> uvlc <S2SV_blank> code <S2SV_blank> at <S2SV_blank> "" ""%s: <S2SV_blank> bitstream <S2SV_blank> ended.\\n"", name ) ; return AVERROR_INVALIDDATA ; } if ( ctx -> trace_enable ) position = get_bits",0
1520,<S2SV_ModStart> += delta ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1521,"<S2SV_ModStart>, KVM_ISA_VMX ) ; switch ( exit_reason ) { case EXIT_REASON_PAGE_FAULT : if ( is_page_fault ( intr_info ) &&! ( vmcs12 -> guest_cr0 & X86_CR0_TS ) ) return enable_ept ; else if ( is_no_device ( intr_info ) &&! ( vmcs12 -> guest_cr0 & X86_CR0_TS ) ) return enable_ept ; else if ( is_no_device ( intr_info ) &&! ( vmcs12 -> guest_cr0 & X86_CR0_TS ) ) return enable_ept ; else if ( is_no_device ( intr_info ) &&! ( vmcs12 -> guest_cr0 & X86_CR0_TS ) ) return enable_ept ; else if ( is_no_device ( intr_info ) &&! ( vmcs12 -> guest_cr0 & X86_CR0_TS ) ) return enable_ept ; else if ( vmcs12 -> guest_cr0 & X86_CR0_TS ) return enable_ept ;",0
1522,"<S2SV_ModStart> { } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~"", c ) || c >= 128 ) { param -> name = p + i ; } else if ( isalnum ( c ) || strchr ( ""!#$%&\'*+-.^_`|~",0
1523,"<S2SV_ModStart> -> http_contentlen. ptr = NULL, packet -> http_contentlen. len = 0, packet -> http_cookie. ptr = NULL, packet -> http_cookie. len = 0, packet -> http_origin. ptr = NULL, packet -> http_origin. len = 0, packet -> http_x_session_type. ptr = NULL, packet -> http_x_session_type. ptr = NULL, packet -> http_x_session_type. len = 0, packet -> server_line. ptr = NULL, packet -> server_line. len = 0,",0
1524,<S2SV_ModStart> path ) ; <S2SV_ModEnd> out : return,1
1525,"<S2SV_ModStart> ++ r ; if ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) return r ; if ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) > entries ) return r ; if ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) > entries ) return r ; if ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) return r ; if ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) return r ; if ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) > entries ) return r ; if ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) > entries ) return r ; if ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) return r ; if ( ( int ) floor ( pow ( ( float ) r + 1, dim ) ) <= entries ) return r ;",0
1526,"<S2SV_ModStart>, y, MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart>, y, MagickMin <S2SV_ModEnd> ( 4, <S2SV_ModStart>, exception ) ; if ( q == ( PixelPacket * ) NULL ) return MagickFalse ; c0 = ReadBlobLSBShort ( image ) ; c1 = ReadBlobLSBLong ( image ) ; bits = ReadBlobLSBLong ( image ) ; CalculateColors ( c0, c1, & colors, MagickFalse ) ; for ( j = 0 ; j < 4 ; j ++ ) { if ( ( x + i ) < ( ssize_t ) dds_info -> width && ( y + j ) < ( ssize_t ) dds_info -> height ) { code = ( unsigned char ) ( ( bits >> ( ( j * 4 + i ) * 2 ) ) & 0x3 ) ; SetPixelRed ( q, ScaleCharToQuantum ( colors. r [ code ] ) ) ; SetPixelGreen ( q, ScaleCharToQuantum ( colors. g [ code ] ) ) ; SetPixelBlue ( q, ScaleCharToQuantum ( colors. b [ code ] ) ) ; SetPixelOpacity ( q, ScaleCharToQuantum ( colors",0
1527,"<S2SV_ModStart> ; } if ( iph -> tot_len < iph -> ihl * 4 ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INDISCARDS ) ; goto drop ; } if ( iph -> tot_len < iph -> ihl * 4 ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INDISCARDS ) ; goto drop ; } if ( iph -> tot_len < iph -> ihl * 4 ) { IP_INC_STATS_BH ( dev_net ( dev ), IPSTATS_MIB_INDISCARDS ) ; goto drop ; } if ( iph -> ihl == 5 ) { memset ( IPCB ( skb ), 0, sizeof ( struct inet_skb_parm ) ) ; return 0 ; } if ( iph -> ihl == 5 ) { memset ( IPCB ( skb ), 0, sizeof ( struct inet_skb_parm ) ) ; return 0 ; } if ( iph -> ihl == 5 ) { memset ( IPCB ( sk",0
1528,<S2SV_ModStart> int ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> EINTR ) { TEMP_FAILURE_RETRY ( <S2SV_ModStart> MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY ( <S2SV_ModStart> MSG_NOSIGNAL ) ; TEMP_FAILURE_RETRY (,0
1529,"<S2SV_ModStart> action ) { sprintf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> m <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> %12.3f <S2SV_blank> c\\n"", <S2SV_ModStart> action ) ; printf ( outputbuffer <S2SV_ModEnd>, "" <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> %12.3f <S2SV_blank> 0 <S2SV_blank> c <S2SV_blank> %s\\n"", <S2SV_ModStart> action ) ; printf ( <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>",0
1530,"<S2SV_ModStart> cfg ) { <S2SV_ModEnd> memset ( cfg <S2SV_ModStart> ; if ( strcmp ( argv [ i ], ""debug_file="", 12 ) == 0 ) cfg -> debug_file = stdout ; else if ( strcmp ( argv [ i ], ""manual"" ) == 0 ) cfg -> manual = 1 ; if ( strcmp ( argv [ i ], ""alwaysok"" ) == 0 ) cfg -> alwaysok = 1 ; if ( strcmp ( argv [ i ], ""interactive"" ) == 0 ) cfg -> interactive = 1 ; if ( strcmp ( argv [ i ], ""cue"" ) == 0 ) cfg -> cue = 1 ; if ( strcmp ( argv [ i ], ""nouserok"" ) == 0 ) cfg -> nouserok = 1 ; if ( strcmp ( argv [ i ], ""alwaysok"" ) == 0 ) cfg -> alwaysok = 1 ; if ( strcmp ( argv [ i ], ""cue"" ) == 0 ) cfg -> cue = 1 ; if ( strcmp ( argv [ i ], ""cue"" ) == 0 ) cfg -> cue = 1 ; if ( strcmp ( argv [ i ], ""nodetect"" ) == 0 ) cfg -> nodetect = 1 ; if",0
1531,"<S2SV_ModStart> F2FS_IPU_FSYNC ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_FSYNC ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_FSYNC ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_UTIL ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_FSYNC ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_FSYNC ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_UTIL ; if (! test_opt ( sbi, LFS ) ) sm_info -> ipu_policy = 1 << F2FS_IPU_UT",0
1532,<S2SV_ModStart> outpos += <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
1533,"<S2SV_ModStart> FALSE ; WLog_VRB ( AUTODETECT_TAG <S2SV_ModEnd>, ""received <S2SV_blank> Bandwidth <S2SV_blank> Measure <S2SV_blank> Results <S2SV_blank> PDU"" )",0
1534,<S2SV_ModStart> ; # endif # if ( CONFIG_REALTIME_ONLY & CONFIG_ONTHEFLY_BITPACKING ) if ( cpi -> b_multi_threaded!= 0 ) last_row_current_mb_col = & cpi -> mt_current_mb_col [ mb_row - 1 ] ; else last_row_current_mb_col = & cpi -> mt_current_mb_col [ mb_row - 1 ] ; else last_row_current_mb_col = & cpi -> mt_current_mb_col [ mb_row - 1 ] ; if ( cpi -> b_multi_threaded!= 0 ) last_row_current_mb_col = & cpi -> mt_current_mb_col [ mb_row - 1 ] ; else last_row_current_mb_col = & cpi -> mt_current_mb_col [ mb_row - 1 ] ; else last_row_current_mb_col = & cpi -> mt_current_mb_col [ mb_row - 1 ] ; if ( cpi -> b_multi_threaded!= 0 ) last_row_current_mb_col =,0
1535,"<S2SV_ModStart> ( pvc ) ; dev = alloc_netdev ( 0, ""pvceth%d"", ether_setup ) ; if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENOBUFS ; } if ( type == ARPHRD_ETHER ) dev = alloc_netdev ( 0, ""pvceth%d"", pvc_setup ) ; if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ; delete_unused_pvcs ( hdlc ) ; return - ENOBUFS ; } if ( type == ARPHRD_ETHER ) dev = alloc_netdev ( 0, ""pvceth%d"", pvc_setup ) ; else dev = alloc_netdev ( 0, ""pvc%d"", pvc_setup ) ; if (! dev ) { netdev_warn ( frad, ""Memory <S2SV_blank> squeeze <S2SV_blank> on <S2SV_blank> fr_pvc()\\n"" ) ;",0
1536,"<S2SV_ModStart> * data ; struct stream packet = * s ; <S2SV_ModStart> length ) ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } <S2SV_ModStart> ; if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(), <S2SV_blank> consume <S2SV_blank> of <S2SV_blank> packet <S2SV_blank> from <S2SV_blank> stream <S2SV_blank> would <S2SV_blank> overrun"", & packet ) ; } if (! s_check_rem ( s, length ) ) { rdp_protocol_error ( ""cliprdr_process(),",0
1537,"<S2SV_ModStart> # if CONFIG_MULTITHREAD vpx_de_alloc_temp_buffers <S2SV_ModEnd> ( pbi,",0
1538,"<S2SV_ModStart> case FORM_INPUT_CHECKBOX : if ( form -> checked ) buf -> currentLine -> lineBuf [ spos ] = '*' ; else buf -> currentLine -> lineBuf [ spos ] ='<S2SV_blank>'; break ; case FORM_INPUT_FILE : case FORM_INPUT_PASSWORD : if ( form -> checked ) buf -> currentLine -> lineBuf [ spos ] ='<S2SV_blank>'; else buf -> currentLine -> lineBuf [ spos ] ='<S2SV_blank>'; break ; case FORM_INPUT_RADIO : if ( form -> type == FORM_SELECT ) { p = form -> label -> ptr ; updateSelectOption ( form, form -> select_option ) ; } else if ( form -> type == FORM_TEXTAREA ) { int n = a -> y - buf -> currentLine -> linenumber ; if ( n > 0 ) for ( ; l && n ; l = l -> prev, n -- ) for ( ; l && n ; l = l -> next, n ++ ) for ( ; l && n ; l = l -> prev, n",0
1539,<S2SV_ModStart> 0 ) { xWantedSize += xHeapStructSize ; if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } else { xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ; } } else { mtCOVERAGE_TEST_MARKER ( ) ; } if ( ( xWantedSize > 0 ) && ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += xHeapStructSize ; if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += xHeapStructSize ; if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { xWantedSize += xHeapStructSize ; if ( ( xWantedSize & portBYTE_ALIGNMENT_MASK )!= 0x00 ) { x,0
1540,"<S2SV_ModStart> tx_type, const tran_low_t <S2SV_ModEnd> * input,",1
1541,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1542,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> fpDiff ( TIFF <S2SV_ModStart> ) ; assert ( ( cc % ( bps * stride ) ) == 0 ) ; if (! tmp ) return - 1 <S2SV_ModStart> (! tmp ) return - 1 ; _TIFFmemcpy ( tmp, cp0, cc ) ; for ( count = 0 ; count < wc ; count ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ; byte ++ ) { uint32 byte ; for ( byte = 0 ; byte < bps ;",0
1543,"<S2SV_ModStart> STREAM s ) { # if CONFIG_HIGHBITDEPTH uint16 num_updates ; # endif <S2SV_ModStart> int i ; in_uint16_le ( s, left ) ; in_uint16_le ( s, top ) ; in_uint16_le ( s, right ) ; in_uint16_le ( s, bottom ) ; in_uint16_le ( s, width ) ; in_uint16_le ( s, height ) ; in_uint16_le ( s, bufsize ) ; for ( i = 0 ; i < num_updates ; i ++ ) { in_uint16_le ( s, left ) ; in_uint16_le ( s, right ) ; in_uint16_le ( s, bottom ) ; in_uint16_le ( s, width ) ; in_uint16_le ( s, height ) ; in_uint16_le ( s, bpp ) ; Bpp = ( bpp + 7 ) / 8 ; if (! compress ) { int y ; bmpdata = ( uint8 * ) xmalloc ( width * height * Bpp ) ; for ( y = 0 ; y < height ; y ++ ) { in",0
1544,"<S2SV_ModStart> stok ( option <S2SV_ModEnd>, "" <S2SV_blank> =\\t,"", <S2SV_ModStart> ovalue ) ; if ( ovalue == NULL ) { mprLog ( ""error <S2SV_blank> appweb <S2SV_blank> config"", 0, ""Missing <S2SV_blank> filename"" ) ; return MPR_ERR_BAD_SYNTAX ; }",0
1545,"<S2SV_ModStart> tx_size, vpx_coeff_stats <S2SV_ModEnd> * coef_branch_ct ) <S2SV_ModStart> coef_branch_ct ) { vpx_coeff_probs_model * coef_probs = cpi -> frame_coef_probs [ tx_size ] ; vpx_coeff_count * coef_counts = cpi -> coef_counts [ tx_size ] ; vpx_tree_probs_from_distribution ( vp9_coef_tree, coef_branch_ct [ i ] [ j ] [ k ] [ l ] ) ; for ( i = 0 ; i < PLANE_TYPES ; ++ i ) { for ( k = 0 ; k < COEF_BANDS ; ++ k ) { vpx_tree_probs_from_distribution ( vp9_coef_tree, coef_branch_ct [ i ] [ j ] [ k ] [ l ], coef_counts [ i ] [ j ] [ k ] [ l ] ) ; coef_probs [ i ] [ j ] [ k ] [ l ] = eob_branch_ct [ i ] [ j ] [ k ] [ l ] - coef_branch_ct [ i ] [ j ] [ k ] [",0
1546,"<S2SV_ModStart> } ; struct termios old = { } ; <S2SV_ModStart> name ) ; old = tcgetattr ( fd, & tc ) ; if ( old < 0 ) return log_warning_errno ( errno, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> UTF-8 <S2SV_blank> term <S2SV_blank> processing <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; r = loop_write ( fd, ""\\033%G"", ""\\033%@"", 3, false ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; r = tcsetattr ( fd, & tc, & tc ) ; if ( r < 0 ) return log_warning_errno ( r, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> iutf8 <S2SV_blank> flag <S2SV_blank> on <S2SV_blank> %s: <S2SV_blank> %m"", enable_disable ( utf8 ), name ) ; r = tcgetattr ( fd, & tc ) ; if ( r < 0 ) return log_warning_errno ( errno, ""Failed <S2SV_blank> to <S2SV_blank> %s <S2SV_blank> i",0
1547,"<S2SV_ModStart> <S2SV_null> <S2SV_null> static int <S2SV_ModEnd> su3000_frontend_attach ( struct <S2SV_ModStart> ] = { 0xe, 0x80, 0 } ; if ( dvb_usb_generic_rw ( d, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( dvb_usb_generic_rw ( d, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( dvb_usb_generic_rw ( d, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; if ( dvb_usb_generic_rw ( d, obuf, 3, ibuf, 1, 0 ) < 0 ) err ( ""command <S2SV_blank> 0x0e <S2SV_blank> transfer <S2SV_blank> failed."" ) ; d -> fe_adap [ 0 ]. fe = dvb_attach ( ds3000_attach, & su3000_ds3000_config, & d ->",0
1548,"<S2SV_ModStart> * iface, vpx_codec_enc_cfg_t <S2SV_ModEnd> * cfg, <S2SV_ModStart> VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_XMA ) &&! ( iface -> caps & VPX_CODEC_CAP_XMA ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_PSNR ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_CODEC_USE_OUTPUT_PARTITION ) &&! ( iface -> caps & VPX_CODEC_CAP_OUTPUT_PARTITION ) ) res = VPX_CODEC_INCAPABLE ; else if ( ( flags & VPX_",0
1549,"<S2SV_ModStart> int stride, vpx_bit_depth_t bit_depth, <S2SV_ModStart> const kernel = vpx_get_interp_kernel ( xd -> mi [ 0 ] -> mbmi. interp_filter ) ; enum mv_precision mv_precision_uv ; int uv_stride ; if ( uv_block_size == 8 ) { uv_stride = ( stride + 1 ) >> 1 ; mv_precision_uv = MV_PRECISION_Q4 ; } else { uv_stride = ( stride + 1 ) >> 1 ; mv_precision_uv = MV_PRECISION_Q3 ; } vpx_build_inter_predictor ( y_mb_ptr, stride, & pred [ 0 ], 16, & mv, scale, 16, 16, which_mv, kernel, mv_precision_uv, x, y ) ; vpx_build_inter_predictor ( u_mb_ptr, uv_stride, & pred [ 256 ], uv_block_size, & mv, scale, uv_block_size, uv_block_size, which_mv, kernel, mv_precision_uv, x, y ) ; vpx_build_inter_predictor (",0
1550,"<S2SV_ModStart> = TRUE ; if ( * buf =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } bufp = find_optparam ( buf ) ; if (! bufp ) { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; } ++ bufp ; if ( * bufp =='<S2SV_blank>') { config_error_add ( ""Not <S2SV_blank> a <S2SV_blank> config <S2SV_blank> statement, <S2SV_blank> missing <S2SV_blank> \'=\'"" ) ; return FALSE ; }",0
1551,"<S2SV_ModStart> <S2SV_null> <S2SV_null> <S2SV_null> cJSON * <S2SV_ModEnd> cJSON_CreateFloatArray ( double <S2SV_ModStart> = cJSON_CreateFloat ( <S2SV_ModEnd> numbers [ i <S2SV_ModStart> i ] ) ; if (! i ) a -> child = n ; else suffix_object ( p, n ) ; return a ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null> <S2SV_null>",0
1552,"<S2SV_ModStart> tk_status ) ; if ( status == NLM_LCK_DENIED_GRACE_PERIOD ) { rpc_delay ( task, NLMCLNT_GRACE_WAIT ) ; goto die ; } if ( status == NLM_LCK_GRANTED ) printk ( KERN_WARNING ""lockd: <S2SV_blank> unexpected <S2SV_blank> unlock <S2SV_blank> status: <S2SV_blank> %d\\n"", status ) ;",0
1553,"<S2SV_ModStart>, n ) ; if ( w == NULL ) w = get_window ( f, n ) ; if ( w == NULL ) w = f -> channel_buffers [ i ] [ left ] ; if ( w == NULL ) w = f -> channel_buffers [ i ] [ left ] ; if ( w == NULL ) w = f -> channel_buffers [ i ] [ left ] ; if ( w == NULL ) w = f -> channel_buffers [ i ] [ left ] ; if ( w == NULL ) w = f -> channel_buffers [ i ] [ left ] ; if ( w == NULL ) w = f -> channel_buffers [ i ] [ left ] ; if ( w == NULL ) w = f -> channel_buffers [ i ] [ left ] ; if ( w == NULL ) w = f -> channel_buffers [ i ] [ left ] ; if ( w == NULL ) w = f -> channel_buffers [ i ] [ left ] ; if ( w == NULL ) w = f -> channel_buffers [ i ] [ left ] ; if ( w == NULL ) w = f -> channel_buffers [ i ] [ left ] ;",0
1554,<S2SV_ModStart> 4 ) ; if ( idx + 4 > len ) return NULL ; <S2SV_ModStart> ) ; for ( j = 0 ; j < 4 ; j ++ ) a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len >> 1 ) ; for ( j = 0 ; j < 4 ; j ++ ) a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len >> 1 ) ; for ( j = 0 ; j < 4 ; j ++ ) a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len >> 1 ) ; a -> names [ i ]. data [ j ] = ( buf + idx ) [ j * 2 ] ; idx += pad_to_4byte ( a -> names [ i ]. len >> 1 ) ; for ( j = 0 ; j < 4 ; j ++ ) a -> names [ i ]. data,0
1555,"<S2SV_ModStart> data_end ) { <S2SV_ModEnd> const int aligned_mi_cols <S2SV_ModStart> int num_workers = MIN ( pbi -> oxcf. max_threads & ~ 1, cm -> mi_cols ) ; const int tile_cols = cm -> log2_tile_cols ; const int tile_rows = cm -> log2_tile_rows ; const int num_workers = MIN ( pbi -> oxcf. max_threads & ~ 1, tile_cols ) ; TileBuffer tile_buffers [ 1 << 6 ] ; int final_worker = - 1 ; int i ; CHECK_MEM_ERROR ( cm, pbi -> tile_workers, vpx_malloc ( num_workers * sizeof ( * pbi -> tile_workers ) ) ) ; for ( i = 0 ; i < num_workers ; ++ i ) { VP9Worker * const worker = & pbi -> tile_workers [ i ] ; ++ pbi -> num_tile_workers ; vpx_worker_init ( worker ) ; CHECK_MEM_ERROR ( cm, worker -> data1, vpx_memalign ( 32, sizeof ( TileWorkerData ) ) ) ; CHECK_MEM_ERROR ( cm, worker",0
1556,"<S2SV_ModStart> ; offset = <S2SV_ModEnd> base + get4 <S2SV_ModStart> ; switch ( <S2SV_ModEnd> tag ) { <S2SV_ModStart> ) ; break ; case 0x505244 : fseek ( ifp, 8, SEEK_CUR ) ; high = get2 ( ) ; wide = get2 ( ) ; # ifdef LIBRAW_LIBRARY_BUILD case 0x524946 : if (! strncasecmp ( model, ""DSLR-A100"", 9 ) ) { fseek ( ifp, 8, SEEK_CUR ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 0 ] = get2 ( ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 1 ] = get2 ( ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 3 ] = get2 ( ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_Tungsten ] [ 4 ] = get2 ( ) ; imgdata. color. WB_Coeffs [ LIBRAW_WBI_T",0
1557,"<S2SV_ModStart> struct segmentation * seg = cm -> seg ; const double base_q = vp9_convert_qindex_to_q ( cm -> base_qindex ) ; const int base_rdmult = vp9_compute_rd_mult ( cpi, cm -> y_dc_delta_q ) ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; } for ( i = ENERGY_MIN ; i <= ENERGY_MAX ; i ++ ) { int qindex_delta, segment_rdmult ; if ( Q_RATIO ( i ) == 1 ) { RDMULT_RATIO ( i ) = 1 ; continue ; } qindex_delta = vp9_compute_qdelta ( & cpi -> rc, base_q, base_q * Q_RATIO ( i ) ) ; vp9_set_segdata ( seg, SEGMENT_ID ( i ), SEG_LVL_ALT_Q, qindex_delta ) ; vp9_enable_segfeature ( seg, SEGMENT_ID ( i ), SEG_LVL_",0
1558,"<S2SV_ModStart> int bychunk ; if ( bitspersample > 8 && samplesperpixel > 1 ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> different <S2SV_blank> planar <S2SV_blank> configuration <S2SV_blank> w/ <S2SV_blank> bits/sample <S2SV_blank>!= <S2SV_blank> 8\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; } if ( shortv == config && bitspersample!= 8 && samplesperpixel > 1 ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> different <S2SV_blank> planar <S2SV_blank> configuration <S2SV_blank> w/ <S2SV_blank> samples/sample <S2SV_blank>!= <S2SV_blank> 8\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; } if ( shortv == config && bitspersample == 8 && samplesperpixel > 1 ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> different <S2SV_blank> planar <S2SV_blank> configuration <S2SV_blank> w/ <S2SV_blank> bits/sample <S2SV_blank>!= <S2SV_blank> 8\\n"", TIFFFileName ( in ) ) ; return ( NULL ) ; } if ( shortv == config && bitspersample == 8 && samplesperpixel > 1 ) { fprintf ( stderr, ""%s: <S2SV_blank> Cannot <S2SV_blank> handle <S2SV_blank> different <S2SV_blank> planar <S2SV_blank> configuration <S2SV_blank> w/ <S2SV_blank> bits/sample <S2SV_blank>!= <S2SV_blank>",0
1559,<S2SV_ModStart> -> error_code ) { vpx_codec_err_t err_code = error -> error_code ; vpx_codec_alg_priv_t * const priv = ctx -> priv ; vpx_codec_alg_priv_t * const priv = ctx -> priv ; vpx_codec_alg_priv_t * const priv = ctx -> priv ; ctx -> base. err_detail = error -> has_detail? priv -> base. err_detail : NULL ; return err_code <S2SV_ModEnd> ; } <S2SV_null>,0
1560,"<S2SV_ModStart>, 1, <S2SV_ModEnd> regs, address",1
1561,<S2SV_ModStart> : <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug> <S2SV_EndBug>,0
1562,"<S2SV_ModStart> * ps_cur_slice ; pocstruct_t * ps_prev_poc, * ps_cur_poc ; <S2SV_ModStart> ps_cur_poc ; ps_prev_poc = ps_dec -> ps_prev_poc ; ps_dec -> ps_prev_poc = NULL ; ps_dec -> ps_cur_poc = NULL ; ps_dec -> ps_cur_sps = NULL ; ps_dec -> ps_dpb_mgr -> pv_codec_handle = ps_dec ; ps_dec -> s_cab_dec_env. pv_codec_handle = ps_dec ; ps_dec -> s_cab_dec_env. pv_codec_handle = ps_dec ; ps_dec -> ps_dpb_mgr -> pv_codec_handle = ps_dec ; ps_dec -> ps_sei -> u1_is_valid = 0 ; ps_dec -> ps_dpb_mgr -> pv_codec_handle = ps_dec ; ps_dec -> ps_dpb_mgr -> pv_codec_handle = ps_dec ; ps_dec -> ps_dpb_mgr -> pv",0
1563,<S2SV_ModStart> ; if (! mmget_still_valid ( mm ) ||! mmget_still_valid ( mm ) ||! mmget_still_valid ( mm ) ||! mmget_still_valid ( mm ) ||! mmget_still_valid ( mm ) ||! mmget_still_valid ( mm ) ||! mmget_still_valid ( mm ) ||! mmget_still_valid ( mm ) ||! mmget_still_valid ( mm ) ||! mmget_still_valid ( mm ) ||! mmget_still_valid ( mm ) ||! mmget_still_valid ( mm ) ||! mmget_still_valid ( mm ) ||! mmget_still_valid ( mm ) ||! mmget_still_valid ( mm ) ||! mmget_still_valid ( mm ) ||! mmget_still_valid ( mm ) ||! mmget_still_valid ( mm ) ||! mmget_still_valid ( mm ) ||! mmget_still_valid ( mm ) ||! mmget_still_valid ( mm,0
1564,"<S2SV_ModStart> ssize_t ret = TEMP_FAILURE_RETRY ( <S2SV_ModStart> sizeof ( btpan_cb. congest_packet ) ) ; if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> from <S2SV_blank> driver: <S2SV_blank> %s"", __func__, strerror ( errno ) ) ; GKI_freebuf ( buffer ) ; btsock_thread_add_fd ( pan_pth, fd, 0, SOCK_THREAD_FD_RD, 0 ) ; break ; } if ( ret < 0 ) { BTIF_TRACE_ERROR ( ""%s <S2SV_blank> unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> from <S2SV_blank> driver: <S2SV_blank> %s"", __func__, strerror ( errno ) ) ; GKI_freebuf ( buffer ) ; btsock_thread_add_fd ( pan_pth, fd, 0, SOCK_THREAD_FD_RD, 0 ) ; return ; }",0
1565,<S2SV_ModStart> <S2SV_null> <S2SV_null> static <S2SV_ModEnd> int getnum ( <S2SV_ModStart> = 0 ; if (! isdigit ( * * fmt ) ) return df ; else { int a = 0 ; do { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } while ( isdigit ( * * fmt ) ) ; if (! isdigit ( * * fmt ) ) return df ; else { int a = 0 ; do { a = a * 10 + * ( ( * * fmt ) ++ ; } while ( isdigit ( * * fmt ) ) ; if (! isdigit ( * * fmt ) ) return df ; else { int a = 0 ; do { a = a * 10 + * ( ( * fmt ) ++ ) - '0' ; } while ( isdigit ( * * fmt ) ) ; if (! isdigit ( * * fmt ) ) return df ; else { int a = 0 ; do { a = a * 10 + * ( ( * * fmt ) ++ ) - '0' ; } while ( isdigit ( * * fmt ) ) ; },0
1566,"<S2SV_ModStart> g, g -> allgc, g -> reallyold ) ; markold ( g, g -> old, g -> old ) ; markold ( g, g -> allgc, g -> reallyold ) ; markold ( g, g -> allgc, g -> finobj, g -> finobjrold ) ; atomic ( L ) ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> allgc = * psurvival ; g -> survival = * psurvival ; g -> allgc = g -> allgc ; psurvival = sweepgen ( L, g, & g -> allgc, g -> survival ) ; sweepgen ( L, g, psurvival, g -> reallyold ) ; g -> reallyold = g -> old ; g -> old = * psurvival ; g -> survival = g -> allgc ; psurvival = sweepgen ( L, g, & g -> allgc,",0
1567,<S2SV_ModStart> else return - ENODEV <S2SV_ModEnd> ; deb_info (,0
1568,"<S2SV_ModStart> ; ( void ) phase ; <S2SV_ModStart>!= PROTOCOL_EARLY ) return NULL ; <S2SV_ModEnd> memset ( buffer <S2SV_ModStart> buffer ) ; if ( safe_memcmp ( buffer, ssl_request, sizeof ssl_request ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } if ( safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } if ( safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c, 1 ) ; } if ( safe_memcmp ( buffer, ssl_ok, sizeof ssl_ok ) ) { s_log ( LOG_ERR, ""PostgreSQL <S2SV_blank> client <S2SV_blank> did <S2SV_blank> not <S2SV_blank> request <S2SV_blank> TLS, <S2SV_blank> rejecting"" ) ; throw_exception ( c",0
1569,"<S2SV_ModStart> int cib_tls_signon ( cib_t <S2SV_ModEnd> * cib, <S2SV_ModStart> struct sockaddr_in addr <S2SV_ModEnd> ; int rc <S2SV_ModStart> = 0 ; <S2SV_ModEnd> struct mainloop_fd_callbacks cib_fd_callbacks <S2SV_ModStart> cib_fd_callbacks = { <S2SV_ModEnd> dispatch = cib_remote_dispatch <S2SV_ModStart> destroy = cib_remote_connection_destroy, } ; connection -> socket = 0 ; connection -> session = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } connection -> socket = 0 ; connection -> session = NULL ; sock = socket ( PF_INET, SOCK_STREAM, IPPROTO_TCP ) ; if ( sock == - 1 ) { crm_perror ( LOG_ERR, ""Socket <S2SV_blank> creation <S2SV_blank> failed"" ) ; return - 1 ; } bzero ( & hints, sizeof ( hints ) ) ; hints. ai_flags = AI_CANONNAME ; hints. ai_family = AF_INET ; hints. ai_socktype = SOCK_RAW ; if",0
1570,"<S2SV_ModStart> -> common ; memset <S2SV_ModEnd> ( cpi, <S2SV_ModStart> ; cpi -> gf_bitrate_adjustment = 0 ; cpi -> frames_till_gf_update_due = 0 ; cpi -> non_gf_bitrate_adjustment = 0 ; cpi -> prob_last_coded = 128 ; cpi -> prob_gf_coded = 63 ; cpi -> prob_intra_coded = 63 ; cpi -> recent_ref_frame_usage [ INTRA_FRAME ] = 1 ; cpi -> recent_ref_frame_usage [ LAST_FRAME ] = 1 ; cpi -> common. ref_frame_sign_bias [ LAST_FRAME ] = 1 ; cpi -> common. ref_frame_sign_bias [ GOLDEN_FRAME ] = 1 ; cpi -> common. ref_frame_sign_bias [ GOLDEN_FRAME ] = 1 ; cpi -> recent_ref_frame_usage [ INTRA_FRAME ] = 1 ; cpi -> recent_ref_frame_usage [ LAST_FRAME ] = 1 ; cpi -> common. ref_frame_sign_bias [ LAST_FRAME ] = 1 ; cpi",0
1571,"<S2SV_ModStart> & __FAIL_ADDR_MASK ; perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS <S2SV_ModEnd>, 1, <S2SV_ModStart> -> maj_flt ++ ; perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS_MIN <S2SV_ModEnd>, 1, <S2SV_ModStart> -> min_flt ++ ; perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS_MIN <S2SV_ModEnd>, 1, <S2SV_ModStart> -> maj_flt ++ ; perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS_OVERFLOW, 1, 0, regs, address ) ; } else { tsk -> maj_flt ++ ; perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS_OVERFLOW, 1, 0, regs, address ) ; } if ( fault & VM_FAULT_OVERFLOW ) { tsk -> maj_flt ++ ; perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS_OVERFLOW, 1, 0, regs, address ) ; } else { tsk -> maj_flt ++ ; perf_sw_event ( PERF_COUNT_SW_PAGE_FAULTS_OVERFLOW, 1, 0",0
1572,"<S2SV_ModStart> ndo_vflag ) { ND_TCHECK ( bp [ 24 ] ) ; if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ) ; } if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%d"", bp [ 24 ] & 0x07 ) ) ; } if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 24 ] & 0x08 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> sflag"" ) ) ; } if ( bp [ 24 ] & 0x07 ) { ND_PRINT ( ( ndo, "" <S2SV_blank> robustness=%",0
1573,<S2SV_ModStart> case EXPR_NOT : if (! expr -> boolean. set ) { * set_rtrn =! * set_rtrn ; return false ; } <S2SV_ModStart> case EXPR_UNARY_PLUS : if (! expr -> boolean. set ) * set_rtrn =! * set_rtrn ; return ok ; } <S2SV_ModStart> case EXPR_ADD : if (! expr -> boolean. set ) * set_rtrn =! * set_rtrn ; return ok ; case EXPR_SUBTRACT : if (! expr -> boolean. set ) * set_rtrn =! * set_rtrn ; return ok ; } <S2SV_ModStart> case EXPR_UNARY_MINUS : if (! expr -> boolean. set ) * set_rtrn =! * set_rtrn ; return ok ; case EXPR_SUBTRACT : if (! expr -> boolean. set ) * set_rtrn =! * set_rtrn ; return ok ; case EXPR_UNARY_MINUS : if (! expr -> boolean. set ) * set_rtrn =! * set_rtrn ; return ok,0
1574,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; }",0
1575,"<S2SV_ModStart> int mptctl_mpt_command ( MPT_ADAPTER * ioc, <S2SV_ModStart> mpt_ioctl_command karg ; <S2SV_ModEnd> struct mpt_ioctl_command karg <S2SV_ModStart> mpt_ioctl_command karg ; <S2SV_ModEnd> if ( copy_from_user <S2SV_ModStart> EFAULT ; } rc = mptctl_do_mpt_command ( karg, & uarg -> MF ) ; if ( rc < 0 ) { printk ( KERN_DEBUG MYNAM ""%s::mpt_command() <S2SV_blank> @%d <S2SV_blank> - <S2SV_blank> "" ""Unable <S2SV_blank> to <S2SV_blank> read <S2SV_blank> in <S2SV_blank> mpt_ioctl_command <S2SV_blank> struct <S2SV_blank> @ <S2SV_blank> %p\\n"", __FILE__, __LINE__, uarg ) ; return rc ; } <S2SV_ModEnd> rc = mptctl_do_mpt_command",0
1576,"<S2SV_ModStart> Image * image ; if ( image == ( Image * ) NULL ) return ( DestroyImageList ( image ) ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; if ( status == MagickFalse ) { LogMagickEvent ( TraceEvent, GetMagickModule ( ), ""%s"", image -> filename ) ; return ( DestroyImageList ( image )",0
1577,"<S2SV_ModStart> = 0 ; if ( jas_stream_getrwcount ( enc -> out ) < mainhdrlen ) { jas_eprintf ( ""cannot <S2SV_blank> read <S2SV_blank> mainhdr <S2SV_blank> marker\\n"" ) ; return - 1 ; } <S2SV_ModStart> = 0 ; if ( jas_stream_getrwcount ( enc -> out ) < mainhdrlen ) { jas_eprintf ( ""cannot <S2SV_blank> read <S2SV_blank> mainhdr <S2SV_blank> marker\\n"" ) ; return - 1 ; } if ( jas_stream_getrwcount ( enc -> out ) < mainhdrlen ) { jas_eprintf ( ""cannot <S2SV_blank> read <S2SV_blank> mainhdr <S2SV_blank> marker\\n"" ) ; return - 1 ; } if ( jas_stream_getrwcount ( enc -> out ) < mainhdrlen ) { jas_eprintf ( ""cannot <S2SV_blank> read <S2SV_blank> mainhdr <S2SV_blank> marker\\n"" ) ; return - 1 ; } if ( jas_stream_getrwcount ( enc -> out ) < mainhdrlen ) { jas_eprintf ( ""cannot <S2SV_blank> read <S2SV_blank> mainhdr <S2SV_blank> marker\\n"" ) ; return - 1 ; } if ( jas_stream_getrwcount (",0
1578,"<S2SV_ModStart>, NULL, WEECHAT_STRING_SPLIT_STRIP_LEFT | WEECHAT_STRING_SPLIT_STRIP_RIGHT | WEECHAT_STRING_SPLIT_COLLAPSE_SEPS <S2SV_ModEnd>, 0, <S2SV_ModStart>, NULL, WEECHAT_STRING_SPLIT_STRIP_LEFT | WEECHAT_STRING_SPLIT_COLLAPSE_SEPS <S2SV_ModEnd>, 0, <S2SV_ModStart>, NULL, WEECHAT_STRING_SPLIT_COLLAPSE_SEPS <S2SV_ModEnd>, 0, <S2SV_ModStart>, WEECHAT_STRING_SPLIT_STRIP_LEFT | WEECHAT_STRING_SPLIT_STRIP_RIGHT | WEECHAT_STRING_SPLIT_COLLAPSE_SEPS <S2SV_ModEnd>, 0, <S2SV_ModStart>, NULL, WEECHAT_STRING_SPLIT_STRIP_RIGHT | WEECHAT_STRING_SPLIT_COLLAPSE_SEPS <S2SV_ModEnd>, 0, <S2SV_ModStart>, NULL, WEECHAT_STRING_SPLIT_COLLAPSE_SEPS <S2SV_ModEnd>, 0, <S2SV_ModStart>, WEECHAT_STRING_SPLIT_STRIP_LEFT | WEECHAT_STRING_SPLIT_STRIP_",0
1579,"<S2SV_ModStart> int decode_uniform ( vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> int v = vpx_read_literal <S2SV_ModEnd> ( r, <S2SV_ModStart> - 191 ; vpx_reader_t * t = vpx_read_literal ( r, l - 1 ) ; vpx_reader_t * t = vpx_read_bit ( r ) ; vpx_reader_t * t = vpx_read_literal ( r, l - 1 ) ; vpx_reader_t * t = vpx_read_bit ( r ) ; vpx_reader_t * t = vpx_read_bit ( r ) ; vpx_reader_t * t = vpx_read_bit ( r ) ; vpx_reader_t * t = vpx_read_literal ( r, l - 1 ) ; vpx_reader_t * t = vpx_read_literal ( r, l - 1 ) ; vpx_reader_t * t = vpx_read_bit ( r ) ; vpx_reader_t * t = vpx_read_bit ( r ) ; vpx_reader_t * t = vpx_read_bit",0
1580,"<S2SV_ModStart> * cert ; giterr_t <S2SV_ModEnd> is_valid ; if <S2SV_ModStart> error ; is_valid = error!= GIT_ECERTIFICATE ; error = t -> owner -> certificate_check_cb ( cert, is_valid, t -> connection_data. host, t -> owner -> message_cb_payload ) ; if ( error < 0 ) return error ; if ( error!= GIT_ECERTIFICATE ) { error = t -> owner -> certificate_check_cb ( cert, is_valid, t -> connection_data. host, t -> owner -> message_cb_payload ) ; if ( error < 0 ) return error ; error = t -> owner -> certificate_check_cb ( cert, is_valid, t -> connection_data. host, t -> owner -> message_cb_payload ) ; if ( error < 0 ) return error ; error = t -> owner -> certificate_check_cb ( cert, is_valid, t -> connection_data. host, t -> owner -> message_cb_payload ) ; if ( error < 0 ) { if (! giterr_last ( ) ) giterr_set ( GITERR_NET, ""user <S2SV_blank> cancelled <S2SV_blank> certificate <S2SV_blank> check",0
1581,"<S2SV_ModStart> costs, const vpx_prob <S2SV_ModEnd> * probs, <S2SV_ModStart> * probs, vpx_tree <S2SV_ModEnd> tree ) {",1
1582,"<S2SV_ModStart> * xd, vpx_reader <S2SV_ModEnd> * r ) <S2SV_ModStart> REFERENCE_MODE mode = vpx_read <S2SV_ModEnd> ( r, <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> comp_inter_prob [ ctx <S2SV_ModStart> cm -> fc -> <S2SV_ModEnd> parallel_decoding_mode ) ++",0
1583,"<S2SV_ModStart>! stream ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; <S2SV_ModStart>! stream ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> allocate <S2SV_blank> new <S2SV_blank> stream."" ) ; if ( prev ) { memcpy ( prev, prev, sizeof ( * prev ) ) ; stream -> index ++ ; prev -> next = stream ; } else { vpx_codec_err_t res ; res = vpx_codec_enc_config_default ( global -> codec -> interface ( ), & stream -> config. cfg, global -> usage ) ; if ( res ) fatal ( ""Failed <S2SV_blank> to <S2SV_blank> get <S2SV_blank> config: <S2SV_blank> %s\\n"", vpx_codec_err_to_string ( res ) ) ; stream -> config. cfg. g_timebase. den = 1000 ; stream -> config. cfg. g_w = 0 ; stream -> config. cfg. g_h = 0 ; stream -> config. stereo_fmt = STEREO_FORMAT_MONO ; stream -> config. write_webm = 0 ; stream -> ebml. <S2SV_ModEnd> last_pts_ms = -",0
1584,"<S2SV_ModStart> nd_opt_mtu * opm = ( const struct nd_opt_mtu * ) cp ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u), <S2SV_blank> length <S2SV_blank> %u: <S2SV_blank> "", tok2str ( icmp6_opt_values, ""dnssl"", opm -> nd_opt_mtu ), opm -> nd_opt_mtu ) ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u), <S2SV_blank> length <S2SV_blank> %u: <S2SV_blank> "", tok2str ( icmp6_opt_values, ""dnssl"", opm -> nd_opt_mtu ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u), <S2SV_blank> length <S2SV_blank> %u: <S2SV_blank> "", tok2str ( icmp6_opt_values, ""dnssl"", opm -> nd_opt_mtu ) ) ) ; ND_PRINT ( ( ndo, ""\\n\\t <S2SV_blank> <S2SV_blank> <S2SV_blank> %s <S2SV_blank> option <S2SV_blank> (%u), <S2SV_blank> length <S2SV_blank> %u",0
1585,"<S2SV_ModStart> = 0 ; if ( yr_re_ast_get_root_node ( * re_ast ) == NULL ) { yr_error ( yr_re_ast_get_root_node_str ( * re_ast ), yr_err ( yr_re_ast_get_root_node_str ( * re_ast ) ), yr_err ( yr_re_ast_get_root_node_str ( * re_ast ) ) ) ; } else { yr_error ( yr_re_ast_get_root_node ( * re_ast ), yr_err ( yr_re_ast_get_root_node_str ( * re_ast ) ), yr_err ( yr_re_ast_get_root_node_str ( * re_ast ) ) ), yr_err ( yr_re_ast_get_root_node_str ( * re_ast ) ) ) ; }",0
1586,"<S2SV_ModStart> ) ) ; <S2SV_ModEnd> ret = var_expand <S2SV_ModStart> <= 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Failed <S2SV_blank> to <S2SV_blank> expand <S2SV_blank> key <S2SV_blank> %s: <S2SV_blank> %s"", key -> key -> key, error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_error ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> = <S2SV_blank> %s"", str_c ( path ), key -> value, & error ) ; return - 1 ; } ret = dict_lookup ( iter -> conn -> dict, iter -> pool, str_c ( path ), & key -> value, & error ) ; if ( ret > 0 ) { auth_request_log_debug ( iter -> auth_request, AUTH_SUBSYS_DB, ""Lookup: <S2SV_blank> %s <S2SV_blank> = <S2SV_blank> %s"", str_c ( path ), key -> value ) ; } else if ( key -> key ->",0
1587,<S2SV_ModStart> ; if ( skb -> len < sizeof ( struct nlattr ) ) { kfree_skb ( skb ) ; return 0 ; } <S2SV_ModStart> A ] ; if ( nla -> nla_len < skb -> len ) { kfree_skb ( skb ) ; return 0 ; } <S2SV_ModEnd> nla = nla_find_nested,0
1588,"<S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } <S2SV_ModStart> ) break ; status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( DestroyImageList ( image ) ) ; } status = SetImageExtent ( image, image -> columns, image -> rows ) ; if ( status == MagickFalse ) { InheritException ( exception, & image -> exception ) ; return ( Destroy",0
1589,"<S2SV_ModStart> ""<message <S2SV_blank> type=\'chat\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'buddy1@localhost\'>"" ""<received <S2SV_blank> xmlns=\'urn:xmpp:carbons:2\'>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'buddy1@localhost/mobile\'>"" ""<body>test <S2SV_blank> carbon <S2SV_blank> from <S2SV_blank> recipient</body>"" ""</message>"" ""<forwarded <S2SV_blank> xmlns=\'urn:xmpp:forward:0\'>"" ""<message <S2SV_blank> id=\'prof_msg_7\' <S2SV_blank> xmlns=\'jabber:client\' <S2SV_blank> type=\'chat\' <S2SV_blank> lang=\'en\' <S2SV_blank> to=\'stabber@localhost/profanity\' <S2SV_blank> from=\'buddy1@localhost/mobile\'>""",0
1590,"<S2SV_ModStart> -> cac_id, serial -> len <S2SV_ModEnd> ) ; SC_FUNC_RETURN",1
1591,<S2SV_ModStart> = 0 ; <S2SV_ModEnd> tok -> altwarning <S2SV_ModStart> = 0 ; <S2SV_ModEnd> tok -> alterror <S2SV_ModStart> = 0 ; <S2SV_ModEnd> } <S2SV_null> <S2SV_null>,0
1592,"<S2SV_ModStart> maxBitrate ; } if ( av1 -> av1_config ) { GF_AV1Config * av1_cfg = AV1_DuplicateConfig ( av1 -> av1_config -> config ) ; if ( av1_cfg ) gf_odf_av1_cfg_write ( av1_cfg, & av1 -> emul_esd -> decoderConfig -> decoderSpecificInfo -> data, & av1 -> emul_esd -> decoderConfig -> dataLength ) ;",0
1593,"<S2SV_ModStart> { GF_LOG ( GF_LOG_ERROR <S2SV_ModEnd>, GF_LOG_CONTAINER, <S2SV_ModStart> ""[iso <S2SV_blank> file] <S2SV_blank> Missing <S2SV_blank> dref <S2SV_blank> box <S2SV_blank> in <S2SV_blank> dinf\\n"" ) ) ; ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; } else { ( ( GF_DataInformationBox * ) s ) -> dref = ( GF_DataReferenceBox * ) gf_isom_box_new ( GF_ISOM_BOX_TYPE_DREF ) ; }",0
1594,"<S2SV_ModStart> ] = '\\0' ; if ( r < 0 ) { SC_LOG_ERROR ( card -> ctx, SC_LOG_ERROR, ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; return r ; } <S2SV_ModStart> ] = '\\0' ; if ( r < 0 ) { SC_LOG_ERROR ( card -> ctx, SC_LOG_ERROR, ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; return r ; } <S2SV_ModStart> = '\\0' ; if ( r < 0 ) { SC_LOG_ERROR ( card -> ctx, SC_LOG_ERROR, ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; return r ; } <S2SV_ModStart> = '\\0' ; if ( r < 0 ) { SC_LOG_ERROR ( card -> ctx, SC_LOG_ERROR, ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; return r ; } if ( r < 0 ) { SC_LOG_ERROR ( card -> ctx, SC_LOG_ERROR, ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; return r ; } if ( r < 0 ) { SC_LOG_ERROR ( card -> ctx, SC_LOG_ERROR, ""read <S2SV_blank> document <S2SV_blank> number <S2SV_blank> failed"" ) ; return r ; }",0
1595,"<S2SV_ModStart> maxFrameNum ) ; <S2SV_ModEnd> dpb -> maxLongTermFrameIdx <S2SV_ModStart> NO_LONG_TERM_FRAME_INDICES ; dpb -> maxRefFrames = MAX ( maxRefFrames, 1 ) ; dpb -> maxRefFrames = MAX ( maxRefFrames, 1 ) ; dpb -> maxRefFrames = MAX ( maxRefFrames, 1 ) ; dpb -> maxRefFrames = MAX ( maxRefFrames, 1 ) ; dpb -> dpbSize = dpbSize ; dpb -> noReordering = noReordering ; dpb -> fullness = 0 ; dpb -> numRefFrames = 0 ; dpb -> prevRefFrameNum = 0 ; for ( i = 0 ; i < dpb -> dpbSize + 1 ; i ++ ) { if ( dpb -> buffer [ i ]. pAllocatedData == NULL ) return ( MEMORY_ALLOCATION_ERROR ) ; dpb -> buffer [ i ]. pAllocatedData = ALIGN ( dpb -> buffer [ i ]. pAllocatedData, 16 ) ; if ( dpb -> buffer [ i ]. pAllocatedData == NULL ) return ( MEMORY_ALLOCATION_ERROR ) ; dpb -> buffer [ i ]. data",0
1596,"<S2SV_ModStart> = 0 ; oe_socklen_t addrlen_out = 0 ; <S2SV_ModStart> OE_RAISE_ERRNO ( OE_EINVAL ) ; if (! addr ) OE_RAISE_ERRNO ( OE_EINVAL ) ; if ( addrlen ) addrlen_in = * addrlen ; if ( oe_syscall_getpeername_ocall ( & ret, sock -> host_fd, addr, addrlen_in, & addrlen_out )!= OE_OK ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; } if ( oe_syscall_getpeername_ocall ( & ret, sock -> host_fd, ( struct oe_sockaddr * ) addr, addrlen_in, & addrlen_out )!= OE_OK ) { OE_RAISE_ERRNO ( OE_EINVAL ) ; }",0
1597,<S2SV_ModStart> <S2SV_null> <S2SV_null>,0
1598,"<S2SV_ModStart> FALSE ; } if ( Stream_GetRemainingLength ( s ) < length ) { WLog_ERR ( TAG, ""Incorrect <S2SV_blank> TPDU <S2SV_blank> length <S2SV_blank> indicator."" ) ; return FALSE ; }",0
1599,"<S2SV_ModStart> final ; struct ipv6_txoptions * opt = NULL ; struct ipv6_txoptions_rcu * rcu <S2SV_ModStart> np ) ; rcu = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; rcu = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; if ( rcu == NULL ) { rcu = rcu_dereference_protected ( sk ) ; rcu = rcu_dereference_protected ( np -> opt, sock_owned_by_user ( sk ) ) ; rcu = rcu_dereference_protected ( sk -> sk_owned_by_user ( sk ) ) ; rcu = rcu_dereference_protected ( sk -> sk_owned_by_user ( sk ) ) ; rcu = rcu_dereference_protected ( sk -> sk_owned_by_user ) ; rcu = rcu_dereference_protected ( sk -> sk_owned_by_user ( sk ) ) ; rcu = rcu_dereference",0
1600,"<S2SV_ModStart> struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 ; struct pe_image_optional_hdr64 opt64 ; struct pe_image_optional_hdr32 opt32 ; <S2SV_ModStart> size_t fsize ; size_t hdr_size = sizeof ( struct pe_image_optional_hdr64 ) ; size_t hdr_size = sizeof ( struct pe_image_optional_hdr32 ) ; size_t hdr_size = sizeof ( struct pe_image_optional_hdr64 ) ; size_t hdr_size = sizeof ( struct pe_image_optional_hdr64 ) ; size_t hdr_size = sizeof ( struct pe_image_optional_hdr64 ) ; size_t hdr_size = sizeof ( struct pe_image_optional_hdr64 ) ; size_t hdr_size = sizeof ( struct pe_image_optional_hdr32 ) ; if (! ctx ) { cli_errmsg ( ""cli_scanpe: <S2SV_blank> ctx <S2SV_blank> == <S2SV_blank> NULL\\n"" ) ; return CL_ENULLARG ; } if (! ctx ) { cli_errmsg ( ""cli_scanpe: <S2SV_blank> ctx <S2SV_blank> == <S2SV_blank> NULL\\",0
1601,"<S2SV_ModStart> { dm9000WriteReg ( DM9000_EPAR <S2SV_ModEnd>, 0x40 | <S2SV_ModStart> address ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS | DM9000_EPCR_ERPRR <S2SV_ModEnd> ) ; while <S2SV_ModStart> ( dm9000ReadReg ( DM9000_EPCR ) & DM9000_EPCR_ERRE <S2SV_ModEnd> )!= 0 <S2SV_ModStart> { } dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; usleep <S2SV_ModStart> 5 ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS ) ; dm9000WriteReg ( DM9000_EPCR, DM9000_EPCR_EPOS <S2SV_ModEnd> ) ; }",0
1602,"<S2SV_ModStart> ; if ( striplength > t2p -> tiff_datasize ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> %lu <S2SV_blank> bytes <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> %s"", ( unsigned long ) striplength, TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( striplength > t2p -> tiff_datasize ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> %lu <S2SV_blank> bytes <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> "" ""t2p_readwrite_pdf_image, <S2SV_blank> %s"", ( unsigned long ) striplength, TIFFFileName ( input ) ) ; t2p -> t2p_error = T2P_ERR_ERROR ; return ( 0 ) ; } if ( striplength > t2p -> tiff_datasize ) { TIFFError ( TIFF2PDF_MODULE, ""Can\'t <S2SV_blank> allocate <S2SV_blank> %lu <S2SV_blank> bytes <S2SV_blank> of <S2SV_blank> memory <S2SV_blank> for <S2SV_blank> """,0
1603,"<S2SV_ModStart> new_parent ) { struct cred * old_cred ; <S2SV_ModStart> rcu_read_lock ( ) ; old_cred = __task_cred ( new_parent ) ; __ptrace_link ( child, new_parent, old_cred ) ; rcu_read_unlock ( ) ; } <S2SV_ModEnd> <S2SV_null> <S2SV_null>",0
1604,"<S2SV_ModStart> pcmk_ok ) { <S2SV_ModEnd> rc = cib_tls_signon <S2SV_ModStart> pcmk_ok ) { <S2SV_ModEnd> rc = cib_tls_signon <S2SV_ModStart> pcmk_ok ) { <S2SV_ModEnd> rc = cib_tls_signon <S2SV_ModStart> pcmk_ok ) { <S2SV_ModEnd> rc = cib_tls_signon <S2SV_ModStart> pcmk_ok ) { <S2SV_ModEnd> rc = cib_tls_signon <S2SV_ModStart> } } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> callback. token, CRM_OP_REGISTER, NULL, NULL, 0, NULL ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> callback. token, CRM_OP_REGISTER, NULL, NULL, NULL, 0, NULL ) ; free_xml ( hello ) ; } if ( rc == pcmk_ok ) { xmlNode * hello = cib_create_op ( 0, private -> callback. token, CRM_OP_REGISTER, NULL, NULL, NULL, 0, NULL ) ; free_xml ( hello ) ; }",0
1605,"<S2SV_ModStart> ubuf ; msg. msg_namelen = sizeof ( address ) ; if ( sock -> file -> f_flags & O_NONBLOCK ) flags |= MSG_DONTWAIT ; err = sock_recvmsg ( sock, & msg, size, flags ) ; if ( err >= 0 && addr!= NULL ) { err2 = move_addr_to_user ( & address, msg. msg_namelen, addr, addr_len ) ; if ( err2 < 0 ) err = err2 ; if ( addr!= NULL ) { err2 = move_addr_to_user ( & address, msg. msg_namelen, addr, addr_len ) ; if ( err2 < 0 ) err = err2 ; } if ( err >= 0 && addr!= NULL ) { err2 = move_addr_to_user ( & address, msg. msg_namelen, addr, addr_len ) ; if ( err2 < 0 ) err = err2 ; } if ( addr!= NULL ) { err2 = move_addr_to_user ( & address, msg. msg_namelen, addr, addr_len ) ; if ( err2 < 0 )",0
1606,"<S2SV_ModStart> int num00, tmp_err, n, sr = 0 ; int step_param = 3 ; int further_steps = ( MAX_MVSEARCH_STEPS - 1 ) - step_param ; int new_mv_mode_penalty = 256 ; const int quart_frm = MIN ( cpi -> common. width, cpi -> common. height ) ; while ( ( quart_frm << sr ) < MAX_FULL_PEL_VAL ) ++ sr ; step_param += sr ; further_steps -= sr ; v_fn_ptr. vf = get_block_variance_fn ( bsize ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x, & tmp_mv, ref_mv, & v_fn_ptr, 1 ) ; if ( tmp_err < INT_MAX ) tmp_err = vp9_get_mvpred_var ( x,",0
1607,"<S2SV_ModStart> { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> large <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; } if ( h -> size < 0x1000 ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; } if (! h -> writable ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; } if (! h -> writable ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank> hive <S2SV_blank> file"", filename ) ; goto error ; } if (! h -> writable ) { SET_ERRNO ( EINVAL, ""%s: <S2SV_blank> file <S2SV_blank> is <S2SV_blank> too <S2SV_blank> small <S2SV_blank> to <S2SV_blank> be <S2SV_blank> a <S2SV_blank> Windows <S2SV_blank> NT <S2SV_blank> Registry <S2SV_blank>",0
1608,<S2SV_ModStart> -> reqbody_inmemory_limit = ( child -> reqbody_inmemory_limit == NOT_SET? parent -> reqbody_inmemory_limit : child -> reqbody_inmemory_limit ) ; merged -> reqbody_no_files_limit = ( child -> reqbody_no_files_limit == NOT_SET? parent -> reqbody_no_files_limit : child -> reqbody_no_files_limit ) ; merged -> reqbody_access = ( child -> reqbody_access == NOT_SET? parent -> reqbody_access : child -> reqbody_access ) ; merged -> resbody_access = ( child -> resbody_access == NOT_SET? parent -> resbody_no_files_limit : child -> resbody_no_files_limit ) ; merged -> if_limit_action = ( child -> if_limit_action == NOT_SET? parent -> if_limit_action : child -> if_limit_action ) ; merged -> if_limit_action = ( child -> if_limit_action == NOT_SET? parent -> if_limit_action : child -> if_limit_action ) ; merged -> if_limit_,0
1609,"<S2SV_ModStart> ; if ( msg_sys -> msg_name ) { memcpy ( & address, msg_sys -> msg_name, sizeof ( struct sockaddr_storage ) ) ; memcpy ( & address, msg_sys -> msg_name, sizeof ( struct sockaddr_storage ) ) ; } else if ( msg_sys -> msg_name ) { memcpy ( & address, msg_sys -> msg_name, sizeof ( struct sockaddr_storage ) ) ; } else if ( msg_sys -> msg_name ) { memcpy ( & address, msg_sys -> msg_name, sizeof ( struct sockaddr_storage ) ) ; memcpy ( & address, msg_sys -> msg_name, sizeof ( struct sockaddr_storage ) ) ; } else if ( msg_sys -> msg_name ) { memcpy ( & address, msg_sys -> msg_name, sizeof ( struct sockaddr_storage ) ) ; } else if ( msg_sys -> msg_name ) { memcpy ( & address, msg_sys -> msg_name, sizeof ( struct sockaddr_storage ) ) ; memcpy ( & address, msg_sys -> msg_name",0
1610,"<S2SV_ModStart>, one ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" <S2SV_ModStart> number_planes_filled ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile"" ) ; if ( number_planes_filled > GetBlobSize ( image ) ) ThrowReaderException ( CorruptImageError, ""InsufficientImageDataInFile""",0
1611,"<S2SV_ModStart> 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0 || ( r = sshbuf_put_u32 ( b, comp -> enabled ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> name ) )!= 0 || ( r = sshbuf_put_cstring ( b, comp -> type ) )!= 0",0
1612,"<S2SV_ModStart> ) ) { if ( smatch ( option, "" <S2SV_blank> =\\t,"" ) ) { ovalue = strim ( ovalue, ""\\""\'"", MPR_TRIM_BOTH ) ; if ( smatch ( option, ""event"" ) ) { httpSetTraceEventLevel ( route -> trace, option, atoi ( ovalue ) ) ; } else { httpSetTraceEventLevel ( route -> trace, option, atoi ( ovalue ) ) ; } }",0
1613,"<S2SV_ModStart> cib_client_t * client = NULL ; crm_trace ( ""Cleaning <S2SV_blank> up <S2SV_blank> after <S2SV_blank> client <S2SV_blank> disconnect: <S2SV_blank> %s/%s"", crm_str ( client -> name ), client -> id ) ; if ( client == NULL ) { return ; } crm_trace ( ""Cleaning <S2SV_blank> up <S2SV_blank> after <S2SV_blank> client <S2SV_blank> disconnect: <S2SV_blank> %s/%s"", crm_str ( client -> name ), client -> id ) ; if ( client -> id!= NULL ) { if ( g_hash_table_remove ( client_list, client -> id ) ) { g_hash_table_remove ( client_list, client -> id ) ; crm_err ( ""Client <S2SV_blank> %s <S2SV_blank> not <S2SV_blank> found <S2SV_blank> in <S2SV_blank> the <S2SV_blank> hashtable"", client -> name ) ; } crm_trace ( ""Destroying <S2SV_blank> %s <S2SV_blank> (%p)"", client -> name, client -> id ) ; num_clients -- ; crm_trace ( ""Num <S2SV_blank> unfree\'d <S2SV_blank> clients: <S2SV_blank> %d"", num_clients ) ; free ( client ) ; } crm_trace ( ""Freed <S2SV_blank> the <S2SV_blank> cib <S2SV_blank> client"" ) ;",0
1614,"<S2SV_ModStart> * uv ; if ( thread -> twups == NULL ) thread -> twups = NULL ; <S2SV_ModStart> next ) { if ( iswhite ( uv ) ) markvalue ( g, uv -> v ) ; } else if ( iswhite ( uv ) ) markvalue ( g, uv -> v ) ; else markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u. open. next ) { work ++ ; if (! iswhite ( uv ) ) markvalue ( g, uv -> u.",0
